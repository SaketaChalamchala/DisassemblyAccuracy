;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	B23AC5D056A31A1C65EBD50E27908BB8
; Input	CRC32 :	440AD20F

; File Name   :	C:\compspace\compare\openvpn\dlls\full\openvpn-gui.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 0000D844 (  55364.)
; Section size in file		: 0000DA00 (  55808.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401010	proc near		; DATA XREF: .CRT:00431010o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		xor	eax, eax
		cmp	word ptr ds:400000h, 5A4Dh
		mov	ds:dword_4125C8, 1
		mov	ds:dword_4125C4, 1
		mov	ds:dword_4125C0, 1
		mov	ds:dword_4125D0, 1
		jz	short loc_4010B0

loc_401048:				; CODE XREF: sub_401010+B6j
					; sub_401010+C8j ...
		mov	ds:dword_412008, eax
		mov	eax, ds:dword_4125D4
		test	eax, eax
		jz	short loc_4010A0
		mov	[esp+1Ch+var_1C], 2
		call	__set_app_type

loc_401062:				; CODE XREF: sub_401010+9Cj
		mov	[esp+1Ch+var_1C], 0FFFFFFFFh
		call	sub_40D600
		mov	edx, ds:dword_4125D8
		mov	ds:dword_42E8C8, eax
		mov	ds:dword_42E8CC, eax
		mov	eax, ds:_fmode
		mov	[eax], edx
		call	sub_40D840
		cmp	dword_40F25C, 1
		jz	short loc_401100
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4010A0:				; CODE XREF: sub_401010+44j
		mov	[esp+1Ch+var_1C], 1
		call	__set_app_type
		jmp	short loc_401062
; ---------------------------------------------------------------------------
		align 10h

loc_4010B0:				; CODE XREF: sub_401010+36j
		mov	edx, ds:40003Ch
		cmp	dword ptr [edx+400000h], 4550h
		lea	ecx, [edx+400000h]
		jnz	short loc_401048
		movzx	edx, word ptr [ecx+18h]
		cmp	dx, 10Bh
		jz	short loc_401112
		cmp	dx, 20Bh
		jnz	loc_401048
		cmp	dword ptr [ecx+84h], 0Eh
		jbe	loc_401048
		mov	edx, [ecx+0F8h]
		xor	eax, eax
		test	edx, edx
		setnz	al
		jmp	loc_401048
; ---------------------------------------------------------------------------
		align 10h

loc_401100:				; CODE XREF: sub_401010+81j
		mov	[esp+1Ch+var_1C], offset sub_40D8B0
		call	sub_40D8A0
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_401112:				; CODE XREF: sub_401010+C1j
		cmp	dword ptr [ecx+74h], 0Eh
		jbe	loc_401048
		mov	ecx, [ecx+0E8h]
		xor	eax, eax
		test	ecx, ecx
		setnz	al
		jmp	loc_401048
sub_401010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401130	proc near		; DATA XREF: .CRT:00431004o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		sub	esp, 2Ch
		mov	eax, ds:dword_4125DC
		mov	[esp+2Ch+var_1C], offset dword_412000
		mov	[esp+2Ch+var_24], offset dword_412014
		mov	[esp+2Ch+var_28], offset dword_412018
		mov	ds:dword_412000, eax
		mov	eax, ds:dword_4125E0
		mov	[esp+2Ch+var_2C], offset dword_41201C
		mov	[esp+2Ch+var_20], eax
		call	__wgetmainargs
		mov	ds:dword_412010, eax
		add	esp, 2Ch
		retn
sub_401130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401180	proc near		; CODE XREF: start+15j	.text:00401505j

dwMilliseconds	= dword	ptr -88h
Src		= dword	ptr -84h
Size		= dword	ptr -80h
var_74		= dword	ptr -74h
var_6D		= byte ptr -6Dh
var_6C		= dword	ptr -6Ch
var_5C		= byte ptr -5Ch
var_30		= byte ptr -30h
var_2C		= word ptr -2Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		mov	ecx, 11h
		push	edi
		push	esi
		lea	edx, [ebp+var_5C]
		push	ebx
		mov	edi, edx
		sub	esp, 7Ch
		rep stosd
		mov	al, 30h
		call	sub_40E640
		sub	esp, eax
		lea	eax, [esp+88h+var_6D]
		and	eax, 0FFFFFFF0h
		mov	dword ptr [eax], 0CCCCCCCCh
		mov	dword ptr [eax+4], 0CCCCCCCCh
		mov	dword ptr [eax+8], 0CCCCCCCCh
		mov	dword ptr [eax+0Ch], 0CCCCCCCCh
		mov	dword ptr [eax+10h], 0CCCCCCCCh
		mov	dword ptr [eax+14h], 0CCCCCCCCh
		mov	dword ptr [eax+18h], 0CCCCCCCCh
		mov	dword ptr [eax+1Ch], 0CCCCCCCCh
		and	esp, 0FFFFFFF0h
		mov	esi, ds:dword_4125D4
		test	esi, esi
		jnz	loc_401489

loc_4011EF:				; CODE XREF: sub_401180+315j
		mov	eax, large fs:18h
		xor	esi, esi
		mov	ebx, [eax+4]
		mov	edi, ds:Sleep
		jmp	short loc_401216
; ---------------------------------------------------------------------------

loc_401202:				; CODE XREF: sub_401180+A2j
		cmp	eax, ebx
		jz	loc_40142B
		mov	[esp+88h+dwMilliseconds], 3E8h ; dwMilliseconds
		call	edi ; Sleep
		sub	esp, 4

loc_401216:				; CODE XREF: sub_401180+80j
		mov	eax, esi
		lock cmpxchg ds:dword_42E8D0, ebx
		test	eax, eax
		jnz	short loc_401202
		mov	eax, ds:dword_42E8D4
		xor	ebx, ebx
		cmp	eax, 1
		jz	loc_40143E

loc_401234:				; CODE XREF: sub_401180+2B8j
		mov	eax, ds:dword_42E8D4
		test	eax, eax
		jz	loc_40149A
		mov	ds:dword_412004, 1

loc_40124B:				; CODE XREF: sub_401180+338j
		mov	eax, ds:dword_42E8D4
		cmp	eax, 1
		jz	loc_401458

loc_401259:				; CODE XREF: sub_401180+2D2j
		test	ebx, ebx
		jz	loc_40147E

loc_401261:				; CODE XREF: sub_401180+2F8j
					; sub_401180+304j
		mov	eax, ds:off_410F8C
		test	eax, eax
		jz	short loc_401286
		mov	[esp+88h+Size],	0
		mov	[esp+88h+Src], 2
		mov	[esp+88h+dwMilliseconds], 0
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_401286:				; CODE XREF: sub_401180+E8j
		call	sub_40DBB0
		mov	[esp+88h+dwMilliseconds], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	ds:dword_4125E4, eax
		mov	[esp+88h+dwMilliseconds], offset nullsub_1
		call	near ptr off_40F264
		call	sub_40DE80
		mov	eax, ds:_wcmdln
		mov	ds:dword_41296C, 400000h
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_40130C
		xor	ecx, ecx
		jmp	short loc_4012E1
; ---------------------------------------------------------------------------
		align 10h

loc_4012D0:				; CODE XREF: sub_401180+168j
		test	dx, dx
		jz	short loc_401307
		test	ecx, ecx
		jz	short loc_4012F8
		mov	ecx, 1

loc_4012DE:				; CODE XREF: sub_401180+176j
		add	eax, 2

loc_4012E1:				; CODE XREF: sub_401180+148j
		movzx	edx, word ptr [eax]
		cmp	dx, 20h
		jbe	short loc_4012D0
		mov	ebx, ecx
		xor	ebx, 1
		cmp	dx, 22h
		cmovz	ecx, ebx
		jmp	short loc_4012DE
; ---------------------------------------------------------------------------

loc_4012F8:				; CODE XREF: sub_401180+157j
					; sub_401180+185j
		add	eax, 2
		movzx	edi, word ptr [eax]
		lea	edx, [edi-1]
		cmp	dx, 1Fh
		jbe	short loc_4012F8

loc_401307:				; CODE XREF: sub_401180+153j
		mov	ds:dword_412968, eax

loc_40130C:				; CODE XREF: sub_401180+144j
		mov	ebx, ds:dword_4125D4
		test	ebx, ebx
		jz	short loc_40132B
		movzx	edx, [ebp+var_2C]
		mov	eax, 0Ah
		test	[ebp+var_30], 1
		cmovnz	eax, edx
		mov	dword_40F000, eax

loc_40132B:				; CODE XREF: sub_401180+194j
		mov	eax, ds:dword_41201C
		mov	[ebp-70h], eax
		mov	edi, eax
		lea	eax, ds:4[eax*4]
		mov	[ebp+var_74], eax
		mov	[esp+88h+dwMilliseconds], eax ;	Size
		call	malloc
		test	edi, edi
		mov	ebx, ds:dword_412018
		mov	[ebp+var_6C], eax
		jle	loc_4014BD
		xor	edi, edi
		mov	esi, edi
		lea	esi, [esi+0]

loc_401360:				; CODE XREF: sub_401180+227j
		mov	eax, [ebx+esi*4]
		cmp	word ptr [eax],	0
		jz	loc_401421
		mov	ecx, 1

loc_401372:				; CODE XREF: sub_401180+1FBj
		add	ecx, 1
		cmp	word ptr [eax+ecx*2-2],	0
		jnz	short loc_401372
		lea	edi, [ecx+ecx]

loc_401380:				; CODE XREF: sub_401180+2A6j
		mov	[esp+88h+dwMilliseconds], edi ;	Size
		call	malloc
		mov	edx, [ebp+var_6C]
		mov	[edx+esi*4], eax
		mov	edx, [ebx+esi*4]
		add	esi, 1
		mov	[esp+88h+Size],	edi ; Size
		mov	[esp+88h+dwMilliseconds], eax ;	Dst
		mov	[esp+88h+Src], edx ; Src
		call	memcpy
		cmp	esi, [ebp-70h]
		jnz	short loc_401360
		mov	eax, [ebp+var_74]
		sub	eax, 4

loc_4013AF:				; CODE XREF: sub_401180+33Fj
		mov	edi, [ebp+var_6C]
		mov	dword ptr [edi+eax], 0
		mov	ds:dword_412018, edi
		call	sub_40DF10
		mov	edx, ds:dword_412014
		mov	eax, ds:__winitenv
		mov	[eax], edx
		mov	eax, ds:dword_41201C
		mov	ecx, ds:dword_412014
		mov	edx, ds:dword_412018
		mov	[esp+88h+dwMilliseconds], eax
		mov	[esp+88h+Size],	ecx
		mov	[esp+88h+Src], edx
		call	sub_40DF30
		mov	ecx, ds:dword_412008
		test	ecx, ecx
		mov	ds:dword_41200C, eax
		jz	loc_4014C4
		mov	edx, ds:dword_412004
		test	edx, edx
		jnz	short loc_401419
		call	_cexit
		mov	eax, ds:dword_41200C

loc_401419:				; CODE XREF: sub_401180+28Dj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_401421:				; CODE XREF: sub_401180+1E7j
		mov	edi, 2
		jmp	loc_401380
; ---------------------------------------------------------------------------

loc_40142B:				; CODE XREF: sub_401180+84j
		mov	eax, ds:dword_42E8D4
		mov	ebx, 1
		cmp	eax, 1
		jnz	loc_401234

loc_40143E:				; CODE XREF: sub_401180+AEj
		mov	[esp+88h+dwMilliseconds], 1Fh
		call	_amsg_exit
		mov	eax, ds:dword_42E8D4
		cmp	eax, 1
		jnz	loc_401259

loc_401458:				; CODE XREF: sub_401180+D3j
		mov	[esp+88h+Src], offset dword_431008
		mov	[esp+88h+dwMilliseconds], offset dword_431000
		call	_initterm
		test	ebx, ebx
		mov	ds:dword_42E8D4, 2
		jnz	loc_401261

loc_40147E:				; CODE XREF: sub_401180+DBj
		xchg	ebx, ds:dword_42E8D0
		jmp	loc_401261
; ---------------------------------------------------------------------------

loc_401489:				; CODE XREF: sub_401180+69j
		mov	[esp+88h+dwMilliseconds], edx ;	lpStartupInfo
		call	ds:GetStartupInfoW
		sub	esp, 4
		jmp	loc_4011EF
; ---------------------------------------------------------------------------

loc_40149A:				; CODE XREF: sub_401180+BBj
		mov	ds:dword_42E8D4, 1
		mov	[esp+88h+Src], offset dword_431018
		mov	[esp+88h+dwMilliseconds], offset dword_43100C
		call	_initterm
		jmp	loc_40124B
; ---------------------------------------------------------------------------

loc_4014BD:				; CODE XREF: sub_401180+1D2j
		xor	eax, eax
		jmp	loc_4013AF
; ---------------------------------------------------------------------------

loc_4014C4:				; CODE XREF: sub_401180+27Fj
		mov	[esp+88h+dwMilliseconds], eax ;	Code
		call	exit
sub_401180	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public start
start		proc near
		sub	esp, 0Ch
		mov	ds:dword_4125D4, 1
		call	sub_40DF70
		add	esp, 0Ch
		jmp	sub_401180
start		endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	ds:dword_4125D4, 0
		call	sub_40DF70
		add	esp, 0Ch
		jmp	sub_401180
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401510	proc near		; CODE XREF: sub_40E810+6p

lpModuleName	= dword	ptr -1Ch
lpProcName	= dword	ptr -18h

		mov	eax, dword_40F270
		test	eax, eax
		jz	short locret_40155C
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+1Ch+lpModuleName],	offset ModuleName ; "libgcj-13.dll"
		call	ds:GetModuleHandleA
		mov	edx, 0
		sub	esp, 4
		test	eax, eax
		jz	short loc_40154E
		mov	[esp+1Ch+lpProcName], offset ProcName ;	"_Jv_RegisterClasses"
		mov	[esp+1Ch+lpModuleName],	eax ; hModule
		call	ds:GetProcAddress
		sub	esp, 8
		mov	edx, eax

loc_40154E:				; CODE XREF: sub_401510+26j
		test	edx, edx
		jz	short locret_40155B
		mov	[esp+1Ch+lpModuleName],	offset dword_40F270
		call	edx

locret_40155B:				; CODE XREF: sub_401510+40j
		leave

locret_40155C:				; CODE XREF: sub_401510+7j
		rep retn
sub_401510	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_401560()
sub_401560	proc near		; DATA XREF: sub_40E810+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401560	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401570	proc near		; CODE XREF: sub_401623+1D7p

Str1		= dword	ptr -28h
Str2		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		jmp	loc_401604
; ---------------------------------------------------------------------------

loc_401582:				; CODE XREF: sub_401570+A6j
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		jmp	short loc_4015D3
; ---------------------------------------------------------------------------

loc_401592:				; CODE XREF: sub_401570+67j
		mov	eax, [ebp+var_C]
		mov	eax, ds:Str2[eax*4]
		mov	edx, [ebp+var_14]
		imul	edx, 894h
		add	edx, 0C0h
		add	edx, offset Str2
		add	edx, 8
		mov	[esp+28h+Str2],	eax ; Str2
		mov	[esp+28h+Str1],	edx ; Str1
		mov	eax, ds:_wcsicmp
		call	eax ; _wcsicmp
		test	eax, eax
		jnz	short loc_4015CF
		mov	[ebp+var_10], 1
		jmp	short loc_4015D9
; ---------------------------------------------------------------------------

loc_4015CF:				; CODE XREF: sub_401570+54j
		add	[ebp+var_14], 1

loc_4015D3:				; CODE XREF: sub_401570+20j
		cmp	[ebp+var_14], 31h
		jle	short loc_401592

loc_4015D9:				; CODE XREF: sub_401570+5Dj
		cmp	[ebp+var_10], 0
		jnz	short loc_401600
		mov	eax, [ebp+var_C]
		mov	eax, ds:Str2[eax*4]
		mov	[esp+28h+Str2],	eax
		mov	[esp+28h+Str1],	4D6h
		call	sub_405340
		mov	eax, 0
		jmp	short locret_401621
; ---------------------------------------------------------------------------

loc_401600:				; CODE XREF: sub_401570+6Dj
		add	[ebp+var_C], 1

loc_401604:				; CODE XREF: sub_401570+Dj
		mov	eax, [ebp+var_C]
		mov	eax, ds:Str2[eax*4]
		test	eax, eax
		jz	short loc_40161C
		cmp	[ebp+var_C], 31h
		jle	loc_401582

loc_40161C:				; CODE XREF: sub_401570+A0j
		mov	eax, 1

locret_401621:				; CODE XREF: sub_401570+8Ej
		leave
		retn
sub_401570	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_401623(HINSTANCE, int, int,	int)
sub_401623	proc near		; CODE XREF: sub_40DF30+28p

lpModuleName	= dword	ptr -0C8h
lpWindowName	= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
dwStyle		= dword	ptr -0BCh
X		= dword	ptr -0B8h
Y		= dword	ptr -0B4h
nWidth		= dword	ptr -0B0h
nHeight		= dword	ptr -0ACh
hWndParent	= dword	ptr -0A8h
hMenu		= dword	ptr -0A4h
hInstance	= dword	ptr -0A0h
lpParam		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= WNDCLASSEXW ptr -58h
Msg		= MSG ptr -28h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0C8h
		mov	[ebp+var_98], 0
		mov	[ebp+var_94], offset sub_402417
		mov	[ebp+var_90], 4
		mov	[ebp+var_8C], offset sub_402465
		mov	[ebp+var_88], 5
		mov	[ebp+var_84], offset sub_4024B3
		mov	[ebp+var_80], 8
		mov	[ebp+var_7C], offset sub_4026B9
		mov	[ebp+var_78], 6
		mov	[ebp+var_74], offset sub_402DD9
		mov	[ebp+var_70], 7
		mov	[ebp+var_6C], offset sub_40AACC
		mov	[ebp+var_68], 1
		mov	[ebp+var_64], offset sub_402EC6
		mov	[ebp+var_60], 0
		mov	[ebp+var_5C], 0
		lea	eax, [ebp+var_98]
		mov	[esp+0C8h+lpModuleName], eax
		call	sub_40BE8C
		mov	[esp+0C8h+lpModuleName], offset	Str2 ; void *
		call	sub_4080FE
		mov	eax, [ebp+arg_0]
		mov	ds:hInstance, eax
		mov	[esp+0C8h+lpModuleName], offset	LibFileName ; "RICHED20.DLL"
		mov	eax, ds:GetModuleHandleW
		call	eax ; GetModuleHandleW
		sub	esp, 4
		test	eax, eax
		jnz	short loc_401710
		mov	[esp+0C8h+lpModuleName], offset	LibFileName ; "RICHED20.DLL"
		mov	eax, ds:LoadLibraryW
		call	eax ; LoadLibraryW
		sub	esp, 4
		mov	[esp+0C8h+lpModuleName], offset	aS ; "s"
		call	sub_402320
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 4FFFFh
		ja	short loc_401747
		jmp	short loc_401728
; ---------------------------------------------------------------------------

loc_401710:				; CODE XREF: sub_401623+C0j
		mov	[esp+0C8h+lpModuleName], 516h
		call	sub_405340
		mov	[esp+0C8h+lpModuleName], 1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_401728:				; CODE XREF: sub_401623+EBj
		mov	eax, [ebp+var_C]
		mov	[esp+0C8h+lpWindowName], eax
		mov	[esp+0C8h+lpModuleName], 517h
		call	sub_405340
		mov	[esp+0C8h+lpModuleName], 1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_401747:				; CODE XREF: sub_401623+E9j
		mov	eax, ds:GetCommandLineW
		call	eax ; GetCommandLineW
		mov	[esp+0C8h+lpWindowName], eax
		mov	[esp+0C8h+lpModuleName], offset	Str2
		call	sub_408121
		mov	[esp+0C8h+lpWindowName], 0 ; char
		mov	[esp+0C8h+lpModuleName], offset	ClassName ; "OpenVPN-GUI"
		mov	eax, ds:FindWindowW
		call	eax ; FindWindowW
		sub	esp, 8
		test	eax, eax
		jz	short loc_401793
		mov	[esp+0C8h+lpModuleName], 518h
		call	sub_405340
		mov	[esp+0C8h+lpModuleName], 1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_401793:				; CODE XREF: sub_401623+156j
		call	sub_40ACDF
		test	eax, eax
		jnz	short loc_4017A8
		mov	[esp+0C8h+lpModuleName], 1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_4017A8:				; CODE XREF: sub_401623+177j
		call	sub_4049C0
		test	eax, eax
		jnz	short loc_4017BD
		mov	[esp+0C8h+lpModuleName], 1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_4017BD:				; CODE XREF: sub_401623+18Cj
		mov	[esp+0C8h+lpModuleName], offset	PathName ; MaxCount
		call	sub_40CC95
		test	eax, eax
		jnz	short loc_4017F5
		mov	[esp+0C8h+var_C0], offset PathName
		mov	[esp+0C8h+lpWindowName], offset	asc_410056 ; "l"
		mov	[esp+0C8h+lpModuleName], 51Dh
		call	sub_405340
		mov	[esp+0C8h+lpModuleName], 1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_4017F5:				; CODE XREF: sub_401623+1A8j
		call	sub_40D105
		call	sub_401570
		test	eax, eax
		jnz	short loc_40180F
		mov	[esp+0C8h+lpModuleName], 1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_40180F:				; CODE XREF: sub_401623+1DEj
		call	sub_40A2CD
		call	OPENSSL_add_all_algorithms_noconf
		call	ERR_load_crypto_strings
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_58.hInstance],	eax
		mov	[ebp+var_58.lpszClassName], offset ClassName ; "OpenVPN-GUI"
		mov	[ebp+var_58.lpfnWndProc], offset sub_401ADE
		mov	[ebp+var_58.style], 8
		mov	[ebp+var_58.cbSize], 30h
		mov	[esp+0C8h+lpModuleName], 5Ah
		call	sub_405370
		mov	[ebp+var_58.hIcon], eax
		mov	[esp+0C8h+lpModuleName], 5Ah
		call	sub_405370
		mov	[ebp+var_58.hIconSm], eax
		mov	[esp+0C8h+lpWindowName], 7F00h ; lpCursorName
		mov	[esp+0C8h+lpModuleName], 0 ; hInstance
		mov	eax, ds:LoadCursorW
		call	eax ; LoadCursorW
		sub	esp, 8
		mov	[ebp+var_58.hCursor], eax
		mov	[ebp+var_58.lpszMenuName], 0
		mov	[ebp+var_58.cbClsExtra], 0
		mov	[ebp+var_58.cbWndExtra], 0
		mov	[ebp+var_58.hbrBackground], 10h
		lea	eax, [ebp+var_58]
		mov	[esp+0C8h+lpModuleName], eax ; WNDCLASSEXW *
		mov	eax, ds:RegisterClassExW
		call	eax ; RegisterClassExW
		sub	esp, 4
		test	ax, ax
		jnz	short loc_4018B5
		mov	eax, 1
		jmp	locret_40196E
; ---------------------------------------------------------------------------

loc_4018B5:				; CODE XREF: sub_401623+286j
		mov	[esp+0C8h+lpParam], 0 ;	lpParam
		mov	eax, [ebp+arg_0]
		mov	[esp+0C8h+hInstance], eax ; hInstance
		mov	[esp+0C8h+hMenu], 0 ; hMenu
		mov	[esp+0C8h+hWndParent], 0 ; hWndParent
		mov	[esp+0C8h+nHeight], 0C8h ; nHeight
		mov	[esp+0C8h+nWidth], 0E6h	; nWidth
		mov	[esp+0C8h+Y], 80000000h	; Y
		mov	[esp+0C8h+X], 80000000h	; X
		mov	[esp+0C8h+dwStyle], 0CF0000h ; dwStyle
		mov	[esp+0C8h+var_C0], offset WindowName ; "OpenVPN"
		mov	[esp+0C8h+lpWindowName], offset	ClassName ; "OpenVPN-GUI"
		mov	[esp+0C8h+lpModuleName], 0 ; dwExStyle
		mov	eax, ds:CreateWindowExW
		call	eax ; CreateWindowExW
		sub	esp, 30h
		jmp	short loc_40193F
; ---------------------------------------------------------------------------

loc_40191F:				; CODE XREF: sub_401623+346j
		lea	eax, [ebp+Msg]
		mov	[esp+0C8h+lpModuleName], eax ; lpMsg
		mov	eax, ds:TranslateMessage
		call	eax ; TranslateMessage
		sub	esp, 4
		lea	eax, [ebp+Msg]
		mov	[esp+0C8h+lpModuleName], eax ; lpMsg
		mov	eax, ds:DispatchMessageW
		call	eax ; DispatchMessageW
		sub	esp, 4

loc_40193F:				; CODE XREF: sub_401623+2FAj
		mov	[esp+0C8h+dwStyle], 0 ;	wMsgFilterMax
		mov	[esp+0C8h+var_C0], 0 ; wMsgFilterMin
		mov	[esp+0C8h+lpWindowName], 0 ; hWnd
		lea	eax, [ebp+Msg]
		mov	[esp+0C8h+lpModuleName], eax ; lpMsg
		mov	eax, ds:GetMessageW
		call	eax ; GetMessageW
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_40191F
		mov	eax, [ebp+Msg.wParam]

locret_40196E:				; CODE XREF: sub_401623+28Dj
		leave
		retn	10h
sub_401623	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401972	proc near		; CODE XREF: sub_401ADE+334p
					; sub_401ADE:loc_401E3Cp

dwMilliseconds	= dword	ptr -28h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		jmp	short loc_4019B8
; ---------------------------------------------------------------------------

loc_401981:				; CODE XREF: sub_401972+4Ej
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_413280
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_4019B4
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+28h+dwMilliseconds], eax
		call	sub_4047A6

loc_4019B4:				; CODE XREF: sub_401972+22j
		add	[ebp+var_C], 1

loc_4019B8:				; CODE XREF: sub_401972+Dj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	short loc_401981
		mov	[ebp+var_C], 0
		jmp	short loc_4019F8
; ---------------------------------------------------------------------------

loc_4019CB:				; CODE XREF: sub_401972+8Aj
		mov	[esp+28h+dwMilliseconds], 0
		call	sub_40829E
		mov	edx, ds:dword_42D730
		cmp	eax, edx
		jnz	short loc_4019E3
		jmp	short locret_4019FE
; ---------------------------------------------------------------------------

loc_4019E3:				; CODE XREF: sub_401972+6Dj
		add	[ebp+var_C], 1
		mov	[esp+28h+dwMilliseconds], 0FAh ; dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4

loc_4019F8:				; CODE XREF: sub_401972+57j
		cmp	[ebp+var_C], 13h
		jle	short loc_4019CB

locret_4019FE:				; CODE XREF: sub_401972+6Fj
		leave
		retn
sub_401972	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401A00	proc near		; CODE XREF: sub_401ADE:loc_401C21p

lpThreadId	= dword	ptr -28h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		jmp	short loc_401A46
; ---------------------------------------------------------------------------

loc_401A0F:				; CODE XREF: sub_401A00+4Ej
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_413280
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_401A42
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+28h+lpThreadId], eax ; lpThreadId
		call	sub_403F71

loc_401A42:				; CODE XREF: sub_401A00+22j
		add	[ebp+var_C], 1

loc_401A46:				; CODE XREF: sub_401A00+Dj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	short loc_401A0F
		mov	eax, 1
		leave
		retn
sub_401A00	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401A57	proc near		; CODE XREF: sub_401ADE+3A5p
					; sub_401ADE+46Fp

lpThreadId	= dword	ptr -28h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		jmp	short loc_401AD2
; ---------------------------------------------------------------------------

loc_401A66:				; CODE XREF: sub_401A57+83j
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_413280
		mov	eax, [eax+0Ch]
		cmp	eax, 6
		jnz	short loc_401A9A
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+28h+lpThreadId], eax ; lpThreadId
		call	sub_403F71

loc_401A9A:				; CODE XREF: sub_401A57+23j
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_413280
		mov	eax, [eax+0Ch]
		cmp	eax, 5
		jnz	short loc_401ACE
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+28h+lpThreadId], eax
		call	sub_4047A6

loc_401ACE:				; CODE XREF: sub_401A57+57j
		add	[ebp+var_C], 1

loc_401AD2:				; CODE XREF: sub_401A57+Dj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	short loc_401A66
		leave
		retn
sub_401A57	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_401ADE(HWND	hWnd, UINT, WPARAM, LPARAM)
sub_401ADE	proc near		; DATA XREF: sub_401623+208o

lpString	= dword	ptr -28h
Msg		= dword	ptr -24h
wParam		= dword	ptr -20h
lParam		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
hWnd		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_4]
		cmp	eax, 16h
		jz	loc_401E3C
		cmp	eax, 16h
		ja	short loc_401B24
		cmp	eax, 2
		jz	loc_401E04
		cmp	eax, 2
		ja	short loc_401B0D
		cmp	eax, 1
		jz	short loc_401B61
		jmp	loc_401F59
; ---------------------------------------------------------------------------

loc_401B0D:				; CODE XREF: sub_401ADE+23j
		cmp	eax, 10h
		jz	loc_401DF4
		cmp	eax, 11h
		jz	loc_401E32
		jmp	loc_401F59
; ---------------------------------------------------------------------------

loc_401B24:				; CODE XREF: sub_401ADE+15j
		cmp	eax, 218h
		jz	loc_401E90
		cmp	eax, 218h
		ja	short loc_401B46
		cmp	eax, 111h
		jz	loc_401C6C
		jmp	loc_401F59
; ---------------------------------------------------------------------------

loc_401B46:				; CODE XREF: sub_401ADE+56j
		cmp	eax, 2B1h
		jz	loc_401E4B
		cmp	eax, 8001h
		jz	loc_401C5C
		jmp	loc_401F59
; ---------------------------------------------------------------------------

loc_401B61:				; CODE XREF: sub_401ADE+28j
		mov	eax, [ebp+hWnd]
		mov	ds:hWnd, eax
		mov	[esp+28h+lpString], offset String ; lpString
		mov	eax, ds:RegisterWindowMessageW
		call	eax ; RegisterWindowMessageW
		sub	esp, 4
		mov	ds:dword_412020, eax
		mov	[esp+28h+Msg], 0
		mov	eax, [ebp+hWnd]
		mov	[esp+28h+lpString], eax
		call	WTSRegisterSessionNotification
		sub	esp, 8
		mov	[esp+28h+lpString], 5Ah
		call	sub_405370
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_401BF8
		mov	eax, [ebp+var_10]
		mov	[esp+28h+lParam], eax ;	lParam
		mov	[esp+28h+wParam], 0 ; wParam
		mov	[esp+28h+Msg], 80h ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+28h+lpString], eax	; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	eax, [ebp+var_10]
		mov	[esp+28h+lParam], eax ;	lParam
		mov	[esp+28h+wParam], 1 ; wParam
		mov	[esp+28h+Msg], 80h ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+28h+lpString], eax	; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h

loc_401BF8:				; CODE XREF: sub_401ADE+CAj
		call	sub_40592C
		call	sub_4064B3
		movzx	eax, ds:word_42E3C8
		cmp	ax, 31h
		jz	short loc_401C1C
		movzx	eax, ds:word_42E3D8
		cmp	ax, 31h
		jnz	short loc_401C21

loc_401C1C:				; CODE XREF: sub_401ADE+12Fj
		call	sub_40775C

loc_401C21:				; CODE XREF: sub_401ADE+13Cj
		call	sub_401A00
		test	eax, eax
		jnz	short loc_401C57
		mov	[esp+28h+lParam], 0 ; lParam
		mov	[esp+28h+wParam], 0 ; wParam
		mov	[esp+28h+Msg], 10h ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+28h+lpString], eax	; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		jmp	loc_401F96
; ---------------------------------------------------------------------------

loc_401C57:				; CODE XREF: sub_401ADE+14Aj
		jmp	loc_401F96
; ---------------------------------------------------------------------------

loc_401C5C:				; CODE XREF: sub_401ADE+78j
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+lpString], eax
		call	sub_406278
		jmp	loc_401F96
; ---------------------------------------------------------------------------

loc_401C6C:				; CODE XREF: sub_401ADE+5Dj
		mov	eax, [ebp+arg_8]
		cmp	ax, 12Bh
		jbe	short loc_401CA4
		mov	eax, [ebp+arg_8]
		cmp	ax, 15Dh
		ja	short loc_401CA4
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		sub	eax, 12Ch
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+28h+lpString], eax	; lpThreadId
		call	sub_403F71

loc_401CA4:				; CODE XREF: sub_401ADE+195j
					; sub_401ADE+19Ej
		mov	eax, [ebp+arg_8]
		cmp	ax, 15Dh
		jbe	short loc_401CDC
		mov	eax, [ebp+arg_8]
		cmp	ax, 18Fh
		ja	short loc_401CDC
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		sub	eax, 15Eh
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+28h+lpString], eax
		call	sub_4047A6

loc_401CDC:				; CODE XREF: sub_401ADE+1CDj
					; sub_401ADE+1D6j
		mov	eax, [ebp+arg_8]
		cmp	ax, 18Fh
		jbe	short loc_401D1C
		mov	eax, [ebp+arg_8]
		cmp	ax, 1C1h
		ja	short loc_401D1C
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		sub	eax, 190h
		imul	eax, 894h
		add	eax, offset dword_4132D0
		mov	eax, [eax+8]
		mov	[esp+28h+Msg], 5 ; nCmdShow
		mov	[esp+28h+lpString], eax	; hWnd
		mov	eax, ds:ShowWindow
		call	eax ; ShowWindow
		sub	esp, 8

loc_401D1C:				; CODE XREF: sub_401ADE+205j
					; sub_401ADE+20Ej
		mov	eax, [ebp+arg_8]
		cmp	ax, 1C1h
		jbe	short loc_401D41
		mov	eax, [ebp+arg_8]
		cmp	ax, 1F3h
		ja	short loc_401D41
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		sub	eax, 1C2h
		mov	[esp+28h+lpString], eax
		call	sub_406FFB

loc_401D41:				; CODE XREF: sub_401ADE+245j
					; sub_401ADE+24Ej
		mov	eax, [ebp+arg_8]
		cmp	ax, 1F3h
		jbe	short loc_401D66
		mov	eax, [ebp+arg_8]
		cmp	ax, 225h
		ja	short loc_401D66
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		sub	eax, 1F4h
		mov	[esp+28h+lpString], eax
		call	sub_40719F

loc_401D66:				; CODE XREF: sub_401ADE+26Aj
					; sub_401ADE+273j
		mov	eax, [ebp+arg_8]
		cmp	ax, 225h
		jbe	short loc_401D9E
		mov	eax, [ebp+arg_8]
		cmp	ax, 257h
		ja	short loc_401D9E
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		sub	eax, 226h
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+28h+lpString], eax	; LPVOID
		call	sub_4096A2

loc_401D9E:				; CODE XREF: sub_401ADE+28Fj
					; sub_401ADE+298j
		mov	eax, [ebp+arg_8]
		cmp	ax, 0DDh
		jnz	short loc_401DAC
		call	sub_401FCE

loc_401DAC:				; CODE XREF: sub_401ADE+2C7j
		mov	eax, [ebp+arg_8]
		cmp	ax, 0DFh
		jnz	short loc_401DC0
		mov	eax, [ebp+hWnd]
		mov	[esp+28h+lpString], eax	; HWND
		call	sub_40228A

loc_401DC0:				; CODE XREF: sub_401ADE+2D5j
		mov	eax, [ebp+arg_8]
		cmp	ax, 64h
		jnz	short loc_401DCE
		call	sub_407370

loc_401DCE:				; CODE XREF: sub_401ADE+2E9j
		mov	eax, [ebp+arg_8]
		cmp	ax, 65h
		jnz	short loc_401DDC
		call	sub_40760B

loc_401DDC:				; CODE XREF: sub_401ADE+2F7j
		mov	eax, [ebp+arg_8]
		cmp	ax, 66h
		jnz	short loc_401DEF
		call	sub_407729
		jmp	loc_401F96
; ---------------------------------------------------------------------------

loc_401DEF:				; CODE XREF: sub_401ADE+305j
		jmp	loc_401F96
; ---------------------------------------------------------------------------

loc_401DF4:				; CODE XREF: sub_401ADE+32j
		mov	eax, [ebp+hWnd]
		mov	[esp+28h+lpString], eax	; HWND
		call	sub_40228A
		jmp	loc_401F96
; ---------------------------------------------------------------------------

loc_401E04:				; CODE XREF: sub_401ADE+1Aj
		mov	eax, [ebp+hWnd]
		mov	[esp+28h+lpString], eax
		call	WTSUnRegisterSessionNotification
		sub	esp, 4
		call	sub_401972
		call	sub_406480
		mov	[esp+28h+lpString], 0 ;	nExitCode
		mov	eax, ds:PostQuitMessage
		call	eax ; PostQuitMessage
		sub	esp, 4
		jmp	loc_401F96
; ---------------------------------------------------------------------------

loc_401E32:				; CODE XREF: sub_401ADE+3Bj
		mov	eax, 1
		jmp	locret_401F9B
; ---------------------------------------------------------------------------

loc_401E3C:				; CODE XREF: sub_401ADE+Cj
		call	sub_401972
		call	sub_406480
		jmp	loc_401F96
; ---------------------------------------------------------------------------

loc_401E4B:				; CODE XREF: sub_401ADE+6Dj
		mov	eax, [ebp+arg_8]
		cmp	eax, 7
		jz	short loc_401E5D
		cmp	eax, 8
		jz	short loc_401E69
		jmp	loc_401F96
; ---------------------------------------------------------------------------

loc_401E5D:				; CODE XREF: sub_401ADE+373j
		mov	ds:dword_42E40C, 1
		jmp	short loc_401E8B
; ---------------------------------------------------------------------------

loc_401E69:				; CODE XREF: sub_401ADE+378j
		mov	ds:dword_42E40C, 0
		mov	[esp+28h+lpString], 6
		call	sub_40829E
		test	eax, eax
		jz	short loc_401E8A
		call	sub_401A57
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_401E8A:				; CODE XREF: sub_401ADE+3A3j
					; sub_401ADE+3AAj
		nop

loc_401E8B:				; CODE XREF: sub_401ADE+389j
		jmp	loc_401F96
; ---------------------------------------------------------------------------

loc_401E90:				; CODE XREF: sub_401ADE+4Bj
		mov	eax, [ebp+arg_8]
		cmp	eax, 4
		jz	short loc_401EB2
		cmp	eax, 4
		jb	loc_401F59
		sub	eax, 6
		cmp	eax, 1
		ja	loc_401F59
		jmp	loc_401F34
; ---------------------------------------------------------------------------

loc_401EB2:				; CODE XREF: sub_401ADE+3B8j
		movzx	eax, ds:word_42E3E8
		cmp	ax, 31h
		jnz	short loc_401F2D
		mov	[ebp+var_C], 0
		jmp	short loc_401EED
; ---------------------------------------------------------------------------

loc_401EC8:				; CODE XREF: sub_401ADE+417j
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_413280
		mov	eax, [eax+0Ch]
		cmp	eax, 3
		jnz	short loc_401EE9
		mov	eax, [ebp+var_C]
		mov	[esp+28h+lpString], eax
		call	sub_4047DC

loc_401EE9:				; CODE XREF: sub_401ADE+3FEj
		add	[ebp+var_C], 1

loc_401EED:				; CODE XREF: sub_401ADE+3E8j
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	short loc_401EC8
		mov	[ebp+var_C], 0
		jmp	short loc_401F27
; ---------------------------------------------------------------------------

loc_401F00:				; CODE XREF: sub_401ADE+44Dj
		mov	[esp+28h+lpString], 5
		call	sub_40829E
		test	eax, eax
		jnz	short loc_401F12
		jmp	short loc_401F2D
; ---------------------------------------------------------------------------

loc_401F12:				; CODE XREF: sub_401ADE+430j
		add	[ebp+var_C], 1
		mov	[esp+28h+lpString], 1F4h ; dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4

loc_401F27:				; CODE XREF: sub_401ADE+420j
		cmp	[ebp+var_C], 9
		jle	short loc_401F00

loc_401F2D:				; CODE XREF: sub_401ADE+3DFj
					; sub_401ADE+432j
		mov	eax, 0
		jmp	short locret_401F9B
; ---------------------------------------------------------------------------

loc_401F34:				; CODE XREF: sub_401ADE+3CFj
		mov	[esp+28h+lpString], 6
		call	sub_40829E
		test	eax, eax
		jz	short loc_401F52
		mov	eax, ds:dword_42E40C
		test	eax, eax
		jnz	short loc_401F52
		call	sub_401A57

loc_401F52:				; CODE XREF: sub_401ADE+464j
					; sub_401ADE+46Dj
		mov	eax, 0
		jmp	short locret_401F9B
; ---------------------------------------------------------------------------

loc_401F59:				; CODE XREF: sub_401ADE+2Aj
					; sub_401ADE+41j ...
		mov	eax, ds:dword_412020
		cmp	[ebp+arg_4], eax
		jnz	short loc_401F6F
		call	sub_4064B3
		call	sub_40693D
		jmp	short loc_401F96
; ---------------------------------------------------------------------------

loc_401F6F:				; CODE XREF: sub_401ADE+483j
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+lParam], eax ;	lParam
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+wParam], eax ;	wParam
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Msg], eax ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+28h+lpString], eax	; hWnd
		mov	eax, ds:DefWindowProcW
		call	eax ; DefWindowProcW
		sub	esp, 10h
		jmp	short locret_401F9B
; ---------------------------------------------------------------------------

loc_401F96:				; CODE XREF: sub_401ADE+174j
					; sub_401ADE:loc_401C57j ...
		mov	eax, 0

locret_401F9B:				; CODE XREF: sub_401ADE+359j
					; sub_401ADE+454j ...
		leave
		retn	10h
sub_401ADE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401F9F	proc near		; DATA XREF: sub_401FCE+1F6o

var_4		= dword	ptr -4
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		cmp	[ebp+arg_4], 4Eh
		jnz	short loc_401FC5
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_4], eax
		mov	eax, [ebp+var_4]
		mov	eax, [eax+8]
		cmp	eax, 0FFFFFF36h
		jnz	short loc_401FC5
		mov	eax, 1
		jmp	short locret_401FCA
; ---------------------------------------------------------------------------

loc_401FC5:				; CODE XREF: sub_401F9F+Aj
					; sub_401F9F+1Dj
		mov	eax, 0

locret_401FCA:				; CODE XREF: sub_401F9F+24j
		leave
		retn	10h
sub_401F9F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401FCE	proc near		; CODE XREF: sub_401ADE+2C9p

var_108		= dword	ptr -108h
var_EC		= PROPSHEETHEADERW_V2 ptr -0ECh
var_B8		= byte ptr -0B8h
var_1C		= dword	ptr -1Ch
var_18		= byte ptr -18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0FCh
		mov	[ebp+var_1C], 0
		movzx	eax, ds:word_42E3D0
		cmp	ax, 31h
		jnz	loc_4020AA
		movzx	eax, ds:word_42E3D8
		cmp	ax, 30h
		jnz	loc_4020AA
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	ecx, [ebp+var_18]
		add	eax, ecx
		sub	eax, 0A0h
		mov	dword ptr [eax], 34h
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	ebx, [ebp+var_18]
		add	eax, ebx
		sub	eax, 9Ch
		mov	dword ptr [eax], 1
		mov	eax, ds:hInstance
		mov	edx, [ebp+var_1C]
		imul	edx, 34h
		lea	esi, [ebp+var_18]
		add	edx, esi
		sub	edx, 98h
		mov	[edx], eax
		mov	[esp+108h+var_108], 0C8h
		call	sub_4054B0
		mov	edx, [ebp+var_1C]
		imul	edx, 34h
		lea	edi, [ebp+var_18]
		add	edx, edi
		sub	edx, 94h
		mov	[edx], eax
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	ecx, [ebp+var_18]
		add	eax, ecx
		sub	eax, 88h
		mov	dword ptr [eax], offset	sub_40972F
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	ebx, [ebp+var_18]
		add	eax, ebx
		sub	eax, 84h
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	esi, [ebp+var_18]
		add	eax, esi
		add	eax, 0FFFFFF80h
		mov	dword ptr [eax], 0
		add	[ebp+var_1C], 1

loc_4020AA:				; CODE XREF: sub_401FCE+1Ej
					; sub_401FCE+2Fj
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	edi, [ebp+var_18]
		add	eax, edi
		sub	eax, 0A0h
		mov	dword ptr [eax], 34h
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	ecx, [ebp+var_18]
		add	eax, ecx
		sub	eax, 9Ch
		mov	dword ptr [eax], 1
		mov	eax, ds:hInstance
		mov	edx, [ebp+var_1C]
		imul	edx, 34h
		lea	ebx, [ebp+var_18]
		add	edx, ebx
		sub	edx, 98h
		mov	[edx], eax
		mov	[esp+108h+var_108], 0E6h
		call	sub_4054B0
		mov	edx, [ebp+var_1C]
		imul	edx, 34h
		lea	esi, [ebp+var_18]
		add	edx, esi
		sub	edx, 94h
		mov	[edx], eax
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	edi, [ebp+var_18]
		add	eax, edi
		sub	eax, 88h
		mov	dword ptr [eax], offset	sub_40574D
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	ecx, [ebp+var_18]
		add	eax, ecx
		sub	eax, 84h
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	ebx, [ebp+var_18]
		add	eax, ebx
		add	eax, 0FFFFFF80h
		mov	dword ptr [eax], 0
		add	[ebp+var_1C], 1
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	esi, [ebp+var_18]
		add	eax, esi
		sub	eax, 0A0h
		mov	dword ptr [eax], 34h
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	edi, [ebp+var_18]
		add	eax, edi
		sub	eax, 9Ch
		mov	dword ptr [eax], 1
		mov	eax, ds:hInstance
		mov	edx, [ebp+var_1C]
		imul	edx, 34h
		lea	ecx, [ebp+var_18]
		add	edx, ecx
		sub	edx, 98h
		mov	[edx], eax
		mov	[esp+108h+var_108], 64h
		call	sub_4054B0
		mov	edx, [ebp+var_1C]
		imul	edx, 34h
		lea	ebx, [ebp+var_18]
		add	edx, ebx
		sub	edx, 94h
		mov	[edx], eax
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	esi, [ebp+var_18]
		add	eax, esi
		sub	eax, 88h
		mov	dword ptr [eax], offset	sub_401F9F
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	edi, [ebp+var_18]
		add	eax, edi
		sub	eax, 84h
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_1C]
		imul	eax, 34h
		lea	ecx, [ebp+var_18]
		add	eax, ecx
		add	eax, 0FFFFFF80h
		mov	dword ptr [eax], 0
		add	[ebp+var_1C], 1
		mov	[ebp+var_EC.dwSize], 34h
		mov	[ebp+var_EC.dwFlags], 200008Ah
		mov	eax, ds:hWnd
		mov	[ebp+var_EC.hwndParent], eax
		mov	eax, ds:hInstance
		mov	[ebp+var_EC.hInstance],	eax
		mov	[esp+108h+var_108], 5Ah
		call	sub_405370
		mov	dword ptr [ebp+var_EC.u], eax
		mov	[esp+108h+var_108], 60Eh
		call	sub_40524A
		mov	[ebp+var_EC.pszCaption], eax
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_EC.nPages], eax
		mov	dword ptr [ebp+var_EC.u2], 0
		lea	eax, [ebp+var_B8]
		mov	dword ptr [ebp+var_EC.u3], eax
		mov	[ebp+var_EC.pfnCallback], 0
		lea	eax, [ebp+var_EC]
		mov	[esp+108h+var_108], eax	; LPCPROPSHEETHEADERW
		mov	eax, ds:PropertySheetW
		call	eax ; PropertySheetW
		sub	esp, 4
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_401FCE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40228A(HWND)
sub_40228A	proc near		; CODE XREF: sub_401ADE+2DDp
					; sub_401ADE+31Cp

hWnd		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, ds:dword_42D734
		cmp	eax, 2
		jnz	short loc_4022BD
		mov	[esp+28h+var_20], 51Ch ; int
		mov	[esp+28h+var_24], offset aExitOpenvpn ;	"Exit OpenVPN"
		mov	[esp+28h+hWnd],	4 ; int
		call	sub_40530C
		cmp	eax, 7
		jnz	short loc_4022BD
		jmp	short locret_40231E
; ---------------------------------------------------------------------------

loc_4022BD:				; CODE XREF: sub_40228A+Ej
					; sub_40228A+2Fj
		mov	[ebp+var_C], 0
		jmp	short loc_402304
; ---------------------------------------------------------------------------

loc_4022C6:				; CODE XREF: sub_40228A+82j
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_413280
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_4022DD
		jmp	short loc_402300
; ---------------------------------------------------------------------------

loc_4022DD:				; CODE XREF: sub_40228A+4Fj
		mov	[esp+28h+var_20], 51Bh ; int
		mov	[esp+28h+var_24], offset aExitOpenvpn ;	"Exit OpenVPN"
		mov	[esp+28h+hWnd],	4 ; int
		call	sub_40530C
		cmp	eax, 7
		jnz	short loc_402300
		jmp	short locret_40231E
; ---------------------------------------------------------------------------

loc_402300:				; CODE XREF: sub_40228A+51j
					; sub_40228A+72j
		add	[ebp+var_C], 1

loc_402304:				; CODE XREF: sub_40228A+3Aj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	short loc_4022C6
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:DestroyWindow
		call	eax ; DestroyWindow
		sub	esp, 4

locret_40231E:				; CODE XREF: sub_40228A+31j
					; sub_40228A+74j
		leave
		retn
sub_40228A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_402320(LPCWSTR)
sub_402320	proc near		; CODE XREF: sub_401623+DAp

lpLibFileName	= dword	ptr -48h
lpProcName	= dword	ptr -44h
Size		= dword	ptr -40h
Dst		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
hModule		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	[ebp+var_C], 0
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+lpLibFileName], eax ; lpLibFileName
		mov	eax, ds:LoadLibraryW
		call	eax ; LoadLibraryW
		sub	esp, 4
		mov	[ebp+hModule], eax
		cmp	[ebp+hModule], 0
		jz	short loc_4023C4
		mov	[esp+48h+lpProcName], offset aDllgetversion ; "DllGetVersion"
		mov	eax, [ebp+hModule]
		mov	[esp+48h+lpLibFileName], eax ; hModule
		mov	eax, ds:GetProcAddress
		call	eax ; GetProcAddress
		sub	esp, 8
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_4023B4
		mov	[esp+48h+Size],	14h ; Size
		mov	[esp+48h+lpProcName], 0	; Val
		lea	eax, [ebp+Dst]
		mov	[esp+48h+lpLibFileName], eax ; Dst
		call	memset
		mov	[ebp+Dst], 14h
		lea	eax, [ebp+Dst]
		mov	[esp+48h+lpLibFileName], eax
		mov	eax, [ebp+var_14]
		call	eax
		sub	esp, 4
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		js	short loc_4023B4
		mov	eax, [ebp+var_24]
		movzx	eax, ax
		mov	edx, [ebp+var_28]
		movzx	edx, dx
		shl	edx, 10h
		or	eax, edx
		mov	[ebp+var_C], eax

loc_4023B4:				; CODE XREF: sub_402320+45j
					; sub_402320+7Ej
		mov	eax, [ebp+hModule]
		mov	[esp+48h+lpLibFileName], eax ; hLibModule
		mov	eax, ds:FreeLibrary
		call	eax ; FreeLibrary
		sub	esp, 4

loc_4023C4:				; CODE XREF: sub_402320+24j
		mov	eax, [ebp+var_C]
		leave
		retn
sub_402320	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4023CC(wchar_t *, size_t, wchar_t *, char)
sub_4023CC	proc near		; CODE XREF: sub_403F71+138p
					; sub_403F71+263p ...

Dest		= dword	ptr -28h
Count		= dword	ptr -24h
Format		= dword	ptr -20h
Args		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+Args],	eax ; Args
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+Format], eax ;	Format
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Count], eax ; Count
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Dest],	eax ; Dest
		mov	eax, ds:_vsnwprintf
		call	eax ; _vsnwprintf
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_4]
		add	eax, 7FFFFFFFh
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	word ptr [eax],	0
		mov	eax, [ebp+var_C]
		leave
		retn
sub_4023CC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402417	proc near		; DATA XREF: sub_401623+13o

var_18		= dword	ptr -18h
Str		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_C], 0 ; int
		mov	[esp+18h+var_10], 0 ; int
		mov	[esp+18h+Str], offset aStateOn ; "state	on"
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax ;	int
		call	sub_40C08F
		mov	[esp+18h+var_C], 1 ; int
		mov	[esp+18h+var_10], offset sub_4024B3 ; int
		mov	[esp+18h+Str], offset aLogAllOn	; "log all on"
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax ;	int
		call	sub_40C08F
		leave
		retn
sub_402417	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402465	proc near		; DATA XREF: sub_401623+27o

var_18		= dword	ptr -18h
Str		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_C], 0 ; int
		mov	[esp+18h+var_10], 0 ; int
		mov	[esp+18h+Str], offset aHoldOff ; "hold off"
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax ;	int
		call	sub_40C08F
		mov	[esp+18h+var_C], 0 ; int
		mov	[esp+18h+var_10], 0 ; int
		mov	[esp+18h+Str], offset aHoldRelease ; "hold release"
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax ;	int
		call	sub_40C08F
		leave
		retn
sub_402465	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4024B3(int, char *Str)
sub_4024B3	proc near		; DATA XREF: sub_401623+3Bo
					; sub_402417+31o

hDlg		= dword	ptr -38h
nIDDlgItem	= dword	ptr -34h
wParam		= dword	ptr -30h
lParam		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
Time		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
hWnd		= dword	ptr -0Ch
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+38h+nIDDlgItem], 0A2h ; nIDDlgItem
		mov	[esp+38h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[ebp+hWnd], eax
		mov	[ebp+var_28], 2
		mov	[ebp+var_24], 0FDE9h
		mov	[esp+38h+nIDDlgItem], 2Ch ; Val
		mov	eax, [ebp+Str]
		mov	[esp+38h+hDlg],	eax ; Str
		call	strchr
		add	eax, 1
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		sub	eax, 1
		test	eax, eax
		jnz	short loc_402510
		jmp	locret_4026B7
; ---------------------------------------------------------------------------

loc_402510:				; CODE XREF: sub_4024B3+56j
		mov	[esp+38h+nIDDlgItem], 2Ch ; Val
		mov	eax, [ebp+var_10]
		mov	[esp+38h+hDlg],	eax ; Str
		call	strchr
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_14]
		sub	eax, 1
		test	eax, eax
		jnz	short loc_402538
		jmp	locret_4026B7
; ---------------------------------------------------------------------------

loc_402538:				; CODE XREF: sub_4024B3+7Ej
		mov	[esp+38h+lParam], 0 ; lParam
		mov	[esp+38h+wParam], 0 ; wParam
		mov	[esp+38h+nIDDlgItem], 0BAh ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		cmp	eax, 1F4h
		jle	short loc_4025E2
		mov	[esp+38h+lParam], 0 ; lParam
		mov	[esp+38h+wParam], 0Ah ;	wParam
		mov	[esp+38h+nIDDlgItem], 0BBh ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_18]
		mov	[esp+38h+lParam], eax ;	lParam
		mov	[esp+38h+wParam], 0 ; wParam
		mov	[esp+38h+nIDDlgItem], 0B1h ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	eax, offset byte_4100E0
		mov	[esp+38h+lParam], eax ;	lParam
		mov	[esp+38h+wParam], 0 ; wParam
		mov	[esp+38h+nIDDlgItem], 0C2h ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h

loc_4025E2:				; CODE XREF: sub_4024B3+B2j
		mov	[esp+38h+wParam], 0Ah ;	Radix
		mov	[esp+38h+nIDDlgItem], 0	; EndPtr
		mov	eax, [ebp+Str]
		mov	[esp+38h+hDlg],	eax ; Str
		call	strtol
		mov	[ebp+Time], eax
		lea	eax, [ebp+Time]
		mov	[esp+38h+hDlg],	eax ; Time
		call	_wctime
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		add	eax, 30h
		mov	word ptr [eax],	20h
		mov	[esp+38h+lParam], 0FFFFFFFFh ; lParam
		mov	[esp+38h+wParam], 0FFFFFFFFh ; wParam
		mov	[esp+38h+nIDDlgItem], 0B1h ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	eax, [ebp+var_1C]
		mov	[esp+38h+lParam], eax ;	lParam
		mov	[esp+38h+wParam], 0 ; wParam
		mov	[esp+38h+nIDDlgItem], 0C2h ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	edx, [ebp+var_14]
		lea	eax, [ebp+var_28]
		mov	[esp+38h+lParam], edx ;	lParam
		mov	[esp+38h+wParam], eax ;	wParam
		mov	[esp+38h+nIDDlgItem], 461h ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	eax, offset asc_4100E2 ; "\n"
		mov	[esp+38h+lParam], eax ;	lParam
		mov	[esp+38h+wParam], 0 ; wParam
		mov	[esp+38h+nIDDlgItem], 0C2h ; Msg
		mov	eax, [ebp+hWnd]
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h

locret_4026B7:				; CODE XREF: sub_4024B3+58j
					; sub_4024B3+80j
		leave
		retn
sub_4024B3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4026B9(wchar_t *, char *)
sub_4026B9	proc near		; DATA XREF: sub_401623+4Co

Str		= dword	ptr -238h
Val		= dword	ptr -234h
lpMultiByteStr	= dword	ptr -230h
cbMultiByte	= dword	ptr -22Ch
lpWideCharStr	= dword	ptr -228h
cchWideChar	= dword	ptr -224h
var_218		= word ptr -218h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
Str1		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 238h
		mov	[esp+238h+Val],	2Ch ; Val
		mov	eax, [ebp+arg_4]
		mov	[esp+238h+Str],	eax ; Str
		call	strchr
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_4026E3
		jmp	locret_402A61
; ---------------------------------------------------------------------------

loc_4026E3:				; CODE XREF: sub_4026B9+23j
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+var_C]
		add	eax, 1
		mov	[ebp+Str1], eax
		mov	[esp+238h+Val],	2Ch ; Val
		mov	eax, [ebp+Str1]
		mov	[esp+238h+Str],	eax ; Str
		call	strchr
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_402713
		jmp	locret_402A61
; ---------------------------------------------------------------------------

loc_402713:				; CODE XREF: sub_4026B9+53j
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+var_C]
		add	eax, 1
		mov	[ebp+var_14], eax
		mov	[esp+238h+Val],	2Ch ; Val
		mov	eax, [ebp+var_14]
		mov	[esp+238h+Str],	eax ; Str
		call	strchr
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_402743
		jmp	locret_402A61
; ---------------------------------------------------------------------------

loc_402743:				; CODE XREF: sub_4026B9+83j
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax],	0
		mov	[esp+238h+Val],	offset aConnected ; "CONNECTED"
		mov	eax, [ebp+Str1]
		mov	[esp+238h+Str],	eax ; Str1
		call	strcmp
		test	eax, eax
		jnz	loc_402971
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+844h]
		cmp	eax, 1
		jz	short loc_402780
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+844h]
		cmp	eax, 7
		jnz	short loc_402793

loc_402780:				; CODE XREF: sub_4026B9+B7j
		mov	[esp+238h+Val],	0 ; int
		mov	eax, [ebp+arg_0]
		mov	[esp+238h+Str],	eax ; wchar_t *
		call	sub_40B9DE

loc_402793:				; CODE XREF: sub_4026B9+C5j
		mov	eax, [ebp+var_C]
		add	eax, 1
		mov	[ebp+var_18], eax
		mov	[esp+238h+Val],	2Ch ; Val
		mov	eax, [ebp+var_18]
		mov	[esp+238h+Str],	eax ; Str
		call	strchr
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_4027BE
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax],	0

loc_4027BE:				; CODE XREF: sub_4026B9+FDj
		mov	eax, [ebp+arg_0]
		add	eax, 820h
		mov	[esp+238h+cchWideChar],	10h ; cchWideChar
		mov	[esp+238h+lpWideCharStr], eax ;	lpWideCharStr
		mov	[esp+238h+cbMultiByte],	0FFFFFFFFh ; cbMultiByte
		mov	eax, [ebp+var_18]
		mov	[esp+238h+lpMultiByteStr], eax ; lpMultiByteStr
		mov	[esp+238h+Val],	0 ; dwFlags
		mov	[esp+238h+Str],	0 ; CodePage
		mov	eax, ds:MultiByteToWideChar
		call	eax ; MultiByteToWideChar
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+844h]
		cmp	eax, 1
		jnz	short loc_402815
		movzx	eax, ds:word_42E3DC
		cmp	ax, 30h
		jnz	short loc_40284B

loc_402815:				; CODE XREF: sub_4026B9+14Dj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+844h]
		cmp	eax, 7
		jnz	short loc_402830
		movzx	eax, ds:word_42E3DC
		cmp	ax, 30h
		jnz	short loc_40284B

loc_402830:				; CODE XREF: sub_4026B9+168j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+844h]
		cmp	eax, 2
		jnz	short loc_4028BA
		movzx	eax, ds:word_42E3DC
		cmp	ax, 32h
		jnz	short loc_4028BA

loc_40284B:				; CODE XREF: sub_4026B9+15Aj
					; sub_4026B9+175j
		mov	eax, [ebp+arg_0]
		add	eax, 208h
		mov	[esp+238h+cbMultiByte],	eax ; char
		mov	[esp+238h+lpMultiByteStr], 4C7h	; int
		mov	[esp+238h+Val],	100h ; size_t
		lea	eax, [ebp+var_218]
		mov	[esp+238h+Str],	eax ; wchar_t *
		call	sub_405270
		mov	eax, [ebp+arg_0]
		add	eax, 820h
		mov	[esp+238h+Str],	eax ; Str
		call	wcslen
		test	eax, eax
		jz	short loc_4028A3
		mov	eax, [ebp+arg_0]
		add	eax, 820h
		mov	[esp+238h+Val],	eax
		mov	[esp+238h+Str],	4C8h
		call	sub_40524A
		jmp	short loc_4028A8
; ---------------------------------------------------------------------------

loc_4028A3:				; CODE XREF: sub_4026B9+1CEj
		mov	eax, offset byte_4100E0

loc_4028A8:				; CODE XREF: sub_4026B9+1E8j
		mov	[esp+238h+Val],	eax ; wchar_t *
		lea	eax, [ebp+var_218]
		mov	[esp+238h+Str],	eax ; wchar_t *
		call	sub_4069CF

loc_4028BA:				; CODE XREF: sub_4026B9+183j
					; sub_4026B9+190j
		mov	eax, [ebp+arg_4]
		mov	[esp+238h+Str],	eax ; Str
		call	atoi
		mov	edx, [ebp+arg_0]
		mov	[edx+84Ch], eax
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+848h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+844h], 3
		mov	[esp+238h+Val],	3
		mov	eax, [ebp+arg_0]
		mov	[esp+238h+Str],	eax
		call	sub_406A62
		mov	[esp+238h+Str],	3
		call	sub_40653B
		mov	[esp+238h+Str],	4C6h
		call	sub_40524A
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+890h]
		mov	[esp+238h+lpMultiByteStr], eax ; lpString
		mov	[esp+238h+Val],	0A1h ; nIDDlgItem
		mov	[esp+238h+Str],	edx ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+238h+Val],	5Bh ; int
		mov	[esp+238h+Str],	eax ; HWND
		call	sub_404819
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+238h+Val],	0 ; nCmdShow
		mov	[esp+238h+Str],	eax ; hWnd
		mov	eax, ds:ShowWindow
		call	eax ; ShowWindow
		sub	esp, 8
		jmp	locret_402A61
; ---------------------------------------------------------------------------

loc_402971:				; CODE XREF: sub_4026B9+A5j
		mov	[esp+238h+Val],	offset aReconnecting ; "RECONNECTING"
		mov	eax, [ebp+Str1]
		mov	[esp+238h+Str],	eax ; Str1
		call	strcmp
		test	eax, eax
		jnz	locret_402A61
		mov	[esp+238h+Val],	offset aAuthFailure ; "auth-failure"
		mov	eax, [ebp+var_14]
		mov	[esp+238h+Str],	eax ; Str1
		call	strcmp
		test	eax, eax
		jz	short loc_4029BA
		mov	[esp+238h+Val],	offset aPrivateKeyPass ; "private-key-password-failure"
		mov	eax, [ebp+var_14]
		mov	[esp+238h+Str],	eax ; Str1
		call	strcmp
		test	eax, eax
		jnz	short loc_4029CF

loc_4029BA:				; CODE XREF: sub_4026B9+2E8j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+848h]
		lea	edx, [eax+1]
		mov	eax, [ebp+arg_0]
		mov	[eax+848h], edx

loc_4029CF:				; CODE XREF: sub_4026B9+2FFj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+848h]
		mov	edx, ds:dword_42D738
		sub	edx, 1
		cmp	eax, edx
		jl	short loc_402A08
		mov	[esp+238h+cbMultiByte],	0 ; int
		mov	[esp+238h+lpMultiByteStr], 0 ; int
		mov	[esp+238h+Val],	offset aAuthRetryNone ;	"auth-retry none"
		mov	eax, [ebp+arg_0]
		mov	[esp+238h+Str],	eax ; int
		call	sub_40C08F

loc_402A08:				; CODE XREF: sub_4026B9+32Aj
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+844h], 2
		call	sub_40693D
		mov	[esp+238h+Str],	4CBh
		call	sub_40524A
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+890h]
		mov	[esp+238h+lpMultiByteStr], eax ; lpString
		mov	[esp+238h+Val],	0A1h ; nIDDlgItem
		mov	[esp+238h+Str],	edx ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+238h+Val],	5Ch ; int
		mov	[esp+238h+Str],	eax ; HWND
		call	sub_404819

locret_402A61:				; CODE XREF: sub_4026B9+25j
					; sub_4026B9+55j ...
		leave
		retn
sub_4026B9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_402A63(HWND	hDlg, int, int,	HWND)
sub_402A63	proc near		; DATA XREF: sub_402DD9+48o

hWnd		= dword	ptr -28h
lpString	= dword	ptr -24h
hData		= dword	ptr -20h
nIDDlgItem	= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
hDlg		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	eax, [ebp+arg_4]
		cmp	eax, 82h
		jz	loc_402C45
		cmp	eax, 82h
		ja	short loc_402A8D
		cmp	eax, 10h
		jz	loc_402C24
		jmp	loc_402C5F
; ---------------------------------------------------------------------------

loc_402A8D:				; CODE XREF: sub_402A63+1Aj
		cmp	eax, 110h
		jz	short loc_402AA0
		cmp	eax, 111h
		jz	short loc_402AF9
		jmp	loc_402C5F
; ---------------------------------------------------------------------------

loc_402AA0:				; CODE XREF: sub_402A63+2Fj
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_C], eax
		mov	eax, lpString
		mov	edx, [ebp+var_C]
		mov	[esp+28h+hData], edx ; hData
		mov	[esp+28h+lpString], eax	; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SetPropW
		call	eax ; SetPropW
		sub	esp, 0Ch
		mov	eax, [ebp+var_C]
		mov	eax, [eax+844h]
		cmp	eax, 7
		jnz	short loc_402AE4
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		call	sub_40CDC4
		jmp	loc_402C5F
; ---------------------------------------------------------------------------

loc_402AE4:				; CODE XREF: sub_402A63+6Fj
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SetForegroundWindow
		call	eax ; SetForegroundWindow
		sub	esp, 4
		jmp	loc_402C5F
; ---------------------------------------------------------------------------

loc_402AF9:				; CODE XREF: sub_402A63+36j
		mov	eax, lpString
		mov	[esp+28h+lpString], eax	; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:GetPropW
		call	eax ; GetPropW
		sub	esp, 8
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		cmp	eax, 2
		jz	loc_402BF6
		cmp	eax, 0B5h
		jz	short loc_402B35
		cmp	eax, 1
		jz	short loc_402B91
		jmp	loc_402C5F
; ---------------------------------------------------------------------------

loc_402B35:				; CODE XREF: sub_402A63+C6j
		mov	eax, [ebp+arg_8]
		shr	eax, 10h
		cmp	ax, 400h
		jnz	short loc_402B8C
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:GetWindowTextLengthW
		call	eax ; GetWindowTextLengthW
		sub	esp, 4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		setnz	al
		movzx	ebx, al
		mov	[esp+28h+lpString], 1 ;	nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+lpString], ebx	; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		jmp	loc_402C22
; ---------------------------------------------------------------------------

loc_402B8C:				; CODE XREF: sub_402A63+DCj
		jmp	loc_402C22
; ---------------------------------------------------------------------------

loc_402B91:				; CODE XREF: sub_402A63+CBj
		mov	[esp+28h+nIDDlgItem], 0B5h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hData], eax ; hDlg
		mov	[esp+28h+lpString], offset aUsernameAuthS ; "username \"Auth\" \"%s\""
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hWnd],	eax ; int
		call	sub_40CAF3
		mov	[esp+28h+nIDDlgItem], 0B6h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hData], eax ; hDlg
		mov	[esp+28h+lpString], offset aPasswordAuthS ; "password \"Auth\" \"%s\""
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hWnd],	eax ; int
		call	sub_40CAF3
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		mov	[esp+28h+lpString], eax	; nResult
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:EndDialog
		call	eax ; EndDialog
		sub	esp, 8
		mov	eax, 1
		jmp	short loc_402C64
; ---------------------------------------------------------------------------

loc_402BF6:				; CODE XREF: sub_402A63+BBj
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		mov	[esp+28h+lpString], eax	; nResult
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:EndDialog
		call	eax ; EndDialog
		sub	esp, 8
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hWnd],	eax
		call	sub_4047A6
		mov	eax, 1
		jmp	short loc_402C64
; ---------------------------------------------------------------------------

loc_402C22:				; CODE XREF: sub_402A63+124j
					; sub_402A63:loc_402B8Cj
		jmp	short loc_402C5F
; ---------------------------------------------------------------------------

loc_402C24:				; CODE XREF: sub_402A63+1Fj
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		mov	[esp+28h+lpString], eax	; nResult
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:EndDialog
		call	eax ; EndDialog
		sub	esp, 8
		mov	eax, 1
		jmp	short loc_402C64
; ---------------------------------------------------------------------------

loc_402C45:				; CODE XREF: sub_402A63+Fj
		mov	eax, lpString
		mov	[esp+28h+lpString], eax	; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:RemovePropW
		call	eax ; RemovePropW
		sub	esp, 8
		nop

loc_402C5F:				; CODE XREF: sub_402A63+25j
					; sub_402A63+38j ...
		mov	eax, 0

loc_402C64:				; CODE XREF: sub_402A63+191j
					; sub_402A63+1BDj ...
		mov	ebx, [ebp+var_4]
		leave
		retn	10h
sub_402A63	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_402C6B(HWND	hDlg, int, int,	int)
sub_402C6B	proc near		; DATA XREF: sub_402DD9+7Fo

hWnd		= dword	ptr -28h
lpString	= dword	ptr -24h
hData		= dword	ptr -20h
nIDDlgItem	= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
hDlg		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_4]
		cmp	eax, 82h
		jz	loc_402DB6
		cmp	eax, 82h
		ja	short loc_402C94
		cmp	eax, 10h
		jz	loc_402D95
		jmp	loc_402DD0
; ---------------------------------------------------------------------------

loc_402C94:				; CODE XREF: sub_402C6B+19j
		cmp	eax, 110h
		jz	short loc_402CA7
		cmp	eax, 111h
		jz	short loc_402D00
		jmp	loc_402DD0
; ---------------------------------------------------------------------------

loc_402CA7:				; CODE XREF: sub_402C6B+2Ej
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_C], eax
		mov	eax, lpString
		mov	edx, [ebp+var_C]
		mov	[esp+28h+hData], edx ; hData
		mov	[esp+28h+lpString], eax	; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SetPropW
		call	eax ; SetPropW
		sub	esp, 0Ch
		mov	eax, [ebp+var_C]
		mov	eax, [eax+844h]
		cmp	eax, 7
		jnz	short loc_402CEB
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		call	sub_40CDC4
		jmp	loc_402DD0
; ---------------------------------------------------------------------------

loc_402CEB:				; CODE XREF: sub_402C6B+6Ej
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SetForegroundWindow
		call	eax ; SetForegroundWindow
		sub	esp, 4
		jmp	loc_402DD0
; ---------------------------------------------------------------------------

loc_402D00:				; CODE XREF: sub_402C6B+35j
		mov	eax, lpString
		mov	[esp+28h+lpString], eax	; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:GetPropW
		call	eax ; GetPropW
		sub	esp, 8
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		cmp	eax, 1
		jz	short loc_402D31
		cmp	eax, 2
		jz	short loc_402D74
		jmp	loc_402DD0
; ---------------------------------------------------------------------------

loc_402D31:				; CODE XREF: sub_402C6B+BAj
		mov	[esp+28h+nIDDlgItem], 97h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hData], eax ; hDlg
		mov	[esp+28h+lpString], offset aPasswordPrivat ; "password \"Private Key\" \"%s\""
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hWnd],	eax ; int
		call	sub_40CAF3
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		mov	[esp+28h+lpString], eax	; nResult
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:EndDialog
		call	eax ; EndDialog
		sub	esp, 8
		mov	eax, 1
		jmp	short locret_402DD5
; ---------------------------------------------------------------------------

loc_402D74:				; CODE XREF: sub_402C6B+BFj
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		mov	[esp+28h+lpString], eax	; nResult
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:EndDialog
		call	eax ; EndDialog
		sub	esp, 8
		mov	eax, 1
		jmp	short locret_402DD5
; ---------------------------------------------------------------------------

loc_402D95:				; CODE XREF: sub_402C6B+1Ej
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		mov	[esp+28h+lpString], eax	; nResult
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:EndDialog
		call	eax ; EndDialog
		sub	esp, 8
		mov	eax, 1
		jmp	short locret_402DD5
; ---------------------------------------------------------------------------

loc_402DB6:				; CODE XREF: sub_402C6B+Ej
		mov	eax, lpString
		mov	[esp+28h+lpString], eax	; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:RemovePropW
		call	eax ; RemovePropW
		sub	esp, 8
		nop

loc_402DD0:				; CODE XREF: sub_402C6B+24j
					; sub_402C6B+37j ...
		mov	eax, 0

locret_402DD5:				; CODE XREF: sub_402C6B+107j
					; sub_402C6B+128j ...
		leave
		retn	10h
sub_402C6B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_402DD9(LPARAM, char *Str)
sub_402DD9	proc near		; DATA XREF: sub_401623+5Ao

Str1		= dword	ptr -18h
Str2		= dword	ptr -14h
MaxCount	= dword	ptr -10h
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+MaxCount], 13h	; MaxCount
		mov	[esp+18h+Str2],	offset aVerificationFa ; "Verification Failed"
		mov	eax, [ebp+Str]
		mov	[esp+18h+Str1],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_402E03
		jmp	locret_402EC4
; ---------------------------------------------------------------------------

loc_402E03:				; CODE XREF: sub_402DD9+23j
		mov	[esp+18h+Str2],	offset SubStr ;	"'Auth'"
		mov	eax, [ebp+Str]
		mov	[esp+18h+Str1],	eax ; Str
		call	strstr
		test	eax, eax
		jz	short loc_402E3A
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+MaxCount], eax	; LPARAM
		mov	[esp+18h+Str2],	offset sub_402A63 ; DLGPROC
		mov	[esp+18h+Str1],	0B4h ; int
		call	sub_405503
		jmp	locret_402EC4
; ---------------------------------------------------------------------------

loc_402E3A:				; CODE XREF: sub_402DD9+3Fj
		mov	[esp+18h+Str2],	offset aPrivateKey ; "'Private Key'"
		mov	eax, [ebp+Str]
		mov	[esp+18h+Str1],	eax ; Str
		call	strstr
		test	eax, eax
		jz	short loc_402E6E
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+MaxCount], eax	; LPARAM
		mov	[esp+18h+Str2],	offset sub_402C6B ; DLGPROC
		mov	[esp+18h+Str1],	96h ; int
		call	sub_405503
		jmp	short locret_402EC4
; ---------------------------------------------------------------------------

loc_402E6E:				; CODE XREF: sub_402DD9+76j
		mov	[esp+18h+Str2],	offset aHttpProxy ; "'HTTP Proxy'"
		mov	eax, [ebp+Str]
		mov	[esp+18h+Str1],	eax ; Str
		call	strstr
		test	eax, eax
		jz	short loc_402E9A
		mov	[esp+18h+Str2],	0 ; int
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+Str1],	eax ; LPARAM
		call	sub_40A686
		jmp	short locret_402EC4
; ---------------------------------------------------------------------------

loc_402E9A:				; CODE XREF: sub_402DD9+AAj
		mov	[esp+18h+Str2],	offset aSocksProxy ; "'SOCKS Proxy'"
		mov	eax, [ebp+Str]
		mov	[esp+18h+Str1],	eax ; Str
		call	strstr
		test	eax, eax
		jz	short locret_402EC4
		mov	[esp+18h+Str2],	1 ; int
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+Str1],	eax ; LPARAM
		call	sub_40A686

locret_402EC4:				; CODE XREF: sub_402DD9+25j
					; sub_402DD9+5Cj ...
		leave
		retn
sub_402DD9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402EC6	proc near		; DATA XREF: sub_401623+76o

hDlg		= dword	ptr -28h
nIDDlgItem	= dword	ptr -24h
lpString	= dword	ptr -20h
lParam		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[esp+28h+nIDDlgItem], 0
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+hDlg],	eax
		call	sub_406A62
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+844h]
		cmp	eax, 7		; switch 8 cases
		ja	loc_403273	; jumptable 00402EF8 default case
		mov	eax, ds:off_4101C4[eax*4]
		jmp	eax		; switch jump
; ---------------------------------------------------------------------------

loc_402EFA:				; CODE XREF: sub_402EC6+32j
					; DATA XREF: .rdata:off_4101C4o
		mov	eax, [ebp+arg_0] ; jumptable 00402EF8 case 3
		mov	dword ptr [eax+848h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+844h], 0
		call	sub_40693D
		mov	[esp+28h+hDlg],	4CCh
		call	sub_40524A
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+890h]
		mov	[esp+28h+lpString], eax	; lpString
		mov	[esp+28h+nIDDlgItem], 0A1h ; nIDDlgItem
		mov	[esp+28h+hDlg],	edx ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+nIDDlgItem], 5Dh ; int
		mov	[esp+28h+hDlg],	eax ; HWND
		call	sub_404819
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+nIDDlgItem], 0A3h ; nIDDlgItem
		mov	[esp+28h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+nIDDlgItem], 0	; bEnable
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+nIDDlgItem], 0A4h ; nIDDlgItem
		mov	[esp+28h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+nIDDlgItem], 0	; bEnable
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		movzx	eax, ds:word_42E3D4
		cmp	ax, 30h
		jnz	short loc_403007
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:SetForegroundWindow
		call	eax ; SetForegroundWindow
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+nIDDlgItem], 5	; nCmdShow
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:ShowWindow
		call	eax ; ShowWindow
		sub	esp, 8

loc_403007:				; CODE XREF: sub_402EC6+10Bj
		mov	eax, [ebp+arg_0]
		add	eax, 208h
		mov	[esp+28h+nIDDlgItem], eax
		mov	[esp+28h+hDlg],	4CDh
		call	sub_405340
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+lParam], 0 ; lParam
		mov	[esp+28h+lpString], 0 ;	wParam
		mov	[esp+28h+nIDDlgItem], 10h ; Msg
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		jmp	locret_403274
; ---------------------------------------------------------------------------

loc_403052:				; CODE XREF: sub_402EC6+32j
					; DATA XREF: .rdata:off_4101C4o
		mov	eax, [ebp+arg_0] ; jumptable 00402EF8 cases 1,2,7
		mov	eax, [eax+844h]
		cmp	eax, 2
		jnz	short loc_403067
		mov	eax, 4D0h
		jmp	short loc_40306C
; ---------------------------------------------------------------------------

loc_403067:				; CODE XREF: sub_402EC6+198j
		mov	eax, 4CEh

loc_40306C:				; CODE XREF: sub_402EC6+19Fj
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+844h]
		cmp	eax, 2
		jnz	short loc_403084
		mov	eax, 4D1h
		jmp	short loc_403089
; ---------------------------------------------------------------------------

loc_403084:				; CODE XREF: sub_402EC6+1B5j
		mov	eax, 4CFh

loc_403089:				; CODE XREF: sub_402EC6+1BCj
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+844h], 4
		call	sub_40693D
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+844h], 0
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+nIDDlgItem], 0A3h ; nIDDlgItem
		mov	[esp+28h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+nIDDlgItem], 0	; bEnable
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+nIDDlgItem], 0A4h ; nIDDlgItem
		mov	[esp+28h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+nIDDlgItem], 0	; bEnable
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+nIDDlgItem], 5Dh ; int
		mov	[esp+28h+hDlg],	eax ; HWND
		call	sub_404819
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hDlg],	eax
		call	sub_40524A
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+890h]
		mov	[esp+28h+lpString], eax	; lpString
		mov	[esp+28h+nIDDlgItem], 0A1h ; nIDDlgItem
		mov	[esp+28h+hDlg],	edx ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		movzx	eax, ds:word_42E3D4
		cmp	ax, 30h
		jnz	short loc_403198
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:SetForegroundWindow
		call	eax ; SetForegroundWindow
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+nIDDlgItem], 5	; nCmdShow
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:ShowWindow
		call	eax ; ShowWindow
		sub	esp, 8

loc_403198:				; CODE XREF: sub_402EC6+29Cj
		mov	eax, [ebp+arg_0]
		add	eax, 208h
		mov	[esp+28h+nIDDlgItem], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+hDlg],	eax
		call	sub_405340
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+lParam], 0 ; lParam
		mov	[esp+28h+lpString], 0 ;	wParam
		mov	[esp+28h+nIDDlgItem], 10h ; Msg
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		jmp	locret_403274
; ---------------------------------------------------------------------------

loc_4031E2:				; CODE XREF: sub_402EC6+32j
					; DATA XREF: .rdata:off_4101C4o
		mov	eax, [ebp+arg_0] ; jumptable 00402EF8 case 4
		mov	dword ptr [eax+848h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+844h], 0
		call	sub_40693D
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+890h]
		mov	[esp+28h+lParam], 0 ; lParam
		mov	[esp+28h+lpString], 0 ;	wParam
		mov	[esp+28h+nIDDlgItem], 10h ; Msg
		mov	[esp+28h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		jmp	short locret_403274
; ---------------------------------------------------------------------------

loc_403231:				; CODE XREF: sub_402EC6+32j
					; DATA XREF: .rdata:off_4101C4o
		mov	eax, [ebp+arg_0] ; jumptable 00402EF8 case 5
		mov	dword ptr [eax+844h], 6
		call	sub_40693D
		mov	[esp+28h+hDlg],	4D2h
		call	sub_40524A
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+890h]
		mov	[esp+28h+lpString], eax	; lpString
		mov	[esp+28h+nIDDlgItem], 0A1h ; nIDDlgItem
		mov	[esp+28h+hDlg],	edx ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		jmp	short locret_403274
; ---------------------------------------------------------------------------

loc_403273:				; CODE XREF: sub_402EC6+25j
					; sub_402EC6+32j
					; DATA XREF: ...
		nop			; jumptable 00402EF8 default case

locret_403274:				; CODE XREF: sub_402EC6+187j
					; sub_402EC6+317j ...
		leave
		retn
sub_402EC6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_403276(HWND	hDlg, UINT, WPARAM, LPARAM)
sub_403276	proc near		; DATA XREF: StartAddress+84o

hWnd		= dword	ptr -0C8h
lpString	= dword	ptr -0C4h
hData		= dword	ptr -0C0h
dwStyle		= dword	ptr -0BCh
X		= dword	ptr -0B8h
Y		= dword	ptr -0B4h
nWidth		= dword	ptr -0B0h
nHeight		= dword	ptr -0ACh
hWndParent	= dword	ptr -0A8h
hMenu		= dword	ptr -0A4h
hInstance	= dword	ptr -0A0h
lpParam		= dword	ptr -9Ch
lParam		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_80		= dword	ptr -80h
var_72		= dword	ptr -72h
var_6E		= dword	ptr -6Eh
var_6A		= dword	ptr -6Ah
var_66		= dword	ptr -66h
var_62		= dword	ptr -62h
var_5E		= dword	ptr -5Eh
var_5A		= dword	ptr -5Ah
var_56		= dword	ptr -56h
var_52		= dword	ptr -52h
var_4E		= dword	ptr -4Eh
var_4A		= word ptr -4Ah
var_48		= byte ptr -48h
Rect		= tagRECT ptr -30h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
hDlg		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	eax, [ebp+arg_4]
		cmp	eax, 18h
		jz	loc_40398D
		cmp	eax, 18h
		ja	short loc_4032B3
		cmp	eax, 5
		jz	loc_40368A
		cmp	eax, 10h
		jz	loc_4039F1
		cmp	eax, 2
		jz	loc_403A66
		jmp	loc_403A78
; ---------------------------------------------------------------------------

loc_4032B3:				; CODE XREF: sub_403276+1Bj
		cmp	eax, 110h
		jz	short loc_403303
		cmp	eax, 110h
		ja	short loc_4032D1
		cmp	eax, 82h
		jz	loc_403A4B
		jmp	loc_403A78
; ---------------------------------------------------------------------------

loc_4032D1:				; CODE XREF: sub_403276+49j
		cmp	eax, 111h
		jz	loc_403867
		cmp	eax, 8002h
		jnz	loc_403A78
		mov	eax, [ebp+arg_C]
		mov	[esp+0C8h+lpString], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+0C8h+hWnd], eax
		call	sub_40C2A0
		mov	eax, 1
		jmp	loc_403A7D
; ---------------------------------------------------------------------------

loc_403303:				; CODE XREF: sub_403276+42j
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_1C], eax
		mov	[esp+0C8h+lpString], 5Ch ; int
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; HWND
		call	sub_404819
		mov	eax, lpString
		mov	edx, [ebp+var_1C]
		mov	[esp+0C8h+hData], edx ;	hData
		mov	[esp+0C8h+lpString], eax ; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:SetPropW
		call	eax ; SetPropW
		sub	esp, 0Ch
		mov	eax, ds:hInstance
		mov	[esp+0C8h+lpParam], 0 ;	lpParam
		mov	[esp+0C8h+hInstance], eax ; hInstance
		mov	[esp+0C8h+hMenu], 0A2h ; hMenu
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWndParent], eax ; hWndParent
		mov	[esp+0C8h+nHeight], 0A0h ; nHeight
		mov	[esp+0C8h+nWidth], 15Eh	; nWidth
		mov	[esp+0C8h+Y], 19h ; Y
		mov	[esp+0C8h+X], 14h ; X
		mov	[esp+0C8h+dwStyle], 503048C4h ;	dwStyle
		mov	[esp+0C8h+hData], 0 ; lpWindowName
		mov	[esp+0C8h+lpString], offset aRichedit20w ; "RichEdit20W"
		mov	[esp+0C8h+hWnd], 0 ; dwExStyle
		mov	eax, ds:CreateWindowExW
		call	eax ; CreateWindowExW
		sub	esp, 30h
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jnz	short loc_4033C4
		mov	[esp+0C8h+hWnd], 4D4h
		call	sub_405340
		mov	eax, 0
		jmp	loc_403A7D
; ---------------------------------------------------------------------------

loc_4033C4:				; CODE XREF: sub_403276+136j
		lea	ebx, [ebp+lParam]
		mov	eax, 0
		mov	edx, 17h
		mov	edi, ebx
		mov	ecx, edx
		rep stosd
		mov	[ebp+lParam], 5Ch
		mov	[ebp+var_88], 0A0000001h
		mov	[ebp+var_80], 0A0h
		mov	eax, ds:dword_41020C
		mov	[ebp+var_72], eax
		mov	eax, ds:dword_410210
		mov	[ebp+var_6E], eax
		mov	eax, ds:dword_410214
		mov	[ebp+var_6A], eax
		mov	eax, ds:dword_410218
		mov	[ebp+var_66], eax
		mov	eax, ds:dword_41021C
		mov	[ebp+var_62], eax
		mov	eax, ds:dword_410220
		mov	[ebp+var_5E], eax
		mov	eax, ds:dword_410224
		mov	[ebp+var_5A], eax
		mov	eax, ds:dword_410228
		mov	[ebp+var_56], eax
		mov	eax, ds:dword_41022C
		mov	[ebp+var_52], eax
		mov	eax, ds:dword_410230
		mov	[ebp+var_4E], eax
		movzx	eax, ds:word_410234
		mov	[ebp+var_4A], ax
		lea	eax, [ebp+var_48]
		mov	ebx, 16h
		mov	edx, 0
		mov	ecx, eax
		and	ecx, 2
		test	ecx, ecx
		jz	short loc_40346F
		mov	[eax], dx
		add	eax, 2
		sub	ebx, 2

loc_40346F:				; CODE XREF: sub_403276+1EEj
		mov	esi, ebx
		and	esi, 0FFFFFFFCh
		mov	ecx, 0

loc_403479:				; CODE XREF: sub_403276+20Bj
		mov	[eax+ecx], edx
		add	ecx, 4
		cmp	ecx, esi
		jb	short loc_403479
		add	eax, ecx
		mov	ecx, ebx
		and	ecx, 2
		test	ecx, ecx
		jz	short loc_403494
		mov	[eax], dx
		add	eax, 2

loc_403494:				; CODE XREF: sub_403276+216j
		mov	ecx, ebx
		and	ecx, 1
		test	ecx, ecx
		jz	short loc_4034A2
		mov	[eax], dl
		add	eax, 1

loc_4034A2:				; CODE XREF: sub_403276+225j
		lea	eax, [ebp+lParam]
		mov	[esp+0C8h+dwStyle], eax	; lParam
		mov	[esp+0C8h+hData], 0 ; wParam
		mov	[esp+0C8h+lpString], 444h ; Msg
		mov	eax, [ebp+var_20]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_4034DC
		mov	[esp+0C8h+hWnd], 4D5h
		call	sub_405340

loc_4034DC:				; CODE XREF: sub_403276+258j
		lea	eax, [ebp+Rect]
		mov	[esp+0C8h+lpString], eax ; lpRect
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:GetClientRect
		call	eax ; GetClientRect
		sub	esp, 8
		mov	eax, [ebp+Rect.bottom]
		lea	edx, [eax-46h]
		mov	eax, [ebp+Rect.right]
		sub	eax, 28h
		mov	[esp+0C8h+Y], 1	; bRepaint
		mov	[esp+0C8h+X], edx ; nHeight
		mov	[esp+0C8h+dwStyle], eax	; nWidth
		mov	[esp+0C8h+hData], 19h ;	Y
		mov	[esp+0C8h+lpString], 14h ; X
		mov	eax, [ebp+var_20]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:MoveWindow
		call	eax ; MoveWindow
		sub	esp, 18h
		mov	eax, [ebp+Rect.right]
		lea	ebx, [eax-19h]
		mov	[esp+0C8h+lpString], 0A1h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+Y], 1	; bRepaint
		mov	[esp+0C8h+X], 0Fh ; nHeight
		mov	[esp+0C8h+dwStyle], ebx	; nWidth
		mov	[esp+0C8h+hData], 5 ; Y
		mov	[esp+0C8h+lpString], 14h ; X
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:MoveWindow
		call	eax ; MoveWindow
		sub	esp, 18h
		mov	eax, [ebp+Rect.bottom]
		lea	ebx, [eax-1Eh]
		mov	[esp+0C8h+lpString], 0A3h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+Y], 1	; bRepaint
		mov	[esp+0C8h+X], 17h ; nHeight
		mov	[esp+0C8h+dwStyle], 6Eh	; nWidth
		mov	[esp+0C8h+hData], ebx ;	Y
		mov	[esp+0C8h+lpString], 14h ; X
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:MoveWindow
		call	eax ; MoveWindow
		sub	esp, 18h
		mov	eax, [ebp+Rect.bottom]
		lea	ebx, [eax-1Eh]
		mov	[esp+0C8h+lpString], 0A4h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+Y], 1	; bRepaint
		mov	[esp+0C8h+X], 17h ; nHeight
		mov	[esp+0C8h+dwStyle], 6Eh	; nWidth
		mov	[esp+0C8h+hData], ebx ;	Y
		mov	[esp+0C8h+lpString], 91h ; X
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:MoveWindow
		call	eax ; MoveWindow
		sub	esp, 18h
		mov	eax, [ebp+Rect.bottom]
		lea	esi, [eax-1Eh]
		mov	eax, [ebp+Rect.right]
		lea	ebx, [eax-82h]
		mov	[esp+0C8h+lpString], 0A5h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+Y], 1	; bRepaint
		mov	[esp+0C8h+X], 17h ; nHeight
		mov	[esp+0C8h+dwStyle], 6Eh	; nWidth
		mov	[esp+0C8h+hData], esi ;	Y
		mov	[esp+0C8h+lpString], ebx ; X
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:MoveWindow
		call	eax ; MoveWindow
		sub	esp, 18h
		mov	eax, [ebp+var_20]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:SetFocus
		call	eax ; SetFocus
		sub	esp, 4
		mov	eax, 0
		jmp	loc_403A7D
; ---------------------------------------------------------------------------

loc_40368A:				; CODE XREF: sub_403276+20j
		mov	eax, [ebp+arg_C]
		shr	eax, 10h
		movzx	eax, ax
		lea	esi, [eax-46h]
		mov	eax, [ebp+arg_C]
		movzx	eax, ax
		lea	ebx, [eax-28h]
		mov	[esp+0C8h+lpString], 0A2h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+Y], 1	; bRepaint
		mov	[esp+0C8h+X], esi ; nHeight
		mov	[esp+0C8h+dwStyle], ebx	; nWidth
		mov	[esp+0C8h+hData], 19h ;	Y
		mov	[esp+0C8h+lpString], 14h ; X
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:MoveWindow
		call	eax ; MoveWindow
		sub	esp, 18h
		mov	eax, [ebp+arg_C]
		shr	eax, 10h
		movzx	eax, ax
		lea	ebx, [eax-1Eh]
		mov	[esp+0C8h+lpString], 0A3h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+Y], 1	; bRepaint
		mov	[esp+0C8h+X], 17h ; nHeight
		mov	[esp+0C8h+dwStyle], 6Eh	; nWidth
		mov	[esp+0C8h+hData], ebx ;	Y
		mov	[esp+0C8h+lpString], 14h ; X
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:MoveWindow
		call	eax ; MoveWindow
		sub	esp, 18h
		mov	eax, [ebp+arg_C]
		shr	eax, 10h
		movzx	eax, ax
		lea	ebx, [eax-1Eh]
		mov	[esp+0C8h+lpString], 0A4h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+Y], 1	; bRepaint
		mov	[esp+0C8h+X], 17h ; nHeight
		mov	[esp+0C8h+dwStyle], 6Eh	; nWidth
		mov	[esp+0C8h+hData], ebx ;	Y
		mov	[esp+0C8h+lpString], 91h ; X
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:MoveWindow
		call	eax ; MoveWindow
		sub	esp, 18h
		mov	eax, [ebp+arg_C]
		shr	eax, 10h
		movzx	eax, ax
		lea	esi, [eax-1Eh]
		mov	eax, [ebp+arg_C]
		movzx	eax, ax
		lea	ebx, [eax-82h]
		mov	[esp+0C8h+lpString], 0A5h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+Y], 1	; bRepaint
		mov	[esp+0C8h+X], 17h ; nHeight
		mov	[esp+0C8h+dwStyle], 6Eh	; nWidth
		mov	[esp+0C8h+hData], esi ;	Y
		mov	[esp+0C8h+lpString], ebx ; X
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:MoveWindow
		call	eax ; MoveWindow
		sub	esp, 18h
		mov	eax, [ebp+arg_C]
		movzx	eax, ax
		lea	ebx, [eax-19h]
		mov	[esp+0C8h+lpString], 0A1h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+Y], 1	; bRepaint
		mov	[esp+0C8h+X], 0Fh ; nHeight
		mov	[esp+0C8h+dwStyle], ebx	; nWidth
		mov	[esp+0C8h+hData], 5 ; Y
		mov	[esp+0C8h+lpString], 14h ; X
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:MoveWindow
		call	eax ; MoveWindow
		sub	esp, 18h
		mov	[esp+0C8h+hData], 1 ; bErase
		mov	[esp+0C8h+lpString], 0 ; lpRect
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:InvalidateRect
		call	eax ; InvalidateRect
		sub	esp, 0Ch
		mov	eax, 1
		jmp	loc_403A7D
; ---------------------------------------------------------------------------

loc_403867:				; CODE XREF: sub_403276+60j
		mov	eax, lpString
		mov	[esp+0C8h+lpString], eax ; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:GetPropW
		call	eax ; GetPropW
		sub	esp, 8
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		cmp	eax, 0A4h
		jz	loc_403928
		cmp	eax, 0A5h
		jz	short loc_4038E7
		cmp	eax, 0A3h
		jz	short loc_4038A7
		jmp	loc_403A78
; ---------------------------------------------------------------------------

loc_4038A7:				; CODE XREF: sub_403276+62Aj
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+890h]
		mov	[esp+0C8h+lpString], 0A2h ; nIDDlgItem
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:SetFocus
		call	eax ; SetFocus
		sub	esp, 4
		mov	eax, [ebp+var_1C]
		mov	[esp+0C8h+hWnd], eax
		call	sub_4047A6
		mov	eax, 1
		jmp	loc_403A7D
; ---------------------------------------------------------------------------

loc_4038E7:				; CODE XREF: sub_403276+623j
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+844h]
		test	eax, eax
		jz	short loc_40390E
		mov	[esp+0C8h+lpString], 0 ; nCmdShow
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:ShowWindow
		call	eax ; ShowWindow
		sub	esp, 8
		jmp	short loc_40391E
; ---------------------------------------------------------------------------

loc_40390E:				; CODE XREF: sub_403276+67Cj
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:DestroyWindow
		call	eax ; DestroyWindow
		sub	esp, 4

loc_40391E:				; CODE XREF: sub_403276+696j
		mov	eax, 1
		jmp	loc_403A7D
; ---------------------------------------------------------------------------

loc_403928:				; CODE XREF: sub_403276+618j
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+844h], 2
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+890h]
		mov	[esp+0C8h+lpString], 0A2h ; nIDDlgItem
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:SetFocus
		call	eax ; SetFocus
		sub	esp, 4
		mov	[esp+0C8h+dwStyle], 0 ;	int
		mov	[esp+0C8h+hData], 0 ; int
		mov	[esp+0C8h+lpString], offset aSignalSighup ; "signal SIGHUP"
		mov	eax, [ebp+var_1C]
		mov	[esp+0C8h+hWnd], eax ; int
		call	sub_40C08F
		mov	eax, 1
		jmp	loc_403A7D
; ---------------------------------------------------------------------------

loc_40398D:				; CODE XREF: sub_403276+12j
		cmp	[ebp+arg_8], 1
		jnz	short loc_4039E7
		mov	eax, lpString
		mov	[esp+0C8h+lpString], eax ; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:GetPropW
		call	eax ; GetPropW
		sub	esp, 8
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+890h]
		test	eax, eax
		jz	short loc_4039E7
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+890h]
		mov	[esp+0C8h+lpString], 0A2h ; nIDDlgItem
		mov	[esp+0C8h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:SetFocus
		call	eax ; SetFocus
		sub	esp, 4

loc_4039E7:				; CODE XREF: sub_403276+71Bj
					; sub_403276+744j
		mov	eax, 0
		jmp	loc_403A7D
; ---------------------------------------------------------------------------

loc_4039F1:				; CODE XREF: sub_403276+29j
		mov	eax, lpString
		mov	[esp+0C8h+lpString], eax ; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:GetPropW
		call	eax ; GetPropW
		sub	esp, 8
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+844h]
		test	eax, eax
		jz	short loc_403A34
		mov	[esp+0C8h+lpString], 0 ; nCmdShow
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:ShowWindow
		call	eax ; ShowWindow
		sub	esp, 8
		jmp	short loc_403A44
; ---------------------------------------------------------------------------

loc_403A34:				; CODE XREF: sub_403276+7A2j
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:DestroyWindow
		call	eax ; DestroyWindow
		sub	esp, 4

loc_403A44:				; CODE XREF: sub_403276+7BCj
		mov	eax, 1
		jmp	short loc_403A7D
; ---------------------------------------------------------------------------

loc_403A4B:				; CODE XREF: sub_403276+50j
		mov	eax, lpString
		mov	[esp+0C8h+lpString], eax ; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+0C8h+hWnd], eax ; hWnd
		mov	eax, ds:RemovePropW
		call	eax ; RemovePropW
		sub	esp, 8
		jmp	short loc_403A78
; ---------------------------------------------------------------------------

loc_403A66:				; CODE XREF: sub_403276+32j
		mov	[esp+0C8h+hWnd], 0 ; nExitCode
		mov	eax, ds:PostQuitMessage
		call	eax ; PostQuitMessage
		sub	esp, 4
		nop

loc_403A78:				; CODE XREF: sub_403276+38j
					; sub_403276+56j ...
		mov	eax, 0

loc_403A7D:				; CODE XREF: sub_403276+88j
					; sub_403276+149j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	10h
sub_403276	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; DWORD	__stdcall StartAddress(LPVOID lpThreadParameter)
StartAddress	proc near		; DATA XREF: sub_403F71+CCo

Dest		= dword	ptr -1C8h
Source		= dword	ptr -1C4h
Count		= dword	ptr -1C0h
lParam		= dword	ptr -1BCh
Msg		= tagMSG ptr -1B8h
Str		= word ptr -19Ch
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
lpThreadParameter= dword ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 1C4h
		mov	eax, [ebp+lpThreadParameter]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+1C8h+Count], 0C8h ; Count
		mov	[esp+1C8h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+1C8h+Dest], eax ; Dest
		call	wcsncpy
		lea	eax, [ebp+Str]
		mov	[esp+1C8h+Dest], eax ; Str
		call	wcslen
		mov	ebx, eax
		mov	[esp+1C8h+Dest], offset	Str ; Str
		call	wcslen
		sub	ebx, eax
		mov	eax, ebx
		sub	eax, 1
		mov	[ebp+eax*2+Str], 0
		mov	eax, [ebp+var_C]
		mov	eax, [eax+844h]
		cmp	eax, 6
		jnz	short loc_403AF6
		mov	eax, 7
		jmp	short loc_403AFB
; ---------------------------------------------------------------------------

loc_403AF6:				; CODE XREF: StartAddress+66j
		mov	eax, 1

loc_403AFB:				; CODE XREF: StartAddress+6Dj
		mov	edx, [ebp+var_C]
		mov	[edx+844h], eax
		mov	eax, [ebp+var_C]
		mov	[esp+1C8h+Count], eax ;	LPARAM
		mov	[esp+1C8h+Source], offset sub_403276 ; DLGPROC
		mov	[esp+1C8h+Dest], 0A0h ;	int
		call	sub_405555
		mov	edx, [ebp+var_C]
		mov	[edx+890h], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax+890h]
		test	eax, eax
		jnz	short loc_403B3F
		mov	eax, 1
		jmp	loc_403E84
; ---------------------------------------------------------------------------

loc_403B3F:				; CODE XREF: StartAddress+ACj
		call	sub_40693D
		mov	[esp+1C8h+Source], 1
		mov	eax, [ebp+var_C]
		mov	[esp+1C8h+Dest], eax
		call	sub_406A62
		mov	[esp+1C8h+Dest], 4D9h
		call	sub_40524A
		mov	edx, [ebp+var_C]
		mov	edx, [edx+890h]
		mov	[esp+1C8h+Count], eax ;	lpString
		mov	[esp+1C8h+Source], 0A1h	; nIDDlgItem
		mov	[esp+1C8h+Dest], edx ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		lea	eax, [ebp+Str]
		mov	[esp+1C8h+Source], eax
		mov	[esp+1C8h+Dest], 4DAh
		call	sub_40524A
		mov	edx, [ebp+var_C]
		mov	edx, [edx+890h]
		mov	[esp+1C8h+Source], eax ; lpString
		mov	[esp+1C8h+Dest], edx ; hWnd
		mov	eax, ds:SetWindowTextW
		call	eax ; SetWindowTextW
		sub	esp, 8
		mov	eax, [ebp+var_C]
		mov	[esp+1C8h+Dest], eax
		call	sub_40BEE1
		test	eax, eax
		jnz	short loc_403BF2
		mov	eax, [ebp+var_C]
		mov	eax, [eax+890h]
		mov	[esp+1C8h+lParam], 0 ; lParam
		mov	[esp+1C8h+Count], 0 ; wParam
		mov	[esp+1C8h+Source], 10h ; Msg
		mov	[esp+1C8h+Dest], eax ; hWnd
		mov	eax, ds:PostMessageW
		call	eax ; PostMessageW
		sub	esp, 10h

loc_403BF2:				; CODE XREF: StartAddress+13Bj
		movzx	eax, ds:word_42E3D4
		cmp	ax, 30h
		jnz	short loc_403C22
		mov	eax, [ebp+var_C]
		mov	eax, [eax+890h]
		mov	[esp+1C8h+Source], 5 ; nCmdShow
		mov	[esp+1C8h+Dest], eax ; hWnd
		mov	eax, ds:ShowWindow
		call	eax ; ShowWindow
		sub	esp, 8
		jmp	loc_403E4C
; ---------------------------------------------------------------------------

loc_403C22:				; CODE XREF: StartAddress+176j
		jmp	loc_403E4C
; ---------------------------------------------------------------------------

loc_403C27:				; CODE XREF: StartAddress+3F2j
		mov	eax, [ebp+Msg.hwnd]
		test	eax, eax
		jnz	loc_403E02
		mov	eax, [ebp+Msg.message]
		cmp	eax, 800Ah
		jz	short loc_403C52
		cmp	eax, 800Bh
		jz	loc_403D34
		jmp	loc_403E4C
; ---------------------------------------------------------------------------

loc_403C52:				; CODE XREF: StartAddress+1B9j
		mov	eax, [ebp+var_C]
		mov	dword ptr [eax+844h], 4
		mov	[esp+1C8h+Source], 0 ; int
		mov	eax, [ebp+var_C]
		mov	[esp+1C8h+Dest], eax ; wchar_t *
		call	sub_40BC71
		mov	eax, [ebp+var_C]
		mov	eax, [eax+890h]
		mov	[esp+1C8h+Source], 0A3h	; nIDDlgItem
		mov	[esp+1C8h+Dest], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+1C8h+Source], 0 ; bEnable
		mov	[esp+1C8h+Dest], eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	eax, [ebp+var_C]
		mov	eax, [eax+890h]
		mov	[esp+1C8h+Source], 0A4h	; nIDDlgItem
		mov	[esp+1C8h+Dest], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+1C8h+Source], 0 ; bEnable
		mov	[esp+1C8h+Dest], eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+1C8h+Source], 4
		mov	eax, [ebp+var_C]
		mov	[esp+1C8h+Dest], eax
		call	sub_406A62
		mov	[esp+1C8h+Dest], 4C4h
		call	sub_40524A
		mov	edx, [ebp+var_C]
		mov	edx, [edx+890h]
		mov	[esp+1C8h+Count], eax ;	lpString
		mov	[esp+1C8h+Source], 0A1h	; nIDDlgItem
		mov	[esp+1C8h+Dest], edx ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		mov	eax, [ebp+var_C]
		mov	eax, [eax+888h]
		mov	[esp+1C8h+Dest], eax ; hEvent
		mov	eax, ds:SetEvent
		call	eax ; SetEvent
		sub	esp, 4
		jmp	loc_403E00
; ---------------------------------------------------------------------------

loc_403D34:				; CODE XREF: StartAddress+1C0j
		mov	eax, [ebp+var_C]
		mov	dword ptr [eax+844h], 5
		mov	eax, [ebp+var_C]
		mov	eax, [eax+890h]
		mov	[esp+1C8h+Source], 0A3h	; nIDDlgItem
		mov	[esp+1C8h+Dest], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+1C8h+Source], 0 ; bEnable
		mov	[esp+1C8h+Dest], eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	eax, [ebp+var_C]
		mov	eax, [eax+890h]
		mov	[esp+1C8h+Source], 0A4h	; nIDDlgItem
		mov	[esp+1C8h+Dest], eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+1C8h+Source], 0 ; bEnable
		mov	[esp+1C8h+Dest], eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+1C8h+Source], 4
		mov	[esp+1C8h+Dest], offset	ThreadId
		call	sub_406A62
		mov	[esp+1C8h+Dest], 4C4h
		call	sub_40524A
		mov	edx, [ebp+var_C]
		mov	edx, [edx+890h]
		mov	[esp+1C8h+Count], eax ;	lpString
		mov	[esp+1C8h+Source], 0A1h	; nIDDlgItem
		mov	[esp+1C8h+Dest], edx ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		mov	eax, [ebp+var_C]
		mov	eax, [eax+888h]
		mov	[esp+1C8h+Dest], eax ; hEvent
		mov	eax, ds:SetEvent
		call	eax ; SetEvent
		sub	esp, 4
		nop

loc_403E00:				; CODE XREF: StartAddress+2A8j
		jmp	short loc_403E4C
; ---------------------------------------------------------------------------

loc_403E02:				; CODE XREF: StartAddress+1A8j
		mov	eax, [ebp+var_C]
		mov	eax, [eax+890h]
		lea	edx, [ebp+Msg]
		mov	[esp+1C8h+Source], edx ; lpMsg
		mov	[esp+1C8h+Dest], eax ; hDlg
		mov	eax, ds:IsDialogMessageW
		call	eax ; IsDialogMessageW
		sub	esp, 8
		test	eax, eax
		jnz	short loc_403E4C
		lea	eax, [ebp+Msg]
		mov	[esp+1C8h+Dest], eax ; lpMsg
		mov	eax, ds:TranslateMessage
		call	eax ; TranslateMessage
		sub	esp, 4
		lea	eax, [ebp+Msg]
		mov	[esp+1C8h+Dest], eax ; lpMsg
		mov	eax, ds:DispatchMessageW
		call	eax ; DispatchMessageW
		sub	esp, 4

loc_403E4C:				; CODE XREF: StartAddress+196j
					; StartAddress:loc_403C22j ...
		mov	[esp+1C8h+lParam], 0 ; wMsgFilterMax
		mov	[esp+1C8h+Count], 0 ; wMsgFilterMin
		mov	[esp+1C8h+Source], 0 ; hWnd
		lea	eax, [ebp+Msg]
		mov	[esp+1C8h+Dest], eax ; lpMsg
		mov	eax, ds:GetMessageW
		call	eax ; GetMessageW
		sub	esp, 10h
		test	eax, eax
		jnz	loc_403C27
		mov	eax, 0

loc_403E84:				; CODE XREF: StartAddress+B3j
		mov	ebx, [ebp+var_4]
		leave
		retn	4
StartAddress	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403E8B	proc near		; CODE XREF: sub_403F71+4C2p

Str1		= dword	ptr -18h
Str2		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 20h
		mov	[esp+18h+Str2],	offset aIdle_priority_ ; "IDLE_PRIORITY_CLASS"
		mov	[esp+18h+Str1],	offset Str1 ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_403EC0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 40h
		jmp	loc_403F6A
; ---------------------------------------------------------------------------

loc_403EC0:				; CODE XREF: sub_403E8B+25j
		mov	[esp+18h+Str2],	offset aBelow_normal_p ; "BELOW_NORMAL_PRIORITY_CLASS"
		mov	[esp+18h+Str1],	offset Str1 ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_403EE6
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 4000h
		jmp	loc_403F6A
; ---------------------------------------------------------------------------

loc_403EE6:				; CODE XREF: sub_403E8B+4Bj
		mov	[esp+18h+Str2],	offset aNormal_priorit ; "NORMAL_PRIORITY_CLASS"
		mov	[esp+18h+Str1],	offset Str1 ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_403F09
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 20h
		jmp	short loc_403F6A
; ---------------------------------------------------------------------------

loc_403F09:				; CODE XREF: sub_403E8B+71j
		mov	[esp+18h+Str2],	offset off_4102D8 ; Str2
		mov	[esp+18h+Str1],	offset Str1 ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_403F2C
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 8000h
		jmp	short loc_403F6A
; ---------------------------------------------------------------------------

loc_403F2C:				; CODE XREF: sub_403E8B+94j
		mov	[esp+18h+Str2],	offset aHigh_priority_ ; "HIGH_PRIORITY_CLASS"
		mov	[esp+18h+Str1],	offset Str1 ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_403F4F
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 80h
		jmp	short loc_403F6A
; ---------------------------------------------------------------------------

loc_403F4F:				; CODE XREF: sub_403E8B+B7j
		mov	[esp+18h+Str2],	offset Str1
		mov	[esp+18h+Str1],	4B6h
		call	sub_405340
		mov	eax, 0
		jmp	short locret_403F6F
; ---------------------------------------------------------------------------

loc_403F6A:				; CODE XREF: sub_403E8B+30j
					; sub_403E8B+56j ...
		mov	eax, 1

locret_403F6F:				; CODE XREF: sub_403E8B+DDj
		leave
		retn
sub_403E8B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_403F71(LPDWORD lpThreadId, HANDLE hTemplateFile, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation, int)
sub_403F71	proc near		; CODE XREF: sub_401A00+3Dp
					; sub_401A57+3Ep ...

Buffer		= dword	ptr -1098h
var_106C	= dword	ptr -106Ch
var_1060	= dword	ptr -1060h
var_105C	= dword	ptr -105Ch
var_1058	= dword	ptr -1058h
SecurityAttributes= _SECURITY_ATTRIBUTES ptr -898h
pSecurityDescriptor= byte ptr -88Ch
ProcessInformation= _PROCESS_INFORMATION ptr -878h
var_868		= dword	ptr -868h
Mode		= dword	ptr -864h
NumberOfBytesWritten= dword ptr	-860h
hWritePipe	= dword	ptr -85Ch
hReadPipe	= dword	ptr -858h
Name		= word ptr -852h
CommandLine	= word ptr -830h
var_30		= dword	ptr -30h
hThread		= dword	ptr -2Ch
Str		= dword	ptr -28h
var_24		= dword	ptr -24h
hNamedPipe	= dword	ptr -20h
hObject		= dword	ptr -1Ch
Dst		= dword	ptr -0Ch
Val		= dword	ptr -8
Size		= dword	ptr -4
lpParameter	= dword	ptr  0
lpThreadId	= dword	ptr  8
hTemplateFile	= dword	ptr  0Ch
lpCurrentDirectory= dword ptr  10h
lpStartupInfo	= dword	ptr  14h
lpProcessInformation= dword ptr	 18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	eax, 10BCh
		call	sub_40E640
		sub	esp, eax
		lea	eax, [ebp+CommandLine]
		add	eax, 10h
		mov	[ebp+Str], eax
		mov	[ebp+hReadPipe], 0
		mov	[ebp+hWritePipe], 0
		mov	[ebp+hObject], 0
		mov	[ebp+hThread], 0
		mov	[ebp+hNamedPipe], 0
		mov	[ebp+var_24], 0
		mov	eax, [ebp+lpThreadId]
		add	eax, 820h
		mov	[esp+0Ch+Size],	20h ; Size
		mov	[esp+0Ch+Val], 0 ; Val
		mov	[esp+0Ch+Dst], eax ; Dst
		call	memset
		mov	eax, [ebp+lpThreadId]
		mov	[esp+0Ch+Dst], eax ; wchar_t *
		call	sub_40B7F7
		movzx	eax, ds:word_42DFB0
		cmp	ax, 30h
		jz	short loc_404022
		movzx	eax, ds:word_42DFB0
		cmp	ax, 31h
		jz	short loc_404022
		mov	[esp+0Ch+Val], offset word_42DFB0
		mov	[esp+0Ch+Dst], 4B7h
		call	sub_405340
		mov	eax, 0
		jmp	loc_40479E
; ---------------------------------------------------------------------------

loc_404022:				; CODE XREF: sub_403F71+84j
					; sub_403F71+91j
		mov	eax, [ebp+lpThreadId]
		add	eax, 88Ch
		mov	[esp+0Ch+lpThreadId], eax ; lpThreadId
		mov	dword ptr [esp+10h], 4 ; dwCreationFlags
		mov	eax, [ebp+lpThreadId]
		mov	[esp+0Ch+lpParameter], eax ; lpParameter
		mov	[esp+0Ch+Size],	offset StartAddress ; lpStartAddress
		mov	[esp+0Ch+Val], 0 ; dwStackSize
		mov	[esp+0Ch+Dst], 0 ; lpThreadAttributes
		mov	eax, ds:CreateThread
		call	eax ; CreateThread
		sub	esp, 18h
		mov	[ebp+hThread], eax
		cmp	[ebp+hThread], 0
		jnz	short loc_404078
		mov	[esp+0Ch+Dst], 4C3h
		call	sub_405340
		jmp	loc_4046F7
; ---------------------------------------------------------------------------

loc_404078:				; CODE XREF: sub_403F71+F4j
		mov	eax, [ebp+lpThreadId]
		mov	ebx, [eax+88Ch]
		mov	eax, ds:GetCurrentProcessId
		call	eax ; GetCurrentProcessId
		mov	[esp+10h], ebx
		mov	[esp+0Ch+lpParameter], eax ; char
		mov	[esp+0Ch+Size],	offset aX08x ; "%x%08x"
		mov	[esp+0Ch+Val], 11h ; size_t
		lea	eax, [ebp+Name]
		mov	[esp+0Ch+Dst], eax ; wchar_t *
		call	sub_4023CC
		lea	eax, [ebp+Name]
		mov	[esp+0Ch+lpParameter], eax ; lpName
		mov	[esp+0Ch+Size],	0 ; bInitialState
		mov	[esp+0Ch+Val], 1 ; bManualReset
		mov	[esp+0Ch+Dst], 0 ; lpEventAttributes
		mov	eax, ds:CreateEventW
		call	eax ; CreateEventW
		sub	esp, 10h
		mov	edx, [ebp+lpThreadId]
		mov	[edx+888h], eax
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+888h]
		test	eax, eax
		jnz	short loc_40410A
		lea	eax, [ebp+Name]
		mov	[esp+0Ch+Val], eax
		mov	[esp+0Ch+Dst], 4B5h
		call	sub_405340
		jmp	loc_4046F7
; ---------------------------------------------------------------------------

loc_40410A:				; CODE XREF: sub_403F71+17Cj
		mov	eax, [ebp+lpThreadId]
		add	eax, 86Ch
		mov	[esp+0Ch+Val], 0Fh ; dwLen
		mov	[esp+0Ch+Dst], eax ; pbBuffer
		call	sub_408334
		mov	eax, ds:dword_42D748
		test	eax, eax
		jz	short loc_404132
		mov	ebx, offset aManagementQuer ; "--management-query-proxy	"
		jmp	short loc_404137
; ---------------------------------------------------------------------------

loc_404132:				; CODE XREF: sub_403F71+1B8j
		mov	ebx, offset byte_4100E0

loc_404137:				; CODE XREF: sub_403F71+1BFj
		mov	eax, [ebp+lpThreadId]
		movzx	eax, word ptr [eax+85Ah]
		movzx	eax, ax
		mov	[esp+0Ch+Dst], eax ; netshort
		mov	eax, ds:ntohs
		call	eax ; ntohs
		sub	esp, 4
		movzx	esi, ax
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+85Ch]
		mov	[esp+0Ch+Dst], eax ; in
		mov	eax, ds:inet_ntoa
		call	eax ; inet_ntoa
		sub	esp, 4
		mov	edx, eax
		mov	eax, [ebp+lpThreadId]
		lea	edi, [eax+618h]
		movzx	eax, ds:word_42DFB0
		cmp	ax, 31h
		jnz	short loc_404189
		mov	eax, offset aAppend ; "-append"
		jmp	short loc_40418E
; ---------------------------------------------------------------------------

loc_404189:				; CODE XREF: sub_403F71+20Fj
		mov	eax, offset byte_4100E0

loc_40418E:				; CODE XREF: sub_403F71+216j
		mov	ecx, [ebp+lpThreadId]
		mov	[esp+0Ch+arg_14], ebx
		mov	[esp+0Ch+lpProcessInformation],	esi
		mov	[esp+0Ch+lpStartupInfo], edx
		mov	[esp+0Ch+lpCurrentDirectory], edi
		mov	[esp+0Ch+hTemplateFile], eax
		lea	eax, [ebp+Name]
		mov	[esp+0Ch+lpThreadId], eax
		mov	dword ptr [esp+10h], offset aOpenvpnGui10 ; "OpenVPN GUI 10"
		mov	[esp+0Ch+lpParameter], ecx ; char
		mov	[esp+0Ch+Size],	offset aOpenvpnConfigS ; "openvpn --config \"%s\" --setenv IV_GUI"...
		mov	[esp+0Ch+Val], 400h ; size_t
		lea	eax, [ebp+CommandLine]
		mov	[esp+0Ch+Dst], eax ; wchar_t *
		call	sub_4023CC
		mov	[esp+0Ch+hTemplateFile], 0 ; hTemplateFile
		mov	[esp+0Ch+lpThreadId], 0	; dwFlagsAndAttributes
		mov	dword ptr [esp+10h], 3 ; dwCreationDisposition
		mov	[esp+0Ch+lpParameter], 0 ; lpSecurityAttributes
		mov	[esp+0Ch+Size],	0 ; dwShareMode
		mov	[esp+0Ch+Val], 0C0000000h ; dwDesiredAccess
		mov	[esp+0Ch+Dst], offset FileName ; "\\\\.\\pipe\\openvpn\\service"
		mov	eax, ds:CreateFileW
		call	eax ; CreateFileW
		sub	esp, 1Ch
		mov	[ebp+hNamedPipe], eax
		cmp	[ebp+hNamedPipe], 0FFFFFFFFh
		jz	loc_404364
		mov	eax, [ebp+lpThreadId]
		add	eax, 410h
		mov	[esp+0Ch+Dst], eax ; Str
		call	wcslen
		mov	ebx, eax
		mov	eax, [ebp+Str]
		mov	[esp+0Ch+Dst], eax ; Str
		call	wcslen
		add	eax, ebx
		add	eax, 13h
		mov	[ebp+var_30], eax
		mov	[ebp+Mode], 2
		mov	[esp+0Ch+lpParameter], 0 ; lpCollectDataTimeout
		mov	[esp+0Ch+Size],	0 ; lpMaxCollectionCount
		lea	eax, [ebp+Mode]
		mov	[esp+0Ch+Val], eax ; lpMode
		mov	eax, [ebp+hNamedPipe]
		mov	[esp+0Ch+Dst], eax ; hNamedPipe
		mov	eax, ds:SetNamedPipeHandleState
		call	eax ; SetNamedPipeHandleState
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_40429F
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+888h]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		jmp	loc_4046F7
; ---------------------------------------------------------------------------

loc_40429F:				; CODE XREF: sub_403F71+311j
		mov	eax, [ebp+lpThreadId]
		mov	byte ptr [eax+87Bh], 0Ah
		mov	eax, [ebp+lpThreadId]
		add	eax, 86Ch
		mov	edx, [ebp+lpThreadId]
		add	edx, 410h
		mov	[esp+0Ch+lpStartupInfo], eax
		mov	[esp+0Ch+lpCurrentDirectory], 10h
		mov	[esp+0Ch+hTemplateFile], 0
		mov	eax, [ebp+Str]
		mov	[esp+0Ch+lpThreadId], eax
		mov	dword ptr [esp+10h], 0
		mov	[esp+0Ch+lpParameter], edx ; char
		mov	[esp+0Ch+Size],	offset asc_410526 ; "%"
		mov	[esp+0Ch+Val], 400h ; size_t
		lea	eax, [ebp+Buffer]
		mov	[esp+0Ch+Dst], eax ; wchar_t *
		call	sub_4023CC
		mov	eax, [ebp+lpThreadId]
		mov	byte ptr [eax+87Bh], 0
		mov	eax, [ebp+var_30]
		lea	edx, [eax+eax]
		mov	dword ptr [esp+10h], 0 ; lpOverlapped
		lea	eax, [ebp+NumberOfBytesWritten]
		mov	[esp+0Ch+lpParameter], eax ; lpNumberOfBytesWritten
		mov	[esp+0Ch+Size],	edx ; nNumberOfBytesToWrite
		lea	eax, [ebp+Buffer]
		mov	[esp+0Ch+Val], eax ; lpBuffer
		mov	eax, [ebp+hNamedPipe]
		mov	[esp+0Ch+Dst], eax ; hFile
		mov	eax, ds:WriteFile
		call	eax ; WriteFile
		sub	esp, 14h
		test	eax, eax
		jnz	short loc_40435F
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+888h]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		nop
		jmp	loc_4046F7
; ---------------------------------------------------------------------------

loc_40435F:				; CODE XREF: sub_403F71+3D0j
		jmp	loc_4046E0
; ---------------------------------------------------------------------------

loc_404364:				; CODE XREF: sub_403F71+2B0j
		mov	[ebp+SecurityAttributes.nLength], 0Ch
		lea	eax, [ebp+pSecurityDescriptor]
		mov	[ebp+SecurityAttributes.lpSecurityDescriptor], eax
		mov	[ebp+SecurityAttributes.bInheritHandle], 1
		mov	[esp+0Ch+Val], 1 ; dwRevision
		lea	eax, [ebp+pSecurityDescriptor]
		mov	[esp+0Ch+Dst], eax ; pSecurityDescriptor
		mov	eax, ds:InitializeSecurityDescriptor
		call	eax ; InitializeSecurityDescriptor
		sub	esp, 8
		test	eax, eax
		jnz	short loc_4043CF
		mov	[esp+0Ch+Dst], 4B9h
		call	sub_405340
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+888h]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, 0
		jmp	loc_40479E
; ---------------------------------------------------------------------------

loc_4043CF:				; CODE XREF: sub_403F71+430j
		mov	[esp+0Ch+lpParameter], 0 ; bDaclDefaulted
		mov	[esp+0Ch+Size],	0 ; pDacl
		mov	[esp+0Ch+Val], 1 ; bDaclPresent
		lea	eax, [ebp+pSecurityDescriptor]
		mov	[esp+0Ch+Dst], eax ; pSecurityDescriptor
		mov	eax, ds:SetSecurityDescriptorDacl
		call	eax ; SetSecurityDescriptorDacl
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_40442A
		mov	[esp+0Ch+Dst], 4BAh
		call	sub_405340
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+888h]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, 0
		jmp	loc_40479E
; ---------------------------------------------------------------------------

loc_40442A:				; CODE XREF: sub_403F71+48Bj
		lea	eax, [ebp+var_868]
		mov	[esp+0Ch+Dst], eax
		call	sub_403E8B
		test	eax, eax
		jnz	short loc_40445C
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+888h]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, 0
		jmp	loc_40479E
; ---------------------------------------------------------------------------

loc_40445C:				; CODE XREF: sub_403F71+4C9j
		mov	[esp+0Ch+hTemplateFile], 0 ; hTemplateFile
		mov	[esp+0Ch+lpThreadId], 0	; dwFlagsAndAttributes
		mov	dword ptr [esp+10h], 3 ; dwCreationDisposition
		lea	eax, [ebp+SecurityAttributes]
		mov	[esp+0Ch+lpParameter], eax ; lpSecurityAttributes
		mov	[esp+0Ch+Size],	2 ; dwShareMode
		mov	[esp+0Ch+Val], 40000000h ; dwDesiredAccess
		mov	[esp+0Ch+Dst], offset aNul ; "NUL"
		mov	eax, ds:CreateFileW
		call	eax ; CreateFileW
		sub	esp, 1Ch
		mov	[ebp+hObject], eax
		cmp	[ebp+hObject], 0FFFFFFFFh
		jnz	short loc_4044C8
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+888h]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, 0
		jmp	loc_40479E
; ---------------------------------------------------------------------------

loc_4044C8:				; CODE XREF: sub_403F71+535j
		mov	[esp+0Ch+lpParameter], 0 ; nSize
		lea	eax, [ebp+SecurityAttributes]
		mov	[esp+0Ch+Size],	eax ; lpPipeAttributes
		lea	eax, [ebp+hWritePipe]
		mov	[esp+0Ch+Val], eax ; hWritePipe
		lea	eax, [ebp+hReadPipe]
		mov	[esp+0Ch+Dst], eax ; hReadPipe
		mov	eax, ds:CreatePipe
		call	eax ; CreatePipe
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_404522
		mov	[esp+0Ch+Dst], 4D8h
		call	sub_405340
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+888h]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		jmp	loc_4046F7
; ---------------------------------------------------------------------------

loc_404522:				; CODE XREF: sub_403F71+588j
		mov	eax, [ebp+hWritePipe]
		mov	[esp+0Ch+Size],	0 ; dwFlags
		mov	[esp+0Ch+Val], 1 ; dwMask
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:SetHandleInformation
		call	eax ; SetHandleInformation
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_404570
		mov	[esp+0Ch+Dst], 4BFh
		call	sub_405340
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+888h]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		jmp	loc_4046F7
; ---------------------------------------------------------------------------

loc_404570:				; CODE XREF: sub_403F71+5D6j
		lea	eax, [ebp+Buffer]
		mov	[esp+0Ch+Dst], eax ; lpStartupInfo
		mov	eax, ds:GetStartupInfoW
		call	eax ; GetStartupInfoW
		sub	esp, 4
		mov	[ebp+Buffer], 44h
		mov	[ebp+var_106C],	100h
		mov	eax, [ebp+hReadPipe]
		mov	[ebp+var_1060],	eax
		mov	eax, [ebp+hObject]
		mov	[ebp+var_105C],	eax
		mov	eax, [ebp+hObject]
		mov	[ebp+var_1058],	eax
		mov	eax, [ebp+lpThreadId]
		lea	ecx, [eax+410h]
		mov	eax, [ebp+var_868]
		or	eax, 8000000h
		mov	edx, eax
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+0Ch+lpProcessInformation],	eax ; lpProcessInformation
		lea	eax, [ebp+Buffer]
		mov	[esp+0Ch+lpStartupInfo], eax ; lpStartupInfo
		mov	[esp+0Ch+lpCurrentDirectory], ecx ; lpCurrentDirectory
		mov	[esp+0Ch+hTemplateFile], 0 ; lpEnvironment
		mov	[esp+0Ch+lpThreadId], edx ; dwCreationFlags
		mov	dword ptr [esp+10h], 1 ; bInheritHandles
		mov	[esp+0Ch+lpParameter], 0 ; lpThreadAttributes
		mov	[esp+0Ch+Size],	0 ; lpProcessAttributes
		lea	eax, [ebp+CommandLine]
		mov	[esp+0Ch+Val], eax ; lpCommandLine
		mov	[esp+0Ch+Dst], offset ApplicationName ;	lpApplicationName
		mov	eax, ds:CreateProcessW
		call	eax ; CreateProcessW
		sub	esp, 28h
		test	eax, eax
		jnz	short loc_40466C
		mov	eax, [ebp+lpThreadId]
		add	eax, 410h
		mov	[esp+0Ch+lpParameter], eax
		lea	eax, [ebp+CommandLine]
		mov	[esp+0Ch+Size],	eax
		mov	[esp+0Ch+Val], offset ApplicationName
		mov	[esp+0Ch+Dst], 4C1h
		call	sub_405340
		mov	eax, [ebp+lpThreadId]
		mov	eax, [eax+888h]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		nop
		jmp	loc_4046F7
; ---------------------------------------------------------------------------

loc_40466C:				; CODE XREF: sub_403F71+6B3j
		mov	eax, [ebp+lpThreadId]
		mov	byte ptr [eax+87Bh], 0Ah
		mov	eax, [ebp+lpThreadId]
		lea	ecx, [eax+86Ch]
		mov	eax, [ebp+hWritePipe]
		mov	dword ptr [esp+10h], 0 ; lpOverlapped
		lea	edx, [ebp+NumberOfBytesWritten]
		mov	[esp+0Ch+lpParameter], edx ; lpNumberOfBytesWritten
		mov	[esp+0Ch+Size],	10h ; nNumberOfBytesToWrite
		mov	[esp+0Ch+Val], ecx ; lpBuffer
		mov	[esp+0Ch+Dst], eax ; hFile
		mov	eax, ds:WriteFile
		call	eax ; WriteFile
		sub	esp, 14h
		mov	eax, [ebp+lpThreadId]
		mov	byte ptr [eax+87Bh], 0
		mov	eax, [ebp+ProcessInformation.hProcess]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, [ebp+ProcessInformation.hThread]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

loc_4046E0:				; CODE XREF: sub_403F71:loc_40435Fj
		mov	eax, [ebp+hThread]
		mov	[esp+0Ch+Dst], eax ; hThread
		mov	eax, ds:ResumeThread
		call	eax ; ResumeThread
		sub	esp, 4
		mov	[ebp+var_24], 1

loc_4046F7:				; CODE XREF: sub_403F71+102j
					; sub_403F71+194j ...
		cmp	[ebp+hNamedPipe], 0
		jz	short loc_404713
		cmp	[ebp+hNamedPipe], 0FFFFFFFFh
		jz	short loc_404713
		mov	eax, [ebp+hNamedPipe]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

loc_404713:				; CODE XREF: sub_403F71+78Aj
					; sub_403F71+790j
		cmp	[ebp+hThread], 0
		jz	short loc_40472F
		cmp	[ebp+hThread], 0FFFFFFFFh
		jz	short loc_40472F
		mov	eax, [ebp+hThread]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

loc_40472F:				; CODE XREF: sub_403F71+7A6j
					; sub_403F71+7ACj
		mov	eax, [ebp+hWritePipe]
		test	eax, eax
		jz	short loc_404757
		mov	eax, [ebp+hWritePipe]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_404757
		mov	eax, [ebp+hWritePipe]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

loc_404757:				; CODE XREF: sub_403F71+7C6j
					; sub_403F71+7D1j
		mov	eax, [ebp+hReadPipe]
		test	eax, eax
		jz	short loc_40477F
		mov	eax, [ebp+hReadPipe]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_40477F
		mov	eax, [ebp+hReadPipe]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

loc_40477F:				; CODE XREF: sub_403F71+7EEj
					; sub_403F71+7F9j
		cmp	[ebp+hObject], 0
		jz	short loc_40479B
		cmp	[ebp+hObject], 0FFFFFFFFh
		jz	short loc_40479B
		mov	eax, [ebp+hObject]
		mov	[esp+0Ch+Dst], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

loc_40479B:				; CODE XREF: sub_403F71+812j
					; sub_403F71+818j
		mov	eax, [ebp+var_24]

loc_40479E:				; CODE XREF: sub_403F71+ACj
					; sub_403F71+459j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_403F71	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4047A6	proc near		; CODE XREF: sub_401972+3Dp
					; sub_401A57+72p ...

idThread	= dword	ptr -18h
Msg		= dword	ptr -14h
wParam		= dword	ptr -10h
lParam		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+88Ch]
		mov	[esp+18h+lParam], 0 ; lParam
		mov	[esp+18h+wParam], 0 ; wParam
		mov	[esp+18h+Msg], 800Ah ; Msg
		mov	[esp+18h+idThread], eax	; idThread
		mov	eax, ds:PostThreadMessageW
		call	eax ; PostThreadMessageW
		sub	esp, 10h
		leave
		retn
sub_4047A6	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4047DC	proc near		; CODE XREF: sub_401ADE+406p

idThread	= dword	ptr -18h
Msg		= dword	ptr -14h
wParam		= dword	ptr -10h
lParam		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		imul	eax, 894h
		add	eax, offset dword_4132D4
		mov	eax, [eax]
		mov	[esp+18h+lParam], 0 ; lParam
		mov	[esp+18h+wParam], 0 ; wParam
		mov	[esp+18h+Msg], 800Bh ; Msg
		mov	[esp+18h+idThread], eax	; idThread
		mov	eax, ds:PostThreadMessageW
		call	eax ; PostThreadMessageW
		sub	esp, 10h
		leave
		retn
sub_4047DC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_404819(HWND, int)
sub_404819	proc near		; CODE XREF: sub_4026B9+290p
					; sub_4026B9+3A3p ...

hWnd		= dword	ptr -28h
Msg		= dword	ptr -24h
wParam		= dword	ptr -20h
lParam		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+hWnd],	eax
		call	sub_405370
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_404835
		jmp	short locret_404883
; ---------------------------------------------------------------------------

loc_404835:				; CODE XREF: sub_404819+18j
		mov	eax, [ebp+var_C]
		mov	[esp+28h+lParam], eax ;	lParam
		mov	[esp+28h+wParam], 0 ; wParam
		mov	[esp+28h+Msg], 80h ; Msg
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	eax, [ebp+var_C]
		mov	[esp+28h+lParam], eax ;	lParam
		mov	[esp+28h+wParam], 1 ; wParam
		mov	[esp+28h+Msg], 80h ; Msg
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h

locret_404883:				; CODE XREF: sub_404819+1Aj
		leave
		retn
sub_404819	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_404885(HANDLE	hFile, LPVOID Buf, DWORD)
sub_404885	proc near		; CODE XREF: sub_4049C0+2E4p

hNamedPipe	= dword	ptr -38h
lpBuffer	= dword	ptr -34h
nBufferSize	= dword	ptr -30h
lpBytesRead	= dword	ptr -2Ch
lpTotalBytesAvail= dword ptr -28h
lpBytesLeftThisMessage=	dword ptr -24h
BytesRead	= dword	ptr -14h
nNumberOfBytesToRead= dword ptr	-10h
var_C		= dword	ptr -0Ch
hFile		= dword	ptr  8
Buf		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h

loc_40488B:				; CODE XREF: sub_404885+FAj
		mov	[esp+38h+lpBytesLeftThisMessage], 0 ; lpBytesLeftThisMessage
		mov	[esp+38h+lpTotalBytesAvail], 0 ; lpTotalBytesAvail
		lea	eax, [ebp+BytesRead]
		mov	[esp+38h+lpBytesRead], eax ; lpBytesRead
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+nBufferSize], eax ; nBufferSize
		mov	eax, [ebp+Buf]
		mov	[esp+38h+lpBuffer], eax	; lpBuffer
		mov	eax, [ebp+hFile]
		mov	[esp+38h+hNamedPipe], eax ; hNamedPipe
		mov	eax, ds:PeekNamedPipe
		call	eax ; PeekNamedPipe
		sub	esp, 18h
		test	eax, eax
		jnz	short loc_4048E6
		mov	eax, ds:GetLastError
		call	eax ; GetLastError
		cmp	eax, 6Dh
		jz	short loc_4048DC
		mov	[esp+38h+hNamedPipe], 4D3h
		call	sub_405340

loc_4048DC:				; CODE XREF: sub_404885+49j
		mov	eax, 0
		jmp	locret_4049BE
; ---------------------------------------------------------------------------

loc_4048E6:				; CODE XREF: sub_404885+3Dj
		mov	eax, [ebp+BytesRead]
		mov	[esp+38h+nBufferSize], eax ; MaxCount
		mov	[esp+38h+lpBuffer], 0Dh	; Val
		mov	eax, [ebp+Buf]
		mov	[esp+38h+hNamedPipe], eax ; Buf
		call	memchr
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_40495F
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+Buf]
		sub	edx, eax
		mov	eax, edx
		add	eax, 2
		mov	[ebp+nNumberOfBytesToRead], eax
		mov	eax, [ebp+nNumberOfBytesToRead]
		cmp	eax, [ebp+arg_8]
		jbe	short loc_40492B
		mov	eax, 0
		jmp	locret_4049BE
; ---------------------------------------------------------------------------

loc_40492B:				; CODE XREF: sub_404885+9Aj
		nop
		mov	[esp+38h+lpTotalBytesAvail], 0 ; lpOverlapped
		lea	eax, [ebp+BytesRead]
		mov	[esp+38h+lpBytesRead], eax ; lpNumberOfBytesRead
		mov	eax, [ebp+nNumberOfBytesToRead]
		mov	[esp+38h+nBufferSize], eax ; nNumberOfBytesToRead
		mov	eax, [ebp+Buf]
		mov	[esp+38h+lpBuffer], eax	; lpBuffer
		mov	eax, [ebp+hFile]
		mov	[esp+38h+hNamedPipe], eax ; hFile
		mov	eax, ds:ReadFile
		call	eax ; ReadFile
		sub	esp, 14h
		test	eax, eax
		jz	short loc_40498C
		jmp	short loc_404984
; ---------------------------------------------------------------------------

loc_40495F:				; CODE XREF: sub_404885+82j
		mov	eax, [ebp+BytesRead]
		cmp	eax, [ebp+arg_8]
		jnz	short loc_40496E
		mov	eax, 0
		jmp	short locret_4049BE
; ---------------------------------------------------------------------------

loc_40496E:				; CODE XREF: sub_404885+E0j
		mov	[esp+38h+hNamedPipe], 64h ; dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4
		jmp	loc_40488B
; ---------------------------------------------------------------------------

loc_404984:				; CODE XREF: sub_404885+D8j
		mov	eax, [ebp+BytesRead]
		cmp	eax, [ebp+nNumberOfBytesToRead]
		jz	short loc_4049AB

loc_40498C:				; CODE XREF: sub_404885+D6j
		mov	eax, ds:GetLastError
		call	eax ; GetLastError
		cmp	eax, 6Dh
		jz	short loc_4049A4
		mov	[esp+38h+hNamedPipe], 4D3h
		call	sub_405340

loc_4049A4:				; CODE XREF: sub_404885+111j
		mov	eax, 0
		jmp	short locret_4049BE
; ---------------------------------------------------------------------------

loc_4049AB:				; CODE XREF: sub_404885+105j
		mov	eax, [ebp+BytesRead]
		lea	edx, [eax-2]
		mov	eax, [ebp+Buf]
		add	eax, edx
		mov	byte ptr [eax],	0
		mov	eax, 1

locret_4049BE:				; CODE XREF: sub_404885+5Cj
					; sub_404885+A1j ...
		leave
		retn
sub_404885	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4049C0	proc near		; CODE XREF: sub_401623:loc_4017A8p

Dst		= dword	ptr -6F8h
Val		= dword	ptr -6F4h
Size		= dword	ptr -6F0h
bDaclDefaulted	= dword	ptr -6ECh
bInheritHandles	= dword	ptr -6E8h
dwCreationFlags	= dword	ptr -6E4h
lpEnvironment	= dword	ptr -6E0h
lpCurrentDirectory= dword ptr -6DCh
lpStartupInfo	= dword	ptr -6D8h
lpProcessInformation= dword ptr	-6D4h
PipeAttributes	= _SECURITY_ATTRIBUTES ptr -6C4h
pSecurityDescriptor= byte ptr -6B8h
Str		= byte ptr -6A4h
Dest		= word ptr -2A4h
SubStr		= byte ptr -9Bh
var_97		= dword	ptr -97h
var_93		= word ptr -93h
var_91		= byte ptr -91h
CommandLine	= word ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
ProcessInformation= _PROCESS_INFORMATION ptr -6Ch
StartupInfo	= _STARTUPINFOW	ptr -5Ch
hWritePipe	= dword	ptr -18h
hReadPipe	= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 6F8h
		mov	[ebp+var_C], 0
		mov	eax, ds:dword_410548
		mov	dword ptr [ebp+CommandLine], eax
		mov	eax, ds:dword_41054C
		mov	[ebp+var_8C], eax
		mov	eax, ds:dword_410550
		mov	[ebp+var_88], eax
		mov	eax, ds:dword_410554
		mov	[ebp+var_84], eax
		mov	eax, ds:dword_410558
		mov	[ebp+var_80], eax
		mov	eax, ds:dword_41055C
		mov	[ebp+var_7C], eax
		mov	eax, ds:dword_410560
		mov	[ebp+var_78], eax
		mov	eax, ds:dword_410564
		mov	[ebp+var_74], eax
		mov	eax, ds:dword_410568
		mov	[ebp+var_70], eax
		mov	dword ptr [ebp+SubStr],	6E65704Fh
		mov	[ebp+var_97], 204E5056h
		mov	[ebp+var_93], 2E32h
		mov	[ebp+var_91], 0
		mov	[esp+6F8h+Size], 44h ; Size
		mov	[esp+6F8h+Val],	0 ; Val
		lea	eax, [ebp+StartupInfo]
		mov	[esp+6F8h+Dst],	eax ; Dst
		call	memset
		mov	[esp+6F8h+Size], 10h ; Size
		mov	[esp+6F8h+Val],	0 ; Val
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+6F8h+Dst],	eax ; Dst
		call	memset
		mov	[ebp+PipeAttributes.nLength], 0Ch
		lea	eax, [ebp+pSecurityDescriptor]
		mov	[ebp+PipeAttributes.lpSecurityDescriptor], eax
		mov	[ebp+PipeAttributes.bInheritHandle], 1
		mov	[esp+6F8h+Val],	1 ; dwRevision
		lea	eax, [ebp+pSecurityDescriptor]
		mov	[esp+6F8h+Dst],	eax ; pSecurityDescriptor
		mov	eax, ds:InitializeSecurityDescriptor
		call	eax ; InitializeSecurityDescriptor
		sub	esp, 8
		test	eax, eax
		jnz	short loc_404AD3
		mov	[esp+6F8h+Dst],	4B9h
		call	sub_405340
		mov	eax, 0
		jmp	locret_404D13
; ---------------------------------------------------------------------------

loc_404AD3:				; CODE XREF: sub_4049C0+FBj
		mov	[esp+6F8h+bDaclDefaulted], 0 ; bDaclDefaulted
		mov	[esp+6F8h+Size], 0 ; pDacl
		mov	[esp+6F8h+Val],	1 ; bDaclPresent
		lea	eax, [ebp+pSecurityDescriptor]
		mov	[esp+6F8h+Dst],	eax ; pSecurityDescriptor
		mov	eax, ds:SetSecurityDescriptorDacl
		call	eax ; SetSecurityDescriptorDacl
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_404B18
		mov	[esp+6F8h+Dst],	4BAh
		call	sub_405340
		mov	eax, 0
		jmp	locret_404D13
; ---------------------------------------------------------------------------

loc_404B18:				; CODE XREF: sub_4049C0+140j
		mov	[esp+6F8h+bDaclDefaulted], 0 ; nSize
		lea	eax, [ebp+PipeAttributes]
		mov	[esp+6F8h+Size], eax ; lpPipeAttributes
		lea	eax, [ebp+hWritePipe]
		mov	[esp+6F8h+Val],	eax ; hWritePipe
		lea	eax, [ebp+hReadPipe]
		mov	[esp+6F8h+Dst],	eax ; hReadPipe
		mov	eax, ds:CreatePipe
		call	eax ; CreatePipe
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_404B5B
		mov	[esp+6F8h+Dst],	4D8h
		call	sub_405340
		mov	eax, 0
		jmp	locret_404D13
; ---------------------------------------------------------------------------

loc_404B5B:				; CODE XREF: sub_4049C0+183j
		mov	eax, [ebp+hReadPipe]
		mov	[esp+6F8h+Size], 0 ; dwFlags
		mov	[esp+6F8h+Val],	1 ; dwMask
		mov	[esp+6F8h+Dst],	eax ; hObject
		mov	eax, ds:SetHandleInformation
		call	eax ; SetHandleInformation
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_404B90
		mov	[esp+6F8h+Dst],	4BFh
		call	sub_405340
		jmp	loc_404CF0
; ---------------------------------------------------------------------------

loc_404B90:				; CODE XREF: sub_4049C0+1BDj
		mov	[esp+6F8h+Size], 104h ;	Count
		mov	[esp+6F8h+Val],	offset ApplicationName ; Source
		lea	eax, [ebp+Dest]
		mov	[esp+6F8h+Dst],	eax ; Dest
		call	wcsncpy
		mov	[esp+6F8h+Val],	5Ch ; Ch
		lea	eax, [ebp+Dest]
		mov	[esp+6F8h+Dst],	eax ; Str
		call	wcsrchr
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_404BD5
		mov	eax, [ebp+var_10]
		mov	word ptr [eax],	0

loc_404BD5:				; CODE XREF: sub_4049C0+20Bj
		mov	[ebp+StartupInfo.cb], 44h
		mov	[ebp+StartupInfo.dwFlags], 100h
		mov	[esp+6F8h+Dst],	0FFFFFFF6h ; nStdHandle
		mov	eax, ds:GetStdHandle
		call	eax ; GetStdHandle
		sub	esp, 4
		mov	[ebp+StartupInfo.hStdInput], eax
		mov	eax, [ebp+hWritePipe]
		mov	[ebp+StartupInfo.hStdOutput], eax
		mov	eax, [ebp+hWritePipe]
		mov	[ebp+StartupInfo.hStdError], eax
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+6F8h+lpProcessInformation], eax ; lpProcessInformation
		lea	eax, [ebp+StartupInfo]
		mov	[esp+6F8h+lpStartupInfo], eax ;	lpStartupInfo
		lea	eax, [ebp+Dest]
		mov	[esp+6F8h+lpCurrentDirectory], eax ; lpCurrentDirectory
		mov	[esp+6F8h+lpEnvironment], 0 ; lpEnvironment
		mov	[esp+6F8h+dwCreationFlags], 8000000h ; dwCreationFlags
		mov	[esp+6F8h+bInheritHandles], 1 ;	bInheritHandles
		mov	[esp+6F8h+bDaclDefaulted], 0 ; lpThreadAttributes
		mov	[esp+6F8h+Size], 0 ; lpProcessAttributes
		lea	eax, [ebp+CommandLine]
		mov	[esp+6F8h+Val],	eax ; lpCommandLine
		mov	[esp+6F8h+Dst],	offset ApplicationName ; lpApplicationName
		mov	eax, ds:CreateProcessW
		call	eax ; CreateProcessW
		sub	esp, 28h
		test	eax, eax
		jnz	short loc_404C8C
		lea	eax, [ebp+Dest]
		mov	[esp+6F8h+bDaclDefaulted], eax
		lea	eax, [ebp+CommandLine]
		mov	[esp+6F8h+Size], eax
		mov	[esp+6F8h+Val],	offset ApplicationName
		mov	[esp+6F8h+Dst],	4C1h
		call	sub_405340
		jmp	short loc_404CF0
; ---------------------------------------------------------------------------

loc_404C8C:				; CODE XREF: sub_4049C0+2A0j
		mov	eax, [ebp+hReadPipe]
		mov	[esp+6F8h+Size], 400h ;	DWORD
		lea	edx, [ebp+Str]
		mov	[esp+6F8h+Val],	edx ; Buf
		mov	[esp+6F8h+Dst],	eax ; hFile
		call	sub_404885
		test	eax, eax
		jz	short loc_404CF0
		mov	eax, [ebp+ProcessInformation.hThread]
		mov	[esp+6F8h+Dst],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, [ebp+ProcessInformation.hProcess]
		mov	[esp+6F8h+Dst],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		lea	eax, [ebp+SubStr]
		mov	[esp+6F8h+Val],	eax ; SubStr
		lea	eax, [ebp+Str]
		mov	[esp+6F8h+Dst],	eax ; Str
		call	strstr
		test	eax, eax
		jz	short loc_404CF0
		mov	[ebp+var_C], 1

loc_404CF0:				; CODE XREF: sub_4049C0+1CBj
					; sub_4049C0+2CAj ...
		mov	eax, [ebp+hReadPipe]
		mov	[esp+6F8h+Dst],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, [ebp+hWritePipe]
		mov	[esp+6F8h+Dst],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, [ebp+var_C]

locret_404D13:				; CODE XREF: sub_4049C0+10Ej
					; sub_4049C0+153j ...
		leave
		retn
sub_4049C0	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_404D18(LPCWSTR, LPCWSTR, int)
sub_404D18	proc near		; CODE XREF: sub_405056+3Bp
					; sub_405370+28p ...

hModule		= dword	ptr -38h
lpType		= dword	ptr -34h
lpName		= dword	ptr -30h
wLanguage	= word ptr -2Ch
var_1C		= word ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_1C], ax
		movzx	edx, [ebp+var_1C]
		mov	eax, ds:hInstance
		mov	dword ptr [esp+38h+wLanguage], edx ; wLanguage
		mov	edx, [ebp+arg_4]
		mov	[esp+38h+lpName], edx ;	lpName
		mov	edx, [ebp+arg_0]
		mov	[esp+38h+lpType], edx ;	lpType
		mov	[esp+38h+hModule], eax ; hModule
		mov	eax, ds:FindResourceExW
		call	eax ; FindResourceExW
		sub	esp, 10h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_404D5B
		mov	eax, [ebp+var_C]
		jmp	short locret_404DB5
; ---------------------------------------------------------------------------

loc_404D5B:				; CODE XREF: sub_404D18+3Cj
		mov	eax, 409h
		movzx	edx, ax
		mov	eax, ds:hInstance
		mov	dword ptr [esp+38h+wLanguage], edx ; wLanguage
		mov	edx, [ebp+arg_4]
		mov	[esp+38h+lpName], edx ;	lpName
		mov	edx, [ebp+arg_0]
		mov	[esp+38h+lpType], edx ;	lpType
		mov	[esp+38h+hModule], eax ; hModule
		mov	eax, ds:FindResourceExW
		call	eax ; FindResourceExW
		sub	esp, 10h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_404D95
		mov	eax, [ebp+var_C]
		jmp	short locret_404DB5
; ---------------------------------------------------------------------------

loc_404D95:				; CODE XREF: sub_404D18+76j
		mov	eax, ds:hInstance
		mov	edx, [ebp+arg_0]
		mov	[esp+38h+lpName], edx ;	lpType
		mov	edx, [ebp+arg_4]
		mov	[esp+38h+lpType], edx ;	lpName
		mov	[esp+38h+hModule], eax ; hModule
		mov	eax, ds:FindResourceW
		call	eax ; FindResourceW
		sub	esp, 0Ch

locret_404DB5:				; CODE XREF: sub_404D18+41j
					; sub_404D18+7Bj
		leave
		retn
sub_404D18	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404DB7	proc near		; CODE XREF: sub_404F11+85p
					; sub_405206+Fp ...

hKey		= dword	ptr -38h
lpSubKey	= dword	ptr -34h
ulOptions	= dword	ptr -30h
samDesired	= dword	ptr -2Ch
phkResult	= dword	ptr -28h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		movzx	eax, ds:word_412040
		test	ax, ax
		jz	short loc_404DD5
		movzx	eax, ds:word_412040
		jmp	locret_404E64
; ---------------------------------------------------------------------------

loc_404DD5:				; CODE XREF: sub_404DB7+10j
		mov	dword ptr [ebp+var_14],	0
		lea	eax, [ebp+var_10]
		mov	[esp+38h+phkResult], eax ; phkResult
		mov	[esp+38h+samDesired], 20019h ; samDesired
		mov	[esp+38h+ulOptions], 0 ; ulOptions
		mov	[esp+38h+lpSubKey], offset SubKey ; "Software\\Nilings\\OpenVPN-GUI"
		mov	[esp+38h+hKey],	80000001h ; hKey
		mov	eax, ds:RegOpenKeyExW
		call	eax ; RegOpenKeyExW
		sub	esp, 14h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_404E2F
		mov	eax, [ebp+var_10]
		lea	edx, [ebp+var_14]
		mov	[esp+38h+ulOptions], edx ; LPBYTE
		mov	[esp+38h+lpSubKey], offset aU ;	"u"
		mov	[esp+38h+hKey],	eax ; HKEY
		call	sub_40B66B

loc_404E2F:				; CODE XREF: sub_404DB7+5Cj
		mov	eax, dword ptr [ebp+var_14]
		test	eax, eax
		jnz	short loc_404E3F
		mov	eax, ds:GetUserDefaultUILanguage
		call	eax ; GetUserDefaultUILanguage
		jmp	short loc_404E42
; ---------------------------------------------------------------------------

loc_404E3F:				; CODE XREF: sub_404DB7+7Dj
		mov	eax, dword ptr [ebp+var_14]

loc_404E42:				; CODE XREF: sub_404DB7+86j
		mov	ds:word_412040,	ax
		movzx	eax, ds:word_412040
		movzx	eax, ax
		mov	[esp+38h+hKey],	eax ; uiLang
		call	InitMUILanguage
		sub	esp, 4
		movzx	eax, ds:word_412040

locret_404E64:				; CODE XREF: sub_404DB7+19j
		leave
		retn
sub_404DB7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404E66	proc near		; CODE XREF: sub_40574D+1A6p

hKey		= dword	ptr -48h
lpSubKey	= dword	ptr -44h
Reserved	= dword	ptr -40h
lpClass		= dword	ptr -3Ch
dwOptions	= dword	ptr -38h
samDesired	= dword	ptr -34h
lpSecurityAttributes= dword ptr	-30h
phkResult	= dword	ptr -2Ch
lpdwDisposition	= dword	ptr -28h
var_1C		= word ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_1C], ax
		mov	[esp+48h+lpdwDisposition], 0 ; lpdwDisposition
		lea	eax, [ebp+var_C]
		mov	[esp+48h+phkResult], eax ; phkResult
		mov	[esp+48h+lpSecurityAttributes],	0 ; lpSecurityAttributes
		mov	[esp+48h+samDesired], 20006h ; samDesired
		mov	[esp+48h+dwOptions], 0 ; dwOptions
		mov	[esp+48h+lpClass], 0 ; lpClass
		mov	[esp+48h+Reserved], 0 ;	Reserved
		mov	[esp+48h+lpSubKey], offset SubKey ; "Software\\Nilings\\OpenVPN-GUI"
		mov	[esp+48h+hKey],	80000001h ; hKey
		mov	eax, ds:RegCreateKeyExW
		call	eax ; RegCreateKeyExW
		sub	esp, 24h
		test	eax, eax
		jz	short loc_404EDB
		mov	[esp+48h+lpSubKey], offset SubKey ; "Software\\Nilings\\OpenVPN-GUI"
		mov	[esp+48h+hKey],	647h
		call	sub_405340

loc_404EDB:				; CODE XREF: sub_404E66+5Fj
		movzx	edx, [ebp+var_1C]
		mov	eax, [ebp+var_C]
		mov	[esp+48h+Reserved], edx	; Data
		mov	[esp+48h+lpSubKey], offset aU ;	"u"
		mov	[esp+48h+hKey],	eax ; HKEY
		call	sub_40B73E
		movzx	eax, [ebp+var_1C]
		mov	[esp+48h+hKey],	eax ; uiLang
		call	InitMUILanguage
		sub	esp, 4
		movzx	eax, [ebp+var_1C]
		mov	ds:word_412040,	ax
		leave
		retn
sub_404E66	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_404F11(int, LPWSTR, int)
sub_404F11	proc near		; CODE XREF: sub_40653B+275p

lpFileTime	= dword	ptr -68h
lpLocalFileTime	= dword	ptr -64h
lpDate		= dword	ptr -60h
lpFormat	= dword	ptr -5Ch
lpDateStr	= dword	ptr -58h
cchDate		= dword	ptr -54h
FileTime	= FILETIME ptr -3Ch
SystemTime	= _SYSTEMTIME ptr -34h
LocalFileTime	= _FILETIME ptr	-24h
Locale		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 64h
		mov	eax, [ebp+arg_0]
		cdq
		imul	ebx, edx, 989680h
		imul	ecx, eax, 0
		add	ebx, ecx
		mov	ecx, 989680h
		mul	ecx
		lea	ecx, [ebx+edx]
		mov	edx, ecx
		add	eax, 0D53E8000h
		adc	edx, 19DB1DEh
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], edx
		mov	eax, [ebp+var_18]
		mov	[ebp+FileTime.dwLowDateTime], eax
		mov	eax, [ebp+var_18]
		mov	edx, [ebp+var_14]
		mov	eax, edx
		mov	edx, eax
		sar	edx, 1Fh
		mov	[ebp+FileTime.dwHighDateTime], eax
		lea	eax, [ebp+LocalFileTime]
		mov	[esp+68h+lpLocalFileTime], eax ; lpLocalFileTime
		lea	eax, [ebp+FileTime]
		mov	[esp+68h+lpFileTime], eax ; lpFileTime
		mov	eax, ds:FileTimeToLocalFileTime
		call	eax ; FileTimeToLocalFileTime
		sub	esp, 8
		lea	eax, [ebp+SystemTime]
		mov	[esp+68h+lpLocalFileTime], eax ; lpSystemTime
		lea	eax, [ebp+LocalFileTime]
		mov	[esp+68h+lpFileTime], eax ; lpFileTime
		mov	eax, ds:FileTimeToSystemTime
		call	eax ; FileTimeToSystemTime
		sub	esp, 8
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		call	sub_404DB7
		movzx	eax, ax
		mov	[ebp+Locale], eax
		cmp	[ebp+arg_8], 0
		jz	short loc_404FFA
		mov	eax, [ebp+arg_8]
		mov	[esp+68h+cchDate], eax ; cchDate
		mov	eax, [ebp+arg_4]
		mov	[esp+68h+lpDateStr], eax ; lpDateStr
		mov	[esp+68h+lpFormat], 0 ;	lpFormat
		lea	eax, [ebp+SystemTime]
		mov	[esp+68h+lpDate], eax ;	lpDate
		mov	[esp+68h+lpLocalFileTime], 1 ; dwFlags
		mov	eax, [ebp+Locale]
		mov	[esp+68h+lpFileTime], eax ; Locale
		mov	eax, ds:GetDateFormatW
		call	eax ; GetDateFormatW
		sub	esp, 18h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_404FFA
		mov	eax, [ebp+var_C]
		add	eax, 7FFFFFFFh
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_4]
		add	eax, edx
		mov	word ptr [eax],	20h

loc_404FFA:				; CODE XREF: sub_404F11+94j
					; sub_404F11+D2j
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+arg_8]
		jz	short loc_405049
		mov	eax, [ebp+var_C]
		mov	edx, [ebp+arg_8]
		sub	edx, eax
		mov	eax, edx
		mov	edx, [ebp+var_C]
		lea	ecx, [edx+edx]
		mov	edx, [ebp+arg_4]
		add	edx, ecx
		mov	[esp+68h+cchDate], eax ; cchTime
		mov	[esp+68h+lpDateStr], edx ; lpTimeStr
		mov	[esp+68h+lpFormat], 0 ;	lpFormat
		lea	eax, [ebp+SystemTime]
		mov	[esp+68h+lpDate], eax ;	lpTime
		mov	[esp+68h+lpLocalFileTime], 2 ; dwFlags
		mov	eax, [ebp+Locale]
		mov	[esp+68h+lpFileTime], eax ; Locale
		mov	eax, ds:GetTimeFormatW
		call	eax ; GetTimeFormatW
		sub	esp, 18h
		mov	[ebp+var_10], eax

loc_405049:				; CODE XREF: sub_404F11+EFj
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_C]
		add	eax, edx
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_404F11	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_405056(int, int, wchar_t *Str, size_t, va_list)
sub_405056	proc near		; CODE XREF: sub_405056+1A2p
					; sub_405206+38p ...

hModule		= dword	ptr -48h
hResInfo	= dword	ptr -44h
Count		= dword	ptr -40h
Args		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= word ptr -2Ch
Dest		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Str		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_2C], ax
		mov	eax, [ebp+arg_0]
		shr	eax, 4
		add	eax, 1
		movzx	eax, ax
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_0]
		and	eax, 0Fh
		mov	[ebp+var_18], eax
		movzx	eax, [ebp+var_2C]
		mov	[esp+48h+Count], eax ; int
		mov	eax, [ebp+var_14]
		mov	[esp+48h+hResInfo], eax	; LPCWSTR
		mov	[esp+48h+hModule], 6 ; LPCWSTR
		call	sub_404D18
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_4050A4
		jmp	loc_4051C6
; ---------------------------------------------------------------------------

loc_4050A4:				; CODE XREF: sub_405056+47j
		mov	eax, ds:hInstance
		mov	edx, [ebp+var_1C]
		mov	[esp+48h+hResInfo], edx	; hResInfo
		mov	[esp+48h+hModule], eax ; hModule
		mov	eax, ds:LoadResource
		call	eax ; LoadResource
		sub	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_4050CB
		jmp	loc_4051C6
; ---------------------------------------------------------------------------

loc_4050CB:				; CODE XREF: sub_405056+6Ej
		mov	[ebp+var_10], 0
		jmp	loc_4051BC
; ---------------------------------------------------------------------------

loc_4050D7:				; CODE XREF: sub_405056+16Aj
		mov	eax, [ebp+var_10]
		cmp	eax, [ebp+var_18]
		jz	short loc_4050F9
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		add	eax, 1
		add	eax, eax
		add	[ebp+var_C], eax
		add	[ebp+var_10], 1
		jmp	loc_4051BC
; ---------------------------------------------------------------------------

loc_4050F9:				; CODE XREF: sub_405056+87j
		mov	eax, [ebp+var_10]
		cmp	eax, [ebp+var_18]
		jnz	short loc_405111
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		test	ax, ax
		jnz	short loc_405111
		jmp	loc_4051C6
; ---------------------------------------------------------------------------

loc_405111:				; CODE XREF: sub_405056+A9j
					; sub_405056+B4j
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		add	eax, 1
		add	eax, eax
		mov	[esp+48h+hModule], eax ; Size
		call	malloc
		mov	[ebp+Dest], eax
		cmp	[ebp+Dest], 0
		jnz	short loc_405135
		jmp	loc_4051C6
; ---------------------------------------------------------------------------

loc_405135:				; CODE XREF: sub_405056+D8j
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		lea	edx, [eax+eax]
		mov	eax, [ebp+Dest]
		add	eax, edx
		mov	word ptr [eax],	0
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		movzx	eax, ax
		mov	edx, [ebp+var_C]
		add	edx, 2
		mov	[esp+48h+Count], eax ; Count
		mov	[esp+48h+hResInfo], edx	; Source
		mov	eax, [ebp+Dest]
		mov	[esp+48h+hModule], eax ; Dest
		call	wcsncpy
		mov	eax, [ebp+arg_C]
		mov	edx, [ebp+arg_10]
		mov	[esp+48h+Args],	edx ; Args
		mov	edx, [ebp+Dest]
		mov	[esp+48h+Count], edx ; Format
		mov	[esp+48h+hResInfo], eax	; Count
		mov	eax, [ebp+Str]
		mov	[esp+48h+hModule], eax ; Dest
		mov	eax, ds:_vsnwprintf
		call	eax ; _vsnwprintf
		mov	eax, [ebp+arg_C]
		add	eax, 7FFFFFFFh
		lea	edx, [eax+eax]
		mov	eax, [ebp+Str]
		add	eax, edx
		mov	word ptr [eax],	0
		mov	eax, [ebp+Dest]
		mov	[esp+48h+hModule], eax ; Memory
		call	free
		mov	eax, [ebp+Str]
		mov	[esp+48h+hModule], eax ; Str
		call	wcslen
		jmp	short locret_405204
; ---------------------------------------------------------------------------

loc_4051BC:				; CODE XREF: sub_405056+7Cj
					; sub_405056+9Ej
		cmp	[ebp+var_10], 0Fh
		jle	loc_4050D7

loc_4051C6:				; CODE XREF: sub_405056+49j
					; sub_405056+70j ...
		mov	eax, 409h
		cmp	[ebp+var_2C], ax
		jz	short loc_4051FF
		mov	eax, 409h
		movzx	eax, ax
		mov	edx, [ebp+arg_10]
		mov	[esp+48h+var_38], edx ;	va_list
		mov	edx, [ebp+arg_C]
		mov	[esp+48h+Args],	edx ; size_t
		mov	edx, [ebp+Str]
		mov	[esp+48h+Count], edx ; Str
		mov	[esp+48h+hResInfo], eax	; int
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hModule], eax ; int
		call	sub_405056
		jmp	short locret_405204
; ---------------------------------------------------------------------------

loc_4051FF:				; CODE XREF: sub_405056+179j
		mov	eax, 0

locret_405204:				; CODE XREF: sub_405056+164j
					; sub_405056+1A7j
		leave
		retn
sub_405056	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_405206(int, va_list)
sub_405206	proc near		; CODE XREF: sub_40524A+19p
					; sub_4052B5+27p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
Str		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	ds:word_412060,	0
		call	sub_404DB7
		movzx	eax, ax
		mov	edx, [ebp+arg_4]
		mov	[esp+28h+var_18], edx ;	va_list
		mov	[esp+28h+var_1C], 200h ; size_t
		mov	[esp+28h+Str], offset word_412060 ; Str
		mov	[esp+28h+var_24], eax ;	int
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax ;	int
		call	sub_405056
		mov	eax, offset word_412060
		leave
		retn
sub_405206	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40524A	proc near		; CODE XREF: sub_401FCE+26Dp
					; sub_4026B9+1E3p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+arg_4]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_24], eax ;	va_list
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax ;	int
		call	sub_405206
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		leave
		retn
sub_40524A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_405270(wchar_t *, size_t, int, char)
sub_405270	proc near		; CODE XREF: sub_4026B9+1B7p
					; sub_40786C+3Bp

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
Str		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	ebx, [ebp+var_10]
		call	sub_404DB7
		movzx	eax, ax
		mov	[esp+38h+var_28], ebx ;	va_list
		mov	edx, [ebp+arg_4]
		mov	[esp+38h+var_2C], edx ;	size_t
		mov	edx, [ebp+arg_0]
		mov	[esp+38h+Str], edx ; Str
		mov	[esp+38h+var_34], eax ;	int
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_38], eax ;	int
		call	sub_405056
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
sub_405270	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4052B5(int, LPCWSTR, int, va_list)
sub_4052B5	proc near		; CODE XREF: sub_40530C+27p
					; sub_405340+29p

hWnd		= dword	ptr -28h
lpText		= dword	ptr -24h
lpCaption	= dword	ptr -20h
uType		= dword	ptr -1Ch
wLanguageId	= word ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		call	sub_404DB7
		movzx	ebx, ax
		mov	eax, [ebp+arg_0]
		or	eax, 10000h
		mov	esi, eax
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+lpText], eax ;	va_list
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+hWnd],	eax ; int
		call	sub_405206
		mov	dword ptr [esp+28h+wLanguageId], ebx ; wLanguageId
		mov	[esp+28h+uType], esi ; uType
		mov	edx, [ebp+arg_4]
		mov	[esp+28h+lpCaption], edx ; lpCaption
		mov	[esp+28h+lpText], eax ;	lpText
		mov	[esp+28h+hWnd],	0 ; hWnd
		mov	eax, ds:MessageBoxExW
		call	eax ; MessageBoxExW
		sub	esp, 14h
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_4052B5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40530C(int, LPCWSTR, int, char)
sub_40530C	proc near		; CODE XREF: sub_40228A+27p
					; sub_40228A+6Ap ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_1C], eax ;	va_list
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_20], eax ;	int
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_24], eax ;	LPCWSTR
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax ;	int
		call	sub_4052B5
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		leave
		retn
sub_40530C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405340	proc near		; CODE XREF: sub_401570+84p
					; sub_401623+F4p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= byte ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_1C], eax ;	va_list
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax ;	int
		mov	[esp+28h+var_24], offset aO ; "O"
		mov	[esp+28h+var_28], 0 ; int
		call	sub_4052B5
		leave
		retn
sub_405340	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405370	proc near		; CODE XREF: sub_401623+224p
					; sub_401623+233p ...

hModule		= dword	ptr -38h
hResInfo	= dword	ptr -34h
fIcon		= dword	ptr -30h
dwVer		= dword	ptr -2Ch
dwResSize	= dword	ptr -1Ch
var_18		= dword	ptr -18h
presbits	= dword	ptr -14h
var_10		= dword	ptr -10h
var_A		= word ptr -0Ah
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		call	sub_404DB7
		mov	[ebp+var_A], ax
		movzx	edx, [ebp+var_A]
		mov	eax, [ebp+arg_0]
		movzx	eax, ax
		mov	[esp+38h+fIcon], edx ; int
		mov	[esp+38h+hResInfo], eax	; LPCWSTR
		mov	[esp+38h+hModule], 0Eh ; LPCWSTR
		call	sub_404D18
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_4053B0
		mov	eax, 0
		jmp	locret_4054AE
; ---------------------------------------------------------------------------

loc_4053B0:				; CODE XREF: sub_405370+34j
		mov	eax, ds:hInstance
		mov	edx, [ebp+var_10]
		mov	[esp+38h+hResInfo], edx	; hResInfo
		mov	[esp+38h+hModule], eax ; hModule
		mov	eax, ds:LoadResource
		call	eax ; LoadResource
		sub	esp, 8
		mov	[ebp+presbits],	eax
		cmp	[ebp+presbits],	0
		jnz	short loc_4053DC
		mov	eax, 0
		jmp	locret_4054AE
; ---------------------------------------------------------------------------

loc_4053DC:				; CODE XREF: sub_405370+60j
		mov	[esp+38h+hResInfo], 1 ;	fIcon
		mov	eax, [ebp+presbits]
		mov	[esp+38h+hModule], eax ; presbits
		mov	eax, ds:LookupIconIdFromDirectory
		call	eax ; LookupIconIdFromDirectory
		sub	esp, 8
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_405407
		mov	eax, 0
		jmp	locret_4054AE
; ---------------------------------------------------------------------------

loc_405407:				; CODE XREF: sub_405370+8Bj
		movzx	edx, [ebp+var_A]
		mov	eax, [ebp+var_18]
		movzx	eax, ax
		mov	[esp+38h+fIcon], edx ; int
		mov	[esp+38h+hResInfo], eax	; LPCWSTR
		mov	[esp+38h+hModule], 3 ; LPCWSTR
		call	sub_404D18
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_405435
		mov	eax, 0
		jmp	short locret_4054AE
; ---------------------------------------------------------------------------

loc_405435:				; CODE XREF: sub_405370+BCj
		mov	eax, ds:hInstance
		mov	edx, [ebp+var_10]
		mov	[esp+38h+hResInfo], edx	; hResInfo
		mov	[esp+38h+hModule], eax ; hModule
		mov	eax, ds:LoadResource
		call	eax ; LoadResource
		sub	esp, 8
		mov	[ebp+presbits],	eax
		cmp	[ebp+presbits],	0
		jnz	short loc_40545E
		mov	eax, 0
		jmp	short locret_4054AE
; ---------------------------------------------------------------------------

loc_40545E:				; CODE XREF: sub_405370+E5j
		mov	eax, ds:hInstance
		mov	edx, [ebp+var_10]
		mov	[esp+38h+hResInfo], edx	; hResInfo
		mov	[esp+38h+hModule], eax ; hModule
		mov	eax, ds:SizeofResource
		call	eax ; SizeofResource
		sub	esp, 8
		mov	[ebp+dwResSize], eax
		cmp	[ebp+dwResSize], 0
		jnz	short loc_405487
		mov	eax, 0
		jmp	short locret_4054AE
; ---------------------------------------------------------------------------

loc_405487:				; CODE XREF: sub_405370+10Ej
		mov	[esp+38h+dwVer], 30000h	; dwVer
		mov	[esp+38h+fIcon], 1 ; fIcon
		mov	eax, [ebp+dwResSize]
		mov	[esp+38h+hResInfo], eax	; dwResSize
		mov	eax, [ebp+presbits]
		mov	[esp+38h+hModule], eax ; presbits
		mov	eax, ds:CreateIconFromResource
		call	eax ; CreateIconFromResource
		sub	esp, 10h

locret_4054AE:				; CODE XREF: sub_405370+3Bj
					; sub_405370+67j ...
		leave
		retn
sub_405370	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4054B0	proc near		; CODE XREF: sub_401FCE+80p
					; sub_401FCE+127p ...

hModule		= dword	ptr -28h
hResInfo	= dword	ptr -24h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		call	sub_404DB7
		movzx	edx, ax
		mov	eax, [ebp+arg_0]
		movzx	eax, ax
		mov	[esp+28h+var_20], edx ;	int
		mov	[esp+28h+hResInfo], eax	; LPCWSTR
		mov	[esp+28h+hModule], 5 ; LPCWSTR
		call	sub_404D18
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_4054E8
		mov	eax, 0
		jmp	short locret_405501
; ---------------------------------------------------------------------------

loc_4054E8:				; CODE XREF: sub_4054B0+2Fj
		mov	eax, ds:hInstance
		mov	edx, [ebp+var_C]
		mov	[esp+28h+hResInfo], edx	; hResInfo
		mov	[esp+28h+hModule], eax ; hModule
		mov	eax, ds:LoadResource
		call	eax ; LoadResource
		sub	esp, 8

locret_405501:				; CODE XREF: sub_4054B0+36j
		leave
		retn
sub_4054B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_405503(int, DLGPROC, LPARAM)
sub_405503	proc near		; CODE XREF: sub_402DD9+57p
					; sub_402DD9+8Ep ...

hInstance	= dword	ptr -38h
hDialogTemplate	= dword	ptr -34h
hWndParent	= dword	ptr -30h
lpDialogFunc	= dword	ptr -2Ch
dwInitParam	= dword	ptr -28h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+hInstance], eax
		call	sub_4054B0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_405524
		mov	eax, 0FFFFFFFFh
		jmp	short locret_405553
; ---------------------------------------------------------------------------

loc_405524:				; CODE XREF: sub_405503+18j
		mov	eax, ds:hInstance
		mov	edx, [ebp+arg_8]
		mov	[esp+38h+dwInitParam], edx ; dwInitParam
		mov	edx, [ebp+arg_4]
		mov	[esp+38h+lpDialogFunc],	edx ; lpDialogFunc
		mov	[esp+38h+hWndParent], 0	; hWndParent
		mov	edx, [ebp+var_C]
		mov	[esp+38h+hDialogTemplate], edx ; hDialogTemplate
		mov	[esp+38h+hInstance], eax ; hInstance
		mov	eax, ds:DialogBoxIndirectParamW
		call	eax ; DialogBoxIndirectParamW
		sub	esp, 14h

locret_405553:				; CODE XREF: sub_405503+1Fj
		leave
		retn
sub_405503	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_405555(int, DLGPROC, LPARAM)
sub_405555	proc near		; CODE XREF: StartAddress+93p
					; sub_4055E7+1Bp

hModule		= dword	ptr -38h
hResInfo	= dword	ptr -34h
hWndParent	= dword	ptr -30h
lpDialogFunc	= dword	ptr -2Ch
dwInitParam	= dword	ptr -28h
lpTemplate	= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		call	sub_404DB7
		movzx	edx, ax
		mov	eax, [ebp+arg_0]
		movzx	eax, ax
		mov	[esp+38h+hWndParent], edx ; int
		mov	[esp+38h+hResInfo], eax	; LPCWSTR
		mov	[esp+38h+hModule], 5 ; LPCWSTR
		call	sub_404D18
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_40558D
		mov	eax, 0
		jmp	short locret_4055E5
; ---------------------------------------------------------------------------

loc_40558D:				; CODE XREF: sub_405555+2Fj
		mov	eax, ds:hInstance
		mov	edx, [ebp+var_C]
		mov	[esp+38h+hResInfo], edx	; hResInfo
		mov	[esp+38h+hModule], eax ; hModule
		mov	eax, ds:LoadResource
		call	eax ; LoadResource
		sub	esp, 8
		mov	[ebp+lpTemplate], eax
		cmp	[ebp+lpTemplate], 0
		jnz	short loc_4055B6
		mov	eax, 0
		jmp	short locret_4055E5
; ---------------------------------------------------------------------------

loc_4055B6:				; CODE XREF: sub_405555+58j
		mov	eax, ds:hInstance
		mov	edx, [ebp+arg_8]
		mov	[esp+38h+dwInitParam], edx ; dwInitParam
		mov	edx, [ebp+arg_4]
		mov	[esp+38h+lpDialogFunc],	edx ; lpDialogFunc
		mov	[esp+38h+hWndParent], 0	; hWndParent
		mov	edx, [ebp+lpTemplate]
		mov	[esp+38h+hResInfo], edx	; lpTemplate
		mov	[esp+38h+hModule], eax ; hInstance
		mov	eax, ds:CreateDialogIndirectParamW
		call	eax ; CreateDialogIndirectParamW
		sub	esp, 14h

locret_4055E5:				; CODE XREF: sub_405555+36j
					; sub_405555+5Fj
		leave
		retn
sub_405555	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4055E7(int, DLGPROC)
sub_4055E7	proc near		; CODE XREF: sub_4094D5+ACp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_10], 0 ; LPARAM
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_14], eax ;	DLGPROC
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax ;	int
		call	sub_405555
		leave
		retn
sub_4055E7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_405609	proc near		; CODE XREF: EnumFunc+22p
					; sub_40574D+B1p

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
Str		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_1C		= word ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_1C], ax
		lea	eax, [ebp+arg_8]
		mov	[ebp+var_C], eax
		mov	edx, [ebp+var_C]
		movzx	eax, [ebp+var_1C]
		mov	[esp+38h+var_28], edx ;	va_list
		mov	[esp+38h+var_2C], 80h ;	size_t
		mov	[esp+38h+Str], offset dword_412460 ; Str
		mov	[esp+38h+var_34], eax ;	int
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax ;	int
		call	sub_405056
		mov	eax, offset dword_412460
		leave
		retn
sub_405609	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; BOOL __stdcall EnumFunc(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD	wLanguage, LONG_PTR lParam)
EnumFunc	proc near		; DATA XREF: sub_40574D+48o

hWnd		= dword	ptr -38h
Msg		= dword	ptr -34h
wParam		= dword	ptr -30h
lParam		= dword	ptr -2Ch
var_1C		= word ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
hModule		= dword	ptr  8
lpType		= dword	ptr  0Ch
lpName		= dword	ptr  10h
wLanguage	= word ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, dword ptr [ebp+wLanguage]
		mov	[ebp+var_1C], ax
		mov	eax, [ebp+arg_10]
		mov	[ebp+var_C], eax
		movzx	eax, [ebp+var_1C]
		mov	[esp+38h+Msg], eax
		mov	[esp+38h+hWnd],	672h
		call	sub_405609
		mov	edx, eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+38h+lParam], edx ;	lParam
		mov	[esp+38h+wParam], 0 ; wParam
		mov	[esp+38h+Msg], 143h ; Msg
		mov	[esp+38h+hWnd],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	[ebp+var_10], eax
		movzx	ecx, [ebp+var_1C]
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+38h+lParam], ecx ;	lParam
		mov	[esp+38h+wParam], edx ;	wParam
		mov	[esp+38h+Msg], 151h ; Msg
		mov	[esp+38h+hWnd],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax+4]
		cmp	ax, [ebp+var_1C]
		jz	short loc_40571D
		movzx	edx, [ebp+var_1C]
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax+4]
		movzx	eax, ax
		xor	eax, edx
		and	eax, 3FFh
		test	eax, eax
		jnz	short loc_405746
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+38h+lParam], 0 ; lParam
		mov	[esp+38h+wParam], 0 ; wParam
		mov	[esp+38h+Msg], 147h ; Msg
		mov	[esp+38h+hWnd],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_405746

loc_40571D:				; CODE XREF: EnumFunc+86j
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+38h+lParam], 0 ; lParam
		mov	[esp+38h+wParam], edx ;	wParam
		mov	[esp+38h+Msg], 14Eh ; Msg
		mov	[esp+38h+hWnd],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h

loc_405746:				; CODE XREF: EnumFunc+9Fj EnumFunc+CEj
		mov	eax, 1
		leave
		retn
EnumFunc	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_40574D(HWND	hWnd, int, int,	int)
sub_40574D	proc near		; DATA XREF: sub_401FCE+14Fo

hDlg		= dword	ptr -38h
nIDDlgItem	= dword	ptr -34h
lpName		= dword	ptr -30h
lpEnumFunc	= dword	ptr -2Ch
lParam		= dword	ptr -28h
var_18		= dword	ptr -18h
var_14		= word ptr -14h
var_E		= word ptr -0Eh
var_C		= dword	ptr -0Ch
hWnd		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[esp+38h+nIDDlgItem], 0E7h ; nIDDlgItem
		mov	eax, [ebp+hWnd]
		mov	[esp+38h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[ebp+var_18], eax
		call	sub_404DB7
		mov	[ebp+var_14], ax
		mov	eax, [ebp+arg_4]
		cmp	eax, 4Eh
		jz	loc_40587C
		cmp	eax, 110h
		jnz	loc_405920
		lea	eax, [ebp+var_18]
		mov	[esp+38h+lParam], eax ;	lParam
		mov	[esp+38h+lpEnumFunc], offset EnumFunc ;	lpEnumFunc
		mov	[esp+38h+lpName], 68h ;	lpName
		mov	[esp+38h+nIDDlgItem], 6	; lpType
		mov	[esp+38h+hDlg],	0 ; hModule
		mov	eax, ds:EnumResourceLanguagesW
		call	eax ; EnumResourceLanguagesW
		sub	esp, 14h
		mov	eax, [ebp+var_18]
		mov	[esp+38h+lpEnumFunc], 0	; lParam
		mov	[esp+38h+lpName], 0 ; wParam
		mov	[esp+38h+nIDDlgItem], 147h ; Msg
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_405829
		mov	eax, 409h
		movzx	eax, ax
		mov	[esp+38h+nIDDlgItem], eax
		mov	[esp+38h+hDlg],	672h
		call	sub_405609
		mov	edx, eax
		mov	eax, [ebp+var_18]
		mov	[esp+38h+lpEnumFunc], edx ; lParam
		mov	[esp+38h+lpName], 0FFFFFFFFh ; wParam
		mov	[esp+38h+nIDDlgItem], 14Dh ; Msg
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h

loc_405829:				; CODE XREF: sub_40574D+9Cj
		mov	eax, [ebp+var_18]
		mov	[esp+38h+lpEnumFunc], 0	; lParam
		mov	[esp+38h+lpName], 0 ; wParam
		mov	[esp+38h+nIDDlgItem], 147h ; Msg
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+var_18]
		mov	[esp+38h+lpEnumFunc], 0	; lParam
		mov	[esp+38h+lpName], edx ;	wParam
		mov	[esp+38h+nIDDlgItem], 151h ; Msg
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		jmp	loc_405920
; ---------------------------------------------------------------------------

loc_40587C:				; CODE XREF: sub_40574D+30j
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax+8]
		cmp	eax, 0FFFFFF36h
		jnz	loc_40591F
		mov	eax, [ebp+var_18]
		mov	[esp+38h+lpEnumFunc], 0	; lParam
		mov	[esp+38h+lpName], 0 ; wParam
		mov	[esp+38h+nIDDlgItem], 147h ; Msg
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	edx, eax
		mov	eax, [ebp+var_18]
		mov	[esp+38h+lpEnumFunc], 0	; lParam
		mov	[esp+38h+lpName], edx ;	wParam
		mov	[esp+38h+nIDDlgItem], 150h ; Msg
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	[ebp+var_E], ax
		cmp	[ebp+var_E], 0
		jz	short loc_4058F8
		movzx	eax, [ebp+var_E]
		mov	[esp+38h+hDlg],	eax
		call	sub_404E66

loc_4058F8:				; CODE XREF: sub_40574D+19Dj
		mov	[esp+38h+lpName], 0 ; dwNewLong
		mov	[esp+38h+nIDDlgItem], 0	; nIndex
		mov	eax, [ebp+hWnd]
		mov	[esp+38h+hDlg],	eax ; hWnd
		mov	eax, ds:SetWindowLongW
		call	eax ; SetWindowLongW
		sub	esp, 0Ch
		mov	eax, 1
		jmp	short locret_405925
; ---------------------------------------------------------------------------

loc_40591F:				; CODE XREF: sub_40574D+140j
		nop

loc_405920:				; CODE XREF: sub_40574D+3Bj
					; sub_40574D+12Aj
		mov	eax, 0

locret_405925:				; CODE XREF: sub_40574D+1D0j
		leave
		retn	10h
sub_40574D	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40592C	proc near		; CODE XREF: sub_401ADE:loc_401BF8p
					; sub_406278:loc_4062B8p ...

hMenu		= dword	ptr -28h
uFlags		= dword	ptr -24h
uIDNewItem	= dword	ptr -20h
lpNewItem	= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		jmp	short loc_405950
; ---------------------------------------------------------------------------

loc_40593B:				; CODE XREF: sub_40592C+2Cj
		mov	eax, ds:CreatePopupMenu
		call	eax ; CreatePopupMenu
		mov	edx, [ebp+var_C]
		mov	ds:dword_42E800[edx*4],	eax
		add	[ebp+var_C], 1

loc_405950:				; CODE XREF: sub_40592C+Dj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	short loc_40593B
		mov	eax, ds:CreatePopupMenu
		call	eax ; CreatePopupMenu
		mov	ds:uIDNewItem, eax
		mov	eax, ds:CreatePopupMenu
		call	eax ; CreatePopupMenu
		mov	ds:hMenu, eax
		mov	eax, ds:dword_42D730
		cmp	eax, 1
		jnz	loc_405CF4
		movzx	eax, ds:word_42E3D8
		cmp	ax, 30h
		jnz	loc_405A59
		mov	[esp+28h+hMenu], 3F2h
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 12Ch ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3F3h
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 15Eh ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3F4h
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 190h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	eax, ds:hMenu
		mov	[esp+28h+lpNewItem], 0 ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0	; uIDNewItem
		mov	[esp+28h+uFlags], 800h ; uFlags
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		jmp	loc_405B1C
; ---------------------------------------------------------------------------

loc_405A59:				; CODE XREF: sub_40592C+5Fj
		mov	[esp+28h+hMenu], 3FBh
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 64h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3FCh
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 65h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3FDh
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 66h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	eax, ds:hMenu
		mov	[esp+28h+lpNewItem], 0 ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0	; uIDNewItem
		mov	[esp+28h+uFlags], 800h ; uFlags
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h

loc_405B1C:				; CODE XREF: sub_40592C+128j
		mov	[esp+28h+hMenu], 3F5h
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 1C2h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		movzx	eax, ds:word_42E3C4
		cmp	ax, 31h
		jnz	short loc_405B8F
		mov	[esp+28h+hMenu], 3F6h
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 1F4h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h

loc_405B8F:				; CODE XREF: sub_40592C+22Ej
		movzx	eax, ds:word_42E3CC
		cmp	ax, 31h
		jnz	short loc_405BCF
		mov	[esp+28h+hMenu], 3F7h
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 226h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h

loc_405BCF:				; CODE XREF: sub_40592C+26Ej
		mov	eax, ds:hMenu
		mov	[esp+28h+lpNewItem], 0 ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0	; uIDNewItem
		mov	[esp+28h+uFlags], 800h ; uFlags
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		movzx	eax, ds:word_42E3C8
		cmp	ax, 31h
		jnz	short loc_405C74
		movzx	eax, ds:word_42E3D8
		cmp	ax, 30h
		jnz	short loc_405C74
		mov	[esp+28h+hMenu], 3EEh
		call	sub_40524A
		mov	edx, ds:uIDNewItem
		mov	ecx, edx
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], ecx ; uIDNewItem
		mov	[esp+28h+uFlags], 10h ;	uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	eax, ds:hMenu
		mov	[esp+28h+lpNewItem], 0 ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0	; uIDNewItem
		mov	[esp+28h+uFlags], 800h ; uFlags
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h

loc_405C74:				; CODE XREF: sub_40592C+2D8j
					; sub_40592C+2E5j
		mov	[esp+28h+hMenu], 3EFh
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0DDh ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3F1h
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0DFh ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	eax, ds:dword_41328C
		mov	[esp+28h+uFlags], eax
		mov	[esp+28h+hMenu], offset	ThreadId
		call	sub_406A62
		jmp	loc_40615C
; ---------------------------------------------------------------------------

loc_405CF4:				; CODE XREF: sub_40592C+4Ej
		mov	[ebp+var_10], 0
		jmp	short loc_405D45
; ---------------------------------------------------------------------------

loc_405CFD:				; CODE XREF: sub_40592C+421j
		mov	eax, [ebp+var_10]
		imul	eax, 894h
		add	eax, 2C0h
		add	eax, offset Str2
		lea	ecx, [eax+10h]
		mov	eax, [ebp+var_10]
		mov	eax, ds:dword_42E800[eax*4]
		mov	edx, eax
		mov	eax, ds:hMenu
		mov	[esp+28h+lpNewItem], ecx ; lpNewItem
		mov	[esp+28h+uIDNewItem], edx ; uIDNewItem
		mov	[esp+28h+uFlags], 10h ;	uFlags
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		add	[ebp+var_10], 1

loc_405D45:				; CODE XREF: sub_40592C+3CFj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_10]
		jg	short loc_405CFD
		mov	eax, ds:dword_42D730
		test	eax, eax
		jle	short loc_405D82
		mov	eax, ds:hMenu
		mov	[esp+28h+lpNewItem], 0 ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0	; uIDNewItem
		mov	[esp+28h+uFlags], 800h ; uFlags
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h

loc_405D82:				; CODE XREF: sub_40592C+42Aj
		movzx	eax, ds:word_42E3D8
		cmp	ax, 30h
		jnz	short loc_405E02
		movzx	eax, ds:word_42E3C8
		cmp	ax, 31h
		jnz	short loc_405E02
		mov	[esp+28h+hMenu], 3EEh
		call	sub_40524A
		mov	edx, ds:uIDNewItem
		mov	ecx, edx
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], ecx ; uIDNewItem
		mov	[esp+28h+uFlags], 10h ;	uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	eax, ds:hMenu
		mov	[esp+28h+lpNewItem], 0 ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0	; uIDNewItem
		mov	[esp+28h+uFlags], 800h ; uFlags
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		jmp	loc_405ED6
; ---------------------------------------------------------------------------

loc_405E02:				; CODE XREF: sub_40592C+461j
					; sub_40592C+46Ej
		movzx	eax, ds:word_42E3D8
		cmp	ax, 31h
		jnz	loc_405ED6
		mov	[esp+28h+hMenu], 3FBh
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 64h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3FCh
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 65h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3FDh
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 66h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	eax, ds:hMenu
		mov	[esp+28h+lpNewItem], 0 ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0	; uIDNewItem
		mov	[esp+28h+uFlags], 800h ; uFlags
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h

loc_405ED6:				; CODE XREF: sub_40592C+4D1j
					; sub_40592C+4E1j
		mov	[esp+28h+hMenu], 3EFh
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0DDh ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3F1h
		call	sub_40524A
		mov	edx, ds:hMenu
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0DFh ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[ebp+var_10], 0
		jmp	loc_40614E
; ---------------------------------------------------------------------------

loc_405F48:				; CODE XREF: sub_40592C+82Aj
		movzx	eax, ds:word_42E3D8
		cmp	ax, 30h
		jnz	loc_406042
		mov	[esp+28h+hMenu], 3F2h
		call	sub_40524A
		mov	edx, [ebp+var_10]
		add	edx, 12Ch
		mov	ecx, edx
		mov	edx, [ebp+var_10]
		mov	edx, ds:dword_42E800[edx*4]
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], ecx ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3F3h
		call	sub_40524A
		mov	edx, [ebp+var_10]
		add	edx, 15Eh
		mov	ecx, edx
		mov	edx, [ebp+var_10]
		mov	edx, ds:dword_42E800[edx*4]
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], ecx ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3F4h
		call	sub_40524A
		mov	edx, [ebp+var_10]
		add	edx, 190h
		mov	ecx, edx
		mov	edx, [ebp+var_10]
		mov	edx, ds:dword_42E800[edx*4]
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], ecx ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	eax, [ebp+var_10]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+lpNewItem], 0 ; lpNewItem
		mov	[esp+28h+uIDNewItem], 0	; uIDNewItem
		mov	[esp+28h+uFlags], 800h ; uFlags
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h

loc_406042:				; CODE XREF: sub_40592C+627j
		mov	[esp+28h+hMenu], 3F5h
		call	sub_40524A
		mov	edx, [ebp+var_10]
		add	edx, 1C2h
		mov	ecx, edx
		mov	edx, [ebp+var_10]
		mov	edx, ds:dword_42E800[edx*4]
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], ecx ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		movzx	eax, ds:word_42E3C4
		cmp	ax, 31h
		jnz	short loc_4060CB
		mov	[esp+28h+hMenu], 3F6h
		call	sub_40524A
		mov	edx, [ebp+var_10]
		add	edx, 1F4h
		mov	ecx, edx
		mov	edx, [ebp+var_10]
		mov	edx, ds:dword_42E800[edx*4]
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], ecx ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h

loc_4060CB:				; CODE XREF: sub_40592C+75Fj
		movzx	eax, ds:word_42E3CC
		cmp	ax, 31h
		jnz	short loc_406116
		mov	[esp+28h+hMenu], 3F7h
		call	sub_40524A
		mov	edx, [ebp+var_10]
		add	edx, 226h
		mov	ecx, edx
		mov	edx, [ebp+var_10]
		mov	edx, ds:dword_42E800[edx*4]
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], ecx ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h

loc_406116:				; CODE XREF: sub_40592C+7AAj
		mov	eax, [ebp+var_10]
		imul	eax, 894h
		add	eax, offset dword_41328C
		mov	eax, [eax]
		mov	edx, [ebp+var_10]
		imul	edx, 894h
		add	edx, 0C0h
		add	edx, offset Str2
		add	edx, 8
		mov	[esp+28h+uFlags], eax
		mov	[esp+28h+hMenu], edx
		call	sub_406A62
		add	[ebp+var_10], 1

loc_40614E:				; CODE XREF: sub_40592C+617j
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_10]
		jg	loc_405F48

loc_40615C:				; CODE XREF: sub_40592C+3C3j
		movzx	eax, ds:word_42E3C8
		cmp	ax, 31h
		jnz	loc_406217
		movzx	eax, ds:word_42E3D8
		cmp	ax, 30h
		jnz	loc_406217
		mov	[esp+28h+hMenu], 3F8h
		call	sub_40524A
		mov	edx, ds:uIDNewItem
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 64h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3F9h
		call	sub_40524A
		mov	edx, ds:uIDNewItem
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 65h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h
		mov	[esp+28h+hMenu], 3FAh
		call	sub_40524A
		mov	edx, ds:uIDNewItem
		mov	[esp+28h+lpNewItem], eax ; lpNewItem
		mov	[esp+28h+uIDNewItem], 66h ; uIDNewItem
		mov	[esp+28h+uFlags], 0 ; uFlags
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:AppendMenuW
		call	eax ; AppendMenuW
		sub	esp, 10h

loc_406217:				; CODE XREF: sub_40592C+83Bj
					; sub_40592C+84Cj
		call	sub_406E23
		leave
		retn
sub_40592C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40621E	proc near		; CODE XREF: sub_406278+20p
					; sub_406278+14Ep

hMenu		= dword	ptr -28h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		jmp	short loc_406248
; ---------------------------------------------------------------------------

loc_40622D:				; CODE XREF: sub_40621E+32j
		mov	eax, [ebp+var_C]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:DestroyMenu
		call	eax ; DestroyMenu
		sub	esp, 4
		add	[ebp+var_C], 1

loc_406248:				; CODE XREF: sub_40621E+Dj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	short loc_40622D
		mov	eax, ds:uIDNewItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:DestroyMenu
		call	eax ; DestroyMenu
		sub	esp, 4
		mov	eax, ds:hMenu
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:DestroyMenu
		call	eax ; DestroyMenu
		sub	esp, 4
		leave
		retn
sub_40621E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_406278	proc near		; CODE XREF: sub_401ADE+184p

lpPoint		= dword	ptr -38h
uFlags		= dword	ptr -34h
x		= dword	ptr -30h
y		= dword	ptr -2Ch
nReserved	= dword	ptr -28h
hWnd		= dword	ptr -24h
prcRect		= dword	ptr -20h
Point		= tagPOINT ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, [ebp+arg_0]
		cmp	eax, 203h
		jz	loc_406350
		cmp	eax, 205h
		jnz	loc_40647B
		call	sub_40621E
		mov	[esp+38h+lpPoint], 0 ; MaxCount
		call	sub_40829E
		mov	edx, ds:dword_42D730
		cmp	eax, edx
		jnz	short loc_4062B8
		call	sub_40D105

loc_4062B8:				; CODE XREF: sub_406278+39j
		call	sub_40592C
		lea	eax, [ebp+Point]
		mov	[esp+38h+lpPoint], eax ; lpPoint
		mov	eax, ds:GetCursorPos
		call	eax ; GetCursorPos
		sub	esp, 4
		mov	eax, ds:hWnd
		mov	[esp+38h+lpPoint], eax ; hWnd
		mov	eax, ds:SetForegroundWindow
		call	eax ; SetForegroundWindow
		sub	esp, 4
		mov	ebx, ds:hWnd
		mov	ecx, [ebp+Point.y]
		mov	edx, [ebp+Point.x]
		mov	eax, ds:hMenu
		mov	[esp+38h+prcRect], 0 ; prcRect
		mov	[esp+38h+hWnd],	ebx ; hWnd
		mov	[esp+38h+nReserved], 0 ; nReserved
		mov	[esp+38h+y], ecx ; y
		mov	[esp+38h+x], edx ; x
		mov	[esp+38h+uFlags], 8 ; uFlags
		mov	[esp+38h+lpPoint], eax ; hMenu
		mov	eax, ds:TrackPopupMenu
		call	eax ; TrackPopupMenu
		sub	esp, 1Ch
		mov	eax, ds:hWnd
		mov	[esp+38h+y], 0	; lParam
		mov	[esp+38h+x], 0	; wParam
		mov	[esp+38h+uFlags], 0 ; Msg
		mov	[esp+38h+lpPoint], eax ; hWnd
		mov	eax, ds:PostMessageW
		call	eax ; PostMessageW
		sub	esp, 10h
		jmp	loc_40647B
; ---------------------------------------------------------------------------

loc_406350:				; CODE XREF: sub_406278+Fj
		movzx	eax, ds:word_42E3D8
		cmp	ax, 31h
		jnz	short loc_4063AD
		mov	eax, ds:dword_42D734
		test	eax, eax
		jnz	short loc_406370
		call	sub_407370
		jmp	loc_40647A
; ---------------------------------------------------------------------------

loc_406370:				; CODE XREF: sub_406278+ECj
		mov	eax, ds:dword_42D734
		cmp	eax, 2
		jnz	loc_40647A
		mov	[esp+38h+x], 3FEh ; int
		mov	[esp+38h+uFlags], offset aOpenvpnGui_0 ; "OpenVPN GUI"
		mov	[esp+38h+lpPoint], 4 ; int
		call	sub_40530C
		cmp	eax, 6
		jnz	loc_40647A
		call	sub_40760B
		jmp	loc_40647B
; ---------------------------------------------------------------------------

loc_4063AD:				; CODE XREF: sub_406278+E3j
		mov	[esp+38h+lpPoint], 0 ; MaxCount
		call	sub_40829E
		mov	[ebp+var_10], eax
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_10]
		jnz	short loc_4063FE
		call	sub_40621E
		call	sub_40D105
		call	sub_40592C
		mov	eax, ds:dword_42D730
		cmp	eax, 1
		jnz	loc_40647A
		mov	eax, ds:dword_41328C
		test	eax, eax
		jnz	loc_40647A
		mov	[esp+38h+lpPoint], offset ThreadId ; lpThreadId
		call	sub_403F71
		jmp	short loc_40647B
; ---------------------------------------------------------------------------

loc_4063FE:				; CODE XREF: sub_406278+14Cj
		mov	eax, ds:dword_42D730
		sub	eax, 1
		cmp	eax, [ebp+var_10]
		jnz	short loc_40647A
		mov	[ebp+var_C], 0
		jmp	short loc_406470
; ---------------------------------------------------------------------------

loc_406414:				; CODE XREF: sub_406278+200j
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_41328C
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_40646C
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_4132D8
		mov	eax, [eax]
		mov	[esp+38h+uFlags], 5 ; nCmdShow
		mov	[esp+38h+lpPoint], eax ; hWnd
		mov	eax, ds:ShowWindow
		call	eax ; ShowWindow
		sub	esp, 8
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_4132D8
		mov	eax, [eax]
		mov	[esp+38h+lpPoint], eax ; hWnd
		mov	eax, ds:SetForegroundWindow
		call	eax ; SetForegroundWindow
		sub	esp, 4
		jmp	short loc_40647A
; ---------------------------------------------------------------------------

loc_40646C:				; CODE XREF: sub_406278+1AEj
		add	[ebp+var_C], 1

loc_406470:				; CODE XREF: sub_406278+19Aj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	short loc_406414

loc_40647A:				; CODE XREF: sub_406278+F3j
					; sub_406278+100j ...
		nop

loc_40647B:				; CODE XREF: sub_406278+1Aj
					; sub_406278+D3j ...
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_406278	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_406480	proc near		; CODE XREF: sub_401ADE+339p
					; sub_401ADE+363p

hMenu		= dword	ptr -18h
lpData		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:hMenu
		mov	[esp+18h+hMenu], eax ; hMenu
		mov	eax, ds:DestroyMenu
		call	eax ; DestroyMenu
		sub	esp, 4
		mov	[esp+18h+lpData], offset Data ;	lpData
		mov	[esp+18h+hMenu], 2 ; dwMessage
		mov	eax, ds:Shell_NotifyIconW
		call	eax ; Shell_NotifyIconW
		sub	esp, 8
		leave
		retn
sub_406480	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4064B3	proc near		; CODE XREF: sub_401ADE+11Fp
					; sub_401ADE+485p

Dest		= dword	ptr -18h
Source		= dword	ptr -14h
Count		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	ds:Data.cbSize,	3BCh
		mov	ds:Data.uID, 0
		mov	eax, ds:hWnd
		mov	ds:Data.hWnd, eax
		mov	ds:Data.uFlags,	7
		mov	ds:Data.uCallbackMessage, 8001h
		mov	[esp+18h+Dest],	5Dh
		call	sub_405370
		mov	ds:Data.hIcon, eax
		mov	[esp+18h+Dest],	3E8h
		call	sub_40524A
		mov	[esp+18h+Count], 80h ; Count
		mov	[esp+18h+Source], eax ;	Source
		mov	[esp+18h+Dest],	offset Data.szTip ; Dest
		call	wcsncpy
		mov	[esp+18h+Source], offset Data ;	lpData
		mov	[esp+18h+Dest],	0 ; dwMessage
		mov	eax, ds:Shell_NotifyIconW
		call	eax ; Shell_NotifyIconW
		sub	esp, 8
		leave
		retn
sub_4064B3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40653B	proc near		; CODE XREF: sub_4026B9+249p
					; sub_40693D+17p ...

Dest		= dword	ptr -608h
Source		= dword	ptr -604h
Count		= dword	ptr -600h
var_5F8		= word ptr -5F8h
var_594		= word ptr -594h
var_4CC		= word ptr -4CCh
Str		= word ptr -404h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 604h
		mov	[ebp+var_10], 0
		mov	[esp+608h+Dest], 3E8h
		call	sub_40524A
		mov	[esp+608h+Count], 80h ;	Count
		mov	[esp+608h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Dest
		call	wcsncpy
		mov	[esp+608h+Dest], 3E9h
		call	sub_40524A
		mov	[esp+608h+Count], 64h ;	Count
		mov	[esp+608h+Source], eax ; Source
		lea	eax, [ebp+var_4CC]
		mov	[esp+608h+Dest], eax ; Dest
		call	wcsncpy
		mov	[esp+608h+Dest], 3EBh
		call	sub_40524A
		mov	[esp+608h+Count], 64h ;	Count
		mov	[esp+608h+Source], eax ; Source
		lea	eax, [ebp+var_594]
		mov	[esp+608h+Dest], eax ; Dest
		call	wcsncpy
		mov	[ebp+var_14], 1
		mov	[ebp+var_C], 0
		jmp	loc_40667A
; ---------------------------------------------------------------------------

loc_4065D1:				; CODE XREF: sub_40653B+147j
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_41328C
		mov	eax, [eax]
		cmp	eax, 3
		jnz	loc_406676
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Str
		call	wcslen
		mov	edx, 1F3h
		sub	edx, eax
		cmp	[ebp+var_14], 0
		jz	short loc_40660D
		lea	eax, [ebp+var_4CC]
		jmp	short loc_406612
; ---------------------------------------------------------------------------

loc_40660D:				; CODE XREF: sub_40653B+C8j
		mov	eax, offset asc_4105F4 ; ", "

loc_406612:				; CODE XREF: sub_40653B+D0j
		mov	[esp+608h+Count], edx ;	Count
		mov	[esp+608h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Dest
		call	wcsncat
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Str
		call	wcslen
		mov	edx, 1F3h
		sub	edx, eax
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, 2C0h
		add	eax, offset Str2
		add	eax, 10h
		mov	[esp+608h+Count], edx ;	Count
		mov	[esp+608h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Dest
		call	wcsncat
		mov	[ebp+var_14], 0
		mov	eax, [ebp+var_C]
		mov	[ebp+var_10], eax

loc_406676:				; CODE XREF: sub_40653B+A9j
		add	[ebp+var_C], 1

loc_40667A:				; CODE XREF: sub_40653B+91j
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	loc_4065D1
		mov	[ebp+var_14], 1
		mov	[ebp+var_C], 0
		jmp	loc_406768
; ---------------------------------------------------------------------------

loc_40669B:				; CODE XREF: sub_40653B+235j
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_41328C
		mov	eax, [eax]
		cmp	eax, 1
		jz	short loc_4066DE
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_41328C
		mov	eax, [eax]
		cmp	eax, 7
		jz	short loc_4066DE
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, offset dword_41328C
		mov	eax, [eax]
		cmp	eax, 2
		jnz	loc_406764

loc_4066DE:				; CODE XREF: sub_40653B+173j
					; sub_40653B+188j
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Str
		call	wcslen
		mov	edx, 1F3h
		sub	edx, eax
		cmp	[ebp+var_14], 0
		jz	short loc_406701
		lea	eax, [ebp+var_594]
		jmp	short loc_406706
; ---------------------------------------------------------------------------

loc_406701:				; CODE XREF: sub_40653B+1BCj
		mov	eax, offset asc_4105F4 ; ", "

loc_406706:				; CODE XREF: sub_40653B+1C4j
		mov	[esp+608h+Count], edx ;	Count
		mov	[esp+608h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Dest
		call	wcsncat
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Str
		call	wcslen
		mov	edx, 1F3h
		sub	edx, eax
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, 2C0h
		add	eax, offset Str2
		add	eax, 10h
		mov	[esp+608h+Count], edx ;	Count
		mov	[esp+608h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Dest
		call	wcsncat
		mov	[ebp+var_14], 0

loc_406764:				; CODE XREF: sub_40653B+19Dj
		add	[ebp+var_C], 1

loc_406768:				; CODE XREF: sub_40653B+15Bj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	loc_40669B
		mov	[esp+608h+Dest], 3
		call	sub_40829E
		cmp	eax, 1
		jnz	loc_40689C
		mov	eax, [ebp+var_10]
		imul	eax, 894h
		add	eax, offset dword_413294
		mov	eax, [eax]
		mov	[esp+608h+Count], 32h ;	int
		lea	edx, [ebp+var_5F8]
		mov	[esp+608h+Source], edx ; LPWSTR
		mov	[esp+608h+Dest], eax ; int
		call	sub_404F11
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Str
		call	wcslen
		mov	edx, 1F3h
		mov	ebx, edx
		sub	ebx, eax
		mov	[esp+608h+Dest], 3ECh
		call	sub_40524A
		mov	[esp+608h+Count], ebx ;	Count
		mov	[esp+608h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Dest
		call	wcsncat
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Str
		call	wcslen
		mov	edx, 1F3h
		sub	edx, eax
		mov	eax, edx
		mov	[esp+608h+Count], eax ;	Count
		lea	eax, [ebp+var_5F8]
		mov	[esp+608h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Dest
		call	wcsncat
		mov	eax, [ebp+var_10]
		imul	eax, 894h
		add	eax, 8E0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+608h+Dest], eax ; Str
		call	wcslen
		test	eax, eax
		jz	short loc_40689C
		mov	eax, [ebp+var_10]
		imul	eax, 894h
		add	eax, 8E0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+608h+Source], eax
		mov	[esp+608h+Dest], 3EDh
		call	sub_40524A
		mov	[ebp+var_1C], eax
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Str
		call	wcslen
		mov	edx, 1F3h
		sub	edx, eax
		mov	eax, edx
		mov	[esp+608h+Count], eax ;	Count
		mov	eax, [ebp+var_1C]
		mov	[esp+608h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+608h+Dest], eax ; Dest
		call	wcsncat

loc_40689C:				; CODE XREF: sub_40653B+24Aj
					; sub_40653B+306j
		mov	[ebp+var_18], 5Ch
		cmp	[ebp+arg_0], 3
		jnz	short loc_4068B2
		mov	[ebp+var_18], 5Bh
		jmp	short loc_4068BF
; ---------------------------------------------------------------------------

loc_4068B2:				; CODE XREF: sub_40653B+36Cj
		cmp	[ebp+arg_0], 0
		jnz	short loc_4068BF
		mov	[ebp+var_18], 5Dh

loc_4068BF:				; CODE XREF: sub_40653B+375j
					; sub_40653B+37Bj
		mov	ds:Data.cbSize,	3BCh
		mov	ds:Data.uID, 0
		mov	eax, ds:hWnd
		mov	ds:Data.hWnd, eax
		mov	eax, [ebp+var_18]
		mov	[esp+608h+Dest], eax
		call	sub_405370
		mov	ds:Data.hIcon, eax
		mov	ds:Data.uFlags,	7
		mov	ds:Data.uCallbackMessage, 8001h
		mov	[esp+608h+Count], 80h ;	Count
		lea	eax, [ebp+Str]
		mov	[esp+608h+Source], eax ; Source
		mov	[esp+608h+Dest], offset	Data.szTip ; Dest
		call	wcsncpy
		mov	[esp+608h+Source], offset Data ; lpData
		mov	[esp+608h+Dest], 1 ; dwMessage
		mov	eax, ds:Shell_NotifyIconW
		call	eax ; Shell_NotifyIconW
		sub	esp, 8
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_40653B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40693D	proc near		; CODE XREF: sub_401ADE+48Ap
					; sub_4026B9+35Cp ...

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_42D734
		cmp	eax, 2
		jnz	short loc_40695B
		mov	[esp+18h+var_18], 3
		call	sub_40653B
		jmp	short locret_4069CD
; ---------------------------------------------------------------------------

loc_40695B:				; CODE XREF: sub_40693D+Ej
		mov	[esp+18h+var_18], 3
		call	sub_40829E
		test	eax, eax
		jz	short loc_406979
		mov	[esp+18h+var_18], 3
		call	sub_40653B
		jmp	short locret_4069CD
; ---------------------------------------------------------------------------

loc_406979:				; CODE XREF: sub_40693D+2Cj
		mov	[esp+18h+var_18], 1
		call	sub_40829E
		test	eax, eax
		jnz	short loc_4069B3
		mov	[esp+18h+var_18], 2
		call	sub_40829E
		test	eax, eax
		jnz	short loc_4069B3
		mov	[esp+18h+var_18], 7
		call	sub_40829E
		test	eax, eax
		jnz	short loc_4069B3
		mov	eax, ds:dword_42D734
		cmp	eax, 1
		jnz	short loc_4069C1

loc_4069B3:				; CODE XREF: sub_40693D+4Aj
					; sub_40693D+5Aj ...
		mov	[esp+18h+var_18], 1
		call	sub_40653B
		jmp	short locret_4069CD
; ---------------------------------------------------------------------------

loc_4069C1:				; CODE XREF: sub_40693D+74j
		mov	[esp+18h+var_18], 0
		call	sub_40653B

locret_4069CD:				; CODE XREF: sub_40693D+1Cj
					; sub_40693D+3Aj ...
		leave
		retn
sub_40693D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4069CF(wchar_t *, wchar_t *)
sub_4069CF	proc near		; CODE XREF: sub_4026B9+1FCp
					; sub_407370+274p

Dest		= dword	ptr -18h
Source		= dword	ptr -14h
Count		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	ds:Data.cbSize,	3BCh
		mov	ds:Data.uID, 0
		mov	eax, ds:hWnd
		mov	ds:Data.hWnd, eax
		mov	ds:Data.uFlags,	10h
		mov	dword ptr ds:Data.u, 1388h
		mov	ds:Data.dwInfoFlags, 1
		mov	[esp+18h+Count], 100h ;	Count
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+Source], eax ;	Source
		mov	[esp+18h+Dest],	offset Data.szInfo ; Dest
		call	wcsncpy
		mov	[esp+18h+Count], 40h ; Count
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+Source], eax ;	Source
		mov	[esp+18h+Dest],	offset Data.szInfoTitle	; Dest
		call	wcsncpy
		mov	[esp+18h+Source], offset Data ;	lpData
		mov	[esp+18h+Dest],	1 ; dwMessage
		mov	eax, ds:Shell_NotifyIconW
		call	eax ; Shell_NotifyIconW
		sub	esp, 8
		leave
		retn
sub_4069CF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_406A62	proc near		; CODE XREF: sub_4026B9+23Dp
					; sub_402EC6+14p ...

hMenu		= dword	ptr -28h
uIDEnableItem	= dword	ptr -24h
uEnable		= dword	ptr -20h
var_10		= dword	ptr -10h
uIDCheckItem	= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, ds:dword_42D730
		cmp	eax, 1
		jnz	loc_406BD9
		cmp	[ebp+arg_4], 0
		jnz	short loc_406AE7
		mov	eax, ds:hMenu
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], 12Ch ;	uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, ds:hMenu
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 15Eh ;	uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, ds:hMenu
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 190h ;	uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		jmp	locret_406E21
; ---------------------------------------------------------------------------

loc_406AE7:				; CODE XREF: sub_406A62+18j
		cmp	[ebp+arg_4], 1
		jz	short loc_406AF9
		cmp	[ebp+arg_4], 7
		jz	short loc_406AF9
		cmp	[ebp+arg_4], 3
		jnz	short loc_406B64

loc_406AF9:				; CODE XREF: sub_406A62+89j
					; sub_406A62+8Fj
		mov	eax, ds:hMenu
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 12Ch ;	uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, ds:hMenu
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], 15Eh ;	uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, ds:hMenu
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], 190h ;	uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		jmp	locret_406E21
; ---------------------------------------------------------------------------

loc_406B64:				; CODE XREF: sub_406A62+95j
		cmp	[ebp+arg_4], 4
		jnz	locret_406E21
		mov	eax, ds:hMenu
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 12Ch ;	uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, ds:hMenu
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 15Eh ;	uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, ds:hMenu
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], 190h ;	uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		jmp	locret_406E21
; ---------------------------------------------------------------------------

loc_406BD9:				; CODE XREF: sub_406A62+Ej
		mov	[ebp+uIDCheckItem], 0
		jmp	short loc_406C03
; ---------------------------------------------------------------------------

loc_406BE2:				; CODE XREF: sub_406A62+1A9j
		mov	eax, [ebp+uIDCheckItem]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		cmp	eax, [ebp+arg_0]
		jnz	short loc_406BFF
		jmp	short loc_406C0D
; ---------------------------------------------------------------------------

loc_406BFF:				; CODE XREF: sub_406A62+199j
		add	[ebp+uIDCheckItem], 1

loc_406C03:				; CODE XREF: sub_406A62+17Ej
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+uIDCheckItem]
		jg	short loc_406BE2

loc_406C0D:				; CODE XREF: sub_406A62+19Bj
		cmp	[ebp+arg_4], 3
		jz	short loc_406C19
		cmp	[ebp+arg_4], 4
		jnz	short loc_406C20

loc_406C19:				; CODE XREF: sub_406A62+1AFj
		mov	eax, 1
		jmp	short loc_406C25
; ---------------------------------------------------------------------------

loc_406C20:				; CODE XREF: sub_406A62+1B5j
		mov	eax, 0

loc_406C25:				; CODE XREF: sub_406A62+1BCj
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_406C35
		mov	eax, 408h
		jmp	short loc_406C3A
; ---------------------------------------------------------------------------

loc_406C35:				; CODE XREF: sub_406A62+1CAj
		mov	eax, 400h

loc_406C3A:				; CODE XREF: sub_406A62+1D1j
		mov	ecx, [ebp+uIDCheckItem]
		mov	edx, ds:hMenu
		mov	[esp+28h+uEnable], eax ; uCheck
		mov	[esp+28h+uIDEnableItem], ecx ; uIDCheckItem
		mov	[esp+28h+hMenu], edx ; hMenu
		mov	eax, ds:CheckMenuItem
		call	eax ; CheckMenuItem
		sub	esp, 0Ch
		cmp	[ebp+arg_4], 0
		jnz	loc_406CEE
		mov	eax, [ebp+uIDCheckItem]
		add	eax, 12Ch
		mov	edx, eax
		mov	eax, [ebp+uIDCheckItem]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], edx ; uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, [ebp+uIDCheckItem]
		add	eax, 15Eh
		mov	edx, eax
		mov	eax, [ebp+uIDCheckItem]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], edx ; uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, [ebp+uIDCheckItem]
		add	eax, 190h
		mov	edx, eax
		mov	eax, [ebp+uIDCheckItem]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], edx ; uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		jmp	locret_406E21
; ---------------------------------------------------------------------------

loc_406CEE:				; CODE XREF: sub_406A62+1FAj
		cmp	[ebp+arg_4], 1
		jz	short loc_406D04
		cmp	[ebp+arg_4], 7
		jz	short loc_406D04
		cmp	[ebp+arg_4], 3
		jnz	loc_406D90

loc_406D04:				; CODE XREF: sub_406A62+290j
					; sub_406A62+296j
		mov	eax, [ebp+uIDCheckItem]
		add	eax, 12Ch
		mov	edx, eax
		mov	eax, [ebp+uIDCheckItem]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], edx ; uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, [ebp+uIDCheckItem]
		add	eax, 15Eh
		mov	edx, eax
		mov	eax, [ebp+uIDCheckItem]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], edx ; uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, [ebp+uIDCheckItem]
		add	eax, 190h
		mov	edx, eax
		mov	eax, [ebp+uIDCheckItem]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], edx ; uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		jmp	locret_406E21
; ---------------------------------------------------------------------------

loc_406D90:				; CODE XREF: sub_406A62+29Cj
		cmp	[ebp+arg_4], 4
		jnz	locret_406E21
		mov	eax, [ebp+uIDCheckItem]
		add	eax, 12Ch
		mov	edx, eax
		mov	eax, [ebp+uIDCheckItem]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], edx ; uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, [ebp+uIDCheckItem]
		add	eax, 15Eh
		mov	edx, eax
		mov	eax, [ebp+uIDCheckItem]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], edx ; uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	eax, [ebp+uIDCheckItem]
		add	eax, 190h
		mov	edx, eax
		mov	eax, [ebp+uIDCheckItem]
		mov	eax, ds:dword_42E800[eax*4]
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], edx ; uIDEnableItem
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch

locret_406E21:				; CODE XREF: sub_406A62+80j
					; sub_406A62+FDj ...
		leave
		retn
sub_406A62	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_406E23	proc near		; CODE XREF: sub_40592C:loc_406217p
					; sub_407370+10p ...

hMenu		= dword	ptr -28h
uIDEnableItem	= dword	ptr -24h
uEnable		= dword	ptr -20h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		movzx	eax, ds:word_42E3C8
		cmp	ax, 30h
		jnz	short loc_406E48
		movzx	eax, ds:word_42E3D8
		cmp	ax, 30h
		jnz	short loc_406E48
		jmp	locret_406FAC
; ---------------------------------------------------------------------------

loc_406E48:				; CODE XREF: sub_406E23+11j
					; sub_406E23+1Ej
		movzx	eax, ds:word_42E3D8
		cmp	ax, 31h
		jnz	short loc_406E5F
		mov	eax, ds:hMenu
		mov	[ebp+var_C], eax
		jmp	short loc_406E67
; ---------------------------------------------------------------------------

loc_406E5F:				; CODE XREF: sub_406E23+30j
		mov	eax, ds:uIDNewItem
		mov	[ebp+var_C], eax

loc_406E67:				; CODE XREF: sub_406E23+3Aj
		mov	eax, ds:dword_42D734
		cmp	eax, 0FFFFFFFFh
		jz	short loc_406E7B
		mov	eax, ds:dword_42D734
		cmp	eax, 1
		jnz	short loc_406EE0

loc_406E7B:				; CODE XREF: sub_406E23+4Cj
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 64h ; uIDEnableItem
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 65h ; uIDEnableItem
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 66h ; uIDEnableItem
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		jmp	locret_406FAC
; ---------------------------------------------------------------------------

loc_406EE0:				; CODE XREF: sub_406E23+56j
		mov	eax, ds:dword_42D734
		cmp	eax, 2
		jnz	short loc_406F4C
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 64h ; uIDEnableItem
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], 65h ; uIDEnableItem
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], 66h ; uIDEnableItem
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		jmp	short locret_406FAC
; ---------------------------------------------------------------------------

loc_406F4C:				; CODE XREF: sub_406E23+C5j
		mov	[esp+28h+uEnable], 0 ; uEnable
		mov	[esp+28h+uIDEnableItem], 64h ; uIDEnableItem
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 65h ; uIDEnableItem
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch
		mov	[esp+28h+uEnable], 1 ; uEnable
		mov	[esp+28h+uIDEnableItem], 66h ; uIDEnableItem
		mov	eax, [ebp+var_C]
		mov	[esp+28h+hMenu], eax ; hMenu
		mov	eax, ds:EnableMenuItem
		call	eax ; EnableMenuItem
		sub	esp, 0Ch

locret_406FAC:				; CODE XREF: sub_406E23+20j
					; sub_406E23+B8j ...
		leave
		retn
sub_406E23	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_406FB0(wchar_t *, size_t, wchar_t *, char)
sub_406FB0	proc near		; CODE XREF: sub_406FFB+BCp
					; sub_40719F+D6p

Dest		= dword	ptr -28h
Count		= dword	ptr -24h
Format		= dword	ptr -20h
Args		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+Args],	eax ; Args
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+Format], eax ;	Format
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Count], eax ; Count
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Dest],	eax ; Dest
		mov	eax, ds:_vsnwprintf
		call	eax ; _vsnwprintf
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_4]
		add	eax, 7FFFFFFFh
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	word ptr [eax],	0
		mov	eax, [ebp+var_C]
		leave
		retn
sub_406FB0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_406FFB	proc near		; CODE XREF: sub_401ADE+25Ep

Dst		= dword	ptr -248h
Val		= dword	ptr -244h
Size		= dword	ptr -240h
lpThreadAttributes= dword ptr -23Ch
bInheritHandles	= dword	ptr -238h
dwCreationFlags	= dword	ptr -234h
lpEnvironment	= dword	ptr -230h
lpCurrentDirectory= dword ptr -22Ch
lpStartupInfo	= dword	ptr -228h
lpProcessInformation= dword ptr	-224h
var_20C		= byte ptr -20Ch
var_1F8		= byte ptr -1F8h
ProcessInformation= _PROCESS_INFORMATION ptr -1ECh
StartupInfo	= _STARTUPINFOW	ptr -1DCh
CommandLine	= word ptr -198h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 248h
		mov	[esp+248h+Size], 44h ; Size
		mov	[esp+248h+Val],	0 ; Val
		lea	eax, [ebp+StartupInfo]
		mov	[esp+248h+Dst],	eax ; Dst
		call	memset
		mov	[esp+248h+Size], 10h ; Size
		mov	[esp+248h+Val],	0 ; Val
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+248h+Dst],	eax ; Dst
		call	memset
		mov	[esp+248h+Size], 0Ch ; Size
		mov	[esp+248h+Val],	0 ; Val
		lea	eax, [ebp+var_1F8]
		mov	[esp+248h+Dst],	eax ; Dst
		call	memset
		mov	[esp+248h+Size], 14h ; Size
		mov	[esp+248h+Val],	0 ; Val
		lea	eax, [ebp+var_20C]
		mov	[esp+248h+Dst],	eax ; Dst
		call	memset
		mov	eax, [ebp+arg_0]
		imul	eax, 894h
		add	eax, 6D0h
		add	eax, offset Str2
		add	eax, 10h
		mov	[esp+248h+bInheritHandles], eax
		mov	[esp+248h+lpThreadAttributes], offset dword_42DFB4 ; char
		mov	[esp+248h+Size], offset	aSS ; "%s \"%s\""
		mov	[esp+248h+Val],	0C8h ; size_t
		lea	eax, [ebp+CommandLine]
		mov	[esp+248h+Dst],	eax ; wchar_t *
		call	sub_406FB0
		lea	eax, [ebp+StartupInfo]
		mov	[esp+248h+Dst],	eax ; lpStartupInfo
		mov	eax, ds:GetStartupInfoW
		call	eax ; GetStartupInfoW
		sub	esp, 4
		mov	[ebp+StartupInfo.cb], 44h
		mov	[ebp+StartupInfo.dwFlags], 0
		mov	[ebp+StartupInfo.wShowWindow], 0Ah
		mov	[ebp+StartupInfo.hStdInput], 0
		mov	[ebp+StartupInfo.hStdOutput], 0
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+248h+lpProcessInformation], eax ; lpProcessInformation
		lea	eax, [ebp+StartupInfo]
		mov	[esp+248h+lpStartupInfo], eax ;	lpStartupInfo
		mov	[esp+248h+lpCurrentDirectory], offset PathName ; lpCurrentDirectory
		mov	[esp+248h+lpEnvironment], 0 ; lpEnvironment
		mov	[esp+248h+dwCreationFlags], 10h	; dwCreationFlags
		mov	[esp+248h+bInheritHandles], 1 ;	bInheritHandles
		mov	[esp+248h+lpThreadAttributes], 0 ; lpThreadAttributes
		mov	[esp+248h+Size], 0 ; lpProcessAttributes
		lea	eax, [ebp+CommandLine]
		mov	[esp+248h+Val],	eax ; lpCommandLine
		mov	[esp+248h+Dst],	0 ; lpApplicationName
		mov	eax, ds:CreateProcessW
		call	eax ; CreateProcessW
		sub	esp, 28h
		test	eax, eax
		jnz	short loc_407177
		mov	[esp+248h+Val],	offset dword_42DFB4
		mov	[esp+248h+Dst],	44Dh
		call	sub_405340

loc_407177:				; CODE XREF: sub_406FFB+166j
		mov	eax, [ebp+ProcessInformation.hThread]
		mov	[esp+248h+Dst],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, [ebp+ProcessInformation.hProcess]
		mov	[esp+248h+Dst],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		leave
		retn
sub_406FFB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40719F	proc near		; CODE XREF: sub_401ADE+283p

Dst		= dword	ptr -248h
Val		= dword	ptr -244h
Size		= dword	ptr -240h
lpThreadAttributes= dword ptr -23Ch
bInheritHandles	= dword	ptr -238h
dwCreationFlags	= dword	ptr -234h
lpEnvironment	= dword	ptr -230h
lpCurrentDirectory= dword ptr -22Ch
lpStartupInfo	= dword	ptr -228h
lpProcessInformation= dword ptr	-224h
var_20C		= byte ptr -20Ch
var_1F8		= byte ptr -1F8h
ProcessInformation= _PROCESS_INFORMATION ptr -1ECh
StartupInfo	= _STARTUPINFOW	ptr -1DCh
CommandLine	= word ptr -198h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 248h
		mov	[esp+248h+Size], 44h ; Size
		mov	[esp+248h+Val],	0 ; Val
		lea	eax, [ebp+StartupInfo]
		mov	[esp+248h+Dst],	eax ; Dst
		call	memset
		mov	[esp+248h+Size], 10h ; Size
		mov	[esp+248h+Val],	0 ; Val
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+248h+Dst],	eax ; Dst
		call	memset
		mov	[esp+248h+Size], 0Ch ; Size
		mov	[esp+248h+Val],	0 ; Val
		lea	eax, [ebp+var_1F8]
		mov	[esp+248h+Dst],	eax ; Dst
		call	memset
		mov	[esp+248h+Size], 14h ; Size
		mov	[esp+248h+Val],	0 ; Val
		lea	eax, [ebp+var_20C]
		mov	[esp+248h+Dst],	eax ; Dst
		call	memset
		mov	eax, [ebp+arg_0]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		lea	edx, [eax+8]
		mov	eax, [ebp+arg_0]
		imul	eax, 894h
		add	eax, 4D0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+248h+dwCreationFlags], edx
		mov	[esp+248h+bInheritHandles], eax
		mov	[esp+248h+lpThreadAttributes], offset dword_42E1BC ; char
		mov	[esp+248h+Size], offset	aSSS ; "%s \"%s\\%s\""
		mov	[esp+248h+Val],	0C8h ; size_t
		lea	eax, [ebp+CommandLine]
		mov	[esp+248h+Dst],	eax ; wchar_t *
		call	sub_406FB0
		lea	eax, [ebp+StartupInfo]
		mov	[esp+248h+Dst],	eax ; lpStartupInfo
		mov	eax, ds:GetStartupInfoW
		call	eax ; GetStartupInfoW
		sub	esp, 4
		mov	[ebp+StartupInfo.cb], 44h
		mov	[ebp+StartupInfo.dwFlags], 0
		mov	[ebp+StartupInfo.wShowWindow], 0Ah
		mov	[ebp+StartupInfo.hStdInput], 0
		mov	[ebp+StartupInfo.hStdOutput], 0
		mov	eax, [ebp+arg_0]
		imul	eax, 894h
		add	eax, 4D0h
		add	eax, offset Str2
		lea	edx, [eax+8]
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+248h+lpProcessInformation], eax ; lpProcessInformation
		lea	eax, [ebp+StartupInfo]
		mov	[esp+248h+lpStartupInfo], eax ;	lpStartupInfo
		mov	[esp+248h+lpCurrentDirectory], edx ; lpCurrentDirectory
		mov	[esp+248h+lpEnvironment], 0 ; lpEnvironment
		mov	[esp+248h+dwCreationFlags], 10h	; dwCreationFlags
		mov	[esp+248h+bInheritHandles], 1 ;	bInheritHandles
		mov	[esp+248h+lpThreadAttributes], 0 ; lpThreadAttributes
		mov	[esp+248h+Size], 0 ; lpProcessAttributes
		lea	eax, [ebp+CommandLine]
		mov	[esp+248h+Val],	eax ; lpCommandLine
		mov	[esp+248h+Dst],	0 ; lpApplicationName
		mov	eax, ds:CreateProcessW
		call	eax ; CreateProcessW
		sub	esp, 28h
		test	eax, eax
		jnz	short loc_407347
		mov	[esp+248h+Val],	offset dword_42E1BC
		mov	[esp+248h+Dst],	44Eh
		call	sub_405340

loc_407347:				; CODE XREF: sub_40719F+192j
		mov	eax, [ebp+ProcessInformation.hThread]
		mov	[esp+248h+Dst],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, [ebp+ProcessInformation.hProcess]
		mov	[esp+248h+Dst],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		leave
		retn
sub_40719F	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_407370	proc near		; CODE XREF: sub_401ADE+2EBp
					; sub_406278+EEp ...

lpMachineName	= dword	ptr -58h
lpDatabaseName	= dword	ptr -54h
dwDesiredAccess	= dword	ptr -50h
ServiceStatus	= _SERVICE_STATUS ptr -3Ch
hService	= dword	ptr -20h
hSCManager	= dword	ptr -1Ch
var_18		= dword	ptr -18h
dwMilliseconds	= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		mov	ds:dword_42D734, 1
		call	sub_406E23
		call	sub_40693D
		mov	[esp+58h+dwDesiredAccess], 1 ; dwDesiredAccess
		mov	[esp+58h+lpDatabaseName], 0 ; lpDatabaseName
		mov	[esp+58h+lpMachineName], 0 ; lpMachineName
		mov	eax, ds:OpenSCManagerW
		call	eax ; OpenSCManagerW
		sub	esp, 0Ch
		mov	[ebp+hSCManager], eax
		cmp	[ebp+hSCManager], 0
		jnz	short loc_4073C5
		mov	[esp+58h+lpMachineName], 6AAh
		call	sub_405340
		jmp	loc_4075F0
; ---------------------------------------------------------------------------

loc_4073C5:				; CODE XREF: sub_407370+42j
		mov	[esp+58h+dwDesiredAccess], 14h ; dwDesiredAccess
		mov	[esp+58h+lpDatabaseName], offset ServiceName ; "OpenVPNService"
		mov	eax, [ebp+hSCManager]
		mov	[esp+58h+lpMachineName], eax ; hSCManager
		mov	eax, ds:OpenServiceW
		call	eax ; OpenServiceW
		sub	esp, 0Ch
		mov	[ebp+hService],	eax
		cmp	[ebp+hService],	0
		jnz	short loc_4073FF
		mov	[esp+58h+lpMachineName], 6A6h
		call	sub_405340
		jmp	loc_4075F0
; ---------------------------------------------------------------------------

loc_4073FF:				; CODE XREF: sub_407370+7Cj
		mov	[ebp+var_18], 0
		jmp	short loc_40742A
; ---------------------------------------------------------------------------

loc_407408:				; CODE XREF: sub_407370+C2j
		mov	eax, [ebp+var_18]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+58h+lpMachineName], eax ; wchar_t *
		call	sub_40B7F7
		add	[ebp+var_18], 1

loc_40742A:				; CODE XREF: sub_407370+96j
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_18]
		jg	short loc_407408
		mov	[esp+58h+dwDesiredAccess], 0 ; lpServiceArgVectors
		mov	[esp+58h+lpDatabaseName], 0 ; dwNumServiceArgs
		mov	eax, [ebp+hService]
		mov	[esp+58h+lpMachineName], eax ; hService
		mov	eax, ds:StartServiceW
		call	eax ; StartServiceW
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_407469
		mov	[esp+58h+lpMachineName], 6A7h
		call	sub_405340
		jmp	loc_4075F0
; ---------------------------------------------------------------------------

loc_407469:				; CODE XREF: sub_407370+E6j
		lea	eax, [ebp+ServiceStatus]
		mov	[esp+58h+lpDatabaseName], eax ;	lpServiceStatus
		mov	eax, [ebp+hService]
		mov	[esp+58h+lpMachineName], eax ; hService
		mov	eax, ds:QueryServiceStatus
		call	eax ; QueryServiceStatus
		sub	esp, 8
		test	eax, eax
		jnz	short loc_407495
		mov	[esp+58h+lpMachineName], 6A8h
		call	sub_405340
		jmp	loc_4075F0
; ---------------------------------------------------------------------------

loc_407495:				; CODE XREF: sub_407370+112j
		mov	eax, ds:GetTickCount
		call	eax ; GetTickCount
		mov	[ebp+var_10], eax
		mov	eax, [ebp+ServiceStatus.dwCheckPoint]
		mov	[ebp+var_C], eax
		jmp	loc_40753A
; ---------------------------------------------------------------------------

loc_4074AA:				; CODE XREF: sub_407370+1D0j
		mov	eax, [ebp+ServiceStatus.dwWaitHint]
		mov	edx, 0CCCCCCCDh
		mul	edx
		mov	eax, edx
		shr	eax, 3
		mov	[ebp+dwMilliseconds], eax
		cmp	[ebp+dwMilliseconds], 3E7h
		ja	short loc_4074CE
		mov	[ebp+dwMilliseconds], 3E8h
		jmp	short loc_4074DE
; ---------------------------------------------------------------------------

loc_4074CE:				; CODE XREF: sub_407370+153j
		cmp	[ebp+dwMilliseconds], 1388h
		jbe	short loc_4074DE
		mov	[ebp+dwMilliseconds], 1388h

loc_4074DE:				; CODE XREF: sub_407370+15Cj
					; sub_407370+165j
		mov	eax, [ebp+dwMilliseconds]
		mov	[esp+58h+lpMachineName], eax ; dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4
		lea	eax, [ebp+ServiceStatus]
		mov	[esp+58h+lpDatabaseName], eax ;	lpServiceStatus
		mov	eax, [ebp+hService]
		mov	[esp+58h+lpMachineName], eax ; hService
		mov	eax, ds:QueryServiceStatus
		call	eax ; QueryServiceStatus
		sub	esp, 8
		test	eax, eax
		jnz	short loc_40750B
		jmp	short loc_407546
; ---------------------------------------------------------------------------

loc_40750B:				; CODE XREF: sub_407370+197j
		mov	eax, [ebp+ServiceStatus.dwCheckPoint]
		cmp	eax, [ebp+var_C]
		jbe	short loc_407525
		mov	eax, ds:GetTickCount
		call	eax ; GetTickCount
		mov	[ebp+var_10], eax
		mov	eax, [ebp+ServiceStatus.dwCheckPoint]
		mov	[ebp+var_C], eax
		jmp	short loc_40753A
; ---------------------------------------------------------------------------

loc_407525:				; CODE XREF: sub_407370+1A1j
		mov	eax, ds:GetTickCount
		call	eax ; GetTickCount
		sub	eax, [ebp+var_10]
		mov	edx, eax
		mov	eax, [ebp+ServiceStatus.dwWaitHint]
		cmp	edx, eax
		jbe	short loc_40753A
		jmp	short loc_407546
; ---------------------------------------------------------------------------

loc_40753A:				; CODE XREF: sub_407370+135j
					; sub_407370+1B3j ...
		mov	eax, [ebp+ServiceStatus.dwCurrentState]
		cmp	eax, 2
		jz	loc_4074AA

loc_407546:				; CODE XREF: sub_407370+199j
					; sub_407370+1C8j
		mov	eax, [ebp+hService]
		mov	[esp+58h+lpMachineName], eax ; hSCObject
		mov	eax, ds:CloseServiceHandle
		call	eax ; CloseServiceHandle
		sub	esp, 4
		mov	eax, [ebp+hSCManager]
		mov	[esp+58h+lpMachineName], eax ; hSCObject
		mov	eax, ds:CloseServiceHandle
		call	eax ; CloseServiceHandle
		sub	esp, 4
		mov	eax, [ebp+ServiceStatus.dwCurrentState]
		cmp	eax, 4
		jz	short loc_40757C
		mov	[esp+58h+lpMachineName], 6A9h
		call	sub_405340
		jmp	short loc_4075F0
; ---------------------------------------------------------------------------

loc_40757C:				; CODE XREF: sub_407370+1FCj
		mov	[ebp+var_18], 0
		jmp	short loc_4075AF
; ---------------------------------------------------------------------------

loc_407585:				; CODE XREF: sub_407370+247j
		mov	eax, [ebp+var_18]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+58h+lpDatabaseName], 1 ; int
		mov	[esp+58h+lpMachineName], eax ; wchar_t *
		call	sub_40B9DE
		add	[ebp+var_18], 1

loc_4075AF:				; CODE XREF: sub_407370+213j
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_18]
		jg	short loc_407585
		mov	ds:dword_42D734, 2
		call	sub_406E23
		call	sub_40693D
		mov	[esp+58h+lpMachineName], 519h
		call	sub_40524A
		mov	[esp+58h+lpDatabaseName], offset word_410642 ; wchar_t *
		mov	[esp+58h+lpMachineName], eax ; wchar_t *
		call	sub_4069CF
		mov	eax, 1
		jmp	short locret_407609
; ---------------------------------------------------------------------------

loc_4075F0:				; CODE XREF: sub_407370+50j
					; sub_407370+8Aj ...
		mov	ds:dword_42D734, 0
		call	sub_406E23
		call	sub_40693D
		mov	eax, 0

locret_407609:				; CODE XREF: sub_407370+27Ej
		leave
		retn
sub_407370	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40760B	proc near		; CODE XREF: sub_401ADE+2F9p
					; sub_406278+12Bp ...

lpMachineName	= dword	ptr -48h
lpDatabaseName	= dword	ptr -44h
dwDesiredAccess	= dword	ptr -40h
ServiceStatus	= _SERVICE_STATUS ptr -30h
hService	= dword	ptr -14h
hSCManager	= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	[esp+48h+dwDesiredAccess], 1 ; dwDesiredAccess
		mov	[esp+48h+lpDatabaseName], 0 ; lpDatabaseName
		mov	[esp+48h+lpMachineName], 0 ; lpMachineName
		mov	eax, ds:OpenSCManagerW
		call	eax ; OpenSCManagerW
		sub	esp, 0Ch
		mov	[ebp+hSCManager], eax
		cmp	[ebp+hSCManager], 0
		jnz	short loc_40765C
		mov	eax, ds:GetLastError
		call	eax ; GetLastError
		mov	[esp+48h+lpDatabaseName], eax
		mov	[esp+48h+lpMachineName], 6AAh
		call	sub_405340
		mov	eax, 0
		jmp	locret_407727
; ---------------------------------------------------------------------------

loc_40765C:				; CODE XREF: sub_40760B+2Ej
		mov	[esp+48h+dwDesiredAccess], 20h ; dwDesiredAccess
		mov	[esp+48h+lpDatabaseName], offset ServiceName ; "OpenVPNService"
		mov	eax, [ebp+hSCManager]
		mov	[esp+48h+lpMachineName], eax ; hSCManager
		mov	eax, ds:OpenServiceW
		call	eax ; OpenServiceW
		sub	esp, 0Ch
		mov	[ebp+hService],	eax
		cmp	[ebp+hService],	0
		jnz	short loc_40769B
		mov	[esp+48h+lpMachineName], 6A6h
		call	sub_405340
		mov	eax, 0
		jmp	locret_407727
; ---------------------------------------------------------------------------

loc_40769B:				; CODE XREF: sub_40760B+78j
		mov	[ebp+var_C], 0
		jmp	short loc_4076CE
; ---------------------------------------------------------------------------

loc_4076A4:				; CODE XREF: sub_40760B+CBj
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[esp+48h+lpDatabaseName], 1 ; int
		mov	[esp+48h+lpMachineName], eax ; wchar_t *
		call	sub_40BC71
		add	[ebp+var_C], 1

loc_4076CE:				; CODE XREF: sub_40760B+97j
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	short loc_4076A4
		lea	eax, [ebp+ServiceStatus]
		mov	[esp+48h+dwDesiredAccess], eax ; lpServiceStatus
		mov	[esp+48h+lpDatabaseName], 1 ; dwControl
		mov	eax, [ebp+hService]
		mov	[esp+48h+lpMachineName], eax ; hService
		mov	eax, ds:ControlService
		call	eax ; ControlService
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_40770E
		mov	[esp+48h+lpMachineName], 6ABh
		call	sub_405340
		mov	eax, 0
		jmp	short locret_407727
; ---------------------------------------------------------------------------

loc_40770E:				; CODE XREF: sub_40760B+EEj
		mov	ds:dword_42D734, 0
		call	sub_406E23
		call	sub_40693D
		mov	eax, 1

locret_407727:				; CODE XREF: sub_40760B+4Cj
					; sub_40760B+8Bj ...
		leave
		retn
sub_40760B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_407729	proc near		; CODE XREF: sub_401ADE+307p

dwMilliseconds	= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_40760B
		mov	[esp+18h+dwMilliseconds], 3E8h ; dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4
		call	sub_407370
		test	eax, eax
		jz	short loc_407755
		mov	eax, 1
		jmp	short locret_40775A
; ---------------------------------------------------------------------------

loc_407755:				; CODE XREF: sub_407729+23j
		mov	eax, 0

locret_40775A:				; CODE XREF: sub_407729+2Aj
		leave
		retn
sub_407729	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40775C	proc near		; CODE XREF: sub_401ADE:loc_401C1Cp

lpMachineName	= dword	ptr -48h
lpDatabaseName	= dword	ptr -44h
dwDesiredAccess	= dword	ptr -40h
ServiceStatus	= _SERVICE_STATUS ptr -2Ch
hService	= dword	ptr -10h
hSCManager	= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	[esp+48h+dwDesiredAccess], 1 ; dwDesiredAccess
		mov	[esp+48h+lpDatabaseName], 0 ; lpDatabaseName
		mov	[esp+48h+lpMachineName], 0 ; lpMachineName
		mov	eax, ds:OpenSCManagerW
		call	eax ; OpenSCManagerW
		sub	esp, 0Ch
		mov	[ebp+hSCManager], eax
		cmp	[ebp+hSCManager], 0
		jnz	short loc_4077A5
		mov	ds:dword_42D734, 0FFFFFFFFh
		call	sub_406E23
		mov	eax, 0
		jmp	locret_407868
; ---------------------------------------------------------------------------

loc_4077A5:				; CODE XREF: sub_40775C+2Ej
		mov	[esp+48h+dwDesiredAccess], 4 ; dwDesiredAccess
		mov	[esp+48h+lpDatabaseName], offset ServiceName ; "OpenVPNService"
		mov	eax, [ebp+hSCManager]
		mov	[esp+48h+lpMachineName], eax ; hSCManager
		mov	eax, ds:OpenServiceW
		call	eax ; OpenServiceW
		sub	esp, 0Ch
		mov	[ebp+hService],	eax
		cmp	[ebp+hService],	0
		jnz	short loc_4077F0
		mov	[esp+48h+lpMachineName], 6A6h
		call	sub_405340
		mov	ds:dword_42D734, 0FFFFFFFFh
		call	sub_406E23
		mov	eax, 0
		jmp	short locret_407868
; ---------------------------------------------------------------------------

loc_4077F0:				; CODE XREF: sub_40775C+70j
		lea	eax, [ebp+ServiceStatus]
		mov	[esp+48h+lpDatabaseName], eax ;	lpServiceStatus
		mov	eax, [ebp+hService]
		mov	[esp+48h+lpMachineName], eax ; hService
		mov	eax, ds:QueryServiceStatus
		call	eax ; QueryServiceStatus
		sub	esp, 8
		test	eax, eax
		jnz	short loc_40781E
		mov	[esp+48h+lpMachineName], 6A8h
		call	sub_405340
		mov	eax, 0
		jmp	short locret_407868
; ---------------------------------------------------------------------------

loc_40781E:				; CODE XREF: sub_40775C+ADj
		mov	eax, [ebp+ServiceStatus.dwCurrentState]
		cmp	eax, 4
		jnz	short loc_407848
		mov	ds:dword_42D734, 2
		call	sub_406E23
		mov	[esp+48h+lpMachineName], 3
		call	sub_40653B
		mov	eax, 1
		jmp	short locret_407868
; ---------------------------------------------------------------------------

loc_407848:				; CODE XREF: sub_40775C+C8j
		mov	ds:dword_42D734, 0
		call	sub_406E23
		mov	[esp+48h+lpMachineName], 0
		call	sub_40653B
		mov	eax, 0

locret_407868:				; CODE XREF: sub_40775C+44j
					; sub_40775C+92j ...
		leave
		retn
sub_40775C	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40786C	proc near		; CODE XREF: sub_407FE4+100p

Str1		= dword	ptr -1A8h
Str2		= dword	ptr -1A4h
Count		= dword	ptr -1A0h
var_198		= word ptr -198h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 1A8h
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aHelp ;	"help"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_4078D6
		mov	[esp+1A8h+Count], 57Ah ; int
		mov	[esp+1A8h+Str2], 0C8h ;	size_t
		lea	eax, [ebp+var_198]
		mov	[esp+1A8h+Str1], eax ; wchar_t *
		call	sub_405270
		mov	[esp+1A8h+Count], 579h ; int
		lea	eax, [ebp+var_198]
		mov	[esp+1A8h+Str2], eax ; LPCWSTR
		mov	[esp+1A8h+Str1], 0 ; int
		call	sub_40530C
		mov	[esp+1A8h+Str1], 0 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_4078D6:				; CODE XREF: sub_40786C+20j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aC ; "c"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407948
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407948
		add	[ebp+arg_4], 1
		mov	eax, ds:dword_412560
		cmp	eax, 32h
		jnz	short loc_407929
		mov	[esp+1A8h+Str2], 32h
		mov	[esp+1A8h+Str1], 4B1h
		call	sub_405340
		mov	[esp+1A8h+Str1], 1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_407929:				; CODE XREF: sub_40786C+9Bj
		mov	eax, ds:dword_412560
		lea	edx, [eax+1]
		mov	ds:dword_412560, edx
		mov	edx, [ebp+arg_8]
		mov	ecx, [edx+4]
		mov	edx, [ebp+arg_0]
		mov	[edx+eax*4], ecx
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407948:				; CODE XREF: sub_40786C+81j
					; sub_40786C+8Dj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	word_41065E ; Str2
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_40799B
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_40799B
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1AF78h
		mov	[esp+1A8h+Count], 103h ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_40799B:				; CODE XREF: sub_40786C+F3j
					; sub_40786C+FFj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aConfig_dir ; "config_dir"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_4079EE
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_4079EE
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1B180h
		mov	[esp+1A8h+Count], 103h ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_4079EE:				; CODE XREF: sub_40786C+146j
					; sub_40786C+152j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aE ; "e"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407A41
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407A41
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1B388h
		mov	[esp+1A8h+Count], 0Fh ;	Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407A41:				; CODE XREF: sub_40786C+199j
					; sub_40786C+1A5j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aLog_dir ; "log_dir"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407A94
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407A94
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1B3A8h
		mov	[esp+1A8h+Count], 103h ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407A94:				; CODE XREF: sub_40786C+1ECj
					; sub_40786C+1F8j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aPriority_strin	; "priority_string"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407AE7
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407AE7
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1B5B0h
		mov	[esp+1A8h+Count], 3Fh ;	Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407AE7:				; CODE XREF: sub_40786C+23Fj
					; sub_40786C+24Bj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aAppend_string ; "append_string"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407B3A
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407B3A
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1B630h
		mov	[esp+1A8h+Count], 1 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407B3A:				; CODE XREF: sub_40786C+292j
					; sub_40786C+29Ej
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aLog_viewer ; "log_viewer"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407B8D
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407B8D
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1B634h
		mov	[esp+1A8h+Count], 103h ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407B8D:				; CODE XREF: sub_40786C+2E5j
					; sub_40786C+2F1j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aE_0 ; "e"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407BE0
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407BE0
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1B83Ch
		mov	[esp+1A8h+Count], 103h ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407BE0:				; CODE XREF: sub_40786C+338j
					; sub_40786C+344j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aAllow_edit ; "allow_edit"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407C33
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407C33
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA44h
		mov	[esp+1A8h+Count], 1 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407C33:				; CODE XREF: sub_40786C+38Bj
					; sub_40786C+397j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aA ; "a"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407C86
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407C86
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA48h
		mov	[esp+1A8h+Count], 1 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407C86:				; CODE XREF: sub_40786C+3DEj
					; sub_40786C+3EAj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	word_41073E ; Str2
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407CD9
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407CD9
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA4Ch
		mov	[esp+1A8h+Count], 1 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407CD9:				; CODE XREF: sub_40786C+431j
					; sub_40786C+43Dj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aAllow_proxy ; "allow_proxy"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407D2C
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407D2C
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA50h
		mov	[esp+1A8h+Count], 1 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407D2C:				; CODE XREF: sub_40786C+484j
					; sub_40786C+490j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aShow_balloon ;	"show_balloon"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407D7F
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407D7F
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA5Ch
		mov	[esp+1A8h+Count], 1 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407D7F:				; CODE XREF: sub_40786C+4D7j
					; sub_40786C+4E3j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aS_0 ; "s"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407DD2
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407DD2
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA58h
		mov	[esp+1A8h+Count], 1 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407DD2:				; CODE XREF: sub_40786C+52Aj
					; sub_40786C+536j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aShow_script_wi	; "show_script_window"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407E25
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407E25
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA60h
		mov	[esp+1A8h+Count], 1 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407E25:				; CODE XREF: sub_40786C+57Dj
					; sub_40786C+589j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aSilent_connect	; "silent_connection"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407E78
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407E78
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA54h
		mov	[esp+1A8h+Count], 1 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407E78:				; CODE XREF: sub_40786C+5D0j
					; sub_40786C+5DCj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aPassphrase_att	; "passphrase_attempts"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407ECB
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407ECB
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA64h
		mov	[esp+1A8h+Count], 1 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407ECB:				; CODE XREF: sub_40786C+623j
					; sub_40786C+62Fj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aConnectscript_	; "connectscript_timeout"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407F1E
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407F1E
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA6Ch
		mov	[esp+1A8h+Count], 3 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	loc_407FDF
; ---------------------------------------------------------------------------

loc_407F1E:				; CODE XREF: sub_40786C+676j
					; sub_40786C+682j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aDisconnectscri	; "disconnectscript_timeout"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407F6E
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407F6E
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA74h
		mov	[esp+1A8h+Count], 3 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	short loc_407FDF
; ---------------------------------------------------------------------------

loc_407F6E:				; CODE XREF: sub_40786C+6C9j
					; sub_40786C+6D5j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], offset	aPreconnectscri	; "preconnectscript_timeout"
		mov	[esp+1A8h+Str1], eax ; Str1
		call	wcscmp
		test	eax, eax
		jnz	short loc_407FBE
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_407FBE
		add	[ebp+arg_4], 1
		mov	eax, [ebp+arg_8]
		add	eax, 4
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 1BA7Ch
		mov	[esp+1A8h+Count], 3 ; Count
		mov	[esp+1A8h+Str2], eax ; Source
		mov	[esp+1A8h+Str1], edx ; Dest
		call	wcsncpy
		jmp	short loc_407FDF
; ---------------------------------------------------------------------------

loc_407FBE:				; CODE XREF: sub_40786C+719j
					; sub_40786C+725j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+1A8h+Str2], eax
		mov	[esp+1A8h+Str1], 57Ch
		call	sub_405340
		mov	[esp+1A8h+Str1], 1 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_407FDF:				; CODE XREF: sub_40786C+D7j
					; sub_40786C+12Aj ...
		mov	eax, [ebp+arg_4]
		leave
		retn
sub_40786C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_407FE4	proc near		; CODE XREF: sub_408121+16Bp

Dst		= dword	ptr -38h
Val		= dword	ptr -34h
Size		= dword	ptr -30h
Str1		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], 1
		jmp	loc_4080F0
; ---------------------------------------------------------------------------

loc_407FF6:				; CODE XREF: sub_407FE4+112j
		mov	[esp+38h+Size],	14h ; Size
		mov	[esp+38h+Val], 0 ; Val
		lea	eax, [ebp+Str1]
		mov	[esp+38h+Dst], eax ; Dst
		call	memset
		mov	eax, [ebp+var_C]
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+arg_8]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+Str1], eax
		mov	eax, [ebp+Str1]
		mov	[esp+38h+Size],	2 ; MaxCount
		mov	[esp+38h+Val], offset asc_4108AE ; "-"
		mov	[esp+38h+Dst], eax ; Str1
		call	wcsncmp
		test	eax, eax
		jz	short loc_408063
		mov	eax, [ebp+Str1]
		mov	[esp+38h+Val], eax
		mov	[esp+38h+Dst], 57Bh
		call	sub_405340
		mov	[esp+38h+Dst], 0 ; Code
		call	exit
; ---------------------------------------------------------------------------

loc_408063:				; CODE XREF: sub_407FE4+5Ej
		mov	eax, [ebp+Str1]
		add	eax, 4
		mov	[ebp+Str1], eax
		mov	[ebp+var_10], 1
		jmp	short loc_4080CA
; ---------------------------------------------------------------------------

loc_408075:				; CODE XREF: sub_407FE4+EAj
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_C]
		add	eax, edx
		cmp	eax, [ebp+arg_4]
		jge	short loc_4080C6
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_C]
		add	eax, edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+arg_8]
		add	eax, edx
		mov	eax, [eax]
		mov	[ebp+var_14], eax
		mov	[esp+38h+Size],	2 ; MaxCount
		mov	[esp+38h+Val], offset asc_4108AE ; "-"
		mov	eax, [ebp+var_14]
		mov	[esp+38h+Dst], eax ; Str1
		call	wcsncmp
		test	eax, eax
		jnz	short loc_4080BC
		jmp	short loc_4080D0
; ---------------------------------------------------------------------------

loc_4080BC:				; CODE XREF: sub_407FE4+D4j
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+var_14]
		mov	[ebp+eax*4+Str1], edx

loc_4080C6:				; CODE XREF: sub_407FE4+9Cj
		add	[ebp+var_10], 1

loc_4080CA:				; CODE XREF: sub_407FE4+8Fj
		cmp	[ebp+var_10], 4
		jle	short loc_408075

loc_4080D0:				; CODE XREF: sub_407FE4+D6j
		lea	eax, [ebp+Str1]
		mov	[esp+38h+Size],	eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+Val], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+Dst], eax
		call	sub_40786C
		mov	[ebp+var_C], eax
		add	[ebp+var_C], 1

loc_4080F0:				; CODE XREF: sub_407FE4+Dj
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+arg_4]
		jl	loc_407FF6
		leave
		retn
sub_407FE4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4080FE(void *)
sub_4080FE	proc near		; CODE XREF: sub_401623+A0p

Dst		= dword	ptr -18h
Val		= dword	ptr -14h
Size		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+Size],	1BA90h ; Size
		mov	[esp+18h+Val], 0 ; Val
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+Dst], eax ; Dst
		call	memset
		leave
		retn
sub_4080FE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_408121	proc near		; CODE XREF: sub_401623+136p

Size		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
Memory		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	[ebp+var_10], 0
		jmp	short loc_40813C
; ---------------------------------------------------------------------------

loc_408136:				; CODE XREF: sub_408121+5Ej
		jmp	short loc_40813C
; ---------------------------------------------------------------------------

loc_408138:				; CODE XREF: sub_408121+25j
		add	[ebp+var_C], 2

loc_40813C:				; CODE XREF: sub_408121+13j
					; sub_408121:loc_408136j
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		cmp	ax, 20h
		jz	short loc_408138
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		test	ax, ax
		jnz	short loc_408155
		jmp	short loc_408181
; ---------------------------------------------------------------------------

loc_408155:				; CODE XREF: sub_408121+30j
		add	[ebp+var_10], 1
		jmp	short loc_40815F
; ---------------------------------------------------------------------------

loc_40815B:				; CODE XREF: sub_408121+53j
		add	[ebp+var_C], 2

loc_40815F:				; CODE XREF: sub_408121+38j
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		test	ax, ax
		jz	short loc_408176
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		cmp	ax, 20h
		jnz	short loc_40815B

loc_408176:				; CODE XREF: sub_408121+47j
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		test	ax, ax
		jnz	short loc_408136

loc_408181:				; CODE XREF: sub_408121+32j
		cmp	[ebp+var_10], 0
		jnz	short loc_40818C
		jmp	locret_40829C
; ---------------------------------------------------------------------------

loc_40818C:				; CODE XREF: sub_408121+64j
		mov	eax, [ebp+var_10]
		shl	eax, 2
		mov	[esp+28h+Size],	eax ; Size
		call	malloc
		mov	[ebp+Memory], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	[ebp+var_10], 0
		jmp	short loc_4081B2
; ---------------------------------------------------------------------------

loc_4081AC:				; CODE XREF: sub_408121+151j
		jmp	short loc_4081B2
; ---------------------------------------------------------------------------

loc_4081AE:				; CODE XREF: sub_408121+9Bj
		add	[ebp+var_C], 2

loc_4081B2:				; CODE XREF: sub_408121+89j
					; sub_408121:loc_4081ACj
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		cmp	ax, 20h
		jz	short loc_4081AE
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		test	ax, ax
		jnz	short loc_4081CE
		jmp	loc_408278
; ---------------------------------------------------------------------------

loc_4081CE:				; CODE XREF: sub_408121+A6j
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		cmp	ax, 22h
		jnz	short loc_408217
		mov	eax, [ebp+var_10]
		lea	edx, [eax+1]
		mov	[ebp+var_10], edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+Memory]
		add	edx, eax
		add	[ebp+var_C], 2
		mov	eax, [ebp+var_C]
		mov	[edx], eax
		jmp	short loc_4081FE
; ---------------------------------------------------------------------------

loc_4081FA:				; CODE XREF: sub_408121+F2j
		add	[ebp+var_C], 2

loc_4081FE:				; CODE XREF: sub_408121+D7j
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		test	ax, ax
		jz	short loc_40824E
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		cmp	ax, 22h
		jnz	short loc_4081FA
		jmp	short loc_40824E
; ---------------------------------------------------------------------------

loc_408217:				; CODE XREF: sub_408121+B7j
		mov	eax, [ebp+var_10]
		lea	edx, [eax+1]
		mov	[ebp+var_10], edx
		lea	edx, ds:0[eax*4]
		mov	eax, [ebp+Memory]
		add	edx, eax
		mov	eax, [ebp+var_C]
		mov	[edx], eax
		jmp	short loc_408237
; ---------------------------------------------------------------------------

loc_408233:				; CODE XREF: sub_408121+12Bj
		add	[ebp+var_C], 2

loc_408237:				; CODE XREF: sub_408121+110j
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		test	ax, ax
		jz	short loc_40824E
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		cmp	ax, 20h
		jnz	short loc_408233

loc_40824E:				; CODE XREF: sub_408121+E6j
					; sub_408121+F4j ...
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		test	ax, ax
		jnz	short loc_40825B
		jmp	short loc_408278
; ---------------------------------------------------------------------------

loc_40825B:				; CODE XREF: sub_408121+136j
		mov	eax, [ebp+var_C]
		lea	edx, [eax+2]
		mov	[ebp+var_C], edx
		mov	word ptr [eax],	0
		mov	eax, [ebp+var_C]
		movzx	eax, word ptr [eax]
		test	ax, ax
		jnz	loc_4081AC

loc_408278:				; CODE XREF: sub_408121+A8j
					; sub_408121+138j
		mov	eax, [ebp+Memory]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Size],	eax
		call	sub_407FE4
		mov	eax, [ebp+Memory]
		mov	[esp+28h+Size],	eax ; Memory
		call	free

locret_40829C:				; CODE XREF: sub_408121+66j
		leave
		retn
sub_408121	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40829E	proc near		; CODE XREF: sub_401972+60p
					; sub_401ADE+39Cp ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+var_8], 0
		mov	[ebp+var_4], 0
		jmp	short loc_4082D1
; ---------------------------------------------------------------------------

loc_4082B4:				; CODE XREF: sub_40829E+3Bj
		mov	eax, [ebp+var_4]
		imul	eax, 894h
		add	eax, offset dword_41328C
		mov	eax, [eax]
		cmp	eax, [ebp+arg_0]
		jnz	short loc_4082CD
		add	[ebp+var_8], 1

loc_4082CD:				; CODE XREF: sub_40829E+29j
		add	[ebp+var_4], 1

loc_4082D1:				; CODE XREF: sub_40829E+14j
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_4]
		jg	short loc_4082B4
		mov	eax, [ebp+var_8]
		leave
		retn
sub_40829E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4082E0	proc near		; CODE XREF: sub_40C2A0+Cp

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+var_4], 0
		jmp	short loc_408320
; ---------------------------------------------------------------------------

loc_4082EF:				; CODE XREF: sub_4082E0+48j
		mov	eax, [ebp+var_4]
		imul	eax, 894h
		add	eax, offset dword_41329C
		mov	eax, [eax]
		cmp	eax, [ebp+arg_0]
		jnz	short loc_40831C
		mov	eax, [ebp+var_4]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		jmp	short locret_40832F
; ---------------------------------------------------------------------------

loc_40831C:				; CODE XREF: sub_4082E0+22j
		add	[ebp+var_4], 1

loc_408320:				; CODE XREF: sub_4082E0+Dj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_4]
		jg	short loc_4082EF
		mov	eax, 0

locret_40832F:				; CODE XREF: sub_4082E0+3Aj
		leave
		retn
sub_4082E0	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_408334(BYTE *pbBuffer, DWORD dwLen)
sub_408334	proc near		; CODE XREF: sub_403F71+1ACp

phProv		= dword	ptr -38h
szContainer	= dword	ptr -34h
szProvider	= dword	ptr -30h
dwProvType	= dword	ptr -2Ch
dwFlags		= dword	ptr -28h
hProv		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
pbBuffer	= dword	ptr  8
dwLen		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], 0
		mov	[esp+38h+dwFlags], 0F0000000h ;	dwFlags
		mov	[esp+38h+dwProvType], 3	; dwProvType
		mov	[esp+38h+szProvider], 0	; szProvider
		mov	[esp+38h+szContainer], 0 ; szContainer
		lea	eax, [ebp+hProv]
		mov	[esp+38h+phProv], eax ;	phProv
		mov	eax, ds:CryptAcquireContextW
		call	eax ; CryptAcquireContextW
		sub	esp, 14h
		test	eax, eax
		jnz	short loc_40837C
		mov	eax, 0
		jmp	short locret_4083F2
; ---------------------------------------------------------------------------

loc_40837C:				; CODE XREF: sub_408334+3Fj
		mov	eax, [ebp+hProv]
		mov	edx, [ebp+pbBuffer]
		mov	[esp+38h+szProvider], edx ; pbBuffer
		mov	edx, [ebp+dwLen]
		mov	[esp+38h+szContainer], edx ; dwLen
		mov	[esp+38h+phProv], eax ;	hProv
		mov	eax, ds:CryptGenRandom
		call	eax ; CryptGenRandom
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_4083A0
		jmp	short loc_4083D7
; ---------------------------------------------------------------------------

loc_4083A0:				; CODE XREF: sub_408334+68j
		mov	[ebp+var_10], 0
		jmp	short loc_4083C8
; ---------------------------------------------------------------------------

loc_4083A9:				; CODE XREF: sub_408334+9Aj
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+pbBuffer]
		add	edx, eax
		mov	eax, [ebp+var_10]
		mov	ecx, [ebp+pbBuffer]
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		and	eax, 5Dh
		add	eax, 21h
		mov	[edx], al
		add	[ebp+var_10], 1

loc_4083C8:				; CODE XREF: sub_408334+73j
		mov	eax, [ebp+var_10]
		cmp	eax, [ebp+dwLen]
		jb	short loc_4083A9
		mov	[ebp+var_C], 1

loc_4083D7:				; CODE XREF: sub_408334+6Aj
		mov	eax, [ebp+hProv]
		mov	[esp+38h+szContainer], 0 ; dwFlags
		mov	[esp+38h+phProv], eax ;	hProv
		mov	eax, ds:CryptReleaseContext
		call	eax ; CryptReleaseContext
		sub	esp, 8
		mov	eax, [ebp+var_C]

locret_4083F2:				; CODE XREF: sub_408334+46j
		leave
		retn
sub_408334	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4083F4(HWND)
sub_4083F4	proc near		; CODE XREF: sub_408B8B+C7p

hDlg		= dword	ptr -0E8h
nIDDlgItem	= dword	ptr -0E4h
lpString	= dword	ptr -0E0h
cchMax		= dword	ptr -0DCh
Str2		= word ptr -0D0h
String		= word ptr -6Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		mov	[esp+0E8h+cchMax], 31h ; cchMax
		lea	eax, [ebp+String]
		mov	[esp+0E8h+lpString], eax ; lpString
		mov	[esp+0E8h+nIDDlgItem], 0AFh ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+0E8h+hDlg], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+0E8h+cchMax], 31h ; cchMax
		lea	eax, [ebp+Str2]
		mov	[esp+0E8h+lpString], eax ; lpString
		mov	[esp+0E8h+nIDDlgItem], 0B0h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+0E8h+hDlg], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+0E8h+lpString], 32h ; MaxCount
		lea	eax, [ebp+Str2]
		mov	[esp+0E8h+nIDDlgItem], eax ; Str2
		lea	eax, [ebp+String]
		mov	[esp+0E8h+hDlg], eax ; Str1
		call	wcsncmp
		test	eax, eax
		jnz	short loc_408476
		mov	eax, 1
		jmp	short locret_40847B
; ---------------------------------------------------------------------------

loc_408476:				; CODE XREF: sub_4083F4+79j
		mov	eax, 0

locret_40847B:				; CODE XREF: sub_4083F4+80j
		leave
		retn
sub_4083F4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40847D(HWND)
sub_40847D	proc near		; CODE XREF: sub_408B8B+E7p
					; sub_408B8B+115p

hDlg		= dword	ptr -88h
nIDDlgItem	= dword	ptr -84h
lpString	= dword	ptr -80h
cchMax		= dword	ptr -7Ch
String		= word ptr -6Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		mov	[esp+88h+cchMax], 31h ;	cchMax
		lea	eax, [ebp+String]
		mov	[esp+88h+lpString], eax	; lpString
		mov	[esp+88h+nIDDlgItem], 0AFh ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		lea	eax, [ebp+String]
		mov	[esp+88h+hDlg],	eax ; Str
		call	wcslen
		leave
		retn
sub_40847D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4084BA(wchar_t *, int, int)
sub_4084BA	proc near		; CODE XREF: sub_40856A+A3p
					; sub_40856A+C3p ...

Str		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_14], 0
		mov	[ebp+var_C], 0
		jmp	short loc_408530
; ---------------------------------------------------------------------------

loc_4084D0:				; CODE XREF: sub_4084BA+8Fj
		mov	[ebp+var_10], 0
		jmp	short loc_408516
; ---------------------------------------------------------------------------

loc_4084D9:				; CODE XREF: sub_4084BA+63j
		cmp	[ebp+var_10], 100h
		jnz	short loc_4084F2
		mov	[ebp+var_14], 1
		mov	[ebp+var_10], 2Eh
		jmp	short loc_40851F
; ---------------------------------------------------------------------------

loc_4084F2:				; CODE XREF: sub_4084BA+26j
		mov	eax, [ebp+var_C]
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		movzx	edx, word ptr [eax]
		mov	eax, [ebp+var_10]
		movzx	eax, word_40F040[eax+eax]
		cmp	dx, ax
		jnz	short loc_408512
		jmp	short loc_40851F
; ---------------------------------------------------------------------------

loc_408512:				; CODE XREF: sub_4084BA+54j
		add	[ebp+var_10], 1

loc_408516:				; CODE XREF: sub_4084BA+1Dj
		cmp	[ebp+var_10], 100h
		jbe	short loc_4084D9

loc_40851F:				; CODE XREF: sub_4084BA+36j
					; sub_4084BA+56j
		mov	eax, [ebp+var_C]
		mov	edx, [ebp+arg_4]
		add	edx, eax
		mov	eax, [ebp+var_10]
		mov	[edx], al
		add	[ebp+var_C], 1

loc_408530:				; CODE XREF: sub_4084BA+14j
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Str], eax ; Str
		call	wcslen
		cmp	eax, [ebp+var_C]
		jbe	short loc_40854B
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		cmp	eax, [ebp+var_C]
		ja	short loc_4084D0

loc_40854B:				; CODE XREF: sub_4084BA+84j
		mov	eax, [ebp+var_C]
		mov	edx, [ebp+arg_4]
		add	eax, edx
		mov	byte ptr [eax],	0
		cmp	[ebp+var_14], 0
		jz	short loc_408563
		mov	eax, 0
		jmp	short locret_408568
; ---------------------------------------------------------------------------

loc_408563:				; CODE XREF: sub_4084BA+A0j
		mov	eax, 1

locret_408568:				; CODE XREF: sub_4084BA+A7j
		leave
		retn
sub_4084BA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40856A(HWND)
sub_40856A	proc near		; CODE XREF: sub_408B8B+1ABp

hDlg		= dword	ptr -368h
nIDDlgItem	= dword	ptr -364h
lpString	= dword	ptr -360h
cchMax		= dword	ptr -35Ch
var_358		= dword	ptr -358h
var_354		= dword	ptr -354h
var_350		= dword	ptr -350h
var_344		= word ptr -344h
var_2E0		= word ptr -2E0h
Str		= byte ptr -27Ch
var_24A		= dword	ptr -24Ah
String		= word ptr -218h
File		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 364h
		mov	[esp+368h+cchMax], 103h	; cchMax
		lea	eax, [ebp+String]
		mov	[esp+368h+lpString], eax ; lpString
		mov	[esp+368h+nIDDlgItem], 0B1h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+368h+hDlg], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+368h+cchMax], 31h ; cchMax
		lea	eax, [ebp+var_2E0]
		mov	[esp+368h+lpString], eax ; lpString
		mov	[esp+368h+nIDDlgItem], 0AEh ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+368h+hDlg], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+368h+cchMax], 31h ; cchMax
		lea	eax, [ebp+var_344]
		mov	[esp+368h+lpString], eax ; lpString
		mov	[esp+368h+nIDDlgItem], 0AFh ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+368h+hDlg], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+368h+lpString], 32h ; int
		lea	eax, [ebp+var_24A]
		mov	[esp+368h+nIDDlgItem], eax ; int
		lea	eax, [ebp+var_2E0]
		mov	[esp+368h+hDlg], eax ; wchar_t *
		call	sub_4084BA
		mov	[esp+368h+lpString], 32h ; int
		lea	eax, [ebp+Str]
		mov	[esp+368h+nIDDlgItem], eax ; int
		lea	eax, [ebp+var_344]
		mov	[esp+368h+hDlg], eax ; wchar_t *
		call	sub_4084BA
		test	eax, eax
		jnz	short loc_40864C
		mov	[esp+368h+hDlg], 5F4h
		call	sub_405340
		mov	eax, 0FFFFFFFFh
		jmp	loc_408867
; ---------------------------------------------------------------------------

loc_40864C:				; CODE XREF: sub_40856A+CAj
		call	EVP_PKEY_new
		mov	[ebp+var_C], eax
		mov	[esp+368h+nIDDlgItem], offset Mode ; Mode
		lea	eax, [ebp+String]
		mov	[esp+368h+hDlg], eax ; Filename
		mov	eax, ds:_wfopen
		call	eax ; _wfopen
		mov	[ebp+File], eax
		cmp	[ebp+File], 0
		jnz	short loc_408695
		lea	eax, [ebp+String]
		mov	[esp+368h+nIDDlgItem], eax
		mov	[esp+368h+hDlg], 5E3h
		call	sub_405340
		mov	eax, 0
		jmp	loc_408867
; ---------------------------------------------------------------------------

loc_408695:				; CODE XREF: sub_40856A+109j
		lea	eax, [ebp+var_24A]
		mov	[esp+368h+cchMax], eax
		mov	[esp+368h+lpString], 0
		mov	[esp+368h+nIDDlgItem], 0
		mov	eax, [ebp+File]
		mov	[esp+368h+hDlg], eax
		call	PEM_read_PrivateKey
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_4086E4
		mov	[esp+368h+hDlg], 5E4h
		call	sub_405340
		mov	eax, [ebp+File]
		mov	[esp+368h+hDlg], eax ; File
		call	fclose
		mov	eax, 0FFFFFFFFh
		jmp	loc_408867
; ---------------------------------------------------------------------------

loc_4086E4:				; CODE XREF: sub_40856A+157j
		mov	eax, [ebp+File]
		mov	[esp+368h+hDlg], eax ; File
		call	fclose
		mov	[esp+368h+nIDDlgItem], offset word_4108C4 ; Mode
		lea	eax, [ebp+String]
		mov	[esp+368h+hDlg], eax ; Filename
		mov	eax, ds:_wfopen
		call	eax ; _wfopen
		mov	[ebp+File], eax
		cmp	[ebp+File], 0
		jnz	short loc_40873B
		lea	eax, [ebp+String]
		mov	[esp+368h+nIDDlgItem], eax
		mov	[esp+368h+hDlg], 5E5h
		call	sub_405340
		mov	eax, [ebp+var_C]
		mov	[esp+368h+hDlg], eax
		call	EVP_PKEY_free
		mov	eax, 0
		jmp	loc_408867
; ---------------------------------------------------------------------------

loc_40873B:				; CODE XREF: sub_40856A+1A4j
		lea	eax, [ebp+Str]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_4087C0
		mov	[esp+368h+var_350], 0
		mov	[esp+368h+var_354], 0
		mov	[esp+368h+var_358], 0
		mov	[esp+368h+cchMax], 0
		mov	[esp+368h+lpString], 0
		mov	eax, [ebp+var_C]
		mov	[esp+368h+nIDDlgItem], eax
		mov	eax, [ebp+File]
		mov	[esp+368h+hDlg], eax
		call	PEM_write_PrivateKey
		test	eax, eax
		jnz	loc_408840
		lea	eax, [ebp+String]
		mov	[esp+368h+nIDDlgItem], eax
		mov	[esp+368h+hDlg], 5E6h
		call	sub_405340
		mov	eax, [ebp+var_C]
		mov	[esp+368h+hDlg], eax
		call	EVP_PKEY_free
		mov	eax, [ebp+File]
		mov	[esp+368h+hDlg], eax ; File
		call	fclose
		mov	eax, 0
		jmp	loc_408867
; ---------------------------------------------------------------------------

loc_4087C0:				; CODE XREF: sub_40856A+1DCj
		lea	eax, [ebp+Str]
		mov	[esp+368h+hDlg], eax ; Str
		call	strlen
		mov	ebx, eax
		call	EVP_des_ede3_cbc
		mov	[esp+368h+var_350], 0
		mov	[esp+368h+var_354], 0
		mov	[esp+368h+var_358], ebx
		lea	edx, [ebp+Str]
		mov	[esp+368h+cchMax], edx
		mov	[esp+368h+lpString], eax
		mov	eax, [ebp+var_C]
		mov	[esp+368h+nIDDlgItem], eax
		mov	eax, [ebp+File]
		mov	[esp+368h+hDlg], eax
		call	PEM_write_PrivateKey
		test	eax, eax
		jnz	short loc_408840
		lea	eax, [ebp+String]
		mov	[esp+368h+nIDDlgItem], eax
		mov	[esp+368h+hDlg], 5E6h
		call	sub_405340
		mov	eax, [ebp+var_C]
		mov	[esp+368h+hDlg], eax
		call	EVP_PKEY_free
		mov	eax, [ebp+File]
		mov	[esp+368h+hDlg], eax ; File
		call	fclose
		mov	eax, 0
		jmp	short loc_408867
; ---------------------------------------------------------------------------

loc_408840:				; CODE XREF: sub_40856A+21Aj
					; sub_40856A+2A1j
		mov	eax, [ebp+var_C]
		mov	[esp+368h+hDlg], eax
		call	EVP_PKEY_free
		mov	eax, [ebp+File]
		mov	[esp+368h+hDlg], eax ; File
		call	fclose
		mov	[esp+368h+hDlg], 5E7h
		call	sub_405340
		mov	eax, 1

loc_408867:				; CODE XREF: sub_40856A+DDj
					; sub_40856A+126j ...
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_40856A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40886C(HWND)
sub_40886C	proc near		; CODE XREF: sub_408B8B+1C7p

hDlg		= dword	ptr -388h
nIDDlgItem	= dword	ptr -384h
lpString	= dword	ptr -380h
cchMax		= dword	ptr -37Ch
var_378		= dword	ptr -378h
var_374		= dword	ptr -374h
var_370		= dword	ptr -370h
var_36C		= dword	ptr -36Ch
var_368		= dword	ptr -368h
var_364		= dword	ptr -364h
var_354		= dword	ptr -354h
var_350		= dword	ptr -350h
var_34C		= dword	ptr -34Ch
var_348		= word ptr -348h
var_2E4		= word ptr -2E4h
var_280		= dword	ptr -280h
var_24E		= dword	ptr -24Eh
String		= word ptr -21Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
File		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 388h
		mov	[ebp+var_354], 0
		mov	[esp+388h+cchMax], 103h	; cchMax
		lea	eax, [ebp+String]
		mov	[esp+388h+lpString], eax ; lpString
		mov	[esp+388h+nIDDlgItem], 0B1h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+388h+hDlg], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+388h+cchMax], 31h ; cchMax
		lea	eax, [ebp+var_2E4]
		mov	[esp+388h+lpString], eax ; lpString
		mov	[esp+388h+nIDDlgItem], 0AEh ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+388h+hDlg], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+388h+cchMax], 31h ; cchMax
		lea	eax, [ebp+var_348]
		mov	[esp+388h+lpString], eax ; lpString
		mov	[esp+388h+nIDDlgItem], 0AFh ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+388h+hDlg], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+388h+lpString], 32h ; int
		lea	eax, [ebp+var_24E]
		mov	[esp+388h+nIDDlgItem], eax ; int
		lea	eax, [ebp+var_2E4]
		mov	[esp+388h+hDlg], eax ; wchar_t *
		call	sub_4084BA
		mov	[esp+388h+lpString], 32h ; int
		lea	eax, [ebp+var_280]
		mov	[esp+388h+nIDDlgItem], eax ; int
		lea	eax, [ebp+var_348]
		mov	[esp+388h+hDlg], eax ; wchar_t *
		call	sub_4084BA
		test	eax, eax
		jnz	short loc_408957
		mov	[esp+388h+hDlg], 5F4h
		call	sub_405340
		mov	eax, 0FFFFFFFFh
		jmp	locret_408B89
; ---------------------------------------------------------------------------

loc_408957:				; CODE XREF: sub_40886C+D3j
		mov	[esp+388h+nIDDlgItem], offset aRb ; "rb"
		lea	eax, [ebp+String]
		mov	[esp+388h+hDlg], eax ; Filename
		mov	eax, ds:_wfopen
		call	eax ; _wfopen
		mov	[ebp+File], eax
		cmp	[ebp+File], 0
		jnz	short loc_408998
		lea	eax, [ebp+String]
		mov	[esp+388h+nIDDlgItem], eax
		mov	[esp+388h+hDlg], 5E3h
		call	sub_405340
		mov	eax, 0
		jmp	locret_408B89
; ---------------------------------------------------------------------------

loc_408998:				; CODE XREF: sub_40886C+10Aj
		mov	[esp+388h+nIDDlgItem], 0
		mov	eax, [ebp+File]
		mov	[esp+388h+hDlg], eax
		call	d2i_PKCS12_fp
		mov	[ebp+var_10], eax
		mov	eax, [ebp+File]
		mov	[esp+388h+hDlg], eax ; File
		call	fclose
		cmp	[ebp+var_10], 0
		jnz	short loc_4089DF
		lea	eax, [ebp+String]
		mov	[esp+388h+nIDDlgItem], eax
		mov	[esp+388h+hDlg], 5E8h
		call	sub_405340
		mov	eax, 0
		jmp	locret_408B89
; ---------------------------------------------------------------------------

loc_4089DF:				; CODE XREF: sub_40886C+151j
		lea	eax, [ebp+var_354]
		mov	[esp+388h+var_378], eax
		lea	eax, [ebp+var_350]
		mov	[esp+388h+cchMax], eax
		lea	eax, [ebp+var_34C]
		mov	[esp+388h+lpString], eax
		lea	eax, [ebp+var_24E]
		mov	[esp+388h+nIDDlgItem], eax
		mov	eax, [ebp+var_10]
		mov	[esp+388h+hDlg], eax
		call	PKCS12_parse
		test	eax, eax
		jnz	short loc_408A37
		mov	[esp+388h+hDlg], 5E4h
		call	sub_405340
		mov	eax, [ebp+var_10]
		mov	[esp+388h+hDlg], eax
		call	PKCS12_free
		mov	eax, 0FFFFFFFFh
		jmp	locret_408B89
; ---------------------------------------------------------------------------

loc_408A37:				; CODE XREF: sub_40886C+1A8j
		mov	eax, [ebp+var_10]
		mov	[esp+388h+hDlg], eax
		call	PKCS12_free
		mov	eax, [ebp+var_350]
		mov	[esp+388h+nIDDlgItem], 0
		mov	[esp+388h+hDlg], eax
		call	X509_alias_get0
		mov	[ebp+var_14], eax
		mov	ecx, [ebp+var_354]
		mov	edx, [ebp+var_350]
		mov	eax, [ebp+var_34C]
		mov	[esp+388h+var_364], 0
		mov	[esp+388h+var_368], 0
		mov	[esp+388h+var_36C], 0
		mov	[esp+388h+var_370], 0
		mov	[esp+388h+var_374], 0
		mov	[esp+388h+var_378], ecx
		mov	[esp+388h+cchMax], edx
		mov	[esp+388h+lpString], eax
		mov	eax, [ebp+var_14]
		mov	[esp+388h+nIDDlgItem], eax
		lea	eax, [ebp+var_280]
		mov	[esp+388h+hDlg], eax
		call	PKCS12_create
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_408AD5
		mov	[esp+388h+hDlg], 5E9h
		call	sub_405340
		mov	eax, 0
		jmp	locret_408B89
; ---------------------------------------------------------------------------

loc_408AD5:				; CODE XREF: sub_40886C+251j
		mov	eax, [ebp+var_34C]
		mov	[esp+388h+hDlg], eax
		call	EVP_PKEY_free
		mov	eax, [ebp+var_350]
		mov	[esp+388h+hDlg], eax
		call	X509_free
		mov	eax, [ebp+var_354]
		mov	[esp+388h+nIDDlgItem], offset X509_free
		mov	[esp+388h+hDlg], eax
		call	sk_pop_free
		mov	[esp+388h+nIDDlgItem], offset aW ; "w"
		lea	eax, [ebp+String]
		mov	[esp+388h+hDlg], eax ; Filename
		mov	eax, ds:_wfopen
		call	eax ; _wfopen
		mov	[ebp+File], eax
		cmp	[ebp+File], 0
		jnz	short loc_408B50
		lea	eax, [ebp+String]
		mov	[esp+388h+nIDDlgItem], eax
		mov	[esp+388h+hDlg], 5E5h
		call	sub_405340
		mov	eax, [ebp+var_10]
		mov	[esp+388h+hDlg], eax
		call	PKCS12_free
		mov	eax, 0
		jmp	short locret_408B89
; ---------------------------------------------------------------------------

loc_408B50:				; CODE XREF: sub_40886C+2BAj
		mov	eax, [ebp+var_10]
		mov	[esp+388h+nIDDlgItem], eax
		mov	eax, [ebp+File]
		mov	[esp+388h+hDlg], eax
		call	i2d_PKCS12_fp
		mov	eax, [ebp+var_10]
		mov	[esp+388h+hDlg], eax
		call	PKCS12_free
		mov	eax, [ebp+File]
		mov	[esp+388h+hDlg], eax ; File
		call	fclose
		mov	[esp+388h+hDlg], 5E7h
		call	sub_405340
		mov	eax, 1

locret_408B89:				; CODE XREF: sub_40886C+E6j
					; sub_40886C+127j ...
		leave
		retn
sub_40886C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_408B8B(HWND	hDlg, UINT, WPARAM, int)
sub_408B8B	proc near		; DATA XREF: sub_4094D5:loc_409572o

hWnd		= dword	ptr -238h
Msg		= dword	ptr -234h
wParam		= dword	ptr -230h
lParam		= dword	ptr -22Ch
Translated	= dword	ptr -21Ch
String		= word ptr -218h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
hDlg		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 238h
		mov	eax, [ebp+arg_4]
		cmp	eax, 10h
		jz	loc_408DA2
		cmp	eax, 10h
		ja	short loc_408BB3
		cmp	eax, 2
		jz	loc_408D8F
		jmp	loc_408DB9
; ---------------------------------------------------------------------------

loc_408BB3:				; CODE XREF: sub_408B8B+18j
		cmp	eax, 110h
		jz	short loc_408BC6
		cmp	eax, 111h
		jz	short loc_408C33
		jmp	loc_408DB9
; ---------------------------------------------------------------------------

loc_408BC6:				; CODE XREF: sub_408B8B+2Dj
		mov	[esp+238h+hWnd], 5Ah
		call	sub_405370
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_408C29
		mov	eax, [ebp+var_C]
		mov	[esp+238h+lParam], eax ; lParam
		mov	[esp+238h+wParam], 0 ; wParam
		mov	[esp+238h+Msg],	80h ; Msg
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	eax, [ebp+var_C]
		mov	[esp+238h+lParam], eax ; lParam
		mov	[esp+238h+wParam], 1 ; wParam
		mov	[esp+238h+Msg],	80h ; Msg
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h

loc_408C29:				; CODE XREF: sub_408B8B+4Ej
		mov	eax, 0
		jmp	locret_408DBE
; ---------------------------------------------------------------------------

loc_408C33:				; CODE XREF: sub_408B8B+34j
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		cmp	eax, 1
		jz	short loc_408C4C
		cmp	eax, 2
		jz	loc_408D7C
		jmp	loc_408DB9
; ---------------------------------------------------------------------------

loc_408C4C:				; CODE XREF: sub_408B8B+B1j
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; HWND
		call	sub_4083F4
		test	eax, eax
		jnz	short loc_408C6C
		mov	[esp+238h+hWnd], 5DFh
		call	sub_405340
		jmp	loc_408D8D
; ---------------------------------------------------------------------------

loc_408C6C:				; CODE XREF: sub_408B8B+CEj
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; HWND
		call	sub_40847D
		mov	edx, 8
		cmp	eax, edx
		jge	short loc_408C9A
		mov	eax, 8
		mov	[esp+238h+Msg],	eax
		mov	[esp+238h+hWnd], 5E0h
		call	sub_405340
		jmp	loc_408D8D
; ---------------------------------------------------------------------------

loc_408C9A:				; CODE XREF: sub_408B8B+F3j
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; HWND
		call	sub_40847D
		test	eax, eax
		jnz	short loc_408CCF
		mov	[esp+238h+wParam], 5E1h	; int
		mov	[esp+238h+Msg],	offset aOpenvpnGui_1 ; "OpenVPN	GUI"
		mov	[esp+238h+hWnd], 4 ; int
		call	sub_40530C
		cmp	eax, 7
		jnz	short loc_408CCF
		jmp	loc_408D8D
; ---------------------------------------------------------------------------

loc_408CCF:				; CODE XREF: sub_408B8B+11Cj
					; sub_408B8B+13Dj
		mov	[esp+238h+lParam], 103h	; cchMax
		lea	eax, [ebp+String]
		mov	[esp+238h+wParam], eax ; lpString
		mov	[esp+238h+Msg],	0B1h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+238h+lParam], 0 ; bSigned
		lea	eax, [ebp+Translated]
		mov	[esp+238h+wParam], eax ; lpTranslated
		mov	[esp+238h+Msg],	0B2h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; hDlg
		mov	eax, ds:GetDlgItemInt
		call	eax ; GetDlgItemInt
		sub	esp, 10h
		mov	[ebp+var_10], eax
		mov	eax, 2
		cmp	[ebp+var_10], eax
		jnz	short loc_408D42
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; HWND
		call	sub_40856A
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_408D6A
		jmp	short loc_408D8D
; ---------------------------------------------------------------------------

loc_408D42:				; CODE XREF: sub_408B8B+1A3j
		mov	eax, 1
		cmp	[ebp+var_10], eax
		jnz	short loc_408D5E
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; HWND
		call	sub_40886C
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_408D6A
		jmp	short loc_408D8D
; ---------------------------------------------------------------------------

loc_408D5E:				; CODE XREF: sub_408B8B+1BFj
		mov	[esp+238h+hWnd], 5E2h
		call	sub_405340

loc_408D6A:				; CODE XREF: sub_408B8B+1B3j
					; sub_408B8B+1CFj
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; hWnd
		mov	eax, ds:DestroyWindow
		call	eax ; DestroyWindow
		sub	esp, 4
		jmp	short loc_408D8D
; ---------------------------------------------------------------------------

loc_408D7C:				; CODE XREF: sub_408B8B+B6j
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; hWnd
		mov	eax, ds:DestroyWindow
		call	eax ; DestroyWindow
		sub	esp, 4
		nop

loc_408D8D:				; CODE XREF: sub_408B8B+DCj
					; sub_408B8B+10Aj ...
		jmp	short loc_408DB9
; ---------------------------------------------------------------------------

loc_408D8F:				; CODE XREF: sub_408B8B+1Dj
		mov	[esp+238h+hWnd], 0 ; nExitCode
		mov	eax, ds:PostQuitMessage
		call	eax ; PostQuitMessage
		sub	esp, 4
		jmp	short loc_408DB9
; ---------------------------------------------------------------------------

loc_408DA2:				; CODE XREF: sub_408B8B+Fj
		mov	eax, [ebp+hDlg]
		mov	[esp+238h+hWnd], eax ; hWnd
		mov	eax, ds:DestroyWindow
		call	eax ; DestroyWindow
		sub	esp, 4
		mov	eax, 0
		jmp	short locret_408DBE
; ---------------------------------------------------------------------------

loc_408DB9:				; CODE XREF: sub_408B8B+23j
					; sub_408B8B+36j ...
		mov	eax, 0

locret_408DBE:				; CODE XREF: sub_408B8B+A3j
					; sub_408B8B+22Cj
		leave
		retn	10h
sub_408B8B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_408DC2(char *, char *, size_t)
sub_408DC2	proc near		; CODE XREF: sub_40926D+FBp
					; sub_40926D+19Ap

Str1		= dword	ptr -18h
Str2		= dword	ptr -14h
MaxCount	= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+MaxCount], eax	; MaxCount
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+Str2],	eax ; Str2
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+Str1],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_408E0A
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 9
		jz	short loc_408E03
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 20h
		jnz	short loc_408E0A

loc_408E03:				; CODE XREF: sub_408DC2+30j
		mov	eax, 1
		jmp	short locret_408E0F
; ---------------------------------------------------------------------------

loc_408E0A:				; CODE XREF: sub_408DC2+21j
					; sub_408DC2+3Fj
		mov	eax, 0

locret_408E0F:				; CODE XREF: sub_408DC2+46j
		leave
		retn
sub_408DC2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_408E11(int, wchar_t *, int, int)
sub_408E11	proc near		; CODE XREF: sub_40926D+16Ep
					; sub_40926D+20Dp

Dest		= dword	ptr -248h
Source		= dword	ptr -244h
Count		= dword	ptr -240h
Str		= word ptr -22Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 248h
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 1
		mov	[ebp+var_24], 2
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_14], eax
		mov	[ebp+var_18], 0
		jmp	loc_40916A
; ---------------------------------------------------------------------------

loc_408E4F:				; CODE XREF: sub_408E11+366j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_1C]
		jnz	loc_408F74
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 22h
		jnz	short loc_408E75
		mov	eax, [ebp+var_20]
		mov	[ebp+var_14], eax
		jmp	loc_409145
; ---------------------------------------------------------------------------

loc_408E75:				; CODE XREF: sub_408E11+57j
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 0Ah
		jz	loc_40917D
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 0Dh
		jz	loc_40917D
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 3Bh
		jz	loc_40917D
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 23h
		jz	loc_40917D
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 20h
		jz	loc_409145
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 9
		jz	loc_409145
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 5Ch
		jnz	short loc_408F3B
		cmp	[ebp+var_18], 0
		jnz	short loc_408F2F
		mov	eax, [ebp+var_10]
		lea	edx, [eax+1]
		mov	[ebp+var_10], edx
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_4]
		add	edx, eax
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		cbw
		mov	[edx], ax
		mov	eax, [ebp+var_24]
		mov	[ebp+var_14], eax
		mov	[ebp+var_18], 1
		jmp	loc_409145
; ---------------------------------------------------------------------------

loc_408F2F:				; CODE XREF: sub_408E11+E9j
		mov	[ebp+var_18], 0
		jmp	loc_409145
; ---------------------------------------------------------------------------

loc_408F3B:				; CODE XREF: sub_408E11+E3j
		cmp	[ebp+var_18], 0
		jz	short loc_408F48
		mov	[ebp+var_18], 0

loc_408F48:				; CODE XREF: sub_408E11+12Ej
		mov	eax, [ebp+var_10]
		lea	edx, [eax+1]
		mov	[ebp+var_10], edx
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_4]
		add	edx, eax
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		cbw
		mov	[edx], ax
		mov	eax, [ebp+var_24]
		mov	[ebp+var_14], eax
		jmp	loc_409145
; ---------------------------------------------------------------------------

loc_408F74:				; CODE XREF: sub_408E11+44j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_20]
		jnz	loc_40903B
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 22h
		jnz	short loc_408F94
		jmp	loc_40917D
; ---------------------------------------------------------------------------

loc_408F94:				; CODE XREF: sub_408E11+17Cj
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 0Ah
		jz	loc_40917D
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 0Dh
		jz	loc_40917D
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 5Ch
		jnz	short loc_409008
		cmp	[ebp+var_18], 0
		jnz	short loc_408FFC
		mov	eax, [ebp+var_10]
		lea	edx, [eax+1]
		mov	[ebp+var_10], edx
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_4]
		add	edx, eax
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		cbw
		mov	[edx], ax
		mov	[ebp+var_18], 1
		jmp	loc_409145
; ---------------------------------------------------------------------------

loc_408FFC:				; CODE XREF: sub_408E11+1BCj
		mov	[ebp+var_18], 0
		jmp	loc_409145
; ---------------------------------------------------------------------------

loc_409008:				; CODE XREF: sub_408E11+1B6j
		cmp	[ebp+var_18], 0
		jz	short loc_409015
		mov	[ebp+var_18], 0

loc_409015:				; CODE XREF: sub_408E11+1FBj
		mov	eax, [ebp+var_10]
		lea	edx, [eax+1]
		mov	[ebp+var_10], edx
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_4]
		add	edx, eax
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		cbw
		mov	[edx], ax
		jmp	loc_409145
; ---------------------------------------------------------------------------

loc_40903B:				; CODE XREF: sub_408E11+169j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_24]
		jnz	loc_409145
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 22h
		jnz	short loc_40905B
		jmp	loc_40917D
; ---------------------------------------------------------------------------

loc_40905B:				; CODE XREF: sub_408E11+243j
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 0Ah
		jz	loc_40917D
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 0Dh
		jz	loc_40917D
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 3Bh
		jz	loc_40917D
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 23h
		jz	loc_40917D
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 20h
		jnz	short loc_4090BB
		jmp	loc_40917D
; ---------------------------------------------------------------------------

loc_4090BB:				; CODE XREF: sub_408E11+2A3j
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 9
		jnz	short loc_4090CF
		jmp	loc_40917D
; ---------------------------------------------------------------------------

loc_4090CF:				; CODE XREF: sub_408E11+2B7j
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 5Ch
		jnz	short loc_409117
		cmp	[ebp+var_18], 0
		jnz	short loc_40910E
		mov	eax, [ebp+var_10]
		lea	edx, [eax+1]
		mov	[ebp+var_10], edx
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_4]
		add	edx, eax
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		cbw
		mov	[edx], ax
		mov	[ebp+var_18], 1
		jmp	short loc_409145
; ---------------------------------------------------------------------------

loc_40910E:				; CODE XREF: sub_408E11+2D1j
		mov	[ebp+var_18], 0
		jmp	short loc_409145
; ---------------------------------------------------------------------------

loc_409117:				; CODE XREF: sub_408E11+2CBj
		cmp	[ebp+var_18], 0
		jz	short loc_409124
		mov	[ebp+var_18], 0

loc_409124:				; CODE XREF: sub_408E11+30Aj
		mov	eax, [ebp+var_10]
		lea	edx, [eax+1]
		mov	[ebp+var_10], edx
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_4]
		add	edx, eax
		mov	ecx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		cbw
		mov	[edx], ax

loc_409145:				; CODE XREF: sub_408E11+5Fj
					; sub_408E11+BDj ...
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		cmp	eax, [ebp+var_10]
		ja	short loc_409166
		mov	[esp+248h+Dest], 5EFh
		call	sub_405340
		mov	eax, 0
		jmp	locret_40926B
; ---------------------------------------------------------------------------

loc_409166:				; CODE XREF: sub_408E11+33Dj
		add	[ebp+var_C], 1

loc_40916A:				; CODE XREF: sub_408E11+39j
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+arg_C]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_408E4F

loc_40917D:				; CODE XREF: sub_408E11+71j
					; sub_408E11+84j ...
		mov	eax, [ebp+var_10]
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_4]
		add	eax, edx
		mov	word ptr [eax],	0
		mov	eax, [ebp+arg_4]
		movzx	eax, word ptr [eax]
		cmp	ax, 5Ch
		jz	loc_409266
		mov	eax, [ebp+arg_4]
		movzx	eax, word ptr [eax]
		cmp	ax, 2Fh
		jz	loc_409266
		mov	eax, [ebp+arg_4]
		add	eax, 2
		movzx	eax, word ptr [eax]
		cmp	ax, 3Ah
		jz	loc_409266
		mov	eax, [ebp+arg_0]
		add	eax, 410h
		mov	[esp+248h+Count], 104h ; Count
		mov	[esp+248h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+248h+Dest], eax ; Dest
		call	wcsncpy
		lea	eax, [ebp+Str]
		mov	[esp+248h+Dest], eax ; Str
		call	wcslen
		sub	eax, 1
		movzx	eax, [ebp+eax*2+Str]
		cmp	ax, 5Ch
		jz	short loc_409217
		mov	[esp+248h+Source], offset Source ; "\\"
		lea	eax, [ebp+Str]
		mov	[esp+248h+Dest], eax ; Dest
		call	wcscat

loc_409217:				; CODE XREF: sub_408E11+3EEj
		lea	eax, [ebp+Str]
		mov	[esp+248h+Dest], eax ; Str
		call	wcslen
		mov	edx, 103h
		sub	edx, eax
		mov	eax, edx
		mov	[esp+248h+Count], eax ;	Count
		mov	eax, [ebp+arg_4]
		mov	[esp+248h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+248h+Dest], eax ; Dest
		call	wcsncat
		mov	eax, [ebp+arg_8]
		sub	eax, 1
		mov	[esp+248h+Count], eax ;	Count
		lea	eax, [ebp+Str]
		mov	[esp+248h+Source], eax ; Source
		mov	eax, [ebp+arg_4]
		mov	[esp+248h+Dest], eax ; Dest
		call	wcsncpy

loc_409266:				; CODE XREF: sub_408E11+386j
					; sub_408E11+396j ...
		mov	eax, 1

locret_40926B:				; CODE XREF: sub_408E11+350j
		leave
		retn
sub_408E11	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40926D(wchar_t *, wchar_t *, int, int)
sub_40926D	proc near		; CODE XREF: sub_4094D5+86p

Dest		= dword	ptr -338h
Source		= dword	ptr -334h
Count		= dword	ptr -330h
var_32C		= dword	ptr -32Ch
Str		= word ptr -31Ch
Buf		= byte ptr -114h
File		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 338h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	eax, [ebp+arg_0]
		add	eax, 410h
		mov	[esp+338h+Count], 104h ; Count
		mov	[esp+338h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+338h+Dest], eax ; Dest
		call	wcsncpy
		lea	eax, [ebp+Str]
		mov	[esp+338h+Dest], eax ; Str
		call	wcslen
		sub	eax, 1
		movzx	eax, [ebp+eax*2+Str]
		cmp	ax, 5Ch
		jz	short loc_4092DB
		mov	[esp+338h+Source], offset Source ; "\\"
		lea	eax, [ebp+Str]
		mov	[esp+338h+Dest], eax ; Dest
		call	wcscat

loc_4092DB:				; CODE XREF: sub_40926D+56j
		lea	eax, [ebp+Str]
		mov	[esp+338h+Dest], eax ; Str
		call	wcslen
		mov	edx, 103h
		sub	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[esp+338h+Count], edx ;	Count
		mov	[esp+338h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+338h+Dest], eax ; Dest
		call	wcsncat
		mov	[esp+338h+Source], offset Mode ; Mode
		lea	eax, [ebp+Str]
		mov	[esp+338h+Dest], eax ; Filename
		mov	eax, ds:_wfopen
		call	eax ; _wfopen
		mov	[ebp+File], eax
		cmp	[ebp+File], 0
		jnz	short loc_40934A
		lea	eax, [ebp+Str]
		mov	[esp+338h+Source], eax
		mov	[esp+338h+Dest], 5EAh
		call	sub_405340
		mov	eax, 0
		jmp	locret_4094D3
; ---------------------------------------------------------------------------

loc_40934A:				; CODE XREF: sub_40926D+BBj
		jmp	loc_40948A
; ---------------------------------------------------------------------------

loc_40934F:				; CODE XREF: sub_40926D+23Cj
		mov	[esp+338h+Count], 3 ; size_t
		mov	[esp+338h+Source], offset aKey ; "key"
		lea	eax, [ebp+Buf]
		mov	[esp+338h+Dest], eax ; char *
		call	sub_408DC2
		test	eax, eax
		jz	short loc_4093EE
		cmp	[ebp+var_C], 0
		jz	short loc_40938D
		mov	[esp+338h+Dest], 5EBh
		call	sub_405340
		mov	eax, 0
		jmp	locret_4094D3
; ---------------------------------------------------------------------------

loc_40938D:				; CODE XREF: sub_40926D+108j
		cmp	[ebp+var_10], 0
		jz	short loc_4093A9
		mov	[esp+338h+Dest], 5ECh
		call	sub_405340
		mov	eax, 0
		jmp	locret_4094D3
; ---------------------------------------------------------------------------

loc_4093A9:				; CODE XREF: sub_40926D+124j
		mov	[ebp+var_C], 1
		mov	edx, 2
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		lea	eax, [ebp+Buf]
		add	eax, 4
		mov	[esp+338h+var_32C], eax	; int
		mov	eax, [ebp+arg_8]
		mov	[esp+338h+Count], eax ;	int
		mov	eax, [ebp+arg_4]
		mov	[esp+338h+Source], eax ; wchar_t *
		mov	eax, [ebp+arg_0]
		mov	[esp+338h+Dest], eax ; int
		call	sub_408E11
		test	eax, eax
		jnz	short loc_4093EE
		mov	eax, 0
		jmp	locret_4094D3
; ---------------------------------------------------------------------------

loc_4093EE:				; CODE XREF: sub_40926D+102j
					; sub_40926D+175j
		mov	[esp+338h+Count], 6 ; size_t
		mov	[esp+338h+Source], offset aPkcs12 ; "pkcs12"
		lea	eax, [ebp+Buf]
		mov	[esp+338h+Dest], eax ; char *
		call	sub_408DC2
		test	eax, eax
		jz	short loc_40948A
		cmp	[ebp+var_10], 0
		jz	short loc_40942C
		mov	[esp+338h+Dest], 5EDh
		call	sub_405340
		mov	eax, 0
		jmp	locret_4094D3
; ---------------------------------------------------------------------------

loc_40942C:				; CODE XREF: sub_40926D+1A7j
		cmp	[ebp+var_C], 0
		jz	short loc_409448
		mov	[esp+338h+Dest], 5ECh
		call	sub_405340
		mov	eax, 0
		jmp	locret_4094D3
; ---------------------------------------------------------------------------

loc_409448:				; CODE XREF: sub_40926D+1C3j
		mov	[ebp+var_10], 1
		mov	edx, 1
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		lea	eax, [ebp+Buf]
		add	eax, 7
		mov	[esp+338h+var_32C], eax	; int
		mov	eax, [ebp+arg_8]
		mov	[esp+338h+Count], eax ;	int
		mov	eax, [ebp+arg_4]
		mov	[esp+338h+Source], eax ; wchar_t *
		mov	eax, [ebp+arg_0]
		mov	[esp+338h+Dest], eax ; int
		call	sub_408E11
		test	eax, eax
		jnz	short loc_40948A
		mov	eax, 0
		jmp	short locret_4094D3
; ---------------------------------------------------------------------------

loc_40948A:				; CODE XREF: sub_40926D:loc_40934Aj
					; sub_40926D+1A1j ...
		mov	eax, [ebp+File]
		mov	[esp+338h+Count], eax ;	File
		mov	[esp+338h+Source], 100h	; MaxCount
		lea	eax, [ebp+Buf]
		mov	[esp+338h+Dest], eax ; Buf
		call	fgets
		test	eax, eax
		jnz	loc_40934F
		cmp	[ebp+var_C], 0
		jnz	short loc_4094CE
		cmp	[ebp+var_10], 0
		jnz	short loc_4094CE
		mov	[esp+338h+Dest], 5EEh
		call	sub_405340
		mov	eax, 0
		jmp	short locret_4094D3
; ---------------------------------------------------------------------------

loc_4094CE:				; CODE XREF: sub_40926D+246j
					; sub_40926D+24Cj
		mov	eax, 1

locret_4094D3:				; CODE XREF: sub_40926D+D8j
					; sub_40926D+11Bj ...
		leave
		retn
sub_40926D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; DWORD	__stdcall sub_4094D5(LPVOID lpThreadParameter)
sub_4094D5	proc near		; DATA XREF: sub_4096A2+1Co

Dest		= dword	ptr -318h
Source		= dword	ptr -314h
Count		= dword	ptr -310h
bSigned		= dword	ptr -30Ch
uValue		= dword	ptr -300h
String		= word ptr -2FCh
Str		= word ptr -0F4h
Msg		= tagMSG ptr -2Ch
hDlg		= dword	ptr -10h
var_C		= dword	ptr -0Ch
lpThreadParameter= dword ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 314h
		mov	[ebp+uValue], 0
		mov	eax, [ebp+lpThreadParameter]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+318h+Count], 64h ;	Count
		mov	[esp+318h+Source], eax ; Source
		lea	eax, [ebp+Str]
		mov	[esp+318h+Dest], eax ; Dest
		call	wcsncpy
		lea	eax, [ebp+Str]
		mov	[esp+318h+Dest], eax ; Str
		call	wcslen
		mov	ebx, eax
		mov	[esp+318h+Dest], offset	Str ; Str
		call	wcslen
		sub	ebx, eax
		mov	eax, ebx
		sub	eax, 1
		mov	[ebp+eax*2+Str], 0
		lea	eax, [ebp+uValue]
		mov	[esp+318h+bSigned], eax	; int
		mov	[esp+318h+Count], 104h ; int
		lea	eax, [ebp+String]
		mov	[esp+318h+Source], eax ; wchar_t *
		mov	eax, [ebp+var_C]
		mov	[esp+318h+Dest], eax ; wchar_t *
		call	sub_40926D
		test	eax, eax
		jnz	short loc_409572
		mov	[esp+318h+Dest], 1 ; dwExitCode
		mov	eax, ds:ExitThread
		call	eax ; ExitThread
; ---------------------------------------------------------------------------

loc_409572:				; CODE XREF: sub_4094D5+8Dj
		mov	[esp+318h+Source], offset sub_408B8B ; DLGPROC
		mov	[esp+318h+Dest], 0AAh ;	int
		call	sub_4055E7
		mov	[ebp+hDlg], eax
		cmp	[ebp+hDlg], 0
		jnz	short loc_40959D
		mov	[esp+318h+Dest], 1 ; dwExitCode
		mov	eax, ds:ExitThread
		call	eax ; ExitThread
; ---------------------------------------------------------------------------

loc_40959D:				; CODE XREF: sub_4094D5+B8j
		lea	eax, [ebp+String]
		mov	[esp+318h+Count], eax ;	lpString
		mov	[esp+318h+Source], 0B1h	; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+318h+Dest], eax ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		mov	eax, [ebp+uValue]
		mov	[esp+318h+bSigned], 0 ;	bSigned
		mov	[esp+318h+Count], eax ;	uValue
		mov	[esp+318h+Source], 0B2h	; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+318h+Dest], eax ; hDlg
		mov	eax, ds:SetDlgItemInt
		call	eax ; SetDlgItemInt
		sub	esp, 10h
		lea	eax, [ebp+Str]
		mov	[esp+318h+Source], eax
		mov	[esp+318h+Dest], 5DEh
		call	sub_40524A
		mov	[esp+318h+Source], eax ; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+318h+Dest], eax ; hWnd
		mov	eax, ds:SetWindowTextW
		call	eax ; SetWindowTextW
		sub	esp, 8
		mov	[esp+318h+Source], 5 ; nCmdShow
		mov	eax, [ebp+hDlg]
		mov	[esp+318h+Dest], eax ; hWnd
		mov	eax, ds:ShowWindow
		call	eax ; ShowWindow
		sub	esp, 8
		jmp	short loc_409668
; ---------------------------------------------------------------------------

loc_40962D:				; CODE XREF: sub_4094D5+1BDj
		lea	eax, [ebp+Msg]
		mov	[esp+318h+Source], eax ; lpMsg
		mov	eax, [ebp+hDlg]
		mov	[esp+318h+Dest], eax ; hDlg
		mov	eax, ds:IsDialogMessageW
		call	eax ; IsDialogMessageW
		sub	esp, 8
		test	eax, eax
		jnz	short loc_409668
		lea	eax, [ebp+Msg]
		mov	[esp+318h+Dest], eax ; lpMsg
		mov	eax, ds:TranslateMessage
		call	eax ; TranslateMessage
		sub	esp, 4
		lea	eax, [ebp+Msg]
		mov	[esp+318h+Dest], eax ; lpMsg
		mov	eax, ds:DispatchMessageW
		call	eax ; DispatchMessageW
		sub	esp, 4

loc_409668:				; CODE XREF: sub_4094D5+156j
					; sub_4094D5+171j
		mov	[esp+318h+bSigned], 0 ;	wMsgFilterMax
		mov	[esp+318h+Count], 0 ; wMsgFilterMin
		mov	[esp+318h+Source], 0 ; hWnd
		lea	eax, [ebp+Msg]
		mov	[esp+318h+Dest], eax ; lpMsg
		mov	eax, ds:GetMessageW
		call	eax ; GetMessageW
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_40962D
		mov	[esp+318h+Dest], 0 ; dwExitCode
		mov	eax, ds:ExitThread
		call	eax ; ExitThread
sub_4094D5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4096A2(LPVOID)
sub_4096A2	proc near		; CODE XREF: sub_401ADE+2BBp

lpThreadAttributes= dword ptr -38h
dwStackSize	= dword	ptr -34h
lpStartAddress	= dword	ptr -30h
lpParameter	= dword	ptr -2Ch
dwCreationFlags	= dword	ptr -28h
lpThreadId	= dword	ptr -24h
ThreadId	= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		lea	eax, [ebp+ThreadId]
		mov	[esp+38h+lpThreadId], eax ; lpThreadId
		mov	[esp+38h+dwCreationFlags], 0 ; dwCreationFlags
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+lpParameter], eax ; lpParameter
		mov	[esp+38h+lpStartAddress], offset sub_4094D5 ; lpStartAddress
		mov	[esp+38h+dwStackSize], 0 ; dwStackSize
		mov	[esp+38h+lpThreadAttributes], 0	; lpThreadAttributes
		mov	eax, ds:CreateThread
		call	eax ; CreateThread
		sub	esp, 18h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short locret_4096F4
		mov	[esp+38h+lpThreadAttributes], 5DDh
		call	sub_405340

locret_4096F4:				; CODE XREF: sub_4096A2+44j
		leave
		retn
sub_4096A2	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4096F8(char *, size_t, char *, char)
sub_4096F8	proc near		; CODE XREF: sub_40A455+15Ep
					; sub_40A455+1A1p ...

DstBuf		= dword	ptr -28h
MaxCount	= dword	ptr -24h
Format		= dword	ptr -20h
ArgList		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+ArgList], eax ; ArgList
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+Format], eax ;	Format
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+MaxCount], eax	; MaxCount
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+DstBuf], eax ;	DstBuf
		call	j__vsnprintf
		mov	ebx, eax
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	ebp
		retn
sub_4096F8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_40972F(HWND	hDlg, int, int,	int)
sub_40972F	proc near		; DATA XREF: sub_401FCE+A8o

hWnd		= dword	ptr -28h
Msg		= dword	ptr -24h
wParam		= dword	ptr -20h
lParam		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
hDlg		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_4]
		cmp	eax, 4Eh
		jz	loc_409C4F
		cmp	eax, 4Eh
		ja	short loc_409754
		cmp	eax, 10h
		jz	loc_409CD9
		jmp	loc_409CFB
; ---------------------------------------------------------------------------

loc_409754:				; CODE XREF: sub_40972F+15j
		cmp	eax, 110h
		jz	short loc_40976B
		cmp	eax, 111h
		jz	loc_40981B
		jmp	loc_409CFB
; ---------------------------------------------------------------------------

loc_40976B:				; CODE XREF: sub_40972F+2Aj
		mov	[esp+28h+hWnd],	5Ah
		call	sub_405370
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_4097CE
		mov	eax, [ebp+var_C]
		mov	[esp+28h+lParam], eax ;	lParam
		mov	[esp+28h+wParam], 0 ; wParam
		mov	[esp+28h+Msg], 80h ; Msg
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	eax, [ebp+var_C]
		mov	[esp+28h+lParam], eax ;	lParam
		mov	[esp+28h+wParam], 1 ; wParam
		mov	[esp+28h+Msg], 80h ; Msg
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h

loc_4097CE:				; CODE XREF: sub_40972F+4Fj
		mov	[esp+28h+Msg], 0D7h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+lParam], 0 ; lParam
		mov	[esp+28h+wParam], 5 ; wParam
		mov	[esp+28h+Msg], 0C5h ; Msg
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; HWND
		call	sub_409E67
		jmp	loc_409CFB
; ---------------------------------------------------------------------------

loc_40981B:				; CODE XREF: sub_40972F+31j
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		sub	eax, 0D2h	; switch 10 cases
		cmp	eax, 9
		ja	loc_409CFA	; jumptable 00409836 default case
		mov	eax, ds:off_4108FC[eax*4]
		jmp	eax		; switch jump
; ---------------------------------------------------------------------------

loc_409838:				; CODE XREF: sub_40972F+107j
					; DATA XREF: .rdata:off_4108FCo
		mov	eax, [ebp+arg_8] ; jumptable 00409836 case 210
		shr	eax, 10h
		test	ax, ax
		jnz	loc_40995A
		mov	[esp+28h+Msg], 0D5h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0DBh ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D6h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D7h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D8h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D9h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		jmp	loc_409C4A
; ---------------------------------------------------------------------------

loc_40995A:				; CODE XREF: sub_40972F+112j
		jmp	loc_409C4A
; ---------------------------------------------------------------------------

loc_40995F:				; CODE XREF: sub_40972F+107j
					; DATA XREF: .rdata:off_4108FCo
		mov	eax, [ebp+arg_8] ; jumptable 00409836 case 211
		shr	eax, 10h
		test	ax, ax
		jnz	loc_409A81
		mov	[esp+28h+Msg], 0D5h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0DBh ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D6h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D7h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D8h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D9h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 0 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		jmp	loc_409C4A
; ---------------------------------------------------------------------------

loc_409A81:				; CODE XREF: sub_40972F+239j
		jmp	loc_409C4A
; ---------------------------------------------------------------------------

loc_409A86:				; CODE XREF: sub_40972F+107j
					; DATA XREF: .rdata:off_4108FCo
		mov	eax, [ebp+arg_8] ; jumptable 00409836 case 212
		shr	eax, 10h
		test	ax, ax
		jnz	loc_409BA8
		mov	[esp+28h+Msg], 0D5h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 1 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0DBh ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 1 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D6h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 1 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D7h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 1 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D8h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 1 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		mov	[esp+28h+Msg], 0D9h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+28h+Msg], 1 ; bEnable
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		jmp	loc_409C4A
; ---------------------------------------------------------------------------

loc_409BA8:				; CODE XREF: sub_40972F+360j
		jmp	loc_409C4A
; ---------------------------------------------------------------------------

loc_409BAD:				; CODE XREF: sub_40972F+107j
					; DATA XREF: .rdata:off_4108FCo
		mov	eax, [ebp+arg_8] ; jumptable 00409836 case 213
		shr	eax, 10h
		test	ax, ax
		jnz	short loc_409BFA
		mov	[esp+28h+wParam], offset word_42D750 ; lpString
		mov	[esp+28h+Msg], 0D6h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		mov	[esp+28h+wParam], offset word_42D818 ; lpString
		mov	[esp+28h+Msg], 0D7h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		jmp	short loc_409C4A
; ---------------------------------------------------------------------------

loc_409BFA:				; CODE XREF: sub_40972F+487j
		jmp	short loc_409C4A
; ---------------------------------------------------------------------------

loc_409BFC:				; CODE XREF: sub_40972F+107j
					; DATA XREF: .rdata:off_4108FCo
		mov	eax, [ebp+arg_8] ; jumptable 00409836 case 219
		shr	eax, 10h
		test	ax, ax
		jnz	short loc_409C49
		mov	[esp+28h+wParam], offset word_42D824 ; lpString
		mov	[esp+28h+Msg], 0D6h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		mov	[esp+28h+wParam], offset word_42D8EC ; lpString
		mov	[esp+28h+Msg], 0D7h ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_409C49:				; CODE XREF: sub_40972F+4D6j
					; sub_40972F+518j
		nop

loc_409C4A:				; CODE XREF: sub_40972F+226j
					; sub_40972F:loc_40995Aj ...
		jmp	loc_409CFA	; jumptable 00409836 default case
; ---------------------------------------------------------------------------

loc_409C4F:				; CODE XREF: sub_40972F+Cj
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		cmp	eax, 0FFFFFF37h
		jnz	short loc_409C98
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; HWND
		call	sub_409D04
		test	eax, eax
		setz	al
		movzx	eax, al
		mov	[esp+28h+wParam], eax ;	dwNewLong
		mov	[esp+28h+Msg], 0 ; nIndex
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SetWindowLongW
		call	eax ; SetWindowLongW
		sub	esp, 0Ch
		mov	eax, 1
		jmp	short locret_409D00
; ---------------------------------------------------------------------------

loc_409C98:				; CODE XREF: sub_40972F+531j
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		cmp	eax, 0FFFFFF36h
		jnz	short loc_409CD7
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; HWND
		call	sub_40A02F
		mov	[esp+28h+wParam], 0 ; dwNewLong
		mov	[esp+28h+Msg], 0 ; nIndex
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hWnd
		mov	eax, ds:SetWindowLongW
		call	eax ; SetWindowLongW
		sub	esp, 0Ch
		mov	eax, 1
		jmp	short locret_409D00
; ---------------------------------------------------------------------------

loc_409CD7:				; CODE XREF: sub_40972F+574j
		jmp	short loc_409CFB
; ---------------------------------------------------------------------------

loc_409CD9:				; CODE XREF: sub_40972F+1Aj
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		mov	[esp+28h+Msg], eax ; nResult
		mov	eax, [ebp+hDlg]
		mov	[esp+28h+hWnd],	eax ; hDlg
		mov	eax, ds:EndDialog
		call	eax ; EndDialog
		sub	esp, 8
		mov	eax, 1
		jmp	short locret_409D00
; ---------------------------------------------------------------------------

loc_409CFA:				; CODE XREF: sub_40972F+FAj
					; sub_40972F+107j ...
		nop			; jumptable 00409836 default case

loc_409CFB:				; CODE XREF: sub_40972F+20j
					; sub_40972F+37j ...
		mov	eax, 0

locret_409D00:				; CODE XREF: sub_40972F+567j
					; sub_40972F+5A6j ...
		leave
		retn	10h
sub_40972F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_409D04(HWND)
sub_409D04	proc near		; CODE XREF: sub_40972F+539p

hDlg		= dword	ptr -0E8h
nIDButton	= dword	ptr -0E4h
lpString	= dword	ptr -0E0h
cchMax		= dword	ptr -0DCh
String		= word ptr -0D8h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 0E8h
		mov	[esp+0E8h+nIDButton], 0D4h ; nIDButton
		mov	eax, [ebp+arg_0]
		mov	[esp+0E8h+hDlg], eax ; hDlg
		mov	eax, ds:IsDlgButtonChecked
		call	eax ; IsDlgButtonChecked
		sub	esp, 8
		cmp	eax, 1
		jnz	loc_409E60
		mov	[esp+0E8h+nIDButton], 0D5h ; nIDButton
		mov	eax, [ebp+arg_0]
		mov	[esp+0E8h+hDlg], eax ; hDlg
		mov	eax, ds:IsDlgButtonChecked
		call	eax ; IsDlgButtonChecked
		sub	esp, 8
		cmp	eax, 1
		setz	al
		movzx	eax, al
		mov	[ebp+var_C], eax
		mov	[esp+0E8h+cchMax], 64h ; cchMax
		lea	eax, [ebp+String]
		mov	[esp+0E8h+lpString], eax ; lpString
		mov	[esp+0E8h+nIDButton], 0D6h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+0E8h+hDlg], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		lea	eax, [ebp+String]
		mov	[esp+0E8h+hDlg], eax ; Str
		call	wcslen
		test	eax, eax
		jnz	short loc_409DB2
		cmp	[ebp+var_C], 0
		jz	short loc_409D9B
		mov	eax, 641h
		jmp	short loc_409DA0
; ---------------------------------------------------------------------------

loc_409D9B:				; CODE XREF: sub_409D04+8Ej
		mov	eax, 644h

loc_409DA0:				; CODE XREF: sub_409D04+95j
		mov	[esp+0E8h+hDlg], eax
		call	sub_405340
		mov	eax, 0
		jmp	locret_409E65
; ---------------------------------------------------------------------------

loc_409DB2:				; CODE XREF: sub_409D04+88j
		mov	[esp+0E8h+cchMax], 64h ; cchMax
		lea	eax, [ebp+String]
		mov	[esp+0E8h+lpString], eax ; lpString
		mov	[esp+0E8h+nIDButton], 0D7h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+0E8h+hDlg], eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		lea	eax, [ebp+String]
		mov	[esp+0E8h+hDlg], eax ; Str
		call	wcslen
		test	eax, eax
		jnz	short loc_409E0F
		cmp	[ebp+var_C], 0
		jz	short loc_409DFB
		mov	eax, 642h
		jmp	short loc_409E00
; ---------------------------------------------------------------------------

loc_409DFB:				; CODE XREF: sub_409D04+EEj
		mov	eax, 645h

loc_409E00:				; CODE XREF: sub_409D04+F5j
		mov	[esp+0E8h+hDlg], eax
		call	sub_405340
		mov	eax, 0
		jmp	short locret_409E65
; ---------------------------------------------------------------------------

loc_409E0F:				; CODE XREF: sub_409D04+E8j
		mov	[esp+0E8h+lpString], 0Ah ; Radix
		mov	[esp+0E8h+nIDButton], 0	; EndPtr
		lea	eax, [ebp+String]
		mov	[esp+0E8h+hDlg], eax ; Str
		call	wcstol
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jle	short loc_409E3F
		cmp	[ebp+var_10], 0FFFFh
		jle	short loc_409E60

loc_409E3F:				; CODE XREF: sub_409D04+130j
		cmp	[ebp+var_C], 0
		jz	short loc_409E4C
		mov	eax, 643h
		jmp	short loc_409E51
; ---------------------------------------------------------------------------

loc_409E4C:				; CODE XREF: sub_409D04+13Fj
		mov	eax, 646h

loc_409E51:				; CODE XREF: sub_409D04+146j
		mov	[esp+0E8h+hDlg], eax
		call	sub_405340
		mov	eax, 0
		jmp	short locret_409E65
; ---------------------------------------------------------------------------

loc_409E60:				; CODE XREF: sub_409D04+24j
					; sub_409D04+139j
		mov	eax, 1

locret_409E65:				; CODE XREF: sub_409D04+A9j
					; sub_409D04+109j ...
		leave
		retn
sub_409D04	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_409E67(HWND)
sub_409E67	proc near		; CODE XREF: sub_40972F+E2p

hDlg		= dword	ptr -18h
nIDFirstButton	= dword	ptr -14h
nIDLastButton	= dword	ptr -10h
nIDCheckButton	= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_42D74C
		test	eax, eax
		jnz	short loc_409EE0
		mov	[esp+18h+nIDCheckButton], 0D5h ; nIDCheckButton
		mov	[esp+18h+nIDLastButton], 0DBh ;	nIDLastButton
		mov	[esp+18h+nIDFirstButton], 0D5h ; nIDFirstButton
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+hDlg],	eax ; hDlg
		mov	eax, ds:CheckRadioButton
		call	eax ; CheckRadioButton
		sub	esp, 10h
		mov	[esp+18h+nIDLastButton], offset	word_42D750 ; lpString
		mov	[esp+18h+nIDFirstButton], 0D6h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+hDlg],	eax ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		mov	[esp+18h+nIDLastButton], offset	word_42D818 ; lpString
		mov	[esp+18h+nIDFirstButton], 0D7h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+hDlg],	eax ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		jmp	short loc_409F52
; ---------------------------------------------------------------------------

loc_409EE0:				; CODE XREF: sub_409E67+Dj
		mov	eax, ds:dword_42D74C
		cmp	eax, 1
		jnz	short loc_409F52
		mov	[esp+18h+nIDCheckButton], 0DBh ; nIDCheckButton
		mov	[esp+18h+nIDLastButton], 0DBh ;	nIDLastButton
		mov	[esp+18h+nIDFirstButton], 0D5h ; nIDFirstButton
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+hDlg],	eax ; hDlg
		mov	eax, ds:CheckRadioButton
		call	eax ; CheckRadioButton
		sub	esp, 10h
		mov	[esp+18h+nIDLastButton], offset	word_42D824 ; lpString
		mov	[esp+18h+nIDFirstButton], 0D6h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+hDlg],	eax ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch
		mov	[esp+18h+nIDLastButton], offset	word_42D8EC ; lpString
		mov	[esp+18h+nIDFirstButton], 0D7h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+hDlg],	eax ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch

loc_409F52:				; CODE XREF: sub_409E67+77j
					; sub_409E67+81j
		mov	eax, ds:dword_42D748
		test	eax, eax
		jnz	short loc_409F9D
		mov	[esp+18h+nIDFirstButton], 0D2h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+18h+nIDCheckButton], 0 ; lParam
		mov	[esp+18h+nIDLastButton], 0 ; wParam
		mov	[esp+18h+nIDFirstButton], 0F5h ; Msg
		mov	[esp+18h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		jmp	locret_40A02D
; ---------------------------------------------------------------------------

loc_409F9D:				; CODE XREF: sub_409E67+F2j
		mov	eax, ds:dword_42D748
		cmp	eax, 1
		jnz	short loc_409FE6
		mov	[esp+18h+nIDFirstButton], 0D3h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+18h+nIDCheckButton], 0 ; lParam
		mov	[esp+18h+nIDLastButton], 0 ; wParam
		mov	[esp+18h+nIDFirstButton], 0F5h ; Msg
		mov	[esp+18h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h
		jmp	short locret_40A02D
; ---------------------------------------------------------------------------

loc_409FE6:				; CODE XREF: sub_409E67+13Ej
		mov	eax, ds:dword_42D748
		cmp	eax, 2
		jnz	short locret_40A02D
		mov	[esp+18h+nIDFirstButton], 0D4h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+18h+nIDCheckButton], 0 ; lParam
		mov	[esp+18h+nIDLastButton], 0 ; wParam
		mov	[esp+18h+nIDFirstButton], 0F5h ; Msg
		mov	[esp+18h+hDlg],	eax ; hWnd
		mov	eax, ds:SendMessageW
		call	eax ; SendMessageW
		sub	esp, 10h

locret_40A02D:				; CODE XREF: sub_409E67+131j
					; sub_409E67+17Dj ...
		leave
		retn
sub_409E67	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40A02F(HWND)
sub_40A02F	proc near		; CODE XREF: sub_40972F+57Cp

hDlg		= dword	ptr -48h
nIDButton	= dword	ptr -44h
lpString	= dword	ptr -40h
cchMax		= dword	ptr -3Ch
dwOptions	= dword	ptr -38h
samDesired	= dword	ptr -34h
lpSecurityAttributes= dword ptr	-30h
phkResult	= dword	ptr -2Ch
lpdwDisposition	= dword	ptr -28h
var_18		= word ptr -18h
var_14		= word ptr -14h
dwDisposition	= dword	ptr -10h
hKey		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	eax, ds:dword_410A26
		mov	dword ptr [ebp+var_14],	eax
		mov	eax, ds:dword_410A26
		mov	dword ptr [ebp+var_18],	eax
		mov	[esp+48h+nIDButton], 0D2h ; nIDButton
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hDlg],	eax ; hDlg
		mov	eax, ds:IsDlgButtonChecked
		call	eax ; IsDlgButtonChecked
		sub	esp, 8
		cmp	eax, 1
		jnz	short loc_40A074
		mov	ds:dword_42D748, 0
		mov	[ebp+var_14], 30h
		jmp	short loc_40A0D0
; ---------------------------------------------------------------------------

loc_40A074:				; CODE XREF: sub_40A02F+31j
		mov	[esp+48h+nIDButton], 0D3h ; nIDButton
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hDlg],	eax ; hDlg
		mov	eax, ds:IsDlgButtonChecked
		call	eax ; IsDlgButtonChecked
		sub	esp, 8
		cmp	eax, 1
		jnz	short loc_40A0A3
		mov	ds:dword_42D748, 1
		mov	[ebp+var_14], 31h
		jmp	short loc_40A0D0
; ---------------------------------------------------------------------------

loc_40A0A3:				; CODE XREF: sub_40A02F+60j
		mov	[esp+48h+nIDButton], 0D4h ; nIDButton
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hDlg],	eax ; hDlg
		mov	eax, ds:IsDlgButtonChecked
		call	eax ; IsDlgButtonChecked
		sub	esp, 8
		cmp	eax, 1
		jnz	short loc_40A0D0
		mov	ds:dword_42D748, 2
		mov	[ebp+var_14], 32h

loc_40A0D0:				; CODE XREF: sub_40A02F+43j
					; sub_40A02F+72j ...
		mov	[esp+48h+nIDButton], 0D5h ; nIDButton
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hDlg],	eax ; hDlg
		mov	eax, ds:IsDlgButtonChecked
		call	eax ; IsDlgButtonChecked
		sub	esp, 8
		cmp	eax, 1
		jnz	short loc_40A14F
		mov	ds:dword_42D74C, 0
		mov	[ebp+var_18], 30h
		mov	[esp+48h+cchMax], 64h ;	cchMax
		mov	[esp+48h+lpString], offset word_42D750 ; lpString
		mov	[esp+48h+nIDButton], 0D6h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+48h+cchMax], 6 ; cchMax
		mov	[esp+48h+lpString], offset word_42D818 ; lpString
		mov	[esp+48h+nIDButton], 0D7h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		jmp	short loc_40A1AF
; ---------------------------------------------------------------------------

loc_40A14F:				; CODE XREF: sub_40A02F+BCj
		mov	ds:dword_42D74C, 1
		mov	[ebp+var_18], 31h
		mov	[esp+48h+cchMax], 64h ;	cchMax
		mov	[esp+48h+lpString], offset word_42D824 ; lpString
		mov	[esp+48h+nIDButton], 0D6h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		mov	[esp+48h+cchMax], 6 ; cchMax
		mov	[esp+48h+lpString], offset word_42D8EC ; lpString
		mov	[esp+48h+nIDButton], 0D7h ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h

loc_40A1AF:				; CODE XREF: sub_40A02F+11Ej
		lea	eax, [ebp+dwDisposition]
		mov	[esp+48h+lpdwDisposition], eax ; lpdwDisposition
		lea	eax, [ebp+hKey]
		mov	[esp+48h+phkResult], eax ; phkResult
		mov	[esp+48h+lpSecurityAttributes],	0 ; lpSecurityAttributes
		mov	[esp+48h+samDesired], 20006h ; samDesired
		mov	[esp+48h+dwOptions], 0 ; dwOptions
		mov	[esp+48h+cchMax], offset Class ; lpClass
		mov	[esp+48h+lpString], 0 ;	Reserved
		mov	[esp+48h+nIDButton], offset aSoftwareNili_0 ; "Software\\Nilings\\OpenVPN-GUI"
		mov	[esp+48h+hDlg],	80000001h ; hKey
		mov	eax, ds:RegCreateKeyExW
		call	eax ; RegCreateKeyExW
		sub	esp, 24h
		test	eax, eax
		jz	short loc_40A21B
		mov	[esp+48h+nIDButton], offset aSoftwareNili_0 ; "Software\\Nilings\\OpenVPN-GUI"
		mov	[esp+48h+hDlg],	647h
		call	sub_405340
		jmp	locret_40A2CB
; ---------------------------------------------------------------------------

loc_40A21B:				; CODE XREF: sub_40A02F+1D1j
		mov	eax, [ebp+hKey]
		lea	edx, [ebp+var_14]
		mov	[esp+48h+lpString], edx	; wchar_t *
		mov	[esp+48h+nIDButton], offset aP ; "p"
		mov	[esp+48h+hDlg],	eax ; hKey
		call	sub_40B6C3
		mov	eax, [ebp+hKey]
		lea	edx, [ebp+var_18]
		mov	[esp+48h+lpString], edx	; wchar_t *
		mov	[esp+48h+nIDButton], offset aProxy_type	; "proxy_type"
		mov	[esp+48h+hDlg],	eax ; hKey
		call	sub_40B6C3
		mov	eax, [ebp+hKey]
		mov	[esp+48h+lpString], offset word_42D750 ; wchar_t *
		mov	[esp+48h+nIDButton], offset aProxy_http_add ; "proxy_http_address"
		mov	[esp+48h+hDlg],	eax ; hKey
		call	sub_40B6C3
		mov	eax, [ebp+hKey]
		mov	[esp+48h+lpString], offset word_42D818 ; wchar_t *
		mov	[esp+48h+nIDButton], offset aProxy_http_por ; "proxy_http_port"
		mov	[esp+48h+hDlg],	eax ; hKey
		call	sub_40B6C3
		mov	eax, [ebp+hKey]
		mov	[esp+48h+lpString], offset word_42D824 ; wchar_t *
		mov	[esp+48h+nIDButton], offset aProxy_socks_ad ; "proxy_socks_address"
		mov	[esp+48h+hDlg],	eax ; hKey
		call	sub_40B6C3
		mov	eax, [ebp+hKey]
		mov	[esp+48h+lpString], offset word_42D8EC ; wchar_t *
		mov	[esp+48h+nIDButton], offset aProxy_socks_po ; "proxy_socks_port"
		mov	[esp+48h+hDlg],	eax ; hKey
		call	sub_40B6C3
		mov	eax, [ebp+hKey]
		mov	[esp+48h+hDlg],	eax ; hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4

locret_40A2CB:				; CODE XREF: sub_40A02F+1E7j
		leave
		retn
sub_40A02F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40A2CD	proc near		; CODE XREF: sub_401623:loc_40180Fp

hKey		= dword	ptr -38h
lpSubKey	= dword	ptr -34h
ulOptions	= dword	ptr -30h
samDesired	= dword	ptr -2Ch
phkResult	= dword	ptr -28h
var_18		= byte ptr -18h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, ds:dword_410A26
		mov	dword ptr [ebp+var_14],	eax
		mov	eax, ds:dword_410A26
		mov	dword ptr [ebp+var_18],	eax
		lea	eax, [ebp+var_10]
		mov	[esp+38h+phkResult], eax ; phkResult
		mov	[esp+38h+samDesired], 20019h ; samDesired
		mov	[esp+38h+ulOptions], 0 ; ulOptions
		mov	[esp+38h+lpSubKey], offset aSoftwareNili_0 ; "Software\\Nilings\\OpenVPN-GUI"
		mov	[esp+38h+hKey],	80000001h ; hKey
		mov	eax, ds:RegOpenKeyExW
		call	eax ; RegOpenKeyExW
		sub	esp, 14h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	locret_40A453
		mov	eax, [ebp+var_10]
		mov	[esp+38h+samDesired], 64h ; int
		mov	[esp+38h+ulOptions], offset word_42D750	; LPBYTE
		mov	[esp+38h+lpSubKey], offset aProxy_http_add ; "proxy_http_address"
		mov	[esp+38h+hKey],	eax ; HKEY
		call	sub_40B60A
		mov	eax, [ebp+var_10]
		mov	[esp+38h+samDesired], 6	; int
		mov	[esp+38h+ulOptions], offset word_42D818	; LPBYTE
		mov	[esp+38h+lpSubKey], offset aProxy_http_por ; "proxy_http_port"
		mov	[esp+38h+hKey],	eax ; HKEY
		call	sub_40B60A
		mov	eax, [ebp+var_10]
		mov	[esp+38h+samDesired], 64h ; int
		mov	[esp+38h+ulOptions], offset word_42D824	; LPBYTE
		mov	[esp+38h+lpSubKey], offset aProxy_socks_ad ; "proxy_socks_address"
		mov	[esp+38h+hKey],	eax ; HKEY
		call	sub_40B60A
		mov	eax, [ebp+var_10]
		mov	[esp+38h+samDesired], 6	; int
		mov	[esp+38h+ulOptions], offset word_42D8EC	; LPBYTE
		mov	[esp+38h+lpSubKey], offset aProxy_socks_po ; "proxy_socks_port"
		mov	[esp+38h+hKey],	eax ; HKEY
		call	sub_40B60A
		mov	eax, [ebp+var_10]
		mov	[esp+38h+samDesired], 2	; int
		lea	edx, [ebp+var_14]
		mov	[esp+38h+ulOptions], edx ; LPBYTE
		mov	[esp+38h+lpSubKey], offset aP ;	"p"
		mov	[esp+38h+hKey],	eax ; HKEY
		call	sub_40B60A
		mov	eax, [ebp+var_10]
		mov	[esp+38h+samDesired], 2	; int
		lea	edx, [ebp+var_18]
		mov	[esp+38h+ulOptions], edx ; LPBYTE
		mov	[esp+38h+lpSubKey], offset aProxy_type ; "proxy_type"
		mov	[esp+38h+hKey],	eax ; HKEY
		call	sub_40B60A
		movzx	eax, word ptr [ebp+var_14]
		cmp	ax, 30h
		jnz	short loc_40A406
		mov	ds:dword_42D748, 0
		jmp	short loc_40A430
; ---------------------------------------------------------------------------

loc_40A406:				; CODE XREF: sub_40A2CD+12Bj
		movzx	eax, word ptr [ebp+var_14]
		cmp	ax, 31h
		jnz	short loc_40A41C
		mov	ds:dword_42D748, 1
		jmp	short loc_40A430
; ---------------------------------------------------------------------------

loc_40A41C:				; CODE XREF: sub_40A2CD+141j
		movzx	eax, word ptr [ebp+var_14]
		cmp	ax, 32h
		jnz	short loc_40A430
		mov	ds:dword_42D748, 2

loc_40A430:				; CODE XREF: sub_40A2CD+137j
					; sub_40A2CD+14Dj ...
		movzx	eax, word ptr [ebp+var_18]
		cmp	ax, 30h
		setnz	al
		movzx	eax, al
		mov	ds:dword_42D74C, eax
		mov	eax, [ebp+var_10]
		mov	[esp+38h+hKey],	eax ; hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4

locret_40A453:				; CODE XREF: sub_40A2CD+4Dj
		leave
		retn
sub_40A2CD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	sub_40A455(HWND	hDlg, UINT, WPARAM, HWND)
sub_40A455	proc near		; DATA XREF: sub_40A686+19o

hWnd		= dword	ptr -48h
lpString	= dword	ptr -44h
hData		= dword	ptr -40h
var_3C		= byte ptr -3Ch
Str		= byte ptr -34h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
hDlg		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	eax, [ebp+arg_4]
		cmp	eax, 82h
		jz	loc_40A660
		cmp	eax, 82h
		ja	short loc_40A47F
		cmp	eax, 10h
		jz	loc_40A63F
		jmp	loc_40A67A
; ---------------------------------------------------------------------------

loc_40A47F:				; CODE XREF: sub_40A455+1Aj
		cmp	eax, 110h
		jz	short loc_40A492
		cmp	eax, 111h
		jz	short loc_40A4EB
		jmp	loc_40A67A
; ---------------------------------------------------------------------------

loc_40A492:				; CODE XREF: sub_40A455+2Fj
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_C], eax
		mov	eax, lpString
		mov	edx, [ebp+var_C]
		mov	[esp+48h+hData], edx ; hData
		mov	[esp+48h+lpString], eax	; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+48h+hWnd],	eax ; hWnd
		mov	eax, ds:SetPropW
		call	eax ; SetPropW
		sub	esp, 0Ch
		mov	eax, [ebp+var_C]
		mov	eax, [eax+844h]
		cmp	eax, 7
		jnz	short loc_40A4D6
		mov	eax, [ebp+hDlg]
		mov	[esp+48h+hWnd],	eax ; hWnd
		call	sub_40CDC4
		jmp	loc_40A67A
; ---------------------------------------------------------------------------

loc_40A4D6:				; CODE XREF: sub_40A455+6Fj
		mov	eax, [ebp+hDlg]
		mov	[esp+48h+hWnd],	eax ; hWnd
		mov	eax, ds:SetForegroundWindow
		call	eax ; SetForegroundWindow
		sub	esp, 4
		jmp	loc_40A67A
; ---------------------------------------------------------------------------

loc_40A4EB:				; CODE XREF: sub_40A455+36j
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		cmp	eax, 1
		jz	short loc_40A55E
		cmp	eax, 0FBh
		jz	short loc_40A502
		jmp	loc_40A67A
; ---------------------------------------------------------------------------

loc_40A502:				; CODE XREF: sub_40A455+A6j
		mov	eax, [ebp+arg_8]
		shr	eax, 10h
		cmp	ax, 400h
		jnz	short loc_40A559
		mov	eax, [ebp+arg_C]
		mov	[esp+48h+hWnd],	eax ; hWnd
		mov	eax, ds:GetWindowTextLengthW
		call	eax ; GetWindowTextLengthW
		sub	esp, 4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		setnz	al
		movzx	ebx, al
		mov	[esp+48h+lpString], 1 ;	nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+48h+hWnd],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+48h+lpString], ebx	; bEnable
		mov	[esp+48h+hWnd],	eax ; hWnd
		mov	eax, ds:EnableWindow
		call	eax ; EnableWindow
		sub	esp, 8
		jmp	loc_40A63D
; ---------------------------------------------------------------------------

loc_40A559:				; CODE XREF: sub_40A455+B7j
		jmp	loc_40A63D
; ---------------------------------------------------------------------------

loc_40A55E:				; CODE XREF: sub_40A455+9Fj
		mov	eax, lpString
		mov	[esp+48h+lpString], eax	; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+48h+hWnd],	eax ; hWnd
		mov	eax, ds:GetPropW
		call	eax ; GetPropW
		sub	esp, 8
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax+850h]
		test	eax, eax
		jnz	short loc_40A58E
		mov	eax, offset aHttp ; "HTTP"
		jmp	short loc_40A593
; ---------------------------------------------------------------------------

loc_40A58E:				; CODE XREF: sub_40A455+130j
		mov	eax, offset aSocks ; "SOCKS"

loc_40A593:				; CODE XREF: sub_40A455+137j
		mov	dword ptr [ebp+var_14],	eax
		mov	eax, dword ptr [ebp+var_14]
		mov	dword ptr [esp+48h+var_3C], eax	; char
		mov	[esp+48h+hData], offset	aUsernameSProxy	; "username \"%s Proxy\" \"%%s\""
		mov	[esp+48h+lpString], 20h	; size_t
		lea	eax, [ebp+Str]
		mov	[esp+48h+hWnd],	eax ; char *
		call	sub_4096F8
		mov	dword ptr [esp+48h+var_3C], 0FBh ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+48h+hData], eax ; hDlg
		lea	eax, [ebp+Str]
		mov	[esp+48h+lpString], eax	; Str
		mov	eax, [ebp+var_C]
		mov	[esp+48h+hWnd],	eax ; int
		call	sub_40CAF3
		mov	eax, dword ptr [ebp+var_14]
		mov	dword ptr [esp+48h+var_3C], eax	; char
		mov	[esp+48h+hData], offset	aPasswordSProxy	; "password \"%s Proxy\" \"%%s\""
		mov	[esp+48h+lpString], 20h	; size_t
		lea	eax, [ebp+Str]
		mov	[esp+48h+hWnd],	eax ; char *
		call	sub_4096F8
		mov	dword ptr [esp+48h+var_3C], 0FCh ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+48h+hData], eax ; hDlg
		lea	eax, [ebp+Str]
		mov	[esp+48h+lpString], eax	; Str
		mov	eax, [ebp+var_C]
		mov	[esp+48h+hWnd],	eax ; int
		call	sub_40CAF3
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		mov	[esp+48h+lpString], eax	; nResult
		mov	eax, [ebp+hDlg]
		mov	[esp+48h+hWnd],	eax ; hDlg
		mov	eax, ds:EndDialog
		call	eax ; EndDialog
		sub	esp, 8
		mov	eax, 1
		jmp	short loc_40A67F
; ---------------------------------------------------------------------------

loc_40A63D:				; CODE XREF: sub_40A455+FFj
					; sub_40A455:loc_40A559j
		jmp	short loc_40A67A
; ---------------------------------------------------------------------------

loc_40A63F:				; CODE XREF: sub_40A455+1Fj
		mov	eax, [ebp+arg_8]
		movzx	eax, ax
		mov	[esp+48h+lpString], eax	; nResult
		mov	eax, [ebp+hDlg]
		mov	[esp+48h+hWnd],	eax ; hDlg
		mov	eax, ds:EndDialog
		call	eax ; EndDialog
		sub	esp, 8
		mov	eax, 1
		jmp	short loc_40A67F
; ---------------------------------------------------------------------------

loc_40A660:				; CODE XREF: sub_40A455+Fj
		mov	eax, lpString
		mov	[esp+48h+lpString], eax	; lpString
		mov	eax, [ebp+hDlg]
		mov	[esp+48h+hWnd],	eax ; hWnd
		mov	eax, ds:RemovePropW
		call	eax ; RemovePropW
		sub	esp, 8
		nop

loc_40A67A:				; CODE XREF: sub_40A455+25j
					; sub_40A455+38j ...
		mov	eax, 0

loc_40A67F:				; CODE XREF: sub_40A455+1E6j
					; sub_40A455+209j
		mov	ebx, [ebp+var_4]
		leave
		retn	10h
sub_40A455	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40A686(LPARAM, int)
sub_40A686	proc near		; CODE XREF: sub_402DD9+BAp
					; sub_402DD9+E6p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[eax+850h], edx
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_10], eax ;	LPARAM
		mov	[esp+18h+var_14], offset sub_40A455 ; DLGPROC
		mov	[esp+18h+var_18], 0FAh ; int
		call	sub_405503
		leave
		retn
sub_40A686	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40A6B5	proc near		; CODE XREF: sub_40A6C4+DBp
					; sub_40A6C4+12Fp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	eax, off_40F240[eax*4]
		pop	ebp
		retn
sub_40A6B5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40A6C4	proc near		; CODE XREF: sub_40AACC+12Ap

pProxyConfig	= dword	ptr -88h
ppwstrAutoConfigUrl= dword ptr -84h
pszProxyW	= dword	ptr -80h
pszProxyBypassW	= dword	ptr -7Ch
dwFlags		= dword	ptr -78h
pAutoProxyOptions= WINHTTP_AUTOPROXY_OPTIONS ptr -60h
pProxyInfo	= WINHTTP_PROXY_INFO ptr -48h
var_3C		= WINHTTP_CURRENT_USER_IE_PROXY_CONFIG ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Dest		= dword	ptr -24h
Count		= dword	ptr -20h
hSession	= dword	ptr -1Ch
dwAutoDetectFlags= dword ptr -18h
hMem		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 88h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 1
		mov	[ebp+var_2C], 0
		lea	eax, [ebp+var_3C]
		mov	[esp+88h+pProxyConfig],	eax ; pProxyConfig
		call	WinHttpGetIEProxyConfigForCurrentUser
		sub	esp, 4
		test	eax, eax
		jz	short loc_40A716
		mov	eax, [ebp+var_3C.lpszProxy]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_3C.fAutoDetect]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_3C.lpszAutoConfigUrl]
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_3C.lpszProxyBypass]
		mov	[esp+88h+pProxyConfig],	eax ; hMem
		mov	eax, ds:GlobalFree
		call	eax ; GlobalFree
		sub	esp, 4

loc_40A716:				; CODE XREF: sub_40A6C4+2Ej
		cmp	[ebp+var_10], 0
		jz	short loc_40A752
		mov	eax, [ebp+var_2C]
		mov	[ebp+hMem], eax
		mov	[ebp+dwAutoDetectFlags], 3
		lea	eax, [ebp+var_2C]
		mov	[esp+88h+ppwstrAutoConfigUrl], eax ; ppwstrAutoConfigUrl
		mov	eax, [ebp+dwAutoDetectFlags]
		mov	[esp+88h+pProxyConfig],	eax ; dwAutoDetectFlags
		call	WinHttpDetectAutoProxyConfigUrl
		sub	esp, 8
		test	eax, eax
		jz	short loc_40A752
		mov	eax, [ebp+hMem]
		mov	[esp+88h+pProxyConfig],	eax ; hMem
		mov	eax, ds:GlobalFree
		call	eax ; GlobalFree
		sub	esp, 4

loc_40A752:				; CODE XREF: sub_40A6C4+56j
					; sub_40A6C4+7Cj
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	loc_40A8C4
		mov	[esp+88h+dwFlags], 0 ; dwFlags
		mov	[esp+88h+pszProxyBypassW], 0 ; pszProxyBypassW
		mov	[esp+88h+pszProxyW], 0 ; pszProxyW
		mov	[esp+88h+ppwstrAutoConfigUrl], 1 ; dwAccessType
		mov	[esp+88h+pProxyConfig],	0 ; pszAgentW
		call	WinHttpOpen
		sub	esp, 14h
		mov	[ebp+hSession],	eax
		cmp	[ebp+hSession],	0
		jz	loc_40A8B4
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+pProxyConfig],	eax
		call	sub_40A6B5
		mov	edx, [ebp+arg_4]
		mov	[esp+88h+dwFlags], edx
		mov	[esp+88h+pszProxyBypassW], eax
		mov	[esp+88h+pszProxyW], offset Format ; "%"
		mov	[esp+88h+ppwstrAutoConfigUrl], 0 ; Count
		mov	[esp+88h+pProxyConfig],	0 ; Dest
		mov	eax, ds:_snwprintf
		call	eax ; _snwprintf
		add	eax, 1
		mov	[ebp+Count], eax
		mov	eax, [ebp+Count]
		add	eax, eax
		mov	[esp+88h+pProxyConfig],	eax ; Size
		call	malloc
		mov	[ebp+Dest], eax
		cmp	[ebp+Dest], 0
		jz	loc_40A8A6
		mov	eax, [ebp+arg_0]
		mov	[esp+88h+pProxyConfig],	eax
		call	sub_40A6B5
		mov	edx, [ebp+Count]
		mov	ecx, [ebp+arg_4]
		mov	[esp+88h+dwFlags], ecx
		mov	[esp+88h+pszProxyBypassW], eax
		mov	[esp+88h+pszProxyW], offset Format ; "%"
		mov	[esp+88h+ppwstrAutoConfigUrl], edx ; Count
		mov	eax, [ebp+Dest]
		mov	[esp+88h+pProxyConfig],	eax ; Dest
		mov	eax, ds:_snwprintf
		call	eax ; _snwprintf
		mov	eax, [ebp+var_C]
		mov	[ebp+var_28], eax
		mov	[ebp+pAutoProxyOptions.dwFlags], 2
		mov	[ebp+pAutoProxyOptions.dwAutoDetectFlags], 0
		mov	eax, [ebp+var_2C]
		mov	[ebp+pAutoProxyOptions.lpszAutoConfigUrl], eax
		mov	[ebp+pAutoProxyOptions.lpvReserved], 0
		mov	[ebp+pAutoProxyOptions.dwReserved], 0
		mov	[ebp+pAutoProxyOptions.fAutoLogonIfChallenged],	1
		lea	eax, [ebp+pProxyInfo]
		mov	[esp+88h+pszProxyBypassW], eax ; pProxyInfo
		lea	eax, [ebp+pAutoProxyOptions]
		mov	[esp+88h+pszProxyW], eax ; pAutoProxyOptions
		mov	eax, [ebp+Dest]
		mov	[esp+88h+ppwstrAutoConfigUrl], eax ; lpcwszUrl
		mov	eax, [ebp+hSession]
		mov	[esp+88h+pProxyConfig],	eax ; hSession
		call	WinHttpGetProxyForUrl
		sub	esp, 10h
		test	eax, eax
		jz	short loc_40A89B
		mov	eax, [ebp+var_28]
		mov	[esp+88h+pProxyConfig],	eax ; hMem
		mov	eax, ds:GlobalFree
		call	eax ; GlobalFree
		sub	esp, 4
		mov	eax, [ebp+pProxyInfo.lpszProxyBypass]
		mov	[esp+88h+pProxyConfig],	eax ; hMem
		mov	eax, ds:GlobalFree
		call	eax ; GlobalFree
		sub	esp, 4
		mov	eax, [ebp+pProxyInfo.lpszProxy]
		mov	[ebp+var_C], eax

loc_40A89B:				; CODE XREF: sub_40A6C4+1AFj
		mov	eax, [ebp+Dest]
		mov	[esp+88h+pProxyConfig],	eax ; Memory
		call	free

loc_40A8A6:				; CODE XREF: sub_40A6C4+123j
		mov	eax, [ebp+hSession]
		mov	[esp+88h+pProxyConfig],	eax ; hInternet
		call	WinHttpCloseHandle
		sub	esp, 4

loc_40A8B4:				; CODE XREF: sub_40A6C4+CFj
		mov	eax, [ebp+var_2C]
		mov	[esp+88h+pProxyConfig],	eax ; hMem
		mov	eax, ds:GlobalFree
		call	eax ; GlobalFree
		sub	esp, 4

loc_40A8C4:				; CODE XREF: sub_40A6C4+93j
		mov	eax, [ebp+var_C]
		leave
		retn
sub_40A6C4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40A8C9(wchar_t *, int, int, int, int)
sub_40A8C9	proc near		; CODE XREF: sub_40AACC+154p

Str		= dword	ptr -48h
Delim		= dword	ptr -44h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
Str1		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		cmp	[ebp+arg_0], 0
		jnz	short loc_40A8DA
		jmp	locret_40AACA
; ---------------------------------------------------------------------------

loc_40A8DA:				; CODE XREF: sub_40A8C9+Aj
		mov	[ebp+var_1C], offset asc_410A7A	; ";"
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+Delim], eax ; Delim
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+Str], eax ; Str
		call	wcstok
		mov	[ebp+Str1], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+48h+Str], eax
		call	sub_40A6B5
		mov	[ebp+var_20], eax
		mov	[esp+48h+Str], 1
		call	sub_40A6B5
		mov	[ebp+var_24], eax
		jmp	loc_40AAC0
; ---------------------------------------------------------------------------

loc_40A918:				; CODE XREF: sub_40A8C9+1FBj
		mov	[ebp+var_10], 0
		mov	[esp+48h+Delim], 3Dh ; Ch
		mov	eax, [ebp+Str1]
		mov	[esp+48h+Str], eax ; Str
		call	wcschr
		mov	[ebp+var_28], eax
		mov	[esp+48h+Delim], offset	asc_410A80 ; "://"
		mov	eax, [ebp+Str1]
		mov	[esp+48h+Str], eax ; Str
		call	wcsstr
		mov	[ebp+var_2C], eax
		cmp	[ebp+var_28], 0
		jnz	short loc_40A957
		cmp	[ebp+var_2C], 0
		jz	short loc_40A9A4

loc_40A957:				; CODE XREF: sub_40A8C9+86j
		mov	eax, [ebp+var_20]
		mov	[esp+48h+Delim], eax ; wchar_t *
		mov	eax, [ebp+Str1]
		mov	[esp+48h+Str], eax ; Str1
		call	sub_40CD93
		test	eax, eax
		jz	short loc_40A976
		mov	[ebp+var_10], 1
		jmp	short loc_40A9A2
; ---------------------------------------------------------------------------

loc_40A976:				; CODE XREF: sub_40A8C9+A2j
		cmp	[ebp+arg_4], 0
		jnz	short loc_40A9A2
		mov	eax, [ebp+var_24]
		mov	[esp+48h+Delim], eax ; wchar_t *
		mov	eax, [ebp+Str1]
		mov	[esp+48h+Str], eax ; Str1
		call	sub_40CD93
		test	eax, eax
		jz	short loc_40A9A2
		mov	[ebp+var_10], 1
		mov	[ebp+arg_4], 1
		jmp	short loc_40A9B1
; ---------------------------------------------------------------------------

loc_40A9A2:				; CODE XREF: sub_40A8C9+ABj
					; sub_40A8C9+B1j ...
		jmp	short loc_40A9B1
; ---------------------------------------------------------------------------

loc_40A9A4:				; CODE XREF: sub_40A8C9+8Cj
		cmp	[ebp+arg_4], 0
		jnz	short loc_40A9B1
		mov	[ebp+var_10], 1

loc_40A9B1:				; CODE XREF: sub_40A8C9+D7j
					; sub_40A8C9:loc_40A9A2j ...
		cmp	[ebp+var_10], 0
		jz	loc_40AAAA
		mov	eax, [ebp+Str1]
		mov	[ebp+var_14], eax
		cmp	[ebp+var_2C], 0
		jz	short loc_40A9D2
		mov	eax, [ebp+var_2C]
		add	eax, 6
		mov	[ebp+var_14], eax
		jmp	short loc_40A9E1
; ---------------------------------------------------------------------------

loc_40A9D2:				; CODE XREF: sub_40A8C9+FCj
		cmp	[ebp+var_28], 0
		jz	short loc_40A9E1
		mov	eax, [ebp+var_28]
		add	eax, 2
		mov	[ebp+var_14], eax

loc_40A9E1:				; CODE XREF: sub_40A8C9+107j
					; sub_40A8C9+10Dj
		mov	eax, [ebp+var_14]
		movzx	eax, word ptr [eax]
		cmp	ax, 5Bh
		jnz	short loc_40AA3B
		add	[ebp+var_14], 2
		mov	[esp+48h+Delim], 5Dh ; Ch
		mov	eax, [ebp+var_14]
		mov	[esp+48h+Str], eax ; Str
		call	wcschr
		mov	[ebp+var_30], eax
		cmp	[ebp+var_30], 0
		jnz	short loc_40AA12
		jmp	loc_40AAC0
; ---------------------------------------------------------------------------

loc_40AA12:				; CODE XREF: sub_40A8C9+142j
		mov	eax, [ebp+var_30]
		lea	edx, [eax+2]
		mov	[ebp+var_30], edx
		mov	word ptr [eax],	0
		mov	eax, [ebp+var_30]
		movzx	eax, word ptr [eax]
		cmp	ax, 3Ah
		jnz	short loc_40AA31
		mov	eax, [ebp+var_30]
		jmp	short loc_40AA36
; ---------------------------------------------------------------------------

loc_40AA31:				; CODE XREF: sub_40A8C9+161j
		mov	eax, 0

loc_40AA36:				; CODE XREF: sub_40A8C9+166j
		mov	[ebp+var_18], eax
		jmp	short loc_40AA5F
; ---------------------------------------------------------------------------

loc_40AA3B:				; CODE XREF: sub_40A8C9+122j
		mov	[esp+48h+Delim], 3Ah ; Ch
		mov	eax, [ebp+var_14]
		mov	[esp+48h+Str], eax ; Str
		call	wcsrchr
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_40AA5F
		mov	eax, [ebp+var_18]
		mov	word ptr [eax],	0

loc_40AA5F:				; CODE XREF: sub_40A8C9+170j
					; sub_40A8C9+18Cj
		cmp	[ebp+arg_4], 0
		jnz	short loc_40AA6C
		mov	eax, offset aHttp ; "HTTP"
		jmp	short loc_40AA71
; ---------------------------------------------------------------------------

loc_40AA6C:				; CODE XREF: sub_40A8C9+19Aj
		mov	eax, offset aSocks ; "SOCKS"

loc_40AA71:				; CODE XREF: sub_40A8C9+1A1j
		mov	edx, [ebp+arg_8]
		mov	[edx], eax
		mov	eax, [ebp+arg_C]
		mov	edx, [ebp+var_14]
		mov	[eax], edx
		cmp	[ebp+var_18], 0
		jz	short loc_40AA91
		mov	eax, [ebp+var_18]
		lea	edx, [eax+2]
		mov	eax, [ebp+arg_10]
		mov	[eax], edx
		jmp	short locret_40AACA
; ---------------------------------------------------------------------------

loc_40AA91:				; CODE XREF: sub_40A8C9+1B9j
		cmp	[ebp+arg_4], 0
		jnz	short loc_40AA9E
		mov	eax, offset a80	; "80"
		jmp	short loc_40AAA3
; ---------------------------------------------------------------------------

loc_40AA9E:				; CODE XREF: sub_40A8C9+1CCj
		mov	eax, offset a1	; "1"

loc_40AAA3:				; CODE XREF: sub_40A8C9+1D3j
		mov	edx, [ebp+arg_10]
		mov	[edx], eax
		jmp	short locret_40AACA
; ---------------------------------------------------------------------------

loc_40AAAA:				; CODE XREF: sub_40A8C9+ECj
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+Delim], eax ; Delim
		mov	[esp+48h+Str], 0 ; Str
		call	wcstok
		mov	[ebp+Str1], eax

loc_40AAC0:				; CODE XREF: sub_40A8C9+4Aj
					; sub_40A8C9+144j
		cmp	[ebp+Str1], 0
		jnz	loc_40A918

locret_40AACA:				; CODE XREF: sub_40A8C9+Cj
					; sub_40A8C9+1C6j ...
		leave
		retn
sub_40A8C9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40AACC(int, char *)
sub_40AACC	proc near		; DATA XREF: sub_401623+68o

Str		= dword	ptr -0C8h
Val		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= byte ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_A8		= byte ptr -0A8h
var_29		= byte ptr -29h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
hMem		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0C8h
		mov	[esp+0C8h+Val],	2Ch ; Val
		mov	eax, [ebp+arg_4]
		mov	[esp+0C8h+Str],	eax ; Str
		call	strchr
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_40AAF6
		jmp	locret_40AC91
; ---------------------------------------------------------------------------

loc_40AAF6:				; CODE XREF: sub_40AACC+23j
		add	[ebp+var_10], 1
		mov	eax, [ebp+var_10]
		mov	[ebp+var_14], eax
		mov	[esp+0C8h+Val],	2Ch ; Val
		mov	eax, [ebp+var_10]
		mov	[esp+0C8h+Str],	eax ; Str
		call	strchr
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_40AB21
		jmp	locret_40AC91
; ---------------------------------------------------------------------------

loc_40AB21:				; CODE XREF: sub_40AACC+4Ej
		mov	eax, [ebp+var_10]
		mov	byte ptr [eax],	0
		add	[ebp+var_10], 1
		mov	eax, [ebp+var_10]
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_18]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_40AB40
		jmp	locret_40AC91
; ---------------------------------------------------------------------------

loc_40AB40:				; CODE XREF: sub_40AACC+6Dj
		mov	dword ptr [ebp+var_20],	offset aNone ; "NONE"
		mov	[ebp+var_24], offset Class
		mov	[ebp+var_28], offset Class
		mov	[ebp+hMem], 0
		mov	eax, ds:dword_42D748
		cmp	eax, 2
		jnz	short loc_40ABC1
		mov	eax, ds:dword_42D74C
		test	eax, eax
		jnz	short loc_40ABA0
		mov	[esp+0C8h+Val],	offset aTcp ; "TCP"
		mov	eax, [ebp+var_14]
		mov	[esp+0C8h+Str],	eax ; char *
		call	sub_40CD71
		test	eax, eax
		jz	short loc_40ABA0
		mov	dword ptr [ebp+var_20],	offset aHttp ; "HTTP"
		mov	[ebp+var_24], offset word_42D750
		mov	[ebp+var_28], offset word_42D818
		jmp	loc_40AC25
; ---------------------------------------------------------------------------

loc_40ABA0:				; CODE XREF: sub_40AACC+A1j
					; sub_40AACC+B8j
		mov	eax, ds:dword_42D74C
		cmp	eax, 1
		jnz	short loc_40AC25
		mov	dword ptr [ebp+var_20],	offset aSocks ;	"SOCKS"
		mov	[ebp+var_24], offset word_42D824
		mov	[ebp+var_28], offset word_42D8EC
		jmp	short loc_40AC25
; ---------------------------------------------------------------------------

loc_40ABC1:				; CODE XREF: sub_40AACC+98j
		mov	eax, ds:dword_42D748
		cmp	eax, 1
		jnz	short loc_40AC25
		mov	[esp+0C8h+Val],	offset aTcp ; "TCP"
		mov	eax, [ebp+var_14]
		mov	[esp+0C8h+Str],	eax ; char *
		call	sub_40CD71
		test	eax, eax
		setz	al
		movzx	eax, al
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+0C8h+Val],	eax
		mov	eax, [ebp+var_1C]
		mov	[esp+0C8h+Str],	eax
		call	sub_40A6C4
		mov	[ebp+hMem], eax
		lea	eax, [ebp+var_28]
		mov	[esp+0C8h+var_B8], eax ; int
		lea	eax, [ebp+var_24]
		mov	dword ptr [esp+0C8h+var_BC], eax ; int
		lea	eax, [ebp+var_20]
		mov	[esp+0C8h+var_C0], eax ; int
		mov	eax, [ebp+var_1C]
		mov	[esp+0C8h+Val],	eax ; int
		mov	eax, [ebp+hMem]
		mov	[esp+0C8h+Str],	eax ; wchar_t *
		call	sub_40A8C9

loc_40AC25:				; CODE XREF: sub_40AACC+CFj
					; sub_40AACC+DCj ...
		mov	ecx, [ebp+var_28]
		mov	edx, [ebp+var_24]
		mov	eax, dword ptr [ebp+var_20]
		mov	[esp+0C8h+var_B4], ecx
		mov	[esp+0C8h+var_B8], edx
		mov	dword ptr [esp+0C8h+var_BC], eax ; char
		mov	[esp+0C8h+var_C0], offset aProxySSS ; "proxy %s	%S %S"
		mov	[esp+0C8h+Val],	80h ; size_t
		lea	eax, [ebp+var_A8]
		mov	[esp+0C8h+Str],	eax ; char *
		call	sub_4096F8
		mov	[ebp+var_29], 0
		mov	dword ptr [esp+0C8h+var_BC], 0 ; int
		mov	[esp+0C8h+var_C0], 0 ; int
		lea	eax, [ebp+var_A8]
		mov	[esp+0C8h+Val],	eax ; Str
		mov	eax, [ebp+arg_0]
		mov	[esp+0C8h+Str],	eax ; int
		call	sub_40C08F
		mov	eax, [ebp+hMem]
		mov	[esp+0C8h+Str],	eax ; hMem
		mov	eax, ds:GlobalFree
		call	eax ; GlobalFree
		sub	esp, 4

locret_40AC91:				; CODE XREF: sub_40AACC+25j
					; sub_40AACC+50j ...
		leave
		retn
sub_40AACC	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40AC94(wchar_t *, size_t, wchar_t *, char)
sub_40AC94	proc near		; CODE XREF: sub_40ACDF+125p
					; sub_40ACDF+1B3p ...

Dest		= dword	ptr -28h
Count		= dword	ptr -24h
Format		= dword	ptr -20h
Args		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+Args],	eax ; Args
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+Format], eax ;	Format
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Count], eax ; Count
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Dest],	eax ; Dest
		mov	eax, ds:_vsnwprintf
		call	eax ; _vsnwprintf
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_4]
		add	eax, 7FFFFFFFh
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	word ptr [eax],	0
		mov	eax, [ebp+var_C]
		leave
		retn
sub_40AC94	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40ACDF	proc near		; CODE XREF: sub_401623:loc_401793p

lpBuffer	= dword	ptr -648h
uSize		= dword	ptr -644h
ulOptions	= dword	ptr -640h
samDesired	= dword	ptr -63Ch
phkResult	= dword	ptr -638h
var_624		= dword	ptr -624h
Str		= word ptr -620h
Source		= word ptr -418h
Buffer		= word ptr -210h

		push	ebp
		mov	ebp, esp
		sub	esp, 648h
		mov	[esp+648h+uSize], 104h ; uSize
		lea	eax, [ebp+Buffer]
		mov	[esp+648h+lpBuffer], eax ; lpBuffer
		mov	eax, ds:GetWindowsDirectoryW
		call	eax ; GetWindowsDirectoryW
		sub	esp, 8
		test	eax, eax
		jnz	short loc_40AD1D
		mov	[esp+648h+lpBuffer], 709h
		call	sub_405340
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40AD1D:				; CODE XREF: sub_40ACDF+26j
		lea	eax, [ebp+var_624]
		mov	[esp+648h+phkResult], eax ; phkResult
		mov	[esp+648h+samDesired], 20019h ;	samDesired
		mov	[esp+648h+ulOptions], 0	; ulOptions
		mov	[esp+648h+uSize], offset aSoftwareOpenvp ; "SOFTWARE\\OpenVPN"
		mov	[esp+648h+lpBuffer], 80000002h ; hKey
		mov	eax, ds:RegOpenKeyExW
		call	eax ; RegOpenKeyExW
		sub	esp, 14h
		test	eax, eax
		jz	short loc_40AD6A
		mov	[esp+648h+lpBuffer], 70Bh
		call	sub_405340
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40AD6A:				; CODE XREF: sub_40ACDF+73j
		mov	eax, [ebp+var_624]
		mov	[esp+648h+samDesired], 104h ; int
		lea	edx, [ebp+Str]
		mov	[esp+648h+ulOptions], edx ; LPBYTE
		mov	[esp+648h+uSize], offset word_410AEA ; LPCWSTR
		mov	[esp+648h+lpBuffer], eax ; HKEY
		call	sub_40B60A
		test	eax, eax
		jnz	short loc_40ADAC
		mov	[esp+648h+lpBuffer], 70Ch
		call	sub_405340
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40ADAC:				; CODE XREF: sub_40ACDF+B5j
		lea	eax, [ebp+Str]
		mov	[esp+648h+lpBuffer], eax ; Str
		call	wcslen
		sub	eax, 1
		movzx	eax, [ebp+eax*2+Str]
		cmp	ax, 5Ch
		jz	short loc_40ADE1
		mov	[esp+648h+uSize], offset asc_410AEC ; "\\"
		lea	eax, [ebp+Str]
		mov	[esp+648h+lpBuffer], eax ; Dest
		call	wcscat

loc_40ADE1:				; CODE XREF: sub_40ACDF+EAj
		lea	eax, [ebp+Str]
		mov	[esp+648h+samDesired], eax ; char
		mov	[esp+648h+ulOptions], offset aSconfig ;	"%sconfig"
		mov	[esp+648h+uSize], 104h ; size_t
		lea	eax, [ebp+Source]
		mov	[esp+648h+lpBuffer], eax ; wchar_t *
		call	sub_40AC94
		mov	[esp+648h+samDesired], 104h ; int
		lea	eax, [ebp+Source]
		mov	[esp+648h+ulOptions], eax ; Source
		mov	[esp+648h+uSize], offset dword_42DB00 ;	LPCWSTR
		mov	[esp+648h+lpBuffer], offset ValueName ;	"c"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40AE3D
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40AE3D:				; CODE XREF: sub_40ACDF+152j
		mov	[esp+648h+samDesired], 10h ; int
		mov	[esp+648h+ulOptions], offset aOvpn ; "ovpn"
		mov	[esp+648h+uSize], offset Str ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aC_1 ; "c"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40AE6F
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40AE6F:				; CODE XREF: sub_40ACDF+184j
		lea	eax, [ebp+Str]
		mov	[esp+648h+samDesired], eax ; char
		mov	[esp+648h+ulOptions], offset aSbinOpenvpn_ex ; "%sbin\\openvpn.exe"
		mov	[esp+648h+uSize], 104h ; size_t
		lea	eax, [ebp+Source]
		mov	[esp+648h+lpBuffer], eax ; wchar_t *
		call	sub_40AC94
		mov	[esp+648h+samDesired], 104h ; int
		lea	eax, [ebp+Source]
		mov	[esp+648h+ulOptions], eax ; Source
		mov	[esp+648h+uSize], offset ApplicationName ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aExe_path ;	"exe_path"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40AECB
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40AECB:				; CODE XREF: sub_40ACDF+1E0j
		lea	eax, [ebp+Str]
		mov	[esp+648h+samDesired], eax ; char
		mov	[esp+648h+ulOptions], offset asc_410B6E	; "%"
		mov	[esp+648h+uSize], 104h ; size_t
		lea	eax, [ebp+Source]
		mov	[esp+648h+lpBuffer], eax ; wchar_t *
		call	sub_40AC94
		mov	[esp+648h+samDesired], 104h ; int
		lea	eax, [ebp+Source]
		mov	[esp+648h+ulOptions], eax ; Source
		mov	[esp+648h+uSize], offset PathName ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset asc_410B7A ; "l"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40AF27
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40AF27:				; CODE XREF: sub_40ACDF+23Cj
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a0	; "0"
		mov	[esp+648h+uSize], offset word_42DFB0 ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset word_410B8E	; lpValueName
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40AF59
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40AF59:				; CODE XREF: sub_40ACDF+26Ej
		mov	[esp+648h+samDesired], 40h ; int
		mov	[esp+648h+ulOptions], offset aNormal_prior_0 ; "NORMAL_PRIORITY_CLASS"
		mov	[esp+648h+uSize], offset Str1 ;	LPCWSTR
		mov	[esp+648h+lpBuffer], offset aPriority ;	"priority"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40AF8B
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40AF8B:				; CODE XREF: sub_40ACDF+2A0j
		lea	eax, [ebp+Buffer]
		mov	[esp+648h+samDesired], eax ; char
		mov	[esp+648h+ulOptions], offset asc_410BE2	; "%"
		mov	[esp+648h+uSize], 104h ; size_t
		lea	eax, [ebp+Source]
		mov	[esp+648h+lpBuffer], eax ; wchar_t *
		call	sub_40AC94
		mov	[esp+648h+samDesired], 104h ; int
		lea	eax, [ebp+Source]
		mov	[esp+648h+ulOptions], eax ; Source
		mov	[esp+648h+uSize], offset dword_42DFB4 ;	LPCWSTR
		mov	[esp+648h+lpBuffer], offset aLog_viewer_0 ; "log_viewer"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40AFE7
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40AFE7:				; CODE XREF: sub_40ACDF+2FCj
		lea	eax, [ebp+Buffer]
		mov	[esp+648h+samDesired], eax ; char
		mov	[esp+648h+ulOptions], offset asc_410BE2	; "%"
		mov	[esp+648h+uSize], 104h ; size_t
		lea	eax, [ebp+Source]
		mov	[esp+648h+lpBuffer], eax ; wchar_t *
		call	sub_40AC94
		mov	[esp+648h+samDesired], 104h ; int
		lea	eax, [ebp+Source]
		mov	[esp+648h+ulOptions], eax ; Source
		mov	[esp+648h+uSize], offset dword_42E1BC ;	LPCWSTR
		mov	[esp+648h+lpBuffer], offset aE_1 ; "e"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B043
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B043:				; CODE XREF: sub_40ACDF+358j
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a1_0 ; "1"
		mov	[esp+648h+uSize], offset word_42E3C4 ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aAllow_edit_0 ; "allow_edit"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B075
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B075:				; CODE XREF: sub_40ACDF+38Aj
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a0	; "0"
		mov	[esp+648h+uSize], offset word_42E3C8 ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aA_0 ; "a"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B0A7
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B0A7:				; CODE XREF: sub_40ACDF+3BCj
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a1_0 ; "1"
		mov	[esp+648h+uSize], offset word_42E3CC ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aA_1 ; "a"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B0D9
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B0D9:				; CODE XREF: sub_40ACDF+3EEj
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a1_0 ; "1"
		mov	[esp+648h+uSize], offset word_42E3D0 ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aAllow_proxy_0 ; "allow_proxy"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B10B
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B10B:				; CODE XREF: sub_40ACDF+420j
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a0	; "0"
		mov	[esp+648h+uSize], offset word_42E3D8 ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aService_only ; "service_only"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B13D
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B13D:				; CODE XREF: sub_40ACDF+452j
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a1_0 ; "1"
		mov	[esp+648h+uSize], offset word_42E3DC ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aS_1 ; "s"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B16F
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B16F:				; CODE XREF: sub_40ACDF+484j
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a0	; "0"
		mov	[esp+648h+uSize], offset word_42E3D4 ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aSilent_conne_0 ; "silent_connection"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B1A1
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B1A1:				; CODE XREF: sub_40ACDF+4B6j
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a1_0 ; "1"
		mov	[esp+648h+uSize], offset word_42E3E0 ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aShow_script__0 ; "show_script_window"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B1D3
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B1D3:				; CODE XREF: sub_40ACDF+4E8j
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a0	; "0"
		mov	[esp+648h+uSize], offset word_42E3E8 ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aDisconnect_on_ ; "disconnect_on_suspend"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B205
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B205:				; CODE XREF: sub_40ACDF+51Aj
		mov	[esp+648h+samDesired], 2 ; int
		mov	[esp+648h+ulOptions], offset a3	; "3"
		mov	[esp+648h+uSize], offset word_42E3E4 ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aPassphrase_a_0 ; "passphrase_attempts"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B237
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B237:				; CODE XREF: sub_40ACDF+54Cj
		mov	[esp+648h+lpBuffer], offset word_42E3E4	; Str
		mov	eax, ds:_wtoi
		call	eax ; _wtoi
		mov	ds:dword_42D738, eax
		mov	eax, ds:dword_42D738
		test	eax, eax
		jle	short loc_40B25D
		mov	eax, ds:dword_42D738
		cmp	eax, 9
		jle	short loc_40B273

loc_40B25D:				; CODE XREF: sub_40ACDF+572j
		mov	[esp+648h+lpBuffer], 70Dh
		call	sub_405340
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B273:				; CODE XREF: sub_40ACDF+57Cj
		mov	[esp+648h+samDesired], 4 ; int
		mov	[esp+648h+ulOptions], offset a15 ; "15"
		mov	[esp+648h+uSize], offset word_42E3EC ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aConnectscrip_0 ; "connectscript_timeout"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B2A5
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B2A5:				; CODE XREF: sub_40ACDF+5BAj
		mov	[esp+648h+lpBuffer], offset word_42E3EC	; Str
		mov	eax, ds:_wtoi
		call	eax ; _wtoi
		mov	ds:dword_42D73C, eax
		mov	eax, ds:dword_42D73C
		test	eax, eax
		js	short loc_40B2CB
		mov	eax, ds:dword_42D73C
		cmp	eax, 63h
		jle	short loc_40B2E1

loc_40B2CB:				; CODE XREF: sub_40ACDF+5E0j
		mov	[esp+648h+lpBuffer], 70Eh
		call	sub_405340
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B2E1:				; CODE XREF: sub_40ACDF+5EAj
		mov	[esp+648h+samDesired], 4 ; int
		mov	[esp+648h+ulOptions], offset a10 ; "10"
		mov	[esp+648h+uSize], offset word_42E3F4 ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aDisconnectsc_0 ; "disconnectscript_timeout"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B313
		mov	eax, 0
		jmp	locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B313:				; CODE XREF: sub_40ACDF+628j
		mov	[esp+648h+lpBuffer], offset word_42E3F4	; Str
		mov	eax, ds:_wtoi
		call	eax ; _wtoi
		mov	ds:dword_42D740, eax
		mov	eax, ds:dword_42D740
		test	eax, eax
		jle	short loc_40B339
		mov	eax, ds:dword_42D740
		cmp	eax, 63h
		jle	short loc_40B34C

loc_40B339:				; CODE XREF: sub_40ACDF+64Ej
		mov	[esp+648h+lpBuffer], 70Fh
		call	sub_405340
		mov	eax, 0
		jmp	short locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B34C:				; CODE XREF: sub_40ACDF+658j
		mov	[esp+648h+samDesired], 4 ; int
		mov	[esp+648h+ulOptions], offset a10 ; "10"
		mov	[esp+648h+uSize], offset word_42E3FC ; LPCWSTR
		mov	[esp+648h+lpBuffer], offset aPreconnectsc_0 ; "preconnectscript_timeout"
		call	sub_40B3BB
		test	eax, eax
		jnz	short loc_40B37B
		mov	eax, 0
		jmp	short locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B37B:				; CODE XREF: sub_40ACDF+693j
		mov	[esp+648h+lpBuffer], offset word_42E3FC	; Str
		mov	eax, ds:_wtoi
		call	eax ; _wtoi
		mov	ds:dword_42D744, eax
		mov	eax, ds:dword_42D744
		test	eax, eax
		jle	short loc_40B3A1
		mov	eax, ds:dword_42D744
		cmp	eax, 63h
		jle	short loc_40B3B4

loc_40B3A1:				; CODE XREF: sub_40ACDF+6B6j
		mov	[esp+648h+lpBuffer], 710h
		call	sub_405340
		mov	eax, 0
		jmp	short locret_40B3B9
; ---------------------------------------------------------------------------

loc_40B3B4:				; CODE XREF: sub_40ACDF+6C0j
		mov	eax, 1

locret_40B3B9:				; CODE XREF: sub_40ACDF+39j
					; sub_40ACDF+86j ...
		leave
		retn
sub_40ACDF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40B3BB(LPCWSTR lpValueName, LPCWSTR, wchar_t *Source,	int)
sub_40B3BB	proc near		; CODE XREF: sub_40ACDF+14Bp
					; sub_40ACDF+17Dp ...

lpSrc		= dword	ptr -268h
lpDst		= dword	ptr -264h
nSize		= dword	ptr -260h
samDesired	= dword	ptr -25Ch
phkResult	= dword	ptr -258h
var_254		= dword	ptr -254h
lpSecurityAttributes= dword ptr	-250h
var_24C		= dword	ptr -24Ch
lpdwDisposition	= dword	ptr -248h
cbData		= dword	ptr -22Ch
Dst		= word ptr -228h
dwDisposition	= dword	ptr -20h
var_1C		= dword	ptr -1Ch
hKey		= dword	ptr -18h
Type		= dword	ptr -14h
var_10		= dword	ptr -10h
Count		= dword	ptr -0Ch
lpValueName	= dword	ptr  8
arg_4		= dword	ptr  0Ch
Source		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 268h
		mov	eax, [ebp+arg_C]
		add	eax, eax
		mov	[ebp+cbData], eax
		mov	eax, [ebp+arg_C]
		sub	eax, 1
		mov	[ebp+Count], eax
		mov	eax, [ebp+arg_4]
		movzx	eax, word ptr [eax]
		test	ax, ax
		jz	short loc_40B42B
		mov	[esp+268h+nSize], 104h ; nSize
		lea	eax, [ebp+Dst]
		mov	[esp+268h+lpDst], eax ;	lpDst
		mov	eax, [ebp+arg_4]
		mov	[esp+268h+lpSrc], eax ;	lpSrc
		mov	eax, ds:ExpandEnvironmentStringsW
		call	eax ; ExpandEnvironmentStringsW
		sub	esp, 0Ch
		mov	eax, [ebp+Count]
		mov	[esp+268h+nSize], eax ;	Count
		lea	eax, [ebp+Dst]
		mov	[esp+268h+lpDst], eax ;	Source
		mov	eax, [ebp+arg_4]
		mov	[esp+268h+lpSrc], eax ;	Dest
		call	wcsncpy
		mov	eax, 1
		jmp	locret_40B608
; ---------------------------------------------------------------------------

loc_40B42B:				; CODE XREF: sub_40B3BB+26j
		lea	eax, [ebp+hKey]
		mov	[esp+268h+phkResult], eax ; phkResult
		mov	[esp+268h+samDesired], 20019h ;	samDesired
		mov	[esp+268h+nSize], 0 ; ulOptions
		mov	[esp+268h+lpDst], offset aSoftwareOpen_0 ; "SOFTWARE\\OpenVPN-GUI"
		mov	[esp+268h+lpSrc], 80000002h ; hKey
		mov	eax, ds:RegOpenKeyExW
		call	eax ; RegOpenKeyExW
		sub	esp, 14h
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_40B4CD
		lea	eax, [ebp+dwDisposition]
		mov	[esp+268h+lpdwDisposition], eax	; lpdwDisposition
		lea	eax, [ebp+hKey]
		mov	[esp+268h+var_24C], eax	; phkResult
		mov	[esp+268h+lpSecurityAttributes], 0 ; lpSecurityAttributes
		mov	[esp+268h+var_254], 2001Fh ; samDesired
		mov	[esp+268h+phkResult], 0	; dwOptions
		mov	[esp+268h+samDesired], offset word_410AEA ; lpClass
		mov	[esp+268h+nSize], 0 ; Reserved
		mov	[esp+268h+lpDst], offset aSoftwareOpen_1 ; "Software\\OpenVPN-GUI"
		mov	[esp+268h+lpSrc], 80000002h ; hKey
		mov	eax, ds:RegCreateKeyExW
		call	eax ; RegCreateKeyExW
		sub	esp, 24h
		test	eax, eax
		jz	short loc_40B4CD
		mov	[esp+268h+lpSrc], 711h
		call	sub_405340
		mov	eax, 0
		jmp	locret_40B608
; ---------------------------------------------------------------------------

loc_40B4CD:				; CODE XREF: sub_40B3BB+A7j
					; sub_40B3BB+FAj
		mov	eax, [ebp+hKey]
		lea	edx, [ebp+cbData]
		mov	[esp+268h+var_254], edx	; lpcbData
		mov	edx, [ebp+arg_4]
		mov	[esp+268h+phkResult], edx ; lpData
		lea	edx, [ebp+Type]
		mov	[esp+268h+samDesired], edx ; lpType
		mov	[esp+268h+nSize], 0 ; lpReserved
		mov	edx, [ebp+lpValueName]
		mov	[esp+268h+lpDst], edx ;	lpValueName
		mov	[esp+268h+lpSrc], eax ;	hKey
		mov	eax, ds:RegQueryValueExW
		call	eax ; RegQueryValueExW
		sub	esp, 18h
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_40B519
		mov	eax, [ebp+Type]
		cmp	eax, 1
		jz	loc_40B5B5

loc_40B519:				; CODE XREF: sub_40B3BB+150j
		lea	eax, [ebp+var_1C]
		mov	[esp+268h+phkResult], eax ; phkResult
		mov	[esp+268h+samDesired], 2001Fh ;	samDesired
		mov	[esp+268h+nSize], 0 ; ulOptions
		mov	[esp+268h+lpDst], offset aSoftwareOpen_0 ; "SOFTWARE\\OpenVPN-GUI"
		mov	[esp+268h+lpSrc], 80000002h ; hKey
		mov	eax, ds:RegOpenKeyExW
		call	eax ; RegOpenKeyExW
		sub	esp, 14h
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_40B568
		mov	[esp+268h+lpSrc], 712h
		call	sub_405340
		mov	eax, 0
		jmp	locret_40B608
; ---------------------------------------------------------------------------

loc_40B568:				; CODE XREF: sub_40B3BB+195j
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+Source]
		mov	[esp+268h+nSize], edx ;	wchar_t	*
		mov	edx, [ebp+lpValueName]
		mov	[esp+268h+lpDst], edx ;	LPCWSTR
		mov	[esp+268h+lpSrc], eax ;	hKey
		call	sub_40B6C3
		test	eax, eax
		jnz	short loc_40B58C
		mov	eax, 0
		jmp	short locret_40B608
; ---------------------------------------------------------------------------

loc_40B58C:				; CODE XREF: sub_40B3BB+1C8j
		mov	eax, [ebp+Count]
		mov	[esp+268h+nSize], eax ;	Count
		mov	eax, [ebp+Source]
		mov	[esp+268h+lpDst], eax ;	Source
		mov	eax, [ebp+arg_4]
		mov	[esp+268h+lpSrc], eax ;	Dest
		call	wcsncpy
		mov	eax, [ebp+var_1C]
		mov	[esp+268h+lpSrc], eax ;	hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4

loc_40B5B5:				; CODE XREF: sub_40B3BB+158j
		mov	eax, [ebp+hKey]
		mov	[esp+268h+lpSrc], eax ;	hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4
		mov	[esp+268h+nSize], 104h ; nSize
		lea	eax, [ebp+Dst]
		mov	[esp+268h+lpDst], eax ;	lpDst
		mov	eax, [ebp+arg_4]
		mov	[esp+268h+lpSrc], eax ;	lpSrc
		mov	eax, ds:ExpandEnvironmentStringsW
		call	eax ; ExpandEnvironmentStringsW
		sub	esp, 0Ch
		mov	eax, [ebp+Count]
		mov	[esp+268h+nSize], eax ;	Count
		lea	eax, [ebp+Dst]
		mov	[esp+268h+lpDst], eax ;	Source
		mov	eax, [ebp+arg_4]
		mov	[esp+268h+lpSrc], eax ;	Dest
		call	wcsncpy
		mov	eax, 1

locret_40B608:				; CODE XREF: sub_40B3BB+6Bj
					; sub_40B3BB+10Dj ...
		leave
		retn
sub_40B3BB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40B60A(HKEY, LPCWSTR,	LPBYTE,	int)
sub_40B60A	proc near		; CODE XREF: sub_40A2CD+71p
					; sub_40A2CD+94p ...

hKey		= dword	ptr -38h
lpValueName	= dword	ptr -34h
lpReserved	= dword	ptr -30h
lpType		= dword	ptr -2Ch
lpData		= dword	ptr -28h
lpcbData	= dword	ptr -24h
cbData		= dword	ptr -14h
Type		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_C]
		add	eax, eax
		mov	[ebp+cbData], eax
		lea	eax, [ebp+cbData]
		mov	[esp+38h+lpcbData], eax	; lpcbData
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+lpData], eax ;	lpData
		lea	eax, [ebp+Type]
		mov	[esp+38h+lpType], eax ;	lpType
		mov	[esp+38h+lpReserved], 0	; lpReserved
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+lpValueName], eax ; lpValueName
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+hKey],	eax ; hKey
		mov	eax, ds:RegQueryValueExW
		call	eax ; RegQueryValueExW
		sub	esp, 18h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_40B65D
		mov	eax, [ebp+Type]
		cmp	eax, 1
		jz	short loc_40B664

loc_40B65D:				; CODE XREF: sub_40B60A+49j
		mov	eax, 0
		jmp	short locret_40B669
; ---------------------------------------------------------------------------

loc_40B664:				; CODE XREF: sub_40B60A+51j
		mov	eax, [ebp+cbData]
		shr	eax, 1

locret_40B669:				; CODE XREF: sub_40B60A+58j
		leave
		retn
sub_40B60A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40B66B(HKEY, LPCWSTR,	LPBYTE)
sub_40B66B	proc near		; CODE XREF: sub_404DB7+73p

hKey		= dword	ptr -38h
lpValueName	= dword	ptr -34h
lpReserved	= dword	ptr -30h
lpType		= dword	ptr -2Ch
lpData		= dword	ptr -28h
lpcbData	= dword	ptr -24h
cbData		= dword	ptr -14h
Type		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+cbData], 4
		lea	eax, [ebp+cbData]
		mov	[esp+38h+lpcbData], eax	; lpcbData
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+lpData], eax ;	lpData
		lea	eax, [ebp+Type]
		mov	[esp+38h+lpType], eax ;	lpType
		mov	[esp+38h+lpReserved], 0	; lpReserved
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+lpValueName], eax ; lpValueName
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+hKey],	eax ; hKey
		mov	eax, ds:RegQueryValueExW
		call	eax ; RegQueryValueExW
		sub	esp, 18h
		mov	[ebp+var_C], eax
		mov	eax, [ebp+Type]
		cmp	eax, 4
		jnz	short loc_40B6BC
		mov	eax, [ebp+var_C]
		jmp	short locret_40B6C1
; ---------------------------------------------------------------------------

loc_40B6BC:				; CODE XREF: sub_40B66B+4Aj
		mov	eax, 2

locret_40B6C1:				; CODE XREF: sub_40B66B+4Fj
		leave
		retn
sub_40B66B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40B6C3(HKEY hKey, LPCWSTR, wchar_t *)
sub_40B6C3	proc near		; CODE XREF: sub_40A02F+201p
					; sub_40A02F+21Bp ...

Str		= dword	ptr -38h
lpValueName	= dword	ptr -34h
Reserved	= dword	ptr -30h
dwType		= dword	ptr -2Ch
lpData		= dword	ptr -28h
cbData		= dword	ptr -24h
var_C		= dword	ptr -0Ch
hKey		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+Str], eax ; Str
		call	wcslen
		add	eax, 1
		add	eax, eax
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+cbData], eax ;	cbData
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+lpData], eax ;	lpData
		mov	[esp+38h+dwType], 1 ; dwType
		mov	[esp+38h+Reserved], 0 ;	Reserved
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+lpValueName], eax ; lpValueName
		mov	eax, [ebp+hKey]
		mov	[esp+38h+Str], eax ; hKey
		mov	eax, ds:RegSetValueExW
		call	eax ; RegSetValueExW
		sub	esp, 18h
		test	eax, eax
		jz	short loc_40B737
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+Reserved], eax
		mov	[esp+38h+lpValueName], offset aSoftwareNili_1 ;	"Software\\Nilings\\OpenVPN-GUI"
		mov	[esp+38h+Str], 714h
		call	sub_405340
		mov	eax, 0
		jmp	short locret_40B73C
; ---------------------------------------------------------------------------

loc_40B737:				; CODE XREF: sub_40B6C3+50j
		mov	eax, 1

locret_40B73C:				; CODE XREF: sub_40B6C3+72j
		leave
		retn
sub_40B6C3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40B73E(HKEY, LPCWSTR,	BYTE Data)
sub_40B73E	proc near		; CODE XREF: sub_404E66+8Bp

hKey		= dword	ptr -38h
lpValueName	= dword	ptr -34h
Reserved	= dword	ptr -30h
dwType		= dword	ptr -2Ch
lpData		= dword	ptr -28h
cbData		= dword	ptr -24h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
Data		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[esp+38h+cbData], 4 ; cbData
		lea	eax, [ebp+Data]
		mov	[esp+38h+lpData], eax ;	lpData
		mov	[esp+38h+dwType], 4 ; dwType
		mov	[esp+38h+Reserved], 0 ;	Reserved
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+lpValueName], eax ; lpValueName
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+hKey],	eax ; hKey
		mov	eax, ds:RegSetValueExW
		call	eax ; RegSetValueExW
		sub	esp, 18h
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_40B78A
		mov	eax, 1
		jmp	short locret_40B7AA
; ---------------------------------------------------------------------------

loc_40B78A:				; CODE XREF: sub_40B73E+43j
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+Reserved], eax
		mov	[esp+38h+lpValueName], offset aSoftwareNili_1 ;	"Software\\Nilings\\OpenVPN-GUI"
		mov	[esp+38h+hKey],	714h
		call	sub_405340
		mov	eax, 0

locret_40B7AA:				; CODE XREF: sub_40B73E+4Aj
		leave
		retn
sub_40B73E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40B7AC(wchar_t *, size_t, wchar_t *, char)
sub_40B7AC	proc near		; CODE XREF: sub_40B7F7+61p
					; sub_40B9DE+61p ...

Dest		= dword	ptr -28h
Count		= dword	ptr -24h
Format		= dword	ptr -20h
Args		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+Args],	eax ; Args
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+Format], eax ;	Format
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Count], eax ; Count
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Dest],	eax ; Dest
		mov	eax, ds:_vsnwprintf
		call	eax ; _vsnwprintf
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_4]
		add	eax, 7FFFFFFFh
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	word ptr [eax],	0
		mov	eax, [ebp+var_C]
		leave
		retn
sub_40B7AC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40B7F7(wchar_t *)
sub_40B7F7	proc near		; CODE XREF: sub_403F71+74p
					; sub_407370+B1p

Str		= dword	ptr -2C8h
Val		= dword	ptr -2C4h
Size		= dword	ptr -2C0h
lpThreadAttributes= dword ptr -2BCh
bInheritHandles	= dword	ptr -2B8h
dwCreationFlags	= dword	ptr -2B4h
lpEnvironment	= dword	ptr -2B0h
lpCurrentDirectory= dword ptr -2ACh
lpStartupInfo	= dword	ptr -2A8h
lpProcessInformation= dword ptr	-2A4h
var_28C		= byte ptr -28Ch
ExitCode	= dword	ptr -268h
CommandLine	= word ptr -264h
ProcessInformation= _PROCESS_INFORMATION ptr -64h
Dst		= dword	ptr -54h
var_28		= dword	ptr -28h
var_24		= word ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 2C4h
		mov	eax, [ebp+arg_0]
		mov	[esp+2C8h+Str],	eax ; Str
		call	wcslen
		mov	ebx, eax
		mov	[esp+2C8h+Str],	offset Str ; Str
		call	wcslen
		sub	ebx, eax
		mov	eax, ebx
		sub	eax, 1
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		add	edx, 410h
		mov	[esp+2C8h+dwCreationFlags], eax
		mov	eax, [ebp+var_10]
		mov	[esp+2C8h+bInheritHandles], eax
		mov	[esp+2C8h+lpThreadAttributes], edx ; char
		mov	[esp+2C8h+Size], offset	aS_S_pre_bat ; "%s\\%.*s_pre.bat"
		mov	[esp+2C8h+Val],	100h ; size_t
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+Str],	eax ; wchar_t *
		call	sub_40B7AC
		lea	eax, [ebp+var_28C]
		mov	[esp+2C8h+Val],	eax
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+Str],	eax
		mov	eax, ds:_wstat
		call	eax ; _wstat
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40B881
		jmp	loc_40B9D9
; ---------------------------------------------------------------------------

loc_40B881:				; CODE XREF: sub_40B7F7+83j
		mov	[esp+2C8h+Size], 44h ; Size
		mov	[esp+2C8h+Val],	0 ; Val
		lea	eax, [ebp+Dst]
		mov	[esp+2C8h+Str],	eax ; Dst
		call	memset
		mov	[esp+2C8h+Size], 10h ; Size
		mov	[esp+2C8h+Val],	0 ; Val
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+2C8h+Str],	eax ; Dst
		call	memset
		lea	eax, [ebp+Dst]
		mov	[esp+2C8h+Str],	eax ; lpStartupInfo
		mov	eax, ds:GetStartupInfoW
		call	eax ; GetStartupInfoW
		sub	esp, 4
		mov	[ebp+Dst], 44h
		mov	[ebp+var_28], 0
		mov	[ebp+var_24], 0Ah
		mov	[ebp+var_1C], 0
		mov	[ebp+var_18], 0
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+410h]
		movzx	eax, ds:word_42E3E0
		cmp	ax, 31h
		jnz	short loc_40B906
		mov	eax, 10h
		jmp	short loc_40B90B
; ---------------------------------------------------------------------------

loc_40B906:				; CODE XREF: sub_40B7F7+106j
		mov	eax, 8000000h

loc_40B90B:				; CODE XREF: sub_40B7F7+10Dj
		lea	edx, [ebp+ProcessInformation]
		mov	[esp+2C8h+lpProcessInformation], edx ; lpProcessInformation
		lea	edx, [ebp+Dst]
		mov	[esp+2C8h+lpStartupInfo], edx ;	lpStartupInfo
		mov	[esp+2C8h+lpCurrentDirectory], ecx ; lpCurrentDirectory
		mov	[esp+2C8h+lpEnvironment], 0 ; lpEnvironment
		mov	[esp+2C8h+dwCreationFlags], eax	; dwCreationFlags
		mov	[esp+2C8h+bInheritHandles], 1 ;	bInheritHandles
		mov	[esp+2C8h+lpThreadAttributes], 0 ; lpThreadAttributes
		mov	[esp+2C8h+Size], 0 ; lpProcessAttributes
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+Val],	eax ; lpCommandLine
		mov	[esp+2C8h+Str],	0 ; lpApplicationName
		mov	eax, ds:CreateProcessW
		call	eax ; CreateProcessW
		sub	esp, 28h
		test	eax, eax
		jnz	short loc_40B962
		jmp	short loc_40B9D9
; ---------------------------------------------------------------------------

loc_40B962:				; CODE XREF: sub_40B7F7+167j
		mov	[ebp+var_C], 0
		jmp	short loc_40B9AF
; ---------------------------------------------------------------------------

loc_40B96B:				; CODE XREF: sub_40B7F7+1C0j
		mov	eax, [ebp+ProcessInformation.hProcess]
		lea	edx, [ebp+ExitCode]
		mov	[esp+2C8h+Val],	edx ; lpExitCode
		mov	[esp+2C8h+Str],	eax ; hProcess
		mov	eax, ds:GetExitCodeProcess
		call	eax ; GetExitCodeProcess
		sub	esp, 8
		test	eax, eax
		jnz	short loc_40B98B
		jmp	short loc_40B9B9
; ---------------------------------------------------------------------------

loc_40B98B:				; CODE XREF: sub_40B7F7+190j
		mov	eax, [ebp+ExitCode]
		cmp	eax, 103h
		jz	short loc_40B99A
		jmp	short loc_40B9B9
; ---------------------------------------------------------------------------

loc_40B99A:				; CODE XREF: sub_40B7F7+19Fj
		mov	[esp+2C8h+Str],	3E8h ; dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4
		add	[ebp+var_C], 1

loc_40B9AF:				; CODE XREF: sub_40B7F7+172j
		mov	eax, ds:dword_42D744
		cmp	eax, [ebp+var_C]
		jge	short loc_40B96B

loc_40B9B9:				; CODE XREF: sub_40B7F7+192j
					; sub_40B7F7+1A1j
		mov	eax, [ebp+ProcessInformation.hThread]
		mov	[esp+2C8h+Str],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, [ebp+ProcessInformation.hProcess]
		mov	[esp+2C8h+Str],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

loc_40B9D9:				; CODE XREF: sub_40B7F7+85j
					; sub_40B7F7+169j
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_40B7F7	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40B9DE(wchar_t *, int)
sub_40B9DE	proc near		; CODE XREF: sub_4026B9+D5p
					; sub_407370+236p

Str		= dword	ptr -2C8h
nIDDlgItem	= dword	ptr -2C4h
lpString	= dword	ptr -2C0h
lpThreadAttributes= dword ptr -2BCh
bInheritHandles	= dword	ptr -2B8h
dwCreationFlags	= dword	ptr -2B4h
lpEnvironment	= dword	ptr -2B0h
lpCurrentDirectory= dword ptr -2ACh
lpStartupInfo	= dword	ptr -2A8h
lpProcessInformation= dword ptr	-2A4h
var_28C		= byte ptr -28Ch
ExitCode	= dword	ptr -268h
CommandLine	= word ptr -264h
ProcessInformation= _PROCESS_INFORMATION ptr -64h
Dst		= dword	ptr -54h
var_28		= dword	ptr -28h
var_24		= word ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 2C4h
		mov	eax, [ebp+arg_0]
		mov	[esp+2C8h+Str],	eax ; Str
		call	wcslen
		mov	ebx, eax
		mov	[esp+2C8h+Str],	offset Str ; Str
		call	wcslen
		sub	ebx, eax
		mov	eax, ebx
		sub	eax, 1
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		add	edx, 410h
		mov	[esp+2C8h+dwCreationFlags], eax
		mov	eax, [ebp+var_10]
		mov	[esp+2C8h+bInheritHandles], eax
		mov	[esp+2C8h+lpThreadAttributes], edx ; char
		mov	[esp+2C8h+lpString], offset aS_S_up_bat	; "%s\\%.*s_up.bat"
		mov	[esp+2C8h+nIDDlgItem], 100h ; size_t
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+Str],	eax ; wchar_t *
		call	sub_40B7AC
		lea	eax, [ebp+var_28C]
		mov	[esp+2C8h+nIDDlgItem], eax
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+Str],	eax
		mov	eax, ds:_wstat
		call	eax ; _wstat
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40BA68
		jmp	loc_40BC6C
; ---------------------------------------------------------------------------

loc_40BA68:				; CODE XREF: sub_40B9DE+83j
		cmp	[ebp+arg_4], 0
		jnz	short loc_40BA9C
		mov	[esp+2C8h+Str],	4DCh
		call	sub_40524A
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+890h]
		mov	[esp+2C8h+lpString], eax ; lpString
		mov	[esp+2C8h+nIDDlgItem], 0A1h ; nIDDlgItem
		mov	[esp+2C8h+Str],	edx ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch

loc_40BA9C:				; CODE XREF: sub_40B9DE+8Ej
		mov	[esp+2C8h+lpString], 44h ; Size
		mov	[esp+2C8h+nIDDlgItem], 0 ; Val
		lea	eax, [ebp+Dst]
		mov	[esp+2C8h+Str],	eax ; Dst
		call	memset
		mov	[esp+2C8h+lpString], 10h ; Size
		mov	[esp+2C8h+nIDDlgItem], 0 ; Val
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+2C8h+Str],	eax ; Dst
		call	memset
		lea	eax, [ebp+Dst]
		mov	[esp+2C8h+Str],	eax ; lpStartupInfo
		mov	eax, ds:GetStartupInfoW
		call	eax ; GetStartupInfoW
		sub	esp, 4
		mov	[ebp+Dst], 44h
		mov	[ebp+var_28], 0
		mov	[ebp+var_24], 0Ah
		mov	[ebp+var_1C], 0
		mov	[ebp+var_18], 0
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+410h]
		movzx	eax, ds:word_42E3E0
		cmp	ax, 31h
		jnz	short loc_40BB21
		mov	eax, 10h
		jmp	short loc_40BB26
; ---------------------------------------------------------------------------

loc_40BB21:				; CODE XREF: sub_40B9DE+13Aj
		mov	eax, 8000000h

loc_40BB26:				; CODE XREF: sub_40B9DE+141j
		lea	edx, [ebp+ProcessInformation]
		mov	[esp+2C8h+lpProcessInformation], edx ; lpProcessInformation
		lea	edx, [ebp+Dst]
		mov	[esp+2C8h+lpStartupInfo], edx ;	lpStartupInfo
		mov	[esp+2C8h+lpCurrentDirectory], ecx ; lpCurrentDirectory
		mov	[esp+2C8h+lpEnvironment], 0 ; lpEnvironment
		mov	[esp+2C8h+dwCreationFlags], eax	; dwCreationFlags
		mov	[esp+2C8h+bInheritHandles], 1 ;	bInheritHandles
		mov	[esp+2C8h+lpThreadAttributes], 0 ; lpThreadAttributes
		mov	[esp+2C8h+lpString], 0 ; lpProcessAttributes
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+nIDDlgItem], eax ; lpCommandLine
		mov	[esp+2C8h+Str],	0 ; lpApplicationName
		mov	eax, ds:CreateProcessW
		call	eax ; CreateProcessW
		sub	esp, 28h
		test	eax, eax
		jnz	short loc_40BB96
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+nIDDlgItem], eax
		mov	[esp+2C8h+Str],	4DEh
		call	sub_405340
		jmp	loc_40BC6C
; ---------------------------------------------------------------------------

loc_40BB96:				; CODE XREF: sub_40B9DE+19Bj
		mov	eax, ds:dword_42D73C
		test	eax, eax
		jnz	short loc_40BBA4
		jmp	loc_40BC4C
; ---------------------------------------------------------------------------

loc_40BBA4:				; CODE XREF: sub_40B9DE+1BFj
		mov	[ebp+var_C], 0
		jmp	short loc_40BC29
; ---------------------------------------------------------------------------

loc_40BBAD:				; CODE XREF: sub_40B9DE+253j
		mov	eax, [ebp+ProcessInformation.hProcess]
		lea	edx, [ebp+ExitCode]
		mov	[esp+2C8h+nIDDlgItem], edx ; lpExitCode
		mov	[esp+2C8h+Str],	eax ; hProcess
		mov	eax, ds:GetExitCodeProcess
		call	eax ; GetExitCodeProcess
		sub	esp, 8
		test	eax, eax
		jnz	short loc_40BBE3
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+nIDDlgItem], eax
		mov	[esp+2C8h+Str],	4DFh
		call	sub_405340
		jmp	short loc_40BC4C
; ---------------------------------------------------------------------------

loc_40BBE3:				; CODE XREF: sub_40B9DE+1EBj
		mov	eax, [ebp+ExitCode]
		cmp	eax, 103h
		jz	short loc_40BC14
		mov	eax, [ebp+ExitCode]
		test	eax, eax
		jz	short loc_40BC12
		mov	eax, [ebp+ExitCode]
		mov	[esp+2C8h+nIDDlgItem], eax
		mov	[esp+2C8h+Str],	4E0h
		call	sub_405340
		jmp	short loc_40BC4C
; ---------------------------------------------------------------------------

loc_40BC12:				; CODE XREF: sub_40B9DE+21Aj
		jmp	short loc_40BC4C
; ---------------------------------------------------------------------------

loc_40BC14:				; CODE XREF: sub_40B9DE+210j
		mov	[esp+2C8h+Str],	3E8h ; dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4
		add	[ebp+var_C], 1

loc_40BC29:				; CODE XREF: sub_40B9DE+1CDj
		mov	eax, ds:dword_42D73C
		cmp	eax, [ebp+var_C]
		jge	loc_40BBAD
		mov	eax, ds:dword_42D73C
		mov	[esp+2C8h+nIDDlgItem], eax
		mov	[esp+2C8h+Str],	4E1h
		call	sub_405340

loc_40BC4C:				; CODE XREF: sub_40B9DE+1C1j
					; sub_40B9DE+203j ...
		mov	eax, [ebp+ProcessInformation.hThread]
		mov	[esp+2C8h+Str],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, [ebp+ProcessInformation.hProcess]
		mov	[esp+2C8h+Str],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

loc_40BC6C:				; CODE XREF: sub_40B9DE+85j
					; sub_40B9DE+1B3j
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_40B9DE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40BC71(wchar_t *, int)
sub_40BC71	proc near		; CODE XREF: StartAddress+1E6p
					; sub_40760B+BAp

Str		= dword	ptr -2C8h
nIDDlgItem	= dword	ptr -2C4h
lpString	= dword	ptr -2C0h
lpThreadAttributes= dword ptr -2BCh
bInheritHandles	= dword	ptr -2B8h
dwCreationFlags	= dword	ptr -2B4h
lpEnvironment	= dword	ptr -2B0h
lpCurrentDirectory= dword ptr -2ACh
lpStartupInfo	= dword	ptr -2A8h
lpProcessInformation= dword ptr	-2A4h
var_28C		= byte ptr -28Ch
ExitCode	= dword	ptr -268h
CommandLine	= word ptr -264h
ProcessInformation= _PROCESS_INFORMATION ptr -64h
Dst		= dword	ptr -54h
var_28		= dword	ptr -28h
var_24		= word ptr -24h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 2C4h
		mov	eax, [ebp+arg_0]
		mov	[esp+2C8h+Str],	eax ; Str
		call	wcslen
		mov	ebx, eax
		mov	[esp+2C8h+Str],	offset Str ; Str
		call	wcslen
		sub	ebx, eax
		mov	eax, ebx
		sub	eax, 1
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_0]
		add	edx, 410h
		mov	[esp+2C8h+dwCreationFlags], eax
		mov	eax, [ebp+var_10]
		mov	[esp+2C8h+bInheritHandles], eax
		mov	[esp+2C8h+lpThreadAttributes], edx ; char
		mov	[esp+2C8h+lpString], offset aS_S_down_bat ; "%s\\%.*s_down.bat"
		mov	[esp+2C8h+nIDDlgItem], 100h ; size_t
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+Str],	eax ; wchar_t *
		call	sub_40B7AC
		lea	eax, [ebp+var_28C]
		mov	[esp+2C8h+nIDDlgItem], eax
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+Str],	eax
		mov	eax, ds:_wstat
		call	eax ; _wstat
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40BCFB
		jmp	loc_40BE87
; ---------------------------------------------------------------------------

loc_40BCFB:				; CODE XREF: sub_40BC71+83j
		cmp	[ebp+arg_4], 0
		jnz	short loc_40BD2F
		mov	[esp+2C8h+Str],	4DDh
		call	sub_40524A
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+890h]
		mov	[esp+2C8h+lpString], eax ; lpString
		mov	[esp+2C8h+nIDDlgItem], 0A1h ; nIDDlgItem
		mov	[esp+2C8h+Str],	edx ; hDlg
		mov	eax, ds:SetDlgItemTextW
		call	eax ; SetDlgItemTextW
		sub	esp, 0Ch

loc_40BD2F:				; CODE XREF: sub_40BC71+8Ej
		mov	[esp+2C8h+lpString], 44h ; Size
		mov	[esp+2C8h+nIDDlgItem], 0 ; Val
		lea	eax, [ebp+Dst]
		mov	[esp+2C8h+Str],	eax ; Dst
		call	memset
		mov	[esp+2C8h+lpString], 10h ; Size
		mov	[esp+2C8h+nIDDlgItem], 0 ; Val
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+2C8h+Str],	eax ; Dst
		call	memset
		lea	eax, [ebp+Dst]
		mov	[esp+2C8h+Str],	eax ; lpStartupInfo
		mov	eax, ds:GetStartupInfoW
		call	eax ; GetStartupInfoW
		sub	esp, 4
		mov	[ebp+Dst], 44h
		mov	[ebp+var_28], 0
		mov	[ebp+var_24], 0Ah
		mov	[ebp+var_1C], 0
		mov	[ebp+var_18], 0
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+410h]
		movzx	eax, ds:word_42E3E0
		cmp	ax, 31h
		jnz	short loc_40BDB4
		mov	eax, 10h
		jmp	short loc_40BDB9
; ---------------------------------------------------------------------------

loc_40BDB4:				; CODE XREF: sub_40BC71+13Aj
		mov	eax, 8000000h

loc_40BDB9:				; CODE XREF: sub_40BC71+141j
		lea	edx, [ebp+ProcessInformation]
		mov	[esp+2C8h+lpProcessInformation], edx ; lpProcessInformation
		lea	edx, [ebp+Dst]
		mov	[esp+2C8h+lpStartupInfo], edx ;	lpStartupInfo
		mov	[esp+2C8h+lpCurrentDirectory], ecx ; lpCurrentDirectory
		mov	[esp+2C8h+lpEnvironment], 0 ; lpEnvironment
		mov	[esp+2C8h+dwCreationFlags], eax	; dwCreationFlags
		mov	[esp+2C8h+bInheritHandles], 1 ;	bInheritHandles
		mov	[esp+2C8h+lpThreadAttributes], 0 ; lpThreadAttributes
		mov	[esp+2C8h+lpString], 0 ; lpProcessAttributes
		lea	eax, [ebp+CommandLine]
		mov	[esp+2C8h+nIDDlgItem], eax ; lpCommandLine
		mov	[esp+2C8h+Str],	0 ; lpApplicationName
		mov	eax, ds:CreateProcessW
		call	eax ; CreateProcessW
		sub	esp, 28h
		test	eax, eax
		jnz	short loc_40BE10
		jmp	short loc_40BE87
; ---------------------------------------------------------------------------

loc_40BE10:				; CODE XREF: sub_40BC71+19Bj
		mov	[ebp+var_C], 0
		jmp	short loc_40BE5D
; ---------------------------------------------------------------------------

loc_40BE19:				; CODE XREF: sub_40BC71+1F4j
		mov	eax, [ebp+ProcessInformation.hProcess]
		lea	edx, [ebp+ExitCode]
		mov	[esp+2C8h+nIDDlgItem], edx ; lpExitCode
		mov	[esp+2C8h+Str],	eax ; hProcess
		mov	eax, ds:GetExitCodeProcess
		call	eax ; GetExitCodeProcess
		sub	esp, 8
		test	eax, eax
		jnz	short loc_40BE39
		jmp	short loc_40BE67
; ---------------------------------------------------------------------------

loc_40BE39:				; CODE XREF: sub_40BC71+1C4j
		mov	eax, [ebp+ExitCode]
		cmp	eax, 103h
		jz	short loc_40BE48
		jmp	short loc_40BE67
; ---------------------------------------------------------------------------

loc_40BE48:				; CODE XREF: sub_40BC71+1D3j
		mov	[esp+2C8h+Str],	3E8h ; dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4
		add	[ebp+var_C], 1

loc_40BE5D:				; CODE XREF: sub_40BC71+1A6j
		mov	eax, ds:dword_42D740
		cmp	eax, [ebp+var_C]
		jge	short loc_40BE19

loc_40BE67:				; CODE XREF: sub_40BC71+1C6j
					; sub_40BC71+1D5j
		mov	eax, [ebp+ProcessInformation.hThread]
		mov	[esp+2C8h+Str],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		mov	eax, [ebp+ProcessInformation.hProcess]
		mov	[esp+2C8h+Str],	eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

loc_40BE87:				; CODE XREF: sub_40BC71+85j
					; sub_40BC71+19Dj
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_40BC71	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40BE8C	proc near		; CODE XREF: sub_401623+94p

var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+var_4], 0
		jmp	short loc_40BEC9
; ---------------------------------------------------------------------------

loc_40BE9B:				; CODE XREF: sub_40BE8C+51j
		mov	eax, [ebp+var_4]
		lea	edx, ds:0[eax*8]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	eax, [eax]
		mov	edx, [ebp+var_4]
		lea	ecx, ds:0[edx*8]
		mov	edx, [ebp+arg_0]
		add	edx, ecx
		mov	edx, [edx+4]
		mov	ds:dword_412580[eax*4],	edx
		add	[ebp+var_4], 1

loc_40BEC9:				; CODE XREF: sub_40BE8C+Dj
		mov	eax, [ebp+var_4]
		lea	edx, ds:0[eax*8]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_40BE9B
		leave
		retn
sub_40BE8C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40BEE1	proc near		; CODE XREF: StartAddress+134p

wVersionRequested= word	ptr -1A8h
lpWSAData	= dword	ptr -1A4h
protocol	= dword	ptr -1A0h
lEvent		= dword	ptr -19Ch
WSAData		= WSAData ptr -198h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 1A8h
		lea	eax, [ebp+WSAData]
		mov	[esp+1A8h+lpWSAData], eax ; lpWSAData
		mov	dword ptr [esp+1A8h+wVersionRequested],	202h ; wVersionRequested
		mov	eax, ds:WSAStartup
		call	eax ; WSAStartup
		sub	esp, 8
		test	eax, eax
		jz	short loc_40BF13
		mov	eax, 0
		jmp	locret_40BFDF
; ---------------------------------------------------------------------------

loc_40BF13:				; CODE XREF: sub_40BEE1+26j
		mov	[esp+1A8h+protocol], 6 ; protocol
		mov	[esp+1A8h+lpWSAData], 1	; type
		mov	dword ptr [esp+1A8h+wVersionRequested],	2 ; af
		mov	eax, ds:socket
		call	eax ; socket
		sub	esp, 0Ch
		mov	edx, [ebp+arg_0]
		mov	[edx+854h], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+854h]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40BF55
		mov	eax, 0
		jmp	locret_40BFDF
; ---------------------------------------------------------------------------

loc_40BF55:				; CODE XREF: sub_40BEE1+68j
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+890h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+854h]
		mov	[esp+1A8h+lEvent], 33h ; lEvent
		mov	[esp+1A8h+protocol], 8002h ; wMsg
		mov	[esp+1A8h+lpWSAData], edx ; hWnd
		mov	dword ptr [esp+1A8h+wVersionRequested],	eax ; s
		mov	eax, ds:WSAAsyncSelect
		call	eax ; WSAAsyncSelect
		sub	esp, 10h
		test	eax, eax
		jz	short loc_40BF93
		mov	eax, 0
		jmp	short locret_40BFDF
; ---------------------------------------------------------------------------

loc_40BF93:				; CODE XREF: sub_40BEE1+A9j
		mov	eax, [ebp+arg_0]
		lea	edx, [eax+858h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+854h]
		mov	[esp+1A8h+protocol], 10h ; namelen
		mov	[esp+1A8h+lpWSAData], edx ; name
		mov	dword ptr [esp+1A8h+wVersionRequested],	eax ; s
		mov	eax, ds:connect
		call	eax ; connect
		sub	esp, 0Ch
		mov	dword ptr [esp+1A8h+wVersionRequested],	0 ; Time
		call	time
		mov	edx, 0Fh
		add	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax+868h], edx
		mov	eax, 1

locret_40BFDF:				; CODE XREF: sub_40BEE1+2Dj
					; sub_40BEE1+6Fj ...
		leave
		retn
sub_40BEE1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40BFE1	proc near		; CODE XREF: sub_40C08F+136p
					; sub_40C1D1+AAp ...

s		= dword	ptr -28h
buf		= dword	ptr -24h
len		= dword	ptr -20h
flags		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+884h]
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_40C003
		mov	eax, [ebp+var_C]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_40C008

loc_40C003:				; CODE XREF: sub_40BFE1+16j
		jmp	locret_40C08D
; ---------------------------------------------------------------------------

loc_40C008:				; CODE XREF: sub_40BFE1+20j
		mov	eax, [ebp+var_C]
		mov	ecx, [eax+0Ch]
		mov	eax, [ebp+var_C]
		mov	edx, [eax+8]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+854h]
		mov	[esp+28h+flags], 0 ; flags
		mov	[esp+28h+len], ecx ; len
		mov	[esp+28h+buf], edx ; buf
		mov	[esp+28h+s], eax ; s
		mov	eax, ds:send
		call	eax ; send
		sub	esp, 10h
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jg	short loc_40C045
		jmp	short locret_40C08D
; ---------------------------------------------------------------------------

loc_40C045:				; CODE XREF: sub_40BFE1+60j
		mov	eax, [ebp+var_C]
		mov	eax, [eax+0Ch]
		cmp	eax, [ebp+var_10]
		jz	short loc_40C07C
		mov	eax, [ebp+var_C]
		mov	eax, [eax+0Ch]
		sub	eax, [ebp+var_10]
		mov	edx, eax
		mov	eax, [ebp+var_C]
		mov	ecx, [eax+8]
		mov	eax, [ebp+var_10]
		add	ecx, eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax+8]
		mov	[esp+28h+len], edx ; Size
		mov	[esp+28h+buf], ecx ; Src
		mov	[esp+28h+s], eax ; Dst
		call	memmove

loc_40C07C:				; CODE XREF: sub_40BFE1+6Dj
		mov	eax, [ebp+var_C]
		mov	eax, [eax+0Ch]
		sub	eax, [ebp+var_10]
		mov	edx, eax
		mov	eax, [ebp+var_C]
		mov	[eax+0Ch], edx

locret_40C08D:				; CODE XREF: sub_40BFE1:loc_40C003j
					; sub_40BFE1+62j
		leave
		retn
sub_40BFE1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40C08F(int, char *Str, int, int)
sub_40C08F	proc near		; CODE XREF: sub_402417+24p
					; sub_402417+47p ...

NumOfElements	= dword	ptr -28h
SizeOfElements	= dword	ptr -24h
Size		= dword	ptr -20h
Memory		= dword	ptr -0Ch
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[esp+28h+SizeOfElements], 18h ;	SizeOfElements
		mov	[esp+28h+NumOfElements], 1 ; NumOfElements
		call	calloc
		mov	[ebp+Memory], eax
		cmp	[ebp+Memory], 0
		jnz	short loc_40C0BC
		mov	eax, 0
		jmp	locret_40C1CF
; ---------------------------------------------------------------------------

loc_40C0BC:				; CODE XREF: sub_40C08F+21j
		mov	eax, [ebp+Str]
		mov	[esp+28h+NumOfElements], eax ; Str
		call	strlen
		add	eax, 1
		mov	edx, eax
		mov	eax, [ebp+Memory]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+Memory]
		mov	eax, [eax+0Ch]
		mov	[esp+28h+NumOfElements], eax ; Size
		call	malloc
		mov	edx, eax
		mov	eax, [ebp+Memory]
		mov	[eax+8], edx
		mov	eax, [ebp+Memory]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_40C107
		mov	eax, [ebp+Memory]
		mov	[esp+28h+NumOfElements], eax ; Memory
		call	free
		mov	eax, 0
		jmp	locret_40C1CF
; ---------------------------------------------------------------------------

loc_40C107:				; CODE XREF: sub_40C08F+61j
		mov	eax, [ebp+Memory]
		mov	eax, [eax+0Ch]
		mov	edx, eax
		mov	eax, [ebp+Memory]
		mov	eax, [eax+8]
		mov	[esp+28h+Size],	edx ; Size
		mov	edx, [ebp+Str]
		mov	[esp+28h+SizeOfElements], edx ;	Src
		mov	[esp+28h+NumOfElements], eax ; Dst
		call	memcpy
		mov	eax, [ebp+Memory]
		mov	edx, [eax+8]
		mov	eax, [ebp+Memory]
		mov	eax, [eax+0Ch]
		sub	eax, 1
		add	eax, edx
		mov	byte ptr [eax],	0Ah
		mov	eax, [ebp+Memory]
		mov	edx, [ebp+arg_8]
		mov	[eax+10h], edx
		mov	eax, [ebp+Memory]
		mov	edx, [ebp+arg_C]
		mov	[eax+14h], edx
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+884h]
		test	eax, eax
		jz	short loc_40C192
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+884h]
		mov	eax, [ebp+Memory]
		mov	[eax+4], edx
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+884h]
		mov	edx, [eax]
		mov	eax, [ebp+Memory]
		mov	[eax], edx
		mov	eax, [ebp+Memory]
		mov	edx, [eax+4]
		mov	eax, [ebp+Memory]
		mov	eax, [eax]
		mov	ecx, [ebp+Memory]
		mov	[eax+4], ecx
		mov	eax, [eax+4]
		mov	[edx], eax
		jmp	short loc_40C1B1
; ---------------------------------------------------------------------------

loc_40C192:				; CODE XREF: sub_40C08F+CAj
		mov	eax, [ebp+Memory]
		mov	edx, [ebp+Memory]
		mov	[eax], edx
		mov	eax, [ebp+Memory]
		mov	edx, [eax]
		mov	eax, [ebp+Memory]
		mov	[eax+4], edx
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+Memory]
		mov	[eax+884h], edx

loc_40C1B1:				; CODE XREF: sub_40C08F+101j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+884h]
		cmp	eax, [ebp+Memory]
		jnz	short loc_40C1CA
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+NumOfElements], eax
		call	sub_40BFE1

loc_40C1CA:				; CODE XREF: sub_40C08F+12Ej
		mov	eax, 1

locret_40C1CF:				; CODE XREF: sub_40C08F+28j
					; sub_40C08F+73j
		leave
		retn
sub_40C08F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40C1D1	proc near		; CODE XREF: sub_40C2A0+546p
					; sub_40C2A0+595p ...

Dst		= dword	ptr -28h
Val		= dword	ptr -24h
Size		= dword	ptr -20h
Memory		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+884h]
		mov	[ebp+Memory], eax
		cmp	[ebp+Memory], 0
		jnz	short loc_40C1F3
		mov	eax, 0
		jmp	locret_40C29E
; ---------------------------------------------------------------------------

loc_40C1F3:				; CODE XREF: sub_40C1D1+16j
		mov	eax, [ebp+Memory]
		mov	eax, [eax+0Ch]
		mov	edx, eax
		mov	eax, [ebp+Memory]
		mov	eax, [eax+8]
		mov	[esp+28h+Size],	edx ; Size
		mov	[esp+28h+Val], 78h ; Val
		mov	[esp+28h+Dst], eax ; Dst
		call	memset
		mov	eax, [ebp+Memory]
		mov	eax, [eax+14h]
		cmp	eax, 1
		jnz	short loc_40C231
		mov	eax, [ebp+Memory]
		mov	dword ptr [eax+14h], 0
		mov	eax, 1
		jmp	short locret_40C29E
; ---------------------------------------------------------------------------

loc_40C231:				; CODE XREF: sub_40C1D1+4Dj
		mov	eax, [ebp+Memory]
		mov	eax, [eax+4]
		cmp	eax, [ebp+Memory]
		jnz	short loc_40C24B
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+884h], 0
		jmp	short loc_40C280
; ---------------------------------------------------------------------------

loc_40C24B:				; CODE XREF: sub_40C1D1+69j
		mov	eax, [ebp+Memory]
		mov	eax, [eax]
		mov	edx, [ebp+Memory]
		mov	edx, [edx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+Memory]
		mov	eax, [eax+4]
		mov	edx, [ebp+Memory]
		mov	edx, [edx]
		mov	[eax], edx
		mov	eax, [ebp+Memory]
		mov	edx, [eax+4]
		mov	eax, [ebp+arg_0]
		mov	[eax+884h], edx
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Dst], eax
		call	sub_40BFE1

loc_40C280:				; CODE XREF: sub_40C1D1+78j
		mov	eax, [ebp+Memory]
		mov	eax, [eax+8]
		mov	[esp+28h+Dst], eax ; Memory
		call	free
		mov	eax, [ebp+Memory]
		mov	[esp+28h+Dst], eax ; Memory
		call	free
		mov	eax, 1

locret_40C29E:				; CODE XREF: sub_40C1D1+1Dj
					; sub_40C1D1+5Ej
		leave
		retn
sub_40C1D1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40C2A0	proc near		; CODE XREF: sub_403276+7Ep

Time		= dword	ptr -48h
name		= dword	ptr -44h
namelen		= dword	ptr -40h
flags		= dword	ptr -3Ch
argp		= dword	ptr -2Ch
var_28		= dword	ptr -28h
Str1		= dword	ptr -24h
MaxCount	= dword	ptr -20h
Buf		= dword	ptr -1Ch
var_18		= dword	ptr -18h
Memory		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+Time],	eax
		call	sub_4082E0
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_40C2BF
		jmp	locret_40C93E
; ---------------------------------------------------------------------------

loc_40C2BF:				; CODE XREF: sub_40C2A0+18j
		mov	eax, [ebp+arg_4]
		movzx	eax, ax
		cmp	eax, 2
		jz	loc_40C89B
		cmp	eax, 2
		jg	short loc_40C2E1
		cmp	eax, 1
		jz	loc_40C364
		jmp	locret_40C93E
; ---------------------------------------------------------------------------

loc_40C2E1:				; CODE XREF: sub_40C2A0+31j
		cmp	eax, 10h
		jz	short loc_40C2F4
		cmp	eax, 20h
		jz	loc_40C8AB
		jmp	locret_40C93E
; ---------------------------------------------------------------------------

loc_40C2F4:				; CODE XREF: sub_40C2A0+44j
		mov	eax, [ebp+arg_4]
		shr	eax, 10h
		test	ax, ax
		jz	short loc_40C35F
		mov	[esp+48h+Time],	0 ; Time
		call	time
		mov	edx, [ebp+var_10]
		mov	edx, [edx+868h]
		cmp	eax, edx
		jge	short loc_40C345
		mov	eax, [ebp+var_10]
		lea	edx, [eax+858h]
		mov	eax, [ebp+var_10]
		mov	eax, [eax+854h]
		mov	[esp+48h+namelen], 10h ; namelen
		mov	[esp+48h+name],	edx ; name
		mov	[esp+48h+Time],	eax ; s
		mov	eax, ds:connect
		call	eax ; connect
		sub	esp, 0Ch
		jmp	short loc_40C35F
; ---------------------------------------------------------------------------

loc_40C345:				; CODE XREF: sub_40C2A0+76j
		mov	eax, ds:dword_412584
		mov	[esp+48h+name],	offset byte_410F08
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax ; dword_412584
		jmp	locret_40C93E
; ---------------------------------------------------------------------------

loc_40C35F:				; CODE XREF: sub_40C2A0+5Dj
					; sub_40C2A0+A3j
		jmp	locret_40C93E
; ---------------------------------------------------------------------------

loc_40C364:				; CODE XREF: sub_40C2A0+36j
		mov	eax, [ebp+var_10]
		mov	eax, [eax+854h]
		lea	edx, [ebp+argp]
		mov	[esp+48h+namelen], edx ; argp
		mov	[esp+48h+name],	4004667Fh ; cmd
		mov	[esp+48h+Time],	eax ; s
		mov	eax, ds:ioctlsocket
		call	eax ; ioctlsocket
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_40C394
		mov	eax, [ebp+argp]
		test	eax, eax
		jnz	short loc_40C399

loc_40C394:				; CODE XREF: sub_40C2A0+EBj
		jmp	locret_40C93E
; ---------------------------------------------------------------------------

loc_40C399:				; CODE XREF: sub_40C2A0+F2j
		mov	eax, [ebp+var_10]
		mov	edx, [eax+880h]
		mov	eax, [ebp+argp]
		add	eax, edx
		mov	[esp+48h+Time],	eax ; Size
		call	malloc
		mov	[ebp+Memory], eax
		cmp	[ebp+Memory], 0
		jnz	short loc_40C3BD
		jmp	locret_40C93E
; ---------------------------------------------------------------------------

loc_40C3BD:				; CODE XREF: sub_40C2A0+116j
		mov	eax, [ebp+argp]
		mov	edx, eax
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+880h]
		mov	eax, [ebp+Memory]
		add	ecx, eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+854h]
		mov	[esp+48h+flags], 0 ; flags
		mov	[esp+48h+namelen], edx ; len
		mov	[esp+48h+name],	ecx ; buf
		mov	[esp+48h+Time],	eax ; s
		mov	eax, ds:recv
		call	eax ; recv
		sub	esp, 10h
		mov	[ebp+var_18], eax
		mov	eax, [ebp+argp]
		cmp	eax, [ebp+var_18]
		jz	short loc_40C411
		mov	eax, [ebp+Memory]
		mov	[esp+48h+Time],	eax ; Memory
		call	free
		jmp	locret_40C93E
; ---------------------------------------------------------------------------

loc_40C411:				; CODE XREF: sub_40C2A0+15Fj
		mov	eax, [ebp+var_10]
		mov	eax, [eax+880h]
		test	eax, eax
		jz	short loc_40C47F
		mov	eax, [ebp+var_10]
		mov	edx, [eax+880h]
		mov	eax, [ebp+var_10]
		mov	eax, [eax+87Ch]
		mov	[esp+48h+namelen], edx ; Size
		mov	[esp+48h+name],	eax ; Src
		mov	eax, [ebp+Memory]
		mov	[esp+48h+Time],	eax ; Dst
		call	memcpy
		mov	eax, [ebp+var_10]
		mov	edx, [eax+880h]
		mov	eax, [ebp+argp]
		add	eax, edx
		mov	[ebp+argp], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+87Ch]
		mov	[esp+48h+Time],	eax ; Memory
		call	free
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax+87Ch], 0
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax+880h], 0

loc_40C47F:				; CODE XREF: sub_40C2A0+17Cj
		mov	[ebp+var_C], 0
		jmp	loc_40C87F
; ---------------------------------------------------------------------------

loc_40C48B:				; CODE XREF: sub_40C2A0+5E5j
		mov	eax, [ebp+var_C]
		mov	edx, [ebp+Memory]
		add	eax, edx
		mov	[ebp+Buf], eax
		mov	eax, [ebp+argp]
		sub	eax, [ebp+var_C]
		mov	[ebp+MaxCount],	eax
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax+86Ch]
		test	al, al
		jz	short loc_40C4B4
		mov	eax, 3Ah
		jmp	short loc_40C4B9
; ---------------------------------------------------------------------------

loc_40C4B4:				; CODE XREF: sub_40C2A0+20Bj
		mov	eax, 0Ah

loc_40C4B9:				; CODE XREF: sub_40C2A0+212j
		mov	edx, [ebp+MaxCount]
		mov	[esp+48h+namelen], edx ; MaxCount
		mov	[esp+48h+name],	eax ; Val
		mov	eax, [ebp+Buf]
		mov	[esp+48h+Time],	eax ; Buf
		call	memchr
		mov	[ebp+Str1], eax
		cmp	[ebp+Str1], 0
		jnz	short loc_40C536
		mov	eax, [ebp+MaxCount]
		mov	[esp+48h+Time],	eax ; Size
		call	malloc
		mov	edx, eax
		mov	eax, [ebp+var_10]
		mov	[eax+87Ch], edx
		mov	eax, [ebp+var_10]
		mov	eax, [eax+87Ch]
		test	eax, eax
		jz	short loc_40C531
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+MaxCount]
		mov	[eax+880h], edx
		mov	eax, [ebp+var_10]
		mov	edx, [eax+880h]
		mov	eax, [ebp+var_10]
		mov	eax, [eax+87Ch]
		mov	[esp+48h+namelen], edx ; Size
		mov	edx, [ebp+Buf]
		mov	[esp+48h+name],	edx ; Src
		mov	[esp+48h+Time],	eax ; Dst
		call	memcpy
		jmp	loc_40C88B
; ---------------------------------------------------------------------------

loc_40C531:				; CODE XREF: sub_40C2A0+259j
		jmp	loc_40C88B
; ---------------------------------------------------------------------------

loc_40C536:				; CODE XREF: sub_40C2A0+236j
		mov	edx, [ebp+Str1]
		mov	eax, [ebp+Buf]
		sub	edx, eax
		mov	eax, edx
		mov	edx, eax
		mov	eax, [ebp+var_C]
		add	eax, edx
		add	eax, 1
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax+86Ch]
		test	al, al
		jz	short loc_40C591
		mov	eax, [ebp+var_10]
		add	eax, 86Ch
		mov	[esp+48h+flags], 0 ; int
		mov	[esp+48h+namelen], 0 ; int
		mov	[esp+48h+name],	eax ; Str
		mov	eax, [ebp+var_10]
		mov	[esp+48h+Time],	eax ; int
		call	sub_40C08F
		mov	eax, [ebp+var_10]
		mov	byte ptr [eax+86Ch], 0
		jmp	loc_40C87F
; ---------------------------------------------------------------------------

loc_40C591:				; CODE XREF: sub_40C2A0+2B9j
		mov	edx, [ebp+Str1]
		mov	eax, [ebp+Buf]
		sub	edx, eax
		mov	eax, edx
		lea	edx, [eax-1]
		mov	eax, [ebp+Buf]
		add	eax, edx
		mov	byte ptr [eax],	0
		mov	eax, [ebp+Buf]
		movzx	eax, byte ptr [eax]
		cmp	al, 3Eh
		jnz	loc_40C782
		mov	eax, [ebp+Buf]
		add	eax, 1
		mov	[ebp+Str1], eax
		mov	[esp+48h+namelen], 4 ; MaxCount
		mov	[esp+48h+name],	offset aLog ; "LOG:"
		mov	eax, [ebp+Str1]
		mov	[esp+48h+Time],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_40C605
		mov	eax, ds:dword_412594
		test	eax, eax
		jz	loc_40C87F
		mov	eax, ds:dword_412594
		mov	edx, [ebp+Str1]
		add	edx, 4
		mov	[esp+48h+name],	edx
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax ; dword_412594
		jmp	loc_40C87F
; ---------------------------------------------------------------------------

loc_40C605:				; CODE XREF: sub_40C2A0+33Aj
		mov	[esp+48h+namelen], 6 ; MaxCount
		mov	[esp+48h+name],	offset aState ;	"STATE:"
		mov	eax, [ebp+Str1]
		mov	[esp+48h+Time],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_40C64D
		mov	eax, ds:dword_4125A0
		test	eax, eax
		jz	loc_40C87F
		mov	eax, ds:dword_4125A0
		mov	edx, [ebp+Str1]
		add	edx, 6
		mov	[esp+48h+name],	edx
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax ; dword_4125A0
		jmp	loc_40C87F
; ---------------------------------------------------------------------------

loc_40C64D:				; CODE XREF: sub_40C2A0+382j
		mov	[esp+48h+namelen], 5 ; MaxCount
		mov	[esp+48h+name],	offset aHold ; "HOLD:"
		mov	eax, [ebp+Str1]
		mov	[esp+48h+Time],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_40C695
		mov	eax, ds:dword_412590
		test	eax, eax
		jz	loc_40C87F
		mov	eax, ds:dword_412590
		mov	edx, [ebp+Str1]
		add	edx, 5
		mov	[esp+48h+name],	edx
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax ; dword_412590
		jmp	loc_40C87F
; ---------------------------------------------------------------------------

loc_40C695:				; CODE XREF: sub_40C2A0+3CAj
		mov	[esp+48h+namelen], 9 ; MaxCount
		mov	[esp+48h+name],	offset aPassword ; "PASSWORD:"
		mov	eax, [ebp+Str1]
		mov	[esp+48h+Time],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_40C6DD
		mov	eax, ds:dword_412598
		test	eax, eax
		jz	loc_40C87F
		mov	eax, ds:dword_412598
		mov	edx, [ebp+Str1]
		add	edx, 9
		mov	[esp+48h+name],	edx
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax ; dword_412598
		jmp	loc_40C87F
; ---------------------------------------------------------------------------

loc_40C6DD:				; CODE XREF: sub_40C2A0+412j
		mov	[esp+48h+namelen], 6 ; MaxCount
		mov	[esp+48h+name],	offset aProxy ;	"PROXY:"
		mov	eax, [ebp+Str1]
		mov	[esp+48h+Time],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_40C725
		mov	eax, ds:dword_41259C
		test	eax, eax
		jz	loc_40C87F
		mov	eax, ds:dword_41259C
		mov	edx, [ebp+Str1]
		add	edx, 6
		mov	[esp+48h+name],	edx
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax ; dword_41259C
		jmp	loc_40C87F
; ---------------------------------------------------------------------------

loc_40C725:				; CODE XREF: sub_40C2A0+45Aj
		mov	[esp+48h+namelen], 5 ; MaxCount
		mov	[esp+48h+name],	offset aInfo ; "INFO:"
		mov	eax, [ebp+Str1]
		mov	[esp+48h+Time],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	loc_40C87F
		mov	[esp+48h+Time],	64h ; dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4
		mov	eax, ds:dword_412580
		test	eax, eax
		jz	loc_40C87F
		mov	eax, ds:dword_412580
		mov	edx, [ebp+Str1]
		add	edx, 5
		mov	[esp+48h+name],	edx
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax ; dword_412580
		jmp	loc_40C87F
; ---------------------------------------------------------------------------

loc_40C782:				; CODE XREF: sub_40C2A0+30Ej
		mov	eax, [ebp+var_10]
		mov	eax, [eax+884h]
		test	eax, eax
		jz	loc_40C87F
		mov	eax, [ebp+var_10]
		mov	eax, [eax+884h]
		mov	[ebp+var_28], eax
		mov	[esp+48h+namelen], 8 ; MaxCount
		mov	[esp+48h+name],	offset aSuccess	; "SUCCESS:"
		mov	eax, [ebp+Buf]
		mov	[esp+48h+Time],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_40C7F0
		mov	eax, [ebp+var_28]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_40C7E0
		mov	eax, [ebp+var_28]
		mov	eax, [eax+10h]
		mov	edx, [ebp+Buf]
		add	edx, 9
		mov	[esp+48h+name],	edx
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax

loc_40C7E0:				; CODE XREF: sub_40C2A0+526j
		mov	eax, [ebp+var_10]
		mov	[esp+48h+Time],	eax
		call	sub_40C1D1
		jmp	loc_40C87F
; ---------------------------------------------------------------------------

loc_40C7F0:				; CODE XREF: sub_40C2A0+51Cj
		mov	[esp+48h+namelen], 6 ; MaxCount
		mov	[esp+48h+name],	offset aError ;	"ERROR:"
		mov	eax, [ebp+Buf]
		mov	[esp+48h+Time],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_40C83C
		mov	eax, [ebp+var_28]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_40C82F
		mov	eax, [ebp+var_28]
		mov	eax, [eax+10h]
		mov	[esp+48h+name],	0
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax

loc_40C82F:				; CODE XREF: sub_40C2A0+577j
		mov	eax, [ebp+var_10]
		mov	[esp+48h+Time],	eax
		call	sub_40C1D1
		jmp	short loc_40C87F
; ---------------------------------------------------------------------------

loc_40C83C:				; CODE XREF: sub_40C2A0+56Dj
		mov	[esp+48h+name],	offset aEnd ; "END"
		mov	eax, [ebp+Buf]
		mov	[esp+48h+Time],	eax ; Str1
		call	strcmp
		test	eax, eax
		jnz	short loc_40C860
		mov	eax, [ebp+var_10]
		mov	[esp+48h+Time],	eax
		call	sub_40C1D1
		jmp	short loc_40C87F
; ---------------------------------------------------------------------------

loc_40C860:				; CODE XREF: sub_40C2A0+5B1j
		mov	eax, [ebp+var_28]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_40C87F
		mov	eax, [ebp+var_28]
		mov	eax, [eax+10h]
		mov	edx, [ebp+Buf]
		mov	[esp+48h+name],	edx
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax

loc_40C87F:				; CODE XREF: sub_40C2A0+1E6j
					; sub_40C2A0+2ECj ...
		mov	eax, [ebp+argp]
		cmp	[ebp+var_C], eax
		jb	loc_40C48B

loc_40C88B:				; CODE XREF: sub_40C2A0+28Cj
					; sub_40C2A0:loc_40C531j
		mov	eax, [ebp+Memory]
		mov	[esp+48h+Time],	eax ; Memory
		call	free
		jmp	locret_40C93E
; ---------------------------------------------------------------------------

loc_40C89B:				; CODE XREF: sub_40C2A0+28j
		mov	eax, [ebp+var_10]
		mov	[esp+48h+Time],	eax
		call	sub_40BFE1
		jmp	locret_40C93E
; ---------------------------------------------------------------------------

loc_40C8AB:				; CODE XREF: sub_40C2A0+49j
		mov	eax, [ebp+var_10]
		mov	eax, [eax+880h]
		test	eax, eax
		jz	short loc_40C8E3
		mov	eax, [ebp+var_10]
		mov	eax, [eax+87Ch]
		mov	[esp+48h+Time],	eax ; Memory
		call	free
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax+87Ch], 0
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax+880h], 0

loc_40C8E3:				; CODE XREF: sub_40C2A0+616j
		mov	eax, [ebp+var_10]
		mov	eax, [eax+854h]
		mov	[esp+48h+Time],	eax ; s
		mov	eax, ds:closesocket
		call	eax ; closesocket
		sub	esp, 4
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax+854h], 0FFFFFFFFh
		nop

loc_40C907:				; CODE XREF: sub_40C2A0+674j
		mov	eax, [ebp+var_10]
		mov	[esp+48h+Time],	eax
		call	sub_40C1D1
		test	eax, eax
		jnz	short loc_40C907
		mov	eax, ds:WSACleanup
		call	eax ; WSACleanup
		mov	eax, ds:dword_412584
		test	eax, eax
		jz	short loc_40C93D
		mov	eax, ds:dword_412584
		mov	[esp+48h+name],	offset byte_410F08
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Time],	edx
		call	eax ; dword_412584
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_40C93D:				; CODE XREF: sub_40C2A0+684j
					; sub_40C2A0+69Bj
		nop

locret_40C93E:				; CODE XREF: sub_40C2A0+1Aj
					; sub_40C2A0+3Cj ...
		leave
		retn
sub_40C2A0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40C940(char *, size_t, char *, char)
sub_40C940	proc near		; CODE XREF: sub_40CAF3+119p

DstBuf		= dword	ptr -28h
MaxCount	= dword	ptr -24h
Format		= dword	ptr -20h
ArgList		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+ArgList], eax ; ArgList
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+Format], eax ;	Format
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+MaxCount], eax	; MaxCount
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+DstBuf], eax ;	DstBuf
		call	j__vsnprintf
		mov	ebx, eax
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	ebp
		retn
sub_40C940	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40C977(HWND, int, int, int)
sub_40C977	proc near		; CODE XREF: sub_40CAF3+29p

hDlg		= dword	ptr -48h
nIDDlgItem	= dword	ptr -44h
lpString	= dword	ptr -40h
cchMax		= dword	ptr -3Ch
lpMultiByteStr	= dword	ptr -38h
cbMultiByte	= dword	ptr -34h
lpDefaultChar	= dword	ptr -30h
lpUsedDefaultChar= dword ptr -2Ch
Size		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], offset	dword_410F48
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_4]
		mov	[esp+48h+nIDDlgItem], eax ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItem
		call	eax ; GetDlgItem
		sub	esp, 8
		mov	[esp+48h+hDlg],	eax ; hWnd
		mov	eax, ds:GetWindowTextLengthW
		call	eax ; GetWindowTextLengthW
		sub	esp, 4
		add	eax, 1
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 1
		jnz	short loc_40C9D9
		jmp	loc_40CAE3
; ---------------------------------------------------------------------------

loc_40C9D9:				; CODE XREF: sub_40C977+5Bj
		mov	eax, [ebp+var_18]
		add	eax, eax
		mov	[esp+48h+hDlg],	eax ; Size
		call	malloc
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_40C9F4
		jmp	loc_40CAE3
; ---------------------------------------------------------------------------

loc_40C9F4:				; CODE XREF: sub_40C977+76j
		mov	eax, [ebp+var_18]
		mov	[esp+48h+cchMax], eax ;	cchMax
		mov	eax, [ebp+var_10]
		mov	[esp+48h+lpString], eax	; lpString
		mov	eax, [ebp+arg_4]
		mov	[esp+48h+nIDDlgItem], eax ; nIDDlgItem
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+hDlg],	eax ; hDlg
		mov	eax, ds:GetDlgItemTextW
		call	eax ; GetDlgItemTextW
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_40CA22
		jmp	loc_40CAE3
; ---------------------------------------------------------------------------

loc_40CA22:				; CODE XREF: sub_40C977+A4j
		mov	[esp+48h+lpUsedDefaultChar], 0 ; lpUsedDefaultChar
		mov	[esp+48h+lpDefaultChar], 0 ; lpDefaultChar
		mov	[esp+48h+cbMultiByte], 0 ; cbMultiByte
		mov	[esp+48h+lpMultiByteStr], 0 ; lpMultiByteStr
		mov	[esp+48h+cchMax], 0FFFFFFFFh ; cchWideChar
		mov	eax, [ebp+var_10]
		mov	[esp+48h+lpString], eax	; lpWideCharStr
		mov	[esp+48h+nIDDlgItem], 0	; dwFlags
		mov	[esp+48h+hDlg],	0FDE9h ; CodePage
		mov	eax, ds:WideCharToMultiByte
		call	eax ; WideCharToMultiByte
		sub	esp, 20h
		mov	[ebp+Size], eax
		mov	eax, [ebp+Size]
		mov	[esp+48h+hDlg],	eax ; Size
		call	malloc
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_40CA83
		jmp	short loc_40CAE3
; ---------------------------------------------------------------------------

loc_40CA83:				; CODE XREF: sub_40C977+108j
		mov	[esp+48h+lpUsedDefaultChar], 0 ; lpUsedDefaultChar
		mov	[esp+48h+lpDefaultChar], 0 ; lpDefaultChar
		mov	eax, [ebp+Size]
		mov	[esp+48h+cbMultiByte], eax ; cbMultiByte
		mov	eax, [ebp+var_14]
		mov	[esp+48h+lpMultiByteStr], eax ;	lpMultiByteStr
		mov	[esp+48h+cchMax], 0FFFFFFFFh ; cchWideChar
		mov	eax, [ebp+var_10]
		mov	[esp+48h+lpString], eax	; lpWideCharStr
		mov	[esp+48h+nIDDlgItem], 0	; dwFlags
		mov	[esp+48h+hDlg],	0FDE9h ; CodePage
		mov	eax, ds:WideCharToMultiByte
		call	eax ; WideCharToMultiByte
		sub	esp, 20h
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+var_14]
		mov	[eax], edx
		mov	eax, [ebp+Size]
		lea	edx, [eax-1]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		mov	[ebp+var_C], 1

loc_40CAE3:				; CODE XREF: sub_40C977+5Dj
					; sub_40C977+78j ...
		mov	eax, [ebp+var_10]
		mov	[esp+48h+hDlg],	eax ; Memory
		call	free
		mov	eax, [ebp+var_C]
		leave
		retn
sub_40C977	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40CAF3(int, char *Str, HWND hDlg, int	nIDDlgItem)
sub_40CAF3	proc near		; CODE XREF: sub_402A63+14Bp
					; sub_402A63+16Dp ...

Memory		= dword	ptr -38h
NewSize		= dword	ptr -34h
Size		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_24		= dword	ptr -24h
Dst		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch
hDlg		= dword	ptr  10h
nIDDlgItem	= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 0
		lea	eax, [ebp+var_24]
		mov	dword ptr [esp+38h+var_2C], eax	; int
		lea	eax, [ebp+Dst]
		mov	[esp+38h+Size],	eax ; int
		mov	eax, [ebp+nIDDlgItem]
		mov	[esp+38h+NewSize], eax ; int
		mov	eax, [ebp+hDlg]
		mov	[esp+38h+Memory], eax ;	HWND
		call	sub_40C977
		mov	[ebp+var_10], 0
		jmp	loc_40CBBE
; ---------------------------------------------------------------------------

loc_40CB2D:				; CODE XREF: sub_40CAF3+D1j
		mov	edx, [ebp+Dst]
		mov	eax, [ebp+var_10]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 5Ch
		jz	short loc_40CB4B
		mov	edx, [ebp+Dst]
		mov	eax, [ebp+var_10]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 22h
		jnz	short loc_40CBBA

loc_40CB4B:				; CODE XREF: sub_40CAF3+47j
		mov	eax, [ebp+var_24]
		add	eax, 1
		mov	[ebp+var_24], eax
		mov	eax, [ebp+var_24]
		add	eax, 1
		mov	edx, eax
		mov	eax, [ebp+Dst]
		mov	[esp+38h+NewSize], edx ; NewSize
		mov	[esp+38h+Memory], eax ;	Memory
		call	realloc
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_40CB79
		jmp	loc_40CC41
; ---------------------------------------------------------------------------

loc_40CB79:				; CODE XREF: sub_40CAF3+7Fj
		mov	eax, [ebp+var_14]
		mov	[ebp+Dst], eax
		mov	eax, [ebp+var_24]
		sub	eax, [ebp+var_10]
		add	eax, 1
		mov	ecx, [ebp+Dst]
		mov	edx, [ebp+var_10]
		add	ecx, edx
		mov	edx, [ebp+Dst]
		mov	ebx, [ebp+var_10]
		add	ebx, 1
		add	edx, ebx
		mov	[esp+38h+Size],	eax ; Size
		mov	[esp+38h+NewSize], ecx ; Src
		mov	[esp+38h+Memory], edx ;	Dst
		call	memmove
		mov	edx, [ebp+Dst]
		mov	eax, [ebp+var_10]
		add	eax, edx
		mov	byte ptr [eax],	5Ch
		add	[ebp+var_10], 1

loc_40CBBA:				; CODE XREF: sub_40CAF3+56j
		add	[ebp+var_10], 1

loc_40CBBE:				; CODE XREF: sub_40CAF3+35j
		mov	eax, [ebp+var_24]
		cmp	[ebp+var_10], eax
		jl	loc_40CB2D
		mov	eax, [ebp+Str]
		mov	[esp+38h+Memory], eax ;	Str
		call	strlen
		mov	edx, [ebp+var_24]
		add	eax, edx
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_18]
		mov	[esp+38h+Memory], eax ;	Size
		call	malloc
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jz	short loc_40CC41
		mov	edx, [ebp+Dst]
		mov	eax, [ebp+var_18]
		mov	dword ptr [esp+38h+var_2C], edx	; char
		mov	edx, [ebp+Str]
		mov	[esp+38h+Size],	edx ; char *
		mov	[esp+38h+NewSize], eax ; size_t
		mov	eax, [ebp+var_1C]
		mov	[esp+38h+Memory], eax ;	char *
		call	sub_40C940
		mov	dword ptr [esp+38h+var_2C], 0 ;	int
		mov	[esp+38h+Size],	0 ; int
		mov	eax, [ebp+var_1C]
		mov	[esp+38h+NewSize], eax ; Str
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+Memory], eax ;	int
		call	sub_40C08F
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+38h+Memory], eax ;	Memory
		call	free

loc_40CC41:				; CODE XREF: sub_40CAF3+81j
					; sub_40CAF3+FCj
		mov	eax, [ebp+var_24]
		test	eax, eax
		jz	short loc_40CC8D
		mov	eax, [ebp+var_24]
		mov	edx, eax
		mov	eax, [ebp+Dst]
		mov	[esp+38h+Size],	edx ; Size
		mov	[esp+38h+NewSize], 78h ; Val
		mov	[esp+38h+Memory], eax ;	Dst
		call	memset
		mov	eax, [ebp+Dst]
		mov	[esp+38h+Size],	eax ; lpString
		mov	eax, [ebp+nIDDlgItem]
		mov	[esp+38h+NewSize], eax ; nIDDlgItem
		mov	eax, [ebp+hDlg]
		mov	[esp+38h+Memory], eax ;	hDlg
		mov	eax, ds:SetDlgItemTextA
		call	eax ; SetDlgItemTextA
		sub	esp, 0Ch
		mov	eax, [ebp+Dst]
		mov	[esp+38h+Memory], eax ;	Memory
		call	free

loc_40CC8D:				; CODE XREF: sub_40CAF3+153j
		mov	eax, [ebp+var_C]
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_40CAF3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40CC95(LPCWSTR lpPathName)
sub_40CC95	proc near		; CODE XREF: sub_401623+1A1p
					; sub_40CC95+67p

lpFileName	= dword	ptr -28h
var_24		= word ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
lpPathName	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+lpPathName]
		mov	[esp+28h+lpFileName], eax ; lpFileName
		mov	eax, ds:GetFileAttributesW
		call	eax ; GetFileAttributesW
		sub	esp, 4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0FFFFFFFFh
		jnz	loc_40CD61
		mov	eax, ds:GetLastError
		call	eax ; GetLastError
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 3
		jnz	short loc_40CD1B
		mov	dword ptr [esp+28h+var_24], 5Ch	; Ch
		mov	eax, [ebp+lpPathName]
		mov	[esp+28h+lpFileName], eax ; Str
		call	wcsrchr
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_40CCEE
		mov	eax, 0
		jmp	locret_40CD6F
; ---------------------------------------------------------------------------

loc_40CCEE:				; CODE XREF: sub_40CC95+4Dj
		mov	eax, [ebp+var_14]
		mov	word ptr [eax],	0
		mov	eax, [ebp+lpPathName]
		mov	[esp+28h+lpFileName], eax ; lpPathName
		call	sub_40CC95
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_14]
		mov	word ptr [eax],	5Ch
		cmp	[ebp+var_18], 0
		jnz	short loc_40CD19
		mov	eax, 0
		jmp	short locret_40CD6F
; ---------------------------------------------------------------------------

loc_40CD19:				; CODE XREF: sub_40CC95+7Bj
		jmp	short loc_40CD28
; ---------------------------------------------------------------------------

loc_40CD1B:				; CODE XREF: sub_40CC95+31j
		cmp	[ebp+var_10], 2
		jz	short loc_40CD28
		mov	eax, 0
		jmp	short locret_40CD6F
; ---------------------------------------------------------------------------

loc_40CD28:				; CODE XREF: sub_40CC95:loc_40CD19j
					; sub_40CC95+8Aj
		mov	dword ptr [esp+28h+var_24], 0 ;	lpSecurityAttributes
		mov	eax, [ebp+lpPathName]
		mov	[esp+28h+lpFileName], eax ; lpPathName
		mov	eax, ds:CreateDirectoryW
		call	eax ; CreateDirectoryW
		sub	esp, 8
		cmp	eax, 1
		jz	short loc_40CD53
		mov	eax, ds:GetLastError
		call	eax ; GetLastError
		cmp	eax, 0B7h
		jnz	short loc_40CD5A

loc_40CD53:				; CODE XREF: sub_40CC95+AEj
		mov	eax, 1
		jmp	short loc_40CD5F
; ---------------------------------------------------------------------------

loc_40CD5A:				; CODE XREF: sub_40CC95+BCj
		mov	eax, 0

loc_40CD5F:				; CODE XREF: sub_40CC95+C3j
		jmp	short locret_40CD6F
; ---------------------------------------------------------------------------

loc_40CD61:				; CODE XREF: sub_40CC95+1Dj
		mov	eax, [ebp+var_C]
		and	eax, 10h
		test	eax, eax
		setnz	al
		movzx	eax, al

locret_40CD6F:				; CODE XREF: sub_40CC95+54j
					; sub_40CC95+82j ...
		leave
		retn
sub_40CC95	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40CD71(char *, char *)
sub_40CD71	proc near		; CODE XREF: sub_40AACC+B1p
					; sub_40AACC+10Dp

Str1		= dword	ptr -18h
Str2		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+Str2],	eax ; Str2
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+Str1],	eax ; Str1
		call	strcmp
		test	eax, eax
		setz	al
		movzx	eax, al
		leave
		retn
sub_40CD71	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40CD93(wchar_t *Str1,	wchar_t	*)
sub_40CD93	proc near		; CODE XREF: sub_40A8C9+9Bp
					; sub_40A8C9+C0p

Str		= dword	ptr -18h
Str2		= dword	ptr -14h
MaxCount	= dword	ptr -10h
Str1		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+Str], eax ; Str
		call	wcslen
		mov	[esp+18h+MaxCount], eax	; MaxCount
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+Str2],	eax ; Str2
		mov	eax, [ebp+Str1]
		mov	[esp+18h+Str], eax ; Str1
		call	wcsncmp
		test	eax, eax
		setz	al
		movzx	eax, al
		leave
		retn
sub_40CD93	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40CDC4(HWND hWnd)
sub_40CDC4	proc near		; CODE XREF: sub_402A63+77p
					; sub_402C6B+76p ...

bVk		= byte ptr -28h
bScan		= byte ptr -24h
dwFlags		= dword	ptr -20h
dwExtraInfo	= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
hWnd		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		mov	[esp+28h+dwExtraInfo], 0 ; dwExtraInfo
		mov	[esp+28h+dwFlags], 0 ; dwFlags
		mov	dword ptr [esp+28h+bScan], 0 ; bScan
		mov	dword ptr [esp+28h+bVk], 12h ; bVk
		mov	eax, ds:keybd_event
		call	eax ; keybd_event
		sub	esp, 10h
		mov	eax, [ebp+hWnd]
		mov	dword ptr [esp+28h+bVk], eax ; hWnd
		mov	eax, ds:SetForegroundWindow
		call	eax ; SetForegroundWindow
		sub	esp, 4
		mov	[ebp+var_C], eax
		mov	[esp+28h+dwExtraInfo], 0 ; dwExtraInfo
		mov	[esp+28h+dwFlags], 2 ; dwFlags
		mov	dword ptr [esp+28h+bScan], 0 ; bScan
		mov	dword ptr [esp+28h+bVk], 12h ; bVk
		mov	eax, ds:keybd_event
		call	eax ; keybd_event
		sub	esp, 10h
		mov	eax, [ebp+var_C]
		leave
		retn
sub_40CDC4	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40CE3C(wchar_t *, size_t, wchar_t *, char)
sub_40CE3C	proc near		; CODE XREF: sub_40CF79+DFp
					; sub_40D105+41p ...

Dest		= dword	ptr -28h
Count		= dword	ptr -24h
Format		= dword	ptr -20h
Args		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+Args],	eax ; Args
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+Format], eax ;	Format
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Count], eax ; Count
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Dest],	eax ; Dest
		mov	eax, ds:_vsnwprintf
		call	eax ; _vsnwprintf
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_4]
		add	eax, 7FFFFFFFh
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	word ptr [eax],	0
		mov	eax, [ebp+var_C]
		leave
		retn
sub_40CE3C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40CE87(int, wchar_t *)
sub_40CE87	proc near		; CODE XREF: sub_40D105+A5p
					; sub_40D105+281p

Str		= dword	ptr -28h
Str2		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Str], eax ; Str
		call	wcslen
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		and	eax, 10h
		test	eax, eax
		jz	short loc_40CEAE
		mov	eax, 2
		jmp	short locret_40CF21
; ---------------------------------------------------------------------------

loc_40CEAE:				; CODE XREF: sub_40CE87+1Ej
		cmp	[ebp+var_C], 0
		jnz	short loc_40CEBB
		mov	eax, 1
		jmp	short locret_40CF21
; ---------------------------------------------------------------------------

loc_40CEBB:				; CODE XREF: sub_40CE87+2Bj
		mov	eax, [ebp+arg_0]
		add	eax, 2Ch
		mov	[esp+28h+Str], eax ; Str
		call	wcslen
		sub	eax, [ebp+var_C]
		sub	eax, 1
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jle	short loc_40CF1C
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_10]
		add	edx, 10h
		movzx	eax, word ptr [eax+edx*2+0Ch]
		cmp	ax, 2Eh
		jnz	short loc_40CF1C
		mov	eax, [ebp+var_10]
		add	eax, 1
		add	eax, 10h
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		lea	edx, [eax+0Ch]
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Str2],	eax ; Str2
		mov	[esp+28h+Str], edx ; Str1
		mov	eax, ds:_wcsicmp
		call	eax ; _wcsicmp
		test	eax, eax
		jnz	short loc_40CF1C
		mov	eax, 1
		jmp	short locret_40CF21
; ---------------------------------------------------------------------------

loc_40CF1C:				; CODE XREF: sub_40CE87+4Fj
					; sub_40CE87+63j ...
		mov	eax, 0

locret_40CF21:				; CODE XREF: sub_40CE87+25j
					; sub_40CE87+32j ...
		leave
		retn
sub_40CE87	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40CF23(wchar_t *)
sub_40CF23	proc near		; CODE XREF: sub_40D105+299p

Str1		= dword	ptr -28h
Str2		= dword	ptr -24h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		jmp	short loc_40CF68
; ---------------------------------------------------------------------------

loc_40CF32:				; CODE XREF: sub_40CF23+4Dj
		mov	eax, [ebp+var_C]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		lea	edx, [eax+8]
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Str2],	eax ; Str2
		mov	[esp+28h+Str1],	edx ; Str1
		mov	eax, ds:_wcsicmp
		call	eax ; _wcsicmp
		test	eax, eax
		jnz	short loc_40CF64
		mov	eax, 1
		jmp	short locret_40CF77
; ---------------------------------------------------------------------------

loc_40CF64:				; CODE XREF: sub_40CF23+38j
		add	[ebp+var_C], 1

loc_40CF68:				; CODE XREF: sub_40CF23+Dj
		mov	eax, ds:dword_42D730
		cmp	eax, [ebp+var_C]
		jg	short loc_40CF32
		mov	eax, 0

locret_40CF77:				; CODE XREF: sub_40CF23+3Fj
		leave
		retn
sub_40CF23	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40CF79(int, wchar_t *, wchar_t *)
sub_40CF79	proc near		; CODE XREF: sub_40D105+D9p
					; sub_40D105+2F5p

Dest		= dword	ptr -38h
Source		= dword	ptr -34h
Count		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_28		= dword	ptr -28h
Str1		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, [ebp+arg_0]
		imul	eax, 894h
		add	eax, 0C0h
		add	eax, offset Str2
		add	eax, 8
		mov	[ebp+Str1], eax
		mov	eax, [ebp+Str1]
		mov	[esp+38h+Count], 103h ;	Count
		mov	edx, [ebp+arg_4]
		mov	[esp+38h+Source], edx ;	Source
		mov	[esp+38h+Dest],	eax ; Dest
		call	wcsncpy
		mov	eax, [ebp+Str1]
		lea	edx, [eax+410h]
		mov	[esp+38h+Count], 103h ;	Count
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+Source], eax ;	Source
		mov	[esp+38h+Dest],	edx ; Dest
		call	wcsncpy
		mov	eax, [ebp+Str1]
		mov	edx, [ebp+Str1]
		add	edx, 208h
		mov	[esp+38h+Count], 103h ;	Count
		mov	[esp+38h+Source], eax ;	Source
		mov	[esp+38h+Dest],	edx ; Dest
		call	wcsncpy
		mov	eax, [ebp+Str1]
		add	eax, 208h
		mov	[esp+38h+Dest],	eax ; Str
		call	wcslen
		mov	ebx, eax
		mov	[esp+38h+Dest],	offset Str ; Str
		call	wcslen
		sub	ebx, eax
		mov	eax, ebx
		lea	edx, [eax-1]
		mov	eax, [ebp+Str1]
		add	edx, 100h
		mov	word ptr [eax+edx*2+8],	0
		mov	eax, [ebp+Str1]
		lea	edx, [eax+208h]
		mov	eax, [ebp+Str1]
		add	eax, 618h
		mov	[esp+38h+var_28], edx
		mov	dword ptr [esp+38h+var_2C], offset PathName ; char
		mov	[esp+38h+Count], offset	aSS_log	; "%s\\%s.log"
		mov	[esp+38h+Source], 104h ; size_t
		mov	[esp+38h+Dest],	eax ; wchar_t *
		call	sub_40CE3C
		mov	eax, [ebp+Str1]
		mov	dword ptr [eax+854h], 0FFFFFFFFh
		mov	eax, [ebp+Str1]
		mov	word ptr [eax+858h], 2
		mov	[esp+38h+Dest],	offset cp ; "127.0.0.1"
		mov	eax, ds:inet_addr
		call	eax ; inet_addr
		sub	esp, 4
		mov	edx, [ebp+Str1]
		mov	[edx+85Ch], eax
		mov	eax, [ebp+arg_0]
		add	ax, 62FCh
		movzx	eax, ax
		mov	[esp+38h+Dest],	eax ; hostshort
		mov	eax, ds:htons
		call	eax ; htons
		sub	esp, 4
		mov	edx, [ebp+Str1]
		mov	[edx+85Ah], ax
		mov	[ebp+var_C], 0
		jmp	short loc_40D0EC
; ---------------------------------------------------------------------------

loc_40D0BA:				; CODE XREF: sub_40CF79+185j
		mov	eax, [ebp+var_C]
		mov	edx, ds:Str2[eax*4]
		mov	eax, [ebp+Str1]
		mov	[esp+38h+Source], edx ;	Str2
		mov	[esp+38h+Dest],	eax ; Str1
		mov	eax, ds:_wcsicmp
		call	eax ; _wcsicmp
		test	eax, eax
		jnz	short loc_40D0E8
		mov	eax, [ebp+Str1]
		mov	dword ptr [eax+840h], 1
		jmp	short loc_40D100
; ---------------------------------------------------------------------------

loc_40D0E8:				; CODE XREF: sub_40CF79+15Ej
		add	[ebp+var_C], 1

loc_40D0EC:				; CODE XREF: sub_40CF79+13Fj
		cmp	[ebp+var_C], 31h
		jg	short loc_40D100
		mov	eax, [ebp+var_C]
		mov	eax, ds:Str2[eax*4]
		test	eax, eax
		jnz	short loc_40D0BA

loc_40D100:				; CODE XREF: sub_40CF79+16Dj
					; sub_40CF79+177j
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_40CF79	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_40D105(size_t	MaxCount, char,	int)
sub_40D105	proc near		; CODE XREF: sub_401623:loc_4017F5p
					; sub_406278+3Bp ...

var_6A00	= byte ptr -6A00h
FileName	= word ptr -470h
FindFileData	= _WIN32_FIND_DATAW ptr	-268h
var_18		= dword	ptr -18h
hFindFile	= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
lpFileName	= dword	ptr  0
MaxCount	= dword	ptr  8
arg_4		= byte ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	eax, 6A28h
		call	sub_40E640
		sub	esp, eax
		mov	[ebp+var_C], 0
		mov	ds:dword_42D730, 0
		mov	dword ptr [esp+arg_4], offset dword_42DB00 ; char
		mov	[esp+MaxCount],	offset asc_410F6A ; "%"
		mov	dword ptr [esp+4], 104h	; size_t
		lea	eax, [ebp+FileName]
		mov	[esp+lpFileName], eax ;	wchar_t	*
		call	sub_40CE3C
		lea	eax, [ebp+FindFileData]
		mov	[esp+4], eax	; lpFindFileData
		lea	eax, [ebp+FileName]
		mov	[esp+lpFileName], eax ;	lpFileName
		mov	eax, ds:FindFirstFileW
		call	eax ; FindFirstFileW
		sub	esp, 8
		mov	[ebp+hFindFile], eax
		cmp	[ebp+hFindFile], 0FFFFFFFFh
		jnz	short loc_40D176
		jmp	locret_40D441
; ---------------------------------------------------------------------------

loc_40D176:				; CODE XREF: sub_40D105+6Aj
					; sub_40D105+1B9j
		mov	eax, ds:dword_42D730
		cmp	eax, 31h
		jle	short loc_40D199
		mov	dword ptr [esp+4], 32h
		mov	[esp+lpFileName], 4B1h
		call	sub_405340
		jmp	loc_40D2C4
; ---------------------------------------------------------------------------

loc_40D199:				; CODE XREF: sub_40D105+79j
		mov	dword ptr [esp+4], offset Str ;	wchar_t	*
		lea	eax, [ebp+FindFileData]
		mov	[esp+lpFileName], eax ;	int
		call	sub_40CE87
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 1
		jnz	short loc_40D1E8
		mov	eax, ds:dword_42D730
		lea	edx, [eax+1]
		mov	ds:dword_42D730, edx
		mov	[esp+MaxCount],	offset dword_42DB00 ; wchar_t *
		lea	edx, [ebp+FindFileData]
		add	edx, 2Ch
		mov	[esp+4], edx	; wchar_t *
		mov	[esp+lpFileName], eax ;	int
		call	sub_40CF79
		jmp	loc_40D2A2
; ---------------------------------------------------------------------------

loc_40D1E8:				; CODE XREF: sub_40D105+B1j
		cmp	[ebp+var_18], 2
		jnz	loc_40D2A2
		lea	eax, [ebp+FindFileData]
		add	eax, 2Ch
		mov	[esp+lpFileName], eax ;	Str
		call	wcslen
		mov	[esp+MaxCount],	eax ; MaxCount
		mov	dword ptr [esp+4], offset word_410F74 ;	Str2
		lea	eax, [ebp+FindFileData]
		add	eax, 2Ch
		mov	[esp+lpFileName], eax ;	Str1
		call	wcsncmp
		test	eax, eax
		jz	short loc_40D2A2
		lea	eax, [ebp+FindFileData]
		add	eax, 2Ch
		mov	[esp+lpFileName], eax ;	Str
		call	wcslen
		mov	[esp+MaxCount],	eax ; MaxCount
		mov	dword ptr [esp+4], offset a__ ;	".."
		lea	eax, [ebp+FindFileData]
		add	eax, 2Ch
		mov	[esp+lpFileName], eax ;	Str1
		call	wcsncmp
		test	eax, eax
		jz	short loc_40D2A2
		cmp	[ebp+var_C], 31h
		jg	short loc_40D2A2
		lea	edx, [ebp+var_6A00]
		mov	eax, [ebp+var_C]
		shl	eax, 3
		mov	ecx, eax
		shl	ecx, 6
		add	eax, ecx
		add	eax, edx
		lea	edx, [ebp+FindFileData]
		add	edx, 2Ch
		mov	[esp+arg_8], edx
		mov	dword ptr [esp+arg_4], offset dword_42DB00 ; char
		mov	[esp+MaxCount],	offset asc_410F7E ; "%"
		mov	dword ptr [esp+4], 104h	; size_t
		mov	[esp+lpFileName], eax ;	wchar_t	*
		call	sub_40CE3C
		add	[ebp+var_C], 1

loc_40D2A2:				; CODE XREF: sub_40D105+DEj
					; sub_40D105+E7j ...
		lea	eax, [ebp+FindFileData]
		mov	[esp+4], eax	; lpFindFileData
		mov	eax, [ebp+hFindFile]
		mov	[esp+lpFileName], eax ;	hFindFile
		mov	eax, ds:FindNextFileW
		call	eax ; FindNextFileW
		sub	esp, 8
		test	eax, eax
		jnz	loc_40D176

loc_40D2C4:				; CODE XREF: sub_40D105+8Fj
		mov	eax, [ebp+hFindFile]
		mov	[esp+lpFileName], eax ;	hFindFile
		mov	eax, ds:FindClose
		call	eax ; FindClose
		sub	esp, 4
		mov	[ebp+var_10], 0
		jmp	loc_40D435
; ---------------------------------------------------------------------------

loc_40D2E0:				; CODE XREF: sub_40D105+336j
		lea	edx, [ebp+var_6A00]
		mov	eax, [ebp+var_10]
		shl	eax, 3
		mov	ecx, eax
		shl	ecx, 6
		add	eax, ecx
		add	eax, edx
		mov	dword ptr [esp+arg_4], eax ; char
		mov	[esp+MaxCount],	offset asc_410F6A ; "%"
		mov	dword ptr [esp+4], 104h	; size_t
		lea	eax, [ebp+FileName]
		mov	[esp+lpFileName], eax ;	wchar_t	*
		call	sub_40CE3C
		lea	eax, [ebp+FindFileData]
		mov	[esp+4], eax	; lpFindFileData
		lea	eax, [ebp+FileName]
		mov	[esp+lpFileName], eax ;	lpFileName
		mov	eax, ds:FindFirstFileW
		call	eax ; FindFirstFileW
		sub	esp, 8
		mov	[ebp+hFindFile], eax
		cmp	[ebp+hFindFile], 0FFFFFFFFh
		jnz	short loc_40D342
		jmp	loc_40D431
; ---------------------------------------------------------------------------

loc_40D342:				; CODE XREF: sub_40D105+236j
					; sub_40D105+316j
		mov	eax, ds:dword_42D730
		cmp	eax, 31h
		jle	short loc_40D375
		mov	dword ptr [esp+4], 32h
		mov	[esp+lpFileName], 4B1h
		call	sub_405340
		mov	eax, [ebp+hFindFile]
		mov	[esp+lpFileName], eax ;	hFindFile
		mov	eax, ds:FindClose
		call	eax ; FindClose
		sub	esp, 4
		jmp	locret_40D441
; ---------------------------------------------------------------------------

loc_40D375:				; CODE XREF: sub_40D105+245j
		mov	dword ptr [esp+4], offset Str ;	wchar_t	*
		lea	eax, [ebp+FindFileData]
		mov	[esp+lpFileName], eax ;	int
		call	sub_40CE87
		cmp	eax, 1
		jz	short loc_40D392
		jmp	short loc_40D3FF
; ---------------------------------------------------------------------------

loc_40D392:				; CODE XREF: sub_40D105+289j
		lea	eax, [ebp+FindFileData]
		add	eax, 2Ch
		mov	[esp+lpFileName], eax ;	wchar_t	*
		call	sub_40CF23
		test	eax, eax
		jz	short loc_40D3C2
		lea	eax, [ebp+FindFileData]
		add	eax, 2Ch
		mov	[esp+4], eax
		mov	[esp+lpFileName], 4E3h
		call	sub_405340
		jmp	short loc_40D3FF
; ---------------------------------------------------------------------------

loc_40D3C2:				; CODE XREF: sub_40D105+2A0j
		lea	edx, [ebp+var_6A00]
		mov	eax, [ebp+var_10]
		shl	eax, 3
		mov	ecx, eax
		shl	ecx, 6
		add	eax, ecx
		lea	ecx, [edx+eax]
		mov	eax, ds:dword_42D730
		lea	edx, [eax+1]
		mov	ds:dword_42D730, edx
		mov	[esp+MaxCount],	ecx ; wchar_t *
		lea	edx, [ebp+FindFileData]
		add	edx, 2Ch
		mov	[esp+4], edx	; wchar_t *
		mov	[esp+lpFileName], eax ;	int
		call	sub_40CF79

loc_40D3FF:				; CODE XREF: sub_40D105+28Bj
					; sub_40D105+2BBj
		lea	eax, [ebp+FindFileData]
		mov	[esp+4], eax	; lpFindFileData
		mov	eax, [ebp+hFindFile]
		mov	[esp+lpFileName], eax ;	hFindFile
		mov	eax, ds:FindNextFileW
		call	eax ; FindNextFileW
		sub	esp, 8
		test	eax, eax
		jnz	loc_40D342
		mov	eax, [ebp+hFindFile]
		mov	[esp+lpFileName], eax ;	hFindFile
		mov	eax, ds:FindClose
		call	eax ; FindClose
		sub	esp, 4

loc_40D431:				; CODE XREF: sub_40D105+238j
		add	[ebp+var_10], 1

loc_40D435:				; CODE XREF: sub_40D105+1D6j
		mov	eax, [ebp+var_10]
		cmp	eax, [ebp+var_C]
		jl	loc_40D2E0

locret_40D441:				; CODE XREF: sub_40D105+6Cj
					; sub_40D105+26Bj
		leave
		retn
sub_40D105	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION OPENSSL_add_all_algorithms_noconf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ERR_load_crypto_strings]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PEM_read_PrivateKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PEM_write_PrivateKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_des_ede3_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION d2i_PKCS12_fp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PKCS12_parse]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PKCS12_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_alias_get0]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PKCS12_create]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION sk_pop_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION i2d_PKCS12_fp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION InitMUILanguage]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION WinHttpGetIEProxyConfigForCurrentUser]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION WinHttpDetectAutoProxyConfigUrl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION WinHttpOpen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION WinHttpGetProxyForUrl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION WinHttpCloseHandle]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION WTSRegisterSessionNotification]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION WTSUnRegisterSessionNotification]
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:00431024o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_40D520
		cmp	eax, 3
		jz	short loc_40D520
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_40D520:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_40E260
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_401180+101p
					; DATA XREF: .rdata:off_410F8Co ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_40F258, 2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_40D56B
		mov	dword_40F258, 2

loc_40D56B:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_40D581
		cmp	eax, 1
		jz	short loc_40D5B0

loc_40D575:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_40D581:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_431030
		cmp	ebx, offset dword_431030
		jz	short loc_40D575
		xchg	ax, ax

loc_40D590:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_40D598
		call	eax

loc_40D598:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_431030
		jnz	short loc_40D590
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_40D5B0:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_40E260
		jmp	short loc_40D575
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40D5E0	proc near		; DATA XREF: .CRT:00431014o
		mov	eax, ds:__lconv_init
		jmp	eax
sub_40D5E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40D5F0	proc near		; CODE XREF: sub_40D610+Cp
					; sub_40D610+32p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_40D5F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40D600	proc near		; CODE XREF: sub_401010+59p
					; sub_40D610+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_40D600	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_40D610(_onexit_t)
sub_40D610	proc near		; CODE XREF: sub_40D6D0+Ap

Func		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_42E8CC
		mov	[esp+2Ch+Func],	eax
		call	sub_40D5F0
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_14], eax
		jz	loc_40D6B0
		mov	[esp+2Ch+Func],	8
		call	_lock
		mov	eax, ds:dword_42E8CC
		mov	[esp+2Ch+Func],	eax
		call	sub_40D5F0
		mov	[esp+2Ch+var_14], eax
		mov	eax, ds:dword_42E8C8
		mov	[esp+2Ch+Func],	eax
		call	sub_40D5F0
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+Func],	eax
		call	sub_40D600
		mov	ds:dword_42E8CC, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+Func],	eax
		call	sub_40D600
		mov	[esp+2Ch+Func],	8
		mov	ds:dword_42E8C8, eax
		call	_unlock
		add	esp, 28h
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40D6B0:				; CODE XREF: sub_40D610+18j
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax ; Func
		call	ds:_onexit
		add	esp, 28h
		pop	ebx
		retn
sub_40D610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_40D6D0(_onexit_t)
sub_40D6D0	proc near		; CODE XREF: sub_40DF10-27p
					; sub_40E810+12p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_40D610
		test	eax, eax
		setz	al
		add	esp, 1Ch
		movzx	eax, al
		neg	eax
		retn
sub_40D6D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; LONG __stdcall TopLevelExceptionFilter(struct	_EXCEPTION_POINTERS *ExceptionInfo)
TopLevelExceptionFilter	proc near	; DATA XREF: sub_401180+10Bo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
ExceptionInfo	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+ExceptionInfo]
		mov	eax, [ebx]
		mov	eax, [eax]
		cmp	eax, 0C0000091h
		ja	short loc_40D748
		cmp	eax, 0C000008Dh
		jnb	loc_40D7B0
		cmp	eax, 0C0000005h
		jnz	loc_40D7B7
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 0Bh
		call	signal
		cmp	eax, 1
		jz	loc_40D7E6
		test	eax, eax
		jz	short loc_40D75D
		mov	[esp+18h+var_18], 0Bh
		call	eax
		jmp	short loc_40D79D
; ---------------------------------------------------------------------------

loc_40D748:				; CODE XREF: TopLevelExceptionFilter+14j
		cmp	eax, 0C0000094h
		jz	short loc_40D771
		cmp	eax, 0C0000096h
		jz	short loc_40D7BE
		cmp	eax, 0C0000093h
		jz	short loc_40D7B0

loc_40D75D:				; CODE XREF: TopLevelExceptionFilter+4Bj
					; TopLevelExceptionFilter+A2j ...
		mov	eax, ds:dword_4125E4
		test	eax, eax
		jz	short loc_40D7A2
		mov	[ebp+ExceptionInfo], ebx
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------

loc_40D771:				; CODE XREF: TopLevelExceptionFilter+5Dj
		xor	esi, esi

loc_40D773:				; CODE XREF: TopLevelExceptionFilter+C5j
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 8
		call	signal
		cmp	eax, 1
		jz	loc_40D816
		test	eax, eax
		jz	short loc_40D75D
		mov	[esp+18h+var_18], 8
		call	eax

loc_40D79D:				; CODE XREF: TopLevelExceptionFilter+56j
					; TopLevelExceptionFilter+F4j ...
		mov	eax, 0FFFFFFFFh

loc_40D7A2:				; CODE XREF: TopLevelExceptionFilter+74j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_40D7B0:				; CODE XREF: TopLevelExceptionFilter+1Bj
					; TopLevelExceptionFilter+6Bj
		mov	esi, 1
		jmp	short loc_40D773
; ---------------------------------------------------------------------------

loc_40D7B7:				; CODE XREF: TopLevelExceptionFilter+26j
		cmp	eax, 0C000001Dh
		jnz	short loc_40D75D

loc_40D7BE:				; CODE XREF: TopLevelExceptionFilter+64j
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 4
		call	signal
		cmp	eax, 1
		jz	short loc_40D800
		test	eax, eax
		jz	short loc_40D75D
		mov	[esp+18h+var_18], 4
		call	eax
		jmp	short loc_40D79D
; ---------------------------------------------------------------------------

loc_40D7E6:				; CODE XREF: TopLevelExceptionFilter+43j
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 0Bh
		call	signal
		jmp	short loc_40D79D
; ---------------------------------------------------------------------------
		align 10h

loc_40D800:				; CODE XREF: TopLevelExceptionFilter+E5j
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 4
		call	signal
		jmp	short loc_40D79D
; ---------------------------------------------------------------------------

loc_40D816:				; CODE XREF: TopLevelExceptionFilter+9Aj
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 8
		call	signal
		test	esi, esi
		jz	loc_40D79D
		call	sub_40DE80
		jmp	loc_40D79D
TopLevelExceptionFilter	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40D840	proc near		; CODE XREF: sub_401010+75p
		xor	eax, eax
		retn
sub_40D840	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 3Ch
		mov	eax, ds:dword_4125E8
		fld	qword ptr [esp+48h]
		fld	qword ptr [esp+50h]
		fld	qword ptr [esp+58h]
		test	eax, eax
		jz	short loc_40D891
		fxch	st(2)
		mov	edx, [esp+40h]
		fstp	qword ptr [esp+18h]
		fstp	qword ptr [esp+20h]
		fstp	qword ptr [esp+28h]
		mov	[esp+10h], edx
		mov	edx, [esp+44h]
		mov	[esp+14h], edx
		lea	edx, [esp+10h]
		mov	[esp], edx
		call	eax ; dword_4125E8
		jmp	short loc_40D897
; ---------------------------------------------------------------------------

loc_40D891:				; CODE XREF: .text:0040D866j
		fstp	st
		fstp	st
		fstp	st

loc_40D897:				; CODE XREF: .text:0040D88Fj
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40D8A0	proc near		; CODE XREF: sub_401010+F7p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ds:dword_4125E8, eax
		jmp	__setusermatherr
sub_40D8A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40D8B0	proc near		; DATA XREF: sub_401010:loc_401100o

File		= dword	ptr -3Ch
Format		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= qword	ptr -2Ch
var_24		= qword	ptr -24h
var_1C		= qword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		mov	eax, [esp+3Ch+arg_0]
		mov	edx, [eax]
		lea	ecx, [edx-1]
		mov	edx, offset aUnknownError ; "Unknown error"
		cmp	ecx, 5
		ja	short loc_40D8CD
		mov	edx, ds:off_4110AC[ecx*4]

loc_40D8CD:				; CODE XREF: sub_40D8B0+14j
		fld	qword ptr [eax+18h]
		fld	qword ptr [eax+10h]
		fld	qword ptr [eax+8]
		fxch	st(2)
		mov	eax, [eax+4]
		fstp	[esp+3Ch+var_1C]
		fstp	[esp+3Ch+var_24]
		fstp	[esp+3Ch+var_2C]
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_30], eax
		mov	eax, ds:_iob
		mov	[esp+3Ch+Format], offset a_matherrSInSGG ; "_matherr():	%s in %s(%g, %g)  (retval=%"...
		add	eax, 40h
		mov	[esp+3Ch+File],	eax ; File
		call	fprintf
		xor	eax, eax
		add	esp, 3Ch
		retn
sub_40D8B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_40D910(char *Format, char ArgList)
sub_40D910	proc near		; CODE XREF: sub_40D970+1E4p
					; sub_40D970+212p ...

Str		= dword	ptr -1Ch
Size		= dword	ptr -18h
Count		= dword	ptr -14h
File		= dword	ptr -10h
Format		= dword	ptr  4
ArgList		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+Count], 1Bh ; Count
		lea	ebx, [esp+1Ch+ArgList]
		mov	[esp+1Ch+Size],	1 ; Size
		mov	[esp+1Ch+Str], offset aMingwW64Runtim ;	"Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+File],	eax ; File
		call	fwrite
		mov	eax, [esp+1Ch+Format]
		mov	[esp+1Ch+Count], ebx ; ArgList
		mov	[esp+1Ch+Size],	eax ; Format
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+Str], eax ; File
		call	vfprintf
		call	abort
sub_40D910	endp

; ---------------------------------------------------------------------------
		jmp	short sub_40D970
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40D970	proc near		; CODE XREF: .text:0040D961j
					; sub_40DBB0+140p ...

lpAddress	= dword	ptr -58h
lpBuffer	= dword	ptr -54h
dwLength	= dword	ptr -50h
lpflOldProtect	= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
Size		= dword	ptr -40h
Src		= dword	ptr -3Ch
flOldProtect	= dword	ptr -38h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-34h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 4Ch
		mov	[ebp+Size], ecx
		mov	ecx, ds:dword_4125F0
		mov	[ebp+Src], edx
		test	ecx, ecx
		jle	loc_40DB60
		mov	edx, ds:dword_4125F4
		xor	ebx, ebx

loc_40D997:				; CODE XREF: sub_40D970+44j
		mov	eax, [edx+4]
		cmp	esi, eax
		jb	short loc_40D9AC
		mov	edi, [edx+8]
		add	eax, [edi+8]
		cmp	esi, eax
		jb	loc_40DA80

loc_40D9AC:				; CODE XREF: sub_40D970+2Cj
		add	ebx, 1
		add	edx, 0Ch
		cmp	ebx, ecx
		jnz	short loc_40D997

loc_40D9B6:				; CODE XREF: sub_40D970+1F2j
		mov	[esp+58h+lpAddress], esi
		call	sub_40E420
		test	eax, eax
		mov	edi, eax
		jz	loc_40DB87
		lea	ecx, [ebx+ebx*2]
		shl	ecx, 2
		mov	ebx, ecx
		add	ebx, ds:dword_4125F4
		mov	[ebp+var_44], ecx
		mov	[ebx+8], eax
		mov	dword ptr [ebx], 0
		call	sub_40E510
		mov	ecx, [ebp+var_44]
		lea	edx, [ebp+Buffer]
		mov	[ebp+var_44], edx
		add	eax, [edi+0Ch]
		mov	[ebp+var_48], ecx
		mov	[ebx+4], eax
		mov	eax, ds:dword_4125F4
		mov	ebx, ds:VirtualQuery
		mov	eax, [eax+ecx+4]
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualQuery
		mov	edx, [ebp+var_44]
		mov	ecx, [ebp+var_48]
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_40DB67
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jnz	loc_40DB04

loc_40DA36:				; CODE XREF: sub_40D970+197j
					; sub_40D970+1CDj
		add	ds:dword_4125F0, 1

loc_40DA3D:				; CODE XREF: sub_40D970+119j
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	[esp+58h+lpAddress], esi ; lpAddress
		call	ebx ; VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_40DB97
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_40DA90

loc_40DA61:				; CODE XREF: sub_40D970+123j
		mov	eax, [ebp+Size]
		mov	[esp+58h+lpAddress], esi ; Dst
		mov	[esp+58h+dwLength], eax	; Size
		mov	eax, [ebp+Src]
		mov	[esp+58h+lpBuffer], eax	; Src
		call	memcpy

loc_40DA77:				; CODE XREF: sub_40D970+168j
					; sub_40D970+16Dj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40DA80:				; CODE XREF: sub_40D970+36j
		lea	edx, [ebp+Buffer]
		mov	ebx, ds:VirtualQuery
		jmp	short loc_40DA3D
; ---------------------------------------------------------------------------
		align 10h

loc_40DA90:				; CODE XREF: sub_40D970+EFj
		cmp	eax, 40h
		jz	short loc_40DA61
		mov	eax, [ebp+Buffer.RegionSize]
		lea	edi, [ebp+flOldProtect]
		mov	ebx, ds:VirtualProtect
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	[esp+58h+dwLength], 40h	; flNewProtect
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualProtect
		mov	eax, [ebp+Size]
		sub	esp, 10h
		mov	[esp+58h+dwLength], eax	; Size
		mov	eax, [ebp+Src]
		mov	[esp+58h+lpAddress], esi ; Dst
		mov	[esp+58h+lpBuffer], eax	; Src
		call	memcpy
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 40h
		jz	short loc_40DA77
		cmp	eax, 4
		jz	short loc_40DA77
		mov	eax, [ebp+flOldProtect]
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	[esp+58h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualProtect
		sub	esp, 10h
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40DB04:				; CODE XREF: sub_40D970+C0j
		cmp	eax, 40h
		jz	loc_40DA36
		mov	eax, [ebp+Buffer.RegionSize]
		add	ecx, ds:dword_4125F4
		mov	[ebp+var_44], edx
		mov	[esp+58h+dwLength], 40h	; flNewProtect
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpflOldProtect], ecx ;	lpflOldProtect
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		mov	edx, [ebp+var_44]
		sub	esp, 10h
		test	eax, eax
		jnz	loc_40DA36
		call	ds:GetLastError
		mov	[esp+58h+lpAddress], offset aVirtualprotect ; "	 VirtualProtect	failed with code 0x%x"
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_40D910
; ---------------------------------------------------------------------------
		align 10h

loc_40DB60:				; CODE XREF: sub_40D970+19j
		xor	ebx, ebx
		jmp	loc_40D9B6
; ---------------------------------------------------------------------------

loc_40DB67:				; CODE XREF: sub_40D970+B4j
		mov	eax, ds:dword_4125F4
		mov	eax, [eax+ecx+4]
		mov	[esp+58h+dwLength], eax
		mov	eax, [edi+8]
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_40D910
; ---------------------------------------------------------------------------

loc_40DB87:				; CODE XREF: sub_40D970+52j
		mov	[esp+58h+lpBuffer], esi	; ArgList
		mov	[esp+58h+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_40D910
; ---------------------------------------------------------------------------

loc_40DB97:				; CODE XREF: sub_40D970+E3j
		mov	[esp+58h+dwLength], esi
		mov	[esp+58h+lpBuffer], 1Ch	; ArgList
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		call	sub_40D910
sub_40D970	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40DBB0	proc near		; CODE XREF: sub_401180:loc_401286p

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_3D		= byte ptr -3Dh

		mov	eax, ds:dword_4125EC
		test	eax, eax
		jz	short loc_40DBC0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40DBC0:				; CODE XREF: sub_40DBB0+7j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ds:dword_4125EC, 1
		call	sub_40E470
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_40E640
		mov	ds:dword_4125F0, 0
		sub	esp, eax
		lea	eax, [esp+5Ch+var_3D]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_4125F4, eax
		mov	eax, offset dword_411528
		sub	eax, offset dword_411510
		cmp	eax, 7
		jle	loc_40DCB1
		cmp	eax, 0Bh
		jle	loc_40DD83
		mov	eax, ds:dword_411510
		test	eax, eax
		jnz	loc_40DCB9
		mov	eax, ds:dword_411514
		test	eax, eax
		jnz	loc_40DCB9
		mov	edi, ds:dword_411518
		mov	ebx, offset dword_41151C
		test	edi, edi
		jz	loc_40DD88
		mov	ebx, offset dword_411510

loc_40DC50:				; CODE XREF: sub_40DBB0+1E7j
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_40DE70
		add	ebx, 0Ch
		cmp	ebx, offset dword_411528
		jnb	short loc_40DCB1

loc_40DC67:				; CODE XREF: sub_40DBB0+236j
		mov	edx, [ebx]
		mov	edi, [ebx+4]
		mov	ecx, [edx+400000h]
		lea	eax, [edi+400000h]
		mov	[ebp-3Ch], ecx
		movzx	ecx, byte ptr [ebx+8]
		cmp	ecx, 10h
		jz	loc_40DDA2
		cmp	ecx, 20h
		jz	loc_40DE26
		cmp	ecx, 8
		jz	loc_40DDF1
		mov	[esp+5Ch+lpBuffer], ecx	; ArgList
		mov	[esp+5Ch+lpAddress], offset aUnknownPseudoR ; "	 Unknown pseudo	relocation bit size %d"...
		mov	dword ptr [ebp-34h], 0
		call	sub_40D910
; ---------------------------------------------------------------------------

loc_40DCB1:				; CODE XREF: sub_40DBB0+5Fj
					; sub_40DBB0+B5j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40DCB9:				; CODE XREF: sub_40DBB0+75j
					; sub_40DBB0+82j
		mov	ebx, offset dword_411510

loc_40DCBE:				; CODE XREF: sub_40DBB0+1DCj
					; sub_40DBB0+1EDj
		cmp	ebx, offset dword_411528
		jnb	short loc_40DCB1
		lea	eax, [ebp-34h]
		mov	[ebp-3Ch], eax
		lea	esi, [esi+0]

loc_40DCD0:				; CODE XREF: sub_40DBB0+14Bj
		mov	edx, [ebx+4]
		mov	ecx, 4
		add	ebx, 8
		lea	eax, [edx+400000h]
		mov	edx, [edx+400000h]
		add	edx, [ebx-8]
		mov	[ebp-34h], edx
		mov	edx, [ebp-3Ch]
		call	sub_40D970
		cmp	ebx, offset dword_411528
		jb	short loc_40DCD0

loc_40DCFD:				; CODE XREF: sub_40DBB0+23Cj
		mov	eax, ds:dword_4125F0
		xor	ebx, ebx
		test	eax, eax
		jg	short loc_40DD1B
		jmp	short loc_40DCB1
; ---------------------------------------------------------------------------
		align 10h

loc_40DD10:				; CODE XREF: sub_40DBB0+180j
					; sub_40DBB0+1D1j
		add	ebx, 1
		cmp	ebx, ds:dword_4125F0
		jge	short loc_40DCB1

loc_40DD1B:				; CODE XREF: sub_40DBB0+156j
		mov	eax, ds:dword_4125F4
		lea	esi, [ebx+ebx*2]
		lea	edi, ds:0[esi*4]
		add	eax, edi
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_40DD10
		mov	eax, [eax+4]
		mov	ecx, [ebp-3Ch]
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		mov	[esp+5Ch+lpBuffer], ecx	; lpBuffer
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_40DE4B
		mov	eax, ds:dword_4125F4
		lea	ecx, [ebp-38h]
		mov	eax, [eax+esi*4]
		mov	[esp+5Ch+lpflOldProtect], ecx ;	lpflOldProtect
		mov	[esp+5Ch+dwLength], eax	; flNewProtect
		mov	eax, [ebp-28h]
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [ebp-34h]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_40DD10
; ---------------------------------------------------------------------------

loc_40DD83:				; CODE XREF: sub_40DBB0+68j
		mov	ebx, offset dword_411510

loc_40DD88:				; CODE XREF: sub_40DBB0+95j
		mov	esi, [ebx]
		test	esi, esi
		jnz	loc_40DCBE
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jz	loc_40DC50
		jmp	loc_40DCBE
; ---------------------------------------------------------------------------

loc_40DDA2:				; CODE XREF: sub_40DBB0+D2j
		movzx	ecx, word ptr [edi+400000h]
		movzx	edi, cx
		mov	esi, edi
		or	esi, 0FFFF0000h
		test	cx, cx
		cmovs	edi, esi
		mov	esi, [ebp-3Ch]
		sub	edi, edx
		lea	ecx, [ebp-34h]
		sub	edi, 400000h
		mov	[ebp-3Ch], ecx
		lea	edx, [ebp-34h]
		mov	ecx, 2
		add	esi, edi
		mov	[ebp-34h], esi
		call	sub_40D970

loc_40DDDD:				; CODE XREF: sub_40DBB0+274j
					; sub_40DBB0+299j
		add	ebx, 0Ch
		cmp	ebx, offset dword_411528
		jb	loc_40DC67
		jmp	loc_40DCFD
; ---------------------------------------------------------------------------

loc_40DDF1:				; CODE XREF: sub_40DBB0+E4j
		movzx	ecx, byte ptr [eax]
		movzx	edi, cl
		mov	esi, edi
		or	esi, 0FFFFFF00h
		test	cl, cl
		cmovs	edi, esi
		mov	esi, [ebp-3Ch]
		mov	ecx, 1
		sub	edi, 400000h
		sub	edi, edx
		lea	edx, [ebp-34h]
		add	esi, edi
		mov	[ebp-34h], esi
		mov	[ebp-3Ch], edx
		call	sub_40D970
		jmp	short loc_40DDDD
; ---------------------------------------------------------------------------

loc_40DE26:				; CODE XREF: sub_40DBB0+DBj
		mov	esi, [ebp-3Ch]
		add	edx, 400000h
		lea	ecx, [ebp-34h]
		mov	[ebp-3Ch], ecx
		mov	ecx, 4
		sub	esi, edx
		add	esi, [eax]
		lea	edx, [ebp-34h]
		mov	[ebp-34h], esi
		call	sub_40D970
		jmp	short loc_40DDDD
; ---------------------------------------------------------------------------

loc_40DE4B:				; CODE XREF: sub_40DBB0+1A2j
		mov	ecx, ds:dword_4125F4
		add	ecx, edi
		mov	eax, [ecx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ecx+8]
		mov	eax, [eax+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		call	sub_40D910
; ---------------------------------------------------------------------------

loc_40DE70:				; CODE XREF: sub_40DBB0+A6j
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		mov	[esp+5Ch+lpAddress], offset aUnknownPseud_0 ; "	 Unknown pseudo	relocation protocol ve"...
		call	sub_40D910
sub_40DBB0	endp


; =============== S U B	R O U T	I N E =======================================


sub_40DE80	proc near		; CODE XREF: sub_401180+12Cp
					; TopLevelExceptionFilter+142p
		fninit
		retn
sub_40DE80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_40DE90()
sub_40DE90	proc near		; DATA XREF: sub_40DF10:loc_40DEE2o
		mov	eax, off_40F254
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_40DEBA
		sub	esp, 0Ch
		xchg	ax, ax

loc_40DEA0:				; CODE XREF: sub_40DE90+25j
		call	eax
		mov	eax, off_40F254
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_40F254, edx
		test	eax, eax
		jnz	short loc_40DEA0
		add	esp, 0Ch

locret_40DEBA:				; CODE XREF: sub_40DE90+9j
		rep retn
sub_40DE90	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_40DF10

loc_40DEC0:				; CODE XREF: sub_40DF10+1Aj
		push	ebx
		sub	esp, 18h
		mov	ebx, ds:dword_40E830
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_40DEF3

loc_40DECF:				; CODE XREF: sub_40DF10-9j
		test	ebx, ebx
		jz	short loc_40DEE2

loc_40DED3:				; CODE XREF: sub_40DF10-30j
		call	ds:dword_40E830[ebx*4]
		sub	ebx, 1
		lea	esi, [esi+0]
		jnz	short loc_40DED3

loc_40DEE2:				; CODE XREF: sub_40DF10-3Fj
		mov	[esp+1Ch+var_1C], offset sub_40DE90 ; _onexit_t
		call	sub_40D6D0
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40DEF3:				; CODE XREF: sub_40DF10-43j
		xor	ebx, ebx
		jmp	short loc_40DEF9
; ---------------------------------------------------------------------------

loc_40DEF7:				; CODE XREF: sub_40DF10-Bj
		mov	ebx, eax

loc_40DEF9:				; CODE XREF: sub_40DF10-1Bj
		lea	eax, [ebx+1]
		mov	edx, ds:dword_40E830[eax*4]
		test	edx, edx
		jnz	short loc_40DEF7
		jmp	short loc_40DECF
; END OF FUNCTION CHUNK	FOR sub_40DF10
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40DF10	proc near		; CODE XREF: sub_401180+23Fp

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 0040DEC0 SIZE 00000049 BYTES

		mov	eax, ds:dword_4125F8
		test	eax, eax
		jz	short loc_40DF20
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_40DF20:				; CODE XREF: sub_40DF10+7j
		mov	ds:dword_4125F8, 1
		jmp	short loc_40DEC0
sub_40DF10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40DF30	proc near		; CODE XREF: sub_401180+26Dp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_40F000
		mov	[esp+18h+var_14], 0 ; int
		mov	[esp+18h+var_C], eax ; int
		mov	eax, ds:dword_412968
		mov	[esp+18h+var_10], eax ;	int
		mov	eax, ds:dword_41296C
		mov	[esp+18h+var_18], eax ;	HINSTANCE
		call	sub_401623
		sub	esp, 10h
		leave
		retn
sub_40DF30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40DF70	proc near		; CODE XREF: start+Dp .text:004014FDp

lpSystemTimeAsFileTime=	dword ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -28h
PerformanceCount= LARGE_INTEGER	ptr -20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, dword_40F268
		mov	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		cmp	eax, 0BB40E64Eh
		jz	short loc_40DFA2
		not	eax
		mov	dword_40F26C, eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40DFA2:				; CODE XREF: sub_40DF70+21j
		lea	eax, [ebp+SystemTimeAsFileTime]
		mov	[esp+38h+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	edi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	esi, edi
		sub	esp, 4
		call	ds:GetCurrentProcessId
		mov	ebx, eax
		call	ds:GetCurrentThreadId
		mov	[ebp+var_2C], eax
		call	ds:GetTickCount
		mov	[ebp+var_30], eax
		lea	eax, [ebp+PerformanceCount]
		mov	[esp+38h+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		xor	esi, dword ptr [ebp+PerformanceCount]
		xor	esi, dword ptr [ebp+PerformanceCount+4]
		xor	esi, ebx
		xor	esi, [ebp+var_2C]
		sub	esp, 4
		xor	esi, [ebp+var_30]
		cmp	esi, 0BB40E64Eh
		jz	short loc_40E010
		mov	eax, esi
		not	eax

loc_40DFFC:				; CODE XREF: sub_40DF70+AAj
		mov	dword_40F268, esi
		mov	dword_40F26C, eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E010:				; CODE XREF: sub_40DF70+86j
		mov	eax, 44BF19B0h
		mov	esi, 0BB40E64Fh
		jmp	short loc_40DFFC
sub_40DF70	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_4126C4, edx
		mov	ds:dword_4128E0, 0C0000409h
		mov	ds:dword_4128E4, 1
		mov	ds:dword_4126B8, eax
		mov	ds:dword_4128EC, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_4126AC, eax
		mov	eax, dword_40F268
		mov	[ebp-10h], eax
		mov	eax, dword_40F26C
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_4111BC
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40E0B0	proc near		; CODE XREF: sub_40E260:loc_40E2E2p
					; sub_40E260:loc_40E2F0p

lpCriticalSection= dword ptr -28h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	[esp+28h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	edi, ds:dword_412940
		mov	esi, ds:GetLastError
		sub	esp, 4
		test	edi, edi
		jz	short loc_40E109
		lea	esi, [esi+0]

loc_40E0E0:				; CODE XREF: sub_40E0B0+57j
		mov	eax, [edi]
		mov	[esp+28h+lpCriticalSection], eax ; dwTlsIndex
		call	ds:TlsGetValue
		sub	esp, 4
		mov	ebx, eax
		call	esi
		test	eax, eax
		jnz	short loc_40E102
		test	ebx, ebx
		jz	short loc_40E102
		mov	eax, [edi+4]
		mov	[esp+28h+lpCriticalSection], ebx
		call	eax

loc_40E102:				; CODE XREF: sub_40E0B0+44j
					; sub_40E0B0+48j
		mov	edi, [edi+8]
		test	edi, edi
		jnz	short loc_40E0E0

loc_40E109:				; CODE XREF: sub_40E0B0+27j
		mov	[esp+28h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_40E0B0	endp

; ---------------------------------------------------------------------------
		jmp	short loc_40E130
; ---------------------------------------------------------------------------
		align 10h

loc_40E130:				; CODE XREF: .text:0040E121j
		push	ebp
		mov	ebp, esp
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 10h
		mov	eax, ds:dword_412944
		test	eax, eax
		jnz	short loc_40E150

loc_40E143:				; CODE XREF: .text:0040E1B1j
		lea	esp, [ebp-8]
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E150:				; CODE XREF: .text:0040E141j
		mov	dword ptr [esp+4], 0Ch
		mov	dword ptr [esp], 1
		call	calloc
		test	eax, eax
		mov	ebx, eax
		jz	short loc_40E1AC
		mov	eax, [ebp+8]
		mov	dword ptr [esp], offset	CriticalSection
		mov	[ebx], eax
		mov	eax, [ebp+0Ch]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_412940
		mov	ds:dword_412940, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		mov	eax, esi
		sub	esp, 4
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40E1AC:				; CODE XREF: .text:0040E168j
		mov	esi, 0FFFFFFFFh
		jmp	short loc_40E143
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:dword_412944
		mov	ebx, [ebp+8]
		test	eax, eax
		jnz	short loc_40E1E0
		xor	eax, eax
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E1E0:				; CODE XREF: .text:0040E1D1j
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	edx, ds:dword_412940
		sub	esp, 4
		test	edx, edx
		jz	short loc_40E211
		mov	eax, [edx]
		cmp	eax, ebx
		jnz	short loc_40E20A
		jmp	short loc_40E248
; ---------------------------------------------------------------------------

loc_40E202:				; CODE XREF: .text:0040E20Fj
		mov	ecx, [eax]
		cmp	ecx, ebx
		jz	short loc_40E228
		mov	edx, eax

loc_40E20A:				; CODE XREF: .text:0040E1FEj
		mov	eax, [edx+8]
		test	eax, eax
		jnz	short loc_40E202

loc_40E211:				; CODE XREF: .text:0040E1F8j
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_40E221:				; CODE XREF: .text:0040E246j
		xor	eax, eax
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_40E228:				; CODE XREF: .text:0040E206j
		mov	ecx, [eax+8]
		mov	[edx+8], ecx

loc_40E22E:				; CODE XREF: .text:0040E252j
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_40E221
; ---------------------------------------------------------------------------

loc_40E248:				; CODE XREF: .text:0040E200j
		mov	eax, [edx+8]
		mov	ds:dword_412940, eax
		mov	eax, edx
		jmp	short loc_40E22E
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40E260	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -18h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		cmp	eax, 1
		jz	short loc_40E2B4
		jb	short loc_40E285
		cmp	eax, 3
		jnz	short loc_40E27E
		mov	eax, ds:dword_412944
		test	eax, eax
		jnz	short loc_40E2E2

loc_40E27E:				; CODE XREF: sub_40E260+13j
					; sub_40E260+36j ...
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------

loc_40E285:				; CODE XREF: sub_40E260+Ej
		mov	eax, ds:dword_412944
		test	eax, eax
		jnz	short loc_40E2F0

loc_40E28E:				; CODE XREF: sub_40E260+95j
		mov	eax, ds:dword_412944
		cmp	eax, 1
		jnz	short loc_40E27E
		mov	ds:dword_412944, 0
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_40E27E
; ---------------------------------------------------------------------------

loc_40E2B4:				; CODE XREF: sub_40E260+Cj
		mov	eax, ds:dword_412944
		test	eax, eax
		jz	short loc_40E2D0

loc_40E2BD:				; CODE XREF: sub_40E260+80j
		mov	ds:dword_412944, 1
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E2D0:				; CODE XREF: sub_40E260+5Bj
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_40E2BD
; ---------------------------------------------------------------------------

loc_40E2E2:				; CODE XREF: sub_40E260+1Cj
		call	sub_40E0B0
		jmp	short loc_40E27E
; ---------------------------------------------------------------------------
		align 10h

loc_40E2F0:				; CODE XREF: sub_40E260+2Cj
		call	sub_40E0B0
		jmp	short loc_40E28E
sub_40E260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40E300	proc near		; CODE XREF: .text:loc_40E330j
					; .text:0040E3B5p ...
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jz	short loc_40E310
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E310:				; CODE XREF: sub_40E300+9j
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
sub_40E300	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_40E330
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E330:				; CODE XREF: .text:0040E329j
		jmp	short sub_40E300
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40E340	proc near		; CODE XREF: sub_40E420+3Ap
					; .text:0040E575p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		mov	edx, [esp+8+arg_0]
		mov	ebx, [esp+8+arg_4]
		add	edx, [edx+3Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	esi, esi
		lea	eax, [edx+eax+18h]
		jz	short loc_40E378
		xor	edx, edx
		nop

loc_40E360:				; CODE XREF: sub_40E340+36j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_40E36E
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_40E37A

loc_40E36E:				; CODE XREF: sub_40E340+25j
		add	edx, 1
		add	eax, 28h
		cmp	edx, esi
		jb	short loc_40E360

loc_40E378:				; CODE XREF: sub_40E340+1Bj
		xor	eax, eax

loc_40E37A:				; CODE XREF: sub_40E340+2Cj
		pop	ebx
		pop	esi
		retn
sub_40E340	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		push	edi
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+30h]
		mov	[esp], edi
		call	strlen
		cmp	eax, 8
		ja	short loc_40E3A5
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_40E3B0

loc_40E3A5:				; CODE XREF: .text:0040E398j
					; .text:0040E3BCj ...
		add	esp, 1Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E3B0:				; CODE XREF: .text:0040E3A3j
		mov	eax, 400000h
		call	sub_40E300
		test	eax, eax
		jz	short loc_40E3A5
		mov	eax, ds:40003Ch
		lea	edx, [eax+400000h]
		movzx	eax, word ptr [eax+400014h]
		movzx	ebp, word ptr [edx+6]
		lea	ebx, [edx+eax+18h]
		test	ebp, ebp
		jnz	short loc_40E3EA
		jmp	short loc_40E3A5
; ---------------------------------------------------------------------------
		align 10h

loc_40E3E0:				; CODE XREF: .text:0040E400j
		add	esi, 1
		add	ebx, 28h
		cmp	esi, ebp
		jnb	short loc_40E410

loc_40E3EA:				; CODE XREF: .text:0040E3DAj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], edi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jnz	short loc_40E3E0
		add	esp, 1Ch
		mov	esi, ebx
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E410:				; CODE XREF: .text:0040E3E8j
		add	esp, 1Ch
		xor	esi, esi
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40E420	proc near		; CODE XREF: sub_40D970+49p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4

		push	ebx
		xor	ebx, ebx
		sub	esp, 8
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_40E438

loc_40E431:				; CODE XREF: sub_40E420+24j
		add	esp, 8
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40E438:				; CODE XREF: sub_40E420+Fj
		mov	eax, 400000h
		call	sub_40E300
		test	eax, eax
		jz	short loc_40E431
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_C], 400000h
		sub	eax, 400000h
		mov	[esp+0Ch+var_8], eax
		call	sub_40E340
		add	esp, 8
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_40E420	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40E470	proc near		; CODE XREF: sub_40DBB0+23p
		push	ebx
		xor	ebx, ebx
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_40E482

loc_40E47E:				; CODE XREF: sub_40E470+1Ej
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_40E482:				; CODE XREF: sub_40E470+Cj
		mov	eax, 400000h
		call	sub_40E300
		test	eax, eax
		jz	short loc_40E47E
		mov	eax, ds:40003Ch
		movzx	ebx, word ptr [eax+400006h]
		mov	eax, ebx
		pop	ebx
		retn
sub_40E470	endp

; ---------------------------------------------------------------------------
		push	esi
		xor	esi, esi
		cmp	word ptr ds:400000h, 5A4Dh
		push	ebx
		mov	ebx, [esp+0Ch]
		jz	short loc_40E4B8

loc_40E4B3:				; CODE XREF: .text:0040E4C4j
					; .text:0040E4E2j
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_40E4B8:				; CODE XREF: .text:0040E4B1j
		mov	eax, 400000h
		call	sub_40E300
		test	eax, eax
		jz	short loc_40E4B3
		mov	eax, ds:40003Ch
		lea	ecx, [eax+400000h]
		movzx	eax, word ptr [eax+400014h]
		lea	edx, [ecx+eax+18h]
		movzx	ecx, word ptr [ecx+6]
		test	ecx, ecx
		jz	short loc_40E4B3
		xor	eax, eax

loc_40E4E6:				; CODE XREF: .text:0040E4FBj
		test	byte ptr [edx+27h], 20h
		jz	short loc_40E4F3
		test	ebx, ebx
		jz	short loc_40E504
		sub	ebx, 1

loc_40E4F3:				; CODE XREF: .text:0040E4EAj
		add	eax, 1
		add	edx, 28h
		cmp	eax, ecx
		jb	short loc_40E4E6
		xor	esi, esi
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_40E504:				; CODE XREF: .text:0040E4EEj
		mov	esi, edx
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40E510	proc near		; CODE XREF: sub_40D970+72p
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_40E520

loc_40E51B:				; CODE XREF: sub_40E510+1Cj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E520:				; CODE XREF: sub_40E510+9j
		mov	eax, 400000h
		call	sub_40E300
		test	eax, eax
		jz	short loc_40E51B
		mov	eax, 400000h
		retn
sub_40E510	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_40E550
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E550:				; CODE XREF: .text:0040E54Bj
		sub	esp, 8
		mov	eax, 400000h
		call	sub_40E300
		test	eax, eax
		jz	short loc_40E586
		mov	eax, [esp+0Ch]
		mov	dword ptr [esp], 400000h
		sub	eax, 400000h
		mov	[esp+4], eax
		call	sub_40E340
		test	eax, eax
		jz	short loc_40E590
		mov	eax, [eax+24h]
		not	eax
		shr	eax, 1Fh

loc_40E586:				; CODE XREF: .text:0040E55Fj
					; .text:0040E592j
		add	esp, 8
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E590:				; CODE XREF: .text:0040E57Cj
		xor	eax, eax
		jmp	short loc_40E586
; ---------------------------------------------------------------------------
		align 10h
		push	edi
		xor	edi, edi
		push	esi
		push	ebx
		sub	esp, 8
		cmp	word ptr ds:400000h, 5A4Dh
		mov	ebx, [esp+18h]
		jz	short loc_40E5C0

loc_40E5B7:				; CODE XREF: .text:0040E5CCj
					; .text:0040E5DBj ...
		add	esp, 8
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_40E5C0:				; CODE XREF: .text:0040E5B5j
		mov	eax, 400000h
		call	sub_40E300
		test	eax, eax
		jz	short loc_40E5B7
		mov	eax, ds:40003Ch
		mov	esi, [eax+400080h]
		test	esi, esi
		jz	short loc_40E5B7
		mov	[esp+4], esi
		mov	dword ptr [esp], 400000h
		call	sub_40E340
		test	eax, eax
		jz	short loc_40E5B7
		add	esi, 400000h
		mov	edx, esi
		jnz	short loc_40E606
		jmp	short loc_40E5B7
; ---------------------------------------------------------------------------
		align 10h

loc_40E600:				; CODE XREF: .text:0040E616j
		sub	ebx, 1
		add	edx, 14h

loc_40E606:				; CODE XREF: .text:0040E5F9j
		mov	ecx, [edx+4]
		test	ecx, ecx
		jnz	short loc_40E614
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_40E630

loc_40E614:				; CODE XREF: .text:0040E60Bj
		test	ebx, ebx
		jg	short loc_40E600
		mov	edi, [edx+0Ch]
		add	esp, 8
		pop	ebx
		pop	esi
		add	edi, 400000h
		mov	eax, edi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E630:				; CODE XREF: .text:0040E612j
		add	esp, 8
		xor	edi, edi
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40E640	proc near		; CODE XREF: sub_401180+19p
					; sub_403F71+Bp ...

arg_0		= byte ptr  4

		push	ecx
		push	eax
		cmp	eax, 1000h
		lea	ecx, [esp+8+arg_0]
		jb	short loc_40E662

loc_40E64D:				; CODE XREF: sub_40E640+20j
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_40E64D

loc_40E662:				; CODE XREF: sub_40E640+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		pop	eax
		pop	ecx
		retn
sub_40E640	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000005 BYTES: COLLAPSED FUNCTION j__vsnprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __set_app_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __wgetmainargs]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40E690	proc near		; DATA XREF: .data:0040F260o
		mov	eax, ds:dword_412964
		retn
sub_40E690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_40E6A0	proc near		; DATA XREF: .data:off_40F264o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		xchg	eax, ds:dword_412964
		retn
sub_40E6A0	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _cexit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memset]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strchr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strtol]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _wctime]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wcslen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atoi]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strstr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wcsncpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION wcscmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memchr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION wcsrchr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION wcsncat]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wcsncmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fclose]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION wcscat]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fgets]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION wcstol]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wcstok]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION wcschr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION wcsstr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION time]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memmove]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION realloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION signal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __setusermatherr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _vsnprintf]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_40E810	proc near		; DATA XREF: .text:0040E834o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_401510
		mov	[esp+18h+var_18], offset sub_401560 ; _onexit_t
		call	sub_40D6D0
		leave
		retn
sub_40E810	endp

; ---------------------------------------------------------------------------
		align 10h
dword_40E830	dd 0FFFFFFFFh		; DATA XREF: sub_40DF10-4Cr
					; sub_40DF10:loc_40DED3r ...
		dd offset sub_40E810
		dd 0
		dd 0FFFFFFFFh
dword_40E840	dd 70h dup(0)		; DATA XREF: .data:off_40F254o
		dd 180h	dup(?)
_text		ends

; Section 2. (virtual address 0000F000)
; Virtual size			: 00000274 (	628.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 0000DE00
; Flags	C0600040: Data Readable	Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 40F000h
; int dword_40F000
dword_40F000	dd 0Ah			; DATA XREF: sub_401180+1A6w
					; sub_40DF30+6r
; const	WCHAR ClassName
ClassName:				; DATA XREF: sub_401623+143o
					; sub_401623+201o ...
		unicode	0, <OpenVPN-GUI>,0
; const	WCHAR WindowName
WindowName:				; DATA XREF: sub_401623+2D9o
		unicode	0, <OpenVPN>,0
; LPCWSTR lpString
lpString	dd offset aConn		; DATA XREF: sub_402A63+43r
					; sub_402A63:loc_402AF9r ...
					; "conn"
		align 20h
word_40F040	dw 0			; DATA XREF: sub_4084BA+49r
		dw 1
		dd 30002h, 50004h, 70006h, 90008h, 0B000Ah, 0D000Ch, 0F000Eh
		dd 110010h, 130012h, 150014h, 170016h, 190018h,	1B001Ah
		dd 1D001Ch, 1F001Eh, 210020h, 230022h, 250024h,	270026h
		dd 290028h, 2B002Ah, 2D002Ch, 2F002Eh, 310030h,	330032h
		dd 350034h, 370036h, 390038h, 3B003Ah, 3D003Ch,	3F003Eh
		dd 410040h, 430042h, 450044h, 470046h, 490048h,	4B004Ah
		dd 4D004Ch, 4F004Eh, 510050h, 530052h, 550054h,	570056h
		dd 590058h, 5B005Ah, 5D005Ch, 5F005Eh, 610060h,	630062h
		dd 650064h, 670066h, 690068h, 6B006Ah, 6D006Ch,	6F006Eh
		dd 710070h, 730072h, 750074h, 770076h, 790078h,	7B007Ah
		dd 7D007Ch, 7F007Eh, 0FC00C7h, 0E200E9h, 0E000E4h, 0E700E5h
		dd 0EB00EAh, 0EF00E8h, 0EC00EEh, 0C500C4h, 0E600C9h, 0F400C6h
		dd 0F200F6h, 0F900FBh, 0D600FFh, 0F800DCh, 0D800A3h, 19200D7h
		dd 0ED00E1h, 0FA00F3h, 0D100F1h, 0BA00AAh, 0AE00BFh, 0BD00ACh
		dd 0A100BCh, 0BB00ABh, 25922591h, 25022593h, 0C12524h
		dd 0C000C2h, 256300A9h,	25572551h, 0A2255Dh, 251000A5h
		dd 25342514h, 251C252Ch, 253C2500h, 0C300E3h, 2554255Ah
		dd 25662569h, 25502560h, 0A4256Ch, 0D000F0h, 0CB00CAh
		dd 13100C8h, 0CE00CDh, 251800CFh, 2588250Ch, 0A62584h
		dd 258000CCh, 0DF00D3h,	0D200D4h, 0D500F5h, 0FE00B5h, 0DA00DEh
		dd 0D900DBh, 0DD00FDh, 0B400AFh, 0B100ADh, 0BE2017h, 0A700B6h
		dd 0B800F7h, 0A800B0h, 0B900B7h, 0B200B3h, 0A025A0h
off_40F240	dd offset aHttps	; DATA XREF: sub_40A6B5+6r
					; "https"
		dd offset aSocks_0	; "socks"
		dd 0FFh, 2 dup(0FFFFFFFFh)
off_40F254	dd offset dword_40E840	; DATA XREF: sub_40DE90r
					; sub_40DE90+12r ...
dword_40F258	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w
dword_40F25C	dd 0FFFFFFFFh		; DATA XREF: sub_401010+7Ar
		dd offset sub_40E690
off_40F264	dd offset sub_40E6A0	; CODE XREF: sub_401180+127p
dword_40F268	dd 0BB40E64Eh		; DATA XREF: sub_40DF70+9r
					; sub_40DF70:loc_40DFFCw ...
dword_40F26C	dd 44BF19B1h		; DATA XREF: sub_40DF70+25w
					; sub_40DF70+92w ...
dword_40F270	dd 0			; DATA XREF: sub_401510r
					; sub_401510+42o
		align 1000h
_data		ends

; Section 3. (virtual address 00010000)
; Virtual size			: 00001528 (   5416.)
; Section size in file		: 00001600 (   5632.)
; Offset to raw	data for section: 0000E200
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 410000h
; CHAR ModuleName[]
ModuleName	db 'libgcj-13.dll',0    ; DATA XREF: sub_401510+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_401510+28o
		align 4
; const	WCHAR LibFileName
LibFileName:				; DATA XREF: sub_401623+ADo
					; sub_401623+C2o
		unicode	0, <RICHED20.DLL>,0
; const	WCHAR aS
aS		db 's',0                ; DATA XREF: sub_401623+D3o
aHell32_dll:
		unicode	0, <hell32.dll>,0
asc_410056	db 'l',0                ; DATA XREF: sub_401623+1B2o
aOg_dir:
		unicode	0, <og_dir>,0
; const	WCHAR String
String		dw 54h			; DATA XREF: sub_401ADE+8Bo
aAskbarcreated:
		unicode	0, <askbarCreated>,0
; const	WCHAR aExitOpenvpn
aExitOpenvpn:				; DATA XREF: sub_40228A+18o
					; sub_40228A+5Bo
		unicode	0, <Exit OpenVPN>,0
; CHAR aDllgetversion[]
aDllgetversion	db 'DllGetVersion',0    ; DATA XREF: sub_402320+26o
aConn:					; DATA XREF: .data:lpStringo
		unicode	0, <conn>,0
; char aStateOn[]
aStateOn	db 'state on',0         ; DATA XREF: sub_402417+16o
; char aLogAllOn[]
aLogAllOn	db 'log all on',0       ; DATA XREF: sub_402417+39o
; char aHoldOff[]
aHoldOff	db 'hold off',0         ; DATA XREF: sub_402465+16o
; char aHoldRelease[]
aHoldRelease	db 'hold release',0     ; DATA XREF: sub_402465+39o
byte_4100E0	db 2 dup(0)		; DATA XREF: sub_4024B3+106o
					; sub_4026B9:loc_4028A3o ...
asc_4100E2	db 0Ah,0		; DATA XREF: sub_4024B3+1DBo
		db 2 dup(0)
; char aConnected[]
aConnected	db 'CONNECTED',0        ; DATA XREF: sub_4026B9+90o
; char aReconnecting[]
aReconnecting	db 'RECONNECTING',0     ; DATA XREF: sub_4026B9:loc_402971o
; char aAuthFailure[]
aAuthFailure	db 'auth-failure',0     ; DATA XREF: sub_4026B9+2D3o
; char aPrivateKeyPass[]
aPrivateKeyPass	db 'private-key-password-failure',0 ; DATA XREF: sub_4026B9+2EAo
; char aAuthRetryNone[]
aAuthRetryNone	db 'auth-retry none',0  ; DATA XREF: sub_4026B9+33Co
; char aUsernameAuthS[]
aUsernameAuthS	db 'username "Auth" "%s"',0 ; DATA XREF: sub_402A63+13Do
; char aPasswordAuthS[]
aPasswordAuthS	db 'password "Auth" "%s"',0 ; DATA XREF: sub_402A63+15Fo
; char aPasswordPrivat[]
aPasswordPrivat	db 'password "Private Key" "%s"',0 ; DATA XREF: sub_402C6B+D5o
; char aVerificationFa[]
aVerificationFa	db 'Verification Failed',0 ; DATA XREF: sub_402DD9+Eo
; char SubStr[]
SubStr		db 27h,'Auth',27h,0     ; DATA XREF: sub_402DD9:loc_402E03o
; char aPrivateKey[]
aPrivateKey	db 27h,'Private Key',27h,0 ; DATA XREF: sub_402DD9:loc_402E3Ao
; char aHttpProxy[]
aHttpProxy	db 27h,'HTTP Proxy',27h,0 ; DATA XREF: sub_402DD9:loc_402E6Eo
; char aSocksProxy[]
aSocksProxy	db 27h,'SOCKS Proxy',27h,0 ; DATA XREF: sub_402DD9:loc_402E9Ao
		align 4
off_4101C4	dd offset loc_403273	; DATA XREF: sub_402EC6+2Br
		dd offset loc_403052	; jump table for switch	statement
		dd offset loc_403052
		dd offset loc_402EFA
		dd offset loc_4031E2
		dd offset loc_403231
		dd offset loc_403273
		dd offset loc_403052
; const	WCHAR aRichedit20w
aRichedit20w:				; DATA XREF: sub_403276+116o
		unicode	0, <RichEdit20W>,0
; char aSignalSighup[]
aSignalSighup	db 'signal SIGHUP',0    ; DATA XREF: sub_403276+6FAo
		align 4
dword_41020C	dd 69004Dh		; DATA XREF: sub_403276+17Fr
dword_410210	dd 720063h		; DATA XREF: sub_403276+187r
dword_410214	dd 73006Fh		; DATA XREF: sub_403276+18Fr
dword_410218	dd 66006Fh		; DATA XREF: sub_403276+197r
dword_41021C	dd 200074h		; DATA XREF: sub_403276+19Fr
dword_410220	dd 610053h		; DATA XREF: sub_403276+1A7r
dword_410224	dd 73006Eh		; DATA XREF: sub_403276+1AFr
dword_410228	dd 530020h		; DATA XREF: sub_403276+1B7r
dword_41022C	dd 720065h		; DATA XREF: sub_403276+1BFr
dword_410230	dd 660069h		; DATA XREF: sub_403276+1C7r
word_410234	dw 0			; DATA XREF: sub_403276+1CFr
		align 4
		dd 5 dup(0)
; wchar_t aIdle_priority_
aIdle_priority_:			; DATA XREF: sub_403E8B+Fo
		unicode	0, <IDLE_PRIORITY_CLASS>,0
; wchar_t aBelow_normal_p
aBelow_normal_p:			; DATA XREF: sub_403E8B:loc_403EC0o
		unicode	0, <BELOW_NORMAL_PRIORITY_CLASS>,0
; wchar_t aNormal_priorit
aNormal_priorit:			; DATA XREF: sub_403E8B:loc_403EE6o
		unicode	0, <NORMAL_PRIORITY_CLASS>,0
; wchar_t off_4102D8
off_4102D8	dd offset byte_420041	; DATA XREF: sub_403E8B:loc_403F09o
aOve_normal_pri:
		unicode	0, <OVE_NORMAL_PRIORITY_CLASS>,0
; wchar_t aHigh_priority_
aHigh_priority_:			; DATA XREF: sub_403E8B:loc_403F2Co
		unicode	0, <HIGH_PRIORITY_CLASS>,0
; wchar_t aX08x
aX08x:					; DATA XREF: sub_403F71+11Fo
		unicode	0, <%x%08x>,0
		align 4
aManagementQuer:			; DATA XREF: sub_403F71+1BAo
		unicode	0, <--management-query-proxy >,0
aAppend:				; DATA XREF: sub_403F71+211o
		unicode	0, <-append>,0
aOpenvpnGui10	db 'OpenVPN GUI 10',0   ; DATA XREF: sub_403F71+23Eo
		align 4
; wchar_t aOpenvpnConfigS
aOpenvpnConfigS:			; DATA XREF: sub_403F71+24Ao
		unicode	0, <openvpn --config "%s" --setenv IV_GUI_VER "%S" --service >
		unicode	0, <%s 0 --log%s "%s" --auth-retry interact --management %S %>
		unicode	0, <hd stdin --management-query-passwords %s--management-hold>
; const	WCHAR FileName
FileName:				; DATA XREF: sub_403F71+298o
		unicode	0, <\\.\pipe\openvpn\service>,0
; wchar_t asc_410526
asc_410526	db '%',0                ; DATA XREF: sub_403F71+370o
aSCSC_S:
		unicode	0, <s%c%s%c%.*S>,0
; const	WCHAR aNul
aNul:					; DATA XREF: sub_403F71+51Do
		unicode	0, <NUL>,0
dword_410548	dd 70006Fh		; DATA XREF: sub_4049C0+10r
dword_41054C	dd 6E0065h		; DATA XREF: sub_4049C0+1Br
dword_410550	dd 700076h		; DATA XREF: sub_4049C0+26r
dword_410554	dd 20006Eh		; DATA XREF: sub_4049C0+31r
dword_410558	dd 2D002Dh		; DATA XREF: sub_4049C0+3Cr
dword_41055C	dd 650076h		; DATA XREF: sub_4049C0+44r
dword_410560	dd 730072h		; DATA XREF: sub_4049C0+4Cr
dword_410564	dd 6F0069h		; DATA XREF: sub_4049C0+54r
dword_410568	dd 6Eh			; DATA XREF: sub_4049C0+5Cr
		dd 409h
; const	WCHAR SubKey
SubKey:					; DATA XREF: sub_404DB7+3Co
					; sub_404E66+44o ...
		unicode	0, <Software\Nilings\OpenVPN-GUI>,0
; const	WCHAR aU
aU		db 'u',0                ; DATA XREF: sub_404DB7+68o
					; sub_404E66+80o
aI_language:
		unicode	0, <i_language>,0
; const	WCHAR aO
aO		db 'O',0                ; DATA XREF: sub_405340+1Ao
aPenvpnGui:
		unicode	0, <penVPN GUI>,0
		align 4
; const	WCHAR aOpenvpnGui_0
aOpenvpnGui_0:				; DATA XREF: sub_406278+10Eo
		unicode	0, <OpenVPN GUI>,0
asc_4105F4:				; DATA XREF: sub_40653B:loc_40660Do
					; sub_40653B:loc_406701o
		unicode	0, <, >,0
		align 4
; wchar_t aSS
aSS:					; DATA XREF: sub_406FFB+A3o
		unicode	0, <%s "%s">,0
; wchar_t aSSS
aSSS:					; DATA XREF: sub_40719F+BDo
		unicode	0, <%s "%s\%s">,0
		align 4
; const	WCHAR ServiceName
ServiceName:				; DATA XREF: sub_407370+5Do
					; sub_40760B+59o ...
		unicode	0, <OpenVPNService>,0
; wchar_t word_410642
word_410642	dw 0			; DATA XREF: sub_407370+269o
; wchar_t aHelp
aHelp:					; DATA XREF: sub_40786C+Eo
		unicode	0, <help>,0
; wchar_t aC
aC		db 'c',0                ; DATA XREF: sub_40786C+6Fo
aOnnect:
		unicode	0, <onnect>,0
; wchar_t word_41065E
word_41065E	dw 65h			; DATA XREF: sub_40786C+E1o
aXe_path:
		unicode	0, <xe_path>,0
; wchar_t aConfig_dir
aConfig_dir:				; DATA XREF: sub_40786C+134o
		unicode	0, <config_dir>,0
; wchar_t aE
aE		db 'e',0                ; DATA XREF: sub_40786C+187o
aXt_string:
		unicode	0, <xt_string>,0
; wchar_t aLog_dir
aLog_dir:				; DATA XREF: sub_40786C+1DAo
		unicode	0, <log_dir>,0
; wchar_t aPriority_strin
aPriority_strin:			; DATA XREF: sub_40786C+22Do
		unicode	0, <priority_string>,0
; wchar_t aAppend_string
aAppend_string:				; DATA XREF: sub_40786C+280o
		unicode	0, <append_string>,0
; wchar_t aLog_viewer
aLog_viewer:				; DATA XREF: sub_40786C+2D3o
		unicode	0, <log_viewer>,0
; wchar_t aE_0
aE_0		db 'e',0                ; DATA XREF: sub_40786C+326o
aDitor:
		unicode	0, <ditor>,0
; wchar_t aAllow_edit
aAllow_edit:				; DATA XREF: sub_40786C+379o
		unicode	0, <allow_edit>,0
; wchar_t aA
aA		db 'a',0                ; DATA XREF: sub_40786C+3CCo
aLlow_service:
		unicode	0, <llow_service>,0
; wchar_t word_41073E
word_41073E	dw 61h			; DATA XREF: sub_40786C+41Fo
aLlow_password:
		unicode	0, <llow_password>,0
; wchar_t aAllow_proxy
aAllow_proxy:				; DATA XREF: sub_40786C+472o
		unicode	0, <allow_proxy>,0
; wchar_t aShow_balloon
aShow_balloon:				; DATA XREF: sub_40786C+4C5o
		unicode	0, <show_balloon>,0
; wchar_t aS_0
aS_0		db 's',0                ; DATA XREF: sub_40786C+518o
aErvice_only:
		unicode	0, <ervice_only>,0
; wchar_t aShow_script_wi
aShow_script_wi:			; DATA XREF: sub_40786C+56Bo
		unicode	0, <show_script_window>,0
		align 10h
; wchar_t aSilent_connect
aSilent_connect:			; DATA XREF: sub_40786C+5BEo
		unicode	0, <silent_connection>,0
; wchar_t aPassphrase_att
aPassphrase_att:			; DATA XREF: sub_40786C+611o
		unicode	0, <passphrase_attempts>,0
; wchar_t aConnectscript_
aConnectscript_:			; DATA XREF: sub_40786C+664o
		unicode	0, <connectscript_timeout>,0
; wchar_t aDisconnectscri
aDisconnectscri:			; DATA XREF: sub_40786C+6B7o
		unicode	0, <disconnectscript_timeout>,0
		align 4
; wchar_t aPreconnectscri
aPreconnectscri:			; DATA XREF: sub_40786C+707o
		unicode	0, <preconnectscript_timeout>,0
; wchar_t asc_4108AE
asc_4108AE	db '-',0                ; DATA XREF: sub_407FE4+4Co
					; sub_407FE4+BFo
		db '-',0
		align 4
		dd 1, 2, 8
; wchar_t Mode
Mode		dw 72h			; DATA XREF: sub_40856A+EAo
					; sub_40926D+9Co
		align 4
; wchar_t word_4108C4
word_4108C4	dw 77h			; DATA XREF: sub_40856A+185o
		align 4
; wchar_t aRb
aRb:					; DATA XREF: sub_40886C:loc_408957o
		unicode	0, <rb>,0
; wchar_t aW
aW		db 'w',0                ; DATA XREF: sub_40886C+29Bo
aB		db 'b',0
		align 4
; const	WCHAR aOpenvpnGui_1
aOpenvpnGui_1:				; DATA XREF: sub_408B8B+126o
		unicode	0, <OpenVPN GUI>,0
; wchar_t Source
Source:					; DATA XREF: sub_408E11+3F0o
					; sub_40926D+58o
		unicode	0, <\>,0
; char aKey[]
aKey		db 'key',0              ; DATA XREF: sub_40926D+EAo
; char aPkcs12[]
aPkcs12		db 'pkcs12',0           ; DATA XREF: sub_40926D+189o
		align 4
off_4108FC	dd offset loc_409838	; DATA XREF: sub_40972F+100r
		dd offset loc_40995F	; jump table for switch	statement
		dd offset loc_409A86
		dd offset loc_409BAD
		dd offset loc_409CFA
		dd offset loc_409CFA
		dd offset loc_409CFA
		dd offset loc_409CFA
		dd offset loc_409CFA
		dd offset loc_409BFC
; WCHAR	Class
Class		dw 0			; DATA XREF: sub_40A02F+1A6o
					; sub_40AACC+7Bo ...
		align 4
; const	WCHAR aSoftwareNili_0
aSoftwareNili_0:			; DATA XREF: sub_40A02F+1B6o
					; sub_40A02F+1D3o ...
		unicode	0, <Software\Nilings\OpenVPN-GUI>,0
; const	WCHAR aP
aP		db 'p',0                ; DATA XREF: sub_40A02F+1F6o
					; sub_40A2CD+F1o
aRoxy_source:
		unicode	0, <roxy_source>,0
; const	WCHAR aProxy_type
aProxy_type:				; DATA XREF: sub_40A02F+210o
					; sub_40A2CD+113o
		unicode	0, <proxy_type>,0
		align 4
; const	WCHAR aProxy_http_add
aProxy_http_add:			; DATA XREF: sub_40A02F+22Bo
					; sub_40A2CD+66o
		unicode	0, <proxy_http_address>,0
		align 4
; const	WCHAR aProxy_http_por
aProxy_http_por:			; DATA XREF: sub_40A02F+246o
					; sub_40A2CD+89o
		unicode	0, <proxy_http_port>,0
; const	WCHAR aProxy_socks_ad
aProxy_socks_ad:			; DATA XREF: sub_40A02F+261o
					; sub_40A2CD+ACo
		unicode	0, <proxy_socks_address>,0
; const	WCHAR aProxy_socks_po
aProxy_socks_po:			; DATA XREF: sub_40A02F+27Co
					; sub_40A2CD+CFo
		unicode	0, <proxy_socks_port>,0
dword_410A26	dd 30h			; DATA XREF: sub_40A02F+6r
					; sub_40A02F+Er ...
aHttp		db 'HTTP',0             ; DATA XREF: sub_40A455+132o
					; sub_40A8C9+19Co ...
aSocks		db 'SOCKS',0            ; DATA XREF: sub_40A455:loc_40A58Eo
					; sub_40A8C9:loc_40AA6Co ...
; char aUsernameSProxy[]
aUsernameSProxy	db 'username "%s Proxy" "%%s"',0 ; DATA XREF: sub_40A455+148o
; char aPasswordSProxy[]
aPasswordSProxy	db 'password "%s Proxy" "%%s"',0 ; DATA XREF: sub_40A455+18Bo
		align 2
; wchar_t Format
Format		db '%',0                ; DATA XREF: sub_40A6C4+EBo
					; sub_40A6C4+142o
aSS_0:
		unicode	0, <s://%S>,0
asc_410A7A	db ';',0                ; DATA XREF: sub_40A8C9:loc_40A8DAo
		db ' ',0
		align 10h
; wchar_t asc_410A80
asc_410A80:				; DATA XREF: sub_40A8C9+6Co
		unicode	0, <://>,0
a80:					; DATA XREF: sub_40A8C9+1CEo
		unicode	0, <80>,0
a1		db '1',0                ; DATA XREF: sub_40A8C9:loc_40AA9Eo
a080:
		unicode	0, <080>,0
aNone		db 'NONE',0             ; DATA XREF: sub_40AACC:loc_40AB40o
; char aTcp[]
aTcp		db 'TCP',0              ; DATA XREF: sub_40AACC+A3o
					; sub_40AACC+FFo
; char aProxySSS[]
aProxySSS	db 'proxy %s %S %S',0   ; DATA XREF: sub_40AACC+16Eo
aHttps:					; DATA XREF: .data:off_40F240o
		unicode	0, <https>,0
aSocks_0:				; DATA XREF: .data:0040F244o
		unicode	0, <socks>,0
; const	WCHAR aSoftwareOpenvp
aSoftwareOpenvp:			; DATA XREF: sub_40ACDF+58o
		unicode	0, <SOFTWARE\OpenVPN>,0
; WCHAR	word_410AEA
word_410AEA	dw 0			; DATA XREF: sub_40ACDF+A3o
					; sub_40B3BB+CFo
; wchar_t asc_410AEC
asc_410AEC:				; DATA XREF: sub_40ACDF+ECo
		unicode	0, <\>,0
; wchar_t aSconfig
aSconfig:				; DATA XREF: sub_40ACDF+10Co
		unicode	0, <%sconfig>,0
; const	WCHAR ValueName
ValueName	db 'c',0                ; DATA XREF: sub_40ACDF+144o
aOnfig_dir:
		unicode	0, <onfig_dir>,0
; wchar_t aOvpn
aOvpn:					; DATA XREF: sub_40ACDF+166o
		unicode	0, <ovpn>,0
; const	WCHAR aC_1
aC_1		db 'c',0                ; DATA XREF: sub_40ACDF+176o
aOnfig_ext:
		unicode	0, <onfig_ext>,0
; wchar_t aSbinOpenvpn_ex
aSbinOpenvpn_ex:			; DATA XREF: sub_40ACDF+19Ao
		unicode	0, <%sbin\openvpn.exe>,0
; const	WCHAR aExe_path
aExe_path:				; DATA XREF: sub_40ACDF+1D2o
		unicode	0, <exe_path>,0
; wchar_t asc_410B6E
asc_410B6E	db '%',0                ; DATA XREF: sub_40ACDF+1F6o
aSlog:
		unicode	0, <slog>,0
; const	WCHAR asc_410B7A
asc_410B7A	db 'l',0                ; DATA XREF: sub_40ACDF+22Eo
aOg_dir_0:
		unicode	0, <og_dir>,0
; wchar_t a0
a0		db '0',0                ; DATA XREF: sub_40ACDF+250o
					; sub_40ACDF+39Eo ...
		db 2 dup(0)
; const	WCHAR word_410B8E
word_410B8E	dw 6Ch			; DATA XREF: sub_40ACDF+260o
aOg_append:
		unicode	0, <og_append>,0
; wchar_t aNormal_prior_0
aNormal_prior_0:			; DATA XREF: sub_40ACDF+282o
		unicode	0, <NORMAL_PRIORITY_CLASS>,0
; const	WCHAR aPriority
aPriority:				; DATA XREF: sub_40ACDF+292o
		unicode	0, <priority>,0
; wchar_t asc_410BE2
asc_410BE2	db '%',0                ; DATA XREF: sub_40ACDF+2B6o
					; sub_40ACDF+312o
aSNotepad_exe:
		unicode	0, <s\notepad.exe>,0
; const	WCHAR aLog_viewer_0
aLog_viewer_0:				; DATA XREF: sub_40ACDF+2EEo
		unicode	0, <log_viewer>,0
; const	WCHAR aE_1
aE_1		db 'e',0                ; DATA XREF: sub_40ACDF+34Ao
aDitor_0:
		unicode	0, <ditor>,0
; wchar_t a1_0
a1_0:					; DATA XREF: sub_40ACDF+36Co
					; sub_40ACDF+3D0o ...
		unicode	0, <1>,0
; const	WCHAR aAllow_edit_0
aAllow_edit_0:				; DATA XREF: sub_40ACDF+37Co
		unicode	0, <allow_edit>,0
; const	WCHAR aA_0
aA_0		db 'a',0                ; DATA XREF: sub_40ACDF+3AEo
aLlow_service_0:
		unicode	0, <llow_service>,0
; const	WCHAR aA_1
aA_1		db 'a',0                ; DATA XREF: sub_40ACDF+3E0o
aLlow_passwor_0:
		unicode	0, <llow_password>,0
; const	WCHAR aAllow_proxy_0
aAllow_proxy_0:				; DATA XREF: sub_40ACDF+412o
		unicode	0, <allow_proxy>,0
; const	WCHAR aService_only
aService_only:				; DATA XREF: sub_40ACDF+444o
		unicode	0, <service_only>,0
; const	WCHAR aS_1
aS_1		db 's',0                ; DATA XREF: sub_40ACDF+476o
aHow_balloon:
		unicode	0, <how_balloon>,0
; const	WCHAR aSilent_conne_0
aSilent_conne_0:			; DATA XREF: sub_40ACDF+4A8o
		unicode	0, <silent_connection>,0
; const	WCHAR aShow_script__0
aShow_script__0:			; DATA XREF: sub_40ACDF+4DAo
		unicode	0, <show_script_window>,0
		align 10h
; const	WCHAR aDisconnect_on_
aDisconnect_on_:			; DATA XREF: sub_40ACDF+50Co
		unicode	0, <disconnect_on_suspend>,0
; wchar_t a3
a3:					; DATA XREF: sub_40ACDF+52Eo
		unicode	0, <3>,0
; const	WCHAR aPassphrase_a_0
aPassphrase_a_0:			; DATA XREF: sub_40ACDF+53Eo
		unicode	0, <passphrase_attempts>,0
; wchar_t a15
a15:					; DATA XREF: sub_40ACDF+59Co
		unicode	0, <15>,0
		align 10h
; const	WCHAR aConnectscrip_0
aConnectscrip_0:			; DATA XREF: sub_40ACDF+5ACo
		unicode	0, <connectscript_timeout>,0
; wchar_t a10
a10:					; DATA XREF: sub_40ACDF+60Ao
					; sub_40ACDF+675o
		unicode	0, <10>,0
		align 4
; const	WCHAR aDisconnectsc_0
aDisconnectsc_0:			; DATA XREF: sub_40ACDF+61Ao
		unicode	0, <disconnectscript_timeout>,0
		align 4
; const	WCHAR aPreconnectsc_0
aPreconnectsc_0:			; DATA XREF: sub_40ACDF+685o
		unicode	0, <preconnectscript_timeout>,0
		align 4
; const	WCHAR aSoftwareOpen_0
aSoftwareOpen_0:			; DATA XREF: sub_40B3BB+87o
					; sub_40B3BB+175o
		unicode	0, <SOFTWARE\OpenVPN-GUI>,0
		align 4
; const	WCHAR aSoftwareOpen_1
aSoftwareOpen_1:			; DATA XREF: sub_40B3BB+DFo
		unicode	0, <Software\OpenVPN-GUI>,0
		align 4
aSoftwareNili_1:			; DATA XREF: sub_40B6C3+59o
					; sub_40B73E+53o
		unicode	0, <Software\Nilings\OpenVPN-GUI>,0
		align 10h
; wchar_t aS_S_pre_bat
aS_S_pre_bat:				; DATA XREF: sub_40B7F7+48o
		unicode	0, <%s\%.*s_pre.bat>,0
; wchar_t aS_S_up_bat
aS_S_up_bat:				; DATA XREF: sub_40B9DE+48o
		unicode	0, <%s\%.*s_up.bat>,0
		align 10h
; wchar_t aS_S_down_bat
aS_S_down_bat:				; DATA XREF: sub_40BC71+48o
		unicode	0, <%s\%.*s_down.bat>,0
		align 4
		dd 0Fh
byte_410F08	db 0			; DATA XREF: sub_40C2A0+AAo
					; sub_40C2A0+68Bo
; char aLog[]
aLog		db 'LOG:',0             ; DATA XREF: sub_40C2A0+325o
; char aState[]
aState		db 'STATE:',0           ; DATA XREF: sub_40C2A0+36Do
; char aHold[]
aHold		db 'HOLD:',0            ; DATA XREF: sub_40C2A0+3B5o
; char aPassword[]
aPassword	db 'PASSWORD:',0        ; DATA XREF: sub_40C2A0+3FDo
; char aProxy[]
aProxy		db 'PROXY:',0           ; DATA XREF: sub_40C2A0+445o
; char aInfo[]
aInfo		db 'INFO:',0            ; DATA XREF: sub_40C2A0+48Do
; char aSuccess[]
aSuccess	db 'SUCCESS:',0         ; DATA XREF: sub_40C2A0+507o
; char aError[]
aError		db 'ERROR:',0           ; DATA XREF: sub_40C2A0+558o
; char aEnd[]
aEnd		db 'END',0              ; DATA XREF: sub_40C2A0:loc_40C83Co
		align 4
dword_410F48	dd 0			; DATA XREF: sub_40C977+1Eo
; wchar_t aSS_log
aSS_log:				; DATA XREF: sub_40CF79+CCo
		unicode	0, <%s\%s.log>,0
; char cp[]
cp		db '127.0.0.1',0        ; DATA XREF: sub_40CF79+FDo
; wchar_t asc_410F6A
asc_410F6A	db '%',0                ; DATA XREF: sub_40D105+28o
					; sub_40D105+1F4o
aS_2:
		unicode	0, <s\*>,0
; wchar_t word_410F74
word_410F74	dw 2Eh			; DATA XREF: sub_40D105+102o
		align 4
; wchar_t a__
a__:					; DATA XREF: sub_40D105+134o
		unicode	0, <..>,0
; wchar_t asc_410F7E
asc_410F7E	db '%',0                ; DATA XREF: sub_40D105+181o
aSS_1:
		unicode	0, <s\%s>,0
		align 4
off_410F8C	dd offset TlsCallback_0	; DATA XREF: sub_401180:loc_401261r
aUnknownError	db 'Unknown error',0    ; DATA XREF: sub_40D8B0+Co
		align 10h
; char a_matherrSInSGG[]
a_matherrSInSGG	db '_matherr(): %s in %s(%g, %g)  (retval=%g)',0Ah,0
					; DATA XREF: sub_40D8B0+44o
		align 4
aArgumentDomain	db 'Argument domain error (DOMAIN)',0 ; DATA XREF: .rdata:off_4110ACo
aArgumentSingul	db 'Argument singularity (SIGN)',0 ; DATA XREF: .rdata:004110B0o
		align 4
aOverflowRangeE	db 'Overflow range error (OVERFLOW)',0 ; DATA XREF: .rdata:004110B4o
aTheResultIsToo	db 'The result is too small to be represented (UNDERFLOW)',0
					; DATA XREF: .rdata:004110B8o
		align 10h
aTotalLossOfSig	db 'Total loss of significance (TLOSS)',0 ; DATA XREF: .rdata:004110BCo
		align 4
aPartialLossOfS	db 'Partial loss of significance (PLOSS)',0 ; DATA XREF: .rdata:004110C0o
		align 4
off_4110AC	dd offset aArgumentDomain ; DATA XREF: sub_40D8B0+16r
					; "Argument domain error (DOMAIN)"
		dd offset aArgumentSingul ; "Argument singularity (SIGN)"
		dd offset aOverflowRangeE ; "Overflow range error (OVERFLOW)"
		dd offset aTheResultIsToo ; "The result	is too small to	be represent"...
		dd offset aTotalLossOfSig ; "Total loss	of significance	(TLOSS)"
		dd offset aPartialLossOfS ; "Partial loss of significance (PLOSS)"
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_40D910+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_40D970+21Bo
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_40D970+207o
					; sub_40D970+233o ...
		align 4
; char aVirtualprotect[]
aVirtualprotect	db '  VirtualProtect failed with code 0x%x',0 ; DATA XREF: sub_40D970+1D9o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_40DBB0+2C4o
		align 10h
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_40DBB0+EEo
		align 4
off_4111BC	dd offset dword_4128E0	; DATA XREF: .text:0040E078o
		dd offset dword_412600
		dd 1788D368h, 3A434347h, 4E472820h, 34202955h, 322E382Eh
		dd 0
aGccGnu4_8_2	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_0	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_1	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_2	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_3	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_4	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_5	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_6	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_7	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_8	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_9	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_10	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_11	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_12	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_13	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_14	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_15	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_16	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_17	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_18	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_19	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_20	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_21	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_22	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_23	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_24	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_25	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_26	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_27	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_28	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_29	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_30	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_31	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_32	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_33	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_34	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_35	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_36	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_37	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_38	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_39	db 'GCC: (GNU) 4.8.2',0
		align 10h
dword_411510	dd 0			; DATA XREF: sub_40DBB0+57o
					; sub_40DBB0+6Er ...
dword_411514	dd 0			; DATA XREF: sub_40DBB0+7Br
dword_411518	dd 1			; DATA XREF: sub_40DBB0+88r
dword_41151C	dd 0F264h, 12A8h, 20h	; DATA XREF: sub_40DBB0+8Eo
dword_411528	dd 36h dup(0)		; DATA XREF: sub_40DBB0+52o
					; sub_40DBB0+AFo ...
		align 1000h
_rdata		ends

; Section 4. (virtual address 00012000)
; Virtual size			: 0001C8E8 ( 116968.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 412000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_412000	dd ?			; DATA XREF: sub_401130+8o
					; sub_401130+20w
dword_412004	dd ?			; DATA XREF: sub_401180+C1w
					; sub_401180+285r
dword_412008	dd ?			; DATA XREF: sub_401010:loc_401048w
					; sub_401180+272r
dword_41200C	dd ?			; DATA XREF: sub_401180+27Aw
					; sub_401180+294r
dword_412010	dd ?			; DATA XREF: sub_401130+3Aw
dword_412014	dd ?			; DATA XREF: sub_401130+10o
					; sub_401180+244r ...
dword_412018	dd ?			; DATA XREF: sub_401130+18o
					; sub_401180+1C9r ...
dword_41201C	dd ?			; DATA XREF: sub_401130+2Ao
					; sub_401180:loc_40132Br ...
dword_412020	dd ?			; DATA XREF: sub_401ADE+9Cw
					; sub_401ADE:loc_401F59r
		align 20h
word_412040	dw ?			; DATA XREF: sub_404DB7+6r
					; sub_404DB7+12r ...
		align 20h
; wchar_t word_412060
word_412060	dw ?			; DATA XREF: sub_405206+6w
					; sub_405206+26o ...
		align 4
		dd 0FFh	dup(?)
; wchar_t dword_412460
dword_412460	dd 40h dup(?)		; DATA XREF: sub_405609+26o
					; sub_405609+3Do
dword_412560	dd ?			; DATA XREF: sub_40786C+93r
					; sub_40786C:loc_407929r ...
		align 20h
dword_412580	dd ?			; DATA XREF: sub_40BE8C+32w
					; sub_40C2A0+4B9r ...
dword_412584	dd ?			; DATA XREF: sub_40C2A0:loc_40C345r
					; sub_40C2A0+67Dr ...
		align 10h
dword_412590	dd ?			; DATA XREF: sub_40C2A0+3CCr
					; sub_40C2A0+3D9r
dword_412594	dd ?			; DATA XREF: sub_40C2A0+33Cr
					; sub_40C2A0+349r
dword_412598	dd ?			; DATA XREF: sub_40C2A0+414r
					; sub_40C2A0+421r
dword_41259C	dd ?			; DATA XREF: sub_40C2A0+45Cr
					; sub_40C2A0+469r
dword_4125A0	dd ?			; DATA XREF: sub_40C2A0+384r
					; sub_40C2A0+391r
		align 20h
dword_4125C0	dd ?			; DATA XREF: sub_401010+22w
dword_4125C4	dd ?			; DATA XREF: sub_401010+18w
dword_4125C8	dd ?			; DATA XREF: sub_401010+Ew
TlsIndex	dd ?			; DATA XREF: .tls:TlsIndex_ptro
dword_4125D0	dd ?			; DATA XREF: sub_401010+2Cw
dword_4125D4	dd ?			; DATA XREF: sub_401010+3Dr
					; sub_401180+61r ...
dword_4125D8	dd ?			; DATA XREF: sub_401010+5Er
dword_4125DC	dd ?			; DATA XREF: sub_401130+3r
dword_4125E0	dd ?			; DATA XREF: sub_401130+25r
dword_4125E4	dd ?			; DATA XREF: sub_401180+11Bw
					; TopLevelExceptionFilter:loc_40D75Dr
dword_4125E8	dd ?			; DATA XREF: .text:0040D853r
					; sub_40D8A0+4w
dword_4125EC	dd ?			; DATA XREF: sub_40DBB0r
					; sub_40DBB0+19w
dword_4125F0	dd ?			; DATA XREF: sub_40D970+Er
					; sub_40D970:loc_40DA36w ...
dword_4125F4	dd ?			; DATA XREF: sub_40D970+1Fr
					; sub_40D970+60r ...
dword_4125F8	dd ?			; DATA XREF: sub_40DF10r
					; sub_40DF10:loc_40DF20w
		align 10h
dword_412600	dd 2Bh dup(?)		; DATA XREF: .rdata:004111C0o
dword_4126AC	dd ?			; DATA XREF: .text:0040E05Aw
		dd 2 dup(?)
dword_4126B8	dd ?			; DATA XREF: .text:0040E046w
		dd 2 dup(?)
dword_4126C4	dd ?			; DATA XREF: .text:0040E02Cw
		dd 86h dup(?)
dword_4128E0	dd ?			; DATA XREF: .text:0040E032w
					; .rdata:off_4111BCo
dword_4128E4	dd ?			; DATA XREF: .text:0040E03Cw
		dd ?
dword_4128EC	dd ?			; DATA XREF: .text:0040E04Bw
		dd 14h dup(?)
dword_412940	dd ?			; DATA XREF: sub_40E0B0+16r
					; .text:0040E182r ...
dword_412944	dd ?			; DATA XREF: .text:0040E13Ar
					; .text:0040E1C7r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_40E0B0+9o
					; sub_40E0B0:loc_40E109o ...
		dd ?
dword_412964	dd ?			; DATA XREF: sub_40E690r sub_40E6A0+4w
; int dword_412968
dword_412968	dd ?			; DATA XREF: sub_401180:loc_401307w
					; sub_40DF30+17r
; HINSTANCE dword_41296C
dword_41296C	dd ?			; DATA XREF: sub_401180+136w
					; sub_40DF30+20r
		align 20h
; wchar_t *Str2
Str2		dd ?			; DATA XREF: sub_401570+25r
					; sub_401570+3Bo ...
		dd 31h dup(?)
; DWORD	ThreadId
ThreadId	dd 20Eh	dup(?)		; DATA XREF: StartAddress+328o
					; sub_40592C+3B7o ...
dword_413280	dd 3 dup(?)		; DATA XREF: sub_401972+18o
					; sub_401A00+18o ...
dword_41328C	dd ?			; DATA XREF: sub_40592C+3AEr
					; sub_40592C+7F3o ...
		dd ?
dword_413294	dd 2 dup(?)		; DATA XREF: sub_40653B+259o
dword_41329C	dd 0Dh dup(?)		; DATA XREF: sub_4082E0+18o
dword_4132D0	dd ?			; DATA XREF: sub_401ADE+221o
dword_4132D4	dd ?			; DATA XREF: sub_4047DC+Fo
dword_4132D8	dd 335Ah dup(?)		; DATA XREF: sub_406278+1B9o
					; sub_406278+1DEo
		db ?
byte_420041	db 3 dup(?)		; DATA XREF: .rdata:off_4102D8o
		dd 35BBh dup(?)
; int dword_42D730
dword_42D730	dd ?			; DATA XREF: sub_401972:loc_4019B8r
					; sub_401972+65r ...
dword_42D734	dd ?			; DATA XREF: sub_40228A+6r
					; sub_406278+E5r ...
dword_42D738	dd ?			; DATA XREF: sub_4026B9+31Fr
					; sub_40ACDF+566w ...
dword_42D73C	dd ?			; DATA XREF: sub_40ACDF+5D4w
					; sub_40ACDF+5D9r ...
dword_42D740	dd ?			; DATA XREF: sub_40ACDF+642w
					; sub_40ACDF+647r ...
dword_42D744	dd ?			; DATA XREF: sub_40ACDF+6AAw
					; sub_40ACDF+6AFr ...
dword_42D748	dd ?			; DATA XREF: sub_403F71+1B1r
					; sub_409E67:loc_409F52r ...
dword_42D74C	dd ?			; DATA XREF: sub_409E67+6r
					; sub_409E67:loc_409EE0r ...
; const	WCHAR word_42D750
word_42D750	dw ?			; DATA XREF: sub_40972F+489o
					; sub_409E67+37o ...
		align 4
		dd 31h dup(?)
; const	WCHAR word_42D818
word_42D818	dw ?			; DATA XREF: sub_40972F+4A9o
					; sub_409E67+57o ...
		align 4
		dd 2 dup(?)
; const	WCHAR word_42D824
word_42D824	dw ?			; DATA XREF: sub_40972F+4D8o
					; sub_409E67+ABo ...
		align 4
		dd 31h dup(?)
; const	WCHAR word_42D8EC
word_42D8EC	dw ?			; DATA XREF: sub_40972F+4F8o
					; sub_409E67+CBo ...
		align 10h
		dd 2 dup(?)
; const	WCHAR ApplicationName
ApplicationName	dw ?			; DATA XREF: sub_403F71+6A0o
					; sub_403F71+6CBo ...
		align 4
		dd 81h dup(?)
; wchar_t dword_42DB00
dword_42DB00	dd 82h dup(?)		; DATA XREF: sub_40ACDF+13Co
					; sub_40D105+20o ...
; wchar_t Str
Str		dw ?			; DATA XREF: StartAddress+3Do
					; sub_4094D5+47o ...
		align 4
		dd 7 dup(?)
; const	WCHAR PathName
PathName	dw ?			; DATA XREF: sub_401623:loc_4017BDo
					; sub_401623+1AAo ...
		align 4
		dd 81h dup(?)
; wchar_t Str1
Str1		dw ?			; DATA XREF: sub_403E8B+17o
					; sub_403E8B+3Do ...
		align 4
		dd 1Fh dup(?)
; const	WCHAR word_42DFB0
word_42DFB0	dw ?			; DATA XREF: sub_403F71+79r
					; sub_403F71+86r ...
		align 4
; const	WCHAR dword_42DFB4
dword_42DFB4	dd 82h dup(?)		; DATA XREF: sub_406FFB+9Bo
					; sub_406FFB+168o ...
; const	WCHAR dword_42E1BC
dword_42E1BC	dd 82h dup(?)		; DATA XREF: sub_40719F+B5o
					; sub_40719F+194o ...
; const	WCHAR word_42E3C4
word_42E3C4	dw ?			; DATA XREF: sub_40592C+223r
					; sub_40592C+754r ...
		align 4
; const	WCHAR word_42E3C8
word_42E3C8	dw ?			; DATA XREF: sub_401ADE+124r
					; sub_40592C+2CDr ...
		align 4
; const	WCHAR word_42E3CC
word_42E3CC	dw ?			; DATA XREF: sub_40592C:loc_405B8Fr
					; sub_40592C:loc_4060CBr ...
		align 10h
; const	WCHAR word_42E3D0
word_42E3D0	dw ?			; DATA XREF: sub_401FCE+13r
					; sub_40ACDF+40Ao
		align 4
; const	WCHAR word_42E3D4
word_42E3D4	dw ?			; DATA XREF: sub_402EC6+100r
					; sub_402EC6+291r ...
		align 4
; const	WCHAR word_42E3D8
word_42E3D8	dw ?			; DATA XREF: sub_401ADE+131r
					; sub_401FCE+24r ...
		align 4
; const	WCHAR word_42E3DC
word_42E3DC	dw ?			; DATA XREF: sub_4026B9+14Fr
					; sub_4026B9+16Ar ...
		align 10h
; const	WCHAR word_42E3E0
word_42E3E0	dw ?			; DATA XREF: sub_40ACDF+4D2o
					; sub_40B7F7+FBr ...
		align 4
; wchar_t word_42E3E4
word_42E3E4	dw ?			; DATA XREF: sub_40ACDF+536o
					; sub_40ACDF:loc_40B237o
		align 4
; const	WCHAR word_42E3E8
word_42E3E8	dw ?			; DATA XREF: sub_401ADE:loc_401EB2r
					; sub_40ACDF+504o
		align 4
; wchar_t word_42E3EC
word_42E3EC	dw ?			; DATA XREF: sub_40ACDF+5A4o
					; sub_40ACDF:loc_40B2A5o
		align 10h
		dd ?
; wchar_t word_42E3F4
word_42E3F4	dw ?			; DATA XREF: sub_40ACDF+612o
					; sub_40ACDF:loc_40B313o
		align 4
		dd ?
; wchar_t word_42E3FC
word_42E3FC	dw ?			; DATA XREF: sub_40ACDF+67Do
					; sub_40ACDF:loc_40B37Bo
		align 10h
		dd ?
; HWND hWnd
hWnd		dd ?			; DATA XREF: sub_401ADE+86w
					; sub_401FCE+23Er ...
; HINSTANCE hInstance
hInstance	dd ?			; DATA XREF: sub_401623+A8w
					; sub_401FCE+61r ...
dword_42E40C	dd ?			; DATA XREF: sub_401ADE:loc_401E5Dw
					; sub_401ADE:loc_401E69w ...
		align 20h
; UINT_PTR uIDNewItem
uIDNewItem	dd ?			; DATA XREF: sub_40592C+35w
					; sub_40592C+2F3r ...
		align 20h
; struct _NOTIFYICONDATAW Data
Data		_NOTIFYICONDATAW <?>	; DATA XREF: sub_406480+18o
					; sub_4064B3+6w ...
		dd ?
; HMENU	hMenu
hMenu		dd ?			; DATA XREF: sub_40592C+41w
					; sub_40592C+71r ...
; UINT_PTR dword_42E800
dword_42E800	dd ?			; DATA XREF: sub_40592C+19w
					; sub_40592C+3EAr ...
		dd 31h dup(?)
dword_42E8C8	dd ?			; DATA XREF: sub_401010+64w
					; sub_40D610+3Br ...
dword_42E8CC	dd ?			; DATA XREF: sub_401010+69w
					; sub_40D610+4r ...
dword_42E8D0	dd ?			; DATA XREF: sub_401180+98w
					; sub_401180:loc_40147Ew
dword_42E8D4	dd ?			; DATA XREF: sub_401180+A4r
					; sub_401180:loc_401234r ...
		align 800h
_bss		ends

;
; Imports from LIBEAY32.dll
;
; Section 5. (virtual address 0002F000)
; Virtual size			: 00001AAC (   6828.)
; Section size in file		: 00001C00 (   7168.)
; Offset to raw	data for section: 0000F800
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn __imp_ERR_load_crypto_strings:dword
					; DATA XREF: ERR_load_crypto_stringsr
		extrn __imp_EVP_PKEY_free:dword	; DATA XREF: EVP_PKEY_freer
		extrn __imp_EVP_PKEY_new:dword ; DATA XREF: EVP_PKEY_newr
		extrn __imp_EVP_des_ede3_cbc:dword ; DATA XREF:	EVP_des_ede3_cbcr
		extrn __imp_OPENSSL_add_all_algorithms_noconf:dword
					; DATA XREF: OPENSSL_add_all_algorithms_noconfr
		extrn __imp_PEM_read_PrivateKey:dword ;	DATA XREF: PEM_read_PrivateKeyr
		extrn __imp_PEM_write_PrivateKey:dword ; DATA XREF: PEM_write_PrivateKeyr
		extrn __imp_PKCS12_create:dword	; DATA XREF: PKCS12_creater
		extrn __imp_PKCS12_free:dword ;	DATA XREF: PKCS12_freer
		extrn __imp_PKCS12_parse:dword ; DATA XREF: PKCS12_parser
		extrn __imp_X509_alias_get0:dword ; DATA XREF: X509_alias_get0r
		extrn __imp_X509_free:dword ; DATA XREF: X509_freer
		extrn __imp_d2i_PKCS12_fp:dword	; DATA XREF: d2i_PKCS12_fpr
		extrn __imp_i2d_PKCS12_fp:dword	; DATA XREF: i2d_PKCS12_fpr
		extrn __imp_sk_pop_free:dword ;	DATA XREF: sk_pop_freer

;
; Imports from ADVAPI32.dll
;
; BOOL __stdcall CloseServiceHandle(SC_HANDLE hSCObject)
		extrn CloseServiceHandle:dword ; CODE XREF: sub_407370+1E1p
					; sub_407370+1F1p
					; DATA XREF: ...
; BOOL __stdcall ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus)
		extrn ControlService:dword ; CODE XREF:	sub_40760B+E7p
					; DATA XREF: sub_40760B+E2r
; BOOL __stdcall CryptAcquireContextW(HCRYPTPROV *phProv, LPCWSTR szContainer, LPCWSTR szProvider, DWORD dwProvType, DWORD dwFlags)
		extrn CryptAcquireContextW:dword ; CODE	XREF: sub_408334+38p
					; DATA XREF: sub_408334+33r
; BOOL __stdcall CryptGenRandom(HCRYPTPROV hProv, DWORD	dwLen, BYTE *pbBuffer)
		extrn CryptGenRandom:dword ; CODE XREF:	sub_408334+61p
					; DATA XREF: sub_408334+5Cr
; BOOL __stdcall CryptReleaseContext(HCRYPTPROV	hProv, DWORD dwFlags)
		extrn CryptReleaseContext:dword	; CODE XREF: sub_408334+B6p
					; DATA XREF: sub_408334+B1r
; BOOL __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor,	DWORD dwRevision)
		extrn InitializeSecurityDescriptor:dword ; CODE	XREF: sub_403F71+429p
					; sub_4049C0+F4p
					; DATA XREF: ...
; SC_HANDLE __stdcall OpenSCManagerW(LPCWSTR lpMachineName, LPCWSTR lpDatabaseName, DWORD dwDesiredAccess)
		extrn OpenSCManagerW:dword ; CODE XREF:	sub_407370+36p
					; sub_40760B+22p ...
; SC_HANDLE __stdcall OpenServiceW(SC_HANDLE hSCManager, LPCWSTR lpServiceName,	DWORD dwDesiredAccess)
		extrn OpenServiceW:dword ; CODE	XREF: sub_407370+70p
					; sub_40760B+6Cp ...
; BOOL __stdcall QueryServiceStatus(SC_HANDLE hService,	LPSERVICE_STATUS lpServiceStatus)
		extrn QueryServiceStatus:dword ; CODE XREF: sub_407370+10Bp
					; sub_407370+190p ...
; LSTATUS __stdcall RegCloseKey(HKEY hKey)
		extrn RegCloseKey:dword	; CODE XREF: sub_40A02F+297p
					; sub_40A2CD+181p ...
; LSTATUS __stdcall RegCreateKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD Reserved, LPWSTR	lpClass, DWORD dwOptions, REGSAM samDesired, const LPSECURITY_ATTRIBUTES lpSecurityAttributes, PHKEY phkResult,	LPDWORD	lpdwDisposition)
		extrn RegCreateKeyExW:dword ; CODE XREF: sub_404E66+58p
					; sub_40A02F+1CAp ...
; LSTATUS __stdcall RegOpenKeyExW(HKEY hKey, LPCWSTR lpSubKey, DWORD ulOptions,	REGSAM samDesired, PHKEY phkResult)
		extrn RegOpenKeyExW:dword ; CODE XREF: sub_404DB7+50p
					; sub_40A2CD+41p ...
; LSTATUS __stdcall RegQueryValueExW(HKEY hKey,	LPCWSTR	lpValueName, LPDWORD lpReserved, LPDWORD lpType, LPBYTE	lpData,	LPDWORD	lpcbData)
		extrn RegQueryValueExW:dword ; CODE XREF: sub_40B3BB+144p
					; sub_40B60A+3Dp ...
; LSTATUS __stdcall RegSetValueExW(HKEY	hKey, LPCWSTR lpValueName, DWORD Reserved, DWORD dwType, const BYTE *lpData, DWORD cbData)
		extrn RegSetValueExW:dword ; CODE XREF:	sub_40B6C3+49p
					; sub_40B73E+37p
					; DATA XREF: ...
; BOOL __stdcall SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR	pSecurityDescriptor, BOOL bDaclPresent,	PACL pDacl, BOOL bDaclDefaulted)
		extrn SetSecurityDescriptorDacl:dword ;	CODE XREF: sub_403F71+484p
					; sub_4049C0+139p
					; DATA XREF: ...
; BOOL __stdcall StartServiceW(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCWSTR *lpServiceArgVectors)
		extrn StartServiceW:dword ; CODE XREF: sub_407370+DFp
					; DATA XREF: sub_407370+DAr

;
; Imports from COMCTL32.DLL
;
; void __stdcall InitMUILanguage(LANGID	uiLang)
		extrn __imp_InitMUILanguage:dword ; DATA XREF: InitMUILanguager
; INT_PTR __stdcall PropertySheetW(LPCPROPSHEETHEADERW)
		extrn PropertySheetW:dword ; CODE XREF:	sub_401FCE+2AFp
					; DATA XREF: sub_401FCE+2AAr

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: sub_403F71+324p
					; sub_403F71+3E3p ...
; BOOL __stdcall CreateDirectoryW(LPCWSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes)
		extrn CreateDirectoryW:dword ; CODE XREF: sub_40CC95+A6p
					; DATA XREF: sub_40CC95+A1r
; HANDLE __stdcall CreateEventW(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState,	LPCWSTR	lpName)
		extrn CreateEventW:dword ; CODE	XREF: sub_403F71+163p
					; DATA XREF: sub_403F71+15Er
; HANDLE __stdcall CreateFileW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD	dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile)
		extrn CreateFileW:dword	; CODE XREF: sub_403F71+2A4p
					; sub_403F71+529p
					; DATA XREF: ...
; BOOL __stdcall CreatePipe(PHANDLE hReadPipe, PHANDLE hWritePipe, LPSECURITY_ATTRIBUTES lpPipeAttributes, DWORD nSize)
		extrn CreatePipe:dword	; CODE XREF: sub_403F71+581p
					; sub_4049C0+17Cp
					; DATA XREF: ...
; BOOL __stdcall CreateProcessW(LPCWSTR	lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
		extrn CreateProcessW:dword ; CODE XREF:	sub_403F71+6ACp
					; sub_4049C0+299p ...
; HANDLE __stdcall CreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags,	LPDWORD	lpThreadId)
		extrn CreateThread:dword ; CODE	XREF: sub_403F71+E8p
					; sub_4096A2+38p
					; DATA XREF: ...
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_40E260+49p
					; DATA XREF: sub_40E260+49r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_40E0B0+10p
					; .text:0040E17Cp ...
; BOOL __stdcall EnumResourceLanguagesW(HMODULE	hModule, LPCWSTR lpType, LPCWSTR lpName, ENUMRESLANGPROCW lpEnumFunc, LONG_PTR lParam)
		extrn EnumResourceLanguagesW:dword ; CODE XREF:	sub_40574D+6Cp
					; DATA XREF: sub_40574D+67r
; void __stdcall __noreturn ExitThread(DWORD dwExitCode)
		extrn ExitThread:dword	; CODE XREF: sub_4094D5+9Bp
					; sub_4094D5+C6p ...
; DWORD	__stdcall ExpandEnvironmentStringsW(LPCWSTR lpSrc, LPWSTR lpDst, DWORD nSize)
		extrn ExpandEnvironmentStringsW:dword ;	CODE XREF: sub_40B3BB+45p
					; sub_40B3BB+227p
					; DATA XREF: ...
; BOOL __stdcall FileTimeToLocalFileTime(const FILETIME	*lpFileTime, LPFILETIME	lpLocalFileTime)
		extrn FileTimeToLocalFileTime:dword ; CODE XREF: sub_404F11+5Bp
					; DATA XREF: sub_404F11+56r
; BOOL __stdcall FileTimeToSystemTime(const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime)
		extrn FileTimeToSystemTime:dword ; CODE	XREF: sub_404F11+72p
					; DATA XREF: sub_404F11+6Dr
; BOOL __stdcall FindClose(HANDLE hFindFile)
		extrn FindClose:dword	; CODE XREF: sub_40D105+1CAp
					; sub_40D105+266p ...
; HANDLE __stdcall FindFirstFileW(LPCWSTR lpFileName, LPWIN32_FIND_DATAW lpFindFileData)
		extrn FindFirstFileW:dword ; CODE XREF:	sub_40D105+5Ep
					; sub_40D105+22Ap
					; DATA XREF: ...
; BOOL __stdcall FindNextFileW(HANDLE hFindFile, LPWIN32_FIND_DATAW lpFindFileData)
		extrn FindNextFileW:dword ; CODE XREF: sub_40D105+1B2p
					; sub_40D105+30Fp
					; DATA XREF: ...
; HRSRC	__stdcall FindResourceExW(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD	wLanguage)
		extrn FindResourceExW:dword ; CODE XREF: sub_404D18+30p
					; sub_404D18+6Ap
					; DATA XREF: ...
; HRSRC	__stdcall FindResourceW(HMODULE	hModule, LPCWSTR lpName, LPCWSTR lpType)
		extrn FindResourceW:dword ; CODE XREF: sub_404D18+98p
					; DATA XREF: sub_404D18+93r
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn FreeLibrary:dword	; CODE XREF: sub_402320+9Fp
					; DATA XREF: sub_402320+9Ar
; LPWSTR __stdcall GetCommandLineW()
		extrn GetCommandLineW:dword ; CODE XREF: sub_401623+129p
					; DATA XREF: sub_401623:loc_401747r
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:0040E088p
					; DATA XREF: .text:0040E088r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_403F71+115p
					; sub_40DF70+49p
					; DATA XREF: ...
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_40DF70+51p
					; DATA XREF: sub_40DF70+51r
; int __stdcall	GetDateFormatW(LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpDate, LPCWSTR lpFormat, LPWSTR lpDateStr, int cchDate)
		extrn GetDateFormatW:dword ; CODE XREF:	sub_404F11+C6p
					; DATA XREF: sub_404F11+C1r
; BOOL __stdcall GetExitCodeProcess(HANDLE hProcess, LPDWORD lpExitCode)
		extrn GetExitCodeProcess:dword ; CODE XREF: sub_40B7F7+189p
					; sub_40B9DE+1E4p ...
; DWORD	__stdcall GetFileAttributesW(LPCWSTR lpFileName)
		extrn GetFileAttributesW:dword ; CODE XREF: sub_40CC95+11p
					; DATA XREF: sub_40CC95+Cr
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_404885+44p
					; sub_404885+10Cp ...
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_401510+16p
					; DATA XREF: sub_401510+16r
; HMODULE __stdcall GetModuleHandleW(LPCWSTR lpModuleName)
		extrn GetModuleHandleW:dword ; CODE XREF: sub_401623+B9p
					; DATA XREF: sub_401623+B4r
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_401510+33p
					; sub_402320+39p
					; DATA XREF: ...
; void __stdcall GetStartupInfoW(LPSTARTUPINFOW	lpStartupInfo)
		extrn GetStartupInfoW:dword ; CODE XREF: sub_401180+30Cp
					; sub_403F71+60Dp ...
; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
		extrn GetStdHandle:dword ; CODE	XREF: sub_4049C0+22Fp
					; DATA XREF: sub_4049C0+22Ar
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_40DF70+38p
					; DATA XREF: sub_40DF70+38r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_407370+12Ap
					; sub_407370+1A8p ...
; int __stdcall	GetTimeFormatW(LCID Locale, DWORD dwFlags, const SYSTEMTIME *lpTime, LPCWSTR lpFormat, LPWSTR lpTimeStr, int cchTime)
		extrn GetTimeFormatW:dword ; CODE XREF:	sub_404F11+130p
					; DATA XREF: sub_404F11+12Br
; LANGID __stdcall GetUserDefaultUILanguage()
		extrn GetUserDefaultUILanguage:dword ; CODE XREF: sub_404DB7+84p
					; DATA XREF: sub_404DB7+7Fr
; UINT __stdcall GetWindowsDirectoryW(LPWSTR lpBuffer, UINT uSize)
		extrn GetWindowsDirectoryW:dword ; CODE	XREF: sub_40ACDF+1Fp
					; DATA XREF: sub_40ACDF+1Ar
; HGLOBAL __stdcall GlobalFree(HGLOBAL hMem)
		extrn GlobalFree:dword	; CODE XREF: sub_40A6C4+4Dp
					; sub_40A6C4+89p ...
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_40E260+77p
					; DATA XREF: sub_40E260+77r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_40E0B0+60p
					; .text:0040E19Ap ...
; HMODULE __stdcall LoadLibraryW(LPCWSTR lpLibFileName)
		extrn LoadLibraryW:dword ; CODE	XREF: sub_401623+CEp
					; sub_402320+18p
					; DATA XREF: ...
; HGLOBAL __stdcall LoadResource(HMODULE hModule, HRSRC	hResInfo)
		extrn LoadResource:dword ; CODE	XREF: sub_405056+62p
					; sub_405370+54p ...
; int __stdcall	MultiByteToWideChar(UINT CodePage, DWORD dwFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpWideCharStr,	int cchWideChar)
		extrn MultiByteToWideChar:dword	; CODE XREF: sub_4026B9+13Cp
					; DATA XREF: sub_4026B9+137r
; BOOL __stdcall PeekNamedPipe(HANDLE hNamedPipe, LPVOID lpBuffer, DWORD nBufferSize, LPDWORD lpBytesRead, LPDWORD lpTotalBytesAvail, LPDWORD lpBytesLeftThisMessage)
		extrn PeekNamedPipe:dword ; CODE XREF: sub_404885+36p
					; DATA XREF: sub_404885+31r
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_40DF70+69p
					; DATA XREF: sub_40DF70+69r
; BOOL __stdcall ReadFile(HANDLE hFile,	LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
		extrn ReadFile:dword	; CODE XREF: sub_404885+CFp
					; DATA XREF: sub_404885+CAr
; DWORD	__stdcall ResumeThread(HANDLE hThread)
		extrn ResumeThread:dword ; CODE	XREF: sub_403F71+77Ap
					; DATA XREF: sub_403F71+775r
; BOOL __stdcall SetEvent(HANDLE hEvent)
		extrn SetEvent:dword	; CODE XREF: StartAddress+2A3p
					; StartAddress+373p
					; DATA XREF: ...
; BOOL __stdcall SetHandleInformation(HANDLE hObject, DWORD dwMask, DWORD dwFlags)
		extrn SetHandleInformation:dword ; CODE	XREF: sub_403F71+5CFp
					; sub_4049C0+1B6p
					; DATA XREF: ...
; BOOL __stdcall SetNamedPipeHandleState(HANDLE	hNamedPipe, LPDWORD lpMode, LPDWORD lpMaxCollectionCount, LPDWORD lpCollectDataTimeout)
		extrn SetNamedPipeHandleState:dword ; CODE XREF: sub_403F71+30Ap
					; DATA XREF: sub_403F71+305r
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: sub_401180+112p
					; .text:0040E06Fp
					; DATA XREF: ...
; DWORD	__stdcall SizeofResource(HMODULE hModule, HRSRC	hResInfo)
		extrn SizeofResource:dword ; CODE XREF:	sub_405370+102p
					; DATA XREF: sub_405370+FDr
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_401180+91p
					; sub_401972+81p ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:0040E099p
					; DATA XREF: .text:0040E099r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_40E0B0+35p
					; DATA XREF: sub_40E0B0+35r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:0040E07Fp
					; DATA XREF: .text:0040E07Fr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	sub_40D970+147p
					; sub_40D970+187p ...
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: sub_40D970+A7p
					; sub_40D970+DCp ...
; int __stdcall	WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR	lpMultiByteStr,	int cbMultiByte, LPCSTR	lpDefaultChar, LPBOOL lpUsedDefaultChar)
		extrn WideCharToMultiByte:dword	; CODE XREF: sub_40C977+EEp
					; sub_40C977+14Dp
					; DATA XREF: ...
; BOOL __stdcall WriteFile(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite,	LPDWORD	lpNumberOfBytesWritten,	LPOVERLAPPED lpOverlapped)
		extrn WriteFile:dword	; CODE XREF: sub_403F71+3C9p
					; sub_403F71+73Ap
					; DATA XREF: ...

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __lconv_init:dword ; DATA	XREF: sub_40D5E0r
		extrn __imp___set_app_type:dword ; DATA	XREF: __set_app_typer
		extrn __imp___setusermatherr:dword ; DATA XREF:	__setusermatherrr
		extrn __imp___wgetmainargs:dword ; DATA	XREF: __wgetmainargsr
		extrn __winitenv:dword	; DATA XREF: sub_401180+24Ar
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp__cexit:dword ; DATA	XREF: _cexitr
; int fmode
		extrn _fmode:dword	; DATA XREF: sub_401010+6Er
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _iob:dword	; DATA XREF: sub_40D8B0+3Fr
					; sub_40D910+4r ...
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_40D610+A7p
					; DATA XREF: sub_40D610+A7r
; int snwprintf(wchar_t	*Dest, size_t Count, const wchar_t *Format, ...)
		extrn _snwprintf:dword	; CODE XREF: sub_40A6C4+107p
					; sub_40A6C4+159p
					; DATA XREF: ...
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; void __cdecl __noreturn exit(int Code)
		extrn __imp_exit:dword	; DATA XREF: exitr
; int __cdecl fclose(FILE *File)
		extrn __imp_fclose:dword ; DATA	XREF: fcloser
; char *__cdecl	fgets(char *Buf, int MaxCount, FILE *File)
		extrn __imp_fgets:dword	; DATA XREF: fgetsr
; int fprintf(FILE *File, const	char *Format, ...)
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memchr(const void *Buf,	int Val, size_t	MaxCount)
		extrn __imp_memchr:dword ; DATA	XREF: memchrr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp_memmove:dword ; DATA XREF: memmover
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; void *__cdecl	realloc(void *Memory, size_t NewSize)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
		extrn __imp_signal:dword ; DATA	XREF: signalr
; char *__cdecl	strchr(const char *Str,	int Val)
		extrn __imp_strchr:dword ; DATA	XREF: strchrr
; int __cdecl strcmp(const char	*Str1, const char *Str2)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; size_t __cdecl strlen(const char *Str)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *Str1,	const char *Str2, size_t MaxCount)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; char *__cdecl	strstr(const char *Str,	const char *SubStr)
		extrn __imp_strstr:dword ; DATA	XREF: strstrr
; __int32 __cdecl strtol(const char *Str, char **EndPtr, int Radix)
		extrn __imp_strtol:dword ; DATA	XREF: strtolr
; int __cdecl _vsnprintf(char *DstBuf, size_t MaxCount,	const char *Format, va_list ArgList)
		extrn __imp__vsnprintf:dword ; DATA XREF: _vsnprintfr
; int __cdecl vsnwprintf(wchar_t *Dest,	size_t Count, const wchar_t *Format, va_list Args)
		extrn _vsnwprintf:dword	; CODE XREF: sub_4023CC+2Cp
					; sub_405056+137p ...
		extrn _wcmdln:dword	; DATA XREF: sub_401180+131r
; int __cdecl wcsicmp(const wchar_t *Str1, const wchar_t *Str2)
		extrn _wcsicmp:dword	; CODE XREF: sub_401570+50p
					; sub_40CE87+88p ...
; wchar_t *__cdecl static _wctime(const	time_t *Time)
		extrn __imp__wctime:dword ; DATA XREF: _wctimer
; FILE *__cdecl	wfopen(const wchar_t *Filename,	const wchar_t *Mode)
		extrn _wfopen:dword	; CODE XREF: sub_40856A+100p
					; sub_40856A+19Bp ...
; int __cdecl wtoi(const wchar_t *Str)
		extrn _wtoi:dword	; CODE XREF: sub_40ACDF+564p
					; sub_40ACDF+5D2p ...
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl atoi(const char *Str)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; time_t __cdecl static	time(time_t *Time)
		extrn __imp_time:dword	; DATA XREF: timer
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr
; wchar_t *__cdecl wcscat(wchar_t *Dest, const wchar_t *Source)
		extrn __imp_wcscat:dword ; DATA	XREF: wcscatr
; wchar_t *__cdecl wcschr(const	wchar_t	*Str, wchar_t Ch)
		extrn __imp_wcschr:dword ; DATA	XREF: wcschrr
; int __cdecl wcscmp(const wchar_t *Str1, const	wchar_t	*Str2)
		extrn __imp_wcscmp:dword ; DATA	XREF: wcscmpr
; size_t __cdecl wcslen(const wchar_t *Str)
		extrn __imp_wcslen:dword ; DATA	XREF: wcslenr
; wchar_t *__cdecl wcsncat(wchar_t *Dest, const	wchar_t	*Source, size_t	Count)
		extrn __imp_wcsncat:dword ; DATA XREF: wcsncatr
; int __cdecl wcsncmp(const wchar_t *Str1, const wchar_t *Str2,	size_t MaxCount)
		extrn __imp_wcsncmp:dword ; DATA XREF: wcsncmpr
; wchar_t *__cdecl wcsncpy(wchar_t *Dest, const	wchar_t	*Source, size_t	Count)
		extrn __imp_wcsncpy:dword ; DATA XREF: wcsncpyr
; wchar_t *__cdecl wcsrchr(const wchar_t *Str, wchar_t Ch)
		extrn __imp_wcsrchr:dword ; DATA XREF: wcsrchrr
; wchar_t *__cdecl wcsstr(const	wchar_t	*Str, const wchar_t *SubStr)
		extrn __imp_wcsstr:dword ; DATA	XREF: wcsstrr
; wchar_t *__cdecl wcstok(wchar_t *Str,	const wchar_t *Delim)
		extrn __imp_wcstok:dword ; DATA	XREF: wcstokr
; __int32 __cdecl wcstol(const wchar_t *Str, wchar_t **EndPtr, int Radix)
		extrn __imp_wcstol:dword ; DATA	XREF: wcstolr
		extrn _wstat:dword	; CODE XREF: sub_40B7F7+7Ep
					; sub_40B9DE+7Ep ...

;
; Imports from SHELL32.DLL
;
; BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData)
		extrn Shell_NotifyIconW:dword ;	CODE XREF: sub_406480+2Cp
					; sub_4064B3+81p ...

;
; Imports from USER32.dll
;
; BOOL __stdcall AppendMenuW(HMENU hMenu, UINT uFlags, UINT_PTR	uIDNewItem, LPCWSTR lpNewItem)
		extrn AppendMenuW:dword	; CODE XREF: sub_40592C+93p
					; sub_40592C+C6p ...
; DWORD	__stdcall CheckMenuItem(HMENU hMenu, UINT uIDCheckItem,	UINT uCheck)
		extrn CheckMenuItem:dword ; CODE XREF: sub_406A62+1F1p
					; DATA XREF: sub_406A62+1ECr
; BOOL __stdcall CheckRadioButton(HWND hDlg, int nIDFirstButton, int nIDLastButton, int	nIDCheckButton)
		extrn CheckRadioButton:dword ; CODE XREF: sub_409E67+32p
					; sub_409E67+A6p
					; DATA XREF: ...
; HWND __stdcall CreateDialogIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam)
		extrn CreateDialogIndirectParamW:dword ; CODE XREF: sub_405555+8Bp
					; DATA XREF: sub_405555+86r
; HICON	__stdcall CreateIconFromResource(PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer)
		extrn CreateIconFromResource:dword ; CODE XREF:	sub_405370+139p
					; DATA XREF: sub_405370+134r
; HMENU	__stdcall CreatePopupMenu()
		extrn CreatePopupMenu:dword ; CODE XREF: sub_40592C+14p
					; sub_40592C+33p ...
; HWND __stdcall CreateWindowExW(DWORD dwExStyle, LPCWSTR lpClassName, LPCWSTR lpWindowName, DWORD dwStyle, int	X, int Y, int nWidth, int nHeight, HWND	hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam)
		extrn CreateWindowExW:dword ; CODE XREF: sub_401623+2F5p
					; sub_403276+12Ap
					; DATA XREF: ...
; LRESULT __stdcall DefWindowProcW(HWND	hWnd, UINT Msg,	WPARAM wParam, LPARAM lParam)
		extrn DefWindowProcW:dword ; CODE XREF:	sub_401ADE+4B1p
					; DATA XREF: sub_401ADE+4ACr
; BOOL __stdcall DestroyMenu(HMENU hMenu)
		extrn DestroyMenu:dword	; CODE XREF: sub_40621E+21p
					; sub_40621E+41p ...
; BOOL __stdcall DestroyWindow(HWND hWnd)
		extrn DestroyWindow:dword ; CODE XREF: sub_40228A+8Fp
					; sub_403276+6A3p ...
; INT_PTR __stdcall DialogBoxIndirectParamW(HINSTANCE hInstance, LPCDLGTEMPLATEW hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM	dwInitParam)
		extrn DialogBoxIndirectParamW:dword ; CODE XREF: sub_405503+4Bp
					; DATA XREF: sub_405503+46r
; LRESULT __stdcall DispatchMessageW(const MSG *lpMsg)
		extrn DispatchMessageW:dword ; CODE XREF: sub_401623+317p
					; StartAddress+3C0p ...
; BOOL __stdcall EnableMenuItem(HMENU hMenu, UINT uIDEnableItem, UINT uEnable)
		extrn EnableMenuItem:dword ; CODE XREF:	sub_406A62+37p
					; sub_406A62+59p ...
; BOOL __stdcall EnableWindow(HWND hWnd, BOOL bEnable)
		extrn EnableWindow:dword ; CODE	XREF: sub_402A63+11Fp
					; sub_402EC6+C8p ...
; BOOL __stdcall EndDialog(HWND	hDlg, INT_PTR nResult)
		extrn EndDialog:dword	; CODE XREF: sub_402A63+187p
					; sub_402A63+1A8p ...
; HWND __stdcall FindWindowW(LPCWSTR lpClassName, LPCWSTR lpWindowName)
		extrn FindWindowW:dword	; CODE XREF: sub_401623+14Fp
					; DATA XREF: sub_401623+14Ar
; BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect)
		extrn GetClientRect:dword ; CODE XREF: sub_403276+278p
					; DATA XREF: sub_403276+273r
; BOOL __stdcall GetCursorPos(LPPOINT lpPoint)
		extrn GetCursorPos:dword ; CODE	XREF: sub_406278+50p
					; DATA XREF: sub_406278+4Br
; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
		extrn GetDlgItem:dword	; CODE XREF: sub_4024B3+1Fp
					; sub_402A63+10Ep ...
; UINT __stdcall GetDlgItemInt(HWND hDlg, int nIDDlgItem, BOOL *lpTranslated, BOOL bSigned)
		extrn GetDlgItemInt:dword ; CODE XREF: sub_408B8B+193p
					; DATA XREF: sub_408B8B+18Er
; UINT __stdcall GetDlgItemTextW(HWND hDlg, int	nIDDlgItem, LPWSTR lpString, int cchMax)
		extrn GetDlgItemTextW:dword ; CODE XREF: sub_4083F4+2Bp
					; sub_4083F4+55p ...
; BOOL __stdcall GetMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax)
		extrn GetMessageW:dword	; CODE XREF: sub_401623+33Fp
					; StartAddress+3EBp ...
; HANDLE __stdcall GetPropW(HWND hWnd, LPCWSTR lpString)
		extrn GetPropW:dword	; CODE XREF: sub_402A63+AAp
					; sub_402C6B+A9p ...
; int __stdcall	GetWindowTextLengthW(HWND hWnd)
		extrn GetWindowTextLengthW:dword ; CODE	XREF: sub_402A63+E9p
					; sub_40A455+C4p ...
; BOOL __stdcall InvalidateRect(HWND hWnd, const RECT *lpRect, BOOL bErase)
		extrn InvalidateRect:dword ; CODE XREF:	sub_403276+5E2p
					; DATA XREF: sub_403276+5DDr
; BOOL __stdcall IsDialogMessageW(HWND hDlg, LPMSG lpMsg)
		extrn IsDialogMessageW:dword ; CODE XREF: StartAddress+396p
					; sub_4094D5+16Ap
					; DATA XREF: ...
; UINT __stdcall IsDlgButtonChecked(HWND hDlg, int nIDButton)
		extrn IsDlgButtonChecked:dword ; CODE XREF: sub_409D04+1Cp
					; sub_409D04+3Dp ...
; HCURSOR __stdcall LoadCursorW(HINSTANCE hInstance, LPCWSTR lpCursorName)
		extrn LoadCursorW:dword	; CODE XREF: sub_401623+24Fp
					; DATA XREF: sub_401623+24Ar
; int __stdcall	LookupIconIdFromDirectory(PBYTE	presbits, BOOL fIcon)
		extrn LookupIconIdFromDirectory:dword ;	CODE XREF: sub_405370+7Fp
					; DATA XREF: sub_405370+7Ar
; int __stdcall	MessageBoxExW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType,	WORD wLanguageId)
		extrn MessageBoxExW:dword ; CODE XREF: sub_4052B5+4Bp
					; DATA XREF: sub_4052B5+46r
; BOOL __stdcall MoveWindow(HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint)
		extrn MoveWindow:dword	; CODE XREF: sub_403276+2B4p
					; sub_403276+303p ...
; BOOL __stdcall PostMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn PostMessageW:dword ; CODE	XREF: StartAddress+166p
					; sub_406278+CEp
					; DATA XREF: ...
; void __stdcall PostQuitMessage(int nExitCode)
		extrn PostQuitMessage:dword ; CODE XREF: sub_401ADE+34Ap
					; sub_403276+7FCp ...
; BOOL __stdcall PostThreadMessageW(DWORD idThread, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn PostThreadMessageW:dword ; CODE XREF: sub_4047A6+2Fp
					; sub_4047DC+36p
					; DATA XREF: ...
; ATOM __stdcall RegisterClassExW(const	WNDCLASSEXW *)
		extrn RegisterClassExW:dword ; CODE XREF: sub_401623+27Ep
					; DATA XREF: sub_401623+279r
; UINT __stdcall RegisterWindowMessageW(LPCWSTR	lpString)
		extrn RegisterWindowMessageW:dword ; CODE XREF:	sub_401ADE+97p
					; DATA XREF: sub_401ADE+92r
; HANDLE __stdcall RemovePropW(HWND hWnd, LPCWSTR lpString)
		extrn RemovePropW:dword	; CODE XREF: sub_402A63+1F6p
					; sub_402C6B+15Fp ...
; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
		extrn SendMessageW:dword ; CODE	XREF: sub_401ADE+EEp
					; sub_401ADE+115p ...
; BOOL __stdcall SetDlgItemInt(HWND hDlg, int nIDDlgItem, UINT uValue, BOOL bSigned)
		extrn SetDlgItemInt:dword ; CODE XREF: sub_4094D5+10Fp
					; DATA XREF: sub_4094D5+10Ar
; BOOL __stdcall SetDlgItemTextA(HWND hDlg, int	nIDDlgItem, LPCSTR lpString)
		extrn SetDlgItemTextA:dword ; CODE XREF: sub_40CAF3+18Ap
					; DATA XREF: sub_40CAF3+185r
; BOOL __stdcall SetDlgItemTextW(HWND hDlg, int	nIDDlgItem, LPCWSTR lpString)
		extrn SetDlgItemTextW:dword ; CODE XREF: sub_4026B9+277p
					; sub_4026B9+38Ap ...
; HWND __stdcall SetFocus(HWND hWnd)
		extrn SetFocus:dword	; CODE XREF: sub_403276+405p
					; sub_403276+657p ...
; BOOL __stdcall SetForegroundWindow(HWND hWnd)
		extrn SetForegroundWindow:dword	; CODE XREF: sub_402A63+8Cp
					; sub_402C6B+8Bp ...
; BOOL __stdcall SetPropW(HWND hWnd, LPCWSTR lpString, HANDLE hData)
		extrn SetPropW:dword	; CODE XREF: sub_402A63+5Ep
					; sub_402C6B+5Dp ...
; LONG __stdcall SetWindowLongW(HWND hWnd, int nIndex, LONG dwNewLong)
		extrn SetWindowLongW:dword ; CODE XREF:	sub_40574D+1C6p
					; sub_40972F+55Dp ...
; BOOL __stdcall SetWindowTextW(HWND hWnd, LPCWSTR lpString)
		extrn SetWindowTextW:dword ; CODE XREF:	StartAddress+129p
					; sub_4094D5+139p
					; DATA XREF: ...
; BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow)
		extrn ShowWindow:dword	; CODE XREF: sub_401ADE+239p
					; sub_4026B9+2AEp ...
; BOOL __stdcall TrackPopupMenu(HMENU hMenu, UINT uFlags, int x, int y,	int nReserved, HWND hWnd, const	RECT *prcRect)
		extrn TrackPopupMenu:dword ; CODE XREF:	sub_406278+A4p
					; DATA XREF: sub_406278+9Fr
; BOOL __stdcall TranslateMessage(const	MSG *lpMsg)
		extrn TranslateMessage:dword ; CODE XREF: sub_401623+307p
					; StartAddress+3ADp ...
; void __stdcall keybd_event(BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo)
		extrn keybd_event:dword	; CODE XREF: sub_40CDC4+31p
					; sub_40CDC4+6Dp
					; DATA XREF: ...

;
; Imports from WINHTTP.dll
;
; BOOL __stdcall WinHttpCloseHandle(HINTERNET hInternet)
		extrn __imp_WinHttpCloseHandle:dword ; DATA XREF: WinHttpCloseHandler
; BOOL __stdcall WinHttpDetectAutoProxyConfigUrl(DWORD dwAutoDetectFlags, LPWSTR *ppwstrAutoConfigUrl)
		extrn __imp_WinHttpDetectAutoProxyConfigUrl:dword
					; DATA XREF: WinHttpDetectAutoProxyConfigUrlr
; BOOL __stdcall WinHttpGetIEProxyConfigForCurrentUser(WINHTTP_CURRENT_USER_IE_PROXY_CONFIG *pProxyConfig)
		extrn __imp_WinHttpGetIEProxyConfigForCurrentUser:dword
					; DATA XREF: WinHttpGetIEProxyConfigForCurrentUserr
; BOOL __stdcall WinHttpGetProxyForUrl(HINTERNET hSession, LPCWSTR lpcwszUrl, WINHTTP_AUTOPROXY_OPTIONS	*pAutoProxyOptions, WINHTTP_PROXY_INFO *pProxyInfo)
		extrn __imp_WinHttpGetProxyForUrl:dword	; DATA XREF: WinHttpGetProxyForUrlr
; HINTERNET __stdcall WinHttpOpen(LPCWSTR pszAgentW, DWORD dwAccessType, LPCWSTR pszProxyW, LPCWSTR pszProxyBypassW, DWORD dwFlags)
		extrn __imp_WinHttpOpen:dword ;	DATA XREF: WinHttpOpenr

;
; Imports from WS2_32.dll
;
; int __stdcall	WSAAsyncSelect(SOCKET s, HWND hWnd, u_int wMsg,	__int32	lEvent)
		extrn WSAAsyncSelect:dword ; CODE XREF:	sub_40BEE1+A2p
					; DATA XREF: sub_40BEE1+9Dr
; int __stdcall	WSACleanup()
		extrn WSACleanup:dword	; CODE XREF: sub_40C2A0+67Bp
					; DATA XREF: sub_40C2A0+676r
; int __stdcall	WSAStartup(WORD	wVersionRequested, LPWSADATA lpWSAData)
		extrn WSAStartup:dword	; CODE XREF: sub_40BEE1+1Fp
					; DATA XREF: sub_40BEE1+1Ar
; int __stdcall	closesocket(SOCKET s)
		extrn closesocket:dword	; CODE XREF: sub_40C2A0+654p
					; DATA XREF: sub_40C2A0+64Fr
; int __stdcall	connect(SOCKET s, const	struct sockaddr	*name, int namelen)
		extrn connect:dword	; CODE XREF: sub_40BEE1+D8p
					; sub_40C2A0+9Ep
					; DATA XREF: ...
; u_short __stdcall htons(u_short hostshort)
		extrn htons:dword	; CODE XREF: sub_40CF79+129p
					; DATA XREF: sub_40CF79+124r
; unsigned __int32 __stdcall inet_addr(const char *cp)
		extrn inet_addr:dword	; CODE XREF: sub_40CF79+109p
					; DATA XREF: sub_40CF79+104r
; char *__stdcall inet_ntoa(struct in_addr in)
		extrn inet_ntoa:dword	; CODE XREF: sub_403F71+1F4p
					; DATA XREF: sub_403F71+1EFr
; int __stdcall	ioctlsocket(SOCKET s, __int32 cmd, u_long *argp)
		extrn ioctlsocket:dword	; CODE XREF: sub_40C2A0+E4p
					; DATA XREF: sub_40C2A0+DFr
; u_short __stdcall ntohs(u_short netshort)
		extrn ntohs:dword	; CODE XREF: sub_403F71+1DBp
					; DATA XREF: sub_403F71+1D6r
; int __stdcall	recv(SOCKET s, char *buf, int len, int flags)
		extrn recv:dword	; CODE XREF: sub_40C2A0+151p
					; DATA XREF: sub_40C2A0+14Cr
; int __stdcall	send(SOCKET s, const char *buf,	int len, int flags)
		extrn send:dword	; CODE XREF: sub_40BFE1+54p
					; DATA XREF: sub_40BFE1+4Fr
; SOCKET __stdcall socket(int af, int type, int	protocol)
		extrn socket:dword	; CODE XREF: sub_40BEE1+4Ep
					; DATA XREF: sub_40BEE1+49r

;
; Imports from WTSAPI32.dll
;
		extrn __imp_WTSRegisterSessionNotification:dword
					; DATA XREF: WTSRegisterSessionNotificationr
		extrn __imp_WTSUnRegisterSessionNotification:dword
					; DATA XREF: WTSUnRegisterSessionNotificationr


; Section 6. (virtual address 00031000)
; Virtual size			: 00000034 (	 52.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00011400
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 431000h
dword_431000	dd 0			; DATA XREF: sub_401180+2E0o
		dd offset sub_401130
dword_431008	dd 0			; DATA XREF: sub_401180:loc_401458o
dword_43100C	dd 0			; DATA XREF: sub_401180+32Co
		dd offset sub_401010
		dd offset sub_40D5E0
dword_431018	dd 2 dup(0)		; DATA XREF: sub_401180+324o
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 10h
dword_431030	dd 74h dup(0)		; DATA XREF: TlsCallback_0:loc_40D581o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 7. (virtual address 00032000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00011600
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 432000h
TlsStart	dd 0			; DATA XREF: .tls:TlsDirectoryo
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end start
