;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	41C513E37EC0D0A7AA3DD5C37A377D92
; Input	CRC32 :	139060BF

; File Name   :	C:\compspace\compare\openvpn\dlls\full\ssleay32.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	6E400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00046954 ( 289108.)
; Section size in file		: 00046A00 ( 289280.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 6E401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_6E401000	proc near		; DATA XREF: .CRT:6E45B00Co

Size		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+Size],	80h ; Size
		call	malloc
		mov	[esp+1Ch+Size],	eax
		mov	ebx, eax
		call	sub_6E446B40
		test	ebx, ebx
		mov	ds:dword_6E454448, eax
		mov	ds:dword_6E454444, eax
		jz	short loc_6E401035
		mov	dword ptr [ebx], 0
		add	esp, 18h
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6E401035:				; CODE XREF: sub_6E401000+26j
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn
sub_6E401000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E401040	proc near		; CODE XREF: sub_6E401260+7Dp
					; sub_6E401260+104p ...

dwMilliseconds	= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edx, [ebp+arg_4]
		test	edx, edx
		jnz	short loc_6E4010B8
		mov	eax, ds:dword_6E454000
		test	eax, eax
		jle	loc_6E401163
		sub	eax, 1
		xor	ebx, ebx
		mov	esi, ds:Sleep
		mov	ds:dword_6E454000, eax
		jmp	short loc_6E40107C
; ---------------------------------------------------------------------------
		align 10h

loc_6E401070:				; CODE XREF: sub_6E401040+4Dj
		mov	[esp+28h+dwMilliseconds], 3E8h ; dwMilliseconds
		call	esi ; Sleep
		sub	esp, 4

loc_6E40107C:				; CODE XREF: sub_6E401040+2Dj
		mov	edx, 1
		mov	eax, ebx
		lock cmpxchg ds:dword_6E45444C,	edx
		test	eax, eax
		jnz	short loc_6E401070
		mov	eax, ds:dword_6E454450
		cmp	eax, 2
		jz	loc_6E401170
		mov	[esp+28h+dwMilliseconds], 1Fh
		call	_amsg_exit
		mov	eax, 1

loc_6E4010AE:				; CODE XREF: sub_6E401040+80j
					; sub_6E401040+125j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6E4010B8:				; CODE XREF: sub_6E401040+Ej
		cmp	edx, 1
		mov	eax, 1
		jnz	short loc_6E4010AE
		mov	eax, large fs:18h
		xor	esi, esi
		mov	ebx, [eax+4]
		mov	edi, ds:Sleep
		jmp	short loc_6E4010E9
; ---------------------------------------------------------------------------

loc_6E4010D5:				; CODE XREF: sub_6E401040+B5j
		cmp	eax, ebx
		jz	loc_6E4011E5
		mov	[esp+28h+dwMilliseconds], 3E8h ; dwMilliseconds
		call	edi ; Sleep
		sub	esp, 4

loc_6E4010E9:				; CODE XREF: sub_6E401040+93j
		mov	eax, esi
		lock cmpxchg ds:dword_6E45444C,	ebx
		test	eax, eax
		jnz	short loc_6E4010D5
		xor	ebx, ebx

loc_6E4010F9:				; CODE XREF: sub_6E401040+1AAj
		mov	eax, ds:dword_6E454450
		cmp	eax, 1
		jz	loc_6E401223
		mov	eax, ds:dword_6E454450
		test	eax, eax
		jz	loc_6E401200

loc_6E401114:				; CODE XREF: sub_6E401040+1DEj
					; sub_6E401040+1EFj
		mov	eax, ds:dword_6E454450
		cmp	eax, 1
		jz	loc_6E401234

loc_6E401122:				; CODE XREF: sub_6E401040+212j
		test	ebx, ebx
		jz	loc_6E4011F0

loc_6E40112A:				; CODE XREF: sub_6E401040+1B6j
		mov	eax, ds:off_6E4530A4
		test	eax, eax
		jz	short loc_6E40114D
		mov	edx, [ebp+arg_8]
		mov	[esp+28h+var_24], 2
		mov	[esp+28h+var_20], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+28h+dwMilliseconds], edx
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_6E40114D:				; CODE XREF: sub_6E401040+F1j
		add	ds:dword_6E454000, 1
		mov	eax, 1
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6E401163:				; CODE XREF: sub_6E401040+17j
		xor	eax, eax
		jmp	loc_6E4010AE
; ---------------------------------------------------------------------------
		align 10h

loc_6E401170:				; CODE XREF: sub_6E401040+57j
		mov	eax, ds:dword_6E454448
		mov	[esp+28h+dwMilliseconds], eax
		call	sub_6E446B30
		test	eax, eax
		mov	esi, eax
		jz	short loc_6E4011C4
		mov	eax, ds:dword_6E454444
		mov	[esp+28h+dwMilliseconds], eax
		call	sub_6E446B30
		mov	ebx, eax

loc_6E401192:				; CODE XREF: sub_6E401040+15Dj
		sub	ebx, 4
		cmp	esi, ebx
		ja	short loc_6E4011A8

loc_6E401199:				; CODE XREF: sub_6E401040+166j
		mov	edx, [ebx]
		test	edx, edx
		jz	short loc_6E401192
		sub	ebx, 4
		call	edx
		cmp	esi, ebx
		jbe	short loc_6E401199

loc_6E4011A8:				; CODE XREF: sub_6E401040+157j
		mov	[esp+28h+dwMilliseconds], esi ;	Memory
		call	free
		mov	ds:dword_6E454444, 0
		mov	ds:dword_6E454448, 0

loc_6E4011C4:				; CODE XREF: sub_6E401040+141j
		xor	eax, eax
		mov	ds:dword_6E454450, 0
		xchg	eax, ds:dword_6E45444C
		mov	eax, 1
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6E4011E5:				; CODE XREF: sub_6E401040+97j
		mov	ebx, 1
		jmp	loc_6E4010F9
; ---------------------------------------------------------------------------
		align 10h

loc_6E4011F0:				; CODE XREF: sub_6E401040+E4j
		xchg	ebx, ds:dword_6E45444C
		jmp	loc_6E40112A
; ---------------------------------------------------------------------------
		align 10h

loc_6E401200:				; CODE XREF: sub_6E401040+CEj
		mov	[esp+28h+var_24], offset dword_6E45B010
		mov	[esp+28h+dwMilliseconds], offset dword_6E45B008
		mov	ds:dword_6E454450, 1
		call	_initterm
		jmp	loc_6E401114
; ---------------------------------------------------------------------------

loc_6E401223:				; CODE XREF: sub_6E401040+C1j
		mov	[esp+28h+dwMilliseconds], 1Fh
		call	_amsg_exit
		jmp	loc_6E401114
; ---------------------------------------------------------------------------

loc_6E401234:				; CODE XREF: sub_6E401040+DCj
		mov	[esp+28h+var_24], offset dword_6E45B004
		mov	[esp+28h+dwMilliseconds], offset dword_6E45B000
		call	_initterm
		mov	ds:dword_6E454450, 2
		jmp	loc_6E401122
sub_6E401040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E401260	proc near		; CODE XREF: DllEntryPoint+1Ep

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 1Ch
		test	edx, edx
		mov	dword_6E44AB24,	edx
		jnz	short loc_6E4012C5
		mov	eax, ds:dword_6E454000
		test	eax, eax
		jz	short loc_6E4012F0
		call	sub_6E446DF0
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], esi
		call	sub_6E447860
		sub	esp, 0Ch
		mov	edx, eax

loc_6E4012A0:				; CODE XREF: sub_6E401260+BCj
					; sub_6E401260+C1j ...
		cmp	ebx, 3
		jz	loc_6E401377

loc_6E4012A9:				; CODE XREF: sub_6E401260+111j
		test	ebx, ebx
		jz	loc_6E401377

loc_6E4012B1:				; CODE XREF: sub_6E401260+92j
					; sub_6E401260+14Dj ...
		mov	dword_6E44AB24,	0FFFFFFFFh
		lea	esp, [ebp-0Ch]
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E4012C5:				; CODE XREF: sub_6E401260+17j
		call	sub_6E446DF0
		lea	eax, [ebx-1]
		cmp	eax, 1
		ja	short loc_6E401305
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	sub_6E401040
		sub	esp, 0Ch
		test	eax, eax
		jnz	loc_6E4013B2
		lea	esi, [esi+0]

loc_6E4012F0:				; CODE XREF: sub_6E401260+20j
					; sub_6E401260+170j
		xor	edx, edx
		jmp	short loc_6E4012B1
; ---------------------------------------------------------------------------

loc_6E4012F4:				; CODE XREF: sub_6E401260+167j
		cmp	ebx, 1
		jnz	loc_6E4013F8
		lea	esi, [esi+0]
		call	sub_6E447140

loc_6E401305:				; CODE XREF: sub_6E401260+70j
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	sub_6E447860
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, eax
		jnz	short loc_6E4012A0
		cmp	ebx, 1
		jnz	loc_6E4012A0
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], esi
		call	sub_6E447860
		sub	esp, 0Ch
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], esi
		call	sub_6E447870
		sub	esp, 0Ch
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], esi
		call	sub_6E401040
		xor	edx, edx
		sub	esp, 0Ch
		cmp	ebx, 3
		jnz	loc_6E4012A9

loc_6E401377:				; CODE XREF: sub_6E401260+43j
					; sub_6E401260+4Bj
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	sub_6E447870
		sub	esp, 0Ch
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		mov	[ebp+var_1C], eax
		call	sub_6E401040
		mov	edx, [ebp+var_1C]
		sub	esp, 0Ch
		test	eax, eax
		mov	eax, 0
		cmovz	edx, eax
		jmp	loc_6E4012B1
; ---------------------------------------------------------------------------

loc_6E4013B2:				; CODE XREF: sub_6E401260+87j
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	sub_6E447870
		sub	esp, 0Ch
		test	eax, eax
		jnz	loc_6E4012F4
		cmp	ebx, 1
		jnz	loc_6E4012F0
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], esi
		mov	[ebp+var_1C], eax
		call	sub_6E401040
		mov	edx, [ebp+var_1C]
		sub	esp, 0Ch
		jmp	loc_6E4012B1
; ---------------------------------------------------------------------------

loc_6E4013F8:				; CODE XREF: sub_6E401260+97j
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 2
		mov	[esp+28h+var_28], esi
		call	sub_6E447860
		sub	esp, 0Ch
		mov	edx, eax
		jmp	loc_6E4012A0
sub_6E401260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_10		= dword	ptr -10h
hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpReserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+fdwReason]
		mov	ds:dword_6E4540B0, 0
		cmp	edx, 1
		jz	short loc_6E401450

loc_6E401436:				; CODE XREF: DllEntryPoint+3Dj
		mov	ecx, [esp+1Ch+lpReserved]
		mov	eax, [esp+1Ch+hinstDLL]
		call	sub_6E401260
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6E401450:				; CODE XREF: DllEntryPoint+14j
		mov	[esp+1Ch+var_10], edx
		call	sub_6E447160
		mov	edx, [esp+1Ch+var_10]
		jmp	short loc_6E401436
DllEntryPoint	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E401460	proc near		; CODE XREF: sub_6E447920+6p

lpModuleName	= dword	ptr -1Ch
lpProcName	= dword	ptr -18h

		mov	eax, dword_6E44AB38
		test	eax, eax
		jz	short locret_6E4014AC
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+1Ch+lpModuleName],	offset ModuleName ; "libgcj-13.dll"
		call	ds:GetModuleHandleA
		mov	edx, 0
		sub	esp, 4
		test	eax, eax
		jz	short loc_6E40149E
		mov	[esp+1Ch+lpProcName], offset ProcName ;	"_Jv_RegisterClasses"
		mov	[esp+1Ch+lpModuleName],	eax ; hModule
		call	ds:GetProcAddress
		sub	esp, 8
		mov	edx, eax

loc_6E40149E:				; CODE XREF: sub_6E401460+26j
		test	edx, edx
		jz	short locret_6E4014AB
		mov	[esp+1Ch+lpModuleName],	offset dword_6E44AB38
		call	edx

locret_6E4014AB:			; CODE XREF: sub_6E401460+40j
		leave

locret_6E4014AC:			; CODE XREF: sub_6E401460+7j
		rep retn
sub_6E401460	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_6E4014B0()
sub_6E4014B0	proc near		; DATA XREF: sub_6E447920+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_6E4014B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4014C0	proc near		; DATA XREF: .rdata:6E44B09Co

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 300h
		jnz	short loc_6E4014D0
		mov	eax, offset dword_6E44B040
		retn
; ---------------------------------------------------------------------------

loc_6E4014D0:				; CODE XREF: sub_6E4014C0+8j
		xor	eax, eax
		retn
sub_6E4014C0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 117. SSLv3_method

; =============== S U B	R O U T	I N E =======================================


		public SSLv3_method
SSLv3_method	proc near		; CODE XREF: sub_6E418740:loc_6E418780j
		mov	eax, offset dword_6E44B040
		retn
SSLv3_method	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4014F0	proc near		; DATA XREF: .rdata:6E44B15Co

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 300h
		jnz	short loc_6E401500
		mov	eax, offset dword_6E44B100
		retn
; ---------------------------------------------------------------------------

loc_6E401500:				; CODE XREF: sub_6E4014F0+8j
		xor	eax, eax
		retn
sub_6E4014F0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 118. SSLv3_server_method

; =============== S U B	R O U T	I N E =======================================


		public SSLv3_server_method
SSLv3_server_method proc near		; CODE XREF: sub_6E4187C0:loc_6E418800j
					; sub_6E418840:loc_6E418EF2p
		mov	eax, offset dword_6E44B100
		retn
SSLv3_server_method endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		cmp	dword ptr [eax+34h], 2120h
		jnz	short loc_6E40155A
		mov	edx, [eax+3Ch]
		mov	edx, [edx+4]
		mov	byte ptr [edx],	0
		mov	byte ptr [edx+1], 0
		mov	byte ptr [edx+2], 0
		mov	byte ptr [edx+3], 0
		mov	dword ptr [eax+34h], 2121h
		mov	dword ptr [eax+44h], 4
		mov	dword ptr [eax+48h], 0

loc_6E40155A:				; CODE XREF: .text:6E40152Ej
		mov	dword ptr [esp+4], 16h
		mov	[esp], eax
		call	sub_6E4157D0
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E401570	proc near		; CODE XREF: sub_6E406650+AF3p
					; sub_6E4239E0+1E5p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 38h
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		mov	edx, [ebx+108h]
		lea	ecx, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_28], ecx
		mov	[esp+3Ch+var_2C], edx
		mov	[esp+3Ch+var_30], 0FFFFFFFFh
		mov	[esp+3Ch+var_34], 2181h
		mov	[esp+3Ch+var_38], 2180h
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		mov	edx, [esp+3Ch+var_10]
		test	edx, edx
		jz	short loc_6E4015D0
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+354h], 1
		cmp	dword ptr [eax+340h], 1
		jz	short loc_6E4015E0
		mov	eax, 1

loc_6E4015D0:				; CODE XREF: sub_6E401570+43j
					; sub_6E401570+F1j
		add	esp, 38h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4015E0:				; CODE XREF: sub_6E401570+59j
		test	byte ptr [eax],	40h
		jnz	short loc_6E401630
		mov	edx, [eax+348h]
		test	edx, edx
		jz	short loc_6E401604
		mov	[esp+3Ch+var_3C], edx
		call	DH_free
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+348h], 0

loc_6E401604:				; CODE XREF: sub_6E401570+7Dj
		mov	edx, [eax+34Ch]
		test	edx, edx
		jz	short loc_6E401623
		mov	[esp+3Ch+var_3C], edx
		call	EC_KEY_free
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+34Ch], 0

loc_6E401623:				; CODE XREF: sub_6E401570+9Cj
		or	dword ptr [eax], 40h
		mov	eax, 2
		add	esp, 38h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6E401630:				; CODE XREF: sub_6E401570+73j
		mov	[esp+3Ch+var_2C], 3AEh
		mov	[esp+3Ch+var_30], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+3Ch+var_34], 15Ah
		mov	[esp+3Ch+var_38], 130h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4015D0
sub_6E401570	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E401670	proc near		; CODE XREF: sub_6E406650+B40p
					; sub_6E4239E0+73Dp

Buf1		= dword	ptr -6Ch
Buf2		= dword	ptr -68h
Size		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_24], 0
		cmp	dword ptr [ebx+34h], 2110h
		jz	loc_6E401960

loc_6E401690:				; CODE XREF: sub_6E401670+2F7j
		mov	dword ptr [ebx+10Ch], 1
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		lea	edx, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_58], edx
		mov	[esp+6Ch+var_5C], 4000h
		mov	[esp+6Ch+var_60], 1
		mov	[esp+6Ch+Size],	2112h
		mov	[esp+6Ch+Buf2],	2111h
		mov	[esp+6Ch+Buf1],	ebx
		call	eax
		mov	ebp, eax
		mov	edi, [esp+6Ch+var_30]
		test	edi, edi
		jz	loc_6E4017B0
		mov	dword ptr [ebx+10Ch], 0
		mov	edi, [ebx+40h]
		mov	[esp+6Ch+var_28], edi
		cmp	eax, 22h
		jle	loc_6E401970
		xor	edx, edx
		mov	dl, [edi]
		shl	edx, 8
		xor	eax, eax
		mov	al, [edi+1]
		or	edx, eax
		mov	[ebx+110h], edx
		lea	eax, [edi+2]
		mov	[esp+6Ch+var_28], eax
		mov	eax, [ebx]
		cmp	eax, 0FEFFh
		jz	loc_6E4017C0
		cmp	edx, eax
		jge	loc_6E4017CC

loc_6E401725:				; CODE XREF: sub_6E401670+156j
		mov	[esp+6Ch+var_5C], 3FCh
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	10Bh
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [ebx+110h]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	loc_6E4019B0

loc_6E401765:				; CODE XREF: sub_6E401670+348j
					; sub_6E401670+356j ...
		mov	[esp+6Ch+var_2C], 46h
		mov	eax, 46h

loc_6E401772:				; CODE XREF: sub_6E401670+2E8j
					; sub_6E401670+338j ...
		mov	[esp+6Ch+Size],	eax
		mov	[esp+6Ch+Buf2],	2
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E4151B0

loc_6E401786:				; CODE XREF: sub_6E401670+24Fj
					; sub_6E401670+3A2j ...
		mov	dword ptr [ebx+34h], 5
		mov	ebp, 0FFFFFFFFh

loc_6E401792:				; CODE XREF: sub_6E401670+A42j
		mov	edx, [esp+6Ch+var_24]
		test	edx, edx
		jz	short loc_6E4017B0
		mov	[esp+6Ch+Buf1],	edx
		call	sk_free
		mov	eax, ebp
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4017B0:				; CODE XREF: sub_6E401670+65j
					; sub_6E401670+128j
		mov	eax, ebp

loc_6E4017B2:				; CODE XREF: sub_6E401670+3F5j
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4017C0:				; CODE XREF: sub_6E401670+A7j
		cmp	edx, 0FEFFh
		jg	loc_6E401725

loc_6E4017CC:				; CODE XREF: sub_6E401670+AFj
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+Size],	0
		mov	[esp+6Ch+Buf2],	20h
		mov	[esp+6Ch+Buf1],	ebx
		call	SSL_ctrl
		mov	esi, [esp+6Ch+var_28]
		test	ah, 20h
		jz	loc_6E4019E0
		xor	eax, eax
		mov	al, [esi+20h]
		lea	edx, [esi+eax+21h]
		add	ebp, edi
		cmp	edx, ebp
		jnb	loc_6E401A40
		cmp	byte ptr [edx],	0
		jz	loc_6E401A60

loc_6E401815:				; CODE XREF: sub_6E401670+372j
		mov	edx, [ebx+58h]
		lea	edi, [edx+0C0h]
		mov	eax, 20h
		test	edi, 1
		jnz	loc_6E401AB9

loc_6E40182F:				; CODE XREF: sub_6E401670+45Dj
		test	edi, 2
		jnz	loc_6E401AA5

loc_6E40183B:				; CODE XREF: sub_6E401670+444j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E401853
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E401853:				; CODE XREF: sub_6E401670+1D6j
		test	al, 1
		jz	short loc_6E401861
		mov	al, [esi+edx]
		mov	byte ptr [esp+6Ch+var_48], al
		mov	[edi+edx], al

loc_6E401861:				; CODE XREF: sub_6E401670+1E5j
		mov	edx, [esp+6Ch+var_28]
		lea	eax, [edx+21h]
		mov	[esp+6Ch+var_28], eax
		movzx	edi, byte ptr [edx+20h]
		mov	esi, edi
		and	esi, 0FFh
		lea	ecx, [eax+esi]
		cmp	ebp, ecx
		jb	loc_6E401A70
		mov	ecx, edi
		cmp	cl, 20h
		ja	loc_6E401A90
		mov	dword ptr [ebx+6Ch], 0
		mov	edx, [ebx+28h]
		test	edx, edx
		jz	loc_6E4019F0
		test	byte ptr [ebx+102h], 1
		jz	loc_6E4019F0

loc_6E4018AD:				; CODE XREF: sub_6E401670+3A8j
					; sub_6E401670+3B7j
		mov	[esp+6Ch+Buf2],	1
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E438670
		test	eax, eax
		jz	loc_6E401786
		mov	eax, [ebx]

loc_6E4018C7:				; CODE XREF: sub_6E401670+3C4j
		add	esi, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_28], esi
		cmp	eax, 0FEFFh
		jz	loc_6E401AD2
		cmp	eax, 100h
		jz	loc_6E401AD2
		mov	[esp+6Ch+var_48], 0

loc_6E4018ED:				; CODE XREF: sub_6E401670+4C6j
		lea	ecx, [esi+2]
		cmp	ecx, ebp
		ja	loc_6E401B3B
		xor	eax, eax
		mov	al, [esi]
		shl	eax, 8
		xor	edx, edx
		mov	dl, [esi+1]
		mov	[esp+6Ch+var_28], ecx
		or	eax, edx
		mov	esi, eax
		jz	loc_6E401C1C
		lea	eax, [ecx+eax+1]
		cmp	ebp, eax
		jnb	loc_6E401B50
		mov	[esp+6Ch+var_2C], 32h
		mov	[esp+6Ch+var_5C], 4A2h
		xchg	ax, ax

loc_6E401930:				; CODE XREF: sub_6E401670+430j
					; sub_6E401670+972j
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	9Fh
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------
		align 10h

loc_6E401960:				; CODE XREF: sub_6E401670+1Aj
		mov	dword ptr [ebx+34h], 2111h
		jmp	loc_6E401690
; ---------------------------------------------------------------------------
		align 10h

loc_6E401970:				; CODE XREF: sub_6E401670+7Fj
		mov	[esp+6Ch+var_2C], 32h
		mov	[esp+6Ch+var_5C], 3EFh

loc_6E401980:				; CODE XREF: sub_6E401670+3E0j
					; sub_6E401670+410j ...
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	0A0h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------
		align 10h

loc_6E4019B0:				; CODE XREF: sub_6E401670+EFj
		mov	esi, [ebx+8Ch]
		test	esi, esi
		jnz	loc_6E401765
		mov	ecx, [ebx+90h]
		test	ecx, ecx
		jnz	loc_6E401765
		mov	[ebx], eax
		jmp	loc_6E401765
; ---------------------------------------------------------------------------
		align 10h

loc_6E4019E0:				; CODE XREF: sub_6E401670+183j
		add	ebp, edi
		jmp	loc_6E401815
; ---------------------------------------------------------------------------
		align 10h

loc_6E4019F0:				; CODE XREF: sub_6E401670+22Aj
					; sub_6E401670+237j
		mov	[esp+6Ch+var_60], ebp
		mov	edx, edi
		and	edx, 0FFh
		mov	[esp+6Ch+Size],	edx
		mov	[esp+6Ch+Buf2],	eax
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E439430
		cmp	eax, 1
		jz	short loc_6E401A1D
		inc	eax
		jz	loc_6E401786
		jmp	loc_6E4018AD
; ---------------------------------------------------------------------------

loc_6E401A1D:				; CODE XREF: sub_6E401670+39Fj
		mov	eax, [ebx]
		mov	edx, [ebx+0C0h]
		cmp	eax, [edx]
		jnz	loc_6E4018AD
		mov	dword ptr [ebx+6Ch], 1
		jmp	loc_6E4018C7
; ---------------------------------------------------------------------------
		align 10h

loc_6E401A40:				; CODE XREF: sub_6E401670+196j
		mov	[esp+6Ch+var_2C], 32h
		mov	[esp+6Ch+var_5C], 415h
		jmp	loc_6E401980
; ---------------------------------------------------------------------------
		align 10h

loc_6E401A60:				; CODE XREF: sub_6E401670+19Fj
		mov	eax, 1
		jmp	loc_6E4017B2
; ---------------------------------------------------------------------------
		align 10h

loc_6E401A70:				; CODE XREF: sub_6E401670+20Dj
		mov	[esp+6Ch+var_2C], 32h
		mov	[esp+6Ch+var_5C], 427h
		jmp	loc_6E401980
; ---------------------------------------------------------------------------
		align 10h

loc_6E401A90:				; CODE XREF: sub_6E401670+218j
		mov	[esp+6Ch+var_2C], 32h
		mov	[esp+6Ch+var_5C], 42Dh
		jmp	loc_6E401930
; ---------------------------------------------------------------------------

loc_6E401AA5:				; CODE XREF: sub_6E401670+1C5j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40183B
; ---------------------------------------------------------------------------

loc_6E401AB9:				; CODE XREF: sub_6E401670+1B9j
		mov	al, [esi]
		mov	[edx+0C0h], al
		lea	edi, [edx+0C1h]
		inc	esi
		mov	eax, 1Fh
		jmp	loc_6E40182F
; ---------------------------------------------------------------------------

loc_6E401AD2:				; CODE XREF: sub_6E401670+264j
					; sub_6E401670+26Fj
		lea	eax, [esi+1]
		cmp	eax, ebp
		ja	loc_6E401C07
		mov	[esp+6Ch+var_28], eax
		xor	edx, edx
		mov	dl, [esi]
		add	eax, edx
		cmp	ebp, eax
		jb	loc_6E401C59
		mov	[esp+6Ch+var_48], edx
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+Size],	0
		mov	[esp+6Ch+Buf2],	20h
		mov	[esp+6Ch+Buf1],	ebx
		call	SSL_ctrl
		test	ah, 20h
		mov	edx, [esp+6Ch+var_48]
		jz	short loc_6E401B24
		test	edx, edx
		jnz	loc_6E401FF0

loc_6E401B24:				; CODE XREF: sub_6E401670+4AAj
		mov	[esp+6Ch+var_48], 0

loc_6E401B2C:				; CODE XREF: sub_6E401670+9F6j
		mov	esi, [esp+6Ch+var_28]
		add	esi, edx
		mov	[esp+6Ch+var_28], esi
		jmp	loc_6E4018ED
; ---------------------------------------------------------------------------

loc_6E401B3B:				; CODE XREF: sub_6E401670+282j
		mov	[esp+6Ch+var_2C], 32h
		mov	[esp+6Ch+var_5C], 493h
		jmp	loc_6E401980
; ---------------------------------------------------------------------------

loc_6E401B50:				; CODE XREF: sub_6E401670+2A8j
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+Size],	esi
		mov	[esp+6Ch+Buf2],	ecx
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E432320
		test	eax, eax
		jz	loc_6E401786
		add	esi, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_28], esi
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	loc_6E401C6E
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+0B4h]
		mov	edi, [eax+8]
		xor	esi, esi
		jmp	short loc_6E401BBA
; ---------------------------------------------------------------------------
		align 10h

loc_6E401BA0:				; CODE XREF: sub_6E401670+558j
		mov	[esp+6Ch+Buf2],	esi
		mov	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+Buf1],	eax
		call	sk_value
		cmp	[eax+8], edi
		jz	loc_6E401FE7
		inc	esi

loc_6E401BBA:				; CODE XREF: sub_6E401670+524j
		mov	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+Buf1],	eax
		call	sk_num
		cmp	esi, eax
		jl	short loc_6E401BA0
		mov	[esp+6Ch+var_2C], 2Fh
		mov	[esp+6Ch+var_5C], 4DAh
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	0D7h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E401C07:				; CODE XREF: sub_6E401670+467j
		mov	[esp+6Ch+var_2C], 32h
		mov	[esp+6Ch+var_5C], 45Fh
		jmp	loc_6E401980
; ---------------------------------------------------------------------------

loc_6E401C1C:				; CODE XREF: sub_6E401670+29Cj
		mov	[esp+6Ch+var_2C], 2Fh
		mov	[esp+6Ch+var_5C], 49Ah
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	0B7h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E401C59:				; CODE XREF: sub_6E401670+479j
		mov	[esp+6Ch+var_2C], 32h
		mov	[esp+6Ch+var_5C], 466h
		jmp	loc_6E401980
; ---------------------------------------------------------------------------

loc_6E401C6E:				; CODE XREF: sub_6E401670+50Dj
		mov	edi, esi

loc_6E401C70:				; CODE XREF: sub_6E401670+97Bj
		lea	ecx, [edi+1]
		mov	[esp+6Ch+var_28], ecx
		movzx	esi, byte ptr [edi]
		and	esi, 0FFh
		add	ecx, esi
		cmp	ecx, ebp
		ja	loc_6E401FD2
		test	esi, esi
		jz	short loc_6E401CAC
		cmp	byte ptr [edi+1], 0
		jz	short loc_6E401CED
		xor	eax, eax
		jmp	short loc_6E401CA7
; ---------------------------------------------------------------------------
		align 10h

loc_6E401CA0:				; CODE XREF: sub_6E401670+63Aj
		cmp	byte ptr [edi+eax+1], 0
		jz	short loc_6E401CED

loc_6E401CA7:				; CODE XREF: sub_6E401670+626j
		inc	eax
		cmp	esi, eax
		jg	short loc_6E401CA0

loc_6E401CAC:				; CODE XREF: sub_6E401670+61Cj
		mov	[esp+6Ch+var_28], ecx
		mov	[esp+6Ch+var_2C], 32h
		mov	[esp+6Ch+var_5C], 4F1h
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	0BBh
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E401CED:				; CODE XREF: sub_6E401670+622j
					; sub_6E401670+635j
		mov	[esp+6Ch+var_28], ecx
		cmp	dword ptr [ebx], 2FFh
		jle	short loc_6E401D1D
		lea	eax, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+Size],	ebp
		lea	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+Buf2],	eax
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E41DDD0
		test	eax, eax
		jz	loc_6E402173

loc_6E401D1D:				; CODE XREF: sub_6E401670+687j
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E41D400
		test	eax, eax
		jle	loc_6E40206B
		mov	[esp+6Ch+var_60], 20h
		mov	eax, [ebx+58h]
		add	eax, 0A0h
		mov	[esp+6Ch+Size],	eax
		mov	[esp+6Ch+Buf2],	1
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E41A3F0
		test	eax, eax
		jle	loc_6E4021A8
		cmp	dword ptr [ebx+6Ch], 0
		jnz	loc_6E401E4E
		cmp	dword ptr [ebx], 300h
		jle	loc_6E401E4E
		mov	ecx, [ebx+168h]
		test	ecx, ecx
		jz	loc_6E401E4E
		mov	[esp+6Ch+var_20], 0
		mov	eax, [ebx+0C0h]
		mov	dword ptr [eax+10h], 30h
		mov	edx, [ebx+16Ch]
		mov	[esp+6Ch+var_58], edx
		lea	edx, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_5C], edx
		mov	edx, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_60], edx
		lea	edx, [eax+10h]
		mov	[esp+6Ch+Size],	edx
		add	eax, 14h
		mov	[esp+6Ch+Buf2],	eax
		mov	[esp+6Ch+Buf1],	ebx
		call	ecx
		test	eax, eax
		jz	loc_6E401E4E
		mov	dword ptr [ebx+6Ch], 1
		mov	ecx, [ebx+0C0h]
		mov	eax, [esp+6Ch+var_24]
		mov	[ecx+0BCh], eax
		mov	dword ptr [ecx+0A0h], 0
		mov	[esp+6Ch+var_24], 0
		mov	eax, [esp+6Ch+var_20]
		test	eax, eax
		jz	loc_6E402389

loc_6E401DFC:				; CODE XREF: sub_6E401670+E3Ej
		mov	[ecx+0B4h], eax
		mov	eax, [ebx+74h]
		test	eax, eax
		jz	short loc_6E401E11
		mov	[esp+6Ch+Buf1],	eax
		call	sk_free

loc_6E401E11:				; CODE XREF: sub_6E401670+797j
		mov	eax, [ebx+78h]
		test	eax, eax
		jz	short loc_6E401E20
		mov	[esp+6Ch+Buf1],	eax
		call	sk_free

loc_6E401E20:				; CODE XREF: sub_6E401670+7A6j
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+0BCh]
		mov	[esp+6Ch+Buf1],	eax
		call	sk_dup
		mov	[ebx+74h], eax
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+0BCh]
		mov	[esp+6Ch+Buf1],	eax
		call	sk_dup
		mov	[ebx+78h], eax

loc_6E401E4E:				; CODE XREF: sub_6E401670+6EDj
					; sub_6E401670+6F9j ...
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+38Ch], 0
		mov	ecx, [ebx+0C0h]
		mov	eax, [ecx+0B0h]
		mov	[esp+6Ch+var_44], eax
		test	eax, eax
		jz	loc_6E4020B7
		test	byte ptr [ebx+102h], 2
		jnz	loc_6E402278
		xor	eax, eax
		xor	ebp, ebp
		mov	[esp+6Ch+var_40], esi
		mov	esi, ebx
		mov	ebx, eax
		jmp	short loc_6E401EB8
; ---------------------------------------------------------------------------
		align 10h

loc_6E401E90:				; CODE XREF: sub_6E401670+85Ej
		mov	eax, [esi+0E4h]
		mov	eax, [eax+98h]
		mov	[esp+6Ch+Buf2],	ebx
		mov	[esp+6Ch+Buf1],	eax
		call	sk_value
		mov	ebp, eax
		mov	eax, [esp+6Ch+var_44]
		cmp	[ebp+0], eax
		jz	loc_6E4022D9
		inc	ebx

loc_6E401EB8:				; CODE XREF: sub_6E401670+81Cj
		mov	eax, [esi+0E4h]
		mov	eax, [eax+98h]
		mov	[esp+6Ch+Buf1],	eax
		call	sk_num
		cmp	ebx, eax
		jl	short loc_6E401E90
		mov	ebx, esi
		mov	esi, [esp+6Ch+var_40]
		mov	ecx, [ebx+58h]

loc_6E401ED9:				; CODE XREF: sub_6E401670+C78j
		xor	eax, eax
		cmp	dword ptr [ecx+38Ch], 0
		jnz	short loc_6E401EF9
		jmp	loc_6E402417
; ---------------------------------------------------------------------------
		align 10h

loc_6E401EF0:				; CODE XREF: sub_6E401670+893j
		inc	eax
		cmp	esi, eax
		jle	loc_6E40223B

loc_6E401EF9:				; CODE XREF: sub_6E401670+872j
		xor	edx, edx
		mov	dl, [edi+eax+1]
		cmp	edx, [esp+6Ch+var_44]
		jnz	short loc_6E401EF0
		cmp	esi, eax
		jle	loc_6E40223B

loc_6E401F0D:				; CODE XREF: sub_6E401670+AD4j
					; sub_6E401670+D14j
		cmp	dword ptr [ebx+6Ch], 0
		mov	ecx, [ebx+0C0h]
		jnz	loc_6E4021BA
		xor	eax, eax
		test	ebp, ebp
		jz	short loc_6E401F26
		mov	eax, [ebp+0]

loc_6E401F26:				; CODE XREF: sub_6E401670+8B1j
					; sub_6E401670+C64j
		mov	[ecx+0B0h], eax
		mov	eax, [ecx+0BCh]
		test	eax, eax
		jz	short loc_6E401F44
		mov	[esp+6Ch+Buf1],	eax
		call	sk_free
		mov	ecx, [ebx+0C0h]

loc_6E401F44:				; CODE XREF: sub_6E401670+8C4j
		mov	eax, [esp+6Ch+var_24]
		mov	[ecx+0BCh], eax
		test	eax, eax
		jz	loc_6E40246B
		mov	[esp+6Ch+var_24], 0
		mov	[esp+6Ch+Buf1],	ebx
		call	SSL_get_ciphers
		mov	edx, [ebx+0C0h]
		mov	edx, [edx+0BCh]
		mov	[esp+6Ch+Size],	eax
		mov	[esp+6Ch+Buf2],	edx
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E40F970
		test	eax, eax
		jz	loc_6E4023F6
		mov	edx, [ebx+58h]
		mov	[edx+344h], eax

loc_6E401F93:				; CODE XREF: sub_6E401670+BB2j
					; sub_6E401670+BC6j ...
		mov	eax, [ebx]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jnz	short loc_6E401FB3
		cmp	eax, 302h
		jle	short loc_6E401FB3
		test	byte ptr [ebx+0C8h], 1
		jnz	loc_6E40209C

loc_6E401FB3:				; CODE XREF: sub_6E401670+92Dj
					; sub_6E401670+934j
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E4118F0
		test	eax, eax
		jnz	loc_6E40209C
		mov	[esp+6Ch+var_2C], 50h
		mov	al, 50h
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E401FD2:				; CODE XREF: sub_6E401670+614j
		mov	[esp+6Ch+var_2C], 32h
		mov	[esp+6Ch+var_5C], 4E4h
		jmp	loc_6E401930
; ---------------------------------------------------------------------------

loc_6E401FE7:				; CODE XREF: sub_6E401670+543j
		mov	edi, [esp+6Ch+var_28]
		jmp	loc_6E401C70
; ---------------------------------------------------------------------------

loc_6E401FF0:				; CODE XREF: sub_6E401670+4AEj
		mov	ecx, [ebx+5Ch]
		mov	eax, edx
		lea	edi, [ecx+104h]
		mov	esi, [esp+6Ch+var_28]
		cmp	edx, 4
		jnb	loc_6E40214F

loc_6E402008:				; CODE XREF: sub_6E401670+AFEj
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E402019
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E402019:				; CODE XREF: sub_6E401670+99Cj
		test	al, 1
		jz	short loc_6E402027
		mov	al, [esi+ecx]
		mov	byte ptr [esp+6Ch+var_48], al
		mov	[edi+ecx], al

loc_6E402027:				; CODE XREF: sub_6E401670+9ABj
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+7Ch]
		test	eax, eax
		jz	loc_6E40232A
		mov	[esp+6Ch+Size],	edx
		mov	[esp+6Ch+var_48], edx
		mov	ecx, [ebx+5Ch]
		add	ecx, 104h
		mov	[esp+6Ch+Buf2],	ecx
		mov	[esp+6Ch+Buf1],	ebx
		call	eax
		test	eax, eax
		mov	edx, [esp+6Ch+var_48]
		jz	loc_6E4022ED

loc_6E40205E:				; CODE XREF: sub_6E401670+CE5j
		mov	[esp+6Ch+var_48], 1
		jmp	loc_6E401B2C
; ---------------------------------------------------------------------------

loc_6E40206B:				; CODE XREF: sub_6E401670+6B7j
		mov	[esp+6Ch+var_5C], 4FEh

loc_6E402073:				; CODE XREF: sub_6E401670+C5Dj
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	0E2h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		jmp	loc_6E401786
; ---------------------------------------------------------------------------

loc_6E40209C:				; CODE XREF: sub_6E401670+93Dj
					; sub_6E401670+94Dj
		cmp	dword ptr [ebx], 2FFh
		jg	loc_6E4022B5

loc_6E4020A8:				; CODE XREF: sub_6E401670+C4Fj
		cmp	[esp+6Ch+var_48], 1
		sbb	ebp, ebp
		add	ebp, 2
		jmp	loc_6E401792
; ---------------------------------------------------------------------------

loc_6E4020B7:				; CODE XREF: sub_6E401670+7FDj
		cmp	dword ptr [ebx+6Ch], 0
		jnz	loc_6E4021BA
		test	byte ptr [ebx+102h], 2
		jnz	loc_6E4022D2
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E4022D2
		mov	[esp+6Ch+Buf1],	eax
		call	sk_num
		mov	[esp+6Ch+var_40], eax
		mov	[esp+6Ch+var_44], 0
		mov	ebp, ebx

loc_6E4020F8:				; CODE XREF: sub_6E401670+ADDj
		mov	eax, [esp+6Ch+var_40]
		cmp	[esp+6Ch+var_44], eax
		jge	loc_6E402380
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+98h]
		mov	ecx, [esp+6Ch+var_44]
		mov	[esp+6Ch+Buf2],	ecx
		mov	[esp+6Ch+Buf1],	eax
		call	sk_value
		mov	ebx, [eax]
		xor	edx, edx
		jmp	short loc_6E40212D
; ---------------------------------------------------------------------------

loc_6E402128:				; CODE XREF: sub_6E401670+AC5j
		inc	edx
		cmp	esi, edx
		jle	short loc_6E402149

loc_6E40212D:				; CODE XREF: sub_6E401670+AB6j
		xor	ecx, ecx
		mov	cl, [edi+edx+1]
		cmp	ecx, ebx
		jnz	short loc_6E402128
		mov	ebx, ebp
		mov	ebp, eax
		mov	eax, [ebx+58h]
		mov	[eax+38Ch], ebp
		jmp	loc_6E401F0D
; ---------------------------------------------------------------------------

loc_6E402149:				; CODE XREF: sub_6E401670+ABBj
		inc	[esp+6Ch+var_44]
		jmp	short loc_6E4020F8
; ---------------------------------------------------------------------------

loc_6E40214F:				; CODE XREF: sub_6E401670+992j
		test	edi, 1
		jnz	loc_6E402377

loc_6E40215B:				; CODE XREF: sub_6E401670+D0Bj
		test	edi, 2
		jnz	loc_6E40236D

loc_6E402167:				; CODE XREF: sub_6E401670+D02j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E402008
; ---------------------------------------------------------------------------

loc_6E402173:				; CODE XREF: sub_6E401670+6A7j
		mov	[esp+6Ch+var_5C], 4F9h
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	0E3h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E4021A8:				; CODE XREF: sub_6E401670+6E3j
		mov	[esp+6Ch+var_2C], 50h
		mov	eax, 50h
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E4021BA:				; CODE XREF: sub_6E401670+8A7j
					; sub_6E401670+A4Bj
		test	byte ptr [ebx+103h], 40h
		jz	short loc_6E402227
		mov	eax, [ecx+0BCh]
		mov	[esp+6Ch+var_44], eax
		xor	ebp, ebp
		xor	edi, edi
		xor	esi, esi
		jmp	short loc_6E402205
; ---------------------------------------------------------------------------
		align 10h

loc_6E4021E0:				; CODE XREF: sub_6E401670+B9Fj
		mov	[esp+6Ch+Buf2],	esi
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+Buf1],	eax
		call	sk_value
		test	byte ptr [eax+14h], 20h
		jz	short loc_6E4021F8
		mov	edi, eax

loc_6E4021F8:				; CODE XREF: sub_6E401670+B84j
		test	byte ptr [eax+20h], 2
		jz	short loc_6E402200
		mov	ebp, eax

loc_6E402200:				; CODE XREF: sub_6E401670+B8Cj
		inc	esi
		mov	eax, [esp+6Ch+var_44]

loc_6E402205:				; CODE XREF: sub_6E401670+B63j
		mov	[esp+6Ch+Buf1],	eax
		call	sk_num
		cmp	esi, eax
		jl	short loc_6E4021E0
		mov	eax, [ebx+58h]
		test	edi, edi
		jz	loc_6E402408
		mov	[eax+344h], edi
		jmp	loc_6E401F93
; ---------------------------------------------------------------------------

loc_6E402227:				; CODE XREF: sub_6E401670+B51j
		mov	eax, [ebx+58h]
		mov	edx, [ecx+0B4h]
		mov	[eax+344h], edx
		jmp	loc_6E401F93
; ---------------------------------------------------------------------------

loc_6E40223B:				; CODE XREF: sub_6E401670+883j
					; sub_6E401670+897j
		mov	[esp+6Ch+var_2C], 2Fh
		mov	[esp+6Ch+var_5C], 562h
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	156h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E402278:				; CODE XREF: sub_6E401670+80Aj
		mov	[esp+6Ch+var_2C], 50h
		mov	[esp+6Ch+var_5C], 549h
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	154h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E4022B5:				; CODE XREF: sub_6E401670+A32j
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E41D4F0
		test	eax, eax
		jg	loc_6E4020A8
		mov	[esp+6Ch+var_5C], 5D6h
		jmp	loc_6E402073
; ---------------------------------------------------------------------------

loc_6E4022D2:				; CODE XREF: sub_6E401670+A58j
					; sub_6E401670+A6Cj
		xor	eax, eax
		jmp	loc_6E401F26
; ---------------------------------------------------------------------------

loc_6E4022D9:				; CODE XREF: sub_6E401670+841j
		mov	ebx, esi
		mov	esi, [esp+6Ch+var_40]
		mov	ecx, [ebx+58h]
		mov	[ecx+38Ch], ebp
		jmp	loc_6E401ED9
; ---------------------------------------------------------------------------

loc_6E4022ED:				; CODE XREF: sub_6E401670+9E8j
		mov	[esp+6Ch+var_2C], 28h
		mov	[esp+6Ch+var_5C], 47Fh

loc_6E4022FD:				; CODE XREF: sub_6E401670+CFBj
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	134h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E40232A:				; CODE XREF: sub_6E401670+9C2j
		mov	[esp+6Ch+var_48], edx
		mov	eax, [ebx+5Ch]
		mov	ecx, [eax+204h]
		mov	[esp+6Ch+Size],	ecx ; Size
		lea	ecx, [eax+4]
		mov	[esp+6Ch+Buf2],	ecx ; Buf2
		add	eax, 104h
		mov	[esp+6Ch+Buf1],	eax ; Buf1
		call	memcmp
		test	eax, eax
		mov	edx, [esp+6Ch+var_48]
		jz	loc_6E40205E
		mov	[esp+6Ch+var_2C], 28h
		mov	[esp+6Ch+var_5C], 488h
		jmp	short loc_6E4022FD
; ---------------------------------------------------------------------------

loc_6E40236D:				; CODE XREF: sub_6E401670+AF1j
		movsw
		sub	eax, 2
		jmp	loc_6E402167
; ---------------------------------------------------------------------------

loc_6E402377:				; CODE XREF: sub_6E401670+AE5j
		movsb
		lea	eax, [edx-1]
		jmp	loc_6E40215B
; ---------------------------------------------------------------------------

loc_6E402380:				; CODE XREF: sub_6E401670+A90j
		mov	ebx, ebp
		xor	ebp, ebp
		jmp	loc_6E401F0D
; ---------------------------------------------------------------------------

loc_6E402389:				; CODE XREF: sub_6E401670+786j
		mov	[esp+6Ch+Buf1],	ebx
		call	SSL_get_ciphers
		mov	ecx, [ebx+0C0h]
		mov	ecx, [ecx+0BCh]
		mov	[esp+6Ch+Size],	eax
		mov	[esp+6Ch+Buf2],	ecx
		mov	[esp+6Ch+Buf1],	ebx
		call	sub_6E40F970
		mov	[esp+6Ch+var_20], eax
		test	eax, eax
		jnz	loc_6E4024A8
		mov	[esp+6Ch+var_2C], 28h
		mov	[esp+6Ch+var_5C], 528h

loc_6E4023C9:				; CODE XREF: sub_6E401670+D96j
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	0C1h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E4023F6:				; CODE XREF: sub_6E401670+914j
		mov	[esp+6Ch+var_2C], 28h
		mov	[esp+6Ch+var_5C], 5A0h
		jmp	short loc_6E4023C9
; ---------------------------------------------------------------------------

loc_6E402408:				; CODE XREF: sub_6E401670+BA6j
		test	ebp, ebp
		jz	short loc_6E402454
		mov	[eax+344h], ebp
		jmp	loc_6E401F93
; ---------------------------------------------------------------------------

loc_6E402417:				; CODE XREF: sub_6E401670+874j
		mov	[esp+6Ch+var_2C], 50h
		mov	[esp+6Ch+var_5C], 557h
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	155h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E402454:				; CODE XREF: sub_6E401670+D9Aj
		mov	edx, [ebx+0C0h]
		mov	edx, [edx+0B4h]
		mov	[eax+344h], edx
		jmp	loc_6E401F93
; ---------------------------------------------------------------------------

loc_6E40246B:				; CODE XREF: sub_6E401670+8E0j
		mov	[esp+6Ch+var_2C], 50h
		mov	[esp+6Ch+var_5C], 598h
		mov	[esp+6Ch+var_60], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+6Ch+Size],	44h
		mov	[esp+6Ch+Buf2],	8Ah
		mov	[esp+6Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+6Ch+var_2C]
		jmp	loc_6E401772
; ---------------------------------------------------------------------------

loc_6E4024A8:				; CODE XREF: sub_6E401670+D43j
		mov	ecx, [ebx+0C0h]
		jmp	loc_6E401DFC
sub_6E401670	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4024C0	proc near		; CODE XREF: sub_6E406650+943p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		cmp	dword ptr [ebx+34h], 2130h
		jz	short loc_6E4024F0

loc_6E4024D4:				; CODE XREF: sub_6E4024C0+177j
		mov	[esp+3Ch+var_38], 16h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4157D0

loc_6E4024E4:				; CODE XREF: sub_6E4024C0+1CAj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4024F0:				; CODE XREF: sub_6E4024C0+12j
		mov	eax, [ebx+3Ch]
		mov	ebp, [eax+4]
		lea	eax, [ebp+4]
		mov	[esp+3Ch+var_24], eax
		mov	eax, [ebx]
		sar	eax, 8
		mov	[ebp+4], al
		mov	eax, [ebx]
		mov	[ebp+5], al
		mov	edx, [ebx+58h]
		lea	edi, [ebp+6]
		lea	esi, [edx+0A0h]
		mov	eax, 20h
		test	edi, 1
		jnz	loc_6E402730

loc_6E402527:				; CODE XREF: sub_6E4024C0+287j
		test	edi, 2
		jnz	loc_6E402750

loc_6E402533:				; CODE XREF: sub_6E4024C0+29Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_6E4026B0
		test	al, 1
		jnz	loc_6E402690

loc_6E40254C:				; CODE XREF: sub_6E4024C0+1FDj
		mov	eax, [ebx+0E4h]
		test	byte ptr [eax+20h], 2
		jnz	loc_6E402640

loc_6E40255C:				; CODE XREF: sub_6E4024C0+1E4j
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jnz	loc_6E402640
		mov	eax, [ebx+0C0h]
		mov	dword ptr [eax+44h], 0
		xor	eax, eax

loc_6E402576:				; CODE XREF: sub_6E4024C0+18Cj
		lea	edi, [ebp+27h]
		mov	[esp+3Ch+var_28], edi
		mov	[ebp+26h], al
		mov	ecx, [ebx+0C0h]
		mov	edx, eax
		lea	esi, [ecx+48h]
		cmp	eax, 4
		jnb	loc_6E402700
		xor	ecx, ecx
		test	dl, 2
		jnz	loc_6E4026E0

loc_6E40259F:				; CODE XREF: sub_6E4024C0+260j
		and	edx, 1
		jnz	loc_6E4026D0

loc_6E4025A8:				; CODE XREF: sub_6E4024C0+21Aj
					; sub_6E4024C0+22Ej
		mov	esi, [esp+3Ch+var_28]
		add	esi, eax
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E40F920
		add	esi, eax
		mov	eax, [ebx+58h]
		mov	eax, [eax+38Ch]
		lea	edi, [esi+1]
		test	eax, eax
		jz	short loc_6E4025D7
		mov	al, [eax]

loc_6E4025D7:				; CODE XREF: sub_6E4024C0+113j
		mov	[esi], al
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E41D330
		test	eax, eax
		jle	loc_6E4027A4
		lea	eax, [ebp+4000h]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E41C0E0
		test	eax, eax
		jz	loc_6E4027C1
		mov	edx, eax
		sub	edx, [esp+3Ch+var_24]
		mov	byte ptr [ebp+0], 2
		mov	ecx, edx
		shr	ecx, 10h
		mov	[ebp+1], cl
		mov	ecx, edx
		shr	ecx, 8
		mov	[ebp+2], cl
		mov	[ebp+3], dl
		mov	dword ptr [ebx+34h], 2131h
		sub	eax, ebp
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+48h], 0
		jmp	loc_6E4024D4
; ---------------------------------------------------------------------------
		align 10h

loc_6E402640:				; CODE XREF: sub_6E4024C0+96j
					; sub_6E4024C0+A1j ...
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+44h]
		cmp	eax, 20h
		jle	loc_6E402576
		mov	[esp+3Ch+var_2C], 618h
		mov	[esp+3Ch+var_30], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+3Ch+var_34], 44h

loc_6E40266A:				; CODE XREF: sub_6E4024C0+2FCj
					; sub_6E4024C0+319j
		mov	[esp+3Ch+var_38], 0F2h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4024E4
; ---------------------------------------------------------------------------
		align 10h

loc_6E402690:				; CODE XREF: sub_6E4024C0+86j
					; sub_6E4024C0+203j
		mov	al, [esi+edx]
		mov	byte ptr [esp+3Ch+var_28], al
		mov	[edi+edx], al
		mov	eax, [ebx+0E4h]
		test	byte ptr [eax+20h], 2
		jz	loc_6E40255C
		jmp	short loc_6E402640
; ---------------------------------------------------------------------------
		align 10h

loc_6E4026B0:				; CODE XREF: sub_6E4024C0+7Ej
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E40254C
		jmp	short loc_6E402690
; ---------------------------------------------------------------------------
		align 10h

loc_6E4026D0:				; CODE XREF: sub_6E4024C0+E2j
					; sub_6E4024C0+234j
		mov	dl, [esi+ecx]
		mov	[esp+3Ch+var_1D], dl
		mov	[edi+ecx], dl
		jmp	loc_6E4025A8
; ---------------------------------------------------------------------------
		align 10h

loc_6E4026E0:				; CODE XREF: sub_6E4024C0+D9j
					; sub_6E4024C0+266j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		and	edx, 1
		jz	loc_6E4025A8
		jmp	short loc_6E4026D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E402700:				; CODE XREF: sub_6E4024C0+CEj
		test	edi, 1
		jnz	loc_6E402790

loc_6E40270C:				; CODE XREF: sub_6E4024C0+2DFj
		test	edi, 2
		jnz	short loc_6E402770

loc_6E402714:				; CODE XREF: sub_6E4024C0+2BFj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		xor	ecx, ecx
		test	dl, 2
		jz	loc_6E40259F
		jmp	short loc_6E4026E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E402730:				; CODE XREF: sub_6E4024C0+61j
		mov	al, [edx+0A0h]
		mov	[ebp+6], al
		lea	edi, [ebp+7]
		lea	esi, [edx+0A1h]
		mov	eax, 1Fh
		jmp	loc_6E402527
; ---------------------------------------------------------------------------
		align 10h

loc_6E402750:				; CODE XREF: sub_6E4024C0+6Dj
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E402533
; ---------------------------------------------------------------------------
		align 10h

loc_6E402770:				; CODE XREF: sub_6E4024C0+252j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	short loc_6E402714
; ---------------------------------------------------------------------------
		jmp	short loc_6E402790
; ---------------------------------------------------------------------------
		align 10h

loc_6E402790:				; CODE XREF: sub_6E4024C0+246j
					; sub_6E4024C0+2C1j
		mov	dl, [ecx+48h]
		mov	[ebp+27h], dl
		lea	edi, [ebp+28h]
		lea	esi, [ecx+49h]
		lea	edx, [eax-1]
		jmp	loc_6E40270C
; ---------------------------------------------------------------------------

loc_6E4027A4:				; CODE XREF: sub_6E4024C0+123j
		mov	[esp+3Ch+var_2C], 62Fh
		mov	[esp+3Ch+var_30], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+3Ch+var_34], 113h
		jmp	loc_6E40266A
; ---------------------------------------------------------------------------

loc_6E4027C1:				; CODE XREF: sub_6E4024C0+141j
		mov	[esp+3Ch+var_2C], 637h
		mov	[esp+3Ch+var_30], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+3Ch+var_34], 44h
		jmp	loc_6E40266A
sub_6E4024C0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		cmp	dword ptr [eax+34h], 2170h
		jnz	short loc_6E40281A
		mov	edx, [eax+3Ch]
		mov	edx, [edx+4]
		mov	byte ptr [edx],	0Eh
		mov	byte ptr [edx+1], 0
		mov	byte ptr [edx+2], 0
		mov	byte ptr [edx+3], 0
		mov	dword ptr [eax+34h], 2171h
		mov	dword ptr [eax+44h], 4
		mov	dword ptr [eax+48h], 0

loc_6E40281A:				; CODE XREF: .text:6E4027EEj
		mov	dword ptr [esp+4], 16h
		mov	[esp], eax
		call	sub_6E4157D0
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E402830	proc near		; CODE XREF: sub_6E406650+A5Ep

Str		= dword	ptr -0CCh
Source		= dword	ptr -0C8h
Count		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8D		= byte ptr -8Dh
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_60		= dword	ptr -60h
var_58		= byte ptr -58h
var_40		= byte ptr -40h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	ebp, [esp+0CCh+arg_0]
		mov	[esp+0CCh+var_80], 0
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_MD_CTX_init
		cmp	dword ptr [ebp+34h], 2150h
		jnz	loc_6E402AE3
		mov	edx, [ebp+58h]
		mov	ebx, edx
		mov	ecx, [edx+344h]
		mov	eax, [ecx+0Ch]
		mov	[esp+0CCh+var_B0], eax
		mov	edi, [ebp+98h]
		mov	esi, [ebp+3Ch]
		mov	[esp+0CCh+var_AC], esi
		mov	[esp+0CCh+var_6C], 0
		mov	[esp+0CCh+var_70], 0
		mov	[esp+0CCh+var_74], 0
		mov	[esp+0CCh+var_78], 0
		test	al, 1
		jz	loc_6E402B20
		mov	ebx, [edi+18h]
		test	ebx, ebx
		jz	loc_6E4032D0

loc_6E4028B4:				; CODE XREF: sub_6E402830+AEAj
		mov	edi, [ebx+10h]
		mov	[esp+0CCh+var_78], edi
		mov	eax, [ebx+14h]
		mov	[esp+0CCh+var_74], eax
		mov	dword ptr [edx+370h], 1

loc_6E4028CC:				; CODE XREF: sub_6E402830+869j
		mov	[esp+0CCh+var_7C], 0
		test	edi, edi
		jz	loc_6E4037D3
		test	[esp+0CCh+var_B0], 400h
		jnz	loc_6E402F50
		mov	ecx, edi
		xor	esi, esi
		xor	ebx, ebx
		jmp	short loc_6E40292D
; ---------------------------------------------------------------------------
		align 10h

loc_6E402900:				; CODE XREF: sub_6E402830+10Aj
					; sub_6E402830+10Fj
		sar	edx, 3
		mov	[esp+esi*4+0CCh+var_68], edx
		mov	esi, [esp+0CCh+var_7C]
		mov	eax, [esp+esi*4+0CCh+var_68]
		lea	ebx, [ebx+eax+2]
		inc	esi
		mov	[esp+0CCh+var_7C], esi
		cmp	esi, 3
		jg	loc_6E402D00
		mov	ecx, [esp+esi*4+0CCh+var_78]
		test	ecx, ecx
		jz	loc_6E402D00

loc_6E40292D:				; CODE XREF: sub_6E402830+C0j
		mov	[esp+0CCh+Str],	ecx
		call	BN_num_bits
		mov	edx, eax
		add	edx, 7
		jns	short loc_6E402900
		lea	edx, [eax+0Eh]
		jmp	short loc_6E402900
; ---------------------------------------------------------------------------

loc_6E402941:				; CODE XREF: sub_6E402830+54Aj
		mov	edi, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E402950:				; CODE XREF: sub_6E402830+576j
					; sub_6E402830+7EBj ...
		test	byte ptr [esp+0CCh+var_B0], 80h
		jnz	loc_6E402DF4

loc_6E40295B:				; CODE XREF: sub_6E402830+5BEj
		test	[esp+0CCh+var_B0], 100h
		jnz	loc_6E402E6A

loc_6E402969:				; CODE XREF: sub_6E402830+634j
					; sub_6E402830+6A8j
		mov	eax, [esp+0CCh+var_A8]
		test	eax, eax
		jz	loc_6E402ABB
		cmp	dword ptr [eax], 6
		jz	loc_6E4030A0

loc_6E40297E:				; CODE XREF: sub_6E402830+B85j
		mov	eax, [esp+0CCh+var_80]
		test	eax, eax
		jz	loc_6E40366D
		mov	edx, [ebp+0]
		mov	esi, edx
		sar	esi, 8
		cmp	esi, 3
		jnz	short loc_6E4029D0
		cmp	edx, 302h
		jle	short loc_6E4029D0
		mov	[esp+0CCh+Count], eax
		mov	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+Source], eax
		mov	[esp+0CCh+Str],	edi
		call	sub_6E41DA10
		test	eax, eax
		jz	loc_6E4036A3
		add	edi, 2
		mov	eax, [esp+0CCh+var_80]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4029D0:				; CODE XREF: sub_6E402830+165j
					; sub_6E402830+16Dj
		mov	[esp+0CCh+Count], 0
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestInit_ex
		test	eax, eax
		jle	loc_6E403320
		mov	[esp+0CCh+Count], 20h
		mov	eax, [ebp+58h]
		add	eax, 0C0h
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E403320
		mov	[esp+0CCh+Count], 20h
		mov	eax, [ebp+58h]
		add	eax, 0A0h
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E403320
		mov	[esp+0CCh+Count], ebx
		mov	eax, [esp+0CCh+var_AC]
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E403320
		mov	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_C0], eax
		lea	eax, [esp+0CCh+var_7C]
		mov	[esp+0CCh+Count], eax
		lea	eax, [edi+2]
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_SignFinal
		test	eax, eax
		jle	loc_6E403320
		mov	eax, [esp+0CCh+var_7C]
		sar	eax, 8
		mov	[edi], al
		mov	eax, [esp+0CCh+var_7C]
		mov	[edi+1], al
		mov	eax, [esp+0CCh+var_7C]
		lea	ebx, [ebx+eax+2]
		mov	eax, [ebp+0]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	loc_6E403250

loc_6E402AB4:				; CODE XREF: sub_6E402830+A25j
		lea	eax, [ebx+4]
		mov	[esp+0CCh+var_A0], eax

loc_6E402ABB:				; CODE XREF: sub_6E402830+13Fj
					; sub_6E402830+9E7j ...
		mov	ecx, [esp+0CCh+var_9C]
		mov	byte ptr [ecx],	0Ch
		mov	eax, ebx
		sar	eax, 10h
		mov	[ecx+1], al
		mov	eax, ebx
		sar	eax, 8
		mov	[ecx+2], al
		mov	[ecx+3], bl
		mov	eax, [esp+0CCh+var_A0]
		mov	[ebp+44h], eax
		mov	dword ptr [ebp+48h], 0

loc_6E402AE3:				; CODE XREF: sub_6E402830+2Cj
		mov	dword ptr [ebp+34h], 2151h
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_MD_CTX_cleanup
		mov	[esp+0CCh+Source], 16h
		mov	[esp+0CCh+Str],	ebp
		call	sub_6E4157D0
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E402B20
; ---------------------------------------------------------------------------
		align 10h

loc_6E402B20:				; CODE XREF: sub_6E402830+73j
					; sub_6E402830+2E1j
		test	byte ptr [esp+0CCh+var_B0], 8
		jnz	loc_6E403040
		test	byte ptr [esp+0CCh+var_B0], 80h
		jz	loc_6E402EE0
		mov	eax, [edi+28h]
		test	eax, eax
		jz	loc_6E40343F

loc_6E402B41:				; CODE XREF: sub_6E402830+C4Cj
		mov	edx, [ebx+34Ch]
		test	edx, edx
		jnz	loc_6E4034F2
		mov	[esp+0CCh+Str],	eax
		call	EC_KEY_dup
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E403769
		mov	eax, [ebp+58h]
		mov	[eax+34Ch], ebx
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_public_key
		test	eax, eax
		jz	short loc_6E402B8B
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_private_key
		test	eax, eax
		jz	short loc_6E402B8B
		test	byte ptr [ebp+102h], 8
		jz	short loc_6E402B9B

loc_6E402B8B:				; CODE XREF: sub_6E402830+344j
					; sub_6E402830+350j
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_generate_key
		test	eax, eax
		jz	loc_6E403776

loc_6E402B9B:				; CODE XREF: sub_6E402830+359j
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_group
		mov	esi, eax
		test	eax, eax
		jz	loc_6E40354B
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_public_key
		test	eax, eax
		jz	loc_6E40354B
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_private_key
		test	eax, eax
		jz	loc_6E40354B
		mov	eax, [ebp+58h]
		mov	eax, [eax+344h]
		test	byte ptr [eax+20h], 2
		jz	short loc_6E402BEF
		mov	[esp+0CCh+Str],	esi
		call	EC_GROUP_get_degree
		cmp	eax, 0A3h
		jg	loc_6E403783

loc_6E402BEF:				; CODE XREF: sub_6E402830+3AAj
		mov	[esp+0CCh+Str],	esi
		call	EC_GROUP_get_curve_name
		mov	[esp+0CCh+Str],	eax
		call	sub_6E41AEF0
		mov	[esp+0CCh+var_94], eax
		test	eax, eax
		jz	loc_6E40357E
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_public_key
		mov	[esp+0CCh+var_B8], 0
		mov	[esp+0CCh+var_BC], 0
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+Count], 4
		mov	[esp+0CCh+Source], eax
		mov	[esp+0CCh+Str],	esi
		call	EC_POINT_point2oct
		mov	[esp+0CCh+var_A8], eax
		mov	[esp+0CCh+Count], 720h
		mov	[esp+0CCh+Source], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Str],	eax
		call	CRYPTO_malloc
		mov	[esp+0CCh+var_A4], eax
		call	BN_CTX_new
		mov	edi, eax
		mov	eax, [esp+0CCh+var_A4]
		test	eax, eax
		jz	loc_6E40363C
		test	edi, edi
		jz	loc_6E40363C
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_public_key
		mov	[esp+0CCh+var_B8], edi
		mov	ebx, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_BC], ebx
		mov	ebx, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_C0], ebx
		mov	[esp+0CCh+Count], 4
		mov	[esp+0CCh+Source], eax
		mov	[esp+0CCh+Str],	esi
		call	EC_POINT_point2oct
		mov	[esp+0CCh+var_98], eax
		test	eax, eax
		jz	loc_6E4035B1
		mov	[esp+0CCh+Str],	edi
		call	BN_CTX_free
		mov	eax, [esp+0CCh+var_98]
		lea	ebx, [eax+4]
		mov	[esp+0CCh+var_78], 0
		mov	[esp+0CCh+var_74], 0
		mov	[esp+0CCh+var_70], 0
		mov	[esp+0CCh+var_6C], 0
		mov	edx, [ebp+58h]

loc_6E402CE8:				; CODE XREF: sub_6E402830+A97j
		mov	[esp+0CCh+var_7C], 0
		xor	edi, edi
		jmp	short loc_6E402D1B
; ---------------------------------------------------------------------------
		align 10h

loc_6E402D00:				; CODE XREF: sub_6E402830+EBj
					; sub_6E402830+F7j ...
		mov	[esp+0CCh+var_94], 0
		mov	[esp+0CCh+var_98], 0
		mov	[esp+0CCh+var_A4], 0
		mov	edx, [ebp+58h]

loc_6E402D1B:				; CODE XREF: sub_6E402830+4C2j
					; sub_6E402830+FC0j
		mov	eax, [edx+344h]
		test	dword ptr [eax+10h], 404h
		jnz	short loc_6E402D34
		test	byte ptr [eax+0Dh], 1
		jz	loc_6E403220

loc_6E402D34:				; CODE XREF: sub_6E402830+4F8j
		xor	eax, eax
		mov	[esp+0CCh+var_A8], 0

loc_6E402D3E:				; CODE XREF: sub_6E402830+A18j
		lea	ecx, [ebx+4]
		mov	[esp+0CCh+var_A0], ecx
		add	eax, ecx
		mov	[esp+0CCh+Source], eax
		mov	eax, [esp+0CCh+var_AC]
		mov	[esp+0CCh+Str],	eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		jz	loc_6E403481
		mov	eax, [ebp+3Ch]
		mov	eax, [eax+4]
		mov	[esp+0CCh+var_9C], eax
		add	eax, 4
		mov	[esp+0CCh+var_AC], eax
		mov	[esp+0CCh+var_7C], 0
		test	edi, edi
		jz	loc_6E402941
		test	[esp+0CCh+var_B0], 400h
		jnz	loc_6E402FD0
		mov	edi, eax
		xor	eax, eax
		jmp	short loc_6E402DAC
; ---------------------------------------------------------------------------
		align 10h

loc_6E402DA0:				; CODE XREF: sub_6E402830+5B7j
		mov	ecx, [esp+eax*4+0CCh+var_78]
		test	ecx, ecx
		jz	loc_6E402950

loc_6E402DAC:				; CODE XREF: sub_6E402830+562j
		mov	eax, [esp+eax*4+0CCh+var_68]
		sar	eax, 8
		mov	[edi], al
		mov	eax, [esp+0CCh+var_7C]
		mov	eax, [esp+eax*4+0CCh+var_68]
		mov	[edi+1], al
		add	edi, 2
		mov	[esp+0CCh+Source], edi
		mov	eax, [esp+0CCh+var_7C]
		mov	eax, [esp+eax*4+0CCh+var_78]
		mov	[esp+0CCh+Str],	eax
		call	BN_bn2bin
		mov	eax, [esp+0CCh+var_7C]
		add	edi, [esp+eax*4+0CCh+var_68]
		inc	eax
		mov	[esp+0CCh+var_7C], eax
		cmp	eax, 3
		jle	short loc_6E402DA0
		test	byte ptr [esp+0CCh+var_B0], 80h
		jz	loc_6E40295B

loc_6E402DF4:				; CODE XREF: sub_6E402830+125j
		mov	byte ptr [edi],	3
		mov	byte ptr [edi+1], 0
		mov	al, byte ptr [esp+0CCh+var_94]
		mov	[edi+2], al
		mov	ecx, [esp+0CCh+var_98]
		mov	[edi+3], cl
		lea	eax, [edi+4]
		mov	[esp+0CCh+var_94], eax
		mov	edx, ecx
		mov	esi, [esp+0CCh+var_A4]
		cmp	ecx, 4
		jnb	loc_6E403270

loc_6E402E1F:				; CODE XREF: sub_6E402830+A5Bj
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_6E402E31
		mov	cx, [esi]
		mov	[eax], cx
		mov	ecx, 2

loc_6E402E31:				; CODE XREF: sub_6E402830+5F4j
		and	edx, 1
		jz	short loc_6E402E40
		mov	dl, [esi+ecx]
		mov	[esp+0CCh+var_8D], dl
		mov	[eax+ecx], dl

loc_6E402E40:				; CODE XREF: sub_6E402830+604j
		mov	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+Str],	eax
		call	CRYPTO_free
		mov	edi, [esp+0CCh+var_94]
		add	edi, [esp+0CCh+var_98]
		mov	[esp+0CCh+var_A4], 0
		test	[esp+0CCh+var_B0], 100h
		jz	loc_6E402969

loc_6E402E6A:				; CODE XREF: sub_6E402830+133j
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+0CCh+Str],	eax ; Str
		call	strlen
		shr	eax, 8
		mov	[edi], al
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+0CCh+Str],	eax ; Str
		call	strlen
		mov	[edi+1], al
		lea	esi, [edi+2]
		mov	eax, [ebp+0E4h]
		mov	edi, [eax+14Ch]
		mov	[esp+0CCh+Str],	edi ; Str
		call	strlen
		mov	[esp+0CCh+Count], eax ;	Count
		mov	[esp+0CCh+Source], edi ; Source
		mov	[esp+0CCh+Str],	esi ; Dest
		call	strncpy
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+0CCh+Str],	eax ; Str
		call	strlen
		lea	edi, [esi+eax]
		jmp	loc_6E402969
; ---------------------------------------------------------------------------
		align 10h

loc_6E402EE0:				; CODE XREF: sub_6E402830+300j
		test	[esp+0CCh+var_B0], 100h
		jnz	loc_6E403290
		test	[esp+0CCh+var_B0], 400h
		jz	loc_6E40374C
		mov	edi, [ebp+1A8h]
		test	edi, edi
		jz	loc_6E403719
		mov	ecx, [ebp+1ACh]
		test	ecx, ecx
		jz	loc_6E403719
		mov	edx, [ebp+1B0h]
		test	edx, edx
		jz	loc_6E403719
		mov	eax, [ebp+1B4h]
		test	eax, eax
		jz	loc_6E403719
		mov	[esp+0CCh+var_78], edi
		mov	[esp+0CCh+var_74], ecx
		mov	[esp+0CCh+var_70], edx
		mov	[esp+0CCh+var_6C], eax
		mov	[esp+0CCh+var_7C], 0
		lea	esi, [esi+0]

loc_6E402F50:				; CODE XREF: sub_6E402830+B4j
		mov	ecx, edi
		xor	esi, esi
		xor	ebx, ebx
		jmp	short loc_6E402F82
; ---------------------------------------------------------------------------
		align 10h

loc_6E402F60:				; CODE XREF: sub_6E402830+76Fj
		mov	eax, [esp+esi*4+0CCh+var_68]
		lea	ebx, [ebx+eax+2]
		inc	esi
		mov	[esp+0CCh+var_7C], esi
		cmp	esi, 3
		jg	loc_6E402D00

loc_6E402F76:				; CODE XREF: sub_6E402830+785j
		mov	ecx, [esp+esi*4+0CCh+var_78]
		test	ecx, ecx
		jz	loc_6E402D00

loc_6E402F82:				; CODE XREF: sub_6E402830+726j
		mov	[esp+0CCh+Str],	ecx
		call	BN_num_bits
		mov	edx, eax
		add	edx, 7
		js	short loc_6E402FC0

loc_6E402F91:				; CODE XREF: sub_6E402830+793j
		sar	edx, 3
		mov	[esp+esi*4+0CCh+var_68], edx
		mov	esi, [esp+0CCh+var_7C]
		cmp	esi, 2
		jnz	short loc_6E402F60
		mov	eax, [esp+0CCh+var_60]
		lea	ebx, [ebx+eax+1]
		mov	si, 3
		mov	[esp+0CCh+var_7C], 3
		jmp	short loc_6E402F76
; ---------------------------------------------------------------------------
		align 10h

loc_6E402FC0:				; CODE XREF: sub_6E402830+75Fj
		lea	edx, [eax+0Eh]
		jmp	short loc_6E402F91
; ---------------------------------------------------------------------------
		align 10h

loc_6E402FD0:				; CODE XREF: sub_6E402830+558j
		mov	edi, [esp+0CCh+var_AC]
		xor	eax, eax
		jmp	short loc_6E40302D
; ---------------------------------------------------------------------------
		align 10h

loc_6E402FE0:				; CODE XREF: sub_6E402830+800j
		mov	eax, [esp+eax*4+0CCh+var_68]
		sar	eax, 8
		mov	[edi], al
		mov	eax, [esp+0CCh+var_7C]
		mov	eax, [esp+eax*4+0CCh+var_68]
		mov	[edi+1], al
		add	edi, 2

loc_6E402FF7:				; CODE XREF: sub_6E402830+809j
		mov	[esp+0CCh+Source], edi
		mov	eax, [esp+0CCh+var_7C]
		mov	eax, [esp+eax*4+0CCh+var_78]
		mov	[esp+0CCh+Str],	eax
		call	BN_bn2bin
		mov	eax, [esp+0CCh+var_7C]
		add	edi, [esp+eax*4+0CCh+var_68]
		inc	eax
		mov	[esp+0CCh+var_7C], eax
		cmp	eax, 3
		jg	loc_6E402950
		mov	edx, [esp+eax*4+0CCh+var_78]
		test	edx, edx
		jz	loc_6E402950

loc_6E40302D:				; CODE XREF: sub_6E402830+7A6j
		cmp	eax, 2
		jnz	short loc_6E402FE0
		mov	eax, [esp+0CCh+var_60]
		mov	[edi], al
		inc	edi
		jmp	short loc_6E402FF7
; ---------------------------------------------------------------------------
		align 10h

loc_6E403040:				; CODE XREF: sub_6E402830+2F5j
		mov	eax, [edi+20h]
		test	eax, eax
		jz	loc_6E4033F0

loc_6E40304B:				; CODE XREF: sub_6E402830+BFDj
		mov	ecx, [ebx+348h]
		test	ecx, ecx
		jnz	loc_6E4033C0
		mov	[esp+0CCh+Str],	eax
		call	DHparams_dup
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E4036D9
		mov	eax, [ebp+58h]
		mov	[eax+348h], ebx
		mov	[esp+0CCh+Str],	ebx
		call	DH_generate_key
		test	eax, eax
		jz	loc_6E4035FF
		mov	edi, [ebx+8]
		mov	[esp+0CCh+var_78], edi
		mov	eax, [ebx+0Ch]
		mov	[esp+0CCh+var_74], eax
		mov	eax, [ebx+14h]
		mov	[esp+0CCh+var_70], eax
		jmp	loc_6E4028CC
; ---------------------------------------------------------------------------
		align 10h

loc_6E4030A0:				; CODE XREF: sub_6E402830+148j
		mov	eax, [ebp+0]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	loc_6E4033B0

loc_6E4030B1:				; CODE XREF: sub_6E402830+B8Bj
		mov	[esp+0CCh+var_B0], 2
		mov	[esp+0CCh+var_A0], 0
		lea	esi, [esp+0CCh+var_40]

loc_6E4030C8:				; CODE XREF: sub_6E402830+981j
		mov	[esp+0CCh+Source], 8
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_MD_CTX_set_flags
		mov	eax, [ebp+0E4h]
		cmp	[esp+0CCh+var_B0], 2
		jz	loc_6E4037F5
		mov	eax, [eax+90h]

loc_6E4030F3:				; CODE XREF: sub_6E402830+FCBj
		mov	[esp+0CCh+Count], 0
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestInit_ex
		test	eax, eax
		jle	loc_6E403432
		mov	[esp+0CCh+Count], 20h
		mov	eax, [ebp+58h]
		add	eax, 0C0h
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E403432
		mov	[esp+0CCh+Count], 20h
		mov	eax, [ebp+58h]
		add	eax, 0A0h
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E403432
		mov	[esp+0CCh+Count], ebx
		mov	eax, [esp+0CCh+var_AC]
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E403432
		lea	eax, [esp+0CCh+var_7C]
		mov	[esp+0CCh+Count], eax
		mov	[esp+0CCh+Source], esi
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestFinal_ex
		test	eax, eax
		jle	loc_6E403432
		mov	eax, [esp+0CCh+var_7C]
		add	esi, eax
		add	[esp+0CCh+var_A0], eax
		dec	[esp+0CCh+var_B0]
		jnz	loc_6E4030C8
		mov	eax, [esp+0CCh+var_A8]
		mov	eax, [eax+14h]
		mov	[esp+0CCh+var_B8], eax
		lea	eax, [esp+0CCh+var_84]
		mov	[esp+0CCh+var_BC], eax
		lea	eax, [edi+2]
		mov	[esp+0CCh+var_C0], eax
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+Count], eax
		lea	eax, [esp+0CCh+var_40]
		mov	[esp+0CCh+Source], eax
		mov	[esp+0CCh+Str],	72h
		call	RSA_sign
		test	eax, eax
		jle	loc_6E4036E6
		mov	eax, [esp+0CCh+var_84]
		shr	eax, 8
		mov	[edi], al
		mov	eax, [esp+0CCh+var_84]
		mov	[edi+1], al
		mov	eax, [esp+0CCh+var_84]
		lea	ebx, [ebx+eax+2]
		lea	eax, [ebx+4]
		mov	[esp+0CCh+var_A0], eax
		jmp	loc_6E402ABB
; ---------------------------------------------------------------------------
		align 10h

loc_6E403220:				; CODE XREF: sub_6E402830+4FEj
		lea	edx, [esp+0CCh+var_80]
		mov	[esp+0CCh+Count], edx
		mov	[esp+0CCh+Source], eax
		mov	[esp+0CCh+Str],	ebp
		call	sub_6E434FE0
		mov	[esp+0CCh+var_A8], eax
		test	eax, eax
		jz	loc_6E403632
		mov	[esp+0CCh+Str],	eax
		call	EVP_PKEY_size
		jmp	loc_6E402D3E
; ---------------------------------------------------------------------------
		align 10h

loc_6E403250:				; CODE XREF: sub_6E402830+27Ej
		cmp	eax, 302h
		jle	loc_6E402AB4
		lea	eax, [ebx+6]
		mov	[esp+0CCh+var_A0], eax
		add	ebx, 2
		jmp	loc_6E402ABB
; ---------------------------------------------------------------------------
		align 10h

loc_6E403270:				; CODE XREF: sub_6E402830+5E9j
		test	al, 1
		jnz	loc_6E403513

loc_6E403278:				; CODE XREF: sub_6E402830+CFCj
		test	al, 2
		jnz	loc_6E4034FF

loc_6E403280:				; CODE XREF: sub_6E402830+CDEj
		mov	ecx, edx
		shr	ecx, 2
		mov	edi, eax
		rep movsd
		mov	eax, edi
		jmp	loc_6E402E1F
; ---------------------------------------------------------------------------

loc_6E403290:				; CODE XREF: sub_6E402830+6B8j
		mov	[esp+0CCh+var_A8], edx
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+0CCh+Str],	eax ; Str
		call	strlen
		lea	ebx, [eax+2]
		mov	[esp+0CCh+var_94], 0
		mov	[esp+0CCh+var_98], 0
		mov	[esp+0CCh+var_A4], 0
		mov	edx, [esp+0CCh+var_A8]
		jmp	loc_6E402CE8
; ---------------------------------------------------------------------------
		align 10h

loc_6E4032D0:				; CODE XREF: sub_6E402830+7Ej
		mov	edx, [edi+1Ch]
		test	edx, edx
		jz	loc_6E4034B4
		mov	ecx, [ecx+20h]
		mov	eax, ecx
		and	eax, 8
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 200h
		add	eax, 200h
		mov	[esp+0CCh+Count], eax
		and	ecx, 2
		mov	[esp+0CCh+Source], ecx
		mov	[esp+0CCh+Str],	ebp
		call	edx
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E4037B6
		mov	[esp+0CCh+Str],	eax
		call	RSA_up_ref
		mov	[edi+18h], ebx
		mov	edx, [ebp+58h]
		jmp	loc_6E4028B4
; ---------------------------------------------------------------------------
		align 10h

loc_6E403320:				; CODE XREF: sub_6E402830+1BAj
					; sub_6E402830+1E2j ...
		mov	[esp+0CCh+var_BC], 7F3h

loc_6E403328:				; CODE XREF: sub_6E402830+C0Aj
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 6
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		mov	eax, 50h

loc_6E403351:				; CODE XREF: sub_6E402830+CBDj
					; sub_6E402830+E07j ...
		mov	[esp+0CCh+Count], eax
		mov	[esp+0CCh+Source], 2
		mov	[esp+0CCh+Str],	ebp
		call	sub_6E4151B0
		xor	edi, edi

loc_6E403367:				; CODE XREF: sub_6E402830+C7Fj
					; sub_6E402830+E38j ...
		mov	eax, [esp+0CCh+var_A4]
		test	eax, eax
		jz	short loc_6E40337B

loc_6E40336F:				; CODE XREF: sub_6E402830+DADj
		mov	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+Str],	eax
		call	CRYPTO_free

loc_6E40337B:				; CODE XREF: sub_6E402830+B3Dj
					; sub_6E402830+BBEj ...
		mov	[esp+0CCh+Str],	edi
		call	BN_CTX_free
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_MD_CTX_cleanup
		mov	dword ptr [ebp+34h], 5
		mov	eax, 0FFFFFFFFh
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4033B0:				; CODE XREF: sub_6E402830+87Bj
		cmp	eax, 302h
		jg	loc_6E40297E
		jmp	loc_6E4030B1
; ---------------------------------------------------------------------------

loc_6E4033C0:				; CODE XREF: sub_6E402830+823j
		mov	[esp+0CCh+var_BC], 6BAh

loc_6E4033C8:				; CODE XREF: sub_6E402830+CCAj
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 44h
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	short loc_6E40337B
; ---------------------------------------------------------------------------

loc_6E4033F0:				; CODE XREF: sub_6E402830+815j
		mov	edx, [edi+24h]
		test	edx, edx
		jz	loc_6E403531
		mov	ecx, [ecx+20h]
		mov	eax, ecx
		and	eax, 8
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 200h
		add	eax, 200h
		mov	[esp+0CCh+Count], eax
		and	ecx, 2
		mov	[esp+0CCh+Source], ecx
		mov	[esp+0CCh+Str],	ebp
		call	edx
		test	eax, eax
		jz	loc_6E403531
		mov	ebx, [ebp+58h]
		jmp	loc_6E40304B
; ---------------------------------------------------------------------------

loc_6E403432:				; CODE XREF: sub_6E402830+8DDj
					; sub_6E402830+905j ...
		mov	[esp+0CCh+var_BC], 7CAh
		jmp	loc_6E403328
; ---------------------------------------------------------------------------

loc_6E40343F:				; CODE XREF: sub_6E402830+30Bj
		mov	edx, [edi+2Ch]
		test	edx, edx
		jz	loc_6E4035E2
		mov	ecx, [ecx+20h]
		mov	eax, ecx
		and	eax, 8
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 200h
		add	eax, 200h
		mov	[esp+0CCh+Count], eax
		and	ecx, 2
		mov	[esp+0CCh+Source], ecx
		mov	[esp+0CCh+Str],	ebp
		call	edx
		test	eax, eax
		jz	loc_6E4035E2
		mov	ebx, [ebp+58h]
		jmp	loc_6E402B41
; ---------------------------------------------------------------------------

loc_6E403481:				; CODE XREF: sub_6E402830+529j
		mov	[esp+0CCh+var_BC], 77Ch
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 7
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E403367
; ---------------------------------------------------------------------------

loc_6E4034B4:				; CODE XREF: sub_6E402830+AA5j
		mov	[esp+0CCh+var_BC], 6A0h
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 0ACh

loc_6E4034CC:				; CODE XREF: sub_6E402830+D19j
					; sub_6E402830+DCAj ...
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		mov	eax, 28h
		mov	[esp+0CCh+var_A4], 0
		jmp	loc_6E403351
; ---------------------------------------------------------------------------

loc_6E4034F2:				; CODE XREF: sub_6E402830+319j
		mov	[esp+0CCh+var_BC], 6E2h
		jmp	loc_6E4033C8
; ---------------------------------------------------------------------------

loc_6E4034FF:				; CODE XREF: sub_6E402830+A4Aj
		mov	cx, [esi]
		mov	[eax], cx
		add	eax, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E403280
; ---------------------------------------------------------------------------

loc_6E403513:				; CODE XREF: sub_6E402830+A42j
		mov	al, [esi]
		mov	[esp+0CCh+var_8D], al
		mov	edx, [esp+0CCh+var_94]
		mov	[edx], al
		lea	eax, [edi+5]
		lea	esi, [esi+1]
		mov	ecx, [esp+0CCh+var_98]
		lea	edx, [ecx-1]
		jmp	loc_6E403278
; ---------------------------------------------------------------------------

loc_6E403531:				; CODE XREF: sub_6E402830+BC5j
					; sub_6E402830+BF4j
		mov	[esp+0CCh+var_BC], 6B4h
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 0ABh
		jmp	short loc_6E4034CC
; ---------------------------------------------------------------------------

loc_6E40354B:				; CODE XREF: sub_6E402830+377j
					; sub_6E402830+387j ...
		mov	[esp+0CCh+var_BC], 6FEh

loc_6E403553:				; CODE XREF: sub_6E402830+F41j
					; sub_6E402830+F4Ej
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 2Bh
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E40337B
; ---------------------------------------------------------------------------

loc_6E40357E:				; CODE XREF: sub_6E402830+3D5j
		mov	[esp+0CCh+var_BC], 712h
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 13Bh
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E40337B
; ---------------------------------------------------------------------------

loc_6E4035B1:				; CODE XREF: sub_6E402830+480j
		mov	[esp+0CCh+var_BC], 72Eh
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 2Bh
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		jmp	loc_6E40336F
; ---------------------------------------------------------------------------

loc_6E4035E2:				; CODE XREF: sub_6E402830+C14j
					; sub_6E402830+C43j
		mov	[esp+0CCh+var_BC], 6DCh
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 137h
		jmp	loc_6E4034CC
; ---------------------------------------------------------------------------

loc_6E4035FF:				; CODE XREF: sub_6E402830+84Ej
		mov	[esp+0CCh+var_BC], 6C5h

loc_6E403607:				; CODE XREF: sub_6E402830+EB1j
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 5
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E40337B
; ---------------------------------------------------------------------------

loc_6E403632:				; CODE XREF: sub_6E402830+A0Aj
		mov	eax, 32h
		jmp	loc_6E403351
; ---------------------------------------------------------------------------

loc_6E40363C:				; CODE XREF: sub_6E402830+43Cj
					; sub_6E402830+444j
		mov	[esp+0CCh+var_BC], 724h
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 41h
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		jmp	loc_6E403367
; ---------------------------------------------------------------------------

loc_6E40366D:				; CODE XREF: sub_6E402830+154j
		mov	[esp+0CCh+var_BC], 7FFh
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 0FBh
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		mov	eax, 28h
		jmp	loc_6E403351
; ---------------------------------------------------------------------------

loc_6E4036A3:				; CODE XREF: sub_6E402830+185j
		mov	[esp+0CCh+var_BC], 7E3h
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 44h
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		mov	eax, 50h
		jmp	loc_6E403351
; ---------------------------------------------------------------------------

loc_6E4036D9:				; CODE XREF: sub_6E402830+835j
		mov	[esp+0CCh+var_BC], 6BFh
		jmp	loc_6E403607
; ---------------------------------------------------------------------------

loc_6E4036E6:				; CODE XREF: sub_6E402830+9C2j
		mov	[esp+0CCh+var_BC], 7D3h
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 4
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E403367
; ---------------------------------------------------------------------------

loc_6E403719:				; CODE XREF: sub_6E402830+6D4j
					; sub_6E402830+6E2j ...
		mov	[esp+0CCh+var_BC], 755h
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 166h
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E40337B
; ---------------------------------------------------------------------------

loc_6E40374C:				; CODE XREF: sub_6E402830+6C6j
		mov	[esp+0CCh+var_BC], 761h
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 0FAh
		jmp	loc_6E4034CC
; ---------------------------------------------------------------------------

loc_6E403769:				; CODE XREF: sub_6E402830+32Bj
		mov	[esp+0CCh+var_BC], 6ECh
		jmp	loc_6E403553
; ---------------------------------------------------------------------------

loc_6E403776:				; CODE XREF: sub_6E402830+365j
		mov	[esp+0CCh+var_BC], 6F6h
		jmp	loc_6E403553
; ---------------------------------------------------------------------------

loc_6E403783:				; CODE XREF: sub_6E402830+3B9j
		mov	[esp+0CCh+var_BC], 705h
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 136h
		mov	[esp+0CCh+Source], 9Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E40337B
; ---------------------------------------------------------------------------

loc_6E4037B6:				; CODE XREF: sub_6E402830+AD6j
		mov	[esp+0CCh+var_BC], 697h
		mov	[esp+0CCh+var_C0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0CCh+Count], 11Ah
		jmp	loc_6E4034CC
; ---------------------------------------------------------------------------

loc_6E4037D3:				; CODE XREF: sub_6E402830+A6j
		mov	[esp+0CCh+var_94], 0
		mov	[esp+0CCh+var_98], 0
		mov	[esp+0CCh+var_A4], 0
		xor	ebx, ebx
		mov	edx, [ebp+58h]
		jmp	loc_6E402D1B
; ---------------------------------------------------------------------------

loc_6E4037F5:				; CODE XREF: sub_6E402830+8B7j
		mov	eax, [eax+8Ch]
		jmp	loc_6E4030F3
sub_6E402830	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E403800	proc near		; CODE XREF: sub_6E406650+89Cp

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [esp+5Ch+arg_0]
		cmp	dword ptr [eax+34h], 2160h
		jz	short loc_6E403830

loc_6E403814:				; CODE XREF: sub_6E403800+229j
		mov	[esp+5Ch+var_58], 16h
		mov	[esp+5Ch+var_5C], eax
		call	sub_6E4157D0
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E403830:				; CODE XREF: sub_6E403800+12j
		mov	edi, [eax+3Ch]
		mov	ebx, [edi+4]
		lea	eax, [ebx+5]
		mov	[esp+5Ch+var_20], eax
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_5C], eax
		call	sub_6E410000
		mov	[ebx+4], al
		mov	edx, [esp+5Ch+var_20]
		add	edx, eax
		mov	[esp+5Ch+var_20], edx
		inc	eax
		mov	[esp+5Ch+var_30], eax
		mov	eax, [esp+5Ch+arg_0]
		mov	eax, [eax]
		mov	ecx, eax
		sar	ecx, 8
		cmp	ecx, 3
		jz	loc_6E403AC0

loc_6E403873:				; CODE XREF: sub_6E403800+2C5j
					; sub_6E403800+2FFj
		add	edx, 2
		mov	[esp+5Ch+var_20], edx
		mov	eax, [esp+5Ch+var_30]
		add	eax, 2
		mov	[esp+5Ch+var_40], eax
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_5C], eax
		call	SSL_get_client_CA_list
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E403B04
		mov	[esp+5Ch+var_34], 0
		xor	esi, esi
		mov	[esp+5Ch+var_5C], ebp
		call	sk_num
		cmp	esi, eax
		jge	loc_6E403964
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4038C0:				; CODE XREF: sub_6E403800+15Ej
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], ebp
		call	sk_value
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], eax
		mov	[esp+5Ch+var_38], eax
		call	i2d_X509_NAME
		mov	ebx, eax
		mov	eax, [esp+5Ch+var_40]
		lea	edx, [eax+4]
		lea	eax, [ebx+edx+2]
		mov	[esp+5Ch+var_3C], edx
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	BUF_MEM_grow_clean
		test	eax, eax
		mov	edx, [esp+5Ch+var_3C]
		mov	ecx, [esp+5Ch+var_38]
		jz	loc_6E403A70
		add	edx, [edi+4]
		mov	[esp+5Ch+var_20], edx
		mov	eax, [esp+5Ch+arg_0]
		test	byte ptr [eax+103h], 20h
		jnz	loc_6E403A30
		mov	eax, ebx
		sar	eax, 8
		mov	[edx], al
		mov	eax, [esp+5Ch+var_20]
		mov	[eax+1], bl
		add	[esp+5Ch+var_20], 2
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ecx
		call	i2d_X509_NAME
		add	ebx, 2
		add	[esp+5Ch+var_40], ebx
		add	[esp+5Ch+var_34], ebx
		inc	esi

loc_6E403954:				; CODE XREF: sub_6E403800+25Ej
		mov	[esp+5Ch+var_5C], ebp
		call	sk_num
		cmp	esi, eax
		jl	loc_6E4038C0

loc_6E403964:				; CODE XREF: sub_6E403800+AFj
		mov	esi, [esp+5Ch+var_34]
		mov	eax, esi
		shr	eax, 8
		mov	ecx, eax
		mov	edx, esi

loc_6E403971:				; CODE XREF: sub_6E403800+308j
		mov	eax, [edi+4]
		mov	esi, [esp+5Ch+var_30]
		lea	eax, [eax+esi+4]
		mov	[esp+5Ch+var_20], eax
		mov	[eax], cl
		mov	eax, [esp+5Ch+var_20]
		mov	[eax+1], dl
		add	[esp+5Ch+var_20], 2
		mov	eax, [edi+4]
		mov	byte ptr [eax],	0Dh
		mov	esi, [esp+5Ch+var_40]
		mov	edx, esi
		sar	edx, 10h
		mov	[eax+1], dl
		mov	edx, esi
		sar	edx, 8
		mov	[eax+2], dl
		mov	ecx, esi
		mov	[eax+3], cl
		mov	edx, esi
		lea	eax, [esi+4]
		mov	esi, [esp+5Ch+arg_0]
		mov	[esi+44h], eax
		mov	dword ptr [esi+48h], 0
		lea	eax, [edx+8]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	BUF_MEM_grow_clean
		test	eax, eax
		jz	loc_6E403B0D
		mov	eax, [esp+5Ch+arg_0]
		mov	eax, [eax+3Ch]
		mov	eax, [eax+4]
		mov	edi, [esp+5Ch+arg_0]
		add	eax, [edi+44h]
		lea	edx, [eax+1]
		mov	[esp+5Ch+var_20], edx
		mov	byte ptr [eax],	0Eh
		mov	eax, [esp+5Ch+var_20]
		lea	edx, [eax+1]
		mov	[esp+5Ch+var_20], edx
		mov	byte ptr [eax],	0
		mov	eax, [esp+5Ch+var_20]
		lea	edx, [eax+1]
		mov	[esp+5Ch+var_20], edx
		mov	byte ptr [eax],	0
		mov	eax, [esp+5Ch+var_20]
		lea	edx, [eax+1]
		mov	[esp+5Ch+var_20], edx
		mov	byte ptr [eax],	0
		add	dword ptr [edi+44h], 4
		mov	dword ptr [edi+34h], 2161h
		mov	eax, edi
		jmp	loc_6E403814
; ---------------------------------------------------------------------------
		align 10h

loc_6E403A30:				; CODE XREF: sub_6E403800+11Fj
		mov	[esp+5Ch+var_3C], edx
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ecx
		call	i2d_X509_NAME
		lea	eax, [ebx-2]
		mov	ecx, eax
		sar	ecx, 8
		mov	edx, [esp+5Ch+var_3C]
		mov	[edx], cl
		mov	[edx+1], al
		add	[esp+5Ch+var_40], ebx
		add	[esp+5Ch+var_34], ebx
		inc	esi
		jmp	loc_6E403954
; ---------------------------------------------------------------------------
		align 10h

loc_6E403A70:				; CODE XREF: sub_6E403800+107j
		mov	[esp+5Ch+var_4C], 845h

loc_6E403A78:				; CODE XREF: sub_6E403800+315j
		mov	[esp+5Ch+var_50], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+5Ch+var_54], 7
		mov	[esp+5Ch+var_58], 96h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+arg_0]
		mov	dword ptr [eax+34h], 5
		mov	eax, 0FFFFFFFFh
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E403AC0:				; CODE XREF: sub_6E403800+6Dj
		cmp	eax, 302h
		jle	loc_6E403873
		add	edx, 2
		mov	[esp+5Ch+var_58], edx
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_5C], eax
		call	sub_6E41B1A0
		mov	ecx, eax
		sar	ecx, 8
		mov	edx, [esp+5Ch+var_20]
		mov	[edx], cl
		mov	edx, [esp+5Ch+var_20]
		mov	[edx+1], al
		add	eax, 2
		add	[esp+5Ch+var_30], eax
		mov	edx, [esp+5Ch+var_20]
		lea	edx, [edx+eax+2]
		jmp	loc_6E403873
; ---------------------------------------------------------------------------

loc_6E403B04:				; CODE XREF: sub_6E403800+95j
		xor	edx, edx
		xor	ecx, ecx
		jmp	loc_6E403971
; ---------------------------------------------------------------------------

loc_6E403B0D:				; CODE XREF: sub_6E403800+1D1j
		mov	[esp+5Ch+var_4C], 869h
		jmp	loc_6E403A78
sub_6E403800	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E403B20	proc near		; CODE XREF: sub_6E406650+1D2p
					; sub_6E4239E0+AB6p

Dst		= dword	ptr -2ECh
Src		= dword	ptr -2E8h
Size		= dword	ptr -2E4h
var_2E0		= dword	ptr -2E0h
var_2DC		= dword	ptr -2DCh
var_2D8		= dword	ptr -2D8h
var_2CC		= dword	ptr -2CCh
var_2C8		= dword	ptr -2C8h
var_2C4		= dword	ptr -2C4h
var_2C0		= dword	ptr -2C0h
var_2B8		= dword	ptr -2B8h
var_2B4		= dword	ptr -2B4h
var_2B0		= dword	ptr -2B0h
var_2AC		= dword	ptr -2ACh
var_2A8		= dword	ptr -2A8h
var_2A4		= dword	ptr -2A4h
var_220		= byte ptr -220h
var_21F		= byte ptr -21Fh
var_21E		= word ptr -21Eh
var_21C		= byte ptr -21Ch
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2DCh
		mov	ebp, [esp+2ECh+arg_0]
		mov	eax, [ebp+8]
		mov	eax, [eax+30h]
		lea	edx, [esp+2ECh+var_2B8]
		mov	[esp+2ECh+var_2D8], edx
		mov	[esp+2ECh+var_2DC], 800h
		mov	[esp+2ECh+var_2E0], 10h
		mov	[esp+2ECh+Size], 2191h
		mov	[esp+2ECh+Src],	2190h
		mov	[esp+2ECh+Dst],	ebp
		call	eax
		mov	edi, eax
		mov	ecx, [esp+2ECh+var_2B8]
		test	ecx, ecx
		jz	loc_6E403D5F
		mov	eax, [ebp+40h]
		mov	[esp+2ECh+var_2B4], eax
		mov	edx, [ebp+58h]
		mov	ecx, [edx+344h]
		mov	ebx, [ecx+0Ch]
		test	bl, 1
		jz	loc_6E403D70
		mov	edx, [edx+370h]
		test	edx, edx
		mov	edx, [ebp+98h]
		jnz	loc_6E403E70
		mov	edx, [edx+34h]
		test	edx, edx
		jz	loc_6E40444D
		cmp	dword ptr [edx], 6
		jnz	loc_6E40444D
		mov	esi, [edx+14h]
		test	esi, esi
		jz	loc_6E40444D

loc_6E403BC1:				; CODE XREF: sub_6E403B20+359j
		cmp	dword ptr [ebp+0], 300h
		jle	short loc_6E403BFB
		xor	edx, edx
		mov	dl, [eax]
		shl	edx, 8
		xor	ecx, ecx
		mov	cl, [eax+1]
		or	edx, ecx
		lea	ecx, [eax+2]
		mov	[esp+2ECh+var_2B4], ecx
		lea	ecx, [edx+2]
		cmp	ecx, edi
		jz	loc_6E404438
		test	byte ptr [ebp+101h], 1
		jz	loc_6E404A46
		mov	[esp+2ECh+var_2B4], eax

loc_6E403BFB:				; CODE XREF: sub_6E403B20+A8j
					; sub_6E403B20+91Aj
		cmp	edi, 2Fh
		jle	loc_6E40449D
		mov	[esp+2ECh+Src],	30h
		lea	ebx, [esp+2ECh+var_220]
		mov	[esp+2ECh+Dst],	ebx
		call	RAND_pseudo_bytes
		test	eax, eax
		jle	loc_6E403F5A
		mov	eax, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+var_2DC], 1
		mov	[esp+2ECh+var_2E0], esi
		mov	[esp+2ECh+Size], eax
		mov	[esp+2ECh+Src],	eax
		mov	[esp+2ECh+Dst],	edi
		call	RSA_private_decrypt
		mov	esi, eax
		call	ERR_clear_error
		mov	eax, esi
		xor	eax, 30h
		lea	edx, [eax-1]
		not	eax
		and	edx, eax
		sar	edx, 1Fh
		mov	[esp+2ECh+var_2CC], edx
		mov	edx, [ebp+110h]
		mov	esi, [esp+2ECh+var_2B4]
		xor	eax, eax
		mov	al, [esi]
		mov	ecx, eax
		mov	[esp+2ECh+var_2C8], ecx
		mov	eax, edx
		sar	eax, 8
		xor	eax, ecx
		xor	ecx, ecx
		mov	cl, [esi+1]
		and	edx, 0FFh
		xor	edx, ecx
		lea	edi, [edx-1]
		not	edx
		and	edi, edx
		sar	edi, 1Fh
		lea	edx, [eax-1]
		not	eax
		and	edx, eax
		sar	edx, 1Fh
		and	edi, edx
		test	byte ptr [ebp+102h], 80h
		jz	short loc_6E403CD0
		mov	edx, [ebp+0]
		mov	eax, edx
		sar	eax, 8
		xor	eax, [esp+2ECh+var_2C8]
		and	edx, 0FFh
		xor	edx, ecx
		lea	ecx, [edx-1]
		not	edx
		and	ecx, edx
		sar	ecx, 1Fh
		lea	edx, [eax-1]
		not	eax
		and	edx, eax
		sar	edx, 1Fh
		and	ecx, edx
		or	edi, ecx

loc_6E403CD0:				; CODE XREF: sub_6E403B20+182j
		mov	al, byte ptr [esp+2ECh+var_2CC]
		and	eax, edi
		mov	cl, al
		mov	edi, eax
		and	edi, 0FFh
		not	edi
		xor	eax, eax
		mov	[esp+2ECh+arg_0], ebp
		mov	ebp, ecx
		jmp	short loc_6E403CF4
; ---------------------------------------------------------------------------
		align 10h

loc_6E403CF0:				; CODE XREF: sub_6E403B20+1EFj
		mov	esi, [esp+2ECh+var_2B4]

loc_6E403CF4:				; CODE XREF: sub_6E403B20+1CDj
		add	esi, eax
		mov	edx, ebp
		and	dl, [esi]
		and	edx, 0FFh
		xor	ecx, ecx
		mov	cl, [ebx+eax]
		and	ecx, edi
		or	edx, ecx
		mov	[esi], dl
		inc	eax
		cmp	eax, 30h
		jnz	short loc_6E403CF0
		mov	ebp, [esp+2ECh+arg_0]
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	ebx, [ebp+0C0h]
		mov	[esp+2ECh+var_2E0], 30h
		mov	edx, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+Size], edx
		lea	edx, [ebx+14h]
		mov	[esp+2ECh+Src],	edx
		mov	[esp+2ECh+Dst],	ebp
		call	eax
		mov	[ebx+10h], eax
		mov	[esp+2ECh+Src],	30h
		mov	eax, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+Dst],	eax
		call	OPENSSL_cleanse
		mov	eax, 1

loc_6E403D5F:				; CODE XREF: sub_6E403B20+4Cj
					; sub_6E403B20+468j ...
		add	esp, 2DCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E403D70:				; CODE XREF: sub_6E403B20+68j
		test	bl, 0Eh
		jz	loc_6E403EC0
		xor	ecx, ecx
		mov	cl, [eax]
		shl	ecx, 8
		xor	ebx, ebx
		mov	bl, [eax+1]
		or	ecx, ebx
		lea	ebx, [eax+2]
		mov	[esp+2ECh+var_2B4], ebx
		lea	esi, [ecx+2]
		cmp	esi, edi
		jz	loc_6E40442F
		test	byte ptr [ebp+100h], 80h
		jz	loc_6E404B06
		mov	[esp+2ECh+var_2B4], eax
		test	edi, edi
		jz	loc_6E404974

loc_6E403DB2:				; CODE XREF: sub_6E403B20+913j
		mov	esi, [edx+348h]
		test	esi, esi
		jz	loc_6E4049DB
		mov	[esp+2ECh+Size], 0
		mov	[esp+2ECh+Src],	edi
		mov	[esp+2ECh+Dst],	eax
		call	BN_bin2bn
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E4049AA
		mov	[esp+2ECh+Size], esi
		mov	[esp+2ECh+Src],	eax
		mov	eax, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+Dst],	eax
		call	DH_compute_key
		mov	esi, eax
		test	eax, eax
		jle	loc_6E4048D0
		mov	eax, [ebp+58h]
		mov	eax, [eax+348h]
		mov	[esp+2ECh+Dst],	eax
		call	DH_free
		mov	eax, [ebp+58h]
		mov	dword ptr [eax+348h], 0
		mov	[esp+2ECh+Dst],	ebx
		call	BN_clear_free
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	ebx, [ebp+0C0h]
		mov	[esp+2ECh+var_2E0], esi
		mov	edx, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+Size], edx
		lea	edx, [ebx+14h]
		mov	[esp+2ECh+Src],	edx
		mov	[esp+2ECh+Dst],	ebp
		call	eax
		mov	[ebx+10h], eax
		mov	[esp+2ECh+Src],	esi
		mov	eax, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+Dst],	eax
		call	OPENSSL_cleanse
		mov	eax, 1
		add	esp, 2DCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E403E70:				; CODE XREF: sub_6E403B20+7Cj
		test	edx, edx
		jz	short loc_6E403E7F
		mov	esi, [edx+18h]
		test	esi, esi
		jnz	loc_6E403BC1

loc_6E403E7F:				; CODE XREF: sub_6E403B20+352j
		mov	[esp+2ECh+var_2DC], 8B5h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 0ADh
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 28h
		jmp	loc_6E403F46
; ---------------------------------------------------------------------------
		align 10h

loc_6E403EC0:				; CODE XREF: sub_6E403B20+253j
		test	bl, 0E0h
		jnz	loc_6E404267
		test	bh, 1
		jz	loc_6E403F8D
		xor	ebx, ebx
		mov	bl, [eax]
		mov	[esp+2ECh+var_2CC], ebx
		shl	[esp+2ECh+var_2CC], 8
		xor	edx, edx
		mov	dl, [eax+1]
		or	[esp+2ECh+var_2CC], edx
		add	eax, 2
		mov	[esp+2ECh+var_2B4], eax
		mov	ebx, [esp+2ECh+var_2CC]
		lea	edx, [ebx+2]
		cmp	edx, edi
		jz	loc_6E404164
		mov	[esp+2ECh+var_2DC], 0ABCh
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 9Fh

loc_6E403F16:				; CODE XREF: sub_6E403B20+A37j
					; sub_6E403B20+E37j
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 28h
		lea	ebx, [esp+2ECh+var_220]

loc_6E403F36:				; CODE XREF: sub_6E403B20+742j
					; sub_6E403B20+C1Dj ...
		mov	[esp+2ECh+Src],	204h
		mov	[esp+2ECh+Dst],	ebx
		call	OPENSSL_cleanse

loc_6E403F46:				; CODE XREF: sub_6E403B20+390j
					; sub_6E403B20+95Ej ...
		mov	[esp+2ECh+Size], esi
		mov	[esp+2ECh+Src],	2
		mov	[esp+2ECh+Dst],	ebp
		call	sub_6E4151B0

loc_6E403F5A:				; CODE XREF: sub_6E403B20+FDj
					; sub_6E403B20+568j ...
		mov	[esp+2ECh+Dst],	0
		call	EVP_PKEY_free
		mov	[esp+2ECh+Dst],	0
		call	EC_POINT_free
		xor	ebx, ebx

loc_6E403F74:				; CODE XREF: sub_6E403B20+C7Aj
		mov	[esp+2ECh+Dst],	ebx
		call	BN_CTX_free
		mov	dword ptr [ebp+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E403D5F
; ---------------------------------------------------------------------------

loc_6E403F8D:				; CODE XREF: sub_6E403B20+3ACj
		test	bh, 4
		jnz	loc_6E40408D
		and	bh, 2
		jz	loc_6E404C1B
		mov	[esp+2ECh+var_2B0], 20h
		mov	eax, [ecx+10h]
		test	ah, 1
		jz	loc_6E404483
		mov	eax, [ebp+98h]
		mov	eax, [eax+7Ch]

loc_6E403FBC:				; CODE XREF: sub_6E403B20+978j
					; sub_6E403B20+A71j
		mov	[esp+2ECh+Src],	0
		mov	[esp+2ECh+Dst],	eax
		call	EVP_PKEY_CTX_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E404B37
		mov	[esp+2ECh+Dst],	eax
		call	EVP_PKEY_decrypt_init
		test	eax, eax
		jle	loc_6E40455C
		mov	eax, [ebp+0C0h]
		mov	eax, [eax+9Ch]
		mov	[esp+2ECh+Dst],	eax
		call	X509_get_pubkey
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E404014
		mov	[esp+2ECh+Src],	eax
		mov	[esp+2ECh+Dst],	ebx
		call	EVP_PKEY_derive_set_peer
		test	eax, eax
		jle	loc_6E404AAF

loc_6E404014:				; CODE XREF: sub_6E403B20+4DEj
					; sub_6E403B20+F94j
		mov	[esp+2ECh+var_2DC], edi
		lea	eax, [esp+2ECh+var_2A8]
		mov	[esp+2ECh+var_2E0], eax
		lea	eax, [esp+2ECh+var_2AC]
		mov	[esp+2ECh+Size], eax
		lea	eax, [esp+2ECh+var_2A4]
		mov	[esp+2ECh+Src],	eax
		lea	eax, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+Dst],	eax
		call	ASN1_get_object
		cmp	eax, 20h
		jnz	short loc_6E40404C
		cmp	[esp+2ECh+var_2AC], 10h
		jz	loc_6E4047FB

loc_6E40404C:				; CODE XREF: sub_6E403B20+51Fj
					; sub_6E403B20+CE1j
		mov	[esp+2ECh+var_2DC], 0B5Dh

loc_6E404054:				; CODE XREF: sub_6E403B20+125Aj
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 93h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error

loc_6E404078:				; CODE XREF: sub_6E403B20+A6Aj
		mov	[esp+2ECh+Dst],	esi
		call	EVP_PKEY_free
		mov	[esp+2ECh+Dst],	ebx
		call	EVP_PKEY_CTX_free
		jmp	loc_6E403F5A
; ---------------------------------------------------------------------------

loc_6E40408D:				; CODE XREF: sub_6E403B20+470j
		xor	edx, edx
		mov	dl, [eax]
		shl	edx, 8
		xor	ecx, ecx
		mov	cl, [eax+1]
		or	edx, ecx
		add	eax, 2
		mov	[esp+2ECh+var_2B4], eax
		lea	ecx, [edx+2]
		cmp	edi, ecx
		jl	loc_6E404A10
		mov	[esp+2ECh+Size], 0
		mov	[esp+2ECh+Src],	edx
		mov	[esp+2ECh+Dst],	eax
		call	BN_bin2bn
		mov	[ebp+1B8h], eax
		test	eax, eax
		jz	loc_6E404CC6
		mov	edx, [ebp+1A8h]
		mov	[esp+2ECh+Src],	edx
		mov	[esp+2ECh+Dst],	eax
		call	BN_ucmp
		test	eax, eax
		jns	loc_6E404909
		mov	eax, [ebp+1B8h]
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	loc_6E404909
		mov	ebx, [ebp+0C0h]
		mov	eax, [ebx+0F0h]
		test	eax, eax
		jz	short loc_6E404118
		mov	[esp+2ECh+Dst],	eax
		call	CRYPTO_free
		mov	ebx, [ebp+0C0h]

loc_6E404118:				; CODE XREF: sub_6E403B20+5E8j
		mov	eax, [ebp+1A4h]
		mov	[esp+2ECh+Dst],	eax
		call	BUF_strdup
		mov	[ebx+0F0h], eax
		mov	ebx, [ebp+0C0h]
		mov	edx, [ebx+0F0h]
		test	edx, edx
		jz	loc_6E404BB7
		lea	eax, [ebx+14h]
		mov	[esp+2ECh+Src],	eax
		mov	[esp+2ECh+Dst],	ebp
		call	SRP_generate_server_master_secret
		mov	[ebx+10h], eax
		test	eax, eax
		js	loc_6E404B86
		mov	eax, 1
		jmp	loc_6E403D5F
; ---------------------------------------------------------------------------

loc_6E404164:				; CODE XREF: sub_6E403B20+3D8j
		cmp	[esp+2ECh+var_2CC], 80h
		jg	loc_6E40453F
		mov	edx, [ebp+0E0h]
		test	edx, edx
		jz	loc_6E40493F
		lea	edi, [esp+2ECh+var_2A4]
		mov	esi, eax
		cmp	[esp+2ECh+var_2CC], 4
		jb	short loc_6E404196
		mov	ecx, [esp+2ECh+var_2CC]
		shr	ecx, 2
		rep movsd

loc_6E404196:				; CODE XREF: sub_6E403B20+66Bj
		xor	eax, eax
		test	byte ptr [esp+2ECh+var_2CC], 2
		jz	short loc_6E4041AA
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2

loc_6E4041AA:				; CODE XREF: sub_6E403B20+67Dj
		test	byte ptr [esp+2ECh+var_2CC], 1
		jz	short loc_6E4041BB
		mov	bl, [esi+eax]
		mov	byte ptr [esp+2ECh+var_2C8], bl
		mov	[edi+eax], bl

loc_6E4041BB:				; CODE XREF: sub_6E403B20+68Fj
		mov	ebx, 81h
		mov	eax, [esp+2ECh+var_2CC]
		sub	ebx, eax
		lea	edi, [esp+eax+2ECh+var_2A4]
		cmp	ebx, 4
		jnb	loc_6E404596

loc_6E4041D3:				; CODE XREF: sub_6E403B20+A97j
		test	bl, 2
		jz	short loc_6E4041E0
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E4041E0:				; CODE XREF: sub_6E403B20+6B6j
		and	ebx, 1
		jz	short loc_6E4041E8
		mov	byte ptr [edi],	0

loc_6E4041E8:				; CODE XREF: sub_6E403B20+6C3j
		mov	[esp+2ECh+var_2E0], 204h
		lea	ebx, [esp+2ECh+var_220]
		mov	[esp+2ECh+Size], ebx
		lea	eax, [esp+2ECh+var_2A4]
		mov	[esp+2ECh+Src],	eax
		mov	[esp+2ECh+Dst],	ebp
		call	edx
		mov	esi, eax
		mov	[esp+2ECh+Src],	81h
		lea	eax, [esp+2ECh+var_2A4]
		mov	[esp+2ECh+Dst],	eax
		call	OPENSSL_cleanse
		cmp	esi, 100h
		ja	loc_6E40470C
		test	esi, esi
		jnz	loc_6E4045BC
		mov	[esp+2ECh+var_2DC], 0ADCh
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 0DFh
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	si, 73h
		jmp	loc_6E403F36
; ---------------------------------------------------------------------------

loc_6E404267:				; CODE XREF: sub_6E403B20+3A3j
		call	EC_KEY_new
		mov	[esp+2ECh+var_2CC], eax
		test	eax, eax
		jz	loc_6E404CB9
		test	bl, 60h
		jz	loc_6E40443F
		mov	eax, [ebp+98h]
		mov	eax, [eax+70h]
		mov	esi, [eax+14h]

loc_6E40428D:				; CODE XREF: sub_6E403B20+928j
		mov	[esp+2ECh+Dst],	esi
		call	EC_KEY_get0_group
		mov	[esp+2ECh+var_2C8], eax
		mov	[esp+2ECh+Dst],	esi
		call	EC_KEY_get0_private_key
		mov	esi, eax
		mov	eax, [esp+2ECh+var_2C8]
		mov	[esp+2ECh+Src],	eax
		mov	eax, [esp+2ECh+var_2CC]
		mov	[esp+2ECh+Dst],	eax
		call	EC_KEY_set_group
		test	eax, eax
		jz	loc_6E404742
		mov	[esp+2ECh+Src],	esi
		mov	eax, [esp+2ECh+var_2CC]
		mov	[esp+2ECh+Dst],	eax
		call	EC_KEY_set_private_key
		test	eax, eax
		jz	loc_6E404742
		mov	eax, [esp+2ECh+var_2C8]
		mov	[esp+2ECh+Dst],	eax
		call	EC_POINT_new
		mov	[esp+2ECh+var_2C4], eax
		test	eax, eax
		jz	loc_6E404C51
		test	edi, edi
		jnz	loc_6E4044D3
		and	ebx, 80h
		jnz	loc_6E404AD3
		mov	eax, [ebp+0C0h]
		mov	eax, [eax+9Ch]
		mov	[esp+2ECh+Dst],	eax
		call	X509_get_pubkey
		mov	esi, eax
		test	eax, eax
		jz	loc_6E40479F
		cmp	dword ptr [eax], 198h
		jnz	loc_6E40479F
		mov	eax, [eax+14h]
		mov	[esp+2ECh+Dst],	eax
		call	EC_KEY_get0_public_key
		mov	[esp+2ECh+Src],	eax
		mov	eax, [esp+2ECh+var_2C4]
		mov	[esp+2ECh+Dst],	eax
		call	EC_POINT_copy
		test	eax, eax
		jz	loc_6E404C86
		mov	[esp+2ECh+var_2C0], 2
		xor	ebx, ebx

loc_6E40435A:				; CODE XREF: sub_6E403B20+A1Aj
		mov	eax, [esp+2ECh+var_2C8]
		mov	[esp+2ECh+Dst],	eax
		call	EC_GROUP_get_degree
		test	eax, eax
		jle	loc_6E404D28
		mov	[esp+2ECh+var_2DC], 0
		mov	edi, [esp+2ECh+var_2CC]
		mov	[esp+2ECh+var_2E0], edi
		mov	edi, [esp+2ECh+var_2C4]
		mov	[esp+2ECh+Size], edi
		add	eax, 7
		sar	eax, 3
		mov	[esp+2ECh+Src],	eax
		mov	eax, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+Dst],	eax
		call	ECDH_compute_key
		mov	edi, eax
		test	eax, eax
		jle	loc_6E404CF7
		mov	[esp+2ECh+Dst],	esi
		call	EVP_PKEY_free
		mov	eax, [esp+2ECh+var_2C4]
		mov	[esp+2ECh+Dst],	eax
		call	EC_POINT_free
		mov	eax, [esp+2ECh+var_2CC]
		mov	[esp+2ECh+Dst],	eax
		call	EC_KEY_free
		mov	[esp+2ECh+Dst],	ebx
		call	BN_CTX_free
		mov	eax, [ebp+58h]
		mov	eax, [eax+34Ch]
		mov	[esp+2ECh+Dst],	eax
		call	EC_KEY_free
		mov	eax, [ebp+58h]
		mov	dword ptr [eax+34Ch], 0
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	ebx, [ebp+0C0h]
		mov	[esp+2ECh+var_2E0], edi
		mov	ecx, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+Size], ecx
		lea	ecx, [ebx+14h]
		mov	[esp+2ECh+Src],	ecx
		mov	[esp+2ECh+Dst],	ebp
		call	eax
		mov	[ebx+10h], eax
		mov	[esp+2ECh+Src],	edi
		mov	eax, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+Dst],	eax
		call	OPENSSL_cleanse
		mov	eax, [esp+2ECh+var_2C0]
		jmp	loc_6E403D5F
; ---------------------------------------------------------------------------

loc_6E40442F:				; CODE XREF: sub_6E403B20+273j
		mov	eax, ebx
		mov	edi, ecx
		jmp	loc_6E403DB2
; ---------------------------------------------------------------------------

loc_6E404438:				; CODE XREF: sub_6E403B20+C4j
		mov	edi, edx
		jmp	loc_6E403BFB
; ---------------------------------------------------------------------------

loc_6E40443F:				; CODE XREF: sub_6E403B20+75Bj
		mov	eax, [ebp+58h]
		mov	esi, [eax+34Ch]
		jmp	loc_6E40428D
; ---------------------------------------------------------------------------

loc_6E40444D:				; CODE XREF: sub_6E403B20+87j
					; sub_6E403B20+90j ...
		mov	[esp+2ECh+var_2DC], 8BFh
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 0A8h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 28h
		jmp	loc_6E403F46
; ---------------------------------------------------------------------------

loc_6E404483:				; CODE XREF: sub_6E403B20+48Dj
		test	ah, 2
		jz	loc_6E40458F
		mov	eax, [ebp+98h]
		mov	eax, [eax+88h]
		jmp	loc_6E403FBC
; ---------------------------------------------------------------------------

loc_6E40449D:				; CODE XREF: sub_6E403B20+DEj
		mov	[esp+2ECh+var_2DC], 8DEh
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 0EAh
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 33h
		jmp	loc_6E403F46
; ---------------------------------------------------------------------------

loc_6E4044D3:				; CODE XREF: sub_6E403B20+7D1j
		call	BN_CTX_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E404BE8
		mov	eax, [esp+2ECh+var_2B4]
		mov	dl, [eax]
		lea	ecx, [eax+1]
		mov	[esp+2ECh+var_2B4], ecx
		xor	eax, eax
		mov	al, dl
		lea	edx, [eax+1]
		cmp	edx, edi
		jnz	loc_6E404A7C
		mov	[esp+2ECh+var_2DC], ebx
		mov	[esp+2ECh+var_2E0], eax
		mov	[esp+2ECh+Size], ecx
		mov	eax, [esp+2ECh+var_2C4]
		mov	[esp+2ECh+Src],	eax
		mov	eax, [esp+2ECh+var_2C8]
		mov	[esp+2ECh+Dst],	eax
		call	EC_POINT_oct2point
		test	eax, eax
		jz	loc_6E404D7F
		mov	eax, [ebp+3Ch]
		mov	eax, [eax+4]
		mov	[esp+2ECh+var_2B4], eax
		mov	[esp+2ECh+var_2C0], 1
		xor	esi, esi
		jmp	loc_6E40435A
; ---------------------------------------------------------------------------

loc_6E40453F:				; CODE XREF: sub_6E403B20+64Cj
		mov	[esp+2ECh+var_2DC], 0AC1h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 92h
		jmp	loc_6E403F16
; ---------------------------------------------------------------------------

loc_6E40455C:				; CODE XREF: sub_6E403B20+4C0j
		mov	[esp+2ECh+var_2DC], 0B49h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 44h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E404078
; ---------------------------------------------------------------------------

loc_6E40458F:				; CODE XREF: sub_6E403B20+966j
		xor	eax, eax
		jmp	loc_6E403FBC
; ---------------------------------------------------------------------------

loc_6E404596:				; CODE XREF: sub_6E403B20+6ADj
		test	edi, 1
		jnz	loc_6E404AC9

loc_6E4045A2:				; CODE XREF: sub_6E403B20+FAEj
		test	edi, 2
		jnz	loc_6E404AB9

loc_6E4045AE:				; CODE XREF: sub_6E403B20+FA4j
		mov	ecx, ebx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E4041D3
; ---------------------------------------------------------------------------

loc_6E4045BC:				; CODE XREF: sub_6E403B20+70Cj
		lea	eax, [esi+esi+4]
		mov	[esp+2ECh+var_2C8], eax
		mov	[esp+2ECh+Size], esi ; Size
		mov	[esp+2ECh+Src],	ebx ; Src
		lea	eax, [ebx+esi+4]
		mov	[esp+2ECh+Dst],	eax ; Dst
		call	memmove
		mov	eax, esi
		shr	eax, 8
		mov	[esp+2ECh+var_2C4], eax
		mov	[esp+2ECh+var_220], al
		mov	eax, esi
		mov	[esp+2ECh+var_21F], al
		mov	edx, esi
		lea	edi, [esp+2ECh+var_21E]
		cmp	esi, 4
		jnb	loc_6E40495C

loc_6E404603:				; CODE XREF: sub_6E403B20+E4Fj
		test	dl, 2
		jz	short loc_6E404610
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E404610:				; CODE XREF: sub_6E403B20+AE6j
		and	edx, 1
		jz	short loc_6E404618
		mov	byte ptr [edi],	0

loc_6E404618:				; CODE XREF: sub_6E403B20+AF3j
		lea	eax, [esp+2ECh+var_21E]
		add	eax, esi
		mov	cl, byte ptr [esp+2ECh+var_2C4]
		mov	[eax], cl
		mov	ecx, esi
		mov	[eax+1], cl
		mov	esi, [ebp+0C0h]
		mov	eax, [esi+90h]
		test	eax, eax
		jz	short loc_6E40464A
		mov	[esp+2ECh+Dst],	eax
		call	CRYPTO_free
		mov	esi, [ebp+0C0h]

loc_6E40464A:				; CODE XREF: sub_6E403B20+B1Aj
		mov	eax, [esp+2ECh+var_2CC]
		mov	[esp+2ECh+Src],	eax
		mov	eax, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+Dst],	eax
		call	BUF_strndup
		mov	[esi+90h], eax
		mov	esi, [ebp+0C0h]
		mov	eax, [esi+90h]
		test	eax, eax
		jz	loc_6E404D68
		mov	eax, [esi+8Ch]
		test	eax, eax
		jz	short loc_6E404690
		mov	[esp+2ECh+Dst],	eax
		call	CRYPTO_free
		mov	esi, [ebp+0C0h]

loc_6E404690:				; CODE XREF: sub_6E403B20+B60j
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+2ECh+Dst],	eax
		call	BUF_strdup
		mov	[esi+8Ch], eax
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+14Ch]
		test	eax, eax
		mov	esi, [ebp+0C0h]
		jz	short loc_6E4046CE
		mov	edi, [esi+8Ch]
		test	edi, edi
		jz	loc_6E404D32

loc_6E4046CE:				; CODE XREF: sub_6E403B20+B9Ej
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	edi, [esp+2ECh+var_2C8]
		mov	[esp+2ECh+var_2E0], edi
		mov	[esp+2ECh+Size], ebx
		lea	edx, [esi+14h]
		mov	[esp+2ECh+Src],	edx
		mov	[esp+2ECh+Dst],	ebp
		call	eax
		mov	[esi+10h], eax
		mov	[esp+2ECh+Src],	204h
		mov	[esp+2ECh+Dst],	ebx
		call	OPENSSL_cleanse
		mov	eax, 1
		jmp	loc_6E403D5F
; ---------------------------------------------------------------------------

loc_6E40470C:				; CODE XREF: sub_6E403B20+704j
		mov	[esp+2ECh+var_2DC], 0AD5h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 44h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 28h
		jmp	loc_6E403F36
; ---------------------------------------------------------------------------

loc_6E404742:				; CODE XREF: sub_6E403B20+799j
					; sub_6E403B20+7B1j
		mov	[esp+2ECh+var_2DC], 0A4Ah
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 10h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		xor	ebx, ebx
		mov	[esp+2ECh+var_2C4], 0
		xor	esi, esi

loc_6E40477A:				; CODE XREF: sub_6E403B20+F8Aj
					; sub_6E403B20+10F6j ...
		mov	[esp+2ECh+Dst],	esi
		call	EVP_PKEY_free
		mov	eax, [esp+2ECh+var_2C4]
		mov	[esp+2ECh+Dst],	eax
		call	EC_POINT_free

loc_6E40478E:				; CODE XREF: sub_6E403B20+CD9j
		mov	eax, [esp+2ECh+var_2CC]
		mov	[esp+2ECh+Dst],	eax
		call	EC_KEY_free
		jmp	loc_6E403F74
; ---------------------------------------------------------------------------

loc_6E40479F:				; CODE XREF: sub_6E403B20+7FBj
					; sub_6E403B20+807j
		mov	[esp+2ECh+var_2DC], 0A69h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 139h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error

loc_6E4047CB:				; CODE XREF: sub_6E403B20+FE1j
		mov	[esp+2ECh+Size], 28h
		mov	[esp+2ECh+Src],	2
		mov	[esp+2ECh+Dst],	ebp
		call	sub_6E4151B0
		mov	[esp+2ECh+Dst],	esi
		call	EVP_PKEY_free
		mov	eax, [esp+2ECh+var_2C4]
		mov	[esp+2ECh+Dst],	eax
		call	EC_POINT_free
		xor	ebx, ebx
		jmp	short loc_6E40478E
; ---------------------------------------------------------------------------

loc_6E4047FB:				; CODE XREF: sub_6E403B20+526j
		mov	eax, [esp+2ECh+var_2A8]
		test	eax, eax
		jnz	loc_6E40404C
		mov	eax, [esp+2ECh+var_2A4]
		mov	[esp+2ECh+var_2DC], eax
		mov	eax, [esp+2ECh+var_2B4]
		mov	[esp+2ECh+var_2E0], eax
		lea	eax, [esp+2ECh+var_2B0]
		mov	[esp+2ECh+Size], eax
		lea	edi, [esp+2ECh+var_220]
		mov	[esp+2ECh+Src],	edi
		mov	[esp+2ECh+Dst],	ebx
		call	EVP_PKEY_decrypt
		test	eax, eax
		jle	loc_6E404D72
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	ecx, [ebp+0C0h]
		mov	[esp+2ECh+var_2E0], 20h
		mov	[esp+2ECh+Size], edi
		lea	edx, [ecx+14h]
		mov	[esp+2ECh+var_2CC], ecx
		mov	[esp+2ECh+Src],	edx
		mov	[esp+2ECh+Dst],	ebp
		call	eax
		mov	ecx, [esp+2ECh+var_2CC]
		mov	[ecx+10h], eax
		mov	[esp+2ECh+Src],	20h
		mov	[esp+2ECh+Dst],	edi
		call	OPENSSL_cleanse
		mov	[esp+2ECh+var_2D8], 0
		mov	[esp+2ECh+var_2DC], 2
		mov	[esp+2ECh+var_2E0], 2
		mov	[esp+2ECh+Size], 0FFFFFFFFh
		mov	[esp+2ECh+Src],	0FFFFFFFFh
		mov	[esp+2ECh+Dst],	ebx
		call	EVP_PKEY_CTX_ctrl
		test	eax, eax
		setnle	al
		and	eax, 0FFh
		mov	edi, eax
		inc	edi
		mov	[esp+2ECh+Dst],	esi
		call	EVP_PKEY_free
		mov	[esp+2ECh+Dst],	ebx
		call	EVP_PKEY_CTX_free
		mov	eax, edi
		jmp	loc_6E403D5F
; ---------------------------------------------------------------------------

loc_6E4048D0:				; CODE XREF: sub_6E403B20+2D6j
		mov	[esp+2ECh+var_2DC], 95Bh
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 5
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	[esp+2ECh+Dst],	ebx
		call	BN_clear_free
		jmp	loc_6E403F5A
; ---------------------------------------------------------------------------

loc_6E404909:				; CODE XREF: sub_6E403B20+5C3j
					; sub_6E403B20+5D4j
		mov	[esp+2ECh+var_2DC], 0B1Ch
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 173h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 2Fh
		jmp	loc_6E403F46
; ---------------------------------------------------------------------------

loc_6E40493F:				; CODE XREF: sub_6E403B20+65Aj
		mov	[esp+2ECh+var_2DC], 0AC6h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 0E1h
		jmp	loc_6E403F16
; ---------------------------------------------------------------------------

loc_6E40495C:				; CODE XREF: sub_6E403B20+ADDj
		mov	eax, edi
		test	al, 2
		jnz	loc_6E404B6D

loc_6E404966:				; CODE XREF: sub_6E403B20+1061j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E404603
; ---------------------------------------------------------------------------

loc_6E404974:				; CODE XREF: sub_6E403B20+28Cj
		mov	[esp+2ECh+var_2DC], 946h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 0ECh
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 28h
		jmp	loc_6E403F46
; ---------------------------------------------------------------------------

loc_6E4049AA:				; CODE XREF: sub_6E403B20+2B8j
		mov	[esp+2ECh+var_2DC], 954h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 82h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E403F5A
; ---------------------------------------------------------------------------

loc_6E4049DB:				; CODE XREF: sub_6E403B20+29Aj
		mov	[esp+2ECh+var_2DC], 94Ch
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 0ABh
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	si, 28h
		jmp	loc_6E403F46
; ---------------------------------------------------------------------------

loc_6E404A10:				; CODE XREF: sub_6E403B20+587j
		mov	[esp+2ECh+var_2DC], 0B11h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 15Bh
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 32h
		jmp	loc_6E403F46
; ---------------------------------------------------------------------------

loc_6E404A46:				; CODE XREF: sub_6E403B20+D1j
		mov	[esp+2ECh+var_2DC], 8CCh
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 0EAh
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 32h
		jmp	loc_6E403F46
; ---------------------------------------------------------------------------

loc_6E404A7C:				; CODE XREF: sub_6E403B20+9D8j
		mov	[esp+2ECh+var_2DC], 0A83h

loc_6E404A84:				; CODE XREF: sub_6E403B20+1267j
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 10h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E40477A
; ---------------------------------------------------------------------------

loc_6E404AAF:				; CODE XREF: sub_6E403B20+4EEj
		call	ERR_clear_error
		jmp	loc_6E404014
; ---------------------------------------------------------------------------

loc_6E404AB9:				; CODE XREF: sub_6E403B20+A88j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	ebx, 2
		jmp	loc_6E4045AE
; ---------------------------------------------------------------------------

loc_6E404AC9:				; CODE XREF: sub_6E403B20+A7Cj
		mov	byte ptr [edi],	0
		inc	edi
		dec	ebx
		jmp	loc_6E4045A2
; ---------------------------------------------------------------------------

loc_6E404AD3:				; CODE XREF: sub_6E403B20+7DDj
		mov	[esp+2ECh+var_2DC], 0A5Ah
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 137h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E4047CB
; ---------------------------------------------------------------------------

loc_6E404B06:				; CODE XREF: sub_6E403B20+280j
		mov	[esp+2ECh+var_2DC], 93Bh
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 94h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E403F5A
; ---------------------------------------------------------------------------

loc_6E404B37:				; CODE XREF: sub_6E403B20+4B0j
		mov	[esp+2ECh+var_2DC], 0B45h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 41h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 50h
		jmp	loc_6E403F46
; ---------------------------------------------------------------------------

loc_6E404B6D:				; CODE XREF: sub_6E403B20+E40j
		mov	[esp+2ECh+var_21E], 0
		lea	edi, [esp+2ECh+var_21C]
		lea	edx, [esi-2]
		jmp	loc_6E404966
; ---------------------------------------------------------------------------

loc_6E404B86:				; CODE XREF: sub_6E403B20+634j
		mov	[esp+2ECh+var_2DC], 0B2Ah
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 44h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E403F5A
; ---------------------------------------------------------------------------

loc_6E404BB7:				; CODE XREF: sub_6E403B20+61Aj
		mov	[esp+2ECh+var_2DC], 0B23h

loc_6E404BBF:				; CODE XREF: sub_6E403B20+11A1j
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 41h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E403F5A
; ---------------------------------------------------------------------------

loc_6E404BE8:				; CODE XREF: sub_6E403B20+9BCj
		mov	[esp+2ECh+var_2DC], 0A7Bh
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 41h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E40477A
; ---------------------------------------------------------------------------

loc_6E404C1B:				; CODE XREF: sub_6E403B20+479j
		mov	[esp+2ECh+var_2DC], 0B7Eh
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 0F9h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 28h
		jmp	loc_6E403F46
; ---------------------------------------------------------------------------

loc_6E404C51:				; CODE XREF: sub_6E403B20+7C9j
		mov	[esp+2ECh+var_2DC], 0A50h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 41h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		xor	ebx, ebx
		xor	esi, esi
		jmp	loc_6E40477A
; ---------------------------------------------------------------------------

loc_6E404C86:				; CODE XREF: sub_6E403B20+82Aj
		mov	[esp+2ECh+var_2DC], 0A70h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 10h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		xor	ebx, ebx
		jmp	loc_6E40477A
; ---------------------------------------------------------------------------

loc_6E404CB9:				; CODE XREF: sub_6E403B20+752j
		mov	[esp+2ECh+var_2DC], 0A35h
		jmp	loc_6E404BBF
; ---------------------------------------------------------------------------

loc_6E404CC6:				; CODE XREF: sub_6E403B20+5A9j
		mov	[esp+2ECh+var_2DC], 0B15h
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 3
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E403F5A
; ---------------------------------------------------------------------------

loc_6E404CF7:				; CODE XREF: sub_6E403B20+880j
		mov	[esp+2ECh+var_2DC], 0A9Ah

loc_6E404CFF:				; CODE XREF: sub_6E403B20+1210j
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 2Bh
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E40477A
; ---------------------------------------------------------------------------

loc_6E404D28:				; CODE XREF: sub_6E403B20+848j
		mov	[esp+2ECh+var_2DC], 0A94h
		jmp	short loc_6E404CFF
; ---------------------------------------------------------------------------

loc_6E404D32:				; CODE XREF: sub_6E403B20+BA8j
		mov	[esp+2ECh+var_2DC], 0AF7h

loc_6E404D3A:				; CODE XREF: sub_6E403B20+1250j
		mov	[esp+2ECh+var_2E0], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+2ECh+Size], 41h
		mov	[esp+2ECh+Src],	8Bh
		mov	[esp+2ECh+Dst],	14h
		call	ERR_put_error
		mov	esi, 28h
		jmp	loc_6E403F36
; ---------------------------------------------------------------------------

loc_6E404D68:				; CODE XREF: sub_6E403B20+B52j
		mov	[esp+2ECh+var_2DC], 0AEEh
		jmp	short loc_6E404D3A
; ---------------------------------------------------------------------------

loc_6E404D72:				; CODE XREF: sub_6E403B20+D14j
		mov	[esp+2ECh+var_2DC], 0B65h
		jmp	loc_6E404054
; ---------------------------------------------------------------------------

loc_6E404D7F:				; CODE XREF: sub_6E403B20+A00j
		mov	[esp+2ECh+var_2DC], 0A87h
		jmp	loc_6E404A84
sub_6E403B20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E404D90	proc near		; CODE XREF: sub_6E406650+9F3p
					; sub_6E4239E0+7D6p

File		= dword	ptr -0ACh
Format		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_5C		= dword	ptr -5Ch
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 9Ch
		mov	ebx, [esp+0ACh+arg_0]
		lea	esi, [esp+0ACh+var_74]
		mov	[esp+0ACh+File], esi
		call	EVP_MD_CTX_init
		mov	eax, [ebx+0C0h]
		mov	edx, [eax+9Ch]
		test	edx, edx
		jz	loc_6E404F30
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		lea	edx, [esp+0ACh+var_78]
		mov	[esp+0ACh+var_98], edx
		mov	[esp+0ACh+var_9C], 4000h
		mov	[esp+0ACh+var_A0], 0Fh
		mov	[esp+0ACh+var_A4], 21A1h
		mov	[esp+0ACh+Format], 21A0h
		mov	[esp+0ACh+File], ebx
		call	eax
		mov	edi, eax
		mov	eax, [esp+0ACh+var_78]
		test	eax, eax
		jnz	short loc_6E404E10
		mov	eax, edi
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E404E10:				; CODE XREF: sub_6E404D90+6Cj
		mov	eax, [ebx+0C0h]
		mov	edx, [eax+9Ch]
		mov	[esp+0ACh+File], edx
		mov	[esp+0ACh+var_88], edx
		call	X509_get_pubkey
		mov	ebp, eax
		mov	[esp+0ACh+Format], eax
		mov	edx, [esp+0ACh+var_88]
		mov	[esp+0ACh+File], edx
		call	X509_certificate_type
		test	al, 10h
		jz	loc_6E404F80
		mov	ecx, [ebx+40h]
		cmp	edi, 40h
		jz	loc_6E405020

loc_6E404E4E:				; CODE XREF: sub_6E404D90+29Bj
		mov	eax, [ebx]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	loc_6E405050

loc_6E404E5E:				; CODE XREF: sub_6E404D90+2C5j
		mov	[esp+0ACh+var_80], 0

loc_6E404E66:				; CODE XREF: sub_6E404D90+638j
		xor	edx, edx
		mov	dl, [ecx]
		shl	edx, 8
		xor	eax, eax
		mov	al, [ecx+1]
		or	edx, eax
		sub	edi, 2
		cmp	edx, edi
		jg	loc_6E4050C0
		add	ecx, 2

loc_6E404E82:				; CODE XREF: sub_6E404D90+2AEj
		mov	[esp+0ACh+var_88], edx
		mov	[esp+0ACh+var_84], ecx
		mov	[esp+0ACh+File], ebp
		call	EVP_PKEY_size
		mov	edx, [esp+0ACh+var_88]
		cmp	edx, eax
		jg	loc_6E404FE0
		cmp	edi, eax
		mov	ecx, [esp+0ACh+var_84]
		jg	loc_6E404FE0
		test	edi, edi
		jle	loc_6E404FE0
		mov	eax, [ebx]
		mov	edi, eax
		sar	edi, 8
		cmp	edi, 3
		jz	loc_6E4050F6

loc_6E404EC2:				; CODE XREF: sub_6E404D90+36Bj
		mov	eax, [ebp+0]
		cmp	eax, 6
		jz	loc_6E4052C6
		cmp	eax, 74h
		jz	loc_6E405335
		cmp	eax, 198h
		jz	loc_6E4053CD
		sub	eax, 32Bh
		cmp	eax, 1
		jbe	loc_6E4051D2
		mov	[esp+0ACh+var_9C], 0C59h
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 44h
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 2Bh
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------
		align 10h

loc_6E404F30:				; CODE XREF: sub_6E404D90+2Bj
		mov	edi, 1
		xor	ebp, ebp

loc_6E404F37:				; CODE XREF: sub_6E404D90+23Ej
					; sub_6E404D90+531j ...
		mov	eax, [ebx+58h]
		mov	eax, [eax+178h]
		test	eax, eax
		jz	short loc_6E404F5C
		mov	[esp+0ACh+File], eax
		call	BIO_free
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+178h], 0
		and	dword ptr [eax], 0FFFFFFDFh

loc_6E404F5C:				; CODE XREF: sub_6E404D90+1B2j
		mov	[esp+0ACh+File], esi
		call	EVP_MD_CTX_cleanup
		mov	[esp+0ACh+File], ebp
		call	EVP_PKEY_free
		mov	eax, edi
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E404F80:				; CODE XREF: sub_6E404D90+ACj
		mov	[esp+0ACh+var_9C], 0BBBh
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 0DCh
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 2Fh

loc_6E404FB1:				; CODE XREF: sub_6E404D90+191j
					; sub_6E404D90+281j ...
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+Format], 2
		mov	[esp+0ACh+File], ebx
		call	sub_6E4151B0
		mov	dword ptr [ebx+34h], 5
		xor	edi, edi
		jmp	loc_6E404F37
; ---------------------------------------------------------------------------
		align 10h

loc_6E404FE0:				; CODE XREF: sub_6E404D90+108j
					; sub_6E404D90+114j ...
		mov	[esp+0ACh+var_9C], 0BF0h
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 109h
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 32h
		jmp	short loc_6E404FB1
; ---------------------------------------------------------------------------
		align 10h

loc_6E405020:				; CODE XREF: sub_6E404D90+B8j
		mov	eax, [ebp+0]
		sub	eax, 32Bh
		cmp	eax, 1
		ja	loc_6E404E4E
		mov	[esp+0ACh+var_80], 0
		mov	edx, 40h
		jmp	loc_6E404E82
; ---------------------------------------------------------------------------
		align 10h

loc_6E405050:				; CODE XREF: sub_6E404D90+C8j
		cmp	eax, 302h
		jle	loc_6E404E5E
		mov	[esp+0ACh+var_88], ecx
		mov	[esp+0ACh+File], ebp
		call	sub_6E41DB50
		cmp	eax, 0FFFFFFFFh
		mov	ecx, [esp+0ACh+var_88]
		jz	loc_6E40543A
		xor	edx, edx
		mov	dl, [ecx+1]
		cmp	edx, eax
		jz	loc_6E4053A2
		mov	[esp+0ACh+var_9C], 0BD6h
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 172h
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 32h
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------
		align 10h

loc_6E4050C0:				; CODE XREF: sub_6E404D90+E9j
		mov	[esp+0ACh+var_9C], 0BE9h
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 9Fh
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 32h
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------

loc_6E4050F6:				; CODE XREF: sub_6E404D90+12Cj
		cmp	eax, 302h
		jle	loc_6E404EC2
		mov	[esp+0ACh+var_84], edx
		mov	[esp+0ACh+var_88], ecx
		mov	eax, [ebx+58h]
		mov	edi, [eax+178h]
		lea	eax, [esp+0ACh+var_5C]
		mov	[esp+0ACh+var_A0], eax
		mov	[esp+0ACh+var_A4], 0
		mov	[esp+0ACh+Format], 3
		mov	[esp+0ACh+File], edi
		call	BIO_ctrl
		mov	edi, eax
		test	eax, eax
		mov	ecx, [esp+0ACh+var_88]
		mov	edx, [esp+0ACh+var_84]
		jle	loc_6E405470
		mov	[esp+0ACh+var_84], edx
		mov	[esp+0ACh+var_88], ecx
		mov	[esp+0ACh+var_A4], 0
		mov	eax, [esp+0ACh+var_80]
		mov	[esp+0ACh+Format], eax
		mov	[esp+0ACh+File], esi
		call	EVP_DigestInit_ex
		test	eax, eax
		mov	ecx, [esp+0ACh+var_88]
		mov	edx, [esp+0ACh+var_84]
		jz	short loc_6E40519C
		mov	[esp+0ACh+var_84], edx
		mov	[esp+0ACh+var_88], ecx
		mov	[esp+0ACh+var_A4], edi
		mov	eax, [esp+0ACh+var_5C]
		mov	[esp+0ACh+Format], eax
		mov	[esp+0ACh+File], esi
		call	EVP_DigestUpdate
		test	eax, eax
		mov	ecx, [esp+0ACh+var_88]
		mov	edx, [esp+0ACh+var_84]
		jnz	loc_6E40550C

loc_6E40519C:				; CODE XREF: sub_6E404D90+3DEj
		mov	[esp+0ACh+var_9C], 0C04h
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 6
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 50h
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------

loc_6E4051D2:				; CODE XREF: sub_6E404D90+15Aj
		mov	[esp+0ACh+var_80], edx
		mov	[esp+0ACh+var_84], ecx
		mov	[esp+0ACh+Format], 0
		mov	[esp+0ACh+File], ebp
		call	EVP_PKEY_CTX_new
		mov	[esp+0ACh+var_88], eax
		test	eax, eax
		mov	ecx, [esp+0ACh+var_84]
		mov	edx, [esp+0ACh+var_80]
		jz	loc_6E40547A
		mov	[esp+0ACh+var_80], edx
		mov	[esp+0ACh+var_84], ecx
		mov	[esp+0ACh+File], eax
		call	EVP_PKEY_verify_init
		test	eax, eax
		mov	ecx, [esp+0ACh+var_84]
		mov	edx, [esp+0ACh+var_80]
		jle	loc_6E4054B0
		cmp	edx, 40h
		jz	short loc_6E405247
		mov	[esp+0ACh+var_84], ecx
		mov	[esp+0ACh+var_A4], edx
		mov	[esp+0ACh+Format], offset Format ; "GOST signature length is %d"
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+0ACh+File], eax ; File
		call	fprintf
		mov	ecx, [esp+0ACh+var_84]

loc_6E405247:				; CODE XREF: sub_6E404D90+491j
		xor	eax, eax
		lea	edi, [esp+0ACh+var_1D]
		mov	[esp+0ACh+arg_0], ebx
		mov	esi, esi
		lea	edi, [edi+0]

loc_6E405260:				; CODE XREF: sub_6E404D90+4DDj
		mov	edx, edi
		sub	edx, eax
		mov	bl, [ecx+eax]
		mov	[edx], bl
		inc	eax
		cmp	eax, 40h
		jnz	short loc_6E405260
		mov	ebx, [esp+0ACh+arg_0]
		mov	[esp+0ACh+var_9C], 20h
		mov	eax, [ebx+58h]
		add	eax, 1B4h
		mov	[esp+0ACh+var_A0], eax
		mov	[esp+0ACh+var_A4], 40h
		lea	eax, [esp+0ACh+var_5C]
		mov	[esp+0ACh+Format], eax
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+File], eax
		call	EVP_PKEY_verify
		mov	edi, eax
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+File], eax
		call	EVP_PKEY_CTX_free
		test	edi, edi
		jle	loc_6E4054FF

loc_6E4052BC:				; CODE XREF: sub_6E404D90+56Dj
					; sub_6E404D90+5D6j ...
		mov	edi, 1
		jmp	loc_6E404F37
; ---------------------------------------------------------------------------

loc_6E4052C6:				; CODE XREF: sub_6E404D90+138j
		mov	eax, [ebp+14h]
		mov	[esp+0ACh+var_98], eax
		mov	[esp+0ACh+var_9C], edx
		mov	[esp+0ACh+var_A0], ecx
		mov	[esp+0ACh+var_A4], 24h
		mov	eax, [ebx+58h]
		add	eax, 1B4h
		mov	[esp+0ACh+Format], eax
		mov	[esp+0ACh+File], 72h
		call	RSA_verify
		test	eax, eax
		js	loc_6E4054C9
		jnz	short loc_6E4052BC
		mov	[esp+0ACh+var_9C], 0C1Bh
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 7Ah
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 33h
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------

loc_6E405335:				; CODE XREF: sub_6E404D90+141j
		mov	edi, [ebp+14h]
		mov	eax, [ebp+4]
		mov	[esp+0ACh+var_98], edi
		mov	[esp+0ACh+var_9C], edx
		mov	[esp+0ACh+var_A0], ecx
		mov	[esp+0ACh+var_A4], 14h
		mov	ecx, [ebx+58h]
		lea	edx, [ecx+1C4h]
		mov	[esp+0ACh+Format], edx
		mov	[esp+0ACh+File], eax
		call	DSA_verify
		test	eax, eax
		jg	loc_6E4052BC
		mov	[esp+0ACh+var_9C], 0C28h
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 70h
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 33h
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------

loc_6E4053A2:				; CODE XREF: sub_6E404D90+2EBj
		xor	eax, eax
		mov	al, [ecx]
		mov	[esp+0ACh+var_88], ecx
		mov	[esp+0ACh+File], eax
		call	sub_6E41DBB0
		mov	[esp+0ACh+var_80], eax
		test	eax, eax
		mov	ecx, [esp+0ACh+var_88]
		jz	loc_6E405563
		add	ecx, 2
		sub	edi, 2
		jmp	loc_6E404E66
; ---------------------------------------------------------------------------

loc_6E4053CD:				; CODE XREF: sub_6E404D90+14Cj
		mov	edi, [ebp+14h]
		mov	eax, [ebp+4]
		mov	[esp+0ACh+var_98], edi
		mov	[esp+0ACh+var_9C], edx
		mov	[esp+0ACh+var_A0], ecx
		mov	[esp+0ACh+var_A4], 14h
		mov	ecx, [ebx+58h]
		lea	edx, [ecx+1C4h]
		mov	[esp+0ACh+Format], edx
		mov	[esp+0ACh+File], eax
		call	ECDSA_verify
		test	eax, eax
		jg	loc_6E4052BC
		mov	[esp+0ACh+var_9C], 0C35h

loc_6E40540C:				; CODE XREF: sub_6E404D90+777j
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 131h
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 33h
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------

loc_6E40543A:				; CODE XREF: sub_6E404D90+2DEj
		mov	[esp+0ACh+var_9C], 0BCFh

loc_6E405442:				; CODE XREF: sub_6E404D90+6E8j
					; sub_6E404D90+734j
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 44h
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 50h
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------

loc_6E405470:				; CODE XREF: sub_6E404D90+3AEj
		mov	[esp+0ACh+var_9C], 0BFAh
		jmp	short loc_6E405442
; ---------------------------------------------------------------------------

loc_6E40547A:				; CODE XREF: sub_6E404D90+468j
		mov	[esp+0ACh+var_9C], 0C41h
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 41h
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 50h
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------

loc_6E4054B0:				; CODE XREF: sub_6E404D90+488j
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+File], eax
		call	EVP_PKEY_CTX_free
		mov	[esp+0ACh+var_9C], 0C47h
		jmp	loc_6E405442
; ---------------------------------------------------------------------------

loc_6E4054C9:				; CODE XREF: sub_6E404D90+567j
		mov	[esp+0ACh+var_9C], 0C16h
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 76h
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 33h
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------

loc_6E4054FF:				; CODE XREF: sub_6E404D90+526j
		mov	[esp+0ACh+var_9C], 0C55h
		jmp	loc_6E40540C
; ---------------------------------------------------------------------------

loc_6E40550C:				; CODE XREF: sub_6E404D90+406j
		mov	[esp+0ACh+var_A0], ebp
		mov	[esp+0ACh+var_A4], edx
		mov	[esp+0ACh+Format], ecx
		mov	[esp+0ACh+File], esi
		call	EVP_VerifyFinal
		mov	edi, 1
		test	eax, eax
		jg	loc_6E404F37
		mov	[esp+0ACh+var_9C], 0C0Bh
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 7Bh
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 33h
		jmp	loc_6E404FB1
; ---------------------------------------------------------------------------

loc_6E405563:				; CODE XREF: sub_6E404D90+62Cj
		mov	[esp+0ACh+var_9C], 0BDCh
		mov	[esp+0ACh+var_A0], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+0ACh+var_A4], 170h
		mov	[esp+0ACh+Format], 88h
		mov	[esp+0ACh+File], 14h
		call	ERR_put_error
		mov	eax, 32h
		jmp	loc_6E404FB1
sub_6E404D90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4055A0	proc near		; CODE XREF: sub_6E406650+D64p
					; sub_6E4239E0+DD6p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		mov	edx, [ebx+108h]
		lea	ecx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_38], ecx
		mov	[esp+4Ch+var_3C], edx
		mov	[esp+4Ch+var_40], 0FFFFFFFFh
		mov	[esp+4Ch+var_44], 2181h
		mov	[esp+4Ch+var_48], 2180h
		mov	[esp+4Ch+var_4C], ebx
		call	eax
		mov	esi, eax
		mov	ebp, [esp+4Ch+var_24]
		test	ebp, ebp
		jz	short loc_6E40565C
		mov	eax, [ebx+58h]
		mov	edx, [eax+340h]
		cmp	edx, 10h
		jz	loc_6E4056F0
		cmp	edx, 0Bh
		jz	loc_6E405730
		mov	[esp+4Ch+var_3C], 0C97h
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 106h

loc_6E40561D:				; CODE XREF: sub_6E4055A0+348j
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	ebp, ebp
		mov	esi, 0Ah

loc_6E405638:				; CODE XREF: sub_6E4055A0+20Fj
					; sub_6E4055A0+383j ...
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], 2
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E4151B0

loc_6E40564C:				; CODE XREF: sub_6E4055A0+32Aj
					; sub_6E4055A0+4E6j
		mov	dword ptr [ebx+34h], 5
		test	ebp, ebp
		jnz	short loc_6E4056C7
		mov	eax, 0FFFFFFFFh

loc_6E40565C:				; CODE XREF: sub_6E4055A0+48j
					; sub_6E4055A0+42Fj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E405664:				; CODE XREF: sub_6E4055A0+276j
		mov	[esp+4Ch+var_34], eax
		mov	ebp, [esp+4Ch+var_30]
		mov	ebx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_3C], 0CB9h
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 87h
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	[esp+4Ch+var_44], 32h
		mov	[esp+4Ch+var_48], 2
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E4151B0
		mov	dword ptr [ebx+34h], 5
		mov	edx, [esp+4Ch+var_34]

loc_6E4056BF:				; CODE XREF: sub_6E4055A0+4B5j
		mov	[esp+4Ch+var_4C], edx
		call	X509_free

loc_6E4056C7:				; CODE XREF: sub_6E4055A0+B5j
		mov	[esp+4Ch+var_48], offset X509_free
		mov	[esp+4Ch+var_4C], ebp
		call	sk_pop_free
		mov	eax, 0FFFFFFFFh
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4056F0:				; CODE XREF: sub_6E4055A0+56j
		mov	edx, [ebx+0C8h]
		and	edx, 3
		cmp	edx, 3
		jz	loc_6E4058F0
		cmp	dword ptr [ebx], 300h
		jle	short loc_6E405718
		mov	edi, [eax+390h]
		test	edi, edi
		jnz	loc_6E4058D0

loc_6E405718:				; CODE XREF: sub_6E4055A0+168j
		mov	dword ptr [eax+354h], 1
		mov	eax, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E405730:				; CODE XREF: sub_6E4055A0+5Fj
		mov	eax, [ebx+40h]
		mov	[esp+4Ch+var_20], eax
		call	sk_new_null
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E405A5A
		mov	ecx, [esp+4Ch+var_20]
		xor	eax, eax
		mov	al, [ecx]
		mov	[esp+4Ch+var_34], eax
		shl	[esp+4Ch+var_34], 10h
		xor	eax, eax
		mov	al, [ecx+1]
		shl	eax, 8
		or	[esp+4Ch+var_34], eax
		xor	eax, eax
		mov	al, [ecx+2]
		or	[esp+4Ch+var_34], eax
		lea	eax, [ecx+3]
		mov	[esp+4Ch+var_20], eax
		mov	eax, [esp+4Ch+var_34]
		add	eax, 3
		cmp	eax, esi
		jz	short loc_6E4057C0
		mov	[esp+4Ch+var_3C], 0CA4h
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 9Fh
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	esi, 32h
		jmp	loc_6E405638
; ---------------------------------------------------------------------------
		align 10h

loc_6E4057C0:				; CODE XREF: sub_6E4055A0+1DCj
		mov	esi, [esp+4Ch+var_34]
		test	esi, esi
		jz	loc_6E405930
		movzx	esi, byte ptr [ecx+3]
		and	esi, 0FFh
		shl	esi, 10h
		xor	eax, eax
		mov	al, [ecx+4]
		shl	eax, 8
		or	esi, eax
		xor	eax, eax
		mov	al, [ecx+5]
		or	esi, eax
		add	ecx, 6
		mov	[esp+4Ch+var_20], ecx
		lea	edi, [esi+3]
		cmp	[esp+4Ch+var_34], edi
		jb	loc_6E4059DC
		mov	[esp+4Ch+var_30], ebp
		mov	[esp+4Ch+arg_0], ebx
		mov	ebx, ecx
		jmp	short loc_6E405874
; ---------------------------------------------------------------------------
		align 10h

loc_6E405810:				; CODE XREF: sub_6E4055A0+2F0j
		add	esi, ebx
		cmp	[esp+4Ch+var_20], esi
		jnz	loc_6E405664
		mov	[esp+4Ch+var_48], eax
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], eax
		call	sk_push
		test	eax, eax
		jz	loc_6E405A12
		cmp	[esp+4Ch+var_34], edi
		jbe	loc_6E405928
		mov	ecx, [esp+4Ch+var_20]
		movzx	esi, byte ptr [ecx]
		and	esi, 0FFh
		shl	esi, 10h
		xor	eax, eax
		mov	al, [ecx+1]
		shl	eax, 8
		or	esi, eax
		xor	eax, eax
		mov	al, [ecx+2]
		or	esi, eax
		lea	ebx, [ecx+3]
		mov	[esp+4Ch+var_20], ebx
		lea	edi, [esi+edi+3]
		cmp	[esp+4Ch+var_34], edi
		jb	loc_6E4059D4

loc_6E405874:				; CODE XREF: sub_6E4055A0+268j
		mov	[esp+4Ch+var_44], esi
		lea	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], 0
		call	d2i_X509
		mov	ebp, eax
		test	eax, eax
		jnz	loc_6E405810
		mov	ebp, [esp+4Ch+var_30]
		mov	ebx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_3C], 0CB3h
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 0Dh
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		jmp	loc_6E40564C
; ---------------------------------------------------------------------------
		align 10h

loc_6E4058D0:				; CODE XREF: sub_6E4055A0+172j
		mov	[esp+4Ch+var_3C], 0C8Dh
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 0E9h
		jmp	loc_6E40561D
; ---------------------------------------------------------------------------
		align 10h

loc_6E4058F0:				; CODE XREF: sub_6E4055A0+15Cj
		mov	[esp+4Ch+var_3C], 0C84h
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 0C7h
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	ebp, ebp
		mov	esi, 28h
		jmp	loc_6E405638
; ---------------------------------------------------------------------------

loc_6E405928:				; CODE XREF: sub_6E4055A0+298j
		mov	ebp, [esp+4Ch+var_30]
		mov	ebx, [esp+4Ch+arg_0]

loc_6E405930:				; CODE XREF: sub_6E4055A0+226j
		mov	[esp+4Ch+var_4C], ebp
		call	sk_num
		test	eax, eax
		jle	loc_6E405A8B
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E4371C0
		test	eax, eax
		jle	loc_6E405AD0

loc_6E405954:				; CODE XREF: sub_6E4055A0+510j
					; sub_6E4055A0+520j
		mov	esi, [ebx+0C0h]
		mov	eax, [esi+9Ch]
		test	eax, eax
		jz	short loc_6E405972
		mov	[esp+4Ch+var_4C], eax
		call	X509_free
		mov	esi, [ebx+0C0h]

loc_6E405972:				; CODE XREF: sub_6E4055A0+3C2j
		mov	[esp+4Ch+var_4C], ebp
		call	sk_shift
		mov	[esi+9Ch], eax
		mov	esi, [ebx+0C0h]
		mov	eax, [ebx+0ECh]
		mov	[esi+0A0h], eax
		mov	eax, [esi+98h]
		test	eax, eax
		jz	loc_6E405B7D

loc_6E4059A0:				; CODE XREF: sub_6E4055A0+5F5j
		mov	eax, [esi+98h]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6E4059C8
		mov	[esp+4Ch+var_48], offset X509_free
		mov	[esp+4Ch+var_4C], edx
		call	sk_pop_free
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]

loc_6E4059C8:				; CODE XREF: sub_6E4055A0+40Aj
		mov	[eax], ebp
		mov	eax, 1
		jmp	loc_6E40565C
; ---------------------------------------------------------------------------

loc_6E4059D4:				; CODE XREF: sub_6E4055A0+2CEj
		mov	ebp, [esp+4Ch+var_30]
		mov	ebx, [esp+4Ch+arg_0]

loc_6E4059DC:				; CODE XREF: sub_6E4055A0+258j
		mov	[esp+4Ch+var_3C], 0CACh
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 87h
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	esi, 32h
		jmp	loc_6E405638
; ---------------------------------------------------------------------------

loc_6E405A12:				; CODE XREF: sub_6E4055A0+28Ej
		mov	[esp+4Ch+var_34], ebp
		mov	ebp, [esp+4Ch+var_30]
		mov	ebx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_3C], 0CBDh
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 41h
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	dword ptr [ebx+34h], 5
		mov	edx, [esp+4Ch+var_34]
		jmp	loc_6E4056BF
; ---------------------------------------------------------------------------

loc_6E405A5A:				; CODE XREF: sub_6E4055A0+1A0j
		mov	[esp+4Ch+var_3C], 0C9Dh

loc_6E405A62:				; CODE XREF: sub_6E4055A0+603j
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 41h
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		jmp	loc_6E40564C
; ---------------------------------------------------------------------------

loc_6E405A8B:				; CODE XREF: sub_6E4055A0+39Aj
		cmp	dword ptr [ebx], 300h
		jz	short loc_6E405B11
		mov	eax, [ebx+0C8h]
		and	eax, 3
		cmp	eax, 3
		jz	loc_6E405B47
		mov	eax, [ebx+58h]
		mov	edx, [eax+178h]
		test	edx, edx
		jz	loc_6E405954
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E4118F0
		test	eax, eax
		jnz	loc_6E405954
		mov	esi, 50h
		jmp	loc_6E405638
; ---------------------------------------------------------------------------

loc_6E405AD0:				; CODE XREF: sub_6E4055A0+3AEj
		mov	eax, [ebx+0ECh]
		mov	[esp+4Ch+var_4C], eax
		call	sub_6E416A00
		mov	esi, eax
		mov	[esp+4Ch+var_3C], 0CDEh
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 0B2h
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		jmp	loc_6E405638
; ---------------------------------------------------------------------------

loc_6E405B11:				; CODE XREF: sub_6E4055A0+4F1j
		mov	[esp+4Ch+var_3C], 0CC9h
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 0B0h
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	esi, 28h
		jmp	loc_6E405638
; ---------------------------------------------------------------------------

loc_6E405B47:				; CODE XREF: sub_6E4055A0+4FFj
		mov	[esp+4Ch+var_3C], 0CD0h
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 0C7h
		mov	[esp+4Ch+var_48], 89h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	esi, 28h
		jmp	loc_6E405638
; ---------------------------------------------------------------------------

loc_6E405B7D:				; CODE XREF: sub_6E4055A0+3FAj
		call	sub_6E436FE0
		mov	[esi+98h], eax
		mov	esi, [ebx+0C0h]
		cmp	dword ptr [esi+98h], 0
		jnz	loc_6E4059A0
		mov	[esp+4Ch+var_3C], 0CEFh
		jmp	loc_6E405A62
sub_6E4055A0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+30h]
		cmp	dword ptr [ebx+34h], 2140h
		jz	short loc_6E405BE0

loc_6E405BC1:				; CODE XREF: .text:6E405C0Dj
		mov	dword ptr [esp+4], 16h
		mov	[esp], ebx
		call	sub_6E4157D0
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E405BE0:				; CODE XREF: .text:6E405BBFj
		mov	[esp], ebx
		call	sub_6E4348E0
		test	eax, eax
		jz	short loc_6E405C10

loc_6E405BEC:				; CODE XREF: .text:6E405C23j
		mov	[esp+4], eax
		mov	[esp], ebx
		call	sub_6E4160B0
		test	eax, eax
		jz	short loc_6E405C60
		mov	dword ptr [ebx+34h], 2141h
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+48h], 0
		jmp	short loc_6E405BC1
; ---------------------------------------------------------------------------
		align 10h

loc_6E405C10:				; CODE XREF: .text:6E405BEAj
		mov	edx, [ebx+58h]
		mov	edx, [edx+344h]
		cmp	dword ptr [edx+10h], 20h
		jnz	short loc_6E405C25
		test	byte ptr [edx+0Ch], 10h
		jz	short loc_6E405BEC

loc_6E405C25:				; CODE XREF: .text:6E405C1Dj
		mov	dword ptr [esp+10h], 0D18h

loc_6E405C2D:				; CODE XREF: .text:6E405C68j
		mov	dword ptr [esp+0Ch], offset aS3_srvr_c ; "s3_srvr.c"
		mov	dword ptr [esp+8], 44h
		mov	dword ptr [esp+4], 9Ah
		mov	dword ptr [esp], 14h
		call	ERR_put_error
		mov	dword ptr [ebx+34h], 5
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E405C60:				; CODE XREF: .text:6E405BFAj
		mov	dword ptr [esp+10h], 0D20h
		jmp	short loc_6E405C2D
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E405C70	proc near		; CODE XREF: sub_6E406650+743p

var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1AD		= byte ptr -1ADh
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= byte ptr -198h
var_197		= byte ptr -197h
var_188		= byte ptr -188h
var_187		= byte ptr -187h
var_178		= byte ptr -178h
var_EC		= byte ptr -0ECh
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1CCh
		mov	ebx, [esp+1DCh+arg_0]
		cmp	dword ptr [ebx+34h], 21F0h
		jz	short loc_6E405CB0

loc_6E405C8A:				; CODE XREF: sub_6E405C70+44Bj
		mov	[esp+1DCh+var_1D8], 16h
		mov	[esp+1DCh+var_1DC], ebx
		call	sub_6E4157D0
		add	esp, 1CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E405CB0:				; CODE XREF: sub_6E405C70+18j
		mov	eax, [ebx+170h]
		mov	[esp+1DCh+var_1BC], eax
		mov	eax, [ebx+0C0h]
		mov	[esp+1DCh+var_1D8], 0
		mov	[esp+1DCh+var_1DC], eax
		call	i2d_SSL_SESSION
		mov	edi, eax
		test	eax, eax
		jz	loc_6E4060F3
		cmp	eax, 0FF00h
		jg	loc_6E4060F3
		mov	[esp+1DCh+var_1D4], 0D49h
		mov	[esp+1DCh+var_1D8], offset aS3_srvr_c ;	"s3_srvr.c"
		mov	[esp+1DCh+var_1DC], eax
		call	CRYPTO_malloc
		mov	[esp+1DCh+var_1C0], eax
		test	eax, eax
		jz	loc_6E4060F3
		lea	ebp, [esp+1DCh+var_178]
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_CIPHER_CTX_init
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_CTX_init
		mov	esi, [esp+1DCh+var_1C0]
		mov	[esp+1DCh+var_1A8], esi
		mov	eax, [ebx+0C0h]
		lea	edx, [esp+1DCh+var_1A8]
		mov	[esp+1DCh+var_1D8], edx
		mov	[esp+1DCh+var_1DC], eax
		call	i2d_SSL_SESSION
		test	eax, eax
		jz	loc_6E4060D0
		mov	[esp+1DCh+var_1A4], esi
		mov	[esp+1DCh+var_1D4], edi
		lea	eax, [esp+1DCh+var_1A4]
		mov	[esp+1DCh+var_1D8], eax
		mov	[esp+1DCh+var_1DC], 0
		call	d2i_SSL_SESSION
		mov	esi, eax
		test	eax, eax
		jz	loc_6E4060D0
		mov	dword ptr [eax+44h], 0
		mov	[esp+1DCh+var_1D8], 0
		mov	[esp+1DCh+var_1DC], eax
		call	i2d_SSL_SESSION
		mov	[esp+1DCh+var_1B8], eax
		test	eax, eax
		jz	loc_6E4060C0
		cmp	edi, eax
		jl	loc_6E4060C0
		mov	eax, [esp+1DCh+var_1C0]
		mov	[esp+1DCh+var_1A8], eax
		lea	eax, [esp+1DCh+var_1A8]
		mov	[esp+1DCh+var_1D8], eax
		mov	[esp+1DCh+var_1DC], esi
		call	i2d_SSL_SESSION
		mov	[esp+1DCh+var_1DC], esi
		test	eax, eax
		jz	loc_6E406280
		call	SSL_SESSION_free
		mov	eax, [ebx+3Ch]
		mov	edi, [esp+1DCh+var_1B8]
		lea	edx, [edi+8Ah]
		mov	[esp+1DCh+var_1D8], edx
		mov	[esp+1DCh+var_1DC], eax
		call	BUF_MEM_grow
		test	eax, eax
		jz	loc_6E4060D0
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		lea	edx, [eax+1]
		mov	[esp+1DCh+var_1A8], edx
		mov	byte ptr [eax],	4
		add	[esp+1DCh+var_1A8], 3
		mov	eax, [esp+1DCh+var_1BC]
		mov	eax, [eax+138h]
		test	eax, eax
		jz	loc_6E406190
		mov	[esp+1DCh+var_1C8], 1
		lea	edx, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1CC], edx
		mov	[esp+1DCh+var_1D0], ebp
		lea	esi, [esp+1DCh+var_198]
		mov	[esp+1DCh+var_1B4], esi
		mov	[esp+1DCh+var_1D4], esi
		lea	edx, [esp+1DCh+var_188]
		mov	[esp+1DCh+var_1D8], edx
		mov	[esp+1DCh+var_1BC], edx
		mov	[esp+1DCh+var_1DC], ebx
		call	eax
		test	eax, eax
		mov	edx, [esp+1DCh+var_1BC]
		js	loc_6E4060D0

loc_6E405E4B:				; CODE XREF: sub_6E405C70+5C4j
		mov	eax, [esp+1DCh+var_1A8]
		lea	ecx, [eax+1]
		mov	[esp+1DCh+var_1A8], ecx
		mov	ecx, [ebx+6Ch]
		test	ecx, ecx
		jz	loc_6E406110
		xor	ecx, ecx

loc_6E405E63:				; CODE XREF: sub_6E405C70+4B5j
		mov	[eax], cl
		mov	eax, [esp+1DCh+var_1A8]
		lea	ecx, [eax+1]
		mov	[esp+1DCh+var_1A8], ecx
		mov	edi, [ebx+6Ch]
		test	edi, edi
		jnz	loc_6E406130
		mov	ecx, [ebx+0C0h]
		mov	di, [ecx+0AAh]
		and	edi, 0FFFFh
		mov	ecx, edi

loc_6E405E90:				; CODE XREF: sub_6E405C70+4C2j
		mov	[eax], cl
		mov	eax, [esp+1DCh+var_1A8]
		lea	ecx, [eax+1]
		mov	[esp+1DCh+var_1A8], ecx
		mov	esi, [ebx+6Ch]
		test	esi, esi
		jnz	loc_6E406150
		mov	ecx, [ebx+0C0h]
		mov	ecx, [ecx+0A8h]
		shr	ecx, 8

loc_6E405EB7:				; CODE XREF: sub_6E405C70+4E2j
		mov	[eax], cl
		mov	eax, [esp+1DCh+var_1A8]
		lea	ecx, [eax+1]
		mov	[esp+1DCh+var_1A8], ecx
		mov	ecx, [ebx+6Ch]
		test	ecx, ecx
		jnz	loc_6E406140
		mov	ecx, [ebx+0C0h]
		mov	cl, [ecx+0A8h]

loc_6E405EDB:				; CODE XREF: sub_6E405C70+4D2j
		mov	[eax], cl
		mov	ecx, [esp+1DCh+var_1A8]
		lea	eax, [ecx+2]
		mov	[esp+1DCh+var_1BC], eax
		mov	[esp+1DCh+var_1A8], eax
		mov	edi, eax
		mov	esi, edx
		mov	eax, 10h
		test	edi, 1
		jnz	loc_6E406260

loc_6E405F01:				; CODE XREF: sub_6E405C70+603j
		test	edi, 2
		jnz	loc_6E406240

loc_6E405F0D:				; CODE XREF: sub_6E405C70+5DFj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E405F25
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E405F25:				; CODE XREF: sub_6E405C70+2A8j
		test	al, 1
		jz	short loc_6E405F33
		mov	al, [esi+edx]
		mov	[esp+1DCh+var_1AD], al
		mov	[edi+edx], al

loc_6E405F33:				; CODE XREF: sub_6E405C70+2B7j
		add	[esp+1DCh+var_1A8], 10h
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_CIPHER_CTX_iv_length
		mov	edi, [esp+1DCh+var_1A8]
		mov	esi, [esp+1DCh+var_1B4]
		cmp	eax, 4
		jnb	loc_6E406160

loc_6E405F51:				; CODE XREF: sub_6E405C70+50Fj
		xor	edx, edx
		test	al, 2
		jz	short loc_6E405F62
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E405F62:				; CODE XREF: sub_6E405C70+2E5j
		test	al, 1
		jz	short loc_6E405F70
		mov	al, [esi+edx]
		mov	byte ptr [esp+1DCh+var_1B4], al
		mov	[edi+edx], al

loc_6E405F70:				; CODE XREF: sub_6E405C70+2F4j
		mov	esi, [esp+1DCh+var_1A8]
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_CIPHER_CTX_iv_length
		add	eax, esi
		mov	[esp+1DCh+var_1A8], eax
		mov	edi, [esp+1DCh+var_1B8]
		mov	[esp+1DCh+var_1CC], edi
		mov	edi, [esp+1DCh+var_1C0]
		mov	[esp+1DCh+var_1D0], edi
		lea	esi, [esp+1DCh+var_1A0]
		mov	[esp+1DCh+var_1D4], esi
		mov	[esp+1DCh+var_1D8], eax
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_EncryptUpdate
		test	eax, eax
		jz	loc_6E4060D0
		mov	eax, [esp+1DCh+var_1A8]
		add	eax, [esp+1DCh+var_1A0]
		mov	[esp+1DCh+var_1A8], eax
		mov	[esp+1DCh+var_1D4], esi
		mov	[esp+1DCh+var_1D8], eax
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_EncryptFinal
		test	eax, eax
		jz	loc_6E4060D0
		mov	eax, [esp+1DCh+var_1A8]
		add	eax, [esp+1DCh+var_1A0]
		mov	[esp+1DCh+var_1A8], eax
		mov	esi, [esp+1DCh+var_1BC]
		sub	eax, esi
		mov	[esp+1DCh+var_1D4], eax
		mov	[esp+1DCh+var_1D8], esi
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_Update
		test	eax, eax
		jz	loc_6E4060D0
		lea	eax, [esp+1DCh+var_19C]
		mov	[esp+1DCh+var_1D4], eax
		mov	eax, [esp+1DCh+var_1A8]
		mov	[esp+1DCh+var_1D8], eax
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_Final
		test	eax, eax
		jz	loc_6E4060D0
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_CIPHER_CTX_cleanup
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_CTX_cleanup
		mov	eax, [ebx+3Ch]
		mov	edx, [eax+4]
		mov	eax, [esp+1DCh+var_1A8]
		add	eax, [esp+1DCh+var_19C]
		sub	eax, edx
		mov	[esp+1DCh+var_1A0], eax
		lea	ecx, [edx+1]
		mov	[esp+1DCh+var_1A8], ecx
		sub	eax, 4
		sar	eax, 10h
		mov	[edx+1], al
		mov	eax, [esp+1DCh+var_1A0]
		sub	eax, 4
		sar	eax, 8
		mov	edx, [esp+1DCh+var_1A8]
		mov	[edx+1], al
		mov	al, byte ptr [esp+1DCh+var_1A0]
		sub	eax, 4
		mov	edx, [esp+1DCh+var_1A8]
		mov	[edx+2], al
		mov	edx, [esp+1DCh+var_1A8]
		mov	eax, [esp+1DCh+var_1A0]
		lea	ecx, [eax-0Ah]
		sar	ecx, 8
		mov	[edx+7], cl
		lea	ecx, [eax-0Ah]
		mov	[edx+8], cl
		add	edx, 9
		mov	[esp+1DCh+var_1A8], edx
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+34h], 21F1h
		mov	dword ptr [ebx+48h], 0
		mov	[esp+1DCh+var_1DC], edi
		call	CRYPTO_free
		jmp	loc_6E405C8A
; ---------------------------------------------------------------------------

loc_6E4060C0:				; CODE XREF: sub_6E405C70+11Dj
					; sub_6E405C70+125j
		mov	[esp+1DCh+var_1DC], esi
		call	SSL_SESSION_free
		nop
		lea	esi, [esi+0]

loc_6E4060D0:				; CODE XREF: sub_6E405C70+D4j
					; sub_6E405C70+FAj ...
		mov	eax, [esp+1DCh+var_1C0]
		mov	[esp+1DCh+var_1DC], eax
		call	CRYPTO_free
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_CIPHER_CTX_cleanup
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_CTX_cleanup

loc_6E4060F3:				; CODE XREF: sub_6E405C70+64j
					; sub_6E405C70+6Fj ...
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		add	esp, 1CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E406110:				; CODE XREF: sub_6E405C70+1EBj
		mov	ecx, [ebx+0C0h]
		movzx	edi, byte ptr [ecx+0ABh]
		and	edi, 0FFh
		mov	ecx, edi
		jmp	loc_6E405E63
; ---------------------------------------------------------------------------
		align 10h

loc_6E406130:				; CODE XREF: sub_6E405C70+205j
		xor	ecx, ecx
		jmp	loc_6E405E90
; ---------------------------------------------------------------------------
		align 10h

loc_6E406140:				; CODE XREF: sub_6E405C70+259j
		xor	ecx, ecx
		jmp	loc_6E405EDB
; ---------------------------------------------------------------------------
		align 10h

loc_6E406150:				; CODE XREF: sub_6E405C70+232j
		xor	ecx, ecx
		jmp	loc_6E405EB7
; ---------------------------------------------------------------------------
		align 10h

loc_6E406160:				; CODE XREF: sub_6E405C70+2DBj
		test	edi, 1
		jnz	loc_6E40629E

loc_6E40616C:				; CODE XREF: sub_6E405C70+63Cj
		test	edi, 2
		jnz	loc_6E40628A

loc_6E406178:				; CODE XREF: sub_6E405C70+629j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E405F51
; ---------------------------------------------------------------------------
		align 10h

loc_6E406190:				; CODE XREF: sub_6E405C70+195j
		mov	[esp+1DCh+var_1D8], 10h
		lea	eax, [esp+1DCh+var_198]
		mov	edi, eax
		mov	[esp+1DCh+var_1B4], eax
		mov	[esp+1DCh+var_1DC], eax
		call	RAND_bytes
		test	eax, eax
		jle	loc_6E4060D0
		call	EVP_aes_128_cbc
		mov	[esp+1DCh+var_1CC], edi
		mov	esi, [esp+1DCh+var_1BC]
		mov	edx, esi
		add	edx, 128h
		mov	[esp+1DCh+var_1D0], edx
		mov	[esp+1DCh+var_1D4], 0
		mov	[esp+1DCh+var_1D8], eax
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_EncryptInit_ex
		test	eax, eax
		jz	loc_6E4060D0
		call	EVP_sha256
		mov	[esp+1DCh+var_1CC], 0
		mov	[esp+1DCh+var_1D0], eax
		mov	[esp+1DCh+var_1D4], 10h
		lea	eax, [esi+118h]
		mov	[esp+1DCh+var_1D8], eax
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_Init_ex
		test	eax, eax
		jz	loc_6E4060D0
		lea	edx, [esp+1DCh+var_188]
		add	esi, 108h
		mov	ecx, 4
		mov	edi, edx
		rep movsd
		jmp	loc_6E405E4B
; ---------------------------------------------------------------------------
		align 10h

loc_6E406240:				; CODE XREF: sub_6E405C70+297j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E405F0D
; ---------------------------------------------------------------------------
		align 10h

loc_6E406260:				; CODE XREF: sub_6E405C70+28Bj
		mov	al, [esp+1DCh+var_188]
		mov	[ecx+2], al
		lea	edi, [ecx+3]
		lea	esi, [esp+1DCh+var_187]
		mov	eax, 0Fh
		jmp	loc_6E405F01
; ---------------------------------------------------------------------------
		align 10h

loc_6E406280:				; CODE XREF: sub_6E405C70+148j
		call	SSL_SESSION_free
		jmp	loc_6E4060D0
; ---------------------------------------------------------------------------

loc_6E40628A:				; CODE XREF: sub_6E405C70+502j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E406178
; ---------------------------------------------------------------------------

loc_6E40629E:				; CODE XREF: sub_6E405C70+4F6j
		mov	dl, [esi]
		mov	byte ptr [esp+1DCh+var_1B4], dl
		mov	[edi], dl
		inc	edi
		lea	esi, [esp+1DCh+var_197]
		dec	eax
		jmp	loc_6E40616C
sub_6E405C70	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E4062C0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4062C0	proc near		; CODE XREF: .text:6E4062B1j
					; sub_6E406650+382p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_D		= byte ptr -0Dh
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		cmp	dword ptr [ebx+34h], 2200h
		jz	short loc_6E4062F0

loc_6E4062D3:				; CODE XREF: sub_6E4062C0+E8j
		mov	[esp+1Ch+var_18], 16h
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E4157D0

loc_6E4062E3:				; CODE XREF: sub_6E4062C0+14Cj
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4062F0:				; CODE XREF: sub_6E4062C0+11j
		mov	eax, [ebx+3Ch]
		mov	esi, [ebx+13Ch]
		lea	edx, [esi+8]
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], eax
		call	BUF_MEM_grow
		test	eax, eax
		jz	loc_6E406400
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	byte ptr [eax],	16h
		mov	ecx, [ebx+13Ch]
		lea	edx, [ecx+4]
		sar	edx, 10h
		mov	[eax+1], dl
		mov	edi, [ebx+13Ch]
		lea	edx, [edi+4]
		sar	edx, 8
		mov	[eax+2], dl
		movzx	esi, byte ptr [ebx+13Ch]
		lea	edx, [esi+4]
		mov	[eax+3], dl
		mov	edx, [ebx+128h]
		mov	[eax+4], dl
		mov	edx, [ebx+13Ch]
		sar	edx, 10h
		mov	[eax+5], dl
		mov	edx, [ebx+13Ch]
		sar	edx, 8
		mov	[eax+6], dl
		mov	edx, [ebx+13Ch]
		mov	[eax+7], dl
		mov	edx, [ebx+13Ch]
		lea	edi, [eax+8]
		mov	esi, [ebx+138h]
		cmp	edx, 4
		jnb	short loc_6E4063E0
		xor	eax, eax
		test	dl, 2
		jnz	short loc_6E4063C0

loc_6E406389:				; CODE XREF: sub_6E4062C0+13Cj
		and	edx, 1
		jnz	short loc_6E4063B0

loc_6E40638E:				; CODE XREF: sub_6E4062C0+FAj
					; sub_6E4062C0+10Ej
		mov	eax, [ebx+13Ch]
		add	eax, 8
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+34h], 2201h
		mov	dword ptr [ebx+48h], 0
		jmp	loc_6E4062D3
; ---------------------------------------------------------------------------
		align 10h

loc_6E4063B0:				; CODE XREF: sub_6E4062C0+CCj
					; sub_6E4062C0+110j
		mov	cl, [esi+eax]
		mov	[esp+1Ch+var_D], cl
		mov	[edi+eax], cl
		jmp	short loc_6E40638E
; ---------------------------------------------------------------------------
		align 10h

loc_6E4063C0:				; CODE XREF: sub_6E4062C0+C7j
					; sub_6E4062C0+13Ej
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2
		and	edx, 1
		jz	short loc_6E40638E
		jmp	short loc_6E4063B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4063E0:				; CODE XREF: sub_6E4062C0+C0j
		test	edi, 1
		jnz	short loc_6E406440

loc_6E4063E8:				; CODE XREF: sub_6E4062C0+18Aj
		test	edi, 2
		jnz	short loc_6E406420

loc_6E4063F0:				; CODE XREF: sub_6E4062C0+16Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		xor	eax, eax
		test	dl, 2
		jz	short loc_6E406389
		jmp	short loc_6E4063C0
; ---------------------------------------------------------------------------

loc_6E406400:				; CODE XREF: sub_6E4062C0+4Aj
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4062E3
; ---------------------------------------------------------------------------
		jmp	short loc_6E406420
; ---------------------------------------------------------------------------
		align 10h

loc_6E406420:				; CODE XREF: sub_6E4062C0+12Ej
					; sub_6E4062C0+151j
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	short loc_6E4063F0
; ---------------------------------------------------------------------------
		jmp	short loc_6E406440
; ---------------------------------------------------------------------------
		align 10h

loc_6E406440:				; CODE XREF: sub_6E4062C0+126j
					; sub_6E4062C0+171j
		mov	cl, [esi]
		mov	[eax+8], cl
		lea	edi, [eax+9]
		inc	esi
		dec	edx
		jmp	short loc_6E4063E8
sub_6E4062C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E406450	proc near		; CODE XREF: sub_6E406650+C34p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	esi, [eax+41Ch]
		test	esi, esi
		jz	loc_6E4065A0
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		lea	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_38], edx
		mov	[esp+4Ch+var_3C], 202h
		mov	[esp+4Ch+var_40], 43h
		mov	[esp+4Ch+var_44], 2211h
		mov	[esp+4Ch+var_48], 2210h
		mov	[esp+4Ch+var_4C], ebx
		call	eax
		mov	ecx, [esp+4Ch+var_20]
		test	ecx, ecx
		jz	short loc_6E4064EE
		mov	edx, [ebx+58h]
		mov	edx, [edx+180h]
		test	edx, edx
		jz	loc_6E4065DD
		dec	eax
		jle	short loc_6E4064E5
		mov	ecx, [ebx+40h]
		mov	dl, [ecx]
		mov	ebp, edx
		and	ebp, 0FFh
		mov	eax, [ebx+44h]
		lea	esi, [ebp+1]
		cmp	esi, eax
		jge	short loc_6E4064E5
		movzx	esi, byte ptr [ecx+ebp+1]
		and	esi, 0FFh
		lea	esi, [ebp+esi+2]
		cmp	eax, esi
		jz	short loc_6E406500

loc_6E4064E5:				; CODE XREF: sub_6E406450+69j
					; sub_6E406450+80j ...
		mov	dword ptr [ebx+34h], 5
		xor	eax, eax

loc_6E4064EE:				; CODE XREF: sub_6E406450+55j
					; sub_6E406450+10Aj ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E406500:				; CODE XREF: sub_6E406450+93j
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_34], ecx
		mov	[esp+4Ch+var_44], 0E35h
		mov	[esp+4Ch+var_48], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_4C], ebp
		call	CRYPTO_malloc
		mov	[ebx+174h], eax
		test	eax, eax
		mov	ecx, [esp+4Ch+var_34]
		mov	edx, [esp+4Ch+var_30]
		jz	loc_6E4065F7
		mov	edi, eax
		lea	esi, [ecx+1]
		cmp	ebp, 4
		jnb	short loc_6E406580

loc_6E406540:				; CODE XREF: sub_6E406450+14Bj
		xor	eax, eax
		test	ebp, 2
		jnz	short loc_6E406570

loc_6E40654A:				; CODE XREF: sub_6E406450+12Bj
		and	ebp, 1
		jnz	short loc_6E406560

loc_6E40654F:				; CODE XREF: sub_6E406450+11Aj
		mov	[ebx+178h], dl
		mov	eax, 1
		jmp	short loc_6E4064EE
; ---------------------------------------------------------------------------
		align 10h

loc_6E406560:				; CODE XREF: sub_6E406450+FDj
		mov	cl, [esi+eax]
		mov	byte ptr [esp+4Ch+var_34], cl
		mov	[edi+eax], cl
		jmp	short loc_6E40654F
; ---------------------------------------------------------------------------
		align 10h

loc_6E406570:				; CODE XREF: sub_6E406450+F8j
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2
		jmp	short loc_6E40654A
; ---------------------------------------------------------------------------
		align 10h

loc_6E406580:				; CODE XREF: sub_6E406450+EEj
		test	al, 1
		jnz	loc_6E40663C

loc_6E406588:				; CODE XREF: sub_6E406450+1F6j
		test	edi, 2
		jnz	loc_6E406628

loc_6E406594:				; CODE XREF: sub_6E406450+1E7j
		mov	ecx, ebp
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E406540
; ---------------------------------------------------------------------------
		align 10h

loc_6E4065A0:				; CODE XREF: sub_6E406450+16j
		mov	[esp+4Ch+var_3C], 0E03h
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 164h

loc_6E4065B8:				; CODE XREF: sub_6E406450+1A5j
		mov	[esp+4Ch+var_48], 132h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4064EE
; ---------------------------------------------------------------------------

loc_6E4065DD:				; CODE XREF: sub_6E406450+62j
		mov	[esp+4Ch+var_3C], 0E17h
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 163h
		jmp	short loc_6E4065B8
; ---------------------------------------------------------------------------

loc_6E4065F7:				; CODE XREF: sub_6E406450+E0j
		mov	[esp+4Ch+var_3C], 0E37h
		mov	[esp+4Ch+var_40], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+4Ch+var_44], 41h
		mov	[esp+4Ch+var_48], 132h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		jmp	loc_6E4064E5
; ---------------------------------------------------------------------------

loc_6E406628:				; CODE XREF: sub_6E406450+13Ej
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	ebp, 2
		jmp	loc_6E406594
; ---------------------------------------------------------------------------

loc_6E40663C:				; CODE XREF: sub_6E406450+132j
		mov	al, [ecx+1]
		mov	[edi], al
		inc	edi
		lea	esi, [ecx+2]
		dec	ebp
		jmp	loc_6E406588
sub_6E406450	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E406650	proc near		; DATA XREF: sub_6E406650+E69o
					; .rdata:6E44B050o ...

Time		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_0]
		mov	[esp+58h+Time],	0 ; Time
		call	time
		mov	[ebp+var_20], eax
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_54], 4
		lea	eax, [ebp+var_20]
		mov	[esp+58h+Time],	eax
		call	RAND_add
		call	ERR_clear_error
		mov	[esp+58h+Time],	0 ; dwErrCode
		call	ds:SetLastError
		push	esi
		mov	eax, [ebx+0D0h]
		mov	[ebp+var_2C], eax
		test	eax, eax
		jz	loc_6E407420

loc_6E4066B2:				; CODE XREF: sub_6E406650+DDFj
		inc	dword ptr [ebx+1Ch]
		mov	[esp+58h+Time],	ebx
		call	SSL_state
		test	ah, 30h
		jz	loc_6E4067D0
		mov	[esp+58h+Time],	ebx
		call	SSL_state
		test	ah, 40h
		jnz	loc_6E4067D0

loc_6E4066D7:				; CODE XREF: sub_6E406650+188j
		mov	ecx, [ebx+98h]
		test	ecx, ecx
		jz	loc_6E4075D3
		mov	edx, [ebx+188h]
		test	edx, edx
		jnz	loc_6E406D70
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E406700:				; CODE XREF: sub_6E406650+177j
					; sub_6E406650+408j ...
		mov	esi, [ebx+34h]

loc_6E406703:				; CODE XREF: sub_6E406650+434j
					; sub_6E406650+45Aj
		cmp	esi, 2181h
		jg	loc_6E4067E0
		cmp	esi, 2180h
		jge	loc_6E407140
		cmp	esi, 2131h
		jg	loc_6E406A00
		cmp	esi, 2130h
		jge	loc_6E406F90
		cmp	esi, 2112h
		jg	loc_6E406B60
		cmp	esi, 2110h
		jge	loc_6E407180
		cmp	esi, 2000h
		jz	loc_6E406C66
		jle	loc_6E406D20
		cmp	esi, 2003h
		jz	loc_6E406C66
		cmp	esi, 2100h
		jnz	loc_6E406FD0
		mov	dword ptr [ebx+18h], 2
		mov	eax, [ebx+10h]
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0Bh
		mov	[esp+58h+Time],	eax
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E4073A7
		mov	dword ptr [ebx+18h], 1
		mov	ecx, [ebx+58h]
		mov	eax, [ecx+350h]
		mov	[ebx+34h], eax

loc_6E4067BA:				; CODE XREF: sub_6E406650+2B8j
					; sub_6E406650+39Cj ...
		cmp	dword ptr [ecx+354h], 0
		jz	loc_6E406A66
		jmp	loc_6E406700
; ---------------------------------------------------------------------------
		align 10h

loc_6E4067D0:				; CODE XREF: sub_6E406650+70j
					; sub_6E406650+81j
		mov	[esp+58h+Time],	ebx
		call	SSL_clear
		jmp	loc_6E4066D7
; ---------------------------------------------------------------------------
		align 10h

loc_6E4067E0:				; CODE XREF: sub_6E406650+B9j
		cmp	esi, 21E1h
		jg	loc_6E406990
		cmp	esi, 21E0h
		jge	loc_6E407210
		cmp	esi, 21A1h
		jg	loc_6E406AB0
		cmp	esi, 21A0h
		jge	loc_6E407040
		lea	eax, [esi-2190h]
		cmp	eax, 1
		ja	loc_6E406FD0
		mov	[esp+58h+Time],	ebx
		call	sub_6E403B20
		test	eax, eax
		jle	loc_6E406960
		cmp	eax, 2
		jz	loc_6E407050
		mov	eax, [ebx]
		mov	edx, eax
		sar	edx, 8
		mov	dword ptr [ebx+34h], 21A0h
		mov	dword ptr [ebx+44h], 0
		cmp	edx, 3
		jz	loc_6E4073C9

loc_6E406856:				; CODE XREF: sub_6E406650+D7Ej
		mov	ecx, [ebx+58h]
		mov	edi, [ecx+178h]
		test	edi, edi
		jz	short loc_6E406876
		mov	[esp+58h+Time],	ebx
		call	sub_6E4118F0
		test	eax, eax
		jz	loc_6E40740C
		mov	ecx, [ebx+58h]

loc_6E406876:				; CODE XREF: sub_6E406650+211j
		xor	edi, edi
		mov	[ebp+var_30], 0
		mov	[ebp+var_38], esi
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E406890:				; CODE XREF: sub_6E406650+2B3j
		mov	eax, [ecx+17Ch]
		mov	eax, [eax+edi]
		test	eax, eax
		jz	short loc_6E4068FD
		mov	edx, [ebx+8]
		mov	edx, [edx+64h]
		mov	esi, [edx+1Ch]
		mov	edx, [ebp+var_30]
		lea	ecx, [ecx+edx+1B4h]
		mov	[ebp+var_34], ecx
		mov	[esp+58h+Time],	eax
		call	EVP_MD_CTX_md
		mov	[esp+58h+Time],	eax
		call	EVP_MD_type
		mov	ecx, [ebp+var_34]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+Time],	ebx
		call	esi
		mov	eax, [ebx+58h]
		mov	eax, [eax+17Ch]
		mov	eax, [eax+edi]
		mov	[esp+58h+Time],	eax
		call	EVP_MD_CTX_md
		mov	[esp+58h+Time],	eax
		call	EVP_MD_size
		test	eax, eax
		js	loc_6E4073A0
		add	[ebp+var_30], eax
		mov	ecx, [ebx+58h]

loc_6E4068FD:				; CODE XREF: sub_6E406650+24Bj
		add	edi, 4
		cmp	edi, 18h
		jnz	short loc_6E406890
		mov	esi, [ebp+var_38]
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------

loc_6E40690D:				; CODE XREF: sub_6E406650+EC1j
		mov	edx, [ebx+58h]
		mov	edx, [edx+344h]
		cmp	dword ptr [edx+10h], 20h
		jnz	short loc_6E406926
		test	byte ptr [edx+0Ch], 10h
		jz	loc_6E407517

loc_6E406926:				; CODE XREF: sub_6E406650+2CAj
		mov	[esp+58h+var_48], 0D18h

loc_6E40692E:				; CODE XREF: sub_6E406650+FCEj
		mov	[esp+58h+var_4C], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+58h+var_50], 44h
		mov	[esp+58h+var_54], 9Ah
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	dword ptr [ebx+34h], 5
		xor	eax, eax
		nop
		lea	esi, [esi+0]

loc_6E406960:				; CODE XREF: sub_6E406650+1D9j
					; sub_6E406650+389j ...
		dec	dword ptr [ebx+1Ch]
		mov	edx, [ebp+var_2C]
		test	edx, edx
		jz	short loc_6E406984

loc_6E40696A:				; CODE XREF: sub_6E406650+E94j
		mov	[esp+58h+var_50], eax
		mov	[ebp+var_30], eax
		mov	[esp+58h+var_54], 2002h
		mov	[esp+58h+Time],	ebx
		mov	eax, [ebp+var_2C]
		call	eax
		mov	eax, [ebp+var_30]

loc_6E406984:				; CODE XREF: sub_6E406650+318j
					; sub_6E406650+DC8j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E406990:				; CODE XREF: sub_6E406650+196j
		cmp	esi, 2211h
		jg	loc_6E406C40
		cmp	esi, 2210h
		jge	loc_6E407270
		cmp	esi, 21F0h
		jl	loc_6E406FD0
		cmp	esi, 21F1h
		jle	loc_6E406D90
		lea	eax, [esi-2200h]
		cmp	eax, 1
		ja	loc_6E406FD0
		mov	[esp+58h+Time],	ebx
		call	sub_6E4062C0
		test	eax, eax
		jle	short loc_6E406960
		mov	dword ptr [ebx+34h], 2150h

loc_6E4069E2:				; CODE XREF: sub_6E406650+833j
					; sub_6E406650+96Fj ...
		mov	dword ptr [ebx+44h], 0
		mov	ecx, [ebx+58h]
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		jmp	short loc_6E406A00
; ---------------------------------------------------------------------------
		align 10h

loc_6E406A00:				; CODE XREF: sub_6E406650+D1j
					; sub_6E406650+3A1j
		cmp	esi, 2151h
		jg	loc_6E406BA0
		cmp	esi, 2150h
		jge	loc_6E407080
		lea	eax, [esi-2140h]
		cmp	eax, 1
		ja	loc_6E406FD0
		mov	eax, [ebx+58h]
		mov	edx, [eax+344h]
		test	dword ptr [edx+10h], 424h
		jz	loc_6E4072B0

loc_6E406A3D:				; CODE XREF: sub_6E406650+C64j
		mov	dword ptr [ebx+34h], 2150h
		mov	edx, 1

loc_6E406A49:				; CODE XREF: sub_6E406650+A77j
					; sub_6E406650+CA8j ...
		mov	dword ptr [ebx+44h], 0
		mov	eax, [eax+354h]
		test	eax, eax
		jnz	loc_6E406700
		test	edx, edx
		jnz	loc_6E406700

loc_6E406A66:				; CODE XREF: sub_6E406650+171j
		mov	edi, [ebx+0E8h]
		test	edi, edi
		jnz	loc_6E407010

loc_6E406A74:				; CODE XREF: sub_6E406650+9E5j
		mov	ecx, [ebp+var_2C]
		test	ecx, ecx
		jz	loc_6E406700
		mov	edi, [ebx+34h]
		cmp	edi, esi
		jz	loc_6E406703
		mov	[ebx+34h], esi
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 2001h
		mov	[esp+58h+Time],	ebx
		mov	eax, [ebp+var_2C]
		call	eax
		mov	[ebx+34h], edi
		mov	esi, edi
		jmp	loc_6E406703
; ---------------------------------------------------------------------------
		align 10h

loc_6E406AB0:				; CODE XREF: sub_6E406650+1AEj
		cmp	esi, 21C0h
		jl	loc_6E406FD0
		cmp	esi, 21C1h
		jle	loc_6E406E40
		lea	eax, [esi-21D0h]
		cmp	eax, 1
		ja	loc_6E406FD0
		mov	eax, [ebx+0C0h]
		mov	edx, [ebx+58h]
		mov	edx, [edx+344h]
		mov	[eax+0B4h], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+8]
		mov	[esp+58h+Time],	ebx
		call	eax
		test	eax, eax
		jz	loc_6E4073A0
		mov	[esp+58h+var_50], 21D1h
		mov	[esp+58h+var_54], 21D0h
		mov	[esp+58h+Time],	ebx
		call	sub_6E415FB0
		test	eax, eax
		jle	loc_6E406960
		mov	dword ptr [ebx+34h], 21E0h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+10h]
		mov	[esp+58h+var_54], 22h
		mov	[esp+58h+Time],	ebx
		call	eax
		test	eax, eax
		jz	loc_6E4073A0

loc_6E406B4E:				; CODE XREF: sub_6E406650+D92j
					; sub_6E406650+DB6j
		mov	ecx, [ebx+58h]
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E406B60:				; CODE XREF: sub_6E406650+E9j
		cmp	esi, 2120h
		jl	loc_6E406FD0
		cmp	esi, 2121h
		jle	loc_6E406DC0
		cmp	esi, 2122h
		jnz	loc_6E406FD0
		mov	dword ptr [ebx+34h], 3
		mov	ecx, [ebx+58h]
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E406BA0:				; CODE XREF: sub_6E406650+3B6j
		cmp	esi, 2160h
		jl	loc_6E406FD0
		cmp	esi, 2161h
		jle	loc_6E406E90

loc_6E406BB8:				; CODE XREF: sub_6E406650+E25j
		lea	eax, [esi-2170h]
		cmp	eax, 1
		ja	loc_6E406FD0
		cmp	esi, 2170h
		jnz	short loc_6E406BF9
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	byte ptr [eax],	0Eh
		mov	byte ptr [eax+1], 0
		mov	byte ptr [eax+2], 0
		mov	byte ptr [eax+3], 0
		mov	dword ptr [ebx+34h], 2171h
		mov	dword ptr [ebx+44h], 4
		mov	dword ptr [ebx+48h], 0

loc_6E406BF9:				; CODE XREF: sub_6E406650+57Dj
		mov	[esp+58h+var_54], 16h
		mov	[esp+58h+Time],	ebx
		call	sub_6E4157D0
		test	eax, eax
		jle	loc_6E406960
		mov	ecx, [ebx+58h]
		mov	dword ptr [ecx+350h], 2180h
		mov	dword ptr [ebx+34h], 2100h
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		jmp	short loc_6E406C40
; ---------------------------------------------------------------------------
		align 10h

loc_6E406C40:				; CODE XREF: sub_6E406650+346j
					; sub_6E406650+5E1j
		cmp	esi, 4000h
		jz	short loc_6E406C66
		cmp	esi, 6000h
		jz	short loc_6E406C66
		cmp	esi, 3004h
		jnz	loc_6E406FD0
		mov	dword ptr [ebx+190h], 1

loc_6E406C66:				; CODE XREF: sub_6E406650+101j
					; sub_6E406650+113j ...
		mov	dword ptr [ebx+24h], 1
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	short loc_6E406C89
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 10h
		mov	[esp+58h+Time],	ebx
		call	eax

loc_6E406C89:				; CODE XREF: sub_6E406650+622j
		mov	eax, [ebx]
		sar	eax, 8
		cmp	eax, 3
		jnz	loc_6E407596
		mov	dword ptr [ebx+4], 2000h
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jz	loc_6E407440

loc_6E406CA9:				; CODE XREF: sub_6E406650+E1Aj
		mov	[esp+58h+Time],	ebx
		call	sub_6E416DB0
		test	eax, eax
		jz	loc_6E4073A0
		mov	dword ptr [ebx+44h], 0
		mov	ecx, [ebx+58h]
		and	dword ptr [ecx], 0FFFFFF3Fh
		mov	dword ptr [ecx+180h], 0
		cmp	dword ptr [ebx+34h], 3004h
		jz	loc_6E406F20
		mov	[esp+58h+var_54], 1
		mov	[esp+58h+Time],	ebx
		call	sub_6E435D40
		test	eax, eax
		jz	loc_6E4073A0
		mov	[esp+58h+Time],	ebx
		call	sub_6E411760
		mov	dword ptr [ebx+34h], 2110h
		mov	eax, [ebx+0E4h]
		inc	dword ptr [eax+40h]
		mov	ecx, [ebx+58h]
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E406D20:				; CODE XREF: sub_6E406650+107j
		cmp	esi, 3
		jnz	loc_6E406FD0
		mov	[esp+58h+Time],	ebx
		call	sub_6E4114A0
		mov	eax, [ebx+3Ch]
		mov	[esp+58h+Time],	eax
		call	BUF_MEM_free
		mov	dword ptr [ebx+3Ch], 0
		mov	[esp+58h+Time],	ebx
		call	sub_6E435E90
		mov	dword ptr [ebx+44h], 0
		cmp	dword ptr [ebx+190h], 2
		jz	loc_6E40748F
		mov	eax, 1
		jmp	loc_6E406960
; ---------------------------------------------------------------------------
		align 10h

loc_6E406D70:				; CODE XREF: sub_6E406650+9Dj
		mov	dword ptr [ebx+188h], 0
		inc	dword ptr [ebx+18Ch]
		jmp	loc_6E406700
; ---------------------------------------------------------------------------
		align 10h

loc_6E406D90:				; CODE XREF: sub_6E406650+36Aj
		mov	[esp+58h+Time],	ebx
		call	sub_6E405C70
		test	eax, eax
		jle	loc_6E406960
		mov	dword ptr [ebx+34h], 21D0h
		mov	dword ptr [ebx+44h], 0
		mov	ecx, [ebx+58h]
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E406DC0:				; CODE XREF: sub_6E406650+522j
		mov	dword ptr [ebx+30h], 0
		cmp	esi, 2120h
		jnz	short loc_6E406DF9
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	byte ptr [eax],	0
		mov	byte ptr [eax+1], 0
		mov	byte ptr [eax+2], 0
		mov	byte ptr [eax+3], 0
		mov	dword ptr [ebx+34h], 2121h
		mov	dword ptr [ebx+44h], 4
		mov	dword ptr [ebx+48h], 0

loc_6E406DF9:				; CODE XREF: sub_6E406650+77Dj
		mov	[esp+58h+var_54], 16h
		mov	[esp+58h+Time],	ebx
		call	sub_6E4157D0
		test	eax, eax
		jle	loc_6E406960
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+350h], 2122h
		mov	dword ptr [ebx+34h], 2100h
		mov	dword ptr [ebx+44h], 0
		mov	[esp+58h+Time],	ebx
		call	sub_6E411760
		mov	ecx, [ebx+58h]
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E406E40:				; CODE XREF: sub_6E406650+472j
		mov	eax, [ebx+58h]
		mov	edx, [eax+180h]
		test	edx, edx
		jz	loc_6E407300

loc_6E406E51:				; CODE XREF: sub_6E406650+CB6j
		mov	[esp+58h+var_50], 21C1h
		mov	[esp+58h+var_54], 21C0h
		mov	[esp+58h+Time],	ebx
		call	sub_6E415C90
		test	eax, eax
		jle	loc_6E406960
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	loc_6E406FAB
		mov	dword ptr [ebx+34h], 3
		jmp	loc_6E4069E2
; ---------------------------------------------------------------------------
		align 10h

loc_6E406E90:				; CODE XREF: sub_6E406650+562j
		mov	edx, [ebx+0C8h]
		test	dl, 1
		jz	loc_6E406F50
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+9Ch]
		test	eax, eax
		jz	short loc_6E406EB8
		test	dl, 4
		jnz	loc_6E406F50

loc_6E406EB8:				; CODE XREF: sub_6E406650+85Dj
		mov	eax, [ebx+58h]
		mov	ecx, [eax+344h]
		test	byte ptr [ecx+10h], 4
		jz	short loc_6E406ED0
		and	edx, 2
		jz	loc_6E406F53

loc_6E406ED0:				; CODE XREF: sub_6E406650+875j
		test	dword ptr [ecx+10h], 420h
		jnz	short loc_6E406F53
		test	byte ptr [ecx+0Dh], 1
		jnz	short loc_6E406F53
		mov	dword ptr [eax+390h], 1
		mov	[esp+58h+Time],	ebx
		call	sub_6E403800
		test	eax, eax
		jle	loc_6E406960
		mov	dword ptr [ebx+34h], 2100h
		mov	ecx, [ebx+58h]
		mov	dword ptr [ecx+350h], 2180h
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E406F20:				; CODE XREF: sub_6E406650+68Aj
		mov	eax, [ecx+418h]
		test	eax, eax
		jnz	short loc_6E406F37
		test	byte ptr [ebx+102h], 4
		jz	loc_6E407541

loc_6E406F37:				; CODE XREF: sub_6E406650+8D8j
		mov	eax, [ebx+0E4h]
		inc	dword ptr [eax+44h]
		mov	dword ptr [ebx+34h], 2120h
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E406F50:				; CODE XREF: sub_6E406650+849j
					; sub_6E406650+862j
		mov	eax, [ebx+58h]

loc_6E406F53:				; CODE XREF: sub_6E406650+87Aj
					; sub_6E406650+887j ...
		mov	dword ptr [eax+390h], 0
		mov	dword ptr [ebx+34h], 2170h
		mov	eax, [eax+178h]
		test	eax, eax
		jz	loc_6E407470
		mov	[esp+58h+Time],	ebx
		call	sub_6E4118F0
		test	eax, eax
		jnz	loc_6E406700
		jmp	loc_6E40740C
; ---------------------------------------------------------------------------
		align 10h

loc_6E406F90:				; CODE XREF: sub_6E406650+DDj
		mov	[esp+58h+Time],	ebx
		call	sub_6E4024C0
		test	eax, eax
		jle	loc_6E406960
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	loc_6E407320

loc_6E406FAB:				; CODE XREF: sub_6E406650+826j
		cmp	dword ptr [ebx+140h], 1
		sbb	eax, eax
		and	eax, 0FFFFFFE0h
		add	eax, 21F0h
		mov	[ebx+34h], eax
		jmp	loc_6E4069E2
; ---------------------------------------------------------------------------
		align 10h

loc_6E406FD0:				; CODE XREF: sub_6E406650+11Fj
					; sub_6E406650+1C9j ...
		mov	[esp+58h+var_48], 364h
		mov	[esp+58h+var_4C], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+58h+var_50], 0FFh
		mov	[esp+58h+var_54], 80h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E406960
; ---------------------------------------------------------------------------
		align 10h

loc_6E407010:				; CODE XREF: sub_6E406650+41Ej
		mov	eax, [ebx+10h]
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0Bh
		mov	[esp+58h+Time],	eax
		call	BIO_ctrl
		test	eax, eax
		jg	loc_6E406A74
		jmp	loc_6E406960
; ---------------------------------------------------------------------------

loc_6E407040:				; CODE XREF: sub_6E406650+1BAj
		mov	[esp+58h+Time],	ebx
		call	sub_6E404D90
		test	eax, eax
		jle	loc_6E406960

loc_6E407050:				; CODE XREF: sub_6E406650+1E2j
		mov	ecx, [ebx+58h]
		cmp	dword ptr [ecx+41Ch], 1
		sbb	eax, eax
		and	eax, 0FFFFFFB0h
		add	eax, 2210h
		mov	[ebx+34h], eax
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E407080:				; CODE XREF: sub_6E406650+3C2j
		mov	eax, [ebx+58h]
		mov	ecx, [eax+344h]
		mov	edx, [ecx+0Ch]
		mov	dword ptr [eax+370h], 0
		test	dh, 1
		jz	short loc_6E4070D0
		mov	edi, [ebx+0E4h]
		mov	edi, [edi+14Ch]
		test	edi, edi
		jz	short loc_6E4070D0

loc_6E4070AB:				; CODE XREF: sub_6E406650+A86j
					; sub_6E406650+A98j ...
		mov	[esp+58h+Time],	ebx
		call	sub_6E402830
		test	eax, eax
		jle	loc_6E406960
		mov	eax, [ebx+58h]
		xor	edx, edx

loc_6E4070C0:				; CODE XREF: sub_6E406650+AE5j
		mov	dword ptr [ebx+34h], 2160h
		jmp	loc_6E406A49
; ---------------------------------------------------------------------------
		align 10h

loc_6E4070D0:				; CODE XREF: sub_6E406650+A49j
					; sub_6E406650+A59j
		test	edx, 48Eh
		jnz	short loc_6E4070AB
		and	edx, 1
		jz	short loc_6E407130
		mov	edx, [ebx+98h]
		mov	edx, [edx+34h]
		test	edx, edx
		jz	short loc_6E4070AB
		test	byte ptr [ecx+20h], 2
		jz	short loc_6E407130
		mov	[esp+58h+Time],	edx
		call	EVP_PKEY_size
		lea	ecx, ds:0[eax*8]
		mov	eax, [ebx+58h]
		mov	edx, [eax+344h]
		mov	edx, [edx+20h]
		and	edx, 8
		cmp	edx, 1
		sbb	edx, edx
		and	edx, 200h
		add	edx, 200h
		cmp	edx, ecx
		jl	short loc_6E4070AB
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E407130:				; CODE XREF: sub_6E406650+A8Bj
					; sub_6E406650+A9Ej
		mov	edx, 1
		jmp	short loc_6E4070C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E407140:				; CODE XREF: sub_6E406650+C5j
		mov	[esp+58h+Time],	ebx
		call	sub_6E401570
		test	eax, eax
		jle	loc_6E406960
		cmp	eax, 2
		jz	loc_6E407480
		mov	ecx, [ebx+58h]
		mov	edi, [ecx+390h]
		test	edi, edi
		jnz	loc_6E4073B1

loc_6E40716A:				; CODE XREF: sub_6E406650+D74j
		mov	dword ptr [ebx+44h], 0
		mov	dword ptr [ebx+34h], 2190h
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E407180:				; CODE XREF: sub_6E406650+F5j
		mov	dword ptr [ebx+30h], 0
		cmp	dword ptr [ebx+18h], 4
		jz	short loc_6E40719D
		mov	[esp+58h+Time],	ebx
		call	sub_6E401670
		test	eax, eax
		jle	loc_6E406960

loc_6E40719D:				; CODE XREF: sub_6E406650+B3Bj
		mov	[ebp+var_1C], 70h
		mov	ecx, [ebx+58h]
		mov	eax, [ecx+344h]
		test	byte ptr [eax+0Dh], 4
		jz	short loc_6E4071EB
		mov	eax, [ebx+198h]
		test	eax, eax
		jz	short loc_6E4071EB
		mov	eax, [ebx+1A4h]
		test	eax, eax
		jz	loc_6E407350
		lea	eax, [ebp+var_1C]
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+Time],	ebx
		call	SSL_srp_server_param_with_username
		test	eax, eax
		js	loc_6E4075C7
		jnz	loc_6E407357
		mov	ecx, [ebx+58h]

loc_6E4071EB:				; CODE XREF: sub_6E406650+B61j
					; sub_6E406650+B6Bj
		mov	dword ptr [ebx+190h], 2
		mov	dword ptr [ebx+34h], 2130h
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E407210:				; CODE XREF: sub_6E406650+1A2j
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	edx, [eax+2Ch]
		mov	eax, [eax+28h]
		mov	[esp+58h+var_48], edx
		mov	[esp+58h+var_4C], eax
		mov	[esp+58h+var_50], 21E1h
		mov	[esp+58h+var_54], 21E0h
		mov	[esp+58h+Time],	ebx
		call	sub_6E4158D0
		test	eax, eax
		jle	loc_6E406960
		mov	dword ptr [ebx+34h], 2100h
		mov	eax, [ebx+6Ch]
		test	eax, eax
		mov	ecx, [ebx+58h]
		jnz	loc_6E407330
		mov	dword ptr [ecx+350h], 3

loc_6E407263:				; CODE XREF: sub_6E406650+CF7j
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E407270:				; CODE XREF: sub_6E406650+352j
		mov	eax, [ebx+58h]
		mov	ecx, [eax+180h]
		test	ecx, ecx
		jz	loc_6E407310

loc_6E407281:				; CODE XREF: sub_6E406650+CC6j
		mov	[esp+58h+Time],	ebx
		call	sub_6E406450
		test	eax, eax
		jle	loc_6E406960
		mov	dword ptr [ebx+44h], 0
		mov	dword ptr [ebx+34h], 21C0h
		mov	ecx, [ebx+58h]
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E4072B0:				; CODE XREF: sub_6E406650+3E7j
		test	byte ptr [edx+0Dh], 1
		jnz	loc_6E406A3D
		cmp	esi, 2140h
		jz	loc_6E407507

loc_6E4072C6:				; CODE XREF: sub_6E406650+EECj
		mov	[esp+58h+var_54], 16h
		mov	[esp+58h+Time],	ebx
		call	sub_6E4157D0
		test	eax, eax
		jle	loc_6E406960
		mov	eax, [ebx+12Ch]
		test	eax, eax
		jz	loc_6E4074E9
		mov	dword ptr [ebx+34h], 2200h
		mov	eax, [ebx+58h]
		xor	edx, edx
		jmp	loc_6E406A49
; ---------------------------------------------------------------------------
		align 10h

loc_6E407300:				; CODE XREF: sub_6E406650+7FBj
		or	dword ptr [eax], 80h
		jmp	loc_6E406E51
; ---------------------------------------------------------------------------
		align 10h

loc_6E407310:				; CODE XREF: sub_6E406650+C2Bj
		or	dword ptr [eax], 80h
		jmp	loc_6E407281
; ---------------------------------------------------------------------------
		align 10h

loc_6E407320:				; CODE XREF: sub_6E406650+955j
		mov	dword ptr [ebx+34h], 2140h
		jmp	loc_6E4069E2
; ---------------------------------------------------------------------------
		align 10h

loc_6E407330:				; CODE XREF: sub_6E406650+C03j
		cmp	dword ptr [ecx+41Ch], 1
		sbb	eax, eax
		and	eax, 0FFFFFFB0h
		add	eax, 2210h
		mov	[ecx+350h], eax
		jmp	loc_6E407263
; ---------------------------------------------------------------------------
		align 10h

loc_6E407350:				; CODE XREF: sub_6E406650+B75j
		mov	[ebp+var_1C], 73h

loc_6E407357:				; CODE XREF: sub_6E406650+B92j
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E4151B0
		cmp	[ebp+var_1C], 73h
		jz	short loc_6E4073A0
		mov	[esp+58h+var_48], 181h
		mov	[esp+58h+var_4C], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+58h+var_50], 0E2h
		mov	[esp+58h+var_54], 80h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error

loc_6E4073A0:				; CODE XREF: sub_6E406650+2A1j
					; sub_6E406650+4ACj ...
		mov	dword ptr [ebx+34h], 5

loc_6E4073A7:				; CODE XREF: sub_6E406650+151j
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E406960
; ---------------------------------------------------------------------------

loc_6E4073B1:				; CODE XREF: sub_6E406650+B14j
		mov	[esp+58h+Time],	ebx
		call	sub_6E4055A0
		test	eax, eax
		jle	loc_6E406960
		mov	ecx, [ebx+58h]
		jmp	loc_6E40716A
; ---------------------------------------------------------------------------

loc_6E4073C9:				; CODE XREF: sub_6E406650+200j
		cmp	eax, 302h
		jle	loc_6E406856
		mov	eax, [ebx+0C0h]
		mov	ecx, [eax+9Ch]
		test	ecx, ecx
		jz	loc_6E406B4E
		mov	eax, [ebx+58h]
		mov	edx, [eax+178h]
		test	edx, edx
		jz	loc_6E407623
		or	dword ptr [eax], 20h
		mov	[esp+58h+Time],	ebx
		call	sub_6E4118F0
		test	eax, eax
		jnz	loc_6E406B4E

loc_6E40740C:				; CODE XREF: sub_6E406650+21Dj
					; sub_6E406650+932j ...
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E406984
; ---------------------------------------------------------------------------
		align 10h

loc_6E407420:				; CODE XREF: sub_6E406650+5Cj
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+9Ch]
		mov	[ebp+var_2C], eax
		jmp	loc_6E4066B2
; ---------------------------------------------------------------------------
		align 10h

loc_6E407440:				; CODE XREF: sub_6E406650+653j
		call	BUF_MEM_new
		mov	edi, eax
		test	eax, eax
		jz	loc_6E4073A0
		mov	[esp+58h+var_54], 4000h
		mov	[esp+58h+Time],	eax
		call	BUF_MEM_grow
		test	eax, eax
		jz	loc_6E407609
		mov	[ebx+3Ch], edi
		jmp	loc_6E406CA9
; ---------------------------------------------------------------------------
		align 10h

loc_6E407470:				; CODE XREF: sub_6E406650+91Cj
		mov	esi, 2170h
		jmp	loc_6E406BB8
; ---------------------------------------------------------------------------
		align 10h

loc_6E407480:				; CODE XREF: sub_6E406650+B03j
		mov	dword ptr [ebx+34h], 2112h
		mov	ecx, [ebx+58h]
		jmp	loc_6E4067BA
; ---------------------------------------------------------------------------

loc_6E40748F:				; CODE XREF: sub_6E406650+709j
		mov	dword ptr [ebx+190h], 0
		mov	dword ptr [ebx+28h], 0
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E4350C0
		mov	eax, [ebx+0E4h]
		inc	dword ptr [eax+48h]
		mov	dword ptr [ebx+20h], offset sub_6E406650
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	short loc_6E4074FA
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 20h
		mov	[esp+58h+Time],	ebx
		call	eax
		dec	dword ptr [ebx+1Ch]
		mov	eax, 1
		jmp	loc_6E40696A
; ---------------------------------------------------------------------------

loc_6E4074E9:				; CODE XREF: sub_6E406650+C96j
		mov	dword ptr [ebx+34h], 2150h
		mov	eax, [ebx+58h]
		xor	edx, edx
		jmp	loc_6E406A49
; ---------------------------------------------------------------------------

loc_6E4074FA:				; CODE XREF: sub_6E406650+E75j
		dec	dword ptr [ebx+1Ch]
		mov	eax, 1
		jmp	loc_6E406984
; ---------------------------------------------------------------------------

loc_6E407507:				; CODE XREF: sub_6E406650+C70j
		mov	[esp+58h+Time],	ebx
		call	sub_6E4348E0
		test	eax, eax
		jz	loc_6E40690D

loc_6E407517:				; CODE XREF: sub_6E406650+2D0j
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+Time],	ebx
		call	sub_6E4160B0
		test	eax, eax
		jz	loc_6E407616
		mov	dword ptr [ebx+34h], 2141h
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+48h], 0
		jmp	loc_6E4072C6
; ---------------------------------------------------------------------------

loc_6E407541:				; CODE XREF: sub_6E406650+8E1j
		mov	[esp+58h+var_48], 145h
		mov	[esp+58h+var_4C], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+58h+var_50], 152h
		mov	[esp+58h+var_54], 80h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	[esp+58h+var_50], 28h
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E4151B0
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E406960
; ---------------------------------------------------------------------------

loc_6E407596:				; CODE XREF: sub_6E406650+641j
		mov	[esp+58h+var_48], 10Ch

loc_6E40759E:				; CODE XREF: sub_6E406650+FDBj
		mov	[esp+58h+var_4C], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+58h+var_50], 44h
		mov	[esp+58h+var_54], 80h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		jmp	loc_6E40740C
; ---------------------------------------------------------------------------

loc_6E4075C7:				; CODE XREF: sub_6E406650+B8Cj
		mov	dword ptr [ebx+18h], 4
		jmp	loc_6E406960
; ---------------------------------------------------------------------------

loc_6E4075D3:				; CODE XREF: sub_6E406650+8Fj
		mov	[esp+58h+var_48], 0EBh
		mov	[esp+58h+var_4C], offset aS3_srvr_c ; "s3_srvr.c"
		mov	[esp+58h+var_50], 0B3h
		mov	[esp+58h+var_54], 80h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E406984
; ---------------------------------------------------------------------------

loc_6E407609:				; CODE XREF: sub_6E406650+E11j
		mov	[esp+58h+Time],	edi
		call	BUF_MEM_free
		jmp	loc_6E4073A0
; ---------------------------------------------------------------------------

loc_6E407616:				; CODE XREF: sub_6E406650+ED5j
		mov	[esp+58h+var_48], 0D20h
		jmp	loc_6E40692E
; ---------------------------------------------------------------------------

loc_6E407623:				; CODE XREF: sub_6E406650+DA3j
		mov	[esp+58h+var_48], 280h
		jmp	loc_6E40759E
sub_6E406650	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E407630	proc near		; DATA XREF: .rdata:6E44B1FCo

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 300h
		jnz	short loc_6E407640
		mov	eax, offset dword_6E44B1A0
		retn
; ---------------------------------------------------------------------------

loc_6E407640:				; CODE XREF: sub_6E407630+8j
		xor	eax, eax
		retn
sub_6E407630	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6E407650:				; DATA XREF: sub_6E40A320+DCo
		mov	eax, [esp+8]
		mov	edx, [eax]
		mov	eax, [esp+4]
		mov	eax, [eax]
		mov	[esp+8], edx
		mov	[esp+4], eax
		jmp	X509_NAME_cmp
; ---------------------------------------------------------------------------
		align 10h
; Exported entry 116. SSLv3_client_method

; =============== S U B	R O U T	I N E =======================================


		public SSLv3_client_method
SSLv3_client_method proc near		; CODE XREF: sub_6E419430:loc_6E419470j
					; sub_6E4194A0+720p
		mov	eax, offset dword_6E44B1A0
		retn
SSLv3_client_method endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E407680	proc near		; CODE XREF: sub_6E40D250+58Dp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [ebx+3Ch]
		mov	ebp, [eax+4]
		cmp	dword ptr [ebx+34h], 1110h
		jnz	loc_6E407892
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	short loc_6E4076B2
		mov	edx, [ebx]
		cmp	[eax], edx
		jz	loc_6E407990

loc_6E4076B2:				; CODE XREF: sub_6E407680+26j
					; sub_6E407680+31Fj ...
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E438670
		test	eax, eax
		jz	loc_6E407A12

loc_6E4076CA:				; CODE XREF: sub_6E407680+333j
		mov	[esp+3Ch+var_30], 20h
		mov	eax, [ebx+58h]
		add	eax, 0C0h
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E41A3F0
		test	eax, eax
		jle	loc_6E407A12
		lea	eax, [ebp+4]
		mov	[esp+3Ch+var_20], eax
		mov	eax, [ebx+110h]
		sar	eax, 8
		mov	[ebp+4], al
		mov	eax, [ebx+110h]
		mov	[ebp+5], al
		mov	edx, [ebx+58h]
		lea	edi, [ebp+6]
		lea	esi, [edx+0C0h]
		mov	eax, 20h
		test	edi, 1
		jnz	loc_6E407A30

loc_6E40772F:				; CODE XREF: sub_6E407680+3C7j
		test	edi, 2
		jnz	loc_6E407A50

loc_6E40773B:				; CODE XREF: sub_6E407680+3DFj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_6E407930
		test	al, 1
		jnz	loc_6E407910

loc_6E407754:				; CODE XREF: sub_6E407680+2BDj
		mov	eax, [ebx+28h]
		test	eax, eax
		jz	loc_6E4078B0

loc_6E40775F:				; CODE XREF: sub_6E407680+29Fj
		lea	eax, [ebp+27h]
		mov	[esp+3Ch+var_28], eax
		mov	byte ptr [ebp+26h], 0

loc_6E40776A:				; CODE XREF: sub_6E407680+245j
					; sub_6E407680+282j ...
		mov	eax, [esp+3Ch+var_28]
		lea	esi, [eax+2]
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_get_ciphers
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4321C0
		test	eax, eax
		jz	loc_6E407A92
		mov	edx, eax
		sar	edx, 8
		mov	ecx, [esp+3Ch+var_28]
		mov	[ecx], dl
		mov	[ecx+1], al
		add	esi, eax
		test	byte ptr [ebx+102h], 2
		jnz	short loc_6E407820
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	short loc_6E407820
		mov	[esp+3Ch+var_3C], eax
		call	sk_num
		mov	ecx, eax
		lea	edx, [esi+1]
		mov	[esp+3Ch+var_28], edx
		inc	eax
		mov	[esi], al
		test	ecx, ecx
		jle	short loc_6E40782A
		xor	edi, edi
		mov	[esp+3Ch+var_24], ebp
		mov	ebp, ebx
		mov	ebx, ecx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4077F0:				; CODE XREF: sub_6E407680+191j
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+98h]
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], eax
		call	sk_value
		mov	eax, [eax]
		mov	[esi+edi+1], al
		inc	edi
		cmp	edi, ebx
		jnz	short loc_6E4077F0
		mov	ebx, ebp
		mov	ebp, [esp+3Ch+var_24]
		add	[esp+3Ch+var_28], edi
		jmp	short loc_6E40782A
; ---------------------------------------------------------------------------
		align 10h

loc_6E407820:				; CODE XREF: sub_6E407680+130j
					; sub_6E407680+140j
		lea	eax, [esi+1]
		mov	[esp+3Ch+var_28], eax
		mov	byte ptr [esi],	1

loc_6E40782A:				; CODE XREF: sub_6E407680+158j
					; sub_6E407680+19Dj
		mov	eax, [esp+3Ch+var_28]
		lea	esi, [eax+1]
		mov	byte ptr [eax],	0
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E41CEF0
		test	eax, eax
		jle	loc_6E407AC3
		lea	eax, [ebp+4000h]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E41B270
		test	eax, eax
		jz	loc_6E407AF4
		mov	edx, eax
		sub	edx, [esp+3Ch+var_20]
		mov	byte ptr [ebp+0], 1
		mov	ecx, edx
		shr	ecx, 10h
		mov	[ebp+1], cl
		mov	ecx, edx
		shr	ecx, 8
		mov	[ebp+2], cl
		mov	[ebp+3], dl
		mov	dword ptr [ebx+34h], 1111h
		sub	eax, ebp
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+48h], 0

loc_6E407892:				; CODE XREF: sub_6E407680+18j
		mov	[esp+3Ch+var_38], 16h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4157D0

loc_6E4078A2:				; CODE XREF: sub_6E407680+39Ej
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4078B0:				; CODE XREF: sub_6E407680+D9j
					; sub_6E407680+2A5j
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+44h]
		lea	esi, [ebp+27h]
		mov	[esp+3Ch+var_28], esi
		mov	[ebp+26h], al
		test	eax, eax
		jz	loc_6E40776A
		cmp	eax, 20h
		jg	loc_6E4079E6
		mov	edx, [ebx+0C0h]
		mov	[esp+3Ch+var_24], eax
		mov	edi, [esp+3Ch+var_28]
		lea	esi, [edx+48h]
		cmp	eax, 4
		jnb	loc_6E4079C0

loc_6E4078EE:				; CODE XREF: sub_6E407680+361j
		xor	edx, edx
		test	byte ptr [esp+3Ch+var_24], 2
		jnz	short loc_6E407970
		test	byte ptr [esp+3Ch+var_24], 1
		jnz	short loc_6E407950

loc_6E4078FE:				; CODE XREF: sub_6E407680+300j
		add	[esp+3Ch+var_28], eax
		jmp	loc_6E40776A
; ---------------------------------------------------------------------------
		align 10h

loc_6E407910:				; CODE XREF: sub_6E407680+CEj
					; sub_6E407680+2C3j
		mov	al, [esi+edx]
		mov	byte ptr [esp+3Ch+var_28], al
		mov	[edi+edx], al
		mov	eax, [ebx+28h]
		test	eax, eax
		jnz	loc_6E40775F
		jmp	short loc_6E4078B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E407930:				; CODE XREF: sub_6E407680+C6j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E407754
		jmp	short loc_6E407910
; ---------------------------------------------------------------------------
		align 10h

loc_6E407950:				; CODE XREF: sub_6E407680+27Cj
					; sub_6E407680+306j
		mov	cl, [esi+edx]
		mov	byte ptr [esp+3Ch+var_24], cl
		mov	[edi+edx], cl
		add	[esp+3Ch+var_28], eax
		jmp	loc_6E40776A
; ---------------------------------------------------------------------------
		align 10h

loc_6E407970:				; CODE XREF: sub_6E407680+275j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	byte ptr [esp+3Ch+var_24], 1
		jz	loc_6E4078FE
		jmp	short loc_6E407950
; ---------------------------------------------------------------------------
		align 10h

loc_6E407990:				; CODE XREF: sub_6E407680+2Cj
		mov	esi, [eax+44h]
		test	esi, esi
		jnz	short loc_6E4079A5
		mov	ecx, [eax+0E4h]
		test	ecx, ecx
		jz	loc_6E4076B2

loc_6E4079A5:				; CODE XREF: sub_6E407680+315j
		mov	edx, [eax+94h]
		test	edx, edx
		jnz	loc_6E4076B2
		jmp	loc_6E4076CA
; ---------------------------------------------------------------------------
		align 10h

loc_6E4079C0:				; CODE XREF: sub_6E407680+268j
		test	edi, 1
		jnz	loc_6E407A7A

loc_6E4079CC:				; CODE XREF: sub_6E407680+40Dj
		test	edi, 2
		jnz	loc_6E407A64

loc_6E4079D8:				; CODE XREF: sub_6E407680+3F5j
		mov	ecx, [esp+3Ch+var_24]
		shr	ecx, 2
		rep movsd
		jmp	loc_6E4078EE
; ---------------------------------------------------------------------------

loc_6E4079E6:				; CODE XREF: sub_6E407680+24Ej
		mov	[esp+3Ch+var_2C], 2F9h

loc_6E4079EE:				; CODE XREF: sub_6E407680+47Cj
		mov	[esp+3Ch+var_30], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+3Ch+var_34], 44h
		mov	[esp+3Ch+var_38], 83h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error

loc_6E407A12:				; CODE XREF: sub_6E407680+44j
					; sub_6E407680+70j ...
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4078A2
; ---------------------------------------------------------------------------
		align 10h

loc_6E407A30:				; CODE XREF: sub_6E407680+A9j
		mov	al, [edx+0C0h]
		mov	[ebp+6], al
		lea	edi, [ebp+7]
		lea	esi, [edx+0C1h]
		mov	eax, 1Fh
		jmp	loc_6E40772F
; ---------------------------------------------------------------------------
		align 10h

loc_6E407A50:				; CODE XREF: sub_6E407680+B5j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40773B
; ---------------------------------------------------------------------------

loc_6E407A64:				; CODE XREF: sub_6E407680+352j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	[esp+3Ch+var_24], 2
		jmp	loc_6E4079D8
; ---------------------------------------------------------------------------

loc_6E407A7A:				; CODE XREF: sub_6E407680+346j
		mov	cl, [edx+48h]
		mov	[ebp+27h], cl
		lea	edi, [ebp+28h]
		lea	esi, [edx+49h]
		lea	edx, [eax-1]
		mov	[esp+3Ch+var_24], edx
		jmp	loc_6E4079CC
; ---------------------------------------------------------------------------

loc_6E407A92:				; CODE XREF: sub_6E407680+113j
		mov	[esp+3Ch+var_2C], 303h
		mov	[esp+3Ch+var_30], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+3Ch+var_34], 0B5h
		mov	[esp+3Ch+var_38], 83h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		jmp	loc_6E407A12
; ---------------------------------------------------------------------------

loc_6E407AC3:				; CODE XREF: sub_6E407680+1BEj
		mov	[esp+3Ch+var_2C], 328h
		mov	[esp+3Ch+var_30], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+3Ch+var_34], 0E2h
		mov	[esp+3Ch+var_38], 83h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		jmp	loc_6E407A12
; ---------------------------------------------------------------------------

loc_6E407AF4:				; CODE XREF: sub_6E407680+1DCj
		mov	[esp+3Ch+var_2C], 32Fh
		jmp	loc_6E4079EE
sub_6E407680	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E407B10
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E407B10	proc near		; CODE XREF: .text:6E407B01j
					; sub_6E40D250+117p ...

Buf1		= dword	ptr -5Ch
Buf2		= dword	ptr -58h
Size		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		lea	edx, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_48], edx
		mov	[esp+5Ch+var_4C], 4E20h
		mov	[esp+5Ch+var_50], 0FFFFFFFFh
		mov	[esp+5Ch+Size],	1121h
		mov	[esp+5Ch+Buf2],	1120h
		mov	[esp+5Ch+Buf1],	ebx
		call	eax
		mov	[esp+5Ch+var_38], eax
		mov	ebp, [esp+5Ch+var_24]
		test	ebp, ebp
		jnz	short loc_6E407B70

loc_6E407B5A:				; CODE XREF: sub_6E407B10+301j
					; sub_6E407B10+37Ej
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E407B70:				; CODE XREF: sub_6E407B10+48j
		mov	[esp+5Ch+Buf1],	ebx
		call	SSL_version
		cmp	eax, 0FEFFh
		jz	loc_6E407E60
		mov	[esp+5Ch+Buf1],	ebx
		call	SSL_version
		cmp	eax, 100h
		jz	loc_6E407E60
		mov	edx, [ebx+58h]
		mov	eax, [edx+340h]

loc_6E407B9F:				; CODE XREF: sub_6E407B10+35Cj
		cmp	eax, 2
		jnz	loc_6E408180
		mov	ebp, [ebx+40h]
		mov	[esp+5Ch+var_2C], ebp
		mov	eax, [ebx]
		movzx	esi, byte ptr [ebp+0]
		and	esi, 0FFh
		mov	ecx, eax
		sar	ecx, 8
		cmp	esi, ecx
		jnz	loc_6E407FD0
		cmp	[ebp+1], al
		jnz	loc_6E407FD0
		lea	esi, [ebp+2]
		mov	[esp+5Ch+var_2C], esi
		lea	edi, [edx+0A0h]
		mov	eax, 20h
		test	edi, 1
		jnz	loc_6E408160

loc_6E407BEF:				; CODE XREF: sub_6E407B10+667j
		test	edi, 2
		jnz	loc_6E408140

loc_6E407BFB:				; CODE XREF: sub_6E407B10+63Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_6E407EB0
		test	al, 1
		jnz	loc_6E407EA0

loc_6E407C14:				; CODE XREF: sub_6E407B10+39Aj
					; sub_6E407B10+3ADj
		mov	eax, [esp+5Ch+var_2C]
		mov	dword ptr [ebx+6Ch], 0
		lea	edx, [eax+21h]
		mov	[esp+5Ch+var_2C], edx
		xor	edx, edx
		mov	dl, [eax+20h]
		cmp	edx, 20h
		ja	loc_6E40830A
		cmp	dword ptr [ebx], 300h
		jg	loc_6E407ED0

loc_6E407C40:				; CODE XREF: sub_6E407B10+3C8j
		mov	ecx, [ebx+0C0h]

loc_6E407C46:				; CODE XREF: sub_6E407B10+3DCj
					; sub_6E407B10+448j
		mov	eax, [ecx+44h]
		test	edx, edx
		jz	short loc_6E407C55
		cmp	eax, edx
		jz	loc_6E4080C0

loc_6E407C55:				; CODE XREF: sub_6E407B10+13Bj
		test	eax, eax
		jnz	loc_6E407F60

loc_6E407C5D:				; CODE XREF: sub_6E407B10+476j
		mov	[ecx+44h], edx
		mov	eax, edx
		lea	edi, [ecx+48h]
		mov	esi, [esp+5Ch+var_2C]
		cmp	edx, 4
		jnb	loc_6E407FA0

loc_6E407C72:				; CODE XREF: sub_6E407B10+4AFj
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E407C83
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E407C83:				; CODE XREF: sub_6E407B10+166j
		test	al, 1
		jz	short loc_6E407C91
		mov	al, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_34], al
		mov	[edi+ecx], al

loc_6E407C91:				; CODE XREF: sub_6E407B10+175j
		mov	eax, [esp+5Ch+var_2C]

loc_6E407C95:				; CODE XREF: sub_6E407B10+620j
		add	edx, eax
		mov	[esp+5Ch+var_2C], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+48h]
		mov	[esp+5Ch+Buf1],	edx
		call	eax
		mov	esi, eax
		test	eax, eax
		jz	loc_6E408436
		test	byte ptr [eax+1Ch], 4
		jz	short loc_6E407CD1
		mov	eax, [ebx]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jnz	loc_6E4081D2
		cmp	eax, 302h
		jle	loc_6E4081D2

loc_6E407CD1:				; CODE XREF: sub_6E407B10+1A4j
		test	byte ptr [esi+0Dh], 4
		jnz	short loc_6E407CDD
		test	byte ptr [esi+11h], 4
		jz	short loc_6E407CEA

loc_6E407CDD:				; CODE XREF: sub_6E407B10+1C5j
		test	byte ptr [ebx+1D1h], 4
		jz	loc_6E408347

loc_6E407CEA:				; CODE XREF: sub_6E407B10+1CBj
		mov	edi, [esp+5Ch+var_2C]
		mov	eax, [ebx+8]
		mov	eax, [eax+4Ch]
		mov	[esp+5Ch+Buf2],	0
		mov	[esp+5Ch+Buf1],	0
		call	eax
		add	edi, eax
		mov	[esp+5Ch+var_2C], edi
		mov	[esp+5Ch+Buf1],	ebx
		call	sub_6E431E80
		mov	[esp+5Ch+Buf2],	esi
		mov	[esp+5Ch+Buf1],	eax
		call	sk_find
		test	eax, eax
		js	loc_6E408391
		mov	edx, [ebx+0C0h]
		mov	eax, [edx+0B4h]
		test	eax, eax
		jz	short loc_6E407D40
		mov	eax, [eax+8]
		mov	[edx+0B8h], eax

loc_6E407D40:				; CODE XREF: sub_6E407B10+225j
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	short loc_6E407D56
		mov	edi, [esi+8]
		cmp	[edx+0B8h], edi
		jnz	loc_6E408253

loc_6E407D56:				; CODE XREF: sub_6E407B10+235j
		mov	edx, [ebx+58h]
		mov	[edx+344h], esi
		mov	edx, [ebx]
		mov	ecx, edx
		sar	ecx, 8
		cmp	ecx, 3
		jnz	short loc_6E407D73
		cmp	edx, 302h
		jg	short loc_6E407D86

loc_6E407D73:				; CODE XREF: sub_6E407B10+259j
		mov	[esp+5Ch+Buf1],	ebx
		call	sub_6E4118F0
		test	eax, eax
		jz	loc_6E4081C0
		mov	eax, [ebx+6Ch]

loc_6E407D86:				; CODE XREF: sub_6E407B10+261j
		mov	edx, [esp+5Ch+var_2C]
		lea	ecx, [edx+1]
		mov	[esp+5Ch+var_2C], ecx
		movzx	edi, byte ptr [edx]
		mov	edx, edi
		and	edx, 0FFh
		test	eax, eax
		jz	short loc_6E407DB2
		mov	eax, [ebx+0C0h]
		cmp	[eax+0B0h], edx
		jnz	loc_6E408290

loc_6E407DB2:				; CODE XREF: sub_6E407B10+28Ej
		test	edx, edx
		jz	loc_6E407F90
		test	byte ptr [ebx+102h], 2
		jnz	loc_6E4082CD
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+98h]
		mov	ecx, edi
		and	ecx, 0FFh
		mov	[esp+5Ch+Buf2],	ecx
		mov	[esp+5Ch+Buf1],	eax
		call	sub_6E43CF40
		test	eax, eax
		jz	loc_6E408473

loc_6E407DEF:				; CODE XREF: sub_6E407B10+482j
		mov	edx, [ebx+58h]
		mov	[edx+38Ch], eax
		cmp	dword ptr [ebx], 2FFh
		jg	loc_6E408050

loc_6E407E04:				; CODE XREF: sub_6E407B10+576j
		add	ebp, [esp+5Ch+var_38]
		mov	eax, 1
		cmp	[esp+5Ch+var_2C], ebp
		jz	loc_6E407B5A
		mov	[esp+5Ch+var_28], 32h
		mov	[esp+5Ch+var_4C], 43Fh
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	73h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
; ---------------------------------------------------------------------------
		align 10h

loc_6E407E60:				; CODE XREF: sub_6E407B10+6Dj
					; sub_6E407B10+80j
		mov	edx, [ebx+58h]
		mov	eax, [edx+340h]
		cmp	eax, 3
		jnz	loc_6E407B9F
		mov	eax, [ebx+5Ch]
		mov	edi, [eax]
		test	edi, edi
		jnz	loc_6E4083E3
		mov	dword ptr [edx+354h], 1
		mov	eax, 1
		jmp	loc_6E407B5A
; ---------------------------------------------------------------------------
		align 10h

loc_6E407EA0:				; CODE XREF: sub_6E407B10+FEj
					; sub_6E407B10+3B3j
		mov	al, [esi+edx]
		mov	byte ptr [esp+5Ch+var_34], al
		mov	[edi+edx], al
		jmp	loc_6E407C14
; ---------------------------------------------------------------------------
		align 10h

loc_6E407EB0:				; CODE XREF: sub_6E407B10+F6j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E407C14
		jmp	short loc_6E407EA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E407ED0:				; CODE XREF: sub_6E407B10+12Aj
		mov	eax, [ebx+168h]
		test	eax, eax
		jz	loc_6E407C40
		mov	ecx, [ebx+0C0h]
		mov	esi, [ecx+0E4h]
		test	esi, esi
		jz	loc_6E407C46
		mov	[esp+5Ch+var_34], edx
		mov	[esp+5Ch+var_20], 0
		mov	dword ptr [ecx+10h], 30h
		mov	esi, [ebx+16Ch]
		mov	[esp+5Ch+var_48], esi
		lea	esi, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_4C], esi
		mov	[esp+5Ch+var_50], 0
		lea	esi, [ecx+10h]
		mov	[esp+5Ch+Size],	esi
		add	ecx, 14h
		mov	[esp+5Ch+Buf2],	ecx
		mov	[esp+5Ch+Buf1],	ebx
		call	eax
		test	eax, eax
		jz	loc_6E4083F8
		mov	ecx, [ebx+0C0h]
		mov	esi, ecx
		mov	eax, [esp+5Ch+var_20]
		test	eax, eax
		mov	edx, [esp+5Ch+var_34]
		jz	loc_6E408233

loc_6E407F52:				; CODE XREF: sub_6E407B10+73Ej
		mov	[esi+0B4h], eax
		jmp	loc_6E407C46
; ---------------------------------------------------------------------------
		align 10h

loc_6E407F60:				; CODE XREF: sub_6E407B10+147j
					; sub_6E407B10+5D9j
		mov	[esp+5Ch+var_34], edx
		mov	[esp+5Ch+Buf2],	0
		mov	[esp+5Ch+Buf1],	ebx
		call	sub_6E438670
		test	eax, eax
		jz	loc_6E4081C0
		mov	ecx, [ebx+0C0h]
		mov	edx, [esp+5Ch+var_34]
		jmp	loc_6E407C5D
; ---------------------------------------------------------------------------
		align 10h

loc_6E407F90:				; CODE XREF: sub_6E407B10+2A4j
		xor	eax, eax
		jmp	loc_6E407DEF
; ---------------------------------------------------------------------------
		align 10h

loc_6E407FA0:				; CODE XREF: sub_6E407B10+15Cj
		test	edi, 1
		jnz	loc_6E408223

loc_6E407FAC:				; CODE XREF: sub_6E407B10+71Ej
		test	edi, 2
		jnz	loc_6E40820F

loc_6E407FB8:				; CODE XREF: sub_6E407B10+70Ej
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E407C72
; ---------------------------------------------------------------------------
		align 10h

loc_6E407FD0:				; CODE XREF: sub_6E407B10+B2j
					; sub_6E407B10+BBj
		mov	[esp+5Ch+var_4C], 370h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	10Ah
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_2C]
		movzx	edi, byte ptr [eax+1]
		and	edi, 0FFh
		mov	eax, edi
		mov	edx, [ebx]
		and	edx, 0FF00h
		or	eax, edx
		mov	[ebx], eax
		mov	[esp+5Ch+var_28], 46h
		mov	eax, 46h

loc_6E408025:				; CODE XREF: sub_6E407B10+33Fj
					; sub_6E407B10+6A8j ...
		mov	[esp+5Ch+Size],	eax
		mov	[esp+5Ch+Buf2],	2
		mov	[esp+5Ch+Buf1],	ebx
		call	sub_6E4151B0

loc_6E408039:				; CODE XREF: sub_6E407B10+5A8j
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E408050:				; CODE XREF: sub_6E407B10+2EEj
		lea	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_4C], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+Size],	ebp
		lea	eax, [esp+5Ch+var_2C]
		mov	[esp+5Ch+Buf2],	eax
		mov	[esp+5Ch+Buf1],	ebx
		call	sub_6E41C740
		test	eax, eax
		jz	loc_6E40835C
		mov	[esp+5Ch+Buf1],	ebx
		call	sub_6E41D5C0
		test	eax, eax
		jg	loc_6E407E04
		mov	[esp+5Ch+var_4C], 436h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	113h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		jmp	loc_6E408039
; ---------------------------------------------------------------------------
		align 10h

loc_6E4080C0:				; CODE XREF: sub_6E407B10+13Fj
		mov	esi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+Size],	edx ; Size
		mov	[esp+5Ch+var_30], edx
		lea	eax, [ecx+48h]
		mov	[esp+5Ch+var_34], ecx
		mov	[esp+5Ch+Buf2],	eax ; Buf2
		mov	[esp+5Ch+Buf1],	esi ; Buf1
		call	memcmp
		test	eax, eax
		mov	ecx, [esp+5Ch+var_34]
		mov	edx, [esp+5Ch+var_30]
		jnz	loc_6E407F60
		mov	[esp+5Ch+var_34], edx
		mov	eax, [ebx+9Ch]
		cmp	eax, [ecx+68h]
		jnz	loc_6E4083A6
		mov	[esp+5Ch+Size],	eax ; Size
		lea	eax, [ebx+0A0h]
		mov	[esp+5Ch+Buf2],	eax ; Buf2
		add	ecx, 6Ch
		mov	[esp+5Ch+Buf1],	ecx ; Buf1
		call	memcmp
		test	eax, eax
		mov	edx, [esp+5Ch+var_34]
		jnz	loc_6E4083A6
		mov	dword ptr [ebx+6Ch], 1
		mov	eax, esi
		jmp	loc_6E407C95
; ---------------------------------------------------------------------------
		align 10h

loc_6E408140:				; CODE XREF: sub_6E407B10+E5j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E407BFB
; ---------------------------------------------------------------------------
		align 10h

loc_6E408160:				; CODE XREF: sub_6E407B10+D9j
		mov	al, [ebp+2]
		mov	[edx+0A0h], al
		lea	edi, [edx+0A1h]
		lea	esi, [ebp+3]
		mov	eax, 1Fh
		jmp	loc_6E407BEF
; ---------------------------------------------------------------------------
		align 10h

loc_6E408180:				; CODE XREF: sub_6E407B10+92j
		mov	[esp+5Ch+var_28], 0Ah
		mov	[esp+5Ch+var_4C], 369h

loc_6E408190:				; CODE XREF: sub_6E407B10+8E3j
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	72h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
; ---------------------------------------------------------------------------
		align 10h

loc_6E4081C0:				; CODE XREF: sub_6E407B10+26Dj
					; sub_6E407B10+466j
		mov	[esp+5Ch+var_28], 50h
		mov	eax, 50h
		jmp	loc_6E408025
; ---------------------------------------------------------------------------

loc_6E4081D2:				; CODE XREF: sub_6E407B10+1B0j
					; sub_6E407B10+1BBj
		mov	[esp+5Ch+var_28], 2Fh
		mov	[esp+5Ch+var_4C], 3CDh

loc_6E4081E2:				; CODE XREF: sub_6E407B10+847j
					; sub_6E407B10+891j
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	105h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
; ---------------------------------------------------------------------------

loc_6E40820F:				; CODE XREF: sub_6E407B10+4A2j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E407FB8
; ---------------------------------------------------------------------------

loc_6E408223:				; CODE XREF: sub_6E407B10+496j
		mov	al, [esi]
		mov	[edi], al
		lea	edi, [ecx+49h]
		inc	esi
		lea	eax, [edx-1]
		jmp	loc_6E407FAC
; ---------------------------------------------------------------------------

loc_6E408233:				; CODE XREF: sub_6E407B10+43Cj
		mov	eax, [ebx+8]
		mov	eax, [eax+48h]
		mov	ecx, [esp+5Ch+var_2C]
		add	ecx, edx
		mov	[esp+5Ch+Buf1],	ecx
		call	eax
		mov	ecx, [ebx+0C0h]
		mov	edx, [esp+5Ch+var_34]
		jmp	loc_6E407F52
; ---------------------------------------------------------------------------

loc_6E408253:				; CODE XREF: sub_6E407B10+240j
		mov	[esp+5Ch+var_28], 2Fh
		mov	[esp+5Ch+var_4C], 3F2h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	0C5h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
; ---------------------------------------------------------------------------

loc_6E408290:				; CODE XREF: sub_6E407B10+29Cj
		mov	[esp+5Ch+var_28], 2Fh
		mov	[esp+5Ch+var_4C], 417h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	158h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
; ---------------------------------------------------------------------------

loc_6E4082CD:				; CODE XREF: sub_6E407B10+2B1j
		mov	[esp+5Ch+var_28], 2Fh
		mov	[esp+5Ch+var_4C], 41Eh
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	157h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
; ---------------------------------------------------------------------------

loc_6E40830A:				; CODE XREF: sub_6E407B10+11Ej
		mov	[esp+5Ch+var_28], 2Fh
		mov	[esp+5Ch+var_4C], 383h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	12Ch
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
; ---------------------------------------------------------------------------

loc_6E408347:				; CODE XREF: sub_6E407B10+1D4j
		mov	[esp+5Ch+var_28], 2Fh
		mov	[esp+5Ch+var_4C], 3D4h
		jmp	loc_6E4081E2
; ---------------------------------------------------------------------------

loc_6E40835C:				; CODE XREF: sub_6E407B10+566j
		mov	[esp+5Ch+var_4C], 432h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	0E3h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
; ---------------------------------------------------------------------------

loc_6E408391:				; CODE XREF: sub_6E407B10+211j
		mov	[esp+5Ch+var_28], 2Fh
		mov	[esp+5Ch+var_4C], 3DFh
		jmp	loc_6E4081E2
; ---------------------------------------------------------------------------

loc_6E4083A6:				; CODE XREF: sub_6E407B10+5ECj
					; sub_6E407B10+611j
		mov	[esp+5Ch+var_28], 2Fh
		mov	[esp+5Ch+var_4C], 3ACh
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	110h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
; ---------------------------------------------------------------------------

loc_6E4083E3:				; CODE XREF: sub_6E407B10+369j
		mov	[esp+5Ch+var_28], 0Ah
		mov	[esp+5Ch+var_4C], 361h
		jmp	loc_6E408190
; ---------------------------------------------------------------------------

loc_6E4083F8:				; CODE XREF: sub_6E407B10+424j
		mov	[esp+5Ch+var_4C], 39Eh
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	44h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	[esp+5Ch+var_28], 50h
		mov	eax, 50h
		jmp	loc_6E408025
; ---------------------------------------------------------------------------

loc_6E408436:				; CODE XREF: sub_6E407B10+19Aj
		mov	[esp+5Ch+var_28], 2Fh
		mov	[esp+5Ch+var_4C], 3C6h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	0F8h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
; ---------------------------------------------------------------------------

loc_6E408473:				; CODE XREF: sub_6E407B10+2D9j
		mov	[esp+5Ch+var_28], 2Fh
		mov	[esp+5Ch+var_4C], 426h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+Size],	101h
		mov	[esp+5Ch+Buf2],	92h
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+5Ch+var_28]
		jmp	loc_6E408025
sub_6E407B10	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E4084B0	proc near		; CODE XREF: sub_6E40D250+CA2p
					; sub_6E426500+B00p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		mov	edx, [ebx+108h]
		lea	ecx, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_48], ecx
		mov	[esp+5Ch+var_4C], edx
		mov	[esp+5Ch+var_50], 0FFFFFFFFh
		mov	[esp+5Ch+var_54], 1131h
		mov	[esp+5Ch+var_58], 1130h
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		mov	esi, eax
		mov	edi, [esp+5Ch+var_24]
		test	edi, edi
		jz	loc_6E4085B1
		mov	ecx, [ebx+58h]
		mov	edx, [ecx+340h]
		cmp	edx, 0Ch
		jz	loc_6E4085C0
		mov	eax, [ecx+344h]
		test	byte ptr [eax+10h], 20h
		jz	short loc_6E408525
		cmp	edx, 0Eh
		jz	loc_6E4085C0

loc_6E408525:				; CODE XREF: sub_6E4084B0+6Aj
		cmp	edx, 0Bh
		jz	loc_6E4085E0
		mov	[esp+5Ch+var_4C], 469h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 72h
		mov	[esp+5Ch+var_58], 90h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		xor	edi, edi
		mov	[esp+5Ch+var_38], 0
		xor	esi, esi
		mov	ebp, 0Ah

loc_6E40856B:				; CODE XREF: sub_6E4084B0+274j
					; sub_6E4084B0+2B5j ...
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebx
		call	sub_6E4151B0

loc_6E40857F:				; CODE XREF: sub_6E4084B0+444j
					; sub_6E4084B0+479j ...
		mov	dword ptr [ebx+34h], 5
		mov	ebx, 0FFFFFFFFh

loc_6E40858B:				; CODE XREF: sub_6E4084B0+3B0j
		mov	[esp+5Ch+var_5C], edi
		call	EVP_PKEY_free
		mov	[esp+5Ch+var_5C], esi
		call	X509_free
		mov	[esp+5Ch+var_58], offset X509_free
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	sk_pop_free
		mov	eax, ebx

loc_6E4085B1:				; CODE XREF: sub_6E4084B0+48j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4085C0:				; CODE XREF: sub_6E4084B0+5Aj
					; sub_6E4084B0+6Fj
		mov	dword ptr [ecx+354h], 1
		mov	eax, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4085E0:				; CODE XREF: sub_6E4084B0+78j
		mov	ebp, [ebx+40h]
		call	sk_new_null
		mov	[esp+5Ch+var_38], eax
		test	eax, eax
		jz	loc_6E4088F9
		xor	eax, eax
		mov	al, [ebp+0]
		mov	[esp+5Ch+var_3C], eax
		shl	[esp+5Ch+var_3C], 10h
		xor	eax, eax
		mov	al, [ebp+1]
		shl	eax, 8
		or	[esp+5Ch+var_3C], eax
		xor	eax, eax
		mov	al, [ebp+2]
		or	[esp+5Ch+var_3C], eax
		mov	eax, [esp+5Ch+var_3C]
		add	eax, 3
		cmp	eax, esi
		jnz	loc_6E408730
		mov	ecx, [esp+5Ch+var_3C]
		test	ecx, ecx
		jz	loc_6E40876E
		xor	edx, edx
		mov	dl, [ebp+3]
		shl	edx, 10h
		xor	eax, eax
		mov	al, [ebp+4]
		shl	eax, 8
		or	edx, eax
		xor	eax, eax
		mov	al, [ebp+5]
		or	edx, eax
		add	ebp, 6
		lea	edi, [edx+3]
		cmp	[esp+5Ch+var_3C], edi
		jb	loc_6E408869
		mov	[esp+5Ch+arg_0], ebx
		mov	ebx, edx
		jmp	short loc_6E4086CB
; ---------------------------------------------------------------------------
		align 10h

loc_6E408670:				; CODE XREF: sub_6E4084B0+23Bj
		add	ebx, ebp
		cmp	[esp+5Ch+var_20], ebx
		jnz	loc_6E408886
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	sk_push
		test	eax, eax
		jz	loc_6E4088C2
		mov	ecx, [esp+5Ch+var_20]
		cmp	[esp+5Ch+var_3C], edi
		jbe	loc_6E40876A
		xor	ebx, ebx
		mov	bl, [ecx]
		shl	ebx, 10h
		xor	eax, eax
		mov	al, [ecx+1]
		shl	eax, 8
		or	ebx, eax
		xor	eax, eax
		mov	al, [ecx+2]
		or	ebx, eax
		lea	ebp, [ecx+3]
		lea	edi, [ebx+edi+3]
		cmp	[esp+5Ch+var_3C], edi
		jb	loc_6E408865

loc_6E4086CB:				; CODE XREF: sub_6E4084B0+1B1j
		mov	[esp+5Ch+var_20], ebp
		mov	[esp+5Ch+var_54], ebx
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], 0
		call	d2i_X509
		mov	esi, eax
		test	eax, eax
		jnz	short loc_6E408670
		mov	ebx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_4C], 486h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 0Dh
		mov	[esp+5Ch+var_58], 90h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		xor	edi, edi
		mov	ebp, 2Ah
		jmp	loc_6E40856B
; ---------------------------------------------------------------------------
		align 10h

loc_6E408730:				; CODE XREF: sub_6E4084B0+170j
		mov	[esp+5Ch+var_4C], 476h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 9Fh

loc_6E408748:				; CODE XREF: sub_6E4084B0+3D1j
		mov	[esp+5Ch+var_58], 90h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		xor	edi, edi
		xor	esi, esi
		mov	ebp, 32h
		jmp	loc_6E40856B
; ---------------------------------------------------------------------------

loc_6E40876A:				; CODE XREF: sub_6E4084B0+1ECj
		mov	ebx, [esp+5Ch+arg_0]

loc_6E40876E:				; CODE XREF: sub_6E4084B0+17Cj
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	sub_6E4371C0
		mov	edx, [ebx+0C8h]
		test	edx, edx
		jz	short loc_6E408790
		test	eax, eax
		jle	loc_6E408A6D

loc_6E408790:				; CODE XREF: sub_6E4084B0+2D6j
		call	ERR_clear_error
		call	sub_6E436FE0
		mov	esi, eax
		test	eax, eax
		jz	loc_6E408A64
		mov	eax, [ebx+0C0h]
		mov	edx, [eax+98h]
		test	edx, edx
		jz	short loc_6E4087C2
		mov	[esp+5Ch+var_5C], edx
		call	sub_6E4370D0
		mov	eax, [ebx+0C0h]

loc_6E4087C2:				; CODE XREF: sub_6E4084B0+302j
		mov	[eax+98h], esi
		mov	eax, [esp+5Ch+var_38]
		mov	[esi], eax
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], eax
		call	sk_value
		mov	ebp, eax
		mov	[esp+5Ch+var_5C], eax
		call	X509_get_pubkey
		mov	edi, eax
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		test	byte ptr [eax+0Ch], 10h
		jz	loc_6E40892E
		test	byte ptr [eax+10h], 20h
		jz	loc_6E40892E
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E416910
		mov	[esi+4], eax
		mov	dword ptr [esi+8], 0
		mov	eax, [ebx+0C0h]
		mov	edx, [eax+9Ch]
		test	edx, edx
		jz	short loc_6E40883B
		mov	[esp+5Ch+var_5C], edx
		call	X509_free
		mov	eax, [ebx+0C0h]

loc_6E40883B:				; CODE XREF: sub_6E4084B0+37Bj
		mov	dword ptr [eax+9Ch], 0

loc_6E408845:				; CODE XREF: sub_6E4084B0+56Fj
		mov	edx, [ebx+0ECh]
		mov	[eax+0A0h], edx
		mov	[esp+5Ch+var_38], 0
		xor	esi, esi
		mov	ebx, 1
		jmp	loc_6E40858B
; ---------------------------------------------------------------------------

loc_6E408865:				; CODE XREF: sub_6E4084B0+215j
		mov	ebx, [esp+5Ch+arg_0]

loc_6E408869:				; CODE XREF: sub_6E4084B0+1A5j
		mov	[esp+5Ch+var_4C], 47Eh
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 87h
		jmp	loc_6E408748
; ---------------------------------------------------------------------------

loc_6E408886:				; CODE XREF: sub_6E4084B0+1C6j
		mov	ebx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_4C], 48Ch
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 87h
		mov	[esp+5Ch+var_58], 90h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		xor	edi, edi
		mov	ebp, 32h
		jmp	loc_6E40856B
; ---------------------------------------------------------------------------

loc_6E4088C2:				; CODE XREF: sub_6E4084B0+1DEj
		mov	ebx, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_4C], 490h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 41h
		mov	[esp+5Ch+var_58], 90h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E40857F
; ---------------------------------------------------------------------------

loc_6E4088F9:				; CODE XREF: sub_6E4084B0+13Ej
		mov	[esp+5Ch+var_4C], 46Fh
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 41h
		mov	[esp+5Ch+var_58], 90h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		xor	edi, edi
		xor	esi, esi
		jmp	loc_6E40857F
; ---------------------------------------------------------------------------

loc_6E40892E:				; CODE XREF: sub_6E4084B0+347j
					; sub_6E4084B0+351j
		test	edi, edi
		jz	loc_6E408A24
		mov	[esp+5Ch+var_5C], edi
		call	EVP_PKEY_missing_parameters
		test	eax, eax
		jnz	loc_6E408A24
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E416910
		mov	edx, eax
		test	eax, eax
		js	loc_6E408AB2
		mov	[esi+4], edx
		mov	[esp+5Ch+var_38], edx
		lea	eax, [ebp+10h]
		mov	[esp+5Ch+var_3C], eax
		mov	[esp+5Ch+var_4C], 4DCh
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], eax
		call	CRYPTO_add_lock
		mov	edx, [esp+5Ch+var_38]
		lea	eax, [edx+edx]
		mov	[esp+5Ch+var_38], eax
		add	eax, edx
		lea	eax, [esi+eax*4]
		mov	ecx, [eax+0Ch]
		test	ecx, ecx
		jz	short loc_6E4089C1
		mov	[esp+5Ch+var_30], eax
		mov	[esp+5Ch+var_34], edx
		mov	[esp+5Ch+var_5C], ecx
		call	X509_free
		mov	eax, [esp+5Ch+var_30]
		mov	edx, [esp+5Ch+var_34]

loc_6E4089C1:				; CODE XREF: sub_6E4084B0+4F7j
		mov	[eax+0Ch], ebp
		add	edx, [esp+5Ch+var_38]
		lea	eax, [esi+edx*4+0Ch]
		mov	[esi+8], eax
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+9Ch]
		test	eax, eax
		jz	short loc_6E4089E7
		mov	[esp+5Ch+var_5C], eax
		call	X509_free

loc_6E4089E7:				; CODE XREF: sub_6E4084B0+52Dj
		mov	[esp+5Ch+var_4C], 4E8h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+var_58], 1
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_5C], eax
		call	CRYPTO_add_lock
		mov	eax, [ebx+0C0h]
		mov	[eax+9Ch], ebp
		jmp	loc_6E408845
; ---------------------------------------------------------------------------

loc_6E408A24:				; CODE XREF: sub_6E4084B0+480j
					; sub_6E4084B0+490j
		mov	[esp+5Ch+var_4C], 4CDh
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 0EFh

loc_6E408A3C:				; CODE XREF: sub_6E4084B0+61Aj
		mov	[esp+5Ch+var_58], 90h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	[esp+5Ch+var_38], 0
		xor	esi, esi
		mov	ebp, 2
		jmp	loc_6E40856B
; ---------------------------------------------------------------------------

loc_6E408A64:				; CODE XREF: sub_6E4084B0+2EEj
		xor	edi, edi
		xor	esi, esi
		jmp	loc_6E40857F
; ---------------------------------------------------------------------------

loc_6E408A6D:				; CODE XREF: sub_6E4084B0+2DAj
		mov	eax, [ebx+0ECh]
		mov	[esp+5Ch+var_5C], eax
		call	sub_6E416A00
		mov	ebp, eax
		mov	[esp+5Ch+var_4C], 4A1h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 86h
		mov	[esp+5Ch+var_58], 90h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		xor	edi, edi
		xor	esi, esi
		jmp	loc_6E40856B
; ---------------------------------------------------------------------------

loc_6E408AB2:				; CODE XREF: sub_6E4084B0+4A6j
		mov	[esp+5Ch+var_4C], 4D6h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 0F7h
		jmp	loc_6E408A3C
sub_6E4084B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E408AD0	proc near		; CODE XREF: sub_6E40D250+20Dp
					; sub_6E426500+38Fp

var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= byte ptr -0B4h
var_9C		= byte ptr -9Ch
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0FCh
		mov	ebx, [esp+10Ch+arg_0]
		lea	esi, [esp+10Ch+var_B4]
		mov	[esp+10Ch+var_10C], esi
		call	EVP_MD_CTX_init
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		mov	edx, [ebx+108h]
		lea	ecx, [esp+10Ch+var_BC]
		mov	[esp+10Ch+var_F8], ecx
		mov	[esp+10Ch+var_FC], edx
		mov	[esp+10Ch+var_100], 0FFFFFFFFh
		mov	[esp+10Ch+var_104], 1141h
		mov	[esp+10Ch+var_108], 1140h
		mov	[esp+10Ch+var_10C], ebx
		call	eax
		mov	edi, eax
		mov	eax, [esp+10Ch+var_BC]
		test	eax, eax
		jz	short loc_6E408B80
		mov	eax, [ebx+58h]
		mov	edx, [eax+344h]
		mov	ebp, [edx+0Ch]
		cmp	dword ptr [eax+340h], 0Ch
		jz	short loc_6E408B90
		test	ebp, 88h
		jnz	loc_6E409618
		and	ebp, 100h
		jnz	loc_6E408CC0

loc_6E408B59:				; CODE XREF: sub_6E408AD0+22Cj
		mov	dword ptr [eax+354h], 1
		mov	eax, 1

loc_6E408B68:				; CODE XREF: sub_6E408AD0+878j
		add	esp, 0FCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E408B80:				; CODE XREF: sub_6E408AD0+5Aj
		mov	eax, edi
		add	esp, 0FCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E408B90:				; CODE XREF: sub_6E408AD0+6Fj
		mov	eax, [ebx+40h]
		mov	[esp+10Ch+var_E8], eax
		mov	edx, [ebx+0C0h]
		mov	eax, [edx+98h]
		test	eax, eax
		jz	loc_6E409560
		mov	edx, [eax+6Ch]
		test	edx, edx
		jz	short loc_6E408BCD
		mov	[esp+10Ch+var_10C], edx
		call	RSA_free
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	dword ptr [eax+6Ch], 0

loc_6E408BCD:				; CODE XREF: sub_6E408AD0+E0j
		mov	edx, [eax+70h]
		test	edx, edx
		jz	short loc_6E408BEF
		mov	[esp+10Ch+var_10C], edx
		call	DH_free
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	dword ptr [eax+70h], 0

loc_6E408BEF:				; CODE XREF: sub_6E408AD0+102j
		mov	eax, [eax+74h]
		test	eax, eax
		jz	short loc_6E408C11
		mov	[esp+10Ch+var_10C], eax
		call	EC_KEY_free
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	dword ptr [eax+74h], 0

loc_6E408C11:				; CODE XREF: sub_6E408AD0+124j
					; sub_6E408AD0+AA3j
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		mov	ecx, [eax+10h]
		mov	[esp+10Ch+var_E0], ecx
		mov	[esp+10Ch+var_C0], 32h
		test	ebp, 100h
		jz	loc_6E408D10
		cmp	edi, 1
		jle	loc_6E409D24
		mov	ecx, [esp+10Ch+var_E8]
		xor	eax, eax
		mov	al, [ecx]
		shl	eax, 8
		xor	edx, edx
		mov	dl, [ecx+1]
		or	eax, edx
		add	ecx, 2
		cmp	eax, 80h
		jg	loc_6E409AC9
		lea	edx, [edi-2]
		cmp	eax, edx
		jg	loc_6E4099A3
		lea	edx, [eax+2]
		mov	[esp+10Ch+var_EC], edx
		mov	ebp, [ebx+0C0h]
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], ecx
		call	BUF_strndup
		mov	[ebp+8Ch], eax
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+8Ch]
		test	eax, eax
		jz	loc_6E409E77
		sub	edi, [esp+10Ch+var_EC]

loc_6E408CA0:				; CODE XREF: sub_6E408AD0+7CEj
		test	edi, edi
		jnz	loc_6E40934D
		mov	[esp+10Ch+var_EC], 0
		jmp	loc_6E40909F
; ---------------------------------------------------------------------------
		align 10h

loc_6E408CC0:				; CODE XREF: sub_6E408AD0+83j
		mov	esi, [ebx+0C0h]
		call	sub_6E436FE0
		mov	[esi+98h], eax
		mov	eax, [ebx+0E4h]
		mov	edx, [eax+14Ch]
		test	edx, edx
		jz	short loc_6E408CEF
		mov	[esp+10Ch+var_10C], edx
		call	CRYPTO_free
		mov	eax, [ebx+0E4h]

loc_6E408CEF:				; CODE XREF: sub_6E408AD0+20Fj
		mov	dword ptr [eax+14Ch], 0
		mov	eax, [ebx+58h]
		jmp	loc_6E408B59
; ---------------------------------------------------------------------------
		jmp	short loc_6E408D10
; ---------------------------------------------------------------------------
		align 10h

loc_6E408D10:				; CODE XREF: sub_6E408AD0+15Fj
					; sub_6E408AD0+231j
		test	ebp, 400h
		jnz	loc_6E4090D0
		test	ebp, 1
		jz	loc_6E409500
		test	byte ptr [eax+20h], 2
		jz	loc_6E409B0E
		call	RSA_new
		mov	edx, eax
		test	eax, eax
		jz	loc_6E40A05A
		cmp	edi, 1
		jle	loc_6E40A039
		mov	ecx, [esp+10Ch+var_E8]
		movzx	ebp, byte ptr [ecx]
		and	ebp, 0FFh
		shl	ebp, 8
		xor	eax, eax
		mov	al, [ecx+1]
		or	ebp, eax
		add	ecx, 2
		lea	eax, [edi-2]
		cmp	ebp, eax
		jg	loc_6E409C37
		lea	eax, [ebp+2]
		mov	[esp+10Ch+var_EC], eax
		mov	eax, [edx+10h]
		mov	[esp+10Ch+var_DC], edx
		mov	[esp+10Ch+var_104], eax
		mov	[esp+10Ch+var_108], ebp
		mov	[esp+10Ch+var_10C], ecx
		mov	[esp+10Ch+var_E4], ecx
		call	BN_bin2bn
		mov	edx, [esp+10Ch+var_DC]
		mov	[edx+10h], eax
		test	eax, eax
		mov	ecx, [esp+10Ch+var_E4]
		jz	loc_6E40A094
		add	ecx, ebp
		mov	eax, edi
		sub	eax, [esp+10Ch+var_EC]
		dec	eax
		jle	loc_6E409FDF
		lea	eax, [ebp+4]
		mov	[esp+10Ch+var_EC], eax
		movzx	ebp, byte ptr [ecx]
		and	ebp, 0FFh
		shl	ebp, 8
		xor	eax, eax
		mov	al, [ecx+1]
		or	ebp, eax
		add	ecx, 2
		mov	eax, edi
		sub	eax, [esp+10Ch+var_EC]
		cmp	ebp, eax
		jg	loc_6E409BAA
		mov	eax, [esp+10Ch+var_EC]
		add	eax, ebp
		mov	[esp+10Ch+var_DC], eax
		mov	eax, [edx+14h]
		mov	[esp+10Ch+var_E4], edx
		mov	[esp+10Ch+var_104], eax
		mov	[esp+10Ch+var_108], ebp
		mov	[esp+10Ch+var_10C], ecx
		mov	[esp+10Ch+var_EC], ecx
		call	BN_bin2bn
		mov	edx, [esp+10Ch+var_E4]
		mov	[edx+14h], eax
		test	eax, eax
		mov	ecx, [esp+10Ch+var_EC]
		jz	loc_6E40A000
		lea	eax, [ecx+ebp]
		mov	[esp+10Ch+var_E4], eax
		sub	edi, [esp+10Ch+var_DC]
		test	byte ptr [esp+10Ch+var_E0], 1
		jz	loc_6E409C58
		mov	[esp+10Ch+var_D8], edx
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	eax, [eax+0Ch]
		mov	[esp+10Ch+var_10C], eax
		call	X509_get_pubkey
		mov	[esp+10Ch+var_EC], eax
		mov	[esp+10Ch+var_10C], eax
		call	EVP_PKEY_bits
		mov	ecx, [ebx+58h]
		mov	ecx, [ecx+344h]
		mov	ecx, [ecx+20h]
		and	ecx, 8
		cmp	ecx, 1
		sbb	ecx, ecx
		and	ecx, 200h
		add	ecx, 200h
		cmp	ecx, eax
		mov	edx, [esp+10Ch+var_D8]
		jge	loc_6E409DBD
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	[eax+6Ch], edx

loc_6E408E8E:				; CODE XREF: sub_6E408AD0+AE0j
					; sub_6E408AD0+BA1j ...
		mov	eax, [esp+10Ch+var_EC]
		test	eax, eax
		jz	loc_6E409296
		mov	eax, [ebx]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jnz	loc_6E4093D0
		cmp	eax, 302h
		jle	loc_6E4093D0
		cmp	edi, 1
		jle	loc_6E409D07
		mov	eax, [esp+10Ch+var_EC]
		mov	[esp+10Ch+var_10C], eax
		call	sub_6E41DB50
		cmp	eax, 0FFFFFFFFh
		jz	loc_6E409E9C
		mov	ecx, [esp+10Ch+var_E4]
		xor	edx, edx
		mov	dl, [ecx+1]
		cmp	edx, eax
		jnz	loc_6E4099C0
		xor	eax, eax
		mov	al, [ecx]
		mov	[esp+10Ch+var_10C], eax
		call	sub_6E41DBB0
		mov	[esp+10Ch+var_E0], eax
		test	eax, eax
		jz	loc_6E40A0A5
		add	[esp+10Ch+var_E4], 2
		sub	edi, 2

loc_6E408F04:				; CODE XREF: sub_6E408AD0+909j
		cmp	edi, 1
		jle	loc_6E409A18
		mov	ecx, [esp+10Ch+var_E4]
		movzx	ebp, byte ptr [ecx]
		and	ebp, 0FFh
		shl	ebp, 8
		xor	eax, eax
		mov	al, [ecx+1]
		or	ebp, eax
		lea	eax, [ecx+2]
		mov	[esp+10Ch+var_E4], eax
		mov	eax, [esp+10Ch+var_EC]
		mov	[esp+10Ch+var_10C], eax
		call	EVP_PKEY_size
		sub	edi, 2
		cmp	ebp, edi
		jnz	loc_6E409578
		cmp	ebp, eax
		jg	loc_6E409578
		test	ebp, ebp
		jle	loc_6E409578
		mov	eax, [esp+10Ch+var_EC]
		cmp	dword ptr [eax], 6
		jnz	loc_6E4093F0
		mov	eax, [ebx]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	loc_6E4093E0

loc_6E408F6F:				; CODE XREF: sub_6E408AD0+915j
		mov	[esp+10Ch+var_E0], 2
		mov	[esp+10Ch+var_D8], 0
		lea	edi, [esp+10Ch+var_9C]

loc_6E408F83:				; CODE XREF: sub_6E408AD0+588j
		mov	[esp+10Ch+var_108], 8
		mov	[esp+10Ch+var_10C], esi
		call	EVP_MD_CTX_set_flags
		mov	eax, [ebx+0E4h]
		cmp	[esp+10Ch+var_E0], 2
		jz	loc_6E40A179
		mov	eax, [eax+90h]

loc_6E408FAA:				; CODE XREF: sub_6E408AD0+16AFj
		mov	[esp+10Ch+var_104], 0
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], esi
		call	EVP_DigestInit_ex
		test	eax, eax
		jle	loc_6E4095DA
		mov	[esp+10Ch+var_104], 20h
		mov	eax, [ebx+58h]
		add	eax, 0C0h
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E4095DA
		mov	[esp+10Ch+var_104], 20h
		mov	eax, [ebx+58h]
		add	eax, 0A0h
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E4095DA
		mov	eax, [esp+10Ch+var_DC]
		mov	[esp+10Ch+var_104], eax
		mov	eax, [esp+10Ch+var_E8]
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E4095DA
		lea	eax, [esp+10Ch+var_B8]
		mov	[esp+10Ch+var_104], eax
		mov	[esp+10Ch+var_108], edi
		mov	[esp+10Ch+var_10C], esi
		call	EVP_DigestFinal_ex
		test	eax, eax
		jle	loc_6E4095DA
		mov	eax, [esp+10Ch+var_B8]
		add	edi, eax
		add	[esp+10Ch+var_D8], eax
		dec	[esp+10Ch+var_E0]
		jnz	loc_6E408F83
		mov	eax, [esp+10Ch+var_EC]
		mov	eax, [eax+14h]
		mov	[esp+10Ch+var_F8], eax
		mov	[esp+10Ch+var_FC], ebp
		mov	eax, [esp+10Ch+var_E4]
		mov	[esp+10Ch+var_100], eax
		mov	eax, [esp+10Ch+var_D8]
		mov	[esp+10Ch+var_104], eax
		lea	eax, [esp+10Ch+var_9C]
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], 72h
		call	RSA_verify
		test	eax, eax
		js	loc_6E409EDF
		jz	loc_6E409CA5

loc_6E40909F:				; CODE XREF: sub_6E408AD0+1E0j
					; sub_6E408AD0+9C6j
		mov	eax, [esp+10Ch+var_EC]
		mov	[esp+10Ch+var_10C], eax
		call	EVP_PKEY_free
		mov	[esp+10Ch+var_10C], esi
		call	EVP_MD_CTX_cleanup
		mov	eax, 1
		add	esp, 0FCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4090D0:				; CODE XREF: sub_6E408AD0+246j
		cmp	edi, 1
		jle	loc_6E409D41
		mov	ecx, [esp+10Ch+var_E8]
		movzx	ebp, byte ptr [ecx]
		and	ebp, 0FFh
		shl	ebp, 8
		xor	eax, eax
		mov	al, [ecx+1]
		or	ebp, eax
		lea	edx, [ecx+2]
		lea	eax, [edi-2]
		cmp	ebp, eax
		jg	loc_6E409A35
		lea	eax, [ebp+2]
		mov	[esp+10Ch+var_EC], eax
		mov	[esp+10Ch+var_104], 0
		mov	[esp+10Ch+var_108], ebp
		mov	[esp+10Ch+var_10C], edx
		mov	[esp+10Ch+var_E4], edx
		call	BN_bin2bn
		mov	[ebx+1A8h], eax
		test	eax, eax
		mov	edx, [esp+10Ch+var_E4]
		jz	loc_6E40A0C2
		add	edx, ebp
		mov	eax, edi
		sub	eax, [esp+10Ch+var_EC]
		dec	eax
		jle	loc_6E409DA0
		add	ebp, 4
		xor	ecx, ecx
		mov	cl, [edx]
		shl	ecx, 8
		xor	eax, eax
		mov	al, [edx+1]
		or	ecx, eax
		add	edx, 2
		mov	eax, edi
		sub	eax, ebp
		cmp	ecx, eax
		jg	loc_6E409A52
		add	ebp, ecx
		mov	[esp+10Ch+var_104], 0
		mov	[esp+10Ch+var_108], ecx
		mov	[esp+10Ch+var_E4], ecx
		mov	[esp+10Ch+var_10C], edx
		mov	[esp+10Ch+var_EC], edx
		call	BN_bin2bn
		mov	[ebx+1ACh], eax
		test	eax, eax
		mov	edx, [esp+10Ch+var_EC]
		mov	ecx, [esp+10Ch+var_E4]
		jz	loc_6E40A077
		add	edx, ecx
		mov	eax, edi
		sub	eax, ebp
		test	eax, eax
		jle	loc_6E409E3D
		lea	ecx, [ebp+1]
		movzx	ebp, byte ptr [edx]
		mov	eax, ebp
		and	eax, 0FFh
		inc	edx
		mov	[esp+10Ch+var_EC], edx
		mov	edx, edi
		sub	edx, ecx
		cmp	eax, edx
		jg	loc_6E409A8C
		add	ecx, eax
		mov	[esp+10Ch+var_E4], ecx
		mov	[esp+10Ch+var_104], 0
		mov	[esp+10Ch+var_108], eax
		mov	eax, [esp+10Ch+var_EC]
		mov	[esp+10Ch+var_10C], eax
		call	BN_bin2bn
		mov	[ebx+1B0h], eax
		test	eax, eax
		jz	loc_6E40A13F
		mov	edx, ebp
		and	edx, 0FFh
		add	edx, [esp+10Ch+var_EC]
		mov	eax, edi
		sub	eax, [esp+10Ch+var_E4]
		dec	eax
		jle	loc_6E409E5A
		mov	ecx, [esp+10Ch+var_E4]
		add	ecx, 2
		movzx	ebp, byte ptr [edx]
		and	ebp, 0FFh
		shl	ebp, 8
		xor	eax, eax
		mov	al, [edx+1]
		or	ebp, eax
		add	edx, 2
		mov	eax, edi
		sub	eax, ecx
		cmp	ebp, eax
		jg	loc_6E409A6F
		lea	eax, [ecx+ebp]
		mov	[esp+10Ch+var_DC], eax
		mov	[esp+10Ch+var_104], 0
		mov	[esp+10Ch+var_108], ebp
		mov	[esp+10Ch+var_10C], edx
		mov	[esp+10Ch+var_EC], edx
		call	BN_bin2bn
		mov	[ebx+1B4h], eax
		test	eax, eax
		mov	edx, [esp+10Ch+var_EC]
		jz	loc_6E409D83
		lea	eax, [edx+ebp]
		mov	[esp+10Ch+var_E4], eax
		sub	edi, [esp+10Ch+var_DC]
		lea	eax, [esp+10Ch+var_C0]
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], ebx
		call	sub_6E445450
		test	eax, eax
		jz	loc_6E409CEA
		test	byte ptr [esp+10Ch+var_E0], 1
		jnz	loc_6E409595
		test	byte ptr [esp+10Ch+var_E0], 2
		jnz	loc_6E409656

loc_6E409296:				; CODE XREF: sub_6E408AD0+3C4j
					; sub_6E408AD0+A56j
		test	[esp+10Ch+var_E0], 404h
		jnz	loc_6E408CA0
		mov	[esp+10Ch+var_FC], 792h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 44h

loc_6E4092BC:				; CODE XREF: sub_6E408AD0+12CBj
					; sub_6E408AD0+15A2j ...
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	[esp+10Ch+var_D4], 0
		mov	[esp+10Ch+var_D8], 0
		xor	ebp, ebp
		mov	[esp+10Ch+var_EC], 0

loc_6E4092EA:				; CODE XREF: sub_6E408AD0+140Aj
					; sub_6E408AD0+166Aj ...
		mov	eax, [esp+10Ch+var_EC]
		mov	[esp+10Ch+var_10C], eax
		call	EVP_PKEY_free
		mov	[esp+10Ch+var_D0], 0
		xchg	ax, ax

loc_6E409300:				; CODE XREF: sub_6E408AD0+8FAj
		test	ebp, ebp
		jz	short loc_6E40930C
		mov	[esp+10Ch+var_10C], ebp
		call	DH_free

loc_6E40930C:				; CODE XREF: sub_6E408AD0+832j
		mov	eax, [esp+10Ch+var_D0]
		mov	[esp+10Ch+var_10C], eax
		call	BN_CTX_free
		mov	eax, [esp+10Ch+var_D4]
		mov	[esp+10Ch+var_10C], eax
		call	EC_POINT_free
		mov	eax, [esp+10Ch+var_D8]
		test	eax, eax
		jz	short loc_6E409334
		mov	[esp+10Ch+var_10C], eax
		call	EC_KEY_free

loc_6E409334:				; CODE XREF: sub_6E408AD0+85Aj
					; sub_6E408AD0+1162j
		mov	[esp+10Ch+var_10C], esi
		call	EVP_MD_CTX_cleanup
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E408B68
; ---------------------------------------------------------------------------

loc_6E40934D:				; CODE XREF: sub_6E408AD0+1D2j
		mov	[esp+10Ch+var_FC], 797h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 99h
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E409370:				; CODE XREF: sub_6E408AD0+A7Cj
					; sub_6E408AD0+EEBj ...
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	eax, [esp+10Ch+var_C0]

loc_6E409388:				; CODE XREF: sub_6E408AD0+B81j
		mov	[esp+10Ch+var_D4], 0
		mov	[esp+10Ch+var_D0], 0
		mov	[esp+10Ch+var_D8], 0
		xor	ebp, ebp
		mov	[esp+10Ch+var_EC], 0

loc_6E4093AA:				; CODE XREF: sub_6E408AD0+A22j
					; sub_6E408AD0+F43j ...
		mov	[esp+10Ch+var_104], eax
		mov	[esp+10Ch+var_108], 2
		mov	[esp+10Ch+var_10C], ebx
		call	sub_6E4151B0
		mov	eax, [esp+10Ch+var_EC]
		mov	[esp+10Ch+var_10C], eax
		call	EVP_PKEY_free
		jmp	loc_6E409300
; ---------------------------------------------------------------------------
		align 10h

loc_6E4093D0:				; CODE XREF: sub_6E408AD0+3D4j
					; sub_6E408AD0+3DFj
		call	EVP_sha1
		mov	[esp+10Ch+var_E0], eax
		jmp	loc_6E408F04
; ---------------------------------------------------------------------------
		align 10h

loc_6E4093E0:				; CODE XREF: sub_6E408AD0+499j
		cmp	eax, 302h
		jle	loc_6E408F6F
		nop
		lea	esi, [esi+0]

loc_6E4093F0:				; CODE XREF: sub_6E408AD0+489j
		mov	[esp+10Ch+var_104], 0
		mov	eax, [esp+10Ch+var_E0]
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], esi
		call	EVP_DigestInit_ex
		test	eax, eax
		jle	loc_6E4095B5
		mov	[esp+10Ch+var_104], 20h
		mov	eax, [ebx+58h]
		add	eax, 0C0h
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E4095B5
		mov	[esp+10Ch+var_104], 20h
		mov	eax, [ebx+58h]
		add	eax, 0A0h
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E4095B5
		mov	eax, [esp+10Ch+var_DC]
		mov	[esp+10Ch+var_104], eax
		mov	eax, [esp+10Ch+var_E8]
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E4095B5
		mov	eax, [esp+10Ch+var_EC]
		mov	[esp+10Ch+var_100], eax
		mov	[esp+10Ch+var_104], ebp
		mov	eax, [esp+10Ch+var_E4]
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], esi
		call	EVP_VerifyFinal
		test	eax, eax
		jg	loc_6E40909F
		mov	[esp+10Ch+var_C0], 33h
		mov	[esp+10Ch+var_FC], 78Bh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 7Bh
		lea	esi, [esi+0]

loc_6E4094C0:				; CODE XREF: sub_6E408AD0+AC0j
					; sub_6E408AD0+B05j ...
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	eax, [esp+10Ch+var_C0]

loc_6E4094D8:				; CODE XREF: sub_6E408AD0+B43j
					; sub_6E408AD0+1447j
		mov	[esp+10Ch+var_D4], 0
		mov	[esp+10Ch+var_D0], 0
		mov	[esp+10Ch+var_D8], 0
		xor	ebp, ebp
		jmp	loc_6E4093AA
; ---------------------------------------------------------------------------
		align 10h

loc_6E409500:				; CODE XREF: sub_6E408AD0+252j
		test	ebp, 8
		jnz	loc_6E409676
		test	ebp, 6
		jnz	loc_6E409D5E
		test	ebp, 80h
		jnz	loc_6E409821
		test	ebp, ebp
		jz	loc_6E409296
		mov	[esp+10Ch+var_C0], 0Ah
		mov	[esp+10Ch+var_FC], 71Ah
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0F4h
		jmp	loc_6E409370
; ---------------------------------------------------------------------------
		jmp	short loc_6E409560
; ---------------------------------------------------------------------------
		align 10h

loc_6E409560:				; CODE XREF: sub_6E408AD0+D5j
					; sub_6E408AD0+A81j
		mov	[esp+10Ch+var_EC], edx
		call	sub_6E436FE0
		mov	edx, [esp+10Ch+var_EC]
		mov	[edx+98h], eax
		jmp	loc_6E408C11
; ---------------------------------------------------------------------------

loc_6E409578:				; CODE XREF: sub_6E408AD0+46Cj
					; sub_6E408AD0+474j ...
		mov	[esp+10Ch+var_FC], 751h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 108h
		jmp	loc_6E4094C0
; ---------------------------------------------------------------------------

loc_6E409595:				; CODE XREF: sub_6E408AD0+7B5j
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	eax, [eax+0Ch]
		mov	[esp+10Ch+var_10C], eax
		call	X509_get_pubkey
		mov	[esp+10Ch+var_EC], eax
		jmp	loc_6E408E8E
; ---------------------------------------------------------------------------

loc_6E4095B5:				; CODE XREF: sub_6E408AD0+93Aj
					; sub_6E408AD0+95Ej ...
		mov	[esp+10Ch+var_C0], 50h
		mov	[esp+10Ch+var_FC], 785h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 6
		jmp	loc_6E4094C0
; ---------------------------------------------------------------------------

loc_6E4095DA:				; CODE XREF: sub_6E408AD0+4F0j
					; sub_6E408AD0+514j ...
		mov	[esp+10Ch+var_FC], 768h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 44h
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	[esp+10Ch+var_C0], 50h
		mov	eax, 50h
		jmp	loc_6E4094D8
; ---------------------------------------------------------------------------

loc_6E409618:				; CODE XREF: sub_6E408AD0+77j
		mov	[esp+10Ch+var_FC], 532h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0F4h
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	[esp+10Ch+var_C0], 0Ah
		mov	eax, 0Ah
		jmp	loc_6E409388
; ---------------------------------------------------------------------------

loc_6E409656:				; CODE XREF: sub_6E408AD0+7C0j
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	eax, [eax+24h]
		mov	[esp+10Ch+var_10C], eax
		call	X509_get_pubkey
		mov	[esp+10Ch+var_EC], eax
		jmp	loc_6E408E8E
; ---------------------------------------------------------------------------

loc_6E409676:				; CODE XREF: sub_6E408AD0+A36j
		call	DH_new
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E40A2FC
		cmp	edi, 1
		jle	loc_6E40A2DF
		mov	ecx, [esp+10Ch+var_E8]
		xor	edx, edx
		mov	dl, [ecx]
		shl	edx, 8
		xor	eax, eax
		mov	al, [ecx+1]
		or	edx, eax
		add	ecx, 2
		lea	eax, [edi-2]
		cmp	edx, eax
		jg	loc_6E409F8B
		lea	eax, [edx+2]
		mov	[esp+10Ch+var_EC], eax
		mov	[esp+10Ch+var_104], 0
		mov	[esp+10Ch+var_108], edx
		mov	[esp+10Ch+var_DC], edx
		mov	[esp+10Ch+var_10C], ecx
		mov	[esp+10Ch+var_E4], ecx
		call	BN_bin2bn
		mov	[ebp+8], eax
		test	eax, eax
		mov	ecx, [esp+10Ch+var_E4]
		mov	edx, [esp+10Ch+var_DC]
		jz	loc_6E40A2D2
		add	ecx, edx
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_6E409FA5
		mov	eax, edi
		sub	eax, [esp+10Ch+var_EC]
		dec	eax
		jle	loc_6E40A22B
		lea	eax, [edx+4]
		mov	[esp+10Ch+var_EC], eax
		xor	edx, edx
		mov	dl, [ecx]
		shl	edx, 8
		xor	eax, eax
		mov	al, [ecx+1]
		or	edx, eax
		add	ecx, 2
		mov	eax, edi
		sub	eax, [esp+10Ch+var_EC]
		cmp	edx, eax
		jg	loc_6E409F71
		mov	eax, [esp+10Ch+var_EC]
		add	eax, edx
		mov	[esp+10Ch+var_EC], eax
		mov	[esp+10Ch+var_104], 0
		mov	[esp+10Ch+var_108], edx
		mov	[esp+10Ch+var_DC], edx
		mov	[esp+10Ch+var_10C], ecx
		mov	[esp+10Ch+var_E4], ecx
		call	BN_bin2bn
		mov	[ebp+0Ch], eax
		test	eax, eax
		mov	ecx, [esp+10Ch+var_E4]
		mov	edx, [esp+10Ch+var_DC]
		jz	loc_6E40A2C5
		add	ecx, edx
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_6E40A0DF
		mov	eax, edi
		sub	eax, [esp+10Ch+var_EC]
		dec	eax
		jle	loc_6E40A1CD
		mov	eax, [esp+10Ch+var_EC]
		add	eax, 2
		mov	[esp+10Ch+var_EC], eax
		xor	edx, edx
		mov	dl, [ecx]
		shl	edx, 8
		xor	eax, eax
		mov	al, [ecx+1]
		or	edx, eax
		add	ecx, 2
		mov	eax, edi
		sub	eax, [esp+10Ch+var_EC]
		cmp	edx, eax
		jg	loc_6E409F1C
		mov	eax, [esp+10Ch+var_EC]
		add	eax, edx
		mov	[esp+10Ch+var_DC], eax
		mov	[esp+10Ch+var_104], 0
		mov	[esp+10Ch+var_108], edx
		mov	[esp+10Ch+var_E4], edx
		mov	[esp+10Ch+var_10C], ecx
		mov	[esp+10Ch+var_EC], ecx
		call	BN_bin2bn
		mov	[ebp+14h], eax
		test	eax, eax
		mov	ecx, [esp+10Ch+var_EC]
		mov	edx, [esp+10Ch+var_E4]
		jz	loc_6E40A184
		add	ecx, edx
		mov	[esp+10Ch+var_E4], ecx
		sub	edi, [esp+10Ch+var_DC]
		mov	edx, [eax+4]
		test	edx, edx
		jz	loc_6E40A15C
		test	byte ptr [esp+10Ch+var_E0], 1
		jnz	loc_6E409AA9
		test	byte ptr [esp+10Ch+var_E0], 2
		jnz	loc_6E409AEE
		mov	[esp+10Ch+var_EC], 0

loc_6E40980D:				; CODE XREF: sub_6E408AD0+FF4j
					; sub_6E408AD0+1039j
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	[eax+70h], ebp
		jmp	loc_6E408E8E
; ---------------------------------------------------------------------------

loc_6E409821:				; CODE XREF: sub_6E408AD0+A4Ej
		call	EC_KEY_new
		mov	[esp+10Ch+var_D8], eax
		test	eax, eax
		jz	loc_6E40A283
		cmp	edi, 3
		jle	loc_6E409FC2
		mov	eax, [esp+10Ch+var_E8]
		cmp	byte ptr [eax],	3
		jnz	loc_6E409B53
		mov	ecx, eax
		xor	eax, eax
		mov	al, [ecx+2]
		mov	[esp+10Ch+var_10C], eax
		call	sub_6E41AEC0
		test	eax, eax
		jz	loc_6E409B53
		mov	[esp+10Ch+var_10C], eax
		call	EC_GROUP_new_by_curve_name
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E40A1EA
		mov	[esp+10Ch+var_108], eax
		mov	eax, [esp+10Ch+var_D8]
		mov	[esp+10Ch+var_10C], eax
		call	EC_KEY_set_group
		test	eax, eax
		jz	loc_6E40A0FC
		mov	[esp+10Ch+var_10C], ebp
		call	EC_GROUP_free
		mov	eax, [esp+10Ch+var_D8]
		mov	[esp+10Ch+var_10C], eax
		call	EC_KEY_get0_group
		mov	ebp, eax
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		test	byte ptr [eax+20h], 2
		jz	short loc_6E4098C1
		mov	[esp+10Ch+var_10C], ebp
		call	EC_GROUP_get_degree
		cmp	eax, 0A3h
		jg	loc_6E40A2A0

loc_6E4098C1:				; CODE XREF: sub_6E408AD0+DDCj
		mov	[esp+10Ch+var_10C], ebp
		call	EC_POINT_new
		mov	[esp+10Ch+var_D4], eax
		test	eax, eax
		jz	loc_6E40A248
		call	BN_CTX_new
		mov	[esp+10Ch+var_D0], eax
		test	eax, eax
		jz	loc_6E40A248
		mov	eax, [esp+10Ch+var_E8]
		xor	edx, edx
		mov	dl, [eax+3]
		lea	ecx, [eax+4]
		lea	eax, [edi-4]
		cmp	edx, eax
		jg	loc_6E409DFE
		mov	eax, [esp+10Ch+var_D0]
		mov	[esp+10Ch+var_FC], eax
		mov	[esp+10Ch+var_100], edx
		mov	[esp+10Ch+var_E4], edx
		mov	[esp+10Ch+var_104], ecx
		mov	[esp+10Ch+var_EC], ecx
		mov	eax, [esp+10Ch+var_D4]
		mov	[esp+10Ch+var_108], eax
		mov	[esp+10Ch+var_10C], ebp
		call	EC_POINT_oct2point
		test	eax, eax
		jz	loc_6E409DFE
		mov	edx, [esp+10Ch+var_E4]
		lea	eax, [edx+4]
		mov	[esp+10Ch+var_DC], eax
		sub	edi, eax
		mov	ecx, [esp+10Ch+var_EC]
		lea	eax, [ecx+edx]
		mov	[esp+10Ch+var_E4], eax
		test	byte ptr [esp+10Ch+var_E0], 1
		jnz	loc_6E409B33
		test	byte ptr [esp+10Ch+var_E0], 40h
		jnz	loc_6E409CCA
		mov	[esp+10Ch+var_EC], 0

loc_6E409963:				; CODE XREF: sub_6E408AD0+107Ej
					; sub_6E408AD0+1215j
		mov	ebp, [esp+10Ch+var_D4]
		mov	[esp+10Ch+var_108], ebp
		mov	eax, [esp+10Ch+var_D8]
		mov	[esp+10Ch+var_10C], eax
		call	EC_KEY_set_public_key
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	ecx, [esp+10Ch+var_D8]
		mov	[eax+74h], ecx
		mov	eax, [esp+10Ch+var_D0]
		mov	[esp+10Ch+var_10C], eax
		call	BN_CTX_free
		mov	[esp+10Ch+var_10C], ebp
		call	EC_POINT_free
		jmp	loc_6E408E8E
; ---------------------------------------------------------------------------

loc_6E4099A3:				; CODE XREF: sub_6E408AD0+193j
		mov	[esp+10Ch+var_FC], 57Ch
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 13Ch
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E4099C0:				; CODE XREF: sub_6E408AD0+40Ej
		mov	[esp+10Ch+var_FC], 733h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 172h
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	[esp+10Ch+var_C0], 32h
		mov	eax, 32h
		mov	[esp+10Ch+var_D4], 0
		mov	[esp+10Ch+var_D0], 0
		mov	[esp+10Ch+var_D8], 0
		xor	ebp, ebp
		jmp	loc_6E4093AA
; ---------------------------------------------------------------------------

loc_6E409A18:				; CODE XREF: sub_6E408AD0+437j
		mov	[esp+10Ch+var_FC], 745h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E4094C0
; ---------------------------------------------------------------------------

loc_6E409A35:				; CODE XREF: sub_6E408AD0+628j
		mov	[esp+10Ch+var_FC], 596h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 15Eh
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409A52:				; CODE XREF: sub_6E408AD0+688j
		mov	[esp+10Ch+var_FC], 5AAh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 15Dh
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409A6F:				; CODE XREF: sub_6E408AD0+756j
		mov	[esp+10Ch+var_FC], 5D3h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 15Ch
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409A8C:				; CODE XREF: sub_6E408AD0+6E8j
		mov	[esp+10Ch+var_FC], 5BFh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 15Fh
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409AA9:				; CODE XREF: sub_6E408AD0+D24j
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	eax, [eax+0Ch]
		mov	[esp+10Ch+var_10C], eax
		call	X509_get_pubkey
		mov	[esp+10Ch+var_EC], eax
		jmp	loc_6E40980D
; ---------------------------------------------------------------------------

loc_6E409AC9:				; CODE XREF: sub_6E408AD0+188j
		mov	[esp+10Ch+var_C0], 28h
		mov	[esp+10Ch+var_FC], 577h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 92h
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409AEE:				; CODE XREF: sub_6E408AD0+D2Fj
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	eax, [eax+24h]
		mov	[esp+10Ch+var_10C], eax
		call	X509_get_pubkey
		mov	[esp+10Ch+var_EC], eax
		jmp	loc_6E40980D
; ---------------------------------------------------------------------------

loc_6E409B0E:				; CODE XREF: sub_6E408AD0+25Cj
		mov	[esp+10Ch+var_C0], 0Ah
		mov	[esp+10Ch+var_FC], 5FBh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0F4h
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409B33:				; CODE XREF: sub_6E408AD0+E7Aj
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	eax, [eax+0Ch]
		mov	[esp+10Ch+var_10C], eax
		call	X509_get_pubkey
		mov	[esp+10Ch+var_EC], eax
		jmp	loc_6E409963
; ---------------------------------------------------------------------------

loc_6E409B53:				; CODE XREF: sub_6E408AD0+D72j
					; sub_6E408AD0+D89j
		mov	[esp+10Ch+var_C0], 50h
		mov	[esp+10Ch+var_FC], 6CEh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 13Ah

loc_6E409B73:				; CODE XREF: sub_6E408AD0+150Aj
					; sub_6E408AD0+17F0j
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	eax, [esp+10Ch+var_C0]
		mov	[esp+10Ch+var_D4], 0
		mov	[esp+10Ch+var_D0], 0
		xor	ebp, ebp
		mov	[esp+10Ch+var_EC], 0
		jmp	loc_6E4093AA
; ---------------------------------------------------------------------------

loc_6E409BAA:				; CODE XREF: sub_6E408AD0+308j
		mov	[esp+10Ch+var_E8], edx
		mov	[esp+10Ch+var_FC], 61Fh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 78h

loc_6E409BC6:				; CODE XREF: sub_6E408AD0+1183j
					; sub_6E408AD0+152Bj ...
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	[esp+10Ch+var_EC], 0
		mov	edx, [esp+10Ch+var_E8]

loc_6E409BE6:				; CODE XREF: sub_6E408AD0+1329j
		mov	[esp+10Ch+var_E8], edx
		mov	eax, [esp+10Ch+var_C0]
		mov	[esp+10Ch+var_104], eax
		mov	[esp+10Ch+var_108], 2
		mov	[esp+10Ch+var_10C], ebx
		call	sub_6E4151B0
		mov	eax, [esp+10Ch+var_EC]
		mov	[esp+10Ch+var_10C], eax
		call	EVP_PKEY_free
		mov	edx, [esp+10Ch+var_E8]

loc_6E409C12:				; CODE XREF: sub_6E408AD0+11D0j
		mov	[esp+10Ch+var_10C], edx
		call	RSA_free
		mov	[esp+10Ch+var_10C], 0
		call	BN_CTX_free
		mov	[esp+10Ch+var_10C], 0
		call	EC_POINT_free
		jmp	loc_6E409334
; ---------------------------------------------------------------------------

loc_6E409C37:				; CODE XREF: sub_6E408AD0+299j
		mov	[esp+10Ch+var_E8], edx
		mov	[esp+10Ch+var_FC], 60Bh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 79h
		jmp	loc_6E409BC6
; ---------------------------------------------------------------------------

loc_6E409C58:				; CODE XREF: sub_6E408AD0+356j
		mov	[esp+10Ch+var_EC], edx
		mov	[esp+10Ch+var_FC], 631h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 44h
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	edx, [esp+10Ch+var_EC]

loc_6E409C8C:				; CODE XREF: sub_6E408AD0+1564j
		mov	[esp+10Ch+var_EC], edx
		mov	[esp+10Ch+var_10C], 0
		call	EVP_PKEY_free
		mov	edx, [esp+10Ch+var_EC]
		jmp	loc_6E409C12
; ---------------------------------------------------------------------------

loc_6E409CA5:				; CODE XREF: sub_6E408AD0+5C9j
		mov	[esp+10Ch+var_C0], 33h
		mov	[esp+10Ch+var_FC], 778h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 7Bh
		jmp	loc_6E4094C0
; ---------------------------------------------------------------------------

loc_6E409CCA:				; CODE XREF: sub_6E408AD0+E85j
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		mov	eax, [eax+48h]
		mov	[esp+10Ch+var_10C], eax
		call	X509_get_pubkey
		mov	[esp+10Ch+var_EC], eax
		jmp	loc_6E409963
; ---------------------------------------------------------------------------

loc_6E409CEA:				; CODE XREF: sub_6E408AD0+7AAj
		mov	[esp+10Ch+var_FC], 5E0h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 173h
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409D07:				; CODE XREF: sub_6E408AD0+3E8j
		mov	[esp+10Ch+var_FC], 726h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E4094C0
; ---------------------------------------------------------------------------

loc_6E409D24:				; CODE XREF: sub_6E408AD0+168j
		mov	[esp+10Ch+var_FC], 56Ah
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409D41:				; CODE XREF: sub_6E408AD0+603j
		mov	[esp+10Ch+var_FC], 590h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409D5E:				; CODE XREF: sub_6E408AD0+A42j
		mov	[esp+10Ch+var_C0], 2Fh
		mov	[esp+10Ch+var_FC], 6AAh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0EBh
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409D83:				; CODE XREF: sub_6E408AD0+787j
		mov	[esp+10Ch+var_FC], 5D9h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 3
		jmp	loc_6E4092BC
; ---------------------------------------------------------------------------

loc_6E409DA0:				; CODE XREF: sub_6E408AD0+668j
		mov	[esp+10Ch+var_FC], 5A2h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409DBD:				; CODE XREF: sub_6E408AD0+3A9j
		mov	[esp+10Ch+var_E8], edx
		mov	[esp+10Ch+var_C0], 0Ah
		mov	[esp+10Ch+var_FC], 637h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0F4h
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	edx, [esp+10Ch+var_E8]
		jmp	loc_6E409BE6
; ---------------------------------------------------------------------------

loc_6E409DFE:				; CODE XREF: sub_6E408AD0+E27j
					; sub_6E408AD0+E57j
		mov	[esp+10Ch+var_FC], 6F6h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 132h
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	eax, [esp+10Ch+var_C0]
		xor	ebp, ebp
		mov	[esp+10Ch+var_EC], 0
		jmp	loc_6E4093AA
; ---------------------------------------------------------------------------

loc_6E409E3D:				; CODE XREF: sub_6E408AD0+6CAj
		mov	[esp+10Ch+var_FC], 5B6h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409E5A:				; CODE XREF: sub_6E408AD0+72Dj
		mov	[esp+10Ch+var_FC], 5CBh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409E77:				; CODE XREF: sub_6E408AD0+1C6j
		mov	[esp+10Ch+var_C0], 28h
		mov	[esp+10Ch+var_FC], 584h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 41h
		jmp	loc_6E409370
; ---------------------------------------------------------------------------

loc_6E409E9C:				; CODE XREF: sub_6E408AD0+3FDj
		mov	[esp+10Ch+var_FC], 72Dh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 44h
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	[esp+10Ch+var_D4], 0
		mov	[esp+10Ch+var_D8], 0
		xor	ebp, ebp
		jmp	loc_6E4092EA
; ---------------------------------------------------------------------------

loc_6E409EDF:				; CODE XREF: sub_6E408AD0+5C3j
		mov	[esp+10Ch+var_C0], 33h
		mov	[esp+10Ch+var_FC], 772h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 76h
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	eax, [esp+10Ch+var_C0]
		jmp	loc_6E4094D8
; ---------------------------------------------------------------------------

loc_6E409F1C:				; CODE XREF: sub_6E408AD0+CCBj
		mov	[esp+10Ch+var_FC], 683h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 6Dh

loc_6E409F34:				; CODE XREF: sub_6E408AD0+14B9j
					; sub_6E408AD0+14D3j ...
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	eax, [esp+10Ch+var_C0]
		mov	[esp+10Ch+var_D4], 0
		mov	[esp+10Ch+var_D0], 0
		mov	[esp+10Ch+var_D8], 0
		mov	[esp+10Ch+var_EC], 0
		jmp	loc_6E4093AA
; ---------------------------------------------------------------------------

loc_6E409F71:				; CODE XREF: sub_6E408AD0+C4Ej
		mov	[esp+10Ch+var_FC], 66Ah
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 6Ch
		jmp	short loc_6E409F34
; ---------------------------------------------------------------------------

loc_6E409F8B:				; CODE XREF: sub_6E408AD0+BD8j
		mov	[esp+10Ch+var_FC], 650h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 6Eh
		jmp	short loc_6E409F34
; ---------------------------------------------------------------------------

loc_6E409FA5:				; CODE XREF: sub_6E408AD0+C1Bj
		mov	[esp+10Ch+var_FC], 65Ch
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 18Bh
		jmp	loc_6E409F34
; ---------------------------------------------------------------------------

loc_6E409FC2:				; CODE XREF: sub_6E408AD0+D65j
		mov	[esp+10Ch+var_FC], 6C6h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409B73
; ---------------------------------------------------------------------------

loc_6E409FDF:				; CODE XREF: sub_6E408AD0+2DDj
		mov	[esp+10Ch+var_E8], edx
		mov	[esp+10Ch+var_FC], 617h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409BC6
; ---------------------------------------------------------------------------

loc_6E40A000:				; CODE XREF: sub_6E408AD0+340j
		mov	[esp+10Ch+var_EC], edx
		mov	[esp+10Ch+var_FC], 625h

loc_6E40A00C:				; CODE XREF: sub_6E408AD0+15D0j
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 3
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	edx, [esp+10Ch+var_EC]
		jmp	loc_6E409C8C
; ---------------------------------------------------------------------------

loc_6E40A039:				; CODE XREF: sub_6E408AD0+274j
		mov	[esp+10Ch+var_E8], eax
		mov	[esp+10Ch+var_FC], 605h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409BC6
; ---------------------------------------------------------------------------

loc_6E40A05A:				; CODE XREF: sub_6E408AD0+26Bj
		mov	[esp+10Ch+var_FC], 5FFh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 41h
		jmp	loc_6E4092BC
; ---------------------------------------------------------------------------

loc_6E40A077:				; CODE XREF: sub_6E408AD0+6BCj
		mov	[esp+10Ch+var_FC], 5B0h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 3
		jmp	loc_6E4092BC
; ---------------------------------------------------------------------------

loc_6E40A094:				; CODE XREF: sub_6E408AD0+2CEj
		mov	[esp+10Ch+var_EC], edx
		mov	[esp+10Ch+var_FC], 611h
		jmp	loc_6E40A00C
; ---------------------------------------------------------------------------

loc_6E40A0A5:				; CODE XREF: sub_6E408AD0+426j
		mov	[esp+10Ch+var_FC], 739h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 170h
		jmp	loc_6E4094C0
; ---------------------------------------------------------------------------

loc_6E40A0C2:				; CODE XREF: sub_6E408AD0+659j
		mov	[esp+10Ch+var_FC], 59Ch
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 3
		jmp	loc_6E4092BC
; ---------------------------------------------------------------------------

loc_6E40A0DF:				; CODE XREF: sub_6E408AD0+C94j
		mov	[esp+10Ch+var_FC], 676h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 177h
		jmp	loc_6E409F34
; ---------------------------------------------------------------------------

loc_6E40A0FC:				; CODE XREF: sub_6E408AD0+DB3j
		mov	[esp+10Ch+var_FC], 6D8h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 10h

loc_6E40A114:				; CODE XREF: sub_6E408AD0+17CBj
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	[esp+10Ch+var_D4], 0
		xor	ebp, ebp
		mov	[esp+10Ch+var_EC], 0
		jmp	loc_6E4092EA
; ---------------------------------------------------------------------------

loc_6E40A13F:				; CODE XREF: sub_6E408AD0+714j
		mov	[esp+10Ch+var_FC], 5C5h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 3
		jmp	loc_6E4092BC
; ---------------------------------------------------------------------------

loc_6E40A15C:				; CODE XREF: sub_6E408AD0+D19j
		mov	[esp+10Ch+var_FC], 690h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 189h
		jmp	loc_6E409F34
; ---------------------------------------------------------------------------

loc_6E40A179:				; CODE XREF: sub_6E408AD0+4CEj
		mov	eax, [eax+8Ch]
		jmp	loc_6E408FAA
; ---------------------------------------------------------------------------

loc_6E40A184:				; CODE XREF: sub_6E408AD0+D04j
		mov	[esp+10Ch+var_FC], 689h

loc_6E40A18C:				; CODE XREF: sub_6E408AD0+17FDj
					; sub_6E408AD0+180Aj
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 3

loc_6E40A19C:				; CODE XREF: sub_6E408AD0+1844j
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	[esp+10Ch+var_D4], 0
		mov	[esp+10Ch+var_D8], 0
		mov	[esp+10Ch+var_EC], 0
		jmp	loc_6E4092EA
; ---------------------------------------------------------------------------

loc_6E40A1CD:				; CODE XREF: sub_6E408AD0+CA1j
		mov	[esp+10Ch+var_FC], 67Bh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409F34
; ---------------------------------------------------------------------------

loc_6E40A1EA:				; CODE XREF: sub_6E408AD0+D9Bj
		mov	[esp+10Ch+var_FC], 6D4h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 10h
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		mov	[esp+10Ch+var_D4], 0
		mov	[esp+10Ch+var_EC], 0
		jmp	loc_6E4092EA
; ---------------------------------------------------------------------------

loc_6E40A22B:				; CODE XREF: sub_6E408AD0+C28j
		mov	[esp+10Ch+var_FC], 662h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409F34
; ---------------------------------------------------------------------------

loc_6E40A248:				; CODE XREF: sub_6E408AD0+DFFj
					; sub_6E408AD0+E10j
		mov	[esp+10Ch+var_FC], 6ECh
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 41h
		mov	[esp+10Ch+var_108], 8Dh
		mov	[esp+10Ch+var_10C], 14h
		call	ERR_put_error
		xor	ebp, ebp
		mov	[esp+10Ch+var_EC], 0
		jmp	loc_6E4092EA
; ---------------------------------------------------------------------------

loc_6E40A283:				; CODE XREF: sub_6E408AD0+D5Cj
		mov	[esp+10Ch+var_FC], 6B5h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 41h
		jmp	loc_6E40A114
; ---------------------------------------------------------------------------

loc_6E40A2A0:				; CODE XREF: sub_6E408AD0+DEBj
		mov	[esp+10Ch+var_C0], 3Ch
		mov	[esp+10Ch+var_FC], 6E3h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 136h
		jmp	loc_6E409B73
; ---------------------------------------------------------------------------

loc_6E40A2C5:				; CODE XREF: sub_6E408AD0+C87j
		mov	[esp+10Ch+var_FC], 670h
		jmp	loc_6E40A18C
; ---------------------------------------------------------------------------

loc_6E40A2D2:				; CODE XREF: sub_6E408AD0+C0Ej
		mov	[esp+10Ch+var_FC], 656h
		jmp	loc_6E40A18C
; ---------------------------------------------------------------------------

loc_6E40A2DF:				; CODE XREF: sub_6E408AD0+BB8j
		mov	[esp+10Ch+var_FC], 64Ah
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 0A0h
		jmp	loc_6E409F34
; ---------------------------------------------------------------------------

loc_6E40A2FC:				; CODE XREF: sub_6E408AD0+BAFj
		mov	[esp+10Ch+var_FC], 644h
		mov	[esp+10Ch+var_100], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+10Ch+var_104], 5
		jmp	loc_6E40A19C
sub_6E408AD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40A320	proc near		; CODE XREF: sub_6E40D250+8A6p
					; sub_6E426500+836p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, [esp+5Ch+arg_0]
		mov	eax, [ebp+8]
		mov	eax, [eax+30h]
		mov	ecx, [ebp+108h]
		lea	ebx, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_48], ebx
		mov	[esp+5Ch+var_4C], ecx
		mov	[esp+5Ch+var_50], 0FFFFFFFFh
		mov	[esp+5Ch+var_54], 1151h
		mov	[esp+5Ch+var_58], 1150h
		mov	[esp+5Ch+var_5C], ebp
		call	eax
		mov	edi, eax
		mov	ebx, [esp+5Ch+var_24]
		test	ebx, ebx
		jz	short loc_6E40A3D8
		mov	eax, [ebp+58h]
		mov	dword ptr [eax+358h], 0
		mov	ecx, [eax+340h]
		cmp	ecx, 0Eh
		jz	loc_6E40A570
		cmp	ecx, 0Dh
		jz	short loc_6E40A3E0
		mov	[esp+5Ch+var_54], 0Ah
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E4151B0
		mov	[esp+5Ch+var_4C], 7D8h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 106h
		mov	[esp+5Ch+var_58], 87h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error

loc_6E40A3CF:				; CODE XREF: sub_6E40A320+26Ej
					; sub_6E40A320+474j ...
		mov	dword ptr [ebp+34h], 5
		xor	eax, eax

loc_6E40A3D8:				; CODE XREF: sub_6E40A320+48j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E40A3E0:				; CODE XREF: sub_6E40A320+69j
		cmp	dword ptr [ebp+0], 300h
		jle	short loc_6E40A3F9
		mov	eax, [eax+344h]
		test	byte ptr [eax+10h], 4
		jnz	loc_6E40A750

loc_6E40A3F9:				; CODE XREF: sub_6E40A320+C7j
		mov	ebx, [ebp+40h]
		mov	[esp+5Ch+var_5C], offset loc_6E407650
		call	sk_new
		mov	[esp+5Ch+var_38], eax
		test	eax, eax
		jz	loc_6E40A8C7
		lea	eax, [ebx+1]
		xor	edx, edx
		mov	dl, [ebx]
		mov	[esp+5Ch+var_34], edx
		cmp	edx, 9
		jbe	loc_6E40A5B0
		mov	[esp+5Ch+var_34], 9

loc_6E40A430:				; CODE XREF: sub_6E40A320+296j
		mov	ecx, [ebp+58h]
		mov	dl, [ebx+1]
		mov	[ecx+360h], dl
		mov	esi, [esp+5Ch+var_34]
		cmp	esi, 1
		jbe	loc_6E40A4CC
		mov	ecx, [ebp+58h]
		mov	dl, [ebx+2]
		mov	[ecx+361h], dl
		cmp	esi, 2
		jbe	short loc_6E40A4CC
		mov	ecx, [ebp+58h]
		mov	dl, [ebx+3]
		mov	[ecx+362h], dl
		cmp	esi, 3
		jbe	short loc_6E40A4CC
		mov	ecx, [ebp+58h]
		mov	dl, [ebx+4]
		mov	[ecx+363h], dl
		cmp	esi, 4
		jbe	short loc_6E40A4CC
		mov	ecx, [ebp+58h]
		mov	dl, [ebx+5]
		mov	[ecx+364h], dl
		cmp	esi, 5
		jbe	short loc_6E40A4CC
		mov	ecx, [ebp+58h]
		mov	dl, [ebx+6]
		mov	[ecx+365h], dl
		cmp	esi, 6
		jbe	short loc_6E40A4CC
		mov	ecx, [ebp+58h]
		mov	dl, [ebx+7]
		mov	[ecx+366h], dl
		cmp	esi, 7
		jbe	short loc_6E40A4CC
		mov	ecx, [ebp+58h]
		mov	dl, [ebx+8]
		mov	[ecx+367h], dl
		cmp	esi, 8
		jbe	short loc_6E40A4CC
		mov	ecx, [ebp+58h]
		mov	dl, [ebx+9]
		mov	[ecx+368h], dl

loc_6E40A4CC:				; CODE XREF: sub_6E40A320+123j
					; sub_6E40A320+138j ...
		add	eax, [esp+5Ch+var_34]
		mov	ecx, [ebp+0]
		mov	esi, ecx
		sar	esi, 8
		cmp	esi, 3
		jz	loc_6E40A6E0

loc_6E40A4E1:				; CODE XREF: sub_6E40A320+3C6j
					; sub_6E40A320+421j
		xor	edx, edx
		mov	dl, [eax]
		shl	edx, 8
		xor	ecx, ecx
		mov	cl, [eax+1]
		or	edx, ecx
		mov	ecx, eax
		sub	ecx, ebx
		lea	ecx, [ecx+edx+2]
		cmp	ecx, edi
		jz	loc_6E40A5D0
		mov	[esp+5Ch+var_54], 32h
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E4151B0
		mov	[esp+5Ch+var_4C], 816h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 9Fh
		mov	[esp+5Ch+var_58], 87h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error

loc_6E40A543:				; CODE XREF: sub_6E40A320+4CEj
					; sub_6E40A320+51Bj ...
		mov	dword ptr [ebp+34h], 5
		mov	[esp+5Ch+var_58], offset X509_NAME_free
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	sk_pop_free
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40A570:				; CODE XREF: sub_6E40A320+60j
		mov	dword ptr [eax+354h], 1
		mov	ecx, [eax+178h]
		test	ecx, ecx
		jz	short loc_6E40A594
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E4118F0
		test	eax, eax
		jz	loc_6E40A3CF

loc_6E40A594:				; CODE XREF: sub_6E40A320+262j
					; sub_6E40A320+3B2j
		mov	eax, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E40A5B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40A5B0:				; CODE XREF: sub_6E40A320+102j
					; sub_6E40A320+281j
		mov	edx, [esp+5Ch+var_34]
		test	edx, edx
		jnz	loc_6E40A430
		jmp	loc_6E40A4CC
; ---------------------------------------------------------------------------
		jmp	short loc_6E40A5D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40A5D0:				; CODE XREF: sub_6E40A320+1D9j
					; sub_6E40A320+2A1j
		test	edx, edx
		jz	loc_6E40A694
		movzx	esi, byte ptr [eax+2]
		and	esi, 0FFh
		shl	esi, 8
		xor	ebx, ebx
		mov	bl, [eax+3]
		or	esi, ebx
		lea	edi, [eax+4]
		lea	ebx, [esi+2]
		cmp	edx, ebx
		jb	loc_6E40A79D
		mov	[esp+5Ch+arg_0], ebp
		mov	ebp, esi
		mov	esi, edx
		jmp	short loc_6E40A65E
; ---------------------------------------------------------------------------
		align 10h

loc_6E40A610:				; CODE XREF: sub_6E40A320+35Cj
		add	edi, ebp
		cmp	edi, [esp+5Ch+var_20]
		jnz	loc_6E40A7F3
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	sk_push
		test	eax, eax
		jz	loc_6E40A840
		cmp	esi, ebx
		jbe	loc_6E40A875
		movzx	ebp, byte ptr [edi]
		and	ebp, 0FFh
		shl	ebp, 8
		xor	eax, eax
		mov	al, [edi+1]
		or	ebp, eax
		add	edi, 2
		lea	ebx, [ebp+ebx+2]
		cmp	esi, ebx
		jb	loc_6E40A799

loc_6E40A65E:				; CODE XREF: sub_6E40A320+2E2j
		mov	[esp+5Ch+var_20], edi
		mov	[esp+5Ch+var_54], ebp
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], 0
		call	d2i_X509_NAME
		test	eax, eax
		jnz	short loc_6E40A610
		mov	ebp, [esp+5Ch+arg_0]
		test	byte ptr [ebp+103h], 20h
		jz	loc_6E40A941

loc_6E40A68F:				; CODE XREF: sub_6E40A320+484j
		call	ERR_clear_error

loc_6E40A694:				; CODE XREF: sub_6E40A320+2B2j
					; sub_6E40A320+559j
		mov	eax, [ebp+58h]
		mov	dword ptr [eax+358h], 1
		mov	edx, [esp+5Ch+var_34]
		mov	[eax+35Ch], edx
		mov	ecx, [eax+36Ch]
		test	ecx, ecx
		jz	short loc_6E40A6C8
		mov	[esp+5Ch+var_58], offset X509_NAME_free
		mov	[esp+5Ch+var_5C], ecx
		call	sk_pop_free
		mov	eax, [ebp+58h]

loc_6E40A6C8:				; CODE XREF: sub_6E40A320+393j
		mov	edx, [esp+5Ch+var_38]
		mov	[eax+36Ch], edx
		jmp	loc_6E40A594
; ---------------------------------------------------------------------------
		align 10h

loc_6E40A6E0:				; CODE XREF: sub_6E40A320+1BBj
		cmp	ecx, 302h
		jle	loc_6E40A4E1
		movzx	esi, byte ptr [eax]
		and	esi, 0FFh
		shl	esi, 8
		xor	ecx, ecx
		mov	cl, [eax+1]
		or	esi, ecx
		lea	ecx, [eax+2]
		mov	eax, ecx
		sub	eax, ebx
		lea	eax, [esi+eax+2]
		cmp	edi, eax
		jb	loc_6E40A8F8
		test	esi, 1
		jnz	loc_6E40A87E
		mov	[esp+5Ch+var_54], esi
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_30], ecx
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E41DC30
		test	eax, eax
		mov	ecx, [esp+5Ch+var_30]
		jz	loc_6E40A87E
		lea	eax, [ecx+esi]
		jmp	loc_6E40A4E1
; ---------------------------------------------------------------------------
		align 10h

loc_6E40A750:				; CODE XREF: sub_6E40A320+D3j
		mov	[esp+5Ch+var_54], 0Ah
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E4151B0
		mov	[esp+5Ch+var_4C], 7E1h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 0E8h
		mov	[esp+5Ch+var_58], 87h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		jmp	loc_6E40A3CF
; ---------------------------------------------------------------------------

loc_6E40A799:				; CODE XREF: sub_6E40A320+338j
		mov	ebp, [esp+5Ch+arg_0]

loc_6E40A79D:				; CODE XREF: sub_6E40A320+2D4j
		test	byte ptr [ebp+103h], 20h
		jnz	loc_6E40A68F
		mov	[esp+5Ch+var_54], 32h
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E4151B0
		mov	[esp+5Ch+var_4C], 820h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 84h
		mov	[esp+5Ch+var_58], 87h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		jmp	loc_6E40A543
; ---------------------------------------------------------------------------

loc_6E40A7F3:				; CODE XREF: sub_6E40A320+2F6j
		mov	ebp, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_54], 32h
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E4151B0
		mov	[esp+5Ch+var_4C], 834h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 83h
		mov	[esp+5Ch+var_58], 87h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		jmp	loc_6E40A543
; ---------------------------------------------------------------------------

loc_6E40A840:				; CODE XREF: sub_6E40A320+30Ej
		mov	ebp, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_4C], 838h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 41h
		mov	[esp+5Ch+var_58], 87h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		jmp	loc_6E40A543
; ---------------------------------------------------------------------------

loc_6E40A875:				; CODE XREF: sub_6E40A320+316j
		mov	ebp, [esp+5Ch+arg_0]
		jmp	loc_6E40A694
; ---------------------------------------------------------------------------

loc_6E40A87E:				; CODE XREF: sub_6E40A320+3F8j
					; sub_6E40A320+418j
		mov	[esp+5Ch+var_54], 32h
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E4151B0
		mov	[esp+5Ch+var_4C], 803h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 168h
		mov	[esp+5Ch+var_58], 87h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		jmp	loc_6E40A543
; ---------------------------------------------------------------------------

loc_6E40A8C7:				; CODE XREF: sub_6E40A320+EEj
		mov	[esp+5Ch+var_4C], 7E9h
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 41h
		mov	[esp+5Ch+var_58], 87h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		jmp	loc_6E40A3CF
; ---------------------------------------------------------------------------

loc_6E40A8F8:				; CODE XREF: sub_6E40A320+3ECj
		mov	[esp+5Ch+var_54], 32h
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E4151B0
		mov	[esp+5Ch+var_4C], 7FDh
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 92h
		mov	[esp+5Ch+var_58], 87h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		jmp	loc_6E40A543
; ---------------------------------------------------------------------------

loc_6E40A941:				; CODE XREF: sub_6E40A320+369j
		mov	[esp+5Ch+var_54], 32h
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E4151B0
		mov	[esp+5Ch+var_4C], 82Ch
		mov	[esp+5Ch+var_50], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+5Ch+var_54], 0Dh
		mov	[esp+5Ch+var_58], 87h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		jmp	loc_6E40A543
sub_6E40A320	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40A990	proc near		; CODE XREF: sub_6E40D250+876p
					; sub_6E426500+3FDp

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_34		= dword	ptr -34h
var_30		= byte ptr -30h
var_2F		= byte ptr -2Fh
var_2E		= byte ptr -2Eh
var_2D		= byte ptr -2Dh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebp, [esp+6Ch+arg_0]
		mov	eax, [ebp+8]
		mov	eax, [eax+30h]
		lea	edx, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_58], edx
		mov	[esp+6Ch+var_5C], 4000h
		mov	[esp+6Ch+var_60], 4
		mov	[esp+6Ch+var_64], 11E1h
		mov	[esp+6Ch+var_68], 11E0h
		mov	[esp+6Ch+var_6C], ebp
		call	eax
		mov	edx, [esp+6Ch+var_20]
		test	edx, edx
		jz	loc_6E40AB2F
		cmp	eax, 5
		jle	loc_6E40ACF0
		mov	edx, [ebp+40h]
		mov	cl, [edx]
		mov	byte ptr [esp+6Ch+var_4C], cl
		mov	bl, [edx+1]
		mov	[esp+6Ch+var_30], bl
		mov	cl, [edx+2]
		mov	[esp+6Ch+var_2F], cl
		mov	bl, [edx+3]
		mov	[esp+6Ch+var_2E], bl
		xor	ebx, ebx
		mov	bl, [edx+4]
		shl	ebx, 8
		xor	ecx, ecx
		mov	cl, [edx+5]
		or	ebx, ecx
		lea	ecx, [ebx+6]
		cmp	ecx, eax
		jnz	loc_6E40AC50
		test	ebx, ebx
		jz	loc_6E40AB40
		mov	esi, [ebp+0C0h]
		mov	eax, [esi+44h]
		test	eax, eax
		jnz	loc_6E40AB50

loc_6E40AA34:				; CODE XREF: sub_6E40A990+233j
		mov	eax, [esi+0E4h]
		test	eax, eax
		jz	short loc_6E40AA5E
		mov	[esp+6Ch+var_34], edx
		mov	[esp+6Ch+var_6C], eax
		call	CRYPTO_free
		mov	esi, [ebp+0C0h]
		mov	dword ptr [esi+0E8h], 0
		mov	edx, [esp+6Ch+var_34]

loc_6E40AA5E:				; CODE XREF: sub_6E40A990+ACj
		mov	[esp+6Ch+var_34], edx
		mov	[esp+6Ch+var_64], 8A6h
		mov	[esp+6Ch+var_68], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+6Ch+var_6C], ebx
		call	CRYPTO_malloc
		mov	[esi+0E4h], eax
		mov	eax, [ebp+0C0h]
		mov	edi, [eax+0E4h]
		test	edi, edi
		mov	edx, [esp+6Ch+var_34]
		jz	loc_6E40ACFD
		lea	eax, [edx+6]
		mov	esi, eax
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		cmp	ebx, 4
		jnb	loc_6E40AC00

loc_6E40AAAC:				; CODE XREF: sub_6E40A990+28Fj
		xor	edx, edx
		test	al, 2
		jnz	loc_6E40ABE0
		test	al, 1
		jnz	loc_6E40ABD0

loc_6E40AABE:				; CODE XREF: sub_6E40A990+24Aj
					; sub_6E40A990+25Dj
		mov	ecx, [ebp+0C0h]
		mov	eax, [esp+6Ch+var_4C]
		shl	eax, 18h
		xor	edx, edx
		mov	dl, [esp+6Ch+var_30]
		shl	edx, 10h
		or	eax, edx
		xor	edx, edx
		mov	dl, [esp+6Ch+var_2E]
		or	eax, edx
		xor	edx, edx
		mov	dl, [esp+6Ch+var_2F]
		shl	edx, 8
		or	eax, edx
		mov	[ecx+0ECh], eax
		mov	[ecx+0E8h], ebx
		call	EVP_sha256
		mov	edx, [ebp+0C0h]
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], eax
		lea	eax, [edx+44h]
		mov	[esp+6Ch+var_60], eax
		add	edx, 48h
		mov	[esp+6Ch+var_64], edx
		mov	[esp+6Ch+var_68], ebx
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_6C], eax
		call	EVP_Digest
		mov	eax, 1

loc_6E40AB2F:				; CODE XREF: sub_6E40A990+44j
					; sub_6E40A990+311j
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40AB40:				; CODE XREF: sub_6E40A990+8Dj
		mov	eax, 1
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40AB50:				; CODE XREF: sub_6E40A990+9Ej
		mov	eax, [ebp+170h]
		mov	ecx, [eax+20h]
		test	cl, 1
		jz	short loc_6E40AB85
		and	ch, 2
		jz	loc_6E40AC30
		mov	ecx, [eax+2Ch]
		test	ecx, ecx
		jz	short loc_6E40AB85
		mov	[esp+6Ch+var_34], edx
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], eax
		call	ecx
		mov	esi, [ebp+0C0h]
		mov	edx, [esp+6Ch+var_34]

loc_6E40AB85:				; CODE XREF: sub_6E40A990+1CCj
					; sub_6E40A990+1DCj ...
		mov	[esp+6Ch+var_34], edx
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], esi
		call	sub_6E438300
		mov	esi, eax
		test	eax, eax
		mov	edx, [esp+6Ch+var_34]
		jz	loc_6E40AD2E
		mov	[esp+6Ch+var_34], edx
		mov	eax, [ebp+0C0h]
		mov	[esp+6Ch+var_6C], eax
		call	SSL_SESSION_free
		mov	[ebp+0C0h], esi
		mov	edx, [esp+6Ch+var_34]
		jmp	loc_6E40AA34
; ---------------------------------------------------------------------------
		align 10h

loc_6E40ABD0:				; CODE XREF: sub_6E40A990+128j
					; sub_6E40A990+263j
		mov	al, [esi+edx]
		mov	[esp+6Ch+var_2D], al
		mov	[edi+edx], al
		jmp	loc_6E40AABE
; ---------------------------------------------------------------------------
		align 10h

loc_6E40ABE0:				; CODE XREF: sub_6E40A990+120j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E40AABE
		jmp	short loc_6E40ABD0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40AC00:				; CODE XREF: sub_6E40A990+116j
		test	edi, 1
		jnz	loc_6E40ACD0

loc_6E40AC0C:				; CODE XREF: sub_6E40A990+34Cj
		test	edi, 2
		jnz	loc_6E40ACB0

loc_6E40AC18:				; CODE XREF: sub_6E40A990+32Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E40AAAC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40AC30:				; CODE XREF: sub_6E40A990+1D1j
		mov	[esp+6Ch+var_34], edx
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], eax
		call	SSL_CTX_remove_session
		mov	esi, [ebp+0C0h]
		mov	edx, [esp+6Ch+var_34]
		jmp	loc_6E40AB85
; ---------------------------------------------------------------------------
		align 10h

loc_6E40AC50:				; CODE XREF: sub_6E40A990+85j
		mov	[esp+6Ch+var_5C], 87Bh

loc_6E40AC58:				; CODE XREF: sub_6E40A990+368j
		mov	[esp+6Ch+var_60], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+6Ch+var_64], 9Fh
		mov	[esp+6Ch+var_68], 11Bh
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error
		mov	eax, 32h

loc_6E40AC81:				; CODE XREF: sub_6E40A990+3CFj
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], ebp
		call	sub_6E4151B0

loc_6E40AC95:				; CODE XREF: sub_6E40A990+399j
		mov	dword ptr [ebp+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E40AB2F
; ---------------------------------------------------------------------------
		align 10h

loc_6E40ACB0:				; CODE XREF: sub_6E40A990+282j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40AC18
; ---------------------------------------------------------------------------
		align 10h

loc_6E40ACD0:				; CODE XREF: sub_6E40A990+276j
		mov	al, [edx+6]
		mov	[edi], al
		inc	edi
		lea	esi, [edx+7]
		lea	eax, [ebx-1]
		jmp	loc_6E40AC0C
; ---------------------------------------------------------------------------
		jmp	short loc_6E40ACF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40ACF0:				; CODE XREF: sub_6E40A990+4Dj
					; sub_6E40A990+351j
		mov	[esp+6Ch+var_5C], 870h
		jmp	loc_6E40AC58
; ---------------------------------------------------------------------------

loc_6E40ACFD:				; CODE XREF: sub_6E40A990+102j
		mov	[esp+6Ch+var_5C], 8A8h
		mov	[esp+6Ch+var_60], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+6Ch+var_64], 41h
		mov	[esp+6Ch+var_68], 11Bh
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error
		jmp	loc_6E40AC95
; ---------------------------------------------------------------------------

loc_6E40AD2E:				; CODE XREF: sub_6E40A990+211j
		mov	[esp+6Ch+var_5C], 89Ah
		mov	[esp+6Ch+var_60], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+6Ch+var_64], 41h
		mov	[esp+6Ch+var_68], 11Bh
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error
		mov	eax, 50h
		jmp	loc_6E40AC81
sub_6E40A990	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40AD70	proc near		; CODE XREF: sub_6E40D250+27Dp
					; sub_6E426500+996p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 34h
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		lea	edx, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], 4000h
		mov	[esp+3Ch+var_30], 0FFFFFFFFh
		mov	[esp+3Ch+var_34], 11F1h
		mov	[esp+3Ch+var_38], 11F0h
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		mov	edx, [esp+3Ch+var_10]
		test	edx, edx
		jz	short loc_6E40ADFC
		mov	edx, [ebx+58h]
		cmp	dword ptr [edx+340h], 16h
		jz	short loc_6E40AE10
		mov	dword ptr [edx+354h], 1

loc_6E40ADCA:				; CODE XREF: sub_6E40AD70+FDj
		mov	edx, [ebx+0E4h]
		mov	eax, [edx+13Ch]
		test	eax, eax
		jz	short loc_6E40ADF7
		mov	edx, [edx+140h]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		test	eax, eax
		jz	loc_6E40AED6
		js	loc_6E40AF4C

loc_6E40ADF7:				; CODE XREF: sub_6E40AD70+68j
		mov	eax, 1

loc_6E40ADFC:				; CODE XREF: sub_6E40AD70+42j
					; sub_6E40AD70+161j
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40AE10:				; CODE XREF: sub_6E40AD70+4Ej
		cmp	eax, 3
		jbe	loc_6E40AF3F
		mov	edx, [ebx+40h]
		cmp	byte ptr [edx],	1
		jnz	loc_6E40AF09
		movzx	esi, byte ptr [edx+1]
		and	esi, 0FFh
		shl	esi, 10h
		xor	ecx, ecx
		mov	cl, [edx+2]
		shl	ecx, 8
		or	esi, ecx
		xor	ecx, ecx
		mov	cl, [edx+3]
		or	esi, ecx
		add	edx, 4
		lea	ecx, [esi+4]
		cmp	ecx, eax
		jnz	short loc_6E40AE80
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], edx
		call	BUF_memdup
		mov	[ebx+138h], eax
		test	eax, eax
		jz	loc_6E40AF82
		mov	[ebx+13Ch], esi
		jmp	loc_6E40ADCA
; ---------------------------------------------------------------------------
		align 10h

loc_6E40AE80:				; CODE XREF: sub_6E40AD70+DBj
		mov	[esp+3Ch+var_2C], 8EDh

loc_6E40AE88:				; CODE XREF: sub_6E40AD70+1D7j
		mov	[esp+3Ch+var_30], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+3Ch+var_34], 9Fh
		mov	[esp+3Ch+var_38], 121h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 32h

loc_6E40AEB1:				; CODE XREF: sub_6E40AD70+197j
					; sub_6E40AD70+1CAj ...
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4151B0
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E40ADFC
; ---------------------------------------------------------------------------

loc_6E40AED6:				; CODE XREF: sub_6E40AD70+7Bj
		mov	[esp+3Ch+var_2C], 8FDh
		mov	[esp+3Ch+var_30], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+3Ch+var_34], 148h
		mov	[esp+3Ch+var_38], 121h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 71h
		jmp	short loc_6E40AEB1
; ---------------------------------------------------------------------------

loc_6E40AF09:				; CODE XREF: sub_6E40AD70+AFj
		mov	[esp+3Ch+var_2C], 8E7h
		mov	[esp+3Ch+var_30], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+3Ch+var_34], 149h
		mov	[esp+3Ch+var_38], 121h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 32h
		jmp	loc_6E40AEB1
; ---------------------------------------------------------------------------

loc_6E40AF3F:				; CODE XREF: sub_6E40AD70+A3j
		mov	[esp+3Ch+var_2C], 8E1h
		jmp	loc_6E40AE88
; ---------------------------------------------------------------------------

loc_6E40AF4C:				; CODE XREF: sub_6E40AD70+81j
		mov	[esp+3Ch+var_2C], 902h

loc_6E40AF54:				; CODE XREF: sub_6E40AD70+21Aj
		mov	[esp+3Ch+var_30], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 121h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 50h
		jmp	loc_6E40AEB1
; ---------------------------------------------------------------------------

loc_6E40AF82:				; CODE XREF: sub_6E40AD70+F1j
		mov	[esp+3Ch+var_2C], 8F3h
		jmp	short loc_6E40AF54
sub_6E40AD70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40AF90	proc near		; CODE XREF: sub_6E426500+51Dp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 38h
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		lea	edx, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], 1Eh
		mov	[esp+3Ch+var_30], 0Eh
		mov	[esp+3Ch+var_34], 1161h
		mov	[esp+3Ch+var_38], 1160h
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		mov	edx, [esp+3Ch+var_10]
		test	edx, edx
		jz	short loc_6E40AFF0
		mov	edx, 1
		test	eax, eax
		jg	short loc_6E40B000

loc_6E40AFDC:				; CODE XREF: sub_6E40AF90+C0j
		mov	eax, edx
		add	esp, 38h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40AFF0:				; CODE XREF: sub_6E40AF90+41j
		mov	edx, eax
		mov	eax, edx
		add	esp, 38h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B000:				; CODE XREF: sub_6E40AF90+4Aj
		mov	[esp+3Ch+var_34], 32h
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4151B0
		mov	[esp+3Ch+var_2C], 91Eh
		mov	[esp+3Ch+var_30], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+3Ch+var_34], 9Fh
		mov	[esp+3Ch+var_38], 91h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	dword ptr [ebx+34h], 5
		mov	edx, 0FFFFFFFFh
		jmp	short loc_6E40AFDC
sub_6E40AF90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40B060	proc near		; CODE XREF: sub_6E40D250+A16p

Dst		= dword	ptr -2FCh
Src		= dword	ptr -2F8h
Size		= dword	ptr -2F4h
var_2F0		= dword	ptr -2F0h
var_2EC		= dword	ptr -2ECh
var_2E8		= dword	ptr -2E8h
var_2E4		= dword	ptr -2E4h
var_2E0		= dword	ptr -2E0h
var_2DC		= dword	ptr -2DCh
var_2D8		= dword	ptr -2D8h
var_2D4		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
var_2CC		= dword	ptr -2CCh
var_2C8		= byte ptr -2C8h
var_2C4		= byte ptr -2C4h
var_2A4		= byte ptr -2A4h
var_2A3		= byte ptr -2A3h
var_223		= byte ptr -223h
var_220		= byte ptr -220h
var_21F		= byte ptr -21Fh
var_21E		= byte ptr -21Eh
var_21C		= byte ptr -21Ch
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2ECh
		mov	ebx, [esp+2FCh+arg_0]
		cmp	dword ptr [ebx+34h], 1180h
		jnz	loc_6E40B1C6
		mov	eax, [ebx+3Ch]
		mov	ebp, [eax+4]
		lea	eax, [ebp+4]
		mov	[esp+2FCh+var_2E4], eax
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		mov	edx, [eax+0Ch]
		test	dl, 1
		jz	loc_6E40B1F0
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E40C18B
		mov	esi, [eax+6Ch]
		test	esi, esi
		jz	loc_6E40BA10

loc_6E40B0BF:				; CODE XREF: sub_6E40B060+9DFj
		mov	eax, [ebx+110h]
		mov	edx, eax
		sar	edx, 8
		mov	[esp+2FCh+var_220], dl
		mov	[esp+2FCh+var_21F], al
		mov	[esp+2FCh+Src],	2Eh
		lea	eax, [esp+2FCh+var_21E]
		mov	[esp+2FCh+Dst],	eax
		call	RAND_bytes
		test	eax, eax
		jle	loc_6E40B930
		mov	eax, [ebx+0C0h]
		mov	dword ptr [eax+10h], 30h
		cmp	dword ptr [ebx], 300h
		jg	loc_6E40B540

loc_6E40B110:				; CODE XREF: sub_6E40B060+4E7j
		mov	[esp+2FCh+var_2EC], 1
		mov	[esp+2FCh+var_2F0], esi
		mov	eax, [esp+2FCh+var_2E4]
		mov	[esp+2FCh+Size], eax
		lea	eax, [esp+2FCh+var_220]
		mov	[esp+2FCh+var_2E0], eax
		mov	[esp+2FCh+Src],	eax
		mov	[esp+2FCh+Dst],	30h
		call	RSA_public_encrypt
		mov	[esp+2FCh+var_2E4], eax
		test	eax, eax
		jle	loc_6E40BFEC
		cmp	dword ptr [ebx], 300h
		jg	loc_6E40B550

loc_6E40B157:				; CODE XREF: sub_6E40B060+506j
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	esi, [ebx+0C0h]
		mov	[esp+2FCh+var_2F0], 30h
		mov	edi, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Size], edi
		lea	edx, [esi+14h]
		mov	[esp+2FCh+Src],	edx
		mov	[esp+2FCh+Dst],	ebx
		call	eax
		mov	[esi+10h], eax
		mov	[esp+2FCh+Src],	30h
		mov	[esp+2FCh+Dst],	edi
		call	OPENSSL_cleanse

loc_6E40B195:				; CODE XREF: sub_6E40B060+298j
					; sub_6E40B060+4D1j ...
		mov	byte ptr [ebp+0], 10h
		mov	ecx, [esp+2FCh+var_2E4]
		mov	eax, ecx
		sar	eax, 10h
		mov	[ebp+1], al
		mov	eax, ecx
		sar	eax, 8
		mov	[ebp+2], al
		mov	[ebp+3], cl
		mov	dword ptr [ebx+34h], 1181h
		mov	ebp, ecx
		add	ebp, 4
		mov	[ebx+44h], ebp
		mov	dword ptr [ebx+48h], 0

loc_6E40B1C6:				; CODE XREF: sub_6E40B060+18j
		mov	[esp+2FCh+Src],	16h
		mov	[esp+2FCh+Dst],	ebx
		call	sub_6E4157D0

loc_6E40B1D6:				; CODE XREF: sub_6E40B060+8FCj
		add	esp, 2ECh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E40B1F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B1F0:				; CODE XREF: sub_6E40B060+3Aj
					; sub_6E40B060+181j
		test	dl, 0Eh
		jz	loc_6E40B300
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E40C22B
		mov	edi, [eax+70h]
		test	edi, edi
		jz	loc_6E40C0D7
		mov	[esp+2FCh+Dst],	edi
		call	DHparams_dup
		mov	esi, eax
		test	eax, eax
		jz	loc_6E40C09E
		mov	[esp+2FCh+Dst],	eax
		call	DH_generate_key
		test	eax, eax
		jz	loc_6E40BC21
		mov	eax, [edi+14h]
		mov	[esp+2FCh+Size], esi
		mov	[esp+2FCh+Src],	eax
		mov	eax, [esp+2FCh+var_2E4]
		mov	[esp+2FCh+Dst],	eax
		call	DH_compute_key
		mov	ecx, eax
		test	eax, eax
		jle	loc_6E40BFC6
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	edi, [ebx+0C0h]
		mov	[esp+2FCh+var_2F0], ecx
		mov	[esp+2FCh+var_2E0], ecx
		mov	ecx, [esp+2FCh+var_2E4]
		mov	[esp+2FCh+Size], ecx
		lea	edx, [edi+14h]
		mov	[esp+2FCh+Src],	edx
		mov	[esp+2FCh+Dst],	ebx
		call	eax
		mov	[edi+10h], eax
		mov	ecx, [esp+2FCh+var_2E0]
		mov	edx, ecx
		mov	edi, [esp+2FCh+var_2E4]
		cmp	ecx, 4
		jnb	loc_6E40B810

loc_6E40B29C:				; CODE XREF: sub_6E40B060+7D1j
		test	dl, 2
		jz	short loc_6E40B2A9
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E40B2A9:				; CODE XREF: sub_6E40B060+23Fj
		and	edx, 1
		jz	short loc_6E40B2B1
		mov	byte ptr [edi],	0

loc_6E40B2B1:				; CODE XREF: sub_6E40B060+24Cj
		mov	eax, [esi+14h]
		mov	[esp+2FCh+Dst],	eax
		call	BN_num_bits
		mov	edx, eax
		add	edx, 7
		js	loc_6E40BA50

loc_6E40B2C7:				; CODE XREF: sub_6E40B060+9F3j
		mov	edi, edx
		sar	edi, 3
		sar	edx, 0Bh
		mov	[ebp+4], dl
		mov	eax, edi
		mov	[ebp+5], al
		mov	eax, [esi+14h]
		lea	edx, [ebp+6]
		mov	[esp+2FCh+Src],	edx
		mov	[esp+2FCh+Dst],	eax
		call	BN_bn2bin
		lea	eax, [edi+2]
		mov	[esp+2FCh+var_2E4], eax
		mov	[esp+2FCh+Dst],	esi
		call	DH_free
		jmp	loc_6E40B195
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B300:				; CODE XREF: sub_6E40B060+193j
		test	dl, 0E0h
		jz	loc_6E40B570
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E40C340
		mov	esi, [eax+74h]
		test	esi, esi
		jz	loc_6E40BBCA
		mov	[esp+2FCh+var_2D4], 0

loc_6E40B330:				; CODE XREF: sub_6E40B060+B8Aj
		mov	[esp+2FCh+Dst],	esi
		call	EC_KEY_get0_group
		mov	edi, eax
		mov	[esp+2FCh+var_2DC], eax
		mov	[esp+2FCh+Dst],	esi
		call	EC_KEY_get0_public_key
		mov	esi, eax
		test	edi, edi
		jz	loc_6E40C067
		test	eax, eax
		jz	loc_6E40C067
		call	EC_KEY_new
		mov	[esp+2FCh+var_2E0], eax
		test	eax, eax
		jz	loc_6E40C1FA
		mov	eax, [esp+2FCh+var_2DC]
		mov	[esp+2FCh+Src],	eax
		mov	eax, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Dst],	eax
		call	EC_KEY_set_group
		test	eax, eax
		jz	loc_6E40BF08
		mov	eax, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Dst],	eax
		call	EC_KEY_generate_key
		test	eax, eax
		jz	loc_6E40BF51
		mov	eax, [esp+2FCh+var_2DC]
		mov	[esp+2FCh+Dst],	eax
		call	EC_GROUP_get_degree
		test	eax, eax
		jle	loc_6E40C17E
		mov	[esp+2FCh+var_2EC], 0
		mov	edi, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+var_2F0], edi
		mov	[esp+2FCh+Size], esi
		add	eax, 7
		sar	eax, 3
		mov	[esp+2FCh+Src],	eax
		mov	eax, [esp+2FCh+var_2E4]
		mov	[esp+2FCh+Dst],	eax
		call	ECDH_compute_key
		mov	esi, eax
		test	eax, eax
		jle	loc_6E40C171
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	edi, [ebx+0C0h]
		mov	[esp+2FCh+var_2F0], esi
		mov	ecx, [esp+2FCh+var_2E4]
		mov	[esp+2FCh+Size], ecx
		lea	edx, [edi+14h]
		mov	[esp+2FCh+Src],	edx
		mov	[esp+2FCh+Dst],	ebx
		call	eax
		mov	[edi+10h], eax
		mov	edx, esi
		mov	edi, [esp+2FCh+var_2E4]
		cmp	esi, 4
		jnb	loc_6E40B9B0

loc_6E40B41A:				; CODE XREF: sub_6E40B060+971j
		test	dl, 2
		jnz	loc_6E40B980

loc_6E40B423:				; CODE XREF: sub_6E40B060+928j
		and	edx, 1
		jnz	loc_6E40B970

loc_6E40B42C:				; CODE XREF: sub_6E40B060+913j
		mov	eax, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Dst],	eax
		call	EC_KEY_get0_public_key
		mov	[esp+2FCh+var_2E8], 0
		mov	[esp+2FCh+var_2EC], 0
		mov	[esp+2FCh+var_2F0], 0
		mov	[esp+2FCh+Size], 4
		mov	[esp+2FCh+Src],	eax
		mov	esi, [esp+2FCh+var_2DC]
		mov	[esp+2FCh+Dst],	esi
		call	EC_POINT_point2oct
		mov	esi, eax
		mov	[esp+2FCh+Size], 0AE0h
		mov	[esp+2FCh+Src],	offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+2FCh+Dst],	eax
		call	CRYPTO_malloc
		mov	edi, eax
		mov	[esp+2FCh+var_2D0], eax
		call	BN_CTX_new
		mov	[esp+2FCh+var_2D8], eax
		test	edi, edi
		jz	loc_6E40C303
		test	eax, eax
		jz	loc_6E40C128
		mov	edx, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Dst],	edx
		call	EC_KEY_get0_public_key
		mov	ecx, [esp+2FCh+var_2D8]
		mov	[esp+2FCh+var_2E8], ecx
		mov	[esp+2FCh+var_2EC], esi
		mov	esi, edi
		mov	[esp+2FCh+var_2F0], edi
		mov	[esp+2FCh+Size], 4
		mov	[esp+2FCh+Src],	eax
		mov	eax, [esp+2FCh+var_2DC]
		mov	[esp+2FCh+Dst],	eax
		call	EC_POINT_point2oct
		mov	[ebp+4], al
		mov	edx, eax
		lea	edi, [ebp+5]
		cmp	eax, 4
		jnb	loc_6E40B9E0

loc_6E40B4E8:				; CODE XREF: sub_6E40B060+99Fj
		xor	ecx, ecx
		test	dl, 2
		jnz	loc_6E40B9A0

loc_6E40B4F3:				; CODE XREF: sub_6E40B060+94Bj
		and	edx, 1
		jnz	loc_6E40B990

loc_6E40B4FC:				; CODE XREF: sub_6E40B060+93Aj
		inc	eax
		mov	[esp+2FCh+var_2E4], eax
		mov	eax, [esp+2FCh+var_2D8]
		mov	[esp+2FCh+Dst],	eax
		call	BN_CTX_free
		mov	eax, [esp+2FCh+var_2D0]
		mov	[esp+2FCh+Dst],	eax
		call	CRYPTO_free
		mov	eax, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Dst],	eax
		call	EC_KEY_free
		mov	eax, [esp+2FCh+var_2D4]
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_free
		jmp	loc_6E40B195
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B540:				; CODE XREF: sub_6E40B060+AAj
		lea	eax, [ebp+6]
		mov	[esp+2FCh+var_2E4], eax
		jmp	loc_6E40B110
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B550:				; CODE XREF: sub_6E40B060+F1j
		mov	esi, [esp+2FCh+var_2E4]
		mov	eax, esi
		sar	eax, 8
		mov	[ebp+4], al
		mov	eax, esi
		mov	[ebp+5], al
		add	[esp+2FCh+var_2E4], 2
		jmp	loc_6E40B157
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B570:				; CODE XREF: sub_6E40B060+2A3j
		test	dh, 2
		jz	loc_6E40B840
		mov	eax, [ebx+0C0h]
		mov	edx, [eax+98h]
		mov	eax, [edx+60h]
		test	eax, eax
		jz	loc_6E40BC78

loc_6E40B590:				; CODE XREF: sub_6E40B060+C1Dj
		mov	[esp+2FCh+Dst],	eax
		call	X509_get_pubkey
		mov	[esp+2FCh+var_2D8], eax
		mov	[esp+2FCh+Src],	0
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_CTX_new
		mov	[esp+2FCh+var_2DC], eax
		test	eax, eax
		jz	loc_6E40C3D4
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_encrypt_init
		test	eax, eax
		jle	loc_6E40BFD3
		mov	[esp+2FCh+Src],	20h
		lea	eax, [esp+2FCh+var_2C4]
		mov	[esp+2FCh+Dst],	eax
		call	RAND_bytes
		test	eax, eax
		jle	loc_6E40BFD3
		mov	eax, [ebx+58h]
		mov	eax, [eax+358h]
		test	eax, eax
		jz	short loc_6E40B618
		mov	eax, [ebx+98h]
		mov	eax, [eax]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6E40B618
		mov	[esp+2FCh+Src],	eax
		mov	eax, [esp+2FCh+var_2DC]
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_derive_set_peer
		test	eax, eax
		jle	loc_6E40C039

loc_6E40B618:				; CODE XREF: sub_6E40B060+58Fj
					; sub_6E40B060+59Ej ...
		call	EVP_MD_CTX_create
		mov	esi, eax
		mov	[esp+2FCh+Dst],	329h
		call	OBJ_nid2sn
		mov	[esp+2FCh+Dst],	eax
		call	EVP_get_digestbyname
		mov	[esp+2FCh+Src],	eax
		mov	[esp+2FCh+Dst],	esi
		call	EVP_DigestInit
		test	eax, eax
		jle	loc_6E40BEBA
		mov	[esp+2FCh+Size], 20h
		mov	eax, [ebx+58h]
		add	eax, 0C0h
		mov	[esp+2FCh+Src],	eax
		mov	[esp+2FCh+Dst],	esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E40BEBA
		mov	[esp+2FCh+Size], 20h
		mov	eax, [ebx+58h]
		add	eax, 0A0h
		mov	[esp+2FCh+Src],	eax
		mov	[esp+2FCh+Dst],	esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E40BEBA
		lea	eax, [esp+2FCh+var_2C8]
		mov	[esp+2FCh+Size], eax
		lea	edi, [esp+2FCh+var_2A4]
		mov	[esp+2FCh+Src],	edi
		mov	[esp+2FCh+Dst],	esi
		call	EVP_DigestFinal_ex
		test	eax, eax
		jle	loc_6E40BEBA
		mov	[esp+2FCh+Dst],	esi
		call	EVP_MD_CTX_destroy
		mov	[esp+2FCh+var_2E8], edi
		mov	[esp+2FCh+var_2EC], 8
		mov	[esp+2FCh+var_2F0], 8
		mov	[esp+2FCh+Size], 100h
		mov	[esp+2FCh+Src],	0FFFFFFFFh
		mov	eax, [esp+2FCh+var_2DC]
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_CTX_ctrl
		test	eax, eax
		js	loc_6E40C1C9
		mov	byte ptr [ebp+4], 30h
		mov	[esp+2FCh+var_2CC], 0FFh
		mov	[esp+2FCh+var_2EC], 20h
		lea	eax, [esp+2FCh+var_2C4]
		mov	[esp+2FCh+var_2F0], eax
		lea	eax, [esp+2FCh+var_2CC]
		mov	[esp+2FCh+Size], eax
		lea	eax, [esp+2FCh+var_220]
		mov	[esp+2FCh+var_2E0], eax
		mov	[esp+2FCh+Src],	eax
		mov	eax, [esp+2FCh+var_2DC]
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_encrypt
		test	eax, eax
		jle	loc_6E40C2AE
		mov	eax, [esp+2FCh+var_2CC]
		cmp	eax, 7Fh
		jbe	loc_6E40BB95
		lea	edi, [ebp+7]
		mov	[ebp+6], al
		lea	esi, [eax+3]
		mov	[esp+2FCh+var_2E4], esi
		mov	dl, 81h

loc_6E40B752:				; CODE XREF: sub_6E40B060+B41j
		mov	[ebp+5], dl
		mov	esi, [esp+2FCh+var_2E0]
		cmp	eax, 4
		jnb	loc_6E40BBA6

loc_6E40B762:				; CODE XREF: sub_6E40B060+B65j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E40B773
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E40B773:				; CODE XREF: sub_6E40B060+706j
		test	al, 1
		jz	short loc_6E40B781
		mov	al, [esi+edx]
		mov	byte ptr [esp+2FCh+var_2E0], al
		mov	[edi+edx], al

loc_6E40B781:				; CODE XREF: sub_6E40B060+715j
		mov	[esp+2FCh+var_2E8], 0
		mov	[esp+2FCh+var_2EC], 2
		mov	[esp+2FCh+var_2F0], 2
		mov	[esp+2FCh+Size], 0FFFFFFFFh
		mov	[esp+2FCh+Src],	0FFFFFFFFh
		mov	eax, [esp+2FCh+var_2DC]
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_CTX_ctrl
		test	eax, eax
		jle	short loc_6E40B7BF
		mov	eax, [ebx+58h]
		or	dword ptr [eax], 10h

loc_6E40B7BF:				; CODE XREF: sub_6E40B060+757j
		mov	eax, [esp+2FCh+var_2DC]
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_CTX_free
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	esi, [ebx+0C0h]
		mov	[esp+2FCh+var_2F0], 20h
		lea	edi, [esp+2FCh+var_2C4]
		mov	[esp+2FCh+Size], edi
		lea	edx, [esi+14h]
		mov	[esp+2FCh+Src],	edx
		mov	[esp+2FCh+Dst],	ebx
		call	eax
		mov	[esi+10h], eax
		mov	eax, [esp+2FCh+var_2D8]
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_free
		jmp	loc_6E40B195
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B810:				; CODE XREF: sub_6E40B060+236j
		test	edi, 1
		jnz	loc_6E40BC6A

loc_6E40B81C:				; CODE XREF: sub_6E40B060+C13j
		test	edi, 2
		jnz	loc_6E40BC5A

loc_6E40B828:				; CODE XREF: sub_6E40B060+C05j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E40B29C
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B840:				; CODE XREF: sub_6E40B060+513j
		mov	eax, edx
		and	eax, 400h
		jz	loc_6E40BA58
		mov	eax, [ebx+1B8h]
		test	eax, eax
		jz	loc_6E40C396
		mov	[esp+2FCh+Dst],	eax
		call	BN_num_bits
		mov	edx, eax
		add	edx, 7
		js	loc_6E40BECF

loc_6E40B86E:				; CODE XREF: sub_6E40B060+E72j
		mov	esi, edx
		sar	esi, 3
		sar	edx, 0Bh
		mov	[ebp+4], dl
		mov	eax, esi
		mov	[ebp+5], al
		mov	eax, [ebx+1B8h]
		lea	edx, [ebp+6]
		mov	[esp+2FCh+Src],	edx
		mov	[esp+2FCh+Dst],	eax
		call	BN_bn2bin
		lea	eax, [esi+2]
		mov	[esp+2FCh+var_2E4], eax
		mov	esi, [ebx+0C0h]
		mov	eax, [esi+0F0h]
		test	eax, eax
		jz	short loc_6E40B8B8
		mov	[esp+2FCh+Dst],	eax
		call	CRYPTO_free
		mov	esi, [ebx+0C0h]

loc_6E40B8B8:				; CODE XREF: sub_6E40B060+848j
		mov	eax, [ebx+1A4h]
		mov	[esp+2FCh+Dst],	eax
		call	BUF_strdup
		mov	[esi+0F0h], eax
		mov	esi, [ebx+0C0h]
		mov	edi, [esi+0F0h]
		test	edi, edi
		jz	loc_6E40C3A3
		lea	eax, [esi+14h]
		mov	[esp+2FCh+Src],	eax
		mov	[esp+2FCh+Dst],	ebx
		call	SRP_generate_client_master_secret
		mov	[esi+10h], eax
		test	eax, eax
		jns	loc_6E40B195
		mov	[esp+2FCh+var_2EC], 0B9Ah

loc_6E40B902:				; CODE XREF: sub_6E40B060+E6Aj
					; sub_6E40B060+F87j ...
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 44h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E40B930:				; CODE XREF: sub_6E40B060+91j
					; sub_6E40B060+B30j ...
		mov	[esp+2FCh+var_2D4], 0

loc_6E40B938:				; CODE XREF: sub_6E40B060+BBCj
					; sub_6E40B060+1072j ...
		mov	[esp+2FCh+Dst],	0
		call	BN_CTX_free

loc_6E40B944:				; CODE XREF: sub_6E40B060+EECj
		mov	eax, [esp+2FCh+var_2D4]
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_free
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E40B1D6
; ---------------------------------------------------------------------------
		jmp	short loc_6E40B970
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B970:				; CODE XREF: sub_6E40B060+3C6j
					; sub_6E40B060+901j
		mov	byte ptr [edi],	0
		jmp	loc_6E40B42C
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B980:				; CODE XREF: sub_6E40B060+3BDj
		mov	word ptr [edi],	0
		add	edi, 2
		jmp	loc_6E40B423
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B990:				; CODE XREF: sub_6E40B060+496j
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+2FCh+var_2E4], dl
		mov	[edi+ecx], dl
		jmp	loc_6E40B4FC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B9A0:				; CODE XREF: sub_6E40B060+48Dj
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	loc_6E40B4F3
; ---------------------------------------------------------------------------

loc_6E40B9B0:				; CODE XREF: sub_6E40B060+3B4j
		test	edi, 1
		jnz	loc_6E40BF8F

loc_6E40B9BC:				; CODE XREF: sub_6E40B060+F34j
		test	edi, 2
		jnz	loc_6E40BF7F

loc_6E40B9C8:				; CODE XREF: sub_6E40B060+F2Aj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E40B41A
; ---------------------------------------------------------------------------
		align 10h

loc_6E40B9E0:				; CODE XREF: sub_6E40B060+482j
		test	edi, 1
		jnz	loc_6E40BFAD

loc_6E40B9EC:				; CODE XREF: sub_6E40B060+F61j
		test	edi, 2
		jnz	loc_6E40BF99

loc_6E40B9F8:				; CODE XREF: sub_6E40B060+F48j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E40B4E8
; ---------------------------------------------------------------------------
		align 10h

loc_6E40BA10:				; CODE XREF: sub_6E40B060+59j
		mov	eax, [eax+0Ch]
		mov	[esp+2FCh+Dst],	eax
		call	X509_get_pubkey
		test	eax, eax
		jz	loc_6E40BCCD
		cmp	dword ptr [eax], 6
		jnz	loc_6E40BCCD
		mov	esi, [eax+14h]
		test	esi, esi
		jz	loc_6E40BCCD
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_free
		jmp	loc_6E40B0BF
; ---------------------------------------------------------------------------
		align 10h

loc_6E40BA50:				; CODE XREF: sub_6E40B060+261j
		lea	edx, [eax+0Eh]
		jmp	loc_6E40B2C7
; ---------------------------------------------------------------------------

loc_6E40BA58:				; CODE XREF: sub_6E40B060+7E7j
		and	dh, 1
		jz	loc_6E40C27C
		mov	edx, [ebx+0DCh]
		test	edx, edx
		jz	loc_6E40C365
		mov	ecx, 20h
		lea	edi, [esp+2FCh+var_2A4]
		rep stosd
		mov	word ptr [edi],	0
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+8Ch]
		mov	[esp+2FCh+var_2E8], 204h
		lea	esi, [esp+2FCh+var_220]
		mov	[esp+2FCh+var_2E0], esi
		mov	[esp+2FCh+var_2EC], esi
		mov	[esp+2FCh+var_2F0], 81h
		lea	esi, [esp+2FCh+var_2A4]
		mov	[esp+2FCh+Size], esi
		mov	[esp+2FCh+Src],	eax
		mov	[esp+2FCh+Dst],	ebx
		call	edx
		mov	edx, eax
		cmp	eax, 100h
		ja	loc_6E40BCC0
		test	eax, eax
		jz	loc_6E40BED7
		mov	[esp+2FCh+var_223], 0
		lea	eax, [esp+2FCh+var_2A4]
		mov	esi, eax

loc_6E40BADE:				; CODE XREF: sub_6E40B060+A92j
		mov	ecx, [esi]
		add	esi, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_6E40BADE
		mov	[esp+2FCh+var_2E4], esi
		test	eax, 8080h
		jnz	short loc_6E40BB07
		shr	eax, 10h
		add	[esp+2FCh+var_2E4], 2

loc_6E40BB07:				; CODE XREF: sub_6E40B060+A9Dj
		add	al, al
		sbb	[esp+2FCh+var_2E4], 3
		lea	eax, [esp+2FCh+var_2A4]
		sub	[esp+2FCh+var_2E4], eax
		cmp	[esp+2FCh+var_2E4], 80h
		jbe	loc_6E40BD0E
		mov	[esp+2FCh+var_2EC], 0BC6h

loc_6E40BB2C:				; CODE XREF: sub_6E40B060+C68j
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 44h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error

loc_6E40BB50:				; CODE XREF: sub_6E40B060+EA3j
					; sub_6E40B060+1164j
		mov	[esp+2FCh+Src],	82h
		lea	eax, [esp+2FCh+var_2A4]
		mov	[esp+2FCh+Dst],	eax
		call	OPENSSL_cleanse
		mov	[esp+2FCh+Src],	204h
		mov	eax, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Dst],	eax
		call	OPENSSL_cleanse
		mov	[esp+2FCh+Size], 28h
		mov	[esp+2FCh+Src],	2
		mov	[esp+2FCh+Dst],	ebx
		call	sub_6E4151B0
		jmp	loc_6E40B930
; ---------------------------------------------------------------------------

loc_6E40BB95:				; CODE XREF: sub_6E40B060+6DDj
		lea	edi, [ebp+6]
		mov	dl, al
		lea	esi, [eax+2]
		mov	[esp+2FCh+var_2E4], esi
		jmp	loc_6E40B752
; ---------------------------------------------------------------------------

loc_6E40BBA6:				; CODE XREF: sub_6E40B060+6FCj
		test	edi, 1
		jnz	loc_6E40C088

loc_6E40BBB2:				; CODE XREF: sub_6E40B060+1039j
		test	edi, 2
		jnz	loc_6E40C074

loc_6E40BBBE:				; CODE XREF: sub_6E40B060+1023j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E40B762
; ---------------------------------------------------------------------------

loc_6E40BBCA:				; CODE XREF: sub_6E40B060+2C2j
		mov	eax, [eax+48h]
		mov	[esp+2FCh+Dst],	eax
		call	X509_get_pubkey
		mov	[esp+2FCh+var_2D4], eax
		test	eax, eax
		jz	short loc_6E40BBF0
		cmp	dword ptr [eax], 198h
		jnz	short loc_6E40BBF0
		mov	esi, [eax+14h]
		test	esi, esi
		jnz	loc_6E40B330

loc_6E40BBF0:				; CODE XREF: sub_6E40B060+B7Bj
					; sub_6E40B060+B83j
		mov	[esp+2FCh+var_2EC], 0A83h

loc_6E40BBF8:				; CODE XREF: sub_6E40B060+100Fj
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 44h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E40B938
; ---------------------------------------------------------------------------

loc_6E40BC21:				; CODE XREF: sub_6E40B060+1D4j
		mov	[esp+2FCh+var_2EC], 0A29h

loc_6E40BC29:				; CODE XREF: sub_6E40B060+F6Ej
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 5
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		mov	[esp+2FCh+Dst],	esi
		call	DH_free
		jmp	loc_6E40B930
; ---------------------------------------------------------------------------

loc_6E40BC5A:				; CODE XREF: sub_6E40B060+7C2j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E40B828
; ---------------------------------------------------------------------------

loc_6E40BC6A:				; CODE XREF: sub_6E40B060+7B6j
		mov	byte ptr [edi],	0
		lea	edi, [edi+1]
		lea	edx, [ecx-1]
		jmp	loc_6E40B81C
; ---------------------------------------------------------------------------

loc_6E40BC78:				; CODE XREF: sub_6E40B060+52Aj
		mov	eax, [edx+54h]
		test	eax, eax
		jnz	loc_6E40B590
		mov	[esp+2FCh+var_2EC], 0B17h
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 14Ah
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E40B930
; ---------------------------------------------------------------------------
		align 10h

loc_6E40BCC0:				; CODE XREF: sub_6E40B060+A62j
		mov	[esp+2FCh+var_2EC], 0BBBh
		jmp	loc_6E40BB2C
; ---------------------------------------------------------------------------

loc_6E40BCCD:				; CODE XREF: sub_6E40B060+9BDj
					; sub_6E40B060+9C6j ...
		mov	[esp+2FCh+var_2E4], eax
		mov	[esp+2FCh+var_2EC], 95Ch
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 44h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		mov	eax, [esp+2FCh+var_2E4]
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_free
		jmp	loc_6E40B930
; ---------------------------------------------------------------------------

loc_6E40BD0E:				; CODE XREF: sub_6E40B060+ABEj
		lea	eax, [edx+edx+4]
		mov	[esp+2FCh+var_2D4], eax
		mov	[esp+2FCh+Size], edx ; Size
		mov	eax, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Src],	eax ; Src
		lea	eax, [eax+edx+4]
		mov	[esp+2FCh+var_2DC], edx
		mov	[esp+2FCh+Dst],	eax ; Dst
		call	memmove
		mov	edx, [esp+2FCh+var_2DC]
		mov	eax, edx
		shr	eax, 8
		mov	[esp+2FCh+var_2D8], eax
		mov	[esp+2FCh+var_220], al
		mov	[esp+2FCh+var_21F], dl
		lea	esi, [esp+2FCh+var_21E]
		mov	edi, esi
		cmp	edx, 4
		jnb	loc_6E40C01D

loc_6E40BD5F:				; CODE XREF: sub_6E40B060+FD4j
		test	byte ptr [esp+2FCh+var_2DC], 2
		jz	short loc_6E40BD6E
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E40BD6E:				; CODE XREF: sub_6E40B060+D04j
		test	byte ptr [esp+2FCh+var_2DC], 1
		jz	short loc_6E40BD78
		mov	byte ptr [edi],	0

loc_6E40BD78:				; CODE XREF: sub_6E40B060+D13j
		lea	eax, [esi+edx]
		mov	cl, byte ptr [esp+2FCh+var_2D8]
		mov	[eax], cl
		mov	[eax+1], dl
		mov	esi, [ebx+0C0h]
		mov	eax, [esi+8Ch]
		test	eax, eax
		jz	short loc_6E40BDA2
		mov	[esp+2FCh+Dst],	eax
		call	CRYPTO_free
		mov	esi, [ebx+0C0h]

loc_6E40BDA2:				; CODE XREF: sub_6E40B060+D32j
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+2FCh+Dst],	eax
		call	BUF_strdup
		mov	[esi+8Ch], eax
		mov	eax, [ebx+0E4h]
		mov	ecx, [eax+14Ch]
		test	ecx, ecx
		mov	esi, [ebx+0C0h]
		jz	short loc_6E40BDE0
		mov	edx, [esi+8Ch]
		test	edx, edx
		jz	loc_6E40C2A1

loc_6E40BDE0:				; CODE XREF: sub_6E40B060+D70j
		mov	eax, [esi+90h]
		test	eax, eax
		jz	short loc_6E40BDF8
		mov	[esp+2FCh+Dst],	eax
		call	CRYPTO_free
		mov	esi, [ebx+0C0h]

loc_6E40BDF8:				; CODE XREF: sub_6E40B060+D88j
		lea	eax, [esp+2FCh+var_2A4]
		mov	[esp+2FCh+Dst],	eax
		call	BUF_strdup
		mov	[esi+90h], eax
		mov	esi, [ebx+0C0h]
		mov	eax, [esi+90h]
		test	eax, eax
		jz	loc_6E40C198
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	edi, [esp+2FCh+var_2D4]
		mov	[esp+2FCh+var_2F0], edi
		mov	edi, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Size], edi
		lea	edx, [esi+14h]
		mov	[esp+2FCh+Src],	edx
		mov	[esp+2FCh+Dst],	ebx
		call	eax
		mov	[esi+10h], eax
		mov	byte ptr [ebp+4], 0
		mov	ecx, [esp+2FCh+var_2E4]
		mov	[ebp+5], cl
		mov	eax, ecx
		lea	edi, [ebp+6]
		lea	esi, [esp+2FCh+var_2A4]
		cmp	ecx, 4
		jnb	loc_6E40C043

loc_6E40BE63:				; CODE XREF: sub_6E40B060+1002j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E40BE74
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E40BE74:				; CODE XREF: sub_6E40B060+E07j
		test	al, 1
		jz	short loc_6E40BE82
		mov	al, [esi+edx]
		mov	byte ptr [esp+2FCh+var_2DC], al
		mov	[edi+edx], al

loc_6E40BE82:				; CODE XREF: sub_6E40B060+E16j
		mov	eax, [esp+2FCh+var_2E4]
		add	eax, 2
		mov	[esp+2FCh+var_2E4], eax
		mov	[esp+2FCh+Src],	82h
		lea	eax, [esp+2FCh+var_2A4]
		mov	[esp+2FCh+Dst],	eax
		call	OPENSSL_cleanse
		mov	[esp+2FCh+Src],	204h
		mov	eax, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Dst],	eax
		call	OPENSSL_cleanse
		jmp	loc_6E40B195
; ---------------------------------------------------------------------------

loc_6E40BEBA:				; CODE XREF: sub_6E40B060+5E1j
					; sub_6E40B060+605j ...
		mov	[esp+2FCh+Dst],	esi
		call	EVP_MD_CTX_destroy
		mov	[esp+2FCh+var_2EC], 0B4Fh
		jmp	loc_6E40B902
; ---------------------------------------------------------------------------

loc_6E40BECF:				; CODE XREF: sub_6E40B060+808j
		lea	edx, [eax+0Eh]
		jmp	loc_6E40B86E
; ---------------------------------------------------------------------------

loc_6E40BED7:				; CODE XREF: sub_6E40B060+A6Aj
		mov	[esp+2FCh+var_2EC], 0BBFh
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 0DFh
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E40BB50
; ---------------------------------------------------------------------------

loc_6E40BF08:				; CODE XREF: sub_6E40B060+31Fj
		mov	[esp+2FCh+var_2EC], 0A9Ah
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 10h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error

loc_6E40BF34:				; CODE XREF: sub_6E40B060+F1Dj
		mov	[esp+2FCh+Dst],	0
		call	BN_CTX_free

loc_6E40BF40:				; CODE XREF: sub_6E40B060+110Cj
					; sub_6E40B060+12DBj
		mov	eax, [esp+2FCh+var_2E0]
		mov	[esp+2FCh+Dst],	eax
		call	EC_KEY_free
		jmp	loc_6E40B944
; ---------------------------------------------------------------------------

loc_6E40BF51:				; CODE XREF: sub_6E40B060+333j
		mov	[esp+2FCh+var_2EC], 0AB2h

loc_6E40BF59:				; CODE XREF: sub_6E40B060+1119j
					; sub_6E40B060+1126j
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 2Bh
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		jmp	short loc_6E40BF34
; ---------------------------------------------------------------------------

loc_6E40BF7F:				; CODE XREF: sub_6E40B060+962j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E40B9C8
; ---------------------------------------------------------------------------

loc_6E40BF8F:				; CODE XREF: sub_6E40B060+956j
		mov	byte ptr [edi],	0
		inc	edi
		dec	edx
		jmp	loc_6E40B9BC
; ---------------------------------------------------------------------------

loc_6E40BF99:				; CODE XREF: sub_6E40B060+992j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E40B9F8
; ---------------------------------------------------------------------------

loc_6E40BFAD:				; CODE XREF: sub_6E40B060+986j
		mov	esi, [esp+2FCh+var_2D0]
		mov	cl, [esi]
		mov	byte ptr [esp+2FCh+var_2E4], cl
		mov	[ebp+5], cl
		lea	edi, [ebp+6]
		inc	esi
		lea	edx, [eax-1]
		jmp	loc_6E40B9EC
; ---------------------------------------------------------------------------

loc_6E40BFC6:				; CODE XREF: sub_6E40B060+1F5j
		mov	[esp+2FCh+var_2EC], 0A36h
		jmp	loc_6E40BC29
; ---------------------------------------------------------------------------

loc_6E40BFD3:				; CODE XREF: sub_6E40B060+562j
					; sub_6E40B060+57Ej
		mov	eax, [esp+2FCh+var_2DC]
		mov	[esp+2FCh+Dst],	eax
		call	EVP_PKEY_CTX_free
		mov	[esp+2FCh+var_2EC], 0B31h
		jmp	loc_6E40B902
; ---------------------------------------------------------------------------

loc_6E40BFEC:				; CODE XREF: sub_6E40B060+E5j
		mov	[esp+2FCh+var_2EC], 979h
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 77h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E40B930
; ---------------------------------------------------------------------------

loc_6E40C01D:				; CODE XREF: sub_6E40B060+CF9j
		test	esi, 2
		jnz	loc_6E40C2EB

loc_6E40C029:				; CODE XREF: sub_6E40B060+129Ej
		mov	ecx, [esp+2FCh+var_2DC]
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E40BD5F
; ---------------------------------------------------------------------------

loc_6E40C039:				; CODE XREF: sub_6E40B060+5B2j
		call	ERR_clear_error
		jmp	loc_6E40B618
; ---------------------------------------------------------------------------

loc_6E40C043:				; CODE XREF: sub_6E40B060+DFDj
		test	edi, 1
		jnz	loc_6E40C2CF

loc_6E40C04F:				; CODE XREF: sub_6E40B060+1286j
		test	edi, 2
		jnz	loc_6E40C2BB

loc_6E40C05B:				; CODE XREF: sub_6E40B060+126Aj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E40BE63
; ---------------------------------------------------------------------------

loc_6E40C067:				; CODE XREF: sub_6E40B060+2EAj
					; sub_6E40B060+2F2j
		mov	[esp+2FCh+var_2EC], 0A8Fh
		jmp	loc_6E40BBF8
; ---------------------------------------------------------------------------

loc_6E40C074:				; CODE XREF: sub_6E40B060+B58j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40BBBE
; ---------------------------------------------------------------------------

loc_6E40C088:				; CODE XREF: sub_6E40B060+B4Cj
		mov	cl, [esi]
		mov	byte ptr [esp+2FCh+var_2E0], cl
		mov	[edi], cl
		inc	edi
		lea	esi, [esp+2FCh+var_21F]
		dec	eax
		jmp	loc_6E40BBB2
; ---------------------------------------------------------------------------

loc_6E40C09E:				; CODE XREF: sub_6E40B060+1C4j
		mov	[esp+2FCh+var_2EC], 0A25h
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 5
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		mov	[esp+2FCh+var_2D4], 0
		jmp	loc_6E40B938
; ---------------------------------------------------------------------------

loc_6E40C0D7:				; CODE XREF: sub_6E40B060+1B2j
		mov	[esp+2FCh+Size], 28h
		mov	[esp+2FCh+Src],	2
		mov	[esp+2FCh+Dst],	ebx
		call	sub_6E4151B0
		mov	[esp+2FCh+var_2EC], 0A1Fh
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 0EEh
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		mov	[esp+2FCh+var_2D4], 0
		jmp	loc_6E40B938
; ---------------------------------------------------------------------------

loc_6E40C128:				; CODE XREF: sub_6E40B060+43Bj
		mov	[esp+2FCh+var_2EC], 0AE4h
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 41h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		mov	[esp+2FCh+Dst],	0
		call	BN_CTX_free
		mov	eax, [esp+2FCh+var_2D0]
		mov	[esp+2FCh+Dst],	eax
		call	CRYPTO_free
		jmp	loc_6E40BF40
; ---------------------------------------------------------------------------

loc_6E40C171:				; CODE XREF: sub_6E40B060+37Bj
		mov	[esp+2FCh+var_2EC], 0AC4h
		jmp	loc_6E40BF59
; ---------------------------------------------------------------------------

loc_6E40C17E:				; CODE XREF: sub_6E40B060+347j
		mov	[esp+2FCh+var_2EC], 0ABEh
		jmp	loc_6E40BF59
; ---------------------------------------------------------------------------

loc_6E40C18B:				; CODE XREF: sub_6E40B060+4Ej
		mov	[esp+2FCh+var_2EC], 94Eh
		jmp	loc_6E40B902
; ---------------------------------------------------------------------------

loc_6E40C198:				; CODE XREF: sub_6E40B060+DB8j
		mov	[esp+2FCh+var_2EC], 0BE2h

loc_6E40C1A0:				; CODE XREF: sub_6E40B060+1249j
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 41h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E40BB50
; ---------------------------------------------------------------------------

loc_6E40C1C9:				; CODE XREF: sub_6E40B060+689j
		mov	[esp+2FCh+var_2EC], 0B57h

loc_6E40C1D1:				; CODE XREF: sub_6E40B060+1256j
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 112h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E40B930
; ---------------------------------------------------------------------------

loc_6E40C1FA:				; CODE XREF: sub_6E40B060+303j
		mov	[esp+2FCh+var_2EC], 0A95h
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 41h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E40B938
; ---------------------------------------------------------------------------

loc_6E40C22B:				; CODE XREF: sub_6E40B060+1A7j
		mov	[esp+2FCh+Size], 0Ah
		mov	[esp+2FCh+Src],	2
		mov	[esp+2FCh+Dst],	ebx
		call	sub_6E4151B0
		mov	[esp+2FCh+var_2EC], 0A15h

loc_6E40C24B:				; CODE XREF: sub_6E40B060+1300j
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 0F4h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		mov	[esp+2FCh+var_2D4], 0
		jmp	loc_6E40B938
; ---------------------------------------------------------------------------

loc_6E40C27C:				; CODE XREF: sub_6E40B060+9FBj
		mov	[esp+2FCh+Size], 28h
		mov	[esp+2FCh+Src],	2
		mov	[esp+2FCh+Dst],	ebx
		call	sub_6E4151B0
		mov	[esp+2FCh+var_2EC], 0BFBh
		jmp	loc_6E40B902
; ---------------------------------------------------------------------------

loc_6E40C2A1:				; CODE XREF: sub_6E40B060+D7Aj
		mov	[esp+2FCh+var_2EC], 0BD9h
		jmp	loc_6E40C1A0
; ---------------------------------------------------------------------------

loc_6E40C2AE:				; CODE XREF: sub_6E40B060+6D0j
		mov	[esp+2FCh+var_2EC], 0B63h
		jmp	loc_6E40C1D1
; ---------------------------------------------------------------------------

loc_6E40C2BB:				; CODE XREF: sub_6E40B060+FF5j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40C05B
; ---------------------------------------------------------------------------

loc_6E40C2CF:				; CODE XREF: sub_6E40B060+FE9j
		mov	al, [esp+2FCh+var_2A4]
		mov	byte ptr [esp+2FCh+var_2DC], al
		mov	[ebp+6], al
		lea	edi, [ebp+7]
		lea	esi, [esp+2FCh+var_2A3]
		mov	eax, [esp+2FCh+var_2E4]
		dec	eax
		jmp	loc_6E40C04F
; ---------------------------------------------------------------------------

loc_6E40C2EB:				; CODE XREF: sub_6E40B060+FC3j
		mov	word ptr [esi],	0
		lea	edi, [esp+2FCh+var_21C]
		lea	eax, [edx-2]
		mov	[esp+2FCh+var_2DC], eax
		jmp	loc_6E40C029
; ---------------------------------------------------------------------------

loc_6E40C303:				; CODE XREF: sub_6E40B060+433j
		mov	[esp+2FCh+var_2EC], 0AE4h
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 41h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		mov	eax, [esp+2FCh+var_2D8]
		mov	[esp+2FCh+Dst],	eax
		call	BN_CTX_free
		jmp	loc_6E40BF40
; ---------------------------------------------------------------------------

loc_6E40C340:				; CODE XREF: sub_6E40B060+2B7j
		mov	[esp+2FCh+Size], 0Ah
		mov	[esp+2FCh+Src],	2
		mov	[esp+2FCh+Dst],	ebx
		call	sub_6E4151B0
		mov	[esp+2FCh+var_2EC], 0A58h
		jmp	loc_6E40C24B
; ---------------------------------------------------------------------------

loc_6E40C365:				; CODE XREF: sub_6E40B060+A09j
		mov	[esp+2FCh+var_2EC], 0BB0h
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 0E0h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E40B930
; ---------------------------------------------------------------------------

loc_6E40C396:				; CODE XREF: sub_6E40B060+7F5j
		mov	[esp+2FCh+var_2EC], 0B89h
		jmp	loc_6E40B902
; ---------------------------------------------------------------------------

loc_6E40C3A3:				; CODE XREF: sub_6E40B060+87Aj
		mov	[esp+2FCh+var_2EC], 0B91h

loc_6E40C3AB:				; CODE XREF: sub_6E40B060+137Cj
		mov	[esp+2FCh+var_2F0], offset aS3_clnt_c ;	"s3_clnt.c"
		mov	[esp+2FCh+Size], 41h
		mov	[esp+2FCh+Src],	98h
		mov	[esp+2FCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E40B930
; ---------------------------------------------------------------------------

loc_6E40C3D4:				; CODE XREF: sub_6E40B060+552j
		mov	[esp+2FCh+var_2EC], 0B1Fh
		jmp	short loc_6E40C3AB
sub_6E40B060	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40C3E0	proc near		; CODE XREF: sub_6E40D250+1B5p

var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= byte ptr -98h
var_80		= byte ptr -80h
var_70		= byte ptr -70h
var_5D		= byte ptr -5Dh
var_5C		= dword	ptr -5Ch
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	ebx, [esp+0DCh+arg_0]
		mov	[esp+0DCh+var_A4], 0
		lea	eax, [esp+0DCh+var_98]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_MD_CTX_init
		cmp	dword ptr [ebx+34h], 1190h
		jz	short loc_6E40C440
		xor	esi, esi

loc_6E40C410:				; CODE XREF: sub_6E40C3E0+216j
		lea	eax, [esp+0DCh+var_98]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_MD_CTX_cleanup
		mov	[esp+0DCh+var_DC], esi
		call	EVP_PKEY_CTX_free
		mov	[esp+0DCh+var_D8], 16h
		mov	[esp+0DCh+var_DC], ebx
		call	sub_6E4157D0

loc_6E40C434:				; CODE XREF: sub_6E40C3E0+350j
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40C440:				; CODE XREF: sub_6E40C3E0+2Cj
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+0DCh+var_B8], eax
		lea	edi, [eax+4]
		mov	eax, [ebx+98h]
		mov	eax, [eax]
		mov	ebp, [eax+4]
		mov	[esp+0DCh+var_D8], 0
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_PKEY_CTX_new
		mov	esi, eax
		test	eax, eax
		jz	loc_6E40C8C0
		mov	[esp+0DCh+var_DC], eax
		call	EVP_PKEY_sign_init
		test	eax, eax
		jle	loc_6E40C8C0
		call	EVP_sha1
		mov	[esp+0DCh+var_C8], eax
		mov	[esp+0DCh+var_CC], 0
		mov	[esp+0DCh+var_D0], 1
		mov	[esp+0DCh+var_D4], 0F8h
		mov	[esp+0DCh+var_D8], 0FFFFFFFFh
		mov	[esp+0DCh+var_DC], esi
		call	EVP_PKEY_CTX_ctrl
		test	eax, eax
		jle	loc_6E40C780
		mov	eax, [ebx]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	loc_6E40C600

loc_6E40C4CB:				; CODE XREF: sub_6E40C3E0+225j
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+1Ch]
		lea	edx, [esp+0DCh+var_70]
		mov	[esp+0DCh+var_D4], edx
		mov	[esp+0DCh+var_D8], 40h
		mov	[esp+0DCh+var_DC], ebx
		call	eax

loc_6E40C4E9:				; CODE XREF: sub_6E40C3E0+3A5j
		mov	eax, [ebx]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	loc_6E40C735

loc_6E40C4F9:				; CODE XREF: sub_6E40C3E0+35Aj
		mov	eax, [ebp+0]
		cmp	eax, 6
		jz	loc_6E40C78A
		cmp	eax, 74h
		jz	loc_6E40C7FD
		cmp	eax, 198h
		jz	loc_6E40C855
		sub	eax, 32Bh
		cmp	eax, 1
		ja	loc_6E40C745
		mov	[esp+0DCh+var_9C], 40h
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+1Ch]
		lea	ebp, [esp+0DCh+var_80]
		mov	[esp+0DCh+var_D4], ebp
		mov	[esp+0DCh+var_D8], 329h
		mov	[esp+0DCh+var_DC], ebx
		call	eax
		mov	[esp+0DCh+var_CC], 20h
		mov	[esp+0DCh+var_D0], ebp
		lea	eax, [esp+0DCh+var_9C]
		mov	[esp+0DCh+var_D4], eax
		lea	eax, [esp+0DCh+var_5C]
		mov	[esp+0DCh+var_D8], eax
		mov	[esp+0DCh+var_DC], esi
		call	EVP_PKEY_sign
		test	eax, eax
		jle	loc_6E40C8FE
		mov	[esp+0DCh+var_A0], 0
		lea	edx, [esp+0DCh+var_1D]
		lea	ebp, [esp+0DCh+var_5D]
		xor	ecx, ecx
		jmp	short loc_6E40C5A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40C5A0:				; CODE XREF: sub_6E40C3E0+1B1j
					; sub_6E40C3E0+1D4j
		mov	al, [edx]
		mov	[edi+ecx+2], al
		mov	eax, [esp+0DCh+var_A0]
		lea	ecx, [eax+1]
		mov	[esp+0DCh+var_A0], ecx
		dec	edx
		cmp	edx, ebp
		jnz	short loc_6E40C5A0
		mov	edx, ecx
		sar	edx, 8
		mov	edi, [esp+0DCh+var_B8]
		mov	[edi+4], dl
		mov	[edi+5], cl
		lea	edx, [eax+3]

loc_6E40C5C8:				; CODE XREF: sub_6E40C3E0+32Aj
					; sub_6E40C3E0+418j ...
		mov	edi, [esp+0DCh+var_B8]
		mov	byte ptr [edi],	0Fh
		mov	eax, edx
		shr	eax, 10h
		mov	[edi+1], al
		mov	eax, edx
		shr	eax, 8
		mov	[edi+2], al
		mov	[edi+3], dl
		mov	dword ptr [ebx+34h], 1191h
		add	edx, 4
		mov	[ebx+44h], edx
		mov	dword ptr [ebx+48h], 0
		jmp	loc_6E40C410
; ---------------------------------------------------------------------------
		align 10h

loc_6E40C600:				; CODE XREF: sub_6E40C3E0+E5j
		cmp	eax, 302h
		jle	loc_6E40C4CB

loc_6E40C60B:				; CODE XREF: sub_6E40C3E0+360j
		mov	eax, [ebx+98h]
		mov	eax, [eax]
		mov	eax, [eax+8]
		mov	[esp+0DCh+var_B4], eax
		mov	eax, [ebx+58h]
		mov	eax, [eax+178h]
		lea	edx, [esp+0DCh+var_5C]
		mov	[esp+0DCh+var_D0], edx
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 3
		mov	[esp+0DCh+var_DC], eax
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E40C773
		mov	[esp+0DCh+var_B0], eax
		mov	eax, [esp+0DCh+var_B4]
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], ebp
		mov	[esp+0DCh+var_DC], edi
		call	sub_6E41DA10
		test	eax, eax
		jz	loc_6E40C773
		mov	[esp+0DCh+var_D4], 0
		mov	eax, [esp+0DCh+var_B4]
		mov	[esp+0DCh+var_D8], eax
		lea	eax, [esp+0DCh+var_98]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_DigestInit_ex
		test	eax, eax
		mov	edx, [esp+0DCh+var_B0]
		jz	loc_6E40C8CD
		mov	[esp+0DCh+var_D4], edx
		mov	eax, [esp+0DCh+var_5C]
		mov	[esp+0DCh+var_D8], eax
		lea	eax, [esp+0DCh+var_98]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E40C8CD
		mov	[esp+0DCh+var_D0], ebp
		lea	eax, [esp+0DCh+var_A4]
		mov	[esp+0DCh+var_D4], eax
		mov	edi, [esp+0DCh+var_B8]
		mov	eax, edi
		add	eax, 8
		mov	[esp+0DCh+var_D8], eax
		lea	eax, [esp+0DCh+var_98]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_SignFinal
		test	eax, eax
		jz	loc_6E40C8CD
		mov	edx, [esp+0DCh+var_A4]
		mov	eax, edx
		shr	eax, 8
		mov	[edi+6], al
		mov	[edi+7], dl
		add	edx, 4
		mov	[esp+0DCh+var_B4], edx
		mov	[esp+0DCh+var_DC], ebx
		call	sub_6E4118F0
		test	eax, eax
		mov	edx, [esp+0DCh+var_B4]
		jnz	loc_6E40C5C8

loc_6E40C710:				; CODE XREF: sub_6E40C3E0+391j
					; sub_6E40C3E0+4DAj ...
		lea	eax, [esp+0DCh+var_98]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_MD_CTX_cleanup
		mov	[esp+0DCh+var_DC], esi
		call	EVP_PKEY_CTX_free
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E40C434
; ---------------------------------------------------------------------------

loc_6E40C735:				; CODE XREF: sub_6E40C3E0+113j
		cmp	eax, 302h
		jle	loc_6E40C4F9
		jmp	loc_6E40C60B
; ---------------------------------------------------------------------------

loc_6E40C745:				; CODE XREF: sub_6E40C3E0+141j
		mov	[esp+0DCh+var_CC], 0C8Ch

loc_6E40C74D:				; CODE XREF: sub_6E40C3E0+39Bj
					; sub_6E40C3E0+4E8j ...
		mov	[esp+0DCh+var_D0], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+0DCh+var_D4], 44h
		mov	[esp+0DCh+var_D8], 99h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		jmp	short loc_6E40C710
; ---------------------------------------------------------------------------

loc_6E40C773:				; CODE XREF: sub_6E40C3E0+268j
					; sub_6E40C3E0+288j
		mov	[esp+0DCh+var_CC], 0C41h
		jmp	short loc_6E40C74D
; ---------------------------------------------------------------------------
		align 10h

loc_6E40C780:				; CODE XREF: sub_6E40C3E0+D5j
		call	ERR_clear_error
		jmp	loc_6E40C4E9
; ---------------------------------------------------------------------------

loc_6E40C78A:				; CODE XREF: sub_6E40C3E0+11Fj
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+1Ch]
		lea	edi, [esp+0DCh+var_80]
		mov	[esp+0DCh+var_D4], edi
		mov	[esp+0DCh+var_D8], 4
		mov	[esp+0DCh+var_DC], ebx
		call	eax
		mov	eax, [ebp+14h]
		mov	[esp+0DCh+var_C8], eax
		lea	eax, [esp+0DCh+var_A4]
		mov	[esp+0DCh+var_CC], eax
		mov	eax, [esp+0DCh+var_B8]
		add	eax, 6
		mov	[esp+0DCh+var_D0], eax
		mov	[esp+0DCh+var_D4], 24h
		mov	[esp+0DCh+var_D8], edi
		mov	[esp+0DCh+var_DC], 72h
		call	RSA_sign
		test	eax, eax
		jle	loc_6E40C93C
		mov	edx, [esp+0DCh+var_A4]
		mov	eax, edx
		shr	eax, 8
		mov	edi, [esp+0DCh+var_B8]
		mov	[edi+4], al
		mov	[edi+5], dl
		add	edx, 2
		jmp	loc_6E40C5C8
; ---------------------------------------------------------------------------

loc_6E40C7FD:				; CODE XREF: sub_6E40C3E0+128j
		mov	edx, [ebp+14h]
		mov	eax, [ebp+4]
		mov	[esp+0DCh+var_C8], edx
		lea	edx, [esp+0DCh+var_A0]
		mov	[esp+0DCh+var_CC], edx
		mov	edi, [esp+0DCh+var_B8]
		lea	edx, [edi+6]
		mov	[esp+0DCh+var_D0], edx
		mov	[esp+0DCh+var_D4], 14h
		lea	edx, [esp+0DCh+var_70]
		mov	[esp+0DCh+var_D8], edx
		mov	[esp+0DCh+var_DC], eax
		call	DSA_sign
		test	eax, eax
		jz	loc_6E40C90B

loc_6E40C83A:				; CODE XREF: sub_6E40C3E0+4ACj
		mov	edx, [esp+0DCh+var_A0]
		mov	eax, edx
		sar	eax, 8
		mov	edi, [esp+0DCh+var_B8]
		mov	[edi+4], al
		mov	[edi+5], dl
		add	edx, 2
		jmp	loc_6E40C5C8
; ---------------------------------------------------------------------------

loc_6E40C855:				; CODE XREF: sub_6E40C3E0+133j
		mov	edx, [ebp+14h]
		mov	eax, [ebp+4]
		mov	[esp+0DCh+var_C8], edx
		lea	edx, [esp+0DCh+var_A0]
		mov	[esp+0DCh+var_CC], edx
		mov	edi, [esp+0DCh+var_B8]
		lea	edx, [edi+6]
		mov	[esp+0DCh+var_D0], edx
		mov	[esp+0DCh+var_D4], 14h
		lea	edx, [esp+0DCh+var_70]
		mov	[esp+0DCh+var_D8], edx
		mov	[esp+0DCh+var_DC], eax
		call	ECDSA_sign
		test	eax, eax
		jnz	short loc_6E40C83A
		mov	[esp+0DCh+var_CC], 0C74h
		mov	[esp+0DCh+var_D0], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+0DCh+var_D4], 2Ah
		mov	[esp+0DCh+var_D8], 99h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		jmp	loc_6E40C710
; ---------------------------------------------------------------------------
		align 10h

loc_6E40C8C0:				; CODE XREF: sub_6E40C3E0+8Cj
					; sub_6E40C3E0+9Cj
		mov	[esp+0DCh+var_CC], 0C2Bh
		jmp	loc_6E40C74D
; ---------------------------------------------------------------------------

loc_6E40C8CD:				; CODE XREF: sub_6E40C3E0+2B0j
					; sub_6E40C3E0+2D3j ...
		mov	[esp+0DCh+var_CC], 0C4Ch
		mov	[esp+0DCh+var_D0], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+0DCh+var_D4], 6
		mov	[esp+0DCh+var_D8], 99h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		jmp	loc_6E40C710
; ---------------------------------------------------------------------------

loc_6E40C8FE:				; CODE XREF: sub_6E40C3E0+196j
		mov	[esp+0DCh+var_CC], 0C83h
		jmp	loc_6E40C74D
; ---------------------------------------------------------------------------

loc_6E40C90B:				; CODE XREF: sub_6E40C3E0+454j
		mov	[esp+0DCh+var_CC], 0C67h
		mov	[esp+0DCh+var_D0], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+0DCh+var_D4], 0Ah
		mov	[esp+0DCh+var_D8], 99h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		jmp	loc_6E40C710
; ---------------------------------------------------------------------------

loc_6E40C93C:				; CODE XREF: sub_6E40C3E0+3FCj
		mov	[esp+0DCh+var_CC], 0C5Ah
		mov	[esp+0DCh+var_D0], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+0DCh+var_D4], 4
		mov	[esp+0DCh+var_D8], 99h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		jmp	loc_6E40C710
sub_6E40C3E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40C970	proc near		; CODE XREF: sub_6E40D250+35Dp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 34h
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_14], 0
		mov	[esp+3Ch+var_10], 0
		mov	eax, [ebx+34h]
		cmp	eax, 1170h
		jz	short loc_6E40C9C0
		cmp	eax, 1171h
		jz	loc_6E40CA27
		cmp	eax, 1172h
		jz	short loc_6E40C9D9

loc_6E40C9A5:				; CODE XREF: sub_6E40C970+A8j
		mov	[esp+3Ch+var_38], 16h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4157D0

loc_6E40C9B5:				; CODE XREF: sub_6E40C970+2C9j
					; sub_6E40C970+2DAj
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40C9C0:				; CODE XREF: sub_6E40C970+21j
		mov	eax, [ebx+98h]
		test	eax, eax
		jz	short loc_6E40CA20
		mov	eax, [eax]
		mov	esi, [eax]
		test	esi, esi
		jz	short loc_6E40CA20
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_6E40CA20

loc_6E40C9D9:				; CODE XREF: sub_6E40C970+33j
					; sub_6E40C970+17Bj
		mov	eax, [ebx+58h]

loc_6E40C9DC:				; CODE XREF: sub_6E40C970+19Aj
		mov	dword ptr [ebx+34h], 1173h
		cmp	dword ptr [eax+358h], 2
		jz	loc_6E40CB10
		mov	eax, [ebx+98h]
		mov	eax, [eax]
		mov	eax, [eax]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4160B0
		test	eax, eax
		jz	loc_6E40CB26

loc_6E40CA0E:				; CODE XREF: sub_6E40C970+1B0j
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+48h], 0
		jmp	short loc_6E40C9A5
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CA20:				; CODE XREF: sub_6E40C970+58j
					; sub_6E40C970+60j ...
		mov	dword ptr [ebx+34h], 1171h

loc_6E40CA27:				; CODE XREF: sub_6E40C970+28j
		mov	eax, [ebx+0E4h]
		mov	edx, [eax+0FCh]
		test	edx, edx
		jz	short loc_6E40CA8F
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_get_client_CA_list
		mov	edx, [ebx+0E4h]
		mov	edx, [edx+0FCh]
		mov	[esp+3Ch+var_20], 0
		mov	[esp+3Ch+var_24], 0
		mov	[esp+3Ch+var_28], 0
		lea	ecx, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_2C], ecx
		lea	ecx, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_30], ecx
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], edx
		call	ENGINE_load_ssl_client_cert
		mov	esi, eax
		test	eax, eax
		jnz	short loc_6E40CAB1
		mov	eax, [ebx+0E4h]

loc_6E40CA8F:				; CODE XREF: sub_6E40C970+C5j
		mov	eax, [eax+74h]
		test	eax, eax
		jz	loc_6E40CBB0
		lea	edx, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_34], edx
		lea	edx, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		mov	esi, eax

loc_6E40CAB1:				; CODE XREF: sub_6E40C970+117j
		test	esi, esi
		js	loc_6E40CC3E
		mov	dword ptr [ebx+18h], 1
		cmp	esi, 1
		jz	loc_6E40CB80

loc_6E40CAC9:				; CODE XREF: sub_6E40C970+239j
					; sub_6E40C970+249j ...
		mov	eax, [esp+3Ch+var_14]
		test	eax, eax
		jz	short loc_6E40CAD9
		mov	[esp+3Ch+var_3C], eax
		call	X509_free

loc_6E40CAD9:				; CODE XREF: sub_6E40C970+15Fj
		mov	eax, [esp+3Ch+var_10]
		test	eax, eax
		jz	short loc_6E40CAE9
		mov	[esp+3Ch+var_3C], eax
		call	EVP_PKEY_free

loc_6E40CAE9:				; CODE XREF: sub_6E40C970+16Fj
		test	esi, esi
		jnz	loc_6E40C9D9
		cmp	dword ptr [ebx], 300h
		mov	eax, [ebx+58h]
		jz	loc_6E40CC12
		mov	dword ptr [eax+358h], 2
		jmp	loc_6E40C9DC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CB10:				; CODE XREF: sub_6E40C970+7Aj
		xor	eax, eax
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4160B0
		test	eax, eax
		jnz	loc_6E40CA0E

loc_6E40CB26:				; CODE XREF: sub_6E40C970+98j
		mov	[esp+3Ch+var_2C], 0CDEh
		mov	[esp+3Ch+var_30], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+3Ch+var_34], 44h
		mov	[esp+3Ch+var_38], 97h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	[esp+3Ch+var_34], 50h
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4151B0
		mov	dword ptr [ebx+34h], 5
		xor	eax, eax
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CB80:				; CODE XREF: sub_6E40C970+153j
		mov	eax, [esp+3Ch+var_10]
		test	eax, eax
		jz	short loc_6E40CBBE
		mov	eax, [esp+3Ch+var_14]
		test	eax, eax
		jz	short loc_6E40CBBE
		mov	dword ptr [ebx+34h], 1171h
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_use_certificate
		test	eax, eax
		jnz	short loc_6E40CBF1
		xor	esi, esi
		jmp	loc_6E40CAC9
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CBB0:				; CODE XREF: sub_6E40C970+124j
		mov	dword ptr [ebx+18h], 1
		xor	esi, esi
		jmp	loc_6E40CAC9
; ---------------------------------------------------------------------------

loc_6E40CBBE:				; CODE XREF: sub_6E40C970+216j
					; sub_6E40C970+21Ej
		mov	[esp+3Ch+var_2C], 0CC3h
		mov	[esp+3Ch+var_30], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+3Ch+var_34], 6Ah
		mov	[esp+3Ch+var_38], 97h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E40CAC9
; ---------------------------------------------------------------------------

loc_6E40CBF1:				; CODE XREF: sub_6E40C970+235j
		mov	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_use_PrivateKey
		test	eax, eax
		setnz	al
		and	eax, 0FFh
		mov	esi, eax
		jmp	loc_6E40CAC9
; ---------------------------------------------------------------------------

loc_6E40CC12:				; CODE XREF: sub_6E40C970+18Aj
		mov	dword ptr [eax+358h], 0
		mov	[esp+3Ch+var_34], 29h
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4151B0
		mov	eax, 1
		jmp	loc_6E40C9B5
; ---------------------------------------------------------------------------

loc_6E40CC3E:				; CODE XREF: sub_6E40C970+143j
		mov	dword ptr [ebx+18h], 4
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E40C9B5
sub_6E40C970	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40CC50	proc near		; CODE XREF: sub_6E40D250+22Ep
					; sub_6E426500+3ADp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		mov	edi, [eax+0Ch]
		mov	esi, [eax+10h]
		test	esi, 2Ch
		jnz	loc_6E40CD90
		test	edi, 100h
		jnz	loc_6E40CD90
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E40D0C0
		mov	ecx, [eax+6Ch]
		mov	[esp+4Ch+var_24], ecx
		mov	ecx, [eax+70h]
		mov	[esp+4Ch+var_28], ecx
		mov	edx, [eax+4]
		cmp	edx, 5
		jz	loc_6E40CD70
		lea	ecx, [edx+edx]
		add	edx, ecx
		lea	ecx, [eax+edx*4]
		mov	eax, [ecx+0Ch]
		mov	[esp+4Ch+var_2C], ecx
		mov	[esp+4Ch+var_4C], eax
		call	X509_get_pubkey
		mov	ebp, eax
		mov	[esp+4Ch+var_4C], eax
		call	EVP_PKEY_bits
		mov	[esp+4Ch+var_20], eax
		mov	ecx, [esp+4Ch+var_2C]
		mov	eax, [ecx+0Ch]
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], eax
		call	X509_certificate_type
		mov	[esp+4Ch+var_2C], eax
		mov	[esp+4Ch+var_4C], ebp
		call	EVP_PKEY_free
		test	esi, 1
		mov	eax, [esp+4Ch+var_2C]
		jz	loc_6E40CDA0
		mov	edx, eax
		and	edx, 11h
		cmp	edx, 11h
		jz	loc_6E40CDA0
		mov	[esp+4Ch+var_3C], 0D24h
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 0AAh
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 28h

loc_6E40CD43:				; CODE XREF: sub_6E40CC50+190j
					; sub_6E40CC50+1F7j ...
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 2
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E4151B0
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E40CD70
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CD70:				; CODE XREF: sub_6E40CC50+5Aj
					; sub_6E40CC50+111j
		mov	eax, [eax+48h]
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], eax
		call	sub_6E433F90
		test	eax, eax
		jz	loc_6E40CFD0
		mov	esi, esi
		lea	edi, [edi+0]

loc_6E40CD90:				; CODE XREF: sub_6E40CC50+20j
					; sub_6E40CC50+2Cj ...
		mov	eax, 1

loc_6E40CD95:				; CODE XREF: sub_6E40CC50+49Ej
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CDA0:				; CODE XREF: sub_6E40CC50+AEj
					; sub_6E40CC50+BCj
		and	esi, 2
		jz	short loc_6E40CDF0
		mov	edx, eax
		and	edx, 12h
		cmp	edx, 12h
		jz	short loc_6E40CDF0
		mov	[esp+4Ch+var_3C], 0D2Ah
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 0A5h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 28h
		jmp	loc_6E40CD43
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CDF0:				; CODE XREF: sub_6E40CC50+153j
					; sub_6E40CC50+15Dj
		mov	ecx, edi
		and	ecx, 1
		jz	short loc_6E40CE50
		mov	edx, [ebx+58h]
		mov	edx, [edx+344h]
		mov	edx, [edx+20h]
		test	dl, 2
		jnz	loc_6E40D010
		mov	edx, eax
		and	edx, 21h
		cmp	edx, 21h
		jz	short loc_6E40CE50
		mov	[esp+4Ch+var_3C], 0D33h

loc_6E40CE1E:				; CODE XREF: sub_6E40CC50+3F4j
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 0A9h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 28h
		jmp	loc_6E40CD43
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CE50:				; CODE XREF: sub_6E40CC50+1A5j
					; sub_6E40CC50+1C4j ...
		mov	esi, edi
		and	esi, 8
		jz	short loc_6E40CE63
		mov	edx, [esp+4Ch+var_28]
		test	edx, edx
		jz	loc_6E40D18C

loc_6E40CE63:				; CODE XREF: sub_6E40CC50+205j
		test	edi, 2
		jz	short loc_6E40CEC0
		mov	edx, eax
		and	edx, 104h
		cmp	edx, 104h
		jz	short loc_6E40CEC0
		mov	[esp+4Ch+var_3C], 0D4Eh
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 0A4h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 28h
		jmp	loc_6E40CD43
; ---------------------------------------------------------------------------
		jmp	short loc_6E40CEC0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CEC0:				; CODE XREF: sub_6E40CC50+219j
					; sub_6E40CC50+229j ...
		test	edi, 4
		jz	short loc_6E40CF10
		and	eax, 204h
		cmp	eax, 204h
		jz	short loc_6E40CF10
		mov	[esp+4Ch+var_3C], 0D54h
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 0A2h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 28h
		jmp	loc_6E40CD43
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CF10:				; CODE XREF: sub_6E40CC50+276j
					; sub_6E40CC50+282j
		test	esi, esi
		jnz	loc_6E40D050
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		mov	edx, [eax+20h]
		test	dl, 2
		jz	loc_6E40CD90

loc_6E40CF2D:				; CODE XREF: sub_6E40CC50+431j
		and	edx, 8
		cmp	edx, 1
		sbb	eax, eax
		and	eax, 200h
		add	eax, 200h
		cmp	eax, [esp+4Ch+var_20]
		jge	loc_6E40CD90
		test	ecx, ecx
		jz	loc_6E40D0F3
		mov	eax, [esp+4Ch+var_24]
		test	eax, eax
		jz	loc_6E40D210
		mov	eax, [esp+4Ch+var_24]
		mov	eax, [eax+10h]
		mov	[esp+4Ch+var_4C], eax
		call	BN_num_bits
		mov	edx, [ebx+58h]
		mov	edx, [edx+344h]
		mov	edx, [edx+20h]
		and	edx, 8
		cmp	edx, 1
		sbb	edx, edx
		and	edx, 200h
		add	edx, 200h
		cmp	edx, eax
		jge	loc_6E40CD90
		mov	[esp+4Ch+var_3C], 0D71h
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 0A7h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 3Ch
		jmp	loc_6E40CD43
; ---------------------------------------------------------------------------
		align 10h

loc_6E40CFD0:				; CODE XREF: sub_6E40CC50+131j
		mov	[esp+4Ch+var_3C], 0D15h
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 130h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 28h
		jmp	loc_6E40CD43
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D010:				; CODE XREF: sub_6E40CC50+1B6j
		and	edx, 8
		cmp	edx, 1
		sbb	edx, edx
		and	edx, 200h
		add	edx, 200h
		cmp	edx, [esp+4Ch+var_20]
		jl	loc_6E40CE50
		mov	edx, eax
		and	edx, 21h
		cmp	edx, 21h
		jz	loc_6E40D14A
		mov	[esp+4Ch+var_3C], 0D39h
		jmp	loc_6E40CE1E
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D050:				; CODE XREF: sub_6E40CC50+2C2j
		mov	[esp+4Ch+var_2C], ecx
		mov	eax, [esp+4Ch+var_28]
		mov	eax, [eax+8]
		mov	[esp+4Ch+var_4C], eax
		call	BN_num_bits
		mov	edx, [ebx+58h]
		mov	edx, [edx+344h]
		mov	edx, [edx+20h]
		test	dl, 2
		mov	ecx, [esp+4Ch+var_2C]
		jz	loc_6E40D13A
		cmp	eax, 1FFh
		jg	loc_6E40CF2D

loc_6E40D087:				; CODE XREF: sub_6E40CC50+4EFj
		mov	[esp+4Ch+var_3C], 0D5Eh
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 174h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 28h
		jmp	loc_6E40CD43
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D0C0:				; CODE XREF: sub_6E40CC50+40j
		mov	[esp+4Ch+var_3C], 0D04h
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 44h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40CD95
; ---------------------------------------------------------------------------

loc_6E40D0F3:				; CODE XREF: sub_6E40CC50+2FBj
		test	esi, esi
		jnz	loc_6E40D1CC
		and	edi, 6
		jz	loc_6E40D196
		mov	[esp+4Ch+var_3C], 0D84h

loc_6E40D10C:				; CODE XREF: sub_6E40CC50+5BBj
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 0A6h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 3Ch
		jmp	loc_6E40CD43
; ---------------------------------------------------------------------------

loc_6E40D13A:				; CODE XREF: sub_6E40CC50+426j
		cmp	eax, 3FFh
		jle	loc_6E40D087
		jmp	loc_6E40CD90
; ---------------------------------------------------------------------------

loc_6E40D14A:				; CODE XREF: sub_6E40CC50+3E6j
		mov	esi, [esp+4Ch+var_24]
		test	esi, esi
		jz	loc_6E40CE50
		mov	[esp+4Ch+var_3C], 0D3Fh

loc_6E40D15E:				; CODE XREF: sub_6E40CC50+544j
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 44h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 50h
		jmp	loc_6E40CD43
; ---------------------------------------------------------------------------

loc_6E40D18C:				; CODE XREF: sub_6E40CC50+20Dj
		mov	[esp+4Ch+var_3C], 0D49h
		jmp	short loc_6E40D15E
; ---------------------------------------------------------------------------

loc_6E40D196:				; CODE XREF: sub_6E40CC50+4AEj
		mov	[esp+4Ch+var_3C], 0D8Ah
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 0FAh
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 28h
		jmp	loc_6E40CD43
; ---------------------------------------------------------------------------

loc_6E40D1CC:				; CODE XREF: sub_6E40CC50+4A5j
		mov	eax, [esp+4Ch+var_28]
		mov	eax, [eax+8]
		mov	[esp+4Ch+var_4C], eax
		call	BN_num_bits
		mov	edx, [ebx+58h]
		mov	edx, [edx+344h]
		mov	edx, [edx+20h]
		and	edx, 8
		cmp	edx, 1
		sbb	edx, edx
		and	edx, 200h
		add	edx, 200h
		cmp	edx, eax
		jge	loc_6E40CD90
		mov	[esp+4Ch+var_3C], 0D7Dh
		jmp	loc_6E40D10C
; ---------------------------------------------------------------------------

loc_6E40D210:				; CODE XREF: sub_6E40CC50+307j
		mov	[esp+4Ch+var_3C], 0D6Ah
		mov	[esp+4Ch+var_40], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+4Ch+var_44], 0A7h
		mov	[esp+4Ch+var_48], 82h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 28h
		jmp	loc_6E40CD43
sub_6E40CC50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E40D250	proc near		; DATA XREF: sub_6E40D250:loc_6E40D668o
					; .rdata:6E44B054o ...

Time		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_32		= byte ptr -32h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_0]
		mov	[esp+58h+Time],	0 ; Time
		call	time
		mov	[ebp+var_20], eax
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_54], 4
		lea	eax, [ebp+var_20]
		mov	[esp+58h+Time],	eax
		call	RAND_add
		call	ERR_clear_error
		mov	[esp+58h+Time],	0 ; dwErrCode
		call	ds:SetLastError
		push	edx
		mov	eax, [ebx+0D0h]
		mov	[ebp+var_2C], eax
		test	eax, eax
		jz	loc_6E40DD90

loc_6E40D2B2:				; CODE XREF: sub_6E40D250+B4Fj
		inc	dword ptr [ebx+1Ch]
		mov	[esp+58h+Time],	ebx
		call	SSL_state
		test	ah, 30h
		jz	loc_6E40D3B0
		mov	[esp+58h+Time],	ebx
		call	SSL_state
		test	ah, 40h
		jnz	loc_6E40D3B0

loc_6E40D2D7:				; CODE XREF: sub_6E40D250+168j
		mov	eax, [ebx+188h]
		test	eax, eax
		jz	short loc_6E40D2F1
		mov	dword ptr [ebx+188h], 0
		inc	dword ptr [ebx+18Ch]

loc_6E40D2F1:				; CODE XREF: sub_6E40D250+8Fj
		mov	eax, [ebx+34h]
		mov	edx, ebx
		mov	ebx, eax

loc_6E40D2F8:				; CODE XREF: sub_6E40D250+573j
					; sub_6E40D250+D00j ...
		cmp	ebx, 1181h
		jg	loc_6E40D3C0
		cmp	ebx, 1180h
		jge	loc_6E40DC60
		cmp	ebx, 1131h
		jg	loc_6E40D430
		cmp	ebx, 1130h
		jge	loc_6E40DB20
		cmp	ebx, 1100h
		jz	loc_6E40D9B0
		jle	loc_6E40D5E0
		cmp	ebx, 1110h
		jl	loc_6E40D930
		cmp	ebx, 1111h
		jle	loc_6E40D7D0
		lea	eax, [ebx-1120h]
		cmp	eax, 1
		ja	loc_6E40D930
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E407B10
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	eax, [edx+6Ch]
		test	eax, eax
		jz	loc_6E40DD00
		mov	dword ptr [edx+34h], 11D0h
		mov	eax, [edx+140h]
		test	eax, eax
		jz	loc_6E40D571
		mov	dword ptr [edx+34h], 11E0h
		jmp	loc_6E40D571
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D3B0:				; CODE XREF: sub_6E40D250+70j
					; sub_6E40D250+81j
		mov	[esp+58h+Time],	ebx
		call	SSL_clear
		jmp	loc_6E40D2D7
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D3C0:				; CODE XREF: sub_6E40D250+AEj
		cmp	ebx, 11E1h
		jg	loc_6E40D4A0
		cmp	ebx, 11E0h
		jge	loc_6E40DAC0
		cmp	ebx, 11A1h
		jg	loc_6E40D500
		cmp	ebx, 11A0h
		jge	loc_6E40DA00
		lea	eax, [ebx-1190h]
		cmp	eax, 1
		ja	loc_6E40D930
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E40C3E0
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	dword ptr [edx+34h], 11A0h
		mov	dword ptr [edx+44h], 0
		mov	eax, [edx+58h]
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D430:				; CODE XREF: sub_6E40D250+C6j
		cmp	ebx, 1151h
		jg	loc_6E40D580
		cmp	ebx, 1150h
		jge	loc_6E40DAF0

loc_6E40D448:				; CODE XREF: sub_6E40D250+9FFj
		lea	eax, [ebx-1140h]
		cmp	eax, 1
		ja	loc_6E40D930
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E408AD0
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	dword ptr [edx+34h], 1150h
		mov	dword ptr [edx+44h], 0
		mov	[esp+58h+Time],	edx
		call	sub_6E40CC50
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E40DAA8

loc_6E40D48E:				; CODE XREF: sub_6E40D250+5B3j
					; sub_6E40D250+852j
		mov	eax, [edx+58h]
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D4A0:				; CODE XREF: sub_6E40D250+176j
		cmp	ebx, 1201h
		jg	loc_6E40D6C0
		cmp	ebx, 1200h
		jge	loc_6E40D970
		lea	eax, [ebx-11F0h]
		cmp	eax, 1
		ja	loc_6E40D930
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E40AD70
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	dword ptr [edx+34h], 1140h
		mov	dword ptr [edx+44h], 0
		mov	eax, [edx+58h]
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D500:				; CODE XREF: sub_6E40D250+18Ej
		cmp	ebx, 11B0h
		jl	loc_6E40D930
		cmp	ebx, 11B1h
		jle	loc_6E40D820
		lea	eax, [ebx-11D0h]
		cmp	eax, 1
		ja	loc_6E40D930
		mov	eax, [edx+58h]
		mov	ecx, [eax+180h]
		test	ecx, ecx
		jz	loc_6E40DCC0

loc_6E40D538:				; CODE XREF: sub_6E40D250+A76j
		mov	[esp+58h+var_50], 11D1h
		mov	[esp+58h+var_54], 11D0h
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E415C90
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		cmp	dword ptr [edx+6Ch], 1
		sbb	eax, eax
		and	eax, 0FFFFEE63h
		add	eax, 11A0h
		mov	[edx+34h], eax

loc_6E40D571:				; CODE XREF: sub_6E40D250+141j
					; sub_6E40D250+14Ej ...
		mov	dword ptr [edx+44h], 0
		mov	eax, [edx+58h]
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------

loc_6E40D580:				; CODE XREF: sub_6E40D250+1E6j
		cmp	ebx, 1160h
		jl	loc_6E40D930
		cmp	ebx, 1161h
		jle	loc_6E40D8B0
		lea	eax, [ebx-1170h]
		cmp	eax, 3
		ja	loc_6E40D930
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E40C970
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	dword ptr [edx+34h], 1180h
		mov	dword ptr [edx+44h], 0
		mov	eax, [edx+58h]
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D5E0:				; CODE XREF: sub_6E40D250+E4j
		cmp	ebx, 1000h
		jz	loc_6E40D6F6
		cmp	ebx, 1003h
		jz	loc_6E40D6F6
		mov	eax, ebx
		mov	ebx, edx
		cmp	eax, 3
		jnz	loc_6E40D932
		mov	[esp+58h+Time],	edx
		call	sub_6E4114A0
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jz	short loc_6E40D623
		mov	[esp+58h+Time],	eax
		call	BUF_MEM_free
		mov	dword ptr [ebx+3Ch], 0

loc_6E40D623:				; CODE XREF: sub_6E40D250+3C2j
		mov	eax, [ebx+58h]
		test	byte ptr [eax],	4
		jz	loc_6E40DE00

loc_6E40D62F:				; CODE XREF: sub_6E40D250+BB8j
		mov	dword ptr [ebx+44h], 0
		mov	dword ptr [ebx+190h], 0
		mov	dword ptr [ebx+28h], 0
		mov	[esp+58h+var_54], 1
		mov	[esp+58h+Time],	ebx
		call	sub_6E4350C0
		mov	edx, [ebx+6Ch]
		test	edx, edx
		mov	eax, [ebx+0E4h]
		jnz	loc_6E40DCB0

loc_6E40D668:				; CODE XREF: sub_6E40D250+A63j
		mov	dword ptr [ebx+20h], offset sub_6E40D250
		inc	dword ptr [eax+3Ch]
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	loc_6E40DDB0
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 20h
		mov	[esp+58h+Time],	ebx
		call	eax
		mov	esi, 1

loc_6E40D697:				; CODE XREF: sub_6E40D250+713j
					; sub_6E40D250+866j ...
		dec	dword ptr [ebx+1Ch]

loc_6E40D69A:				; CODE XREF: sub_6E40D250+EBEj
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	short loc_6E40D6B2
		mov	[esp+58h+var_50], esi
		mov	[esp+58h+var_54], 1002h
		mov	[esp+58h+Time],	ebx
		call	eax

loc_6E40D6B2:				; CODE XREF: sub_6E40D250+44Fj
		mov	eax, esi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D6C0:				; CODE XREF: sub_6E40D250+256j
		cmp	ebx, 4000h
		jz	short loc_6E40D6F6
		cmp	ebx, 5000h
		jz	short loc_6E40D6F6
		cmp	ebx, 3004h
		jnz	loc_6E40D930
		mov	dword ptr [edx+190h], 1
		mov	dword ptr [edx+34h], 1000h
		mov	eax, [edx+0E4h]
		inc	dword ptr [eax+38h]

loc_6E40D6F6:				; CODE XREF: sub_6E40D250+396j
					; sub_6E40D250+3A2j ...
		mov	dword ptr [edx+24h], 0
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	short loc_6E40D71F
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 10h
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	eax
		mov	edx, [ebp+var_30]

loc_6E40D71F:				; CODE XREF: sub_6E40D250+4B2j
		mov	eax, [edx]
		and	eax, 0FF00h
		cmp	eax, 300h
		jnz	loc_6E40E014
		mov	dword ptr [edx+4], 1000h
		mov	eax, [edx+3Ch]
		test	eax, eax
		jz	loc_6E40DDC0

loc_6E40D743:				; CODE XREF: sub_6E40D250+BA6j
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E416DB0
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E40E00D
		mov	[esp+58h+var_54], 0
		mov	[esp+58h+Time],	edx
		call	sub_6E435D40
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E40DAA8
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E411760
		mov	edx, [ebp+var_30]
		mov	dword ptr [edx+34h], 1110h
		mov	eax, [edx+0E4h]
		inc	dword ptr [eax+34h]
		mov	dword ptr [edx+44h], 0
		mov	eax, [edx+58h]
		and	dword ptr [eax], 0FFFFFF7Fh
		mov	dword ptr [eax+180h], 0

loc_6E40D7AC:				; CODE XREF: sub_6E40D250+1D6j
					; sub_6E40D250+241j ...
		cmp	dword ptr [eax+354h], 0
		jz	loc_6E40DF2D
		lea	esi, [esi+0]

loc_6E40D7C0:				; CODE XREF: sub_6E40D250+CF5j
		mov	ebx, [edx+34h]
		jmp	loc_6E40D2F8
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D7D0:				; CODE XREF: sub_6E40D250+FCj
		mov	dword ptr [edx+30h], 0
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E407680
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	dword ptr [edx+34h], 1120h
		mov	dword ptr [edx+44h], 0
		mov	eax, [edx+14h]
		mov	ecx, [edx+10h]
		cmp	eax, ecx
		jz	loc_6E40D48E
		mov	[esp+58h+var_54], ecx
		mov	[esp+58h+Time],	eax
		call	BIO_push
		mov	edx, [ebp+var_30]
		mov	[edx+10h], eax
		mov	eax, [edx+58h]
		jmp	short loc_6E40D7AC
; ---------------------------------------------------------------------------

loc_6E40D820:				; CODE XREF: sub_6E40D250+2C2j
		mov	eax, [edx+8]
		mov	eax, [eax+64h]
		mov	ecx, [eax+24h]
		mov	eax, [eax+20h]
		mov	[esp+58h+var_48], ecx
		mov	[esp+58h+var_4C], eax
		mov	[esp+58h+var_50], 11B1h
		mov	[esp+58h+var_54], 11B0h
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E4158D0
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	dword ptr [edx+34h], 1100h
		mov	eax, [edx+58h]
		mov	ecx, [eax]
		mov	esi, ecx
		and	esi, 0FFFFFFFBh
		mov	[eax], esi
		mov	edi, [edx+6Ch]
		test	edi, edi
		jz	loc_6E40DCD0
		mov	dword ptr [eax+350h], 3
		and	ecx, 2
		jz	short loc_6E40D89A
		mov	dword ptr [edx+34h], 3
		or	esi, 4
		mov	[eax], esi
		mov	dword ptr [eax+4], 0

loc_6E40D89A:				; CODE XREF: sub_6E40D250+635j
					; sub_6E40D250+A41j ...
		mov	dword ptr [edx+44h], 0
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D8B0:				; CODE XREF: sub_6E40D250+342j
		mov	eax, [edx+8]
		mov	eax, [eax+30h]
		lea	edi, [ebp+var_1C]
		mov	[esp+58h+var_44], edi
		mov	[esp+58h+var_48], 1Eh
		mov	[esp+58h+var_4C], 0Eh
		mov	[esp+58h+var_50], 1161h
		mov	[esp+58h+var_54], 1160h
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	eax
		mov	edx, [ebp+var_1C]
		test	edx, edx
		mov	edx, [ebp+var_30]
		jz	loc_6E40DD50
		test	eax, eax
		jg	loc_6E40E053
		mov	eax, [edx+58h]
		mov	ecx, [eax+344h]
		test	byte ptr [ecx+0Dh], 4
		jnz	loc_6E40DD67

loc_6E40D90E:				; CODE XREF: sub_6E40D250+B11j
					; sub_6E40D250+B30j
		cmp	dword ptr [eax+358h], 1
		sbb	ecx, ecx
		and	ecx, 10h
		add	ecx, 1170h
		mov	[edx+34h], ecx
		mov	dword ptr [edx+44h], 0
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D930:				; CODE XREF: sub_6E40D250+F0j
					; sub_6E40D250+10Bj ...
		mov	ebx, edx

loc_6E40D932:				; CODE XREF: sub_6E40D250+3AFj
		mov	[esp+58h+var_48], 281h
		mov	[esp+58h+var_4C], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+58h+var_50], 0FFh
		mov	[esp+58h+var_54], 84h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E40D697
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D970:				; CODE XREF: sub_6E40D250+262j
		jz	loc_6E40DE1A

loc_6E40D976:				; CODE XREF: sub_6E40D250+C90j
		mov	[esp+58h+var_54], 16h
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E4157D0
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	dword ptr [edx+34h], 11B0h
		mov	eax, [edx+58h]
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40D9B0:				; CODE XREF: sub_6E40D250+DEj
		mov	dword ptr [edx+18h], 2
		mov	eax, [edx+10h]
		mov	[ebp+var_30], edx
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0Bh
		mov	[esp+58h+Time],	eax
		call	BIO_ctrl
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40E00D
		mov	dword ptr [edx+18h], 1
		mov	eax, [edx+58h]
		mov	ecx, [eax+350h]
		mov	[edx+34h], ecx
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------

loc_6E40DA00:				; CODE XREF: sub_6E40D250+19Aj
		mov	[esp+58h+var_50], 11A1h
		mov	[esp+58h+var_54], 11A0h
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E415FB0
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	ecx, [edx+58h]
		cmp	dword ptr [ecx+41Ch], 1
		sbb	eax, eax
		and	eax, 0FFFFFFB0h
		add	eax, 1200h
		mov	[edx+34h], eax
		mov	dword ptr [edx+44h], 0
		mov	eax, [edx+0C0h]
		mov	esi, [ecx+344h]
		mov	[eax+0B4h], esi
		mov	ecx, [ecx+38Ch]
		test	ecx, ecx
		jz	loc_6E40DEE5
		mov	ecx, [ecx]

loc_6E40DA66:				; CODE XREF: sub_6E40D250+C97j
		mov	[eax+0B0h], ecx
		mov	eax, [edx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+8]
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	short loc_6E40DAA8
		mov	eax, [edx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+10h]
		mov	[esp+58h+var_54], 12h
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jnz	loc_6E40D48E

loc_6E40DAA8:				; CODE XREF: sub_6E40D250+238j
					; sub_6E40D250+51Ej ...
		mov	ebx, edx
		mov	dword ptr [edx+34h], 5
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E40D697
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DAC0:				; CODE XREF: sub_6E40D250+182j
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E40A990
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	dword ptr [edx+34h], 11D0h
		mov	dword ptr [edx+44h], 0
		mov	eax, [edx+58h]
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DAF0:				; CODE XREF: sub_6E40D250+1F2j
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E40A320
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	dword ptr [edx+34h], 1160h
		mov	dword ptr [edx+44h], 0
		mov	eax, [edx+58h]
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DB20:				; CODE XREF: sub_6E40D250+D2j
		mov	[ebp+var_1C], 0
		cmp	dword ptr [edx], 300h
		jle	loc_6E40DC20
		mov	eax, [edx+168h]
		test	eax, eax
		jz	loc_6E40DC20
		mov	eax, [edx+0C0h]
		mov	eax, [eax+0E4h]
		test	eax, eax
		jz	loc_6E40DC20
		mov	eax, [edx+58h]
		or	dword ptr [eax], 80h
		mov	eax, [edx+8]
		mov	eax, [eax+30h]
		mov	ecx, [edx+108h]
		lea	edi, [ebp+var_1C]
		mov	[esp+58h+var_44], edi
		mov	[esp+58h+var_48], ecx
		mov	[esp+58h+var_4C], 0FFFFFFFFh
		mov	[esp+58h+var_50], 1131h
		mov	[esp+58h+var_54], 1130h
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	eax
		mov	edx, [ebp+var_30]
		mov	eax, [edx+58h]
		and	dword ptr [eax], 0FFFFFF7Fh
		mov	edi, [ebp+var_1C]
		test	edi, edi
		jz	loc_6E40E00D
		mov	dword ptr [eax+354h], 1
		cmp	dword ptr [eax+340h], 14h
		jz	loc_6E40DFFA
		mov	esi, [eax+180h]
		test	esi, esi
		jz	short loc_6E40DC23
		mov	ebx, edx
		mov	[esp+58h+var_48], 0DBFh
		mov	[esp+58h+var_4C], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+58h+var_50], 85h
		mov	[esp+58h+var_54], 153h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	[esp+58h+var_50], 0Ah
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E4151B0

loc_6E40DC13:				; CODE XREF: sub_6E40D250+DBFj
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E40D697
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DC20:				; CODE XREF: sub_6E40D250+8DDj
					; sub_6E40D250+8EBj ...
		mov	eax, [edx+58h]

loc_6E40DC23:				; CODE XREF: sub_6E40D250+97Bj
		mov	eax, [eax+344h]
		test	dword ptr [eax+10h], 404h
		jnz	short loc_6E40DC3C
		test	byte ptr [eax+0Dh], 1
		jz	loc_6E40DEEC

loc_6E40DC3C:				; CODE XREF: sub_6E40D250+9E0j
		mov	dword ptr [edx+34h], 1140h
		mov	dword ptr [edx+44h], 0
		mov	ebx, 1140h
		jmp	loc_6E40D448
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DC60:				; CODE XREF: sub_6E40D250+BAj
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E40B060
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		mov	eax, [edx+58h]
		cmp	dword ptr [eax+358h], 1
		jz	loc_6E40DE10
		mov	ecx, 11A0h

loc_6E40DC8B:				; CODE XREF: sub_6E40D250+BC5j
		mov	[edx+34h], ecx
		test	byte ptr [eax],	10h
		jz	loc_6E40D89A
		mov	dword ptr [edx+34h], 11A0h
		mov	dword ptr [edx+44h], 0
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DCB0:				; CODE XREF: sub_6E40D250+412j
		inc	dword ptr [eax+58h]
		jmp	loc_6E40D668
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DCC0:				; CODE XREF: sub_6E40D250+2E2j
		or	dword ptr [eax], 80h
		jmp	loc_6E40D538
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DCD0:				; CODE XREF: sub_6E40D250+622j
		cmp	dword ptr [edx+140h], 1
		sbb	ecx, ecx
		and	ecx, 0FFFFFFF0h
		add	ecx, 11E0h
		mov	[eax+350h], ecx
		mov	dword ptr [edx+44h], 0
		jmp	loc_6E40D7AC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DD00:				; CODE XREF: sub_6E40D250+12Cj
		mov	dword ptr [edx+34h], 1130h
		jmp	loc_6E40D571
; ---------------------------------------------------------------------------

loc_6E40DD0C:				; CODE XREF: sub_6E40D250+CE4j
		mov	eax, [edx+10h]
		mov	[ebp+var_30], edx
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0Bh
		mov	[esp+58h+Time],	eax
		call	BIO_ctrl
		test	eax, eax
		mov	edx, [ebp+var_30]
		jg	loc_6E40DF40
		lea	esi, [esi+0]

loc_6E40DD40:				; CODE XREF: sub_6E40D250+121j
					; sub_6E40D250+1BFj ...
		mov	esi, eax
		mov	ebx, edx
		jmp	loc_6E40D697
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DD50:				; CODE XREF: sub_6E40D250+69Dj
		test	eax, eax
		jle	short loc_6E40DD40
		mov	eax, [edx+58h]
		mov	ecx, [eax+344h]
		test	byte ptr [ecx+0Dh], 4
		jz	loc_6E40D90E

loc_6E40DD67:				; CODE XREF: sub_6E40D250+6B8j
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	SRP_Calc_A_param
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40E113
		mov	eax, [edx+58h]
		jmp	loc_6E40D90E
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DD90:				; CODE XREF: sub_6E40D250+5Cj
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+9Ch]
		mov	[ebp+var_2C], eax
		jmp	loc_6E40D2B2
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DDB0:				; CODE XREF: sub_6E40D250+427j
		mov	esi, 1
		jmp	loc_6E40D697
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DDC0:				; CODE XREF: sub_6E40D250+4EDj
		mov	[ebp+var_30], edx
		call	BUF_MEM_new
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E40DAA8
		mov	[ebp+var_30], edx
		mov	[esp+58h+var_54], 4000h
		mov	[esp+58h+Time],	eax
		call	BUF_MEM_grow
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E40E0F5
		mov	[edx+3Ch], esi
		jmp	loc_6E40D743
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DE00:				; CODE XREF: sub_6E40D250+3D9j
		mov	[esp+58h+Time],	ebx
		call	sub_6E435E90
		jmp	loc_6E40D62F
; ---------------------------------------------------------------------------
		align 10h

loc_6E40DE10:				; CODE XREF: sub_6E40D250+A30j
		mov	ecx, 1190h
		jmp	loc_6E40DC8B
; ---------------------------------------------------------------------------

loc_6E40DE1A:				; CODE XREF: sub_6E40D250:loc_6E40D970j
		mov	al, [edx+178h]
		mov	[ebp+var_31], al
		xor	ecx, ecx
		mov	cl, [ebp+var_31]
		mov	[ebp+var_30], ecx
		mov	edi, ecx
		lea	eax, [ecx+2]
		and	eax, 1Fh
		mov	ecx, 20h
		sub	ecx, eax
		mov	[ebp+var_38], ecx
		mov	eax, [edx+3Ch]
		mov	esi, [eax+4]
		mov	[ebp+var_3C], esi
		mov	al, [ebp+var_31]
		mov	[esi+4], al
		mov	ecx, [edx+174h]
		mov	eax, edi
		lea	edi, [esi+5]
		mov	esi, ecx
		cmp	eax, 4
		jnb	loc_6E40DFD6

loc_6E40DE62:				; CODE XREF: sub_6E40D250+DA5j
		xor	ecx, ecx
		test	al, 2
		jnz	loc_6E40DFA4

loc_6E40DE6C:				; CODE XREF: sub_6E40D250+D5Fj
		test	al, 1
		jnz	loc_6E40DF96

loc_6E40DE74:				; CODE XREF: sub_6E40D250+D4Fj
		mov	edi, [ebp+var_3C]
		mov	esi, [ebp+var_30]
		mov	ecx, [ebp+var_38]
		mov	[edi+esi+5], cl
		lea	eax, [edi+esi+6]
		mov	esi, ecx
		mov	edi, eax
		cmp	ecx, 4
		jnb	loc_6E40DFB4

loc_6E40DE92:				; CODE XREF: sub_6E40D250+D81j
		test	esi, 2
		jnz	loc_6E40DF89

loc_6E40DE9E:				; CODE XREF: sub_6E40D250+D41j
		and	esi, 1
		jnz	loc_6E40DF81

loc_6E40DEA7:				; CODE XREF: sub_6E40D250+D34j
		mov	edi, [ebp+var_3C]
		mov	byte ptr [edi],	43h
		mov	ecx, [ebp+var_30]
		mov	esi, [ebp+var_38]
		add	ecx, esi
		mov	byte ptr [edi+1], 0
		lea	eax, [ecx+2]
		shr	eax, 8
		mov	[edi+2], al
		mov	al, [ebp+var_31]
		lea	eax, [eax+esi+2]
		mov	[edi+3], al
		mov	dword ptr [edx+34h], 1201h
		add	ecx, 6
		mov	[edx+44h], ecx
		mov	dword ptr [edx+48h], 0
		jmp	loc_6E40D976
; ---------------------------------------------------------------------------

loc_6E40DEE5:				; CODE XREF: sub_6E40D250+80Ej
		xor	ecx, ecx
		jmp	loc_6E40DA66
; ---------------------------------------------------------------------------

loc_6E40DEEC:				; CODE XREF: sub_6E40D250+9E6j
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		call	sub_6E4084B0
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E40DD40
		cmp	dword ptr [edx+12Ch], 1
		sbb	eax, eax
		and	al, 50h
		add	eax, 11F0h
		mov	[edx+34h], eax
		mov	dword ptr [edx+44h], 0
		mov	ecx, [edx+58h]
		mov	ecx, [ecx+354h]
		test	ecx, ecx
		jnz	loc_6E40E167

loc_6E40DF2D:				; CODE XREF: sub_6E40D250+563j
		cmp	dword ptr [edx+0E8h], 0
		jnz	loc_6E40DD0C
		lea	esi, [esi+0]

loc_6E40DF40:				; CODE XREF: sub_6E40D250+AE7j
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	loc_6E40D7C0
		mov	esi, [edx+34h]
		cmp	esi, ebx
		jz	loc_6E40D2F8
		mov	[edx+34h], ebx
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 1001h
		mov	[esp+58h+Time],	edx
		mov	[ebp+var_30], edx
		mov	eax, [ebp+var_2C]
		call	eax
		mov	edx, [ebp+var_30]
		mov	[edx+34h], esi
		mov	ebx, esi
		jmp	loc_6E40D2F8
; ---------------------------------------------------------------------------

loc_6E40DF81:				; CODE XREF: sub_6E40D250+C51j
		mov	byte ptr [edi],	0
		jmp	loc_6E40DEA7
; ---------------------------------------------------------------------------

loc_6E40DF89:				; CODE XREF: sub_6E40D250+C48j
		mov	word ptr [edi],	0
		add	edi, 2
		jmp	loc_6E40DE9E
; ---------------------------------------------------------------------------

loc_6E40DF96:				; CODE XREF: sub_6E40D250+C1Ej
		mov	al, [esi+ecx]
		mov	[ebp+var_32], al
		mov	[edi+ecx], al
		jmp	loc_6E40DE74
; ---------------------------------------------------------------------------

loc_6E40DFA4:				; CODE XREF: sub_6E40D250+C16j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	loc_6E40DE6C
; ---------------------------------------------------------------------------

loc_6E40DFB4:				; CODE XREF: sub_6E40D250+C3Cj
		test	al, 1
		jnz	loc_6E40E0BA

loc_6E40DFBC:				; CODE XREF: sub_6E40D250+E74j
		test	edi, 2
		jnz	loc_6E40E0AA

loc_6E40DFC8:				; CODE XREF: sub_6E40D250+E65j
		mov	ecx, esi
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E40DE92
; ---------------------------------------------------------------------------

loc_6E40DFD6:				; CODE XREF: sub_6E40D250+C0Cj
		test	edi, 1
		jnz	loc_6E40E0DD

loc_6E40DFE2:				; CODE XREF: sub_6E40D250+EA0j
		test	edi, 2
		jnz	loc_6E40E0C9

loc_6E40DFEE:				; CODE XREF: sub_6E40D250+E88j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E40DE62
; ---------------------------------------------------------------------------

loc_6E40DFFA:				; CODE XREF: sub_6E40D250+96Dj
		mov	dword ptr [edx+6Ch], 1
		mov	dword ptr [edx+34h], 11D0h
		jmp	loc_6E40D89A
; ---------------------------------------------------------------------------

loc_6E40E00D:				; CODE XREF: sub_6E40D250+503j
					; sub_6E40D250+792j ...
		mov	ebx, edx
		jmp	loc_6E40DC13
; ---------------------------------------------------------------------------

loc_6E40E014:				; CODE XREF: sub_6E40D250+4DBj
		mov	ebx, edx
		mov	[esp+58h+var_48], 0F0h
		mov	[esp+58h+var_4C], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+58h+var_50], 44h
		mov	[esp+58h+var_54], 84h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	dword ptr [ebx+34h], 5
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E40D697
; ---------------------------------------------------------------------------

loc_6E40E053:				; CODE XREF: sub_6E40D250+6A5j
		mov	ebx, edx
		mov	[esp+58h+var_50], 32h
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	edx
		call	sub_6E4151B0
		mov	[esp+58h+var_48], 91Eh
		mov	[esp+58h+var_4C], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+58h+var_50], 9Fh
		mov	[esp+58h+var_54], 91h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	dword ptr [ebx+34h], 5
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E40D697
; ---------------------------------------------------------------------------

loc_6E40E0AA:				; CODE XREF: sub_6E40D250+D72j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	esi, 2
		jmp	loc_6E40DFC8
; ---------------------------------------------------------------------------

loc_6E40E0BA:				; CODE XREF: sub_6E40D250+D66j
		mov	byte ptr [eax],	0
		inc	edi
		mov	eax, [ebp+var_38]
		lea	esi, [eax-1]
		jmp	loc_6E40DFBC
; ---------------------------------------------------------------------------

loc_6E40E0C9:				; CODE XREF: sub_6E40D250+D98j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40DFEE
; ---------------------------------------------------------------------------

loc_6E40E0DD:				; CODE XREF: sub_6E40D250+D8Cj
		mov	al, [ecx]
		mov	[ebp+var_32], al
		mov	edi, [ebp+var_3C]
		mov	[edi+5], al
		add	edi, 6
		inc	esi
		mov	eax, [ebp+var_30]
		dec	eax
		jmp	loc_6E40DFE2
; ---------------------------------------------------------------------------

loc_6E40E0F5:				; CODE XREF: sub_6E40D250+B9Dj
		mov	ebx, edx
		mov	dword ptr [edx+34h], 5
		dec	dword ptr [edx+1Ch]
		mov	[esp+58h+Time],	esi
		call	BUF_MEM_free
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E40D69A
; ---------------------------------------------------------------------------

loc_6E40E113:				; CODE XREF: sub_6E40D250+B27j
		mov	esi, eax
		mov	ebx, edx
		mov	[esp+58h+var_48], 192h
		mov	[esp+58h+var_4C], offset aS3_clnt_c ; "s3_clnt.c"
		mov	[esp+58h+var_50], 169h
		mov	[esp+58h+var_54], 84h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	[esp+58h+var_50], 50h
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E4151B0
		mov	dword ptr [ebx+34h], 5
		jmp	loc_6E40D697
; ---------------------------------------------------------------------------

loc_6E40E167:				; CODE XREF: sub_6E40D250+CD7j
		mov	ebx, eax
		jmp	loc_6E40D2F8
sub_6E40D250	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edx, [esp+30h]
		cmp	dword ptr [edx+34h], 1200h
		jz	short loc_6E40E1A0

loc_6E40E184:				; CODE XREF: .text:6E40E263j
		mov	dword ptr [esp+4], 16h
		mov	[esp], edx
		call	sub_6E4157D0
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E1A0:				; CODE XREF: .text:6E40E182j
		mov	al, [edx+178h]
		mov	[esp+0Eh], al
		mov	esi, eax
		and	eax, 0FFh
		mov	ecx, eax
		mov	[esp+8], eax
		lea	eax, [eax+2]
		and	eax, 1Fh
		mov	ebx, 20h
		sub	ebx, eax
		mov	eax, [edx+3Ch]
		mov	ebp, [eax+4]
		mov	eax, esi
		mov	[ebp+4], al
		mov	eax, ecx
		lea	edi, [ebp+5]
		mov	esi, [edx+174h]
		cmp	ecx, 4
		jnb	loc_6E40E290

loc_6E40E1E3:				; CODE XREF: .text:6E40E2A7j
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E40E1F4
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E40E1F4:				; CODE XREF: .text:6E40E1E7j
		test	al, 1
		jz	short loc_6E40E202
		mov	al, [esi+ecx]
		mov	[esp+0Fh], al
		mov	[edi+ecx], al

loc_6E40E202:				; CODE XREF: .text:6E40E1F6j
		mov	eax, [esp+8]
		mov	[ebp+eax+5], bl
		mov	esi, ebx
		lea	edi, [ebp+eax+6]
		cmp	ebx, 4
		jnb	short loc_6E40E270

loc_6E40E215:				; CODE XREF: .text:6E40E289j
		test	esi, 2
		jz	short loc_6E40E225
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E40E225:				; CODE XREF: .text:6E40E21Bj
		and	esi, 1
		jz	short loc_6E40E22D
		mov	byte ptr [edi],	0

loc_6E40E22D:				; CODE XREF: .text:6E40E228j
		mov	byte ptr [ebp+0], 43h
		mov	ecx, [esp+8]
		add	ecx, ebx
		mov	byte ptr [ebp+1], 0
		lea	eax, [ecx+2]
		shr	eax, 8
		mov	[ebp+2], al
		mov	al, [esp+0Eh]
		lea	eax, [eax+ebx+2]
		mov	[ebp+3], al
		mov	dword ptr [edx+34h], 1201h
		add	ecx, 6
		mov	[edx+44h], ecx
		mov	dword ptr [edx+48h], 0
		jmp	loc_6E40E184
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E270:				; CODE XREF: .text:6E40E213j
		test	edi, 1
		jnz	short loc_6E40E2AC

loc_6E40E278:				; CODE XREF: .text:6E40E2B3j
		test	edi, 2
		jnz	short loc_6E40E2D6

loc_6E40E280:				; CODE XREF: .text:6E40E2E1j
		mov	ecx, esi
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	short loc_6E40E215
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E290:				; CODE XREF: .text:6E40E1DDj
		test	edi, 1
		jnz	short loc_6E40E2C6

loc_6E40E298:				; CODE XREF: .text:6E40E2D4j
		test	edi, 2
		jnz	short loc_6E40E2B5

loc_6E40E2A0:				; CODE XREF: .text:6E40E2C4j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E40E1E3
; ---------------------------------------------------------------------------

loc_6E40E2AC:				; CODE XREF: .text:6E40E276j
		mov	byte ptr [edi],	0
		inc	edi
		lea	esi, [ebx-1]
		jmp	short loc_6E40E278
; ---------------------------------------------------------------------------

loc_6E40E2B5:				; CODE XREF: .text:6E40E29Ej
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E40E2A0
; ---------------------------------------------------------------------------

loc_6E40E2C6:				; CODE XREF: .text:6E40E296j
		mov	al, [esi]
		mov	[ebp+5], al
		lea	edi, [ebp+6]
		inc	esi
		mov	eax, [esp+8]
		dec	eax
		jmp	short loc_6E40E298
; ---------------------------------------------------------------------------

loc_6E40E2D6:				; CODE XREF: .text:6E40E27Ej
		mov	word ptr [edi],	0
		add	edi, 2
		sub	esi, 2
		jmp	short loc_6E40E280
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40E2F0	proc near		; CODE XREF: sub_6E426290+DAp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	edi, [esp+2Ch+arg_8]
		mov	eax, [ebx+0E4h]
		mov	edx, [eax+0FCh]
		test	edx, edx
		jz	short loc_6E40E360
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_get_client_CA_list
		mov	edx, [ebx+0E4h]
		mov	edx, [edx+0FCh]
		mov	[esp+2Ch+var_10], 0
		mov	[esp+2Ch+var_14], 0
		mov	[esp+2Ch+var_18], 0
		mov	[esp+2Ch+var_1C], edi
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], edx
		call	ENGINE_load_ssl_client_cert
		test	eax, eax
		jnz	short loc_6E40E382
		mov	eax, [ebx+0E4h]

loc_6E40E360:				; CODE XREF: sub_6E40E2F0+20j
		mov	eax, [eax+74h]
		test	eax, eax
		jz	short loc_6E40E380
		mov	[esp+2Ch+arg_8], edi
		mov	[esp+2Ch+arg_4], esi
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E380:				; CODE XREF: sub_6E40E2F0+75j
		xor	eax, eax

loc_6E40E382:				; CODE XREF: sub_6E40E2F0+68j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_6E40E2F0	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6E40E390:				; DATA XREF: sub_6E40EFD0:loc_6E40F260o
		mov	eax, [esp+4]
		mov	eax, [eax+1C8h]
		mov	[esp+4], eax
		jmp	BUF_strdup
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40E3B0	proc near		; DATA XREF: .rdata:6E44B0A0o
					; .rdata:6E44B160o ...
		mov	eax, 1C20h
		retn
sub_6E40E3B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40E3C0	proc near		; CODE XREF: sub_6E41A4A0j
					; sub_6E41A4B0+8p
					; DATA XREF: ...
		mov	eax, 7Dh
		retn
sub_6E40E3C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40E3D0	proc near		; CODE XREF: sub_6E41A4B0+19j
					; sub_6E427950+Ap
					; DATA XREF: ...

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 7Ch
		ja	short loc_6E40E3F0
		mov	eax, 7Ch
		sub	eax, [esp+arg_0]
		lea	edx, [eax+eax]
		add	eax, edx
		shl	eax, 4
		add	eax, offset dword_6E448040
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E3F0:				; CODE XREF: sub_6E40E3D0+5j
		xor	eax, eax
		retn
sub_6E40E3D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40E400	proc near		; DATA XREF: .rdata:6E44B090o
					; .rdata:6E44B150o ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	dword ptr [eax+38h], 0F1h
		jz	short loc_6E40E419
		mov	eax, [eax+58h]
		cmp	dword ptr [eax+10Ch], 17h
		jz	short loc_6E40E420

loc_6E40E419:				; CODE XREF: sub_6E40E400+Bj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E420:				; CODE XREF: sub_6E40E400+17j
		mov	eax, [eax+110h]
		retn
sub_6E40E400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40E430	proc near		; CODE XREF: sub_6E41AE40+Bp
					; sub_6E427530+Dp
					; DATA XREF: ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], 0BB1h
		mov	[esp+1Ch+var_18], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+1Ch+var_1C], 424h
		call	CRYPTO_malloc
		mov	edx, eax
		test	eax, eax
		jz	loc_6E40E500
		mov	edi, eax
		mov	esi, 424h
		test	al, 1
		jnz	loc_6E40E520

loc_6E40E46F:				; CODE XREF: sub_6E40E430+FAj
		test	edi, 2
		jnz	loc_6E40E510

loc_6E40E47B:				; CODE XREF: sub_6E40E430+EBj
		mov	ecx, esi
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	esi, 2
		jnz	short loc_6E40E4F0
		and	esi, 1
		jnz	short loc_6E40E4E0

loc_6E40E491:				; CODE XREF: sub_6E40E430+B3j
					; sub_6E40E430+CBj
		mov	dword ptr [edx+128h], 0
		mov	dword ptr [edx+12Ch], 0
		mov	dword ptr [edx+14Ch], 0
		mov	dword ptr [edx+150h], 0
		mov	[ebx+58h], edx
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_SRP_CTX_init
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	[esp+1Ch+var_1C], ebx
		call	eax
		mov	eax, 1
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E4E0:				; CODE XREF: sub_6E40E430+5Fj
					; sub_6E40E430+CDj
		mov	byte ptr [edi],	0
		jmp	short loc_6E40E491
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E4F0:				; CODE XREF: sub_6E40E430+5Aj
		mov	word ptr [edi],	0
		add	edi, 2
		and	esi, 1
		jz	short loc_6E40E491
		jmp	short loc_6E40E4E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E500:				; CODE XREF: sub_6E40E430+2Aj
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E510:				; CODE XREF: sub_6E40E430+45j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	esi, 2
		jmp	loc_6E40E47B
; ---------------------------------------------------------------------------

loc_6E40E520:				; CODE XREF: sub_6E40E430+39j
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	si, 423h
		jmp	loc_6E40E46F
sub_6E40E430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40E530	proc near		; CODE XREF: sub_6E41AE70+22j
					; sub_6E427710+Bp
					; DATA XREF: ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	loc_6E40E630
		mov	eax, [ebx+58h]
		test	eax, eax
		jz	loc_6E40E630
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E4114A0
		mov	eax, [ebx+58h]
		mov	ecx, [eax+0ECh]
		test	ecx, ecx
		jz	short loc_6E40E56B
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E417070
		mov	eax, [ebx+58h]

loc_6E40E56B:				; CODE XREF: sub_6E40E530+2Ej
		mov	edx, [eax+0FCh]
		test	edx, edx
		jz	short loc_6E40E580
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E416F70
		mov	eax, [ebx+58h]

loc_6E40E580:				; CODE XREF: sub_6E40E530+43j
		mov	edx, [eax+120h]
		test	edx, edx
		jz	short loc_6E40E595
		mov	[esp+1Ch+var_1C], edx
		call	CRYPTO_free
		mov	eax, [ebx+58h]

loc_6E40E595:				; CODE XREF: sub_6E40E530+58j
		mov	edx, [eax+348h]
		test	edx, edx
		jz	short loc_6E40E5AA
		mov	[esp+1Ch+var_1C], edx
		call	DH_free
		mov	eax, [ebx+58h]

loc_6E40E5AA:				; CODE XREF: sub_6E40E530+6Dj
		mov	edx, [eax+34Ch]
		test	edx, edx
		jz	short loc_6E40E5BF
		mov	[esp+1Ch+var_1C], edx
		call	EC_KEY_free
		mov	eax, [ebx+58h]

loc_6E40E5BF:				; CODE XREF: sub_6E40E530+82j
		mov	edx, [eax+36Ch]
		test	edx, edx
		jz	short loc_6E40E5DC
		mov	[esp+1Ch+var_18], offset X509_NAME_free
		mov	[esp+1Ch+var_1C], edx
		call	sk_pop_free
		mov	eax, [ebx+58h]

loc_6E40E5DC:				; CODE XREF: sub_6E40E530+97j
		mov	edx, [eax+178h]
		test	edx, edx
		jz	short loc_6E40E5F1
		mov	[esp+1Ch+var_1C], edx
		call	BIO_free
		mov	eax, [ebx+58h]

loc_6E40E5F1:				; CODE XREF: sub_6E40E530+B4j
		mov	eax, [eax+17Ch]
		test	eax, eax
		jz	short loc_6E40E603
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E411810

loc_6E40E603:				; CODE XREF: sub_6E40E530+C9j
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_SRP_CTX_free
		mov	eax, [ebx+58h]
		mov	[esp+1Ch+var_18], 424h
		mov	[esp+1Ch+var_1C], eax
		call	OPENSSL_cleanse
		mov	eax, [ebx+58h]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+58h], 0

loc_6E40E630:				; CODE XREF: sub_6E40E530+Aj
					; sub_6E40E530+15j
		add	esp, 18h
		pop	ebx
		retn
sub_6E40E530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40E640	proc near		; CODE XREF: sub_6E41AEA0+Bp
					; sub_6E4277A0+104p
					; DATA XREF: ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4114A0
		mov	eax, [ebx+58h]
		mov	edx, [eax+36Ch]
		test	edx, edx
		jz	short loc_6E40E673
		mov	[esp+3Ch+var_38], offset X509_NAME_free
		mov	[esp+3Ch+var_3C], edx
		call	sk_pop_free
		mov	eax, [ebx+58h]

loc_6E40E673:				; CODE XREF: sub_6E40E640+1Ej
		mov	edx, [eax+120h]
		test	edx, edx
		jz	short loc_6E40E692
		mov	[esp+3Ch+var_3C], edx
		call	CRYPTO_free
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+120h], 0

loc_6E40E692:				; CODE XREF: sub_6E40E640+3Bj
		mov	edx, [eax+348h]
		test	edx, edx
		jz	short loc_6E40E6B1
		mov	[esp+3Ch+var_3C], edx
		call	DH_free
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+348h], 0

loc_6E40E6B1:				; CODE XREF: sub_6E40E640+5Aj
		mov	edx, [eax+34Ch]
		test	edx, edx
		jz	short loc_6E40E6D0
		mov	[esp+3Ch+var_3C], edx
		call	EC_KEY_free
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+34Ch], 0

loc_6E40E6D0:				; CODE XREF: sub_6E40E640+79j
		mov	byte ptr [eax+420h], 0
		mov	edi, [ebx+58h]
		mov	esi, [edi+0ECh]
		mov	ebp, [edi+0FCh]
		mov	eax, [edi+0F0h]
		mov	[esp+3Ch+var_28], eax
		mov	eax, [edi+100h]
		mov	[esp+3Ch+var_24], eax
		mov	eax, [edi+0E8h]
		mov	[esp+3Ch+var_20], eax
		mov	eax, [edi+178h]
		test	eax, eax
		jz	short loc_6E40E723
		mov	[esp+3Ch+var_3C], eax
		call	BIO_free
		mov	edi, [ebx+58h]
		mov	dword ptr [edi+178h], 0

loc_6E40E723:				; CODE XREF: sub_6E40E640+CCj
		mov	eax, [edi+17Ch]
		test	eax, eax
		jz	short loc_6E40E738
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E411810
		mov	edi, [ebx+58h]

loc_6E40E738:				; CODE XREF: sub_6E40E640+EBj
		mov	edx, 424h
		test	edi, 1
		jnz	loc_6E40E810
		test	edi, 2
		jnz	loc_6E40E830

loc_6E40E755:				; CODE XREF: sub_6E40E640+1DCj
					; sub_6E40E640+1FBj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jz	short loc_6E40E76B
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E40E76B:				; CODE XREF: sub_6E40E640+121j
		and	edx, 1
		jz	short loc_6E40E773
		mov	byte ptr [edi],	0

loc_6E40E773:				; CODE XREF: sub_6E40E640+12Ej
		mov	eax, [ebx+58h]
		mov	[eax+0ECh], esi
		mov	[eax+0FCh], ebp
		mov	esi, [esp+3Ch+var_28]
		mov	[eax+0F0h], esi
		mov	esi, [esp+3Ch+var_24]
		mov	[eax+100h], esi
		mov	ecx, [esp+3Ch+var_20]
		mov	[eax+0E8h], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E435E90
		mov	dword ptr [ebx+50h], 0
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+194h], 0
		mov	dword ptr [eax+198h], 0
		mov	dword ptr [eax+19Ch], 0
		mov	dword ptr [eax+1A0h], 0
		mov	dword ptr [ebx], 300h
		mov	eax, [ebx+174h]
		test	eax, eax
		jz	short loc_6E40E803
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+174h], 0
		mov	byte ptr [ebx+178h], 0

loc_6E40E803:				; CODE XREF: sub_6E40E640+1A8j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E810:				; CODE XREF: sub_6E40E640+103j
		mov	byte ptr [edi],	0
		inc	edi
		mov	dl, 23h
		test	edi, 2
		jz	loc_6E40E755
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E40E830:				; CODE XREF: sub_6E40E640+10Fj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E40E755
sub_6E40E640	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6E40E840(int,	int, int, char *)
sub_6E40E840	proc near		; CODE XREF: sub_6E4281F0+4Aj
					; DATA XREF: .rdata:6E44B080o ...

Str		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

; FUNCTION CHUNK AT 6E41EF00 SIZE 0000012A BYTES
; FUNCTION CHUNK AT 6E41F030 SIZE 00000033 BYTES
; FUNCTION CHUNK AT 6E41F070 SIZE 0000000A BYTES
; FUNCTION CHUNK AT 6E41F080 SIZE 00000036 BYTES
; FUNCTION CHUNK AT 6E41F0C0 SIZE 00000036 BYTES
; FUNCTION CHUNK AT 6E41F100 SIZE 00000036 BYTES

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		mov	ebp, [esp+3Ch+arg_8]
		mov	edi, [esp+3Ch+arg_C]
		lea	eax, [ebx-2]
		cmp	eax, 1
		jbe	short loc_6E40E880
		lea	eax, [ebx-5]
		cmp	eax, 1
		jbe	short loc_6E40E880

loc_6E40E867:				; CODE XREF: sub_6E40E840+50j
		cmp	ebx, 77h	; switch 120 cases
		ja	short loc_6E40E8D0 ; jumptable 6E40E86C	default	case
		jmp	ds:off_6E44B22C[ebx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E880:				; CODE XREF: sub_6E40E840+1Dj
					; sub_6E40E840+25j
		lea	eax, [esi+98h]
		mov	[esp+3Ch+Str], eax
		call	sub_6E436E40
		test	eax, eax
		jnz	short loc_6E40E867
		mov	[esp+3Ch+var_2C], 0C50h
		mov	[esp+3Ch+var_30], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0D5h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax

loc_6E40E8C0:				; CODE XREF: sub_6E40E840+92j
					; sub_6E40E840+EBj ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E8D0:				; CODE XREF: sub_6E40E840+2Aj
					; sub_6E40E840+2Cj ...
		xor	eax, eax	; jumptable 6E40E86C default case
		jmp	short loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E8E0:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	[esp+3Ch+Str], esi ; jumptable 6E40E86C	case 85
		call	SSL_version
		cmp	eax, 0FEFFh
		jz	loc_6E40ED10
		mov	[esp+3Ch+Str], esi
		call	SSL_version
		cmp	eax, 100h
		jz	loc_6E40ED10
		mov	[esp+3Ch+arg_0], esi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	loc_6E41EF00
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E920:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	[esi+128h], ebp	; jumptable 6E40E86C case 65
		mov	eax, 1
		jmp	short loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E930:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		test	edi, edi	; jumptable 6E40E86C case 2
		jz	loc_6E40EE29
		mov	[esp+3Ch+Str], edi
		call	RSAPrivateKey_dup
		test	eax, eax
		jz	loc_6E40EE86
		mov	edx, [esi+98h]
		mov	ecx, [edx+18h]
		test	ecx, ecx
		jz	short loc_6E40E96B
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+Str], ecx
		call	RSA_free
		mov	edx, [esi+98h]
		mov	eax, [esp+3Ch+var_20]

loc_6E40E96B:				; CODE XREF: sub_6E40E840+113j
		mov	[edx+18h], eax

loc_6E40E96E:				; CODE XREF: sub_6E40E840+15Ej
					; sub_6E40E840+396j ...
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E980:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+98h]	; jumptable 6E40E86C case 1
		test	eax, eax
		jz	loc_6E40E8D0	; jumptable 6E40E86C default case
		mov	edx, [eax+18h]
		test	edx, edx
		jnz	loc_6E40E8D0	; jumptable 6E40E86C default case
		mov	eax, [eax+34h]
		test	eax, eax
		jz	short loc_6E40E96E
		mov	[esp+3Ch+Str], eax
		call	EVP_PKEY_size
		cmp	eax, 40h
		setnle	al
		and	eax, 0FFh
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40E9C0:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	[esp+3Ch+var_2C], 0C9Dh	; jumptable 6E40E86C case 6

loc_6E40E9C8:				; CODE XREF: sub_6E40E840+1C8j
					; sub_6E40E840+308j
		mov	[esp+3Ch+var_30], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+3Ch+var_34], 42h
		mov	[esp+3Ch+var_38], 0D5h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EA00:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	[esp+3Ch+var_2C], 0C84h	; jumptable 6E40E86C case 5
		jmp	short loc_6E40E9C8
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EA10:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		test	ebp, ebp	; jumptable 6E40E86C case 87
		jz	loc_6E40ED20
		or	dword ptr [esi+184h], 4
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EA30:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+188h]	; jumptable 6E40E86C case 86
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EA40:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		test	edi, edi	; jumptable 6E40E86C case 4
		jz	loc_6E40EDEC
		mov	[esp+3Ch+Str], edi
		call	EC_KEY_up_ref
		test	eax, eax
		jz	loc_6E40EDE2
		test	byte ptr [esi+102h], 8
		jz	loc_6E40ED64

loc_6E40EA65:				; CODE XREF: sub_6E40E840+52Ej
		mov	eax, [esi+98h]
		mov	edx, [eax+28h]
		test	edx, edx
		jz	short loc_6E40EA80
		mov	[esp+3Ch+Str], edx
		call	EC_KEY_free
		mov	eax, [esi+98h]

loc_6E40EA80:				; CODE XREF: sub_6E40E840+230j
		mov	[eax+28h], edi
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EA90:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	[esi+130h], edi	; jumptable 6E40E86C case 69
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EAA0:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+130h]	; jumptable 6E40E86C case 68
		mov	[edi], eax
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EAC0:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	[esi+134h], edi	; jumptable 6E40E86C case 67
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EAD0:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+134h]	; jumptable 6E40E86C case 66
		mov	[edi], eax
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EAF0:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+138h]	; jumptable 6E40E86C case 71
		test	eax, eax
		jz	short loc_6E40EB02
		mov	[esp+3Ch+Str], eax
		call	CRYPTO_free

loc_6E40EB02:				; CODE XREF: sub_6E40E840+2B8j
		mov	[esi+138h], edi
		mov	[esi+13Ch], ebp
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EB20:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+138h]	; jumptable 6E40E86C case 70
		mov	[edi], eax
		mov	eax, [esi+13Ch]
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EB40:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	[esp+3Ch+var_2C], 0CBFh	; jumptable 6E40E86C case 7
		jmp	loc_6E40E9C8
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EB50:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		test	edi, edi	; jumptable 6E40E86C case 3
		jz	loc_6E40EE1F
		mov	[esp+3Ch+Str], edi
		call	DHparams_dup
		test	eax, eax
		jz	loc_6E40EE53
		mov	edx, [esi+98h]
		mov	ecx, [edx+20h]
		test	ecx, ecx
		jz	short loc_6E40EB8B
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+Str], ecx
		call	DH_free
		mov	edx, [esi+98h]
		mov	eax, [esp+3Ch+var_20]

loc_6E40EB8B:				; CODE XREF: sub_6E40E840+333j
		mov	[edx+20h], eax
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EBA0:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	[esi+11Ch], edi	; jumptable 6E40E86C case 57
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EBB0:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		test	ebp, ebp	; jumptable 6E40E86C case 55
		jnz	loc_6E40EDAF
		mov	eax, [esi+120h]
		test	eax, eax
		jz	short loc_6E40EBCA
		mov	[esp+3Ch+Str], eax
		call	CRYPTO_free

loc_6E40EBCA:				; CODE XREF: sub_6E40E840+380j
		mov	dword ptr [esi+120h], 0
		test	edi, edi
		jz	loc_6E40E96E
		mov	[esp+3Ch+Str], edi ; Str
		call	strlen
		dec	eax
		cmp	eax, 0FEh
		ja	loc_6E40ED31
		mov	[esp+3Ch+Str], edi
		call	BUF_strdup
		mov	[esi+120h], eax
		test	eax, eax
		jnz	loc_6E40E96E
		mov	[esp+3Ch+var_2C], 0CD6h
		mov	[esp+3Ch+var_30], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+3Ch+var_34], 44h
		mov	[esp+3Ch+var_38], 0D5h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EC40:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+58h]	; jumptable 6E40E86C case 13
		mov	eax, [eax]
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EC50:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+58h]	; jumptable 6E40E86C case 12
		mov	eax, [eax+198h]
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EC60:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	edx, [esi+58h]	; jumptable 6E40E86C case 11
		mov	eax, [edx+19Ch]
		mov	dword ptr [edx+19Ch], 0
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EC80:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+58h]	; jumptable 6E40E86C case 10
		mov	eax, [eax+19Ch]
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EC90:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+6Ch]	; jumptable 6E40E86C case 8
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40ECA0:				; CODE XREF: sub_6E40E840+2Cj
					; DATA XREF: .rdata:off_6E44B22Co
		mov	eax, [esi+0E4h]	; jumptable 6E40E86C case 119
		mov	eax, [eax]
		mov	ebx, [eax]
		cmp	[esi], ebx
		jz	loc_6E40E96E
		call	SSLv23_method
		cmp	ebx, [eax]
		jnz	loc_6E40E8D0	; jumptable 6E40E86C default case
		mov	eax, [esi+100h]
		test	eax, 8000000h
		jz	loc_6E40EE33
		test	eax, 10000000h
		jz	loc_6E40EE43
		test	eax, 4000000h
		jz	loc_6E40EEB9
		test	eax, 2000000h
		jz	loc_6E40EEC9
		test	eax, 1000000h
		jnz	loc_6E40E8D0	; jumptable 6E40E86C default case
		xor	eax, eax
		cmp	dword ptr [esi], 2
		setz	al
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40ED10:				; CODE XREF: sub_6E40E840+ADj
					; sub_6E40E840+C0j
		mov	[esp+3Ch+arg_0], esi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6E42F210
; ---------------------------------------------------------------------------

loc_6E40ED20:				; CODE XREF: sub_6E40E840+1D2j
		and	dword ptr [esi+184h], 0FFFFFFFBh
		mov	eax, 1
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40ED31:				; CODE XREF: sub_6E40E840+3AAj
		mov	[esp+3Ch+var_2C], 0CD2h
		mov	[esp+3Ch+var_30], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+3Ch+var_34], 13Fh
		mov	[esp+3Ch+var_38], 0D5h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40ED64:				; CODE XREF: sub_6E40E840+21Fj
		mov	[esp+3Ch+Str], edi
		call	EC_KEY_generate_key
		test	eax, eax
		jnz	loc_6E40EA65
		mov	[esp+3Ch+Str], edi
		call	EC_KEY_free
		mov	[esp+3Ch+var_2C], 0CB3h

loc_6E40ED84:				; CODE XREF: sub_6E40E840+5AAj
		mov	[esp+3Ch+var_30], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+3Ch+var_34], 2Bh
		mov	[esp+3Ch+var_38], 0D5h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EDAF:				; CODE XREF: sub_6E40E840+372j
		mov	[esp+3Ch+var_2C], 0CDAh
		mov	[esp+3Ch+var_30], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+3Ch+var_34], 140h
		mov	[esp+3Ch+var_38], 0D5h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EDE2:				; CODE XREF: sub_6E40E840+212j
		mov	[esp+3Ch+var_2C], 0CACh
		jmp	short loc_6E40ED84
; ---------------------------------------------------------------------------

loc_6E40EDEC:				; CODE XREF: sub_6E40E840+202j
		mov	[esp+3Ch+var_2C], 0CA8h

loc_6E40EDF4:				; CODE XREF: sub_6E40E840+5E7j
					; sub_6E40E840+5F1j
		mov	[esp+3Ch+var_30], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+3Ch+var_34], 43h
		mov	[esp+3Ch+var_38], 0D5h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EE1F:				; CODE XREF: sub_6E40E840+312j
		mov	[esp+3Ch+var_2C], 0C8Eh
		jmp	short loc_6E40EDF4
; ---------------------------------------------------------------------------

loc_6E40EE29:				; CODE XREF: sub_6E40E840+F2j
		mov	[esp+3Ch+var_2C], 0C75h
		jmp	short loc_6E40EDF4
; ---------------------------------------------------------------------------

loc_6E40EE33:				; CODE XREF: sub_6E40E840+48Aj
		xor	eax, eax
		cmp	dword ptr [esi], 303h
		setz	al
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EE43:				; CODE XREF: sub_6E40E840+495j
		xor	eax, eax
		cmp	dword ptr [esi], 302h
		setz	al
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EE53:				; CODE XREF: sub_6E40E840+322j
		mov	[esp+3Ch+var_2C], 0C92h
		mov	[esp+3Ch+var_30], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+3Ch+var_34], 5
		mov	[esp+3Ch+var_38], 0D5h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EE86:				; CODE XREF: sub_6E40E840+102j
		mov	[esp+3Ch+var_2C], 0C79h
		mov	[esp+3Ch+var_30], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+3Ch+var_34], 4
		mov	[esp+3Ch+var_38], 0D5h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EEB9:				; CODE XREF: sub_6E40E840+4A0j
		xor	eax, eax
		cmp	dword ptr [esi], 301h
		setz	al
		jmp	loc_6E40E8C0
; ---------------------------------------------------------------------------

loc_6E40EEC9:				; CODE XREF: sub_6E40E840+4ABj
		xor	eax, eax
		cmp	dword ptr [esi], 300h
		setz	al
		jmp	loc_6E40E8C0
sub_6E40E840	endp ; sp-analysis failed

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40EEE0	proc near		; DATA XREF: .rdata:6E44B0ACo
					; .rdata:6E44B16Co ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		lea	eax, [ebx-5]
		cmp	eax, 1
		jbe	loc_6E40EF80

loc_6E40EEF4:				; CODE XREF: sub_6E40EEE0+B3j
		cmp	ebx, 6
		jz	short loc_6E40EF60
		jle	short loc_6E40EF20
		cmp	ebx, 7
		jz	short loc_6E40EF40
		cmp	ebx, 38h
		jnz	short loc_6E40EF13
		mov	eax, [esp+2Ch+arg_0]
		mov	ecx, [esp+2Ch+arg_8]
		mov	[eax+118h], ecx

loc_6E40EF13:				; CODE XREF: sub_6E40EEE0+23j
					; sub_6E40EEE0+43j ...
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EF20:				; CODE XREF: sub_6E40EEE0+19j
		cmp	ebx, 5
		jnz	short loc_6E40EF13
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+98h]
		mov	edx, [esp+2Ch+arg_8]
		mov	[eax+1Ch], edx
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EF40:				; CODE XREF: sub_6E40EEE0+1Ej
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+98h]
		mov	edx, [esp+2Ch+arg_8]
		mov	[eax+2Ch], edx
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EF60:				; CODE XREF: sub_6E40EEE0+17j
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+98h]
		mov	ecx, [esp+2Ch+arg_8]
		mov	[eax+24h], ecx
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40EF80:				; CODE XREF: sub_6E40EEE0+Ej
		mov	eax, [esp+2Ch+arg_0]
		add	eax, 98h
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E436E40
		test	eax, eax
		jnz	loc_6E40EEF4
		mov	[esp+2Ch+var_1C], 0D69h
		mov	[esp+2Ch+var_20], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0E9h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	loc_6E40EF13
sub_6E40EEE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6E40EFD0(int,	int, int, char *)
sub_6E40EFD0	proc near		; CODE XREF: SSL_CTX_set_srp_username+22p
					; SSL_CTX_set_srp_password+22p	...

Str		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	esi, [ebx+0B0h]
		cmp	eax, 53h	; switch 84 cases
		ja	short loc_6E40F02B ; jumptable 6E40EFE9	default	case
		jmp	ds:off_6E44B40C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6E40EFF0:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	eax, [ebx+94h]	; jumptable 6E40EFE9 case 83
		test	eax, eax
		jz	short loc_6E40F014
		mov	[esp+2Ch+var_28], offset X509_free
		mov	[esp+2Ch+Str], eax
		call	sk_pop_free
		mov	dword ptr [ebx+94h], 0

loc_6E40F014:				; CODE XREF: sub_6E40EFD0+28j
					; sub_6E40EFD0+181j ...
		mov	eax, 1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6E40F020:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	edi, [esi+18h]	; jumptable 6E40EFE9 case 1
		test	edi, edi
		jz	loc_6E40F455

loc_6E40F02B:				; CODE XREF: sub_6E40EFD0+17j
					; sub_6E40EFD0+19j ...
		xor	eax, eax	; jumptable 6E40EFE9 default case
		jmp	short loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F030:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	eax, [esp+2Ch+arg_C] ; jumptable 6E40EFE9 case 54
		mov	[ebx+104h], eax
		mov	eax, 1
		nop

loc_6E40F040:				; CODE XREF: sub_6E40EFD0+5Dj
					; sub_6E40EFD0+1AFj ...
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F050:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	edx, [esp+2Ch+arg_C] ; jumptable 6E40EFE9 cases	58,59
		test	edx, edx
		jz	loc_6E40F433
		cmp	[esp+2Ch+arg_8], 30h
		jnz	loc_6E40F4AB
		cmp	eax, 3Bh
		jz	loc_6E40F57B
		mov	edi, [esp+2Ch+arg_C]
		lea	esi, [ebx+108h]
		mov	eax, 10h
		test	edi, 1
		jnz	loc_6E40F6E7

loc_6E40F08B:				; CODE XREF: sub_6E40EFD0+731j
		test	edi, 2
		jnz	loc_6E40F6D3

loc_6E40F097:				; CODE XREF: sub_6E40EFD0+712j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E40F0AF
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E40F0AF:				; CODE XREF: sub_6E40EFD0+D2j
		test	al, 1
		jz	short loc_6E40F0BD
		mov	al, [esi+edx]
		mov	byte ptr [esp+2Ch+var_10], al
		mov	[edi+edx], al

loc_6E40F0BD:				; CODE XREF: sub_6E40EFD0+E1j
		mov	eax, [esp+2Ch+arg_C]
		lea	edi, [eax+10h]
		lea	esi, [ebx+118h]
		mov	eax, 10h
		test	edi, 1
		jnz	loc_6E40F71A

loc_6E40F0DB:				; CODE XREF: sub_6E40EFD0+769j
		test	edi, 2
		jnz	loc_6E40F706

loc_6E40F0E7:				; CODE XREF: sub_6E40EFD0+745j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E40F0FF
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E40F0FF:				; CODE XREF: sub_6E40EFD0+122j
		test	al, 1
		jz	short loc_6E40F10D
		mov	al, [esi+edx]
		mov	byte ptr [esp+2Ch+var_10], al
		mov	[edi+edx], al

loc_6E40F10D:				; CODE XREF: sub_6E40EFD0+131j
		mov	eax, [esp+2Ch+arg_C]
		lea	edi, [eax+20h]
		lea	esi, [ebx+128h]
		mov	eax, 10h
		test	edi, 1
		jnz	loc_6E40F6AF

loc_6E40F12B:				; CODE XREF: sub_6E40EFD0+65Dj
					; sub_6E40EFD0+686j ...
		test	edi, 2
		jnz	loc_6E40F69B

loc_6E40F137:				; CODE XREF: sub_6E40EFD0+6DAj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E40F14F
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E40F14F:				; CODE XREF: sub_6E40EFD0+172j
		test	al, 1
		jz	loc_6E40F014
		mov	al, [esi+edx]
		mov	byte ptr [esp+2Ch+var_10], al
		mov	[edi+edx], al
		jmp	loc_6E40F014
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F170:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	eax, [esp+2Ch+arg_C] ; jumptable 6E40EFE9 case 64
		mov	[ebx+140h], eax
		mov	eax, 1
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F190:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		or	dword ptr [ebx+1A0h], 400h ; jumptable 6E40EFE9	case 78
		mov	eax, [esp+2Ch+arg_C]
		mov	[ebx+164h], eax
		mov	eax, 1
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F1B0:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		or	dword ptr [ebx+1A0h], 400h ; jumptable 6E40EFE9	case 79
		mov	eax, [ebx+174h]
		test	eax, eax
		jz	short loc_6E40F1CC
		mov	[esp+2Ch+Str], eax
		call	CRYPTO_free

loc_6E40F1CC:				; CODE XREF: sub_6E40EFD0+1F2j
		mov	dword ptr [ebx+174h], 0
		mov	eax, [esp+2Ch+arg_C]
		test	eax, eax
		jz	loc_6E40F014
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+Str], eax ; Str
		call	strlen
		cmp	eax, 0FFh
		ja	short loc_6E40F202
		mov	eax, [esp+2Ch+arg_C]
		cmp	byte ptr [eax],	0
		jnz	loc_6E40F4DE

loc_6E40F202:				; CODE XREF: sub_6E40EFD0+223j
		mov	[esp+2Ch+var_1C], 0E2Eh
		mov	[esp+2Ch+var_20], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+2Ch+var_24], 165h
		mov	[esp+2Ch+var_28], 85h
		mov	[esp+2Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F240:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	eax, [esp+2Ch+arg_8] ; jumptable 6E40EFE9 case 80
		mov	[ebx+19Ch], eax
		mov	eax, 1
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F260:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	dword ptr [ebx+170h], offset loc_6E40E390 ; jumptable 6E40EFE9 case 81
		mov	eax, [esp+2Ch+arg_C]
		mov	[ebx+198h], eax
		mov	eax, 1
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F280:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	eax, [ebx+94h]	; jumptable 6E40EFE9 case 82
		mov	ecx, [esp+2Ch+arg_C]
		mov	[ecx], eax
		mov	eax, 1
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F2A0:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	[esp+2Ch+var_1C], 0DBDh	; jumptable 6E40EFE9 case 5

loc_6E40F2A8:				; CODE XREF: sub_6E40EFD0+318j
					; sub_6E40EFD0+328j
		mov	[esp+2Ch+var_20], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+2Ch+var_24], 42h
		mov	[esp+2Ch+var_28], 85h
		mov	[esp+2Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F2E0:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	[esp+2Ch+var_1C], 0DD6h	; jumptable 6E40EFE9 case 6
		jmp	short loc_6E40F2A8
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F2F0:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	[esp+2Ch+var_1C], 0DFAh	; jumptable 6E40EFE9 case 7
		jmp	short loc_6E40F2A8
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F300:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	eax, [ebx+94h]	; jumptable 6E40EFE9 case 14
		test	eax, eax
		jz	loc_6E40F43D

loc_6E40F30E:				; CODE XREF: sub_6E40EFD0+47Aj
		mov	ecx, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_28], ecx
		mov	[esp+2Ch+Str], eax
		call	sk_push
		mov	eax, 1
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F330:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	eax, [esp+2Ch+arg_C] ; jumptable 6E40EFE9 case 3
		mov	[esp+2Ch+Str], eax
		call	DHparams_dup
		test	eax, eax
		jz	loc_6E40F668
		mov	edx, [esi+20h]
		test	edx, edx
		jz	short loc_6E40F35B
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+Str], edx
		call	DH_free
		mov	eax, [esp+2Ch+var_10]

loc_6E40F35B:				; CODE XREF: sub_6E40EFD0+379j
		mov	[esi+20h], eax
		mov	eax, 1
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F370:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	ebx, [esp+2Ch+arg_C] ; jumptable 6E40EFE9 case 2
		test	ebx, ebx
		jz	loc_6E40F400
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+Str], eax
		call	RSAPrivateKey_dup
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E40F400
		mov	eax, [esi+18h]
		test	eax, eax
		jz	short loc_6E40F39D
		mov	[esp+2Ch+Str], eax
		call	RSA_free

loc_6E40F39D:				; CODE XREF: sub_6E40EFD0+3C3j
		mov	[esi+18h], ebx
		mov	eax, 1
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F3B0:				; CODE XREF: sub_6E40EFD0+19j
					; DATA XREF: .rdata:off_6E44B40Co
		mov	ecx, [esp+2Ch+arg_C] ; jumptable 6E40EFE9 case 4
		test	ecx, ecx
		jz	loc_6E40F65B
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+Str], eax
		call	EC_KEY_dup
		mov	edi, eax
		test	eax, eax
		jz	loc_6E40F478
		test	byte ptr [ebx+0A6h], 8
		jz	loc_6E40F530

loc_6E40F3DF:				; CODE XREF: sub_6E40EFD0+56Aj
		mov	eax, [esi+28h]
		test	eax, eax
		jz	short loc_6E40F3EE
		mov	[esp+2Ch+Str], eax
		call	EC_KEY_free

loc_6E40F3EE:				; CODE XREF: sub_6E40EFD0+414j
		mov	[esi+28h], edi
		mov	eax, 1
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F400:				; CODE XREF: sub_6E40EFD0+3A6j
					; sub_6E40EFD0+3BCj
		mov	[esp+2Ch+var_1C], 0DB1h
		mov	[esp+2Ch+var_20], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+2Ch+var_24], 4
		mov	[esp+2Ch+var_28], 85h
		mov	[esp+2Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------

loc_6E40F433:				; CODE XREF: sub_6E40EFD0+86j
		mov	eax, 30h
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------

loc_6E40F43D:				; CODE XREF: sub_6E40EFD0+338j
		call	sk_new_null
		mov	[ebx+94h], eax
		test	eax, eax
		jnz	loc_6E40F30E
		jmp	loc_6E40F02B	; jumptable 6E40EFE9 default case
; ---------------------------------------------------------------------------

loc_6E40F455:				; CODE XREF: sub_6E40EFD0+55j
		mov	eax, [esi+34h]
		test	eax, eax
		jz	loc_6E40F014
		mov	[esp+2Ch+Str], eax
		call	EVP_PKEY_size
		cmp	eax, 40h
		setnle	al
		and	eax, 0FFh
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------

loc_6E40F478:				; CODE XREF: sub_6E40EFD0+3FCj
		mov	[esp+2Ch+var_1C], 0DE6h
		mov	[esp+2Ch+var_20], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+2Ch+var_24], 10h
		mov	[esp+2Ch+var_28], 85h
		mov	[esp+2Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------

loc_6E40F4AB:				; CODE XREF: sub_6E40EFD0+91j
		mov	[esp+2Ch+var_1C], 0E0Ah
		mov	[esp+2Ch+var_20], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+2Ch+var_24], 145h
		mov	[esp+2Ch+var_28], 85h
		mov	[esp+2Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------

loc_6E40F4DE:				; CODE XREF: sub_6E40EFD0+22Cj
		mov	[esp+2Ch+Str], eax
		call	BUF_strdup
		mov	[ebx+174h], eax
		test	eax, eax
		jnz	loc_6E40F014
		mov	[esp+2Ch+var_1C], 0E32h
		mov	[esp+2Ch+var_20], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+2Ch+var_24], 44h
		mov	[esp+2Ch+var_28], 85h
		mov	[esp+2Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F530:				; CODE XREF: sub_6E40EFD0+409j
		mov	[esp+2Ch+Str], eax
		call	EC_KEY_generate_key
		test	eax, eax
		jnz	loc_6E40F3DF
		mov	[esp+2Ch+Str], edi
		call	EC_KEY_free
		mov	[esp+2Ch+var_1C], 0DECh

loc_6E40F550:				; CODE XREF: sub_6E40EFD0+693j
		mov	[esp+2Ch+var_20], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+2Ch+var_24], 2Bh
		mov	[esp+2Ch+var_28], 85h
		mov	[esp+2Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------

loc_6E40F57B:				; CODE XREF: sub_6E40EFD0+9Aj
		lea	edi, [ebx+108h]
		mov	esi, [esp+2Ch+arg_C]
		mov	al, 10h
		test	edi, 1
		jnz	loc_6E40F78E

loc_6E40F593:				; CODE XREF: sub_6E40EFD0+7DCj
		test	edi, 2
		jnz	loc_6E40F77A

loc_6E40F59F:				; CODE XREF: sub_6E40EFD0+7B9j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E40F5B7
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E40F5B7:				; CODE XREF: sub_6E40EFD0+5DAj
		test	al, 1
		jz	short loc_6E40F5C5
		mov	al, [esi+edx]
		mov	byte ptr [esp+2Ch+var_10], al
		mov	[edi+edx], al

loc_6E40F5C5:				; CODE XREF: sub_6E40EFD0+5E9j
		lea	edi, [ebx+118h]
		mov	eax, [esp+2Ch+arg_C]
		lea	esi, [eax+10h]
		mov	eax, 10h
		test	edi, 1
		jnz	loc_6E40F752

loc_6E40F5E3:				; CODE XREF: sub_6E40EFD0+7A5j
		test	edi, 2
		jnz	loc_6E40F73E

loc_6E40F5EF:				; CODE XREF: sub_6E40EFD0+77Dj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E40F607
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E40F607:				; CODE XREF: sub_6E40EFD0+62Aj
		test	al, 1
		jz	short loc_6E40F615
		mov	al, [esi+edx]
		mov	byte ptr [esp+2Ch+var_10], al
		mov	[edi+edx], al

loc_6E40F615:				; CODE XREF: sub_6E40EFD0+639j
		lea	edi, [ebx+128h]
		mov	eax, [esp+2Ch+arg_C]
		lea	esi, [eax+20h]
		mov	eax, 10h
		test	edi, 1
		jz	loc_6E40F12B
		mov	eax, [esp+2Ch+arg_C]
		mov	al, [eax+20h]
		mov	byte ptr [esp+2Ch+var_10], al
		mov	[ebx+128h], al
		lea	edi, [ebx+129h]
		mov	eax, [esp+2Ch+arg_C]
		lea	esi, [eax+21h]
		mov	eax, 0Fh
		jmp	loc_6E40F12B
; ---------------------------------------------------------------------------

loc_6E40F65B:				; CODE XREF: sub_6E40EFD0+3E6j
		mov	[esp+2Ch+var_1C], 0DE1h
		jmp	loc_6E40F550
; ---------------------------------------------------------------------------

loc_6E40F668:				; CODE XREF: sub_6E40EFD0+36Ej
		mov	[esp+2Ch+var_1C], 0DC9h
		mov	[esp+2Ch+var_20], offset aS3_lib_c ; "s3_lib.c"
		mov	[esp+2Ch+var_24], 5
		mov	[esp+2Ch+var_28], 85h
		mov	[esp+2Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E40F040
; ---------------------------------------------------------------------------

loc_6E40F69B:				; CODE XREF: sub_6E40EFD0+161j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40F137
; ---------------------------------------------------------------------------

loc_6E40F6AF:				; CODE XREF: sub_6E40EFD0+155j
		mov	edx, [esp+2Ch+arg_C]
		mov	al, [ebx+128h]
		mov	[edx+20h], al
		mov	eax, [esp+2Ch+arg_C]
		lea	edi, [eax+21h]
		lea	esi, [ebx+129h]
		mov	eax, 0Fh
		jmp	loc_6E40F12B
; ---------------------------------------------------------------------------

loc_6E40F6D3:				; CODE XREF: sub_6E40EFD0+C1j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40F097
; ---------------------------------------------------------------------------

loc_6E40F6E7:				; CODE XREF: sub_6E40EFD0+B5j
		mov	al, [ebx+108h]
		mov	[edi], al
		mov	eax, [esp+2Ch+arg_C]
		lea	edi, [eax+1]
		lea	esi, [ebx+109h]
		mov	eax, 0Fh
		jmp	loc_6E40F08B
; ---------------------------------------------------------------------------

loc_6E40F706:				; CODE XREF: sub_6E40EFD0+111j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40F0E7
; ---------------------------------------------------------------------------

loc_6E40F71A:				; CODE XREF: sub_6E40EFD0+105j
		mov	edx, [esp+2Ch+arg_C]
		mov	al, [ebx+118h]
		mov	[edx+10h], al
		mov	eax, [esp+2Ch+arg_C]
		lea	edi, [eax+11h]
		lea	esi, [ebx+119h]
		mov	eax, 0Fh
		jmp	loc_6E40F0DB
; ---------------------------------------------------------------------------

loc_6E40F73E:				; CODE XREF: sub_6E40EFD0+619j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40F5EF
; ---------------------------------------------------------------------------

loc_6E40F752:				; CODE XREF: sub_6E40EFD0+60Dj
		mov	eax, [esp+2Ch+arg_C]
		mov	al, [eax+10h]
		mov	byte ptr [esp+2Ch+var_10], al
		mov	[ebx+118h], al
		lea	edi, [ebx+119h]
		mov	eax, [esp+2Ch+arg_C]
		lea	esi, [eax+11h]
		mov	eax, 0Fh
		jmp	loc_6E40F5E3
; ---------------------------------------------------------------------------

loc_6E40F77A:				; CODE XREF: sub_6E40EFD0+5C9j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E40F59F
; ---------------------------------------------------------------------------

loc_6E40F78E:				; CODE XREF: sub_6E40EFD0+5BDj
		mov	al, [esi]
		mov	byte ptr [esp+2Ch+var_10], al
		mov	[ebx+108h], al
		lea	edi, [ebx+109h]
		mov	eax, [esp+2Ch+arg_C]
		lea	esi, [eax+1]
		mov	eax, 0Fh
		jmp	loc_6E40F593
sub_6E40EFD0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E40F7C0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40F7C0	proc near		; CODE XREF: .text:6E40F7B1j
					; SSL_CTX_set_srp_verify_param_callback+1Ap ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	ecx, [eax+0B0h]
		mov	edx, [esp+arg_4]
		sub	edx, 5		; switch 73 cases
		cmp	edx, 48h
		ja	loc_6E40F8B0	; jumptable 6E40F7DA default case
		jmp	ds:off_6E44B55C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		jmp	short loc_6E40F7F0 ; jumptable 6E40F7DA	case 77
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F7F0:				; CODE XREF: sub_6E40F7C0+1Aj
					; sub_6E40F7C0+21j
					; DATA XREF: ...
		or	dword ptr [eax+1A0h], 400h ; jumptable 6E40F7DA	case 77
		mov	ecx, [esp+arg_8]
		mov	[eax+170h], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F810:				; CODE XREF: sub_6E40F7C0+1Aj
					; DATA XREF: .rdata:off_6E44B55Co
		mov	eax, [esp+arg_8] ; jumptable 6E40F7DA case 5
		mov	[ecx+1Ch], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F820:				; CODE XREF: sub_6E40F7C0+1Aj
					; DATA XREF: .rdata:off_6E44B55Co
		mov	eax, [esp+arg_8] ; jumptable 6E40F7DA case 6
		mov	[ecx+24h], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F830:				; CODE XREF: sub_6E40F7C0+1Aj
					; DATA XREF: .rdata:off_6E44B55Co
		mov	eax, [esp+arg_8] ; jumptable 6E40F7DA case 7
		mov	[ecx+2Ch], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F840:				; CODE XREF: sub_6E40F7C0+1Aj
					; DATA XREF: .rdata:off_6E44B55Co
		mov	ecx, [esp+arg_8] ; jumptable 6E40F7DA case 53
		mov	[eax+100h], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_6E40F850:				; CODE XREF: sub_6E40F7C0+1Aj
					; DATA XREF: .rdata:off_6E44B55Co
		mov	ecx, [esp+arg_8] ; jumptable 6E40F7DA case 63
		mov	[eax+13Ch], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_6E40F860:				; CODE XREF: sub_6E40F7C0+1Aj
					; DATA XREF: .rdata:off_6E44B55Co
		mov	ecx, [esp+arg_8] ; jumptable 6E40F7DA case 72
		mov	[eax+138h], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------

loc_6E40F870:				; CODE XREF: sub_6E40F7C0+1Aj
					; DATA XREF: .rdata:off_6E44B55Co
		or	dword ptr [eax+1A0h], 400h ; jumptable 6E40F7DA	case 75
		mov	ecx, [esp+arg_8]
		mov	[eax+168h], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F890:				; CODE XREF: sub_6E40F7C0+1Aj
					; DATA XREF: .rdata:off_6E44B55Co
		or	dword ptr [eax+1A0h], 400h ; jumptable 6E40F7DA	case 76
		mov	ecx, [esp+arg_8]
		mov	[eax+16Ch], ecx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F8B0:				; CODE XREF: sub_6E40F7C0+14j
					; sub_6E40F7C0+1Aj
					; DATA XREF: ...
		xor	eax, eax	; jumptable 6E40F7DA default case
		retn
sub_6E40F7C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40F8C0	proc near		; CODE XREF: sub_6E41A4E0j
					; DATA XREF: .rdata:6E44B088o ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_3C		= byte ptr -3Ch
var_34		= dword	ptr -34h
arg_0		= dword	ptr  4

		sub	esp, 4Ch
		mov	edx, [esp+4Ch+arg_0]
		xor	eax, eax
		mov	al, [edx+1]
		or	eax, 3000000h
		mov	cl, [edx]
		and	ecx, 0FFh
		mov	edx, ecx
		shl	edx, 8
		or	eax, edx
		mov	[esp+4Ch+var_34], eax
		mov	[esp+4Ch+var_44], 7Dh
		mov	[esp+4Ch+var_48], offset dword_6E448040
		lea	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_4C], eax
		call	sub_6E436760
		test	eax, eax
		jz	short loc_6E40F910
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6E40F910
		add	esp, 4Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F910:				; CODE XREF: sub_6E40F8C0+42j
					; sub_6E40F8C0+48j
		xor	eax, eax
		add	esp, 4Ch
		retn
sub_6E40F8C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40F920	proc near		; CODE XREF: sub_6E4024C0+FEp
					; sub_6E421FC0+12Fp
					; DATA XREF: ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		test	eax, eax
		jz	short loc_6E40F960
		mov	edx, [esp+arg_0]
		mov	edx, [edx+8]
		mov	ecx, edx
		and	ecx, 0FF000000h
		cmp	ecx, 3000000h
		jz	short loc_6E40F950
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40F950:				; CODE XREF: sub_6E40F920+1Dj
		mov	ecx, edx
		sar	ecx, 8
		mov	[eax], cl
		mov	[eax+1], dl
		mov	eax, 2
		retn
; ---------------------------------------------------------------------------

loc_6E40F960:				; CODE XREF: sub_6E40F920+6j
		mov	eax, 2
		retn
sub_6E40F920	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E40F970	proc near		; CODE XREF: sub_6E401670+90Dp
					; sub_6E401670+D38p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_22		= byte ptr -22h
var_21		= byte ptr -21h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [esp+4Ch+arg_0]
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_28], eax
		mov	ebp, [esp+4Ch+arg_8]
		mov	eax, [esi+98h]
		mov	[esp+4Ch+var_38], eax
		test	byte ptr [esi+102h], 40h
		jnz	short loc_6E40F9A4
		mov	eax, ebp
		mov	ebp, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_28], eax

loc_6E40F9A4:				; CODE XREF: sub_6E40F970+28j
		mov	[esp+4Ch+var_22], 0
		mov	[esp+4Ch+var_21], 0
		xor	edi, edi
		mov	[esp+4Ch+var_20], 0
		mov	[esp+4Ch+var_4C], ebp
		call	sk_num
		cmp	edi, eax
		jge	short loc_6E40F9FD
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E40F9D0:				; CODE XREF: sub_6E40F970+8Bj
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], ebp
		call	sk_value
		mov	ebx, eax
		test	byte ptr [eax+1Ch], 4
		jz	short loc_6E40FA17
		mov	eax, [esi]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	short loc_6E40FA10

loc_6E40F9F0:				; CODE XREF: sub_6E40F970+A5j
					; sub_6E40F970+112j ...
		inc	edi

loc_6E40F9F1:				; CODE XREF: sub_6E40F970+3F0j
					; sub_6E40F970+503j
		mov	[esp+4Ch+var_4C], ebp
		call	sk_num
		cmp	edi, eax
		jl	short loc_6E40F9D0

loc_6E40F9FD:				; CODE XREF: sub_6E40F970+52j
		mov	eax, [esp+4Ch+var_20]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FA10:				; CODE XREF: sub_6E40F970+7Ej
		cmp	eax, 302h
		jle	short loc_6E40F9F0

loc_6E40FA17:				; CODE XREF: sub_6E40F970+72j
		mov	[esp+4Ch+var_48], ebx
		mov	eax, [esp+4Ch+var_38]
		mov	[esp+4Ch+var_4C], eax
		call	sub_6E4339A0
		mov	edx, [esp+4Ch+var_38]
		mov	eax, [edx+8]
		mov	ecx, [edx+0Ch]
		mov	[esp+4Ch+var_30], ecx
		mov	ecx, [edx+10h]
		mov	[esp+4Ch+var_34], ecx
		mov	edx, [edx+14h]
		mov	[esp+4Ch+var_2C], edx
		test	byte ptr [esi+1D1h], 4
		jz	short loc_6E40FA67
		or	ah, 4
		or	[esp+4Ch+var_34], 400h
		or	[esp+4Ch+var_30], 400h
		or	[esp+4Ch+var_2C], 400h

loc_6E40FA67:				; CODE XREF: sub_6E40F970+DAj
		mov	edx, [ebx+0Ch]
		mov	[esp+4Ch+var_40], edx
		mov	ecx, [ebx+10h]
		mov	[esp+4Ch+var_3C], ecx
		and	dh, 1
		jz	short loc_6E40FA88
		mov	edx, [esi+0E0h]
		test	edx, edx
		jz	loc_6E40F9F0

loc_6E40FA88:				; CODE XREF: sub_6E40F970+108j
		test	byte ptr [ebx+20h], 2
		jz	loc_6E40FD70
		mov	eax, [esp+4Ch+var_34]
		test	[esp+4Ch+var_40], eax
		jz	loc_6E40FD90
		mov	eax, [esp+4Ch+var_3C]
		test	[esp+4Ch+var_2C], eax
		setnz	al
		and	eax, 0FFh
		mov	[esp+4Ch+var_34], eax

loc_6E40FAB4:				; CODE XREF: sub_6E40F970+41Aj
					; sub_6E40F970+428j
		test	byte ptr [esp+4Ch+var_3C], 50h
		jz	loc_6E40FC30
		mov	edx, [esi+98h]
		mov	ecx, [edx+6Ch]
		test	ecx, ecx
		jz	loc_6E40FC30
		mov	eax, [esi+0C0h]
		cmp	dword ptr [eax+0D4h], 0
		jz	short loc_6E40FB20
		cmp	dword ptr [eax+0D8h], 0
		jz	short loc_6E40FB20
		mov	ecx, [ecx]
		test	ecx, ecx
		jz	short loc_6E40FB20
		mov	ecx, [ecx+18h]
		test	ecx, ecx
		jz	short loc_6E40FB20
		mov	ecx, [ecx+4]
		test	ecx, ecx
		jz	short loc_6E40FB20
		mov	ecx, [ecx+8]
		test	ecx, ecx
		jz	short loc_6E40FB20
		mov	cl, [ecx]
		sub	ecx, 2
		cmp	cl, 1
		jbe	loc_6E40FECE
		jmp	short loc_6E40FB20
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FB20:				; CODE XREF: sub_6E40F970+16Dj
					; sub_6E40F970+176j ...
		mov	ecx, [eax+0DCh]
		test	ecx, ecx
		jz	loc_6E40FC30
		mov	eax, [eax+0E0h]
		test	eax, eax
		jz	loc_6E40FC30
		mov	eax, [edx+70h]
		mov	eax, [eax+14h]
		test	eax, eax
		jz	loc_6E40FDA8
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_6E40FDA8
		mov	[esp+4Ch+var_4C], eax
		call	EC_GROUP_get_curve_name
		test	eax, eax
		jnz	loc_6E40FE80
		mov	edx, [esi+98h]
		mov	edx, [edx+70h]
		mov	edx, [edx+14h]
		mov	edx, [edx+4]
		mov	edx, [edx]
		test	edx, edx
		jz	loc_6E40FE80
		mov	[esp+4Ch+var_4C], edx
		call	EC_METHOD_get_field_type
		cmp	eax, 196h
		jz	loc_6E40FEBF
		mov	eax, [esi+98h]
		mov	eax, [eax+70h]
		mov	eax, [eax+14h]
		mov	eax, [eax+4]
		mov	eax, [eax]
		mov	[esp+4Ch+var_4C], eax
		call	EC_METHOD_get_field_type
		cmp	eax, 197h
		jz	loc_6E40FF4E
		cmp	[esp+4Ch+var_21], 0
		jz	loc_6E40FE8C

loc_6E40FBC0:				; CODE XREF: sub_6E40F970+526j
					; sub_6E40F970+559j
		mov	eax, [esi+0C0h]
		mov	ecx, [eax+0DCh]
		shr	ecx, 1
		jz	loc_6E40FDA8
		mov	edx, [eax+0E0h]
		xor	eax, eax
		mov	[esp+4Ch+var_30], edi
		mov	edi, ecx
		mov	cl, [esp+4Ch+var_21]
		mov	[esp+4Ch+var_2C], ebx
		jmp	short loc_6E40FBF9
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FBF0:				; CODE XREF: sub_6E40F970+28Cj
					; sub_6E40F970+296j
		inc	eax
		cmp	eax, edi
		jz	loc_6E40FDA0

loc_6E40FBF9:				; CODE XREF: sub_6E40F970+27Aj
		cmp	[edx+eax*2], cl
		jnz	short loc_6E40FBF0
		mov	bl, [esp+4Ch+var_22]
		cmp	[edx+eax*2+1], bl
		jnz	short loc_6E40FBF0
		mov	edi, [esp+4Ch+var_30]
		mov	ebx, [esp+4Ch+var_2C]
		mov	edx, [esp+4Ch+var_34]
		test	edx, edx
		jz	loc_6E40FDA8
		mov	[esp+4Ch+var_34], 1
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E40FC30:				; CODE XREF: sub_6E40F970+149j
					; sub_6E40F970+15Aj ...
		mov	ecx, [esp+4Ch+var_40]
		and	ecx, 80h
		jz	loc_6E40FCF0
		mov	eax, [esi+98h]
		mov	eax, [eax+28h]
		test	eax, eax
		jz	loc_6E40FCF0
		mov	edx, [esi+0C0h]
		cmp	dword ptr [edx+0DCh], 0
		jz	loc_6E40FCF0
		mov	edx, [edx+0E0h]
		test	edx, edx
		jz	loc_6E40FCF0
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_6E40F9F0
		mov	[esp+4Ch+var_4C], eax
		call	EC_GROUP_get_curve_name
		test	eax, eax
		jnz	loc_6E40FDE0
		mov	edx, [esi+98h]
		mov	edx, [edx+28h]
		mov	edx, [edx+4]
		mov	edx, [edx]
		test	edx, edx
		jz	loc_6E40FDE0
		mov	[esp+4Ch+var_4C], edx
		call	EC_METHOD_get_field_type
		cmp	eax, 196h
		jz	loc_6E40FEB0
		mov	eax, [esi+98h]
		mov	eax, [eax+28h]
		mov	eax, [eax+4]
		mov	eax, [eax]
		mov	[esp+4Ch+var_4C], eax
		call	EC_METHOD_get_field_type
		cmp	eax, 197h
		jz	loc_6E40FF44
		cmp	[esp+4Ch+var_21], 0
		jnz	loc_6E40FDFC
		jmp	loc_6E40FDEC
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FCF0:				; CODE XREF: sub_6E40F970+2CAj
					; sub_6E40F970+2DBj ...
		mov	eax, [esp+4Ch+var_34]
		test	eax, eax
		jz	loc_6E40F9F0
		mov	[esp+4Ch+var_40], ecx
		mov	[esp+4Ch+var_48], ebx
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	sk_find
		test	eax, eax
		js	loc_6E40F9F0
		mov	ecx, [esp+4Ch+var_40]
		test	ecx, ecx
		jz	loc_6E40FDC0

loc_6E40FD24:				; CODE XREF: sub_6E40F970+4FCj
		test	byte ptr [esp+4Ch+var_3C], 40h
		jz	loc_6E40FDC0
		mov	edx, [esi+58h]
		cmp	byte ptr [edx+420h], 0
		jz	loc_6E40FDC0
		mov	edx, [esp+4Ch+var_20]
		test	edx, edx
		jnz	loc_6E40F9F0
		mov	[esp+4Ch+var_48], eax
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	sk_value
		mov	[esp+4Ch+var_20], eax
		inc	edi
		jmp	loc_6E40F9F1
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FD70:				; CODE XREF: sub_6E40F970+11Cj
		test	[esp+4Ch+var_40], eax
		jz	short loc_6E40FD90
		mov	eax, [esp+4Ch+var_30]
		test	[esp+4Ch+var_3C], eax
		setnz	al
		and	eax, 0FFh
		mov	[esp+4Ch+var_34], eax
		jmp	loc_6E40FAB4
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FD90:				; CODE XREF: sub_6E40F970+12Aj
					; sub_6E40F970+404j
		mov	[esp+4Ch+var_34], 0
		jmp	loc_6E40FAB4
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FDA0:				; CODE XREF: sub_6E40F970+283j
		mov	edi, [esp+4Ch+var_30]
		mov	ebx, [esp+4Ch+var_2C]

loc_6E40FDA8:				; CODE XREF: sub_6E40F970+1D4j
					; sub_6E40F970+1DFj ...
		mov	[esp+4Ch+var_34], 0
		jmp	loc_6E40FC30
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FDC0:				; CODE XREF: sub_6E40F970+3AEj
					; sub_6E40F970+3B9j ...
		mov	[esp+4Ch+arg_4], eax
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+arg_0], eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sk_value
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FDE0:				; CODE XREF: sub_6E40F970+317j
					; sub_6E40F970+32Dj
		mov	[esp+4Ch+var_4C], eax
		call	sub_6E41AEF0
		mov	[esp+4Ch+var_22], al

loc_6E40FDEC:				; CODE XREF: sub_6E40F970+372j
		cmp	[esp+4Ch+var_22], 0
		mov	[esp+4Ch+var_21], 0
		jz	loc_6E40F9F0

loc_6E40FDFC:				; CODE XREF: sub_6E40F970+36Cj
					; sub_6E40F970+54Aj
		mov	eax, [esi+0C0h]
		mov	ecx, [eax+0DCh]
		shr	ecx, 1
		jz	loc_6E40F9F0
		mov	edx, [eax+0E0h]
		xor	eax, eax
		mov	[esp+4Ch+var_30], ebx
		mov	bl, [esp+4Ch+var_21]
		mov	[esp+4Ch+var_40], ecx
		jmp	short loc_6E40FE3B
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FE30:				; CODE XREF: sub_6E40F970+4CEj
					; sub_6E40F970+4D8j
		inc	eax
		cmp	eax, [esp+4Ch+var_40]
		jz	loc_6E40F9F0

loc_6E40FE3B:				; CODE XREF: sub_6E40F970+4B4j
		cmp	[edx+eax*2], bl
		jnz	short loc_6E40FE30
		mov	cl, [esp+4Ch+var_22]
		cmp	[edx+eax*2+1], cl
		jnz	short loc_6E40FE30
		mov	ebx, [esp+4Ch+var_30]
		mov	eax, [esp+4Ch+var_34]
		test	eax, eax
		jz	loc_6E40F9F0
		mov	[esp+4Ch+var_48], ebx
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	sk_find
		test	eax, eax
		jns	loc_6E40FD24
		inc	edi
		jmp	loc_6E40F9F1
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FE80:				; CODE XREF: sub_6E40F970+1EFj
					; sub_6E40F970+208j
		mov	[esp+4Ch+var_4C], eax
		call	sub_6E41AEF0
		mov	[esp+4Ch+var_22], al

loc_6E40FE8C:				; CODE XREF: sub_6E40F970+24Aj
		cmp	[esp+4Ch+var_22], 0
		mov	[esp+4Ch+var_21], 0
		jnz	loc_6E40FBC0
		mov	[esp+4Ch+var_34], 0
		jmp	loc_6E40FC30
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FEB0:				; CODE XREF: sub_6E40F970+340j
		mov	[esp+4Ch+var_22], 1

loc_6E40FEB5:				; CODE XREF: sub_6E40F970+5D9j
		mov	[esp+4Ch+var_21], 0FFh
		jmp	loc_6E40FDFC
; ---------------------------------------------------------------------------

loc_6E40FEBF:				; CODE XREF: sub_6E40F970+21Bj
		mov	[esp+4Ch+var_22], 1

loc_6E40FEC4:				; CODE XREF: sub_6E40F970+5E3j
		mov	[esp+4Ch+var_21], 0FFh
		jmp	loc_6E40FBC0
; ---------------------------------------------------------------------------

loc_6E40FECE:				; CODE XREF: sub_6E40F970+19Bj
		mov	eax, [edx+70h]
		mov	eax, [eax+14h]
		test	eax, eax
		jz	loc_6E40FFEB
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_6E40FFE1
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6E40FF11
		mov	[esp+4Ch+var_4C], eax
		call	EC_METHOD_get_field_type
		cmp	eax, 196h
		jz	loc_6E40FF9D
		mov	eax, [esi+98h]
		mov	eax, [eax+70h]
		mov	eax, [eax+14h]
		mov	eax, [eax+4]
		mov	eax, [eax]

loc_6E40FF11:				; CODE XREF: sub_6E40F970+57Bj
					; sub_6E40F970+676j ...
		mov	[esp+4Ch+var_4C], eax
		call	EC_METHOD_get_field_type
		cmp	eax, 197h
		jz	short loc_6E40FF58

loc_6E40FF20:				; CODE XREF: sub_6E40F970+5F6j
					; sub_6E40F970+612j ...
		mov	[esp+4Ch+var_34], 0

loc_6E40FF28:				; CODE XREF: sub_6E40F970+62Bj
		mov	edx, [esi+98h]
		mov	eax, [edx+6Ch]
		test	eax, eax
		jz	loc_6E40FC30
		mov	eax, [esi+0C0h]
		jmp	loc_6E40FB20
; ---------------------------------------------------------------------------

loc_6E40FF44:				; CODE XREF: sub_6E40F970+361j
		mov	[esp+4Ch+var_22], 2
		jmp	loc_6E40FEB5
; ---------------------------------------------------------------------------

loc_6E40FF4E:				; CODE XREF: sub_6E40F970+23Fj
		mov	[esp+4Ch+var_22], 2
		jmp	loc_6E40FEC4
; ---------------------------------------------------------------------------

loc_6E40FF58:				; CODE XREF: sub_6E40F970+5AEj
		mov	eax, [esi+0C0h]
		mov	ecx, [eax+0D4h]
		test	ecx, ecx
		jz	short loc_6E40FF20
		mov	edx, [eax+0D8h]
		cmp	byte ptr [edx],	2
		jz	short loc_6E40FF8B
		lea	eax, [edx+1]
		add	edx, ecx
		nop
		lea	esi, [esi+0]

loc_6E40FF80:				; CODE XREF: sub_6E40F970+619j
		cmp	eax, edx
		jz	short loc_6E40FF20
		inc	eax
		cmp	byte ptr [eax-1], 2
		jnz	short loc_6E40FF80

loc_6E40FF8B:				; CODE XREF: sub_6E40F970+601j
					; sub_6E40F970+64Aj ...
		mov	ecx, [esp+4Ch+var_34]
		test	ecx, ecx
		jz	short loc_6E40FF20
		mov	[esp+4Ch+var_34], 1
		jmp	short loc_6E40FF28
; ---------------------------------------------------------------------------

loc_6E40FF9D:				; CODE XREF: sub_6E40F970+58Aj
		mov	eax, [esi+0C0h]
		mov	ecx, [eax+0D4h]
		test	ecx, ecx
		jz	loc_6E40FF20
		mov	eax, [eax+0D8h]
		cmp	byte ptr [eax],	1
		jz	short loc_6E40FF8B
		lea	edx, [eax+1]
		add	eax, ecx
		jmp	short loc_6E40FFD0
; ---------------------------------------------------------------------------
		align 10h

loc_6E40FFD0:				; CODE XREF: sub_6E40F970+651j
					; sub_6E40F970+66Dj
		cmp	edx, eax
		jz	loc_6E40FF20
		inc	edx
		cmp	byte ptr [edx-1], 1
		jnz	short loc_6E40FFD0
		jmp	short loc_6E40FF8B
; ---------------------------------------------------------------------------

loc_6E40FFE1:				; CODE XREF: sub_6E40F970+571j
		mov	eax, large ds:0
		jmp	loc_6E40FF11
; ---------------------------------------------------------------------------

loc_6E40FFEB:				; CODE XREF: sub_6E40F970+566j
		mov	eax, large ds:4
		mov	eax, [eax]
		jmp	loc_6E40FF11
sub_6E40F970	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E410000	proc near		; CODE XREF: sub_6E403800+48p
					; sub_6E4231B0+48p

var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ecx, [esp+20h+arg_0]
		mov	edx, [esp+20h+arg_4]
		mov	eax, [ecx+58h]
		mov	eax, [eax+344h]
		mov	ebx, [eax+0Ch]
		mov	esi, [ecx]
		cmp	esi, 300h
		jle	short loc_6E410040
		test	bh, 2
		jz	short loc_6E410040
		mov	byte ptr [edx],	15h
		mov	byte ptr [edx+1], 16h
		mov	eax, 2

loc_6E410036:				; CODE XREF: sub_6E410000+8Fj
					; sub_6E410000+A8j
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E410040:				; CODE XREF: sub_6E410000+23j
					; sub_6E410000+28j
		test	bl, 0Ah
		jnz	short loc_6E4100C0
		mov	[esp+20h+var_14], 3
		mov	[esp+20h+var_1C], 4
		mov	[esp+20h+var_18], 2
		mov	ebp, 1
		mov	eax, 2
		xor	edi, edi
		mov	[esp+20h+var_20], 0
		cmp	esi, 300h
		jz	loc_6E410103

loc_6E41007C:				; CODE XREF: sub_6E410000+FDj
					; sub_6E410000+106j ...
		mov	byte ptr [edx+edi], 1
		mov	byte ptr [edx+ebp], 2
		and	ebx, 60h
		jz	short loc_6E4100A2
		cmp	dword ptr [ecx], 300h
		jle	short loc_6E410036
		mov	byte ptr [edx+eax], 41h
		mov	edi, [esp+20h+var_20]
		mov	eax, edi
		add	eax, 4
		mov	byte ptr [edx+edi+3], 42h

loc_6E4100A2:				; CODE XREF: sub_6E410000+87j
		cmp	dword ptr [ecx], 300h
		jle	short loc_6E410036
		mov	byte ptr [edx+eax], 40h
		inc	eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4100C0:				; CODE XREF: sub_6E410000+43j
		mov	byte ptr [edx],	3
		mov	byte ptr [edx+1], 4
		mov	esi, [ecx]
		mov	[esp+20h+var_14], 5
		mov	[esp+20h+var_1C], 6
		mov	[esp+20h+var_18], 4
		mov	ebp, 3
		mov	eax, 4
		mov	edi, 2
		mov	[esp+20h+var_20], 2
		cmp	esi, 300h
		jnz	loc_6E41007C

loc_6E410103:				; CODE XREF: sub_6E410000+76j
		test	bl, 0Eh
		jz	loc_6E41007C
		mov	byte ptr [edx+edi], 5
		mov	byte ptr [edx+ebp], 6
		mov	ebp, [esp+20h+var_14]
		mov	edi, [esp+20h+var_18]
		mov	[esp+20h+var_20], eax
		mov	eax, [esp+20h+var_1C]
		jmp	loc_6E41007C
sub_6E410000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E410130	proc near		; CODE XREF: sub_6E42EF80j
					; DATA XREF: .rdata:6E44B064o ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [ebx+2Ch]
		test	esi, esi
		jnz	short loc_6E410190
		cmp	dword ptr [ebx+34h], 4000h
		jz	short loc_6E410190
		mov	eax, [ebx+30h]
		test	al, 1
		jz	loc_6E410200
		mov	edx, [ebx+58h]
		mov	edx, [edx+18Ch]
		test	edx, edx
		jnz	loc_6E410240
		test	al, 2
		jz	short loc_6E4101B0

loc_6E410169:				; CODE XREF: sub_6E410130+B0j
		cmp	eax, 3
		jnz	short loc_6E41019C

loc_6E41016E:				; CODE XREF: sub_6E410130+107j
		mov	eax, [ebx+58h]
		mov	eax, [eax+18Ch]
		test	eax, eax
		setz	al
		and	eax, 0FFh
		mov	esi, eax
		mov	eax, esi
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E410190:				; CODE XREF: sub_6E410130+Ej
					; sub_6E410130+17j
		mov	dword ptr [ebx+30h], 3
		mov	esi, 1

loc_6E41019C:				; CODE XREF: sub_6E410130+3Cj
					; sub_6E410130+C5j ...
		mov	eax, esi
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4101B0:				; CODE XREF: sub_6E410130+37j
		mov	eax, [ebx+8]
		mov	eax, [eax+34h]
		mov	[esp+2Ch+var_1C], 0
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	eax
		mov	eax, [ebx+30h]
		test	al, 2
		jnz	loc_6E410169
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4101F0:				; CODE XREF: sub_6E410130+F9j
					; sub_6E410130+11Ej
		mov	esi, 0FFFFFFFFh
		jmp	short loc_6E41019C
; ---------------------------------------------------------------------------
		align 10h

loc_6E410200:				; CODE XREF: sub_6E410130+1Ej
		or	eax, 1
		mov	[ebx+30h], eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6E4151B0
		mov	eax, [ebx+58h]
		mov	ecx, [eax+18Ch]
		test	ecx, ecx
		jnz	short loc_6E4101F0

loc_6E41022B:				; CODE XREF: sub_6E410130+11Cj
		mov	eax, [ebx+30h]
		cmp	eax, 3
		jnz	loc_6E41019C
		jmp	loc_6E41016E
; ---------------------------------------------------------------------------
		align 10h

loc_6E410240:				; CODE XREF: sub_6E410130+2Fj
		mov	eax, [ebx+8]
		mov	eax, [eax+3Ch]
		mov	[esp+2Ch+var_2C], ebx
		call	eax
		inc	eax
		jnz	short loc_6E41022B
		jmp	short loc_6E4101F0
sub_6E410130	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E410250	proc near		; DATA XREF: .rdata:6E44B060o
					; .rdata:6E44B120o ...

dwErrCode	= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	[esp+18h+dwErrCode], 0 ; dwErrCode
		call	ds:SetLastError
		push	eax
		mov	eax, [ebx+58h]
		mov	edx, [eax+194h]
		test	edx, edx
		jnz	short loc_6E4102B0

loc_6E410275:				; CODE XREF: sub_6E410250+68j
					; sub_6E410250+72j ...
		test	byte ptr [eax],	4
		jz	short loc_6E410282
		mov	edx, [ebx+10h]
		cmp	edx, [ebx+14h]
		jz	short loc_6E410300

loc_6E410282:				; CODE XREF: sub_6E410250+28j
		mov	eax, [ebx+8]
		mov	eax, [eax+38h]
		mov	ecx, [ebp+arg_8]
		mov	[esp+18h+var_C], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_14], 17h
		mov	[esp+18h+dwErrCode], ebx
		call	eax

loc_6E4102A3:				; CODE XREF: sub_6E410250+D7j
					; sub_6E410250+10Fj ...
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4102B0:				; CODE XREF: sub_6E410250+23j
		mov	ecx, [eax+0F8h]
		test	ecx, ecx
		jnz	short loc_6E410275
		mov	edx, [eax+108h]
		test	edx, edx
		jnz	short loc_6E410275
		mov	[esp+18h+dwErrCode], ebx
		call	SSL_state
		test	ah, 30h
		jnz	loc_6E410390
		mov	dword ptr [ebx+34h], 3004h
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+194h], 0
		inc	dword ptr [eax+19Ch]
		inc	dword ptr [eax+198h]
		jmp	loc_6E410275
; ---------------------------------------------------------------------------
		align 10h

loc_6E410300:				; CODE XREF: sub_6E410250+30j
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_6E410336
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_10], eax
		mov	[esp+18h+var_14], 17h
		mov	[esp+18h+dwErrCode], ebx
		call	sub_6E4132F0
		test	eax, eax
		jle	loc_6E4102A3
		mov	edx, [ebx+58h]
		mov	[edx+4], eax
		mov	edx, [ebx+10h]

loc_6E410336:				; CODE XREF: sub_6E410250+B5j
		mov	dword ptr [ebx+18h], 2
		mov	[esp+18h+var_C], 0
		mov	[esp+18h+var_10], 0
		mov	[esp+18h+var_14], 0Bh
		mov	[esp+18h+dwErrCode], edx
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E4102A3
		mov	dword ptr [ebx+18h], 1
		mov	[esp+18h+dwErrCode], ebx
		call	sub_6E435E90
		mov	edx, [ebx+58h]
		and	dword ptr [edx], 0FFFFFFFBh
		mov	eax, [edx+4]
		mov	dword ptr [edx+4], 0
		jmp	loc_6E4102A3
; ---------------------------------------------------------------------------
		align 10h

loc_6E410390:				; CODE XREF: sub_6E410250+7Fj
		mov	eax, [ebx+58h]
		jmp	loc_6E410275
sub_6E410250	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E4103A0	proc near		; DATA XREF: .rdata:6E44B058o
					; .rdata:6E44B118o ...

dwErrCode	= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	[esp+38h+dwErrCode], 0 ; dwErrCode
		call	ds:SetLastError
		push	eax
		mov	eax, [ebx+58h]
		mov	edx, [eax+194h]
		test	edx, edx
		jnz	short loc_6E410420

loc_6E4103CD:				; CODE XREF: sub_6E4103A0+88j
					; sub_6E4103A0+92j ...
		mov	dword ptr [eax+1A0h], 1
		mov	eax, [ebx+8]
		mov	eax, [eax+34h]
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], edi
		mov	[esp+38h+var_30], esi
		mov	[esp+38h+var_34], 17h
		mov	[esp+38h+dwErrCode], ebx
		call	eax
		mov	edx, [ebx+58h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6E410470

loc_6E410402:				; CODE XREF: sub_6E4103A0+D7j
		mov	dword ptr [edx+1A0h], 0

loc_6E41040C:				; CODE XREF: sub_6E4103A0+102j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E410420:				; CODE XREF: sub_6E4103A0+2Bj
		mov	ecx, [eax+0F8h]
		test	ecx, ecx
		jnz	short loc_6E4103CD
		mov	edx, [eax+108h]
		test	edx, edx
		jnz	short loc_6E4103CD
		mov	[esp+38h+dwErrCode], ebx
		call	SSL_state
		test	ah, 30h
		jnz	short loc_6E4104B0
		mov	dword ptr [ebx+34h], 3004h
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+194h], 0
		inc	dword ptr [eax+19Ch]
		inc	dword ptr [eax+198h]
		jmp	loc_6E4103CD
; ---------------------------------------------------------------------------
		align 10h

loc_6E410470:				; CODE XREF: sub_6E4103A0+60j
		cmp	dword ptr [edx+1A0h], 2
		jnz	short loc_6E410402
		inc	dword ptr [ebx+1Ch]
		mov	eax, [ebx+8]
		mov	eax, [eax+34h]
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], edi
		mov	[esp+38h+var_30], esi
		mov	[esp+38h+var_34], 17h
		mov	[esp+38h+dwErrCode], ebx
		call	eax
		dec	dword ptr [ebx+1Ch]
		jmp	loc_6E41040C
; ---------------------------------------------------------------------------
		align 10h

loc_6E4104B0:				; CODE XREF: sub_6E4103A0+9Fj
		mov	eax, [ebx+58h]
		jmp	loc_6E4103CD
sub_6E4103A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E4104C0	proc near		; DATA XREF: .rdata:6E44B05Co
					; .rdata:6E44B11Co ...

dwErrCode	= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	[esp+38h+dwErrCode], 0 ; dwErrCode
		call	ds:SetLastError
		push	eax
		mov	eax, [ebx+58h]
		mov	edx, [eax+194h]
		test	edx, edx
		jnz	short loc_6E410540

loc_6E4104ED:				; CODE XREF: sub_6E4104C0+88j
					; sub_6E4104C0+92j ...
		mov	dword ptr [eax+1A0h], 1
		mov	eax, [ebx+8]
		mov	eax, [eax+34h]
		mov	[esp+38h+var_28], 1
		mov	[esp+38h+var_2C], edi
		mov	[esp+38h+var_30], esi
		mov	[esp+38h+var_34], 17h
		mov	[esp+38h+dwErrCode], ebx
		call	eax
		mov	edx, [ebx+58h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6E410590

loc_6E410522:				; CODE XREF: sub_6E4104C0+D7j
		mov	dword ptr [edx+1A0h], 0

loc_6E41052C:				; CODE XREF: sub_6E4104C0+102j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E410540:				; CODE XREF: sub_6E4104C0+2Bj
		mov	ecx, [eax+0F8h]
		test	ecx, ecx
		jnz	short loc_6E4104ED
		mov	edx, [eax+108h]
		test	edx, edx
		jnz	short loc_6E4104ED
		mov	[esp+38h+dwErrCode], ebx
		call	SSL_state
		test	ah, 30h
		jnz	short loc_6E4105D0
		mov	dword ptr [ebx+34h], 3004h
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+194h], 0
		inc	dword ptr [eax+19Ch]
		inc	dword ptr [eax+198h]
		jmp	loc_6E4104ED
; ---------------------------------------------------------------------------
		align 10h

loc_6E410590:				; CODE XREF: sub_6E4104C0+60j
		cmp	dword ptr [edx+1A0h], 2
		jnz	short loc_6E410522
		inc	dword ptr [ebx+1Ch]
		mov	eax, [ebx+8]
		mov	eax, [eax+34h]
		mov	[esp+38h+var_28], 1
		mov	[esp+38h+var_2C], edi
		mov	[esp+38h+var_30], esi
		mov	[esp+38h+var_34], 17h
		mov	[esp+38h+dwErrCode], ebx
		call	eax
		dec	dword ptr [ebx+1Ch]
		jmp	loc_6E41052C
; ---------------------------------------------------------------------------
		align 10h

loc_6E4105D0:				; CODE XREF: sub_6E4104C0+9Fj
		mov	eax, [ebx+58h]
		jmp	loc_6E4104ED
sub_6E4104C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4105E0	proc near		; CODE XREF: sub_6E413BF0+71Cp
					; sub_6E4296E0+5FDp
					; DATA XREF: ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, [eax+20h]
		test	edx, edx
		jz	short loc_6E410620
		mov	eax, [eax+58h]
		test	byte ptr [eax],	1
		jnz	short loc_6E410610
		mov	dword ptr [eax+194h], 1
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E410610:				; CODE XREF: sub_6E4105E0+11j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E410620:				; CODE XREF: sub_6E4105E0+9j
		mov	eax, 1
		retn
sub_6E4105E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E410630	proc near		; CODE XREF: sub_6E413BF0+724p
					; sub_6E4296E0+605p
					; DATA XREF: ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	ecx, [eax+194h]
		test	ecx, ecx
		jz	short loc_6E410659
		mov	edx, [eax+0F8h]
		test	edx, edx
		jnz	short loc_6E410659
		mov	eax, [eax+108h]
		test	eax, eax
		jz	short loc_6E410660

loc_6E410659:				; CODE XREF: sub_6E410630+13j
					; sub_6E410630+1Dj ...
		xor	eax, eax

loc_6E41065B:				; CODE XREF: sub_6E410630+62j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6E410660:				; CODE XREF: sub_6E410630+27j
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_state
		test	ah, 30h
		jnz	short loc_6E410659
		mov	dword ptr [ebx+34h], 3004h
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+194h], 0
		inc	dword ptr [eax+19Ch]
		inc	dword ptr [eax+198h]
		mov	eax, 1
		jmp	short loc_6E41065B
sub_6E410630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4106A0	proc near		; CODE XREF: sub_6E4118F0+18Ap
					; sub_6E41F9C0+345p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+58h]
		mov	eax, [eax+344h]
		mov	eax, [eax+24h]
		mov	edx, [edx+8]
		cmp	dword ptr [edx], 303h
		jz	short loc_6E4106C0

locret_6E4106BB:			; CODE XREF: sub_6E4106A0+25j
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4106C0:				; CODE XREF: sub_6E4106A0+19j
		cmp	eax, 0C030h
		jnz	short locret_6E4106BB
		mov	eax, 20080h
		retn
sub_6E4106A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4106D0	proc near		; DATA XREF: .data:6E448010o

var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_84		= byte ptr -84h
var_74		= byte ptr -74h
var_5C		= byte ptr -5Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	ebx, [esp+0DCh+arg_0]
		mov	eax, [ebx+58h]
		mov	edx, [eax+344h]
		mov	ecx, [edx+20h]
		mov	[esp+0DCh+var_B0], ecx
		mov	edx, [eax+37Ch]
		mov	[esp+0DCh+var_B8], edx
		mov	esi, [eax+380h]
		test	esi, esi
		jz	loc_6E410D80

loc_6E410709:				; CODE XREF: sub_6E4106D0+6CFj
		mov	eax, [eax+38Ch]
		test	eax, eax
		jz	loc_6E410CF0
		mov	ebp, [eax+8]

loc_6E41071A:				; CODE XREF: sub_6E4106D0+622j
		mov	edi, [esp+0DCh+arg_4]
		and	edi, 1
		jz	loc_6E4107F0
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	loc_6E410CA0
		mov	[esp+0DCh+var_AC], eax
		mov	[esp+0DCh+var_B4], 1

loc_6E410744:				; CODE XREF: sub_6E4106D0+610j
		mov	[esp+0DCh+var_D8], esi
		lea	eax, [ebx+84h]
		mov	[esp+0DCh+var_DC], eax
		call	sub_6E4366A0
		test	eax, eax
		jz	loc_6E410DC0
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	short loc_6E41077A
		mov	[esp+0DCh+var_DC], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+88h], 0

loc_6E41077A:				; CODE XREF: sub_6E4106D0+96j
		test	ebp, ebp
		jz	loc_6E410D70
		mov	[esp+0DCh+var_DC], ebp
		call	COMP_CTX_new
		mov	[ebx+88h], eax
		test	eax, eax
		jz	loc_6E410E10
		mov	edi, [ebx+58h]
		mov	ebp, [edi+120h]
		test	ebp, ebp
		jz	loc_6E410D00

loc_6E4107A9:				; CODE XREF: sub_6E4106D0+65Dj
					; sub_6E4106D0+6A3j
		mov	dword ptr [edi+8], 0
		mov	dword ptr [edi+0Ch], 0
		mov	eax, [ebx+58h]
		lea	edx, [eax+14h]
		mov	[esp+0DCh+var_A8], edx
		mov	edx, [esp+0DCh+var_B4]
		test	edx, edx
		jz	loc_6E410881

loc_6E4107CD:				; CODE XREF: sub_6E4106D0+1ABj
		mov	eax, [esp+0DCh+var_AC]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+58h]
		jmp	loc_6E410881
; ---------------------------------------------------------------------------
		jmp	short loc_6E4107F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4107F0:				; CODE XREF: sub_6E4106D0+54j
					; sub_6E4106D0+111j
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	loc_6E410C50
		mov	[esp+0DCh+var_AC], eax
		mov	[esp+0DCh+var_B4], 1

loc_6E41080A:				; CODE XREF: sub_6E4106D0+5C4j
		mov	[esp+0DCh+var_D8], esi
		lea	eax, [ebx+90h]
		mov	[esp+0DCh+var_DC], eax
		call	sub_6E4366A0
		test	eax, eax
		jz	loc_6E410DD0
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E410840
		mov	[esp+0DCh+var_DC], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+94h], 0

loc_6E410840:				; CODE XREF: sub_6E4106D0+15Cj
		test	ebp, ebp
		jz	short loc_6E41085A
		mov	[esp+0DCh+var_DC], ebp
		call	COMP_CTX_new
		mov	[ebx+94h], eax
		test	eax, eax
		jz	loc_6E410E50

loc_6E41085A:				; CODE XREF: sub_6E4106D0+172j
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+54h], 0
		mov	dword ptr [eax+58h], 0
		mov	eax, [ebx+58h]
		lea	ecx, [eax+60h]
		mov	[esp+0DCh+var_A8], ecx
		mov	edx, [esp+0DCh+var_B4]
		test	edx, edx
		jnz	loc_6E4107CD

loc_6E410881:				; CODE XREF: sub_6E4106D0+F7j
					; sub_6E4106D0+10Cj
		mov	edi, [eax+378h]
		mov	[esp+0DCh+var_DC], esi
		call	EVP_MD_size
		mov	esi, eax
		test	eax, eax
		js	loc_6E410A30
		mov	eax, [esp+0DCh+var_B0]
		and	eax, 2
		mov	ebp, eax
		mov	[esp+0DCh+var_A0], eax
		mov	eax, [esp+0DCh+var_B8]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_CIPHER_key_length
		mov	[esp+0DCh+var_B4], eax
		test	ebp, ebp
		jz	short loc_6E4108DC
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		test	byte ptr [eax+20h], 8
		jz	loc_6E410B00
		mov	eax, 5

loc_6E4108D2:				; CODE XREF: sub_6E4106D0+43Fj
		cmp	[esp+0DCh+var_B4], eax
		jle	short loc_6E4108DC
		mov	[esp+0DCh+var_B4], eax

loc_6E4108DC:				; CODE XREF: sub_6E4106D0+1E8j
					; sub_6E4106D0+206j
		mov	eax, [esp+0DCh+var_B8]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_CIPHER_iv_length
		mov	edx, eax
		cmp	[esp+0DCh+arg_4], 12h
		jz	loc_6E410A40
		cmp	[esp+0DCh+arg_4], 21h
		jz	loc_6E410A40
		lea	ecx, [edi+esi]
		mov	eax, [esp+0DCh+var_B4]
		lea	ebp, [eax+esi]
		add	ebp, esi
		lea	eax, [edi+ebp]
		mov	[esp+0DCh+var_B0], eax
		mov	eax, [esp+0DCh+var_B4]
		add	eax, edx
		add	ebp, eax
		lea	eax, [edi+ebp]
		mov	[esp+0DCh+var_A4], eax
		add	ebp, edx
		mov	eax, [ebx+58h]
		lea	edi, [eax+0A0h]
		mov	[esp+0DCh+var_98], edi
		lea	edi, [eax+0C0h]
		mov	[esp+0DCh+var_9C], edi
		cmp	ebp, [eax+374h]
		jg	loc_6E410A85

loc_6E41094D:				; CODE XREF: sub_6E4106D0+3AFj
		mov	[esp+0DCh+var_90], edx
		mov	[esp+0DCh+var_94], ecx
		lea	ebp, [esp+0DCh+var_74]
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_MD_CTX_init
		mov	eax, esi
		mov	edi, [esp+0DCh+var_A8]
		mov	ecx, [esp+0DCh+var_94]
		mov	esi, ecx
		cmp	eax, 4
		mov	edx, [esp+0DCh+var_90]
		jnb	loc_6E410B20
		xor	ecx, ecx
		test	al, 2
		jnz	loc_6E410AE0

loc_6E410984:				; CODE XREF: sub_6E4106D0+473j
		test	al, 1
		jnz	loc_6E410AC0

loc_6E41098C:				; CODE XREF: sub_6E4106D0+41Dj
		mov	eax, [esp+0DCh+var_A0]
		test	eax, eax
		jnz	loc_6E410B50

loc_6E410998:				; CODE XREF: sub_6E4106D0+400j
		lea	esi, [esp+0DCh+var_5C]
		lea	edi, [esp+0DCh+var_84]

loc_6E4109A3:				; CODE XREF: sub_6E4106D0+571j
					; sub_6E4106D0+6E8j
		mov	eax, [ebx+0C0h]
		mov	dword ptr [eax+4], 0
		mov	eax, [esp+0DCh+arg_4]
		and	eax, 2
		mov	[esp+0DCh+var_C8], eax
		mov	eax, [esp+0DCh+var_A4]
		mov	[esp+0DCh+var_CC], eax
		mov	eax, [esp+0DCh+var_B0]
		mov	[esp+0DCh+var_D0], eax
		mov	[esp+0DCh+var_D4], 0
		mov	eax, [esp+0DCh+var_B8]
		mov	[esp+0DCh+var_D8], eax
		mov	eax, [esp+0DCh+var_AC]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_CipherInit_ex
		mov	[esp+0DCh+var_D8], 40h
		mov	[esp+0DCh+var_DC], esi
		call	OPENSSL_cleanse
		mov	[esp+0DCh+var_D8], 10h
		mov	[esp+0DCh+var_DC], edi
		call	OPENSSL_cleanse
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_MD_CTX_cleanup
		mov	edi, 1
		mov	eax, edi
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E410A30:				; CODE XREF: sub_6E4106D0+1C3j
		xor	edi, edi

loc_6E410A32:				; CODE XREF: sub_6E4106D0+691j
					; sub_6E4106D0+72Cj ...
		mov	eax, edi
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E410A40:				; CODE XREF: sub_6E4106D0+222j
					; sub_6E4106D0+230j
		lea	eax, [esi+esi]
		lea	ecx, [edi+eax]
		mov	[esp+0DCh+var_B0], ecx
		mov	ecx, [esp+0DCh+var_B4]
		mov	ebp, ecx
		add	ebp, ecx
		add	ebp, eax
		lea	eax, [edi+ebp]
		mov	[esp+0DCh+var_A4], eax
		lea	eax, [edx+edx]
		add	ebp, eax
		mov	eax, [ebx+58h]
		lea	ecx, [eax+0C0h]
		mov	[esp+0DCh+var_98], ecx
		lea	ecx, [eax+0A0h]
		mov	[esp+0DCh+var_9C], ecx
		mov	ecx, edi
		cmp	ebp, [eax+374h]
		jle	loc_6E41094D

loc_6E410A85:				; CODE XREF: sub_6E4106D0+277j
		mov	[esp+0DCh+var_CC], 160h

loc_6E410A8D:				; CODE XREF: sub_6E4106D0+6F8j
		mov	[esp+0DCh+var_D0], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0DCh+var_D4], 44h
		mov	[esp+0DCh+var_D8], 81h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		xor	edi, edi
		mov	eax, edi
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E410AC0:				; CODE XREF: sub_6E4106D0+2B6j
					; sub_6E4106D0+423j
		mov	al, [esi+ecx]
		mov	byte ptr [esp+0DCh+var_A8], al
		mov	[edi+ecx], al
		mov	eax, [esp+0DCh+var_A0]
		test	eax, eax
		jz	loc_6E410998
		jmp	short loc_6E410B50
; ---------------------------------------------------------------------------
		align 10h

loc_6E410AE0:				; CODE XREF: sub_6E4106D0+2AEj
					; sub_6E4106D0+479j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		test	al, 1
		jz	loc_6E41098C
		jmp	short loc_6E410AC0
; ---------------------------------------------------------------------------
		align 10h

loc_6E410B00:				; CODE XREF: sub_6E4106D0+1F7j
		cmp	dword ptr [eax+14h], 1
		setz	al
		and	eax, 0FFh
		add	eax, 7
		jmp	loc_6E4108D2
; ---------------------------------------------------------------------------
		align 10h

loc_6E410B20:				; CODE XREF: sub_6E4106D0+2A4j
		test	edi, 1
		jnz	loc_6E410EB0

loc_6E410B2C:				; CODE XREF: sub_6E4106D0+7E7j
		test	edi, 2
		jnz	loc_6E410E90

loc_6E410B38:				; CODE XREF: sub_6E4106D0+7CFj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	ecx, ecx
		test	al, 2
		jz	loc_6E410984
		jmp	short loc_6E410AE0
; ---------------------------------------------------------------------------
		align 10h

loc_6E410B50:				; CODE XREF: sub_6E4106D0+2C2j
					; sub_6E4106D0+406j
		mov	[esp+0DCh+var_A8], edx
		call	EVP_md5
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], eax
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_DigestInit_ex
		mov	eax, [esp+0DCh+var_B4]
		mov	[esp+0DCh+var_D4], eax
		mov	eax, [esp+0DCh+var_B0]
		mov	[esp+0DCh+var_D8], eax
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_DigestUpdate
		mov	[esp+0DCh+var_D4], 20h
		mov	edi, [esp+0DCh+var_98]
		mov	[esp+0DCh+var_D8], edi
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_DigestUpdate
		mov	[esp+0DCh+var_D4], 20h
		mov	eax, [esp+0DCh+var_9C]
		mov	[esp+0DCh+var_D8], eax
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_DigestUpdate
		mov	[esp+0DCh+var_D4], 0
		lea	esi, [esp+0DCh+var_5C]
		mov	[esp+0DCh+var_D8], esi
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_DigestFinal_ex
		mov	edx, [esp+0DCh+var_A8]
		test	edx, edx
		jle	loc_6E410DB0
		call	EVP_md5
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], eax
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_DigestInit_ex
		mov	[esp+0DCh+var_D4], 20h
		mov	[esp+0DCh+var_D8], edi
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_DigestUpdate
		mov	[esp+0DCh+var_D4], 20h
		mov	eax, [esp+0DCh+var_9C]
		mov	[esp+0DCh+var_D8], eax
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_DigestUpdate
		mov	[esp+0DCh+var_D4], 0
		lea	edi, [esp+0DCh+var_84]
		mov	[esp+0DCh+var_D8], edi
		mov	[esp+0DCh+var_DC], ebp
		call	EVP_DigestFinal_ex
		mov	[esp+0DCh+var_A4], edi
		mov	[esp+0DCh+var_B0], esi
		jmp	loc_6E4109A3
; ---------------------------------------------------------------------------
		align 10h

loc_6E410C50:				; CODE XREF: sub_6E4106D0+128j
		mov	[esp+0DCh+var_D4], 11Eh
		mov	[esp+0DCh+var_D8], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0DCh+var_DC], 8Ch
		call	CRYPTO_malloc
		mov	[ebx+8Ch], eax
		test	eax, eax
		jz	loc_6E410D33
		mov	[esp+0DCh+var_DC], eax
		call	EVP_CIPHER_CTX_init
		mov	eax, [ebx+8Ch]
		mov	[esp+0DCh+var_AC], eax
		mov	[esp+0DCh+var_B4], 0
		jmp	loc_6E41080A
; ---------------------------------------------------------------------------
		align 10h

loc_6E410CA0:				; CODE XREF: sub_6E4106D0+62j
		mov	[esp+0DCh+var_D4], 0F7h
		mov	[esp+0DCh+var_D8], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0DCh+var_DC], 8Ch
		call	CRYPTO_malloc
		mov	[ebx+80h], eax
		test	eax, eax
		jz	short loc_6E410D33
		mov	[esp+0DCh+var_DC], eax
		call	EVP_CIPHER_CTX_init
		mov	eax, [ebx+80h]
		mov	[esp+0DCh+var_AC], eax
		mov	[esp+0DCh+var_B4], 0
		jmp	loc_6E410744
; ---------------------------------------------------------------------------
		align 10h

loc_6E410CF0:				; CODE XREF: sub_6E4106D0+41j
		xor	ebp, ebp
		jmp	loc_6E41071A
; ---------------------------------------------------------------------------
		align 10h

loc_6E410D00:				; CODE XREF: sub_6E4106D0+D3j
		mov	[esp+0DCh+var_D4], 113h
		mov	[esp+0DCh+var_D8], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0DCh+var_DC], 4000h
		call	CRYPTO_malloc
		mov	[edi+120h], eax
		mov	edi, [ebx+58h]
		mov	ecx, [edi+120h]
		test	ecx, ecx
		jnz	loc_6E4107A9

loc_6E410D33:				; CODE XREF: sub_6E4106D0+5A4j
					; sub_6E4106D0+5F4j
		mov	[esp+0DCh+var_CC], 184h
		mov	[esp+0DCh+var_D0], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0DCh+var_D4], 41h
		mov	[esp+0DCh+var_D8], 81h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E410A32
; ---------------------------------------------------------------------------
		align 10h

loc_6E410D70:				; CODE XREF: sub_6E4106D0+ACj
		mov	edi, [ebx+58h]
		jmp	loc_6E4107A9
; ---------------------------------------------------------------------------
		align 10h

loc_6E410D80:				; CODE XREF: sub_6E4106D0+33j
		mov	[esp+0DCh+var_D4], offset aM ; "m"
		mov	[esp+0DCh+var_D8], 0EBh
		mov	[esp+0DCh+var_DC], offset aS3_enc_c ; "s3_enc.c"
		call	OpenSSLDie
		mov	eax, [ebx+58h]
		jmp	loc_6E410709
; ---------------------------------------------------------------------------
		align 10h

loc_6E410DB0:				; CODE XREF: sub_6E4106D0+506j
		mov	[esp+0DCh+var_B0], esi
		lea	edi, [esp+0DCh+var_84]
		jmp	loc_6E4109A3
; ---------------------------------------------------------------------------
		align 10h

loc_6E410DC0:				; CODE XREF: sub_6E4106D0+88j
		mov	[esp+0DCh+var_CC], 101h
		jmp	loc_6E410A8D
; ---------------------------------------------------------------------------
		align 10h

loc_6E410DD0:				; CODE XREF: sub_6E4106D0+14Ej
		mov	[esp+0DCh+var_CC], 127h
		mov	[esp+0DCh+var_D0], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0DCh+var_D4], 44h
		mov	[esp+0DCh+var_D8], 81h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		jmp	loc_6E410A32
; ---------------------------------------------------------------------------
		jmp	short loc_6E410E10
; ---------------------------------------------------------------------------
		align 10h

loc_6E410E10:				; CODE XREF: sub_6E4106D0+C2j
					; sub_6E4106D0+731j
		mov	[esp+0DCh+var_CC], 10Eh
		mov	[esp+0DCh+var_D0], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0DCh+var_D4], 8Eh
		mov	[esp+0DCh+var_D8], 81h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E410A32
; ---------------------------------------------------------------------------
		align 10h

loc_6E410E50:				; CODE XREF: sub_6E4106D0+184j
		mov	[esp+0DCh+var_CC], 134h
		mov	[esp+0DCh+var_D0], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0DCh+var_D4], 8Eh
		mov	[esp+0DCh+var_D8], 81h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		jmp	loc_6E410A32
; ---------------------------------------------------------------------------
		jmp	short loc_6E410E90
; ---------------------------------------------------------------------------
		align 10h

loc_6E410E90:				; CODE XREF: sub_6E4106D0+462j
					; sub_6E4106D0+7B1j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E410B38
; ---------------------------------------------------------------------------
		align 10h

loc_6E410EB0:				; CODE XREF: sub_6E4106D0+456j
		mov	cl, [ecx]
		mov	[edi], cl
		inc	edi
		inc	esi
		dec	eax
		jmp	loc_6E410B2C
sub_6E4106D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E410EC0	proc near		; DATA XREF: .data:6E448008o

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_6F		= byte ptr -6Fh
var_6E		= byte ptr -6Eh
var_6D		= byte ptr -6Dh
var_6C		= byte ptr -6Ch
var_6B		= byte ptr -6Bh
var_6A		= byte ptr -6Ah
var_69		= byte ptr -69h
var_68		= byte ptr -68h
var_67		= byte ptr -67h
var_66		= byte ptr -66h
var_65		= byte ptr -65h
var_64		= byte ptr -64h
var_63		= byte ptr -63h
var_62		= byte ptr -62h
var_61		= byte ptr -61h
var_60		= byte ptr -60h
var_5F		= byte ptr -5Fh
var_4C		= byte ptr -4Ch
var_34		= byte ptr -34h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	ebp, [esp+0BCh+arg_0]
		mov	eax, [ebp+58h]
		mov	eax, [eax+374h]
		mov	[esp+0BCh+var_98], eax
		test	eax, eax
		jz	short loc_6E410F00
		mov	[esp+0BCh+var_98], 1

loc_6E410EEA:				; CODE XREF: sub_6E410EC0+ABj
					; sub_6E410EC0+4D3j ...
		mov	eax, [esp+0BCh+var_98]
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E410F00:				; CODE XREF: sub_6E410EC0+20j
		mov	eax, [ebp+0C0h]
		lea	edx, [esp+0BCh+var_74]
		mov	[esp+0BCh+var_A8], edx
		mov	[esp+0BCh+var_AC], 0
		mov	[esp+0BCh+var_B0], 0
		lea	edx, [esp+0BCh+var_78]
		mov	[esp+0BCh+var_B4], edx
		lea	edx, [esp+0BCh+var_7C]
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_BC], eax
		call	sub_6E43B840
		test	eax, eax
		jz	loc_6E411320
		mov	eax, [ebp+58h]
		mov	edx, [esp+0BCh+var_7C]
		mov	[eax+37Ch], edx
		mov	edx, [esp+0BCh+var_78]
		mov	[eax+380h], edx
		mov	ecx, [esp+0BCh+var_74]
		mov	[eax+38Ch], ecx
		mov	[esp+0BCh+var_BC], edx
		call	EVP_MD_size
		mov	ebx, eax
		test	eax, eax
		js	loc_6E410EEA
		mov	eax, [esp+0BCh+var_7C]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_CIPHER_key_length
		add	ebx, eax
		mov	eax, [esp+0BCh+var_7C]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_CIPHER_iv_length
		add	eax, ebx
		add	eax, eax
		mov	[esp+0BCh+var_9C], eax
		mov	eax, [ebp+58h]
		mov	edx, [eax+378h]
		test	edx, edx
		jz	short loc_6E410FD0
		mov	eax, [eax+374h]
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], edx
		call	OPENSSL_cleanse
		mov	eax, [ebp+58h]
		mov	eax, [eax+378h]
		mov	[esp+0BCh+var_BC], eax
		call	CRYPTO_free
		mov	eax, [ebp+58h]
		mov	dword ptr [eax+378h], 0

loc_6E410FD0:				; CODE XREF: sub_6E410EC0+DEj
		mov	dword ptr [eax+374h], 0
		mov	[esp+0BCh+var_B4], 1ABh
		mov	[esp+0BCh+var_B8], offset aS3_enc_c ; "s3_enc.c"
		mov	esi, [esp+0BCh+var_9C]
		mov	[esp+0BCh+var_BC], esi
		call	CRYPTO_malloc
		mov	edi, eax
		mov	[esp+0BCh+var_88], eax
		test	eax, eax
		jz	loc_6E411460
		mov	eax, [ebp+58h]
		mov	[eax+374h], esi
		mov	[eax+378h], edi
		lea	eax, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_MD_CTX_init
		mov	[esp+0BCh+var_B8], 8
		lea	eax, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_MD_CTX_set_flags
		lea	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_MD_CTX_init
		test	esi, esi
		jle	loc_6E411491
		mov	[esp+0BCh+var_70], 41h
		mov	edx, 1
		mov	[esp+0BCh+var_A0], 0
		lea	eax, [esp+0BCh+var_60]
		mov	[esp+0BCh+var_8C], eax
		mov	eax, [esp+0BCh+var_9C]
		add	eax, 10h
		mov	[esp+0BCh+var_80], eax
		mov	ebx, edx
		jmp	loc_6E411188
; ---------------------------------------------------------------------------
		align 10h

loc_6E411080:				; CODE XREF: sub_6E410EC0+400j
		mov	[esp+0BCh+var_84], edx
		mov	[esp+0BCh+var_B4], 0
		mov	esi, [esp+0BCh+var_8C]
		mov	[esp+0BCh+var_B8], esi
		lea	eax, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestFinal_ex
		mov	eax, [esp+0BCh+var_80]
		sub	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_90], eax
		mov	[esp+0BCh+var_94], edi
		cmp	eax, 4
		mov	edx, [esp+0BCh+var_84]
		jnb	loc_6E4112F0

loc_6E4110BD:				; CODE XREF: sub_6E410EC0+458j
		xor	ecx, ecx
		test	byte ptr [esp+0BCh+var_90], 2
		jz	short loc_6E4110D5
		mov	cx, [esi]
		mov	eax, [esp+0BCh+var_94]
		mov	[eax], cx
		mov	ecx, 2

loc_6E4110D5:				; CODE XREF: sub_6E410EC0+204j
		test	byte ptr [esp+0BCh+var_90], 1
		jz	short loc_6E4110EA
		mov	al, [esi+ecx]
		mov	byte ptr [esp+0BCh+var_90], al
		mov	edi, [esp+0BCh+var_94]
		mov	[edi+ecx], al

loc_6E4110EA:				; CODE XREF: sub_6E410EC0+21Aj
					; sub_6E410EC0+426j
		mov	eax, [esp+0BCh+var_A0]
		cmp	[esp+0BCh+var_9C], eax
		jle	loc_6E4113E0
		inc	ebx
		cmp	ebx, 11h
		jz	loc_6E411360
		mov	[esp+0BCh+var_70], dl
		mov	[esp+0BCh+var_6F], dl
		cmp	ebx, 2
		jz	short loc_6E411188
		mov	[esp+0BCh+var_6E], dl
		cmp	ebx, 3
		jz	short loc_6E411188
		mov	[esp+0BCh+var_6D], dl
		cmp	ebx, 4
		jz	short loc_6E411188
		mov	[esp+0BCh+var_6C], dl
		cmp	ebx, 5
		jz	short loc_6E411188
		mov	[esp+0BCh+var_6B], dl
		cmp	ebx, 6
		jz	short loc_6E411188
		mov	[esp+0BCh+var_6A], dl
		cmp	ebx, 7
		jz	short loc_6E411188
		mov	[esp+0BCh+var_69], dl
		cmp	ebx, 8
		jz	short loc_6E411188
		mov	[esp+0BCh+var_68], dl
		cmp	ebx, 9
		jz	short loc_6E411188
		mov	[esp+0BCh+var_67], dl
		cmp	ebx, 0Ah
		jz	short loc_6E411188
		mov	[esp+0BCh+var_66], dl
		cmp	ebx, 0Bh
		jz	short loc_6E411188
		mov	[esp+0BCh+var_65], dl
		cmp	ebx, 0Ch
		jz	short loc_6E411188
		mov	[esp+0BCh+var_64], dl
		cmp	ebx, 0Dh
		jz	short loc_6E411188
		mov	[esp+0BCh+var_63], dl
		cmp	ebx, 0Eh
		jz	short loc_6E411188
		mov	[esp+0BCh+var_62], dl
		cmp	ebx, 10h
		jnz	short loc_6E411188
		mov	[esp+0BCh+var_61], dl

loc_6E411188:				; CODE XREF: sub_6E410EC0+1B1j
					; sub_6E410EC0+24Dj ...
		mov	edi, [esp+0BCh+var_88]
		add	edi, [esp+0BCh+var_A0]
		lea	edx, [ebx+41h]
		mov	[esp+0BCh+var_94], edx
		call	EVP_sha1
		mov	[esp+0BCh+var_B4], 0
		mov	[esp+0BCh+var_B8], eax
		lea	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestInit_ex
		mov	[esp+0BCh+var_B4], ebx
		lea	eax, [esp+0BCh+var_70]
		mov	[esp+0BCh+var_B8], eax
		lea	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestUpdate
		mov	eax, [ebp+0C0h]
		mov	ecx, [eax+10h]
		mov	[esp+0BCh+var_B4], ecx
		add	eax, 14h
		mov	[esp+0BCh+var_B8], eax
		lea	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestUpdate
		mov	[esp+0BCh+var_B4], 20h
		mov	eax, [ebp+58h]
		add	eax, 0A0h
		mov	[esp+0BCh+var_B8], eax
		lea	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestUpdate
		mov	[esp+0BCh+var_B4], 20h
		mov	eax, [ebp+58h]
		add	eax, 0C0h
		mov	[esp+0BCh+var_B8], eax
		lea	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestUpdate
		mov	[esp+0BCh+var_B4], 0
		mov	esi, [esp+0BCh+var_8C]
		mov	[esp+0BCh+var_B8], esi
		lea	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestFinal_ex
		call	EVP_md5
		mov	[esp+0BCh+var_B4], 0
		mov	[esp+0BCh+var_B8], eax
		lea	eax, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestInit_ex
		mov	eax, [ebp+0C0h]
		mov	ecx, [eax+10h]
		mov	[esp+0BCh+var_B4], ecx
		add	eax, 14h
		mov	[esp+0BCh+var_B8], eax
		lea	eax, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestUpdate
		mov	[esp+0BCh+var_B4], 14h
		mov	[esp+0BCh+var_B8], esi
		lea	eax, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestUpdate
		add	[esp+0BCh+var_A0], 10h
		mov	eax, [esp+0BCh+var_A0]
		cmp	[esp+0BCh+var_9C], eax
		mov	edx, [esp+0BCh+var_94]
		jl	loc_6E411080
		mov	[esp+0BCh+var_94], edx
		mov	[esp+0BCh+var_B4], 0
		mov	[esp+0BCh+var_B8], edi
		lea	eax, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_DigestFinal_ex
		mov	edx, [esp+0BCh+var_94]
		jmp	loc_6E4110EA
; ---------------------------------------------------------------------------
		align 10h

loc_6E4112F0:				; CODE XREF: sub_6E410EC0+1F7j
		test	edi, 1
		jnz	loc_6E411440

loc_6E4112FC:				; CODE XREF: sub_6E410EC0+598j
		test	byte ptr [esp+0BCh+var_94], 2
		jnz	loc_6E411420

loc_6E411307:				; CODE XREF: sub_6E410EC0+577j
		mov	ecx, [esp+0BCh+var_90]
		shr	ecx, 2
		mov	edi, [esp+0BCh+var_94]
		rep movsd
		mov	[esp+0BCh+var_94], edi
		jmp	loc_6E4110BD
; ---------------------------------------------------------------------------
		align 10h

loc_6E411320:				; CODE XREF: sub_6E410EC0+78j
		mov	[esp+0BCh+var_AC], 196h
		mov	[esp+0BCh+var_B0], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0BCh+var_B4], 8Ah
		mov	[esp+0BCh+var_B8], 9Dh
		mov	[esp+0BCh+var_BC], 14h
		call	ERR_put_error
		mov	eax, [esp+0BCh+var_98]
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E411360:				; CODE XREF: sub_6E410EC0+23Cj
		mov	[esp+0BCh+var_AC], 0B6h
		mov	[esp+0BCh+var_B0], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0BCh+var_B4], 44h
		mov	[esp+0BCh+var_B8], 0EEh
		mov	[esp+0BCh+var_BC], 14h
		call	ERR_put_error

loc_6E41138C:				; CODE XREF: sub_6E410EC0+557j
		test	byte ptr [ebp+101h], 8
		jnz	loc_6E410EEA
		mov	edx, [ebp+58h]
		mov	dword ptr [edx+0E0h], 1
		mov	eax, [ebp+0C0h]
		mov	eax, [eax+0B4h]
		test	eax, eax
		jz	loc_6E410EEA
		mov	eax, [eax+14h]
		cmp	eax, 20h
		jz	short loc_6E4113CB
		cmp	eax, 4
		jnz	loc_6E410EEA

loc_6E4113CB:				; CODE XREF: sub_6E410EC0+500j
		mov	dword ptr [edx+0E0h], 0
		jmp	loc_6E410EEA
; ---------------------------------------------------------------------------
		align 10h

loc_6E4113E0:				; CODE XREF: sub_6E410EC0+232j
		mov	eax, [esp+0BCh+var_8C]

loc_6E4113E4:				; CODE XREF: sub_6E410EC0+5D9j
		mov	[esp+0BCh+var_B8], 14h
		mov	[esp+0BCh+var_BC], eax
		call	OPENSSL_cleanse
		lea	eax, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_MD_CTX_cleanup
		lea	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_MD_CTX_cleanup
		mov	[esp+0BCh+var_98], 1
		jmp	loc_6E41138C
; ---------------------------------------------------------------------------
		align 10h

loc_6E411420:				; CODE XREF: sub_6E410EC0+441j
		mov	cx, [esi]
		mov	eax, [esp+0BCh+var_94]
		mov	[eax], cx
		add	[esp+0BCh+var_94], 2
		add	esi, 2
		sub	[esp+0BCh+var_90], 2
		jmp	loc_6E411307
; ---------------------------------------------------------------------------
		align 10h

loc_6E411440:				; CODE XREF: sub_6E410EC0+436j
		mov	eax, [esp+0BCh+var_8C]
		mov	al, [eax]
		mov	byte ptr [esp+0BCh+var_84], al
		mov	[edi], al
		inc	[esp+0BCh+var_94]
		lea	esi, [esp+0BCh+var_5F]
		dec	[esp+0BCh+var_90]
		jmp	loc_6E4112FC
; ---------------------------------------------------------------------------
		align 10h

loc_6E411460:				; CODE XREF: sub_6E410EC0+13Ej
		mov	[esp+0BCh+var_AC], 1C8h
		mov	[esp+0BCh+var_B0], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+0BCh+var_B4], 41h
		mov	[esp+0BCh+var_B8], 9Dh
		mov	[esp+0BCh+var_BC], 14h
		call	ERR_put_error
		jmp	loc_6E410EEA
; ---------------------------------------------------------------------------

loc_6E411491:				; CODE XREF: sub_6E410EC0+184j
		lea	eax, [esp+0BCh+var_60]
		mov	[esp+0BCh+var_8C], eax
		jmp	loc_6E4113E4
sub_6E410EC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4114A0	proc near		; CODE XREF: sub_6E406650+6DCp
					; sub_6E40D250+3B8p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	edx, [eax+378h]
		test	edx, edx
		jz	short loc_6E4114E5
		mov	eax, [eax+374h]
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], edx
		call	OPENSSL_cleanse
		mov	eax, [ebx+58h]
		mov	eax, [eax+378h]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+378h], 0

loc_6E4114E5:				; CODE XREF: sub_6E4114A0+13j
		mov	dword ptr [eax+374h], 0
		add	esp, 18h
		pop	ebx
		retn
sub_6E4114A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E411500	proc near		; DATA XREF: .data:off_6E448000o

Dst		= dword	ptr -3Ch
Src		= dword	ptr -38h
Size		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_4]
		test	eax, eax
		jz	loc_6E411600
		mov	esi, [ebp+8Ch]
		mov	eax, [ebp+58h]
		lea	ebx, [eax+130h]
		test	esi, esi
		jz	loc_6E411617

loc_6E41152E:				; CODE XREF: sub_6E411500+111j
		mov	[esp+3Ch+Dst], esi
		call	EVP_CIPHER_CTX_cipher
		cmp	dword ptr [ebp+0C0h], 0
		jz	loc_6E411617
		test	eax, eax
		jz	loc_6E411617
		mov	eax, [ebx+4]
		mov	[esp+3Ch+var_28], eax
		mov	eax, [esi]
		mov	[esp+3Ch+Dst], eax
		call	EVP_CIPHER_block_size
		mov	[esp+3Ch+var_24], eax
		dec	eax
		jz	loc_6E411660
		mov	edi, [esp+3Ch+arg_4]
		test	edi, edi
		jnz	loc_6E4116A0

loc_6E411573:				; CODE XREF: sub_6E411500+166j
		mov	eax, [esp+3Ch+var_28]
		test	eax, eax
		jz	loc_6E411650
		xor	edx, edx
		div	[esp+3Ch+var_24]
		test	edx, edx
		jnz	loc_6E411650

loc_6E41158D:				; CODE XREF: sub_6E411500+16Cj
					; sub_6E411500+1ECj
		mov	edx, [ebx+10h]
		mov	eax, [ebx+0Ch]
		mov	edi, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_30], edi
		mov	[esp+3Ch+Size],	edx
		mov	[esp+3Ch+Src], eax
		mov	[esp+3Ch+Dst], esi
		call	EVP_Cipher
		test	eax, eax
		jle	loc_6E411730
		mov	eax, [ebp+84h]
		mov	[esp+3Ch+Dst], eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E411700
		mov	eax, [ebp+84h]
		mov	[esp+3Ch+Dst], eax
		call	EVP_MD_CTX_md
		mov	[esp+3Ch+Dst], eax
		call	EVP_MD_size

loc_6E4115DF:				; CODE XREF: sub_6E411500+202j
		cmp	[esp+3Ch+var_24], 1
		jz	short loc_6E4115F2
		mov	edx, [esp+3Ch+arg_4]
		test	edx, edx
		jz	loc_6E411680

loc_6E4115F2:				; CODE XREF: sub_6E411500+E4j
		mov	eax, 1

loc_6E4115F7:				; CODE XREF: sub_6E411500+235j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E411600:				; CODE XREF: sub_6E411500+11j
		mov	esi, [ebp+80h]
		mov	eax, [ebp+58h]
		lea	ebx, [eax+10Ch]
		test	esi, esi
		jnz	loc_6E41152E

loc_6E411617:				; CODE XREF: sub_6E411500+28j
					; sub_6E411500+3Dj ...
		mov	ecx, [ebx+4]
		mov	edx, [ebx+10h]
		mov	eax, [ebx+0Ch]
		mov	[esp+3Ch+Size],	ecx ; Size
		mov	[esp+3Ch+Src], edx ; Src
		mov	[esp+3Ch+Dst], eax ; Dst
		call	memmove
		mov	eax, [ebx+0Ch]
		mov	[ebx+10h], eax
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E411650:				; CODE XREF: sub_6E411500+79j
					; sub_6E411500+87j
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E411660:				; CODE XREF: sub_6E411500+61j
		mov	ecx, [esp+3Ch+arg_4]
		test	ecx, ecx
		jz	loc_6E411573
		jmp	loc_6E41158D
; ---------------------------------------------------------------------------
		jmp	short loc_6E411680
; ---------------------------------------------------------------------------
		align 10h

loc_6E411680:				; CODE XREF: sub_6E411500+ECj
					; sub_6E411500+171j
		mov	[esp+3Ch+var_30], eax
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+Size],	eax
		mov	[esp+3Ch+Src], ebx
		mov	[esp+3Ch+Dst], ebp
		call	sub_6E417430
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E4116A0:				; CODE XREF: sub_6E411500+6Dj
		mov	eax, [esp+3Ch+var_28]
		mov	ecx, [esp+3Ch+var_24]
		cdq
		idiv	ecx
		mov	eax, ecx
		sub	eax, edx
		mov	edx, eax
		add	[esp+3Ch+var_28], eax
		mov	edi, [ebx+10h]
		mov	[esp+3Ch+var_20], eax
		add	edi, [ebx+4]
		cmp	eax, 4
		jnb	short loc_6E411710

loc_6E4116C4:				; CODE XREF: sub_6E411500+22Bj
		test	byte ptr [esp+3Ch+var_20], 2
		jz	short loc_6E4116D3
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E4116D3:				; CODE XREF: sub_6E411500+1C9j
		test	byte ptr [esp+3Ch+var_20], 1
		jz	short loc_6E4116DD
		mov	byte ptr [edi],	0

loc_6E4116DD:				; CODE XREF: sub_6E411500+1D8j
		add	[ebx+4], edx
		mov	eax, [ebx+10h]
		dec	edx
		mov	ecx, [esp+3Ch+var_28]
		mov	[eax+ecx-1], dl
		jmp	loc_6E41158D
; ---------------------------------------------------------------------------
		jmp	short loc_6E411700
; ---------------------------------------------------------------------------
		align 10h

loc_6E411700:				; CODE XREF: sub_6E411500+C3j
					; sub_6E411500+1F1j
		xor	eax, eax
		jmp	loc_6E4115DF
; ---------------------------------------------------------------------------
		align 10h

loc_6E411710:				; CODE XREF: sub_6E411500+1C2j
		test	edi, 1
		jnz	short loc_6E411749

loc_6E411718:				; CODE XREF: sub_6E411500+254j
		test	edi, 2
		jnz	short loc_6E41173A

loc_6E411720:				; CODE XREF: sub_6E411500+247j
		mov	ecx, [esp+3Ch+var_20]
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	short loc_6E4116C4
; ---------------------------------------------------------------------------
		align 10h

loc_6E411730:				; CODE XREF: sub_6E411500+ADj
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4115F7
; ---------------------------------------------------------------------------

loc_6E41173A:				; CODE XREF: sub_6E411500+21Ej
		mov	word ptr [edi],	0
		add	edi, 2
		sub	[esp+3Ch+var_20], 2
		jmp	short loc_6E411720
; ---------------------------------------------------------------------------

loc_6E411749:				; CODE XREF: sub_6E411500+216j
		mov	byte ptr [edi],	0
		inc	edi
		lea	eax, [eax-1]
		mov	[esp+3Ch+var_20], eax
		jmp	short loc_6E411718
sub_6E411500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E411760	proc near		; CODE XREF: sub_6E406650+6ABp
					; sub_6E406650+7DFp ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		mov	ebx, [esi+58h]
		mov	eax, [ebx+178h]
		test	eax, eax
		jz	short loc_6E411781
		mov	[esp+1Ch+var_1C], eax
		call	BIO_free
		mov	ebx, [esi+58h]

loc_6E411781:				; CODE XREF: sub_6E411760+14j
		mov	edx, [ebx+17Ch]
		test	edx, edx
		jz	short loc_6E4117C5
		xor	ebx, ebx
		lea	esi, [esi+0]

loc_6E411790:				; CODE XREF: sub_6E411760+4Ej
		mov	eax, [edx+ebx]
		test	eax, eax
		jz	short loc_6E4117A8
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy
		mov	eax, [esi+58h]
		mov	edx, [eax+17Ch]

loc_6E4117A8:				; CODE XREF: sub_6E411760+35j
		add	ebx, 4
		cmp	ebx, 18h
		jnz	short loc_6E411790
		mov	[esp+1Ch+var_1C], edx
		call	CRYPTO_free
		mov	ebx, [esi+58h]
		mov	dword ptr [ebx+17Ch], 0

loc_6E4117C5:				; CODE XREF: sub_6E411760+29j
		call	BIO_s_mem
		mov	[esp+1Ch+var_1C], eax
		call	BIO_new
		mov	[ebx+178h], eax
		mov	eax, [esi+58h]
		mov	eax, [eax+178h]
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 1
		mov	[esp+1Ch+var_18], 9
		mov	[esp+1Ch+var_1C], eax
		call	BIO_ctrl
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_6E411760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E411810	proc near		; CODE XREF: sub_6E40E530+CEp
					; sub_6E40E640+F0p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		mov	eax, [esi+58h]
		mov	edx, [eax+17Ch]
		test	edx, edx
		jz	short loc_6E411865
		xor	ebx, ebx
		nop
		lea	esi, [esi+0]

loc_6E411830:				; CODE XREF: sub_6E411810+3Ej
		mov	eax, [edx+ebx]
		test	eax, eax
		jz	short loc_6E411848
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy
		mov	eax, [esi+58h]
		mov	edx, [eax+17Ch]

loc_6E411848:				; CODE XREF: sub_6E411810+25j
		add	ebx, 4
		cmp	ebx, 18h
		jnz	short loc_6E411830
		mov	[esp+1Ch+var_1C], edx
		call	CRYPTO_free
		mov	eax, [esi+58h]
		mov	dword ptr [eax+17Ch], 0

loc_6E411865:				; CODE XREF: sub_6E411810+14j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_6E411810	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E411870	proc near		; CODE XREF: sub_6E4157D0+D8p
					; sub_6E4158D0+56p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	ebp, [esp+2Ch+arg_8]
		mov	eax, [esi+58h]
		mov	edx, [eax+178h]
		test	edx, edx
		jz	short loc_6E411895
		test	byte ptr [eax],	20h
		jz	short loc_6E4118D0

loc_6E411895:				; CODE XREF: sub_6E411870+1Ej
		xor	ebx, ebx
		jmp	short loc_6E4118A3
; ---------------------------------------------------------------------------
		align 10h

loc_6E4118A0:				; CODE XREF: sub_6E411870+56j
		mov	eax, [esi+58h]

loc_6E4118A3:				; CODE XREF: sub_6E411870+27j
		mov	eax, [eax+17Ch]
		mov	eax, [eax+ebx]
		test	eax, eax
		jz	short loc_6E4118C0
		mov	[esp+2Ch+var_24], ebp
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], eax
		call	EVP_DigestUpdate

loc_6E4118C0:				; CODE XREF: sub_6E411870+3Ej
		add	ebx, 4
		cmp	ebx, 18h
		jnz	short loc_6E4118A0
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E4118D0:				; CODE XREF: sub_6E411870+23j
		mov	[esp+2Ch+arg_8], ebp
		mov	[esp+2Ch+arg_4], edi
		mov	[esp+2Ch+arg_0], edx
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	BIO_write
sub_6E411870	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4118F0	proc near		; CODE XREF: sub_6E401670+946p
					; sub_6E4055A0+519p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [esp+4Ch+arg_0]
		mov	ebx, [esi+58h]
		mov	edx, [ebx+17Ch]
		test	edx, edx
		jz	short loc_6E411945
		xor	ebx, ebx
		lea	esi, [esi+0]

loc_6E411910:				; CODE XREF: sub_6E4118F0+3Ej
		mov	eax, [edx+ebx]
		test	eax, eax
		jz	short loc_6E411928
		mov	[esp+4Ch+var_4C], eax
		call	EVP_MD_CTX_destroy
		mov	eax, [esi+58h]
		mov	edx, [eax+17Ch]

loc_6E411928:				; CODE XREF: sub_6E4118F0+25j
		add	ebx, 4
		cmp	ebx, 18h
		jnz	short loc_6E411910
		mov	[esp+4Ch+var_4C], edx
		call	CRYPTO_free
		mov	ebx, [esi+58h]
		mov	dword ptr [ebx+17Ch], 0

loc_6E411945:				; CODE XREF: sub_6E4118F0+16j
		mov	[esp+4Ch+var_44], 250h
		mov	[esp+4Ch+var_48], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+4Ch+var_4C], 18h
		call	CRYPTO_malloc
		mov	[ebx+17Ch], eax
		mov	eax, [esi+58h]
		mov	edi, [eax+17Ch]
		mov	edx, 18h
		test	edi, 1
		jnz	loc_6E411AF8

loc_6E411981:				; CODE XREF: sub_6E4118F0+20Ej
		test	edi, 2
		jnz	loc_6E411AE8

loc_6E41198D:				; CODE XREF: sub_6E4118F0+203j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jz	short loc_6E4119A3
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E4119A3:				; CODE XREF: sub_6E4118F0+A9j
		and	edx, 1
		jz	short loc_6E4119AB
		mov	byte ptr [edi],	0

loc_6E4119AB:				; CODE XREF: sub_6E4118F0+B6j
		mov	eax, [esi+58h]
		mov	eax, [eax+178h]
		lea	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 3
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		mov	[esp+4Ch+var_30], eax
		test	eax, eax
		jle	loc_6E411B03
		xor	ebx, ebx
		xor	edi, edi
		lea	ebp, [esp+4Ch+var_28]
		jmp	short loc_6E411A5F
; ---------------------------------------------------------------------------
		align 10h

loc_6E4119F0:				; CODE XREF: sub_6E4118F0+196j
		mov	edx, [esp+4Ch+var_24]
		test	edx, edx
		jz	loc_6E411A8C
		mov	ecx, [eax+17Ch]
		add	ecx, ebx
		mov	[esp+4Ch+var_34], ecx
		call	EVP_MD_CTX_create
		mov	ecx, [esp+4Ch+var_34]
		mov	[ecx], eax
		mov	eax, [esi+58h]
		mov	eax, [eax+17Ch]
		mov	eax, [eax+ebx]
		mov	[esp+4Ch+var_44], 0
		mov	edx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		call	EVP_DigestInit_ex
		mov	eax, [esi+58h]
		mov	eax, [eax+17Ch]
		mov	eax, [eax+ebx]
		mov	ecx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_44], ecx
		mov	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		call	EVP_DigestUpdate

loc_6E411A5B:				; CODE XREF: sub_6E4118F0+1A9j
		inc	edi
		add	ebx, 4

loc_6E411A5F:				; CODE XREF: sub_6E4118F0+F8j
		lea	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], edi
		call	sub_6E43BC20
		test	eax, eax
		jz	short loc_6E411AA0
		mov	[esp+4Ch+var_4C], esi
		call	sub_6E4106A0
		test	[esp+4Ch+var_28], eax
		mov	eax, [esi+58h]
		jnz	loc_6E4119F0

loc_6E411A8C:				; CODE XREF: sub_6E4118F0+106j
		mov	eax, [eax+17Ch]
		mov	dword ptr [eax+ebx], 0
		jmp	short loc_6E411A5B
; ---------------------------------------------------------------------------
		align 10h

loc_6E411AA0:				; CODE XREF: sub_6E4118F0+185j
		mov	eax, [esi+58h]
		test	byte ptr [eax],	20h
		jz	short loc_6E411AC0
		mov	eax, 1

loc_6E411AAD:				; CODE XREF: sub_6E4118F0+241j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E411AC0:				; CODE XREF: sub_6E4118F0+1B6j
		mov	eax, [eax+178h]
		mov	[esp+4Ch+var_4C], eax
		call	BIO_free
		mov	eax, [esi+58h]
		mov	dword ptr [eax+178h], 0
		mov	eax, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E411AE8:				; CODE XREF: sub_6E4118F0+97j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E41198D
; ---------------------------------------------------------------------------

loc_6E411AF8:				; CODE XREF: sub_6E4118F0+8Bj
		mov	byte ptr [edi],	0
		inc	edi
		mov	dl, 17h
		jmp	loc_6E411981
; ---------------------------------------------------------------------------

loc_6E411B03:				; CODE XREF: sub_6E4118F0+EAj
		mov	[esp+4Ch+var_3C], 254h
		mov	[esp+4Ch+var_40], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+4Ch+var_44], 14Ch
		mov	[esp+4Ch+var_48], 125h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E411AAD
sub_6E4118F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E411B40	proc near		; CODE XREF: sub_6E411DD0+1Aj
					; sub_6E411DF0+22p ...

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_5C		= byte ptr -5Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	esi, eax
		mov	edi, edx
		mov	ebp, ecx
		mov	eax, [eax+58h]
		mov	edx, [eax+178h]
		test	edx, edx
		jz	loc_6E411BF0
		mov	[esp+9Ch+var_9C], esi
		call	sub_6E4118F0
		test	eax, eax
		jz	short loc_6E411BE0
		mov	[esp+9Ch+var_78], 0
		mov	eax, [esi+58h]

loc_6E411B78:				; CODE XREF: sub_6E411B40+B8j
		xor	ebx, ebx
		jmp	short loc_6E411B83
; ---------------------------------------------------------------------------
		align 10h

loc_6E411B80:				; CODE XREF: sub_6E411B40+72j
		mov	eax, [esi+58h]

loc_6E411B83:				; CODE XREF: sub_6E411B40+3Aj
		mov	eax, [eax+17Ch]
		mov	eax, [eax+ebx*4]
		test	eax, eax
		jz	short loc_6E411BA4
		mov	[esp+9Ch+var_9C], eax
		call	EVP_MD_CTX_md
		mov	[esp+9Ch+var_9C], eax
		call	EVP_MD_type
		cmp	eax, edi
		jz	short loc_6E411C00

loc_6E411BA4:				; CODE XREF: sub_6E411B40+4Ej
		mov	eax, [esp+9Ch+var_78]
		lea	ebx, [eax+1]
		mov	[esp+9Ch+var_78], ebx
		cmp	ebx, 5
		jbe	short loc_6E411B80

loc_6E411BB4:				; CODE XREF: sub_6E411B40+D2j
		mov	[esp+9Ch+var_8C], 2A0h
		mov	[esp+9Ch+var_90], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+9Ch+var_94], 144h
		mov	[esp+9Ch+var_98], 11Dh
		mov	[esp+9Ch+var_9C], 14h
		call	ERR_put_error

loc_6E411BE0:				; CODE XREF: sub_6E411B40+2Bj
					; sub_6E411B40+110j
		xor	eax, eax
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E411BF0:				; CODE XREF: sub_6E411B40+1Bj
		mov	[esp+9Ch+var_78], 0
		jmp	loc_6E411B78
; ---------------------------------------------------------------------------
		align 10h

loc_6E411C00:				; CODE XREF: sub_6E411B40+62j
		mov	eax, [esi+58h]
		mov	eax, [eax+17Ch]
		mov	edx, [esp+9Ch+var_78]
		mov	edi, [eax+edx*4]
		test	edi, edi
		jz	short loc_6E411BB4
		lea	ebx, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_MD_CTX_init
		mov	[esp+9Ch+var_98], 8
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_MD_CTX_set_flags
		mov	[esp+9Ch+var_98], edi
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_MD_CTX_copy_ex
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_MD_CTX_md
		mov	[esp+9Ch+var_9C], eax
		call	EVP_MD_size
		mov	edi, eax
		test	eax, eax
		js	short loc_6E411BE0
		test	ebp, ebp
		jz	short loc_6E411C75
		mov	eax, [esp+9Ch+arg_0]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], ebp
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E411D80

loc_6E411C75:				; CODE XREF: sub_6E411B40+114j
		mov	eax, [esi+0C0h]
		mov	edx, [eax+10h]
		mov	[esp+9Ch+var_94], edx
		add	eax, 14h
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E411D80
		mov	eax, 30h
		cdq
		idiv	edi
		mov	ebp, eax
		imul	ebp, edi
		mov	[esp+9Ch+var_94], ebp
		mov	[esp+9Ch+var_98], offset a66666666666666 ; "666666666666666666666666666666666666666"...
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E411D80
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_94], eax
		lea	edi, [esp+9Ch+var_5C]
		mov	[esp+9Ch+var_98], edi
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_DigestFinal_ex
		test	eax, eax
		jle	loc_6E411D80
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_MD_CTX_md
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_DigestInit_ex
		test	eax, eax
		jle	short loc_6E411D80
		mov	eax, [esi+0C0h]
		mov	edx, [eax+10h]
		mov	[esp+9Ch+var_94], edx
		add	eax, 14h
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	short loc_6E411D80
		mov	[esp+9Ch+var_94], ebp
		mov	[esp+9Ch+var_98], offset asc_6E4497C0 ;	"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"...
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	short loc_6E411D80
		mov	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], edi
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	short loc_6E411D80
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+var_94], eax
		mov	eax, [esp+9Ch+arg_4]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_DigestFinal_ex
		test	eax, eax
		jg	short loc_6E411DB4
		jmp	short loc_6E411D80
; ---------------------------------------------------------------------------
		align 10h

loc_6E411D80:				; CODE XREF: sub_6E411B40+12Fj
					; sub_6E411B40+153j ...
		mov	[esp+9Ch+var_8C], 2B7h
		mov	[esp+9Ch+var_90], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+9Ch+var_94], 44h
		mov	[esp+9Ch+var_98], 11Dh
		mov	[esp+9Ch+var_9C], 14h
		call	ERR_put_error
		mov	[esp+9Ch+var_7C], 0

loc_6E411DB4:				; CODE XREF: sub_6E411B40+22Fj
		mov	[esp+9Ch+var_9C], ebx
		call	EVP_MD_CTX_cleanup
		mov	eax, [esp+9Ch+var_7C]
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6E411B40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E411DD0	proc near		; DATA XREF: .data:6E44801Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	ecx, [esp+arg_8]
		mov	[esp+arg_4], ecx
		mov	[esp+arg_0], 0
		xor	ecx, ecx
		jmp	sub_6E411B40
sub_6E411DD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E411DF0	proc near		; DATA XREF: .data:6E448014o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [esp+1Ch+arg_8]
		mov	edi, [esp+1Ch+arg_C]
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], esi
		mov	ecx, [esp+1Ch+arg_4]
		mov	edx, 4
		mov	eax, [esp+1Ch+arg_0]
		call	sub_6E411B40
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_6E411E30

loc_6E411E1D:				; CODE XREF: sub_6E411DF0+5Dj
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E411E30:				; CODE XREF: sub_6E411DF0+2Bj
		add	edi, eax
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], esi
		mov	ecx, [esp+1Ch+arg_4]
		mov	edx, 40h
		mov	eax, [esp+1Ch+arg_0]
		call	sub_6E411B40
		test	eax, eax
		jz	short loc_6E411E1D
		add	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_6E411DF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E411E60	proc near		; DATA XREF: .data:6E448004o

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_71		= byte ptr -71h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= byte ptr -68h
var_60		= byte ptr -60h
var_5F		= byte ptr -5Fh
var_5E		= byte ptr -5Eh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	esi, [esp+0CCh+arg_0]
		mov	ebx, [esp+0CCh+arg_8]
		mov	ebp, [esi+58h]
		test	ebx, ebx
		jz	loc_6E412100
		lea	eax, [ebp+130h]
		mov	[esp+0CCh+var_98], eax
		lea	eax, [ebp+60h]
		mov	[esp+0CCh+var_94], eax
		add	ebp, 54h
		mov	eax, [esi+90h]
		mov	[esp+0CCh+var_9C], eax

loc_6E411EA1:				; CODE XREF: sub_6E411E60+2BEj
		mov	[esp+0CCh+var_CC], eax
		call	EVP_MD_CTX_md
		mov	[esp+0CCh+var_CC], eax
		call	EVP_MD_size
		mov	edi, eax
		mov	[esp+0CCh+var_8C], eax
		test	eax, eax
		js	loc_6E412280
		mov	[esp+0CCh+var_70], eax
		mov	eax, 30h
		xor	edx, edx
		div	edi
		imul	eax, edi
		mov	[esp+0CCh+var_90], eax
		mov	eax, [esp+0CCh+var_98]
		mov	ecx, [eax+4]
		mov	[esp+0CCh+var_88], ecx
		mov	ecx, eax
		mov	edx, [eax]
		mov	eax, edx
		and	eax, 0FFh
		mov	[ecx], eax
		test	ebx, ebx
		jz	loc_6E412130

loc_6E411EF3:				; CODE XREF: sub_6E411E60+2EAj
					; sub_6E411E60+302j
		lea	ebx, [esp+0CCh+var_68]
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_MD_CTX_init
		mov	esi, [esp+0CCh+var_98]
		mov	eax, [esi]
		mov	[esp+0CCh+var_71], al
		mov	eax, [esi+4]
		shr	eax, 8
		mov	edx, [esp+0CCh+arg_4]
		mov	[edx], al
		mov	eax, [esi+4]
		mov	[edx+1], al
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_MD_CTX_copy_ex
		test	eax, eax
		jle	loc_6E412290
		mov	eax, [esp+0CCh+var_70]
		mov	[esp+0CCh+var_C4], eax
		mov	esi, [esp+0CCh+var_94]
		mov	[esp+0CCh+var_C8], esi
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412290
		mov	edi, [esp+0CCh+var_90]
		mov	[esp+0CCh+var_C4], edi
		mov	[esp+0CCh+var_C8], offset a66666666666666 ; "666666666666666666666666666666666666666"...
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412290
		mov	[esp+0CCh+var_C4], 8
		mov	[esp+0CCh+var_C8], ebp
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412290
		mov	[esp+0CCh+var_C4], 1
		lea	eax, [esp+0CCh+var_71]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412290
		mov	[esp+0CCh+var_C4], 2
		mov	eax, [esp+0CCh+arg_4]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412290
		mov	eax, [esp+0CCh+var_98]
		mov	edx, [eax+4]
		mov	eax, [eax+10h]
		mov	[esp+0CCh+var_C4], edx
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412290
		mov	[esp+0CCh+var_C4], 0
		mov	eax, [esp+0CCh+arg_4]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestFinal_ex
		test	eax, eax
		jle	loc_6E412290
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_MD_CTX_copy_ex
		test	eax, eax
		jle	loc_6E412290
		mov	eax, [esp+0CCh+var_70]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], esi
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412290
		mov	[esp+0CCh+var_C4], edi
		mov	[esp+0CCh+var_C8], offset asc_6E4497C0 ; "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"...
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412290
		mov	eax, [esp+0CCh+var_70]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_4]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412290
		lea	eax, [esp+0CCh+var_6C]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_4]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestFinal_ex
		test	eax, eax
		jle	loc_6E412290
		mov	eax, [esp+0CCh+var_6C]
		mov	[esp+0CCh+var_70], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_MD_CTX_cleanup

loc_6E4120C0:				; CODE XREF: sub_6E411E60+41Aj
		inc	byte ptr [ebp+7]
		jnz	short loc_6E4120E6
		inc	byte ptr [ebp+6]
		jnz	short loc_6E4120E6
		inc	byte ptr [ebp+5]
		jnz	short loc_6E4120E6
		inc	byte ptr [ebp+4]
		jnz	short loc_6E4120E6
		inc	byte ptr [ebp+3]
		jnz	short loc_6E4120E6
		inc	byte ptr [ebp+2]
		jnz	short loc_6E4120E6
		inc	byte ptr [ebp+1]
		jnz	short loc_6E4120E6
		inc	byte ptr [ebp+0]

loc_6E4120E6:				; CODE XREF: sub_6E411E60+263j
					; sub_6E411E60+268j ...
		mov	eax, [esp+0CCh+var_70]

loc_6E4120EA:				; CODE XREF: sub_6E411E60+425j
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E412100:				; CODE XREF: sub_6E411E60+1Dj
		lea	eax, [ebp+10Ch]
		mov	[esp+0CCh+var_98], eax
		lea	eax, [ebp+14h]
		mov	[esp+0CCh+var_94], eax
		add	ebp, 8
		mov	eax, [esi+84h]
		mov	[esp+0CCh+var_9C], eax
		jmp	loc_6E411EA1
; ---------------------------------------------------------------------------
		align 10h

loc_6E412130:				; CODE XREF: sub_6E411E60+8Dj
		mov	[esp+0CCh+var_84], edx
		mov	eax, [esi+80h]
		mov	[esp+0CCh+var_CC], eax
		call	EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		cmp	eax, 2
		jnz	loc_6E411EF3
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_CC], eax
		call	sub_6E4178F0
		test	al, al
		mov	edx, [esp+0CCh+var_84]
		jz	loc_6E411EF3
		mov	eax, [esp+0CCh+var_70]
		mov	[esp+0CCh+var_84], eax
		lea	ebx, [esp+0CCh+var_68]
		mov	edi, ebx
		mov	esi, [esp+0CCh+var_94]
		cmp	eax, 4
		jb	short loc_6E412186
		mov	ecx, eax
		shr	ecx, 2
		rep movsd

loc_6E412186:				; CODE XREF: sub_6E411E60+31Dj
		xor	ecx, ecx
		test	byte ptr [esp+0CCh+var_84], 2
		jz	short loc_6E41219A
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E41219A:				; CODE XREF: sub_6E411E60+32Dj
		test	byte ptr [esp+0CCh+var_84], 1
		jz	short loc_6E4121AB
		mov	al, [esi+ecx]
		mov	byte ptr [esp+0CCh+var_80], al
		mov	[edi+ecx], al

loc_6E4121AB:				; CODE XREF: sub_6E411E60+33Fj
		mov	eax, [esp+0CCh+var_90]
		mov	[esp+0CCh+var_80], eax
		mov	ecx, [esp+0CCh+var_84]
		lea	edi, [ebx+ecx]
		mov	esi, offset a66666666666666 ; "666666666666666666666666666666666666666"...
		cmp	eax, 4
		jnb	loc_6E4122A8

loc_6E4121C8:				; CODE XREF: sub_6E411E60+461j
		xor	ecx, ecx
		test	byte ptr [esp+0CCh+var_80], 2
		jz	short loc_6E4121DC
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E4121DC:				; CODE XREF: sub_6E411E60+36Fj
		test	byte ptr [esp+0CCh+var_80], 1
		jz	short loc_6E4121ED
		mov	al, [esi+ecx]
		mov	byte ptr [esp+0CCh+var_80], al
		mov	[edi+ecx], al

loc_6E4121ED:				; CODE XREF: sub_6E411E60+381j
		mov	esi, [esp+0CCh+var_90]
		add	esi, [esp+0CCh+var_84]
		lea	ecx, [ebx+esi]
		mov	edi, [ebp+0]
		mov	[ecx], edi
		mov	edi, [ebp+4]
		mov	[ecx+4], edi
		mov	eax, [esp+0CCh+var_98]
		mov	ecx, [eax]
		mov	[esp+esi+0CCh+var_60], cl
		mov	ecx, [eax+4]
		shr	ecx, 8
		mov	[esp+esi+0CCh+var_5F], cl
		mov	ecx, [eax+4]
		mov	[esp+esi+0CCh+var_5E], cl
		mov	ecx, [eax+10h]
		mov	[esp+0CCh+var_A8], 1
		mov	edi, [esp+0CCh+var_84]
		mov	[esp+0CCh+var_AC], edi
		mov	esi, [esp+0CCh+var_94]
		mov	[esp+0CCh+var_B0], esi
		shr	edx, 8
		add	edx, [esp+0CCh+var_88]
		add	edx, [esp+0CCh+var_8C]
		mov	[esp+0CCh+var_B4], edx
		mov	edx, [eax+4]
		add	edx, edi
		mov	[esp+0CCh+var_B8], edx
		mov	[esp+0CCh+var_BC], ecx
		mov	[esp+0CCh+var_C0], ebx
		lea	eax, [esp+0CCh+var_70]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_4]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_CC], eax
		call	sub_6E417930
		test	eax, eax
		jg	loc_6E4120C0

loc_6E412280:				; CODE XREF: sub_6E411E60+59j
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4120EA
; ---------------------------------------------------------------------------
		align 10h

loc_6E412290:				; CODE XREF: sub_6E411E60+D0j
					; sub_6E411E60+F0j ...
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_MD_CTX_cleanup
		mov	eax, 0FFFFFFFFh
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E4122A8:				; CODE XREF: sub_6E411E60+362j
		test	edi, 1
		jnz	short loc_6E4122C6

loc_6E4122B0:				; CODE XREF: sub_6E411E60+47Cj
		test	edi, 2
		jnz	short loc_6E4122DE

loc_6E4122B8:				; CODE XREF: sub_6E411E60+48Fj
		mov	ecx, [esp+0CCh+var_80]
		shr	ecx, 2
		rep movsd
		jmp	loc_6E4121C8
; ---------------------------------------------------------------------------

loc_6E4122C6:				; CODE XREF: sub_6E411E60+44Ej
		mov	al, byte ptr a66666666666666 ; "666666666666666666666666666666666666666"...
		mov	[edi], al
		inc	edi
		mov	esi, (offset a66666666666666+1)	; "666666666666666666666666666666666666666"...
		mov	eax, [esp+0CCh+var_90]
		dec	eax
		mov	[esp+0CCh+var_80], eax
		jmp	short loc_6E4122B0
; ---------------------------------------------------------------------------

loc_6E4122DE:				; CODE XREF: sub_6E411E60+456j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	[esp+0CCh+var_80], 2
		jmp	short loc_6E4122B8
sub_6E411E60	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E412300
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E412300	proc near		; CODE XREF: .text:6E4122F1j
					; sub_6E42A700+235p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	cl, [eax+7]
		lea	edx, [ecx+1]
		mov	[eax+7], dl
		test	dl, dl
		jnz	short locret_6E412361
		mov	cl, [eax+6]
		lea	edx, [ecx+1]
		mov	[eax+6], dl
		test	dl, dl
		jnz	short locret_6E412361
		mov	cl, [eax+5]
		lea	edx, [ecx+1]
		mov	[eax+5], dl
		test	dl, dl
		jnz	short locret_6E412361
		mov	cl, [eax+4]
		lea	edx, [ecx+1]
		mov	[eax+4], dl
		test	dl, dl
		jnz	short locret_6E412361
		mov	cl, [eax+3]
		lea	edx, [ecx+1]
		mov	[eax+3], dl
		test	dl, dl
		jnz	short locret_6E412361
		mov	cl, [eax+2]
		lea	edx, [ecx+1]
		mov	[eax+2], dl
		test	dl, dl
		jnz	short locret_6E412361
		mov	cl, [eax+1]
		lea	edx, [ecx+1]
		mov	[eax+1], dl
		test	dl, dl
		jnz	short locret_6E412361
		inc	byte ptr [eax]

locret_6E412361:			; CODE XREF: sub_6E412300+Fj
					; sub_6E412300+1Cj ...
		retn
sub_6E412300	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E412370	proc near		; DATA XREF: .data:6E44800Co

Str		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_5C		= byte ptr -5Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	esi, [esp+9Ch+arg_0]
		lea	ebx, [esp+9Ch+var_74]
		mov	[esp+9Ch+Str], ebx
		call	EVP_MD_CTX_init
		mov	[esp+9Ch+var_84], 0
		xor	edi, edi
		lea	ebp, [esp+9Ch+var_5C]

loc_6E41239B:				; CODE XREF: sub_6E412370+1A0j
		mov	eax, [esi+0E4h]
		mov	eax, [eax+90h]
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	EVP_DigestInit_ex
		test	eax, eax
		jle	loc_6E412540
		mov	edx, ds:Str[edi*4]
		mov	[esp+9Ch+Str], edx ; Str
		mov	[esp+9Ch+var_80], edx
		call	strlen
		mov	[esp+9Ch+var_94], eax
		mov	edx, [esp+9Ch+var_80]
		mov	[esp+9Ch+var_98], edx
		mov	[esp+9Ch+Str], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412540
		mov	eax, [esp+9Ch+arg_C]
		mov	[esp+9Ch+var_94], eax
		mov	eax, [esp+9Ch+arg_8]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412540
		mov	[esp+9Ch+var_94], 20h
		mov	eax, [esi+58h]
		add	eax, 0C0h
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412540
		mov	[esp+9Ch+var_94], 20h
		mov	eax, [esi+58h]
		add	eax, 0A0h
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E412540
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], ebp
		mov	[esp+9Ch+Str], ebx
		call	EVP_DigestFinal_ex
		test	eax, eax
		jle	loc_6E412540
		mov	eax, [esi+0E4h]
		mov	eax, [eax+8Ch]
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	EVP_DigestInit_ex
		test	eax, eax
		jle	loc_6E412540
		mov	eax, [esp+9Ch+arg_C]
		mov	[esp+9Ch+var_94], eax
		mov	eax, [esp+9Ch+arg_8]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	short loc_6E412540
		mov	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], ebp
		mov	[esp+9Ch+Str], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jle	short loc_6E412540
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_94], eax
		mov	eax, [esp+9Ch+arg_4]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Str], ebx
		call	EVP_DigestFinal_ex
		test	eax, eax
		jle	short loc_6E412540
		mov	eax, [esp+9Ch+var_78]
		add	[esp+9Ch+arg_4], eax
		add	[esp+9Ch+var_84], eax
		inc	edi
		cmp	edi, 3
		jnz	loc_6E41239B

loc_6E412516:				; CODE XREF: sub_6E412370+204j
		mov	[esp+9Ch+Str], ebx
		call	EVP_MD_CTX_cleanup
		mov	[esp+9Ch+var_98], 40h
		mov	[esp+9Ch+Str], ebp
		call	OPENSSL_cleanse
		mov	eax, [esp+9Ch+var_84]
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E412540:				; CODE XREF: sub_6E412370+4Dj
					; sub_6E412370+7Cj ...
		mov	[esp+9Ch+var_8C], 356h
		mov	[esp+9Ch+var_90], offset aS3_enc_c ; "s3_enc.c"
		mov	[esp+9Ch+var_94], 44h
		mov	[esp+9Ch+var_98], 184h
		mov	[esp+9Ch+Str], 14h
		call	ERR_put_error
		mov	[esp+9Ch+var_84], 0
		jmp	short loc_6E412516
sub_6E412370	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E412580	proc near		; DATA XREF: .data:6E448030o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 73h
		ja	short loc_6E4125A0
		movsx	eax, ds:byte_6E44C0E0[eax]
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E4125A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4125A0:				; CODE XREF: sub_6E412580+7j
					; sub_6E412580+11j
		mov	eax, 0FFFFFFFFh
		retn
sub_6E412580	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E4125B0	proc near		; CODE XREF: sub_6E413BF0+5A0p
					; sub_6E413BF0+642p ...

Dst		= dword	ptr -48h
Src		= dword	ptr -44h
Size		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		test	edi, edi
		jle	loc_6E412950
		mov	eax, [esi+58h]
		mov	[ebp+var_28], eax
		mov	eax, [eax+0ECh]
		mov	[ebp+var_1C], eax
		test	eax, eax
		jz	loc_6E412980

loc_6E4125DE:				; CODE XREF: sub_6E4125B0+3E8j
		mov	eax, [ebp+var_28]
		mov	ebx, [eax+0F8h]
		mov	eax, [ebp+var_1C]
		lea	ecx, [eax+5]
		neg	ecx
		and	ecx, 7
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jnz	short loc_6E412619
		test	ebx, ebx
		jnz	loc_6E412860
		mov	eax, [ebp+var_28]
		mov	[eax+0F4h], ecx
		mov	edx, [ebp+var_1C]
		add	edx, ecx

loc_6E41260F:				; CODE XREF: sub_6E4125B0+2C8j
					; sub_6E4125B0+2E6j ...
		mov	[esi+4Ch], edx
		mov	dword ptr [esi+50h], 0

loc_6E412619:				; CODE XREF: sub_6E4125B0+47j
		mov	[ebp+var_1C], ecx
		mov	[esp+48h+Dst], esi
		call	SSL_version
		cmp	eax, 0FEFFh
		mov	ecx, [ebp+var_1C]
		jz	loc_6E412750
		mov	[ebp+var_1C], ecx
		mov	[esp+48h+Dst], esi
		call	SSL_version
		cmp	eax, 100h
		mov	ecx, [ebp+var_1C]
		jz	loc_6E412750
		cmp	edi, ebx
		jle	loc_6E412763

loc_6E412653:				; CODE XREF: sub_6E4125B0+1A5j
					; sub_6E4125B0+1E5j
		mov	eax, [esi+50h]
		mov	[ebp+var_20], eax
		mov	edx, [ebp+var_28]
		mov	eax, [edx+0ECh]
		add	eax, ecx
		mov	edx, eax
		mov	[ebp+var_24], eax
		mov	eax, [esi+4Ch]
		cmp	eax, edx
		jz	loc_6E412960
		mov	[ebp+var_1C], ecx
		mov	ecx, [ebp+var_20]
		lea	edx, [ecx+ebx]
		mov	[esp+48h+Size],	edx ; Size
		mov	[esp+48h+Src], eax ; Src
		mov	edx, [ebp+var_24]
		mov	[esp+48h+Dst], edx ; Dst
		call	memmove
		mov	edx, [ebp+var_24]
		mov	[esi+4Ch], edx
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_1C]
		add	eax, ecx
		mov	ecx, [ebp+var_28]
		mov	[ecx+0F4h], eax

loc_6E4126A7:				; CODE XREF: sub_6E4125B0+3BCj
		mov	ecx, [ecx+0F0h]
		mov	[ebp+var_1C], ecx
		sub	[ebp+var_1C], eax
		cmp	edi, [ebp+var_1C]
		jg	loc_6E41299D
		mov	edx, [esi+60h]
		test	edx, edx
		jnz	loc_6E4127A0
		mov	eax, [esi+8]
		cmp	dword ptr [eax], 0FEFFh
		jz	loc_6E4127A0

loc_6E4126D6:				; CODE XREF: sub_6E4125B0+1F3j
		mov	[ebp+var_1C], edi
		lea	esi, [esi+0]

loc_6E4126E0:				; CODE XREF: sub_6E4125B0+19Cj
					; sub_6E4125B0+1FFj ...
		mov	[esp+48h+Dst], 0 ; dwErrCode
		call	ds:SetLastError
		push	eax
		mov	eax, [esi+0Ch]
		test	eax, eax
		jz	loc_6E412800
		mov	dword ptr [esi+18h], 3
		mov	edx, [ebp+var_1C]
		sub	edx, ebx
		mov	[esp+48h+Size],	edx
		mov	ecx, [ebp+var_20]
		lea	edx, [ebx+ecx]
		add	edx, [ebp+var_24]
		mov	[esp+48h+Src], edx
		mov	[esp+48h+Dst], eax
		call	BIO_read
		test	eax, eax
		jle	loc_6E4129DD
		add	ebx, eax
		mov	[esp+48h+Dst], esi
		call	SSL_version
		cmp	eax, 0FEFFh
		jz	loc_6E4127C0
		mov	[esp+48h+Dst], esi
		call	SSL_version
		cmp	eax, 100h
		jz	short loc_6E4127C0

loc_6E41274A:				; CODE XREF: sub_6E4125B0+242j
		cmp	edi, ebx
		jg	short loc_6E4126E0
		jmp	short loc_6E4127C4
; ---------------------------------------------------------------------------

loc_6E412750:				; CODE XREF: sub_6E4125B0+7Cj
					; sub_6E4125B0+95j
		cmp	ebx, 0
		jz	short loc_6E412790
		jle	loc_6E412653
		cmp	edi, ebx
		jg	loc_6E4128D0

loc_6E412763:				; CODE XREF: sub_6E4125B0+9Dj
					; sub_6E4125B0+322j
		add	[esi+50h], edi
		sub	ebx, edi
		mov	eax, [ebp+var_28]
		mov	[eax+0F8h], ebx
		add	[eax+0F4h], edi
		mov	eax, edi

loc_6E412779:				; CODE XREF: sub_6E4125B0+1EDj
					; sub_6E4125B0+397j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E412790
; ---------------------------------------------------------------------------
		align 10h

loc_6E412790:				; CODE XREF: sub_6E4125B0+1A3j
					; sub_6E4125B0+1D1j
		mov	eax, [ebp+arg_C]
		test	eax, eax
		jz	loc_6E412653
		xor	eax, eax
		jmp	short loc_6E412779
; ---------------------------------------------------------------------------
		align 10h

loc_6E4127A0:				; CODE XREF: sub_6E4125B0+111j
					; sub_6E4125B0+120j
		cmp	edi, [ebp+arg_8]
		jg	loc_6E4126D6
		mov	eax, [ebp+var_1C]
		cmp	eax, [ebp+arg_8]
		jl	loc_6E4126E0
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_1C], eax
		jmp	loc_6E4126E0
; ---------------------------------------------------------------------------

loc_6E4127C0:				; CODE XREF: sub_6E4125B0+185j
					; sub_6E4125B0+198j
		cmp	edi, ebx
		jg	short loc_6E4127F0

loc_6E4127C4:				; CODE XREF: sub_6E4125B0+19Ej
		mov	eax, [ebp+var_28]
		add	[eax+0F4h], edi
		sub	ebx, edi
		mov	[eax+0F8h], ebx
		add	[esi+50h], edi
		mov	dword ptr [esi+18h], 1
		mov	eax, edi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4127F0:				; CODE XREF: sub_6E4125B0+212j
		mov	edi, ebx
		jmp	loc_6E41274A
; ---------------------------------------------------------------------------
		align 10h

loc_6E412800:				; CODE XREF: sub_6E4125B0+143j
		mov	[esp+48h+var_38], 0F3h
		mov	[esp+48h+var_3C], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+48h+Size],	0D3h
		mov	[esp+48h+Src], 95h
		mov	[esp+48h+Dst], 14h
		call	ERR_put_error
		mov	edx, 0FFFFFFFFh

loc_6E412831:				; CODE XREF: sub_6E4125B0+42Fj
		mov	eax, [ebp+var_28]
		mov	[eax+0F8h], ebx
		test	byte ptr [esi+104h], 10h
		jnz	loc_6E412900

loc_6E412847:				; CODE XREF: sub_6E4125B0+363j
					; sub_6E4125B0+379j ...
		mov	eax, edx
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E412860
; ---------------------------------------------------------------------------
		align 10h

loc_6E412860:				; CODE XREF: sub_6E4125B0+4Bj
					; sub_6E4125B0+2A1j
		test	ecx, ecx
		jz	short loc_6E4128E0
		cmp	ebx, 4
		jle	short loc_6E4128E0
		mov	eax, [ebp+var_28]
		mov	edx, [ebp+var_1C]
		add	edx, [eax+0F4h]
		cmp	byte ptr [edx],	17h
		jnz	loc_6E41260F
		xor	eax, eax
		mov	al, [edx+3]
		mov	[ebp+var_20], eax
		shl	[ebp+var_20], 8
		xor	eax, eax
		mov	al, [edx+4]
		or	[ebp+var_20], eax
		cmp	[ebp+var_20], 7Fh
		jle	loc_6E41260F
		mov	[esp+48h+Size],	ebx ; Size
		mov	[esp+48h+Src], edx ; Src
		mov	eax, [ebp+var_1C]
		add	eax, ecx
		mov	[ebp+var_1C], ecx
		mov	[esp+48h+Dst], eax ; Dst
		call	memmove
		mov	eax, [ebp+var_28]
		mov	ecx, [ebp+var_1C]
		mov	[eax+0F4h], ecx
		mov	edx, [eax+0ECh]
		add	edx, ecx
		jmp	loc_6E41260F
; ---------------------------------------------------------------------------
		align 10h

loc_6E4128D0:				; CODE XREF: sub_6E4125B0+1ADj
		mov	edi, ebx
		jmp	loc_6E412763
; ---------------------------------------------------------------------------
		align 10h

loc_6E4128E0:				; CODE XREF: sub_6E4125B0+2B2j
					; sub_6E4125B0+2B7j
		mov	edx, [ebp+var_28]
		mov	eax, [ebp+var_1C]
		add	eax, [edx+0F4h]
		mov	edx, eax
		jmp	loc_6E41260F
; ---------------------------------------------------------------------------
		align 10h

loc_6E412900:				; CODE XREF: sub_6E4125B0+291j
		mov	[ebp+var_1C], edx
		mov	[esp+48h+Dst], esi
		call	SSL_version
		cmp	eax, 0FEFFh
		mov	edx, [ebp+var_1C]
		jz	loc_6E412847
		mov	[esp+48h+Dst], esi
		call	SSL_version
		cmp	eax, 100h
		mov	edx, [ebp+var_1C]
		jz	loc_6E412847
		add	ebx, [ebp+var_20]
		test	ebx, ebx
		jnz	loc_6E412847
		mov	[esp+48h+Dst], esi
		call	sub_6E417070
		mov	edx, [ebp+var_1C]
		mov	eax, edx
		jmp	loc_6E412779
; ---------------------------------------------------------------------------
		align 10h

loc_6E412950:				; CODE XREF: sub_6E4125B0+11j
		mov	eax, edi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E412960:				; CODE XREF: sub_6E4125B0+BEj
		mov	eax, [ebp+var_28]
		mov	eax, [eax+0F4h]
		mov	ecx, [ebp+var_28]
		jmp	loc_6E4126A7
; ---------------------------------------------------------------------------
		jmp	short loc_6E412980
; ---------------------------------------------------------------------------
		align 10h

loc_6E412980:				; CODE XREF: sub_6E4125B0+28j
					; sub_6E4125B0+3C1j
		mov	[esp+48h+Dst], esi
		call	sub_6E416A30
		test	eax, eax
		jz	short loc_6E4129D3
		mov	eax, [ebp+var_28]
		mov	eax, [eax+0ECh]
		mov	[ebp+var_1C], eax
		jmp	loc_6E4125DE
; ---------------------------------------------------------------------------

loc_6E41299D:				; CODE XREF: sub_6E4125B0+106j
		mov	[esp+48h+var_38], 0D8h
		mov	[esp+48h+var_3C], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+48h+Size],	44h
		mov	[esp+48h+Src], 95h
		mov	[esp+48h+Dst], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E412779
; ---------------------------------------------------------------------------

loc_6E4129D3:				; CODE XREF: sub_6E4125B0+3DAj
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E412779
; ---------------------------------------------------------------------------

loc_6E4129DD:				; CODE XREF: sub_6E4125B0+170j
		mov	edx, eax
		jmp	loc_6E412831
sub_6E4125B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4129F0	proc near		; CODE XREF: sub_6E428400+243p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [eax+58h]
		mov	ecx, [ebx+118h]
		mov	edx, [ebx+120h]
		mov	eax, [eax+88h]
		mov	esi, [ebx+110h]
		mov	[esp+2Ch+var_1C], esi
		mov	[esp+2Ch+var_20], ecx
		mov	[esp+2Ch+var_24], 4000h
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	COMP_expand_block
		test	eax, eax
		js	short loc_6E412A60
		mov	[ebx+110h], eax
		mov	eax, [ebx+120h]
		mov	[ebx+118h], eax
		mov	eax, 1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E412A60
; ---------------------------------------------------------------------------
		align 10h

loc_6E412A60:				; CODE XREF: sub_6E4129F0+42j
					; sub_6E4129F0+61j
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
sub_6E4129F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E412A70	proc near		; CODE XREF: sub_6E42A700+16Dp
					; sub_6E42AC40+162p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [eax+58h]
		mov	ecx, [ebx+140h]
		mov	edx, [ebx+13Ch]
		mov	eax, [eax+94h]
		mov	esi, [ebx+134h]
		mov	[esp+2Ch+var_1C], esi
		mov	[esp+2Ch+var_20], ecx
		mov	[esp+2Ch+var_24], 4400h
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	COMP_compress_block
		test	eax, eax
		js	short loc_6E412AE0
		mov	[ebx+134h], eax
		mov	eax, [ebx+13Ch]
		mov	[ebx+140h], eax
		mov	eax, 1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E412AE0
; ---------------------------------------------------------------------------
		align 10h

loc_6E412AE0:				; CODE XREF: sub_6E412A70+42j
					; sub_6E412A70+61j
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
sub_6E412A70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E412AF0	proc near		; CODE XREF: sub_6E412CC0+34Cp
					; sub_6E412CC0+393p ...

dwErrCode	= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [esi+58h]
		mov	eax, [ebp+arg_C]
		cmp	[ebx+168h], eax
		jg	loc_6E412C80
		mov	eax, [ebp+arg_8]
		cmp	[ebx+174h], eax
		jz	short loc_6E412B26
		test	byte ptr [esi+104h], 2
		jz	loc_6E412C80

loc_6E412B26:				; CODE XREF: sub_6E412AF0+27j
		mov	edi, ds:SetLastError
		mov	eax, [ebp+arg_4]
		cmp	[ebx+16Ch], eax
		jz	short loc_6E412B89
		jmp	loc_6E412C80
; ---------------------------------------------------------------------------
		align 10h

loc_6E412B40:				; CODE XREF: sub_6E412AF0+A8j
		mov	dword ptr [esi+18h], 2
		mov	eax, [ebx+108h]
		mov	[esp+38h+var_30], eax
		mov	eax, [ebx+0FCh]
		add	eax, [ebx+104h]
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+dwErrCode], edx
		call	BIO_write
		mov	edx, [ebx+108h]
		cmp	eax, edx
		jz	loc_6E412C10
		test	eax, eax
		jle	short loc_6E412BD4
		add	[ebx+104h], eax
		sub	edx, eax
		mov	[ebx+108h], edx

loc_6E412B89:				; CODE XREF: sub_6E412AF0+45j
		mov	[esp+38h+dwErrCode], 0 ; dwErrCode
		call	edi ; SetLastError
		push	eax
		mov	edx, [esi+10h]
		test	edx, edx
		jnz	short loc_6E412B40
		mov	[esp+38h+var_28], 3A5h
		mov	[esp+38h+var_2C], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+38h+var_30], 80h
		mov	[esp+38h+var_34], 9Fh
		mov	[esp+38h+dwErrCode], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		cmp	dword ptr [ebx+108h], 0FFFFFFFFh
		jz	short loc_6E412C10

loc_6E412BD4:				; CODE XREF: sub_6E412AF0+89j
		mov	edx, [esi]
		cmp	edx, 0FEFFh
		jz	short loc_6E412BF0
		cmp	edx, 100h
		jz	short loc_6E412BF0
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E412BF0:				; CODE XREF: sub_6E412AF0+ECj
					; sub_6E412AF0+F4j
		mov	dword ptr [ebx+108h], 0
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E412C10:				; CODE XREF: sub_6E412AF0+81j
					; sub_6E412AF0+E2j
		mov	dword ptr [ebx+108h], 0
		add	[ebx+104h], eax
		test	byte ptr [esi+104h], 10h
		jnz	short loc_6E412C50

loc_6E412C29:				; CODE XREF: sub_6E412AF0+16Dj
					; sub_6E412AF0+17Cj ...
		mov	dword ptr [esi+18h], 1
		mov	eax, [esi+58h]
		mov	eax, [eax+170h]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E412C50
; ---------------------------------------------------------------------------
		align 10h

loc_6E412C50:				; CODE XREF: sub_6E412AF0+137j
					; sub_6E412AF0+151j
		mov	[esp+38h+dwErrCode], esi
		call	SSL_version
		cmp	eax, 0FEFFh
		jz	short loc_6E412C29
		mov	[esp+38h+dwErrCode], esi
		call	SSL_version
		cmp	eax, 100h
		jz	short loc_6E412C29
		mov	[esp+38h+dwErrCode], esi
		call	sub_6E416F70
		jmp	short loc_6E412C29
; ---------------------------------------------------------------------------
		align 10h

loc_6E412C80:				; CODE XREF: sub_6E412AF0+18j
					; sub_6E412AF0+30j ...
		mov	[esp+38h+var_28], 399h
		mov	[esp+38h+var_2C], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+38h+var_30], 7Fh
		mov	[esp+38h+var_34], 9Fh
		mov	[esp+38h+dwErrCode], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6E412AF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E412CC0	proc near		; CODE XREF: sub_6E412CC0+F9p
					; sub_6E4132F0+6B6p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, eax
		mov	[esp+5Ch+var_3C], edx
		mov	[esp+5Ch+var_38], ecx
		mov	eax, [eax+58h]
		mov	[esp+5Ch+var_40], eax
		mov	esi, [eax+108h]
		test	esi, esi
		jnz	loc_6E413040
		mov	ebp, [eax+18Ch]
		test	ebp, ebp
		jnz	loc_6E413020

loc_6E412CF4:				; CODE XREF: sub_6E412CC0+36Dj
		mov	eax, [esp+5Ch+var_40]
		mov	edi, [eax+0FCh]
		test	edi, edi
		jz	loc_6E413210

loc_6E412D06:				; CODE XREF: sub_6E412CC0+55Aj
		mov	ecx, [esp+5Ch+arg_0]
		test	ecx, ecx
		jz	loc_6E412DE0

loc_6E412D12:				; CODE XREF: sub_6E412CC0+126j
		mov	ebp, [ebx+58h]
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	loc_6E4130E0
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	loc_6E412E00
		mov	eax, [ebx+90h]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E4130E0
		mov	eax, [ebx+90h]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_CTX_md
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_size
		mov	[esp+5Ch+var_2C], eax
		test	eax, eax
		js	loc_6E4131CC

loc_6E412D69:				; CODE XREF: sub_6E412CC0+436j
		mov	eax, [esp+5Ch+arg_4]
		test	eax, eax
		jnz	loc_6E412E40
		mov	edx, [ebx+58h]
		mov	eax, [edx+0E4h]
		test	eax, eax
		jnz	loc_6E412E10
		mov	eax, [edx+0E0h]
		test	eax, eax
		jz	loc_6E4130B0
		cmp	[esp+5Ch+var_3C], 17h
		jnz	loc_6E4130B0
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], 0
		mov	ecx, [esp+5Ch+var_38]
		mov	edx, 17h
		mov	eax, ebx
		call	sub_6E412CC0
		test	eax, eax
		jle	loc_6E4131CC
		cmp	eax, 55h
		jg	loc_6E4132BC
		mov	edx, [ebx+58h]
		jmp	loc_6E4130B2
; ---------------------------------------------------------------------------
		align 10h

loc_6E412DE0:				; CODE XREF: sub_6E412CC0+4Cj
		mov	edx, [esp+5Ch+arg_4]
		test	edx, edx
		jnz	loc_6E412D12

loc_6E412DEC:				; CODE XREF: sub_6E412CC0+2FEj
					; sub_6E412CC0+375j ...
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E412E00:				; CODE XREF: sub_6E412CC0+6Bj
					; sub_6E412CC0+428j
		mov	edi, [esp+5Ch+arg_4]
		test	edi, edi
		mov	[esp+5Ch+var_2C], 0
		jnz	short loc_6E412E40

loc_6E412E10:				; CODE XREF: sub_6E412CC0+C0j
					; sub_6E412CC0+3FEj
		mov	ecx, [esp+5Ch+var_40]
		mov	edx, [ecx+0FCh]
		lea	eax, [edx+5]
		neg	eax
		and	eax, 7
		add	edx, eax
		mov	[ecx+104h], eax
		mov	[esp+5Ch+var_20], 0
		jmp	short loc_6E412E62
; ---------------------------------------------------------------------------
		align 10h

loc_6E412E40:				; CODE XREF: sub_6E412CC0+AFj
					; sub_6E412CC0+14Ej
		mov	edi, [esp+5Ch+var_40]
		mov	edx, [edi+0FCh]
		lea	eax, [edx+0Ah]
		neg	eax
		and	eax, 7
		add	edx, eax
		mov	[edi+104h], eax
		mov	[esp+5Ch+var_20], 0

loc_6E412E62:				; CODE XREF: sub_6E412CC0+172j
					; sub_6E412CC0+41Aj
		mov	edi, [esp+5Ch+var_3C]
		mov	eax, edi
		mov	[edx], al
		mov	[ebp+130h], edi
		mov	eax, [ebx]
		sar	eax, 8
		mov	[edx+1], al
		cmp	dword ptr [ebx+34h], 1111h
		jz	loc_6E413070

loc_6E412E85:				; CODE XREF: sub_6E412CC0+3B8j
		mov	eax, [ebx]

loc_6E412E87:				; CODE XREF: sub_6E412CC0+3C8j
					; sub_6E412CC0+3D3j
		lea	edi, [edx+3]
		mov	[esp+5Ch+var_30], edi

loc_6E412E8E:				; CODE XREF: sub_6E412CC0+3E2j
		mov	[edx+2], al
		mov	eax, [esp+5Ch+var_30]
		lea	edx, [eax+2]
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E412EAE
		cmp	dword ptr [ebx], 301h
		jg	loc_6E413150

loc_6E412EAE:				; CODE XREF: sub_6E412CC0+1E0j
					; sub_6E412CC0+5C9j
		mov	[esp+5Ch+var_34], 0
		mov	[esp+5Ch+var_28], 0
		mov	eax, [esp+5Ch+var_34]

loc_6E412EC2:				; CODE XREF: sub_6E412CC0+4D0j
					; sub_6E412CC0+5D3j
		lea	edi, [edx+eax]
		mov	[ebp+13Ch], edi
		mov	eax, [esp+5Ch+arg_0]
		mov	[ebp+134h], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[ebp+140h], eax
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	loc_6E4131E0
		mov	[esp+5Ch+var_24], edx
		mov	esi, [ebx+58h]
		mov	edi, [esi+140h]
		mov	ecx, [esi+13Ch]
		mov	edx, [esi+134h]
		mov	[esp+5Ch+var_4C], edx
		mov	[esp+5Ch+var_50], edi
		mov	[esp+5Ch+var_54], 4400h
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], eax
		call	COMP_compress_block
		test	eax, eax
		js	loc_6E4131A0
		mov	[esi+134h], eax
		mov	eax, [esi+13Ch]
		mov	[esi+140h], eax
		mov	edx, [esp+5Ch+var_24]

loc_6E412F40:				; CODE XREF: sub_6E412CC0+543j
		mov	ecx, [esp+5Ch+var_2C]
		test	ecx, ecx
		jnz	loc_6E413100

loc_6E412F4C:				; CODE XREF: sub_6E412CC0+480j
		mov	[ebp+140h], edx
		mov	[ebp+13Ch], edx
		mov	edx, [esp+5Ch+var_28]
		test	edx, edx
		jz	short loc_6E412F6A
		mov	eax, [esp+5Ch+var_34]
		add	[ebp+134h], eax

loc_6E412F6A:				; CODE XREF: sub_6E412CC0+29Ej
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax]
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		jle	loc_6E4131CC
		mov	eax, [ebp+134h]
		shr	eax, 8
		mov	ecx, [esp+5Ch+var_30]
		mov	[ecx], al
		mov	eax, [ebp+134h]
		mov	[ecx+1], al
		mov	eax, [esp+5Ch+var_3C]
		mov	[ebp+130h], eax
		mov	eax, [ebp+134h]
		lea	esi, [eax+5]
		mov	[ebp+134h], esi
		mov	eax, [esp+5Ch+arg_4]
		test	eax, eax
		jnz	loc_6E412DEC
		add	esi, [esp+5Ch+var_20]
		mov	eax, [esp+5Ch+var_40]
		mov	[eax+108h], esi
		mov	eax, [ebx+58h]
		mov	edi, [esp+5Ch+arg_0]
		mov	[eax+168h], edi
		mov	edi, [esp+5Ch+var_38]
		mov	[eax+174h], edi
		mov	ecx, [esp+5Ch+var_3C]
		mov	[eax+16Ch], ecx
		mov	esi, [esp+5Ch+arg_0]
		mov	[eax+170h], esi
		mov	[esp+5Ch+var_50], esi
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_6E412AF0
		mov	esi, eax
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E413020:				; CODE XREF: sub_6E412CC0+2Ej
		mov	eax, [ebx+8]
		mov	eax, [eax+3Ch]
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		jg	loc_6E412CF4
		mov	esi, eax
		jmp	loc_6E412DEC
; ---------------------------------------------------------------------------
		align 10h

loc_6E413040:				; CODE XREF: sub_6E412CC0+20j
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], ecx
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_6E412AF0
		mov	esi, eax
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E413070:				; CODE XREF: sub_6E412CC0+1BFj
		mov	esi, [ebx+190h]
		test	esi, esi
		jnz	loc_6E412E85
		mov	eax, [ebx]
		mov	ecx, eax
		sar	ecx, 8
		cmp	ecx, 3
		jnz	loc_6E412E87
		cmp	eax, 301h
		jle	loc_6E412E87
		lea	eax, [edx+3]
		mov	[esp+5Ch+var_30], eax
		mov	al, 1
		jmp	loc_6E412E8E
; ---------------------------------------------------------------------------
		align 10h

loc_6E4130B0:				; CODE XREF: sub_6E412CC0+CEj
					; sub_6E412CC0+D9j
		xor	eax, eax

loc_6E4130B2:				; CODE XREF: sub_6E412CC0+112j
		mov	dword ptr [edx+0E4h], 1
		test	eax, eax
		jz	loc_6E412E10
		mov	edi, [esp+5Ch+var_40]
		mov	edx, [edi+104h]
		add	edx, eax
		add	edx, [edi+0FCh]
		mov	[esp+5Ch+var_20], eax
		jmp	loc_6E412E62
; ---------------------------------------------------------------------------
		align 10h

loc_6E4130E0:				; CODE XREF: sub_6E412CC0+5Dj
					; sub_6E412CC0+81j
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	loc_6E412E00
		mov	[esp+5Ch+var_2C], 0
		jmp	loc_6E412D69
; ---------------------------------------------------------------------------
		align 10h

loc_6E413100:				; CODE XREF: sub_6E412CC0+286j
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_54], 1
		mov	ecx, [esp+5Ch+var_34]
		add	ecx, [ebp+134h]
		add	ecx, edx
		mov	[esp+5Ch+var_24], edx
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		js	loc_6E4131CC
		mov	eax, [esp+5Ch+var_2C]
		add	[ebp+134h], eax
		mov	edx, [esp+5Ch+var_24]
		jmp	loc_6E412F4C
; ---------------------------------------------------------------------------
		align 10h

loc_6E413150:				; CODE XREF: sub_6E412CC0+1E8j
		mov	[esp+5Ch+var_34], edx
		mov	[esp+5Ch+var_5C], eax
		call	EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		cmp	eax, 2
		mov	edx, [esp+5Ch+var_34]
		jz	loc_6E413270
		cmp	eax, 6
		setz	al
		xor	ecx, ecx
		mov	cl, al
		mov	[esp+5Ch+var_34], ecx
		shl	[esp+5Ch+var_34], 3
		mov	edi, ecx
		mov	[esp+5Ch+var_28], edi
		shl	[esp+5Ch+var_28], 3
		mov	eax, [esp+5Ch+var_34]
		jmp	loc_6E412EC2
; ---------------------------------------------------------------------------
		align 10h

loc_6E4131A0:				; CODE XREF: sub_6E412CC0+264j
		mov	[esp+5Ch+var_4C], 348h
		mov	[esp+5Ch+var_50], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+5Ch+var_54], 8Dh
		mov	[esp+5Ch+var_58], 68h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error

loc_6E4131CC:				; CODE XREF: sub_6E412CC0+A3j
					; sub_6E412CC0+100j ...
		mov	esi, 0FFFFFFFFh
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4131E0:				; CODE XREF: sub_6E412CC0+227j
		mov	eax, [esp+5Ch+arg_0]
		mov	esi, [esp+5Ch+var_38]
		cmp	eax, 4
		jnb	short loc_6E413250

loc_6E4131ED:				; CODE XREF: sub_6E412CC0+5A7j
		xor	ecx, ecx
		test	al, 2
		jnz	short loc_6E413240

loc_6E4131F3:				; CODE XREF: sub_6E412CC0+58Bj
		test	al, 1
		jnz	short loc_6E413230

loc_6E4131F7:				; CODE XREF: sub_6E412CC0+57Aj
		mov	eax, [ebp+13Ch]
		mov	[ebp+140h], eax
		jmp	loc_6E412F40
; ---------------------------------------------------------------------------
		align 10h

loc_6E413210:				; CODE XREF: sub_6E412CC0+40j
		mov	[esp+5Ch+var_5C], ebx
		call	sub_6E416BE0
		test	eax, eax
		jnz	loc_6E412D06
		jmp	short loc_6E4131CC
; ---------------------------------------------------------------------------
		align 10h

loc_6E413230:				; CODE XREF: sub_6E412CC0+535j
		mov	al, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_24], al
		mov	[edi+ecx], al
		jmp	short loc_6E4131F7
; ---------------------------------------------------------------------------
		align 10h

loc_6E413240:				; CODE XREF: sub_6E412CC0+531j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	short loc_6E4131F3
; ---------------------------------------------------------------------------
		align 10h

loc_6E413250:				; CODE XREF: sub_6E412CC0+52Bj
		test	edi, 1
		jnz	short loc_6E4132A9

loc_6E413258:				; CODE XREF: sub_6E412CC0+5FAj
		test	edi, 2
		jnz	short loc_6E413298

loc_6E413260:				; CODE XREF: sub_6E412CC0+5E7j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E4131ED
; ---------------------------------------------------------------------------
		align 10h

loc_6E413270:				; CODE XREF: sub_6E412CC0+4A8j
		mov	eax, [ebx+8Ch]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_CIPHER_CTX_iv_length
		mov	[esp+5Ch+var_28], eax
		cmp	eax, 1
		mov	edx, [esp+5Ch+var_34]
		jle	loc_6E412EAE
		mov	[esp+5Ch+var_34], eax
		jmp	loc_6E412EC2
; ---------------------------------------------------------------------------

loc_6E413298:				; CODE XREF: sub_6E412CC0+59Ej
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E413260
; ---------------------------------------------------------------------------

loc_6E4132A9:				; CODE XREF: sub_6E412CC0+596j
		mov	al, [esi]
		mov	byte ptr [esp+5Ch+var_24], al
		mov	[edi], al
		inc	edi
		lea	esi, [esi+1]
		mov	eax, [esp+5Ch+arg_0]
		dec	eax
		jmp	short loc_6E413258
; ---------------------------------------------------------------------------

loc_6E4132BC:				; CODE XREF: sub_6E412CC0+109j
		mov	[esp+5Ch+var_4C], 2FAh
		mov	[esp+5Ch+var_50], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+5Ch+var_54], 44h
		mov	[esp+5Ch+var_58], 68h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		or	esi, 0FFFFFFFFh
		jmp	loc_6E412DEC
sub_6E412CC0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E4132F0	proc near		; CODE XREF: sub_6E410250+D0p
					; sub_6E4157D0+2Ap ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, [esp+5Ch+arg_0]
		mov	dword ptr [ebp+18h], 1
		mov	eax, [ebp+58h]
		mov	edx, [eax+164h]
		test	edx, edx
		js	loc_6E413968

loc_6E413313:				; CODE XREF: sub_6E4132F0+697j
		mov	edi, [eax+164h]
		mov	[esp+5Ch+var_3C], edi
		mov	dword ptr [eax+164h], 0
		mov	[esp+5Ch+var_5C], ebp
		call	SSL_state
		test	ah, 30h
		jz	short loc_6E41333F
		mov	eax, [ebp+1Ch]
		test	eax, eax
		jz	loc_6E4138F0

loc_6E41333F:				; CODE XREF: sub_6E4132F0+42j
					; sub_6E4132F0+610j
		mov	eax, [esp+5Ch+var_3C]
		cmp	eax, [esp+5Ch+arg_C]
		jg	loc_6E413A15
		mov	eax, [esp+5Ch+arg_C]
		sub	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_40], eax
		mov	edi, eax
		nop
		lea	esi, [esi+0]

loc_6E413360:				; CODE XREF: sub_6E4132F0+35Cj
		mov	eax, [ebp+114h]
		mov	[esp+5Ch+var_48], edi
		cmp	edi, eax
		jbe	short loc_6E413372
		mov	[esp+5Ch+var_48], eax

loc_6E413372:				; CODE XREF: sub_6E4132F0+7Cj
		mov	eax, [esp+5Ch+var_3C]
		add	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_38], eax
		mov	eax, [ebp+58h]
		mov	[esp+5Ch+var_44], eax
		mov	ebx, [eax+108h]
		test	ebx, ebx
		jnz	loc_6E4136B0
		mov	eax, [eax+18Ch]
		test	eax, eax
		jnz	loc_6E413690

loc_6E4133A1:				; CODE XREF: sub_6E4132F0+3ADj
		mov	eax, [esp+5Ch+var_44]
		mov	eax, [eax+0FCh]
		test	eax, eax
		jz	loc_6E413850

loc_6E4133B3:				; CODE XREF: sub_6E4132F0+56Aj
		mov	eax, [esp+5Ch+var_48]
		test	eax, eax
		jnz	short loc_6E4133E0

loc_6E4133BB:				; CODE XREF: sub_6E4132F0+33Dj
					; sub_6E4132F0+3B5j ...
		mov	eax, [ebp+58h]
		mov	edi, [esp+5Ch+var_3C]
		mov	[eax+164h], edi

loc_6E4133C8:				; CODE XREF: sub_6E4132F0+647j
					; sub_6E4132F0+720j ...
		mov	eax, ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4133E0:				; CODE XREF: sub_6E4132F0+C9j
		mov	ebx, [ebp+58h]
		mov	edi, [ebp+0C0h]
		test	edi, edi
		jz	loc_6E4136E0
		mov	ecx, [ebp+8Ch]
		test	ecx, ecx
		jz	loc_6E4136EE
		mov	eax, [ebp+90h]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E4136E0
		mov	eax, [ebp+90h]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_CTX_md
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_size
		mov	[esp+5Ch+var_2C], eax
		test	eax, eax
		js	loc_6E41380C

loc_6E413437:				; CODE XREF: sub_6E4132F0+588j
		mov	eax, [ebp+58h]
		mov	edx, [eax+0E4h]
		test	edx, edx
		jnz	short loc_6E413463
		mov	edi, [eax+0E0h]
		test	edi, edi
		jz	short loc_6E413459
		cmp	[esp+5Ch+arg_4], 17h
		jz	loc_6E41398C

loc_6E413459:				; CODE XREF: sub_6E4132F0+15Cj
		mov	dword ptr [eax+0E4h], 1

loc_6E413463:				; CODE XREF: sub_6E4132F0+152j
					; sub_6E4132F0+406j
		mov	ecx, [esp+5Ch+var_44]
		mov	edx, [ecx+0FCh]
		lea	eax, [edx+5]
		neg	eax
		and	eax, 7
		add	edx, eax
		mov	[ecx+104h], eax
		mov	[esp+5Ch+var_20], 0

loc_6E413485:				; CODE XREF: sub_6E4132F0+6EFj
		mov	al, byte ptr [esp+5Ch+arg_4]
		mov	[edx], al
		mov	eax, [esp+5Ch+arg_4]
		mov	[ebx+130h], eax
		mov	eax, [ebp+0]
		sar	eax, 8
		mov	[edx+1], al
		cmp	dword ptr [ebp+34h], 1111h
		jz	loc_6E413750

loc_6E4134AB:				; CODE XREF: sub_6E4132F0+468j
		mov	eax, [ebp+0]

loc_6E4134AE:				; CODE XREF: sub_6E4132F0+479j
					; sub_6E4132F0+484j
		lea	ecx, [edx+3]
		mov	[esp+5Ch+var_30], ecx

loc_6E4134B5:				; CODE XREF: sub_6E4132F0+493j
		mov	[edx+2], al
		mov	eax, [esp+5Ch+var_30]
		lea	edx, [eax+2]
		mov	eax, [ebp+8Ch]
		test	eax, eax
		jz	short loc_6E4134D6
		cmp	dword ptr [ebp+0], 301h
		jg	loc_6E413790

loc_6E4134D6:				; CODE XREF: sub_6E4132F0+1D7j
					; sub_6E4132F0+669j
		mov	[esp+5Ch+var_34], 0
		mov	[esp+5Ch+var_28], 0
		mov	eax, [esp+5Ch+var_34]

loc_6E4134EA:				; CODE XREF: sub_6E4132F0+4E0j
					; sub_6E4132F0+673j
		lea	ecx, [edx+eax]
		mov	[ebx+13Ch], ecx
		mov	eax, [esp+5Ch+var_48]
		mov	[ebx+134h], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[ebx+140h], eax
		mov	eax, [ebp+94h]
		test	eax, eax
		jz	loc_6E413820
		mov	[esp+5Ch+var_24], edx
		mov	esi, [ebp+58h]
		mov	edi, [esi+140h]
		mov	ecx, [esi+13Ch]
		mov	edx, [esi+134h]
		mov	[esp+5Ch+var_4C], edx
		mov	[esp+5Ch+var_50], edi
		mov	[esp+5Ch+var_54], 4400h
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], eax
		call	COMP_compress_block
		test	eax, eax
		js	loc_6E4137E0
		mov	[esi+134h], eax
		mov	eax, [esi+13Ch]
		mov	[esi+140h], eax
		mov	edx, [esp+5Ch+var_24]

loc_6E413568:				; CODE XREF: sub_6E4132F0+559j
					; sub_6E4132F0+5A6j
		mov	ecx, [esp+5Ch+var_2C]
		test	ecx, ecx
		jnz	loc_6E413700

loc_6E413574:				; CODE XREF: sub_6E4132F0+450j
		mov	[ebx+140h], edx
		mov	[ebx+13Ch], edx
		mov	eax, [esp+5Ch+var_28]
		test	eax, eax
		jz	short loc_6E413592
		mov	eax, [esp+5Ch+var_34]
		add	[ebx+134h], eax

loc_6E413592:				; CODE XREF: sub_6E4132F0+296j
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax]
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebp
		call	eax
		test	eax, eax
		jle	loc_6E41380C
		mov	eax, [ebx+134h]
		shr	eax, 8
		mov	ecx, [esp+5Ch+var_30]
		mov	[ecx], al
		mov	eax, [ebx+134h]
		mov	[ecx+1], al
		mov	eax, [esp+5Ch+arg_4]
		mov	[ebx+130h], eax
		mov	eax, [ebx+134h]
		add	eax, 5
		mov	[ebx+134h], eax
		add	eax, [esp+5Ch+var_20]
		mov	ecx, [esp+5Ch+var_44]
		mov	[ecx+108h], eax
		mov	eax, [ebp+58h]
		mov	esi, [esp+5Ch+var_48]
		mov	[eax+168h], esi
		mov	edx, [esp+5Ch+var_38]
		mov	[eax+174h], edx
		mov	edi, [esp+5Ch+arg_4]
		mov	[eax+16Ch], edi
		mov	[eax+170h], esi
		mov	[esp+5Ch+var_50], esi
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E412AF0
		mov	ebx, eax

loc_6E41362B:				; CODE XREF: sub_6E4132F0+3E2j
		test	ebx, ebx
		jle	loc_6E4133BB
		cmp	[esp+5Ch+var_40], ebx
		jz	short loc_6E413669
		cmp	[esp+5Ch+arg_4], 17h
		jz	short loc_6E413660

loc_6E413640:				; CODE XREF: sub_6E4132F0+377j
		sub	[esp+5Ch+var_40], ebx
		add	[esp+5Ch+var_3C], ebx
		mov	edi, [esp+5Ch+var_40]
		jmp	loc_6E413360
; ---------------------------------------------------------------------------
		jmp	short loc_6E413660
; ---------------------------------------------------------------------------
		align 10h

loc_6E413660:				; CODE XREF: sub_6E4132F0+34Ej
					; sub_6E4132F0+361j
		test	byte ptr [ebp+104h], 1
		jz	short loc_6E413640

loc_6E413669:				; CODE XREF: sub_6E4132F0+347j
		mov	eax, [ebp+58h]
		mov	dword ptr [eax+0E4h], 0
		add	ebx, [esp+5Ch+var_3C]
		mov	eax, ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E413690:				; CODE XREF: sub_6E4132F0+ABj
		mov	eax, [ebp+8]
		mov	eax, [eax+3Ch]
		mov	[esp+5Ch+var_5C], ebp
		call	eax
		test	eax, eax
		jg	loc_6E4133A1
		mov	ebx, eax
		jmp	loc_6E4133BB
; ---------------------------------------------------------------------------
		align 10h

loc_6E4136B0:				; CODE XREF: sub_6E4132F0+9Dj
		mov	eax, [esp+5Ch+var_48]
		mov	[esp+5Ch+var_50], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_54], eax
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E412AF0
		mov	ebx, eax
		jmp	loc_6E41362B
; ---------------------------------------------------------------------------
		align 10h

loc_6E4136E0:				; CODE XREF: sub_6E4132F0+FBj
					; sub_6E4132F0+11Fj
		mov	esi, [ebp+8Ch]
		test	esi, esi
		jnz	loc_6E413870

loc_6E4136EE:				; CODE XREF: sub_6E4132F0+109j
		mov	[esp+5Ch+var_2C], 0
		jmp	loc_6E413463
; ---------------------------------------------------------------------------
		align 10h

loc_6E413700:				; CODE XREF: sub_6E4132F0+27Ej
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_54], 1
		mov	ecx, [esp+5Ch+var_34]
		add	ecx, [ebx+134h]
		add	ecx, edx
		mov	[esp+5Ch+var_24], edx
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebp
		call	eax
		test	eax, eax
		js	loc_6E41380C
		mov	eax, [esp+5Ch+var_2C]
		add	[ebx+134h], eax
		mov	edx, [esp+5Ch+var_24]
		jmp	loc_6E413574
; ---------------------------------------------------------------------------
		align 10h

loc_6E413750:				; CODE XREF: sub_6E4132F0+1B5j
		mov	esi, [ebp+190h]
		test	esi, esi
		jnz	loc_6E4134AB
		mov	eax, [ebp+0]
		mov	ecx, eax
		sar	ecx, 8
		cmp	ecx, 3
		jnz	loc_6E4134AE
		cmp	eax, 301h
		jle	loc_6E4134AE
		lea	eax, [edx+3]
		mov	[esp+5Ch+var_30], eax
		mov	al, 1
		jmp	loc_6E4134B5
; ---------------------------------------------------------------------------
		align 10h

loc_6E413790:				; CODE XREF: sub_6E4132F0+1E0j
		mov	[esp+5Ch+var_34], edx
		mov	[esp+5Ch+var_5C], eax
		call	EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		cmp	eax, 2
		mov	edx, [esp+5Ch+var_34]
		jz	loc_6E413940
		cmp	eax, 6
		setz	al
		xor	ecx, ecx
		mov	cl, al
		mov	[esp+5Ch+var_34], ecx
		shl	[esp+5Ch+var_34], 3
		mov	esi, ecx
		mov	[esp+5Ch+var_28], esi
		shl	[esp+5Ch+var_28], 3
		mov	eax, [esp+5Ch+var_34]
		jmp	loc_6E4134EA
; ---------------------------------------------------------------------------
		align 10h

loc_6E4137E0:				; CODE XREF: sub_6E4132F0+25Cj
		mov	[esp+5Ch+var_4C], 348h
		mov	[esp+5Ch+var_50], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+5Ch+var_54], 8Dh
		mov	[esp+5Ch+var_58], 68h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error

loc_6E41380C:				; CODE XREF: sub_6E4132F0+141j
					; sub_6E4132F0+2B9j ...
		mov	ebx, 0FFFFFFFFh
		jmp	loc_6E4133BB
; ---------------------------------------------------------------------------
		align 10h

loc_6E413820:				; CODE XREF: sub_6E4132F0+21Fj
		mov	eax, [esp+5Ch+var_48]
		mov	edi, ecx
		mov	esi, [esp+5Ch+var_38]
		cmp	eax, 4
		jnb	loc_6E4138C0
		xor	ecx, ecx
		test	al, 2
		jnz	short loc_6E4138A0

loc_6E413839:				; CODE XREF: sub_6E4132F0+5F0j
		test	al, 1
		jnz	short loc_6E413880

loc_6E41383D:				; CODE XREF: sub_6E4132F0+5BDj
		mov	eax, [ebx+13Ch]
		mov	[ebx+140h], eax
		jmp	loc_6E413568
; ---------------------------------------------------------------------------
		align 10h

loc_6E413850:				; CODE XREF: sub_6E4132F0+BDj
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E416BE0
		test	eax, eax
		jnz	loc_6E4133B3
		jmp	short loc_6E41380C
; ---------------------------------------------------------------------------
		align 10h

loc_6E413870:				; CODE XREF: sub_6E4132F0+3F8j
		mov	[esp+5Ch+var_2C], 0
		jmp	loc_6E413437
; ---------------------------------------------------------------------------
		align 10h

loc_6E413880:				; CODE XREF: sub_6E4132F0+54Bj
					; sub_6E4132F0+5BFj
		mov	al, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_24], al
		mov	[edi+ecx], al
		mov	eax, [ebx+13Ch]
		mov	[ebx+140h], eax
		jmp	loc_6E413568
; ---------------------------------------------------------------------------
		align 10h

loc_6E4138A0:				; CODE XREF: sub_6E4132F0+547j
					; sub_6E4132F0+5F6j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		test	al, 1
		jz	short loc_6E41383D
		jmp	short loc_6E413880
; ---------------------------------------------------------------------------
		jmp	short loc_6E4138C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4138C0:				; CODE XREF: sub_6E4132F0+53Dj
					; sub_6E4132F0+5C1j
		test	cl, 1
		jnz	loc_6E4139E4

loc_6E4138C9:				; CODE XREF: sub_6E4132F0+705j
		test	edi, 2
		jnz	loc_6E4139FA

loc_6E4138D5:				; CODE XREF: sub_6E4132F0+719j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	ecx, ecx
		test	al, 2
		jz	loc_6E413839
		jmp	short loc_6E4138A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4138F0:				; CODE XREF: sub_6E4132F0+49j
		mov	eax, [ebp+20h]
		mov	[esp+5Ch+var_5C], ebp
		call	eax
		test	eax, eax
		js	loc_6E413A0E
		jnz	loc_6E41333F
		mov	[esp+5Ch+var_4C], 27Dh
		mov	[esp+5Ch+var_50], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+5Ch+var_54], 0E5h
		mov	[esp+5Ch+var_58], 9Eh
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	ebx, 0FFFFFFFFh
		jmp	loc_6E4133C8
; ---------------------------------------------------------------------------
		align 10h

loc_6E413940:				; CODE XREF: sub_6E4132F0+4B8j
		mov	eax, [ebp+8Ch]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_CIPHER_CTX_iv_length
		mov	[esp+5Ch+var_28], eax
		cmp	eax, 1
		mov	edx, [esp+5Ch+var_34]
		jle	loc_6E4134D6
		mov	[esp+5Ch+var_34], eax
		jmp	loc_6E4134EA
; ---------------------------------------------------------------------------

loc_6E413968:				; CODE XREF: sub_6E4132F0+1Dj
		mov	[esp+5Ch+var_54], offset aSS3WnumInt_max ; "s->s3->wnum	<= INT_MAX"
		mov	[esp+5Ch+var_58], 274h
		mov	[esp+5Ch+var_5C], offset aS3_pkt_c ; "s3_pkt.c"
		call	OpenSSLDie
		mov	eax, [ebp+58h]
		jmp	loc_6E413313
; ---------------------------------------------------------------------------

loc_6E41398C:				; CODE XREF: sub_6E4132F0+163j
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], 0
		mov	ecx, [esp+5Ch+var_38]
		mov	edx, 17h
		mov	eax, ebp
		call	sub_6E412CC0
		test	eax, eax
		jle	loc_6E41380C
		cmp	eax, 55h
		jg	loc_6E413A4B
		mov	edx, [ebp+58h]
		mov	dword ptr [edx+0E4h], 1
		mov	edi, [esp+5Ch+var_44]
		mov	edx, [edi+104h]
		add	edx, eax
		add	edx, [edi+0FCh]
		mov	[esp+5Ch+var_20], eax
		jmp	loc_6E413485
; ---------------------------------------------------------------------------

loc_6E4139E4:				; CODE XREF: sub_6E4132F0+5D3j
		mov	al, [esi]
		mov	byte ptr [esp+5Ch+var_24], al
		mov	[ecx], al
		inc	edi
		lea	esi, [esi+1]
		mov	eax, [esp+5Ch+var_48]
		dec	eax
		jmp	loc_6E4138C9
; ---------------------------------------------------------------------------

loc_6E4139FA:				; CODE XREF: sub_6E4132F0+5DFj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E4138D5
; ---------------------------------------------------------------------------

loc_6E413A0E:				; CODE XREF: sub_6E4132F0+60Aj
		mov	ebx, eax
		jmp	loc_6E4133C8
; ---------------------------------------------------------------------------

loc_6E413A15:				; CODE XREF: sub_6E4132F0+57j
		mov	[esp+5Ch+var_4C], 28Ch
		mov	[esp+5Ch+var_50], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+5Ch+var_54], 10Fh
		mov	[esp+5Ch+var_58], 9Eh
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	ebx, 0FFFFFFFFh
		jmp	loc_6E4133C8
; ---------------------------------------------------------------------------

loc_6E413A4B:				; CODE XREF: sub_6E4132F0+6C6j
		mov	[esp+5Ch+var_4C], 2FAh
		mov	[esp+5Ch+var_50], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+5Ch+var_54], 44h
		mov	[esp+5Ch+var_58], 68h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	ebx, 0FFFFFFFFh
		jmp	loc_6E4133BB
sub_6E4132F0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E413A90
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E413A90	proc near		; CODE XREF: .text:6E413A81j
					; sub_6E413BF0+DDBp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+34h]
		and	eax, 2000h
		cmp	eax, 1
		sbb	esi, esi
		and	esi, 0FFFFFFF0h
		add	esi, 21h
		mov	eax, [ebx+58h]
		mov	edx, [eax+378h]
		test	edx, edx
		jz	loc_6E413B60

loc_6E413ABD:				; CODE XREF: sub_6E413A90+14Cj
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+10h]
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	eax
		test	eax, eax
		jz	short loc_6E413B4C
		test	byte ptr [ebx+35h], 10h
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		jz	loc_6E413BB0
		mov	ecx, [eax+28h]
		mov	esi, [eax+2Ch]

loc_6E413AE9:				; CODE XREF: sub_6E413A90+126j
		mov	eax, [eax+14h]
		mov	edx, [ebx+58h]
		add	edx, 2B8h
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], ecx
		mov	[esp+2Ch+var_2C], ebx
		call	eax
		test	eax, eax
		jz	short loc_6E413B20
		mov	edx, [ebx+58h]
		mov	[edx+338h], eax
		mov	eax, 1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E413B20:				; CODE XREF: sub_6E413A90+78j
		mov	[esp+2Ch+var_1C], 5E6h
		mov	[esp+2Ch+var_20], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+2Ch+var_24], 44h
		mov	[esp+2Ch+var_28], 124h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error

loc_6E413B4C:				; CODE XREF: sub_6E413A90+41j
		xor	eax, eax

loc_6E413B4E:				; CODE XREF: sub_6E413A90+154j
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E413B60:				; CODE XREF: sub_6E413A90+27j
		mov	edx, [ebx+0C0h]
		test	edx, edx
		jz	short loc_6E413B71
		mov	ecx, [edx+10h]
		test	ecx, ecx
		jnz	short loc_6E413BC0

loc_6E413B71:				; CODE XREF: sub_6E413A90+D8j
		mov	[esp+2Ch+var_1C], 5CAh
		mov	[esp+2Ch+var_20], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+2Ch+var_24], 85h
		mov	[esp+2Ch+var_28], 124h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E413BB0:				; CODE XREF: sub_6E413A90+4Dj
		mov	ecx, [eax+20h]
		mov	esi, [eax+24h]
		jmp	loc_6E413AE9
; ---------------------------------------------------------------------------
		align 10h

loc_6E413BC0:				; CODE XREF: sub_6E413A90+DFj
		mov	eax, [eax+344h]
		mov	[edx+0B4h], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+8]
		mov	[esp+2Ch+var_2C], ebx
		call	eax
		test	eax, eax
		jnz	loc_6E413ABD
		xor	eax, eax
		jmp	loc_6E413B4E
sub_6E413A90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E413BF0	proc near		; DATA XREF: .rdata:6E44B074o
					; .rdata:6E44B134o ...

var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= byte ptr -9Ch
var_5C		= byte ptr -5Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	ebp, [esp+0DCh+arg_0]
		mov	eax, [ebp+58h]
		mov	eax, [eax+0ECh]
		test	eax, eax
		jz	loc_6E414E27

loc_6E413C12:				; CODE XREF: sub_6E413BF0+1241j
		mov	eax, [esp+0DCh+arg_4]
		test	eax, eax
		jnz	loc_6E414660

loc_6E413C21:				; CODE XREF: sub_6E413BF0+A78j
		mov	eax, [esp+0DCh+arg_10]
		test	eax, eax
		jnz	loc_6E4146CA

loc_6E413C30:				; CODE XREF: sub_6E413BF0+B7Bj
		mov	ebx, [ebp+1Ch]
		test	ebx, ebx
		jz	loc_6E4146DF

loc_6E413C3B:				; CODE XREF: sub_6E413BF0+AE9j
					; sub_6E413BF0+AFAj ...
		mov	ebx, [ebp+58h]
		mov	[esp+0DCh+var_A0], 0
		mov	edi, ebx
		nop
		lea	esi, [esi+0]

loc_6E413C50:				; CODE XREF: sub_6E413BF0+1A6j
					; sub_6E413BF0+705j ...
		mov	dword ptr [ebp+18h], 1
		mov	ecx, [edi+110h]
		test	ecx, ecx
		jz	loc_6E413DE0
		cmp	dword ptr [ebp+38h], 0F1h
		jz	loc_6E413DE0
		mov	ebx, edi

loc_6E413C74:				; CODE XREF: sub_6E413BF0+EB8j
		mov	eax, [ebx+180h]
		test	eax, eax
		jz	short loc_6E413C8B
		cmp	dword ptr [edi+10Ch], 16h
		jnz	loc_6E414F1F

loc_6E413C8B:				; CODE XREF: sub_6E413BF0+8Cj
		mov	eax, [ebp+30h]
		and	eax, 2
		mov	[esp+0DCh+var_B4], eax
		jnz	loc_6E414C47
		mov	eax, [edi+10Ch]
		cmp	eax, [esp+0DCh+arg_4]
		jz	loc_6E414C65
		cmp	eax, 16h
		jz	loc_6E4143B0
		cmp	eax, 15h
		jz	loc_6E4144B0
		cmp	eax, 18h
		jz	loc_6E414EC9

loc_6E413CC9:				; CODE XREF: sub_6E413BF0+843j
		mov	eax, [ebp+24h]
		test	eax, eax
		jz	loc_6E414250
		mov	[esp+0DCh+var_DC], ebp
		call	SSL_state
		cmp	eax, 3
		mov	eax, [ebp+58h]
		jz	loc_6E414840

loc_6E413CE8:				; CODE XREF: sub_6E413BF0+66Aj
					; sub_6E413BF0+677j ...
		cmp	dword ptr [eax+158h], 1
		jbe	loc_6E4144D0
		xor	ebx, ebx
		mov	bl, [eax+154h]
		movzx	esi, byte ptr [eax+155h]
		and	esi, 0FFh
		mov	dword ptr [eax+158h], 0
		mov	edx, [ebp+64h]
		test	edx, edx
		jz	short loc_6E413D4F
		mov	ecx, [ebp+68h]
		mov	edi, [ebp+0]
		mov	[esp+0DCh+var_C4], ecx
		mov	[esp+0DCh+var_C8], ebp
		mov	[esp+0DCh+var_CC], 2
		add	eax, 154h
		mov	[esp+0DCh+var_D0], eax
		mov	[esp+0DCh+var_D4], 15h
		mov	[esp+0DCh+var_D8], edi
		mov	[esp+0DCh+var_DC], 0
		call	edx

loc_6E413D4F:				; CODE XREF: sub_6E413BF0+129j
		mov	edi, [ebp+0D0h]
		test	edi, edi
		jz	loc_6E414730

loc_6E413D5D:				; CODE XREF: sub_6E413BF0+B4Ej
					; sub_6E413BF0+B64j
		mov	eax, ebx
		shl	eax, 8
		or	eax, esi
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], 4004h
		mov	[esp+0DCh+var_DC], ebp
		call	edi
		mov	[esp+0DCh+var_A0], edi

loc_6E413D79:				; CODE XREF: sub_6E413BF0+B5Aj
		cmp	ebx, 1
		jnz	loc_6E414F55
		mov	edi, [ebp+58h]
		mov	[edi+184h], esi
		test	esi, esi
		jz	loc_6E414FF8
		cmp	esi, 64h
		jnz	loc_6E413C50
		mov	[esp+0DCh+var_CC], 508h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 153h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 28h
		jmp	loc_6E414B8D
; ---------------------------------------------------------------------------
		align 10h

loc_6E413DE0:				; CODE XREF: sub_6E413BF0+6Fj
					; sub_6E413BF0+7Cj
		lea	eax, [edi+10Ch]
		mov	[esp+0DCh+var_A4], eax
		mov	eax, [ebp+0C0h]
		mov	[esp+0DCh+var_B0], eax
		test	byte ptr [ebp+100h], 20h
		jnz	loc_6E414480
		mov	[esp+0DCh+var_B4], 4540h
		mov	[esp+0DCh+var_B8], 0

loc_6E413E11:				; CODE XREF: sub_6E413BF0+8AEj
		mov	[esp+0DCh+var_AC], 21h
		mov	eax, [esp+0DCh+var_B8]
		add	eax, 4400h
		mov	[esp+0DCh+var_BC], eax

loc_6E413E26:				; CODE XREF: sub_6E413BF0+542j
		cmp	dword ptr [ebp+38h], 0F1h
		jnz	loc_6E414170
		mov	ecx, [ebp+50h]
		cmp	ecx, 4
		jbe	loc_6E414170
		mov	eax, [edi+110h]
		sub	ecx, 5
		cmp	ecx, eax
		jb	loc_6E41421F

loc_6E413E50:				; CODE XREF: sub_6E413BF0+629j
					; sub_6E413BF0+655j
		mov	dword ptr [ebp+38h], 0F0h
		mov	edx, [ebp+4Ch]
		lea	ecx, [edx+5]
		mov	[edi+11Ch], ecx
		cmp	[esp+0DCh+var_B4], eax
		jb	loc_6E4149E0
		mov	[edi+118h], ecx
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax]
		mov	[esp+0DCh+var_D8], 0
		mov	[esp+0DCh+var_DC], ebp
		call	eax
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E414A39
		mov	esi, [esp+0DCh+var_B0]
		test	esi, esi
		jz	loc_6E414090
		mov	ecx, [ebp+80h]
		test	ecx, ecx
		jz	loc_6E414090
		mov	eax, [ebp+84h]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E414090
		mov	eax, [ebp+84h]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_MD_CTX_md
		mov	[esp+0DCh+var_DC], eax
		call	EVP_MD_size
		mov	esi, eax
		cmp	eax, 40h
		ja	loc_6E414450

loc_6E413EE3:				; CODE XREF: sub_6E413BF0+87Cj
		mov	ecx, [edi+10Ch]
		shr	ecx, 8
		add	ecx, [edi+110h]
		cmp	esi, ecx
		ja	loc_6E414C01
		mov	[esp+0DCh+var_A8], ecx
		mov	eax, [ebp+80h]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		cmp	eax, 2
		mov	ecx, [esp+0DCh+var_A8]
		jnz	short loc_6E413F25
		lea	eax, [esi+1]
		cmp	ecx, eax
		jb	loc_6E414C01

loc_6E413F25:				; CODE XREF: sub_6E413BF0+328j
		mov	[esp+0DCh+var_A8], ecx
		mov	eax, [ebp+80h]
		mov	[esp+0DCh+var_DC], eax
		call	EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		cmp	eax, 2
		mov	ecx, [esp+0DCh+var_A8]
		jz	loc_6E414570
		mov	eax, [edi+110h]
		sub	eax, esi
		mov	[edi+110h], eax
		add	eax, [edi+118h]
		mov	[esp+0DCh+var_A8], eax
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	[esp+0DCh+var_D4], 0
		lea	edx, [esp+0DCh+var_9C]
		mov	[esp+0DCh+var_D8], edx
		mov	[esp+0DCh+var_DC], ebp
		call	eax
		test	eax, eax
		js	short loc_6E413FA3
		mov	ecx, [esp+0DCh+var_A8]
		test	ecx, ecx
		jz	short loc_6E413FA3

loc_6E413F8B:				; CODE XREF: sub_6E413BF0+9D2j
		mov	[esp+0DCh+var_D4], esi
		mov	[esp+0DCh+var_D8], ecx
		lea	eax, [esp+0DCh+var_9C]
		mov	[esp+0DCh+var_DC], eax
		call	CRYPTO_memcmp
		test	eax, eax
		jz	short loc_6E413FA8

loc_6E413FA3:				; CODE XREF: sub_6E413BF0+391j
					; sub_6E413BF0+399j ...
		mov	ebx, 0FFFFFFFFh

loc_6E413FA8:				; CODE XREF: sub_6E413BF0+3B1j
		add	esi, [esp+0DCh+var_BC]
		cmp	[edi+110h], esi
		jbe	loc_6E414090

loc_6E413FB8:				; CODE XREF: sub_6E413BF0+4A2j
		mov	[esp+0DCh+var_CC], 206h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 119h
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 14h
		lea	esi, [esi+0]

loc_6E413FF0:				; CODE XREF: sub_6E413BF0+579j
					; sub_6E413BF0+7B1j ...
		mov	edx, [ebp+8]
		mov	edx, [edx+64h]
		mov	edx, [edx+30h]
		mov	[esp+0DCh+var_DC], eax
		call	edx
		cmp	dword ptr [ebp+0], 300h
		jz	loc_6E414720

loc_6E41400B:				; CODE XREF: sub_6E413BF0+B33j
		test	eax, eax
		js	loc_6E4146B3
		mov	bl, al

loc_6E414015:				; CODE XREF: sub_6E413BF0+B3Bj
		mov	edx, [ebp+0C0h]
		test	edx, edx
		jz	short loc_6E414031
		mov	eax, [ebp+0E4h]
		mov	[esp+0DCh+var_D8], edx
		mov	[esp+0DCh+var_DC], eax
		call	SSL_CTX_remove_session

loc_6E414031:				; CODE XREF: sub_6E413BF0+42Dj
		mov	edx, [ebp+58h]
		mov	dword ptr [edx+18Ch], 1
		mov	byte ptr [edx+190h], 2
		mov	edx, [ebp+58h]
		mov	[edx+191h], bl
		mov	eax, [ebp+58h]
		mov	edx, [eax+108h]
		test	edx, edx
		jnz	loc_6E4146B3

loc_6E41405F:				; CODE XREF: sub_6E413BF0+1006j
		mov	eax, [ebp+8]
		mov	eax, [eax+3Ch]
		mov	[esp+0DCh+var_DC], ebp
		call	eax
		mov	[esp+0DCh+var_B4], 0FFFFFFFFh

loc_6E414072:				; CODE XREF: sub_6E413BF0+77Bj
					; sub_6E413BF0+97Aj ...
		mov	eax, [esp+0DCh+var_B4]
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E414090
; ---------------------------------------------------------------------------
		align 10h

loc_6E414090:				; CODE XREF: sub_6E413BF0+2A8j
					; sub_6E413BF0+2B6j ...
		test	ebx, ebx
		js	loc_6E413FB8
		mov	eax, [ebp+88h]
		test	eax, eax
		jz	short loc_6E4140FD
		mov	esi, [esp+0DCh+var_BC]
		cmp	[edi+110h], esi
		ja	loc_6E414AAD
		mov	ebx, [ebp+58h]
		mov	esi, [ebx+118h]
		mov	ecx, [ebx+120h]
		mov	edx, [ebx+110h]
		mov	[esp+0DCh+var_CC], edx
		mov	[esp+0DCh+var_D0], esi
		mov	[esp+0DCh+var_D4], 4000h
		mov	[esp+0DCh+var_D8], ecx
		mov	[esp+0DCh+var_DC], eax
		call	COMP_expand_block
		test	eax, eax
		js	loc_6E414370
		mov	[ebx+110h], eax
		mov	eax, [ebx+120h]
		mov	[ebx+118h], eax

loc_6E4140FD:				; CODE XREF: sub_6E413BF0+4B0j
		mov	eax, [edi+110h]
		mov	edx, [esp+0DCh+var_B8]
		lea	ecx, [edx+4000h]
		cmp	eax, ecx
		ja	loc_6E414A6F
		mov	dword ptr [edi+114h], 0
		mov	dword ptr [ebp+50h], 0
		test	eax, eax
		jnz	loc_6E414AA5
		dec	[esp+0DCh+var_AC]
		jnz	loc_6E413E26
		mov	[esp+0DCh+var_CC], 230h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 12Ah
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 0Ah
		jmp	loc_6E413FF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E414170:				; CODE XREF: sub_6E413BF0+23Dj
					; sub_6E413BF0+249j
		mov	[esp+0DCh+var_D0], 0
		mov	eax, [ebp+58h]
		mov	eax, [eax+0F0h]
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], 5
		mov	[esp+0DCh+var_DC], ebp
		call	sub_6E4125B0
		test	eax, eax
		jle	loc_6E414920
		mov	dword ptr [ebp+38h], 0F1h
		mov	ebx, [ebp+4Ch]
		xor	eax, eax
		mov	al, [ebx]
		mov	[edi+10Ch], eax
		xor	eax, eax
		mov	al, [ebx+1]
		shl	eax, 8
		xor	ecx, ecx
		mov	cl, [ebx+2]
		or	ecx, eax
		xor	eax, eax
		mov	al, [ebx+3]
		shl	eax, 8
		mov	dl, [ebx+4]
		and	edx, 0FFh
		or	eax, edx
		mov	[edi+110h], eax
		mov	edx, [ebp+10Ch]
		test	edx, edx
		jnz	short loc_6E4141EF
		movsx	esi, cx
		cmp	esi, [ebp+0]
		jnz	loc_6E414D77

loc_6E4141EF:				; CODE XREF: sub_6E413BF0+5F1j
		sar	cx, 8
		cmp	cx, 3
		jnz	loc_6E414AE3
		mov	ecx, [ebp+58h]
		mov	ecx, [ecx+0F0h]
		sub	ecx, 5
		cmp	eax, ecx
		ja	loc_6E414B26
		mov	ecx, [ebp+50h]
		sub	ecx, 5
		cmp	ecx, eax
		jnb	loc_6E413E50

loc_6E41421F:				; CODE XREF: sub_6E413BF0+25Aj
		mov	[esp+0DCh+var_D0], 1
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], eax
		mov	[esp+0DCh+var_DC], ebp
		call	sub_6E4125B0
		test	eax, eax
		jle	loc_6E414920
		mov	eax, [edi+110h]
		jmp	loc_6E413E50
; ---------------------------------------------------------------------------
		align 10h

loc_6E414250:				; CODE XREF: sub_6E413BF0+DEj
		mov	eax, [ebp+58h]
		cmp	dword ptr [eax+160h], 3
		jbe	loc_6E413CE8
		cmp	byte ptr [eax+15Ch], 0
		jnz	loc_6E413CE8
		mov	edx, [ebp+0C0h]
		test	edx, edx
		jz	loc_6E413CE8
		mov	esi, [edx+0B4h]
		test	esi, esi
		jz	loc_6E413CE8
		mov	dword ptr [eax+160h], 0
		test	dword ptr [eax+15Ch], 0FFFFFF00h
		jnz	loc_6E4150DF
		mov	edx, [ebp+64h]
		test	edx, edx
		jz	short loc_6E4142DE
		mov	ebx, [ebp+68h]
		mov	ecx, [ebp+0]
		mov	[esp+0DCh+var_C4], ebx
		mov	[esp+0DCh+var_C8], ebp
		mov	[esp+0DCh+var_CC], 4
		add	eax, 15Ch
		mov	[esp+0DCh+var_D0], eax
		mov	[esp+0DCh+var_D4], 16h
		mov	[esp+0DCh+var_D8], ecx
		mov	[esp+0DCh+var_DC], 0
		call	edx

loc_6E4142DE:				; CODE XREF: sub_6E413BF0+6B8j
		mov	[esp+0DCh+var_DC], ebp
		call	SSL_state
		cmp	eax, 3
		jnz	loc_6E414439
		mov	edi, [ebp+58h]
		test	byte ptr [edi],	1
		jnz	loc_6E413C50
		mov	ebx, [edi+194h]
		test	ebx, ebx
		jnz	loc_6E413C50
		mov	[esp+0DCh+var_DC], ebp
		call	sub_6E4105E0
		mov	[esp+0DCh+var_DC], ebp
		call	sub_6E410630
		test	eax, eax
		jz	loc_6E414439
		mov	eax, [ebp+20h]
		mov	[esp+0DCh+var_DC], ebp
		call	eax
		test	eax, eax
		js	loc_6E414920
		jnz	loc_6E414603
		mov	[esp+0DCh+var_CC], 4B4h

loc_6E41433F:				; CODE XREF: sub_6E413BF0+B1Ej
					; sub_6E413BF0+157Dj
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 0E5h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	[esp+0DCh+var_B4], 0FFFFFFFFh
		jmp	loc_6E414072
; ---------------------------------------------------------------------------

loc_6E414370:				; CODE XREF: sub_6E413BF0+4F5j
		mov	[esp+0DCh+var_CC], 213h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 6Bh
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 1Eh
		jmp	loc_6E413FF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4143B0:				; CODE XREF: sub_6E413BF0+C1j
		lea	eax, [ebx+15Ch]
		mov	[esp+0DCh+var_B8], eax
		add	ebx, 160h
		mov	[esp+0DCh+var_B0], 4

loc_6E4143C8:				; CODE XREF: sub_6E413BF0+8D8j
		mov	eax, [ebx]
		mov	edx, [edi+110h]
		mov	ecx, [esp+0DCh+var_B0]
		sub	ecx, eax
		cmp	ecx, edx
		jbe	short loc_6E4143DC
		mov	ecx, edx

loc_6E4143DC:				; CODE XREF: sub_6E413BF0+7E8j
		lea	edx, [ecx-1]
		test	ecx, ecx
		jz	short loc_6E41442F
		mov	[esp+0DCh+arg_0], ebp
		jmp	short loc_6E4143F2
; ---------------------------------------------------------------------------
		align 10h

loc_6E4143F0:				; CODE XREF: sub_6E413BF0+834j
		mov	eax, [ebx]

loc_6E4143F2:				; CODE XREF: sub_6E413BF0+7FAj
		lea	ecx, [eax+1]
		mov	[ebx], ecx
		mov	esi, [edi+118h]
		mov	ecx, [edi+114h]
		lea	ebp, [ecx+1]
		mov	[edi+114h], ebp
		mov	cl, [esi+ecx]
		mov	byte ptr [esp+0DCh+var_BC], cl
		mov	esi, [esp+0DCh+var_B8]
		mov	[esi+eax], cl
		dec	dword ptr [edi+110h]
		dec	edx
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_6E4143F0
		mov	ebp, [esp+0DCh+arg_0]
		mov	eax, [ebx]

loc_6E41442F:				; CODE XREF: sub_6E413BF0+7F1j
		cmp	[esp+0DCh+var_B0], eax
		jbe	loc_6E413CC9

loc_6E414439:				; CODE XREF: sub_6E413BF0+6F9j
					; sub_6E413BF0+72Bj ...
		mov	edi, [ebp+58h]
		jmp	loc_6E413C50
; ---------------------------------------------------------------------------
		jmp	short loc_6E414450
; ---------------------------------------------------------------------------
		align 10h

loc_6E414450:				; CODE XREF: sub_6E413BF0+2EDj
					; sub_6E413BF0+851j
		mov	[esp+0DCh+var_D4], offset aMac_sizeEvp_ma ; "mac_size <= EVP_MAX_MD_SIZE"
		mov	[esp+0DCh+var_D8], 1CAh
		mov	[esp+0DCh+var_DC], offset aS3_pkt_c ; "s3_pkt.c"
		call	OpenSSLDie
		jmp	loc_6E413EE3
; ---------------------------------------------------------------------------
		jmp	short loc_6E414480
; ---------------------------------------------------------------------------
		align 10h

loc_6E414480:				; CODE XREF: sub_6E413BF0+20Bj
					; sub_6E413BF0+881j
		mov	ecx, [edi+0E8h]
		test	ecx, ecx
		jz	loc_6E41503D
		mov	[esp+0DCh+var_B4], 8540h
		mov	[esp+0DCh+var_B8], 4000h
		jmp	loc_6E413E11
; ---------------------------------------------------------------------------
		align 10h

loc_6E4144B0:				; CODE XREF: sub_6E413BF0+CAj
		lea	eax, [ebx+154h]
		mov	[esp+0DCh+var_B8], eax
		add	ebx, 158h
		mov	[esp+0DCh+var_B0], 2
		jmp	loc_6E4143C8
; ---------------------------------------------------------------------------
		align 10h

loc_6E4144D0:				; CODE XREF: sub_6E413BF0+FFj
		test	byte ptr [ebp+30h], 1
		jnz	loc_6E415076
		mov	edx, [edi+10Ch]
		cmp	edx, 14h
		jz	loc_6E414933
		cmp	dword ptr [eax+160h], 3
		ja	loc_6E4145D0

loc_6E4144F6:				; CODE XREF: sub_6E413BF0+9E5j
		cmp	edx, 14h
		jl	loc_6E414A16
		cmp	edx, 16h
		jle	loc_6E414B5C
		cmp	edx, 17h
		jnz	loc_6E414A16
		mov	edi, [eax+1A0h]
		test	edi, edi
		jz	loc_6E414DF1
		mov	esi, [eax+198h]
		test	esi, esi
		jz	loc_6E414DF1
		mov	edx, [ebp+34h]
		test	dh, 10h
		jz	short loc_6E414540
		lea	ecx, [edx-1110h]
		cmp	ecx, 10h
		jbe	short loc_6E414558

loc_6E414540:				; CODE XREF: sub_6E413BF0+943j
		test	dh, 20h
		jz	loc_6E414DF1
		sub	edx, 2110h
		cmp	edx, 10h
		ja	loc_6E414DF1

loc_6E414558:				; CODE XREF: sub_6E413BF0+94Ej
		mov	dword ptr [eax+1A0h], 2
		mov	[esp+0DCh+var_B4], 0FFFFFFFFh
		jmp	loc_6E414072
; ---------------------------------------------------------------------------
		align 10h

loc_6E414570:				; CODE XREF: sub_6E413BF0+353j
		mov	[esp+0DCh+var_D0], ecx
		mov	[esp+0DCh+var_D4], esi
		mov	eax, [esp+0DCh+var_A4]
		mov	[esp+0DCh+var_D8], eax
		lea	eax, [esp+0DCh+var_5C]
		mov	[esp+0DCh+var_DC], eax
		call	sub_6E4176C0
		sub	[edi+110h], esi
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	[esp+0DCh+var_D4], 0
		lea	edx, [esp+0DCh+var_9C]
		mov	[esp+0DCh+var_D8], edx
		mov	[esp+0DCh+var_DC], ebp
		call	eax
		test	eax, eax
		js	loc_6E413FA3
		lea	ecx, [esp+0DCh+var_5C]
		jmp	loc_6E413F8B
; ---------------------------------------------------------------------------
		align 10h

loc_6E4145D0:				; CODE XREF: sub_6E413BF0+900j
		mov	ecx, [ebp+1Ch]
		test	ecx, ecx
		jnz	loc_6E4144F6
		mov	edx, [ebp+34h]
		and	edx, 0FFFh
		cmp	edx, 3
		jz	loc_6E415001

loc_6E4145ED:				; CODE XREF: sub_6E413BF0+1414j
					; sub_6E413BF0+143Ej
		mov	eax, [ebp+20h]
		mov	[esp+0DCh+var_DC], ebp
		call	eax
		test	eax, eax
		js	loc_6E414920
		jz	loc_6E415165

loc_6E414603:				; CODE XREF: sub_6E413BF0+741j
		test	byte ptr [ebp+104h], 4
		jnz	loc_6E414439
		mov	edi, [ebp+58h]
		mov	eax, [edi+0F8h]
		test	eax, eax
		jnz	loc_6E413C50
		mov	dword ptr [ebp+18h], 3
		mov	[esp+0DCh+var_DC], ebp
		call	SSL_get_rbio
		mov	ebx, eax
		mov	[esp+0DCh+var_D8], 0Fh
		mov	[esp+0DCh+var_DC], eax
		call	BIO_clear_flags
		mov	[esp+0DCh+var_D8], 9
		mov	[esp+0DCh+var_DC], ebx
		call	BIO_set_flags
		mov	[esp+0DCh+var_B4], 0FFFFFFFFh
		jmp	loc_6E414072
; ---------------------------------------------------------------------------
		align 10h

loc_6E414660:				; CODE XREF: sub_6E413BF0+2Bj
		cmp	[esp+0DCh+arg_4], 17h
		jz	loc_6E413C21
		cmp	[esp+0DCh+arg_4], 16h
		jnz	short loc_6E414687
		mov	edx, [esp+0DCh+arg_10]
		test	edx, edx
		jz	loc_6E414760

loc_6E414687:				; CODE XREF: sub_6E413BF0+A86j
					; sub_6E413BF0+AE2j
		mov	[esp+0DCh+var_CC], 3EBh
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 44h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error

loc_6E4146B3:				; CODE XREF: sub_6E413BF0+41Dj
					; sub_6E413BF0+469j ...
		mov	[esp+0DCh+var_B4], 0FFFFFFFFh
		mov	eax, [esp+0DCh+var_B4]
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E4146CA:				; CODE XREF: sub_6E413BF0+3Aj
		cmp	[esp+0DCh+arg_4], 17h
		jnz	short loc_6E414687
		mov	ebx, [ebp+1Ch]
		test	ebx, ebx
		jnz	loc_6E413C3B

loc_6E4146DF:				; CODE XREF: sub_6E413BF0+45j
		mov	[esp+0DCh+var_DC], ebp
		call	SSL_state
		test	ah, 30h
		jz	loc_6E413C3B
		mov	eax, [ebp+20h]
		mov	[esp+0DCh+var_DC], ebp
		call	eax
		test	eax, eax
		js	loc_6E414920
		jnz	loc_6E413C3B
		mov	[esp+0DCh+var_CC], 40Eh
		jmp	loc_6E41433F
; ---------------------------------------------------------------------------
		align 10h

loc_6E414720:				; CODE XREF: sub_6E413BF0+415j
		cmp	eax, 46h
		jnz	loc_6E41400B
		mov	bl, 28h
		jmp	loc_6E414015
; ---------------------------------------------------------------------------

loc_6E414730:				; CODE XREF: sub_6E413BF0+167j
		mov	eax, [ebp+0E4h]
		mov	edi, [eax+9Ch]
		test	edi, edi
		jnz	loc_6E413D5D
		mov	edi, [esp+0DCh+var_A0]
		test	edi, edi
		jz	loc_6E413D79
		mov	edi, [esp+0DCh+var_A0]
		jmp	loc_6E413D5D
; ---------------------------------------------------------------------------
		align 10h

loc_6E414760:				; CODE XREF: sub_6E413BF0+A91j
		mov	ecx, [ebp+58h]
		mov	edi, [ecx+160h]
		test	edi, edi
		jz	loc_6E413C30
		lea	eax, [ecx+15Ch]
		mov	esi, [esp+0DCh+arg_C]
		test	esi, esi
		jle	loc_6E4150D2
		mov	edi, [esp+0DCh+arg_C]
		add	edi, eax
		mov	edx, [esp+0DCh+arg_8]
		jmp	short loc_6E4147A8
; ---------------------------------------------------------------------------
		align 10h

loc_6E4147A0:				; CODE XREF: sub_6E413BF0+BDBj
		test	esi, esi
		jz	loc_6E414E40

loc_6E4147A8:				; CODE XREF: sub_6E413BF0+BA6j
		inc	edx
		inc	eax
		mov	bl, [eax-1]
		mov	[edx-1], bl
		mov	ecx, [ebp+58h]
		mov	esi, [ecx+160h]
		dec	esi
		mov	[ecx+160h], esi
		mov	ebx, edx
		sub	ebx, [esp+0DCh+arg_8]
		cmp	eax, edi
		jnz	short loc_6E4147A0
		mov	[esp+0DCh+var_B4], ebx
		test	esi, esi
		jz	loc_6E414072

loc_6E4147D9:				; CODE XREF: sub_6E413BF0+14EAj
		mov	dl, [eax]
		mov	[ecx+15Ch], dl
		mov	edx, [ebp+58h]
		cmp	dword ptr [edx+160h], 1
		jbe	loc_6E414072
		mov	bl, [eax+1]
		mov	[edx+15Dh], bl
		mov	edx, [ebp+58h]
		cmp	dword ptr [edx+160h], 2
		jbe	loc_6E414072
		mov	bl, [eax+2]
		mov	[edx+15Eh], bl
		mov	edx, [ebp+58h]
		cmp	dword ptr [edx+160h], 3
		jbe	loc_6E414072
		mov	al, [eax+3]
		mov	byte ptr [esp+0DCh+var_BC], al
		mov	[edx+15Fh], al
		mov	eax, [esp+0DCh+var_B4]
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E414840:				; CODE XREF: sub_6E413BF0+F2j
		mov	ecx, [eax+418h]
		test	ecx, ecx
		jnz	loc_6E413CE8
		cmp	dword ptr [ebp+0], 300h
		jle	loc_6E413CE8
		cmp	dword ptr [eax+160h], 3
		jbe	loc_6E413CE8
		cmp	byte ptr [eax+15Ch], 1
		jnz	loc_6E413CE8
		mov	edx, [ebp+0C0h]
		test	edx, edx
		jz	loc_6E413CE8
		mov	edx, [edx+0B4h]
		test	edx, edx
		jz	loc_6E413CE8
		mov	edx, [ebp+0E4h]
		test	byte ptr [edx+0A6h], 4
		jnz	loc_6E413CE8
		mov	dword ptr [edi+110h], 0
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+30h]
		mov	[esp+0DCh+var_DC], 64h
		call	eax
		cmp	dword ptr [ebp+0], 300h
		jz	loc_6E415194

loc_6E4148CD:				; CODE XREF: sub_6E413BF0+15A7j
		test	eax, eax
		js	loc_6E414439

loc_6E4148D5:				; CODE XREF: sub_6E413BF0+15AFj
		mov	edx, [ebp+58h]
		mov	dword ptr [edx+18Ch], 1
		mov	byte ptr [edx+190h], 1
		mov	edx, [ebp+58h]
		mov	[edx+191h], al
		mov	edi, [ebp+58h]
		mov	eax, [edi+108h]
		test	eax, eax
		jnz	loc_6E413C50
		mov	eax, [ebp+8]
		mov	eax, [eax+3Ch]
		mov	[esp+0DCh+var_DC], ebp
		call	eax
		mov	edi, [ebp+58h]
		jmp	loc_6E413C50
; ---------------------------------------------------------------------------
		align 10h

loc_6E414920:				; CODE XREF: sub_6E413BF0+5A7j
					; sub_6E413BF0+649j ...
		mov	[esp+0DCh+var_B4], eax
		mov	eax, [esp+0DCh+var_B4]
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E414933:				; CODE XREF: sub_6E413BF0+8F3j
		cmp	dword ptr [edi+110h], 1
		jnz	loc_6E41509C
		mov	esi, [edi+114h]
		test	esi, esi
		jnz	loc_6E41509C
		mov	ecx, [edi+118h]
		cmp	byte ptr [ecx],	1
		jnz	loc_6E41509C
		mov	ebx, [eax+344h]
		test	ebx, ebx
		jz	loc_6E41514B
		mov	edx, [eax]
		test	dl, 80h
		jz	loc_6E414E93
		and	dl, 7Fh
		mov	[eax], edx
		mov	dword ptr [edi+110h], 0
		mov	edx, [ebp+64h]
		test	edx, edx
		jz	short loc_6E4149BE
		mov	ebx, [ebp+68h]
		mov	eax, [ebp+0]
		mov	[esp+0DCh+var_C4], ebx
		mov	[esp+0DCh+var_C8], ebp
		mov	[esp+0DCh+var_CC], 1
		mov	[esp+0DCh+var_D0], ecx
		mov	[esp+0DCh+var_D4], 14h
		mov	[esp+0DCh+var_D8], eax
		mov	[esp+0DCh+var_DC], 0
		call	edx
		mov	eax, [ebp+58h]

loc_6E4149BE:				; CODE XREF: sub_6E413BF0+D9Aj
		mov	dword ptr [eax+180h], 1
		mov	[esp+0DCh+var_DC], ebp
		call	sub_6E413A90
		test	eax, eax
		jnz	loc_6E414439
		jmp	loc_6E4146B3
; ---------------------------------------------------------------------------
		align 10h

loc_6E4149E0:				; CODE XREF: sub_6E413BF0+277j
		mov	[esp+0DCh+var_CC], 1A6h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 96h
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 16h
		jmp	loc_6E413FF0
; ---------------------------------------------------------------------------

loc_6E414A16:				; CODE XREF: sub_6E413BF0+909j
					; sub_6E413BF0+91Bj
		mov	esi, [ebp+0]
		lea	edx, [esi-301h]
		cmp	edx, 1
		ja	loc_6E415158
		mov	dword ptr [edi+110h], 0
		mov	edi, eax
		jmp	loc_6E413C50
; ---------------------------------------------------------------------------

loc_6E414A39:				; CODE XREF: sub_6E413BF0+29Cj
		mov	[esp+0DCh+var_CC], 1B6h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 81h
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 15h
		jmp	loc_6E413FF0
; ---------------------------------------------------------------------------

loc_6E414A6F:				; CODE XREF: sub_6E413BF0+51Fj
		mov	[esp+0DCh+var_CC], 21Ah
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 92h
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 16h
		jmp	loc_6E413FF0
; ---------------------------------------------------------------------------

loc_6E414AA5:				; CODE XREF: sub_6E413BF0+538j
		mov	ebx, [ebp+58h]
		jmp	loc_6E413C74
; ---------------------------------------------------------------------------

loc_6E414AAD:				; CODE XREF: sub_6E413BF0+4BCj
		mov	[esp+0DCh+var_CC], 20Eh
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 8Ch
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 16h
		jmp	loc_6E413FF0
; ---------------------------------------------------------------------------

loc_6E414AE3:				; CODE XREF: sub_6E413BF0+607j
		mov	[esp+0DCh+var_CC], 174h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 10Bh
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	[esp+0DCh+var_B4], 0FFFFFFFFh
		mov	eax, [esp+0DCh+var_B4]
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E414B26:				; CODE XREF: sub_6E413BF0+61Bj
		mov	[esp+0DCh+var_CC], 17Ah
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 0C6h
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 16h
		jmp	loc_6E413FF0
; ---------------------------------------------------------------------------

loc_6E414B5C:				; CODE XREF: sub_6E413BF0+912j
		mov	[esp+0DCh+var_CC], 597h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 44h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 0Ah

loc_6E414B8D:				; CODE XREF: sub_6E413BF0+1DDj
					; sub_6E413BF0+10C9j ...
		mov	edx, [ebp+8]
		mov	edx, [edx+64h]
		mov	edx, [edx+30h]
		mov	[esp+0DCh+var_DC], eax
		call	edx
		cmp	dword ptr [ebp+0], 300h
		jz	loc_6E414C37

loc_6E414BA8:				; CODE XREF: sub_6E413BF0+104Aj
		test	eax, eax
		js	loc_6E4146B3
		mov	bl, al

loc_6E414BB2:				; CODE XREF: sub_6E413BF0+1052j
		mov	edx, [ebp+0C0h]
		test	edx, edx
		jz	short loc_6E414BCE
		mov	eax, [ebp+0E4h]
		mov	[esp+0DCh+var_D8], edx
		mov	[esp+0DCh+var_DC], eax
		call	SSL_CTX_remove_session

loc_6E414BCE:				; CODE XREF: sub_6E413BF0+FCAj
		mov	edx, [ebp+58h]
		mov	dword ptr [edx+18Ch], 1
		mov	byte ptr [edx+190h], 2
		mov	eax, [ebp+58h]
		mov	[eax+191h], bl
		mov	eax, [ebp+58h]
		mov	ebx, [eax+108h]
		test	ebx, ebx
		jz	loc_6E41405F
		jmp	loc_6E4146B3
; ---------------------------------------------------------------------------

loc_6E414C01:				; CODE XREF: sub_6E413BF0+304j
					; sub_6E413BF0+32Fj
		mov	[esp+0DCh+var_CC], 1DCh
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 0A0h
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 32h
		jmp	loc_6E413FF0
; ---------------------------------------------------------------------------

loc_6E414C37:				; CODE XREF: sub_6E413BF0+FB2j
		cmp	eax, 46h
		jnz	loc_6E414BA8
		mov	bl, 28h
		jmp	loc_6E414BB2
; ---------------------------------------------------------------------------

loc_6E414C47:				; CODE XREF: sub_6E413BF0+A5j
		mov	dword ptr [edi+110h], 0
		mov	dword ptr [ebp+18h], 1
		mov	[esp+0DCh+var_B4], 0
		jmp	loc_6E414072
; ---------------------------------------------------------------------------

loc_6E414C65:				; CODE XREF: sub_6E413BF0+B8j
		mov	ebx, edi
		mov	[esp+0DCh+var_DC], ebp
		call	SSL_state
		test	ah, 30h
		jz	short loc_6E414CC0
		cmp	[esp+0DCh+arg_4], 17h
		jnz	short loc_6E414CC0
		mov	eax, [ebp+80h]
		test	eax, eax
		jnz	short loc_6E414CC0
		mov	[esp+0DCh+var_CC], 441h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 64h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 0Ah
		jmp	loc_6E414B8D
; ---------------------------------------------------------------------------
		align 10h

loc_6E414CC0:				; CODE XREF: sub_6E413BF0+1082j
					; sub_6E413BF0+108Cj ...
		mov	eax, [esp+0DCh+arg_C]
		test	eax, eax
		jle	loc_6E41508C
		mov	eax, [ebx+110h]
		mov	edx, [esp+0DCh+arg_C]
		cmp	edx, eax
		ja	loc_6E414E59

loc_6E414CE4:				; CODE XREF: sub_6E413BF0+126Bj
		mov	esi, [ebx+118h]
		mov	eax, edx
		mov	edi, [esp+0DCh+arg_8]
		add	esi, [ebx+114h]
		cmp	edx, 4
		jnb	loc_6E414E6F

loc_6E414D02:				; CODE XREF: sub_6E413BF0+129Ej
		xor	ecx, ecx
		test	al, 2
		jnz	loc_6E414E49

loc_6E414D0C:				; CODE XREF: sub_6E413BF0+1264j
		test	al, 1
		jnz	loc_6E414E60

loc_6E414D14:				; CODE XREF: sub_6E413BF0+127Aj
		mov	eax, [esp+0DCh+arg_10]
		test	eax, eax
		jnz	short loc_6E414D6E
		mov	eax, [ebx+110h]
		sub	eax, edx
		mov	[ebx+110h], eax
		add	[ebx+114h], edx
		test	eax, eax
		jnz	short loc_6E414D6E
		mov	dword ptr [ebp+38h], 0F0h
		mov	dword ptr [ebx+114h], 0
		test	byte ptr [ebp+104h], 10h
		jz	short loc_6E414D6E
		mov	eax, [ebp+58h]
		mov	eax, [eax+0F8h]
		test	eax, eax
		jnz	short loc_6E414D6E
		mov	[esp+0DCh+var_BC], edx
		mov	[esp+0DCh+var_DC], ebp
		call	sub_6E417070
		mov	edx, [esp+0DCh+var_BC]

loc_6E414D6E:				; CODE XREF: sub_6E413BF0+112Dj
					; sub_6E413BF0+1145j ...
		mov	[esp+0DCh+var_B4], edx
		jmp	loc_6E414072
; ---------------------------------------------------------------------------

loc_6E414D77:				; CODE XREF: sub_6E413BF0+5F9j
		mov	ebx, edi
		mov	edi, ecx
		mov	[esp+0DCh+var_CC], 15Ch
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 10Bh
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		xor	esi, [ebp+0]
		and	esi, 0FF00h
		jnz	loc_6E415033
		mov	eax, [ebp+8Ch]
		test	eax, eax
		jnz	loc_6E415033
		mov	eax, [ebp+90h]
		test	eax, eax
		jnz	loc_6E415033
		cmp	dword ptr [ebx+10Ch], 15h
		jz	loc_6E4146B3
		xor	ebx, ebx
		mov	bx, di
		mov	[ebp+0], ebx
		mov	eax, 46h
		jmp	loc_6E413FF0
; ---------------------------------------------------------------------------

loc_6E414DF1:				; CODE XREF: sub_6E413BF0+929j
					; sub_6E413BF0+937j ...
		mov	[esp+0DCh+var_CC], 5AFh

loc_6E414DF9:				; CODE XREF: sub_6E413BF0+1570j
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 0F5h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 0Ah
		jmp	loc_6E414B8D
; ---------------------------------------------------------------------------

loc_6E414E27:				; CODE XREF: sub_6E413BF0+1Cj
		mov	[esp+0DCh+var_DC], ebp
		call	sub_6E416A30
		test	eax, eax
		jnz	loc_6E413C12
		jmp	loc_6E4146B3
; ---------------------------------------------------------------------------
		align 10h

loc_6E414E40:				; CODE XREF: sub_6E413BF0+BB2j
		mov	[esp+0DCh+var_B4], ebx
		jmp	loc_6E414072
; ---------------------------------------------------------------------------

loc_6E414E49:				; CODE XREF: sub_6E413BF0+1116j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	loc_6E414D0C
; ---------------------------------------------------------------------------

loc_6E414E59:				; CODE XREF: sub_6E413BF0+10EEj
		mov	edx, eax
		jmp	loc_6E414CE4
; ---------------------------------------------------------------------------

loc_6E414E60:				; CODE XREF: sub_6E413BF0+111Ej
		mov	al, [esi+ecx]
		mov	byte ptr [esp+0DCh+var_BC], al
		mov	[edi+ecx], al
		jmp	loc_6E414D14
; ---------------------------------------------------------------------------

loc_6E414E6F:				; CODE XREF: sub_6E413BF0+110Cj
		test	edi, 1
		jnz	loc_6E415186

loc_6E414E7B:				; CODE XREF: sub_6E413BF0+159Fj
		test	edi, 2
		jnz	loc_6E415172

loc_6E414E87:				; CODE XREF: sub_6E413BF0+1591j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E414D02
; ---------------------------------------------------------------------------

loc_6E414E93:				; CODE XREF: sub_6E413BF0+D80j
		mov	[esp+0DCh+var_CC], 53Fh

loc_6E414E9B:				; CODE XREF: sub_6E413BF0+1563j
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 85h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 0Ah
		jmp	loc_6E414B8D
; ---------------------------------------------------------------------------

loc_6E414EC9:				; CODE XREF: sub_6E413BF0+D3j
		mov	[esp+0DCh+var_DC], ebp
		call	sub_6E41EC60
		mov	dword ptr [edi+110h], 0
		mov	dword ptr [ebp+18h], 3
		mov	[esp+0DCh+var_DC], ebp
		call	SSL_get_rbio
		mov	[esp+0DCh+var_D8], 0Fh
		mov	[esp+0DCh+var_DC], eax
		call	BIO_clear_flags
		mov	[esp+0DCh+var_DC], ebp
		call	SSL_get_rbio
		mov	[esp+0DCh+var_D8], 9
		mov	[esp+0DCh+var_DC], eax
		call	BIO_set_flags
		mov	[esp+0DCh+var_B4], 0FFFFFFFFh
		jmp	loc_6E414072
; ---------------------------------------------------------------------------

loc_6E414F1F:				; CODE XREF: sub_6E413BF0+95j
		mov	[esp+0DCh+var_CC], 42Ah
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 91h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 0Ah
		jmp	loc_6E414B8D
; ---------------------------------------------------------------------------

loc_6E414F55:				; CODE XREF: sub_6E413BF0+18Cj
		cmp	ebx, 2
		jnz	loc_6E415115
		mov	dword ptr [ebp+18h], 1
		mov	eax, [ebp+58h]
		mov	[eax+188h], esi
		mov	[esp+0DCh+var_CC], 514h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		lea	eax, [esi+3E8h]
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	[esp+0DCh+var_D0], esi
		mov	[esp+0DCh+var_D4], offset aD ; "%d"
		mov	[esp+0DCh+var_D8], 10h
		lea	ebx, [esp+0DCh+var_5C]
		mov	[esp+0DCh+var_DC], ebx
		call	BIO_snprintf
		mov	[esp+0DCh+var_D4], ebx
		mov	[esp+0DCh+var_D8], offset aSslAlertNumber ; "SSL alert number "
		mov	[esp+0DCh+var_DC], 2
		call	ERR_add_error_data
		or	dword ptr [ebp+30h], 2
		mov	edx, [ebp+0C0h]
		mov	eax, [ebp+0E4h]
		mov	[esp+0DCh+var_D8], edx
		mov	[esp+0DCh+var_DC], eax
		call	SSL_CTX_remove_session
		jmp	loc_6E414072
; ---------------------------------------------------------------------------

loc_6E414FF8:				; CODE XREF: sub_6E413BF0+19Dj
		or	dword ptr [ebp+30h], 2
		jmp	loc_6E414072
; ---------------------------------------------------------------------------

loc_6E415001:				; CODE XREF: sub_6E413BF0+9F7j
		test	byte ptr [eax],	1
		jnz	loc_6E4145ED
		cmp	dword ptr [ebp+24h], 1
		sbb	eax, eax
		and	eax, 0FFFFF000h
		add	eax, 2000h
		mov	[ebp+34h], eax
		mov	dword ptr [ebp+190h], 1
		mov	dword ptr [ebp+28h], 1
		jmp	loc_6E4145ED
; ---------------------------------------------------------------------------

loc_6E415033:				; CODE XREF: sub_6E413BF0+11C0j
					; sub_6E413BF0+11CEj ...
		mov	eax, 46h
		jmp	loc_6E413FF0
; ---------------------------------------------------------------------------

loc_6E41503D:				; CODE XREF: sub_6E413BF0+898j
		mov	[esp+0DCh+var_CC], 140h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 44h
		mov	[esp+0DCh+var_D8], 8Fh
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	[esp+0DCh+var_B4], 0FFFFFFFFh
		jmp	loc_6E414072
; ---------------------------------------------------------------------------

loc_6E415076:				; CODE XREF: sub_6E413BF0+8E4j
		mov	dword ptr [ebp+18h], 1
		mov	dword ptr [edi+110h], 0
		jmp	loc_6E414072
; ---------------------------------------------------------------------------

loc_6E41508C:				; CODE XREF: sub_6E413BF0+10D9j
		mov	eax, [esp+0DCh+arg_C]
		mov	[esp+0DCh+var_B4], eax
		jmp	loc_6E414072
; ---------------------------------------------------------------------------

loc_6E41509C:				; CODE XREF: sub_6E413BF0+D4Aj
					; sub_6E413BF0+D58j ...
		mov	[esp+0DCh+var_CC], 532h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 67h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 2Fh
		jmp	loc_6E414B8D
; ---------------------------------------------------------------------------

loc_6E4150D2:				; CODE XREF: sub_6E413BF0+B90j
		mov	[esp+0DCh+var_B4], 0
		jmp	loc_6E4147D9
; ---------------------------------------------------------------------------

loc_6E4150DF:				; CODE XREF: sub_6E413BF0+6ADj
		mov	[esp+0DCh+var_CC], 4A1h
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 69h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 32h
		jmp	loc_6E414B8D
; ---------------------------------------------------------------------------

loc_6E415115:				; CODE XREF: sub_6E413BF0+1368j
		mov	[esp+0DCh+var_CC], 51Ch
		mov	[esp+0DCh+var_D0], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+0DCh+var_D4], 0F6h
		mov	[esp+0DCh+var_D8], 94h
		mov	[esp+0DCh+var_DC], 14h
		call	ERR_put_error
		mov	eax, 2Fh
		jmp	loc_6E414B8D
; ---------------------------------------------------------------------------

loc_6E41514B:				; CODE XREF: sub_6E413BF0+D75j
		mov	[esp+0DCh+var_CC], 539h
		jmp	loc_6E414E9B
; ---------------------------------------------------------------------------

loc_6E415158:				; CODE XREF: sub_6E413BF0+E32j
		mov	[esp+0DCh+var_CC], 58Ch
		jmp	loc_6E414DF9
; ---------------------------------------------------------------------------

loc_6E415165:				; CODE XREF: sub_6E413BF0+A0Dj
		mov	[esp+0DCh+var_CC], 568h
		jmp	loc_6E41433F
; ---------------------------------------------------------------------------

loc_6E415172:				; CODE XREF: sub_6E413BF0+1291j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E414E87
; ---------------------------------------------------------------------------

loc_6E415186:				; CODE XREF: sub_6E413BF0+1285j
		mov	al, [esi]
		mov	[edi], al
		inc	edi
		inc	esi
		lea	eax, [edx-1]
		jmp	loc_6E414E7B
; ---------------------------------------------------------------------------

loc_6E415194:				; CODE XREF: sub_6E413BF0+CD7j
		cmp	eax, 46h
		jnz	loc_6E4148CD
		mov	al, 28h
		jmp	loc_6E4148D5
sub_6E413BF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4151B0	proc near		; CODE XREF: sub_6E401670+111p
					; sub_6E402830+B30p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_4]
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+30h]
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_1C], edx
		call	eax
		cmp	dword ptr [ebx], 300h
		jz	short loc_6E415230

loc_6E4151D7:				; CODE XREF: sub_6E4151B0+83j
		test	eax, eax
		js	loc_6E415270
		mov	cl, al

loc_6E4151E1:				; CODE XREF: sub_6E4151B0+87j
		cmp	esi, 2
		jz	short loc_6E415240

loc_6E4151E6:				; CODE XREF: sub_6E4151B0+98j
					; sub_6E4151B0+B4j
		mov	edx, [ebx+58h]
		mov	dword ptr [edx+18Ch], 1
		mov	eax, esi
		mov	[edx+190h], al
		mov	eax, [ebx+58h]
		mov	[eax+191h], cl
		mov	eax, [ebx+58h]
		mov	eax, [eax+108h]
		test	eax, eax
		jnz	short loc_6E415270
		mov	eax, [ebx+8]
		mov	eax, [eax+3Ch]
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6E415230:				; CODE XREF: sub_6E4151B0+25j
		cmp	eax, 46h
		jnz	short loc_6E4151D7
		mov	cl, 28h
		jmp	short loc_6E4151E1
; ---------------------------------------------------------------------------
		align 10h

loc_6E415240:				; CODE XREF: sub_6E4151B0+34j
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	short loc_6E4151E6
		mov	[esp+1Ch+var_10], ecx
		mov	edx, [ebx+0E4h]
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], edx
		call	SSL_CTX_remove_session
		mov	ecx, [esp+1Ch+var_10]
		jmp	short loc_6E4151E6
; ---------------------------------------------------------------------------
		align 10h

loc_6E415270:				; CODE XREF: sub_6E4151B0+29j
					; sub_6E4151B0+5Fj
		mov	eax, 0FFFFFFFFh
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_6E4151B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E415280	proc near		; DATA XREF: .rdata:6E44B07Co
					; .rdata:6E44B13Co ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	edi, [ebx+58h]
		mov	dword ptr [edi+18Ch], 0
		lea	eax, [edi+190h]
		mov	[esp+5Ch+var_38], eax
		mov	edx, [edi+108h]
		test	edx, edx
		jnz	loc_6E415630
		mov	esi, edi
		mov	eax, [edi+0FCh]
		test	eax, eax
		jz	loc_6E415780

loc_6E4152C0:				; CODE XREF: sub_6E415280+50Fj
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	short loc_6E415330
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E41533E
		mov	eax, [ebx+90h]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	short loc_6E415330
		mov	eax, [ebx+90h]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_CTX_md
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_size
		mov	[esp+5Ch+var_28], eax
		test	eax, eax
		js	loc_6E41571C

loc_6E415308:				; CODE XREF: sub_6E415280+408j
		mov	eax, [ebx+58h]
		mov	ebp, [eax+0E4h]
		test	ebp, ebp
		jnz	short loc_6E415346
		mov	dword ptr [eax+0E4h], 1
		jmp	short loc_6E415346
; ---------------------------------------------------------------------------
		jmp	short loc_6E415330
; ---------------------------------------------------------------------------
		align 10h

loc_6E415330:				; CODE XREF: sub_6E415280+48j
					; sub_6E415280+64j ...
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jnz	loc_6E415680

loc_6E41533E:				; CODE XREF: sub_6E415280+52j
		mov	[esp+5Ch+var_28], 0

loc_6E415346:				; CODE XREF: sub_6E415280+93j
					; sub_6E415280+9Fj
		mov	eax, [edi+0FCh]
		lea	edx, [eax+5]
		neg	edx
		and	edx, 7
		add	eax, edx
		mov	[edi+104h], edx
		mov	byte ptr [eax],	15h
		mov	dword ptr [esi+130h], 15h
		mov	edx, [ebx]
		sar	edx, 8
		mov	[eax+1], dl
		cmp	dword ptr [ebx+34h], 1111h
		jz	loc_6E4155B0

loc_6E41537E:				; CODE XREF: sub_6E415280+338j
		mov	edx, [ebx]

loc_6E415380:				; CODE XREF: sub_6E415280+348j
					; sub_6E415280+354j
		lea	ecx, [eax+3]
		mov	[esp+5Ch+var_2C], ecx

loc_6E415387:				; CODE XREF: sub_6E415280+363j
		mov	[eax+2], dl
		mov	eax, [esp+5Ch+var_2C]
		add	eax, 2
		mov	[esp+5Ch+var_34], eax
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E4153AB
		cmp	dword ptr [ebx], 301h
		jg	loc_6E415690

loc_6E4153AB:				; CODE XREF: sub_6E415280+11Dj
					; sub_6E415280+535j
		mov	[esp+5Ch+var_30], 0
		mov	[esp+5Ch+var_24], 0

loc_6E4153BB:				; CODE XREF: sub_6E415280+44Aj
					; sub_6E415280+53Fj
		mov	edx, [esp+5Ch+var_34]
		add	edx, [esp+5Ch+var_30]
		mov	[esi+13Ch], edx
		mov	dword ptr [esi+134h], 2
		mov	eax, [esp+5Ch+var_38]
		mov	[esi+140h], eax
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	loc_6E415730
		mov	ebp, [ebx+58h]
		mov	ecx, [ebp+140h]
		mov	edx, [ebp+13Ch]
		mov	[esp+5Ch+var_20], edx
		mov	edx, [ebp+134h]
		mov	[esp+5Ch+var_4C], edx
		mov	[esp+5Ch+var_50], ecx
		mov	[esp+5Ch+var_54], 4400h
		mov	ecx, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], eax
		call	COMP_compress_block
		test	eax, eax
		js	loc_6E4156F0
		mov	[ebp+134h], eax
		mov	eax, [ebp+13Ch]
		mov	[ebp+140h], eax

loc_6E41543E:				; CODE XREF: sub_6E415280+4C6j
		mov	edx, [esp+5Ch+var_28]
		test	edx, edx
		jnz	loc_6E4155F0

loc_6E41544A:				; CODE XREF: sub_6E415280+3AAj
		mov	eax, [esp+5Ch+var_34]
		mov	[esi+140h], eax
		mov	[esi+13Ch], eax
		mov	eax, [esp+5Ch+var_24]
		test	eax, eax
		jz	short loc_6E41546C
		mov	eax, [esp+5Ch+var_30]
		add	[esi+134h], eax

loc_6E41546C:				; CODE XREF: sub_6E415280+1E0j
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax]
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		jle	loc_6E41571C
		mov	eax, [esi+134h]
		shr	eax, 8
		mov	ecx, [esp+5Ch+var_2C]
		mov	[ecx], al
		mov	eax, [esi+134h]
		mov	[ecx+1], al
		mov	dword ptr [esi+130h], 15h
		mov	eax, [esi+134h]
		add	eax, 5
		mov	[esi+134h], eax
		mov	[edi+108h], eax
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+168h], 2
		mov	edi, [esp+5Ch+var_38]
		mov	[eax+174h], edi
		mov	dword ptr [eax+16Ch], 15h
		mov	dword ptr [eax+170h], 2
		mov	[esp+5Ch+var_50], 2
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], 15h
		mov	[esp+5Ch+var_5C], ebx
		call	sub_6E412AF0
		mov	esi, eax
		test	esi, esi
		jle	loc_6E415660

loc_6E415511:				; CODE XREF: sub_6E415280+3D0j
		mov	eax, [ebx+58h]
		cmp	byte ptr [eax+190h], 2
		jz	loc_6E415750

loc_6E415521:				; CODE XREF: sub_6E415280+4F3j
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_6E41555F
		mov	ecx, [ebx+68h]
		mov	edx, [ebx]
		mov	[esp+5Ch+var_44], ecx
		mov	[esp+5Ch+var_48], ebx
		mov	[esp+5Ch+var_4C], 2
		mov	ecx, [ebx+58h]
		add	ecx, 190h
		mov	[esp+5Ch+var_50], ecx
		mov	[esp+5Ch+var_54], 15h
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], 1
		call	eax

loc_6E41555F:				; CODE XREF: sub_6E415280+2A6j
		mov	eax, [ebx+0D0h]
		test	eax, eax
		jz	loc_6E4156D0

loc_6E41556D:				; CODE XREF: sub_6E415280+45Ej
		mov	ecx, [ebx+58h]
		xor	edx, edx
		mov	dl, [ecx+190h]
		shl	edx, 8
		movzx	edi, byte ptr [ecx+191h]
		and	edi, 0FFh
		or	edx, edi
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], 4008h
		mov	[esp+5Ch+var_5C], ebx
		call	eax

loc_6E41559B:				; CODE XREF: sub_6E415280+464j
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4155B0:				; CODE XREF: sub_6E415280+F8j
		mov	ecx, [ebx+190h]
		test	ecx, ecx
		jnz	loc_6E41537E
		mov	edx, [ebx]
		mov	ecx, edx
		sar	ecx, 8
		cmp	ecx, 3
		jnz	loc_6E415380
		cmp	edx, 301h
		jle	loc_6E415380
		lea	ecx, [eax+3]
		mov	[esp+5Ch+var_2C], ecx
		mov	dl, 1
		jmp	loc_6E415387
; ---------------------------------------------------------------------------
		align 10h

loc_6E4155F0:				; CODE XREF: sub_6E415280+1C4j
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_54], 1
		mov	edx, [esp+5Ch+var_30]
		add	edx, [esi+134h]
		add	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		js	loc_6E41571C
		mov	eax, [esp+5Ch+var_28]
		add	[esi+134h], eax
		jmp	loc_6E41544A
; ---------------------------------------------------------------------------
		align 10h

loc_6E415630:				; CODE XREF: sub_6E415280+2Aj
		mov	[esp+5Ch+var_50], 2
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], 15h
		mov	[esp+5Ch+var_5C], ebx
		call	sub_6E412AF0
		mov	esi, eax
		test	esi, esi
		jg	loc_6E415511
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E415660:				; CODE XREF: sub_6E415280+28Bj
					; sub_6E415280+4A1j
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+18Ch], 1
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E415680:				; CODE XREF: sub_6E415280+B8j
		mov	[esp+5Ch+var_28], 0
		jmp	loc_6E415308
; ---------------------------------------------------------------------------
		align 10h

loc_6E415690:				; CODE XREF: sub_6E415280+125j
		mov	[esp+5Ch+var_5C], eax
		call	EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		cmp	eax, 2
		jz	loc_6E4157A0
		cmp	eax, 6
		setz	al
		xor	ecx, ecx
		mov	cl, al
		mov	[esp+5Ch+var_30], ecx
		shl	[esp+5Ch+var_30], 3
		mov	cl, al
		and	ecx, 0FFh
		mov	[esp+5Ch+var_24], ecx
		shl	[esp+5Ch+var_24], 3
		jmp	loc_6E4153BB
; ---------------------------------------------------------------------------
		align 10h

loc_6E4156D0:				; CODE XREF: sub_6E415280+2E7j
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+9Ch]
		test	eax, eax
		jnz	loc_6E41556D
		jmp	loc_6E41559B
; ---------------------------------------------------------------------------
		align 10h

loc_6E4156F0:				; CODE XREF: sub_6E415280+1A6j
		mov	[esp+5Ch+var_4C], 348h
		mov	[esp+5Ch+var_50], offset aS3_pkt_c ; "s3_pkt.c"
		mov	[esp+5Ch+var_54], 8Dh
		mov	[esp+5Ch+var_58], 68h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error

loc_6E41571C:				; CODE XREF: sub_6E415280+82j
					; sub_6E415280+203j ...
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E415660
; ---------------------------------------------------------------------------
		align 10h

loc_6E415730:				; CODE XREF: sub_6E415280+165j
		mov	ax, [edi+190h]
		mov	[edx], ax
		mov	eax, [esi+13Ch]
		mov	[esi+140h], eax
		jmp	loc_6E41543E
; ---------------------------------------------------------------------------
		align 10h

loc_6E415750:				; CODE XREF: sub_6E415280+29Bj
		mov	eax, [ebx+10h]
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0Bh
		mov	[esp+5Ch+var_5C], eax
		call	BIO_ctrl
		jmp	loc_6E415521
; ---------------------------------------------------------------------------
		align 10h

loc_6E415780:				; CODE XREF: sub_6E415280+3Aj
		mov	[esp+5Ch+var_5C], ebx
		call	sub_6E416BE0
		test	eax, eax
		jz	short loc_6E41571C
		mov	esi, [ebx+58h]
		jmp	loc_6E4152C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4157A0:				; CODE XREF: sub_6E415280+420j
		mov	eax, [ebx+8Ch]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_CIPHER_CTX_iv_length
		mov	[esp+5Ch+var_24], eax
		cmp	eax, 1
		jle	loc_6E4153AB
		mov	[esp+5Ch+var_30], eax
		jmp	loc_6E4153BB
sub_6E415280	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4157D0	proc near		; CODE XREF: .text:6E401565p
					; sub_6E4024C0+1Fp ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	esi, [esp+3Ch+arg_4]
		mov	eax, [ebx+44h]
		mov	[esp+3Ch+var_30], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		add	eax, [ebx+48h]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4132F0
		test	eax, eax
		js	loc_6E4158C0
		cmp	esi, 16h
		jz	loc_6E415890

loc_6E415810:				; CODE XREF: sub_6E4157D0+E1j
		mov	edx, [ebx+44h]
		cmp	edx, eax
		jz	short loc_6E415830
		add	[ebx+48h], eax
		sub	edx, eax
		mov	[ebx+44h], edx
		xor	eax, eax

loc_6E415821:				; CODE XREF: sub_6E4157D0+B5j
					; sub_6E4157D0+F5j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E415830:				; CODE XREF: sub_6E4157D0+45j
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	short loc_6E415880
		mov	ecx, [ebx+3Ch]
		mov	ecx, [ecx+4]
		mov	edi, ecx
		mov	ecx, [ebx]
		mov	ebp, [ebx+68h]
		mov	[esp+3Ch+var_24], ebp
		mov	[esp+3Ch+var_28], ebx
		add	eax, [ebx+48h]
		mov	[esp+3Ch+var_2C], eax
		mov	[esp+3Ch+var_30], edi
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_3C], 1
		call	edx
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E415880:				; CODE XREF: sub_6E4157D0+65j
		mov	eax, 1
		jmp	short loc_6E415821
; ---------------------------------------------------------------------------
		align 10h

loc_6E415890:				; CODE XREF: sub_6E4157D0+3Aj
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_20], eax
		mov	edx, [ebx+3Ch]
		mov	edx, [edx+4]
		add	edx, [ebx+48h]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E411870
		mov	eax, [esp+3Ch+var_20]
		jmp	loc_6E415810
; ---------------------------------------------------------------------------
		align 10h

loc_6E4158C0:				; CODE XREF: sub_6E4157D0+31j
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E415821
sub_6E4157D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4158D0	proc near		; CODE XREF: sub_6E406650+BE7p
					; sub_6E40D250+5FAp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_4]
		cmp	[ebx+34h], eax
		jz	short loc_6E415950
		mov	eax, [ebx+44h]
		mov	edx, [ebx+48h]

loc_6E4158EA:				; CODE XREF: sub_6E4158D0+180j
		mov	[esp+3Ch+var_30], eax
		mov	eax, [ebx+3Ch]
		add	edx, [eax+4]
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_38], 16h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4132F0
		mov	esi, eax
		test	eax, eax
		js	loc_6E415C20
		mov	[esp+3Ch+var_34], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		add	eax, [ebx+48h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E411870
		mov	eax, [ebx+44h]
		cmp	esi, eax
		jz	loc_6E415A60
		add	[ebx+48h], esi
		sub	eax, esi
		mov	[ebx+44h], eax
		xor	eax, eax

loc_6E415940:				; CODE XREF: sub_6E4158D0+1F5j
					; sub_6E4158D0+355j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E415950:				; CODE XREF: sub_6E4158D0+12j
		mov	eax, [ebx+3Ch]
		mov	ebp, [eax+4]
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+14h]
		mov	edi, [ebx+58h]
		lea	edx, [edi+234h]
		mov	[esp+3Ch+var_30], edx
		mov	edx, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_34], edx
		mov	edx, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		test	eax, eax
		jle	loc_6E415AB0
		mov	ecx, [ebx+58h]
		mov	[ecx+2B4h], eax
		mov	edx, eax
		lea	edi, [ebp+4]
		lea	esi, [ecx+234h]
		cmp	eax, 4
		jnb	loc_6E415AD0

loc_6E4159A6:				; CODE XREF: sub_6E4158D0+21Fj
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_6E4159B8
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E4159B8:				; CODE XREF: sub_6E4158D0+DBj
		and	edx, 1
		jz	short loc_6E4159C7
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+3Ch+var_20], dl
		mov	[edi+ecx], dl

loc_6E4159C7:				; CODE XREF: sub_6E4158D0+EBj
		cmp	dword ptr [ebx+4], 1000h
		jz	loc_6E415B50
		cmp	eax, 40h
		jg	loc_6E415BA0

loc_6E4159DD:				; CODE XREF: sub_6E4158D0+2F4j
		mov	ecx, [ebx+58h]
		mov	edx, eax
		lea	edi, [ecx+3D5h]
		lea	esi, [ecx+234h]
		cmp	eax, 4
		jnb	loc_6E415B00

loc_6E4159F7:				; CODE XREF: sub_6E4158D0+247j
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_6E415A09
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E415A09:				; CODE XREF: sub_6E4158D0+12Cj
		and	edx, 1
		jz	short loc_6E415A18
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+3Ch+var_20], dl
		mov	[edi+ecx], dl

loc_6E415A18:				; CODE XREF: sub_6E4158D0+13Cj
		mov	edx, [ebx+58h]
		mov	cl, al
		mov	[edx+415h], al

loc_6E415A23:				; CODE XREF: sub_6E4158D0+2CBj
		mov	byte ptr [ebp+0], 14h
		mov	edx, eax
		shr	edx, 10h
		mov	[ebp+1], dl
		mov	edx, eax
		shr	edx, 8
		mov	[ebp+2], dl
		mov	[ebp+3], cl
		add	eax, 4
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+48h], 0
		mov	edx, [esp+3Ch+arg_8]
		mov	[ebx+34h], edx
		xor	edx, edx
		jmp	loc_6E4158EA
; ---------------------------------------------------------------------------
		align 10h

loc_6E415A60:				; CODE XREF: sub_6E4158D0+60j
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_6E415AC0
		mov	edi, [ebx+68h]
		mov	edx, [ebx+3Ch]
		mov	ecx, [edx+4]
		mov	edx, [ebx]
		mov	[esp+3Ch+var_24], edi
		mov	[esp+3Ch+var_28], ebx
		add	esi, [ebx+48h]
		mov	[esp+3Ch+var_2C], esi
		mov	[esp+3Ch+var_30], ecx
		mov	[esp+3Ch+var_34], 16h
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], 1
		call	eax
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E415AB0:				; CODE XREF: sub_6E4158D0+B3j
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E415AC0:				; CODE XREF: sub_6E4158D0+195j
		mov	eax, 1
		jmp	loc_6E415940
; ---------------------------------------------------------------------------
		align 10h

loc_6E415AD0:				; CODE XREF: sub_6E4158D0+D0j
		test	edi, 1
		jnz	loc_6E415C2A

loc_6E415ADC:				; CODE XREF: sub_6E4158D0+36Fj
		test	edi, 2
		jnz	loc_6E415C44

loc_6E415AE8:				; CODE XREF: sub_6E4158D0+383j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E4159A6
; ---------------------------------------------------------------------------
		align 10h

loc_6E415B00:				; CODE XREF: sub_6E4158D0+121j
		test	edi, 1
		jnz	short loc_6E415B2D

loc_6E415B08:				; CODE XREF: sub_6E4158D0+278j
		test	edi, 2
		jnz	short loc_6E415B1C

loc_6E415B10:				; CODE XREF: sub_6E4158D0+25Bj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E4159F7
; ---------------------------------------------------------------------------

loc_6E415B1C:				; CODE XREF: sub_6E4158D0+23Ej
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	short loc_6E415B10
; ---------------------------------------------------------------------------

loc_6E415B2D:				; CODE XREF: sub_6E4158D0+236j
		mov	dl, [ecx+234h]
		mov	[ecx+3D5h], dl
		lea	edi, [ecx+3D6h]
		lea	esi, [ecx+235h]
		lea	edx, [eax-1]
		jmp	short loc_6E415B08
; ---------------------------------------------------------------------------
		align 10h

loc_6E415B50:				; CODE XREF: sub_6E4158D0+FEj
		cmp	eax, 40h
		jg	loc_6E415BF0

loc_6E415B59:				; CODE XREF: sub_6E4158D0+344j
		mov	ecx, [ebx+58h]
		mov	edx, eax
		lea	edi, [ecx+394h]
		lea	esi, [ecx+234h]
		cmp	eax, 4
		jnb	short loc_6E415BD0

loc_6E415B6F:				; CODE XREF: sub_6E4158D0+31Bj
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_6E415B81
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E415B81:				; CODE XREF: sub_6E4158D0+2A4j
		and	edx, 1
		jz	short loc_6E415B90
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+3Ch+var_20], dl
		mov	[edi+ecx], dl

loc_6E415B90:				; CODE XREF: sub_6E4158D0+2B4j
		mov	edx, [ebx+58h]
		mov	cl, al
		mov	[edx+3D4h], al
		jmp	loc_6E415A23
; ---------------------------------------------------------------------------

loc_6E415BA0:				; CODE XREF: sub_6E4158D0+107j
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_34], offset aIEvp_max_md_si ; "i <= EVP_MAX_MD_SIZE"
		mov	[esp+3Ch+var_38], 0BBh
		mov	[esp+3Ch+var_3C], offset aS3_both_c ; "s3_both.c"
		call	OpenSSLDie
		mov	eax, [esp+3Ch+var_20]
		jmp	loc_6E4159DD
; ---------------------------------------------------------------------------
		align 10h

loc_6E415BD0:				; CODE XREF: sub_6E4158D0+29Dj
		test	edi, 1
		jnz	loc_6E415C6C

loc_6E415BDC:				; CODE XREF: sub_6E4158D0+3B7j
		test	edi, 2
		jnz	short loc_6E415C58

loc_6E415BE4:				; CODE XREF: sub_6E4158D0+397j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E415B6F
; ---------------------------------------------------------------------------
		align 10h

loc_6E415BF0:				; CODE XREF: sub_6E4158D0+283j
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_34], offset aIEvp_max_md_si ; "i <= EVP_MAX_MD_SIZE"
		mov	[esp+3Ch+var_38], 0B7h
		mov	[esp+3Ch+var_3C], offset aS3_both_c ; "s3_both.c"
		call	OpenSSLDie
		mov	eax, [esp+3Ch+var_20]
		jmp	loc_6E415B59
; ---------------------------------------------------------------------------
		align 10h

loc_6E415C20:				; CODE XREF: sub_6E4158D0+3Cj
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E415940
; ---------------------------------------------------------------------------

loc_6E415C2A:				; CODE XREF: sub_6E4158D0+206j
		mov	dl, [ecx+234h]
		mov	[ebp+4], dl
		lea	edi, [ebp+5]
		lea	esi, [ecx+235h]
		lea	edx, [eax-1]
		jmp	loc_6E415ADC
; ---------------------------------------------------------------------------

loc_6E415C44:				; CODE XREF: sub_6E4158D0+212j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E415AE8
; ---------------------------------------------------------------------------

loc_6E415C58:				; CODE XREF: sub_6E4158D0+312j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E415BE4
; ---------------------------------------------------------------------------

loc_6E415C6C:				; CODE XREF: sub_6E4158D0+306j
		mov	dl, [ecx+234h]
		mov	[ecx+394h], dl
		lea	edi, [ecx+395h]
		lea	esi, [ecx+235h]
		lea	edx, [eax-1]
		jmp	loc_6E415BDC
sub_6E4158D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E415C90	proc near		; CODE XREF: sub_6E406650+814p
					; sub_6E40D250+2FEp ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2D		= byte ptr -2Dh
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		lea	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_38], edx
		mov	[esp+4Ch+var_3C], 40h
		mov	[esp+4Ch+var_40], 14h
		mov	edx, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_44], edx
		mov	edx, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ebx
		call	eax
		mov	esi, [esp+4Ch+var_20]
		test	esi, esi
		jz	short loc_6E415D45
		mov	edx, [ebx+58h]
		mov	ecx, [edx+180h]
		test	ecx, ecx
		jz	short loc_6E415D50
		mov	dword ptr [edx+180h], 0
		mov	ecx, [ebx+40h]
		mov	ebp, [edx+338h]
		cmp	ebp, eax
		jz	loc_6E415D90
		mov	[esp+4Ch+var_3C], 112h
		mov	[esp+4Ch+var_40], offset aS3_both_c ; "s3_both.c"
		mov	[esp+4Ch+var_44], 6Fh
		mov	[esp+4Ch+var_48], 8Ch
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 32h

loc_6E415D2F:				; CODE XREF: sub_6E415C90+F1j
					; sub_6E415C90+221j
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 2
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E4151B0
		xor	eax, eax

loc_6E415D45:				; CODE XREF: sub_6E415C90+44j
					; sub_6E415C90+164j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E415D50:				; CODE XREF: sub_6E415C90+51j
		mov	[esp+4Ch+var_3C], 108h
		mov	[esp+4Ch+var_40], offset aS3_both_c ; "s3_both.c"
		mov	[esp+4Ch+var_44], 9Ah
		mov	[esp+4Ch+var_48], 8Ch
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 0Ah
		jmp	short loc_6E415D2F
; ---------------------------------------------------------------------------
		align 10h

loc_6E415D90:				; CODE XREF: sub_6E415C90+68j
		mov	[esp+4Ch+var_44], ebp
		add	edx, 2B8h
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], ecx
		call	CRYPTO_memcmp
		test	eax, eax
		jnz	loc_6E415E80
		cmp	dword ptr [ebx+4], 2000h
		jz	loc_6E415EC0
		cmp	ebp, 40h
		jg	loc_6E415E50

loc_6E415DC4:				; CODE XREF: sub_6E415C90+1DCj
		mov	edx, [ebx+58h]
		mov	eax, ebp
		lea	edi, [edx+3D5h]
		lea	esi, [edx+2B8h]
		cmp	ebp, 4
		jnb	short loc_6E415E20

loc_6E415DDA:				; CODE XREF: sub_6E415C90+1AFj
		xor	edx, edx
		test	al, 2
		jnz	short loc_6E415E10

loc_6E415DE0:				; CODE XREF: sub_6E415C90+18Bj
		test	al, 1
		jnz	short loc_6E415E00

loc_6E415DE4:				; CODE XREF: sub_6E415C90+17Aj
		mov	eax, [ebx+58h]
		mov	ecx, ebp
		mov	[eax+415h], cl
		mov	eax, 1
		jmp	loc_6E415D45
; ---------------------------------------------------------------------------
		align 10h

loc_6E415E00:				; CODE XREF: sub_6E415C90+152j
		mov	al, [esi+edx]
		mov	[esp+4Ch+var_2D], al
		mov	[edi+edx], al
		jmp	short loc_6E415DE4
; ---------------------------------------------------------------------------
		align 10h

loc_6E415E10:				; CODE XREF: sub_6E415C90+14Ej
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		jmp	short loc_6E415DE0
; ---------------------------------------------------------------------------
		align 10h

loc_6E415E20:				; CODE XREF: sub_6E415C90+148j
		test	edi, 1
		jnz	loc_6E415F58

loc_6E415E2C:				; CODE XREF: sub_6E415C90+2E3j
		test	edi, 2
		jnz	loc_6E415F44

loc_6E415E38:				; CODE XREF: sub_6E415C90+2C3j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E415DDA
; ---------------------------------------------------------------------------
		jmp	short loc_6E415E50
; ---------------------------------------------------------------------------
		align 10h

loc_6E415E50:				; CODE XREF: sub_6E415C90+12Ej
					; sub_6E415C90+1B1j
		mov	[esp+4Ch+var_44], offset aIEvp_max_md_si ; "i <= EVP_MAX_MD_SIZE"
		mov	[esp+4Ch+var_48], 124h
		mov	[esp+4Ch+var_4C], offset aS3_both_c ; "s3_both.c"
		call	OpenSSLDie
		jmp	loc_6E415DC4
; ---------------------------------------------------------------------------
		jmp	short loc_6E415E80
; ---------------------------------------------------------------------------
		align 10h

loc_6E415E80:				; CODE XREF: sub_6E415C90+118j
					; sub_6E415C90+1E1j
		mov	[esp+4Ch+var_3C], 118h
		mov	[esp+4Ch+var_40], offset aS3_both_c ; "s3_both.c"
		mov	[esp+4Ch+var_44], 95h
		mov	[esp+4Ch+var_48], 8Ch
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 33h
		jmp	loc_6E415D2F
; ---------------------------------------------------------------------------
		align 10h

loc_6E415EC0:				; CODE XREF: sub_6E415C90+125j
		cmp	ebp, 40h
		jle	short loc_6E415EE1
		mov	[esp+4Ch+var_44], offset aIEvp_max_md_si ; "i <= EVP_MAX_MD_SIZE"
		mov	[esp+4Ch+var_48], 120h
		mov	[esp+4Ch+var_4C], offset aS3_both_c ; "s3_both.c"
		call	OpenSSLDie

loc_6E415EE1:				; CODE XREF: sub_6E415C90+233j
		mov	edx, [ebx+58h]
		mov	eax, ebp
		lea	edi, [edx+394h]
		lea	esi, [edx+2B8h]
		cmp	ebp, 4
		jnb	short loc_6E415F2B

loc_6E415EF7:				; CODE XREF: sub_6E415C90+2B2j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E415F08
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E415F08:				; CODE XREF: sub_6E415C90+26Bj
		test	al, 1
		jz	short loc_6E415F16
		mov	al, [esi+edx]
		mov	[esp+4Ch+var_2D], al
		mov	[edi+edx], al

loc_6E415F16:				; CODE XREF: sub_6E415C90+27Aj
		mov	eax, [ebx+58h]
		mov	ecx, ebp
		mov	[eax+3D4h], cl
		mov	eax, 1
		jmp	loc_6E415D45
; ---------------------------------------------------------------------------

loc_6E415F2B:				; CODE XREF: sub_6E415C90+265j
		test	edi, 1
		jnz	short loc_6E415F89

loc_6E415F33:				; CODE XREF: sub_6E415C90+314j
		test	edi, 2
		jnz	short loc_6E415F78

loc_6E415F3B:				; CODE XREF: sub_6E415C90+2F7j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E415EF7
; ---------------------------------------------------------------------------

loc_6E415F44:				; CODE XREF: sub_6E415C90+1A2j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E415E38
; ---------------------------------------------------------------------------

loc_6E415F58:				; CODE XREF: sub_6E415C90+196j
		mov	al, [edx+2B8h]
		mov	[edx+3D5h], al
		lea	edi, [edx+3D6h]
		lea	esi, [edx+2B9h]
		lea	eax, [ebp-1]
		jmp	loc_6E415E2C
; ---------------------------------------------------------------------------

loc_6E415F78:				; CODE XREF: sub_6E415C90+2A9j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E415F3B
; ---------------------------------------------------------------------------

loc_6E415F89:				; CODE XREF: sub_6E415C90+2A1j
		mov	al, [edx+2B8h]
		mov	[edx+394h], al
		lea	edi, [edx+395h]
		lea	esi, [edx+2B9h]
		lea	eax, [ebp-1]
		jmp	short loc_6E415F33
sub_6E415C90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E415FB0	proc near		; CODE XREF: sub_6E406650+4C5p
					; sub_6E40D250+7C6p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		cmp	[ebx+34h], eax
		jz	short loc_6E416010
		mov	edx, [ebx+44h]
		mov	eax, [ebx+48h]

loc_6E415FC9:				; CODE XREF: sub_6E415FB0+85j
		mov	[esp+2Ch+var_20], edx
		mov	edx, [ebx+3Ch]
		add	eax, [edx+4]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 14h
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6E4132F0
		test	eax, eax
		js	loc_6E4160A0
		mov	edx, [ebx+44h]
		cmp	eax, edx
		jz	short loc_6E416040
		add	[ebx+48h], eax
		sub	edx, eax
		mov	[ebx+44h], edx
		xor	eax, eax

loc_6E416000:				; CODE XREF: sub_6E415FB0+E5j
					; sub_6E415FB0+F5j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E416010:				; CODE XREF: sub_6E415FB0+11j
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	byte ptr [eax],	1
		mov	dword ptr [ebx+44h], 1
		mov	dword ptr [ebx+48h], 0
		mov	eax, [esp+2Ch+arg_8]
		mov	[ebx+34h], eax
		xor	eax, eax
		mov	edx, 1
		jmp	short loc_6E415FC9
; ---------------------------------------------------------------------------
		align 10h

loc_6E416040:				; CODE XREF: sub_6E415FB0+44j
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	short loc_6E416090
		mov	ecx, [ebx+3Ch]
		mov	ecx, [ecx+4]
		mov	esi, ecx
		mov	ecx, [ebx]
		mov	edi, [ebx+68h]
		mov	[esp+2Ch+var_14], edi
		mov	[esp+2Ch+var_18], ebx
		add	eax, [ebx+48h]
		mov	[esp+2Ch+var_1C], eax
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_24], 14h
		mov	[esp+2Ch+var_28], ecx
		mov	[esp+2Ch+var_2C], 1
		call	edx
		mov	eax, 1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E416090:				; CODE XREF: sub_6E415FB0+95j
		mov	eax, 1
		jmp	loc_6E416000
; ---------------------------------------------------------------------------
		align 10h

loc_6E4160A0:				; CODE XREF: sub_6E415FB0+39j
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E416000
sub_6E415FB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4160B0	proc near		; CODE XREF: .text:6E405BF3p
					; sub_6E406650+ECEp ...

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_50		= dword	ptr -50h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	ebp, [esp+0CCh+arg_0]
		mov	esi, [esp+0CCh+arg_4]
		test	byte ptr [ebp+104h], 8
		jnz	loc_6E416280
		mov	eax, [ebp+0E4h]
		xor	ebx, ebx
		mov	eax, [eax+94h]
		test	eax, eax
		setnz	bl

loc_6E4160E8:				; CODE XREF: sub_6E4160B0+1D5j
		mov	eax, [ebp+3Ch]
		mov	[esp+0CCh+var_B8], eax
		mov	[esp+0CCh+var_C8], 0Ah
		mov	[esp+0CCh+var_CC], eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		jz	loc_6E4163A0
		test	esi, esi
		jz	loc_6E416450
		test	ebx, ebx
		jz	loc_6E416290
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], esi
		call	i2d_X509
		mov	edi, eax
		lea	ebx, [eax+0Ah]
		mov	[esp+0CCh+var_C8], ebx
		mov	eax, [esp+0CCh+var_B8]
		mov	[esp+0CCh+var_CC], eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		jz	loc_6E416420
		mov	eax, [esp+0CCh+var_B8]
		mov	eax, [eax+4]
		mov	edx, edi
		sar	edx, 10h
		mov	[eax+7], dl
		mov	edx, edi
		sar	edx, 8
		mov	[eax+8], dl
		mov	ecx, edi
		mov	[eax+9], cl
		add	eax, 0Ah
		mov	[esp+0CCh+var_A4], eax
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], esi
		call	i2d_X509

loc_6E416177:				; CODE XREF: sub_6E4160B0+2EAj
					; sub_6E4160B0+3A5j
		xor	esi, esi
		jmp	loc_6E416211
; ---------------------------------------------------------------------------
		align 10h

loc_6E416180:				; CODE XREF: sub_6E4160B0+177j
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+94h]
		mov	[esp+0CCh+var_C8], esi
		mov	[esp+0CCh+var_CC], eax
		call	sk_value
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], eax
		mov	[esp+0CCh+var_B0], eax
		call	i2d_X509
		lea	edi, [ebx+eax+3]
		mov	[esp+0CCh+var_B4], eax
		mov	[esp+0CCh+var_C8], edi
		mov	eax, [esp+0CCh+var_B8]
		mov	[esp+0CCh+var_CC], eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		mov	edx, [esp+0CCh+var_B4]
		mov	ecx, [esp+0CCh+var_B0]
		jz	loc_6E416420
		mov	eax, [esp+0CCh+var_B8]
		add	ebx, [eax+4]
		mov	[esp+0CCh+var_A4], ebx
		mov	eax, edx
		sar	eax, 10h
		mov	[ebx], al
		mov	ebx, edx
		sar	ebx, 8
		mov	eax, [esp+0CCh+var_A4]
		mov	[eax+1], bl
		mov	eax, [esp+0CCh+var_A4]
		mov	[eax+2], dl
		add	[esp+0CCh+var_A4], 3
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ecx
		call	i2d_X509
		inc	esi
		mov	ebx, edi

loc_6E416211:				; CODE XREF: sub_6E4160B0+C9j
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+94h]
		mov	[esp+0CCh+var_CC], eax
		call	sk_num
		cmp	esi, eax
		jl	loc_6E416180
		lea	edx, [ebx-7]
		mov	edi, [esp+0CCh+var_B8]
		mov	eax, [edi+4]
		mov	ecx, edx
		shr	ecx, 10h
		mov	[eax+4], cl
		mov	ecx, edx
		shr	ecx, 8
		mov	[eax+5], cl
		mov	[eax+6], dl
		lea	edx, [ebx-4]
		mov	eax, [edi+4]
		mov	byte ptr [eax],	0Bh
		mov	ecx, edx
		shr	ecx, 10h
		mov	[eax+1], cl
		mov	ecx, edx
		shr	ecx, 8
		mov	[eax+2], cl
		mov	[eax+3], dl
		mov	eax, ebx
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E416280:				; CODE XREF: sub_6E4160B0+1Fj
		mov	ebx, 1
		jmp	loc_6E4160E8
; ---------------------------------------------------------------------------
		align 10h

loc_6E416290:				; CODE XREF: sub_6E4160B0+61j
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+0Ch]
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+var_C4], esi
		mov	[esp+0CCh+var_C8], eax
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	X509_STORE_CTX_init
		test	eax, eax
		jz	loc_6E4163E0
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	X509_verify_cert
		call	ERR_clear_error
		mov	ebx, 7
		xor	esi, esi
		mov	[esp+0CCh+arg_0], ebp
		jmp	loc_6E416373
; ---------------------------------------------------------------------------
		jmp	short loc_6E4162F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4162F0:				; CODE XREF: sub_6E4160B0+231j
					; sub_6E4160B0+2D1j
		mov	[esp+0CCh+var_C8], esi
		mov	eax, [esp+0CCh+var_50]
		mov	[esp+0CCh+var_CC], eax
		call	sk_value
		mov	ebp, eax
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], eax
		call	i2d_X509
		lea	edi, [ebx+eax+3]
		mov	[esp+0CCh+var_B4], eax
		mov	[esp+0CCh+var_C8], edi
		mov	eax, [esp+0CCh+var_B8]
		mov	[esp+0CCh+var_CC], eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		mov	edx, [esp+0CCh+var_B4]
		jz	loc_6E416460
		mov	eax, [esp+0CCh+var_B8]
		add	ebx, [eax+4]
		mov	[esp+0CCh+var_A8], ebx
		mov	eax, edx
		sar	eax, 10h
		mov	[ebx], al
		mov	ebx, edx
		sar	ebx, 8
		mov	eax, [esp+0CCh+var_A8]
		mov	[eax+1], bl
		mov	eax, [esp+0CCh+var_A8]
		mov	[eax+2], dl
		add	[esp+0CCh+var_A8], 3
		lea	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebp
		call	i2d_X509
		inc	esi
		mov	ebx, edi

loc_6E416373:				; CODE XREF: sub_6E4160B0+22Cj
		mov	eax, [esp+0CCh+var_50]
		mov	[esp+0CCh+var_CC], eax
		call	sk_num
		cmp	esi, eax
		jl	loc_6E4162F0
		mov	ebp, [esp+0CCh+arg_0]
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	X509_STORE_CTX_cleanup
		jmp	loc_6E416177
; ---------------------------------------------------------------------------
		align 10h

loc_6E4163A0:				; CODE XREF: sub_6E4160B0+51j
		mov	[esp+0CCh+var_BC], 16Bh
		mov	[esp+0CCh+var_C0], offset aS3_both_c ; "s3_both.c"
		mov	[esp+0CCh+var_C4], 7
		mov	[esp+0CCh+var_C8], 93h
		mov	[esp+0CCh+var_CC], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4163E0:				; CODE XREF: sub_6E4160B0+207j
		mov	[esp+0CCh+var_BC], 176h
		mov	[esp+0CCh+var_C0], offset aS3_both_c ; "s3_both.c"
		mov	[esp+0CCh+var_C4], 0Bh
		mov	[esp+0CCh+var_C8], 93h
		mov	[esp+0CCh+var_CC], 14h
		call	ERR_put_error
		xor	eax, eax

loc_6E41640E:				; CODE XREF: sub_6E4160B0+39Ej
					; sub_6E4160B0+3EAj
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E416420:				; CODE XREF: sub_6E4160B0+8Ej
					; sub_6E4160B0+11Ej
		mov	[esp+0CCh+var_BC], 150h
		mov	[esp+0CCh+var_C0], offset aS3_both_c ; "s3_both.c"
		mov	[esp+0CCh+var_C4], 7
		mov	[esp+0CCh+var_C8], 128h
		mov	[esp+0CCh+var_CC], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	short loc_6E41640E
; ---------------------------------------------------------------------------

loc_6E416450:				; CODE XREF: sub_6E4160B0+59j
		mov	ebx, 7
		jmp	loc_6E416177
; ---------------------------------------------------------------------------
		align 10h

loc_6E416460:				; CODE XREF: sub_6E4160B0+280j
		mov	[esp+0CCh+var_BC], 150h
		mov	[esp+0CCh+var_C0], offset aS3_both_c ; "s3_both.c"
		mov	[esp+0CCh+var_C4], 7
		mov	[esp+0CCh+var_C8], 128h
		mov	[esp+0CCh+var_CC], 14h
		call	ERR_put_error
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	X509_STORE_CTX_cleanup
		xor	eax, eax
		jmp	loc_6E41640E
sub_6E4160B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4164A0	proc near		; DATA XREF: .rdata:6E44B070o
					; .rdata:6E44B130o ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	esi, [eax+354h]
		test	esi, esi
		jz	short loc_6E416510
		mov	dword ptr [eax+354h], 0
		mov	esi, [esp+3Ch+arg_C]
		test	esi, esi
		js	short loc_6E4164DA
		mov	ecx, [esp+3Ch+arg_C]
		cmp	[eax+340h], ecx
		jnz	loc_6E4167F7

loc_6E4164DA:				; CODE XREF: sub_6E4164A0+28j
		mov	ecx, [esp+3Ch+arg_14]
		mov	dword ptr [ecx], 1
		mov	ecx, [esp+3Ch+arg_8]
		mov	[ebx+34h], ecx
		mov	edx, [ebx+3Ch]
		mov	edx, [edx+4]
		add	edx, 4
		mov	[ebx+40h], edx
		mov	eax, [eax+33Ch]
		mov	[ebx+44h], eax

loc_6E416500:				; CODE XREF: sub_6E4164A0+3ABj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E416510:				; CODE XREF: sub_6E4164A0+16j
		mov	edx, [ebx+3Ch]
		mov	ebp, [edx+4]
		mov	edi, [ebx+34h]
		cmp	edi, [esp+3Ch+arg_4]
		jz	loc_6E416610
		mov	edi, [ebx+40h]
		mov	ebp, [eax+33Ch]
		mov	esi, [ebx+44h]
		mov	eax, esi

loc_6E416531:				; CODE XREF: sub_6E4164A0+2B1j
		sub	ebp, eax
		test	ebp, ebp
		jg	short loc_6E416552
		jmp	loc_6E416663
; ---------------------------------------------------------------------------
		align 10h

loc_6E416540:				; CODE XREF: sub_6E4164A0+D9j
		mov	esi, [ebx+44h]
		add	esi, eax
		mov	[ebx+44h], esi
		sub	ebp, eax
		test	ebp, ebp
		jle	loc_6E416660

loc_6E416552:				; CODE XREF: sub_6E4164A0+95j
		mov	eax, [ebx+8]
		mov	eax, [eax+34h]
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], ebp
		add	esi, edi
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], 16h
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		test	eax, eax
		jg	short loc_6E416540

loc_6E41657B:				; CODE XREF: sub_6E4164A0+1A6j
		mov	dword ptr [ebx+18h], 3
		mov	ecx, [esp+3Ch+arg_14]
		mov	dword ptr [ecx], 0
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4165A0:				; CODE XREF: sub_6E4164A0+176j
		mov	eax, [ebx+24h]
		test	eax, eax
		jnz	loc_6E4166E0
		mov	dl, [ebp+0]
		test	dl, dl
		jnz	loc_6E416760
		cmp	byte ptr [ebp+1], 0
		jnz	loc_6E4168FA
		cmp	byte ptr [ebp+2], 0
		jnz	loc_6E4168FA
		cmp	byte ptr [ebp+3], 0
		jnz	loc_6E4168FA
		mov	dword ptr [ebx+44h], 0
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	short loc_6E416618
		mov	ecx, [ebx+68h]
		mov	eax, [ebx]
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_28], ebx
		mov	[esp+3Ch+var_2C], 4
		mov	[esp+3Ch+var_30], ebp
		mov	[esp+3Ch+var_34], 16h
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], 0
		call	edx

loc_6E416610:				; CODE XREF: sub_6E4164A0+7Dj
		mov	eax, [ebx+44h]

loc_6E416613:				; CODE XREF: sub_6E4164A0+1B2j
		cmp	eax, 3
		jg	short loc_6E4165A0

loc_6E416618:				; CODE XREF: sub_6E4164A0+140j
		mov	edx, [ebx+8]
		mov	ecx, [edx+34h]
		mov	[esp+3Ch+var_2C], 0
		mov	edx, 4
		sub	edx, eax
		mov	[esp+3Ch+var_30], edx
		add	eax, ebp
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 16h
		mov	[esp+3Ch+var_3C], ebx
		call	ecx
		test	eax, eax
		jle	loc_6E41657B
		add	eax, [ebx+44h]
		mov	[ebx+44h], eax
		jmp	short loc_6E416613
; ---------------------------------------------------------------------------
		align 10h

loc_6E416660:				; CODE XREF: sub_6E4164A0+ACj
		mov	edx, [ebx+3Ch]

loc_6E416663:				; CODE XREF: sub_6E4164A0+97j
		mov	eax, [edx+4]
		cmp	byte ptr [eax],	14h
		jz	loc_6E416778

loc_6E41666F:				; CODE XREF: sub_6E4164A0+2E3j
					; sub_6E4164A0+328j
		add	esi, 4
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E411870
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_6E4166BF
		mov	esi, [ebx+68h]
		mov	edx, [ebx+3Ch]
		mov	ecx, [edx+4]
		mov	edx, [ebx]
		mov	[esp+3Ch+var_24], esi
		mov	[esp+3Ch+var_28], ebx
		mov	edi, [ebx+44h]
		lea	esi, [edi+4]
		mov	[esp+3Ch+var_2C], esi
		mov	[esp+3Ch+var_30], ecx
		mov	[esp+3Ch+var_34], 16h
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], 0
		call	eax

loc_6E4166BF:				; CODE XREF: sub_6E4164A0+1E7j
		mov	eax, [esp+3Ch+arg_14]
		mov	dword ptr [eax], 1
		mov	eax, [ebx+44h]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4166E0:				; CODE XREF: sub_6E4164A0+105j
		mov	al, [ebp+0]
		mov	edx, [esp+3Ch+arg_C]
		test	edx, edx
		js	short loc_6E41676A

loc_6E4166EB:				; CODE XREF: sub_6E4164A0+2C8j
					; sub_6E4164A0+461j
		xor	edx, edx
		mov	dl, al
		cmp	edx, [esp+3Ch+arg_C]
		jnz	loc_6E41686D

loc_6E4166F9:				; CODE XREF: sub_6E4164A0+2D6j
					; sub_6E4164A0+3C8j ...
		mov	edi, [ebx+58h]
		mov	[edi+340h], edx
		xor	ecx, ecx
		mov	cl, [ebp+1]
		shl	ecx, 10h
		xor	eax, eax
		mov	al, [ebp+2]
		shl	eax, 8
		or	ecx, eax
		xor	eax, eax
		mov	al, [ebp+3]
		or	ecx, eax
		cmp	ecx, [esp+3Ch+arg_10]
		ja	loc_6E416893
		test	ecx, ecx
		jnz	loc_6E4167CD

loc_6E41672D:				; CODE XREF: sub_6E4164A0+352j
		mov	[edi+33Ch], ecx
		mov	eax, [esp+3Ch+arg_8]
		mov	[ebx+34h], eax
		mov	edx, [ebx+3Ch]
		mov	eax, [edx+4]
		lea	edi, [eax+4]
		mov	[ebx+40h], edi
		mov	dword ptr [ebx+44h], 0
		mov	ebp, ecx
		xor	eax, eax
		jmp	loc_6E416531
; ---------------------------------------------------------------------------
		align 10h

loc_6E416760:				; CODE XREF: sub_6E4164A0+110j
		mov	al, dl
		mov	edx, [esp+3Ch+arg_C]
		test	edx, edx
		jns	short loc_6E4166EB

loc_6E41676A:				; CODE XREF: sub_6E4164A0+249j
		cmp	al, 1
		jz	loc_6E41685B

loc_6E416772:				; CODE XREF: sub_6E4164A0+467j
		xor	edx, edx
		mov	dl, al
		jmp	short loc_6E4166F9
; ---------------------------------------------------------------------------

loc_6E416778:				; CODE XREF: sub_6E4164A0+1C9j
		mov	edi, [ebx+58h]
		mov	ecx, [edi+344h]
		test	ecx, ecx
		jz	loc_6E41666F
		test	byte ptr [ebx+35h], 10h
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		jz	loc_6E416850
		mov	ecx, [eax+28h]
		mov	esi, [eax+2Ch]

loc_6E41679F:				; CODE XREF: sub_6E4164A0+3B6j
		mov	eax, [eax+14h]
		lea	edx, [edi+2B8h]
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		mov	[edi+338h], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	esi, [ebx+44h]
		jmp	loc_6E41666F
; ---------------------------------------------------------------------------

loc_6E4167CD:				; CODE XREF: sub_6E4164A0+287j
		mov	eax, [ebx+3Ch]
		lea	edx, [ecx+4]
		mov	[esp+3Ch+var_20], ecx
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		jz	loc_6E4168C9
		mov	edi, [ebx+58h]
		mov	ecx, [esp+3Ch+var_20]
		jmp	loc_6E41672D
; ---------------------------------------------------------------------------

loc_6E4167F7:				; CODE XREF: sub_6E4164A0+34j
		mov	[esp+3Ch+var_2C], 1A9h

loc_6E4167FF:				; CODE XREF: sub_6E4164A0+3D5j
		mov	[esp+3Ch+var_30], offset aS3_both_c ; "s3_both.c"
		mov	[esp+3Ch+var_34], 0F4h
		mov	[esp+3Ch+var_38], 8Eh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 0Ah

loc_6E416828:				; CODE XREF: sub_6E4164A0+424j
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4151B0

loc_6E41683C:				; CODE XREF: sub_6E4164A0+455j
		mov	eax, [esp+3Ch+arg_14]
		mov	dword ptr [eax], 0
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E416500
; ---------------------------------------------------------------------------

loc_6E416850:				; CODE XREF: sub_6E4164A0+2F3j
		mov	ecx, [eax+20h]
		mov	esi, [eax+24h]
		jmp	loc_6E41679F
; ---------------------------------------------------------------------------

loc_6E41685B:				; CODE XREF: sub_6E4164A0+2CCj
		cmp	edi, 2180h
		jz	short loc_6E416877

loc_6E416863:				; CODE XREF: sub_6E4164A0+3DFj
		mov	edx, 1
		jmp	loc_6E4166F9
; ---------------------------------------------------------------------------

loc_6E41686D:				; CODE XREF: sub_6E4164A0+253j
		mov	[esp+3Ch+var_2C], 1DDh
		jmp	short loc_6E4167FF
; ---------------------------------------------------------------------------

loc_6E416877:				; CODE XREF: sub_6E4164A0+3C1j
		cmp	[esp+3Ch+arg_8], 2181h
		jnz	short loc_6E416863
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E411760
		xor	edx, edx
		mov	dl, [ebp+0]
		jmp	loc_6E4166F9
; ---------------------------------------------------------------------------

loc_6E416893:				; CODE XREF: sub_6E4164A0+27Fj
		mov	[esp+3Ch+var_2C], 1F1h
		mov	[esp+3Ch+var_30], offset aS3_both_c ; "s3_both.c"
		mov	[esp+3Ch+var_34], 98h
		mov	[esp+3Ch+var_38], 8Eh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 2Fh
		jmp	loc_6E416828
; ---------------------------------------------------------------------------

loc_6E4168C9:				; CODE XREF: sub_6E4164A0+345j
		mov	[esp+3Ch+var_2C], 1FAh
		mov	[esp+3Ch+var_30], offset aS3_both_c ; "s3_both.c"
		mov	[esp+3Ch+var_34], 7
		mov	[esp+3Ch+var_38], 8Eh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		jmp	loc_6E41683C
; ---------------------------------------------------------------------------

loc_6E4168FA:				; CODE XREF: sub_6E4164A0+11Aj
					; sub_6E4164A0+124j ...
		mov	al, dl
		cmp	[esp+3Ch+arg_C], 0
		jns	loc_6E4166EB
		jmp	loc_6E416772
sub_6E4164A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E416910	proc near		; CODE XREF: sub_6E4084B0+35Ep
					; sub_6E4084B0+49Dp ...

var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		mov	ecx, ebx
		test	ebx, ebx
		jz	loc_6E4169B0

loc_6E416922:				; CODE XREF: sub_6E416910+B0j
		mov	edx, [ecx]
		cmp	edx, 6
		jz	short loc_6E416980
		cmp	edx, 74h
		jz	short loc_6E416970
		cmp	edx, 198h
		jz	short loc_6E4169A0
		cmp	edx, 32Ch
		jz	short loc_6E416990
		cmp	edx, 352h
		jz	short loc_6E416990
		cmp	edx, 32Bh
		jz	loc_6E4169F0
		xor	eax, eax
		cmp	edx, 353h
		setz	al
		lea	eax, ds:0FFFFFFFFh[eax*8]
		jmp	short loc_6E416975
; ---------------------------------------------------------------------------
		align 10h

loc_6E416970:				; CODE XREF: sub_6E416910+1Cj
		mov	eax, 2

loc_6E416975:				; CODE XREF: sub_6E416910+54j
					; sub_6E416910+72j ...
		test	ebx, ebx
		jz	short loc_6E4169D0
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E416980:				; CODE XREF: sub_6E416910+17j
		xor	eax, eax
		jmp	short loc_6E416975
; ---------------------------------------------------------------------------
		align 10h

loc_6E416990:				; CODE XREF: sub_6E416910+2Cj
					; sub_6E416910+34j
		mov	eax, 6
		jmp	short loc_6E416975
; ---------------------------------------------------------------------------
		align 10h

loc_6E4169A0:				; CODE XREF: sub_6E416910+24j
		mov	eax, 5
		jmp	short loc_6E416975
; ---------------------------------------------------------------------------
		align 10h

loc_6E4169B0:				; CODE XREF: sub_6E416910+Cj
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	X509_get_pubkey
		mov	ecx, eax
		test	eax, eax
		jnz	loc_6E416922
		mov	eax, 0FFFFFFFFh
		nop
		lea	esi, [esi+0]

loc_6E4169D0:				; CODE XREF: sub_6E416910+67j
		mov	[esp+1Ch+var_10], eax
		mov	[esp+1Ch+var_1C], ecx
		call	EVP_PKEY_free
		mov	eax, [esp+1Ch+var_10]
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4169F0:				; CODE XREF: sub_6E416910+3Cj
		mov	eax, 7
		jmp	loc_6E416975
sub_6E416910	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E416A00	proc near		; CODE XREF: sub_6E4055A0+539p
					; sub_6E4084B0+5C6p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sub	eax, 2
		cmp	eax, 30h
		ja	short loc_6E416A20
		movsx	eax, ds:byte_6E44C200[eax]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E416A20:				; CODE XREF: sub_6E416A00+Aj
		mov	eax, 2Eh
		retn
sub_6E416A00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E416A30	proc near		; CODE XREF: sub_6E4125B0+3D3p
					; sub_6E413BF0+123Ap ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_version
		cmp	eax, 0FEFFh
		jz	short loc_6E416A90
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_version
		cmp	eax, 100h
		setz	al
		xor	edx, edx
		mov	dl, al
		lea	edx, ds:8148h[edx*8]
		mov	esi, eax
		and	esi, 0FFh
		lea	esi, ds:4148h[esi*8]
		mov	ecx, [ebx+58h]
		mov	eax, [ecx+0ECh]
		test	eax, eax
		jz	short loc_6E416AA7

loc_6E416A80:				; CODE XREF: sub_6E416A30+75j
					; sub_6E416A30+1A0j
		mov	[ebx+4Ch], eax
		mov	eax, 1

loc_6E416A88:				; CODE XREF: sub_6E416A30+142j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E416A90:				; CODE XREF: sub_6E416A30+17j
		mov	edx, 8150h
		mov	esi, 4150h
		mov	ecx, [ebx+58h]
		mov	eax, [ecx+0ECh]
		test	eax, eax
		jnz	short loc_6E416A80

loc_6E416AA7:				; CODE XREF: sub_6E416A30+4Ej
		mov	eax, [ebx+100h]
		test	al, 20h
		jz	short loc_6E416ABD
		mov	dword ptr [ecx+0E8h], 1
		mov	esi, edx

loc_6E416ABD:				; CODE XREF: sub_6E416A30+7Fj
		test	eax, 20000h
		jnz	short loc_6E416ACA
		add	esi, 400h

loc_6E416ACA:				; CODE XREF: sub_6E416A30+92j
		mov	edi, [ebx+0E4h]
		mov	[esp+2Ch+var_20], 2A2h
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 9
		call	CRYPTO_lock
		mov	edx, [edi+160h]
		test	edx, edx
		jz	short loc_6E416B02
		cmp	esi, [edx]
		jz	short loc_6E416B80

loc_6E416B02:				; CODE XREF: sub_6E416A30+CCj
					; sub_6E416A30+155j
		mov	[esp+2Ch+var_20], 2ACh
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock
		mov	[esp+2Ch+var_24], 2AEh
		mov	[esp+2Ch+var_28], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_2C], esi
		call	CRYPTO_malloc
		mov	edi, eax
		test	eax, eax
		jnz	short loc_6E416BBF
		mov	[esp+2Ch+var_1C], 2F0h
		mov	[esp+2Ch+var_20], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 9Ch
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E416A88
; ---------------------------------------------------------------------------
		align 10h

loc_6E416B80:				; CODE XREF: sub_6E416A30+D0j
		mov	edi, [edx+8]
		test	edi, edi
		jz	loc_6E416B02
		mov	eax, [edi]
		mov	[edx+8], eax
		dec	dword ptr [edx+4]
		jnz	short loc_6E416B9B
		mov	dword ptr [edx], 0

loc_6E416B9B:				; CODE XREF: sub_6E416A30+163j
		mov	[esp+2Ch+var_20], 2ACh
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock

loc_6E416BBF:				; CODE XREF: sub_6E416A30+112j
		mov	eax, [ebx+58h]
		mov	[eax+0ECh], edi
		mov	[eax+0F0h], esi
		mov	eax, edi
		jmp	loc_6E416A80
sub_6E416A30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E416BE0	proc near		; CODE XREF: sub_6E412CC0+553p
					; sub_6E4132F0+563p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_version
		cmp	eax, 0FEFFh
		jz	short loc_6E416C40
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_version
		cmp	eax, 100h
		setz	al
		xor	edx, edx
		mov	dl, al
		lea	edx, [edx+edx*8+58h]
		mov	esi, eax
		and	esi, 0FFh
		lea	esi, [esi+esi*8+5]
		mov	ecx, [ebx+58h]
		mov	eax, [ecx+0FCh]
		test	eax, eax
		jz	short loc_6E416C57

loc_6E416C2A:				; CODE XREF: sub_6E416BE0+75j
		mov	eax, 1

loc_6E416C2F:				; CODE XREF: sub_6E416BE0+14Bj
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E416C40:				; CODE XREF: sub_6E416BE0+17j
		mov	edx, 61h
		mov	esi, 0Eh
		mov	ecx, [ebx+58h]
		mov	eax, [ecx+0FCh]
		test	eax, eax
		jnz	short loc_6E416C2A

loc_6E416C57:				; CODE XREF: sub_6E416BE0+48j
		mov	eax, [ebx+114h]
		add	eax, esi
		mov	ecx, [ebx+100h]
		test	ecx, 20000h
		jz	loc_6E416D30
		lea	esi, [eax+53h]

loc_6E416C74:				; CODE XREF: sub_6E416BE0+156j
		and	ch, 8
		jnz	short loc_6E416C7B
		add	esi, edx

loc_6E416C7B:				; CODE XREF: sub_6E416BE0+97j
		mov	edi, [ebx+0E4h]
		mov	[esp+2Ch+var_20], 2A2h
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 9
		call	CRYPTO_lock
		mov	edx, [edi+15Ch]
		test	edx, edx
		jz	short loc_6E416CB7
		cmp	esi, [edx]
		jz	loc_6E416D40

loc_6E416CB7:				; CODE XREF: sub_6E416BE0+CDj
					; sub_6E416BE0+165j
		mov	[esp+2Ch+var_20], 2ACh
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock
		mov	[esp+2Ch+var_24], 2AEh
		mov	[esp+2Ch+var_28], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_2C], esi
		call	CRYPTO_malloc
		mov	edi, eax
		test	eax, eax
		jnz	loc_6E416D87
		mov	[esp+2Ch+var_1C], 315h
		mov	[esp+2Ch+var_20], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 123h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E416C2F
; ---------------------------------------------------------------------------

loc_6E416D30:				; CODE XREF: sub_6E416BE0+8Bj
		lea	esi, [eax+453h]
		jmp	loc_6E416C74
; ---------------------------------------------------------------------------
		align 10h

loc_6E416D40:				; CODE XREF: sub_6E416BE0+D1j
		mov	edi, [edx+8]
		test	edi, edi
		jz	loc_6E416CB7
		mov	eax, [edi]
		mov	[edx+8], eax
		mov	eax, [edx+4]
		lea	ecx, [eax-1]
		mov	[edx+4], ecx
		test	ecx, ecx
		jnz	short loc_6E416D63
		mov	dword ptr [edx], 0

loc_6E416D63:				; CODE XREF: sub_6E416BE0+17Bj
		mov	[esp+2Ch+var_20], 2ACh
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock

loc_6E416D87:				; CODE XREF: sub_6E416BE0+117j
		mov	edx, [ebx+58h]
		mov	[edx+0FCh], edi
		mov	[edx+100h], esi
		mov	eax, 1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_6E416BE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E416DB0	proc near		; CODE XREF: sub_6E406650+65Cp
					; sub_6E40D250+4F9p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_version
		cmp	eax, 0FEFFh
		jz	short loc_6E416E20
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_version
		cmp	eax, 100h
		setz	al
		xor	edx, edx
		mov	dl, al
		lea	edx, ds:8148h[edx*8]
		mov	esi, eax
		and	esi, 0FFh
		lea	esi, ds:4148h[esi*8]
		mov	ecx, [ebx+58h]
		mov	eax, [ecx+0ECh]
		test	eax, eax
		jz	short loc_6E416E37

loc_6E416E00:				; CODE XREF: sub_6E416DB0+85j
					; sub_6E416DB0+1B0j
		mov	[ebx+4Ch], eax
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6E416BE0
		test	eax, eax
		setnz	al
		and	eax, 0FFh

loc_6E416E15:				; CODE XREF: sub_6E416DB0+152j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E416E20:				; CODE XREF: sub_6E416DB0+17j
		mov	edx, 8150h
		mov	esi, 4150h
		mov	ecx, [ebx+58h]
		mov	eax, [ecx+0ECh]
		test	eax, eax
		jnz	short loc_6E416E00

loc_6E416E37:				; CODE XREF: sub_6E416DB0+4Ej
		mov	eax, [ebx+100h]
		test	al, 20h
		jz	short loc_6E416E4D
		mov	dword ptr [ecx+0E8h], 1
		mov	esi, edx

loc_6E416E4D:				; CODE XREF: sub_6E416DB0+8Fj
		test	eax, 20000h
		jnz	short loc_6E416E5A
		add	esi, 400h

loc_6E416E5A:				; CODE XREF: sub_6E416DB0+A2j
		mov	edi, [ebx+0E4h]
		mov	[esp+2Ch+var_20], 2A2h
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 9
		call	CRYPTO_lock
		mov	edx, [edi+160h]
		test	edx, edx
		jz	short loc_6E416E92
		cmp	esi, [edx]
		jz	short loc_6E416F10

loc_6E416E92:				; CODE XREF: sub_6E416DB0+DCj
					; sub_6E416DB0+165j
		mov	[esp+2Ch+var_20], 2ACh
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock
		mov	[esp+2Ch+var_24], 2AEh
		mov	[esp+2Ch+var_28], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_2C], esi
		call	CRYPTO_malloc
		mov	edi, eax
		test	eax, eax
		jnz	short loc_6E416F4F
		mov	[esp+2Ch+var_1C], 2F0h
		mov	[esp+2Ch+var_20], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 9Ch
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E416E15
; ---------------------------------------------------------------------------
		align 10h

loc_6E416F10:				; CODE XREF: sub_6E416DB0+E0j
		mov	edi, [edx+8]
		test	edi, edi
		jz	loc_6E416E92
		mov	eax, [edi]
		mov	[edx+8], eax
		dec	dword ptr [edx+4]
		jnz	short loc_6E416F2B
		mov	dword ptr [edx], 0

loc_6E416F2B:				; CODE XREF: sub_6E416DB0+173j
		mov	[esp+2Ch+var_20], 2ACh
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock

loc_6E416F4F:				; CODE XREF: sub_6E416DB0+122j
		mov	eax, [ebx+58h]
		mov	[eax+0ECh], edi
		mov	[eax+0F0h], esi
		mov	eax, edi
		jmp	loc_6E416E00
sub_6E416DB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E416F70	proc near		; CODE XREF: sub_6E40E530+48p
					; sub_6E412AF0+181p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	esi, [eax+0FCh]
		test	esi, esi
		jz	loc_6E417019
		mov	edi, [eax+100h]
		mov	ebp, [ebx+0E4h]
		mov	[esp+2Ch+var_20], 2B7h
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 9
		call	CRYPTO_lock
		mov	eax, [ebp+15Ch]
		test	eax, eax
		jz	short loc_6E416FE0
		mov	edx, [eax]
		cmp	edi, edx
		jz	short loc_6E416FD0
		test	edx, edx
		jnz	short loc_6E416FE0

loc_6E416FD0:				; CODE XREF: sub_6E416F70+5Aj
		mov	edx, [eax+4]
		cmp	edx, [ebp+158h]
		jnb	short loc_6E416FE0
		cmp	edi, 3
		ja	short loc_6E417030

loc_6E416FE0:				; CODE XREF: sub_6E416F70+54j
					; sub_6E416F70+5Ej ...
		mov	[esp+2Ch+var_20], 2C4h
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock
		mov	[esp+2Ch+var_2C], esi
		call	CRYPTO_free

loc_6E41700C:				; CODE XREF: sub_6E416F70+F2j
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+0FCh], 0

loc_6E417019:				; CODE XREF: sub_6E416F70+16j
		mov	eax, 1
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E417030:				; CODE XREF: sub_6E416F70+6Ej
		mov	[eax], edi
		mov	ecx, [eax+8]
		mov	[esi], ecx
		mov	[eax+8], esi
		inc	edx
		mov	[eax+4], edx
		mov	[esp+2Ch+var_20], 2C4h
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock
		jmp	short loc_6E41700C
sub_6E416F70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E417070	proc near		; CODE XREF: sub_6E40E530+33p
					; sub_6E4125B0+38Dp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	esi, [eax+0ECh]
		test	esi, esi
		jz	loc_6E417119
		mov	edi, [eax+0F0h]
		mov	ebp, [ebx+0E4h]
		mov	[esp+2Ch+var_20], 2B7h
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 9
		call	CRYPTO_lock
		mov	eax, [ebp+160h]
		test	eax, eax
		jz	short loc_6E4170E0
		mov	edx, [eax]
		cmp	edi, edx
		jz	short loc_6E4170D0
		test	edx, edx
		jnz	short loc_6E4170E0

loc_6E4170D0:				; CODE XREF: sub_6E417070+5Aj
		mov	edx, [eax+4]
		cmp	edx, [ebp+158h]
		jnb	short loc_6E4170E0
		cmp	edi, 3
		ja	short loc_6E417130

loc_6E4170E0:				; CODE XREF: sub_6E417070+54j
					; sub_6E417070+5Ej ...
		mov	[esp+2Ch+var_20], 2C4h
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock
		mov	[esp+2Ch+var_2C], esi
		call	CRYPTO_free

loc_6E41710C:				; CODE XREF: sub_6E417070+F2j
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+0ECh], 0

loc_6E417119:				; CODE XREF: sub_6E417070+16j
		mov	eax, 1
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E417130:				; CODE XREF: sub_6E417070+6Ej
		mov	[eax], edi
		mov	ecx, [eax+8]
		mov	[esi], ecx
		mov	[eax+8], esi
		inc	edx
		mov	[eax+4], edx
		mov	[esp+2Ch+var_20], 2C4h
		mov	[esp+2Ch+var_24], offset aS3_both_c ; "s3_both.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock
		jmp	short loc_6E41710C
sub_6E417070	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6E417170:				; DATA XREF: sub_6E417930+BFDo
		mov	edx, [esp+4]
		mov	eax, [esp+8]
		mov	ecx, [edx]
		mov	[eax], cl
		mov	ecx, [edx]
		shr	ecx, 8
		mov	[eax+1], cl
		xor	ecx, ecx
		mov	cx, [edx+2]
		mov	[eax+2], cl
		xor	ecx, ecx
		mov	cl, [edx+3]
		mov	[eax+3], cl
		mov	ecx, [edx+4]
		mov	[eax+4], cl
		mov	ecx, [edx+4]
		shr	ecx, 8
		mov	[eax+5], cl
		xor	ecx, ecx
		mov	cx, [edx+6]
		mov	[eax+6], cl
		xor	ecx, ecx
		mov	cl, [edx+7]
		mov	[eax+7], cl
		mov	ecx, [edx+8]
		mov	[eax+8], cl
		mov	ecx, [edx+8]
		shr	ecx, 8
		mov	[eax+9], cl
		xor	ecx, ecx
		mov	cx, [edx+0Ah]
		mov	[eax+0Ah], cl
		xor	ecx, ecx
		mov	cl, [edx+0Bh]
		mov	[eax+0Bh], cl
		mov	ecx, [edx+0Ch]
		mov	[eax+0Ch], cl
		mov	ecx, [edx+0Ch]
		shr	ecx, 8
		mov	[eax+0Dh], cl
		xor	ecx, ecx
		mov	cx, [edx+0Eh]
		mov	[eax+0Eh], cl
		mov	cl, [edx+0Fh]
		and	ecx, 0FFh
		mov	[eax+0Fh], cl
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E417200:				; DATA XREF: sub_6E417930+1BFo
		mov	edx, [esp+4]
		mov	eax, [esp+8]
		xor	ecx, ecx
		mov	cl, [edx+3]
		mov	[eax], cl
		xor	ecx, ecx
		mov	cx, [edx+2]
		mov	[eax+1], cl
		mov	ecx, [edx]
		shr	ecx, 8
		mov	[eax+2], cl
		mov	ecx, [edx]
		mov	[eax+3], cl
		xor	ecx, ecx
		mov	cl, [edx+7]
		mov	[eax+4], cl
		xor	ecx, ecx
		mov	cx, [edx+6]
		mov	[eax+5], cl
		mov	ecx, [edx+4]
		shr	ecx, 8
		mov	[eax+6], cl
		mov	ecx, [edx+4]
		mov	[eax+7], cl
		xor	ecx, ecx
		mov	cl, [edx+0Bh]
		mov	[eax+8], cl
		xor	ecx, ecx
		mov	cx, [edx+0Ah]
		mov	[eax+9], cl
		mov	ecx, [edx+8]
		shr	ecx, 8
		mov	[eax+0Ah], cl
		mov	ecx, [edx+8]
		mov	[eax+0Bh], cl
		xor	ecx, ecx
		mov	cl, [edx+0Fh]
		mov	[eax+0Ch], cl
		xor	ecx, ecx
		mov	cx, [edx+0Eh]
		mov	[eax+0Dh], cl
		mov	ecx, [edx+0Ch]
		shr	ecx, 8
		mov	[eax+0Eh], cl
		mov	ecx, [edx+0Ch]
		mov	[eax+0Fh], cl
		xor	ecx, ecx
		mov	cl, [edx+13h]
		mov	[eax+10h], cl
		xor	ecx, ecx
		mov	cx, [edx+12h]
		mov	[eax+11h], cl
		mov	ecx, [edx+10h]
		shr	ecx, 8
		mov	[eax+12h], cl
		mov	edx, [edx+10h]
		mov	[eax+13h], dl
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4172B0:				; DATA XREF: sub_6E417930+C9o
					; sub_6E417930+B64o
		mov	edx, [esp+4]
		mov	eax, [esp+8]
		xor	ecx, ecx
		mov	cl, [edx+3]
		mov	[eax], cl
		xor	ecx, ecx
		mov	cx, [edx+2]
		mov	[eax+1], cl
		mov	ecx, [edx]
		shr	ecx, 8
		mov	[eax+2], cl
		mov	ecx, [edx]
		mov	[eax+3], cl
		xor	ecx, ecx
		mov	cl, [edx+7]
		mov	[eax+4], cl
		xor	ecx, ecx
		mov	cx, [edx+6]
		mov	[eax+5], cl
		mov	ecx, [edx+4]
		shr	ecx, 8
		mov	[eax+6], cl
		mov	ecx, [edx+4]
		mov	[eax+7], cl
		xor	ecx, ecx
		mov	cl, [edx+0Bh]
		mov	[eax+8], cl
		xor	ecx, ecx
		mov	cx, [edx+0Ah]
		mov	[eax+9], cl
		mov	ecx, [edx+8]
		shr	ecx, 8
		mov	[eax+0Ah], cl
		mov	ecx, [edx+8]
		mov	[eax+0Bh], cl
		xor	ecx, ecx
		mov	cl, [edx+0Fh]
		mov	[eax+0Ch], cl
		xor	ecx, ecx
		mov	cx, [edx+0Eh]
		mov	[eax+0Dh], cl
		mov	ecx, [edx+0Ch]
		shr	ecx, 8
		mov	[eax+0Eh], cl
		mov	ecx, [edx+0Ch]
		mov	[eax+0Fh], cl
		xor	ecx, ecx
		mov	cl, [edx+13h]
		mov	[eax+10h], cl
		xor	ecx, ecx
		mov	cx, [edx+12h]
		mov	[eax+11h], cl
		mov	ecx, [edx+10h]
		shr	ecx, 8
		mov	[eax+12h], cl
		mov	ecx, [edx+10h]
		mov	[eax+13h], cl
		xor	ecx, ecx
		mov	cl, [edx+17h]
		mov	[eax+14h], cl
		xor	ecx, ecx
		mov	cx, [edx+16h]
		mov	[eax+15h], cl
		mov	ecx, [edx+14h]
		shr	ecx, 8
		mov	[eax+16h], cl
		mov	ecx, [edx+14h]
		mov	[eax+17h], cl
		xor	ecx, ecx
		mov	cl, [edx+1Bh]
		mov	[eax+18h], cl
		xor	ecx, ecx
		mov	cx, [edx+1Ah]
		mov	[eax+19h], cl
		mov	ecx, [edx+18h]
		shr	ecx, 8
		mov	[eax+1Ah], cl
		mov	ecx, [edx+18h]
		mov	[eax+1Bh], cl
		xor	ecx, ecx
		mov	cl, [edx+1Fh]
		mov	[eax+1Ch], cl
		xor	ecx, ecx
		mov	cx, [edx+1Eh]
		mov	[eax+1Dh], cl
		mov	ecx, [edx+1Ch]
		shr	ecx, 8
		mov	[eax+1Eh], cl
		mov	edx, [edx+1Ch]
		mov	[eax+1Fh], dl
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4173C0:				; DATA XREF: sub_6E417930+64Ao
					; sub_6E417930+AFDo
		push	esi
		push	ebx
		mov	ecx, [esp+10h]
		mov	ebx, [esp+0Ch]
		lea	esi, [ecx+40h]
		lea	esi, [esi+0]

loc_6E4173D0:				; CODE XREF: .text:6E417429j
		xor	eax, eax
		mov	al, [ebx+7]
		mov	[ecx], al
		xor	eax, eax
		mov	ax, [ebx+6]
		mov	[ecx+1], al
		mov	eax, [ebx+4]
		shr	eax, 8
		mov	[ecx+2], al
		mov	eax, [ebx+4]
		mov	[ecx+3], al
		mov	eax, [ebx]
		mov	edx, [ebx+4]
		shrd	eax, edx, 18h
		shr	edx, 18h
		mov	[ecx+4], al
		mov	eax, [ebx]
		mov	edx, [ebx+4]
		shrd	eax, edx, 10h
		shr	edx, 10h
		mov	[ecx+5], al
		mov	eax, [ebx]
		mov	edx, [ebx+4]
		shrd	eax, edx, 8
		shr	edx, 8
		mov	[ecx+6], al
		add	ecx, 8
		mov	eax, [ebx]
		mov	[ecx-1], al
		add	ebx, 8
		cmp	esi, ecx
		jnz	short loc_6E4173D0
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E417430	proc near		; CODE XREF: sub_6E411500+193p

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	esi
		push	ebx
		mov	ebx, [esp+0Ch+arg_4]
		mov	eax, [esp+0Ch+arg_C]
		inc	eax
		mov	edx, [ebx+4]
		cmp	eax, edx
		ja	short loc_6E4174A0
		mov	ecx, [ebx+0Ch]
		movzx	esi, byte ptr [ecx+edx-1]
		and	esi, 0FFh
		add	eax, esi
		inc	esi
		mov	ecx, edx
		sub	ecx, eax
		xor	ecx, eax
		xor	eax, edx
		or	ecx, eax
		xor	ecx, edx
		mov	eax, [esp+0Ch+arg_8]
		sub	eax, esi
		xor	eax, esi
		mov	edi, [esp+0Ch+arg_8]
		xor	edi, esi
		or	eax, edi
		xor	eax, [esp+0Ch+arg_8]
		or	eax, ecx
		sar	eax, 1Fh
		mov	ecx, eax
		not	ecx
		and	esi, ecx
		sub	edx, esi
		mov	[ebx+4], edx
		shl	esi, 8
		or	[ebx], esi
		mov	eax, ecx
		not	eax
		and	ecx, 1
		or	eax, ecx
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4174A0:				; CODE XREF: sub_6E417430+11j
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_6E417430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4174B0	proc near		; CODE XREF: sub_6E4206A0+523p
					; sub_6E42F410+21Ap

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_8]
		mov	edi, [esp+3Ch+arg_C]
		inc	edi
		mov	edx, [ebx]
		cmp	edx, 301h
		jg	short loc_6E4174F0
		cmp	edx, 100h
		jz	short loc_6E4174F0
		mov	eax, [esp+3Ch+arg_4]
		mov	eax, [eax+4]
		cmp	edi, eax
		ja	loc_6E417620
		mov	ecx, [esp+3Ch+arg_4]
		mov	ecx, [ecx+0Ch]
		jmp	short loc_6E417518
; ---------------------------------------------------------------------------
		align 10h

loc_6E4174F0:				; CODE XREF: sub_6E4174B0+1Cj
					; sub_6E4174B0+24j
		mov	ecx, [esp+3Ch+arg_4]
		mov	edx, [ecx+4]
		lea	ecx, [edi+eax]
		cmp	ecx, edx
		ja	loc_6E417620
		mov	esi, [esp+3Ch+arg_4]
		mov	ecx, [esi+0Ch]
		add	ecx, eax
		mov	[esi+0Ch], ecx
		add	[esi+10h], eax
		sub	edx, eax
		mov	eax, edx
		mov	[esi+4], edx

loc_6E417518:				; CODE XREF: sub_6E4174B0+3Cj
		mov	dl, [ecx+eax-1]
		mov	esi, edx
		and	esi, 0FFh
		test	byte ptr [ebx+101h], 2
		jz	short loc_6E41753B
		mov	ecx, [ebx+88h]
		test	ecx, ecx
		jz	loc_6E417661

loc_6E41753B:				; CODE XREF: sub_6E4174B0+7Bj
					; sub_6E4174B0+1ECj ...
		mov	eax, [ebx+80h]
		mov	eax, [eax]
		mov	[esp+3Ch+var_3C], eax
		call	EVP_CIPHER_flags
		test	eax, 200000h
		jnz	loc_6E417630
		lea	eax, [esi+edi]
		mov	edi, [esp+3Ch+arg_4]
		mov	edi, [edi+4]
		mov	ebx, edi
		mov	[esp+3Ch+var_20], edi
		sub	edi, eax
		xor	edi, eax
		xor	eax, ebx
		or	edi, eax
		xor	edi, ebx
		sar	edi, 1Fh
		mov	edx, edi
		not	edx
		lea	eax, [ebx-1]
		mov	[esp+3Ch+var_28], eax
		cmp	eax, 0FEh
		jbe	loc_6E417650
		mov	[esp+3Ch+var_28], 0FFh

loc_6E417591:				; CODE XREF: sub_6E4174B0+1A6j
		mov	ebx, esi
		xor	ecx, ecx
		mov	ebp, [esp+3Ch+var_20]
		sub	ebp, esi
		mov	eax, [esp+3Ch+arg_4]
		add	ebp, [eax+0Ch]
		mov	edi, edx
		mov	[esp+3Ch+var_24], ebp
		nop
		lea	esi, [esi+0]

loc_6E4175B0:				; CODE XREF: sub_6E4174B0+129j
		mov	edx, [esp+3Ch+var_24]
		xor	eax, eax
		mov	al, [ebx+edx-1]
		xor	eax, esi
		mov	edx, ecx
		xor	edx, ebx
		mov	ebp, ecx
		xor	ebp, esi
		or	edx, ebp
		xor	edx, esi
		sar	edx, 1Fh
		not	edx
		and	eax, edx
		not	eax
		and	edi, eax
		inc	ecx
		dec	ebx
		cmp	ecx, [esp+3Ch+var_28]
		jb	short loc_6E4175B0
		mov	edx, edi

loc_6E4175DD:				; CODE XREF: sub_6E4174B0+1ACj
		mov	edi, edx
		and	edi, 0FFh
		xor	edi, 0FFh
		lea	edx, [edi-1]
		not	edi
		and	edx, edi
		sar	edx, 1Fh
		inc	esi
		and	esi, edx
		mov	eax, [esp+3Ch+var_20]
		sub	eax, esi
		mov	edi, [esp+3Ch+arg_4]
		mov	[edi+4], eax
		shl	esi, 8
		or	[edi], esi
		mov	eax, edx
		not	eax
		and	edx, 1
		or	eax, edx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E417620:				; CODE XREF: sub_6E4174B0+2Fj
					; sub_6E4174B0+4Cj
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E417630:				; CODE XREF: sub_6E4174B0+A0j
		not	esi
		mov	eax, [esp+3Ch+arg_4]
		add	[eax+4], esi
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E417650:				; CODE XREF: sub_6E4174B0+D3j
		mov	eax, [esp+3Ch+var_28]
		test	eax, eax
		jnz	loc_6E417591
		jmp	loc_6E4175DD
; ---------------------------------------------------------------------------

loc_6E417661:				; CODE XREF: sub_6E4174B0+85j
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_34], 8
		mov	[esp+3Ch+var_38], offset dword_6E44C240
		mov	eax, [ebx+58h]
		add	eax, 8
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_memcmp
		test	eax, eax
		mov	edx, [esp+3Ch+var_28]
		jnz	short loc_6E4176AD
		and	edx, 1
		jnz	short loc_6E4176AD
		mov	edx, [ebx+58h]
		mov	eax, [edx]
		or	eax, 8
		mov	[edx], eax

loc_6E41769A:				; CODE XREF: sub_6E4174B0+202j
		test	al, 8
		jz	loc_6E41753B
		cmp	esi, 1
		adc	esi, 0FFFFFFFFh
		jmp	loc_6E41753B
; ---------------------------------------------------------------------------

loc_6E4176AD:				; CODE XREF: sub_6E4174B0+1D9j
					; sub_6E4174B0+1DEj
		mov	eax, [ebx+58h]
		mov	eax, [eax]
		jmp	short loc_6E41769A
sub_6E4174B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4176C0	proc near		; CODE XREF: sub_6E413BF0+99Ap
					; sub_6E428400+393p

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= byte ptr -9Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	esi, [esp+0BCh+arg_8]
		mov	eax, [esp+0BCh+arg_4]
		mov	eax, [eax+4]
		mov	[esp+0BCh+var_A8], eax
		sub	eax, esi
		mov	[esp+0BCh+var_B0], eax
		cmp	esi, [esp+0BCh+arg_C]
		ja	loc_6E4178B0

loc_6E4176F2:				; CODE XREF: sub_6E4176C0+20Cj
		cmp	esi, 40h
		ja	loc_6E417880

loc_6E4176FB:				; CODE XREF: sub_6E4176C0+1DCj
		lea	edx, [esp+0BCh+var_9C]
		mov	eax, edx
		neg	eax
		and	eax, 3Fh
		lea	ebp, [edx+eax]
		lea	eax, [esi+100h]
		cmp	[esp+0BCh+arg_C], eax
		jbe	loc_6E417850
		mov	eax, [esp+0BCh+arg_C]
		lea	ebx, [eax-100h]
		sub	ebx, esi

loc_6E41772B:				; CODE XREF: sub_6E4176C0+192j
		mov	eax, esi
		shr	eax, 1
		shl	eax, 18h
		add	eax, [esp+0BCh+var_B0]
		sub	eax, ebx
		xor	edx, edx
		div	esi
		mov	[esp+0BCh+var_AC], esi
		mov	edi, ebp
		cmp	esi, 4
		jnb	loc_6E417860

loc_6E41774B:				; CODE XREF: sub_6E4176C0+1BBj
		test	byte ptr [esp+0BCh+var_AC], 2
		jz	short loc_6E41775A
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E41775A:				; CODE XREF: sub_6E4176C0+90j
		test	byte ptr [esp+0BCh+var_AC], 1
		jz	short loc_6E417764
		mov	byte ptr [edi],	0

loc_6E417764:				; CODE XREF: sub_6E4176C0+9Fj
		cmp	ebx, [esp+0BCh+arg_C]
		jnb	loc_6E4177F6
		mov	eax, [esp+0BCh+arg_4]
		mov	eax, [eax+0Ch]
		mov	[esp+0BCh+var_A4], eax
		xor	eax, eax
		mov	[esp+0BCh+var_AC], ebp
		mov	[esp+0BCh+var_A0], edx
		mov	edi, esi
		nop
		lea	esi, [esi+0]

loc_6E417790:				; CODE XREF: sub_6E4176C0+12Cj
		lea	ecx, [eax+1]
		mov	esi, ebx
		mov	edx, [esp+0BCh+var_B0]
		sub	esi, edx
		xor	esi, edx
		xor	edx, ebx
		or	esi, edx
		xor	esi, ebx
		sar	esi, 1Fh
		mov	edx, esi
		not	edx
		mov	esi, [esp+0BCh+var_A4]
		and	dl, [esi+ebx]
		mov	esi, edx
		mov	edx, ebx
		mov	ebp, [esp+0BCh+var_A8]
		sub	edx, ebp
		xor	edx, ebp
		xor	ebp, ebx
		or	edx, ebp
		xor	edx, ebx
		sar	edx, 1Fh
		and	esi, edx
		mov	edx, esi
		mov	esi, [esp+0BCh+var_AC]
		or	[esi+eax], dl
		mov	eax, ecx
		sub	eax, edi
		xor	eax, edi
		mov	edx, ecx
		xor	edx, edi
		or	eax, edx
		xor	eax, ecx
		sar	eax, 1Fh
		and	eax, ecx
		inc	ebx
		cmp	ebx, [esp+0BCh+arg_C]
		jnz	short loc_6E417790
		mov	ebp, esi
		mov	edx, [esp+0BCh+var_A0]
		mov	esi, edi

loc_6E4177F6:				; CODE XREF: sub_6E4176C0+ABj
		xor	ecx, ecx
		test	esi, esi
		jz	short loc_6E41783B
		mov	eax, edx
		mov	ebx, [esp+0BCh+arg_0]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E417810:				; CODE XREF: sub_6E4176C0+179j
		mov	edx, eax
		xor	edx, 20h
		add	edx, ebp
		mov	dl, [edx]
		lea	edx, [eax+1]
		mov	al, [ebp+eax+0]
		mov	[ebx+ecx], al
		mov	eax, edx
		sub	eax, esi
		xor	eax, esi
		mov	edi, edx
		xor	edi, esi
		or	eax, edi
		xor	eax, edx
		sar	eax, 1Fh
		and	eax, edx
		inc	ecx
		cmp	ecx, esi
		jnz	short loc_6E417810

loc_6E41783B:				; CODE XREF: sub_6E4176C0+13Aj
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E417850:				; CODE XREF: sub_6E4176C0+56j
		xor	ebx, ebx
		jmp	loc_6E41772B
; ---------------------------------------------------------------------------
		align 10h

loc_6E417860:				; CODE XREF: sub_6E4176C0+85j
		test	ebp, 1
		jnz	short loc_6E4178D1

loc_6E417868:				; CODE XREF: sub_6E4176C0+21Fj
		test	edi, 2
		jnz	short loc_6E4178E1

loc_6E417870:				; CODE XREF: sub_6E4176C0+22Ej
		mov	ecx, [esp+0BCh+var_AC]
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E41774B
; ---------------------------------------------------------------------------

loc_6E417880:				; CODE XREF: sub_6E4176C0+35j
		mov	[esp+0BCh+var_B4], offset aMd_sizeEvp_max ; "md_size <=	EVP_MAX_MD_SIZE"
		mov	[esp+0BCh+var_B8], 0F9h
		mov	[esp+0BCh+var_BC], offset aS3_cbc_c ; "s3_cbc.c"
		call	OpenSSLDie
		jmp	loc_6E4176FB
; ---------------------------------------------------------------------------
		jmp	short loc_6E4178B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4178B0:				; CODE XREF: sub_6E4176C0+2Cj
					; sub_6E4176C0+1E1j
		mov	[esp+0BCh+var_B4], offset aOrig_lenMd_siz ; "orig_len >= md_size"
		mov	[esp+0BCh+var_B8], 0F8h
		mov	[esp+0BCh+var_BC], offset aS3_cbc_c ; "s3_cbc.c"
		call	OpenSSLDie
		jmp	loc_6E4176F2
; ---------------------------------------------------------------------------

loc_6E4178D1:				; CODE XREF: sub_6E4176C0+1A6j
		mov	byte ptr [ebp+0], 0
		lea	edi, [ebp+1]
		lea	eax, [esi-1]
		mov	[esp+0BCh+var_AC], eax
		jmp	short loc_6E417868
; ---------------------------------------------------------------------------

loc_6E4178E1:				; CODE XREF: sub_6E4176C0+1AEj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	[esp+0BCh+var_AC], 2
		jmp	short loc_6E417870
sub_6E4176C0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E4178F0	proc near		; CODE XREF: sub_6E411E60+2F7p
					; sub_6E4212D0+223p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_md
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_type
		cmp	eax, 40h
		jz	short loc_6E417925
		jle	short loc_6E417920
		sub	eax, 2A0h
		cmp	eax, 3
		jbe	short loc_6E417925

loc_6E417918:				; CODE XREF: sub_6E4178F0+33j
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E417920:				; CODE XREF: sub_6E4178F0+1Cj
		cmp	eax, 4
		jnz	short loc_6E417918

loc_6E417925:				; CODE XREF: sub_6E4178F0+1Aj
					; sub_6E4178F0+26j
		mov	al, 1
		add	esp, 1Ch
		retn
sub_6E4178F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E417930	proc near		; CODE XREF: sub_6E411E60+413p
					; sub_6E4212D0+296p

var_36C		= dword	ptr -36Ch
var_368		= dword	ptr -368h
var_364		= dword	ptr -364h
var_358		= dword	ptr -358h
var_354		= dword	ptr -354h
var_350		= dword	ptr -350h
var_34C		= dword	ptr -34Ch
var_348		= dword	ptr -348h
var_344		= dword	ptr -344h
var_340		= dword	ptr -340h
var_33C		= dword	ptr -33Ch
var_338		= dword	ptr -338h
var_334		= dword	ptr -334h
var_330		= dword	ptr -330h
var_32C		= dword	ptr -32Ch
var_328		= dword	ptr -328h
var_324		= dword	ptr -324h
var_320		= dword	ptr -320h
var_31C		= dword	ptr -31Ch
var_318		= dword	ptr -318h
var_314		= dword	ptr -314h
var_310		= dword	ptr -310h
var_30C		= dword	ptr -30Ch
var_308		= dword	ptr -308h
var_304		= dword	ptr -304h
var_300		= dword	ptr -300h
var_2FC		= dword	ptr -2FCh
var_2F8		= dword	ptr -2F8h
var_2F4		= dword	ptr -2F4h
var_2EE		= byte ptr -2EEh
var_2ED		= byte ptr -2EDh
var_2EC		= dword	ptr -2ECh
var_2E8		= dword	ptr -2E8h
var_2E4		= dword	ptr -2E4h
var_2E0		= dword	ptr -2E0h
var_2DC		= dword	ptr -2DCh
var_2D8		= dword	ptr -2D8h
var_2D4		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
var_2CC		= byte ptr -2CCh
var_2CB		= byte ptr -2CBh
var_2CA		= byte ptr -2CAh
var_2C9		= byte ptr -2C9h
var_2C8		= dword	ptr -2C8h
var_2C4		= byte ptr -2C4h
var_2B4		= dword	ptr -2B4h
var_274		= byte ptr -274h
var_1F4		= byte ptr -1F4h
var_174		= byte ptr -174h
var_167		= byte ptr -167h
var_166		= byte ptr -166h
var_F4		= byte ptr -0F4h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 35Ch
		mov	edi, [esp+36Ch+arg_18]
		mov	eax, [esp+36Ch+arg_24]
		mov	[esp+36Ch+var_2D0], eax
		cmp	edi, 0FFFFFh
		ja	loc_6E417C11

loc_6E41795B:				; CODE XREF: sub_6E417930+2FDj
		mov	eax, [esp+36Ch+arg_0]
		mov	[esp+36Ch+var_36C], eax
		call	EVP_MD_CTX_md
		mov	[esp+36Ch+var_36C], eax
		call	EVP_MD_type
		cmp	eax, 2A0h
		jz	loc_6E41843A
		jle	loc_6E417A83
		cmp	eax, 2A2h
		jz	loc_6E417F20
		jl	loc_6E4183D3
		cmp	eax, 2A3h
		jnz	loc_6E417F87
		lea	eax, [esp+36Ch+var_F4]
		mov	[esp+36Ch+var_310], eax
		mov	[esp+36Ch+var_36C], eax
		call	SHA224_Init
		test	eax, eax
		jle	loc_6E417C04
		mov	eax, 2Bh
		mov	[esp+36Ch+var_34C], 33h
		mov	esi, 200h
		mov	byte ptr [esp+36Ch+var_350], 1
		mov	ebx, 8
		mov	[esp+36Ch+var_2EC], 28h
		mov	[esp+36Ch+var_354], 40h
		mov	[esp+36Ch+var_30C], 1Ch
		mov	[esp+36Ch+var_314], offset loc_6E4463D0
		mov	[esp+36Ch+var_308], offset loc_6E4172B0
		cmp	byte ptr [esp+36Ch+var_2D0], 0
		jnz	loc_6E417B05

loc_6E417A0F:				; CODE XREF: sub_6E417930+1CFj
		lea	eax, [edi+0Dh]
		mov	[esp+36Ch+var_32C], eax
		mov	ebp, [esp+36Ch+var_354]
		lea	eax, [ebp+edi+0Ch]
		add	eax, ebx
		sub	eax, [esp+36Ch+var_30C]
		xor	edx, edx
		div	ebp
		mov	edi, eax
		mov	eax, [esp+36Ch+arg_14]
		lea	ecx, [eax+0Dh]
		sub	ecx, [esp+36Ch+var_30C]
		mov	eax, ecx
		xor	edx, edx
		div	ebp
		mov	ebp, edx
		mov	[esp+36Ch+var_300], eax
		lea	eax, [ecx+ebx]
		xor	edx, edx
		div	[esp+36Ch+var_354]
		mov	[esp+36Ch+var_2FC], eax
		mov	eax, 6
		mov	[esp+36Ch+var_344], 6
		mov	[esp+36Ch+var_348], 0Dh
		cmp	edi, eax
		ja	loc_6E417B66

loc_6E417A6E:				; CODE XREF: sub_6E417930+230j
		mov	[esp+36Ch+var_320], 0
		mov	[esp+36Ch+var_31C], 0
		jmp	loc_6E417B77
; ---------------------------------------------------------------------------

loc_6E417A83:				; CODE XREF: sub_6E417930+4Dj
		cmp	eax, 4
		jz	loc_6E4184D3
		cmp	eax, 40h
		jnz	loc_6E417F87
		lea	eax, [esp+36Ch+var_F4]
		mov	[esp+36Ch+var_310], eax
		mov	[esp+36Ch+var_36C], eax
		call	SHA1_Init
		test	eax, eax
		jle	loc_6E417C04
		mov	eax, 33h
		mov	[esp+36Ch+var_34C], 33h
		mov	esi, 200h
		mov	byte ptr [esp+36Ch+var_350], 1
		mov	ebx, 8
		mov	[esp+36Ch+var_2EC], 28h
		mov	[esp+36Ch+var_354], 40h
		mov	[esp+36Ch+var_30C], 14h
		mov	[esp+36Ch+var_314], offset loc_6E4463E0
		mov	[esp+36Ch+var_308], offset loc_6E417200

loc_6E417AF7:				; CODE XREF: sub_6E417930+652j
					; sub_6E417930+B05j ...
		cmp	byte ptr [esp+36Ch+var_2D0], 0
		jz	loc_6E417A0F

loc_6E417B05:				; CODE XREF: sub_6E417930+D9j
		mov	ecx, [esp+36Ch+var_2EC]
		mov	edx, [esp+36Ch+arg_20]
		lea	ecx, [ecx+edx+0Bh]
		mov	[esp+36Ch+var_348], ecx
		add	edi, ecx
		mov	[esp+36Ch+var_32C], edi
		add	eax, edi
		mov	ebp, [esp+36Ch+var_354]
		xor	edx, edx
		div	ebp
		mov	edi, eax
		sub	ecx, [esp+36Ch+var_30C]
		add	ecx, [esp+36Ch+arg_14]
		mov	eax, ecx
		xor	edx, edx
		div	ebp
		mov	ebp, edx
		mov	[esp+36Ch+var_300], eax
		lea	eax, [ecx+ebx]
		xor	edx, edx
		div	[esp+36Ch+var_354]
		mov	[esp+36Ch+var_2FC], eax
		mov	eax, 3
		mov	[esp+36Ch+var_344], 2
		cmp	edi, eax
		jbe	loc_6E417A6E

loc_6E417B66:				; CODE XREF: sub_6E417930+138j
		sub	edi, [esp+36Ch+var_344]
		mov	[esp+36Ch+var_31C], edi
		imul	edi, [esp+36Ch+var_354]
		mov	[esp+36Ch+var_320], edi

loc_6E417B77:				; CODE XREF: sub_6E417930+14Ej
		lea	edx, ds:0[ecx*8]
		cmp	byte ptr [esp+36Ch+var_2D0], 0
		jz	loc_6E4182CF

loc_6E417B8C:				; CODE XREF: sub_6E417930+A9Ej
		cmp	byte ptr [esp+36Ch+var_350], 0
		jz	loc_6E418238
		lea	esi, [ebx-4]
		lea	eax, [esp+36Ch+var_2C4]
		mov	[esp+36Ch+var_350], eax
		cmp	esi, 4
		jb	short loc_6E417BB5
		mov	edi, eax
		mov	ecx, esi
		shr	ecx, 2
		xor	eax, eax
		rep stosd

loc_6E417BB5:				; CODE XREF: sub_6E417930+278j
		mov	eax, edx
		shr	eax, 18h
		mov	[esp+esi+36Ch+var_2C4],	al
		mov	eax, edx
		shr	eax, 10h
		mov	byte ptr [esp+ebx+36Ch+var_2C8+1], al
		mov	eax, edx
		shr	eax, 8
		mov	byte ptr [esp+ebx+36Ch+var_2C8+2], al
		mov	byte ptr [esp+ebx+36Ch+var_2C8+3], dl

loc_6E417BE0:				; CODE XREF: sub_6E417930+94Ej
		mov	esi, [esp+36Ch+var_320]
		test	esi, esi
		jz	loc_6E417D32
		cmp	byte ptr [esp+36Ch+var_2D0], 0
		jz	loc_6E41853A
		mov	eax, [esp+36Ch+var_348]
		cmp	[esp+36Ch+var_354], eax
		jb	short loc_6E417C32

loc_6E417C04:				; CODE XREF: sub_6E417930+84j
					; sub_6E417930+17Aj ...
		xor	eax, eax
		add	esp, 35Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E417C11:				; CODE XREF: sub_6E417930+25j
		mov	[esp+36Ch+var_364], offset aData_plus_mac_ ; "data_plus_mac_plus_padding_size <	1024 "...
		mov	[esp+36Ch+var_368], 1C7h
		mov	[esp+36Ch+var_36C], offset aS3_cbc_c ; "s3_cbc.c"
		call	OpenSSLDie
		jmp	loc_6E41795B
; ---------------------------------------------------------------------------

loc_6E417C32:				; CODE XREF: sub_6E417930+2D2j
		mov	esi, [esp+36Ch+var_354]
		sub	eax, esi
		mov	[esp+36Ch+var_358], eax
		mov	ecx, [esp+36Ch+arg_C]
		mov	[esp+36Ch+var_368], ecx
		mov	ecx, [esp+36Ch+var_310]
		mov	[esp+36Ch+var_36C], ecx
		mov	ecx, [esp+36Ch+var_314]
		call	ecx
		lea	eax, [esp+36Ch+var_174]
		mov	edi, eax
		mov	ecx, [esp+36Ch+arg_C]
		add	esi, ecx
		cmp	[esp+36Ch+var_358], 4
		jb	short loc_6E417C76
		mov	ecx, [esp+36Ch+var_358]
		shr	ecx, 2
		rep movsd

loc_6E417C76:				; CODE XREF: sub_6E417930+33Bj
		xor	edx, edx
		test	byte ptr [esp+36Ch+var_358], 2
		jz	short loc_6E417C8A
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E417C8A:				; CODE XREF: sub_6E417930+34Dj
		test	byte ptr [esp+36Ch+var_358], 1
		jz	short loc_6E417C9B
		mov	cl, [esi+edx]
		mov	byte ptr [esp+36Ch+var_34C], cl
		mov	[edi+edx], cl

loc_6E417C9B:				; CODE XREF: sub_6E417930+35Fj
		mov	esi, [esp+36Ch+var_354]
		mov	edi, [esp+36Ch+var_358]
		sub	esi, edi
		mov	ecx, esi
		mov	[esp+36Ch+var_358], esi
		mov	edx, esi
		lea	edi, [eax+edi]
		mov	esi, [esp+36Ch+arg_10]
		cmp	ecx, 4
		jnb	loc_6E4185F0

loc_6E417CC0:				; CODE XREF: sub_6E417930+CDFj
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_6E417CD2
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E417CD2:				; CODE XREF: sub_6E417930+395j
		and	edx, 1
		jz	short loc_6E417CE1
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+36Ch+var_34C], dl
		mov	[edi+ecx], dl

loc_6E417CE1:				; CODE XREF: sub_6E417930+3A5j
		mov	[esp+36Ch+var_368], eax
		mov	eax, [esp+36Ch+var_310]
		mov	[esp+36Ch+var_36C], eax
		mov	eax, [esp+36Ch+var_314]
		call	eax
		mov	eax, [esp+36Ch+var_320]
		xor	edx, edx
		div	[esp+36Ch+var_354]
		dec	eax
		mov	[esp+36Ch+var_34C], eax
		cmp	eax, 1
		jbe	short loc_6E417D32
		mov	edi, [esp+36Ch+var_358]
		add	edi, [esp+36Ch+arg_10]
		mov	esi, 1

loc_6E417D16:				; CODE XREF: sub_6E417930+400j
		mov	[esp+36Ch+var_368], edi
		mov	eax, [esp+36Ch+var_310]
		mov	[esp+36Ch+var_36C], eax
		mov	eax, [esp+36Ch+var_314]
		call	eax
		inc	esi
		add	edi, [esp+36Ch+var_354]
		cmp	esi, [esp+36Ch+var_34C]
		jnz	short loc_6E417D16

loc_6E417D32:				; CODE XREF: sub_6E417930+2B6j
					; sub_6E417930+3D4j ...
		mov	ecx, 10h
		xor	eax, eax
		lea	edi, [esp+36Ch+var_2B4]
		rep stosd
		mov	eax, [esp+36Ch+var_344]
		add	eax, [esp+36Ch+var_31C]
		mov	[esp+36Ch+var_2F4], eax
		jb	loc_6E4180DC
		lea	eax, [ebp+1]
		mov	[esp+36Ch+var_340], eax
		mov	esi, [esp+36Ch+var_354]
		mov	eax, esi
		sub	eax, ebx
		mov	[esp+36Ch+var_33C], eax
		test	esi, esi
		jz	loc_6E4182C2
		mov	[esp+36Ch+var_2F8], esi

loc_6E417D73:				; CODE XREF: sub_6E417930+99Aj
		mov	ecx, [esp+36Ch+var_30C]
		test	ecx, ecx
		jz	loc_6E4182AB
		mov	eax, [esp+36Ch+var_30C]
		mov	[esp+36Ch+var_2E4], eax

loc_6E417D8A:				; CODE XREF: sub_6E417930+98Dj
		shr	eax, 2
		mov	[esp+36Ch+var_2D4], eax
		shl	eax, 2
		mov	[esp+36Ch+var_2E0], eax
		setz	[esp+36Ch+var_2ED]
		jnz	loc_6E41829F
		mov	[esp+36Ch+var_2E8], 0
		mov	eax, [esp+36Ch+var_2E8]

loc_6E417DBB:				; CODE XREF: sub_6E417930+976j
		lea	esi, [eax+1]
		mov	[esp+36Ch+var_2DC], esi
		add	eax, 2
		mov	[esp+36Ch+var_304], eax
		lea	eax, [esp+36Ch+var_1F4]
		mov	[esp+36Ch+var_2D8], eax
		mov	esi, ebp
		not	esi
		mov	[esp+36Ch+var_338], esi
		sub	ebx, [esp+36Ch+var_354]
		add	ebx, [esp+36Ch+var_350]
		mov	[esp+36Ch+var_328], ebx
		mov	[esp+36Ch+var_344], ebp
		mov	ebp, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E417E00:				; CODE XREF: sub_6E417930+7A7j
		mov	esi, [esp+36Ch+var_31C]
		mov	edx, [esp+36Ch+var_300]
		xor	edx, esi
		lea	eax, [edx-1]
		not	edx
		and	eax, edx
		sar	eax, 1Fh
		mov	ecx, eax
		mov	byte ptr [esp+36Ch+var_358], al
		mov	edx, [esp+36Ch+var_2FC]
		xor	edx, esi
		lea	eax, [edx-1]
		not	edx
		and	eax, edx
		cdq
		mov	[esp+36Ch+var_318], edx
		mov	[esp+36Ch+var_2EE], dl
		mov	edi, edx
		mov	al, dl
		not	eax
		mov	byte ptr [esp+36Ch+var_350], al
		or	byte ptr [esp+36Ch+var_350], cl
		mov	esi, [esp+36Ch+var_344]
		neg	esi
		mov	ecx, [esp+36Ch+var_320]
		mov	ebx, ecx
		xor	eax, eax
		mov	edx, ecx
		sub	edx, [esp+36Ch+var_348]
		add	edx, [esp+36Ch+arg_10]
		mov	[esp+36Ch+var_324], edx
		add	ecx, [esp+36Ch+arg_C]
		mov	[esp+36Ch+var_330], ecx
		mov	ecx, edi
		and	ecx, 0FFh
		mov	[esp+36Ch+var_334], ecx
		not	[esp+36Ch+var_334]
		mov	[esp+36Ch+var_34C], ebp
		jmp	short loc_6E417EEC
; ---------------------------------------------------------------------------
		align 10h

loc_6E417E80:				; CODE XREF: sub_6E417930+5D9j
		mov	ecx, edi
		and	ecx, 0FFh
		not	ecx
		mov	ebp, [esp+36Ch+var_330]
		xor	edx, edx
		mov	dl, [ebp+eax+0]
		and	ecx, edx

loc_6E417E96:				; CODE XREF: sub_6E417930+5EBj
					; sub_6E417930+6B6j
		inc	ebx
		mov	edx, [esp+36Ch+var_338]
		add	edx, eax
		mov	ebp, [esp+36Ch+var_340]
		xor	edx, ebp
		xor	ebp, eax
		or	edx, ebp
		xor	edx, eax
		sar	edx, 1Fh
		not	edx
		and	edx, [esp+36Ch+var_358]
		not	edx
		and	edx, [esp+36Ch+var_350]
		and	edi, 80h
		or	edi, ecx
		and	edx, edi
		cmp	eax, [esp+36Ch+var_33C]
		jb	short loc_6E417ED9
		and	edx, [esp+36Ch+var_334]
		mov	edi, [esp+36Ch+var_328]
		mov	cl, [esp+36Ch+var_2EE]
		and	cl, [edi+eax]
		or	edx, ecx

loc_6E417ED9:				; CODE XREF: sub_6E417930+596j
		mov	ecx, [esp+36Ch+var_34C]
		mov	[ecx+eax], dl
		inc	eax
		inc	esi
		cmp	[esp+36Ch+var_354], eax
		jbe	loc_6E417FF0

loc_6E417EEC:				; CODE XREF: sub_6E417930+54Cj
		mov	edx, [esp+36Ch+var_344]
		mov	edi, edx
		xor	edi, esi
		xor	edx, eax
		or	edi, edx
		xor	edi, eax
		sar	edi, 1Fh
		not	edi
		mov	cl, byte ptr [esp+36Ch+var_358]
		and	edi, ecx
		cmp	ebx, [esp+36Ch+var_348]
		jb	loc_6E417E80
		cmp	ebx, [esp+36Ch+var_32C]
		jb	loc_6E417FD0
		xor	ecx, ecx
		jmp	loc_6E417E96
; ---------------------------------------------------------------------------

loc_6E417F20:				; CODE XREF: sub_6E417930+58j
		lea	eax, [esp+36Ch+var_F4]
		mov	[esp+36Ch+var_310], eax
		mov	[esp+36Ch+var_36C], eax
		call	SHA512_Init
		test	eax, eax
		jle	loc_6E417C04
		mov	eax, 4Fh
		mov	[esp+36Ch+var_34C], 73h
		mov	esi, 400h
		mov	byte ptr [esp+36Ch+var_350], 1
		mov	ebx, 10h
		mov	[esp+36Ch+var_2EC], 28h
		mov	[esp+36Ch+var_354], 80h
		mov	[esp+36Ch+var_30C], 40h
		mov	[esp+36Ch+var_314], offset loc_6E4463F0
		mov	[esp+36Ch+var_308], offset loc_6E4173C0
		jmp	loc_6E417AF7
; ---------------------------------------------------------------------------

loc_6E417F87:				; CODE XREF: sub_6E417930+69j
					; sub_6E417930+15Fj
		mov	[esp+36Ch+var_364], offset a0 ;	"0"
		mov	[esp+36Ch+var_368], 209h
		mov	[esp+36Ch+var_36C], offset aS3_cbc_c ; "s3_cbc.c"
		call	OpenSSLDie
		mov	ebp, [esp+36Ch+arg_8]
		test	ebp, ebp
		jz	loc_6E417C04
		mov	eax, [esp+36Ch+arg_8]
		mov	dword ptr [eax], 0FFFFFFFFh
		jmp	loc_6E417C04
; ---------------------------------------------------------------------------
		align 10h

loc_6E417FD0:				; CODE XREF: sub_6E417930+5E3j
		mov	ecx, edi
		and	ecx, 0FFh
		not	ecx
		mov	ebp, [esp+36Ch+var_324]
		xor	edx, edx
		mov	dl, [ebp+eax+0]
		and	ecx, edx
		jmp	loc_6E417E96
; ---------------------------------------------------------------------------
		align 10h

loc_6E417FF0:				; CODE XREF: sub_6E417930+5B6j
		mov	ebp, ecx
		mov	[esp+36Ch+var_368], ecx
		mov	esi, [esp+36Ch+var_310]
		mov	[esp+36Ch+var_36C], esi
		mov	eax, [esp+36Ch+var_314]
		call	eax
		mov	[esp+36Ch+var_368], ebp
		mov	[esp+36Ch+var_36C], esi
		mov	eax, [esp+36Ch+var_308]
		call	eax
		cmp	[esp+36Ch+var_2ED], 0
		jnz	short loc_6E418067
		xor	eax, eax
		mov	al, [esp+36Ch+var_2EE]
		mov	esi, [esp+36Ch+var_318]
		mov	ebx, esi
		mov	ah, bl
		mov	edx, esi
		and	edx, 0FFh
		mov	ebx, edx
		shl	ebx, 10h
		xor	ecx, ecx
		mov	cx, ax
		shl	edx, 18h
		or	ecx, ebx
		or	ecx, edx
		xor	edx, edx

loc_6E418040:				; CODE XREF: sub_6E417930+725j
		mov	eax, [ebp+edx*4+0]
		and	eax, ecx
		or	[esp+edx*4+36Ch+var_2B4], eax
		inc	edx
		cmp	[esp+36Ch+var_2D4], edx
		ja	short loc_6E418040
		mov	eax, [esp+36Ch+var_2E4]
		cmp	[esp+36Ch+var_2E0], eax
		jz	short loc_6E4180BD

loc_6E418067:				; CODE XREF: sub_6E417930+6E5j
		mov	esi, [esp+36Ch+var_2E8]
		mov	ecx, [esp+36Ch+var_318]
		mov	al, cl
		and	al, [esp+esi+36Ch+var_1F4]
		or	byte ptr [esp+esi+36Ch+var_2B4], al
		mov	esi, [esp+36Ch+var_2DC]
		mov	ebx, [esp+36Ch+var_30C]
		cmp	ebx, esi
		jbe	short loc_6E4180BD
		mov	al, cl
		and	al, [esp+esi+36Ch+var_1F4]
		or	byte ptr [esp+esi+36Ch+var_2B4], al
		mov	eax, [esp+36Ch+var_304]
		cmp	ebx, eax
		jbe	short loc_6E4180BD
		mov	esi, eax
		mov	al, byte ptr [esp+36Ch+var_318]
		and	al, [esp+esi+36Ch+var_1F4]
		or	byte ptr [esp+esi+36Ch+var_2B4], al

loc_6E4180BD:				; CODE XREF: sub_6E417930+735j
					; sub_6E417930+75Fj ...
		inc	[esp+36Ch+var_31C]
		mov	eax, [esp+36Ch+var_320]
		add	eax, [esp+36Ch+var_2F8]
		mov	esi, [esp+36Ch+var_31C]
		cmp	[esp+36Ch+var_2F4], esi
		jb	short loc_6E4180EA
		mov	[esp+36Ch+var_320], eax
		jmp	loc_6E417E00
; ---------------------------------------------------------------------------

loc_6E4180DC:				; CODE XREF: sub_6E417930+41Ej
		lea	eax, [esp+36Ch+var_1F4]
		mov	[esp+36Ch+var_2D8], eax

loc_6E4180EA:				; CODE XREF: sub_6E417930+7A1j
		mov	esi, [esp+36Ch+var_2D8]
		mov	[esp+36Ch+var_36C], esi
		call	EVP_MD_CTX_init
		mov	eax, [esp+36Ch+arg_0]
		mov	eax, [eax]
		mov	[esp+36Ch+var_364], 0
		mov	[esp+36Ch+var_368], eax
		mov	[esp+36Ch+var_36C], esi
		call	EVP_DigestInit_ex
		test	eax, eax
		jle	loc_6E418283
		cmp	byte ptr [esp+36Ch+var_2D0], 0
		jnz	loc_6E418614
		mov	eax, [esp+36Ch+var_354]
		test	eax, eax
		jz	loc_6E4184A1
		mov	ecx, [esp+36Ch+var_354]
		mov	ebx, ecx
		shr	ebx, 2
		mov	edx, ebx
		shl	edx, 2
		jz	loc_6E4184B6

loc_6E41814C:				; CODE XREF: sub_6E417930+B80j
		xor	eax, eax
		lea	esi, [esp+36Ch+var_274]
		mov	[esp+36Ch+var_358], esi

loc_6E418159:				; CODE XREF: sub_6E417930+833j
		xor	dword ptr [esi+eax*4], 6A6A6A6Ah
		inc	eax
		cmp	eax, ebx
		jb	short loc_6E418159
		cmp	edx, ecx
		jz	short loc_6E41818F
		xor	[esp+edx+36Ch+var_274],	6Ah
		inc	edx
		cmp	[esp+36Ch+var_354], edx
		jbe	short loc_6E41818F

loc_6E418178:				; CODE XREF: sub_6E417930+B9Ej
		xor	[esp+edx+36Ch+var_274],	6Ah
		inc	edx
		cmp	[esp+36Ch+var_354], edx
		jbe	short loc_6E41818F
		xor	[esp+edx+36Ch+var_274],	6Ah

loc_6E41818F:				; CODE XREF: sub_6E417930+837j
					; sub_6E417930+846j ...
		mov	eax, [esp+36Ch+var_354]
		mov	[esp+36Ch+var_364], eax
		mov	eax, [esp+36Ch+var_358]
		mov	[esp+36Ch+var_368], eax
		mov	esi, [esp+36Ch+var_2D8]

loc_6E4181A6:				; CODE XREF: sub_6E417930+D4Cj
		mov	[esp+36Ch+var_36C], esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E418283
		mov	eax, [esp+36Ch+var_30C]
		mov	[esp+36Ch+var_364], eax
		lea	eax, [esp+36Ch+var_2B4]
		mov	[esp+36Ch+var_368], eax
		mov	[esp+36Ch+var_36C], esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E418283
		lea	eax, [esp+36Ch+var_2C8]
		mov	[esp+36Ch+var_364], eax
		mov	eax, [esp+36Ch+arg_4]
		mov	[esp+36Ch+var_368], eax
		mov	eax, [esp+36Ch+var_2D8]
		mov	[esp+36Ch+var_36C], eax
		call	EVP_DigestFinal
		mov	edx, [esp+36Ch+arg_8]
		test	edx, edx
		jz	short loc_6E418219
		mov	eax, [esp+36Ch+var_2C8]
		mov	esi, [esp+36Ch+arg_8]
		mov	[esi], eax

loc_6E418219:				; CODE XREF: sub_6E417930+8D7j
		mov	eax, [esp+36Ch+var_2D8]
		mov	[esp+36Ch+var_36C], eax
		call	EVP_MD_CTX_cleanup
		mov	eax, 1
		add	esp, 35Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E418238:				; CODE XREF: sub_6E417930+261j
		lea	eax, [esp+36Ch+var_2C4]
		mov	[esp+36Ch+var_350], eax
		cmp	ebx, 4
		jb	short loc_6E418253
		mov	edi, eax
		mov	ecx, ebx
		shr	ecx, 2
		xor	eax, eax
		rep stosd

loc_6E418253:				; CODE XREF: sub_6E417930+916j
		mov	eax, edx
		shr	eax, 18h
		mov	[esp+ebx+36Ch+var_2C9],	al
		mov	eax, edx
		shr	eax, 10h
		mov	[esp+ebx+36Ch+var_2CA],	al
		mov	eax, edx
		shr	eax, 8
		mov	[esp+ebx+36Ch+var_2CB],	al
		mov	[esp+ebx+36Ch+var_2CC],	dl
		jmp	loc_6E417BE0
; ---------------------------------------------------------------------------

loc_6E418283:				; CODE XREF: sub_6E417930+7E8j
					; sub_6E417930+880j ...
		mov	eax, [esp+36Ch+var_2D8]
		mov	[esp+36Ch+var_36C], eax
		call	EVP_MD_CTX_cleanup
		xor	eax, eax
		add	esp, 35Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E41829F:				; CODE XREF: sub_6E417930+473j
		mov	[esp+36Ch+var_2E8], eax
		jmp	loc_6E417DBB
; ---------------------------------------------------------------------------

loc_6E4182AB:				; CODE XREF: sub_6E417930+449j
		mov	[esp+36Ch+var_2E4], 1
		mov	eax, [esp+36Ch+var_2E4]
		jmp	loc_6E417D8A
; ---------------------------------------------------------------------------

loc_6E4182C2:				; CODE XREF: sub_6E417930+439j
		mov	[esp+36Ch+var_2F8], 1
		jmp	loc_6E417D73
; ---------------------------------------------------------------------------

loc_6E4182CF:				; CODE XREF: sub_6E417930+256j
		add	edx, esi
		lea	eax, [esp+36Ch+var_274]
		mov	[esp+36Ch+var_358], eax
		cmp	[esp+36Ch+var_354], 4
		jb	short loc_6E4182F0
		mov	edi, eax
		mov	ecx, [esp+36Ch+var_354]
		shr	ecx, 2
		xor	eax, eax
		rep stosd

loc_6E4182F0:				; CODE XREF: sub_6E417930+9B1j
		cmp	[esp+36Ch+arg_20], 80h
		ja	loc_6E41869D

loc_6E418301:				; CODE XREF: sub_6E417930+D91j
		mov	edi, [esp+36Ch+var_358]
		mov	esi, [esp+36Ch+arg_1C]
		cmp	[esp+36Ch+arg_20], 4
		jb	short loc_6E418322
		mov	ecx, [esp+36Ch+arg_20]
		shr	ecx, 2
		rep movsd

loc_6E418322:				; CODE XREF: sub_6E417930+9E4j
		xor	eax, eax
		test	byte ptr [esp+36Ch+arg_20], 2
		jz	short loc_6E418339
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2

loc_6E418339:				; CODE XREF: sub_6E417930+9FCj
		test	byte ptr [esp+36Ch+arg_20], 1
		jz	short loc_6E41834D
		mov	cl, [esi+eax]
		mov	byte ptr [esp+36Ch+var_340], cl
		mov	[edi+eax], cl

loc_6E41834D:				; CODE XREF: sub_6E417930+A11j
		mov	edi, [esp+36Ch+var_354]
		test	edi, edi
		jz	loc_6E418681
		mov	esi, [esp+36Ch+var_354]

loc_6E41835D:				; CODE XREF: sub_6E417930+D56j
		mov	edi, esi
		shr	edi, 2
		mov	ecx, edi
		shl	ecx, 2
		jz	loc_6E41868B
		xor	eax, eax
		mov	[esp+36Ch+var_340], edx
		mov	edx, [esp+36Ch+var_358]

loc_6E418377:				; CODE XREF: sub_6E417930+A51j
		xor	dword ptr [edx+eax*4], 36363636h
		inc	eax
		cmp	eax, edi
		jb	short loc_6E418377
		mov	edx, [esp+36Ch+var_340]
		cmp	ecx, esi
		jz	short loc_6E4183B1
		xor	[esp+ecx+36Ch+var_274],	36h
		inc	ecx
		cmp	[esp+36Ch+var_354], ecx
		jbe	short loc_6E4183B1

loc_6E41839A:				; CODE XREF: sub_6E417930+D68j
		xor	[esp+ecx+36Ch+var_274],	36h
		inc	ecx
		cmp	[esp+36Ch+var_354], ecx
		jbe	short loc_6E4183B1
		xor	[esp+ecx+36Ch+var_274],	36h

loc_6E4183B1:				; CODE XREF: sub_6E417930+A59j
					; sub_6E417930+A68j ...
		mov	[esp+36Ch+var_340], edx
		mov	eax, [esp+36Ch+var_358]
		mov	[esp+36Ch+var_368], eax
		mov	eax, [esp+36Ch+var_310]
		mov	[esp+36Ch+var_36C], eax
		mov	eax, [esp+36Ch+var_314]
		call	eax
		mov	edx, [esp+36Ch+var_340]
		jmp	loc_6E417B8C
; ---------------------------------------------------------------------------

loc_6E4183D3:				; CODE XREF: sub_6E417930+5Ej
		lea	eax, [esp+36Ch+var_F4]
		mov	[esp+36Ch+var_310], eax
		mov	[esp+36Ch+var_36C], eax
		call	SHA384_Init
		test	eax, eax
		jle	loc_6E417C04
		mov	eax, 5Fh
		mov	[esp+36Ch+var_34C], 73h
		mov	esi, 400h
		mov	byte ptr [esp+36Ch+var_350], 1
		mov	ebx, 10h
		mov	[esp+36Ch+var_2EC], 28h
		mov	[esp+36Ch+var_354], 80h
		mov	[esp+36Ch+var_30C], 30h
		mov	[esp+36Ch+var_314], offset loc_6E4463F0
		mov	[esp+36Ch+var_308], offset loc_6E4173C0
		jmp	loc_6E417AF7
; ---------------------------------------------------------------------------

loc_6E41843A:				; CODE XREF: sub_6E417930+47j
		lea	eax, [esp+36Ch+var_F4]
		mov	[esp+36Ch+var_310], eax
		mov	[esp+36Ch+var_36C], eax
		call	SHA256_Init
		test	eax, eax
		jle	loc_6E417C04
		mov	eax, 27h
		mov	[esp+36Ch+var_34C], 33h
		mov	esi, 200h
		mov	byte ptr [esp+36Ch+var_350], 1
		mov	ebx, 8
		mov	[esp+36Ch+var_2EC], 28h
		mov	[esp+36Ch+var_354], 40h
		mov	[esp+36Ch+var_30C], 20h
		mov	[esp+36Ch+var_314], offset loc_6E4463D0
		mov	[esp+36Ch+var_308], offset loc_6E4172B0
		jmp	loc_6E417AF7
; ---------------------------------------------------------------------------

loc_6E4184A1:				; CODE XREF: sub_6E417930+802j
		mov	ecx, 1
		mov	ebx, ecx
		shr	ebx, 2
		mov	edx, ebx
		shl	edx, 2
		jnz	loc_6E41814C

loc_6E4184B6:				; CODE XREF: sub_6E417930+816j
		xor	[esp+36Ch+var_274], 6Ah
		mov	edx, 1
		lea	eax, [esp+36Ch+var_274]
		mov	[esp+36Ch+var_358], eax
		jmp	loc_6E418178
; ---------------------------------------------------------------------------

loc_6E4184D3:				; CODE XREF: sub_6E417930+156j
		lea	eax, [esp+36Ch+var_F4]
		mov	[esp+36Ch+var_310], eax
		mov	[esp+36Ch+var_36C], eax
		call	MD5_Init
		test	eax, eax
		jle	loc_6E417C04
		mov	eax, 37h
		mov	[esp+36Ch+var_34C], 33h
		mov	esi, 200h
		mov	byte ptr [esp+36Ch+var_350], 0
		mov	ebx, 8
		mov	[esp+36Ch+var_2EC], 30h
		mov	[esp+36Ch+var_354], 40h
		mov	[esp+36Ch+var_30C], 10h
		mov	[esp+36Ch+var_314], offset loc_6E446418
		mov	[esp+36Ch+var_308], offset loc_6E417170
		jmp	loc_6E417AF7
; ---------------------------------------------------------------------------

loc_6E41853A:				; CODE XREF: sub_6E417930+2C4j
		lea	eax, [esp+36Ch+var_174]
		mov	ecx, 3
		mov	edi, eax
		mov	esi, [esp+36Ch+arg_C]
		rep movsd
		mov	cl, [esi]
		mov	byte ptr [esp+36Ch+var_358], cl
		mov	[edi], cl
		mov	edx, [esp+36Ch+var_34C]
		lea	edi, [esp+36Ch+var_167]
		mov	esi, [esp+36Ch+arg_10]
		cmp	edx, 4
		jnb	loc_6E4186C6

loc_6E418574:				; CODE XREF: sub_6E417930+DADj
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_6E418586
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E418586:				; CODE XREF: sub_6E417930+C49j
		and	edx, 1
		jz	short loc_6E418595
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+36Ch+var_358], dl
		mov	[edi+ecx], dl

loc_6E418595:				; CODE XREF: sub_6E417930+C59j
		mov	[esp+36Ch+var_368], eax
		mov	eax, [esp+36Ch+var_310]
		mov	[esp+36Ch+var_36C], eax
		mov	eax, [esp+36Ch+var_314]
		call	eax
		mov	eax, [esp+36Ch+var_320]
		mov	esi, [esp+36Ch+var_354]
		xor	edx, edx
		div	esi
		mov	[esp+36Ch+var_358], eax
		cmp	eax, 1
		jbe	loc_6E417D32
		mov	ecx, [esp+36Ch+arg_10]
		lea	edi, [ecx+esi-0Dh]
		mov	esi, 1

loc_6E4185CF:				; CODE XREF: sub_6E417930+CB9j
		mov	[esp+36Ch+var_368], edi
		mov	eax, [esp+36Ch+var_310]
		mov	[esp+36Ch+var_36C], eax
		mov	eax, [esp+36Ch+var_314]
		call	eax
		inc	esi
		add	edi, [esp+36Ch+var_354]
		cmp	esi, [esp+36Ch+var_358]
		jnz	short loc_6E4185CF
		jmp	loc_6E417D32
; ---------------------------------------------------------------------------

loc_6E4185F0:				; CODE XREF: sub_6E417930+38Aj
		test	edi, 1
		jnz	loc_6E4186E2

loc_6E4185FC:				; CODE XREF: sub_6E417930+DCAj
		test	edi, 2
		jnz	loc_6E41872A

loc_6E418608:				; CODE XREF: sub_6E417930+E09j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E417CC0
; ---------------------------------------------------------------------------

loc_6E418614:				; CODE XREF: sub_6E417930+7F6j
		lea	eax, [esp+36Ch+var_274]
		mov	[esp+36Ch+var_358], eax
		cmp	[esp+36Ch+var_2EC], 4
		jb	short loc_6E41863C
		mov	edi, eax
		mov	ecx, [esp+36Ch+var_2EC]
		shr	ecx, 2
		mov	eax, 5C5C5C5Ch
		rep stosd

loc_6E41863C:				; CODE XREF: sub_6E417930+CF7j
		mov	eax, [esp+36Ch+arg_20]
		mov	[esp+36Ch+var_364], eax
		mov	eax, [esp+36Ch+arg_1C]
		mov	[esp+36Ch+var_368], eax
		mov	esi, [esp+36Ch+var_2D8]
		mov	[esp+36Ch+var_36C], esi
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E418283
		mov	eax, [esp+36Ch+var_2EC]
		mov	[esp+36Ch+var_364], eax
		mov	eax, [esp+36Ch+var_358]
		mov	[esp+36Ch+var_368], eax
		jmp	loc_6E4181A6
; ---------------------------------------------------------------------------

loc_6E418681:				; CODE XREF: sub_6E417930+A23j
		mov	esi, 1
		jmp	loc_6E41835D
; ---------------------------------------------------------------------------

loc_6E41868B:				; CODE XREF: sub_6E417930+A37j
		xor	[esp+36Ch+var_274], 36h
		mov	ecx, 1
		jmp	loc_6E41839A
; ---------------------------------------------------------------------------

loc_6E41869D:				; CODE XREF: sub_6E417930+9CBj
		mov	[esp+36Ch+var_340], edx
		mov	[esp+36Ch+var_364], offset aMac_secret_len ; "mac_secret_length	<= sizeof(hmac_pad)"
		mov	[esp+36Ch+var_368], 271h
		mov	[esp+36Ch+var_36C], offset aS3_cbc_c ; "s3_cbc.c"
		call	OpenSSLDie
		mov	edx, [esp+36Ch+var_340]
		jmp	loc_6E418301
; ---------------------------------------------------------------------------

loc_6E4186C6:				; CODE XREF: sub_6E417930+C3Ej
		test	edi, 1
		jnz	short loc_6E418710

loc_6E4186CE:				; CODE XREF: sub_6E417930+DF8j
		test	edi, 2
		jnz	short loc_6E4186FF

loc_6E4186D6:				; CODE XREF: sub_6E417930+DDEj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E418574
; ---------------------------------------------------------------------------

loc_6E4186E2:				; CODE XREF: sub_6E417930+CC6j
		mov	cl, [esi]
		mov	byte ptr [esp+36Ch+var_34C], cl
		mov	[edi], cl
		inc	edi
		mov	esi, [esp+36Ch+arg_10]
		inc	esi
		mov	ecx, [esp+36Ch+var_358]
		lea	edx, [ecx-1]
		jmp	loc_6E4185FC
; ---------------------------------------------------------------------------

loc_6E4186FF:				; CODE XREF: sub_6E417930+DA4j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	short loc_6E4186D6
; ---------------------------------------------------------------------------

loc_6E418710:				; CODE XREF: sub_6E417930+D9Cj
		mov	cl, [esi]
		mov	byte ptr [esp+36Ch+var_358], cl
		mov	[edi], cl
		lea	edi, [esp+36Ch+var_166]
		mov	esi, [esp+36Ch+arg_10]
		inc	esi
		dec	edx
		jmp	short loc_6E4186CE
; ---------------------------------------------------------------------------

loc_6E41872A:				; CODE XREF: sub_6E417930+CD2j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E418608
sub_6E417930	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E418740	proc near		; DATA XREF: .rdata:6E44C33Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 300h
		jz	short loc_6E418780
		cmp	eax, 301h
		jz	short loc_6E418790
		cmp	eax, 302h
		jz	short loc_6E4187A0
		cmp	eax, 303h
		jnz	short loc_6E418770
		jmp	TLSv1_2_method
; ---------------------------------------------------------------------------
		align 10h

loc_6E418770:				; CODE XREF: sub_6E418740+1Ej
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E418780:				; CODE XREF: sub_6E418740+9j
		jmp	SSLv3_method
; ---------------------------------------------------------------------------
		align 10h

loc_6E418790:				; CODE XREF: sub_6E418740+10j
		jmp	TLSv1_method
; ---------------------------------------------------------------------------
		align 10h

loc_6E4187A0:				; CODE XREF: sub_6E418740+17j
		jmp	TLSv1_1_method
sub_6E418740	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 111. SSLv23_method

; =============== S U B	R O U T	I N E =======================================


		public SSLv23_method
SSLv23_method	proc near		; CODE XREF: sub_6E40E840+472p
		mov	eax, offset dword_6E44C2E0
		retn
SSLv23_method	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4187C0	proc near		; DATA XREF: .rdata:6E44C41Co

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 300h
		jz	short loc_6E418800
		cmp	eax, 301h
		jz	short loc_6E418810
		cmp	eax, 302h
		jz	short loc_6E418820
		cmp	eax, 303h
		jnz	short loc_6E4187F0
		jmp	TLSv1_2_server_method
; ---------------------------------------------------------------------------
		align 10h

loc_6E4187F0:				; CODE XREF: sub_6E4187C0+1Ej
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E418800:				; CODE XREF: sub_6E4187C0+9j
		jmp	SSLv3_server_method
; ---------------------------------------------------------------------------
		align 10h

loc_6E418810:				; CODE XREF: sub_6E4187C0+10j
		jmp	TLSv1_server_method
; ---------------------------------------------------------------------------
		align 10h

loc_6E418820:				; CODE XREF: sub_6E4187C0+17j
		jmp	TLSv1_1_server_method
sub_6E4187C0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 112. SSLv23_server_method

; =============== S U B	R O U T	I N E =======================================


		public SSLv23_server_method
SSLv23_server_method proc near
		mov	eax, offset dword_6E44C3C0
		retn
SSLv23_server_method endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E418840	proc near		; CODE XREF: sub_6E4191D0+1C9p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_27		= byte ptr -27h
var_26		= byte ptr -26h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, [esp+5Ch+arg_0]
		cmp	dword ptr [ebp+34h], 2210h
		jz	loc_6E418C10
		xor	esi, esi
		mov	[esp+5Ch+var_40], 0

loc_6E418862:				; CODE XREF: sub_6E418840+4B5j
					; sub_6E418840+702j ...
		cmp	dword ptr [ebp+0], 303h
		jg	short loc_6E4188B0
		cmp	dword ptr [ebp+34h], 2211h
		jz	short loc_6E4188D5

loc_6E418874:				; CODE XREF: sub_6E418840+93j
		cmp	esi, 1
		jz	loc_6E418FD0
		mov	ebx, esi
		lea	eax, [esi-2]
		cmp	eax, 1
		jbe	loc_6E418B2D

loc_6E41888B:				; CODE XREF: sub_6E418840+37Bj
		dec	ebx
		cmp	ebx, 2
		ja	loc_6E418DB0
		mov	dword ptr [ebp+44h], 0
		mov	[esp+5Ch+arg_0], ebp
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	SSL_accept
; ---------------------------------------------------------------------------
		align 10h

loc_6E4188B0:				; CODE XREF: sub_6E418840+29j
		mov	[esp+5Ch+var_54], offset aSVersionTls_ma ; "s->version <= TLS_MAX_VERSION"
		mov	[esp+5Ch+var_58], 193h
		mov	[esp+5Ch+var_5C], offset aS23_srvr_c ; "s23_srvr.c"
		call	OpenSSLDie
		cmp	dword ptr [ebp+34h], 2211h
		jnz	short loc_6E418874

loc_6E4188D5:				; CODE XREF: sub_6E418840+32j
		mov	eax, [ebp+4Ch]

loc_6E4188D8:				; CODE XREF: sub_6E418840+77Bj
		movzx	esi, byte ptr [eax+4]
		mov	dl, [eax]
		mov	edi, edx
		and	edi, 7Fh
		mov	[esp+5Ch+var_40], edi
		shl	[esp+5Ch+var_40], 8
		movzx	edi, byte ptr [eax+1]
		and	edi, 0FFh
		or	[esp+5Ch+var_40], edi
		cmp	[esp+5Ch+var_40], 1000h
		jg	loc_6E418FDD
		cmp	[esp+5Ch+var_40], 8
		jle	loc_6E418EE5
		mov	eax, [esp+5Ch+var_40]
		add	eax, 2
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E41A840
		test	eax, eax
		jle	loc_6E418C00
		mov	eax, [ebp+50h]
		sub	eax, 2
		mov	[esp+5Ch+var_54], eax
		mov	eax, [ebp+4Ch]
		add	eax, 2
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E411870
		mov	eax, [ebp+64h]
		test	eax, eax
		jz	short loc_6E418989
		mov	edx, [ebp+68h]
		mov	[esp+5Ch+var_44], edx
		mov	[esp+5Ch+var_48], ebp
		mov	ecx, [ebp+50h]
		lea	edx, [ecx-2]
		mov	[esp+5Ch+var_4C], edx
		mov	ecx, [ebp+4Ch]
		lea	edx, [ecx+2]
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 2
		mov	[esp+5Ch+var_5C], 0
		call	eax

loc_6E418989:				; CODE XREF: sub_6E418840+10Fj
		mov	eax, [ebp+4Ch]
		xor	ecx, ecx
		mov	cl, [eax+5]
		mov	[esp+5Ch+var_3C], ecx
		shl	[esp+5Ch+var_3C], 8
		xor	edx, edx
		mov	dl, [eax+6]
		or	[esp+5Ch+var_3C], edx
		xor	ecx, ecx
		mov	cl, [eax+9]
		shl	ecx, 8
		xor	edx, edx
		mov	dl, [eax+0Ah]
		or	ecx, edx
		lea	edi, [eax+0Bh]
		mov	[esp+5Ch+var_34], edi
		mov	ebx, [ebp+3Ch]
		mov	ebx, [ebx+4]
		movzx	edi, byte ptr [eax+7]
		and	edi, 0FFh
		shl	edi, 8
		mov	dl, [eax+8]
		and	edx, 0FFh
		or	edi, edx
		add	edi, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_30], edi
		lea	eax, [ecx+edi+0Bh]
		cmp	eax, [ebp+50h]
		jnz	loc_6E418E60
		mov	byte ptr [ebx],	1
		mov	byte ptr [ebx+4], 3
		lea	eax, [ebx+6]
		mov	[esp+5Ch+var_38], eax
		mov	eax, esi
		mov	[ebx+5], al
		mov	esi, ecx
		cmp	ecx, 20h
		jbe	short loc_6E418A0B
		mov	esi, 20h

loc_6E418A0B:				; CODE XREF: sub_6E418840+1C4j
		mov	eax, [esp+5Ch+var_38]
		mov	edi, eax
		mov	edx, 20h
		test	al, 1
		jnz	loc_6E418EA6

loc_6E418A1E:				; CODE XREF: sub_6E418840+673j
		test	edi, 2
		jnz	loc_6E418E96

loc_6E418A2A:				; CODE XREF: sub_6E418840+661j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jz	short loc_6E418A40
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E418A40:				; CODE XREF: sub_6E418840+1F6j
		and	edx, 1
		jz	short loc_6E418A48
		mov	byte ptr [edi],	0

loc_6E418A48:				; CODE XREF: sub_6E418840+203j
		mov	ecx, [esp+5Ch+var_38]
		sub	ecx, esi
		mov	eax, esi
		lea	edi, [ecx+20h]
		mov	esi, [esp+5Ch+var_30]
		mov	ecx, [esp+5Ch+var_34]
		add	esi, ecx
		cmp	eax, 4
		jnb	loc_6E418D00

loc_6E418A66:				; CODE XREF: sub_6E418840+4D7j
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E418A77
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E418A77:				; CODE XREF: sub_6E418840+22Aj
		test	al, 1
		jz	short loc_6E418A85
		mov	al, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_38], al
		mov	[edi+ecx], al

loc_6E418A85:				; CODE XREF: sub_6E418840+239j
		mov	byte ptr [ebx+26h], 0
		lea	ecx, [ebx+29h]
		mov	edi, [esp+5Ch+var_3C]
		test	edi, edi
		jz	loc_6E418EB8
		xor	esi, esi
		xor	eax, eax
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_3C], ebx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E418AB0:				; CODE XREF: sub_6E418840+28Ej
		cmp	byte ptr [edx+eax], 0
		jnz	short loc_6E418AC9
		mov	bl, [edx+eax+1]
		mov	[ecx], bl
		mov	bl, [edx+eax+2]
		mov	[ecx+1], bl
		add	esi, 2
		add	ecx, 2

loc_6E418AC9:				; CODE XREF: sub_6E418840+274j
		add	eax, 3
		cmp	edi, eax
		ja	short loc_6E418AB0
		mov	ebx, [esp+5Ch+var_3C]
		mov	eax, esi
		shr	eax, 8
		mov	edx, eax
		mov	eax, esi

loc_6E418ADD:				; CODE XREF: sub_6E418840+67Cj
		mov	[ebx+27h], dl
		mov	[ebx+28h], al
		mov	byte ptr [ecx],	1
		mov	byte ptr [ecx+1], 0
		mov	eax, [ebp+3Ch]
		sub	ecx, [eax+4]
		lea	eax, [ecx-2]
		mov	edx, eax
		sar	edx, 10h
		mov	[ebx+1], dl
		mov	edx, eax
		sar	edx, 8
		mov	[ebx+2], dl
		mov	[ebx+3], al
		mov	edx, [ebp+58h]
		mov	dword ptr [edx+354h], 1
		mov	dword ptr [edx+340h], 1
		mov	[edx+33Ch], eax
		mov	esi, 2
		mov	ebx, 2

loc_6E418B2D:				; CODE XREF: sub_6E418840+45j
					; sub_6E418840+78Bj
		mov	eax, [ebp+0]
		cmp	eax, 300h
		jz	loc_6E418EF2
		cmp	eax, 301h
		jz	loc_6E418EFC
		cmp	eax, 302h
		jz	loc_6E418F06
		cmp	eax, 303h
		jnz	loc_6E418D20
		call	TLSv1_2_server_method

loc_6E418B61:				; CODE XREF: sub_6E418840+6B7j
					; sub_6E418840+6C1j ...
		test	eax, eax
		jz	loc_6E418D20
		mov	[ebp+8], eax
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E435D40
		test	eax, eax
		jz	loc_6E418DDC
		mov	dword ptr [ebp+34h], 2110h
		cmp	esi, 3
		jz	loc_6E418DF0
		mov	dword ptr [ebp+50h], 0
		mov	eax, [ebp+58h]
		mov	dword ptr [eax+0F8h], 0
		mov	dword ptr [eax+0F4h], 0

loc_6E418BB2:				; CODE XREF: sub_6E418840+61Bj
		mov	eax, [ebp+8]
		mov	eax, [eax+10h]
		mov	[ebp+20h], eax
		jmp	loc_6E41888B
; ---------------------------------------------------------------------------

loc_6E418BC0:				; CODE XREF: sub_6E418840+728j
		mov	dl, [eax+4]
		cmp	dl, 4
		ja	loc_6E4191B4

loc_6E418BCC:				; CODE XREF: sub_6E418840+987j
		mov	[esp+5Ch+var_4C], 15Ch
		mov	[esp+5Ch+var_50], offset aS23_srvr_c ; "s23_srvr.c"
		mov	[esp+5Ch+var_54], 12Ah
		mov	[esp+5Ch+var_58], 76h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		or	eax, 0FFFFFFFFh
		nop
		lea	esi, [esi+0]

loc_6E418C00:				; CODE XREF: sub_6E418840+E8j
					; sub_6E418840+3F7j ...
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E418C10:				; CODE XREF: sub_6E418840+12j
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E416DB0
		test	eax, eax
		jz	loc_6E418DDC
		mov	[esp+5Ch+var_58], 0Bh
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E41A840
		mov	[esp+5Ch+var_40], eax
		cmp	eax, 0Bh
		jnz	short loc_6E418C00
		mov	eax, [ebp+4Ch]
		mov	cl, [eax]
		mov	[esp+5Ch+var_27], cl
		lea	edi, [esp+5Ch+var_26]
		lea	esi, [eax+1]
		mov	edx, 0Ah
		test	edi, 2
		jnz	loc_6E419067

loc_6E418C5A:				; CODE XREF: sub_6E418840+836j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		test	dl, 2
		jz	short loc_6E418C71
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E418C71:				; CODE XREF: sub_6E418840+424j
		and	edx, 1
		jz	short loc_6E418C80
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_3C], dl
		mov	[edi+ecx], dl

loc_6E418C80:				; CODE XREF: sub_6E418840+434j
		mov	dl, [eax]
		test	dl, dl
		js	loc_6E418F10
		cmp	dl, 16h
		jz	loc_6E418F50

loc_6E418C93:				; CODE XREF: sub_6E418840+6D4j
					; sub_6E418840+714j ...
		mov	esi, offset aGet ; "GET	"
		mov	ecx, 4
		mov	edi, eax
		repe cmpsb
		jz	loc_6E419031
		mov	esi, offset aPost ; "POST "
		mov	ecx, 5
		mov	edi, eax
		repe cmpsb
		jz	loc_6E419031
		mov	esi, offset aHead ; "HEAD "
		mov	ecx, 5
		mov	edi, eax
		repe cmpsb
		jz	loc_6E419031
		mov	esi, offset aPut ; "PUT	"
		mov	ecx, 4
		mov	edi, eax
		repe cmpsb
		jz	loc_6E419031
		mov	esi, offset aConnect ; "CONNECT"
		mov	ecx, 7
		mov	edi, eax
		repe cmpsb
		jz	short loc_6E418D70

loc_6E418CF3:				; CODE XREF: sub_6E418840+6E9j
					; sub_6E418840+767j ...
		xor	esi, esi
		jmp	loc_6E418862
; ---------------------------------------------------------------------------
		align 10h

loc_6E418D00:				; CODE XREF: sub_6E418840+220j
		test	edi, 1
		jnz	short loc_6E418D56

loc_6E418D08:				; CODE XREF: sub_6E418840+51Dj
		test	edi, 2
		jnz	short loc_6E418D5F

loc_6E418D10:				; CODE XREF: sub_6E418840+52Ej
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E418A66
; ---------------------------------------------------------------------------
		align 10h

loc_6E418D20:				; CODE XREF: sub_6E418840+316j
					; sub_6E418840+323j
		mov	[esp+5Ch+var_4C], 255h

loc_6E418D28:				; CODE XREF: sub_6E418840+798j
		mov	[esp+5Ch+var_50], offset aS23_srvr_c ; "s23_srvr.c"
		mov	[esp+5Ch+var_54], 102h
		mov	[esp+5Ch+var_58], 76h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E418C00
; ---------------------------------------------------------------------------

loc_6E418D56:				; CODE XREF: sub_6E418840+4C6j
		mov	cl, [esi]
		mov	[edi], cl
		inc	edi
		inc	esi
		dec	eax
		jmp	short loc_6E418D08
; ---------------------------------------------------------------------------

loc_6E418D5F:				; CODE XREF: sub_6E418840+4CEj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E418D10
; ---------------------------------------------------------------------------

loc_6E418D70:				; CODE XREF: sub_6E418840+4B1j
		mov	[esp+5Ch+var_4C], 18Dh
		mov	[esp+5Ch+var_50], offset aS23_srvr_c ; "s23_srvr.c"
		mov	[esp+5Ch+var_54], 9Bh
		mov	[esp+5Ch+var_58], 76h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		or	eax, 0FFFFFFFFh
		jmp	loc_6E418C00
; ---------------------------------------------------------------------------
		align 10h

loc_6E418DB0:				; CODE XREF: sub_6E418840+4Fj
		mov	[esp+5Ch+var_4C], 27Bh
		mov	[esp+5Ch+var_50], offset aS23_srvr_c ; "s23_srvr.c"
		mov	[esp+5Ch+var_54], 0FCh
		mov	[esp+5Ch+var_58], 76h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error

loc_6E418DDC:				; CODE XREF: sub_6E418840+33Ej
					; sub_6E418840+3DAj ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E418C00
; ---------------------------------------------------------------------------
		align 10h

loc_6E418DF0:				; CODE XREF: sub_6E418840+34Ej
		mov	dword ptr [ebp+38h], 0F0h
		mov	eax, [esp+5Ch+var_40]
		mov	[ebp+50h], eax
		mov	eax, [ebp+58h]
		mov	edi, [eax+0ECh]
		test	edi, edi
		jz	loc_6E419013

loc_6E418E0F:				; CODE XREF: sub_6E418840+7ECj
		mov	[ebp+4Ch], edi
		mov	ecx, [esp+5Ch+var_40]
		mov	eax, ecx
		lea	esi, [esp+5Ch+var_27]
		cmp	ecx, 4
		jnb	loc_6E418EC1

loc_6E418E25:				; CODE XREF: sub_6E418840+6A0j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E418E36
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E418E36:				; CODE XREF: sub_6E418840+5E9j
		test	al, 1
		jz	short loc_6E418E44
		mov	al, [esi+edx]
		mov	byte ptr [esp+5Ch+var_3C], al
		mov	[edi+edx], al

loc_6E418E44:				; CODE XREF: sub_6E418840+5F8j
		mov	eax, [ebp+58h]
		mov	esi, [esp+5Ch+var_40]
		mov	[eax+0F8h], esi
		mov	dword ptr [eax+0F4h], 0
		jmp	loc_6E418BB2
; ---------------------------------------------------------------------------

loc_6E418E60:				; CODE XREF: sub_6E418840+1A6j
		mov	[esp+5Ch+var_4C], 1DEh

loc_6E418E68:				; CODE XREF: sub_6E418840+6ADj
		mov	[esp+5Ch+var_50], offset aS23_srvr_c ; "s23_srvr.c"
		mov	[esp+5Ch+var_54], 0D5h
		mov	[esp+5Ch+var_58], 76h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E418C00
; ---------------------------------------------------------------------------

loc_6E418E96:				; CODE XREF: sub_6E418840+1E4j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E418A2A
; ---------------------------------------------------------------------------

loc_6E418EA6:				; CODE XREF: sub_6E418840+1D8j
		mov	byte ptr [ebx+6], 0
		mov	eax, [esp+5Ch+var_38]
		lea	edi, [eax+1]
		mov	dl, 1Fh
		jmp	loc_6E418A1E
; ---------------------------------------------------------------------------

loc_6E418EB8:				; CODE XREF: sub_6E418840+252j
		xor	eax, eax
		xor	edx, edx
		jmp	loc_6E418ADD
; ---------------------------------------------------------------------------

loc_6E418EC1:				; CODE XREF: sub_6E418840+5DFj
		test	edi, 1
		jnz	loc_6E4190D4

loc_6E418ECD:				; CODE XREF: sub_6E418840+8A6j
		test	edi, 2
		jnz	loc_6E4190C0

loc_6E418ED9:				; CODE XREF: sub_6E418840+88Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E418E25
; ---------------------------------------------------------------------------

loc_6E418EE5:				; CODE XREF: sub_6E418840+CDj
		mov	[esp+5Ch+var_4C], 1BCh
		jmp	loc_6E418E68
; ---------------------------------------------------------------------------

loc_6E418EF2:				; CODE XREF: sub_6E418840+2F5j
		call	SSLv3_server_method
		jmp	loc_6E418B61
; ---------------------------------------------------------------------------

loc_6E418EFC:				; CODE XREF: sub_6E418840+300j
		call	TLSv1_server_method
		jmp	loc_6E418B61
; ---------------------------------------------------------------------------

loc_6E418F06:				; CODE XREF: sub_6E418840+30Bj
		call	TLSv1_1_server_method
		jmp	loc_6E418B61
; ---------------------------------------------------------------------------

loc_6E418F10:				; CODE XREF: sub_6E418840+444j
		cmp	byte ptr [eax+2], 1
		jnz	loc_6E418C93
		mov	dl, [eax+3]
		test	dl, dl
		jnz	loc_6E41907B
		cmp	byte ptr [eax+4], 2
		jnz	loc_6E418CF3
		movzx	esi, byte ptr [ebp+103h]
		and	esi, 0FFh
		xor	esi, 1
		and	esi, 1
		jmp	loc_6E418862
; ---------------------------------------------------------------------------
		align 10h

loc_6E418F50:				; CODE XREF: sub_6E418840+44Dj
		cmp	byte ptr [eax+1], 3
		jnz	loc_6E418C93
		cmp	byte ptr [eax+5], 1
		jnz	loc_6E418C93
		cmp	byte ptr [eax+3], 0
		jz	loc_6E418BC0
		cmp	byte ptr [eax+9], 2
		jbe	loc_6E418C93

loc_6E418F78:				; CODE XREF: sub_6E418840+981j
		cmp	byte ptr [eax+9], 3
		ja	loc_6E419185
		xor	edx, edx
		mov	dl, [eax+0Ah]
		test	edx, edx
		jnz	loc_6E41913F
		mov	edx, [ebp+100h]
		test	edx, 2000000h
		jz	loc_6E419165
		and	edx, 4000000h
		jnz	loc_6E418CF3

loc_6E418FAD:				; CODE XREF: sub_6E418840+913j
		mov	dword ptr [ebp+0], 301h

loc_6E418FB4:				; CODE XREF: sub_6E418840+92Cj
					; sub_6E418840+940j ...
		cmp	dword ptr [ebp+34h], 2211h
		jz	loc_6E4188D8
		mov	esi, 3
		mov	ebx, 3
		jmp	loc_6E418B2D
; ---------------------------------------------------------------------------

loc_6E418FD0:				; CODE XREF: sub_6E418840+37j
		mov	[esp+5Ch+var_4C], 21Dh
		jmp	loc_6E418D28
; ---------------------------------------------------------------------------

loc_6E418FDD:				; CODE XREF: sub_6E418840+C2j
		mov	[esp+5Ch+var_4C], 1B7h
		mov	[esp+5Ch+var_50], offset aS23_srvr_c ; "s23_srvr.c"
		mov	[esp+5Ch+var_54], 0D6h
		mov	[esp+5Ch+var_58], 76h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E418C00
; ---------------------------------------------------------------------------

loc_6E419013:				; CODE XREF: sub_6E418840+5C9j
		mov	[esp+5Ch+var_5C], ebp
		call	sub_6E416A30
		test	eax, eax
		jz	loc_6E418DDC
		mov	eax, [ebp+58h]
		mov	edi, [eax+0ECh]
		jmp	loc_6E418E0F
; ---------------------------------------------------------------------------

loc_6E419031:				; CODE XREF: sub_6E418840+461j
					; sub_6E418840+475j ...
		mov	[esp+5Ch+var_4C], 18Ah
		mov	[esp+5Ch+var_50], offset aS23_srvr_c ; "s23_srvr.c"
		mov	[esp+5Ch+var_54], 9Ch
		mov	[esp+5Ch+var_58], 76h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E418C00
; ---------------------------------------------------------------------------

loc_6E419067:				; CODE XREF: sub_6E418840+414j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E418C5A
; ---------------------------------------------------------------------------

loc_6E41907B:				; CODE XREF: sub_6E418840+6DFj
		cmp	dl, 3
		jnz	loc_6E418CF3
		mov	al, [eax+4]
		mov	esi, [ebp+100h]
		test	al, al
		jz	short loc_6E4190EB
		cmp	al, 2
		ja	loc_6E419122
		jz	short loc_6E419105

loc_6E41909B:				; CODE XREF: sub_6E418840+8CBj
		test	esi, 4000000h
		jnz	short loc_6E4190EB
		mov	dword ptr [ebp+0], 301h
		mov	dword ptr [ebp+34h], 2211h
		xor	esi, esi
		jmp	loc_6E418862
; ---------------------------------------------------------------------------
		align 10h

loc_6E4190C0:				; CODE XREF: sub_6E418840+693j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E418ED9
; ---------------------------------------------------------------------------

loc_6E4190D4:				; CODE XREF: sub_6E418840+687j
		mov	al, [esi]
		mov	byte ptr [esp+5Ch+var_3C], al
		mov	[edi], al
		inc	edi
		lea	esi, [esp+5Ch+var_26]
		mov	eax, [esp+5Ch+var_40]
		dec	eax
		jmp	loc_6E418ECD
; ---------------------------------------------------------------------------

loc_6E4190EB:				; CODE XREF: sub_6E418840+84Fj
					; sub_6E418840+861j
		test	esi, 2000000h
		jz	loc_6E41919F
		shr	esi, 18h
		xor	esi, 1
		and	esi, 1
		jmp	loc_6E418862
; ---------------------------------------------------------------------------

loc_6E419105:				; CODE XREF: sub_6E418840+859j
					; sub_6E418840+8E8j
		test	esi, 10000000h
		jnz	short loc_6E41909B
		mov	dword ptr [ebp+0], 302h
		mov	dword ptr [ebp+34h], 2211h
		xor	esi, esi
		jmp	loc_6E418862
; ---------------------------------------------------------------------------

loc_6E419122:				; CODE XREF: sub_6E418840+853j
		test	esi, 8000000h
		jnz	short loc_6E419105
		mov	dword ptr [ebp+0], 303h
		mov	dword ptr [ebp+34h], 2211h
		xor	esi, esi
		jmp	loc_6E418862
; ---------------------------------------------------------------------------

loc_6E41913F:				; CODE XREF: sub_6E418840+749j
		cmp	edx, 2
		jg	short loc_6E419185
		mov	esi, [ebp+100h]
		dec	edx
		jnz	short loc_6E419171

loc_6E41914D:				; CODE XREF: sub_6E418840+937j
		test	esi, 4000000h
		jz	loc_6E418FAD
		and	esi, 2000000h
		jnz	loc_6E418CF3

loc_6E419165:				; CODE XREF: sub_6E418840+75Bj
		mov	dword ptr [ebp+0], 300h
		jmp	loc_6E418FB4
; ---------------------------------------------------------------------------

loc_6E419171:				; CODE XREF: sub_6E418840+90Bj
					; sub_6E418840+951j
		test	esi, 10000000h
		jnz	short loc_6E41914D
		mov	dword ptr [ebp+0], 302h
		jmp	loc_6E418FB4
; ---------------------------------------------------------------------------

loc_6E419185:				; CODE XREF: sub_6E418840+73Cj
					; sub_6E418840+902j
		mov	esi, [ebp+100h]
		test	esi, 8000000h
		jnz	short loc_6E419171
		mov	dword ptr [ebp+0], 303h
		jmp	loc_6E418FB4
; ---------------------------------------------------------------------------

loc_6E41919F:				; CODE XREF: sub_6E418840+8B1j
		mov	dword ptr [ebp+0], 300h
		mov	dword ptr [ebp+34h], 2211h
		xor	esi, esi
		jmp	loc_6E418862
; ---------------------------------------------------------------------------

loc_6E4191B4:				; CODE XREF: sub_6E418840+386j
		cmp	byte ptr [eax+9], 2
		jbe	loc_6E418C93
		cmp	dl, 5
		ja	loc_6E418F78
		jmp	loc_6E418BCC
sub_6E418840	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E4191D0	proc near		; DATA XREF: .rdata:6E44C2F0o
					; .rdata:6E44C3D0o

Time		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [ebp+arg_0]
		mov	[esp+48h+Time],	0 ; Time
		call	time
		mov	[ebp+var_1C], eax
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_44], 4
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+Time],	eax
		call	RAND_add
		call	ERR_clear_error
		mov	[esp+48h+Time],	0 ; dwErrCode
		call	ds:SetLastError
		push	edx
		mov	edi, [ebx+0D0h]
		test	edi, edi
		jz	loc_6E4193C0

loc_6E41922F:				; CODE XREF: sub_6E4191D0+1FCj
		inc	dword ptr [ebx+1Ch]
		mov	[esp+48h+Time],	ebx
		call	SSL_state
		test	ah, 30h
		jz	loc_6E4192E0
		mov	[esp+48h+Time],	ebx
		call	SSL_state
		test	ah, 40h
		jnz	loc_6E4192E0

loc_6E419254:				; CODE XREF: sub_6E4191D0+18Ej
					; sub_6E4191D0+19Aj
		mov	esi, [ebx+34h]
		cmp	esi, 2211h
		jg	loc_6E4192F7

loc_6E419263:				; CODE XREF: sub_6E4191D0+121j
		cmp	esi, 2210h
		jge	loc_6E41938F
		cmp	esi, 2000h
		jz	loc_6E41930B
		cmp	esi, 2003h
		jz	loc_6E41930B

loc_6E419287:				; CODE XREF: sub_6E4191D0+135j
		mov	[esp+48h+var_38], 0D8h
		mov	[esp+48h+var_3C], offset aS23_srvr_c ; "s23_srvr.c"
		mov	[esp+48h+var_40], 0FFh
		mov	[esp+48h+var_44], 73h
		mov	[esp+48h+Time],	14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh

loc_6E4192B8:				; CODE XREF: sub_6E4191D0+1D0j
					; sub_6E4191D0+240j ...
		dec	dword ptr [ebx+1Ch]
		test	edi, edi
		jz	short loc_6E4192D6
		mov	[esp+48h+var_40], eax
		mov	[ebp+var_2C], eax
		mov	[esp+48h+var_44], 2002h
		mov	[esp+48h+Time],	ebx
		call	edi
		mov	eax, [ebp+var_2C]

loc_6E4192D6:				; CODE XREF: sub_6E4191D0+EDj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4192E0:				; CODE XREF: sub_6E4191D0+6Dj
					; sub_6E4191D0+7Ej
		mov	[esp+48h+Time],	ebx
		call	SSL_clear
		mov	esi, [ebx+34h]
		cmp	esi, 2211h
		jle	loc_6E419263

loc_6E4192F7:				; CODE XREF: sub_6E4191D0+8Dj
		cmp	esi, 4000h
		jz	short loc_6E41930B
		cmp	esi, 6000h
		jnz	loc_6E419287

loc_6E41930B:				; CODE XREF: sub_6E4191D0+A5j
					; sub_6E4191D0+B1j ...
		mov	dword ptr [ebx+24h], 1
		test	edi, edi
		jz	short loc_6E41932B
		mov	[esp+48h+var_40], 1
		mov	[esp+48h+var_44], 10h
		mov	[esp+48h+Time],	ebx
		call	edi

loc_6E41932B:				; CODE XREF: sub_6E4191D0+144j
		mov	dword ptr [ebx+4], 2000h
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jz	loc_6E4193E0

loc_6E41933D:				; CODE XREF: sub_6E4191D0+236j
		mov	[esp+48h+Time],	ebx
		call	sub_6E411760
		mov	dword ptr [ebx+34h], 2210h
		mov	eax, [ebx+0E4h]
		inc	dword ptr [eax+40h]
		mov	dword ptr [ebx+44h], 0
		test	edi, edi
		jz	loc_6E419254
		cmp	esi, 2210h
		jz	loc_6E419254
		mov	[ebx+34h], esi
		mov	[esp+48h+var_40], 1
		mov	[esp+48h+var_44], 2001h
		mov	[esp+48h+Time],	ebx
		call	edi
		mov	dword ptr [ebx+34h], 2210h

loc_6E41938F:				; CODE XREF: sub_6E4191D0+99j
		mov	dword ptr [ebx+30h], 0
		mov	[esp+48h+Time],	ebx
		call	sub_6E418840
		test	eax, eax
		js	loc_6E4192B8
		dec	dword ptr [ebx+1Ch]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E4193C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4193C0:				; CODE XREF: sub_6E4191D0+59j
					; sub_6E4191D0+1E1j
		mov	eax, [ebx+0E4h]
		mov	edi, [eax+9Ch]
		jmp	loc_6E41922F
; ---------------------------------------------------------------------------
		jmp	short loc_6E4193E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4193E0:				; CODE XREF: sub_6E4191D0+167j
					; sub_6E4191D0+201j
		call	BUF_MEM_new
		test	eax, eax
		jz	short loc_6E41940B
		mov	[esp+48h+var_44], 4000h
		mov	[esp+48h+Time],	eax
		mov	[ebp+var_2C], eax
		call	BUF_MEM_grow
		test	eax, eax
		mov	edx, [ebp+var_2C]
		jz	short loc_6E419415
		mov	[ebx+3Ch], edx
		jmp	loc_6E41933D
; ---------------------------------------------------------------------------

loc_6E41940B:				; CODE XREF: sub_6E4191D0+217j
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4192B8
; ---------------------------------------------------------------------------

loc_6E419415:				; CODE XREF: sub_6E4191D0+231j
		mov	[esp+48h+Time],	edx
		call	BUF_MEM_free
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4192B8
sub_6E4191D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E419430	proc near		; DATA XREF: .rdata:6E44C4DCo

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 300h
		jz	short loc_6E419470
		cmp	eax, 301h
		jz	short loc_6E419480
		cmp	eax, 302h
		jz	short loc_6E419490
		cmp	eax, 303h
		jnz	short loc_6E419460
		jmp	TLSv1_2_client_method
; ---------------------------------------------------------------------------
		align 10h

loc_6E419460:				; CODE XREF: sub_6E419430+1Ej
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E419470:				; CODE XREF: sub_6E419430+9j
		jmp	SSLv3_client_method
; ---------------------------------------------------------------------------
		align 10h

loc_6E419480:				; CODE XREF: sub_6E419430+10j
		jmp	TLSv1_client_method
; ---------------------------------------------------------------------------
		align 10h

loc_6E419490:				; CODE XREF: sub_6E419430+17j
		jmp	TLSv1_1_client_method
sub_6E419430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E4194A0	proc near		; DATA XREF: .rdata:6E44C2F4o
					; .rdata:6E44C494o

Time		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= byte ptr -20h
var_1F		= byte ptr -1Fh
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [ebp+arg_0]
		mov	[esp+68h+Time],	0 ; Time
		call	time
		mov	[ebp+var_24], eax
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_64], 4
		lea	eax, [ebp+var_24]
		mov	[esp+68h+Time],	eax
		call	RAND_add
		call	ERR_clear_error
		mov	[esp+68h+Time],	0 ; dwErrCode
		call	ds:SetLastError
		push	eax
		mov	eax, [ebx+0D0h]
		mov	[ebp+var_30], eax
		test	eax, eax
		jz	loc_6E4198C0

loc_6E419502:				; CODE XREF: sub_6E4194A0+42Fj
		inc	dword ptr [ebx+1Ch]
		mov	[esp+68h+Time],	ebx
		call	SSL_state
		test	ah, 30h
		jz	short loc_6E419590
		mov	[esp+68h+Time],	ebx
		call	SSL_state
		test	ah, 40h
		jnz	short loc_6E419590

loc_6E41951F:				; CODE XREF: sub_6E4194A0+F8j
		mov	eax, [ebx+34h]
		mov	[ebp+var_2C], eax

loc_6E419525:				; CODE XREF: sub_6E4194A0+21Cj
		mov	eax, [ebp+var_2C]
		cmp	[ebp+var_2C], 1211h
		jg	short loc_6E4195A0
		cmp	eax, 1210h
		jge	loc_6E4196D0
		cmp	eax, 1000h
		jz	loc_6E41960D
		cmp	eax, 1003h
		jz	loc_6E41960D

loc_6E419552:				; CODE XREF: sub_6E4194A0+111j
					; sub_6E4194A0+167j
		mov	[esp+68h+var_58], 0EBh
		mov	[esp+68h+var_5C], offset aS23_clnt_c ; "s23_clnt.c"
		mov	[esp+68h+var_60], 0FFh
		mov	[esp+68h+var_64], 75h
		mov	[esp+68h+Time],	14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E4195D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E419590:				; CODE XREF: sub_6E4194A0+70j
					; sub_6E4194A0+7Dj
		mov	[esp+68h+Time],	ebx
		call	SSL_clear
		jmp	short loc_6E41951F
; ---------------------------------------------------------------------------
		align 10h

loc_6E4195A0:				; CODE XREF: sub_6E4194A0+8Fj
		cmp	eax, 4000h
		jz	short loc_6E41960D
		jg	short loc_6E419600
		sub	eax, 1220h
		cmp	eax, 1
		ja	short loc_6E419552
		mov	[esp+68h+var_64], 7
		mov	[esp+68h+Time],	ebx
		call	sub_6E41A840
		cmp	eax, 7
		jz	loc_6E419B40

loc_6E4195CC:				; CODE XREF: sub_6E4194A0+80Dj
		cdq
		and	[ebp+var_30], edx

loc_6E4195D0:				; CODE XREF: sub_6E4194A0+E3j
					; sub_6E4194A0:loc_6E419B23j ...
		dec	dword ptr [ebx+1Ch]

loc_6E4195D3:				; CODE XREF: sub_6E4194A0+E6Fj
		mov	edx, [ebp+var_30]
		test	edx, edx
		jz	short loc_6E4195F1
		mov	[esp+68h+var_60], eax
		mov	[ebp+var_2C], eax
		mov	[esp+68h+var_64], 1002h
		mov	[esp+68h+Time],	ebx
		call	edx
		mov	eax, [ebp+var_2C]

loc_6E4195F1:				; CODE XREF: sub_6E4194A0+138j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E419600:				; CODE XREF: sub_6E4194A0+107j
		cmp	[ebp+var_2C], 5000h
		jnz	loc_6E419552

loc_6E41960D:				; CODE XREF: sub_6E4194A0+A1j
					; sub_6E4194A0+ACj ...
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jnz	loc_6E41A1D8
		mov	dword ptr [ebx+24h], 0
		mov	eax, [ebp+var_30]
		test	eax, eax
		jz	short loc_6E41963E
		mov	[esp+68h+var_60], 1
		mov	[esp+68h+var_64], 10h
		mov	[esp+68h+Time],	ebx
		call	eax

loc_6E41963E:				; CODE XREF: sub_6E4194A0+187j
		mov	dword ptr [ebx+4], 1000h
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jz	loc_6E419D70

loc_6E419650:				; CODE XREF: sub_6E4194A0+8F6j
		mov	[esp+68h+Time],	ebx
		call	sub_6E416DB0
		test	eax, eax
		jz	loc_6E419D60
		mov	[esp+68h+Time],	ebx
		call	sub_6E411760
		mov	dword ptr [ebx+34h], 1210h
		mov	eax, [ebx+0E4h]
		inc	dword ptr [eax+34h]
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+0E8h]
		test	eax, eax
		jnz	loc_6E41980D

loc_6E41968D:				; CODE XREF: sub_6E4194A0+367j
					; sub_6E4194A0+390j
		mov	eax, [ebp+var_30]
		mov	esi, [ebx+34h]
		test	eax, eax
		jz	short loc_6E4196B9
		mov	ecx, [ebp+var_2C]
		cmp	esi, ecx
		jz	short loc_6E4196B9
		mov	[ebx+34h], ecx
		mov	[esp+68h+var_60], 1
		mov	[esp+68h+var_64], 1001h
		mov	[esp+68h+Time],	ebx
		call	eax
		mov	[ebx+34h], esi

loc_6E4196B9:				; CODE XREF: sub_6E4194A0+1F5j
					; sub_6E4194A0+1FCj
		mov	[ebp+var_2C], esi
		jmp	loc_6E419525
; ---------------------------------------------------------------------------
		jmp	short loc_6E4196D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4196D0:				; CODE XREF: sub_6E4194A0+96j
					; sub_6E4194A0+221j
		mov	dword ptr [ebx+30h], 0
		mov	eax, [ebx+100h]
		mov	[ebp+var_34], eax
		test	eax, 1000000h
		jz	loc_6E4198E0
		mov	ecx, [ebp+var_2C]
		mov	[ebp+var_38], 0

loc_6E4196F5:				; CODE XREF: sub_6E4194A0+47Dj
					; sub_6E4194A0+90Aj
		test	[ebp+var_34], 8000000h
		jz	loc_6E419870
		mov	eax, [ebp+var_34]
		and	eax, 16000000h
		cmp	eax, 16000000h
		setz	al
		and	eax, 0FFh
		mov	[ebp+var_3C], eax
		add	[ebp+var_3C], 302h

loc_6E419721:				; CODE XREF: sub_6E4194A0+3D7j
		test	[ebp+var_34], 10000000h
		jz	loc_6E419840
		mov	eax, [ebp+var_34]
		and	eax, 6000000h
		cmp	eax, 6000000h
		jz	loc_6E419840
		mov	byte ptr [ebp+var_40], 1
		mov	[ebp+var_3C], 301h
		test	[ebp+var_34], 4000000h
		jnz	loc_6E419851
		lea	esi, [esi+0]

loc_6E419760:				; CODE XREF: sub_6E4194A0+3ABj
					; sub_6E4194A0+3B8j ...
		mov	eax, [ebx+120h]
		test	eax, eax
		jz	short loc_6E419771
		mov	[ebp+var_38], 0

loc_6E419771:				; CODE XREF: sub_6E4194A0+2C8j
		cmp	dword ptr [ebx+128h], 0FFFFFFFFh
		jz	short loc_6E419781
		mov	[ebp+var_38], 0

loc_6E419781:				; CODE XREF: sub_6E4194A0+2D8j
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[ebp+var_34], eax
		cmp	ecx, 1210h
		jz	loc_6E419930
		mov	[esp+68h+Time],	ebx
		call	sub_6E41A7D0
		cmp	eax, 1
		jle	loc_6E419B23

loc_6E4197A7:				; CODE XREF: sub_6E4194A0+67Dj
		mov	ecx, [ebx+64h]
		test	ecx, ecx
		jz	short loc_6E4197F1
		mov	edx, [ebx+68h]
		mov	esi, [ebp+var_38]
		test	esi, esi
		mov	[esp+68h+var_50], edx
		mov	[esp+68h+var_54], ebx
		jz	loc_6E419880
		sub	eax, 2
		mov	[esp+68h+var_58], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		add	eax, 2
		mov	[esp+68h+var_5C], eax
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], 2
		mov	[esp+68h+Time],	1
		call	ecx

loc_6E4197F1:				; CODE XREF: sub_6E4194A0+30Cj
		mov	dword ptr [ebx+34h], 1220h
		mov	dword ptr [ebx+44h], 0

loc_6E4197FF:				; CODE XREF: sub_6E4194A0+41Aj
					; sub_6E4194A0+697j
		mov	eax, [ebx+0E8h]
		test	eax, eax
		jz	loc_6E41968D

loc_6E41980D:				; CODE XREF: sub_6E4194A0+1E7j
		mov	eax, [ebx+10h]
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], 0
		mov	[esp+68h+var_64], 0Bh
		mov	[esp+68h+Time],	eax
		call	BIO_ctrl
		jmp	loc_6E41968D
; ---------------------------------------------------------------------------
		align 10h

loc_6E419840:				; CODE XREF: sub_6E4194A0+288j
					; sub_6E4194A0+29Bj
		mov	byte ptr [ebp+var_40], 0
		test	[ebp+var_34], 4000000h
		jz	loc_6E419760

loc_6E419851:				; CODE XREF: sub_6E4194A0+2B3j
		test	[ebp+var_34], 2000000h
		jnz	loc_6E419760
		mov	byte ptr [ebp+var_40], 0
		mov	[ebp+var_3C], 300h
		jmp	loc_6E419760
; ---------------------------------------------------------------------------
		align 10h

loc_6E419870:				; CODE XREF: sub_6E4194A0+25Cj
		mov	[ebp+var_3C], 303h
		jmp	loc_6E419721
; ---------------------------------------------------------------------------
		align 10h

loc_6E419880:				; CODE XREF: sub_6E4194A0+31Ej
		sub	eax, 5
		mov	[esp+68h+var_58], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		add	eax, 5
		mov	[esp+68h+var_5C], eax
		mov	[esp+68h+var_60], 16h
		mov	eax, [ebp+var_3C]
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+Time],	1
		call	ecx
		mov	dword ptr [ebx+34h], 1220h
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E4197FF
; ---------------------------------------------------------------------------
		align 10h

loc_6E4198C0:				; CODE XREF: sub_6E4194A0+5Cj
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+9Ch]
		mov	[ebp+var_30], eax
		jmp	loc_6E419502
; ---------------------------------------------------------------------------
		align 10h

loc_6E4198E0:				; CODE XREF: sub_6E4194A0+245j
		mov	[esp+68h+Time],	ebx
		call	SSL_get_ciphers
		mov	esi, eax
		xor	edi, edi
		jmp	short loc_6E419907
; ---------------------------------------------------------------------------
		align 10h

loc_6E4198F0:				; CODE XREF: sub_6E4194A0+471j
		mov	[esp+68h+var_64], edi
		mov	[esp+68h+Time],	esi
		call	sk_value
		cmp	dword ptr [eax+1Ch], 1
		jz	loc_6E419DA0
		inc	edi

loc_6E419907:				; CODE XREF: sub_6E4194A0+44Cj
		mov	[esp+68h+Time],	esi
		call	sk_num
		cmp	edi, eax
		jl	short loc_6E4198F0
		mov	ecx, [ebx+34h]
		mov	[ebp+var_38], 0
		jmp	loc_6E4196F5
; ---------------------------------------------------------------------------
		align 10h

loc_6E419930:				; CODE XREF: sub_6E4194A0+2F0j
		mov	[esp+68h+var_64], 0
		mov	[esp+68h+Time],	ebx
		call	sub_6E438670
		test	eax, eax
		jz	loc_6E419D60
		mov	esi, [ebx+58h]
		test	byte ptr [ebx+104h], 20h
		jnz	loc_6E41A070
		mov	[esp+68h+var_64], 20h
		add	esi, 0C0h
		mov	[esp+68h+Time],	esi
		call	RAND_pseudo_bytes

loc_6E41996E:				; CODE XREF: sub_6E4194A0+C19j
		test	eax, eax
		jle	loc_6E419D60
		mov	eax, [ebp+var_3C]
		cmp	eax, 303h
		jz	loc_6E41A0C0
		cmp	eax, 302h
		jz	loc_6E41A140

loc_6E41998F:				; CODE XREF: sub_6E4194A0+C24j
					; sub_6E4194A0+CA4j
		mov	eax, [ebp+var_3C]
		mov	[ebx+110h], eax
		mov	edi, [ebp+var_38]
		test	edi, edi
		jz	loc_6E419DB0
		mov	eax, [ebp+var_34]
		lea	ecx, [eax+2]
		mov	[ebp+var_4C], ecx
		lea	esi, [eax+0Bh]
		mov	byte ptr [eax+2], 1
		mov	byte ptr [eax+3], 3
		mov	edx, eax
		mov	al, byte ptr [ebp+var_40]
		mov	[edx+4], al
		mov	[esp+68h+Time],	ebx
		call	SSL_get_ciphers
		mov	[esp+68h+var_5C], 0
		mov	[esp+68h+var_60], esi
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+Time],	ebx
		call	sub_6E4321C0
		test	eax, eax
		jz	loc_6E41A3A7
		mov	ecx, eax
		sar	ecx, 8
		mov	edi, [ebp+var_34]
		mov	[edi+5], cl
		mov	[edi+6], al
		add	eax, esi
		mov	[ebp+var_48], eax
		mov	byte ptr [edi+7], 0
		mov	byte ptr [edi+8], 0
		mov	eax, [ebx+100h]
		and	eax, 2
		cmp	eax, 1
		sbb	edx, edx
		mov	[ebp+var_40], edx
		and	[ebp+var_40], 10h
		add	[ebp+var_40], 10h
		not	edx
		and	edx, 10h
		cmp	eax, 1
		sbb	ecx, ecx
		and	ecx, 10h
		add	ecx, 10h
		cmp	eax, 1
		sbb	esi, esi
		and	esi, 10h
		add	esi, 10h
		mov	byte ptr [edi+9], 0
		mov	[edi+0Ah], cl
		mov	eax, [ebx+58h]
		lea	edi, [eax+0C0h]
		mov	[ebp+var_44], 20h
		test	edi, 1
		jnz	loc_6E41A276

loc_6E419A59:				; CODE XREF: sub_6E4194A0+DEAj
		test	edi, 2
		jnz	loc_6E41A23E

loc_6E419A65:				; CODE XREF: sub_6E4194A0+DAAj
		mov	ecx, [ebp+var_44]
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	byte ptr [ebp+var_44], 2
		jnz	loc_6E419FA0

loc_6E419A79:				; CODE XREF: sub_6E4194A0+B08j
		test	byte ptr [ebp+var_44], 1
		jnz	loc_6E419F90

loc_6E419A83:				; CODE XREF: sub_6E4194A0+AF3j
		mov	[esp+68h+var_64], esi
		lea	esi, [edx+0C0h]
		mov	eax, [ebx+58h]
		add	eax, esi
		mov	[esp+68h+Time],	eax
		call	RAND_pseudo_bytes
		test	eax, eax
		jle	loc_6E419D60
		mov	ecx, [ebx+58h]
		add	ecx, esi
		mov	edx, [ebp+var_40]
		mov	eax, edx
		mov	edi, [ebp+var_48]
		mov	esi, ecx
		cmp	edx, 4
		jnb	loc_6E41A040

loc_6E419ABA:				; CODE XREF: sub_6E4194A0+BBFj
		xor	ecx, ecx
		test	al, 2
		jnz	loc_6E41A030

loc_6E419AC4:				; CODE XREF: sub_6E4194A0+B9Bj
		test	al, 1
		jnz	loc_6E41A020

loc_6E419ACC:				; CODE XREF: sub_6E4194A0+B89j
		mov	eax, [ebp+var_48]
		add	eax, [ebp+var_40]
		mov	esi, [ebp+var_4C]
		sub	eax, esi
		mov	ecx, eax
		sar	ecx, 8
		or	ecx, 0FFFFFF80h
		mov	edx, [ebp+var_34]
		mov	[edx], cl
		mov	[edx+1], al
		lea	ecx, [eax+2]
		mov	[ebx+44h], ecx
		mov	dword ptr [ebx+48h], 0
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], esi
		mov	[esp+68h+Time],	ebx
		call	sub_6E411870

loc_6E419B04:				; CODE XREF: sub_6E4194A0+A7Bj
		mov	dword ptr [ebx+34h], 1211h
		mov	dword ptr [ebx+48h], 0
		mov	[esp+68h+Time],	ebx
		call	sub_6E41A7D0
		cmp	eax, 1
		jg	loc_6E4197A7

loc_6E419B23:				; CODE XREF: sub_6E4194A0+301j
		jnz	loc_6E4195D0
		mov	dword ptr [ebx+34h], 1220h
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E4197FF
; ---------------------------------------------------------------------------
		align 10h

loc_6E419B40:				; CODE XREF: sub_6E4194A0+126j
		mov	edx, [ebx+4Ch]
		mov	ecx, 1
		lea	edi, [ebp+var_20]
		mov	esi, edx
		rep movsd
		mov	ax, [esi]
		mov	[edi], ax
		mov	al, [esi+2]
		mov	byte ptr [ebp+var_2C], al
		mov	[edi+2], al
		mov	al, [edx]
		test	al, al
		js	loc_6E41A0D0

loc_6E419B68:				; CODE XREF: sub_6E4194A0+C34j
					; sub_6E4194A0+C3Ej ...
		cmp	byte ptr [edx+1], 3
		jnz	loc_6E41A10A
		mov	cl, [edx+2]
		cmp	cl, 3
		ja	loc_6E41A10A
		cmp	al, 16h
		jz	loc_6E41A100
		cmp	al, 15h
		jnz	loc_6E41A10A
		cmp	byte ptr [edx+3], 0
		jnz	loc_6E41A10A
		cmp	byte ptr [edx+4], 2
		jnz	loc_6E41A10A

loc_6E419BA2:				; CODE XREF: sub_6E4194A0+C64j
		test	cl, cl
		jnz	loc_6E419F20
		test	byte ptr [ebx+103h], 2
		jnz	loc_6E419F36
		mov	[ebp+var_2C], edx
		mov	dword ptr [ebx], 300h
		call	SSLv3_client_method
		mov	[ebx+8], eax
		mov	edx, [ebp+var_2C]
		nop
		lea	esi, [esi+0]

loc_6E419BD0:				; CODE XREF: sub_6E4194A0+CD3j
					; sub_6E4194A0+E03j ...
		mov	eax, [ebx]
		mov	ecx, [ebx+0C0h]
		mov	[ecx], eax
		cmp	eax, 303h
		jg	loc_6E41A178

loc_6E419BE5:				; CODE XREF: sub_6E4194A0+CFAj
		cmp	byte ptr [edx],	15h
		jnz	short loc_6E419BF8
		mov	al, [edx+5]
		mov	byte ptr [ebp+var_2C], al
		dec	al
		jnz	loc_6E419CB2

loc_6E419BF8:				; CODE XREF: sub_6E4194A0+748j
		mov	[esp+68h+var_64], 1
		mov	[esp+68h+Time],	ebx
		call	sub_6E435D40
		test	eax, eax
		jz	loc_6E419D60
		mov	dword ptr [ebx+34h], 1120h
		mov	dword ptr [ebx+38h], 0F0h
		mov	dword ptr [ebx+50h], 7
		mov	eax, [ebx+58h]
		mov	edi, [eax+0ECh]
		test	edi, edi
		jz	loc_6E41A1BA

loc_6E419C36:				; CODE XREF: sub_6E4194A0+D33j
		mov	[ebx+4Ch], edi
		lea	esi, [ebp+var_20]
		mov	eax, 7
		test	edi, 1
		jnz	loc_6E41A263

loc_6E419C4D:				; CODE XREF: sub_6E4194A0+DD1j
		test	edi, 2
		jnz	loc_6E41A24F

loc_6E419C59:				; CODE XREF: sub_6E4194A0+DBEj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E419C71
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E419C71:				; CODE XREF: sub_6E4194A0+7C4j
		test	al, 1
		jz	short loc_6E419C7E
		mov	al, [esi+edx]
		mov	byte ptr [ebp+var_2C], al
		mov	[edi+edx], al

loc_6E419C7E:				; CODE XREF: sub_6E4194A0+7D3j
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+0F8h], 7
		mov	dword ptr [eax+0F4h], 0
		mov	eax, [ebx+8]
		mov	eax, [eax+14h]
		mov	[ebx+20h], eax
		mov	dword ptr [ebx+44h], 0
		mov	[esp+68h+Time],	ebx
		call	SSL_connect
		jmp	loc_6E4195CC
; ---------------------------------------------------------------------------

loc_6E419CB2:				; CODE XREF: sub_6E4194A0+752j
		mov	esi, [ebx+0D0h]
		test	esi, esi
		jz	loc_6E41A3B1

loc_6E419CC0:				; CODE XREF: sub_6E4194A0+F1Fj
		xor	eax, eax
		mov	al, byte ptr [ebp+var_2C]
		shl	eax, 8
		xor	ecx, ecx
		mov	cl, [edx+6]
		mov	[ebp+var_2C], edx
		or	eax, ecx
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], 4004h
		mov	[esp+68h+Time],	ebx
		call	esi
		mov	edx, [ebp+var_2C]

loc_6E419CE6:				; CODE XREF: sub_6E4194A0+F25j
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_6E419D24
		mov	ecx, [ebx+68h]
		mov	esi, [ebx]
		mov	[esp+68h+var_50], ecx
		mov	[esp+68h+var_54], ebx
		mov	[esp+68h+var_58], 2
		lea	ecx, [edx+5]
		mov	[ebp+var_2C], edx
		mov	[esp+68h+var_5C], ecx
		mov	[esp+68h+var_60], 15h
		mov	[esp+68h+var_64], esi
		mov	[esp+68h+Time],	0
		call	eax
		mov	edx, [ebp+var_2C]

loc_6E419D24:				; CODE XREF: sub_6E4194A0+84Bj
		mov	dword ptr [ebx+18h], 1
		mov	[esp+68h+var_58], 2F5h
		mov	[esp+68h+var_5C], offset aS23_clnt_c ; "s23_clnt.c"
		xor	eax, eax
		mov	al, [edx+6]
		add	eax, 3E8h
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], 77h
		mov	[esp+68h+Time],	14h
		call	ERR_put_error
		lea	esi, [esi+0]

loc_6E419D60:				; CODE XREF: sub_6E4194A0+1BAj
					; sub_6E4194A0+4A2j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4195D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E419D70:				; CODE XREF: sub_6E4194A0+1AAj
		call	BUF_MEM_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E419D60
		mov	[esp+68h+var_64], 4000h
		mov	[esp+68h+Time],	eax
		call	BUF_MEM_grow
		test	eax, eax
		jz	loc_6E41A2FF
		mov	[ebx+3Ch], esi
		jmp	loc_6E419650
; ---------------------------------------------------------------------------
		align 10h

loc_6E419DA0:				; CODE XREF: sub_6E4194A0+460j
		mov	ecx, [ebx+34h]
		mov	[ebp+var_38], 1
		jmp	loc_6E4196F5
; ---------------------------------------------------------------------------
		align 10h

loc_6E419DB0:				; CODE XREF: sub_6E4194A0+4FDj
		mov	edx, [ebp+var_34]
		mov	eax, edx
		add	eax, 9
		mov	[ebp+var_4C], eax
		mov	byte ptr [edx+9], 3
		mov	al, byte ptr [ebp+var_40]
		mov	[edx+0Ah], al
		mov	ecx, [ebx+58h]
		lea	edi, [edx+0Bh]
		lea	esi, [ecx+0C0h]
		mov	eax, 20h
		test	edi, 1
		jnz	loc_6E41A222

loc_6E419DE2:				; CODE XREF: sub_6E4194A0+D99j
		test	edi, 2
		jnz	loc_6E41A20E

loc_6E419DEE:				; CODE XREF: sub_6E4194A0+D7Dj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		test	al, 2
		jnz	loc_6E419F80

loc_6E419DFD:				; CODE XREF: sub_6E4194A0+AEBj
		test	al, 1
		jnz	loc_6E419F70

loc_6E419E05:				; CODE XREF: sub_6E4194A0+AD9j
		mov	eax, [ebp+var_34]
		mov	byte ptr [eax+2Bh], 0
		lea	esi, [eax+2Eh]
		mov	[esp+68h+Time],	ebx
		call	SSL_get_ciphers
		mov	[esp+68h+var_5C], offset sub_6E40F920
		mov	[esp+68h+var_60], esi
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+Time],	ebx
		call	sub_6E4321C0
		test	eax, eax
		jz	loc_6E41A376
		mov	ecx, eax
		sar	ecx, 8
		mov	edx, [ebp+var_34]
		mov	[edx+2Ch], cl
		mov	[edx+2Dh], al
		add	esi, eax
		test	byte ptr [ebx+102h], 2
		jz	loc_6E419FB0

loc_6E419E54:				; CODE XREF: sub_6E4194A0+B1Ej
		lea	eax, [esi+1]
		mov	[ebp+var_48], eax
		mov	byte ptr [esi],	1

loc_6E419E5D:				; CODE XREF: sub_6E4194A0+B3Cj
					; sub_6E4194A0+B77j
		mov	eax, [ebp+var_48]
		lea	esi, [eax+1]
		mov	byte ptr [eax],	0
		mov	[esp+68h+Time],	ebx
		call	sub_6E41CEF0
		test	eax, eax
		jle	loc_6E41A314
		mov	eax, [ebp+var_34]
		add	eax, 4000h
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], esi
		mov	[esp+68h+Time],	ebx
		call	sub_6E41B270
		test	eax, eax
		jz	loc_6E41A3CA
		mov	ecx, eax
		sub	ecx, [ebp+var_4C]
		mov	edi, [ebp+var_34]
		mov	byte ptr [edi+5], 1
		mov	edx, ecx
		shr	edx, 10h
		mov	[edi+6], dl
		mov	edx, ecx
		shr	edx, 8
		mov	[edi+7], dl
		mov	[edi+8], cl
		add	ecx, 4
		cmp	ecx, 4000h
		ja	loc_6E41A345
		mov	edx, edi
		mov	byte ptr [edi],	16h
		mov	byte ptr [edi+1], 3
		mov	esi, [ebx+110h]
		mov	edi, esi
		sar	edi, 8
		cmp	edi, 3
		jz	loc_6E41A19F

loc_6E419EE1:				; CODE XREF: sub_6E4194A0+D05j
		mov	edx, [ebp+var_34]
		lea	esi, [edx+3]
		mov	edi, edx

loc_6E419EE9:				; CODE XREF: sub_6E4194A0+D15j
		mov	dl, byte ptr [ebp+var_40]
		mov	[edi+2], dl
		mov	edx, ecx
		sar	edx, 8
		mov	[esi], dl
		mov	[esi+1], cl
		sub	eax, edi
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+48h], 0
		sub	eax, 5
		mov	[esp+68h+var_60], eax
		lea	eax, [edi+5]
		mov	[esp+68h+var_64], eax
		mov	[esp+68h+Time],	ebx
		call	sub_6E411870
		jmp	loc_6E419B04
; ---------------------------------------------------------------------------

loc_6E419F20:				; CODE XREF: sub_6E4194A0+704j
		cmp	cl, 1
		jnz	loc_6E41A149
		test	byte ptr [ebx+103h], 4
		jz	loc_6E41A28F

loc_6E419F36:				; CODE XREF: sub_6E4194A0+711j
					; sub_6E4194A0+CB9j ...
		mov	[esp+68h+var_58], 2D6h

loc_6E419F3E:				; CODE XREF: sub_6E4194A0+C56j
		mov	[esp+68h+var_5C], offset aS23_clnt_c ; "s23_clnt.c"
		mov	[esp+68h+var_60], 102h
		mov	[esp+68h+var_64], 77h
		mov	[esp+68h+Time],	14h
		call	ERR_put_error
		jmp	loc_6E419D60
; ---------------------------------------------------------------------------
		align 10h

loc_6E419F70:				; CODE XREF: sub_6E4194A0+95Fj
		mov	al, [esi+ecx]
		mov	byte ptr [ebp+var_44], al
		mov	[edi+ecx], al
		jmp	loc_6E419E05
; ---------------------------------------------------------------------------
		align 10h

loc_6E419F80:				; CODE XREF: sub_6E4194A0+957j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	loc_6E419DFD
; ---------------------------------------------------------------------------

loc_6E419F90:				; CODE XREF: sub_6E4194A0+5DDj
		mov	byte ptr [edi],	0
		jmp	loc_6E419A83
; ---------------------------------------------------------------------------
		align 10h

loc_6E419FA0:				; CODE XREF: sub_6E4194A0+5D3j
		mov	word ptr [edi],	0
		add	edi, 2
		jmp	loc_6E419A79
; ---------------------------------------------------------------------------
		align 10h

loc_6E419FB0:				; CODE XREF: sub_6E4194A0+9AEj
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E419E54
		mov	[esp+68h+Time],	eax
		call	sk_num
		mov	[ebp+var_44], eax
		lea	ecx, [esi+1]
		mov	[ebp+var_48], ecx
		mov	ecx, eax
		inc	eax
		mov	[esi], al
		test	ecx, ecx
		jle	loc_6E419E5D
		xor	edi, edi
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E419FF0:				; CODE XREF: sub_6E4194A0+B72j
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+98h]
		mov	[esp+68h+var_64], edi
		mov	[esp+68h+Time],	eax
		call	sk_value
		mov	eax, [eax]
		mov	[esi+edi+1], al
		inc	edi
		cmp	edi, [ebp+var_44]
		jnz	short loc_6E419FF0
		add	[ebp+var_48], edi
		jmp	loc_6E419E5D
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A020:				; CODE XREF: sub_6E4194A0+626j
		mov	al, [esi+ecx]
		mov	byte ptr [ebp+var_44], al
		mov	[edi+ecx], al
		jmp	loc_6E419ACC
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A030:				; CODE XREF: sub_6E4194A0+61Ej
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	loc_6E419AC4
; ---------------------------------------------------------------------------

loc_6E41A040:				; CODE XREF: sub_6E4194A0+614j
		test	edi, 1
		jnz	loc_6E41A2EB

loc_6E41A04C:				; CODE XREF: sub_6E4194A0+E5Aj
		test	edi, 2
		jnz	loc_6E41A2D7

loc_6E41A058:				; CODE XREF: sub_6E4194A0+E46j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E419ABA
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A070:				; CODE XREF: sub_6E4194A0+4B2j
		mov	[esp+68h+Time],	0 ; Time
		call	time
		mov	ecx, eax
		shr	ecx, 18h
		mov	[esi+0C0h], cl
		mov	ecx, eax
		shr	ecx, 10h
		mov	[esi+0C1h], cl
		mov	ecx, eax
		shr	ecx, 8
		mov	[esi+0C2h], cl
		mov	[esi+0C3h], al
		mov	[esp+68h+var_64], 1Ch
		add	esi, 0C4h
		mov	[esp+68h+Time],	esi
		call	RAND_pseudo_bytes
		jmp	loc_6E41996E
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A0C0:				; CODE XREF: sub_6E4194A0+4DEj
		mov	byte ptr [ebp+var_40], 3
		jmp	loc_6E41998F
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A0D0:				; CODE XREF: sub_6E4194A0+6C2j
		cmp	byte ptr [edx+2], 4
		jnz	loc_6E419B68
		cmp	byte ptr [edx+5], 0
		jnz	loc_6E419B68
		cmp	byte ptr [edx+6], 2
		jnz	loc_6E419B68
		mov	[esp+68h+var_58], 272h
		jmp	loc_6E419F3E
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A100:				; CODE XREF: sub_6E4194A0+6E0j
		cmp	byte ptr [edx+5], 2
		jz	loc_6E419BA2

loc_6E41A10A:				; CODE XREF: sub_6E4194A0+6CCj
					; sub_6E4194A0+6D8j ...
		mov	[esp+68h+var_58], 30Eh
		mov	[esp+68h+var_5C], offset aS23_clnt_c ; "s23_clnt.c"
		mov	[esp+68h+var_60], 0FCh
		mov	[esp+68h+var_64], 77h
		mov	[esp+68h+Time],	14h
		call	ERR_put_error
		jmp	loc_6E419D60
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A140:				; CODE XREF: sub_6E4194A0+4E9j
		mov	byte ptr [ebp+var_40], 2
		jmp	loc_6E41998F
; ---------------------------------------------------------------------------

loc_6E41A149:				; CODE XREF: sub_6E4194A0+A83j
		cmp	cl, 2
		jnz	loc_6E41A2A8
		test	byte ptr [ebx+103h], 10h
		jnz	loc_6E419F36
		mov	[ebp+var_2C], edx
		mov	dword ptr [ebx], 302h
		call	TLSv1_1_client_method
		mov	[ebx+8], eax
		mov	edx, [ebp+var_2C]
		jmp	loc_6E419BD0
; ---------------------------------------------------------------------------

loc_6E41A178:				; CODE XREF: sub_6E4194A0+73Fj
		mov	[ebp+var_2C], edx
		mov	[esp+68h+var_60], offset aSVersionTls__0 ; "s->version <= TLS_MAX_VERSION"
		mov	[esp+68h+var_64], 2DDh
		mov	[esp+68h+Time],	offset aS23_clnt_c ; "s23_clnt.c"
		call	OpenSSLDie
		mov	edx, [ebp+var_2C]
		jmp	loc_6E419BE5
; ---------------------------------------------------------------------------

loc_6E41A19F:				; CODE XREF: sub_6E4194A0+A3Bj
		cmp	esi, 301h
		jle	loc_6E419EE1
		lea	esi, [edx+3]
		mov	byte ptr [ebp+var_40], 1
		mov	edi, [ebp+var_34]
		jmp	loc_6E419EE9
; ---------------------------------------------------------------------------

loc_6E41A1BA:				; CODE XREF: sub_6E4194A0+790j
		mov	[esp+68h+Time],	ebx
		call	sub_6E416A30
		test	eax, eax
		jz	loc_6E419D60
		mov	eax, [ebx+58h]
		mov	edi, [eax+0ECh]
		jmp	loc_6E419C36
; ---------------------------------------------------------------------------

loc_6E41A1D8:				; CODE XREF: sub_6E4194A0+175j
		mov	[esp+68h+var_58], 0B2h
		mov	[esp+68h+var_5C], offset aS23_clnt_c ; "s23_clnt.c"
		mov	[esp+68h+var_60], 0DDh
		mov	[esp+68h+var_64], 75h
		mov	[esp+68h+Time],	14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4195D0
; ---------------------------------------------------------------------------

loc_6E41A20E:				; CODE XREF: sub_6E4194A0+948j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E419DEE
; ---------------------------------------------------------------------------

loc_6E41A222:				; CODE XREF: sub_6E4194A0+93Cj
		mov	al, [ecx+0C0h]
		mov	[edx+0Bh], al
		lea	edi, [edx+0Ch]
		lea	esi, [ecx+0C1h]
		mov	eax, 1Fh
		jmp	loc_6E419DE2
; ---------------------------------------------------------------------------

loc_6E41A23E:				; CODE XREF: sub_6E4194A0+5BFj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	[ebp+var_44], 2
		jmp	loc_6E419A65
; ---------------------------------------------------------------------------

loc_6E41A24F:				; CODE XREF: sub_6E4194A0+7B3j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E419C59
; ---------------------------------------------------------------------------

loc_6E41A263:				; CODE XREF: sub_6E4194A0+7A7j
		mov	al, [ebp+var_20]
		mov	[edi], al
		inc	edi
		lea	esi, [ebp+var_1F]
		mov	eax, 6
		jmp	loc_6E419C4D
; ---------------------------------------------------------------------------

loc_6E41A276:				; CODE XREF: sub_6E4194A0+5B3j
		mov	byte ptr [eax+0C0h], 0
		lea	edi, [eax+0C1h]
		mov	[ebp+var_44], 1Fh
		jmp	loc_6E419A59
; ---------------------------------------------------------------------------

loc_6E41A28F:				; CODE XREF: sub_6E4194A0+A90j
		mov	[ebp+var_2C], edx
		mov	dword ptr [ebx], 301h
		call	TLSv1_client_method
		mov	[ebx+8], eax
		mov	edx, [ebp+var_2C]
		jmp	loc_6E419BD0
; ---------------------------------------------------------------------------

loc_6E41A2A8:				; CODE XREF: sub_6E4194A0+CACj
		mov	[ebp+var_2C], edx
		cmp	cl, 3
		jnz	loc_6E419F36
		test	byte ptr [ebx+103h], 8
		jnz	loc_6E419F36
		mov	dword ptr [ebx], 303h
		call	TLSv1_2_client_method
		mov	[ebx+8], eax
		mov	edx, [ebp+var_2C]
		jmp	loc_6E419BD0
; ---------------------------------------------------------------------------

loc_6E41A2D7:				; CODE XREF: sub_6E4194A0+BB2j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E41A058
; ---------------------------------------------------------------------------

loc_6E41A2EB:				; CODE XREF: sub_6E4194A0+BA6j
		mov	al, [ecx]
		mov	byte ptr [ebp+var_44], al
		mov	[edi], al
		lea	edi, [edi+1]
		inc	esi
		mov	eax, [ebp+var_40]
		dec	eax
		jmp	loc_6E41A04C
; ---------------------------------------------------------------------------

loc_6E41A2FF:				; CODE XREF: sub_6E4194A0+8EDj
		dec	dword ptr [ebx+1Ch]
		mov	[esp+68h+Time],	esi
		call	BUF_MEM_free
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4195D3
; ---------------------------------------------------------------------------

loc_6E41A314:				; CODE XREF: sub_6E4194A0+9D0j
		mov	[esp+68h+var_58], 21Ah
		mov	[esp+68h+var_5C], offset aS23_clnt_c ; "s23_clnt.c"
		mov	[esp+68h+var_60], 0E2h
		mov	[esp+68h+var_64], 74h
		mov	[esp+68h+Time],	14h
		call	ERR_put_error
		jmp	loc_6E419D60
; ---------------------------------------------------------------------------

loc_6E41A345:				; CODE XREF: sub_6E4194A0+A1Ej
		mov	[esp+68h+var_58], 231h

loc_6E41A34D:				; CODE XREF: sub_6E4194A0+F32j
		mov	[esp+68h+var_5C], offset aS23_clnt_c ; "s23_clnt.c"
		mov	[esp+68h+var_60], 44h
		mov	[esp+68h+var_64], 74h
		mov	[esp+68h+Time],	14h
		call	ERR_put_error
		jmp	loc_6E419D60
; ---------------------------------------------------------------------------

loc_6E41A376:				; CODE XREF: sub_6E4194A0+991j
		mov	[esp+68h+var_58], 1F6h

loc_6E41A37E:				; CODE XREF: sub_6E4194A0+F0Fj
		mov	[esp+68h+var_5C], offset aS23_clnt_c ; "s23_clnt.c"
		mov	[esp+68h+var_60], 0B5h
		mov	[esp+68h+var_64], 74h
		mov	[esp+68h+Time],	14h
		call	ERR_put_error
		jmp	loc_6E419D60
; ---------------------------------------------------------------------------

loc_6E41A3A7:				; CODE XREF: sub_6E4194A0+541j
		mov	[esp+68h+var_58], 1B2h
		jmp	short loc_6E41A37E
; ---------------------------------------------------------------------------

loc_6E41A3B1:				; CODE XREF: sub_6E4194A0+81Aj
		mov	ecx, [ebx+0E4h]
		mov	esi, [ecx+9Ch]
		test	esi, esi
		jnz	loc_6E419CC0
		jmp	loc_6E419CE6
; ---------------------------------------------------------------------------

loc_6E41A3CA:				; CODE XREF: sub_6E4194A0+9F0j
		mov	[esp+68h+var_58], 222h
		jmp	loc_6E41A34D
sub_6E4194A0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 110. SSLv23_client_method

; =============== S U B	R O U T	I N E =======================================


		public SSLv23_client_method
SSLv23_client_method proc near
		mov	eax, offset dword_6E44C480
		retn
SSLv23_client_method endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41A3F0	proc near		; CODE XREF: sub_6E401670+6DCp
					; sub_6E407680+69p ...

Time		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	ebx
		sub	esp, 14h
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		mov	esi, [esp+1Ch+arg_8]
		mov	ebx, [esp+1Ch+arg_C]
		cmp	ebx, 3
		jle	short loc_6E41A480
		mov	eax, [eax+104h]
		test	edx, edx
		jnz	short loc_6E41A430
		shr	eax, 5
		and	eax, 1
		test	eax, eax
		jnz	short loc_6E41A43A

loc_6E41A41E:				; CODE XREF: sub_6E41A3F0+48j
		mov	[esp+1Ch+arg_4], ebx
		mov	[esp+1Ch+arg_0], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	RAND_pseudo_bytes
; ---------------------------------------------------------------------------

loc_6E41A430:				; CODE XREF: sub_6E41A3F0+22j
		shr	eax, 6
		and	eax, 1
		test	eax, eax
		jz	short loc_6E41A41E

loc_6E41A43A:				; CODE XREF: sub_6E41A3F0+2Cj
		mov	[esp+1Ch+Time],	0 ; Time
		call	time
		mov	edx, eax
		shr	edx, 18h
		mov	[esi], dl
		mov	edx, eax
		shr	edx, 10h
		mov	[esi+1], dl
		mov	edx, eax
		shr	edx, 8
		mov	[esi+2], dl
		mov	[esi+3], al
		sub	ebx, 4
		mov	[esp+1Ch+arg_4], ebx
		add	esi, 4
		mov	[esp+1Ch+arg_0], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	RAND_pseudo_bytes
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A480:				; CODE XREF: sub_6E41A3F0+18j
		xor	eax, eax
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_6E41A3F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41A490	proc near		; DATA XREF: .rdata:6E44C340o
					; .rdata:6E44C420o ...
		mov	eax, 12Ch
		retn
sub_6E41A490	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6E41A4A0	proc near		; DATA XREF: .rdata:6E44C334o
					; .rdata:6E44C414o ...
		jmp	sub_6E40E3C0
sub_6E41A4A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41A4B0	proc near		; DATA XREF: .rdata:6E44C338o
					; .rdata:6E44C418o ...

arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 8
		mov	ebx, [esp+0Ch+arg_0]
		call	sub_6E40E3C0
		cmp	eax, ebx
		jbe	short loc_6E41A4D0
		mov	[esp+0Ch+arg_0], ebx
		add	esp, 8
		pop	ebx
		jmp	sub_6E40E3D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A4D0:				; CODE XREF: sub_6E41A4B0+Fj
		xor	eax, eax
		add	esp, 8
		pop	ebx
		retn
sub_6E41A4B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6E41A4E0	proc near		; DATA XREF: .rdata:6E44C328o
					; .rdata:6E44C408o ...
		jmp	sub_6E40F8C0
sub_6E41A4E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41A4F0	proc near		; DATA XREF: .rdata:6E44C32Co
					; .rdata:6E44C40Co ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		mov	ecx, [esp+arg_4]
		mov	eax, [edx+0Ch]
		cmp	eax, 20h
		jz	short loc_6E41A540
		cmp	eax, 40h
		jz	short loc_6E41A540
		add	eax, 0FFFFFF80h
		jz	short loc_6E41A540
		mov	eax, [edx+10h]
		cmp	eax, 10h
		jz	short loc_6E41A540
		cmp	eax, 40h
		jz	short loc_6E41A540
		test	ecx, ecx
		jz	short loc_6E41A550
		mov	eax, [edx+8]
		mov	edx, eax
		sar	edx, 10h
		mov	[ecx], dl
		mov	edx, eax
		sar	edx, 8
		mov	[ecx+1], dl
		mov	[ecx+2], al
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A540:				; CODE XREF: sub_6E41A4F0+Ej
					; sub_6E41A4F0+13j ...
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A550:				; CODE XREF: sub_6E41A4F0+29j
		mov	eax, 3
		retn
sub_6E41A4F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E41A560	proc near		; DATA XREF: .rdata:6E44C2F8o
					; .rdata:6E44C3D8o ...

dwErrCode	= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	[esp+38h+dwErrCode], 0 ; dwErrCode
		call	ds:SetLastError
		push	edx
		mov	[esp+38h+dwErrCode], ebx
		call	SSL_state
		test	ah, 30h
		jz	loc_6E41A610
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jnz	short loc_6E41A610
		mov	eax, [ebx+20h]
		mov	[esp+38h+dwErrCode], ebx
		call	eax
		test	eax, eax
		js	short loc_6E41A600
		jz	short loc_6E41A5C0
		mov	[ebp+arg_8], edi
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	SSL_read
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A5C0:				; CODE XREF: sub_6E41A560+44j
		mov	[esp+38h+var_28], 89h
		mov	[esp+38h+var_2C], offset aS23_lib_c ; "s23_lib.c"
		mov	[esp+38h+var_30], 0E5h
		mov	[esp+38h+var_34], 78h
		mov	[esp+38h+dwErrCode], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E41A600
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A600:				; CODE XREF: sub_6E41A560+42j
					; sub_6E41A560+91j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A610:				; CODE XREF: sub_6E41A560+2Bj
					; sub_6E41A560+36j
		mov	[esp+38h+dwErrCode], ebx
		call	sub_6E42FF90
		mov	eax, 0FFFFFFFFh
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6E41A560	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E41A630	proc near		; DATA XREF: .rdata:6E44C2FCo
					; .rdata:6E44C3DCo ...

dwErrCode	= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	[esp+38h+dwErrCode], 0 ; dwErrCode
		call	ds:SetLastError
		push	edx
		mov	[esp+38h+dwErrCode], ebx
		call	SSL_state
		test	ah, 30h
		jz	loc_6E41A6E0
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jnz	short loc_6E41A6E0
		mov	eax, [ebx+20h]
		mov	[esp+38h+dwErrCode], ebx
		call	eax
		test	eax, eax
		js	short loc_6E41A6D0
		jz	short loc_6E41A690
		mov	[ebp+arg_8], edi
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	SSL_peek
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A690:				; CODE XREF: sub_6E41A630+44j
		mov	[esp+38h+var_28], 9Dh
		mov	[esp+38h+var_2C], offset aS23_lib_c ; "s23_lib.c"
		mov	[esp+38h+var_30], 0E5h
		mov	[esp+38h+var_34], 0EDh
		mov	[esp+38h+dwErrCode], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E41A6D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A6D0:				; CODE XREF: sub_6E41A630+42j
					; sub_6E41A630+91j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A6E0:				; CODE XREF: sub_6E41A630+2Bj
					; sub_6E41A630+36j
		mov	[esp+38h+dwErrCode], ebx
		call	sub_6E42FF90
		mov	eax, 0FFFFFFFFh
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6E41A630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E41A700	proc near		; DATA XREF: .rdata:6E44C300o
					; .rdata:6E44C3E0o ...

dwErrCode	= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		mov	edi, [ebp+arg_8]
		mov	[esp+38h+dwErrCode], 0 ; dwErrCode
		call	ds:SetLastError
		push	edx
		mov	[esp+38h+dwErrCode], ebx
		call	SSL_state
		test	ah, 30h
		jz	loc_6E41A7B0
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jnz	short loc_6E41A7B0
		mov	eax, [ebx+20h]
		mov	[esp+38h+dwErrCode], ebx
		call	eax
		test	eax, eax
		js	short loc_6E41A7A0
		jz	short loc_6E41A760
		mov	[ebp+arg_8], edi
		mov	[ebp+arg_4], esi
		mov	[ebp+arg_0], ebx
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	SSL_write
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A760:				; CODE XREF: sub_6E41A700+44j
		mov	[esp+38h+var_28], 0B1h
		mov	[esp+38h+var_2C], offset aS23_lib_c ; "s23_lib.c"
		mov	[esp+38h+var_30], 0E5h
		mov	[esp+38h+var_34], 79h
		mov	[esp+38h+dwErrCode], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E41A7A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A7A0:				; CODE XREF: sub_6E41A700+42j
					; sub_6E41A700+91j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A7B0:				; CODE XREF: sub_6E41A700+2Bj
					; sub_6E41A700+36j
		mov	[esp+38h+dwErrCode], ebx
		call	sub_6E42FF90
		mov	eax, 0FFFFFFFFh
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6E41A700	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41A7D0	proc near		; CODE XREF: sub_6E4194A0+2F9p
					; sub_6E4194A0+675p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [esp+2Ch+arg_0]
		mov	eax, [esi+3Ch]
		mov	edi, [eax+4]
		mov	ebp, [esi+48h]
		mov	ebx, [esi+44h]
		jmp	short loc_6E41A7FF
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A7F0:				; CODE XREF: sub_6E41A7D0+4Ej
		mov	dword ptr [esi+18h], 1
		cmp	eax, ebx
		jz	short loc_6E41A830
		sub	ebx, eax
		add	ebp, eax

loc_6E41A7FF:				; CODE XREF: sub_6E41A7D0+17j
		mov	dword ptr [esi+18h], 2
		mov	eax, [esi+10h]
		mov	[esp+2Ch+var_24], ebx
		lea	edx, [edi+ebp]
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	BIO_write
		test	eax, eax
		jg	short loc_6E41A7F0
		mov	[esi+48h], ebp
		mov	[esi+44h], ebx
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A830:				; CODE XREF: sub_6E41A7D0+29j
		lea	eax, [ebp+ebx+0]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6E41A7D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41A840	proc near		; CODE XREF: sub_6E418840+E1p
					; sub_6E418840+3EBp ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_4]
		mov	eax, [ebx+50h]
		cmp	eax, esi
		jnb	short loc_6E41A8A0
		mov	edi, [ebx+4Ch]
		jmp	short loc_6E41A871
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A860:				; CODE XREF: sub_6E41A840+53j
		mov	dword ptr [ebx+18h], 1
		add	eax, [ebx+50h]
		mov	[ebx+50h], eax
		cmp	esi, eax
		jbe	short loc_6E41A895

loc_6E41A871:				; CODE XREF: sub_6E41A840+18j
		mov	dword ptr [ebx+18h], 3
		mov	edx, [ebx+0Ch]
		mov	ecx, esi
		sub	ecx, eax
		mov	[esp+1Ch+var_14], ecx
		add	eax, edi
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], edx
		call	BIO_read
		test	eax, eax
		jg	short loc_6E41A860

loc_6E41A895:				; CODE XREF: sub_6E41A840+2Fj
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A8A0:				; CODE XREF: sub_6E41A840+13j
		mov	eax, esi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_6E41A840	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41A8B0	proc near		; DATA XREF: .rdata:6E44C57Co
					; .rdata:6E44C5FCo ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 303h
		jz	short loc_6E41A8E0
		cmp	eax, 302h
		jz	short loc_6E41A8F0
		cmp	eax, 301h
		jnz	short loc_6E41A8D0
		mov	eax, offset dword_6E44C520
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A8D0:				; CODE XREF: sub_6E41A8B0+17j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A8E0:				; CODE XREF: sub_6E41A8B0+9j
		mov	eax, offset dword_6E44C620
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A8F0:				; CODE XREF: sub_6E41A8B0+10j
		mov	eax, offset dword_6E44C5A0
		retn
sub_6E41A8B0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 350. TLSv1_2_method

; =============== S U B	R O U T	I N E =======================================


		public TLSv1_2_method
TLSv1_2_method	proc near		; CODE XREF: sub_6E418740+20j
		mov	eax, offset dword_6E44C620
		retn
TLSv1_2_method	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 313. TLSv1_1_method

; =============== S U B	R O U T	I N E =======================================


		public TLSv1_1_method
TLSv1_1_method	proc near		; CODE XREF: sub_6E418740:loc_6E4187A0j
		mov	eax, offset dword_6E44C5A0
		retn
TLSv1_1_method	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 170. TLSv1_method

; =============== S U B	R O U T	I N E =======================================


		public TLSv1_method
TLSv1_method	proc near		; CODE XREF: sub_6E418740:loc_6E418790j
		mov	eax, offset dword_6E44C520
		retn
TLSv1_method	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41A930	proc near		; DATA XREF: .rdata:6E44C6FCo
					; .rdata:6E44C77Co ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 303h
		jz	short loc_6E41A960
		cmp	eax, 302h
		jz	short loc_6E41A970
		cmp	eax, 301h
		jnz	short loc_6E41A950
		mov	eax, offset dword_6E44C6A0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A950:				; CODE XREF: sub_6E41A930+17j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A960:				; CODE XREF: sub_6E41A930+9j
		mov	eax, offset dword_6E44C7A0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A970:				; CODE XREF: sub_6E41A930+10j
		mov	eax, offset dword_6E44C720
		retn
sub_6E41A930	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 343. TLSv1_2_server_method

; =============== S U B	R O U T	I N E =======================================


		public TLSv1_2_server_method
TLSv1_2_server_method proc near		; CODE XREF: sub_6E4187C0+20j
					; sub_6E418840+31Cp
		mov	eax, offset dword_6E44C7A0
		retn
TLSv1_2_server_method endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 315. TLSv1_1_server_method

; =============== S U B	R O U T	I N E =======================================


		public TLSv1_1_server_method
TLSv1_1_server_method proc near		; CODE XREF: sub_6E4187C0:loc_6E418820j
					; sub_6E418840:loc_6E418F06p
		mov	eax, offset dword_6E44C720
		retn
TLSv1_1_server_method endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 171. TLSv1_server_method

; =============== S U B	R O U T	I N E =======================================


		public TLSv1_server_method
TLSv1_server_method proc near		; CODE XREF: sub_6E4187C0:loc_6E418810j
					; sub_6E418840:loc_6E418EFCp
		mov	eax, offset dword_6E44C6A0
		retn
TLSv1_server_method endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41A9B0	proc near		; DATA XREF: .rdata:6E44C87Co
					; .rdata:6E44C8FCo ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 303h
		jz	short loc_6E41A9E0
		cmp	eax, 302h
		jz	short loc_6E41A9F0
		cmp	eax, 301h
		jnz	short loc_6E41A9D0
		mov	eax, offset dword_6E44C820
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A9D0:				; CODE XREF: sub_6E41A9B0+17j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A9E0:				; CODE XREF: sub_6E41A9B0+9j
		mov	eax, offset dword_6E44C920
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41A9F0:				; CODE XREF: sub_6E41A9B0+10j
		mov	eax, offset dword_6E44C8A0
		retn
sub_6E41A9B0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 341. TLSv1_2_client_method

; =============== S U B	R O U T	I N E =======================================


		public TLSv1_2_client_method
TLSv1_2_client_method proc near		; CODE XREF: sub_6E419430+20j
					; sub_6E4194A0+E27p
		mov	eax, offset dword_6E44C920
		retn
TLSv1_2_client_method endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 314. TLSv1_1_client_method

; =============== S U B	R O U T	I N E =======================================


		public TLSv1_1_client_method
TLSv1_1_client_method proc near		; CODE XREF: sub_6E419430:loc_6E419490j
					; sub_6E4194A0+CC8p
		mov	eax, offset dword_6E44C8A0
		retn
TLSv1_1_client_method endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 172. TLSv1_client_method

; =============== S U B	R O U T	I N E =======================================


		public TLSv1_client_method
TLSv1_client_method proc near		; CODE XREF: sub_6E419430:loc_6E419480j
					; sub_6E4194A0+DF8p
		mov	eax, offset dword_6E44C820
		retn
TLSv1_client_method endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41AA30	proc near		; CODE XREF: sub_6E41D840+155p

Buf1		= dword	ptr -1FCh
Buf2		= dword	ptr -1F8h
Size		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1C4		= dword	ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1B8		= byte ptr -1B8h
var_178		= byte ptr -178h
var_EC		= dword	ptr -0ECh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1ECh
		mov	edi, [eax+170h]
		cmp	ecx, 2Fh
		jg	short loc_6E41AA60

loc_6E41AA45:				; CODE XREF: sub_6E41AA30+A4j
					; sub_6E41AA30+194j ...
		mov	eax, 2

loc_6E41AA4A:				; CODE XREF: sub_6E41AA30+15Cj
					; sub_6E41AA30+312j ...
		add	esp, 1ECh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41AA60:				; CODE XREF: sub_6E41AA30+13j
		mov	[esp+1FCh+var_1D4], ecx
		mov	[esp+1FCh+var_1D8], edx
		mov	[esp+1FCh+var_1D0], eax
		lea	ebx, [esp+1FCh+var_EC]
		mov	[esp+1FCh+Buf1], ebx
		call	HMAC_CTX_init
		lea	esi, [esp+1FCh+var_178]
		mov	[esp+1FCh+Buf1], esi
		call	EVP_CIPHER_CTX_init
		mov	ebp, [edi+138h]
		test	ebp, ebp
		mov	edx, [esp+1FCh+var_1D8]
		mov	ecx, [esp+1FCh+var_1D4]
		jz	loc_6E41ABA0
		mov	[esp+1FCh+var_1E8], 0
		mov	[esp+1FCh+var_1EC], ebx
		mov	[esp+1FCh+var_1F0], esi
		lea	edi, [edx+10h]
		mov	[esp+1FCh+Size], edi
		mov	[esp+1FCh+Buf2], edx
		mov	eax, [esp+1FCh+var_1D0]
		mov	[esp+1FCh+Buf1], eax
		call	ebp
		test	eax, eax
		js	loc_6E41ADB9
		mov	edx, [esp+1FCh+var_1D8]
		mov	ecx, [esp+1FCh+var_1D4]
		jz	loc_6E41AA45
		cmp	eax, 2
		setz	al
		and	eax, 0FFh
		mov	[esp+1FCh+var_1D0], eax

loc_6E41AAE9:				; CODE XREF: sub_6E41AA30+213j
		mov	[esp+1FCh+var_1D4], ecx
		mov	[esp+1FCh+var_1D8], edx
		mov	eax, [esp+1FCh+var_EC]
		mov	[esp+1FCh+Buf1], eax
		call	EVP_MD_size
		mov	[esp+1FCh+var_1BC], eax
		test	eax, eax
		js	loc_6E41AD5C
		mov	ecx, [esp+1FCh+var_1D4]
		mov	edi, ecx
		sub	edi, eax
		mov	[esp+1FCh+Size], edi
		mov	edx, [esp+1FCh+var_1D8]
		mov	[esp+1FCh+Buf2], edx
		mov	[esp+1FCh+Buf1], ebx
		call	HMAC_Update
		test	eax, eax
		jle	loc_6E41AD5C
		mov	[esp+1FCh+Size], 0
		lea	ebp, [esp+1FCh+var_1B8]
		mov	[esp+1FCh+Buf2], ebp
		mov	[esp+1FCh+Buf1], ebx
		call	HMAC_Final
		test	eax, eax
		jle	loc_6E41AD5C
		mov	[esp+1FCh+Buf1], ebx
		call	HMAC_CTX_cleanup
		mov	eax, [esp+1FCh+var_1BC]
		mov	[esp+1FCh+Size], eax
		mov	edx, [esp+1FCh+var_1D8]
		lea	eax, [edx+edi]
		mov	[esp+1FCh+Buf2], eax
		mov	[esp+1FCh+Buf1], ebp
		call	CRYPTO_memcmp
		test	eax, eax
		mov	edx, [esp+1FCh+var_1D8]
		jz	loc_6E41AC50
		mov	[esp+1FCh+Buf1], esi
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, 2
		jmp	loc_6E41AA4A
; ---------------------------------------------------------------------------
		jmp	short loc_6E41ABA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41ABA0:				; CODE XREF: sub_6E41AA30+6Aj
					; sub_6E41AA30+161j
		mov	[esp+1FCh+var_1D4], ecx
		mov	[esp+1FCh+Size], 10h ; Size
		lea	eax, [edi+108h]
		mov	[esp+1FCh+Buf2], eax ; Buf2
		mov	[esp+1FCh+Buf1], edx ; Buf1
		mov	[esp+1FCh+var_1D8], edx
		call	memcmp
		test	eax, eax
		jnz	loc_6E41AA45
		call	EVP_sha256
		mov	[esp+1FCh+var_1EC], 0
		mov	[esp+1FCh+var_1F0], eax
		mov	[esp+1FCh+Size], 10h
		lea	eax, [edi+118h]
		mov	[esp+1FCh+Buf2], eax
		mov	[esp+1FCh+Buf1], ebx
		call	HMAC_Init_ex
		test	eax, eax
		jle	loc_6E41AD5C
		call	EVP_aes_128_cbc
		mov	edx, [esp+1FCh+var_1D8]
		lea	ebp, [edx+10h]
		mov	[esp+1FCh+var_1EC], ebp
		add	edi, 128h
		mov	[esp+1FCh+var_1F0], edi
		mov	[esp+1FCh+Size], 0
		mov	[esp+1FCh+Buf2], eax
		mov	[esp+1FCh+Buf1], esi
		call	EVP_DecryptInit_ex
		test	eax, eax
		jle	loc_6E41AD5C
		mov	[esp+1FCh+var_1D0], 0
		mov	ecx, [esp+1FCh+var_1D4]
		mov	edx, [esp+1FCh+var_1D8]
		jmp	loc_6E41AAE9
; ---------------------------------------------------------------------------
		align 10h

loc_6E41AC50:				; CODE XREF: sub_6E41AA30+149j
		mov	[esp+1FCh+var_1D8], edx
		mov	[esp+1FCh+Buf1], esi
		call	EVP_CIPHER_CTX_iv_length
		mov	edx, [esp+1FCh+var_1D8]
		lea	eax, [edx+eax+10h]
		mov	[esp+1FCh+var_1C4], eax
		mov	[esp+1FCh+Buf1], esi
		call	EVP_CIPHER_CTX_iv_length
		sub	edi, eax
		lea	ebx, [edi-10h]
		mov	[esp+1FCh+Size], 913h
		mov	[esp+1FCh+Buf2], offset	aT1_lib_c ; "t1_lib.c"
		mov	[esp+1FCh+Buf1], ebx
		call	CRYPTO_malloc
		mov	edi, eax
		test	eax, eax
		jz	loc_6E41ADE8
		mov	[esp+1FCh+var_1EC], ebx
		mov	eax, [esp+1FCh+var_1C4]
		mov	[esp+1FCh+var_1F0], eax
		lea	eax, [esp+1FCh+var_1C0]
		mov	[esp+1FCh+Size], eax
		mov	[esp+1FCh+Buf2], edi
		mov	[esp+1FCh+Buf1], esi
		call	EVP_DecryptUpdate
		test	eax, eax
		jle	loc_6E41ADE8
		lea	eax, [esp+1FCh+var_1BC]
		mov	[esp+1FCh+Size], eax
		mov	eax, [esp+1FCh+var_1C0]
		add	eax, edi
		mov	[esp+1FCh+Buf2], eax
		mov	[esp+1FCh+Buf1], esi
		call	EVP_DecryptFinal
		test	eax, eax
		jle	short loc_6E41AD47
		mov	eax, [esp+1FCh+var_1BC]
		add	[esp+1FCh+var_1C0], eax
		mov	[esp+1FCh+Buf1], esi
		call	EVP_CIPHER_CTX_cleanup
		mov	[esp+1FCh+var_1C4], edi
		mov	eax, [esp+1FCh+var_1C0]
		mov	[esp+1FCh+Size], eax
		lea	eax, [esp+1FCh+var_1C4]
		mov	[esp+1FCh+Buf2], eax
		mov	[esp+1FCh+Buf1], 0
		call	d2i_SSL_SESSION
		mov	ebx, eax
		mov	[esp+1FCh+Buf1], edi
		call	CRYPTO_free
		test	ebx, ebx
		jz	loc_6E41ADC3
		mov	eax, [esp+1FCh+arg_4]
		test	eax, eax
		jnz	short loc_6E41AD76
		xor	eax, eax

loc_6E41AD2C:				; CODE XREF: sub_6E41AA30+384j
		mov	[ebx+44h], eax
		mov	eax, [esp+1FCh+arg_8]
		mov	[eax], ebx
		cmp	[esp+1FCh+var_1D0], 1
		sbb	eax, eax
		add	eax, 4
		jmp	loc_6E41AA4A
; ---------------------------------------------------------------------------

loc_6E41AD47:				; CODE XREF: sub_6E41AA30+2ABj
		mov	[esp+1FCh+Buf1], esi
		call	EVP_CIPHER_CTX_cleanup
		mov	[esp+1FCh+Buf1], edi
		call	CRYPTO_free
		jmp	loc_6E41AA45
; ---------------------------------------------------------------------------

loc_6E41AD5C:				; CODE XREF: sub_6E41AA30+D6j
					; sub_6E41AA30+FAj ...
		mov	[esp+1FCh+Buf1], esi
		call	EVP_CIPHER_CTX_cleanup
		mov	[esp+1FCh+Buf1], ebx
		call	HMAC_CTX_cleanup
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E41AA4A
; ---------------------------------------------------------------------------

loc_6E41AD76:				; CODE XREF: sub_6E41AA30+2F8j
		lea	edx, [ebx+48h]
		mov	eax, [esp+1FCh+arg_4]
		mov	edi, edx
		mov	esi, [esp+1FCh+arg_0]
		cmp	eax, 4
		jnb	short loc_6E41ADD2

loc_6E41AD8E:				; CODE XREF: sub_6E41AA30+3B6j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E41AD9F
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E41AD9F:				; CODE XREF: sub_6E41AA30+362j
		test	al, 1
		jz	short loc_6E41ADAD
		mov	al, [esi+edx]
		mov	byte ptr [esp+1FCh+var_1D8], al
		mov	[edi+edx], al

loc_6E41ADAD:				; CODE XREF: sub_6E41AA30+371j
		mov	eax, [esp+1FCh+arg_4]
		jmp	loc_6E41AD2C
; ---------------------------------------------------------------------------

loc_6E41ADB9:				; CODE XREF: sub_6E41AA30+96j
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E41AA4A
; ---------------------------------------------------------------------------

loc_6E41ADC3:				; CODE XREF: sub_6E41AA30+2E9j
		call	ERR_clear_error
		mov	eax, 2
		jmp	loc_6E41AA4A
; ---------------------------------------------------------------------------

loc_6E41ADD2:				; CODE XREF: sub_6E41AA30+35Cj
		and	dl, 1
		jnz	short loc_6E41AE09

loc_6E41ADD7:				; CODE XREF: sub_6E41AA30+3F7j
		test	edi, 2
		jnz	short loc_6E41ADF8

loc_6E41ADDF:				; CODE XREF: sub_6E41AA30+3D7j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E41AD8E
; ---------------------------------------------------------------------------

loc_6E41ADE8:				; CODE XREF: sub_6E41AA30+261j
					; sub_6E41AA30+289j
		mov	[esp+1FCh+Buf1], esi
		call	EVP_CIPHER_CTX_cleanup
		or	eax, 0FFFFFFFFh
		jmp	loc_6E41AA4A
; ---------------------------------------------------------------------------

loc_6E41ADF8:				; CODE XREF: sub_6E41AA30+3ADj
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E41ADDF
; ---------------------------------------------------------------------------

loc_6E41AE09:				; CODE XREF: sub_6E41AA30+3A5j
		mov	al, [esi]
		mov	byte ptr [esp+1FCh+var_1D8], al
		mov	[ebx+48h], al
		lea	edi, [ebx+49h]
		mov	eax, [esp+1FCh+arg_0]
		lea	esi, [eax+1]
		mov	eax, [esp+1FCh+arg_4]
		dec	eax
		jmp	short loc_6E41ADD7
sub_6E41AA30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41AE30	proc near		; DATA XREF: .rdata:6E44C580o
					; .rdata:6E44C600o ...
		mov	eax, 1C20h
		retn
sub_6E41AE30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41AE40	proc near		; DATA XREF: .rdata:6E44C2E4o
					; .rdata:6E44C3C4o ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E40E430
		test	eax, eax
		jz	short loc_6E41AE64
		mov	eax, [ebx+8]
		mov	eax, [eax+8]
		mov	[esp+1Ch+var_1C], ebx
		call	eax
		mov	eax, 1

loc_6E41AE64:				; CODE XREF: sub_6E41AE40+12j
		add	esp, 18h
		pop	ebx
		retn
sub_6E41AE40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41AE70	proc near		; DATA XREF: .rdata:6E44C2ECo
					; .rdata:6E44C3CCo ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+15Ch]
		test	eax, eax
		jz	short loc_6E41AE8A
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free

loc_6E41AE8A:				; CODE XREF: sub_6E41AE70+10j
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	sub_6E40E530
sub_6E41AE70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41AEA0	proc near		; DATA XREF: .rdata:6E44C2E8o
					; .rdata:6E44C3C8o ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E40E640
		mov	eax, [ebx+8]
		mov	eax, [eax]
		mov	[ebx], eax
		add	esp, 18h
		pop	ebx
		retn
sub_6E41AEA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41AEC0	proc near		; CODE XREF: sub_6E408AD0+D82p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		dec	eax
		cmp	eax, 18h
		ja	short loc_6E41AEE0
		mov	eax, ds:dword_6E44CAC0[eax*4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41AEE0:				; CODE XREF: sub_6E41AEC0+8j
		xor	eax, eax
		retn
sub_6E41AEC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41AEF0	proc near		; CODE XREF: sub_6E402830+3CAp
					; sub_6E40F970+473p ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		cmp	edx, 2D2h
		jz	loc_6E41B170
		jg	short loc_6E41AF50
		cmp	edx, 2C7h
		jz	loc_6E41B180
		jle	loc_6E41AFA0
		cmp	edx, 2CAh
		jz	loc_6E41B160
		jle	loc_6E41B000
		cmp	edx, 2CCh
		jz	loc_6E41B130
		jl	loc_6E41B0B0
		mov	eax, 1
		cmp	edx, 2D1h
		jnz	loc_6E41B060

locret_6E41AF49:			; CODE XREF: sub_6E41AEF0+167j
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41AF50:				; CODE XREF: sub_6E41AEF0+10j
		cmp	edx, 2D8h
		jz	loc_6E41B150
		jle	short loc_6E41AFD0
		cmp	edx, 2DBh
		jz	loc_6E41B190
		jle	loc_6E41B020
		cmp	edx, 2DDh
		jz	loc_6E41B140
		jl	loc_6E41B0D0
		mov	eax, 0Eh
		cmp	edx, 2DEh
		jnz	loc_6E41B060
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41AFA0:				; CODE XREF: sub_6E41AEF0+1Ej
		cmp	edx, 2C4h
		jz	loc_6E41B110
		jg	loc_6E41B070
		cmp	edx, 199h
		jz	loc_6E41B090
		mov	eax, 17h
		cmp	edx, 19Fh
		jnz	loc_6E41B060
		retn
; ---------------------------------------------------------------------------

loc_6E41AFD0:				; CODE XREF: sub_6E41AEF0+6Cj
		cmp	edx, 2D5h
		jz	loc_6E41B100
		jg	short loc_6E41B040
		cmp	edx, 2D3h
		jz	loc_6E41B0A0
		mov	eax, 4
		cmp	edx, 2D4h
		jnz	short loc_6E41B060
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B000:				; CODE XREF: sub_6E41AEF0+30j
		cmp	edx, 2C8h
		jz	loc_6E41B0C0
		mov	eax, 15h
		cmp	edx, 2C9h
		jnz	short loc_6E41B060
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B020:				; CODE XREF: sub_6E41AEF0+7Aj
		cmp	edx, 2D9h
		jz	loc_6E41B120
		mov	eax, 0Ah
		cmp	edx, 2DAh
		jnz	short loc_6E41B060
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B040:				; CODE XREF: sub_6E41AEF0+ECj
		cmp	edx, 2D6h
		jz	loc_6E41B0F0
		mov	eax, 7
		cmp	edx, 2D7h
		jz	locret_6E41AF49
		lea	esi, [esi+0]

loc_6E41B060:				; CODE XREF: sub_6E41AEF0+53j
					; sub_6E41AEF0+9Dj ...
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B070:				; CODE XREF: sub_6E41AEF0+BCj
		cmp	edx, 2C5h
		jz	short loc_6E41B0E0
		mov	eax, 11h
		cmp	edx, 2C6h
		jnz	short loc_6E41B060
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B090:				; CODE XREF: sub_6E41AEF0+C8j
		mov	eax, 13h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B0A0:				; CODE XREF: sub_6E41AEF0+F4j
		mov	eax, 3
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B0B0:				; CODE XREF: sub_6E41AEF0+42j
		mov	eax, 18h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B0C0:				; CODE XREF: sub_6E41AEF0+116j
		mov	eax, 14h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B0D0:				; CODE XREF: sub_6E41AEF0+8Cj
		mov	eax, 0Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B0E0:				; CODE XREF: sub_6E41AEF0+186j
		mov	eax, 10h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B0F0:				; CODE XREF: sub_6E41AEF0+156j
		mov	eax, 6
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B100:				; CODE XREF: sub_6E41AEF0+E6j
		mov	eax, 5
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B110:				; CODE XREF: sub_6E41AEF0+B6j
		mov	eax, 0Fh
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B120:				; CODE XREF: sub_6E41AEF0+136j
		mov	eax, 9
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B130:				; CODE XREF: sub_6E41AEF0+3Cj
		mov	eax, 19h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B140:				; CODE XREF: sub_6E41AEF0+86j
		mov	eax, 0Dh
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B150:				; CODE XREF: sub_6E41AEF0+66j
		mov	eax, 8
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B160:				; CODE XREF: sub_6E41AEF0+2Aj
		mov	eax, 16h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B170:				; CODE XREF: sub_6E41AEF0+Aj
		mov	eax, 2
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B180:				; CODE XREF: sub_6E41AEF0+18j
		mov	eax, 12h
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B190:				; CODE XREF: sub_6E41AEF0+74j
		mov	eax, 0Bh
		retn
sub_6E41AEF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41B1A0	proc near		; CODE XREF: sub_6E403800+2D9p

var_A		= byte ptr -0Ah
arg_3		= dword	ptr  7

		push	edi
		push	esi
		sub	esp, 1
		mov	edi, [esp+0Ah+arg_3]
		test	edi, edi
		jz	short loc_6E41B1DC
		mov	esi, offset byte_6E44CA06
		mov	eax, 1Eh
		test	edi, 1
		jnz	loc_6E41B250

loc_6E41B1C3:				; CODE XREF: sub_6E41B1A0+C2j
		test	edi, 2
		jnz	short loc_6E41B230

loc_6E41B1CB:				; CODE XREF: sub_6E41B1A0+9Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	short loc_6E41B210
		test	al, 1
		jnz	short loc_6E41B1F0

loc_6E41B1DC:				; CODE XREF: sub_6E41B1A0+Bj
					; sub_6E41B1A0+7Dj
		mov	eax, 1Eh
		add	esp, 1
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B1F0:				; CODE XREF: sub_6E41B1A0+3Aj
					; sub_6E41B1A0+7Fj
		mov	al, [esi+edx]
		mov	[esp+0Ah+var_A], al
		mov	[edi+edx], al
		mov	eax, 1Eh
		add	esp, 1
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B210:				; CODE XREF: sub_6E41B1A0+36j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	short loc_6E41B1DC
		jmp	short loc_6E41B1F0
; ---------------------------------------------------------------------------
		jmp	short loc_6E41B230
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B230:				; CODE XREF: sub_6E41B1A0+29j
					; sub_6E41B1A0+81j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E41B1CB
; ---------------------------------------------------------------------------
		jmp	short loc_6E41B250
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B250:				; CODE XREF: sub_6E41B1A0+1Dj
					; sub_6E41B1A0+A1j
		mov	al, ds:byte_6E44CA06
		mov	[edi], al
		inc	edi
		mov	esi, offset byte_6E44CA07
		mov	eax, 1Dh
		jmp	loc_6E41B1C3
sub_6E41B1A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41B270	proc near		; CODE XREF: sub_6E407680+1D5p
					; sub_6E4194A0+9E9p ...

Str		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	ebp, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_24], ebp
		cmp	dword ptr [ebx+110h], 300h
		jz	loc_6E41B850

loc_6E41B293:				; CODE XREF: sub_6E41B270+5EBj
		lea	esi, [ebp+2]
		mov	[esp+4Ch+var_24], esi
		cmp	esi, [esp+4Ch+arg_8]
		jnb	loc_6E41B7DC
		mov	eax, [ebx+120h]
		test	eax, eax
		jz	loc_6E41B342
		mov	edx, [esp+4Ch+arg_8]
		sub	edx, esi
		mov	esi, edx
		sub	esi, 9
		js	loc_6E41B7DC
		mov	[esp+4Ch+Str], eax ; Str
		call	strlen
		cmp	eax, esi
		ja	loc_6E41B7DC
		mov	byte ptr [ebp+2], 0
		mov	byte ptr [ebp+3], 0
		lea	edx, [eax+5]
		shr	edx, 8
		mov	[ebp+4], dl
		lea	edx, [eax+5]
		mov	[ebp+5], dl
		lea	edx, [eax+3]
		shr	edx, 8
		mov	[ebp+6], dl
		lea	edx, [eax+3]
		mov	[ebp+7], dl
		mov	byte ptr [ebp+8], 0
		mov	edx, eax
		shr	edx, 8
		mov	[ebp+9], dl
		mov	[ebp+0Ah], al
		lea	edi, [ebp+0Bh]
		mov	[esp+4Ch+var_34], edi
		mov	[esp+4Ch+var_24], edi
		mov	edx, eax
		mov	esi, [ebx+120h]
		cmp	eax, 4
		jnb	loc_6E41B820
		xor	ecx, ecx
		test	dl, 2
		jnz	loc_6E41B800

loc_6E41B32F:				; CODE XREF: sub_6E41B270+5D4j
		and	edx, 1
		jnz	loc_6E41B7F0

loc_6E41B338:				; CODE XREF: sub_6E41B270+58Aj
					; sub_6E41B270+59Ej
		mov	esi, [esp+4Ch+var_34]
		add	esi, eax
		mov	[esp+4Ch+var_24], esi

loc_6E41B342:				; CODE XREF: sub_6E41B270+3Cj
		mov	eax, [ebx+190h]
		test	eax, eax
		jnz	loc_6E41B870

loc_6E41B350:				; CODE XREF: sub_6E41B270+6A1j
		mov	eax, [ebx+1A4h]
		test	eax, eax
		jz	loc_6E41B401
		mov	[esp+4Ch+Str], eax ; Str
		call	strlen
		cmp	eax, 0FFh
		jg	loc_6E41B7B0
		test	eax, eax
		jz	loc_6E41B7B0
		mov	edx, [esp+4Ch+arg_8]
		sub	edx, esi
		sub	edx, 5
		cmp	edx, eax
		js	loc_6E41B7DC
		mov	byte ptr [esi],	0
		mov	edx, [esp+4Ch+var_24]
		mov	byte ptr [edx+1], 0Ch
		mov	ecx, [esp+4Ch+var_24]
		lea	edx, [ecx+2]
		mov	[esp+4Ch+var_24], edx
		lea	edx, [eax+1]
		sar	edx, 8
		mov	[ecx+2], dl
		lea	ecx, [eax+1]
		mov	edx, [esp+4Ch+var_24]
		mov	[edx+1], cl
		mov	edx, [esp+4Ch+var_24]
		lea	ecx, [edx+3]
		mov	[esp+4Ch+var_24], ecx
		mov	[edx+2], al
		mov	edx, eax
		mov	edi, [esp+4Ch+var_24]
		mov	esi, [ebx+1A4h]
		cmp	eax, 4
		jnb	loc_6E41BA10

loc_6E41B3D6:				; CODE XREF: sub_6E41B270+7BFj
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_6E41B3E8
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E41B3E8:				; CODE XREF: sub_6E41B270+16Bj
		and	edx, 1
		jz	short loc_6E41B3F7
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+4Ch+var_34], dl
		mov	[edi+ecx], dl

loc_6E41B3F7:				; CODE XREF: sub_6E41B270+17Bj
		add	eax, [esp+4Ch+var_24]
		mov	esi, eax
		mov	[esp+4Ch+var_24], eax

loc_6E41B401:				; CODE XREF: sub_6E41B270+E8j
		mov	eax, [ebx+148h]
		test	eax, eax
		jz	loc_6E41B4B6
		mov	eax, [esp+4Ch+arg_8]
		sub	eax, esi
		sub	eax, 5
		js	loc_6E41B7DC
		mov	edx, [ebx+144h]
		cmp	edx, eax
		ja	loc_6E41B7DC
		cmp	edx, 0FFh
		ja	loc_6E41BE10
		mov	byte ptr [esi],	0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 0Bh
		mov	edx, [esp+4Ch+var_24]
		lea	eax, [edx+2]
		mov	[esp+4Ch+var_24], eax
		mov	eax, [ebx+144h]
		inc	eax
		shr	eax, 8
		mov	[edx+2], al
		mov	al, [ebx+144h]
		inc	eax
		mov	edx, [esp+4Ch+var_24]
		mov	[edx+1], al
		mov	eax, [esp+4Ch+var_24]
		lea	edx, [eax+3]
		mov	[esp+4Ch+var_24], edx
		mov	edx, [ebx+144h]
		mov	[eax+2], dl
		mov	eax, [ebx+144h]
		mov	edi, [esp+4Ch+var_24]
		mov	esi, [ebx+148h]
		cmp	eax, 4
		jnb	loc_6E41B980
		xor	edx, edx
		test	al, 2
		jnz	loc_6E41B920

loc_6E41B4A0:				; CODE XREF: sub_6E41B270+733j
		test	al, 1
		jnz	loc_6E41B933

loc_6E41B4A8:				; CODE XREF: sub_6E41B270+6BDj
					; sub_6E41B270+6CDj
		mov	esi, [esp+4Ch+var_24]
		add	esi, [ebx+144h]
		mov	[esp+4Ch+var_24], esi

loc_6E41B4B6:				; CODE XREF: sub_6E41B270+199j
		mov	eax, [ebx+150h]
		test	eax, eax
		jz	loc_6E41B582
		mov	eax, [esp+4Ch+arg_8]
		sub	eax, esi
		sub	eax, 6
		js	loc_6E41B7DC
		mov	edx, [ebx+14Ch]
		cmp	edx, eax
		ja	loc_6E41B7DC
		cmp	edx, 0FFFCh
		ja	loc_6E41BE20
		mov	byte ptr [esi],	0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 0Ah
		mov	edx, [esp+4Ch+var_24]
		lea	eax, [edx+2]
		mov	[esp+4Ch+var_24], eax
		mov	eax, [ebx+14Ch]
		add	eax, 2
		shr	eax, 8
		mov	[edx+2], al
		mov	al, [ebx+14Ch]
		add	eax, 2
		mov	edx, [esp+4Ch+var_24]
		mov	[edx+1], al
		mov	edx, [esp+4Ch+var_24]
		lea	eax, [edx+2]
		mov	[esp+4Ch+var_24], eax
		mov	eax, [ebx+14Ch]
		shr	eax, 8
		mov	[edx+2], al
		mov	eax, [ebx+14Ch]
		mov	edx, [esp+4Ch+var_24]
		mov	[edx+1], al
		mov	edx, [esp+4Ch+var_24]
		lea	edi, [edx+2]
		mov	[esp+4Ch+var_24], edi
		mov	eax, [ebx+14Ch]
		mov	esi, [ebx+150h]
		cmp	eax, 4
		jnb	loc_6E41B9C0
		xor	edx, edx
		test	al, 2
		jnz	loc_6E41B960

loc_6E41B570:				; CODE XREF: sub_6E41B270+773j
		test	al, 1
		jnz	loc_6E41B950

loc_6E41B578:				; CODE XREF: sub_6E41B270+6EAj
					; sub_6E41B270+6FDj
		mov	eax, [ebx+14Ch]
		add	[esp+4Ch+var_24], eax

loc_6E41B582:				; CODE XREF: sub_6E41B270+24Ej
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 20h
		mov	[esp+4Ch+Str], ebx
		call	SSL_ctrl
		test	ah, 40h
		jnz	loc_6E41B62D
		mov	eax, [ebx+28h]
		test	eax, eax
		mov	esi, [ebx+0C0h]
		jnz	loc_6E41BB00
		test	esi, esi
		jz	loc_6E41BD50
		mov	eax, [esi+0E4h]
		test	eax, eax
		jz	loc_6E41BB08
		mov	edx, [esi+0E8h]

loc_6E41B5D8:				; CODE XREF: sub_6E41B270+92Fj
		test	edx, edx
		jz	loc_6E41BD50

loc_6E41B5E0:				; CODE XREF: sub_6E41B270+AF7j
		mov	eax, [esp+4Ch+var_24]
		mov	ecx, [esp+4Ch+arg_8]
		sub	ecx, eax
		sub	ecx, 4
		cmp	ecx, edx
		js	loc_6E41B7DC
		mov	byte ptr [eax],	0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 23h
		mov	eax, [esp+4Ch+var_24]
		lea	ecx, [eax+2]
		mov	[esp+4Ch+var_24], ecx
		mov	ecx, edx
		sar	ecx, 8
		mov	[eax+2], cl
		mov	eax, [esp+4Ch+var_24]
		mov	[eax+1], dl
		mov	ecx, [esp+4Ch+var_24]
		lea	edi, [ecx+2]
		mov	[esp+4Ch+var_24], edi
		test	edx, edx
		jnz	loc_6E41BD70

loc_6E41B62D:				; CODE XREF: sub_6E41B270+335j
					; sub_6E41B270+8ABj ...
		mov	eax, [ebx+110h]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	loc_6E41BA40

loc_6E41B641:				; CODE XREF: sub_6E41B270+7D5j
					; sub_6E41B270+87Fj
		cmp	dword ptr [ebx+128h], 1
		jz	loc_6E41BBB0

loc_6E41B64E:				; CODE XREF: sub_6E41B270+946j
					; sub_6E41B270+AD9j
		mov	eax, [esp+4Ch+var_24]

loc_6E41B652:				; CODE XREF: sub_6E41B270+ABDj
		mov	edx, [esp+4Ch+arg_8]
		sub	edx, eax
		cmp	edx, 4
		jle	loc_6E41B7DC
		mov	byte ptr [eax],	0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 0Fh
		mov	eax, [esp+4Ch+var_24]
		lea	edx, [eax+2]
		mov	[esp+4Ch+var_24], edx
		mov	byte ptr [eax+2], 0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 1
		mov	eax, [esp+4Ch+var_24]
		lea	edx, [eax+3]
		test	byte ptr [ebx+184h], 4
		mov	[esp+4Ch+var_24], edx
		jnz	loc_6E41B9B0
		mov	byte ptr [eax+2], 1

loc_6E41B69F:				; CODE XREF: sub_6E41B270+744j
		mov	eax, [ebx+0E4h]
		mov	edx, [eax+1ACh]
		test	edx, edx
		jz	short loc_6E41B6F6
		mov	eax, [ebx+58h]
		mov	eax, [eax+2B4h]
		test	eax, eax
		jnz	short loc_6E41B6F6
		mov	eax, [esp+4Ch+var_24]
		mov	edx, [esp+4Ch+arg_8]
		sub	edx, eax
		cmp	edx, 3
		jle	loc_6E41B7DC
		mov	byte ptr [eax],	33h
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 74h
		mov	eax, [esp+4Ch+var_24]
		lea	edx, [eax+2]
		mov	[esp+4Ch+var_24], edx
		mov	byte ptr [eax+2], 0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 0
		add	[esp+4Ch+var_24], 2

loc_6E41B6F6:				; CODE XREF: sub_6E41B270+43Dj
					; sub_6E41B270+44Aj
		mov	eax, [ebx+8]
		cmp	dword ptr [eax], 0FEFFh
		jz	loc_6E41BE40

loc_6E41B705:				; CODE XREF: sub_6E41B270+BDAj
		mov	eax, [esp+4Ch+var_24]

loc_6E41B709:				; CODE XREF: sub_6E41B270+C79j
		test	byte ptr [ebx+100h], 10h
		jz	loc_6E41B9F0
		mov	edx, [ebx+3Ch]
		mov	ecx, eax
		sub	ecx, [edx+4]
		cmp	dword ptr [ebx+34h], 1210h
		jz	loc_6E41BE30

loc_6E41B72B:				; CODE XREF: sub_6E41B270+BC3j
		lea	edx, [ecx-100h]
		cmp	edx, 0FFh
		ja	loc_6E41B9F0
		mov	edx, 200h
		sub	edx, ecx
		cmp	edx, 3
		jg	loc_6E41BDB0
		xor	edx, edx
		xor	ecx, ecx
		xor	ebx, ebx

loc_6E41B753:				; CODE XREF: sub_6E41B270+B50j
		mov	byte ptr [eax],	0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 15h
		mov	eax, [esp+4Ch+var_24]
		lea	esi, [eax+2]
		mov	[esp+4Ch+var_24], esi
		mov	[eax+2], bl
		mov	eax, [esp+4Ch+var_24]
		mov	[eax+1], cl
		mov	eax, [esp+4Ch+var_24]
		lea	edi, [eax+2]
		mov	[esp+4Ch+var_24], edi
		mov	ebx, edx
		cmp	edx, 4
		jnb	loc_6E41BEF0

loc_6E41B789:				; CODE XREF: sub_6E41B270+CA1j
		test	bl, 2
		jz	short loc_6E41B796
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E41B796:				; CODE XREF: sub_6E41B270+51Cj
		and	ebx, 1
		jz	short loc_6E41B79E
		mov	byte ptr [edi],	0

loc_6E41B79E:				; CODE XREF: sub_6E41B270+529j
		add	edx, [esp+4Ch+var_24]
		mov	eax, edx
		jmp	loc_6E41B9F2
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B7B0:				; CODE XREF: sub_6E41B270+FBj
					; sub_6E41B270+103j
		mov	[esp+4Ch+var_3C], 1BEh

loc_6E41B7B8:				; CODE XREF: sub_6E41B270+BA8j
					; sub_6E41B270+BB8j ...
		mov	[esp+4Ch+var_40], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+4Ch+var_44], 44h
		mov	[esp+4Ch+var_48], 115h
		mov	[esp+4Ch+Str], 14h
		call	ERR_put_error

loc_6E41B7DC:				; CODE XREF: sub_6E41B270+2Ej
					; sub_6E41B270+4Dj ...
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B7F0:				; CODE XREF: sub_6E41B270+C2j
					; sub_6E41B270+5A4j
		mov	dl, [esi+ecx]
		mov	[esp+4Ch+var_2D], dl
		mov	[edi+ecx], dl
		jmp	loc_6E41B338
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B800:				; CODE XREF: sub_6E41B270+B9j
					; sub_6E41B270+5DAj
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		and	edx, 1
		jz	loc_6E41B338
		jmp	short loc_6E41B7F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B820:				; CODE XREF: sub_6E41B270+AEj
		test	edi, 1
		jnz	loc_6E41BDD0

loc_6E41B82C:				; CODE XREF: sub_6E41B270+B6Ej
		test	edi, 2
		jnz	loc_6E41BDF0

loc_6E41B838:				; CODE XREF: sub_6E41B270+B8Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		xor	ecx, ecx
		test	dl, 2
		jz	loc_6E41B32F
		jmp	short loc_6E41B800
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B850:				; CODE XREF: sub_6E41B270+1Dj
		mov	eax, [ebx+58h]
		mov	eax, [eax+418h]
		test	eax, eax
		jnz	loc_6E41B293

loc_6E41B861:				; CODE XREF: sub_6E41B270+787j
		mov	eax, ebp
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B870:				; CODE XREF: sub_6E41B270+DAj
		mov	[esp+4Ch+var_40], 0
		lea	esi, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+Str], ebx
		call	sub_6E4457A0
		test	eax, eax
		jz	loc_6E41C01B
		mov	eax, [esp+4Ch+var_24]
		mov	edx, [esp+4Ch+arg_8]
		sub	edx, eax
		sub	edx, 4
		cmp	edx, [esp+4Ch+var_20]
		js	loc_6E41B7DC
		mov	byte ptr [eax],	0FFh
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 1
		mov	edx, [esp+4Ch+var_24]
		lea	eax, [edx+2]
		mov	[esp+4Ch+var_24], eax
		mov	eax, [esp+4Ch+var_20]
		sar	eax, 8
		mov	[edx+2], al
		mov	eax, [esp+4Ch+var_20]
		mov	edx, [esp+4Ch+var_24]
		mov	[edx+1], al
		mov	eax, [esp+4Ch+var_24]
		add	eax, 2
		mov	[esp+4Ch+var_24], eax
		mov	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+Str], ebx
		call	sub_6E4457A0
		test	eax, eax
		jz	loc_6E41C028
		mov	esi, [esp+4Ch+var_24]
		add	esi, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_24], esi
		jmp	loc_6E41B350
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B920:				; CODE XREF: sub_6E41B270+22Aj
					; sub_6E41B270+739j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E41B4A8

loc_6E41B933:				; CODE XREF: sub_6E41B270+232j
		mov	al, [esi+edx]
		mov	byte ptr [esp+4Ch+var_34], al
		mov	[edi+edx], al
		jmp	loc_6E41B4A8
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B950:				; CODE XREF: sub_6E41B270+302j
					; sub_6E41B270+703j
		mov	al, [esi+edx]
		mov	byte ptr [esp+4Ch+var_34], al
		mov	[edi+edx], al
		jmp	loc_6E41B578
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B960:				; CODE XREF: sub_6E41B270+2FAj
					; sub_6E41B270+779j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E41B578
		jmp	short loc_6E41B950
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B980:				; CODE XREF: sub_6E41B270+220j
		test	edi, 1
		jnz	loc_6E41BFB0

loc_6E41B98C:				; CODE XREF: sub_6E41B270+D47j
		test	edi, 2
		jnz	loc_6E41BFC0

loc_6E41B998:				; CODE XREF: sub_6E41B270+D5Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	loc_6E41B4A0
		jmp	loc_6E41B920
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B9B0:				; CODE XREF: sub_6E41B270+425j
		mov	byte ptr [eax+2], 2
		jmp	loc_6E41B69F
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B9C0:				; CODE XREF: sub_6E41B270+2F0j
		test	edi, 1
		jnz	loc_6E41C000

loc_6E41B9CC:				; CODE XREF: sub_6E41B270+D99j
		test	edi, 2
		jnz	loc_6E41BFE0

loc_6E41B9D8:				; CODE XREF: sub_6E41B270+D7Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	loc_6E41B570
		jmp	loc_6E41B960
; ---------------------------------------------------------------------------
		align 10h

loc_6E41B9F0:				; CODE XREF: sub_6E41B270+4A0j
					; sub_6E41B270+4C7j
		mov	edx, eax

loc_6E41B9F2:				; CODE XREF: sub_6E41B270+534j
		sub	edx, ebp
		sub	edx, 2
		jz	loc_6E41B861
		mov	ecx, edx
		sar	ecx, 8
		mov	[ebp+0], cl
		mov	[ebp+1], dl
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E41BA10:				; CODE XREF: sub_6E41B270+160j
		test	edi, 1
		jnz	loc_6E41BF80

loc_6E41BA1C:				; CODE XREF: sub_6E41B270+D19j
		test	edi, 2
		jnz	loc_6E41BF90

loc_6E41BA28:				; CODE XREF: sub_6E41B270+D2Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E41B3D6
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BA40:				; CODE XREF: sub_6E41B270+3CBj
		cmp	eax, 302h
		jle	loc_6E41B641
		mov	eax, [esp+4Ch+var_24]
		mov	edx, [esp+4Ch+arg_8]
		sub	edx, eax
		cmp	edx, 23h
		jbe	loc_6E41B7DC
		mov	byte ptr [eax],	0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 0Dh
		mov	eax, [esp+4Ch+var_24]
		lea	edx, [eax+2]
		mov	[esp+4Ch+var_24], edx
		mov	byte ptr [eax+2], 0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 20h
		mov	eax, [esp+4Ch+var_24]
		lea	edx, [eax+2]
		mov	[esp+4Ch+var_24], edx
		mov	byte ptr [eax+2], 0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 1Eh
		mov	edx, [esp+4Ch+var_24]
		lea	edi, [edx+2]
		mov	[esp+4Ch+var_24], edi
		mov	esi, offset byte_6E44CA06
		mov	eax, 1Eh
		test	edi, 1
		jnz	loc_6E41C049

loc_6E41BAB8:				; CODE XREF: sub_6E41B270+DEEj
		test	edi, 2
		jnz	loc_6E41C035

loc_6E41BAC4:				; CODE XREF: sub_6E41B270+DD4j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E41BADC
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E41BADC:				; CODE XREF: sub_6E41B270+85Fj
		test	al, 1
		jz	short loc_6E41BAEA
		mov	al, [esi+edx]
		mov	byte ptr [esp+4Ch+var_34], al
		mov	[edi+edx], al

loc_6E41BAEA:				; CODE XREF: sub_6E41B270+86Ej
		add	[esp+4Ch+var_24], 1Eh
		jmp	loc_6E41B641
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BB00:				; CODE XREF: sub_6E41B270+346j
		test	esi, esi
		jz	loc_6E41BD50

loc_6E41BB08:				; CODE XREF: sub_6E41B270+35Cj
		mov	eax, [ebx+15Ch]
		test	eax, eax
		jz	loc_6E41BD65
		mov	edi, [eax+4]
		test	edi, edi
		jz	loc_6E41B62D
		xor	edx, edx
		mov	dx, [eax]
		mov	[esp+4Ch+var_44], 20Bh
		mov	[esp+4Ch+var_48], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+4Ch+Str], edx
		mov	[esp+4Ch+var_34], edx
		call	CRYPTO_malloc
		mov	[esi+0E4h], eax
		mov	eax, [ebx+0C0h]
		mov	edi, [eax+0E4h]
		test	edi, edi
		jz	loc_6E41B7DC
		mov	ecx, [ebx+15Ch]
		mov	edx, [esp+4Ch+var_34]
		mov	eax, edx
		mov	esi, [ecx+4]
		cmp	edx, 4
		jnb	loc_6E41BF20

loc_6E41BB74:				; CODE XREF: sub_6E41B270+CCFj
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E41BB85
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E41BB85:				; CODE XREF: sub_6E41B270+908j
		test	al, 1
		jz	short loc_6E41BB93
		mov	al, [esi+ecx]
		mov	byte ptr [esp+4Ch+var_34], al
		mov	[edi+ecx], al

loc_6E41BB93:				; CODE XREF: sub_6E41B270+917j
		mov	eax, [ebx+0C0h]
		mov	[eax+0E8h], edx
		jmp	loc_6E41B5D8
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BBB0:				; CODE XREF: sub_6E41B270+3D8j
		cmp	dword ptr [ebx], 0FEFFh
		jz	loc_6E41B64E
		xor	esi, esi
		xor	edi, edi
		jmp	short loc_6E41BBFF
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BBD0:				; CODE XREF: sub_6E41B270+99Fj
		mov	eax, [ebx+130h]
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+Str], eax
		call	sk_value
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+Str], eax
		call	i2d_OCSP_RESPID
		test	eax, eax
		jle	loc_6E41B7DC
		lea	esi, [esi+eax+2]
		inc	edi

loc_6E41BBFF:				; CODE XREF: sub_6E41B270+950j
		mov	eax, [ebx+130h]
		mov	[esp+4Ch+Str], eax
		call	sk_num
		cmp	edi, eax
		jl	short loc_6E41BBD0
		mov	eax, [ebx+134h]
		test	eax, eax
		jz	loc_6E41C00E
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+Str], eax
		call	i2d_X509_EXTENSIONS
		mov	[esp+4Ch+var_34], eax
		test	eax, eax
		js	loc_6E41B7DC

loc_6E41BC3B:				; CODE XREF: sub_6E41B270+DA6j
		mov	edx, [esp+4Ch+var_24]
		mov	eax, [esp+4Ch+arg_8]
		sub	eax, edx
		sub	eax, 7
		mov	edi, [esp+4Ch+var_34]
		sub	eax, edi
		cmp	eax, esi
		js	loc_6E41B7DC
		mov	byte ptr [edx],	0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 5
		mov	edx, [esp+4Ch+var_24]
		lea	eax, [edx+2]
		mov	[esp+4Ch+var_24], eax
		mov	eax, edi
		add	eax, esi
		cmp	eax, 0FFF0h
		jg	loc_6E41B7DC
		add	eax, 5
		sar	eax, 8
		mov	[edx+2], al
		mov	eax, edi
		lea	edx, [esi+eax+5]
		mov	eax, [esp+4Ch+var_24]
		mov	[eax+1], dl
		mov	eax, [esp+4Ch+var_24]
		lea	edx, [eax+3]
		mov	[esp+4Ch+var_24], edx
		mov	byte ptr [eax+2], 1
		mov	edx, esi
		sar	edx, 8
		mov	eax, [esp+4Ch+var_24]
		mov	[eax], dl
		mov	eax, [esp+4Ch+var_24]
		mov	ecx, esi
		mov	[eax+1], cl
		add	[esp+4Ch+var_24], 2
		xor	esi, esi
		jmp	short loc_6E41BCF6
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BCC0:				; CODE XREF: sub_6E41B270+A96j
		mov	edi, [esp+4Ch+var_24]
		mov	eax, [ebx+130h]
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+Str], eax
		call	sk_value
		add	[esp+4Ch+var_24], 2
		lea	ecx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_48], ecx
		mov	[esp+4Ch+Str], eax
		call	i2d_OCSP_RESPID
		mov	edx, eax
		sar	edx, 8
		mov	[edi], dl
		mov	[edi+1], al
		inc	esi

loc_6E41BCF6:				; CODE XREF: sub_6E41B270+A4Bj
		mov	eax, [ebx+130h]
		mov	[esp+4Ch+Str], eax
		call	sk_num
		cmp	esi, eax
		jl	short loc_6E41BCC0
		mov	edi, [esp+4Ch+var_34]
		mov	edx, edi
		sar	edx, 8
		mov	eax, [esp+4Ch+var_24]
		mov	[eax], dl
		mov	eax, [esp+4Ch+var_24]
		mov	ecx, edi
		mov	[eax+1], cl
		mov	eax, [esp+4Ch+var_24]
		add	eax, 2
		mov	[esp+4Ch+var_24], eax
		test	edi, edi
		jz	loc_6E41B652
		mov	eax, [ebx+134h]
		lea	edx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+Str], eax
		call	i2d_X509_EXTENSIONS
		jmp	loc_6E41B64E
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BD50:				; CODE XREF: sub_6E41B270+34Ej
					; sub_6E41B270+36Aj ...
		mov	eax, [ebx+15Ch]
		test	eax, eax
		jz	short loc_6E41BD65
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	loc_6E41B62D

loc_6E41BD65:				; CODE XREF: sub_6E41B270+8A0j
					; sub_6E41B270+AE8j
		xor	edx, edx
		jmp	loc_6E41B5E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BD70:				; CODE XREF: sub_6E41B270+3B7j
		mov	esi, [ebx+0C0h]
		mov	eax, edx
		mov	esi, [esi+0E4h]
		cmp	edx, 4
		jnb	loc_6E41BF50

loc_6E41BD87:				; CODE XREF: sub_6E41B270+CFFj
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E41BD98
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E41BD98:				; CODE XREF: sub_6E41B270+B1Bj
		test	al, 1
		jz	short loc_6E41BDA6
		mov	al, [esi+ecx]
		mov	byte ptr [esp+4Ch+var_34], al
		mov	[edi+ecx], al

loc_6E41BDA6:				; CODE XREF: sub_6E41B270+B2Aj
		add	[esp+4Ch+var_24], edx
		jmp	loc_6E41B62D
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BDB0:				; CODE XREF: sub_6E41B270+4D7j
		mov	edx, 1FCh
		sub	edx, ecx
		mov	edi, edx
		shr	edi, 8
		mov	ebx, edi
		mov	cl, dl
		jmp	loc_6E41B753
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BDD0:				; CODE XREF: sub_6E41B270+5B6j
		mov	cl, [esi]
		mov	[ebp+0Bh], cl
		lea	edi, [ebp+0Ch]
		inc	esi
		lea	ecx, [eax-1]
		mov	edx, ecx
		jmp	loc_6E41B82C
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BDF0:				; CODE XREF: sub_6E41B270+5C2j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E41B838
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BE10:				; CODE XREF: sub_6E41B270+1C2j
		mov	[esp+4Ch+var_3C], 1E0h
		jmp	loc_6E41B7B8
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BE20:				; CODE XREF: sub_6E41B270+277j
		mov	[esp+4Ch+var_3C], 1F6h
		jmp	loc_6E41B7B8
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BE30:				; CODE XREF: sub_6E41B270+4B5j
		sub	ecx, 5
		jmp	loc_6E41B72B
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BE40:				; CODE XREF: sub_6E41B270+48Fj
		mov	[esp+4Ch+Str], ebx
		call	SSL_get_srtp_profiles
		test	eax, eax
		jz	loc_6E41B705
		mov	[esp+4Ch+var_40], 0
		lea	esi, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+Str], ebx
		call	sub_6E42F960
		mov	eax, [esp+4Ch+var_24]
		mov	edx, [esp+4Ch+arg_8]
		sub	edx, eax
		sub	edx, 4
		cmp	edx, [esp+4Ch+var_20]
		js	loc_6E41B7DC
		mov	byte ptr [eax],	0
		mov	eax, [esp+4Ch+var_24]
		mov	byte ptr [eax+1], 0Eh
		mov	edx, [esp+4Ch+var_24]
		lea	eax, [edx+2]
		mov	[esp+4Ch+var_24], eax
		mov	eax, [esp+4Ch+var_20]
		sar	eax, 8
		mov	[edx+2], al
		mov	eax, [esp+4Ch+var_20]
		mov	edx, [esp+4Ch+var_24]
		mov	[edx+1], al
		mov	eax, [esp+4Ch+var_24]
		add	eax, 2
		mov	[esp+4Ch+var_24], eax
		mov	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+Str], ebx
		call	sub_6E42F960
		test	eax, eax
		jnz	loc_6E41C0C7
		mov	eax, [esp+4Ch+var_24]
		add	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_24], eax
		jmp	loc_6E41B709
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BEF0:				; CODE XREF: sub_6E41B270+513j
		test	edi, 1
		jnz	loc_6E41C073

loc_6E41BEFC:				; CODE XREF: sub_6E41B270+E0Cj
		test	edi, 2
		jnz	loc_6E41C063

loc_6E41BF08:				; CODE XREF: sub_6E41B270+DFEj
		mov	ecx, ebx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E41B789
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BF20:				; CODE XREF: sub_6E41B270+8FEj
		test	edi, 1
		jnz	loc_6E41C095

loc_6E41BF2C:				; CODE XREF: sub_6E41B270+E2Ej
		test	edi, 2
		jnz	loc_6E41C081

loc_6E41BF38:				; CODE XREF: sub_6E41B270+E20j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E41BB74
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BF50:				; CODE XREF: sub_6E41B270+B11j
		test	edi, 1
		jnz	loc_6E41C0B7

loc_6E41BF5C:				; CODE XREF: sub_6E41B270+E52j
		test	edi, 2
		jnz	loc_6E41C0A3

loc_6E41BF68:				; CODE XREF: sub_6E41B270+E42j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E41BD87
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BF80:				; CODE XREF: sub_6E41B270+7A6j
		mov	cl, [esi]
		mov	[edi], cl
		inc	edi
		inc	esi
		lea	edx, [eax-1]
		jmp	loc_6E41BA1C
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BF90:				; CODE XREF: sub_6E41B270+7B2j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E41BA28
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BFB0:				; CODE XREF: sub_6E41B270+716j
		mov	cl, [esi]
		mov	[edi], cl
		inc	edi
		inc	esi
		dec	eax
		jmp	loc_6E41B98C
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BFC0:				; CODE XREF: sub_6E41B270+722j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E41B998
; ---------------------------------------------------------------------------
		align 10h

loc_6E41BFE0:				; CODE XREF: sub_6E41B270+762j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E41B9D8
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C000:				; CODE XREF: sub_6E41B270+756j
		mov	cl, [esi]
		mov	[edi], cl
		lea	edi, [edx+3]
		inc	esi
		dec	eax
		jmp	loc_6E41B9CC
; ---------------------------------------------------------------------------

loc_6E41C00E:				; CODE XREF: sub_6E41B270+9A9j
		mov	[esp+4Ch+var_34], 0
		jmp	loc_6E41BC3B
; ---------------------------------------------------------------------------

loc_6E41C01B:				; CODE XREF: sub_6E41B270+622j
		mov	[esp+4Ch+var_3C], 1A6h
		jmp	loc_6E41B7B8
; ---------------------------------------------------------------------------

loc_6E41C028:				; CODE XREF: sub_6E41B270+68Fj
		mov	[esp+4Ch+var_3C], 1B1h
		jmp	loc_6E41B7B8
; ---------------------------------------------------------------------------

loc_6E41C035:				; CODE XREF: sub_6E41B270+84Ej
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E41BAC4
; ---------------------------------------------------------------------------

loc_6E41C049:				; CODE XREF: sub_6E41B270+842j
		mov	al, ds:byte_6E44CA06
		mov	[edx+2], al
		lea	edi, [edx+3]
		mov	esi, offset byte_6E44CA07
		mov	eax, 1Dh
		jmp	loc_6E41BAB8
; ---------------------------------------------------------------------------

loc_6E41C063:				; CODE XREF: sub_6E41B270+C92j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	ebx, 2
		jmp	loc_6E41BF08
; ---------------------------------------------------------------------------

loc_6E41C073:				; CODE XREF: sub_6E41B270+C86j
		mov	byte ptr [edi],	0
		lea	edi, [eax+3]
		lea	ebx, [edx-1]
		jmp	loc_6E41BEFC
; ---------------------------------------------------------------------------

loc_6E41C081:				; CODE XREF: sub_6E41B270+CC2j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E41BF38
; ---------------------------------------------------------------------------

loc_6E41C095:				; CODE XREF: sub_6E41B270+CB6j
		mov	al, [esi]
		mov	[edi], al
		inc	edi
		inc	esi
		lea	eax, [edx-1]
		jmp	loc_6E41BF2C
; ---------------------------------------------------------------------------

loc_6E41C0A3:				; CODE XREF: sub_6E41B270+CF2j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E41BF68
; ---------------------------------------------------------------------------

loc_6E41C0B7:				; CODE XREF: sub_6E41B270+CE6j
		mov	al, [esi]
		mov	[edi], al
		lea	edi, [ecx+3]
		inc	esi
		lea	eax, [edx-1]
		jmp	loc_6E41BF5C
; ---------------------------------------------------------------------------

loc_6E41C0C7:				; CODE XREF: sub_6E41B270+C67j
		mov	[esp+4Ch+var_3C], 296h
		jmp	loc_6E41B7B8
sub_6E41B270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41C0E0	proc near		; CODE XREF: sub_6E4024C0+13Ap
					; sub_6E421FC0+16Bp

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_54		= dword	ptr -54h
var_4D		= byte ptr -4Dh
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebp, [esp+6Ch+arg_0]
		cmp	dword ptr [ebp+0], 300h
		jz	loc_6E41C3B0

loc_6E41C0F8:				; CODE XREF: sub_6E41C0E0+2DBj
		mov	eax, [esp+6Ch+arg_4]
		lea	ebx, [eax+2]
		cmp	ebx, [esp+6Ch+arg_8]
		jnb	loc_6E41C400
		mov	eax, [ebp+6Ch]
		test	eax, eax
		jz	loc_6E41C360

loc_6E41C114:				; CODE XREF: sub_6E41C0E0+287j
					; sub_6E41C0E0+29Bj ...
		mov	eax, [ebp+58h]
		mov	edi, [eax+418h]
		test	edi, edi
		jnz	loc_6E41C410

loc_6E41C125:				; CODE XREF: sub_6E41C0E0+39Aj
		mov	esi, [ebp+148h]
		test	esi, esi
		jz	loc_6E41C1C4
		mov	eax, [esp+6Ch+arg_8]
		sub	eax, ebx
		sub	eax, 5
		js	loc_6E41C400
		mov	edx, [ebp+144h]
		cmp	edx, eax
		ja	loc_6E41C400
		cmp	edx, 0FFh
		ja	loc_6E41C600
		mov	byte ptr [ebx],	0
		mov	byte ptr [ebx+1], 0Bh
		mov	eax, [ebp+144h]
		inc	eax
		shr	eax, 8
		mov	[ebx+2], al
		mov	al, [ebp+144h]
		inc	eax
		mov	[ebx+3], al
		lea	edx, [ebx+5]
		mov	eax, [ebp+144h]
		mov	[ebx+4], al
		mov	eax, [ebp+144h]
		mov	edi, edx
		mov	esi, [ebp+148h]
		cmp	eax, 4
		jnb	loc_6E41C640

loc_6E41C19D:				; CODE XREF: sub_6E41C0E0+574j
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E41C1AE
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E41C1AE:				; CODE XREF: sub_6E41C0E0+C1j
		test	al, 1
		jz	short loc_6E41C1BC
		mov	al, [esi+ecx]
		mov	byte ptr [esp+6Ch+var_54], al
		mov	[edi+ecx], al

loc_6E41C1BC:				; CODE XREF: sub_6E41C0E0+D0j
		add	edx, [ebp+144h]
		mov	ebx, edx

loc_6E41C1C4:				; CODE XREF: sub_6E41C0E0+4Dj
		mov	ecx, [ebp+140h]
		test	ecx, ecx
		jnz	loc_6E41C480

loc_6E41C1D2:				; CODE XREF: sub_6E41C0E0+3C3j
					; sub_6E41C0E0+3EAj
		mov	edx, [ebp+12Ch]
		test	edx, edx
		jz	short loc_6E41C1FD
		mov	eax, [esp+6Ch+arg_8]
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_6E41C400
		mov	byte ptr [ebx],	0
		mov	byte ptr [ebx+1], 5
		mov	byte ptr [ebx+2], 0
		mov	byte ptr [ebx+3], 0
		add	ebx, 4

loc_6E41C1FD:				; CODE XREF: sub_6E41C0E0+FAj
		mov	eax, [ebp+8]
		cmp	dword ptr [eax], 0FEFFh
		jz	loc_6E41C4D0

loc_6E41C20C:				; CODE XREF: sub_6E41C0E0+3F8j
					; sub_6E41C0E0+468j
		mov	eax, [ebp+58h]
		mov	eax, [eax+344h]
		mov	edi, [eax+8]
		and	edi, 0FFFFh
		mov	eax, edi
		add	eax, 0FFFFFF80h
		cmp	eax, 1
		jbe	loc_6E41C560

loc_6E41C22C:				; CODE XREF: sub_6E41C0E0+4A2j
					; sub_6E41C0E0+510j
		test	byte ptr [ebp+184h], 1
		jz	short loc_6E41C267
		mov	eax, [esp+6Ch+arg_8]
		sub	eax, ebx
		cmp	eax, 4
		jle	loc_6E41C400
		mov	byte ptr [ebx],	0
		mov	byte ptr [ebx+1], 0Fh
		mov	byte ptr [ebx+2], 0
		mov	byte ptr [ebx+3], 1
		test	byte ptr [ebp+184h], 4
		jz	loc_6E41C550
		mov	byte ptr [ebx+4], 2
		add	ebx, 5

loc_6E41C267:				; CODE XREF: sub_6E41C0E0+153j
					; sub_6E41C0E0+477j
		mov	eax, [ebp+58h]
		mov	edx, [eax+41Ch]
		mov	dword ptr [eax+41Ch], 0
		test	edx, edx
		jz	loc_6E41C330
		mov	edx, [ebp+0E4h]
		mov	eax, [edx+1A4h]
		test	eax, eax
		jz	loc_6E41C330
		mov	edx, [edx+1A8h]
		mov	[esp+6Ch+var_60], edx
		lea	edx, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_64], edx
		lea	edx, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], ebp
		call	eax
		test	eax, eax
		jnz	short loc_6E41C330
		mov	eax, [esp+6Ch+var_40]
		mov	edx, 0FFFFFFFCh
		sub	edx, eax
		mov	ecx, [esp+6Ch+arg_8]
		sub	ecx, ebx
		add	edx, ecx
		js	loc_6E41C400
		mov	byte ptr [ebx],	33h
		mov	byte ptr [ebx+1], 74h
		mov	edx, eax
		shr	edx, 8
		mov	[ebx+2], dl
		mov	[ebx+3], al
		lea	esi, [ebx+4]
		mov	[esp+6Ch+var_54], esi
		mov	edx, eax
		mov	edi, esi
		mov	esi, [esp+6Ch+var_44]
		cmp	eax, 4
		jnb	loc_6E41C680

loc_6E41C2FC:				; CODE XREF: sub_6E41C0E0+5B7j
		xor	ecx, ecx
		test	dl, 2
		jnz	loc_6E41C670

loc_6E41C307:				; CODE XREF: sub_6E41C0E0+59Bj
		and	edx, 1
		jnz	loc_6E41C660

loc_6E41C310:				; CODE XREF: sub_6E41C0E0+58Aj
		mov	ebx, [esp+6Ch+var_54]
		add	ebx, eax
		mov	eax, [ebp+58h]
		mov	dword ptr [eax+41Ch], 1
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E41C330:				; CODE XREF: sub_6E41C0E0+19Cj
					; sub_6E41C0E0+1B0j ...
		mov	eax, ebx
		sub	eax, [esp+6Ch+arg_4]
		sub	eax, 2
		jz	loc_6E41C3C1
		mov	edx, eax
		sar	edx, 8
		mov	esi, [esp+6Ch+arg_4]
		mov	[esi], dl
		mov	[esi+1], al
		mov	eax, ebx

loc_6E41C34F:				; CODE XREF: sub_6E41C0E0+54Ej
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C360:				; CODE XREF: sub_6E41C0E0+2Ej
		cmp	dword ptr [ebp+124h], 1
		jnz	loc_6E41C114
		mov	eax, [ebp+0C0h]
		mov	eax, [eax+0D0h]
		test	eax, eax
		jz	loc_6E41C114
		mov	eax, [esp+6Ch+arg_8]
		sub	eax, ebx
		cmp	eax, 3
		jle	short loc_6E41C400
		mov	eax, [esp+6Ch+arg_4]
		mov	byte ptr [eax+2], 0
		mov	byte ptr [eax+3], 0
		mov	byte ptr [eax+4], 0
		mov	byte ptr [eax+5], 0
		lea	ebx, [eax+6]
		jmp	loc_6E41C114
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C3B0:				; CODE XREF: sub_6E41C0E0+12j
		mov	eax, [ebp+58h]
		mov	eax, [eax+418h]
		test	eax, eax
		jnz	loc_6E41C0F8

loc_6E41C3C1:				; CODE XREF: sub_6E41C0E0+259j
		mov	eax, [esp+6Ch+arg_4]
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E41C3CD:				; CODE XREF: sub_6E41C0E0+352j
		mov	[esp+6Ch+var_5C], 2E1h

loc_6E41C3D5:				; CODE XREF: sub_6E41C0E0+5F6j
					; sub_6E41C0E0+603j
		mov	[esp+6Ch+var_60], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+6Ch+var_64], 44h
		mov	[esp+6Ch+var_68], 116h
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error
		lea	esi, [esi+0]

loc_6E41C400:				; CODE XREF: sub_6E41C0E0+23j
					; sub_6E41C0E0+5Cj ...
		xor	eax, eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C410:				; CODE XREF: sub_6E41C0E0+3Fj
		mov	[esp+6Ch+var_60], 0
		lea	esi, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebp
		call	sub_6E445A10
		test	eax, eax
		jz	short loc_6E41C3CD
		mov	eax, [esp+6Ch+var_40]
		mov	edx, [esp+6Ch+arg_8]
		sub	edx, ebx
		sub	edx, 4
		cmp	edx, eax
		js	short loc_6E41C400
		mov	byte ptr [ebx],	0FFh
		mov	byte ptr [ebx+1], 1
		mov	edx, eax
		sar	edx, 8
		mov	[ebx+2], dl
		mov	[ebx+3], al
		add	ebx, 4
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], ebp
		call	sub_6E445A10
		test	eax, eax
		jz	loc_6E41C6CE
		add	ebx, [esp+6Ch+var_40]
		jmp	loc_6E41C125
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C480:				; CODE XREF: sub_6E41C0E0+ECj
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 20h
		mov	[esp+6Ch+var_6C], ebp
		call	SSL_ctrl
		test	ah, 40h
		jnz	loc_6E41C1D2
		mov	eax, [esp+6Ch+arg_8]
		sub	eax, ebx
		cmp	eax, 3
		jle	loc_6E41C400
		mov	byte ptr [ebx],	0
		mov	byte ptr [ebx+1], 23h
		mov	byte ptr [ebx+2], 0
		mov	byte ptr [ebx+3], 0
		add	ebx, 4
		jmp	loc_6E41C1D2
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C4D0:				; CODE XREF: sub_6E41C0E0+126j
		mov	eax, [ebp+180h]
		test	eax, eax
		jz	loc_6E41C20C
		mov	[esp+6Ch+var_60], 0
		lea	esi, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebp
		call	sub_6E42FCB0
		mov	eax, [esp+6Ch+var_40]
		mov	edx, [esp+6Ch+arg_8]
		sub	edx, ebx
		sub	edx, 4
		cmp	edx, eax
		js	loc_6E41C400
		mov	byte ptr [ebx],	0
		mov	byte ptr [ebx+1], 0Eh
		mov	edx, eax
		sar	edx, 8
		mov	[ebx+2], dl
		mov	[ebx+3], al
		add	ebx, 4
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], ebp
		call	sub_6E42FCB0
		test	eax, eax
		jnz	loc_6E41C6DB
		add	ebx, [esp+6Ch+var_40]
		jmp	loc_6E41C20C
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C550:				; CODE XREF: sub_6E41C0E0+17Aj
		mov	byte ptr [ebx+4], 1
		add	ebx, 5
		jmp	loc_6E41C267
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C560:				; CODE XREF: sub_6E41C0E0+146j
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 20h
		mov	[esp+6Ch+var_6C], ebp
		call	SSL_ctrl
		test	eax, eax
		jns	loc_6E41C22C
		lea	eax, [esp+6Ch+var_40]
		mov	esi, offset dword_6E449840
		mov	ecx, 9
		mov	edi, eax
		rep movsd
		mov	edx, [esp+6Ch+arg_8]
		sub	edx, ebx
		cmp	edx, 23h
		jle	loc_6E41C400
		mov	edi, ebx
		mov	esi, eax
		mov	eax, 24h
		test	bl, 1
		jnz	loc_6E41C71A

loc_6E41C5BB:				; CODE XREF: sub_6E41C0E0+64Cj
		test	edi, 2
		jnz	loc_6E41C706

loc_6E41C5C7:				; CODE XREF: sub_6E41C0E0+635j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E41C5DF
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E41C5DF:				; CODE XREF: sub_6E41C0E0+4F2j
		test	al, 1
		jz	short loc_6E41C5ED
		mov	al, [esi+edx]
		mov	byte ptr [esp+6Ch+var_54], al
		mov	[edi+edx], al

loc_6E41C5ED:				; CODE XREF: sub_6E41C0E0+501j
		add	ebx, 24h
		jmp	loc_6E41C22C
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C600:				; CODE XREF: sub_6E41C0E0+76j
		mov	[esp+6Ch+var_5C], 2FEh
		mov	[esp+6Ch+var_60], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+6Ch+var_64], 44h
		mov	[esp+6Ch+var_68], 116h
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E41C34F
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C640:				; CODE XREF: sub_6E41C0E0+B7j
		test	dl, 1
		jnz	short loc_6E41C6C0

loc_6E41C645:				; CODE XREF: sub_6E41C0E0+5E9j
		test	edi, 2
		jnz	short loc_6E41C6A0

loc_6E41C64D:				; CODE XREF: sub_6E41C0E0+5CFj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E41C19D
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C660:				; CODE XREF: sub_6E41C0E0+22Aj
		mov	dl, [esi+ecx]
		mov	[esp+6Ch+var_4D], dl
		mov	[edi+ecx], dl
		jmp	loc_6E41C310
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C670:				; CODE XREF: sub_6E41C0E0+221j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	loc_6E41C307
; ---------------------------------------------------------------------------

loc_6E41C680:				; CODE XREF: sub_6E41C0E0+216j
		test	edi, 1
		jnz	short loc_6E41C6F9

loc_6E41C688:				; CODE XREF: sub_6E41C0E0+624j
		test	edi, 2
		jnz	short loc_6E41C6E8

loc_6E41C690:				; CODE XREF: sub_6E41C0E0+617j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E41C2FC
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C6A0:				; CODE XREF: sub_6E41C0E0+56Bj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E41C64D
; ---------------------------------------------------------------------------
		jmp	short loc_6E41C6C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C6C0:				; CODE XREF: sub_6E41C0E0+563j
					; sub_6E41C0E0+5D1j
		mov	cl, [esi]
		mov	[edx], cl
		lea	edi, [ebx+6]
		inc	esi
		dec	eax
		jmp	loc_6E41C645
; ---------------------------------------------------------------------------

loc_6E41C6CE:				; CODE XREF: sub_6E41C0E0+390j
		mov	[esp+6Ch+var_5C], 2ECh
		jmp	loc_6E41C3D5
; ---------------------------------------------------------------------------

loc_6E41C6DB:				; CODE XREF: sub_6E41C0E0+45Ej
		mov	[esp+6Ch+var_5C], 33Bh
		jmp	loc_6E41C3D5
; ---------------------------------------------------------------------------

loc_6E41C6E8:				; CODE XREF: sub_6E41C0E0+5AEj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	short loc_6E41C690
; ---------------------------------------------------------------------------

loc_6E41C6F9:				; CODE XREF: sub_6E41C0E0+5A6j
		mov	cl, [esi]
		mov	[edi], cl
		lea	edi, [ebx+5]
		inc	esi
		lea	edx, [eax-1]
		jmp	short loc_6E41C688
; ---------------------------------------------------------------------------

loc_6E41C706:				; CODE XREF: sub_6E41C0E0+4E1j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E41C5C7
; ---------------------------------------------------------------------------

loc_6E41C71A:				; CODE XREF: sub_6E41C0E0+4D5j
		mov	al, byte ptr [esp+6Ch+var_40]
		mov	[ebx], al
		lea	edi, [ebx+1]
		lea	esi, [esp+6Ch+var_40+1]
		mov	eax, 23h
		jmp	loc_6E41C5BB
sub_6E41C0E0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E41C740
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41C740	proc near		; CODE XREF: sub_6E407B10+55Fp
					; .text:6E41C731j

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= byte ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebp, [esp+6Ch+arg_0]
		mov	ecx, [esp+6Ch+arg_8]
		mov	edx, [esp+6Ch+arg_C]
		mov	eax, [esp+6Ch+arg_4]
		mov	eax, [eax]
		mov	ebx, [ebp+58h]
		mov	dword ptr [ebx+41Ch], 0
		mov	dword ptr [ebp+140h], 0
		and	dword ptr [ebp+184h], 0FFFFFFFCh
		lea	ebx, [ecx+edx-2]
		cmp	eax, ebx
		jb	short loc_6E41C7A0

loc_6E41C77F:				; CODE XREF: sub_6E41C740+5DCj
		test	dword ptr [ebp+100h], 40004h
		jz	short loc_6E41C7F0

loc_6E41C78B:				; CODE XREF: sub_6E41C740+5D6j
		mov	ecx, 1
		mov	eax, ecx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C7A0:				; CODE XREF: sub_6E41C740+3Dj
		lea	edi, [eax+2]
		movzx	esi, byte ptr [eax]
		and	esi, 0FFh
		shl	esi, 8
		mov	bl, [eax+1]
		and	ebx, 0FFh
		mov	eax, ebx
		or	esi, eax
		xor	ebx, ebx
		mov	bx, si
		lea	eax, [edi+ebx]
		mov	ebx, eax
		mov	[esp+6Ch+var_44], eax
		lea	eax, [ecx+edx]
		cmp	ebx, eax
		jz	short loc_6E41C840

loc_6E41C7D1:				; CODE XREF: sub_6E41C740+287j
					; sub_6E41C740+28Fj ...
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 32h
		xor	ecx, ecx

loc_6E41C7E0:				; CODE XREF: sub_6E41C740+63Fj
					; sub_6E41C740+65Fj ...
		mov	eax, ecx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C7F0:				; CODE XREF: sub_6E41C740+49j
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 28h
		mov	[esp+6Ch+var_5C], 696h
		mov	[esp+6Ch+var_60], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+6Ch+var_64], 152h
		mov	[esp+6Ch+var_68], 12Fh
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error

loc_6E41C829:				; CODE XREF: sub_6E41C740+614j
		xor	ecx, ecx

loc_6E41C82B:				; CODE XREF: sub_6E41C740+266j
		mov	eax, ecx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C840:				; CODE XREF: sub_6E41C740+8Fj
		lea	eax, [ecx+edx-4]
		mov	[esp+6Ch+var_38], eax
		mov	[esp+6Ch+var_30], 0
		mov	[esp+6Ch+var_34], 0
		jmp	short loc_6E41C886
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C860:				; CODE XREF: sub_6E41C740+1DDj
		mov	edx, [ebp+120h]
		test	edx, edx
		jz	loc_6E41CD70
		cmp	word ptr [esp+6Ch+var_4C], 0
		jnz	loc_6E41CD70
		mov	[esp+6Ch+var_34], 1

loc_6E41C882:				; CODE XREF: sub_6E41C740+22Aj
					; sub_6E41C740+234j ...
		mov	edi, [esp+6Ch+var_48]

loc_6E41C886:				; CODE XREF: sub_6E41C740+118j
		cmp	edi, [esp+6Ch+var_38]
		ja	loc_6E41CCE0
		xor	ebx, ebx
		mov	bl, [edi]
		shl	ebx, 8
		xor	eax, eax
		mov	al, [edi+1]
		or	ebx, eax
		movzx	esi, byte ptr [edi+2]
		and	esi, 0FFh
		mov	word ptr [esp+6Ch+var_4C], si
		shl	word ptr [esp+6Ch+var_4C], 8
		xor	eax, eax
		mov	al, [edi+3]
		or	word ptr [esp+6Ch+var_4C], ax
		lea	ecx, [edi+4]
		xor	eax, eax
		mov	ax, word ptr [esp+6Ch+var_4C]
		lea	esi, [ecx+eax]
		mov	[esp+6Ch+var_48], esi
		cmp	[esp+6Ch+var_44], esi
		jb	loc_6E41CD10
		mov	edx, [ebp+118h]
		test	edx, edx
		jz	short loc_6E41C91A
		mov	esi, [ebp+11Ch]
		mov	[esp+6Ch+var_58], esi
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_3C], eax
		mov	[esp+6Ch+var_60], ecx
		mov	[esp+6Ch+var_40], ecx
		xor	eax, eax
		mov	ax, bx
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], ebp
		call	edx
		mov	eax, [esp+6Ch+var_3C]
		mov	ecx, [esp+6Ch+var_40]

loc_6E41C91A:				; CODE XREF: sub_6E41C740+1A0j
		test	bx, bx
		jz	loc_6E41C860
		cmp	bx, 0Bh
		jz	loc_6E41C9B0
		cmp	bx, 23h
		jz	loc_6E41CA90
		cmp	bx, 5
		jz	loc_6E41CB10
		cmp	bx, 3374h
		jz	loc_6E41CB50
		cmp	bx, 0FF01h
		jz	loc_6E41CD30
		cmp	bx, 0Fh
		jz	loc_6E41CC80
		mov	eax, [ebp+8]
		cmp	dword ptr [eax], 0FEFFh
		jnz	loc_6E41C882
		cmp	bx, 0Eh
		jnz	loc_6E41C882
		mov	eax, [esp+6Ch+arg_10]
		mov	[esp+6Ch+var_60], eax
		xor	esi, esi
		mov	si, word ptr [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], ecx
		mov	[esp+6Ch+var_6C], ebp
		call	sub_6E42FD90
		test	eax, eax
		jz	loc_6E41C882
		xor	ecx, ecx
		jmp	loc_6E41C82B
; ---------------------------------------------------------------------------
		align 10h

loc_6E41C9B0:				; CODE XREF: sub_6E41C740+1E7j
		mov	al, [edi+4]
		mov	dl, al
		mov	byte ptr [esp+6Ch+var_3C], al
		xor	esi, esi
		mov	si, word ptr [esp+6Ch+var_4C]
		dec	esi
		xor	eax, eax
		mov	al, dl
		cmp	esi, eax
		jnz	loc_6E41C7D1
		test	esi, esi
		jz	loc_6E41C7D1
		mov	eax, [ebp+6Ch]
		mov	[esp+6Ch+var_40], eax
		test	eax, eax
		jnz	loc_6E41C882
		mov	edx, [ebp+0C0h]
		mov	dword ptr [edx+0D4h], 0
		mov	eax, [edx+0D8h]
		test	eax, eax
		jz	short loc_6E41CA0C
		mov	[esp+6Ch+var_6C], eax
		call	CRYPTO_free
		mov	edx, [ebp+0C0h]

loc_6E41CA0C:				; CODE XREF: sub_6E41C740+2BCj
		mov	[esp+6Ch+var_4C], edx
		mov	[esp+6Ch+var_64], 5E0h
		mov	[esp+6Ch+var_68], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+6Ch+var_6C], esi
		call	CRYPTO_malloc
		mov	edx, [esp+6Ch+var_4C]
		mov	[edx+0D8h], eax
		test	eax, eax
		jz	loc_6E41CE27
		mov	eax, [ebp+0C0h]
		xor	ebx, ebx
		mov	bl, byte ptr [esp+6Ch+var_3C]
		mov	[eax+0D4h], ebx
		mov	edx, [eax+0D8h]
		lea	ecx, [edi+5]
		mov	eax, edx
		mov	esi, ecx
		cmp	ebx, 4
		jnb	loc_6E41CCB0

loc_6E41CA62:				; CODE XREF: sub_6E41C740+58Bj
		xor	edx, edx
		test	bl, 2
		jnz	loc_6E41CCA0

loc_6E41CA6D:				; CODE XREF: sub_6E41C740+56Bj
		and	ebx, 1
		jz	loc_6E41C882
		mov	cl, [esi+edx]
		mov	byte ptr [esp+6Ch+var_4C], cl
		mov	[eax+edx], cl
		jmp	loc_6E41C882
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CA90:				; CODE XREF: sub_6E41C740+1F1j
		mov	eax, [ebp+160h]
		test	eax, eax
		jz	short loc_6E41CAC4
		mov	edx, [ebp+164h]
		mov	[esp+6Ch+var_60], edx
		xor	edx, edx
		mov	dx, word ptr [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_64], edx
		mov	[esp+6Ch+var_68], ecx
		mov	[esp+6Ch+var_6C], ebp
		call	eax
		mov	[esp+6Ch+var_40], eax
		test	eax, eax
		jz	loc_6E41CE3D

loc_6E41CAC4:				; CODE XREF: sub_6E41C740+358j
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 20h
		mov	[esp+6Ch+var_6C], ebp
		call	SSL_ctrl
		test	ah, 40h
		jnz	loc_6E41CDEC
		cmp	word ptr [esp+6Ch+var_4C], 0
		jnz	loc_6E41CDEC
		mov	dword ptr [ebp+140h], 1
		jmp	loc_6E41C882
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CB10:				; CODE XREF: sub_6E41C740+1FBj
		cmp	dword ptr [ebp+0], 0FEFFh
		jz	loc_6E41C882
		cmp	dword ptr [ebp+128h], 0FFFFFFFFh
		jz	loc_6E41CDEC
		cmp	word ptr [esp+6Ch+var_4C], 0
		jnz	loc_6E41CDEC
		mov	dword ptr [ebp+12Ch], 1
		jmp	loc_6E41C882
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CB50:				; CODE XREF: sub_6E41C740+206j
		mov	edx, [ebp+58h]
		mov	edx, [edx+2B4h]
		mov	[esp+6Ch+var_40], edx
		test	edx, edx
		jnz	loc_6E41C882
		mov	esi, [ebp+0E4h]
		mov	edx, [esi+1ACh]
		mov	[esp+6Ch+var_4C], edx
		test	edx, edx
		jz	loc_6E41CE75
		test	eax, eax
		jz	short loc_6E41CBC4
		mov	bl, [edi+4]
		test	bl, bl
		jz	loc_6E41CDB0
		xor	edx, edx
		mov	edi, ebx
		jmp	short loc_6E41CBAE
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CBA0:				; CODE XREF: sub_6E41C740+47Cj
		movzx	edi, byte ptr [ecx+edx]
		mov	ebx, edi
		test	bl, bl
		jz	loc_6E41CDB0

loc_6E41CBAE:				; CODE XREF: sub_6E41C740+450j
		mov	ebx, edi
		and	ebx, 0FFh
		lea	edx, [edx+ebx+1]
		cmp	eax, edx
		ja	short loc_6E41CBA0
		jnz	loc_6E41CDB0

loc_6E41CBC4:				; CODE XREF: sub_6E41C740+43Fj
		mov	edx, [esi+1B0h]
		mov	[esp+6Ch+var_58], edx
		mov	[esp+6Ch+var_5C], eax
		mov	[esp+6Ch+var_60], ecx
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_64], eax
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		mov	eax, [esp+6Ch+var_4C]
		call	eax
		test	eax, eax
		jnz	loc_6E41CE27
		mov	[esp+6Ch+var_64], 649h
		mov	[esp+6Ch+var_68], offset aT1_lib_c ; "t1_lib.c"
		xor	eax, eax
		mov	al, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_6C], eax
		call	CRYPTO_malloc
		mov	[ebp+174h], eax
		test	eax, eax
		jz	loc_6E41CE27
		mov	ecx, [esp+6Ch+var_20]
		xor	edx, edx
		mov	dl, [esp+6Ch+var_24]
		mov	edi, eax
		mov	esi, ecx
		cmp	edx, 4
		jnb	loc_6E41CDD0

loc_6E41CC3A:				; CODE XREF: sub_6E41C740+6A7j
		xor	eax, eax
		test	dl, 2
		jz	short loc_6E41CC4C
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2

loc_6E41CC4C:				; CODE XREF: sub_6E41C740+4FFj
		and	edx, 1
		jz	short loc_6E41CC5B
		mov	dl, [esi+eax]
		mov	byte ptr [esp+6Ch+var_4C], dl
		mov	[edi+eax], dl

loc_6E41CC5B:				; CODE XREF: sub_6E41C740+50Fj
		mov	al, [esp+6Ch+var_24]
		mov	[ebp+178h], al
		mov	eax, [ebp+58h]
		mov	dword ptr [eax+41Ch], 1
		jmp	loc_6E41C882
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CC80:				; CODE XREF: sub_6E41C740+21Bj
		mov	al, [edi+4]
		cmp	al, 1
		jz	short loc_6E41CCD0
		cmp	al, 2
		jnz	loc_6E41CD90
		or	dword ptr [ebp+184h], 3
		jmp	loc_6E41C882
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CCA0:				; CODE XREF: sub_6E41C740+327j
		mov	dx, [esi]
		mov	[eax], dx
		mov	edx, 2
		jmp	loc_6E41CA6D
; ---------------------------------------------------------------------------

loc_6E41CCB0:				; CODE XREF: sub_6E41C740+31Cj
		test	al, 1
		jnz	loc_6E41CE14

loc_6E41CCB8:				; CODE XREF: sub_6E41C740+6E2j
		test	al, 2
		jnz	loc_6E41CE00

loc_6E41CCC0:				; CODE XREF: sub_6E41C740+6CFj
		mov	ecx, ebx
		shr	ecx, 2
		mov	edi, eax
		rep movsd
		mov	eax, edi
		jmp	loc_6E41CA62
; ---------------------------------------------------------------------------

loc_6E41CCD0:				; CODE XREF: sub_6E41C740+545j
		or	dword ptr [ebp+184h], 1
		jmp	loc_6E41C882
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CCE0:				; CODE XREF: sub_6E41C740+14Aj
		cmp	edi, [esp+6Ch+var_44]
		jnz	loc_6E41C7D1
		mov	ecx, [ebp+6Ch]
		test	ecx, ecx
		jnz	short loc_6E41CCFC
		cmp	[esp+6Ch+var_34], 1
		jz	loc_6E41CE8B

loc_6E41CCFC:				; CODE XREF: sub_6E41C740+5AFj
					; sub_6E41C740+753j ...
		mov	eax, [esp+6Ch+arg_4]
		mov	[eax], edi
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E41CD10:				; CODE XREF: sub_6E41C740+192j
		mov	eax, [esp+6Ch+var_30]
		test	eax, eax
		jnz	loc_6E41C78B
		jmp	loc_6E41C77F
; ---------------------------------------------------------------------------
		jmp	short loc_6E41CD30
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CD30:				; CODE XREF: sub_6E41C740+211j
					; sub_6E41C740+5E1j
		mov	eax, [esp+6Ch+arg_10]
		mov	[esp+6Ch+var_60], eax
		xor	esi, esi
		mov	si, word ptr [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], ecx
		mov	[esp+6Ch+var_6C], ebp
		call	sub_6E445C80
		test	eax, eax
		jz	loc_6E41C829
		mov	[esp+6Ch+var_30], 1
		jmp	loc_6E41C882
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CD70:				; CODE XREF: sub_6E41C740+128j
					; sub_6E41C740+134j
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 70h
		xor	ecx, ecx
		jmp	loc_6E41C7E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CD90:				; CODE XREF: sub_6E41C740+549j
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 2Fh
		xor	ecx, ecx
		jmp	loc_6E41C7E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CDB0:				; CODE XREF: sub_6E41C740+446j
					; sub_6E41C740+468j ...
		mov	ecx, [esp+6Ch+var_40]
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 32h
		jmp	loc_6E41C7E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CDD0:				; CODE XREF: sub_6E41C740+4F4j
		test	al, 1
		jnz	loc_6E41CE65

loc_6E41CDD8:				; CODE XREF: sub_6E41C740+730j
		test	edi, 2
		jnz	short loc_6E41CE51

loc_6E41CDE0:				; CODE XREF: sub_6E41C740+720j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E41CC3A
; ---------------------------------------------------------------------------

loc_6E41CDEC:				; CODE XREF: sub_6E41C740+3A7j
					; sub_6E41C740+3B3j ...
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 6Eh
		xor	ecx, ecx
		jmp	loc_6E41C7E0
; ---------------------------------------------------------------------------

loc_6E41CE00:				; CODE XREF: sub_6E41C740+57Aj
		mov	dx, [esi]
		mov	[eax], dx
		add	eax, 2
		add	esi, 2
		sub	ebx, 2
		jmp	loc_6E41CCC0
; ---------------------------------------------------------------------------

loc_6E41CE14:				; CODE XREF: sub_6E41C740+572j
		mov	cl, [edi+5]
		mov	byte ptr [esp+6Ch+var_4C], cl
		mov	[edx], cl
		inc	eax
		lea	esi, [edi+6]
		dec	ebx
		jmp	loc_6E41CCB8
; ---------------------------------------------------------------------------

loc_6E41CE27:				; CODE XREF: sub_6E41C740+2F4j
					; sub_6E41C740+4B1j ...
		mov	ecx, [esp+6Ch+var_40]
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 50h
		jmp	loc_6E41C7E0
; ---------------------------------------------------------------------------

loc_6E41CE3D:				; CODE XREF: sub_6E41C740+37Ej
		mov	ecx, eax
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 50h
		jmp	loc_6E41C7E0
; ---------------------------------------------------------------------------

loc_6E41CE51:				; CODE XREF: sub_6E41C740+69Ej
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E41CDE0
; ---------------------------------------------------------------------------

loc_6E41CE65:				; CODE XREF: sub_6E41C740+692j
		mov	cl, [ecx]
		mov	byte ptr [esp+6Ch+var_4C], cl
		mov	[eax], cl
		inc	edi
		inc	esi
		dec	edx
		jmp	loc_6E41CDD8
; ---------------------------------------------------------------------------

loc_6E41CE75:				; CODE XREF: sub_6E41C740+437j
		mov	ecx, [esp+6Ch+var_40]
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 6Eh
		jmp	loc_6E41C7E0
; ---------------------------------------------------------------------------

loc_6E41CE8B:				; CODE XREF: sub_6E41C740+5B6j
		mov	eax, [ebp+120h]
		test	eax, eax
		jz	loc_6E41CCFC
		mov	ebx, [ebp+0C0h]
		cmp	dword ptr [ebx+0D0h], 0
		jnz	loc_6E41C7D1
		mov	[esp+6Ch+var_4C], ecx
		mov	[esp+6Ch+var_6C], eax
		call	BUF_strdup
		mov	[ebx+0D0h], eax
		mov	eax, [ebp+0C0h]
		cmp	dword ptr [eax+0D0h], 0
		mov	ecx, [esp+6Ch+var_4C]
		jnz	loc_6E41CCFC
		mov	eax, [esp+6Ch+arg_10]
		mov	dword ptr [eax], 70h
		jmp	loc_6E41C7E0
sub_6E41C740	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41CEF0	proc near		; CODE XREF: sub_6E407680+1B7p
					; sub_6E4194A0+9C9p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], esi
		call	SSL_get_ciphers
		mov	edi, eax
		xor	ebx, ebx
		jmp	short loc_6E41CF2B
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CF10:				; CODE XREF: sub_6E41CEF0+45j
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], edi
		call	sk_value
		mov	edx, [eax+10h]
		test	byte ptr [eax+0Ch], 0E0h
		jnz	short loc_6E41CF50
		and	edx, 40h
		jnz	short loc_6E41CF50
		inc	ebx

loc_6E41CF2B:				; CODE XREF: sub_6E41CEF0+16j
		mov	[esp+2Ch+var_2C], edi
		call	sk_num
		cmp	ebx, eax
		jl	short loc_6E41CF10

loc_6E41CF37:				; CODE XREF: sub_6E41CEF0+66j
					; sub_6E41CEF0+15Cj
		mov	eax, 1

loc_6E41CF3C:				; CODE XREF: sub_6E41CEF0+418j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41CF50:				; CODE XREF: sub_6E41CEF0+33j
					; sub_6E41CEF0+38j
		cmp	dword ptr [esi], 300h
		jle	short loc_6E41CF37
		mov	eax, [esi+148h]
		test	eax, eax
		jz	short loc_6E41CF6A
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E41CF6A:				; CODE XREF: sub_6E41CEF0+70j
		mov	[esp+2Ch+var_24], 6B9h
		mov	[esp+2Ch+var_28], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+2Ch+var_2C], 3
		call	CRYPTO_malloc
		mov	[esi+148h], eax
		test	eax, eax
		jz	loc_6E41D2D7
		mov	dword ptr [esi+144h], 3
		mov	byte ptr [eax],	0
		mov	eax, [esi+148h]
		mov	byte ptr [eax+1], 1
		mov	eax, [esi+148h]
		mov	byte ptr [eax+2], 2
		mov	eax, [esi+150h]
		test	eax, eax
		jz	short loc_6E41CFC7
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E41CFC7:				; CODE XREF: sub_6E41CEF0+CDj
		mov	dword ptr [esi+14Ch], 32h
		mov	[esp+2Ch+var_24], 6CBh
		mov	[esp+2Ch+var_28], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+2Ch+var_2C], 32h
		call	CRYPTO_malloc
		mov	[esi+150h], eax
		test	eax, eax
		jz	loc_6E41D30D
		xor	edx, edx
		jmp	short loc_6E41D052
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D000:				; CODE XREF: sub_6E41CEF0+175j
		cmp	ecx, 2C7h
		jz	loc_6E41D260
		jle	loc_6E41D0F0
		cmp	ecx, 2CAh
		jz	loc_6E41D2A0
		jle	loc_6E41D180
		cmp	ecx, 2CCh
		jz	loc_6E41D2D0
		jl	loc_6E41D2C0
		mov	bl, 1
		cmp	ecx, 2D1h
		jnz	short loc_6E41D0A3

loc_6E41D040:				; CODE XREF: sub_6E41CEF0+1B1j
					; sub_6E41CEF0+1B5j ...
		mov	byte ptr [eax+edx*2], 0
		mov	[eax+edx*2+1], bl
		inc	edx
		cmp	edx, 19h
		jz	loc_6E41CF37

loc_6E41D052:				; CODE XREF: sub_6E41CEF0+10Dj
		mov	ecx, ds:dword_6E44CA40[edx*4]
		cmp	ecx, 2D2h
		jz	loc_6E41D250
		jle	short loc_6E41D000
		cmp	ecx, 2D8h
		jz	loc_6E41D1D0
		jle	short loc_6E41D0B0
		cmp	ecx, 2DBh
		jz	loc_6E41D210
		jle	loc_6E41D120
		cmp	ecx, 2DDh
		jz	loc_6E41D200
		jl	loc_6E41D1F0
		mov	bl, 0Eh
		cmp	ecx, 2DEh
		jz	short loc_6E41D040

loc_6E41D0A3:				; CODE XREF: sub_6E41CEF0+14Ej
		xor	ebx, ebx
		jmp	short loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D0B0:				; CODE XREF: sub_6E41CEF0+183j
		cmp	ecx, 2D5h
		jz	loc_6E41D280
		jg	loc_6E41D1B0
		cmp	ecx, 2D3h
		jz	loc_6E41D270
		mov	bl, 4
		cmp	ecx, 2D4h
		jz	loc_6E41D040
		xor	ebx, ebx
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D0F0:				; CODE XREF: sub_6E41CEF0+11Cj
		cmp	ecx, 2C4h
		jz	loc_6E41D230
		jg	short loc_6E41D150
		cmp	ecx, 199h
		jz	loc_6E41D220
		mov	bl, 17h
		cmp	ecx, 19Fh
		jz	loc_6E41D040
		xor	ebx, ebx
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D120:				; CODE XREF: sub_6E41CEF0+191j
		cmp	ecx, 2D9h
		jz	loc_6E41D240
		mov	bl, 0Ah
		cmp	ecx, 2DAh
		jz	loc_6E41D040
		xor	ebx, ebx
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		jmp	short loc_6E41D150
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D150:				; CODE XREF: sub_6E41CEF0+20Cj
					; sub_6E41CEF0+251j
		cmp	ecx, 2C5h
		jz	loc_6E41D2B0
		mov	bl, 11h
		cmp	ecx, 2C6h
		jz	loc_6E41D040
		xor	ebx, ebx
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		jmp	short loc_6E41D180
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D180:				; CODE XREF: sub_6E41CEF0+12Ej
					; sub_6E41CEF0+281j
		cmp	ecx, 2C8h
		jz	loc_6E41D290
		mov	bl, 15h
		cmp	ecx, 2C9h
		jz	loc_6E41D040
		xor	ebx, ebx
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		jmp	short loc_6E41D1B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D1B0:				; CODE XREF: sub_6E41CEF0+1CCj
					; sub_6E41CEF0+2B1j
		cmp	ecx, 2D6h
		jz	short loc_6E41D1E0
		mov	bl, 7
		cmp	ecx, 2D7h
		jz	loc_6E41D040
		xor	ebx, ebx
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D1D0:				; CODE XREF: sub_6E41CEF0+17Dj
		mov	bl, 8
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D1E0:				; CODE XREF: sub_6E41CEF0+2C6j
		mov	bl, 6
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D1F0:				; CODE XREF: sub_6E41CEF0+1A3j
		mov	bl, 0Ch
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D200:				; CODE XREF: sub_6E41CEF0+19Dj
		mov	bl, 0Dh
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D210:				; CODE XREF: sub_6E41CEF0+18Bj
		mov	bl, 0Bh
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D220:				; CODE XREF: sub_6E41CEF0+214j
		mov	bl, 13h
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D230:				; CODE XREF: sub_6E41CEF0+206j
		mov	bl, 0Fh
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D240:				; CODE XREF: sub_6E41CEF0+236j
		mov	bl, 9
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D250:				; CODE XREF: sub_6E41CEF0+16Fj
		mov	bl, 2
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D260:				; CODE XREF: sub_6E41CEF0+116j
		mov	bl, 12h
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D270:				; CODE XREF: sub_6E41CEF0+1D8j
		mov	bl, 3
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D280:				; CODE XREF: sub_6E41CEF0+1C6j
		mov	bl, 5
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D290:				; CODE XREF: sub_6E41CEF0+296j
		mov	bl, 14h
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D2A0:				; CODE XREF: sub_6E41CEF0+128j
		mov	bl, 16h
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D2B0:				; CODE XREF: sub_6E41CEF0+266j
		mov	bl, 10h
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D2C0:				; CODE XREF: sub_6E41CEF0+140j
		mov	bl, 18h
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D2D0:				; CODE XREF: sub_6E41CEF0+13Aj
		mov	bl, 19h
		jmp	loc_6E41D040
; ---------------------------------------------------------------------------

loc_6E41D2D7:				; CODE XREF: sub_6E41CEF0+9Ej
		mov	[esp+2Ch+var_1C], 6BBh

loc_6E41D2DF:				; CODE XREF: sub_6E41CEF0+42Fj
		mov	[esp+2Ch+var_20], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 119h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E41CF3C
; ---------------------------------------------------------------------------

loc_6E41D30D:				; CODE XREF: sub_6E41CEF0+105j
		mov	dword ptr [esi+14Ch], 0
		mov	[esp+2Ch+var_1C], 6CEh
		jmp	short loc_6E41D2DF
sub_6E41CEF0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E41D330
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41D330	proc near		; CODE XREF: sub_6E4024C0+11Cp
					; .text:6E41D321j ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		mov	edx, [eax+10h]
		test	byte ptr [eax+0Ch], 0E0h
		jnz	short loc_6E41D34F
		and	edx, 40h
		jz	short loc_6E41D3B8

loc_6E41D34F:				; CODE XREF: sub_6E41D330+18j
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+0D8h]
		test	eax, eax
		jz	short loc_6E41D3B8
		mov	eax, [ebx+148h]
		test	eax, eax
		jz	short loc_6E41D371
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E41D371:				; CODE XREF: sub_6E41D330+37j
		mov	[esp+2Ch+var_24], 71Bh
		mov	[esp+2Ch+var_28], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+2Ch+var_2C], 3
		call	CRYPTO_malloc
		mov	[ebx+148h], eax
		test	eax, eax
		jz	short loc_6E41D3C2
		mov	dword ptr [ebx+144h], 3
		mov	byte ptr [eax],	0
		mov	eax, [ebx+148h]
		mov	byte ptr [eax+1], 1
		mov	eax, [ebx+148h]
		mov	byte ptr [eax+2], 2

loc_6E41D3B8:				; CODE XREF: sub_6E41D330+1Dj
					; sub_6E41D330+2Dj
		mov	eax, 1

loc_6E41D3BD:				; CODE XREF: sub_6E41D330+C3j
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6E41D3C2:				; CODE XREF: sub_6E41D330+65j
		mov	[esp+2Ch+var_1C], 71Dh
		mov	[esp+2Ch+var_20], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 11Ah
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E41D3BD
sub_6E41D330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41D400	proc near		; CODE XREF: sub_6E401670+6B0p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], 70h
		mov	eax, [ebx+0E4h]
		test	eax, eax
		jz	short loc_6E41D490
		mov	edx, [eax+100h]
		test	edx, edx
		jz	short loc_6E41D490

loc_6E41D424:				; CODE XREF: sub_6E41D400+A2j
		mov	eax, [eax+104h]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	edx
		cmp	eax, 2
		jz	loc_6E41D4C0
		cmp	eax, 3
		jz	short loc_6E41D4A4
		dec	eax
		jz	short loc_6E41D460
		mov	eax, 1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D460:				; CODE XREF: sub_6E41D400+4Aj
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6E4151B0
		mov	eax, 1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D490:				; CODE XREF: sub_6E41D400+18j
					; sub_6E41D400+22j
		mov	eax, [ebx+170h]
		test	eax, eax
		jz	short loc_6E41D4A4
		mov	edx, [eax+100h]
		test	edx, edx
		jnz	short loc_6E41D424

loc_6E41D4A4:				; CODE XREF: sub_6E41D400+47j
					; sub_6E41D400+98j
		mov	dword ptr [ebx+124h], 0
		mov	eax, 1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D4C0:				; CODE XREF: sub_6E41D400+3Ej
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 2
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6E4151B0
		mov	eax, 0FFFFFFFFh
		add	esp, 28h
		pop	ebx
		retn
sub_6E41D400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41D4F0	proc near		; CODE XREF: sub_6E401670+C48p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		cmp	dword ptr [ebx+128h], 0FFFFFFFFh
		jz	short loc_6E41D570
		mov	eax, [ebx+0E4h]
		test	eax, eax
		jz	short loc_6E41D570
		mov	ecx, [eax+13Ch]
		test	ecx, ecx
		jz	short loc_6E41D570
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E4341D0
		test	eax, eax
		jz	short loc_6E41D590
		mov	edx, [ebx+98h]
		mov	[edx], eax
		mov	eax, [ebx+0E4h]
		mov	edx, [eax+13Ch]
		mov	eax, [eax+140h]
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], ebx
		call	edx
		cmp	eax, 2
		jz	short loc_6E41D5A0
		cmp	eax, 3
		jz	short loc_6E41D570
		test	eax, eax
		jnz	short loc_6E41D57A
		xor	eax, eax
		mov	edx, [ebx+138h]
		test	edx, edx
		setnz	al
		mov	[ebx+12Ch], eax
		jmp	short loc_6E41D57A
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D570:				; CODE XREF: sub_6E41D4F0+Fj
					; sub_6E41D4F0+19j ...
		mov	dword ptr [ebx+12Ch], 0

loc_6E41D57A:				; CODE XREF: sub_6E41D4F0+60j
					; sub_6E41D4F0+75j
		mov	eax, 1

loc_6E41D57F:				; CODE XREF: sub_6E41D4F0+ACj
					; sub_6E41D4F0+CDj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D590:				; CODE XREF: sub_6E41D4F0+2Fj
		mov	dword ptr [ebx+12Ch], 0
		mov	al, 1
		jmp	short loc_6E41D57F
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D5A0:				; CODE XREF: sub_6E41D4F0+57j
		mov	[esp+1Ch+var_14], 50h
		mov	[esp+1Ch+var_18], 2
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E4151B0
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E41D57F
sub_6E41D4F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41D5C0	proc near		; CODE XREF: sub_6E407B10+56Fp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_10], 70h
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		mov	ecx, [eax+0Ch]
		mov	esi, [eax+10h]
		mov	eax, [ebx+148h]
		test	eax, eax
		jz	short loc_6E41D5F9
		mov	edi, [ebx+144h]
		test	edi, edi
		jnz	loc_6E41D690

loc_6E41D5F9:				; CODE XREF: sub_6E41D5C0+29j
					; sub_6E41D5C0+DEj ...
		mov	eax, [ebx+0E4h]
		test	eax, eax
		jz	loc_6E41D7C0
		mov	edx, [eax+100h]
		test	edx, edx
		jz	loc_6E41D7C0

loc_6E41D615:				; CODE XREF: sub_6E41D5C0+212j
		mov	eax, [eax+104h]
		mov	[esp+3Ch+var_34], eax
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	edx
		mov	esi, eax

loc_6E41D62E:				; CODE XREF: sub_6E41D5C0+21Aj
		mov	eax, [ebx+138h]
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+138h], 0
		mov	dword ptr [ebx+13Ch], 0FFFFFFFFh
		cmp	dword ptr [ebx+128h], 0FFFFFFFFh
		jz	short loc_6E41D667
		mov	edx, [ebx+12Ch]
		test	edx, edx
		jz	loc_6E41D730

loc_6E41D667:				; CODE XREF: sub_6E41D5C0+97j
					; sub_6E41D5C0+175j ...
		cmp	esi, 2
		jz	loc_6E41D810
		cmp	esi, 3
		jz	loc_6E41D7A0
		dec	esi
		jz	loc_6E41D7E0
		mov	eax, 1

loc_6E41D685:				; CODE XREF: sub_6E41D5C0+160j
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D690:				; CODE XREF: sub_6E41D5C0+33j
		mov	eax, [ebx+0C0h]
		mov	edx, [eax+0D8h]
		test	edx, edx
		jz	loc_6E41D5F9
		mov	edi, [eax+0D4h]
		test	edi, edi
		jz	loc_6E41D5F9
		and	ecx, 0E0h
		jnz	short loc_6E41D6C3
		and	esi, 40h
		jz	loc_6E41D5F9

loc_6E41D6C3:				; CODE XREF: sub_6E41D5C0+F8j
		lea	eax, [edx+1]
		cmp	byte ptr [edx],	0
		jz	loc_6E41D5F9
		add	edx, edi
		jmp	short loc_6E41D6EB
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D6E0:				; CODE XREF: sub_6E41D5C0+12Dj
		inc	eax
		cmp	byte ptr [eax-1], 0
		jz	loc_6E41D5F9

loc_6E41D6EB:				; CODE XREF: sub_6E41D5C0+111j
		cmp	eax, edx
		jnz	short loc_6E41D6E0
		mov	[esp+3Ch+var_2C], 7F8h
		mov	[esp+3Ch+var_30], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+3Ch+var_34], 9Dh
		mov	[esp+3Ch+var_38], 118h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E41D685
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D730:				; CODE XREF: sub_6E41D5C0+A1j
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jnz	loc_6E41D667
		mov	eax, [ebx+0E4h]
		test	eax, eax
		jz	loc_6E41D667
		mov	edx, [eax+13Ch]
		test	edx, edx
		jz	loc_6E41D667
		mov	eax, [eax+140h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	edx
		test	eax, eax
		jnz	loc_6E41D820
		mov	[esp+3Ch+var_10], 71h
		mov	al, 71h

loc_6E41D778:				; CODE XREF: sub_6E41D5C0+254j
					; sub_6E41D5C0+273j
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4151B0
		mov	eax, 0FFFFFFFFh
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D7A0:				; CODE XREF: sub_6E41D5C0+B3j
		mov	dword ptr [ebx+124h], 0
		mov	eax, 1
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D7C0:				; CODE XREF: sub_6E41D5C0+41j
					; sub_6E41D5C0+4Fj
		mov	eax, [ebx+170h]
		test	eax, eax
		jz	short loc_6E41D7D8
		mov	edx, [eax+100h]
		test	edx, edx
		jnz	loc_6E41D615

loc_6E41D7D8:				; CODE XREF: sub_6E41D5C0+208j
		xor	esi, esi
		jmp	loc_6E41D62E
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D7E0:				; CODE XREF: sub_6E41D5C0+BAj
		mov	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4151B0
		mov	eax, 1
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D810:				; CODE XREF: sub_6E41D5C0+AAj
		mov	eax, [esp+3Ch+var_10]
		jmp	loc_6E41D778
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D820:				; CODE XREF: sub_6E41D5C0+1A8j
		jns	loc_6E41D667
		mov	[esp+3Ch+var_10], 50h
		mov	eax, 50h
		jmp	loc_6E41D778
sub_6E41D5C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41D840	proc near		; CODE XREF: sub_6E439430+57p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_C]
		mov	eax, [esp+2Ch+arg_10]
		mov	dword ptr [eax], 0
		mov	dword ptr [ebx+140h], 0
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 20h
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_ctrl
		test	ah, 40h
		jnz	short loc_6E41D8F0
		mov	edx, [ebx]
		cmp	edx, 300h
		jle	short loc_6E41D8F0
		test	esi, esi
		jz	short loc_6E41D8F0
		mov	eax, [esp+2Ch+arg_4]
		add	eax, [esp+2Ch+arg_8]
		cmp	eax, esi
		jnb	loc_6E41D9B0
		cmp	edx, 0FEFFh
		jz	loc_6E41D940

loc_6E41D8B2:				; CODE XREF: sub_6E41D840+10Aj
		xor	edx, edx
		mov	dl, [eax]
		shl	edx, 8
		xor	ecx, ecx
		mov	cl, [eax+1]
		or	edx, ecx
		and	edx, 0FFFFh
		lea	eax, [eax+edx+2]
		cmp	esi, eax
		jbe	loc_6E41D9B0
		xor	edx, edx
		mov	dl, [eax]
		lea	eax, [eax+edx+1]
		cmp	esi, eax
		jb	loc_6E41D9B0
		add	eax, 2
		cmp	esi, eax
		ja	short loc_6E41D936
		lea	esi, [esi+0]

loc_6E41D8F0:				; CODE XREF: sub_6E41D840+46j
					; sub_6E41D840+50j ...
		xor	esi, esi

loc_6E41D8F2:				; CODE XREF: sub_6E41D840+132j
					; sub_6E41D840+175j ...
		mov	eax, esi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D900:				; CODE XREF: sub_6E41D840+FBj
		xor	edx, edx
		mov	dl, [eax]
		shl	edx, 8
		xor	ecx, ecx
		mov	cl, [eax+1]
		or	edx, ecx
		xor	ecx, ecx
		mov	cl, [eax+2]
		shl	ecx, 8
		movzx	ebp, byte ptr [eax+3]
		and	ebp, 0FFh
		mov	eax, ebp
		or	ecx, eax
		xor	ebp, ebp
		mov	bp, cx
		lea	eax, [edi+ebp]
		cmp	esi, eax
		jb	short loc_6E41D8F0
		cmp	dx, 23h
		jz	short loc_6E41D960

loc_6E41D936:				; CODE XREF: sub_6E41D840+A7j
		lea	edi, [eax+4]
		cmp	esi, edi
		jnb	short loc_6E41D900
		jmp	short loc_6E41D8F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D940:				; CODE XREF: sub_6E41D840+6Cj
		xor	edx, edx
		mov	dl, [eax]
		lea	eax, [eax+edx+1]
		cmp	esi, eax
		ja	loc_6E41D8B2
		jmp	short loc_6E41D9B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D960:				; CODE XREF: sub_6E41D840+F4j
		test	cx, cx
		jz	short loc_6E41D9C0
		mov	esi, 2
		mov	eax, [ebx+168h]
		test	eax, eax
		jnz	loc_6E41D8F2
		mov	eax, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], eax
		mov	ecx, ebp
		mov	edx, edi
		mov	eax, ebx
		call	sub_6E41AA30
		cmp	eax, 3
		jz	short loc_6E41D9D4
		cmp	eax, 4
		jz	short loc_6E41D9ED
		cmp	eax, 2
		jz	short loc_6E41D9DE
		lea	esi, [esi+0]

loc_6E41D9B0:				; CODE XREF: sub_6E41D840+60j
					; sub_6E41D840+8Cj ...
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E41D8F2
; ---------------------------------------------------------------------------
		align 10h

loc_6E41D9C0:				; CODE XREF: sub_6E41D840+123j
		mov	dword ptr [ebx+140h], 1
		mov	esi, 1
		jmp	loc_6E41D8F2
; ---------------------------------------------------------------------------

loc_6E41D9D4:				; CODE XREF: sub_6E41D840+15Dj
		mov	esi, 3
		jmp	loc_6E41D8F2
; ---------------------------------------------------------------------------

loc_6E41D9DE:				; CODE XREF: sub_6E41D840+167j
		mov	dword ptr [ebx+140h], 1
		jmp	loc_6E41D8F2
; ---------------------------------------------------------------------------

loc_6E41D9ED:				; CODE XREF: sub_6E41D840+162j
		mov	dword ptr [ebx+140h], 1
		mov	esi, 3
		jmp	loc_6E41D8F2
sub_6E41D840	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E41DA10
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41DA10	proc near		; CODE XREF: sub_6E402830+17Ep
					; sub_6E40C3E0+281p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [esp+1Ch+arg_8]
		test	eax, eax
		jz	short loc_6E41DA6C
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_type
		cmp	eax, dword_6E449880
		jz	loc_6E41DAE0
		cmp	eax, dword_6E449888
		jz	loc_6E41DAF0
		cmp	eax, dword_6E449890
		jz	loc_6E41DB00
		cmp	eax, dword_6E449898
		jz	loc_6E41DB10
		cmp	eax, dword_6E4498A0
		jz	loc_6E41DB20
		cmp	eax, dword_6E4498A8
		jz	short loc_6E41DA80

loc_6E41DA6C:				; CODE XREF: sub_6E41DA10+Ej
					; sub_6E41DA10+86j ...
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DA80:				; CODE XREF: sub_6E41DA10+5Aj
		mov	eax, offset dword_6E4498A8
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E41DA90:				; CODE XREF: sub_6E41DA10+D5j
					; sub_6E41DA10+E5j ...
		mov	edx, [eax+4]
		cmp	edx, 0FFFFFFFFh
		jz	short loc_6E41DA6C
		mov	eax, [esp+1Ch+arg_4]
		mov	eax, [eax]
		cmp	eax, dword_6E449864
		jz	loc_6E41DB30
		cmp	eax, dword_6E44986C
		jz	loc_6E41DB40
		cmp	eax, dword_6E449874
		jnz	short loc_6E41DA6C
		mov	eax, offset dword_6E449874

loc_6E41DAC3:				; CODE XREF: sub_6E41DA10+125j
					; sub_6E41DA10+135j
		mov	eax, [eax+4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_6E41DA6C
		mov	[ebx], dl
		mov	[ebx+1], al
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DAE0:				; CODE XREF: sub_6E41DA10+1Ej
		mov	eax, offset dword_6E449880
		jmp	short loc_6E41DA90
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DAF0:				; CODE XREF: sub_6E41DA10+2Aj
		mov	eax, offset dword_6E449888
		jmp	short loc_6E41DA90
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DB00:				; CODE XREF: sub_6E41DA10+36j
		mov	eax, offset dword_6E449890
		jmp	short loc_6E41DA90
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DB10:				; CODE XREF: sub_6E41DA10+42j
		mov	eax, offset dword_6E449898
		jmp	loc_6E41DA90
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DB20:				; CODE XREF: sub_6E41DA10+4Ej
		mov	eax, offset dword_6E4498A0
		jmp	loc_6E41DA90
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DB30:				; CODE XREF: sub_6E41DA10+94j
		mov	eax, offset dword_6E449864
		jmp	short loc_6E41DAC3
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DB40:				; CODE XREF: sub_6E41DA10+A0j
		mov	eax, offset dword_6E44986C
		jmp	loc_6E41DAC3
sub_6E41DA10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41DB50	proc near		; CODE XREF: sub_6E404D90+2D2p
					; sub_6E408AD0+3F5p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, [eax]
		cmp	edx, dword_6E449864
		jz	short loc_6E41DB90
		cmp	edx, dword_6E44986C
		jz	short loc_6E41DBA0
		mov	eax, 0FFFFFFFFh
		cmp	edx, dword_6E449874
		jz	short loc_6E41DB80
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DB80:				; CODE XREF: sub_6E41DB50+21j
		mov	eax, offset dword_6E449874

loc_6E41DB85:				; CODE XREF: sub_6E41DB50+45j
					; sub_6E41DB50+55j
		mov	eax, [eax+4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DB90:				; CODE XREF: sub_6E41DB50+Cj
		mov	eax, offset dword_6E449864
		jmp	short loc_6E41DB85
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DBA0:				; CODE XREF: sub_6E41DB50+14j
		mov	eax, offset dword_6E44986C
		jmp	short loc_6E41DB85
sub_6E41DB50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41DBB0	proc near		; CODE XREF: sub_6E404D90+61Dp
					; sub_6E408AD0+41Bp

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	al, 6		; switch 7 cases
		ja	short loc_6E41DC20 ; jumptable 6E41DBBD	default	case
		and	eax, 0FFh
		jmp	ds:off_6E44C9AC[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DBD0:				; CODE XREF: sub_6E41DBB0+Dj
					; DATA XREF: .rdata:off_6E44C9ACo
		jmp	EVP_sha512	; jumptable 6E41DBBD case 6
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DBE0:				; CODE XREF: sub_6E41DBB0+Dj
					; DATA XREF: .rdata:off_6E44C9ACo
		jmp	EVP_sha1	; jumptable 6E41DBBD case 2
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DBF0:				; CODE XREF: sub_6E41DBB0+Dj
					; DATA XREF: .rdata:off_6E44C9ACo
		jmp	EVP_sha224	; jumptable 6E41DBBD case 3
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DC00:				; CODE XREF: sub_6E41DBB0+Dj
					; DATA XREF: .rdata:off_6E44C9ACo
		jmp	EVP_sha256	; jumptable 6E41DBBD case 4
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DC10:				; CODE XREF: sub_6E41DBB0+Dj
					; DATA XREF: .rdata:off_6E44C9ACo
		jmp	EVP_sha384	; jumptable 6E41DBBD case 5
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DC20:				; CODE XREF: sub_6E41DBB0+6j
					; sub_6E41DBB0+Dj
					; DATA XREF: ...
		xor	eax, eax	; jumptable 6E41DBBD default case
		retn
sub_6E41DBB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41DC30	proc near		; CODE XREF: sub_6E40A320+40Dp
					; sub_6E41DDD0+A91p

var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	edi, [eax+98h]
		mov	eax, [eax]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	short loc_6E41DC60

loc_6E41DC4D:				; CODE XREF: sub_6E41DC30+35j
					; sub_6E41DC30+F7j ...
		mov	eax, 1

loc_6E41DC52:				; CODE XREF: sub_6E41DC30+182j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DC60:				; CODE XREF: sub_6E41DC30+1Bj
		cmp	eax, 302h
		jle	short loc_6E41DC4D
		test	edi, edi
		jz	loc_6E41DDB0
		mov	dword ptr [edi+50h], 0
		mov	dword ptr [edi+44h], 0
		mov	dword ptr [edi+38h], 0
		mov	dword ptr [edi+74h], 0
		mov	eax, [esp+2Ch+arg_8]
		test	eax, eax
		jle	loc_6E41DD3A
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, [esp+2Ch+arg_8]
		dec	eax
		and	eax, 0FFFFFFFEh
		lea	edx, [ebx+eax+2]
		jmp	short loc_6E41DCBF
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DCB0:				; CODE XREF: sub_6E41DC30+96j
		cmp	al, 3
		jz	short loc_6E41DD00
		dec	al
		jz	short loc_6E41DCF0

loc_6E41DCB8:				; CODE XREF: sub_6E41DC30+AAj
					; sub_6E41DC30+AFj ...
		add	ebx, 2		; jumptable 6E41DCE7 default case
		cmp	ebx, edx
		jz	short loc_6E41DD10

loc_6E41DCBF:				; CODE XREF: sub_6E41DC30+77j
		mov	cl, [ebx]
		mov	al, [ebx+1]
		cmp	al, 2
		jnz	short loc_6E41DCB0
		mov	esi, 2

loc_6E41DCCD:				; CODE XREF: sub_6E41DC30+C5j
					; sub_6E41DC30+D5j
		lea	ebp, [esi+esi]
		lea	eax, [ebp+esi+0]
		mov	eax, [edi+eax*4+38h]
		test	eax, eax
		jnz	short loc_6E41DCB8 ; jumptable 6E41DCE7	default	case
		cmp	cl, 6		; switch 7 cases
		ja	short loc_6E41DCB8 ; jumptable 6E41DCE7	default	case
		and	ecx, 0FFh
		jmp	ds:off_6E44C9C8[ecx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DCF0:				; CODE XREF: sub_6E41DC30+86j
		mov	esi, 1
		jmp	short loc_6E41DCCD
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DD00:				; CODE XREF: sub_6E41DC30+82j
		mov	esi, 5
		jmp	short loc_6E41DCCD
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DD10:				; CODE XREF: sub_6E41DC30+8Dj
		mov	ecx, [edi+50h]
		test	ecx, ecx
		jz	short loc_6E41DD3A

loc_6E41DD17:				; CODE XREF: sub_6E41DC30+112j
		mov	edx, [edi+44h]
		test	edx, edx
		jz	loc_6E41DDB7

loc_6E41DD22:				; CODE XREF: sub_6E41DC30+197j
		mov	eax, [edi+74h]
		test	eax, eax
		jnz	loc_6E41DC4D
		call	EVP_sha1
		mov	[edi+74h], eax
		jmp	loc_6E41DC4D
; ---------------------------------------------------------------------------

loc_6E41DD3A:				; CODE XREF: sub_6E41DC30+61j
					; sub_6E41DC30+E5j
		call	EVP_sha1
		mov	[edi+50h], eax
		jmp	short loc_6E41DD17
; ---------------------------------------------------------------------------

loc_6E41DD44:				; CODE XREF: sub_6E41DC30+B7j
					; DATA XREF: .rdata:off_6E44C9C8o
		mov	[esp+2Ch+var_20], edx ;	jumptable 6E41DCE7 case	6
		call	EVP_sha512
		mov	edx, [esp+2Ch+var_20]

loc_6E41DD51:				; CODE XREF: sub_6E41DC30+14Bj
					; sub_6E41DC30+15Aj ...
		test	eax, eax
		jz	loc_6E41DCB8	; jumptable 6E41DCE7 default case
		add	ebp, esi
		mov	[edi+ebp*4+38h], eax
		dec	esi
		jnz	loc_6E41DCB8	; jumptable 6E41DCE7 default case
		mov	[edi+38h], eax
		jmp	loc_6E41DCB8	; jumptable 6E41DCE7 default case
; ---------------------------------------------------------------------------

loc_6E41DD6E:				; CODE XREF: sub_6E41DC30+B7j
					; DATA XREF: .rdata:off_6E44C9C8o
		mov	[esp+2Ch+var_20], edx ;	jumptable 6E41DCE7 case	5
		call	EVP_sha384
		mov	edx, [esp+2Ch+var_20]
		jmp	short loc_6E41DD51
; ---------------------------------------------------------------------------

loc_6E41DD7D:				; CODE XREF: sub_6E41DC30+B7j
					; DATA XREF: .rdata:off_6E44C9C8o
		mov	[esp+2Ch+var_20], edx ;	jumptable 6E41DCE7 case	4
		call	EVP_sha256
		mov	edx, [esp+2Ch+var_20]
		jmp	short loc_6E41DD51
; ---------------------------------------------------------------------------

loc_6E41DD8C:				; CODE XREF: sub_6E41DC30+B7j
					; DATA XREF: .rdata:off_6E44C9C8o
		mov	[esp+2Ch+var_20], edx ;	jumptable 6E41DCE7 case	3
		call	EVP_sha224
		mov	edx, [esp+2Ch+var_20]
		jmp	short loc_6E41DD51
; ---------------------------------------------------------------------------

loc_6E41DD9B:				; CODE XREF: sub_6E41DC30+B7j
					; DATA XREF: .rdata:off_6E44C9C8o
		mov	[esp+2Ch+var_20], edx ;	jumptable 6E41DCE7 case	2
		call	EVP_sha1
		mov	edx, [esp+2Ch+var_20]
		jmp	short loc_6E41DD51
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DDB0:				; CODE XREF: sub_6E41DC30+39j
		xor	eax, eax
		jmp	loc_6E41DC52
; ---------------------------------------------------------------------------

loc_6E41DDB7:				; CODE XREF: sub_6E41DC30+ECj
		call	EVP_sha1
		mov	[edi+44h], eax
		call	EVP_sha1
		mov	[edi+38h], eax
		jmp	loc_6E41DD22
sub_6E41DC30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41DDD0	proc near		; CODE XREF: sub_6E401670+6A0p

Str		= dword	ptr -6Ch
Buf2		= dword	ptr -68h
Size		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_46		= word ptr -46h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebp, [esp+6Ch+arg_0]
		mov	esi, [esp+6Ch+arg_8]
		mov	eax, [esp+6Ch+arg_4]
		mov	ebx, [eax]
		mov	dword ptr [ebp+124h], 0
		mov	dword ptr [ebp+128h], 0FFFFFFFFh
		mov	edi, [ebp+58h]
		mov	dword ptr [edi+41Ch], 0
		and	dword ptr [ebp+184h], 0FFFFFFFCh
		test	byte ptr [ebp+100h], 40h
		jnz	loc_6E41E180

loc_6E41DE1A:				; CODE XREF: sub_6E41DDD0+3B5j
					; sub_6E41DDD0+3C3j ...
		mov	eax, [ebp+1A4h]
		test	eax, eax
		jz	short loc_6E41DE36
		mov	[esp+6Ch+Str], eax
		call	CRYPTO_free
		mov	dword ptr [ebp+1A4h], 0

loc_6E41DE36:				; CODE XREF: sub_6E41DDD0+52j
		mov	dword ptr [ebp+180h], 0
		cmp	ebx, esi
		jz	loc_6E41E250
		lea	eax, [esi-2]
		cmp	ebx, eax
		jbe	short loc_6E41DE70

loc_6E41DE4F:				; CODE XREF: sub_6E41DDD0+C9j
					; sub_6E41DDD0+116j ...
		mov	eax, [esp+6Ch+arg_C]
		mov	dword ptr [eax], 32h
		mov	[esp+6Ch+var_4C], 0

loc_6E41DE61:				; CODE XREF: sub_6E41DDD0+49Fj
					; sub_6E41DDD0+71Ej ...
		mov	eax, [esp+6Ch+var_4C]
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DE70:				; CODE XREF: sub_6E41DDD0+7Dj
		lea	eax, [ebx+2]
		mov	ecx, eax
		mov	[esp+6Ch+var_44], eax
		movzx	edi, byte ptr [ebx]
		and	edi, 0FFh
		shl	edi, 8
		xor	edx, edx
		mov	dl, [ebx+1]
		or	edi, edx
		xor	eax, eax
		mov	ax, di
		add	eax, ecx
		mov	[esp+6Ch+var_40], eax
		cmp	eax, esi
		jnz	short loc_6E41DE4F
		lea	eax, [esi-4]
		mov	[esp+6Ch+var_38], eax
		cmp	ecx, eax
		ja	loc_6E41E96E
		movzx	edi, byte ptr [ebx+2]
		and	edi, 0FFh
		shl	edi, 8
		xor	eax, eax
		mov	al, [ebx+3]
		or	edi, eax
		xor	eax, eax
		mov	al, [ebx+4]
		mov	[esp+6Ch+var_46], ax
		shl	[esp+6Ch+var_46], 8
		xor	eax, eax
		mov	al, [ebx+5]
		or	[esp+6Ch+var_46], ax
		add	ebx, 6
		xor	eax, eax
		mov	ax, [esp+6Ch+var_46]
		add	eax, ebx
		cmp	esi, eax
		jb	loc_6E41DE4F
		mov	[esp+6Ch+var_34], 0
		mov	[esp+6Ch+var_30], 0
		mov	[esp+6Ch+arg_0], ebp
		mov	ebp, ebx

loc_6E41DF02:				; CODE XREF: sub_6E41DDD0+576j
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+118h]
		test	eax, eax
		jz	short loc_6E41DF43
		mov	ecx, [esp+6Ch+arg_0]
		mov	edx, [ecx+11Ch]
		mov	[esp+6Ch+var_58], edx
		xor	edx, edx
		mov	dx, [esp+6Ch+var_46]
		mov	[esp+6Ch+var_5C], edx
		mov	[esp+6Ch+var_60], ebp
		xor	edx, edx
		mov	dx, di
		mov	[esp+6Ch+Size],	edx
		mov	[esp+6Ch+Buf2],	0
		mov	[esp+6Ch+Str], ecx
		call	eax

loc_6E41DF43:				; CODE XREF: sub_6E41DDD0+13Ej
		test	di, di
		jnz	loc_6E41E280
		cmp	[esp+6Ch+var_46], 1
		jbe	loc_6E41DE4F
		mov	esi, [esp+6Ch+var_44]
		xor	eax, eax
		mov	al, [esi+4]
		shl	eax, 8
		xor	edx, edx
		mov	dl, [esi+5]
		or	eax, edx
		sub	[esp+6Ch+var_46], 2
		xor	edx, edx
		mov	dx, [esp+6Ch+var_46]
		cmp	eax, edx
		jg	loc_6E41DE4F
		cmp	eax, 3
		jle	loc_6E41E502
		mov	cl, [esi+6]
		xor	ebx, ebx
		mov	bl, [esi+7]
		shl	ebx, 8
		xor	edx, edx
		mov	dl, [esi+8]
		or	ebx, edx
		lea	ebp, [esi+9]
		sub	eax, 3
		xor	edx, edx
		mov	dx, bx
		cmp	eax, edx
		jl	loc_6E41DE4F
		mov	esi, [esp+6Ch+arg_0]
		mov	esi, [esi+124h]
		mov	word ptr [esp+6Ch+var_50], bx
		mov	ebx, edx
		mov	edx, eax
		jmp	loc_6E41E112
; ---------------------------------------------------------------------------
		align 10h

loc_6E41DFD0:				; CODE XREF: sub_6E41DDD0+35Bj
		mov	esi, [eax+0C0h]
		mov	eax, [esi+0D0h]
		test	eax, eax
		jnz	loc_6E41DE4F
		cmp	word ptr [esp+6Ch+var_50], 0FFh
		ja	loc_6E41E7CB
		mov	[esp+6Ch+var_3C], edx
		mov	[esp+6Ch+Size],	44Bh
		mov	[esp+6Ch+Buf2],	offset aT1_lib_c ; "t1_lib.c"
		lea	eax, [ebx+1]
		mov	[esp+6Ch+Str], eax
		call	CRYPTO_malloc
		mov	[esi+0D0h], eax
		test	eax, eax
		mov	edx, [esp+6Ch+var_3C]
		jz	loc_6E41E7A0
		mov	eax, [esp+6Ch+var_50]
		and	eax, 0FFFFh
		mov	esi, eax
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+0C0h]
		mov	ecx, [eax+0D0h]
		mov	[esp+6Ch+var_50], esi
		mov	eax, esi
		mov	edi, ecx
		mov	esi, ebp
		cmp	eax, 4
		jnb	loc_6E41E360

loc_6E41E050:				; CODE XREF: sub_6E41DDD0+5ACj
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E41E061
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E41E061:				; CODE XREF: sub_6E41DDD0+284j
		test	al, 1
		jz	short loc_6E41E06F
		mov	al, [esi+ecx]
		mov	byte ptr [esp+6Ch+var_3C], al
		mov	[edi+ecx], al

loc_6E41E06F:				; CODE XREF: sub_6E41DDD0+293j
		mov	[esp+6Ch+var_3C], edx
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+0C0h]
		mov	eax, [eax+0D0h]
		mov	edi, [esp+6Ch+var_50]
		mov	byte ptr [eax+edi], 0
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+0C0h]
		mov	esi, [eax+0D0h]
		mov	[esp+6Ch+Str], esi ; Str
		call	strlen
		cmp	edi, eax
		mov	edx, [esp+6Ch+var_3C]
		jnz	loc_6E41E7AF
		mov	eax, [esp+6Ch+arg_0]
		mov	dword ptr [eax+124h], 1
		mov	esi, 1
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E41E0D0:				; CODE XREF: sub_6E41DDD0+344j
					; sub_6E41DDD0+348j ...
		sub	edx, ebx
		cmp	edx, 3
		jle	loc_6E41E500
		mov	cl, [ebp+0]
		movzx	edi, byte ptr [ebp+1]
		and	edi, 0FFh
		mov	word ptr [esp+6Ch+var_50], di
		shl	word ptr [esp+6Ch+var_50], 8
		xor	eax, eax
		mov	al, [ebp+2]
		or	word ptr [esp+6Ch+var_50], ax
		add	ebp, 3
		sub	edx, 3
		xor	ebx, ebx
		mov	bx, word ptr [esp+6Ch+var_50]
		cmp	edx, ebx
		jl	loc_6E41DE4F

loc_6E41E112:				; CODE XREF: sub_6E41DDD0+1F1j
		test	esi, esi
		jnz	short loc_6E41E0D0
		test	cl, cl
		jnz	short loc_6E41E0D0
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+6Ch]
		mov	[esp+6Ch+var_4C], eax
		test	eax, eax
		mov	eax, [esp+6Ch+arg_0]
		jz	loc_6E41DFD0
		mov	eax, [eax+0C0h]
		mov	esi, [eax+0D0h]
		test	esi, esi
		jz	short loc_6E41E160
		mov	[esp+6Ch+var_4C], edx
		mov	[esp+6Ch+Str], esi ; Str
		call	strlen
		xor	edi, edi
		mov	di, word ptr [esp+6Ch+var_50]
		cmp	eax, edi
		mov	edx, [esp+6Ch+var_4C]
		jz	loc_6E41E390

loc_6E41E160:				; CODE XREF: sub_6E41DDD0+36Fj
		xor	eax, eax

loc_6E41E162:				; CODE XREF: sub_6E41DDD0+5E2j
		mov	ecx, [esp+6Ch+arg_0]
		mov	[ecx+124h], eax
		mov	esi, eax
		jmp	loc_6E41E0D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E180:				; CODE XREF: sub_6E41DDD0+44j
		lea	eax, [esi-2]
		cmp	ebx, eax
		jnb	loc_6E41DE1A
		lea	edx, [ebx+2]
		lea	eax, [esi-4]
		cmp	edx, eax
		ja	loc_6E41DE1A
		mov	al, [ebx+4]
		mov	cl, al
		mov	al, [ebx+5]
		mov	byte ptr [esp+6Ch+var_50], al
		xor	eax, eax
		mov	al, [ebx+2]
		shl	eax, 8
		xor	edx, edx
		mov	dl, [ebx+3]
		or	ax, dx
		jnz	loc_6E41DE1A
		mov	eax, ecx
		shl	eax, 8
		mov	edx, eax
		xor	ecx, ecx
		mov	cl, byte ptr [esp+6Ch+var_50]
		or	edx, ecx
		xor	eax, eax
		mov	ax, dx
		lea	ecx, [ebx+eax+6]
		cmp	esi, ecx
		jb	loc_6E41DE1A
		mov	eax, [ebp+110h]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	loc_6E41E6CE

loc_6E41E1EF:				; CODE XREF: sub_6E41DDD0+903j
		lea	eax, [ecx+12h]
		cmp	esi, eax
		jnz	loc_6E41DE1A
		mov	[esp+6Ch+Size],	12h ; Size
		mov	[esp+6Ch+Buf2],	offset dword_6E44C9F4 ;	Buf2
		mov	[esp+6Ch+Str], ecx ; Buf1
		call	memcmp
		test	eax, eax
		jnz	loc_6E41DE1A

loc_6E41E21A:				; CODE XREF: sub_6E41DDD0+959j
		mov	byte ptr [edi+420h], 1
		jmp	loc_6E41DE1A
; ---------------------------------------------------------------------------

loc_6E41E226:				; CODE XREF: sub_6E41DDD0+531j
		mov	ebp, [esp+6Ch+arg_0]

loc_6E41E22A:				; CODE XREF: sub_6E41DDD0+BA6j
		mov	eax, [esp+6Ch+var_44]
		cmp	[esp+6Ch+var_40], eax
		jnz	loc_6E41DE4F
		mov	eax, [esp+6Ch+arg_4]
		mov	ecx, [esp+6Ch+var_40]
		mov	[eax], ecx
		cmp	[esp+6Ch+var_30], 0
		jnz	short loc_6E41E267
		lea	esi, [esi+0]

loc_6E41E250:				; CODE XREF: sub_6E41DDD0+72j
		mov	eax, [ebp+190h]
		test	eax, eax
		jz	short loc_6E41E267
		test	byte ptr [ebp+102h], 4
		jz	loc_6E41E4B0

loc_6E41E267:				; CODE XREF: sub_6E41DDD0+477j
					; sub_6E41DDD0+488j
		mov	[esp+6Ch+var_4C], 1
		jmp	loc_6E41DE61
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E280:				; CODE XREF: sub_6E41DDD0+176j
		cmp	di, 0Ch
		jz	loc_6E41E520
		cmp	di, 0Bh
		jz	loc_6E41E3C0
		cmp	di, 0Ah
		jz	loc_6E41E5F0
		cmp	di, 23h
		jz	loc_6E41E760
		cmp	di, 0FF01h
		jz	loc_6E41E912
		cmp	di, 0Dh
		jz	loc_6E41E801
		cmp	di, 5
		jz	loc_6E41E87B
		cmp	di, 0Fh
		jz	loc_6E41E8EB
		cmp	di, 3374h
		jz	loc_6E41E94A

loc_6E41E2DC:				; CODE XREF: sub_6E41DDD0+AB5j
					; sub_6E41DDD0+B89j
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+8]
		cmp	dword ptr [eax], 0FEFFh
		jz	loc_6E41E97B
		nop

loc_6E41E2F0:				; CODE XREF: sub_6E41DDD0+61Cj
					; sub_6E41DDD0+6C6j ...
		xor	eax, eax
		mov	ax, [esp+6Ch+var_46]
		add	eax, ebp
		mov	[esp+6Ch+var_44], eax
		cmp	eax, [esp+6Ch+var_38]
		ja	loc_6E41E226
		mov	ecx, eax
		movzx	edi, byte ptr [eax]
		and	edi, 0FFh
		shl	edi, 8
		xor	eax, eax
		mov	al, [ecx+1]
		or	edi, eax
		xor	eax, eax
		mov	al, [ecx+2]
		mov	[esp+6Ch+var_46], ax
		shl	[esp+6Ch+var_46], 8
		xor	eax, eax
		mov	al, [ecx+3]
		or	[esp+6Ch+var_46], ax
		lea	ebp, [ecx+4]
		xor	eax, eax
		mov	ax, [esp+6Ch+var_46]
		add	eax, ebp
		cmp	[esp+6Ch+var_40], eax
		jnb	loc_6E41DF02
		jmp	loc_6E41DE4F
; ---------------------------------------------------------------------------
		jmp	short loc_6E41E360
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E360:				; CODE XREF: sub_6E41DDD0+27Aj
					; sub_6E41DDD0+581j
		test	cl, 1
		jnz	loc_6E41E7EE

loc_6E41E369:				; CODE XREF: sub_6E41DDD0+A2Cj
		test	edi, 2
		jnz	loc_6E41E7DA

loc_6E41E375:				; CODE XREF: sub_6E41DDD0+A19j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E41E050
; ---------------------------------------------------------------------------
		jmp	short loc_6E41E390
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E390:				; CODE XREF: sub_6E41DDD0+38Aj
					; sub_6E41DDD0+5B1j
		mov	[esp+6Ch+var_50], edx
		mov	[esp+6Ch+Size],	eax ; MaxCount
		mov	[esp+6Ch+Buf2],	ebp ; Str2
		mov	[esp+6Ch+Str], esi ; Str1
		call	strncmp
		test	eax, eax
		setz	al
		and	eax, 0FFh
		mov	edx, [esp+6Ch+var_50]
		jmp	loc_6E41E162
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E3C0:				; CODE XREF: sub_6E41DDD0+4BEj
		mov	eax, [esp+6Ch+var_44]
		movzx	esi, byte ptr [eax+4]
		xor	ebx, ebx
		mov	bx, [esp+6Ch+var_46]
		dec	ebx
		mov	eax, esi
		and	eax, 0FFh
		cmp	ebx, eax
		jnz	loc_6E41DE4F
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+6Ch]
		mov	[esp+6Ch+var_4C], eax
		test	eax, eax
		jnz	loc_6E41E2F0
		mov	eax, [esp+6Ch+arg_0]
		mov	edi, [eax+0C0h]
		mov	eax, [edi+0D8h]
		test	eax, eax
		jz	short loc_6E41E422
		mov	[esp+6Ch+Str], eax
		call	CRYPTO_free
		mov	eax, [esp+6Ch+arg_0]
		mov	edi, [eax+0C0h]
		mov	dword ptr [edi+0D8h], 0

loc_6E41E422:				; CODE XREF: sub_6E41DDD0+634j
		mov	dword ptr [edi+0D4h], 0
		mov	[esp+6Ch+Size],	489h
		mov	[esp+6Ch+Buf2],	offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+6Ch+Str], ebx
		call	CRYPTO_malloc
		mov	[edi+0D8h], eax
		test	eax, eax
		jz	loc_6E41E7A0
		mov	eax, [esp+6Ch+arg_0]
		mov	edx, [eax+0C0h]
		mov	eax, esi
		and	eax, 0FFh
		mov	[edx+0D4h], eax
		mov	ecx, [edx+0D8h]
		mov	esi, [esp+6Ch+var_44]
		lea	edx, [esi+5]
		mov	edi, ecx
		mov	esi, edx
		cmp	eax, 4
		jnb	loc_6E41E8CC

loc_6E41E483:				; CODE XREF: sub_6E41DDD0+8D7j
					; sub_6E41DDD0+8F9j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E41E494
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E41E494:				; CODE XREF: sub_6E41DDD0+6B7j
		test	al, 1
		jz	loc_6E41E2F0
		mov	al, [esi+edx]
		mov	byte ptr [esp+6Ch+var_50], al
		mov	[edi+edx], al
		jmp	loc_6E41E2F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E4B0:				; CODE XREF: sub_6E41DDD0+491j
		mov	eax, [esp+6Ch+arg_C]
		mov	dword ptr [eax], 28h
		mov	[esp+6Ch+var_5C], 584h
		mov	[esp+6Ch+var_60], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+6Ch+Size],	152h
		mov	[esp+6Ch+Buf2],	12Eh
		mov	[esp+6Ch+Str], 14h
		call	ERR_put_error

loc_6E41E4E6:				; CODE XREF: sub_6E41DDD0+B67j
					; sub_6E41DDD0+BF4j ...
		mov	[esp+6Ch+var_4C], 0
		jmp	loc_6E41DE61
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E500:				; CODE XREF: sub_6E41DDD0+305j
		mov	eax, edx

loc_6E41E502:				; CODE XREF: sub_6E41DDD0+1B3j
		test	eax, eax
		jnz	loc_6E41DE4F
		mov	ebp, [esp+6Ch+var_44]
		add	ebp, 6
		jmp	loc_6E41E2F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E520:				; CODE XREF: sub_6E41DDD0+4B4j
		mov	cx, [esp+6Ch+var_46]
		test	cx, cx
		jz	loc_6E41DE4F
		mov	esi, [esp+6Ch+var_44]
		xor	ebx, ebx
		mov	bl, [esi+4]
		xor	eax, eax
		mov	ax, cx
		mov	ecx, eax
		mov	[esp+6Ch+var_50], ecx
		dec	eax
		cmp	ebx, eax
		jnz	loc_6E41DE4F
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+1A4h]
		test	eax, eax
		jnz	loc_6E41DE4F
		mov	[esp+6Ch+Size],	471h
		mov	[esp+6Ch+Buf2],	offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+6Ch+Str], ecx
		call	CRYPTO_malloc
		mov	ecx, [esp+6Ch+arg_0]
		mov	[ecx+1A4h], eax
		test	eax, eax
		jz	loc_6E41EB4E
		mov	ecx, esi
		add	ecx, 5
		mov	edx, ebx
		mov	edi, eax
		mov	esi, ecx
		cmp	ebx, 4
		jnb	loc_6E41E740

loc_6E41E59B:				; CODE XREF: sub_6E41DDD0+98Bj
		xor	eax, eax
		test	dl, 2
		jz	short loc_6E41E5AD
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2

loc_6E41E5AD:				; CODE XREF: sub_6E41DDD0+7D0j
		and	edx, 1
		jz	short loc_6E41E5BC
		mov	cl, [esi+eax]
		mov	byte ptr [esp+6Ch+var_50], cl
		mov	[edi+eax], cl

loc_6E41E5BC:				; CODE XREF: sub_6E41DDD0+7E0j
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+1A4h]
		mov	byte ptr [eax+ebx], 0
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+1A4h]
		mov	[esp+6Ch+Str], eax ; Str
		call	strlen
		cmp	ebx, eax
		jz	loc_6E41E2F0
		jmp	loc_6E41DE4F
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E5F0:				; CODE XREF: sub_6E41DDD0+4C8j
		mov	ecx, [esp+6Ch+var_44]
		xor	eax, eax
		mov	al, [ecx+4]
		shl	eax, 8
		xor	ebx, ebx
		mov	bx, [esp+6Ch+var_46]
		sub	ebx, 2
		xor	edx, edx
		mov	dl, [ecx+5]
		add	eax, edx
		cmp	ebx, eax
		jnz	loc_6E41DE4F
		test	ebx, ebx
		jz	loc_6E41DE4F
		test	bl, 1
		jnz	loc_6E41DE4F
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+6Ch]
		mov	[esp+6Ch+var_4C], eax
		test	eax, eax
		jnz	loc_6E41E2F0
		mov	eax, [esp+6Ch+arg_0]
		mov	esi, [eax+0C0h]
		mov	edi, [esi+0E0h]
		test	edi, edi
		jnz	loc_6E41DE4F
		mov	dword ptr [esi+0DCh], 0
		mov	[esp+6Ch+Size],	4ACh
		mov	[esp+6Ch+Buf2],	offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+6Ch+Str], ebx
		call	CRYPTO_malloc
		mov	[esi+0E0h], eax
		test	eax, eax
		jz	loc_6E41E7A0
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+0C0h]
		mov	[eax+0DCh], ebx
		mov	ecx, [eax+0E0h]
		mov	eax, [esp+6Ch+var_44]
		lea	edx, [eax+6]
		mov	eax, ebx
		mov	edi, ecx
		mov	esi, edx
		cmp	ebx, 4
		jb	loc_6E41E483
		test	cl, 1
		jnz	loc_6E41EB6F

loc_6E41E6B6:				; CODE XREF: sub_6E41DDD0+AFFj
					; sub_6E41DDD0+B16j ...
		test	edi, 2
		jnz	loc_6E41EB5B

loc_6E41E6C2:				; CODE XREF: sub_6E41DDD0+D9Aj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E41E483
; ---------------------------------------------------------------------------

loc_6E41E6CE:				; CODE XREF: sub_6E41DDD0+419j
		cmp	eax, 302h
		jle	loc_6E41E1EF
		lea	eax, [ecx+22h]
		cmp	esi, eax
		jnz	loc_6E41DE1A
		mov	[esp+6Ch+Size],	12h ; Size
		mov	[esp+6Ch+Buf2],	offset dword_6E44C9F4 ;	Buf2
		mov	[esp+6Ch+Str], ecx ; Buf1
		mov	[esp+6Ch+var_50], ecx
		call	memcmp
		test	eax, eax
		jnz	loc_6E41DE1A
		mov	[esp+6Ch+Size],	10h ; Size
		mov	[esp+6Ch+Buf2],	offset dword_6E44C9E4 ;	Buf2
		mov	ecx, [esp+6Ch+var_50]
		lea	eax, [ecx+12h]
		mov	[esp+6Ch+Str], eax ; Buf1
		call	memcmp
		test	eax, eax
		jz	loc_6E41E21A
		jmp	loc_6E41DE1A
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E740:				; CODE XREF: sub_6E41DDD0+7C5j
		test	al, 1
		jnz	loc_6E41EA0B

loc_6E41E748:				; CODE XREF: sub_6E41DDD0+C52j
		test	edi, 2
		jnz	loc_6E41E9F7

loc_6E41E754:				; CODE XREF: sub_6E41DDD0+C36j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E41E59B
; ---------------------------------------------------------------------------

loc_6E41E760:				; CODE XREF: sub_6E41DDD0+4D2j
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+160h]
		test	eax, eax
		jz	loc_6E41E2F0
		mov	ecx, [esp+6Ch+arg_0]
		mov	edx, [ecx+164h]
		mov	[esp+6Ch+var_60], edx
		xor	edx, edx
		mov	dx, [esp+6Ch+var_46]
		mov	[esp+6Ch+Size],	edx
		mov	[esp+6Ch+Buf2],	ebp
		mov	[esp+6Ch+Str], ecx
		call	eax
		mov	[esp+6Ch+var_4C], eax
		test	eax, eax
		jnz	loc_6E41E2F0

loc_6E41E7A0:				; CODE XREF: sub_6E41DDD0+24Cj
					; sub_6E41DDD0+67Cj ...
		mov	eax, [esp+6Ch+arg_C]
		mov	dword ptr [eax], 50h
		jmp	loc_6E41DE61
; ---------------------------------------------------------------------------

loc_6E41E7AF:				; CODE XREF: sub_6E41DDD0+2D9j
		mov	ebp, [esp+6Ch+arg_0]
		mov	[esp+6Ch+Str], esi
		call	CRYPTO_free
		mov	eax, [ebp+0C0h]
		mov	dword ptr [eax+0D0h], 0

loc_6E41E7CB:				; CODE XREF: sub_6E41DDD0+21Bj
		mov	eax, [esp+6Ch+arg_C]
		mov	dword ptr [eax], 70h
		jmp	loc_6E41DE61
; ---------------------------------------------------------------------------

loc_6E41E7DA:				; CODE XREF: sub_6E41DDD0+59Fj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E41E375
; ---------------------------------------------------------------------------

loc_6E41E7EE:				; CODE XREF: sub_6E41DDD0+593j
		mov	al, [ebp+0]
		mov	[ecx], al
		inc	edi
		lea	esi, [ebp+1]
		mov	eax, [esp+6Ch+var_50]
		dec	eax
		jmp	loc_6E41E369
; ---------------------------------------------------------------------------

loc_6E41E801:				; CODE XREF: sub_6E41DDD0+4E7j
		mov	ecx, [esp+6Ch+var_34]
		test	ecx, ecx
		jnz	loc_6E41DE4F
		cmp	[esp+6Ch+var_46], 1
		jbe	loc_6E41DE4F
		mov	ecx, [esp+6Ch+var_44]
		lea	ebp, [ecx+6]
		sub	[esp+6Ch+var_46], 2
		mov	bx, [esp+6Ch+var_46]
		xor	edx, edx
		mov	dx, bx
		xor	eax, eax
		mov	al, [ecx+4]
		shl	eax, 8
		mov	esi, ecx
		xor	ecx, ecx
		mov	cl, [esi+5]
		or	eax, ecx
		cmp	edx, eax
		jnz	loc_6E41DE4F
		and	ebx, 1
		jnz	loc_6E41DE4F
		mov	[esp+6Ch+Size],	edx
		mov	[esp+6Ch+Buf2],	ebp
		mov	eax, [esp+6Ch+arg_0]
		mov	[esp+6Ch+Str], eax
		call	sub_6E41DC30
		test	eax, eax
		jz	loc_6E41DE4F
		mov	[esp+6Ch+var_34], 1
		jmp	loc_6E41E2F0
; ---------------------------------------------------------------------------

loc_6E41E87B:				; CODE XREF: sub_6E41DDD0+4F1j
		mov	eax, [esp+6Ch+arg_0]
		cmp	dword ptr [eax], 0FEFFh
		jz	loc_6E41E2DC
		cmp	[esp+6Ch+var_46], 4
		jbe	loc_6E41DE4F
		mov	ecx, [esp+6Ch+var_44]
		xor	eax, eax
		mov	al, [ecx+4]
		mov	ecx, [esp+6Ch+arg_0]
		mov	[ecx+128h], eax
		dec	eax
		jz	loc_6E41EA27
		mov	ebp, [esp+6Ch+var_44]
		add	ebp, 5
		dec	[esp+6Ch+var_46]
		mov	dword ptr [ecx+128h], 0FFFFFFFFh
		jmp	loc_6E41E2F0
; ---------------------------------------------------------------------------

loc_6E41E8CC:				; CODE XREF: sub_6E41DDD0+6ADj
		test	cl, 1
		jz	loc_6E41E6B6
		mov	bl, [edx]
		mov	byte ptr [esp+6Ch+var_50], bl
		mov	[ecx], bl
		inc	edi
		mov	esi, [esp+6Ch+var_44]
		add	esi, 6
		dec	eax
		jmp	loc_6E41E6B6
; ---------------------------------------------------------------------------

loc_6E41E8EB:				; CODE XREF: sub_6E41DDD0+4FBj
		mov	eax, [esp+6Ch+var_44]
		mov	al, [eax+4]
		cmp	al, 1
		jz	loc_6E41E9E7
		cmp	al, 2
		jnz	loc_6E41E9D0
		mov	eax, [esp+6Ch+arg_0]
		or	dword ptr [eax+184h], 3
		jmp	loc_6E41E2F0
; ---------------------------------------------------------------------------

loc_6E41E912:				; CODE XREF: sub_6E41DDD0+4DDj
		mov	eax, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_60], eax
		xor	eax, eax
		mov	ax, [esp+6Ch+var_46]
		mov	[esp+6Ch+Size],	eax
		mov	[esp+6Ch+Buf2],	ebp
		mov	eax, [esp+6Ch+arg_0]
		mov	[esp+6Ch+Str], eax
		call	sub_6E445900
		test	eax, eax
		jz	loc_6E41E4E6
		mov	[esp+6Ch+var_30], 1
		jmp	loc_6E41E2F0
; ---------------------------------------------------------------------------

loc_6E41E94A:				; CODE XREF: sub_6E41DDD0+506j
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+58h]
		mov	edx, [eax+2B4h]
		test	edx, edx
		jnz	loc_6E41E2DC
		mov	dword ptr [eax+41Ch], 1
		jmp	loc_6E41E2F0
; ---------------------------------------------------------------------------

loc_6E41E96E:				; CODE XREF: sub_6E41DDD0+D4j
		mov	[esp+6Ch+var_30], 0
		jmp	loc_6E41E22A
; ---------------------------------------------------------------------------

loc_6E41E97B:				; CODE XREF: sub_6E41DDD0+519j
		mov	eax, [esp+6Ch+arg_0]
		mov	[esp+6Ch+Str], eax
		call	SSL_get_srtp_profiles
		test	eax, eax
		jz	loc_6E41E2F0
		cmp	di, 0Eh
		jnz	loc_6E41E2F0
		mov	eax, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_60], eax
		xor	eax, eax
		mov	ax, [esp+6Ch+var_46]
		mov	[esp+6Ch+Size],	eax
		mov	[esp+6Ch+Buf2],	ebp
		mov	eax, [esp+6Ch+arg_0]
		mov	[esp+6Ch+Str], eax
		call	sub_6E42FAF0
		test	eax, eax
		jz	loc_6E41E2F0
		jmp	loc_6E41E4E6
; ---------------------------------------------------------------------------
		align 10h

loc_6E41E9D0:				; CODE XREF: sub_6E41DDD0+B2Cj
		mov	eax, [esp+6Ch+arg_C]
		mov	dword ptr [eax], 2Fh
		mov	[esp+6Ch+var_4C], 0
		jmp	loc_6E41DE61
; ---------------------------------------------------------------------------

loc_6E41E9E7:				; CODE XREF: sub_6E41DDD0+B24j
		mov	eax, [esp+6Ch+arg_0]
		or	dword ptr [eax+184h], 1
		jmp	loc_6E41E2F0
; ---------------------------------------------------------------------------

loc_6E41E9F7:				; CODE XREF: sub_6E41DDD0+97Ej
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E41E754
; ---------------------------------------------------------------------------

loc_6E41EA0B:				; CODE XREF: sub_6E41DDD0+972j
		mov	cl, [ecx]
		mov	byte ptr [esp+6Ch+var_4C], cl
		mov	[eax], cl
		inc	edi
		mov	esi, [esp+6Ch+var_44]
		add	esi, 6
		mov	edx, [esp+6Ch+var_50]
		sub	edx, 2
		jmp	loc_6E41E748
; ---------------------------------------------------------------------------

loc_6E41EA27:				; CODE XREF: sub_6E41DDD0+ADBj
		mov	eax, [esp+6Ch+var_44]
		xor	ecx, ecx
		mov	cl, [eax+5]
		shl	ecx, 8
		mov	esi, eax
		xor	eax, eax
		mov	al, [esi+6]
		or	ecx, eax
		mov	ax, [esp+6Ch+var_46]
		lea	ebx, [eax-3]
		xor	eax, eax
		mov	ax, bx
		cmp	ecx, eax
		jg	loc_6E41DE4F
		test	ecx, ecx
		jz	loc_6E41EC45
		cmp	ecx, 3
		jle	loc_6E41DE4F
		mov	esi, [esp+6Ch+var_44]
		xor	eax, eax
		mov	al, [esi+7]
		shl	eax, 8
		xor	edx, edx
		mov	dl, [esi+8]
		or	eax, edx
		lea	edx, [esi+9]
		mov	esi, 0FFFFFFFEh
		sub	esi, eax
		mov	bx, [esp+6Ch+var_46]
		sub	ebx, 5
		sub	ebx, eax
		add	esi, ecx
		jns	short loc_6E41EAEF
		jmp	loc_6E41DE4F
; ---------------------------------------------------------------------------
		align 10h

loc_6E41EAA0:				; CODE XREF: sub_6E41DDD0+D5Aj
					; sub_6E41DDD0+D79j
		mov	[esp+6Ch+Buf2],	edi
		mov	[esp+6Ch+Str], edx
		call	sk_push
		test	eax, eax
		jz	loc_6E41EC2E
		test	esi, esi
		jle	loc_6E41EB92
		cmp	esi, 3
		jle	loc_6E41DE4F
		xor	eax, eax
		mov	al, [ebp+0]
		shl	eax, 8
		xor	edx, edx
		mov	dl, [ebp+1]
		or	eax, edx
		lea	edx, [ebp+2]
		mov	ecx, 0FFFFFFFEh
		sub	ecx, eax
		mov	ebp, 0FFFFFFFEh
		sub	ebp, eax
		add	ebx, ebp
		add	esi, ecx
		js	loc_6E41DE4F

loc_6E41EAEF:				; CODE XREF: sub_6E41DDD0+CBBj
		mov	[esp+6Ch+var_20], edx
		lea	ebp, [edx+eax]
		mov	[esp+6Ch+Size],	eax
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+Buf2],	eax
		mov	[esp+6Ch+Str], 0
		call	d2i_OCSP_RESPID
		mov	edi, eax
		test	eax, eax
		jz	loc_6E41DE4F
		cmp	ebp, [esp+6Ch+var_20]
		jnz	short loc_6E41EB85
		mov	eax, [esp+6Ch+arg_0]
		mov	edx, [eax+130h]
		test	edx, edx
		jnz	loc_6E41EAA0
		call	sk_new_null
		mov	ecx, [esp+6Ch+arg_0]
		mov	[ecx+130h], eax
		test	eax, eax
		jz	loc_6E41EC2E
		mov	edx, eax
		jmp	loc_6E41EAA0
; ---------------------------------------------------------------------------

loc_6E41EB4E:				; CODE XREF: sub_6E41DDD0+7B1j
		mov	[esp+6Ch+var_4C], 0FFFFFFFFh
		jmp	loc_6E41DE61
; ---------------------------------------------------------------------------

loc_6E41EB5B:				; CODE XREF: sub_6E41DDD0+8ECj
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E41E6C2
; ---------------------------------------------------------------------------

loc_6E41EB6F:				; CODE XREF: sub_6E41DDD0+8E0j
		mov	bl, [edx]
		mov	byte ptr [esp+6Ch+var_50], bl
		mov	[ecx], bl
		inc	edi
		mov	esi, [esp+6Ch+var_44]
		add	esi, 7
		dec	eax
		jmp	loc_6E41E6B6
; ---------------------------------------------------------------------------

loc_6E41EB85:				; CODE XREF: sub_6E41DDD0+D4Cj
		mov	[esp+6Ch+Str], eax
		call	OCSP_RESPID_free
		jmp	loc_6E41DE4F
; ---------------------------------------------------------------------------

loc_6E41EB92:				; CODE XREF: sub_6E41DDD0+CE6j
		mov	edi, ebp
		cmp	bx, 1
		jbe	loc_6E41DE4F

loc_6E41EB9E:				; CODE XREF: sub_6E41DDD0+E7Cj
		movzx	esi, byte ptr [edi]
		and	esi, 0FFh
		shl	esi, 8
		xor	eax, eax
		mov	al, [edi+1]
		or	esi, eax
		lea	ebp, [edi+2]
		lea	eax, [ebx-2]
		mov	[esp+6Ch+var_46], ax
		xor	ebx, ebx
		mov	bx, ax
		cmp	ebx, esi
		jnz	loc_6E41DE4F
		mov	[esp+6Ch+var_20], ebp
		test	ebx, ebx
		jz	loc_6E41E2F0
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+134h]
		test	eax, eax
		jz	short loc_6E41EBF3
		mov	[esp+6Ch+Buf2],	offset loc_6E446470
		mov	[esp+6Ch+Str], eax
		call	sk_pop_free

loc_6E41EBF3:				; CODE XREF: sub_6E41DDD0+E11j
		mov	[esp+6Ch+Size],	ebx
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+Buf2],	eax
		mov	[esp+6Ch+Str], 0
		call	d2i_X509_EXTENSIONS
		mov	ecx, [esp+6Ch+arg_0]
		mov	[ecx+134h], eax
		test	eax, eax
		jz	loc_6E41DE4F
		add	esi, ebp
		cmp	[esp+6Ch+var_20], esi
		jz	loc_6E41E2F0
		jmp	loc_6E41DE4F
; ---------------------------------------------------------------------------

loc_6E41EC2E:				; CODE XREF: sub_6E41DDD0+CDEj
					; sub_6E41DDD0+D71j
		mov	[esp+6Ch+Str], edi
		call	OCSP_RESPID_free
		mov	eax, [esp+6Ch+arg_C]
		mov	dword ptr [eax], 50h
		jmp	loc_6E41E4E6
; ---------------------------------------------------------------------------

loc_6E41EC45:				; CODE XREF: sub_6E41DDD0+C83j
		mov	edi, [esp+6Ch+var_44]
		add	edi, 7
		jmp	loc_6E41EB9E
sub_6E41DDD0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E41EC60
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41EC60	proc near		; CODE XREF: sub_6E413BF0+12DCp
					; .text:6E41EC51j

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	edi, [eax+118h]
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	short loc_6E41ECAE
		mov	ecx, [ebx+68h]
		mov	esi, [eax+110h]
		mov	eax, [ebx]
		mov	[esp+4Ch+var_34], ecx
		mov	[esp+4Ch+var_38], ebx
		mov	[esp+4Ch+var_3C], esi
		mov	[esp+4Ch+var_40], edi
		mov	[esp+4Ch+var_44], 18h
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], 0
		call	edx
		mov	eax, [ebx+58h]

loc_6E41ECAE:				; CODE XREF: sub_6E41EC60+19j
		mov	eax, [eax+110h]
		cmp	eax, 12h
		jbe	short loc_6E41ECE6
		mov	cl, [edi]
		movzx	ebp, byte ptr [edi+1]
		and	ebp, 0FFh
		shl	ebp, 8
		xor	edx, edx
		mov	dl, [edi+2]
		or	ebp, edx
		lea	edx, [ebp+13h]
		cmp	eax, edx
		jb	short loc_6E41ECE6
		xor	eax, eax
		mov	al, cl
		cmp	ax, 1
		jz	short loc_6E41ED30
		cmp	ax, 2
		jz	short loc_6E41ECF0

loc_6E41ECE6:				; CODE XREF: sub_6E41EC60+57j
					; sub_6E41EC60+74j ...
		xor	eax, eax

loc_6E41ECE8:				; CODE XREF: sub_6E41EC60+CEj
					; sub_6E41EC60+245j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E41ECF0:				; CODE XREF: sub_6E41EC60+84j
		mov	al, [edi+3]
		movzx	edi, byte ptr [edi+4]
		cmp	ebp, 12h
		jnz	short loc_6E41ECE6
		mov	ecx, [ebx+18Ch]
		mov	esi, eax
		and	esi, 0FFh
		shl	esi, 8
		mov	edx, edi
		and	edx, 0FFh
		or	esi, edx
		cmp	ecx, esi
		jnz	short loc_6E41ECE6
		inc	ecx
		mov	[ebx+18Ch], ecx
		mov	dword ptr [ebx+188h], 0
		xor	eax, eax
		jmp	short loc_6E41ECE8
; ---------------------------------------------------------------------------

loc_6E41ED30:				; CODE XREF: sub_6E41EC60+7Ej
		mov	[esp+4Ch+var_44], 0A15h
		mov	[esp+4Ch+var_48], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+4Ch+var_4C], edx
		mov	[esp+4Ch+var_20], edx
		call	CRYPTO_malloc
		mov	esi, eax
		mov	[esp+4Ch+var_28], eax
		mov	byte ptr [eax],	2
		mov	eax, ebp
		shr	eax, 8
		mov	[esi+1], al
		mov	eax, ebp
		mov	[esi+2], al
		lea	eax, [esi+3]
		mov	[esp+4Ch+var_24], eax
		mov	[esp+4Ch+var_30], ebp
		mov	[esp+4Ch+var_2C], eax
		lea	esi, [edi+3]
		cmp	ebp, 4
		mov	edx, [esp+4Ch+var_20]
		jnb	loc_6E41EE70

loc_6E41ED81:				; CODE XREF: sub_6E41EC60+22Cj
		xor	ecx, ecx
		test	byte ptr [esp+4Ch+var_30], 2
		jnz	loc_6E41EE50

loc_6E41ED8E:				; CODE XREF: sub_6E41EC60+1FFj
		test	byte ptr [esp+4Ch+var_30], 1
		jnz	loc_6E41EE30

loc_6E41ED99:				; CODE XREF: sub_6E41EC60+1DEj
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_48], 10h
		add	ebp, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], ebp
		call	RAND_pseudo_bytes
		test	eax, eax
		mov	edx, [esp+4Ch+var_30]
		js	loc_6E41EEE0
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_30], edx
		mov	edi, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_48], 18h
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E4132F0
		test	eax, eax
		js	loc_6E41EE91
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_6E41EE1A
		mov	esi, [ebx+68h]
		mov	ecx, [ebx]
		mov	[esp+4Ch+var_34], esi
		mov	[esp+4Ch+var_38], ebx
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_3C], edx
		mov	[esp+4Ch+var_40], edi
		mov	[esp+4Ch+var_44], 18h
		mov	[esp+4Ch+var_48], ecx
		mov	[esp+4Ch+var_4C], 1
		call	eax

loc_6E41EE1A:				; CODE XREF: sub_6E41EC60+18Aj
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	CRYPTO_free
		jmp	loc_6E41ECE6
; ---------------------------------------------------------------------------
		align 10h

loc_6E41EE30:				; CODE XREF: sub_6E41EC60+133j
		mov	al, [esi+ecx]
		mov	byte ptr [esp+4Ch+var_30], al
		mov	esi, [esp+4Ch+var_2C]
		mov	[esi+ecx], al
		jmp	loc_6E41ED99
; ---------------------------------------------------------------------------
		align 10h

loc_6E41EE50:				; CODE XREF: sub_6E41EC60+128j
		mov	cx, [esi]
		mov	eax, [esp+4Ch+var_2C]
		mov	[eax], cx
		mov	ecx, 2
		jmp	loc_6E41ED8E
; ---------------------------------------------------------------------------
		align 10h

loc_6E41EE70:				; CODE XREF: sub_6E41EC60+11Bj
		test	al, 1
		jnz	short loc_6E41EEC3

loc_6E41EE74:				; CODE XREF: sub_6E41EC60+27Ej
		test	byte ptr [esp+4Ch+var_2C], 2
		jnz	short loc_6E41EEAA

loc_6E41EE7B:				; CODE XREF: sub_6E41EC60+261j
		mov	ecx, [esp+4Ch+var_30]
		shr	ecx, 2
		mov	edi, [esp+4Ch+var_2C]
		rep movsd
		mov	[esp+4Ch+var_2C], edi
		jmp	loc_6E41ED81
; ---------------------------------------------------------------------------

loc_6E41EE91:				; CODE XREF: sub_6E41EC60+17Fj
		mov	[esp+4Ch+var_30], eax
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	CRYPTO_free
		mov	eax, [esp+4Ch+var_30]
		jmp	loc_6E41ECE8
; ---------------------------------------------------------------------------

loc_6E41EEAA:				; CODE XREF: sub_6E41EC60+219j
		mov	cx, [esi]
		mov	eax, [esp+4Ch+var_2C]
		mov	[eax], cx
		add	[esp+4Ch+var_2C], 2
		add	esi, 2
		sub	[esp+4Ch+var_30], 2
		jmp	short loc_6E41EE7B
; ---------------------------------------------------------------------------

loc_6E41EEC3:				; CODE XREF: sub_6E41EC60+212j
		mov	esi, [esp+4Ch+var_28]
		mov	al, [edi+3]
		mov	[esi+3], al
		lea	eax, [esi+4]
		mov	[esp+4Ch+var_2C], eax
		lea	esi, [edi+4]
		lea	eax, [ebp-1]
		mov	[esp+4Ch+var_30], eax
		jmp	short loc_6E41EE74
; ---------------------------------------------------------------------------

loc_6E41EEE0:				; CODE XREF: sub_6E41EC60+157j
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	CRYPTO_free
		or	eax, 0FFFFFFFFh
		jmp	loc_6E41ECE8
sub_6E41EC60	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6E40E840

loc_6E41EF00:				; CODE XREF: sub_6E40E840+D1j
		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+184h]
		and	eax, 3
		dec	eax
		jnz	loc_6E41F0C0
		mov	edx, [ebx+188h]
		test	edx, edx
		jnz	loc_6E41F100
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_state
		test	ah, 30h
		jnz	loc_6E41F080
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jnz	loc_6E41F080
		mov	[esp+2Ch+var_24], 0A6Bh
		mov	[esp+2Ch+var_28], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+2Ch+var_2C], 25h
		call	CRYPTO_malloc
		mov	esi, eax
		mov	byte ptr [eax],	1
		mov	byte ptr [eax+1], 0
		mov	byte ptr [eax+2], 12h
		mov	eax, [ebx+18Ch]
		shr	eax, 8
		mov	[esi+3], al
		mov	eax, [ebx+18Ch]
		mov	[esi+4], al
		mov	[esp+2Ch+var_28], 10h
		lea	eax, [esi+5]
		mov	[esp+2Ch+var_2C], eax
		call	RAND_pseudo_bytes
		test	eax, eax
		js	loc_6E41F030
		mov	[esp+2Ch+var_28], 10h
		lea	eax, [esi+15h]
		mov	[esp+2Ch+var_2C], eax
		call	RAND_pseudo_bytes
		test	eax, eax
		js	loc_6E41F070
		mov	[esp+2Ch+var_20], 25h
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], 18h
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6E4132F0
		mov	edi, eax
		test	eax, eax
		js	short loc_6E41F019
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_6E41F00F
		mov	ecx, [ebx+68h]
		mov	edx, [ebx]
		mov	[esp+2Ch+var_14], ecx
		mov	[esp+2Ch+var_18], ebx
		mov	[esp+2Ch+var_1C], 25h
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_24], 18h
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], 1
		call	eax

loc_6E41F00F:				; CODE XREF: sub_6E40E840+1079Fj
		mov	dword ptr [ebx+188h], 1

loc_6E41F019:				; CODE XREF: sub_6E40E840+10798j
					; sub_6E40E840+10821j
		mov	[esp+2Ch+var_2C], esi
		call	CRYPTO_free
		mov	eax, edi

loc_6E41F023:				; CODE XREF: sub_6E40E840+10871j
					; sub_6E40E840+108B1j ...
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; END OF FUNCTION CHUNK	FOR sub_6E40E840
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6E40E840

loc_6E41F030:				; CODE XREF: sub_6E40E840+10757j
		mov	[esp+2Ch+var_1C], 0A75h

loc_6E41F038:				; CODE XREF: sub_6E40E840+10838j
		mov	[esp+2Ch+var_20], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+2Ch+var_24], 44h
		mov	[esp+2Ch+var_28], 13Bh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	edi, 0FFFFFFFFh
		jmp	short loc_6E41F019
; END OF FUNCTION CHUNK	FOR sub_6E40E840
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6E40E840

loc_6E41F070:				; CODE XREF: sub_6E40E840+10772j
		mov	[esp+2Ch+var_1C], 0A7Bh
		jmp	short loc_6E41F038
; END OF FUNCTION CHUNK	FOR sub_6E40E840
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6E40E840

loc_6E41F080:				; CODE XREF: sub_6E40E840+106F3j
					; sub_6E40E840+106FEj
		mov	[esp+2Ch+var_1C], 0A57h
		mov	[esp+2Ch+var_20], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+2Ch+var_24], 0F4h
		mov	[esp+2Ch+var_28], 13Bh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E41F023
; END OF FUNCTION CHUNK	FOR sub_6E40E840
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6E40E840

loc_6E41F0C0:				; CODE XREF: sub_6E40E840+106D4j
		mov	[esp+2Ch+var_1C], 0A4Bh
		mov	[esp+2Ch+var_20], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+2Ch+var_24], 16Dh
		mov	[esp+2Ch+var_28], 13Bh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E41F023
; END OF FUNCTION CHUNK	FOR sub_6E40E840
; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6E40E840

loc_6E41F100:				; CODE XREF: sub_6E40E840+106E2j
		mov	[esp+2Ch+var_1C], 0A51h
		mov	[esp+2Ch+var_20], offset aT1_lib_c ; "t1_lib.c"
		mov	[esp+2Ch+var_24], 16Eh
		mov	[esp+2Ch+var_28], 13Bh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E41F023
; END OF FUNCTION CHUNK	FOR sub_6E40E840
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41F140	proc near		; CODE XREF: sub_6E41F5D0+1F1p
					; sub_6E420DA0+277p ...

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= byte ptr -8Ch
var_74		= byte ptr -74h
var_5C		= byte ptr -5Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	edi, eax
		mov	esi, edx
		mov	[esp+0CCh+var_AC], ecx
		mov	[esp+0CCh+var_CC], eax
		call	EVP_MD_size
		mov	[esp+0CCh+var_A4], eax
		test	eax, eax
		js	loc_6E41F520

loc_6E41F166:				; CODE XREF: sub_6E41F140+3FCj
		lea	ebx, [esp+0CCh+var_8C]
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_MD_CTX_init
		lea	ebp, [esp+0CCh+var_74]
		mov	[esp+0CCh+var_CC], ebp
		call	EVP_MD_CTX_init
		mov	[esp+0CCh+var_C8], 8
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_MD_CTX_set_flags
		mov	[esp+0CCh+var_C8], 8
		mov	[esp+0CCh+var_CC], ebp
		call	EVP_MD_CTX_set_flags
		mov	eax, [esp+0CCh+var_AC]
		mov	[esp+0CCh+var_C0], eax
		mov	[esp+0CCh+var_C4], esi
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], 357h
		call	EVP_PKEY_new_mac_key
		mov	[esp+0CCh+var_AC], eax
		test	eax, eax
		jz	short loc_6E41F1EA
		mov	[esp+0CCh+var_BC], eax
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+var_C4], edi
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestSignInit
		test	eax, eax
		jnz	short loc_6E41F240

loc_6E41F1EA:				; CODE XREF: sub_6E41F140+84j
					; sub_6E41F140+126j ...
		lea	eax, [esp+0CCh+var_5C]
		mov	[esp+0CCh+var_A8], eax

loc_6E41F1F2:				; CODE XREF: sub_6E41F140+20Aj
					; sub_6E41F140+24Aj ...
		xor	esi, esi

loc_6E41F1F4:				; CODE XREF: sub_6E41F140+458j
		mov	eax, [esp+0CCh+var_AC]
		mov	[esp+0CCh+var_CC], eax
		call	EVP_PKEY_free
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_MD_CTX_cleanup
		mov	[esp+0CCh+var_CC], ebp
		call	EVP_MD_CTX_cleanup
		mov	[esp+0CCh+var_C8], 40h
		mov	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_CC], eax
		call	OPENSSL_cleanse
		mov	eax, esi
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E41F240
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F240:				; CODE XREF: sub_6E41F140+A8j
					; sub_6E41F140+F1j
		mov	eax, [esp+0CCh+var_AC]
		mov	[esp+0CCh+var_BC], eax
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+var_C4], edi
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], ebp
		call	EVP_DigestSignInit
		test	eax, eax
		jz	short loc_6E41F1EA
		mov	eax, [esp+0CCh+arg_0]
		test	eax, eax
		jz	short loc_6E41F299
		mov	eax, [esp+0CCh+arg_4]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_0]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E41F1EA

loc_6E41F299:				; CODE XREF: sub_6E41F140+131j
		mov	eax, [esp+0CCh+arg_8]
		test	eax, eax
		jz	short loc_6E41F2CA
		mov	eax, [esp+0CCh+arg_C]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_8]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E41F1EA

loc_6E41F2CA:				; CODE XREF: sub_6E41F140+162j
		mov	eax, [esp+0CCh+arg_10]
		test	eax, eax
		jz	short loc_6E41F2FB
		mov	eax, [esp+0CCh+arg_14]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_10]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E41F1EA

loc_6E41F2FB:				; CODE XREF: sub_6E41F140+193j
		mov	eax, [esp+0CCh+arg_18]
		test	eax, eax
		jz	short loc_6E41F32C
		mov	eax, [esp+0CCh+arg_1C]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_18]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E41F1EA

loc_6E41F32C:				; CODE XREF: sub_6E41F140+1C4j
		lea	esi, [esp+0CCh+var_90]
		mov	[esp+0CCh+var_C4], esi
		lea	eax, [esp+0CCh+var_5C]
		mov	[esp+0CCh+var_A8], eax
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestSignFinal
		test	eax, eax
		jz	loc_6E41F1F2
		mov	[esp+0CCh+var_A0], edi
		mov	edi, [esp+0CCh+var_A8]
		jmp	loc_6E41F4EA
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F360:				; CODE XREF: sub_6E41F140+3D4j
		mov	eax, [esp+0CCh+var_AC]
		mov	[esp+0CCh+var_BC], eax
		mov	[esp+0CCh+var_C0], 0
		mov	ecx, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_C4], ecx
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], ebp
		call	EVP_DigestSignInit
		test	eax, eax
		jz	loc_6E41F1F2
		mov	eax, [esp+0CCh+var_90]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], edi
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E41F1F2
		mov	eax, [esp+0CCh+var_90]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], edi
		mov	[esp+0CCh+var_CC], ebp
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E41F1F2
		mov	eax, [esp+0CCh+arg_0]
		test	eax, eax
		jz	short loc_6E41F3F9
		mov	eax, [esp+0CCh+arg_4]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_0]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E41F1F2

loc_6E41F3F9:				; CODE XREF: sub_6E41F140+291j
		mov	ecx, [esp+0CCh+arg_8]
		test	ecx, ecx
		jz	short loc_6E41F42A
		mov	eax, [esp+0CCh+arg_C]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_8]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E41F1F2

loc_6E41F42A:				; CODE XREF: sub_6E41F140+2C2j
		mov	edx, [esp+0CCh+arg_10]
		test	edx, edx
		jz	short loc_6E41F45B
		mov	eax, [esp+0CCh+arg_14]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_10]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E41F1F2

loc_6E41F45B:				; CODE XREF: sub_6E41F140+2F3j
		mov	eax, [esp+0CCh+arg_18]
		test	eax, eax
		jz	short loc_6E41F48C
		mov	eax, [esp+0CCh+arg_1C]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_18]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestUpdate
		test	eax, eax
		jz	loc_6E41F1F2

loc_6E41F48C:				; CODE XREF: sub_6E41F140+324j
		mov	eax, [esp+0CCh+var_A4]
		cmp	eax, [esp+0CCh+arg_24]
		jge	loc_6E41F541
		lea	eax, [esp+0CCh+var_94]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+arg_20]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestSignFinal
		test	eax, eax
		jz	loc_6E41F1F2
		mov	eax, [esp+0CCh+var_94]
		add	[esp+0CCh+arg_20], eax
		sub	[esp+0CCh+arg_24], eax
		mov	[esp+0CCh+var_C4], esi
		mov	[esp+0CCh+var_C8], edi
		mov	[esp+0CCh+var_CC], ebp
		call	EVP_DigestSignFinal
		test	eax, eax
		jz	loc_6E41F1F2

loc_6E41F4EA:				; CODE XREF: sub_6E41F140+218j
		mov	eax, [esp+0CCh+var_AC]
		mov	[esp+0CCh+var_BC], eax
		mov	[esp+0CCh+var_C0], 0
		mov	ecx, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_C4], ecx
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestSignInit
		test	eax, eax
		jnz	loc_6E41F360
		jmp	loc_6E41F1F2
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F520:				; CODE XREF: sub_6E41F140+20j
		mov	[esp+0CCh+var_C4], offset aChunk0 ; "chunk >= 0"
		mov	[esp+0CCh+var_C8], 0AAh
		mov	[esp+0CCh+var_CC], offset aT1_enc_c ; "t1_enc.c"
		call	OpenSSLDie
		jmp	loc_6E41F166
; ---------------------------------------------------------------------------

loc_6E41F541:				; CODE XREF: sub_6E41F140+357j
		mov	[esp+0CCh+var_C4], esi
		mov	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	EVP_DigestSignFinal
		test	eax, eax
		jz	loc_6E41F1F2
		mov	eax, [esp+0CCh+arg_24]
		mov	edi, [esp+0CCh+arg_20]
		mov	esi, [esp+0CCh+var_A8]
		cmp	eax, 4
		jnb	short loc_6E41F59D

loc_6E41F574:				; CODE XREF: sub_6E41F140+474j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E41F585
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E41F585:				; CODE XREF: sub_6E41F140+438j
		test	al, 1
		jz	short loc_6E41F593
		mov	al, [esi+edx]
		mov	byte ptr [esp+0CCh+var_A4], al
		mov	[edi+edx], al

loc_6E41F593:				; CODE XREF: sub_6E41F140+447j
		mov	esi, 1
		jmp	loc_6E41F1F4
; ---------------------------------------------------------------------------

loc_6E41F59D:				; CODE XREF: sub_6E41F140+432j
		test	edi, 1
		jnz	short loc_6E41F5B6

loc_6E41F5A5:				; CODE XREF: sub_6E41F140+478j
		test	edi, 2
		jnz	short loc_6E41F5BA

loc_6E41F5AD:				; CODE XREF: sub_6E41F140+47Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E41F574
; ---------------------------------------------------------------------------

loc_6E41F5B6:				; CODE XREF: sub_6E41F140+463j
		movsb
		dec	eax
		jmp	short loc_6E41F5A5
; ---------------------------------------------------------------------------

loc_6E41F5BA:				; CODE XREF: sub_6E41F140+46Bj
		movsw
		sub	eax, 2
		jmp	short loc_6E41F5AD
sub_6E41F140	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E41F5D0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41F5D0	proc near		; CODE XREF: .text:6E41F5C1j
					; sub_6E41F9C0+3ACp ...

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_52		= byte ptr -52h
var_51		= byte ptr -51h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_60], edx
		mov	[esp+9Ch+var_5C], ecx
		mov	ebp, [esp+9Ch+arg_24]
		xor	edi, edi
		xor	esi, esi
		mov	ebx, esi
		mov	esi, eax
		jmp	short loc_6E41F610
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F600:				; CODE XREF: sub_6E41F5D0+5Aj
		mov	eax, [esp+9Ch+var_24]
		shl	eax, 0Ah
		and	eax, esi
		cmp	eax, 1
		sbb	edi, 0FFFFFFFFh
		inc	ebx

loc_6E41F610:				; CODE XREF: sub_6E41F5D0+25j
		lea	eax, [esp+9Ch+var_20]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_24]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebx
		call	sub_6E43BC20
		test	eax, eax
		jnz	short loc_6E41F600
		mov	ebx, [esp+9Ch+arg_20]
		test	edi, edi
		jz	loc_6E41F900
		mov	eax, [esp+9Ch+arg_1C]
		cdq
		idiv	edi
		mov	[esp+9Ch+var_64], eax
		dec	edi
		jz	loc_6E41F8F0

loc_6E41F650:				; CODE XREF: sub_6E41F5D0+32Bj
		mov	edx, [esp+9Ch+arg_28]
		mov	edi, ebx
		cmp	edx, 4
		jnb	loc_6E41F8B0
		test	dl, 2
		jnz	loc_6E41F890

loc_6E41F66B:				; CODE XREF: sub_6E41F5D0+301j
		and	edx, 1
		jnz	loc_6E41F880

loc_6E41F674:				; CODE XREF: sub_6E41F5D0+2B3j
					; sub_6E41F5D0+2CBj
		lea	eax, [ebx+4]
		cmp	ebp, eax
		setnb	[esp+9Ch+var_52]
		lea	eax, [ebp+4]
		cmp	ebx, eax
		setnb	al
		or	[esp+9Ch+var_52], al
		cmp	[esp+9Ch+arg_28], 6
		setnbe	al
		and	[esp+9Ch+var_52], al
		mov	eax, ebp
		or	eax, ebx
		test	al, 3
		setz	al
		and	[esp+9Ch+var_52], al
		mov	eax, [esp+9Ch+arg_28]
		shr	eax, 2
		mov	[esp+9Ch+var_50], eax
		lea	edi, ds:0[eax*4]
		lea	eax, [ebx+edi]
		mov	[esp+9Ch+var_34], eax
		lea	eax, [ebp+edi+0]
		mov	[esp+9Ch+var_38], eax
		lea	eax, [edi+1]
		mov	[esp+9Ch+var_30], eax
		lea	esi, [ebx+eax]
		mov	[esp+9Ch+var_40], esi
		add	eax, ebp
		mov	[esp+9Ch+var_3C], eax
		lea	eax, [edi+2]
		mov	[esp+9Ch+var_44], eax
		lea	esi, [ebx+eax]
		mov	[esp+9Ch+var_4C], esi
		add	eax, ebp
		mov	[esp+9Ch+var_48], eax
		xor	esi, esi
		mov	eax, [esp+9Ch+arg_1C]
		and	eax, 1
		add	eax, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_58], eax
		mov	[esp+9Ch+var_68], edi
		mov	edi, [esp+9Ch+arg_28]
		jmp	short loc_6E41F720
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F720:				; CODE XREF: sub_6E41F5D0+141j
					; sub_6E41F5D0+272j ...
		lea	eax, [esp+9Ch+var_20]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_24]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], esi
		call	sub_6E43BC20
		test	eax, eax
		jz	loc_6E41F8E0
		mov	eax, [esp+9Ch+var_24]
		shl	eax, 0Ah
		test	[esp+9Ch+var_6C], eax
		jz	loc_6E41F841
		mov	eax, [esp+9Ch+var_20]
		test	eax, eax
		jz	loc_6E41F940
		mov	[esp+9Ch+var_78], edi
		mov	[esp+9Ch+var_7C], ebp
		mov	edx, [esp+9Ch+arg_14]
		mov	[esp+9Ch+var_80], edx
		mov	ecx, [esp+9Ch+arg_10]
		mov	[esp+9Ch+var_84], ecx
		mov	edx, [esp+9Ch+arg_C]
		mov	[esp+9Ch+var_88], edx
		mov	ecx, [esp+9Ch+arg_8]
		mov	[esp+9Ch+var_8C], ecx
		mov	edx, [esp+9Ch+arg_4]
		mov	[esp+9Ch+var_90], edx
		mov	ecx, [esp+9Ch+arg_0]
		mov	[esp+9Ch+var_94], ecx
		mov	edx, [esp+9Ch+var_5C]
		mov	[esp+9Ch+var_98], edx
		mov	ecx, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_9C], ecx
		mov	ecx, [esp+9Ch+var_58]
		mov	edx, [esp+9Ch+arg_18]
		call	sub_6E41F140
		test	eax, eax
		jz	loc_6E41F980
		mov	eax, [esp+9Ch+var_64]
		add	[esp+9Ch+arg_18], eax
		test	edi, edi
		jle	short loc_6E41F841
		cmp	[esp+9Ch+var_52], 0
		jz	short loc_6E41F850
		mov	eax, [esp+9Ch+var_68]
		test	eax, eax
		jz	short loc_6E41F805
		xor	eax, eax

loc_6E41F7EE:				; CODE XREF: sub_6E41F5D0+22Dj
		mov	edx, [ebx+eax*4]
		xor	edx, [ebp+eax*4+0]
		mov	[ebx+eax*4], edx
		inc	eax
		cmp	[esp+9Ch+var_50], eax
		ja	short loc_6E41F7EE
		cmp	edi, [esp+9Ch+var_68]
		jz	short loc_6E41F841

loc_6E41F805:				; CODE XREF: sub_6E41F5D0+21Aj
		mov	eax, [esp+9Ch+var_38]
		mov	al, [eax]
		mov	[esp+9Ch+var_51], al
		mov	edx, [esp+9Ch+var_34]
		xor	[edx], al
		cmp	edi, [esp+9Ch+var_30]
		jle	short loc_6E41F841
		mov	eax, [esp+9Ch+var_3C]
		mov	al, [eax]
		mov	[esp+9Ch+var_51], al
		mov	ecx, [esp+9Ch+var_40]
		xor	[ecx], al
		cmp	edi, [esp+9Ch+var_44]
		jle	short loc_6E41F841
		mov	eax, [esp+9Ch+var_48]
		mov	al, [eax]
		mov	[esp+9Ch+var_51], al
		mov	edx, [esp+9Ch+var_4C]
		xor	[edx], al

loc_6E41F841:				; CODE XREF: sub_6E41F5D0+17Bj
					; sub_6E41F5D0+20Bj ...
		inc	esi
		jmp	loc_6E41F720
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F850:				; CODE XREF: sub_6E41F5D0+212j
		xor	eax, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E41F860:				; CODE XREF: sub_6E41F5D0+29Aj
		mov	cl, [ebp+eax+0]
		xor	[ebx+eax], cl
		inc	eax
		cmp	eax, edi
		jnz	short loc_6E41F860
		inc	esi
		jmp	loc_6E41F720
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F880:				; CODE XREF: sub_6E41F5D0+9Ej
					; sub_6E41F5D0+2D1j
		mov	byte ptr [edi],	0
		jmp	loc_6E41F674
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F890:				; CODE XREF: sub_6E41F5D0+95j
					; sub_6E41F5D0+307j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E41F674
		jmp	short loc_6E41F880
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F8B0:				; CODE XREF: sub_6E41F5D0+8Cj
		test	bl, 1
		jnz	loc_6E41F99D

loc_6E41F8B9:				; CODE XREF: sub_6E41F5D0+3DDj
		test	edi, 2
		jnz	loc_6E41F98D

loc_6E41F8C5:				; CODE XREF: sub_6E41F5D0+3C8j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jz	loc_6E41F66B
		jmp	short loc_6E41F890
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F8E0:				; CODE XREF: sub_6E41F5D0+16Aj
		mov	al, 1
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F8F0:				; CODE XREF: sub_6E41F5D0+7Aj
		mov	[esp+9Ch+arg_1C], 0
		jmp	loc_6E41F650
; ---------------------------------------------------------------------------

loc_6E41F900:				; CODE XREF: sub_6E41F5D0+65j
		mov	[esp+9Ch+var_8C], 10Ah
		mov	[esp+9Ch+var_90], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+9Ch+var_94], 44h
		mov	[esp+9Ch+var_98], 11Ch
		mov	[esp+9Ch+var_9C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F940:				; CODE XREF: sub_6E41F5D0+187j
		mov	[esp+9Ch+var_8C], 115h
		mov	[esp+9Ch+var_90], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+9Ch+var_94], 146h
		mov	[esp+9Ch+var_98], 11Ch
		mov	[esp+9Ch+var_9C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41F980:				; CODE XREF: sub_6E41F5D0+1F8j
		xor	eax, eax
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E41F98D:				; CODE XREF: sub_6E41F5D0+2EFj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E41F8C5
; ---------------------------------------------------------------------------

loc_6E41F99D:				; CODE XREF: sub_6E41F5D0+2E3j
		mov	byte ptr [ebx],	0
		lea	edi, [ebx+1]
		mov	eax, [esp+9Ch+arg_28]
		lea	edx, [eax-1]
		jmp	loc_6E41F8B9
sub_6E41F5D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E41F9C0	proc near		; DATA XREF: .data:6E4498D0o
					; .data:6E449910o

var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_DD		= byte ptr -0DDh
var_DC		= byte ptr -0DCh
var_BC		= byte ptr -0BCh
var_9C		= byte ptr -9Ch
var_5C		= byte ptr -5Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 13Ch
		mov	ebx, [esp+14Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	edx, [eax+344h]
		mov	ecx, [edx+20h]
		mov	[esp+14Ch+var_110], ecx
		mov	edi, [eax+37Ch]
		mov	[esp+14Ch+var_114], edi
		mov	ecx, [eax+380h]
		mov	[esp+14Ch+var_F4], ecx
		mov	edi, [eax+384h]
		mov	[esp+14Ch+var_F8], edi
		mov	edi, [eax+38Ch]
		mov	esi, [esp+14Ch+arg_4]
		and	esi, 1
		jz	loc_6E41FB00
		test	byte ptr [edx+24h], 4
		mov	eax, [ebx+7Ch]
		jnz	loc_6E41FF30
		and	eax, 0FFFFFFFEh

loc_6E41FA25:				; CODE XREF: sub_6E41F9C0+573j
		mov	[ebx+7Ch], eax
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	loc_6E420200
		mov	[esp+14Ch+var_104], eax
		mov	ebp, 1

loc_6E41FA3F:				; CODE XREF: sub_6E41F9C0+87Ej
		mov	[esp+14Ch+var_148], 0
		lea	eax, [ebx+84h]
		mov	[esp+14Ch+var_14C], eax
		call	sub_6E4366A0
		mov	[esp+14Ch+var_F0], eax
		test	eax, eax
		jz	loc_6E420020
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	short loc_6E41FA7D
		mov	[esp+14Ch+var_14C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+88h], 0

loc_6E41FA7D:				; CODE XREF: sub_6E41F9C0+A9j
		test	edi, edi
		jz	loc_6E420170
		mov	eax, [edi+8]
		mov	[esp+14Ch+var_14C], eax
		call	COMP_CTX_new
		mov	[ebx+88h], eax
		test	eax, eax
		jz	loc_6E420320
		mov	esi, [ebx+58h]
		mov	eax, [esi+120h]
		test	eax, eax
		jz	loc_6E41FFE0

loc_6E41FAAF:				; CODE XREF: sub_6E41F9C0+64Dj
					; sub_6E41F9C0+7B3j
		cmp	dword ptr [ebx], 0FEFFh
		jz	short loc_6E41FAC8
		mov	dword ptr [esi+8], 0
		mov	dword ptr [esi+0Ch], 0
		mov	esi, [ebx+58h]

loc_6E41FAC8:				; CODE XREF: sub_6E41F9C0+F5j
		lea	eax, [esi+14h]
		mov	[esp+14Ch+var_100], eax
		lea	eax, [esi+10h]
		mov	[esp+14Ch+var_108], eax
		test	ebp, ebp
		jz	loc_6E41FBC6

loc_6E41FADE:				; CODE XREF: sub_6E41F9C0+200j
		mov	eax, [esp+14Ch+var_104]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	esi, [ebx+58h]
		jmp	loc_6E41FBC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E41FB00:				; CODE XREF: sub_6E41F9C0+4Fj
		test	byte ptr [edx+24h], 4
		mov	eax, [ebx+7Ch]
		jnz	loc_6E41FF20
		and	eax, 0FFFFFFFDh

loc_6E41FB10:				; CODE XREF: sub_6E41F9C0+563j
		mov	[ebx+7Ch], eax
		mov	eax, [ebx+8Ch]
		mov	[esp+14Ch+var_104], eax
		test	eax, eax
		jz	loc_6E4200B0
		mov	eax, [ebx+8]
		cmp	dword ptr [eax], 0FEFFh
		jz	loc_6E4200B0
		mov	ebp, 1

loc_6E41FB39:				; CODE XREF: sub_6E41F9C0+9D3j
		mov	[esp+14Ch+var_148], 0
		lea	eax, [ebx+90h]
		mov	[esp+14Ch+var_14C], eax
		call	sub_6E4366A0
		mov	[esp+14Ch+var_F0], eax
		test	eax, eax
		jz	loc_6E420020

loc_6E41FB5B:				; CODE XREF: sub_6E41F9C0+72Fj
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E41FB77
		mov	[esp+14Ch+var_14C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+94h], 0

loc_6E41FB77:				; CODE XREF: sub_6E41F9C0+1A3j
		test	edi, edi
		jz	short loc_6E41FB94
		mov	eax, [edi+8]
		mov	[esp+14Ch+var_14C], eax
		call	COMP_CTX_new
		mov	[ebx+94h], eax
		test	eax, eax
		jz	loc_6E420360

loc_6E41FB94:				; CODE XREF: sub_6E41F9C0+1B9j
		cmp	dword ptr [ebx], 0FEFFh
		jz	short loc_6E41FBAD
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+54h], 0
		mov	dword ptr [eax+58h], 0

loc_6E41FBAD:				; CODE XREF: sub_6E41F9C0+1DAj
		mov	esi, [ebx+58h]
		lea	eax, [esi+60h]
		mov	[esp+14Ch+var_100], eax
		lea	eax, [esi+5Ch]
		mov	[esp+14Ch+var_108], eax
		test	ebp, ebp
		jnz	loc_6E41FADE

loc_6E41FBC6:				; CODE XREF: sub_6E41F9C0+118j
					; sub_6E41F9C0+12Dj
		mov	eax, [esp+14Ch+var_110]
		and	eax, 2
		mov	[esp+14Ch+var_10C], eax
		mov	edi, [esi+378h]
		mov	esi, [esi+388h]
		mov	edx, [esp+14Ch+var_108]
		mov	[edx], esi
		mov	edx, [esp+14Ch+var_114]
		mov	[esp+14Ch+var_14C], edx
		call	EVP_CIPHER_key_length
		mov	ebp, eax
		mov	ecx, [esp+14Ch+var_10C]
		test	ecx, ecx
		jz	short loc_6E41FC17
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		test	byte ptr [eax+20h], 8
		jz	loc_6E420060
		mov	eax, 5

loc_6E41FC11:				; CODE XREF: sub_6E41F9C0+6AFj
		cmp	ebp, eax
		jle	short loc_6E41FC17
		mov	ebp, eax

loc_6E41FC17:				; CODE XREF: sub_6E41F9C0+237j
					; sub_6E41F9C0+253j
		mov	eax, [esp+14Ch+var_114]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CIPHER_flags
		and	eax, 0F0007h
		cmp	eax, 6
		jz	loc_6E41FF40
		mov	eax, [esp+14Ch+var_114]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CIPHER_iv_length
		mov	[esp+14Ch+var_110], eax
		cmp	[esp+14Ch+arg_4], 12h
		jz	loc_6E41FF56

loc_6E41FC4F:				; CODE XREF: sub_6E41F9C0+590j
		cmp	[esp+14Ch+arg_4], 21h
		jz	loc_6E41FF56
		lea	edx, [edi+esi]
		lea	ecx, [ebp+esi+0]
		add	ecx, esi
		lea	eax, [edi+ecx]
		mov	[esp+14Ch+var_FC], eax
		mov	eax, [esp+14Ch+var_110]
		add	eax, ebp
		add	ecx, eax
		add	edi, ecx
		mov	[esp+14Ch+var_EC], edi
		add	ecx, [esp+14Ch+var_110]
		mov	[esp+14Ch+var_E4], 0
		mov	[esp+14Ch+var_E8], offset aServerWriteKey ; "server write key"
		mov	eax, [ebx+58h]
		cmp	ecx, [eax+374h]
		jg	loc_6E41FF98

loc_6E41FC9E:				; CODE XREF: sub_6E41F9C0+5D2j
		mov	eax, esi
		mov	edi, [esp+14Ch+var_100]
		mov	esi, edx
		cmp	eax, 4
		jnb	loc_6E420080

loc_6E41FCAF:				; CODE XREF: sub_6E41F9C0+6DFj
		xor	edx, edx
		test	al, 2
		jz	short loc_6E41FCC0
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E41FCC0:				; CODE XREF: sub_6E41F9C0+2F3j
		test	al, 1
		jz	short loc_6E41FCCE
		mov	al, [esi+edx]
		mov	[esp+14Ch+var_DD], al
		mov	[edi+edx], al

loc_6E41FCCE:				; CODE XREF: sub_6E41F9C0+302j
		mov	eax, [esp+14Ch+var_114]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CIPHER_flags
		test	eax, 200000h
		jz	loc_6E420100

loc_6E41FCE5:				; CODE XREF: sub_6E41F9C0+7A8j
		mov	edx, [esp+14Ch+var_10C]
		test	edx, edx
		jz	loc_6E41FE20
		mov	eax, [esp+14Ch+var_114]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CIPHER_key_length
		mov	edi, eax
		mov	esi, [ebx+58h]
		mov	[esp+14Ch+var_14C], ebx
		call	sub_6E4106A0
		mov	[esp+14Ch+var_124], edi
		lea	edx, [esp+14Ch+var_5C]
		mov	[esp+14Ch+var_128], edx
		lea	edi, [esp+14Ch+var_9C]
		mov	[esp+14Ch+var_12C], edi
		mov	[esp+14Ch+var_130], ebp
		mov	edx, [esp+14Ch+var_FC]
		mov	[esp+14Ch+var_134], edx
		mov	[esp+14Ch+var_138], 0
		mov	[esp+14Ch+var_13C], 0
		mov	[esp+14Ch+var_140], 20h
		lea	edx, [esi+0A0h]
		mov	[esp+14Ch+var_144], edx
		mov	[esp+14Ch+var_148], 20h
		add	esi, 0C0h
		mov	[esp+14Ch+var_14C], esi
		mov	ecx, 10h
		mov	edx, [esp+14Ch+var_E8]
		call	sub_6E41F5D0
		test	eax, eax
		jz	loc_6E42004C
		mov	esi, [esp+14Ch+var_110]
		test	esi, esi
		jle	loc_6E4201F4
		mov	ebp, [ebx+58h]
		mov	[esp+14Ch+var_14C], ebx
		call	sub_6E4106A0
		mov	edx, esi
		add	edx, esi
		mov	[esp+14Ch+var_124], edx
		lea	edx, [esp+14Ch+var_BC]
		mov	[esp+14Ch+var_128], edx
		lea	esi, [esp+14Ch+var_DC]
		mov	[esp+14Ch+var_12C], esi
		mov	[esp+14Ch+var_130], 0
		mov	[esp+14Ch+var_134], offset dword_6E44CCD4
		mov	[esp+14Ch+var_138], 0
		mov	[esp+14Ch+var_13C], 0
		mov	[esp+14Ch+var_140], 20h
		lea	edx, [ebp+0A0h]
		mov	[esp+14Ch+var_144], edx
		mov	[esp+14Ch+var_148], 20h
		add	ebp, 0C0h
		mov	[esp+14Ch+var_14C], ebp
		mov	ecx, 8
		mov	edx, offset aIvBlock ; "IV block"
		call	sub_6E41F5D0
		test	eax, eax
		jz	loc_6E42004C
		mov	eax, [esp+14Ch+var_E4]
		test	eax, eax
		jnz	loc_6E4201F0
		add	esi, [esp+14Ch+var_110]
		mov	[esp+14Ch+var_EC], esi
		mov	[esp+14Ch+var_FC], edi
		lea	esi, [esi+0]

loc_6E41FE20:				; CODE XREF: sub_6E41F9C0+32Bj
					; sub_6E41F9C0+838j
		mov	eax, [ebx+0C0h]
		mov	dword ptr [eax+4], 0
		mov	eax, [esp+14Ch+var_114]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CIPHER_flags
		and	eax, 0F0007h
		cmp	eax, 6
		mov	eax, [esp+14Ch+arg_4]
		jz	loc_6E420180
		and	eax, 2
		mov	[esp+14Ch+var_138], eax
		mov	eax, [esp+14Ch+var_EC]
		mov	[esp+14Ch+var_13C], eax
		mov	eax, [esp+14Ch+var_FC]
		mov	[esp+14Ch+var_140], eax
		mov	[esp+14Ch+var_144], 0
		mov	eax, [esp+14Ch+var_114]
		mov	[esp+14Ch+var_148], eax
		mov	eax, [esp+14Ch+var_104]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CipherInit_ex
		mov	esi, eax
		test	eax, eax
		jz	loc_6E4202B0

loc_6E41FE8B:				; CODE XREF: sub_6E41F9C0+81Dj
		mov	eax, [esp+14Ch+var_114]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CIPHER_flags
		test	eax, 200000h
		jz	short loc_6E41FEAC
		mov	eax, [esp+14Ch+var_108]
		mov	eax, [eax]
		test	eax, eax
		jnz	loc_6E420250

loc_6E41FEAC:				; CODE XREF: sub_6E41F9C0+4DCj
					; sub_6E41F9C0+8B4j
		mov	[esp+14Ch+var_148], 40h
		lea	eax, [esp+14Ch+var_9C]
		mov	[esp+14Ch+var_14C], eax
		call	OPENSSL_cleanse
		mov	[esp+14Ch+var_148], 40h
		lea	eax, [esp+14Ch+var_5C]
		mov	[esp+14Ch+var_14C], eax
		call	OPENSSL_cleanse
		mov	[esp+14Ch+var_148], 20h
		lea	eax, [esp+14Ch+var_DC]
		mov	[esp+14Ch+var_14C], eax
		call	OPENSSL_cleanse
		mov	[esp+14Ch+var_148], 20h
		lea	eax, [esp+14Ch+var_BC]
		mov	[esp+14Ch+var_14C], eax
		call	OPENSSL_cleanse
		mov	esi, 1
		mov	eax, esi
		add	esp, 13Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41FF20:				; CODE XREF: sub_6E41F9C0+147j
		or	eax, 2
		jmp	loc_6E41FB10
; ---------------------------------------------------------------------------
		align 10h

loc_6E41FF30:				; CODE XREF: sub_6E41F9C0+5Cj
		or	eax, 1
		jmp	loc_6E41FA25
; ---------------------------------------------------------------------------
		align 10h

loc_6E41FF40:				; CODE XREF: sub_6E41F9C0+26Bj
		mov	[esp+14Ch+var_110], 4
		cmp	[esp+14Ch+arg_4], 12h
		jnz	loc_6E41FC4F

loc_6E41FF56:				; CODE XREF: sub_6E41F9C0+289j
					; sub_6E41F9C0+297j
		lea	eax, [esi+esi]
		lea	ecx, [edi+eax]
		mov	[esp+14Ch+var_FC], ecx
		lea	ecx, [ebp+ebp+0]
		add	ecx, eax
		lea	eax, [edi+ecx]
		mov	[esp+14Ch+var_EC], eax
		mov	edx, [esp+14Ch+var_110]
		mov	eax, edx
		add	eax, edx
		add	ecx, eax
		mov	edx, edi
		mov	[esp+14Ch+var_E4], 1
		mov	[esp+14Ch+var_E8], offset aClientWriteKey ; "client write key"
		mov	eax, [ebx+58h]
		cmp	ecx, [eax+374h]
		jle	loc_6E41FC9E

loc_6E41FF98:				; CODE XREF: sub_6E41F9C0+2D8j
		mov	[esp+14Ch+var_13C], 1F3h

loc_6E41FFA0:				; CODE XREF: sub_6E41F9C0+82Bj
					; sub_6E41F9C0+8E0j
		mov	[esp+14Ch+var_140], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+14Ch+var_144], 44h
		mov	[esp+14Ch+var_148], 0D1h
		mov	[esp+14Ch+var_14C], 14h
		call	ERR_put_error
		xor	esi, esi

loc_6E41FFC6:				; CODE XREF: sub_6E41F9C0+91Cj
					; sub_6E41F9C0+98Ej ...
		mov	eax, esi
		add	esp, 13Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E41FFE0:				; CODE XREF: sub_6E41F9C0+E9j
		mov	[esp+14Ch+var_144], 194h
		mov	[esp+14Ch+var_148], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+14Ch+var_14C], 4540h
		call	CRYPTO_malloc
		mov	[esi+120h], eax
		mov	esi, [ebx+58h]
		mov	edi, [esi+120h]
		test	edi, edi
		jnz	loc_6E41FAAF
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E420020:				; CODE XREF: sub_6E41F9C0+9Bj
					; sub_6E41F9C0+195j ...
		mov	[esp+14Ch+var_13C], 262h
		mov	[esp+14Ch+var_140], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+14Ch+var_144], 41h
		mov	[esp+14Ch+var_148], 0D1h
		mov	[esp+14Ch+var_14C], 14h
		call	ERR_put_error

loc_6E42004C:				; CODE XREF: sub_6E41F9C0+3B3j
					; sub_6E41F9C0+43Fj
		xor	esi, esi
		mov	eax, esi
		add	esp, 13Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E420060:				; CODE XREF: sub_6E41F9C0+246j
		cmp	dword ptr [eax+14h], 1
		setz	al
		and	eax, 0FFh
		add	eax, 7
		jmp	loc_6E41FC11
; ---------------------------------------------------------------------------
		align 10h

loc_6E420080:				; CODE XREF: sub_6E41F9C0+2E9j
		test	edi, 1
		jnz	loc_6E420310

loc_6E42008C:				; CODE XREF: sub_6E41F9C0+959j
		test	edi, 2
		jnz	loc_6E4202F0

loc_6E420098:				; CODE XREF: sub_6E41F9C0+93Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E41FCAF
; ---------------------------------------------------------------------------
		align 10h

loc_6E4200B0:				; CODE XREF: sub_6E41F9C0+15Fj
					; sub_6E41F9C0+16Ej
		call	EVP_CIPHER_CTX_new
		mov	[esp+14Ch+var_104], eax
		mov	[ebx+8Ch], eax
		test	eax, eax
		jz	loc_6E420020
		mov	eax, [ebx+8]
		cmp	dword ptr [eax], 0FEFFh
		jnz	loc_6E420391
		call	EVP_MD_CTX_create
		mov	[esp+14Ch+var_F0], eax
		test	eax, eax
		jz	loc_6E420020
		mov	[ebx+90h], eax
		xor	ebp, ebp
		jmp	loc_6E41FB5B
; ---------------------------------------------------------------------------
		align 10h

loc_6E420100:				; CODE XREF: sub_6E41F9C0+31Fj
		mov	eax, [esp+14Ch+var_108]
		mov	eax, [eax]
		mov	[esp+14Ch+var_140], eax
		mov	eax, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_144], eax
		mov	[esp+14Ch+var_148], 0
		mov	eax, [esp+14Ch+var_F8]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_PKEY_new_mac_key
		mov	esi, eax
		test	eax, eax
		jz	loc_6E420290
		mov	[esp+14Ch+var_13C], eax
		mov	[esp+14Ch+var_140], 0
		mov	eax, [esp+14Ch+var_F4]
		mov	[esp+14Ch+var_144], eax
		mov	[esp+14Ch+var_148], 0
		mov	eax, [esp+14Ch+var_F0]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_DigestSignInit
		test	eax, eax
		jle	loc_6E420290
		mov	[esp+14Ch+var_14C], esi
		call	EVP_PKEY_free
		jmp	loc_6E41FCE5
; ---------------------------------------------------------------------------
		align 10h

loc_6E420170:				; CODE XREF: sub_6E41F9C0+BFj
		mov	esi, [ebx+58h]
		jmp	loc_6E41FAAF
; ---------------------------------------------------------------------------
		align 10h

loc_6E420180:				; CODE XREF: sub_6E41F9C0+488j
		and	eax, 2
		mov	[esp+14Ch+var_138], eax
		mov	[esp+14Ch+var_13C], 0
		mov	eax, [esp+14Ch+var_FC]
		mov	[esp+14Ch+var_140], eax
		mov	[esp+14Ch+var_144], 0
		mov	eax, [esp+14Ch+var_114]
		mov	[esp+14Ch+var_148], eax
		mov	eax, [esp+14Ch+var_104]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CipherInit_ex
		test	eax, eax
		jz	short loc_6E4201E3
		mov	eax, [esp+14Ch+var_EC]
		mov	[esp+14Ch+var_140], eax
		mov	eax, [esp+14Ch+var_110]
		mov	[esp+14Ch+var_144], eax
		mov	[esp+14Ch+var_148], 12h
		mov	eax, [esp+14Ch+var_104]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CIPHER_CTX_ctrl
		test	eax, eax
		jnz	loc_6E41FE8B

loc_6E4201E3:				; CODE XREF: sub_6E41F9C0+7F5j
		mov	[esp+14Ch+var_13C], 23Bh
		jmp	loc_6E41FFA0
; ---------------------------------------------------------------------------

loc_6E4201F0:				; CODE XREF: sub_6E41F9C0+44Bj
		mov	[esp+14Ch+var_EC], esi

loc_6E4201F4:				; CODE XREF: sub_6E41F9C0+3BFj
		mov	[esp+14Ch+var_FC], edi
		jmp	loc_6E41FE20
; ---------------------------------------------------------------------------
		align 10h

loc_6E420200:				; CODE XREF: sub_6E41F9C0+70j
		mov	[esp+14Ch+var_144], 17Bh
		mov	[esp+14Ch+var_148], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+14Ch+var_14C], 8Ch
		call	CRYPTO_malloc
		mov	[ebx+80h], eax
		test	eax, eax
		jz	loc_6E420020
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CIPHER_CTX_init
		mov	eax, [ebx+80h]
		mov	[esp+14Ch+var_104], eax
		xor	ebp, ebp
		jmp	loc_6E41FA3F
; ---------------------------------------------------------------------------
		align 10h

loc_6E420250:				; CODE XREF: sub_6E41F9C0+4E6j
		mov	edx, [esp+14Ch+var_100]
		mov	[esp+14Ch+var_140], edx
		mov	[esp+14Ch+var_144], eax
		mov	[esp+14Ch+var_148], 17h
		mov	eax, [esp+14Ch+var_104]
		mov	[esp+14Ch+var_14C], eax
		call	EVP_CIPHER_CTX_ctrl
		mov	esi, eax
		test	eax, eax
		jnz	loc_6E41FEAC
		mov	[esp+14Ch+var_13C], 248h
		jmp	short loc_6E4202B8
; ---------------------------------------------------------------------------
		align 10h

loc_6E420290:				; CODE XREF: sub_6E41F9C0+76Aj
					; sub_6E41F9C0+79Aj
		mov	[esp+14Ch+var_14C], esi
		call	EVP_PKEY_free
		mov	[esp+14Ch+var_13C], 1FFh
		jmp	loc_6E41FFA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4202B0:				; CODE XREF: sub_6E41F9C0+4C5j
		mov	[esp+14Ch+var_13C], 240h

loc_6E4202B8:				; CODE XREF: sub_6E41F9C0+8C2j
		mov	[esp+14Ch+var_140], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+14Ch+var_144], 44h
		mov	[esp+14Ch+var_148], 0D1h
		mov	[esp+14Ch+var_14C], 14h
		call	ERR_put_error
		jmp	loc_6E41FFC6
; ---------------------------------------------------------------------------
		jmp	short loc_6E4202F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4202F0:				; CODE XREF: sub_6E41F9C0+6D2j
					; sub_6E41F9C0+921j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E420098
; ---------------------------------------------------------------------------
		align 10h

loc_6E420310:				; CODE XREF: sub_6E41F9C0+6C6j
		mov	cl, [esi]
		mov	[edi], cl
		lea	edi, [edi+1]
		inc	esi
		dec	eax
		jmp	loc_6E42008C
; ---------------------------------------------------------------------------
		align 10h

loc_6E420320:				; CODE XREF: sub_6E41F9C0+D8j
		mov	[esp+14Ch+var_13C], 18Fh
		mov	[esp+14Ch+var_140], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+14Ch+var_144], 8Eh
		mov	[esp+14Ch+var_148], 0D1h
		mov	[esp+14Ch+var_14C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E41FFC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E420360:				; CODE XREF: sub_6E41F9C0+1CEj
		mov	[esp+14Ch+var_13C], 1BDh
		mov	[esp+14Ch+var_140], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+14Ch+var_144], 8Eh
		mov	[esp+14Ch+var_148], 0D1h
		mov	[esp+14Ch+var_14C], 14h
		call	ERR_put_error
		jmp	loc_6E41FFC6
; ---------------------------------------------------------------------------

loc_6E420391:				; CODE XREF: sub_6E41F9C0+710j
		xor	ebp, ebp
		jmp	loc_6E41FB39
sub_6E41F9C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4203A0	proc near		; DATA XREF: .data:6E4498C8o
					; .data:6E449908o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, [esp+7Ch+arg_0]
		mov	[esp+7Ch+var_24], 0
		mov	[esp+7Ch+var_20], 0
		mov	eax, [ebx+58h]
		mov	eax, [eax+374h]
		test	eax, eax
		jz	short loc_6E4203E0
		mov	eax, 1

loc_6E4203D0:				; CODE XREF: sub_6E4203A0+2B6j
					; sub_6E4203A0+2EEj
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4203E0:				; CODE XREF: sub_6E4203A0+29j
		mov	eax, [ebx+0C0h]
		lea	edx, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_68], edx
		lea	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_6C], edx
		lea	edx, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_70], edx
		lea	edx, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_74], edx
		lea	edx, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], eax
		call	sub_6E43B840
		test	eax, eax
		jz	loc_6E4205D0
		mov	eax, [ebx+58h]
		mov	edx, [esp+7Ch+var_30]
		mov	[eax+37Ch], edx
		mov	ecx, [esp+7Ch+var_2C]
		mov	[eax+380h], ecx
		mov	ecx, [esp+7Ch+var_24]
		mov	[eax+384h], ecx
		mov	ecx, [esp+7Ch+var_20]
		mov	[eax+388h], ecx
		mov	[esp+7Ch+var_7C], edx
		call	EVP_CIPHER_key_length
		mov	esi, [esp+7Ch+var_20]
		add	esi, eax
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_7C], eax
		call	EVP_CIPHER_iv_length
		add	esi, eax
		add	esi, esi
		mov	[esp+7Ch+var_7C], ebx
		call	sub_6E4114A0
		mov	[esp+7Ch+var_74], 288h
		mov	[esp+7Ch+var_78], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+7Ch+var_7C], esi
		call	CRYPTO_malloc
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E420660
		mov	eax, [ebx+58h]
		mov	[eax+374h], esi
		mov	[eax+378h], ebp
		mov	[esp+7Ch+var_74], 290h
		mov	[esp+7Ch+var_78], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+7Ch+var_7C], esi
		call	CRYPTO_malloc
		mov	edi, eax
		test	eax, eax
		jz	loc_6E420620
		mov	ecx, [ebx+0C0h]
		mov	eax, [ecx+10h]
		mov	[esp+7Ch+var_40], ecx
		mov	[esp+7Ch+var_48], eax
		mov	edx, [ebx+58h]
		mov	[esp+7Ch+var_44], edx
		mov	[esp+7Ch+var_7C], ebx
		call	sub_6E4106A0
		mov	[esp+7Ch+var_54], esi
		mov	[esp+7Ch+var_58], edi
		mov	[esp+7Ch+var_5C], ebp
		mov	ecx, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_60], ecx
		mov	ecx, [esp+7Ch+var_40]
		add	ecx, 14h
		mov	[esp+7Ch+var_64], ecx
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 20h
		mov	edx, [esp+7Ch+var_44]
		lea	ecx, [edx+0C0h]
		mov	[esp+7Ch+var_74], ecx
		mov	[esp+7Ch+var_78], 20h
		add	edx, 0A0h
		mov	[esp+7Ch+var_7C], edx
		mov	ecx, 0Dh
		mov	edx, offset aKeyExpansion ; "key expansion"
		call	sub_6E41F5D0
		test	eax, eax
		jz	loc_6E420610
		test	byte ptr [ebx+101h], 8
		jnz	short loc_6E4205A0
		mov	eax, [ebx+8]
		cmp	dword ptr [eax], 301h
		jg	short loc_6E4205A0
		mov	edx, [ebx+58h]
		mov	dword ptr [edx+0E0h], 1
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+0B4h]
		test	eax, eax
		jz	short loc_6E4205A0
		mov	eax, [eax+14h]
		cmp	eax, 20h
		jz	short loc_6E42058D
		cmp	eax, 4
		jnz	short loc_6E4205A0

loc_6E42058D:				; CODE XREF: sub_6E4203A0+1E6j
		mov	dword ptr [edx+0E0h], 0
		mov	esi, esi
		lea	edi, [edi+0]

loc_6E4205A0:				; CODE XREF: sub_6E4203A0+1B6j
					; sub_6E4203A0+1C1j ...
		mov	ebx, 1

loc_6E4205A5:				; CODE XREF: sub_6E4203A0+272j
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], edi
		call	OPENSSL_cleanse
		mov	[esp+7Ch+var_7C], edi
		call	CRYPTO_free
		mov	eax, ebx
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4205D0:				; CODE XREF: sub_6E4203A0+78j
		mov	[esp+7Ch+var_48], eax
		mov	[esp+7Ch+var_6C], 27Ah
		mov	[esp+7Ch+var_70], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+7Ch+var_74], 8Ah
		mov	[esp+7Ch+var_78], 0D3h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		mov	eax, [esp+7Ch+var_48]
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E420610:				; CODE XREF: sub_6E4203A0+1A9j
		xor	ebx, ebx
		jmp	short loc_6E4205A5
; ---------------------------------------------------------------------------
		align 10h

loc_6E420620:				; CODE XREF: sub_6E4203A0+11Cj
		mov	[esp+7Ch+var_6C], 291h
		mov	[esp+7Ch+var_70], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+7Ch+var_74], 41h
		mov	[esp+7Ch+var_78], 0D3h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		mov	[esp+7Ch+var_7C], ebp
		call	CRYPTO_free
		xor	eax, eax
		jmp	loc_6E4203D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E420660:				; CODE XREF: sub_6E4203A0+EBj
		mov	[esp+7Ch+var_6C], 289h
		mov	[esp+7Ch+var_70], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+7Ch+var_74], 41h
		mov	[esp+7Ch+var_78], 0D3h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E4203D0
sub_6E4203A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4206A0	proc near		; DATA XREF: .data:off_6E4498C0o

File		= dword	ptr -5Ch
Format		= dword	ptr -58h
Size		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_2E		= word ptr -2Eh
var_29		= dword	ptr -29h
var_25		= dword	ptr -25h
var_21		= byte ptr -21h
var_20		= byte ptr -20h
var_1F		= byte ptr -1Fh
var_1E		= byte ptr -1Eh
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_4]
		test	eax, eax
		jz	loc_6E420780
		mov	eax, [esi+90h]
		mov	[esp+5Ch+File],	eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	short loc_6E4206E7
		mov	eax, [esi+90h]
		mov	[esp+5Ch+File],	eax
		call	EVP_MD_CTX_md
		mov	[esp+5Ch+File],	eax
		call	EVP_MD_size
		test	eax, eax
		js	loc_6E420C30

loc_6E4206E7:				; CODE XREF: sub_6E4206A0+27j
					; sub_6E4206A0+5ACj
		mov	ebp, [esi+8Ch]
		mov	edi, [esi+58h]
		lea	ebx, [edi+130h]
		test	ebp, ebp
		jz	loc_6E4209F0
		mov	[esp+5Ch+File],	ebp
		call	EVP_CIPHER_CTX_cipher
		mov	[esp+5Ch+var_4C], eax
		cmp	dword ptr [esi], 301h
		jle	loc_6E4207D3
		mov	[esp+5Ch+File],	eax
		call	EVP_CIPHER_flags
		and	eax, 0F0007h
		cmp	eax, 2
		jnz	loc_6E4207D3
		mov	eax, [esp+5Ch+var_4C]
		mov	[esp+5Ch+File],	eax
		call	EVP_CIPHER_iv_length
		cmp	eax, 1
		jle	loc_6E4207D3
		mov	edx, [edi+13Ch]
		cmp	edx, [edi+140h]
		jz	loc_6E420C60
		mov	[esp+5Ch+var_50], 2FFh
		mov	[esp+5Ch+Size],	offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+5Ch+Format], offset aSDRecDataRecIn ; "%s:%d: rec->data !=	rec->input\n"
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+5Ch+File],	eax ; File
		call	fprintf
		jmp	short loc_6E4207D3
; ---------------------------------------------------------------------------
		align 10h

loc_6E420780:				; CODE XREF: sub_6E4206A0+11j
		mov	eax, [esi+84h]
		mov	[esp+5Ch+File],	eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	short loc_6E4207B0
		mov	eax, [esi+84h]
		mov	[esp+5Ch+File],	eax
		call	EVP_MD_CTX_md
		mov	[esp+5Ch+File],	eax
		call	EVP_MD_size
		test	eax, eax
		js	loc_6E420C00

loc_6E4207B0:				; CODE XREF: sub_6E4206A0+F0j
					; sub_6E4206A0+57Cj
		mov	ebp, [esi+80h]
		mov	eax, [esi+58h]
		lea	ebx, [eax+10Ch]
		test	ebp, ebp
		jz	loc_6E4209F0
		mov	[esp+5Ch+File],	ebp
		call	EVP_CIPHER_CTX_cipher
		mov	[esp+5Ch+var_4C], eax

loc_6E4207D3:				; CODE XREF: sub_6E4206A0+70j
					; sub_6E4206A0+86j ...
		cmp	dword ptr [esi+0C0h], 0
		jz	loc_6E4209F0
		mov	eax, [esp+5Ch+var_4C]
		test	eax, eax
		jz	loc_6E4209F0
		mov	ecx, [ebx+4]
		mov	[esp+5Ch+var_44], ecx
		mov	eax, [ebp+0]
		mov	[esp+5Ch+File],	eax
		call	EVP_CIPHER_block_size
		mov	[esp+5Ch+var_48], eax
		mov	eax, [ebp+0]
		mov	[esp+5Ch+File],	eax
		call	EVP_CIPHER_flags
		test	eax, 200000h
		mov	ecx, [esp+5Ch+var_44]
		jz	loc_6E420A20
		mov	eax, [esi+58h]
		mov	edi, [esp+5Ch+arg_4]
		test	edi, edi
		jnz	loc_6E420A90
		add	eax, 8

loc_6E42082E:				; CODE XREF: sub_6E4206A0+3F3j
		mov	edx, [esi]
		mov	[esp+5Ch+var_44], edx
		cmp	edx, 0FEFFh
		jz	loc_6E420AF0
		cmp	edx, 100h
		jz	loc_6E420AF0
		mov	edx, [eax]
		mov	[esp+5Ch+var_29], edx
		mov	edx, [eax+4]
		mov	[esp+5Ch+var_25], edx
		movzx	edi, byte ptr [eax+7]
		lea	edx, [edi+1]
		mov	[eax+7], dl
		test	dl, dl
		jnz	short loc_6E4208B4
		movzx	edi, byte ptr [eax+6]
		lea	edx, [edi+1]
		mov	[eax+6], dl
		test	dl, dl
		jnz	short loc_6E4208B4
		movzx	edi, byte ptr [eax+5]
		lea	edx, [edi+1]
		mov	[eax+5], dl
		test	dl, dl
		jnz	short loc_6E4208B4
		movzx	edi, byte ptr [eax+4]
		lea	edx, [edi+1]
		mov	[eax+4], dl
		test	dl, dl
		jnz	short loc_6E4208B4
		movzx	edi, byte ptr [eax+3]
		lea	edx, [edi+1]
		mov	[eax+3], dl
		test	dl, dl
		jnz	short loc_6E4208B4
		movzx	edi, byte ptr [eax+2]
		lea	edx, [edi+1]
		mov	[eax+2], dl
		test	dl, dl
		jnz	short loc_6E4208B4
		inc	byte ptr [eax+1]
		jnz	short loc_6E4208B4
		inc	byte ptr [eax]

loc_6E4208B4:				; CODE XREF: sub_6E4206A0+1C5j
					; sub_6E4206A0+1D3j ...
		mov	eax, [esi]
		mov	[esp+5Ch+var_44], eax

loc_6E4208BA:				; CODE XREF: sub_6E4206A0+499j
		mov	[esp+5Ch+var_40], ecx
		mov	eax, [ebx]
		mov	[esp+5Ch+var_21], al
		mov	ecx, [esp+5Ch+var_44]
		mov	eax, ecx
		sar	eax, 8
		mov	[esp+5Ch+var_20], al
		mov	[esp+5Ch+var_1F], cl
		mov	eax, [ebx+4]
		mov	edx, eax
		shr	edx, 8
		mov	[esp+5Ch+var_1E], dl
		mov	[esp+5Ch+var_1D], al
		lea	eax, [esp+5Ch+var_29]
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+Size],	0Dh
		mov	[esp+5Ch+Format], 16h
		mov	[esp+5Ch+File],	ebp
		call	EVP_CIPHER_CTX_ctrl
		mov	edi, eax
		test	eax, eax
		mov	ecx, [esp+5Ch+var_40]
		jle	loc_6E420C80
		mov	eax, [esp+5Ch+arg_4]
		test	eax, eax
		jz	short loc_6E420928
		add	ecx, edi
		add	[ebx+4], edi

loc_6E420920:				; CODE XREF: sub_6E4206A0+402j
		mov	eax, [esp+5Ch+arg_4]
		test	eax, eax
		jnz	short loc_6E420940

loc_6E420928:				; CODE XREF: sub_6E4206A0+279j
					; sub_6E4206A0+4B2j
		test	ecx, ecx
		jz	loc_6E420AE0
		mov	eax, ecx
		xor	edx, edx
		div	[esp+5Ch+var_48]
		test	edx, edx
		jnz	loc_6E420AE0

loc_6E420940:				; CODE XREF: sub_6E4206A0+286j
					; sub_6E4206A0+3E4j
		mov	edx, [ebx+10h]
		mov	eax, [ebx+0Ch]
		mov	[esp+5Ch+var_50], ecx
		mov	[esp+5Ch+Size],	edx
		mov	[esp+5Ch+Format], eax
		mov	[esp+5Ch+File],	ebp
		call	EVP_Cipher
		mov	[esp+5Ch+var_44], eax
		mov	eax, [ebp+0]
		mov	[esp+5Ch+File],	eax
		call	EVP_CIPHER_flags
		test	eax, 100000h
		jz	loc_6E420B40
		mov	eax, [esp+5Ch+var_44]
		shr	eax, 1Fh

loc_6E42097B:				; CODE XREF: sub_6E4206A0+4A9j
		test	al, al
		jnz	loc_6E420C80
		mov	eax, [esp+5Ch+var_4C]
		mov	[esp+5Ch+File],	eax
		call	EVP_CIPHER_flags
		and	eax, 0F0007h
		cmp	eax, 6
		jz	loc_6E420B90

loc_6E42099D:				; CODE XREF: sub_6E4206A0+4F6j
					; sub_6E4206A0+508j
		mov	eax, [esi+84h]
		mov	[esp+5Ch+File],	eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E420B80
		mov	eax, [esi+84h]
		mov	[esp+5Ch+File],	eax
		call	EVP_MD_CTX_md
		mov	[esp+5Ch+File],	eax
		call	EVP_MD_size

loc_6E4209C9:				; CODE XREF: sub_6E4206A0+4E2j
		cmp	[esp+5Ch+var_48], 1
		jz	loc_6E420AB0
		mov	ecx, [esp+5Ch+arg_4]
		test	ecx, ecx
		jz	loc_6E420BB0

loc_6E4209E0:				; CODE XREF: sub_6E4206A0+412j
		mov	eax, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4209F0:				; CODE XREF: sub_6E4206A0+58j
					; sub_6E4206A0+121j ...
		mov	ecx, [ebx+4]
		mov	edx, [ebx+10h]
		mov	eax, [ebx+0Ch]
		mov	[esp+5Ch+Size],	ecx ; Size
		mov	[esp+5Ch+Format], edx ;	Src
		mov	[esp+5Ch+File],	eax ; Dst
		call	memmove
		mov	eax, [ebx+0Ch]
		mov	[ebx+10h], eax
		mov	eax, 1

loc_6E420A14:				; CODE XREF: sub_6E4206A0+423j
					; sub_6E4206A0+42Cj ...
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E420A20:				; CODE XREF: sub_6E4206A0+176j
		cmp	[esp+5Ch+var_48], 1
		jz	short loc_6E420AA0
		mov	eax, [esp+5Ch+arg_4]
		test	eax, eax
		jz	loc_6E420B50
		mov	[esp+5Ch+var_44], ecx
		mov	eax, ecx
		mov	edi, [esp+5Ch+var_48]
		cdq
		idiv	edi
		mov	eax, edi
		sub	eax, edx
		lea	edx, [eax-1]
		test	byte ptr [esi+101h], 2
		jnz	loc_6E420BE0

loc_6E420A54:				; CODE XREF: sub_6E4206A0+546j
					; sub_6E4206A0+54Ej
		add	ecx, eax
		cmp	[esp+5Ch+var_44], ecx
		jge	short loc_6E420A7F
		mov	[esp+5Ch+var_40], eax
		mov	edi, [esp+5Ch+var_44]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E420A70:				; CODE XREF: sub_6E4206A0+3D9j
		mov	eax, [ebx+10h]
		mov	[eax+edi], dl
		inc	edi
		cmp	edi, ecx
		jnz	short loc_6E420A70
		mov	eax, [esp+5Ch+var_40]

loc_6E420A7F:				; CODE XREF: sub_6E4206A0+3BAj
		add	[ebx+4], eax
		xor	edi, edi
		jmp	loc_6E420940
; ---------------------------------------------------------------------------
		align 10h

loc_6E420A90:				; CODE XREF: sub_6E4206A0+185j
		add	eax, 54h
		jmp	loc_6E42082E
; ---------------------------------------------------------------------------
		align 10h

loc_6E420AA0:				; CODE XREF: sub_6E4206A0+385j
		xor	edi, edi
		jmp	loc_6E420920
; ---------------------------------------------------------------------------
		align 10h

loc_6E420AB0:				; CODE XREF: sub_6E4206A0+32Ej
		test	edi, edi
		jz	loc_6E4209E0
		mov	eax, 1
		mov	edx, [esp+5Ch+arg_4]
		test	edx, edx
		jnz	loc_6E420A14

loc_6E420AC9:				; CODE XREF: sub_6E4206A0+52Aj
		sub	[ebx+4], edi
		jmp	loc_6E420A14
; ---------------------------------------------------------------------------
		jmp	short loc_6E420AE0
; ---------------------------------------------------------------------------
		align 10h

loc_6E420AE0:				; CODE XREF: sub_6E4206A0+28Aj
					; sub_6E4206A0+29Aj ...
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E420AF0:				; CODE XREF: sub_6E4206A0+19Aj
					; sub_6E4206A0+1A6j
		mov	edi, [esi+5Ch]
		mov	edx, [esp+5Ch+arg_4]
		test	edx, edx
		jz	short loc_6E420B60
		mov	di, [edi+20Ah]
		mov	edx, edi
		mov	byte ptr [esp+5Ch+var_40], dl
		shr	edi, 8

loc_6E420B0B:				; CODE XREF: sub_6E4206A0+4CFj
		mov	edx, edi
		mov	byte ptr [esp+5Ch+var_34], dl
		mov	dl, byte ptr [esp+5Ch+var_40]
		mov	byte ptr [esp+5Ch+var_34+1], dl
		mov	edi, [eax+2]
		mov	[esp+5Ch+var_34+2], edi
		mov	ax, [eax+6]
		mov	[esp+5Ch+var_2E], ax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_29], eax
		mov	eax, [esp+2Ch]
		mov	[esp+5Ch+var_25], eax
		jmp	loc_6E4208BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E420B40:				; CODE XREF: sub_6E4206A0+2CEj
		mov	eax, [esp+5Ch+var_44]
		test	eax, eax
		setz	al
		jmp	loc_6E42097B
; ---------------------------------------------------------------------------
		align 10h

loc_6E420B50:				; CODE XREF: sub_6E4206A0+38Dj
		xor	edi, edi
		jmp	loc_6E420928
; ---------------------------------------------------------------------------
		align 10h

loc_6E420B60:				; CODE XREF: sub_6E4206A0+459j
		mov	edi, [edi+208h]
		mov	edx, edi
		mov	byte ptr [esp+5Ch+var_40], dl
		shr	edi, 8
		jmp	short loc_6E420B0B
; ---------------------------------------------------------------------------
		jmp	short loc_6E420B80
; ---------------------------------------------------------------------------
		align 10h

loc_6E420B80:				; CODE XREF: sub_6E4206A0+30Dj
					; sub_6E4206A0+4D1j
		xor	eax, eax
		jmp	loc_6E4209C9
; ---------------------------------------------------------------------------
		align 10h

loc_6E420B90:				; CODE XREF: sub_6E4206A0+2F7j
		mov	ebp, [esp+5Ch+arg_4]
		test	ebp, ebp
		jnz	loc_6E42099D
		add	dword ptr [ebx+0Ch], 8
		add	dword ptr [ebx+10h], 8
		sub	dword ptr [ebx+4], 8
		jmp	loc_6E42099D
; ---------------------------------------------------------------------------
		align 10h

loc_6E420BB0:				; CODE XREF: sub_6E4206A0+33Aj
		mov	[esp+5Ch+var_50], eax
		mov	eax, [esp+5Ch+var_48]
		mov	[esp+5Ch+Size],	eax
		mov	[esp+5Ch+Format], ebx
		mov	[esp+5Ch+File],	esi
		call	sub_6E4174B0
		test	edi, edi
		jnz	loc_6E420AC9
		jmp	loc_6E420A14
; ---------------------------------------------------------------------------
		align 10h

loc_6E420BE0:				; CODE XREF: sub_6E4206A0+3AEj
		mov	edi, [esi+58h]
		test	byte ptr [edi],	8
		jz	loc_6E420A54
		mov	edx, eax
		jmp	loc_6E420A54
; ---------------------------------------------------------------------------
		align 10h

loc_6E420C00:				; CODE XREF: sub_6E4206A0+10Aj
		mov	[esp+5Ch+Size],	offset aN0 ; "n	>= 0"
		mov	[esp+5Ch+Format], 307h
		mov	[esp+5Ch+File],	offset aT1_enc_c ; "t1_enc.c"
		call	OpenSSLDie
		jmp	loc_6E4207B0
; ---------------------------------------------------------------------------
		jmp	short loc_6E420C30
; ---------------------------------------------------------------------------
		align 10h

loc_6E420C30:				; CODE XREF: sub_6E4206A0+41j
					; sub_6E4206A0+581j
		mov	[esp+5Ch+Size],	offset aN0 ; "n	>= 0"
		mov	[esp+5Ch+Format], 2E8h
		mov	[esp+5Ch+File],	offset aT1_enc_c ; "t1_enc.c"
		call	OpenSSLDie
		jmp	loc_6E4206E7
; ---------------------------------------------------------------------------
		jmp	short loc_6E420C60
; ---------------------------------------------------------------------------
		align 10h

loc_6E420C60:				; CODE XREF: sub_6E4206A0+ADj
					; sub_6E4206A0+5B1j
		mov	[esp+5Ch+Format], eax
		mov	[esp+5Ch+File],	edx
		call	RAND_bytes
		test	eax, eax
		jg	loc_6E4207D3
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E420C80:				; CODE XREF: sub_6E4206A0+26Dj
					; sub_6E4206A0+2DDj
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E420A14
sub_6E4206A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E420C90	proc near		; DATA XREF: .data:6E4498DCo
					; .data:6E44991Co

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 40h
		mov	esi, [esp+4Ch+arg_0]
		mov	edi, [esp+4Ch+arg_4]
		mov	eax, [esi+58h]
		mov	edx, [eax+178h]
		test	edx, edx
		jz	short loc_6E420CBA
		mov	[esp+4Ch+var_4C], esi
		call	sub_6E4118F0
		test	eax, eax
		jz	short loc_6E420D1A
		mov	eax, [esi+58h]

loc_6E420CBA:				; CODE XREF: sub_6E420C90+19j
		xor	ebx, ebx
		jmp	short loc_6E420CC3
; ---------------------------------------------------------------------------
		align 10h

loc_6E420CC0:				; CODE XREF: sub_6E420C90+5Aj
		mov	eax, [esi+58h]

loc_6E420CC3:				; CODE XREF: sub_6E420C90+2Cj
		mov	eax, [eax+17Ch]
		mov	eax, [eax+ebx]
		test	eax, eax
		jz	short loc_6E420CE4
		mov	[esp+4Ch+var_4C], eax
		call	EVP_MD_CTX_md
		mov	[esp+4Ch+var_4C], eax
		call	EVP_MD_type
		cmp	eax, edi
		jz	short loc_6E420D30

loc_6E420CE4:				; CODE XREF: sub_6E420C90+3Ej
		add	ebx, 4
		cmp	ebx, 18h
		jnz	short loc_6E420CC0

loc_6E420CEC:				; CODE XREF: sub_6E420C90+AEj
		mov	[esp+4Ch+var_3C], 399h
		mov	[esp+4Ch+var_40], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+4Ch+var_44], 144h
		mov	[esp+4Ch+var_48], 11Eh
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	eax, eax

loc_6E420D1A:				; CODE XREF: sub_6E420C90+25j
		add	esp, 40h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E420D30
; ---------------------------------------------------------------------------
		align 10h

loc_6E420D30:				; CODE XREF: sub_6E420C90+52j
					; sub_6E420C90+91j
		mov	eax, [esi+58h]
		mov	eax, [eax+17Ch]
		mov	esi, [eax+ebx]
		test	esi, esi
		jz	short loc_6E420CEC
		lea	ebx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], ebx
		call	EVP_MD_CTX_init
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], ebx
		call	EVP_MD_CTX_copy_ex
		test	eax, eax
		jle	short loc_6E420D90
		lea	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_44], eax
		mov	eax, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	EVP_DigestFinal_ex
		test	eax, eax
		jle	short loc_6E420D90

loc_6E420D78:				; CODE XREF: sub_6E420C90+108j
		mov	[esp+4Ch+var_4C], ebx
		call	EVP_MD_CTX_cleanup
		mov	eax, [esp+4Ch+var_28]
		add	esp, 40h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E420D90:				; CODE XREF: sub_6E420C90+CAj
					; sub_6E420C90+E6j
		mov	[esp+4Ch+var_28], 0
		jmp	short loc_6E420D78
sub_6E420C90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E420DA0	proc near		; DATA XREF: .data:6E4498D4o
					; .data:6E449914o

var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= byte ptr -0C0h
var_BF		= byte ptr -0BFh
var_BE		= byte ptr -0BEh
var_BD		= byte ptr -0BDh
var_BC		= byte ptr -0BCh
var_BB		= byte ptr -0BBh
var_BA		= byte ptr -0BAh
var_B9		= byte ptr -0B9h
var_B8		= byte ptr -0B8h
var_B7		= byte ptr -0B7h
var_B6		= byte ptr -0B6h
var_B5		= byte ptr -0B5h
var_B4		= byte ptr -0B4h
var_9C		= byte ptr -9Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 11Ch
		mov	edi, [esp+12Ch+arg_0]
		mov	ebx, [esp+12Ch+arg_C]
		mov	eax, [edi+58h]
		mov	edx, [eax+178h]
		test	edx, edx
		jz	short loc_6E420DD5
		mov	[esp+12Ch+var_12C], edi
		call	sub_6E4118F0
		test	eax, eax
		jz	loc_6E421100

loc_6E420DD5:				; CODE XREF: sub_6E420DA0+23j
		lea	eax, [esp+12Ch+var_B4]
		mov	[esp+12Ch+var_12C], eax
		call	EVP_MD_CTX_init
		mov	[esp+12Ch+var_E4], 0
		xor	esi, esi
		lea	eax, [esp+12Ch+var_9C]
		mov	[esp+12Ch+var_FC], eax
		lea	ebp, [esp+12Ch+var_CC]
		lea	esi, [esi+0]

loc_6E420E00:				; CODE XREF: sub_6E420DA0+87j
					; sub_6E420DA0+D1j ...
		mov	[esp+12Ch+var_124], ebp
		lea	eax, [esp+12Ch+var_D0]
		mov	[esp+12Ch+var_128], eax
		mov	[esp+12Ch+var_12C], esi
		call	sub_6E43BC20
		test	eax, eax
		jz	short loc_6E420E80
		mov	[esp+12Ch+var_12C], edi
		call	sub_6E4106A0
		test	[esp+12Ch+var_D0], eax
		jnz	short loc_6E420E30
		inc	esi
		jmp	short loc_6E420E00
; ---------------------------------------------------------------------------
		align 10h

loc_6E420E30:				; CODE XREF: sub_6E420DA0+84j
		mov	eax, [esp+12Ch+var_CC]
		mov	[esp+12Ch+var_12C], eax
		call	EVP_MD_size
		mov	edx, eax
		mov	eax, [edi+58h]
		mov	eax, [eax+17Ch]
		mov	eax, [eax+esi*4]
		test	eax, eax
		jz	short loc_6E420E68
		test	edx, edx
		js	short loc_6E420E68
		lea	ecx, [esp+12Ch+var_9C]
		sub	ecx, [esp+12Ch+var_FC]
		sub	ecx, 0FFFFFF80h
		cmp	edx, ecx
		jle	loc_6E4210C0

loc_6E420E68:				; CODE XREF: sub_6E420DA0+ACj
					; sub_6E420DA0+B0j
		mov	[esp+12Ch+var_E4], 1
		inc	esi
		jmp	short loc_6E420E00
; ---------------------------------------------------------------------------
		align 10h

loc_6E420E80:				; CODE XREF: sub_6E420DA0+76j
		mov	eax, [edi+0C0h]
		mov	edx, [eax+10h]
		mov	[esp+12Ch+var_F0], edx
		add	eax, 14h
		mov	[esp+12Ch+var_E0], eax
		mov	eax, [esp+12Ch+var_FC]
		lea	edx, [esp+12Ch+var_9C]
		sub	eax, edx
		mov	[esp+12Ch+var_F8], eax
		mov	[esp+12Ch+var_12C], edi
		call	sub_6E4106A0
		mov	[esp+12Ch+var_FC], eax
		xor	edi, edi
		xor	esi, esi
		lea	ebp, [esp+12Ch+var_C4]
		mov	[esp+12Ch+arg_C], ebx
		mov	ebx, esi
		mov	esi, eax
		jmp	short loc_6E420EE0
; ---------------------------------------------------------------------------
		align 10h

loc_6E420ED0:				; CODE XREF: sub_6E420DA0+156j
		mov	eax, [esp+12Ch+var_C8]
		shl	eax, 0Ah
		and	eax, esi
		cmp	eax, 1
		sbb	edi, 0FFFFFFFFh
		inc	ebx

loc_6E420EE0:				; CODE XREF: sub_6E420DA0+124j
		mov	[esp+12Ch+var_124], ebp
		lea	eax, [esp+12Ch+var_C8]
		mov	[esp+12Ch+var_128], eax
		mov	[esp+12Ch+var_12C], ebx
		call	sub_6E43BC20
		test	eax, eax
		jnz	short loc_6E420ED0
		mov	[esp+12Ch+var_E8], eax
		mov	ebx, [esp+12Ch+arg_C]
		test	edi, edi
		jz	loc_6E4211C0
		mov	eax, [esp+12Ch+var_F0]
		cdq
		idiv	edi
		mov	[esp+12Ch+var_F4], eax
		dec	edi
		jz	loc_6E421180
		mov	edi, ebx
		mov	edx, 0Ch
		test	bl, 1
		jnz	loc_6E421198

loc_6E420F2D:				; CODE XREF: sub_6E420DA0+3F2j
					; sub_6E420DA0+400j
		test	edi, 2
		jnz	loc_6E4211A5

loc_6E420F39:				; CODE XREF: sub_6E420DA0+410j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E4210A0
		and	edx, 1
		jnz	loc_6E421090

loc_6E420F54:				; CODE XREF: sub_6E420DA0+2F3j
					; sub_6E420DA0+30Bj
		xor	esi, esi
		lea	edi, [esp+12Ch+var_C0]
		mov	eax, [esp+12Ch+var_F0]
		and	eax, 1
		add	eax, [esp+12Ch+var_F4]
		mov	[esp+12Ch+var_EC], eax
		mov	[esp+12Ch+var_F0], edi
		mov	edi, [esp+12Ch+var_E0]
		jmp	short loc_6E420F80
; ---------------------------------------------------------------------------
		align 10h

loc_6E420F80:				; CODE XREF: sub_6E420DA0+1D1j
					; sub_6E420DA0+2DCj
		mov	[esp+12Ch+var_124], ebp
		lea	eax, [esp+12Ch+var_C8]
		mov	[esp+12Ch+var_128], eax
		mov	[esp+12Ch+var_12C], esi
		call	sub_6E43BC20
		test	eax, eax
		jz	loc_6E421120
		mov	eax, [esp+12Ch+var_C8]
		shl	eax, 0Ah
		test	[esp+12Ch+var_FC], eax
		jz	loc_6E42107B
		mov	eax, [esp+12Ch+var_C4]
		test	eax, eax
		jz	loc_6E421240
		mov	[esp+12Ch+var_108], 0Ch
		mov	ecx, [esp+12Ch+var_F0]
		mov	[esp+12Ch+var_10C], ecx
		mov	[esp+12Ch+var_110], 0
		mov	[esp+12Ch+var_114], 0
		mov	[esp+12Ch+var_118], 0
		mov	[esp+12Ch+var_11C], 0
		mov	edx, [esp+12Ch+var_F8]
		mov	[esp+12Ch+var_120], edx
		lea	ecx, [esp+12Ch+var_9C]
		mov	[esp+12Ch+var_124], ecx
		mov	edx, [esp+12Ch+arg_8]
		mov	[esp+12Ch+var_128], edx
		mov	ecx, [esp+12Ch+arg_4]
		mov	[esp+12Ch+var_12C], ecx
		mov	ecx, [esp+12Ch+var_EC]
		mov	edx, edi
		call	sub_6E41F140
		test	eax, eax
		jz	loc_6E421280
		add	edi, [esp+12Ch+var_F4]
		mov	al, [esp+12Ch+var_C0]
		xor	[ebx], al
		mov	al, [esp+12Ch+var_BF]
		xor	[ebx+1], al
		mov	al, [esp+12Ch+var_BE]
		xor	[ebx+2], al
		mov	al, [esp+12Ch+var_BD]
		xor	[ebx+3], al
		mov	al, [esp+12Ch+var_BC]
		xor	[ebx+4], al
		mov	al, [esp+12Ch+var_BB]
		xor	[ebx+5], al
		mov	al, [esp+12Ch+var_BA]
		xor	[ebx+6], al
		mov	al, [esp+12Ch+var_B9]
		xor	[ebx+7], al
		mov	al, [esp+12Ch+var_B8]
		xor	[ebx+8], al
		mov	al, [esp+12Ch+var_B7]
		xor	[ebx+9], al
		mov	al, [esp+12Ch+var_B6]
		xor	[ebx+0Ah], al
		mov	al, [esp+12Ch+var_B5]
		xor	[ebx+0Bh], al

loc_6E42107B:				; CODE XREF: sub_6E420DA0+207j
		inc	esi
		jmp	loc_6E420F80
; ---------------------------------------------------------------------------
		jmp	short loc_6E421090
; ---------------------------------------------------------------------------
		align 10h

loc_6E421090:				; CODE XREF: sub_6E420DA0+1AEj
					; sub_6E420DA0+2E1j ...
		mov	byte ptr [edi],	0
		jmp	loc_6E420F54
; ---------------------------------------------------------------------------
		align 10h

loc_6E4210A0:				; CODE XREF: sub_6E420DA0+1A5j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E420F54
		jmp	short loc_6E421090
; ---------------------------------------------------------------------------
		align 10h

loc_6E4210C0:				; CODE XREF: sub_6E420DA0+C2j
		mov	[esp+12Ch+var_F8], edx
		mov	[esp+12Ch+var_128], eax
		lea	eax, [esp+12Ch+var_B4]
		mov	[esp+12Ch+var_12C], eax
		call	EVP_MD_CTX_copy_ex
		test	eax, eax
		mov	edx, [esp+12Ch+var_F8]
		jnz	loc_6E421290

loc_6E4210E0:				; CODE XREF: sub_6E420DA0+516j
					; sub_6E420DA0+520j
		mov	[esp+12Ch+var_E4], 1

loc_6E4210E8:				; CODE XREF: sub_6E420DA0+526j
		add	[esp+12Ch+var_FC], edx
		inc	esi
		jmp	loc_6E420E00
; ---------------------------------------------------------------------------
		align 10h

loc_6E421100:				; CODE XREF: sub_6E420DA0+2Fj
					; sub_6E420DA0+3BDj
		mov	[esp+12Ch+var_E8], 0
		mov	eax, [esp+12Ch+var_E8]
		add	esp, 11Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E421120:				; CODE XREF: sub_6E420DA0+1F6j
		mov	edi, [esp+12Ch+var_F0]
		lea	eax, [esp+12Ch+var_B4]
		mov	[esp+12Ch+var_12C], eax
		call	EVP_MD_CTX_cleanup
		mov	eax, [esp+12Ch+var_F8]
		mov	[esp+12Ch+var_128], eax
		lea	eax, [esp+12Ch+var_9C]
		mov	[esp+12Ch+var_12C], eax
		call	OPENSSL_cleanse
		mov	[esp+12Ch+var_128], 0Ch
		mov	[esp+12Ch+var_12C], edi
		call	OPENSSL_cleanse
		mov	eax, [esp+12Ch+var_E4]
		test	eax, eax
		jnz	short loc_6E421100
		mov	[esp+12Ch+var_E8], 0Ch
		mov	eax, [esp+12Ch+var_E8]
		add	esp, 11Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E421180:				; CODE XREF: sub_6E420DA0+177j
		mov	[esp+12Ch+var_F0], 0
		mov	edi, ebx
		mov	edx, 0Ch
		test	bl, 1
		jz	loc_6E420F2D

loc_6E421198:				; CODE XREF: sub_6E420DA0+187j
		mov	byte ptr [ebx],	0
		lea	edi, [ebx+1]
		mov	dl, 0Bh
		jmp	loc_6E420F2D
; ---------------------------------------------------------------------------

loc_6E4211A5:				; CODE XREF: sub_6E420DA0+193j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E420F39
; ---------------------------------------------------------------------------
		align 10h

loc_6E4211C0:				; CODE XREF: sub_6E420DA0+165j
		mov	[esp+12Ch+var_11C], 10Ah
		mov	[esp+12Ch+var_120], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+12Ch+var_124], 44h
		mov	[esp+12Ch+var_128], 11Ch
		mov	[esp+12Ch+var_12C], 14h
		call	ERR_put_error
		lea	edi, [esp+12Ch+var_C0]

loc_6E4211F0:				; CODE XREF: sub_6E420DA0+4D0j
					; sub_6E420DA0+4E4j
		lea	eax, [esp+12Ch+var_B4]
		mov	[esp+12Ch+var_12C], eax
		call	EVP_MD_CTX_cleanup
		mov	eax, [esp+12Ch+var_F8]
		mov	[esp+12Ch+var_128], eax
		lea	eax, [esp+12Ch+var_9C]
		mov	[esp+12Ch+var_12C], eax
		call	OPENSSL_cleanse
		mov	[esp+12Ch+var_128], 0Ch
		mov	[esp+12Ch+var_12C], edi
		call	OPENSSL_cleanse
		mov	eax, [esp+12Ch+var_E8]
		add	esp, 11Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E421240:				; CODE XREF: sub_6E420DA0+213j
		mov	edi, [esp+12Ch+var_F0]
		mov	[esp+12Ch+var_11C], 115h
		mov	[esp+12Ch+var_120], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+12Ch+var_124], 146h
		mov	[esp+12Ch+var_128], 11Ch
		mov	[esp+12Ch+var_12C], 14h
		call	ERR_put_error
		jmp	loc_6E4211F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E421280:				; CODE XREF: sub_6E420DA0+27Ej
		mov	edi, [esp+12Ch+var_F0]
		jmp	loc_6E4211F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E421290:				; CODE XREF: sub_6E420DA0+33Aj
		mov	[esp+12Ch+var_F8], edx
		lea	eax, [esp+12Ch+var_D4]
		mov	[esp+12Ch+var_124], eax
		mov	eax, [esp+12Ch+var_FC]
		mov	[esp+12Ch+var_128], eax
		lea	eax, [esp+12Ch+var_B4]
		mov	[esp+12Ch+var_12C], eax
		call	EVP_DigestFinal_ex
		test	eax, eax
		mov	edx, [esp+12Ch+var_F8]
		jz	loc_6E4210E0
		cmp	edx, [esp+12Ch+var_D4]
		jnz	loc_6E4210E0
		jmp	loc_6E4210E8
sub_6E420DA0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4212D0	proc near		; DATA XREF: .data:6E4498C4o
					; .data:6E449904o

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_46		= word ptr -46h
var_41		= dword	ptr -41h
var_3D		= dword	ptr -3Dh
var_39		= byte ptr -39h
var_38		= byte ptr -38h
var_37		= byte ptr -37h
var_36		= byte ptr -36h
var_35		= byte ptr -35h
var_34		= byte ptr -34h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	ebx, [esp+9Ch+arg_0]
		mov	eax, [ebx+7Ch]
		mov	edx, [esp+9Ch+arg_8]
		test	edx, edx
		mov	[esp+9Ch+var_6C], eax
		jz	loc_6E4214C0
		and	[esp+9Ch+var_6C], 2
		mov	edi, [ebx+58h]
		lea	esi, [edi+130h]
		add	edi, 54h
		mov	ebp, [ebx+90h]

loc_6E42130E:				; CODE XREF: sub_6E4212D0+207j
		mov	[esp+9Ch+var_9C], ebp
		call	EVP_MD_CTX_md
		mov	[esp+9Ch+var_9C], eax
		call	EVP_MD_size
		test	eax, eax
		js	loc_6E4215F0

loc_6E421326:				; CODE XREF: sub_6E4212D0+344j
		mov	[esp+9Ch+var_50], eax
		mov	eax, [esp+9Ch+var_6C]
		test	eax, eax
		jz	loc_6E4215A0

loc_6E421336:				; CODE XREF: sub_6E4212D0+2E2j
		mov	eax, [ebx]
		cmp	eax, 0FEFFh
		jz	loc_6E421470
		cmp	eax, 100h
		jz	loc_6E421470
		mov	edx, [edi]
		mov	[esp+9Ch+var_41], edx
		mov	edx, [edi+4]
		mov	[esp+9Ch+var_3D], edx

loc_6E42135B:				; CODE XREF: sub_6E4212D0+1E1j
		mov	edx, [esi+4]
		mov	ecx, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_64], ecx
		mov	ecx, [esi]
		mov	[esp+9Ch+var_68], ecx
		xor	ecx, ecx
		mov	cl, byte ptr [esp+9Ch+var_68]
		mov	[esi], ecx
		mov	[esp+9Ch+var_39], cl
		mov	ecx, eax
		sar	ecx, 8
		mov	[esp+9Ch+var_38], cl
		mov	[esp+9Ch+var_37], al
		mov	eax, edx
		shr	eax, 8
		mov	[esp+9Ch+var_36], al
		mov	[esp+9Ch+var_35], dl
		mov	ecx, [esp+9Ch+arg_8]
		test	ecx, ecx
		jnz	short loc_6E4213BD
		mov	[esp+9Ch+var_60], edx
		mov	eax, [ebx+80h]
		mov	[esp+9Ch+var_9C], eax
		call	EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		cmp	eax, 2
		jz	loc_6E4214F0

loc_6E4213BD:				; CODE XREF: sub_6E4212D0+CBj
					; sub_6E4212D0+22Ej
		mov	[esp+9Ch+var_94], 0Dh
		lea	eax, [esp+9Ch+var_41]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebp
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E421580
		mov	edx, [esi+4]
		mov	eax, [esi+10h]
		mov	[esp+9Ch+var_94], edx
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebp
		call	EVP_DigestUpdate
		test	eax, eax
		jle	loc_6E421580
		lea	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_94], eax
		mov	eax, [esp+9Ch+arg_4]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebp
		call	EVP_DigestSignFinal
		test	eax, eax
		jle	loc_6E421580

loc_6E42141E:				; CODE XREF: sub_6E4212D0+29Dj
		mov	eax, [esp+9Ch+var_6C]
		test	eax, eax
		jz	loc_6E4215D0

loc_6E42142A:				; CODE XREF: sub_6E4212D0+30Cj
		mov	eax, [ebx]
		cmp	eax, 0FEFFh
		jz	short loc_6E42145F
		cmp	eax, 100h
		jz	short loc_6E42145F
		inc	byte ptr [edi+7]
		jnz	short loc_6E42145F
		inc	byte ptr [edi+6]
		jnz	short loc_6E42145F
		inc	byte ptr [edi+5]
		jnz	short loc_6E42145F
		inc	byte ptr [edi+4]
		jnz	short loc_6E42145F
		inc	byte ptr [edi+3]
		jnz	short loc_6E42145F
		inc	byte ptr [edi+2]
		jnz	short loc_6E42145F
		inc	byte ptr [edi+1]
		jnz	short loc_6E42145F
		inc	byte ptr [edi]

loc_6E42145F:				; CODE XREF: sub_6E4212D0+161j
					; sub_6E4212D0+168j ...
		mov	eax, [esp+9Ch+var_50]
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E421470:				; CODE XREF: sub_6E4212D0+6Dj
					; sub_6E4212D0+78j
		mov	edx, [ebx+5Ch]
		mov	ecx, [esp+9Ch+arg_8]
		test	ecx, ecx
		jnz	short loc_6E4214E0
		mov	ecx, [edx+208h]
		mov	dl, cl
		shr	ecx, 8

loc_6E421489:				; CODE XREF: sub_6E4212D0+21Cj
		mov	byte ptr [esp+9Ch+var_4C], cl
		mov	byte ptr [esp+9Ch+var_4C+1], dl
		mov	edx, [edi+2]
		mov	[esp+9Ch+var_4C+2], edx
		mov	dx, [edi+6]
		mov	[esp+9Ch+var_46], dx
		mov	edx, [esp+9Ch+var_4C]
		mov	ecx, [esp+54h]
		mov	[esp+9Ch+var_41], edx
		mov	[esp+9Ch+var_3D], ecx
		jmp	loc_6E42135B
; ---------------------------------------------------------------------------
		align 10h

loc_6E4214C0:				; CODE XREF: sub_6E4212D0+21j
		and	[esp+9Ch+var_6C], 1
		mov	edi, [ebx+58h]
		lea	esi, [edi+10Ch]
		add	edi, 8
		mov	ebp, [ebx+84h]
		jmp	loc_6E42130E
; ---------------------------------------------------------------------------
		align 10h

loc_6E4214E0:				; CODE XREF: sub_6E4212D0+1ACj
		mov	cx, [edx+20Ah]
		mov	dl, cl
		shr	ecx, 8
		jmp	short loc_6E421489
; ---------------------------------------------------------------------------
		align 10h

loc_6E4214F0:				; CODE XREF: sub_6E4212D0+E7j
		mov	[esp+9Ch+var_9C], ebp
		call	sub_6E4178F0
		test	al, al
		mov	edx, [esp+9Ch+var_60]
		jz	loc_6E4213BD
		mov	eax, [ebx+58h]
		mov	ecx, [esi+10h]
		mov	[esp+9Ch+var_60], ecx
		mov	[esp+9Ch+var_78], 0
		mov	ecx, [eax+10h]
		mov	[esp+9Ch+var_7C], ecx
		add	eax, 14h
		mov	[esp+9Ch+var_80], eax
		add	edx, [esp+9Ch+var_64]
		mov	eax, [esp+9Ch+var_68]
		shr	eax, 8
		add	edx, eax
		mov	[esp+9Ch+var_84], edx
		mov	eax, [esp+9Ch+var_50]
		add	eax, [esi+4]
		mov	[esp+9Ch+var_88], eax
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_41]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_94], eax
		mov	eax, [esp+9Ch+arg_4]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebp
		call	sub_6E417930
		test	eax, eax
		jg	loc_6E42141E
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E421580:				; CODE XREF: sub_6E4212D0+107j
					; sub_6E4212D0+125j ...
		mov	edx, [esp+9Ch+var_6C]
		test	edx, edx
		jz	short loc_6E4215C0

loc_6E421588:				; CODE XREF: sub_6E4212D0+2E8j
					; sub_6E4212D0+2FCj
		mov	eax, 0FFFFFFFFh
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4215A0:				; CODE XREF: sub_6E4212D0+60j
		mov	[esp+9Ch+var_98], ebp
		lea	ebp, [esp+9Ch+var_34]
		mov	[esp+9Ch+var_9C], ebp
		call	EVP_MD_CTX_copy
		test	eax, eax
		jnz	loc_6E421336
		jmp	short loc_6E421588
; ---------------------------------------------------------------------------
		align 10h

loc_6E4215C0:				; CODE XREF: sub_6E4212D0+2B6j
		lea	eax, [esp+9Ch+var_34]
		mov	[esp+9Ch+var_9C], eax
		call	EVP_MD_CTX_cleanup
		jmp	short loc_6E421588
; ---------------------------------------------------------------------------
		align 10h

loc_6E4215D0:				; CODE XREF: sub_6E4212D0+154j
		lea	eax, [esp+9Ch+var_34]
		mov	[esp+9Ch+var_9C], eax
		call	EVP_MD_CTX_cleanup
		jmp	loc_6E42142A
; ---------------------------------------------------------------------------
		jmp	short loc_6E4215F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4215F0:				; CODE XREF: sub_6E4212D0+50j
					; sub_6E4212D0+311j
		mov	[esp+9Ch+var_68], eax
		mov	[esp+9Ch+var_94], offset aT0 ; "t >= 0"
		mov	[esp+9Ch+var_98], 3F4h
		mov	[esp+9Ch+var_9C], offset aT1_enc_c ; "t1_enc.c"
		call	OpenSSLDie
		mov	eax, [esp+9Ch+var_68]
		jmp	loc_6E421326
sub_6E4212D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E421620	proc near		; DATA XREF: .data:6E4498CCo
					; .data:6E44990Co

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	eax, [esp+9Ch+arg_0]
		mov	ecx, [eax+0C0h]
		mov	[esp+9Ch+var_70], ecx
		lea	ebp, [ecx+14h]
		mov	edx, [eax+58h]
		lea	ecx, [edx+0A0h]
		mov	[esp+9Ch+var_68], ecx
		add	edx, 0C0h
		mov	[esp+9Ch+var_64], edx
		mov	[esp+9Ch+var_9C], eax
		call	sub_6E4106A0
		mov	[esp+9Ch+var_74], eax
		xor	esi, esi
		xor	ebx, ebx
		mov	edi, eax
		jmp	short loc_6E421680
; ---------------------------------------------------------------------------
		align 10h

loc_6E421670:				; CODE XREF: sub_6E421620+7Aj
		mov	eax, [esp+9Ch+var_54]
		shl	eax, 0Ah
		and	eax, edi
		cmp	eax, 1
		sbb	esi, 0FFFFFFFFh
		inc	ebx

loc_6E421680:				; CODE XREF: sub_6E421620+47j
		lea	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_54]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebx
		call	sub_6E43BC20
		test	eax, eax
		jnz	short loc_6E421670
		test	esi, esi
		jz	loc_6E421920
		mov	eax, [esp+9Ch+arg_C]
		cdq
		idiv	esi
		mov	[esp+9Ch+var_6C], eax
		dec	esi
		jz	loc_6E421910

loc_6E4216B9:				; CODE XREF: sub_6E421620+2FBj
		mov	edi, ebp
		mov	edx, 30h
		test	ebp, 1
		jnz	loc_6E421965

loc_6E4216CC:				; CODE XREF: sub_6E421620+352j
		test	edi, 2
		jnz	loc_6E421955

loc_6E4216D8:				; CODE XREF: sub_6E421620+340j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E4218F0
		and	edx, 1
		jnz	loc_6E4218E0

loc_6E4216F3:				; CODE XREF: sub_6E421620+2C3j
					; sub_6E421620+2DBj
		mov	ebx, [esp+9Ch+var_70]
		add	ebx, 18h
		lea	edi, [esp+9Ch+var_4C]
		cmp	ebx, edi
		setbe	byte ptr [esp+9Ch+var_70]
		lea	eax, [esp+9Ch+var_48]
		cmp	ebp, eax
		setnb	al
		or	byte ptr [esp+9Ch+var_70], al
		xor	esi, esi
		mov	eax, [esp+9Ch+arg_C]
		and	eax, 1
		add	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_60], eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E421730:				; CODE XREF: sub_6E421620+239j
					; sub_6E421620+25Ej
		lea	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_54]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], esi
		call	sub_6E43BC20
		test	eax, eax
		jz	loc_6E4218C0
		mov	eax, [esp+9Ch+var_54]
		shl	eax, 0Ah
		test	[esp+9Ch+var_74], eax
		jz	loc_6E421858
		mov	eax, [esp+9Ch+var_50]
		test	eax, eax
		jz	loc_6E421890
		mov	[esp+9Ch+var_78], 30h
		mov	[esp+9Ch+var_7C], edi
		mov	[esp+9Ch+var_80], 20h
		mov	edx, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_84], edx
		mov	[esp+9Ch+var_88], 0
		mov	[esp+9Ch+var_8C], 0
		mov	[esp+9Ch+var_90], 20h
		mov	edx, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_94], edx
		mov	[esp+9Ch+var_98], 0Dh
		mov	[esp+9Ch+var_9C], offset aMasterSecret ; "master secret"
		mov	ecx, [esp+9Ch+var_60]
		mov	edx, [esp+9Ch+arg_8]
		call	sub_6E41F140
		test	eax, eax
		jz	loc_6E4218C0
		mov	eax, [esp+9Ch+var_6C]
		add	[esp+9Ch+arg_8], eax
		cmp	byte ptr [esp+9Ch+var_70], 0
		jz	short loc_6E421860
		mov	eax, [ebp+0]
		xor	eax, [esp+9Ch+var_4C]
		mov	[ebp+0], eax
		mov	eax, [ebx]
		xor	eax, [esp+9Ch+var_48]
		mov	[ebx], eax
		mov	eax, [ebx+4]
		xor	eax, [esp+9Ch+var_44]
		mov	[ebx+4], eax
		mov	eax, [ebx+8]
		xor	eax, [esp+9Ch+var_40]
		mov	[ebx+8], eax
		mov	eax, [ebx+0Ch]
		xor	eax, [esp+9Ch+var_3C]
		mov	[ebx+0Ch], eax
		mov	eax, [ebx+10h]
		xor	eax, [esp+9Ch+var_38]
		mov	[ebx+10h], eax
		mov	eax, [ebx+14h]
		xor	eax, [esp+9Ch+var_34]
		mov	[ebx+14h], eax
		mov	eax, [ebx+18h]
		xor	eax, [esp+9Ch+var_30]
		mov	[ebx+18h], eax
		mov	eax, [ebx+1Ch]
		xor	eax, [esp+9Ch+var_2C]
		mov	[ebx+1Ch], eax
		mov	eax, [ebx+20h]
		xor	eax, [esp+9Ch+var_28]
		mov	[ebx+20h], eax
		mov	eax, [ebx+24h]
		xor	eax, [esp+9Ch+var_24]
		mov	[ebx+24h], eax
		mov	eax, [ebx+28h]
		xor	eax, [esp+9Ch+var_20]
		mov	[ebx+28h], eax

loc_6E421858:				; CODE XREF: sub_6E421620+13Bj
		inc	esi
		jmp	loc_6E421730
; ---------------------------------------------------------------------------
		align 10h

loc_6E421860:				; CODE XREF: sub_6E421620+1C0j
		xor	eax, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E421870:				; CODE XREF: sub_6E421620+25Bj
		mov	cl, [edi+eax]
		xor	[ebp+eax+0], cl
		inc	eax
		cmp	eax, 30h
		jnz	short loc_6E421870
		inc	esi
		jmp	loc_6E421730
; ---------------------------------------------------------------------------
		align 10h

loc_6E421890:				; CODE XREF: sub_6E421620+147j
		mov	[esp+9Ch+var_8C], 115h
		mov	[esp+9Ch+var_90], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+9Ch+var_94], 146h
		mov	[esp+9Ch+var_98], 11Ch
		mov	[esp+9Ch+var_9C], 14h
		call	ERR_put_error
		lea	esi, [esi+0]

loc_6E4218C0:				; CODE XREF: sub_6E421620+12Aj
					; sub_6E421620+1AAj ...
		mov	[esp+9Ch+var_98], 30h
		mov	[esp+9Ch+var_9C], edi
		call	OPENSSL_cleanse
		mov	eax, 30h
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E4218E0:				; CODE XREF: sub_6E421620+CDj
					; sub_6E421620+2E1j
		mov	byte ptr [edi],	0
		jmp	loc_6E4216F3
; ---------------------------------------------------------------------------
		align 10h

loc_6E4218F0:				; CODE XREF: sub_6E421620+C4j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E4216F3
		jmp	short loc_6E4218E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E421910:				; CODE XREF: sub_6E421620+93j
		mov	[esp+9Ch+arg_C], 0
		jmp	loc_6E4216B9
; ---------------------------------------------------------------------------

loc_6E421920:				; CODE XREF: sub_6E421620+7Ej
		mov	[esp+9Ch+var_8C], 10Ah
		mov	[esp+9Ch+var_90], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+9Ch+var_94], 44h
		mov	[esp+9Ch+var_98], 11Ch
		mov	[esp+9Ch+var_9C], 14h
		call	ERR_put_error
		lea	edi, [esp+9Ch+var_4C]
		jmp	loc_6E4218C0
; ---------------------------------------------------------------------------

loc_6E421955:				; CODE XREF: sub_6E421620+B2j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E4216D8
; ---------------------------------------------------------------------------

loc_6E421965:				; CODE XREF: sub_6E421620+A6j
		mov	eax, [esp+9Ch+var_70]
		mov	byte ptr [eax+14h], 0
		lea	edi, [ebp+1]
		mov	dl, 2Fh
		jmp	loc_6E4216CC
sub_6E421620	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E421980	proc near		; DATA XREF: .data:6E4498F4o
					; .data:6E449934o

Buf1		= dword	ptr -5Ch
Buf2		= dword	ptr -58h
Size		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	[esp+5Ch+Size],	4A2h
		mov	[esp+5Ch+Buf2],	offset aT1_enc_c ; "t1_enc.c"
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+Buf1],	eax
		call	CRYPTO_malloc
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E421D90
		mov	eax, [esp+5Ch+arg_10]
		lea	edx, [eax+40h]
		mov	edi, [esp+5Ch+arg_1C]
		test	edi, edi
		jnz	loc_6E421BE0
		mov	[esp+5Ch+var_24], edx
		mov	eax, edx

loc_6E4219C6:				; CODE XREF: sub_6E421980+26Cj
		mov	[esp+5Ch+var_20], edx
		mov	[esp+5Ch+Size],	4B0h
		mov	[esp+5Ch+Buf2],	offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+5Ch+Buf1],	eax
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E421C00
		mov	eax, [esp+5Ch+arg_10]
		mov	edi, ebx
		mov	esi, [esp+5Ch+arg_C]
		cmp	eax, 4
		mov	edx, [esp+5Ch+var_20]
		jnb	loc_6E421C40

loc_6E421A03:				; CODE XREF: sub_6E421980+2DCj
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E421A14
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E421A14:				; CODE XREF: sub_6E421980+87j
		test	al, 1
		jz	short loc_6E421A22
		mov	al, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_20], al
		mov	[edi+ecx], al

loc_6E421A22:				; CODE XREF: sub_6E421980+96j
		mov	eax, [esp+5Ch+arg_0]
		mov	ecx, [eax+58h]
		mov	eax, [esp+5Ch+arg_10]
		lea	edi, [ebx+eax]
		lea	esi, [ecx+0C0h]
		mov	eax, 20h
		test	edi, 1
		jnz	loc_6E421E30

loc_6E421A47:				; CODE XREF: sub_6E421980+4C4j
		test	edi, 2
		jnz	loc_6E421E10

loc_6E421A53:				; CODE XREF: sub_6E421980+49Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		test	al, 2
		jz	short loc_6E421A69
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E421A69:				; CODE XREF: sub_6E421980+DCj
		test	al, 1
		jz	short loc_6E421A77
		mov	al, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_20], al
		mov	[edi+ecx], al

loc_6E421A77:				; CODE XREF: sub_6E421980+EBj
		mov	eax, [esp+5Ch+arg_0]
		mov	ecx, [eax+58h]
		mov	eax, [esp+5Ch+arg_10]
		lea	edi, [ebx+eax+20h]
		lea	esi, [ecx+0A0h]
		mov	eax, 20h
		test	edi, 1
		jnz	loc_6E421DF0

loc_6E421A9D:				; CODE XREF: sub_6E421980+484j
		test	edi, 2
		jnz	loc_6E421DD0

loc_6E421AA9:				; CODE XREF: sub_6E421980+45Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		test	al, 2
		jz	short loc_6E421ABF
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E421ABF:				; CODE XREF: sub_6E421980+132j
		test	al, 1
		jz	short loc_6E421ACD
		mov	al, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_20], al
		mov	[edi+ecx], al

loc_6E421ACD:				; CODE XREF: sub_6E421980+141j
		mov	esi, [esp+5Ch+arg_1C]
		test	esi, esi
		jz	short loc_6E421B30
		mov	eax, [esp+5Ch+arg_18]
		shr	eax, 8
		mov	[ebx+edx], al
		mov	edx, [esp+5Ch+arg_10]
		mov	al, byte ptr [esp+5Ch+arg_18]
		mov	[ebx+edx+41h], al
		lea	edx, [edx+42h]
		mov	ecx, [esp+5Ch+arg_18]
		test	ecx, ecx
		jnz	short loc_6E421AFE
		mov	eax, [esp+5Ch+arg_14]
		test	eax, eax
		jz	short loc_6E421B30

loc_6E421AFE:				; CODE XREF: sub_6E421980+174j
		mov	eax, [esp+5Ch+arg_18]
		lea	edi, [ebx+edx]
		mov	esi, [esp+5Ch+arg_14]
		cmp	eax, 4
		jnb	loc_6E421CA0
		xor	edx, edx
		test	al, 2
		jnz	loc_6E421C80

loc_6E421B1C:				; CODE XREF: sub_6E421980+343j
		test	al, 1
		jnz	loc_6E421C70
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E421B30:				; CODE XREF: sub_6E421980+153j
					; sub_6E421980+17Cj ...
		mov	[esp+5Ch+Size],	0Fh ; Size
		mov	[esp+5Ch+Buf2],	offset aClientFinished ; "client finished"
		mov	[esp+5Ch+Buf1],	ebx ; Buf1
		call	memcmp
		test	eax, eax
		jz	short loc_6E421B90
		mov	[esp+5Ch+Size],	0Fh ; Size
		mov	[esp+5Ch+Buf2],	offset aServerFinished ; "server finished"
		mov	[esp+5Ch+Buf1],	ebx ; Buf1
		call	memcmp
		test	eax, eax
		jz	short loc_6E421B90
		mov	[esp+5Ch+Size],	0Dh ; Size
		mov	[esp+5Ch+Buf2],	offset aMasterSecret ; "master secret"
		mov	[esp+5Ch+Buf1],	ebx ; Buf1
		call	memcmp
		test	eax, eax
		jnz	loc_6E421CD0
		nop
		lea	esi, [esi+0]

loc_6E421B90:				; CODE XREF: sub_6E421980+1CAj
					; sub_6E421980+1E6j ...
		mov	[esp+5Ch+var_4C], 4E8h
		mov	[esp+5Ch+var_50], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+5Ch+Size],	16Fh
		mov	[esp+5Ch+Buf2],	13Ah
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		xor	eax, eax

loc_6E421BBE:				; CODE XREF: sub_6E421980+404j
		mov	[esp+5Ch+var_24], eax
		mov	[esp+5Ch+Buf1],	ebp
		call	CRYPTO_free
		mov	[esp+5Ch+Buf1],	ebx
		call	CRYPTO_free
		mov	eax, [esp+5Ch+var_24]

loc_6E421BD6:				; CODE XREF: sub_6E421980+43Ej
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E421BE0:				; CODE XREF: sub_6E421980+3Aj
		mov	eax, [esp+5Ch+arg_18]
		lea	eax, [edx+eax+2]
		mov	[esp+5Ch+var_24], eax
		jmp	loc_6E4219C6
; ---------------------------------------------------------------------------
		jmp	short loc_6E421C00
; ---------------------------------------------------------------------------
		align 10h

loc_6E421C00:				; CODE XREF: sub_6E421980+66j
					; sub_6E421980+271j
		mov	[esp+5Ch+var_4C], 4ECh
		mov	[esp+5Ch+var_50], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+5Ch+Size],	41h
		mov	[esp+5Ch+Buf2],	13Ah
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		mov	[esp+5Ch+Buf1],	ebp
		call	CRYPTO_free
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E421C40:				; CODE XREF: sub_6E421980+7Dj
		test	bl, 1
		jnz	loc_6E421E70

loc_6E421C49:				; CODE XREF: sub_6E421980+4FDj
		test	edi, 2
		jnz	loc_6E421E50

loc_6E421C55:				; CODE XREF: sub_6E421980+4DFj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E421A03
; ---------------------------------------------------------------------------
		jmp	short loc_6E421C70
; ---------------------------------------------------------------------------
		align 10h

loc_6E421C70:				; CODE XREF: sub_6E421980+19Ej
					; sub_6E421980+2E1j ...
		mov	al, [esi+edx]
		mov	byte ptr [esp+5Ch+var_20], al
		mov	[edi+edx], al
		jmp	loc_6E421B30
; ---------------------------------------------------------------------------
		align 10h

loc_6E421C80:				; CODE XREF: sub_6E421980+196j
					; sub_6E421980+349j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E421B30
		jmp	short loc_6E421C70
; ---------------------------------------------------------------------------
		align 10h

loc_6E421CA0:				; CODE XREF: sub_6E421980+18Cj
		test	edi, 1
		jnz	loc_6E421E96

loc_6E421CAC:				; CODE XREF: sub_6E421980+51Dj
		test	edi, 2
		jnz	loc_6E421E82

loc_6E421CB8:				; CODE XREF: sub_6E421980+511j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	loc_6E421B1C
		jmp	short loc_6E421C80
; ---------------------------------------------------------------------------
		align 10h

loc_6E421CD0:				; CODE XREF: sub_6E421980+202j
		mov	[esp+5Ch+Size],	0Dh ; Size
		mov	[esp+5Ch+Buf2],	offset aKeyExpansion ; "key expansion"
		mov	[esp+5Ch+Buf1],	ebx ; Buf1
		call	memcmp
		test	eax, eax
		jz	loc_6E421B90
		mov	eax, [esp+5Ch+arg_0]
		mov	esi, [eax+0C0h]
		mov	edi, [esi+10h]
		mov	[esp+5Ch+Buf1],	eax
		call	sub_6E4106A0
		mov	edx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_34], edx
		mov	[esp+5Ch+var_38], ebp
		mov	edx, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_3C], edx
		mov	[esp+5Ch+var_40], edi
		add	esi, 14h
		mov	[esp+5Ch+var_44], esi
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+Size],	0
		mov	[esp+5Ch+Buf2],	0
		mov	[esp+5Ch+Buf1],	0
		mov	esi, [esp+5Ch+var_24]
		mov	ecx, esi
		mov	edx, ebx
		call	sub_6E41F5D0
		mov	[esp+5Ch+var_24], eax
		mov	[esp+5Ch+Buf2],	esi
		mov	[esp+5Ch+Buf1],	ebx
		call	OPENSSL_cleanse
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+Buf2],	eax
		mov	[esp+5Ch+Buf1],	ebp
		call	OPENSSL_cleanse
		mov	eax, [esp+5Ch+var_24]
		jmp	loc_6E421BBE
; ---------------------------------------------------------------------------
		align 10h

loc_6E421D90:				; CODE XREF: sub_6E421980+27j
		mov	[esp+5Ch+var_4C], 4ECh
		mov	[esp+5Ch+var_50], offset aT1_enc_c ; "t1_enc.c"
		mov	[esp+5Ch+Size],	41h
		mov	[esp+5Ch+Buf2],	13Ah
		mov	[esp+5Ch+Buf1],	14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E421BD6
; ---------------------------------------------------------------------------
		align 10h

loc_6E421DD0:				; CODE XREF: sub_6E421980+123j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E421AA9
; ---------------------------------------------------------------------------
		align 10h

loc_6E421DF0:				; CODE XREF: sub_6E421980+117j
		mov	al, [ecx+0A0h]
		mov	[edi], al
		inc	edi
		lea	esi, [ecx+0A1h]
		mov	eax, 1Fh
		jmp	loc_6E421A9D
; ---------------------------------------------------------------------------
		align 10h

loc_6E421E10:				; CODE XREF: sub_6E421980+CDj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E421A53
; ---------------------------------------------------------------------------
		align 10h

loc_6E421E30:				; CODE XREF: sub_6E421980+C1j
		mov	al, [ecx+0C0h]
		mov	[edi], al
		inc	edi
		lea	esi, [ecx+0C1h]
		mov	eax, 1Fh
		jmp	loc_6E421A47
; ---------------------------------------------------------------------------
		align 10h

loc_6E421E50:				; CODE XREF: sub_6E421980+2CFj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E421C55
; ---------------------------------------------------------------------------
		align 10h

loc_6E421E70:				; CODE XREF: sub_6E421980+2C3j
		mov	al, [esi]
		mov	[ebx], al
		lea	edi, [ebx+1]
		inc	esi
		mov	eax, [esp+5Ch+arg_10]
		dec	eax
		jmp	loc_6E421C49
; ---------------------------------------------------------------------------

loc_6E421E82:				; CODE XREF: sub_6E421980+332j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E421CB8
; ---------------------------------------------------------------------------

loc_6E421E96:				; CODE XREF: sub_6E421980+326j
		mov	dl, [esi]
		mov	[edi], dl
		inc	edi
		inc	esi
		dec	eax
		jmp	loc_6E421CAC
sub_6E421980	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E421EB0	proc near		; DATA XREF: .data:6E4498F0o
					; .data:6E449930o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		cmp	eax, 73h
		ja	short loc_6E421ED0
		movsx	eax, ds:byte_6E44CC60[eax]
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E421ED0
; ---------------------------------------------------------------------------
		align 10h

loc_6E421ED0:				; CODE XREF: sub_6E421EB0+7j
					; sub_6E421EB0+11j
		mov	eax, 0FFFFFFFFh
		retn
sub_6E421EB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E421EE0	proc near		; DATA XREF: .rdata:6E44CD3Co

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0FEFFh
		jnz	short loc_6E421EF0
		mov	eax, offset dword_6E44CCE0
		retn
; ---------------------------------------------------------------------------

loc_6E421EF0:				; CODE XREF: sub_6E421EE0+8j
		xor	eax, eax
		retn
sub_6E421EE0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 273. DTLSv1_method

; =============== S U B	R O U T	I N E =======================================


		public DTLSv1_method
DTLSv1_method	proc near
		mov	eax, offset dword_6E44CCE0
		retn
DTLSv1_method	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E421F10	proc near		; DATA XREF: .rdata:6E44CDDCo

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0FEFFh
		jnz	short loc_6E421F20
		mov	eax, offset dword_6E44CD80
		retn
; ---------------------------------------------------------------------------

loc_6E421F20:				; CODE XREF: sub_6E421F10+8j
		xor	eax, eax
		retn
sub_6E421F10	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 275. DTLSv1_server_method

; =============== S U B	R O U T	I N E =======================================


		public DTLSv1_server_method
DTLSv1_server_method proc near
		mov	eax, offset dword_6E44CD80
		retn
DTLSv1_server_method endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+30h]
		cmp	dword ptr [ebx+34h], 2120h
		jz	short loc_6E421F70

loc_6E421F51:				; CODE XREF: .text:6E421FB7j
		mov	dword ptr [esp+4], 16h
		mov	[esp], ebx
		call	sub_6E42C4E0
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E421F70:				; CODE XREF: .text:6E421F4Fj
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	[esp+4], eax
		mov	[esp], ebx
		call	sub_6E42EDB0
		mov	dword ptr [ebx+34h], 2121h
		mov	dword ptr [ebx+44h], 0Ch
		mov	dword ptr [ebx+48h], 0
		jmp	short loc_6E421F51
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E421FC0	proc near		; CODE XREF: sub_6E4239E0+33Bp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		cmp	dword ptr [ebx+34h], 2130h
		jz	short loc_6E421FF0

loc_6E421FD4:				; CODE XREF: sub_6E421FC0+1C5j
		mov	[esp+4Ch+var_48], 16h
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42C4E0

loc_6E421FE4:				; CODE XREF: sub_6E421FC0+2B1j
					; sub_6E421FC0+2F9j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E421FF0:				; CODE XREF: sub_6E421FC0+12j
		mov	eax, [ebx+3Ch]
		mov	ebp, [eax+4]
		mov	[esp+4Ch+var_40], 20h
		mov	eax, [ebx+58h]
		add	eax, 0A0h
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E41A3F0
		lea	eax, [ebp+0Ch]
		mov	[esp+4Ch+var_24], eax
		mov	eax, [ebx]
		sar	eax, 8
		mov	[ebp+0Ch], al
		mov	eax, [ebx]
		mov	[ebp+0Dh], al
		mov	edx, [ebx+58h]
		lea	edi, [ebp+0Eh]
		lea	esi, [edx+0A0h]
		mov	eax, 20h
		test	edi, 1
		jnz	loc_6E422220

loc_6E42204B:				; CODE XREF: sub_6E421FC0+277j
		test	edi, 2
		jnz	loc_6E422200

loc_6E422057:				; CODE XREF: sub_6E421FC0+24Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_6E4221B0
		test	al, 1
		jnz	loc_6E4221A0

loc_6E422070:				; CODE XREF: sub_6E421FC0+1EAj
					; sub_6E421FC0+1FDj
		mov	eax, [ebx+0E4h]
		test	byte ptr [eax+20h], 2
		mov	eax, [ebx+0C0h]
		jz	loc_6E422190
		mov	eax, [eax+44h]
		cmp	eax, 20h
		ja	loc_6E422240

loc_6E422092:				; CODE XREF: sub_6E421FC0+1D9j
		lea	edi, [ebp+2Fh]
		mov	[esp+4Ch+var_28], edi
		mov	[ebp+2Eh], al
		mov	ecx, [ebx+0C0h]
		mov	edx, eax
		lea	esi, [ecx+48h]
		cmp	eax, 4
		jnb	loc_6E4221D0

loc_6E4220B0:				; CODE XREF: sub_6E421FC0+22Fj
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_6E4220C2
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E4220C2:				; CODE XREF: sub_6E421FC0+F5j
		and	edx, 1
		jz	short loc_6E4220D1
		mov	dl, [esi+ecx]
		mov	[esp+4Ch+var_1D], dl
		mov	[edi+ecx], dl

loc_6E4220D1:				; CODE XREF: sub_6E421FC0+105j
		mov	esi, [esp+4Ch+var_28]
		add	esi, eax
		mov	eax, [ebx+58h]
		mov	edx, [eax+344h]
		test	edx, edx
		jz	loc_6E4222B4
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], edx
		call	sub_6E40F920
		add	esi, eax
		mov	eax, [ebx+58h]
		mov	eax, [eax+38Ch]
		lea	edi, [esi+1]
		test	eax, eax
		jz	short loc_6E422108
		mov	al, [eax]

loc_6E422108:				; CODE XREF: sub_6E421FC0+144j
		mov	[esi], al
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E41D330
		test	eax, eax
		jle	loc_6E4222BE
		lea	eax, [ebp+4000h]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E41C0E0
		mov	esi, eax
		test	eax, eax
		jz	loc_6E4222F4
		sub	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_38], eax
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 2
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42EDB0
		mov	dword ptr [ebx+34h], 2131h
		sub	esi, ebp
		mov	[ebx+44h], esi
		mov	dword ptr [ebx+48h], 0
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42DF60
		jmp	loc_6E421FD4
; ---------------------------------------------------------------------------
		align 10h

loc_6E422190:				; CODE XREF: sub_6E421FC0+C0j
		mov	dword ptr [eax+44h], 0
		xor	eax, eax
		jmp	loc_6E422092
; ---------------------------------------------------------------------------
		align 10h

loc_6E4221A0:				; CODE XREF: sub_6E421FC0+AAj
					; sub_6E421FC0+203j
		mov	al, [esi+edx]
		mov	byte ptr [esp+4Ch+var_28], al
		mov	[edi+edx], al
		jmp	loc_6E422070
; ---------------------------------------------------------------------------
		align 10h

loc_6E4221B0:				; CODE XREF: sub_6E421FC0+A2j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E422070
		jmp	short loc_6E4221A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4221D0:				; CODE XREF: sub_6E421FC0+EAj
		test	edi, 1
		jnz	loc_6E4222A0

loc_6E4221DC:				; CODE XREF: sub_6E421FC0+2EFj
		test	edi, 2
		jnz	loc_6E422280

loc_6E4221E8:				; CODE XREF: sub_6E421FC0+2CFj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E4220B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E422200:				; CODE XREF: sub_6E421FC0+91j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E422057
; ---------------------------------------------------------------------------
		align 10h

loc_6E422220:				; CODE XREF: sub_6E421FC0+85j
		mov	al, [edx+0A0h]
		mov	[ebp+0Eh], al
		lea	edi, [ebp+0Fh]
		lea	esi, [edx+0A1h]
		mov	eax, 1Fh
		jmp	loc_6E42204B
; ---------------------------------------------------------------------------
		align 10h

loc_6E422240:				; CODE XREF: sub_6E421FC0+CCj
		mov	[esp+4Ch+var_3C], 3F3h

loc_6E422248:				; CODE XREF: sub_6E421FC0+33Cj
		mov	[esp+4Ch+var_40], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+4Ch+var_44], 44h
		mov	[esp+4Ch+var_48], 10Ah
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E421FE4
; ---------------------------------------------------------------------------
		align 10h

loc_6E422280:				; CODE XREF: sub_6E421FC0+222j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E4221E8
; ---------------------------------------------------------------------------
		align 10h

loc_6E4222A0:				; CODE XREF: sub_6E421FC0+216j
		mov	dl, [ecx+48h]
		mov	[ebp+2Fh], dl
		lea	edi, [ebp+30h]
		lea	esi, [ecx+49h]
		lea	edx, [eax-1]
		jmp	loc_6E4221DC
; ---------------------------------------------------------------------------

loc_6E4222B4:				; CODE XREF: sub_6E421FC0+122j
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E421FE4
; ---------------------------------------------------------------------------

loc_6E4222BE:				; CODE XREF: sub_6E421FC0+154j
		mov	[esp+4Ch+var_3C], 40Ch
		mov	[esp+4Ch+var_40], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+4Ch+var_44], 113h
		mov	[esp+4Ch+var_48], 10Ah
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E421FE4
; ---------------------------------------------------------------------------

loc_6E4222F4:				; CODE XREF: sub_6E421FC0+174j
		mov	[esp+4Ch+var_3C], 413h
		jmp	loc_6E422248
sub_6E421FC0	endp

; ---------------------------------------------------------------------------
		jmp	short loc_6E422310
; ---------------------------------------------------------------------------
		align 10h

loc_6E422310:				; CODE XREF: .text:6E422301j
		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+30h]
		cmp	dword ptr [ebx+34h], 2170h
		jz	short loc_6E422340

loc_6E422321:				; CODE XREF: .text:6E422397j
		mov	dword ptr [esp+4], 16h
		mov	[esp], ebx
		call	sub_6E42C4E0
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E422340:				; CODE XREF: .text:6E42231Fj
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0Eh
		mov	[esp+4], eax
		mov	[esp], ebx
		call	sub_6E42EDB0
		mov	dword ptr [ebx+34h], 2171h
		mov	dword ptr [ebx+44h], 0Ch
		mov	dword ptr [ebx+48h], 0
		mov	dword ptr [esp+4], 0
		mov	[esp], ebx
		call	sub_6E42DF60
		jmp	short loc_6E422321
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4223A0	proc near		; CODE XREF: sub_6E4239E0+841p

Str		= dword	ptr -0CCh
Source		= dword	ptr -0C8h
Count		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8D		= byte ptr -8Dh
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_58		= byte ptr -58h
var_40		= byte ptr -40h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	ebp, [esp+0CCh+arg_0]
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_MD_CTX_init
		cmp	dword ptr [ebp+34h], 2150h
		jnz	loc_6E422699
		mov	esi, [ebp+58h]
		mov	ecx, esi
		mov	edx, [esi+344h]
		mov	eax, [edx+0Ch]
		mov	[esp+0CCh+var_B0], eax
		mov	edi, [ebp+98h]
		mov	ebx, [ebp+3Ch]
		mov	[esp+0CCh+var_A0], ebx
		mov	[esp+0CCh+var_6C], 0
		mov	[esp+0CCh+var_70], 0
		mov	[esp+0CCh+var_74], 0
		mov	[esp+0CCh+var_78], 0
		test	al, 1
		jz	loc_6E4226D0
		mov	ebx, [edi+18h]
		test	ebx, ebx
		jz	loc_6E422CF0

loc_6E42241C:				; CODE XREF: sub_6E4223A0+99Aj
		mov	edi, [ebx+10h]
		mov	[esp+0CCh+var_78], edi
		mov	eax, [ebx+14h]
		mov	[esp+0CCh+var_74], eax
		mov	dword ptr [esi+370h], 1

loc_6E422434:				; CODE XREF: sub_6E4223A0+3ABj
		mov	[esp+0CCh+var_7C], 0
		test	edi, edi
		jz	loc_6E423164
		mov	eax, edi
		xor	esi, esi
		xor	ebx, ebx
		jmp	short loc_6E422470
; ---------------------------------------------------------------------------
		align 10h

loc_6E422450:				; CODE XREF: sub_6E4223A0+DDj
					; sub_6E4223A0+E2j
		sar	edx, 3
		mov	[esp+esi*4+0CCh+var_68], edx
		mov	esi, [esp+0CCh+var_7C]
		mov	eax, [esp+esi*4+0CCh+var_68]
		lea	ebx, [ebx+eax+2]
		inc	esi
		mov	[esp+0CCh+var_7C], esi
		mov	eax, [esp+esi*4+0CCh+var_78]
		test	eax, eax
		jz	short loc_6E422490

loc_6E422470:				; CODE XREF: sub_6E4223A0+AAj
		mov	[esp+0CCh+Str],	eax
		call	BN_num_bits
		mov	edx, eax
		add	edx, 7
		jns	short loc_6E422450
		lea	edx, [eax+0Eh]
		jmp	short loc_6E422450
; ---------------------------------------------------------------------------
		align 10h

loc_6E422490:				; CODE XREF: sub_6E4223A0+CEj
		mov	[esp+0CCh+var_94], 0
		mov	[esp+0CCh+var_98], 0
		mov	[esp+0CCh+var_A4], 0
		mov	esi, [ebp+58h]

loc_6E4224AB:				; CODE XREF: sub_6E4223A0+827j
					; sub_6E4223A0+DE1j
		mov	eax, [esi+344h]
		test	byte ptr [eax+10h], 4
		jnz	short loc_6E4224C1
		test	byte ptr [eax+0Dh], 1
		jz	loc_6E422B50

loc_6E4224C1:				; CODE XREF: sub_6E4223A0+115j
		xor	eax, eax
		mov	[esp+0CCh+var_AC], 0

loc_6E4224CB:				; CODE XREF: sub_6E4223A0+7D8j
		lea	ecx, [ebx+0Ch]
		mov	[esp+0CCh+var_A8], ecx
		add	eax, ecx
		mov	[esp+0CCh+Source], eax
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+Str],	eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		jz	loc_6E422EAB
		mov	eax, [ebp+3Ch]
		mov	eax, [eax+4]
		mov	[esp+0CCh+var_9C], eax
		add	eax, 0Ch
		mov	[esp+0CCh+var_A0], eax
		mov	[esp+0CCh+var_7C], 0
		test	edi, edi
		mov	edi, eax
		jz	short loc_6E422550
		xor	eax, eax
		lea	esi, [esi+0]

loc_6E422510:				; CODE XREF: sub_6E4223A0+1AEj
		mov	eax, [esp+eax*4+0CCh+var_68]
		sar	eax, 8
		mov	[edi], al
		mov	eax, [esp+0CCh+var_7C]
		mov	eax, [esp+eax*4+0CCh+var_68]
		mov	[edi+1], al
		add	edi, 2
		mov	[esp+0CCh+Source], edi
		mov	eax, [esp+0CCh+var_7C]
		mov	eax, [esp+eax*4+0CCh+var_78]
		mov	[esp+0CCh+Str],	eax
		call	BN_bn2bin
		mov	eax, [esp+0CCh+var_7C]
		add	edi, [esp+eax*4+0CCh+var_68]
		inc	eax
		mov	[esp+0CCh+var_7C], eax
		mov	edx, [esp+eax*4+0CCh+var_78]
		test	edx, edx
		jnz	short loc_6E422510

loc_6E422550:				; CODE XREF: sub_6E4223A0+169j
		test	byte ptr [esp+0CCh+var_B0], 80h
		jnz	loc_6E4229A0

loc_6E42255B:				; CODE XREF: sub_6E4223A0+668j
		test	[esp+0CCh+var_B0], 100h
		jnz	loc_6E422920

loc_6E422569:				; CODE XREF: sub_6E4223A0+5EEj
		mov	eax, [esp+0CCh+var_AC]
		test	eax, eax
		jz	loc_6E422653
		mov	eax, [eax]
		cmp	eax, 6
		jz	loc_6E422A10
		cmp	eax, 74h
		jz	loc_6E422BF0
		cmp	eax, 198h
		jnz	loc_6E422D3F
		call	EVP_ecdsa
		mov	[esp+0CCh+Count], 0
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestInit_ex
		mov	[esp+0CCh+Count], 20h
		mov	eax, [ebp+58h]
		add	eax, 0C0h
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		mov	[esp+0CCh+Count], 20h
		mov	eax, [ebp+58h]
		add	eax, 0A0h
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		mov	[esp+0CCh+Count], ebx
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		mov	eax, [esp+0CCh+var_AC]
		mov	[esp+0CCh+var_C0], eax
		lea	eax, [esp+0CCh+var_7C]
		mov	[esp+0CCh+Count], eax
		lea	eax, [edi+2]
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_SignFinal
		test	eax, eax
		jz	loc_6E422F63

loc_6E422634:				; CODE XREF: sub_6E4223A0+8EAj
		mov	eax, [esp+0CCh+var_7C]
		sar	eax, 8
		mov	[edi], al
		mov	eax, [esp+0CCh+var_7C]
		mov	[edi+1], al
		mov	eax, [esp+0CCh+var_7C]
		lea	ebx, [ebx+eax+2]
		lea	eax, [ebx+0Ch]
		mov	[esp+0CCh+var_A8], eax

loc_6E422653:				; CODE XREF: sub_6E4223A0+1CFj
					; sub_6E4223A0+7A6j
		mov	[esp+0CCh+var_B8], ebx
		mov	[esp+0CCh+var_BC], 0
		mov	[esp+0CCh+var_C0], ebx
		mov	[esp+0CCh+Count], 0Ch
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+Source], eax
		mov	[esp+0CCh+Str],	ebp
		call	sub_6E42EDB0
		mov	eax, [esp+0CCh+var_A8]
		mov	[ebp+44h], eax
		mov	dword ptr [ebp+48h], 0
		mov	[esp+0CCh+Source], 0
		mov	[esp+0CCh+Str],	ebp
		call	sub_6E42DF60

loc_6E422699:				; CODE XREF: sub_6E4223A0+24j
		mov	dword ptr [ebp+34h], 2151h
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_MD_CTX_cleanup
		mov	[esp+0CCh+Source], 16h
		mov	[esp+0CCh+Str],	ebp
		call	sub_6E42C4E0

loc_6E4226BC:				; CODE XREF: sub_6E4223A0+94Bj
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4226D0:				; CODE XREF: sub_6E4223A0+6Bj
		test	byte ptr [esp+0CCh+var_B0], 8
		jz	short loc_6E422750
		mov	ebx, [edi+20h]
		test	ebx, ebx
		jz	loc_6E422E25

loc_6E4226E2:				; CODE XREF: sub_6E4223A0+AC4j
		mov	eax, [ecx+348h]
		test	eax, eax
		jnz	loc_6E422D8B
		mov	[esp+0CCh+Str],	ebx
		call	DHparams_dup
		mov	esi, eax
		test	eax, eax
		jz	loc_6E4230CC
		mov	eax, [ebp+58h]
		mov	[eax+348h], esi
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_6E422726
		mov	edi, [ebx+18h]
		test	edi, edi
		jz	short loc_6E422726
		test	byte ptr [ebp+102h], 10h
		jz	loc_6E422DCA

loc_6E422726:				; CODE XREF: sub_6E4223A0+370j
					; sub_6E4223A0+377j
		mov	[esp+0CCh+Str],	esi
		call	DH_generate_key
		test	eax, eax
		jz	loc_6E423071
		mov	edx, [esi+14h]

loc_6E422739:				; CODE XREF: sub_6E4223A0+A4Cj
		mov	edi, [esi+8]
		mov	[esp+0CCh+var_78], edi
		mov	eax, [esi+0Ch]
		mov	[esp+0CCh+var_74], eax
		mov	[esp+0CCh+var_70], edx
		jmp	loc_6E422434
; ---------------------------------------------------------------------------

loc_6E422750:				; CODE XREF: sub_6E4223A0+335j
		test	byte ptr [esp+0CCh+var_B0], 80h
		jz	loc_6E422B80
		mov	eax, [edi+28h]
		test	eax, eax
		jz	loc_6E422E69

loc_6E422766:				; CODE XREF: sub_6E4223A0+B06j
		mov	edx, [ecx+34Ch]
		test	edx, edx
		jnz	loc_6E422EDE
		mov	[esp+0CCh+Str],	eax
		call	EC_KEY_dup
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E4230D9
		mov	eax, [ebp+58h]
		mov	[eax+34Ch], ebx
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_public_key
		test	eax, eax
		jz	short loc_6E4227B0
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_private_key
		test	eax, eax
		jz	short loc_6E4227B0
		test	byte ptr [ebp+102h], 8
		jz	short loc_6E4227C0

loc_6E4227B0:				; CODE XREF: sub_6E4223A0+3F9j
					; sub_6E4223A0+405j
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_generate_key
		test	eax, eax
		jz	loc_6E423119

loc_6E4227C0:				; CODE XREF: sub_6E4223A0+40Ej
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_group
		mov	esi, eax
		test	eax, eax
		jz	loc_6E422FB3
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_public_key
		test	eax, eax
		jz	loc_6E422FB3
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_private_key
		test	eax, eax
		jz	loc_6E422FB3
		mov	eax, [ebp+58h]
		mov	eax, [eax+344h]
		test	byte ptr [eax+20h], 2
		jz	short loc_6E422814
		mov	[esp+0CCh+Str],	esi
		call	EC_GROUP_get_degree
		cmp	eax, 0A3h
		jg	loc_6E423126

loc_6E422814:				; CODE XREF: sub_6E4223A0+45Fj
		mov	[esp+0CCh+Str],	esi
		call	EC_GROUP_get_curve_name
		mov	[esp+0CCh+Str],	eax
		call	sub_6E41AEF0
		mov	[esp+0CCh+var_94], eax
		test	eax, eax
		jz	loc_6E423017
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_public_key
		mov	[esp+0CCh+var_B8], 0
		mov	[esp+0CCh+var_BC], 0
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+Count], 4
		mov	[esp+0CCh+Source], eax
		mov	[esp+0CCh+Str],	esi
		call	EC_POINT_point2oct
		mov	[esp+0CCh+var_AC], eax
		mov	[esp+0CCh+Count], 50Dh
		mov	[esp+0CCh+Source], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Str],	eax
		call	CRYPTO_malloc
		mov	[esp+0CCh+var_A4], eax
		call	BN_CTX_new
		mov	edi, eax
		mov	ecx, [esp+0CCh+var_A4]
		test	ecx, ecx
		jz	loc_6E42309B
		test	eax, eax
		jz	loc_6E42309B
		mov	[esp+0CCh+Str],	ebx
		call	EC_KEY_get0_public_key
		mov	[esp+0CCh+var_B8], edi
		mov	ecx, [esp+0CCh+var_AC]
		mov	[esp+0CCh+var_BC], ecx
		mov	ecx, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_C0], ecx
		mov	[esp+0CCh+Count], 4
		mov	[esp+0CCh+Source], eax
		mov	[esp+0CCh+Str],	esi
		call	EC_POINT_point2oct
		mov	[esp+0CCh+var_98], eax
		test	eax, eax
		jz	loc_6E422FE6
		mov	[esp+0CCh+Str],	edi
		call	BN_CTX_free
		mov	eax, [esp+0CCh+var_98]
		lea	ebx, [eax+4]
		mov	[esp+0CCh+var_78], 0
		mov	[esp+0CCh+var_74], 0
		mov	[esp+0CCh+var_70], 0
		mov	[esp+0CCh+var_6C], 0
		mov	esi, [ebp+58h]
		jmp	loc_6E422BBD
; ---------------------------------------------------------------------------
		align 10h

loc_6E422920:				; CODE XREF: sub_6E4223A0+1C3j
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+0CCh+Str],	eax ; Str
		call	strlen
		shr	eax, 8
		mov	[edi], al
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+0CCh+Str],	eax ; Str
		call	strlen
		mov	[edi+1], al
		lea	esi, [edi+2]
		mov	eax, [ebp+0E4h]
		mov	edi, [eax+14Ch]
		mov	[esp+0CCh+Str],	edi ; Str
		call	strlen
		mov	[esp+0CCh+Count], eax ;	Count
		mov	[esp+0CCh+Source], edi ; Source
		mov	[esp+0CCh+Str],	esi ; Dest
		call	strncpy
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+0CCh+Str],	eax ; Str
		call	strlen
		lea	edi, [esi+eax]
		jmp	loc_6E422569
; ---------------------------------------------------------------------------
		align 10h

loc_6E4229A0:				; CODE XREF: sub_6E4223A0+1B5j
		mov	byte ptr [edi],	3
		mov	byte ptr [edi+1], 0
		mov	al, byte ptr [esp+0CCh+var_94]
		mov	[edi+2], al
		mov	ecx, [esp+0CCh+var_98]
		mov	[edi+3], cl
		lea	eax, [edi+4]
		mov	[esp+0CCh+var_94], eax
		mov	edx, ecx
		mov	esi, [esp+0CCh+var_A4]
		cmp	ecx, 4
		jnb	loc_6E422BD0

loc_6E4229CB:				; CODE XREF: sub_6E4223A0+84Bj
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_6E4229DD
		mov	cx, [esi]
		mov	[eax], cx
		mov	ecx, 2

loc_6E4229DD:				; CODE XREF: sub_6E4223A0+630j
		and	edx, 1
		jz	short loc_6E4229EC
		mov	dl, [esi+ecx]
		mov	[esp+0CCh+var_8D], dl
		mov	[eax+ecx], dl

loc_6E4229EC:				; CODE XREF: sub_6E4223A0+640j
		mov	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+Str],	eax
		call	CRYPTO_free
		mov	edi, [esp+0CCh+var_94]
		add	edi, [esp+0CCh+var_98]
		mov	[esp+0CCh+var_A4], 0
		jmp	loc_6E42255B
; ---------------------------------------------------------------------------
		align 10h

loc_6E422A10:				; CODE XREF: sub_6E4223A0+1DAj
		mov	ecx, 2
		xor	edx, edx
		lea	esi, [esp+0CCh+var_40]
		mov	[esp+0CCh+var_B0], ebx
		mov	ebx, esi
		mov	[esp+0CCh+var_A8], edi
		mov	esi, ecx
		mov	edi, ebp
		mov	ebp, edx

loc_6E422A2E:				; CODE XREF: sub_6E4223A0+738j
		mov	eax, [edi+0E4h]
		cmp	esi, 2
		jz	loc_6E423159
		mov	eax, [eax+90h]

loc_6E422A43:				; CODE XREF: sub_6E4223A0+DBFj
		mov	[esp+0CCh+Count], 0
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestInit_ex
		mov	[esp+0CCh+Count], 20h
		mov	eax, [edi+58h]
		add	eax, 0C0h
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		mov	[esp+0CCh+Count], 20h
		mov	eax, [edi+58h]
		add	eax, 0A0h
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		mov	eax, [esp+0CCh+var_B0]
		mov	[esp+0CCh+Count], eax
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		lea	eax, [esp+0CCh+var_7C]
		mov	[esp+0CCh+Count], eax
		mov	[esp+0CCh+Source], ebx
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestFinal_ex
		mov	eax, [esp+0CCh+var_7C]
		add	ebx, eax
		add	ebp, eax
		dec	esi
		jnz	loc_6E422A2E
		mov	ebx, [esp+0CCh+var_B0]
		mov	edx, ebp
		mov	ebp, edi
		mov	edi, [esp+0CCh+var_A8]
		mov	eax, [esp+0CCh+var_AC]
		mov	eax, [eax+14h]
		mov	[esp+0CCh+var_B8], eax
		lea	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_BC], eax
		lea	eax, [edi+2]
		mov	[esp+0CCh+var_C0], eax
		mov	[esp+0CCh+Count], edx
		lea	eax, [esp+0CCh+var_40]
		mov	[esp+0CCh+Source], eax
		mov	[esp+0CCh+Str],	72h
		call	RSA_sign
		test	eax, eax
		jle	loc_6E4230E6
		mov	eax, [esp+0CCh+var_80]
		shr	eax, 8
		mov	[edi], al
		mov	eax, [esp+0CCh+var_80]
		mov	[edi+1], al
		mov	eax, [esp+0CCh+var_80]
		lea	ebx, [ebx+eax+2]
		lea	eax, [ebx+0Ch]
		mov	[esp+0CCh+var_A8], eax
		jmp	loc_6E422653
; ---------------------------------------------------------------------------
		align 10h

loc_6E422B50:				; CODE XREF: sub_6E4223A0+11Bj
		mov	[esp+0CCh+Count], 0
		mov	[esp+0CCh+Source], eax
		mov	[esp+0CCh+Str],	ebp
		call	sub_6E434FE0
		mov	[esp+0CCh+var_AC], eax
		test	eax, eax
		jz	loc_6E423067
		mov	[esp+0CCh+Str],	eax
		call	EVP_PKEY_size
		jmp	loc_6E4224CB
; ---------------------------------------------------------------------------
		align 10h

loc_6E422B80:				; CODE XREF: sub_6E4223A0+3B5j
		test	[esp+0CCh+var_B0], 100h
		jz	loc_6E42307E
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+0CCh+Str],	eax ; Str
		call	strlen
		lea	ebx, [eax+2]
		mov	[esp+0CCh+var_94], 0
		mov	[esp+0CCh+var_98], 0
		mov	[esp+0CCh+var_A4], 0

loc_6E422BBD:				; CODE XREF: sub_6E4223A0+56Dj
		mov	[esp+0CCh+var_7C], 0
		xor	edi, edi
		jmp	loc_6E4224AB
; ---------------------------------------------------------------------------
		align 10h

loc_6E422BD0:				; CODE XREF: sub_6E4223A0+625j
		test	al, 1
		jnz	loc_6E422F45

loc_6E422BD8:				; CODE XREF: sub_6E4223A0+BBEj
		test	al, 2
		jnz	loc_6E422F31

loc_6E422BE0:				; CODE XREF: sub_6E4223A0+BA0j
		mov	ecx, edx
		shr	ecx, 2
		mov	edi, eax
		rep movsd
		mov	eax, edi
		jmp	loc_6E4229CB
; ---------------------------------------------------------------------------

loc_6E422BF0:				; CODE XREF: sub_6E4223A0+1E3j
		call	EVP_dss1
		mov	[esp+0CCh+Count], 0
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestInit_ex
		mov	[esp+0CCh+Count], 20h
		mov	eax, [ebp+58h]
		add	eax, 0C0h
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		mov	[esp+0CCh+Count], 20h
		mov	eax, [ebp+58h]
		add	eax, 0A0h
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		mov	[esp+0CCh+Count], ebx
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_DigestUpdate
		mov	eax, [esp+0CCh+var_AC]
		mov	[esp+0CCh+var_C0], eax
		lea	eax, [esp+0CCh+var_7C]
		mov	[esp+0CCh+Count], eax
		lea	eax, [edi+2]
		mov	[esp+0CCh+Source], eax
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_SignFinal
		test	eax, eax
		jnz	loc_6E422634
		mov	[esp+0CCh+var_BC], 5AFh
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 0Ah
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi

loc_6E422CBE:				; CODE XREF: sub_6E4223A0+9E6j
					; sub_6E4223A0+B39j ...
		mov	eax, [esp+0CCh+var_A4]
		test	eax, eax
		jz	short loc_6E422CD2

loc_6E422CC6:				; CODE XREF: sub_6E4223A0+C72j
		mov	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+Str],	eax
		call	CRYPTO_free

loc_6E422CD2:				; CODE XREF: sub_6E4223A0+924j
					; sub_6E4223A0+A25j ...
		mov	[esp+0CCh+Str],	edi
		call	BN_CTX_free
		lea	eax, [esp+0CCh+var_58]
		mov	[esp+0CCh+Str],	eax
		call	EVP_MD_CTX_cleanup
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4226BC
; ---------------------------------------------------------------------------

loc_6E422CF0:				; CODE XREF: sub_6E4223A0+76j
		mov	ecx, [edi+1Ch]
		test	ecx, ecx
		jz	loc_6E422EF3
		mov	edx, [edx+20h]
		mov	eax, edx
		and	eax, 8
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 200h
		add	eax, 200h
		mov	[esp+0CCh+Count], eax
		and	edx, 2
		mov	[esp+0CCh+Source], edx
		mov	[esp+0CCh+Str],	ebp
		call	ecx
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E423186
		mov	[esp+0CCh+Str],	eax
		call	RSA_up_ref
		mov	[edi+18h], ebx
		mov	esi, [ebp+58h]
		jmp	loc_6E42241C
; ---------------------------------------------------------------------------

loc_6E422D3F:				; CODE XREF: sub_6E4223A0+1EEj
		mov	[esp+0CCh+var_BC], 5CDh
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 0FBh
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		mov	eax, 28h

loc_6E422D70:				; CODE XREF: sub_6E4223A0+B8Cj
					; sub_6E4223A0+CCCj
		mov	[esp+0CCh+Count], eax
		mov	[esp+0CCh+Source], 2
		mov	[esp+0CCh+Str],	ebp
		call	sub_6E4151B0
		xor	edi, edi
		jmp	loc_6E422CBE
; ---------------------------------------------------------------------------

loc_6E422D8B:				; CODE XREF: sub_6E4223A0+34Aj
		mov	[esp+0CCh+Str],	0
		call	DH_free
		mov	[esp+0CCh+var_BC], 499h

loc_6E422D9F:				; CODE XREF: sub_6E4223A0+B4Ej
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 44h
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E422CD2
; ---------------------------------------------------------------------------

loc_6E422DCA:				; CODE XREF: sub_6E4223A0+380j
		mov	[esp+0CCh+Str],	eax
		call	BN_dup
		mov	[esi+14h], eax
		mov	eax, [ebx+18h]
		mov	[esp+0CCh+Str],	eax
		call	BN_dup
		mov	[esi+18h], eax
		mov	edx, [esi+14h]
		test	edx, edx
		jz	short loc_6E422DF2
		test	eax, eax
		jnz	loc_6E422739

loc_6E422DF2:				; CODE XREF: sub_6E4223A0+A48j
		mov	[esp+0CCh+var_BC], 4B0h

loc_6E422DFA:				; CODE XREF: sub_6E4223A0+CD9j
					; sub_6E4223A0+D34j
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 5
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E422CD2
; ---------------------------------------------------------------------------

loc_6E422E25:				; CODE XREF: sub_6E4223A0+33Cj
		mov	ecx, [edi+24h]
		test	ecx, ecx
		jz	loc_6E422F96
		mov	edx, [edx+20h]
		mov	eax, edx
		and	eax, 8
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 200h
		add	eax, 200h
		mov	[esp+0CCh+Count], eax
		and	edx, 2
		mov	[esp+0CCh+Source], edx
		mov	[esp+0CCh+Str],	ebp
		call	ecx
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E422F96
		mov	ecx, [ebp+58h]
		jmp	loc_6E4226E2
; ---------------------------------------------------------------------------

loc_6E422E69:				; CODE XREF: sub_6E4223A0+3C0j
		mov	ecx, [edi+2Ch]
		test	ecx, ecx
		jz	loc_6E42304A
		mov	edx, [edx+20h]
		mov	eax, edx
		and	eax, 8
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 200h
		add	eax, 200h
		mov	[esp+0CCh+Count], eax
		and	edx, 2
		mov	[esp+0CCh+Source], edx
		mov	[esp+0CCh+Str],	ebp
		call	ecx
		test	eax, eax
		jz	loc_6E42304A
		mov	ecx, [ebp+58h]
		jmp	loc_6E422766
; ---------------------------------------------------------------------------

loc_6E422EAB:				; CODE XREF: sub_6E4223A0+146j
		mov	[esp+0CCh+var_BC], 555h
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 7
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E422CBE
; ---------------------------------------------------------------------------

loc_6E422EDE:				; CODE XREF: sub_6E4223A0+3CEj
		mov	[esp+0CCh+Str],	edx
		call	EC_KEY_free
		mov	[esp+0CCh+var_BC], 4CFh
		jmp	loc_6E422D9F
; ---------------------------------------------------------------------------

loc_6E422EF3:				; CODE XREF: sub_6E4223A0+955j
		mov	[esp+0CCh+var_BC], 47Eh
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 0ACh

loc_6E422F0B:				; CODE XREF: sub_6E4223A0+C0Ej
					; sub_6E4223A0+CC2j ...
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		mov	eax, 28h
		mov	[esp+0CCh+var_A4], 0
		jmp	loc_6E422D70
; ---------------------------------------------------------------------------

loc_6E422F31:				; CODE XREF: sub_6E4223A0+83Aj
		mov	cx, [esi]
		mov	[eax], cx
		add	eax, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E422BE0
; ---------------------------------------------------------------------------

loc_6E422F45:				; CODE XREF: sub_6E4223A0+832j
		mov	al, [esi]
		mov	[esp+0CCh+var_8D], al
		mov	edx, [esp+0CCh+var_94]
		mov	[edx], al
		lea	eax, [edi+5]
		lea	esi, [esi+1]
		mov	ecx, [esp+0CCh+var_98]
		lea	edx, [ecx-1]
		jmp	loc_6E422BD8
; ---------------------------------------------------------------------------

loc_6E422F63:				; CODE XREF: sub_6E4223A0+28Ej
		mov	[esp+0CCh+var_BC], 5C2h
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 2Ah
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E422CBE
; ---------------------------------------------------------------------------

loc_6E422F96:				; CODE XREF: sub_6E4223A0+A8Aj
					; sub_6E4223A0+ABBj
		mov	[esp+0CCh+var_BC], 492h
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 0ABh
		jmp	loc_6E422F0B
; ---------------------------------------------------------------------------

loc_6E422FB3:				; CODE XREF: sub_6E4223A0+42Cj
					; sub_6E4223A0+43Cj ...
		mov	[esp+0CCh+var_BC], 4EBh

loc_6E422FBB:				; CODE XREF: sub_6E4223A0+D41j
					; sub_6E4223A0+D81j
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 2Bh
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E422CD2
; ---------------------------------------------------------------------------

loc_6E422FE6:				; CODE XREF: sub_6E4223A0+535j
		mov	[esp+0CCh+var_BC], 51Bh
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 2Bh
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		jmp	loc_6E422CC6
; ---------------------------------------------------------------------------

loc_6E423017:				; CODE XREF: sub_6E4223A0+48Aj
		mov	[esp+0CCh+var_BC], 4FFh
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 13Bh
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E422CD2
; ---------------------------------------------------------------------------

loc_6E42304A:				; CODE XREF: sub_6E4223A0+ACEj
					; sub_6E4223A0+AFDj
		mov	[esp+0CCh+var_BC], 4C8h
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 137h
		jmp	loc_6E422F0B
; ---------------------------------------------------------------------------

loc_6E423067:				; CODE XREF: sub_6E4223A0+7CAj
		mov	eax, 32h
		jmp	loc_6E422D70
; ---------------------------------------------------------------------------

loc_6E423071:				; CODE XREF: sub_6E4223A0+390j
		mov	[esp+0CCh+var_BC], 4A8h
		jmp	loc_6E422DFA
; ---------------------------------------------------------------------------

loc_6E42307E:				; CODE XREF: sub_6E4223A0+7E8j
		mov	[esp+0CCh+var_BC], 53Fh
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 0FAh
		jmp	loc_6E422F0B
; ---------------------------------------------------------------------------

loc_6E42309B:				; CODE XREF: sub_6E4223A0+4F1j
					; sub_6E4223A0+4F9j
		mov	[esp+0CCh+var_BC], 511h
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 41h
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		jmp	loc_6E422CBE
; ---------------------------------------------------------------------------

loc_6E4230CC:				; CODE XREF: sub_6E4223A0+35Cj
		mov	[esp+0CCh+var_BC], 49Eh
		jmp	loc_6E422DFA
; ---------------------------------------------------------------------------

loc_6E4230D9:				; CODE XREF: sub_6E4223A0+3E0j
		mov	[esp+0CCh+var_BC], 4D9h
		jmp	loc_6E422FBB
; ---------------------------------------------------------------------------

loc_6E4230E6:				; CODE XREF: sub_6E4223A0+781j
		mov	[esp+0CCh+var_BC], 59Dh
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 4
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E422CBE
; ---------------------------------------------------------------------------

loc_6E423119:				; CODE XREF: sub_6E4223A0+41Aj
		mov	[esp+0CCh+var_BC], 4E3h
		jmp	loc_6E422FBB
; ---------------------------------------------------------------------------

loc_6E423126:				; CODE XREF: sub_6E4223A0+46Ej
		mov	[esp+0CCh+var_BC], 4F2h
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 136h
		mov	[esp+0CCh+Source], 10Bh
		mov	[esp+0CCh+Str],	14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E422CD2
; ---------------------------------------------------------------------------

loc_6E423159:				; CODE XREF: sub_6E4223A0+697j
		mov	eax, [eax+8Ch]
		jmp	loc_6E422A43
; ---------------------------------------------------------------------------

loc_6E423164:				; CODE XREF: sub_6E4223A0+9Ej
		mov	[esp+0CCh+var_94], 0
		mov	[esp+0CCh+var_98], 0
		mov	[esp+0CCh+var_A4], 0
		xor	ebx, ebx
		mov	esi, [ebp+58h]
		jmp	loc_6E4224AB
; ---------------------------------------------------------------------------

loc_6E423186:				; CODE XREF: sub_6E4223A0+986j
		mov	[esp+0CCh+var_BC], 475h
		mov	[esp+0CCh+var_C0], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+0CCh+Count], 11Ah
		jmp	loc_6E422F0B
sub_6E4223A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4231B0	proc near		; CODE XREF: sub_6E4239E0+524p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, [esp+5Ch+arg_0]
		cmp	dword ptr [eax+34h], 2160h
		jz	short loc_6E4231E0

loc_6E4231C4:				; CODE XREF: sub_6E4231B0+214j
		mov	[esp+5Ch+var_58], 16h
		mov	[esp+5Ch+var_5C], eax
		call	sub_6E42C4E0
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4231E0:				; CODE XREF: sub_6E4231B0+12j
		mov	ebp, [eax+3Ch]
		mov	ebx, [ebp+4]
		lea	eax, [ebx+0Dh]
		mov	[esp+5Ch+var_20], eax
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_5C], eax
		call	sub_6E410000
		mov	edi, eax
		mov	[esp+5Ch+var_30], eax
		mov	[ebx+0Ch], al
		mov	eax, [esp+5Ch+var_20]
		add	eax, edi
		add	eax, 2
		mov	[esp+5Ch+var_20], eax
		lea	edi, [edi+3]
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_5C], eax
		call	SSL_get_client_CA_list
		mov	[esp+5Ch+var_40], eax
		test	eax, eax
		jz	loc_6E423449
		mov	[esp+5Ch+var_34], 0
		xor	esi, esi
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+var_5C], eax
		call	sk_num
		cmp	esi, eax
		jge	loc_6E4232F6
		lea	esi, [esi+0]

loc_6E423250:				; CODE XREF: sub_6E4231B0+140j
		mov	[esp+5Ch+var_58], esi
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+var_5C], eax
		call	sk_value
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], eax
		mov	[esp+5Ch+var_38], eax
		call	i2d_X509_NAME
		mov	ebx, eax
		lea	edx, [edi+0Ch]
		lea	eax, [eax+edx+2]
		mov	[esp+5Ch+var_3C], edx
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebp
		call	BUF_MEM_grow_clean
		test	eax, eax
		mov	edx, [esp+5Ch+var_3C]
		mov	ecx, [esp+5Ch+var_38]
		jz	loc_6E423410
		add	edx, [ebp+4]
		mov	[esp+5Ch+var_20], edx
		mov	eax, [esp+5Ch+arg_0]
		test	byte ptr [eax+103h], 20h
		jnz	loc_6E4233D0
		mov	eax, ebx
		sar	eax, 8
		mov	[edx], al
		mov	eax, [esp+5Ch+var_20]
		mov	[eax+1], bl
		add	[esp+5Ch+var_20], 2
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ecx
		call	i2d_X509_NAME
		add	ebx, 2
		add	edi, ebx
		add	[esp+5Ch+var_34], ebx
		inc	esi

loc_6E4232E2:				; CODE XREF: sub_6E4231B0+24Cj
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+var_5C], eax
		call	sk_num
		cmp	esi, eax
		jl	loc_6E423250

loc_6E4232F6:				; CODE XREF: sub_6E4231B0+96j
		mov	esi, [esp+5Ch+var_34]
		mov	eax, esi
		shr	eax, 8
		mov	ecx, eax
		mov	edx, esi

loc_6E423303:				; CODE XREF: sub_6E4231B0+29Dj
		mov	eax, [ebp+4]
		mov	esi, [esp+5Ch+var_30]
		lea	eax, [eax+esi+0Dh]
		mov	[esp+5Ch+var_20], eax
		mov	[eax], cl
		mov	eax, [esp+5Ch+var_20]
		mov	[eax+1], dl
		add	[esp+5Ch+var_20], 2
		mov	eax, [ebp+4]
		mov	byte ptr [eax],	0Dh
		mov	edx, edi
		sar	edx, 10h
		mov	[eax+1], dl
		mov	edx, edi
		sar	edx, 8
		mov	[eax+2], dl
		mov	ecx, edi
		mov	[eax+3], cl
		mov	esi, [esp+5Ch+arg_0]
		mov	edx, [esi+5Ch]
		movzx	esi, byte ptr [edx+225h]
		and	esi, 0FFh
		mov	edx, esi
		mov	[eax+4], dl
		mov	esi, [esp+5Ch+arg_0]
		mov	edx, [esi+5Ch]
		mov	edx, [edx+224h]
		mov	[eax+5], dl
		mov	eax, [esi+5Ch]
		inc	word ptr [eax+224h]
		lea	eax, [edi+0Ch]
		mov	[esi+44h], eax
		mov	dword ptr [esi+48h], 0
		mov	eax, [esi+3Ch]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_48], edi
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], edi
		mov	[esp+5Ch+var_54], 0Dh
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	sub_6E42EDB0
		mov	[esp+5Ch+var_58], 0
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_5C], eax
		call	sub_6E42DF60
		mov	eax, [esp+5Ch+arg_0]
		mov	dword ptr [eax+34h], 2161h
		jmp	loc_6E4231C4
; ---------------------------------------------------------------------------
		align 10h

loc_6E4233D0:				; CODE XREF: sub_6E4231B0+FFj
		mov	[esp+5Ch+var_3C], edx
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ecx
		call	i2d_X509_NAME
		lea	eax, [ebx-2]
		mov	ecx, eax
		sar	ecx, 8
		mov	edx, [esp+5Ch+var_3C]
		mov	[edx], cl
		mov	[edx+1], al
		add	edi, ebx
		add	[esp+5Ch+var_34], ebx
		inc	esi
		jmp	loc_6E4232E2
; ---------------------------------------------------------------------------
		jmp	short loc_6E423410
; ---------------------------------------------------------------------------
		align 10h

loc_6E423410:				; CODE XREF: sub_6E4231B0+E7j
					; sub_6E4231B0+251j
		mov	[esp+5Ch+var_4C], 610h
		mov	[esp+5Ch+var_50], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+5Ch+var_54], 7
		mov	[esp+5Ch+var_58], 104h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E423449:				; CODE XREF: sub_6E4231B0+78j
		xor	edx, edx
		xor	ecx, ecx
		jmp	loc_6E423303
sub_6E4231B0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+30h]
		cmp	dword ptr [ebx+34h], 2140h
		jz	short loc_6E423490

loc_6E423471:				; CODE XREF: .text:6E4234CDj
		mov	dword ptr [esp+4], 16h
		mov	[esp], ebx
		call	sub_6E42C4E0
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E423490:				; CODE XREF: .text:6E42346Fj
		mov	[esp], ebx
		call	sub_6E4348E0
		test	eax, eax
		jz	short loc_6E4234D0

loc_6E42349C:				; CODE XREF: .text:6E4234E3j
		mov	[esp+4], eax
		mov	[esp], ebx
		call	sub_6E42D760
		test	eax, eax
		jz	short loc_6E4234F0
		mov	dword ptr [ebx+34h], 2141h
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+48h], 0
		mov	dword ptr [esp+4], 0
		mov	[esp], ebx
		call	sub_6E42DF60
		jmp	short loc_6E423471
; ---------------------------------------------------------------------------
		align 10h

loc_6E4234D0:				; CODE XREF: .text:6E42349Aj
		mov	edx, [ebx+58h]
		mov	edx, [edx+344h]
		cmp	dword ptr [edx+0Ch], 10h
		jnz	short loc_6E4234E5
		cmp	dword ptr [edx+10h], 20h
		jz	short loc_6E42349C

loc_6E4234E5:				; CODE XREF: .text:6E4234DDj
		mov	dword ptr [esp+10h], 65Eh
		jmp	short loc_6E4234F8
; ---------------------------------------------------------------------------
		align 10h

loc_6E4234F0:				; CODE XREF: .text:6E4234AAj
		mov	dword ptr [esp+10h], 665h

loc_6E4234F8:				; CODE XREF: .text:6E4234EDj
		mov	dword ptr [esp+0Ch], offset aD1_srvr_c ; "d1_srvr.c"
		mov	dword ptr [esp+8], 44h
		mov	dword ptr [esp+4], 109h
		mov	dword ptr [esp], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E423530	proc near		; CODE XREF: sub_6E4239E0+3C5p

var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1AD		= byte ptr -1ADh
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= byte ptr -198h
var_197		= byte ptr -197h
var_188		= byte ptr -188h
var_187		= byte ptr -187h
var_178		= byte ptr -178h
var_EC		= byte ptr -0ECh
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1CCh
		mov	ebx, [esp+1DCh+arg_0]
		cmp	dword ptr [ebx+34h], 21F0h
		jz	short loc_6E423570

loc_6E42354A:				; CODE XREF: sub_6E423530+372j
		mov	[esp+1DCh+var_1D8], 16h
		mov	[esp+1DCh+var_1DC], ebx
		call	sub_6E42C4E0

loc_6E42355A:				; CODE XREF: sub_6E423530+3B5j
		add	esp, 1CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E423570:				; CODE XREF: sub_6E423530+18j
		mov	esi, [ebx+170h]
		mov	eax, [ebx+0C0h]
		mov	[esp+1DCh+var_1D8], 0
		mov	[esp+1DCh+var_1DC], eax
		call	i2d_SSL_SESSION
		mov	edi, eax
		mov	[esp+1DCh+var_1BC], eax
		cmp	eax, 0FF00h
		jg	loc_6E4238E0
		mov	eax, [ebx+3Ch]
		lea	edx, [edi+92h]
		mov	[esp+1DCh+var_1D8], edx
		mov	[esp+1DCh+var_1DC], eax
		call	BUF_MEM_grow
		test	eax, eax
		jz	loc_6E4238E0
		mov	[esp+1DCh+var_1D4], 694h
		mov	[esp+1DCh+var_1D8], offset aD1_srvr_c ;	"d1_srvr.c"
		mov	[esp+1DCh+var_1DC], edi
		call	CRYPTO_malloc
		mov	[esp+1DCh+var_1B8], eax
		test	eax, eax
		jz	loc_6E4238E0
		mov	[esp+1DCh+var_1A4], eax
		mov	eax, [ebx+0C0h]
		lea	edx, [esp+1DCh+var_1A4]
		mov	[esp+1DCh+var_1D8], edx
		mov	[esp+1DCh+var_1DC], eax
		call	i2d_SSL_SESSION
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		add	eax, 0Ch
		mov	[esp+1DCh+var_1A4], eax
		lea	ebp, [esp+1DCh+var_178]
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_CIPHER_CTX_init
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_CTX_init
		mov	eax, [esi+138h]
		test	eax, eax
		jz	loc_6E4238F0
		mov	[esp+1DCh+var_1C8], 1
		lea	esi, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1CC], esi
		mov	[esp+1DCh+var_1D0], ebp
		lea	esi, [esp+1DCh+var_198]
		mov	[esp+1DCh+var_1B4], esi
		mov	[esp+1DCh+var_1D4], esi
		lea	edx, [esp+1DCh+var_188]
		mov	[esp+1DCh+var_1D8], edx
		mov	[esp+1DCh+var_1C0], edx
		mov	[esp+1DCh+var_1DC], ebx
		call	eax
		test	eax, eax
		mov	edx, [esp+1DCh+var_1C0]
		js	loc_6E4238D4

loc_6E42366E:				; CODE XREF: sub_6E423530+446j
		mov	ecx, [esp+1DCh+var_1A4]
		lea	eax, [ecx+1]
		mov	[esp+1DCh+var_1A4], eax
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+0ECh]
		sar	eax, 18h
		mov	[ecx], al
		mov	ecx, [esp+1DCh+var_1A4]
		lea	eax, [ecx+1]
		mov	[esp+1DCh+var_1A4], eax
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+0ECh]
		sar	eax, 10h
		mov	[ecx], al
		mov	ecx, [esp+1DCh+var_1A4]
		lea	eax, [ecx+1]
		mov	[esp+1DCh+var_1A4], eax
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+0ECh]
		sar	eax, 8
		mov	[ecx], al
		mov	eax, [esp+1DCh+var_1A4]
		lea	ecx, [eax+1]
		mov	[esp+1DCh+var_1A4], ecx
		mov	ecx, [ebx+0C0h]
		mov	ecx, [ecx+0ECh]
		mov	[eax], cl
		mov	ecx, [esp+1DCh+var_1A4]
		lea	eax, [ecx+2]
		mov	[esp+1DCh+var_1C0], eax
		mov	[esp+1DCh+var_1A4], eax
		mov	edi, eax
		mov	esi, edx
		mov	eax, 10h
		test	edi, 1
		jnz	loc_6E4239A0

loc_6E4236FF:				; CODE XREF: sub_6E423530+483j
		test	edi, 2
		jnz	loc_6E423980

loc_6E42370B:				; CODE XREF: sub_6E423530+45Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E423723
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E423723:				; CODE XREF: sub_6E423530+1E6j
		test	al, 1
		jz	short loc_6E423731
		mov	al, [esi+edx]
		mov	[esp+1DCh+var_1AD], al
		mov	[edi+edx], al

loc_6E423731:				; CODE XREF: sub_6E423530+1F5j
		add	[esp+1DCh+var_1A4], 10h
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_CIPHER_CTX_iv_length
		mov	edi, [esp+1DCh+var_1A4]
		mov	esi, [esp+1DCh+var_1B4]
		cmp	eax, 4
		jnb	loc_6E4238B0

loc_6E42374F:				; CODE XREF: sub_6E423530+39Fj
		xor	edx, edx
		test	al, 2
		jz	short loc_6E423760
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E423760:				; CODE XREF: sub_6E423530+223j
		test	al, 1
		jz	short loc_6E42376E
		mov	al, [esi+edx]
		mov	byte ptr [esp+1DCh+var_1B4], al
		mov	[edi+edx], al

loc_6E42376E:				; CODE XREF: sub_6E423530+232j
		mov	esi, [esp+1DCh+var_1A4]
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_CIPHER_CTX_iv_length
		add	eax, esi
		mov	[esp+1DCh+var_1A4], eax
		mov	edi, [esp+1DCh+var_1BC]
		mov	[esp+1DCh+var_1CC], edi
		mov	edi, [esp+1DCh+var_1B8]
		mov	[esp+1DCh+var_1D0], edi
		lea	esi, [esp+1DCh+var_1A0]
		mov	[esp+1DCh+var_1D4], esi
		mov	[esp+1DCh+var_1D8], eax
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_EncryptUpdate
		mov	eax, [esp+1DCh+var_1A4]
		add	eax, [esp+1DCh+var_1A0]
		mov	[esp+1DCh+var_1A4], eax
		mov	[esp+1DCh+var_1D4], esi
		mov	[esp+1DCh+var_1D8], eax
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_EncryptFinal
		mov	eax, [esp+1DCh+var_1A0]
		add	[esp+1DCh+var_1A4], eax
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [esp+1DCh+var_1A4]
		mov	esi, [esp+1DCh+var_1C0]
		sub	eax, esi
		mov	[esp+1DCh+var_1D4], eax
		mov	[esp+1DCh+var_1D8], esi
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_Update
		lea	eax, [esp+1DCh+var_19C]
		mov	[esp+1DCh+var_1D4], eax
		mov	eax, [esp+1DCh+var_1A4]
		mov	[esp+1DCh+var_1D8], eax
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_Final
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_CTX_cleanup
		mov	eax, [ebx+3Ch]
		mov	edx, [eax+4]
		mov	eax, [esp+1DCh+var_1A4]
		add	eax, [esp+1DCh+var_19C]
		sub	eax, edx
		mov	[esp+1DCh+var_1A0], eax
		lea	ecx, [eax-12h]
		sar	ecx, 8
		mov	[edx+10h], cl
		lea	ecx, [eax-12h]
		mov	[edx+11h], cl
		add	edx, 12h
		mov	[esp+1DCh+var_1A4], edx
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+34h], 21F1h
		mov	dword ptr [ebx+48h], 0
		mov	[esp+1DCh+var_1DC], edi
		call	CRYPTO_free
		mov	eax, [ebx+44h]
		sub	eax, 0Ch
		mov	edx, [ebx+3Ch]
		mov	edx, [edx+4]
		mov	[esp+1DCh+var_1C8], eax
		mov	[esp+1DCh+var_1CC], 0
		mov	[esp+1DCh+var_1D0], eax
		mov	[esp+1DCh+var_1D4], 4
		mov	[esp+1DCh+var_1D8], edx
		mov	[esp+1DCh+var_1DC], ebx
		call	sub_6E42EDB0
		mov	[esp+1DCh+var_1D8], 0
		mov	[esp+1DCh+var_1DC], ebx
		call	sub_6E42DF60
		jmp	loc_6E42354A
; ---------------------------------------------------------------------------
		align 10h

loc_6E4238B0:				; CODE XREF: sub_6E423530+219j
		test	edi, 1
		jnz	loc_6E4239CC

loc_6E4238BC:				; CODE XREF: sub_6E423530+4AAj
		test	edi, 2
		jnz	loc_6E4239B8

loc_6E4238C8:				; CODE XREF: sub_6E423530+497j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E42374F
; ---------------------------------------------------------------------------

loc_6E4238D4:				; CODE XREF: sub_6E423530+138j
		mov	eax, [esp+1DCh+var_1B8]
		mov	[esp+1DCh+var_1DC], eax
		call	CRYPTO_free

loc_6E4238E0:				; CODE XREF: sub_6E423530+67j
					; sub_6E423530+84j ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42355A
; ---------------------------------------------------------------------------
		align 10h

loc_6E4238F0:				; CODE XREF: sub_6E423530+F8j
		mov	[esp+1DCh+var_1D8], 10h
		lea	eax, [esp+1DCh+var_198]
		mov	edi, eax
		mov	[esp+1DCh+var_1B4], eax
		mov	[esp+1DCh+var_1DC], eax
		call	RAND_pseudo_bytes
		call	EVP_aes_128_cbc
		mov	[esp+1DCh+var_1CC], edi
		lea	edx, [esi+128h]
		mov	[esp+1DCh+var_1D0], edx
		mov	[esp+1DCh+var_1D4], 0
		mov	[esp+1DCh+var_1D8], eax
		mov	[esp+1DCh+var_1DC], ebp
		call	EVP_EncryptInit_ex
		call	EVP_sha256
		mov	[esp+1DCh+var_1CC], 0
		mov	[esp+1DCh+var_1D0], eax
		mov	[esp+1DCh+var_1D4], 10h
		lea	eax, [esi+118h]
		mov	[esp+1DCh+var_1D8], eax
		lea	eax, [esp+1DCh+var_EC]
		mov	[esp+1DCh+var_1DC], eax
		call	HMAC_Init_ex
		lea	edx, [esp+1DCh+var_188]
		add	esi, 108h
		mov	ecx, 4
		mov	edi, edx
		rep movsd
		jmp	loc_6E42366E
; ---------------------------------------------------------------------------
		align 10h

loc_6E423980:				; CODE XREF: sub_6E423530+1D5j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E42370B
; ---------------------------------------------------------------------------
		align 10h

loc_6E4239A0:				; CODE XREF: sub_6E423530+1C9j
		mov	al, [esp+1DCh+var_188]
		mov	[ecx+2], al
		lea	edi, [ecx+3]
		lea	esi, [esp+1DCh+var_187]
		mov	eax, 0Fh
		jmp	loc_6E4236FF
; ---------------------------------------------------------------------------

loc_6E4239B8:				; CODE XREF: sub_6E423530+392j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E4238C8
; ---------------------------------------------------------------------------

loc_6E4239CC:				; CODE XREF: sub_6E423530+386j
		mov	cl, [esi]
		mov	byte ptr [esp+1DCh+var_1B4], cl
		mov	[edi], cl
		inc	edi
		lea	esi, [esp+1DCh+var_197]
		dec	eax
		jmp	loc_6E4238BC
sub_6E423530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E4239E0	proc near		; DATA XREF: sub_6E4239E0+F67o
					; .rdata:6E44CCF0o ...

Time		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_0]
		mov	[esp+58h+Time],	0 ; Time
		call	time
		mov	[ebp+var_1C], eax
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_54], 4
		lea	eax, [ebp+var_1C]
		mov	[esp+58h+Time],	eax
		call	RAND_add
		call	ERR_clear_error
		mov	[esp+58h+Time],	0 ; dwErrCode
		call	ds:SetLastError
		push	eax
		mov	eax, [ebx+0D0h]
		mov	[ebp+var_2C], eax
		test	eax, eax
		jz	loc_6E424750

loc_6E423A42:				; CODE XREF: sub_6E4239E0+D7Fj
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+254h]
		mov	[ebp+var_30], eax
		inc	dword ptr [ebx+1Ch]
		mov	[esp+58h+Time],	ebx
		call	SSL_state
		test	ah, 30h
		jz	loc_6E423B70
		mov	[esp+58h+Time],	ebx
		call	SSL_state
		test	ah, 40h
		jnz	loc_6E423B70

loc_6E423A73:				; CODE XREF: sub_6E4239E0+198j
		mov	eax, [ebx+5Ch]
		mov	edi, [ebp+var_30]
		mov	[eax+254h], edi
		mov	eax, [ebx+98h]
		test	eax, eax
		jz	loc_6E424C16
		mov	eax, [ebx+188h]
		test	eax, eax
		jnz	loc_6E4246A0
		nop
		lea	esi, [esi+0]

loc_6E423AA0:				; CODE XREF: sub_6E4239E0+3F3j
					; sub_6E4239E0+86Cj ...
		mov	edx, [ebx+34h]

loc_6E423AA3:				; CODE XREF: sub_6E4239E0+898j
					; sub_6E4239E0+8BEj
		cmp	edx, 2171h
		jg	loc_6E423B80
		cmp	edx, 2170h
		jge	loc_6E424639
		cmp	edx, 2121h
		jg	loc_6E423CD0
		cmp	edx, 2120h
		jge	loc_6E4245A0
		cmp	edx, 2100h
		jz	loc_6E424550
		jle	loc_6E423F30
		cmp	edx, 2110h
		jl	loc_6E4242E0
		cmp	edx, 2112h
		jle	loc_6E424110
		cmp	edx, 2114h
		jg	loc_6E4242E0
		cmp	edx, 2113h
		jz	loc_6E423C10

loc_6E423B15:				; CODE XREF: sub_6E4239E0+F38j
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_54], 16h
		mov	[esp+58h+Time],	ebx
		call	sub_6E42C4E0
		test	eax, eax
		jle	loc_6E423CA0
		mov	dword ptr [ebx+34h], 2100h
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+350h], 2110h
		cmp	dword ptr [ebx], 100h
		mov	edx, [ebp+var_34]
		jz	loc_6E423DC6
		mov	[esp+58h+Time],	ebx
		call	sub_6E411760
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E423B70:				; CODE XREF: sub_6E4239E0+7Cj
					; sub_6E4239E0+8Dj
		mov	[esp+58h+Time],	ebx
		call	SSL_clear
		jmp	loc_6E423A73
; ---------------------------------------------------------------------------
		align 10h

loc_6E423B80:				; CODE XREF: sub_6E4239E0+C9j
		cmp	edx, 21D1h
		jg	loc_6E423D60
		cmp	edx, 21D0h
		jge	loc_6E4243A0
		cmp	edx, 2191h
		jg	loc_6E423DE0
		cmp	edx, 2190h
		jge	loc_6E424490
		lea	eax, [edx-2180h]
		cmp	eax, 1
		ja	loc_6E4242E0
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E401570
		test	eax, eax
		jle	loc_6E423CA0
		cmp	eax, 2
		mov	edx, [ebp+var_34]
		jz	loc_6E424973
		mov	eax, [ebx+58h]
		mov	ecx, [eax+390h]
		test	ecx, ecx
		jnz	loc_6E4247B0

loc_6E423BEF:				; CODE XREF: sub_6E4239E0+DE9j
		mov	dword ptr [ebx+44h], 0
		mov	dword ptr [ebx+34h], 2190h
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E423C10:				; CODE XREF: sub_6E4239E0+12Fj
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	edi, eax
		mov	[ebp+var_38], eax
		mov	eax, [ebx]
		sar	eax, 8
		mov	[edi+0Ch], al
		mov	eax, [ebx]
		mov	[edi+0Dh], al
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+78h]
		test	eax, eax
		jz	short loc_6E423C5C
		mov	[ebp+var_34], edx
		mov	ecx, [ebx+5Ch]
		lea	esi, [ecx+204h]
		mov	[esp+58h+var_50], esi
		add	ecx, 4
		mov	[esp+58h+var_54], ecx
		mov	[esp+58h+Time],	ebx
		call	eax
		test	eax, eax
		mov	edx, [ebp+var_34]
		jnz	loc_6E42487C

loc_6E423C5C:				; CODE XREF: sub_6E4239E0+253j
		mov	[esp+58h+var_48], 3B8h
		mov	[esp+58h+var_4C], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+58h+var_50], 44h
		mov	[esp+58h+var_54], 108h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	dword ptr [ebx+34h], 5
		xor	eax, eax
		jmp	short loc_6E423CA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E423CA0:				; CODE XREF: sub_6E4239E0+14Aj
					; sub_6E4239E0+1ECj ...
		dec	dword ptr [ebx+1Ch]
		mov	edi, [ebp+var_2C]
		test	edi, edi
		jz	short loc_6E423CC1
		mov	[esp+58h+var_50], eax
		mov	[ebp+var_2C], eax
		mov	[esp+58h+var_54], 2002h
		mov	[esp+58h+Time],	ebx
		call	edi
		mov	eax, [ebp+var_2C]

loc_6E423CC1:				; CODE XREF: sub_6E4239E0+2C8j
					; sub_6E4239E0+1171j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E423CD0:				; CODE XREF: sub_6E4239E0+E1j
		cmp	edx, 2141h
		jg	loc_6E423E70
		cmp	edx, 2140h
		jge	loc_6E424460
		cmp	edx, 2122h
		jz	loc_6E424450
		lea	eax, [edx-2130h]
		cmp	eax, 1
		ja	loc_6E4242E0
		mov	[ebp+var_34], edx
		mov	dword ptr [ebx+190h], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		mov	[esp+58h+Time],	ebx
		call	sub_6E421FC0
		test	eax, eax
		jle	loc_6E423CA0
		mov	eax, [ebx+6Ch]
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E4246D0

loc_6E423D36:				; CODE XREF: sub_6E4239E0+474j
		cmp	dword ptr [ebx+140h], 1
		sbb	eax, eax
		and	eax, 0FFFFFFE0h
		add	eax, 21F0h
		mov	[ebx+34h], eax

loc_6E423D4A:				; CODE XREF: sub_6E4239E0+481j
					; sub_6E4239E0+CF7j
		mov	dword ptr [ebx+44h], 0

loc_6E423D51:				; CODE XREF: sub_6E4239E0+792j
		mov	eax, [ebx+58h]
		jmp	short loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E423D60:				; CODE XREF: sub_6E4239E0+1A6j
		cmp	edx, 2201h
		jg	loc_6E423FA0
		cmp	edx, 2200h
		jge	loc_6E424520
		cmp	edx, 21E0h
		jl	loc_6E4242E0
		cmp	edx, 21E1h
		jle	loc_6E4240A0
		lea	eax, [edx-21F0h]
		cmp	eax, 1
		ja	loc_6E4242E0
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E423530
		test	eax, eax
		jle	loc_6E423CA0
		mov	dword ptr [ebx+34h], 21D0h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]

loc_6E423DC6:				; CODE XREF: sub_6E4239E0+16Dj
					; sub_6E4239E0+181j ...
		cmp	dword ptr [eax+354h], 0
		jz	loc_6E42425A
		jmp	loc_6E423AA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E423DE0:				; CODE XREF: sub_6E4239E0+1BEj
		cmp	edx, 21A0h
		jl	loc_6E4242E0
		cmp	edx, 21A1h
		jle	loc_6E4241B0
		lea	eax, [edx-21C0h]
		cmp	eax, 1
		ja	loc_6E4242E0
		mov	eax, [ebx+58h]
		mov	eax, [eax+180h]
		test	eax, eax
		jnz	short loc_6E423E21
		mov	eax, [ebx+5Ch]
		mov	dword ptr [eax+2E8h], 1

loc_6E423E21:				; CODE XREF: sub_6E4239E0+432j
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_50], 21C1h
		mov	[esp+58h+var_54], 21C0h
		mov	[esp+58h+Time],	ebx
		call	sub_6E415C90
		test	eax, eax
		jle	loc_6E423CA0
		mov	[esp+58h+Time],	ebx
		call	sub_6E427CA0
		mov	eax, [ebx+6Ch]
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E423D36
		mov	dword ptr [ebx+34h], 3
		jmp	loc_6E423D4A
; ---------------------------------------------------------------------------
		align 10h

loc_6E423E70:				; CODE XREF: sub_6E4239E0+2F6j
		cmp	edx, 2150h
		jl	loc_6E4242E0
		cmp	edx, 2151h
		jle	loc_6E4241E0
		lea	eax, [edx-2160h]
		cmp	eax, 1
		ja	loc_6E4242E0
		mov	eax, [ebx+0C8h]
		test	al, 1
		jz	loc_6E424620
		mov	ecx, [ebx+0C0h]
		mov	esi, [ecx+9Ch]
		test	esi, esi
		jz	short loc_6E423EBD
		test	al, 4
		jnz	loc_6E424620

loc_6E423EBD:				; CODE XREF: sub_6E4239E0+4D3j
		mov	ecx, [ebx+58h]
		mov	edi, [ecx+344h]
		mov	esi, [edi+10h]
		test	esi, 4
		jz	short loc_6E423ED9
		test	al, 2
		jz	loc_6E424623

loc_6E423ED9:				; CODE XREF: sub_6E4239E0+4EFj
		and	esi, 20h
		jnz	loc_6E424623
		test	byte ptr [edi+0Dh], 1
		jnz	loc_6E424623
		mov	[ebp+var_34], edx
		mov	dword ptr [ecx+390h], 1
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		mov	[esp+58h+Time],	ebx
		call	sub_6E4231B0
		test	eax, eax
		jle	loc_6E423CA0
		mov	dword ptr [ebx+34h], 2170h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E423F30:				; CODE XREF: sub_6E4239E0+FFj
		cmp	edx, 2000h
		jz	loc_6E423FC6
		cmp	edx, 2003h
		jz	loc_6E423FC6
		cmp	edx, 3
		jnz	loc_6E4242E0
		mov	[esp+58h+Time],	ebx
		call	sub_6E4114A0
		mov	[esp+58h+Time],	ebx
		call	sub_6E435E90
		mov	dword ptr [ebx+44h], 0
		cmp	dword ptr [ebx+190h], 2
		jz	loc_6E42491D

loc_6E423F75:				; CODE XREF: sub_6E4239E0+F73j
					; sub_6E4239E0+F8Ej
		mov	eax, [ebx+5Ch]
		mov	word ptr [eax+228h], 0
		mov	word ptr [eax+224h], 0
		mov	word ptr [eax+226h], 0
		mov	eax, 1
		jmp	loc_6E423CA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E423FA0:				; CODE XREF: sub_6E4239E0+386j
		cmp	edx, 4000h
		jz	short loc_6E423FC6
		cmp	edx, 6000h
		jz	short loc_6E423FC6
		cmp	edx, 3004h
		jnz	loc_6E4242E0
		mov	dword ptr [ebx+190h], 1

loc_6E423FC6:				; CODE XREF: sub_6E4239E0+556j
					; sub_6E4239E0+562j ...
		mov	dword ptr [ebx+24h], 1
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	short loc_6E423FEF
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 10h
		mov	[esp+58h+Time],	ebx
		call	eax
		mov	edx, [ebp+var_34]

loc_6E423FEF:				; CODE XREF: sub_6E4239E0+5F2j
		mov	eax, [ebx]
		and	eax, 0FF00h
		cmp	eax, 0FE00h
		jnz	loc_6E424B20
		mov	dword ptr [ebx+4], 2000h
		mov	edi, [ebx+3Ch]
		test	edi, edi
		jz	loc_6E424770

loc_6E424013:				; CODE XREF: sub_6E4239E0+DC6j
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E416DB0
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E424B0F
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+5Ch]
		mov	dword ptr [eax+2E8h], 0
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+180h], 0
		cmp	dword ptr [ebx+34h], 3004h
		jz	loc_6E4242B0
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_54], 1
		mov	[esp+58h+Time],	ebx
		call	sub_6E435D40
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E424B0F
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E411760
		mov	dword ptr [ebx+34h], 2110h
		mov	eax, [ebx+0E4h]
		inc	dword ptr [eax+40h]
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E4240A0:				; CODE XREF: sub_6E4239E0+3AAj
		mov	[ebp+var_34], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	ecx, [eax+2Ch]
		mov	eax, [eax+28h]
		mov	[esp+58h+var_48], ecx
		mov	[esp+58h+var_4C], eax
		mov	[esp+58h+var_50], 21E1h
		mov	[esp+58h+var_54], 21E0h
		mov	[esp+58h+Time],	ebx
		call	sub_6E42E280
		test	eax, eax
		jle	loc_6E423CA0
		mov	dword ptr [ebx+34h], 2100h
		mov	edi, [ebx+6Ch]
		test	edi, edi
		mov	edx, [ebp+var_34]
		mov	eax, [ebx+58h]
		jnz	loc_6E4246C0
		mov	dword ptr [eax+350h], 3

loc_6E4240F9:				; CODE XREF: sub_6E4239E0+CEAj
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E424110:				; CODE XREF: sub_6E4239E0+117j
		mov	[ebp+var_34], edx
		mov	dword ptr [ebx+30h], 0
		mov	[esp+58h+Time],	ebx
		call	sub_6E401670
		test	eax, eax
		jle	loc_6E423CA0
		mov	[ebp+var_38], eax
		mov	[esp+58h+Time],	ebx
		call	sub_6E427CA0
		mov	eax, [ebp+var_38]
		dec	eax
		mov	edx, [ebp+var_34]
		jz	loc_6E42498D

loc_6E424142:				; CODE XREF: sub_6E4239E0+FD6j
		mov	eax, 2130h

loc_6E424147:				; CODE XREF: sub_6E4239E0+FE1j
		mov	[ebx+34h], eax
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	ecx, [ebp+var_30]
		test	ecx, ecx
		jz	loc_6E423DC6
		mov	ecx, [eax+8]
		mov	[eax+54h], ecx
		mov	ecx, [eax+0Ch]
		mov	[eax+58h], ecx
		cmp	dword ptr [ebx+34h], 2130h
		jnz	loc_6E423D51
		mov	eax, [ebx+5Ch]
		mov	dword ptr [eax+254h], 0
		mov	word ptr [eax+228h], 2
		mov	word ptr [eax+224h], 1
		mov	word ptr [eax+226h], 1
		mov	eax, 2
		jmp	loc_6E423CA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4241B0:				; CODE XREF: sub_6E4239E0+412j
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E404D90
		test	eax, eax
		jle	loc_6E423CA0
		mov	dword ptr [ebx+34h], 21C0h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E4241E0:				; CODE XREF: sub_6E4239E0+4A2j
		mov	eax, [ebx+58h]
		mov	esi, [eax+344h]
		mov	ecx, [esi+0Ch]
		mov	dword ptr [eax+370h], 0
		test	ch, 1
		jz	loc_6E424320
		mov	edi, [ebx+0E4h]
		mov	edi, [edi+14Ch]
		test	edi, edi
		jz	loc_6E424320

loc_6E424213:				; CODE XREF: sub_6E4239E0+943j
					; sub_6E4239E0+959j ...
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		mov	[esp+58h+Time],	ebx
		call	sub_6E4223A0
		test	eax, eax
		mov	edx, [ebp+var_34]
		jle	loc_6E423CA0
		mov	eax, [ebx+58h]
		xor	ecx, ecx

loc_6E424236:				; CODE XREF: sub_6E4239E0+96Ej
		mov	dword ptr [ebx+34h], 2160h

loc_6E42423D:				; CODE XREF: sub_6E4239E0+AA5j
					; sub_6E4239E0+D4Fj ...
		mov	dword ptr [ebx+44h], 0
		mov	esi, [eax+354h]
		test	esi, esi
		jnz	loc_6E423AA0
		test	ecx, ecx
		jnz	loc_6E423AA0

loc_6E42425A:				; CODE XREF: sub_6E4239E0+3EDj
		mov	ecx, [ebx+0E8h]
		test	ecx, ecx
		jnz	loc_6E424360

loc_6E424268:				; CODE XREF: sub_6E4239E0+9ABj
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	loc_6E423AA0
		mov	esi, [ebx+34h]
		cmp	esi, edx
		jz	loc_6E423AA3
		mov	[ebx+34h], edx
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 2001h
		mov	[esp+58h+Time],	ebx
		mov	eax, [ebp+var_2C]
		call	eax
		mov	[ebx+34h], esi
		mov	edx, esi
		jmp	loc_6E423AA3
; ---------------------------------------------------------------------------
		align 10h

loc_6E4242B0:				; CODE XREF: sub_6E4239E0+671j
		mov	esi, [eax+418h]
		test	esi, esi
		jnz	short loc_6E4242C7
		test	byte ptr [ebx+102h], 4
		jz	loc_6E424AB2

loc_6E4242C7:				; CODE XREF: sub_6E4239E0+8D8j
		mov	ecx, [ebx+0E4h]
		inc	dword ptr [ecx+44h]
		mov	dword ptr [ebx+34h], 2120h
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E4242E0:				; CODE XREF: sub_6E4239E0+10Bj
					; sub_6E4239E0+123j ...
		mov	[esp+58h+var_48], 36Ah
		mov	[esp+58h+var_4C], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+58h+var_50], 0FFh
		mov	[esp+58h+var_54], 0F6h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E423CA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E424320:				; CODE XREF: sub_6E4239E0+819j
					; sub_6E4239E0+82Dj
		test	cl, 88h
		jnz	loc_6E424213
		and	ecx, 1
		jz	short loc_6E424349
		mov	ecx, [ebx+98h]
		mov	ecx, [ecx+34h]
		test	ecx, ecx
		jz	loc_6E424213
		test	byte ptr [esi+20h], 2
		jnz	loc_6E424A70

loc_6E424349:				; CODE XREF: sub_6E4239E0+94Cj
					; sub_6E4239E0+10CDj
		mov	ecx, 1
		jmp	loc_6E424236
; ---------------------------------------------------------------------------
		align 10h

loc_6E424360:				; CODE XREF: sub_6E4239E0+882j
		mov	[ebp+var_34], edx
		mov	eax, [ebx+10h]
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0Bh
		mov	[esp+58h+Time],	eax
		call	BIO_ctrl
		test	eax, eax
		mov	edx, [ebp+var_34]
		jg	loc_6E424268
		jmp	loc_6E423CA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4243A0:				; CODE XREF: sub_6E4239E0+1B2j
		mov	[ebp+var_34], edx
		mov	eax, [ebx+0C0h]
		mov	ecx, [ebx+58h]
		mov	ecx, [ecx+344h]
		mov	[eax+0B4h], ecx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+8]
		mov	[esp+58h+Time],	ebx
		call	eax
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E424B0F
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_50], 21D1h
		mov	[esp+58h+var_54], 21D0h
		mov	[esp+58h+Time],	ebx
		call	sub_6E42E5F0
		test	eax, eax
		jle	loc_6E423CA0
		mov	dword ptr [ebx+34h], 21E0h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+10h]
		mov	[esp+58h+var_54], 22h
		mov	[esp+58h+Time],	ebx
		call	eax
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E424B0F
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E42BA10
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		jmp	short loc_6E424450
; ---------------------------------------------------------------------------
		align 10h

loc_6E424450:				; CODE XREF: sub_6E4239E0+30Ej
					; sub_6E4239E0+A61j
		mov	dword ptr [ebx+34h], 3
		mov	eax, [ebx+58h]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E424460:				; CODE XREF: sub_6E4239E0+302j
		mov	eax, [ebx+58h]
		mov	ecx, [eax+344h]
		test	byte ptr [ecx+10h], 4
		jnz	short loc_6E424479
		test	byte ptr [ecx+0Dh], 1
		jz	loc_6E4246DC

loc_6E424479:				; CODE XREF: sub_6E4239E0+A8Dj
		mov	dword ptr [ebx+34h], 2150h
		mov	ecx, 1
		jmp	loc_6E42423D
; ---------------------------------------------------------------------------
		align 10h

loc_6E424490:				; CODE XREF: sub_6E4239E0+1CAj
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E403B20
		test	eax, eax
		jle	loc_6E423CA0
		mov	dword ptr [ebx+34h], 21A0h
		mov	dword ptr [ebx+44h], 0
		cmp	eax, 2
		mov	edx, [ebp+var_34]
		jz	loc_6E424740
		mov	[ebp+var_34], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+1Ch]
		mov	edi, [ebx+58h]
		lea	ecx, [edi+1B4h]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], 4
		mov	[esp+58h+Time],	ebx
		call	eax
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+1Ch]
		mov	esi, [ebx+58h]
		lea	ecx, [esi+1C4h]
		mov	[esp+58h+var_50], ecx
		mov	[esp+58h+var_54], 40h
		mov	[esp+58h+Time],	ebx
		call	eax
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		jmp	short loc_6E424520
; ---------------------------------------------------------------------------
		align 10h

loc_6E424520:				; CODE XREF: sub_6E4239E0+392j
					; sub_6E4239E0+B31j
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E4062C0
		test	eax, eax
		jle	loc_6E423CA0
		mov	dword ptr [ebx+34h], 2150h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E424550:				; CODE XREF: sub_6E4239E0+F9j
		mov	[ebp+var_34], edx
		mov	dword ptr [ebx+18h], 2
		mov	eax, [ebx+10h]
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0Bh
		mov	[esp+58h+Time],	eax
		call	BIO_ctrl
		test	eax, eax
		mov	edx, [ebp+var_34]
		jle	loc_6E424B56
		mov	dword ptr [ebx+18h], 1
		mov	eax, [ebx+58h]
		mov	ecx, [eax+350h]
		mov	[ebx+34h], ecx
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------

loc_6E4245A0:				; CODE XREF: sub_6E4239E0+EDj
		mov	[ebp+var_34], edx
		mov	dword ptr [ebx+30h], 0
		mov	[esp+58h+Time],	ebx
		call	sub_6E42ED20
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		cmp	dword ptr [ebx+34h], 2120h
		mov	edx, [ebp+var_34]
		jz	loc_6E42482D

loc_6E4245CA:				; CODE XREF: sub_6E4239E0+E97j
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_54], 16h
		mov	[esp+58h+Time],	ebx
		call	sub_6E42C4E0
		test	eax, eax
		jle	loc_6E423CA0
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+350h], 2110h
		mov	dword ptr [ebx+34h], 2100h
		mov	dword ptr [ebx+44h], 0
		mov	[esp+58h+Time],	ebx
		call	sub_6E411760
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E424620:				; CODE XREF: sub_6E4239E0+4BFj
					; sub_6E4239E0+4D7j
		mov	ecx, [ebx+58h]

loc_6E424623:				; CODE XREF: sub_6E4239E0+4F3j
					; sub_6E4239E0+4FCj ...
		mov	dword ptr [ecx+390h], 0
		mov	dword ptr [ebx+34h], 2170h
		mov	edx, 2170h

loc_6E424639:				; CODE XREF: sub_6E4239E0+D5j
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		cmp	dword ptr [ebx+34h], 2170h
		mov	edx, [ebp+var_34]
		jz	loc_6E4247CE

loc_6E424654:				; CODE XREF: sub_6E4239E0+E48j
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_54], 16h
		mov	[esp+58h+Time],	ebx
		call	sub_6E42C4E0
		test	eax, eax
		jle	loc_6E423CA0
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+350h], 2180h
		mov	dword ptr [ebx+34h], 2100h
		mov	dword ptr [ebx+44h], 0
		mov	edx, [ebp+var_34]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E4246A0:				; CODE XREF: sub_6E4239E0+B5j
		mov	[esp+58h+Time],	ebx
		call	sub_6E427CA0
		mov	dword ptr [ebx+188h], 0
		inc	dword ptr [ebx+18Ch]
		jmp	loc_6E423AA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4246C0:				; CODE XREF: sub_6E4239E0+709j
		mov	dword ptr [eax+350h], 21C0h
		jmp	loc_6E4240F9
; ---------------------------------------------------------------------------
		align 10h

loc_6E4246D0:				; CODE XREF: sub_6E4239E0+350j
		mov	dword ptr [ebx+34h], 2140h
		jmp	loc_6E423D4A
; ---------------------------------------------------------------------------

loc_6E4246DC:				; CODE XREF: sub_6E4239E0+A93j
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		cmp	dword ptr [ebx+34h], 2140h
		mov	edx, [ebp+var_34]
		jz	loc_6E424A17

loc_6E4246F7:				; CODE XREF: sub_6E4239E0+108Bj
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_54], 16h
		mov	[esp+58h+Time],	ebx
		call	sub_6E42C4E0
		test	eax, eax
		jle	loc_6E423CA0
		mov	eax, [ebx+12Ch]
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E4249E1
		mov	dword ptr [ebx+34h], 2200h
		mov	eax, [ebx+58h]
		xor	ecx, ecx
		jmp	loc_6E42423D
; ---------------------------------------------------------------------------
		align 10h

loc_6E424740:				; CODE XREF: sub_6E4239E0+AD7j
		mov	dword ptr [ebx+34h], 21C0h
		mov	eax, [ebx+58h]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E424750:				; CODE XREF: sub_6E4239E0+5Cj
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+9Ch]
		mov	[ebp+var_2C], eax
		jmp	loc_6E423A42
; ---------------------------------------------------------------------------
		align 10h

loc_6E424770:				; CODE XREF: sub_6E4239E0+62Dj
		mov	[ebp+var_34], edx
		call	BUF_MEM_new
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E424B0F
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_54], 4000h
		mov	[esp+58h+Time],	eax
		call	BUF_MEM_grow
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E424B07
		mov	[ebx+3Ch], esi
		jmp	loc_6E424013
; ---------------------------------------------------------------------------
		align 10h

loc_6E4247B0:				; CODE XREF: sub_6E4239E0+209j
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E4055A0
		test	eax, eax
		jle	loc_6E423CA0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]
		jmp	loc_6E423BEF
; ---------------------------------------------------------------------------

loc_6E4247CE:				; CODE XREF: sub_6E4239E0+C6Ej
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+58h+var_44], 0
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0Eh
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+Time],	ebx
		call	sub_6E42EDB0
		mov	dword ptr [ebx+34h], 2171h
		mov	dword ptr [ebx+44h], 0Ch
		mov	dword ptr [ebx+48h], 0
		mov	[esp+58h+var_54], 0
		mov	[esp+58h+Time],	ebx
		call	sub_6E42DF60
		mov	edx, [ebp+var_34]
		jmp	loc_6E424654
; ---------------------------------------------------------------------------

loc_6E42482D:				; CODE XREF: sub_6E4239E0+BE4j
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+58h+var_44], 0
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+Time],	ebx
		call	sub_6E42EDB0
		mov	dword ptr [ebx+34h], 2121h
		mov	dword ptr [ebx+44h], 0Ch
		mov	dword ptr [ebx+48h], 0
		mov	edx, [ebp+var_34]
		jmp	loc_6E4245CA
; ---------------------------------------------------------------------------

loc_6E42487C:				; CODE XREF: sub_6E4239E0+276j
		mov	esi, [ebp+var_38]
		mov	eax, esi
		add	eax, 0Fh
		mov	edi, eax
		mov	[ebp+var_3C], eax
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+204h]
		mov	[esi+0Eh], al
		mov	ecx, [ebx+5Ch]
		mov	eax, [ecx+204h]
		mov	[ebp+var_34], eax
		lea	esi, [ecx+4]
		cmp	eax, 4
		jnb	loc_6E4249F2

loc_6E4248AD:				; CODE XREF: sub_6E4239E0+1032j
		xor	ecx, ecx
		test	byte ptr [ebp+var_34], 2
		jnz	loc_6E4249D1

loc_6E4248B9:				; CODE XREF: sub_6E4239E0+FFCj
		test	byte ptr [ebp+var_34], 1
		jnz	loc_6E4249C6

loc_6E4248C3:				; CODE XREF: sub_6E4239E0+FECj
		mov	[ebp+var_34], edx
		mov	eax, [ebx+5Ch]
		mov	esi, [ebp+var_3C]
		add	esi, [eax+204h]
		mov	edi, [ebp+var_38]
		mov	eax, edi
		add	eax, 0Ch
		mov	ecx, esi
		sub	ecx, eax
		mov	[esp+58h+var_44], ecx
		mov	[esp+58h+var_48], 0
		mov	[esp+58h+var_4C], ecx
		mov	[esp+58h+var_50], 3
		mov	[esp+58h+var_54], edi
		mov	[esp+58h+Time],	ebx
		call	sub_6E42EDB0
		mov	dword ptr [ebx+34h], 2114h
		sub	esi, edi
		mov	[ebx+44h], esi
		mov	dword ptr [ebx+48h], 0
		mov	edx, [ebp+var_34]
		jmp	loc_6E423B15
; ---------------------------------------------------------------------------

loc_6E42491D:				; CODE XREF: sub_6E4239E0+58Fj
		mov	dword ptr [ebx+190h], 0
		mov	dword ptr [ebx+28h], 0
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E4350C0
		mov	eax, [ebx+0E4h]
		inc	dword ptr [eax+48h]
		mov	dword ptr [ebx+20h], offset sub_6E4239E0
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	loc_6E423F75
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 20h
		mov	[esp+58h+Time],	ebx
		call	eax
		jmp	loc_6E423F75
; ---------------------------------------------------------------------------

loc_6E424973:				; CODE XREF: sub_6E4239E0+1F8j
		mov	[esp+58h+Time],	ebx
		call	sub_6E427CA0
		mov	dword ptr [ebx+34h], 2112h
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_34]
		jmp	loc_6E423DC6
; ---------------------------------------------------------------------------

loc_6E42498D:				; CODE XREF: sub_6E4239E0+75Cj
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 20h
		mov	[esp+58h+Time],	ebx
		call	SSL_ctrl
		test	ah, 20h
		mov	edx, [ebp+var_34]
		jz	loc_6E424142
		mov	eax, 2113h
		jmp	loc_6E424147
; ---------------------------------------------------------------------------

loc_6E4249C6:				; CODE XREF: sub_6E4239E0+EDDj
		mov	al, [esi+ecx]
		mov	[edi+ecx], al
		jmp	loc_6E4248C3
; ---------------------------------------------------------------------------

loc_6E4249D1:				; CODE XREF: sub_6E4239E0+ED3j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	loc_6E4248B9
; ---------------------------------------------------------------------------

loc_6E4249E1:				; CODE XREF: sub_6E4239E0+D3Dj
		mov	dword ptr [ebx+34h], 2150h
		mov	eax, [ebx+58h]
		xor	ecx, ecx
		jmp	loc_6E42423D
; ---------------------------------------------------------------------------

loc_6E4249F2:				; CODE XREF: sub_6E4239E0+EC7j
		test	edi, 1
		jnz	loc_6E424BFF

loc_6E4249FE:				; CODE XREF: sub_6E4239E0+1231j
		test	edi, 2
		jnz	loc_6E424BEA

loc_6E424A0A:				; CODE XREF: sub_6E4239E0+121Aj
		mov	ecx, [ebp+var_34]
		shr	ecx, 2
		rep movsd
		jmp	loc_6E4248AD
; ---------------------------------------------------------------------------

loc_6E424A17:				; CODE XREF: sub_6E4239E0+D11j
		mov	[esp+58h+Time],	ebx
		call	sub_6E4348E0
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E424BBD

loc_6E424A2A:				; CODE XREF: sub_6E4239E0+11F0j
		mov	[ebp+var_34], edx
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+Time],	ebx
		call	sub_6E42D760
		test	eax, eax
		mov	edx, [ebp+var_34]
		jz	loc_6E424B8A
		mov	[ebp+var_34], edx
		mov	dword ptr [ebx+34h], 2141h
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+48h], 0
		mov	[esp+58h+var_54], 0
		mov	[esp+58h+Time],	ebx
		call	sub_6E42DF60
		mov	edx, [ebp+var_34]
		jmp	loc_6E4246F7
; ---------------------------------------------------------------------------

loc_6E424A70:				; CODE XREF: sub_6E4239E0+963j
		mov	[ebp+var_34], edx
		mov	[esp+58h+Time],	ecx
		call	EVP_PKEY_size
		lea	esi, ds:0[eax*8]
		mov	eax, [ebx+58h]
		mov	ecx, [eax+344h]
		mov	ecx, [ecx+20h]
		and	ecx, 8
		cmp	ecx, 1
		sbb	ecx, ecx
		and	ecx, 200h
		add	ecx, 200h
		cmp	ecx, esi
		mov	edx, [ebp+var_34]
		jl	loc_6E424213
		jmp	loc_6E424349
; ---------------------------------------------------------------------------

loc_6E424AB2:				; CODE XREF: sub_6E4239E0+8E1j
		mov	[esp+58h+var_48], 116h
		mov	[esp+58h+var_4C], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+58h+var_50], 152h
		mov	[esp+58h+var_54], 0F6h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	[esp+58h+var_50], 28h
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E4151B0
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E423CA0
; ---------------------------------------------------------------------------

loc_6E424B07:				; CODE XREF: sub_6E4239E0+DBDj
		mov	[esp+58h+Time],	esi
		call	BUF_MEM_free

loc_6E424B0F:				; CODE XREF: sub_6E4239E0+643j
					; sub_6E4239E0+68Fj ...
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E423CA0
; ---------------------------------------------------------------------------

loc_6E424B20:				; CODE XREF: sub_6E4239E0+61Bj
		mov	[esp+58h+var_48], 0DBh
		mov	[esp+58h+var_4C], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+58h+var_50], 44h
		mov	[esp+58h+var_54], 0F6h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E423CC1
; ---------------------------------------------------------------------------

loc_6E424B56:				; CODE XREF: sub_6E4239E0+BA2j
		mov	eax, [ebx+10h]
		mov	[esp+58h+var_54], 8
		mov	[esp+58h+Time],	eax
		call	BIO_test_flags
		test	eax, eax
		jnz	short loc_6E424BE0
		mov	dword ptr [ebx+18h], 1
		mov	eax, [ebx+58h]
		mov	eax, [eax+350h]
		mov	[ebx+34h], eax
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E423CA0
; ---------------------------------------------------------------------------

loc_6E424B8A:				; CODE XREF: sub_6E4239E0+105Ej
		mov	[esp+58h+var_48], 665h

loc_6E424B92:				; CODE XREF: sub_6E4239E0+11FEj
		mov	[esp+58h+var_4C], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+58h+var_50], 44h
		mov	[esp+58h+var_54], 109h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E423CA0
; ---------------------------------------------------------------------------

loc_6E424BBD:				; CODE XREF: sub_6E4239E0+1044j
		mov	ecx, [ebx+58h]
		mov	ecx, [ecx+344h]
		cmp	dword ptr [ecx+0Ch], 10h
		jnz	short loc_6E424BD6
		cmp	dword ptr [ecx+10h], 20h
		jz	loc_6E424A2A

loc_6E424BD6:				; CODE XREF: sub_6E4239E0+11EAj
		mov	[esp+58h+var_48], 65Eh
		jmp	short loc_6E424B92
; ---------------------------------------------------------------------------

loc_6E424BE0:				; CODE XREF: sub_6E4239E0+118Bj
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E423CA0
; ---------------------------------------------------------------------------

loc_6E424BEA:				; CODE XREF: sub_6E4239E0+1024j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	[ebp+var_34], 2
		jmp	loc_6E424A0A
; ---------------------------------------------------------------------------

loc_6E424BFF:				; CODE XREF: sub_6E4239E0+1018j
		mov	esi, [ebp+var_38]
		mov	al, [ecx+4]
		mov	[esi+0Fh], al
		lea	edi, [esi+10h]
		lea	esi, [ecx+5]
		dec	[ebp+var_34]
		jmp	loc_6E4249FE
; ---------------------------------------------------------------------------

loc_6E424C16:				; CODE XREF: sub_6E4239E0+A7j
		mov	[esp+58h+var_48], 0B9h
		mov	[esp+58h+var_4C], offset aD1_srvr_c ; "d1_srvr.c"
		mov	[esp+58h+var_50], 0B3h
		mov	[esp+58h+var_54], 0F6h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E423CC1
sub_6E4239E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E424C50	proc near		; DATA XREF: .rdata:6E44CE7Co

arg_0		= dword	ptr  4

		cmp	[esp+arg_0], 0FEFFh
		jz	short loc_6E424C64
		cmp	[esp+arg_0], 100h
		jnz	short loc_6E424C70

loc_6E424C64:				; CODE XREF: sub_6E424C50+8j
		mov	eax, offset dword_6E44CE20
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E424C70:				; CODE XREF: sub_6E424C50+12j
		xor	eax, eax
		retn
sub_6E424C50	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 268. DTLSv1_client_method

; =============== S U B	R O U T	I N E =======================================


		public DTLSv1_client_method
DTLSv1_client_method proc near
		mov	eax, offset dword_6E44CE20
		retn
DTLSv1_client_method endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E424C90	proc near		; CODE XREF: sub_6E426500+122p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx+3Ch]
		mov	ebp, [eax+4]
		cmp	dword ptr [ebx+34h], 1110h
		jz	short loc_6E424CD0

loc_6E424CAA:				; CODE XREF: sub_6E424C90+306j
		mov	[esp+4Ch+var_48], 16h
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42C4E0

loc_6E424CBA:				; CODE XREF: sub_6E424C90+442j
					; sub_6E424C90+511j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E424CD0:				; CODE XREF: sub_6E424C90+18j
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	short loc_6E424CE4
		mov	ecx, [ebx]
		cmp	[eax], ecx
		jz	loc_6E425050

loc_6E424CE4:				; CODE XREF: sub_6E424C90+48j
					; sub_6E424C90+3CFj ...
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E438670
		test	eax, eax
		jz	loc_6E4250CD

loc_6E424CFC:				; CODE XREF: sub_6E424C90+3E3j
		mov	ecx, [ebx+58h]
		lea	edx, [ecx+0C0h]
		xor	eax, eax
		cmp	byte ptr [ecx+0C0h], 0
		jz	short loc_6E424D29
		jmp	short loc_6E424D39
; ---------------------------------------------------------------------------
		align 10h

loc_6E424D20:				; CODE XREF: sub_6E424C90+9Ej
		cmp	eax, 20h
		jz	loc_6E425080

loc_6E424D29:				; CODE XREF: sub_6E424C90+7Ej
		inc	eax
		cmp	byte ptr [edx+eax], 0
		jz	short loc_6E424D20
		cmp	eax, 20h
		jz	loc_6E425080

loc_6E424D39:				; CODE XREF: sub_6E424C90+80j
					; sub_6E424C90+40Cj
		lea	eax, [ebp+0Ch]
		mov	[esp+4Ch+var_24], eax
		mov	eax, [ebx]
		sar	eax, 8
		mov	[ebp+0Ch], al
		mov	eax, [ebx]
		mov	[ebp+0Dh], al
		mov	eax, [ebx]
		mov	[ebx+110h], eax
		mov	edx, [ebx+58h]
		lea	edi, [ebp+0Eh]
		lea	esi, [edx+0C0h]
		mov	eax, 20h
		test	edi, 1
		jnz	loc_6E4250EB

loc_6E424D72:				; CODE XREF: sub_6E424C90+472j
		test	edi, 2
		jnz	loc_6E4250D7

loc_6E424D7E:				; CODE XREF: sub_6E424C90+456j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E424D96
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E424D96:				; CODE XREF: sub_6E424C90+F9j
		test	al, 1
		jz	short loc_6E424DA4
		mov	al, [esi+edx]
		mov	byte ptr [esp+4Ch+var_2C], al
		mov	[edi+edx], al

loc_6E424DA4:				; CODE XREF: sub_6E424C90+108j
		mov	eax, [ebx+28h]
		test	eax, eax
		jnz	loc_6E424FA0
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+44h]
		lea	edi, [ebp+2Fh]
		mov	[esp+4Ch+var_28], edi
		mov	[ebp+2Eh], al
		test	eax, eax
		jz	short loc_6E424E05
		cmp	eax, 20h
		ja	loc_6E425135
		mov	edx, [ebx+0C0h]
		mov	[esp+4Ch+var_2C], eax
		mov	edi, [esp+4Ch+var_28]
		lea	esi, [edx+48h]
		cmp	eax, 4
		jnb	loc_6E424FE0

loc_6E424DE9:				; CODE XREF: sub_6E424C90+371j
		xor	edx, edx
		test	byte ptr [esp+4Ch+var_2C], 2
		jnz	loc_6E424FC0
		test	byte ptr [esp+4Ch+var_2C], 1
		jnz	loc_6E424FB0

loc_6E424E01:				; CODE XREF: sub_6E424C90+32Aj
					; sub_6E424C90+340j
		add	[esp+4Ch+var_28], eax

loc_6E424E05:				; CODE XREF: sub_6E424C90+134j
					; sub_6E424C90+31Bj
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+204h]
		cmp	eax, 100h
		ja	loc_6E4250A1
		mov	ecx, [esp+4Ch+var_28]
		lea	edx, [ecx+1]
		mov	[ecx], al
		mov	ecx, [ebx+5Ch]
		mov	eax, [ecx+204h]
		mov	[esp+4Ch+var_2C], eax
		mov	edi, edx
		lea	esi, [ecx+4]
		cmp	eax, 4
		jnb	loc_6E425010

loc_6E424E3D:				; CODE XREF: sub_6E424C90+39Ej
		xor	ecx, ecx
		test	byte ptr [esp+4Ch+var_2C], 2
		jz	short loc_6E424E51
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E424E51:				; CODE XREF: sub_6E424C90+1B4j
		test	byte ptr [esp+4Ch+var_2C], 1
		jz	short loc_6E424E62
		mov	al, [esi+ecx]
		mov	byte ptr [esp+4Ch+var_2C], al
		mov	[edi+ecx], al

loc_6E424E62:				; CODE XREF: sub_6E424C90+1C6j
		mov	eax, [ebx+5Ch]
		add	edx, [eax+204h]
		mov	esi, edx
		lea	edi, [edx+2]
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_ciphers
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E4321C0
		test	eax, eax
		jz	loc_6E425170
		mov	edx, eax
		shr	edx, 8
		mov	[esi], dl
		mov	[esi+1], al
		add	edi, eax
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E425040
		mov	[esp+4Ch+var_4C], eax
		call	sk_num
		mov	[esp+4Ch+var_28], eax
		lea	ecx, [edi+1]
		mov	[esp+4Ch+var_2C], ecx
		mov	ecx, eax
		inc	eax
		mov	[edi], al
		test	ecx, ecx
		jz	short loc_6E424F11
		xor	esi, esi
		mov	[esp+4Ch+var_20], ebp
		mov	ebp, ebx
		mov	ebx, ecx
		xchg	ax, ax

loc_6E424EE0:				; CODE XREF: sub_6E424C90+271j
		mov	eax, [ebp+0E4h]
		mov	eax, [eax+98h]
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], eax
		call	sk_value
		mov	eax, [eax]
		mov	[edi+esi+1], al
		inc	esi
		cmp	ebx, esi
		jnz	short loc_6E424EE0
		mov	ebx, ebp
		mov	ebp, [esp+4Ch+var_20]
		mov	eax, [esp+4Ch+var_28]
		add	[esp+4Ch+var_2C], eax

loc_6E424F11:				; CODE XREF: sub_6E424C90+242j
					; sub_6E424C90+3BAj
		mov	eax, [esp+4Ch+var_2C]
		lea	esi, [eax+1]
		mov	byte ptr [eax],	0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E41CEF0
		test	eax, eax
		jle	loc_6E4251A6
		lea	eax, [ebp+4000h]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E41B270
		mov	esi, eax
		test	eax, eax
		jz	loc_6E4251DC
		sub	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_38], eax
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 1
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42EDB0
		mov	dword ptr [ebx+34h], 1111h
		sub	esi, ebp
		mov	[ebx+44h], esi
		mov	dword ptr [ebx+48h], 0
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42DF60
		jmp	loc_6E424CAA
; ---------------------------------------------------------------------------
		align 10h

loc_6E424FA0:				; CODE XREF: sub_6E424C90+119j
		lea	eax, [ebp+2Fh]
		mov	[esp+4Ch+var_28], eax
		mov	byte ptr [ebp+2Eh], 0
		jmp	loc_6E424E05
; ---------------------------------------------------------------------------

loc_6E424FB0:				; CODE XREF: sub_6E424C90+16Bj
					; sub_6E424C90+346j
		mov	cl, [esi+edx]
		mov	byte ptr [esp+4Ch+var_2C], cl
		mov	[edi+edx], cl
		jmp	loc_6E424E01
; ---------------------------------------------------------------------------
		align 10h

loc_6E424FC0:				; CODE XREF: sub_6E424C90+160j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	byte ptr [esp+4Ch+var_2C], 1
		jz	loc_6E424E01
		jmp	short loc_6E424FB0
; ---------------------------------------------------------------------------
		align 10h

loc_6E424FE0:				; CODE XREF: sub_6E424C90+153j
		test	edi, 1
		jnz	loc_6E425158

loc_6E424FEC:				; CODE XREF: sub_6E424C90+4DBj
		test	edi, 2
		jnz	loc_6E425142

loc_6E424FF8:				; CODE XREF: sub_6E424C90+4C3j
		mov	ecx, [esp+4Ch+var_2C]
		shr	ecx, 2
		rep movsd
		jmp	loc_6E424DE9
; ---------------------------------------------------------------------------
		align 10h

loc_6E425010:				; CODE XREF: sub_6E424C90+1A7j
		test	dl, 1
		jnz	loc_6E42511D

loc_6E425019:				; CODE XREF: sub_6E424C90+4A0j
		test	edi, 2
		jnz	loc_6E425107

loc_6E425025:				; CODE XREF: sub_6E424C90+488j
		mov	ecx, [esp+4Ch+var_2C]
		shr	ecx, 2
		rep movsd
		jmp	loc_6E424E3D
; ---------------------------------------------------------------------------
		align 10h

loc_6E425040:				; CODE XREF: sub_6E424C90+222j
		lea	eax, [edi+1]
		mov	[esp+4Ch+var_2C], eax
		mov	byte ptr [edi],	1
		jmp	loc_6E424F11
; ---------------------------------------------------------------------------
		align 10h

loc_6E425050:				; CODE XREF: sub_6E424C90+4Ej
		mov	esi, [eax+44h]
		test	esi, esi
		jnz	short loc_6E425065
		mov	ecx, [eax+0E4h]
		test	ecx, ecx
		jz	loc_6E424CE4

loc_6E425065:				; CODE XREF: sub_6E424C90+3C5j
		mov	edx, [eax+94h]
		test	edx, edx
		jnz	loc_6E424CE4
		jmp	loc_6E424CFC
; ---------------------------------------------------------------------------
		align 10h

loc_6E425080:				; CODE XREF: sub_6E424C90+93j
					; sub_6E424C90+A3j
		mov	[esp+4Ch+var_40], 20h
		mov	[esp+4Ch+var_44], edx
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E41A3F0
		jmp	loc_6E424D39
; ---------------------------------------------------------------------------

loc_6E4250A1:				; CODE XREF: sub_6E424C90+183j
		mov	[esp+4Ch+var_3C], 35Dh

loc_6E4250A9:				; CODE XREF: sub_6E424C90+4ADj
					; sub_6E424C90+554j
		mov	[esp+4Ch+var_40], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+4Ch+var_44], 44h
		mov	[esp+4Ch+var_48], 0F8h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error

loc_6E4250CD:				; CODE XREF: sub_6E424C90+66j
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E424CBA
; ---------------------------------------------------------------------------

loc_6E4250D7:				; CODE XREF: sub_6E424C90+E8j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E424D7E
; ---------------------------------------------------------------------------

loc_6E4250EB:				; CODE XREF: sub_6E424C90+DCj
		mov	al, [edx+0C0h]
		mov	[ebp+0Eh], al
		lea	edi, [ebp+0Fh]
		lea	esi, [edx+0C1h]
		mov	eax, 1Fh
		jmp	loc_6E424D72
; ---------------------------------------------------------------------------

loc_6E425107:				; CODE XREF: sub_6E424C90+38Fj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	[esp+4Ch+var_2C], 2
		jmp	loc_6E425025
; ---------------------------------------------------------------------------

loc_6E42511D:				; CODE XREF: sub_6E424C90+383j
		mov	al, [ecx+4]
		mov	[edx], al
		mov	edi, [esp+4Ch+var_28]
		add	edi, 2
		lea	esi, [ecx+5]
		dec	[esp+4Ch+var_2C]
		jmp	loc_6E425019
; ---------------------------------------------------------------------------

loc_6E425135:				; CODE XREF: sub_6E424C90+139j
		mov	[esp+4Ch+var_3C], 354h
		jmp	loc_6E4250A9
; ---------------------------------------------------------------------------

loc_6E425142:				; CODE XREF: sub_6E424C90+362j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	[esp+4Ch+var_2C], 2
		jmp	loc_6E424FF8
; ---------------------------------------------------------------------------

loc_6E425158:				; CODE XREF: sub_6E424C90+356j
		mov	cl, [edx+48h]
		mov	[ebp+2Fh], cl
		lea	edi, [ebp+30h]
		lea	esi, [edx+49h]
		lea	ecx, [eax-1]
		mov	[esp+4Ch+var_2C], ecx
		jmp	loc_6E424FEC
; ---------------------------------------------------------------------------

loc_6E425170:				; CODE XREF: sub_6E424C90+202j
		mov	[esp+4Ch+var_3C], 367h
		mov	[esp+4Ch+var_40], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+4Ch+var_44], 0B5h
		mov	[esp+4Ch+var_48], 0F8h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E424CBA
; ---------------------------------------------------------------------------

loc_6E4251A6:				; CODE XREF: sub_6E424C90+295j
		mov	[esp+4Ch+var_3C], 37Ch
		mov	[esp+4Ch+var_40], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+4Ch+var_44], 0E2h
		mov	[esp+4Ch+var_48], 0F8h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E424CBA
; ---------------------------------------------------------------------------

loc_6E4251DC:				; CODE XREF: sub_6E424C90+2B5j
		mov	[esp+4Ch+var_3C], 383h
		jmp	loc_6E4250A9
sub_6E424C90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4251F0	proc near		; CODE XREF: sub_6E426500+21Dp

Dst		= dword	ptr -2DCh
Src		= dword	ptr -2D8h
Size		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
var_2CC		= dword	ptr -2CCh
var_2C8		= dword	ptr -2C8h
var_2C0		= dword	ptr -2C0h
var_2BC		= dword	ptr -2BCh
var_2B8		= dword	ptr -2B8h
var_2B4		= dword	ptr -2B4h
var_2B0		= dword	ptr -2B0h
var_2A0		= byte ptr -2A0h
var_29F		= byte ptr -29Fh
var_220		= byte ptr -220h
var_21F		= byte ptr -21Fh
var_21E		= byte ptr -21Eh
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2CCh
		mov	ebx, [esp+2DCh+arg_0]
		cmp	dword ptr [ebx+34h], 1180h
		jnz	loc_6E425362
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		mov	[esp+2DCh+var_2C0], eax
		lea	esi, [eax+0Ch]
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		mov	eax, [eax+0Ch]
		test	al, 1
		jz	loc_6E425380
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E425E75
		mov	edi, [eax+6Ch]
		test	edi, edi
		jz	loc_6E425A90

loc_6E42524E:				; CODE XREF: sub_6E4251F0+8CFj
		mov	eax, [ebx+110h]
		mov	edx, eax
		sar	edx, 8
		mov	[esp+2DCh+var_220], dl
		mov	[esp+2DCh+var_21F], al
		mov	[esp+2DCh+Src],	2Eh
		lea	eax, [esp+2DCh+var_21E]
		mov	[esp+2DCh+Dst],	eax
		call	RAND_bytes
		test	eax, eax
		jle	loc_6E4259F8
		mov	eax, [ebx+0C0h]
		mov	dword ptr [eax+10h], 30h
		cmp	dword ptr [ebx], 300h
		jg	loc_6E4256B0

loc_6E42529F:				; CODE XREF: sub_6E4251F0+4C7j
		mov	[esp+2DCh+var_2CC], 1
		mov	[esp+2DCh+var_2D0], edi
		mov	[esp+2DCh+Size], esi
		lea	ebp, [esp+2DCh+var_220]
		mov	[esp+2DCh+Src],	ebp
		mov	[esp+2DCh+Dst],	30h
		call	RSA_public_encrypt
		mov	esi, eax
		test	eax, eax
		jle	loc_6E425D30
		cmp	dword ptr [ebx], 300h
		jg	loc_6E4256C0

loc_6E4252DC:				; CODE XREF: sub_6E4251F0+4E2j
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	edi, [ebx+0C0h]
		mov	[esp+2DCh+var_2D0], 30h
		mov	[esp+2DCh+Size], ebp
		lea	edx, [edi+14h]
		mov	[esp+2DCh+Src],	edx
		mov	[esp+2DCh+Dst],	ebx
		call	eax
		mov	[edi+10h], eax
		mov	[esp+2DCh+Src],	30h
		mov	[esp+2DCh+Dst],	ebp
		call	OPENSSL_cleanse

loc_6E425316:				; CODE XREF: sub_6E4251F0+28Dj
					; sub_6E4251F0+4B6j ...
		mov	[esp+2DCh+var_2C8], esi
		mov	[esp+2DCh+var_2CC], 0
		mov	[esp+2DCh+var_2D0], esi
		mov	[esp+2DCh+Size], 10h
		mov	eax, [esp+2DCh+var_2C0]
		mov	[esp+2DCh+Src],	eax
		mov	[esp+2DCh+Dst],	ebx
		call	sub_6E42EDB0
		mov	dword ptr [ebx+34h], 1181h
		add	esi, 0Ch
		mov	[ebx+44h], esi
		mov	dword ptr [ebx+48h], 0
		mov	[esp+2DCh+Src],	0
		mov	[esp+2DCh+Dst],	ebx
		call	sub_6E42DF60

loc_6E425362:				; CODE XREF: sub_6E4251F0+18j
		mov	[esp+2DCh+Src],	16h
		mov	[esp+2DCh+Dst],	ebx
		call	sub_6E42C4E0

loc_6E425372:				; CODE XREF: sub_6E4251F0+82Dj
		add	esp, 2CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E425380:				; CODE XREF: sub_6E4251F0+39j
		test	al, 0Eh
		jz	loc_6E425490
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E425EE4
		mov	edi, [eax+70h]
		test	edi, edi
		jz	loc_6E425DAD
		mov	[esp+2DCh+Dst],	edi
		call	DHparams_dup
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E425DA0
		mov	[esp+2DCh+Dst],	eax
		call	DH_generate_key
		test	eax, eax
		jz	loc_6E425B84
		mov	eax, [edi+14h]
		mov	[esp+2DCh+Size], ebp
		mov	[esp+2DCh+Src],	eax
		mov	[esp+2DCh+Dst],	esi
		call	DH_compute_key
		mov	ecx, eax
		test	eax, eax
		jle	loc_6E425D23
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	edi, [ebx+0C0h]
		mov	[esp+2DCh+var_2D0], ecx
		mov	[esp+2DCh+var_2BC], ecx
		mov	[esp+2DCh+Size], esi
		lea	edx, [edi+14h]
		mov	[esp+2DCh+Src],	edx
		mov	[esp+2DCh+Dst],	ebx
		call	eax
		mov	[edi+10h], eax
		mov	ecx, [esp+2DCh+var_2BC]
		mov	edx, ecx
		mov	edi, esi
		cmp	ecx, 4
		jnb	loc_6E425920

loc_6E425421:				; CODE XREF: sub_6E4251F0+751j
		test	dl, 2
		jz	short loc_6E42542E
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E42542E:				; CODE XREF: sub_6E4251F0+234j
		and	edx, 1
		jz	short loc_6E425436
		mov	byte ptr [edi],	0

loc_6E425436:				; CODE XREF: sub_6E4251F0+241j
		mov	eax, [ebp+14h]
		mov	[esp+2DCh+Dst],	eax
		call	BN_num_bits
		mov	edx, eax
		add	edx, 7
		js	loc_6E425AD0

loc_6E42544C:				; CODE XREF: sub_6E4251F0+8E3j
		mov	esi, edx
		sar	esi, 3
		sar	edx, 0Bh
		mov	ecx, [esp+2DCh+var_2C0]
		mov	[ecx+0Ch], dl
		mov	eax, esi
		mov	[ecx+0Dh], al
		mov	eax, [ebp+14h]
		lea	edx, [ecx+0Eh]
		mov	[esp+2DCh+Src],	edx
		mov	[esp+2DCh+Dst],	eax
		call	BN_bn2bin
		add	esi, 2
		mov	[esp+2DCh+Dst],	ebp
		call	DH_free
		jmp	loc_6E425316
; ---------------------------------------------------------------------------
		align 10h

loc_6E425490:				; CODE XREF: sub_6E4251F0+192j
		test	al, 0E0h
		jz	loc_6E4256E0
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E425FA6
		mov	edi, [eax+74h]
		test	edi, edi
		jz	loc_6E425B11
		mov	[esp+2DCh+var_2B4], 0

loc_6E4254BF:				; CODE XREF: sub_6E4251F0+941j
		mov	[esp+2DCh+Dst],	edi
		call	EC_KEY_get0_group
		mov	ebp, eax
		mov	[esp+2DCh+var_2BC], eax
		mov	[esp+2DCh+Dst],	edi
		call	EC_KEY_get0_public_key
		mov	edi, eax
		test	ebp, ebp
		jz	loc_6E425D61
		test	eax, eax
		jz	loc_6E425D61
		call	EC_KEY_new
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E425E82
		mov	eax, [esp+2DCh+var_2BC]
		mov	[esp+2DCh+Src],	eax
		mov	[esp+2DCh+Dst],	ebp
		call	EC_KEY_set_group
		test	eax, eax
		jz	loc_6E425C63
		mov	[esp+2DCh+Dst],	ebp
		call	EC_KEY_generate_key
		test	eax, eax
		jz	loc_6E425CA8
		mov	eax, [esp+2DCh+var_2BC]
		mov	[esp+2DCh+Dst],	eax
		call	EC_GROUP_get_degree
		test	eax, eax
		jle	loc_6E425E68
		mov	[esp+2DCh+var_2CC], 0
		mov	[esp+2DCh+var_2D0], ebp
		mov	[esp+2DCh+Size], edi
		add	eax, 7
		sar	eax, 3
		mov	[esp+2DCh+Src],	eax
		mov	[esp+2DCh+Dst],	esi
		call	ECDH_compute_key
		mov	edi, eax
		test	eax, eax
		jle	loc_6E425E5B
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	ecx, [ebx+0C0h]
		mov	[esp+2DCh+var_2D0], edi
		mov	[esp+2DCh+Size], esi
		lea	edx, [ecx+14h]
		mov	[esp+2DCh+var_2B8], ecx
		mov	[esp+2DCh+Src],	edx
		mov	[esp+2DCh+Dst],	ebx
		call	eax
		mov	ecx, [esp+2DCh+var_2B8]
		mov	[ecx+10h], eax
		mov	edx, edi
		mov	edi, esi
		cmp	edx, 4
		jnb	loc_6E425A30

loc_6E425599:				; CODE XREF: sub_6E4251F0+861j
		test	dl, 2
		jnz	loc_6E425960

loc_6E4255A2:				; CODE XREF: sub_6E4251F0+778j
		and	edx, 1
		jnz	loc_6E425950

loc_6E4255AB:				; CODE XREF: sub_6E4251F0+763j
		mov	[esp+2DCh+Dst],	ebp
		call	EC_KEY_get0_public_key
		mov	[esp+2DCh+var_2C8], 0
		mov	[esp+2DCh+var_2CC], 0
		mov	[esp+2DCh+var_2D0], 0
		mov	[esp+2DCh+Size], 4
		mov	[esp+2DCh+Src],	eax
		mov	eax, [esp+2DCh+var_2BC]
		mov	[esp+2DCh+Dst],	eax
		call	EC_POINT_point2oct
		mov	esi, eax
		mov	[esp+2DCh+Size], 57Ah
		mov	[esp+2DCh+Src],	offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+2DCh+Dst],	eax
		call	CRYPTO_malloc
		mov	edi, eax
		mov	[esp+2DCh+var_2B0], eax
		call	BN_CTX_new
		mov	[esp+2DCh+var_2B8], eax
		test	edi, edi
		jz	loc_6E425F69
		test	eax, eax
		jz	loc_6E425DFE
		mov	[esp+2DCh+Dst],	ebp
		call	EC_KEY_get0_public_key
		mov	ecx, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2C8], ecx
		mov	[esp+2DCh+var_2CC], esi
		mov	esi, edi
		mov	[esp+2DCh+var_2D0], edi
		mov	[esp+2DCh+Size], 4
		mov	[esp+2DCh+Src],	eax
		mov	eax, [esp+2DCh+var_2BC]
		mov	[esp+2DCh+Dst],	eax
		call	EC_POINT_point2oct
		mov	ecx, [esp+2DCh+var_2C0]
		mov	[ecx+0Ch], al
		mov	edx, eax
		lea	edi, [ecx+0Dh]
		cmp	eax, 4
		jnb	loc_6E425A60

loc_6E425663:				; CODE XREF: sub_6E4251F0+88Fj
		xor	ecx, ecx
		test	dl, 2
		jnz	loc_6E425980

loc_6E42566E:				; CODE XREF: sub_6E4251F0+79Bj
		and	edx, 1
		jnz	loc_6E425970

loc_6E425677:				; CODE XREF: sub_6E4251F0+78Aj
		lea	esi, [eax+1]
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+Dst],	eax
		call	BN_CTX_free
		mov	eax, [esp+2DCh+var_2B0]
		mov	[esp+2DCh+Dst],	eax
		call	CRYPTO_free
		mov	[esp+2DCh+Dst],	ebp
		call	EC_KEY_free
		mov	eax, [esp+2DCh+var_2B4]
		mov	[esp+2DCh+Dst],	eax
		call	EVP_PKEY_free
		jmp	loc_6E425316
; ---------------------------------------------------------------------------
		align 10h

loc_6E4256B0:				; CODE XREF: sub_6E4251F0+A9j
		mov	eax, [esp+2DCh+var_2C0]
		lea	esi, [eax+0Eh]
		jmp	loc_6E42529F
; ---------------------------------------------------------------------------
		align 10h

loc_6E4256C0:				; CODE XREF: sub_6E4251F0+E6j
		sar	eax, 8
		mov	ecx, [esp+2DCh+var_2C0]
		mov	[ecx+0Ch], al
		mov	eax, esi
		mov	[ecx+0Dh], al
		add	esi, 2
		jmp	loc_6E4252DC
; ---------------------------------------------------------------------------
		align 10h

loc_6E4256E0:				; CODE XREF: sub_6E4251F0+2A2j
		test	ah, 1
		jz	loc_6E425D7B
		mov	eax, [ebx+0DCh]
		test	eax, eax
		jz	loc_6E425EB3
		mov	edx, [ebx+0E4h]
		mov	edx, [edx+14Ch]
		mov	[esp+2DCh+var_2C8], 204h
		lea	ebp, [esp+2DCh+var_220]
		mov	[esp+2DCh+var_2CC], ebp
		mov	[esp+2DCh+var_2D0], 80h
		lea	edi, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+Size], edi
		mov	[esp+2DCh+Src],	edx
		mov	[esp+2DCh+Dst],	ebx
		call	eax
		mov	edx, eax
		cmp	eax, 100h
		ja	loc_6E425AE0
		test	eax, eax
		jz	loc_6E425990
		lea	eax, [eax+eax+4]
		mov	[esp+2DCh+var_2B4], eax
		mov	[esp+2DCh+Size], edx ; Size
		mov	[esp+2DCh+Src],	ebp ; Src
		lea	eax, [ebp+edx+4]
		mov	[esp+2DCh+var_2BC], edx
		mov	[esp+2DCh+Dst],	eax ; Dst
		call	memmove
		mov	edx, [esp+2DCh+var_2BC]
		mov	eax, edx
		shr	eax, 8
		mov	[esp+2DCh+var_2B8], eax
		mov	[esp+2DCh+var_220], al
		mov	[esp+2DCh+var_21F], dl
		lea	esi, [esp+2DCh+var_21E]
		mov	edi, esi
		cmp	edx, 4
		jnb	loc_6E425B68

loc_6E425791:				; CODE XREF: sub_6E4251F0+98Fj
		test	byte ptr [esp+2DCh+var_2BC], 2
		jz	short loc_6E4257A0
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E4257A0:				; CODE XREF: sub_6E4251F0+5A6j
		test	byte ptr [esp+2DCh+var_2BC], 1
		jz	short loc_6E4257AA
		mov	byte ptr [edi],	0

loc_6E4257AA:				; CODE XREF: sub_6E4251F0+5B5j
		lea	eax, [esi+edx]
		mov	cl, byte ptr [esp+2DCh+var_2B8]
		mov	[eax], cl
		mov	[eax+1], dl
		mov	esi, [ebx+0C0h]
		mov	eax, [esi+8Ch]
		test	eax, eax
		jz	short loc_6E4257D4
		mov	[esp+2DCh+Dst],	eax
		call	CRYPTO_free
		mov	esi, [ebx+0C0h]

loc_6E4257D4:				; CODE XREF: sub_6E4251F0+5D4j
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+14Ch]
		mov	[esp+2DCh+Dst],	eax
		call	BUF_strdup
		mov	[esi+8Ch], eax
		mov	eax, [ebx+0E4h]
		mov	ecx, [eax+14Ch]
		test	ecx, ecx
		mov	esi, [ebx+0C0h]
		jz	short loc_6E425812
		mov	edx, [esi+8Ch]
		test	edx, edx
		jz	loc_6E425D6E

loc_6E425812:				; CODE XREF: sub_6E4251F0+612j
		mov	eax, [esi+90h]
		test	eax, eax
		jz	short loc_6E42582A
		mov	[esp+2DCh+Dst],	eax
		call	CRYPTO_free
		mov	esi, [ebx+0C0h]

loc_6E42582A:				; CODE XREF: sub_6E4251F0+62Aj
		lea	eax, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+Dst],	eax
		call	BUF_strdup
		mov	[esi+90h], eax
		mov	esi, [ebx+0C0h]
		mov	eax, [esi+90h]
		test	eax, eax
		jz	loc_6E425C32
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	edi, [esp+2DCh+var_2B4]
		mov	[esp+2DCh+var_2D0], edi
		mov	[esp+2DCh+Size], ebp
		lea	edx, [esi+14h]
		mov	[esp+2DCh+Src],	edx
		mov	[esp+2DCh+Dst],	ebx
		call	eax
		mov	[esi+10h], eax
		lea	eax, [esp+2DCh+var_2A0]

loc_6E425878:				; CODE XREF: sub_6E4251F0+69Dj
		mov	ecx, [eax]
		add	eax, 4
		lea	edx, [ecx-1010101h]
		not	ecx
		and	edx, ecx
		and	edx, 80808080h
		jz	short loc_6E425878
		test	edx, 8080h
		jnz	short loc_6E42589D
		shr	edx, 10h
		add	eax, 2

loc_6E42589D:				; CODE XREF: sub_6E4251F0+6A5j
		add	dl, dl
		sbb	eax, 3
		lea	edi, [esp+2DCh+var_2A0]
		sub	eax, edi
		mov	edx, eax
		sar	edx, 8
		mov	edi, [esp+2DCh+var_2C0]
		mov	[edi+0Ch], dl
		mov	[edi+0Dh], al
		mov	[esp+2DCh+var_2BC], eax
		add	edi, 0Eh
		lea	esi, [esp+2DCh+var_2A0]
		cmp	eax, 4
		jnb	loc_6E425C0C

loc_6E4258CB:				; CODE XREF: sub_6E4251F0+A3Dj
		xor	edx, edx
		test	byte ptr [esp+2DCh+var_2BC], 2
		jz	short loc_6E4258DF
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E4258DF:				; CODE XREF: sub_6E4251F0+6E2j
		test	byte ptr [esp+2DCh+var_2BC], 1
		jz	short loc_6E4258F0
		mov	cl, [esi+edx]
		mov	byte ptr [esp+2DCh+var_2BC], cl
		mov	[edi+edx], cl

loc_6E4258F0:				; CODE XREF: sub_6E4251F0+6F4j
		lea	esi, [eax+2]
		mov	[esp+2DCh+Src],	80h
		lea	eax, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+Dst],	eax
		call	OPENSSL_cleanse
		mov	[esp+2DCh+Src],	204h
		mov	[esp+2DCh+Dst],	ebp
		call	OPENSSL_cleanse
		jmp	loc_6E425316
; ---------------------------------------------------------------------------
		align 10h

loc_6E425920:				; CODE XREF: sub_6E4251F0+22Bj
		test	esi, 1
		jnz	loc_6E425BCD

loc_6E42592C:				; CODE XREF: sub_6E4251F0+9E6j
		test	edi, 2
		jnz	loc_6E425BBD

loc_6E425938:				; CODE XREF: sub_6E4251F0+9D8j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E425421
; ---------------------------------------------------------------------------
		align 10h

loc_6E425950:				; CODE XREF: sub_6E4251F0+3B5j
		mov	byte ptr [edi],	0
		jmp	loc_6E4255AB
; ---------------------------------------------------------------------------
		align 10h

loc_6E425960:				; CODE XREF: sub_6E4251F0+3ACj
		mov	word ptr [edi],	0
		add	edi, 2
		jmp	loc_6E4255A2
; ---------------------------------------------------------------------------
		align 10h

loc_6E425970:				; CODE XREF: sub_6E4251F0+481j
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+2DCh+var_2BC], dl
		mov	[edi+ecx], dl
		jmp	loc_6E425677
; ---------------------------------------------------------------------------
		align 10h

loc_6E425980:				; CODE XREF: sub_6E4251F0+478j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	loc_6E42566E
; ---------------------------------------------------------------------------

loc_6E425990:				; CODE XREF: sub_6E4251F0+54Ej
		mov	[esp+2DCh+var_2CC], 5B4h
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 0DFh
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error

loc_6E4259BC:				; CODE XREF: sub_6E4251F0+91Cj
					; sub_6E4251F0+A6Ej
		mov	[esp+2DCh+Src],	80h
		lea	eax, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+Dst],	eax
		call	OPENSSL_cleanse
		mov	[esp+2DCh+Src],	204h
		mov	[esp+2DCh+Dst],	ebp
		call	OPENSSL_cleanse
		mov	[esp+2DCh+Size], 28h
		mov	[esp+2DCh+Src],	2
		mov	[esp+2DCh+Dst],	ebx
		call	sub_6E4151B0

loc_6E4259F8:				; CODE XREF: sub_6E4251F0+90j
					; sub_6E4251F0+A17j ...
		mov	[esp+2DCh+var_2B4], 0

loc_6E425A00:				; CODE XREF: sub_6E4251F0+973j
					; sub_6E4251F0+9C8j ...
		mov	[esp+2DCh+Dst],	0
		call	BN_CTX_free

loc_6E425A0C:				; CODE XREF: sub_6E4251F0+AB3j
		mov	eax, [esp+2DCh+var_2B4]
		mov	[esp+2DCh+Dst],	eax
		call	EVP_PKEY_free
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E425372
; ---------------------------------------------------------------------------
		align 10h

loc_6E425A30:				; CODE XREF: sub_6E4251F0+3A3j
		test	esi, 1
		jnz	loc_6E425CE6

loc_6E425A3C:				; CODE XREF: sub_6E4251F0+AFBj
		test	edi, 2
		jnz	loc_6E425CD6

loc_6E425A48:				; CODE XREF: sub_6E4251F0+AF1j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E425599
; ---------------------------------------------------------------------------
		align 10h

loc_6E425A60:				; CODE XREF: sub_6E4251F0+46Dj
		test	edi, 1
		jnz	loc_6E425D04

loc_6E425A6C:				; CODE XREF: sub_6E4251F0+B2Ej
		test	edi, 2
		jnz	loc_6E425CF0

loc_6E425A78:				; CODE XREF: sub_6E4251F0+B0Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E425663
; ---------------------------------------------------------------------------
		align 10h

loc_6E425A90:				; CODE XREF: sub_6E4251F0+58j
		mov	eax, [eax+0Ch]
		mov	[esp+2DCh+Dst],	eax
		call	X509_get_pubkey
		test	eax, eax
		jz	loc_6E425BDB
		cmp	dword ptr [eax], 6
		jnz	loc_6E425BDB
		mov	edi, [eax+14h]
		test	edi, edi
		jz	loc_6E425BDB
		mov	[esp+2DCh+Dst],	eax
		call	EVP_PKEY_free
		jmp	loc_6E42524E
; ---------------------------------------------------------------------------
		align 10h

loc_6E425AD0:				; CODE XREF: sub_6E4251F0+256j
		lea	edx, [eax+0Eh]
		jmp	loc_6E42544C
; ---------------------------------------------------------------------------
		align 10h

loc_6E425AE0:				; CODE XREF: sub_6E4251F0+546j
		mov	[esp+2DCh+var_2CC], 5B0h
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 44h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E4259BC
; ---------------------------------------------------------------------------

loc_6E425B11:				; CODE XREF: sub_6E4251F0+2C1j
		mov	eax, [eax+48h]
		mov	[esp+2DCh+Dst],	eax
		call	X509_get_pubkey
		mov	[esp+2DCh+var_2B4], eax
		test	eax, eax
		jz	short loc_6E425B37
		cmp	dword ptr [eax], 198h
		jnz	short loc_6E425B37
		mov	edi, [eax+14h]
		test	edi, edi
		jnz	loc_6E4254BF

loc_6E425B37:				; CODE XREF: sub_6E4251F0+932j
					; sub_6E4251F0+93Aj
		mov	[esp+2DCh+var_2CC], 51Ch

loc_6E425B3F:				; CODE XREF: sub_6E4251F0+B79j
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 44h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E425A00
; ---------------------------------------------------------------------------

loc_6E425B68:				; CODE XREF: sub_6E4251F0+59Bj
		test	esi, 2
		jnz	loc_6E425E47

loc_6E425B74:				; CODE XREF: sub_6E4251F0+C66j
		mov	ecx, [esp+2DCh+var_2BC]
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E425791
; ---------------------------------------------------------------------------

loc_6E425B84:				; CODE XREF: sub_6E4251F0+1D3j
		mov	[esp+2DCh+var_2CC], 4CBh

loc_6E425B8C:				; CODE XREF: sub_6E4251F0+B3Bj
					; sub_6E4251F0+BB8j
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 5
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		mov	[esp+2DCh+var_2B4], 0
		jmp	loc_6E425A00
; ---------------------------------------------------------------------------

loc_6E425BBD:				; CODE XREF: sub_6E4251F0+742j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E425938
; ---------------------------------------------------------------------------

loc_6E425BCD:				; CODE XREF: sub_6E4251F0+736j
		mov	byte ptr [esi],	0
		lea	edi, [esi+1]
		lea	edx, [ecx-1]
		jmp	loc_6E42592C
; ---------------------------------------------------------------------------

loc_6E425BDB:				; CODE XREF: sub_6E4251F0+8ADj
					; sub_6E4251F0+8B6j ...
		mov	[esp+2DCh+var_2CC], 402h

loc_6E425BE3:				; CODE XREF: sub_6E4251F0+BABj
					; sub_6E4251F0+C8Dj
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 44h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E4259F8
; ---------------------------------------------------------------------------

loc_6E425C0C:				; CODE XREF: sub_6E4251F0+6D5j
		test	edi, 1
		jnz	loc_6E425F4B

loc_6E425C18:				; CODE XREF: sub_6E4251F0+D74j
		test	edi, 2
		jnz	loc_6E425F35

loc_6E425C24:				; CODE XREF: sub_6E4251F0+D56j
		mov	ecx, [esp+2DCh+var_2BC]
		shr	ecx, 2
		rep movsd
		jmp	loc_6E4258CB
; ---------------------------------------------------------------------------

loc_6E425C32:				; CODE XREF: sub_6E4251F0+65Aj
		mov	[esp+2DCh+var_2CC], 5D1h

loc_6E425C3A:				; CODE XREF: sub_6E4251F0+B86j
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 41h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E4259BC
; ---------------------------------------------------------------------------

loc_6E425C63:				; CODE XREF: sub_6E4251F0+318j
		mov	[esp+2DCh+var_2CC], 533h
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 10h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error

loc_6E425C8F:				; CODE XREF: sub_6E4251F0+AE4j
		mov	[esp+2DCh+Dst],	0
		call	BN_CTX_free

loc_6E425C9B:				; CODE XREF: sub_6E4251F0+C52j
					; sub_6E4251F0+DB1j
		mov	[esp+2DCh+Dst],	ebp
		call	EC_KEY_free
		jmp	loc_6E425A0C
; ---------------------------------------------------------------------------

loc_6E425CA8:				; CODE XREF: sub_6E4251F0+328j
		mov	[esp+2DCh+var_2CC], 54Ch

loc_6E425CB0:				; CODE XREF: sub_6E4251F0+C73j
					; sub_6E4251F0+C80j
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 2Bh
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		jmp	short loc_6E425C8F
; ---------------------------------------------------------------------------

loc_6E425CD6:				; CODE XREF: sub_6E4251F0+852j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E425A48
; ---------------------------------------------------------------------------

loc_6E425CE6:				; CODE XREF: sub_6E4251F0+846j
		mov	byte ptr [esi],	0
		inc	edi
		dec	edx
		jmp	loc_6E425A3C
; ---------------------------------------------------------------------------

loc_6E425CF0:				; CODE XREF: sub_6E4251F0+882j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E425A78
; ---------------------------------------------------------------------------

loc_6E425D04:				; CODE XREF: sub_6E4251F0+876j
		mov	edx, [esp+2DCh+var_2B0]
		mov	cl, [edx]
		mov	byte ptr [esp+2DCh+var_2BC], cl
		mov	edi, [esp+2DCh+var_2C0]
		mov	[edi+0Dh], cl
		add	edi, 0Eh
		lea	esi, [edx+1]
		lea	edx, [eax-1]
		jmp	loc_6E425A6C
; ---------------------------------------------------------------------------

loc_6E425D23:				; CODE XREF: sub_6E4251F0+1F0j
		mov	[esp+2DCh+var_2CC], 4D7h
		jmp	loc_6E425B8C
; ---------------------------------------------------------------------------

loc_6E425D30:				; CODE XREF: sub_6E4251F0+DAj
		mov	[esp+2DCh+var_2CC], 41Eh
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 77h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E4259F8
; ---------------------------------------------------------------------------

loc_6E425D61:				; CODE XREF: sub_6E4251F0+2E9j
					; sub_6E4251F0+2F1j
		mov	[esp+2DCh+var_2CC], 528h
		jmp	loc_6E425B3F
; ---------------------------------------------------------------------------

loc_6E425D6E:				; CODE XREF: sub_6E4251F0+61Cj
		mov	[esp+2DCh+var_2CC], 5C8h
		jmp	loc_6E425C3A
; ---------------------------------------------------------------------------

loc_6E425D7B:				; CODE XREF: sub_6E4251F0+4F3j
		mov	[esp+2DCh+Size], 28h
		mov	[esp+2DCh+Src],	2
		mov	[esp+2DCh+Dst],	ebx
		call	sub_6E4151B0
		mov	[esp+2DCh+var_2CC], 5ECh
		jmp	loc_6E425BE3
; ---------------------------------------------------------------------------

loc_6E425DA0:				; CODE XREF: sub_6E4251F0+1C3j
		mov	[esp+2DCh+var_2CC], 4C7h
		jmp	loc_6E425B8C
; ---------------------------------------------------------------------------

loc_6E425DAD:				; CODE XREF: sub_6E4251F0+1B1j
		mov	[esp+2DCh+Size], 28h
		mov	[esp+2DCh+Src],	2
		mov	[esp+2DCh+Dst],	ebx
		call	sub_6E4151B0
		mov	[esp+2DCh+var_2CC], 4C1h
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 0EEh
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		mov	[esp+2DCh+var_2B4], 0
		jmp	loc_6E425A00
; ---------------------------------------------------------------------------

loc_6E425DFE:				; CODE XREF: sub_6E4251F0+426j
		mov	[esp+2DCh+var_2CC], 57Eh
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 41h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		mov	[esp+2DCh+Dst],	0
		call	BN_CTX_free
		mov	eax, [esp+2DCh+var_2B0]
		mov	[esp+2DCh+Dst],	eax
		call	CRYPTO_free
		jmp	loc_6E425C9B
; ---------------------------------------------------------------------------

loc_6E425E47:				; CODE XREF: sub_6E4251F0+97Ej
		mov	word ptr [esi],	0
		lea	edi, [esi+2]
		lea	eax, [edx-2]
		mov	[esp+2DCh+var_2BC], eax
		jmp	loc_6E425B74
; ---------------------------------------------------------------------------

loc_6E425E5B:				; CODE XREF: sub_6E4251F0+368j
		mov	[esp+2DCh+var_2CC], 55Eh
		jmp	loc_6E425CB0
; ---------------------------------------------------------------------------

loc_6E425E68:				; CODE XREF: sub_6E4251F0+33Cj
		mov	[esp+2DCh+var_2CC], 558h
		jmp	loc_6E425CB0
; ---------------------------------------------------------------------------

loc_6E425E75:				; CODE XREF: sub_6E4251F0+4Dj
		mov	[esp+2DCh+var_2CC], 3F4h
		jmp	loc_6E425BE3
; ---------------------------------------------------------------------------

loc_6E425E82:				; CODE XREF: sub_6E4251F0+300j
		mov	[esp+2DCh+var_2CC], 52Eh
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 41h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E425A00
; ---------------------------------------------------------------------------

loc_6E425EB3:				; CODE XREF: sub_6E4251F0+501j
		mov	[esp+2DCh+var_2CC], 5A6h
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 0E0h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		jmp	loc_6E4259F8
; ---------------------------------------------------------------------------

loc_6E425EE4:				; CODE XREF: sub_6E4251F0+1A6j
		mov	[esp+2DCh+Size], 0Ah
		mov	[esp+2DCh+Src],	2
		mov	[esp+2DCh+Dst],	ebx
		call	sub_6E4151B0
		mov	[esp+2DCh+var_2CC], 4B7h

loc_6E425F04:				; CODE XREF: sub_6E4251F0+DD6j
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 0F4h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		mov	[esp+2DCh+var_2B4], 0
		jmp	loc_6E425A00
; ---------------------------------------------------------------------------

loc_6E425F35:				; CODE XREF: sub_6E4251F0+A2Ej
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	[esp+2DCh+var_2BC], 2
		jmp	loc_6E425C24
; ---------------------------------------------------------------------------

loc_6E425F4B:				; CODE XREF: sub_6E4251F0+A22j
		mov	cl, [esp+2DCh+var_2A0]
		mov	edi, [esp+2DCh+var_2C0]
		mov	[edi+0Eh], cl
		add	edi, 0Fh
		lea	esi, [esp+2DCh+var_29F]
		lea	ecx, [eax-1]
		mov	[esp+2DCh+var_2BC], ecx
		jmp	loc_6E425C18
; ---------------------------------------------------------------------------

loc_6E425F69:				; CODE XREF: sub_6E4251F0+41Ej
		mov	[esp+2DCh+var_2CC], 57Eh
		mov	[esp+2DCh+var_2D0], offset aD1_clnt_c ;	"d1_clnt.c"
		mov	[esp+2DCh+Size], 41h
		mov	[esp+2DCh+Src],	106h
		mov	[esp+2DCh+Dst],	14h
		call	ERR_put_error
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+Dst],	eax
		call	BN_CTX_free
		jmp	loc_6E425C9B
; ---------------------------------------------------------------------------

loc_6E425FA6:				; CODE XREF: sub_6E4251F0+2B6j
		mov	[esp+2DCh+Size], 0Ah
		mov	[esp+2DCh+Src],	2
		mov	[esp+2DCh+Dst],	ebx
		call	sub_6E4151B0
		mov	[esp+2DCh+var_2CC], 4F9h
		jmp	loc_6E425F04
sub_6E4251F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E425FD0	proc near		; CODE XREF: sub_6E426500+A4Ep

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= byte ptr -40h
var_30		= byte ptr -30h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_48], 0
		cmp	dword ptr [ebx+34h], 1190h
		jz	short loc_6E426010

loc_6E425FEC:				; CODE XREF: sub_6E425FD0+11Dj
		mov	[esp+6Ch+var_68], 16h
		mov	[esp+6Ch+var_6C], ebx
		call	sub_6E42C4E0

loc_6E425FFC:				; CODE XREF: sub_6E425FD0+161j
					; sub_6E425FD0+244j ...
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E426010:				; CODE XREF: sub_6E425FD0+1Aj
		mov	eax, [ebx+3Ch]
		mov	esi, [eax+4]
		mov	eax, [ebx+98h]
		mov	eax, [eax]
		mov	edi, [eax+4]
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+1Ch]
		lea	ebp, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_64], ebp
		mov	[esp+6Ch+var_68], 40h
		mov	[esp+6Ch+var_6C], ebx
		call	eax
		mov	eax, [edi]
		cmp	eax, 6
		jz	loc_6E426140
		cmp	eax, 74h
		jz	loc_6E4261B0
		cmp	eax, 198h
		jnz	loc_6E426100
		mov	edx, [edi+14h]
		mov	eax, [edi+4]
		mov	[esp+6Ch+var_58], edx
		lea	edx, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_5C], edx
		lea	edx, [esi+0Eh]
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_64], 14h
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], eax
		call	ECDSA_sign
		test	eax, eax
		jz	loc_6E426219

loc_6E426093:				; CODE XREF: sub_6E425FD0+20Fj
		mov	eax, [esp+6Ch+var_44]
		mov	edx, eax
		sar	edx, 8
		mov	[esi+0Ch], dl
		mov	[esi+0Dh], al
		lea	edi, [eax+2]

loc_6E4260A5:				; CODE XREF: sub_6E425FD0+1DAj
		mov	[esp+6Ch+var_58], edi
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], edi
		mov	[esp+6Ch+var_64], 0Fh
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], ebx
		call	sub_6E42EDB0
		add	edi, 0Ch
		mov	[ebx+44h], edi
		mov	dword ptr [ebx+48h], 0
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	sub_6E42DF60
		mov	dword ptr [ebx+34h], 1191h
		jmp	loc_6E425FEC
; ---------------------------------------------------------------------------
		align 10h

loc_6E426100:				; CODE XREF: sub_6E425FD0+88j
		mov	[esp+6Ch+var_5C], 64Eh
		mov	[esp+6Ch+var_60], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+6Ch+var_64], 44h
		mov	[esp+6Ch+var_68], 107h
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E425FFC
; ---------------------------------------------------------------------------
		align 10h

loc_6E426140:				; CODE XREF: sub_6E425FD0+74j
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+1Ch]
		lea	ecx, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_64], ecx
		mov	[esp+6Ch+var_68], 4
		mov	[esp+6Ch+var_6C], ebx
		call	eax
		mov	eax, [edi+14h]
		mov	[esp+6Ch+var_58], eax
		lea	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_5C], eax
		lea	eax, [esi+0Eh]
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 24h
		lea	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], 72h
		call	RSA_sign
		test	eax, eax
		jle	loc_6E42624F
		mov	eax, [esp+6Ch+var_48]
		mov	edx, eax
		shr	edx, 8
		mov	[esi+0Ch], dl
		mov	[esi+0Dh], al
		lea	edi, [eax+2]
		jmp	loc_6E4260A5
; ---------------------------------------------------------------------------
		align 10h

loc_6E4261B0:				; CODE XREF: sub_6E425FD0+7Dj
		mov	edx, [edi+14h]
		mov	eax, [edi+4]
		mov	[esp+6Ch+var_58], edx
		lea	edx, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_5C], edx
		lea	edx, [esi+0Eh]
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_64], 14h
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], eax
		call	DSA_sign
		test	eax, eax
		jnz	loc_6E426093
		mov	[esp+6Ch+var_5C], 639h
		mov	[esp+6Ch+var_60], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+6Ch+var_64], 0Ah
		mov	[esp+6Ch+var_68], 107h
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error
		or	eax, 0FFFFFFFFh
		jmp	loc_6E425FFC
; ---------------------------------------------------------------------------

loc_6E426219:				; CODE XREF: sub_6E425FD0+BDj
		mov	[esp+6Ch+var_5C], 646h
		mov	[esp+6Ch+var_60], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+6Ch+var_64], 2Ah
		mov	[esp+6Ch+var_68], 107h
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E425FFC
; ---------------------------------------------------------------------------

loc_6E42624F:				; CODE XREF: sub_6E425FD0+1C2j
		mov	[esp+6Ch+var_5C], 62Ch
		mov	[esp+6Ch+var_60], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+6Ch+var_64], 4
		mov	[esp+6Ch+var_68], 107h
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error
		or	eax, 0FFFFFFFFh
		jmp	loc_6E425FFC
sub_6E425FD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E426290	proc near		; CODE XREF: sub_6E426500+A0Ep

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 34h
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_14], 0
		mov	[esp+3Ch+var_10], 0
		mov	eax, [ebx+34h]
		cmp	eax, 1170h
		jz	short loc_6E4262E0
		cmp	eax, 1171h
		jz	loc_6E426357
		cmp	eax, 1172h
		jz	short loc_6E4262F9

loc_6E4262C5:				; CODE XREF: sub_6E426290+B8j
		mov	[esp+3Ch+var_38], 16h
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E42C4E0

loc_6E4262D5:				; CODE XREF: sub_6E426290+24Bj
					; sub_6E426290+25Cj
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4262E0:				; CODE XREF: sub_6E426290+21j
		mov	eax, [ebx+98h]
		test	eax, eax
		jz	short loc_6E426350
		mov	eax, [eax]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	short loc_6E426350
		mov	edx, [eax+4]
		test	edx, edx
		jz	short loc_6E426350

loc_6E4262F9:				; CODE XREF: sub_6E426290+33j
					; sub_6E426290+11Bj
		mov	eax, [ebx+58h]

loc_6E4262FC:				; CODE XREF: sub_6E426290+13Aj
		mov	dword ptr [ebx+34h], 1173h
		cmp	dword ptr [eax+358h], 2
		jz	loc_6E426420
		mov	eax, [ebx+98h]
		mov	eax, [eax]
		mov	eax, [eax]

loc_6E42631A:				; CODE XREF: sub_6E426290+192j
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E42D760
		test	eax, eax
		jz	loc_6E4263D0
		mov	[ebx+44h], eax
		mov	dword ptr [ebx+48h], 0
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E42DF60
		jmp	loc_6E4262C5
; ---------------------------------------------------------------------------
		align 10h

loc_6E426350:				; CODE XREF: sub_6E426290+58j
					; sub_6E426290+60j ...
		mov	dword ptr [ebx+34h], 1171h

loc_6E426357:				; CODE XREF: sub_6E426290+28j
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_34], eax
		lea	eax, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E40E2F0
		mov	esi, eax
		test	eax, eax
		js	loc_6E4264E0
		mov	dword ptr [ebx+18h], 1
		cmp	eax, 1
		jz	loc_6E426430

loc_6E426389:				; CODE XREF: sub_6E426290+1C9j
					; sub_6E426290+1FEj ...
		mov	eax, [esp+3Ch+var_14]
		test	eax, eax
		jz	short loc_6E426399
		mov	[esp+3Ch+var_3C], eax
		call	X509_free

loc_6E426399:				; CODE XREF: sub_6E426290+FFj
		mov	eax, [esp+3Ch+var_10]
		test	eax, eax
		jz	short loc_6E4263A9
		mov	[esp+3Ch+var_3C], eax
		call	EVP_PKEY_free

loc_6E4263A9:				; CODE XREF: sub_6E426290+10Fj
		test	esi, esi
		jnz	loc_6E4262F9
		cmp	dword ptr [ebx], 300h
		mov	eax, [ebx+58h]
		jz	loc_6E4264B4
		mov	dword ptr [eax+358h], 2
		jmp	loc_6E4262FC
; ---------------------------------------------------------------------------
		align 10h

loc_6E4263D0:				; CODE XREF: sub_6E426290+98j
		mov	[esp+3Ch+var_2C], 6A3h
		mov	[esp+3Ch+var_30], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+3Ch+var_34], 44h
		mov	[esp+3Ch+var_38], 105h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	[esp+3Ch+var_34], 50h
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4151B0
		xor	eax, eax
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E426420:				; CODE XREF: sub_6E426290+7Aj
		xor	eax, eax
		jmp	loc_6E42631A
; ---------------------------------------------------------------------------
		align 10h

loc_6E426430:				; CODE XREF: sub_6E426290+F3j
		mov	eax, [esp+3Ch+var_10]
		test	eax, eax
		jz	short loc_6E426460
		mov	eax, [esp+3Ch+var_14]
		test	eax, eax
		jz	short loc_6E426460
		mov	dword ptr [ebx+34h], 1171h
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_use_certificate
		test	eax, eax
		jnz	short loc_6E426493
		xor	esi, esi
		jmp	loc_6E426389
; ---------------------------------------------------------------------------
		align 10h

loc_6E426460:				; CODE XREF: sub_6E426290+1A6j
					; sub_6E426290+1AEj
		mov	[esp+3Ch+var_2C], 688h
		mov	[esp+3Ch+var_30], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+3Ch+var_34], 6Ah
		mov	[esp+3Ch+var_38], 105h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E426389
; ---------------------------------------------------------------------------

loc_6E426493:				; CODE XREF: sub_6E426290+1C5j
		mov	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_use_PrivateKey
		test	eax, eax
		setnz	al
		and	eax, 0FFh
		mov	esi, eax
		jmp	loc_6E426389
; ---------------------------------------------------------------------------

loc_6E4264B4:				; CODE XREF: sub_6E426290+12Aj
		mov	dword ptr [eax+358h], 0
		mov	[esp+3Ch+var_34], 29h
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E4151B0
		mov	eax, 1
		jmp	loc_6E4262D5
; ---------------------------------------------------------------------------

loc_6E4264E0:				; CODE XREF: sub_6E426290+E3j
		mov	dword ptr [ebx+18h], 4
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4262D5
sub_6E426290	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E426500
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E426500	proc near		; CODE XREF: .text:6E4264F1j
					; DATA XREF: sub_6E426500:loc_6E4267CDo ...

Time		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [ebp+arg_0]
		mov	[esp+58h+Time],	0 ; Time
		call	time
		mov	[ebp+var_20], eax
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_54], 4
		lea	eax, [ebp+var_20]
		mov	[esp+58h+Time],	eax
		call	RAND_add
		call	ERR_clear_error
		mov	[esp+58h+Time],	0 ; dwErrCode
		call	ds:SetLastError
		push	eax
		mov	eax, [ebx+0D0h]
		mov	[ebp+var_2C], eax
		test	eax, eax
		jz	loc_6E427120

loc_6E426562:				; CODE XREF: sub_6E426500+C2Fj
		inc	dword ptr [ebx+1Ch]
		mov	[esp+58h+Time],	ebx
		call	SSL_state
		test	ah, 30h
		jz	loc_6E426690
		mov	[esp+58h+Time],	ebx
		call	SSL_state
		test	ah, 40h
		jnz	loc_6E426690
		mov	eax, [ebx+188h]
		test	eax, eax
		jnz	loc_6E4266A6
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4265A0:				; CODE XREF: sub_6E426500+1A0j
					; sub_6E426500+1BEj ...
		mov	edx, [ebx+34h]

loc_6E4265A3:				; CODE XREF: sub_6E426500+6D0j
					; sub_6E426500+6F6j
		cmp	edx, 1173h
		jg	loc_6E4266D0
		cmp	edx, 1170h
		jge	loc_6E426F00
		cmp	edx, 1127h
		jg	loc_6E426840
		cmp	edx, 1126h
		jge	loc_6E426DF0
		cmp	edx, 1100h
		jz	loc_6E426DA0
		jle	loc_6E426760
		cmp	edx, 1111h
		jz	short loc_6E426614
		jg	loc_6E426C00
		cmp	edx, 1110h
		jnz	loc_6E426EC0
		mov	[ebp+var_30], edx
		mov	dword ptr [ebx+30h], 0
		mov	[esp+58h+Time],	ebx
		call	sub_6E411760
		mov	edx, [ebp+var_30]

loc_6E426614:				; CODE XREF: sub_6E426500+EBj
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		mov	[esp+58h+Time],	ebx
		call	sub_6E424C90
		test	eax, eax
		jle	loc_6E42680D
		mov	eax, [ebx+5Ch]
		mov	edi, [eax]
		test	edi, edi
		mov	edx, [ebp+var_30]
		jz	loc_6E426D60
		mov	dword ptr [ebx+34h], 1100h
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+350h], 1120h

loc_6E426653:				; CODE XREF: sub_6E426500+867j
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+14h]
		mov	ecx, [ebx+10h]
		cmp	eax, ecx
		jz	loc_6E426FE0
		mov	[ebp+var_30], edx
		mov	[esp+58h+var_54], ecx
		mov	[esp+58h+Time],	eax
		call	BIO_push
		mov	[ebx+10h], eax
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_30]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E426690:				; CODE XREF: sub_6E426500+70j
					; sub_6E426500+81j
		mov	[esp+58h+Time],	ebx
		call	SSL_clear
		mov	eax, [ebx+188h]
		test	eax, eax
		jz	loc_6E4265A0

loc_6E4266A6:				; CODE XREF: sub_6E426500+8Fj
		mov	[esp+58h+Time],	ebx
		call	sub_6E427CA0
		mov	dword ptr [ebx+188h], 0
		inc	dword ptr [ebx+18Ch]
		jmp	loc_6E4265A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4266D0:				; CODE XREF: sub_6E426500+A9j
		cmp	edx, 11D1h
		jg	loc_6E4268D0
		cmp	edx, 11D0h
		jge	loc_6E426F80
		cmp	edx, 1191h
		jg	loc_6E426930
		cmp	edx, 1190h
		jge	loc_6E426F40
		lea	eax, [edx-1180h]
		cmp	eax, 1
		ja	loc_6E426EC0
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		mov	[esp+58h+Time],	ebx
		call	sub_6E4251F0
		test	eax, eax
		jle	loc_6E42680D
		mov	eax, [ebx+58h]
		cmp	dword ptr [eax+358h], 1
		mov	edx, [ebp+var_30]
		jz	loc_6E4271D0
		mov	ecx, 11A0h

loc_6E426742:				; CODE XREF: sub_6E426500+CD5j
		mov	[ebx+34h], ecx
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		jmp	short loc_6E426760
; ---------------------------------------------------------------------------
		align 10h

loc_6E426760:				; CODE XREF: sub_6E426500+DFj
					; sub_6E426500+251j
		cmp	edx, 1000h
		jz	loc_6E426A96
		cmp	edx, 1003h
		jz	loc_6E426A96
		cmp	edx, 3
		jnz	loc_6E426EC0
		mov	[esp+58h+Time],	ebx
		call	sub_6E4114A0
		mov	eax, [ebx+58h]
		test	byte ptr [eax],	4
		jz	loc_6E427180

loc_6E426795:				; CODE XREF: sub_6E426500+C88j
		mov	dword ptr [ebx+44h], 0
		mov	dword ptr [ebx+190h], 0
		mov	dword ptr [ebx+28h], 0
		mov	[esp+58h+var_54], 1
		mov	[esp+58h+Time],	ebx
		call	sub_6E4350C0
		mov	edx, [ebx+6Ch]
		test	edx, edx
		mov	eax, [ebx+0E4h]
		jz	short loc_6E4267CD
		inc	dword ptr [eax+58h]

loc_6E4267CD:				; CODE XREF: sub_6E426500+2C8j
		mov	dword ptr [ebx+20h], offset sub_6E426500
		inc	dword ptr [eax+3Ch]
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	short loc_6E4267F3
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 20h
		mov	[esp+58h+Time],	ebx
		call	eax

loc_6E4267F3:				; CODE XREF: sub_6E426500+2DCj
		mov	eax, [ebx+5Ch]
		mov	word ptr [eax+228h], 0
		mov	word ptr [eax+226h], 0
		mov	eax, 1

loc_6E42680D:				; CODE XREF: sub_6E426500+129j
					; sub_6E426500+224j ...
		dec	dword ptr [ebx+1Ch]

loc_6E426810:				; CODE XREF: sub_6E426500+ED6j
		mov	edi, [ebp+var_2C]
		test	edi, edi
		jz	short loc_6E42682E
		mov	[esp+58h+var_50], eax
		mov	[ebp+var_2C], eax
		mov	[esp+58h+var_54], 1002h
		mov	[esp+58h+Time],	ebx
		call	edi
		mov	eax, [ebp+var_2C]

loc_6E42682E:				; CODE XREF: sub_6E426500+315j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E426840:				; CODE XREF: sub_6E426500+C1j
		cmp	edx, 1141h
		jg	loc_6E4269F0
		cmp	edx, 1140h
		jge	short loc_6E426889
		lea	eax, [edx-1130h]
		cmp	eax, 1
		ja	loc_6E426EC0
		mov	eax, [ebx+58h]
		mov	eax, [eax+344h]
		test	byte ptr [eax+10h], 4
		jz	loc_6E426FF0

loc_6E426876:				; CODE XREF: sub_6E426500+AF4j
		mov	dword ptr [ebx+34h], 1140h
		mov	dword ptr [ebx+44h], 0
		mov	edx, 1140h

loc_6E426889:				; CODE XREF: sub_6E426500+352j
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E408AD0
		test	eax, eax
		jle	loc_6E42680D
		mov	dword ptr [ebx+34h], 1150h
		mov	dword ptr [ebx+44h], 0
		mov	[esp+58h+Time],	ebx
		call	sub_6E40CC50
		test	eax, eax
		jz	loc_6E427207

loc_6E4268BA:				; CODE XREF: sub_6E426500+AD2j
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_30]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4268D0:				; CODE XREF: sub_6E426500+1D6j
		cmp	edx, 11F1h
		jg	loc_6E426A60
		cmp	edx, 11F0h
		jge	loc_6E426E90
		lea	eax, [edx-11E0h]
		cmp	eax, 1
		ja	loc_6E426EC0
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E40A990
		test	eax, eax
		jle	loc_6E42680D
		mov	dword ptr [ebx+34h], 11D0h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_30]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E426930:				; CODE XREF: sub_6E426500+1EEj
		cmp	edx, 11A0h
		jl	loc_6E426EC0
		cmp	edx, 11A1h
		jle	loc_6E426C60
		lea	eax, [edx-11B0h]
		cmp	eax, 1
		ja	loc_6E426EC0
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	loc_6E427190

loc_6E426962:				; CODE XREF: sub_6E426500+C9Ej
		mov	[ebp+var_30], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	ecx, [eax+24h]
		mov	eax, [eax+20h]
		mov	[esp+58h+var_48], ecx
		mov	[esp+58h+var_4C], eax
		mov	[esp+58h+var_50], 11B1h
		mov	[esp+58h+var_54], 11B0h
		mov	[esp+58h+Time],	ebx
		call	sub_6E42E280
		test	eax, eax
		jle	loc_6E42680D
		mov	dword ptr [ebx+34h], 1100h
		mov	eax, [ebx+58h]
		mov	ecx, [eax]
		mov	esi, ecx
		and	esi, 0FFFFFFFBh
		mov	[eax], esi
		mov	edi, [ebx+6Ch]
		test	edi, edi
		mov	edx, [ebp+var_30]
		jz	loc_6E427040
		mov	dword ptr [eax+350h], 3
		and	ecx, 2
		jz	loc_6E427058
		mov	dword ptr [ebx+34h], 3
		or	esi, 4
		mov	[eax], esi
		mov	dword ptr [eax+4], 0
		jmp	loc_6E427058
; ---------------------------------------------------------------------------
		align 10h

loc_6E4269F0:				; CODE XREF: sub_6E426500+346j
		cmp	edx, 1150h
		jl	loc_6E426EC0
		cmp	edx, 1151h
		jle	loc_6E426D30
		lea	eax, [edx-1160h]
		cmp	eax, 1
		ja	loc_6E426EC0
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E40AF90
		test	eax, eax
		jle	loc_6E42680D
		mov	[esp+58h+Time],	ebx
		call	sub_6E427CA0
		mov	eax, [ebx+58h]
		cmp	dword ptr [eax+358h], 1
		sbb	ecx, ecx
		and	ecx, 10h
		add	ecx, 1170h
		mov	[eax+350h], ecx
		mov	dword ptr [ebx+44h], 0
		mov	[ebx+34h], ecx
		mov	edx, [ebp+var_30]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E426A60:				; CODE XREF: sub_6E426500+3D6j
		cmp	edx, 4000h
		jz	short loc_6E426A96
		cmp	edx, 5000h
		jz	short loc_6E426A96
		cmp	edx, 3004h
		jnz	loc_6E426EC0
		mov	dword ptr [ebx+190h], 1
		mov	dword ptr [ebx+34h], 1000h
		mov	eax, [ebx+0E4h]
		inc	dword ptr [eax+38h]

loc_6E426A96:				; CODE XREF: sub_6E426500+266j
					; sub_6E426500+272j ...
		mov	dword ptr [ebx+24h], 0
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	short loc_6E426ABF
		mov	[ebp+var_30], edx
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 10h
		mov	[esp+58h+Time],	ebx
		call	eax
		mov	edx, [ebp+var_30]

loc_6E426ABF:				; CODE XREF: sub_6E426500+5A2j
		mov	eax, [ebx]
		and	eax, 0FF00h
		cmp	eax, 0FE00h
		jz	short loc_6E426AD8
		cmp	eax, 100h
		jnz	loc_6E42730C

loc_6E426AD8:				; CODE XREF: sub_6E426500+5CBj
		mov	dword ptr [ebx+4], 1000h
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jz	loc_6E427140

loc_6E426AEA:				; CODE XREF: sub_6E426500+C76j
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E416DB0
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E427207
		mov	[ebp+var_30], edx
		mov	[esp+58h+var_54], 0
		mov	[esp+58h+Time],	ebx
		call	sub_6E435D40
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E427207
		mov	dword ptr [ebx+34h], 1110h
		mov	eax, [ebx+0E4h]
		inc	dword ptr [eax+34h]
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		lea	edi, [eax+0C0h]
		mov	esi, 20h
		test	edi, 1
		jnz	loc_6E4271EA

loc_6E426B4F:				; CODE XREF: sub_6E426500+CFBj
		test	edi, 2
		jnz	loc_6E4271DA

loc_6E426B5B:				; CODE XREF: sub_6E426500+CE5j
		mov	ecx, esi
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	esi, 2
		jnz	loc_6E426D80
		and	esi, 1
		jnz	loc_6E426D70

loc_6E426B79:				; CODE XREF: sub_6E426500+873j
					; sub_6E426500+88Bj
		mov	eax, [ebx+5Ch]
		mov	dword ptr [eax], 0
		mov	dword ptr [ebx+6Ch], 0
		mov	dword ptr [eax+2E8h], 0
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+180h], 0

loc_6E426BA0:				; CODE XREF: sub_6E426500+180j
					; sub_6E426500+24Cj ...
		cmp	dword ptr [eax+354h], 0
		jnz	loc_6E4265A0

loc_6E426BAD:				; CODE XREF: sub_6E426500+B35j
		cmp	dword ptr [ebx+0E8h], 0
		jnz	loc_6E427270
		lea	esi, [esi+0]

loc_6E426BC0:				; CODE XREF: sub_6E426500+D9Bj
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	loc_6E4265A0
		mov	esi, [ebx+34h]
		cmp	esi, edx
		jz	loc_6E4265A3
		mov	[ebx+34h], edx
		mov	[esp+58h+var_50], 1
		mov	[esp+58h+var_54], 1001h
		mov	[esp+58h+Time],	ebx
		mov	eax, [ebp+var_2C]
		call	eax
		mov	[ebx+34h], esi
		mov	edx, esi
		jmp	loc_6E4265A3
; ---------------------------------------------------------------------------
		align 10h

loc_6E426C00:				; CODE XREF: sub_6E426500+EDj
		lea	eax, [edx-1120h]
		cmp	eax, 1
		ja	loc_6E426EC0
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E407B10
		test	eax, eax
		jle	loc_6E42680D
		mov	esi, [ebx+6Ch]
		test	esi, esi
		mov	edx, [ebp+var_30]
		jz	loc_6E427070
		mov	dword ptr [ebx+34h], 11D0h
		mov	ecx, [ebx+140h]
		test	ecx, ecx
		jz	loc_6E427077
		mov	dword ptr [ebx+34h], 11E0h
		jmp	loc_6E427077
; ---------------------------------------------------------------------------
		jmp	short loc_6E426C60
; ---------------------------------------------------------------------------
		align 10h

loc_6E426C60:				; CODE XREF: sub_6E426500+442j
					; sub_6E426500+751j
		mov	eax, [ebx+6Ch]
		test	eax, eax
		jz	loc_6E4271B0

loc_6E426C6B:				; CODE XREF: sub_6E426500+CBEj
		mov	[ebp+var_30], edx
		mov	[esp+58h+var_50], 11A1h
		mov	[esp+58h+var_54], 11A0h
		mov	[esp+58h+Time],	ebx
		call	sub_6E42E5F0
		test	eax, eax
		jle	loc_6E42680D
		mov	dword ptr [ebx+34h], 11B0h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+0C0h]
		mov	ecx, [ebx+58h]
		mov	esi, [ecx+344h]
		mov	[eax+0B4h], esi
		mov	ecx, [ecx+38Ch]
		test	ecx, ecx
		mov	edx, [ebp+var_30]
		jz	loc_6E427200
		mov	ecx, [ecx]

loc_6E426CC4:				; CODE XREF: sub_6E426500+D02j
		mov	[ebp+var_30], edx
		mov	[eax+0B0h], ecx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+8]
		mov	[esp+58h+Time],	ebx
		call	eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E427207
		mov	[ebp+var_30], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+10h]
		mov	[esp+58h+var_54], 12h
		mov	[esp+58h+Time],	ebx
		call	eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E427207
		mov	[ebp+var_30], edx
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E42BA10
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_30]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E426D30:				; CODE XREF: sub_6E426500+502j
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E40A320
		test	eax, eax
		jle	loc_6E42680D
		mov	dword ptr [ebx+34h], 1160h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_30]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E426D60:				; CODE XREF: sub_6E426500+139j
		mov	dword ptr [ebx+34h], 1120h
		jmp	loc_6E426653
; ---------------------------------------------------------------------------
		align 10h

loc_6E426D70:				; CODE XREF: sub_6E426500+673j
					; sub_6E426500+891j
		mov	byte ptr [edi],	0
		jmp	loc_6E426B79
; ---------------------------------------------------------------------------
		align 10h

loc_6E426D80:				; CODE XREF: sub_6E426500+66Aj
		mov	word ptr [edi],	0
		add	edi, 2
		and	esi, 1
		jz	loc_6E426B79
		jmp	short loc_6E426D70
; ---------------------------------------------------------------------------
		align 10h

loc_6E426DA0:				; CODE XREF: sub_6E426500+D9j
		mov	[ebp+var_30], edx
		mov	dword ptr [ebx+18h], 2
		mov	eax, [ebx+10h]
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0Bh
		mov	[esp+58h+Time],	eax
		call	BIO_ctrl
		test	eax, eax
		mov	edx, [ebp+var_30]
		jle	loc_6E427349
		mov	dword ptr [ebx+18h], 1
		mov	eax, [ebx+58h]
		mov	ecx, [eax+350h]
		mov	[ebx+34h], ecx
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------

loc_6E426DF0:				; CODE XREF: sub_6E426500+CDj
		mov	[ebp+var_30], edx
		mov	[ebp+var_1C], 0
		mov	eax, [ebx+8]
		mov	eax, [eax+30h]
		mov	ecx, [ebx+108h]
		lea	edi, [ebp+var_1C]
		mov	[esp+58h+var_44], edi
		mov	[esp+58h+var_48], ecx
		mov	[esp+58h+var_4C], 0FFFFFFFFh
		mov	[esp+58h+var_50], 1127h
		mov	[esp+58h+var_54], 1126h
		mov	[esp+58h+Time],	ebx
		call	eax
		mov	edx, [ebp+var_1C]
		test	edx, edx
		mov	edx, [ebp+var_30]
		jz	loc_6E427110
		mov	eax, [ebx+58h]
		cmp	dword ptr [eax+340h], 3
		jz	loc_6E427090
		mov	ecx, [ebx+5Ch]
		mov	dword ptr [ecx], 0
		mov	dword ptr [eax+354h], 1

loc_6E426E5F:				; CODE XREF: sub_6E426500+C02j
					; sub_6E426500+C12j
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E427CA0
		mov	eax, [ebx+5Ch]
		cmp	dword ptr [eax], 1
		sbb	eax, eax
		and	eax, 20h
		add	eax, 1110h
		mov	[ebx+34h], eax
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_30]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E426E90:				; CODE XREF: sub_6E426500+3E2j
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E40AD70
		test	eax, eax
		jle	loc_6E42680D
		mov	dword ptr [ebx+34h], 1140h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_30]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E426EC0:				; CODE XREF: sub_6E426500+F9j
					; sub_6E426500+209j ...
		mov	[esp+58h+var_48], 2F7h
		mov	[esp+58h+var_4C], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+58h+var_50], 0FFh
		mov	[esp+58h+var_54], 0F9h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42680D
; ---------------------------------------------------------------------------
		align 10h

loc_6E426F00:				; CODE XREF: sub_6E426500+B5j
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		mov	[esp+58h+Time],	ebx
		call	sub_6E426290
		test	eax, eax
		jle	loc_6E42680D
		mov	dword ptr [ebx+34h], 1180h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_30]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E426F40:				; CODE XREF: sub_6E426500+1FAj
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		mov	[esp+58h+Time],	ebx
		call	sub_6E425FD0
		test	eax, eax
		jle	loc_6E42680D
		mov	dword ptr [ebx+34h], 11A0h
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	edx, [ebp+var_30]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E426F80:				; CODE XREF: sub_6E426500+1E2j
		mov	[ebp+var_30], edx
		mov	eax, [ebx+5Ch]
		mov	dword ptr [eax+2E8h], 1
		mov	[esp+58h+var_50], 11D1h
		mov	[esp+58h+var_54], 11D0h
		mov	[esp+58h+Time],	ebx
		call	sub_6E415C90
		test	eax, eax
		jle	loc_6E42680D
		mov	[esp+58h+Time],	ebx
		call	sub_6E427CA0
		cmp	dword ptr [ebx+6Ch], 1
		sbb	eax, eax
		and	eax, 0FFFFEE63h
		add	eax, 11A0h
		mov	[ebx+34h], eax
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E4268BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E426FE0:				; CODE XREF: sub_6E426500+162j
		mov	eax, [ebx+58h]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E426FF0:				; CODE XREF: sub_6E426500+370j
		test	byte ptr [eax+0Dh], 1
		jnz	loc_6E426876
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E4084B0
		test	eax, eax
		jle	loc_6E42680D
		cmp	dword ptr [ebx+12Ch], 1
		sbb	eax, eax
		and	al, 50h
		add	eax, 11F0h
		mov	[ebx+34h], eax
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		mov	eax, [eax+354h]
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E426BAD
		jmp	loc_6E4265A0
; ---------------------------------------------------------------------------

loc_6E427040:				; CODE XREF: sub_6E426500+4B4j
		cmp	dword ptr [ebx+140h], 1
		sbb	ecx, ecx
		and	ecx, 0FFFFFFF0h
		add	ecx, 11E0h
		mov	[eax+350h], ecx

loc_6E427058:				; CODE XREF: sub_6E426500+4C7j
					; sub_6E426500+4E0j
		mov	dword ptr [ebx+44h], 0
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E427070:				; CODE XREF: sub_6E426500+72Aj
		mov	dword ptr [ebx+34h], 1126h

loc_6E427077:				; CODE XREF: sub_6E426500+73Fj
					; sub_6E426500+74Cj
		mov	dword ptr [ebx+44h], 0
		mov	eax, [ebx+58h]
		jmp	loc_6E426BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E427090:				; CODE XREF: sub_6E426500+946j
		mov	edi, [ebx+40h]
		mov	eax, [ebx]
		movzx	esi, byte ptr [edi]
		and	esi, 0FFh
		mov	ecx, eax
		sar	ecx, 8
		cmp	esi, ecx
		jnz	loc_6E4272A6
		cmp	[edi+1], al
		jnz	loc_6E4272A6
		xor	eax, eax
		mov	al, [edi+2]
		mov	[ebp+var_38], eax
		mov	esi, [ebx+5Ch]
		mov	[ebp+var_3C], esi
		lea	ecx, [esi+4]
		lea	esi, [edi+3]
		mov	[ebp+var_40], esi
		mov	[ebp+var_30], eax
		mov	[ebp+var_34], ecx
		cmp	eax, 4
		jnb	loc_6E42723C

loc_6E4270DA:				; CODE XREF: sub_6E426500+D5Dj
		xor	eax, eax
		test	byte ptr [ebp+var_30], 2
		jnz	loc_6E427229

loc_6E4270E6:				; CODE XREF: sub_6E426500+D37j
		test	byte ptr [ebp+var_30], 1
		jnz	loc_6E427218

loc_6E4270F0:				; CODE XREF: sub_6E426500+D24j
		mov	eax, [ebx+5Ch]
		mov	edi, [ebp+var_38]
		mov	[eax+204h], edi
		mov	dword ptr [eax], 1
		jmp	loc_6E426E5F
; ---------------------------------------------------------------------------
		align 10h

loc_6E427110:				; CODE XREF: sub_6E426500+936j
		test	eax, eax
		jg	loc_6E426E5F
		jmp	loc_6E42680D
; ---------------------------------------------------------------------------
		align 10h

loc_6E427120:				; CODE XREF: sub_6E426500+5Cj
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+9Ch]
		mov	[ebp+var_2C], eax
		jmp	loc_6E426562
; ---------------------------------------------------------------------------
		align 10h

loc_6E427140:				; CODE XREF: sub_6E426500+5E4j
		mov	[ebp+var_30], edx
		call	BUF_MEM_new
		mov	esi, eax
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E427207
		mov	[ebp+var_30], edx
		mov	[esp+58h+var_54], 4000h
		mov	[esp+58h+Time],	eax
		call	BUF_MEM_grow
		test	eax, eax
		mov	edx, [ebp+var_30]
		jz	loc_6E4273BF
		mov	[ebx+3Ch], esi
		jmp	loc_6E426AEA
; ---------------------------------------------------------------------------
		align 10h

loc_6E427180:				; CODE XREF: sub_6E426500+28Fj
		mov	[esp+58h+Time],	ebx
		call	sub_6E435E90
		jmp	loc_6E426795
; ---------------------------------------------------------------------------
		align 10h

loc_6E427190:				; CODE XREF: sub_6E426500+45Cj
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		mov	edx, [ebp+var_30]
		jmp	loc_6E426962
; ---------------------------------------------------------------------------
		align 10h

loc_6E4271B0:				; CODE XREF: sub_6E426500+765j
		mov	[ebp+var_30], edx
		mov	[esp+58h+Time],	ebx
		call	sub_6E427980
		mov	edx, [ebp+var_30]
		jmp	loc_6E426C6B
; ---------------------------------------------------------------------------
		align 10h

loc_6E4271D0:				; CODE XREF: sub_6E426500+237j
		mov	ecx, 1190h
		jmp	loc_6E426742
; ---------------------------------------------------------------------------

loc_6E4271DA:				; CODE XREF: sub_6E426500+655j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	esi, 2
		jmp	loc_6E426B5B
; ---------------------------------------------------------------------------

loc_6E4271EA:				; CODE XREF: sub_6E426500+649j
		mov	byte ptr [eax+0C0h], 0
		lea	edi, [eax+0C1h]
		mov	si, 1Fh
		jmp	loc_6E426B4F
; ---------------------------------------------------------------------------

loc_6E427200:				; CODE XREF: sub_6E426500+7BCj
		xor	ecx, ecx
		jmp	loc_6E426CC4
; ---------------------------------------------------------------------------

loc_6E427207:				; CODE XREF: sub_6E426500+3B4j
					; sub_6E426500+5FAj ...
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42680D
; ---------------------------------------------------------------------------

loc_6E427218:				; CODE XREF: sub_6E426500+BEAj
		mov	cl, [esi+eax]
		mov	byte ptr [ebp+var_30], cl
		mov	edi, [ebp+var_34]
		mov	[edi+eax], cl
		jmp	loc_6E4270F0
; ---------------------------------------------------------------------------

loc_6E427229:				; CODE XREF: sub_6E426500+BE0j
		mov	ax, [esi]
		mov	edi, [ebp+var_34]
		mov	[edi], ax
		mov	eax, 2
		jmp	loc_6E4270E6
; ---------------------------------------------------------------------------

loc_6E42723C:				; CODE XREF: sub_6E426500+BD4j
		test	cl, 1
		jnz	loc_6E4273A0

loc_6E427245:				; CODE XREF: sub_6E426500+EBAj
		test	byte ptr [ebp+var_34], 2
		jnz	loc_6E427387

loc_6E42724F:				; CODE XREF: sub_6E426500+E9Bj
		mov	ecx, [ebp+var_30]
		shr	ecx, 2
		mov	edi, [ebp+var_34]
		rep movsd
		mov	[ebp+var_34], edi
		jmp	loc_6E4270DA
; ---------------------------------------------------------------------------
		align 10h

loc_6E427270:				; CODE XREF: sub_6E426500+6B4j
		mov	[ebp+var_30], edx
		mov	eax, [ebx+10h]
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0Bh
		mov	[esp+58h+Time],	eax
		call	BIO_ctrl
		test	eax, eax
		mov	edx, [ebp+var_30]
		jg	loc_6E426BC0
		jmp	loc_6E42680D
; ---------------------------------------------------------------------------

loc_6E4272A6:				; CODE XREF: sub_6E426500+BA5j
					; sub_6E426500+BAEj
		mov	[esp+58h+var_48], 3B3h
		mov	[esp+58h+var_4C], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+58h+var_50], 10Ah
		mov	[esp+58h+var_54], 0FBh
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		xor	eax, eax
		mov	al, [edi+1]
		mov	edx, [ebx]
		and	edx, 0FF00h
		or	eax, edx
		mov	[ebx], eax
		mov	[esp+58h+var_50], 46h
		mov	[esp+58h+var_54], 2
		mov	[esp+58h+Time],	ebx
		call	sub_6E4151B0
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42680D
; ---------------------------------------------------------------------------

loc_6E42730C:				; CODE XREF: sub_6E426500+5D2j
		mov	[esp+58h+var_48], 0D5h
		mov	[esp+58h+var_4C], offset aD1_clnt_c ; "d1_clnt.c"
		mov	[esp+58h+var_50], 44h
		mov	[esp+58h+var_54], 0F9h
		mov	[esp+58h+Time],	14h
		call	ERR_put_error
		mov	dword ptr [ebx+34h], 5
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42680D
; ---------------------------------------------------------------------------

loc_6E427349:				; CODE XREF: sub_6E426500+8D2j
		mov	eax, [ebx+10h]
		mov	[esp+58h+var_54], 8
		mov	[esp+58h+Time],	eax
		call	BIO_test_flags
		test	eax, eax
		jnz	short loc_6E42737D
		mov	dword ptr [ebx+18h], 1
		mov	eax, [ebx+58h]
		mov	eax, [eax+350h]
		mov	[ebx+34h], eax
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42680D
; ---------------------------------------------------------------------------

loc_6E42737D:				; CODE XREF: sub_6E426500+E5Ej
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42680D
; ---------------------------------------------------------------------------

loc_6E427387:				; CODE XREF: sub_6E426500+D49j
		mov	ax, [esi]
		mov	edi, [ebp+var_34]
		mov	[edi], ax
		add	[ebp+var_34], 2
		add	esi, 2
		sub	[ebp+var_30], 2
		jmp	loc_6E42724F
; ---------------------------------------------------------------------------

loc_6E4273A0:				; CODE XREF: sub_6E426500+D3Fj
		mov	al, [edi+3]
		mov	edi, [ebp+var_3C]
		mov	[edi+4], al
		mov	eax, ecx
		inc	eax
		mov	[ebp+var_34], eax
		mov	esi, [ebp+var_40]
		inc	esi
		mov	eax, [ebp+var_38]
		dec	eax
		mov	[ebp+var_30], eax
		jmp	loc_6E427245
; ---------------------------------------------------------------------------

loc_6E4273BF:				; CODE XREF: sub_6E426500+C6Dj
		mov	dword ptr [ebx+34h], 5
		dec	dword ptr [ebx+1Ch]
		mov	[esp+58h+Time],	esi
		call	BUF_MEM_free
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E426810
sub_6E426500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4273E0	proc near		; CODE XREF: sub_6E427710+13p
					; sub_6E4277A0+57p

var_1C		= dword	ptr -1Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, eax
		jmp	short loc_6E427415
; ---------------------------------------------------------------------------
		align 10h

loc_6E4273F0:				; CODE XREF: sub_6E4273E0+49j
		mov	edx, [esi+8]
		mov	eax, [edx+8]
		test	eax, eax
		jz	short loc_6E427405
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	edx, [esi+8]

loc_6E427405:				; CODE XREF: sub_6E4273E0+18j
		mov	[esp+1Ch+var_1C], edx
		call	CRYPTO_free
		mov	[esp+1Ch+var_1C], esi
		call	pitem_free

loc_6E427415:				; CODE XREF: sub_6E4273E0+7j
		mov	eax, [ebx]
		mov	eax, [eax+238h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_pop
		mov	esi, eax
		test	eax, eax
		jnz	short loc_6E4273F0
		jmp	short loc_6E427455
; ---------------------------------------------------------------------------
		align 10h

loc_6E427430:				; CODE XREF: sub_6E4273E0+89j
		mov	edx, [esi+8]
		mov	eax, [edx+8]
		test	eax, eax
		jz	short loc_6E427445
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	edx, [esi+8]

loc_6E427445:				; CODE XREF: sub_6E4273E0+58j
		mov	[esp+1Ch+var_1C], edx
		call	CRYPTO_free
		mov	[esp+1Ch+var_1C], esi
		call	pitem_free

loc_6E427455:				; CODE XREF: sub_6E4273E0+4Bj
		mov	eax, [ebx]
		mov	eax, [eax+240h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_pop
		mov	esi, eax
		test	eax, eax
		jnz	short loc_6E427430
		jmp	short loc_6E427483
; ---------------------------------------------------------------------------
		align 10h

loc_6E427470:				; CODE XREF: sub_6E4273E0+B7j
		mov	eax, [esi+8]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6E42C480
		mov	[esp+1Ch+var_1C], esi
		call	pitem_free

loc_6E427483:				; CODE XREF: sub_6E4273E0+8Bj
		mov	eax, [ebx]
		mov	eax, [eax+244h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_pop
		mov	esi, eax
		test	eax, eax
		jnz	short loc_6E427470
		jmp	short loc_6E4274B3
; ---------------------------------------------------------------------------
		align 10h

loc_6E4274A0:				; CODE XREF: sub_6E4273E0+E7j
		mov	eax, [esi+8]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6E42C480
		mov	[esp+1Ch+var_1C], esi
		call	pitem_free

loc_6E4274B3:				; CODE XREF: sub_6E4273E0+B9j
		mov	eax, [ebx]
		mov	eax, [eax+248h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_pop
		mov	esi, eax
		test	eax, eax
		jnz	short loc_6E4274A0
		jmp	short loc_6E4274F5
; ---------------------------------------------------------------------------
		align 10h

loc_6E4274D0:				; CODE XREF: sub_6E4273E0+129j
		mov	edx, [esi+8]
		mov	eax, [edx+8]
		test	eax, eax
		jz	short loc_6E4274E5
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	edx, [esi+8]

loc_6E4274E5:				; CODE XREF: sub_6E4273E0+F8j
		mov	[esp+1Ch+var_1C], edx
		call	CRYPTO_free
		mov	[esp+1Ch+var_1C], esi
		call	pitem_free

loc_6E4274F5:				; CODE XREF: sub_6E4273E0+E9j
		mov	eax, [ebx]
		mov	eax, [eax+250h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_pop
		mov	esi, eax
		test	eax, eax
		jnz	short loc_6E4274D0
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_6E4273E0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E427520
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E427520	proc near		; CODE XREF: .text:6E427511j
					; DATA XREF: .rdata:6E44CD40o ...
		mov	eax, 1C20h
		retn
sub_6E427520	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E427530	proc near		; DATA XREF: .rdata:6E44CCE4o
					; .rdata:6E44CD84o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], esi
		call	sub_6E40E430
		test	eax, eax
		jnz	short loc_6E427550

loc_6E427546:				; CODE XREF: sub_6E427530+40j
					; sub_6E427530+1B8j
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E427550:				; CODE XREF: sub_6E427530+14j
		mov	[esp+1Ch+var_14], 67h
		mov	[esp+1Ch+var_18], offset aD1_lib_c ; "d1_lib.c"
		mov	[esp+1Ch+var_1C], 2ECh
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E427546
		mov	edi, eax
		mov	edx, 2ECh
		test	al, 1
		jnz	loc_6E427700

loc_6E427581:				; CODE XREF: sub_6E427530+1D8j
		test	edi, 2
		jnz	loc_6E4276F0

loc_6E42758D:				; CODE XREF: sub_6E427530+1CBj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E427670
		and	edx, 1
		jnz	loc_6E427660

loc_6E4275A8:				; CODE XREF: sub_6E427530+133j
					; sub_6E427530+14Bj
		call	pqueue_new
		mov	[ebx+238h], eax
		call	pqueue_new
		mov	[ebx+240h], eax
		call	pqueue_new
		mov	[ebx+244h], eax
		call	pqueue_new
		mov	[ebx+248h], eax
		call	pqueue_new
		mov	[ebx+250h], eax
		mov	edi, [esi+24h]
		test	edi, edi
		jnz	short loc_6E427650

loc_6E4275E6:				; CODE XREF: sub_6E427530+12Aj
		mov	dword ptr [ebx+258h], 0
		mov	dword ptr [ebx+25Ch], 0
		mov	edx, [ebx+238h]
		test	edx, edx
		jz	loc_6E427698
		mov	ecx, [ebx+240h]
		test	ecx, ecx
		jz	short loc_6E427690
		mov	edi, [ebx+244h]
		test	edi, edi
		jz	short loc_6E427690
		mov	ecx, [ebx+248h]
		test	ecx, ecx
		jz	short loc_6E427690
		test	eax, eax
		jz	short loc_6E427690
		mov	[esi+5Ch], ebx
		mov	eax, [esi+8]
		mov	eax, [eax+8]
		mov	[esp+1Ch+var_1C], esi
		call	eax
		mov	eax, 1
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E427650:				; CODE XREF: sub_6E427530+B4j
		mov	dword ptr [ebx+204h], 100h
		jmp	short loc_6E4275E6
; ---------------------------------------------------------------------------
		align 10h

loc_6E427660:				; CODE XREF: sub_6E427530+72j
					; sub_6E427530+151j
		mov	byte ptr [edi],	0
		jmp	loc_6E4275A8
; ---------------------------------------------------------------------------
		align 10h

loc_6E427670:				; CODE XREF: sub_6E427530+69j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E4275A8
		jmp	short loc_6E427660
; ---------------------------------------------------------------------------
		align 10h

loc_6E427690:				; CODE XREF: sub_6E427530+E0j
					; sub_6E427530+EAj ...
		mov	[esp+1Ch+var_1C], edx
		call	pqueue_free

loc_6E427698:				; CODE XREF: sub_6E427530+D2j
		mov	eax, [ebx+240h]
		test	eax, eax
		jz	short loc_6E4276AA
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_free

loc_6E4276AA:				; CODE XREF: sub_6E427530+170j
		mov	eax, [ebx+244h]
		test	eax, eax
		jz	short loc_6E4276BC
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_free

loc_6E4276BC:				; CODE XREF: sub_6E427530+182j
		mov	eax, [ebx+248h]
		test	eax, eax
		jz	short loc_6E4276CE
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_free

loc_6E4276CE:				; CODE XREF: sub_6E427530+194j
		mov	eax, [ebx+250h]
		test	eax, eax
		jz	short loc_6E4276E0
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_free

loc_6E4276E0:				; CODE XREF: sub_6E427530+1A6j
		mov	[esp+1Ch+var_1C], ebx
		call	CRYPTO_free
		jmp	loc_6E427546
; ---------------------------------------------------------------------------
		align 10h

loc_6E4276F0:				; CODE XREF: sub_6E427530+57j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E42758D
; ---------------------------------------------------------------------------

loc_6E427700:				; CODE XREF: sub_6E427530+4Bj
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	dl, 0EBh
		jmp	loc_6E427581
sub_6E427530	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E427710	proc near		; DATA XREF: .rdata:6E44CCECo
					; .rdata:6E44CD8Co ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E40E530
		lea	eax, [ebx+5Ch]
		call	sub_6E4273E0
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+238h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_free
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+240h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_free
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+244h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_free
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+248h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_free
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+250h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_free
		mov	eax, [ebx+5Ch]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+5Ch], 0
		add	esp, 18h
		pop	ebx
		retn
sub_6E427710	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4277A0	proc near		; DATA XREF: .rdata:6E44CCE8o
					; .rdata:6E44CD88o ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx+5Ch]
		test	eax, eax
		jz	loc_6E4278A1
		mov	esi, [eax+238h]
		mov	ebp, [eax+240h]
		mov	edx, [eax+244h]
		mov	[esp+4Ch+var_30], edx
		mov	ecx, [eax+248h]
		mov	[esp+4Ch+var_2C], ecx
		mov	edi, [eax+250h]
		mov	[esp+4Ch+var_28], edi
		mov	edx, [eax+25Ch]
		mov	[esp+4Ch+var_24], edx
		mov	eax, [eax+258h]
		mov	[esp+4Ch+var_20], eax
		lea	eax, [ebx+5Ch]
		call	sub_6E4273E0
		mov	edi, [ebx+5Ch]
		mov	edx, 2ECh
		test	edi, 1
		jnz	loc_6E427940

loc_6E427810:				; CODE XREF: sub_6E4277A0+1A6j
		test	edi, 2
		jnz	loc_6E427930

loc_6E42781C:				; CODE XREF: sub_6E4277A0+19Bj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E4278F0
		and	edx, 1
		jnz	loc_6E4278D0

loc_6E427837:				; CODE XREF: sub_6E4277A0+15Bj
		mov	eax, [ebx+24h]
		test	eax, eax
		jz	short loc_6E42784B

loc_6E42783E:				; CODE XREF: sub_6E4277A0+13Ej
		mov	eax, [ebx+5Ch]
		mov	dword ptr [eax+204h], 100h

loc_6E42784B:				; CODE XREF: sub_6E4277A0+9Cj
					; sub_6E4277A0+138j
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 20h
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_ctrl
		test	ah, 10h
		mov	eax, [ebx+5Ch]
		jnz	loc_6E427910

loc_6E427877:				; CODE XREF: sub_6E4277A0+184j
		mov	[eax+238h], esi
		mov	[eax+240h], ebp
		mov	esi, [esp+4Ch+var_30]
		mov	[eax+244h], esi
		mov	esi, [esp+4Ch+var_2C]
		mov	[eax+248h], esi
		mov	esi, [esp+4Ch+var_28]
		mov	[eax+250h], esi

loc_6E4278A1:				; CODE XREF: sub_6E4277A0+10j
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E40E640
		mov	eax, [ebx+100h]
		and	eax, 8000h
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 0FDFFh
		add	eax, 100h
		mov	[ebx], eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4278D0:				; CODE XREF: sub_6E4277A0+91j
					; sub_6E4277A0+161j
		mov	byte ptr [edi],	0
		mov	eax, [ebx+24h]
		test	eax, eax
		jz	loc_6E42784B
		jmp	loc_6E42783E
; ---------------------------------------------------------------------------
		align 10h

loc_6E4278F0:				; CODE XREF: sub_6E4277A0+88j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E427837
		jmp	short loc_6E4278D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E427910:				; CODE XREF: sub_6E4277A0+D1j
		mov	ecx, [esp+4Ch+var_24]
		mov	[eax+25Ch], ecx
		mov	edi, [esp+4Ch+var_20]
		mov	[eax+258h], edi
		jmp	loc_6E427877
; ---------------------------------------------------------------------------
		align 10h

loc_6E427930:				; CODE XREF: sub_6E4277A0+76j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E42781C
; ---------------------------------------------------------------------------

loc_6E427940:				; CODE XREF: sub_6E4277A0+6Aj
		mov	byte ptr [edi],	0
		inc	edi
		mov	dl, 0EBh
		jmp	loc_6E427810
sub_6E4277A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E427950	proc near		; DATA XREF: .rdata:6E44CD38o
					; .rdata:6E44CDD8o ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6E40E3D0
		test	eax, eax
		jz	short loc_6E427970
		cmp	dword ptr [eax+14h], 4
		jz	short loc_6E427970
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E427970:				; CODE XREF: sub_6E427950+11j
					; sub_6E427950+17j
		xor	eax, eax
		add	esp, 1Ch
		retn
sub_6E427950	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E427980	proc near		; CODE XREF: sub_6E4239E0+333p
					; sub_6E4239E0+51Cp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= word ptr -14h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esi+5Ch]
		mov	edx, [ebx+2C4h]
		test	edx, edx
		jnz	short loc_6E4279A9
		mov	eax, [ebx+2C8h]
		test	eax, eax
		jnz	short loc_6E4279A9
		mov	word ptr [ebx+2CCh], 1

loc_6E4279A9:				; CODE XREF: sub_6E427980+14j
					; sub_6E427980+1Ej
		lea	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ftime
		mov	eax, [esp+2Ch+var_18]
		mov	[ebx+2C4h], eax
		xor	eax, eax
		mov	ax, [esp+2Ch+var_14]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 3
		mov	[ebx+2C8h], eax
		mov	ebx, [esi+5Ch]
		xor	eax, eax
		mov	ax, [ebx+2CCh]
		add	[ebx+2C4h], eax
		mov	[esp+2Ch+var_2C], esi
		call	SSL_get_rbio
		add	ebx, 2C4h
		mov	[esp+2Ch+var_20], ebx
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 2Dh
		mov	[esp+2Ch+var_2C], eax
		call	BIO_ctrl
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
sub_6E427980	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E427A20	proc near		; CODE XREF: sub_6E4281F0+F7p

var_2C		= dword	ptr -2Ch
var_18		= dword	ptr -18h
var_14		= word ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	eax, [esi+5Ch]
		mov	edx, [eax+2C4h]
		test	edx, edx
		jnz	short loc_6E427A48
		mov	eax, [eax+2C8h]
		test	eax, eax
		jz	loc_6E427B00

loc_6E427A48:				; CODE XREF: sub_6E427A20+18j
		lea	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ftime
		mov	edx, [esp+2Ch+var_18]
		xor	eax, eax
		mov	ax, [esp+2Ch+var_14]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		lea	ecx, [eax+eax*4]
		shl	ecx, 3
		mov	eax, [esi+5Ch]
		cmp	[eax+2C4h], edx
		jl	short loc_6E427AB8
		jz	short loc_6E427AB0

loc_6E427A79:				; CODE XREF: sub_6E427A20+96j
		mov	esi, [eax+2C4h]
		mov	[ebx], esi
		mov	eax, [eax+2C8h]
		sub	esi, edx
		mov	edx, esi
		mov	[ebx], esi
		sub	eax, ecx
		mov	[ebx+4], eax
		test	eax, eax
		js	short loc_6E427AE0
		test	edx, edx
		jz	short loc_6E427AD0

loc_6E427A9A:				; CODE XREF: sub_6E427A20+B5j
					; sub_6E427A20+CDj
		mov	eax, ebx

loc_6E427A9C:				; CODE XREF: sub_6E427A20+E2j
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E427AB0:				; CODE XREF: sub_6E427A20+57j
		cmp	[eax+2C8h], ecx
		jg	short loc_6E427A79

loc_6E427AB8:				; CODE XREF: sub_6E427A20+55j
					; sub_6E427A20+B7j
		mov	dword ptr [ebx], 0
		mov	dword ptr [ebx+4], 0
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E427AD0:				; CODE XREF: sub_6E427A20+78j
					; sub_6E427A20+CFj
		cmp	eax, 3A97h
		jg	short loc_6E427A9A
		jmp	short loc_6E427AB8
; ---------------------------------------------------------------------------
		align 10h

loc_6E427AE0:				; CODE XREF: sub_6E427A20+74j
		dec	edx
		mov	[ebx], edx
		add	eax, 0F4240h
		mov	[ebx+4], eax
		test	edx, edx
		jnz	short loc_6E427A9A
		jmp	short loc_6E427AD0
; ---------------------------------------------------------------------------
		jmp	short loc_6E427B00
; ---------------------------------------------------------------------------
		align 10h

loc_6E427B00:				; CODE XREF: sub_6E427A20+22j
					; sub_6E427A20+D1j
		xor	eax, eax
		jmp	short loc_6E427A9C
sub_6E427A20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E427B10	proc near		; CODE XREF: sub_6E42DB10+53p

var_2C		= dword	ptr -2Ch
var_18		= dword	ptr -18h
var_14		= word ptr -14h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+5Ch]
		mov	edx, [eax+2C4h]
		test	edx, edx
		jnz	short loc_6E427B2F
		mov	eax, [eax+2C8h]
		test	eax, eax
		jz	short loc_6E427BA2

loc_6E427B2F:				; CODE XREF: sub_6E427B10+13j
		lea	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_2C], eax
		call	ds:_ftime
		mov	ecx, [esp+2Ch+var_18]
		xor	eax, eax
		mov	ax, [esp+2Ch+var_14]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		lea	edx, [eax+eax*4]
		shl	edx, 3
		mov	eax, [ebx+5Ch]
		cmp	ecx, [eax+2C4h]
		jg	short loc_6E427BB8
		jz	short loc_6E427BB0

loc_6E427B60:				; CODE XREF: sub_6E427B10+A6j
		mov	ebx, [eax+2C4h]
		mov	[esp+2Ch+var_18], ebx
		mov	eax, [eax+2C8h]
		sub	ebx, ecx
		sub	eax, edx
		js	short loc_6E427BC0
		cmp	ebx, 0
		jnz	short loc_6E427BA0

loc_6E427B7B:				; CODE XREF: sub_6E427B10+BBj
		cmp	eax, 3A97h
		jle	short loc_6E427BB8

loc_6E427B82:				; CODE XREF: sub_6E427B10:loc_6E427BA0j
					; sub_6E427B10+AAj
		test	eax, eax
		setle	al
		and	eax, 0FFh
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E427BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E427BA0:				; CODE XREF: sub_6E427B10+69j
					; sub_6E427B10+81j ...
		jle	short loc_6E427B82

loc_6E427BA2:				; CODE XREF: sub_6E427B10+1Dj
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E427BB0:				; CODE XREF: sub_6E427B10+4Ej
		cmp	edx, [eax+2C8h]
		jl	short loc_6E427B60

loc_6E427BB8:				; CODE XREF: sub_6E427B10+4Cj
					; sub_6E427B10+70j
		xor	eax, eax
		jmp	short loc_6E427B82
; ---------------------------------------------------------------------------
		align 10h

loc_6E427BC0:				; CODE XREF: sub_6E427B10+64j
		dec	ebx
		add	eax, 0F4240h
		cmp	ebx, 0
		jnz	short loc_6E427BA0
		jmp	short loc_6E427B7B
sub_6E427B10	endp

; ---------------------------------------------------------------------------
		align 10h
		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+30h]
		mov	ebx, [esi+5Ch]
		mov	eax, [ebx+2CCh]
		add	eax, eax
		cmp	ax, 3Ch
		jbe	loc_6E427C90
		mov	word ptr [ebx+2CCh], 3Ch

loc_6E427BF7:				; CODE XREF: .text:6E427C97j
		mov	edx, [ebx+2C4h]
		test	edx, edx
		jnz	short loc_6E427C14
		mov	eax, [ebx+2C8h]
		test	eax, eax
		jnz	short loc_6E427C14
		mov	word ptr [ebx+2CCh], 1

loc_6E427C14:				; CODE XREF: .text:6E427BFFj
					; .text:6E427C09j
		lea	eax, [esp+14h]
		mov	[esp], eax
		call	ds:_ftime
		mov	eax, [esp+14h]
		mov	[ebx+2C4h], eax
		xor	eax, eax
		mov	ax, [esp+18h]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 3
		mov	[ebx+2C8h], eax
		mov	ebx, [esi+5Ch]
		xor	eax, eax
		mov	ax, [ebx+2CCh]
		add	[ebx+2C4h], eax
		mov	[esp], esi
		call	SSL_get_rbio
		add	ebx, 2C4h
		mov	[esp+0Ch], ebx
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 2Dh
		mov	[esp], eax
		call	BIO_ctrl
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E427C90:				; CODE XREF: .text:6E427BE8j
		mov	[ebx+2CCh], ax
		jmp	loc_6E427BF7
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E427CA0	proc near		; CODE XREF: sub_6E4239E0+467p
					; sub_6E4239E0+750p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+5Ch]
		lea	edi, [eax+2B8h]
		mov	edx, 0Ch
		test	edi, 1
		jnz	loc_6E427D50
		test	edi, 2
		jnz	loc_6E427D70

loc_6E427CCF:				; CODE XREF: sub_6E427CA0+C5j
					; sub_6E427CA0+DBj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jz	short loc_6E427CE5
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E427CE5:				; CODE XREF: sub_6E427CA0+3Bj
		and	edx, 1
		jz	short loc_6E427CED
		mov	byte ptr [edi],	0

loc_6E427CED:				; CODE XREF: sub_6E427CA0+48j
		mov	eax, [ebx+5Ch]
		mov	dword ptr [eax+2C4h], 0
		mov	dword ptr [eax+2C8h], 0
		mov	edi, [ebx+5Ch]
		mov	word ptr [edi+2CCh], 1
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_get_rbio
		add	edi, 2C4h
		mov	[esp+1Ch+var_10], edi
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 2Dh
		mov	[esp+1Ch+var_1C], eax
		call	BIO_ctrl
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 14h
		pop	ebx
		pop	edi
		jmp	sub_6E42ED20
; ---------------------------------------------------------------------------
		align 10h

loc_6E427D50:				; CODE XREF: sub_6E427CA0+1Dj
		mov	byte ptr [eax+2B8h], 0
		lea	edi, [eax+2B9h]
		mov	dl, 0Bh
		test	edi, 2
		jz	loc_6E427CCF
		nop
		lea	esi, [esi+0]

loc_6E427D70:				; CODE XREF: sub_6E427CA0+29j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E427CCF
sub_6E427CA0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E427D80	proc near		; CODE XREF: sub_6E4296E0+D7Ep

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	edx, [ebx+5Ch]
		mov	eax, [edx+2C0h]
		inc	eax
		mov	[edx+2C0h], eax
		cmp	eax, 2
		ja	short loc_6E427DB0
		xor	eax, eax

loc_6E427D9F:				; CODE XREF: sub_6E427D80+63j
					; sub_6E427D80+96j
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E427DB0:				; CODE XREF: sub_6E427D80+1Bj
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 20h
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_ctrl
		test	ah, 10h
		jz	short loc_6E427E20
		mov	eax, [ebx+5Ch]
		mov	edx, [eax+2C0h]

loc_6E427DDE:				; CODE XREF: sub_6E427D80+DFj
		xor	eax, eax
		cmp	edx, 0Ch
		jbe	short loc_6E427D9F
		mov	[esp+2Ch+var_1C], 1BCh
		mov	[esp+2Ch+var_20], offset aD1_lib_c ; "d1_lib.c"
		mov	[esp+2Ch+var_24], 138h
		mov	[esp+2Ch+var_28], 13Ch
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E427D9F
; ---------------------------------------------------------------------------
		align 10h

loc_6E427E20:				; CODE XREF: sub_6E427D80+53j
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_get_wbio
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 2Fh
		mov	[esp+2Ch+var_2C], eax
		call	BIO_ctrl
		mov	edx, [ebx+5Ch]
		cmp	eax, [edx+25Ch]
		jnb	short loc_6E427E59
		mov	[edx+25Ch], eax

loc_6E427E59:				; CODE XREF: sub_6E427D80+D1j
		mov	edx, [edx+2C0h]
		jmp	loc_6E427DDE
sub_6E427D80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E427E70	proc near		; CODE XREF: sub_6E4281F0+9Aj
					; sub_6E4296E0+63p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx+5Ch]
		mov	edx, [eax+2C4h]
		test	edx, edx
		jnz	short loc_6E427E96
		mov	eax, [eax+2C8h]
		test	eax, eax
		jz	loc_6E427F1E

loc_6E427E96:				; CODE XREF: sub_6E427E70+16j
		lea	edi, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], edi
		mov	ebp, ds:_ftime
		call	ebp ; _ftime
		mov	ecx, [esp+4Ch+var_28]
		xor	eax, eax
		mov	ax, word ptr [esp+4Ch+var_24]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 3
		mov	[esp+4Ch+var_34], eax
		mov	esi, [ebx+5Ch]
		mov	edx, [esi+2C4h]
		cmp	ecx, edx
		jg	short loc_6E427F38
		jz	short loc_6E427F30

loc_6E427ECF:				; CODE XREF: sub_6E427E70+C6j
		mov	eax, [esi+2C4h]
		mov	[esp+4Ch+var_30], eax
		mov	[esp+4Ch+var_28], eax
		mov	eax, [esi+2C8h]
		mov	[esp+4Ch+var_38], eax
		mov	eax, [esp+4Ch+var_30]
		sub	eax, ecx
		mov	ecx, eax
		mov	[esp+4Ch+var_28], eax
		mov	eax, [esp+4Ch+var_34]
		sub	[esp+4Ch+var_38], eax
		mov	eax, [esp+4Ch+var_38]
		mov	[esp+4Ch+var_24], eax
		test	eax, eax
		js	loc_6E428100
		cmp	ecx, 0
		jnz	loc_6E4280B0

loc_6E427F14:				; CODE XREF: sub_6E427E70+2AAj
		cmp	[esp+4Ch+var_38], 3A97h
		jle	short loc_6E427F38

loc_6E427F1E:				; CODE XREF: sub_6E427E70+20j
					; sub_6E427E70:loc_6E4280B0j ...
		xor	eax, eax

loc_6E427F20:				; CODE XREF: sub_6E427E70+318j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E427F30:				; CODE XREF: sub_6E427E70+5Dj
		cmp	eax, [esi+2C8h]
		jl	short loc_6E427ECF

loc_6E427F38:				; CODE XREF: sub_6E427E70+5Bj
					; sub_6E427E70+ACj
		mov	[esp+4Ch+var_28], 0
		mov	[esp+4Ch+var_24], 0

loc_6E427F48:				; CODE XREF: sub_6E427E70+251j
		mov	eax, [esi+2CCh]
		add	eax, eax
		cmp	ax, 3Ch
		jbe	loc_6E428190
		mov	word ptr [esi+2CCh], 3Ch

loc_6E427F63:				; CODE XREF: sub_6E427E70+327j
		test	edx, edx
		jnz	short loc_6E427F7A
		mov	eax, [esi+2C8h]
		test	eax, eax
		jnz	short loc_6E427F7A
		mov	word ptr [esi+2CCh], 1

loc_6E427F7A:				; CODE XREF: sub_6E427E70+F5j
					; sub_6E427E70+FFj
		mov	[esp+4Ch+var_4C], edi
		call	ebp ; _ftime
		mov	eax, [esp+4Ch+var_28]
		mov	[esi+2C4h], eax
		xor	eax, eax
		mov	ax, word ptr [esp+4Ch+var_24]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 3
		mov	[esi+2C8h], eax
		mov	esi, [ebx+5Ch]
		xor	eax, eax
		mov	ax, [esi+2CCh]
		add	[esi+2C4h], eax
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_rbio
		add	esi, 2C4h
		mov	[esp+4Ch+var_40], esi
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 2Dh
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		mov	esi, [ebx+5Ch]
		mov	eax, [esi+2C0h]
		inc	eax
		mov	[esi+2C0h], eax
		cmp	eax, 2
		ja	loc_6E428120

loc_6E427FF7:				; CODE XREF: sub_6E427E70+2E1j
		mov	eax, [esi+2B8h]
		inc	eax
		cmp	eax, 2
		jbe	loc_6E4280D0
		mov	dword ptr [esi+2B8h], 1
		mov	ecx, [ebx+188h]
		test	ecx, ecx
		jnz	loc_6E4280E4

loc_6E42801F:				; CODE XREF: sub_6E427E70+26Ej
		mov	edx, [esi+2C4h]
		test	edx, edx
		jnz	short loc_6E42803C
		mov	eax, [esi+2C8h]
		test	eax, eax
		jnz	short loc_6E42803C
		mov	word ptr [esi+2CCh], 1

loc_6E42803C:				; CODE XREF: sub_6E427E70+1B7j
					; sub_6E427E70+1C1j
		mov	[esp+4Ch+var_4C], edi
		call	ebp ; _ftime
		mov	eax, [esp+4Ch+var_28]
		mov	[esi+2C4h], eax
		xor	eax, eax
		mov	ax, word ptr [esp+4Ch+var_24]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 3
		mov	[esi+2C8h], eax
		mov	esi, [ebx+5Ch]
		xor	eax, eax
		mov	ax, [esi+2CCh]
		add	[esi+2C4h], eax
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_rbio
		add	esi, 2C4h
		mov	[esp+4Ch+var_40], esi
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 2Dh
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42DBE0
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E4280B0:				; CODE XREF: sub_6E427E70+9Ej
					; sub_6E427E70+2A8j
		jg	loc_6E427F1E
		cmp	[esp+4Ch+var_38], 0
		jg	loc_6E427F1E
		jmp	loc_6E427F48
; ---------------------------------------------------------------------------
		align 10h

loc_6E4280D0:				; CODE XREF: sub_6E427E70+191j
		mov	[esi+2B8h], eax
		mov	ecx, [ebx+188h]
		test	ecx, ecx
		jz	loc_6E42801F

loc_6E4280E4:				; CODE XREF: sub_6E427E70+1A9j
		mov	dword ptr [ebx+188h], 0
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42F210
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E428100:				; CODE XREF: sub_6E427E70+95j
		dec	ecx
		mov	[esp+4Ch+var_28], ecx
		add	[esp+4Ch+var_38], 0F4240h
		mov	eax, [esp+4Ch+var_38]
		mov	[esp+4Ch+var_24], eax
		cmp	ecx, 0
		jnz	short loc_6E4280B0
		jmp	loc_6E427F14
; ---------------------------------------------------------------------------
		align 10h

loc_6E428120:				; CODE XREF: sub_6E427E70+181j
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 20h
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_ctrl
		test	ah, 10h
		jz	short loc_6E4281A0
		mov	esi, [ebx+5Ch]
		mov	eax, [esi+2C0h]

loc_6E42814E:				; CODE XREF: sub_6E427E70+36Fj
		cmp	eax, 0Ch
		jbe	loc_6E427FF7
		mov	[esp+4Ch+var_3C], 1BCh
		mov	[esp+4Ch+var_40], offset aD1_lib_c ; "d1_lib.c"
		mov	[esp+4Ch+var_44], 138h
		mov	[esp+4Ch+var_48], 13Ch
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E427F20
; ---------------------------------------------------------------------------
		align 10h

loc_6E428190:				; CODE XREF: sub_6E427E70+E4j
		mov	[esi+2CCh], ax
		jmp	loc_6E427F63
; ---------------------------------------------------------------------------
		align 10h

loc_6E4281A0:				; CODE XREF: sub_6E427E70+2D3j
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_wbio
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 2Fh
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		mov	esi, [ebx+5Ch]
		cmp	eax, [esi+25Ch]
		jnb	short loc_6E4281D9
		mov	[esi+25Ch], eax

loc_6E4281D9:				; CODE XREF: sub_6E427E70+361j
		mov	eax, [esi+2C0h]
		jmp	loc_6E42814E
sub_6E427E70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6E4281F0(int,	int, int, char *)
sub_6E4281F0	proc near		; DATA XREF: .rdata:6E44CD20o
					; .rdata:6E44CDC0o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		mov	esi, [esp+1Ch+arg_8]
		mov	edi, [esp+1Ch+arg_C]
		cmp	edx, 4Bh
		jz	loc_6E428300
		jle	short loc_6E428240
		cmp	edx, 78h
		jz	loc_6E4282B0
		cmp	edx, 79h
		jz	short loc_6E428270
		cmp	edx, 77h
		jz	short loc_6E428290

loc_6E428224:				; CODE XREF: sub_6E4281F0+5Ej
		mov	[esp+1Ch+arg_C], edi ; char *
		mov	[esp+1Ch+arg_8], esi ; int
		mov	[esp+1Ch+arg_4], edx ; int
		mov	[esp+1Ch+arg_0], ebx ; int
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_6E40E840
; ---------------------------------------------------------------------------
		align 10h

loc_6E428240:				; CODE XREF: sub_6E4281F0+1Fj
		cmp	edx, 49h
		jz	loc_6E4282E0
		jg	short loc_6E428280
		cmp	edx, 11h
		jnz	short loc_6E428224
		call	sub_6E42EE20
		sub	eax, 30h
		cmp	esi, eax
		jl	short loc_6E4282D0
		mov	eax, [ebx+5Ch]
		mov	[eax+25Ch], esi
		mov	eax, esi

loc_6E428267:				; CODE XREF: sub_6E4281F0+D7j
					; sub_6E4281F0+14Fj ...
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E428270:				; CODE XREF: sub_6E4281F0+2Dj
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_6E42EE20
; ---------------------------------------------------------------------------
		align 10h

loc_6E428280:				; CODE XREF: sub_6E4281F0+59j
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	sub_6E427E70
; ---------------------------------------------------------------------------
		align 10h

loc_6E428290:				; CODE XREF: sub_6E4281F0+32j
		xor	eax, eax
		cmp	dword ptr [ebx], 0FEFFh
		setz	al
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4282B0:				; CODE XREF: sub_6E4281F0+24j
		call	sub_6E42EE20
		cmp	eax, esi
		jg	short loc_6E4282D0
		mov	eax, [ebx+5Ch]
		mov	[eax+258h], esi
		mov	eax, 1
		jmp	short loc_6E428267
; ---------------------------------------------------------------------------
		align 10h

loc_6E4282D0:				; CODE XREF: sub_6E4281F0+6Aj
					; sub_6E4281F0+C7j
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4282E0:				; CODE XREF: sub_6E4281F0+53j
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], ebx
		call	sub_6E427A20
		test	eax, eax
		setnz	al
		and	eax, 0FFh
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E428300:				; CODE XREF: sub_6E4281F0+19j
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_clear
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 2000h
		mov	[esp+1Ch+var_18], 20h
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_ctrl
		mov	eax, [ebx+5Ch]
		mov	dword ptr [eax+254h], 1
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_accept
		test	eax, eax
		jle	loc_6E428267
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_get_rbio
		mov	[esp+1Ch+var_10], edi
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 2Eh
		mov	[esp+1Ch+var_1C], eax
		call	BIO_ctrl
		mov	eax, 1
		jmp	loc_6E428267
sub_6E4281F0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	[esp], ebx
		call	SSL_clear
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 2000h
		mov	dword ptr [esp+4], 20h
		mov	[esp], ebx
		call	SSL_ctrl
		mov	eax, [ebx+5Ch]
		mov	dword ptr [eax+254h], 1
		mov	[esp], ebx
		call	SSL_accept
		test	eax, eax
		jle	short loc_6E4283F6
		mov	[esp], ebx
		call	SSL_get_rbio
		mov	edx, [esp+24h]
		mov	[esp+0Ch], edx
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 2Eh
		mov	[esp], eax
		call	BIO_ctrl
		mov	eax, 1

loc_6E4283F6:				; CODE XREF: .text:6E4283C7j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E428400	proc near		; CODE XREF: sub_6E428E00+216p
					; sub_6E428E00+842p

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= byte ptr -9Ch
var_5C		= byte ptr -5Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	ebx, eax
		mov	esi, [eax+58h]
		mov	edi, [eax+0C0h]
		mov	eax, [eax+4Ch]
		add	eax, 0Dh
		mov	[esi+11Ch], eax
		cmp	dword ptr [esi+110h], 4540h
		jbe	short loc_6E428480
		mov	[esp+0BCh+var_AC], 1ABh
		mov	[esp+0BCh+var_B0], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+0BCh+var_B4], 96h
		mov	[esp+0BCh+var_B8], 101h
		mov	[esp+0BCh+var_BC], 14h
		call	ERR_put_error
		mov	eax, 16h

loc_6E42845E:				; CODE XREF: sub_6E428400+23Bj
					; sub_6E428400+2C1j ...
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], 2
		mov	[esp+0BCh+var_BC], ebx
		call	sub_6E4151B0
		xor	eax, eax

loc_6E428474:				; CODE XREF: sub_6E428400+276j
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E428480:				; CODE XREF: sub_6E428400+2Bj
		mov	[esi+118h], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax]
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], ebx
		call	eax
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E4285D0
		test	edi, edi
		jz	loc_6E4285F0
		mov	edx, [ebx+80h]
		test	edx, edx
		jz	loc_6E4285F0
		mov	eax, [ebx+84h]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E4285F0
		mov	eax, [ebx+84h]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_MD_CTX_md
		mov	[esp+0BCh+var_BC], eax
		call	EVP_MD_size
		mov	edi, eax
		cmp	eax, 40h
		ja	loc_6E428710

loc_6E4284F2:				; CODE XREF: sub_6E428400+32Cj
		mov	edx, [esi+10Ch]
		shr	edx, 8
		add	edx, [esi+110h]
		cmp	edi, edx
		ja	loc_6E428690
		mov	[esp+0BCh+var_A4], edx
		mov	eax, [ebx+80h]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		cmp	eax, 2
		mov	edx, [esp+0BCh+var_A4]
		jz	loc_6E428680

loc_6E42852D:				; CODE XREF: sub_6E428400+285j
		mov	[esp+0BCh+var_A4], edx
		mov	eax, [ebx+80h]
		mov	[esp+0BCh+var_BC], eax
		call	EVP_CIPHER_CTX_flags
		and	eax, 0F0007h
		cmp	eax, 2
		mov	edx, [esp+0BCh+var_A4]
		jz	loc_6E428776
		mov	eax, [esi+110h]
		sub	eax, edi
		mov	[esi+110h], eax
		add	eax, [esi+118h]
		mov	[esp+0BCh+var_A0], eax
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	[esp+0BCh+var_B4], 0
		lea	edx, [esp+0BCh+var_9C]
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_A4], edx
		mov	[esp+0BCh+var_BC], ebx
		call	eax
		test	eax, eax
		js	short loc_6E4285AF
		mov	ecx, [esp+0BCh+var_A0]
		test	ecx, ecx
		mov	edx, [esp+0BCh+var_A4]
		jz	short loc_6E4285AF

loc_6E42859B:				; CODE XREF: sub_6E428400+3CAj
		mov	[esp+0BCh+var_B4], edi
		mov	[esp+0BCh+var_B8], ecx
		mov	[esp+0BCh+var_BC], edx
		call	CRYPTO_memcmp
		test	eax, eax
		jz	short loc_6E4285B4

loc_6E4285AF:				; CODE XREF: sub_6E428400+18Dj
					; sub_6E428400+199j ...
		mov	ebp, 0FFFFFFFFh

loc_6E4285B4:				; CODE XREF: sub_6E428400+1ADj
		add	edi, 4400h
		cmp	[esi+110h], edi
		jbe	short loc_6E4285F0
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4285D0:				; CODE XREF: sub_6E428400+9Fj
					; sub_6E428400+1F2j
		mov	dword ptr [esi+110h], 0
		mov	dword ptr [ebx+50h], 0
		xor	eax, eax
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4285F0:				; CODE XREF: sub_6E428400+A7j
					; sub_6E428400+B5j ...
		test	ebp, ebp
		js	short loc_6E4285D0
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	short loc_6E428650
		cmp	dword ptr [esi+110h], 4400h
		jbe	short loc_6E428640
		mov	[esp+0BCh+var_AC], 20Eh
		mov	[esp+0BCh+var_B0], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+0BCh+var_B4], 8Ch
		mov	[esp+0BCh+var_B8], 101h
		mov	[esp+0BCh+var_BC], 14h
		call	ERR_put_error
		mov	eax, 16h
		jmp	loc_6E42845E
; ---------------------------------------------------------------------------

loc_6E428640:				; CODE XREF: sub_6E428400+208j
		mov	[esp+0BCh+var_BC], ebx
		call	sub_6E4129F0
		test	eax, eax
		jz	loc_6E4286D0

loc_6E428650:				; CODE XREF: sub_6E428400+1FCj
		cmp	dword ptr [esi+110h], 4000h
		ja	loc_6E428740
		mov	dword ptr [esi+114h], 0
		mov	dword ptr [ebx+50h], 0
		mov	eax, 1
		jmp	loc_6E428474
; ---------------------------------------------------------------------------
		align 10h

loc_6E428680:				; CODE XREF: sub_6E428400+127j
		lea	eax, [edi+1]
		cmp	edx, eax
		jnb	loc_6E42852D
		nop
		lea	esi, [esi+0]

loc_6E428690:				; CODE XREF: sub_6E428400+103j
		mov	[esp+0BCh+var_AC], 1E2h
		mov	[esp+0BCh+var_B0], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+0BCh+var_B4], 0A0h
		mov	[esp+0BCh+var_B8], 101h
		mov	[esp+0BCh+var_BC], 14h
		call	ERR_put_error
		mov	eax, 32h
		jmp	loc_6E42845E
; ---------------------------------------------------------------------------
		align 10h

loc_6E4286D0:				; CODE XREF: sub_6E428400+24Aj
		mov	[esp+0BCh+var_AC], 213h
		mov	[esp+0BCh+var_B0], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+0BCh+var_B4], 6Bh
		mov	[esp+0BCh+var_B8], 101h
		mov	[esp+0BCh+var_BC], 14h
		call	ERR_put_error
		mov	eax, 1Eh
		jmp	loc_6E42845E
; ---------------------------------------------------------------------------
		align 10h

loc_6E428710:				; CODE XREF: sub_6E428400+ECj
		mov	[esp+0BCh+var_B4], offset aMac_sizeEvp__0 ; "mac_size <= EVP_MAX_MD_SIZE"
		mov	[esp+0BCh+var_B8], 1D0h
		mov	[esp+0BCh+var_BC], offset aD1_pkt_c ; "d1_pkt.c"
		call	OpenSSLDie
		jmp	loc_6E4284F2
; ---------------------------------------------------------------------------
		jmp	short loc_6E428740
; ---------------------------------------------------------------------------
		align 10h

loc_6E428740:				; CODE XREF: sub_6E428400+25Aj
					; sub_6E428400+331j
		mov	[esp+0BCh+var_AC], 21Ah
		mov	[esp+0BCh+var_B0], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+0BCh+var_B4], 92h
		mov	[esp+0BCh+var_B8], 101h
		mov	[esp+0BCh+var_BC], 14h
		call	ERR_put_error
		mov	eax, 16h
		jmp	loc_6E42845E
; ---------------------------------------------------------------------------

loc_6E428776:				; CODE XREF: sub_6E428400+14Bj
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+var_B4], edi
		lea	eax, [esi+10Ch]
		mov	[esp+0BCh+var_B8], eax
		lea	ecx, [esp+0BCh+var_5C]
		mov	[esp+0BCh+var_BC], ecx
		mov	[esp+0BCh+var_A0], ecx
		call	sub_6E4176C0
		sub	[esi+110h], edi
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	[esp+0BCh+var_B4], 0
		lea	edx, [esp+0BCh+var_9C]
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_A4], edx
		mov	[esp+0BCh+var_BC], ebx
		call	eax
		test	eax, eax
		mov	edx, [esp+0BCh+var_A4]
		mov	ecx, [esp+0BCh+var_A0]
		jns	loc_6E42859B
		jmp	loc_6E4285AF
sub_6E428400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4287E0	proc near		; CODE XREF: sub_6E428E00+237p
					; sub_6E428E00+6E0p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1D		= byte ptr -1Dh

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, eax
		mov	ebp, edx
		mov	esi, ecx
		mov	eax, [edx]
		mov	[esp+3Ch+var_3C], eax
		call	pqueue_size
		cmp	eax, 63h
		jle	short loc_6E428810
		xor	eax, eax

loc_6E4287FE:				; CODE XREF: sub_6E4287E0+3CCj
					; sub_6E4287E0+40Ej
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E428810:				; CODE XREF: sub_6E4287E0+1Aj
		mov	[esp+3Ch+var_34], 0E6h
		mov	[esp+3Ch+var_38], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+3Ch+var_3C], 3Ch
		call	CRYPTO_malloc
		mov	edi, eax
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], esi
		call	pitem_new
		mov	[esp+3Ch+var_24], eax
		test	edi, edi
		jz	loc_6E428BF3
		test	eax, eax
		jz	loc_6E428BB1
		mov	eax, [ebx+4Ch]
		mov	esi, [esp+3Ch+var_28]
		mov	[esi], eax
		mov	eax, [ebx+50h]
		mov	[esi+4], eax
		mov	edx, [ebx+58h]
		lea	edi, [esi+8]
		lea	esi, [edx+0ECh]
		mov	eax, 10h
		test	edi, 1
		jnz	loc_6E428A80

loc_6E42887E:				; CODE XREF: sub_6E4287E0+2BBj
		test	edi, 2
		jnz	loc_6E428AA0

loc_6E42888A:				; CODE XREF: sub_6E4287E0+2CFj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_6E428A50
		test	al, 1
		jnz	loc_6E428A40

loc_6E4288A3:				; CODE XREF: sub_6E4287E0+26Aj
					; sub_6E4287E0+27Dj
		mov	edx, [ebx+58h]
		mov	eax, [esp+3Ch+var_28]
		lea	edi, [eax+18h]
		lea	esi, [edx+10Ch]
		mov	eax, 24h
		test	edi, 1
		jnz	loc_6E428AC0

loc_6E4288C4:				; CODE XREF: sub_6E4287E0+2FBj
		test	edi, 2
		jnz	loc_6E428AE0

loc_6E4288D0:				; CODE XREF: sub_6E4287E0+30Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_6E428A20
		test	al, 1
		jnz	loc_6E428A10

loc_6E4288E9:				; CODE XREF: sub_6E4287E0+23Aj
					; sub_6E4287E0+24Dj
		mov	eax, [esp+3Ch+var_24]
		mov	esi, [esp+3Ch+var_28]
		mov	[eax+8], esi
		mov	dword ptr [ebx+4Ch], 0
		mov	dword ptr [ebx+50h], 0
		mov	eax, [ebx+58h]
		lea	edi, [eax+0ECh]
		mov	edx, 10h
		test	edi, 1
		jnz	loc_6E428B00

loc_6E42891C:				; CODE XREF: sub_6E4287E0+32Fj
		test	edi, 2
		jnz	loc_6E428B20

loc_6E428928:				; CODE XREF: sub_6E4287E0+34Bj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E4289F0
		and	edx, 1
		jnz	loc_6E4289E0

loc_6E428943:				; CODE XREF: sub_6E4287E0+203j
					; sub_6E4287E0+21Bj
		mov	eax, [ebx+58h]
		lea	edi, [eax+10Ch]
		mov	edx, 24h
		test	edi, 1
		jnz	loc_6E428B30

loc_6E42895D:				; CODE XREF: sub_6E4287E0+35Fj
		test	edi, 2
		jnz	loc_6E428A70

loc_6E428969:				; CODE XREF: sub_6E4287E0+29Bj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	short loc_6E4289D0
		and	edx, 1
		jnz	short loc_6E4289C0

loc_6E42897C:				; CODE XREF: sub_6E4287E0+1E3j
					; sub_6E4287E0+1FBj
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E416DB0
		test	eax, eax
		jz	loc_6E428B50
		mov	eax, [ebp+0]
		mov	ebx, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], eax
		call	pqueue_insert
		test	eax, eax
		jz	loc_6E428C01
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4289C0:				; CODE XREF: sub_6E4287E0+19Aj
					; sub_6E4287E0+1FDj
		mov	byte ptr [edi],	0
		jmp	short loc_6E42897C
; ---------------------------------------------------------------------------
		align 10h

loc_6E4289D0:				; CODE XREF: sub_6E4287E0+195j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	short loc_6E42897C
		jmp	short loc_6E4289C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4289E0:				; CODE XREF: sub_6E4287E0+15Dj
					; sub_6E4287E0+221j
		mov	byte ptr [edi],	0
		jmp	loc_6E428943
; ---------------------------------------------------------------------------
		align 10h

loc_6E4289F0:				; CODE XREF: sub_6E4287E0+154j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E428943
		jmp	short loc_6E4289E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E428A10:				; CODE XREF: sub_6E4287E0+103j
					; sub_6E4287E0+253j
		mov	al, [esi+edx]
		mov	[esp+3Ch+var_1D], al
		mov	[edi+edx], al
		jmp	loc_6E4288E9
; ---------------------------------------------------------------------------
		align 10h

loc_6E428A20:				; CODE XREF: sub_6E4287E0+FBj
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E4288E9
		jmp	short loc_6E428A10
; ---------------------------------------------------------------------------
		align 10h

loc_6E428A40:				; CODE XREF: sub_6E4287E0+BDj
					; sub_6E4287E0+283j
		mov	al, [esi+edx]
		mov	[esp+3Ch+var_1D], al
		mov	[edi+edx], al
		jmp	loc_6E4288A3
; ---------------------------------------------------------------------------
		align 10h

loc_6E428A50:				; CODE XREF: sub_6E4287E0+B5j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E4288A3
		jmp	short loc_6E428A40
; ---------------------------------------------------------------------------
		align 10h

loc_6E428A70:				; CODE XREF: sub_6E4287E0+183j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E428969
; ---------------------------------------------------------------------------

loc_6E428A80:				; CODE XREF: sub_6E4287E0+98j
		mov	ecx, [esp+3Ch+var_28]
		mov	al, [edx+0ECh]
		mov	[ecx+8], al
		lea	edi, [ecx+9]
		lea	esi, [edx+0EDh]
		mov	eax, 0Fh
		jmp	loc_6E42887E
; ---------------------------------------------------------------------------

loc_6E428AA0:				; CODE XREF: sub_6E4287E0+A4j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E42888A
; ---------------------------------------------------------------------------
		align 10h

loc_6E428AC0:				; CODE XREF: sub_6E4287E0+DEj
		mov	ecx, [esp+3Ch+var_28]
		mov	al, [edx+10Ch]
		mov	[ecx+18h], al
		lea	edi, [ecx+19h]
		lea	esi, [edx+10Dh]
		mov	eax, 23h
		jmp	loc_6E4288C4
; ---------------------------------------------------------------------------

loc_6E428AE0:				; CODE XREF: sub_6E4287E0+EAj
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E4288D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E428B00:				; CODE XREF: sub_6E4287E0+136j
		mov	byte ptr [eax+0ECh], 0
		lea	edi, [eax+0EDh]
		mov	dl, 0Fh
		jmp	loc_6E42891C
; ---------------------------------------------------------------------------
		align 10h

loc_6E428B20:				; CODE XREF: sub_6E4287E0+142j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E428928
; ---------------------------------------------------------------------------

loc_6E428B30:				; CODE XREF: sub_6E4287E0+177j
		mov	byte ptr [eax+10Ch], 0
		lea	edi, [eax+10Dh]
		mov	dl, 23h
		jmp	loc_6E42895D
; ---------------------------------------------------------------------------
		align 10h

loc_6E428B50:				; CODE XREF: sub_6E4287E0+1A6j
		mov	[esp+3Ch+var_2C], 109h

loc_6E428B58:				; CODE XREF: sub_6E4287E0+429j
		mov	[esp+3Ch+var_30], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+3Ch+var_34], 44h
		mov	[esp+3Ch+var_38], 0F7h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+var_28]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_6E428B8F
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_free

loc_6E428B8F:				; CODE XREF: sub_6E4287E0+3A5j
		mov	eax, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_free
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], eax
		call	pitem_free
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4287FE
; ---------------------------------------------------------------------------

loc_6E428BB1:				; CODE XREF: sub_6E4287E0+6Cj
		mov	eax, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_free

loc_6E428BBD:				; CODE XREF: sub_6E4287E0+415j
					; sub_6E4287E0+41Fj
		mov	[esp+3Ch+var_2C], 0EEh
		mov	[esp+3Ch+var_30], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+3Ch+var_34], 44h
		mov	[esp+3Ch+var_38], 0F7h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E4287FE
; ---------------------------------------------------------------------------

loc_6E428BF3:				; CODE XREF: sub_6E4287E0+64j
		test	eax, eax
		jz	short loc_6E428BBD
		mov	[esp+3Ch+var_3C], eax
		call	pitem_free
		jmp	short loc_6E428BBD
; ---------------------------------------------------------------------------

loc_6E428C01:				; CODE XREF: sub_6E4287E0+1C1j
		mov	[esp+3Ch+var_2C], 113h
		jmp	loc_6E428B58
sub_6E4287E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E428C10	proc near		; CODE XREF: sub_6E428E00+6F2p
					; sub_6E428E00+854p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8
		lea	esi, [eax+8]
		mov	[esp+18h+var_18], esi
		lea	esi, [edx+4]
		mov	[esp+18h+var_14], esi
		movzx	esi, byte ptr [eax+0Fh]
		and	esi, 0FFh
		xor	ecx, ecx
		mov	cl, [edx+0Bh]
		sub	esi, ecx
		mov	ebx, esi
		sar	ebx, 8
		xor	ecx, ecx
		mov	cl, [eax+0Eh]
		movzx	edi, byte ptr [edx+0Ah]
		and	edi, 0FFh
		sub	ecx, edi
		add	ebx, ecx
		mov	edi, ebx
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+0Dh]
		movzx	ebp, byte ptr [edx+9]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	edi, ecx
		test	esi, 80h
		jz	loc_6E428D40
		and	ebx, edi
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+0Ch]
		movzx	ebp, byte ptr [edx+8]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	edi, ecx
		and	ebx, edi
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+0Bh]
		movzx	ebp, byte ptr [edx+7]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	edi, ecx
		and	ebx, edi
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+0Ah]
		movzx	ebp, byte ptr [edx+6]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	edi, ecx
		and	ebx, edi
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+9]
		movzx	ebp, byte ptr [edx+5]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	edi, ecx
		and	ebx, edi
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+8]
		movzx	ebp, byte ptr [edx+4]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	ecx, edi
		and	ebx, ecx
		not	ebx
		sar	ecx, 8
		shl	ecx, 8
		test	bl, bl
		jnz	loc_6E428DC8

loc_6E428CFB:				; CODE XREF: sub_6E428C10+1B2j
		and	esi, 0FFh
		add	ecx, esi
		test	ecx, ecx
		jle	loc_6E428DD3

loc_6E428D0B:				; CODE XREF: sub_6E428C10+1BDj
		cmp	ecx, 1Fh
		jbe	loc_6E428DF0
		mov	dword ptr [edx], 1

loc_6E428D1A:				; CODE XREF: sub_6E428C10+1E9j
		mov	eax, [eax+8]
		mov	[edx+4], eax
		mov	eax, [esp+18h+var_18]
		mov	eax, [eax+4]
		mov	edx, [esp+18h+var_14]
		mov	[edx+4], eax

loc_6E428D2D:				; CODE XREF: sub_6E428C10+1C8j
		add	esp, 8
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E428D40:				; CODE XREF: sub_6E428C10+5Bj
		or	ebx, edi
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+0Ch]
		movzx	ebp, byte ptr [edx+8]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	edi, ecx
		or	ebx, edi
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+0Bh]
		movzx	ebp, byte ptr [edx+7]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	edi, ecx
		or	ebx, edi
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+0Ah]
		movzx	ebp, byte ptr [edx+6]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	edi, ecx
		or	ebx, edi
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+9]
		movzx	ebp, byte ptr [edx+5]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	edi, ecx
		or	ebx, edi
		sar	edi, 8
		xor	ecx, ecx
		mov	cl, [eax+8]
		movzx	ebp, byte ptr [edx+4]
		and	ebp, 0FFh
		sub	ecx, ebp
		add	ecx, edi
		or	ebx, ecx
		sar	ecx, 8
		shl	ecx, 8
		test	bl, bl
		jz	loc_6E428CFB

loc_6E428DC8:				; CODE XREF: sub_6E428C10+E5j
		or	cl, 80h
		test	ecx, ecx
		jg	loc_6E428D0B

loc_6E428DD3:				; CODE XREF: sub_6E428C10+F5j
		neg	ecx
		cmp	ecx, 1Fh
		ja	loc_6E428D2D
		mov	eax, 1
		shl	eax, cl
		or	[edx], eax
		add	esp, 8
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E428DF0:				; CODE XREF: sub_6E428C10+FEj
		mov	ebx, [edx]
		shl	ebx, cl
		or	ebx, 1
		mov	[edx], ebx
		jmp	loc_6E428D1A
sub_6E428C10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E428E00	proc near		; CODE XREF: sub_6E4296E0+283p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	[esp+4Ch+var_30], eax
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+238h]
		mov	[esp+4Ch+var_4C], eax
		call	pqueue_peek
		test	eax, eax
		jz	loc_6E429190
		mov	eax, [ebx+5Ch]
		mov	edi, [eax+208h]
		cmp	[eax+234h], di
		jz	loc_6E429047

loc_6E428E41:				; CODE XREF: sub_6E428E00+3A8j
					; sub_6E428E00+866j
		mov	eax, [eax+240h]
		mov	[esp+4Ch+var_4C], eax
		call	pqueue_pop
		mov	[esp+4Ch+var_2C], eax
		test	eax, eax
		jz	loc_6E4291AD
		mov	ebp, [eax+8]
		mov	edx, [ebx+58h]
		mov	eax, [edx+0ECh]
		test	eax, eax
		jz	short loc_6E428E76
		mov	[esp+4Ch+var_4C], eax
		call	CRYPTO_free
		mov	edx, [ebx+58h]

loc_6E428E76:				; CODE XREF: sub_6E428E00+69j
		mov	eax, [ebp+0]
		mov	[ebx+4Ch], eax
		mov	eax, [ebp+4]
		mov	[ebx+50h], eax
		lea	edi, [edx+0ECh]
		lea	esi, [ebp+8]
		mov	eax, 10h
		test	edi, 1
		jnz	loc_6E4296A8

loc_6E428E9C:				; CODE XREF: sub_6E428E00+8BFj
		test	edi, 2
		jnz	loc_6E4296C4

loc_6E428EA8:				; CODE XREF: sub_6E428E00+8D3j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_6E429120
		test	al, 1
		jnz	loc_6E429110

loc_6E428EC1:				; CODE XREF: sub_6E428E00+31Aj
					; sub_6E428E00+32Dj
		mov	edx, [ebx+58h]
		lea	edi, [edx+10Ch]
		lea	esi, [ebp+18h]
		mov	eax, 24h
		test	edi, 1
		jnz	loc_6E429678

loc_6E428EDE:				; CODE XREF: sub_6E428E00+88Fj
		test	edi, 2
		jnz	loc_6E429694

loc_6E428EEA:				; CODE XREF: sub_6E428E00+8A3j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_6E4290F0
		test	al, 1
		jnz	loc_6E4290E0

loc_6E428F03:				; CODE XREF: sub_6E428E00+2EAj
					; sub_6E428E00+2FDj
		mov	eax, [ebx+58h]
		mov	edx, [ebp+0]
		mov	ecx, [edx+5]
		mov	[eax+0Ah], ecx
		mov	dx, [edx+9]
		mov	[eax+0Eh], dx
		mov	edi, [esp+4Ch+var_2C]
		mov	eax, [edi+8]
		mov	[esp+4Ch+var_4C], eax
		call	CRYPTO_free
		mov	[esp+4Ch+var_4C], edi
		call	pitem_free
		mov	eax, 1

loc_6E428F33:				; CODE XREF: sub_6E428E00+450j
					; sub_6E428E00+85Ej
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E428F40:				; CODE XREF: sub_6E428E00+2B5j
		mov	dl, [ebp+8]
		mov	[ecx+0ECh], dl
		lea	edi, [ecx+0EDh]
		lea	esi, [ebp+9]
		mov	edx, 0Fh
		test	edi, 2
		jnz	loc_6E4290C7
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E428F70:				; CODE XREF: sub_6E428E00+2C1j
					; sub_6E428E00+2D6j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		test	dl, 2
		jz	short loc_6E428F87
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E428F87:				; CODE XREF: sub_6E428E00+17Aj
		and	edx, 1
		jz	short loc_6E428F96
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+4Ch+var_2C], dl
		mov	[edi+ecx], dl

loc_6E428F96:				; CODE XREF: sub_6E428E00+18Aj
		mov	ecx, [ebx+58h]
		lea	edi, [ecx+10Ch]
		lea	esi, [ebp+18h]
		mov	edx, 24h
		test	edi, 1
		jnz	loc_6E429140
		test	edi, 2
		jnz	loc_6E429170

loc_6E428FBF:				; CODE XREF: sub_6E428E00+35Dj
					; sub_6E428E00+37Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		test	dl, 2
		jz	short loc_6E428FD6
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E428FD6:				; CODE XREF: sub_6E428E00+1C9j
		and	edx, 1
		jz	short loc_6E428FE5
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+4Ch+var_2C], dl
		mov	[edi+ecx], dl

loc_6E428FE5:				; CODE XREF: sub_6E428E00+1D9j
		mov	edx, [ebx+58h]
		mov	ecx, [ebp+0]
		mov	esi, [ecx+5]
		mov	[edx+0Ah], esi
		mov	cx, [ecx+9]
		mov	[edx+0Eh], cx
		mov	edx, [eax+8]
		mov	[esp+4Ch+var_2C], eax
		mov	[esp+4Ch+var_4C], edx
		call	CRYPTO_free
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax
		call	pitem_free

loc_6E429014:				; CODE XREF: sub_6E428E00+270j
		mov	eax, ebx
		call	sub_6E428400
		test	eax, eax
		jz	loc_6E429663
		mov	eax, [ebx+58h]
		lea	ecx, [eax+128h]
		mov	eax, [ebx+5Ch]
		lea	edx, [eax+240h]
		mov	eax, ebx
		call	sub_6E4287E0
		test	eax, eax
		js	loc_6E42966B
		mov	eax, [ebx+5Ch]

loc_6E429047:				; CODE XREF: sub_6E428E00+3Bj
		mov	eax, [eax+238h]
		mov	[esp+4Ch+var_4C], eax
		call	pqueue_peek
		test	eax, eax
		jz	loc_6E429190
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+238h]
		mov	[esp+4Ch+var_4C], eax
		call	pqueue_pop
		test	eax, eax
		jz	short loc_6E429014
		mov	ebp, [eax+8]
		mov	ecx, [ebx+58h]
		mov	edx, [ecx+0ECh]
		test	edx, edx
		jz	short loc_6E429095
		mov	[esp+4Ch+var_2C], eax
		mov	[esp+4Ch+var_4C], edx
		call	CRYPTO_free
		mov	ecx, [ebx+58h]
		mov	eax, [esp+4Ch+var_2C]

loc_6E429095:				; CODE XREF: sub_6E428E00+280j
		mov	edx, [ebp+0]
		mov	[ebx+4Ch], edx
		mov	edx, [ebp+4]
		mov	[ebx+50h], edx
		lea	edi, [ecx+0ECh]
		lea	esi, [ebp+8]
		mov	edx, 10h
		test	edi, 1
		jnz	loc_6E428F40
		test	edi, 2
		jz	loc_6E428F70

loc_6E4290C7:				; CODE XREF: sub_6E428E00+15Dj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E428F70
; ---------------------------------------------------------------------------
		align 10h

loc_6E4290E0:				; CODE XREF: sub_6E428E00+FDj
					; sub_6E428E00+303j
		mov	al, [esi+edx]
		mov	byte ptr [esp+4Ch+var_30], al
		mov	[edi+edx], al
		jmp	loc_6E428F03
; ---------------------------------------------------------------------------
		align 10h

loc_6E4290F0:				; CODE XREF: sub_6E428E00+F5j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E428F03
		jmp	short loc_6E4290E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E429110:				; CODE XREF: sub_6E428E00+BBj
					; sub_6E428E00+333j
		mov	al, [esi+edx]
		mov	byte ptr [esp+4Ch+var_30], al
		mov	[edi+edx], al
		jmp	loc_6E428EC1
; ---------------------------------------------------------------------------
		align 10h

loc_6E429120:				; CODE XREF: sub_6E428E00+B3j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E428EC1
		jmp	short loc_6E429110
; ---------------------------------------------------------------------------
		align 10h

loc_6E429140:				; CODE XREF: sub_6E428E00+1ADj
		mov	dl, [ebp+18h]
		mov	[ecx+10Ch], dl
		lea	edi, [ecx+10Dh]
		lea	esi, [ebp+19h]
		mov	edx, 23h
		test	edi, 2
		jz	loc_6E428FBF
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E429170:				; CODE XREF: sub_6E428E00+1B9j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E428FBF
; ---------------------------------------------------------------------------
		align 10h

loc_6E429190:				; CODE XREF: sub_6E428E00+25j
					; sub_6E428E00+257j
		mov	eax, [ebx+5Ch]
		mov	edx, [eax+208h]
		mov	[eax+23Ch], dx
		inc	edx
		mov	[eax+234h], dx
		jmp	loc_6E428E41
; ---------------------------------------------------------------------------

loc_6E4291AD:				; CODE XREF: sub_6E428E00+55j
		mov	eax, [esp+4Ch+var_30]
		add	eax, 128h
		mov	[esp+4Ch+var_20], eax
		jmp	short loc_6E429220
; ---------------------------------------------------------------------------
		align 10h

loc_6E4291C0:				; CODE XREF: sub_6E428E00+427j
		mov	eax, [ebx+50h]
		cmp	eax, 0Ch
		jbe	short loc_6E429229
		mov	edi, [esp+4Ch+var_30]
		mov	esi, [edi+110h]

loc_6E4291D2:				; CODE XREF: sub_6E428E00+7DCj
		sub	eax, 0Dh
		cmp	eax, esi
		jb	loc_6E429310

loc_6E4291DD:				; CODE XREF: sub_6E428E00+530j
		mov	dword ptr [ebx+38h], 0F0h
		mov	ecx, [ebx+5Ch]
		mov	eax, [esp+4Ch+var_30]
		mov	eax, [eax+124h]
		xor	edx, edx
		mov	dx, [ecx+208h]
		cmp	eax, edx
		jz	loc_6E429340
		inc	edx
		cmp	eax, edx
		jz	loc_6E4295F0

loc_6E42920B:				; CODE XREF: sub_6E428E00+52Aj
					; sub_6E428E00+664j ...
		mov	eax, [esp+4Ch+var_30]
		mov	dword ptr [eax+110h], 0

loc_6E429219:				; CODE XREF: sub_6E428E00+45Aj
		mov	dword ptr [ebx+50h], 0

loc_6E429220:				; CODE XREF: sub_6E428E00+3BAj
					; sub_6E428E00+4FDj ...
		cmp	dword ptr [ebx+38h], 0F1h
		jz	short loc_6E4291C0

loc_6E429229:				; CODE XREF: sub_6E428E00+3C6j
		mov	[esp+4Ch+var_40], 0
		mov	eax, [ebx+58h]
		mov	eax, [eax+0F0h]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 0Dh
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E4125B0
		test	eax, eax
		jle	loc_6E428F33
		cmp	dword ptr [ebx+50h], 0Dh
		jnz	short loc_6E429219
		mov	dword ptr [ebx+38h], 0F1h
		mov	eax, [ebx+4Ch]
		xor	edx, edx
		mov	dl, [eax]
		mov	edi, [esp+4Ch+var_30]
		mov	[edi+10Ch], edx
		xor	edx, edx
		mov	dl, [eax+1]
		shl	edx, 8
		movzx	ebp, byte ptr [eax+2]
		and	ebp, 0FFh
		or	ebp, edx
		xor	edx, edx
		mov	dl, [eax+3]
		shl	edx, 8
		movzx	esi, byte ptr [eax+4]
		and	esi, 0FFh
		or	edx, esi
		mov	[edi+124h], edx
		mov	edx, [ebx+58h]
		mov	esi, [eax+5]
		mov	[edx+0Ah], esi
		mov	si, [eax+9]
		mov	[edx+0Eh], si
		movzx	esi, byte ptr [eax+0Bh]
		and	esi, 0FFh
		shl	esi, 8
		mov	cl, [eax+0Ch]
		and	ecx, 0FFh
		or	esi, ecx
		mov	[edi+110h], esi
		mov	eax, [ebx+10Ch]
		test	eax, eax
		jnz	loc_6E4295C0
		xor	ecx, ecx
		mov	cx, bp
		cmp	ecx, [ebx]
		jz	loc_6E4295CD
		mov	dword ptr [edi+110h], 0
		mov	dword ptr [ebx+50h], 0
		jmp	loc_6E429220
; ---------------------------------------------------------------------------
		align 10h

loc_6E429310:				; CODE XREF: sub_6E428E00+3D7j
		mov	[esp+4Ch+var_40], 1
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E4125B0
		cmp	eax, esi
		jnz	loc_6E42920B
		jmp	loc_6E4291DD
; ---------------------------------------------------------------------------
		align 10h

loc_6E429340:				; CODE XREF: sub_6E428E00+3FCj
		lea	edi, [ecx+20Ch]
		mov	[esp+4Ch+var_24], 0

loc_6E42934E:				; CODE XREF: sub_6E428E00+818j
		mov	eax, [ecx+254h]
		test	eax, eax
		jz	short loc_6E429369
		mov	eax, [esp+4Ch+var_30]
		cmp	dword ptr [eax+10Ch], 16h
		jz	loc_6E429620

loc_6E429369:				; CODE XREF: sub_6E428E00+556j
					; sub_6E428E00+824j ...
		mov	eax, [ebx+58h]
		lea	ecx, [eax+8]
		mov	[esp+4Ch+var_28], ecx
		xor	ecx, ecx
		mov	cl, [eax+0Fh]
		mov	[esp+4Ch+var_2C], ecx
		xor	edx, edx
		mov	dl, [edi+0Bh]
		sub	[esp+4Ch+var_2C], edx
		mov	esi, [esp+4Ch+var_2C]
		mov	ecx, esi
		sar	ecx, 8
		xor	edx, edx
		mov	dl, [eax+0Eh]
		and	esi, 80h
		movzx	esi, byte ptr [edi+0Ah]
		jnz	loc_6E429500
		and	esi, 0FFh
		sub	edx, esi
		add	ecx, edx
		mov	esi, ecx
		sar	esi, 8
		xor	edx, edx
		mov	dl, [eax+0Dh]
		movzx	ebp, byte ptr [edi+9]
		and	ebp, 0FFh
		sub	edx, ebp
		add	edx, esi
		or	ecx, edx
		mov	ebp, ecx
		sar	edx, 8
		xor	ecx, ecx
		mov	cl, [eax+0Ch]
		movzx	esi, byte ptr [edi+8]
		and	esi, 0FFh
		sub	ecx, esi
		add	edx, ecx
		or	ebp, edx
		sar	edx, 8
		xor	ecx, ecx
		mov	cl, [eax+0Bh]
		movzx	esi, byte ptr [edi+7]
		and	esi, 0FFh
		sub	ecx, esi
		add	ecx, edx
		or	ebp, ecx
		sar	ecx, 8
		xor	edx, edx
		mov	dl, [eax+0Ah]
		movzx	esi, byte ptr [edi+6]
		and	esi, 0FFh
		sub	edx, esi
		add	ecx, edx
		or	ebp, ecx
		sar	ecx, 8
		xor	edx, edx
		mov	dl, [eax+9]
		movzx	esi, byte ptr [edi+5]
		and	esi, 0FFh
		sub	edx, esi
		add	ecx, edx
		or	ebp, ecx
		sar	ecx, 8
		xor	edx, edx
		mov	dl, [eax+8]
		movzx	esi, byte ptr [edi+4]
		and	esi, 0FFh
		sub	edx, esi
		add	edx, ecx
		or	ebp, edx
		sar	edx, 8
		shl	edx, 8
		mov	ecx, ebp
		test	cl, cl
		jnz	loc_6E4295B0

loc_6E429451:				; CODE XREF: sub_6E428E00+7AAj
		xor	ecx, ecx
		mov	cl, byte ptr [esp+4Ch+var_2C]
		add	edx, ecx

loc_6E429459:				; CODE XREF: sub_6E428E00+7B3j
		test	edx, edx
		jg	short loc_6E429477
		mov	ecx, edx
		neg	ecx
		cmp	ecx, 1Fh
		ja	loc_6E42920B
		mov	esi, [edi]
		shr	esi, cl
		and	esi, 1
		jnz	loc_6E42920B

loc_6E429477:				; CODE XREF: sub_6E428E00+65Bj
		mov	edx, [eax+8]
		mov	[eax+128h], edx
		mov	esi, [esp+4Ch+var_28]
		mov	edx, [esi+4]
		mov	[eax+12Ch], edx

loc_6E42948D:				; CODE XREF: sub_6E428E00+837j
		mov	eax, [esp+4Ch+var_30]
		mov	ebp, [eax+110h]
		test	ebp, ebp
		jz	loc_6E429220
		mov	esi, [esp+4Ch+var_24]
		test	esi, esi
		jz	loc_6E429640
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_state
		test	ah, 30h
		jnz	short loc_6E4294C3
		mov	ecx, [ebx+1Ch]
		test	ecx, ecx
		jz	loc_6E42920B

loc_6E4294C3:				; CODE XREF: sub_6E428E00+6B6j
		mov	eax, [ebx+5Ch]
		mov	edx, [eax+254h]
		test	edx, edx
		jnz	loc_6E42920B
		lea	edx, [eax+238h]
		mov	ecx, [esp+4Ch+var_20]
		mov	eax, ebx
		call	sub_6E4287E0
		test	eax, eax
		js	loc_6E42966B
		mov	eax, [ebx+58h]
		mov	edx, edi
		call	sub_6E428C10
		jmp	loc_6E42920B
; ---------------------------------------------------------------------------
		align 10h

loc_6E429500:				; CODE XREF: sub_6E428E00+59Dj
		and	esi, 0FFh
		sub	edx, esi
		add	ecx, edx
		mov	esi, ecx
		sar	esi, 8
		xor	edx, edx
		mov	dl, [eax+0Dh]
		movzx	ebp, byte ptr [edi+9]
		and	ebp, 0FFh
		sub	edx, ebp
		add	edx, esi
		and	ecx, edx
		mov	ebp, ecx
		sar	edx, 8
		xor	ecx, ecx
		mov	cl, [eax+0Ch]
		movzx	esi, byte ptr [edi+8]
		and	esi, 0FFh
		sub	ecx, esi
		add	edx, ecx
		and	ebp, edx
		sar	edx, 8
		xor	ecx, ecx
		mov	cl, [eax+0Bh]
		movzx	esi, byte ptr [edi+7]
		and	esi, 0FFh
		sub	ecx, esi
		add	ecx, edx
		and	ebp, ecx
		sar	ecx, 8
		xor	edx, edx
		mov	dl, [eax+0Ah]
		movzx	esi, byte ptr [edi+6]
		and	esi, 0FFh
		sub	edx, esi
		add	ecx, edx
		and	ebp, ecx
		sar	ecx, 8
		xor	edx, edx
		mov	dl, [eax+9]
		movzx	esi, byte ptr [edi+5]
		and	esi, 0FFh
		sub	edx, esi
		add	ecx, edx
		and	ebp, ecx
		sar	ecx, 8
		xor	edx, edx
		mov	dl, [eax+8]
		movzx	esi, byte ptr [edi+4]
		and	esi, 0FFh
		sub	edx, esi
		add	edx, ecx
		and	ebp, edx
		not	ebp
		sar	edx, 8
		shl	edx, 8
		mov	ecx, ebp
		test	cl, cl
		jz	loc_6E429451

loc_6E4295B0:				; CODE XREF: sub_6E428E00+64Bj
		or	dl, 80h
		jmp	loc_6E429459
; ---------------------------------------------------------------------------
		align 10h

loc_6E4295C0:				; CODE XREF: sub_6E428E00+4D9j
		mov	ecx, [ebx]
		xor	ecx, ebp
		and	ch, 0FFh
		jnz	loc_6E42920B

loc_6E4295CD:				; CODE XREF: sub_6E428E00+4E6j
		cmp	esi, 4540h
		ja	loc_6E42920B
		mov	eax, [ebx+50h]
		jmp	loc_6E4291D2
; ---------------------------------------------------------------------------
		jmp	short loc_6E4295F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4295F0:				; CODE XREF: sub_6E428E00+405j
					; sub_6E428E00+7E1j
		mov	eax, [esp+4Ch+var_30]
		mov	eax, [eax+10Ch]
		mov	[esp+4Ch+var_2C], eax
		sub	eax, 15h
		cmp	eax, 1
		ja	loc_6E42920B
		lea	edi, [ecx+218h]
		mov	[esp+4Ch+var_24], 1
		jmp	loc_6E42934E
; ---------------------------------------------------------------------------
		align 10h

loc_6E429620:				; CODE XREF: sub_6E428E00+563j
		cmp	dword ptr [ebx+50h], 0Dh
		jbe	loc_6E429369
		mov	eax, [ebx+4Ch]
		cmp	byte ptr [eax+0Dh], 1
		jnz	loc_6E429369
		jmp	loc_6E42948D
; ---------------------------------------------------------------------------
		align 10h

loc_6E429640:				; CODE XREF: sub_6E428E00+6A5j
		mov	eax, ebx
		call	sub_6E428400
		test	eax, eax
		jz	loc_6E42920B
		mov	eax, [ebx+58h]
		mov	edx, edi
		call	sub_6E428C10
		mov	eax, 1
		jmp	loc_6E428F33
; ---------------------------------------------------------------------------

loc_6E429663:				; CODE XREF: sub_6E428E00+21Dj
		mov	eax, [ebx+5Ch]
		jmp	loc_6E428E41
; ---------------------------------------------------------------------------

loc_6E42966B:				; CODE XREF: sub_6E428E00+23Ej
					; sub_6E428E00+6E7j
		mov	eax, 0FFFFFFFFh
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E429678:				; CODE XREF: sub_6E428E00+D8j
		mov	al, [ebp+18h]
		mov	[edx+10Ch], al
		lea	edi, [edx+10Dh]
		lea	esi, [ebp+19h]
		mov	eax, 23h
		jmp	loc_6E428EDE
; ---------------------------------------------------------------------------

loc_6E429694:				; CODE XREF: sub_6E428E00+E4j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E428EEA
; ---------------------------------------------------------------------------

loc_6E4296A8:				; CODE XREF: sub_6E428E00+96j
		mov	al, [ebp+8]
		mov	[edx+0ECh], al
		lea	edi, [edx+0EDh]
		lea	esi, [ebp+9]
		mov	eax, 0Fh
		jmp	loc_6E428E9C
; ---------------------------------------------------------------------------

loc_6E4296C4:				; CODE XREF: sub_6E428E00+A2j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E428EA8
sub_6E428E00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4296E0	proc near		; DATA XREF: .rdata:6E44CD14o
					; .rdata:6E44CDB4o ...

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_48		= byte ptr -48h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebp, [esp+7Ch+arg_0]
		mov	eax, [ebp+58h]
		mov	eax, [eax+0ECh]
		test	eax, eax
		jz	loc_6E42A106

loc_6E4296FF:				; CODE XREF: sub_6E4296E0+A30j
		mov	edi, [esp+7Ch+arg_4]
		test	edi, edi
		jnz	loc_6E429C03

loc_6E42970E:				; CODE XREF: sub_6E4296E0+52Bj
		mov	eax, [esp+7Ch+arg_10]
		test	eax, eax
		jz	short loc_6E429727
		cmp	[esp+7Ch+arg_4], 17h
		jnz	loc_6E429C1F

loc_6E429727:				; CODE XREF: sub_6E4296E0+37j
					; sub_6E4296E0+DEEj ...
		mov	esi, [ebp+1Ch]
		test	esi, esi
		jz	loc_6E42A050

loc_6E429732:				; CODE XREF: sub_6E4296E0+97Bj
					; sub_6E4296E0+991j
		mov	ebx, [ebp+58h]
		mov	[esp+7Ch+var_50], 0
		jmp	short loc_6E429753
; ---------------------------------------------------------------------------
		align 10h

loc_6E429740:				; CODE XREF: sub_6E4296E0+7Ej
					; sub_6E4296E0+88j ...
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E427E70
		test	eax, eax
		jle	loc_6E429890

loc_6E429750:				; CODE XREF: sub_6E4296E0+1A0j
					; sub_6E4296E0+29Ej ...
		mov	ebx, [ebp+58h]

loc_6E429753:				; CODE XREF: sub_6E4296E0+5Dj
					; sub_6E4296E0+1EEj ...
		mov	dword ptr [ebp+18h], 1
		cmp	dword ptr [ebp+34h], 3
		jnz	short loc_6E429740
		mov	eax, [ebx+110h]
		test	eax, eax
		jnz	short loc_6E429740
		mov	eax, [ebp+5Ch]
		mov	eax, [eax+250h]
		mov	[esp+7Ch+var_7C], eax
		call	pqueue_pop
		mov	[esp+7Ch+var_60], eax
		test	eax, eax
		jz	short loc_6E429740
		mov	eax, [eax+8]
		mov	ecx, [ebp+58h]
		mov	edx, [ecx+0ECh]
		test	edx, edx
		jz	short loc_6E4297A6
		mov	[esp+7Ch+var_5C], eax
		mov	[esp+7Ch+var_7C], edx
		call	CRYPTO_free
		mov	ecx, [ebp+58h]
		mov	eax, [esp+7Ch+var_5C]

loc_6E4297A6:				; CODE XREF: sub_6E4296E0+B1j
		mov	edx, [eax]
		mov	[ebp+4Ch], edx
		mov	edx, [eax+4]
		mov	[ebp+50h], edx
		lea	edi, [ecx+0ECh]
		lea	esi, [eax+8]
		mov	edx, 10h
		test	edi, 1
		jnz	loc_6E429DA4

loc_6E4297CB:				; CODE XREF: sub_6E4296E0+6DBj
		test	edi, 2
		jnz	loc_6E429D90

loc_6E4297D7:				; CODE XREF: sub_6E4296E0+6BFj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		test	dl, 2
		jz	short loc_6E4297EE
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E4297EE:				; CODE XREF: sub_6E4296E0+101j
		and	edx, 1
		jz	short loc_6E4297FD
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+7Ch+var_5C], dl
		mov	[edi+ecx], dl

loc_6E4297FD:				; CODE XREF: sub_6E4296E0+111j
		mov	ecx, [ebp+58h]
		lea	edi, [ecx+10Ch]
		lea	esi, [eax+18h]
		mov	edx, 24h
		test	edi, 1
		jnz	loc_6E429D74

loc_6E42981A:				; CODE XREF: sub_6E4296E0+6ABj
		test	edi, 2
		jnz	loc_6E429D60

loc_6E429826:				; CODE XREF: sub_6E4296E0+68Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		test	dl, 2
		jz	short loc_6E42983D
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E42983D:				; CODE XREF: sub_6E4296E0+150j
		and	edx, 1
		jz	short loc_6E42984C
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+7Ch+var_5C], dl
		mov	[edi+ecx], dl

loc_6E42984C:				; CODE XREF: sub_6E4296E0+160j
		mov	edx, [ebp+58h]
		mov	eax, [eax]
		mov	ecx, [eax+5]
		mov	[edx+0Ah], ecx
		mov	ax, [eax+9]
		mov	[edx+0Eh], ax
		mov	esi, [esp+7Ch+var_60]
		mov	eax, [esi+8]
		mov	[esp+7Ch+var_7C], eax
		call	CRYPTO_free
		mov	[esp+7Ch+var_7C], esi
		call	pitem_free
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E427E70
		test	eax, eax
		jg	loc_6E429750
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E429890:				; CODE XREF: sub_6E4296E0+6Aj
		mov	eax, [ebx+110h]
		test	eax, eax
		jz	loc_6E429960
		cmp	dword ptr [ebp+38h], 0F1h
		jz	loc_6E429960

loc_6E4298AB:				; CODE XREF: sub_6E4296E0+28Aj
		mov	edx, [ebp+5Ch]
		mov	eax, [edx+254h]
		test	eax, eax
		jz	short loc_6E4298E0
		cmp	dword ptr [ebx+10Ch], 16h
		jz	short loc_6E4298E0

loc_6E4298C1:				; CODE XREF: sub_6E4296E0+233j
					; sub_6E4296E0+928j ...
		mov	dword ptr [ebx+110h], 0
		mov	ebx, [ebp+58h]
		jmp	loc_6E429753
; ---------------------------------------------------------------------------
		align 10h

loc_6E4298E0:				; CODE XREF: sub_6E4296E0+1D6j
					; sub_6E4296E0+1DFj
		mov	eax, [ebp+58h]
		mov	edi, [eax+180h]
		test	edi, edi
		jz	loc_6E429990
		cmp	dword ptr [ebx+10Ch], 16h
		jz	loc_6E429990
		lea	ecx, [ebx+128h]
		add	edx, 250h
		mov	eax, ebp
		call	sub_6E4287E0
		test	eax, eax
		jns	short loc_6E4298C1
		mov	[esp+7Ch+var_6C], 379h

loc_6E42991D:				; CODE XREF: sub_6E4296E0+547j
		mov	[esp+7Ch+var_70], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+7Ch+var_74], 44h
		mov	[esp+7Ch+var_78], 102h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error

loc_6E429941:				; CODE XREF: sub_6E4296E0+51Ej
					; sub_6E4296E0+677j ...
		mov	[esp+7Ch+var_58], 0FFFFFFFFh
		mov	eax, [esp+7Ch+var_58]
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E429960:				; CODE XREF: sub_6E4296E0+1B8j
					; sub_6E4296E0+1C5j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E428E00
		test	eax, eax
		jg	loc_6E4298AB
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E42DB10
		test	eax, eax
		jg	loc_6E429750

loc_6E429984:				; CODE XREF: sub_6E4296E0+61Cj
					; sub_6E4296E0+954j ...
		mov	[esp+7Ch+var_58], eax
		jmp	loc_6E429E3D
; ---------------------------------------------------------------------------
		align 10h

loc_6E429990:				; CODE XREF: sub_6E4296E0+20Bj
					; sub_6E4296E0+218j
		mov	esi, [ebp+30h]
		and	esi, 2
		mov	[esp+7Ch+var_58], esi
		jnz	loc_6E42A20F
		mov	ecx, [ebx+10Ch]
		cmp	ecx, [esp+7Ch+arg_4]
		jz	loc_6E42A120
		cmp	ecx, 16h
		jz	loc_6E429AC0
		cmp	ecx, 15h
		jz	loc_6E429B46
		cmp	ecx, 18h
		jz	loc_6E42A2BD
		cmp	ecx, 14h
		jnz	loc_6E42A2A7

loc_6E4299D7:				; CODE XREF: sub_6E4296E0+449j
		mov	eax, [ebp+24h]
		test	eax, eax
		jnz	short loc_6E429A00
		cmp	dword ptr [edx+2E0h], 0Bh
		jbe	short loc_6E429A00
		cmp	byte ptr [edx+2D4h], 0
		jz	loc_6E429C2C
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E429A00:				; CODE XREF: sub_6E4296E0+2FCj
					; sub_6E4296E0+305j ...
		cmp	dword ptr [edx+2D0h], 1
		jbe	loc_6E429B63
		xor	ebx, ebx
		mov	bl, [edx+2CEh]
		movzx	esi, byte ptr [edx+2CFh]
		and	esi, 0FFh
		mov	dword ptr [edx+2D0h], 0
		mov	eax, [ebp+64h]
		test	eax, eax
		jz	short loc_6E429A68
		mov	ecx, [ebp+68h]
		mov	edi, [ebp+0]
		mov	[esp+7Ch+var_64], ecx
		mov	[esp+7Ch+var_68], ebp
		mov	[esp+7Ch+var_6C], 2
		add	edx, 2CEh
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], 15h
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], 0
		call	eax

loc_6E429A68:				; CODE XREF: sub_6E4296E0+351j
		mov	edi, [ebp+0D0h]
		test	edi, edi
		jz	loc_6E429DC0

loc_6E429A76:				; CODE XREF: sub_6E4296E0+6EEj
					; sub_6E4296E0+704j
		mov	eax, ebx
		shl	eax, 8
		or	eax, esi
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 4004h
		mov	[esp+7Ch+var_7C], ebp
		call	edi
		mov	[esp+7Ch+var_50], edi

loc_6E429A92:				; CODE XREF: sub_6E4296E0+6FAj
		cmp	ebx, 1
		jnz	loc_6E42A313
		mov	ebx, [ebp+58h]
		mov	[ebx+184h], esi
		test	esi, esi
		jnz	loc_6E429753
		or	dword ptr [ebp+30h], 2
		jmp	loc_6E429E3D
; ---------------------------------------------------------------------------
		align 10h

loc_6E429AC0:				; CODE XREF: sub_6E4296E0+2D6j
		lea	edi, [edx+2D4h]
		lea	esi, [edx+2E0h]
		mov	[esp+7Ch+var_54], esi
		mov	[esp+7Ch+var_5C], 0Ch

loc_6E429AD8:				; CODE XREF: sub_6E4296E0+47Ej
		mov	esi, [esp+7Ch+var_5C]
		cmp	[ebx+110h], esi
		jb	short loc_6E429B2E
		xor	eax, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E429AF0:				; CODE XREF: sub_6E4296E0+43Aj
		mov	ecx, [ebx+118h]
		mov	edx, [ebx+114h]
		lea	esi, [edx+1]
		mov	[ebx+114h], esi
		mov	cl, [ecx+edx]
		mov	byte ptr [esp+7Ch+var_60], cl
		mov	[edi+eax], cl
		dec	dword ptr [ebx+110h]
		inc	eax
		cmp	eax, [esp+7Ch+var_5C]
		jb	short loc_6E429AF0
		mov	eax, [esp+7Ch+var_54]
		mov	edi, [esp+7Ch+var_5C]
		mov	[eax], edi
		mov	edx, [ebp+5Ch]
		jmp	loc_6E4299D7
; ---------------------------------------------------------------------------

loc_6E429B2E:				; CODE XREF: sub_6E4296E0+402j
		mov	dword ptr [ebp+38h], 0F0h
		mov	dword ptr [ebx+110h], 0
		mov	ebx, eax
		jmp	loc_6E429753
; ---------------------------------------------------------------------------

loc_6E429B46:				; CODE XREF: sub_6E4296E0+2DFj
		lea	edi, [edx+2CEh]
		lea	esi, [edx+2D0h]
		mov	[esp+7Ch+var_54], esi
		mov	[esp+7Ch+var_5C], 2
		jmp	loc_6E429AD8
; ---------------------------------------------------------------------------

loc_6E429B63:				; CODE XREF: sub_6E4296E0+327j
		test	byte ptr [ebp+30h], 1
		jnz	loc_6E42A3DF
		mov	eax, [ebx+10Ch]
		cmp	eax, 14h
		jz	loc_6E429E49
		cmp	dword ptr [edx+2E0h], 0Bh
		jbe	short loc_6E429B90
		mov	edi, [ebp+1Ch]
		test	edi, edi
		jz	loc_6E429FDD

loc_6E429B90:				; CODE XREF: sub_6E4296E0+4A3j
		cmp	eax, 14h
		jl	loc_6E42A0B0
		cmp	eax, 16h
		jle	loc_6E429DF0
		cmp	eax, 17h
		jnz	loc_6E42A0B0
		mov	edx, [ebp+58h]
		mov	ebx, [edx+1A0h]
		test	ebx, ebx
		jz	loc_6E42A0D0
		mov	ecx, [edx+198h]
		test	ecx, ecx
		jz	loc_6E42A0D0
		mov	eax, [ebp+34h]
		test	ah, 10h
		jz	short loc_6E429BDD
		lea	ecx, [eax-1110h]
		cmp	ecx, 10h
		jbe	short loc_6E429BF4

loc_6E429BDD:				; CODE XREF: sub_6E4296E0+4F0j
		test	ah, 20h
		jz	loc_6E42A0D0
		sub	eax, 2110h
		cmp	eax, 10h
		ja	loc_6E42A0D0

loc_6E429BF4:				; CODE XREF: sub_6E4296E0+4FBj
		mov	dword ptr [edx+1A0h], 2
		jmp	loc_6E429941
; ---------------------------------------------------------------------------

loc_6E429C03:				; CODE XREF: sub_6E4296E0+28j
		cmp	[esp+7Ch+arg_4], 17h
		jz	loc_6E42970E
		cmp	[esp+7Ch+arg_4], 16h
		jz	loc_6E42A4B4

loc_6E429C1F:				; CODE XREF: sub_6E4296E0+41j
					; sub_6E4296E0+DDDj
		mov	[esp+7Ch+var_6C], 30Eh
		jmp	loc_6E42991D
; ---------------------------------------------------------------------------

loc_6E429C2C:				; CODE XREF: sub_6E4296E0+30Ej
		mov	eax, [ebp+0C0h]
		test	eax, eax
		jz	loc_6E429A00
		mov	eax, [eax+0B4h]
		test	eax, eax
		jz	loc_6E429A00
		mov	dword ptr [edx+2E0h], 0
		test	dword ptr [edx+2D4h], 0FFFFFF00h
		jnz	loc_6E42A271
		mov	eax, [ebp+64h]
		test	eax, eax
		jz	short loc_6E429C9E
		mov	ebx, [ebp+68h]
		mov	ecx, [ebp+0]
		mov	[esp+7Ch+var_64], ebx
		mov	[esp+7Ch+var_68], ebp
		mov	[esp+7Ch+var_6C], 4
		add	edx, 2D4h
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], 16h
		mov	[esp+7Ch+var_78], ecx
		mov	[esp+7Ch+var_7C], 0
		call	eax

loc_6E429C9E:				; CODE XREF: sub_6E4296E0+587j
		mov	[esp+7Ch+var_7C], ebp
		call	SSL_state
		cmp	eax, 3
		jnz	loc_6E429750
		mov	ebx, [ebp+58h]
		test	byte ptr [ebx],	1
		jnz	loc_6E429753
		mov	eax, [ebx+194h]
		test	eax, eax
		jnz	loc_6E429753
		mov	eax, [ebp+5Ch]
		inc	word ptr [eax+228h]
		mov	dword ptr [ebp+28h], 1
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E4105E0
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E410630
		test	eax, eax
		jz	loc_6E429750
		mov	eax, [ebp+20h]
		mov	[esp+7Ch+var_7C], ebp
		call	eax
		test	eax, eax
		js	loc_6E429984
		jz	loc_6E42A4A7

loc_6E429D08:				; CODE XREF: sub_6E4296E0+95Aj
		test	byte ptr [ebp+104h], 4
		jnz	loc_6E429750
		mov	ebx, [ebp+58h]
		mov	esi, [ebx+0F8h]
		test	esi, esi
		jnz	loc_6E429753
		mov	dword ptr [ebp+18h], 3
		mov	[esp+7Ch+var_7C], ebp
		call	SSL_get_rbio
		mov	ebx, eax

loc_6E429D37:				; CODE XREF: sub_6E4296E0+CFAj
		mov	[esp+7Ch+var_78], 0Fh
		mov	[esp+7Ch+var_7C], ebx
		call	BIO_clear_flags
		mov	[esp+7Ch+var_78], 9
		mov	[esp+7Ch+var_7C], ebx
		call	BIO_set_flags
		jmp	loc_6E429941
; ---------------------------------------------------------------------------
		align 10h

loc_6E429D60:				; CODE XREF: sub_6E4296E0+140j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E429826
; ---------------------------------------------------------------------------

loc_6E429D74:				; CODE XREF: sub_6E4296E0+134j
		mov	dl, [eax+18h]
		mov	[ecx+10Ch], dl
		lea	edi, [ecx+10Dh]
		lea	esi, [eax+19h]
		mov	edx, 23h
		jmp	loc_6E42981A
; ---------------------------------------------------------------------------

loc_6E429D90:				; CODE XREF: sub_6E4296E0+F1j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E4297D7
; ---------------------------------------------------------------------------

loc_6E429DA4:				; CODE XREF: sub_6E4296E0+E5j
		mov	dl, [eax+8]
		mov	[ecx+0ECh], dl
		lea	edi, [ecx+0EDh]
		lea	esi, [eax+9]
		mov	edx, 0Fh
		jmp	loc_6E4297CB
; ---------------------------------------------------------------------------

loc_6E429DC0:				; CODE XREF: sub_6E4296E0+390j
		mov	eax, [ebp+0E4h]
		mov	edi, [eax+9Ch]
		test	edi, edi
		jnz	loc_6E429A76
		mov	edi, [esp+7Ch+var_50]
		test	edi, edi
		jz	loc_6E429A92
		mov	edi, [esp+7Ch+var_50]
		jmp	loc_6E429A76
; ---------------------------------------------------------------------------
		align 10h

loc_6E429DF0:				; CODE XREF: sub_6E4296E0+4BCj
		mov	[esp+7Ch+var_6C], 556h
		mov	[esp+7Ch+var_70], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+7Ch+var_74], 44h
		mov	[esp+7Ch+var_78], 102h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		mov	eax, 0Ah

loc_6E429E21:				; CODE XREF: sub_6E4296E0+A21j
					; sub_6E4296E0+A92j ...
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 2
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E4151B0
		mov	[esp+7Ch+var_58], 0FFFFFFFFh

loc_6E429E3D:				; CODE XREF: sub_6E4296E0+2A8j
					; sub_6E4296E0+3D0j ...
		mov	eax, [esp+7Ch+var_58]
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E429E49:				; CODE XREF: sub_6E4296E0+496j
		mov	eax, [ebx+118h]
		lea	edi, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], eax
		call	sub_6E42EF60
		mov	edx, [ebp+0]
		xor	eax, eax
		cmp	edx, 100h
		setz	al
		lea	eax, [eax+eax+1]
		cmp	[ebx+110h], eax
		jnz	loc_6E42A3F5
		mov	ecx, [ebx+114h]
		test	ecx, ecx
		jnz	loc_6E42A3F5
		mov	ecx, [ebx+118h]
		cmp	byte ptr [ecx],	1
		jnz	loc_6E42A3F5
		mov	dword ptr [ebx+110h], 0
		mov	eax, [ebp+64h]
		test	eax, eax
		jz	short loc_6E429ED7
		mov	ebx, [ebp+68h]
		mov	[esp+7Ch+var_64], ebx
		mov	[esp+7Ch+var_68], ebp
		mov	[esp+7Ch+var_6C], 1
		mov	[esp+7Ch+var_70], ecx
		mov	[esp+7Ch+var_74], 14h
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], 0
		call	eax

loc_6E429ED7:				; CODE XREF: sub_6E4296E0+7C9j
		mov	eax, [ebp+5Ch]
		mov	edx, [eax+2E8h]
		test	edx, edx
		jz	loc_6E429750
		mov	dword ptr [eax+2E8h], 0
		mov	eax, [ebp+58h]
		mov	dword ptr [eax+180h], 1
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E413A90
		test	eax, eax
		jz	loc_6E429941
		mov	edx, [ebp+58h]
		lea	ebx, [edx+8]
		mov	ecx, [ebp+5Ch]
		inc	word ptr [ecx+208h]
		lea	edi, [ecx+20Ch]
		lea	esi, [ecx+218h]
		mov	eax, 0Ch
		test	edi, 1
		jnz	loc_6E42A6DD

loc_6E429F3C:				; CODE XREF: sub_6E4296E0+101Aj
		test	edi, 2
		jnz	loc_6E42A6C9

loc_6E429F48:				; CODE XREF: sub_6E4296E0+FF8j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		test	al, 2
		jz	short loc_6E429F5E
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E429F5E:				; CODE XREF: sub_6E4296E0+871j
		test	al, 1
		jz	short loc_6E429F6C
		mov	al, [esi+ecx]
		mov	byte ptr [esp+7Ch+var_60], al
		mov	[edi+ecx], al

loc_6E429F6C:				; CODE XREF: sub_6E4296E0+880j
		mov	eax, [ebp+5Ch]
		lea	edi, [eax+218h]
		mov	esi, 0Ch
		test	edi, 1
		jnz	loc_6E42A6B3

loc_6E429F86:				; CODE XREF: sub_6E4296E0+FE4j
		test	edi, 2
		jnz	loc_6E42A6A3

loc_6E429F92:				; CODE XREF: sub_6E4296E0+FCEj
		mov	ecx, esi
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	esi, 2
		jz	short loc_6E429FAB
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E429FAB:				; CODE XREF: sub_6E4296E0+8C1j
		and	esi, 1
		jz	short loc_6E429FB3
		mov	byte ptr [edi],	0

loc_6E429FB3:				; CODE XREF: sub_6E4296E0+8CEj
		mov	dword ptr [edx+8], 0
		mov	dword ptr [ebx+4], 0
		cmp	dword ptr [ebp+0], 100h
		jnz	loc_6E429750
		mov	eax, [ebp+5Ch]
		inc	word ptr [eax+228h]
		jmp	loc_6E429750
; ---------------------------------------------------------------------------

loc_6E429FDD:				; CODE XREF: sub_6E4296E0+4AAj
		mov	eax, [ebx+118h]
		lea	edi, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], eax
		call	sub_6E42EE70
		mov	eax, [ebp+5Ch]
		mov	edi, [eax+208h]
		and	edi, 0FFFFh
		cmp	[ebx+124h], edi
		jnz	loc_6E4298C1
		cmp	[esp+7Ch+var_48], 14h
		jz	loc_6E42A45B
		mov	eax, [ebp+34h]
		and	eax, 0FFFh
		cmp	eax, 3
		jz	loc_6E42A426

loc_6E42A02A:				; CODE XREF: sub_6E4296E0+D4Cj
					; sub_6E4296E0+D76j
		mov	eax, [ebp+20h]
		mov	[esp+7Ch+var_7C], ebp
		call	eax
		test	eax, eax
		js	loc_6E429984
		jnz	loc_6E429D08
		mov	[esp+7Ch+var_6C], 52Ah
		jmp	short loc_6E42A07F
; ---------------------------------------------------------------------------
		align 10h

loc_6E42A050:				; CODE XREF: sub_6E4296E0+4Cj
		mov	[esp+7Ch+var_7C], ebp
		call	SSL_state
		test	ah, 30h
		jz	loc_6E429732
		mov	eax, [ebp+20h]
		mov	[esp+7Ch+var_7C], ebp
		call	eax
		test	eax, eax
		js	loc_6E429984
		jnz	loc_6E429732
		mov	[esp+7Ch+var_6C], 32Fh

loc_6E42A07F:				; CODE XREF: sub_6E4296E0+968j
					; sub_6E4296E0+DCFj
		mov	[esp+7Ch+var_70], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+7Ch+var_74], 0E5h
		mov	[esp+7Ch+var_78], 102h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		mov	[esp+7Ch+var_58], 0FFFFFFFFh
		jmp	loc_6E429E3D
; ---------------------------------------------------------------------------

loc_6E42A0B0:				; CODE XREF: sub_6E4296E0+4B3j
					; sub_6E4296E0+4C5j
		cmp	dword ptr [ebp+0], 301h
		jz	loc_6E4298C1
		mov	[esp+7Ch+var_6C], 54Bh
		jmp	short loc_6E42A0D8
; ---------------------------------------------------------------------------
		align 10h

loc_6E42A0D0:				; CODE XREF: sub_6E4296E0+4D6j
					; sub_6E4296E0+4E4j ...
		mov	[esp+7Ch+var_6C], 56Eh

loc_6E42A0D8:				; CODE XREF: sub_6E4296E0+9E5j
					; sub_6E4296E0+BD8j
		mov	[esp+7Ch+var_70], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+7Ch+var_74], 0F5h
		mov	[esp+7Ch+var_78], 102h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		mov	eax, 0Ah
		jmp	loc_6E429E21
; ---------------------------------------------------------------------------

loc_6E42A106:				; CODE XREF: sub_6E4296E0+19j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E416DB0
		test	eax, eax
		jnz	loc_6E4296FF
		jmp	loc_6E429941
; ---------------------------------------------------------------------------
		align 10h

loc_6E42A120:				; CODE XREF: sub_6E4296E0+2CDj
		mov	[esp+7Ch+var_7C], ebp
		call	SSL_state
		test	ah, 30h
		jz	short loc_6E42A180
		cmp	[esp+7Ch+arg_4], 17h
		jnz	short loc_6E42A180
		mov	esi, [ebp+80h]
		test	esi, esi
		jnz	short loc_6E42A180
		mov	[esp+7Ch+var_6C], 393h
		mov	[esp+7Ch+var_70], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+7Ch+var_74], 64h
		mov	[esp+7Ch+var_78], 102h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		mov	eax, 0Ah
		jmp	loc_6E429E21
; ---------------------------------------------------------------------------
		align 10h

loc_6E42A180:				; CODE XREF: sub_6E4296E0+A4Bj
					; sub_6E4296E0+A55j ...
		mov	ecx, [esp+7Ch+arg_C]
		test	ecx, ecx
		jle	loc_6E42A3B3
		mov	edx, [ebx+110h]
		mov	eax, [esp+7Ch+arg_C]
		cmp	eax, edx
		ja	loc_6E42A22D

loc_6E42A1A4:				; CODE XREF: sub_6E4296E0+B4Fj
		mov	esi, [ebx+118h]
		mov	edx, eax
		mov	edi, [esp+7Ch+arg_8]
		add	esi, [ebx+114h]
		cmp	eax, 4
		jnb	loc_6E42A24D

loc_6E42A1C2:				; CODE XREF: sub_6E4296E0+B8Cj
		xor	ecx, ecx
		test	dl, 2
		jnz	short loc_6E42A234

loc_6E42A1C9:				; CODE XREF: sub_6E4296E0+B5Fj
		and	edx, 1
		jnz	short loc_6E42A241

loc_6E42A1CE:				; CODE XREF: sub_6E4296E0+B6Bj
		mov	edx, [esp+7Ch+arg_10]
		test	edx, edx
		jnz	loc_6E429984
		mov	edx, [ebx+110h]
		sub	edx, eax
		mov	[ebx+110h], edx
		add	[ebx+114h], eax
		test	edx, edx
		jnz	loc_6E429984
		mov	dword ptr [ebp+38h], 0F0h
		mov	dword ptr [ebx+114h], 0
		jmp	loc_6E429984
; ---------------------------------------------------------------------------

loc_6E42A20F:				; CODE XREF: sub_6E4296E0+2BAj
		mov	dword ptr [ebx+110h], 0
		mov	dword ptr [ebp+18h], 1
		mov	[esp+7Ch+var_58], 0
		jmp	loc_6E429E3D
; ---------------------------------------------------------------------------

loc_6E42A22D:				; CODE XREF: sub_6E4296E0+ABEj
		mov	eax, edx
		jmp	loc_6E42A1A4
; ---------------------------------------------------------------------------

loc_6E42A234:				; CODE XREF: sub_6E4296E0+AE7j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	short loc_6E42A1C9
; ---------------------------------------------------------------------------

loc_6E42A241:				; CODE XREF: sub_6E4296E0+AECj
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+7Ch+var_60], dl
		mov	[edi+ecx], dl
		jmp	short loc_6E42A1CE
; ---------------------------------------------------------------------------

loc_6E42A24D:				; CODE XREF: sub_6E4296E0+ADCj
		test	edi, 1
		jnz	loc_6E42A499

loc_6E42A259:				; CODE XREF: sub_6E4296E0+DC2j
		test	edi, 2
		jnz	loc_6E42A485

loc_6E42A265:				; CODE XREF: sub_6E4296E0+DB4j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E42A1C2
; ---------------------------------------------------------------------------

loc_6E42A271:				; CODE XREF: sub_6E4296E0+57Cj
		mov	[esp+7Ch+var_6C], 42Bh
		mov	[esp+7Ch+var_70], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+7Ch+var_74], 69h
		mov	[esp+7Ch+var_78], 102h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		mov	eax, 32h
		jmp	loc_6E429E21
; ---------------------------------------------------------------------------

loc_6E42A2A7:				; CODE XREF: sub_6E4296E0+2F1j
		cmp	ecx, 17h
		jz	loc_6E42A3BF
		mov	[esp+7Ch+var_6C], 3FAh
		jmp	loc_6E42A0D8
; ---------------------------------------------------------------------------

loc_6E42A2BD:				; CODE XREF: sub_6E4296E0+2E8j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E42EF90
		mov	dword ptr [ebx+110h], 0
		mov	dword ptr [ebp+18h], 3
		mov	[esp+7Ch+var_7C], ebp
		call	SSL_get_rbio
		mov	[esp+7Ch+var_78], 0Fh
		mov	[esp+7Ch+var_7C], eax
		call	BIO_clear_flags
		mov	[esp+7Ch+var_7C], ebp
		call	SSL_get_rbio
		mov	[esp+7Ch+var_78], 9
		mov	[esp+7Ch+var_7C], eax
		call	BIO_set_flags
		mov	[esp+7Ch+var_58], 0FFFFFFFFh
		jmp	loc_6E429E3D
; ---------------------------------------------------------------------------

loc_6E42A313:				; CODE XREF: sub_6E4296E0+3B5j
		cmp	ebx, 2
		jnz	loc_6E42A66D
		mov	dword ptr [ebp+18h], 1
		mov	eax, [ebp+58h]
		mov	[eax+188h], esi
		mov	[esp+7Ch+var_6C], 4ACh
		mov	[esp+7Ch+var_70], offset aD1_pkt_c ; "d1_pkt.c"
		lea	eax, [esi+3E8h]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 102h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		mov	[esp+7Ch+var_70], esi
		mov	[esp+7Ch+var_74], offset aD_0 ;	"%d"
		mov	[esp+7Ch+var_78], 10h
		lea	ebx, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_7C], ebx
		call	BIO_snprintf
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], offset aSslAlertNumb_0 ; "SSL	alert number "
		mov	[esp+7Ch+var_7C], 2
		call	ERR_add_error_data
		or	dword ptr [ebp+30h], 2
		mov	edx, [ebp+0C0h]
		mov	eax, [ebp+0E4h]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], eax
		call	SSL_CTX_remove_session
		jmp	loc_6E429E3D
; ---------------------------------------------------------------------------

loc_6E42A3B3:				; CODE XREF: sub_6E4296E0+AA9j
		mov	eax, [esp+7Ch+arg_C]
		jmp	loc_6E429984
; ---------------------------------------------------------------------------

loc_6E42A3BF:				; CODE XREF: sub_6E4296E0+BCAj
		mov	dword ptr [eax+1A0h], 2
		mov	[esp+7Ch+var_7C], ebp
		call	SSL_get_rbio
		mov	ebx, eax
		mov	dword ptr [ebp+18h], 3
		jmp	loc_6E429D37
; ---------------------------------------------------------------------------

loc_6E42A3DF:				; CODE XREF: sub_6E4296E0+487j
		mov	dword ptr [ebp+18h], 1
		mov	dword ptr [ebx+110h], 0
		jmp	loc_6E429E3D
; ---------------------------------------------------------------------------

loc_6E42A3F5:				; CODE XREF: sub_6E4296E0+797j
					; sub_6E4296E0+7A5j ...
		mov	[esp+7Ch+var_6C], 4D3h
		mov	[esp+7Ch+var_70], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+7Ch+var_74], 67h
		mov	[esp+7Ch+var_78], 102h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		jmp	loc_6E429941
; ---------------------------------------------------------------------------

loc_6E42A426:				; CODE XREF: sub_6E4296E0+944j
		mov	eax, [ebp+58h]
		test	byte ptr [eax],	1
		jnz	loc_6E42A02A
		cmp	dword ptr [ebp+24h], 1
		sbb	eax, eax
		and	eax, 0FFFFF000h
		add	eax, 2000h
		mov	[ebp+34h], eax
		mov	dword ptr [ebp+190h], 1
		mov	dword ptr [ebp+28h], 1
		jmp	loc_6E42A02A
; ---------------------------------------------------------------------------

loc_6E42A45B:				; CODE XREF: sub_6E4296E0+933j
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E427D80
		test	eax, eax
		js	loc_6E429941
		mov	[esp+7Ch+var_7C], ebp
		call	sub_6E42DBE0
		mov	dword ptr [ebx+110h], 0
		mov	ebx, [ebp+58h]
		jmp	loc_6E429753
; ---------------------------------------------------------------------------

loc_6E42A485:				; CODE XREF: sub_6E4296E0+B7Fj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E42A265
; ---------------------------------------------------------------------------

loc_6E42A499:				; CODE XREF: sub_6E4296E0+B73j
		mov	cl, [esi]
		mov	[edi], cl
		inc	edi
		inc	esi
		lea	edx, [eax-1]
		jmp	loc_6E42A259
; ---------------------------------------------------------------------------

loc_6E42A4A7:				; CODE XREF: sub_6E4296E0+622j
		mov	[esp+7Ch+var_6C], 444h
		jmp	loc_6E42A07F
; ---------------------------------------------------------------------------

loc_6E42A4B4:				; CODE XREF: sub_6E4296E0+539j
		mov	edx, [esp+7Ch+arg_10]
		test	edx, edx
		jnz	loc_6E429C1F
		mov	ecx, [ebp+5Ch]
		mov	ebx, [ecx+2E0h]
		test	ebx, ebx
		jz	loc_6E429727
		lea	eax, [ecx+2D4h]
		mov	edx, [esp+7Ch+arg_C]
		test	edx, edx
		jle	loc_6E42A660
		mov	edi, [esp+7Ch+arg_C]
		add	edi, eax
		mov	edx, [esp+7Ch+arg_8]
		jmp	short loc_6E42A508
; ---------------------------------------------------------------------------
		align 10h

loc_6E42A500:				; CODE XREF: sub_6E4296E0+E4Dj
		test	ebx, ebx
		jz	loc_6E42A65A

loc_6E42A508:				; CODE XREF: sub_6E4296E0+E19j
		inc	edx
		inc	eax
		mov	cl, [eax-1]
		mov	[edx-1], cl
		mov	ecx, [ebp+5Ch]
		mov	esi, [ecx+2E0h]
		lea	ebx, [esi-1]
		mov	[ecx+2E0h], ebx
		mov	esi, edx
		sub	esi, [esp+7Ch+arg_8]
		cmp	eax, edi
		jnz	short loc_6E42A500
		mov	[esp+7Ch+var_58], esi
		test	ebx, ebx
		jz	loc_6E42A642

loc_6E42A53B:				; CODE XREF: sub_6E4296E0+F88j
		mov	dl, [eax]
		mov	[ecx+2D4h], dl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 1
		jbe	loc_6E42A642
		mov	cl, [eax+1]
		mov	[edx+2D5h], cl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 2
		jbe	loc_6E42A642
		mov	cl, [eax+2]
		mov	[edx+2D6h], cl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 3
		jbe	loc_6E42A642
		mov	cl, [eax+3]
		mov	[edx+2D7h], cl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 4
		jbe	loc_6E42A642
		mov	cl, [eax+4]
		mov	[edx+2D8h], cl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 5
		jbe	loc_6E42A642
		mov	cl, [eax+5]
		mov	[edx+2D9h], cl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 6
		jbe	short loc_6E42A642
		mov	cl, [eax+6]
		mov	[edx+2DAh], cl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 7
		jbe	short loc_6E42A642
		mov	cl, [eax+7]
		mov	[edx+2DBh], cl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 8
		jbe	short loc_6E42A642
		mov	cl, [eax+8]
		mov	[edx+2DCh], cl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 9
		jbe	short loc_6E42A642
		mov	cl, [eax+9]
		mov	[edx+2DDh], cl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 0Ah
		jbe	short loc_6E42A642
		mov	cl, [eax+0Ah]
		mov	[edx+2DEh], cl
		mov	edx, [ebp+5Ch]
		cmp	dword ptr [edx+2E0h], 0Bh
		jbe	short loc_6E42A642
		mov	al, [eax+0Bh]
		mov	byte ptr [esp+7Ch+var_60], al
		mov	[edx+2DFh], al

loc_6E42A642:				; CODE XREF: sub_6E4296E0+E55j
					; sub_6E4296E0+E6Dj ...
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jz	loc_6E429727
		mov	eax, [esp+7Ch+var_58]
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E42A65A:				; CODE XREF: sub_6E4296E0+E22j
		mov	[esp+7Ch+var_58], esi
		jmp	short loc_6E42A642
; ---------------------------------------------------------------------------

loc_6E42A660:				; CODE XREF: sub_6E4296E0+E03j
		mov	[esp+7Ch+var_58], 0
		jmp	loc_6E42A53B
; ---------------------------------------------------------------------------

loc_6E42A66D:				; CODE XREF: sub_6E4296E0+C36j
		mov	[esp+7Ch+var_6C], 4B4h
		mov	[esp+7Ch+var_70], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+7Ch+var_74], 0F6h
		mov	[esp+7Ch+var_78], 102h
		mov	[esp+7Ch+var_7C], 14h
		call	ERR_put_error
		mov	eax, 2Fh
		jmp	loc_6E429E21
; ---------------------------------------------------------------------------

loc_6E42A6A3:				; CODE XREF: sub_6E4296E0+8ACj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	esi, 2
		jmp	loc_6E429F92
; ---------------------------------------------------------------------------

loc_6E42A6B3:				; CODE XREF: sub_6E4296E0+8A0j
		mov	byte ptr [eax+218h], 0
		lea	edi, [eax+219h]
		mov	si, 0Bh
		jmp	loc_6E429F86
; ---------------------------------------------------------------------------

loc_6E42A6C9:				; CODE XREF: sub_6E4296E0+862j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E429F48
; ---------------------------------------------------------------------------

loc_6E42A6DD:				; CODE XREF: sub_6E4296E0+856j
		mov	al, [ecx+218h]
		mov	[ecx+20Ch], al
		lea	edi, [ecx+20Dh]
		lea	esi, [ecx+219h]
		mov	eax, 0Bh
		jmp	loc_6E429F3C
sub_6E4296E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42A700	proc near		; DATA XREF: .rdata:6E44CD18o
					; .rdata:6E44CDB8o ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_38], eax
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_3C], eax
		mov	ebp, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_5C], ebx
		call	SSL_state
		test	ah, 30h
		jz	short loc_6E42A737
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jz	loc_6E42A9C0

loc_6E42A737:				; CODE XREF: sub_6E42A700+2Aj
					; sub_6E42A700+2CCj
		cmp	ebp, 4000h
		jg	loc_6E42AB90
		mov	dword ptr [ebx+18h], 1
		mov	eax, [ebx+58h]
		mov	esi, [eax+108h]
		test	esi, esi
		jnz	loc_6E42AA20
		mov	eax, [eax+18Ch]
		test	eax, eax
		jnz	loc_6E42A990

loc_6E42A769:				; CODE XREF: sub_6E42A700+29Dj
		test	ebp, ebp
		jz	loc_6E42A9B0
		mov	edx, [ebx+58h]
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	loc_6E42AA10
		mov	edi, [ebx+8Ch]
		test	edi, edi
		jz	loc_6E42AA10
		mov	[esp+5Ch+var_34], edx
		mov	eax, [ebx+90h]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_CTX_md
		test	eax, eax
		mov	edx, [esp+5Ch+var_34]
		jz	loc_6E42AA10
		mov	[esp+5Ch+var_34], edx
		mov	eax, [ebx+90h]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_CTX_md
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_size
		mov	[esp+5Ch+var_2C], eax
		test	eax, eax
		mov	edx, [esp+5Ch+var_34]
		js	loc_6E42ABD0

loc_6E42A7D8:				; CODE XREF: sub_6E42A700+318j
		mov	eax, [edx+0FCh]
		mov	ecx, eax
		mov	[esp+5Ch+var_24], eax
		mov	esi, [esp+5Ch+var_38]
		mov	eax, esi
		mov	[ecx], al
		mov	[edx+130h], esi
		mov	eax, [ebx]
		sar	eax, 8
		mov	[ecx+1], al
		mov	eax, [ebx]
		mov	[ecx+2], al
		lea	eax, [ecx+0Dh]
		mov	[esp+5Ch+var_34], eax
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E42A82A
		mov	[esp+5Ch+var_30], edx
		mov	eax, [eax]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_CIPHER_flags
		test	al, 2
		mov	edx, [esp+5Ch+var_30]
		jnz	loc_6E42AAE0

loc_6E42A82A:				; CODE XREF: sub_6E42A700+10Ej
		mov	[esp+5Ch+var_30], 0
		mov	[esp+5Ch+var_28], 0

loc_6E42A83A:				; CODE XREF: sub_6E42A700+400j
		mov	edi, [esp+5Ch+var_34]
		add	edi, [esp+5Ch+var_30]
		mov	[edx+13Ch], edi
		mov	[edx+134h], ebp
		mov	eax, [esp+5Ch+var_3C]
		mov	[edx+140h], eax
		mov	esi, [ebx+94h]
		test	esi, esi
		jz	loc_6E42AB10
		mov	[esp+5Ch+var_20], edx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_6E412A70
		test	eax, eax
		mov	edx, [esp+5Ch+var_20]
		jz	loc_6E42ABDA

loc_6E42A87E:				; CODE XREF: sub_6E42A700+42Fj
		mov	ecx, [esp+5Ch+var_2C]
		test	ecx, ecx
		jnz	loc_6E42AA60

loc_6E42A88A:				; CODE XREF: sub_6E42A700+3A2j
		mov	eax, [esp+5Ch+var_34]
		mov	[edx+140h], eax
		mov	[edx+13Ch], eax
		mov	eax, [esp+5Ch+var_28]
		test	eax, eax
		jnz	loc_6E42AAB0

loc_6E42A8A6:				; CODE XREF: sub_6E42A700+3D6j
		mov	[esp+5Ch+var_34], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax]
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		jle	loc_6E42ABD0
		mov	eax, [ebx+5Ch]
		movzx	esi, byte ptr [eax+20Bh]
		and	esi, 0FFh
		mov	eax, esi
		mov	edi, [esp+5Ch+var_24]
		mov	[edi+3], al
		mov	eax, [ebx+5Ch]
		mov	ax, [eax+20Ah]
		mov	[edi+4], al
		mov	eax, [ebx+58h]
		mov	ecx, [eax+56h]
		mov	[edi+5], ecx
		mov	ax, [eax+5Ah]
		mov	[edi+9], ax
		mov	edx, [esp+5Ch+var_34]
		mov	eax, [edx+134h]
		shr	eax, 8
		mov	[edi+0Bh], al
		mov	eax, [edx+134h]
		mov	[edi+0Ch], al
		mov	esi, [esp+5Ch+var_38]
		mov	[edx+130h], esi
		add	dword ptr [edx+134h], 0Dh
		mov	[esp+5Ch+var_38], edx
		mov	eax, [ebx+58h]
		add	eax, 54h
		mov	[esp+5Ch+var_5C], eax
		call	sub_6E412300
		mov	edx, [esp+5Ch+var_38]
		mov	eax, [edx+134h]
		mov	[edx+108h], eax
		mov	dword ptr [edx+104h], 0
		mov	eax, [ebx+58h]
		mov	[eax+168h], ebp
		mov	ecx, [esp+5Ch+var_3C]
		mov	[eax+174h], ecx
		mov	[eax+16Ch], esi
		mov	[eax+170h], ebp
		mov	[esp+5Ch+arg_C], ebp
		mov	[esp+5Ch+arg_8], ecx
		mov	[esp+5Ch+arg_4], esi
		mov	[esp+5Ch+arg_0], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6E412AF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42A990:				; CODE XREF: sub_6E42A700+63j
		mov	eax, [ebx+8]
		mov	eax, [eax+3Ch]
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		jg	loc_6E42A769

loc_6E42A9A3:				; CODE XREF: sub_6E42A700+2CAj
		mov	esi, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E42A9B0:				; CODE XREF: sub_6E42A700+6Bj
					; sub_6E42A700+303j ...
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42A9C0:				; CODE XREF: sub_6E42A700+31j
		mov	eax, [ebx+20h]
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		js	short loc_6E42A9A3
		jnz	loc_6E42A737
		mov	[esp+5Ch+var_4C], 590h
		mov	[esp+5Ch+var_50], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+5Ch+var_54], 0E5h
		mov	[esp+5Ch+var_58], 10Ch
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	esi, 0FFFFFFFFh
		jmp	short loc_6E42A9B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AA10:				; CODE XREF: sub_6E42A700+7Cj
					; sub_6E42A700+8Aj ...
		mov	[esp+5Ch+var_2C], 0
		jmp	loc_6E42A7D8
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AA20:				; CODE XREF: sub_6E42A700+55j
		mov	[esp+5Ch+var_54], offset a0_0 ;	"0"
		mov	[esp+5Ch+var_58], 5DDh
		mov	[esp+5Ch+var_5C], offset aD1_pkt_c ; "d1_pkt.c"
		call	OpenSSLDie
		mov	[esp+5Ch+arg_C], ebp
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+arg_8], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+arg_4], eax
		mov	[esp+5Ch+arg_0], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6E412AF0
; ---------------------------------------------------------------------------

loc_6E42AA60:				; CODE XREF: sub_6E42A700+184j
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_54], 1
		mov	ecx, [esp+5Ch+var_30]
		add	ecx, [edx+134h]
		mov	[esp+5Ch+var_20], edx
		add	ecx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		mov	edx, [esp+5Ch+var_20]
		js	loc_6E42ABD0
		mov	eax, [esp+5Ch+var_2C]
		add	[edx+134h], eax
		jmp	loc_6E42A88A
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AAB0:				; CODE XREF: sub_6E42A700+1A0j
		mov	[esp+5Ch+var_2C], edx
		mov	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	RAND_pseudo_bytes
		mov	eax, [esp+5Ch+var_30]
		mov	edx, [esp+5Ch+var_2C]
		add	[edx+134h], eax
		jmp	loc_6E42A8A6
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AAE0:				; CODE XREF: sub_6E42A700+124j
		mov	[esp+5Ch+var_20], edx
		mov	eax, [ebx+8Ch]
		mov	eax, [eax]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_CIPHER_block_size
		mov	[esp+5Ch+var_28], eax
		mov	[esp+5Ch+var_30], eax
		mov	edx, [esp+5Ch+var_20]
		jmp	loc_6E42A83A
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AB10:				; CODE XREF: sub_6E42A700+160j
		mov	esi, eax
		mov	eax, ebp
		cmp	ebp, 4
		jnb	short loc_6E42AB60

loc_6E42AB19:				; CODE XREF: sub_6E42A700+47Fj
		xor	ecx, ecx
		test	al, 2
		jnz	short loc_6E42AB50

loc_6E42AB1F:				; CODE XREF: sub_6E42A700+45Bj
		test	al, 1
		jnz	short loc_6E42AB40

loc_6E42AB23:				; CODE XREF: sub_6E42A700+44Aj
		mov	eax, [edx+13Ch]
		mov	[edx+140h], eax
		jmp	loc_6E42A87E
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AB40:				; CODE XREF: sub_6E42A700+421j
		mov	al, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_20], al
		mov	[edi+ecx], al
		jmp	short loc_6E42AB23
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AB50:				; CODE XREF: sub_6E42A700+41Dj
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	short loc_6E42AB1F
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AB60:				; CODE XREF: sub_6E42A700+417j
		test	edi, 1
		jnz	loc_6E42AC24

loc_6E42AB6C:				; CODE XREF: sub_6E42A700+533j
		test	edi, 2
		jnz	loc_6E42AC10

loc_6E42AB78:				; CODE XREF: sub_6E42A700+51Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E42AB19
; ---------------------------------------------------------------------------
		jmp	short loc_6E42AB90
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AB90:				; CODE XREF: sub_6E42A700+3Dj
					; sub_6E42A700+481j
		mov	[esp+5Ch+var_4C], 596h
		mov	[esp+5Ch+var_50], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+5Ch+var_54], 14Eh
		mov	[esp+5Ch+var_58], 10Ch
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E42A9B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42ABD0:				; CODE XREF: sub_6E42A700+D2j
					; sub_6E42A700+1C1j ...
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E42A9B0
; ---------------------------------------------------------------------------

loc_6E42ABDA:				; CODE XREF: sub_6E42A700+178j
		mov	[esp+5Ch+var_4C], 644h
		mov	[esp+5Ch+var_50], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+5Ch+var_54], 8Dh
		mov	[esp+5Ch+var_58], 0F5h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E42A9B0
; ---------------------------------------------------------------------------

loc_6E42AC10:				; CODE XREF: sub_6E42A700+472j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E42AB78
; ---------------------------------------------------------------------------

loc_6E42AC24:				; CODE XREF: sub_6E42A700+466j
		mov	al, [esi]
		mov	byte ptr [esp+5Ch+var_20], al
		mov	[edi], al
		inc	edi
		lea	esi, [esi+1]
		lea	eax, [ebp-1]
		jmp	loc_6E42AB6C
sub_6E42A700	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42AC40	proc near		; CODE XREF: sub_6E42C4E0+294p
					; sub_6E42E5F0+193p ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_34], eax
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_38], eax
		mov	eax, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_3C], eax
		cmp	eax, 4000h
		jle	short loc_6E42AC86
		mov	[esp+5Ch+var_54], offset aLenSsl3_rt_max ; "len	<= SSL3_RT_MAX_PLAIN_LENGTH"
		mov	[esp+5Ch+var_58], 5C7h
		mov	[esp+5Ch+var_5C], offset aD1_pkt_c ; "d1_pkt.c"
		call	OpenSSLDie

loc_6E42AC86:				; CODE XREF: sub_6E42AC40+28j
		mov	dword ptr [ebx+18h], 1
		mov	eax, [ebx+58h]
		mov	esi, [eax+108h]
		test	esi, esi
		jnz	loc_6E42AF00
		mov	eax, [eax+18Ch]
		test	eax, eax
		jnz	loc_6E42AEE0

loc_6E42ACAC:				; CODE XREF: sub_6E42AC40+2ADj
		mov	eax, [esp+5Ch+var_3C]
		test	eax, eax
		jz	loc_6E42AED0
		mov	ebp, [ebx+58h]
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	loc_6E42AF50
		mov	edi, [ebx+8Ch]
		test	edi, edi
		jz	loc_6E42AF50
		mov	eax, [ebx+90h]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E42AF50
		mov	eax, [ebx+90h]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_CTX_md
		mov	[esp+5Ch+var_5C], eax
		call	EVP_MD_size
		mov	[esp+5Ch+var_28], eax
		test	eax, eax
		js	loc_6E42AEC0

loc_6E42AD0F:				; CODE XREF: sub_6E42AC40+318j
		mov	edx, [ebp+0FCh]
		mov	edi, [esp+5Ch+var_34]
		mov	eax, edi
		mov	[edx], al
		mov	[ebp+130h], edi
		mov	eax, [ebx]
		sar	eax, 8
		mov	[edx+1], al
		mov	eax, [ebx]
		mov	[edx+2], al
		lea	eax, [edx+0Dh]
		mov	[esp+5Ch+var_30], eax
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E42AD5B
		mov	[esp+5Ch+var_2C], edx
		mov	eax, [eax]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_CIPHER_flags
		test	al, 2
		mov	edx, [esp+5Ch+var_2C]
		jnz	loc_6E42AFE0

loc_6E42AD5B:				; CODE XREF: sub_6E42AC40+FFj
		mov	[esp+5Ch+var_2C], 0
		mov	[esp+5Ch+var_24], 0

loc_6E42AD6B:				; CODE XREF: sub_6E42AC40+3C0j
		mov	edi, [esp+5Ch+var_30]
		add	edi, [esp+5Ch+var_2C]
		mov	[ebp+13Ch], edi
		mov	eax, [esp+5Ch+var_3C]
		mov	[ebp+134h], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[ebp+140h], eax
		mov	esi, [ebx+94h]
		test	esi, esi
		jz	loc_6E42B010
		mov	[esp+5Ch+var_20], edx
		mov	[esp+5Ch+var_5C], ebx
		call	sub_6E412A70
		test	eax, eax
		mov	edx, [esp+5Ch+var_20]
		jz	loc_6E42B079

loc_6E42ADB3:				; CODE XREF: sub_6E42AC40+3F3j
		mov	ecx, [esp+5Ch+var_28]
		test	ecx, ecx
		jnz	loc_6E42AF60

loc_6E42ADBF:				; CODE XREF: sub_6E42AC40+362j
		mov	eax, [esp+5Ch+var_30]
		mov	[ebp+140h], eax
		mov	[ebp+13Ch], eax
		mov	eax, [esp+5Ch+var_24]
		test	eax, eax
		jnz	loc_6E42AFB0

loc_6E42ADDB:				; CODE XREF: sub_6E42AC40+396j
		mov	[esp+5Ch+var_30], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax]
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		jle	loc_6E42AEC0
		mov	eax, [ebx+5Ch]
		movzx	edi, byte ptr [eax+20Bh]
		and	edi, 0FFh
		mov	eax, edi
		mov	edx, [esp+5Ch+var_30]
		mov	[edx+3], al
		mov	eax, [ebx+5Ch]
		mov	ax, [eax+20Ah]
		mov	[edx+4], al
		mov	eax, [ebx+58h]
		mov	ecx, [eax+56h]
		mov	[edx+5], ecx
		mov	ax, [eax+5Ah]
		mov	[edx+9], ax
		mov	eax, [ebp+134h]
		shr	eax, 8
		mov	[edx+0Bh], al
		mov	eax, [ebp+134h]
		mov	[edx+0Ch], al
		mov	edi, [esp+5Ch+var_34]
		mov	[ebp+130h], edi
		add	dword ptr [ebp+134h], 0Dh
		mov	eax, [ebx+58h]
		add	eax, 54h
		mov	[esp+5Ch+var_5C], eax
		call	sub_6E412300
		mov	eax, [ebp+134h]
		mov	[ebp+108h], eax
		mov	dword ptr [ebp+104h], 0
		mov	eax, [ebx+58h]
		mov	esi, [esp+5Ch+var_3C]
		mov	[eax+168h], esi
		mov	edx, [esp+5Ch+var_38]
		mov	[eax+174h], edx
		mov	[eax+16Ch], edi
		mov	[eax+170h], esi
		mov	[esp+5Ch+arg_C], esi
		mov	[esp+5Ch+arg_8], edx
		mov	[esp+5Ch+arg_4], edi
		mov	[esp+5Ch+arg_0], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6E412AF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AEC0:				; CODE XREF: sub_6E42AC40+C9j
					; sub_6E42AC40+1B6j ...
		mov	esi, 0FFFFFFFFh
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E42AED0:				; CODE XREF: sub_6E42AC40+72j
					; sub_6E42AC40+2B5j ...
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AEE0:				; CODE XREF: sub_6E42AC40+66j
		mov	eax, [ebx+8]
		mov	eax, [eax+3Ch]
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		jg	loc_6E42ACAC
		mov	esi, eax
		jmp	short loc_6E42AED0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AF00:				; CODE XREF: sub_6E42AC40+58j
		mov	[esp+5Ch+var_54], offset a0_0 ;	"0"
		mov	[esp+5Ch+var_58], 5DDh
		mov	[esp+5Ch+var_5C], offset aD1_pkt_c ; "d1_pkt.c"
		call	OpenSSLDie
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+arg_C], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+arg_8], eax
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+arg_4], eax
		mov	[esp+5Ch+arg_0], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6E412AF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AF50:				; CODE XREF: sub_6E42AC40+83j
					; sub_6E42AC40+91j ...
		mov	[esp+5Ch+var_28], 0
		jmp	loc_6E42AD0F
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AF60:				; CODE XREF: sub_6E42AC40+179j
		mov	[esp+5Ch+var_20], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_54], 1
		mov	ecx, [esp+5Ch+var_2C]
		add	ecx, [ebp+134h]
		add	ecx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], ebx
		call	eax
		test	eax, eax
		mov	edx, [esp+5Ch+var_20]
		js	loc_6E42AEC0
		mov	eax, [esp+5Ch+var_28]
		add	[ebp+134h], eax
		jmp	loc_6E42ADBF
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AFB0:				; CODE XREF: sub_6E42AC40+195j
		mov	[esp+5Ch+var_28], edx
		mov	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax
		call	RAND_pseudo_bytes
		mov	eax, [esp+5Ch+var_2C]
		add	[ebp+134h], eax
		mov	edx, [esp+5Ch+var_28]
		jmp	loc_6E42ADDB
; ---------------------------------------------------------------------------
		align 10h

loc_6E42AFE0:				; CODE XREF: sub_6E42AC40+115j
		mov	[esp+5Ch+var_20], edx
		mov	eax, [ebx+8Ch]
		mov	eax, [eax]
		mov	[esp+5Ch+var_5C], eax
		call	EVP_CIPHER_block_size
		mov	[esp+5Ch+var_24], eax
		mov	[esp+5Ch+var_2C], eax
		mov	edx, [esp+5Ch+var_20]
		jmp	loc_6E42AD6B
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B010:				; CODE XREF: sub_6E42AC40+155j
		mov	esi, eax
		mov	ecx, [esp+5Ch+var_3C]
		mov	eax, ecx
		cmp	ecx, 4
		jnb	short loc_6E42B060

loc_6E42B01D:				; CODE XREF: sub_6E42AC40+437j
		xor	ecx, ecx
		test	al, 2
		jnz	short loc_6E42B050

loc_6E42B023:				; CODE XREF: sub_6E42AC40+41Bj
		test	al, 1
		jnz	short loc_6E42B040

loc_6E42B027:				; CODE XREF: sub_6E42AC40+40Aj
		mov	eax, [ebp+13Ch]
		mov	[ebp+140h], eax
		jmp	loc_6E42ADB3
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B040:				; CODE XREF: sub_6E42AC40+3E5j
		mov	al, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_20], al
		mov	[edi+ecx], al
		jmp	short loc_6E42B027
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B050:				; CODE XREF: sub_6E42AC40+3E1j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	short loc_6E42B023
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B060:				; CODE XREF: sub_6E42AC40+3DBj
		test	edi, 1
		jnz	short loc_6E42B0C0

loc_6E42B068:				; CODE XREF: sub_6E42AC40+491j
		test	edi, 2
		jnz	short loc_6E42B0AF

loc_6E42B070:				; CODE XREF: sub_6E42AC40+47Ej
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E42B01D
; ---------------------------------------------------------------------------

loc_6E42B079:				; CODE XREF: sub_6E42AC40+16Dj
		mov	[esp+5Ch+var_4C], 644h
		mov	[esp+5Ch+var_50], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+5Ch+var_54], 8Dh
		mov	[esp+5Ch+var_58], 0F5h
		mov	[esp+5Ch+var_5C], 14h
		call	ERR_put_error
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E42AED0
; ---------------------------------------------------------------------------

loc_6E42B0AF:				; CODE XREF: sub_6E42AC40+42Ej
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E42B070
; ---------------------------------------------------------------------------

loc_6E42B0C0:				; CODE XREF: sub_6E42AC40+426j
		mov	al, [esi]
		mov	byte ptr [esp+5Ch+var_20], al
		mov	[edi], al
		inc	edi
		lea	esi, [esi+1]
		mov	eax, [esp+5Ch+var_3C]
		dec	eax
		jmp	short loc_6E42B068
sub_6E42AC40	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+60h]
		mov	eax, [esp+64h]
		mov	[esp+20h], eax
		mov	eax, [esp+68h]
		mov	[esp+28h], eax
		mov	eax, [esp+6Ch]
		mov	[esp+1Ch], eax
		mov	eax, [esp+70h]
		mov	[esp+2Ch], eax
		mov	eax, [ebx+58h]
		mov	esi, [eax+108h]
		test	esi, esi
		jnz	loc_6E42B3B0
		mov	eax, [eax+18Ch]
		test	eax, eax
		jnz	loc_6E42B330

loc_6E42B12A:				; CODE XREF: .text:6E42B33Dj
		mov	eax, [esp+1Ch]
		test	eax, eax
		jz	loc_6E42B300

loc_6E42B136:				; CODE XREF: .text:6E42B306j
		mov	ebp, [ebx+58h]
		mov	edi, [ebx+0C0h]
		test	edi, edi
		jz	loc_6E42B320
		mov	esi, [ebx+8Ch]
		test	esi, esi
		jz	loc_6E42B320
		mov	eax, [ebx+90h]
		mov	[esp], eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E42B320
		mov	eax, [ebx+90h]
		mov	[esp], eax
		call	EVP_MD_CTX_md
		mov	[esp], eax
		call	EVP_MD_size
		mov	[esp+34h], eax
		test	eax, eax
		js	loc_6E42B520

loc_6E42B18D:				; CODE XREF: .text:6E42B328j
		mov	edx, [ebp+0FCh]
		mov	ecx, [esp+20h]
		mov	[edx], cl
		mov	[ebp+130h], ecx
		mov	eax, [ebx]
		sar	eax, 8
		mov	[edx+1], al
		mov	eax, [ebx]
		mov	[edx+2], al
		lea	eax, [edx+0Dh]
		mov	[esp+24h], eax
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E42B1D7
		mov	[esp+30h], edx
		mov	eax, [eax]
		mov	[esp], eax
		call	EVP_CIPHER_flags
		test	al, 2
		mov	edx, [esp+30h]
		jnz	loc_6E42B480

loc_6E42B1D7:				; CODE XREF: .text:6E42B1BBj
		mov	dword ptr [esp+30h], 0
		mov	dword ptr [esp+38h], 0

loc_6E42B1E7:				; CODE XREF: .text:6E42B4A0j
		mov	edi, [esp+24h]
		add	edi, [esp+30h]
		mov	[ebp+13Ch], edi
		mov	eax, [esp+1Ch]
		mov	[ebp+134h], eax
		mov	eax, [esp+28h]
		mov	[ebp+140h], eax
		mov	ecx, [ebx+94h]
		test	ecx, ecx
		jz	loc_6E42B4B0
		mov	[esp+3Ch], edx
		mov	[esp], ebx
		call	sub_6E412A70
		test	eax, eax
		mov	edx, [esp+3Ch]
		jz	loc_6E42B52A

loc_6E42B22F:				; CODE XREF: .text:6E42B4D3j
		mov	esi, [esp+34h]
		test	esi, esi
		jnz	loc_6E42B400

loc_6E42B23B:				; CODE XREF: .text:6E42B442j
		mov	eax, [esp+24h]
		mov	[ebp+140h], eax
		mov	[ebp+13Ch], eax
		mov	ecx, [esp+38h]
		test	ecx, ecx
		jnz	loc_6E42B450

loc_6E42B257:				; CODE XREF: .text:6E42B476j
		mov	[esp+24h], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax]
		mov	dword ptr [esp+4], 1
		mov	[esp], ebx
		call	eax
		test	eax, eax
		jle	loc_6E42B520
		mov	eax, [ebx+5Ch]
		movzx	edi, byte ptr [eax+20Bh]
		and	edi, 0FFh
		mov	eax, edi
		mov	edx, [esp+24h]
		mov	[edx+3], al
		mov	eax, [ebx+5Ch]
		mov	ax, [eax+20Ah]
		mov	[edx+4], al
		mov	eax, [ebx+58h]
		mov	ecx, [eax+56h]
		mov	[edx+5], ecx
		mov	ax, [eax+5Ah]
		mov	[edx+9], ax
		mov	eax, [ebp+134h]
		shr	eax, 8
		mov	[edx+0Bh], al
		mov	eax, [ebp+134h]
		mov	[edx+0Ch], al
		mov	eax, [esp+20h]
		mov	[ebp+130h], eax
		add	dword ptr [ebp+134h], 0Dh
		mov	eax, [ebx+58h]
		add	eax, 54h
		mov	[esp], eax
		call	sub_6E412300
		mov	eax, [esp+2Ch]
		test	eax, eax
		jz	short loc_6E42B350
		mov	esi, [ebp+134h]

loc_6E42B2F1:				; CODE XREF: .text:6E42B345j
					; .text:6E42B525j ...
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B300:				; CODE XREF: .text:6E42B130j
		mov	ebp, [esp+2Ch]
		test	ebp, ebp
		jnz	loc_6E42B136
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B320:				; CODE XREF: .text:6E42B141j
					; .text:6E42B14Fj ...
		mov	dword ptr [esp+34h], 0
		jmp	loc_6E42B18D
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B330:				; CODE XREF: .text:6E42B124j
		mov	eax, [ebx+8]
		mov	eax, [eax+3Ch]
		mov	[esp], ebx
		call	eax
		test	eax, eax
		jg	loc_6E42B12A
		mov	esi, eax
		jmp	short loc_6E42B2F1
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B350:				; CODE XREF: .text:6E42B2E9j
		mov	eax, [ebp+134h]
		mov	[ebp+108h], eax
		mov	dword ptr [ebp+104h], 0
		mov	eax, [ebx+58h]
		mov	ecx, [esp+1Ch]
		mov	[eax+168h], ecx
		mov	esi, [esp+28h]
		mov	[eax+174h], esi
		mov	edi, [esp+20h]
		mov	[eax+16Ch], edi
		mov	[eax+170h], ecx
		mov	[esp+6Ch], ecx
		mov	[esp+68h], esi
		mov	[esp+64h], edi
		mov	[esp+60h], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6E412AF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B3B0:				; CODE XREF: .text:6E42B116j
		mov	dword ptr [esp+8], offset a0_0 ; "0"
		mov	dword ptr [esp+4], 5DDh
		mov	dword ptr [esp], offset	aD1_pkt_c ; "d1_pkt.c"
		call	OpenSSLDie
		mov	eax, [esp+1Ch]
		mov	[esp+6Ch], eax
		mov	eax, [esp+28h]
		mov	[esp+68h], eax
		mov	eax, [esp+20h]
		mov	[esp+64h], eax
		mov	[esp+60h], ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6E412AF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B400:				; CODE XREF: .text:6E42B235j
		mov	[esp+3Ch], edx
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	dword ptr [esp+8], 1
		mov	ecx, [esp+30h]
		add	ecx, [ebp+134h]
		add	ecx, [esp+24h]
		mov	[esp+4], ecx
		mov	[esp], ebx
		call	eax
		test	eax, eax
		mov	edx, [esp+3Ch]
		js	loc_6E42B520
		mov	eax, [esp+34h]
		add	[ebp+134h], eax
		jmp	loc_6E42B23B
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B450:				; CODE XREF: .text:6E42B251j
		mov	[esp+34h], edx
		mov	eax, [esp+38h]
		mov	[esp+4], eax
		mov	eax, [esp+24h]
		mov	[esp], eax
		call	RAND_pseudo_bytes
		mov	eax, [esp+30h]
		add	[ebp+134h], eax
		mov	edx, [esp+34h]
		jmp	loc_6E42B257
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B480:				; CODE XREF: .text:6E42B1D1j
		mov	[esp+3Ch], edx
		mov	eax, [ebx+8Ch]
		mov	eax, [eax]
		mov	[esp], eax
		call	EVP_CIPHER_block_size
		mov	[esp+38h], eax
		mov	[esp+30h], eax
		mov	edx, [esp+3Ch]
		jmp	loc_6E42B1E7
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B4B0:				; CODE XREF: .text:6E42B211j
		mov	esi, eax
		mov	ecx, [esp+1Ch]
		mov	eax, ecx
		cmp	ecx, 4
		jnb	short loc_6E42B500

loc_6E42B4BD:				; CODE XREF: .text:6E42B517j
		xor	ecx, ecx
		test	al, 2
		jnz	short loc_6E42B4F0

loc_6E42B4C3:				; CODE XREF: .text:6E42B4FBj
		test	al, 1
		jnz	short loc_6E42B4E0

loc_6E42B4C7:				; CODE XREF: .text:6E42B4EAj
		mov	eax, [ebp+13Ch]
		mov	[ebp+140h], eax
		jmp	loc_6E42B22F
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B4E0:				; CODE XREF: .text:6E42B4C5j
		mov	al, [esi+ecx]
		mov	[esp+3Ch], al
		mov	[edi+ecx], al
		jmp	short loc_6E42B4C7
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B4F0:				; CODE XREF: .text:6E42B4C1j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	short loc_6E42B4C3
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B500:				; CODE XREF: .text:6E42B4BBj
		test	edi, 1
		jnz	short loc_6E42B571

loc_6E42B508:				; CODE XREF: .text:6E42B582j
		test	edi, 2
		jnz	short loc_6E42B560

loc_6E42B510:				; CODE XREF: .text:6E42B56Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E42B4BD
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B520:				; CODE XREF: .text:6E42B187j
					; .text:6E42B272j ...
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E42B2F1
; ---------------------------------------------------------------------------

loc_6E42B52A:				; CODE XREF: .text:6E42B229j
		mov	dword ptr [esp+10h], 644h
		mov	dword ptr [esp+0Ch], offset aD1_pkt_c ;	"d1_pkt.c"
		mov	dword ptr [esp+8], 8Dh
		mov	dword ptr [esp+4], 0F5h
		mov	dword ptr [esp], 14h
		call	ERR_put_error
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E42B2F1
; ---------------------------------------------------------------------------

loc_6E42B560:				; CODE XREF: .text:6E42B50Ej
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E42B510
; ---------------------------------------------------------------------------

loc_6E42B571:				; CODE XREF: .text:6E42B506j
		mov	al, [esi]
		mov	[esp+3Ch], al
		mov	[edi], al
		inc	edi
		lea	esi, [esi+1]
		mov	eax, [esp+1Ch]
		dec	eax
		jmp	short loc_6E42B508
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame fpd=1Ch

sub_6E42B590	proc near		; DATA XREF: .rdata:6E44CD1Co
					; .rdata:6E44CDBCo ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+58h+arg_0]
		mov	esi, [ebx+58h]
		mov	dword ptr [esi+18Ch], 0
		lea	ebp, [esp+3Ch]
		mov	al, [esi+190h]
		mov	byte ptr [esp+58h+var_1C], al
		mov	al, [esi+191h]
		mov	byte ptr [esp+58h+var_1C+1], al
		mov	eax, [esi+108h]
		test	eax, eax
		jnz	loc_6E42B8E0
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	loc_6E42B860
		mov	edi, [ebx+8Ch]
		test	edi, edi
		jz	loc_6E42B860
		mov	eax, [ebx+90h]
		mov	[esp+58h+var_58], eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E42B860
		mov	eax, [ebx+90h]
		mov	[esp+58h+var_58], eax
		call	EVP_MD_CTX_md
		mov	[esp+58h+var_58], eax
		call	EVP_MD_size
		mov	[esp+58h+var_34], eax
		test	eax, eax
		js	loc_6E42BA00

loc_6E42B622:				; CODE XREF: sub_6E42B590+2D8j
		mov	edi, [esi+0FCh]
		mov	byte ptr [edi],	15h
		mov	dword ptr [esi+130h], 15h
		mov	eax, [ebx]
		sar	eax, 8
		mov	[edi+1], al
		mov	eax, [ebx]
		mov	[edi+2], al
		lea	edx, [edi+0Dh]
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E42B669
		mov	[esp+58h+var_38], edx
		mov	eax, [eax]
		mov	[esp+58h+var_58], eax
		call	EVP_CIPHER_flags
		test	al, 2
		mov	edx, [esp+58h+var_38]
		jnz	loc_6E42B960

loc_6E42B669:				; CODE XREF: sub_6E42B590+BDj
		mov	[esp+58h+var_38], 0
		mov	[esp+58h+var_30], 0
		mov	eax, [esp+58h+var_38]

loc_6E42B67D:				; CODE XREF: sub_6E42B590+3F0j
		add	eax, edx
		mov	[esi+13Ch], eax
		mov	dword ptr [esi+134h], 2
		mov	[esi+140h], ebp
		mov	ecx, [ebx+94h]
		test	ecx, ecx
		jz	loc_6E42B9B0
		mov	[esp+58h+var_2C], edx
		mov	[esp+58h+var_58], ebx
		call	sub_6E412A70
		test	eax, eax
		mov	edx, [esp+58h+var_2C]
		jz	loc_6E42B901

loc_6E42B6BB:				; CODE XREF: sub_6E42B590+433j
		mov	ecx, [esp+58h+var_34]
		test	ecx, ecx
		jnz	loc_6E42B870

loc_6E42B6C7:				; CODE XREF: sub_6E42B590+320j
		mov	[esi+140h], edx
		mov	[esi+13Ch], edx
		mov	eax, [esp+58h+var_30]
		test	eax, eax
		jnz	loc_6E42B8C0

loc_6E42B6DF:				; CODE XREF: sub_6E42B590+34Aj
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax]
		mov	[esp+58h+var_54], 1
		mov	[esp+58h+var_58], ebx
		call	eax
		test	eax, eax
		jle	loc_6E42BA00
		mov	eax, [ebx+5Ch]
		mov	cl, [eax+20Bh]
		and	ecx, 0FFh
		mov	[edi+3], cl
		mov	eax, [ebx+5Ch]
		mov	ax, [eax+20Ah]
		mov	[edi+4], al
		mov	eax, [ebx+58h]
		mov	edx, [eax+56h]
		mov	[edi+5], edx
		mov	ax, [eax+5Ah]
		mov	[edi+9], ax
		mov	eax, [esi+134h]
		shr	eax, 8
		mov	[edi+0Bh], al
		mov	eax, [esi+134h]
		mov	[edi+0Ch], al
		mov	dword ptr [esi+130h], 15h
		add	dword ptr [esi+134h], 0Dh
		mov	eax, [ebx+58h]
		add	eax, 54h
		mov	[esp+58h+var_58], eax
		call	sub_6E412300
		mov	eax, [esi+134h]
		mov	[esi+108h], eax
		mov	dword ptr [esi+104h], 0
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+168h], 2
		mov	[eax+174h], ebp
		mov	dword ptr [eax+16Ch], 15h
		mov	dword ptr [eax+170h], 2

loc_6E42B79D:				; CODE XREF: sub_6E42B590+36Cj
		mov	[esp+58h+var_4C], 2
		mov	[esp+58h+var_50], ebp
		mov	[esp+58h+var_54], 15h
		mov	[esp+58h+var_58], ebx
		call	sub_6E412AF0
		mov	esi, eax
		test	eax, eax
		jle	loc_6E42B940
		mov	eax, [ebx+58h]
		cmp	byte ptr [eax+190h], 2
		jz	loc_6E42B9D0

loc_6E42B7D3:				; CODE XREF: sub_6E42B590+463j
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_6E42B811
		mov	ecx, [ebx+68h]
		mov	edx, [ebx]
		mov	[esp+58h+var_40], ecx
		mov	[esp+58h+var_44], ebx
		mov	[esp+58h+var_48], 2
		mov	ecx, [ebx+58h]
		add	ecx, 190h
		mov	[esp+58h+var_4C], ecx
		mov	[esp+58h+var_50], 15h
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], 1
		call	eax

loc_6E42B811:				; CODE XREF: sub_6E42B590+248j
		mov	eax, [ebx+0D0h]
		test	eax, eax
		jz	loc_6E42B990

loc_6E42B81F:				; CODE XREF: sub_6E42B590+40Ej
		mov	ecx, [ebx+58h]
		xor	edx, edx
		mov	dl, [ecx+190h]
		shl	edx, 8
		movzx	edi, byte ptr [ecx+191h]
		and	edi, 0FFh
		or	edx, edi
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], 4008h
		mov	[esp+58h+var_58], ebx
		call	eax

loc_6E42B84D:				; CODE XREF: sub_6E42B590+414j
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B860:				; CODE XREF: sub_6E42B590+46j
					; sub_6E42B590+54j ...
		mov	[esp+58h+var_34], 0
		jmp	loc_6E42B622
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B870:				; CODE XREF: sub_6E42B590+131j
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+4]
		mov	[esp+58h+var_50], 1
		mov	ecx, [esp+58h+var_38]
		add	ecx, [esi+134h]
		add	ecx, edx
		mov	[esp+58h+var_2C], edx
		mov	[esp+58h+var_54], ecx
		mov	[esp+58h+var_58], ebx
		call	eax
		test	eax, eax
		mov	edx, [esp+58h+var_2C]
		js	loc_6E42BA00
		mov	eax, [esp+58h+var_34]
		add	[esi+134h], eax
		jmp	loc_6E42B6C7
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B8C0:				; CODE XREF: sub_6E42B590+149j
		mov	eax, [esp+58h+var_30]
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_58], edx
		call	RAND_pseudo_bytes
		mov	eax, [esp+58h+var_38]
		add	[esi+134h], eax
		jmp	loc_6E42B6DF
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B8E0:				; CODE XREF: sub_6E42B590+38j
		mov	[esp+58h+var_50], offset a0_0 ;	"0"
		mov	[esp+58h+var_54], 5DDh
		mov	[esp+58h+var_58], offset aD1_pkt_c ; "d1_pkt.c"
		call	OpenSSLDie
		jmp	loc_6E42B79D
; ---------------------------------------------------------------------------

loc_6E42B901:				; CODE XREF: sub_6E42B590+125j
		mov	[esp+58h+var_48], 644h
		mov	[esp+58h+var_4C], offset aD1_pkt_c ; "d1_pkt.c"
		mov	[esp+58h+var_50], 8Dh
		mov	[esp+58h+var_54], 0F5h
		mov	[esp+58h+var_58], 14h
		call	ERR_put_error
		mov	esi, 0FFFFFFFFh
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E42B940:				; CODE XREF: sub_6E42B590+22Dj
					; sub_6E42B590+475j
		mov	eax, [ebx+58h]
		mov	dword ptr [eax+18Ch], 1
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B960:				; CODE XREF: sub_6E42B590+D3j
		mov	[esp+58h+var_2C], edx
		mov	eax, [ebx+8Ch]
		mov	eax, [eax]
		mov	[esp+58h+var_58], eax
		call	EVP_CIPHER_block_size
		mov	[esp+58h+var_30], eax
		mov	[esp+58h+var_38], eax
		mov	edx, [esp+58h+var_2C]
		jmp	loc_6E42B67D
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B990:				; CODE XREF: sub_6E42B590+289j
		mov	eax, [ebx+0E4h]
		mov	eax, [eax+9Ch]
		test	eax, eax
		jnz	loc_6E42B81F
		jmp	loc_6E42B84D
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B9B0:				; CODE XREF: sub_6E42B590+10Dj
		mov	ecx, [esp+58h+var_1C]
		mov	[eax], cx
		mov	eax, [esi+13Ch]
		mov	[esi+140h], eax
		jmp	loc_6E42B6BB
; ---------------------------------------------------------------------------
		align 10h

loc_6E42B9D0:				; CODE XREF: sub_6E42B590+23Dj
		mov	eax, [ebx+10h]
		mov	[esp+58h+var_4C], 0
		mov	[esp+58h+var_50], 0
		mov	[esp+58h+var_54], 0Bh
		mov	[esp+58h+var_58], eax
		call	BIO_ctrl
		jmp	loc_6E42B7D3
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BA00:				; CODE XREF: sub_6E42B590+8Cj
					; sub_6E42B590+166j ...
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E42B940
sub_6E42B590	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42BA10	proc near		; CODE XREF: sub_6E4239E0+A51p
					; sub_6E426500+818p

var_E		= byte ptr -0Eh
arg_3		= byte ptr  7

		push	edi
		push	esi
		push	ebx
		sub	esp, 1
		mov	eax, [esp+11h]
		test	[esp+0Eh+arg_3], 1
		jnz	short loc_6E42BA60
		mov	ebx, [eax+58h]
		lea	edx, [ebx+54h]
		mov	ecx, [eax+5Ch]
		mov	ebx, [ebx+54h]
		mov	[ecx+22Ah], ebx
		mov	ebx, [edx+4]
		mov	[ecx+22Eh], ebx
		mov	eax, [eax+5Ch]
		inc	word ptr [eax+20Ah]

loc_6E42BA46:				; CODE XREF: sub_6E42BA10+CDj
					; sub_6E42BA10+D6j ...
		mov	dword ptr [edx], 0
		mov	dword ptr [edx+4], 0
		add	esp, 1
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BA60:				; CODE XREF: sub_6E42BA10+Fj
		mov	esi, [eax+58h]
		lea	edx, [esi+8]
		mov	ecx, [eax+5Ch]
		inc	word ptr [ecx+208h]
		lea	edi, [ecx+20Ch]
		lea	esi, [ecx+218h]
		mov	ebx, 0Ch
		test	edi, 1
		jnz	loc_6E42BB50

loc_6E42BA8D:				; CODE XREF: sub_6E42BA10+15Dj
		test	edi, 2
		jnz	loc_6E42BB80

loc_6E42BA99:				; CODE XREF: sub_6E42BA10+17Fj
		mov	ecx, ebx
		shr	ecx, 2
		rep movsd
		test	bl, 2
		jnz	short loc_6E42BB20
		and	ebx, 1
		jnz	short loc_6E42BB10

loc_6E42BAAA:				; CODE XREF: sub_6E42BA10+109j
					; sub_6E42BA10+11Ej
		mov	eax, [eax+5Ch]
		lea	edi, [eax+218h]
		mov	ebx, 0Ch
		test	edi, 1
		jnz	loc_6E42BBA0

loc_6E42BAC4:				; CODE XREF: sub_6E42BA10+19Fj
		test	edi, 2
		jnz	short loc_6E42BB40

loc_6E42BACC:				; CODE XREF: sub_6E42BA10+13Bj
		mov	ecx, ebx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	bl, 2
		jnz	short loc_6E42BAF0
		and	ebx, 1
		jz	loc_6E42BA46

loc_6E42BAE3:				; CODE XREF: sub_6E42BA10+F1j
		mov	byte ptr [edi],	0
		jmp	loc_6E42BA46
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BAF0:				; CODE XREF: sub_6E42BA10+C8j
		mov	word ptr [edi],	0
		add	edi, 2
		and	ebx, 1
		jz	loc_6E42BA46
		jmp	short loc_6E42BAE3
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BB10:				; CODE XREF: sub_6E42BA10+98j
					; sub_6E42BA10+124j
		mov	bl, [esi+ecx]
		mov	[esp+0Eh+var_E], bl
		mov	[edi+ecx], bl
		jmp	short loc_6E42BAAA
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BB20:				; CODE XREF: sub_6E42BA10+93j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		and	ebx, 1
		jz	loc_6E42BAAA
		jmp	short loc_6E42BB10
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BB40:				; CODE XREF: sub_6E42BA10+BAj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	ebx, 2
		jmp	loc_6E42BACC
; ---------------------------------------------------------------------------

loc_6E42BB50:				; CODE XREF: sub_6E42BA10+77j
		mov	bl, [ecx+218h]
		mov	[ecx+20Ch], bl
		lea	edi, [ecx+20Dh]
		lea	esi, [ecx+219h]
		mov	ebx, 0Bh
		jmp	loc_6E42BA8D
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BB80:				; CODE XREF: sub_6E42BA10+83j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	ebx, 2
		jmp	loc_6E42BA99
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BBA0:				; CODE XREF: sub_6E42BA10+AEj
		mov	byte ptr [eax+218h], 0
		lea	edi, [eax+219h]
		mov	bl, 0Bh
		jmp	loc_6E42BAC4
sub_6E42BA10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42BBC0	proc near		; CODE XREF: sub_6E42CAE0+319p
					; sub_6E42CAE0+3ADp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [edx+4]
		mov	ebx, [edx+10h]
		add	ebx, [edx+0Ch]
		cmp	esi, ebx
		jb	short loc_6E42BC40
		cmp	ebx, ecx
		ja	short loc_6E42BC00
		mov	edi, eax
		mov	eax, [eax+5Ch]
		mov	ecx, [eax+298h]
		test	ecx, ecx
		jz	short loc_6E42BC60
		cmp	[eax+290h], esi
		jz	short loc_6E42BC50
		mov	[esp+2Ch+var_1C], 255h
		jmp	short loc_6E42BC08
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BC00:				; CODE XREF: sub_6E42BBC0+15j
		mov	[esp+2Ch+var_1C], 23Ch

loc_6E42BC08:				; CODE XREF: sub_6E42BBC0+36j
					; sub_6E42BBC0+88j
		mov	[esp+2Ch+var_20], offset aD1_both_c ; "d1_both.c"
		mov	[esp+2Ch+var_24], 98h
		mov	[esp+2Ch+var_28], 120h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 2Fh

loc_6E42BC31:				; CODE XREF: sub_6E42BBC0+92j
					; sub_6E42BBC0+F1j ...
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BC40:				; CODE XREF: sub_6E42BBC0+11j
		mov	[esp+2Ch+var_1C], 237h
		jmp	short loc_6E42BC08
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BC50:				; CODE XREF: sub_6E42BBC0+2Cj
		xor	eax, eax
		jmp	short loc_6E42BC31
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BC60:				; CODE XREF: sub_6E42BBC0+24j
		mov	[esp+2Ch+var_10], edx
		mov	eax, [edi+3Ch]
		lea	ecx, [esi+0Ch]
		mov	[esp+2Ch+var_28], ecx
		mov	[esp+2Ch+var_2C], eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		mov	edx, [esp+2Ch+var_10]
		jz	short loc_6E42BCC0
		mov	ecx, [edi+58h]
		mov	[ecx+33Ch], esi
		mov	eax, [edi+5Ch]
		mov	[eax+290h], esi
		xor	ebx, ebx
		mov	bl, [edx]
		mov	[ecx+340h], ebx
		mov	cl, [edx]
		mov	[eax+28Ch], cl
		mov	edx, [edx+8]
		mov	eax, [edi+5Ch]
		mov	[eax+294h], dx
		xor	eax, eax
		jmp	loc_6E42BC31
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BCC0:				; CODE XREF: sub_6E42BBC0+BCj
		mov	[esp+2Ch+var_1C], 247h
		mov	[esp+2Ch+var_20], offset aD1_both_c ; "d1_both.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 120h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 50h
		jmp	loc_6E42BC31
sub_6E42BBC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42BD00	proc near		; CODE XREF: sub_6E42C4E0+Dp
					; sub_6E42C4E0+397p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, eax
		mov	esi, [eax+5Ch]
		mov	edi, [esi+258h]
		test	edi, edi
		jnz	short loc_6E42BD90

loc_6E42BD15:				; CODE XREF: sub_6E42BD00+CDj
		mov	edi, [esi+25Ch]
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_get_wbio
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 31h
		mov	[esp+1Ch+var_1C], eax
		call	BIO_ctrl
		mov	esi, 100h
		mov	edx, esi
		sub	edx, eax
		cmp	edi, edx
		jb	short loc_6E42BD60

loc_6E42BD50:				; CODE XREF: sub_6E42BD00+148j
					; sub_6E42BD00+1AEj
		mov	eax, 1
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BD60:				; CODE XREF: sub_6E42BD00+4Ej
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 20h
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_ctrl
		test	ah, 10h
		jz	short loc_6E42BDE0
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BD90:				; CODE XREF: sub_6E42BD00+13j
		mov	[esp+1Ch+var_1C], eax
		call	SSL_get_wbio
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 31h
		mov	[esp+1Ch+var_1C], eax
		call	BIO_ctrl
		sub	edi, eax
		mov	[esi+25Ch], edi
		mov	esi, [ebx+5Ch]
		mov	dword ptr [esi+258h], 0
		jmp	loc_6E42BD15
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BDE0:				; CODE XREF: sub_6E42BD00+83j
		mov	edi, [ebx+5Ch]
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_get_wbio
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 28h
		mov	[esp+1Ch+var_1C], eax
		call	BIO_ctrl
		mov	[edi+25Ch], eax
		mov	eax, [ebx+5Ch]
		mov	edi, [eax+25Ch]
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_get_wbio
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 31h
		mov	[esp+1Ch+var_1C], eax
		call	BIO_ctrl
		mov	ecx, esi
		sub	ecx, eax
		cmp	edi, ecx
		jnb	loc_6E42BD50
		mov	edi, [ebx+5Ch]
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_get_wbio
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 31h
		mov	[esp+1Ch+var_1C], eax
		call	BIO_ctrl
		sub	esi, eax
		mov	[edi+25Ch], esi
		mov	eax, [ebx+5Ch]
		mov	esi, [eax+25Ch]
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_get_wbio
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], esi
		mov	[esp+1Ch+var_18], 2Ah
		mov	[esp+1Ch+var_1C], eax
		call	BIO_ctrl
		jmp	loc_6E42BD50
sub_6E42BD00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42BEC0	proc near		; CODE XREF: sub_6E42CAE0+789p

var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= byte ptr -11Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14Ch
		mov	ebx, eax
		mov	[esp+15Ch+var_140], ecx
		mov	ebp, [edx+10h]
		mov	eax, [edx+4]
		mov	ecx, [edx+0Ch]
		add	ecx, ebp
		cmp	ecx, eax
		ja	short loc_6E42BF00
		mov	ecx, [ebx+108h]
		cmp	ecx, 454Ch
		jb	loc_6E42C040
		cmp	ecx, eax
		jnb	short loc_6E42BF20
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E42BF00:				; CODE XREF: sub_6E42BEC0+1Dj
					; sub_6E42BEC0+C3j ...
		mov	eax, 0FFFFFFFFh

loc_6E42BF05:				; CODE XREF: sub_6E42BEC0+11Ej
					; sub_6E42BEC0+179j
		mov	edi, [esp+15Ch+var_140]
		mov	dword ptr [edi], 0

loc_6E42BF0F:				; CODE XREF: sub_6E42BEC0+285j
		add	esp, 14Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42BF20:				; CODE XREF: sub_6E42BEC0+33j
					; sub_6E42BEC0+18Dj
		test	ebp, ebp
		jz	loc_6E42C140
		mov	[esp+15Ch+var_124], 0
		mov	[esp+15Ch+var_120], 0
		mov	eax, [edx+8]
		mov	[esp+15Ch+var_13C], edx
		mov	ecx, eax
		shr	cx, 8
		mov	byte ptr [esp+15Ch+var_120+2], cl
		mov	byte ptr [esp+15Ch+var_120+3], al
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+244h]
		lea	esi, [esp+15Ch+var_124]
		mov	[esp+15Ch+var_158], esi
		mov	[esp+15Ch+var_15C], eax
		call	pqueue_find
		mov	[esp+15Ch+var_138], eax
		test	eax, eax
		mov	edx, [esp+15Ch+var_13C]
		jz	loc_6E42C1C7
		mov	eax, [eax+8]
		mov	[esp+15Ch+var_13C], eax
		mov	esi, [edx+4]
		cmp	[eax+4], esi
		jnz	loc_6E42BF00

loc_6E42BF89:				; CODE XREF: sub_6E42BEC0+402j
		mov	edi, [eax+30h]
		test	edi, edi
		jz	loc_6E42C150
		mov	eax, [ebx+8]
		mov	ecx, [eax+34h]
		mov	[esp+15Ch+var_14C], 0
		mov	[esp+15Ch+var_150], ebp
		mov	eax, [esp+15Ch+var_13C]
		mov	eax, [eax+2Ch]
		add	eax, [edx+0Ch]
		mov	[esp+15Ch+var_134], edx
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 16h
		mov	[esp+15Ch+var_15C], ebx
		call	ecx
		mov	edi, eax
		cmp	edi, ebp
		mov	edx, [esp+15Ch+var_134]
		jz	loc_6E42C052
		mov	eax, 0FFFFFFFFh

loc_6E42BFD8:				; CODE XREF: sub_6E42BEC0+194j
					; sub_6E42BEC0+2D4j
		mov	edx, [esp+15Ch+var_138]
		test	edx, edx
		jnz	loc_6E42BF05

loc_6E42BFE4:				; CODE XREF: sub_6E42BEC0+4ADj
		mov	esi, [esp+15Ch+var_13C]
		mov	ecx, [esi+14h]
		test	ecx, ecx
		jnz	loc_6E42C1A0

loc_6E42BFF3:				; CODE XREF: sub_6E42BEC0+302j
		mov	edx, [esi+2Ch]
		test	edx, edx
		jz	short loc_6E42C00E
		mov	[esp+15Ch+var_138], eax
		mov	[esp+15Ch+var_15C], edx
		call	CRYPTO_free
		mov	eax, [esp+15Ch+var_138]
		mov	esi, [esp+15Ch+var_13C]

loc_6E42C00E:				; CODE XREF: sub_6E42BEC0+138j
		mov	edx, [esi+30h]
		test	edx, edx
		jz	short loc_6E42C025
		mov	[esp+15Ch+var_138], eax
		mov	[esp+15Ch+var_15C], edx
		call	CRYPTO_free
		mov	eax, [esp+15Ch+var_138]

loc_6E42C025:				; CODE XREF: sub_6E42BEC0+153j
		mov	[esp+15Ch+var_138], eax
		mov	eax, [esp+15Ch+var_13C]
		mov	[esp+15Ch+var_15C], eax
		call	CRYPTO_free
		mov	eax, [esp+15Ch+var_138]
		jmp	loc_6E42BF05
; ---------------------------------------------------------------------------
		align 10h

loc_6E42C040:				; CODE XREF: sub_6E42BEC0+2Bj
		mov	ecx, 454Ch
		cmp	ecx, eax
		jb	loc_6E42BF00
		jmp	loc_6E42BF20
; ---------------------------------------------------------------------------

loc_6E42C052:				; CODE XREF: sub_6E42BEC0+10Dj
		test	ebp, ebp
		jle	loc_6E42BFD8
		mov	eax, [edx+0Ch]
		mov	[esp+15Ch+var_134], eax
		lea	ecx, [ebp+eax+0]
		mov	esi, eax
		mov	eax, ecx
		sub	eax, esi
		cmp	eax, 8
		jg	loc_6E42C2C7
		mov	eax, 1
		cmp	ecx, esi
		jle	short loc_6E42C0B5
		mov	ebp, [esp+15Ch+var_13C]
		mov	[esp+15Ch+var_134], edi
		mov	[esp+15Ch+var_130], ebx
		lea	esi, [esi+0]

loc_6E42C090:				; CODE XREF: sub_6E42BEC0+1EFj
		mov	ebx, esi
		sar	ebx, 3
		add	ebx, [ebp+30h]
		mov	ecx, esi
		and	ecx, 7
		mov	edi, eax
		shl	edi, cl
		mov	ecx, edi
		or	[ebx], cl
		inc	esi
		mov	ecx, [esp+15Ch+var_134]
		add	ecx, [edx+0Ch]
		cmp	ecx, esi
		jg	short loc_6E42C090
		mov	ebx, [esp+15Ch+var_130]

loc_6E42C0B5:				; CODE XREF: sub_6E42BEC0+1BBj
					; sub_6E42BEC0+469j
		mov	ecx, [edx+4]
		test	ecx, ecx
		jle	loc_6E42C398

loc_6E42C0C0:				; CODE XREF: sub_6E42BEC0+4FFj
		mov	eax, [esp+15Ch+var_13C]
		mov	edx, [eax+30h]
		lea	eax, [ecx-1]
		sar	eax, 3
		and	ecx, 7
		mov	cl, ds:byte_6E44D184[ecx]
		cmp	[edx+eax], cl
		jz	loc_6E42C32E

loc_6E42C0DF:				; CODE XREF: sub_6E42BEC0+484j
					; sub_6E42BEC0+4A3j
		mov	esi, [esp+15Ch+var_138]
		test	esi, esi
		jnz	short loc_6E42C140
		mov	eax, [esp+15Ch+var_13C]
		mov	[esp+15Ch+var_158], eax
		lea	eax, [esp+15Ch+var_124]
		mov	[esp+15Ch+var_15C], eax
		call	pitem_new
		test	eax, eax
		jz	loc_6E42C368
		mov	edx, [ebx+5Ch]
		mov	edx, [edx+244h]
		mov	[esp+15Ch+var_158], eax
		mov	[esp+15Ch+var_15C], edx
		call	pqueue_insert
		test	eax, eax
		jnz	short loc_6E42C140
		mov	[esp+15Ch+var_154], offset aItemNull ; "item !=	NULL"
		mov	[esp+15Ch+var_158], 2FBh
		mov	[esp+15Ch+var_15C], offset aD1_both_c ;	"d1_both.c"
		call	OpenSSLDie
		nop
		lea	esi, [esi+0]

loc_6E42C140:				; CODE XREF: sub_6E42BEC0+62j
					; sub_6E42BEC0+225j ...
		mov	eax, 0FFFFFFFDh
		jmp	loc_6E42BF0F
; ---------------------------------------------------------------------------
		align 10h

loc_6E42C150:				; CODE XREF: sub_6E42BEC0+CEj
		lea	esi, [esp+15Ch+var_11C]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E42C160:				; CODE XREF: sub_6E42BEC0+2DCj
		mov	eax, [ebx+8]
		mov	edx, [eax+34h]
		mov	[esp+15Ch+var_14C], 0
		mov	eax, ebp
		cmp	ebp, 100h
		jbe	short loc_6E42C17D
		mov	eax, 100h

loc_6E42C17D:				; CODE XREF: sub_6E42BEC0+2B6j
		mov	[esp+15Ch+var_150], eax
		mov	[esp+15Ch+var_154], esi
		mov	[esp+15Ch+var_158], 16h
		mov	[esp+15Ch+var_15C], ebx
		call	edx
		test	eax, eax
		jle	loc_6E42BFD8
		sub	ebp, eax
		jnz	short loc_6E42C160
		jmp	short loc_6E42C140
; ---------------------------------------------------------------------------

loc_6E42C1A0:				; CODE XREF: sub_6E42BEC0+12Dj
		mov	[esp+15Ch+var_138], eax
		mov	edx, [esi+18h]
		mov	[esp+15Ch+var_15C], edx
		call	EVP_CIPHER_CTX_free
		mov	edx, [esi+1Ch]
		mov	[esp+15Ch+var_15C], edx
		call	EVP_MD_CTX_destroy
		mov	eax, [esp+15Ch+var_138]
		mov	esi, [esp+15Ch+var_13C]
		jmp	loc_6E42BFF3
; ---------------------------------------------------------------------------

loc_6E42C1C7:				; CODE XREF: sub_6E42BEC0+B0j
		mov	esi, [edx+4]
		mov	[esp+15Ch+var_134], edx
		mov	[esp+15Ch+var_154], 0B5h
		mov	[esp+15Ch+var_158], offset aD1_both_c ;	"d1_both.c"
		mov	[esp+15Ch+var_15C], 34h
		call	CRYPTO_malloc
		mov	[esp+15Ch+var_13C], eax
		test	eax, eax
		jz	loc_6E42BF00
		test	esi, esi
		mov	edx, [esp+15Ch+var_134]
		jnz	loc_6E42C3C4
		mov	[esp+15Ch+var_130], edx
		mov	eax, [esp+15Ch+var_13C]
		mov	dword ptr [eax+2Ch], 0
		mov	[esp+15Ch+var_154], 0C7h
		mov	[esp+15Ch+var_158], offset aD1_both_c ;	"d1_both.c"
		mov	[esp+15Ch+var_15C], 0
		call	CRYPTO_malloc
		mov	[esp+15Ch+var_134], eax
		test	eax, eax
		mov	edx, [esp+15Ch+var_130]
		jz	loc_6E42C427

loc_6E42C23D:				; CODE XREF: sub_6E42BEC0+559j
		mov	edi, [esp+15Ch+var_134]
		cmp	esi, 4
		jnb	loc_6E42C372

loc_6E42C24A:				; CODE XREF: sub_6E42BEC0+4D3j
		test	esi, 2
		jz	short loc_6E42C25A
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E42C25A:				; CODE XREF: sub_6E42BEC0+390j
		and	esi, 1
		jz	short loc_6E42C262
		mov	byte ptr [edi],	0

loc_6E42C262:				; CODE XREF: sub_6E42BEC0+39Dj
		mov	ecx, [esp+15Ch+var_13C]
		mov	edi, [esp+15Ch+var_134]
		mov	[ecx+30h], edi
		mov	edi, ecx
		mov	esi, edx
		mov	eax, 2Ch
		and	ecx, 1
		jnz	loc_6E42C44C

loc_6E42C27F:				; CODE XREF: sub_6E42BEC0+59Bj
		test	edi, 2
		jnz	loc_6E42C438

loc_6E42C28B:				; CODE XREF: sub_6E42BEC0+587j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		test	al, 2
		jz	short loc_6E42C2A1
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E42C2A1:				; CODE XREF: sub_6E42BEC0+3D4j
		test	al, 1
		jz	short loc_6E42C2AF
		mov	al, [esi+ecx]
		mov	byte ptr [esp+15Ch+var_134], al
		mov	[edi+ecx], al

loc_6E42C2AF:				; CODE XREF: sub_6E42BEC0+3E3j
		mov	esi, [esp+15Ch+var_13C]
		mov	eax, [esi+4]
		mov	[esi+10h], eax
		mov	dword ptr [esi+0Ch], 0
		mov	eax, esi
		jmp	loc_6E42BF89
; ---------------------------------------------------------------------------

loc_6E42C2C7:				; CODE XREF: sub_6E42BEC0+1AEj
		mov	ecx, [esp+15Ch+var_134]
		sar	ecx, 3
		mov	esi, [esp+15Ch+var_13C]
		add	ecx, [esi+30h]
		mov	eax, [esp+15Ch+var_134]
		and	eax, 7
		mov	al, ds:byte_6E44D18C[eax]
		or	[ecx], al
		mov	eax, [edx+0Ch]
		mov	ecx, eax
		sar	ecx, 3
		inc	ecx
		add	ebp, eax
		lea	eax, [ebp-1]
		sar	eax, 3
		cmp	ecx, eax
		jge	short loc_6E42C31B
		lea	esi, [esi+0]

loc_6E42C300:				; CODE XREF: sub_6E42BEC0+455j
		mov	eax, [esi+30h]
		mov	byte ptr [eax+ecx], 0FFh
		inc	ecx
		mov	ebp, [edx+0Ch]
		add	ebp, edi
		lea	eax, [ebp-1]
		sar	eax, 3
		cmp	eax, ecx
		jg	short loc_6E42C300
		mov	esi, [esp+15Ch+var_13C]

loc_6E42C31B:				; CODE XREF: sub_6E42BEC0+437j
		add	eax, [esi+30h]
		and	ebp, 7
		mov	cl, ss:byte_6E44D184[ebp]
		or	[eax], cl
		jmp	loc_6E42C0B5
; ---------------------------------------------------------------------------

loc_6E42C32E:				; CODE XREF: sub_6E42BEC0+219j
		dec	eax
		js	short loc_6E42C350
		jmp	short loc_6E42C340
; ---------------------------------------------------------------------------
		align 10h

loc_6E42C340:				; CODE XREF: sub_6E42BEC0+471j
					; sub_6E42BEC0+48Ej
		cmp	byte ptr [edx+eax], 0FFh
		jnz	loc_6E42C0DF
		dec	eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_6E42C340

loc_6E42C350:				; CODE XREF: sub_6E42BEC0+46Fj
		mov	[esp+15Ch+var_15C], edx
		call	CRYPTO_free
		mov	eax, [esp+15Ch+var_13C]
		mov	dword ptr [eax+30h], 0
		jmp	loc_6E42C0DF
; ---------------------------------------------------------------------------

loc_6E42C368:				; CODE XREF: sub_6E42BEC0+23Dj
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42BFE4
; ---------------------------------------------------------------------------

loc_6E42C372:				; CODE XREF: sub_6E42BEC0+384j
		test	edi, 1
		jnz	loc_6E42C470

loc_6E42C37E:				; CODE XREF: sub_6E42BEC0+5B7j
		test	edi, 2
		jnz	loc_6E42C460

loc_6E42C38A:				; CODE XREF: sub_6E42BEC0+5ABj
		mov	ecx, esi
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E42C24A
; ---------------------------------------------------------------------------

loc_6E42C398:				; CODE XREF: sub_6E42BEC0+1FAj
		mov	[esp+15Ch+var_134], edx
		mov	[esp+15Ch+var_154], offset aLongMsg_hdrMsg ; "((long)msg_hdr->msg_len) > 0"
		mov	[esp+15Ch+var_158], 2E6h
		mov	[esp+15Ch+var_15C], offset aD1_both_c ;	"d1_both.c"
		call	OpenSSLDie
		mov	edx, [esp+15Ch+var_134]
		mov	ecx, [edx+4]
		jmp	loc_6E42C0C0
; ---------------------------------------------------------------------------

loc_6E42C3C4:				; CODE XREF: sub_6E42BEC0+33Cj
		mov	[esp+15Ch+var_154], 0BAh
		mov	[esp+15Ch+var_158], offset aD1_both_c ;	"d1_both.c"
		mov	[esp+15Ch+var_15C], esi
		call	CRYPTO_malloc
		mov	edi, eax
		test	eax, eax
		mov	edx, [esp+15Ch+var_134]
		jz	short loc_6E42C427
		mov	[esp+15Ch+var_130], edx
		mov	eax, [esp+15Ch+var_13C]
		mov	[eax+2Ch], edi
		add	esi, 7
		shr	esi, 3
		mov	[esp+15Ch+var_154], 0C7h
		mov	[esp+15Ch+var_158], offset aD1_both_c ;	"d1_both.c"
		mov	[esp+15Ch+var_15C], esi
		call	CRYPTO_malloc
		mov	[esp+15Ch+var_134], eax
		test	eax, eax
		mov	edx, [esp+15Ch+var_130]
		jnz	loc_6E42C23D
		mov	[esp+15Ch+var_15C], edi
		call	CRYPTO_free

loc_6E42C427:				; CODE XREF: sub_6E42BEC0+377j
					; sub_6E42BEC0+524j
		mov	eax, [esp+15Ch+var_13C]
		mov	[esp+15Ch+var_15C], eax
		call	CRYPTO_free
		jmp	loc_6E42BF00
; ---------------------------------------------------------------------------

loc_6E42C438:				; CODE XREF: sub_6E42BEC0+3C5j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E42C28B
; ---------------------------------------------------------------------------

loc_6E42C44C:				; CODE XREF: sub_6E42BEC0+3B9j
		mov	al, [edx]
		mov	[edi], al
		lea	edi, [edi+1]
		lea	esi, [edx+1]
		mov	eax, 2Bh
		jmp	loc_6E42C27F
; ---------------------------------------------------------------------------

loc_6E42C460:				; CODE XREF: sub_6E42BEC0+4C4j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	esi, 2
		jmp	loc_6E42C38A
; ---------------------------------------------------------------------------

loc_6E42C470:				; CODE XREF: sub_6E42BEC0+4B8j
		mov	byte ptr [edi],	0
		lea	edi, [edi+1]
		dec	esi
		jmp	loc_6E42C37E
sub_6E42BEC0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42C480	proc near		; CODE XREF: sub_6E4273E0+96p
					; sub_6E4273E0+C6p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+14h]
		test	eax, eax
		jnz	short loc_6E42C4C0

loc_6E42C48F:				; CODE XREF: sub_6E42C480+56j
		mov	eax, [ebx+2Ch]
		test	eax, eax
		jz	short loc_6E42C49E
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free

loc_6E42C49E:				; CODE XREF: sub_6E42C480+14j
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	short loc_6E42C4AD
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free

loc_6E42C4AD:				; CODE XREF: sub_6E42C480+23j
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	CRYPTO_free
; ---------------------------------------------------------------------------
		align 10h

loc_6E42C4C0:				; CODE XREF: sub_6E42C480+Dj
		mov	eax, [ebx+18h]
		mov	[esp+1Ch+var_1C], eax
		call	EVP_CIPHER_CTX_free
		mov	eax, [ebx+1Ch]
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy
		jmp	short loc_6E42C48F
sub_6E42C480	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42C4E0	proc near		; CODE XREF: .text:6E421F5Cp
					; sub_6E421FC0+1Fp ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, ebx
		call	sub_6E42BD00
		test	eax, eax
		jz	loc_6E42C9E0
		mov	eax, [ebx+5Ch]
		mov	esi, [eax+25Ch]
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_wbio
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 31h
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		mov	edx, 100h
		sub	edx, eax
		cmp	esi, edx
		jb	loc_6E42CA50

loc_6E42C53A:				; CODE XREF: sub_6E42C4E0+58Cj
		mov	esi, [ebx+48h]
		test	esi, esi
		jz	loc_6E42C9F0

loc_6E42C545:				; CODE XREF: sub_6E42C4E0+515j
					; sub_6E42C4E0+52Aj ...
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	loc_6E42CA40
		mov	[esp+4Ch+var_4C], eax
		call	EVP_MD_CTX_md
		mov	[esp+4Ch+var_4C], eax
		call	EVP_MD_size
		mov	[esp+4Ch+var_24], eax

loc_6E42C567:				; CODE XREF: sub_6E42C4E0+568j
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E42C583
		mov	eax, [eax]
		mov	[esp+4Ch+var_4C], eax
		call	EVP_CIPHER_flags
		test	al, 2
		jnz	loc_6E42CA80

loc_6E42C583:				; CODE XREF: sub_6E42C4E0+8Fj
		mov	[esp+4Ch+var_20], 0
		mov	ecx, [esp+4Ch+var_20]

loc_6E42C58F:				; CODE XREF: sub_6E42C4E0+5B8j
		mov	dword ptr [ebx+18h], 1
		mov	edx, [ebx+44h]
		xor	esi, esi
		mov	[esp+4Ch+var_28], 1
		mov	eax, [esp+4Ch+var_24]
		lea	eax, [eax+ecx+0Dh]
		mov	[esp+4Ch+var_2C], eax

loc_6E42C5AF:				; CODE XREF: sub_6E42C4E0+3AFj
		test	edx, edx
		jle	loc_6E42C7E6

loc_6E42C5B7:				; CODE XREF: sub_6E42C4E0+300j
		cmp	[esp+4Ch+arg_4], 16h
		jnz	short loc_6E42C5F0
		mov	eax, [ebx+48h]
		test	eax, eax
		jz	short loc_6E42C5F0
		test	esi, esi
		jz	loc_6E42C9D0
		cmp	eax, 0Ch
		jle	loc_6E42C9E0
		sub	eax, 0Ch
		mov	[ebx+48h], eax
		add	edx, 0Ch
		mov	[ebx+44h], edx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E42C5F0:				; CODE XREF: sub_6E42C4E0+DCj
					; sub_6E42C4E0+E3j ...
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_wbio
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0Dh
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		add	eax, [esp+4Ch+var_2C]
		mov	edx, [ebx+5Ch]
		mov	edi, [edx+25Ch]
		cmp	eax, edi
		jb	loc_6E42C800

loc_6E42C62D:				; CODE XREF: sub_6E42C4E0+32Bj
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_wbio
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0Bh
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E42CA9D
		mov	eax, [esp+4Ch+var_20]
		add	eax, [esp+4Ch+var_24]
		mov	edx, [ebx+5Ch]
		mov	edi, [edx+25Ch]
		lea	ecx, [eax+19h]
		cmp	edi, ecx
		jbe	loc_6E42C9E0
		sub	edi, 0Dh
		sub	edi, eax

loc_6E42C67E:				; CODE XREF: sub_6E42C4E0+325j
		mov	eax, [ebx+44h]
		cmp	edi, eax
		jbe	short loc_6E42C687
		mov	edi, eax

loc_6E42C687:				; CODE XREF: sub_6E42C4E0+1A3j
		test	edi, edi
		js	loc_6E42CAB0
		cmp	[esp+4Ch+arg_4], 16h
		jnz	loc_6E42C7F0
		cmp	edi, 0Bh
		jbe	loc_6E42C9E0
		lea	eax, [edi-0Ch]
		mov	[esp+4Ch+var_30], edi

loc_6E42C6AA:				; CODE XREF: sub_6E42C4E0+5F7j
		mov	[edx+26Ch], esi
		mov	[edx+270h], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		add	eax, [ebx+48h]
		mov	edx, [ebx+5Ch]
		mov	cl, [edx+260h]
		mov	[eax], cl
		xor	ebp, ebp
		mov	bp, [edx+266h]
		mov	ecx, ebp
		mov	[eax+1], cl
		mov	ebp, [edx+264h]
		shr	ebp, 8
		mov	ecx, ebp
		mov	[eax+2], cl
		mov	cl, [edx+264h]
		mov	[eax+3], cl
		movzx	ebp, byte ptr [edx+269h]
		and	ebp, 0FFh
		mov	ecx, ebp
		mov	[eax+4], cl
		mov	cl, [edx+268h]
		mov	[eax+5], cl
		xor	ebp, ebp
		mov	bp, [edx+26Eh]
		mov	ecx, ebp
		mov	[eax+6], cl
		mov	ebp, [edx+26Ch]
		shr	ebp, 8
		mov	ecx, ebp
		mov	[eax+7], cl
		mov	cl, [edx+26Ch]
		mov	[eax+8], cl
		xor	ebp, ebp
		mov	bp, [edx+272h]
		mov	ecx, ebp
		mov	[eax+9], cl
		mov	ebp, [edx+270h]
		shr	ebp, 8
		mov	ecx, ebp
		mov	[eax+0Ah], cl
		mov	edx, [edx+270h]
		mov	[eax+0Bh], dl
		mov	eax, [esp+4Ch+var_30]

loc_6E42C758:				; CODE XREF: sub_6E42C4E0+316j
					; sub_6E42C4E0+5E8j
		mov	[esp+4Ch+var_40], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		add	eax, [ebx+48h]
		mov	[esp+4Ch+var_44], eax
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42AC40
		test	eax, eax
		js	loc_6E42C810
		cmp	eax, edi
		jz	short loc_6E42C7A9
		mov	[esp+4Ch+var_30], eax
		mov	[esp+4Ch+var_44], offset aLenUnsignedInt ; "len	== (unsigned int)ret"
		mov	[esp+4Ch+var_48], 19Fh
		mov	[esp+4Ch+var_4C], offset aD1_both_c ; "d1_both.c"
		call	OpenSSLDie
		mov	eax, [esp+4Ch+var_30]

loc_6E42C7A9:				; CODE XREF: sub_6E42C4E0+2A3j
		cmp	[esp+4Ch+arg_4], 16h
		jz	loc_6E42C8A0

loc_6E42C7B4:				; CODE XREF: sub_6E42C4E0+3CBj
		mov	edx, [ebx+44h]
		cmp	edx, eax
		jz	loc_6E42C970

loc_6E42C7BF:				; CODE XREF: sub_6E42C4E0+483j
		add	[ebx+48h], eax
		sub	edx, eax
		mov	[ebx+44h], edx
		lea	esi, [esi+eax-0Ch]
		mov	eax, [ebx+5Ch]
		mov	[eax+26Ch], esi
		mov	dword ptr [eax+270h], 0
		test	edx, edx
		jg	loc_6E42C5B7

loc_6E42C7E6:				; CODE XREF: sub_6E42C4E0+D1j
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E42C7F0:				; CODE XREF: sub_6E42C4E0+1B4j
		mov	[esp+4Ch+var_30], edi
		mov	eax, edi
		jmp	loc_6E42C758
; ---------------------------------------------------------------------------
		align 10h

loc_6E42C800:				; CODE XREF: sub_6E42C4E0+147j
		sub	edi, eax
		cmp	edi, 0Ch
		ja	loc_6E42C67E
		jmp	loc_6E42C62D
; ---------------------------------------------------------------------------

loc_6E42C810:				; CODE XREF: sub_6E42C4E0+29Bj
		mov	ecx, [esp+4Ch+var_28]
		test	ecx, ecx
		jz	loc_6E42C9E0
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_wbio
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 2Bh
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E42C9E0
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 20h
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_ctrl
		test	ah, 10h
		jnz	loc_6E42C9E0
		mov	eax, ebx
		call	sub_6E42BD00
		test	eax, eax
		jz	loc_6E42C9E0
		mov	edx, [ebx+44h]
		mov	[esp+4Ch+var_28], 0
		jmp	loc_6E42C5AF
; ---------------------------------------------------------------------------
		align 10h

loc_6E42C8A0:				; CODE XREF: sub_6E42C4E0+2CEj
		mov	edi, [ebx+5Ch]
		mov	edx, [edi+2E4h]
		test	edx, edx
		jnz	loc_6E42C7B4
		mov	edx, [ebx+3Ch]
		mov	ecx, [edx+4]
		add	ecx, [ebx+48h]
		test	esi, esi
		jnz	loc_6E42C940
		cmp	dword ptr [ebx], 100h
		jz	short loc_6E42C940
		mov	dl, [edi+260h]
		mov	[ecx], dl
		xor	edx, edx
		mov	dx, [edi+266h]
		mov	[ecx+1], dl
		mov	edx, [edi+264h]
		shr	edx, 8
		mov	[ecx+2], dl
		mov	edx, [edi+264h]
		mov	[ecx+3], dl
		xor	edx, edx
		mov	dl, [edi+269h]
		mov	[ecx+4], dl
		mov	dl, [edi+268h]
		mov	[ecx+5], dl
		mov	byte ptr [ecx+6], 0
		mov	byte ptr [ecx+7], 0
		mov	byte ptr [ecx+8], 0
		xor	edx, edx
		mov	dx, [edi+266h]
		mov	[ecx+9], dl
		mov	edx, [edi+264h]
		shr	edx, 8
		mov	[ecx+0Ah], dl
		mov	edx, [edi+264h]
		mov	[ecx+0Bh], dl
		mov	edx, eax
		jmp	short loc_6E42C946
; ---------------------------------------------------------------------------
		align 10h

loc_6E42C940:				; CODE XREF: sub_6E42C4E0+3DCj
					; sub_6E42C4E0+3E8j
		add	ecx, 0Ch
		lea	edx, [eax-0Ch]

loc_6E42C946:				; CODE XREF: sub_6E42C4E0+456j
		mov	[esp+4Ch+var_30], eax
		mov	[esp+4Ch+var_44], edx
		mov	[esp+4Ch+var_48], ecx
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E411870
		mov	eax, [esp+4Ch+var_30]
		mov	edx, [ebx+44h]
		cmp	edx, eax
		jnz	loc_6E42C7BF
		lea	esi, [esi+0]

loc_6E42C970:				; CODE XREF: sub_6E42C4E0+2D9j
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	short loc_6E42C9AA
		mov	edi, [ebx+68h]
		mov	ecx, [ebx+3Ch]
		mov	esi, [ecx+4]
		mov	ecx, [ebx]
		mov	[esp+4Ch+var_34], edi
		mov	[esp+4Ch+var_38], ebx
		add	eax, [ebx+48h]
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_40], esi
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], ecx
		mov	[esp+4Ch+var_4C], 1
		call	edx

loc_6E42C9AA:				; CODE XREF: sub_6E42C4E0+495j
		mov	dword ptr [ebx+48h], 0
		mov	dword ptr [ebx+44h], 0
		mov	eax, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42C9D0:				; CODE XREF: sub_6E42C4E0+E7j
		mov	eax, [ebx+5Ch]
		mov	esi, [eax+26Ch]
		jmp	loc_6E42C5F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42C9E0:				; CODE XREF: sub_6E42C4E0+14j
					; sub_6E42C4E0+F0j ...
		mov	eax, 0FFFFFFFFh

loc_6E42C9E5:				; CODE XREF: sub_6E42C4E0+5C4j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42C9F0:				; CODE XREF: sub_6E42C4E0+5Fj
		cmp	[esp+4Ch+arg_4], 16h
		jnz	loc_6E42C545
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+264h]
		add	eax, 0Ch
		cmp	[ebx+44h], eax
		jz	loc_6E42C545
		mov	[esp+4Ch+var_44], offset aSInit_numIntSD ; "s->init_num	== (int)s->d1->w_msg_hdr.ms"...
		mov	[esp+4Ch+var_48], 118h
		mov	[esp+4Ch+var_4C], offset aD1_both_c ; "d1_both.c"
		call	OpenSSLDie
		jmp	loc_6E42C545
; ---------------------------------------------------------------------------
		jmp	short loc_6E42CA40
; ---------------------------------------------------------------------------
		align 10h

loc_6E42CA40:				; CODE XREF: sub_6E42C4E0+6Dj
					; sub_6E42C4E0+551j
		mov	[esp+4Ch+var_24], 0
		jmp	loc_6E42C567
; ---------------------------------------------------------------------------
		align 10h

loc_6E42CA50:				; CODE XREF: sub_6E42C4E0+54j
		mov	[esp+4Ch+var_44], offset aSD1MtuDtls1_mi ; "s->d1->mtu >= dtls1_min_mtu(s)"
		mov	[esp+4Ch+var_48], 112h
		mov	[esp+4Ch+var_4C], offset aD1_both_c ; "d1_both.c"
		call	OpenSSLDie
		jmp	loc_6E42C53A
; ---------------------------------------------------------------------------
		jmp	short loc_6E42CA80
; ---------------------------------------------------------------------------
		align 10h

loc_6E42CA80:				; CODE XREF: sub_6E42C4E0+9Dj
					; sub_6E42C4E0+591j
		mov	eax, [ebx+8Ch]
		mov	eax, [eax]
		mov	[esp+4Ch+var_4C], eax
		call	EVP_CIPHER_block_size
		add	eax, eax
		mov	[esp+4Ch+var_20], eax
		mov	ecx, eax
		jmp	loc_6E42C58F
; ---------------------------------------------------------------------------

loc_6E42CA9D:				; CODE XREF: sub_6E42C4E0+177j
		mov	dword ptr [ebx+18h], 2
		jmp	loc_6E42C9E5
; ---------------------------------------------------------------------------
		align 10h

loc_6E42CAB0:				; CODE XREF: sub_6E42C4E0+1A9j
		cmp	[esp+4Ch+arg_4], 16h
		mov	[esp+4Ch+var_30], 7FFFFFFFh
		jz	short loc_6E42CACD
		mov	edi, 7FFFFFFFh
		mov	eax, [esp+4Ch+var_30]
		jmp	loc_6E42C758
; ---------------------------------------------------------------------------

loc_6E42CACD:				; CODE XREF: sub_6E42C4E0+5DDj
		mov	eax, 7FFFFFF3h
		mov	edi, 7FFFFFFFh
		jmp	loc_6E42C6AA
sub_6E42C4E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42CAE0	proc near		; DATA XREF: .rdata:6E44CD10o
					; .rdata:6E44CDB0o ...

var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_15D		= byte ptr -15Dh
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= byte ptr -154h
var_153		= byte ptr -153h
var_152		= byte ptr -152h
var_151		= byte ptr -151h
var_150		= byte ptr -150h
var_14F		= byte ptr -14Fh
var_14E		= byte ptr -14Eh
var_14D		= byte ptr -14Dh
var_14C		= byte ptr -14Ch
var_14B		= byte ptr -14Bh
var_14A		= byte ptr -14Ah
var_149		= byte ptr -149h
var_148		= byte ptr -148h
var_147		= byte ptr -147h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_11C		= byte ptr -11Ch
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 18Ch
		mov	ebp, [esp+19Ch+arg_0]
		mov	eax, [ebp+58h]
		mov	edx, [eax+354h]
		test	edx, edx
		jz	short loc_6E42CB60
		mov	dword ptr [eax+354h], 0
		mov	edi, [esp+19Ch+arg_C]
		test	edi, edi
		js	short loc_6E42CB26
		mov	esi, [esp+19Ch+arg_C]
		cmp	[eax+340h], esi
		jnz	loc_6E42D520

loc_6E42CB26:				; CODE XREF: sub_6E42CAE0+31j
		mov	esi, [esp+19Ch+arg_14]
		mov	dword ptr [esi], 1
		mov	edx, [ebp+3Ch]
		mov	edx, [edx+4]
		add	edx, 0Ch
		mov	[ebp+40h], edx
		mov	eax, [eax+33Ch]
		mov	[ebp+44h], eax

loc_6E42CB48:				; CODE XREF: sub_6E42CAE0+A96j
					; sub_6E42CAE0+AF3j
		add	esp, 18Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42CB60:				; CODE XREF: sub_6E42CAE0+1Cj
		mov	eax, [ebp+5Ch]
		mov	[esp+19Ch+var_168], eax
		add	eax, 28Ch
		mov	[esp+19Ch+var_164], eax
		mov	edi, eax
		mov	edx, 2Ch
		test	al, 1
		jnz	loc_6E42D4D5

loc_6E42CB7F:				; CODE XREF: sub_6E42CAE0+A08j
		test	edi, 2
		jnz	loc_6E42D4ED

loc_6E42CB8B:				; CODE XREF: sub_6E42CAE0+A18j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E42D1C0
		and	edx, 1
		jnz	loc_6E42D1B0
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E42CBB0:				; CODE XREF: sub_6E42CAE0+395j
					; sub_6E42CAE0+6D3j ...
		mov	ecx, [ebp+5Ch]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E42CBC0:				; CODE XREF: sub_6E42CAE0+2D0j
		mov	eax, [esp+19Ch+arg_14]
		mov	dword ptr [eax], 0
		mov	eax, [ecx+244h]
		mov	[esp+19Ch+var_19C], eax
		call	pqueue_peek
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E42CBF3
		mov	eax, [eax+8]
		mov	[esp+19Ch+var_174], eax
		mov	esi, [eax+30h]
		test	esi, esi
		jz	loc_6E42CDC0

loc_6E42CBF3:				; CODE XREF: sub_6E42CAE0+FFj
					; sub_6E42CAE0+2EFj
		mov	eax, [esp+19Ch+arg_14]
		mov	eax, [eax]
		test	eax, eax
		jnz	loc_6E42D57B
		mov	eax, [ebp+8]
		mov	eax, [eax+34h]
		mov	[esp+19Ch+var_18C], 0
		mov	[esp+19Ch+var_190], 0Ch
		lea	edi, [esp+19Ch+var_154]
		mov	[esp+19Ch+var_194], edi
		mov	[esp+19Ch+var_198], 16h
		mov	[esp+19Ch+var_19C], ebp
		call	eax
		test	eax, eax
		jle	loc_6E42D0C0
		cmp	eax, 0Ch
		jnz	loc_6E42D0E0
		mov	ecx, 0Bh
		xor	eax, eax
		lea	edi, [esp+19Ch+var_148]
		rep stosd
		mov	al, [esp+19Ch+var_154]
		mov	byte ptr [esp+19Ch+var_174], al
		mov	[esp+19Ch+var_148], al
		movzx	edi, [esp+19Ch+var_153]
		mov	al, [esp+19Ch+var_152]
		mov	bl, al
		mov	byte ptr [esp+19Ch+var_170], al
		mov	al, [esp+19Ch+var_151]
		mov	cl, al
		mov	byte ptr [esp+19Ch+var_16C], al
		mov	eax, edi
		and	eax, 0FFh
		shl	eax, 10h
		xor	edx, edx
		mov	dl, bl
		shl	edx, 8
		or	eax, edx
		xor	edx, edx
		mov	dl, cl
		or	eax, edx
		mov	[esp+19Ch+var_144], eax
		xor	edx, edx
		mov	dl, [esp+19Ch+var_150]
		shl	edx, 8
		xor	ecx, ecx
		mov	cl, [esp+19Ch+var_14F]
		or	edx, ecx
		mov	word ptr [esp+19Ch+var_140], dx
		movzx	esi, [esp+19Ch+var_14E]
		and	esi, 0FFh
		shl	esi, 10h
		xor	ecx, ecx
		mov	cl, [esp+19Ch+var_14D]
		shl	ecx, 8
		or	esi, ecx
		xor	ecx, ecx
		mov	cl, [esp+19Ch+var_14C]
		or	esi, ecx
		mov	[esp+19Ch+var_13C], esi
		xor	ebx, ebx
		mov	bl, [esp+19Ch+var_14B]
		shl	ebx, 10h
		xor	ecx, ecx
		mov	cl, [esp+19Ch+var_14A]
		shl	ecx, 8
		or	ebx, ecx
		xor	ecx, ecx
		mov	cl, [esp+19Ch+var_149]
		or	ebx, ecx
		mov	[esp+19Ch+var_138], ebx
		mov	ecx, [ebp+58h]
		cmp	[ecx+110h], ebx
		jb	loc_6E42D0F0
		mov	ecx, [ebp+5Ch]
		cmp	[ecx+228h], dx
		jz	short loc_6E42CD1C
		cmp	dword ptr [ecx+254h], 0
		jz	loc_6E42D090
		cmp	dx, 1
		jnz	loc_6E42D090

loc_6E42CD1C:				; CODE XREF: sub_6E42CAE0+223j
		test	ebx, ebx
		jz	short loc_6E42CD28
		cmp	eax, ebx
		ja	loc_6E42D25C

loc_6E42CD28:				; CODE XREF: sub_6E42CAE0+23Ej
		mov	eax, [ebp+24h]
		test	eax, eax
		jnz	loc_6E42CE80
		mov	eax, [ecx+298h]
		test	eax, eax
		jnz	loc_6E42CE80
		cmp	byte ptr [esp+19Ch+var_174], 0
		jnz	loc_6E42CE80
		mov	eax, edi
		test	al, al
		jnz	loc_6E42D020
		cmp	byte ptr [esp+19Ch+var_170], 0
		jnz	loc_6E42D020
		cmp	byte ptr [esp+19Ch+var_16C], 0
		jnz	loc_6E42D020
		mov	eax, [ebp+64h]
		test	eax, eax
		jz	short loc_6E42CDA9
		mov	ecx, [ebp+68h]
		mov	edx, [ebp+0]
		mov	[esp+19Ch+var_184], ecx
		mov	[esp+19Ch+var_188], ebp
		mov	[esp+19Ch+var_18C], 0Ch
		lea	edi, [esp+19Ch+var_154]
		mov	[esp+19Ch+var_190], edi
		mov	[esp+19Ch+var_194], 16h
		mov	[esp+19Ch+var_198], edx
		mov	[esp+19Ch+var_19C], 0
		call	eax
		mov	ecx, [ebp+5Ch]

loc_6E42CDA9:				; CODE XREF: sub_6E42CAE0+291j
		mov	dword ptr [ebp+44h], 0
		jmp	loc_6E42CBC0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42CDC0:				; CODE XREF: sub_6E42CAE0+10Dj
		mov	edi, eax
		mov	eax, [ebp+5Ch]
		mov	edi, [edi+8]
		cmp	[eax+228h], di
		jnz	loc_6E42CBF3
		mov	edi, [esp+19Ch+var_174]
		mov	esi, [edi+10h]
		mov	[esp+19Ch+var_16C], esi
		mov	eax, [eax+244h]
		mov	[esp+19Ch+var_19C], eax
		call	pqueue_pop
		mov	ecx, [esp+19Ch+arg_10]
		mov	edx, edi
		mov	eax, ebp
		call	sub_6E42BBC0
		mov	[esp+19Ch+var_170], eax
		test	eax, eax
		jz	loc_6E42D210

loc_6E42CE0A:				; CODE XREF: sub_6E42CAE0+767j
					; sub_6E42CAE0+777j
		mov	eax, [esp+19Ch+var_174]
		mov	ecx, [eax+14h]
		test	ecx, ecx
		jnz	loc_6E42D1E0

loc_6E42CE19:				; CODE XREF: sub_6E42CAE0+71Cj
		mov	eax, [eax+2Ch]
		test	eax, eax
		jz	short loc_6E42CE28
		mov	[esp+19Ch+var_19C], eax
		call	CRYPTO_free

loc_6E42CE28:				; CODE XREF: sub_6E42CAE0+33Ej
		mov	eax, [esp+19Ch+var_174]
		mov	eax, [eax+30h]
		test	eax, eax
		jz	short loc_6E42CE3B
		mov	[esp+19Ch+var_19C], eax
		call	CRYPTO_free

loc_6E42CE3B:				; CODE XREF: sub_6E42CAE0+351j
		mov	eax, [esp+19Ch+var_174]
		mov	[esp+19Ch+var_19C], eax
		call	CRYPTO_free
		mov	[esp+19Ch+var_19C], ebx
		call	pitem_free
		mov	edx, [esp+19Ch+var_170]
		test	edx, edx
		jnz	loc_6E42D591
		mov	eax, [esp+19Ch+arg_14]
		mov	dword ptr [eax], 1
		mov	eax, [esp+19Ch+var_16C]
		lea	ebx, [eax+3]

loc_6E42CE6F:				; CODE XREF: sub_6E42CAE0+AA2j
		mov	[ebp+44h], eax

loc_6E42CE72:				; CODE XREF: sub_6E42CAE0+5D3j
					; sub_6E42CAE0+5F7j ...
		cmp	ebx, 1
		jbe	loc_6E42CBB0
		jmp	short loc_6E42CEC0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42CE80:				; CODE XREF: sub_6E42CAE0+24Dj
					; sub_6E42CAE0+25Bj ...
		mov	ecx, [esp+19Ch+arg_10]
		lea	edx, [esp+19Ch+var_148]
		mov	eax, ebp
		call	sub_6E42BBC0
		test	eax, eax
		jnz	loc_6E42D051
		test	ebx, ebx
		jnz	loc_6E42D130
		xor	esi, esi

loc_6E42CEA4:				; CODE XREF: sub_6E42CAE0+689j
		mov	eax, [esp+19Ch+arg_14]
		mov	dword ptr [eax], 1
		mov	eax, [esp+19Ch+arg_8]
		mov	[ebp+34h], eax
		mov	[ebp+44h], esi
		mov	eax, esi

loc_6E42CEC0:				; CODE XREF: sub_6E42CAE0+39Bj
		test	eax, eax
		jle	loc_6E42D5C2

loc_6E42CEC8:				; CODE XREF: sub_6E42CAE0+AEDj
		mov	esi, [esp+19Ch+arg_C]
		test	esi, esi
		js	short loc_6E42CEE9
		mov	eax, [ebp+58h]
		mov	edi, [esp+19Ch+arg_C]
		cmp	[eax+340h], edi
		jnz	loc_6E42D587

loc_6E42CEE9:				; CODE XREF: sub_6E42CAE0+3F1j
		mov	eax, [ebp+3Ch]
		mov	ebx, [eax+4]
		mov	edi, [esp+19Ch+var_168]
		mov	eax, [edi+290h]
		mov	dl, [edi+28Ch]
		mov	[ebx], dl
		mov	ecx, eax
		shr	ecx, 10h
		mov	[ebx+1], cl
		mov	edx, eax
		shr	edx, 8
		mov	[esp+19Ch+var_174], edx
		mov	[ebx+2], dl
		mov	[ebx+3], al
		movzx	esi, byte ptr [edi+295h]
		and	esi, 0FFh
		mov	edx, esi
		mov	[ebx+4], dl
		mov	edi, [edi+294h]
		mov	word ptr [esp+19Ch+var_170], di
		mov	dl, byte ptr [esp+19Ch+var_170]
		mov	[ebx+5], dl
		mov	byte ptr [ebx+6], 0
		mov	byte ptr [ebx+7], 0
		mov	byte ptr [ebx+8], 0
		mov	[ebx+9], cl
		mov	dl, byte ptr [esp+19Ch+var_174]
		mov	[ebx+0Ah], dl
		mov	[ebx+0Bh], al
		cmp	dword ptr [ebp+0], 100h
		jz	loc_6E42D4CD
		add	eax, 0Ch

loc_6E42CF65:				; CODE XREF: sub_6E42CAE0+9F0j
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_174], eax
		mov	[esp+19Ch+var_198], ebx
		mov	[esp+19Ch+var_19C], ebp
		call	sub_6E411870
		mov	edx, [ebp+64h]
		test	edx, edx
		jz	short loc_6E42CFAF
		mov	esi, [ebp+68h]
		mov	ecx, [ebp+0]
		mov	[esp+19Ch+var_184], esi
		mov	[esp+19Ch+var_188], ebp
		mov	eax, [esp+19Ch+var_174]
		mov	[esp+19Ch+var_18C], eax
		mov	[esp+19Ch+var_190], ebx
		mov	[esp+19Ch+var_194], 16h
		mov	[esp+19Ch+var_198], ecx
		mov	[esp+19Ch+var_19C], 0
		call	edx

loc_6E42CFAF:				; CODE XREF: sub_6E42CAE0+49Ej
		mov	edi, [esp+19Ch+var_164]
		mov	edx, 2Ch
		test	edi, 1
		jnz	loc_6E42D50D

loc_6E42CFC4:				; CODE XREF: sub_6E42CAE0+A3Bj
		test	edi, 2
		jnz	loc_6E42D4FD

loc_6E42CFD0:				; CODE XREF: sub_6E42CAE0+A28j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jz	short loc_6E42CFE6
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E42CFE6:				; CODE XREF: sub_6E42CAE0+4FCj
		and	edx, 1
		jz	short loc_6E42CFEE
		mov	byte ptr [edi],	0

loc_6E42CFEE:				; CODE XREF: sub_6E42CAE0+509j
		mov	eax, [ebp+5Ch]
		mov	ecx, [eax+254h]
		test	ecx, ecx
		jnz	short loc_6E42D002
		inc	word ptr [eax+228h]

loc_6E42D002:				; CODE XREF: sub_6E42CAE0+519j
		mov	eax, [ebp+3Ch]
		mov	eax, [eax+4]
		add	eax, 0Ch
		mov	[ebp+40h], eax
		mov	eax, [ebp+44h]
		add	esp, 18Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D020:				; CODE XREF: sub_6E42CAE0+270j
					; sub_6E42CAE0+27Bj ...
		mov	[esp+19Ch+var_18C], 3B8h

loc_6E42D028:				; CODE XREF: sub_6E42CAE0+608j
		mov	[esp+19Ch+var_190], offset aD1_both_c ;	"d1_both.c"
		mov	[esp+19Ch+var_194], 0F4h
		mov	[esp+19Ch+var_198], 0FDh
		mov	[esp+19Ch+var_19C], 14h
		call	ERR_put_error
		mov	eax, 0Ah

loc_6E42D051:				; CODE XREF: sub_6E42CAE0+3B4j
					; sub_6E42CAE0+641j ...
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], 2
		mov	[esp+19Ch+var_19C], ebp
		call	sub_6E4151B0
		mov	dword ptr [ebp+44h], 0
		mov	eax, [esp+19Ch+arg_14]
		mov	dword ptr [eax], 0
		mov	eax, 0FFFFFFFFh
		add	esp, 18Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D090:				; CODE XREF: sub_6E42CAE0+22Cj
					; sub_6E42CAE0+236j
		add	esi, ebx
		cmp	eax, esi
		jnb	loc_6E42D276

loc_6E42D09A:				; CODE XREF: sub_6E42CAE0+838j
					; sub_6E42CAE0+860j ...
		mov	ebx, 2
		mov	esi, 0FFFFFFFFh

loc_6E42D0A4:				; CODE XREF: sub_6E42CAE0+99Fj
					; sub_6E42CAE0+C46j
		mov	eax, [esp+19Ch+arg_14]
		mov	dword ptr [eax], 0
		mov	eax, esi
		jmp	loc_6E42CE72
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D0C0:				; CODE XREF: sub_6E42CAE0+151j
		mov	dword ptr [ebp+18h], 3
		mov	edi, [esp+19Ch+arg_14]
		mov	dword ptr [edi], 0
		lea	ebx, [eax+3]
		jmp	loc_6E42CE72
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D0E0:				; CODE XREF: sub_6E42CAE0+15Aj
		mov	[esp+19Ch+var_18C], 383h
		jmp	loc_6E42D028
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D0F0:				; CODE XREF: sub_6E42CAE0+213j
		mov	[esp+19Ch+var_18C], 394h
		mov	[esp+19Ch+var_190], offset aD1_both_c ;	"d1_both.c"
		mov	[esp+19Ch+var_194], 10Fh
		mov	[esp+19Ch+var_198], 0FDh
		mov	[esp+19Ch+var_19C], 14h
		call	ERR_put_error
		mov	eax, 2Fh
		jmp	loc_6E42D051
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D130:				; CODE XREF: sub_6E42CAE0+3BCj
		mov	eax, [ebp+8]
		mov	eax, [eax+34h]
		mov	[esp+19Ch+var_18C], 0
		mov	[esp+19Ch+var_190], ebx
		mov	edx, [ebp+3Ch]
		mov	edx, [edx+4]
		lea	edx, [edx+esi+0Ch]
		mov	[esp+19Ch+var_194], edx
		mov	[esp+19Ch+var_198], 16h
		mov	[esp+19Ch+var_19C], ebp
		call	eax
		test	eax, eax
		jle	loc_6E42D4B1
		mov	esi, ebx
		cmp	ebx, eax
		jz	loc_6E42CEA4
		mov	[esp+19Ch+var_18C], 3D9h
		mov	[esp+19Ch+var_190], offset aD1_both_c ;	"d1_both.c"
		mov	[esp+19Ch+var_194], 2Fh
		mov	[esp+19Ch+var_198], 0FDh
		mov	[esp+19Ch+var_19C], 14h
		call	ERR_put_error
		mov	eax, 2Fh
		jmp	loc_6E42D051
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D1B0:				; CODE XREF: sub_6E42CAE0+C0j
					; sub_6E42CAE0+6F1j
		mov	byte ptr [edi],	0
		jmp	loc_6E42CBB0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D1C0:				; CODE XREF: sub_6E42CAE0+B7j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E42CBB0
		jmp	short loc_6E42D1B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D1E0:				; CODE XREF: sub_6E42CAE0+333j
		mov	edi, eax
		mov	eax, [eax+18h]
		mov	[esp+19Ch+var_19C], eax
		call	EVP_CIPHER_CTX_free
		mov	eax, [edi+1Ch]
		mov	[esp+19Ch+var_19C], eax
		call	EVP_MD_CTX_destroy
		mov	eax, [esp+19Ch+var_174]
		jmp	loc_6E42CE19
; ---------------------------------------------------------------------------
		jmp	short loc_6E42D210
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D210:				; CODE XREF: sub_6E42CAE0+324j
					; sub_6E42CAE0+721j
		mov	edi, [esp+19Ch+var_174]
		mov	ecx, [edi+2Ch]
		mov	eax, [ebp+3Ch]
		mov	edx, [eax+4]
		mov	eax, [edi+0Ch]
		lea	edx, [edx+eax+0Ch]
		mov	eax, [edi+10h]
		mov	edi, edx
		mov	esi, ecx
		cmp	eax, 4
		jnb	loc_6E42D484

loc_6E42D234:				; CODE XREF: sub_6E42CAE0+9C0j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E42D245
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E42D245:				; CODE XREF: sub_6E42CAE0+758j
		test	al, 1
		jz	loc_6E42CE0A
		mov	al, [esi+edx]
		mov	[esp+19Ch+var_15D], al
		mov	[edi+edx], al
		jmp	loc_6E42CE0A
; ---------------------------------------------------------------------------

loc_6E42D25C:				; CODE XREF: sub_6E42CAE0+242j
					; sub_6E42CAE0+81Ej
		mov	ecx, [esp+19Ch+arg_14]
		lea	edx, [esp+19Ch+var_148]
		mov	eax, ebp
		call	sub_6E42BEC0
		lea	ebx, [eax+3]
		jmp	loc_6E42CE72
; ---------------------------------------------------------------------------

loc_6E42D276:				; CODE XREF: sub_6E42CAE0+5B4j
		mov	[esp+19Ch+var_15C], 0
		mov	[esp+19Ch+var_158], 0
		mov	eax, edx
		shr	ax, 8
		mov	byte ptr [esp+19Ch+var_158+2], al
		mov	byte ptr [esp+19Ch+var_158+3], dl
		mov	eax, [ecx+244h]
		lea	edi, [esp+19Ch+var_15C]
		mov	[esp+19Ch+var_198], edi
		mov	[esp+19Ch+var_19C], eax
		call	pqueue_find
		test	eax, eax
		jz	short loc_6E42D2B6
		cmp	ebx, [esp+19Ch+var_144]
		jz	short loc_6E42D2B6
		xor	eax, eax

loc_6E42D2B6:				; CODE XREF: sub_6E42CAE0+7CCj
					; sub_6E42CAE0+7D2j
		mov	ecx, [esp+19Ch+var_140]
		mov	edx, [ebp+5Ch]
		mov	edx, [edx+228h]
		cmp	cx, dx
		jbe	loc_6E42D430
		and	ecx, 0FFFFh
		xor	esi, esi
		mov	si, dx
		add	esi, 0Ah
		cmp	ecx, esi
		jg	loc_6E42D430
		test	eax, eax
		jnz	loc_6E42D430
		test	dx, dx
		jnz	short loc_6E42D2FA
		cmp	[esp+19Ch+var_148], 14h
		jz	loc_6E42D430

loc_6E42D2FA:				; CODE XREF: sub_6E42CAE0+80Dj
		cmp	ebx, [esp+19Ch+var_144]
		jnz	loc_6E42D25C
		mov	eax, [ebp+108h]
		cmp	eax, 454Ch
		jnb	short loc_6E42D316
		mov	eax, 454Ch

loc_6E42D316:				; CODE XREF: sub_6E42CAE0+82Fj
		cmp	ebx, eax
		ja	loc_6E42D09A
		mov	[esp+19Ch+var_194], 0B5h
		mov	[esp+19Ch+var_198], offset aD1_both_c ;	"d1_both.c"
		mov	[esp+19Ch+var_19C], 34h
		call	CRYPTO_malloc
		mov	[esp+19Ch+var_174], eax
		test	eax, eax
		jz	loc_6E42D09A
		test	ebx, ebx
		jnz	loc_6E42D604
		mov	edx, [esp+19Ch+var_174]
		mov	dword ptr [edx+2Ch], 0
		mov	dword ptr [edx+30h], 0
		mov	edi, edx
		lea	esi, [esp+19Ch+var_148]
		mov	eax, 2Ch
		and	edx, 1
		jz	short loc_6E42D384
		mov	al, [esp+19Ch+var_148]
		mov	byte ptr [esp+19Ch+var_170], al
		mov	[edi], al
		inc	edi
		lea	esi, [esp+19Ch+var_147]
		mov	eax, 2Bh

loc_6E42D384:				; CODE XREF: sub_6E42CAE0+88Ej
		test	edi, 2
		jz	short loc_6E42D39B
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2

loc_6E42D39B:				; CODE XREF: sub_6E42CAE0+8AAj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E42D3B3
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E42D3B3:				; CODE XREF: sub_6E42CAE0+8C6j
		test	al, 1
		jz	short loc_6E42D3C1
		mov	al, [esi+edx]
		mov	byte ptr [esp+19Ch+var_170], al
		mov	[edi+edx], al

loc_6E42D3C1:				; CODE XREF: sub_6E42CAE0+8D5j
		mov	edi, 0FFFFFFFFh
		mov	esi, 0FFFFFFFFh

loc_6E42D3CB:				; CODE XREF: sub_6E42CAE0+C51j
		mov	eax, [esp+19Ch+var_174]
		mov	[esp+19Ch+var_198], eax
		lea	eax, [esp+19Ch+var_15C]
		mov	[esp+19Ch+var_19C], eax
		call	pitem_new
		test	eax, eax
		jz	loc_6E42D747
		mov	edx, [ebp+5Ch]
		mov	edx, [edx+244h]
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+var_19C], edx
		call	pqueue_insert
		test	eax, eax
		jnz	loc_6E42D4A5
		mov	[esp+19Ch+var_194], offset aItemNull ; "item !=	NULL"
		mov	[esp+19Ch+var_198], 35Ch
		mov	[esp+19Ch+var_19C], offset aD1_both_c ;	"d1_both.c"
		call	OpenSSLDie
		xor	ebx, ebx
		mov	eax, 0FFFFFFFDh
		jmp	loc_6E42CE72
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D430:				; CODE XREF: sub_6E42CAE0+7E6j
					; sub_6E42CAE0+7FCj ...
		lea	edi, [esp+19Ch+var_11C]
		test	ebx, ebx
		jnz	short loc_6E42D444
		jmp	short loc_6E42D4A5
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D440:				; CODE XREF: sub_6E42CAE0+998j
		sub	ebx, eax
		jz	short loc_6E42D4A5

loc_6E42D444:				; CODE XREF: sub_6E42CAE0+959j
		mov	eax, [ebp+8]
		mov	edx, [eax+34h]
		mov	[esp+19Ch+var_18C], 0
		mov	eax, ebx
		cmp	ebx, 100h
		jbe	short loc_6E42D461
		mov	eax, 100h

loc_6E42D461:				; CODE XREF: sub_6E42CAE0+97Aj
		mov	[esp+19Ch+var_190], eax
		mov	[esp+19Ch+var_194], edi
		mov	[esp+19Ch+var_198], 16h
		mov	[esp+19Ch+var_19C], ebp
		call	edx
		test	eax, eax
		jg	short loc_6E42D440
		mov	esi, eax
		lea	ebx, [eax+3]
		jmp	loc_6E42D0A4
; ---------------------------------------------------------------------------

loc_6E42D484:				; CODE XREF: sub_6E42CAE0+74Ej
		test	dl, 1
		jnz	loc_6E42D5E0

loc_6E42D48D:				; CODE XREF: sub_6E42CAE0+B0Bj
		test	edi, 2
		jnz	loc_6E42D5F0

loc_6E42D499:				; CODE XREF: sub_6E42CAE0+B1Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E42D234
; ---------------------------------------------------------------------------

loc_6E42D4A5:				; CODE XREF: sub_6E42CAE0+91Ej
					; sub_6E42CAE0+95Bj ...
		xor	ebx, ebx
		mov	eax, 0FFFFFFFDh
		jmp	loc_6E42CE72
; ---------------------------------------------------------------------------

loc_6E42D4B1:				; CODE XREF: sub_6E42CAE0+67Fj
		mov	dword ptr [ebp+18h], 3
		mov	esi, [esp+19Ch+arg_14]
		mov	dword ptr [esi], 0
		lea	ebx, [eax+3]
		jmp	loc_6E42CE72
; ---------------------------------------------------------------------------

loc_6E42D4CD:				; CODE XREF: sub_6E42CAE0+47Cj
		add	ebx, 0Ch
		jmp	loc_6E42CF65
; ---------------------------------------------------------------------------

loc_6E42D4D5:				; CODE XREF: sub_6E42CAE0+99j
		mov	eax, [esp+19Ch+var_168]
		mov	byte ptr [eax+28Ch], 0
		lea	edi, [eax+28Dh]
		mov	dl, 2Bh
		jmp	loc_6E42CB7F
; ---------------------------------------------------------------------------

loc_6E42D4ED:				; CODE XREF: sub_6E42CAE0+A5j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E42CB8B
; ---------------------------------------------------------------------------

loc_6E42D4FD:				; CODE XREF: sub_6E42CAE0+4EAj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E42CFD0
; ---------------------------------------------------------------------------

loc_6E42D50D:				; CODE XREF: sub_6E42CAE0+4DEj
		mov	eax, [esp+19Ch+var_168]
		mov	byte ptr [eax+28Ch], 0
		inc	edi
		mov	dl, 2Bh
		jmp	loc_6E42CFC4
; ---------------------------------------------------------------------------

loc_6E42D520:				; CODE XREF: sub_6E42CAE0+40j
		mov	[esp+19Ch+var_18C], 1EFh

loc_6E42D528:				; CODE XREF: sub_6E42CAE0+AAFj
		mov	[esp+19Ch+var_190], offset aD1_both_c ;	"d1_both.c"
		mov	[esp+19Ch+var_194], 0F4h
		mov	[esp+19Ch+var_198], 0FCh
		mov	[esp+19Ch+var_19C], 14h
		call	ERR_put_error
		mov	[esp+19Ch+var_194], 0Ah
		mov	[esp+19Ch+var_198], 2
		mov	[esp+19Ch+var_19C], ebp
		call	sub_6E4151B0
		mov	eax, [esp+19Ch+arg_14]
		mov	dword ptr [eax], 0
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42CB48
; ---------------------------------------------------------------------------

loc_6E42D57B:				; CODE XREF: sub_6E42CAE0+11Ej
		xor	eax, eax
		mov	ebx, 3
		jmp	loc_6E42CE6F
; ---------------------------------------------------------------------------

loc_6E42D587:				; CODE XREF: sub_6E42CAE0+403j
		mov	[esp+19Ch+var_18C], 206h
		jmp	short loc_6E42D528
; ---------------------------------------------------------------------------

loc_6E42D591:				; CODE XREF: sub_6E42CAE0+375j
		mov	eax, [esp+19Ch+var_170]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], 2
		mov	[esp+19Ch+var_19C], ebp
		call	sub_6E4151B0
		mov	dword ptr [ebp+44h], 0
		mov	eax, [esp+19Ch+arg_14]
		mov	dword ptr [eax], 0
		mov	eax, 0FFFFFFFFh

loc_6E42D5C2:				; CODE XREF: sub_6E42CAE0+3E2j
		mov	esi, [esp+19Ch+arg_14]
		mov	ebx, [esi]
		test	ebx, ebx
		jnz	loc_6E42CEC8
		jmp	loc_6E42CB48
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D5E0:				; CODE XREF: sub_6E42CAE0+9A7j
		mov	cl, [ecx]
		mov	[esp+19Ch+var_15D], cl
		mov	[edx], cl
		inc	edi
		inc	esi
		dec	eax
		jmp	loc_6E42D48D
; ---------------------------------------------------------------------------

loc_6E42D5F0:				; CODE XREF: sub_6E42CAE0+9B3j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E42D499
; ---------------------------------------------------------------------------

loc_6E42D604:				; CODE XREF: sub_6E42CAE0+868j
		mov	[esp+19Ch+var_194], 0BAh
		mov	[esp+19Ch+var_198], offset aD1_both_c ;	"d1_both.c"
		mov	[esp+19Ch+var_19C], ebx
		call	CRYPTO_malloc
		test	eax, eax
		jz	loc_6E42D736
		mov	edx, [esp+19Ch+var_174]
		mov	[edx+2Ch], eax
		mov	dword ptr [edx+30h], 0
		mov	edi, edx
		lea	esi, [esp+19Ch+var_148]
		mov	eax, 2Ch
		and	edx, 1
		jz	short loc_6E42D658
		mov	al, [esp+19Ch+var_148]
		mov	byte ptr [esp+19Ch+var_170], al
		mov	[edi], al
		lea	edi, [edi+1]
		lea	esi, [esp+19Ch+var_147]
		mov	eax, 2Bh

loc_6E42D658:				; CODE XREF: sub_6E42CAE0+B60j
		test	edi, 2
		jz	short loc_6E42D66F
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2

loc_6E42D66F:				; CODE XREF: sub_6E42CAE0+B7Ej
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E42D687
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E42D687:				; CODE XREF: sub_6E42CAE0+B9Aj
		test	al, 1
		jz	short loc_6E42D695
		mov	al, [esi+edx]
		mov	byte ptr [esp+19Ch+var_170], al
		mov	[edi+edx], al

loc_6E42D695:				; CODE XREF: sub_6E42CAE0+BA9j
		mov	eax, [ebp+8]
		mov	eax, [eax+34h]
		mov	edi, [esp+19Ch+var_174]
		mov	edx, [edi+2Ch]
		mov	[esp+19Ch+var_18C], 0
		mov	[esp+19Ch+var_190], ebx
		mov	[esp+19Ch+var_194], edx
		mov	[esp+19Ch+var_198], 16h
		mov	[esp+19Ch+var_19C], ebp
		call	eax
		mov	esi, eax
		cmp	ebx, eax
		jz	short loc_6E42D72B
		mov	ebx, 2
		mov	esi, 0FFFFFFFFh

loc_6E42D6CF:				; CODE XREF: sub_6E42CAE0+C6Aj
					; sub_6E42CAE0+C6Fj
		mov	eax, [esp+19Ch+var_174]
		mov	edx, [eax+14h]
		test	edx, edx
		jz	short loc_6E42D6F8
		mov	edi, [esp+19Ch+var_174]
		mov	eax, [edi+18h]
		mov	[esp+19Ch+var_19C], eax
		call	EVP_CIPHER_CTX_free
		mov	eax, [edi+1Ch]
		mov	[esp+19Ch+var_19C], eax
		call	EVP_MD_CTX_destroy
		mov	eax, [esp+19Ch+var_174]

loc_6E42D6F8:				; CODE XREF: sub_6E42CAE0+BF8j
		mov	eax, [eax+2Ch]
		test	eax, eax
		jz	short loc_6E42D707
		mov	[esp+19Ch+var_19C], eax
		call	CRYPTO_free

loc_6E42D707:				; CODE XREF: sub_6E42CAE0+C1Dj
		mov	eax, [esp+19Ch+var_174]
		mov	eax, [eax+30h]
		test	eax, eax
		jz	short loc_6E42D71A
		mov	[esp+19Ch+var_19C], eax
		call	CRYPTO_free

loc_6E42D71A:				; CODE XREF: sub_6E42CAE0+C30j
		mov	eax, [esp+19Ch+var_174]
		mov	[esp+19Ch+var_19C], eax
		call	CRYPTO_free
		jmp	loc_6E42D0A4
; ---------------------------------------------------------------------------

loc_6E42D72B:				; CODE XREF: sub_6E42CAE0+BE3j
		test	esi, esi
		jle	short loc_6E42D74C
		mov	edi, esi
		jmp	loc_6E42D3CB
; ---------------------------------------------------------------------------

loc_6E42D736:				; CODE XREF: sub_6E42CAE0+B3Ej
		mov	eax, [esp+19Ch+var_174]
		mov	[esp+19Ch+var_19C], eax
		call	CRYPTO_free
		jmp	loc_6E42D09A
; ---------------------------------------------------------------------------

loc_6E42D747:				; CODE XREF: sub_6E42CAE0+901j
		lea	ebx, [edi+3]
		jmp	short loc_6E42D6CF
; ---------------------------------------------------------------------------

loc_6E42D74C:				; CODE XREF: sub_6E42CAE0+C4Dj
		lea	ebx, [esi+3]
		jmp	loc_6E42D6CF
sub_6E42CAE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42D760	proc near		; CODE XREF: .text:6E4234A3p
					; sub_6E4239E0+1054p ...

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_50		= dword	ptr -50h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	edi, [esp+0CCh+arg_0]
		mov	ebx, [esp+0CCh+arg_4]
		mov	eax, [edi+3Ch]
		mov	[esp+0CCh+var_B8], eax
		mov	[esp+0CCh+var_C8], 0Ah
		mov	[esp+0CCh+var_CC], eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		jz	loc_6E42DA40
		test	ebx, ebx
		jz	loc_6E42D9F0
		mov	eax, [edi+0E4h]
		mov	eax, [eax+0Ch]
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+var_C4], ebx
		mov	[esp+0CCh+var_C8], eax
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	X509_STORE_CTX_init
		test	eax, eax
		jz	loc_6E42D970
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	X509_verify_cert
		call	ERR_clear_error
		mov	ebx, 0Fh
		xor	esi, esi
		mov	[esp+0CCh+arg_0], edi
		mov	eax, [esp+0CCh+var_50]
		mov	[esp+0CCh+var_CC], eax
		call	sk_num
		cmp	esi, eax
		jge	loc_6E42D897
		nop

loc_6E42D800:				; CODE XREF: sub_6E42D760+131j
		mov	[esp+0CCh+var_C8], esi
		mov	eax, [esp+0CCh+var_50]
		mov	[esp+0CCh+var_CC], eax
		call	sk_value
		mov	ebp, eax
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], eax
		call	i2d_X509
		lea	edi, [ebx+eax+3]
		mov	[esp+0CCh+var_B4], eax
		mov	[esp+0CCh+var_C8], edi
		mov	eax, [esp+0CCh+var_B8]
		mov	[esp+0CCh+var_CC], eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		mov	edx, [esp+0CCh+var_B4]
		jz	loc_6E42D9B0
		mov	eax, [esp+0CCh+var_B8]
		add	ebx, [eax+4]
		mov	[esp+0CCh+var_A8], ebx
		mov	eax, edx
		sar	eax, 10h
		mov	[ebx], al
		mov	ebx, edx
		sar	ebx, 8
		mov	eax, [esp+0CCh+var_A8]
		mov	[eax+1], bl
		mov	eax, [esp+0CCh+var_A8]
		mov	[eax+2], dl
		add	[esp+0CCh+var_A8], 3
		lea	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebp
		call	i2d_X509
		inc	esi
		mov	ebx, edi
		mov	eax, [esp+0CCh+var_50]
		mov	[esp+0CCh+var_CC], eax
		call	sk_num
		cmp	esi, eax
		jl	loc_6E42D800

loc_6E42D897:				; CODE XREF: sub_6E42D760+99j
		mov	edi, [esp+0CCh+arg_0]
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	X509_STORE_CTX_cleanup

loc_6E42D8AA:				; CODE XREF: sub_6E42D760+295j
		xor	esi, esi
		lea	esi, [esi+0]

loc_6E42D8B0:				; CODE XREF: sub_6E42D760+1FDj
		mov	eax, [edi+0E4h]
		mov	eax, [eax+94h]
		mov	[esp+0CCh+var_CC], eax
		call	sk_num
		cmp	esi, eax
		jge	loc_6E42DA80
		mov	eax, [edi+0E4h]
		mov	eax, [eax+94h]
		mov	[esp+0CCh+var_C8], esi
		mov	[esp+0CCh+var_CC], eax
		call	sk_value
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], eax
		mov	[esp+0CCh+var_B0], eax
		call	i2d_X509
		lea	ebp, [ebx+eax+3]
		mov	[esp+0CCh+var_B4], eax
		mov	[esp+0CCh+var_C8], ebp
		mov	eax, [esp+0CCh+var_B8]
		mov	[esp+0CCh+var_CC], eax
		call	BUF_MEM_grow_clean
		test	eax, eax
		mov	edx, [esp+0CCh+var_B4]
		mov	ecx, [esp+0CCh+var_B0]
		jz	loc_6E42DA00
		mov	eax, [esp+0CCh+var_B8]
		add	ebx, [eax+4]
		mov	[esp+0CCh+var_A4], ebx
		mov	eax, edx
		sar	eax, 10h
		mov	[ebx], al
		mov	ebx, edx
		sar	ebx, 8
		mov	eax, [esp+0CCh+var_A4]
		mov	[eax+1], bl
		mov	eax, [esp+0CCh+var_A4]
		mov	[eax+2], dl
		add	[esp+0CCh+var_A4], 3
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ecx
		call	i2d_X509
		inc	esi
		mov	ebx, ebp
		jmp	loc_6E42D8B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D970:				; CODE XREF: sub_6E42D760+66j
		mov	[esp+0CCh+var_BC], 471h
		mov	[esp+0CCh+var_C0], offset aD1_both_c ; "d1_both.c"
		mov	[esp+0CCh+var_C4], 0Bh
		mov	[esp+0CCh+var_C8], 0FFh
		mov	[esp+0CCh+var_CC], 14h
		call	ERR_put_error
		lea	esi, [esi+0]

loc_6E42D9A0:				; CODE XREF: sub_6E42D760+288j
					; sub_6E42D760+2CCj
		xor	eax, eax
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D9B0:				; CODE XREF: sub_6E42D760+E0j
		mov	[esp+0CCh+var_BC], 455h
		mov	[esp+0CCh+var_C0], offset aD1_both_c ; "d1_both.c"
		mov	[esp+0CCh+var_C4], 7
		mov	[esp+0CCh+var_C8], 127h
		mov	[esp+0CCh+var_CC], 14h
		call	ERR_put_error
		lea	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	X509_STORE_CTX_cleanup
		jmp	short loc_6E42D9A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42D9F0:				; CODE XREF: sub_6E42D760+39j
		mov	ebx, 0Fh
		jmp	loc_6E42D8AA
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DA00:				; CODE XREF: sub_6E42D760+1BAj
		mov	[esp+0CCh+var_BC], 455h
		mov	[esp+0CCh+var_C0], offset aD1_both_c ; "d1_both.c"
		mov	[esp+0CCh+var_C4], 7
		mov	[esp+0CCh+var_C8], 127h
		mov	[esp+0CCh+var_CC], 14h
		call	ERR_put_error
		jmp	loc_6E42D9A0
; ---------------------------------------------------------------------------
		jmp	short loc_6E42DA40
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DA40:				; CODE XREF: sub_6E42D760+31j
					; sub_6E42D760+2D1j
		mov	[esp+0CCh+var_BC], 46Ah
		mov	[esp+0CCh+var_C0], offset aD1_both_c ; "d1_both.c"
		mov	[esp+0CCh+var_C4], 7
		mov	[esp+0CCh+var_C8], 0FFh
		mov	[esp+0CCh+var_CC], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DA80:				; CODE XREF: sub_6E42D760+166j
		lea	edx, [ebx-0Fh]
		mov	eax, [esp+0CCh+var_B8]
		mov	eax, [eax+4]
		mov	ecx, edx
		shr	ecx, 10h
		mov	[eax+0Ch], cl
		mov	ecx, edx
		shr	ecx, 8
		mov	[eax+0Dh], cl
		mov	[eax+0Eh], dl
		lea	edx, [ebx-0Ch]
		mov	eax, [edi+5Ch]
		mov	ecx, [eax+254h]
		test	ecx, ecx
		jz	short loc_6E42DAF0
		mov	ecx, [eax+224h]

loc_6E42DAB3:				; CODE XREF: sub_6E42D760+3A8j
		mov	byte ptr [eax+260h], 0Bh
		mov	[eax+264h], edx
		mov	[eax+268h], cx
		mov	dword ptr [eax+26Ch], 0
		mov	[eax+270h], edx
		mov	eax, ebx
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DAF0:				; CODE XREF: sub_6E42D760+34Bj
		mov	cx, [eax+226h]
		mov	[eax+224h], cx
		lea	esi, [ecx+1]
		mov	[eax+226h], si
		jmp	short loc_6E42DAB3
sub_6E42D760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42DB10	proc near		; CODE XREF: sub_6E4296E0+297p

File		= dword	ptr -1Ch
Format		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		mov	ebx, [esp+1Ch+arg_4]
		test	ebx, ebx
		jle	short loc_6E42DB60
		mov	[esp+1Ch+var_10], 498h
		mov	[esp+1Ch+var_14], offset aD1_both_c ; "d1_both.c"
		mov	[esp+1Ch+Format], offset aInvalidStateRe ; "invalid state reached %s:%d"
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+File],	eax ; File
		call	fprintf
		mov	eax, 1

loc_6E42DB4E:				; CODE XREF: sub_6E42DB10+BAj
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DB60:				; CODE XREF: sub_6E42DB10+Fj
		mov	[esp+1Ch+File],	esi
		call	sub_6E427B10
		test	eax, eax
		jnz	short loc_6E42DB80
		mov	eax, ebx
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DB80:				; CODE XREF: sub_6E42DB10+5Aj
		mov	[esp+1Ch+File],	esi
		call	SSL_state
		test	ah, 30h
		jnz	short loc_6E42DB97
		mov	eax, [esi+188h]
		test	eax, eax
		jz	short loc_6E42DBB0

loc_6E42DB97:				; CODE XREF: sub_6E42DB10+7Bj
		mov	[esp+1Ch+arg_0], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	sub_6E427E70
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DBB0:				; CODE XREF: sub_6E42DB10+85j
		mov	[esp+1Ch+File],	esi
		call	SSL_get_rbio
		mov	[esp+1Ch+Format], 1
		mov	[esp+1Ch+File],	eax
		call	BIO_set_flags
		mov	eax, ebx
		jmp	short loc_6E42DB4E
sub_6E42DB10	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		mov	ax, [esp+4]
		add	eax, eax
		sub	eax, [esp+8]
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42DBE0	proc near		; CODE XREF: sub_6E427E70+233p
					; sub_6E4296E0+D8Ep

Str		= dword	ptr -5Ch
Size		= dword	ptr -58h
Count		= dword	ptr -54h
File		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, [esp+5Ch+arg_0]
		mov	eax, [ebp+5Ch]
		mov	eax, [eax+248h]
		mov	[esp+5Ch+Str], eax
		call	pqueue_iterator
		mov	[esp+5Ch+var_28], eax

loc_6E42DC00:				; CODE XREF: sub_6E42DBE0+22Bj
					; sub_6E42DBE0+32Cj
		lea	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+Str], eax
		call	pqueue_next
		test	eax, eax
		jz	loc_6E42DEE0
		mov	edx, [eax+8]
		xor	eax, eax
		mov	ax, [edx+8]
		add	eax, eax
		sub	eax, [edx+14h]
		xor	ebx, ebx
		mov	bx, ax
		mov	[esp+5Ch+var_24], 0
		mov	[esp+5Ch+var_20], 0
		mov	eax, ebx
		shr	ax, 8
		mov	byte ptr [esp+5Ch+var_20+2], al
		mov	byte ptr [esp+5Ch+var_20+3], bl
		mov	eax, [ebp+5Ch]
		mov	eax, [eax+248h]
		lea	edi, [esp+5Ch+var_24]
		mov	[esp+5Ch+Size],	edi
		mov	[esp+5Ch+Str], eax
		call	pqueue_find
		test	eax, eax
		jz	loc_6E42DEF0
		mov	ebx, [eax+8]
		cmp	dword ptr [ebx+14h], 1
		sbb	eax, eax
		and	eax, 0Bh
		inc	eax
		mov	ecx, [ebx+2Ch]
		mov	edx, [ebp+3Ch]
		mov	edx, [edx+4]
		mov	edi, [ebx+4]
		add	edi, eax
		mov	[esp+5Ch+var_4C], edi
		mov	edi, edx
		mov	esi, ecx
		cmp	[esp+5Ch+var_4C], 4
		jnb	loc_6E42DE50

loc_6E42DC94:				; CODE XREF: sub_6E42DBE0+28Ej
		xor	edx, edx
		test	byte ptr [esp+5Ch+var_4C], 2
		jz	short loc_6E42DCA8
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E42DCA8:				; CODE XREF: sub_6E42DBE0+BBj
		test	byte ptr [esp+5Ch+var_4C], 1
		jz	short loc_6E42DCB9
		mov	cl, [esi+edx]
		mov	byte ptr [esp+5Ch+var_4C], cl
		mov	[edi+edx], cl

loc_6E42DCB9:				; CODE XREF: sub_6E42DBE0+CDj
		mov	edx, [ebx+4]
		add	eax, edx
		mov	[ebp+44h], eax
		mov	edi, [ebx+10h]
		mov	esi, [ebx+8]
		mov	eax, [ebp+5Ch]
		mov	cl, [ebx]
		mov	[eax+260h], cl
		mov	[eax+264h], edx
		mov	[eax+268h], si
		mov	dword ptr [eax+26Ch], 0
		mov	[eax+270h], edi
		mov	edx, [ebp+8Ch]
		mov	eax, [ebp+90h]
		mov	[esp+5Ch+var_48], eax
		mov	eax, [ebp+94h]
		mov	[esp+5Ch+var_44], eax
		mov	eax, [ebp+0C0h]
		mov	[esp+5Ch+var_40], eax
		mov	eax, [ebp+5Ch]
		mov	di, [eax+20Ah]
		mov	word ptr [esp+5Ch+var_4C], di
		mov	dword ptr [eax+2E4h], 1
		mov	ecx, [ebx+18h]
		mov	[ebp+8Ch], ecx
		mov	ecx, [ebx+1Ch]
		mov	[ebp+90h], ecx
		mov	ecx, [ebx+20h]
		mov	[ebp+94h], ecx
		mov	ecx, [ebx+24h]
		mov	[ebp+0C0h], ecx
		mov	edi, [ebx+28h]
		mov	[eax+20Ah], di
		xor	esi, esi
		mov	si, word ptr [esp+5Ch+var_4C]
		dec	esi
		mov	[esp+5Ch+var_3C], esi
		xor	ecx, ecx
		mov	cx, di
		cmp	ecx, esi
		jz	loc_6E42DEB0

loc_6E42DD73:				; CODE XREF: sub_6E42DBE0+2F3j
		mov	[esp+5Ch+var_38], edx
		cmp	dword ptr [ebx+14h], 1
		sbb	eax, eax
		and	eax, 2
		add	eax, 14h
		mov	[esp+5Ch+Size],	eax
		mov	[esp+5Ch+Str], ebp
		call	sub_6E42C4E0
		mov	esi, eax
		mov	edx, [esp+5Ch+var_38]
		mov	[ebp+8Ch], edx
		mov	eax, [esp+5Ch+var_48]
		mov	[ebp+90h], eax
		mov	eax, [esp+5Ch+var_44]
		mov	[ebp+94h], eax
		mov	eax, [esp+5Ch+var_40]
		mov	[ebp+0C0h], eax
		mov	eax, [ebp+5Ch]
		mov	edi, [esp+5Ch+var_4C]
		mov	[eax+20Ah], di
		xor	edx, edx
		mov	dx, [ebx+28h]
		cmp	[esp+5Ch+var_3C], edx
		jz	loc_6E42DE80

loc_6E42DDD7:				; CODE XREF: sub_6E42DBE0+2C9j
		mov	dword ptr [eax+2E4h], 0
		mov	[esp+5Ch+Str], ebp
		call	SSL_get_wbio
		mov	[esp+5Ch+File],	0
		mov	[esp+5Ch+Count], 0
		mov	[esp+5Ch+Size],	0Bh
		mov	[esp+5Ch+Str], eax
		call	BIO_ctrl
		test	esi, esi
		jg	loc_6E42DC00
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+5Ch+File],	eax ; File
		mov	[esp+5Ch+Count], 22h ; Count
		mov	[esp+5Ch+Size],	1 ; Size
		mov	[esp+5Ch+Str], offset aDtls1_retransm ;	"dtls1_retransmit_message() failed\n"
		call	fwrite
		mov	eax, 0FFFFFFFFh
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DE50:				; CODE XREF: sub_6E42DBE0+AEj
		test	dl, 1
		jnz	loc_6E42DF40

loc_6E42DE59:				; CODE XREF: sub_6E42DBE0+36Ej
		test	edi, 2
		jnz	loc_6E42DF20

loc_6E42DE65:				; CODE XREF: sub_6E42DBE0+351j
		mov	ecx, [esp+5Ch+var_4C]
		shr	ecx, 2
		rep movsd
		jmp	loc_6E42DC94
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DE80:				; CODE XREF: sub_6E42DBE0+1F1j
		mov	edx, [ebp+58h]
		mov	ebx, [edx+54h]
		mov	[eax+22Ah], ebx
		mov	edx, [edx+58h]
		mov	[eax+22Eh], edx
		mov	eax, [ebp+58h]
		mov	ecx, [esp+5Ch+var_34]
		mov	ebx, [esp+5Ch+var_30]
		mov	[eax+54h], ecx
		mov	[eax+58h], ebx
		mov	eax, [ebp+5Ch]
		jmp	loc_6E42DDD7
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DEB0:				; CODE XREF: sub_6E42DBE0+18Dj
		mov	ecx, [ebp+58h]
		mov	esi, [ecx+54h]
		mov	edi, [ecx+58h]
		mov	[esp+5Ch+var_34], esi
		mov	[esp+5Ch+var_30], edi
		mov	edi, [eax+22Ah]
		mov	[ecx+54h], edi
		mov	eax, [eax+22Eh]
		mov	[ecx+58h], eax
		jmp	loc_6E42DD73
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DEE0:				; CODE XREF: sub_6E42DBE0+2Ej
		mov	eax, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DEF0:				; CODE XREF: sub_6E42DBE0+80j
		mov	[esp+5Ch+Count], ebx
		mov	[esp+5Ch+Size],	offset aRetransmitMess ; "retransmit:  message %d non-existant\n"
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+5Ch+Str], eax ; File
		call	fprintf
		jmp	loc_6E42DC00
; ---------------------------------------------------------------------------
		jmp	short loc_6E42DF20
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DF20:				; CODE XREF: sub_6E42DBE0+27Fj
					; sub_6E42DBE0+331j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	[esp+5Ch+var_4C], 2
		jmp	loc_6E42DE65
; ---------------------------------------------------------------------------
		align 10h

loc_6E42DF40:				; CODE XREF: sub_6E42DBE0+273j
		mov	cl, [ecx]
		mov	byte ptr [esp+5Ch+var_48], cl
		mov	[edx], cl
		inc	edi
		inc	esi
		dec	[esp+5Ch+var_4C]
		jmp	loc_6E42DE59
sub_6E42DBE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42DF60	proc near		; CODE XREF: sub_6E421FC0+1C0p
					; .text:6E422392p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2D		= byte ptr -2Dh
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_0]
		mov	ebx, [ebp+48h]
		test	ebx, ebx
		jnz	loc_6E42E180

loc_6E42DF76:				; CODE XREF: sub_6E42DF60+23Cj
		mov	esi, [ebp+44h]
		mov	[esp+3Ch+var_34], 0B5h
		mov	[esp+3Ch+var_38], offset aD1_both_c ; "d1_both.c"
		mov	[esp+3Ch+var_3C], 34h
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E42E1E0
		test	esi, esi
		jnz	loc_6E42E1B0
		xor	eax, eax

loc_6E42DFA9:				; CODE XREF: sub_6E42DF60+26Aj
		mov	[ebx+2Ch], eax
		mov	dword ptr [ebx+30h], 0
		mov	ecx, [ebp+3Ch]
		mov	edx, [ebp+44h]
		mov	edi, eax
		mov	esi, [ecx+4]
		cmp	edx, 4
		jnb	loc_6E42E160

loc_6E42DFC7:				; CODE XREF: sub_6E42DF60+21Bj
		xor	eax, eax
		test	dl, 2
		jnz	loc_6E42E0F0
		and	edx, 1
		jnz	loc_6E42E0E0

loc_6E42DFDB:				; CODE XREF: sub_6E42DF60+18Aj
					; sub_6E42DF60+19Ej
		mov	eax, [ebp+5Ch]
		mov	edx, [eax+264h]
		mov	ecx, [esp+3Ch+arg_4]
		test	ecx, ecx
		jnz	loc_6E42E110
		lea	ecx, [edx+0Ch]
		cmp	ecx, [ebp+44h]
		jz	short loc_6E42E01D
		mov	[esp+3Ch+var_34], offset aSD1W_msg_hdr_m ; "s->d1->w_msg_hdr.msg_len + DTLS1_HM_HEA"...
		mov	[esp+3Ch+var_38], 501h
		mov	[esp+3Ch+var_3C], offset aD1_both_c ; "d1_both.c"
		call	OpenSSLDie
		mov	eax, [ebp+5Ch]
		mov	edx, [eax+264h]

loc_6E42E01D:				; CODE XREF: sub_6E42DF60+96j
					; sub_6E42DF60+1C3j ...
		mov	[ebx+4], edx
		mov	edx, [eax+268h]
		mov	[ebx+8], dx
		mov	al, [eax+260h]
		mov	[esp+3Ch+var_2D], al
		mov	[ebx], al
		mov	dword ptr [ebx+0Ch], 0
		mov	eax, [ebp+5Ch]
		mov	ecx, [eax+264h]
		mov	[ebx+10h], ecx
		mov	edi, [esp+3Ch+arg_4]
		mov	[ebx+14h], edi
		mov	ecx, [ebp+8Ch]
		mov	[ebx+18h], ecx
		mov	ecx, [ebp+90h]
		mov	[ebx+1Ch], ecx
		mov	ecx, [ebp+94h]
		mov	[ebx+20h], ecx
		mov	ecx, [ebp+0C0h]
		mov	[ebx+24h], ecx
		mov	ax, [eax+20Ah]
		mov	[ebx+28h], ax
		lea	ecx, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_24], 0
		mov	[esp+3Ch+var_20], 0
		xor	eax, eax
		mov	ax, dx
		add	eax, eax
		sub	eax, edi
		mov	edx, eax
		sar	edx, 8
		mov	byte ptr [esp+3Ch+var_20+2], dl
		mov	byte ptr [esp+3Ch+var_20+3], al
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], ecx
		call	pitem_new
		test	eax, eax
		jz	loc_6E42E1F0
		mov	edx, [ebp+5Ch]
		mov	edx, [edx+248h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], edx
		call	pqueue_insert
		mov	eax, 1

loc_6E42E0D7:				; CODE XREF: sub_6E42DF60+282j
					; sub_6E42DF60+2BFj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E0E0:				; CODE XREF: sub_6E42DF60+75j
					; sub_6E42DF60+1A4j
		mov	dl, [esi+eax]
		mov	[esp+3Ch+var_2D], dl
		mov	[edi+eax], dl
		jmp	loc_6E42DFDB
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E0F0:				; CODE XREF: sub_6E42DF60+6Cj
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2
		and	edx, 1
		jz	loc_6E42DFDB
		jmp	short loc_6E42E0E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E110:				; CODE XREF: sub_6E42DF60+8Aj
		xor	ecx, ecx
		cmp	dword ptr [ebp+0], 0FEFFh
		setnz	cl
		lea	ecx, [edx+ecx*2+1]
		cmp	ecx, [ebp+44h]
		jz	loc_6E42E01D
		mov	[esp+3Ch+var_34], offset aSD1W_msg_hdr_0 ; "s->d1->w_msg_hdr.msg_len + ((s->version"...
		mov	[esp+3Ch+var_38], 4FEh
		mov	[esp+3Ch+var_3C], offset aD1_both_c ; "d1_both.c"
		call	OpenSSLDie
		mov	eax, [ebp+5Ch]
		mov	edx, [eax+264h]
		jmp	loc_6E42E01D
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E160:				; CODE XREF: sub_6E42DF60+61j
		test	al, 1
		jnz	loc_6E42E230

loc_6E42E168:				; CODE XREF: sub_6E42DF60+2D7j
		test	edi, 2
		jnz	loc_6E42E240

loc_6E42E174:				; CODE XREF: sub_6E42DF60+2EFj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E42DFC7
; ---------------------------------------------------------------------------

loc_6E42E180:				; CODE XREF: sub_6E42DF60+10j
		mov	[esp+3Ch+var_34], offset aSInit_off0 ; "s->init_off == 0"
		mov	[esp+3Ch+var_38], 4F2h
		mov	[esp+3Ch+var_3C], offset aD1_both_c ; "d1_both.c"
		call	OpenSSLDie
		jmp	loc_6E42DF76
; ---------------------------------------------------------------------------
		jmp	short loc_6E42E1B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E1B0:				; CODE XREF: sub_6E42DF60+41j
					; sub_6E42DF60+241j
		mov	[esp+3Ch+var_34], 0BAh
		mov	[esp+3Ch+var_38], offset aD1_both_c ; "d1_both.c"
		mov	[esp+3Ch+var_3C], esi
		call	CRYPTO_malloc
		test	eax, eax
		jnz	loc_6E42DFA9
		mov	[esp+3Ch+var_3C], ebx
		call	CRYPTO_free
		nop
		lea	esi, [esi+0]

loc_6E42E1E0:				; CODE XREF: sub_6E42DF60+39j
		xor	eax, eax
		jmp	loc_6E42E0D7
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E1F0:				; CODE XREF: sub_6E42DF60+157j
		mov	eax, [ebx+14h]
		test	eax, eax
		jnz	short loc_6E42E260

loc_6E42E1F7:				; CODE XREF: sub_6E42DF60+316j
		mov	eax, [ebx+2Ch]
		test	eax, eax
		jz	short loc_6E42E206
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_free

loc_6E42E206:				; CODE XREF: sub_6E42DF60+29Cj
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	short loc_6E42E215
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_free

loc_6E42E215:				; CODE XREF: sub_6E42DF60+2ABj
		mov	[esp+3Ch+var_3C], ebx
		call	CRYPTO_free
		xor	eax, eax
		jmp	loc_6E42E0D7
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E230:				; CODE XREF: sub_6E42DF60+202j
		mov	al, [esi]
		mov	[edi], al
		inc	edi
		inc	esi
		dec	edx
		jmp	loc_6E42E168
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E240:				; CODE XREF: sub_6E42DF60+20Ej
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E42E174
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E260:				; CODE XREF: sub_6E42DF60+295j
		mov	eax, [ebx+18h]
		mov	[esp+3Ch+var_3C], eax
		call	EVP_CIPHER_CTX_free
		mov	eax, [ebx+1Ch]
		mov	[esp+3Ch+var_3C], eax
		call	EVP_MD_CTX_destroy
		jmp	loc_6E42E1F7
sub_6E42DF60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42E280	proc near		; CODE XREF: sub_6E4239E0+6EAp
					; sub_6E426500+48Cp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_8]
		mov	eax, [esp+3Ch+arg_C]
		mov	edx, [esp+3Ch+arg_10]
		mov	esi, [esp+3Ch+arg_4]
		cmp	[ebx+34h], esi
		jz	short loc_6E42E2C0

loc_6E42E2A0:				; CODE XREF: sub_6E42E280+158j
		mov	[esp+3Ch+arg_4], 16h
		mov	[esp+3Ch+arg_0], ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	sub_6E42C4E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E2C0:				; CODE XREF: sub_6E42E280+1Ej
		mov	ecx, [ebx+3Ch]
		mov	edi, [ecx+4]
		mov	[esp+3Ch+var_20], edi
		add	edi, 0Ch
		mov	ecx, [ebx+8]
		mov	ecx, [ecx+64h]
		mov	ecx, [ecx+14h]
		mov	esi, [ebx+58h]
		add	esi, 234h
		mov	[esp+3Ch+var_30], esi
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	ecx
		mov	edx, eax
		mov	ecx, [ebx+58h]
		mov	[ecx+2B4h], eax
		lea	esi, [ecx+234h]
		cmp	edx, 4
		jnb	loc_6E42E400

loc_6E42E30A:				; CODE XREF: sub_6E42E280+19Fj
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E42E31B
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E42E31B:				; CODE XREF: sub_6E42E280+8Ej
		test	al, 1
		jz	short loc_6E42E329
		mov	al, [esi+ecx]
		mov	byte ptr [esp+3Ch+var_20], al
		mov	[edi+ecx], al

loc_6E42E329:				; CODE XREF: sub_6E42E280+9Dj
		cmp	dword ptr [ebx+4], 1000h
		jz	loc_6E42E460
		cmp	edx, 40h
		jg	loc_6E42E520

loc_6E42E33F:				; CODE XREF: sub_6E42E280+2C4j
		mov	ecx, [ebx+58h]
		mov	eax, edx
		lea	edi, [ecx+3D5h]
		lea	esi, [ecx+234h]
		cmp	edx, 4
		jnb	loc_6E42E430

loc_6E42E359:				; CODE XREF: sub_6E42E280+1CFj
		xor	ecx, ecx
		test	al, 2
		jz	short loc_6E42E36A
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E42E36A:				; CODE XREF: sub_6E42E280+DDj
		test	al, 1
		jz	short loc_6E42E378
		mov	al, [esi+ecx]
		mov	byte ptr [esp+3Ch+var_20], al
		mov	[edi+ecx], al

loc_6E42E378:				; CODE XREF: sub_6E42E280+ECj
		mov	eax, [ebx+58h]
		mov	[eax+415h], dl

loc_6E42E381:				; CODE XREF: sub_6E42E280+212j
		mov	eax, [ebx+5Ch]
		mov	ecx, [eax+254h]
		test	ecx, ecx
		jz	short loc_6E42E3E0
		mov	ecx, [eax+224h]

loc_6E42E394:				; CODE XREF: sub_6E42E280+178j
		mov	byte ptr [eax+260h], 14h
		mov	[eax+264h], edx
		mov	[eax+268h], cx
		mov	dword ptr [eax+26Ch], 0
		mov	[eax+270h], edx
		add	edx, 0Ch
		mov	[ebx+44h], edx
		mov	dword ptr [ebx+48h], 0
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E42DF60
		mov	[ebx+34h], ebp
		jmp	loc_6E42E2A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E3E0:				; CODE XREF: sub_6E42E280+10Cj
		mov	cx, [eax+226h]
		mov	[eax+224h], cx
		lea	esi, [ecx+1]
		mov	[eax+226h], si
		jmp	short loc_6E42E394
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E400:				; CODE XREF: sub_6E42E280+84j
		test	edi, 1
		jnz	loc_6E42E549

loc_6E42E40C:				; CODE XREF: sub_6E42E280+2E2j
		test	edi, 2
		jnz	loc_6E42E567

loc_6E42E418:				; CODE XREF: sub_6E42E280+2F6j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E42E30A
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E430:				; CODE XREF: sub_6E42E280+D3j
		test	edi, 1
		jnz	loc_6E42E58F

loc_6E42E43C:				; CODE XREF: sub_6E42E280+32Aj
		test	edi, 2
		jnz	loc_6E42E57B

loc_6E42E448:				; CODE XREF: sub_6E42E280+30Aj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E42E359
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E460:				; CODE XREF: sub_6E42E280+B0j
		cmp	edx, 40h
		jg	loc_6E42E4F0

loc_6E42E469:				; CODE XREF: sub_6E42E280+294j
		mov	ecx, [ebx+58h]
		mov	eax, edx
		lea	edi, [ecx+394h]
		lea	esi, [ecx+234h]
		cmp	edx, 4
		jnb	short loc_6E42E4C0

loc_6E42E47F:				; CODE XREF: sub_6E42E280+25Fj
		xor	ecx, ecx
		test	al, 2
		jnz	short loc_6E42E4B0

loc_6E42E485:				; CODE XREF: sub_6E42E280+23Bj
		test	al, 1
		jnz	short loc_6E42E4A0

loc_6E42E489:				; CODE XREF: sub_6E42E280+22Aj
		mov	eax, [ebx+58h]
		mov	[eax+3D4h], dl
		jmp	loc_6E42E381
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E4A0:				; CODE XREF: sub_6E42E280+207j
		mov	al, [esi+ecx]
		mov	byte ptr [esp+3Ch+var_20], al
		mov	[edi+ecx], al
		jmp	short loc_6E42E489
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E4B0:				; CODE XREF: sub_6E42E280+203j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	short loc_6E42E485
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E4C0:				; CODE XREF: sub_6E42E280+1FDj
		test	edi, 1
		jnz	loc_6E42E5C3

loc_6E42E4CC:				; CODE XREF: sub_6E42E280+35Ej
		test	edi, 2
		jnz	loc_6E42E5AF

loc_6E42E4D8:				; CODE XREF: sub_6E42E280+33Ej
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E42E47F
; ---------------------------------------------------------------------------
		jmp	short loc_6E42E4F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E4F0:				; CODE XREF: sub_6E42E280+1E3j
					; sub_6E42E280+261j
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_34], offset aIEvp_max_md__0 ; "i <= EVP_MAX_MD_SIZE"
		mov	[esp+3Ch+var_38], 407h
		mov	[esp+3Ch+var_3C], offset aD1_both_c ; "d1_both.c"
		call	OpenSSLDie
		mov	edx, [esp+3Ch+var_20]
		jmp	loc_6E42E469
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E520:				; CODE XREF: sub_6E42E280+B9j
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_34], offset aIEvp_max_md__0 ; "i <= EVP_MAX_MD_SIZE"
		mov	[esp+3Ch+var_38], 40Bh
		mov	[esp+3Ch+var_3C], offset aD1_both_c ; "d1_both.c"
		call	OpenSSLDie
		mov	edx, [esp+3Ch+var_20]
		jmp	loc_6E42E33F
; ---------------------------------------------------------------------------

loc_6E42E549:				; CODE XREF: sub_6E42E280+186j
		mov	edi, [esp+3Ch+var_20]
		mov	al, [ecx+234h]
		mov	[edi+0Ch], al
		add	edi, 0Dh
		lea	esi, [ecx+235h]
		lea	eax, [edx-1]
		jmp	loc_6E42E40C
; ---------------------------------------------------------------------------

loc_6E42E567:				; CODE XREF: sub_6E42E280+192j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E42E418
; ---------------------------------------------------------------------------

loc_6E42E57B:				; CODE XREF: sub_6E42E280+1C2j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E42E448
; ---------------------------------------------------------------------------

loc_6E42E58F:				; CODE XREF: sub_6E42E280+1B6j
		mov	al, [ecx+234h]
		mov	[ecx+3D5h], al
		lea	edi, [ecx+3D6h]
		lea	esi, [ecx+235h]
		lea	eax, [edx-1]
		jmp	loc_6E42E43C
; ---------------------------------------------------------------------------

loc_6E42E5AF:				; CODE XREF: sub_6E42E280+252j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E42E4D8
; ---------------------------------------------------------------------------

loc_6E42E5C3:				; CODE XREF: sub_6E42E280+246j
		mov	al, [ecx+234h]
		mov	[ecx+394h], al
		lea	edi, [ecx+395h]
		lea	esi, [ecx+235h]
		lea	eax, [edx-1]
		jmp	loc_6E42E4CC
sub_6E42E280	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42E5F0	proc near		; CODE XREF: sub_6E4239E0+A07p
					; sub_6E426500+781p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [esp+4Ch+arg_4]
		cmp	[ebx+34h], eax
		jz	loc_6E42E890

loc_6E42E608:				; CODE XREF: sub_6E42E5F0+317j
		mov	eax, ebx
		call	sub_6E42BD00
		test	eax, eax
		jz	loc_6E42E880
		mov	eax, [ebx+5Ch]
		mov	esi, [eax+25Ch]
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_wbio
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 31h
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		mov	edx, 100h
		sub	edx, eax
		cmp	esi, edx
		jb	loc_6E42E920

loc_6E42E657:				; CODE XREF: sub_6E42E5F0+34Cj
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	loc_6E42E910
		mov	[esp+4Ch+var_4C], eax
		call	EVP_MD_CTX_md
		mov	[esp+4Ch+var_4C], eax
		call	EVP_MD_size
		mov	[esp+4Ch+var_20], eax

loc_6E42E679:				; CODE XREF: sub_6E42E5F0+328j
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E42E695
		mov	eax, [eax]
		mov	[esp+4Ch+var_4C], eax
		call	EVP_CIPHER_flags
		test	al, 2
		jnz	loc_6E42E950

loc_6E42E695:				; CODE XREF: sub_6E42E5F0+91j
		mov	[esp+4Ch+var_24], 0
		mov	ecx, [esp+4Ch+var_24]

loc_6E42E6A1:				; CODE XREF: sub_6E42E5F0+378j
		mov	dword ptr [ebx+18h], 1
		mov	edx, [ebx+44h]
		xor	esi, esi
		mov	ebp, 1
		mov	eax, [esp+4Ch+var_20]
		lea	eax, [eax+ecx+0Dh]
		mov	[esp+4Ch+var_2C], eax

loc_6E42E6BE:				; CODE XREF: sub_6E42E5F0+275j
		test	edx, edx
		jle	loc_6E42E7E6

loc_6E42E6C6:				; CODE XREF: sub_6E42E5F0+1F0j
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_wbio
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0Dh
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		add	eax, [esp+4Ch+var_2C]
		mov	edx, [ebx+5Ch]
		mov	edi, [edx+25Ch]
		cmp	eax, edi
		jb	loc_6E42E7F0

loc_6E42E703:				; CODE XREF: sub_6E42E5F0+20Bj
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_wbio
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0Bh
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E42E9F4
		mov	eax, [esp+4Ch+var_24]
		add	eax, [esp+4Ch+var_20]
		mov	edx, [ebx+5Ch]
		mov	edi, [edx+25Ch]
		lea	edx, [eax+19h]
		cmp	edi, edx
		jbe	loc_6E42E880
		sub	edi, 0Dh
		sub	edi, eax

loc_6E42E754:				; CODE XREF: sub_6E42E5F0+205j
		mov	eax, [ebx+44h]
		cmp	edi, eax
		jbe	short loc_6E42E75D
		mov	edi, eax

loc_6E42E75D:				; CODE XREF: sub_6E42E5F0+169j
		test	edi, edi
		js	loc_6E42E870
		mov	eax, edi

loc_6E42E767:				; CODE XREF: sub_6E42E5F0+28Aj
		mov	[esp+4Ch+var_40], eax
		mov	eax, [ebx+3Ch]
		mov	eax, [eax+4]
		add	eax, [ebx+48h]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 14h
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42AC40
		test	eax, eax
		js	short loc_6E42E800
		cmp	edi, eax
		jz	short loc_6E42E7B4
		mov	[esp+4Ch+var_28], eax
		mov	[esp+4Ch+var_44], offset aLenUnsignedInt ; "len	== (unsigned int)ret"
		mov	[esp+4Ch+var_48], 19Fh
		mov	[esp+4Ch+var_4C], offset aD1_both_c ; "d1_both.c"
		call	OpenSSLDie
		mov	eax, [esp+4Ch+var_28]

loc_6E42E7B4:				; CODE XREF: sub_6E42E5F0+19Ej
		mov	edx, [ebx+44h]
		cmp	eax, edx
		jz	loc_6E42E970
		add	[ebx+48h], eax
		sub	edx, eax
		mov	[ebx+44h], edx
		lea	esi, [esi+eax-0Ch]
		mov	eax, [ebx+5Ch]
		mov	[eax+26Ch], esi
		mov	dword ptr [eax+270h], 0
		test	edx, edx
		jg	loc_6E42E6C6

loc_6E42E7E6:				; CODE XREF: sub_6E42E5F0+D0j
		xor	eax, eax

loc_6E42E7E8:				; CODE XREF: sub_6E42E5F0+40Bj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E42E7F0:				; CODE XREF: sub_6E42E5F0+10Dj
		sub	edi, eax
		cmp	edi, 0Ch
		ja	loc_6E42E754
		jmp	loc_6E42E703
; ---------------------------------------------------------------------------

loc_6E42E800:				; CODE XREF: sub_6E42E5F0+19Aj
		test	ebp, ebp
		jz	short loc_6E42E880
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_get_wbio
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 2Bh
		mov	[esp+4Ch+var_4C], eax
		call	BIO_ctrl
		test	eax, eax
		jle	short loc_6E42E880
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 20h
		mov	[esp+4Ch+var_4C], ebx
		call	SSL_ctrl
		test	ah, 10h
		jnz	short loc_6E42E880
		mov	eax, ebx
		call	sub_6E42BD00
		test	eax, eax
		jz	short loc_6E42E880
		mov	edx, [ebx+44h]
		xor	ebp, ebp
		jmp	loc_6E42E6BE
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E870:				; CODE XREF: sub_6E42E5F0+16Fj
		mov	eax, 7FFFFFFFh
		mov	edi, 7FFFFFFFh
		jmp	loc_6E42E767
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E880:				; CODE XREF: sub_6E42E5F0+21j
					; sub_6E42E5F0+159j ...
		mov	eax, 0FFFFFFFFh
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E890:				; CODE XREF: sub_6E42E5F0+12j
		mov	eax, [ebx+3Ch]
		mov	ecx, [eax+4]
		mov	byte ptr [ecx],	1
		mov	eax, [ebx+5Ch]
		mov	dx, [eax+226h]
		mov	[eax+224h], dx
		mov	dword ptr [ebx+44h], 1
		cmp	dword ptr [ebx], 100h
		jz	loc_6E42E9C5

loc_6E42E8BD:				; CODE XREF: sub_6E42E5F0+3FFj
		mov	dword ptr [ebx+48h], 0
		mov	byte ptr [eax+260h], 1
		mov	dword ptr [eax+264h], 0
		mov	[eax+268h], dx
		mov	dword ptr [eax+26Ch], 0
		mov	dword ptr [eax+270h], 0
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42DF60
		mov	eax, [esp+4Ch+arg_8]
		mov	[ebx+34h], eax
		jmp	loc_6E42E608
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E910:				; CODE XREF: sub_6E42E5F0+6Fj
		mov	[esp+4Ch+var_20], 0
		jmp	loc_6E42E679
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E920:				; CODE XREF: sub_6E42E5F0+61j
		mov	[esp+4Ch+var_44], offset aSD1MtuDtls1_mi ; "s->d1->mtu >= dtls1_min_mtu(s)"
		mov	[esp+4Ch+var_48], 112h
		mov	[esp+4Ch+var_4C], offset aD1_both_c ; "d1_both.c"
		call	OpenSSLDie
		jmp	loc_6E42E657
; ---------------------------------------------------------------------------
		jmp	short loc_6E42E950
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E950:				; CODE XREF: sub_6E42E5F0+9Fj
					; sub_6E42E5F0+351j
		mov	eax, [ebx+8Ch]
		mov	eax, [eax]
		mov	[esp+4Ch+var_4C], eax
		call	EVP_CIPHER_block_size
		add	eax, eax
		mov	[esp+4Ch+var_24], eax
		mov	ecx, eax
		jmp	loc_6E42E6A1
; ---------------------------------------------------------------------------
		align 10h

loc_6E42E970:				; CODE XREF: sub_6E42E5F0+1C9j
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	short loc_6E42E9AA
		mov	edi, [ebx+68h]
		mov	ecx, [ebx+3Ch]
		mov	esi, [ecx+4]
		mov	ecx, [ebx]
		mov	[esp+4Ch+var_34], edi
		mov	[esp+4Ch+var_38], ebx
		add	eax, [ebx+48h]
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_40], esi
		mov	[esp+4Ch+var_44], 14h
		mov	[esp+4Ch+var_48], ecx
		mov	[esp+4Ch+var_4C], 1
		call	edx

loc_6E42E9AA:				; CODE XREF: sub_6E42E5F0+385j
		mov	dword ptr [ebx+48h], 0
		mov	dword ptr [ebx+44h], 0
		mov	eax, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E42E9C5:				; CODE XREF: sub_6E42E5F0+2C7j
		lea	esi, [edx+1]
		mov	[eax+226h], si
		shr	dx, 8
		mov	[ecx+1], dl
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+224h]
		mov	[ecx+2], al
		add	dword ptr [ebx+44h], 2
		mov	eax, [ebx+5Ch]
		mov	edx, [eax+224h]
		jmp	loc_6E42E8BD
; ---------------------------------------------------------------------------

loc_6E42E9F4:				; CODE XREF: sub_6E42E5F0+13Dj
		mov	dword ptr [ebx+18h], 2
		jmp	loc_6E42E7E8
sub_6E42E5F0	endp

; ---------------------------------------------------------------------------
		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+60h]
		mov	edi, [esp+64h]
		lea	edx, [esp+38h]
		mov	dword ptr [esp+38h], 0
		mov	dword ptr [esp+3Ch], 0
		mov	eax, edi
		shr	ax, 8
		mov	[esp+3Eh], al
		mov	eax, edi
		mov	[esp+3Fh], al
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+248h]
		mov	[esp+4], edx
		mov	[esp], eax
		call	pqueue_find
		test	eax, eax
		jz	loc_6E42ECB0
		mov	esi, [esp+6Ch]
		mov	dword ptr [esi], 1
		mov	ebp, [eax+8]
		cmp	dword ptr [ebp+14h], 1
		sbb	eax, eax
		and	eax, 0Bh
		inc	eax
		mov	ecx, [ebx+3Ch]
		mov	edx, [ebp+4]
		add	edx, eax
		mov	edi, [ecx+4]
		mov	esi, [ebp+2Ch]
		cmp	edx, 4
		jnb	loc_6E42EC20

loc_6E42EA7E:				; CODE XREF: .text:6E42EC3Fj
		xor	ecx, ecx
		test	dl, 2
		jnz	loc_6E42EC00
		and	edx, 1
		jnz	loc_6E42EBF0

loc_6E42EA92:				; CODE XREF: .text:6E42EBFAj
					; .text:6E42EC0Ej
		mov	edx, [ebp+4]
		add	eax, edx
		mov	[ebx+44h], eax
		mov	edi, [ebp+10h]
		mov	esi, [ebp+8]
		mov	eax, [ebx+5Ch]
		mov	cl, [ebp+0]
		mov	[eax+260h], cl
		mov	[eax+264h], edx
		mov	[eax+268h], si
		mov	dword ptr [eax+26Ch], 0
		mov	[eax+270h], edi
		mov	eax, [ebx+8Ch]
		mov	[esp+14h], eax
		mov	eax, [ebx+90h]
		mov	[esp+18h], eax
		mov	eax, [ebx+94h]
		mov	[esp+1Ch], eax
		mov	eax, [ebx+0C0h]
		mov	[esp+20h], eax
		mov	eax, [ebx+5Ch]
		mov	si, [eax+20Ah]
		mov	dword ptr [eax+2E4h], 1
		mov	edx, [ebp+18h]
		mov	[ebx+8Ch], edx
		mov	edx, [ebp+1Ch]
		mov	[ebx+90h], edx
		mov	edx, [ebp+20h]
		mov	[ebx+94h], edx
		mov	edx, [ebp+24h]
		mov	[ebx+0C0h], edx
		mov	ecx, [ebp+28h]
		mov	[eax+20Ah], cx
		xor	edx, edx
		mov	dx, si
		dec	edx
		mov	[esp+24h], edx
		xor	edi, edi
		mov	di, cx
		cmp	edi, edx
		jz	loc_6E42EC80

loc_6E42EB4A:				; CODE XREF: .text:6E42ECA3j
		cmp	dword ptr [ebp+14h], 1
		sbb	eax, eax
		and	eax, 2
		add	eax, 14h
		mov	[esp+4], eax
		mov	[esp], ebx
		call	sub_6E42C4E0
		mov	edi, eax
		mov	eax, [esp+14h]
		mov	[ebx+8Ch], eax
		mov	eax, [esp+18h]
		mov	[ebx+90h], eax
		mov	eax, [esp+1Ch]
		mov	[ebx+94h], eax
		mov	eax, [esp+20h]
		mov	[ebx+0C0h], eax
		mov	eax, [ebx+5Ch]
		mov	[eax+20Ah], si
		xor	edx, edx
		mov	dx, [ebp+28h]
		cmp	[esp+24h], edx
		jz	loc_6E42EC50

loc_6E42EBA6:				; CODE XREF: .text:6E42EC79j
		mov	dword ptr [eax+2E4h], 0
		mov	[esp], ebx
		call	SSL_get_wbio
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	[esp], eax
		call	BIO_ctrl
		mov	eax, edi

loc_6E42EBDA:				; CODE XREF: .text:6E42ECDDj
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42EBF0:				; CODE XREF: .text:6E42EA8Cj
					; .text:6E42EC14j
		mov	dl, [esi+ecx]
		mov	[esp+14h], dl
		mov	[edi+ecx], dl
		jmp	loc_6E42EA92
; ---------------------------------------------------------------------------
		align 10h

loc_6E42EC00:				; CODE XREF: .text:6E42EA83j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		and	edx, 1
		jz	loc_6E42EA92
		jmp	short loc_6E42EBF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E42EC20:				; CODE XREF: .text:6E42EA78j
		test	edi, 1
		jnz	loc_6E42ECF0

loc_6E42EC2C:				; CODE XREF: .text:6E42ECF7j
		test	edi, 2
		jnz	loc_6E42ED00

loc_6E42EC38:				; CODE XREF: .text:6E42ED0Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E42EA7E
; ---------------------------------------------------------------------------
		align 10h

loc_6E42EC50:				; CODE XREF: .text:6E42EBA0j
		mov	edx, [ebx+58h]
		mov	ecx, [edx+54h]
		mov	[eax+22Ah], ecx
		mov	edx, [edx+58h]
		mov	[eax+22Eh], edx
		mov	eax, [ebx+58h]
		mov	edx, [esp+28h]
		mov	ecx, [esp+2Ch]
		mov	[eax+54h], edx
		mov	[eax+58h], ecx
		mov	eax, [ebx+5Ch]
		jmp	loc_6E42EBA6
; ---------------------------------------------------------------------------
		align 10h

loc_6E42EC80:				; CODE XREF: .text:6E42EB44j
		mov	edi, [ebx+58h]
		mov	edx, [edi+54h]
		mov	ecx, [edi+58h]
		mov	[esp+28h], edx
		mov	[esp+2Ch], ecx
		mov	ecx, [eax+22Ah]
		mov	[edi+54h], ecx
		mov	eax, [eax+22Eh]
		mov	[edi+58h], eax
		jmp	loc_6E42EB4A
; ---------------------------------------------------------------------------
		align 10h

loc_6E42ECB0:				; CODE XREF: .text:6E42EA4Aj
		xor	esi, esi
		mov	si, di
		mov	[esp+8], esi
		mov	dword ptr [esp+4], offset aRetransmitMess ; "retransmit:  message %d non-existant\n"
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp], eax
		call	fprintf
		mov	eax, [esp+6Ch]
		mov	dword ptr [eax], 0
		xor	eax, eax
		jmp	loc_6E42EBDA
; ---------------------------------------------------------------------------
		align 10h

loc_6E42ECF0:				; CODE XREF: .text:6E42EC26j
		mov	cl, [esi]
		mov	[edi], cl
		inc	edi
		inc	esi
		dec	edx
		jmp	loc_6E42EC2C
; ---------------------------------------------------------------------------
		align 10h

loc_6E42ED00:				; CODE XREF: .text:6E42EC32j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E42EC38
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42ED20	proc near		; CODE XREF: sub_6E4239E0+BCDp
					; sub_6E427CA0+A3j

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	edi, [esp+1Ch+arg_0]
		jmp	short loc_6E42ED5E
; ---------------------------------------------------------------------------
		align 10h

loc_6E42ED30:				; CODE XREF: sub_6E42ED20+5Dj
					; sub_6E42ED20+75j
		mov	eax, [ebx+2Ch]
		test	eax, eax
		jz	short loc_6E42ED3F
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free

loc_6E42ED3F:				; CODE XREF: sub_6E42ED20+15j
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	short loc_6E42ED4E
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free

loc_6E42ED4E:				; CODE XREF: sub_6E42ED20+24j
		mov	[esp+1Ch+var_1C], ebx
		call	CRYPTO_free
		mov	[esp+1Ch+var_1C], esi
		call	pitem_free

loc_6E42ED5E:				; CODE XREF: sub_6E42ED20+Aj
		mov	eax, [edi+5Ch]
		mov	eax, [eax+248h]
		mov	[esp+1Ch+var_1C], eax
		call	pqueue_pop
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E42EDA0
		mov	ebx, [eax+8]
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_6E42ED30
		mov	eax, [ebx+18h]
		mov	[esp+1Ch+var_1C], eax
		call	EVP_CIPHER_CTX_free
		mov	eax, [ebx+1Ch]
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy
		jmp	short loc_6E42ED30
; ---------------------------------------------------------------------------
		align 10h

loc_6E42EDA0:				; CODE XREF: sub_6E42ED20+53j
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
sub_6E42ED20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42EDB0	proc near		; CODE XREF: .text:6E421F9Dp
					; sub_6E421FC0+19Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebx
		mov	eax, [esp+4+arg_0]
		mov	ebx, [esp+4+arg_8]
		mov	edx, [esp+4+arg_10]
		mov	eax, [eax+5Ch]
		test	edx, edx
		jnz	short loc_6E42EDE4
		mov	ecx, [eax+254h]
		test	ecx, ecx
		jnz	short loc_6E42EDE4
		mov	cx, [eax+226h]
		mov	[eax+224h], cx
		inc	ecx
		mov	[eax+226h], cx

loc_6E42EDE4:				; CODE XREF: sub_6E42EDB0+12j
					; sub_6E42EDB0+1Cj
		mov	ecx, [eax+224h]
		mov	[eax+260h], bl
		mov	ebx, [esp+4+arg_C]
		mov	[eax+264h], ebx
		mov	[eax+268h], cx
		mov	[eax+26Ch], edx
		mov	edx, [esp+4+arg_14]
		mov	[eax+270h], edx
		mov	eax, [esp+4+arg_4]
		add	eax, 0Ch
		pop	ebx
		retn
sub_6E42EDB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42EE20	proc near		; CODE XREF: sub_6E4281F0+60p
					; sub_6E4281F0+86j ...
		mov	eax, 100h
		retn
sub_6E42EE20	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 1Ch
		mov	eax, [esp+20h]
		mov	[esp], eax
		call	SSL_get_wbio
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 31h
		mov	[esp], eax
		call	BIO_ctrl
		mov	edx, 100h
		sub	edx, eax
		mov	eax, edx
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42EE70	proc near		; CODE XREF: sub_6E4296E0+90Ep

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		mov	edx, [esp+0Ch+arg_0]
		mov	ebx, [esp+0Ch+arg_4]
		mov	edi, ebx
		mov	esi, 2Ch
		test	bl, 1
		jnz	loc_6E42EF30
		test	edi, 2
		jnz	loc_6E42EF50

loc_6E42EE97:				; CODE XREF: sub_6E42EE70+D0j
					; sub_6E42EE70+EBj
		mov	ecx, esi
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	esi, 2
		jz	short loc_6E42EEB0
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E42EEB0:				; CODE XREF: sub_6E42EE70+36j
		and	esi, 1
		jz	short loc_6E42EEB8
		mov	byte ptr [edi],	0

loc_6E42EEB8:				; CODE XREF: sub_6E42EE70+43j
		mov	al, [edx]
		mov	[ebx], al
		xor	eax, eax
		mov	al, [edx+1]
		shl	eax, 10h
		xor	ecx, ecx
		mov	cl, [edx+2]
		shl	ecx, 8
		or	eax, ecx
		xor	ecx, ecx
		mov	cl, [edx+3]
		or	eax, ecx
		mov	[ebx+4], eax
		xor	eax, eax
		mov	al, [edx+4]
		shl	eax, 8
		xor	ecx, ecx
		mov	cl, [edx+5]
		or	eax, ecx
		mov	[ebx+8], ax
		xor	eax, eax
		mov	al, [edx+6]
		shl	eax, 10h
		xor	ecx, ecx
		mov	cl, [edx+7]
		shl	ecx, 8
		or	eax, ecx
		xor	ecx, ecx
		mov	cl, [edx+8]
		or	eax, ecx
		mov	[ebx+0Ch], eax
		xor	eax, eax
		mov	al, [edx+9]
		shl	eax, 10h
		xor	ecx, ecx
		mov	cl, [edx+0Ah]
		shl	ecx, 8
		or	eax, ecx
		movzx	esi, byte ptr [edx+0Bh]
		and	esi, 0FFh
		or	eax, esi
		mov	[ebx+10h], eax
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42EF30:				; CODE XREF: sub_6E42EE70+15j
		mov	byte ptr [ebx],	0
		lea	edi, [ebx+1]
		mov	si, 2Bh
		test	edi, 2
		jz	loc_6E42EE97
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E42EF50:				; CODE XREF: sub_6E42EE70+21j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	esi, 2
		jmp	loc_6E42EE97
sub_6E42EE70	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E42EF60	proc near		; CODE XREF: sub_6E4296E0+77Ap

var_2		= byte ptr -2
arg_3		= dword	ptr  7

		sub	esp, 1
		mov	eax, [esp+2+arg_3]
		mov	dword ptr [eax], 0
		mov	edx, [esp+5]
		mov	cl, [edx]
		mov	[esp+2+var_2], cl
		mov	[eax], cl
		add	esp, 1
		retn
sub_6E42EF60	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: thunk

sub_6E42EF80	proc near		; DATA XREF: .rdata:6E44CD04o
					; .rdata:6E44CDA4o ...
		jmp	sub_6E410130
sub_6E42EF80	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42EF90	proc near		; CODE XREF: sub_6E4296E0+BE0p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx+58h]
		mov	edi, [eax+118h]
		mov	edx, [ebx+64h]
		test	edx, edx
		jz	short loc_6E42EFDE
		mov	ecx, [ebx+68h]
		mov	esi, [eax+110h]
		mov	eax, [ebx]
		mov	[esp+4Ch+var_34], ecx
		mov	[esp+4Ch+var_38], ebx
		mov	[esp+4Ch+var_3C], esi
		mov	[esp+4Ch+var_40], edi
		mov	[esp+4Ch+var_44], 18h
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], 0
		call	edx
		mov	eax, [ebx+58h]

loc_6E42EFDE:				; CODE XREF: sub_6E42EF90+19j
		mov	eax, [eax+110h]
		lea	edx, [eax-13h]
		cmp	edx, 3FEDh
		ja	short loc_6E42F030
		mov	cl, [edi]
		movzx	ebp, byte ptr [edi+1]
		and	ebp, 0FFh
		shl	ebp, 8
		xor	edx, edx
		mov	dl, [edi+2]
		or	ebp, edx
		lea	edx, [ebp+13h]
		cmp	eax, edx
		jb	short loc_6E42F030
		xor	eax, eax
		mov	al, cl
		cmp	ax, 1
		jz	short loc_6E42F040
		cmp	ax, 2
		jnz	short loc_6E42F030
		mov	al, [edi+3]
		mov	cl, [edi+4]
		cmp	ebp, 12h
		jz	loc_6E42F150
		nop
		lea	esi, [esi+0]

loc_6E42F030:				; CODE XREF: sub_6E42EF90+5Dj
					; sub_6E42EF90+7Aj ...
		xor	eax, eax

loc_6E42F032:				; CODE XREF: sub_6E42EF90+1F7j
					; sub_6E42EF90+231j ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F040:				; CODE XREF: sub_6E42EF90+84j
		mov	[esp+4Ch+var_44], 62Dh
		mov	[esp+4Ch+var_48], offset aD1_both_c ; "d1_both.c"
		mov	[esp+4Ch+var_4C], edx
		mov	[esp+4Ch+var_20], edx
		call	CRYPTO_malloc
		mov	esi, eax
		mov	[esp+4Ch+var_28], eax
		mov	byte ptr [eax],	2
		mov	eax, ebp
		shr	eax, 8
		mov	[esi+1], al
		mov	eax, ebp
		mov	[esi+2], al
		lea	eax, [esi+3]
		mov	[esp+4Ch+var_24], eax
		mov	[esp+4Ch+var_30], ebp
		mov	[esp+4Ch+var_2C], eax
		lea	esi, [edi+3]
		cmp	ebp, 4
		mov	edx, [esp+4Ch+var_20]
		jnb	loc_6E42F18C

loc_6E42F091:				; CODE XREF: sub_6E42EF90+218j
		xor	ecx, ecx
		test	byte ptr [esp+4Ch+var_30], 2
		jz	short loc_6E42F0A9
		mov	cx, [esi]
		mov	eax, [esp+4Ch+var_2C]
		mov	[eax], cx
		mov	ecx, 2

loc_6E42F0A9:				; CODE XREF: sub_6E42EF90+108j
		test	byte ptr [esp+4Ch+var_30], 1
		jz	short loc_6E42F0BE
		mov	al, [esi+ecx]
		mov	byte ptr [esp+4Ch+var_30], al
		mov	esi, [esp+4Ch+var_2C]
		mov	[esi+ecx], al

loc_6E42F0BE:				; CODE XREF: sub_6E42EF90+11Ej
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_48], 10h
		add	ebp, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], ebp
		call	RAND_pseudo_bytes
		test	eax, eax
		mov	edx, [esp+4Ch+var_30]
		js	loc_6E42F1FC
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_30], edx
		mov	edi, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_48], 18h
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E42AC40
		test	eax, eax
		js	loc_6E42F1AD
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_6E42F13F
		mov	esi, [ebx+68h]
		mov	ecx, [ebx]
		mov	[esp+4Ch+var_34], esi
		mov	[esp+4Ch+var_38], ebx
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_3C], edx
		mov	[esp+4Ch+var_40], edi
		mov	[esp+4Ch+var_44], 18h
		mov	[esp+4Ch+var_48], ecx
		mov	[esp+4Ch+var_4C], 1
		call	eax

loc_6E42F13F:				; CODE XREF: sub_6E42EF90+17Fj
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	CRYPTO_free
		jmp	loc_6E42F030
; ---------------------------------------------------------------------------

loc_6E42F150:				; CODE XREF: sub_6E42EF90+95j
		mov	esi, eax
		and	esi, 0FFh
		shl	esi, 8
		xor	edx, edx
		mov	dl, cl
		or	esi, edx
		cmp	[ebx+18Ch], esi
		jnz	loc_6E42F030
		mov	[esp+4Ch+var_4C], ebx
		call	sub_6E427CA0
		inc	dword ptr [ebx+18Ch]
		mov	dword ptr [ebx+188h], 0
		xor	eax, eax
		jmp	loc_6E42F032
; ---------------------------------------------------------------------------

loc_6E42F18C:				; CODE XREF: sub_6E42EF90+FBj
		test	al, 1
		jnz	short loc_6E42F1DF

loc_6E42F190:				; CODE XREF: sub_6E42EF90+26Aj
		test	byte ptr [esp+4Ch+var_2C], 2
		jnz	short loc_6E42F1C6

loc_6E42F197:				; CODE XREF: sub_6E42EF90+24Dj
		mov	ecx, [esp+4Ch+var_30]
		shr	ecx, 2
		mov	edi, [esp+4Ch+var_2C]
		rep movsd
		mov	[esp+4Ch+var_2C], edi
		jmp	loc_6E42F091
; ---------------------------------------------------------------------------

loc_6E42F1AD:				; CODE XREF: sub_6E42EF90+174j
		mov	[esp+4Ch+var_30], eax
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	CRYPTO_free
		mov	eax, [esp+4Ch+var_30]
		jmp	loc_6E42F032
; ---------------------------------------------------------------------------

loc_6E42F1C6:				; CODE XREF: sub_6E42EF90+205j
		mov	cx, [esi]
		mov	eax, [esp+4Ch+var_2C]
		mov	[eax], cx
		add	[esp+4Ch+var_2C], 2
		add	esi, 2
		sub	[esp+4Ch+var_30], 2
		jmp	short loc_6E42F197
; ---------------------------------------------------------------------------

loc_6E42F1DF:				; CODE XREF: sub_6E42EF90+1FEj
		mov	esi, [esp+4Ch+var_28]
		mov	al, [edi+3]
		mov	[esi+3], al
		lea	eax, [esi+4]
		mov	[esp+4Ch+var_2C], eax
		lea	esi, [edi+4]
		lea	eax, [ebp-1]
		mov	[esp+4Ch+var_30], eax
		jmp	short loc_6E42F190
; ---------------------------------------------------------------------------

loc_6E42F1FC:				; CODE XREF: sub_6E42EF90+14Cj
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	CRYPTO_free
		or	eax, 0FFFFFFFFh
		jmp	loc_6E42F032
sub_6E42EF90	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E42F210	proc near		; CODE XREF: sub_6E40E840+4DBj
					; sub_6E427E70+281p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+184h]
		and	eax, 3
		dec	eax
		jnz	loc_6E42F390
		mov	edx, [ebx+188h]
		test	edx, edx
		jnz	loc_6E42F3D0
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_state
		test	ah, 30h
		jnz	loc_6E42F350
		mov	eax, [ebx+1Ch]
		test	eax, eax
		jnz	loc_6E42F350
		mov	[esp+2Ch+var_24], 682h
		mov	[esp+2Ch+var_28], offset aD1_both_c ; "d1_both.c"
		mov	[esp+2Ch+var_2C], 25h
		call	CRYPTO_malloc
		mov	esi, eax
		mov	byte ptr [eax],	1
		mov	byte ptr [eax+1], 0
		mov	byte ptr [eax+2], 12h
		mov	eax, [ebx+18Ch]
		shr	eax, 8
		mov	[esi+3], al
		mov	eax, [ebx+18Ch]
		mov	[esi+4], al
		mov	[esp+2Ch+var_28], 10h
		lea	eax, [esi+5]
		mov	[esp+2Ch+var_2C], eax
		call	RAND_pseudo_bytes
		test	eax, eax
		js	loc_6E42F330
		mov	[esp+2Ch+var_28], 10h
		lea	eax, [esi+15h]
		mov	[esp+2Ch+var_2C], eax
		call	RAND_pseudo_bytes
		test	eax, eax
		js	short loc_6E42F330
		mov	[esp+2Ch+var_20], 25h
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], 18h
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6E42AC40
		mov	edi, eax
		test	eax, eax
		js	short loc_6E42F335
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	short loc_6E42F31B
		mov	ecx, [ebx+68h]
		mov	edx, [ebx]
		mov	[esp+2Ch+var_14], ecx
		mov	[esp+2Ch+var_18], ebx
		mov	[esp+2Ch+var_1C], 25h
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_24], 18h
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], 1
		call	eax

loc_6E42F31B:				; CODE XREF: sub_6E42F210+DBj
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6E427980
		mov	dword ptr [ebx+188h], 1
		jmp	short loc_6E42F335
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F330:				; CODE XREF: sub_6E42F210+97j
					; sub_6E42F210+B2j
		mov	edi, 0FFFFFFFFh

loc_6E42F335:				; CODE XREF: sub_6E42F210+D4j
					; sub_6E42F210+11Dj
		mov	[esp+2Ch+var_2C], esi
		call	CRYPTO_free
		mov	eax, edi

loc_6E42F33F:				; CODE XREF: sub_6E42F210+171j
					; sub_6E42F210+1B1j ...
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F350:				; CODE XREF: sub_6E42F210+33j
					; sub_6E42F210+3Ej
		mov	[esp+2Ch+var_1C], 66Eh
		mov	[esp+2Ch+var_20], offset aD1_both_c ; "d1_both.c"
		mov	[esp+2Ch+var_24], 0F4h
		mov	[esp+2Ch+var_28], 131h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E42F33F
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F390:				; CODE XREF: sub_6E42F210+14j
		mov	[esp+2Ch+var_1C], 662h
		mov	[esp+2Ch+var_20], offset aD1_both_c ; "d1_both.c"
		mov	[esp+2Ch+var_24], 16Dh
		mov	[esp+2Ch+var_28], 131h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42F33F
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F3D0:				; CODE XREF: sub_6E42F210+22j
		mov	[esp+2Ch+var_1C], 668h
		mov	[esp+2Ch+var_20], offset aD1_both_c ; "d1_both.c"
		mov	[esp+2Ch+var_24], 16Eh
		mov	[esp+2Ch+var_28], 131h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42F33F
sub_6E42F210	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42F410	proc near		; DATA XREF: .data:off_6E449900o

File		= dword	ptr -3Ch
Format		= dword	ptr -38h
Size		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_0]
		mov	ecx, [esp+3Ch+arg_4]
		test	ecx, ecx
		jz	loc_6E42F4D0
		mov	eax, [esi+90h]
		mov	[esp+3Ch+File],	eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E42F680
		mov	eax, [esi+90h]
		mov	[esp+3Ch+File],	eax
		call	EVP_MD_CTX_md
		mov	[esp+3Ch+File],	eax
		call	EVP_MD_size
		mov	[esp+3Ch+var_20], eax
		test	eax, eax
		js	loc_6E42F6DD

loc_6E42F45F:				; CODE XREF: sub_6E42F410+278j
		mov	edi, [esi+8Ch]
		mov	edx, [esi+58h]
		lea	ebx, [edx+130h]
		mov	[esp+3Ch+var_24], edx
		test	edi, edi
		jz	loc_6E42F650
		mov	[esp+3Ch+File],	edi
		call	EVP_CIPHER_CTX_cipher
		mov	ebp, eax
		mov	edx, [esp+3Ch+var_24]
		mov	eax, [edx+140h]
		cmp	[edx+13Ch], eax
		jz	loc_6E42F6A0
		mov	[esp+3Ch+var_30], 0A2h
		mov	[esp+3Ch+Size],	offset aD1_enc_c ; "d1_enc.c"
		mov	[esp+3Ch+Format], offset aSDRecDataRec_0 ; "%s:%d: rec->data !=	rec->input\n"
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+3Ch+File],	eax ; File
		call	fprintf
		jmp	short loc_6E42F529
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F4D0:				; CODE XREF: sub_6E42F410+11j
		mov	eax, [esi+84h]
		mov	[esp+3Ch+File],	eax
		call	EVP_MD_CTX_md
		test	eax, eax
		jz	loc_6E42F690
		mov	eax, [esi+84h]
		mov	[esp+3Ch+File],	eax
		call	EVP_MD_CTX_md
		mov	[esp+3Ch+File],	eax
		call	EVP_MD_size
		mov	[esp+3Ch+var_20], eax
		test	eax, eax
		js	loc_6E42F6F0

loc_6E42F508:				; CODE XREF: sub_6E42F410+288j
					; sub_6E42F410+2FCj
		mov	edi, [esi+80h]
		mov	eax, [esi+58h]
		lea	ebx, [eax+10Ch]
		test	edi, edi
		jz	loc_6E42F650
		mov	[esp+3Ch+File],	edi
		call	EVP_CIPHER_CTX_cipher
		mov	ebp, eax

loc_6E42F529:				; CODE XREF: sub_6E42F410+B2j
					; sub_6E42F410+29Fj ...
		cmp	dword ptr [esi+0C0h], 0
		jz	loc_6E42F650
		test	ebp, ebp
		jz	loc_6E42F650
		mov	eax, [ebx+4]
		mov	[esp+3Ch+var_24], eax
		mov	eax, [edi]
		mov	[esp+3Ch+File],	eax
		call	EVP_CIPHER_block_size
		mov	ebp, eax
		cmp	eax, 1
		jz	short loc_6E42F5D0
		mov	edx, [esp+3Ch+arg_4]
		test	edx, edx
		jz	short loc_6E42F5DC
		mov	eax, [esp+3Ch+var_24]
		mov	ecx, eax
		cdq
		idiv	ebp
		sub	ebp, edx
		lea	eax, [ebp-1]
		test	byte ptr [esi+101h], 2
		jz	short loc_6E42F57F
		mov	edx, [esi+58h]
		test	byte ptr [edx],	8
		jz	short loc_6E42F57F
		mov	eax, ebp

loc_6E42F57F:				; CODE XREF: sub_6E42F410+163j
					; sub_6E42F410+16Bj
		mov	esi, [esp+3Ch+var_24]
		mov	edx, esi
		add	edx, ebp
		cmp	esi, edx
		jge	short loc_6E42F59B
		nop
		lea	esi, [esi+0]

loc_6E42F590:				; CODE XREF: sub_6E42F410+189j
		mov	esi, [ebx+10h]
		mov	[esi+ecx], al
		inc	ecx
		cmp	ecx, edx
		jnz	short loc_6E42F590

loc_6E42F59B:				; CODE XREF: sub_6E42F410+179j
		add	[ebx+4], ebp
		mov	ecx, [ebx+10h]
		mov	eax, [ebx+0Ch]
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+Size],	ecx

loc_6E42F5AC:				; CODE XREF: sub_6E42F410+313j
		mov	[esp+3Ch+Format], eax
		mov	[esp+3Ch+File],	edi
		call	EVP_Cipher
		test	eax, eax
		jle	loc_6E42F6DD

loc_6E42F5C0:				; CODE XREF: sub_6E42F410+205j
		mov	eax, 1

loc_6E42F5C5:				; CODE XREF: sub_6E42F410+2D2j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F5D0:				; CODE XREF: sub_6E42F410+144j
		mov	eax, [esp+3Ch+arg_4]
		test	eax, eax
		jnz	loc_6E42F711

loc_6E42F5DC:				; CODE XREF: sub_6E42F410+14Cj
		mov	eax, [esp+3Ch+var_24]
		test	eax, eax
		jz	short loc_6E42F640
		xor	edx, edx
		div	ebp
		test	edx, edx
		jnz	short loc_6E42F640
		mov	edx, [ebx+10h]
		mov	eax, [ebx+0Ch]
		mov	ecx, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_30], ecx
		mov	[esp+3Ch+Size],	edx
		mov	[esp+3Ch+Format], eax
		mov	[esp+3Ch+File],	edi
		call	EVP_Cipher
		test	eax, eax
		jle	loc_6E42F6DD
		cmp	ebp, 1
		jz	short loc_6E42F5C0
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+Size],	ebp
		mov	[esp+3Ch+Format], ebx
		mov	[esp+3Ch+File],	esi
		call	sub_6E4174B0
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F640:				; CODE XREF: sub_6E42F410+1D2j
					; sub_6E42F410+1DAj
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F650:				; CODE XREF: sub_6E42F410+64j
					; sub_6E42F410+109j ...
		mov	ecx, [ebx+4]
		mov	edx, [ebx+10h]
		mov	eax, [ebx+0Ch]
		mov	[esp+3Ch+Size],	ecx ; Size
		mov	[esp+3Ch+Format], edx ;	Src
		mov	[esp+3Ch+File],	eax ; Dst
		call	memmove
		mov	eax, [ebx+0Ch]
		mov	[ebx+10h], eax
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F680:				; CODE XREF: sub_6E42F410+27j
		mov	[esp+3Ch+var_20], 0
		jmp	loc_6E42F45F
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F690:				; CODE XREF: sub_6E42F410+D0j
		mov	[esp+3Ch+var_20], 0
		jmp	loc_6E42F508
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F6A0:				; CODE XREF: sub_6E42F410+84j
		mov	[esp+3Ch+var_24], edx
		mov	eax, [edi]
		mov	[esp+3Ch+File],	eax
		call	EVP_CIPHER_block_size
		dec	eax
		jle	loc_6E42F529
		mov	eax, [edi]
		mov	[esp+3Ch+File],	eax
		call	EVP_CIPHER_block_size
		mov	edx, [esp+3Ch+var_24]
		mov	edx, [edx+140h]
		mov	[esp+3Ch+Format], eax
		mov	[esp+3Ch+File],	edx
		call	RAND_bytes
		test	eax, eax
		jg	loc_6E42F529

loc_6E42F6DD:				; CODE XREF: sub_6E42F410+49j
					; sub_6E42F410+1AAj ...
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E42F5C5
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F6F0:				; CODE XREF: sub_6E42F410+F2j
		mov	[esp+3Ch+Size],	offset aMac_size0 ; "mac_size >= 0"
		mov	[esp+3Ch+Format], 0ACh
		mov	[esp+3Ch+File],	offset aD1_enc_c ; "d1_enc.c"
		call	OpenSSLDie
		jmp	loc_6E42F508
; ---------------------------------------------------------------------------

loc_6E42F711:				; CODE XREF: sub_6E42F410+1C6j
		mov	edx, [ebx+10h]
		mov	eax, [ebx+0Ch]
		mov	ebx, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_30], ebx
		mov	[esp+3Ch+Size],	edx
		jmp	loc_6E42F5AC
sub_6E42F410	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42F730	proc near		; CODE XREF: SSL_CTX_set_tlsext_use_srtp+Ej
					; SSL_set_tlsext_use_srtp+Ej

Str		= dword	ptr -3Ch
Val		= dword	ptr -38h
MaxCount	= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, eax
		mov	[esp+3Ch+var_20], edx
		call	sk_new_null
		mov	[esp+3Ch+var_28], eax
		test	eax, eax
		jz	loc_6E42F886
		xchg	ax, ax

loc_6E42F750:				; CODE XREF: sub_6E42F730+BCj
		mov	[esp+3Ch+Val], 3Ah ; Val
		mov	[esp+3Ch+Str], edi ; Str
		call	strchr
		mov	esi, eax
		mov	[esp+3Ch+var_24], eax
		test	eax, eax
		jz	loc_6E42F847
		sub	esi, edi

loc_6E42F770:				; CODE XREF: sub_6E42F730+121j
		mov	ebp, Str1
		test	ebp, ebp
		jz	loc_6E42F800
		mov	ebx, offset Str1
		jmp	short loc_6E42F799
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F790:				; CODE XREF: sub_6E42F730+73j
					; sub_6E42F730+87j
		add	ebx, 8
		mov	ebp, [ebx]
		test	ebp, ebp
		jz	short loc_6E42F800

loc_6E42F799:				; CODE XREF: sub_6E42F730+53j
		mov	[esp+3Ch+Str], ebp ; Str
		call	strlen
		cmp	esi, eax
		jnz	short loc_6E42F790
		mov	[esp+3Ch+MaxCount], esi	; MaxCount
		mov	[esp+3Ch+Val], edi ; Str2
		mov	[esp+3Ch+Str], ebp ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_6E42F790
		mov	esi, eax
		mov	[esp+3Ch+Val], ebx
		mov	eax, [esp+3Ch+var_28]
		mov	[esp+3Ch+Str], eax
		call	sk_find
		test	eax, eax
		jns	loc_6E42F86C
		mov	[esp+3Ch+Val], ebx
		mov	eax, [esp+3Ch+var_28]
		mov	[esp+3Ch+Str], eax
		call	sk_push
		mov	edi, [esp+3Ch+var_24]
		test	edi, edi
		jz	short loc_6E42F856
		inc	edi
		jmp	loc_6E42F750
; ---------------------------------------------------------------------------
		jmp	short loc_6E42F800
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F800:				; CODE XREF: sub_6E42F730+48j
					; sub_6E42F730+67j ...
		mov	[esp+3Ch+var_2C], 0C4h
		mov	[esp+3Ch+var_30], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+3Ch+MaxCount], 16Ch

loc_6E42F818:				; CODE XREF: sub_6E42F730+154j
		mov	[esp+3Ch+Val], 135h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+var_28]
		mov	[esp+3Ch+Str], eax
		call	sk_free
		mov	edx, 1

loc_6E42F83D:				; CODE XREF: sub_6E42F730+187j
		mov	eax, edx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E42F847:				; CODE XREF: sub_6E42F730+38j
		mov	[esp+3Ch+Str], edi ; Str
		call	strlen
		mov	esi, eax
		jmp	loc_6E42F770
; ---------------------------------------------------------------------------

loc_6E42F856:				; CODE XREF: sub_6E42F730+B9j
		mov	edx, esi
		mov	eax, [esp+3Ch+var_20]
		mov	ecx, [esp+3Ch+var_28]
		mov	[eax], ecx
		mov	eax, edx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E42F86C:				; CODE XREF: sub_6E42F730+9Dj
		mov	[esp+3Ch+var_2C], 0BCh
		mov	[esp+3Ch+var_30], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+3Ch+MaxCount], 161h
		jmp	short loc_6E42F818
; ---------------------------------------------------------------------------

loc_6E42F886:				; CODE XREF: sub_6E42F730+18j
		mov	[esp+3Ch+var_2C], 0B1h
		mov	[esp+3Ch+var_30], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+3Ch+MaxCount], 16Ah
		mov	[esp+3Ch+Val], 135h
		mov	[esp+3Ch+Str], 14h
		call	ERR_put_error
		mov	edx, 1
		jmp	short loc_6E42F83D
sub_6E42F730	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 358. SSL_CTX_set_tlsext_use_srtp

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_tlsext_use_srtp
SSL_CTX_set_tlsext_use_srtp proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		lea	edx, [eax+1B4h]
		mov	eax, [esp+arg_4]
		jmp	sub_6E42F730
SSL_CTX_set_tlsext_use_srtp endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 354. SSL_set_tlsext_use_srtp

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_tlsext_use_srtp
SSL_set_tlsext_use_srtp	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		lea	edx, [eax+17Ch]
		mov	eax, [esp+arg_4]
		jmp	sub_6E42F730
SSL_set_tlsext_use_srtp	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 360. SSL_get_srtp_profiles

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_srtp_profiles
SSL_get_srtp_profiles proc near		; CODE XREF: sub_6E41B270+BD3p
					; sub_6E41DDD0+BB2p

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		test	edx, edx
		jz	short loc_6E42F940
		mov	eax, [edx+17Ch]
		test	eax, eax
		jz	short loc_6E42F920

locret_6E42F912:			; CODE XREF: SSL_get_srtp_profiles+28j
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F920:				; CODE XREF: SSL_get_srtp_profiles+10j
		mov	edx, [edx+0E4h]
		test	edx, edx
		jz	short locret_6E42F912
		mov	eax, [edx+1B4h]
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E42F940
; ---------------------------------------------------------------------------
		align 10h

loc_6E42F940:				; CODE XREF: SSL_get_srtp_profiles+6j
					; SSL_get_srtp_profiles+31j
		xor	eax, eax
		retn
SSL_get_srtp_profiles endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 357. SSL_get_selected_srtp_profile

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_selected_srtp_profile
SSL_get_selected_srtp_profile proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+180h]
		retn
SSL_get_selected_srtp_profile endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42F960	proc near		; CODE XREF: sub_6E41B270+BFBp
					; sub_6E41B270+C60p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		test	eax, eax
		jz	loc_6E42FA60
		mov	edi, [eax+17Ch]
		test	edi, edi
		jz	loc_6E42FAD0

loc_6E42F985:				; CODE XREF: sub_6E42F960+178j
					; sub_6E42F960+184j
		mov	[esp+3Ch+var_3C], edi
		call	sk_num
		mov	esi, eax
		test	ebx, ebx
		jz	loc_6E42FA80

loc_6E42F997:				; CODE XREF: sub_6E42F960+10Ej
		test	eax, eax
		jz	loc_6E42FA20
		lea	ebp, [eax+eax+2]
		mov	eax, ebp
		mov	[esp+3Ch+var_24], ebp
		cmp	ebp, [esp+3Ch+arg_C]
		jge	loc_6E42FA90
		sub	eax, 2
		sar	eax, 8
		mov	[ebx], al
		lea	eax, [esi+esi]
		mov	[ebx+1], al
		lea	eax, [ebx+2]
		mov	[esp+3Ch+var_20], eax
		test	esi, esi
		jle	short loc_6E42F9FD
		mov	ebp, eax
		xor	ebx, ebx

loc_6E42F9D0:				; CODE XREF: sub_6E42F960+91j
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], edi
		call	sk_value
		mov	edx, [eax+4]
		shr	edx, 8
		mov	[ebp+0], dl
		mov	eax, [eax+4]
		mov	[ebp+1], al
		add	ebp, 2
		inc	ebx
		cmp	ebx, esi
		jnz	short loc_6E42F9D0
		add	ebx, ebx
		add	[esp+3Ch+var_20], ebx
		mov	eax, [esp+3Ch+var_20]

loc_6E42F9FD:				; CODE XREF: sub_6E42F960+6Aj
		mov	byte ptr [eax],	0
		mov	ebp, [esp+3Ch+var_24]

loc_6E42FA04:				; CODE XREF: sub_6E42F960+12Aj
		inc	ebp
		mov	eax, [esp+3Ch+arg_8]
		mov	[eax], ebp
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FA20:				; CODE XREF: sub_6E42F960+39j
		mov	[esp+3Ch+var_2C], 0FFh
		mov	[esp+3Ch+var_30], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+3Ch+var_34], 162h
		mov	[esp+3Ch+var_38], 133h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FA60:				; CODE XREF: sub_6E42F960+11j
		xor	edi, edi
		mov	[esp+3Ch+var_3C], edi
		call	sk_num
		mov	esi, eax
		test	ebx, ebx
		jnz	loc_6E42F997
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E42FA80:				; CODE XREF: sub_6E42F960+31j
		lea	eax, [eax+eax+2]
		mov	[esp+3Ch+var_24], eax
		mov	ebp, eax
		jmp	loc_6E42FA04
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FA90:				; CODE XREF: sub_6E42F960+4Dj
		mov	[esp+3Ch+var_2C], 105h
		mov	[esp+3Ch+var_30], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+3Ch+var_34], 16Bh
		mov	[esp+3Ch+var_38], 133h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FAD0:				; CODE XREF: sub_6E42F960+1Fj
		mov	eax, [eax+0E4h]
		test	eax, eax
		jz	loc_6E42F985
		mov	edi, [eax+1B4h]
		jmp	loc_6E42F985
sub_6E42F960	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42FAF0	proc near		; CODE XREF: sub_6E41DDD0+BE7p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_4]
		cmp	[esp+3Ch+arg_8], 2
		jle	loc_6E42FC2E
		xor	ebx, ebx
		mov	bl, [ebp+0]
		shl	ebx, 8
		xor	eax, eax
		mov	al, [ebp+1]
		or	ebx, eax
		mov	[esp+3Ch+var_24], ebx
		mov	eax, [esp+3Ch+arg_8]
		sub	eax, 2
		mov	[esp+3Ch+var_20], eax
		test	bl, 1
		jnz	loc_6E42FC59
		cmp	ebx, [esp+3Ch+var_20]
		jge	loc_6E42FC73
		mov	edx, [esp+3Ch+arg_0]
		test	edx, edx
		jz	loc_6E42FC48
		mov	eax, [esp+3Ch+arg_0]
		mov	edi, [eax+17Ch]
		test	edi, edi
		jz	loc_6E42FC90

loc_6E42FB55:				; CODE XREF: sub_6E42FAF0+15Aj
					; sub_6E42FAF0+1A8j ...
		lea	eax, [ebp+2]
		mov	[esp+3Ch+var_28], eax
		mov	eax, [esp+3Ch+arg_0]
		mov	dword ptr [eax+180h], 0
		mov	[esp+3Ch+var_3C], edi
		call	sk_num
		mov	esi, eax
		test	ebx, ebx
		jz	short loc_6E42FBDA
		nop
		lea	esi, [esi+0]

loc_6E42FB80:				; CODE XREF: sub_6E42FAF0+E8j
		mov	eax, [esp+3Ch+var_28]
		xor	ebx, ebx
		mov	bl, [eax]
		shl	ebx, 8
		mov	ecx, eax
		xor	eax, eax
		mov	al, [ecx+1]
		or	ebx, eax
		add	[esp+3Ch+var_28], 2
		sub	[esp+3Ch+var_24], 2
		sub	[esp+3Ch+var_20], 2
		test	esi, esi
		jle	short loc_6E42FBD2
		xor	ebp, ebp
		jmp	short loc_6E42FBB5
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FBB0:				; CODE XREF: sub_6E42FAF0+D4j
		inc	ebp
		cmp	ebp, esi
		jz	short loc_6E42FBD2

loc_6E42FBB5:				; CODE XREF: sub_6E42FAF0+B9j
		mov	[esp+3Ch+var_38], ebp
		mov	[esp+3Ch+var_3C], edi
		call	sk_value
		cmp	[eax+4], ebx
		jnz	short loc_6E42FBB0
		mov	edx, [esp+3Ch+arg_0]
		mov	[edx+180h], eax
		mov	esi, ebp

loc_6E42FBD2:				; CODE XREF: sub_6E42FAF0+B5j
					; sub_6E42FAF0+C3j
		mov	eax, [esp+3Ch+var_24]
		test	eax, eax
		jnz	short loc_6E42FB80

loc_6E42FBDA:				; CODE XREF: sub_6E42FAF0+86j
		mov	eax, [esp+3Ch+var_28]
		xor	edx, edx
		mov	dl, [eax]
		mov	eax, [esp+3Ch+var_20]
		dec	eax
		cmp	edx, eax
		jz	short loc_6E42FC4F
		mov	[esp+3Ch+var_2C], 162h
		mov	[esp+3Ch+var_30], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+3Ch+var_34], 160h

loc_6E42FC03:				; CODE XREF: sub_6E42FAF0+156j
					; sub_6E42FAF0+181j ...
		mov	[esp+3Ch+var_38], 136h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+arg_C]
		mov	dword ptr [eax], 32h
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E42FC2E:				; CODE XREF: sub_6E42FAF0+10j
		mov	[esp+3Ch+var_2C], 126h
		mov	[esp+3Ch+var_30], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+3Ch+var_34], 161h
		jmp	short loc_6E42FC03
; ---------------------------------------------------------------------------

loc_6E42FC48:				; CODE XREF: sub_6E42FAF0+4Dj
		xor	edi, edi
		jmp	loc_6E42FB55
; ---------------------------------------------------------------------------

loc_6E42FC4F:				; CODE XREF: sub_6E42FAF0+F9j
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E42FC59:				; CODE XREF: sub_6E42FAF0+37j
		mov	[esp+3Ch+var_2C], 132h
		mov	[esp+3Ch+var_30], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+3Ch+var_34], 161h
		jmp	short loc_6E42FC03
; ---------------------------------------------------------------------------

loc_6E42FC73:				; CODE XREF: sub_6E42FAF0+41j
		mov	[esp+3Ch+var_2C], 13Ah
		mov	[esp+3Ch+var_30], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+3Ch+var_34], 161h
		jmp	loc_6E42FC03
; ---------------------------------------------------------------------------

loc_6E42FC90:				; CODE XREF: sub_6E42FAF0+5Fj
		mov	eax, [eax+0E4h]
		test	eax, eax
		jz	loc_6E42FB55
		mov	edi, [eax+1B4h]
		jmp	loc_6E42FB55
sub_6E42FAF0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42FCB0	proc near		; CODE XREF: sub_6E41C0E0+419p
					; sub_6E41C0E0+457p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		test	eax, eax
		jz	short loc_6E42FCFA
		cmp	[esp+2Ch+arg_C], 4
		jle	short loc_6E42FD10
		mov	ecx, [edx+180h]
		test	ecx, ecx
		jz	loc_6E42FD50
		mov	byte ptr [eax],	0
		mov	byte ptr [eax+1], 2
		mov	ecx, [edx+180h]
		mov	ecx, [ecx+4]
		shr	ecx, 8
		mov	[eax+2], cl
		mov	edx, [edx+180h]
		mov	edx, [edx+4]
		mov	[eax+3], dl
		mov	byte ptr [eax+4], 0

loc_6E42FCFA:				; CODE XREF: sub_6E42FCB0+Dj
		mov	eax, [esp+2Ch+arg_8]
		mov	dword ptr [eax], 5
		xor	eax, eax

loc_6E42FD06:				; CODE XREF: sub_6E42FCB0+D1j
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FD10:				; CODE XREF: sub_6E42FCB0+14j
		mov	[esp+2Ch+var_1C], 170h
		mov	[esp+2Ch+var_20], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+2Ch+var_24], 16Bh
		mov	[esp+2Ch+var_28], 134h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 1
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FD50:				; CODE XREF: sub_6E42FCB0+1Ej
		mov	[esp+2Ch+var_1C], 176h
		mov	[esp+2Ch+var_20], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+2Ch+var_24], 171h
		mov	[esp+2Ch+var_28], 134h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 1
		jmp	loc_6E42FD06
sub_6E42FCB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42FD90	proc near		; CODE XREF: sub_6E41C740+257p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edx, [esp+2Ch+arg_4]
		cmp	[esp+2Ch+arg_8], 5
		jnz	loc_6E42FE80
		xor	eax, eax
		mov	al, [edx]
		shl	eax, 8
		xor	ecx, ecx
		mov	cl, [edx+1]
		or	eax, ecx
		cmp	eax, 2
		jnz	short loc_6E42FE30
		movzx	edi, byte ptr [edx+2]
		and	edi, 0FFh
		shl	edi, 8
		xor	eax, eax
		mov	al, [edx+3]
		or	edi, eax
		cmp	byte ptr [edx+4], 0
		jnz	loc_6E42FEB0
		mov	eax, [esp+2Ch+arg_0]
		test	eax, eax
		jz	loc_6E42FF10
		mov	eax, [esp+2Ch+arg_0]
		mov	esi, [eax+17Ch]
		test	esi, esi
		jz	loc_6E42FEF0

loc_6E42FDF4:				; CODE XREF: sub_6E42FD90+172j
		xor	ebx, ebx
		jmp	short loc_6E42FE12
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FE00:				; CODE XREF: sub_6E42FD90+8Cj
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	sk_value
		cmp	[eax+4], edi
		jz	short loc_6E42FE90
		inc	ebx

loc_6E42FE12:				; CODE XREF: sub_6E42FD90+66j
		mov	[esp+2Ch+var_2C], esi
		call	sk_num
		cmp	ebx, eax
		jl	short loc_6E42FE00
		mov	[esp+2Ch+var_1C], 1BCh
		jmp	short loc_6E42FE38
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FE30:				; CODE XREF: sub_6E42FD90+26j
		mov	[esp+2Ch+var_1C], 196h

loc_6E42FE38:				; CODE XREF: sub_6E42FD90+96j
					; sub_6E42FD90+F8j
		mov	[esp+2Ch+var_20], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+2Ch+var_24], 161h

loc_6E42FE48:				; CODE XREF: sub_6E42FD90+198j
		mov	[esp+2Ch+var_28], 137h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+arg_C]
		mov	dword ptr [eax], 32h
		mov	eax, 1

loc_6E42FE6B:				; CODE XREF: sub_6E42FD90+15Bj
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FE80:				; CODE XREF: sub_6E42FD90+Fj
		mov	[esp+2Ch+var_1C], 18Eh
		jmp	short loc_6E42FE38
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FE90:				; CODE XREF: sub_6E42FD90+7Fj
		mov	ecx, [esp+2Ch+arg_0]
		mov	[ecx+180h], eax
		mov	eax, [esp+2Ch+arg_C]
		mov	dword ptr [eax], 0
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FEB0:				; CODE XREF: sub_6E42FD90+40j
		mov	[esp+2Ch+var_1C], 19Eh
		mov	[esp+2Ch+var_20], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+2Ch+var_24], 160h
		mov	[esp+2Ch+var_28], 137h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+arg_C]
		mov	dword ptr [eax], 2Fh
		mov	eax, 1
		jmp	loc_6E42FE6B
; ---------------------------------------------------------------------------

loc_6E42FEF0:				; CODE XREF: sub_6E42FD90+5Ej
		mov	eax, [eax+0E4h]
		test	eax, eax
		jz	short loc_6E42FF10
		mov	esi, [eax+1B4h]
		test	esi, esi
		jnz	loc_6E42FDF4
		nop
		lea	esi, [esi+0]

loc_6E42FF10:				; CODE XREF: sub_6E42FD90+4Cj
					; sub_6E42FD90+168j
		mov	[esp+2Ch+var_1C], 1A8h
		mov	[esp+2Ch+var_20], offset aD1_srtp_c ; "d1_srtp.c"
		mov	[esp+2Ch+var_24], 167h
		jmp	loc_6E42FE48
sub_6E42FD90	endp

; ---------------------------------------------------------------------------
		align 10h

loc_6E42FF30:				; DATA XREF: SSL_CTX_new+1ADo
		mov	edx, [esp+4]
		xor	eax, eax
		mov	al, [edx+49h]
		shl	eax, 8
		xor	ecx, ecx
		mov	cl, [edx+4Ah]
		shl	ecx, 10h
		or	eax, ecx
		xor	ecx, ecx
		mov	cl, [edx+48h]
		or	eax, ecx
		mov	cl, [edx+4Bh]
		and	ecx, 0FFh
		mov	edx, ecx
		shl	edx, 18h
		or	eax, edx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FF60:				; DATA XREF: sub_6E436760+3o
		mov	eax, [esp+4]
		mov	eax, [eax+8]
		mov	edx, [esp+8]
		sub	eax, [edx+8]
		cmp	eax, 0
		jz	short loc_6E42FF80
		setnle	al
		and	eax, 0FFh
		lea	eax, [eax+eax-1]
		retn
; ---------------------------------------------------------------------------

loc_6E42FF80:				; CODE XREF: .text:6E42FF71j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42FF90	proc near		; CODE XREF: sub_6E41A560+B3p
					; sub_6E41A630+B3p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_1C], 0A30h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 42h
		mov	[esp+2Ch+var_28], 0C5h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		retn
sub_6E42FF90	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E42FFD0	proc near		; DATA XREF: SSL_CTX_new+1A5o

Buf1		= dword	ptr -1Ch
Buf2		= dword	ptr -18h
Size		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		mov	ecx, [edx]
		cmp	[eax], ecx
		jz	short loc_6E42FFF0

loc_6E42FFE1:				; CODE XREF: sub_6E42FFD0+26j
		mov	eax, 1
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E42FFF0:				; CODE XREF: sub_6E42FFD0+Fj
		mov	ecx, [eax+44h]
		cmp	ecx, [edx+44h]
		jnz	short loc_6E42FFE1
		mov	[esp+1Ch+Size],	ecx ; Size
		add	edx, 48h
		mov	[esp+1Ch+Buf2],	edx ; Buf2
		add	eax, 48h
		mov	[esp+1Ch+Buf1],	eax ; Buf1
		call	memcmp
		add	esp, 1Ch
		retn
sub_6E42FFD0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  42. SSL_clear

; =============== S U B	R O U T	I N E =======================================


		public SSL_clear
SSL_clear	proc near		; CODE XREF: sub_6E406650+183p
					; sub_6E40D250+163p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+8]
		test	eax, eax
		jz	loc_6E430250
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6E43A170
		test	eax, eax
		jnz	loc_6E4301B0

loc_6E430043:				; CODE XREF: SSL_clear+1A8j
		mov	dword ptr [ebx+0D4h], 0
		mov	dword ptr [ebx+6Ch], 0
		mov	dword ptr [ebx+30h], 0
		mov	ecx, [ebx+190h]
		test	ecx, ecx
		jnz	loc_6E430210
		mov	dword ptr [ebx+4], 0
		cmp	dword ptr [ebx+24h], 1
		sbb	eax, eax
		and	eax, 0FFFFF000h
		add	eax, 6000h
		mov	[ebx+34h], eax
		mov	eax, [ebx+8]
		mov	eax, [eax]
		mov	[ebx], eax
		mov	[ebx+110h], eax
		mov	dword ptr [ebx+18h], 1
		mov	dword ptr [ebx+38h], 0F0h
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jz	short loc_6E4300B4
		mov	[esp+2Ch+var_2C], eax
		call	BUF_MEM_free
		mov	dword ptr [ebx+3Ch], 0

loc_6E4300B4:				; CODE XREF: SSL_clear+83j
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	short loc_6E4300DE
		mov	[esp+2Ch+var_2C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+80h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+80h], 0

loc_6E4300DE:				; CODE XREF: SSL_clear+9Cj
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E430108
		mov	[esp+2Ch+var_2C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+8Ch]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+8Ch], 0

loc_6E430108:				; CODE XREF: SSL_clear+C6j
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	short loc_6E430124
		mov	[esp+2Ch+var_2C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+88h], 0

loc_6E430124:				; CODE XREF: SSL_clear+F0j
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E430140
		mov	[esp+2Ch+var_2C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+94h], 0

loc_6E430140:				; CODE XREF: SSL_clear+10Cj
		mov	eax, [ebx+84h]
		test	eax, eax
		jz	short loc_6E430152
		mov	[esp+2Ch+var_2C], eax
		call	EVP_MD_CTX_destroy

loc_6E430152:				; CODE XREF: SSL_clear+128j
		mov	dword ptr [ebx+84h], 0
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	short loc_6E43016E
		mov	[esp+2Ch+var_2C], eax
		call	EVP_MD_CTX_destroy

loc_6E43016E:				; CODE XREF: SSL_clear+144j
		mov	dword ptr [ebx+90h], 0
		mov	dword ptr [ebx+10Ch], 0
		mov	edx, [ebx+1Ch]
		test	edx, edx
		jnz	short loc_6E430193
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	short loc_6E4301D0

loc_6E430193:				; CODE XREF: SSL_clear+167j
		mov	eax, [ebx+8]

loc_6E430196:				; CODE XREF: SSL_clear+1BBj
		mov	eax, [eax+8]
		mov	[esp+2Ch+var_2C], ebx
		call	eax
		mov	eax, 1

loc_6E4301A3:				; CODE XREF: SSL_clear+1E2j
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4301B0:				; CODE XREF: SSL_clear+1Dj
		mov	eax, [ebx+0C0h]
		mov	[esp+2Ch+var_2C], eax
		call	SSL_SESSION_free
		mov	dword ptr [ebx+0C0h], 0
		jmp	loc_6E430043
; ---------------------------------------------------------------------------
		align 10h

loc_6E4301D0:				; CODE XREF: SSL_clear+171j
		mov	eax, [ebx+8]
		mov	edx, [ebx+0E4h]
		cmp	eax, [edx]
		jz	short loc_6E430196
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], ebx
		call	eax
		mov	eax, [ebx+0E4h]
		mov	eax, [eax]
		mov	[ebx+8], eax
		mov	eax, [eax+4]
		mov	[esp+2Ch+var_2C], ebx
		call	eax
		test	eax, eax
		setnz	al
		and	eax, 0FFh
		jmp	short loc_6E4301A3
; ---------------------------------------------------------------------------
		align 10h

loc_6E430210:				; CODE XREF: SSL_clear+43j
		mov	[esp+2Ch+var_1C], 0DCh
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 44h
		mov	[esp+2Ch+var_28], 0A4h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430250:				; CODE XREF: SSL_clear+Dj
		mov	[esp+2Ch+var_1C], 0C2h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0BCh
		mov	[esp+2Ch+var_28], 0A4h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
SSL_clear	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  19. SSL_CTX_set_ssl_version

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_ssl_version
SSL_CTX_set_ssl_version	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	edx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	[edx], eax
		cmp	dword ptr [eax], 2
		jz	short loc_6E430320
		mov	ecx, offset aAllExportAnull ; "ALL:!EXPORT:!aNULL:!eNULL:!SSLv2"

loc_6E4302A7:				; CODE XREF: SSL_CTX_set_ssl_version+95j
		mov	[esp+2Ch+var_20], ecx
		lea	ecx, [edx+8]
		mov	[esp+2Ch+var_24], ecx
		add	edx, 4
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E43BC80
		test	eax, eax
		jz	short loc_6E4302E0
		mov	[esp+2Ch+var_2C], eax
		call	sk_num
		test	eax, eax
		jle	short loc_6E4302E0
		mov	eax, 1
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4302E0:				; CODE XREF: SSL_CTX_set_ssl_version+33j
					; SSL_CTX_set_ssl_version+3Fj
		mov	[esp+2Ch+var_1C], 117h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0E6h
		mov	[esp+2Ch+var_28], 0AAh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430320:				; CODE XREF: SSL_CTX_set_ssl_version+10j
		mov	ecx, offset aSslv2 ; "SSLv2"
		jmp	short loc_6E4302A7
SSL_CTX_set_ssl_version	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 231. SSL_CTX_set_session_id_context

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_session_id_context
SSL_CTX_set_session_id_context proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_D		= byte ptr -0Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		sub	esp, 24h
		mov	edx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_8]
		cmp	eax, 20h
		ja	short loc_6E4303C0
		mov	[edx+0C4h], eax
		lea	edi, [edx+0C8h]
		mov	esi, [esp+2Ch+arg_4]
		cmp	eax, 4
		jnb	short loc_6E4303A0
		xor	edx, edx
		test	al, 2
		jnz	short loc_6E430380

loc_6E43035D:				; CODE XREF: SSL_CTX_set_session_id_context+8Bj
		test	al, 1
		jnz	short loc_6E430370

loc_6E430361:				; CODE XREF: SSL_CTX_set_session_id_context+4Aj
					; SSL_CTX_set_session_id_context+5Dj
		mov	eax, 1
		add	esp, 24h
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430370:				; CODE XREF: SSL_CTX_set_session_id_context+2Fj
					; SSL_CTX_set_session_id_context+5Fj
		mov	al, [esi+edx]
		mov	[esp+2Ch+var_D], al
		mov	[edi+edx], al
		jmp	short loc_6E430361
; ---------------------------------------------------------------------------
		align 10h

loc_6E430380:				; CODE XREF: SSL_CTX_set_session_id_context+2Bj
					; SSL_CTX_set_session_id_context+8Dj
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	short loc_6E430361
		jmp	short loc_6E430370
; ---------------------------------------------------------------------------
		jmp	short loc_6E4303A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4303A0:				; CODE XREF: SSL_CTX_set_session_id_context+25j
					; SSL_CTX_set_session_id_context+61j
		test	edi, 1
		jnz	short loc_6E430400

loc_6E4303A8:				; CODE XREF: SSL_CTX_set_session_id_context+E0j
		test	edi, 2
		jnz	short loc_6E430420

loc_6E4303B0:				; CODE XREF: SSL_CTX_set_session_id_context+FFj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E43035D
		jmp	short loc_6E430380
; ---------------------------------------------------------------------------
		align 10h

loc_6E4303C0:				; CODE XREF: SSL_CTX_set_session_id_context+10j
		mov	[esp+2Ch+var_1C], 193h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 111h
		mov	[esp+2Ch+var_28], 0DBh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 24h
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430400:				; CODE XREF: SSL_CTX_set_session_id_context+76j
		mov	cl, [esi]
		mov	[edx+0C8h], cl
		lea	edi, [edx+0C9h]
		inc	esi
		dec	eax
		jmp	short loc_6E4303A8
; ---------------------------------------------------------------------------
		align 10h

loc_6E430420:				; CODE XREF: SSL_CTX_set_session_id_context+7Ej
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E4303B0
SSL_CTX_set_session_id_context endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 189. SSL_set_session_id_context

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_session_id_context
SSL_set_session_id_context proc	near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_D		= byte ptr -0Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		sub	esp, 24h
		mov	edx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_8]
		cmp	eax, 20h
		ja	short loc_6E4304D0
		mov	[edx+9Ch], eax
		lea	edi, [edx+0A0h]
		mov	esi, [esp+2Ch+arg_4]
		cmp	eax, 4
		jnb	short loc_6E4304B0
		xor	edx, edx
		test	al, 2
		jnz	short loc_6E430490

loc_6E43046D:				; CODE XREF: SSL_set_session_id_context+8Bj
		test	al, 1
		jnz	short loc_6E430480

loc_6E430471:				; CODE XREF: SSL_set_session_id_context+4Aj
					; SSL_set_session_id_context+5Dj
		mov	eax, 1
		add	esp, 24h
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430480:				; CODE XREF: SSL_set_session_id_context+2Fj
					; SSL_set_session_id_context+5Fj
		mov	al, [esi+edx]
		mov	[esp+2Ch+var_D], al
		mov	[edi+edx], al
		jmp	short loc_6E430471
; ---------------------------------------------------------------------------
		align 10h

loc_6E430490:				; CODE XREF: SSL_set_session_id_context+2Bj
					; SSL_set_session_id_context+8Dj
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	short loc_6E430471
		jmp	short loc_6E430480
; ---------------------------------------------------------------------------
		jmp	short loc_6E4304B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4304B0:				; CODE XREF: SSL_set_session_id_context+25j
					; SSL_set_session_id_context+61j
		test	edi, 1
		jnz	short loc_6E430510

loc_6E4304B8:				; CODE XREF: SSL_set_session_id_context+E0j
		test	edi, 2
		jnz	short loc_6E430530

loc_6E4304C0:				; CODE XREF: SSL_set_session_id_context+FFj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E43046D
		jmp	short loc_6E430490
; ---------------------------------------------------------------------------
		align 10h

loc_6E4304D0:				; CODE XREF: SSL_set_session_id_context+10j
		mov	[esp+2Ch+var_1C], 1A1h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 111h
		mov	[esp+2Ch+var_28], 0DAh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 24h
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430510:				; CODE XREF: SSL_set_session_id_context+76j
		mov	cl, [esi]
		mov	[edx+0A0h], cl
		lea	edi, [edx+0A1h]
		inc	esi
		dec	eax
		jmp	short loc_6E4304B8
; ---------------------------------------------------------------------------
		align 10h

loc_6E430530:				; CODE XREF: SSL_set_session_id_context+7Ej
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E4304C0
SSL_set_session_id_context endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 264. SSL_CTX_set_generate_session_id

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_generate_session_id
SSL_CTX_set_generate_session_id	proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_10], 1ACh
		mov	[esp+1Ch+var_14], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+1Ch+var_18], 0Ch
		mov	[esp+1Ch+var_1C], 9
		call	CRYPTO_lock
		mov	edx, [esp+1Ch+arg_4]
		mov	eax, [esp+1Ch+arg_0]
		mov	[eax+0ECh], edx
		mov	[esp+1Ch+var_10], 1AEh
		mov	[esp+1Ch+var_14], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+1Ch+var_18], 0Ch
		mov	[esp+1Ch+var_1C], 0Ah
		call	CRYPTO_lock
		mov	eax, 1
		add	esp, 1Ch
		retn
SSL_CTX_set_generate_session_id	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 258. SSL_set_generate_session_id

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_generate_session_id
SSL_set_generate_session_id proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_10], 1B4h
		mov	[esp+1Ch+var_14], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 9
		call	CRYPTO_lock
		mov	edx, [esp+1Ch+arg_4]
		mov	eax, [esp+1Ch+arg_0]
		mov	[eax+0C4h], edx
		mov	[esp+1Ch+var_10], 1B6h
		mov	[esp+1Ch+var_14], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 0Ah
		call	CRYPTO_lock
		mov	eax, 1
		add	esp, 1Ch
		retn
SSL_set_generate_session_id endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 249. SSL_has_matching_session_id

; =============== S U B	R O U T	I N E =======================================


		public SSL_has_matching_session_id
SSL_has_matching_session_id proc near	; CODE XREF: sub_6E437B30+3Fp
					; sub_6E438670+525p

var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_10D		= byte ptr -10Dh
var_100		= dword	ptr -100h
var_BC		= dword	ptr -0BCh
var_B8		= byte ptr -0B8h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 120h
		mov	eax, [esp+12Ch+arg_8]
		cmp	eax, 20h
		jbe	short loc_6E430660
		xor	eax, eax
		add	esp, 120h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E430660
; ---------------------------------------------------------------------------
		align 10h

loc_6E430660:				; CODE XREF: SSL_has_matching_session_id+13j
					; SSL_has_matching_session_id+21j
		mov	ebx, [esp+12Ch+arg_0]
		mov	edx, [ebx]
		mov	[esp+12Ch+var_100], edx
		mov	[esp+12Ch+var_BC], eax
		lea	edi, [esp+12Ch+var_B8]
		mov	esi, [esp+12Ch+arg_4]
		cmp	eax, 4
		jb	short loc_6E430688
		mov	ecx, eax
		shr	ecx, 2
		rep movsd

loc_6E430688:				; CODE XREF: SSL_has_matching_session_id+4Fj
		xor	ecx, ecx
		test	al, 2
		jnz	loc_6E430780
		test	al, 1
		jnz	loc_6E430720

loc_6E43069A:				; CODE XREF: SSL_has_matching_session_id+15Dj
		cmp	edx, 2
		jz	loc_6E430733

loc_6E4306A3:				; CODE XREF: SSL_has_matching_session_id+FDj
					; SSL_has_matching_session_id+106j
		lea	esi, [esp+12Ch+var_100]

loc_6E4306A7:				; CODE XREF: SSL_has_matching_session_id+140j
		mov	[esp+12Ch+var_120], 1D8h
		mov	[esp+12Ch+var_124], offset aSsl_lib_c ;	"ssl_lib.c"
		mov	[esp+12Ch+var_128], 0Ch
		mov	[esp+12Ch+var_12C], 5
		call	CRYPTO_lock
		mov	eax, [esp+12Ch+arg_0]
		mov	eax, [eax+0E4h]
		mov	eax, [eax+10h]
		mov	[esp+12Ch+var_128], esi
		mov	[esp+12Ch+var_12C], eax
		call	lh_retrieve
		mov	esi, eax
		mov	[esp+12Ch+var_120], 1DAh
		mov	[esp+12Ch+var_124], offset aSsl_lib_c ;	"ssl_lib.c"
		mov	[esp+12Ch+var_128], 0Ch
		mov	[esp+12Ch+var_12C], 6
		call	CRYPTO_lock
		xor	eax, eax
		test	esi, esi
		setnz	al
		add	esp, 120h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430720:				; CODE XREF: SSL_has_matching_session_id+64j
					; SSL_has_matching_session_id+163j
		mov	bl, [esi+ecx]
		mov	[esp+12Ch+var_10D], bl
		mov	[edi+ecx], bl
		cmp	edx, 2
		jnz	loc_6E4306A3

loc_6E430733:				; CODE XREF: SSL_has_matching_session_id+6Dj
		cmp	eax, 0Fh
		ja	loc_6E4306A3
		mov	edx, 10h
		lea	esi, [esp+12Ch+var_100]
		lea	ecx, [esi+eax+40h]
		sub	edx, eax
		lea	edi, [ecx+8]
		cmp	edx, 4
		jnb	short loc_6E4307A0

loc_6E430753:				; CODE XREF: SSL_has_matching_session_id+189j
		test	dl, 2
		jz	short loc_6E430760
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E430760:				; CODE XREF: SSL_has_matching_session_id+126j
		and	edx, 1
		jz	short loc_6E430768
		mov	byte ptr [edi],	0

loc_6E430768:				; CODE XREF: SSL_has_matching_session_id+133j
		mov	[esp+12Ch+var_BC], 10h
		jmp	loc_6E4306A7
; ---------------------------------------------------------------------------
		align 10h

loc_6E430780:				; CODE XREF: SSL_has_matching_session_id+5Cj
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		test	al, 1
		jz	loc_6E43069A
		jmp	short loc_6E430720
; ---------------------------------------------------------------------------
		align 10h

loc_6E4307A0:				; CODE XREF: SSL_has_matching_session_id+121j
		test	edi, 1
		jnz	short loc_6E4307BB

loc_6E4307A8:				; CODE XREF: SSL_has_matching_session_id+193j
		test	edi, 2
		jnz	short loc_6E4307C5

loc_6E4307B0:				; CODE XREF: SSL_has_matching_session_id+1A0j
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	short loc_6E430753
; ---------------------------------------------------------------------------

loc_6E4307BB:				; CODE XREF: SSL_has_matching_session_id+176j
		mov	byte ptr [ecx+8], 0
		lea	edi, [ecx+9]
		dec	edx
		jmp	short loc_6E4307A8
; ---------------------------------------------------------------------------

loc_6E4307C5:				; CODE XREF: SSL_has_matching_session_id+17Ej
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	short loc_6E4307B0
SSL_has_matching_session_id endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 238. SSL_CTX_set_purpose

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_purpose
SSL_CTX_set_purpose proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0F0h]
		mov	[esp+arg_0], eax
		jmp	X509_VERIFY_PARAM_set_purpose
SSL_CTX_set_purpose endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 236. SSL_set_purpose

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_purpose
SSL_set_purpose	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+70h]
		mov	[esp+arg_0], eax
		jmp	X509_VERIFY_PARAM_set_purpose
SSL_set_purpose	endp

; Exported entry 237. SSL_CTX_set_trust

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_trust
SSL_CTX_set_trust proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0F0h]
		mov	[esp+arg_0], eax
		jmp	X509_VERIFY_PARAM_set_trust
SSL_CTX_set_trust endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 239. SSL_set_trust

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_trust
SSL_set_trust	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+70h]
		mov	[esp+arg_0], eax
		jmp	X509_VERIFY_PARAM_set_trust
SSL_set_trust	endp

; Exported entry 310. SSL_CTX_set1_param

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set1_param
SSL_CTX_set1_param proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0F0h]
		mov	[esp+arg_0], eax
		jmp	X509_VERIFY_PARAM_set1
SSL_CTX_set1_param endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 309. SSL_set1_param

; =============== S U B	R O U T	I N E =======================================


		public SSL_set1_param
SSL_set1_param	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+70h]
		mov	[esp+arg_0], eax
		jmp	X509_VERIFY_PARAM_set1
SSL_set1_param	endp

; Exported entry  83. SSL_set_bio

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_bio
SSL_set_bio	proc near		; CODE XREF: sub_6E443D00+CFp

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+arg_4]
		mov	esi, [esp+1Ch+arg_8]
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_6E43088E
		cmp	eax, [ebx+10h]
		jz	short loc_6E4308D0

loc_6E43088E:				; CODE XREF: SSL_set_bio+17j
					; SSL_set_bio+6Dj
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6E4308A1
		cmp	eax, edi
		jz	short loc_6E4308A1
		mov	[esp+1Ch+var_1C], eax
		call	BIO_free_all

loc_6E4308A1:				; CODE XREF: SSL_set_bio+23j
					; SSL_set_bio+27j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_6E4308B9
		cmp	eax, esi
		jz	short loc_6E4308B9
		cmp	eax, [ebx+0Ch]
		jz	short loc_6E4308B9
		mov	[esp+1Ch+var_1C], eax
		call	BIO_free_all

loc_6E4308B9:				; CODE XREF: SSL_set_bio+36j
					; SSL_set_bio+3Aj ...
		mov	[ebx+0Ch], edi
		mov	[ebx+10h], esi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4308D0:				; CODE XREF: SSL_set_bio+1Cj
		mov	edx, [eax+24h]
		mov	[ebx+10h], edx
		mov	dword ptr [eax+24h], 0
		jmp	short loc_6E43088E
SSL_set_bio	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  63. SSL_get_rbio

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_rbio
SSL_get_rbio	proc near		; CODE XREF: sub_6E413BF0+A3Bp
					; sub_6E413BF0+12F5p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0Ch]
		retn
SSL_get_rbio	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  72. SSL_get_wbio

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_wbio
SSL_get_wbio	proc near		; CODE XREF: sub_6E427D80+A3p
					; sub_6E427E70+333p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+10h]
		retn
SSL_get_wbio	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  59. SSL_get_fd

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_fd
SSL_get_fd	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], 0FFFFFFFFh
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_28], 100h
		mov	[esp+2Ch+var_2C], eax
		call	BIO_find_type
		test	eax, eax
		jz	short loc_6E430946
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 69h
		mov	[esp+2Ch+var_2C], eax
		call	BIO_ctrl

loc_6E430946:				; CODE XREF: SSL_get_fd+24j
		mov	eax, [esp+2Ch+var_10]
		add	esp, 2Ch
		retn
SSL_get_fd	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 246. SSL_get_rfd

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_rfd
SSL_get_rfd	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], 0FFFFFFFFh
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_28], 100h
		mov	[esp+2Ch+var_2C], eax
		call	BIO_find_type
		test	eax, eax
		jz	short loc_6E430996
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 69h
		mov	[esp+2Ch+var_2C], eax
		call	BIO_ctrl

loc_6E430996:				; CODE XREF: SSL_get_rfd+24j
		mov	eax, [esp+2Ch+var_10]
		add	esp, 2Ch
		retn
SSL_get_rfd	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 247. SSL_get_wfd

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_wfd
SSL_get_wfd	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	[esp+2Ch+var_10], 0FFFFFFFFh
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+10h]
		mov	[esp+2Ch+var_28], 100h
		mov	[esp+2Ch+var_2C], eax
		call	BIO_find_type
		test	eax, eax
		jz	short loc_6E4309E6
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 69h
		mov	[esp+2Ch+var_2C], eax
		call	BIO_ctrl

loc_6E4309E6:				; CODE XREF: SSL_get_wfd+24j
		mov	eax, [esp+2Ch+var_10]
		add	esp, 2Ch
		retn
SSL_get_wfd	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  87. SSL_set_fd

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_fd
SSL_set_fd	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		call	BIO_s_socket
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_6E430A90
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 68h
		mov	[esp+2Ch+var_2C], esi
		call	BIO_int_ctrl
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_6E430A3C
		cmp	eax, [ebx+10h]
		jz	short loc_6E430A80

loc_6E430A3C:				; CODE XREF: SSL_set_fd+45j
					; SSL_set_fd+9Dj
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6E430A4F
		cmp	esi, eax
		jz	short loc_6E430A4F
		mov	[esp+2Ch+var_2C], eax
		call	BIO_free_all

loc_6E430A4F:				; CODE XREF: SSL_set_fd+51j
					; SSL_set_fd+55j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_6E430A67
		cmp	esi, eax
		jz	short loc_6E430A67
		cmp	eax, [ebx+0Ch]
		jz	short loc_6E430A67
		mov	[esp+2Ch+var_2C], eax
		call	BIO_free_all

loc_6E430A67:				; CODE XREF: SSL_set_fd+64j
					; SSL_set_fd+68j ...
		mov	[ebx+0Ch], esi
		mov	[ebx+10h], esi
		mov	eax, 1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430A80:				; CODE XREF: SSL_set_fd+4Aj
		mov	edx, [eax+24h]
		mov	[ebx+10h], edx
		mov	dword ptr [eax+24h], 0
		jmp	short loc_6E430A3C
; ---------------------------------------------------------------------------
		align 10h

loc_6E430A90:				; CODE XREF: SSL_set_fd+1Aj
		mov	[esp+2Ch+var_1C], 2ACh
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0C0h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
SSL_set_fd	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  95. SSL_set_wfd

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_wfd
SSL_set_wfd	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6E430AF4
		mov	[esp+2Ch+var_2C], eax
		call	BIO_method_type
		cmp	eax, 505h
		jz	loc_6E430BB0

loc_6E430AF4:				; CODE XREF: SSL_set_wfd+Fj
					; SSL_set_wfd+107j
		call	BIO_s_socket
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E430B70
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 68h
		mov	[esp+2Ch+var_2C], esi
		call	BIO_int_ctrl
		mov	edi, [ebx+0Ch]
		mov	eax, [ebx+14h]
		mov	edx, [ebx+10h]
		test	eax, eax
		jz	short loc_6E430B3C
		cmp	eax, edx
		jz	loc_6E430C10

loc_6E430B3C:				; CODE XREF: SSL_set_wfd+62j
					; SSL_set_wfd+14Fj
		test	edx, edx
		jz	short loc_6E430B50
		cmp	esi, edx
		jz	short loc_6E430B50
		cmp	edi, edx
		jz	short loc_6E430B50
		mov	[esp+2Ch+var_2C], edx
		call	BIO_free_all

loc_6E430B50:				; CODE XREF: SSL_set_wfd+6Ej
					; SSL_set_wfd+72j ...
		mov	[ebx+0Ch], edi
		mov	[ebx+10h], esi
		mov	eax, 1

loc_6E430B5B:				; CODE XREF: SSL_set_wfd+139j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430B70:				; CODE XREF: SSL_set_wfd+35j
		mov	[esp+2Ch+var_1C], 2C0h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0C4h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430BB0:				; CODE XREF: SSL_set_wfd+1Ej
		mov	eax, [ebx+0Ch]
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 69h
		mov	[esp+2Ch+var_2C], eax
		call	BIO_ctrl
		cmp	eax, [esp+2Ch+arg_4]
		jnz	loc_6E430AF4
		mov	esi, [ebx+0Ch]
		mov	edx, [ebx+14h]
		mov	eax, [ebx+10h]
		test	edx, edx
		jz	short loc_6E430BEE
		cmp	edx, eax
		jz	short loc_6E430C24

loc_6E430BEE:				; CODE XREF: SSL_set_wfd+118j
					; SSL_set_wfd+163j
		test	eax, eax
		jz	short loc_6E430BFE
		cmp	esi, eax
		jz	short loc_6E430BFE
		mov	[esp+2Ch+var_2C], eax
		call	BIO_free_all

loc_6E430BFE:				; CODE XREF: SSL_set_wfd+120j
					; SSL_set_wfd+124j
		mov	[ebx+0Ch], esi
		mov	[ebx+10h], esi
		mov	eax, 1
		jmp	loc_6E430B5B
; ---------------------------------------------------------------------------
		align 10h

loc_6E430C10:				; CODE XREF: SSL_set_wfd+66j
		mov	eax, [edx+24h]
		mov	[ebx+10h], eax
		mov	dword ptr [edx+24h], 0
		mov	edx, eax
		jmp	loc_6E430B3C
; ---------------------------------------------------------------------------

loc_6E430C24:				; CODE XREF: SSL_set_wfd+11Cj
		mov	edx, [eax+24h]
		mov	[ebx+10h], edx
		mov	dword ptr [eax+24h], 0
		mov	eax, edx
		jmp	short loc_6E430BEE
SSL_set_wfd	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  89. SSL_set_rfd

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_rfd
SSL_set_rfd	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_6E430C64
		mov	[esp+2Ch+var_2C], eax
		call	BIO_method_type
		cmp	eax, 505h
		jz	loc_6E430D30

loc_6E430C64:				; CODE XREF: SSL_set_rfd+Fj
					; SSL_set_rfd+117j
		call	BIO_s_socket
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E430CF0
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 68h
		mov	[esp+2Ch+var_2C], esi
		call	BIO_int_ctrl
		mov	edi, [ebx+10h]
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_6E430CA9
		cmp	edi, eax
		jz	loc_6E430DB0

loc_6E430CA9:				; CODE XREF: SSL_set_rfd+5Fj
					; SSL_set_rfd+17Dj
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6E430CBC
		cmp	esi, eax
		jz	short loc_6E430CBC
		mov	[esp+2Ch+var_2C], eax
		call	BIO_free_all

loc_6E430CBC:				; CODE XREF: SSL_set_rfd+6Ej
					; SSL_set_rfd+72j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_6E430CD4
		cmp	edi, eax
		jz	short loc_6E430CD4
		cmp	eax, [ebx+0Ch]
		jz	short loc_6E430CD4
		mov	[esp+2Ch+var_2C], eax
		call	BIO_free_all

loc_6E430CD4:				; CODE XREF: SSL_set_rfd+81j
					; SSL_set_rfd+85j ...
		mov	[ebx+0Ch], esi
		mov	[ebx+10h], edi
		mov	eax, 1

loc_6E430CDF:				; CODE XREF: SSL_set_rfd+161j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430CF0:				; CODE XREF: SSL_set_rfd+35j
		mov	[esp+2Ch+var_1C], 2D6h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0C2h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430D30:				; CODE XREF: SSL_set_rfd+1Ej
		mov	eax, [ebx+10h]
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 69h
		mov	[esp+2Ch+var_2C], eax
		call	BIO_ctrl
		cmp	eax, [esp+2Ch+arg_4]
		jnz	loc_6E430C64
		mov	esi, [ebx+10h]
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_6E430D6B
		cmp	esi, eax
		jz	short loc_6E430DC2

loc_6E430D6B:				; CODE XREF: SSL_set_rfd+125j
					; SSL_set_rfd+18Fj
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6E430D7E
		cmp	esi, eax
		jz	short loc_6E430D7E
		mov	[esp+2Ch+var_2C], eax
		call	BIO_free_all

loc_6E430D7E:				; CODE XREF: SSL_set_rfd+130j
					; SSL_set_rfd+134j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_6E430D96
		cmp	esi, eax
		jz	short loc_6E430D96
		cmp	eax, [ebx+0Ch]
		jz	short loc_6E430D96
		mov	[esp+2Ch+var_2C], eax
		call	BIO_free_all

loc_6E430D96:				; CODE XREF: SSL_set_rfd+143j
					; SSL_set_rfd+147j ...
		mov	[ebx+0Ch], esi
		mov	[ebx+10h], esi
		mov	eax, 1
		jmp	loc_6E430CDF
; ---------------------------------------------------------------------------
		align 10h

loc_6E430DB0:				; CODE XREF: SSL_set_rfd+63j
		mov	eax, [edi+24h]
		mov	[ebx+10h], eax
		mov	dword ptr [edi+24h], 0
		jmp	loc_6E430CA9
; ---------------------------------------------------------------------------

loc_6E430DC2:				; CODE XREF: SSL_set_rfd+129j
		mov	eax, [esi+24h]
		mov	[ebx+10h], eax
		mov	dword ptr [esi+24h], 0
		jmp	short loc_6E430D6B
SSL_set_rfd	endp

; ---------------------------------------------------------------------------
		jmp	short SSL_get_finished
; ---------------------------------------------------------------------------
		align 10h
; Exported entry 240. SSL_get_finished

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_finished
SSL_get_finished proc near		; CODE XREF: .text:6E430DD1j

var_E		= byte ptr -0Eh
arg_3		= dword	ptr  7
arg_7		= dword	ptr  0Bh

		push	edi
		push	esi
		push	ebx
		sub	esp, 1
		mov	eax, [esp+11h]
		mov	ecx, [eax+58h]
		test	ecx, ecx
		jz	loc_6E430E90
		mov	eax, [ecx+2B4h]
		mov	edx, [esp+0Eh+arg_7]
		cmp	edx, eax
		ja	short loc_6E430E60
		mov	edi, [esp+0Eh+arg_3]
		lea	esi, [ecx+234h]
		cmp	edx, 4
		jnb	short loc_6E430E71

loc_6E430E12:				; CODE XREF: SSL_get_finished+8Fj
					; SSL_get_finished+A8j
		xor	ecx, ecx
		test	dl, 2
		jnz	short loc_6E430E40
		and	edx, 1
		jnz	short loc_6E430E30

loc_6E430E1E:				; CODE XREF: SSL_get_finished+6Ej
		add	esp, 1
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430E30:				; CODE XREF: SSL_get_finished+3Cj
					; SSL_get_finished+70j
		mov	dl, [esi+ecx]
		mov	[esp+0Eh+var_E], dl
		mov	[edi+ecx], dl
		add	esp, 1
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6E430E40:				; CODE XREF: SSL_get_finished+37j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		and	edx, 1
		jz	short loc_6E430E1E
		jmp	short loc_6E430E30
; ---------------------------------------------------------------------------
		align 10h

loc_6E430E60:				; CODE XREF: SSL_get_finished+21j
		mov	edx, eax
		mov	edi, [esp+0Eh+arg_3]
		lea	esi, [ecx+234h]
		cmp	edx, 4
		jb	short loc_6E430E12

loc_6E430E71:				; CODE XREF: SSL_get_finished+30j
		test	edi, 1
		jnz	short loc_6E430EC0

loc_6E430E79:				; CODE XREF: SSL_get_finished+F0j
		test	edi, 2
		jnz	short loc_6E430EA0

loc_6E430E81:				; CODE XREF: SSL_get_finished+CFj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E430E12
; ---------------------------------------------------------------------------
		align 10h

loc_6E430E90:				; CODE XREF: SSL_get_finished+Fj
		xor	eax, eax
		add	esp, 1
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430EA0:				; CODE XREF: SSL_get_finished+9Fj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	short loc_6E430E81
; ---------------------------------------------------------------------------
		jmp	short loc_6E430EC0
; ---------------------------------------------------------------------------
		align 10h

loc_6E430EC0:				; CODE XREF: SSL_get_finished+97j
					; SSL_get_finished+D1j
		mov	bl, [ecx+234h]
		mov	[edi], bl
		inc	edi
		lea	esi, [ecx+235h]
		dec	edx
		jmp	short loc_6E430E79
SSL_get_finished endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 241. SSL_get_peer_finished

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_peer_finished
SSL_get_peer_finished proc near

var_E		= byte ptr -0Eh
arg_3		= dword	ptr  7
arg_7		= dword	ptr  0Bh

		push	edi
		push	esi
		push	ebx
		sub	esp, 1
		mov	eax, [esp+11h]
		mov	ecx, [eax+58h]
		test	ecx, ecx
		jz	loc_6E430F90
		mov	eax, [ecx+338h]
		mov	edx, [esp+0Eh+arg_7]
		cmp	edx, eax
		ja	short loc_6E430F60
		mov	edi, [esp+0Eh+arg_3]
		lea	esi, [ecx+2B8h]
		cmp	edx, 4
		jnb	short loc_6E430F71

loc_6E430F12:				; CODE XREF: SSL_get_peer_finished+8Fj
					; SSL_get_peer_finished+A8j
		xor	ecx, ecx
		test	dl, 2
		jnz	short loc_6E430F40
		and	edx, 1
		jnz	short loc_6E430F30

loc_6E430F1E:				; CODE XREF: SSL_get_peer_finished+6Ej
		add	esp, 1
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430F30:				; CODE XREF: SSL_get_peer_finished+3Cj
					; SSL_get_peer_finished+70j
		mov	dl, [esi+ecx]
		mov	[esp+0Eh+var_E], dl
		mov	[edi+ecx], dl
		add	esp, 1
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6E430F40:				; CODE XREF: SSL_get_peer_finished+37j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		and	edx, 1
		jz	short loc_6E430F1E
		jmp	short loc_6E430F30
; ---------------------------------------------------------------------------
		align 10h

loc_6E430F60:				; CODE XREF: SSL_get_peer_finished+21j
		mov	edx, eax
		mov	edi, [esp+0Eh+arg_3]
		lea	esi, [ecx+2B8h]
		cmp	edx, 4
		jb	short loc_6E430F12

loc_6E430F71:				; CODE XREF: SSL_get_peer_finished+30j
		test	edi, 1
		jnz	short loc_6E430FC0

loc_6E430F79:				; CODE XREF: SSL_get_peer_finished+F0j
		test	edi, 2
		jnz	short loc_6E430FA0

loc_6E430F81:				; CODE XREF: SSL_get_peer_finished+CFj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E430F12
; ---------------------------------------------------------------------------
		align 10h

loc_6E430F90:				; CODE XREF: SSL_get_peer_finished+Fj
		xor	eax, eax
		add	esp, 1
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E430FA0:				; CODE XREF: SSL_get_peer_finished+9Fj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	short loc_6E430F81
; ---------------------------------------------------------------------------
		jmp	short loc_6E430FC0
; ---------------------------------------------------------------------------
		align 10h

loc_6E430FC0:				; CODE XREF: SSL_get_peer_finished+97j
					; SSL_get_peer_finished+D1j
		mov	bl, [ecx+2B8h]
		mov	[edi], bl
		inc	edi
		lea	esi, [ecx+2B9h]
		dec	edx
		jmp	short loc_6E430F79
SSL_get_peer_finished endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  70. SSL_get_verify_mode

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_verify_mode
SSL_get_verify_mode proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0C8h]
		retn
SSL_get_verify_mode endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 229. SSL_get_verify_depth

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_verify_depth
SSL_get_verify_depth proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+70h]
		mov	[esp+arg_0], eax
		jmp	X509_VERIFY_PARAM_get_depth
SSL_get_verify_depth endp

; Exported entry  69. SSL_get_verify_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_verify_callback
SSL_get_verify_callback	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0CCh]
		retn
SSL_get_verify_callback	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  11. SSL_CTX_get_verify_mode

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_verify_mode
SSL_CTX_get_verify_mode	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0C0h]
		retn
SSL_CTX_get_verify_mode	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 228. SSL_CTX_get_verify_depth

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_verify_depth
SSL_CTX_get_verify_depth proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0F0h]
		mov	[esp+arg_0], eax
		jmp	X509_VERIFY_PARAM_get_depth
SSL_CTX_get_verify_depth endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  10. SSL_CTX_get_verify_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_verify_callback
SSL_CTX_get_verify_callback proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0E8h]
		retn
SSL_CTX_get_verify_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  94. SSL_set_verify

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_verify
SSL_set_verify	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_8]
		mov	ecx, [esp+arg_4]
		mov	[eax+0C8h], ecx
		test	edx, edx
		jz	short locret_6E43106C
		mov	[eax+0CCh], edx

locret_6E43106C:			; CODE XREF: SSL_set_verify+14j
		retn
SSL_set_verify	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 226. SSL_set_verify_depth

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_verify_depth
SSL_set_verify_depth proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+70h]
		mov	[esp+arg_0], eax
		jmp	X509_VERIFY_PARAM_set_depth
SSL_set_verify_depth endp

; Exported entry  88. SSL_set_read_ahead

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_read_ahead
SSL_set_read_ahead proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+60h], edx
		retn
SSL_set_read_ahead endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  64. SSL_get_read_ahead

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_read_ahead
SSL_get_read_ahead proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+60h]
		retn
SSL_get_read_ahead endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  77. SSL_pending

; =============== S U B	R O U T	I N E =======================================


		public SSL_pending
SSL_pending	proc near		; CODE XREF: sub_6E443D00+353p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, [eax+8]
		mov	edx, [edx+50h]
		jmp	edx
SSL_pending	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  61. SSL_get_peer_certificate

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_peer_certificate
SSL_get_peer_certificate proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		test	eax, eax
		jz	short loc_6E431110
		mov	eax, [eax+0C0h]
		test	eax, eax
		jz	short loc_6E431110
		mov	ebx, [eax+9Ch]
		test	ebx, ebx
		jz	short loc_6E4310FB
		mov	[esp+2Ch+var_1C], 34Ah
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 1
		lea	eax, [ebx+10h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_add_lock

loc_6E4310FB:				; CODE XREF: SSL_get_peer_certificate+1Ej
					; SSL_get_peer_certificate+62j
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431110:				; CODE XREF: SSL_get_peer_certificate+Aj
					; SSL_get_peer_certificate+14j
		xor	ebx, ebx
		jmp	short loc_6E4310FB
SSL_get_peer_certificate endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  60. SSL_get_peer_cert_chain

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_peer_cert_chain
SSL_get_peer_cert_chain	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E431140
		mov	eax, [eax+0C0h]
		test	eax, eax
		jz	short loc_6E431140
		mov	eax, [eax+98h]
		test	eax, eax
		jz	short loc_6E431140
		mov	eax, [eax]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431140:				; CODE XREF: SSL_get_peer_cert_chain+6j
					; SSL_get_peer_cert_chain+10j ...
		xor	eax, eax
		retn
SSL_get_peer_cert_chain	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  44. SSL_copy_session_id

; =============== S U B	R O U T	I N E =======================================


		public SSL_copy_session_id
SSL_copy_session_id proc near		; CODE XREF: SSL_dup+49p
					; BIO_ssl_copy_session_id+4Fp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_3C], ebp
		call	SSL_get_session
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_set_session
		mov	eax, [ebx+8]
		cmp	eax, [ebp+8]
		jz	short loc_6E431191
		mov	eax, [eax+0Ch]
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		mov	eax, [ebp+8]
		mov	[ebx+8], eax
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_3C], ebx
		call	eax

loc_6E431191:				; CODE XREF: SSL_copy_session_id+29j
		mov	esi, [ebx+98h]
		mov	eax, [ebp+98h]
		test	eax, eax
		jz	loc_6E4312E0
		mov	[esp+3Ch+var_2C], 377h
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 0Dh
		mov	[esp+3Ch+var_38], 1
		add	eax, 90h
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock
		mov	eax, [ebp+98h]
		mov	[ebx+98h], eax

loc_6E4311DE:				; CODE XREF: SSL_copy_session_id+19Aj
		test	esi, esi
		jz	short loc_6E4311EA
		mov	[esp+3Ch+var_3C], esi
		call	sub_6E436D70

loc_6E4311EA:				; CODE XREF: SSL_copy_session_id+90j
		mov	eax, [ebp+9Ch]
		cmp	eax, 20h
		ja	loc_6E4312A0
		mov	[ebx+9Ch], eax
		lea	edi, [ebx+0A0h]
		lea	esi, [ebp+0A0h]
		cmp	eax, 4
		jnb	short loc_6E431270
		xor	edx, edx
		test	al, 2
		jnz	short loc_6E431250

loc_6E431216:				; CODE XREF: SSL_copy_session_id+13Fj
		test	al, 1
		jnz	short loc_6E431230

loc_6E43121A:				; CODE XREF: SSL_copy_session_id+10Dj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431230:				; CODE XREF: SSL_copy_session_id+C8j
					; SSL_copy_session_id+10Fj
		mov	al, [esi+edx]
		mov	[esp+3Ch+var_1D], al
		mov	[edi+edx], al
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431250:				; CODE XREF: SSL_copy_session_id+C4j
					; SSL_copy_session_id+141j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	short loc_6E43121A
		jmp	short loc_6E431230
; ---------------------------------------------------------------------------
		jmp	short loc_6E431270
; ---------------------------------------------------------------------------
		align 10h

loc_6E431270:				; CODE XREF: SSL_copy_session_id+BEj
					; SSL_copy_session_id+111j
		test	edi, 1
		jnz	short loc_6E4312F0

loc_6E431278:				; CODE XREF: SSL_copy_session_id+1B9j
		test	edi, 2
		jnz	loc_6E431310

loc_6E431284:				; CODE XREF: SSL_copy_session_id+1CFj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E431216
		jmp	short loc_6E431250
; ---------------------------------------------------------------------------
		align 10h

loc_6E4312A0:				; CODE XREF: SSL_copy_session_id+A3j
		mov	[esp+3Ch+var_2C], 1A1h
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 111h
		mov	[esp+3Ch+var_38], 0DAh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4312E0:				; CODE XREF: SSL_copy_session_id+4Fj
		mov	dword ptr [ebx+98h], 0
		jmp	loc_6E4311DE
; ---------------------------------------------------------------------------
		align 10h

loc_6E4312F0:				; CODE XREF: SSL_copy_session_id+126j
		mov	cl, [ebp+0A0h]
		mov	[ebx+0A0h], cl
		lea	edi, [ebx+0A1h]
		lea	esi, [ebp+0A1h]
		dec	eax
		jmp	loc_6E431278
; ---------------------------------------------------------------------------
		align 10h

loc_6E431310:				; CODE XREF: SSL_copy_session_id+12Ej
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E431284
SSL_copy_session_id endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   5. SSL_CTX_check_private_key

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_check_private_key
SSL_CTX_check_private_key proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		test	eax, eax
		jz	short loc_6E431370
		mov	eax, [eax+0B0h]
		test	eax, eax
		jz	short loc_6E431370
		mov	eax, [eax]
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6E431370
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6E4313B0
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edx
		call	X509_check_private_key

loc_6E431360:				; CODE XREF: SSL_CTX_check_private_key+AEj
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431370:				; CODE XREF: SSL_CTX_check_private_key+9j
					; SSL_CTX_check_private_key+13j ...
		mov	[esp+2Ch+var_1C], 386h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0B1h
		mov	[esp+2Ch+var_28], 0A8h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4313B0:				; CODE XREF: SSL_CTX_check_private_key+22j
		mov	[esp+2Ch+var_1C], 38Bh
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0BEh
		mov	[esp+2Ch+var_28], 0A8h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	short loc_6E431360
SSL_CTX_check_private_key endp

; Exported entry  41. SSL_check_private_key

; =============== S U B	R O U T	I N E =======================================


		public SSL_check_private_key
SSL_check_private_key proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		test	eax, eax
		jz	short loc_6E431450
		mov	eax, [eax+98h]
		test	eax, eax
		jz	loc_6E431480
		mov	eax, [eax]
		mov	edx, [eax]
		test	edx, edx
		jz	loc_6E4314C0
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6E431420
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edx
		call	X509_check_private_key

loc_6E431418:				; CODE XREF: SSL_check_private_key+6Ej
					; SSL_check_private_key+9Ej ...
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431420:				; CODE XREF: SSL_check_private_key+2Aj
		mov	[esp+2Ch+var_1C], 3A2h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0BEh
		mov	[esp+2Ch+var_28], 0A3h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	short loc_6E431418
; ---------------------------------------------------------------------------

loc_6E431450:				; CODE XREF: SSL_check_private_key+9j
		mov	[esp+2Ch+var_1C], 396h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 43h
		mov	[esp+2Ch+var_28], 0A3h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	short loc_6E431418
; ---------------------------------------------------------------------------

loc_6E431480:				; CODE XREF: SSL_check_private_key+13j
		mov	[esp+2Ch+var_1C], 39Ah

loc_6E431488:				; CODE XREF: SSL_check_private_key+E8j
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0B1h
		mov	[esp+2Ch+var_28], 0A3h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E431418
; ---------------------------------------------------------------------------
		align 10h

loc_6E4314C0:				; CODE XREF: SSL_check_private_key+1Fj
		mov	[esp+2Ch+var_1C], 39Eh
		jmp	short loc_6E431488
SSL_check_private_key endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  35. SSL_accept

; =============== S U B	R O U T	I N E =======================================


		public SSL_accept
SSL_accept	proc near		; CODE XREF: sub_6E418840+67j
					; sub_6E4281F0+148p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	short loc_6E4314F0
		mov	eax, [ebx+8]
		mov	eax, [eax+10h]
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6E4314F0:				; CODE XREF: SSL_accept+Dj
		mov	dword ptr [ebx+24h], 1
		mov	dword ptr [ebx+30h], 0
		mov	dword ptr [ebx+34h], 6000h
		mov	eax, [ebx+8]
		mov	eax, [eax+10h]
		mov	[ebx+20h], eax
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	short loc_6E431538
		mov	[esp+1Ch+var_1C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+80h]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+80h], 0

loc_6E431538:				; CODE XREF: SSL_accept+46j
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E431562
		mov	[esp+1Ch+var_1C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+8Ch]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+8Ch], 0

loc_6E431562:				; CODE XREF: SSL_accept+70j
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	short loc_6E43157E
		mov	[esp+1Ch+var_1C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+88h], 0

loc_6E43157E:				; CODE XREF: SSL_accept+9Aj
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E43159A
		mov	[esp+1Ch+var_1C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+94h], 0

loc_6E43159A:				; CODE XREF: SSL_accept+B6j
		mov	eax, [ebx+84h]
		test	eax, eax
		jz	short loc_6E4315AC
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy

loc_6E4315AC:				; CODE XREF: SSL_accept+D2j
		mov	dword ptr [ebx+84h], 0
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	short loc_6E4315C8
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy

loc_6E4315C8:				; CODE XREF: SSL_accept+EEj
		mov	dword ptr [ebx+90h], 0
		mov	eax, [ebx+8]
		mov	eax, [eax+10h]
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	eax
SSL_accept	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  43. SSL_connect

; =============== S U B	R O U T	I N E =======================================


		public SSL_connect
SSL_connect	proc near		; CODE XREF: sub_6E4194A0+808p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	short loc_6E431610
		mov	eax, [ebx+8]
		mov	eax, [eax+14h]
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6E431610:				; CODE XREF: SSL_connect+Dj
		mov	dword ptr [ebx+24h], 0
		mov	dword ptr [ebx+30h], 0
		mov	dword ptr [ebx+34h], 5000h
		mov	eax, [ebx+8]
		mov	eax, [eax+14h]
		mov	[ebx+20h], eax
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	short loc_6E431658
		mov	[esp+1Ch+var_1C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+80h]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+80h], 0

loc_6E431658:				; CODE XREF: SSL_connect+46j
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E431682
		mov	[esp+1Ch+var_1C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+8Ch]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+8Ch], 0

loc_6E431682:				; CODE XREF: SSL_connect+70j
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	short loc_6E43169E
		mov	[esp+1Ch+var_1C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+88h], 0

loc_6E43169E:				; CODE XREF: SSL_connect+9Aj
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E4316BA
		mov	[esp+1Ch+var_1C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+94h], 0

loc_6E4316BA:				; CODE XREF: SSL_connect+B6j
		mov	eax, [ebx+84h]
		test	eax, eax
		jz	short loc_6E4316CC
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy

loc_6E4316CC:				; CODE XREF: SSL_connect+D2j
		mov	dword ptr [ebx+84h], 0
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	short loc_6E4316E8
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy

loc_6E4316E8:				; CODE XREF: SSL_connect+EEj
		mov	dword ptr [ebx+90h], 0
		mov	eax, [ebx+8]
		mov	eax, [eax+14h]
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	eax
SSL_connect	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  57. SSL_get_default_timeout

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_default_timeout
SSL_get_default_timeout	proc near	; CODE XREF: sub_6E438670+2B3p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+8]
		mov	eax, [eax+60h]
		jmp	eax
SSL_get_default_timeout	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  78. SSL_read

; =============== S U B	R O U T	I N E =======================================


		public SSL_read
SSL_read	proc near		; CODE XREF: sub_6E41A560+56j
					; sub_6E4438C0+38p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, [esp+2Ch+arg_4]
		mov	ecx, [esp+2Ch+arg_8]
		mov	ebx, [eax+20h]
		test	ebx, ebx
		jz	short loc_6E43176A
		test	byte ptr [eax+30h], 2
		jz	short loc_6E431750
		mov	dword ptr [eax+18h], 1
		xor	eax, eax

loc_6E431746:				; CODE XREF: SSL_read+7Bj
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431750:				; CODE XREF: SSL_read+1Bj
		mov	ebx, [eax+8]
		mov	ebx, [ebx+18h]
		mov	[esp+2Ch+arg_8], ecx
		mov	[esp+2Ch+arg_4], edx
		mov	[esp+2Ch+arg_0], eax
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	eax
; ---------------------------------------------------------------------------

loc_6E43176A:				; CODE XREF: SSL_read+15j
		mov	[esp+2Ch+var_1C], 3C3h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 114h
		mov	[esp+2Ch+var_28], 0DFh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E431746
SSL_read	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  76. SSL_peek

; =============== S U B	R O U T	I N E =======================================


		public SSL_peek
SSL_peek	proc near		; CODE XREF: sub_6E41A630+56j

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, [esp+2Ch+arg_4]
		mov	ecx, [esp+2Ch+arg_8]
		mov	ebx, [eax+20h]
		test	ebx, ebx
		jz	short loc_6E4317EA
		test	byte ptr [eax+30h], 2
		jz	short loc_6E4317D0
		xor	eax, eax

loc_6E4317BF:				; CODE XREF: SSL_peek+7Bj
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4317D0:				; CODE XREF: SSL_peek+1Bj
		mov	ebx, [eax+8]
		mov	ebx, [ebx+1Ch]
		mov	[esp+2Ch+arg_8], ecx
		mov	[esp+2Ch+arg_4], edx
		mov	[esp+2Ch+arg_0], eax
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	eax
; ---------------------------------------------------------------------------

loc_6E4317EA:				; CODE XREF: SSL_peek+15j
		mov	[esp+2Ch+var_1C], 3D1h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 114h
		mov	[esp+2Ch+var_28], 10Eh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E4317BF
SSL_peek	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 108. SSL_write

; =============== S U B	R O U T	I N E =======================================


		public SSL_write
SSL_write	proc near		; CODE XREF: sub_6E41A700+56j
					; sub_6E443A70+38p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, [esp+2Ch+arg_4]
		mov	ecx, [esp+2Ch+arg_8]
		mov	ebx, [eax+20h]
		test	ebx, ebx
		jz	short loc_6E43189D
		test	byte ptr [eax+30h], 1
		jnz	short loc_6E431860
		mov	ebx, [eax+8]
		mov	ebx, [ebx+20h]
		mov	[esp+2Ch+arg_8], ecx
		mov	[esp+2Ch+arg_4], edx
		mov	[esp+2Ch+arg_0], eax
		mov	eax, ebx
		add	esp, 28h
		pop	ebx
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6E431860:				; CODE XREF: SSL_write+1Bj
		mov	dword ptr [eax+18h], 1
		mov	[esp+2Ch+var_1C], 3E4h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0CFh
		mov	[esp+2Ch+var_28], 0D0h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error

loc_6E431893:				; CODE XREF: SSL_write+A9j
		mov	eax, 0FFFFFFFFh
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6E43189D:				; CODE XREF: SSL_write+15j
		mov	[esp+2Ch+var_1C], 3DEh
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 114h
		mov	[esp+2Ch+var_28], 0D0h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	short loc_6E431893
SSL_write	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  96. SSL_shutdown

; =============== S U B	R O U T	I N E =======================================


		public SSL_shutdown
SSL_shutdown	proc near		; CODE XREF: sub_6E443800+19p
					; sub_6E443D00+113p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, [eax+20h]
		test	edx, edx
		jz	short loc_6E4318FF
		test	dword ptr [eax+34h], 3000h
		jz	short loc_6E4318F0
		mov	eax, 1

loc_6E4318EC:				; CODE XREF: SSL_shutdown+60j
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6E4318F0:				; CODE XREF: SSL_shutdown+15j
		mov	edx, [eax+8]
		mov	edx, [edx+24h]
		mov	[esp+2Ch+arg_0], eax
		add	esp, 2Ch
		jmp	edx
; ---------------------------------------------------------------------------

loc_6E4318FF:				; CODE XREF: SSL_shutdown+Cj
		mov	[esp+2Ch+var_1C], 3F4h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 114h
		mov	[esp+2Ch+var_28], 0E0h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E4318EC
SSL_shutdown	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  79. SSL_renegotiate

; =============== S U B	R O U T	I N E =======================================


		public SSL_renegotiate
SSL_renegotiate	proc near		; CODE XREF: sub_6E4438C0+D0p
					; sub_6E4438C0+19Fp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, [eax+190h]
		test	edx, edx
		jnz	short loc_6E431958
		mov	dword ptr [eax+190h], 1

loc_6E431958:				; CODE XREF: SSL_renegotiate+Cj
		mov	dword ptr [eax+28h], 1
		mov	edx, [eax+8]
		mov	edx, [edx+28h]
		mov	[esp+arg_0], eax
		jmp	edx
SSL_renegotiate	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 312. SSL_renegotiate_abbreviated

; =============== S U B	R O U T	I N E =======================================


		public SSL_renegotiate_abbreviated
SSL_renegotiate_abbreviated proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, [eax+190h]
		test	edx, edx
		jnz	short loc_6E431988
		mov	dword ptr [eax+190h], 1

loc_6E431988:				; CODE XREF: SSL_renegotiate_abbreviated+Cj
		mov	dword ptr [eax+28h], 0
		mov	edx, [eax+8]
		mov	edx, [edx+28h]
		mov	[esp+arg_0], eax
		jmp	edx
SSL_renegotiate_abbreviated endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 265. SSL_renegotiate_pending

; =============== S U B	R O U T	I N E =======================================


		public SSL_renegotiate_pending
SSL_renegotiate_pending	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+190h]
		test	eax, eax
		setnz	al
		and	eax, 0FFh
		retn
SSL_renegotiate_pending	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  45. SSL_ctrl

; =============== S U B	R O U T	I N E =======================================


		public SSL_ctrl
SSL_ctrl	proc near		; CODE XREF: sub_6E401670+177p
					; sub_6E401670+49Ep ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	ebx
		mov	ecx, [esp+8+arg_0]
		mov	ebx, [esp+8+arg_4]
		mov	esi, [esp+8+arg_8]
		mov	eax, [esp+8+arg_C]
		lea	edx, [ebx-10h]	; switch 63 cases
		cmp	edx, 3Eh
		ja	loc_6E431AE0	; jumptable 6E4319DE default case
		jmp	ds:off_6E44D23C[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6E4319F0:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		mov	eax, esi	; jumptable 6E4319DE case 78
		not	eax
		and	eax, [ecx+104h]
		mov	[ecx+104h], eax

loc_6E431A00:				; CODE XREF: SSL_ctrl+58j SSL_ctrl+6Ej ...
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431A10:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		mov	[ecx+68h], eax	; jumptable 6E4319DE case 16
		mov	eax, 1
		jmp	short loc_6E431A00
; ---------------------------------------------------------------------------
		align 10h

loc_6E431A20:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		mov	eax, [ecx+100h]	; jumptable 6E4319DE case 32
		or	eax, esi
		mov	[ecx+100h], eax
		jmp	short loc_6E431A00
; ---------------------------------------------------------------------------

loc_6E431A30:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		mov	eax, [ecx+104h]	; jumptable 6E4319DE case 33
		or	eax, esi
		mov	[ecx+104h], eax
		jmp	short loc_6E431A00
; ---------------------------------------------------------------------------

loc_6E431A40:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		mov	eax, [ecx+60h]	; jumptable 6E4319DE case 40
		jmp	short loc_6E431A00
; ---------------------------------------------------------------------------
		align 10h

loc_6E431A50:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		mov	eax, [ecx+60h]	; jumptable 6E4319DE case 41
		mov	[ecx+60h], esi
		jmp	short loc_6E431A00
; ---------------------------------------------------------------------------
		align 10h

loc_6E431A60:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		mov	eax, [ecx+108h]	; jumptable 6E4319DE case 50
		jmp	short loc_6E431A00
; ---------------------------------------------------------------------------
		align 10h

loc_6E431A70:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		mov	eax, [ecx+108h]	; jumptable 6E4319DE case 51
		mov	[ecx+108h], esi
		jmp	short loc_6E431A00
; ---------------------------------------------------------------------------
		align 10h

loc_6E431A80:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		lea	eax, [esi-200h]	; jumptable 6E4319DE case 52
		cmp	eax, 3E00h
		jbe	short loc_6E431B00

loc_6E431A8D:				; CODE XREF: SSL_ctrl+E5j
		xor	eax, eax
		jmp	loc_6E431A00
; ---------------------------------------------------------------------------
		align 10h

loc_6E431AA0:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		mov	eax, [ecx+58h]	; jumptable 6E4319DE case 76
		test	eax, eax
		jz	short loc_6E431A8D
		mov	eax, [eax+418h]
		jmp	loc_6E431A00
; ---------------------------------------------------------------------------
		align 10h

loc_6E431AC0:				; CODE XREF: SSL_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D23Co
		mov	eax, esi	; jumptable 6E4319DE case 77
		not	eax
		and	eax, [ecx+100h]
		mov	[ecx+100h], eax
		jmp	loc_6E431A00
; ---------------------------------------------------------------------------
		align 10h

loc_6E431AE0:				; CODE XREF: SSL_ctrl+18j SSL_ctrl+1Ej
					; DATA XREF: ...
		mov	edx, [ecx+8]	; jumptable 6E4319DE default case
		mov	edx, [edx+40h]
		mov	[esp+8+arg_C], eax
		mov	[esp+8+arg_8], esi
		mov	[esp+8+arg_4], ebx
		mov	[esp+8+arg_0], ecx
		pop	ebx
		pop	esi
		jmp	edx
; ---------------------------------------------------------------------------
		align 10h

loc_6E431B00:				; CODE XREF: SSL_ctrl+CBj
		mov	[ecx+114h], esi
		mov	eax, 1
		jmp	loc_6E431A00
SSL_ctrl	endp

; Exported entry 244. SSL_callback_ctrl

; =============== S U B	R O U T	I N E =======================================


		public SSL_callback_ctrl
SSL_callback_ctrl proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	edx, [esp+4+arg_0]
		mov	eax, [esp+4+arg_4]
		mov	ecx, [esp+4+arg_8]
		cmp	eax, 0Fh
		jnz	short loc_6E431B30
		mov	[edx+64h], ecx
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431B30:				; CODE XREF: SSL_callback_ctrl+10j
		mov	ebx, [edx+8]
		mov	ebx, [ebx+6Ch]
		mov	eax, ebx
		pop	ebx
		jmp	eax
SSL_callback_ctrl endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 245. SSL_CTX_sessions

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_sessions
SSL_CTX_sessions proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+10h]
		retn
SSL_CTX_sessions endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   6. SSL_CTX_ctrl

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_ctrl
SSL_CTX_ctrl	proc near		; CODE XREF: SSL_CTX_add_session+168p
					; SSL_CTX_add_session+19Bp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	ebx
		mov	ecx, [esp+8+arg_0]
		mov	ebx, [esp+8+arg_4]
		mov	esi, [esp+8+arg_8]
		mov	eax, [esp+8+arg_C]
		lea	edx, [ebx-10h]	; switch 63 cases
		cmp	edx, 3Eh
		ja	loc_6E431D80	; jumptable 6E431B6E default case
		jmp	ds:off_6E44D338[edx*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6E431B80:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, esi	; jumptable 6E431B6E case 78
		not	eax
		and	eax, [ecx+0A8h]
		mov	[ecx+0A8h], eax

loc_6E431B90:				; CODE XREF: SSL_CTX_ctrl+60j
					; SSL_CTX_ctrl+8Cj ...
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431BA0:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, esi	; jumptable 6E431B6E case 77
		not	eax
		and	eax, [ecx+0A4h]
		mov	[ecx+0A4h], eax
		jmp	short loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431BC0:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		lea	eax, [esi-200h]	; jumptable 6E431B6E case 52
		cmp	eax, 3E00h
		ja	loc_6E431DA0
		mov	[ecx+0F8h], esi
		mov	eax, 1
		jmp	short loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431BE0:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+0ACh]	; jumptable 6E431B6E case 51
		mov	[ecx+0ACh], esi
		jmp	short loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431BF0:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+20h]	; jumptable 6E431B6E case 44
		mov	[ecx+20h], esi
		jmp	short loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431C00:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+14h]	; jumptable 6E431B6E case 43
		jmp	short loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431C10:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+14h]	; jumptable 6E431B6E case 42
		mov	[ecx+14h], esi
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431C20:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+0B4h]	; jumptable 6E431B6E case 41
		mov	[ecx+0B4h], esi
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		jmp	short loc_6E431C40 ; jumptable 6E431B6E	case 50
; ---------------------------------------------------------------------------
		align 10h

loc_6E431C40:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; SSL_CTX_ctrl+E1j
					; DATA XREF: ...
		mov	eax, [ecx+0ACh]	; jumptable 6E431B6E case 50
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431C50:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+20h]	; jumptable 6E431B6E case 45
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431C60:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+0B4h]	; jumptable 6E431B6E case 40
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431C70:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+0A8h]	; jumptable 6E431B6E case 33
		or	eax, esi
		mov	[ecx+0A8h], eax
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431C90:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+0A4h]	; jumptable 6E431B6E case 32
		or	eax, esi
		mov	[ecx+0A4h], eax
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431CB0:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+54h]	; jumptable 6E431B6E case 31
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431CC0:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+50h]	; jumptable 6E431B6E case 30
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431CD0:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+4Ch]	; jumptable 6E431B6E case 29
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431CE0:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+5Ch]	; jumptable 6E431B6E case 28
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431CF0:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+58h]	; jumptable 6E431B6E case 27
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431D00:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+44h]	; jumptable 6E431B6E case 26
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431D10:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+48h]	; jumptable 6E431B6E case 25
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431D20:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+40h]	; jumptable 6E431B6E case 24
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431D30:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+38h]	; jumptable 6E431B6E case 23
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431D40:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+3Ch]	; jumptable 6E431B6E case 22
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431D50:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+34h]	; jumptable 6E431B6E case 21
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------
		align 10h

loc_6E431D60:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	eax, [ecx+10h]	; jumptable 6E431B6E case 20
		mov	[esp+8+arg_0], eax
		pop	ebx
		pop	esi
		jmp	lh_num_items
; ---------------------------------------------------------------------------
		align 10h

loc_6E431D70:				; CODE XREF: SSL_CTX_ctrl+1Ej
					; DATA XREF: .rdata:off_6E44D338o
		mov	[ecx+0BCh], eax	; jumptable 6E431B6E case 16
		mov	eax, 1
		jmp	loc_6E431B90
; ---------------------------------------------------------------------------

loc_6E431D80:				; CODE XREF: SSL_CTX_ctrl+18j
					; SSL_CTX_ctrl+1Ej
					; DATA XREF: ...
		mov	edx, [ecx]	; jumptable 6E431B6E default case
		mov	edx, [edx+44h]
		mov	[esp+8+arg_C], eax
		mov	[esp+8+arg_8], esi
		mov	[esp+8+arg_4], ebx
		mov	[esp+8+arg_0], ecx
		pop	ebx
		pop	esi
		jmp	edx
; ---------------------------------------------------------------------------
		align 10h

loc_6E431DA0:				; CODE XREF: SSL_CTX_ctrl+7Bj
		xor	eax, eax
		jmp	loc_6E431B90
SSL_CTX_ctrl	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 243. SSL_CTX_callback_ctrl

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_callback_ctrl
SSL_CTX_callback_ctrl proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		mov	edx, [esp+4+arg_0]
		mov	eax, [esp+4+arg_4]
		mov	ecx, [esp+4+arg_8]
		cmp	eax, 0Fh
		jnz	short loc_6E431DD0
		mov	[edx+0B8h], ecx
		mov	eax, 1
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431DD0:				; CODE XREF: SSL_CTX_callback_ctrl+10j
		mov	ebx, [edx]
		mov	ebx, [ebx+70h]
		mov	eax, ebx
		pop	ebx
		jmp	eax
SSL_CTX_callback_ctrl endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		mov	eax, [eax+8]
		mov	edx, [esp+8]
		sub	eax, [edx+8]
		cmp	eax, 0
		jz	short loc_6E431E00
		setnle	al
		and	eax, 0FFh
		lea	eax, [eax+eax-1]
		retn
; ---------------------------------------------------------------------------

loc_6E431E00:				; CODE XREF: .text:6E431DF1j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431E10:				; DATA XREF: sub_6E43BC80+8C1o
		mov	eax, [esp+4]
		mov	eax, [eax]
		mov	edx, [esp+8]
		mov	edx, [edx]
		mov	eax, [eax+8]
		sub	eax, [edx+8]
		cmp	eax, 0
		jz	short loc_6E431E40
		setnle	al
		and	eax, 0FFh
		lea	eax, [eax+eax-1]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431E40:				; CODE XREF: .text:6E431E25j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  55. SSL_get_ciphers

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_ciphers
SSL_get_ciphers	proc near		; CODE XREF: sub_6E401670+8F1p
					; sub_6E401670+D1Cp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		test	edx, edx
		jz	short loc_6E431E70
		mov	eax, [edx+74h]
		test	eax, eax
		jz	short loc_6E431E60

locret_6E431E5F:			; CODE XREF: SSL_get_ciphers+18j
		retn
; ---------------------------------------------------------------------------

loc_6E431E60:				; CODE XREF: SSL_get_ciphers+Dj
		mov	edx, [edx+0E4h]
		test	edx, edx
		jz	short locret_6E431E5F
		mov	eax, [edx+4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431E70:				; CODE XREF: SSL_get_ciphers+6j
		xor	eax, eax
		retn
SSL_get_ciphers	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E431E80	proc near		; CODE XREF: sub_6E407B10+1FEp

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		test	edx, edx
		jz	short loc_6E431EA0
		mov	eax, [edx+78h]
		test	eax, eax
		jz	short loc_6E431E90

locret_6E431E8F:			; CODE XREF: sub_6E431E80+18j
		retn
; ---------------------------------------------------------------------------

loc_6E431E90:				; CODE XREF: sub_6E431E80+Dj
		mov	edx, [edx+0E4h]
		test	edx, edx
		jz	short locret_6E431E8F
		mov	eax, [edx+8]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431EA0:				; CODE XREF: sub_6E431E80+6j
		xor	eax, eax
		retn
sub_6E431E80	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  52. SSL_get_cipher_list

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_cipher_list
SSL_get_cipher_list proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	eax, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_6E431F10
		mov	ebx, [eax+74h]
		test	ebx, ebx
		jz	short loc_6E431EF0

loc_6E431EC8:				; CODE XREF: SSL_get_cipher_list+4Fj
		mov	[esp+1Ch+var_1C], ebx
		call	sk_num
		cmp	eax, esi
		jle	short loc_6E431F10
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], ebx
		call	sk_value
		test	eax, eax
		jz	short loc_6E431F10
		mov	eax, [eax+4]
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431EF0:				; CODE XREF: SSL_get_cipher_list+16j
		mov	eax, [eax+0E4h]
		test	eax, eax
		jz	short loc_6E431F10
		mov	ebx, [eax+4]
		test	ebx, ebx
		jnz	short loc_6E431EC8
		jmp	short loc_6E431F10
; ---------------------------------------------------------------------------
		align 10h

loc_6E431F10:				; CODE XREF: SSL_get_cipher_list+Fj
					; SSL_get_cipher_list+22j ...
		xor	eax, eax
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
SSL_get_cipher_list endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  15. SSL_CTX_set_cipher_list

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_cipher_list
SSL_CTX_set_cipher_list	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, [eax]
		mov	ecx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], ecx
		lea	ecx, [eax+8]
		mov	[esp+2Ch+var_24], ecx
		add	eax, 4
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edx
		call	sub_6E43BC80
		test	eax, eax
		jz	short loc_6E431FA0
		mov	[esp+2Ch+var_2C], eax
		call	sk_num
		test	eax, eax
		jz	short loc_6E431F60
		mov	eax, 1
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------

loc_6E431F60:				; CODE XREF: SSL_CTX_set_cipher_list+35j
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_1C], 50Eh
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0B9h
		mov	[esp+2Ch+var_28], 10Dh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+var_10]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E431FA0:				; CODE XREF: SSL_CTX_set_cipher_list+29j
		xor	eax, eax
		add	esp, 2Ch
		retn
SSL_CTX_set_cipher_list	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  84. SSL_set_cipher_list

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_cipher_list
SSL_set_cipher_list proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, [eax+0E4h]
		mov	edx, [edx]
		mov	ecx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], ecx
		lea	ecx, [eax+78h]
		mov	[esp+2Ch+var_24], ecx
		add	eax, 74h
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edx
		call	sub_6E43BC80
		test	eax, eax
		jz	short loc_6E432040
		mov	[esp+2Ch+var_2C], eax
		call	sk_num
		test	eax, eax
		jz	short loc_6E432000
		mov	eax, 1
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E432000:				; CODE XREF: SSL_set_cipher_list+3Bj
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_1C], 51Fh
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0B9h
		mov	[esp+2Ch+var_28], 10Fh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+var_10]
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E432040:				; CODE XREF: SSL_set_cipher_list+2Fj
		xor	eax, eax
		add	esp, 2Ch
		retn
SSL_set_cipher_list endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  65. SSL_get_shared_ciphers

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_shared_ciphers
SSL_get_shared_ciphers proc near

Str		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0C0h]
		test	eax, eax
		jz	loc_6E4321B0
		mov	eax, [eax+0BCh]
		mov	[esp+2Ch+var_24], eax
		test	eax, eax
		jz	loc_6E4321B0
		cmp	[esp+2Ch+arg_8], 1
		jle	loc_6E4321B0
		mov	[esp+2Ch+Str], eax
		call	sk_num
		test	eax, eax
		jz	loc_6E4321B0
		mov	ebp, [esp+2Ch+arg_4]
		xor	ebx, ebx
		jmp	short loc_6E4320D2
; ---------------------------------------------------------------------------
		align 10h

loc_6E4320A0:				; CODE XREF: SSL_get_shared_ciphers+C4j
					; SSL_get_shared_ciphers+DDj
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_6E4320B2
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_6E4320B2:				; CODE XREF: SSL_get_shared_ciphers+55j
		and	edx, 1
		jz	short loc_6E4320C1
		mov	dl, [esi+ecx]
		mov	byte ptr [esp+2Ch+var_20], dl
		mov	[edi+ecx], dl

loc_6E4320C1:				; CODE XREF: SSL_get_shared_ciphers+65j
		lea	edx, [ebp+eax+0]
		lea	ebp, [edx+1]
		mov	byte ptr [edx],	3Ah
		not	eax
		add	[esp+2Ch+arg_8], eax
		inc	ebx

loc_6E4320D2:				; CODE XREF: SSL_get_shared_ciphers+4Cj
		mov	eax, [esp+2Ch+var_24]
		mov	[esp+2Ch+Str], eax
		call	sk_num
		cmp	ebx, eax
		jge	short loc_6E432140
		mov	[esp+2Ch+var_28], ebx
		mov	eax, [esp+2Ch+var_24]
		mov	[esp+2Ch+Str], eax
		call	sk_value
		mov	ecx, [eax+4]
		mov	[esp+2Ch+Str], ecx ; Str
		mov	[esp+2Ch+var_20], ecx
		call	strlen
		cmp	[esp+2Ch+arg_8], eax
		mov	ecx, [esp+2Ch+var_20]
		jle	short loc_6E432150
		mov	edx, eax
		mov	edi, ebp
		mov	esi, ecx
		cmp	eax, 4
		jb	short loc_6E4320A0
		test	ebp, 1
		jnz	short loc_6E432170
		test	edi, 2
		jnz	short loc_6E432190

loc_6E432126:				; CODE XREF: SSL_get_shared_ciphers+136j
					; SSL_get_shared_ciphers+14Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E4320A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E432140:				; CODE XREF: SSL_get_shared_ciphers+90j
		mov	byte ptr [ebp-1], 0
		mov	eax, [esp+2Ch+arg_4]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E432150:				; CODE XREF: SSL_get_shared_ciphers+B9j
		cmp	ebp, [esp+2Ch+arg_4]
		jz	short loc_6E432157
		dec	ebp

loc_6E432157:				; CODE XREF: SSL_get_shared_ciphers+104j
		mov	byte ptr [ebp+0], 0
		mov	eax, [esp+2Ch+arg_4]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E432170:				; CODE XREF: SSL_get_shared_ciphers+CCj
		mov	dl, [ecx]
		mov	byte ptr [esp+2Ch+var_20], dl
		mov	[ebp+0], dl
		lea	edi, [ebp+1]
		inc	esi
		lea	edx, [eax-1]
		test	edi, 2
		jz	short loc_6E432126
		nop
		lea	esi, [esi+0]

loc_6E432190:				; CODE XREF: SSL_get_shared_ciphers+D4j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	short loc_6E432126
; ---------------------------------------------------------------------------
		jmp	short loc_6E4321B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4321B0:				; CODE XREF: SSL_get_shared_ciphers+13j
					; SSL_get_shared_ciphers+25j ...
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
SSL_get_shared_ciphers endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4321C0	proc near		; CODE XREF: sub_6E407680+10Cp
					; sub_6E4194A0+53Ap ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		test	esi, esi
		jz	loc_6E432310
		mov	ebx, [esp+2Ch+arg_C]
		test	ebx, ebx
		jz	loc_6E432300

loc_6E4321E3:				; CODE XREF: sub_6E4321C0+14Aj
		mov	ebp, [esp+2Ch+arg_8]
		xor	ebx, ebx
		mov	[esp+2Ch+var_2C], esi
		call	sk_num
		cmp	ebx, eax
		jge	short loc_6E43222F
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E432200:				; CODE XREF: sub_6E4321C0+6Dj
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	sk_value
		test	byte ptr [eax+1Ch], 4
		jz	short loc_6E432270
		mov	edx, [edi+110h]
		mov	ecx, edx
		sar	ecx, 8
		cmp	ecx, 3
		jz	short loc_6E432260

loc_6E432222:				; CODE XREF: sub_6E4321C0+A6j
					; sub_6E4321C0+C6j
		inc	ebx

loc_6E432223:				; CODE XREF: sub_6E4321C0+E1j
					; sub_6E4321C0+FAj
		mov	[esp+2Ch+var_2C], esi
		call	sk_num
		cmp	ebx, eax
		jl	short loc_6E432200

loc_6E43222F:				; CODE XREF: sub_6E4321C0+33j
		cmp	ebp, [esp+2Ch+arg_8]
		jz	short loc_6E432250
		mov	eax, [edi+190h]
		test	eax, eax
		jz	loc_6E4322C0
		test	byte ptr [edi+104h], 80h
		jnz	loc_6E4322DE

loc_6E432250:				; CODE XREF: sub_6E4321C0+73j
					; sub_6E4321C0+118j ...
		mov	eax, ebp
		sub	eax, [esp+2Ch+arg_8]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E432260:				; CODE XREF: sub_6E4321C0+60j
		cmp	edx, 302h
		jle	short loc_6E432222
		nop
		lea	esi, [esi+0]

loc_6E432270:				; CODE XREF: sub_6E4321C0+50j
		mov	edx, [eax+0Ch]
		test	dh, 1
		jnz	short loc_6E43227E
		test	byte ptr [eax+10h], 80h
		jz	short loc_6E432288

loc_6E43227E:				; CODE XREF: sub_6E4321C0+B6j
		mov	ecx, [edi+0DCh]
		test	ecx, ecx
		jz	short loc_6E432222

loc_6E432288:				; CODE XREF: sub_6E4321C0+BCj
		and	dh, 4
		jnz	short loc_6E4322B0
		test	byte ptr [eax+11h], 4
		jnz	short loc_6E4322B0

loc_6E432293:				; CODE XREF: sub_6E4321C0+F7j
		mov	[esp+2Ch+var_28], ebp
		mov	[esp+2Ch+var_2C], eax
		call	[esp+2Ch+arg_C]
		add	ebp, eax
		inc	ebx
		jmp	short loc_6E432223
; ---------------------------------------------------------------------------
		align 10h

loc_6E4322B0:				; CODE XREF: sub_6E4321C0+CBj
					; sub_6E4321C0+D1j
		test	byte ptr [edi+1D1h], 4
		jnz	short loc_6E432293
		inc	ebx
		jmp	loc_6E432223
; ---------------------------------------------------------------------------
		align 10h

loc_6E4322C0:				; CODE XREF: sub_6E4321C0+7Dj
		mov	[esp+2Ch+var_28], ebp
		mov	[esp+2Ch+var_2C], offset dword_6E4499A0
		call	[esp+2Ch+arg_C]
		add	ebp, eax
		test	byte ptr [edi+104h], 80h
		jz	loc_6E432250

loc_6E4322DE:				; CODE XREF: sub_6E4321C0+8Aj
		mov	[esp+2Ch+var_28], ebp
		mov	[esp+2Ch+var_2C], offset dword_6E449960
		call	[esp+2Ch+arg_C]
		add	ebp, eax
		jmp	loc_6E432250
; ---------------------------------------------------------------------------
		align 10h

loc_6E432300:				; CODE XREF: sub_6E4321C0+1Dj
		mov	eax, [edi+8]
		mov	eax, [eax+4Ch]
		mov	[esp+2Ch+arg_C], eax
		jmp	loc_6E4321E3
; ---------------------------------------------------------------------------
		align 10h

loc_6E432310:				; CODE XREF: sub_6E4321C0+11j
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6E4321C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E432320	proc near		; CODE XREF: sub_6E401670+4F3p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		mov	eax, [edi+58h]
		test	eax, eax
		jz	short loc_6E432340
		mov	dword ptr [eax+418h], 0

loc_6E432340:				; CODE XREF: sub_6E432320+14j
		mov	eax, [edi+8]
		mov	eax, [eax+4Ch]
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], 0
		call	eax
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E4325D0
		mov	eax, [esp+3Ch+arg_8]
		cdq
		idiv	ebp
		test	edx, edx
		jnz	loc_6E4325D0
		mov	eax, [esp+3Ch+arg_C]
		test	eax, eax
		jz	loc_6E432560
		mov	eax, [esp+3Ch+arg_C]
		mov	eax, [eax]
		mov	[esp+3Ch+var_20], eax
		test	eax, eax
		jz	loc_6E432560
		mov	[esp+3Ch+var_3C], eax
		call	sk_zero

loc_6E432396:				; CODE XREF: sub_6E432320+24Bj
		mov	esi, [esp+3Ch+arg_8]
		test	esi, esi
		jle	loc_6E4325B0
		lea	esi, [ebx+ebp]
		mov	[esp+3Ch+var_24], ebp
		mov	[esp+3Ch+arg_0], edi
		mov	edi, esi
		mov	esi, [esp+3Ch+arg_0]
		jmp	short loc_6E43241E
; ---------------------------------------------------------------------------
		align 10h

loc_6E4323C0:				; CODE XREF: sub_6E432320+108j
					; sub_6E432320+10Fj
		cmp	byte ptr [edi-2], 0
		jnz	short loc_6E4323D0
		cmp	byte ptr [edi-1], 0FFh
		jz	loc_6E4324D0

loc_6E4323D0:				; CODE XREF: sub_6E432320+A4j
					; sub_6E432320+103j
		cmp	ebp, 3
		jz	loc_6E4324C0

loc_6E4323D9:				; CODE XREF: sub_6E432320+1A3j
		cmp	byte ptr [edi-2], 56h
		jz	short loc_6E432440

loc_6E4323DF:				; CODE XREF: sub_6E432320+10Dj
					; sub_6E432320+124j ...
		mov	eax, [esi+8]
		mov	eax, [eax+48h]
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		test	eax, eax
		jz	short loc_6E432406
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	sk_push
		test	eax, eax
		jz	loc_6E432610

loc_6E432406:				; CODE XREF: sub_6E432320+CCj
					; sub_6E432320+14Bj ...
		add	[esp+3Ch+var_24], ebp
		add	edi, ebp
		add	ebx, ebp
		mov	eax, [esp+3Ch+var_24]
		sub	eax, ebp
		cmp	[esp+3Ch+arg_8], eax
		jle	loc_6E4325B0

loc_6E43241E:				; CODE XREF: sub_6E432320+93j
		mov	eax, [esi+58h]
		test	eax, eax
		jz	short loc_6E4323D0
		cmp	ebp, 3
		jnz	short loc_6E4323C0
		cmp	byte ptr [ebx],	0
		jnz	short loc_6E4323DF
		jmp	short loc_6E4323C0
; ---------------------------------------------------------------------------
		jmp	short loc_6E432440
; ---------------------------------------------------------------------------
		align 10h

loc_6E432440:				; CODE XREF: sub_6E432320+BDj
					; sub_6E432320+111j
		cmp	byte ptr [edi-1], 0
		jnz	short loc_6E4323DF
		mov	eax, [esi+8]
		mov	eax, [eax+40h]
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 77h
		mov	[esp+3Ch+var_3C], esi
		call	eax
		test	eax, eax
		jnz	short loc_6E432406
		mov	[esp+3Ch+var_2C], 5CDh
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 175h
		mov	[esp+3Ch+var_38], 0A1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	ecx, [esi+58h]
		test	ecx, ecx
		jz	loc_6E432534
		mov	[esp+3Ch+var_34], 56h
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], esi
		call	sub_6E4151B0
		jmp	short loc_6E432534
; ---------------------------------------------------------------------------
		align 10h

loc_6E4324C0:				; CODE XREF: sub_6E432320+B3j
		cmp	byte ptr [ebx],	0
		jz	loc_6E4323D9
		jmp	loc_6E4323DF
; ---------------------------------------------------------------------------
		align 10h

loc_6E4324D0:				; CODE XREF: sub_6E432320+AAj
		mov	edx, [esi+190h]
		test	edx, edx
		jnz	short loc_6E4324F0
		mov	dword ptr [eax+418h], 1
		jmp	loc_6E432406
; ---------------------------------------------------------------------------
		align 10h

loc_6E4324F0:				; CODE XREF: sub_6E432320+1B8j
		mov	[esp+3Ch+var_2C], 5B6h
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 159h
		mov	[esp+3Ch+var_38], 0A1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	[esp+3Ch+var_34], 28h
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], esi
		call	sub_6E4151B0

loc_6E432534:				; CODE XREF: sub_6E432320+17Ej
					; sub_6E432320+19Cj ...
		mov	edx, [esp+3Ch+arg_C]
		test	edx, edx
		jz	loc_6E432641
		mov	eax, [esp+3Ch+arg_C]
		mov	eax, [eax]
		test	eax, eax
		jz	loc_6E432641
		xor	eax, eax

loc_6E432550:				; CODE XREF: sub_6E432320+27Fj
					; sub_6E432320+32Fj ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E432560:				; CODE XREF: sub_6E432320+56j
					; sub_6E432320+68j
		call	sk_new_null
		mov	[esp+3Ch+var_20], eax
		test	eax, eax
		jnz	loc_6E432396
		mov	[esp+3Ch+var_2C], 5A6h
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0A1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	short loc_6E432550
; ---------------------------------------------------------------------------
		jmp	short loc_6E4325B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4325B0:				; CODE XREF: sub_6E432320+7Cj
					; sub_6E432320+F8j ...
		mov	ecx, [esp+3Ch+arg_C]
		test	ecx, ecx
		jz	loc_6E432654
		mov	ecx, [esp+3Ch+arg_C]
		mov	eax, [esp+3Ch+var_20]
		mov	[ecx], eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4325D0:				; CODE XREF: sub_6E432320+3Bj
					; sub_6E432320+4Aj
		mov	[esp+3Ch+var_2C], 5A0h
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 97h
		mov	[esp+3Ch+var_38], 0A1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E432610:				; CODE XREF: sub_6E432320+E0j
		mov	[esp+3Ch+var_2C], 5DBh
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0A1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		jmp	loc_6E432534
; ---------------------------------------------------------------------------

loc_6E432641:				; CODE XREF: sub_6E432320+21Aj
					; sub_6E432320+228j
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	sk_free
		xor	eax, eax
		jmp	loc_6E432550
; ---------------------------------------------------------------------------

loc_6E432654:				; CODE XREF: sub_6E432320+296j
		mov	eax, [esp+3Ch+var_20]
		jmp	loc_6E432550
sub_6E432320	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 291. SSL_get_servername

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_servername
SSL_get_servername proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		test	edx, edx
		jnz	short loc_6E4326B0
		mov	edx, [eax+0C0h]
		mov	eax, [eax+120h]
		test	edx, edx
		jz	short locret_6E4326A0
		test	eax, eax
		jz	short loc_6E432690
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E432690
; ---------------------------------------------------------------------------
		align 10h

loc_6E432690:				; CODE XREF: SSL_get_servername+1Ej
					; SSL_get_servername+21j
		mov	eax, [edx+0D0h]
		retn
; ---------------------------------------------------------------------------
		align 10h

locret_6E4326A0:			; CODE XREF: SSL_get_servername+1Aj
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E4326B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4326B0:				; CODE XREF: SSL_get_servername+Aj
					; SSL_get_servername+41j
		xor	eax, eax
		retn
SSL_get_servername endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 292. SSL_get_servername_type

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_servername_type
SSL_get_servername_type	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, [eax+0C0h]
		test	edx, edx
		jz	short loc_6E4326EA
		mov	ecx, [eax+120h]
		test	ecx, ecx
		jz	short loc_6E4326E0

loc_6E4326D8:				; CODE XREF: SSL_get_servername_type+28j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4326E0:				; CODE XREF: SSL_get_servername_type+16j
		mov	eax, [edx+0D0h]
		test	eax, eax
		jnz	short loc_6E4326D8

loc_6E4326EA:				; CODE XREF: SSL_get_servername_type+Cj
		mov	eax, 0FFFFFFFFh
		retn
SSL_get_servername_type	endp

; Exported entry 359. SSL_select_next_proto

; =============== S U B	R O U T	I N E =======================================


		public SSL_select_next_proto
SSL_select_next_proto proc near

Buf1		= dword	ptr -3Ch
Buf2		= dword	ptr -38h
Size		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_10]
		mov	edi, [esp+3Ch+arg_14]
		mov	eax, [esp+3Ch+arg_C]
		test	eax, eax
		jz	loc_6E4327C6
		mov	[esp+3Ch+var_24], 0

loc_6E432713:				; CODE XREF: SSL_select_next_proto+D0j
		test	edi, edi
		jz	loc_6E4327D3
		mov	edx, [esp+3Ch+var_24]
		mov	eax, [esp+3Ch+arg_8]
		add	eax, edx
		mov	[esp+3Ch+var_20], eax
		mov	cl, [eax]
		mov	esi, ecx
		and	esi, 0FFh
		mov	[esp+3Ch+var_30], 0
		mov	ebx, [esp+3Ch+arg_8]
		lea	eax, [ebx+edx+1]
		mov	[esp+3Ch+var_28], eax
		xor	ebx, ebx
		mov	byte ptr [esp+3Ch+var_30], cl
		jmp	short loc_6E43275C
; ---------------------------------------------------------------------------
		align 10h

loc_6E432750:				; CODE XREF: SSL_select_next_proto+74j
					; SSL_select_next_proto+98j
		xor	edx, edx
		mov	dl, cl
		lea	ebx, [ebx+edx+1]
		cmp	edi, ebx
		jbe	short loc_6E4327B0

loc_6E43275C:				; CODE XREF: SSL_select_next_proto+5Dj
		mov	cl, [ebp+ebx+0]
		cmp	cl, byte ptr [esp+3Ch+var_30]
		jnz	short loc_6E432750
		mov	[esp+3Ch+var_2C], ecx
		mov	[esp+3Ch+Size],	esi ; Size
		lea	eax, [ebp+ebx+1]
		mov	[esp+3Ch+Buf2],	eax ; Buf2
		mov	eax, [esp+3Ch+var_28]
		mov	[esp+3Ch+Buf1],	eax ; Buf1
		call	memcmp
		test	eax, eax
		mov	ecx, [esp+3Ch+var_2C]
		jnz	short loc_6E432750
		mov	eax, 1
		mov	esi, [esp+3Ch+var_20]

loc_6E432793:				; CODE XREF: SSL_select_next_proto+E1j
		lea	ecx, [esi+1]
		mov	edx, [esp+3Ch+arg_0]
		mov	[edx], ecx
		mov	cl, [esi]
		mov	edx, [esp+3Ch+arg_4]
		mov	[edx], cl
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4327B0:				; CODE XREF: SSL_select_next_proto+6Aj
		mov	eax, [esp+3Ch+var_24]

loc_6E4327B4:				; CODE XREF: SSL_select_next_proto+F7j
		lea	eax, [eax+esi+1]
		mov	[esp+3Ch+var_24], eax
		cmp	[esp+3Ch+arg_C], eax
		ja	loc_6E432713

loc_6E4327C6:				; CODE XREF: SSL_select_next_proto+15j
		mov	[esp+3Ch+var_20], ebp
		mov	eax, 2
		mov	esi, ebp
		jmp	short loc_6E432793
; ---------------------------------------------------------------------------

loc_6E4327D3:				; CODE XREF: SSL_select_next_proto+25j
		mov	eax, [esp+3Ch+arg_8]
		mov	edx, [esp+3Ch+var_24]
		movzx	esi, byte ptr [eax+edx]
		and	esi, 0FFh
		mov	eax, edx
		jmp	short loc_6E4327B4
SSL_select_next_proto endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 356. SSL_get0_next_proto_negotiated

; =============== S U B	R O U T	I N E =======================================


		public SSL_get0_next_proto_negotiated
SSL_get0_next_proto_negotiated proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	edx, [esp+arg_0]
		mov	eax, [edx+174h]
		mov	ecx, [esp+arg_4]
		mov	[ecx], eax
		test	eax, eax
		jz	short loc_6E432820
		mov	al, [edx+178h]
		and	eax, 0FFh
		mov	edx, eax
		mov	eax, [esp+arg_8]
		mov	[eax], edx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E432820:				; CODE XREF: SSL_get0_next_proto_negotiated+12j
		xor	edx, edx
		mov	eax, [esp+arg_8]
		mov	[eax], edx
		retn
SSL_get0_next_proto_negotiated endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 355. SSL_CTX_set_next_protos_advertised_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_next_protos_advertised_cb
SSL_CTX_set_next_protos_advertised_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[eax+1A4h], edx
		mov	edx, [esp+arg_8]
		mov	[eax+1A8h], edx
		retn
SSL_CTX_set_next_protos_advertised_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 361. SSL_CTX_set_next_proto_select_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_next_proto_select_cb
SSL_CTX_set_next_proto_select_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[eax+1ACh], edx
		mov	edx, [esp+arg_8]
		mov	[eax+1B0h], edx
		retn
SSL_CTX_set_next_proto_select_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 353. SSL_export_keying_material

; =============== S U B	R O U T	I N E =======================================


		public SSL_export_keying_material
SSL_export_keying_material proc	near

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14h
		mov	eax, [esp+24h+arg_0]
		mov	edx, [esp+24h+arg_4]
		mov	[esp+24h+var_24], edx
		mov	ecx, [esp+24h+arg_8]
		mov	[esp+24h+var_20], ecx
		cmp	dword ptr [eax], 300h
		jle	short loc_6E4328B0
		mov	ebp, [eax+8]
		mov	ebp, [ebp+64h]
		mov	ebp, [ebp+34h]
		mov	eax, ebp
		add	esp, 14h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_6E4328B0:				; CODE XREF: SSL_export_keying_material+20j
		mov	eax, 0FFFFFFFFh
		add	esp, 14h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
SSL_export_keying_material endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   8. SSL_CTX_free

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_free
SSL_CTX_free	proc near		; CODE XREF: SSL_CTX_new+4CFp
					; SSL_free+1FDp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		test	ebx, ebx
		jz	short loc_6E4328FD
		mov	[esp+2Ch+var_1C], 795h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0Ch
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		lea	eax, [ebx+60h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_add_lock
		test	eax, eax
		jle	short loc_6E432910

loc_6E4328FD:				; CODE XREF: SSL_CTX_free+Cj
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E432910:				; CODE XREF: SSL_CTX_free+3Bj
		mov	eax, [ebx+0F0h]
		test	eax, eax
		jz	short loc_6E432922
		mov	[esp+2Ch+var_2C], eax
		call	X509_VERIFY_PARAM_free

loc_6E432922:				; CODE XREF: SSL_CTX_free+58j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_6E432939
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_CTX_flush_sessions

loc_6E432939:				; CODE XREF: SSL_CTX_free+67j
		lea	eax, [ebx+80h]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], 2
		call	CRYPTO_free_ex_data
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_6E432962
		mov	[esp+2Ch+var_2C], eax
		call	lh_free

loc_6E432962:				; CODE XREF: SSL_CTX_free+98j
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6E432971
		mov	[esp+2Ch+var_2C], eax
		call	X509_STORE_free

loc_6E432971:				; CODE XREF: SSL_CTX_free+A7j
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6E432980
		mov	[esp+2Ch+var_2C], eax
		call	sk_free

loc_6E432980:				; CODE XREF: SSL_CTX_free+B6j
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_6E43298F
		mov	[esp+2Ch+var_2C], eax
		call	sk_free

loc_6E43298F:				; CODE XREF: SSL_CTX_free+C5j
		mov	eax, [ebx+0B0h]
		test	eax, eax
		jz	short loc_6E4329A1
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E436D70

loc_6E4329A1:				; CODE XREF: SSL_CTX_free+D7j
		mov	eax, [ebx+0A0h]
		test	eax, eax
		jz	short loc_6E4329BB
		mov	[esp+2Ch+var_28], offset X509_NAME_free
		mov	[esp+2Ch+var_2C], eax
		call	sk_pop_free

loc_6E4329BB:				; CODE XREF: SSL_CTX_free+E9j
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E4329D5
		mov	[esp+2Ch+var_28], offset X509_free
		mov	[esp+2Ch+var_2C], eax
		call	sk_pop_free

loc_6E4329D5:				; CODE XREF: SSL_CTX_free+103j
		mov	dword ptr [ebx+98h], 0
		mov	eax, [ebx+1B4h]
		test	eax, eax
		jz	short loc_6E4329F1
		mov	[esp+2Ch+var_2C], eax
		call	sk_free

loc_6E4329F1:				; CODE XREF: SSL_CTX_free+127j
		mov	eax, [ebx+14Ch]
		test	eax, eax
		jz	short loc_6E432A03
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E432A03:				; CODE XREF: SSL_CTX_free+139j
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_CTX_SRP_CTX_free
		mov	eax, [ebx+0FCh]
		test	eax, eax
		jz	short loc_6E432A1D
		mov	[esp+2Ch+var_2C], eax
		call	ENGINE_finish

loc_6E432A1D:				; CODE XREF: SSL_CTX_free+153j
		mov	edi, [ebx+15Ch]
		test	edi, edi
		jz	short loc_6E432A38
		mov	eax, [edi+8]
		test	eax, eax
		jnz	short loc_6E432A72
		xchg	ax, ax

loc_6E432A30:				; CODE XREF: SSL_CTX_free+1C0j
		mov	[esp+2Ch+var_2C], edi
		call	CRYPTO_free

loc_6E432A38:				; CODE XREF: SSL_CTX_free+165j
		mov	edi, [ebx+160h]
		test	edi, edi
		jz	short loc_6E432A58
		mov	eax, [edi+8]
		test	eax, eax
		jnz	short loc_6E432A92
		lea	esi, [esi+0]

loc_6E432A50:				; CODE XREF: SSL_CTX_free+1E0j
		mov	[esp+2Ch+var_2C], edi
		call	CRYPTO_free

loc_6E432A58:				; CODE XREF: SSL_CTX_free+180j
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	CRYPTO_free
; ---------------------------------------------------------------------------
		align 10h

loc_6E432A70:				; CODE XREF: SSL_CTX_free+1BEj
		mov	eax, esi

loc_6E432A72:				; CODE XREF: SSL_CTX_free+16Cj
		mov	esi, [eax]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free
		test	esi, esi
		jnz	short loc_6E432A70
		jmp	short loc_6E432A30
; ---------------------------------------------------------------------------
		align 10h

loc_6E432A90:				; CODE XREF: SSL_CTX_free+1DEj
		mov	eax, esi

loc_6E432A92:				; CODE XREF: SSL_CTX_free+187j
		mov	esi, [eax]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free
		test	esi, esi
		jnz	short loc_6E432A90
		jmp	short loc_6E432A50
SSL_CTX_free	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  12. SSL_CTX_new

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_new
SSL_CTX_new	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_0]
		test	esi, esi
		jz	loc_6E4330D0
		call	SSL_get_ex_data_X509_STORE_CTX_idx
		test	eax, eax
		js	loc_6E432F90
		mov	[esp+2Ch+var_24], 6C1h
		mov	[esp+2Ch+var_28], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_2C], 1B8h
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E432FBC
		mov	edi, eax
		mov	edx, 1B8h
		test	al, 1
		jnz	loc_6E433010

loc_6E432B04:				; CODE XREF: SSL_CTX_new+568j
		test	edi, 2
		jnz	loc_6E433020

loc_6E432B10:				; CODE XREF: SSL_CTX_new+57Bj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E432F20
		and	edx, 1
		jnz	loc_6E432F10

loc_6E432B2B:				; CODE XREF: SSL_CTX_new+463j
					; SSL_CTX_new+47Bj
		mov	[ebx], esi
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+20h], 2
		mov	dword ptr [ebx+14h], 5000h
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+1Ch], 0
		call	dword ptr [esi+60h]
		mov	[ebx+24h], eax
		mov	dword ptr [ebx+28h], 0
		mov	dword ptr [ebx+2Ch], 0
		mov	dword ptr [ebx+30h], 0
		mov	dword ptr [ebx+0ECh], 0
		lea	edi, [ebx+34h]
		mov	edx, 2Ch
		test	edi, 1
		jnz	loc_6E433030

loc_6E432B89:				; CODE XREF: SSL_CTX_new+589j
		test	edi, 2
		jnz	loc_6E433040

loc_6E432B95:				; CODE XREF: SSL_CTX_new+59Bj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E432EF0
		and	edx, 1
		jnz	loc_6E432EE0

loc_6E432BB0:				; CODE XREF: SSL_CTX_new+433j
					; SSL_CTX_new+44Bj
		mov	dword ptr [ebx+60h], 1
		mov	dword ptr [ebx+0F4h], 0
		mov	dword ptr [ebx+9Ch], 0
		mov	dword ptr [ebx+64h], 0
		mov	dword ptr [ebx+68h], 0
		mov	dword ptr [ebx+0ACh], 19000h
		mov	dword ptr [ebx+0B4h], 0
		mov	dword ptr [ebx+0B8h], 0
		mov	dword ptr [ebx+0BCh], 0
		mov	dword ptr [ebx+0C0h], 0
		mov	dword ptr [ebx+0C4h], 0
		mov	dword ptr [ebx+0E8h], 0
		call	sub_6E4368F0
		mov	[ebx+0B0h], eax
		test	eax, eax
		jz	loc_6E432F50
		mov	dword ptr [ebx+6Ch], 0
		mov	dword ptr [ebx+70h], 0
		mov	dword ptr [ebx+74h], 0
		mov	dword ptr [ebx+78h], 0
		mov	dword ptr [ebx+7Ch], 0
		mov	[esp+2Ch+var_28], offset sub_6E42FFD0
		mov	[esp+2Ch+var_2C], offset loc_6E42FF30
		call	lh_new
		mov	[ebx+10h], eax
		test	eax, eax
		jz	loc_6E432F50
		call	X509_STORE_new
		mov	[ebx+0Ch], eax
		test	eax, eax
		jz	loc_6E432F50
		cmp	dword ptr [esi], 2
		jz	loc_6E433000
		mov	edx, offset aAllExportAnull ; "ALL:!EXPORT:!aNULL:!eNULL:!SSLv2"

loc_6E432C92:				; CODE XREF: SSL_CTX_new+555j
		mov	eax, [ebx]
		mov	[esp+2Ch+var_20], edx
		lea	edx, [ebx+8]
		mov	[esp+2Ch+var_24], edx
		lea	edx, [ebx+4]
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E43BC80
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_6E433050
		mov	[esp+2Ch+var_2C], eax
		call	sk_num
		test	eax, eax
		jle	loc_6E433050
		call	X509_VERIFY_PARAM_new
		mov	[ebx+0F0h], eax
		test	eax, eax
		jz	loc_6E432F50
		mov	[esp+2Ch+var_2C], offset aSsl2Md5 ; "ssl2-md5"
		call	EVP_get_digestbyname
		mov	[ebx+88h], eax
		test	eax, eax
		jz	loc_6E433103
		mov	[esp+2Ch+var_2C], offset aSsl3Md5 ; "ssl3-md5"
		call	EVP_get_digestbyname
		mov	[ebx+8Ch], eax
		test	eax, eax
		jz	loc_6E433081
		mov	[esp+2Ch+var_2C], offset aSsl3Sha1 ; "ssl3-sha1"
		call	EVP_get_digestbyname
		mov	[ebx+90h], eax
		test	eax, eax
		jz	loc_6E433134
		call	sk_new_null
		mov	[ebx+0A0h], eax
		test	eax, eax
		jz	loc_6E432F50
		lea	eax, [ebx+80h]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], 2
		call	CRYPTO_new_ex_data
		mov	dword ptr [ebx+94h], 0
		cmp	dword ptr [esi], 0FEFFh
		jz	short loc_6E432D74
		call	SSL_COMP_get_compression_methods
		mov	[ebx+98h], eax

loc_6E432D74:				; CODE XREF: SSL_CTX_new+2B7j
		mov	dword ptr [ebx+0F8h], 4000h
		mov	dword ptr [ebx+100h], 0
		mov	dword ptr [ebx+104h], 0
		mov	[esp+2Ch+var_28], 10h
		lea	eax, [ebx+108h]
		mov	[esp+2Ch+var_2C], eax
		call	RAND_pseudo_bytes
		test	eax, eax
		jle	loc_6E4330C0
		mov	[esp+2Ch+var_28], 10h
		lea	eax, [ebx+118h]
		mov	[esp+2Ch+var_2C], eax
		call	RAND_bytes
		test	eax, eax
		jle	loc_6E4330C0
		mov	[esp+2Ch+var_28], 10h
		lea	eax, [ebx+128h]
		mov	[esp+2Ch+var_2C], eax
		call	RAND_bytes
		test	eax, eax
		jle	loc_6E4330C0
		lea	esi, [esi+0]

loc_6E432DF0:				; CODE XREF: SSL_CTX_new+61Aj
		mov	dword ptr [ebx+13Ch], 0
		mov	dword ptr [ebx+140h], 0
		mov	dword ptr [ebx+1A4h], 0
		mov	dword ptr [ebx+1ACh], 0
		mov	dword ptr [ebx+14Ch], 0
		mov	dword ptr [ebx+150h], 0
		mov	dword ptr [ebx+154h], 0
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_CTX_SRP_CTX_init
		mov	dword ptr [ebx+158h], 20h
		mov	[esp+2Ch+var_24], 743h
		mov	[esp+2Ch+var_28], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_2C], 0Ch
		call	CRYPTO_malloc
		mov	[ebx+160h], eax
		test	eax, eax
		jz	loc_6E432F50
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 0
		mov	[esp+2Ch+var_24], 749h
		mov	[esp+2Ch+var_28], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_2C], 0Ch
		call	CRYPTO_malloc
		mov	[ebx+15Ch], eax
		test	eax, eax
		jz	loc_6E432F33
		mov	dword ptr [eax], 0
		mov	dword ptr [eax+4], 0
		mov	dword ptr [eax+8], 0
		mov	dword ptr [ebx+0FCh], 0
		or	dword ptr [ebx+0A4h], 1000004h
		mov	eax, ebx
		jmp	loc_6E432F86
; ---------------------------------------------------------------------------
		align 10h

loc_6E432EE0:				; CODE XREF: SSL_CTX_new+FAj
					; SSL_CTX_new+451j
		mov	byte ptr [edi],	0
		jmp	loc_6E432BB0
; ---------------------------------------------------------------------------
		align 10h

loc_6E432EF0:				; CODE XREF: SSL_CTX_new+F1j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E432BB0
		jmp	short loc_6E432EE0
; ---------------------------------------------------------------------------
		align 10h

loc_6E432F10:				; CODE XREF: SSL_CTX_new+75j
					; SSL_CTX_new+481j
		mov	byte ptr [edi],	0
		jmp	loc_6E432B2B
; ---------------------------------------------------------------------------
		align 10h

loc_6E432F20:				; CODE XREF: SSL_CTX_new+6Cj
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E432B2B
		jmp	short loc_6E432F10
; ---------------------------------------------------------------------------

loc_6E432F33:				; CODE XREF: SSL_CTX_new+3FAj
		mov	eax, [ebx+160h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free
		jmp	short loc_6E432F50
; ---------------------------------------------------------------------------
		align 10h

loc_6E432F50:				; CODE XREF: SSL_CTX_new+17Cj
					; SSL_CTX_new+1BEj ...
		mov	[esp+2Ch+var_1C], 774h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0A9h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error

loc_6E432F7C:				; CODE XREF: SSL_CTX_new+5CCj
					; SSL_CTX_new+5FDj ...
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_CTX_free
		xor	eax, eax

loc_6E432F86:				; CODE XREF: SSL_CTX_new+42Aj
					; SSL_CTX_new+64Ej
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E432F90:				; CODE XREF: SSL_CTX_new+19j
		mov	[esp+2Ch+var_1C], 6BEh
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 10Dh
		mov	[esp+2Ch+var_28], 0A9h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error

loc_6E432FBC:				; CODE XREF: SSL_CTX_new+3Fj
		mov	[esp+2Ch+var_1C], 774h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0A9h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E433000
; ---------------------------------------------------------------------------
		align 10h

loc_6E433000:				; CODE XREF: SSL_CTX_new+1D7j
					; SSL_CTX_new+541j
		mov	edx, offset aSslv2 ; "SSLv2"
		jmp	loc_6E432C92
; ---------------------------------------------------------------------------
		align 10h

loc_6E433010:				; CODE XREF: SSL_CTX_new+4Ej
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	dl, 0B7h
		jmp	loc_6E432B04
; ---------------------------------------------------------------------------
		align 10h

loc_6E433020:				; CODE XREF: SSL_CTX_new+5Aj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E432B10
; ---------------------------------------------------------------------------

loc_6E433030:				; CODE XREF: SSL_CTX_new+D3j
		mov	byte ptr [ebx+34h], 0
		lea	edi, [ebx+35h]
		mov	dl, 2Bh
		jmp	loc_6E432B89
; ---------------------------------------------------------------------------
		align 10h

loc_6E433040:				; CODE XREF: SSL_CTX_new+DFj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E432B95
; ---------------------------------------------------------------------------

loc_6E433050:				; CODE XREF: SSL_CTX_new+203j
					; SSL_CTX_new+213j
		mov	[esp+2Ch+var_1C], 707h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0A1h
		mov	[esp+2Ch+var_28], 0A9h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	loc_6E432F7C
; ---------------------------------------------------------------------------

loc_6E433081:				; CODE XREF: SSL_CTX_new+25Aj
		mov	[esp+2Ch+var_1C], 714h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0F2h
		mov	[esp+2Ch+var_28], 0A9h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	loc_6E432F7C
; ---------------------------------------------------------------------------
		align 10h

loc_6E4330C0:				; CODE XREF: SSL_CTX_new+2FAj
					; SSL_CTX_new+318j ...
		or	dword ptr [ebx+0A4h], 4000h
		jmp	loc_6E432DF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4330D0:				; CODE XREF: SSL_CTX_new+Cj
		mov	[esp+2Ch+var_1C], 6B3h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0C4h
		mov	[esp+2Ch+var_28], 0A9h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E432F86
; ---------------------------------------------------------------------------

loc_6E433103:				; CODE XREF: SSL_CTX_new+240j
		mov	[esp+2Ch+var_1C], 710h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0F1h
		mov	[esp+2Ch+var_28], 0A9h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	loc_6E432F7C
; ---------------------------------------------------------------------------

loc_6E433134:				; CODE XREF: SSL_CTX_new+274j
		mov	[esp+2Ch+var_1C], 718h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 0F3h
		mov	[esp+2Ch+var_28], 0A9h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	loc_6E432F7C
SSL_CTX_new	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  48. SSL_free

; =============== S U B	R O U T	I N E =======================================


		public SSL_free
SSL_free	proc near		; CODE XREF: SSL_new+343p SSL_dup+105p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		test	ebx, ebx
		jz	short loc_6E4331AE
		mov	[esp+2Ch+var_1C], 203h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 10h
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		lea	eax, [ebx+0FCh]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_add_lock
		test	eax, eax
		jle	short loc_6E4331C0

loc_6E4331AE:				; CODE XREF: SSL_free+Aj
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4331C0:				; CODE XREF: SSL_free+3Cj
		mov	eax, [ebx+70h]
		test	eax, eax
		jz	short loc_6E4331CF
		mov	[esp+2Ch+var_2C], eax
		call	X509_VERIFY_PARAM_free

loc_6E4331CF:				; CODE XREF: SSL_free+55j
		lea	eax, [ebx+0F0h]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], 1
		call	CRYPTO_free_ex_data
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_6E433208
		cmp	eax, [ebx+10h]
		jz	loc_6E433460

loc_6E4331F9:				; CODE XREF: SSL_free+2FEj
		mov	[esp+2Ch+var_2C], eax
		call	BIO_free
		mov	dword ptr [ebx+14h], 0

loc_6E433208:				; CODE XREF: SSL_free+7Ej
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6E433217
		mov	[esp+2Ch+var_2C], eax
		call	BIO_free_all

loc_6E433217:				; CODE XREF: SSL_free+9Dj
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_6E43322B
		cmp	eax, [ebx+0Ch]
		jz	short loc_6E43322B
		mov	[esp+2Ch+var_2C], eax
		call	BIO_free_all

loc_6E43322B:				; CODE XREF: SSL_free+ACj SSL_free+B1j
		mov	eax, [ebx+3Ch]
		test	eax, eax
		jz	short loc_6E43323A
		mov	[esp+2Ch+var_2C], eax
		call	BUF_MEM_free

loc_6E43323A:				; CODE XREF: SSL_free+C0j
		mov	eax, [ebx+74h]
		test	eax, eax
		jz	short loc_6E433249
		mov	[esp+2Ch+var_2C], eax
		call	sk_free

loc_6E433249:				; CODE XREF: SSL_free+CFj
		mov	eax, [ebx+78h]
		test	eax, eax
		jz	short loc_6E433258
		mov	[esp+2Ch+var_2C], eax
		call	sk_free

loc_6E433258:				; CODE XREF: SSL_free+DEj
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	short loc_6E433278
		mov	[esp+2Ch+var_2C], ebx
		call	sub_6E43A170
		mov	eax, [ebx+0C0h]
		mov	[esp+2Ch+var_2C], eax
		call	SSL_SESSION_free

loc_6E433278:				; CODE XREF: SSL_free+F0j
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	short loc_6E4332A2
		mov	[esp+2Ch+var_2C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+80h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+80h], 0

loc_6E4332A2:				; CODE XREF: SSL_free+110j
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E4332CC
		mov	[esp+2Ch+var_2C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+8Ch]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+8Ch], 0

loc_6E4332CC:				; CODE XREF: SSL_free+13Aj
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	short loc_6E4332E8
		mov	[esp+2Ch+var_2C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+88h], 0

loc_6E4332E8:				; CODE XREF: SSL_free+164j
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E433304
		mov	[esp+2Ch+var_2C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+94h], 0

loc_6E433304:				; CODE XREF: SSL_free+180j
		mov	eax, [ebx+84h]
		test	eax, eax
		jz	short loc_6E433316
		mov	[esp+2Ch+var_2C], eax
		call	EVP_MD_CTX_destroy

loc_6E433316:				; CODE XREF: SSL_free+19Cj
		mov	dword ptr [ebx+84h], 0
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	short loc_6E433332
		mov	[esp+2Ch+var_2C], eax
		call	EVP_MD_CTX_destroy

loc_6E433332:				; CODE XREF: SSL_free+1B8j
		mov	dword ptr [ebx+90h], 0
		mov	eax, [ebx+98h]
		test	eax, eax
		jz	short loc_6E43334E
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E436D70

loc_6E43334E:				; CODE XREF: SSL_free+1D4j
		mov	eax, [ebx+120h]
		test	eax, eax
		jz	short loc_6E433360
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E433360:				; CODE XREF: SSL_free+1E6j
		mov	eax, [ebx+170h]
		test	eax, eax
		jz	short loc_6E433372
		mov	[esp+2Ch+var_2C], eax
		call	SSL_CTX_free

loc_6E433372:				; CODE XREF: SSL_free+1F8j
		mov	eax, [ebx+148h]
		test	eax, eax
		jz	short loc_6E433384
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E433384:				; CODE XREF: SSL_free+20Aj
		mov	eax, [ebx+150h]
		test	eax, eax
		jz	short loc_6E433396
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E433396:				; CODE XREF: SSL_free+21Cj
		mov	eax, [ebx+154h]
		test	eax, eax
		jz	short loc_6E4333A8
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E4333A8:				; CODE XREF: SSL_free+22Ej
		mov	eax, [ebx+134h]
		test	eax, eax
		jz	short loc_6E4333C2
		mov	[esp+2Ch+var_28], offset loc_6E446470
		mov	[esp+2Ch+var_2C], eax
		call	sk_pop_free

loc_6E4333C2:				; CODE XREF: SSL_free+240j
		mov	eax, [ebx+130h]
		test	eax, eax
		jz	short loc_6E4333DC
		mov	[esp+2Ch+var_28], offset OCSP_RESPID_free
		mov	[esp+2Ch+var_2C], eax
		call	sk_pop_free

loc_6E4333DC:				; CODE XREF: SSL_free+25Aj
		mov	eax, [ebx+138h]
		test	eax, eax
		jz	short loc_6E4333EE
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E4333EE:				; CODE XREF: SSL_free+274j
		mov	eax, [ebx+0F8h]
		test	eax, eax
		jz	short loc_6E433408
		mov	[esp+2Ch+var_28], offset X509_NAME_free
		mov	[esp+2Ch+var_2C], eax
		call	sk_pop_free

loc_6E433408:				; CODE XREF: SSL_free+286j
		mov	eax, [ebx+8]
		test	eax, eax
		jz	short loc_6E433417
		mov	eax, [eax+0Ch]
		mov	[esp+2Ch+var_2C], ebx
		call	eax

loc_6E433417:				; CODE XREF: SSL_free+29Dj
		mov	eax, [ebx+0E4h]
		test	eax, eax
		jz	short loc_6E433429
		mov	[esp+2Ch+var_2C], eax
		call	SSL_CTX_free

loc_6E433429:				; CODE XREF: SSL_free+2AFj
		mov	eax, [ebx+174h]
		test	eax, eax
		jz	short loc_6E43343B
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E43343B:				; CODE XREF: SSL_free+2C1j
		mov	eax, [ebx+17Ch]
		test	eax, eax
		jz	short loc_6E43344D
		mov	[esp+2Ch+var_2C], eax
		call	sk_free

loc_6E43344D:				; CODE XREF: SSL_free+2D3j
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	CRYPTO_free
; ---------------------------------------------------------------------------
		align 10h

loc_6E433460:				; CODE XREF: SSL_free+83j
		mov	[esp+2Ch+var_2C], eax
		call	BIO_pop
		mov	[ebx+10h], eax
		mov	eax, [ebx+14h]
		jmp	loc_6E4331F9
SSL_free	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  75. SSL_new

; =============== S U B	R O U T	I N E =======================================


		public SSL_new
SSL_new		proc near		; CODE XREF: SSL_dup+14p
					; BIO_new_buffer_ssl_connect+4Ep ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_0]
		test	ebp, ebp
		jz	loc_6E4338E3
		mov	eax, [ebp+0]
		test	eax, eax
		jz	loc_6E4338B0
		mov	[esp+3Ch+var_34], 12Ah
		mov	[esp+3Ch+var_38], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_3C], 1D4h
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E4337C8
		mov	edi, eax
		mov	edx, 1D4h
		test	al, 1
		jnz	loc_6E433850

loc_6E4334D3:				; CODE XREF: SSL_new+3D8j
		test	edi, 2
		jnz	loc_6E433840

loc_6E4334DF:				; CODE XREF: SSL_new+3CBj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E433770
		and	edx, 1
		jnz	loc_6E433760

loc_6E4334FA:				; CODE XREF: SSL_new+2E3j SSL_new+2FBj
		mov	eax, [ebp+0A4h]
		mov	[ebx+100h], eax
		mov	eax, [ebp+0A8h]
		mov	[ebx+104h], eax
		mov	eax, [ebp+0ACh]
		mov	[ebx+108h], eax
		mov	dword ptr [ebx+0FCh], 1
		mov	eax, [ebp+0B0h]
		test	eax, eax
		jz	loc_6E433800
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E4369F0
		mov	[ebx+98h], eax
		test	eax, eax
		jz	loc_6E4337C0

loc_6E43354C:				; CODE XREF: SSL_new+38Aj
		mov	eax, [ebp+0B4h]
		mov	[ebx+60h], eax
		mov	eax, [ebp+0B8h]
		mov	[ebx+64h], eax
		mov	eax, [ebp+0BCh]
		mov	[ebx+68h], eax
		mov	eax, [ebp+0C0h]
		mov	[ebx+0C8h], eax
		mov	eax, [ebp+0C4h]
		mov	[ebx+9Ch], eax
		cmp	eax, 20h
		ja	loc_6E433810

loc_6E433588:				; CODE XREF: SSL_new+3ACj
		lea	edi, [ebx+0A0h]
		lea	esi, [ebp+0C8h]
		mov	eax, 20h
		test	edi, 1
		jnz	loc_6E433860

loc_6E4335A5:				; CODE XREF: SSL_new+3FDj
		test	edi, 2
		jnz	loc_6E433890

loc_6E4335B1:				; CODE XREF: SSL_new+41Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_6E4337A0
		test	al, 1
		jnz	loc_6E433790

loc_6E4335CA:				; CODE XREF: SSL_new+31Aj SSL_new+32Dj
		mov	eax, [ebp+0E8h]
		mov	[ebx+0CCh], eax
		mov	eax, [ebp+0ECh]
		mov	[ebx+0C4h], eax
		call	X509_VERIFY_PARAM_new
		mov	[ebx+70h], eax
		test	eax, eax
		jz	loc_6E4337C0
		mov	edx, [ebp+0F0h]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	X509_VERIFY_PARAM_inherit
		mov	eax, [ebp+0F4h]
		mov	[ebx+2Ch], eax
		mov	eax, [ebp+0F8h]
		mov	[ebx+114h], eax
		lea	esi, [ebp+60h]
		mov	[esp+3Ch+var_2C], 161h
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 0Ch
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], esi
		call	CRYPTO_add_lock
		mov	[ebx+0E4h], ebp
		mov	dword ptr [ebx+118h], 0
		mov	dword ptr [ebx+11Ch], 0
		mov	dword ptr [ebx+140h], 0
		mov	dword ptr [ebx+128h], 0FFFFFFFFh
		mov	dword ptr [ebx+12Ch], 0
		mov	dword ptr [ebx+130h], 0
		mov	dword ptr [ebx+134h], 0
		mov	dword ptr [ebx+138h], 0
		mov	dword ptr [ebx+13Ch], 0FFFFFFFFh
		mov	[esp+3Ch+var_2C], 16Dh
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 0Ch
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], esi
		call	CRYPTO_add_lock
		mov	[ebx+170h], ebp
		mov	dword ptr [ebx+174h], 0
		mov	dword ptr [ebx+0ECh], 0
		mov	eax, [ebp+0]
		mov	[ebx+8], eax
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		test	eax, eax
		jz	loc_6E4337C0
		mov	eax, [ebp+0]
		cmp	dword ptr [eax+10h], offset sub_6E42FF90
		setnz	al
		and	eax, 0FFh
		mov	[ebx+24h], eax
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_clear
		lea	eax, [ebx+0F0h]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], 1
		call	CRYPTO_new_ex_data
		mov	eax, [ebp+150h]
		mov	[ebx+0DCh], eax
		mov	eax, [ebp+154h]
		mov	[ebx+0E0h], eax
		mov	eax, ebx

loc_6E43374D:				; CODE XREF: SSL_new+45Ej SSL_new+491j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E433760:				; CODE XREF: SSL_new+74j SSL_new+301j
		mov	byte ptr [edi],	0
		jmp	loc_6E4334FA
; ---------------------------------------------------------------------------
		align 10h

loc_6E433770:				; CODE XREF: SSL_new+6Bj
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E4334FA
		jmp	short loc_6E433760
; ---------------------------------------------------------------------------
		align 10h

loc_6E433790:				; CODE XREF: SSL_new+144j SSL_new+333j
		mov	al, [esi+edx]
		mov	[esp+3Ch+var_1D], al
		mov	[edi+edx], al
		jmp	loc_6E4335CA
; ---------------------------------------------------------------------------
		align 10h

loc_6E4337A0:				; CODE XREF: SSL_new+13Cj
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E4335CA
		jmp	short loc_6E433790
; ---------------------------------------------------------------------------
		align 10h

loc_6E4337C0:				; CODE XREF: SSL_new+C6j SSL_new+16Cj	...
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_free

loc_6E4337C8:				; CODE XREF: SSL_new+3Ej
		mov	[esp+3Ch+var_2C], 18Ah
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0BAh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E433800:				; CODE XREF: SSL_new+B0j
		mov	dword ptr [ebx+98h], 0
		jmp	loc_6E43354C
; ---------------------------------------------------------------------------
		align 10h

loc_6E433810:				; CODE XREF: SSL_new+102j
		mov	[esp+3Ch+var_34], offset aSSid_ctx_lengt ; "s->sid_ctx_length <= sizeof	s->sid_ctx"
		mov	[esp+3Ch+var_38], 151h
		mov	[esp+3Ch+var_3C], offset aSsl_lib_c ; "ssl_lib.c"
		call	OpenSSLDie
		jmp	loc_6E433588
; ---------------------------------------------------------------------------
		jmp	short loc_6E433840
; ---------------------------------------------------------------------------
		align 10h

loc_6E433840:				; CODE XREF: SSL_new+59j SSL_new+3B1j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E4334DF
; ---------------------------------------------------------------------------

loc_6E433850:				; CODE XREF: SSL_new+4Dj
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	dl, 0D3h
		jmp	loc_6E4334D3
; ---------------------------------------------------------------------------
		align 10h

loc_6E433860:				; CODE XREF: SSL_new+11Fj
		mov	al, [ebp+0C8h]
		mov	[ebx+0A0h], al
		lea	edi, [ebx+0A1h]
		lea	esi, [ebp+0C9h]
		mov	eax, 1Fh
		jmp	loc_6E4335A5
; ---------------------------------------------------------------------------
		align 10h

loc_6E433890:				; CODE XREF: SSL_new+12Bj
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E4335B1
; ---------------------------------------------------------------------------
		align 10h

loc_6E4338B0:				; CODE XREF: SSL_new+18j
		mov	[esp+3Ch+var_2C], 126h
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 0E4h
		mov	[esp+3Ch+var_38], 0BAh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E43374D
; ---------------------------------------------------------------------------

loc_6E4338E3:				; CODE XREF: SSL_new+Dj
		mov	[esp+3Ch+var_2C], 122h
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 0C3h
		mov	[esp+3Ch+var_38], 0BAh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E43374D
SSL_new		endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  17. SSL_CTX_set_default_passwd_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_default_passwd_cb
SSL_CTX_set_default_passwd_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+6Ch], edx
		retn
SSL_CTX_set_default_passwd_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 235. SSL_CTX_set_default_passwd_cb_userdata

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_default_passwd_cb_userdata
SSL_CTX_set_default_passwd_cb_userdata proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+70h], edx
		retn
SSL_CTX_set_default_passwd_cb_userdata endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 232. SSL_CTX_set_cert_verify_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_cert_verify_callback
SSL_CTX_set_cert_verify_callback proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[eax+64h], edx
		mov	edx, [esp+arg_8]
		mov	[eax+68h], edx
		retn
SSL_CTX_set_cert_verify_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  21. SSL_CTX_set_verify

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_verify
SSL_CTX_set_verify proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		mov	[eax+0C0h], edx
		mov	edx, [esp+arg_8]
		mov	[eax+0E8h], edx
		retn
SSL_CTX_set_verify endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 225. SSL_CTX_set_verify_depth

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_verify_depth
SSL_CTX_set_verify_depth proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0F0h]
		mov	[esp+arg_0], eax
		jmp	X509_VERIFY_PARAM_set_depth
SSL_CTX_set_verify_depth endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4339A0	proc near		; CODE XREF: sub_6E40F970+B2p

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_24], 0
		mov	[esp+6Ch+var_20], 0
		test	ebx, ebx
		jz	loc_6E433C67
		mov	eax, [esp+6Ch+arg_4]
		mov	eax, [eax+20h]
		and	eax, 8
		cmp	eax, 1
		sbb	esi, esi
		and	esi, 200h
		add	esi, 200h
		mov	eax, [ebx+18h]
		test	eax, eax
		jz	loc_6E433C70
		cmp	dword ptr [ebx+1Ch], 0
		jz	loc_6E433F31
		mov	[esp+6Ch+var_30], 1
		mov	[esp+6Ch+var_34], 1
		jmp	loc_6E433C86
; ---------------------------------------------------------------------------
		align 10h

loc_6E433A10:				; CODE XREF: sub_6E4339A0+2EBj
		cmp	dword ptr [ebx+24h], 1
		sbb	eax, eax
		mov	[esp+6Ch+var_38], eax
		inc	[esp+6Ch+var_38]
		mov	[esp+6Ch+var_3C], eax
		inc	[esp+6Ch+var_3C]

loc_6E433A26:				; CODE XREF: sub_6E4339A0+30Bj
					; sub_6E4339A0+58Cj
		mov	eax, [ebx+28h]
		test	eax, eax
		jz	loc_6E433E90
		mov	[esp+6Ch+var_4C], 1

loc_6E433A39:				; CODE XREF: sub_6E4339A0+4FEj
		mov	edi, [ebx+30h]
		test	edi, edi
		jz	loc_6E433E40
		mov	eax, [ebx+34h]
		test	eax, eax
		jz	loc_6E433E40
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_size
		shl	eax, 3
		cmp	esi, eax
		setnl	al
		and	eax, 0FFh
		mov	edi, eax
		mov	ebp, 1
		mov	ecx, [ebx+3Ch]
		test	ecx, ecx
		jz	loc_6E433E4F

loc_6E433A76:				; CODE XREF: sub_6E4339A0+4A9j
		xor	eax, eax
		mov	edx, [ebx+40h]
		test	edx, edx
		setnz	al
		mov	[esp+6Ch+var_40], eax
		mov	ecx, [ebx+48h]
		test	ecx, ecx
		jz	loc_6E433E70

loc_6E433A8F:				; CODE XREF: sub_6E4339A0+4BCj
		xor	eax, eax
		mov	edx, [ebx+4Ch]
		test	edx, edx
		setnz	al
		mov	[esp+6Ch+var_48], eax

loc_6E433A9D:				; CODE XREF: sub_6E4339A0+4D8j
		mov	eax, [ebx+54h]
		test	eax, eax
		jz	loc_6E433DF0
		mov	eax, [ebx+58h]
		test	eax, eax
		jz	loc_6E433DF0
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_size
		shl	eax, 3
		cmp	esi, eax
		setnl	al
		and	eax, 0FFh
		mov	[esp+6Ch+var_50], eax
		mov	[esp+6Ch+var_44], 1
		mov	eax, [ebx+60h]
		test	eax, eax
		jz	loc_6E433E0B

loc_6E433ADF:				; CODE XREF: sub_6E4339A0+465j
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	loc_6E433E0D
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_size
		shl	eax, 3
		xor	ecx, ecx
		cmp	esi, eax
		setnl	cl
		mov	eax, 1
		mov	edx, [ebx+6Ch]
		mov	[esp+6Ch+var_54], edx
		test	edx, edx
		jz	loc_6E433E1E

loc_6E433B10:				; CODE XREF: sub_6E4339A0+478j
		xor	edx, edx
		mov	esi, [ebx+70h]
		test	esi, esi
		setnz	dl
		mov	esi, [ebx+84h]
		test	esi, esi
		jz	loc_6E433E30

loc_6E433B28:				; CODE XREF: sub_6E4339A0+488j
		mov	esi, [ebx+88h]
		test	esi, esi
		jz	loc_6E433E30
		mov	[esp+6Ch+var_58], 300h
		mov	esi, 200h

loc_6E433B43:				; CODE XREF: sub_6E4339A0+49Aj
		cmp	dword ptr [ebx+78h], 0
		jz	loc_6E433DE0
		cmp	dword ptr [ebx+7Ch], 0
		jz	loc_6E433DE0
		mov	esi, 200h

loc_6E433B5C:				; CODE XREF: sub_6E4339A0+444j
		test	ebp, ebp
		jnz	short loc_6E433B6E
		cmp	[esp+6Ch+var_30], 0
		jz	short loc_6E433B71
		cmp	[esp+6Ch+var_40], 0
		jz	short loc_6E433B71

loc_6E433B6E:				; CODE XREF: sub_6E4339A0+1BEj
		or	esi, 1

loc_6E433B71:				; CODE XREF: sub_6E4339A0+1C5j
					; sub_6E4339A0+1CCj
		test	edi, edi
		jnz	loc_6E433DD0
		mov	edi, [esp+6Ch+var_34]
		test	edi, edi
		jz	loc_6E433E80
		mov	edi, [esp+6Ch+var_40]
		test	edi, edi
		jnz	loc_6E433DD0
		mov	edi, ebp
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E433BA0:				; CODE XREF: sub_6E4339A0+435j
					; sub_6E4339A0+4E2j
		cmp	[esp+6Ch+var_3C], 0
		jz	short loc_6E433BAA
		or	edi, 8

loc_6E433BAA:				; CODE XREF: sub_6E4339A0+205j
		cmp	[esp+6Ch+var_38], 0
		jz	short loc_6E433BB4
		or	esi, 8

loc_6E433BB4:				; CODE XREF: sub_6E4339A0+20Fj
		cmp	[esp+6Ch+var_44], 0
		jz	short loc_6E433BBE
		or	esi, 2

loc_6E433BBE:				; CODE XREF: sub_6E4339A0+219j
		cmp	[esp+6Ch+var_50], 0
		jz	short loc_6E433BC8
		or	edi, 2

loc_6E433BC8:				; CODE XREF: sub_6E4339A0+223j
		test	eax, eax
		jz	short loc_6E433BCF
		or	esi, 4

loc_6E433BCF:				; CODE XREF: sub_6E4339A0+22Aj
		test	ecx, ecx
		jz	short loc_6E433BD6
		or	edi, 4

loc_6E433BD6:				; CODE XREF: sub_6E4339A0+231j
		test	ebp, ebp
		jnz	loc_6E433CB0
		mov	eax, [esp+6Ch+var_40]
		test	eax, eax
		jnz	loc_6E433CB0
		mov	eax, 4
		mov	ebp, 6
		mov	ecx, 2
		mov	[esp+6Ch+var_44], 0
		cmp	[esp+6Ch+var_48], 0
		jz	loc_6E433CD7

loc_6E433C0C:				; CODE XREF: sub_6E4339A0+331j
		or	[esp+6Ch+var_58], 2
		mov	[esp+6Ch+var_44], ecx
		mov	eax, [esp+6Ch+var_58]
		or	eax, 4
		mov	[esp+6Ch+var_50], eax
		test	edx, edx
		jnz	loc_6E433CEC

loc_6E433C28:				; CODE XREF: sub_6E4339A0+346j
					; sub_6E4339A0+41Dj ...
		mov	eax, [esp+6Ch+var_4C]
		test	eax, eax
		jz	short loc_6E433C3C
		or	esi, 80h
		or	edi, 80h

loc_6E433C3C:				; CODE XREF: sub_6E4339A0+28Ej
		or	esi, 100h
		mov	[ebx+8], esi
		mov	eax, [esp+6Ch+var_50]
		or	al, 80h
		mov	[ebx+0Ch], eax
		or	edi, 100h
		mov	[ebx+10h], edi
		or	ebp, 80h
		mov	[ebx+14h], ebp
		mov	dword ptr [ebx+4], 1

loc_6E433C67:				; CODE XREF: sub_6E4339A0+1Dj
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E433C70:				; CODE XREF: sub_6E4339A0+43j
		cmp	dword ptr [ebx+1Ch], 1
		sbb	eax, eax
		mov	[esp+6Ch+var_30], eax
		inc	[esp+6Ch+var_30]
		mov	[esp+6Ch+var_34], eax
		inc	[esp+6Ch+var_34]

loc_6E433C86:				; CODE XREF: sub_6E4339A0+63j
					; sub_6E4339A0+5B2j
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	loc_6E433A10
		cmp	dword ptr [ebx+24h], 0
		jz	loc_6E433F0B
		mov	[esp+6Ch+var_38], 1
		mov	[esp+6Ch+var_3C], 1
		jmp	loc_6E433A26
; ---------------------------------------------------------------------------

loc_6E433CB0:				; CODE XREF: sub_6E4339A0+238j
					; sub_6E4339A0+244j
		or	[esp+6Ch+var_58], 1
		mov	eax, 5
		mov	ebp, 7
		mov	ecx, 3
		mov	[esp+6Ch+var_44], 1
		cmp	[esp+6Ch+var_48], 0
		jnz	loc_6E433C0C

loc_6E433CD7:				; CODE XREF: sub_6E4339A0+266j
		mov	ebp, eax
		mov	eax, [esp+6Ch+var_58]
		or	eax, 4
		mov	[esp+6Ch+var_50], eax
		test	edx, edx
		jz	loc_6E433C28

loc_6E433CEC:				; CODE XREF: sub_6E4339A0+282j
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 0FFFFFFFFh
		mov	eax, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_6C], eax
		call	X509_check_purpose
		mov	eax, [esp+6Ch+var_54]
		test	byte ptr [eax+28h], 2
		jz	loc_6E433EB0
		mov	eax, [eax+2Ch]
		mov	ecx, eax
		and	ecx, 8
		mov	[esp+6Ch+var_40], ecx
		and	eax, 80h
		mov	[esp+6Ch+var_48], eax

loc_6E433D2B:				; CODE XREF: sub_6E4339A0+520j
		mov	eax, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_6C], eax
		call	X509_get_pubkey
		mov	ecx, eax
		test	eax, eax
		jz	loc_6E433ED0
		mov	[esp+6Ch+var_6C], eax
		mov	[esp+6Ch+var_3C], eax
		call	EVP_PKEY_bits
		mov	[esp+6Ch+var_38], eax
		mov	ecx, [esp+6Ch+var_3C]

loc_6E433D55:				; CODE XREF: sub_6E4339A0+538j
		mov	[esp+6Ch+var_6C], ecx
		call	EVP_PKEY_free
		mov	eax, [esp+6Ch+var_54]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6E433D8E
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6E433D8E
		mov	[esp+6Ch+var_6C], eax
		call	OBJ_obj2nid
		lea	edx, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_64], edx
		lea	edx, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], eax
		call	OBJ_find_sigid_algs

loc_6E433D8E:				; CODE XREF: sub_6E4339A0+3C6j
					; sub_6E4339A0+3CCj
		mov	ecx, [esp+6Ch+var_40]
		test	ecx, ecx
		jz	short loc_6E433DB7
		mov	eax, [esp+6Ch+var_24]
		cmp	eax, 6
		jz	loc_6E433EE0
		cmp	eax, 13h
		jz	loc_6E433EE0

loc_6E433DAC:				; CODE XREF: sub_6E4339A0+556j
					; sub_6E4339A0+566j
		cmp	eax, 198h
		jz	loc_6E433F60

loc_6E433DB7:				; CODE XREF: sub_6E4339A0+3F4j
					; sub_6E4339A0+5D0j ...
		mov	edx, [esp+6Ch+var_48]
		test	edx, edx
		jz	loc_6E433C28
		or	[esp+6Ch+var_50], 40h
		or	ebp, 40h
		jmp	loc_6E433C28
; ---------------------------------------------------------------------------

loc_6E433DD0:				; CODE XREF: sub_6E4339A0+1D3j
					; sub_6E4339A0+1EBj
		mov	edi, 1
		jmp	loc_6E433BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E433DE0:				; CODE XREF: sub_6E4339A0+1A7j
					; sub_6E4339A0+1B1j
		mov	[esp+6Ch+var_58], esi
		jmp	loc_6E433B5C
; ---------------------------------------------------------------------------
		align 10h

loc_6E433DF0:				; CODE XREF: sub_6E4339A0+102j
					; sub_6E4339A0+10Dj
		mov	[esp+6Ch+var_44], 0
		mov	[esp+6Ch+var_50], 0
		mov	eax, [ebx+60h]
		test	eax, eax
		jnz	loc_6E433ADF

loc_6E433E0B:				; CODE XREF: sub_6E4339A0+139j
		xor	eax, eax

loc_6E433E0D:				; CODE XREF: sub_6E4339A0+144j
		xor	ecx, ecx
		mov	edx, [ebx+6Ch]
		mov	[esp+6Ch+var_54], edx
		test	edx, edx
		jnz	loc_6E433B10

loc_6E433E1E:				; CODE XREF: sub_6E4339A0+16Aj
		xor	edx, edx
		mov	esi, [ebx+84h]
		test	esi, esi
		jnz	loc_6E433B28
		xchg	ax, ax

loc_6E433E30:				; CODE XREF: sub_6E4339A0+182j
					; sub_6E4339A0+190j
		mov	[esp+6Ch+var_58], 100h
		xor	esi, esi
		jmp	loc_6E433B43
; ---------------------------------------------------------------------------
		align 10h

loc_6E433E40:				; CODE XREF: sub_6E4339A0+9Ej
					; sub_6E4339A0+A9j
		xor	ebp, ebp
		xor	edi, edi
		mov	ecx, [ebx+3Ch]
		test	ecx, ecx
		jnz	loc_6E433A76

loc_6E433E4F:				; CODE XREF: sub_6E4339A0+D0j
		mov	[esp+6Ch+var_40], 0
		mov	ecx, [ebx+48h]
		test	ecx, ecx
		jnz	loc_6E433A8F
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E433E70:				; CODE XREF: sub_6E4339A0+E9j
		mov	[esp+6Ch+var_48], 0
		jmp	loc_6E433A9D
; ---------------------------------------------------------------------------
		align 10h

loc_6E433E80:				; CODE XREF: sub_6E4339A0+1DFj
		xor	edi, edi
		jmp	loc_6E433BA0
; ---------------------------------------------------------------------------
		align 10h

loc_6E433E90:				; CODE XREF: sub_6E4339A0+8Bj
		xor	eax, eax
		mov	ebp, [ebx+2Ch]
		test	ebp, ebp
		setnz	al
		mov	[esp+6Ch+var_4C], eax
		jmp	loc_6E433A39
; ---------------------------------------------------------------------------
		align 10h

loc_6E433EB0:				; CODE XREF: sub_6E4339A0+370j
		mov	[esp+6Ch+var_40], 1
		mov	[esp+6Ch+var_48], 1
		jmp	loc_6E433D2B
; ---------------------------------------------------------------------------
		align 10h

loc_6E433ED0:				; CODE XREF: sub_6E4339A0+39Bj
		mov	[esp+6Ch+var_38], 0
		jmp	loc_6E433D55
; ---------------------------------------------------------------------------
		align 10h

loc_6E433EE0:				; CODE XREF: sub_6E4339A0+3FDj
					; sub_6E4339A0+406j
		or	esi, 20h
		mov	ecx, [esp+6Ch+var_58]
		or	ecx, 14h
		mov	[esp+6Ch+var_50], ecx
		cmp	[esp+6Ch+var_38], 0A3h
		jg	loc_6E433DAC
		or	edi, 20h
		mov	ebp, [esp+6Ch+var_44]
		or	ebp, 14h
		jmp	loc_6E433DAC
; ---------------------------------------------------------------------------

loc_6E433F0B:				; CODE XREF: sub_6E4339A0+2F5j
		mov	[esp+6Ch+var_6C], eax
		call	DH_size
		shl	eax, 3
		cmp	esi, eax
		setnl	al
		and	eax, 0FFh
		mov	[esp+6Ch+var_3C], eax
		mov	[esp+6Ch+var_38], 1
		jmp	loc_6E433A26
; ---------------------------------------------------------------------------

loc_6E433F31:				; CODE XREF: sub_6E4339A0+4Dj
		mov	[esp+6Ch+var_6C], eax
		call	RSA_size
		shl	eax, 3
		cmp	esi, eax
		setnl	al
		and	eax, 0FFh
		mov	[esp+6Ch+var_34], eax
		mov	[esp+6Ch+var_30], 1
		jmp	loc_6E433C86
; ---------------------------------------------------------------------------
		align 10h

loc_6E433F60:				; CODE XREF: sub_6E4339A0+411j
		or	esi, 40h
		or	[esp+6Ch+var_50], 10h
		cmp	[esp+6Ch+var_38], 0A3h
		jg	loc_6E433DB7
		or	edi, 40h
		or	ebp, 10h
		jmp	loc_6E433DB7
sub_6E4339A0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E433F90
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E433F90	proc near		; CODE XREF: sub_6E40CC50+12Ap
					; .text:6E433F81j

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	edi, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_24], 0
		mov	[esp+4Ch+var_20], 0
		mov	eax, [edi+58h]
		mov	eax, [eax+344h]
		mov	esi, [eax+0Ch]
		mov	ebp, [eax+10h]
		test	byte ptr [eax+20h], 2
		jz	short loc_6E433FFF
		mov	[esp+4Ch+var_4C], ebx
		call	X509_get_pubkey
		test	eax, eax
		jz	loc_6E434140
		mov	[esp+4Ch+var_4C], eax
		mov	[esp+4Ch+var_30], eax
		call	EVP_PKEY_bits
		mov	[esp+4Ch+var_34], eax
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], edx
		call	EVP_PKEY_free
		mov	eax, [esp+4Ch+var_34]
		cmp	eax, 0A3h
		jg	loc_6E434140

loc_6E433FFF:				; CODE XREF: sub_6E433F90+32j
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0FFFFFFFFh
		mov	[esp+4Ch+var_4C], ebx
		call	X509_check_purpose
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6E434044
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6E434044
		mov	[esp+4Ch+var_4C], eax
		call	OBJ_obj2nid
		lea	edx, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_44], edx
		lea	edx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		call	OBJ_find_sigid_algs

loc_6E434044:				; CODE XREF: sub_6E433F90+8Cj
					; sub_6E433F90+92j
		test	esi, 60h
		jz	loc_6E4340F0
		test	byte ptr [ebx+28h], 2
		jz	short loc_6E434060
		test	byte ptr [ebx+2Ch], 8
		jz	loc_6E434180

loc_6E434060:				; CODE XREF: sub_6E433F90+C4j
		test	esi, 40h
		jz	short loc_6E4340C0
		mov	eax, [edi]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	short loc_6E4340B0

loc_6E434074:				; CODE XREF: sub_6E433F90+125j
		cmp	[esp+4Ch+var_20], 198h
		jz	short loc_6E4340C0
		mov	[esp+4Ch+var_3C], 8FBh
		mov	[esp+4Ch+var_40], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+4Ch+var_44], 143h
		mov	[esp+4Ch+var_48], 117h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	short loc_6E434106
; ---------------------------------------------------------------------------
		align 10h

loc_6E4340B0:				; CODE XREF: sub_6E433F90+E2j
		cmp	eax, 302h
		jle	short loc_6E434074
		mov	esi, esi
		lea	edi, [edi+0]

loc_6E4340C0:				; CODE XREF: sub_6E433F90+D6j
					; sub_6E433F90+ECj
		and	esi, 20h
		jz	short loc_6E4340F0
		mov	eax, [edi]
		mov	edx, eax
		sar	edx, 8
		cmp	edx, 3
		jz	loc_6E4341C0

loc_6E4340D5:				; CODE XREF: sub_6E433F90+23Bj
		mov	eax, [esp+4Ch+var_20]
		cmp	eax, 6
		jz	short loc_6E4340F0
		cmp	eax, 13h
		jnz	short loc_6E434110
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4340F0:				; CODE XREF: sub_6E433F90+BAj
					; sub_6E433F90+133j ...
		and	ebp, 40h
		jz	short loc_6E434101
		test	byte ptr [ebx+28h], 2
		jz	short loc_6E434101
		test	byte ptr [ebx+2Ch], 80h
		jz	short loc_6E434150

loc_6E434101:				; CODE XREF: sub_6E433F90+163j
					; sub_6E433F90+169j
		mov	eax, 1

loc_6E434106:				; CODE XREF: sub_6E433F90+11Cj
					; sub_6E433F90+1EEj ...
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E434110:				; CODE XREF: sub_6E433F90+151j
		mov	[esp+4Ch+var_3C], 904h
		mov	[esp+4Ch+var_40], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+4Ch+var_44], 142h
		mov	[esp+4Ch+var_48], 117h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		lea	esi, [esi+0]

loc_6E434140:				; CODE XREF: sub_6E433F90+3Ej
					; sub_6E433F90+69j
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E434150:				; CODE XREF: sub_6E433F90+16Fj
		mov	[esp+4Ch+var_3C], 90Dh
		mov	[esp+4Ch+var_40], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+4Ch+var_44], 13Eh
		mov	[esp+4Ch+var_48], 117h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	short loc_6E434106
; ---------------------------------------------------------------------------

loc_6E434180:				; CODE XREF: sub_6E433F90+CAj
		mov	[esp+4Ch+var_3C], 8F4h
		mov	[esp+4Ch+var_40], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+4Ch+var_44], 13Dh
		mov	[esp+4Ch+var_48], 117h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E434106
; ---------------------------------------------------------------------------
		align 10h

loc_6E4341C0:				; CODE XREF: sub_6E433F90+13Fj
		cmp	eax, 302h
		jg	loc_6E4340F0
		jmp	loc_6E4340D5
sub_6E433F90	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E4341D0	proc near		; CODE XREF: sub_6E41D4F0+28p

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	eax, [esp+6Ch+arg_0]
		mov	ebx, [eax+98h]
		mov	eax, [eax+58h]
		mov	eax, [eax+344h]
		mov	[esp+6Ch+var_24], 0
		mov	[esp+6Ch+var_20], 0
		test	ebx, ebx
		jz	loc_6E4344B4
		mov	eax, [eax+20h]
		and	eax, 8
		cmp	eax, 1
		sbb	esi, esi
		and	esi, 200h
		add	esi, 200h
		mov	eax, [ebx+18h]
		test	eax, eax
		jz	loc_6E434520
		cmp	dword ptr [ebx+1Ch], 0
		jz	loc_6E4347FA
		mov	[esp+6Ch+var_30], 1
		mov	[esp+6Ch+var_34], 1
		jmp	loc_6E434536
; ---------------------------------------------------------------------------
		align 10h

loc_6E434250:				; CODE XREF: sub_6E4341D0+36Bj
		cmp	dword ptr [ebx+24h], 1
		sbb	eax, eax
		mov	[esp+6Ch+var_38], eax
		inc	[esp+6Ch+var_38]
		mov	[esp+6Ch+var_3C], eax
		inc	[esp+6Ch+var_3C]

loc_6E434266:				; CODE XREF: sub_6E4341D0+38Bj
					; sub_6E4341D0+671j
		mov	eax, [ebx+28h]
		test	eax, eax
		jz	loc_6E434760
		mov	[esp+6Ch+var_48], 1

loc_6E434279:				; CODE XREF: sub_6E4341D0+59Ej
		mov	edi, [ebx+30h]
		test	edi, edi
		jz	loc_6E434710
		mov	eax, [ebx+34h]
		test	eax, eax
		jz	loc_6E434710
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_size
		shl	eax, 3
		cmp	esi, eax
		setnl	al
		and	eax, 0FFh
		mov	edi, eax
		mov	ebp, 1
		mov	ecx, [ebx+3Ch]
		test	ecx, ecx
		jz	loc_6E43471F

loc_6E4342B6:				; CODE XREF: sub_6E4341D0+549j
		xor	eax, eax
		mov	edx, [ebx+40h]
		test	edx, edx
		setnz	al
		mov	[esp+6Ch+var_40], eax
		mov	ecx, [ebx+48h]
		test	ecx, ecx
		jz	loc_6E434740

loc_6E4342CF:				; CODE XREF: sub_6E4341D0+55Cj
		xor	eax, eax
		mov	edx, [ebx+4Ch]
		test	edx, edx
		setnz	al
		mov	[esp+6Ch+var_4C], eax

loc_6E4342DD:				; CODE XREF: sub_6E4341D0+578j
		mov	eax, [ebx+54h]
		test	eax, eax
		jz	loc_6E4346F0
		mov	eax, [ebx+58h]
		test	eax, eax
		jz	loc_6E4346F0
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_size
		shl	eax, 3
		cmp	esi, eax
		setnl	al
		and	eax, 0FFh
		mov	[esp+6Ch+var_50], eax
		mov	[esp+6Ch+var_44], 1

loc_6E434314:				; CODE XREF: sub_6E4341D0+530j
		mov	eax, [ebx+60h]
		test	eax, eax
		jz	loc_6E434690
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	loc_6E434692
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_size
		shl	eax, 3
		xor	ecx, ecx
		cmp	esi, eax
		setnl	cl
		mov	eax, 1
		mov	edx, [ebx+6Ch]
		mov	[esp+6Ch+var_54], edx
		test	edx, edx
		jz	loc_6E4346A3

loc_6E434350:				; CODE XREF: sub_6E4341D0+4CDj
		xor	edx, edx
		mov	esi, [ebx+70h]
		test	esi, esi
		setnz	dl
		mov	esi, [ebx+84h]
		test	esi, esi
		jz	loc_6E4346C0

loc_6E434368:				; CODE XREF: sub_6E4341D0+4DDj
		mov	esi, [ebx+88h]
		test	esi, esi
		jz	loc_6E4346C0
		mov	[esp+6Ch+var_58], 300h
		mov	esi, 200h
		cmp	dword ptr [ebx+78h], 0
		jz	loc_6E4346E0

loc_6E43438D:				; CODE XREF: sub_6E4341D0+4FEj
		cmp	dword ptr [ebx+7Ch], 0
		jz	loc_6E4346E0
		mov	esi, 200h

loc_6E43439C:				; CODE XREF: sub_6E4341D0+514j
		test	ebp, ebp
		jnz	short loc_6E4343AE
		cmp	[esp+6Ch+var_30], 0
		jz	short loc_6E4343B1
		cmp	[esp+6Ch+var_40], 0
		jz	short loc_6E4343B1

loc_6E4343AE:				; CODE XREF: sub_6E4341D0+1CEj
		or	esi, 1

loc_6E4343B1:				; CODE XREF: sub_6E4341D0+1D5j
					; sub_6E4341D0+1DCj
		test	edi, edi
		jnz	loc_6E434680
		mov	edi, [esp+6Ch+var_34]
		test	edi, edi
		jz	loc_6E434750
		mov	edi, [esp+6Ch+var_40]
		test	edi, edi
		jnz	loc_6E434680
		mov	edi, ebp
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4343E0:				; CODE XREF: sub_6E4341D0+4B5j
					; sub_6E4341D0+582j
		cmp	[esp+6Ch+var_3C], 0
		jz	short loc_6E4343EA
		or	edi, 8

loc_6E4343EA:				; CODE XREF: sub_6E4341D0+215j
		cmp	[esp+6Ch+var_38], 0
		jz	short loc_6E4343F4
		or	esi, 8

loc_6E4343F4:				; CODE XREF: sub_6E4341D0+21Fj
		cmp	[esp+6Ch+var_44], 0
		jz	short loc_6E4343FE
		or	esi, 2

loc_6E4343FE:				; CODE XREF: sub_6E4341D0+229j
		cmp	[esp+6Ch+var_50], 0
		jz	short loc_6E434408
		or	edi, 2

loc_6E434408:				; CODE XREF: sub_6E4341D0+233j
		test	eax, eax
		jz	short loc_6E43440F
		or	esi, 4

loc_6E43440F:				; CODE XREF: sub_6E4341D0+23Aj
		test	ecx, ecx
		jz	short loc_6E434416
		or	edi, 4

loc_6E434416:				; CODE XREF: sub_6E4341D0+241j
		test	ebp, ebp
		jnz	loc_6E434560
		mov	eax, [esp+6Ch+var_40]
		test	eax, eax
		jnz	loc_6E434560
		mov	eax, 4
		mov	ebp, 6
		mov	ecx, 2
		mov	[esp+6Ch+var_44], 0
		cmp	[esp+6Ch+var_4C], 0
		jz	loc_6E434587

loc_6E43444C:				; CODE XREF: sub_6E4341D0+3B1j
		or	[esp+6Ch+var_58], 2
		mov	[esp+6Ch+var_44], ecx
		mov	eax, [esp+6Ch+var_58]
		or	eax, 4
		mov	[esp+6Ch+var_50], eax
		test	edx, edx
		jnz	loc_6E43459C

loc_6E434468:				; CODE XREF: sub_6E4341D0+3C6j
					; sub_6E4341D0+49Dj ...
		mov	ecx, [esp+6Ch+var_48]
		test	ecx, ecx
		jz	short loc_6E43447C
		or	esi, 80h
		or	edi, 80h

loc_6E43447C:				; CODE XREF: sub_6E4341D0+29Ej
		or	esi, 100h
		mov	[ebx+8], esi
		mov	eax, [esp+6Ch+var_50]
		or	al, 80h
		mov	[ebx+0Ch], eax
		or	edi, 100h
		mov	[ebx+10h], edi
		or	ebp, 80h
		mov	[ebx+14h], ebp
		mov	dword ptr [ebx+4], 1
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+58h]
		mov	eax, [eax+344h]

loc_6E4344B4:				; CODE XREF: sub_6E4341D0+2Cj
		mov	edx, [eax+0Ch]
		mov	ecx, [eax+10h]
		test	dl, 60h
		jnz	short loc_6E4344C4
		test	cl, 40h
		jz	short loc_6E4344E0

loc_6E4344C4:				; CODE XREF: sub_6E4341D0+2EDj
		mov	eax, 5

loc_6E4344C9:				; CODE XREF: sub_6E4341D0+33Aj
					; sub_6E4341D0+345j ...
		lea	edx, [eax+eax]
		add	eax, edx
		lea	eax, [ebx+eax*4+30h]

loc_6E4344D2:				; CODE XREF: sub_6E4341D0+6E7j
					; sub_6E4341D0+6FCj
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4344E0:				; CODE XREF: sub_6E4341D0+2F2j
		test	dl, 2
		jnz	short loc_6E434510
		and	edx, 4
		jnz	loc_6E4347B0
		test	cl, 2
		jnz	loc_6E4347F0
		test	cl, 1
		jz	loc_6E434871
		xor	eax, eax
		mov	edx, [ebx+30h]
		test	edx, edx
		setz	al
		jmp	short loc_6E4344C9
; ---------------------------------------------------------------------------
		align 10h

loc_6E434510:				; CODE XREF: sub_6E4341D0+313j
		mov	eax, 3
		jmp	short loc_6E4344C9
; ---------------------------------------------------------------------------
		align 10h

loc_6E434520:				; CODE XREF: sub_6E4341D0+4Ej
		cmp	dword ptr [ebx+1Ch], 1
		sbb	eax, eax
		mov	[esp+6Ch+var_30], eax
		inc	[esp+6Ch+var_30]
		mov	[esp+6Ch+var_34], eax
		inc	[esp+6Ch+var_34]

loc_6E434536:				; CODE XREF: sub_6E4341D0+6Ej
					; sub_6E4341D0+64Bj
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	loc_6E434250
		cmp	dword ptr [ebx+24h], 0
		jz	loc_6E434820
		mov	[esp+6Ch+var_38], 1
		mov	[esp+6Ch+var_3C], 1
		jmp	loc_6E434266
; ---------------------------------------------------------------------------

loc_6E434560:				; CODE XREF: sub_6E4341D0+248j
					; sub_6E4341D0+254j
		or	[esp+6Ch+var_58], 1
		mov	eax, 5
		mov	ebp, 7
		mov	ecx, 3
		mov	[esp+6Ch+var_44], 1
		cmp	[esp+6Ch+var_4C], 0
		jnz	loc_6E43444C

loc_6E434587:				; CODE XREF: sub_6E4341D0+276j
		mov	ebp, eax
		mov	eax, [esp+6Ch+var_58]
		or	eax, 4
		mov	[esp+6Ch+var_50], eax
		test	edx, edx
		jz	loc_6E434468

loc_6E43459C:				; CODE XREF: sub_6E4341D0+292j
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 0FFFFFFFFh
		mov	eax, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_6C], eax
		call	X509_check_purpose
		mov	eax, [esp+6Ch+var_54]
		test	byte ptr [eax+28h], 2
		jz	loc_6E434780
		mov	eax, [eax+2Ch]
		mov	ecx, eax
		and	ecx, 8
		mov	[esp+6Ch+var_4C], ecx
		and	eax, 80h
		mov	[esp+6Ch+var_40], eax

loc_6E4345DB:				; CODE XREF: sub_6E4341D0+5C0j
		mov	eax, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_6C], eax
		call	X509_get_pubkey
		mov	ecx, eax
		test	eax, eax
		jz	loc_6E4347A0
		mov	[esp+6Ch+var_6C], eax
		mov	[esp+6Ch+var_3C], eax
		call	EVP_PKEY_bits
		mov	[esp+6Ch+var_38], eax
		mov	ecx, [esp+6Ch+var_3C]

loc_6E434605:				; CODE XREF: sub_6E4341D0+5D8j
		mov	[esp+6Ch+var_6C], ecx
		call	EVP_PKEY_free
		mov	eax, [esp+6Ch+var_54]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6E43463E
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6E43463E
		mov	[esp+6Ch+var_6C], eax
		call	OBJ_obj2nid
		lea	edx, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_64], edx
		lea	edx, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], eax
		call	OBJ_find_sigid_algs

loc_6E43463E:				; CODE XREF: sub_6E4341D0+446j
					; sub_6E4341D0+44Cj
		mov	eax, [esp+6Ch+var_4C]
		test	eax, eax
		jz	short loc_6E434667
		mov	eax, [esp+6Ch+var_24]
		cmp	eax, 6
		jz	loc_6E4347C0
		cmp	eax, 13h
		jz	loc_6E4347C0

loc_6E43465C:				; CODE XREF: sub_6E4341D0+606j
					; sub_6E4341D0+616j
		cmp	eax, 198h
		jz	loc_6E434850

loc_6E434667:				; CODE XREF: sub_6E4341D0+474j
					; sub_6E4341D0+690j ...
		mov	eax, [esp+6Ch+var_40]
		test	eax, eax
		jz	loc_6E434468
		or	[esp+6Ch+var_50], 40h
		or	ebp, 40h
		jmp	loc_6E434468
; ---------------------------------------------------------------------------

loc_6E434680:				; CODE XREF: sub_6E4341D0+1E3j
					; sub_6E4341D0+1FBj
		mov	edi, 1
		jmp	loc_6E4343E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E434690:				; CODE XREF: sub_6E4341D0+149j
		xor	eax, eax

loc_6E434692:				; CODE XREF: sub_6E4341D0+154j
		xor	ecx, ecx
		mov	edx, [ebx+6Ch]
		mov	[esp+6Ch+var_54], edx
		test	edx, edx
		jnz	loc_6E434350

loc_6E4346A3:				; CODE XREF: sub_6E4341D0+17Aj
		xor	edx, edx
		mov	esi, [ebx+84h]
		test	esi, esi
		jnz	loc_6E434368
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4346C0:				; CODE XREF: sub_6E4341D0+192j
					; sub_6E4341D0+1A0j
		mov	[esp+6Ch+var_58], 100h
		xor	esi, esi
		cmp	dword ptr [ebx+78h], 0
		jnz	loc_6E43438D
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4346E0:				; CODE XREF: sub_6E4341D0+1B7j
					; sub_6E4341D0+1C1j
		mov	[esp+6Ch+var_58], esi
		jmp	loc_6E43439C
; ---------------------------------------------------------------------------
		align 10h

loc_6E4346F0:				; CODE XREF: sub_6E4341D0+112j
					; sub_6E4341D0+11Dj
		mov	[esp+6Ch+var_44], 0
		mov	[esp+6Ch+var_50], 0
		jmp	loc_6E434314
; ---------------------------------------------------------------------------
		align 10h

loc_6E434710:				; CODE XREF: sub_6E4341D0+AEj
					; sub_6E4341D0+B9j
		xor	ebp, ebp
		xor	edi, edi
		mov	ecx, [ebx+3Ch]
		test	ecx, ecx
		jnz	loc_6E4342B6

loc_6E43471F:				; CODE XREF: sub_6E4341D0+E0j
		mov	[esp+6Ch+var_40], 0
		mov	ecx, [ebx+48h]
		test	ecx, ecx
		jnz	loc_6E4342CF
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E434740:				; CODE XREF: sub_6E4341D0+F9j
		mov	[esp+6Ch+var_4C], 0
		jmp	loc_6E4342DD
; ---------------------------------------------------------------------------
		align 10h

loc_6E434750:				; CODE XREF: sub_6E4341D0+1EFj
		xor	edi, edi
		jmp	loc_6E4343E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E434760:				; CODE XREF: sub_6E4341D0+9Bj
		xor	eax, eax
		mov	ebp, [ebx+2Ch]
		test	ebp, ebp
		setnz	al
		mov	[esp+6Ch+var_48], eax
		jmp	loc_6E434279
; ---------------------------------------------------------------------------
		align 10h

loc_6E434780:				; CODE XREF: sub_6E4341D0+3F0j
		mov	[esp+6Ch+var_4C], 1
		mov	[esp+6Ch+var_40], 1
		jmp	loc_6E4345DB
; ---------------------------------------------------------------------------
		align 10h

loc_6E4347A0:				; CODE XREF: sub_6E4341D0+41Bj
		mov	[esp+6Ch+var_38], 0
		jmp	loc_6E434605
; ---------------------------------------------------------------------------
		align 10h

loc_6E4347B0:				; CODE XREF: sub_6E4341D0+318j
		mov	eax, 4
		jmp	loc_6E4344C9
; ---------------------------------------------------------------------------
		align 10h

loc_6E4347C0:				; CODE XREF: sub_6E4341D0+47Dj
					; sub_6E4341D0+486j
		or	esi, 20h
		mov	ecx, [esp+6Ch+var_58]
		or	ecx, 14h
		mov	[esp+6Ch+var_50], ecx
		cmp	[esp+6Ch+var_38], 0A3h
		jg	loc_6E43465C
		or	edi, 20h
		mov	ebp, [esp+6Ch+var_44]
		or	ebp, 14h
		jmp	loc_6E43465C
; ---------------------------------------------------------------------------
		align 10h

loc_6E4347F0:				; CODE XREF: sub_6E4341D0+321j
		mov	eax, 2
		jmp	loc_6E4344C9
; ---------------------------------------------------------------------------

loc_6E4347FA:				; CODE XREF: sub_6E4341D0+58j
		mov	[esp+6Ch+var_6C], eax
		call	RSA_size
		shl	eax, 3
		cmp	eax, esi
		setle	al
		and	eax, 0FFh
		mov	[esp+6Ch+var_34], eax
		mov	[esp+6Ch+var_30], 1
		jmp	loc_6E434536
; ---------------------------------------------------------------------------

loc_6E434820:				; CODE XREF: sub_6E4341D0+375j
		mov	[esp+6Ch+var_6C], eax
		call	DH_size
		shl	eax, 3
		cmp	esi, eax
		setnl	al
		and	eax, 0FFh
		mov	[esp+6Ch+var_3C], eax
		mov	[esp+6Ch+var_38], 1
		jmp	loc_6E434266
; ---------------------------------------------------------------------------
		align 10h

loc_6E434850:				; CODE XREF: sub_6E4341D0+491j
		or	esi, 40h
		or	[esp+6Ch+var_50], 10h
		cmp	[esp+6Ch+var_38], 0A3h
		jg	loc_6E434667
		or	edi, 40h
		or	ebp, 10h
		jmp	loc_6E434667
; ---------------------------------------------------------------------------

loc_6E434871:				; CODE XREF: sub_6E4341D0+32Aj
		test	cl, 20h
		jnz	short loc_6E4348CA
		test	ch, 1
		jnz	short loc_6E4348C0
		mov	eax, 7
		and	ch, 2
		jnz	loc_6E4344C9
		mov	[esp+6Ch+var_5C], 944h
		mov	[esp+6Ch+var_60], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+6Ch+var_64], 44h
		mov	[esp+6Ch+var_68], 13Dh
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E4344D2
; ---------------------------------------------------------------------------
		align 10h

loc_6E4348C0:				; CODE XREF: sub_6E4341D0+6A9j
		mov	eax, 6
		jmp	loc_6E4344C9
; ---------------------------------------------------------------------------

loc_6E4348CA:				; CODE XREF: sub_6E4341D0+6A4j
		xor	eax, eax
		jmp	loc_6E4344D2
sub_6E4341D0	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E4348E0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4348E0	proc near		; CODE XREF: .text:6E405BE3p
					; sub_6E406650+EBAp ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	eax, [esp+6Ch+arg_0]
		mov	ebx, [eax+98h]
		mov	eax, [eax+58h]
		mov	eax, [eax+344h]
		mov	[esp+6Ch+var_24], 0
		mov	[esp+6Ch+var_20], 0
		test	ebx, ebx
		jz	loc_6E434BC4
		mov	eax, [eax+20h]
		and	eax, 8
		cmp	eax, 1
		sbb	esi, esi
		and	esi, 200h
		add	esi, 200h
		mov	eax, [ebx+18h]
		test	eax, eax
		jz	loc_6E434C40
		cmp	dword ptr [ebx+1Ch], 0
		jz	loc_6E434F30
		mov	[esp+6Ch+var_30], 1
		mov	[esp+6Ch+var_34], 1
		jmp	loc_6E434C56
; ---------------------------------------------------------------------------
		align 10h

loc_6E434960:				; CODE XREF: sub_6E4348E0+37Bj
		cmp	dword ptr [ebx+24h], 1
		sbb	eax, eax
		mov	[esp+6Ch+var_38], eax
		inc	[esp+6Ch+var_38]
		mov	[esp+6Ch+var_3C], eax
		inc	[esp+6Ch+var_3C]

loc_6E434976:				; CODE XREF: sub_6E4348E0+39Bj
					; sub_6E4348E0+64Bj
		mov	eax, [ebx+28h]
		test	eax, eax
		jz	loc_6E434E70
		mov	[esp+6Ch+var_4C], 1

loc_6E434989:				; CODE XREF: sub_6E4348E0+59Ej
		mov	edi, [ebx+30h]
		test	edi, edi
		jz	loc_6E434E20
		mov	eax, [ebx+34h]
		test	eax, eax
		jz	loc_6E434E20
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_size
		shl	eax, 3
		cmp	esi, eax
		setnl	al
		and	eax, 0FFh
		mov	edi, eax
		mov	ebp, 1
		mov	ecx, [ebx+3Ch]
		test	ecx, ecx
		jz	loc_6E434E2F

loc_6E4349C6:				; CODE XREF: sub_6E4348E0+549j
		xor	eax, eax
		mov	edx, [ebx+40h]
		test	edx, edx
		setnz	al
		mov	[esp+6Ch+var_40], eax
		mov	ecx, [ebx+48h]
		test	ecx, ecx
		jz	loc_6E434E50

loc_6E4349DF:				; CODE XREF: sub_6E4348E0+55Cj
		xor	eax, eax
		mov	edx, [ebx+4Ch]
		test	edx, edx
		setnz	al
		mov	[esp+6Ch+var_48], eax

loc_6E4349ED:				; CODE XREF: sub_6E4348E0+578j
		mov	eax, [ebx+54h]
		test	eax, eax
		jz	loc_6E434E00
		mov	eax, [ebx+58h]
		test	eax, eax
		jz	loc_6E434E00
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_size
		shl	eax, 3
		cmp	esi, eax
		setnl	al
		and	eax, 0FFh
		mov	[esp+6Ch+var_50], eax
		mov	[esp+6Ch+var_44], 1

loc_6E434A24:				; CODE XREF: sub_6E4348E0+530j
		mov	eax, [ebx+60h]
		test	eax, eax
		jz	loc_6E434DE0
		mov	eax, [ebx+64h]
		test	eax, eax
		jz	loc_6E434DE2
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_size
		shl	eax, 3
		xor	ecx, ecx
		cmp	esi, eax
		setnl	cl
		mov	eax, 1
		mov	edx, [ebx+6Ch]
		mov	[esp+6Ch+var_54], edx
		test	edx, edx
		jz	loc_6E434DF3

loc_6E434A60:				; CODE XREF: sub_6E4348E0+50Dj
		xor	edx, edx
		mov	esi, [ebx+70h]
		test	esi, esi
		setnz	dl

loc_6E434A6A:				; CODE XREF: sub_6E4348E0+515j
		mov	esi, [ebx+84h]
		test	esi, esi
		jz	loc_6E434DB0
		mov	esi, [ebx+88h]
		test	esi, esi
		jz	loc_6E434DB0
		mov	[esp+6Ch+var_58], 300h
		mov	esi, 200h
		cmp	dword ptr [ebx+78h], 0
		jz	loc_6E434DD0

loc_6E434A9D:				; CODE XREF: sub_6E4348E0+4DEj
		cmp	dword ptr [ebx+7Ch], 0
		jz	loc_6E434DD0
		mov	esi, 200h

loc_6E434AAC:				; CODE XREF: sub_6E4348E0+4F4j
		test	ebp, ebp
		jnz	short loc_6E434ABE
		cmp	[esp+6Ch+var_30], 0
		jz	short loc_6E434AC1
		cmp	[esp+6Ch+var_40], 0
		jz	short loc_6E434AC1

loc_6E434ABE:				; CODE XREF: sub_6E4348E0+1CEj
		or	esi, 1

loc_6E434AC1:				; CODE XREF: sub_6E4348E0+1D5j
					; sub_6E4348E0+1DCj
		test	edi, edi
		jnz	loc_6E434DA0
		mov	edi, [esp+6Ch+var_34]
		test	edi, edi
		jz	loc_6E434E60
		mov	edi, [esp+6Ch+var_40]
		test	edi, edi
		jnz	loc_6E434DA0
		mov	edi, ebp
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E434AF0:				; CODE XREF: sub_6E4348E0+4C5j
					; sub_6E4348E0+582j
		cmp	[esp+6Ch+var_3C], 0
		jz	short loc_6E434AFA
		or	edi, 8

loc_6E434AFA:				; CODE XREF: sub_6E4348E0+215j
		cmp	[esp+6Ch+var_38], 0
		jz	short loc_6E434B04
		or	esi, 8

loc_6E434B04:				; CODE XREF: sub_6E4348E0+21Fj
		cmp	[esp+6Ch+var_44], 0
		jz	short loc_6E434B0E
		or	esi, 2

loc_6E434B0E:				; CODE XREF: sub_6E4348E0+229j
		cmp	[esp+6Ch+var_50], 0
		jz	short loc_6E434B18
		or	edi, 2

loc_6E434B18:				; CODE XREF: sub_6E4348E0+233j
		test	eax, eax
		jz	short loc_6E434B1F
		or	esi, 4

loc_6E434B1F:				; CODE XREF: sub_6E4348E0+23Aj
		test	ecx, ecx
		jz	short loc_6E434B26
		or	edi, 4

loc_6E434B26:				; CODE XREF: sub_6E4348E0+241j
		test	ebp, ebp
		jnz	loc_6E434C80
		mov	eax, [esp+6Ch+var_40]
		test	eax, eax
		jnz	loc_6E434C80
		mov	eax, 4
		mov	ebp, 6
		mov	ecx, 2
		mov	[esp+6Ch+var_44], 0
		cmp	[esp+6Ch+var_48], 0
		jz	loc_6E434CA7

loc_6E434B5C:				; CODE XREF: sub_6E4348E0+3C1j
		or	[esp+6Ch+var_58], 2
		mov	[esp+6Ch+var_44], ecx
		mov	eax, [esp+6Ch+var_58]
		or	eax, 4
		mov	[esp+6Ch+var_50], eax
		test	edx, edx
		jnz	loc_6E434CBC

loc_6E434B78:				; CODE XREF: sub_6E4348E0+3D6j
					; sub_6E4348E0+4ADj ...
		mov	ecx, [esp+6Ch+var_4C]
		test	ecx, ecx
		jz	short loc_6E434B8C
		or	esi, 80h
		or	edi, 80h

loc_6E434B8C:				; CODE XREF: sub_6E4348E0+29Ej
		or	esi, 100h
		mov	[ebx+8], esi
		mov	eax, [esp+6Ch+var_50]
		or	al, 80h
		mov	[ebx+0Ch], eax
		or	edi, 100h
		mov	[ebx+10h], edi
		or	ebp, 80h
		mov	[ebx+14h], ebp
		mov	dword ptr [ebx+4], 1
		mov	eax, [esp+6Ch+arg_0]
		mov	eax, [eax+58h]
		mov	eax, [eax+344h]

loc_6E434BC4:				; CODE XREF: sub_6E4348E0+2Cj
		mov	edx, [eax+0Ch]
		mov	ecx, [eax+10h]
		test	dl, 60h
		jnz	short loc_6E434BD4
		test	cl, 40h
		jz	short loc_6E434C00

loc_6E434BD4:				; CODE XREF: sub_6E4348E0+2EDj
		mov	eax, 5

loc_6E434BD9:				; CODE XREF: sub_6E4348E0+34Aj
					; sub_6E4348E0+355j ...
		lea	edx, [eax+eax]
		add	eax, edx
		lea	eax, [ebx+eax*4+30h]
		test	eax, eax
		jz	loc_6E434FC5
		mov	eax, [eax]

loc_6E434BEC:				; CODE XREF: sub_6E4348E0+6E7j
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E434C00:				; CODE XREF: sub_6E4348E0+2F2j
		test	dl, 2
		jnz	short loc_6E434C30
		and	edx, 4
		jnz	loc_6E434EC0
		test	cl, 2
		jnz	loc_6E434F00
		test	cl, 1
		jz	loc_6E434F81
		xor	eax, eax
		mov	edx, [ebx+30h]
		test	edx, edx
		setz	al
		jmp	short loc_6E434BD9
; ---------------------------------------------------------------------------
		align 10h

loc_6E434C30:				; CODE XREF: sub_6E4348E0+323j
		mov	eax, 3
		jmp	short loc_6E434BD9
; ---------------------------------------------------------------------------
		align 10h

loc_6E434C40:				; CODE XREF: sub_6E4348E0+4Ej
		cmp	dword ptr [ebx+1Ch], 1
		sbb	eax, eax
		mov	[esp+6Ch+var_30], eax
		inc	[esp+6Ch+var_30]
		mov	[esp+6Ch+var_34], eax
		inc	[esp+6Ch+var_34]

loc_6E434C56:				; CODE XREF: sub_6E4348E0+6Ej
					; sub_6E4348E0+671j
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	loc_6E434960
		cmp	dword ptr [ebx+24h], 0
		jz	loc_6E434F0A
		mov	[esp+6Ch+var_38], 1
		mov	[esp+6Ch+var_3C], 1
		jmp	loc_6E434976
; ---------------------------------------------------------------------------

loc_6E434C80:				; CODE XREF: sub_6E4348E0+248j
					; sub_6E4348E0+254j
		or	[esp+6Ch+var_58], 1
		mov	eax, 5
		mov	ebp, 7
		mov	ecx, 3
		mov	[esp+6Ch+var_44], 1
		cmp	[esp+6Ch+var_48], 0
		jnz	loc_6E434B5C

loc_6E434CA7:				; CODE XREF: sub_6E4348E0+276j
		mov	ebp, eax
		mov	eax, [esp+6Ch+var_58]
		or	eax, 4
		mov	[esp+6Ch+var_50], eax
		test	edx, edx
		jz	loc_6E434B78

loc_6E434CBC:				; CODE XREF: sub_6E4348E0+292j
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 0FFFFFFFFh
		mov	eax, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_6C], eax
		call	X509_check_purpose
		mov	eax, [esp+6Ch+var_54]
		test	byte ptr [eax+28h], 2
		jz	loc_6E434E90
		mov	eax, [eax+2Ch]
		mov	ecx, eax
		and	ecx, 8
		mov	[esp+6Ch+var_48], ecx
		and	eax, 80h
		mov	[esp+6Ch+var_40], eax

loc_6E434CFB:				; CODE XREF: sub_6E4348E0+5C0j
		mov	eax, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_6C], eax
		call	X509_get_pubkey
		mov	ecx, eax
		test	eax, eax
		jz	loc_6E434EB0
		mov	[esp+6Ch+var_6C], eax
		mov	[esp+6Ch+var_3C], eax
		call	EVP_PKEY_bits
		mov	[esp+6Ch+var_38], eax
		mov	ecx, [esp+6Ch+var_3C]

loc_6E434D25:				; CODE XREF: sub_6E4348E0+5D8j
		mov	[esp+6Ch+var_6C], ecx
		call	EVP_PKEY_free
		mov	eax, [esp+6Ch+var_54]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6E434D5E
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6E434D5E
		mov	[esp+6Ch+var_6C], eax
		call	OBJ_obj2nid
		lea	edx, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_64], edx
		lea	edx, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], eax
		call	OBJ_find_sigid_algs

loc_6E434D5E:				; CODE XREF: sub_6E4348E0+456j
					; sub_6E4348E0+45Cj
		mov	eax, [esp+6Ch+var_48]
		test	eax, eax
		jz	short loc_6E434D87
		mov	eax, [esp+6Ch+var_24]
		cmp	eax, 6
		jz	loc_6E434ED0
		cmp	eax, 13h
		jz	loc_6E434ED0

loc_6E434D7C:				; CODE XREF: sub_6E4348E0+606j
					; sub_6E4348E0+616j
		cmp	eax, 198h
		jz	loc_6E434F60

loc_6E434D87:				; CODE XREF: sub_6E4348E0+484j
					; sub_6E4348E0+690j ...
		mov	eax, [esp+6Ch+var_40]
		test	eax, eax
		jz	loc_6E434B78
		or	[esp+6Ch+var_50], 40h
		or	ebp, 40h
		jmp	loc_6E434B78
; ---------------------------------------------------------------------------

loc_6E434DA0:				; CODE XREF: sub_6E4348E0+1E3j
					; sub_6E4348E0+1FBj
		mov	edi, 1
		jmp	loc_6E434AF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E434DB0:				; CODE XREF: sub_6E4348E0+192j
					; sub_6E4348E0+1A0j
		mov	[esp+6Ch+var_58], 100h
		xor	esi, esi
		cmp	dword ptr [ebx+78h], 0
		jnz	loc_6E434A9D
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E434DD0:				; CODE XREF: sub_6E4348E0+1B7j
					; sub_6E4348E0+1C1j
		mov	[esp+6Ch+var_58], esi
		jmp	loc_6E434AAC
; ---------------------------------------------------------------------------
		align 10h

loc_6E434DE0:				; CODE XREF: sub_6E4348E0+149j
		xor	eax, eax

loc_6E434DE2:				; CODE XREF: sub_6E4348E0+154j
		xor	ecx, ecx
		mov	edx, [ebx+6Ch]
		mov	[esp+6Ch+var_54], edx
		test	edx, edx
		jnz	loc_6E434A60

loc_6E434DF3:				; CODE XREF: sub_6E4348E0+17Aj
		xor	edx, edx
		jmp	loc_6E434A6A
; ---------------------------------------------------------------------------
		align 10h

loc_6E434E00:				; CODE XREF: sub_6E4348E0+112j
					; sub_6E4348E0+11Dj
		mov	[esp+6Ch+var_44], 0
		mov	[esp+6Ch+var_50], 0
		jmp	loc_6E434A24
; ---------------------------------------------------------------------------
		align 10h

loc_6E434E20:				; CODE XREF: sub_6E4348E0+AEj
					; sub_6E4348E0+B9j
		xor	ebp, ebp
		xor	edi, edi
		mov	ecx, [ebx+3Ch]
		test	ecx, ecx
		jnz	loc_6E4349C6

loc_6E434E2F:				; CODE XREF: sub_6E4348E0+E0j
		mov	[esp+6Ch+var_40], 0
		mov	ecx, [ebx+48h]
		test	ecx, ecx
		jnz	loc_6E4349DF
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E434E50:				; CODE XREF: sub_6E4348E0+F9j
		mov	[esp+6Ch+var_48], 0
		jmp	loc_6E4349ED
; ---------------------------------------------------------------------------
		align 10h

loc_6E434E60:				; CODE XREF: sub_6E4348E0+1EFj
		xor	edi, edi
		jmp	loc_6E434AF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E434E70:				; CODE XREF: sub_6E4348E0+9Bj
		xor	eax, eax
		mov	ebp, [ebx+2Ch]
		test	ebp, ebp
		setnz	al
		mov	[esp+6Ch+var_4C], eax
		jmp	loc_6E434989
; ---------------------------------------------------------------------------
		align 10h

loc_6E434E90:				; CODE XREF: sub_6E4348E0+400j
		mov	[esp+6Ch+var_48], 1
		mov	[esp+6Ch+var_40], 1
		jmp	loc_6E434CFB
; ---------------------------------------------------------------------------
		align 10h

loc_6E434EB0:				; CODE XREF: sub_6E4348E0+42Bj
		mov	[esp+6Ch+var_38], 0
		jmp	loc_6E434D25
; ---------------------------------------------------------------------------
		align 10h

loc_6E434EC0:				; CODE XREF: sub_6E4348E0+328j
		mov	eax, 4
		jmp	loc_6E434BD9
; ---------------------------------------------------------------------------
		align 10h

loc_6E434ED0:				; CODE XREF: sub_6E4348E0+48Dj
					; sub_6E4348E0+496j
		or	esi, 20h
		mov	ecx, [esp+6Ch+var_58]
		or	ecx, 14h
		mov	[esp+6Ch+var_50], ecx
		cmp	[esp+6Ch+var_38], 0A3h
		jg	loc_6E434D7C
		or	edi, 20h
		mov	ebp, [esp+6Ch+var_44]
		or	ebp, 14h
		jmp	loc_6E434D7C
; ---------------------------------------------------------------------------
		align 10h

loc_6E434F00:				; CODE XREF: sub_6E4348E0+331j
		mov	eax, 2
		jmp	loc_6E434BD9
; ---------------------------------------------------------------------------

loc_6E434F0A:				; CODE XREF: sub_6E4348E0+385j
		mov	[esp+6Ch+var_6C], eax
		call	DH_size
		shl	eax, 3
		cmp	esi, eax
		setnl	al
		and	eax, 0FFh
		mov	[esp+6Ch+var_3C], eax
		mov	[esp+6Ch+var_38], 1
		jmp	loc_6E434976
; ---------------------------------------------------------------------------

loc_6E434F30:				; CODE XREF: sub_6E4348E0+58j
		mov	[esp+6Ch+var_6C], eax
		call	RSA_size
		shl	eax, 3
		cmp	eax, esi
		setle	al
		and	eax, 0FFh
		mov	[esp+6Ch+var_34], eax
		mov	[esp+6Ch+var_30], 1
		jmp	loc_6E434C56
; ---------------------------------------------------------------------------
		align 10h

loc_6E434F60:				; CODE XREF: sub_6E4348E0+4A1j
		or	esi, 40h
		or	[esp+6Ch+var_50], 10h
		cmp	[esp+6Ch+var_38], 0A3h
		jg	loc_6E434D87
		or	edi, 40h
		or	ebp, 10h
		jmp	loc_6E434D87
; ---------------------------------------------------------------------------

loc_6E434F81:				; CODE XREF: sub_6E4348E0+33Aj
		test	cl, 20h
		jnz	short loc_6E434FC5
		test	ch, 1
		jnz	short loc_6E434FCC
		mov	eax, 7
		and	ch, 2
		jnz	loc_6E434BD9
		mov	[esp+6Ch+var_5C], 944h
		mov	[esp+6Ch+var_60], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+6Ch+var_64], 44h
		mov	[esp+6Ch+var_68], 13Dh
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error

loc_6E434FC5:				; CODE XREF: sub_6E4348E0+304j
					; sub_6E4348E0+6A4j
		xor	eax, eax
		jmp	loc_6E434BEC
; ---------------------------------------------------------------------------

loc_6E434FCC:				; CODE XREF: sub_6E4348E0+6A9j
		mov	eax, 6
		jmp	loc_6E434BD9
sub_6E4348E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E434FE0	proc near		; CODE XREF: sub_6E402830+9FFp
					; sub_6E4223A0+7BFp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_8]
		mov	eax, [esp+2Ch+arg_4]
		mov	edx, [eax+10h]
		mov	eax, [esp+2Ch+arg_0]
		mov	ecx, [eax+98h]
		test	dl, 2
		jz	short loc_6E435030
		mov	eax, [ecx+4Ch]
		test	eax, eax
		jz	short loc_6E435030
		mov	edx, 2

loc_6E43500A:				; CODE XREF: sub_6E434FE0+61j
					; sub_6E434FE0+81j ...
		test	ebx, ebx
		jz	short loc_6E43501E
		lea	eax, [edx+edx]
		add	edx, eax
		lea	eax, [ecx+edx*4]
		mov	edx, [eax+38h]
		mov	[ebx], edx
		mov	eax, [eax+34h]

loc_6E43501E:				; CODE XREF: sub_6E434FE0+2Cj
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435030:				; CODE XREF: sub_6E434FE0+1Cj
					; sub_6E434FE0+23j
		test	dl, 1
		jz	short loc_6E435050
		mov	eax, [ecx+40h]
		test	eax, eax
		jz	short loc_6E4350B0
		mov	edx, 1
		jmp	short loc_6E43500A
; ---------------------------------------------------------------------------
		align 10h

loc_6E435050:				; CODE XREF: sub_6E434FE0+53j
		and	edx, 40h
		jz	short loc_6E435070
		mov	eax, [ecx+70h]
		test	eax, eax
		jz	short loc_6E435070
		mov	edx, 5
		jmp	short loc_6E43500A
; ---------------------------------------------------------------------------
		align 10h

loc_6E435070:				; CODE XREF: sub_6E434FE0+73j
					; sub_6E434FE0+7Aj ...
		mov	[esp+2Ch+var_1C], 96Ah
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 44h
		mov	[esp+2Ch+var_28], 0B7h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4350B0:				; CODE XREF: sub_6E434FE0+5Aj
		mov	eax, [ecx+34h]
		test	eax, eax
		jz	short loc_6E435070
		xor	edx, edx
		jmp	loc_6E43500A
sub_6E434FE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4350C0	proc near		; CODE XREF: sub_6E406650+E5Bp
					; sub_6E40D250+402p ...

Time		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	esi, [esp+3Ch+arg_4]
		mov	eax, [ebx+0C0h]
		mov	edi, [eax+44h]
		test	edi, edi
		jz	loc_6E43516C
		mov	edx, [ebx+170h]
		mov	edi, [edx+20h]
		mov	ebp, esi
		and	ebp, edi
		jz	short loc_6E435160
		mov	ecx, [ebx+6Ch]
		test	ecx, ecx
		jnz	short loc_6E435160
		test	edi, 200h
		jz	loc_6E4351E0

loc_6E435102:				; CODE XREF: sub_6E4350C0+13Aj
		mov	eax, [edx+28h]
		test	eax, eax
		jz	short loc_6E435160
		mov	[esp+3Ch+var_2C], 982h
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 0Eh
		mov	[esp+3Ch+var_38], 1
		mov	eax, [ebx+0C0h]
		add	eax, 0A4h
		mov	[esp+3Ch+Time],	eax
		call	CRYPTO_add_lock
		mov	eax, [ebx+170h]
		mov	eax, [eax+28h]
		mov	edx, [ebx+0C0h]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+Time],	ebx
		call	eax
		test	eax, eax
		jz	short loc_6E4351D0
		nop
		lea	esi, [esi+0]

loc_6E435160:				; CODE XREF: sub_6E4350C0+2Dj
					; sub_6E4350C0+34j ...
		and	edi, 80h
		jnz	short loc_6E43516C
		cmp	esi, ebp
		jz	short loc_6E435180

loc_6E43516C:				; CODE XREF: sub_6E4350C0+1Aj
					; sub_6E4350C0+A6j ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435180:				; CODE XREF: sub_6E4350C0+AAj
		mov	eax, [ebx+170h]
		and	esi, 1
		jz	short loc_6E4351C0
		cmp	byte ptr [eax+3Ch], 0FFh
		setz	al

loc_6E435192:				; CODE XREF: sub_6E4350C0+107j
		test	al, al
		jz	short loc_6E43516C
		mov	[esp+3Ch+Time],	0 ; Time
		call	time
		mov	edx, [ebx+170h]
		mov	[esp+3Ch+arg_4], eax
		mov	[esp+3Ch+arg_0], edx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	SSL_CTX_flush_sessions
; ---------------------------------------------------------------------------
		align 10h

loc_6E4351C0:				; CODE XREF: sub_6E4350C0+C9j
		cmp	byte ptr [eax+48h], 0FFh
		setz	al
		jmp	short loc_6E435192
; ---------------------------------------------------------------------------
		align 10h

loc_6E4351D0:				; CODE XREF: sub_6E4350C0+96j
		mov	eax, [ebx+0C0h]
		mov	[esp+3Ch+Time],	eax
		call	SSL_SESSION_free
		jmp	short loc_6E435160
; ---------------------------------------------------------------------------

loc_6E4351E0:				; CODE XREF: sub_6E4350C0+3Cj
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+Time],	edx
		call	SSL_CTX_add_session
		test	eax, eax
		jz	loc_6E435160
		mov	edx, [ebx+170h]
		jmp	loc_6E435102
sub_6E4350C0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  66. SSL_get_ssl_method

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_ssl_method
SSL_get_ssl_method proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+8]
		retn
SSL_get_ssl_method endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  91. SSL_set_ssl_method

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_ssl_method
SSL_set_ssl_method proc	near		; CODE XREF: SSL_set_session+3Bp
					; SSL_set_session+E0p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_4]
		mov	eax, [ebx+8]
		cmp	eax, esi
		jz	short loc_6E4352A0
		mov	edx, [ebx+20h]
		test	edx, edx
		jz	short loc_6E435290
		xor	ecx, ecx
		cmp	edx, [eax+14h]
		setz	cl
		mov	edi, ecx

loc_6E435236:				; CODE XREF: SSL_set_ssl_method+85j
		mov	ecx, [esi]
		cmp	[eax], ecx
		jz	short loc_6E435270
		mov	eax, [eax+0Ch]
		mov	[esp+1Ch+var_1C], ebx
		call	eax
		mov	[ebx+8], esi
		mov	eax, [esi+4]
		mov	[esp+1Ch+var_1C], ebx
		call	eax
		cmp	edi, 1
		jz	short loc_6E43527D

loc_6E435254:				; CODE XREF: SSL_set_ssl_method+6Bj
		test	edi, edi
		jnz	short loc_6E43525E
		mov	edx, [esi+10h]
		mov	[ebx+20h], edx

loc_6E43525E:				; CODE XREF: SSL_set_ssl_method+46j
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435270:				; CODE XREF: SSL_set_ssl_method+2Aj
		mov	[ebx+8], esi
		mov	eax, 1
		cmp	edi, 1
		jnz	short loc_6E435254

loc_6E43527D:				; CODE XREF: SSL_set_ssl_method+42j
		mov	edx, [esi+14h]
		mov	[ebx+20h], edx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435290:				; CODE XREF: SSL_set_ssl_method+1Aj
		mov	edi, 0FFFFFFFFh
		jmp	short loc_6E435236
; ---------------------------------------------------------------------------
		align 10h

loc_6E4352A0:				; CODE XREF: SSL_set_ssl_method+13j
		mov	eax, 1
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
SSL_set_ssl_method endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  58. SSL_get_error

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_error
SSL_get_error	proc near		; CODE XREF: sub_6E4438C0+46p
					; sub_6E443A70+46p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		test	ebx, ebx
		jle	short loc_6E4352D0
		xor	eax, eax

loc_6E4352BE:				; CODE XREF: SSL_get_error+3Ej
					; SSL_get_error+58j ...
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4352D0:				; CODE XREF: SSL_get_error+Aj
		call	ERR_peek_error
		test	eax, eax
		jz	short loc_6E4352F0
		shr	eax, 18h
		cmp	eax, 2
		setz	al
		and	eax, 0FFh
		lea	eax, ds:1[eax*4]
		jmp	short loc_6E4352BE
; ---------------------------------------------------------------------------

loc_6E4352F0:				; CODE XREF: SSL_get_error+27j
		mov	eax, [esp+1Ch+arg_0]
		test	ebx, ebx
		jnz	short loc_6E435330
		cmp	dword ptr [eax], 2
		jz	short loc_6E435320
		test	byte ptr [eax+30h], 2
		jnz	short loc_6E43530A

loc_6E435303:				; CODE XREF: SSL_get_error+65j
					; SSL_get_error+90j ...
		mov	eax, 5
		jmp	short loc_6E4352BE
; ---------------------------------------------------------------------------

loc_6E43530A:				; CODE XREF: SSL_get_error+51j
		mov	eax, [eax+58h]
		mov	eax, [eax+184h]
		test	eax, eax
		jnz	short loc_6E435303
		mov	esi, esi
		lea	edi, [edi+0]

loc_6E435320:				; CODE XREF: SSL_get_error+4Bj
		mov	eax, 6
		jmp	short loc_6E4352BE
; ---------------------------------------------------------------------------
		align 10h

loc_6E435330:				; CODE XREF: SSL_get_error+46j
		mov	eax, [eax+18h]
		cmp	eax, 3
		jz	short loc_6E43534C

loc_6E435338:				; CODE XREF: SSL_get_error+115j
		cmp	eax, 2
		jz	short loc_6E435371

loc_6E43533D:				; CODE XREF: SSL_get_error+149j
		cmp	eax, 4
		jnz	short loc_6E435303
		mov	eax, 4
		jmp	loc_6E4352BE
; ---------------------------------------------------------------------------

loc_6E43534C:				; CODE XREF: SSL_get_error+86j
		mov	eax, [esp+1Ch+arg_0]
		mov	ebx, [eax+0Ch]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_test_flags
		test	eax, eax
		jz	short loc_6E435396

loc_6E435367:				; CODE XREF: SSL_get_error+12Cj
		mov	eax, 2
		jmp	loc_6E4352BE
; ---------------------------------------------------------------------------

loc_6E435371:				; CODE XREF: SSL_get_error+8Bj
		mov	eax, [esp+1Ch+arg_0]
		mov	ebx, [eax+10h]
		mov	[esp+1Ch+var_18], 2
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_test_flags
		test	eax, eax
		jz	short loc_6E4353CA

loc_6E43538C:				; CODE XREF: SSL_get_error+F8j
		mov	eax, 3
		jmp	loc_6E4352BE
; ---------------------------------------------------------------------------

loc_6E435396:				; CODE XREF: SSL_get_error+B5j
		mov	[esp+1Ch+var_18], 2
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_test_flags
		test	eax, eax
		jnz	short loc_6E43538C
		mov	[esp+1Ch+var_18], 4
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_test_flags
		test	eax, eax
		jnz	short loc_6E4353FE
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+18h]
		jmp	loc_6E435338
; ---------------------------------------------------------------------------

loc_6E4353CA:				; CODE XREF: SSL_get_error+DAj
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_test_flags
		test	eax, eax
		jnz	short loc_6E435367
		mov	[esp+1Ch+var_18], 4
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_test_flags
		test	eax, eax
		jnz	short loc_6E4353FE
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+18h]
		jmp	loc_6E43533D
; ---------------------------------------------------------------------------

loc_6E4353FE:				; CODE XREF: SSL_get_error+10Cj
					; SSL_get_error+140j
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_get_retry_reason
		cmp	eax, 2
		jz	short loc_6E43541E
		cmp	eax, 3
		jnz	loc_6E435303
		mov	eax, 8
		jmp	loc_6E4352BE
; ---------------------------------------------------------------------------

loc_6E43541E:				; CODE XREF: SSL_get_error+159j
		mov	eax, 7
		jmp	loc_6E4352BE
SSL_get_error	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 125. SSL_do_handshake

; =============== S U B	R O U T	I N E =======================================


		public SSL_do_handshake
SSL_do_handshake proc near		; CODE XREF: sub_6E443D00+28Ap

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	short loc_6E43546D
		mov	eax, [ebx+8]
		mov	eax, [eax+2Ch]
		mov	[esp+2Ch+var_2C], ebx
		call	eax
		test	dword ptr [ebx+34h], 7000h
		jnz	short loc_6E435460
		mov	eax, 1

loc_6E435458:				; CODE XREF: SSL_do_handshake+6Ej
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435460:				; CODE XREF: SSL_do_handshake+21j
		mov	eax, [ebx+20h]
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	eax
; ---------------------------------------------------------------------------

loc_6E43546D:				; CODE XREF: SSL_do_handshake+Dj
		mov	[esp+2Ch+var_1C], 0A06h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 90h
		mov	[esp+2Ch+var_28], 0B4h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E435458
SSL_do_handshake endp

; Exported entry  82. SSL_set_accept_state

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_accept_state
SSL_set_accept_state proc near		; CODE XREF: sub_6E443D00:loc_6E444220p
					; sub_6E443D00+600p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx+24h], 1
		mov	dword ptr [ebx+30h], 0
		mov	dword ptr [ebx+34h], 6000h
		mov	eax, [ebx+8]
		mov	eax, [eax+10h]
		mov	[ebx+20h], eax
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	short loc_6E4354F0
		mov	[esp+1Ch+var_1C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+80h]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+80h], 0

loc_6E4354F0:				; CODE XREF: SSL_set_accept_state+2Ej
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E43551A
		mov	[esp+1Ch+var_1C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+8Ch]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+8Ch], 0

loc_6E43551A:				; CODE XREF: SSL_set_accept_state+58j
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	short loc_6E435536
		mov	[esp+1Ch+var_1C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+88h], 0

loc_6E435536:				; CODE XREF: SSL_set_accept_state+82j
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E435552
		mov	[esp+1Ch+var_1C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+94h], 0

loc_6E435552:				; CODE XREF: SSL_set_accept_state+9Ej
		mov	eax, [ebx+84h]
		test	eax, eax
		jz	short loc_6E435564
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy

loc_6E435564:				; CODE XREF: SSL_set_accept_state+BAj
		mov	dword ptr [ebx+84h], 0
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	short loc_6E435580
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy

loc_6E435580:				; CODE XREF: SSL_set_accept_state+D6j
		mov	dword ptr [ebx+90h], 0
		add	esp, 18h
		pop	ebx
		retn
SSL_set_accept_state endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  86. SSL_set_connect_state

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_connect_state
SSL_set_connect_state proc near		; CODE XREF: sub_6E443D00+33Bp
					; sub_6E443D00+5F3p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	dword ptr [ebx+24h], 0
		mov	dword ptr [ebx+30h], 0
		mov	dword ptr [ebx+34h], 5000h
		mov	eax, [ebx+8]
		mov	eax, [eax+14h]
		mov	[ebx+20h], eax
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	short loc_6E4355E0
		mov	[esp+1Ch+var_1C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+80h]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+80h], 0

loc_6E4355E0:				; CODE XREF: SSL_set_connect_state+2Ej
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E43560A
		mov	[esp+1Ch+var_1C], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+8Ch]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+8Ch], 0

loc_6E43560A:				; CODE XREF: SSL_set_connect_state+58j
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	short loc_6E435626
		mov	[esp+1Ch+var_1C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+88h], 0

loc_6E435626:				; CODE XREF: SSL_set_connect_state+82j
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E435642
		mov	[esp+1Ch+var_1C], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+94h], 0

loc_6E435642:				; CODE XREF: SSL_set_connect_state+9Ej
		mov	eax, [ebx+84h]
		test	eax, eax
		jz	short loc_6E435654
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy

loc_6E435654:				; CODE XREF: SSL_set_connect_state+BAj
		mov	dword ptr [ebx+84h], 0
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	short loc_6E435670
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy

loc_6E435670:				; CODE XREF: SSL_set_connect_state+D6j
		mov	dword ptr [ebx+90h], 0
		add	esp, 18h
		pop	ebx
		retn
SSL_set_connect_state endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E435680	proc near		; DATA XREF: .rdata:6E44B0A8o
					; .rdata:6E44B168o ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_1C], 0A37h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 42h
		mov	[esp+2Ch+var_28], 0F4h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		retn
sub_6E435680	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4356C0	proc near		; DATA XREF: .rdata:6E44C330o
					; .rdata:6E44C410o ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_1C], 0A3Eh
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 42h
		mov	[esp+2Ch+var_28], 0F3h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		retn
sub_6E4356C0	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 2Ch
		mov	dword ptr [esp+10h], 0A44h
		mov	dword ptr [esp+0Ch], offset aSsl_lib_c ; "ssl_lib.c"
		mov	dword ptr [esp+8], 42h
		mov	dword ptr [esp+4], 0A0h
		mov	dword ptr [esp], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  71. SSL_get_version

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_version
SSL_get_version	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		cmp	eax, 303h
		jz	short loc_6E435780
		cmp	eax, 302h
		jz	short loc_6E435790
		cmp	eax, 301h
		jz	short loc_6E4357A0
		cmp	eax, 300h
		jz	short loc_6E435770
		cmp	eax, 2
		jz	short loc_6E4357B0
		mov	eax, offset aUnknown ; "unknown"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435770:				; CODE XREF: SSL_get_version+20j
		mov	eax, offset aSslv3 ; "SSLv3"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435780:				; CODE XREF: SSL_get_version+Bj
		mov	eax, offset aTlsv1_2 ; "TLSv1.2"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435790:				; CODE XREF: SSL_get_version+12j
		mov	eax, offset aTlsv1_1 ; "TLSv1.1"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4357A0:				; CODE XREF: SSL_get_version+19j
		mov	eax, offset aTlsv1 ; "TLSv1"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4357B0:				; CODE XREF: SSL_get_version+25j
		mov	eax, offset aSslv2 ; "SSLv2"
		retn
SSL_get_version	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  46. SSL_dup

; =============== S U B	R O U T	I N E =======================================


		public SSL_dup
SSL_dup		proc near		; CODE XREF: sub_6E443D00+1B8p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [ebx+0E4h]
		mov	[esp+3Ch+var_3C], eax
		call	SSL_new
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E435B70
		mov	eax, [ebx]
		mov	[ebp+0], eax
		mov	eax, [ebx+4]
		mov	[ebp+4], eax
		mov	eax, [ebx+8]
		mov	[ebp+8], eax
		mov	edx, [ebx+0C0h]
		test	edx, edx
		jz	loc_6E435A50
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], ebp
		call	SSL_copy_session_id

loc_6E43580E:				; CODE XREF: SSL_dup+308j SSL_dup+318j ...
		mov	eax, [ebx+100h]
		mov	[ebp+100h], eax
		mov	eax, [ebx+104h]
		mov	[ebp+104h], eax
		mov	eax, [ebx+108h]
		mov	[ebp+108h], eax
		mov	eax, [ebx+60h]
		mov	[ebp+60h], eax
		mov	eax, [ebx+64h]
		mov	[ebp+64h], eax
		mov	eax, [ebx+68h]
		mov	[ebp+68h], eax
		mov	eax, [ebx+0CCh]
		mov	edx, [ebx+0C8h]
		mov	[ebp+0C8h], edx
		test	eax, eax
		jz	short loc_6E435860
		mov	[ebp+0CCh], eax

loc_6E435860:				; CODE XREF: SSL_dup+98j
		mov	eax, [ebx+70h]
		mov	[esp+3Ch+var_3C], eax
		call	X509_VERIFY_PARAM_get_depth
		mov	edx, [ebp+70h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], edx
		call	X509_VERIFY_PARAM_set_depth
		mov	eax, [ebx+0C4h]
		mov	[ebp+0C4h], eax
		mov	eax, [ebx+0D0h]
		mov	[ebp+0D0h], eax
		mov	eax, [ebx+0E8h]
		mov	[ebp+0E8h], eax
		lea	eax, [ebx+0F0h]
		mov	[esp+3Ch+var_34], eax
		lea	eax, [ebp+0F0h]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], 1
		call	CRYPTO_dup_ex_data
		test	eax, eax
		jnz	short loc_6E4358E0

loc_6E4358C2:				; CODE XREF: SSL_dup+148j SSL_dup+17Bj ...
		mov	[esp+3Ch+var_3C], ebp
		call	SSL_free
		xor	eax, eax

loc_6E4358CC:				; CODE XREF: SSL_dup+3B2j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4358E0:				; CODE XREF: SSL_dup+100j
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6E43590A
		lea	edx, [ebp+0Ch]
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 0Ch
		mov	[esp+3Ch+var_3C], eax
		call	BIO_ctrl
		test	eax, eax
		jz	short loc_6E4358C2

loc_6E43590A:				; CODE XREF: SSL_dup+125j
		mov	eax, [ebx+10h]
		test	eax, eax
		jz	short loc_6E43593D
		cmp	eax, [ebx+0Ch]
		jz	loc_6E435AE0
		lea	edx, [ebp+10h]
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 0Ch
		mov	[esp+3Ch+var_3C], eax
		call	BIO_ctrl
		test	eax, eax
		jz	short loc_6E4358C2

loc_6E43593D:				; CODE XREF: SSL_dup+14Fj SSL_dup+326j
		mov	eax, [ebx+18h]
		mov	[ebp+18h], eax
		mov	eax, [ebx+1Ch]
		mov	[ebp+1Ch], eax
		mov	eax, [ebx+20h]
		mov	[ebp+20h], eax
		mov	eax, [ebx+24h]
		mov	[ebp+24h], eax
		mov	eax, [ebx+190h]
		mov	[ebp+190h], eax
		mov	eax, [ebx+28h]
		mov	[ebp+28h], eax
		mov	eax, [ebx+2Ch]
		mov	[ebp+2Ch], eax
		mov	eax, [ebx+30h]
		mov	[ebp+30h], eax
		mov	eax, [ebx+34h]
		mov	[ebp+34h], eax
		mov	eax, [ebx+38h]
		mov	[ebp+38h], eax
		mov	dword ptr [ebp+44h], 0
		mov	eax, [ebx+6Ch]
		mov	[ebp+6Ch], eax
		mov	edx, [ebx+70h]
		mov	eax, [ebp+70h]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	X509_VERIFY_PARAM_inherit
		mov	eax, [ebx+74h]
		test	eax, eax
		jz	short loc_6E4359B8
		mov	[esp+3Ch+var_3C], eax
		call	sk_dup
		mov	[ebp+74h], eax
		test	eax, eax
		jz	loc_6E4358C2

loc_6E4359B8:				; CODE XREF: SSL_dup+1E3j
		mov	eax, [ebx+78h]
		test	eax, eax
		jz	short loc_6E4359D2
		mov	[esp+3Ch+var_3C], eax
		call	sk_dup
		mov	[ebp+78h], eax
		test	eax, eax
		jz	loc_6E4358C2

loc_6E4359D2:				; CODE XREF: SSL_dup+1FDj
		mov	eax, [ebx+0F8h]
		test	eax, eax
		jz	short loc_6E435A3B
		mov	[esp+3Ch+var_3C], eax
		call	sk_dup
		mov	esi, eax
		test	eax, eax
		jz	loc_6E4358C2
		mov	[ebp+0F8h], eax
		xor	ebx, ebx
		jmp	short loc_6E435A2F
; ---------------------------------------------------------------------------
		align 10h

loc_6E435A00:				; CODE XREF: SSL_dup+279j
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	sk_value
		mov	edi, eax
		mov	[esp+3Ch+var_3C], eax
		call	X509_NAME_dup
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	sk_set
		test	eax, eax
		jz	loc_6E435B60
		inc	ebx

loc_6E435A2F:				; CODE XREF: SSL_dup+236j
		mov	[esp+3Ch+var_3C], esi
		call	sk_num
		cmp	ebx, eax
		jl	short loc_6E435A00

loc_6E435A3B:				; CODE XREF: SSL_dup+21Aj
		mov	eax, ebp
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435A50:				; CODE XREF: SSL_dup+3Cj
		mov	eax, [eax+0Ch]
		mov	[esp+3Ch+var_3C], ebp
		call	eax
		mov	eax, [ebx+8]
		mov	[ebp+8], eax
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_3C], ebp
		call	eax
		mov	eax, [ebx+98h]
		test	eax, eax
		jz	short loc_6E435A9E
		mov	edx, [ebp+98h]
		test	edx, edx
		jz	short loc_6E435A88
		mov	[esp+3Ch+var_3C], edx
		call	sub_6E436D70
		mov	eax, [ebx+98h]

loc_6E435A88:				; CODE XREF: SSL_dup+2B8j
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E4369F0
		mov	[ebp+98h], eax
		test	eax, eax
		jz	loc_6E4358C2

loc_6E435A9E:				; CODE XREF: SSL_dup+2AEj
		mov	eax, [ebx+9Ch]
		cmp	eax, 20h
		ja	short loc_6E435B20
		mov	[ebp+9Ch], eax
		lea	edi, [ebp+0A0h]
		lea	esi, [ebx+0A0h]
		cmp	eax, 4
		jnb	short loc_6E435B00

loc_6E435AC0:				; CODE XREF: SSL_dup+35Bj
		xor	edx, edx
		test	al, 2
		jnz	short loc_6E435AF0

loc_6E435AC6:				; CODE XREF: SSL_dup+33Bj
		test	al, 1
		jz	loc_6E43580E
		mov	al, [esi+edx]
		mov	[esp+3Ch+var_1D], al
		mov	[edi+edx], al
		jmp	loc_6E43580E
; ---------------------------------------------------------------------------
		align 10h

loc_6E435AE0:				; CODE XREF: SSL_dup+154j
		mov	eax, [ebp+0Ch]
		mov	[ebp+10h], eax
		jmp	loc_6E43593D
; ---------------------------------------------------------------------------
		align 10h

loc_6E435AF0:				; CODE XREF: SSL_dup+304j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		jmp	short loc_6E435AC6
; ---------------------------------------------------------------------------
		align 10h

loc_6E435B00:				; CODE XREF: SSL_dup+2FEj
		test	edi, 1
		jnz	loc_6E435B88

loc_6E435B0C:				; CODE XREF: SSL_dup+3E1j
		test	edi, 2
		jnz	short loc_6E435B77

loc_6E435B14:				; CODE XREF: SSL_dup+3C6j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E435AC0
; ---------------------------------------------------------------------------
		align 10h

loc_6E435B20:				; CODE XREF: SSL_dup+2E7j
		mov	[esp+3Ch+var_2C], 1A1h
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+var_34], 111h
		mov	[esp+3Ch+var_38], 0DAh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		jmp	loc_6E43580E
; ---------------------------------------------------------------------------
		jmp	short loc_6E435B60
; ---------------------------------------------------------------------------
		align 10h

loc_6E435B60:				; CODE XREF: SSL_dup+268j SSL_dup+391j
		mov	[esp+3Ch+var_3C], edi
		call	X509_NAME_free
		jmp	loc_6E4358C2
; ---------------------------------------------------------------------------
		align 10h

loc_6E435B70:				; CODE XREF: SSL_dup+1Dj
		xor	eax, eax
		jmp	loc_6E4358CC
; ---------------------------------------------------------------------------

loc_6E435B77:				; CODE XREF: SSL_dup+352j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E435B14
; ---------------------------------------------------------------------------

loc_6E435B88:				; CODE XREF: SSL_dup+346j
		mov	cl, [ebx+0A0h]
		mov	[ebp+0A0h], cl
		lea	edi, [ebp+0A1h]
		lea	esi, [ebx+0A1h]
		dec	eax
		jmp	loc_6E435B0C
SSL_dup		endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	eax, [ebx+80h]
		test	eax, eax
		jz	short loc_6E435BE2
		mov	[esp], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+80h]
		mov	[esp], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+80h], 0

loc_6E435BE2:				; CODE XREF: .text:6E435BC0j
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E435C0C
		mov	[esp], eax
		call	EVP_CIPHER_CTX_cleanup
		mov	eax, [ebx+8Ch]
		mov	[esp], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+8Ch], 0

loc_6E435C0C:				; CODE XREF: .text:6E435BEAj
		mov	eax, [ebx+88h]
		test	eax, eax
		jz	short loc_6E435C28
		mov	[esp], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+88h], 0

loc_6E435C28:				; CODE XREF: .text:6E435C14j
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E435C44
		mov	[esp], eax
		call	COMP_CTX_free
		mov	dword ptr [ebx+94h], 0

loc_6E435C44:				; CODE XREF: .text:6E435C30j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  49. SSL_get_certificate

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_certificate
SSL_get_certificate proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	short loc_6E435C70
		mov	eax, [eax]
		mov	eax, [eax]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435C70:				; CODE XREF: SSL_get_certificate+Cj
		xor	eax, eax
		retn
SSL_get_certificate endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 126. SSL_get_privatekey

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_privatekey
SSL_get_privatekey proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+98h]
		test	eax, eax
		jz	short loc_6E435CA0
		mov	eax, [eax]
		mov	eax, [eax+4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435CA0:				; CODE XREF: SSL_get_privatekey+Cj
		xor	eax, eax
		retn
SSL_get_privatekey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 127. SSL_get_current_cipher

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_current_cipher
SSL_get_current_cipher proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0C0h]
		test	eax, eax
		jz	short loc_6E435CD0
		mov	eax, [eax+0B4h]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435CD0:				; CODE XREF: SSL_get_current_cipher+Cj
		xor	eax, eax
		retn
SSL_get_current_cipher endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 272. SSL_get_current_compression

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_current_compression
SSL_get_current_compression proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+94h]
		test	eax, eax
		jz	short loc_6E435D00
		mov	eax, [eax]
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E435D00
; ---------------------------------------------------------------------------
		align 10h

loc_6E435D00:				; CODE XREF: SSL_get_current_compression+Cj
					; SSL_get_current_compression+11j
		xor	eax, eax
		retn
SSL_get_current_compression endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 274. SSL_get_current_expansion

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_current_expansion
SSL_get_current_expansion proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+88h]
		test	eax, eax
		jz	short loc_6E435D30
		mov	eax, [eax]
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E435D30
; ---------------------------------------------------------------------------
		align 10h

loc_6E435D30:				; CODE XREF: SSL_get_current_expansion+Cj
					; SSL_get_current_expansion+11j
		xor	eax, eax
		retn
SSL_get_current_expansion endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E435D40	proc near		; CODE XREF: sub_6E406650+69Bp
					; sub_6E40D250+514p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esi+14h]
		test	ebx, ebx
		jz	loc_6E435E40
		cmp	ebx, [esi+10h]
		jz	loc_6E435E60

loc_6E435D5E:				; CODE XREF: sub_6E435D40+116j
					; sub_6E435D40+12Bj
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_ctrl
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], 75h
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_int_ctrl
		test	eax, eax
		jz	short loc_6E435DF0
		mov	eax, [esp+2Ch+arg_4]
		test	eax, eax
		jz	short loc_6E435DD0
		mov	eax, [esi+10h]
		cmp	eax, ebx
		jz	short loc_6E435E30
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_push
		mov	[esi+10h], eax
		mov	edi, 1
		mov	eax, edi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435DD0:				; CODE XREF: sub_6E435D40+68j
		mov	edi, 1
		cmp	[esi+10h], ebx
		jz	loc_6E435E70

loc_6E435DDE:				; CODE XREF: sub_6E435D40+13Bj
					; sub_6E435D40+142j
		mov	eax, edi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435DF0:				; CODE XREF: sub_6E435D40+60j
		mov	[esp+2Ch+var_1C], 0B2Fh
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0B8h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	edi, edi
		mov	eax, edi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435E30:				; CODE XREF: sub_6E435D40+6Fj
		mov	edi, 1
		mov	eax, edi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435E40:				; CODE XREF: sub_6E435D40+Fj
		call	BIO_f_buffer
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E435E80
		mov	[esi+14h], eax
		jmp	loc_6E435D5E
; ---------------------------------------------------------------------------
		align 10h

loc_6E435E60:				; CODE XREF: sub_6E435D40+18j
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_pop
		mov	[esi+10h], eax
		jmp	loc_6E435D5E
; ---------------------------------------------------------------------------

loc_6E435E70:				; CODE XREF: sub_6E435D40+98j
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_pop
		mov	[esi+10h], eax
		jmp	loc_6E435DDE
; ---------------------------------------------------------------------------

loc_6E435E80:				; CODE XREF: sub_6E435D40+111j
		xor	edi, edi
		jmp	loc_6E435DDE
sub_6E435D40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E435E90	proc near		; CODE XREF: sub_6E406650+6F6p
					; sub_6E40D250+BB3p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+14h]
		test	eax, eax
		jz	short loc_6E435EB3
		cmp	eax, [ebx+10h]
		jz	short loc_6E435EC0

loc_6E435EA4:				; CODE XREF: sub_6E435E90+3Ej
		mov	[esp+1Ch+var_1C], eax
		call	BIO_free
		mov	dword ptr [ebx+14h], 0

loc_6E435EB3:				; CODE XREF: sub_6E435E90+Dj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E435EC0:				; CODE XREF: sub_6E435E90+12j
		mov	[esp+1Ch+var_1C], eax
		call	BIO_pop
		mov	[ebx+10h], eax
		mov	eax, [ebx+14h]
		jmp	short loc_6E435EA4
sub_6E435E90	endp

; Exported entry 145. SSL_CTX_set_quiet_shutdown

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_quiet_shutdown
SSL_CTX_set_quiet_shutdown proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+0F4h], edx
		retn
SSL_CTX_set_quiet_shutdown endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 140. SSL_CTX_get_quiet_shutdown

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_quiet_shutdown
SSL_CTX_get_quiet_shutdown proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0F4h]
		retn
SSL_CTX_get_quiet_shutdown endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 161. SSL_set_quiet_shutdown

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_quiet_shutdown
SSL_set_quiet_shutdown proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+2Ch], edx
		retn
SSL_set_quiet_shutdown endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 153. SSL_get_quiet_shutdown

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_quiet_shutdown
SSL_get_quiet_shutdown proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+2Ch]
		retn
SSL_get_quiet_shutdown endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 162. SSL_set_shutdown

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_shutdown
SSL_set_shutdown proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+30h], edx
		retn
SSL_set_shutdown endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 155. SSL_get_shutdown

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_shutdown
SSL_get_shutdown proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+30h]
		retn
SSL_get_shutdown endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 164. SSL_version

; =============== S U B	R O U T	I N E =======================================


		public SSL_version
SSL_version	proc near		; CODE XREF: sub_6E407B10+63p
					; sub_6E407B10+76p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		retn
SSL_version	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 150. SSL_get_SSL_CTX

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_SSL_CTX
SSL_get_SSL_CTX	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0E4h]
		retn
SSL_get_SSL_CTX	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 290. SSL_set_SSL_CTX

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_SSL_CTX
SSL_set_SSL_CTX	proc near

Buf1		= dword	ptr -3Ch
Buf2		= dword	ptr -38h
Size		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		mov	esi, [ebx+98h]
		mov	eax, [ebx+0E4h]
		cmp	eax, ebp
		jz	loc_6E436041
		test	ebp, ebp
		jz	loc_6E4360F0

loc_6E435F7B:				; CODE XREF: SSL_set_SSL_CTX+1A6j
		mov	eax, [ebp+0B0h]
		mov	[esp+3Ch+Buf1],	eax
		call	sub_6E4369F0
		mov	[ebx+98h], eax
		test	esi, esi
		jz	short loc_6E435FD7
		mov	edx, [esi+38h]
		mov	[eax+38h], edx
		mov	edx, [esi+44h]
		mov	[eax+44h], edx
		mov	edx, [esi+50h]
		mov	[eax+50h], edx
		mov	edx, [esi+5Ch]
		mov	[eax+5Ch], edx
		mov	edx, [esi+68h]
		mov	[eax+68h], edx
		mov	edx, [esi+74h]
		mov	[eax+74h], edx
		mov	edx, [esi+80h]
		mov	[eax+80h], edx
		mov	edx, [esi+8Ch]
		mov	[eax+8Ch], edx
		mov	[esp+3Ch+Buf1],	esi
		call	sub_6E436D70

loc_6E435FD7:				; CODE XREF: SSL_set_SSL_CTX+41j
		cmp	dword ptr [ebx+9Ch], 20h
		ja	short loc_6E436050

loc_6E435FE0:				; CODE XREF: SSL_set_SSL_CTX+11Cj
		mov	eax, [ebx+0E4h]
		test	eax, eax
		jz	short loc_6E435FFC
		mov	edx, [ebx+9Ch]
		cmp	edx, [eax+0C4h]
		jz	loc_6E436080

loc_6E435FFC:				; CODE XREF: SSL_set_SSL_CTX+98j
					; SSL_set_SSL_CTX+14Dj	...
		mov	[esp+3Ch+var_2C], 0B9Dh
		mov	[esp+3Ch+var_30], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+3Ch+Size],	0Ch
		mov	[esp+3Ch+Buf2],	1
		lea	eax, [ebp+60h]
		mov	[esp+3Ch+Buf1],	eax
		call	CRYPTO_add_lock
		mov	eax, [ebx+0E4h]
		test	eax, eax
		jz	short loc_6E436039
		mov	[esp+3Ch+Buf1],	eax
		call	SSL_CTX_free

loc_6E436039:				; CODE XREF: SSL_set_SSL_CTX+DFj
		mov	[ebx+0E4h], ebp
		mov	eax, ebp

loc_6E436041:				; CODE XREF: SSL_set_SSL_CTX+1Dj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E436050:				; CODE XREF: SSL_set_SSL_CTX+8Ej
		mov	[esp+3Ch+Size],	offset aSslSid_ctx_len ; "ssl->sid_ctx_length <= sizeof(ssl->sid_"...
		mov	[esp+3Ch+Buf2],	0B8Eh
		mov	[esp+3Ch+Buf1],	offset aSsl_lib_c ; "ssl_lib.c"
		call	OpenSSLDie
		jmp	loc_6E435FE0
; ---------------------------------------------------------------------------
		jmp	short loc_6E436080
; ---------------------------------------------------------------------------
		align 10h

loc_6E436080:				; CODE XREF: SSL_set_SSL_CTX+A6j
					; SSL_set_SSL_CTX+121j
		lea	edi, [ebx+0A0h]
		mov	[esp+3Ch+Size],	edx ; Size
		add	eax, 0C8h
		mov	[esp+3Ch+Buf2],	eax ; Buf2
		mov	[esp+3Ch+Buf1],	edi ; Buf1
		call	memcmp
		test	eax, eax
		jnz	loc_6E435FFC
		mov	eax, [ebp+0C4h]
		mov	[ebx+9Ch], eax
		lea	esi, [ebp+0C8h]
		mov	eax, 20h
		test	edi, 1
		jnz	short loc_6E43611E

loc_6E4360C2:				; CODE XREF: SSL_set_SSL_CTX+1EBj
		test	edi, 2
		jnz	short loc_6E43610D

loc_6E4360CA:				; CODE XREF: SSL_set_SSL_CTX+1CCj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	short loc_6E436100

loc_6E4360D7:				; CODE XREF: SSL_set_SSL_CTX+1BBj
		test	al, 1
		jz	loc_6E435FFC
		mov	al, [esi+edx]
		mov	[esp+3Ch+var_1D], al
		mov	[edi+edx], al
		jmp	loc_6E435FFC
; ---------------------------------------------------------------------------
		align 10h

loc_6E4360F0:				; CODE XREF: SSL_set_SSL_CTX+25j
		mov	ebp, [ebx+170h]
		jmp	loc_6E435F7B
; ---------------------------------------------------------------------------
		align 10h

loc_6E436100:				; CODE XREF: SSL_set_SSL_CTX+185j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		jmp	short loc_6E4360D7
; ---------------------------------------------------------------------------

loc_6E43610D:				; CODE XREF: SSL_set_SSL_CTX+178j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E4360CA
; ---------------------------------------------------------------------------

loc_6E43611E:				; CODE XREF: SSL_set_SSL_CTX+170j
		mov	al, [ebp+0C8h]
		mov	[ebx+0A0h], al
		lea	edi, [ebx+0A1h]
		lea	esi, [ebp+0C9h]
		mov	eax, 1Fh
		jmp	short loc_6E4360C2
SSL_set_SSL_CTX	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 142. SSL_CTX_set_default_verify_paths

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_default_verify_paths
SSL_CTX_set_default_verify_paths proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+arg_0], eax
		jmp	X509_STORE_set_default_paths
SSL_CTX_set_default_verify_paths endp

; Exported entry 141. SSL_CTX_load_verify_locations

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_load_verify_locations
SSL_CTX_load_verify_locations proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+arg_0], eax
		jmp	X509_STORE_load_locations
SSL_CTX_load_verify_locations endp

; Exported entry 160. SSL_set_info_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_info_callback
SSL_set_info_callback proc near		; CODE XREF: sub_6E4437B0+37p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+0D0h], edx
		retn
SSL_set_info_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 165. SSL_get_info_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_info_callback
SSL_get_info_callback proc near		; CODE XREF: sub_6E443D00+2E3p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0D0h]
		retn
SSL_get_info_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 166. SSL_state

; =============== S U B	R O U T	I N E =======================================


		public SSL_state
SSL_state	proc near		; CODE XREF: sub_6E406650+68p
					; sub_6E406650+79p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+34h]
		retn
SSL_state	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 348. SSL_set_state

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_state
SSL_set_state	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+34h], edx
		retn
SSL_set_state	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 163. SSL_set_verify_result

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_verify_result
SSL_set_verify_result proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+0ECh], edx
		retn
SSL_set_verify_result endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 157. SSL_get_verify_result

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_verify_result
SSL_get_verify_result proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0ECh]
		retn
SSL_get_verify_result endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 169. SSL_get_ex_new_index

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_ex_new_index
SSL_get_ex_new_index proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_18], eax
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_1C], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], 1
		call	CRYPTO_get_ex_new_index
		add	esp, 2Ch
		retn
SSL_get_ex_new_index endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 158. SSL_set_ex_data

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_ex_data
SSL_set_ex_data	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 0F0h
		mov	[esp+arg_0], eax
		jmp	CRYPTO_set_ex_data
SSL_set_ex_data	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 151. SSL_get_ex_data

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_ex_data
SSL_get_ex_data	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 0F0h
		mov	[esp+arg_0], eax
		jmp	CRYPTO_get_ex_data
SSL_get_ex_data	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 167. SSL_CTX_get_ex_new_index

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_ex_new_index
SSL_CTX_get_ex_new_index proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_18], eax
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_1C], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], 2
		call	CRYPTO_get_ex_new_index
		add	esp, 2Ch
		retn
SSL_CTX_get_ex_new_index endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 143. SSL_CTX_set_ex_data

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_ex_data
SSL_CTX_set_ex_data proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sub	eax, 0FFFFFF80h
		mov	[esp+arg_0], eax
		jmp	CRYPTO_set_ex_data
SSL_CTX_set_ex_data endp

; Exported entry 138. SSL_CTX_get_ex_data

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_ex_data
SSL_CTX_get_ex_data proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sub	eax, 0FFFFFF80h
		mov	[esp+arg_0], eax
		jmp	CRYPTO_get_ex_data
SSL_CTX_get_ex_data endp


; =============== S U B	R O U T	I N E =======================================


sub_6E4362A0	proc near		; DATA XREF: .rdata:6E44C30Co
					; .rdata:6E44C3ECo ...
		mov	eax, 1
		retn
sub_6E4362A0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 180. SSL_CTX_get_cert_store

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_cert_store
SSL_CTX_get_cert_store proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0Ch]
		retn
SSL_CTX_get_cert_store endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 181. SSL_CTX_set_cert_store

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_cert_store
SSL_CTX_set_cert_store proc near

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6E4362D7
		mov	[esp+1Ch+var_1C], eax
		call	X509_STORE_free

loc_6E4362D7:				; CODE XREF: SSL_CTX_set_cert_store+Dj
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx+0Ch], eax
		add	esp, 18h
		pop	ebx
		retn
SSL_CTX_set_cert_store endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 182. SSL_want

; =============== S U B	R O U T	I N E =======================================


		public SSL_want
SSL_want	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+18h]
		retn
SSL_want	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 177. SSL_CTX_set_tmp_rsa_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_tmp_rsa_callback
SSL_CTX_set_tmp_rsa_callback proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [eax]
		mov	edx, [edx+70h]
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], ecx
		mov	[esp+1Ch+var_18], 5
		mov	[esp+1Ch+var_1C], eax
		call	edx
		add	esp, 1Ch
		retn
SSL_CTX_set_tmp_rsa_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 186. SSL_set_tmp_rsa_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_tmp_rsa_callback
SSL_set_tmp_rsa_callback proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [eax+8]
		mov	edx, [edx+6Ch]
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], ecx
		mov	[esp+1Ch+var_18], 5
		mov	[esp+1Ch+var_1C], eax
		call	edx
		add	esp, 1Ch
		retn
SSL_set_tmp_rsa_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 176. SSL_CTX_set_tmp_dh_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_tmp_dh_callback
SSL_CTX_set_tmp_dh_callback proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [eax]
		mov	edx, [edx+70h]
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], ecx
		mov	[esp+1Ch+var_18], 6
		mov	[esp+1Ch+var_1C], eax
		call	edx
		add	esp, 1Ch
		retn
SSL_CTX_set_tmp_dh_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 187. SSL_set_tmp_dh_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_tmp_dh_callback
SSL_set_tmp_dh_callback	proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [eax+8]
		mov	edx, [edx+6Ch]
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], ecx
		mov	[esp+1Ch+var_18], 6
		mov	[esp+1Ch+var_1C], eax
		call	edx
		add	esp, 1Ch
		retn
SSL_set_tmp_dh_callback	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 269. SSL_CTX_set_tmp_ecdh_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_tmp_ecdh_callback
SSL_CTX_set_tmp_ecdh_callback proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [eax]
		mov	edx, [edx+70h]
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], ecx
		mov	[esp+1Ch+var_18], 7
		mov	[esp+1Ch+var_1C], eax
		call	edx
		add	esp, 1Ch
		retn
SSL_CTX_set_tmp_ecdh_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 270. SSL_set_tmp_ecdh_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_tmp_ecdh_callback
SSL_set_tmp_ecdh_callback proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [eax+8]
		mov	edx, [edx+6Ch]
		mov	ecx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], ecx
		mov	[esp+1Ch+var_18], 7
		mov	[esp+1Ch+var_1C], eax
		call	edx
		add	esp, 1Ch
		retn
SSL_set_tmp_ecdh_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 294. SSL_CTX_use_psk_identity_hint

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SSL_CTX_use_psk_identity_hint(int, char *)
		public SSL_CTX_use_psk_identity_hint
SSL_CTX_use_psk_identity_hint proc near

Str		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		test	ebx, ebx
		jz	short loc_6E436440
		mov	[esp+2Ch+Str], ebx ; Str
		call	strlen
		cmp	eax, 80h
		ja	short loc_6E4364A0

loc_6E436440:				; CODE XREF: SSL_CTX_use_psk_identity_hint+Fj
		mov	eax, [esi+14Ch]
		test	eax, eax
		jz	short loc_6E436452
		mov	[esp+2Ch+Str], eax
		call	CRYPTO_free

loc_6E436452:				; CODE XREF: SSL_CTX_use_psk_identity_hint+28j
		test	ebx, ebx
		jz	short loc_6E436480
		mov	[esp+2Ch+Str], ebx
		call	BUF_strdup
		mov	[esi+14Ch], eax
		test	eax, eax
		setnz	al
		and	eax, 0FFh
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E436480:				; CODE XREF: SSL_CTX_use_psk_identity_hint+34j
		mov	dword ptr [esi+14Ch], 0
		mov	eax, 1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4364A0:				; CODE XREF: SSL_CTX_use_psk_identity_hint+1Ej
		mov	[esp+2Ch+var_1C], 0C60h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 92h
		mov	[esp+2Ch+var_28], 110h
		mov	[esp+2Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
SSL_CTX_use_psk_identity_hint endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 299. SSL_use_psk_identity_hint

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SSL_use_psk_identity_hint(int, char *)
		public SSL_use_psk_identity_hint
SSL_use_psk_identity_hint proc near

Str		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		test	ebx, ebx
		jz	loc_6E4365C0
		mov	edi, [ebx+0C0h]
		test	edi, edi
		jz	loc_6E4365D0
		test	esi, esi
		jz	short loc_6E436517
		mov	[esp+2Ch+Str], esi ; Str
		call	strlen
		cmp	eax, 80h
		ja	short loc_6E436580

loc_6E436517:				; CODE XREF: SSL_use_psk_identity_hint+26j
		mov	eax, [edi+8Ch]
		test	eax, eax
		jz	short loc_6E43652F
		mov	[esp+2Ch+Str], eax
		call	CRYPTO_free
		mov	edi, [ebx+0C0h]

loc_6E43652F:				; CODE XREF: SSL_use_psk_identity_hint+3Fj
		test	esi, esi
		jz	short loc_6E436560
		mov	[esp+2Ch+Str], esi
		call	BUF_strdup
		mov	[edi+8Ch], eax
		mov	eax, [ebx+0C0h]
		mov	eax, [eax+8Ch]
		test	eax, eax
		setnz	al
		and	eax, 0FFh

loc_6E436557:				; CODE XREF: SSL_use_psk_identity_hint+F5j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E436560:				; CODE XREF: SSL_use_psk_identity_hint+51j
		mov	dword ptr [edi+8Ch], 0
		mov	eax, 1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E436580:				; CODE XREF: SSL_use_psk_identity_hint+35j
		mov	[esp+2Ch+var_1C], 0C77h
		mov	[esp+2Ch+var_20], offset aSsl_lib_c ; "ssl_lib.c"
		mov	[esp+2Ch+var_24], 92h
		mov	[esp+2Ch+var_28], 111h
		mov	[esp+2Ch+Str], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4365C0:				; CODE XREF: SSL_use_psk_identity_hint+10j
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4365D0:				; CODE XREF: SSL_use_psk_identity_hint+1Ej
		mov	eax, 1
		jmp	loc_6E436557
SSL_use_psk_identity_hint endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 297. SSL_get_psk_identity_hint

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_psk_identity_hint
SSL_get_psk_identity_hint proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E436600
		mov	eax, [eax+0C0h]
		test	eax, eax
		jz	short loc_6E436600
		mov	eax, [eax+8Ch]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E436600:				; CODE XREF: SSL_get_psk_identity_hint+6j
					; SSL_get_psk_identity_hint+10j
		xor	eax, eax
		retn
SSL_get_psk_identity_hint endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 304. SSL_get_psk_identity

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_psk_identity
SSL_get_psk_identity proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E436630
		mov	eax, [eax+0C0h]
		test	eax, eax
		jz	short loc_6E436630
		mov	eax, [eax+90h]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E436630:				; CODE XREF: SSL_get_psk_identity+6j
					; SSL_get_psk_identity+10j
		xor	eax, eax
		retn
SSL_get_psk_identity endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 300. SSL_set_psk_client_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_psk_client_callback
SSL_set_psk_client_callback proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+0DCh], edx
		retn
SSL_set_psk_client_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 295. SSL_CTX_set_psk_client_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_psk_client_callback
SSL_CTX_set_psk_client_callback	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+150h], edx
		retn
SSL_CTX_set_psk_client_callback	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 298. SSL_set_psk_server_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_psk_server_callback
SSL_set_psk_server_callback proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+0E0h], edx
		retn
SSL_set_psk_server_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 303. SSL_CTX_set_psk_server_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_psk_server_callback
SSL_CTX_set_psk_server_callback	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+154h], edx
		retn
SSL_CTX_set_psk_server_callback	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 266. SSL_CTX_set_msg_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_msg_callback
SSL_CTX_set_msg_callback proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+0B8h], edx
		retn
SSL_CTX_set_msg_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 267. SSL_set_msg_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_msg_callback
SSL_set_msg_callback proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+64h], edx
		retn
SSL_set_msg_callback endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4366A0	proc near		; CODE XREF: sub_6E4106D0+81p
					; sub_6E4106D0+147p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_4]
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_6E4366BB
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy

loc_6E4366BB:				; CODE XREF: sub_6E4366A0+11j
		mov	dword ptr [ebx], 0
		call	EVP_MD_CTX_create
		mov	[ebx], eax
		test	eax, eax
		jz	short loc_6E4366F0
		test	esi, esi
		jz	short loc_6E4366EA
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], eax
		call	EVP_DigestInit_ex
		test	eax, eax
		mov	eax, [ebx]
		jle	short loc_6E4366F0

loc_6E4366EA:				; CODE XREF: sub_6E4366A0+2Ej
					; sub_6E4366A0+60j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E4366F0:				; CODE XREF: sub_6E4366A0+2Aj
					; sub_6E4366A0+48j
		mov	[esp+1Ch+var_1C], eax
		call	EVP_MD_CTX_destroy
		mov	dword ptr [ebx], 0
		xor	eax, eax
		jmp	short loc_6E4366EA
sub_6E4366A0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+20h]
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_6E436726
		mov	[esp], eax
		call	EVP_MD_CTX_destroy

loc_6E436726:				; CODE XREF: .text:6E43671Cj
		mov	dword ptr [ebx], 0
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		jmp	short SSL_set_debug
; ---------------------------------------------------------------------------
		align 10h
; Exported entry 339. SSL_set_debug

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_debug
SSL_set_debug	proc near		; CODE XREF: .text:6E436731j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+0E8h], edx
		retn
SSL_set_debug	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 344. SSL_cache_hit

; =============== S U B	R O U T	I N E =======================================


		public SSL_cache_hit
SSL_cache_hit	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+6Ch]
		retn
SSL_cache_hit	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E436760	proc near		; CODE XREF: sub_6E40F8C0+3Bp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_1C], offset loc_6E42FF60
		mov	[esp+2Ch+var_20], 30h
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	OBJ_bsearch_
		add	esp, 2Ch
		retn
sub_6E436760	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  74. SSL_load_error_strings

; =============== S U B	R O U T	I N E =======================================


		public SSL_load_error_strings
SSL_load_error_strings proc near
		sub	esp, 0Ch
		call	ERR_load_crypto_strings
		add	esp, 0Ch
		jmp	ERR_load_SSL_strings
SSL_load_error_strings endp


; =============== S U B	R O U T	I N E =======================================


sub_6E4367B0	proc near		; DATA XREF: SSL_load_client_CA_file+Fo
					; SSL_add_file_cert_subjects_to_stack+13o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	edx, [eax]
		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		mov	[esp+arg_4], edx
		mov	[esp+arg_0], eax
		jmp	X509_NAME_cmp
sub_6E4367B0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 175. SSL_get_ex_data_X509_STORE_CTX_idx

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_ex_data_X509_STORE_CTX_idx
SSL_get_ex_data_X509_STORE_CTX_idx proc	near ; CODE XREF: SSL_CTX_new+12p
					; sub_6E4371C0+79p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		sub	esp, 2Ch
		mov	[esp+2Ch+var_20], 8Eh
		mov	[esp+2Ch+var_24], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 5
		call	CRYPTO_lock
		mov	eax, dword_6E449A20
		test	eax, eax
		js	short loc_6E436830
		mov	[esp+2Ch+var_20], 9Fh
		mov	[esp+2Ch+var_24], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 6
		call	CRYPTO_lock
		mov	eax, dword_6E449A20
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E436830:				; CODE XREF: SSL_get_ex_data_X509_STORE_CTX_idx+2Ej
		mov	[esp+2Ch+var_20], 91h
		mov	[esp+2Ch+var_24], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 6
		call	CRYPTO_lock
		mov	[esp+2Ch+var_20], 92h
		mov	[esp+2Ch+var_24], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 9
		call	CRYPTO_lock
		mov	eax, dword_6E449A20
		test	eax, eax
		js	short loc_6E4368B0

loc_6E436881:				; CODE XREF: SSL_get_ex_data_X509_STORE_CTX_idx+111j
		mov	[esp+2Ch+var_20], 9Dh
		mov	[esp+2Ch+var_24], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock
		mov	eax, dword_6E449A20
		add	esp, 2Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4368B0:				; CODE XREF: SSL_get_ex_data_X509_STORE_CTX_idx+AFj
		mov	[esp+2Ch+var_1C], 0
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], offset aSslForVerifyCa ; "SSL	for verify callback"
		mov	[esp+2Ch+var_2C], 0
		call	X509_STORE_CTX_get_ex_new_index
		mov	dword_6E449A20,	eax
		jmp	short loc_6E436881
SSL_get_ex_data_X509_STORE_CTX_idx endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4368F0	proc near		; CODE XREF: SSL_CTX_new+16Fp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	edi
		push	ebx
		sub	esp, 24h
		mov	[esp+2Ch+var_24], 0B7h
		mov	[esp+2Ch+var_28], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_2C], 94h
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E4369C0
		mov	edi, eax
		mov	edx, 94h
		test	al, 1
		jnz	loc_6E4369B0

loc_6E43692A:				; CODE XREF: sub_6E4368F0+C8j
		test	edi, 2
		jnz	short loc_6E4369A0

loc_6E436932:				; CODE XREF: sub_6E4368F0+BBj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	short loc_6E436990
		and	edx, 1
		jnz	short loc_6E436980

loc_6E436945:				; CODE XREF: sub_6E4368F0+93j
					; sub_6E4368F0+ABj
		lea	eax, [ebx+30h]
		mov	[ebx], eax
		mov	dword ptr [ebx+90h], 1
		call	EVP_sha1
		mov	[ebx+50h], eax
		call	EVP_sha1
		mov	[ebx+44h], eax
		call	EVP_sha1
		mov	[ebx+38h], eax
		call	EVP_sha1
		mov	[ebx+74h], eax
		mov	eax, ebx

loc_6E436976:				; CODE XREF: sub_6E4368F0+FEj
		add	esp, 24h
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E436980:				; CODE XREF: sub_6E4368F0+53j
					; sub_6E4368F0+ADj
		mov	byte ptr [edi],	0
		jmp	short loc_6E436945
; ---------------------------------------------------------------------------
		align 10h

loc_6E436990:				; CODE XREF: sub_6E4368F0+4Ej
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	short loc_6E436945
		jmp	short loc_6E436980
; ---------------------------------------------------------------------------
		align 10h

loc_6E4369A0:				; CODE XREF: sub_6E4368F0+40j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	short loc_6E436932
; ---------------------------------------------------------------------------
		align 10h

loc_6E4369B0:				; CODE XREF: sub_6E4368F0+34j
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	dl, 93h
		jmp	loc_6E43692A
; ---------------------------------------------------------------------------
		align 10h

loc_6E4369C0:				; CODE XREF: sub_6E4368F0+25j
		mov	[esp+2Ch+var_1C], 0B9h
		mov	[esp+2Ch+var_20], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0A2h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	short loc_6E436976
sub_6E4368F0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E4369F0	proc near		; CODE XREF: SSL_new+B9p SSL_dup+2CBp	...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_34], 0C9h
		mov	[esp+3Ch+var_38], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+3Ch+var_3C], 94h
		call	CRYPTO_malloc
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E436D3A
		mov	edi, eax
		mov	edx, 94h
		test	al, 1
		jnz	loc_6E436C20

loc_6E436A30:				; CODE XREF: sub_6E4369F0+238j
		test	edi, 2
		jnz	loc_6E436C30

loc_6E436A3C:				; CODE XREF: sub_6E4369F0+24Bj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E436C00
		and	edx, 1
		jnz	loc_6E436BF0

loc_6E436A57:				; CODE XREF: sub_6E4369F0+203j
					; sub_6E4369F0+21Bj
		mov	dword ptr [ebp+90h], 1
		lea	edx, [ebx+30h]
		mov	eax, [ebx]
		sub	eax, edx
		sar	eax, 2
		lea	edx, [eax+eax*4]
		lea	edx, [eax+edx*4]
		lea	edx, [eax+edx*4]
		mov	ecx, edx
		shl	ecx, 8
		add	edx, ecx
		mov	ecx, edx
		shl	ecx, 10h
		add	edx, ecx
		add	edx, edx
		add	eax, edx
		lea	edx, [eax+eax]
		add	eax, edx
		lea	eax, [ebp+eax*4+30h]
		mov	[ebp+0], eax
		mov	eax, [ebx+4]
		mov	[ebp+4], eax
		mov	eax, [ebx+8]
		mov	[ebp+8], eax
		mov	eax, [ebx+0Ch]
		mov	[ebp+0Ch], eax
		mov	eax, [ebx+10h]
		mov	[ebp+10h], eax
		mov	eax, [ebx+14h]
		mov	[ebp+14h], eax
		mov	eax, [ebx+18h]
		test	eax, eax
		jz	short loc_6E436AC5
		mov	[esp+3Ch+var_3C], eax
		call	RSA_up_ref
		mov	eax, [ebx+18h]
		mov	[ebp+18h], eax

loc_6E436AC5:				; CODE XREF: sub_6E4369F0+C5j
		mov	eax, [ebx+1Ch]
		mov	[ebp+1Ch], eax
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	short loc_6E436B25
		mov	[esp+3Ch+var_3C], eax
		call	DHparams_dup
		mov	[ebp+20h], eax
		test	eax, eax
		jz	loc_6E436C40
		mov	eax, [ebx+20h]
		mov	edx, [eax+18h]
		test	edx, edx
		jz	short loc_6E436B08
		mov	[esp+3Ch+var_3C], edx
		call	BN_dup
		test	eax, eax
		jz	loc_6E436CFF
		mov	edx, [ebp+20h]
		mov	[edx+18h], eax
		mov	eax, [ebx+20h]

loc_6E436B08:				; CODE XREF: sub_6E4369F0+FDj
		mov	eax, [eax+14h]
		test	eax, eax
		jz	short loc_6E436B25
		mov	[esp+3Ch+var_3C], eax
		call	BN_dup
		test	eax, eax
		jz	loc_6E436D30
		mov	edx, [ebp+20h]
		mov	[edx+14h], eax

loc_6E436B25:				; CODE XREF: sub_6E4369F0+E0j
					; sub_6E4369F0+11Dj
		mov	eax, [ebx+24h]
		mov	[ebp+24h], eax
		mov	eax, [ebx+28h]
		test	eax, eax
		jz	short loc_6E436B45
		mov	[esp+3Ch+var_3C], eax
		call	EC_KEY_dup
		mov	[ebp+28h], eax
		test	eax, eax
		jz	loc_6E436CCE

loc_6E436B45:				; CODE XREF: sub_6E4369F0+140j
		mov	eax, [ebx+2Ch]
		mov	[ebp+2Ch], eax
		mov	esi, ebp
		xor	edi, edi
		nop

loc_6E436B50:				; CODE XREF: sub_6E4369F0+1D4j
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	short loc_6E436B85
		mov	[esi+30h], eax
		mov	[esp+3Ch+var_2C], 10Fh
		mov	[esp+3Ch+var_30], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+3Ch+var_34], 3
		mov	[esp+3Ch+var_38], 1
		add	eax, 10h
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock

loc_6E436B85:				; CODE XREF: sub_6E4369F0+165j
		mov	eax, [ebx+34h]
		test	eax, eax
		jz	short loc_6E436BBA
		mov	[esi+34h], eax
		mov	[esp+3Ch+var_2C], 115h
		mov	[esp+3Ch+var_30], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+3Ch+var_34], 0Ah
		mov	[esp+3Ch+var_38], 1
		add	eax, 8
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock

loc_6E436BBA:				; CODE XREF: sub_6E4369F0+19Aj
		inc	edi
		add	ebx, 0Ch
		add	esi, 0Ch
		cmp	edi, 8
		jnz	short loc_6E436B50
		call	EVP_sha1
		mov	[ebp+50h], eax
		call	EVP_sha1
		mov	[ebp+44h], eax
		call	EVP_sha1
		mov	[ebp+38h], eax
		call	EVP_sha1
		mov	[ebp+74h], eax
		mov	eax, ebp

loc_6E436BE8:				; CODE XREF: sub_6E4369F0+378j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E436BF0:				; CODE XREF: sub_6E4369F0+61j
					; sub_6E4369F0+221j
		mov	byte ptr [edi],	0
		jmp	loc_6E436A57
; ---------------------------------------------------------------------------
		align 10h

loc_6E436C00:				; CODE XREF: sub_6E4369F0+58j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E436A57
		jmp	short loc_6E436BF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E436C20:				; CODE XREF: sub_6E4369F0+3Aj
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	dl, 93h
		jmp	loc_6E436A30
; ---------------------------------------------------------------------------
		align 10h

loc_6E436C30:				; CODE XREF: sub_6E4369F0+46j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E436A3C
; ---------------------------------------------------------------------------

loc_6E436C40:				; CODE XREF: sub_6E4369F0+EFj
		mov	[esp+3Ch+var_2C], 0EAh
		mov	[esp+3Ch+var_30], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+3Ch+var_34], 5
		mov	[esp+3Ch+var_38], 0DDh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error

loc_6E436C6C:				; CODE XREF: sub_6E4369F0+30Aj
					; sub_6E4369F0+33Bj
		mov	eax, [ebp+18h]
		test	eax, eax
		jz	short loc_6E436C7B
		mov	[esp+3Ch+var_3C], eax
		call	RSA_free

loc_6E436C7B:				; CODE XREF: sub_6E4369F0+281j
		mov	eax, [ebp+20h]
		test	eax, eax
		jz	short loc_6E436C8A
		mov	[esp+3Ch+var_3C], eax
		call	DH_free

loc_6E436C8A:				; CODE XREF: sub_6E4369F0+290j
		mov	eax, [ebp+28h]
		test	eax, eax
		jz	short loc_6E436C99
		mov	[esp+3Ch+var_3C], eax
		call	EC_KEY_free

loc_6E436C99:				; CODE XREF: sub_6E4369F0+29Fj
		mov	ebx, 8
		xchg	ax, ax

loc_6E436CA0:				; CODE XREF: sub_6E4369F0+2D2j
		mov	eax, [ebp+30h]
		test	eax, eax
		jz	short loc_6E436CAF
		mov	[esp+3Ch+var_3C], eax
		call	X509_free

loc_6E436CAF:				; CODE XREF: sub_6E4369F0+2B5j
		mov	eax, [ebp+34h]
		test	eax, eax
		jz	short loc_6E436CBE
		mov	[esp+3Ch+var_3C], eax
		call	EVP_PKEY_free

loc_6E436CBE:				; CODE XREF: sub_6E4369F0+2C4j
		add	ebp, 0Ch
		dec	ebx
		jnz	short loc_6E436CA0
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E436CCE:				; CODE XREF: sub_6E4369F0+14Fj
		mov	[esp+3Ch+var_2C], 105h
		mov	[esp+3Ch+var_30], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+3Ch+var_34], 10h
		mov	[esp+3Ch+var_38], 0DDh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		jmp	loc_6E436C6C
; ---------------------------------------------------------------------------

loc_6E436CFF:				; CODE XREF: sub_6E4369F0+109j
		mov	[esp+3Ch+var_2C], 0F0h

loc_6E436D07:				; CODE XREF: sub_6E4369F0+348j
		mov	[esp+3Ch+var_30], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+3Ch+var_34], 3
		mov	[esp+3Ch+var_38], 0DDh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		jmp	loc_6E436C6C
; ---------------------------------------------------------------------------

loc_6E436D30:				; CODE XREF: sub_6E4369F0+129j
		mov	[esp+3Ch+var_2C], 0F8h
		jmp	short loc_6E436D07
; ---------------------------------------------------------------------------

loc_6E436D3A:				; CODE XREF: sub_6E4369F0+2Bj
		mov	[esp+3Ch+var_2C], 0CBh
		mov	[esp+3Ch+var_30], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0DDh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E436BE8
sub_6E4369F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E436D70	proc near		; CODE XREF: SSL_copy_session_id+95p
					; SSL_CTX_free+DCp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		test	edi, edi
		jz	short loc_6E436DB0
		mov	[esp+2Ch+var_1C], 147h
		mov	[esp+2Ch+var_20], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_24], 0Dh
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		lea	eax, [edi+90h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_add_lock
		test	eax, eax
		jle	short loc_6E436DC0

loc_6E436DB0:				; CODE XREF: sub_6E436D70+Cj
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E436DC0:				; CODE XREF: sub_6E436D70+3Ej
		mov	eax, [edi+18h]
		test	eax, eax
		jz	short loc_6E436DCF
		mov	[esp+2Ch+var_2C], eax
		call	RSA_free

loc_6E436DCF:				; CODE XREF: sub_6E436D70+55j
		mov	eax, [edi+20h]
		test	eax, eax
		jz	short loc_6E436DDE
		mov	[esp+2Ch+var_2C], eax
		call	DH_free

loc_6E436DDE:				; CODE XREF: sub_6E436D70+64j
		mov	eax, [edi+28h]
		test	eax, eax
		jz	short loc_6E436DED
		mov	[esp+2Ch+var_2C], eax
		call	EC_KEY_free

loc_6E436DED:				; CODE XREF: sub_6E436D70+73j
		mov	ebx, edi
		xor	esi, esi
		jmp	short loc_6E436E00
; ---------------------------------------------------------------------------
		align 10h

loc_6E436E00:				; CODE XREF: sub_6E436D70+81j
					; sub_6E436D70+B5j
		mov	eax, [ebx+30h]
		test	eax, eax
		jz	short loc_6E436E0F
		mov	[esp+2Ch+var_2C], eax
		call	X509_free

loc_6E436E0F:				; CODE XREF: sub_6E436D70+95j
		mov	eax, [ebx+34h]
		test	eax, eax
		jz	short loc_6E436E1E
		mov	[esp+2Ch+var_2C], eax
		call	EVP_PKEY_free

loc_6E436E1E:				; CODE XREF: sub_6E436D70+A4j
		inc	esi
		add	ebx, 0Ch
		cmp	esi, 8
		jnz	short loc_6E436E00
		mov	[esp+2Ch+arg_0], edi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	CRYPTO_free
sub_6E436D70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E436E40	proc near		; CODE XREF: sub_6E40E840+49p
					; sub_6E40EEE0+ACp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		test	ebx, ebx
		jz	loc_6E436F20
		mov	eax, 1
		mov	edx, [ebx]
		test	edx, edx
		jz	short loc_6E436E70

loc_6E436E5D:				; CODE XREF: sub_6E436E40+BAj
					; sub_6E436E40+10Ej ...
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E436E70:				; CODE XREF: sub_6E436E40+1Bj
		mov	[esp+2Ch+var_24], 0B7h
		mov	[esp+2Ch+var_28], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_2C], 94h
		call	CRYPTO_malloc
		mov	esi, eax
		test	eax, eax
		jz	loc_6E436F70
		mov	edi, eax
		mov	edx, 94h
		test	al, 1
		jnz	loc_6E436F63

loc_6E436EA5:				; CODE XREF: sub_6E436E40+12Bj
		test	edi, 2
		jnz	loc_6E436F53

loc_6E436EB1:				; CODE XREF: sub_6E436E40+11Ej
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	short loc_6E436F10

loc_6E436EBF:				; CODE XREF: sub_6E436E40+D8j
		and	edx, 1
		jnz	short loc_6E436F00

loc_6E436EC4:				; CODE XREF: sub_6E436E40+C3j
		lea	eax, [esi+30h]
		mov	[esi], eax
		mov	dword ptr [esi+90h], 1
		call	EVP_sha1
		mov	[esi+50h], eax
		call	EVP_sha1
		mov	[esi+44h], eax
		call	EVP_sha1
		mov	[esi+38h], eax
		call	EVP_sha1
		mov	[esi+74h], eax
		mov	[ebx], esi
		mov	eax, 1
		jmp	loc_6E436E5D
; ---------------------------------------------------------------------------
		align 10h

loc_6E436F00:				; CODE XREF: sub_6E436E40+82j
		mov	byte ptr [edi],	0
		jmp	short loc_6E436EC4
; ---------------------------------------------------------------------------
		align 10h

loc_6E436F10:				; CODE XREF: sub_6E436E40+7Dj
		mov	word ptr [edi],	0
		add	edi, 2
		jmp	short loc_6E436EBF
; ---------------------------------------------------------------------------
		align 10h

loc_6E436F20:				; CODE XREF: sub_6E436E40+Cj
		mov	[esp+2Ch+var_1C], 17Bh
		mov	[esp+2Ch+var_20], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_24], 43h
		mov	[esp+2Ch+var_28], 0DEh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E436E5D
; ---------------------------------------------------------------------------

loc_6E436F53:				; CODE XREF: sub_6E436E40+6Bj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E436EB1
; ---------------------------------------------------------------------------

loc_6E436F63:				; CODE XREF: sub_6E436E40+5Fj
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	dl, 93h
		jmp	loc_6E436EA5
; ---------------------------------------------------------------------------

loc_6E436F70:				; CODE XREF: sub_6E436E40+50j
		mov	[esp+2Ch+var_1C], 0B9h
		mov	[esp+2Ch+var_20], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0A2h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	dword ptr [ebx], 0
		mov	[esp+2Ch+var_1C], 180h
		mov	[esp+2Ch+var_20], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0DEh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E436E5D
sub_6E436E40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E436FE0	proc near		; CODE XREF: sub_6E4055A0:loc_6E405B7Dp
					; sub_6E4084B0+2E5p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	edi
		push	ebx
		sub	esp, 24h
		mov	[esp+2Ch+var_24], 18Bh
		mov	[esp+2Ch+var_28], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_2C], 7Ch
		call	CRYPTO_malloc
		mov	edx, eax
		test	eax, eax
		jz	loc_6E437090
		mov	edi, eax
		mov	ebx, 7Ch
		test	al, 1
		jnz	short loc_6E437080

loc_6E437016:				; CODE XREF: sub_6E436FE0+A8j
		test	edi, 2
		jnz	short loc_6E437070

loc_6E43701E:				; CODE XREF: sub_6E436FE0+9Bj
		mov	ecx, ebx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	bl, 2
		jnz	short loc_6E437060
		and	ebx, 1
		jnz	short loc_6E437050

loc_6E437031:				; CODE XREF: sub_6E436FE0+73j
					; sub_6E436FE0+8Bj
		lea	eax, [edx+0Ch]
		mov	[edx+8], eax
		mov	dword ptr [edx+78h], 1
		mov	eax, edx

loc_6E437040:				; CODE XREF: sub_6E436FE0+DEj
		add	esp, 24h
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437050:				; CODE XREF: sub_6E436FE0+4Fj
					; sub_6E436FE0+8Dj
		mov	byte ptr [edi],	0
		jmp	short loc_6E437031
; ---------------------------------------------------------------------------
		align 10h

loc_6E437060:				; CODE XREF: sub_6E436FE0+4Aj
		mov	word ptr [edi],	0
		add	edi, 2
		and	ebx, 1
		jz	short loc_6E437031
		jmp	short loc_6E437050
; ---------------------------------------------------------------------------
		align 10h

loc_6E437070:				; CODE XREF: sub_6E436FE0+3Cj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	ebx, 2
		jmp	short loc_6E43701E
; ---------------------------------------------------------------------------
		align 10h

loc_6E437080:				; CODE XREF: sub_6E436FE0+34j
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	bl, 7Bh
		jmp	short loc_6E437016
; ---------------------------------------------------------------------------
		align 10h

loc_6E437090:				; CODE XREF: sub_6E436FE0+25j
		mov	[esp+2Ch+var_1C], 18Dh
		mov	[esp+2Ch+var_20], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0E1h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E437040
sub_6E436FE0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4370D0	proc near		; CODE XREF: sub_6E4084B0+307p
					; sub_6E437C10+140p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		test	esi, esi
		jz	short loc_6E43710C
		mov	[esp+2Ch+var_1C], 19Fh
		mov	[esp+2Ch+var_20], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+2Ch+var_24], 0Fh
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		lea	eax, [esi+78h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_add_lock
		test	eax, eax
		jle	short loc_6E437120

loc_6E43710C:				; CODE XREF: sub_6E4370D0+Bj
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437120:				; CODE XREF: sub_6E4370D0+3Aj
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6E437136
		mov	[esp+2Ch+var_28], offset X509_free
		mov	[esp+2Ch+var_2C], eax
		call	sk_pop_free

loc_6E437136:				; CODE XREF: sub_6E4370D0+54j
		xor	ebx, ebx
		nop
		lea	esi, [esi+0]

loc_6E437140:				; CODE XREF: sub_6E4370D0+86j
		mov	eax, [esi+ebx+0Ch]
		test	eax, eax
		jz	short loc_6E437150
		mov	[esp+2Ch+var_2C], eax
		call	X509_free

loc_6E437150:				; CODE XREF: sub_6E4370D0+76j
		add	ebx, 0Ch
		cmp	ebx, 60h
		jnz	short loc_6E437140
		mov	eax, [esi+6Ch]
		test	eax, eax
		jz	short loc_6E437167
		mov	[esp+2Ch+var_2C], eax
		call	RSA_free

loc_6E437167:				; CODE XREF: sub_6E4370D0+8Dj
		mov	eax, [esi+70h]
		test	eax, eax
		jz	short loc_6E437176
		mov	[esp+2Ch+var_2C], eax
		call	DH_free

loc_6E437176:				; CODE XREF: sub_6E4370D0+9Cj
		mov	eax, [esi+74h]
		test	eax, eax
		jz	short loc_6E437185
		mov	[esp+2Ch+var_2C], eax
		call	EC_KEY_free

loc_6E437185:				; CODE XREF: sub_6E4370D0+ABj
		mov	[esp+2Ch+arg_0], esi
		add	esp, 24h
		pop	ebx
		pop	esi
		jmp	CRYPTO_free
sub_6E4370D0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	edx, [esp+8]
		mov	eax, [esp+4]
		mov	[eax+4], edx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		jmp	short sub_6E4371C0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4371C0	proc near		; CODE XREF: sub_6E4055A0+3A7p
					; sub_6E4084B0+2C9p ...

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A0		= dword	ptr -0A0h
var_94		= byte ptr -94h
var_30		= dword	ptr -30h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 0B0h
		mov	esi, [esp+0BCh+arg_0]
		mov	ebx, [esp+0BCh+arg_4]
		test	ebx, ebx
		jz	short loc_6E4371E7
		mov	[esp+0BCh+var_BC], ebx
		call	sk_num
		test	eax, eax
		jnz	short loc_6E437200

loc_6E4371E7:				; CODE XREF: sub_6E4371C0+19j
		xor	eax, eax
		add	esp, 0B0h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437200:				; CODE XREF: sub_6E4371C0+25j
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], ebx
		call	sk_value
		mov	edx, [esi+0E4h]
		mov	edx, [edx+0Ch]
		mov	[esp+0BCh+var_B0], ebx
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], edx
		lea	ebx, [esp+0BCh+var_94]
		mov	[esp+0BCh+var_BC], ebx
		call	X509_STORE_CTX_init
		test	eax, eax
		jz	loc_6E4372E0
		call	SSL_get_ex_data_X509_STORE_CTX_idx
		mov	[esp+0BCh+var_B4], esi
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], ebx
		call	X509_STORE_CTX_set_ex_data
		mov	eax, [esi+24h]
		test	eax, eax
		jz	loc_6E437320
		mov	eax, offset aSsl_client	; "ssl_client"

loc_6E43725E:				; CODE XREF: sub_6E4371C0+165j
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], ebx
		call	X509_STORE_CTX_set_default
		mov	edi, [esi+70h]
		mov	[esp+0BCh+var_BC], ebx
		call	X509_STORE_CTX_get0_param
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], eax
		call	X509_VERIFY_PARAM_set1
		mov	eax, [esi+0CCh]
		test	eax, eax
		jz	short loc_6E437297
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], ebx
		call	X509_STORE_CTX_set_verify_cb

loc_6E437297:				; CODE XREF: sub_6E4371C0+C9j
		mov	edx, [esi+0E4h]
		mov	eax, [edx+64h]
		test	eax, eax
		jz	loc_6E437330
		mov	edx, [edx+68h]
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_BC], ebx
		call	eax
		mov	edi, eax

loc_6E4372B6:				; CODE XREF: sub_6E4371C0+17Aj
		mov	edx, [esp+0BCh+var_30]
		mov	[esi+0ECh], edx
		mov	[esp+0BCh+var_BC], ebx
		call	X509_STORE_CTX_cleanup
		mov	eax, edi
		add	esp, 0B0h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4372E0:				; CODE XREF: sub_6E4371C0+73j
		mov	[esp+0BCh+var_A0], eax
		mov	[esp+0BCh+var_AC], 1DCh
		mov	[esp+0BCh+var_B0], offset aSsl_cert_c ;	"ssl_cert.c"
		mov	[esp+0BCh+var_B4], 0Bh
		mov	[esp+0BCh+var_B8], 0CFh
		mov	[esp+0BCh+var_BC], 14h
		call	ERR_put_error
		mov	eax, [esp+0BCh+var_A0]
		add	esp, 0B0h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437320:				; CODE XREF: sub_6E4371C0+93j
		mov	eax, offset aSsl_server	; "ssl_server"
		jmp	loc_6E43725E
; ---------------------------------------------------------------------------
		align 10h

loc_6E437330:				; CODE XREF: sub_6E4371C0+E2j
		mov	[esp+0BCh+var_BC], ebx
		call	X509_verify_cert
		mov	edi, eax
		jmp	loc_6E4372B6
sub_6E4371C0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  47. SSL_dup_CA_list

; =============== S U B	R O U T	I N E =======================================


		public SSL_dup_CA_list
SSL_dup_CA_list	proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [esp+1Ch+arg_0]
		call	sk_new_null
		mov	edi, eax
		xor	ebx, ebx
		jmp	short loc_6E437389
; ---------------------------------------------------------------------------
		align 10h

loc_6E437360:				; CODE XREF: SSL_dup_CA_list+53j
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], esi
		call	sk_value
		mov	[esp+1Ch+var_1C], eax
		call	X509_NAME_dup
		test	eax, eax
		jz	short loc_6E4373A0
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], edi
		call	sk_push
		test	eax, eax
		jz	short loc_6E4373A0
		inc	ebx

loc_6E437389:				; CODE XREF: SSL_dup_CA_list+13j
		mov	[esp+1Ch+var_1C], esi
		call	sk_num
		cmp	ebx, eax
		jl	short loc_6E437360
		mov	eax, edi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4373A0:				; CODE XREF: SSL_dup_CA_list+36j
					; SSL_dup_CA_list+46j
		mov	[esp+1Ch+var_18], offset X509_NAME_free
		mov	[esp+1Ch+var_1C], edi
		call	sk_pop_free
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
SSL_dup_CA_list	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  85. SSL_set_client_CA_list

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_client_CA_list
SSL_set_client_CA_list proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+0F8h]
		test	eax, eax
		jz	short loc_6E4373E2
		mov	[esp+1Ch+var_18], offset X509_NAME_free
		mov	[esp+1Ch+var_1C], eax
		call	sk_pop_free

loc_6E4373E2:				; CODE XREF: SSL_set_client_CA_list+10j
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx+0F8h], eax
		add	esp, 18h
		pop	ebx
		retn
SSL_set_client_CA_list endp

; ---------------------------------------------------------------------------
		jmp	short SSL_CTX_set_client_CA_list
; ---------------------------------------------------------------------------
		align 10h
; Exported entry  16. SSL_CTX_set_client_CA_list

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_client_CA_list
SSL_CTX_set_client_CA_list proc	near	; CODE XREF: .text:6E4373F1j

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [ebx+0A0h]
		test	eax, eax
		jz	short loc_6E437422
		mov	[esp+1Ch+var_18], offset X509_NAME_free
		mov	[esp+1Ch+var_1C], eax
		call	sk_pop_free

loc_6E437422:				; CODE XREF: SSL_CTX_set_client_CA_list+10j
		mov	eax, [esp+1Ch+arg_4]
		mov	[ebx+0A0h], eax
		add	esp, 18h
		pop	ebx
		retn
SSL_CTX_set_client_CA_list endp

; ---------------------------------------------------------------------------
		jmp	short SSL_CTX_get_client_CA_list
; ---------------------------------------------------------------------------
		align 10h
; Exported entry   9. SSL_CTX_get_client_CA_list

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_client_CA_list
SSL_CTX_get_client_CA_list proc	near	; CODE XREF: .text:6E437431j

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0A0h]
		retn
SSL_CTX_get_client_CA_list endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  56. SSL_get_client_CA_list

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_client_CA_list
SSL_get_client_CA_list proc near	; CODE XREF: sub_6E403800+8Cp
					; sub_6E40C970+CAp ...

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		cmp	dword ptr [edx+4], 1000h
		jz	short loc_6E437470
		mov	eax, [edx+0F8h]
		test	eax, eax
		jz	short loc_6E437490
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437470:				; CODE XREF: SSL_get_client_CA_list+Bj
		mov	eax, [edx]
		sar	eax, 8
		cmp	eax, 3
		jnz	short loc_6E4374A0
		mov	eax, [edx+58h]
		test	eax, eax
		jz	short loc_6E4374A0
		mov	eax, [eax+36Ch]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437490:				; CODE XREF: SSL_get_client_CA_list+15j
		mov	eax, [edx+0E4h]
		mov	eax, [eax+0A0h]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4374A0:				; CODE XREF: SSL_get_client_CA_list+28j
					; SSL_get_client_CA_list+2Fj
		xor	eax, eax
		retn
SSL_get_client_CA_list endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  36. SSL_add_client_CA

; =============== S U B	R O U T	I N E =======================================


		public SSL_add_client_CA
SSL_add_client_CA proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	edi, [esp+1Ch+arg_0]
		mov	ebx, [esp+1Ch+arg_4]
		test	ebx, ebx
		jz	short loc_6E437540
		mov	eax, [edi+0F8h]
		test	eax, eax
		jz	short loc_6E437530

loc_6E4374CC:				; CODE XREF: SSL_add_client_CA+8Dj
		mov	[esp+1Ch+var_1C], ebx
		call	X509_get_subject_name
		mov	[esp+1Ch+var_1C], eax
		call	X509_NAME_dup
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E437540
		mov	eax, [edi+0F8h]
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], eax
		call	sk_push
		test	eax, eax
		jz	short loc_6E437510
		mov	eax, 1
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437510:				; CODE XREF: SSL_add_client_CA+46j
		mov	[esp+1Ch+var_10], eax
		mov	[esp+1Ch+var_1C], esi
		call	X509_NAME_free
		mov	eax, [esp+1Ch+var_10]
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437530:				; CODE XREF: SSL_add_client_CA+1Aj
		call	sk_new_null
		mov	[edi+0F8h], eax
		test	eax, eax
		jnz	short loc_6E4374CC
		nop

loc_6E437540:				; CODE XREF: SSL_add_client_CA+10j
					; SSL_add_client_CA+30j
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
SSL_add_client_CA endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   3. SSL_CTX_add_client_CA

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_add_client_CA
SSL_CTX_add_client_CA proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	edi, [esp+1Ch+arg_0]
		mov	ebx, [esp+1Ch+arg_4]
		test	ebx, ebx
		jz	short loc_6E4375E0
		mov	eax, [edi+0A0h]
		test	eax, eax
		jz	short loc_6E4375D0

loc_6E43756C:				; CODE XREF: SSL_CTX_add_client_CA+8Dj
		mov	[esp+1Ch+var_1C], ebx
		call	X509_get_subject_name
		mov	[esp+1Ch+var_1C], eax
		call	X509_NAME_dup
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E4375E0
		mov	eax, [edi+0A0h]
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], eax
		call	sk_push
		test	eax, eax
		jz	short loc_6E4375B0
		mov	eax, 1
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4375B0:				; CODE XREF: SSL_CTX_add_client_CA+46j
		mov	[esp+1Ch+var_10], eax
		mov	[esp+1Ch+var_1C], esi
		call	X509_NAME_free
		mov	eax, [esp+1Ch+var_10]
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4375D0:				; CODE XREF: SSL_CTX_add_client_CA+1Aj
		call	sk_new_null
		mov	[edi+0A0h], eax
		test	eax, eax
		jnz	short loc_6E43756C
		nop

loc_6E4375E0:				; CODE XREF: SSL_CTX_add_client_CA+10j
					; SSL_CTX_add_client_CA+30j
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
SSL_CTX_add_client_CA endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  73. SSL_load_client_CA_file

; =============== S U B	R O U T	I N E =======================================


		public SSL_load_client_CA_file
SSL_load_client_CA_file	proc near

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	[esp+4Ch+var_20], 0
		mov	[esp+4Ch+var_4C], offset sub_6E4367B0
		call	sk_new
		mov	edi, eax
		call	BIO_s_file
		mov	[esp+4Ch+var_4C], eax
		call	BIO_new
		mov	esi, eax
		test	edi, edi
		jz	loc_6E437770
		test	eax, eax
		jz	loc_6E437770
		mov	eax, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 3
		mov	[esp+4Ch+var_48], 6Ch
		mov	[esp+4Ch+var_4C], esi
		call	BIO_ctrl
		test	eax, eax
		jnz	short loc_6E437690

loc_6E437650:				; CODE XREF: SSL_load_client_CA_file+177j
		xor	ebx, ebx

loc_6E437652:				; CODE XREF: SSL_load_client_CA_file+D2j
					; SSL_load_client_CA_file+1B6j	...
		mov	[esp+4Ch+var_4C], edi
		call	sk_free

loc_6E43765A:				; CODE XREF: SSL_load_client_CA_file+1B0j
		test	esi, esi
		jz	short loc_6E437666
		mov	[esp+4Ch+var_4C], esi
		call	BIO_free

loc_6E437666:				; CODE XREF: SSL_load_client_CA_file+6Cj
		mov	eax, [esp+4Ch+var_20]
		test	eax, eax
		jz	short loc_6E437676
		mov	[esp+4Ch+var_4C], eax
		call	X509_free

loc_6E437676:				; CODE XREF: SSL_load_client_CA_file+7Cj
		test	ebx, ebx
		jz	short loc_6E43767F
		call	ERR_clear_error

loc_6E43767F:				; CODE XREF: SSL_load_client_CA_file+88j
		mov	eax, ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437690:				; CODE XREF: SSL_load_client_CA_file+5Ej
		xor	ebx, ebx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4376A0:				; CODE XREF: SSL_load_client_CA_file+116j
					; SSL_load_client_CA_file+138j
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		lea	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	PEM_read_bio_X509
		test	eax, eax
		jz	short loc_6E437652
		test	ebx, ebx
		jz	short loc_6E437730

loc_6E4376C8:				; CODE XREF: SSL_load_client_CA_file+149j
		mov	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_4C], eax
		call	X509_get_subject_name
		test	eax, eax
		jz	loc_6E4377B0
		mov	[esp+4Ch+var_4C], eax
		call	X509_NAME_dup
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E4377B0
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	sk_find
		test	eax, eax
		js	short loc_6E437710
		mov	[esp+4Ch+var_4C], ebp
		call	X509_NAME_free
		jmp	short loc_6E4376A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E437710:				; CODE XREF: SSL_load_client_CA_file+10Cj
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], edi
		call	sk_push
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	sk_push
		jmp	loc_6E4376A0
; ---------------------------------------------------------------------------
		align 10h

loc_6E437730:				; CODE XREF: SSL_load_client_CA_file+D6j
		call	sk_new_null
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_6E4376C8
		mov	[esp+4Ch+var_3C], 286h
		mov	[esp+4Ch+var_40], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+4Ch+var_44], 41h
		mov	[esp+4Ch+var_48], 0B9h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		jmp	loc_6E437650
; ---------------------------------------------------------------------------
		align 10h

loc_6E437770:				; CODE XREF: SSL_load_client_CA_file+2Ej
					; SSL_load_client_CA_file+36j
		mov	[esp+4Ch+var_3C], 279h
		mov	[esp+4Ch+var_40], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+4Ch+var_44], 41h
		mov	[esp+4Ch+var_48], 0B9h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	ebx, ebx
		test	edi, edi
		jz	loc_6E43765A
		jmp	loc_6E437652
; ---------------------------------------------------------------------------
		align 10h

loc_6E4377B0:				; CODE XREF: SSL_load_client_CA_file+E6j
					; SSL_load_client_CA_file+F8j
		mov	[esp+4Ch+var_48], offset X509_NAME_free
		mov	[esp+4Ch+var_4C], ebx
		call	sk_pop_free
		xor	ebx, ebx
		jmp	loc_6E437652
SSL_load_client_CA_file	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 185. SSL_add_file_cert_subjects_to_stack

; =============== S U B	R O U T	I N E =======================================


		public SSL_add_file_cert_subjects_to_stack
SSL_add_file_cert_subjects_to_stack proc near
					; CODE XREF: SSL_add_dir_cert_subjects_to_stack+ABp

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_20], 0
		mov	[esp+4Ch+var_48], offset sub_6E4367B0
		mov	[esp+4Ch+var_4C], ebx
		call	sk_set_cmp_func
		mov	[esp+4Ch+var_30], eax
		call	BIO_s_file
		mov	[esp+4Ch+var_4C], eax
		call	BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_6E437900
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 3
		mov	[esp+4Ch+var_48], 6Ch
		mov	[esp+4Ch+var_4C], esi
		call	BIO_ctrl
		test	eax, eax
		jz	short loc_6E4378A0
		lea	edi, [esp+4Ch+var_20]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E437840:				; CODE XREF: SSL_add_file_cert_subjects_to_stack+CAj
					; SSL_add_file_cert_subjects_to_stack+11Cj
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], esi
		call	PEM_read_bio_X509
		test	eax, eax
		jz	loc_6E437940
		mov	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_4C], eax
		call	X509_get_subject_name
		test	eax, eax
		jz	short loc_6E4378A0
		mov	[esp+4Ch+var_4C], eax
		call	X509_NAME_dup
		mov	ebp, eax
		test	eax, eax
		jz	short loc_6E4378A0
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sk_find
		test	eax, eax
		js	short loc_6E4378E0
		mov	[esp+4Ch+var_4C], ebp
		call	X509_NAME_free
		jmp	short loc_6E437840
; ---------------------------------------------------------------------------
		align 10h

loc_6E4378A0:				; CODE XREF: SSL_add_file_cert_subjects_to_stack+60j
					; SSL_add_file_cert_subjects_to_stack+A2j ...
		xor	edi, edi

loc_6E4378A2:				; CODE XREF: SSL_add_file_cert_subjects_to_stack+17Aj
		mov	[esp+4Ch+var_4C], esi
		call	BIO_free

loc_6E4378AA:				; CODE XREF: SSL_add_file_cert_subjects_to_stack+15Ej
		mov	eax, [esp+4Ch+var_20]
		test	eax, eax
		jz	short loc_6E4378BA
		mov	[esp+4Ch+var_4C], eax
		call	X509_free

loc_6E4378BA:				; CODE XREF: SSL_add_file_cert_subjects_to_stack+E0j
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	sk_set_cmp_func
		mov	eax, edi
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4378E0:				; CODE XREF: SSL_add_file_cert_subjects_to_stack+C0j
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], ebx
		call	sk_push
		jmp	loc_6E437840
; ---------------------------------------------------------------------------
		jmp	short loc_6E437900
; ---------------------------------------------------------------------------
		align 10h

loc_6E437900:				; CODE XREF: SSL_add_file_cert_subjects_to_stack+38j
					; SSL_add_file_cert_subjects_to_stack+121j
		mov	[esp+4Ch+var_3C], 2C2h
		mov	[esp+4Ch+var_40], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+4Ch+var_44], 41h
		mov	[esp+4Ch+var_48], 0D8h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E4378AA
; ---------------------------------------------------------------------------
		align 10h

loc_6E437940:				; CODE XREF: SSL_add_file_cert_subjects_to_stack+8Ej
		call	ERR_clear_error
		mov	edi, 1
		jmp	loc_6E4378A2
SSL_add_file_cert_subjects_to_stack endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 188. SSL_add_dir_cert_subjects_to_stack

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SSL_add_dir_cert_subjects_to_stack(int, char *)
		public SSL_add_dir_cert_subjects_to_stack
SSL_add_dir_cert_subjects_to_stack proc	near

Str		= dword	ptr -44Ch
var_448		= dword	ptr -448h
var_444		= dword	ptr -444h
var_440		= dword	ptr -440h
var_43C		= dword	ptr -43Ch
var_420		= dword	ptr -420h
var_41C		= byte ptr -41Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 43Ch
		mov	ebx, [esp+44Ch+arg_4]
		mov	[esp+44Ch+var_420], 0
		mov	[esp+44Ch+var_440], 2F9h
		mov	[esp+44Ch+var_444], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+44Ch+var_448], 18h
		mov	[esp+44Ch+Str],	9
		call	CRYPTO_lock
		lea	esi, [esp+44Ch+var_41C]
		jmp	short loc_6E437A08
; ---------------------------------------------------------------------------
		align 10h

loc_6E4379A0:				; CODE XREF: SSL_add_dir_cert_subjects_to_stack+CCj
		mov	[esp+44Ch+Str],	ebx ; Str
		call	strlen
		mov	edi, eax
		mov	[esp+44Ch+Str],	ebp ; Str
		call	strlen
		lea	eax, [edi+eax+2]
		cmp	eax, 400h
		ja	loc_6E437B00
		mov	[esp+44Ch+var_43C], ebp
		mov	[esp+44Ch+var_440], ebx
		mov	[esp+44Ch+var_444], offset aSS ; "%s/%s"
		mov	[esp+44Ch+var_448], 400h
		mov	[esp+44Ch+Str],	esi
		call	BIO_snprintf
		dec	eax
		cmp	eax, 3FEh
		ja	loc_6E437AB0
		mov	[esp+44Ch+var_448], esi
		mov	eax, [esp+44Ch+arg_0]
		mov	[esp+44Ch+Str],	eax
		call	SSL_add_file_cert_subjects_to_stack
		test	eax, eax
		jz	loc_6E437AB0

loc_6E437A08:				; CODE XREF: SSL_add_dir_cert_subjects_to_stack+41j
		mov	[esp+44Ch+var_448], ebx
		lea	eax, [esp+44Ch+var_420]
		mov	[esp+44Ch+Str],	eax
		call	OPENSSL_DIR_read
		mov	ebp, eax
		test	eax, eax
		jnz	short loc_6E4379A0
		call	ds:_errno
		mov	edx, [eax]
		test	edx, edx
		jnz	short loc_6E437A34
		mov	ebx, 1
		jmp	loc_6E437AB2
; ---------------------------------------------------------------------------

loc_6E437A34:				; CODE XREF: SSL_add_dir_cert_subjects_to_stack+D8j
		call	ds:GetLastError
		mov	[esp+44Ch+var_43C], 312h
		mov	[esp+44Ch+var_440], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+44Ch+var_444], eax
		mov	[esp+44Ch+var_448], 0Ah
		mov	[esp+44Ch+Str],	2
		call	ERR_put_error
		mov	[esp+44Ch+var_440], offset asc_6E44D523	; "')"
		mov	[esp+44Ch+var_444], ebx
		mov	[esp+44Ch+var_448], offset aOpenssl_dir_re ; "OPENSSL_DIR_read(&ctx, '"
		mov	[esp+44Ch+Str],	3
		call	ERR_add_error_data
		mov	[esp+44Ch+var_43C], 314h
		mov	[esp+44Ch+var_440], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+44Ch+var_444], 2
		mov	[esp+44Ch+var_448], 0D7h
		mov	[esp+44Ch+Str],	14h
		call	ERR_put_error
		xchg	ax, ax

loc_6E437AB0:				; CODE XREF: SSL_add_dir_cert_subjects_to_stack+97j
					; SSL_add_dir_cert_subjects_to_stack+B2j ...
		xor	ebx, ebx

loc_6E437AB2:				; CODE XREF: SSL_add_dir_cert_subjects_to_stack+DFj
		mov	eax, [esp+44Ch+var_420]
		test	eax, eax
		jz	short loc_6E437AC6
		lea	eax, [esp+44Ch+var_420]
		mov	[esp+44Ch+Str],	eax
		call	OPENSSL_DIR_end

loc_6E437AC6:				; CODE XREF: SSL_add_dir_cert_subjects_to_stack+168j
		mov	[esp+44Ch+var_440], 31Dh
		mov	[esp+44Ch+var_444], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+44Ch+var_448], 18h
		mov	[esp+44Ch+Str],	0Ah
		call	CRYPTO_lock
		mov	eax, ebx
		add	esp, 43Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437B00:				; CODE XREF: SSL_add_dir_cert_subjects_to_stack+6Bj
		mov	[esp+44Ch+var_43C], 303h
		mov	[esp+44Ch+var_440], offset aSsl_cert_c ; "ssl_cert.c"
		mov	[esp+44Ch+var_444], 10Eh
		mov	[esp+44Ch+var_448], 0D7h
		mov	[esp+44Ch+Str],	14h
		call	ERR_put_error
		jmp	short loc_6E437AB0
SSL_add_dir_cert_subjects_to_stack endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E437B30	proc near		; DATA XREF: sub_6E438670+744o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebp, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		mov	ebx, 0Ah
		nop
		lea	esi, [esi+0]

loc_6E437B50:				; CODE XREF: sub_6E437B30+49j
		mov	eax, [esi]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edi
		call	RAND_pseudo_bytes
		test	eax, eax
		jle	short loc_6E437B7B
		mov	eax, [esi]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], ebp
		call	SSL_has_matching_session_id
		test	eax, eax
		jz	short loc_6E437B90
		dec	ebx
		jnz	short loc_6E437B50

loc_6E437B7B:				; CODE XREF: sub_6E437B30+30j
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437B90:				; CODE XREF: sub_6E437B30+46j
		mov	eax, 1
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6E437B30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E437BA0	proc near		; CODE XREF: sub_6E439430+6E9p
					; sub_6E43A170+E5p
		push	edi
		push	esi
		push	ebx
		mov	ebx, [ecx]
		test	ebx, ebx
		jz	short loc_6E437BD7
		mov	esi, [edx]
		test	esi, esi
		jz	short loc_6E437BD7
		lea	edi, [eax+1Ch]
		cmp	ebx, edi
		lea	edi, [eax+18h]
		jz	short loc_6E437BE0
		cmp	esi, edi
		jz	short loc_6E437BF0
		mov	[ebx+0C8h], esi
		mov	eax, [edx]
		mov	[eax+0CCh], ebx

loc_6E437BCB:				; CODE XREF: sub_6E437BA0+4Dj
					; sub_6E437BA0+59j ...
		mov	dword ptr [ecx], 0
		mov	dword ptr [edx], 0

loc_6E437BD7:				; CODE XREF: sub_6E437BA0+7j
					; sub_6E437BA0+Dj
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437BE0:				; CODE XREF: sub_6E437BA0+17j
		cmp	esi, edi
		jz	short loc_6E437C00
		mov	[eax+1Ch], esi
		mov	[esi+0CCh], ebx
		jmp	short loc_6E437BCB
; ---------------------------------------------------------------------------
		align 10h

loc_6E437BF0:				; CODE XREF: sub_6E437BA0+1Bj
		mov	[eax+18h], ebx
		mov	[ebx+0C8h], esi
		jmp	short loc_6E437BCB
; ---------------------------------------------------------------------------
		align 10h

loc_6E437C00:				; CODE XREF: sub_6E437BA0+42j
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+1Ch], 0
		jmp	short loc_6E437BCB
sub_6E437BA0	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E437C10	proc near		; DATA XREF: SSL_CTX_flush_sessions+59o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	edx, [esi+4]
		test	edx, edx
		jz	short loc_6E437C39
		mov	eax, [ebx+0ACh]
		add	eax, [ebx+0A8h]
		cmp	edx, eax
		jle	loc_6E437CE8

loc_6E437C39:				; CODE XREF: sub_6E437C10+13j
		mov	eax, [esi+8]
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], eax
		call	lh_delete
		mov	eax, [esi]
		mov	edx, [ebx+0CCh]
		test	edx, edx
		jz	short loc_6E437C9C
		mov	ecx, [ebx+0C8h]
		test	ecx, ecx
		jz	short loc_6E437C9C
		lea	edi, [eax+1Ch]
		cmp	edx, edi
		lea	edi, [eax+18h]
		jz	loc_6E437E30
		cmp	ecx, edi
		jz	loc_6E437E50
		mov	[edx+0C8h], ecx
		mov	eax, [ebx+0C8h]
		mov	[eax+0CCh], edx

loc_6E437C86:				; CODE XREF: sub_6E437C10+22Dj
					; sub_6E437C10+249j ...
		mov	dword ptr [ebx+0CCh], 0
		mov	dword ptr [ebx+0C8h], 0
		mov	eax, [esi]

loc_6E437C9C:				; CODE XREF: sub_6E437C10+42j
					; sub_6E437C10+4Cj
		mov	dword ptr [ebx+94h], 1
		mov	edx, [eax+2Ch]
		test	edx, edx
		jz	short loc_6E437CB6
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], eax
		call	edx

loc_6E437CB6:				; CODE XREF: sub_6E437C10+9Bj
		mov	[esp+2Ch+var_1C], 36Ch
		mov	[esp+2Ch+var_20], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_24], 0Eh
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		lea	eax, [ebx+0A4h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_add_lock
		test	eax, eax
		jle	short loc_6E437CF0

loc_6E437CE8:				; CODE XREF: sub_6E437C10+23j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E437CF0:				; CODE XREF: sub_6E437C10+D6j
		lea	eax, [ebx+0C0h]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], 3
		call	CRYPTO_free_ex_data
		mov	[esp+2Ch+var_28], 8
		lea	eax, [ebx+8]
		mov	[esp+2Ch+var_2C], eax
		call	OPENSSL_cleanse
		mov	[esp+2Ch+var_28], 30h
		lea	eax, [ebx+14h]
		mov	[esp+2Ch+var_2C], eax
		call	OPENSSL_cleanse
		mov	[esp+2Ch+var_28], 20h
		lea	eax, [ebx+48h]
		mov	[esp+2Ch+var_2C], eax
		call	OPENSSL_cleanse
		mov	eax, [ebx+98h]
		test	eax, eax
		jz	short loc_6E437D55
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E4370D0

loc_6E437D55:				; CODE XREF: sub_6E437C10+13Bj
		mov	eax, [ebx+9Ch]
		test	eax, eax
		jz	short loc_6E437D67
		mov	[esp+2Ch+var_2C], eax
		call	X509_free

loc_6E437D67:				; CODE XREF: sub_6E437C10+14Dj
		mov	eax, [ebx+0BCh]
		test	eax, eax
		jz	short loc_6E437D79
		mov	[esp+2Ch+var_2C], eax
		call	sk_free

loc_6E437D79:				; CODE XREF: sub_6E437C10+15Fj
		mov	eax, [ebx+0D0h]
		test	eax, eax
		jz	short loc_6E437D8B
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E437D8B:				; CODE XREF: sub_6E437C10+171j
		mov	eax, [ebx+0E4h]
		test	eax, eax
		jz	short loc_6E437D9D
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E437D9D:				; CODE XREF: sub_6E437C10+183j
		mov	dword ptr [ebx+0D4h], 0
		mov	eax, [ebx+0D8h]
		test	eax, eax
		jz	short loc_6E437DB9
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E437DB9:				; CODE XREF: sub_6E437C10+19Fj
		mov	dword ptr [ebx+0DCh], 0
		mov	eax, [ebx+0E0h]
		test	eax, eax
		jz	short loc_6E437DD5
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E437DD5:				; CODE XREF: sub_6E437C10+1BBj
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E437DE7
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E437DE7:				; CODE XREF: sub_6E437C10+1CDj
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	short loc_6E437DF9
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E437DF9:				; CODE XREF: sub_6E437C10+1DFj
		mov	eax, [ebx+0F0h]
		test	eax, eax
		jz	short loc_6E437E0B
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E437E0B:				; CODE XREF: sub_6E437C10+1F1j
		mov	[esp+2Ch+var_28], 0F4h
		mov	[esp+2Ch+var_2C], ebx
		call	OPENSSL_cleanse
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	CRYPTO_free
; ---------------------------------------------------------------------------
		align 10h

loc_6E437E30:				; CODE XREF: sub_6E437C10+56j
		cmp	ecx, edi
		jz	short loc_6E437E60
		mov	[eax+1Ch], ecx
		mov	[ecx+0CCh], edx
		jmp	loc_6E437C86
; ---------------------------------------------------------------------------
		align 10h

loc_6E437E50:				; CODE XREF: sub_6E437C10+5Ej
		mov	[eax+18h], edx
		mov	[edx+0C8h], ecx
		jmp	loc_6E437C86
; ---------------------------------------------------------------------------
		align 10h

loc_6E437E60:				; CODE XREF: sub_6E437C10+222j
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+1Ch], 0
		jmp	loc_6E437C86
sub_6E437C10	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 154. SSL_get_session

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_session
SSL_get_session	proc near		; CODE XREF: SSL_copy_session_id+12p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0C0h]
		retn
SSL_get_session	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 242. SSL_get1_session

; =============== S U B	R O U T	I N E =======================================


		public SSL_get1_session
SSL_get1_session proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+var_10], 0A5h
		mov	[esp+1Ch+var_14], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+1Ch+var_18], 0Eh
		mov	[esp+1Ch+var_1C], 9
		call	CRYPTO_lock
		mov	eax, [esp+1Ch+arg_0]
		mov	ebx, [eax+0C0h]
		test	ebx, ebx
		jz	short loc_6E437ECC
		inc	dword ptr [ebx+0A4h]

loc_6E437ECC:				; CODE XREF: SSL_get1_session+34j
		mov	[esp+1Ch+var_10], 0A9h
		mov	[esp+1Ch+var_14], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+1Ch+var_18], 0Eh
		mov	[esp+1Ch+var_1C], 0Ah
		call	CRYPTO_lock
		mov	eax, ebx
		add	esp, 18h
		pop	ebx
		retn
SSL_get1_session endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 168. SSL_SESSION_get_ex_new_index

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_get_ex_new_index
SSL_SESSION_get_ex_new_index proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_18], eax
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_1C], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], 3
		call	CRYPTO_get_ex_new_index
		add	esp, 2Ch
		retn
SSL_SESSION_get_ex_new_index endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 148. SSL_SESSION_set_ex_data

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_set_ex_data
SSL_SESSION_set_ex_data	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 0C0h
		mov	[esp+arg_0], eax
		jmp	CRYPTO_set_ex_data
SSL_SESSION_set_ex_data	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 146. SSL_SESSION_get_ex_data

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_get_ex_data
SSL_SESSION_get_ex_data	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		add	eax, 0C0h
		mov	[esp+arg_0], eax
		jmp	CRYPTO_get_ex_data
SSL_SESSION_get_ex_data	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  32. SSL_SESSION_new

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_new
SSL_SESSION_new	proc near		; CODE XREF: d2i_SSL_SESSION:loc_6E4418C0p

Time		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	edi
		push	ebx
		sub	esp, 24h
		mov	[esp+2Ch+var_24], 0C4h
		mov	[esp+2Ch+var_28], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+Time],	0F4h
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E438100
		mov	edi, eax
		mov	edx, 0F4h
		test	al, 1
		jnz	loc_6E4380F0

loc_6E437FBA:				; CODE XREF: SSL_SESSION_new+178j
		test	edi, 2
		jnz	loc_6E4380E0

loc_6E437FC6:				; CODE XREF: SSL_SESSION_new+16Bj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E4380C0
		and	edx, 1
		jnz	loc_6E4380B0

loc_6E437FE1:				; CODE XREF: SSL_SESSION_new+133j
					; SSL_SESSION_new+14Bj
		mov	dword ptr [ebx+0A0h], 1
		mov	dword ptr [ebx+0A4h], 1
		mov	dword ptr [ebx+0A8h], 130h
		mov	[esp+2Ch+Time],	0 ; Time
		call	time
		mov	[ebx+0ACh], eax
		mov	dword ptr [ebx+0C8h], 0
		mov	dword ptr [ebx+0CCh], 0
		mov	dword ptr [ebx+0B0h], 0
		mov	dword ptr [ebx+0D0h], 0
		mov	dword ptr [ebx+0D4h], 0
		mov	dword ptr [ebx+0D8h], 0
		mov	dword ptr [ebx+0DCh], 0
		mov	dword ptr [ebx+0E0h], 0
		lea	eax, [ebx+0C0h]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+Time],	3
		call	CRYPTO_new_ex_data
		mov	dword ptr [ebx+8Ch], 0
		mov	dword ptr [ebx+90h], 0
		mov	dword ptr [ebx+0F0h], 0
		mov	eax, ebx

loc_6E43809B:				; CODE XREF: SSL_SESSION_new+1AEj
		add	esp, 24h
		pop	ebx
		pop	edi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E4380B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4380B0:				; CODE XREF: SSL_SESSION_new+5Bj
					; SSL_SESSION_new+121j	...
		mov	byte ptr [edi],	0
		jmp	loc_6E437FE1
; ---------------------------------------------------------------------------
		align 10h

loc_6E4380C0:				; CODE XREF: SSL_SESSION_new+52j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E437FE1
		jmp	short loc_6E4380B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4380E0:				; CODE XREF: SSL_SESSION_new+40j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E437FC6
; ---------------------------------------------------------------------------

loc_6E4380F0:				; CODE XREF: SSL_SESSION_new+34j
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	dl, 0F3h
		jmp	loc_6E437FBA
; ---------------------------------------------------------------------------
		align 10h

loc_6E438100:				; CODE XREF: SSL_SESSION_new+25j
		mov	[esp+2Ch+var_1C], 0C6h
		mov	[esp+2Ch+var_20], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0BDh
		mov	[esp+2Ch+Time],	14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E43809B
SSL_SESSION_new	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 277. SSL_SESSION_get_id

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_get_id
SSL_SESSION_get_id proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		test	edx, edx
		jz	short loc_6E438151
		mov	ecx, [eax+44h]
		mov	[edx], ecx

loc_6E438151:				; CODE XREF: SSL_SESSION_get_id+Aj
		add	eax, 48h
		retn
SSL_SESSION_get_id endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 362. SSL_SESSION_get_compress_id

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_get_compress_id
SSL_SESSION_get_compress_id proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0B0h]
		retn
SSL_SESSION_get_compress_id endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  31. SSL_SESSION_free

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_free
SSL_SESSION_free proc near		; CODE XREF: sub_6E405C70+14Ep
					; sub_6E405C70+453p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_0]
		test	ebx, ebx
		jz	short loc_6E4381AE
		mov	[esp+2Ch+var_1C], 36Ch
		mov	[esp+2Ch+var_20], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_24], 0Eh
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		lea	eax, [ebx+0A4h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_add_lock
		test	eax, eax
		jle	short loc_6E4381C0

loc_6E4381AE:				; CODE XREF: SSL_SESSION_free+Aj
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4381C0:				; CODE XREF: SSL_SESSION_free+3Cj
		lea	eax, [ebx+0C0h]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], 3
		call	CRYPTO_free_ex_data
		mov	[esp+2Ch+var_28], 8
		lea	eax, [ebx+8]
		mov	[esp+2Ch+var_2C], eax
		call	OPENSSL_cleanse
		mov	[esp+2Ch+var_28], 30h
		lea	eax, [ebx+14h]
		mov	[esp+2Ch+var_2C], eax
		call	OPENSSL_cleanse
		mov	[esp+2Ch+var_28], 20h
		lea	eax, [ebx+48h]
		mov	[esp+2Ch+var_2C], eax
		call	OPENSSL_cleanse
		mov	eax, [ebx+98h]
		test	eax, eax
		jz	short loc_6E438225
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E4370D0

loc_6E438225:				; CODE XREF: SSL_SESSION_free+ABj
		mov	eax, [ebx+9Ch]
		test	eax, eax
		jz	short loc_6E438237
		mov	[esp+2Ch+var_2C], eax
		call	X509_free

loc_6E438237:				; CODE XREF: SSL_SESSION_free+BDj
		mov	eax, [ebx+0BCh]
		test	eax, eax
		jz	short loc_6E438249
		mov	[esp+2Ch+var_2C], eax
		call	sk_free

loc_6E438249:				; CODE XREF: SSL_SESSION_free+CFj
		mov	eax, [ebx+0D0h]
		test	eax, eax
		jz	short loc_6E43825B
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E43825B:				; CODE XREF: SSL_SESSION_free+E1j
		mov	eax, [ebx+0E4h]
		test	eax, eax
		jz	short loc_6E43826D
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E43826D:				; CODE XREF: SSL_SESSION_free+F3j
		mov	dword ptr [ebx+0D4h], 0
		mov	eax, [ebx+0D8h]
		test	eax, eax
		jz	short loc_6E438289
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E438289:				; CODE XREF: SSL_SESSION_free+10Fj
		mov	dword ptr [ebx+0DCh], 0
		mov	eax, [ebx+0E0h]
		test	eax, eax
		jz	short loc_6E4382A5
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E4382A5:				; CODE XREF: SSL_SESSION_free+12Bj
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E4382B7
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E4382B7:				; CODE XREF: SSL_SESSION_free+13Dj
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	short loc_6E4382C9
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E4382C9:				; CODE XREF: SSL_SESSION_free+14Fj
		mov	eax, [ebx+0F0h]
		test	eax, eax
		jz	short loc_6E4382DB
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free

loc_6E4382DB:				; CODE XREF: SSL_SESSION_free+161j
		mov	[esp+2Ch+var_28], 0F4h
		mov	[esp+2Ch+var_2C], ebx
		call	OPENSSL_cleanse
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 28h
		pop	ebx
		jmp	CRYPTO_free
SSL_SESSION_free endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E438300	proc near		; CODE XREF: sub_6E40A990+204p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_34], 0EEh
		mov	[esp+3Ch+var_38], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+3Ch+var_3C], 0F4h
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E4385F0
		mov	edi, eax
		mov	esi, ebp
		mov	eax, 0F4h
		test	bl, 1
		jnz	loc_6E438650

loc_6E438343:				; CODE XREF: sub_6E438300+360j
		test	edi, 2
		jnz	loc_6E438630

loc_6E43834F:				; CODE XREF: sub_6E438300+33Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_6E4385A0
		test	al, 1
		jnz	loc_6E438590

loc_6E438368:				; CODE XREF: sub_6E438300+29Aj
					; sub_6E438300+2ADj
		mov	dword ptr [ebx+8Ch], 0
		mov	dword ptr [ebx+90h], 0
		mov	dword ptr [ebx+0BCh], 0
		mov	dword ptr [ebx+0D0h], 0
		mov	dword ptr [ebx+0D8h], 0
		mov	dword ptr [ebx+0E0h], 0
		mov	dword ptr [ebx+0E4h], 0
		mov	dword ptr [ebx+0F0h], 0
		lea	esi, [ebx+0C0h]
		mov	dword ptr [ebx+0C0h], 0
		mov	dword ptr [esi+4], 0
		mov	dword ptr [ebx+0C8h], 0
		mov	dword ptr [ebx+0CCh], 0
		mov	dword ptr [ebx+0A4h], 1
		mov	eax, [ebp+98h]
		test	eax, eax
		jz	short loc_6E438422
		mov	[esp+3Ch+var_2C], 111h
		mov	[esp+3Ch+var_30], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+3Ch+var_34], 0Fh
		mov	[esp+3Ch+var_38], 1
		add	eax, 78h
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock

loc_6E438422:				; CODE XREF: sub_6E438300+F5j
		mov	eax, [ebp+9Ch]
		test	eax, eax
		jz	short loc_6E438457
		mov	[esp+3Ch+var_2C], 114h
		mov	[esp+3Ch+var_30], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+3Ch+var_34], 3
		mov	[esp+3Ch+var_38], 1
		add	eax, 10h
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock

loc_6E438457:				; CODE XREF: sub_6E438300+12Aj
		mov	eax, [ebp+8Ch]
		test	eax, eax
		jz	short loc_6E438477
		mov	[esp+3Ch+var_3C], eax
		call	BUF_strdup
		mov	[ebx+8Ch], eax
		test	eax, eax
		jz	loc_6E4385F0

loc_6E438477:				; CODE XREF: sub_6E438300+15Fj
		mov	eax, [ebp+90h]
		test	eax, eax
		jz	short loc_6E438497
		mov	[esp+3Ch+var_3C], eax
		call	BUF_strdup
		mov	[ebx+90h], eax
		test	eax, eax
		jz	loc_6E4385F0

loc_6E438497:				; CODE XREF: sub_6E438300+17Fj
		mov	eax, [ebp+0BCh]
		test	eax, eax
		jz	short loc_6E4384B7
		mov	[esp+3Ch+var_3C], eax
		call	sk_dup
		mov	[ebx+0BCh], eax
		test	eax, eax
		jz	loc_6E4385F0

loc_6E4384B7:				; CODE XREF: sub_6E438300+19Fj
		lea	eax, [ebp+0C0h]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], 3
		call	CRYPTO_dup_ex_data
		test	eax, eax
		jz	loc_6E4385F0
		mov	eax, [ebp+0D0h]
		test	eax, eax
		jz	short loc_6E4384F9
		mov	[esp+3Ch+var_3C], eax
		call	BUF_strdup
		mov	[ebx+0D0h], eax
		test	eax, eax
		jz	loc_6E4385F0

loc_6E4384F9:				; CODE XREF: sub_6E438300+1E1j
		mov	eax, [ebp+0D8h]
		test	eax, eax
		jz	short loc_6E438523
		mov	edx, [ebp+0D4h]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	BUF_memdup
		mov	[ebx+0D8h], eax
		test	eax, eax
		jz	loc_6E4385F0

loc_6E438523:				; CODE XREF: sub_6E438300+201j
		mov	eax, [ebp+0E0h]
		test	eax, eax
		jz	short loc_6E43854D
		mov	edx, [ebp+0DCh]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	BUF_memdup
		mov	[ebx+0E0h], eax
		test	eax, eax
		jz	loc_6E4385F0

loc_6E43854D:				; CODE XREF: sub_6E438300+22Bj
		mov	eax, [esp+3Ch+arg_4]
		test	eax, eax
		jnz	short loc_6E4385C0
		mov	dword ptr [ebx+0ECh], 0
		mov	dword ptr [ebx+0E8h], 0

loc_6E438569:				; CODE XREF: sub_6E438300+2E0j
		mov	eax, [ebp+0F0h]
		test	eax, eax
		jz	short loc_6E438585
		mov	[esp+3Ch+var_3C], eax
		call	BUF_strdup
		mov	[ebx+0F0h], eax
		test	eax, eax
		jz	short loc_6E4385F0

loc_6E438585:				; CODE XREF: sub_6E438300+271j
		mov	eax, ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E438590:				; CODE XREF: sub_6E438300+62j
					; sub_6E438300+2B3j
		mov	al, [esi+edx]
		mov	[esp+3Ch+var_1D], al
		mov	[edi+edx], al
		jmp	loc_6E438368
; ---------------------------------------------------------------------------
		align 10h

loc_6E4385A0:				; CODE XREF: sub_6E438300+5Aj
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_6E438368
		jmp	short loc_6E438590
; ---------------------------------------------------------------------------
		align 10h

loc_6E4385C0:				; CODE XREF: sub_6E438300+253j
		mov	edx, [ebp+0E8h]
		mov	eax, [ebp+0E4h]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	BUF_memdup
		mov	[ebx+0E4h], eax
		test	eax, eax
		jnz	loc_6E438569
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4385F0:				; CODE XREF: sub_6E438300+2Bj
					; sub_6E438300+171j ...
		mov	[esp+3Ch+var_2C], 15Dh
		mov	[esp+3Ch+var_30], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 15Ch
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_SESSION_free
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E438630:				; CODE XREF: sub_6E438300+49j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E43834F
; ---------------------------------------------------------------------------
		align 10h

loc_6E438650:				; CODE XREF: sub_6E438300+3Dj
		mov	al, [ebp+0]
		mov	[ebx], al
		lea	edi, [ebx+1]
		lea	esi, [ebp+1]
		mov	eax, 0F3h
		jmp	loc_6E438343
sub_6E438300	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E438670	proc near		; CODE XREF: sub_6E401670+248p
					; sub_6E407680+3Dp ...

Time		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebp, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_44], 0C4h
		mov	[esp+4Ch+var_48], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+Time],	0F4h
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E438D60
		mov	edi, eax
		mov	edx, 0F4h
		test	al, 1
		jnz	loc_6E438C20

loc_6E4386B0:				; CODE XREF: sub_6E438670+5B8j
		test	edi, 2
		jnz	loc_6E438C30

loc_6E4386BC:				; CODE XREF: sub_6E438670+5CBj
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	dl, 2
		jnz	loc_6E438860
		and	edx, 1
		jnz	loc_6E438850

loc_6E4386D7:				; CODE XREF: sub_6E438670+1E3j
					; sub_6E438670+1FBj
		mov	dword ptr [ebx+0A0h], 1
		mov	dword ptr [ebx+0A4h], 1
		mov	dword ptr [ebx+0A8h], 130h
		mov	[esp+4Ch+Time],	0 ; Time
		call	time
		mov	[ebx+0ACh], eax
		mov	dword ptr [ebx+0C8h], 0
		mov	dword ptr [ebx+0CCh], 0
		mov	dword ptr [ebx+0B0h], 0
		mov	dword ptr [ebx+0D0h], 0
		mov	dword ptr [ebx+0D4h], 0
		mov	dword ptr [ebx+0D8h], 0
		mov	dword ptr [ebx+0DCh], 0
		mov	dword ptr [ebx+0E0h], 0
		lea	eax, [ebx+0C0h]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+Time],	3
		call	CRYPTO_new_ex_data
		mov	dword ptr [ebx+8Ch], 0
		mov	dword ptr [ebx+90h], 0
		mov	dword ptr [ebx+0F0h], 0
		mov	eax, [ebp+170h]
		mov	eax, [eax+24h]
		test	eax, eax
		jz	loc_6E438920
		mov	[ebx+0A8h], eax

loc_6E4387A6:				; CODE XREF: sub_6E438670+2BEj
		mov	eax, [ebp+0C0h]
		test	eax, eax
		jz	short loc_6E4387C2
		mov	[esp+4Ch+Time],	eax
		call	SSL_SESSION_free
		mov	dword ptr [ebp+0C0h], 0

loc_6E4387C2:				; CODE XREF: sub_6E438670+13Ej
		mov	ecx, [esp+4Ch+arg_4]
		test	ecx, ecx
		jnz	loc_6E438880
		mov	dword ptr [ebx+44h], 0

loc_6E4387D5:				; CODE XREF: sub_6E438670+3A0j
					; sub_6E438670+416j ...
		mov	eax, [ebp+9Ch]
		cmp	eax, 20h
		ja	loc_6E4388E0
		lea	edi, [ebx+6Ch]
		lea	esi, [ebp+0A0h]
		cmp	eax, 4
		jnb	loc_6E438AA0

loc_6E4387F6:				; CODE XREF: sub_6E438670+44Fj
		xor	edx, edx
		test	al, 2
		jz	short loc_6E438807
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E438807:				; CODE XREF: sub_6E438670+18Aj
		test	al, 1
		jz	short loc_6E438815
		mov	al, [esi+edx]
		mov	byte ptr [esp+4Ch+var_30], al
		mov	[edi+edx], al

loc_6E438815:				; CODE XREF: sub_6E438670+199j
		mov	eax, [ebp+9Ch]
		mov	[ebx+68h], eax
		mov	[ebp+0C0h], ebx
		mov	eax, [ebp+0]
		mov	[ebx], eax
		mov	dword ptr [ebx+0A0h], 0
		mov	esi, 1

loc_6E438838:				; CODE XREF: sub_6E438670+584j
					; sub_6E438670+71Ej
		mov	eax, esi
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E438850:				; CODE XREF: sub_6E438670+61j
					; sub_6E438670+201j
		mov	byte ptr [edi],	0
		jmp	loc_6E4386D7
; ---------------------------------------------------------------------------
		align 10h

loc_6E438860:				; CODE XREF: sub_6E438670+58j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E4386D7
		jmp	short loc_6E438850
; ---------------------------------------------------------------------------
		align 10h

loc_6E438880:				; CODE XREF: sub_6E438670+158j
		mov	eax, [ebp+0]
		cmp	eax, 2
		jz	loc_6E438AD0
		cmp	eax, 300h
		jz	loc_6E438C60
		cmp	eax, 301h
		jz	loc_6E438940
		cmp	eax, 302h
		jz	loc_6E438CA0
		cmp	eax, 303h
		jz	loc_6E438CC0
		cmp	eax, 100h
		jz	loc_6E438D40
		cmp	eax, 0FEFFh
		jnz	loc_6E438C80
		mov	dword ptr [ebx], 0FEFFh
		mov	dword ptr [ebx+44h], 20h
		jmp	short loc_6E43894D
; ---------------------------------------------------------------------------
		align 10h

loc_6E4388E0:				; CODE XREF: sub_6E438670+16Ej
		mov	[esp+4Ch+var_3C], 230h
		mov	[esp+4Ch+var_40], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_44], 44h

loc_6E4388F8:				; CODE XREF: sub_6E438670+628j
					; sub_6E438670+688j ...
		mov	[esp+4Ch+var_48], 0B5h
		mov	[esp+4Ch+Time],	14h
		call	ERR_put_error
		mov	[esp+4Ch+Time],	ebx
		call	SSL_SESSION_free
		xor	esi, esi
		mov	eax, esi
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E438920:				; CODE XREF: sub_6E438670+12Aj
		mov	[esp+4Ch+Time],	ebp
		call	SSL_get_default_timeout
		mov	[ebx+0A8h], eax
		jmp	loc_6E4387A6
; ---------------------------------------------------------------------------
		align 10h

loc_6E438940:				; CODE XREF: sub_6E438670+22Cj
		mov	dword ptr [ebx], 301h
		mov	dword ptr [ebx+44h], 20h

loc_6E43894D:				; CODE XREF: sub_6E438670+26Bj
					; sub_6E438670+5FDj ...
		mov	esi, [ebp+140h]
		test	esi, esi
		jz	loc_6E438AEB

loc_6E43895B:				; CODE XREF: sub_6E438670+475j
		mov	dword ptr [ebx+44h], 0

loc_6E438962:				; CODE XREF: sub_6E438670+52Cj
		mov	eax, [ebp+120h]
		test	eax, eax
		jz	short loc_6E438982
		mov	[esp+4Ch+Time],	eax
		call	BUF_strdup
		mov	[ebx+0D0h], eax
		test	eax, eax
		jz	loc_6E438E00

loc_6E438982:				; CODE XREF: sub_6E438670+2FAj
		mov	edx, [ebp+148h]
		test	edx, edx
		jz	short loc_6E438A08
		mov	eax, [ebx+0D8h]
		test	eax, eax
		jz	short loc_6E43899E
		mov	[esp+4Ch+Time],	eax
		call	CRYPTO_free

loc_6E43899E:				; CODE XREF: sub_6E438670+324j
		mov	[esp+4Ch+var_44], 20Fh
		mov	[esp+4Ch+var_48], offset aSsl_sess_c ; "ssl_sess.c"
		mov	eax, [ebp+144h]
		mov	[esp+4Ch+Time],	eax
		call	CRYPTO_malloc
		mov	[ebx+0D8h], eax
		test	eax, eax
		jz	loc_6E438CE0
		mov	edx, [ebp+144h]
		mov	[ebx+0D4h], edx
		mov	edi, eax
		mov	esi, [ebp+148h]
		cmp	edx, 4
		jnb	loc_6E438C00

loc_6E4389E7:				; CODE XREF: sub_6E438670+5ABj
		xor	eax, eax
		test	dl, 2
		jz	short loc_6E4389F9
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2

loc_6E4389F9:				; CODE XREF: sub_6E438670+37Cj
		and	edx, 1
		jz	short loc_6E438A08
		mov	cl, [esi+eax]
		mov	byte ptr [esp+4Ch+var_30], cl
		mov	[edi+eax], cl

loc_6E438A08:				; CODE XREF: sub_6E438670+31Aj
					; sub_6E438670+38Cj
		mov	eax, [ebp+150h]
		test	eax, eax
		jz	loc_6E4387D5
		mov	eax, [ebx+0E0h]
		test	eax, eax
		jz	short loc_6E438A28
		mov	[esp+4Ch+Time],	eax
		call	CRYPTO_free

loc_6E438A28:				; CODE XREF: sub_6E438670+3AEj
		mov	[esp+4Ch+var_44], 21Eh
		mov	[esp+4Ch+var_48], offset aSsl_sess_c ; "ssl_sess.c"
		mov	eax, [ebp+14Ch]
		mov	[esp+4Ch+Time],	eax
		call	CRYPTO_malloc
		mov	[ebx+0E0h], eax
		test	eax, eax
		jz	loc_6E438D00
		mov	edx, [ebp+14Ch]
		mov	[ebx+0DCh], edx
		mov	edi, eax
		mov	esi, [ebp+150h]
		cmp	edx, 4
		jnb	loc_6E438C40

loc_6E438A71:				; CODE XREF: sub_6E438670+5EBj
		xor	eax, eax
		test	dl, 2
		jz	short loc_6E438A83
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2

loc_6E438A83:				; CODE XREF: sub_6E438670+406j
		and	edx, 1
		jz	loc_6E4387D5
		mov	cl, [esi+eax]
		mov	byte ptr [esp+4Ch+var_30], cl
		mov	[edi+eax], cl
		jmp	loc_6E4387D5
; ---------------------------------------------------------------------------
		align 10h

loc_6E438AA0:				; CODE XREF: sub_6E438670+180j
		test	edi, 1
		jnz	loc_6E438DE0

loc_6E438AAC:				; CODE XREF: sub_6E438670+783j
		test	edi, 2
		jnz	loc_6E438DC0

loc_6E438AB8:				; CODE XREF: sub_6E438670+75Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E4387F6
; ---------------------------------------------------------------------------
		align 10h

loc_6E438AD0:				; CODE XREF: sub_6E438670+216j
		mov	dword ptr [ebx], 2
		mov	dword ptr [ebx+44h], 10h
		mov	esi, [ebp+140h]
		test	esi, esi
		jnz	loc_6E43895B

loc_6E438AEB:				; CODE XREF: sub_6E438670+2E5j
		mov	[esp+4Ch+var_40], 1DAh
		mov	[esp+4Ch+var_44], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_48], 0Ch
		mov	[esp+4Ch+Time],	5
		call	CRYPTO_lock
		mov	edi, [ebp+0C4h]
		test	edi, edi
		jz	loc_6E438DA0

loc_6E438B1D:				; CODE XREF: sub_6E438670+73Ej
					; sub_6E438670+749j
		mov	[esp+4Ch+var_40], 1DFh
		mov	[esp+4Ch+var_44], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_48], 0Ch
		mov	[esp+4Ch+Time],	6
		call	CRYPTO_lock
		mov	eax, [ebx+44h]
		mov	[esp+4Ch+var_20], eax
		lea	edx, [ebx+48h]
		lea	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+Time],	ebp
		call	edi
		test	eax, eax
		mov	edx, [esp+4Ch+var_30]
		jz	loc_6E438D20
		mov	eax, [esp+4Ch+var_20]
		test	eax, eax
		jz	short loc_6E438BC0
		mov	edi, [ebx+44h]
		cmp	eax, edi
		ja	short loc_6E438BC0
		jnb	short loc_6E438B87
		cmp	dword ptr [ebp+0], 2
		jz	loc_6E438E5D

loc_6E438B87:				; CODE XREF: sub_6E438670+50Bj
		mov	[ebx+44h], eax

loc_6E438B8A:				; CODE XREF: sub_6E438670+81Dj
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+Time],	ebp
		call	SSL_has_matching_session_id
		test	eax, eax
		jz	loc_6E438962
		mov	[esp+4Ch+var_3C], 1FCh
		mov	[esp+4Ch+var_40], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_44], 12Eh
		jmp	short loc_6E438BD8
; ---------------------------------------------------------------------------
		align 10h

loc_6E438BC0:				; CODE XREF: sub_6E438670+502j
					; sub_6E438670+509j
		mov	[esp+4Ch+var_3C], 1F0h
		mov	[esp+4Ch+var_40], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_44], 12Fh

loc_6E438BD8:				; CODE XREF: sub_6E438670+54Aj
		mov	[esp+4Ch+var_48], 0B5h
		mov	[esp+4Ch+Time],	14h
		call	ERR_put_error
		mov	[esp+4Ch+Time],	ebx
		call	SSL_SESSION_free
		jmp	loc_6E438838
; ---------------------------------------------------------------------------
		align 10h

loc_6E438C00:				; CODE XREF: sub_6E438670+371j
		test	al, 1
		jnz	loc_6E438E31

loc_6E438C08:				; CODE XREF: sub_6E438670+7C8j
		test	edi, 2
		jnz	loc_6E438E1D

loc_6E438C14:				; CODE XREF: sub_6E438670+7BCj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E4389E7
; ---------------------------------------------------------------------------

loc_6E438C20:				; CODE XREF: sub_6E438670+3Aj
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	dl, 0F3h
		jmp	loc_6E4386B0
; ---------------------------------------------------------------------------
		align 10h

loc_6E438C30:				; CODE XREF: sub_6E438670+46j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	loc_6E4386BC
; ---------------------------------------------------------------------------

loc_6E438C40:				; CODE XREF: sub_6E438670+3FBj
		test	al, 1
		jnz	loc_6E438E51

loc_6E438C48:				; CODE XREF: sub_6E438670+7E8j
		test	edi, 2
		jnz	loc_6E438E3D

loc_6E438C54:				; CODE XREF: sub_6E438670+7DCj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E438A71
; ---------------------------------------------------------------------------

loc_6E438C60:				; CODE XREF: sub_6E438670+221j
		mov	dword ptr [ebx], 300h
		mov	dword ptr [ebx+44h], 20h
		jmp	loc_6E43894D
; ---------------------------------------------------------------------------
		align 10h

loc_6E438C80:				; CODE XREF: sub_6E438670+258j
		mov	[esp+4Ch+var_3C], 1C0h
		mov	[esp+4Ch+var_40], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_44], 103h
		jmp	loc_6E4388F8
; ---------------------------------------------------------------------------
		align 10h

loc_6E438CA0:				; CODE XREF: sub_6E438670+237j
		mov	dword ptr [ebx], 302h
		mov	dword ptr [ebx+44h], 20h
		jmp	loc_6E43894D
; ---------------------------------------------------------------------------
		align 10h

loc_6E438CC0:				; CODE XREF: sub_6E438670+242j
		mov	dword ptr [ebx], 303h
		mov	dword ptr [ebx+44h], 20h
		jmp	loc_6E43894D
; ---------------------------------------------------------------------------
		align 10h

loc_6E438CE0:				; CODE XREF: sub_6E438670+354j
		mov	[esp+4Ch+var_3C], 211h
		mov	[esp+4Ch+var_40], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_44], 41h
		jmp	loc_6E4388F8
; ---------------------------------------------------------------------------
		align 10h

loc_6E438D00:				; CODE XREF: sub_6E438670+3DEj
		mov	[esp+4Ch+var_3C], 220h
		mov	[esp+4Ch+var_40], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_44], 41h
		jmp	loc_6E4388F8
; ---------------------------------------------------------------------------
		align 10h

loc_6E438D20:				; CODE XREF: sub_6E438670+4F6j
		mov	[esp+4Ch+var_3C], 1E5h
		mov	[esp+4Ch+var_40], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_44], 12Dh
		jmp	loc_6E4388F8
; ---------------------------------------------------------------------------
		align 10h

loc_6E438D40:				; CODE XREF: sub_6E438670+24Dj
		mov	dword ptr [ebx], 100h
		mov	dword ptr [ebx+44h], 20h
		jmp	loc_6E43894D
; ---------------------------------------------------------------------------
		align 10h

loc_6E438D60:				; CODE XREF: sub_6E438670+2Bj
		mov	[esp+4Ch+var_3C], 0C6h
		mov	[esp+4Ch+var_40], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_44], 41h
		mov	[esp+4Ch+var_48], 0BDh
		mov	[esp+4Ch+Time],	14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E438838
; ---------------------------------------------------------------------------
		align 10h

loc_6E438DA0:				; CODE XREF: sub_6E438670+4A7j
		mov	eax, [ebp+170h]
		mov	edi, [eax+0ECh]
		test	edi, edi
		jnz	loc_6E438B1D
		mov	edi, offset sub_6E437B30
		jmp	loc_6E438B1D
; ---------------------------------------------------------------------------
		align 10h

loc_6E438DC0:				; CODE XREF: sub_6E438670+442j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E438AB8
; ---------------------------------------------------------------------------
		align 10h

loc_6E438DE0:				; CODE XREF: sub_6E438670+436j
		mov	cl, [ebp+0A0h]
		mov	[ebx+6Ch], cl
		lea	edi, [ebx+6Dh]
		lea	esi, [ebp+0A1h]
		dec	eax
		jmp	loc_6E438AAC
; ---------------------------------------------------------------------------
		align 10h

loc_6E438E00:				; CODE XREF: sub_6E438670+30Cj
		mov	[esp+4Ch+var_3C], 205h
		mov	[esp+4Ch+var_40], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+4Ch+var_44], 44h
		jmp	loc_6E4388F8
; ---------------------------------------------------------------------------

loc_6E438E1D:				; CODE XREF: sub_6E438670+59Ej
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E438C14
; ---------------------------------------------------------------------------

loc_6E438E31:				; CODE XREF: sub_6E438670+592j
		mov	al, [esi]
		mov	[edi], al
		inc	edi
		inc	esi
		dec	edx
		jmp	loc_6E438C08
; ---------------------------------------------------------------------------

loc_6E438E3D:				; CODE XREF: sub_6E438670+5DEj
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E438C54
; ---------------------------------------------------------------------------

loc_6E438E51:				; CODE XREF: sub_6E438670+5D2j
		mov	al, [esi]
		mov	[edi], al
		inc	edi
		inc	esi
		dec	edx
		jmp	loc_6E438C48
; ---------------------------------------------------------------------------

loc_6E438E5D:				; CODE XREF: sub_6E438670+511j
		lea	ecx, [ebx+eax+40h]
		sub	edi, eax
		mov	eax, edi
		mov	[esp+4Ch+var_30], edi
		lea	edi, [ecx+8]
		cmp	eax, 4
		jnb	short loc_6E438E92

loc_6E438E71:				; CODE XREF: sub_6E438670+83Dj
		test	byte ptr [esp+4Ch+var_30], 2
		jz	short loc_6E438E80
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E438E80:				; CODE XREF: sub_6E438670+806j
		test	byte ptr [esp+4Ch+var_30], 1
		jz	short loc_6E438E8A
		mov	byte ptr [edi],	0

loc_6E438E8A:				; CODE XREF: sub_6E438670+815j
		mov	eax, [ebx+44h]
		jmp	loc_6E438B8A
; ---------------------------------------------------------------------------

loc_6E438E92:				; CODE XREF: sub_6E438670+7FFj
		test	edi, 1
		jnz	short loc_6E438EAF

loc_6E438E9A:				; CODE XREF: sub_6E438670+84Aj
		test	edi, 2
		jnz	short loc_6E438EBC

loc_6E438EA2:				; CODE XREF: sub_6E438670+859j
		mov	ecx, [esp+4Ch+var_30]
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	short loc_6E438E71
; ---------------------------------------------------------------------------

loc_6E438EAF:				; CODE XREF: sub_6E438670+828j
		mov	byte ptr [ecx+8], 0
		lea	edi, [ecx+9]
		dec	[esp+4Ch+var_30]
		jmp	short loc_6E438E9A
; ---------------------------------------------------------------------------

loc_6E438EBC:				; CODE XREF: sub_6E438670+830j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	[esp+4Ch+var_30], 2
		jmp	short loc_6E438EA2
sub_6E438670	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  13. SSL_CTX_remove_session

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_remove_session
SSL_CTX_remove_session proc near	; CODE XREF: sub_6E40A990+2ABp
					; sub_6E413BF0+43Cp ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+1Ch+arg_4]
		test	ebx, ebx
		jz	short loc_6E438EE4
		mov	eax, [ebx+44h]
		test	eax, eax
		jnz	short loc_6E438EF0

loc_6E438EE4:				; CODE XREF: SSL_CTX_remove_session+Bj
					; SSL_CTX_remove_session+7Fj
		xor	eax, eax
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E438EF0:				; CODE XREF: SSL_CTX_remove_session+12j
		mov	[esp+1Ch+var_10], 350h
		mov	[esp+1Ch+var_14], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+1Ch+var_18], 0Ch
		mov	[esp+1Ch+var_1C], 9
		call	CRYPTO_lock
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+10h]
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], eax
		call	lh_retrieve
		cmp	ebx, eax
		jz	short loc_6E438F60
		mov	[esp+1Ch+var_10], 358h
		mov	[esp+1Ch+var_14], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+1Ch+var_18], 0Ch
		mov	[esp+1Ch+var_1C], 0Ah
		call	CRYPTO_lock
		jmp	short loc_6E438EE4
; ---------------------------------------------------------------------------
		jmp	short loc_6E438F60
; ---------------------------------------------------------------------------
		align 10h

loc_6E438F60:				; CODE XREF: SSL_CTX_remove_session+59j
					; SSL_CTX_remove_session+81j
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+10h]
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], eax
		call	lh_delete
		mov	esi, eax
		mov	eax, [ebx+0CCh]
		test	eax, eax
		jz	short loc_6E438FCD
		mov	edx, [ebx+0C8h]
		test	edx, edx
		jz	short loc_6E438FCD
		mov	ecx, [esp+1Ch+arg_0]
		add	ecx, 1Ch
		cmp	eax, ecx
		mov	ecx, [esp+1Ch+arg_0]
		jz	loc_6E439026
		add	ecx, 18h
		cmp	edx, ecx
		jz	loc_6E43903F
		mov	[eax+0C8h], edx
		mov	edx, [ebx+0C8h]
		mov	[edx+0CCh], eax

loc_6E438FB9:				; CODE XREF: SSL_CTX_remove_session+16Aj
					; SSL_CTX_remove_session+17Cj ...
		mov	dword ptr [ebx+0CCh], 0
		mov	dword ptr [ebx+0C8h], 0

loc_6E438FCD:				; CODE XREF: SSL_CTX_remove_session+ADj
					; SSL_CTX_remove_session+B7j
		mov	[esp+1Ch+var_10], 358h
		mov	[esp+1Ch+var_14], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+1Ch+var_18], 0Ch
		mov	[esp+1Ch+var_1C], 0Ah
		call	CRYPTO_lock
		mov	dword ptr [esi+94h], 1
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+2Ch]
		test	eax, eax
		jz	short loc_6E439013
		mov	[esp+1Ch+var_18], esi
		mov	ecx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], ecx
		call	eax

loc_6E439013:				; CODE XREF: SSL_CTX_remove_session+134j
		mov	[esp+1Ch+var_1C], esi
		call	SSL_SESSION_free
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E439026:				; CODE XREF: SSL_CTX_remove_session+C6j
		add	ecx, 18h
		cmp	edx, ecx
		jz	short loc_6E439051
		mov	ecx, [esp+1Ch+arg_0]
		mov	[ecx+1Ch], edx
		mov	[edx+0CCh], eax
		jmp	loc_6E438FB9
; ---------------------------------------------------------------------------

loc_6E43903F:				; CODE XREF: SSL_CTX_remove_session+D1j
		mov	ecx, [esp+1Ch+arg_0]
		mov	[ecx+18h], eax
		mov	[eax+0C8h], edx
		jmp	loc_6E438FB9
; ---------------------------------------------------------------------------

loc_6E439051:				; CODE XREF: SSL_CTX_remove_session+15Bj
		mov	eax, [esp+1Ch+arg_0]
		mov	dword ptr [eax+18h], 0
		mov	dword ptr [eax+1Ch], 0
		jmp	loc_6E438FB9
SSL_CTX_remove_session endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   4. SSL_CTX_add_session

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_add_session
SSL_CTX_add_session proc near		; CODE XREF: sub_6E4350C0+127p
					; sub_6E439430+5E6p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	esi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_2C], 309h
		mov	[esp+3Ch+var_30], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+3Ch+var_34], 0Eh
		mov	[esp+3Ch+var_38], 1
		lea	eax, [esi+0A4h]
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock
		mov	[esp+3Ch+var_30], 30Eh
		mov	[esp+3Ch+var_34], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+3Ch+var_38], 0Ch
		mov	[esp+3Ch+var_3C], 9
		call	CRYPTO_lock
		mov	eax, [ebx+10h]
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], eax
		call	lh_insert
		test	eax, eax
		jz	loc_6E4392C0
		cmp	eax, esi
		jz	loc_6E439260
		mov	edx, [eax+0CCh]
		test	edx, edx
		jz	loc_6E4392B0
		mov	ecx, [eax+0C8h]
		test	ecx, ecx
		jz	loc_6E4392B0
		lea	edi, [ebx+1Ch]
		cmp	edx, edi
		lea	edi, [ebx+18h]
		jz	loc_6E439360
		cmp	ecx, edi
		jz	loc_6E439380
		mov	[edx+0C8h], ecx
		mov	ecx, [eax+0C8h]
		mov	[ecx+0CCh], edx

loc_6E439134:				; CODE XREF: SSL_CTX_add_session+2FDj
					; SSL_CTX_add_session+319j ...
		mov	dword ptr [eax+0CCh], 0
		mov	dword ptr [eax+0C8h], 0

loc_6E439148:				; CODE XREF: SSL_CTX_add_session+243j
		mov	[esp+3Ch+var_3C], eax
		call	SSL_SESSION_free

loc_6E439150:				; CODE XREF: SSL_CTX_add_session+253j
		mov	eax, [esi+0CCh]
		test	eax, eax
		jz	short loc_6E43919D
		mov	edx, [esi+0C8h]
		test	edx, edx
		jz	short loc_6E43919D
		lea	ecx, [ebx+1Ch]
		cmp	eax, ecx
		jz	loc_6E4393DF
		cmp	edx, edi
		jz	loc_6E4393F1
		mov	[eax+0C8h], edx
		mov	edx, [esi+0C8h]
		mov	[edx+0CCh], eax

loc_6E439189:				; CODE XREF: SSL_CTX_add_session+37Cj
					; SSL_CTX_add_session+38Aj ...
		mov	dword ptr [esi+0CCh], 0
		mov	dword ptr [esi+0C8h], 0

loc_6E43919D:				; CODE XREF: SSL_CTX_add_session+E8j
					; SSL_CTX_add_session+F2j
		mov	eax, [ebx+18h]
		test	eax, eax
		jz	loc_6E4393C5
		mov	[esi+0CCh], eax
		mov	[eax+0C8h], esi
		mov	[esi+0C8h], edi
		mov	[ebx+18h], esi

loc_6E4391BD:				; CODE XREF: SSL_CTX_add_session+36Aj
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 2Bh
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_CTX_ctrl
		test	eax, eax
		jle	short loc_6E439257
		lea	eax, [ebx+1Ch]
		mov	[esp+3Ch+var_20], eax
		nop
		lea	esi, [esi+0]

loc_6E4391F0:				; CODE XREF: SSL_CTX_add_session+2E2j
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 14h
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_CTX_ctrl
		mov	esi, eax
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 2Bh
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_CTX_ctrl
		cmp	esi, eax
		jle	short loc_6E439257
		mov	esi, [ebx+1Ch]
		test	esi, esi
		jz	short loc_6E439257
		mov	eax, [esi+44h]
		test	eax, eax
		jz	short loc_6E439257
		mov	eax, [ebx+10h]
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], eax
		call	lh_retrieve
		cmp	esi, eax
		jz	short loc_6E4392D0

loc_6E439257:				; CODE XREF: SSL_CTX_add_session+16Fj
					; SSL_CTX_add_session+1C4j ...
		mov	eax, 1
		jmp	short loc_6E439270
; ---------------------------------------------------------------------------
		align 10h

loc_6E439260:				; CODE XREF: SSL_CTX_add_session+7Aj
		mov	[esp+3Ch+var_3C], eax
		call	SSL_SESSION_free
		xor	eax, eax
		lea	esi, [esi+0]

loc_6E439270:				; CODE XREF: SSL_CTX_add_session+1ECj
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_30], 340h
		mov	[esp+3Ch+var_34], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+3Ch+var_38], 0Ch
		mov	[esp+3Ch+var_3C], 0Ah
		call	CRYPTO_lock
		mov	eax, [esp+3Ch+var_20]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4392B0:				; CODE XREF: SSL_CTX_add_session+88j
					; SSL_CTX_add_session+96j
		lea	edi, [ebx+18h]
		jmp	loc_6E439148
; ---------------------------------------------------------------------------
		align 10h

loc_6E4392C0:				; CODE XREF: SSL_CTX_add_session+72j
		lea	edi, [ebx+18h]
		jmp	loc_6E439150
; ---------------------------------------------------------------------------
		align 10h

loc_6E4392D0:				; CODE XREF: SSL_CTX_add_session+1E5j
		mov	eax, [ebx+10h]
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], eax
		call	lh_delete
		mov	ebp, eax
		mov	edx, [esi+0CCh]
		test	edx, edx
		jz	short loc_6E43932D
		mov	ecx, [esi+0C8h]
		test	ecx, ecx
		jz	short loc_6E43932D
		cmp	edx, [esp+3Ch+var_20]
		jz	loc_6E43938E
		cmp	ecx, edi
		jz	loc_6E4393A4
		mov	[edx+0C8h], ecx
		mov	ecx, [esi+0C8h]
		mov	[ecx+0CCh], edx

loc_6E439319:				; CODE XREF: SSL_CTX_add_session+32Fj
					; SSL_CTX_add_session+33Dj ...
		mov	dword ptr [esi+0CCh], 0
		mov	dword ptr [esi+0C8h], 0

loc_6E43932D:				; CODE XREF: SSL_CTX_add_session+279j
					; SSL_CTX_add_session+283j
		mov	dword ptr [ebp+94h], 1
		mov	edx, [ebx+2Ch]
		test	edx, edx
		jz	short loc_6E439347
		mov	[esp+3Ch+var_38], ebp
		mov	[esp+3Ch+var_3C], ebx
		call	edx

loc_6E439347:				; CODE XREF: SSL_CTX_add_session+2CCj
		mov	[esp+3Ch+var_3C], ebp
		call	SSL_SESSION_free
		inc	dword ptr [ebx+54h]
		jmp	loc_6E4391F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E439360:				; CODE XREF: SSL_CTX_add_session+A4j
		cmp	ecx, edi
		jz	short loc_6E4393B2
		mov	[ebx+1Ch], ecx
		mov	[ecx+0CCh], edx
		jmp	loc_6E439134
; ---------------------------------------------------------------------------
		align 10h

loc_6E439380:				; CODE XREF: SSL_CTX_add_session+ACj
		mov	[ebx+18h], edx
		mov	[edx+0C8h], edi
		jmp	loc_6E439134
; ---------------------------------------------------------------------------

loc_6E43938E:				; CODE XREF: SSL_CTX_add_session+289j
		cmp	ecx, edi
		jz	short loc_6E4393FF
		mov	[ebx+1Ch], ecx
		mov	eax, [esp+3Ch+var_20]
		mov	[ecx+0CCh], eax
		jmp	loc_6E439319
; ---------------------------------------------------------------------------

loc_6E4393A4:				; CODE XREF: SSL_CTX_add_session+291j
		mov	[ebx+18h], edx
		mov	[edx+0C8h], edi
		jmp	loc_6E439319
; ---------------------------------------------------------------------------

loc_6E4393B2:				; CODE XREF: SSL_CTX_add_session+2F2j
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+1Ch], 0
		jmp	loc_6E439134
; ---------------------------------------------------------------------------

loc_6E4393C5:				; CODE XREF: SSL_CTX_add_session+132j
		mov	[ebx+18h], esi
		mov	[ebx+1Ch], esi
		mov	[esi+0C8h], edi
		lea	eax, [ebx+1Ch]
		mov	[esi+0CCh], eax
		jmp	loc_6E4391BD
; ---------------------------------------------------------------------------

loc_6E4393DF:				; CODE XREF: SSL_CTX_add_session+F9j
		cmp	edx, edi
		jz	short loc_6E439412
		mov	[ebx+1Ch], edx
		mov	[edx+0CCh], eax
		jmp	loc_6E439189
; ---------------------------------------------------------------------------

loc_6E4393F1:				; CODE XREF: SSL_CTX_add_session+101j
		mov	[ebx+18h], eax
		mov	[eax+0C8h], edi
		jmp	loc_6E439189
; ---------------------------------------------------------------------------

loc_6E4393FF:				; CODE XREF: SSL_CTX_add_session+320j
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+1Ch], 0
		jmp	loc_6E439319
; ---------------------------------------------------------------------------

loc_6E439412:				; CODE XREF: SSL_CTX_add_session+371j
		mov	dword ptr [ebx+18h], 0
		mov	dword ptr [ebx+1Ch], 0
		jmp	loc_6E439189
SSL_CTX_add_session endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E439430	proc near		; CODE XREF: sub_6E401670+397p

Buf1		= dword	ptr -13Ch
Buf2		= dword	ptr -138h
Size		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_120		= dword	ptr -120h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_CC		= dword	ptr -0CCh
var_C8		= byte ptr -0C8h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 12Ch
		mov	ebx, [esp+13Ch+arg_4]
		mov	ebp, [esp+13Ch+arg_8]
		mov	eax, [esp+13Ch+arg_C]
		mov	[esp+13Ch+var_114], 0
		lea	ecx, [ebx+ebp]
		cmp	eax, ecx
		jb	short loc_6E4394A0
		xor	edx, edx
		test	ebp, ebp
		setnz	dl
		mov	esi, edx
		mov	edi, esi
		lea	ecx, [esp+13Ch+var_114]
		mov	[esp+13Ch+var_12C], ecx
		mov	[esp+13Ch+var_130], eax
		mov	[esp+13Ch+Size], ebp
		mov	[esp+13Ch+Buf2], ebx
		mov	eax, [esp+13Ch+arg_0]
		mov	[esp+13Ch+Buf1], eax
		call	sub_6E41D840
		inc	eax
		cmp	eax, 4		; switch 5 cases
		ja	loc_6E439590	; jumptable 6E439496 default case
		jmp	ds:off_6E44D54C[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6E4394A0:				; CODE XREF: sub_6E439430+2Cj
		mov	esi, 0FFFFFFFFh

loc_6E4394A5:				; CODE XREF: sub_6E439430+FBj
					; sub_6E439430+130j ...
		mov	eax, esi
		add	esp, 12Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4394C0:				; CODE XREF: sub_6E439430+66j
					; DATA XREF: .rdata:off_6E44D54Co
		test	esi, esi	; jumptable 6E439496 cases 1,2
		jz	loc_6E439550	; jumptable 6E439496 cases 3,4
		mov	eax, [esp+13Ch+var_114]
		test	eax, eax
		jz	loc_6E439780

loc_6E4394D4:				; CODE XREF: sub_6E439430+461j
		mov	ebx, eax
		mov	edi, 1

loc_6E4394DB:				; CODE XREF: sub_6E439430+128j
		mov	edx, [ebx+68h]
		mov	eax, [esp+13Ch+arg_0]
		cmp	edx, [eax+9Ch]
		jz	loc_6E4395A0

loc_6E4394F1:				; CODE XREF: sub_6E439430+194j
		xor	esi, esi

loc_6E4394F3:				; CODE XREF: sub_6E439430+14Bj
					; sub_6E439430+1FEj ...
		mov	[esp+13Ch+var_12C], 36Ch
		mov	[esp+13Ch+var_130], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+13Ch+Size], 0Eh
		mov	[esp+13Ch+Buf2], 0FFFFFFFFh
		lea	eax, [ebx+0A4h]
		mov	[esp+13Ch+Buf1], eax
		call	CRYPTO_add_lock
		test	eax, eax
		jle	loc_6E439640

loc_6E439529:				; CODE XREF: sub_6E439430+343j
		test	edi, edi
		jnz	loc_6E4394A5
		mov	eax, [esp+13Ch+arg_0]
		mov	dword ptr [eax+140h], 1
		mov	eax, esi
		add	esp, 12Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439550:				; CODE XREF: sub_6E439430+66j
					; sub_6E439430+92j
					; DATA XREF: ...
		mov	ebx, [esp+13Ch+var_114]	; jumptable 6E439496 cases 3,4
		xor	edi, edi

loc_6E439556:				; CODE XREF: sub_6E439430+4DFj
		test	ebx, ebx
		jnz	loc_6E4394DB

loc_6E43955E:				; CODE XREF: sub_6E439430+47Cj
		xor	esi, esi
		jmp	loc_6E4394A5
; ---------------------------------------------------------------------------
		align 10h

loc_6E439570:				; CODE XREF: sub_6E439430+66j
					; DATA XREF: .rdata:off_6E44D54Co
		mov	ebx, [esp+13Ch+var_114]	; jumptable 6E439496 case 0
		mov	esi, 0FFFFFFFFh

loc_6E439579:				; CODE XREF: sub_6E439430+5C9j
					; sub_6E439430+6C1j
		test	ebx, ebx
		jnz	loc_6E4394F3
		jmp	loc_6E4394A5
; ---------------------------------------------------------------------------
		align 10h

loc_6E439590:				; CODE XREF: sub_6E439430+60j
		call	abort		; jumptable 6E439496 default case
; ---------------------------------------------------------------------------
		align 10h

loc_6E4395A0:				; CODE XREF: sub_6E439430+BBj
		mov	[esp+13Ch+Size], edx ; Size
		mov	[esp+13Ch+var_120], edx
		add	eax, 0A0h
		mov	[esp+13Ch+Buf2], eax ; Buf2
		lea	eax, [ebx+6Ch]
		mov	[esp+13Ch+Buf1], eax ; Buf1
		call	memcmp
		mov	esi, eax
		test	eax, eax
		mov	edx, [esp+13Ch+var_120]
		jnz	loc_6E4394F1
		mov	eax, [esp+13Ch+arg_0]
		test	byte ptr [eax+0C8h], 1
		jz	short loc_6E4395E2
		test	edx, edx
		jz	loc_6E4399C4

loc_6E4395E2:				; CODE XREF: sub_6E439430+1A8j
		mov	ecx, [ebx+0B4h]
		test	ecx, ecx
		jz	loc_6E439964

loc_6E4395F0:				; CODE XREF: sub_6E439430+589j
		mov	ebx, [ebx+0A8h]
		mov	[esp+13Ch+Buf1], 0 ; Time
		call	time
		mov	edx, [esp+13Ch+var_114]
		sub	eax, [edx+0ACh]
		cmp	ebx, eax
		mov	eax, [esp+13Ch+arg_0]
		jge	loc_6E439914
		mov	ebx, [eax+170h]
		inc	dword ptr [ebx+50h]
		test	edi, edi
		jnz	loc_6E439A67
		mov	ebx, edx
		jmp	loc_6E4394F3
; ---------------------------------------------------------------------------
		align 10h

loc_6E439640:				; CODE XREF: sub_6E439430+F3j
		lea	eax, [ebx+0C0h]
		mov	[esp+13Ch+Size], eax
		mov	[esp+13Ch+Buf2], ebx
		mov	[esp+13Ch+Buf1], 3
		call	CRYPTO_free_ex_data
		mov	[esp+13Ch+Buf2], 8
		lea	eax, [ebx+8]
		mov	[esp+13Ch+Buf1], eax
		call	OPENSSL_cleanse
		mov	[esp+13Ch+Buf2], 30h
		lea	eax, [ebx+14h]
		mov	[esp+13Ch+Buf1], eax
		call	OPENSSL_cleanse
		mov	[esp+13Ch+Buf2], 20h
		lea	eax, [ebx+48h]
		mov	[esp+13Ch+Buf1], eax
		call	OPENSSL_cleanse
		mov	eax, [ebx+98h]
		test	eax, eax
		jz	short loc_6E4396A5
		mov	[esp+13Ch+Buf1], eax
		call	sub_6E4370D0

loc_6E4396A5:				; CODE XREF: sub_6E439430+26Bj
		mov	eax, [ebx+9Ch]
		test	eax, eax
		jz	short loc_6E4396B7
		mov	[esp+13Ch+Buf1], eax
		call	X509_free

loc_6E4396B7:				; CODE XREF: sub_6E439430+27Dj
		mov	eax, [ebx+0BCh]
		test	eax, eax
		jz	short loc_6E4396C9
		mov	[esp+13Ch+Buf1], eax
		call	sk_free

loc_6E4396C9:				; CODE XREF: sub_6E439430+28Fj
		mov	eax, [ebx+0D0h]
		test	eax, eax
		jz	short loc_6E4396DB
		mov	[esp+13Ch+Buf1], eax
		call	CRYPTO_free

loc_6E4396DB:				; CODE XREF: sub_6E439430+2A1j
		mov	eax, [ebx+0E4h]
		test	eax, eax
		jz	short loc_6E4396ED
		mov	[esp+13Ch+Buf1], eax
		call	CRYPTO_free

loc_6E4396ED:				; CODE XREF: sub_6E439430+2B3j
		mov	dword ptr [ebx+0D4h], 0
		mov	eax, [ebx+0D8h]
		test	eax, eax
		jz	short loc_6E439709
		mov	[esp+13Ch+Buf1], eax
		call	CRYPTO_free

loc_6E439709:				; CODE XREF: sub_6E439430+2CFj
		mov	dword ptr [ebx+0DCh], 0
		mov	eax, [ebx+0E0h]
		test	eax, eax
		jz	short loc_6E439725
		mov	[esp+13Ch+Buf1], eax
		call	CRYPTO_free

loc_6E439725:				; CODE XREF: sub_6E439430+2EBj
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	short loc_6E439737
		mov	[esp+13Ch+Buf1], eax
		call	CRYPTO_free

loc_6E439737:				; CODE XREF: sub_6E439430+2FDj
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	short loc_6E439749
		mov	[esp+13Ch+Buf1], eax
		call	CRYPTO_free

loc_6E439749:				; CODE XREF: sub_6E439430+30Fj
		mov	eax, [ebx+0F0h]
		test	eax, eax
		jz	short loc_6E43975B
		mov	[esp+13Ch+Buf1], eax
		call	CRYPTO_free

loc_6E43975B:				; CODE XREF: sub_6E439430+321j
		mov	[esp+13Ch+Buf2], 0F4h
		mov	[esp+13Ch+Buf1], ebx
		call	OPENSSL_cleanse
		mov	[esp+13Ch+Buf1], ebx
		call	CRYPTO_free
		jmp	loc_6E439529
; ---------------------------------------------------------------------------
		align 10h

loc_6E439780:				; CODE XREF: sub_6E439430+9Ej
		mov	eax, [esp+13Ch+arg_0]
		mov	eax, [eax+170h]
		mov	esi, [eax+20h]
		and	esi, 100h
		jnz	loc_6E4398A7
		mov	eax, [esp+13Ch+arg_0]
		mov	eax, [eax]
		mov	[esp+13Ch+var_110], eax
		mov	[esp+13Ch+var_CC], ebp
		test	ebp, ebp
		jz	loc_6E4394A5
		lea	edi, [esp+13Ch+var_C8]
		mov	esi, ebx
		cmp	ebp, 4
		jb	short loc_6E4397C7
		mov	ecx, ebp
		shr	ecx, 2
		rep movsd

loc_6E4397C7:				; CODE XREF: sub_6E439430+38Ej
		xor	eax, eax
		test	ebp, 2
		jz	short loc_6E4397DC
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2

loc_6E4397DC:				; CODE XREF: sub_6E439430+39Fj
		test	ebp, 1
		jz	short loc_6E4397EE
		mov	dl, [esi+eax]
		mov	byte ptr [esp+13Ch+var_120], dl
		mov	[edi+eax], dl

loc_6E4397EE:				; CODE XREF: sub_6E439430+3B2j
		mov	[esp+13Ch+var_130], 282h
		mov	[esp+13Ch+Size], offset	aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+13Ch+Buf2], 0Ch
		mov	[esp+13Ch+Buf1], 5
		call	CRYPTO_lock
		mov	eax, [esp+13Ch+arg_0]
		mov	eax, [eax+170h]
		mov	eax, [eax+10h]
		lea	ecx, [esp+13Ch+var_110]
		mov	[esp+13Ch+Buf2], ecx
		mov	[esp+13Ch+Buf1], eax
		call	lh_retrieve
		mov	[esp+13Ch+var_114], eax
		test	eax, eax
		jz	short loc_6E439867
		mov	[esp+13Ch+var_12C], 286h
		mov	[esp+13Ch+var_130], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+13Ch+Size], 0Eh
		mov	[esp+13Ch+Buf2], 1
		add	eax, 0A4h
		mov	[esp+13Ch+Buf1], eax
		call	CRYPTO_add_lock

loc_6E439867:				; CODE XREF: sub_6E439430+408j
		mov	[esp+13Ch+var_130], 288h
		mov	[esp+13Ch+Size], offset	aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+13Ch+Buf2], 0Ch
		mov	[esp+13Ch+Buf1], 6
		call	CRYPTO_lock
		mov	eax, [esp+13Ch+var_114]
		test	eax, eax
		jnz	loc_6E4394D4
		mov	eax, [esp+13Ch+arg_0]
		mov	eax, [eax+170h]
		inc	dword ptr [eax+4Ch]

loc_6E4398A7:				; CODE XREF: sub_6E439430+366j
		mov	eax, [eax+30h]
		test	eax, eax
		jz	loc_6E43955E
		mov	[esp+13Ch+var_110], 1
		lea	ecx, [esp+13Ch+var_110]
		mov	[esp+13Ch+var_130], ecx
		mov	[esp+13Ch+Size], ebp
		mov	[esp+13Ch+Buf2], ebx
		mov	edi, [esp+13Ch+arg_0]
		mov	[esp+13Ch+Buf1], edi
		call	eax
		mov	[esp+13Ch+var_114], eax
		test	eax, eax
		jz	loc_6E439A7A
		mov	edi, [esp+13Ch+arg_0]
		mov	edx, [edi+170h]
		inc	dword ptr [edx+5Ch]
		mov	ebx, [esp+13Ch+var_110]
		test	ebx, ebx
		jnz	loc_6E439A24
		mov	ebx, eax

loc_6E439900:				; CODE XREF: sub_6E439430+632j
		test	byte ptr [edx+21h], 2
		jz	loc_6E439A0F

loc_6E43990A:				; CODE XREF: sub_6E439430+5EFj
					; sub_6E439430+64Cj
		mov	edi, 1
		jmp	loc_6E439556
; ---------------------------------------------------------------------------

loc_6E439914:				; CODE XREF: sub_6E439430+1E5j
		mov	eax, [eax+170h]
		inc	dword ptr [eax+58h]
		mov	eax, [esp+13Ch+arg_0]
		mov	eax, [eax+0C0h]
		test	eax, eax
		jz	short loc_6E43993A
		mov	[esp+13Ch+Buf1], eax
		call	SSL_SESSION_free
		mov	edx, [esp+13Ch+var_114]

loc_6E43993A:				; CODE XREF: sub_6E439430+4FCj
		mov	eax, [esp+13Ch+arg_0]
		mov	[eax+0C0h], edx
		mov	eax, [edx+0A0h]
		mov	edi, [esp+13Ch+arg_0]
		mov	[edi+0ECh], eax
		mov	esi, 1
		jmp	loc_6E4394A5
; ---------------------------------------------------------------------------

loc_6E439964:				; CODE XREF: sub_6E439430+1BAj
		mov	eax, [ebx+0B8h]
		mov	edx, eax
		shr	edx, 18h
		mov	byte ptr [esp+13Ch+var_110], dl
		mov	edx, eax
		shr	edx, 10h
		mov	byte ptr [esp+13Ch+var_110+1], dl
		mov	edx, eax
		shr	edx, 8
		mov	byte ptr [esp+13Ch+var_110+2], dl
		mov	byte ptr [esp+13Ch+var_110+3], al
		mov	eax, [esp+13Ch+arg_0]
		cmp	dword ptr [ebx], 2FFh
		mov	eax, [eax+8]
		mov	eax, [eax+48h]
		jle	short loc_6E4399FE
		lea	edx, [esp+13Ch+var_110+2]
		mov	[esp+13Ch+Buf1], edx
		call	eax
		mov	[ebx+0B4h], eax

loc_6E4399AD:				; CODE XREF: sub_6E439430+5DDj
		mov	ebx, [esp+13Ch+var_114]
		mov	edx, [ebx+0B4h]
		test	edx, edx
		jnz	loc_6E4395F0
		jmp	loc_6E4394F3
; ---------------------------------------------------------------------------

loc_6E4399C4:				; CODE XREF: sub_6E439430+1ACj
		mov	[esp+13Ch+var_12C], 2C7h
		mov	[esp+13Ch+var_130], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+13Ch+Size], 115h
		mov	[esp+13Ch+Buf2], 0D9h
		mov	[esp+13Ch+Buf1], 14h
		call	ERR_put_error
		mov	ebx, [esp+13Ch+var_114]
		mov	esi, 0FFFFFFFFh
		jmp	loc_6E439579
; ---------------------------------------------------------------------------

loc_6E4399FE:				; CODE XREF: sub_6E439430+56Cj
		lea	edx, [esp+13Ch+var_110+1]
		mov	[esp+13Ch+Buf1], edx
		call	eax
		mov	[ebx+0B4h], eax
		jmp	short loc_6E4399AD
; ---------------------------------------------------------------------------

loc_6E439A0F:				; CODE XREF: sub_6E439430+4D4j
		mov	[esp+13Ch+Buf2], ebx
		mov	[esp+13Ch+Buf1], edx
		call	SSL_CTX_add_session
		mov	ebx, [esp+13Ch+var_114]
		jmp	loc_6E43990A
; ---------------------------------------------------------------------------

loc_6E439A24:				; CODE XREF: sub_6E439430+4C8j
		mov	[esp+13Ch+var_12C], 29Ch
		mov	[esp+13Ch+var_130], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+13Ch+Size], 0Eh
		mov	[esp+13Ch+Buf2], 1
		add	eax, 0A4h
		mov	[esp+13Ch+Buf1], eax
		call	CRYPTO_add_lock
		mov	eax, [esp+13Ch+arg_0]
		mov	edx, [eax+170h]
		mov	ebx, [esp+13Ch+var_114]
		jmp	loc_6E439900
; ---------------------------------------------------------------------------

loc_6E439A67:				; CODE XREF: sub_6E439430+1F6j
		mov	eax, [edx+44h]
		test	eax, eax
		jnz	short loc_6E439A81
		mov	ebx, edx
		mov	edi, 1
		jmp	loc_6E4394F3
; ---------------------------------------------------------------------------

loc_6E439A7A:				; CODE XREF: sub_6E439430+4ACj
		xor	ebx, ebx
		jmp	loc_6E43990A
; ---------------------------------------------------------------------------

loc_6E439A81:				; CODE XREF: sub_6E439430+63Cj
		mov	[esp+13Ch+var_120], edx
		mov	[esp+13Ch+var_130], 350h
		mov	[esp+13Ch+Size], offset	aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+13Ch+Buf2], 0Ch
		mov	[esp+13Ch+Buf1], 9
		call	CRYPTO_lock
		mov	eax, [ebx+10h]
		mov	edx, [esp+13Ch+var_120]
		mov	[esp+13Ch+Buf2], edx
		mov	[esp+13Ch+Buf1], eax
		call	lh_retrieve
		mov	edx, [esp+13Ch+var_120]
		cmp	edx, eax
		jz	short loc_6E439AF6
		mov	[esp+13Ch+var_130], 358h
		mov	[esp+13Ch+Size], offset	aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+13Ch+Buf2], 0Ch
		mov	[esp+13Ch+Buf1], 0Ah
		call	CRYPTO_lock

loc_6E439AE8:				; CODE XREF: sub_6E439430+734j
		mov	ebx, [esp+13Ch+var_114]
		mov	edi, 1
		jmp	loc_6E439579
; ---------------------------------------------------------------------------

loc_6E439AF6:				; CODE XREF: sub_6E439430+692j
		mov	eax, [ebx+10h]
		mov	[esp+13Ch+Buf2], edx
		mov	[esp+13Ch+Buf1], eax
		call	lh_delete
		mov	edi, eax
		mov	edx, [esp+13Ch+var_120]
		lea	ecx, [edx+0CCh]
		add	edx, 0C8h
		mov	eax, ebx
		call	sub_6E437BA0
		mov	[esp+13Ch+var_130], 358h
		mov	[esp+13Ch+Size], offset	aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+13Ch+Buf2], 0Ch
		mov	[esp+13Ch+Buf1], 0Ah
		call	CRYPTO_lock
		mov	dword ptr [edi+94h], 1
		mov	eax, [ebx+2Ch]
		test	eax, eax
		jz	short loc_6E439B5C
		mov	[esp+13Ch+Buf2], edi
		mov	[esp+13Ch+Buf1], ebx
		call	eax

loc_6E439B5C:				; CODE XREF: sub_6E439430+721j
		mov	[esp+13Ch+Buf1], edi
		call	SSL_SESSION_free
		jmp	short loc_6E439AE8
sub_6E439430	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  90. SSL_set_session

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_session
SSL_set_session	proc near		; CODE XREF: SSL_copy_session_id+1Ep

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		test	esi, esi
		jz	loc_6E439C20
		mov	eax, [ebx+0E4h]
		mov	eax, [eax]
		mov	eax, [eax+5Ch]
		mov	edx, [esi]
		mov	[esp+2Ch+var_2C], edx
		call	eax
		test	eax, eax
		jz	loc_6E439C80

loc_6E439B9F:				; CODE XREF: SSL_set_session+11Fj
		cmp	[ebx+8], eax
		jz	short loc_6E439BB4
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_set_ssl_method
		test	eax, eax
		jz	short loc_6E439C0B

loc_6E439BB4:				; CODE XREF: SSL_set_session+32j
		mov	[esp+2Ch+var_1C], 3BEh
		mov	[esp+2Ch+var_20], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_24], 0Eh
		mov	[esp+2Ch+var_28], 1
		lea	eax, [esi+0A4h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_add_lock
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	short loc_6E439BF4
		mov	[esp+2Ch+var_2C], eax
		call	SSL_SESSION_free

loc_6E439BF4:				; CODE XREF: SSL_set_session+7Aj
		mov	[ebx+0C0h], esi
		mov	eax, [esi+0A0h]
		mov	[ebx+0ECh], eax
		mov	eax, 1

loc_6E439C0B:				; CODE XREF: SSL_set_session+42j
					; SSL_set_session+105j	...
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E439C20
; ---------------------------------------------------------------------------
		align 10h

loc_6E439C20:				; CODE XREF: SSL_set_session+Fj
					; SSL_set_session+A1j
		mov	eax, [ebx+0C0h]
		test	eax, eax
		jz	short loc_6E439C3C
		mov	[esp+2Ch+var_2C], eax
		call	SSL_SESSION_free
		mov	dword ptr [ebx+0C0h], 0

loc_6E439C3C:				; CODE XREF: SSL_set_session+B8j
		mov	eax, [ebx+0E4h]
		mov	eax, [eax]
		cmp	[ebx+8], eax
		jz	short loc_6E439C70
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_set_ssl_method
		test	eax, eax
		setnz	al
		and	eax, 0FFh
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439C70:				; CODE XREF: SSL_set_session+D7j
		mov	eax, 1
		jmp	short loc_6E439C0B
; ---------------------------------------------------------------------------
		align 10h

loc_6E439C80:				; CODE XREF: SSL_set_session+29j
		mov	eax, [ebx+8]
		mov	eax, [eax+5Ch]
		mov	edx, [esi]
		mov	[esp+2Ch+var_2C], edx
		call	eax
		test	eax, eax
		jnz	loc_6E439B9F
		mov	[esp+2Ch+var_1C], 3AAh
		mov	[esp+2Ch+var_20], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_24], 0F0h
		mov	[esp+2Ch+var_28], 0C3h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E439C0B
SSL_set_session	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 137. SSL_SESSION_set_timeout

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_set_timeout
SSL_SESSION_set_timeout	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E439CF0
		mov	edx, [esp+arg_4]
		mov	[eax+0A8h], edx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439CF0:				; CODE XREF: SSL_SESSION_set_timeout+6j
		xor	eax, eax
		retn
SSL_SESSION_set_timeout	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 136. SSL_SESSION_get_timeout

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_get_timeout
SSL_SESSION_get_timeout	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E439D10
		mov	eax, [eax+0A8h]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439D10:				; CODE XREF: SSL_SESSION_get_timeout+6j
		xor	eax, eax
		retn
SSL_SESSION_get_timeout	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 134. SSL_SESSION_get_time

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_get_time
SSL_SESSION_get_time proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E439D30
		mov	eax, [eax+0ACh]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439D30:				; CODE XREF: SSL_SESSION_get_time+6j
		xor	eax, eax
		retn
SSL_SESSION_get_time endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 135. SSL_SESSION_set_time

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_set_time
SSL_SESSION_set_time proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		test	edx, edx
		jz	short loc_6E439D60
		mov	[edx+0ACh], eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439D60:				; CODE XREF: SSL_SESSION_set_time+Aj
		xor	eax, eax
		retn
SSL_SESSION_set_time endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 340. SSL_SESSION_get0_peer

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_get0_peer
SSL_SESSION_get0_peer proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+9Ch]
		retn
SSL_SESSION_get0_peer endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 342. SSL_SESSION_set1_id_context

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_set1_id_context
SSL_SESSION_set1_id_context proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_D		= byte ptr -0Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		sub	esp, 24h
		mov	edx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_8]
		cmp	eax, 20h
		ja	short loc_6E439E10
		mov	[edx+68h], eax
		lea	edi, [edx+6Ch]
		mov	esi, [esp+2Ch+arg_4]
		cmp	eax, 4
		jnb	short loc_6E439DF0
		xor	edx, edx
		test	al, 2
		jnz	short loc_6E439DD0

loc_6E439DA7:				; CODE XREF: SSL_SESSION_set1_id_context+8Bj
		test	al, 1
		jnz	short loc_6E439DC0

loc_6E439DAB:				; CODE XREF: SSL_SESSION_set1_id_context+4Aj
					; SSL_SESSION_set1_id_context+5Dj
		mov	eax, 1
		add	esp, 24h
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439DC0:				; CODE XREF: SSL_SESSION_set1_id_context+29j
					; SSL_SESSION_set1_id_context+5Fj
		mov	al, [esi+edx]
		mov	[esp+2Ch+var_D], al
		mov	[edi+edx], al
		jmp	short loc_6E439DAB
; ---------------------------------------------------------------------------
		align 10h

loc_6E439DD0:				; CODE XREF: SSL_SESSION_set1_id_context+25j
					; SSL_SESSION_set1_id_context+8Dj
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	short loc_6E439DAB
		jmp	short loc_6E439DC0
; ---------------------------------------------------------------------------
		jmp	short loc_6E439DF0
; ---------------------------------------------------------------------------
		align 10h

loc_6E439DF0:				; CODE XREF: SSL_SESSION_set1_id_context+1Fj
					; SSL_SESSION_set1_id_context+61j
		test	edi, 1
		jnz	short loc_6E439E50

loc_6E439DF8:				; CODE XREF: SSL_SESSION_set1_id_context+DAj
		test	edi, 2
		jnz	short loc_6E439E60

loc_6E439E00:				; CODE XREF: SSL_SESSION_set1_id_context+EFj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_6E439DA7
		jmp	short loc_6E439DD0
; ---------------------------------------------------------------------------
		align 10h

loc_6E439E10:				; CODE XREF: SSL_SESSION_set1_id_context+10j
		mov	[esp+2Ch+var_1C], 3FDh
		mov	[esp+2Ch+var_20], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_24], 111h
		mov	[esp+2Ch+var_28], 138h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 24h
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439E50:				; CODE XREF: SSL_SESSION_set1_id_context+76j
		mov	cl, [esi]
		mov	[edx+6Ch], cl
		lea	edi, [edx+6Dh]
		inc	esi
		dec	eax
		jmp	short loc_6E439DF8
; ---------------------------------------------------------------------------
		align 10h

loc_6E439E60:				; CODE XREF: SSL_SESSION_set1_id_context+7Ej
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_6E439E00
SSL_SESSION_set1_id_context endp

; ---------------------------------------------------------------------------
		jmp	short SSL_CTX_set_timeout
; ---------------------------------------------------------------------------
		align 10h
; Exported entry 178. SSL_CTX_set_timeout

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_timeout
SSL_CTX_set_timeout proc near		; CODE XREF: .text:6E439E71j

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		test	edx, edx
		jz	short loc_6E439EA0
		mov	eax, [edx+24h]
		mov	ecx, [esp+arg_4]
		mov	[edx+24h], ecx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439EA0:				; CODE XREF: SSL_CTX_set_timeout+6j
		xor	eax, eax
		retn
SSL_CTX_set_timeout endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 179. SSL_CTX_get_timeout

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_timeout
SSL_CTX_get_timeout proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E439EC0
		mov	eax, [eax+24h]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439EC0:				; CODE XREF: SSL_CTX_get_timeout+6j
		xor	eax, eax
		retn
SSL_CTX_get_timeout endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 307. SSL_set_session_secret_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_session_secret_cb
SSL_set_session_secret_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E439F00
		mov	edx, [esp+arg_4]
		mov	[eax+168h], edx
		mov	edx, [esp+arg_8]
		mov	[eax+16Ch], edx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439F00:				; CODE XREF: SSL_set_session_secret_cb+6j
		xor	eax, eax
		retn
SSL_set_session_secret_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 308. SSL_set_session_ticket_ext_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_session_ticket_ext_cb
SSL_set_session_ticket_ext_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E439F40
		mov	edx, [esp+arg_4]
		mov	[eax+160h], edx
		mov	edx, [esp+arg_8]
		mov	[eax+164h], edx
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E439F40:				; CODE XREF: SSL_set_session_ticket_ext_cb+6j
		xor	eax, eax
		retn
SSL_set_session_ticket_ext_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 306. SSL_set_session_ticket_ext

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_session_ticket_ext
SSL_set_session_ticket_ext proc	near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_D		= byte ptr -0Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_8]
		cmp	dword ptr [ebx], 300h
		jle	loc_6E43A010
		mov	eax, [ebx+15Ch]
		test	eax, eax
		jz	short loc_6E439F86
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free
		mov	dword ptr [ebx+15Ch], 0

loc_6E439F86:				; CODE XREF: SSL_set_session_ticket_ext+22j
		mov	[esp+2Ch+var_24], 43Dh
		mov	[esp+2Ch+var_28], offset aSsl_sess_c ; "ssl_sess.c"
		lea	eax, [esi+8]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_malloc
		mov	[ebx+15Ch], eax
		test	eax, eax
		jz	loc_6E43A060
		mov	edx, [esp+2Ch+arg_4]
		test	edx, edx
		jz	short loc_6E439FF0
		mov	[eax], si
		lea	edi, [eax+8]
		mov	[eax+4], edi
		mov	edx, esi
		mov	esi, [esp+2Ch+arg_4]
		cmp	edx, 4
		jnb	short loc_6E43A040

loc_6E439FCB:				; CODE XREF: SSL_set_session_ticket_ext+107j
		xor	eax, eax
		test	dl, 2
		jnz	short loc_6E43A020
		and	edx, 1
		jz	short loc_6E439FFC

loc_6E439FD7:				; CODE XREF: SSL_set_session_ticket_ext+E0j
		mov	cl, [esi+eax]
		mov	[esp+2Ch+var_D], cl
		mov	[edi+eax], cl
		jmp	short loc_6E439FFC
; ---------------------------------------------------------------------------
		align 10h

loc_6E439FF0:				; CODE XREF: SSL_set_session_ticket_ext+65j
		mov	word ptr [eax],	0
		mov	dword ptr [eax+4], 0

loc_6E439FFC:				; CODE XREF: SSL_set_session_ticket_ext+85j
					; SSL_set_session_ticket_ext+91j ...
		mov	eax, 1

loc_6E43A001:				; CODE XREF: SSL_set_session_ticket_ext+13Ej
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A010:				; CODE XREF: SSL_set_session_ticket_ext+14j
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A020:				; CODE XREF: SSL_set_session_ticket_ext+80j
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2
		and	edx, 1
		jz	short loc_6E439FFC
		jmp	short loc_6E439FD7
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A040:				; CODE XREF: SSL_set_session_ticket_ext+79j
		test	edi, 1
		jnz	short loc_6E43A0C0

loc_6E43A048:				; CODE XREF: SSL_set_session_ticket_ext+17Aj
		test	edi, 2
		jnz	short loc_6E43A0A0

loc_6E43A050:				; CODE XREF: SSL_set_session_ticket_ext+15Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_6E439FCB
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A060:				; CODE XREF: SSL_set_session_ticket_ext+59j
		mov	[esp+2Ch+var_1C], 43Fh
		mov	[esp+2Ch+var_20], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 126h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E43A001
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A0A0:				; CODE XREF: SSL_set_session_ticket_ext+FEj
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	short loc_6E43A050
; ---------------------------------------------------------------------------
		jmp	short loc_6E43A0C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A0C0:				; CODE XREF: SSL_set_session_ticket_ext+F6j
					; SSL_set_session_ticket_ext+161j
		mov	cl, [esi]
		mov	[eax+8], cl
		lea	edi, [eax+9]
		inc	esi
		dec	edx
		jmp	loc_6E43A048
SSL_set_session_ticket_ext endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   7. SSL_CTX_flush_sessions

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_flush_sessions
SSL_CTX_flush_sessions proc near	; CODE XREF: SSL_CTX_free+74p
					; sub_6E4350C0+F7j

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_18], eax
		mov	eax, [eax+10h]
		mov	[esp+2Ch+var_10], eax
		test	eax, eax
		jz	short loc_6E43A164
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_14], eax
		mov	[esp+2Ch+var_20], 475h
		mov	[esp+2Ch+var_24], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 9
		call	CRYPTO_lock
		mov	eax, [esp+2Ch+var_10]
		mov	ebx, [eax+20h]
		mov	dword ptr [eax+20h], 0
		lea	edx, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_28], offset sub_6E437C10
		mov	[esp+2Ch+var_2C], eax
		call	lh_doall_arg
		mov	eax, [esp+2Ch+var_10]
		mov	[eax+20h], ebx
		mov	[esp+2Ch+var_20], 47Bh
		mov	[esp+2Ch+var_24], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_28], 0Ch
		mov	[esp+2Ch+var_2C], 0Ah
		call	CRYPTO_lock

loc_6E43A164:				; CODE XREF: SSL_CTX_flush_sessions+15j
		add	esp, 28h
		pop	ebx
		retn
SSL_CTX_flush_sessions endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43A170	proc near		; CODE XREF: SSL_clear+16p
					; SSL_free+F5p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		mov	edx, [ebx+0C0h]
		test	edx, edx
		jz	short loc_6E43A18A
		test	byte ptr [ebx+30h], 1
		jz	short loc_6E43A1A0

loc_6E43A18A:				; CODE XREF: sub_6E43A170+12j
					; sub_6E43A170+3Bj ...
		xor	eax, eax

loc_6E43A18C:				; CODE XREF: sub_6E43A170+C1j
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A1A0:				; CODE XREF: sub_6E43A170+18j
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_state
		test	ah, 30h
		jnz	short loc_6E43A18A
		mov	[esp+1Ch+var_1C], ebx
		call	SSL_state
		test	ah, 40h
		jnz	short loc_6E43A18A
		mov	esi, [ebx+0C0h]
		mov	ebx, [ebx+0E4h]
		test	esi, esi
		jz	short loc_6E43A22C
		mov	eax, [esi+44h]
		test	eax, eax
		jz	short loc_6E43A22C
		mov	[esp+1Ch+var_10], 350h
		mov	[esp+1Ch+var_14], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+1Ch+var_18], 0Ch
		mov	[esp+1Ch+var_1C], 9
		call	CRYPTO_lock
		mov	eax, [ebx+10h]
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], eax
		call	lh_retrieve
		cmp	esi, eax
		jz	short loc_6E43A236
		mov	[esp+1Ch+var_10], 358h
		mov	[esp+1Ch+var_14], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+1Ch+var_18], 0Ch
		mov	[esp+1Ch+var_1C], 0Ah
		call	CRYPTO_lock

loc_6E43A22C:				; CODE XREF: sub_6E43A170+58j
					; sub_6E43A170+5Fj ...
		mov	eax, 1
		jmp	loc_6E43A18C
; ---------------------------------------------------------------------------

loc_6E43A236:				; CODE XREF: sub_6E43A170+96j
		mov	eax, [ebx+10h]
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], eax
		call	lh_delete
		mov	edi, eax
		lea	ecx, [esi+0CCh]
		lea	edx, [esi+0C8h]
		mov	eax, ebx
		call	sub_6E437BA0
		mov	[esp+1Ch+var_10], 358h
		mov	[esp+1Ch+var_14], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+1Ch+var_18], 0Ch
		mov	[esp+1Ch+var_1C], 0Ah
		call	CRYPTO_lock
		mov	dword ptr [edi+94h], 1
		mov	eax, [ebx+2Ch]
		test	eax, eax
		jz	short loc_6E43A298
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], ebx
		call	eax

loc_6E43A298:				; CODE XREF: sub_6E43A170+11Dj
		mov	[esp+1Ch+var_1C], edi
		call	SSL_SESSION_free
		jmp	short loc_6E43A22C
sub_6E43A170	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 278. SSL_CTX_sess_set_new_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_sess_set_new_cb
SSL_CTX_sess_set_new_cb	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+28h], edx
		retn
SSL_CTX_sess_set_new_cb	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 287. SSL_CTX_sess_get_new_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_sess_get_new_cb
SSL_CTX_sess_get_new_cb	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+28h]
		retn
SSL_CTX_sess_get_new_cb	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 285. SSL_CTX_sess_set_remove_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_sess_set_remove_cb
SSL_CTX_sess_set_remove_cb proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+2Ch], edx
		retn
SSL_CTX_sess_set_remove_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 289. SSL_CTX_sess_get_remove_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_sess_get_remove_cb
SSL_CTX_sess_get_remove_cb proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+2Ch]
		retn
SSL_CTX_sess_get_remove_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 280. SSL_CTX_sess_set_get_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_sess_set_get_cb
SSL_CTX_sess_set_get_cb	proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+30h], edx
		retn
SSL_CTX_sess_set_get_cb	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 279. SSL_CTX_sess_get_get_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_sess_get_get_cb
SSL_CTX_sess_get_get_cb	proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+30h]
		retn
SSL_CTX_sess_get_get_cb	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 286. SSL_CTX_set_info_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_info_callback
SSL_CTX_set_info_callback proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+9Ch], edx
		retn
SSL_CTX_set_info_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 282. SSL_CTX_get_info_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_info_callback
SSL_CTX_get_info_callback proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+9Ch]
		retn
SSL_CTX_get_info_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 284. SSL_CTX_set_client_cert_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_client_cert_cb
SSL_CTX_set_client_cert_cb proc	near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+74h], edx
		retn
SSL_CTX_set_client_cert_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 288. SSL_CTX_get_client_cert_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_get_client_cert_cb
SSL_CTX_get_client_cert_cb proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+74h]
		retn
SSL_CTX_get_client_cert_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 293. SSL_CTX_set_client_cert_engine

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_client_cert_engine
SSL_CTX_set_client_cert_engine proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], ebx
		call	ENGINE_init
		test	eax, eax
		jz	short loc_6E43A390
		mov	[esp+2Ch+var_2C], ebx
		call	ENGINE_get_ssl_client_cert_function
		test	eax, eax
		jz	short loc_6E43A3D0
		mov	eax, [esp+2Ch+arg_0]
		mov	[eax+0FCh], ebx
		mov	eax, 1

loc_6E43A37F:				; CODE XREF: SSL_CTX_set_client_cert_engine+B6j
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A390:				; CODE XREF: SSL_CTX_set_client_cert_engine+12j
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_1C], 4F8h
		mov	[esp+2Ch+var_20], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_24], 26h
		mov	[esp+2Ch+var_28], 122h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+var_10]
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A3D0:				; CODE XREF: SSL_CTX_set_client_cert_engine+1Ej
		mov	[esp+2Ch+var_1C], 4FDh
		mov	[esp+2Ch+var_20], offset aSsl_sess_c ; "ssl_sess.c"
		mov	[esp+2Ch+var_24], 14Bh
		mov	[esp+2Ch+var_28], 122h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	[esp+2Ch+var_2C], ebx
		call	ENGINE_finish
		xor	eax, eax
		jmp	loc_6E43A37F
SSL_CTX_set_client_cert_engine endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 283. SSL_CTX_set_cookie_generate_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_cookie_generate_cb
SSL_CTX_set_cookie_generate_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+78h], edx
		retn
SSL_CTX_set_cookie_generate_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 281. SSL_CTX_set_cookie_verify_cb

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_cookie_verify_cb
SSL_CTX_set_cookie_verify_cb proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	[eax+7Ch], edx
		retn
SSL_CTX_set_cookie_verify_cb endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 302. PEM_read_bio_SSL_SESSION

; =============== S U B	R O U T	I N E =======================================


		public PEM_read_bio_SSL_SESSION
PEM_read_bio_SSL_SESSION proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_18], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_1C], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aSslSessionPara ; "SSL	SESSION	PARAMETERS"
		mov	[esp+2Ch+var_2C], offset d2i_SSL_SESSION
		call	PEM_ASN1_read_bio
		add	esp, 2Ch
		retn
PEM_read_bio_SSL_SESSION endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 301. PEM_read_SSL_SESSION

; =============== S U B	R O U T	I N E =======================================


		public PEM_read_SSL_SESSION
PEM_read_SSL_SESSION proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		sub	esp, 2Ch
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_18], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_1C], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aSslSessionPara ; "SSL	SESSION	PARAMETERS"
		mov	[esp+2Ch+var_2C], offset d2i_SSL_SESSION
		call	PEM_ASN1_read
		add	esp, 2Ch
		retn
PEM_read_SSL_SESSION endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 296. PEM_write_bio_SSL_SESSION

; =============== S U B	R O U T	I N E =======================================


		public PEM_write_bio_SSL_SESSION
PEM_write_bio_SSL_SESSION proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 3Ch
		mov	[esp+3Ch+var_1C], 0
		mov	[esp+3Ch+var_20], 0
		mov	[esp+3Ch+var_24], 0
		mov	[esp+3Ch+var_28], 0
		mov	[esp+3Ch+var_2C], 0
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_30], eax
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aSslSessionPara ; "SSL	SESSION	PARAMETERS"
		mov	[esp+3Ch+var_3C], offset i2d_SSL_SESSION
		call	PEM_ASN1_write_bio
		add	esp, 3Ch
		retn
PEM_write_bio_SSL_SESSION endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 305. PEM_write_SSL_SESSION

; =============== S U B	R O U T	I N E =======================================


		public PEM_write_SSL_SESSION
PEM_write_SSL_SESSION proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 3Ch
		mov	[esp+3Ch+var_1C], 0
		mov	[esp+3Ch+var_20], 0
		mov	[esp+3Ch+var_24], 0
		mov	[esp+3Ch+var_28], 0
		mov	[esp+3Ch+var_2C], 0
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_30], eax
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aSslSessionPara ; "SSL	SESSION	PARAMETERS"
		mov	[esp+3Ch+var_3C], offset i2d_SSL_SESSION
		call	PEM_ASN1_write
		add	esp, 3Ch
		retn
PEM_write_SSL_SESSION endp

; ---------------------------------------------------------------------------
		align 10h

loc_6E43A570:				; DATA XREF: sub_6E43A630+E7o
					; SSL_COMP_get_compression_methods+E7o
		mov	eax, [esp+4]
		mov	eax, [eax]
		mov	edx, [esp+8]
		mov	edx, [edx]
		mov	eax, [eax]
		sub	eax, [edx]
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E43A590
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A590:				; CODE XREF: .text:6E43A581j
		cmp	[ecx], edx
		jz	short locret_6E43A5C4
		push	ebx
		cmp	[eax], edx
		jz	short loc_6E43A5D0

loc_6E43A599:				; CODE XREF: .text:6E43A5D5j
		mov	eax, [edx+10h]
		test	eax, eax
		jz	short loc_6E43A5A6
		mov	ebx, [edx+0Ch]
		mov	[eax+0Ch], ebx

loc_6E43A5A6:				; CODE XREF: .text:6E43A59Ej
		mov	ebx, [edx+0Ch]
		test	ebx, ebx
		jz	short loc_6E43A5B0
		mov	[ebx+10h], eax

loc_6E43A5B0:				; CODE XREF: .text:6E43A5ABj
		mov	eax, [ecx]
		mov	[eax+0Ch], edx
		mov	eax, [ecx]
		mov	[edx+10h], eax
		mov	dword ptr [edx+0Ch], 0
		mov	[ecx], edx
		pop	ebx

locret_6E43A5C4:			; CODE XREF: .text:6E43A592j
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A5D0:				; CODE XREF: .text:6E43A597j
		mov	ebx, [edx+0Ch]
		mov	[eax], ebx
		jmp	short loc_6E43A599
; ---------------------------------------------------------------------------
		align 10h
		cmp	[eax], edx
		jz	short locret_6E43A614
		push	ebx
		cmp	[ecx], edx
		jz	short loc_6E43A620

loc_6E43A5E9:				; CODE XREF: .text:6E43A625j
		mov	ecx, [edx+0Ch]
		test	ecx, ecx
		jz	short loc_6E43A5F6
		mov	ebx, [edx+10h]
		mov	[ecx+10h], ebx

loc_6E43A5F6:				; CODE XREF: .text:6E43A5EEj
		mov	ebx, [edx+10h]
		test	ebx, ebx
		jz	short loc_6E43A600
		mov	[ebx+0Ch], ecx

loc_6E43A600:				; CODE XREF: .text:6E43A5FBj
		mov	ecx, [eax]
		mov	[ecx+10h], edx
		mov	ecx, [eax]
		mov	[edx+0Ch], ecx
		mov	dword ptr [edx+10h], 0
		mov	[eax], edx
		pop	ebx

locret_6E43A614:			; CODE XREF: .text:6E43A5E2j
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A620:				; CODE XREF: .text:6E43A5E7j
		mov	ebx, [edx+10h]
		mov	[ecx], ebx
		jmp	short loc_6E43A5E9
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43A630	proc near		; CODE XREF: sub_6E43B840+29p
					; SSL_COMP_add_compression_method+60p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+var_10], 1C8h
		mov	[esp+1Ch+var_14], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 5
		call	CRYPTO_lock
		mov	ebx, ds:dword_6E454050
		test	ebx, ebx
		jz	short loc_6E43A690
		mov	[esp+1Ch+var_10], 1E8h
		mov	[esp+1Ch+var_14], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 6
		call	CRYPTO_lock

loc_6E43A686:				; CODE XREF: sub_6E43A630+D6j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A690:				; CODE XREF: sub_6E43A630+30j
		mov	[esp+1Ch+var_10], 1CAh
		mov	[esp+1Ch+var_14], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 6
		call	CRYPTO_lock
		mov	[esp+1Ch+var_10], 1CBh
		mov	[esp+1Ch+var_14], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 9
		call	CRYPTO_lock
		mov	ecx, ds:dword_6E454050
		test	ecx, ecx
		jz	short loc_6E43A70B

loc_6E43A6E2:				; CODE XREF: sub_6E43A630+166j
		mov	[esp+1Ch+var_10], 1E6h
		mov	[esp+1Ch+var_14], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 0Ah
		call	CRYPTO_lock
		jmp	loc_6E43A686
; ---------------------------------------------------------------------------

loc_6E43A70B:				; CODE XREF: sub_6E43A630+B0j
		mov	[esp+1Ch+var_1C], 3
		call	CRYPTO_mem_ctrl
		mov	[esp+1Ch+var_1C], offset loc_6E43A570
		call	sk_new
		mov	ds:dword_6E454050, eax
		test	eax, eax
		jz	short loc_6E43A78A
		mov	[esp+1Ch+var_14], 1D4h
		mov	[esp+1Ch+var_18], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_1C], 0Ch
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E43A77D
		call	COMP_zlib
		mov	[ebx+8], eax
		test	eax, eax
		jz	short loc_6E43A760
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6E43A79B

loc_6E43A760:				; CODE XREF: sub_6E43A630+128j
		mov	dword ptr [ebx], 1
		mov	eax, [eax+4]
		mov	[ebx+4], eax
		mov	[esp+1Ch+var_18], ebx
		mov	eax, ds:dword_6E454050
		mov	[esp+1Ch+var_1C], eax
		call	sk_push

loc_6E43A77D:				; CODE XREF: sub_6E43A630+11Cj
					; sub_6E43A630+173j
		mov	eax, ds:dword_6E454050
		mov	[esp+1Ch+var_1C], eax
		call	sk_sort

loc_6E43A78A:				; CODE XREF: sub_6E43A630+FAj
		mov	[esp+1Ch+var_1C], 2
		call	CRYPTO_mem_ctrl
		jmp	loc_6E43A6E2
; ---------------------------------------------------------------------------

loc_6E43A79B:				; CODE XREF: sub_6E43A630+12Ej
		mov	[esp+1Ch+var_1C], ebx
		call	CRYPTO_free
		jmp	short loc_6E43A77D
sub_6E43A630	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43A7B0	proc near		; CODE XREF: sub_6E43BC80+63Cp
					; sub_6E43BC80+64Ep ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	[esp+1Ch+var_18], edx
		mov	ebp, ecx
		mov	edx, [edx]
		mov	ebx, [ecx]
		test	ebx, ebx
		jz	loc_6E43A8F8
		test	edx, edx
		jz	loc_6E43A904
		mov	[esp+1Ch+var_1C], edx
		mov	esi, ebx
		test	eax, eax
		jz	loc_6E43A8BA
		mov	[esp+1Ch+var_14], ecx
		jmp	short loc_6E43A7FA
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A7F0:				; CODE XREF: sub_6E43A7B0+52j
					; sub_6E43A7B0+59j ...
		cmp	ebx, edx
		jz	short loc_6E43A850

loc_6E43A7F4:				; CODE XREF: sub_6E43A7B0+91j
		test	ecx, ecx
		jz	short loc_6E43A850
		mov	edx, ecx

loc_6E43A7FA:				; CODE XREF: sub_6E43A7B0+32j
		mov	ecx, [edx+0Ch]
		mov	edi, [edx]
		test	[edi+0Ch], eax
		jz	short loc_6E43A7F0
		mov	edi, [edx+4]
		test	edi, edi
		jz	short loc_6E43A7F0
		cmp	edx, esi
		jz	short loc_6E43A7F0
		cmp	edx, [esp+1Ch+var_1C]
		jz	loc_6E43A8F0

loc_6E43A818:				; CODE XREF: sub_6E43A7B0+143j
		mov	edi, [edx+10h]
		test	edi, edi
		jz	loc_6E43A8E0
		mov	[edi+0Ch], ecx
		mov	ebp, [edx+0Ch]

loc_6E43A829:				; CODE XREF: sub_6E43A7B0+132j
		test	ebp, ebp
		jz	short loc_6E43A830
		mov	[ebp+10h], edi

loc_6E43A830:				; CODE XREF: sub_6E43A7B0+7Bj
		mov	[esi+0Ch], edx
		mov	[edx+10h], esi
		mov	dword ptr [edx+0Ch], 0
		mov	esi, edx
		cmp	ebx, edx
		jnz	short loc_6E43A7F4
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43A850:				; CODE XREF: sub_6E43A7B0+42j
					; sub_6E43A7B0+46j
		mov	ebp, [esp+1Ch+var_14]

loc_6E43A854:				; CODE XREF: sub_6E43A7B0+102j
					; sub_6E43A7B0+106j
		mov	edi, [esp+1Ch+var_1C]

loc_6E43A857:				; CODE XREF: sub_6E43A7B0+14Fj
					; sub_6E43A7B0+160j
		mov	eax, [esp+1Ch+var_18]
		mov	[eax], edi
		mov	[ebp+0], esi
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E43A868:				; CODE XREF: sub_6E43A7B0+114j
		cmp	edx, esi
		jz	short loc_6E43A8B0
		cmp	edx, [esp+1Ch+var_1C]
		jnz	short loc_6E43A880
		mov	[esp+1Ch+var_1C], eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43A880:				; CODE XREF: sub_6E43A7B0+BFj
		mov	ecx, [edx+10h]
		test	ecx, ecx
		jz	short loc_6E43A8D0
		mov	[ecx+0Ch], eax
		mov	edi, [edx+0Ch]

loc_6E43A88D:				; CODE XREF: sub_6E43A7B0+122j
		test	edi, edi
		jz	short loc_6E43A894
		mov	[edi+10h], ecx

loc_6E43A894:				; CODE XREF: sub_6E43A7B0+DFj
		mov	[esi+0Ch], edx
		mov	[edx+10h], esi
		mov	dword ptr [edx+0Ch], 0
		mov	esi, edx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43A8B0:				; CODE XREF: sub_6E43A7B0+BAj
					; sub_6E43A7B0+112j
		cmp	ebx, edx
		jz	short loc_6E43A854
		test	eax, eax
		jz	short loc_6E43A854
		mov	edx, eax

loc_6E43A8BA:				; CODE XREF: sub_6E43A7B0+28j
		mov	eax, [edx+0Ch]
		mov	ecx, [edx+4]
		test	ecx, ecx
		jz	short loc_6E43A8B0
		jmp	short loc_6E43A868
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A8D0:				; CODE XREF: sub_6E43A7B0+D5j
		mov	edi, eax
		jmp	short loc_6E43A88D
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A8E0:				; CODE XREF: sub_6E43A7B0+6Dj
		mov	ebp, ecx
		jmp	loc_6E43A829
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A8F0:				; CODE XREF: sub_6E43A7B0+62j
		mov	[esp+1Ch+var_1C], ecx
		jmp	loc_6E43A818
; ---------------------------------------------------------------------------

loc_6E43A8F8:				; CODE XREF: sub_6E43A7B0+13j
		mov	[esp+1Ch+var_1C], edx
		xor	esi, esi
		mov	edi, edx
		jmp	loc_6E43A857
; ---------------------------------------------------------------------------

loc_6E43A904:				; CODE XREF: sub_6E43A7B0+1Bj
		mov	[esp+1Ch+var_1C], 0
		mov	esi, ebx
		mov	edi, [esp+1Ch+var_1C]
		jmp	loc_6E43A857
sub_6E43A7B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43A920	proc near		; CODE XREF: sub_6E43BC80+510p
					; sub_6E43BC80+5D0p ...

var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebp, eax
		mov	[esp+24h+var_20], edx
		mov	[esp+24h+var_18], ecx
		mov	ecx, [esp+24h+arg_4]
		cmp	[esp+24h+arg_0], 3
		jz	loc_6E43AB70
		mov	eax, [esp+24h+arg_8]
		mov	eax, [eax]
		mov	esi, [esp+24h+arg_C]
		mov	ebx, [esi]
		mov	[esp+24h+var_1C], ebx
		mov	[esp+24h+var_14], eax
		xor	esi, esi

loc_6E43A956:				; CODE XREF: sub_6E43A920+269j
		test	ebx, ebx
		jz	loc_6E43AA50
		test	eax, eax
		jz	loc_6E43AA50
		mov	[esp+24h+var_24], ebp
		jmp	short loc_6E43A990
; ---------------------------------------------------------------------------
		align 10h

loc_6E43A970:				; CODE XREF: sub_6E43A920+72j
		mov	edx, [eax+10h]
		mov	edi, [eax]
		test	ecx, ecx
		js	short loc_6E43A99D

loc_6E43A979:				; CODE XREF: sub_6E43A920+7Bj
		cmp	ecx, [edi+28h]
		jz	short loc_6E43A9D0

loc_6E43A97E:				; CODE XREF: sub_6E43A920+8Aj
					; sub_6E43A920+9Bj ...
		cmp	ebx, eax
		jz	loc_6E43AA50

loc_6E43A986:				; CODE XREF: sub_6E43A920+122j
		test	edx, edx
		jz	loc_6E43AA50
		mov	eax, edx

loc_6E43A990:				; CODE XREF: sub_6E43A920+49j
		test	esi, esi
		jnz	short loc_6E43A970
		mov	edx, [eax+0Ch]
		mov	edi, [eax]
		test	ecx, ecx
		jns	short loc_6E43A979

loc_6E43A99D:				; CODE XREF: sub_6E43A920+57j
		mov	ebp, [esp+24h+var_24]
		test	ebp, ebp
		jz	short loc_6E43A9AC
		mov	ebp, [esp+24h+var_24]
		test	[edi+10h], ebp
		jz	short loc_6E43A97E

loc_6E43A9AC:				; CODE XREF: sub_6E43A920+82j
		mov	ebp, [esp+24h+var_20]
		test	ebp, ebp
		jz	short loc_6E43A9BD
		mov	ebp, [esp+24h+var_20]
		test	[edi+14h], ebp
		jz	short loc_6E43A97E

loc_6E43A9BD:				; CODE XREF: sub_6E43A920+92j
		mov	ebp, [esp+24h+var_18]
		test	ebp, ebp
		jz	short loc_6E43A9D0
		mov	ebp, [esp+24h+var_18]
		test	[edi+18h], ebp
		jz	short loc_6E43A97E
		xchg	ax, ax

loc_6E43A9D0:				; CODE XREF: sub_6E43A920+5Cj
					; sub_6E43A920+A3j
		cmp	[esp+24h+arg_0], 1
		jz	loc_6E43AA70
		cmp	[esp+24h+arg_0], 4
		jz	loc_6E43AAD0
		cmp	[esp+24h+arg_0], 3
		jz	loc_6E43AB20
		cmp	[esp+24h+arg_0], 2
		jnz	short loc_6E43A97E
		cmp	eax, [esp+24h+var_14]
		jz	loc_6E43ABA0
		mov	edi, [eax+10h]
		mov	ebp, edi
		mov	edi, [eax+0Ch]
		mov	[ebp+0Ch], edi
		mov	edi, [eax+0Ch]

loc_6E43AA10:				; CODE XREF: sub_6E43A920+28Aj
		cmp	eax, [esp+24h+var_1C]
		jz	loc_6E43AB97

loc_6E43AA1A:				; CODE XREF: sub_6E43A920+27Bj
		mov	dword ptr [eax+4], 0
		test	edi, edi
		jz	short loc_6E43AA2B
		mov	[edi+10h], ebp
		mov	ebp, [eax+10h]

loc_6E43AA2B:				; CODE XREF: sub_6E43A920+103j
		test	ebp, ebp
		jz	short loc_6E43AA32
		mov	[ebp+0Ch], edi

loc_6E43AA32:				; CODE XREF: sub_6E43A920+10Dj
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+10h], 0
		cmp	ebx, eax
		jnz	loc_6E43A986
		nop
		lea	esi, [esi+0]

loc_6E43AA50:				; CODE XREF: sub_6E43A920+38j
					; sub_6E43A920+40j ...
		mov	eax, [esp+24h+arg_8]
		mov	esi, [esp+24h+var_14]
		mov	[eax], esi
		mov	eax, [esp+24h+arg_C]
		mov	ebx, [esp+24h+var_1C]
		mov	[eax], ebx
		add	esp, 14h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43AA70:				; CODE XREF: sub_6E43A920+B5j
		mov	edi, [eax+4]
		test	edi, edi
		jnz	loc_6E43A97E
		cmp	eax, [esp+24h+var_1C]
		jz	short loc_6E43AAB7
		mov	edi, [eax+0Ch]
		cmp	eax, [esp+24h+var_14]
		jz	loc_6E43AB8E

loc_6E43AA8E:				; CODE XREF: sub_6E43A920+272j
		mov	ebp, [eax+10h]
		test	ebp, ebp
		jz	short loc_6E43AA9B
		mov	[ebp+0Ch], edi
		mov	edi, [eax+0Ch]

loc_6E43AA9B:				; CODE XREF: sub_6E43A920+173j
		test	edi, edi
		jz	short loc_6E43AAA2
		mov	[edi+10h], ebp

loc_6E43AAA2:				; CODE XREF: sub_6E43A920+17Dj
		mov	edi, [esp+24h+var_1C]
		mov	[edi+0Ch], eax
		mov	[eax+10h], edi
		mov	dword ptr [eax+0Ch], 0
		mov	[esp+24h+var_1C], eax

loc_6E43AAB7:				; CODE XREF: sub_6E43A920+15Fj
		mov	dword ptr [eax+4], 1
		jmp	loc_6E43A97E
; ---------------------------------------------------------------------------
		align 10h

loc_6E43AAD0:				; CODE XREF: sub_6E43A920+C0j
		mov	ebp, [eax+4]
		test	ebp, ebp
		jz	loc_6E43A97E
		cmp	eax, [esp+24h+var_1C]
		jz	loc_6E43A97E
		mov	edi, [eax+0Ch]
		cmp	eax, [esp+24h+var_14]
		jz	loc_6E43ABAF

loc_6E43AAF2:				; CODE XREF: sub_6E43A920+293j
		mov	ebp, [eax+10h]
		test	ebp, ebp
		jz	short loc_6E43AAFF
		mov	[ebp+0Ch], edi
		mov	edi, [eax+0Ch]

loc_6E43AAFF:				; CODE XREF: sub_6E43A920+1D7j
		test	edi, edi
		jz	short loc_6E43AB06
		mov	[edi+10h], ebp

loc_6E43AB06:				; CODE XREF: sub_6E43A920+1E1j
		mov	edi, [esp+24h+var_1C]
		mov	[edi+0Ch], eax
		mov	[eax+10h], edi
		mov	dword ptr [eax+0Ch], 0
		mov	[esp+24h+var_1C], eax
		jmp	loc_6E43A97E
; ---------------------------------------------------------------------------

loc_6E43AB20:				; CODE XREF: sub_6E43A920+CBj
		mov	edi, [eax+4]
		test	edi, edi
		jz	loc_6E43A97E
		cmp	eax, [esp+24h+var_14]
		jz	short loc_6E43AB63
		mov	edi, [eax+10h]
		cmp	eax, [esp+24h+var_1C]
		jz	short loc_6E43ABB8

loc_6E43AB3A:				; CODE XREF: sub_6E43A920+29Cj
		mov	ebp, [eax+0Ch]
		test	ebp, ebp
		jz	short loc_6E43AB47
		mov	[ebp+10h], edi
		mov	edi, [eax+10h]

loc_6E43AB47:				; CODE XREF: sub_6E43A920+21Fj
		test	edi, edi
		jz	short loc_6E43AB4E
		mov	[edi+0Ch], ebp

loc_6E43AB4E:				; CODE XREF: sub_6E43A920+229j
		mov	edi, [esp+24h+var_14]
		mov	[edi+10h], eax
		mov	[eax+0Ch], edi
		mov	dword ptr [eax+10h], 0
		mov	[esp+24h+var_14], eax

loc_6E43AB63:				; CODE XREF: sub_6E43A920+20Fj
		mov	dword ptr [eax+4], 0
		jmp	loc_6E43A97E
; ---------------------------------------------------------------------------
		align 10h

loc_6E43AB70:				; CODE XREF: sub_6E43A920+1Aj
		mov	eax, [esp+24h+arg_8]
		mov	ebx, [eax]
		mov	eax, [esp+24h+arg_C]
		mov	eax, [eax]
		mov	[esp+24h+var_1C], eax
		mov	[esp+24h+var_14], ebx
		mov	esi, 1
		jmp	loc_6E43A956
; ---------------------------------------------------------------------------

loc_6E43AB8E:				; CODE XREF: sub_6E43A920+168j
		mov	[esp+24h+var_14], edi
		jmp	loc_6E43AA8E
; ---------------------------------------------------------------------------

loc_6E43AB97:				; CODE XREF: sub_6E43A920+F4j
		mov	[esp+24h+var_1C], ebp
		jmp	loc_6E43AA1A
; ---------------------------------------------------------------------------

loc_6E43ABA0:				; CODE XREF: sub_6E43A920+DCj
		mov	edi, [eax+0Ch]
		mov	[esp+24h+var_14], edi
		mov	ebp, [eax+10h]
		jmp	loc_6E43AA10
; ---------------------------------------------------------------------------

loc_6E43ABAF:				; CODE XREF: sub_6E43A920+1CCj
		mov	[esp+24h+var_14], edi
		jmp	loc_6E43AAF2
; ---------------------------------------------------------------------------

loc_6E43ABB8:				; CODE XREF: sub_6E43A920+218j
		mov	[esp+24h+var_1C], edi
		jmp	loc_6E43AB3A
sub_6E43A920	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E43ABD0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43ABD0	proc near		; CODE XREF: .text:6E43ABC1j
					; sub_6E43AE10+64Ap ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	[esp+4Ch+var_28], eax
		mov	[esp+4Ch+var_20], edx
		mov	eax, [eax]
		test	eax, eax
		jz	loc_6E43ADE2
		xor	esi, esi
		nop
		lea	esi, [esi+0]

loc_6E43ABF0:				; CODE XREF: sub_6E43ABD0+37j
		mov	ecx, [eax+4]
		test	ecx, ecx
		jz	short loc_6E43AC02
		mov	edx, [eax]
		mov	edx, [edx+28h]
		cmp	esi, edx
		jge	short loc_6E43AC02
		mov	esi, edx

loc_6E43AC02:				; CODE XREF: sub_6E43ABD0+25j
					; sub_6E43ABD0+2Ej
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_6E43ABF0
		lea	ebx, ds:4[esi*4]
		mov	eax, ebx

loc_6E43AC12:				; CODE XREF: sub_6E43ABD0+21Ej
		mov	[esp+4Ch+var_44], 449h
		mov	[esp+4Ch+var_48], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+4Ch+var_4C], eax
		call	CRYPTO_malloc
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E43ADAC
		mov	edx, ebx
		mov	edi, eax
		cmp	ebx, 4
		jnb	loc_6E43AD7F

loc_6E43AC41:				; CODE XREF: sub_6E43ABD0+1C4j
		test	dl, 2
		jnz	loc_6E43AD6C
		and	edx, 1
		jnz	loc_6E43AD64

loc_6E43AC53:				; CODE XREF: sub_6E43ABD0+197j
					; sub_6E43ABD0+1A7j
		mov	eax, [esp+4Ch+var_28]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6E43AC77
		lea	esi, [esi+0]

loc_6E43AC60:				; CODE XREF: sub_6E43ABD0+A5j
		mov	edx, [eax+4]
		test	edx, edx
		jz	short loc_6E43AC70
		mov	edx, [eax]
		mov	edx, [edx+28h]
		inc	dword ptr [ebp+edx*4+0]

loc_6E43AC70:				; CODE XREF: sub_6E43ABD0+95j
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_6E43AC60

loc_6E43AC77:				; CODE XREF: sub_6E43ABD0+8Bj
		mov	[esp+4Ch+var_24], ebp
		nop
		lea	esi, [esi+0]

loc_6E43AC80:				; CODE XREF: sub_6E43ABD0+154j
		mov	eax, [esp+4Ch+var_24]
		mov	ebp, [eax+esi*4]
		test	ebp, ebp
		jle	loc_6E43AD20
		mov	eax, [esp+4Ch+var_28]
		mov	ebp, [eax]
		mov	eax, [esp+4Ch+var_20]
		mov	ecx, [eax]
		test	ecx, ecx
		jz	loc_6E43AD99
		mov	ebx, ecx
		test	ebp, ebp
		jz	short loc_6E43AD14
		mov	eax, ebp
		mov	[esp+4Ch+var_2C], ebp
		jmp	short loc_6E43ACCA
; ---------------------------------------------------------------------------
		jmp	short loc_6E43ACC0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43ACC0:				; CODE XREF: sub_6E43ABD0+E1j
					; sub_6E43ABD0+102j ...
		cmp	ecx, eax
		jz	short loc_6E43AD10

loc_6E43ACC4:				; CODE XREF: sub_6E43ABD0+13Aj
		test	edx, edx
		jz	short loc_6E43AD10
		mov	eax, edx

loc_6E43ACCA:				; CODE XREF: sub_6E43ABD0+DFj
		mov	edx, [eax+0Ch]
		mov	edi, [eax]
		cmp	esi, [edi+28h]
		jnz	short loc_6E43ACC0
		mov	edi, [eax+4]
		test	edi, edi
		jz	short loc_6E43ACC0
		cmp	eax, ebx
		jz	short loc_6E43ACC0
		cmp	eax, [esp+4Ch+var_2C]
		jz	short loc_6E43AD50
		mov	edi, [eax+10h]
		test	edi, edi
		jz	short loc_6E43AD60

loc_6E43ACEC:				; CODE XREF: sub_6E43ABD0+189j
		mov	[edi+0Ch], edx
		mov	ebp, [eax+0Ch]

loc_6E43ACF2:				; CODE XREF: sub_6E43ABD0+192j
		test	ebp, ebp
		jz	short loc_6E43ACF9
		mov	[ebp+10h], edi

loc_6E43ACF9:				; CODE XREF: sub_6E43ABD0+124j
		mov	[ebx+0Ch], eax
		mov	[eax+10h], ebx
		mov	dword ptr [eax+0Ch], 0
		mov	ebx, eax
		cmp	ecx, eax
		jnz	short loc_6E43ACC4
		lea	esi, [esi+0]

loc_6E43AD10:				; CODE XREF: sub_6E43ABD0+F2j
					; sub_6E43ABD0+F6j
		mov	ebp, [esp+4Ch+var_2C]

loc_6E43AD14:				; CODE XREF: sub_6E43ABD0+D7j
		mov	eax, [esp+4Ch+var_28]
		mov	[eax], ebp
		mov	eax, [esp+4Ch+var_20]
		mov	[eax], ebx

loc_6E43AD20:				; CODE XREF: sub_6E43ABD0+B9j
					; sub_6E43ABD0+1D7j
		dec	esi
		cmp	esi, 0FFFFFFFFh
		jnz	loc_6E43AC80
		mov	ebp, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], ebp
		call	CRYPTO_free
		mov	eax, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43AD50:				; CODE XREF: sub_6E43ABD0+113j
		mov	[esp+4Ch+var_2C], edx
		mov	edi, [eax+10h]
		test	edi, edi
		jnz	short loc_6E43ACEC
		nop
		lea	esi, [esi+0]

loc_6E43AD60:				; CODE XREF: sub_6E43ABD0+11Aj
		mov	ebp, edx
		jmp	short loc_6E43ACF2
; ---------------------------------------------------------------------------

loc_6E43AD64:				; CODE XREF: sub_6E43ABD0+7Dj
					; sub_6E43ABD0+1ADj
		mov	byte ptr [edi],	0
		jmp	loc_6E43AC53
; ---------------------------------------------------------------------------

loc_6E43AD6C:				; CODE XREF: sub_6E43ABD0+74j
		mov	word ptr [edi],	0
		add	edi, 2
		and	edx, 1
		jz	loc_6E43AC53
		jmp	short loc_6E43AD64
; ---------------------------------------------------------------------------

loc_6E43AD7F:				; CODE XREF: sub_6E43ABD0+6Bj
		test	al, 1
		jnz	short loc_6E43AE00

loc_6E43AD83:				; CODE XREF: sub_6E43ABD0+237j
		test	edi, 2
		jnz	short loc_6E43ADF3

loc_6E43AD8B:				; CODE XREF: sub_6E43ABD0+22Ej
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		jmp	loc_6E43AC41
; ---------------------------------------------------------------------------

loc_6E43AD99:				; CODE XREF: sub_6E43ABD0+CDj
		xor	ebx, ebx
		mov	eax, [esp+4Ch+var_28]
		mov	[eax], ebp
		mov	eax, [esp+4Ch+var_20]
		mov	[eax], ebx
		jmp	loc_6E43AD20
; ---------------------------------------------------------------------------

loc_6E43ADAC:				; CODE XREF: sub_6E43ABD0+5Ej
		mov	[esp+4Ch+var_3C], 44Bh
		mov	[esp+4Ch+var_40], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+4Ch+var_44], 41h
		mov	[esp+4Ch+var_48], 0E7h
		mov	[esp+4Ch+var_4C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E43ADE2:				; CODE XREF: sub_6E43ABD0+13j
		mov	eax, 4
		mov	ebx, 4
		xor	esi, esi
		jmp	loc_6E43AC12
; ---------------------------------------------------------------------------

loc_6E43ADF3:				; CODE XREF: sub_6E43ABD0+1B9j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	edx, 2
		jmp	short loc_6E43AD8B
; ---------------------------------------------------------------------------

loc_6E43AE00:				; CODE XREF: sub_6E43ABD0+1B1j
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		dec	edx
		jmp	loc_6E43AD83
sub_6E43ABD0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43AE10	proc near		; CODE XREF: sub_6E43BC80+935p
					; sub_6E43BC80+9BBp

Str1		= dword	ptr -6Ch
Str2		= dword	ptr -68h
MaxCount	= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebp, eax
		mov	[esp+6Ch+var_28], edx
		mov	[esp+6Ch+var_24], ecx
		mov	al, [eax]
		mov	[esp+6Ch+var_2C], 1
		jmp	short loc_6E43AE56
; ---------------------------------------------------------------------------
		align 10h

loc_6E43AE30:				; CODE XREF: sub_6E43AE10+50j
		cmp	al, 2Bh
		jz	loc_6E43AF99
		cmp	al, 21h
		jz	loc_6E43AFA9
		cmp	al, 40h
		jz	loc_6E43AFB9
		cmp	al, 3Ah
		jnz	loc_6E43B37D
		mov	esi, ebp

loc_6E43AE52:				; CODE XREF: sub_6E43AE10+579j
					; sub_6E43AE10+581j ...
		inc	ebp
		mov	al, [esi+1]

loc_6E43AE56:				; CODE XREF: sub_6E43AE10+1Bj
					; sub_6E43AE10+150j ...
		test	al, al
		jz	loc_6E43AF7E
		cmp	al, 2Dh
		jnz	short loc_6E43AE30
		lea	esi, [ebp+1]
		mov	[esp+6Ch+var_50], 3

loc_6E43AE6D:				; CODE XREF: sub_6E43AE10+194j
					; sub_6E43AE10+1A4j ...
		mov	[esp+6Ch+var_4C], 0
		mov	[esp+6Ch+var_38], 0
		mov	[esp+6Ch+var_30], 0
		mov	[esp+6Ch+var_34], 0
		mov	[esp+6Ch+var_3C], 0
		mov	[esp+6Ch+var_40], 0

loc_6E43AE9D:				; CODE XREF: sub_6E43AE10+2AEj
		mov	al, [esi]
		mov	ebp, esi
		jmp	short loc_6E43AEB0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43AEB0:				; CODE XREF: sub_6E43AE10+91j
					; sub_6E43AE10+184j
		mov	ebx, ebp
		sub	ebx, esi
		mov	dl, al
		and	edx, 0FFFFFFDFh
		sub	edx, 41h
		cmp	dl, 19h
		jbe	loc_6E43AF90
		lea	edx, [eax-30h]
		cmp	dl, 9
		jbe	loc_6E43AF90
		lea	edx, [eax-2Dh]
		cmp	dl, 1
		jbe	loc_6E43AF90
		test	ebx, ebx
		jz	loc_6E43B4B9
		cmp	[esp+6Ch+var_50], 5
		jz	loc_6E43B3A4
		cmp	al, 2Bh
		jnz	loc_6E43B319
		inc	ebp
		mov	[esp+6Ch+var_48], 1

loc_6E43AF01:				; CODE XREF: sub_6E43AE10+511j
		mov	eax, [esp+6Ch+arg_0]
		mov	edi, [eax]
		test	edi, edi
		jz	short loc_6E43AF77
		lea	edx, [eax+4]
		mov	[esp+6Ch+var_54], esi
		mov	[esp+6Ch+var_44], ebp
		mov	ebp, edx
		nop
		lea	esi, [esi+0]

loc_6E43AF20:				; CODE XREF: sub_6E43AE10+13Dj
		mov	esi, [edi+4]
		mov	[esp+6Ch+MaxCount], ebx	; MaxCount
		mov	[esp+6Ch+Str2],	esi ; Str2
		mov	eax, [esp+6Ch+var_54]
		mov	[esp+6Ch+Str1],	eax ; Str1
		call	strncmp
		test	eax, eax
		jnz	short loc_6E43AF45
		cmp	byte ptr [esi+ebx], 0
		jz	loc_6E43AFC9

loc_6E43AF45:				; CODE XREF: sub_6E43AE10+129j
		add	ebp, 4
		mov	edi, [ebp-4]
		test	edi, edi
		jnz	short loc_6E43AF20
		mov	ebp, [esp+6Ch+var_44]
		mov	al, [ebp+0]
		test	al, al
		jz	short loc_6E43AF7E

loc_6E43AF5A:				; CODE XREF: sub_6E43AE10+16Cj
		lea	edx, [eax-3Ah]
		cmp	dl, 1
		jbe	loc_6E43AE56
		cmp	al, 20h
		jz	loc_6E43B37B
		cmp	al, 2Ch
		jz	loc_6E43B37D
		inc	ebp

loc_6E43AF77:				; CODE XREF: sub_6E43AE10+F9j
					; sub_6E43AE10+1D4j ...
		mov	al, [ebp+0]
		test	al, al
		jnz	short loc_6E43AF5A

loc_6E43AF7E:				; CODE XREF: sub_6E43AE10+48j
					; sub_6E43AE10+148j ...
		mov	eax, [esp+6Ch+var_2C]
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43AF90:				; CODE XREF: sub_6E43AE10+AFj
					; sub_6E43AE10+BBj ...
		inc	ebp
		mov	al, [ebp+0]
		jmp	loc_6E43AEB0
; ---------------------------------------------------------------------------

loc_6E43AF99:				; CODE XREF: sub_6E43AE10+22j
		lea	esi, [ebp+1]
		mov	[esp+6Ch+var_50], 4
		jmp	loc_6E43AE6D
; ---------------------------------------------------------------------------

loc_6E43AFA9:				; CODE XREF: sub_6E43AE10+2Aj
		lea	esi, [ebp+1]
		mov	[esp+6Ch+var_50], 2
		jmp	loc_6E43AE6D
; ---------------------------------------------------------------------------

loc_6E43AFB9:				; CODE XREF: sub_6E43AE10+32j
		lea	esi, [ebp+1]
		mov	[esp+6Ch+var_50], 5
		jmp	loc_6E43AE6D
; ---------------------------------------------------------------------------

loc_6E43AFC9:				; CODE XREF: sub_6E43AE10+12Fj
		mov	ebp, [esp+6Ch+var_44]
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	short loc_6E43AFE6
		mov	esi, [esp+6Ch+var_40]
		test	esi, esi
		jz	loc_6E43B0C3
		and	[esp+6Ch+var_40], eax
		jz	short loc_6E43AF77

loc_6E43AFE6:				; CODE XREF: sub_6E43AE10+1C2j
					; sub_6E43AE10+2B7j
		mov	eax, [edi+10h]
		test	eax, eax
		jz	short loc_6E43B003
		mov	ebx, [esp+6Ch+var_3C]
		test	ebx, ebx
		jz	loc_6E43B0E1
		and	[esp+6Ch+var_3C], eax
		jz	loc_6E43AF77

loc_6E43B003:				; CODE XREF: sub_6E43AE10+1DBj
					; sub_6E43AE10+2D5j
		mov	eax, [edi+14h]
		test	eax, eax
		jz	short loc_6E43B020
		mov	ecx, [esp+6Ch+var_34]
		test	ecx, ecx
		jz	loc_6E43B0EA
		and	[esp+6Ch+var_34], eax
		jz	loc_6E43AF77

loc_6E43B020:				; CODE XREF: sub_6E43AE10+1F8j
					; sub_6E43AE10+2DEj
		mov	eax, [edi+18h]
		test	eax, eax
		jz	short loc_6E43B03D
		mov	edx, [esp+6Ch+var_30]
		test	edx, edx
		jz	loc_6E43B0CC
		and	[esp+6Ch+var_30], eax
		jz	loc_6E43AF77

loc_6E43B03D:				; CODE XREF: sub_6E43AE10+215j
					; sub_6E43AE10+2C0j
		mov	eax, [edi+20h]
		mov	edx, eax
		and	edx, 3
		jz	short loc_6E43B066
		test	byte ptr [esp+6Ch+var_4C], 3
		jz	loc_6E43B0D5
		mov	edx, eax
		or	edx, 0FFFFFFFCh
		and	[esp+6Ch+var_4C], edx
		test	byte ptr [esp+6Ch+var_4C], 3
		jz	loc_6E43AF77

loc_6E43B066:				; CODE XREF: sub_6E43AE10+235j
					; sub_6E43AE10+2C9j
		mov	edx, eax
		and	edx, 1FCh
		jz	short loc_6E43B091
		test	[esp+6Ch+var_4C], 1FCh
		jz	short loc_6E43B0DB
		or	eax, 0FFFFFE03h
		and	[esp+6Ch+var_4C], eax
		test	[esp+6Ch+var_4C], 1FCh
		jz	loc_6E43AF77

loc_6E43B091:				; CODE XREF: sub_6E43AE10+25Ej
					; sub_6E43AE10+2CFj
		mov	eax, [edi]
		test	eax, eax
		jnz	short loc_6E43B0B4
		mov	eax, [edi+1Ch]
		test	eax, eax
		jz	short loc_6E43B0B4
		mov	esi, [esp+6Ch+var_38]
		test	esi, esi
		jz	loc_6E43B310
		and	[esp+6Ch+var_38], eax
		jz	loc_6E43AF77

loc_6E43B0B4:				; CODE XREF: sub_6E43AE10+285j
					; sub_6E43AE10+28Cj ...
		mov	ebx, [esp+6Ch+var_48]
		test	ebx, ebx
		jz	short loc_6E43B0F3
		mov	esi, ebp
		jmp	loc_6E43AE9D
; ---------------------------------------------------------------------------

loc_6E43B0C3:				; CODE XREF: sub_6E43AE10+1CAj
		mov	[esp+6Ch+var_40], eax
		jmp	loc_6E43AFE6
; ---------------------------------------------------------------------------

loc_6E43B0CC:				; CODE XREF: sub_6E43AE10+21Dj
		mov	[esp+6Ch+var_30], eax
		jmp	loc_6E43B03D
; ---------------------------------------------------------------------------

loc_6E43B0D5:				; CODE XREF: sub_6E43AE10+23Cj
		or	[esp+6Ch+var_4C], edx
		jmp	short loc_6E43B066
; ---------------------------------------------------------------------------

loc_6E43B0DB:				; CODE XREF: sub_6E43AE10+268j
		or	[esp+6Ch+var_4C], edx
		jmp	short loc_6E43B091
; ---------------------------------------------------------------------------

loc_6E43B0E1:				; CODE XREF: sub_6E43AE10+1E3j
		mov	[esp+6Ch+var_3C], eax
		jmp	loc_6E43B003
; ---------------------------------------------------------------------------

loc_6E43B0EA:				; CODE XREF: sub_6E43AE10+200j
		mov	[esp+6Ch+var_34], eax
		jmp	loc_6E43B020
; ---------------------------------------------------------------------------

loc_6E43B0F3:				; CODE XREF: sub_6E43AE10+2AAj
		cmp	[esp+6Ch+var_50], 3
		jz	loc_6E43B500
		mov	eax, [esp+6Ch+var_28]
		mov	eax, [eax]
		mov	ecx, [esp+6Ch+var_24]
		mov	ecx, [ecx]
		mov	[esp+6Ch+var_54], ecx
		mov	esi, ecx
		mov	edi, eax
		mov	[esp+6Ch+var_48], 0

loc_6E43B11A:				; CODE XREF: sub_6E43AE10+70Cj
		mov	ecx, [esp+6Ch+var_54]
		test	ecx, ecx
		jz	loc_6E43B2EA
		test	eax, eax
		jz	loc_6E43B2EA
		mov	ebx, [esp+6Ch+var_4C]
		mov	ecx, ebx
		and	ecx, 3
		mov	[esp+6Ch+var_44], ecx
		mov	ecx, ebx
		and	ecx, 1FCh
		mov	[esp+6Ch+var_20], ecx
		mov	edx, [esp+6Ch+var_48]
		test	edx, edx
		jz	loc_6E43B27F

loc_6E43B153:				; CODE XREF: sub_6E43AE10+469j
		mov	ecx, [eax+10h]
		mov	edx, [eax]
		cmp	[esp+6Ch+var_4C], 3
		jz	loc_6E43B28F

loc_6E43B163:				; CODE XREF: sub_6E43AE10+479j
					; sub_6E43AE10+483j
		cmp	[esp+6Ch+var_38], 0FFFFFFFEh
		jz	loc_6E43B326

loc_6E43B16E:				; CODE XREF: sub_6E43AE10+51Aj
		mov	ebx, [esp+6Ch+var_40]
		test	ebx, ebx
		jz	short loc_6E43B183
		mov	ebx, [esp+6Ch+var_40]
		test	[edx+0Ch], ebx
		jz	loc_6E43B267

loc_6E43B183:				; CODE XREF: sub_6E43AE10+364j
		mov	ebx, [esp+6Ch+var_3C]
		test	ebx, ebx
		jz	short loc_6E43B198
		mov	ebx, [esp+6Ch+var_3C]
		test	[edx+10h], ebx
		jz	loc_6E43B267

loc_6E43B198:				; CODE XREF: sub_6E43AE10+379j
		mov	ebx, [esp+6Ch+var_34]
		test	ebx, ebx
		jz	short loc_6E43B1AD
		mov	ebx, [esp+6Ch+var_34]
		test	[edx+14h], ebx
		jz	loc_6E43B267

loc_6E43B1AD:				; CODE XREF: sub_6E43AE10+38Ej
		mov	ebx, [esp+6Ch+var_30]
		test	ebx, ebx
		jz	short loc_6E43B1C2
		mov	ebx, [esp+6Ch+var_30]
		test	[edx+18h], ebx
		jz	loc_6E43B267

loc_6E43B1C2:				; CODE XREF: sub_6E43AE10+3A3j
		mov	ebx, [esp+6Ch+var_38]
		test	ebx, ebx
		jz	short loc_6E43B1D7
		mov	ebx, [esp+6Ch+var_38]
		test	[edx+1Ch], ebx
		jz	loc_6E43B267

loc_6E43B1D7:				; CODE XREF: sub_6E43AE10+3B8j
		mov	ebx, [esp+6Ch+var_44]
		test	ebx, ebx
		jz	short loc_6E43B1EB
		mov	ebx, [esp+6Ch+var_4C]
		and	ebx, [edx+20h]
		and	ebx, 3
		jz	short loc_6E43B267

loc_6E43B1EB:				; CODE XREF: sub_6E43AE10+3CDj
		mov	ebx, [esp+6Ch+var_20]
		test	ebx, ebx
		jz	short loc_6E43B204
		mov	ebx, [esp+6Ch+var_4C]
		and	ebx, [edx+20h]
		mov	edx, ebx
		and	edx, 1FCh
		jz	short loc_6E43B267

loc_6E43B204:				; CODE XREF: sub_6E43AE10+3E1j
					; sub_6E43AE10+520j
		cmp	[esp+6Ch+var_50], 1
		jz	loc_6E43B2A4

loc_6E43B20F:				; CODE XREF: sub_6E43AE10+48Ej
		cmp	[esp+6Ch+var_50], 4
		jz	loc_6E43B335
		cmp	[esp+6Ch+var_50], 3
		jz	loc_6E43B470
		cmp	eax, edi
		jz	loc_6E43B528
		mov	ebx, [eax+10h]
		mov	edx, [eax+0Ch]
		mov	[ebx+0Ch], edx
		mov	edx, [eax+0Ch]

loc_6E43B239:				; CODE XREF: sub_6E43AE10+720j
		cmp	eax, esi
		jz	loc_6E43B521

loc_6E43B241:				; CODE XREF: sub_6E43AE10+713j
		mov	dword ptr [eax+4], 0
		test	edx, edx
		jz	short loc_6E43B252
		mov	[edx+10h], ebx
		mov	ebx, [eax+10h]

loc_6E43B252:				; CODE XREF: sub_6E43AE10+43Aj
		test	ebx, ebx
		jz	short loc_6E43B259
		mov	[ebx+0Ch], edx

loc_6E43B259:				; CODE XREF: sub_6E43AE10+444j
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+10h], 0

loc_6E43B267:				; CODE XREF: sub_6E43AE10+36Dj
					; sub_6E43AE10+382j ...
		cmp	[esp+6Ch+var_54], eax
		jz	short loc_6E43B2EA

loc_6E43B26D:				; CODE XREF: sub_6E43AE10+4D8j
		test	ecx, ecx
		jz	short loc_6E43B2EA
		mov	eax, ecx
		mov	edx, [esp+6Ch+var_48]
		test	edx, edx
		jnz	loc_6E43B153

loc_6E43B27F:				; CODE XREF: sub_6E43AE10+33Dj
		mov	ecx, [eax+0Ch]
		mov	edx, [eax]
		cmp	[esp+6Ch+var_4C], 3
		jnz	loc_6E43B163

loc_6E43B28F:				; CODE XREF: sub_6E43AE10+34Dj
		test	byte ptr [edx+20h], 2
		jz	loc_6E43B163
		cmp	[esp+6Ch+var_50], 1
		jnz	loc_6E43B20F

loc_6E43B2A4:				; CODE XREF: sub_6E43AE10+3F9j
		mov	edx, [eax+4]
		test	edx, edx
		jnz	short loc_6E43B267
		cmp	eax, esi
		jz	short loc_6E43B2DD
		cmp	eax, edi
		jz	loc_6E43B535
		mov	edx, [eax+0Ch]

loc_6E43B2BA:				; CODE XREF: sub_6E43AE10+72Aj
		mov	ebx, [eax+10h]
		test	ebx, ebx
		jz	short loc_6E43B2C7
		mov	[ebx+0Ch], edx
		mov	edx, [eax+0Ch]

loc_6E43B2C7:				; CODE XREF: sub_6E43AE10+4AFj
		test	edx, edx
		jz	short loc_6E43B2CE
		mov	[edx+10h], ebx

loc_6E43B2CE:				; CODE XREF: sub_6E43AE10+4B9j
		mov	[esi+0Ch], eax
		mov	[eax+10h], esi
		mov	dword ptr [eax+0Ch], 0
		mov	esi, eax

loc_6E43B2DD:				; CODE XREF: sub_6E43AE10+49Dj
		mov	dword ptr [eax+4], 1
		cmp	[esp+6Ch+var_54], eax
		jnz	short loc_6E43B26D

loc_6E43B2EA:				; CODE XREF: sub_6E43AE10+310j
					; sub_6E43AE10+318j ...
		mov	eax, [esp+6Ch+var_28]
		mov	[eax], edi
		mov	eax, [esp+6Ch+var_24]
		mov	[eax], esi
		mov	al, [ebp+0]
		test	al, al
		jnz	loc_6E43AE56
		jmp	loc_6E43AF7E
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B310:				; CODE XREF: sub_6E43AE10+294j
		mov	[esp+6Ch+var_38], eax
		jmp	loc_6E43B0B4
; ---------------------------------------------------------------------------

loc_6E43B319:				; CODE XREF: sub_6E43AE10+E2j
		mov	[esp+6Ch+var_48], 0
		jmp	loc_6E43AF01
; ---------------------------------------------------------------------------

loc_6E43B326:				; CODE XREF: sub_6E43AE10+358j
		cmp	dword ptr [edx+1Ch], 1
		jnz	loc_6E43B16E
		jmp	loc_6E43B204
; ---------------------------------------------------------------------------

loc_6E43B335:				; CODE XREF: sub_6E43AE10+404j
		mov	ebx, [eax+4]
		test	ebx, ebx
		jz	loc_6E43B267
		cmp	eax, esi
		jz	loc_6E43B267
		cmp	eax, edi
		jz	loc_6E43B53F
		mov	edx, [eax+0Ch]

loc_6E43B353:				; CODE XREF: sub_6E43AE10+734j
		mov	ebx, [eax+10h]
		test	ebx, ebx
		jz	short loc_6E43B360
		mov	[ebx+0Ch], edx
		mov	edx, [eax+0Ch]

loc_6E43B360:				; CODE XREF: sub_6E43AE10+548j
		test	edx, edx
		jz	short loc_6E43B367
		mov	[edx+10h], ebx

loc_6E43B367:				; CODE XREF: sub_6E43AE10+552j
		mov	[esi+0Ch], eax
		mov	[eax+10h], esi
		mov	dword ptr [eax+0Ch], 0
		mov	esi, eax
		jmp	loc_6E43B267
; ---------------------------------------------------------------------------

loc_6E43B37B:				; CODE XREF: sub_6E43AE10+158j
					; sub_6E43AE10+5EAj ...
		mov	al, 20h

loc_6E43B37D:				; CODE XREF: sub_6E43AE10+3Aj
					; sub_6E43AE10+160j ...
		mov	esi, ebp
		mov	[esp+6Ch+var_50], 1
		cmp	al, 20h
		jz	loc_6E43AE52
		cmp	al, 3Bh
		jz	loc_6E43AE52
		cmp	al, 2Ch
		jz	loc_6E43AE52
		jmp	loc_6E43AE6D
; ---------------------------------------------------------------------------

loc_6E43B3A4:				; CODE XREF: sub_6E43AE10+DAj
		cmp	ebx, 8
		jz	loc_6E43B440

loc_6E43B3AD:				; CODE XREF: sub_6E43AE10+63Cj
					; sub_6E43AE10+6DBj
		mov	[esp+6Ch+var_5C], 544h
		mov	[esp+6Ch+var_60], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+6Ch+MaxCount], 118h
		mov	[esp+6Ch+Str2],	0E6h
		mov	[esp+6Ch+Str1],	14h
		call	ERR_put_error

loc_6E43B3D9:				; CODE XREF: sub_6E43AE10+657j
		mov	[esp+6Ch+var_2C], 0

loc_6E43B3E1:				; CODE XREF: sub_6E43AE10+651j
		mov	al, [ebp+0]
		test	al, al
		jz	loc_6E43AF7E
		lea	edx, [eax-3Ah]
		cmp	dl, 1
		jbe	loc_6E43AE56
		cmp	al, 20h
		jz	loc_6E43B37B
		cmp	al, 2Ch
		jnz	short loc_6E43B42C
		jmp	loc_6E43B553
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B410:				; CODE XREF: sub_6E43AE10+622j
		lea	edx, [eax-3Ah]
		cmp	dl, 1
		jbe	loc_6E43AE56
		cmp	al, 20h
		jz	loc_6E43B37B
		cmp	al, 2Ch
		jz	loc_6E43B37D

loc_6E43B42C:				; CODE XREF: sub_6E43AE10+5F2j
		inc	ebp
		mov	al, [ebp+0]
		test	al, al
		jnz	short loc_6E43B410
		mov	eax, [esp+6Ch+var_2C]
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E43B440:				; CODE XREF: sub_6E43AE10+597j
		mov	edi, offset aStrength ;	"STRENGTH"
		mov	ecx, 8
		repe cmpsb
		jnz	loc_6E43B3AD
		mov	edx, [esp+6Ch+var_24]
		mov	eax, [esp+6Ch+var_28]
		call	sub_6E43ABD0
		test	eax, eax
		jnz	loc_6E43B3E1
		jmp	loc_6E43B3D9
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B470:				; CODE XREF: sub_6E43AE10+40Fj
		mov	edx, [eax+4]
		test	edx, edx
		jz	loc_6E43B267
		cmp	eax, edi
		jz	short loc_6E43B4AD
		cmp	eax, esi
		jz	loc_6E43B549
		mov	edx, [eax+10h]

loc_6E43B48A:				; CODE XREF: sub_6E43AE10+73Ej
		mov	ebx, [eax+0Ch]
		test	ebx, ebx
		jz	short loc_6E43B497
		mov	[ebx+10h], edx
		mov	edx, [eax+10h]

loc_6E43B497:				; CODE XREF: sub_6E43AE10+67Fj
		test	edx, edx
		jz	short loc_6E43B49E
		mov	[edx+0Ch], ebx

loc_6E43B49E:				; CODE XREF: sub_6E43AE10+689j
		mov	[edi+10h], eax
		mov	[eax+0Ch], edi
		mov	dword ptr [eax+10h], 0
		mov	edi, eax

loc_6E43B4AD:				; CODE XREF: sub_6E43AE10+66Dj
		mov	dword ptr [eax+4], 0
		jmp	loc_6E43B267
; ---------------------------------------------------------------------------

loc_6E43B4B9:				; CODE XREF: sub_6E43AE10+CFj
		mov	[esp+6Ch+var_5C], 4ACh
		mov	[esp+6Ch+var_60], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+6Ch+MaxCount], 118h
		mov	[esp+6Ch+Str2],	0E6h
		mov	[esp+6Ch+Str1],	14h
		call	ERR_put_error
		inc	ebp
		cmp	[esp+6Ch+var_50], 5
		jz	loc_6E43B3AD
		mov	[esp+6Ch+var_2C], 0
		jmp	loc_6E43AF77
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B500:				; CODE XREF: sub_6E43AE10+2E8j
		mov	eax, [esp+6Ch+var_28]
		mov	eax, [eax]
		mov	edi, eax
		mov	[esp+6Ch+var_54], eax
		mov	eax, [esp+6Ch+var_24]
		mov	eax, [eax]
		mov	esi, eax
		mov	[esp+6Ch+var_48], 1
		jmp	loc_6E43B11A
; ---------------------------------------------------------------------------

loc_6E43B521:				; CODE XREF: sub_6E43AE10+42Bj
		mov	esi, ebx
		jmp	loc_6E43B241
; ---------------------------------------------------------------------------

loc_6E43B528:				; CODE XREF: sub_6E43AE10+417j
		mov	edi, [eax+0Ch]
		mov	edx, edi
		mov	ebx, [eax+10h]
		jmp	loc_6E43B239
; ---------------------------------------------------------------------------

loc_6E43B535:				; CODE XREF: sub_6E43AE10+4A1j
		mov	edi, [eax+0Ch]
		mov	edx, edi
		jmp	loc_6E43B2BA
; ---------------------------------------------------------------------------

loc_6E43B53F:				; CODE XREF: sub_6E43AE10+53Aj
		mov	edi, [eax+0Ch]
		mov	edx, edi
		jmp	loc_6E43B353
; ---------------------------------------------------------------------------

loc_6E43B549:				; CODE XREF: sub_6E43AE10+671j
		mov	esi, [eax+10h]
		mov	edx, esi
		jmp	loc_6E43B48A
; ---------------------------------------------------------------------------

loc_6E43B553:				; CODE XREF: sub_6E43AE10+5F4j
		mov	al, 2Ch
		jmp	loc_6E43B37D
sub_6E43AE10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43B560	proc near		; CODE XREF: SSL_library_init+204p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		sub	esp, 3Ch
		mov	[esp+3Ch+var_3C], offset aDesCbc ; "DES-CBC"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E454060, eax
		mov	[esp+3Ch+var_3C], offset aDesEde3Cbc ; "DES-EDE3-CBC"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E454064, eax
		mov	[esp+3Ch+var_3C], offset aRc4 ;	"RC4"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E454068, eax
		mov	[esp+3Ch+var_3C], offset aRc2Cbc ; "RC2-CBC"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E45406C, eax
		mov	[esp+3Ch+var_3C], offset aIdeaCbc ; "IDEA-CBC"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E454070, eax
		mov	[esp+3Ch+var_3C], offset aAes128Cbc ; "AES-128-CBC"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E454078, eax
		mov	[esp+3Ch+var_3C], offset aAes256Cbc ; "AES-256-CBC"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E45407C, eax
		mov	[esp+3Ch+var_3C], offset aCamellia128Cbc ; "CAMELLIA-128-CBC"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E454080, eax
		mov	[esp+3Ch+var_3C], offset aCamellia256Cbc ; "CAMELLIA-256-CBC"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E454084, eax
		mov	[esp+3Ch+var_3C], offset aGost89Cnt ; "gost89-cnt"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E454088, eax
		mov	[esp+3Ch+var_3C], offset aSeedCbc ; "SEED-CBC"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E45408C, eax
		mov	[esp+3Ch+var_3C], offset aIdAes128Gcm ;	"id-aes128-GCM"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E454090, eax
		mov	[esp+3Ch+var_3C], offset aIdAes256Gcm ;	"id-aes256-GCM"
		call	EVP_get_cipherbyname
		mov	ds:dword_6E454094, eax
		mov	[esp+3Ch+var_3C], offset aMd5_0	; "MD5"
		call	EVP_get_digestbyname
		mov	ds:dword_6E454038, eax
		mov	[esp+3Ch+var_3C], eax
		call	EVP_MD_size
		mov	ds:dword_6E454020, eax
		test	eax, eax
		js	loc_6E43B7B0

loc_6E43B666:				; CODE XREF: sub_6E43B560+26Cj
		mov	[esp+3Ch+var_3C], offset aSha1 ; "SHA1"
		call	EVP_get_digestbyname
		mov	ds:dword_6E45403C, eax
		mov	[esp+3Ch+var_3C], eax
		call	EVP_MD_size
		mov	ds:dword_6E454024, eax
		test	eax, eax
		js	loc_6E43B7E0

loc_6E43B68C:				; CODE XREF: sub_6E43B560+29Cj
		mov	[esp+3Ch+var_3C], offset aMd_gost94 ; "md_gost94"
		call	EVP_get_digestbyname
		mov	ds:dword_6E454040, eax
		test	eax, eax
		jz	short loc_6E43B6B6
		mov	[esp+3Ch+var_3C], eax
		call	EVP_MD_size
		mov	ds:dword_6E454028, eax
		test	eax, eax
		js	loc_6E43B810

loc_6E43B6B6:				; CODE XREF: sub_6E43B560+13Fj
					; sub_6E43B560+2CCj
		mov	[esp+3Ch+var_3C], offset aGostMac ; "gost-mac"
		call	EVP_get_digestbyname
		mov	ds:dword_6E454044, eax
		mov	[esp+3Ch+var_14], 0
		mov	[esp+3Ch+var_10], 0
		mov	[esp+3Ch+var_34], 0FFFFFFFFh
		mov	[esp+3Ch+var_38], offset aGostMac ; "gost-mac"
		lea	eax, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_3C], eax
		call	EVP_PKEY_asn1_find_str
		test	eax, eax
		jz	short loc_6E43B72B
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 0
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_3C], eax
		call	EVP_PKEY_asn1_get0_info
		test	eax, eax
		jle	short loc_6E43B7A0

loc_6E43B72B:				; CODE XREF: sub_6E43B560+195j
					; sub_6E43B560+248j
		mov	eax, [esp+3Ch+var_14]
		test	eax, eax
		jz	short loc_6E43B73B
		mov	[esp+3Ch+var_3C], eax
		call	ENGINE_finish

loc_6E43B73B:				; CODE XREF: sub_6E43B560+1D1j
		mov	eax, [esp+3Ch+var_10]
		mov	dword_6E449A30,	eax
		test	eax, eax
		jz	short loc_6E43B752
		mov	ds:dword_6E45402C, 20h

loc_6E43B752:				; CODE XREF: sub_6E43B560+1E6j
		mov	[esp+3Ch+var_3C], offset aSha256 ; "SHA256"
		call	EVP_get_digestbyname
		mov	ds:dword_6E454048, eax
		mov	[esp+3Ch+var_3C], eax
		call	EVP_MD_size
		mov	ds:dword_6E454030, eax
		mov	[esp+3Ch+var_3C], offset aSha384 ; "SHA384"
		call	EVP_get_digestbyname
		mov	ds:dword_6E45404C, eax
		mov	[esp+3Ch+var_3C], eax
		call	EVP_MD_size
		mov	ds:dword_6E454034, eax
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B7A0:				; CODE XREF: sub_6E43B560+1C9j
		mov	[esp+3Ch+var_10], 0
		jmp	short loc_6E43B72B
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B7B0:				; CODE XREF: sub_6E43B560+100j
		mov	[esp+3Ch+var_34], offset aSsl_mac_secret ; "ssl_mac_secret_size[SSL_MD_MD5_IDX]	>= "...
		mov	[esp+3Ch+var_38], 1A2h
		mov	[esp+3Ch+var_3C], offset aSsl_ciph_c ; "ssl_ciph.c"
		call	OpenSSLDie
		jmp	loc_6E43B666
; ---------------------------------------------------------------------------
		jmp	short loc_6E43B7E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B7E0:				; CODE XREF: sub_6E43B560+126j
					; sub_6E43B560+271j
		mov	[esp+3Ch+var_34], offset aSsl_mac_secr_0 ; "ssl_mac_secret_size[SSL_MD_SHA1_IDX] >="...
		mov	[esp+3Ch+var_38], 1A6h
		mov	[esp+3Ch+var_3C], offset aSsl_ciph_c ; "ssl_ciph.c"
		call	OpenSSLDie
		jmp	loc_6E43B68C
; ---------------------------------------------------------------------------
		jmp	short loc_6E43B810
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B810:				; CODE XREF: sub_6E43B560+150j
					; sub_6E43B560+2A1j
		mov	[esp+3Ch+var_34], offset aSsl_mac_secr_1 ; "ssl_mac_secret_size[SSL_MD_GOST94_IDX] "...
		mov	[esp+3Ch+var_38], 1ACh
		mov	[esp+3Ch+var_3C], offset aSsl_ciph_c ; "ssl_ciph.c"
		call	OpenSSLDie
		jmp	loc_6E43B6B6
sub_6E43B560	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E43B840
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43B840	proc near		; CODE XREF: sub_6E410EC0+71p
					; sub_6E4203A0+71p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_0]
		mov	edi, [esp+3Ch+arg_4]
		mov	ebx, [esp+3Ch+arg_C]
		mov	ebp, [esi+0B4h]
		test	ebp, ebp
		jz	loc_6E43B980
		mov	eax, [esp+3Ch+arg_14]
		test	eax, eax
		jz	short loc_6E43B8BA
		call	sub_6E43A630
		mov	eax, [esp+3Ch+arg_14]
		mov	dword ptr [eax], 0
		mov	eax, [esi+0B0h]
		mov	[esp+3Ch+var_28], eax
		mov	eax, ds:dword_6E454050
		test	eax, eax
		jz	short loc_6E43B8BA
		lea	ecx, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_3C], eax
		call	sk_find
		test	eax, eax
		js	loc_6E43B9C0
		mov	[esp+3Ch+var_38], eax
		mov	eax, ds:dword_6E454050
		mov	[esp+3Ch+var_3C], eax
		call	sk_value
		mov	edx, [esp+3Ch+arg_14]
		mov	[edx], eax

loc_6E43B8BA:				; CODE XREF: sub_6E43B840+27j
					; sub_6E43B840+49j ...
		test	edi, edi
		jz	loc_6E43B980
		mov	eax, [esp+3Ch+arg_8]
		test	eax, eax
		jz	loc_6E43B980
		mov	eax, [ebp+14h]
		cmp	eax, 40h
		jz	loc_6E43BBB0
		jbe	loc_6E43B990
		cmp	eax, 400h
		jz	loc_6E43BBA0
		ja	loc_6E43B9D0
		cmp	eax, 100h
		jz	loc_6E43BB80
		cmp	eax, 200h
		jz	loc_6E43BB60
		add	eax, 0FFFFFF80h
		jz	loc_6E43BAB0

loc_6E43B910:				; CODE XREF: sub_6E43B840+170j
					; sub_6E43B840+1ABj ...
		mov	dword ptr [edi], 0
		jmp	loc_6E43BA29
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B920:				; CODE XREF: sub_6E43B840+1F2j
					; sub_6E43B840+202j
		mov	eax, [esp+3Ch+arg_8]
		mov	dword ptr [eax], 0
		test	ebx, ebx
		jz	short loc_6E43B934
		mov	dword ptr [ebx], 0

loc_6E43B934:				; CODE XREF: sub_6E43B840+ECj
		mov	eax, [esp+3Ch+arg_10]
		test	eax, eax
		jz	short loc_6E43B946
		mov	eax, [esp+3Ch+arg_10]
		mov	dword ptr [eax], 0

loc_6E43B946:				; CODE XREF: sub_6E43B840+FAj
		cmp	ecx, 40h
		jz	loc_6E43BB10

loc_6E43B94F:				; CODE XREF: sub_6E43B840+2D2j
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_6E43B980
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43B960:				; CODE XREF: sub_6E43B840+243j
		mov	[esp+3Ch+var_3C], eax
		call	EVP_CIPHER_flags
		test	eax, 200000h
		jnz	loc_6E43BA89
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43B980:				; CODE XREF: sub_6E43B840+1Bj
					; sub_6E43B840+7Cj ...
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B990:				; CODE XREF: sub_6E43B840+9Aj
		cmp	eax, 4
		jz	loc_6E43BB90
		jbe	short loc_6E43BA00
		cmp	eax, 10h
		jz	loc_6E43BB30
		cmp	eax, 20h
		jz	loc_6E43BB20
		cmp	eax, 8
		jnz	loc_6E43B910
		mov	eax, 3
		jmp	short loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B9C0:				; CODE XREF: sub_6E43B840+5Dj
		mov	eax, [esp+3Ch+arg_14]
		mov	dword ptr [eax], 0
		jmp	loc_6E43B8BA
; ---------------------------------------------------------------------------
		align 10h

loc_6E43B9D0:				; CODE XREF: sub_6E43B840+ABj
		cmp	eax, 1000h
		jz	loc_6E43BB70
		cmp	eax, 2000h
		jz	loc_6E43BB50
		cmp	eax, 800h
		jnz	loc_6E43B910
		mov	eax, 0Bh
		jmp	short loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BA00:				; CODE XREF: sub_6E43B840+159j
		cmp	eax, 1
		jz	loc_6E43BB40
		cmp	eax, 2
		jnz	loc_6E43B910
		mov	eax, 1
		mov	esi, esi
		lea	edi, [edi+0]

loc_6E43BA20:				; CODE XREF: sub_6E43B840+17Bj
					; sub_6E43B840+1B6j ...
		mov	eax, ds:dword_6E454060[eax*4]
		mov	[edi], eax

loc_6E43BA29:				; CODE XREF: sub_6E43B840+D6j
					; sub_6E43B840+2E7j
		mov	ecx, [ebp+18h]
		lea	eax, [ecx-1]
		cmp	eax, 1Fh
		ja	loc_6E43B920
		movsx	eax, ds:byte_6E44DA1F[ecx]
		cmp	eax, 5
		ja	loc_6E43B920
		mov	ecx, ds:dword_6E454038[eax*4]
		mov	edx, [esp+3Ch+arg_8]
		mov	[edx], ecx
		test	ebx, ebx
		jz	short loc_6E43BA62
		mov	edx, dword_6E449A24[eax*4]
		mov	[ebx], edx

loc_6E43BA62:				; CODE XREF: sub_6E43B840+217j
		mov	edx, [esp+3Ch+arg_10]
		test	edx, edx
		jz	short loc_6E43BA77
		mov	eax, ds:dword_6E454020[eax*4]
		mov	edx, [esp+3Ch+arg_10]
		mov	[edx], eax

loc_6E43BA77:				; CODE XREF: sub_6E43B840+228j
		mov	eax, [edi]
		test	eax, eax
		jz	loc_6E43B980
		test	ecx, ecx
		jz	loc_6E43B960

loc_6E43BA89:				; CODE XREF: sub_6E43B840+12Dj
		test	ebx, ebx
		jz	short loc_6E43BA97
		mov	eax, [ebx]
		test	eax, eax
		jz	loc_6E43B980

loc_6E43BA97:				; CODE XREF: sub_6E43B840+24Bj
		mov	eax, [esi]
		mov	ecx, eax
		sar	ecx, 8
		cmp	ecx, 3
		jz	short loc_6E43BAC0

loc_6E43BAA3:				; CODE XREF: sub_6E43B840+285j
					; sub_6E43B840+29Fj ...
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E43BAB0:				; CODE XREF: sub_6E43B840+CAj
		mov	eax, 7
		jmp	loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BAC0:				; CODE XREF: sub_6E43B840+261j
		cmp	eax, 300h
		jz	short loc_6E43BAA3
		mov	eax, [ebp+14h]
		cmp	eax, 4
		jz	loc_6E43BBC0

loc_6E43BAD3:				; CODE XREF: sub_6E43B840+3A1j
		cmp	eax, 40h
		jz	loc_6E43BBF0

loc_6E43BADC:				; CODE XREF: sub_6E43B840+3D1j
		add	eax, 0FFFFFF80h
		jnz	short loc_6E43BAA3
		cmp	dword ptr [ebp+18h], 2
		jnz	short loc_6E43BAA3
		mov	[esp+3Ch+var_3C], offset aAes256CbcHmacS ; "AES-256-CBC-HMAC-SHA1"
		call	EVP_get_cipherbyname
		test	eax, eax
		jz	short loc_6E43BAA3

loc_6E43BAF7:				; CODE XREF: sub_6E43B840+398j
					; sub_6E43B840+3C8j
		mov	[edi], eax
		mov	eax, [esp+3Ch+arg_8]
		mov	dword ptr [eax], 0
		jmp	short loc_6E43BAA3
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BB10:				; CODE XREF: sub_6E43B840+109j
		xor	ebx, ebx
		jmp	loc_6E43B94F
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BB20:				; CODE XREF: sub_6E43B840+167j
		call	EVP_enc_null
		mov	[edi], eax
		jmp	loc_6E43BA29
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BB30:				; CODE XREF: sub_6E43B840+15Ej
		mov	eax, 4
		jmp	loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BB40:				; CODE XREF: sub_6E43B840+1C3j
		xor	eax, eax
		jmp	loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BB50:				; CODE XREF: sub_6E43B840+1A0j
		mov	eax, 0Dh
		jmp	loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BB60:				; CODE XREF: sub_6E43B840+C1j
		mov	eax, 9
		jmp	loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BB70:				; CODE XREF: sub_6E43B840+195j
		mov	eax, 0Ch
		jmp	loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BB80:				; CODE XREF: sub_6E43B840+B6j
		mov	eax, 8
		jmp	loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BB90:				; CODE XREF: sub_6E43B840+153j
		mov	eax, 2
		jmp	loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BBA0:				; CODE XREF: sub_6E43B840+A5j
		mov	eax, 0Ah
		jmp	loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BBB0:				; CODE XREF: sub_6E43B840+94j
		mov	eax, 6
		jmp	loc_6E43BA20
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BBC0:				; CODE XREF: sub_6E43B840+28Dj
		cmp	dword ptr [ebp+18h], 1
		jnz	loc_6E43BAA3
		mov	[esp+3Ch+var_3C], offset aRc4HmacMd5 ; "RC4-HMAC-MD5"
		call	EVP_get_cipherbyname
		test	eax, eax
		jnz	loc_6E43BAF7
		mov	eax, [ebp+14h]
		jmp	loc_6E43BAD3
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BBF0:				; CODE XREF: sub_6E43B840+296j
		cmp	dword ptr [ebp+18h], 2
		jnz	loc_6E43BAA3
		mov	[esp+3Ch+var_3C], offset aAes128CbcHmacS ; "AES-128-CBC-HMAC-SHA1"
		call	EVP_get_cipherbyname
		test	eax, eax
		jnz	loc_6E43BAF7
		mov	eax, [ebp+14h]
		jmp	loc_6E43BADC
sub_6E43B840	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43BC20	proc near		; CODE XREF: sub_6E4118F0+17Ep
					; sub_6E41F5D0+53p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, [esp+arg_0]
		cmp	eax, 5
		ja	short loc_6E43BC70
		mov	edx, ds:dword_6E44E9A0[eax*4]
		mov	ecx, [esp+arg_4]
		mov	[ecx], edx
		test	edx, edx
		jnz	short loc_6E43BC50
		mov	eax, [esp+arg_8]
		mov	dword ptr [eax], 0
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BC50:				; CODE XREF: sub_6E43BC20+18j
		mov	eax, ds:dword_6E454038[eax*4]
		mov	ecx, [esp+arg_8]
		mov	[ecx], eax
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43BC70:				; CODE XREF: sub_6E43BC20+7j
		xor	eax, eax
		retn
sub_6E43BC20	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43BC80	proc near		; CODE XREF: SSL_CTX_set_ssl_version+2Cp
					; SSL_CTX_set_cipher_list+22p ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_2C], 0
		mov	[esp+6Ch+var_28], 0
		mov	ebp, [esp+6Ch+arg_C]
		test	ebp, ebp
		jz	loc_6E43C6D1
		mov	edi, [esp+6Ch+arg_4]
		test	edi, edi
		jz	loc_6E43C6D1
		mov	ebx, [esp+6Ch+arg_8]
		test	ebx, ebx
		jz	loc_6E43C6D1
		mov	[esp+6Ch+var_24], 0
		mov	[esp+6Ch+var_20], 0
		mov	[esp+6Ch+var_64], 0FFFFFFFFh
		mov	[esp+6Ch+var_68], offset aGost94 ; "gost94"
		lea	ebx, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_6C], ebx
		call	EVP_PKEY_asn1_find_str
		test	eax, eax
		jz	short loc_6E43BD27
		mov	[esp+6Ch+var_58], eax
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 0
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_asn1_get0_info
		test	eax, eax
		jle	loc_6E43C61B

loc_6E43BD27:				; CODE XREF: sub_6E43BC80+6Dj
					; sub_6E43BC80+9A3j
		mov	eax, [esp+6Ch+var_24]
		test	eax, eax
		jz	short loc_6E43BD37
		mov	[esp+6Ch+var_6C], eax
		call	ENGINE_finish

loc_6E43BD37:				; CODE XREF: sub_6E43BC80+ADj
		cmp	[esp+6Ch+var_20], 1
		sbb	eax, eax
		mov	[esp+6Ch+var_44], eax
		and	[esp+6Ch+var_44], 100h
		add	[esp+6Ch+var_44], 28h
		mov	[esp+6Ch+var_24], 0
		mov	[esp+6Ch+var_20], 0
		mov	[esp+6Ch+var_64], 0FFFFFFFFh
		mov	[esp+6Ch+var_68], offset aGost2001 ; "gost2001"
		mov	[esp+6Ch+var_6C], ebx
		call	EVP_PKEY_asn1_find_str
		test	eax, eax
		jz	short loc_6E43BDB3
		mov	[esp+6Ch+var_58], eax
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 0
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_6C], eax
		call	EVP_PKEY_asn1_get0_info
		test	eax, eax
		jle	loc_6E43C60E

loc_6E43BDB3:				; CODE XREF: sub_6E43BC80+F9j
					; sub_6E43BC80+996j
		mov	eax, [esp+6Ch+var_24]
		test	eax, eax
		jz	short loc_6E43BDC3
		mov	[esp+6Ch+var_6C], eax
		call	ENGINE_finish

loc_6E43BDC3:				; CODE XREF: sub_6E43BC80+139j
		mov	ecx, [esp+6Ch+var_20]
		test	ecx, ecx
		jz	loc_6E43C569
		mov	eax, [esp+6Ch+var_44]
		and	eax, 300h
		cmp	eax, 300h
		jz	loc_6E43C585

loc_6E43BDE3:				; CODE XREF: sub_6E43BC80+8FFj
		mov	[esp+6Ch+var_30], 0FFFFFFE9h
		mov	edi, 16h

loc_6E43BDF0:				; CODE XREF: sub_6E43BC80+912j
		xor	eax, eax
		mov	ebx, ds:dword_6E454060
		test	ebx, ebx
		setz	al
		cmp	ds:dword_6E454064, 1
		sbb	ebx, ebx
		mov	[esp+6Ch+var_48], ebx
		and	[esp+6Ch+var_48], 2
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E454068, 1
		sbb	eax, eax
		and	eax, 4
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E45406C, 1
		sbb	eax, eax
		and	eax, 8
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E454070, 1
		sbb	eax, eax
		and	eax, 10h
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E454078, 1
		sbb	eax, eax
		and	eax, 40h
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E45407C, 1
		sbb	eax, eax
		and	eax, 80h
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E454090, 1
		sbb	eax, eax
		and	eax, 1000h
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E454094, 1
		sbb	eax, eax
		and	eax, 2000h
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E454080, 1
		sbb	eax, eax
		and	eax, 100h
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E454084, 1
		sbb	eax, eax
		and	eax, 200h
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E454088, 1
		sbb	eax, eax
		and	eax, 400h
		or	[esp+6Ch+var_48], eax
		cmp	ds:dword_6E45408C, 1
		sbb	eax, eax
		and	eax, 800h
		or	[esp+6Ch+var_48], eax
		xor	edx, edx
		mov	ebp, ds:dword_6E454038
		test	ebp, ebp
		setz	dl
		cmp	ds:dword_6E45403C, 1
		sbb	eax, eax
		and	eax, 2
		or	eax, edx
		cmp	ds:dword_6E454048, 1
		sbb	edx, edx
		and	edx, 10h
		or	eax, edx
		cmp	ds:dword_6E45404C, 1
		sbb	edx, edx
		and	edx, 20h
		or	eax, edx
		cmp	ds:dword_6E454040, 1
		sbb	edx, edx
		and	edx, 4
		or	eax, edx
		mov	edx, ds:dword_6E454044
		test	edx, edx
		jz	loc_6E43C597
		mov	ecx, dword_6E449A30
		test	ecx, ecx
		jz	loc_6E43C597
		xor	edx, edx

loc_6E43BF34:				; CODE XREF: sub_6E43BC80+91Cj
		or	eax, edx
		mov	[esp+6Ch+var_34], eax
		call	dword ptr [esi+54h]
		mov	ebx, eax
		mov	[esp+6Ch+var_40], eax
		mov	[esp+6Ch+var_64], 584h
		mov	[esp+6Ch+var_68], offset aSsl_ciph_c ; "ssl_ciph.c"
		lea	eax, [eax+eax*4]
		shl	eax, 2
		mov	[esp+6Ch+var_6C], eax
		call	CRYPTO_malloc
		mov	[esp+6Ch+var_3C], eax
		test	eax, eax
		jz	loc_6E43C728
		test	ebx, ebx
		jle	loc_6E43C67E
		xor	ebx, ebx
		xor	ebp, ebp
		mov	[esp+6Ch+var_38], ebx
		mov	ebx, esi
		mov	esi, [esp+6Ch+var_40]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43BF90:				; CODE XREF: sub_6E43BC80+373j
		mov	eax, [ebx+58h]
		mov	[esp+6Ch+var_6C], ebp
		call	eax
		test	eax, eax
		jz	short loc_6E43BFF0
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6E43BFF0
		test	[eax+0Ch], edi
		jnz	short loc_6E43BFF0
		mov	ecx, [esp+6Ch+var_44]
		test	[eax+10h], ecx
		jnz	short loc_6E43BFF0
		mov	ecx, [esp+6Ch+var_48]
		test	[eax+14h], ecx
		jnz	short loc_6E43BFF0
		mov	ecx, [esp+6Ch+var_34]
		test	[eax+18h], ecx
		jnz	short loc_6E43BFF0
		mov	ecx, [esp+6Ch+var_38]
		lea	ecx, [ecx+ecx*4]
		mov	edx, [esp+6Ch+var_3C]
		lea	ecx, [edx+ecx*4]
		mov	[ecx], eax
		mov	dword ptr [ecx+0Ch], 0
		mov	dword ptr [ecx+10h], 0
		mov	dword ptr [ecx+4], 0
		inc	[esp+6Ch+var_38]
		nop
		lea	esi, [esi+0]

loc_6E43BFF0:				; CODE XREF: sub_6E43BC80+31Aj
					; sub_6E43BC80+320j ...
		inc	ebp
		cmp	ebp, esi
		jnz	short loc_6E43BF90
		mov	ebx, [esp+6Ch+var_38]
		test	ebx, ebx
		jz	loc_6E43C67E
		mov	edi, [esp+6Ch+var_3C]
		mov	eax, edi
		mov	dword ptr [edi+10h], 0
		cmp	ebx, 1
		jz	loc_6E43C605
		add	eax, 14h
		mov	[edi+0Ch], eax
		lea	esi, [ebx-1]
		cmp	esi, 1
		jz	short loc_6E43C051
		mov	eax, [esp+6Ch+var_3C]
		add	eax, 28h
		mov	edx, 1
		jmp	short loc_6E43C040
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C040:				; CODE XREF: sub_6E43BC80+3B1j
					; sub_6E43BC80+3CFj
		lea	ecx, [eax-28h]
		mov	[eax-4], ecx
		mov	[eax-8], eax
		inc	edx
		add	eax, 14h
		cmp	edx, esi
		jnz	short loc_6E43C040

loc_6E43C051:				; CODE XREF: sub_6E43BC80+3A3j
		lea	eax, [ebx+ebx*4]
		shl	eax, 2
		mov	edi, [esp+6Ch+var_3C]
		lea	ebx, [edi+eax-14h]
		lea	eax, [edi+eax-28h]
		mov	[ebx+10h], eax
		mov	eax, edi

loc_6E43C068:				; CODE XREF: sub_6E43BC80+989j
		mov	dword ptr [ebx+0Ch], 0
		mov	[esp+6Ch+var_2C], eax
		mov	[esp+6Ch+var_28], ebx
		mov	edx, eax

loc_6E43C079:				; CODE XREF: sub_6E43BC80+A0Cj
		mov	eax, ebx
		mov	esi, edx
		jmp	short loc_6E43C08A
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C080:				; CODE XREF: sub_6E43BC80+413j
					; sub_6E43BC80+41Aj
		cmp	ebx, edx
		jz	short loc_6E43C0E0

loc_6E43C084:				; CODE XREF: sub_6E43BC80+458j
		test	ecx, ecx
		jz	short loc_6E43C0E0
		mov	edx, ecx

loc_6E43C08A:				; CODE XREF: sub_6E43BC80+3FDj
		mov	ecx, [edx+0Ch]
		mov	edi, [edx]
		test	byte ptr [edi+0Ch], 80h
		jz	short loc_6E43C080
		mov	ebp, [edx+4]
		test	ebp, ebp
		jnz	short loc_6E43C080
		cmp	edx, eax
		jz	short loc_6E43C0CF
		cmp	esi, edx
		jz	loc_6E43C6EF
		mov	edi, [edx+10h]
		test	edi, edi
		jz	loc_6E43C6FC

loc_6E43C0B3:				; CODE XREF: sub_6E43BC80+A76j
		mov	[edi+0Ch], ecx
		mov	ebp, [edx+0Ch]

loc_6E43C0B9:				; CODE XREF: sub_6E43BC80+A7Ej
		test	ebp, ebp
		jz	short loc_6E43C0C0
		mov	[ebp+10h], edi

loc_6E43C0C0:				; CODE XREF: sub_6E43BC80+43Bj
		mov	[eax+0Ch], edx
		mov	[edx+10h], eax
		mov	dword ptr [edx+0Ch], 0
		mov	eax, edx

loc_6E43C0CF:				; CODE XREF: sub_6E43BC80+41Ej
		mov	dword ptr [edx+4], 1
		cmp	ebx, edx
		jnz	short loc_6E43C084
		lea	esi, [esi+0]

loc_6E43C0E0:				; CODE XREF: sub_6E43BC80+402j
					; sub_6E43BC80+406j
		mov	ecx, esi
		mov	[esp+6Ch+var_2C], esi
		mov	[esp+6Ch+var_28], eax
		mov	ebx, eax
		test	esi, esi
		jnz	short loc_6E43C10A
		jmp	short loc_6E43C160
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C100:				; CODE XREF: sub_6E43BC80+493j
					; sub_6E43BC80+49Aj
		cmp	ecx, eax
		jz	short loc_6E43C160

loc_6E43C104:				; CODE XREF: sub_6E43BC80+4D8j
		test	edx, edx
		jz	short loc_6E43C160
		mov	eax, edx

loc_6E43C10A:				; CODE XREF: sub_6E43BC80+46Ej
		mov	edx, [eax+10h]
		mov	edi, [eax]
		test	byte ptr [edi+0Ch], 80h
		jz	short loc_6E43C100
		mov	edi, [eax+4]
		test	edi, edi
		jz	short loc_6E43C100
		cmp	eax, esi
		jz	short loc_6E43C14F
		cmp	ebx, eax
		jz	loc_6E43C6DB
		mov	edi, [eax+0Ch]
		test	edi, edi
		jz	loc_6E43C6E8

loc_6E43C133:				; CODE XREF: sub_6E43BC80+A62j
		mov	[edi+10h], edx
		mov	ebp, [eax+10h]

loc_6E43C139:				; CODE XREF: sub_6E43BC80+A6Aj
		test	ebp, ebp
		jz	short loc_6E43C140
		mov	[ebp+0Ch], edi

loc_6E43C140:				; CODE XREF: sub_6E43BC80+4BBj
		mov	[esi+10h], eax
		mov	[eax+0Ch], esi
		mov	dword ptr [eax+10h], 0
		mov	esi, eax

loc_6E43C14F:				; CODE XREF: sub_6E43BC80+49Ej
		mov	dword ptr [eax+4], 0
		cmp	ecx, eax
		jnz	short loc_6E43C104
		lea	esi, [esi+0]

loc_6E43C160:				; CODE XREF: sub_6E43BC80+470j
					; sub_6E43BC80+482j ...
		mov	[esp+6Ch+var_2C], esi
		mov	[esp+6Ch+var_28], ebx
		lea	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_60], eax
		lea	eax, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0FFFFFFFFh
		mov	[esp+6Ch+var_6C], 1
		xor	ecx, ecx
		mov	edx, 30C0h
		xor	eax, eax
		call	sub_6E43A920
		mov	eax, [esp+6Ch+var_2C]
		mov	ecx, [esp+6Ch+var_28]
		test	ecx, ecx
		jz	loc_6E43C70A
		mov	ebx, ecx
		test	eax, eax
		jz	loc_6E43C713
		mov	ebp, eax
		jmp	short loc_6E43C1CA
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C1C0:				; CODE XREF: sub_6E43BC80+552j
		cmp	eax, ecx
		jz	short loc_6E43C220

loc_6E43C1C4:				; CODE XREF: sub_6E43BC80+590j
		test	edx, edx
		jz	short loc_6E43C220
		mov	eax, edx

loc_6E43C1CA:				; CODE XREF: sub_6E43BC80+531j
		mov	edx, [eax+0Ch]
		mov	esi, [eax+4]
		test	esi, esi
		jnz	short loc_6E43C1C0
		cmp	ebx, eax
		jz	short loc_6E43C207
		cmp	ebp, eax
		jz	loc_6E43C5FE

loc_6E43C1E0:				; CODE XREF: sub_6E43BC80+980j
		mov	esi, [eax+10h]
		test	esi, esi
		jz	loc_6E43C5F7
		mov	[esi+0Ch], edx
		mov	edi, [eax+0Ch]

loc_6E43C1F1:				; CODE XREF: sub_6E43BC80+979j
		test	edi, edi
		jz	short loc_6E43C1F8
		mov	[edi+10h], esi

loc_6E43C1F8:				; CODE XREF: sub_6E43BC80+573j
		mov	[ebx+0Ch], eax
		mov	[eax+10h], ebx
		mov	dword ptr [eax+0Ch], 0
		mov	ebx, eax

loc_6E43C207:				; CODE XREF: sub_6E43BC80+556j
		mov	dword ptr [eax+4], 1
		cmp	eax, ecx
		jnz	short loc_6E43C1C4
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43C220:				; CODE XREF: sub_6E43BC80+542j
					; sub_6E43BC80+546j ...
		mov	[esp+6Ch+var_2C], ebp
		mov	[esp+6Ch+var_28], ebx
		lea	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_60], eax
		lea	eax, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0FFFFFFFFh
		mov	[esp+6Ch+var_6C], 4
		mov	ecx, 1
		xor	edx, edx
		xor	eax, eax
		call	sub_6E43A920
		lea	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_60], eax
		lea	eax, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0FFFFFFFFh
		mov	[esp+6Ch+var_6C], 4
		xor	ecx, ecx
		xor	edx, edx
		mov	eax, 4
		call	sub_6E43A920
		lea	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_60], eax
		lea	eax, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0FFFFFFFFh
		mov	[esp+6Ch+var_6C], 4
		xor	ecx, ecx
		xor	edx, edx
		mov	eax, 10h
		call	sub_6E43A920
		lea	ecx, [esp+6Ch+var_28]
		lea	edx, [esp+6Ch+var_2C]
		mov	eax, 1
		call	sub_6E43A7B0
		lea	ecx, [esp+6Ch+var_28]
		lea	edx, [esp+6Ch+var_2C]
		mov	eax, 100h
		call	sub_6E43A7B0
		lea	ecx, [esp+6Ch+var_28]
		lea	edx, [esp+6Ch+var_2C]
		mov	eax, 10h
		call	sub_6E43A7B0
		lea	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_60], eax
		lea	eax, [esp+6Ch+var_2C]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], 0FFFFFFFFh
		mov	[esp+6Ch+var_6C], 4
		xor	ecx, ecx
		mov	edx, 4
		xor	eax, eax
		call	sub_6E43A920
		lea	edx, [esp+6Ch+var_28]
		lea	eax, [esp+6Ch+var_2C]
		call	sub_6E43ABD0
		test	eax, eax
		jz	loc_6E43C5E1
		mov	ecx, [esp+6Ch+var_2C]
		mov	esi, [esp+6Ch+var_28]
		test	ecx, ecx
		jz	loc_6E43C721
		test	esi, esi
		jz	loc_6E43C71A
		mov	eax, esi
		mov	ebx, ecx
		jmp	short loc_6E43C35A
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C350:				; CODE XREF: sub_6E43BC80+6E2j
		cmp	ecx, eax
		jz	short loc_6E43C3B0

loc_6E43C354:				; CODE XREF: sub_6E43BC80+720j
		test	edx, edx
		jz	short loc_6E43C3B0
		mov	eax, edx

loc_6E43C35A:				; CODE XREF: sub_6E43BC80+6C3j
		mov	edx, [eax+10h]
		mov	edi, [eax+4]
		test	edi, edi
		jz	short loc_6E43C350
		cmp	ebx, eax
		jz	short loc_6E43C397
		cmp	esi, eax
		jz	loc_6E43C66A
		mov	edi, [eax+0Ch]
		test	edi, edi
		jz	loc_6E43C677

loc_6E43C37B:				; CODE XREF: sub_6E43BC80+9F1j
		mov	[edi+10h], edx
		mov	ebp, [eax+10h]

loc_6E43C381:				; CODE XREF: sub_6E43BC80+9F9j
		test	ebp, ebp
		jz	short loc_6E43C388
		mov	[ebp+0Ch], edi

loc_6E43C388:				; CODE XREF: sub_6E43BC80+703j
		mov	[ebx+10h], eax
		mov	[eax+0Ch], ebx
		mov	dword ptr [eax+10h], 0
		mov	ebx, eax

loc_6E43C397:				; CODE XREF: sub_6E43BC80+6E6j
		mov	dword ptr [eax+4], 0
		cmp	ecx, eax
		jnz	short loc_6E43C354
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43C3B0:				; CODE XREF: sub_6E43BC80+6D2j
					; sub_6E43BC80+6D6j ...
		mov	[esp+6Ch+var_2C], ebx
		mov	[esp+6Ch+var_28], esi
		mov	[esp+6Ch+var_64], 5D5h
		mov	[esp+6Ch+var_68], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	eax, [esp+6Ch+var_40]
		lea	eax, ds:12Ch[eax*4]
		mov	[esp+6Ch+var_6C], eax
		call	CRYPTO_malloc
		mov	[esp+6Ch+var_38], eax
		test	eax, eax
		jz	loc_6E43C699
		mov	eax, [esp+6Ch+var_2C]
		mov	ebp, [esp+6Ch+var_44]
		not	ebp
		mov	edi, [esp+6Ch+var_48]
		not	edi
		mov	[esp+6Ch+var_44], edi
		mov	edi, [esp+6Ch+var_34]
		not	edi
		mov	[esp+6Ch+var_40], edi
		mov	edi, [esp+6Ch+var_38]
		test	eax, eax
		jz	short loc_6E43C41E
		lea	esi, [esi+0]

loc_6E43C410:				; CODE XREF: sub_6E43BC80+79Cj
		mov	edx, [eax]
		mov	[edi], edx
		add	edi, 4
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_6E43C410

loc_6E43C41E:				; CODE XREF: sub_6E43BC80+78Bj
		mov	eax, offset dword_6E44DBCC
		mov	[esp+6Ch+var_48], ebp
		mov	ebp, [esp+6Ch+var_30]
		nop
		lea	esi, [esi+0]

loc_6E43C430:				; CODE XREF: sub_6E43BC80+7F1j
		mov	edx, [eax]
		mov	ecx, [eax+4]
		mov	ebx, [eax+8]
		mov	esi, [eax+0Ch]
		test	edx, edx
		jz	short loc_6E43C443
		test	edx, ebp
		jz	short loc_6E43C469

loc_6E43C443:				; CODE XREF: sub_6E43BC80+7BDj
		test	ecx, ecx
		jz	short loc_6E43C44D
		test	[esp+6Ch+var_48], ecx
		jz	short loc_6E43C469

loc_6E43C44D:				; CODE XREF: sub_6E43BC80+7C5j
		test	ebx, ebx
		jz	short loc_6E43C457
		test	[esp+6Ch+var_44], ebx
		jz	short loc_6E43C469

loc_6E43C457:				; CODE XREF: sub_6E43BC80+7CFj
		test	esi, esi
		jz	short loc_6E43C461
		test	[esp+6Ch+var_40], esi
		jz	short loc_6E43C469

loc_6E43C461:				; CODE XREF: sub_6E43BC80+7D9j
		lea	edx, [eax-0Ch]
		mov	[edi], edx
		add	edi, 4

loc_6E43C469:				; CODE XREF: sub_6E43BC80+7C1j
					; sub_6E43BC80+7CBj ...
		add	eax, 30h
		cmp	eax, offset dword_6E44E9AC
		jnz	short loc_6E43C430
		mov	dword ptr [edi], 0
		mov	edi, offset aDefault ; "DEFAULT"
		mov	ecx, 7
		mov	esi, [esp+6Ch+arg_C]
		repe cmpsb
		jz	loc_6E43C5A1

loc_6E43C48F:				; CODE XREF: sub_6E43BC80+94Fj
		mov	eax, [esp+6Ch+arg_C]
		cmp	byte ptr [eax],	0
		jnz	loc_6E43C628
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_6C], eax
		call	CRYPTO_free

loc_6E43C4A8:				; CODE XREF: sub_6E43BC80+9CCj
		call	sk_new_null
		mov	esi, eax
		test	eax, eax
		jz	loc_6E43C5E1
		mov	ebx, [esp+6Ch+var_2C]
		test	ebx, ebx
		jnz	short loc_6E43C4D7
		jmp	short loc_6E43C4F3
; ---------------------------------------------------------------------------
		jmp	short loc_6E43C4D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C4D0:				; CODE XREF: sub_6E43BC80+841j
					; sub_6E43BC80+85Cj
		mov	ebx, [ebx+0Ch]
		test	ebx, ebx
		jz	short loc_6E43C4F3

loc_6E43C4D7:				; CODE XREF: sub_6E43BC80+83Dj
					; sub_6E43BC80+871j
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_6E43C4D0
		mov	eax, [ebx]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], esi
		call	sk_push
		mov	ebx, [ebx+0Ch]
		test	ebx, ebx
		jnz	short loc_6E43C4D7

loc_6E43C4F3:				; CODE XREF: sub_6E43BC80+83Fj
					; sub_6E43BC80+855j
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_6C], eax
		call	CRYPTO_free
		mov	[esp+6Ch+var_6C], esi
		call	sk_dup
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E43C735
		mov	eax, [esp+6Ch+arg_4]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6E43C523
		mov	[esp+6Ch+var_6C], eax
		call	sk_free

loc_6E43C523:				; CODE XREF: sub_6E43BC80+899j
		mov	eax, [esp+6Ch+arg_4]
		mov	[eax], esi
		mov	eax, [esp+6Ch+arg_8]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6E43C53B
		mov	[esp+6Ch+var_6C], eax
		call	sk_free

loc_6E43C53B:				; CODE XREF: sub_6E43BC80+8B1j
		mov	eax, [esp+6Ch+arg_8]
		mov	[eax], ebx
		mov	[esp+6Ch+var_68], offset loc_6E431E10
		mov	[esp+6Ch+var_6C], ebx
		call	sk_set_cmp_func
		mov	eax, [esp+6Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+6Ch+var_6C], eax
		call	sk_sort
		mov	eax, esi

loc_6E43C561:				; CODE XREF: sub_6E43BC80+ABFj
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E43C569:				; CODE XREF: sub_6E43BC80+149j
		or	[esp+6Ch+var_44], 200h
		mov	eax, [esp+6Ch+var_44]
		and	eax, 300h
		cmp	eax, 300h
		jnz	loc_6E43BDE3

loc_6E43C585:				; CODE XREF: sub_6E43BC80+15Dj
		mov	[esp+6Ch+var_30], 0FFFFFDE9h
		mov	edi, 216h
		jmp	loc_6E43BDF0
; ---------------------------------------------------------------------------

loc_6E43C597:				; CODE XREF: sub_6E43BC80+29Ej
					; sub_6E43BC80+2ACj
		mov	edx, 8
		jmp	loc_6E43BF34
; ---------------------------------------------------------------------------

loc_6E43C5A1:				; CODE XREF: sub_6E43BC80+809j
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_6C], eax
		lea	ecx, [esp+6Ch+var_28]
		lea	edx, [esp+6Ch+var_2C]
		mov	eax, offset aAllExportAnu_0 ; "ALL:!EXPORT:!aNULL:!eNULL:!SSLv2"
		call	sub_6E43AE10
		mov	edi, [esp+6Ch+arg_C]
		cmp	byte ptr [edi+7], 3Ah
		jz	loc_6E43C660
		add	[esp+6Ch+arg_C], 7

loc_6E43C5CD:				; CODE XREF: sub_6E43BC80+9E5j
		test	eax, eax
		jnz	loc_6E43C48F
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_6C], eax
		call	CRYPTO_free

loc_6E43C5E1:				; CODE XREF: sub_6E43BC80+6A1j
					; sub_6E43BC80+831j ...
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_6C], eax
		call	CRYPTO_free
		xor	eax, eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E43C5F7:				; CODE XREF: sub_6E43BC80+565j
		mov	edi, edx
		jmp	loc_6E43C1F1
; ---------------------------------------------------------------------------

loc_6E43C5FE:				; CODE XREF: sub_6E43BC80+55Aj
		mov	ebp, edx
		jmp	loc_6E43C1E0
; ---------------------------------------------------------------------------

loc_6E43C605:				; CODE XREF: sub_6E43BC80+391j
		mov	ebx, edi
		mov	eax, edi
		jmp	loc_6E43C068
; ---------------------------------------------------------------------------

loc_6E43C60E:				; CODE XREF: sub_6E43BC80+12Dj
		mov	[esp+6Ch+var_20], 0
		jmp	loc_6E43BDB3
; ---------------------------------------------------------------------------

loc_6E43C61B:				; CODE XREF: sub_6E43BC80+A1j
		mov	[esp+6Ch+var_20], 0
		jmp	loc_6E43BD27
; ---------------------------------------------------------------------------

loc_6E43C628:				; CODE XREF: sub_6E43BC80+816j
		mov	edi, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_6C], edi
		lea	ecx, [esp+6Ch+var_28]
		lea	edx, [esp+6Ch+var_2C]
		mov	eax, [esp+6Ch+arg_C]
		call	sub_6E43AE10
		mov	ebx, eax
		mov	[esp+6Ch+var_6C], edi
		call	CRYPTO_free
		test	ebx, ebx
		jnz	loc_6E43C4A8
		jmp	short loc_6E43C5E1
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C660:				; CODE XREF: sub_6E43BC80+942j
		add	[esp+6Ch+arg_C], 8
		jmp	loc_6E43C5CD
; ---------------------------------------------------------------------------

loc_6E43C66A:				; CODE XREF: sub_6E43BC80+6EAj
		mov	esi, edx
		mov	edi, [eax+0Ch]
		test	edi, edi
		jnz	loc_6E43C37B

loc_6E43C677:				; CODE XREF: sub_6E43BC80+6F5j
		mov	ebp, edx
		jmp	loc_6E43C381
; ---------------------------------------------------------------------------

loc_6E43C67E:				; CODE XREF: sub_6E43BC80+2EFj
					; sub_6E43BC80+37Bj
		mov	ebx, [esp+6Ch+var_28]
		mov	edx, [esp+6Ch+var_2C]
		test	ebx, ebx
		jz	short loc_6E43C703
		test	edx, edx
		jnz	loc_6E43C079
		xor	esi, esi
		jmp	loc_6E43C160
; ---------------------------------------------------------------------------

loc_6E43C699:				; CODE XREF: sub_6E43BC80+761j
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_6C], eax
		call	CRYPTO_free
		mov	[esp+6Ch+var_5C], 5D8h

loc_6E43C6AD:				; CODE XREF: sub_6E43BC80+AB0j
		mov	[esp+6Ch+var_60], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+6Ch+var_64], 41h
		mov	[esp+6Ch+var_68], 0A6h
		mov	[esp+6Ch+var_6C], 14h
		call	ERR_put_error

loc_6E43C6D1:				; CODE XREF: sub_6E43BC80+21j
					; sub_6E43BC80+2Dj ...
		xor	eax, eax
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E43C6DB:				; CODE XREF: sub_6E43BC80+4A2j
		mov	ebx, edx
		mov	edi, [eax+0Ch]
		test	edi, edi
		jnz	loc_6E43C133

loc_6E43C6E8:				; CODE XREF: sub_6E43BC80+4ADj
		mov	ebp, edx
		jmp	loc_6E43C139
; ---------------------------------------------------------------------------

loc_6E43C6EF:				; CODE XREF: sub_6E43BC80+422j
		mov	esi, ecx
		mov	edi, [edx+10h]
		test	edi, edi
		jnz	loc_6E43C0B3

loc_6E43C6FC:				; CODE XREF: sub_6E43BC80+42Dj
		mov	ebp, ecx
		jmp	loc_6E43C0B9
; ---------------------------------------------------------------------------

loc_6E43C703:				; CODE XREF: sub_6E43BC80+A08j
		mov	esi, edx
		jmp	loc_6E43C160
; ---------------------------------------------------------------------------

loc_6E43C70A:				; CODE XREF: sub_6E43BC80+51Fj
		xor	ebx, ebx
		mov	ebp, eax
		jmp	loc_6E43C220
; ---------------------------------------------------------------------------

loc_6E43C713:				; CODE XREF: sub_6E43BC80+529j
		xor	ebp, ebp
		jmp	loc_6E43C220
; ---------------------------------------------------------------------------

loc_6E43C71A:				; CODE XREF: sub_6E43BC80+6B9j
		mov	ebx, ecx
		jmp	loc_6E43C3B0
; ---------------------------------------------------------------------------

loc_6E43C721:				; CODE XREF: sub_6E43BC80+6B1j
		xor	ebx, ebx
		jmp	loc_6E43C3B0
; ---------------------------------------------------------------------------

loc_6E43C728:				; CODE XREF: sub_6E43BC80+2E7j
		mov	[esp+6Ch+var_5C], 586h
		jmp	loc_6E43C6AD
; ---------------------------------------------------------------------------

loc_6E43C735:				; CODE XREF: sub_6E43BC80+88Bj
		mov	[esp+6Ch+var_6C], esi
		call	sk_free
		xor	eax, eax
		jmp	loc_6E43C561
sub_6E43BC80	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   2. SSL_CIPHER_description

; =============== S U B	R O U T	I N E =======================================


		public SSL_CIPHER_description
SSL_CIPHER_description proc near

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_0]
		mov	edx, [ebx+0Ch]
		mov	ecx, [ebx+10h]
		mov	eax, [ebx+14h]
		mov	esi, [ebx+18h]
		mov	edi, [ebx+1Ch]
		mov	ebp, [ebx+24h]
		mov	[esp+5Ch+var_20], ebp
		mov	ebp, [ebx+20h]
		and	ebp, 2
		mov	[esp+5Ch+var_2C], ebp
		test	byte ptr [ebx+20h], 8
		jz	short loc_6E43C7C0
		mov	ebp, 200h
		mov	[esp+5Ch+var_24], 5

loc_6E43C78E:				; CODE XREF: SSL_CIPHER_description+208j
		cmp	[esp+5Ch+var_2C], 0
		jz	short loc_6E43C7DD

loc_6E43C795:				; CODE XREF: SSL_CIPHER_description+8Bj
		mov	[esp+5Ch+var_28], offset aExport ; " export"
		test	edi, 1
		jnz	short loc_6E43C7ED

loc_6E43C7A5:				; CODE XREF: SSL_CIPHER_description+9Bj
		test	edi, 2
		jz	loc_6E43C900
		mov	edi, offset aSslv3_0 ; "SSLv3"
		jmp	short loc_6E43C7F2
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C7C0:				; CODE XREF: SSL_CIPHER_description+2Fj
		mov	ebp, 400h
		cmp	eax, 1
		jz	loc_6E43C950
		mov	[esp+5Ch+var_24], 7
		cmp	[esp+5Ch+var_2C], 0
		jnz	short loc_6E43C795

loc_6E43C7DD:				; CODE XREF: SSL_CIPHER_description+43j
		mov	[esp+5Ch+var_28], offset byte_6E44D74D
		test	edi, 1
		jz	short loc_6E43C7A5

loc_6E43C7ED:				; CODE XREF: SSL_CIPHER_description+53j
		mov	edi, offset aSslv2_0 ; "SSLv2"

loc_6E43C7F2:				; CODE XREF: SSL_CIPHER_description+66j
					; SSL_CIPHER_description+1BAj ...
		cmp	edx, 20h
		jz	loc_6E43CBF0
		ja	loc_6E43C8D0
		cmp	edx, 4
		jz	loc_6E43CBE0
		ja	loc_6E43C910
		cmp	edx, 1
		jz	loc_6E43CC50
		cmp	edx, 2
		jnz	loc_6E43CC40
		mov	edx, offset aDhRsa ; "DH/RSA"
		mov	esi, esi
		lea	edi, [edi+0]

loc_6E43C830:				; CODE XREF: SSL_CIPHER_description+1ABj
					; SSL_CIPHER_description+1D7j ...
		cmp	ecx, 20h
		jz	loc_6E43CBC0
		ja	loc_6E43CA70
		cmp	ecx, 4
		jz	loc_6E43CC10
		ja	loc_6E43CB30
		cmp	ecx, 1
		jz	loc_6E43CC30
		cmp	ecx, 2
		jnz	loc_6E43CC20
		mov	ebp, offset aDss ; "DSS"
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43C870:				; CODE XREF: SSL_CIPHER_description+349j
					; SSL_CIPHER_description+3F7j ...
		cmp	eax, 40h
		jz	loc_6E43CD40
		jbe	loc_6E43CAA0
		cmp	eax, 400h
		jz	loc_6E43CDE0
		ja	loc_6E43CB00
		cmp	eax, 100h
		jz	loc_6E43CD30
		cmp	eax, 200h
		jz	loc_6E43CD20
		add	eax, 0FFFFFF80h
		jz	loc_6E43CA60

loc_6E43C8AF:				; CODE XREF: SSL_CIPHER_description+374j
					; SSL_CIPHER_description+3CBj ...
		mov	ecx, offset aUnknown_0 ; "unknown"
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43C8C0:				; CODE XREF: SSL_CIPHER_description+315j
					; SSL_CIPHER_description+396j ...
		cmp	esi, 40h	; switch 65 cases
		ja	loc_6E43CA50	; jumptable 6E43C8C9 default case
		jmp	ds:off_6E44D908[esi*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6E43C8D0:				; CODE XREF: SSL_CIPHER_description+ABj
		cmp	edx, 100h
		jz	loc_6E43CC80
		jbe	short loc_6E43C930
		cmp	edx, 200h
		jz	loc_6E43CC00
		cmp	edx, 400h
		jnz	loc_6E43CC40
		mov	edx, offset aSrp ; "SRP"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------

loc_6E43C900:				; CODE XREF: SSL_CIPHER_description+5Bj
		and	edi, 4
		jz	short loc_6E43C960
		mov	edi, offset aTlsv1_2_0 ; "TLSv1.2"
		jmp	loc_6E43C7F2
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C910:				; CODE XREF: SSL_CIPHER_description+BAj
		cmp	edx, 8
		jz	loc_6E43CB90
		cmp	edx, 10h
		jnz	loc_6E43CC40
		mov	edx, offset aKrb5 ; "KRB5"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C930:				; CODE XREF: SSL_CIPHER_description+18Cj
		cmp	edx, 40h
		jz	loc_6E43CC90
		add	edx, 0FFFFFF80h
		jnz	loc_6E43CC40
		mov	edx, offset aEcdh ; "ECDH"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C950:				; CODE XREF: SSL_CIPHER_description+78j
		mov	[esp+5Ch+var_24], 8
		jmp	loc_6E43C78E
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C960:				; CODE XREF: SSL_CIPHER_description+1B3j
		mov	edi, offset aUnknown_0 ; "unknown"
		jmp	loc_6E43C7F2
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C970:				; CODE XREF: SSL_CIPHER_description+179j
					; DATA XREF: .rdata:off_6E44D908o
		mov	esi, offset aSha1 ; jumptable 6E43C8C9 case 2
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E43C980:				; CODE XREF: SSL_CIPHER_description+2A5j
					; SSL_CIPHER_description+2B5j ...
		mov	eax, [esp+5Ch+arg_4]
		test	eax, eax
		jz	loc_6E43CCD0
		cmp	[esp+5Ch+arg_8], 7Fh
		jle	loc_6E43CAF0
		mov	eax, [esp+5Ch+arg_8]

loc_6E43C99B:				; CODE XREF: SSL_CIPHER_description+5BDj
		mov	ebx, [ebx+4]
		mov	[esp+5Ch+var_2C], ebx
		mov	ebx, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_38], ebx
		mov	[esp+5Ch+var_3C], esi
		mov	[esp+5Ch+var_40], ecx
		mov	[esp+5Ch+var_44], ebp
		mov	[esp+5Ch+var_48], edx
		mov	[esp+5Ch+var_4C], edi
		mov	edi, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_50], edi
		mov	[esp+5Ch+var_54], offset a23sSKx8sAu4sEn ; "%-23s %s Kx=%-8s Au=%-4s Enc=%-9s Mac=%"...
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_5C], eax
		call	BIO_snprintf
		mov	eax, [esp+5Ch+arg_4]

loc_6E43C9E2:				; CODE XREF: SSL_CIPHER_description+727j
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43C9F0:				; CODE XREF: SSL_CIPHER_description+179j
					; DATA XREF: .rdata:off_6E44D908o
		mov	esi, offset aMd5_0 ; jumptable 6E43C8C9	case 1
		jmp	short loc_6E43C980
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CA00:				; CODE XREF: SSL_CIPHER_description+179j
					; DATA XREF: .rdata:off_6E44D908o
		mov	esi, offset aAead ; jumptable 6E43C8C9 case 64
		jmp	loc_6E43C980
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CA10:				; CODE XREF: SSL_CIPHER_description+179j
					; DATA XREF: .rdata:off_6E44D908o
		mov	esi, offset aSha384 ; jumptable	6E43C8C9 case 32
		jmp	loc_6E43C980
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CA20:				; CODE XREF: SSL_CIPHER_description+179j
					; DATA XREF: .rdata:off_6E44D908o
		mov	esi, offset aSha256 ; jumptable	6E43C8C9 case 16
		jmp	loc_6E43C980
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CA30:				; CODE XREF: SSL_CIPHER_description+179j
					; DATA XREF: .rdata:off_6E44D908o
		mov	esi, offset aGost89 ; jumptable	6E43C8C9 case 8
		jmp	loc_6E43C980
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CA40:				; CODE XREF: SSL_CIPHER_description+179j
					; DATA XREF: .rdata:off_6E44D908o
		mov	esi, offset aGost94_0 ;	jumptable 6E43C8C9 case	4
		jmp	loc_6E43C980
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CA50:				; CODE XREF: SSL_CIPHER_description+173j
					; SSL_CIPHER_description+179j
					; DATA XREF: ...
		mov	esi, offset aUnknown_0 ; jumptable 6E43C8C9 default case
		jmp	loc_6E43C980
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CA60:				; CODE XREF: SSL_CIPHER_description+159j
		mov	ecx, offset aAes256 ; "AES(256)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CA70:				; CODE XREF: SSL_CIPHER_description+E9j
		cmp	ecx, 100h
		jz	loc_6E43CCB0
		ja	loc_6E43CB50
		cmp	ecx, 40h
		jz	loc_6E43CCA0
		add	ecx, 0FFFFFF80h
		jnz	loc_6E43CC20
		mov	ebp, offset aPsk ; "PSK"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CAA0:				; CODE XREF: SSL_CIPHER_description+129j
		cmp	eax, 4
		jz	loc_6E43CDA0
		jbe	loc_6E43CB70
		cmp	eax, 10h
		jz	loc_6E43CDC0
		cmp	eax, 20h
		jz	loc_6E43CD50
		cmp	eax, 8
		jnz	loc_6E43C8AF
		mov	ecx, [esp+5Ch+var_2C]
		test	ecx, ecx
		jz	loc_6E43CE10
		cmp	[esp+5Ch+var_24], 5
		jz	loc_6E43CE5E
		mov	ecx, offset aRc256 ; "RC2(56)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CAF0:				; CODE XREF: SSL_CIPHER_description+241j
		mov	eax, offset aBufferTooSmall ; "Buffer too small"
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CB00:				; CODE XREF: SSL_CIPHER_description+13Aj
		cmp	eax, 1000h
		jz	loc_6E43CDD0
		cmp	eax, 2000h
		jz	loc_6E43CD90
		cmp	eax, 800h
		jnz	loc_6E43C8AF
		mov	ecx, offset aSeed128 ; "SEED(128)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CB30:				; CODE XREF: SSL_CIPHER_description+F8j
		cmp	ecx, 8
		jz	loc_6E43CCC0
		cmp	ecx, 10h
		jnz	loc_6E43CC20
		mov	ebp, offset aEcdh ; "ECDH"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CB50:				; CODE XREF: SSL_CIPHER_description+32Cj
		cmp	ecx, 200h
		jz	short loc_6E43CBD0
		cmp	ecx, 400h
		jnz	loc_6E43CC20
		mov	ebp, offset aSrp ; "SRP"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CB70:				; CODE XREF: SSL_CIPHER_description+359j
		cmp	eax, 1
		jz	loc_6E43CD60
		cmp	eax, 2
		jnz	loc_6E43C8AF
		mov	ecx, offset a3des168 ; "3DES(168)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CB90:				; CODE XREF: SSL_CIPHER_description+1C3j
		mov	edx, [esp+5Ch+var_2C]
		test	edx, edx
		jz	loc_6E43CE00
		cmp	ebp, 200h
		jz	loc_6E43CE54
		mov	edx, offset aDh1024 ; "DH(1024)"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CBC0:				; CODE XREF: SSL_CIPHER_description+E3j
		mov	ebp, offset aKrb5 ; "KRB5"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CBD0:				; CODE XREF: SSL_CIPHER_description+406j
		mov	ebp, offset aGost01 ; "GOST01"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CBE0:				; CODE XREF: SSL_CIPHER_description+B4j
		mov	edx, offset aDhDss ; "DH/DSS"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CBF0:				; CODE XREF: SSL_CIPHER_description+A5j
		mov	edx, offset aEcdhRsa ; "ECDH/RSA"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CC00:				; CODE XREF: SSL_CIPHER_description+194j
		mov	edx, offset aGost ; "GOST"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CC10:				; CODE XREF: SSL_CIPHER_description+F2j
		mov	ebp, offset aNone ; "None"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CC20:				; CODE XREF: SSL_CIPHER_description+10Aj
					; SSL_CIPHER_description+33Ej ...
		mov	ebp, offset aUnknown_0 ; "unknown"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CC30:				; CODE XREF: SSL_CIPHER_description+101j
		mov	ebp, offset aRsa ; "RSA"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CC40:				; CODE XREF: SSL_CIPHER_description+CCj
					; SSL_CIPHER_description+1A0j ...
		mov	edx, offset aUnknown_0 ; "unknown"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CC50:				; CODE XREF: SSL_CIPHER_description+C3j
		mov	edx, [esp+5Ch+var_2C]
		test	edx, edx
		jz	loc_6E43CDF0
		cmp	ebp, 200h
		jz	loc_6E43CE4A
		mov	edx, offset aRsa1024 ; "RSA(1024)"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CC80:				; CODE XREF: SSL_CIPHER_description+186j
		mov	edx, offset aPsk ; "PSK"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CC90:				; CODE XREF: SSL_CIPHER_description+1E3j
		mov	edx, offset aEcdhEcdsa ; "ECDH/ECDSA"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CCA0:				; CODE XREF: SSL_CIPHER_description+335j
		mov	ebp, offset aEcdsa ; "ECDSA"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CCB0:				; CODE XREF: SSL_CIPHER_description+326j
		mov	ebp, offset aGost94_0 ;	"GOST94"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CCC0:				; CODE XREF: SSL_CIPHER_description+3E3j
		mov	ebp, offset aDh	; "DH"
		jmp	loc_6E43C870
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CCD0:				; CODE XREF: SSL_CIPHER_description+236j
		mov	[esp+5Ch+var_24], ecx
		mov	[esp+5Ch+var_2C], edx
		mov	[esp+5Ch+var_54], 6E5h
		mov	[esp+5Ch+var_58], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+5Ch+var_5C], 80h
		call	CRYPTO_malloc
		mov	[esp+5Ch+arg_4], eax
		test	eax, eax
		jz	loc_6E43CE72
		mov	eax, 80h
		mov	edx, [esp+5Ch+var_2C]
		mov	ecx, [esp+5Ch+var_24]
		jmp	loc_6E43C99B
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CD20:				; CODE XREF: SSL_CIPHER_description+150j
		mov	ecx, offset aCamellia256 ; "Camellia(256)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CD30:				; CODE XREF: SSL_CIPHER_description+145j
		mov	ecx, offset aCamellia128 ; "Camellia(128)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CD40:				; CODE XREF: SSL_CIPHER_description+123j
		mov	ecx, offset aAes128 ; "AES(128)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CD50:				; CODE XREF: SSL_CIPHER_description+36Bj
		mov	ecx, offset aNone ; "None"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CD60:				; CODE XREF: SSL_CIPHER_description+423j
		mov	eax, [esp+5Ch+var_2C]
		test	eax, eax
		jz	short loc_6E43CD80
		cmp	[esp+5Ch+var_24], 5
		jnz	short loc_6E43CD80
		mov	ecx, offset aDes40 ; "DES(40)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CD80:				; CODE XREF: SSL_CIPHER_description+616j
					; SSL_CIPHER_description+61Dj
		mov	ecx, offset aDes56 ; "DES(56)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CD90:				; CODE XREF: SSL_CIPHER_description+3C0j
		mov	ecx, offset aAesgcm256 ; "AESGCM(256)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CDA0:				; CODE XREF: SSL_CIPHER_description+353j
		mov	eax, [esp+5Ch+var_2C]
		test	eax, eax
		jz	short loc_6E43CE20
		cmp	[esp+5Ch+var_24], 5
		jz	loc_6E43CE68
		mov	ecx, offset aRc456 ; "RC4(56)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CDC0:				; CODE XREF: SSL_CIPHER_description+362j
		mov	ecx, offset aIdea128 ; "IDEA(128)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CDD0:				; CODE XREF: SSL_CIPHER_description+3B5j
		mov	ecx, offset aAesgcm128 ; "AESGCM(128)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CDE0:				; CODE XREF: SSL_CIPHER_description+134j
		mov	ecx, offset aGost89256 ; "GOST89(256)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CDF0:				; CODE XREF: SSL_CIPHER_description+506j
		mov	edx, offset aRsa ; "RSA"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CE00:				; CODE XREF: SSL_CIPHER_description+446j
		mov	edx, offset aDh	; "DH"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CE10:				; CODE XREF: SSL_CIPHER_description+380j
		mov	ecx, offset aRc2128 ; "RC2(128)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CE20:				; CODE XREF: SSL_CIPHER_description+656j
		test	byte ptr [esp+5Ch+var_20], 2
		jz	short loc_6E43CE40
		mov	ecx, offset aRc464 ; "RC4(64)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------
		jmp	short loc_6E43CE40
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CE40:				; CODE XREF: SSL_CIPHER_description+6D5j
					; SSL_CIPHER_description+6E1j
		mov	ecx, offset aRc4128 ; "RC4(128)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------

loc_6E43CE4A:				; CODE XREF: SSL_CIPHER_description+512j
		mov	edx, offset aRsa512 ; "RSA(512)"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------

loc_6E43CE54:				; CODE XREF: SSL_CIPHER_description+452j
		mov	edx, offset aDh512 ; "DH(512)"
		jmp	loc_6E43C830
; ---------------------------------------------------------------------------

loc_6E43CE5E:				; CODE XREF: SSL_CIPHER_description+38Bj
		mov	ecx, offset aRc240 ; "RC2(40)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------

loc_6E43CE68:				; CODE XREF: SSL_CIPHER_description+65Dj
		mov	ecx, offset aRc440 ; "RC4(40)"
		jmp	loc_6E43C8C0
; ---------------------------------------------------------------------------

loc_6E43CE72:				; CODE XREF: SSL_CIPHER_description+5AAj
		mov	eax, offset aOpenssl_malloc ; "OPENSSL_malloc Error"
		jmp	loc_6E43C9E2
SSL_CIPHER_description endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 129. SSL_CIPHER_get_version

; =============== S U B	R O U T	I N E =======================================


		public SSL_CIPHER_get_version
SSL_CIPHER_get_version proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E43CED0
		mov	dl, [eax+0Bh]
		and	edx, 0FFh
		cmp	edx, 3
		jz	short loc_6E43CEB0
		cmp	edx, 2
		jz	short loc_6E43CEC0
		mov	eax, offset aUnknown_0 ; "unknown"
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E43CEB0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CEB0:				; CODE XREF: SSL_CIPHER_get_version+14j
					; SSL_CIPHER_get_version+21j
		mov	eax, offset aTlsv1Sslv3	; "TLSv1/SSLv3"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CEC0:				; CODE XREF: SSL_CIPHER_get_version+19j
		mov	eax, offset aSslv2_0 ; "SSLv2"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CED0:				; CODE XREF: SSL_CIPHER_get_version+6j
		mov	eax, offset aNone_0 ; "(NONE)"
		retn
SSL_CIPHER_get_version endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 130. SSL_CIPHER_get_name

; =============== S U B	R O U T	I N E =======================================


		public SSL_CIPHER_get_name
SSL_CIPHER_get_name proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E43CEF0
		mov	eax, [eax+4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CEF0:				; CODE XREF: SSL_CIPHER_get_name+6j
		mov	eax, offset aNone_0 ; "(NONE)"
		retn
SSL_CIPHER_get_name endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 128. SSL_CIPHER_get_bits

; =============== S U B	R O U T	I N E =======================================


		public SSL_CIPHER_get_bits
SSL_CIPHER_get_bits proc near

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_0]
		mov	edx, [esp+arg_4]
		test	eax, eax
		jz	short loc_6E43CF20
		test	edx, edx
		jz	short loc_6E43CF15
		mov	ecx, [eax+2Ch]
		mov	[edx], ecx

loc_6E43CF15:				; CODE XREF: SSL_CIPHER_get_bits+Ej
		mov	eax, [eax+28h]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CF20:				; CODE XREF: SSL_CIPHER_get_bits+Aj
		xor	eax, eax
		retn
SSL_CIPHER_get_bits endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 349. SSL_CIPHER_get_id

; =============== S U B	R O U T	I N E =======================================


		public SSL_CIPHER_get_id
SSL_CIPHER_get_id proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+8]
		retn
SSL_CIPHER_get_id endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43CF40	proc near		; CODE XREF: sub_6E407B10+2D2p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		test	edi, edi
		jz	short loc_6E43CF90
		test	esi, esi
		jz	short loc_6E43CF90
		mov	[esp+2Ch+var_2C], esi
		call	sk_num
		mov	ebp, eax
		test	eax, eax
		jle	short loc_6E43CF90
		xor	ebx, ebx
		jmp	short loc_6E43CF75
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CF70:				; CODE XREF: sub_6E43CF40+43j
		inc	ebx
		cmp	ebx, ebp
		jz	short loc_6E43CF90

loc_6E43CF75:				; CODE XREF: sub_6E43CF40+27j
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	sk_value
		cmp	[eax], edi
		jnz	short loc_6E43CF70
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43CF90:				; CODE XREF: sub_6E43CF40+11j
					; sub_6E43CF40+15j ...
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6E43CF40	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 276. SSL_COMP_get_compression_methods

; =============== S U B	R O U T	I N E =======================================


		public SSL_COMP_get_compression_methods
SSL_COMP_get_compression_methods proc near ; CODE XREF:	SSL_CTX_new+2B9p
					; SSL_library_init+1FFp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+var_10], 1C8h
		mov	[esp+1Ch+var_14], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 5
		call	CRYPTO_lock
		mov	ebx, ds:dword_6E454050
		test	ebx, ebx
		jz	short loc_6E43D000
		mov	[esp+1Ch+var_10], 1E8h
		mov	[esp+1Ch+var_14], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 6
		call	CRYPTO_lock

loc_6E43CFF6:				; CODE XREF: SSL_COMP_get_compression_methods+D6j
		mov	eax, ds:dword_6E454050
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6E43D000:				; CODE XREF: SSL_COMP_get_compression_methods+30j
		mov	[esp+1Ch+var_10], 1CAh
		mov	[esp+1Ch+var_14], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 6
		call	CRYPTO_lock
		mov	[esp+1Ch+var_10], 1CBh
		mov	[esp+1Ch+var_14], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 9
		call	CRYPTO_lock
		mov	ecx, ds:dword_6E454050
		test	ecx, ecx
		jz	short loc_6E43D07B

loc_6E43D052:				; CODE XREF: SSL_COMP_get_compression_methods+166j
		mov	[esp+1Ch+var_10], 1E6h
		mov	[esp+1Ch+var_14], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_18], 10h
		mov	[esp+1Ch+var_1C], 0Ah
		call	CRYPTO_lock
		jmp	loc_6E43CFF6
; ---------------------------------------------------------------------------

loc_6E43D07B:				; CODE XREF: SSL_COMP_get_compression_methods+B0j
		mov	[esp+1Ch+var_1C], 3
		call	CRYPTO_mem_ctrl
		mov	[esp+1Ch+var_1C], offset loc_6E43A570
		call	sk_new
		mov	ds:dword_6E454050, eax
		test	eax, eax
		jz	short loc_6E43D0FA
		mov	[esp+1Ch+var_14], 1D4h
		mov	[esp+1Ch+var_18], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+1Ch+var_1C], 0Ch
		call	CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E43D0ED
		call	COMP_zlib
		mov	[ebx+8], eax
		test	eax, eax
		jz	short loc_6E43D0D0
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6E43D10B

loc_6E43D0D0:				; CODE XREF: SSL_COMP_get_compression_methods+128j
		mov	dword ptr [ebx], 1
		mov	eax, [eax+4]
		mov	[ebx+4], eax
		mov	[esp+1Ch+var_18], ebx
		mov	eax, ds:dword_6E454050
		mov	[esp+1Ch+var_1C], eax
		call	sk_push

loc_6E43D0ED:				; CODE XREF: SSL_COMP_get_compression_methods+11Cj
					; SSL_COMP_get_compression_methods+173j
		mov	eax, ds:dword_6E454050
		mov	[esp+1Ch+var_1C], eax
		call	sk_sort

loc_6E43D0FA:				; CODE XREF: SSL_COMP_get_compression_methods+FAj
		mov	[esp+1Ch+var_1C], 2
		call	CRYPTO_mem_ctrl
		jmp	loc_6E43D052
; ---------------------------------------------------------------------------

loc_6E43D10B:				; CODE XREF: SSL_COMP_get_compression_methods+12Ej
		mov	[esp+1Ch+var_1C], ebx
		call	CRYPTO_free
		jmp	short loc_6E43D0ED
SSL_COMP_get_compression_methods endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 184. SSL_COMP_add_compression_method

; =============== S U B	R O U T	I N E =======================================


		public SSL_COMP_add_compression_method
SSL_COMP_add_compression_method	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_4]
		test	ebx, ebx
		jz	loc_6E43D210
		mov	eax, [ebx]
		test	eax, eax
		jz	loc_6E43D210
		mov	eax, [esp+2Ch+arg_0]
		sub	eax, 0C1h
		cmp	eax, 3Eh
		ja	loc_6E43D1D0
		mov	[esp+2Ch+var_2C], 3
		call	CRYPTO_mem_ctrl
		mov	[esp+2Ch+var_24], 75Ah
		mov	[esp+2Ch+var_28], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+2Ch+var_2C], 0Ch
		call	CRYPTO_malloc
		mov	esi, eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esi], eax
		mov	[esi+8], ebx
		call	sub_6E43A630
		mov	eax, ds:dword_6E454050
		test	eax, eax
		jz	loc_6E43D220
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], eax
		call	sk_find
		test	eax, eax
		jns	loc_6E43D270
		mov	eax, ds:dword_6E454050
		test	eax, eax
		jz	short loc_6E43D220
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], eax
		call	sk_push
		test	eax, eax
		jz	short loc_6E43D220
		mov	[esp+2Ch+var_2C], 2
		call	CRYPTO_mem_ctrl
		xor	eax, eax
		jmp	short loc_6E43D1FE
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D1D0:				; CODE XREF: SSL_COMP_add_compression_method+27j
		mov	[esp+2Ch+var_1C], 755h
		mov	[esp+2Ch+var_20], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+2Ch+var_24], 133h
		mov	[esp+2Ch+var_28], 0A5h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax

loc_6E43D1FE:				; CODE XREF: SSL_COMP_add_compression_method+ADj
					; SSL_COMP_add_compression_method+195j
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D210:				; CODE XREF: SSL_COMP_add_compression_method+Bj
					; SSL_COMP_add_compression_method+15j
		mov	eax, 1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D220:				; CODE XREF: SSL_COMP_add_compression_method+6Cj
					; SSL_COMP_add_compression_method+8Dj ...
		mov	[esp+2Ch+var_2C], esi
		call	CRYPTO_free
		mov	[esp+2Ch+var_2C], 2
		call	CRYPTO_mem_ctrl
		mov	[esp+2Ch+var_1C], 768h
		mov	[esp+2Ch+var_20], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0A5h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D270:				; CODE XREF: SSL_COMP_add_compression_method+80j
		mov	[esp+2Ch+var_2C], esi
		call	CRYPTO_free
		mov	[esp+2Ch+var_2C], 2
		call	CRYPTO_mem_ctrl
		mov	[esp+2Ch+var_1C], 762h
		mov	[esp+2Ch+var_20], offset aSsl_ciph_c ; "ssl_ciph.c"
		mov	[esp+2Ch+var_24], 135h
		mov	[esp+2Ch+var_28], 0A5h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, 1
		jmp	loc_6E43D1FE
SSL_COMP_add_compression_method	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 271. SSL_COMP_get_name

; =============== S U B	R O U T	I N E =======================================


		public SSL_COMP_get_name
SSL_COMP_get_name proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	short loc_6E43D2D0
		mov	eax, [eax+4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D2D0:				; CODE XREF: SSL_COMP_get_name+6j
		xor	eax, eax
		retn
SSL_COMP_get_name endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  98. SSL_state_string_long

; =============== S U B	R O U T	I N E =======================================


		public SSL_state_string_long
SSL_state_string_long proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, [eax+34h]
		cmp	edx, 2000h
		jz	loc_6E43DAC0
		jle	short loc_6E43D360
		cmp	edx, 2180h
		jz	loc_6E43D6E0
		jg	loc_6E43D3E0
		cmp	edx, 2122h
		jz	loc_6E43DAD0
		jle	loc_6E43D490
		cmp	edx, 2150h
		jz	loc_6E43DB70
		jle	loc_6E43D5C0
		cmp	edx, 2161h
		jz	loc_6E43DB60
		jle	loc_6E43D6B0
		cmp	edx, 2170h
		jz	loc_6E43DA20
		mov	eax, offset aSslv3WriteServ ; "SSLv3 write server done B"
		cmp	edx, 2171h
		jnz	short loc_6E43D3D0

locret_6E43D356:			; CODE XREF: SSL_state_string_long+DFj
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D360:				; CODE XREF: SSL_state_string_long+13j
		cmp	edx, 1171h
		jz	loc_6E43DAA0
		jg	loc_6E43D430
		cmp	edx, 1126h
		jz	loc_6E43DAB0
		jle	loc_6E43D4E0
		cmp	edx, 1141h
		jz	loc_6E43DB30
		jle	loc_6E43D620
		cmp	edx, 1160h
		jz	loc_6E43DB20
		jle	loc_6E43D690
		cmp	edx, 1161h
		jz	loc_6E43DB90
		mov	eax, offset aSslv3WriteClie ; "SSLv3 write client certificate A"
		cmp	edx, 1170h
		jz	short locret_6E43D356
		jmp	short loc_6E43D3D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D3D0:				; CODE XREF: SSL_state_string_long+74j
					; SSL_state_string_long+E1j ...
		mov	eax, offset aUnknownState ; "unknown state"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D3E0:				; CODE XREF: SSL_state_string_long+21j
		cmp	edx, 21D1h
		jz	loc_6E43DAE0
		jle	loc_6E43D520
		cmp	edx, 2210h
		jz	loc_6E43D9E0
		jle	loc_6E43D780
		cmp	edx, 4000h
		jz	loc_6E43DA80
		jle	loc_6E43D670
		cmp	edx, 5000h
		jz	loc_6E43DB50
		mov	eax, offset aBeforeAcceptIn ; "before/accept initialization"
		cmp	edx, 6000h
		jnz	short loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------

loc_6E43D430:				; CODE XREF: SSL_state_string_long+8Cj
		cmp	edx, 11B1h
		jz	loc_6E43DAF0
		jle	loc_6E43D570
		cmp	edx, 11E0h
		jz	loc_6E43D9C0
		jle	loc_6E43D810
		cmp	edx, 1211h
		jz	loc_6E43DA00
		jle	loc_6E43D650
		cmp	edx, 1220h
		jz	loc_6E43DB80
		mov	eax, offset aSslv2V3ReadSer ; "SSLv2/v3	read server hello B"
		cmp	edx, 1221h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D490:				; CODE XREF: SSL_state_string_long+33j
		cmp	edx, 2112h
		jz	loc_6E43DA40
		jle	loc_6E43D750
		cmp	edx, 2114h
		jz	loc_6E43D740
		jl	loc_6E43DB10
		cmp	edx, 2120h
		jz	loc_6E43DB00
		mov	eax, offset aSslv3WriteHell ; "SSLv3 write hello request B"
		cmp	edx, 2121h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D4E0:				; CODE XREF: SSL_state_string_long+9Ej
		cmp	edx, 1100h
		jz	loc_6E43D9F0
		jg	loc_6E43D5F0
		cmp	edx, 5
		jz	loc_6E43D6F0
		jle	loc_6E43D900
		cmp	edx, 1000h
		jz	loc_6E43D9A0
		mov	eax, offset aOkConnectSslIn ; "ok/connect SSL initialization"
		cmp	edx, 1003h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D520:				; CODE XREF: SSL_state_string_long+10Cj
		cmp	edx, 21A1h
		jz	loc_6E43D970
		jg	loc_6E43D7E0
		cmp	edx, 2190h
		jz	loc_6E43D710
		jle	loc_6E43D8E0
		cmp	edx, 2191h
		jz	loc_6E43D930
		mov	eax, offset aSslv3ReadCerti ; "SSLv3 read certificate verify A"
		cmp	edx, 21A0h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D570:				; CODE XREF: SSL_state_string_long+15Cj
		cmp	edx, 1190h
		jz	loc_6E43D980
		jg	loc_6E43D7B0
		cmp	edx, 1173h
		jz	loc_6E43D700
		jl	loc_6E43D950
		cmp	edx, 1180h
		jz	loc_6E43D940
		mov	eax, offset aSslv3WriteCl_0 ; "SSLv3 write client key exchange B"
		cmp	edx, 1181h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D5C0:				; CODE XREF: SSL_state_string_long+45j
		cmp	edx, 2131h
		jz	loc_6E43D730
		jle	loc_6E43D860
		cmp	edx, 2140h
		jz	loc_6E43DA30
		mov	eax, offset aSslv3WriteCert ; "SSLv3 write certificate B"
		cmp	edx, 2141h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------

loc_6E43D5F0:				; CODE XREF: SSL_state_string_long+20Cj
		cmp	edx, 1111h
		jz	loc_6E43D720
		jle	loc_6E43D880
		cmp	edx, 1120h
		jz	loc_6E43DA60
		mov	eax, offset aSslv3ReadServe ; "SSLv3 read server hello B"
		cmp	edx, 1121h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------

loc_6E43D620:				; CODE XREF: SSL_state_string_long+B0j
		cmp	edx, 1130h
		jz	loc_6E43D6D0
		jle	loc_6E43D840
		cmp	edx, 1131h
		jz	loc_6E43D990
		mov	eax, offset aSslv3ReadSer_0 ; "SSLv3 read server key exchange A"
		cmp	edx, 1140h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------

loc_6E43D650:				; CODE XREF: SSL_state_string_long+180j
		cmp	edx, 11E1h
		jz	loc_6E43DA50
		mov	eax, offset aSslv2V3WriteCl ; "SSLv2/v3	write client hello A"
		cmp	edx, 1210h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D670:				; CODE XREF: SSL_state_string_long+130j
		cmp	edx, 2211h
		jz	loc_6E43DB40
		mov	eax, offset aSslRenegotiate ; "SSL renegotiate ciphers"
		cmp	edx, 3004h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D690:				; CODE XREF: SSL_state_string_long+C2j
		cmp	edx, 1150h
		jz	loc_6E43DA10
		mov	eax, offset aSslv3ReadSer_1 ; "SSLv3 read server certificate request B"
		cmp	edx, 1151h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D6B0:				; CODE XREF: SSL_state_string_long+57j
		cmp	edx, 2151h
		jz	loc_6E43DA90
		mov	eax, offset aSslv3WriteCe_0 ; "SSLv3 write certificate request A"
		cmp	edx, 2160h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D6D0:				; CODE XREF: SSL_state_string_long+346j
		mov	eax, offset aSslv3ReadSer_2 ; "SSLv3 read server certificate A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D6E0:				; CODE XREF: SSL_state_string_long+1Bj
		mov	eax, offset aSslv3ReadClien ; "SSLv3 read client certificate A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D6F0:				; CODE XREF: SSL_state_string_long+215j
		mov	eax, offset aError ; "error"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D700:				; CODE XREF: SSL_state_string_long+2A8j
		mov	eax, offset aSslv3WriteCl_1 ; "SSLv3 write client certificate D"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D710:				; CODE XREF: SSL_state_string_long+258j
		mov	eax, offset aSslv3ReadCli_0 ; "SSLv3 read client key exchange A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D720:				; CODE XREF: SSL_state_string_long+316j
		mov	eax, offset aSslv3WriteCl_2 ; "SSLv3 write client hello	B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D730:				; CODE XREF: SSL_state_string_long+2E6j
		mov	eax, offset aSslv3WriteSe_0 ; "SSLv3 write server hello	B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D740:				; CODE XREF: SSL_state_string_long+1C8j
		mov	eax, offset aDtls1WriteHell ; "DTLS1 write hello verify	request	B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D750:				; CODE XREF: SSL_state_string_long+1BCj
		cmp	edx, 2100h
		jz	loc_6E43D9F0
		jle	loc_6E43D8A0
		cmp	edx, 2110h
		jz	loc_6E43DA70
		mov	eax, offset aSslv3ReadCli_1 ; "SSLv3 read client hello B"
		cmp	edx, 2111h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------

loc_6E43D780:				; CODE XREF: SSL_state_string_long+11Ej
		cmp	edx, 21E1h
		jz	loc_6E43DAF0
		jle	loc_6E43DB96
		cmp	edx, 21F0h
		jz	loc_6E43D960
		mov	eax, offset aSslv3WriteSess ; "SSLv3 write session ticket B"
		cmp	edx, 21F1h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------

loc_6E43D7B0:				; CODE XREF: SSL_state_string_long+29Cj
		cmp	edx, 11A0h
		jz	loc_6E43D928
		jg	loc_6E43D8C0
		mov	eax, offset aSslv3WriteCe_1 ; "SSLv3 write certificate verify B"
		cmp	edx, 1191h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D7E0:				; CODE XREF: SSL_state_string_long+24Cj
		cmp	edx, 21C0h
		jz	loc_6E43D9B0
		jg	loc_6E43D910
		cmp	edx, 21B0h
		jz	loc_6E43D9D2
		cmp	edx, 21B1h
		jnz	loc_6E43D3D0

loc_6E43D80A:				; CODE XREF: SSL_state_string_long+536j
		mov	eax, offset aSslv3ReadChang ; "SSLv3 read change cipher	spec B"
		retn
; ---------------------------------------------------------------------------

loc_6E43D810:				; CODE XREF: SSL_state_string_long+16Ej
		cmp	edx, 11C1h
		jz	short loc_6E43D80A
		jle	loc_6E43D9C6
		cmp	edx, 11D0h
		jz	loc_6E43D9B0
		cmp	edx, 11D1h
		jnz	loc_6E43D3D0

loc_6E43D836:				; CODE XREF: SSL_state_string_long+636j
		mov	eax, offset aSslv3ReadFinis ; "SSLv3 read finished B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D840:				; CODE XREF: SSL_state_string_long+34Cj
		mov	eax, offset aDtls1ReadHello ; "DTLS1 read hello	verify request B"
		cmp	edx, 1127h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D860:				; CODE XREF: SSL_state_string_long+2ECj
		mov	eax, offset aSslv3WriteSe_1 ; "SSLv3 write server hello	A"
		cmp	edx, 2130h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D880:				; CODE XREF: SSL_state_string_long+31Cj
		mov	eax, offset aSslv3WriteCl_3 ; "SSLv3 write client hello	A"
		cmp	edx, 1110h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D8A0:				; CODE XREF: SSL_state_string_long+47Cj
		mov	eax, offset aOkAcceptSslIni ; "ok/accept SSL initialization"
		cmp	edx, 2003h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D8C0:				; CODE XREF: SSL_state_string_long+4DCj
		cmp	edx, 11A1h
		jz	loc_6E43DAE0
		cmp	edx, 11B0h
		jnz	loc_6E43D3D0

loc_6E43D8D8:				; CODE XREF: SSL_state_string_long+8BCj
		mov	eax, offset aSslv3WriteFini ; "SSLv3 write finished A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D8E0:				; CODE XREF: SSL_state_string_long+25Ej
		mov	eax, offset aSslv3ReadCli_2 ; "SSLv3 read client certificate B"
		cmp	edx, 2181h
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D900:				; CODE XREF: SSL_state_string_long+21Bj
		mov	eax, offset aSslNegotiation ; "SSL negotiation finished	successfully"
		cmp	edx, 3
		jnz	loc_6E43D3D0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D910:				; CODE XREF: SSL_state_string_long+50Cj
		cmp	edx, 21C1h
		jz	loc_6E43D836
		cmp	edx, 21D0h
		jnz	loc_6E43D3D0

loc_6E43D928:				; CODE XREF: SSL_state_string_long+4D6j
		mov	eax, offset aSslv3WriteChan ; "SSLv3 write change cipher spec A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D930:				; CODE XREF: SSL_state_string_long+26Aj
		mov	eax, offset aSslv3ReadCli_3 ; "SSLv3 read client key exchange B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D940:				; CODE XREF: SSL_state_string_long+2BAj
		mov	eax, offset aSslv3WriteCl_4 ; "SSLv3 write client key exchange A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D950:				; CODE XREF: SSL_state_string_long+2AEj
		mov	eax, offset aSslv3WriteCl_5 ; "SSLv3 write client certificate C"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D960:				; CODE XREF: SSL_state_string_long+4B8j
		mov	eax, offset aSslv3WriteSe_2 ; "SSLv3 write session ticket A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D970:				; CODE XREF: SSL_state_string_long+246j
		mov	eax, offset aSslv3ReadCer_0 ; "SSLv3 read certificate verify B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D980:				; CODE XREF: SSL_state_string_long+296j
		mov	eax, offset aSslv3WriteCe_2 ; "SSLv3 write certificate verify A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D990:				; CODE XREF: SSL_state_string_long+358j
		mov	eax, offset aSslv3ReadSer_3 ; "SSLv3 read server certificate B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D9A0:				; CODE XREF: SSL_state_string_long+227j
		mov	eax, offset aBeforeConnectI ; "before connect initialization"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D9B0:				; CODE XREF: SSL_state_string_long+506j
					; SSL_state_string_long+544j
		mov	eax, offset aSslv3ReadFin_0 ; "SSLv3 read finished A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D9C0:				; CODE XREF: SSL_state_string_long+168j
		mov	eax, offset aSslv3ReadSer_4 ; "SSLv3 read server session ticket	A"
		retn
; ---------------------------------------------------------------------------

loc_6E43D9C6:				; CODE XREF: SSL_state_string_long+538j
		cmp	edx, 11C0h
		jnz	loc_6E43D3D0

loc_6E43D9D2:				; CODE XREF: SSL_state_string_long+518j
		mov	eax, offset aSslv3ReadCha_0 ; "SSLv3 read change cipher	spec A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D9E0:				; CODE XREF: SSL_state_string_long+118j
		mov	eax, offset aSslv2V3ReadCli ; "SSLv2/v3	read client hello A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43D9F0:				; CODE XREF: SSL_state_string_long+206j
					; SSL_state_string_long+476j
		mov	eax, offset aSslv3FlushData ; "SSLv3 flush data"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DA00:				; CODE XREF: SSL_state_string_long+17Aj
		mov	eax, offset aSslv2V3Write_0 ; "SSLv2/v3	write client hello B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DA10:				; CODE XREF: SSL_state_string_long+3B6j
		mov	eax, offset aSslv3ReadSer_5 ; "SSLv3 read server certificate request A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DA20:				; CODE XREF: SSL_state_string_long+63j
		mov	eax, offset aSslv3WriteSe_3 ; "SSLv3 write server done A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DA30:				; CODE XREF: SSL_state_string_long+2F8j
		mov	eax, offset aSslv3WriteCe_3 ; "SSLv3 write certificate A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DA40:				; CODE XREF: SSL_state_string_long+1B6j
		mov	eax, offset aSslv3ReadCli_4 ; "SSLv3 read client hello C"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DA50:				; CODE XREF: SSL_state_string_long+376j
		mov	eax, offset aSslv3ReadSer_6 ; "SSLv3 read server session ticket	B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DA60:				; CODE XREF: SSL_state_string_long+328j
		mov	eax, offset aSslv3ReadSer_7 ; "SSLv3 read server hello A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DA70:				; CODE XREF: SSL_state_string_long+488j
		mov	eax, offset aSslv3ReadCli_5 ; "SSLv3 read client hello A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DA80:				; CODE XREF: SSL_state_string_long+12Aj
		mov	eax, offset aBeforeSslIniti ; "before SSL initialization"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DA90:				; CODE XREF: SSL_state_string_long+3D6j
		mov	eax, offset aSslv3WriteKeyE ; "SSLv3 write key exchange	B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DAA0:				; CODE XREF: SSL_state_string_long+86j
		mov	eax, offset aSslv3WriteCl_6 ; "SSLv3 write client certificate B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DAB0:				; CODE XREF: SSL_state_string_long+98j
		mov	eax, offset aDtls1ReadHel_0 ; "DTLS1 read hello	verify request A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DAC0:				; CODE XREF: SSL_state_string_long+Dj
		mov	eax, offset aBeforeAccept_0 ; "before accept initialization"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DAD0:				; CODE XREF: SSL_state_string_long+2Dj
		mov	eax, offset aSslv3WriteHe_0 ; "SSLv3 write hello request C"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DAE0:				; CODE XREF: SSL_state_string_long+106j
					; SSL_state_string_long+5E6j
		mov	eax, offset aSslv3WriteCh_0 ; "SSLv3 write change cipher spec B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DAF0:				; CODE XREF: SSL_state_string_long+156j
					; SSL_state_string_long+4A6j
		mov	eax, offset aSslv3WriteFi_0 ; "SSLv3 write finished B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DB00:				; CODE XREF: SSL_state_string_long+1DAj
		mov	eax, offset aSslv3WriteHe_1 ; "SSLv3 write hello request A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DB10:				; CODE XREF: SSL_state_string_long+1CEj
		mov	eax, offset aDtls1WriteHe_0 ; "DTLS1 write hello verify	request	A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DB20:				; CODE XREF: SSL_state_string_long+BCj
		mov	eax, offset aSslv3ReadSer_8 ; "SSLv3 read server done A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DB30:				; CODE XREF: SSL_state_string_long+AAj
		mov	eax, offset aSslv3ReadSer_9 ; "SSLv3 read server key exchange B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DB40:				; CODE XREF: SSL_state_string_long+396j
		mov	eax, offset aSslv2V3ReadC_0 ; "SSLv2/v3	read client hello B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DB50:				; CODE XREF: SSL_state_string_long+13Cj
		mov	eax, offset aBeforeConnec_0 ; "before/connect initialization"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DB60:				; CODE XREF: SSL_state_string_long+51j
		mov	eax, offset aSslv3WriteCe_4 ; "SSLv3 write certificate request B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DB70:				; CODE XREF: SSL_state_string_long+3Fj
		mov	eax, offset aSslv3WriteKe_0 ; "SSLv3 write key exchange	A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DB80:				; CODE XREF: SSL_state_string_long+18Cj
		mov	eax, offset aSslv2V3ReadS_0 ; "SSLv2/v3	read server hello A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DB90:				; CODE XREF: SSL_state_string_long+CEj
		mov	eax, offset aSslv3ReadSe_10 ; "SSLv3 read server done B"
		retn
; ---------------------------------------------------------------------------

loc_6E43DB96:				; CODE XREF: SSL_state_string_long+4ACj
		cmp	edx, 21E0h
		jz	loc_6E43D8D8
		jmp	loc_6E43D3D0
SSL_state_string_long endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  81. SSL_rstate_string_long

; =============== S U B	R O U T	I N E =======================================


		public SSL_rstate_string_long
SSL_rstate_string_long proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+38h]
		sub	eax, 0F0h
		cmp	eax, 2
		ja	short loc_6E43DBD0
		mov	eax, ds:off_6E44FB10[eax*4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DBD0:				; CODE XREF: SSL_rstate_string_long+Fj
		mov	eax, offset aUnknown_1 ; "unknown"
		retn
SSL_rstate_string_long endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  97. SSL_state_string

; =============== S U B	R O U T	I N E =======================================


		public SSL_state_string
SSL_state_string proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	edx, [eax+34h]
		cmp	edx, 1221h
		jz	loc_6E43E3A0
		jg	short loc_6E43DC60
		cmp	edx, 1170h
		jz	loc_6E43E220
		jg	loc_6E43DCE0
		cmp	edx, 1126h
		jz	loc_6E43E230
		jle	loc_6E43DDD0
		cmp	edx, 1141h
		jz	loc_6E43E210
		jg	loc_6E43DEC0
		cmp	edx, 1130h
		jz	loc_6E43DF20
		jle	loc_6E43E160
		cmp	edx, 1131h
		jz	loc_6E43E1C0
		mov	eax, offset a3rskea ; "3RSKEA"
		cmp	edx, 1140h
		jnz	short loc_6E43DCD0

locret_6E43DC56:			; CODE XREF: SSL_state_string+DFj
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DC60:				; CODE XREF: SSL_state_string+13j
		cmp	edx, 2170h
		jz	loc_6E43E390
		jg	loc_6E43DD30
		cmp	edx, 2121h
		jz	loc_6E43E240
		jle	loc_6E43DD80
		cmp	edx, 2141h
		jz	loc_6E43E260
		jg	loc_6E43DEF0
		cmp	edx, 2130h
		jz	loc_6E43DF70
		jle	loc_6E43E0E0
		cmp	edx, 2131h
		jz	loc_6E43E290
		mov	eax, offset a3wsc_a ; "3WSC_A"
		cmp	edx, 2140h
		jz	short locret_6E43DC56
		jmp	short loc_6E43DCD0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DCD0:				; CODE XREF: SSL_state_string+74j
					; SSL_state_string+E1j	...
		mov	eax, offset aUnkwn ; "UNKWN "
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DCE0:				; CODE XREF: SSL_state_string+21j
		cmp	edx, 11A1h
		jz	loc_6E43E0DA
		jg	loc_6E43DE70
		cmp	edx, 1180h
		jz	loc_6E43E380
		jle	loc_6E43DFF0
		cmp	edx, 1190h
		jz	loc_6E43DFB0
		jle	loc_6E43E140
		cmp	edx, 1191h
		jnz	loc_6E43E3A6
		mov	eax, offset a3wcv_b ; "3WCV_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DD30:				; CODE XREF: SSL_state_string+8Cj
		cmp	edx, 21B1h
		jz	loc_6E43E0AA
		jg	loc_6E43DE20
		cmp	edx, 2190h
		jz	loc_6E43E2B0
		jle	loc_6E43E020
		cmp	edx, 21A0h
		jz	loc_6E43DF60
		jle	loc_6E43E1A0
		cmp	edx, 21A1h
		jnz	loc_6E43E3B8
		mov	eax, offset a3rcv_b ; "3RCV_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DD80:				; CODE XREF: SSL_state_string+9Ej
		cmp	edx, 2111h
		jz	loc_6E43E2F0
		jle	loc_6E43E050
		cmp	edx, 2113h
		jz	loc_6E43DFA0
		jl	loc_6E43E340
		cmp	edx, 2114h
		jz	loc_6E43E330
		mov	eax, offset a3whr_a ; "3WHR_A"
		cmp	edx, 2120h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DDD0:				; CODE XREF: SSL_state_string+33j
		cmp	edx, 1100h
		jz	loc_6E43E2C0
		jle	loc_6E43DFC0
		cmp	edx, 1111h
		jz	loc_6E43DF90
		jle	loc_6E43E100
		cmp	edx, 1120h
		jz	loc_6E43E2A0
		mov	eax, offset a3rsh_b ; "3RSH_B"
		cmp	edx, 1121h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DE20:				; CODE XREF: SSL_state_string+15Cj
		cmp	edx, 21E0h
		jz	loc_6E43E1F2
		jle	loc_6E43E0B0
		cmp	edx, 2210h
		jz	loc_6E43DF80
		jle	loc_6E43E246
		cmp	edx, 2211h
		jz	loc_6E43E2D0
		mov	eax, offset aPinit ; "PINIT "
		cmp	edx, 4000h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DE70:				; CODE XREF: SSL_state_string+10Cj
		cmp	edx, 11D0h
		jz	loc_6E43E2E2
		jle	loc_6E43E080
		cmp	edx, 1210h
		jz	loc_6E43DF50
		jle	loc_6E43E366
		cmp	edx, 1211h
		jz	loc_6E43E1E0
		mov	eax, offset a23rsha ; "23RSHA"
		cmp	edx, 1220h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DEC0:				; CODE XREF: SSL_state_string+45j
		cmp	edx, 1151h
		jz	short loc_6E43DF30
		jle	loc_6E43E120
		cmp	edx, 1160h
		jz	loc_6E43E300
		mov	eax, offset a3rsd_b ; "3RSD_B"
		cmp	edx, 1161h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DEF0:				; CODE XREF: SSL_state_string+B0j
		cmp	edx, 2151h
		jz	short loc_6E43DF40
		jle	loc_6E43E180
		cmp	edx, 2160h
		jz	loc_6E43E1D0
		mov	eax, offset a3wcr_b ; "3WCR_B"
		cmp	edx, 2161h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DF20:				; CODE XREF: SSL_state_string+51j
		mov	eax, offset a3rsc_a ; "3RSC_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DF30:				; CODE XREF: SSL_state_string+2E6j
		mov	eax, offset a3rcr_b ; "3RCR_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DF40:				; CODE XREF: SSL_state_string+316j
		mov	eax, offset a3wskeb ; "3WSKEB"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DF50:				; CODE XREF: SSL_state_string+2A8j
		mov	eax, offset a23wcha ; "23WCHA"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DF60:				; CODE XREF: SSL_state_string+17Aj
		mov	eax, offset a3rcv_a ; "3RCV_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DF70:				; CODE XREF: SSL_state_string+BCj
		mov	eax, offset a3wsh_a ; "3WSH_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DF80:				; CODE XREF: SSL_state_string+258j
		mov	eax, offset a23rcha ; "23RCHA"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DF90:				; CODE XREF: SSL_state_string+208j
		mov	eax, offset a3wch_b ; "3WCH_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DFA0:				; CODE XREF: SSL_state_string+1B8j
		mov	eax, offset aDwchva ; "DWCHVA"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DFB0:				; CODE XREF: SSL_state_string+12Aj
		mov	eax, offset a3wcv_a ; "3WCV_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DFC0:				; CODE XREF: SSL_state_string+1FCj
		cmp	edx, 5
		jz	loc_6E43E320
		cmp	edx, 1000h
		jz	loc_6E43E310
		cmp	edx, 3
		jnz	loc_6E43DCD0
		mov	eax, offset aSslok ; "SSLOK "
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43DFF0:				; CODE XREF: SSL_state_string+11Ej
		cmp	edx, 1172h
		jz	loc_6E43E360
		jl	loc_6E43E350
		mov	eax, offset a3wcc_d ; "3WCC_D"
		cmp	edx, 1173h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E020:				; CODE XREF: SSL_state_string+16Ej
		cmp	edx, 2180h
		jz	loc_6E43E280
		cmp	edx, 2181h
		jz	loc_6E43E270
		cmp	edx, 2171h
		jnz	loc_6E43DCD0
		mov	eax, offset a3wsd_b ; "3WSD_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E050:				; CODE XREF: SSL_state_string+1ACj
		cmp	edx, 2100h
		jz	loc_6E43E2C0
		cmp	edx, 2110h
		jz	loc_6E43E200
		cmp	edx, 2000h
		jnz	loc_6E43DCD0
		mov	eax, offset aAinit ; "AINIT "
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E080:				; CODE XREF: SSL_state_string+29Cj
		cmp	edx, 11B1h
		jz	loc_6E43E252
		jle	loc_6E43E1E6
		cmp	edx, 11C0h
		jz	loc_6E43E3C4
		cmp	edx, 11C1h
		jnz	loc_6E43DCD0

loc_6E43E0AA:				; CODE XREF: SSL_state_string+156j
		mov	eax, offset a3rccsb ; "3RCCSB"
		retn
; ---------------------------------------------------------------------------

loc_6E43E0B0:				; CODE XREF: SSL_state_string+24Cj
		cmp	edx, 21C1h
		jz	loc_6E43E372
		jle	loc_6E43E2D6
		cmp	edx, 21D0h
		jz	loc_6E43E3B2
		cmp	edx, 21D1h
		jnz	loc_6E43DCD0

loc_6E43E0DA:				; CODE XREF: SSL_state_string+106j
		mov	eax, offset a3wccsb ; "3WCCSB"
		retn
; ---------------------------------------------------------------------------

loc_6E43E0E0:				; CODE XREF: SSL_state_string+C2j
		mov	eax, offset a3whr_c ; "3WHR_C"
		cmp	edx, 2122h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E100:				; CODE XREF: SSL_state_string+20Ej
		mov	eax, offset a3wch_a ; "3WCH_A"
		cmp	edx, 1110h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E120:				; CODE XREF: SSL_state_string+2E8j
		mov	eax, offset a3rcr_a ; "3RCR_A"
		cmp	edx, 1150h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E140:				; CODE XREF: SSL_state_string+130j
		mov	eax, offset a3wckeb ; "3WCKEB"
		cmp	edx, 1181h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E160:				; CODE XREF: SSL_state_string+57j
		mov	eax, offset aDrchvb ; "DRCHVB"
		cmp	edx, 1127h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E180:				; CODE XREF: SSL_state_string+318j
		mov	eax, offset a3wskea ; "3WSKEA"
		cmp	edx, 2150h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E1A0:				; CODE XREF: SSL_state_string+180j
		mov	eax, offset a3rckeb ; "3RCKEB"
		cmp	edx, 2191h
		jnz	loc_6E43DCD0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E1C0:				; CODE XREF: SSL_state_string+63j
		mov	eax, offset a3rsc_b ; "3RSC_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E1D0:				; CODE XREF: SSL_state_string+324j
		mov	eax, offset a3wcr_a ; "3WCR_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E1E0:				; CODE XREF: SSL_state_string+2BAj
		mov	eax, offset a23wchb ; "23WCHB"
		retn
; ---------------------------------------------------------------------------

loc_6E43E1E6:				; CODE XREF: SSL_state_string+4ACj
		cmp	edx, 11B0h
		jnz	loc_6E43DCD0

loc_6E43E1F2:				; CODE XREF: SSL_state_string+246j
		mov	eax, offset a3wfina ; "3WFINA"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E200:				; CODE XREF: SSL_state_string+482j
		mov	eax, offset a3rch_a ; "3RCH_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E210:				; CODE XREF: SSL_state_string+3Fj
		mov	eax, offset a3rskeb ; "3RSKEB"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E220:				; CODE XREF: SSL_state_string+1Bj
		mov	eax, offset a3wcc_a ; "3WCC_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E230:				; CODE XREF: SSL_state_string+2Dj
		mov	eax, offset aDrchva ; "DRCHVA"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E240:				; CODE XREF: SSL_state_string+98j
		mov	eax, offset a3whr_b ; "3WHR_B"
		retn
; ---------------------------------------------------------------------------

loc_6E43E246:				; CODE XREF: SSL_state_string+25Ej
		cmp	edx, 21E1h
		jnz	loc_6E43DCD0

loc_6E43E252:				; CODE XREF: SSL_state_string+4A6j
		mov	eax, offset a3wfinb ; "3WFINB"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E260:				; CODE XREF: SSL_state_string+AAj
		mov	eax, offset a3wsc_b ; "3WSC_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E270:				; CODE XREF: SSL_state_string+452j
		mov	eax, offset a3rcc_b ; "3RCC_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E280:				; CODE XREF: SSL_state_string+446j
		mov	eax, offset a3rcc_a ; "3RCC_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E290:				; CODE XREF: SSL_state_string+CEj
		mov	eax, offset a3wsh_b ; "3WSH_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E2A0:				; CODE XREF: SSL_state_string+21Aj
		mov	eax, offset a3rsh_a ; "3RSH_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E2B0:				; CODE XREF: SSL_state_string+168j
		mov	eax, offset a3rckea ; "3RCKEA"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E2C0:				; CODE XREF: SSL_state_string+1F6j
					; SSL_state_string+476j
		mov	eax, offset a3flush ; "3FLUSH"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E2D0:				; CODE XREF: SSL_state_string+26Aj
		mov	eax, offset a23rchb ; "23RCHB"
		retn
; ---------------------------------------------------------------------------

loc_6E43E2D6:				; CODE XREF: SSL_state_string+4DCj
		cmp	edx, 21C0h
		jnz	loc_6E43DCD0

loc_6E43E2E2:				; CODE XREF: SSL_state_string+296j
		mov	eax, offset a3rfina ; "3RFINA"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E2F0:				; CODE XREF: SSL_state_string+1A6j
		mov	eax, offset a3rch_b ; "3RCH_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E300:				; CODE XREF: SSL_state_string+2F4j
		mov	eax, offset a3rsd_a ; "3RSD_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E310:				; CODE XREF: SSL_state_string+3EFj
		mov	eax, offset aCinit ; "CINIT "
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E320:				; CODE XREF: SSL_state_string+3E3j
		mov	eax, offset aSslerr ; "SSLERR"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E330:				; CODE XREF: SSL_state_string+1CAj
		mov	eax, offset aDwchvb ; "DWCHVB"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E340:				; CODE XREF: SSL_state_string+1BEj
		mov	eax, offset a3rch_c ; "3RCH_C"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E350:				; CODE XREF: SSL_state_string+41Cj
		mov	eax, offset a3wcc_b ; "3WCC_B"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E360:				; CODE XREF: SSL_state_string+416j
		mov	eax, offset a3wcc_c ; "3WCC_C"
		retn
; ---------------------------------------------------------------------------

loc_6E43E366:				; CODE XREF: SSL_state_string+2AEj
		cmp	edx, 11D1h
		jnz	loc_6E43DCD0

loc_6E43E372:				; CODE XREF: SSL_state_string+4D6j
		mov	eax, offset a3rfinb ; "3RFINB"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E380:				; CODE XREF: SSL_state_string+118j
		mov	eax, offset a3wckea ; "3WCKEA"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E390:				; CODE XREF: SSL_state_string+86j
		mov	eax, offset a3wsd_a ; "3WSD_A"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E3A0:				; CODE XREF: SSL_state_string+Dj
		mov	eax, offset a23rsha ; "23RSHA"
		retn
; ---------------------------------------------------------------------------

loc_6E43E3A6:				; CODE XREF: SSL_state_string+13Cj
		cmp	edx, 11A0h
		jnz	loc_6E43DCD0

loc_6E43E3B2:				; CODE XREF: SSL_state_string+4E8j
		mov	eax, offset a3wccsa ; "3WCCSA"
		retn
; ---------------------------------------------------------------------------

loc_6E43E3B8:				; CODE XREF: SSL_state_string+18Cj
		cmp	edx, 21B0h
		jnz	loc_6E43DCD0

loc_6E43E3C4:				; CODE XREF: SSL_state_string+4B8j
		mov	eax, offset a3rccsa ; "3RCCSA"
		retn
SSL_state_string endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  40. SSL_alert_type_string_long

; =============== S U B	R O U T	I N E =======================================


		public SSL_alert_type_string_long
SSL_alert_type_string_long proc	near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sar	eax, 8
		cmp	eax, 1
		jz	short loc_6E43E3F0
		cmp	eax, 2
		jz	short loc_6E43E400
		mov	eax, offset aUnknown_1 ; "unknown"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E3F0:				; CODE XREF: SSL_alert_type_string_long+Aj
		mov	eax, offset aWarning ; "warning"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E400:				; CODE XREF: SSL_alert_type_string_long+Fj
		mov	eax, offset aFatal ; "fatal"
		retn
SSL_alert_type_string_long endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  39. SSL_alert_type_string

; =============== S U B	R O U T	I N E =======================================


		public SSL_alert_type_string
SSL_alert_type_string proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		sar	eax, 8
		cmp	eax, 1
		jz	short loc_6E43E430
		cmp	eax, 2
		jz	short loc_6E43E440
		mov	eax, offset aU	; "U"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E430:				; CODE XREF: SSL_alert_type_string+Aj
		mov	eax, offset aW	; "W"
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E440:				; CODE XREF: SSL_alert_type_string+Fj
		mov	eax, offset asc_6E44F493 ; "F"
		retn
SSL_alert_type_string endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  37. SSL_alert_desc_string

; =============== S U B	R O U T	I N E =======================================


		public SSL_alert_desc_string
SSL_alert_desc_string proc near

arg_0		= byte ptr  4

		xor	eax, eax
		mov	al, [esp+arg_0]
		cmp	eax, 73h
		ja	short loc_6E43E470
		mov	eax, ds:off_6E44F920[eax*4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E470:				; CODE XREF: SSL_alert_desc_string+9j
		mov	eax, offset aUk	; "UK"
		retn
SSL_alert_desc_string endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  38. SSL_alert_desc_string_long

; =============== S U B	R O U T	I N E =======================================


		public SSL_alert_desc_string_long
SSL_alert_desc_string_long proc	near

arg_0		= byte ptr  4

		xor	eax, eax
		mov	al, [esp+arg_0]
		cmp	eax, 73h
		ja	short loc_6E43E4A0
		mov	eax, ds:off_6E44F6E0[eax*4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E4A0:				; CODE XREF: SSL_alert_desc_string_long+9j
		mov	eax, offset aUnknown_1 ; "unknown"
		retn
SSL_alert_desc_string_long endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  80. SSL_rstate_string

; =============== S U B	R O U T	I N E =======================================


		public SSL_rstate_string
SSL_rstate_string proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+38h]
		sub	eax, 0F0h
		cmp	eax, 2
		ja	short loc_6E43E4D0
		mov	eax, ds:off_6E44F4A4[eax*4]
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E4D0:				; CODE XREF: SSL_rstate_string+Fj
		mov	eax, offset aUnknown_1 ; "unknown"
		retn
SSL_rstate_string endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43E4E0	proc near		; CODE XREF: SSL_use_certificate_file+FCp
					; SSL_use_certificate_ASN1+45p	...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, eax
		mov	edi, edx
		mov	[esp+3Ch+var_3C], edx
		call	X509_get_pubkey
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E43E620
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], edi
		call	sub_6E416910
		mov	esi, eax
		test	eax, eax
		js	loc_6E43E660
		lea	eax, [eax+eax]
		mov	[esp+3Ch+var_24], eax
		add	eax, esi
		lea	edx, [ebx+eax*4]
		mov	eax, [edx+34h]
		mov	[esp+3Ch+var_20], edx
		test	eax, eax
		jz	short loc_6E43E55F
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebp
		call	EVP_PKEY_copy_parameters
		call	ERR_clear_error
		mov	edx, [esp+3Ch+var_20]
		mov	eax, [edx+34h]
		cmp	dword ptr [eax], 6
		jz	loc_6E43E5D0

loc_6E43E54B:				; CODE XREF: sub_6E43E4E0+10Aj
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], edi
		call	X509_check_private_key
		test	eax, eax
		jz	loc_6E43E5F0

loc_6E43E55F:				; CODE XREF: sub_6E43E4E0+48j
					; sub_6E43E4E0+101j ...
		mov	[esp+3Ch+var_3C], ebp
		call	EVP_PKEY_free
		mov	eax, [esp+3Ch+var_24]
		add	eax, esi
		mov	eax, [ebx+eax*4+30h]
		test	eax, eax
		jz	short loc_6E43E57D
		mov	[esp+3Ch+var_3C], eax
		call	X509_free

loc_6E43E57D:				; CODE XREF: sub_6E43E4E0+93j
		mov	[esp+3Ch+var_2C], 1AFh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 3
		mov	[esp+3Ch+var_38], 1
		lea	eax, [edi+10h]
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock
		add	esi, [esp+3Ch+var_24]
		shl	esi, 2
		mov	[ebx+esi+30h], edi
		lea	eax, [ebx+esi+30h]
		mov	[ebx], eax
		mov	dword ptr [ebx+4], 0
		mov	eax, 1

loc_6E43E5C5:				; CODE XREF: sub_6E43E4E0+1B6j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E5D0:				; CODE XREF: sub_6E43E4E0+65j
		mov	eax, [eax+14h]
		mov	[esp+3Ch+var_3C], eax
		call	RSA_flags
		test	al, 1
		mov	edx, [esp+3Ch+var_20]
		jnz	loc_6E43E55F
		mov	eax, [edx+34h]
		jmp	loc_6E43E54B
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E5F0:				; CODE XREF: sub_6E43E4E0+79j
		mov	eax, [esp+3Ch+var_24]
		add	eax, esi
		lea	eax, [ebx+eax*4]
		mov	edx, [eax+34h]
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_3C], edx
		call	EVP_PKEY_free
		mov	eax, [esp+3Ch+var_20]
		mov	dword ptr [eax+34h], 0
		call	ERR_clear_error
		jmp	loc_6E43E55F
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E620:				; CODE XREF: sub_6E43E4E0+17j
		mov	[esp+3Ch+var_2C], 181h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 10Ch
		mov	[esp+3Ch+var_38], 0BFh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E660:				; CODE XREF: sub_6E43E4E0+2Dj
		mov	[esp+3Ch+var_2C], 187h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0F7h
		mov	[esp+3Ch+var_38], 0BFh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	[esp+3Ch+var_3C], ebp
		call	EVP_PKEY_free
		xor	eax, eax
		jmp	loc_6E43E5C5
sub_6E43E4E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E43E6A0	proc near		; CODE XREF: SSL_use_RSAPrivateKey+63p
					; SSL_use_RSAPrivateKey_ASN1+85p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, eax
		mov	edi, edx
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], 0
		call	sub_6E416910
		mov	ebx, eax
		test	eax, eax
		js	loc_6E43E7F0
		lea	ebp, [eax+eax]
		lea	eax, [ebp+eax+0]
		mov	eax, [esi+eax*4+30h]
		test	eax, eax
		jz	short loc_6E43E734
		mov	[esp+3Ch+var_3C], eax
		call	X509_get_pubkey
		test	eax, eax
		jz	loc_6E43E830
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], eax
		mov	[esp+3Ch+var_24], eax
		call	EVP_PKEY_copy_parameters
		mov	edx, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], edx
		call	EVP_PKEY_free
		call	ERR_clear_error
		cmp	dword ptr [edi], 6
		jz	loc_6E43E7A0

loc_6E43E70E:				; CODE XREF: sub_6E43E6A0+10Fj
		lea	eax, [ebp+ebx+0]
		lea	edx, [esi+eax*4]
		mov	eax, [edx+30h]
		mov	[esp+3Ch+var_24], edx
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], eax
		call	X509_check_private_key
		test	eax, eax
		mov	edx, [esp+3Ch+var_24]
		jz	loc_6E43E7C0

loc_6E43E734:				; CODE XREF: sub_6E43E6A0+32j
					; sub_6E43E6A0+10Dj
		lea	eax, [ebp+ebx+0]
		mov	eax, [esi+eax*4+34h]
		test	eax, eax
		jz	short loc_6E43E748
		mov	[esp+3Ch+var_3C], eax
		call	EVP_PKEY_free

loc_6E43E748:				; CODE XREF: sub_6E43E6A0+9Ej
		mov	[esp+3Ch+var_2C], 0DAh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0Ah
		mov	[esp+3Ch+var_38], 1
		lea	eax, [edi+8]
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock
		add	ebx, ebp
		shl	ebx, 2
		mov	[esi+ebx+34h], edi
		lea	eax, [esi+ebx+30h]
		mov	[esi], eax
		mov	dword ptr [esi+4], 0
		mov	eax, 1

loc_6E43E78E:				; CODE XREF: sub_6E43E6A0+17Ej
					; sub_6E43E6A0+1CAj
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E7A0:				; CODE XREF: sub_6E43E6A0+68j
		mov	eax, [edi+14h]
		mov	[esp+3Ch+var_3C], eax
		call	RSA_flags
		test	al, 1
		jnz	short loc_6E43E734
		jmp	loc_6E43E70E
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E7C0:				; CODE XREF: sub_6E43E6A0+8Ej
		mov	[esp+3Ch+var_20], eax
		mov	ecx, [edx+30h]
		mov	[esp+3Ch+var_24], edx
		mov	[esp+3Ch+var_3C], ecx
		call	X509_free
		mov	edx, [esp+3Ch+var_24]
		mov	dword ptr [edx+30h], 0
		mov	eax, [esp+3Ch+var_20]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E7F0:				; CODE XREF: sub_6E43E6A0+1Fj
		mov	[esp+3Ch+var_2C], 0B4h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0F7h
		mov	[esp+3Ch+var_38], 0C1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E43E78E
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E830:				; CODE XREF: sub_6E43E6A0+3Ej
		mov	[esp+3Ch+var_2C], 0BCh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0C1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	[esp+3Ch+var_3C], 0
		call	EVP_PKEY_free
		xor	eax, eax
		jmp	loc_6E43E78E
sub_6E43E6A0	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 105. SSL_use_certificate

; =============== S U B	R O U T	I N E =======================================


		public SSL_use_certificate
SSL_use_certificate proc near		; CODE XREF: sub_6E40C970+22Ep
					; sub_6E426290+1BEp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		test	ebx, ebx
		jz	loc_6E43EA40
		lea	eax, [esi+98h]
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	loc_6E43E990
		mov	esi, [esi+98h]
		mov	[esp+3Ch+var_3C], ebx
		call	X509_get_pubkey
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E43EA00
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E416910
		mov	edi, eax
		test	eax, eax
		js	loc_6E43EAA0
		lea	eax, [eax+eax]
		mov	[esp+3Ch+var_24], eax
		add	eax, edi
		lea	edx, [esi+eax*4]
		mov	eax, [edx+34h]
		mov	[esp+3Ch+var_20], edx
		test	eax, eax
		jz	short loc_6E43E917
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebp
		call	EVP_PKEY_copy_parameters
		call	ERR_clear_error
		mov	edx, [esp+3Ch+var_20]
		mov	eax, [edx+34h]
		cmp	dword ptr [eax], 6
		jz	loc_6E43EA80

loc_6E43E903:				; CODE XREF: SSL_use_certificate+22Aj
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	X509_check_private_key
		test	eax, eax
		jz	loc_6E43E9D0

loc_6E43E917:				; CODE XREF: SSL_use_certificate+70j
					; SSL_use_certificate+188j ...
		mov	[esp+3Ch+var_3C], ebp
		call	EVP_PKEY_free
		mov	eax, [esp+3Ch+var_24]
		add	eax, edi
		mov	eax, [esi+eax*4+30h]
		test	eax, eax
		jz	short loc_6E43E935
		mov	[esp+3Ch+var_3C], eax
		call	X509_free

loc_6E43E935:				; CODE XREF: SSL_use_certificate+BBj
		mov	[esp+3Ch+var_2C], 1AFh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 3
		mov	[esp+3Ch+var_38], 1
		lea	eax, [ebx+10h]
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock
		add	edi, [esp+3Ch+var_24]
		shl	edi, 2
		mov	[esi+edi+30h], ebx
		lea	eax, [esi+edi+30h]
		mov	[esi], eax
		mov	dword ptr [esi+4], 0
		mov	eax, 1

loc_6E43E97D:				; CODE XREF: SSL_use_certificate+1BEj
					; SSL_use_certificate+266j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E990:				; CODE XREF: SSL_use_certificate+27j
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_2C], 4Ch
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0C6h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+var_24]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43E9D0:				; CODE XREF: SSL_use_certificate+A1j
		mov	eax, [esp+3Ch+var_24]
		add	eax, edi
		lea	eax, [esi+eax*4]
		mov	edx, [eax+34h]
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_3C], edx
		call	EVP_PKEY_free
		mov	eax, [esp+3Ch+var_20]
		mov	dword ptr [eax+34h], 0
		call	ERR_clear_error
		jmp	loc_6E43E917
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EA00:				; CODE XREF: SSL_use_certificate+3Fj
		mov	[esp+3Ch+var_2C], 181h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 10Ch
		mov	[esp+3Ch+var_38], 0BFh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E43E97D
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EA40:				; CODE XREF: SSL_use_certificate+11j
		mov	[esp+3Ch+var_2C], 48h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 43h
		mov	[esp+3Ch+var_38], 0C6h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EA80:				; CODE XREF: SSL_use_certificate+8Dj
		mov	eax, [eax+14h]
		mov	[esp+3Ch+var_3C], eax
		call	RSA_flags
		test	al, 1
		mov	edx, [esp+3Ch+var_20]
		jnz	loc_6E43E917
		mov	eax, [edx+34h]
		jmp	loc_6E43E903
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EAA0:				; CODE XREF: SSL_use_certificate+55j
		mov	[esp+3Ch+var_2C], 187h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0F7h
		mov	[esp+3Ch+var_38], 0BFh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	[esp+3Ch+var_3C], ebp
		call	EVP_PKEY_free
		xor	eax, eax
		jmp	loc_6E43E97D
SSL_use_certificate endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 107. SSL_use_certificate_file

; =============== S U B	R O U T	I N E =======================================


		public SSL_use_certificate_file
SSL_use_certificate_file proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		call	BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E43EBF0
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 6Ch
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E43EC30
		cmp	[esp+2Ch+arg_8], 2
		jz	loc_6E43EC70
		cmp	[esp+2Ch+arg_8], 1
		jz	short loc_6E43EB80
		mov	[esp+2Ch+var_1C], 6Ch
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7Ch
		mov	[esp+2Ch+var_28], 0C8h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error

loc_6E43EB63:				; CODE XREF: SSL_use_certificate_file+17Cj
					; SSL_use_certificate_file+218j
		xor	esi, esi

loc_6E43EB65:				; CODE XREF: SSL_use_certificate_file+10Bj
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_free
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EB80:				; CODE XREF: SSL_use_certificate_file+55j
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0E4h]
		mov	edx, [eax+70h]
		mov	eax, [eax+6Ch]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	PEM_read_bio_X509
		mov	edi, eax
		mov	eax, 9

loc_6E43EBAF:				; CODE XREF: SSL_use_certificate_file+1A7j
		test	edi, edi
		jz	loc_6E43ECD0
		mov	eax, [esp+2Ch+arg_0]
		add	eax, 98h
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	loc_6E43EC90
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+98h]
		mov	edx, edi
		call	sub_6E43E4E0
		mov	esi, eax

loc_6E43EBE3:				; CODE XREF: SSL_use_certificate_file+1DEj
		mov	[esp+2Ch+var_2C], edi
		call	X509_free
		jmp	loc_6E43EB65
; ---------------------------------------------------------------------------

loc_6E43EBF0:				; CODE XREF: SSL_use_certificate_file+17j
		mov	[esp+2Ch+var_1C], 5Ch
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0C8h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EC30:				; CODE XREF: SSL_use_certificate_file+3Fj
		mov	[esp+2Ch+var_1C], 61h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], 0C8h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	loc_6E43EB63
; ---------------------------------------------------------------------------
		jmp	short loc_6E43EC70
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EC70:				; CODE XREF: SSL_use_certificate_file+4Aj
					; SSL_use_certificate_file+181j
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	d2i_X509_bio
		mov	edi, eax
		mov	eax, 0Dh
		jmp	loc_6E43EBAF
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EC90:				; CODE XREF: SSL_use_certificate_file+EAj
		mov	[esp+2Ch+var_1C], 4Ch
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0C6h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E43EBE3
; ---------------------------------------------------------------------------
		align 10h

loc_6E43ECD0:				; CODE XREF: SSL_use_certificate_file+D1j
		mov	[esp+2Ch+var_1C], 71h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0C8h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	loc_6E43EB63
SSL_use_certificate_file endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 106. SSL_use_certificate_ASN1

; =============== S U B	R O U T	I N E =======================================


		public SSL_use_certificate_ASN1
SSL_use_certificate_ASN1 proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= byte ptr  8
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], 0
		call	d2i_X509
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E43EDA0
		lea	eax, [esi+98h]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	short loc_6E43ED60
		mov	eax, [esi+98h]
		mov	edx, ebx
		call	sub_6E43E4E0

loc_6E43ED4A:				; CODE XREF: SSL_use_certificate_ASN1+94j
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_2C], ebx
		call	X509_free
		mov	eax, [esp+2Ch+var_10]
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E43ED60:				; CODE XREF: SSL_use_certificate_ASN1+3Bj
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_1C], 4Ch
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0C6h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+var_10]
		jmp	short loc_6E43ED4A
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EDA0:				; CODE XREF: SSL_use_certificate_ASN1+29j
		mov	[esp+2Ch+var_1C], 86h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 0Dh
		mov	[esp+2Ch+var_28], 0C7h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
SSL_use_certificate_ASN1 endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 102. SSL_use_RSAPrivateKey

; =============== S U B	R O U T	I N E =======================================


		public SSL_use_RSAPrivateKey
SSL_use_RSAPrivateKey proc near		; CODE XREF: SSL_use_RSAPrivateKey_file+E2p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		test	ebx, ebx
		jz	loc_6E43EED0
		lea	eax, [edi+98h]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	short loc_6E43EE60
		call	EVP_PKEY_new
		mov	esi, eax
		test	eax, eax
		jz	loc_6E43EEA0
		mov	[esp+2Ch+var_2C], ebx
		call	RSA_up_ref
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], 6
		mov	[esp+2Ch+var_2C], esi
		call	EVP_PKEY_assign
		test	eax, eax
		jle	loc_6E43EF10
		mov	eax, [edi+98h]
		mov	edx, esi
		call	sub_6E43E6A0
		mov	ebx, eax
		mov	[esp+2Ch+var_2C], esi
		call	EVP_PKEY_free
		mov	eax, ebx

loc_6E43EE54:				; CODE XREF: SSL_use_RSAPrivateKey+EEj
					; SSL_use_RSAPrivateKey+13Aj
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EE60:				; CODE XREF: SSL_use_RSAPrivateKey+26j
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_1C], 9Ah
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0CCh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+var_10]
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EEA0:				; CODE XREF: SSL_use_RSAPrivateKey+31j
		mov	[esp+2Ch+var_1C], 9Eh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 6
		mov	[esp+2Ch+var_28], 0CCh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	short loc_6E43EE54
; ---------------------------------------------------------------------------

loc_6E43EED0:				; CODE XREF: SSL_use_RSAPrivateKey+10j
		mov	[esp+2Ch+var_1C], 96h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 43h
		mov	[esp+2Ch+var_28], 0CCh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EF10:				; CODE XREF: SSL_use_RSAPrivateKey+55j
		mov	[esp+2Ch+var_2C], ebx
		call	RSA_free
		xor	eax, eax
		jmp	loc_6E43EE54
SSL_use_RSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 104. SSL_use_RSAPrivateKey_file

; =============== S U B	R O U T	I N E =======================================


		public SSL_use_RSAPrivateKey_file
SSL_use_RSAPrivateKey_file proc	near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		call	BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E43F020
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 6Ch
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E43F060
		cmp	[esp+2Ch+arg_8], 2
		jz	loc_6E43F0A0
		cmp	[esp+2Ch+arg_8], 1
		jz	short loc_6E43EFC0
		mov	[esp+2Ch+var_1C], 0FEh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7Ch
		mov	[esp+2Ch+var_28], 0CEh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi

loc_6E43EFA5:				; CODE XREF: SSL_use_RSAPrivateKey_file+F1j
					; SSL_use_RSAPrivateKey_file+16Ej ...
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_free
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43EFC0:				; CODE XREF: SSL_use_RSAPrivateKey_file+55j
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0E4h]
		mov	edx, [eax+70h]
		mov	eax, [eax+6Ch]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	PEM_read_bio_RSAPrivateKey
		mov	edi, eax
		mov	eax, 9

loc_6E43EFEF:				; CODE XREF: SSL_use_RSAPrivateKey_file+197j
		test	edi, edi
		jz	loc_6E43F0C0
		mov	[esp+2Ch+var_28], edi
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	SSL_use_RSAPrivateKey
		mov	esi, eax
		mov	[esp+2Ch+var_2C], edi
		call	RSA_free
		jmp	short loc_6E43EFA5
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F020:				; CODE XREF: SSL_use_RSAPrivateKey_file+17j
		mov	[esp+2Ch+var_1C], 0ECh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0CEh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F060:				; CODE XREF: SSL_use_RSAPrivateKey_file+3Fj
		mov	[esp+2Ch+var_1C], 0F1h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], 0CEh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E43EFA5
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F0A0:				; CODE XREF: SSL_use_RSAPrivateKey_file+4Aj
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	d2i_RSAPrivateKey_bio
		mov	edi, eax
		mov	eax, 0Dh
		jmp	loc_6E43EFEF
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F0C0:				; CODE XREF: SSL_use_RSAPrivateKey_file+D1j
		mov	[esp+2Ch+var_1C], 102h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0CEh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E43EFA5
SSL_use_RSAPrivateKey_file endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 103. SSL_use_RSAPrivateKey_ASN1

; =============== S U B	R O U T	I N E =======================================


		public SSL_use_RSAPrivateKey_ASN1
SSL_use_RSAPrivateKey_ASN1 proc	near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	esi, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_10], eax
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_34], eax
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], 0
		call	d2i_RSAPrivateKey
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E43F1E0
		lea	eax, [esi+98h]
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	short loc_6E43F1A0
		call	EVP_PKEY_new
		mov	edi, eax
		test	eax, eax
		jz	loc_6E43F230
		mov	[esp+3Ch+var_3C], ebx
		call	RSA_up_ref
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], 6
		mov	[esp+3Ch+var_3C], edi
		call	EVP_PKEY_assign
		test	eax, eax
		jle	loc_6E43F220
		mov	eax, [esi+98h]
		mov	edx, edi
		call	sub_6E43E6A0
		mov	esi, eax
		mov	[esp+3Ch+var_3C], edi
		call	EVP_PKEY_free
		mov	eax, esi

loc_6E43F186:				; CODE XREF: SSL_use_RSAPrivateKey_ASN1+E4j
					; SSL_use_RSAPrivateKey_ASN1+13Aj ...
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_3C], ebx
		call	RSA_free
		mov	eax, [esp+3Ch+var_20]
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F1A0:				; CODE XREF: SSL_use_RSAPrivateKey_ASN1+48j
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_2C], 9Ah
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0CCh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_6E43F186
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F1E0:				; CODE XREF: SSL_use_RSAPrivateKey_ASN1+32j
		mov	[esp+3Ch+var_2C], 116h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0Dh
		mov	[esp+3Ch+var_38], 0CDh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F220:				; CODE XREF: SSL_use_RSAPrivateKey_ASN1+77j
		mov	[esp+3Ch+var_3C], ebx
		call	RSA_free
		xor	eax, eax
		jmp	loc_6E43F186
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F230:				; CODE XREF: SSL_use_RSAPrivateKey_ASN1+53j
		mov	[esp+3Ch+var_2C], 9Eh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 6
		mov	[esp+3Ch+var_38], 0CCh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E43F186
SSL_use_RSAPrivateKey_ASN1 endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  99. SSL_use_PrivateKey

; =============== S U B	R O U T	I N E =======================================


		public SSL_use_PrivateKey
SSL_use_PrivateKey proc	near		; CODE XREF: sub_6E40C970+28Cp
					; sub_6E426290+20Ep

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		test	ebx, ebx
		jz	loc_6E43F3D0
		lea	eax, [edi+98h]
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	loc_6E43F390
		mov	edi, [edi+98h]
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], 0
		call	sub_6E416910
		mov	esi, eax
		test	eax, eax
		js	loc_6E43F460
		lea	ebp, [eax+eax]
		lea	eax, [ebp+eax+0]
		mov	eax, [edi+eax*4+30h]
		test	eax, eax
		jz	short loc_6E43F32C
		mov	[esp+3Ch+var_3C], eax
		call	X509_get_pubkey
		test	eax, eax
		jz	loc_6E43F4A0
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], eax
		mov	[esp+3Ch+var_24], eax
		call	EVP_PKEY_copy_parameters
		mov	edx, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], edx
		call	EVP_PKEY_free
		call	ERR_clear_error
		cmp	dword ptr [ebx], 6
		jz	loc_6E43F410

loc_6E43F306:				; CODE XREF: SSL_use_PrivateKey+1B3j
		lea	eax, [ebp+esi+0]
		lea	ecx, [edi+eax*4]
		mov	eax, [ecx+30h]
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], eax
		call	X509_check_private_key
		test	eax, eax
		mov	ecx, [esp+3Ch+var_24]
		jz	loc_6E43F430

loc_6E43F32C:				; CODE XREF: SSL_use_PrivateKey+5Aj
					; SSL_use_PrivateKey+1ADj
		lea	eax, [ebp+esi+0]
		mov	eax, [edi+eax*4+34h]
		test	eax, eax
		jz	short loc_6E43F340
		mov	[esp+3Ch+var_3C], eax
		call	EVP_PKEY_free

loc_6E43F340:				; CODE XREF: SSL_use_PrivateKey+C6j
		mov	[esp+3Ch+var_2C], 0DAh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0Ah
		mov	[esp+3Ch+var_38], 1
		lea	eax, [ebx+8]
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock
		lea	edx, [ebp+esi+0]
		shl	edx, 2
		mov	[edi+edx+34h], ebx
		lea	eax, [edi+edx+30h]
		mov	[edi], eax
		mov	dword ptr [edi+4], 0
		mov	eax, 1

loc_6E43F388:				; CODE XREF: SSL_use_PrivateKey+1E2j
					; SSL_use_PrivateKey+21Ej ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E43F390:				; CODE XREF: SSL_use_PrivateKey+27j
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_2C], 129h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0C9h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+var_24]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F3D0:				; CODE XREF: SSL_use_PrivateKey+11j
		mov	[esp+3Ch+var_2C], 125h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 43h
		mov	[esp+3Ch+var_38], 0C9h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F410:				; CODE XREF: SSL_use_PrivateKey+90j
		mov	eax, [ebx+14h]
		mov	[esp+3Ch+var_3C], eax
		call	RSA_flags
		test	al, 1
		jnz	loc_6E43F32C
		jmp	loc_6E43F306
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F430:				; CODE XREF: SSL_use_PrivateKey+B6j
		mov	[esp+3Ch+var_20], eax
		mov	edx, [ecx+30h]
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], edx
		call	X509_free
		mov	ecx, [esp+3Ch+var_24]
		mov	dword ptr [ecx+30h], 0
		mov	eax, [esp+3Ch+var_20]
		jmp	loc_6E43F388
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F460:				; CODE XREF: SSL_use_PrivateKey+47j
		mov	[esp+3Ch+var_2C], 0B4h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0F7h
		mov	[esp+3Ch+var_38], 0C1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E43F388
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F4A0:				; CODE XREF: SSL_use_PrivateKey+66j
		mov	[esp+3Ch+var_2C], 0BCh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0C1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	[esp+3Ch+var_3C], 0
		call	EVP_PKEY_free
		xor	eax, eax
		jmp	loc_6E43F388
SSL_use_PrivateKey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 101. SSL_use_PrivateKey_file

; =============== S U B	R O U T	I N E =======================================


		public SSL_use_PrivateKey_file
SSL_use_PrivateKey_file	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		call	BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E43F5E0
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 6Ch
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E43F620
		cmp	[esp+2Ch+arg_8], 1
		jz	loc_6E43F660
		cmp	[esp+2Ch+arg_8], 2
		jz	short loc_6E43F580
		mov	[esp+2Ch+var_1C], 14Bh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7Ch
		mov	[esp+2Ch+var_28], 0CBh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi

loc_6E43F565:				; CODE XREF: SSL_use_PrivateKey_file+F3j
					; SSL_use_PrivateKey_file+16Ej	...
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_free
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F580:				; CODE XREF: SSL_use_PrivateKey_file+55j
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	d2i_PrivateKey_bio
		mov	edi, eax
		mov	eax, 0Dh

loc_6E43F597:				; CODE XREF: SSL_use_PrivateKey_file+1AFj
		test	edi, edi
		jz	loc_6E43F6E0
		mov	eax, [esp+2Ch+arg_0]
		add	eax, 98h
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	loc_6E43F6A0
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+98h]
		mov	edx, edi
		call	sub_6E43E6A0
		mov	esi, eax

loc_6E43F5CB:				; CODE XREF: SSL_use_PrivateKey_file+1EEj
		mov	[esp+2Ch+var_2C], edi
		call	EVP_PKEY_free
		jmp	short loc_6E43F565
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F5E0:				; CODE XREF: SSL_use_PrivateKey_file+17j
		mov	[esp+2Ch+var_1C], 139h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0CBh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F620:				; CODE XREF: SSL_use_PrivateKey_file+3Fj
		mov	[esp+2Ch+var_1C], 13Eh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], 0CBh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E43F565
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F660:				; CODE XREF: SSL_use_PrivateKey_file+4Aj
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0E4h]
		mov	edx, [eax+70h]
		mov	eax, [eax+6Ch]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	PEM_read_bio_PrivateKey
		mov	edi, eax
		mov	eax, 9
		jmp	loc_6E43F597
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F6A0:				; CODE XREF: SSL_use_PrivateKey_file+D2j
		mov	[esp+2Ch+var_1C], 129h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0C9h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E43F5CB
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F6E0:				; CODE XREF: SSL_use_PrivateKey_file+B9j
		mov	[esp+2Ch+var_1C], 14Fh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0CBh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E43F565
SSL_use_PrivateKey_file	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 100. SSL_use_PrivateKey_ASN1

; =============== S U B	R O U T	I N E =======================================


		public SSL_use_PrivateKey_ASN1
SSL_use_PrivateKey_ASN1	proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	ebx
		sub	esp, 34h
		mov	esi, [esp+3Ch+arg_4]
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_10], eax
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_30], eax
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 0
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	d2i_PrivateKey
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E43F7C0
		lea	eax, [esi+98h]
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	short loc_6E43F780
		mov	eax, [esi+98h]
		mov	edx, ebx
		call	sub_6E43E6A0

loc_6E43F76A:				; CODE XREF: SSL_use_PrivateKey_ASN1+A4j
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_3C], ebx
		call	EVP_PKEY_free
		mov	eax, [esp+3Ch+var_20]
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E43F780:				; CODE XREF: SSL_use_PrivateKey_ASN1+4Bj
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_2C], 129h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0C9h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_6E43F76A
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F7C0:				; CODE XREF: SSL_use_PrivateKey_ASN1+39j
		mov	[esp+3Ch+var_2C], 164h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0Dh
		mov	[esp+3Ch+var_38], 0CAh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
SSL_use_PrivateKey_ASN1	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  28. SSL_CTX_use_certificate

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_use_certificate
SSL_CTX_use_certificate	proc near	; CODE XREF: SSL_CTX_use_certificate_file+DCp
					; SSL_CTX_use_certificate_chain_file+80p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		test	ebx, ebx
		jz	loc_6E43F9D0
		lea	eax, [esi+0B0h]
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	loc_6E43F920
		mov	esi, [esi+0B0h]
		mov	[esp+3Ch+var_3C], ebx
		call	X509_get_pubkey
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E43F990
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E416910
		mov	edi, eax
		test	eax, eax
		js	loc_6E43FA30
		lea	eax, [eax+eax]
		mov	[esp+3Ch+var_24], eax
		add	eax, edi
		lea	edx, [esi+eax*4]
		mov	eax, [edx+34h]
		mov	[esp+3Ch+var_20], edx
		test	eax, eax
		jz	short loc_6E43F8A7
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebp
		call	EVP_PKEY_copy_parameters
		call	ERR_clear_error
		mov	edx, [esp+3Ch+var_20]
		mov	eax, [edx+34h]
		cmp	dword ptr [eax], 6
		jz	loc_6E43FA10

loc_6E43F893:				; CODE XREF: SSL_CTX_use_certificate+22Aj
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	X509_check_private_key
		test	eax, eax
		jz	loc_6E43F960

loc_6E43F8A7:				; CODE XREF: SSL_CTX_use_certificate+70j
					; SSL_CTX_use_certificate+188j	...
		mov	[esp+3Ch+var_3C], ebp
		call	EVP_PKEY_free
		mov	eax, [esp+3Ch+var_24]
		add	eax, edi
		mov	eax, [esi+eax*4+30h]
		test	eax, eax
		jz	short loc_6E43F8C5
		mov	[esp+3Ch+var_3C], eax
		call	X509_free

loc_6E43F8C5:				; CODE XREF: SSL_CTX_use_certificate+BBj
		mov	[esp+3Ch+var_2C], 1AFh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 3
		mov	[esp+3Ch+var_38], 1
		lea	eax, [ebx+10h]
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock
		add	edi, [esp+3Ch+var_24]
		shl	edi, 2
		mov	[esi+edi+30h], ebx
		lea	eax, [esi+edi+30h]
		mov	[esi], eax
		mov	dword ptr [esi+4], 0
		mov	eax, 1

loc_6E43F90D:				; CODE XREF: SSL_CTX_use_certificate+1BEj
					; SSL_CTX_use_certificate+266j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F920:				; CODE XREF: SSL_CTX_use_certificate+27j
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_2C], 174h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0ABh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+var_24]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F960:				; CODE XREF: SSL_CTX_use_certificate+A1j
		mov	eax, [esp+3Ch+var_24]
		add	eax, edi
		lea	eax, [esi+eax*4]
		mov	edx, [eax+34h]
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_3C], edx
		call	EVP_PKEY_free
		mov	eax, [esp+3Ch+var_20]
		mov	dword ptr [eax+34h], 0
		call	ERR_clear_error
		jmp	loc_6E43F8A7
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F990:				; CODE XREF: SSL_CTX_use_certificate+3Fj
		mov	[esp+3Ch+var_2C], 181h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 10Ch
		mov	[esp+3Ch+var_38], 0BFh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E43F90D
; ---------------------------------------------------------------------------
		align 10h

loc_6E43F9D0:				; CODE XREF: SSL_CTX_use_certificate+11j
		mov	[esp+3Ch+var_2C], 170h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 43h
		mov	[esp+3Ch+var_38], 0ABh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FA10:				; CODE XREF: SSL_CTX_use_certificate+8Dj
		mov	eax, [eax+14h]
		mov	[esp+3Ch+var_3C], eax
		call	RSA_flags
		test	al, 1
		mov	edx, [esp+3Ch+var_20]
		jnz	loc_6E43F8A7
		mov	eax, [edx+34h]
		jmp	loc_6E43F893
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FA30:				; CODE XREF: SSL_CTX_use_certificate+55j
		mov	[esp+3Ch+var_2C], 187h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0F7h
		mov	[esp+3Ch+var_38], 0BFh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	[esp+3Ch+var_3C], ebp
		call	EVP_PKEY_free
		xor	eax, eax
		jmp	loc_6E43F90D
SSL_CTX_use_certificate	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  30. SSL_CTX_use_certificate_file

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_use_certificate_file
SSL_CTX_use_certificate_file proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		call	BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E43FB60
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 6Ch
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E43FBA0
		cmp	[esp+2Ch+arg_8], 2
		jz	loc_6E43FBE0
		cmp	[esp+2Ch+arg_8], 1
		jz	short loc_6E43FB10
		mov	[esp+2Ch+var_1C], 1D1h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7Ch
		mov	[esp+2Ch+var_28], 0ADh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error

loc_6E43FAF3:				; CODE XREF: SSL_CTX_use_certificate_file+15Cj
					; SSL_CTX_use_certificate_file+1B8j
		xor	esi, esi

loc_6E43FAF5:				; CODE XREF: SSL_CTX_use_certificate_file+EBj
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_free
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FB10:				; CODE XREF: SSL_CTX_use_certificate_file+55j
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, [eax+70h]
		mov	eax, [eax+6Ch]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	PEM_read_bio_X509
		mov	edi, eax
		mov	eax, 9

loc_6E43FB39:				; CODE XREF: SSL_CTX_use_certificate_file+187j
		test	edi, edi
		jz	loc_6E43FC00
		mov	[esp+2Ch+var_28], edi
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	SSL_CTX_use_certificate
		mov	esi, eax
		mov	[esp+2Ch+var_2C], edi
		call	X509_free
		jmp	short loc_6E43FAF5
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FB60:				; CODE XREF: SSL_CTX_use_certificate_file+17j
		mov	[esp+2Ch+var_1C], 1C1h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0ADh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FBA0:				; CODE XREF: SSL_CTX_use_certificate_file+3Fj
		mov	[esp+2Ch+var_1C], 1C6h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], 0ADh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	loc_6E43FAF3
; ---------------------------------------------------------------------------
		jmp	short loc_6E43FBE0
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FBE0:				; CODE XREF: SSL_CTX_use_certificate_file+4Aj
					; SSL_CTX_use_certificate_file+161j
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	d2i_X509_bio
		mov	edi, eax
		mov	eax, 0Dh
		jmp	loc_6E43FB39
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FC00:				; CODE XREF: SSL_CTX_use_certificate_file+CBj
		mov	[esp+2Ch+var_1C], 1D6h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0ADh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	loc_6E43FAF3
SSL_CTX_use_certificate_file endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  29. SSL_CTX_use_certificate_ASN1

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_use_certificate_ASN1
SSL_CTX_use_certificate_ASN1 proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= byte ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], 0
		call	d2i_X509
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E43FCD0
		lea	eax, [esi+0B0h]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	short loc_6E43FC90
		mov	eax, [esi+0B0h]
		mov	edx, ebx
		call	sub_6E43E4E0

loc_6E43FC7A:				; CODE XREF: SSL_CTX_use_certificate_ASN1+94j
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_2C], ebx
		call	X509_free
		mov	eax, [esp+2Ch+var_10]
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E43FC90:				; CODE XREF: SSL_CTX_use_certificate_ASN1+3Bj
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_1C], 174h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0ABh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+var_10]
		jmp	short loc_6E43FC7A
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FCD0:				; CODE XREF: SSL_CTX_use_certificate_ASN1+29j
		mov	[esp+2Ch+var_1C], 1ECh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 0Dh
		mov	[esp+2Ch+var_28], 0ACh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
SSL_CTX_use_certificate_ASN1 endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  25. SSL_CTX_use_RSAPrivateKey

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_use_RSAPrivateKey
SSL_CTX_use_RSAPrivateKey proc near	; CODE XREF: SSL_CTX_use_RSAPrivateKey_file+DCp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		test	ebx, ebx
		jz	loc_6E43FE00
		lea	eax, [edi+0B0h]
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	short loc_6E43FD90
		call	EVP_PKEY_new
		mov	esi, eax
		test	eax, eax
		jz	loc_6E43FDD0
		mov	[esp+2Ch+var_2C], ebx
		call	RSA_up_ref
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], 6
		mov	[esp+2Ch+var_2C], esi
		call	EVP_PKEY_assign
		test	eax, eax
		jle	loc_6E43FE40
		mov	eax, [edi+0B0h]
		mov	edx, esi
		call	sub_6E43E6A0
		mov	ebx, eax
		mov	[esp+2Ch+var_2C], esi
		call	EVP_PKEY_free
		mov	eax, ebx

loc_6E43FD84:				; CODE XREF: SSL_CTX_use_RSAPrivateKey+EEj
					; SSL_CTX_use_RSAPrivateKey+13Aj
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FD90:				; CODE XREF: SSL_CTX_use_RSAPrivateKey+26j
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_1C], 200h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0B1h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+var_10]
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FDD0:				; CODE XREF: SSL_CTX_use_RSAPrivateKey+31j
		mov	[esp+2Ch+var_1C], 204h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 6
		mov	[esp+2Ch+var_28], 0B1h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	short loc_6E43FD84
; ---------------------------------------------------------------------------

loc_6E43FE00:				; CODE XREF: SSL_CTX_use_RSAPrivateKey+10j
		mov	[esp+2Ch+var_1C], 1FCh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 43h
		mov	[esp+2Ch+var_28], 0B1h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FE40:				; CODE XREF: SSL_CTX_use_RSAPrivateKey+55j
		mov	[esp+2Ch+var_2C], ebx
		call	RSA_free
		xor	eax, eax
		jmp	loc_6E43FD84
SSL_CTX_use_RSAPrivateKey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  27. SSL_CTX_use_RSAPrivateKey_file

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_use_RSAPrivateKey_file
SSL_CTX_use_RSAPrivateKey_file proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		call	BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E43FF40
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 6Ch
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E43FF80
		cmp	[esp+2Ch+arg_8], 2
		jz	loc_6E43FFC0
		cmp	[esp+2Ch+arg_8], 1
		jz	short loc_6E43FEF0
		mov	[esp+2Ch+var_1C], 22Dh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7Ch
		mov	[esp+2Ch+var_28], 0B3h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi

loc_6E43FED5:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_file+EBj
					; SSL_CTX_use_RSAPrivateKey_file+15Ej ...
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_free
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FEF0:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_file+55j
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, [eax+70h]
		mov	eax, [eax+6Ch]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	PEM_read_bio_RSAPrivateKey
		mov	edi, eax
		mov	eax, 9

loc_6E43FF19:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_file+187j
		test	edi, edi
		jz	loc_6E43FFE0
		mov	[esp+2Ch+var_28], edi
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	SSL_CTX_use_RSAPrivateKey
		mov	esi, eax
		mov	[esp+2Ch+var_2C], edi
		call	RSA_free
		jmp	short loc_6E43FED5
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FF40:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_file+17j
		mov	[esp+2Ch+var_1C], 21Ch
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0B3h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FF80:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_file+3Fj
		mov	[esp+2Ch+var_1C], 221h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], 0B3h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E43FED5
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FFC0:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_file+4Aj
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	d2i_RSAPrivateKey_bio
		mov	edi, eax
		mov	eax, 0Dh
		jmp	loc_6E43FF19
; ---------------------------------------------------------------------------
		align 10h

loc_6E43FFE0:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_file+CBj
		mov	[esp+2Ch+var_1C], 231h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0B3h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E43FED5
SSL_CTX_use_RSAPrivateKey_file endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  26. SSL_CTX_use_RSAPrivateKey_ASN1

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_use_RSAPrivateKey_ASN1
SSL_CTX_use_RSAPrivateKey_ASN1 proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	esi, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_10], eax
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_34], eax
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], 0
		call	d2i_RSAPrivateKey
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E440100
		lea	eax, [esi+0B0h]
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	short loc_6E4400C0
		call	EVP_PKEY_new
		mov	edi, eax
		test	eax, eax
		jz	loc_6E440150
		mov	[esp+3Ch+var_3C], ebx
		call	RSA_up_ref
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], 6
		mov	[esp+3Ch+var_3C], edi
		call	EVP_PKEY_assign
		test	eax, eax
		jle	loc_6E440140
		mov	eax, [esi+0B0h]
		mov	edx, edi
		call	sub_6E43E6A0
		mov	esi, eax
		mov	[esp+3Ch+var_3C], edi
		call	EVP_PKEY_free
		mov	eax, esi

loc_6E4400A6:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_ASN1+E4j
					; SSL_CTX_use_RSAPrivateKey_ASN1+13Aj ...
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_3C], ebx
		call	RSA_free
		mov	eax, [esp+3Ch+var_20]
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4400C0:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_ASN1+48j
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_2C], 200h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0B1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_6E4400A6
; ---------------------------------------------------------------------------
		align 10h

loc_6E440100:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_ASN1+32j
		mov	[esp+3Ch+var_2C], 246h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0Dh
		mov	[esp+3Ch+var_38], 0B2h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E440140:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_ASN1+77j
		mov	[esp+3Ch+var_3C], ebx
		call	RSA_free
		xor	eax, eax
		jmp	loc_6E4400A6
; ---------------------------------------------------------------------------
		align 10h

loc_6E440150:				; CODE XREF: SSL_CTX_use_RSAPrivateKey_ASN1+53j
		mov	[esp+3Ch+var_2C], 204h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 6
		mov	[esp+3Ch+var_38], 0B1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E4400A6
SSL_CTX_use_RSAPrivateKey_ASN1 endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  22. SSL_CTX_use_PrivateKey

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_use_PrivateKey
SSL_CTX_use_PrivateKey proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		test	ebx, ebx
		jz	loc_6E4402F0
		lea	eax, [edi+0B0h]
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	loc_6E4402B0
		mov	edi, [edi+0B0h]
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], 0
		call	sub_6E416910
		mov	esi, eax
		test	eax, eax
		js	loc_6E440380
		lea	ebp, [eax+eax]
		lea	eax, [ebp+eax+0]
		mov	eax, [edi+eax*4+30h]
		test	eax, eax
		jz	short loc_6E44024C
		mov	[esp+3Ch+var_3C], eax
		call	X509_get_pubkey
		test	eax, eax
		jz	loc_6E4403C0
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], eax
		mov	[esp+3Ch+var_24], eax
		call	EVP_PKEY_copy_parameters
		mov	edx, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], edx
		call	EVP_PKEY_free
		call	ERR_clear_error
		cmp	dword ptr [ebx], 6
		jz	loc_6E440330

loc_6E440226:				; CODE XREF: SSL_CTX_use_PrivateKey+1B3j
		lea	eax, [ebp+esi+0]
		lea	ecx, [edi+eax*4]
		mov	eax, [ecx+30h]
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], eax
		call	X509_check_private_key
		test	eax, eax
		mov	ecx, [esp+3Ch+var_24]
		jz	loc_6E440350

loc_6E44024C:				; CODE XREF: SSL_CTX_use_PrivateKey+5Aj
					; SSL_CTX_use_PrivateKey+1ADj
		lea	eax, [ebp+esi+0]
		mov	eax, [edi+eax*4+34h]
		test	eax, eax
		jz	short loc_6E440260
		mov	[esp+3Ch+var_3C], eax
		call	EVP_PKEY_free

loc_6E440260:				; CODE XREF: SSL_CTX_use_PrivateKey+C6j
		mov	[esp+3Ch+var_2C], 0DAh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0Ah
		mov	[esp+3Ch+var_38], 1
		lea	eax, [ebx+8]
		mov	[esp+3Ch+var_3C], eax
		call	CRYPTO_add_lock
		lea	edx, [ebp+esi+0]
		shl	edx, 2
		mov	[edi+edx+34h], ebx
		lea	eax, [edi+edx+30h]
		mov	[edi], eax
		mov	dword ptr [edi+4], 0
		mov	eax, 1

loc_6E4402A8:				; CODE XREF: SSL_CTX_use_PrivateKey+1E2j
					; SSL_CTX_use_PrivateKey+21Ej ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E4402B0:				; CODE XREF: SSL_CTX_use_PrivateKey+27j
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_2C], 257h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0AEh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+var_24]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4402F0:				; CODE XREF: SSL_CTX_use_PrivateKey+11j
		mov	[esp+3Ch+var_2C], 253h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 43h
		mov	[esp+3Ch+var_38], 0AEh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E440330:				; CODE XREF: SSL_CTX_use_PrivateKey+90j
		mov	eax, [ebx+14h]
		mov	[esp+3Ch+var_3C], eax
		call	RSA_flags
		test	al, 1
		jnz	loc_6E44024C
		jmp	loc_6E440226
; ---------------------------------------------------------------------------
		align 10h

loc_6E440350:				; CODE XREF: SSL_CTX_use_PrivateKey+B6j
		mov	[esp+3Ch+var_20], eax
		mov	edx, [ecx+30h]
		mov	[esp+3Ch+var_24], ecx
		mov	[esp+3Ch+var_3C], edx
		call	X509_free
		mov	ecx, [esp+3Ch+var_24]
		mov	dword ptr [ecx+30h], 0
		mov	eax, [esp+3Ch+var_20]
		jmp	loc_6E4402A8
; ---------------------------------------------------------------------------
		align 10h

loc_6E440380:				; CODE XREF: SSL_CTX_use_PrivateKey+47j
		mov	[esp+3Ch+var_2C], 0B4h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0F7h
		mov	[esp+3Ch+var_38], 0C1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E4402A8
; ---------------------------------------------------------------------------
		align 10h

loc_6E4403C0:				; CODE XREF: SSL_CTX_use_PrivateKey+66j
		mov	[esp+3Ch+var_2C], 0BCh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0C1h
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	[esp+3Ch+var_3C], 0
		call	EVP_PKEY_free
		xor	eax, eax
		jmp	loc_6E4402A8
SSL_CTX_use_PrivateKey endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  24. SSL_CTX_use_PrivateKey_file

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_use_PrivateKey_file
SSL_CTX_use_PrivateKey_file proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		call	BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E440500
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 6Ch
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E440540
		cmp	[esp+2Ch+arg_8], 1
		jz	loc_6E440580
		cmp	[esp+2Ch+arg_8], 2
		jz	short loc_6E4404A0
		mov	[esp+2Ch+var_1C], 277h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7Ch
		mov	[esp+2Ch+var_28], 0B0h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi

loc_6E440485:				; CODE XREF: SSL_CTX_use_PrivateKey_file+F3j
					; SSL_CTX_use_PrivateKey_file+16Ej ...
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_free
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4404A0:				; CODE XREF: SSL_CTX_use_PrivateKey_file+55j
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	d2i_PrivateKey_bio
		mov	edi, eax
		mov	eax, 0Dh

loc_6E4404B7:				; CODE XREF: SSL_CTX_use_PrivateKey_file+1A9j
		test	edi, edi
		jz	loc_6E4405F0
		mov	eax, [esp+2Ch+arg_0]
		add	eax, 0B0h
		mov	[esp+2Ch+var_2C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	loc_6E4405B0
		mov	eax, [esp+2Ch+arg_0]
		mov	eax, [eax+0B0h]
		mov	edx, edi
		call	sub_6E43E6A0
		mov	esi, eax

loc_6E4404EB:				; CODE XREF: SSL_CTX_use_PrivateKey_file+1DEj
		mov	[esp+2Ch+var_2C], edi
		call	EVP_PKEY_free
		jmp	short loc_6E440485
; ---------------------------------------------------------------------------
		align 10h

loc_6E440500:				; CODE XREF: SSL_CTX_use_PrivateKey_file+17j
		mov	[esp+2Ch+var_1C], 266h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0B0h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		mov	eax, esi
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E440540:				; CODE XREF: SSL_CTX_use_PrivateKey_file+3Fj
		mov	[esp+2Ch+var_1C], 26Bh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], 0B0h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E440485
; ---------------------------------------------------------------------------
		align 10h

loc_6E440580:				; CODE XREF: SSL_CTX_use_PrivateKey_file+4Aj
		mov	eax, [esp+2Ch+arg_0]
		mov	edx, [eax+70h]
		mov	eax, [eax+6Ch]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	PEM_read_bio_PrivateKey
		mov	edi, eax
		mov	eax, 9
		jmp	loc_6E4404B7
; ---------------------------------------------------------------------------
		align 10h

loc_6E4405B0:				; CODE XREF: SSL_CTX_use_PrivateKey_file+D2j
		mov	[esp+2Ch+var_1C], 257h
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 0AEh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E4404EB
; ---------------------------------------------------------------------------
		align 10h

loc_6E4405F0:				; CODE XREF: SSL_CTX_use_PrivateKey_file+B9j
		mov	[esp+2Ch+var_1C], 27Bh
		mov	[esp+2Ch+var_20], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0B0h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	esi, esi
		jmp	loc_6E440485
SSL_CTX_use_PrivateKey_file endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  23. SSL_CTX_use_PrivateKey_ASN1

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_use_PrivateKey_ASN1
SSL_CTX_use_PrivateKey_ASN1 proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	ebx
		sub	esp, 34h
		mov	esi, [esp+3Ch+arg_4]
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_10], eax
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_30], eax
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 0
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	d2i_PrivateKey
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E4406D0
		lea	eax, [esi+0B0h]
		mov	[esp+3Ch+var_3C], eax
		call	sub_6E436E40
		test	eax, eax
		jz	short loc_6E440690
		mov	eax, [esi+0B0h]
		mov	edx, ebx
		call	sub_6E43E6A0

loc_6E44067A:				; CODE XREF: SSL_CTX_use_PrivateKey_ASN1+A4j
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_3C], ebx
		call	EVP_PKEY_free
		mov	eax, [esp+3Ch+var_20]
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E440690:				; CODE XREF: SSL_CTX_use_PrivateKey_ASN1+4Bj
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_2C], 257h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 0AEh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_6E44067A
; ---------------------------------------------------------------------------
		align 10h

loc_6E4406D0:				; CODE XREF: SSL_CTX_use_PrivateKey_ASN1+39j
		mov	[esp+3Ch+var_2C], 290h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 0Dh
		mov	[esp+3Ch+var_38], 0AFh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
SSL_CTX_use_PrivateKey_ASN1 endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 222. SSL_CTX_use_certificate_chain_file

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_use_certificate_chain_file
SSL_CTX_use_certificate_chain_file proc	near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		call	ERR_clear_error
		call	BIO_s_file
		mov	[esp+3Ch+var_3C], eax
		call	BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_6E4408B0
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], 3
		mov	[esp+3Ch+var_38], 6Ch
		mov	[esp+3Ch+var_3C], esi
		call	BIO_ctrl
		test	eax, eax
		jle	loc_6E440870
		mov	edx, [ebx+70h]
		mov	eax, [ebx+6Ch]
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], esi
		call	PEM_read_bio_X509_AUX
		mov	[esp+3Ch+var_20], eax
		test	eax, eax
		jz	loc_6E440900
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_CTX_use_certificate
		mov	edi, eax
		call	ERR_peek_error
		test	eax, eax
		jz	short loc_6E4407C0

loc_6E4407A0:				; CODE XREF: SSL_CTX_use_certificate_chain_file+B2j
					; SSL_CTX_use_certificate_chain_file+135j ...
		xor	edi, edi

loc_6E4407A2:				; CODE XREF: SSL_CTX_use_certificate_chain_file+14Ej
					; SSL_CTX_use_certificate_chain_file+1EAj
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	X509_free

loc_6E4407AE:				; CODE XREF: SSL_CTX_use_certificate_chain_file+18Ej
					; SSL_CTX_use_certificate_chain_file+21Ej
		mov	[esp+3Ch+var_3C], esi
		call	BIO_free
		mov	eax, edi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E4407C0:				; CODE XREF: SSL_CTX_use_certificate_chain_file+8Ej
		test	edi, edi
		jz	short loc_6E4407A0
		mov	eax, [ebx+94h]
		test	eax, eax
		jz	short loc_6E440814
		mov	[esp+3Ch+var_38], offset X509_free
		mov	[esp+3Ch+var_3C], eax
		call	sk_pop_free
		mov	dword ptr [ebx+94h], 0
		jmp	short loc_6E440814
; ---------------------------------------------------------------------------
		align 10h

loc_6E4407F0:				; CODE XREF: SSL_CTX_use_certificate_chain_file+126j
		mov	[esp+3Ch+var_30], ebp
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 0Eh
		mov	[esp+3Ch+var_3C], ebx
		call	SSL_CTX_ctrl
		test	eax, eax
		jz	loc_6E4408F0

loc_6E440814:				; CODE XREF: SSL_CTX_use_certificate_chain_file+BCj
					; SSL_CTX_use_certificate_chain_file+D8j
		mov	edx, [ebx+70h]
		mov	eax, [ebx+6Ch]
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], esi
		call	PEM_read_bio_X509
		mov	ebp, eax
		test	eax, eax
		jnz	short loc_6E4407F0
		call	ERR_peek_last_error
		mov	edx, eax
		shr	edx, 18h
		cmp	edx, 9
		jnz	loc_6E4407A0
		and	eax, 0FFFh
		cmp	eax, 6Ch
		jnz	loc_6E4407A0
		call	ERR_clear_error
		jmp	loc_6E4407A2
; ---------------------------------------------------------------------------
		align 10h

loc_6E440870:				; CODE XREF: SSL_CTX_use_certificate_chain_file+49j
		mov	[esp+3Ch+var_2C], 2AFh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 2
		mov	[esp+3Ch+var_38], 0DCh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E4407AE
; ---------------------------------------------------------------------------
		align 10h

loc_6E4408B0:				; CODE XREF: SSL_CTX_use_certificate_chain_file+21j
		mov	[esp+3Ch+var_2C], 2AAh
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 7
		mov	[esp+3Ch+var_38], 0DCh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	edi, edi
		mov	eax, edi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4408F0:				; CODE XREF: SSL_CTX_use_certificate_chain_file+FEj
		mov	[esp+3Ch+var_3C], ebp
		call	X509_free
		xor	edi, edi
		jmp	loc_6E4407A2
; ---------------------------------------------------------------------------
		align 10h

loc_6E440900:				; CODE XREF: SSL_CTX_use_certificate_chain_file+73j
		mov	[esp+3Ch+var_2C], 2B6h
		mov	[esp+3Ch+var_30], offset aSsl_rsa_c ; "ssl_rsa.c"
		mov	[esp+3Ch+var_34], 9
		mov	[esp+3Ch+var_38], 0DCh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	edi, edi
		jmp	loc_6E4407AE
SSL_CTX_use_certificate_chain_file endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 120. i2d_SSL_SESSION

; =============== S U B	R O U T	I N E =======================================


		public i2d_SSL_SESSION
i2d_SSL_SESSION	proc near		; CODE XREF: sub_6E405C70+5Bp
					; sub_6E405C70+CDp ...

Str		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_168		= byte ptr -168h
var_164		= dword	ptr -164h
var_160		= byte ptr -160h
var_15F		= byte ptr -15Fh
var_15E		= byte ptr -15Eh
var_15C		= byte ptr -15Ch
var_154		= byte ptr -154h
var_14C		= byte ptr -14Ch
var_144		= byte ptr -144h
var_13C		= byte ptr -13Ch
var_134		= byte ptr -134h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1ACh
		mov	ebp, [esp+1BCh+arg_0]
		test	ebp, ebp
		jz	loc_6E4412EE
		mov	eax, [ebp+0B4h]
		test	eax, eax
		jz	loc_6E4412E0

loc_6E440967:				; CODE XREF: i2d_SSL_SESSION+9A8j
		mov	[esp+1BCh+var_12C], 8
		mov	[esp+1BCh+var_128], 2
		lea	eax, [esp+1BCh+var_15C]
		mov	[esp+1BCh+var_124], eax
		mov	[esp+1BCh+var_1B8], 1
		lea	edi, [esp+1BCh+var_12C]
		mov	[esp+1BCh+Str],	edi
		call	ASN1_INTEGER_set
		mov	[esp+1BCh+var_11C], 8
		mov	[esp+1BCh+var_118], 2
		lea	eax, [esp+1BCh+var_154]
		mov	[esp+1BCh+var_114], eax
		mov	eax, [ebp+0]
		mov	[esp+1BCh+var_1B8], eax
		lea	esi, [esp+1BCh+var_11C]
		mov	[esp+1BCh+Str],	esi
		call	ASN1_INTEGER_set
		mov	[esp+1BCh+var_108], 4
		lea	eax, [esp+1BCh+var_160]
		mov	[esp+1BCh+var_104], eax
		mov	eax, [ebp+0B4h]
		test	eax, eax
		jz	loc_6E441620
		mov	eax, [eax+8]

loc_6E4409FD:				; CODE XREF: i2d_SSL_SESSION+CE6j
		cmp	dword ptr [ebp+0], 2
		jz	loc_6E4414B0
		mov	[esp+1BCh+var_10C], 2
		mov	ecx, eax
		sar	ecx, 8
		mov	[esp+1BCh+var_160], cl
		mov	[esp+1BCh+var_15F], al

loc_6E440A1F:				; CODE XREF: i2d_SSL_SESSION+B91j
		mov	eax, [ebp+0B0h]
		test	eax, eax
		jnz	loc_6E4411F0

loc_6E440A2D:				; CODE XREF: i2d_SSL_SESSION+8D5j
		mov	eax, [ebp+10h]
		mov	[esp+1BCh+var_EC], eax
		mov	[esp+1BCh+var_E8], 4
		lea	eax, [ebp+14h]
		mov	[esp+1BCh+var_E4], eax
		mov	eax, [ebp+44h]
		mov	[esp+1BCh+var_DC], eax
		mov	[esp+1BCh+var_D8], 4
		lea	eax, [ebp+48h]
		mov	[esp+1BCh+var_D4], eax
		mov	eax, [ebp+68h]
		mov	[esp+1BCh+var_CC], eax
		mov	[esp+1BCh+var_C8], 4
		lea	eax, [ebp+6Ch]
		mov	[esp+1BCh+var_C4], eax
		mov	eax, [ebp+4]
		mov	[esp+1BCh+var_BC], eax
		mov	[esp+1BCh+var_B8], 4
		lea	eax, [ebp+8]
		mov	[esp+1BCh+var_B4], eax
		mov	eax, [ebp+0ACh]
		test	eax, eax
		jnz	loc_6E441380

loc_6E440AB7:				; CODE XREF: i2d_SSL_SESSION+A74j
		mov	eax, [ebp+0A8h]
		test	eax, eax
		jnz	loc_6E441300
		mov	eax, [ebp+0A0h]
		test	eax, eax
		jnz	loc_6E441342

loc_6E440AD3:				; CODE XREF: i2d_SSL_SESSION+9FCj
					; i2d_SSL_SESSION+A39j
		mov	ebx, [ebp+0D0h]
		test	ebx, ebx
		jz	short loc_6E440AFE
		mov	[esp+1BCh+Str],	ebx ; Str
		call	strlen
		mov	[esp+1BCh+var_7C], eax
		mov	[esp+1BCh+var_78], 4
		mov	[esp+1BCh+var_74], ebx

loc_6E440AFE:				; CODE XREF: i2d_SSL_SESSION+19Bj
		mov	eax, [ebp+0E4h]
		test	eax, eax
		jz	short loc_6E440B27
		mov	ecx, [ebp+0E8h]
		mov	[esp+1BCh+var_5C], ecx
		mov	[esp+1BCh+var_58], 4
		mov	[esp+1BCh+var_54], eax

loc_6E440B27:				; CODE XREF: i2d_SSL_SESSION+1C6j
		mov	eax, [ebp+0ECh]
		test	eax, eax
		jle	short loc_6E440B68
		mov	[esp+1BCh+var_6C], 8
		mov	[esp+1BCh+var_68], 2
		lea	ecx, [esp+1BCh+var_134]
		mov	[esp+1BCh+var_64], ecx
		mov	[esp+1BCh+var_1B8], eax
		lea	eax, [esp+1BCh+var_6C]
		mov	[esp+1BCh+Str],	eax
		call	ASN1_INTEGER_set

loc_6E440B68:				; CODE XREF: i2d_SSL_SESSION+1EFj
		mov	ebx, [ebp+8Ch]
		test	ebx, ebx
		jz	short loc_6E440B93
		mov	[esp+1BCh+Str],	ebx ; Str
		call	strlen
		mov	[esp+1BCh+var_4C], eax
		mov	[esp+1BCh+var_48], 4
		mov	[esp+1BCh+var_44], ebx

loc_6E440B93:				; CODE XREF: i2d_SSL_SESSION+230j
		mov	ebx, [ebp+90h]
		test	ebx, ebx
		jz	short loc_6E440BBE
		mov	[esp+1BCh+Str],	ebx ; Str
		call	strlen
		mov	[esp+1BCh+var_3C], eax
		mov	[esp+1BCh+var_38], 4
		mov	[esp+1BCh+var_34], ebx

loc_6E440BBE:				; CODE XREF: i2d_SSL_SESSION+25Bj
		mov	ebx, [ebp+0F0h]
		test	ebx, ebx
		jz	short loc_6E440BE9
		mov	[esp+1BCh+Str],	ebx ; Str
		call	strlen
		mov	[esp+1BCh+var_2C], eax
		mov	[esp+1BCh+var_28], 4
		mov	[esp+1BCh+var_24], ebx

loc_6E440BE9:				; CODE XREF: i2d_SSL_SESSION+286j
		mov	[esp+1BCh+var_1B8], 0
		mov	[esp+1BCh+Str],	edi
		call	i2d_ASN1_INTEGER
		mov	ebx, eax
		mov	[esp+1BCh+var_1B8], 0
		mov	[esp+1BCh+Str],	esi
		call	i2d_ASN1_INTEGER
		add	ebx, eax
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_10C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		add	ebx, eax
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_DC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		add	ebx, eax
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_EC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		add	ebx, eax
		mov	eax, [ebp+4]
		test	eax, eax
		jnz	loc_6E441490

loc_6E440C63:				; CODE XREF: i2d_SSL_SESSION+B69j
		mov	eax, [ebp+0ACh]
		test	eax, eax
		jnz	loc_6E441450
		mov	[esp+1BCh+var_180], 0

loc_6E440C79:				; CODE XREF: i2d_SSL_SESSION+B45j
		mov	eax, [ebp+0A8h]
		test	eax, eax
		jnz	loc_6E441400
		mov	[esp+1BCh+var_17C], 0
		mov	eax, [ebp+9Ch]
		test	eax, eax
		jz	loc_6E441443

loc_6E440C9D:				; CODE XREF: i2d_SSL_SESSION+AFDj
		mov	[esp+1BCh+var_1B8], 0
		mov	[esp+1BCh+Str],	eax
		call	i2d_X509
		mov	[esp+1BCh+var_170], eax
		mov	[esp+1BCh+var_1B4], 3
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax

loc_6E440CCB:				; CODE XREF: i2d_SSL_SESSION+B0Bj
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_CC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	[esp+1BCh+var_19C], eax
		mov	[esp+1BCh+var_1B4], 4
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax
		mov	ecx, [ebp+0A0h]
		test	ecx, ecx
		jnz	loc_6E4413C0
		mov	[esp+1BCh+var_178], 0

loc_6E440D16:				; CODE XREF: i2d_SSL_SESSION+AB5j
		mov	edx, [ebp+0ECh]
		test	edx, edx
		jle	loc_6E441220
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_6C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_INTEGER
		mov	[esp+1BCh+var_184], eax
		mov	[esp+1BCh+var_1B4], 9
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax
		mov	eax, [ebp+0E4h]
		test	eax, eax
		jz	loc_6E441236

loc_6E440D67:				; CODE XREF: i2d_SSL_SESSION+8F0j
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_5C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	[esp+1BCh+var_194], eax
		mov	[esp+1BCh+var_1B4], 0Ah
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax
		mov	eax, [ebp+0D0h]
		test	eax, eax
		jz	loc_6E44124C

loc_6E440DAA:				; CODE XREF: i2d_SSL_SESSION+906j
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_7C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	[esp+1BCh+var_198], eax
		mov	[esp+1BCh+var_1B4], 6
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax
		mov	eax, [ebp+0B0h]
		test	eax, eax
		jnz	loc_6E441262

loc_6E440DED:				; CODE XREF: i2d_SSL_SESSION+91Cj
		mov	[esp+1BCh+var_174], 0
		mov	eax, [ebp+8Ch]
		test	eax, eax
		jz	loc_6E4412A5

loc_6E440E03:				; CODE XREF: i2d_SSL_SESSION+95Fj
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_4C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	[esp+1BCh+var_190], eax
		mov	[esp+1BCh+var_1B4], 7
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax
		mov	eax, [ebp+90h]
		test	eax, eax
		jz	loc_6E4412BB

loc_6E440E46:				; CODE XREF: i2d_SSL_SESSION+975j
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_3C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	[esp+1BCh+var_18C], eax
		mov	[esp+1BCh+var_1B4], 8
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax
		mov	eax, [ebp+0F0h]
		test	eax, eax
		jz	loc_6E4412D1

loc_6E440E89:				; CODE XREF: i2d_SSL_SESSION+98Bj
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_2C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	[esp+1BCh+var_188], eax
		mov	[esp+1BCh+var_1B4], 0Ch
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax

loc_6E440EBE:				; CODE XREF: i2d_SSL_SESSION+999j
		mov	[esp+1BCh+var_1B4], 10h
		mov	[esp+1BCh+var_1B8], ebx
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		mov	[esp+1BCh+var_1A0], eax
		mov	ecx, [esp+1BCh+arg_4]
		test	ecx, ecx
		jz	loc_6E4411E0
		mov	eax, [esp+1BCh+arg_4]
		mov	eax, [eax]
		mov	[esp+1BCh+var_164], eax
		mov	[esp+1BCh+var_1AC], 0
		mov	[esp+1BCh+var_1B0], 10h
		mov	[esp+1BCh+var_1B4], ebx
		mov	[esp+1BCh+var_1B8], 1
		lea	ebx, [esp+1BCh+var_164]
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		mov	[esp+1BCh+Str],	edi
		call	i2d_ASN1_INTEGER
		mov	[esp+1BCh+var_1B8], ebx
		mov	[esp+1BCh+Str],	esi
		call	i2d_ASN1_INTEGER
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_10C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_DC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_EC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	edx, [ebp+4]
		test	edx, edx
		jnz	loc_6E4414E0
		mov	eax, [ebp+0ACh]
		test	eax, eax
		jnz	loc_6E44150F

loc_6E440F88:				; CODE XREF: i2d_SSL_SESSION+BC9j
		mov	eax, [ebp+0A8h]
		test	eax, eax
		jnz	loc_6E441558

loc_6E440F96:				; CODE XREF: i2d_SSL_SESSION+C12j
					; i2d_SSL_SESSION+C53j
		mov	eax, [ebp+9Ch]
		test	eax, eax
		jz	short loc_6E440FDA
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 3
		mov	eax, [esp+1BCh+var_170]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	eax, [ebp+9Ch]
		mov	[esp+1BCh+var_1B8], ebx
		mov	[esp+1BCh+Str],	eax
		call	i2d_X509

loc_6E440FDA:				; CODE XREF: i2d_SSL_SESSION+65Ej
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 4
		mov	eax, [esp+1BCh+var_19C]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_CC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	eax, [ebp+0A0h]
		test	eax, eax
		jnz	loc_6E4415E0

loc_6E441023:				; CODE XREF: i2d_SSL_SESSION+CDBj
		mov	eax, [ebp+0D0h]
		test	eax, eax
		jz	short loc_6E441068
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 6
		mov	eax, [esp+1BCh+var_198]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_7C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING

loc_6E441068:				; CODE XREF: i2d_SSL_SESSION+6EBj
		mov	eax, [ebp+8Ch]
		test	eax, eax
		jz	short loc_6E4410AD
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 7
		mov	eax, [esp+1BCh+var_190]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_4C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING

loc_6E4410AD:				; CODE XREF: i2d_SSL_SESSION+730j
		mov	edi, [ebp+90h]
		test	edi, edi
		jz	short loc_6E4410F2
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 8
		mov	eax, [esp+1BCh+var_18C]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_3C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING

loc_6E4410F2:				; CODE XREF: i2d_SSL_SESSION+775j
		mov	esi, [ebp+0ECh]
		test	esi, esi
		jle	short loc_6E441137
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 9
		mov	eax, [esp+1BCh+var_184]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_6C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_INTEGER

loc_6E441137:				; CODE XREF: i2d_SSL_SESSION+7BAj
		mov	ecx, [ebp+0E4h]
		test	ecx, ecx
		jz	short loc_6E44117C
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 0Ah
		mov	eax, [esp+1BCh+var_194]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_5C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING

loc_6E44117C:				; CODE XREF: i2d_SSL_SESSION+7FFj
		mov	edx, [ebp+0B0h]
		test	edx, edx
		jnz	loc_6E4415A0

loc_6E44118A:				; CODE XREF: i2d_SSL_SESSION+C9Bj
		mov	eax, [ebp+0F0h]
		test	eax, eax
		jz	short loc_6E4411CF
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 0Ch
		mov	eax, [esp+1BCh+var_188]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_2C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING

loc_6E4411CF:				; CODE XREF: i2d_SSL_SESSION+852j
		mov	eax, [esp+1BCh+var_164]
		mov	edx, [esp+1BCh+arg_4]
		mov	[edx], eax
		mov	eax, [esp+1BCh+var_1A0]

loc_6E4411E0:				; CODE XREF: i2d_SSL_SESSION+5A3j
		add	esp, 1ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4411F0:				; CODE XREF: i2d_SSL_SESSION+E7j
		mov	[esp+1BCh+var_168], al
		mov	[esp+1BCh+var_FC], 1
		mov	[esp+1BCh+var_F8], 4
		lea	eax, [esp+1BCh+var_168]
		mov	[esp+1BCh+var_F4], eax
		jmp	loc_6E440A2D
; ---------------------------------------------------------------------------
		align 10h

loc_6E441220:				; CODE XREF: i2d_SSL_SESSION+3DEj
		mov	[esp+1BCh+var_184], 0
		mov	eax, [ebp+0E4h]
		test	eax, eax
		jnz	loc_6E440D67

loc_6E441236:				; CODE XREF: i2d_SSL_SESSION+421j
		mov	[esp+1BCh+var_194], 0
		mov	eax, [ebp+0D0h]
		test	eax, eax
		jnz	loc_6E440DAA

loc_6E44124C:				; CODE XREF: i2d_SSL_SESSION+464j
		mov	[esp+1BCh+var_198], 0
		mov	eax, [ebp+0B0h]
		test	eax, eax
		jz	loc_6E440DED

loc_6E441262:				; CODE XREF: i2d_SSL_SESSION+4A7j
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_FC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	[esp+1BCh+var_174], eax
		mov	[esp+1BCh+var_1B4], 0Bh
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax
		mov	eax, [ebp+8Ch]
		test	eax, eax
		jnz	loc_6E440E03

loc_6E4412A5:				; CODE XREF: i2d_SSL_SESSION+4BDj
		mov	[esp+1BCh+var_190], 0
		mov	eax, [ebp+90h]
		test	eax, eax
		jnz	loc_6E440E46

loc_6E4412BB:				; CODE XREF: i2d_SSL_SESSION+500j
		mov	[esp+1BCh+var_18C], 0
		mov	eax, [ebp+0F0h]
		test	eax, eax
		jnz	loc_6E440E89

loc_6E4412D1:				; CODE XREF: i2d_SSL_SESSION+543j
		mov	[esp+1BCh+var_188], 0
		jmp	loc_6E440EBE
; ---------------------------------------------------------------------------
		align 10h

loc_6E4412E0:				; CODE XREF: i2d_SSL_SESSION+21j
		mov	eax, [ebp+0B8h]
		test	eax, eax
		jnz	loc_6E440967

loc_6E4412EE:				; CODE XREF: i2d_SSL_SESSION+13j
		xor	eax, eax
		add	esp, 1ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E441300:				; CODE XREF: i2d_SSL_SESSION+17Fj
		mov	[esp+1BCh+var_9C], 8
		mov	[esp+1BCh+var_98], 2
		lea	ecx, [esp+1BCh+var_144]
		mov	[esp+1BCh+var_94], ecx
		mov	[esp+1BCh+var_1B8], eax
		lea	eax, [esp+1BCh+var_9C]
		mov	[esp+1BCh+Str],	eax
		call	ASN1_INTEGER_set
		mov	eax, [ebp+0A0h]
		test	eax, eax
		jz	loc_6E440AD3

loc_6E441342:				; CODE XREF: i2d_SSL_SESSION+18Dj
		mov	[esp+1BCh+var_8C], 8
		mov	[esp+1BCh+var_88], 2
		lea	ecx, [esp+1BCh+var_13C]
		mov	[esp+1BCh+var_84], ecx
		mov	[esp+1BCh+var_1B8], eax
		lea	eax, [esp+1BCh+var_8C]
		mov	[esp+1BCh+Str],	eax
		call	ASN1_INTEGER_set
		jmp	loc_6E440AD3
; ---------------------------------------------------------------------------
		align 10h

loc_6E441380:				; CODE XREF: i2d_SSL_SESSION+171j
		mov	[esp+1BCh+var_AC], 8
		mov	[esp+1BCh+var_A8], 2
		lea	ecx, [esp+1BCh+var_14C]
		mov	[esp+1BCh+var_A4], ecx
		mov	[esp+1BCh+var_1B8], eax
		lea	eax, [esp+1BCh+var_AC]
		mov	[esp+1BCh+Str],	eax
		call	ASN1_INTEGER_set
		jmp	loc_6E440AB7
; ---------------------------------------------------------------------------
		align 10h

loc_6E4413C0:				; CODE XREF: i2d_SSL_SESSION+3C8j
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_8C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_INTEGER
		mov	[esp+1BCh+var_178], eax
		mov	[esp+1BCh+var_1B4], 5
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax
		jmp	loc_6E440D16
; ---------------------------------------------------------------------------
		align 10h

loc_6E441400:				; CODE XREF: i2d_SSL_SESSION+341j
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_9C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_INTEGER
		mov	[esp+1BCh+var_17C], eax
		mov	[esp+1BCh+var_1B4], 2
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax
		mov	eax, [ebp+9Ch]
		test	eax, eax
		jnz	loc_6E440C9D

loc_6E441443:				; CODE XREF: i2d_SSL_SESSION+357j
		mov	[esp+1BCh+var_170], 0
		jmp	loc_6E440CCB
; ---------------------------------------------------------------------------

loc_6E441450:				; CODE XREF: i2d_SSL_SESSION+32Bj
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_AC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_INTEGER
		mov	[esp+1BCh+var_180], eax
		mov	[esp+1BCh+var_1B4], 1
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+Str],	1
		call	ASN1_object_size
		add	ebx, eax
		jmp	loc_6E440C79
; ---------------------------------------------------------------------------
		align 10h

loc_6E441490:				; CODE XREF: i2d_SSL_SESSION+31Dj
		mov	[esp+1BCh+var_1B8], 0
		lea	eax, [esp+1BCh+var_BC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		add	ebx, eax
		jmp	loc_6E440C63
; ---------------------------------------------------------------------------
		align 10h

loc_6E4414B0:				; CODE XREF: i2d_SSL_SESSION+C1j
		mov	[esp+1BCh+var_10C], 3
		mov	ecx, eax
		sar	ecx, 10h
		mov	[esp+1BCh+var_160], cl
		mov	ecx, eax
		sar	ecx, 8
		mov	[esp+1BCh+var_15F], cl
		mov	[esp+1BCh+var_15E], al
		jmp	loc_6E440A1F
; ---------------------------------------------------------------------------
		align 10h

loc_6E4414E0:				; CODE XREF: i2d_SSL_SESSION+634j
		mov	esi, [esp+1BCh+var_164]
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_BC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		mov	al, [esi]
		and	eax, 20h
		or	eax, 0FFFFFF80h
		mov	[esi], al
		mov	eax, [ebp+0ACh]
		test	eax, eax
		jz	loc_6E440F88

loc_6E44150F:				; CODE XREF: i2d_SSL_SESSION+642j
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 1
		mov	eax, [esp+1BCh+var_180]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_AC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_INTEGER
		mov	eax, [ebp+0A8h]
		test	eax, eax
		jz	loc_6E440F96

loc_6E441558:				; CODE XREF: i2d_SSL_SESSION+650j
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 2
		mov	eax, [esp+1BCh+var_17C]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_9C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_INTEGER
		jmp	loc_6E440F96
; ---------------------------------------------------------------------------
		align 10h

loc_6E4415A0:				; CODE XREF: i2d_SSL_SESSION+844j
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 0Bh
		mov	eax, [esp+1BCh+var_174]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_FC]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_OCTET_STRING
		jmp	loc_6E44118A
; ---------------------------------------------------------------------------

loc_6E4415E0:				; CODE XREF: i2d_SSL_SESSION+6DDj
		mov	[esp+1BCh+var_1AC], 80h
		mov	[esp+1BCh+var_1B0], 5
		mov	eax, [esp+1BCh+var_178]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], 1
		mov	[esp+1BCh+Str],	ebx
		call	ASN1_put_object
		mov	[esp+1BCh+var_1B8], ebx
		lea	eax, [esp+1BCh+var_8C]
		mov	[esp+1BCh+Str],	eax
		call	i2d_ASN1_INTEGER
		jmp	loc_6E441023
; ---------------------------------------------------------------------------

loc_6E441620:				; CODE XREF: i2d_SSL_SESSION+B4j
		mov	eax, [ebp+0B8h]
		jmp	loc_6E4409FD
i2d_SSL_SESSION	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 119. d2i_SSL_SESSION

; =============== S U B	R O U T	I N E =======================================


		public d2i_SSL_SESSION
d2i_SSL_SESSION	proc near		; CODE XREF: sub_6E405C70+F1p
					; sub_6E41AA30+2D8p
					; DATA XREF: ...

Time		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= byte ptr -74h
var_70		= byte ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_50		= dword	ptr -50h
var_48		= dword	ptr -48h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	ebp, [esp+9Ch+arg_4]
		mov	[esp+9Ch+var_24], ebp
		mov	eax, [ebp+0]
		mov	[esp+9Ch+var_28], eax
		mov	[esp+9Ch+var_40], 3Ah
		mov	edx, [esp+9Ch+arg_0]
		test	edx, edx
		jz	loc_6E4418C0
		mov	edi, [esp+9Ch+arg_0]
		mov	ebx, [edi]
		test	ebx, ebx
		jz	loc_6E4418C0

loc_6E441674:				; CODE XREF: d2i_SSL_SESSION+29Ej
		lea	edx, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_7C], edx
		lea	edx, [esp+9Ch+var_58]
		mov	[esp+9Ch+var_78], edx
		mov	[esp+9Ch+var_48], eax
		mov	edx, [esp+9Ch+arg_8]
		test	edx, edx
		jnz	loc_6E441740
		xor	eax, eax

loc_6E441699:				; CODE XREF: d2i_SSL_SESSION+112j
		mov	[esp+9Ch+var_2C], eax
		lea	eax, [esp+9Ch+arg_8]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	asn1_GetSequence
		test	eax, eax
		jnz	loc_6E441750
		mov	[esp+9Ch+var_20], 18Ah
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 18Ah

loc_6E4416CD:				; CODE XREF: d2i_SSL_SESSION+281j
					; d2i_SSL_SESSION+2C1j	...
		mov	[esp+9Ch+var_8C], edx
		mov	[esp+9Ch+var_90], offset aSsl_asn1_c ; "ssl_asn1.c"
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 67h
		mov	[esp+9Ch+Time],	0Dh
		call	ERR_put_error
		mov	edx, [ebp+0]
		mov	eax, [esp+9Ch+var_28]
		sub	eax, edx
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Time],	edx
		call	asn1_add_error
		mov	eax, [esp+9Ch+arg_0]
		test	eax, eax
		jz	short loc_6E441720
		mov	eax, [esp+9Ch+arg_0]
		cmp	ebx, [eax]
		jz	loc_6E441930

loc_6E441720:				; CODE XREF: d2i_SSL_SESSION+DFj
		mov	[esp+9Ch+Time],	ebx
		call	SSL_SESSION_free
		xor	eax, eax

loc_6E44172A:				; CODE XREF: d2i_SSL_SESSION+35Bj
					; d2i_SSL_SESSION+AD6j	...
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E441740:				; CODE XREF: d2i_SSL_SESSION+61j
		add	eax, edx
		jmp	loc_6E441699
; ---------------------------------------------------------------------------
		align 10h

loc_6E441750:				; CODE XREF: d2i_SSL_SESSION+86j
		mov	[esp+9Ch+var_60], 0
		mov	[esp+9Ch+var_68], 0
		mov	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_28], eax
		mov	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_INTEGER
		test	eax, eax
		jz	loc_6E441E30
		mov	edx, [esp+9Ch+var_48]
		mov	eax, [esp+9Ch+var_28]
		sub	eax, edx
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_30], eax
		mov	ecx, [esp+9Ch+var_60]
		test	ecx, ecx
		jz	short loc_6E4417C6
		mov	[esp+9Ch+Time],	ecx
		call	CRYPTO_free
		mov	[esp+9Ch+var_60], 0
		mov	[esp+9Ch+var_68], 0
		mov	edx, [esp+9Ch+var_48]
		mov	eax, [esp+9Ch+var_30]

loc_6E4417C6:				; CODE XREF: d2i_SSL_SESSION+174j
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_INTEGER
		test	eax, eax
		jz	loc_6E4418E0
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	[esp+9Ch+var_30], eax
		mov	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_INTEGER_get
		mov	esi, eax
		mov	[ebx], eax
		mov	eax, [esp+9Ch+var_60]
		test	eax, eax
		jz	short loc_6E441826
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free
		mov	[esp+9Ch+var_60], 0
		mov	[esp+9Ch+var_68], 0

loc_6E441826:				; CODE XREF: d2i_SSL_SESSION+1DCj
		mov	[esp+9Ch+var_50], 0
		mov	[esp+9Ch+var_58], 0
		mov	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_28], eax
		mov	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	loc_6E441E80
		mov	eax, [esp+9Ch+var_48]
		mov	edx, [esp+9Ch+var_28]
		sub	edx, eax
		add	edx, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_30], edx
		cmp	esi, 2
		jz	loc_6E441E50
		mov	ecx, esi
		sar	ecx, 8
		cmp	ecx, 3
		jz	short loc_6E441900
		cmp	ecx, 0FEh
		jz	short loc_6E441900
		cmp	esi, 100h
		jz	short loc_6E441900
		mov	[esp+9Ch+var_40], 0FEh
		mov	[esp+9Ch+var_20], 1B7h
		mov	eax, 0FEh
		mov	edx, 1B7h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------
		align 10h

loc_6E4418C0:				; CODE XREF: d2i_SSL_SESSION+2Dj
					; d2i_SSL_SESSION+3Ej
		call	SSL_SESSION_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E441940
		mov	eax, [ebp+0]
		jmp	loc_6E441674
; ---------------------------------------------------------------------------
		align 10h

loc_6E4418E0:				; CODE XREF: d2i_SSL_SESSION+1B4j
		mov	[esp+9Ch+var_20], 196h
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 196h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------
		align 10h

loc_6E441900:				; CODE XREF: d2i_SSL_SESSION+255j
					; d2i_SSL_SESSION+25Dj	...
		cmp	[esp+9Ch+var_58], 2
		jz	loc_6E441990
		mov	[esp+9Ch+var_40], 89h
		mov	[esp+9Ch+var_20], 1B0h
		mov	eax, 89h
		mov	edx, 1B0h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------
		align 10h

loc_6E441930:				; CODE XREF: d2i_SSL_SESSION+EAj
		xor	eax, eax
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E441940:				; CODE XREF: d2i_SSL_SESSION+299j
		mov	[esp+9Ch+var_20], 184h
		mov	[esp+9Ch+var_8C], 184h
		mov	[esp+9Ch+var_90], offset aSsl_asn1_c ; "ssl_asn1.c"
		mov	eax, [esp+9Ch+var_40]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], 67h
		mov	[esp+9Ch+Time],	0Dh
		call	ERR_put_error
		mov	edx, [ebp+0]
		mov	eax, [esp+9Ch+var_28]
		sub	eax, edx
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Time],	edx
		call	asn1_add_error
		xor	eax, eax
		jmp	loc_6E44172A
; ---------------------------------------------------------------------------

loc_6E441990:				; CODE XREF: d2i_SSL_SESSION+2D5j
		mov	esi, [esp+9Ch+var_50]
		xor	ecx, ecx
		mov	cl, [esi+1]
		or	ecx, 3000000h
		movzx	edi, byte ptr [esi]
		and	edi, 0FFh
		mov	esi, edi
		shl	esi, 8
		or	ecx, esi

loc_6E4419AF:				; CODE XREF: d2i_SSL_SESSION+894j
		mov	dword ptr [ebx+0B4h], 0
		mov	[ebx+0B8h], ecx
		mov	[esp+9Ch+var_28], eax
		mov	[esp+9Ch+var_94], edx
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	loc_6E441F59
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	[esp+9Ch+var_30], eax
		mov	eax, [esp+9Ch+var_58]
		cmp	eax, 20h
		jle	short loc_6E441A05
		mov	[esp+9Ch+var_58], 20h
		mov	eax, 20h

loc_6E441A05:				; CODE XREF: d2i_SSL_SESSION+3C6j
		mov	[ebx+44h], eax
		lea	edi, [ebx+48h]
		mov	esi, [esp+9Ch+var_50]
		cmp	eax, 4
		jnb	loc_6E441EC9

loc_6E441A18:				; CODE XREF: d2i_SSL_SESSION+8B8j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E441A29
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E441A29:				; CODE XREF: d2i_SSL_SESSION+3ECj
		test	al, 1
		jz	short loc_6E441A37
		mov	al, [esi+edx]
		mov	byte ptr [esp+9Ch+var_80], al
		mov	[edi+edx], al

loc_6E441A37:				; CODE XREF: d2i_SSL_SESSION+3FBj
		mov	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_28], eax
		mov	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	loc_6E441F6F
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	[esp+9Ch+var_30], eax
		mov	eax, [esp+9Ch+var_58]
		cmp	eax, 30h
		jle	short loc_6E441A7D
		mov	eax, 30h

loc_6E441A7D:				; CODE XREF: d2i_SSL_SESSION+446j
		mov	[ebx+10h], eax
		lea	edi, [ebx+14h]
		mov	esi, [esp+9Ch+var_50]
		cmp	eax, 4
		jnb	loc_6E441F02

loc_6E441A90:				; CODE XREF: d2i_SSL_SESSION+8F1j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E441AA1
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E441AA1:				; CODE XREF: d2i_SSL_SESSION+464j
		test	al, 1
		jz	short loc_6E441AAF
		mov	al, [esi+edx]
		mov	byte ptr [esp+9Ch+var_80], al
		mov	[edi+edx], al

loc_6E441AAF:				; CODE XREF: d2i_SSL_SESSION+473j
		mov	[esp+9Ch+var_58], 0
		mov	eax, [esp+9Ch+var_30]
		test	eax, eax
		jz	short loc_6E441AD6
		mov	eax, [esp+9Ch+var_48]
		mov	dl, [eax]
		mov	ecx, edx
		and	ecx, 0DFh
		add	ecx, 0FFFFFF80h
		jz	loc_6E441DBE

loc_6E441AD6:				; CODE XREF: d2i_SSL_SESSION+48Dj
		xor	eax, eax

loc_6E441AD8:				; CODE XREF: d2i_SSL_SESSION+7E3j
					; d2i_SSL_SESSION+7EEj
		mov	[ebx+4], eax
		lea	edi, [ebx+8]
		mov	esi, [esp+9Ch+var_50]
		cmp	eax, 4
		jnb	loc_6E441F26

loc_6E441AEB:				; CODE XREF: d2i_SSL_SESSION+915j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E441AFC
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E441AFC:				; CODE XREF: d2i_SSL_SESSION+4BFj
		test	al, 1
		jz	short loc_6E441B0A
		mov	al, [esi+edx]
		mov	byte ptr [esp+9Ch+var_80], al
		mov	[edi+edx], al

loc_6E441B0A:				; CODE XREF: d2i_SSL_SESSION+4CEj
		mov	eax, [esp+9Ch+var_50]
		test	eax, eax
		jz	short loc_6E441B1A
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free

loc_6E441B1A:				; CODE XREF: d2i_SSL_SESSION+4E0j
		mov	[esp+9Ch+var_68], 0
		mov	eax, [esp+9Ch+var_30]
		test	eax, eax
		jz	short loc_6E441B37
		mov	edx, [esp+9Ch+var_48]
		cmp	byte ptr [edx],	0A1h
		jz	loc_6E442141

loc_6E441B37:				; CODE XREF: d2i_SSL_SESSION+4F8j
					; d2i_SSL_SESSION+D07j
		mov	eax, [esp+9Ch+var_60]
		test	eax, eax
		jz	loc_6E4420AF
		mov	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_INTEGER_get
		mov	[ebx+0ACh], eax
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free
		mov	[esp+9Ch+var_60], 0

loc_6E441B69:				; CODE XREF: d2i_SSL_SESSION+A91j
		mov	[esp+9Ch+var_68], 0
		mov	eax, [esp+9Ch+var_30]
		test	eax, eax
		jz	short loc_6E441B86
		mov	edx, [esp+9Ch+var_48]
		cmp	byte ptr [edx],	0A2h
		jz	loc_6E442193

loc_6E441B86:				; CODE XREF: d2i_SSL_SESSION+547j
					; d2i_SSL_SESSION+DA3j
		mov	eax, [esp+9Ch+var_60]
		test	eax, eax
		jz	loc_6E441F4A
		mov	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_INTEGER_get
		mov	[ebx+0A8h], eax
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free
		mov	[esp+9Ch+var_60], 0
		mov	[esp+9Ch+var_68], 0

loc_6E441BC0:				; CODE XREF: d2i_SSL_SESSION+924j
		mov	eax, [ebx+9Ch]
		test	eax, eax
		jz	short loc_6E441BDC
		mov	[esp+9Ch+Time],	eax
		call	X509_free
		mov	dword ptr [ebx+9Ch], 0

loc_6E441BDC:				; CODE XREF: d2i_SSL_SESSION+598j
		mov	eax, [esp+9Ch+var_30]
		test	eax, eax
		jz	loc_6E441EED
		mov	edx, [esp+9Ch+var_48]
		cmp	byte ptr [edx],	0A3h
		jz	loc_6E442246
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0

loc_6E441C05:				; CODE XREF: d2i_SSL_SESSION+D5Fj
		cmp	byte ptr [edx],	0A4h
		jz	loc_6E4421F4

loc_6E441C0E:				; CODE XREF: d2i_SSL_SESSION+8CDj
					; d2i_SSL_SESSION+D65j	...
		mov	dword ptr [ebx+68h], 0

loc_6E441C15:				; CODE XREF: d2i_SSL_SESSION+E63j
		mov	[esp+9Ch+var_68], 0
		test	eax, eax
		jz	short loc_6E441C2E
		mov	edx, [esp+9Ch+var_48]
		cmp	byte ptr [edx],	0A5h
		jz	loc_6E4424B9

loc_6E441C2E:				; CODE XREF: d2i_SSL_SESSION+5EFj
					; d2i_SSL_SESSION+14F4j
		mov	edi, [esp+9Ch+var_60]
		test	edi, edi
		jz	loc_6E44210B
		mov	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_INTEGER_get
		mov	[ebx+0A0h], eax
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free
		mov	[esp+9Ch+var_60], 0
		mov	[esp+9Ch+var_68], 0

loc_6E441C68:				; CODE XREF: d2i_SSL_SESSION+AE5j
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0
		mov	eax, [esp+9Ch+var_30]
		test	eax, eax
		jnz	loc_6E441F85

loc_6E441C84:				; CODE XREF: d2i_SSL_SESSION+95Cj
					; d2i_SSL_SESSION+12EEj
		mov	dword ptr [ebx+0D0h], 0

loc_6E441C8E:				; CODE XREF: d2i_SSL_SESSION+131Aj
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0
		test	eax, eax
		jnz	loc_6E441FF0

loc_6E441CA6:				; CODE XREF: d2i_SSL_SESSION+9C7j
					; d2i_SSL_SESSION+1362j
		mov	dword ptr [ebx+8Ch], 0

loc_6E441CB0:				; CODE XREF: d2i_SSL_SESSION+138Ej
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0
		test	eax, eax
		jnz	loc_6E442050

loc_6E441CC8:				; CODE XREF: d2i_SSL_SESSION+A27j
					; d2i_SSL_SESSION+11EEj
		mov	dword ptr [ebx+90h], 0

loc_6E441CD2:				; CODE XREF: d2i_SSL_SESSION+122Aj
		mov	[esp+9Ch+var_68], 0
		test	eax, eax
		jz	short loc_6E441CEB
		mov	edx, [esp+9Ch+var_48]
		cmp	byte ptr [edx],	0A9h
		jz	loc_6E44255D

loc_6E441CEB:				; CODE XREF: d2i_SSL_SESSION+6ACj
					; d2i_SSL_SESSION+13CCj
		mov	esi, [esp+9Ch+var_60]
		test	esi, esi
		jz	loc_6E44211A
		mov	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_INTEGER_get
		mov	[ebx+0ECh], eax
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free
		mov	[esp+9Ch+var_60], 0
		mov	[esp+9Ch+var_68], 0

loc_6E441D25:				; CODE XREF: d2i_SSL_SESSION+B0Cj
					; d2i_SSL_SESSION+BBFj
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0
		mov	eax, [esp+9Ch+var_30]
		test	eax, eax
		jz	loc_6E4420C6
		mov	edx, [esp+9Ch+var_48]
		cmp	byte ptr [edx],	0AAh
		jz	loc_6E442601
		mov	dword ptr [ebx+0E4h], 0
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0

loc_6E441D68:				; CODE XREF: d2i_SSL_SESSION+155Ej
		cmp	byte ptr [edx],	0ABh
		jz	loc_6E4425AF
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0

loc_6E441D81:				; CODE XREF: d2i_SSL_SESSION+1448j
		cmp	byte ptr [edx],	0ACh
		jz	loc_6E44250B

loc_6E441D8A:				; CODE XREF: d2i_SSL_SESSION+AB0j
					; d2i_SSL_SESSION+126Ej ...
		mov	dword ptr [ebx+0F0h], 0

loc_6E441D94:				; CODE XREF: d2i_SSL_SESSION+12A6j
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	asn1_const_Finish
		test	eax, eax
		jnz	loc_6E4420E5
		mov	[esp+9Ch+var_20], 27Bh
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 27Bh
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E441DBE:				; CODE XREF: d2i_SSL_SESSION+4A0j
		mov	cl, dl
		mov	[esp+9Ch+var_80], edx
		and	ecx, 20h
		or	ecx, 4
		mov	[eax], cl
		mov	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_28], eax
		mov	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		mov	edx, [esp+9Ch+var_80]
		jz	loc_6E44265A
		mov	eax, [esp+9Ch+var_28]
		mov	ecx, eax
		sub	ecx, [esp+9Ch+var_48]
		add	[esp+9Ch+var_30], ecx
		mov	[eax], dl
		mov	eax, [esp+9Ch+var_58]
		cmp	eax, 8
		jle	loc_6E441AD8
		mov	eax, 8
		jmp	loc_6E441AD8
; ---------------------------------------------------------------------------
		align 10h

loc_6E441E30:				; CODE XREF: d2i_SSL_SESSION+156j
		mov	[esp+9Ch+var_20], 18Eh
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 18Eh
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------
		align 10h

loc_6E441E50:				; CODE XREF: d2i_SSL_SESSION+247j
		cmp	[esp+9Ch+var_58], 3
		jz	short loc_6E441E96
		mov	[esp+9Ch+var_40], 89h
		mov	[esp+9Ch+var_20], 1A5h
		mov	eax, 89h
		mov	edx, 1A5h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------
		align 10h

loc_6E441E80:				; CODE XREF: d2i_SSL_SESSION+22Cj
		mov	[esp+9Ch+var_20], 1A1h
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 1A1h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E441E96:				; CODE XREF: d2i_SSL_SESSION+825j
		mov	esi, [esp+9Ch+var_50]
		xor	ecx, ecx
		mov	cl, [esi+2]
		or	ecx, 2000000h
		movzx	edi, byte ptr [esi]
		and	edi, 0FFh
		shl	edi, 10h
		or	ecx, edi
		movzx	edi, byte ptr [esi+1]
		and	edi, 0FFh
		mov	esi, edi
		shl	esi, 8
		or	ecx, esi
		jmp	loc_6E4419AF
; ---------------------------------------------------------------------------

loc_6E441EC9:				; CODE XREF: d2i_SSL_SESSION+3E2j
		test	edi, 1
		jnz	loc_6E4422AC

loc_6E441ED5:				; CODE XREF: d2i_SSL_SESSION+C85j
		test	edi, 2
		jnz	loc_6E442298

loc_6E441EE1:				; CODE XREF: d2i_SSL_SESSION+C77j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E441A18
; ---------------------------------------------------------------------------

loc_6E441EED:				; CODE XREF: d2i_SSL_SESSION+5B2j
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0
		jmp	loc_6E441C0E
; ---------------------------------------------------------------------------

loc_6E441F02:				; CODE XREF: d2i_SSL_SESSION+45Aj
		test	edi, 1
		jnz	loc_6E4422F0

loc_6E441F0E:				; CODE XREF: d2i_SSL_SESSION+CC9j
		test	edi, 2
		jnz	loc_6E4422DC

loc_6E441F1A:				; CODE XREF: d2i_SSL_SESSION+CBBj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E441A90
; ---------------------------------------------------------------------------

loc_6E441F26:				; CODE XREF: d2i_SSL_SESSION+4B5j
		test	edi, 1
		jnz	loc_6E4422CE

loc_6E441F32:				; CODE XREF: d2i_SSL_SESSION+CA7j
		test	edi, 2
		jnz	loc_6E4422BA

loc_6E441F3E:				; CODE XREF: d2i_SSL_SESSION+C99j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_6E441AEB
; ---------------------------------------------------------------------------

loc_6E441F4A:				; CODE XREF: d2i_SSL_SESSION+55Cj
		mov	dword ptr [ebx+0A8h], 3
		jmp	loc_6E441BC0
; ---------------------------------------------------------------------------

loc_6E441F59:				; CODE XREF: d2i_SSL_SESSION+3ADj
		mov	[esp+9Ch+var_20], 1BEh
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 1BEh
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E441F6F:				; CODE XREF: d2i_SSL_SESSION+42Dj
		mov	[esp+9Ch+var_20], 1CDh
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 1CDh
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E441F85:				; CODE XREF: d2i_SSL_SESSION+64Ej
		mov	edx, [esp+9Ch+var_48]
		cmp	byte ptr [edx],	0A6h
		jnz	loc_6E441C84
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E4428DB
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 22Ah

loc_6E441FD6:				; CODE XREF: d2i_SSL_SESSION+17ECj
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 22Ah
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------
		align 10h

loc_6E441FF0:				; CODE XREF: d2i_SSL_SESSION+670j
		mov	edx, [esp+9Ch+var_48]
		cmp	byte ptr [edx],	0A7h
		jnz	loc_6E441CA6
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E44294F
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 237h

loc_6E442041:				; CODE XREF: d2i_SSL_SESSION+16A8j
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 237h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------
		align 10h

loc_6E442050:				; CODE XREF: d2i_SSL_SESSION+692j
		mov	edx, [esp+9Ch+var_48]
		cmp	byte ptr [edx],	0A8h
		jnz	loc_6E441CC8
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E4427DB
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 242h

loc_6E4420A1:				; CODE XREF: d2i_SSL_SESSION+1858j
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 242h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E4420AF:				; CODE XREF: d2i_SSL_SESSION+50Dj
		mov	[esp+9Ch+Time],	0 ; Time
		call	time
		mov	[ebx+0ACh], eax
		jmp	loc_6E441B69
; ---------------------------------------------------------------------------

loc_6E4420C6:				; CODE XREF: d2i_SSL_SESSION+70Bj
		mov	dword ptr [ebx+0E4h], 0

loc_6E4420D0:				; CODE XREF: d2i_SSL_SESSION+1564j
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0
		jmp	loc_6E441D8A
; ---------------------------------------------------------------------------

loc_6E4420E5:				; CODE XREF: d2i_SSL_SESSION+772j
		mov	eax, [esp+9Ch+var_48]
		mov	[ebp+0], eax
		mov	edx, [esp+9Ch+arg_0]
		test	edx, edx
		jz	loc_6E442653
		mov	eax, [esp+9Ch+arg_0]
		mov	[eax], ebx
		mov	eax, ebx
		jmp	loc_6E44172A
; ---------------------------------------------------------------------------

loc_6E44210B:				; CODE XREF: d2i_SSL_SESSION+604j
		mov	dword ptr [ebx+0A0h], 0
		jmp	loc_6E441C68
; ---------------------------------------------------------------------------

loc_6E44211A:				; CODE XREF: d2i_SSL_SESSION+6C1j
		mov	ecx, [ebx+0E8h]
		test	ecx, ecx
		jz	loc_6E4421E5
		cmp	dword ptr [ebx+44h], 0
		jz	loc_6E4421E5
		mov	dword ptr [ebx+0ECh], 0FFFFFFFFh
		jmp	loc_6E441D25
; ---------------------------------------------------------------------------

loc_6E442141:				; CODE XREF: d2i_SSL_SESSION+501j
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E4422FE
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 1F1h

loc_6E442185:				; CODE XREF: d2i_SSL_SESSION+1118j
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 1F1h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E442193:				; CODE XREF: d2i_SSL_SESSION+550j
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E44239A
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 1FBh

loc_6E4421D7:				; CODE XREF: d2i_SSL_SESSION+1184j
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 1FBh
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E4421E5:				; CODE XREF: d2i_SSL_SESSION+AF2j
					; d2i_SSL_SESSION+AFCj
		mov	dword ptr [ebx+0ECh], 0
		jmp	loc_6E441D25
; ---------------------------------------------------------------------------

loc_6E4421F4:				; CODE XREF: d2i_SSL_SESSION+5D8j
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E4423D8
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 20Ch

loc_6E442238:				; CODE XREF: d2i_SSL_SESSION+10ACj
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 20Ch
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E442246:				; CODE XREF: d2i_SSL_SESSION+5BFj
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E44233C
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 208h

loc_6E44228A:				; CODE XREF: d2i_SSL_SESSION+14B6j
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 208h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E442298:				; CODE XREF: d2i_SSL_SESSION+8ABj
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E441EE1
; ---------------------------------------------------------------------------

loc_6E4422AC:				; CODE XREF: d2i_SSL_SESSION+89Fj
		mov	cl, [esi]
		mov	[edi], cl
		lea	edi, [ebx+49h]
		inc	esi
		dec	eax
		jmp	loc_6E441ED5
; ---------------------------------------------------------------------------

loc_6E4422BA:				; CODE XREF: d2i_SSL_SESSION+908j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E441F3E
; ---------------------------------------------------------------------------

loc_6E4422CE:				; CODE XREF: d2i_SSL_SESSION+8FCj
		mov	cl, [esi]
		mov	[edi], cl
		lea	edi, [ebx+9]
		inc	esi
		dec	eax
		jmp	loc_6E441F32
; ---------------------------------------------------------------------------

loc_6E4422DC:				; CODE XREF: d2i_SSL_SESSION+8E4j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E441F1A
; ---------------------------------------------------------------------------

loc_6E4422F0:				; CODE XREF: d2i_SSL_SESSION+8D8j
		mov	cl, [esi]
		mov	[edi], cl
		lea	edi, [ebx+15h]
		inc	esi
		dec	eax
		jmp	loc_6E441F0E
; ---------------------------------------------------------------------------

loc_6E4422FE:				; CODE XREF: d2i_SSL_SESSION+B3Fj
		cmp	eax, 21h
		jz	loc_6E4426E1
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_INTEGER
		test	eax, eax
		jz	loc_6E442740

loc_6E44232B:				; CODE XREF: d2i_SSL_SESSION+1102j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	[esp+9Ch+var_30], eax
		jmp	loc_6E441B37
; ---------------------------------------------------------------------------

loc_6E44233C:				; CODE XREF: d2i_SSL_SESSION+C44j
		cmp	eax, 21h
		jz	loc_6E442A7D
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [ebx+9Ch]
		mov	[esp+9Ch+Time],	eax
		call	d2i_X509
		test	eax, eax
		jz	loc_6E442ADE

loc_6E44236B:				; CODE XREF: d2i_SSL_SESSION+14A0j
		mov	edx, [esp+9Ch+var_48]
		mov	eax, [esp+9Ch+var_28]
		sub	eax, edx
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_30], eax
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0
		test	eax, eax
		jnz	loc_6E441C05
		jmp	loc_6E441C0E
; ---------------------------------------------------------------------------

loc_6E44239A:				; CODE XREF: d2i_SSL_SESSION+B91j
		cmp	eax, 21h
		jz	loc_6E44274D
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_INTEGER
		test	eax, eax
		jz	loc_6E4427AC

loc_6E4423C7:				; CODE XREF: d2i_SSL_SESSION+116Ej
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	[esp+9Ch+var_30], eax
		jmp	loc_6E441B86
; ---------------------------------------------------------------------------

loc_6E4423D8:				; CODE XREF: d2i_SSL_SESSION+BF2j
		cmp	eax, 21h
		jz	loc_6E442675
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	loc_6E4426D4

loc_6E442405:				; CODE XREF: d2i_SSL_SESSION+1096j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_30], eax
		mov	esi, [esp+9Ch+var_50]
		test	esi, esi
		jz	loc_6E441C0E
		mov	eax, [esp+9Ch+var_58]
		cmp	eax, 20h
		jle	short loc_6E442449
		mov	[esp+9Ch+var_40], 10Fh
		mov	[esp+9Ch+var_20], 211h
		mov	eax, 10Fh
		mov	edx, 211h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E442449:				; CODE XREF: d2i_SSL_SESSION+DF8j
		mov	[ebx+68h], eax
		lea	edi, [ebx+6Ch]
		cmp	eax, 4
		jnb	short loc_6E442498

loc_6E442454:				; CODE XREF: d2i_SSL_SESSION+E87j
		xor	edx, edx
		test	al, 2
		jz	short loc_6E442465
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_6E442465:				; CODE XREF: d2i_SSL_SESSION+E28j
		test	al, 1
		jz	short loc_6E442473
		mov	al, [esi+edx]
		mov	byte ptr [esp+9Ch+var_80], al
		mov	[edi+edx], al

loc_6E442473:				; CODE XREF: d2i_SSL_SESSION+E37j
		mov	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free
		mov	[esp+9Ch+var_50], 0
		mov	[esp+9Ch+var_58], 0
		mov	eax, [esp+9Ch+var_30]
		jmp	loc_6E441C15
; ---------------------------------------------------------------------------

loc_6E442498:				; CODE XREF: d2i_SSL_SESSION+E22j
		test	edi, 1
		jnz	loc_6E4427CD

loc_6E4424A4:				; CODE XREF: d2i_SSL_SESSION+11A6j
		test	edi, 2
		jnz	loc_6E4427B9

loc_6E4424B0:				; CODE XREF: d2i_SSL_SESSION+1198j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	short loc_6E442454
; ---------------------------------------------------------------------------

loc_6E4424B9:				; CODE XREF: d2i_SSL_SESSION+5F8j
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E442AEB
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 21Eh

loc_6E4424FD:				; CODE XREF: d2i_SSL_SESSION+163Cj
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 21Eh
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E44250B:				; CODE XREF: d2i_SSL_SESSION+754j
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E44285F
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 271h

loc_6E44254F:				; CODE XREF: d2i_SSL_SESSION+18C4j
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 271h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E44255D:				; CODE XREF: d2i_SSL_SESSION+6B5j
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E4429C3
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 24Eh

loc_6E4425A1:				; CODE XREF: d2i_SSL_SESSION+1780j
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 24Eh
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E4425AF:				; CODE XREF: d2i_SSL_SESSION+73Bj
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E442A01
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 266h

loc_6E4425F3:				; CODE XREF: d2i_SSL_SESSION+1714j
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 266h
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E442601:				; CODE XREF: d2i_SSL_SESSION+718j
		mov	[esp+9Ch+var_28], edx
		mov	[esp+9Ch+var_8C], eax
		lea	eax, [esp+9Ch+var_70]
		mov	[esp+9Ch+var_90], eax
		lea	eax, [esp+9Ch+var_74]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_get_object
		test	al, 80h
		jz	loc_6E442B29
		mov	[esp+9Ch+var_40], 3Bh
		mov	[esp+9Ch+var_20], 25Ah

loc_6E442645:				; CODE XREF: d2i_SSL_SESSION+15D0j
		mov	eax, [esp+9Ch+var_40]
		mov	edx, 25Ah
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E442653:				; CODE XREF: d2i_SSL_SESSION+AC5j
		mov	eax, ebx
		jmp	loc_6E44172A
; ---------------------------------------------------------------------------

loc_6E44265A:				; CODE XREF: d2i_SSL_SESSION+7C6j
		mov	[esp+9Ch+var_20], 1E7h
		mov	eax, [esp+9Ch+var_28]
		mov	[eax], dl
		mov	edx, [esp+9Ch+var_20]
		mov	eax, [esp+9Ch+var_40]
		jmp	loc_6E4416CD
; ---------------------------------------------------------------------------

loc_6E442675:				; CODE XREF: d2i_SSL_SESSION+DABj
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	short loc_6E4426D4
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E442405
		mov	[esp+9Ch+var_40], 3Fh

loc_6E4426D4:				; CODE XREF: d2i_SSL_SESSION+DCFj
					; d2i_SSL_SESSION+1072j
		mov	[esp+9Ch+var_20], 20Ch
		jmp	loc_6E442238
; ---------------------------------------------------------------------------

loc_6E4426E1:				; CODE XREF: d2i_SSL_SESSION+CD1j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_INTEGER
		test	eax, eax
		jz	short loc_6E442740
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E44232B
		mov	[esp+9Ch+var_40], 3Fh

loc_6E442740:				; CODE XREF: d2i_SSL_SESSION+CF5j
					; d2i_SSL_SESSION+10DEj
		mov	[esp+9Ch+var_20], 1F1h
		jmp	loc_6E442185
; ---------------------------------------------------------------------------

loc_6E44274D:				; CODE XREF: d2i_SSL_SESSION+D6Dj
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_INTEGER
		test	eax, eax
		jz	short loc_6E4427AC
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E4423C7
		mov	[esp+9Ch+var_40], 3Fh

loc_6E4427AC:				; CODE XREF: d2i_SSL_SESSION+D91j
					; d2i_SSL_SESSION+114Aj
		mov	[esp+9Ch+var_20], 1FBh
		jmp	loc_6E4421D7
; ---------------------------------------------------------------------------

loc_6E4427B9:				; CODE XREF: d2i_SSL_SESSION+E7Aj
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_6E4424B0
; ---------------------------------------------------------------------------

loc_6E4427CD:				; CODE XREF: d2i_SSL_SESSION+E6Ej
		mov	cl, [esi]
		mov	[edi], cl
		lea	edi, [ebx+6Dh]
		inc	esi
		dec	eax
		jmp	loc_6E4424A4
; ---------------------------------------------------------------------------

loc_6E4427DB:				; CODE XREF: d2i_SSL_SESSION+A5Bj
		cmp	eax, 21h
		jz	loc_6E442E21
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	loc_6E442E80

loc_6E442808:				; CODE XREF: d2i_SSL_SESSION+1842j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_30], eax
		mov	edx, [esp+9Ch+var_50]
		test	edx, edx
		jz	loc_6E441CC8
		mov	eax, [esp+9Ch+var_58]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Time],	edx
		call	BUF_strndup
		mov	[ebx+90h], eax
		mov	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free
		mov	[esp+9Ch+var_50], 0
		mov	[esp+9Ch+var_58], 0
		mov	eax, [esp+9Ch+var_30]
		jmp	loc_6E441CD2
; ---------------------------------------------------------------------------

loc_6E44285F:				; CODE XREF: d2i_SSL_SESSION+F09j
		cmp	eax, 21h
		jz	loc_6E442E8D
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	loc_6E442EEC

loc_6E44288C:				; CODE XREF: d2i_SSL_SESSION+18AEj
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	[esp+9Ch+var_30], eax
		mov	edx, [esp+9Ch+var_50]
		test	edx, edx
		jz	loc_6E441D8A
		mov	eax, [esp+9Ch+var_58]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Time],	edx
		call	BUF_strndup
		mov	[ebx+0F0h], eax
		mov	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free
		mov	[esp+9Ch+var_50], 0
		mov	[esp+9Ch+var_58], 0
		jmp	loc_6E441D94
; ---------------------------------------------------------------------------

loc_6E4428DB:				; CODE XREF: d2i_SSL_SESSION+990j
		cmp	eax, 21h
		jz	loc_6E442DB5
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	loc_6E442E14

loc_6E442908:				; CODE XREF: d2i_SSL_SESSION+17D6j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_30], eax
		mov	edx, [esp+9Ch+var_50]
		test	edx, edx
		jz	loc_6E441C84
		mov	eax, [esp+9Ch+var_58]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Time],	edx
		call	BUF_strndup
		mov	[ebx+0D0h], eax
		mov	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free
		mov	eax, [esp+9Ch+var_30]
		jmp	loc_6E441C8E
; ---------------------------------------------------------------------------

loc_6E44294F:				; CODE XREF: d2i_SSL_SESSION+9FBj
		cmp	eax, 21h
		jz	loc_6E442C71
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	loc_6E442CD0

loc_6E44297C:				; CODE XREF: d2i_SSL_SESSION+1692j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_30], eax
		mov	edx, [esp+9Ch+var_50]
		test	edx, edx
		jz	loc_6E441CA6
		mov	eax, [esp+9Ch+var_58]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+Time],	edx
		call	BUF_strndup
		mov	[ebx+8Ch], eax
		mov	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+Time],	eax
		call	CRYPTO_free
		mov	eax, [esp+9Ch+var_30]
		jmp	loc_6E441CB0
; ---------------------------------------------------------------------------

loc_6E4429C3:				; CODE XREF: d2i_SSL_SESSION+F5Bj
		cmp	eax, 21h
		jz	loc_6E442D49
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_INTEGER
		test	eax, eax
		jz	loc_6E442DA8

loc_6E4429F0:				; CODE XREF: d2i_SSL_SESSION+176Aj
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	[esp+9Ch+var_30], eax
		jmp	loc_6E441CEB
; ---------------------------------------------------------------------------

loc_6E442A01:				; CODE XREF: d2i_SSL_SESSION+FADj
		cmp	eax, 21h
		jz	loc_6E442CDD
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	loc_6E442D3C

loc_6E442A2E:				; CODE XREF: d2i_SSL_SESSION+16FEj
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_30], eax
		mov	edx, [esp+9Ch+var_50]
		test	edx, edx
		jz	short loc_6E442A5C
		xor	eax, eax
		mov	al, [edx]
		mov	[ebx+0B0h], eax
		mov	[esp+9Ch+Time],	edx
		call	CRYPTO_free
		mov	eax, [esp+9Ch+var_30]

loc_6E442A5C:				; CODE XREF: d2i_SSL_SESSION+1414j
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0
		test	eax, eax
		jz	loc_6E441D8A
		mov	edx, [esp+9Ch+var_48]
		jmp	loc_6E441D81
; ---------------------------------------------------------------------------

loc_6E442A7D:				; CODE XREF: d2i_SSL_SESSION+D0Fj
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [ebx+9Ch]
		mov	[esp+9Ch+Time],	eax
		call	d2i_X509
		test	eax, eax
		jz	short loc_6E442ADE
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E44236B
		mov	[esp+9Ch+var_40], 3Fh

loc_6E442ADE:				; CODE XREF: d2i_SSL_SESSION+D35j
					; d2i_SSL_SESSION+147Cj
		mov	[esp+9Ch+var_20], 208h
		jmp	loc_6E44228A
; ---------------------------------------------------------------------------

loc_6E442AEB:				; CODE XREF: d2i_SSL_SESSION+EB7j
		cmp	eax, 21h
		jz	loc_6E442C05
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_INTEGER
		test	eax, eax
		jz	loc_6E442C64

loc_6E442B18:				; CODE XREF: d2i_SSL_SESSION+1626j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	[esp+9Ch+var_30], eax
		jmp	loc_6E441C2E
; ---------------------------------------------------------------------------

loc_6E442B29:				; CODE XREF: d2i_SSL_SESSION+FFFj
		cmp	eax, 21h
		jz	short loc_6E442B99
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	loc_6E442BF8

loc_6E442B52:				; CODE XREF: d2i_SSL_SESSION+15BAj
		mov	edx, [esp+9Ch+var_48]
		mov	eax, [esp+9Ch+var_28]
		sub	eax, edx
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_30], eax
		mov	esi, [esp+9Ch+var_50]
		test	esi, esi
		jz	short loc_6E442B76
		mov	ecx, [esp+9Ch+var_58]
		mov	[ebx+0E8h], ecx

loc_6E442B76:				; CODE XREF: d2i_SSL_SESSION+153Aj
		mov	[ebx+0E4h], esi
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_50], 0
		test	eax, eax
		jnz	loc_6E441D68
		jmp	loc_6E4420D0
; ---------------------------------------------------------------------------

loc_6E442B99:				; CODE XREF: d2i_SSL_SESSION+14FCj
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	short loc_6E442BF8
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E442B52
		mov	[esp+9Ch+var_40], 3Fh

loc_6E442BF8:				; CODE XREF: d2i_SSL_SESSION+151Cj
					; d2i_SSL_SESSION+1596j
		mov	[esp+9Ch+var_20], 25Ah
		jmp	loc_6E442645
; ---------------------------------------------------------------------------

loc_6E442C05:				; CODE XREF: d2i_SSL_SESSION+14BEj
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_INTEGER
		test	eax, eax
		jz	short loc_6E442C64
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E442B18
		mov	[esp+9Ch+var_40], 3Fh

loc_6E442C64:				; CODE XREF: d2i_SSL_SESSION+14E2j
					; d2i_SSL_SESSION+1602j
		mov	[esp+9Ch+var_20], 21Eh
		jmp	loc_6E4424FD
; ---------------------------------------------------------------------------

loc_6E442C71:				; CODE XREF: d2i_SSL_SESSION+1322j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	short loc_6E442CD0
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E44297C
		mov	[esp+9Ch+var_40], 3Fh

loc_6E442CD0:				; CODE XREF: d2i_SSL_SESSION+1346j
					; d2i_SSL_SESSION+166Ej
		mov	[esp+9Ch+var_20], 237h
		jmp	loc_6E442041
; ---------------------------------------------------------------------------

loc_6E442CDD:				; CODE XREF: d2i_SSL_SESSION+13D4j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	short loc_6E442D3C
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E442A2E
		mov	[esp+9Ch+var_40], 3Fh

loc_6E442D3C:				; CODE XREF: d2i_SSL_SESSION+13F8j
					; d2i_SSL_SESSION+16DAj
		mov	[esp+9Ch+var_20], 266h
		jmp	loc_6E4425F3
; ---------------------------------------------------------------------------

loc_6E442D49:				; CODE XREF: d2i_SSL_SESSION+1396j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_7C]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_INTEGER
		test	eax, eax
		jz	short loc_6E442DA8
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E4429F0
		mov	[esp+9Ch+var_40], 3Fh

loc_6E442DA8:				; CODE XREF: d2i_SSL_SESSION+13BAj
					; d2i_SSL_SESSION+1746j
		mov	[esp+9Ch+var_20], 24Eh
		jmp	loc_6E4425A1
; ---------------------------------------------------------------------------

loc_6E442DB5:				; CODE XREF: d2i_SSL_SESSION+12AEj
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	short loc_6E442E14
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E442908
		mov	[esp+9Ch+var_40], 3Fh

loc_6E442E14:				; CODE XREF: d2i_SSL_SESSION+12D2j
					; d2i_SSL_SESSION+17B2j
		mov	[esp+9Ch+var_20], 22Ah
		jmp	loc_6E441FD6
; ---------------------------------------------------------------------------

loc_6E442E21:				; CODE XREF: d2i_SSL_SESSION+11AEj
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	short loc_6E442E80
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E442808
		mov	[esp+9Ch+var_40], 3Fh

loc_6E442E80:				; CODE XREF: d2i_SSL_SESSION+11D2j
					; d2i_SSL_SESSION+181Ej
		mov	[esp+9Ch+var_20], 242h
		jmp	loc_6E4420A1
; ---------------------------------------------------------------------------

loc_6E442E8D:				; CODE XREF: d2i_SSL_SESSION+1232j
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		sub	eax, 2
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_94], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+Time],	eax
		call	d2i_ASN1_OCTET_STRING
		test	eax, eax
		jz	short loc_6E442EEC
		mov	eax, [esp+9Ch+var_28]
		sub	eax, [esp+9Ch+var_48]
		add	eax, [esp+9Ch+var_30]
		mov	[esp+9Ch+var_6C], eax
		mov	[esp+9Ch+var_98], eax
		lea	eax, [esp+9Ch+var_48]
		mov	[esp+9Ch+Time],	eax
		call	ASN1_const_check_infinite_end
		test	eax, eax
		jnz	loc_6E44288C
		mov	[esp+9Ch+var_40], 3Fh

loc_6E442EEC:				; CODE XREF: d2i_SSL_SESSION+1256j
					; d2i_SSL_SESSION+188Aj
		mov	[esp+9Ch+var_20], 271h
		jmp	loc_6E44254F
d2i_SSL_SESSION	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  33. SSL_SESSION_print

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_print
SSL_SESSION_print proc near		; CODE XREF: SSL_SESSION_print_fp+43p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	edi, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		test	ebx, ebx
		jz	loc_6E443000
		mov	[esp+3Ch+var_38], offset aSslSession ; "SSL-Session:\n"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000
		mov	eax, [ebx]
		cmp	eax, 2
		jz	loc_6E443010
		cmp	eax, 300h
		jz	loc_6E443120
		cmp	eax, 303h
		jz	loc_6E443130
		cmp	eax, 302h
		jz	loc_6E4430B0
		cmp	eax, 301h
		jz	loc_6E4431E0
		cmp	eax, 0FEFFh
		jz	loc_6E4431EA
		cmp	eax, 100h
		jz	loc_6E443249
		mov	eax, offset aUnknown_2 ; "unknown"
		jmp	loc_6E443015
; ---------------------------------------------------------------------------

loc_6E442F85:				; CODE XREF: SSL_SESSION_print+4BBj
		mov	[esp+3Ch+var_10], 0
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], ebx
		call	sub_6E43B840
		mov	eax, [esp+3Ch+var_10]
		test	eax, eax
		jz	loc_6E4434C5
		mov	edx, [eax+8]
		mov	edx, [edx+4]
		mov	eax, [eax]
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aCompressionDS	; "\n	 Compression: %d (%s)"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jg	loc_6E4433C1
		jmp	short loc_6E443000
; ---------------------------------------------------------------------------
		align 10h

loc_6E443000:				; CODE XREF: SSL_SESSION_print+10j
					; SSL_SESSION_print+28j ...
		xor	eax, eax

loc_6E443002:				; CODE XREF: SSL_SESSION_print+55Bj
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443010:				; CODE XREF: SSL_SESSION_print+33j
		mov	eax, offset aSslv2_1 ; "SSLv2"

loc_6E443015:				; CODE XREF: SSL_SESSION_print+80j
					; SSL_SESSION_print+1B5j ...
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aProtocolS ; "	   Protocol  : %s\n"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jle	short loc_6E443000
		mov	eax, [ebx+0B4h]
		test	eax, eax
		jz	loc_6E443140
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aCipherS ; "	 Cipher	   : %s\n"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jle	short loc_6E443000

loc_6E443056:				; CODE XREF: SSL_SESSION_print+275j
					; SSL_SESSION_print+36Ej
		mov	[esp+3Ch+var_38], offset aSessionId ; "	   Session-ID: "
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	short loc_6E443000
		xor	esi, esi
		mov	eax, [ebx+44h]
		test	eax, eax
		jnz	short loc_6E443086
		jmp	short loc_6E4430C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E443080:				; CODE XREF: SSL_SESSION_print+1A2j
		inc	esi
		cmp	[ebx+44h], esi
		jbe	short loc_6E4430C0

loc_6E443086:				; CODE XREF: SSL_SESSION_print+171j
		xor	eax, eax
		mov	al, [ebx+esi+48h]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset a02x ;	"%02X"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jg	short loc_6E443080
		jmp	loc_6E443000
; ---------------------------------------------------------------------------
		align 10h

loc_6E4430B0:				; CODE XREF: SSL_SESSION_print+54j
		mov	eax, offset aTlsv1_1_0 ; "TLSv1.1"
		jmp	loc_6E443015
; ---------------------------------------------------------------------------
		align 10h

loc_6E4430C0:				; CODE XREF: SSL_SESSION_print+173j
					; SSL_SESSION_print+184j
		mov	[esp+3Ch+var_38], offset aSessionIdCtx ; "\n	Session-ID-ctx:	"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000
		xor	esi, esi
		mov	eax, [ebx+68h]
		test	eax, eax
		jnz	short loc_6E4430FA
		jmp	loc_6E443180
; ---------------------------------------------------------------------------
		align 10h

loc_6E4430F0:				; CODE XREF: SSL_SESSION_print+216j
		inc	esi
		cmp	[ebx+68h], esi
		jbe	loc_6E443180

loc_6E4430FA:				; CODE XREF: SSL_SESSION_print+1DFj
		xor	eax, eax
		mov	al, [ebx+esi+6Ch]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset a02x ;	"%02X"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jg	short loc_6E4430F0
		jmp	loc_6E443000
; ---------------------------------------------------------------------------
		align 10h

loc_6E443120:				; CODE XREF: SSL_SESSION_print+3Ej
		mov	eax, offset aSslv3_1 ; "SSLv3"
		jmp	loc_6E443015
; ---------------------------------------------------------------------------
		align 10h

loc_6E443130:				; CODE XREF: SSL_SESSION_print+49j
		mov	eax, offset aTlsv1_2_1 ; "TLSv1.2"
		jmp	loc_6E443015
; ---------------------------------------------------------------------------
		align 10h

loc_6E443140:				; CODE XREF: SSL_SESSION_print+135j
		mov	eax, [ebx+0B8h]
		mov	edx, eax
		and	edx, 0FF000000h
		cmp	edx, 2000000h
		jz	loc_6E443253
		and	eax, 0FFFFh
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aCipher04lx ; "    Cipher    :	%04lX\n"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jg	loc_6E443056
		jmp	loc_6E443000
; ---------------------------------------------------------------------------

loc_6E443180:				; CODE XREF: SSL_SESSION_print+1E1j
					; SSL_SESSION_print+1F4j
		mov	[esp+3Ch+var_38], offset aMasterKey ; "\n    Master-Key: "
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000
		xor	esi, esi
		mov	eax, [ebx+10h]
		test	eax, eax
		jnz	short loc_6E4431B6
		jmp	short loc_6E4431F4
; ---------------------------------------------------------------------------
		align 10h

loc_6E4431B0:				; CODE XREF: SSL_SESSION_print+2D2j
		inc	esi
		cmp	[ebx+10h], esi
		jbe	short loc_6E4431F4

loc_6E4431B6:				; CODE XREF: SSL_SESSION_print+29Fj
		xor	eax, eax
		mov	al, [ebx+esi+14h]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset a02x ;	"%02X"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jg	short loc_6E4431B0
		jmp	loc_6E443000
; ---------------------------------------------------------------------------
		align 10h

loc_6E4431E0:				; CODE XREF: SSL_SESSION_print+5Fj
		mov	eax, offset aTlsv1_0 ; "TLSv1"
		jmp	loc_6E443015
; ---------------------------------------------------------------------------

loc_6E4431EA:				; CODE XREF: SSL_SESSION_print+6Aj
		mov	eax, offset aDtlsv1 ; "DTLSv1"
		jmp	loc_6E443015
; ---------------------------------------------------------------------------

loc_6E4431F4:				; CODE XREF: SSL_SESSION_print+2A1j
					; SSL_SESSION_print+2B4j
		mov	[esp+3Ch+var_38], offset aKeyArg ; "\n	  Key-Arg   : "
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jz	short loc_6E443279
		xor	esi, esi
		jmp	short loc_6E443226
; ---------------------------------------------------------------------------
		align 10h

loc_6E443220:				; CODE XREF: SSL_SESSION_print+342j
		inc	esi
		cmp	[ebx+4], esi
		jbe	short loc_6E443291

loc_6E443226:				; CODE XREF: SSL_SESSION_print+315j
		xor	eax, eax
		mov	al, [ebx+esi+8]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset a02x ;	"%02X"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jg	short loc_6E443220
		jmp	loc_6E443000
; ---------------------------------------------------------------------------

loc_6E443249:				; CODE XREF: SSL_SESSION_print+75j
		mov	eax, offset aDtlsv1Bad ; "DTLSv1-bad"
		jmp	loc_6E443015
; ---------------------------------------------------------------------------

loc_6E443253:				; CODE XREF: SSL_SESSION_print+254j
		and	eax, 0FFFFFFh
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aCipher06lx ; "    Cipher    :	%06lX\n"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jg	loc_6E443056
		jmp	loc_6E443000
; ---------------------------------------------------------------------------

loc_6E443279:				; CODE XREF: SSL_SESSION_print+311j
		mov	[esp+3Ch+var_38], offset aNone_1 ; "None"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000

loc_6E443291:				; CODE XREF: SSL_SESSION_print+324j
		mov	[esp+3Ch+var_38], offset aPskIdentity ;	"\n    PSK identity: "
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000
		mov	eax, [ebx+90h]
		test	eax, eax
		jz	loc_6E443460

loc_6E4432B7:				; CODE XREF: SSL_SESSION_print+565j
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aS ; "%s"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jle	loc_6E443000
		mov	[esp+3Ch+var_38], offset aPskIdentityHin ; "\n	  PSK identity hint: "
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000
		mov	eax, [ebx+8Ch]
		test	eax, eax
		jz	loc_6E443490

loc_6E4432F9:				; CODE XREF: SSL_SESSION_print+595j
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aS ; "%s"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jle	loc_6E443000
		mov	[esp+3Ch+var_38], offset aSrpUsername ;	"\n    SRP username: "
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000
		mov	eax, [ebx+0F0h]
		test	eax, eax
		jz	loc_6E44349A

loc_6E44333B:				; CODE XREF: SSL_SESSION_print+59Fj
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aS ; "%s"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jle	loc_6E443000
		mov	eax, [ebx+0ECh]
		test	eax, eax
		jnz	loc_6E44346A

loc_6E443365:				; CODE XREF: SSL_SESSION_print+580j
		mov	edx, [ebx+0E4h]
		test	edx, edx
		jz	short loc_6E4433B3
		mov	[esp+3Ch+var_38], offset aTlsSessionTick ; "\n	  TLS session ticket:\n"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000
		mov	eax, [ebx+0E4h]
		mov	[esp+3Ch+var_30], 4
		mov	edx, [ebx+0E8h]
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], edi
		call	BIO_dump_indent
		test	eax, eax
		jle	loc_6E443000

loc_6E4433B3:				; CODE XREF: SSL_SESSION_print+46Dj
		mov	eax, [ebx+0B0h]
		test	eax, eax
		jnz	loc_6E442F85

loc_6E4433C1:				; CODE XREF: SSL_SESSION_print+EBj
					; SSL_SESSION_print+5E1j
		mov	eax, [ebx+0ACh]
		test	eax, eax
		jnz	loc_6E4434A4

loc_6E4433CF:				; CODE XREF: SSL_SESSION_print+5BAj
		mov	eax, [ebx+0A8h]
		test	eax, eax
		jz	short loc_6E4433F5
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aTimeoutLdSec ; "\n	Timeout	  : %ld	(sec)"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jle	loc_6E443000

loc_6E4433F5:				; CODE XREF: SSL_SESSION_print+4D7j
		mov	[esp+3Ch+var_38], offset asc_6E44FD07 ;	"\n"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000
		mov	[esp+3Ch+var_38], offset aVerifyReturnCo ; "	Verify return code: "
		mov	[esp+3Ch+var_3C], edi
		call	BIO_puts
		test	eax, eax
		jle	loc_6E443000
		mov	eax, [ebx+0A0h]
		mov	[esp+3Ch+var_3C], eax
		call	X509_verify_cert_error_string
		mov	edx, [ebx+0A0h]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_38], offset aLdS ;	"%ld (%s)\n"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		setnle	al
		and	eax, 0FFh
		jmp	loc_6E443002
; ---------------------------------------------------------------------------

loc_6E443460:				; CODE XREF: SSL_SESSION_print+3B1j
		mov	eax, offset aNone_1 ; "None"
		jmp	loc_6E4432B7
; ---------------------------------------------------------------------------

loc_6E44346A:				; CODE XREF: SSL_SESSION_print+45Fj
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aTlsSessionTi_0 ; "\n	  TLS session ticket lifetime hint:"...
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jg	loc_6E443365
		jmp	loc_6E443000
; ---------------------------------------------------------------------------
		align 10h

loc_6E443490:				; CODE XREF: SSL_SESSION_print+3F3j
		mov	eax, offset aNone_1 ; "None"
		jmp	loc_6E4432F9
; ---------------------------------------------------------------------------

loc_6E44349A:				; CODE XREF: SSL_SESSION_print+435j
		mov	eax, offset aNone_1 ; "None"
		jmp	loc_6E44333B
; ---------------------------------------------------------------------------

loc_6E4434A4:				; CODE XREF: SSL_SESSION_print+4C9j
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aStartTimeLd ;	"\n    Start Time: %ld"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jg	loc_6E4433CF
		jmp	loc_6E443000
; ---------------------------------------------------------------------------

loc_6E4434C5:				; CODE XREF: SSL_SESSION_print+C3j
		mov	eax, [ebx+0B0h]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aCompressionD ; "\n	Compression: %d"
		mov	[esp+3Ch+var_3C], edi
		call	BIO_printf
		test	eax, eax
		jg	loc_6E4433C1
		jmp	loc_6E443000
SSL_SESSION_print endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  34. SSL_SESSION_print_fp

; =============== S U B	R O U T	I N E =======================================


		public SSL_SESSION_print_fp
SSL_SESSION_print_fp proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		call	BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E443550
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 6Ah
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_ctrl
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	SSL_SESSION_print
		mov	esi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_free
		mov	eax, esi
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443550:				; CODE XREF: SSL_SESSION_print_fp+16j
		mov	[esp+2Ch+var_1C], 60h
		mov	[esp+2Ch+var_20], offset aSsl_txt_c ; "ssl_txt.c"
		mov	[esp+2Ch+var_24], 7
		mov	[esp+2Ch+var_28], 0BEh
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
SSL_SESSION_print_fp endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 183. SSL_library_init

; =============== S U B	R O U T	I N E =======================================


		public SSL_library_init
SSL_library_init proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		sub	esp, 1Ch
		call	EVP_des_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_des_ede3_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_idea_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_rc4
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_rc2_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_rc2_40_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_aes_128_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_aes_192_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_aes_256_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_aes_128_gcm
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_aes_256_gcm
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_aes_128_cbc_hmac_sha1
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_aes_256_cbc_hmac_sha1
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_camellia_128_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_camellia_256_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_seed_cbc
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_cipher
		call	EVP_md5
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_digest
		mov	[esp+1Ch+var_14], offset aMd5 ;	"MD5"
		mov	[esp+1Ch+var_18], 8001h
		mov	[esp+1Ch+var_1C], offset aSsl2Md5_0 ; "ssl2-md5"
		call	OBJ_NAME_add
		mov	[esp+1Ch+var_14], offset aMd5 ;	"MD5"
		mov	[esp+1Ch+var_18], 8001h
		mov	[esp+1Ch+var_1C], offset aSsl3Md5_0 ; "ssl3-md5"
		call	OBJ_NAME_add
		call	EVP_sha1
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_digest
		mov	[esp+1Ch+var_14], offset aSha1_0 ; "SHA1"
		mov	[esp+1Ch+var_18], 8001h
		mov	[esp+1Ch+var_1C], offset aSsl3Sha1_0 ; "ssl3-sha1"
		call	OBJ_NAME_add
		mov	[esp+1Ch+var_14], offset aRsaSha1 ; "RSA-SHA1"
		mov	[esp+1Ch+var_18], 8001h
		mov	[esp+1Ch+var_1C], offset aRsaSha12 ; "RSA-SHA1-2"
		call	OBJ_NAME_add
		call	EVP_sha224
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_digest
		call	EVP_sha256
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_digest
		call	EVP_sha384
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_digest
		call	EVP_sha512
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_digest
		call	EVP_dss1
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_digest
		mov	[esp+1Ch+var_14], offset aDsaSha1 ; "DSA-SHA1"
		mov	[esp+1Ch+var_18], 8001h
		mov	[esp+1Ch+var_1C], offset aDsaSha1Old ; "DSA-SHA1-old"
		call	OBJ_NAME_add
		mov	[esp+1Ch+var_14], offset aDsaSha1 ; "DSA-SHA1"
		mov	[esp+1Ch+var_18], 8001h
		mov	[esp+1Ch+var_1C], offset aDss1 ; "DSS1"
		call	OBJ_NAME_add
		mov	[esp+1Ch+var_14], offset aDsaSha1 ; "DSA-SHA1"
		mov	[esp+1Ch+var_18], 8001h
		mov	[esp+1Ch+var_1C], offset aDss1_0 ; "dss1"
		call	OBJ_NAME_add
		call	EVP_ecdsa
		mov	[esp+1Ch+var_1C], eax
		call	EVP_add_digest
		call	SSL_COMP_get_compression_methods
		call	sub_6E43B560
		mov	eax, 1
		add	esp, 1Ch
		retn
SSL_library_init endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4437B0	proc near		; DATA XREF: .data:6E449A64o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	edx, [esp+1Ch+arg_8]
		mov	ecx, [esp+1Ch+arg_0]
		mov	ecx, [ecx+20h]
		mov	ecx, [ecx]
		cmp	eax, 0Eh
		jz	short loc_6E4437E0
		mov	ecx, [ecx+0Ch]
		mov	[esp+1Ch+arg_0], ecx
		add	esp, 1Ch
		jmp	BIO_callback_ctrl
; ---------------------------------------------------------------------------
		align 10h

loc_6E4437E0:				; CODE XREF: sub_6E4437B0+17j
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], ecx
		call	SSL_set_info_callback
		mov	eax, 1
		add	esp, 1Ch
		retn
sub_6E4437B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E443800	proc near		; DATA XREF: .data:6E449A60o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_6E443880
		mov	esi, [ebx+20h]
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6E44381E
		mov	[esp+1Ch+var_1C], eax
		call	SSL_shutdown

loc_6E44381E:				; CODE XREF: sub_6E443800+14j
		mov	edx, [ebx+10h]
		test	edx, edx
		jnz	short loc_6E443840
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	short loc_6E44386A

loc_6E44382C:				; CODE XREF: sub_6E443800+68j
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443840:				; CODE XREF: sub_6E443800+23j
		mov	eax, [ebx+0Ch]
		test	eax, eax
		jz	short loc_6E443855
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_6E443855
		mov	[esp+1Ch+var_1C], eax
		call	SSL_free

loc_6E443855:				; CODE XREF: sub_6E443800+45j
					; sub_6E443800+4Bj
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+14h], 0
		mov	eax, [ebx+20h]
		test	eax, eax
		jnz	short loc_6E44382C

loc_6E44386A:				; CODE XREF: sub_6E443800+2Aj
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443880:				; CODE XREF: sub_6E443800+Bj
		xor	eax, eax
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
sub_6E443800	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6E443890(int,	char *)
sub_6E443890	proc near		; DATA XREF: .data:6E449A50o

Str		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+Str], ebx ; Str
		call	strlen
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], ebx
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+Str], eax
		call	BIO_write
		add	esp, 18h
		pop	ebx
		retn
sub_6E443890	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4438C0	proc near		; DATA XREF: .data:6E449A4Co

Time		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		test	esi, esi
		jz	short loc_6E443920
		mov	ebp, [ebx+20h]
		mov	edi, [ebp+0]
		mov	[esp+2Ch+var_28], 0Fh
		mov	[esp+2Ch+Time],	ebx
		call	BIO_clear_flags
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+Time],	edi
		call	SSL_read
		mov	esi, eax
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+Time],	edi
		call	SSL_get_error
		cmp	eax, 8		; switch 9 cases
		ja	loc_6E443A30	; jumptable 6E443914 default case
		jmp	ds:off_6E44FDB0[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6E443920:				; CODE XREF: sub_6E4438C0+11j
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443930:				; CODE XREF: sub_6E4438C0+54j
					; DATA XREF: .rdata:off_6E44FDB0o
		mov	[esp+2Ch+var_28], 0Ch ;	jumptable 6E443914 case	8
		mov	[esp+2Ch+Time],	ebx
		call	BIO_set_flags
		mov	eax, 3
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E443950:				; CODE XREF: sub_6E4438C0+D7j
					; sub_6E4438C0+F2j ...
		mov	[ebx+18h], eax
		mov	eax, esi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443960:				; CODE XREF: sub_6E4438C0+54j
					; DATA XREF: .rdata:off_6E44FDB0o
		test	esi, esi	; jumptable 6E443914 case 0
		jle	loc_6E443A30	; jumptable 6E443914 default case
		mov	eax, [ebp+8]
		test	eax, eax
		jz	loc_6E443A20
		mov	edx, [ebp+0Ch]
		add	edx, esi
		mov	[ebp+0Ch], edx
		cmp	eax, edx
		jnb	loc_6E443A20
		mov	dword ptr [ebp+0Ch], 0
		inc	dword ptr [ebp+4]
		mov	[esp+2Ch+Time],	edi
		call	SSL_renegotiate
		xor	eax, eax
		jmp	short loc_6E443950
; ---------------------------------------------------------------------------
		align 10h

loc_6E4439A0:				; CODE XREF: sub_6E4438C0+54j
					; DATA XREF: .rdata:off_6E44FDB0o
		mov	[esp+2Ch+var_28], 9 ; jumptable	6E443914 case 2
		mov	[esp+2Ch+Time],	ebx
		call	BIO_set_flags
		xor	eax, eax
		jmp	short loc_6E443950
; ---------------------------------------------------------------------------
		align 10h

loc_6E4439C0:				; CODE XREF: sub_6E4438C0+54j
					; DATA XREF: .rdata:off_6E44FDB0o
		mov	[esp+2Ch+var_28], 0Ch ;	jumptable 6E443914 case	4
		mov	[esp+2Ch+Time],	ebx
		call	BIO_set_flags
		mov	eax, 1
		jmp	loc_6E443950
; ---------------------------------------------------------------------------
		align 10h

loc_6E4439E0:				; CODE XREF: sub_6E4438C0+54j
					; DATA XREF: .rdata:off_6E44FDB0o
		mov	[esp+2Ch+var_28], 0Ch ;	jumptable 6E443914 case	7
		mov	[esp+2Ch+Time],	ebx
		call	BIO_set_flags
		mov	eax, 2
		jmp	loc_6E443950
; ---------------------------------------------------------------------------
		align 10h

loc_6E443A00:				; CODE XREF: sub_6E4438C0+54j
					; DATA XREF: .rdata:off_6E44FDB0o
		mov	[esp+2Ch+var_28], 0Ah ;	jumptable 6E443914 case	3
		mov	[esp+2Ch+Time],	ebx
		call	BIO_set_flags
		xor	eax, eax
		jmp	loc_6E443950
; ---------------------------------------------------------------------------
		align 10h

loc_6E443A20:				; CODE XREF: sub_6E4438C0+ADj
					; sub_6E4438C0+BDj
		mov	eax, [ebp+10h]
		test	eax, eax
		jnz	short loc_6E443A40
		mov	esi, esi
		lea	edi, [edi+0]

loc_6E443A30:				; CODE XREF: sub_6E4438C0+4Ej
					; sub_6E4438C0+54j ...
		xor	eax, eax	; jumptable 6E443914 default case
		jmp	loc_6E443950
; ---------------------------------------------------------------------------
		align 10h

loc_6E443A40:				; CODE XREF: sub_6E4438C0+165j
		mov	[esp+2Ch+Time],	0 ; Time
		call	time
		mov	edx, [ebp+10h]
		add	edx, [ebp+14h]
		cmp	eax, edx
		jbe	short loc_6E443A30 ; jumptable 6E443914	default	case
		mov	[ebp+14h], eax
		inc	dword ptr [ebp+4]
		mov	[esp+2Ch+Time],	edi
		call	SSL_renegotiate
		xor	eax, eax
		jmp	loc_6E443950
sub_6E4438C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E443A70	proc near		; DATA XREF: .data:6E449A48o

Time		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		test	esi, esi
		jz	short loc_6E443AD0
		mov	ebp, [ebx+20h]
		mov	edi, [ebp+0]
		mov	[esp+2Ch+var_28], 0Fh
		mov	[esp+2Ch+Time],	ebx
		call	BIO_clear_flags
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+Time],	edi
		call	SSL_write
		mov	esi, eax
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+Time],	edi
		call	SSL_get_error
		cmp	eax, 7		; switch 8 cases
		ja	loc_6E443BC0	; jumptable 6E443AC4 default case
		jmp	ds:off_6E44FDD4[eax*4] ; switch	jump
; ---------------------------------------------------------------------------
		align 10h

loc_6E443AD0:				; CODE XREF: sub_6E443A70+11j
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443AE0:				; CODE XREF: sub_6E443A70+54j
					; DATA XREF: .rdata:off_6E44FDD4o
		mov	[esp+2Ch+var_28], 0Ch ;	jumptable 6E443AC4 case	7
		mov	[esp+2Ch+Time],	ebx
		call	BIO_set_flags
		mov	eax, 2
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E443B00:				; CODE XREF: sub_6E443A70+D7j
					; sub_6E443A70+F2j ...
		mov	[ebx+18h], eax
		mov	eax, esi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443B10:				; CODE XREF: sub_6E443A70+54j
					; DATA XREF: .rdata:off_6E44FDD4o
		test	esi, esi	; jumptable 6E443AC4 case 0
		jle	loc_6E443BC0	; jumptable 6E443AC4 default case
		mov	eax, [ebp+8]
		test	eax, eax
		jz	loc_6E443BB0
		mov	edx, [ebp+0Ch]
		add	edx, esi
		mov	[ebp+0Ch], edx
		cmp	eax, edx
		jnb	loc_6E443BB0
		mov	dword ptr [ebp+0Ch], 0
		inc	dword ptr [ebp+4]
		mov	[esp+2Ch+Time],	edi
		call	SSL_renegotiate
		xor	eax, eax
		jmp	short loc_6E443B00
; ---------------------------------------------------------------------------
		align 10h

loc_6E443B50:				; CODE XREF: sub_6E443A70+54j
					; DATA XREF: .rdata:off_6E44FDD4o
		mov	[esp+2Ch+var_28], 9 ; jumptable	6E443AC4 case 2
		mov	[esp+2Ch+Time],	ebx
		call	BIO_set_flags
		xor	eax, eax
		jmp	short loc_6E443B00
; ---------------------------------------------------------------------------
		align 10h

loc_6E443B70:				; CODE XREF: sub_6E443A70+54j
					; DATA XREF: .rdata:off_6E44FDD4o
		mov	[esp+2Ch+var_28], 0Ah ;	jumptable 6E443AC4 case	3
		mov	[esp+2Ch+Time],	ebx
		call	BIO_set_flags
		xor	eax, eax
		jmp	loc_6E443B00
; ---------------------------------------------------------------------------
		align 10h

loc_6E443B90:				; CODE XREF: sub_6E443A70+54j
					; DATA XREF: .rdata:off_6E44FDD4o
		mov	[esp+2Ch+var_28], 0Ch ;	jumptable 6E443AC4 case	4
		mov	[esp+2Ch+Time],	ebx
		call	BIO_set_flags
		mov	eax, 1
		jmp	loc_6E443B00
; ---------------------------------------------------------------------------
		align 10h

loc_6E443BB0:				; CODE XREF: sub_6E443A70+ADj
					; sub_6E443A70+BDj
		mov	eax, [ebp+10h]
		test	eax, eax
		jnz	short loc_6E443BD0
		mov	esi, esi
		lea	edi, [edi+0]

loc_6E443BC0:				; CODE XREF: sub_6E443A70+4Ej
					; sub_6E443A70+54j ...
		xor	eax, eax	; jumptable 6E443AC4 default case
		jmp	loc_6E443B00
; ---------------------------------------------------------------------------
		align 10h

loc_6E443BD0:				; CODE XREF: sub_6E443A70+145j
		mov	[esp+2Ch+Time],	0 ; Time
		call	time
		mov	edx, [ebp+10h]
		add	edx, [ebp+14h]
		cmp	eax, edx
		jbe	short loc_6E443BC0 ; jumptable 6E443AC4	default	case
		mov	[ebp+14h], eax
		inc	dword ptr [ebp+4]
		mov	[esp+2Ch+Time],	edi
		call	SSL_renegotiate
		xor	eax, eax
		jmp	loc_6E443B00
sub_6E443A70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E443C00	proc near		; DATA XREF: .data:6E449A5Co

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_24], 6Ah
		mov	[esp+2Ch+var_28], offset aBio_ssl_c ; "bio_ssl.c"
		mov	[esp+2Ch+var_2C], 18h
		call	CRYPTO_malloc
		mov	edx, eax
		test	eax, eax
		jz	short loc_6E443CA0
		mov	edi, eax
		mov	ebx, 18h
		test	al, 1
		jnz	loc_6E443CE0

loc_6E443C3B:				; CODE XREF: sub_6E443C00+E8j
		test	edi, 2
		jnz	loc_6E443CF0

loc_6E443C47:				; CODE XREF: sub_6E443C00+FBj
		mov	ecx, ebx
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	bl, 2
		jnz	short loc_6E443C90
		and	ebx, 1
		jnz	short loc_6E443C80

loc_6E443C5A:				; CODE XREF: sub_6E443C00+83j
					; sub_6E443C00+9Bj
		mov	dword ptr [esi+0Ch], 0
		mov	[esi+20h], edx
		mov	dword ptr [esi+14h], 0
		mov	eax, 1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443C80:				; CODE XREF: sub_6E443C00+58j
					; sub_6E443C00+9Dj
		mov	byte ptr [edi],	0
		jmp	short loc_6E443C5A
; ---------------------------------------------------------------------------
		align 10h

loc_6E443C90:				; CODE XREF: sub_6E443C00+53j
		mov	word ptr [edi],	0
		add	edi, 2
		and	ebx, 1
		jz	short loc_6E443C5A
		jmp	short loc_6E443C80
; ---------------------------------------------------------------------------
		align 10h

loc_6E443CA0:				; CODE XREF: sub_6E443C00+2Aj
		mov	[esp+2Ch+var_1C], 6Ch
		mov	[esp+2Ch+var_20], offset aBio_ssl_c ; "bio_ssl.c"
		mov	[esp+2Ch+var_24], 41h
		mov	[esp+2Ch+var_28], 76h
		mov	[esp+2Ch+var_2C], 20h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443CE0:				; CODE XREF: sub_6E443C00+35j
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	bl, 17h
		jmp	loc_6E443C3B
; ---------------------------------------------------------------------------
		align 10h

loc_6E443CF0:				; CODE XREF: sub_6E443C00+41j
		mov	word ptr [edi],	0
		add	edi, 2
		sub	ebx, 2
		jmp	loc_6E443C47
sub_6E443C00	endp


; =============== S U B	R O U T	I N E =======================================


sub_6E443D00	proc near		; DATA XREF: .data:6E449A58o

Time		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_4]
		mov	ebp, [esp+3Ch+arg_8]
		mov	esi, [esp+3Ch+arg_C]
		mov	edx, [ebx+20h]
		mov	edi, [edx]
		test	edi, edi
		jz	short loc_6E443D40
		cmp	eax, 7Fh	; switch 128 cases
		ja	loc_6E444140	; jumptable 6E443D29 default case
		jmp	ds:off_6E44FE00[eax*4] ; switch	jump
; ---------------------------------------------------------------------------

loc_6E443D30:				; CODE XREF: sub_6E443D00+29j
					; sub_6E443D00+43j ...
		xor	eax, eax	; jumptable 6E443D29 cases 3,14

loc_6E443D32:				; CODE XREF: sub_6E443D00+A5j
					; sub_6E443D00+107j ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E443D40:				; CODE XREF: sub_6E443D00+1Ej
		cmp	eax, 6Dh
		jnz	short loc_6E443D30 ; jumptable 6E443D29	cases 3,14

loc_6E443D45:				; CODE XREF: sub_6E443D00+51Aj
		mov	[ebx+10h], ebp
		mov	[edx], esi
		mov	[esp+3Ch+Time],	esi
		call	SSL_get_rbio
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E443D99
		mov	eax, [ebx+24h]
		test	eax, eax
		jz	short loc_6E443D6B
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+Time],	esi
		call	BIO_push

loc_6E443D6B:				; CODE XREF: sub_6E443D00+5Dj
		mov	[ebx+24h], esi
		mov	[esp+3Ch+var_2C], 162h
		mov	[esp+3Ch+var_30], offset aBio_ssl_c ; "bio_ssl.c"
		mov	[esp+3Ch+var_34], 15h
		mov	[esp+3Ch+var_38], 1
		add	esi, 2Ch
		mov	[esp+3Ch+Time],	esi
		call	CRYPTO_add_lock

loc_6E443D99:				; CODE XREF: sub_6E443D00+56j
		mov	dword ptr [ebx+0Ch], 1
		mov	eax, 1
		jmp	short loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E443DB0:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	eax, [ebx+24h]	; jumptable 6E443D29 case 6
		test	eax, eax
		jz	loc_6E443FEA
		cmp	eax, [edi+0Ch]
		jz	loc_6E443FEA
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+Time],	edi
		call	SSL_set_bio
		mov	[esp+3Ch+var_2C], 183h
		mov	[esp+3Ch+var_30], offset aBio_ssl_c ; "bio_ssl.c"
		mov	[esp+3Ch+var_34], 15h
		mov	[esp+3Ch+var_38], 1
		mov	eax, [ebx+24h]
		add	eax, 2Ch
		mov	[esp+3Ch+Time],	eax
		call	CRYPTO_add_lock
		mov	eax, 1
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E443E10:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	[esp+3Ch+Time],	edi ; jumptable	6E443D29 case 1
		call	SSL_shutdown
		mov	edx, [edi+20h]
		mov	eax, [edi+8]
		cmp	edx, [eax+14h]
		jz	loc_6E4442F0
		cmp	edx, [eax+10h]
		jz	loc_6E4442FD

loc_6E443E30:				; CODE XREF: sub_6E443D00+5F8j
					; sub_6E443D00+605j
		mov	[esp+3Ch+Time],	edi
		call	SSL_clear
		mov	eax, [ebx+24h]
		test	eax, eax
		jz	loc_6E444230

loc_6E443E43:				; CODE XREF: sub_6E443D00+535j
		mov	[esp+3Ch+arg_C], esi
		mov	[esp+3Ch+arg_8], ebp
		mov	[esp+3Ch+arg_4], 1
		mov	[esp+3Ch+arg_0], eax

loc_6E443E57:				; CODE XREF: sub_6E443D00+267j
					; sub_6E443D00+37Fj ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	BIO_ctrl
; ---------------------------------------------------------------------------
		align 10h

loc_6E443E70:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	ebx, [edx+10h]	; jumptable 6E443D29 case 127
		cmp	ebp, 3Bh
		jg	short loc_6E443E7D
		mov	ebp, 5

loc_6E443E7D:				; CODE XREF: sub_6E443D00+176j
		mov	[edx+10h], ebp
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+Time],	0 ; Time
		call	time
		mov	edx, [esp+3Ch+var_20]
		mov	[edx+14h], eax
		mov	eax, ebx
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E443EA0:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	ebp, [esi+20h]	; jumptable 6E443D29 case 12
		mov	eax, [ebp+0]
		test	eax, eax
		jz	short loc_6E443EB5
		mov	[esp+3Ch+Time],	eax
		call	SSL_free
		mov	ebp, [esi+20h]

loc_6E443EB5:				; CODE XREF: sub_6E443D00+1A8j
		mov	[esp+3Ch+Time],	edi
		call	SSL_dup
		mov	[ebp+0], eax
		mov	eax, [esi+20h]
		mov	edx, [ebx+20h]
		mov	ecx, [edx+8]
		mov	[eax+8], ecx
		mov	ecx, [edx+0Ch]
		mov	[eax+0Ch], ecx
		mov	ecx, [edx+10h]
		mov	[eax+10h], ecx
		mov	edx, [edx+14h]
		mov	[eax+14h], edx
		mov	eax, [eax]
		test	eax, eax
		setnz	al
		and	eax, 0FFh
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E443EF0:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	[esp+3Ch+var_38], 0Fh ;	jumptable 6E443D29 case	11
		mov	[esp+3Ch+Time],	ebx
		call	BIO_clear_flags
		mov	eax, [edi+10h]
		mov	[esp+3Ch+var_30], esi
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], 0Bh
		mov	[esp+3Ch+Time],	eax
		call	BIO_ctrl
		mov	esi, eax
		mov	[esp+3Ch+Time],	ebx
		call	BIO_copy_next_retry
		mov	eax, esi
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E443F30:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		test	esi, esi	; jumptable 6E443D29 case 110
		jz	loc_6E443D30	; jumptable 6E443D29 cases 3,14
		mov	[esi], edi
		mov	eax, 1
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E443F50:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	eax, [edi+0Ch]	; jumptable 6E443D29 case 105
		mov	[esp+3Ch+arg_C], esi
		mov	[esp+3Ch+arg_8], ebp
		mov	[esp+3Ch+arg_4], 69h
		mov	[esp+3Ch+arg_0], eax
		jmp	loc_6E443E57
; ---------------------------------------------------------------------------
		align 10h

loc_6E443F70:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	[esp+3Ch+var_38], 0Fh ;	jumptable 6E443D29 case	101
		mov	[esp+3Ch+Time],	ebx
		call	BIO_clear_flags
		mov	dword ptr [ebx+18h], 0
		mov	[esp+3Ch+Time],	edi
		call	SSL_do_handshake
		mov	esi, eax
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+Time],	edi
		call	SSL_get_error
		cmp	eax, 3
		jz	loc_6E44425C
		jle	loc_6E444240
		cmp	eax, 4
		jz	loc_6E44427A
		cmp	eax, 7
		jnz	loc_6E444273
		mov	[esp+3Ch+var_38], 0Ch
		mov	[esp+3Ch+Time],	ebx
		call	BIO_set_flags
		mov	eax, [ebx+24h]
		mov	eax, [eax+18h]
		mov	[ebx+18h], eax
		mov	eax, esi
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E443FE0:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	[esp+3Ch+Time],	edi ; jumptable	6E443D29 case 15
		call	SSL_get_info_callback
		mov	[esi], eax

loc_6E443FEA:				; CODE XREF: sub_6E443D00+B5j
					; sub_6E443D00+BEj ...
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444000:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	eax, [edx+8]	; jumptable 6E443D29 case 125
		cmp	ebp, 1FFh
		jle	loc_6E443D32
		mov	[edx+8], ebp
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E444020:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	eax, [edx+4]	; jumptable 6E443D29 case 126
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E444030:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	[esp+3Ch+Time],	edi ; jumptable	6E443D29 case 119
		test	ebp, ebp
		jz	loc_6E444220
		call	SSL_set_connect_state
		mov	eax, 1
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E444050:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	[esp+3Ch+Time],	edi ; jumptable	6E443D29 case 10
		call	SSL_pending
		test	eax, eax
		jnz	loc_6E443D32
		mov	eax, [edi+0Ch]
		mov	[esp+3Ch+arg_C], 0
		mov	[esp+3Ch+arg_8], 0
		mov	[esp+3Ch+arg_4], 0Ah
		mov	[esp+3Ch+arg_0], eax
		jmp	loc_6E443E57
; ---------------------------------------------------------------------------
		align 10h

loc_6E444090:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	eax, [edi+10h]	; jumptable 6E443D29 case 13
		mov	[esp+3Ch+arg_C], esi
		mov	[esp+3Ch+arg_8], ebp
		mov	[esp+3Ch+arg_4], 0Dh
		mov	[esp+3Ch+arg_0], eax
		jmp	loc_6E443E57
; ---------------------------------------------------------------------------
		align 10h

loc_6E4440B0:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	eax, [ebx+10h]	; jumptable 6E443D29 case 8
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E4440C0:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		cmp	ebx, esi	; jumptable 6E443D29 case 7
		jnz	loc_6E443FEA
		mov	eax, [edi+10h]
		cmp	[edi+0Ch], eax
		jz	short loc_6E4440D8
		mov	[esp+3Ch+Time],	eax
		call	BIO_free_all

loc_6E4440D8:				; CODE XREF: sub_6E443D00+3CEj
		mov	eax, [ebx+24h]
		test	eax, eax
		jz	short loc_6E44410A
		mov	[esp+3Ch+var_2C], 190h
		mov	[esp+3Ch+var_30], offset aBio_ssl_c ; "bio_ssl.c"
		mov	[esp+3Ch+var_34], 15h
		mov	[esp+3Ch+var_38], 0FFFFFFFFh
		add	eax, 2Ch
		mov	[esp+3Ch+Time],	eax
		call	CRYPTO_add_lock

loc_6E44410A:				; CODE XREF: sub_6E443D00+3DDj
		mov	dword ptr [edi+10h], 0
		mov	dword ptr [edi+0Ch], 0
		mov	eax, 1
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E444130:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	[ebx+10h], ebp	; jumptable 6E443D29 case 9
		mov	eax, 1
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E444140:				; CODE XREF: sub_6E443D00+23j
					; sub_6E443D00+29j
					; DATA XREF: ...
		mov	edx, [edi+0Ch]	; jumptable 6E443D29 default case
		mov	[esp+3Ch+arg_C], esi
		mov	[esp+3Ch+arg_8], ebp
		mov	[esp+3Ch+arg_4], eax
		mov	[esp+3Ch+arg_0], edx
		jmp	loc_6E443E57
; ---------------------------------------------------------------------------

loc_6E444158:				; CODE XREF: sub_6E443D00+29j
					; DATA XREF: .rdata:off_6E44FE00o
		mov	[esp+3Ch+var_20], edx ;	jumptable 6E443D29 case	109
		mov	[esp+3Ch+Time],	edi
		call	SSL_shutdown
		mov	edi, [ebx+10h]
		test	edi, edi
		mov	edx, [esp+3Ch+var_20]
		jz	short loc_6E444192
		mov	ecx, [ebx+0Ch]
		test	ecx, ecx
		jz	short loc_6E444184
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_6E444184
		mov	[esp+3Ch+Time],	eax
		call	SSL_free

loc_6E444184:				; CODE XREF: sub_6E443D00+474j
					; sub_6E443D00+47Aj
		mov	dword ptr [ebx+0Ch], 0
		mov	dword ptr [ebx+14h], 0

loc_6E444192:				; CODE XREF: sub_6E443D00+46Dj
		mov	eax, [ebx+20h]
		test	eax, eax
		jz	short loc_6E4441A1
		mov	[esp+3Ch+Time],	eax
		call	CRYPTO_free

loc_6E4441A1:				; CODE XREF: sub_6E443D00+497j
		mov	[esp+3Ch+var_34], 6Ah
		mov	[esp+3Ch+var_38], offset aBio_ssl_c ; "bio_ssl.c"
		mov	[esp+3Ch+Time],	18h
		call	CRYPTO_malloc
		mov	edx, eax
		test	eax, eax
		jz	loc_6E444298
		mov	edi, eax
		mov	[esp+3Ch+var_20], 18h
		test	al, 1
		jnz	loc_6E4442DD

loc_6E4441D9:				; CODE XREF: sub_6E443D00+5EBj
		test	edi, 2
		jnz	loc_6E4442CB

loc_6E4441E5:				; CODE XREF: sub_6E443D00+5D8j
		mov	ecx, [esp+3Ch+var_20]
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	byte ptr [esp+3Ch+var_20], 2
		jz	short loc_6E4441FF
		mov	word ptr [edi],	0
		add	edi, 2

loc_6E4441FF:				; CODE XREF: sub_6E443D00+4F5j
		test	byte ptr [esp+3Ch+var_20], 1
		jz	short loc_6E444209
		mov	byte ptr [edi],	0

loc_6E444209:				; CODE XREF: sub_6E443D00+504j
		mov	dword ptr [ebx+0Ch], 0
		mov	[ebx+20h], edx
		mov	dword ptr [ebx+14h], 0
		jmp	loc_6E443D45
; ---------------------------------------------------------------------------
		align 10h

loc_6E444220:				; CODE XREF: sub_6E443D00+335j
		call	SSL_set_accept_state
		mov	eax, 1
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------
		align 10h

loc_6E444230:				; CODE XREF: sub_6E443D00+13Dj
		mov	eax, [edi+0Ch]
		test	eax, eax
		jnz	loc_6E443E43
		jmp	loc_6E443FEA
; ---------------------------------------------------------------------------

loc_6E444240:				; CODE XREF: sub_6E443D00+2A6j
		cmp	eax, 2
		jnz	short loc_6E444273
		mov	[esp+3Ch+var_38], 9
		mov	[esp+3Ch+Time],	ebx
		call	BIO_set_flags
		mov	eax, esi
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------

loc_6E44425C:				; CODE XREF: sub_6E443D00+2A0j
		mov	[esp+3Ch+var_38], 0Ah
		mov	[esp+3Ch+Time],	ebx
		call	BIO_set_flags
		mov	eax, esi
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------

loc_6E444273:				; CODE XREF: sub_6E443D00+2B8j
					; sub_6E443D00+543j
		mov	eax, esi
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------

loc_6E44427A:				; CODE XREF: sub_6E443D00+2AFj
		mov	[esp+3Ch+var_38], 0Ch
		mov	[esp+3Ch+Time],	ebx
		call	BIO_set_flags
		mov	dword ptr [ebx+18h], 1
		mov	eax, esi
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------

loc_6E444298:				; CODE XREF: sub_6E443D00+4C1j
		mov	[esp+3Ch+var_2C], 6Ch
		mov	[esp+3Ch+var_30], offset aBio_ssl_c ; "bio_ssl.c"
		mov	[esp+3Ch+var_34], 41h
		mov	[esp+3Ch+var_38], 76h
		mov	[esp+3Ch+Time],	20h
		call	ERR_put_error
		xor	eax, eax
		jmp	loc_6E443D32
; ---------------------------------------------------------------------------

loc_6E4442CB:				; CODE XREF: sub_6E443D00+4DFj
		mov	word ptr [edi],	0
		add	edi, 2
		sub	[esp+3Ch+var_20], 2
		jmp	loc_6E4441E5
; ---------------------------------------------------------------------------

loc_6E4442DD:				; CODE XREF: sub_6E443D00+4D3j
		mov	byte ptr [eax],	0
		lea	edi, [eax+1]
		mov	[esp+3Ch+var_20], 17h
		jmp	loc_6E4441D9
; ---------------------------------------------------------------------------

loc_6E4442F0:				; CODE XREF: sub_6E443D00+121j
		mov	[esp+3Ch+Time],	edi
		call	SSL_set_connect_state
		jmp	loc_6E443E30
; ---------------------------------------------------------------------------

loc_6E4442FD:				; CODE XREF: sub_6E443D00+12Aj
		mov	[esp+3Ch+Time],	edi
		call	SSL_set_accept_state
		jmp	loc_6E443E30
sub_6E443D00	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 121. BIO_f_ssl

; =============== S U B	R O U T	I N E =======================================


		public BIO_f_ssl
BIO_f_ssl	proc near
		mov	eax, offset dword_6E449A40
		retn
BIO_f_ssl	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 173. BIO_new_buffer_ssl_connect

; =============== S U B	R O U T	I N E =======================================


		public BIO_new_buffer_ssl_connect
BIO_new_buffer_ssl_connect proc	near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		call	BIO_f_buffer
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E444400
		call	BIO_s_connect
		mov	[esp+2Ch+var_2C], eax
		call	BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_6E4443D8
		mov	[esp+2Ch+var_2C], offset dword_6E449A40
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E4443D0
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	SSL_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E4443C7
		mov	[esp+2Ch+var_2C], eax
		call	SSL_set_connect_state
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_24], 1
		mov	[esp+2Ch+var_28], 6Dh
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_ctrl
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_push
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E4443D0
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebp
		call	BIO_push
		test	eax, eax
		jz	short loc_6E4443F0
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E4443C7:				; CODE XREF: BIO_new_buffer_ssl_connect+57j
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_free
		nop

loc_6E4443D0:				; CODE XREF: BIO_new_buffer_ssl_connect+45j
					; BIO_new_buffer_ssl_connect+8Dj
		mov	[esp+2Ch+var_2C], edi
		call	BIO_free

loc_6E4443D8:				; CODE XREF: BIO_new_buffer_ssl_connect+2Fj
		mov	[esp+2Ch+var_2C], ebp
		call	BIO_free
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4443F0:				; CODE XREF: BIO_new_buffer_ssl_connect+9Dj
		mov	[esp+2Ch+var_2C], ebp
		call	BIO_free
		mov	[esp+2Ch+var_2C], ebx
		call	BIO_free

loc_6E444400:				; CODE XREF: BIO_new_buffer_ssl_connect+18j
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
BIO_new_buffer_ssl_connect endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 174. BIO_new_ssl_connect

; =============== S U B	R O U T	I N E =======================================


		public BIO_new_ssl_connect
BIO_new_ssl_connect proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		call	BIO_s_connect
		mov	[esp+1Ch+var_1C], eax
		call	BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_6E4444C0
		mov	[esp+1Ch+var_1C], offset dword_6E449A40
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E4444A0
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	SSL_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E44448C
		mov	[esp+1Ch+var_1C], eax
		call	SSL_set_connect_state
		mov	[esp+1Ch+var_10], esi
		mov	[esp+1Ch+var_14], 1
		mov	[esp+1Ch+var_18], 6Dh
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_ctrl
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_push
		test	eax, eax
		jz	short loc_6E4444A0

loc_6E444485:				; CODE XREF: BIO_new_ssl_connect+B2j
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6E44448C:				; CODE XREF: BIO_new_ssl_connect+3Fj
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_free
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E4444A0:				; CODE XREF: BIO_new_ssl_connect+2Dj
					; BIO_new_ssl_connect+73j
		mov	[esp+1Ch+var_1C], edi
		call	BIO_free
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_6E4444C0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4444C0:				; CODE XREF: BIO_new_ssl_connect+17j
					; BIO_new_ssl_connect+A1j
		xor	eax, eax
		jmp	short loc_6E444485
BIO_new_ssl_connect endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 122. BIO_new_ssl

; =============== S U B	R O U T	I N E =======================================


		public BIO_new_ssl
BIO_new_ssl	proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	[esp+1Ch+var_1C], offset dword_6E449A40
		call	BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_6E444540
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	SSL_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_6E444544
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		mov	[esp+1Ch+var_1C], esi
		jnz	short loc_6E444530
		call	SSL_set_accept_state

loc_6E444509:				; CODE XREF: BIO_new_ssl+65j
		mov	[esp+1Ch+var_10], esi
		mov	[esp+1Ch+var_14], 1
		mov	[esp+1Ch+var_18], 6Dh
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_ctrl
		mov	eax, ebx

loc_6E444527:				; CODE XREF: BIO_new_ssl+72j
					; BIO_new_ssl+7Ej
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444530:				; CODE XREF: BIO_new_ssl+32j
		call	SSL_set_connect_state
		jmp	short loc_6E444509
; ---------------------------------------------------------------------------
		align 10h

loc_6E444540:				; CODE XREF: BIO_new_ssl+15j
		xor	eax, eax
		jmp	short loc_6E444527
; ---------------------------------------------------------------------------

loc_6E444544:				; CODE XREF: BIO_new_ssl+27j
		mov	[esp+1Ch+var_1C], ebx
		call	BIO_free
		xor	eax, eax
		jmp	short loc_6E444527
BIO_new_ssl	endp

; Exported entry 124. BIO_ssl_copy_session_id

; =============== S U B	R O U T	I N E =======================================


		public BIO_ssl_copy_session_id
BIO_ssl_copy_session_id	proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+var_18], 207h
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	BIO_find_type
		mov	ebx, eax
		mov	[esp+1Ch+var_18], 207h
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_1C], eax
		call	BIO_find_type
		test	ebx, ebx
		jz	short loc_6E4445B0
		test	eax, eax
		jz	short loc_6E4445B0
		mov	edx, [ebx+20h]
		mov	edx, [edx]
		test	edx, edx
		jz	short loc_6E4445B0
		mov	eax, [eax+20h]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_6E4445B0
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], edx
		call	SSL_copy_session_id
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4445B0:				; CODE XREF: BIO_ssl_copy_session_id+30j
					; BIO_ssl_copy_session_id+34j ...
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
BIO_ssl_copy_session_id	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 131. BIO_ssl_shutdown

; =============== S U B	R O U T	I N E =======================================


		public BIO_ssl_shutdown
BIO_ssl_shutdown proc near

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jnz	short loc_6E4445D7
		jmp	short locret_6E4445F0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4445D0:				; CODE XREF: BIO_ssl_shutdown+1Fj
		mov	eax, [eax+24h]
		test	eax, eax
		jz	short locret_6E4445F0

loc_6E4445D7:				; CODE XREF: BIO_ssl_shutdown+6j
		mov	edx, [eax]
		cmp	dword ptr [edx], 207h
		jnz	short loc_6E4445D0
		mov	eax, [eax+20h]
		mov	eax, [eax]
		mov	[esp+arg_0], eax
		jmp	SSL_shutdown
; ---------------------------------------------------------------------------
		align 10h

locret_6E4445F0:			; CODE XREF: BIO_ssl_shutdown+8j
					; BIO_ssl_shutdown+15j
		retn
BIO_ssl_shutdown endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. ERR_load_SSL_strings

; =============== S U B	R O U T	I N E =======================================


		public ERR_load_SSL_strings
ERR_load_SSL_strings proc near		; CODE XREF: SSL_load_error_strings+Bj

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		sub	esp, 1Ch
		mov	eax, dword_6E44A420
		mov	[esp+1Ch+var_1C], eax
		call	ERR_func_error_string
		test	eax, eax
		jz	short loc_6E444620
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444620:				; CODE XREF: ERR_load_SSL_strings+12j
		mov	[esp+1Ch+var_18], offset dword_6E44A420
		mov	[esp+1Ch+var_1C], 0
		call	ERR_load_strings
		mov	[esp+1Ch+var_18], offset dword_6E449A80
		mov	[esp+1Ch+var_1C], 0
		call	ERR_load_strings
		add	esp, 1Ch
		retn
ERR_load_SSL_strings endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 334. SSL_CTX_SRP_CTX_free

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_SRP_CTX_free
SSL_CTX_SRP_CTX_free proc near		; CODE XREF: SSL_CTX_free+146p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	loc_6E444790
		mov	eax, [ebx+174h]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	eax, [ebx+178h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+17Ch]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+180h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+184h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+188h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+18Ch]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+190h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+194h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	dword ptr [ebx+168h], 0
		mov	dword ptr [ebx+164h], 0
		mov	dword ptr [ebx+16Ch], 0
		mov	dword ptr [ebx+170h], 0
		mov	dword ptr [ebx+178h], 0
		mov	dword ptr [ebx+17Ch], 0
		mov	dword ptr [ebx+180h], 0
		mov	dword ptr [ebx+184h], 0
		mov	dword ptr [ebx+188h], 0
		mov	dword ptr [ebx+18Ch], 0
		mov	dword ptr [ebx+190h], 0
		mov	dword ptr [ebx+194h], 0
		mov	dword ptr [ebx+174h], 0
		mov	dword ptr [ebx+198h], 0
		mov	dword ptr [ebx+19Ch], 400h
		mov	dword ptr [ebx+1A0h], 0
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444790:				; CODE XREF: SSL_CTX_SRP_CTX_free+Aj
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
SSL_CTX_SRP_CTX_free endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 338. SSL_SRP_CTX_free

; =============== S U B	R O U T	I N E =======================================


		public SSL_SRP_CTX_free
SSL_SRP_CTX_free proc near		; CODE XREF: sub_6E40E530+D6p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	loc_6E4448E0
		mov	eax, [ebx+1A4h]
		mov	[esp+1Ch+var_1C], eax
		call	CRYPTO_free
		mov	eax, [ebx+1A8h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+1ACh]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+1B0h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+1B4h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+1B8h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+1BCh]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+1C0h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	eax, [ebx+1C4h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_free
		mov	dword ptr [ebx+198h], 0
		mov	dword ptr [ebx+194h], 0
		mov	dword ptr [ebx+19Ch], 0
		mov	dword ptr [ebx+1A0h], 0
		mov	dword ptr [ebx+1A8h], 0
		mov	dword ptr [ebx+1ACh], 0
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1B4h], 0
		mov	dword ptr [ebx+1B8h], 0
		mov	dword ptr [ebx+1BCh], 0
		mov	dword ptr [ebx+1C0h], 0
		mov	dword ptr [ebx+1C4h], 0
		mov	dword ptr [ebx+1A4h], 0
		mov	dword ptr [ebx+1C8h], 0
		mov	dword ptr [ebx+1CCh], 400h
		mov	dword ptr [ebx+1D0h], 0
		mov	eax, 1
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4448E0:				; CODE XREF: SSL_SRP_CTX_free+Aj
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
SSL_SRP_CTX_free endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 331. SSL_SRP_CTX_init

; =============== S U B	R O U T	I N E =======================================


		public SSL_SRP_CTX_init
SSL_SRP_CTX_init proc near		; CODE XREF: sub_6E40E430+8Fp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		test	ebx, ebx
		jz	loc_6E444BA0
		mov	esi, [ebx+0E4h]
		test	esi, esi
		jz	loc_6E444BA0
		mov	eax, [esi+164h]
		mov	[ebx+194h], eax
		mov	eax, [esi+168h]
		mov	[ebx+198h], eax
		mov	eax, [esi+16Ch]
		mov	[ebx+19Ch], eax
		mov	eax, [esi+170h]
		mov	[ebx+1A0h], eax
		mov	dword ptr [ebx+1A8h], 0
		mov	dword ptr [ebx+1ACh], 0
		mov	dword ptr [ebx+1B0h], 0
		mov	dword ptr [ebx+1B4h], 0
		mov	dword ptr [ebx+1B8h], 0
		mov	dword ptr [ebx+1BCh], 0
		mov	dword ptr [ebx+1C0h], 0
		mov	dword ptr [ebx+1C4h], 0
		mov	dword ptr [ebx+1A4h], 0
		mov	eax, [esi+198h]
		mov	[ebx+1C8h], eax
		mov	eax, [esi+19Ch]
		mov	[ebx+1CCh], eax
		mov	eax, [esi+178h]
		test	eax, eax
		jz	short loc_6E4449D1
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1A8h], eax
		test	eax, eax
		jz	loc_6E444AE0

loc_6E4449D1:				; CODE XREF: SSL_SRP_CTX_init+C9j
		mov	eax, [esi+17Ch]
		test	eax, eax
		jz	short loc_6E4449F1
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1ACh], eax
		test	eax, eax
		jz	loc_6E444AE0

loc_6E4449F1:				; CODE XREF: SSL_SRP_CTX_init+E9j
		mov	eax, [esi+180h]
		test	eax, eax
		jz	short loc_6E444A11
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1B0h], eax
		test	eax, eax
		jz	loc_6E444AE0

loc_6E444A11:				; CODE XREF: SSL_SRP_CTX_init+109j
		mov	eax, [esi+184h]
		test	eax, eax
		jz	short loc_6E444A31
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1B4h], eax
		test	eax, eax
		jz	loc_6E444AE0

loc_6E444A31:				; CODE XREF: SSL_SRP_CTX_init+129j
		mov	eax, [esi+188h]
		test	eax, eax
		jz	short loc_6E444A51
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1B8h], eax
		test	eax, eax
		jz	loc_6E444AE0

loc_6E444A51:				; CODE XREF: SSL_SRP_CTX_init+149j
		mov	eax, [esi+18Ch]
		test	eax, eax
		jz	short loc_6E444A6D
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1BCh], eax
		test	eax, eax
		jz	short loc_6E444AE0

loc_6E444A6D:				; CODE XREF: SSL_SRP_CTX_init+169j
		mov	eax, [esi+194h]
		test	eax, eax
		jz	short loc_6E444A89
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1C4h], eax
		test	eax, eax
		jz	short loc_6E444AE0

loc_6E444A89:				; CODE XREF: SSL_SRP_CTX_init+185j
		mov	eax, [esi+190h]
		test	eax, eax
		jz	short loc_6E444AA5
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1C0h], eax
		test	eax, eax
		jz	short loc_6E444AE0

loc_6E444AA5:				; CODE XREF: SSL_SRP_CTX_init+1A1j
		mov	eax, [esi+174h]
		test	eax, eax
		jz	short loc_6E444AC5
		mov	[esp+2Ch+var_2C], eax
		call	BUF_strdup
		mov	[ebx+1A4h], eax
		test	eax, eax
		jz	loc_6E444BB0

loc_6E444AC5:				; CODE XREF: SSL_SRP_CTX_init+1BDj
		mov	eax, [esi+1A0h]
		mov	[ebx+1D0h], eax
		mov	eax, 1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444AE0:				; CODE XREF: SSL_SRP_CTX_init+DBj
					; SSL_SRP_CTX_init+FBj	...
		mov	[esp+2Ch+var_1C], 0B0h
		mov	[esp+2Ch+var_20], offset aTls_srp_c ; "tls_srp.c"
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 139h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error

loc_6E444B0C:				; CODE XREF: SSL_SRP_CTX_init+2ECj
		mov	eax, [ebx+1A4h]
		mov	[esp+2Ch+var_2C], eax
		call	CRYPTO_free
		mov	eax, [ebx+1A8h]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	eax, [ebx+1ACh]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	eax, [ebx+1B0h]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	eax, [ebx+1B4h]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	eax, [ebx+1B8h]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	eax, [ebx+1BCh]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	eax, [ebx+1C0h]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	eax, [ebx+1C4h]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444BA0:				; CODE XREF: SSL_SRP_CTX_init+Bj
					; SSL_SRP_CTX_init+19j
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444BB0:				; CODE XREF: SSL_SRP_CTX_init+1CFj
		mov	[esp+2Ch+var_1C], 0B5h
		mov	[esp+2Ch+var_20], offset aTls_srp_c ; "tls_srp.c"
		mov	[esp+2Ch+var_24], 44h
		mov	[esp+2Ch+var_28], 139h
		mov	[esp+2Ch+var_2C], 14h
		call	ERR_put_error
		jmp	loc_6E444B0C
SSL_SRP_CTX_init endp

; ---------------------------------------------------------------------------
		jmp	short SSL_CTX_SRP_CTX_init
; ---------------------------------------------------------------------------
		align 10h
; Exported entry 330. SSL_CTX_SRP_CTX_init

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_SRP_CTX_init
SSL_CTX_SRP_CTX_init proc near		; CODE XREF: SSL_CTX_new+389p
					; .text:6E444BE1j

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		test	eax, eax
		jz	loc_6E444CB0
		mov	dword ptr [eax+164h], 0
		mov	dword ptr [eax+168h], 0
		mov	dword ptr [eax+16Ch], 0
		mov	dword ptr [eax+170h], 0
		mov	dword ptr [eax+178h], 0
		mov	dword ptr [eax+17Ch], 0
		mov	dword ptr [eax+180h], 0
		mov	dword ptr [eax+184h], 0
		mov	dword ptr [eax+188h], 0
		mov	dword ptr [eax+18Ch], 0
		mov	dword ptr [eax+190h], 0
		mov	dword ptr [eax+194h], 0
		mov	dword ptr [eax+174h], 0
		mov	dword ptr [eax+1A0h], 0
		mov	dword ptr [eax+198h], 0
		mov	dword ptr [eax+19Ch], 400h
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444CB0:				; CODE XREF: SSL_CTX_SRP_CTX_init+6j
		xor	eax, eax
		retn
SSL_CTX_SRP_CTX_init endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 336. SSL_srp_server_param_with_username

; =============== S U B	R O U T	I N E =======================================


		public SSL_srp_server_param_with_username
SSL_srp_server_param_with_username proc	near ; CODE XREF: sub_6E406650+B85p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= byte ptr -3Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 44h
		mov	ebx, [esp+4Ch+arg_0]
		mov	esi, [esp+4Ch+arg_4]
		mov	dword ptr [esi], 73h
		mov	eax, [ebx+198h]
		test	eax, eax
		jz	short loc_6E444CF8
		mov	edx, [ebx+194h]
		mov	[esp+4Ch+var_44], edx
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], ebx
		call	eax
		test	eax, eax
		jnz	loc_6E444DC0

loc_6E444CF8:				; CODE XREF: SSL_srp_server_param_with_username+1Bj
		mov	dword ptr [esi], 50h
		mov	esi, [ebx+1A8h]
		test	esi, esi
		jz	loc_6E444DD0
		mov	ecx, [ebx+1ACh]
		test	ecx, ecx
		jz	loc_6E444DD0
		mov	edx, [ebx+1B0h]
		test	edx, edx
		jz	loc_6E444DD0
		mov	eax, [ebx+1C4h]
		test	eax, eax
		jz	loc_6E444DD0
		mov	[esp+4Ch+var_48], 30h
		lea	esi, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_4C], esi
		call	RAND_bytes
		test	eax, eax
		jle	loc_6E444DD0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 30h
		mov	[esp+4Ch+var_4C], esi
		call	BN_bin2bn
		mov	[ebx+1C0h], eax
		mov	[esp+4Ch+var_48], 30h
		mov	[esp+4Ch+var_4C], esi
		call	OPENSSL_cleanse
		mov	esi, [ebx+1C4h]
		mov	ecx, [ebx+1ACh]
		mov	edx, [ebx+1A8h]
		mov	eax, [ebx+1C0h]
		mov	[esp+4Ch+var_40], esi
		mov	[esp+4Ch+var_44], ecx
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		call	SRP_Calc_B
		mov	[ebx+1B4h], eax
		cmp	eax, 1
		sbb	eax, eax
		and	eax, 2
		lea	esi, [esi+0]

loc_6E444DC0:				; CODE XREF: SSL_srp_server_param_with_username+32j
		add	esp, 44h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444DD0:				; CODE XREF: SSL_srp_server_param_with_username+46j
					; SSL_srp_server_param_with_username+54j ...
		mov	eax, 2
		add	esp, 44h
		pop	ebx
		pop	esi
		retn
SSL_srp_server_param_with_username endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 321. SSL_set_srp_server_param_pw

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_srp_server_param_pw
SSL_set_srp_server_param_pw proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_2C], eax
		call	SRP_get_default_gN
		mov	esi, eax
		test	eax, eax
		jz	loc_6E444EA0
		mov	eax, [eax+8]
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1A8h], eax
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1ACh], eax
		mov	eax, [ebx+1C4h]
		test	eax, eax
		jz	short loc_6E444E3D
		mov	[esp+2Ch+var_2C], eax
		call	BN_clear_free
		mov	dword ptr [ebx+1C4h], 0

loc_6E444E3D:				; CODE XREF: SSL_set_srp_server_param_pw+49j
		mov	eax, [ebx+1B0h]
		test	eax, eax
		jz	short loc_6E444E59
		mov	[esp+2Ch+var_2C], eax
		call	BN_clear_free
		mov	dword ptr [ebx+1B0h], 0

loc_6E444E59:				; CODE XREF: SSL_set_srp_server_param_pw+65j
		mov	edx, [esi+4]
		mov	eax, [esi+8]
		mov	[esp+2Ch+var_18], edx
		mov	[esp+2Ch+var_1C], eax
		lea	eax, [ebx+1C4h]
		mov	[esp+2Ch+var_20], eax
		add	ebx, 1B0h
		mov	[esp+2Ch+var_24], ebx
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], eax
		call	SRP_create_verifier_BN
		test	eax, eax
		jz	short loc_6E444EA0
		mov	eax, 1

loc_6E444E98:				; CODE XREF: SSL_set_srp_server_param_pw+C5j
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444EA0:				; CODE XREF: SSL_set_srp_server_param_pw+19j
					; SSL_set_srp_server_param_pw+B1j
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E444E98
SSL_set_srp_server_param_pw endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 320. SSL_set_srp_server_param

; =============== S U B	R O U T	I N E =======================================


		public SSL_set_srp_server_param
SSL_set_srp_server_param proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_4]
		mov	ebp, [esp+2Ch+arg_8]
		mov	edi, [esp+2Ch+arg_C]
		mov	esi, [esp+2Ch+arg_10]
		test	eax, eax
		jz	short loc_6E444EF1
		mov	edx, [ebx+1A8h]
		test	edx, edx
		jz	loc_6E444FC0
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edx
		call	BN_copy
		test	eax, eax
		jz	loc_6E445040

loc_6E444EF1:				; CODE XREF: SSL_set_srp_server_param+1Dj
					; SSL_set_srp_server_param+11Ej ...
		test	ebp, ebp
		jz	short loc_6E444F17
		mov	eax, [ebx+1ACh]
		test	eax, eax
		jz	loc_6E444FE0
		mov	[esp+2Ch+var_28], ebp
		mov	[esp+2Ch+var_2C], eax
		call	BN_copy
		test	eax, eax
		jz	loc_6E4450A0

loc_6E444F17:				; CODE XREF: SSL_set_srp_server_param+43j
					; SSL_set_srp_server_param+13Ej ...
		test	edi, edi
		jz	short loc_6E444F3D
		mov	eax, [ebx+1B0h]
		test	eax, eax
		jz	loc_6E445000
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], eax
		call	BN_copy
		test	eax, eax
		jz	loc_6E445080

loc_6E444F3D:				; CODE XREF: SSL_set_srp_server_param+69j
					; SSL_set_srp_server_param+15Ej ...
		test	esi, esi
		jz	short loc_6E444F63
		mov	eax, [ebx+1C4h]
		test	eax, eax
		jz	loc_6E445020
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], eax
		call	BN_copy
		test	eax, eax
		jz	loc_6E445060

loc_6E444F63:				; CODE XREF: SSL_set_srp_server_param+8Fj
					; SSL_set_srp_server_param+17Ej ...
		mov	eax, [esp+2Ch+arg_14]
		mov	[ebx+1C8h], eax
		mov	esi, [ebx+1A8h]
		test	esi, esi
		jz	loc_6E4450C0
		mov	ecx, [ebx+1ACh]
		test	ecx, ecx
		jz	loc_6E4450C0
		mov	edx, [ebx+1B0h]
		test	edx, edx
		jz	loc_6E4450C0
		mov	eax, [ebx+1C4h]
		test	eax, eax
		jz	loc_6E4450C0
		mov	eax, 1

loc_6E444FAA:				; CODE XREF: SSL_set_srp_server_param+215j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E444FC0:				; CODE XREF: SSL_set_srp_server_param+27j
		mov	[esp+2Ch+var_2C], eax
		call	BN_dup
		mov	[ebx+1A8h], eax
		jmp	loc_6E444EF1
; ---------------------------------------------------------------------------
		align 10h

loc_6E444FE0:				; CODE XREF: SSL_set_srp_server_param+4Dj
		mov	[esp+2Ch+var_2C], ebp
		call	BN_dup
		mov	[ebx+1ACh], eax
		jmp	loc_6E444F17
; ---------------------------------------------------------------------------
		align 10h

loc_6E445000:				; CODE XREF: SSL_set_srp_server_param+73j
		mov	[esp+2Ch+var_2C], edi
		call	BN_dup
		mov	[ebx+1B0h], eax
		jmp	loc_6E444F3D
; ---------------------------------------------------------------------------
		align 10h

loc_6E445020:				; CODE XREF: SSL_set_srp_server_param+99j
		mov	[esp+2Ch+var_2C], esi
		call	BN_dup
		mov	[ebx+1C4h], eax
		jmp	loc_6E444F63
; ---------------------------------------------------------------------------
		align 10h

loc_6E445040:				; CODE XREF: SSL_set_srp_server_param+3Bj
		mov	eax, [ebx+1A8h]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	dword ptr [ebx+1A8h], 0
		jmp	loc_6E444EF1
; ---------------------------------------------------------------------------
		align 10h

loc_6E445060:				; CODE XREF: SSL_set_srp_server_param+ADj
		mov	eax, [ebx+1C4h]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	dword ptr [ebx+1C4h], 0
		jmp	loc_6E444F63
; ---------------------------------------------------------------------------
		align 10h

loc_6E445080:				; CODE XREF: SSL_set_srp_server_param+87j
		mov	eax, [ebx+1B0h]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	dword ptr [ebx+1B0h], 0
		jmp	loc_6E444F3D
; ---------------------------------------------------------------------------
		align 10h

loc_6E4450A0:				; CODE XREF: SSL_set_srp_server_param+61j
		mov	eax, [ebx+1ACh]
		mov	[esp+2Ch+var_2C], eax
		call	BN_free
		mov	dword ptr [ebx+1ACh], 0
		jmp	loc_6E444F17
; ---------------------------------------------------------------------------
		align 10h

loc_6E4450C0:				; CODE XREF: SSL_set_srp_server_param+C5j
					; SSL_set_srp_server_param+D3j	...
		mov	eax, 0FFFFFFFFh
		jmp	loc_6E444FAA
SSL_set_srp_server_param endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 333. SRP_generate_server_master_secret

; =============== S U B	R O U T	I N E =======================================


		public SRP_generate_server_master_secret
SRP_generate_server_master_secret proc near ; CODE XREF: sub_6E403B20+62Ap

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	edx, [ebx+1A8h]
		mov	eax, [ebx+1B8h]
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	SRP_Verify_A_mod_N
		test	eax, eax
		jz	loc_6E445220
		mov	ecx, [ebx+1A8h]
		mov	edx, [ebx+1B4h]
		mov	eax, [ebx+1B8h]
		mov	[esp+3Ch+var_34], ecx
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	SRP_Calc_u
		mov	edi, eax
		test	eax, eax
		jz	loc_6E445220
		mov	esi, [ebx+1A8h]
		mov	ecx, [ebx+1C0h]
		mov	edx, [ebx+1C4h]
		mov	eax, [ebx+1B8h]
		mov	[esp+3Ch+var_2C], esi
		mov	[esp+3Ch+var_30], ecx
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], eax
		call	SRP_Calc_server_key
		mov	esi, eax
		test	eax, eax
		jz	loc_6E445224
		mov	[esp+3Ch+var_3C], eax
		call	BN_num_bits
		mov	ebp, eax
		add	ebp, 7
		js	loc_6E445210

loc_6E445174:				; CODE XREF: SRP_generate_server_master_secret+143j
		sar	ebp, 3
		mov	[esp+3Ch+var_34], 162h
		mov	[esp+3Ch+var_38], offset aTls_srp_c ; "tls_srp.c"
		mov	[esp+3Ch+var_24], ebp
		mov	[esp+3Ch+var_3C], ebp
		call	CRYPTO_malloc
		mov	ebp, eax
		test	eax, eax
		jz	loc_6E445224
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], esi
		call	BN_bn2bin
		mov	eax, [ebx+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	ecx, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_30], ecx
		mov	[esp+3Ch+var_34], ebp
		mov	ecx, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_3C], ebx
		call	eax
		mov	[esp+3Ch+var_20], eax
		mov	ecx, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_3C], ebp
		call	OPENSSL_cleanse
		mov	[esp+3Ch+var_3C], ebp
		call	CRYPTO_free
		mov	eax, [esp+3Ch+var_20]

loc_6E4451EB:				; CODE XREF: SRP_generate_server_master_secret+159j
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_3C], esi
		call	BN_clear_free
		mov	[esp+3Ch+var_3C], edi
		call	BN_clear_free
		mov	eax, [esp+3Ch+var_24]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445210:				; CODE XREF: SRP_generate_server_master_secret+9Ej
		lea	ebp, [eax+0Eh]
		jmp	loc_6E445174
; ---------------------------------------------------------------------------
		align 10h

loc_6E445220:				; CODE XREF: SRP_generate_server_master_secret+25j
					; SRP_generate_server_master_secret+51j
		xor	edi, edi
		xor	esi, esi

loc_6E445224:				; CODE XREF: SRP_generate_server_master_secret+8Bj
					; SRP_generate_server_master_secret+C7j
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E4451EB
SRP_generate_server_master_secret endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 335. SRP_generate_client_master_secret

; =============== S U B	R O U T	I N E =======================================


		public SRP_generate_client_master_secret
SRP_generate_client_master_secret proc near ; CODE XREF: sub_6E40B060+88Ap

Str		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebp, [esp+4Ch+arg_0]
		mov	edx, [ebp+1A8h]
		mov	eax, [ebp+1B4h]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+Str], eax
		call	SRP_Verify_B_mod_N
		test	eax, eax
		jz	loc_6E445400
		mov	ecx, [ebp+1A8h]
		mov	edx, [ebp+1B4h]
		mov	eax, [ebp+1B8h]
		mov	[esp+4Ch+var_44], ecx
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+Str], eax
		call	SRP_Calc_u
		mov	edi, eax
		mov	[esp+4Ch+var_20], eax
		test	eax, eax
		jz	loc_6E445400
		mov	eax, [ebp+1A0h]
		test	eax, eax
		jz	loc_6E445408
		mov	edx, [ebp+194h]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+Str], ebp
		call	eax
		mov	ebx, eax
		test	eax, eax
		jz	loc_6E445408
		mov	edx, [ebp+1A4h]
		mov	eax, [ebp+1B0h]
		mov	[esp+4Ch+var_44], ebx
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+Str], eax
		call	SRP_Calc_x
		mov	[esp+4Ch+var_28], eax
		test	eax, eax
		jz	loc_6E445430
		mov	ecx, [ebp+1BCh]
		mov	edx, [ebp+1ACh]
		mov	eax, [ebp+1B4h]
		mov	esi, [ebp+1A8h]
		mov	[esp+4Ch+var_38], edi
		mov	[esp+4Ch+var_3C], ecx
		mov	ecx, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_40], ecx
		mov	[esp+4Ch+var_44], edx
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+Str], esi
		call	SRP_Calc_client_key
		mov	esi, eax
		test	eax, eax
		jz	loc_6E445432
		mov	[esp+4Ch+Str], eax
		call	BN_num_bits
		mov	edx, eax
		add	edx, 7
		js	loc_6E4453F0

loc_6E44532F:				; CODE XREF: SRP_generate_client_master_secret+1C3j
		sar	edx, 3
		mov	[esp+4Ch+var_44], 191h
		mov	[esp+4Ch+var_48], offset aTls_srp_c ; "tls_srp.c"
		mov	[esp+4Ch+var_24], edx
		mov	[esp+4Ch+Str], edx
		call	CRYPTO_malloc
		mov	edi, eax
		test	eax, eax
		jz	loc_6E445432
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+Str], esi
		call	BN_bn2bin
		mov	eax, [ebp+8]
		mov	eax, [eax+64h]
		mov	eax, [eax+0Ch]
		mov	edx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], edi
		mov	ecx, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_48], ecx
		mov	[esp+4Ch+Str], ebp
		call	eax
		mov	ebp, eax
		mov	edx, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+Str], edi
		call	OPENSSL_cleanse
		mov	[esp+4Ch+Str], edi
		call	CRYPTO_free
		mov	[esp+4Ch+Str], esi
		call	BN_clear_free
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+Str], eax
		call	BN_clear_free

loc_6E4453B4:				; CODE XREF: SRP_generate_client_master_secret+21Bj
		mov	[esp+4Ch+Str], ebx ; Str
		call	strlen
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+Str], ebx
		call	OPENSSL_cleanse
		mov	[esp+4Ch+Str], ebx
		call	CRYPTO_free

loc_6E4453D0:				; CODE XREF: SRP_generate_client_master_secret+1F5j
		mov	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+Str], eax
		call	BN_clear_free
		mov	eax, ebp
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4453F0:				; CODE XREF: SRP_generate_client_master_secret+F9j
		lea	edx, [eax+0Eh]
		jmp	loc_6E44532F
; ---------------------------------------------------------------------------
		align 10h

loc_6E445400:				; CODE XREF: SRP_generate_client_master_secret+25j
					; SRP_generate_client_master_secret+55j
		mov	[esp+4Ch+var_20], 0

loc_6E445408:				; CODE XREF: SRP_generate_client_master_secret+63j
					; SRP_generate_client_master_secret+7Cj
		mov	[esp+4Ch+Str], 0
		call	BN_clear_free
		mov	[esp+4Ch+Str], 0
		call	BN_clear_free
		mov	ebp, 0FFFFFFFFh
		jmp	short loc_6E4453D0
; ---------------------------------------------------------------------------
		align 10h

loc_6E445430:				; CODE XREF: SRP_generate_client_master_secret+A4j
		xor	esi, esi

loc_6E445432:				; CODE XREF: SRP_generate_client_master_secret+E6j
					; SRP_generate_client_master_secret+122j
		mov	[esp+4Ch+Str], esi
		call	BN_clear_free
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+Str], eax
		call	BN_clear_free
		mov	ebp, 0FFFFFFFFh
		jmp	loc_6E4453B4
SRP_generate_client_master_secret endp


; =============== S U B	R O U T	I N E =======================================


sub_6E445450	proc near		; CODE XREF: sub_6E408AD0+7A3p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	edx, [ebx+1A8h]
		mov	eax, [ebx+1ACh]
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], eax
		call	BN_ucmp
		test	eax, eax
		js	short loc_6E445490

loc_6E445474:				; CODE XREF: sub_6E445450+5Aj
					; sub_6E445450+67j
		mov	eax, [esp+1Ch+arg_4]
		mov	dword ptr [eax], 2Fh
		xor	eax, eax

loc_6E445480:				; CODE XREF: sub_6E445450+A1j
					; sub_6E445450+CCj
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445490:				; CODE XREF: sub_6E445450+22j
		mov	edx, [ebx+1A8h]
		mov	eax, [ebx+1B4h]
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], eax
		call	BN_ucmp
		test	eax, eax
		jns	short loc_6E445474
		mov	eax, [ebx+1B4h]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_6E445474
		mov	eax, [ebx+1A8h]
		mov	[esp+1Ch+var_1C], eax
		call	BN_num_bits
		cmp	eax, [ebx+1CCh]
		jl	short loc_6E445510
		mov	eax, [ebx+19Ch]
		test	eax, eax
		jz	short loc_6E4454F3
		mov	edx, [ebx+194h]
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], ebx
		call	eax
		test	eax, eax
		jle	short loc_6E445510

loc_6E4454EC:				; CODE XREF: sub_6E445450+BDj
		mov	eax, 1
		jmp	short loc_6E445480
; ---------------------------------------------------------------------------

loc_6E4454F3:				; CODE XREF: sub_6E445450+87j
		mov	edx, [ebx+1A8h]
		mov	eax, [ebx+1ACh]
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], eax
		call	SRP_check_known_gN_param
		test	eax, eax
		jnz	short loc_6E4454EC
		nop

loc_6E445510:				; CODE XREF: sub_6E445450+7Dj
					; sub_6E445450+9Aj
		mov	eax, [esp+1Ch+arg_4]
		mov	dword ptr [eax], 47h
		xor	eax, eax
		jmp	loc_6E445480
sub_6E445450	endp

; ---------------------------------------------------------------------------
		jmp	short SRP_Calc_A_param
; ---------------------------------------------------------------------------
		align 10h
; Exported entry 332. SRP_Calc_A_param

; =============== S U B	R O U T	I N E =======================================


		public SRP_Calc_A_param
SRP_Calc_A_param proc near		; CODE XREF: sub_6E40D250+B1Dp
					; .text:6E445521j

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_3C		= byte ptr -3Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 44h
		mov	ebx, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_48], 30h
		lea	esi, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_4C], esi
		call	RAND_bytes
		test	eax, eax
		jle	short loc_6E4455C0
		mov	eax, [ebx+1BCh]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 30h
		mov	[esp+4Ch+var_4C], esi
		call	BN_bin2bn
		mov	[ebx+1BCh], eax
		mov	[esp+4Ch+var_48], 30h
		mov	[esp+4Ch+var_4C], esi
		call	OPENSSL_cleanse
		mov	ecx, [ebx+1ACh]
		mov	edx, [ebx+1A8h]
		mov	eax, [ebx+1BCh]
		mov	[esp+4Ch+var_44], ecx
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		call	SRP_Calc_A
		mov	[ebx+1B8h], eax
		test	eax, eax
		jz	short loc_6E4455C0
		mov	eax, 1

loc_6E4455B2:				; CODE XREF: SRP_Calc_A_param+95j
		add	esp, 44h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4455C0:				; CODE XREF: SRP_Calc_A_param+1Fj
					; SRP_Calc_A_param+7Bj
		mov	eax, 0FFFFFFFFh
		jmp	short loc_6E4455B2
SRP_Calc_A_param endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 317. SSL_get_srp_g

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_srp_g
SSL_get_srp_g	proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+1ACh]
		test	eax, eax
		jz	short loc_6E4455E0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4455E0:				; CODE XREF: SSL_get_srp_g+Cj
		mov	eax, [edx+0E4h]
		mov	eax, [eax+17Ch]
		retn
SSL_get_srp_g	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 322. SSL_get_srp_N

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_srp_N
SSL_get_srp_N	proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+1A8h]
		test	eax, eax
		jz	short loc_6E445600
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445600:				; CODE XREF: SSL_get_srp_N+Cj
		mov	eax, [edx+0E4h]
		mov	eax, [eax+178h]
		retn
SSL_get_srp_N	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 323. SSL_get_srp_username

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_srp_username
SSL_get_srp_username proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+1A4h]
		test	eax, eax
		jz	short loc_6E445620
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445620:				; CODE XREF: SSL_get_srp_username+Cj
		mov	eax, [edx+0E4h]
		mov	eax, [eax+174h]
		retn
SSL_get_srp_username endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 319. SSL_get_srp_userinfo

; =============== S U B	R O U T	I N E =======================================


		public SSL_get_srp_userinfo
SSL_get_srp_userinfo proc near

arg_0		= dword	ptr  4

		mov	edx, [esp+arg_0]
		mov	eax, [edx+1C8h]
		test	eax, eax
		jz	short loc_6E445640
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445640:				; CODE XREF: SSL_get_srp_userinfo+Cj
		mov	eax, [edx+0E4h]
		mov	eax, [eax+198h]
		retn
SSL_get_srp_userinfo endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 329. SSL_CTX_set_srp_username

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SSL_CTX_set_srp_username(int, char *)
		public SSL_CTX_set_srp_username
SSL_CTX_set_srp_username proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_10], eax ;	char *
		mov	[esp+1Ch+var_14], 0 ; int
		mov	[esp+1Ch+var_18], 4Fh ;	int
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	int
		call	sub_6E40EFD0
		add	esp, 1Ch
		retn
SSL_CTX_set_srp_username endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 324. SSL_CTX_set_srp_password

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SSL_CTX_set_srp_password(int, char *)
		public SSL_CTX_set_srp_password
SSL_CTX_set_srp_password proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_10], eax ;	char *
		mov	[esp+1Ch+var_14], 0 ; int
		mov	[esp+1Ch+var_18], 51h ;	int
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	int
		call	sub_6E40EFD0
		add	esp, 1Ch
		retn
SSL_CTX_set_srp_password endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 325. SSL_CTX_set_srp_strength

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_srp_strength
SSL_CTX_set_srp_strength proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_10], 0 ; char *
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], eax ;	int
		mov	[esp+1Ch+var_18], 50h ;	int
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	int
		call	sub_6E40EFD0
		add	esp, 1Ch
		retn
SSL_CTX_set_srp_strength endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 326. SSL_CTX_set_srp_verify_param_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_srp_verify_param_callback
SSL_CTX_set_srp_verify_param_callback proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], 4Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6E40F7C0
		add	esp, 1Ch
		retn
SSL_CTX_set_srp_verify_param_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 328. SSL_CTX_set_srp_cb_arg

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SSL_CTX_set_srp_cb_arg(int, char *)
		public SSL_CTX_set_srp_cb_arg
SSL_CTX_set_srp_cb_arg proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_10], eax ;	char *
		mov	[esp+1Ch+var_14], 0 ; int
		mov	[esp+1Ch+var_18], 4Eh ;	int
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	int
		call	sub_6E40EFD0
		add	esp, 1Ch
		retn
SSL_CTX_set_srp_cb_arg endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 318. SSL_CTX_set_srp_username_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_srp_username_callback
SSL_CTX_set_srp_username_callback proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], 4Bh
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6E40F7C0
		add	esp, 1Ch
		retn
SSL_CTX_set_srp_username_callback endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry 316. SSL_CTX_set_srp_client_pwd_callback

; =============== S U B	R O U T	I N E =======================================


		public SSL_CTX_set_srp_client_pwd_callback
SSL_CTX_set_srp_client_pwd_callback proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], 4Dh
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6E40F7C0
		add	esp, 1Ch
		retn
SSL_CTX_set_srp_client_pwd_callback endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4457A0	proc near		; CODE XREF: sub_6E41B270+61Bp
					; sub_6E41B270+688p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_4]
		test	eax, eax
		jz	short loc_6E445800
		mov	ecx, [ebp+58h]
		mov	cl, [ecx+3D4h]
		xor	ebx, ebx
		mov	bl, cl
		cmp	ebx, [esp+3Ch+arg_C]
		jge	loc_6E445880
		mov	[eax], cl
		mov	ecx, [ebp+58h]
		xor	ebx, ebx
		mov	bl, [ecx+3D4h]
		lea	edi, [eax+1]
		lea	esi, [ecx+394h]
		cmp	ebx, 4
		jnb	short loc_6E445850
		xor	eax, eax
		test	bl, 2
		jnz	short loc_6E445830

loc_6E4457EC:				; CODE XREF: sub_6E4457A0+D0j
		and	ebx, 1
		jnz	short loc_6E445820
		jmp	short loc_6E445800
; ---------------------------------------------------------------------------
		align 10h

loc_6E445800:				; CODE XREF: sub_6E4457A0+11j
					; sub_6E4457A0+51j ...
		mov	eax, [ebp+58h]
		xor	edx, edx
		mov	dl, [eax+3D4h]
		inc	edx
		mov	eax, [esp+3Ch+arg_8]
		mov	[eax], edx
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445820:				; CODE XREF: sub_6E4457A0+4Fj
					; sub_6E4457A0+A0j
		mov	bl, [esi+eax]
		mov	[esp+3Ch+var_1D], bl
		mov	[edi+eax], bl
		jmp	short loc_6E445800
; ---------------------------------------------------------------------------
		align 10h

loc_6E445830:				; CODE XREF: sub_6E4457A0+4Aj
					; sub_6E4457A0+D6j
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2
		and	ebx, 1
		jz	short loc_6E445800
		jmp	short loc_6E445820
; ---------------------------------------------------------------------------
		align 10h

loc_6E445850:				; CODE XREF: sub_6E4457A0+43j
		test	edi, 1
		jnz	loc_6E4458E0

loc_6E44585C:				; CODE XREF: sub_6E4457A0+153j
		test	edi, 2
		jnz	short loc_6E4458C0

loc_6E445864:				; CODE XREF: sub_6E4457A0+12Fj
		mov	ecx, ebx
		shr	ecx, 2
		rep movsd
		xor	eax, eax
		test	bl, 2
		jz	loc_6E4457EC
		jmp	short loc_6E445830
; ---------------------------------------------------------------------------
		align 10h

loc_6E445880:				; CODE XREF: sub_6E4457A0+24j
		mov	[esp+3Ch+var_2C], 7Ah
		mov	[esp+3Ch+var_30], offset aT1_reneg_c ; "t1_reneg.c"
		mov	[esp+3Ch+var_34], 14Fh
		mov	[esp+3Ch+var_38], 12Ah
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4458C0:				; CODE XREF: sub_6E4457A0+C2j
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	ebx, 2
		jmp	short loc_6E445864
; ---------------------------------------------------------------------------
		jmp	short loc_6E4458E0
; ---------------------------------------------------------------------------
		align 10h

loc_6E4458E0:				; CODE XREF: sub_6E4457A0+B6j
					; sub_6E4457A0+131j
		mov	dl, [ecx+394h]
		mov	[eax+1], dl
		lea	edi, [eax+2]
		lea	esi, [ecx+395h]
		dec	ebx
		jmp	loc_6E44585C
sub_6E4457A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E445900	proc near		; CODE XREF: sub_6E41DDD0+B60p

Buf1		= dword	ptr -2Ch
Buf2		= dword	ptr -28h
Size		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 28h
		mov	ecx, [esp+2Ch+arg_4]
		mov	eax, [esp+2Ch+arg_8]
		test	eax, eax
		jle	loc_6E4459F0
		xor	edx, edx
		mov	dl, [ecx]
		lea	ebx, [edx+1]
		cmp	ebx, eax
		jnz	loc_6E4459B0
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [eax+58h]
		xor	eax, eax
		mov	al, [ebx+3D4h]
		cmp	eax, edx
		jnz	short loc_6E445970
		mov	[esp+2Ch+Size],	eax ; Size
		lea	eax, [ebx+394h]
		mov	[esp+2Ch+Buf2],	eax ; Buf2
		inc	ecx
		mov	[esp+2Ch+Buf1],	ecx ; Buf1
		call	memcmp
		test	eax, eax
		jnz	loc_6E445A00
		mov	dword ptr [ebx+418h], 1
		mov	eax, 1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445970:				; CODE XREF: sub_6E445900+34j
		mov	[esp+2Ch+var_1C], 0ACh

loc_6E445978:				; CODE XREF: sub_6E445900+108j
		mov	[esp+2Ch+var_20], offset aT1_reneg_c ; "t1_reneg.c"
		mov	[esp+2Ch+Size],	151h
		mov	[esp+2Ch+Buf2],	12Ch
		mov	[esp+2Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+arg_C]
		mov	dword ptr [eax], 28h
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4459B0:				; CODE XREF: sub_6E445900+1Dj
		mov	[esp+2Ch+var_1C], 0A4h

loc_6E4459B8:				; CODE XREF: sub_6E445900+F8j
		mov	[esp+2Ch+var_20], offset aT1_reneg_c ; "t1_reneg.c"
		mov	[esp+2Ch+Size],	150h
		mov	[esp+2Ch+Buf2],	12Ch
		mov	[esp+2Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+2Ch+arg_C]
		mov	dword ptr [eax], 2Fh
		xor	eax, eax
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4459F0:				; CODE XREF: sub_6E445900+Ej
		mov	[esp+2Ch+var_1C], 9Ah
		jmp	short loc_6E4459B8
; ---------------------------------------------------------------------------
		align 10h

loc_6E445A00:				; CODE XREF: sub_6E445900+4Fj
		mov	[esp+2Ch+var_1C], 0B4h
		jmp	loc_6E445978
sub_6E445900	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E445A10	proc near		; CODE XREF: sub_6E41C0E0+34Bp
					; sub_6E41C0E0+389p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_24		= dword	ptr -24h
var_1D		= byte ptr -1Dh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [esp+3Ch+arg_0]
		mov	ecx, [esp+3Ch+arg_4]
		test	ecx, ecx
		jz	loc_6E445AD0
		mov	edx, [eax+58h]
		mov	bl, [edx+3D4h]
		mov	dl, [edx+415h]
		mov	edi, ebx
		and	edi, 0FFh
		mov	esi, edx
		and	esi, 0FFh
		add	esi, edi
		cmp	esi, [esp+3Ch+arg_C]
		jge	loc_6E445BC0
		add	ebx, edx
		mov	[ecx], bl
		lea	ebx, [ecx+1]
		mov	[esp+3Ch+var_24], ebx
		mov	ebp, [eax+58h]
		xor	edx, edx
		mov	dl, [ebp+3D4h]
		mov	edi, ebx
		lea	esi, [ebp+394h]
		cmp	edx, 4
		jnb	loc_6E445B90
		xor	ecx, ecx
		test	dl, 2
		jnz	loc_6E445B40

loc_6E445A84:				; CODE XREF: sub_6E445A10+1A1j
		and	edx, 1
		jnz	loc_6E445B30

loc_6E445A8D:				; CODE XREF: sub_6E445A10+12Aj
					; sub_6E445A10+13Ej
		mov	ecx, [eax+58h]
		movzx	esi, byte ptr [ecx+3D4h]
		and	esi, 0FFh
		xor	edx, edx
		mov	dl, [ecx+415h]
		mov	edi, [esp+3Ch+var_24]
		add	edi, esi
		lea	esi, [ecx+3D5h]
		cmp	edx, 4
		jnb	loc_6E445B60
		xor	ecx, ecx
		test	dl, 2
		jnz	short loc_6E445B10

loc_6E445AC1:				; CODE XREF: sub_6E445A10+174j
		and	edx, 1
		jnz	short loc_6E445B00
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_6E445AD0:				; CODE XREF: sub_6E445A10+11j
					; sub_6E445A10+FAj ...
		mov	eax, [eax+58h]
		xor	edx, edx
		mov	dl, [eax+3D4h]
		mov	bl, [eax+415h]
		and	ebx, 0FFh
		lea	edx, [edx+ebx+1]
		mov	eax, [esp+3Ch+arg_8]
		mov	[eax], edx
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445B00:				; CODE XREF: sub_6E445A10+B4j
					; sub_6E445A10+110j
		mov	bl, [esi+ecx]
		mov	byte ptr [esp+3Ch+var_24], bl
		mov	[edi+ecx], bl
		jmp	short loc_6E445AD0
; ---------------------------------------------------------------------------
		align 10h

loc_6E445B10:				; CODE XREF: sub_6E445A10+AFj
					; sub_6E445A10+17Aj
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		and	edx, 1
		jz	short loc_6E445AD0
		jmp	short loc_6E445B00
; ---------------------------------------------------------------------------
		align 10h

loc_6E445B30:				; CODE XREF: sub_6E445A10+77j
					; sub_6E445A10+144j
		mov	dl, [esi+ecx]
		mov	[esp+3Ch+var_1D], dl
		mov	[edi+ecx], dl
		jmp	loc_6E445A8D
; ---------------------------------------------------------------------------
		align 10h

loc_6E445B40:				; CODE XREF: sub_6E445A10+6Ej
					; sub_6E445A10+1A7j
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		and	edx, 1
		jz	loc_6E445A8D
		jmp	short loc_6E445B30
; ---------------------------------------------------------------------------
		align 10h

loc_6E445B60:				; CODE XREF: sub_6E445A10+A4j
		test	edi, 1
		jnz	loc_6E445C20

loc_6E445B6C:				; CODE XREF: sub_6E445A10+220j
		test	edi, 2
		jnz	loc_6E445C00

loc_6E445B78:				; CODE XREF: sub_6E445A10+1FFj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		xor	ecx, ecx
		test	dl, 2
		jz	loc_6E445AC1
		jmp	short loc_6E445B10
; ---------------------------------------------------------------------------
		align 10h

loc_6E445B90:				; CODE XREF: sub_6E445A10+63j
		and	ebx, 1
		jnz	loc_6E445C40

loc_6E445B99:				; CODE XREF: sub_6E445A10+243j
		test	edi, 2
		jnz	loc_6E445C60

loc_6E445BA5:				; CODE XREF: sub_6E445A10+25Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		xor	ecx, ecx
		test	dl, 2
		jz	loc_6E445A84
		jmp	short loc_6E445B40
; ---------------------------------------------------------------------------
		align 10h

loc_6E445BC0:				; CODE XREF: sub_6E445A10+3Cj
		mov	[esp+3Ch+var_2C], 0CAh
		mov	[esp+3Ch+var_30], offset aT1_reneg_c ; "t1_reneg.c"
		mov	[esp+3Ch+var_34], 14Fh
		mov	[esp+3Ch+var_38], 12Bh
		mov	[esp+3Ch+var_3C], 14h
		call	ERR_put_error
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445C00:				; CODE XREF: sub_6E445A10+162j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E445B78
; ---------------------------------------------------------------------------
		align 10h

loc_6E445C20:				; CODE XREF: sub_6E445A10+156j
		mov	bl, [ecx+3D5h]
		mov	[edi], bl
		inc	edi
		lea	esi, [ecx+3D6h]
		dec	edx
		jmp	loc_6E445B6C
; ---------------------------------------------------------------------------
		align 10h

loc_6E445C40:				; CODE XREF: sub_6E445A10+183j
		mov	bl, [ebp+394h]
		mov	[ecx+1], bl
		lea	edi, [ecx+2]
		lea	esi, [ebp+395h]
		dec	edx
		jmp	loc_6E445B99
; ---------------------------------------------------------------------------
		align 10h

loc_6E445C60:				; CODE XREF: sub_6E445A10+18Fj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_6E445BA5
sub_6E445A10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E445C80	proc near		; CODE XREF: sub_6E41C740+60Dp

Buf1		= dword	ptr -3Ch
Buf2		= dword	ptr -38h
Size		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, [esp+3Ch+arg_0]
		mov	ebp, [esp+3Ch+arg_4]
		mov	eax, [edi+58h]
		mov	cl, [eax+3D4h]
		mov	bl, [eax+415h]
		xor	edx, edx
		mov	dl, cl
		xor	eax, eax
		mov	al, bl
		mov	esi, edx
		add	esi, eax
		jz	short loc_6E445CBC
		test	cl, cl
		jz	loc_6E445E30
		test	bl, bl
		jz	loc_6E445E00

loc_6E445CBC:				; CODE XREF: sub_6E445C80+2Aj
					; sub_6E445C80+19Cj ...
		mov	eax, [esp+3Ch+arg_8]
		test	eax, eax
		jle	loc_6E445E60
		xor	ecx, ecx
		mov	cl, [ebp+0]
		lea	edx, [ecx+1]
		cmp	edx, [esp+3Ch+arg_8]
		jnz	loc_6E445DB0
		cmp	ecx, esi
		jnz	loc_6E445D60
		lea	esi, [ebp+1]
		mov	edi, [edi+58h]
		movzx	ebp, byte ptr [edi+3D4h]
		and	ebp, 0FFh
		mov	[esp+3Ch+Size],	ebp ; Size
		lea	eax, [edi+394h]
		mov	[esp+3Ch+Buf2],	eax ; Buf2
		mov	[esp+3Ch+Buf1],	esi ; Buf1
		call	memcmp
		mov	ebx, eax
		test	eax, eax
		jnz	loc_6E445E70
		xor	eax, eax
		mov	al, [edi+415h]
		mov	[esp+3Ch+Size],	eax ; Size
		lea	eax, [edi+3D5h]
		mov	[esp+3Ch+Buf2],	eax ; Buf2
		add	esi, ebp
		mov	[esp+3Ch+Buf1],	esi ; Buf1
		call	memcmp
		test	eax, eax
		jnz	loc_6E445E80
		mov	dword ptr [edi+418h], 1
		mov	ebx, 1

loc_6E445D4C:				; CODE XREF: sub_6E445C80+236j
		mov	eax, ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445D60:				; CODE XREF: sub_6E445C80+5Cj
		mov	[esp+3Ch+var_2C], 108h

loc_6E445D68:				; CODE XREF: sub_6E445C80+1F8j
		mov	[esp+3Ch+var_30], offset aT1_reneg_c ; "t1_reneg.c"
		mov	[esp+3Ch+Size],	151h
		mov	[esp+3Ch+Buf2],	12Dh
		mov	[esp+3Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+arg_C]
		mov	dword ptr [eax], 28h
		xor	ebx, ebx
		mov	eax, ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445DB0:				; CODE XREF: sub_6E445C80+54j
		mov	[esp+3Ch+var_2C], 100h

loc_6E445DB8:				; CODE XREF: sub_6E445C80+1E8j
		mov	[esp+3Ch+var_30], offset aT1_reneg_c ; "t1_reneg.c"
		mov	[esp+3Ch+Size],	150h
		mov	[esp+3Ch+Buf2],	12Dh
		mov	[esp+3Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+arg_C]
		mov	dword ptr [eax], 2Fh
		xor	ebx, ebx
		mov	eax, ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E445E00:				; CODE XREF: sub_6E445C80+36j
					; sub_6E445C80+1DDj
		mov	[esp+3Ch+Size],	offset aExpected_lenSS ; "!expected_len	|| s->s3->previous_server"...
		mov	[esp+3Ch+Buf2],	0F1h
		mov	[esp+3Ch+Buf1],	offset aT1_reneg_c ; "t1_reneg.c"
		call	OpenSSLDie
		jmp	loc_6E445CBC
; ---------------------------------------------------------------------------
		jmp	short loc_6E445E30
; ---------------------------------------------------------------------------
		align 10h

loc_6E445E30:				; CODE XREF: sub_6E445C80+2Ej
					; sub_6E445C80+1A1j
		mov	[esp+3Ch+Size],	offset aExpected_len_0 ; "!expected_len	|| s->s3->previous_client"...
		mov	[esp+3Ch+Buf2],	0F0h
		mov	[esp+3Ch+Buf1],	offset aT1_reneg_c ; "t1_reneg.c"
		call	OpenSSLDie
		mov	edx, [edi+58h]
		mov	bl, [edx+415h]
		test	bl, bl
		jnz	loc_6E445CBC
		jmp	short loc_6E445E00
; ---------------------------------------------------------------------------
		align 10h

loc_6E445E60:				; CODE XREF: sub_6E445C80+42j
		mov	[esp+3Ch+var_2C], 0F6h
		jmp	loc_6E445DB8
; ---------------------------------------------------------------------------
		align 10h

loc_6E445E70:				; CODE XREF: sub_6E445C80+8Fj
		mov	[esp+3Ch+var_2C], 110h
		jmp	loc_6E445D68
; ---------------------------------------------------------------------------
		align 10h

loc_6E445E80:				; CODE XREF: sub_6E445C80+B7j
		mov	[esp+3Ch+var_2C], 119h
		mov	[esp+3Ch+var_30], offset aT1_reneg_c ; "t1_reneg.c"
		mov	[esp+3Ch+Size],	151h
		mov	[esp+3Ch+Buf2],	12Dh
		mov	[esp+3Ch+Buf1],	14h
		call	ERR_put_error
		mov	eax, [esp+3Ch+arg_C]
		mov	dword ptr [eax], 2Fh
		jmp	loc_6E445D4C
sub_6E445C80	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DH_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ERR_put_error]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION sk_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sk_value]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION sk_num]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sk_dup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_MD_CTX_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BN_num_bits]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_DigestInit_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_DigestUpdate]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_SignFinal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_MD_CTX_cleanup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_dup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_get0_public_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_get0_private_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_generate_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_get0_group]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EC_GROUP_get_degree]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_GROUP_get_curve_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EC_POINT_point2oct]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_malloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BN_CTX_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BN_CTX_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BUF_MEM_grow_clean]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BN_bn2bin]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION DHparams_dup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DH_generate_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_MD_CTX_set_flags]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_DigestFinal_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION RSA_sign]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION RSA_up_ref]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION i2d_X509_NAME]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION RAND_pseudo_bytes]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION RSA_private_decrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ERR_clear_error]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION OPENSSL_cleanse]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BN_bin2bn]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DH_compute_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BN_clear_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_POINT_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_CTX_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_decrypt_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_get_pubkey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_derive_set_peer]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ASN1_get_object]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_CTX_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BN_ucmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BUF_strdup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_set_group]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_set_private_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_POINT_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EC_POINT_copy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ECDH_compute_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EC_POINT_oct2point]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BUF_strndup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_decrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_CTX_ctrl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_certificate_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BIO_ctrl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_verify_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION RSA_verify]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DSA_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ECDSA_verify]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_VerifyFinal]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sk_pop_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION sk_new_null]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sk_push]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION d2i_X509]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sk_shift]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_CTX_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION HMAC_CTX_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BUF_MEM_grow]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_CTX_iv_length]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_EncryptUpdate]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_EncryptFinal]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION HMAC_Update]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION HMAC_Final]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_CTX_cleanup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION HMAC_CTX_cleanup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION RAND_bytes]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_aes_128_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_EncryptInit_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_sha256]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION HMAC_Init_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION RAND_add]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_MD_CTX_md]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_MD_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_MD_size]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BUF_MEM_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BUF_MEM_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_NAME_cmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION sk_find]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_missing_parameters]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_add_lock]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION RSA_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION RSA_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_bits]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_sha1]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DH_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_GROUP_new_by_curve_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EC_GROUP_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_set_public_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sk_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_NAME_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION d2i_X509_NAME]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_Digest]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BUF_memdup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION RSA_public_encrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_encrypt_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_MD_CTX_create]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION OBJ_nid2sn]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_get_digestbyname]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_DigestInit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_MD_CTX_destroy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_encrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_sign_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_sign]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION DSA_sign]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ECDSA_sign]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ENGINE_load_ssl_client_cert]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BIO_push]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION RSAPrivateKey_dup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EC_KEY_up_ref]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EC_METHOD_get_field_type]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION COMP_CTX_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION COMP_CTX_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_key_length]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_iv_length]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CipherInit_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_md5]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION OpenSSLDie]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_CTX_cipher]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_block_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_Cipher]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BIO_s_mem]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BIO_write]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_MD_CTX_copy_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_CTX_flags]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_read]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION COMP_expand_block]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION COMP_compress_block]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_memcmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_clear_flags]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BIO_set_flags]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_snprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ERR_add_error_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION i2d_X509]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_CTX_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_verify_cert]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_CTX_cleanup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_lock]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_flags]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SHA224_Init]
		align 10h

loc_6E4463D0:				; DATA XREF: sub_6E417930+C1o
					; sub_6E417930+B5Co
		jmp	ds:SHA256_Transform
; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SHA1_Init]
		align 10h

loc_6E4463E0:				; DATA XREF: sub_6E417930+1B7o
		jmp	ds:SHA1_Transform
; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SHA512_Init]
		align 10h

loc_6E4463F0:				; DATA XREF: sub_6E417930+642o
					; sub_6E417930+AF5o
		jmp	ds:SHA512_Transform
; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_DigestFinal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SHA384_Init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SHA256_Init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION MD5_Init]
		align 4

loc_6E446418:				; DATA XREF: sub_6E417930+BF5o
		jmp	ds:MD5_Transform
; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_DecryptInit_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_DecryptUpdate]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_DecryptFinal]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION i2d_OCSP_RESPID]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION i2d_X509_EXTENSIONS]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_sha512]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_sha224]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_sha384]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION d2i_OCSP_RESPID]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION OCSP_RESPID_free]
		align 10h

loc_6E446470:				; DATA XREF: sub_6E41DDD0+E13o
					; SSL_free+242o
		jmp	ds:X509_EXTENSION_free
; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION d2i_X509_EXTENSIONS]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_new_mac_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_DigestSignInit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_DigestSignFinal]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_CTX_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_CTX_ctrl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_MD_CTX_copy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_ecdsa]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_dss1]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BN_dup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_test_flags]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pitem_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION pqueue_pop]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pqueue_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION pqueue_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pqueue_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION pitem_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pqueue_insert]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION pqueue_peek]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pqueue_find]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_CIPHER_CTX_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pqueue_iterator]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION pqueue_next]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION lh_retrieve]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_VERIFY_PARAM_set_purpose]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_VERIFY_PARAM_set_trust]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_VERIFY_PARAM_set1]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BIO_free_all]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_find_type]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BIO_s_socket]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_int_ctrl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BIO_method_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_VERIFY_PARAM_get_depth]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_VERIFY_PARAM_set_depth]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_check_private_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION lh_num_items]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION sk_zero]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_VERIFY_PARAM_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_free_ex_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION lh_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ENGINE_finish]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION lh_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_VERIFY_PARAM_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_new_ex_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_pop]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_VERIFY_PARAM_inherit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_check_purpose]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION OBJ_obj2nid]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION OBJ_find_sigid_algs]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DH_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION RSA_size]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ERR_peek_error]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_get_retry_reason]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_dup_ex_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_NAME_dup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sk_set]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_f_buffer]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_set_default_paths]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_load_locations]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_get_ex_new_index]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_set_ex_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_get_ex_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION OBJ_bsearch_]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ERR_load_crypto_strings]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_CTX_get_ex_new_index]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_CTX_set_ex_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_CTX_set_default]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_CTX_get0_param]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION X509_STORE_CTX_set_verify_cb]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_get_subject_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_s_file]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION PEM_read_bio_X509]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION sk_set_cmp_func]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION OPENSSL_DIR_read]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION OPENSSL_DIR_end]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION lh_delete]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION lh_insert]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION lh_doall_arg]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ENGINE_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ENGINE_get_ssl_client_cert_function]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PEM_ASN1_read_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION PEM_ASN1_read]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PEM_ASN1_write_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION PEM_ASN1_write]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION CRYPTO_mem_ctrl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION COMP_zlib]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION sk_sort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_get_cipherbyname]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_asn1_find_str]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_asn1_get0_info]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_enc_null]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_copy_parameters]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION RSA_flags]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION d2i_X509_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_PKEY_assign]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PEM_read_bio_RSAPrivateKey]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION d2i_RSAPrivateKey_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION d2i_RSAPrivateKey]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION d2i_PrivateKey_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PEM_read_bio_PrivateKey]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION d2i_PrivateKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION PEM_read_bio_X509_AUX]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ERR_peek_last_error]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ASN1_INTEGER_set]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION i2d_ASN1_INTEGER]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION i2d_ASN1_OCTET_STRING]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ASN1_object_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ASN1_put_object]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION asn1_GetSequence]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION asn1_add_error]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION d2i_ASN1_INTEGER]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ASN1_INTEGER_get]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION d2i_ASN1_OCTET_STRING]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION asn1_const_Finish]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ASN1_const_check_infinite_end]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_puts]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BIO_printf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_dump_indent]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION X509_verify_cert_error_string]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_des_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_add_cipher]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_des_ede3_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_idea_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_rc4]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_rc2_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_rc2_40_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_aes_192_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_aes_256_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_aes_128_gcm]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_aes_256_gcm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_aes_128_cbc_hmac_sha1]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_aes_256_cbc_hmac_sha1]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_camellia_128_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_camellia_256_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EVP_seed_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION EVP_add_digest]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION OBJ_NAME_add]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_callback_ctrl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BIO_copy_next_retry]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION BIO_s_connect]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ERR_func_error_string]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ERR_load_strings]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BN_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SRP_Calc_B]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SRP_get_default_gN]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SRP_create_verifier_BN]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION BN_copy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SRP_Verify_A_mod_N]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SRP_Calc_u]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SRP_Calc_server_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SRP_Verify_B_mod_N]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SRP_Calc_x]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SRP_Calc_client_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION SRP_check_known_gN_param]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SRP_Calc_A]
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6E446970(_onexit_t)
sub_6E446970	proc near		; CODE XREF: sub_6E446A30+Ap

Func		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_6E454448
		mov	[esp+2Ch+Func],	eax
		call	sub_6E446B30
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_14], eax
		jz	loc_6E446A10
		mov	[esp+2Ch+Func],	8
		call	_lock
		mov	eax, ds:dword_6E454448
		mov	[esp+2Ch+Func],	eax
		call	sub_6E446B30
		mov	[esp+2Ch+var_14], eax
		mov	eax, ds:dword_6E454444
		mov	[esp+2Ch+Func],	eax
		call	sub_6E446B30
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+Func],	eax
		call	sub_6E446B40
		mov	ds:dword_6E454448, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+Func],	eax
		call	sub_6E446B40
		mov	[esp+2Ch+Func],	8
		mov	ds:dword_6E454444, eax
		call	_unlock
		add	esp, 28h
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E446A10:				; CODE XREF: sub_6E446970+18j
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax ; Func
		call	ds:_onexit
		add	esp, 28h
		pop	ebx
		retn
sub_6E446970	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_6E446A30(_onexit_t)
sub_6E446A30	proc near		; CODE XREF: sub_6E447140-27p
					; sub_6E447920+12p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_6E446970
		test	eax, eax
		setz	al
		add	esp, 1Ch
		movzx	eax, al
		neg	eax
		retn
sub_6E446A30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:6E45B01Co

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_6E446A70
		cmp	eax, 3
		jz	short loc_6E446A70
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6E446A70:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_6E447450
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_6E401040+108p
					; DATA XREF: .rdata:off_6E4530A4o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_6E44AB2C,	2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_6E446ABB
		mov	dword_6E44AB2C,	2

loc_6E446ABB:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_6E446AD1
		cmp	eax, 1
		jz	short loc_6E446B00

loc_6E446AC5:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_6E446AD1:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_6E45B028
		cmp	ebx, offset dword_6E45B028
		jz	short loc_6E446AC5
		xchg	ax, ax

loc_6E446AE0:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_6E446AE8
		call	eax

loc_6E446AE8:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_6E45B028
		jnz	short loc_6E446AE0
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_6E446B00:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_6E447450
		jmp	short loc_6E446AC5
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E446B30	proc near		; CODE XREF: sub_6E401040+138p
					; sub_6E401040+14Bp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_6E446B30	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E446B40	proc near		; CODE XREF: sub_6E401000+15p
					; sub_6E446970+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_6E446B40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_6E446B50(char	*Format, char ArgList)
sub_6E446B50	proc near		; CODE XREF: sub_6E446BB0+1E4p
					; sub_6E446BB0+212p ...

Str		= dword	ptr -1Ch
Size		= dword	ptr -18h
Count		= dword	ptr -14h
File		= dword	ptr -10h
Format		= dword	ptr  4
ArgList		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+Count], 1Bh ; Count
		lea	ebx, [esp+1Ch+ArgList]
		mov	[esp+1Ch+Size],	1 ; Size
		mov	[esp+1Ch+Str], offset aMingwW64Runtim ;	"Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+File],	eax ; File
		call	fwrite
		mov	eax, [esp+1Ch+Format]
		mov	[esp+1Ch+Count], ebx ; ArgList
		mov	[esp+1Ch+Size],	eax ; Format
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+Str], eax ; File
		call	vfprintf
		call	abort
sub_6E446B50	endp

; ---------------------------------------------------------------------------
		jmp	short sub_6E446BB0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E446BB0	proc near		; CODE XREF: .text:6E446BA1j
					; sub_6E446DF0+140p ...

lpAddress	= dword	ptr -58h
lpBuffer	= dword	ptr -54h
dwLength	= dword	ptr -50h
lpflOldProtect	= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
Size		= dword	ptr -40h
Src		= dword	ptr -3Ch
flOldProtect	= dword	ptr -38h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-34h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 4Ch
		mov	[ebp+Size], ecx
		mov	ecx, ds:dword_6E4540B8
		mov	[ebp+Src], edx
		test	ecx, ecx
		jle	loc_6E446DA0
		mov	edx, ds:dword_6E4540BC
		xor	ebx, ebx

loc_6E446BD7:				; CODE XREF: sub_6E446BB0+44j
		mov	eax, [edx+4]
		cmp	esi, eax
		jb	short loc_6E446BEC
		mov	edi, [edx+8]
		add	eax, [edi+8]
		cmp	esi, eax
		jb	loc_6E446CC0

loc_6E446BEC:				; CODE XREF: sub_6E446BB0+2Cj
		add	ebx, 1
		add	edx, 0Ch
		cmp	ebx, ecx
		jnz	short loc_6E446BD7

loc_6E446BF6:				; CODE XREF: sub_6E446BB0+1F2j
		mov	[esp+58h+lpAddress], esi
		call	sub_6E447610
		test	eax, eax
		mov	edi, eax
		jz	loc_6E446DC7
		lea	ecx, [ebx+ebx*2]
		shl	ecx, 2
		mov	ebx, ecx
		add	ebx, ds:dword_6E4540BC
		mov	[ebp+var_44], ecx
		mov	[ebx+8], eax
		mov	dword ptr [ebx], 0
		call	sub_6E447700
		mov	ecx, [ebp+var_44]
		lea	edx, [ebp+Buffer]
		mov	[ebp+var_44], edx
		add	eax, [edi+0Ch]
		mov	[ebp+var_48], ecx
		mov	[ebx+4], eax
		mov	eax, ds:dword_6E4540BC
		mov	ebx, ds:VirtualQuery
		mov	eax, [eax+ecx+4]
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualQuery
		mov	edx, [ebp+var_44]
		mov	ecx, [ebp+var_48]
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_6E446DA7
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jnz	loc_6E446D44

loc_6E446C76:				; CODE XREF: sub_6E446BB0+197j
					; sub_6E446BB0+1CDj
		add	ds:dword_6E4540B8, 1

loc_6E446C7D:				; CODE XREF: sub_6E446BB0+119j
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	[esp+58h+lpAddress], esi ; lpAddress
		call	ebx ; VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_6E446DD7
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_6E446CD0

loc_6E446CA1:				; CODE XREF: sub_6E446BB0+123j
		mov	eax, [ebp+Size]
		mov	[esp+58h+lpAddress], esi ; Dst
		mov	[esp+58h+dwLength], eax	; Size
		mov	eax, [ebp+Src]
		mov	[esp+58h+lpBuffer], eax	; Src
		call	memcpy

loc_6E446CB7:				; CODE XREF: sub_6E446BB0+168j
					; sub_6E446BB0+16Dj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E446CC0:				; CODE XREF: sub_6E446BB0+36j
		lea	edx, [ebp+Buffer]
		mov	ebx, ds:VirtualQuery
		jmp	short loc_6E446C7D
; ---------------------------------------------------------------------------
		align 10h

loc_6E446CD0:				; CODE XREF: sub_6E446BB0+EFj
		cmp	eax, 40h
		jz	short loc_6E446CA1
		mov	eax, [ebp+Buffer.RegionSize]
		lea	edi, [ebp+flOldProtect]
		mov	ebx, ds:VirtualProtect
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	[esp+58h+dwLength], 40h	; flNewProtect
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualProtect
		mov	eax, [ebp+Size]
		sub	esp, 10h
		mov	[esp+58h+dwLength], eax	; Size
		mov	eax, [ebp+Src]
		mov	[esp+58h+lpAddress], esi ; Dst
		mov	[esp+58h+lpBuffer], eax	; Src
		call	memcpy
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 40h
		jz	short loc_6E446CB7
		cmp	eax, 4
		jz	short loc_6E446CB7
		mov	eax, [ebp+flOldProtect]
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	[esp+58h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualProtect
		sub	esp, 10h
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E446D44:				; CODE XREF: sub_6E446BB0+C0j
		cmp	eax, 40h
		jz	loc_6E446C76
		mov	eax, [ebp+Buffer.RegionSize]
		add	ecx, ds:dword_6E4540BC
		mov	[ebp+var_44], edx
		mov	[esp+58h+dwLength], 40h	; flNewProtect
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpflOldProtect], ecx ;	lpflOldProtect
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		mov	edx, [ebp+var_44]
		sub	esp, 10h
		test	eax, eax
		jnz	loc_6E446C76
		call	ds:GetLastError
		mov	[esp+58h+lpAddress], offset aVirtualprotect ; "	 VirtualProtect	failed with code 0x%x"
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_6E446B50
; ---------------------------------------------------------------------------
		align 10h

loc_6E446DA0:				; CODE XREF: sub_6E446BB0+19j
		xor	ebx, ebx
		jmp	loc_6E446BF6
; ---------------------------------------------------------------------------

loc_6E446DA7:				; CODE XREF: sub_6E446BB0+B4j
		mov	eax, ds:dword_6E4540BC
		mov	eax, [eax+ecx+4]
		mov	[esp+58h+dwLength], eax
		mov	eax, [edi+8]
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_6E446B50
; ---------------------------------------------------------------------------

loc_6E446DC7:				; CODE XREF: sub_6E446BB0+52j
		mov	[esp+58h+lpBuffer], esi	; ArgList
		mov	[esp+58h+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_6E446B50
; ---------------------------------------------------------------------------

loc_6E446DD7:				; CODE XREF: sub_6E446BB0+E3j
		mov	[esp+58h+dwLength], esi
		mov	[esp+58h+lpBuffer], 1Ch	; ArgList
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		call	sub_6E446B50
sub_6E446BB0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E446DF0	proc near		; CODE XREF: sub_6E401260+22p
					; sub_6E401260:loc_6E4012C5p

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_3D		= byte ptr -3Dh

		mov	eax, ds:dword_6E4540B4
		test	eax, eax
		jz	short loc_6E446E00
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E446E00:				; CODE XREF: sub_6E446DF0+7j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ds:dword_6E4540B4, 1
		call	sub_6E447660
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_6E447830
		mov	ds:dword_6E4540B8, 0
		sub	esp, eax
		lea	eax, [esp+5Ch+var_3D]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_6E4540BC, eax
		mov	eax, offset dword_6E4536D0
		sub	eax, offset dword_6E4536D0
		cmp	eax, 7
		jle	loc_6E446EF1
		cmp	eax, 0Bh
		jle	loc_6E446FC3
		mov	eax, ds:dword_6E4536D0
		test	eax, eax
		jnz	loc_6E446EF9
		mov	eax, ds:dword_6E4536D4
		test	eax, eax
		jnz	loc_6E446EF9
		mov	edi, ds:dword_6E4536D8
		mov	ebx, offset dword_6E4536DC
		test	edi, edi
		jz	loc_6E446FC8
		mov	ebx, offset dword_6E4536D0

loc_6E446E90:				; CODE XREF: sub_6E446DF0+1E7j
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_6E4470B0
		add	ebx, 0Ch
		cmp	ebx, offset dword_6E4536D0
		jnb	short loc_6E446EF1

loc_6E446EA7:				; CODE XREF: sub_6E446DF0+236j
		mov	edx, [ebx]
		mov	edi, [ebx+4]
		mov	ecx, [edx+6E400000h]
		lea	eax, [edi+6E400000h]
		mov	[ebp-3Ch], ecx
		movzx	ecx, byte ptr [ebx+8]
		cmp	ecx, 10h
		jz	loc_6E446FE2
		cmp	ecx, 20h
		jz	loc_6E447066
		cmp	ecx, 8
		jz	loc_6E447031
		mov	[esp+5Ch+lpBuffer], ecx	; ArgList
		mov	[esp+5Ch+lpAddress], offset aUnknownPseudoR ; "	 Unknown pseudo	relocation bit size %d"...
		mov	dword ptr [ebp-34h], 0
		call	sub_6E446B50
; ---------------------------------------------------------------------------

loc_6E446EF1:				; CODE XREF: sub_6E446DF0+5Fj
					; sub_6E446DF0+B5j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E446EF9:				; CODE XREF: sub_6E446DF0+75j
					; sub_6E446DF0+82j
		mov	ebx, offset dword_6E4536D0

loc_6E446EFE:				; CODE XREF: sub_6E446DF0+1DCj
					; sub_6E446DF0+1EDj
		cmp	ebx, offset dword_6E4536D0
		jnb	short loc_6E446EF1
		lea	eax, [ebp-34h]
		mov	[ebp-3Ch], eax
		lea	esi, [esi+0]

loc_6E446F10:				; CODE XREF: sub_6E446DF0+14Bj
		mov	edx, [ebx+4]
		mov	ecx, 4
		add	ebx, 8
		lea	eax, [edx+6E400000h]
		mov	edx, [edx+6E400000h]
		add	edx, [ebx-8]
		mov	[ebp-34h], edx
		mov	edx, [ebp-3Ch]
		call	sub_6E446BB0
		cmp	ebx, offset dword_6E4536D0
		jb	short loc_6E446F10

loc_6E446F3D:				; CODE XREF: sub_6E446DF0+23Cj
		mov	eax, ds:dword_6E4540B8
		xor	ebx, ebx
		test	eax, eax
		jg	short loc_6E446F5B
		jmp	short loc_6E446EF1
; ---------------------------------------------------------------------------
		align 10h

loc_6E446F50:				; CODE XREF: sub_6E446DF0+180j
					; sub_6E446DF0+1D1j
		add	ebx, 1
		cmp	ebx, ds:dword_6E4540B8
		jge	short loc_6E446EF1

loc_6E446F5B:				; CODE XREF: sub_6E446DF0+156j
		mov	eax, ds:dword_6E4540BC
		lea	esi, [ebx+ebx*2]
		lea	edi, ds:0[esi*4]
		add	eax, edi
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_6E446F50
		mov	eax, [eax+4]
		mov	ecx, [ebp-3Ch]
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		mov	[esp+5Ch+lpBuffer], ecx	; lpBuffer
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_6E44708B
		mov	eax, ds:dword_6E4540BC
		lea	ecx, [ebp-38h]
		mov	eax, [eax+esi*4]
		mov	[esp+5Ch+lpflOldProtect], ecx ;	lpflOldProtect
		mov	[esp+5Ch+dwLength], eax	; flNewProtect
		mov	eax, [ebp-28h]
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [ebp-34h]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_6E446F50
; ---------------------------------------------------------------------------

loc_6E446FC3:				; CODE XREF: sub_6E446DF0+68j
		mov	ebx, offset dword_6E4536D0

loc_6E446FC8:				; CODE XREF: sub_6E446DF0+95j
		mov	esi, [ebx]
		test	esi, esi
		jnz	loc_6E446EFE
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jz	loc_6E446E90
		jmp	loc_6E446EFE
; ---------------------------------------------------------------------------

loc_6E446FE2:				; CODE XREF: sub_6E446DF0+D2j
		movzx	ecx, word ptr [edi+6E400000h]
		movzx	edi, cx
		mov	esi, edi
		or	esi, 0FFFF0000h
		test	cx, cx
		cmovs	edi, esi
		mov	esi, [ebp-3Ch]
		sub	edi, edx
		lea	ecx, [ebp-34h]
		sub	edi, 6E400000h
		mov	[ebp-3Ch], ecx
		lea	edx, [ebp-34h]
		mov	ecx, 2
		add	esi, edi
		mov	[ebp-34h], esi
		call	sub_6E446BB0

loc_6E44701D:				; CODE XREF: sub_6E446DF0+274j
					; sub_6E446DF0+299j
		add	ebx, 0Ch
		cmp	ebx, offset dword_6E4536D0
		jb	loc_6E446EA7
		jmp	loc_6E446F3D
; ---------------------------------------------------------------------------

loc_6E447031:				; CODE XREF: sub_6E446DF0+E4j
		movzx	ecx, byte ptr [eax]
		movzx	edi, cl
		mov	esi, edi
		or	esi, 0FFFFFF00h
		test	cl, cl
		cmovs	edi, esi
		mov	esi, [ebp-3Ch]
		mov	ecx, 1
		sub	edi, 6E400000h
		sub	edi, edx
		lea	edx, [ebp-34h]
		add	esi, edi
		mov	[ebp-34h], esi
		mov	[ebp-3Ch], edx
		call	sub_6E446BB0
		jmp	short loc_6E44701D
; ---------------------------------------------------------------------------

loc_6E447066:				; CODE XREF: sub_6E446DF0+DBj
		mov	esi, [ebp-3Ch]
		add	edx, 6E400000h
		lea	ecx, [ebp-34h]
		mov	[ebp-3Ch], ecx
		mov	ecx, 4
		sub	esi, edx
		add	esi, [eax]
		lea	edx, [ebp-34h]
		mov	[ebp-34h], esi
		call	sub_6E446BB0
		jmp	short loc_6E44701D
; ---------------------------------------------------------------------------

loc_6E44708B:				; CODE XREF: sub_6E446DF0+1A2j
		mov	ecx, ds:dword_6E4540BC
		add	ecx, edi
		mov	eax, [ecx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ecx+8]
		mov	eax, [eax+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		call	sub_6E446B50
; ---------------------------------------------------------------------------

loc_6E4470B0:				; CODE XREF: sub_6E446DF0+A6j
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		mov	[esp+5Ch+lpAddress], offset aUnknownPseud_0 ; "	 Unknown pseudo	relocation protocol ve"...
		call	sub_6E446B50
; ---------------------------------------------------------------------------

; int __cdecl loc_6E4470C0()
loc_6E4470C0:				; DATA XREF: sub_6E447140:loc_6E447112o
		mov	eax, off_6E44AB28
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_6E4470EA
		sub	esp, 0Ch
		xchg	ax, ax

loc_6E4470D0:				; CODE XREF: sub_6E446DF0+2F5j
		call	eax
		mov	eax, off_6E44AB28
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_6E44AB28, edx
		test	eax, eax
		jnz	short loc_6E4470D0
		add	esp, 0Ch

locret_6E4470EA:			; CODE XREF: sub_6E446DF0+2D9j
		rep retn
sub_6E446DF0	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_6E447140

loc_6E4470F0:				; CODE XREF: sub_6E447140+1Aj
		push	ebx
		sub	esp, 18h
		mov	ebx, ds:dword_6E447940
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_6E447123

loc_6E4470FF:				; CODE XREF: sub_6E447140-9j
		test	ebx, ebx
		jz	short loc_6E447112

loc_6E447103:				; CODE XREF: sub_6E447140-30j
		call	ds:dword_6E447940[ebx*4]
		sub	ebx, 1
		lea	esi, [esi+0]
		jnz	short loc_6E447103

loc_6E447112:				; CODE XREF: sub_6E447140-3Fj
		mov	[esp+1Ch+var_1C], offset loc_6E4470C0 ;	_onexit_t
		call	sub_6E446A30
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6E447123:				; CODE XREF: sub_6E447140-43j
		xor	ebx, ebx
		jmp	short loc_6E447129
; ---------------------------------------------------------------------------

loc_6E447127:				; CODE XREF: sub_6E447140-Bj
		mov	ebx, eax

loc_6E447129:				; CODE XREF: sub_6E447140-1Bj
		lea	eax, [ebx+1]
		mov	edx, ds:dword_6E447940[eax*4]
		test	edx, edx
		jnz	short loc_6E447127
		jmp	short loc_6E4470FF
; END OF FUNCTION CHUNK	FOR sub_6E447140
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E447140	proc near		; CODE XREF: sub_6E401260+A0p

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 6E4470F0 SIZE 00000049 BYTES

		mov	eax, ds:dword_6E4540C0
		test	eax, eax
		jz	short loc_6E447150
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E447150:				; CODE XREF: sub_6E447140+7j
		mov	ds:dword_6E4540C0, 1
		jmp	short loc_6E4470F0
sub_6E447140	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E447160	proc near		; CODE XREF: DllEntryPoint+34p

lpSystemTimeAsFileTime=	dword ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -28h
PerformanceCount= LARGE_INTEGER	ptr -20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, dword_6E44AB30
		mov	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		cmp	eax, 0BB40E64Eh
		jz	short loc_6E447192
		not	eax
		mov	dword_6E44AB34,	eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E447192:				; CODE XREF: sub_6E447160+21j
		lea	eax, [ebp+SystemTimeAsFileTime]
		mov	[esp+38h+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	edi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	esi, edi
		sub	esp, 4
		call	ds:GetCurrentProcessId
		mov	ebx, eax
		call	ds:GetCurrentThreadId
		mov	[ebp+var_2C], eax
		call	ds:GetTickCount
		mov	[ebp+var_30], eax
		lea	eax, [ebp+PerformanceCount]
		mov	[esp+38h+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		xor	esi, dword ptr [ebp+PerformanceCount]
		xor	esi, dword ptr [ebp+PerformanceCount+4]
		xor	esi, ebx
		xor	esi, [ebp+var_2C]
		sub	esp, 4
		xor	esi, [ebp+var_30]
		cmp	esi, 0BB40E64Eh
		jz	short loc_6E447200
		mov	eax, esi
		not	eax

loc_6E4471EC:				; CODE XREF: sub_6E447160+AAj
		mov	dword_6E44AB30,	esi
		mov	dword_6E44AB34,	eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E447200:				; CODE XREF: sub_6E447160+86j
		mov	eax, 44BF19B0h
		mov	esi, 0BB40E64Fh
		jmp	short loc_6E4471EC
sub_6E447160	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_6E4541A4, edx
		mov	ds:dword_6E4543C0, 0C0000409h
		mov	ds:dword_6E4543C4, 1
		mov	ds:dword_6E454198, eax
		mov	ds:dword_6E4543CC, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_6E45418C, eax
		mov	eax, dword_6E44AB30
		mov	[ebp-10h], eax
		mov	eax, dword_6E44AB34
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_6E4531A0
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E4472A0	proc near		; CODE XREF: sub_6E447450:loc_6E4474D2p
					; sub_6E447450:loc_6E4474E0p

lpCriticalSection= dword ptr -28h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	[esp+28h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	edi, ds:dword_6E454420
		mov	esi, ds:GetLastError
		sub	esp, 4
		test	edi, edi
		jz	short loc_6E4472F9
		lea	esi, [esi+0]

loc_6E4472D0:				; CODE XREF: sub_6E4472A0+57j
		mov	eax, [edi]
		mov	[esp+28h+lpCriticalSection], eax ; dwTlsIndex
		call	ds:TlsGetValue
		sub	esp, 4
		mov	ebx, eax
		call	esi
		test	eax, eax
		jnz	short loc_6E4472F2
		test	ebx, ebx
		jz	short loc_6E4472F2
		mov	eax, [edi+4]
		mov	[esp+28h+lpCriticalSection], ebx
		call	eax

loc_6E4472F2:				; CODE XREF: sub_6E4472A0+44j
					; sub_6E4472A0+48j
		mov	edi, [edi+8]
		test	edi, edi
		jnz	short loc_6E4472D0

loc_6E4472F9:				; CODE XREF: sub_6E4472A0+27j
		mov	[esp+28h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_6E4472A0	endp

; ---------------------------------------------------------------------------
		jmp	short loc_6E447320
; ---------------------------------------------------------------------------
		align 10h

loc_6E447320:				; CODE XREF: .text:6E447311j
		push	ebp
		mov	ebp, esp
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 10h
		mov	eax, ds:dword_6E454424
		test	eax, eax
		jnz	short loc_6E447340

loc_6E447333:				; CODE XREF: .text:6E4473A1j
		lea	esp, [ebp-8]
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E447340:				; CODE XREF: .text:6E447331j
		mov	dword ptr [esp+4], 0Ch
		mov	dword ptr [esp], 1
		call	calloc
		test	eax, eax
		mov	ebx, eax
		jz	short loc_6E44739C
		mov	eax, [ebp+8]
		mov	dword ptr [esp], offset	CriticalSection
		mov	[ebx], eax
		mov	eax, [ebp+0Ch]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_6E454420
		mov	ds:dword_6E454420, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		mov	eax, esi
		sub	esp, 4
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_6E44739C:				; CODE XREF: .text:6E447358j
		mov	esi, 0FFFFFFFFh
		jmp	short loc_6E447333
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:dword_6E454424
		mov	ebx, [ebp+8]
		test	eax, eax
		jnz	short loc_6E4473D0
		xor	eax, eax
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4473D0:				; CODE XREF: .text:6E4473C1j
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	edx, ds:dword_6E454420
		sub	esp, 4
		test	edx, edx
		jz	short loc_6E447401
		mov	eax, [edx]
		cmp	eax, ebx
		jnz	short loc_6E4473FA
		jmp	short loc_6E447438
; ---------------------------------------------------------------------------

loc_6E4473F2:				; CODE XREF: .text:6E4473FFj
		mov	ecx, [eax]
		cmp	ecx, ebx
		jz	short loc_6E447418
		mov	edx, eax

loc_6E4473FA:				; CODE XREF: .text:6E4473EEj
		mov	eax, [edx+8]
		test	eax, eax
		jnz	short loc_6E4473F2

loc_6E447401:				; CODE XREF: .text:6E4473E8j
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_6E447411:				; CODE XREF: .text:6E447436j
		xor	eax, eax
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_6E447418:				; CODE XREF: .text:6E4473F6j
		mov	ecx, [eax+8]
		mov	[edx+8], ecx

loc_6E44741E:				; CODE XREF: .text:6E447442j
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_6E447411
; ---------------------------------------------------------------------------

loc_6E447438:				; CODE XREF: .text:6E4473F0j
		mov	eax, [edx+8]
		mov	ds:dword_6E454420, eax
		mov	eax, edx
		jmp	short loc_6E44741E
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E447450	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -18h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		cmp	eax, 1
		jz	short loc_6E4474A4
		jb	short loc_6E447475
		cmp	eax, 3
		jnz	short loc_6E44746E
		mov	eax, ds:dword_6E454424
		test	eax, eax
		jnz	short loc_6E4474D2

loc_6E44746E:				; CODE XREF: sub_6E447450+13j
					; sub_6E447450+36j ...
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------

loc_6E447475:				; CODE XREF: sub_6E447450+Ej
		mov	eax, ds:dword_6E454424
		test	eax, eax
		jnz	short loc_6E4474E0

loc_6E44747E:				; CODE XREF: sub_6E447450+95j
		mov	eax, ds:dword_6E454424
		cmp	eax, 1
		jnz	short loc_6E44746E
		mov	ds:dword_6E454424, 0
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_6E44746E
; ---------------------------------------------------------------------------

loc_6E4474A4:				; CODE XREF: sub_6E447450+Cj
		mov	eax, ds:dword_6E454424
		test	eax, eax
		jz	short loc_6E4474C0

loc_6E4474AD:				; CODE XREF: sub_6E447450+80j
		mov	ds:dword_6E454424, 1
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4474C0:				; CODE XREF: sub_6E447450+5Bj
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_6E4474AD
; ---------------------------------------------------------------------------

loc_6E4474D2:				; CODE XREF: sub_6E447450+1Cj
		call	sub_6E4472A0
		jmp	short loc_6E44746E
; ---------------------------------------------------------------------------
		align 10h

loc_6E4474E0:				; CODE XREF: sub_6E447450+2Cj
		call	sub_6E4472A0
		jmp	short loc_6E44747E
sub_6E447450	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E4474F0	proc near		; CODE XREF: .text:loc_6E447520j
					; .text:6E4475A5p ...
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jz	short loc_6E447500
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E447500:				; CODE XREF: sub_6E4474F0+9j
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
sub_6E4474F0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_6E447520
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E447520:				; CODE XREF: .text:6E447519j
		jmp	short sub_6E4474F0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E447530	proc near		; CODE XREF: sub_6E447610+3Ap
					; .text:6E447765p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		mov	edx, [esp+8+arg_0]
		mov	ebx, [esp+8+arg_4]
		add	edx, [edx+3Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	esi, esi
		lea	eax, [edx+eax+18h]
		jz	short loc_6E447568
		xor	edx, edx
		nop

loc_6E447550:				; CODE XREF: sub_6E447530+36j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_6E44755E
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_6E44756A

loc_6E44755E:				; CODE XREF: sub_6E447530+25j
		add	edx, 1
		add	eax, 28h
		cmp	edx, esi
		jb	short loc_6E447550

loc_6E447568:				; CODE XREF: sub_6E447530+1Bj
		xor	eax, eax

loc_6E44756A:				; CODE XREF: sub_6E447530+2Cj
		pop	ebx
		pop	esi
		retn
sub_6E447530	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		push	edi
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+30h]
		mov	[esp], edi
		call	strlen
		cmp	eax, 8
		ja	short loc_6E447595
		cmp	word ptr ds:6E400000h, 5A4Dh
		jz	short loc_6E4475A0

loc_6E447595:				; CODE XREF: .text:6E447588j
					; .text:6E4475ACj ...
		add	esp, 1Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E4475A0:				; CODE XREF: .text:6E447593j
		mov	eax, 6E400000h
		call	sub_6E4474F0
		test	eax, eax
		jz	short loc_6E447595
		mov	eax, ds:6E40003Ch
		lea	edx, [eax+6E400000h]
		movzx	eax, word ptr [eax+6E400014h]
		movzx	ebp, word ptr [edx+6]
		lea	ebx, [edx+eax+18h]
		test	ebp, ebp
		jnz	short loc_6E4475DA
		jmp	short loc_6E447595
; ---------------------------------------------------------------------------
		align 10h

loc_6E4475D0:				; CODE XREF: .text:6E4475F0j
		add	esi, 1
		add	ebx, 28h
		cmp	esi, ebp
		jnb	short loc_6E447600

loc_6E4475DA:				; CODE XREF: .text:6E4475CAj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], edi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jnz	short loc_6E4475D0
		add	esp, 1Ch
		mov	esi, ebx
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E447600:				; CODE XREF: .text:6E4475D8j
		add	esp, 1Ch
		xor	esi, esi
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E447610	proc near		; CODE XREF: sub_6E446BB0+49p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4

		push	ebx
		xor	ebx, ebx
		sub	esp, 8
		cmp	word ptr ds:6E400000h, 5A4Dh
		jz	short loc_6E447628

loc_6E447621:				; CODE XREF: sub_6E447610+24j
		add	esp, 8
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6E447628:				; CODE XREF: sub_6E447610+Fj
		mov	eax, 6E400000h
		call	sub_6E4474F0
		test	eax, eax
		jz	short loc_6E447621
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_C], 6E400000h
		sub	eax, 6E400000h
		mov	[esp+0Ch+var_8], eax
		call	sub_6E447530
		add	esp, 8
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_6E447610	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E447660	proc near		; CODE XREF: sub_6E446DF0+23p
		push	ebx
		xor	ebx, ebx
		cmp	word ptr ds:6E400000h, 5A4Dh
		jz	short loc_6E447672

loc_6E44766E:				; CODE XREF: sub_6E447660+1Ej
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_6E447672:				; CODE XREF: sub_6E447660+Cj
		mov	eax, 6E400000h
		call	sub_6E4474F0
		test	eax, eax
		jz	short loc_6E44766E
		mov	eax, ds:6E40003Ch
		movzx	ebx, word ptr [eax+6E400006h]
		mov	eax, ebx
		pop	ebx
		retn
sub_6E447660	endp

; ---------------------------------------------------------------------------
		push	esi
		xor	esi, esi
		cmp	word ptr ds:6E400000h, 5A4Dh
		push	ebx
		mov	ebx, [esp+0Ch]
		jz	short loc_6E4476A8

loc_6E4476A3:				; CODE XREF: .text:6E4476B4j
					; .text:6E4476D2j
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E4476A8:				; CODE XREF: .text:6E4476A1j
		mov	eax, 6E400000h
		call	sub_6E4474F0
		test	eax, eax
		jz	short loc_6E4476A3
		mov	eax, ds:6E40003Ch
		lea	ecx, [eax+6E400000h]
		movzx	eax, word ptr [eax+6E400014h]
		lea	edx, [ecx+eax+18h]
		movzx	ecx, word ptr [ecx+6]
		test	ecx, ecx
		jz	short loc_6E4476A3
		xor	eax, eax

loc_6E4476D6:				; CODE XREF: .text:6E4476EBj
		test	byte ptr [edx+27h], 20h
		jz	short loc_6E4476E3
		test	ebx, ebx
		jz	short loc_6E4476F4
		sub	ebx, 1

loc_6E4476E3:				; CODE XREF: .text:6E4476DAj
		add	eax, 1
		add	edx, 28h
		cmp	eax, ecx
		jb	short loc_6E4476D6
		xor	esi, esi
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_6E4476F4:				; CODE XREF: .text:6E4476DEj
		mov	esi, edx
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E447700	proc near		; CODE XREF: sub_6E446BB0+72p
		cmp	word ptr ds:6E400000h, 5A4Dh
		jz	short loc_6E447710

loc_6E44770B:				; CODE XREF: sub_6E447700+1Cj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E447710:				; CODE XREF: sub_6E447700+9j
		mov	eax, 6E400000h
		call	sub_6E4474F0
		test	eax, eax
		jz	short loc_6E44770B
		mov	eax, 6E400000h
		retn
sub_6E447700	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		cmp	word ptr ds:6E400000h, 5A4Dh
		jz	short loc_6E447740
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E447740:				; CODE XREF: .text:6E44773Bj
		sub	esp, 8
		mov	eax, 6E400000h
		call	sub_6E4474F0
		test	eax, eax
		jz	short loc_6E447776
		mov	eax, [esp+0Ch]
		mov	dword ptr [esp], 6E400000h
		sub	eax, 6E400000h
		mov	[esp+4], eax
		call	sub_6E447530
		test	eax, eax
		jz	short loc_6E447780
		mov	eax, [eax+24h]
		not	eax
		shr	eax, 1Fh

loc_6E447776:				; CODE XREF: .text:6E44774Fj
					; .text:6E447782j
		add	esp, 8
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E447780:				; CODE XREF: .text:6E44776Cj
		xor	eax, eax
		jmp	short loc_6E447776
; ---------------------------------------------------------------------------
		align 10h
		push	edi
		xor	edi, edi
		push	esi
		push	ebx
		sub	esp, 8
		cmp	word ptr ds:6E400000h, 5A4Dh
		mov	ebx, [esp+18h]
		jz	short loc_6E4477B0

loc_6E4477A7:				; CODE XREF: .text:6E4477BCj
					; .text:6E4477CBj ...
		add	esp, 8
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_6E4477B0:				; CODE XREF: .text:6E4477A5j
		mov	eax, 6E400000h
		call	sub_6E4474F0
		test	eax, eax
		jz	short loc_6E4477A7
		mov	eax, ds:6E40003Ch
		mov	esi, [eax+6E400080h]
		test	esi, esi
		jz	short loc_6E4477A7
		mov	[esp+4], esi
		mov	dword ptr [esp], 6E400000h
		call	sub_6E447530
		test	eax, eax
		jz	short loc_6E4477A7
		add	esi, 6E400000h
		mov	edx, esi
		jnz	short loc_6E4477F6
		jmp	short loc_6E4477A7
; ---------------------------------------------------------------------------
		align 10h

loc_6E4477F0:				; CODE XREF: .text:6E447806j
		sub	ebx, 1
		add	edx, 14h

loc_6E4477F6:				; CODE XREF: .text:6E4477E9j
		mov	ecx, [edx+4]
		test	ecx, ecx
		jnz	short loc_6E447804
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_6E447820

loc_6E447804:				; CODE XREF: .text:6E4477FBj
		test	ebx, ebx
		jg	short loc_6E4477F0
		mov	edi, [edx+0Ch]
		add	esp, 8
		pop	ebx
		pop	esi
		add	edi, 6E400000h
		mov	eax, edi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_6E447820:				; CODE XREF: .text:6E447802j
		add	esp, 8
		xor	edi, edi
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E447830	proc near		; CODE XREF: sub_6E446DF0+35p

arg_0		= byte ptr  4

		push	ecx
		push	eax
		cmp	eax, 1000h
		lea	ecx, [esp+8+arg_0]
		jb	short loc_6E447852

loc_6E44783D:				; CODE XREF: sub_6E447830+20j
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_6E44783D

loc_6E447852:				; CODE XREF: sub_6E447830+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		pop	eax
		pop	ecx
		retn
sub_6E447830	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E447860	proc near		; CODE XREF: sub_6E401260+36p
					; sub_6E401260+B0p ...
		mov	eax, 1
		retn	0Ch
sub_6E447860	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_6E447870	proc near		; CODE XREF: sub_6E401260+EDp
					; sub_6E401260+122p ...
		mov	eax, 1
		retn	0Ch
sub_6E447870	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strncpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memmove]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION time]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strchr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_6E447920	proc near		; DATA XREF: .text:6E447944o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_6E401460
		mov	[esp+18h+var_18], offset sub_6E4014B0 ;	_onexit_t
		call	sub_6E446A30
		leave
		retn
sub_6E447920	endp

; ---------------------------------------------------------------------------
		align 10h
dword_6E447940	dd 0FFFFFFFFh		; DATA XREF: sub_6E447140-4Cr
					; sub_6E447140:loc_6E447103r ...
		dd offset sub_6E447920
		dd 0
		dd 0FFFFFFFFh
dword_6E447950	dd 2Ch dup(0)		; DATA XREF: .data:off_6E44AB28o
		dd 180h	dup(?)
_text		ends

; Section 2. (virtual address 00048000)
; Virtual size			: 00002B3C (  11068.)
; Section size in file		: 00002C00 (  11264.)
; Offset to raw	data for section: 00046E00
; Flags	C0600040: Data Readable	Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 6E448000h
off_6E448000	dd offset sub_6E411500	; DATA XREF: .rdata:6E44B0A4o
					; .rdata:6E44B164o ...
		dd offset sub_6E411E60
		dd offset sub_6E410EC0
		dd offset sub_6E412370
		dd offset sub_6E4106D0
		dd offset sub_6E411DF0
		dd 24h
		dd offset sub_6E411DD0
		dd offset aClnt		; "CLNT"
		dd 4
		dd offset aSrvr		; "SRVR"
		dd 4
		dd offset sub_6E412580
		dd offset sub_6E42FF90
		align 10h
dword_6E448040	dd 1			; DATA XREF: sub_6E40E3D0+18o
					; sub_6E40F8C0+2Co
		dd offset aNullMd5	; "NULL-MD5"
		dd 3000001h, 2 dup(1), 20h, 1, 2, 5, 0C030h, 2 dup(0)
		dd 1
		dd offset aNullSha	; "NULL-SHA"
		dd 3000002h, 2 dup(1), 20h, 2 dup(2), 105h, 0C030h, 2 dup(0)
		dd 1
		dd offset aRc4Md5	; "RC4-MD5"
		dd 3000004h, 2 dup(1), 4, 1, 2,	41h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aRc4Sha	; "RC4-SHA"
		dd 3000005h, 2 dup(1), 4, 2 dup(2), 41h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aIdeaCbcSha	; "IDEA-CBC-SHA"
		dd 3000007h, 2 dup(1), 10h, 2 dup(2), 41h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aDesCbc3Sha	; "DES-CBC3-SHA"
		dd 300000Ah, 2 dup(1), 3 dup(2), 181h, 0C030h, 70h, 0A8h
		dd 0
		dd offset aDhDssDesCbc3Sh ; "DH-DSS-DES-CBC3-SHA"
		dd 300000Dh, 4,	8, 3 dup(2), 181h, 0C030h, 70h,	0A8h, 0
		dd offset aDhRsaDesCbc3Sh ; "DH-RSA-DES-CBC3-SHA"
		dd 3000010h, 2,	8, 3 dup(2), 181h, 0C030h, 70h,	0A8h, 1
		dd offset aEdhDssDesCbc3S ; "EDH-DSS-DES-CBC3-SHA"
		dd 3000013h, 8,	4 dup(2), 181h,	0C030h,	70h, 0A8h, 1
		dd offset aEdhRsaDesCbc3S ; "EDH-RSA-DES-CBC3-SHA"
		dd 3000016h, 8,	1, 3 dup(2), 181h, 0C030h, 70h,	0A8h, 1
		dd offset aAdhRc4Md5	; "ADH-RC4-MD5"
		dd 3000018h, 8,	2 dup(4), 1, 2,	41h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aAdhDesCbc3Sha ; "ADH-DES-CBC3-SHA"
		dd 300001Bh, 8,	4, 3 dup(2), 181h, 0C030h, 70h,	0A8h, 1
		dd offset aAes128Sha	; "AES128-SHA"
		dd 300002Fh, 2 dup(1), 40h, 2 dup(2), 181h, 0C030h, 2 dup(80h)
		dd 0
		dd offset aDhDssAes128Sha ; "DH-DSS-AES128-SHA"
		dd 3000030h, 4,	8, 40h,	2 dup(2), 181h,	0C030h,	2 dup(80h)
		dd 0
		dd offset aDhRsaAes128Sha ; "DH-RSA-AES128-SHA"
		dd 3000031h, 2,	8, 40h,	2 dup(2), 181h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aDheDssAes128Sh ; "DHE-DSS-AES128-SHA"
		dd 3000032h, 8,	2, 40h,	2 dup(2), 181h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aDheRsaAes128Sh ; "DHE-RSA-AES128-SHA"
		dd 3000033h, 8,	1, 40h,	2 dup(2), 181h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aAdhAes128Sha	; "ADH-AES128-SHA"
		dd 3000034h, 8,	4, 40h,	2 dup(2), 181h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aAes256Sha	; "AES256-SHA"
		dd 3000035h, 2 dup(1), 80h, 2 dup(2), 181h, 0C030h, 2 dup(100h)
		dd 0
		dd offset aDhDssAes256Sha ; "DH-DSS-AES256-SHA"
		dd 3000036h, 4,	8, 80h,	2 dup(2), 181h,	0C030h,	2 dup(100h)
		dd 0
		dd offset aDhRsaAes256Sha ; "DH-RSA-AES256-SHA"
		dd 3000037h, 2,	8, 80h,	2 dup(2), 181h,	0C030h,	2 dup(100h)
		dd 1
		dd offset aDheDssAes256Sh ; "DHE-DSS-AES256-SHA"
		dd 3000038h, 8,	2, 80h,	2 dup(2), 181h,	0C030h,	2 dup(100h)
		dd 1
		dd offset aDheRsaAes256Sh ; "DHE-RSA-AES256-SHA"
		dd 3000039h, 8,	1, 80h,	2 dup(2), 181h,	0C030h,	2 dup(100h)
		dd 1
		dd offset aAdhAes256Sha	; "ADH-AES256-SHA"
		dd 300003Ah, 8,	4, 80h,	2 dup(2), 181h,	0C030h,	2 dup(100h)
		dd 1
		dd offset aNullSha256	; "NULL-SHA256"
		dd 300003Bh, 2 dup(1), 20h, 10h, 4, 105h, 0C030h, 2 dup(0)
		dd 1
		dd offset aAes128Sha256	; "AES128-SHA256"
		dd 300003Ch, 2 dup(1), 40h, 10h, 4, 181h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aAes256Sha256	; "AES256-SHA256"
		dd 300003Dh, 2 dup(1), 80h, 10h, 4, 181h, 0C030h, 2 dup(100h)
		dd 0
		dd offset aDhDssAes128S_0 ; "DH-DSS-AES128-SHA256"
		dd 300003Eh, 4,	8, 40h,	10h, 4,	181h, 0C030h, 2	dup(80h)
		dd 0
		dd offset aDhRsaAes128S_0 ; "DH-RSA-AES128-SHA256"
		dd 300003Fh, 2,	8, 40h,	10h, 4,	181h, 0C030h, 2	dup(80h)
		dd 1
		dd offset aDheDssAes128_0 ; "DHE-DSS-AES128-SHA256"
		dd 3000040h, 8,	2, 40h,	10h, 4,	181h, 0C030h, 2	dup(80h)
		dd 1
		dd offset aCamellia128Sha ; "CAMELLIA128-SHA"
		dd 3000041h, 2 dup(1), 100h, 2 dup(2), 81h, 0C030h, 2 dup(80h)
		dd 0
		dd offset aDhDssCamellia1 ; "DH-DSS-CAMELLIA128-SHA"
		dd 3000042h, 4,	8, 100h, 2 dup(2), 81h,	0C030h,	2 dup(80h)
		dd 0
		dd offset aDhRsaCamellia1 ; "DH-RSA-CAMELLIA128-SHA"
		dd 3000043h, 2,	8, 100h, 2 dup(2), 81h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aDheDssCamellia ; "DHE-DSS-CAMELLIA128-SHA"
		dd 3000044h, 8,	2, 100h, 2 dup(2), 81h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aDheRsaCamellia ; "DHE-RSA-CAMELLIA128-SHA"
		dd 3000045h, 8,	1, 100h, 2 dup(2), 81h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aAdhCamellia128 ; "ADH-CAMELLIA128-SHA"
		dd 3000046h, 8,	4, 100h, 2 dup(2), 81h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aDheRsaAes128_0 ; "DHE-RSA-AES128-SHA256"
		dd 3000067h, 8,	1, 40h,	10h, 4,	181h, 0C030h, 2	dup(80h)
		dd 0
		dd offset aDhDssAes256S_0 ; "DH-DSS-AES256-SHA256"
		dd 3000068h, 4,	8, 80h,	10h, 4,	181h, 0C030h, 2	dup(100h)
		dd 0
		dd offset aDhRsaAes256S_0 ; "DH-RSA-AES256-SHA256"
		dd 3000069h, 2,	8, 80h,	10h, 4,	181h, 0C030h, 2	dup(100h)
		dd 1
		dd offset aDheDssAes256_0 ; "DHE-DSS-AES256-SHA256"
		dd 300006Ah, 8,	2, 80h,	10h, 4,	181h, 0C030h, 2	dup(100h)
		dd 1
		dd offset aDheRsaAes256_0 ; "DHE-RSA-AES256-SHA256"
		dd 300006Bh, 8,	1, 80h,	10h, 4,	181h, 0C030h, 2	dup(100h)
		dd 1
		dd offset aAdhAes128Sha25 ; "ADH-AES128-SHA256"
		dd 300006Ch, 8,	4, 40h,	10h, 4,	181h, 0C030h, 2	dup(80h)
		dd 1
		dd offset aAdhAes256Sha25 ; "ADH-AES256-SHA256"
		dd 300006Dh, 8,	4, 80h,	10h, 4,	181h, 0C030h, 2	dup(100h)
		dd 1
		dd offset aGost94Gost89Go ; "GOST94-GOST89-GOST89"
		dd 3000080h, 200h, 100h, 400h, 8, 2, 81h, 10044h, 2 dup(100h)
		dd 1
		dd offset aGost2001Gost89 ; "GOST2001-GOST89-GOST89"
		dd 3000081h, 2 dup(200h), 400h,	8, 2, 81h, 10044h, 2 dup(100h)
		dd 1
		dd offset aGost94NullGost ; "GOST94-NULL-GOST94"
		dd 3000082h, 200h, 100h, 20h, 4, 2, 5, 10040h, 2 dup(0)
		dd 1
		dd offset aGost2001NullGo ; "GOST2001-NULL-GOST94"
		dd 3000083h, 2 dup(200h), 20h, 4, 2, 5,	10040h,	2 dup(0)
		dd 1
		dd offset aCamellia256Sha ; "CAMELLIA256-SHA"
		dd 3000084h, 2 dup(1), 200h, 2 dup(2), 81h, 0C030h, 2 dup(100h)
		dd 0
		dd offset aDhDssCamellia2 ; "DH-DSS-CAMELLIA256-SHA"
		dd 3000085h, 4,	8, 200h, 2 dup(2), 81h,	0C030h,	2 dup(100h)
		dd 0
		dd offset aDhRsaCamellia2 ; "DH-RSA-CAMELLIA256-SHA"
		dd 3000086h, 2,	8, 200h, 2 dup(2), 81h,	0C030h,	2 dup(100h)
		dd 1
		dd offset aDheDssCamell_0 ; "DHE-DSS-CAMELLIA256-SHA"
		dd 3000087h, 8,	2, 200h, 2 dup(2), 81h,	0C030h,	2 dup(100h)
		dd 1
		dd offset aDheRsaCamell_0 ; "DHE-RSA-CAMELLIA256-SHA"
		dd 3000088h, 8,	1, 200h, 2 dup(2), 81h,	0C030h,	2 dup(100h)
		dd 1
		dd offset aAdhCamellia256 ; "ADH-CAMELLIA256-SHA"
		dd 3000089h, 8,	4, 200h, 2 dup(2), 81h,	0C030h,	2 dup(100h)
		dd 1
		dd offset aPskRc4Sha	; "PSK-RC4-SHA"
		dd 300008Ah, 100h, 80h,	4, 2 dup(2), 41h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aPsk3desEdeCbcS ; "PSK-3DES-EDE-CBC-SHA"
		dd 300008Bh, 100h, 80h,	3 dup(2), 181h,	0C030h,	70h, 0A8h
		dd 1
		dd offset aPskAes128CbcSh ; "PSK-AES128-CBC-SHA"
		dd 300008Ch, 100h, 80h,	40h, 2 dup(2), 181h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aPskAes256CbcSh ; "PSK-AES256-CBC-SHA"
		dd 300008Dh, 100h, 2 dup(80h), 2 dup(2), 181h, 0C030h
		dd 2 dup(100h),	1
		dd offset aSeedSha	; "SEED-SHA"
		dd 3000096h, 2 dup(1), 800h, 2 dup(2), 41h, 0C030h, 2 dup(80h)
		dd 0
		dd offset aDhDssSeedSha	; "DH-DSS-SEED-SHA"
		dd 3000097h, 4,	8, 800h, 2 dup(2), 41h,	0C030h,	2 dup(80h)
		dd 0
		dd offset aDhRsaSeedSha	; "DH-RSA-SEED-SHA"
		dd 3000098h, 2,	8, 800h, 2 dup(2), 41h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aDheDssSeedSha ; "DHE-DSS-SEED-SHA"
		dd 3000099h, 8,	2, 800h, 2 dup(2), 41h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aDheRsaSeedSha ; "DHE-RSA-SEED-SHA"
		dd 300009Ah, 8,	1, 800h, 2 dup(2), 41h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aAdhSeedSha	; "ADH-SEED-SHA"
		dd 300009Bh, 8,	4, 800h, 2 dup(2), 41h,	0C030h,	2 dup(80h)
		dd 1
		dd offset aAes128GcmSha25 ; "AES128-GCM-SHA256"
		dd 300009Ch, 2 dup(1), 1000h, 40h, 4, 181h, 20080h, 2 dup(80h)
		dd 1
		dd offset aAes256GcmSha38 ; "AES256-GCM-SHA384"
		dd 300009Dh, 2 dup(1), 2000h, 40h, 4, 181h, 40100h, 2 dup(100h)
		dd 1
		dd offset aDheRsaAes128Gc ; "DHE-RSA-AES128-GCM-SHA256"
		dd 300009Eh, 8,	1, 1000h, 40h, 4, 181h,	20080h,	2 dup(80h)
		dd 1
		dd offset aDheRsaAes256Gc ; "DHE-RSA-AES256-GCM-SHA384"
		dd 300009Fh, 8,	1, 2000h, 40h, 4, 181h,	40100h,	2 dup(100h)
		dd 0
		dd offset aDhRsaAes128Gcm ; "DH-RSA-AES128-GCM-SHA256"
		dd 30000A0h, 2,	8, 1000h, 40h, 4, 181h,	20080h,	2 dup(80h)
		dd 0
		dd offset aDhRsaAes256Gcm ; "DH-RSA-AES256-GCM-SHA384"
		dd 30000A1h, 2,	8, 2000h, 40h, 4, 181h,	40100h,	2 dup(100h)
		dd 1
		dd offset aDheDssAes128Gc ; "DHE-DSS-AES128-GCM-SHA256"
		dd 30000A2h, 8,	2, 1000h, 40h, 4, 181h,	20080h,	2 dup(80h)
		dd 1
		dd offset aDheDssAes256Gc ; "DHE-DSS-AES256-GCM-SHA384"
		dd 30000A3h, 8,	2, 2000h, 40h, 4, 181h,	40100h,	2 dup(100h)
		dd 0
		dd offset aDhDssAes128Gcm ; "DH-DSS-AES128-GCM-SHA256"
		dd 30000A4h, 4,	8, 1000h, 40h, 4, 181h,	20080h,	2 dup(80h)
		dd 0
		dd offset aDhDssAes256Gcm ; "DH-DSS-AES256-GCM-SHA384"
		dd 30000A5h, 4,	8, 2000h, 40h, 4, 181h,	40100h,	2 dup(100h)
		dd 1
		dd offset aAdhAes128GcmSh ; "ADH-AES128-GCM-SHA256"
		dd 30000A6h, 8,	4, 1000h, 40h, 4, 181h,	20080h,	2 dup(80h)
		dd 1
		dd offset aAdhAes256GcmSh ; "ADH-AES256-GCM-SHA384"
		dd 30000A7h, 8,	4, 2000h, 40h, 4, 181h,	40100h,	2 dup(100h)
		dd 1
		dd offset aEcdhEcdsaNullS ; "ECDH-ECDSA-NULL-SHA"
		dd 300C001h, 40h, 10h, 20h, 2 dup(2), 105h, 0C030h, 2 dup(0)
		dd 1
		dd offset aEcdhEcdsaRc4Sh ; "ECDH-ECDSA-RC4-SHA"
		dd 300C002h, 40h, 10h, 4, 2 dup(2), 41h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aEcdhEcdsaDesCb ; "ECDH-ECDSA-DES-CBC3-SHA"
		dd 300C003h, 40h, 10h, 3 dup(2), 181h, 0C030h, 70h, 0A8h
		dd 1
		dd offset aEcdhEcdsaAes12 ; "ECDH-ECDSA-AES128-SHA"
		dd 300C004h, 40h, 10h, 40h, 2 dup(2), 181h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aEcdhEcdsaAes25 ; "ECDH-ECDSA-AES256-SHA"
		dd 300C005h, 40h, 10h, 80h, 2 dup(2), 181h, 0C030h, 2 dup(100h)
		dd 1
		dd offset aEcdheEcdsaNull ; "ECDHE-ECDSA-NULL-SHA"
		dd 300C006h, 80h, 40h, 20h, 2 dup(2), 105h, 0C030h, 2 dup(0)
		dd 1
		dd offset aEcdheEcdsaRc4S ; "ECDHE-ECDSA-RC4-SHA"
		dd 300C007h, 80h, 40h, 4, 2 dup(2), 41h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aEcdheEcdsaDesC ; "ECDHE-ECDSA-DES-CBC3-SHA"
		dd 300C008h, 80h, 40h, 3 dup(2), 181h, 0C030h, 70h, 0A8h
		dd 1
		dd offset aEcdheEcdsaAes1 ; "ECDHE-ECDSA-AES128-SHA"
		dd 300C009h, 80h, 2 dup(40h), 2	dup(2),	181h, 0C030h, 2	dup(80h)
		dd 1
		dd offset aEcdheEcdsaAes2 ; "ECDHE-ECDSA-AES256-SHA"
		dd 300C00Ah, 80h, 40h, 80h, 2 dup(2), 181h, 0C030h, 2 dup(100h)
		dd 1
		dd offset aEcdhRsaNullSha ; "ECDH-RSA-NULL-SHA"
		dd 300C00Bh, 20h, 10h, 20h, 2 dup(2), 105h, 0C030h, 2 dup(0)
		dd 1
		dd offset aEcdhRsaRc4Sha ; "ECDH-RSA-RC4-SHA"
		dd 300C00Ch, 20h, 10h, 4, 2 dup(2), 41h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aEcdhRsaDesCbc3 ; "ECDH-RSA-DES-CBC3-SHA"
		dd 300C00Dh, 20h, 10h, 3 dup(2), 181h, 0C030h, 70h, 0A8h
		dd 1
		dd offset aEcdhRsaAes128S ; "ECDH-RSA-AES128-SHA"
		dd 300C00Eh, 20h, 10h, 40h, 2 dup(2), 181h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aEcdhRsaAes256S ; "ECDH-RSA-AES256-SHA"
		dd 300C00Fh, 20h, 10h, 80h, 2 dup(2), 181h, 0C030h, 2 dup(100h)
		dd 1
		dd offset aEcdheRsaNullSh ; "ECDHE-RSA-NULL-SHA"
		dd 300C010h, 80h, 1, 20h, 2 dup(2), 105h, 0C030h, 2 dup(0)
		dd 1
		dd offset aEcdheRsaRc4Sha ; "ECDHE-RSA-RC4-SHA"
		dd 300C011h, 80h, 1, 4,	2 dup(2), 41h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aEcdheRsaDesCbc ; "ECDHE-RSA-DES-CBC3-SHA"
		dd 300C012h, 80h, 1, 3 dup(2), 181h, 0C030h, 70h, 0A8h
		dd 1
		dd offset aEcdheRsaAes128 ; "ECDHE-RSA-AES128-SHA"
		dd 300C013h, 80h, 1, 40h, 2 dup(2), 181h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aEcdheRsaAes256 ; "ECDHE-RSA-AES256-SHA"
		dd 300C014h, 80h, 1, 80h, 2 dup(2), 181h, 0C030h, 2 dup(100h)
		dd 1
		dd offset aAecdhNullSha	; "AECDH-NULL-SHA"
		dd 300C015h, 80h, 4, 20h, 2 dup(2), 105h, 0C030h, 2 dup(0)
		dd 1
		dd offset aAecdhRc4Sha	; "AECDH-RC4-SHA"
		dd 300C016h, 80h, 2 dup(4), 2 dup(2), 41h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aAecdhDesCbc3Sh ; "AECDH-DES-CBC3-SHA"
		dd 300C017h, 80h, 4, 3 dup(2), 181h, 0C030h, 70h, 0A8h
		dd 1
		dd offset aAecdhAes128Sha ; "AECDH-AES128-SHA"
		dd 300C018h, 80h, 4, 40h, 2 dup(2), 181h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aAecdhAes256Sha ; "AECDH-AES256-SHA"
		dd 300C019h, 80h, 4, 80h, 2 dup(2), 181h, 0C030h, 2 dup(100h)
		dd 1
		dd offset aSrp3desEdeCbcS ; "SRP-3DES-EDE-CBC-SHA"
		dd 300C01Ah, 2 dup(400h), 3 dup(2), 81h, 0C030h, 70h, 0A8h
		dd 1
		dd offset aSrpRsa3desEdeC ; "SRP-RSA-3DES-EDE-CBC-SHA"
		dd 300C01Bh, 400h, 1, 3	dup(2),	81h, 0C030h, 70h, 0A8h
		dd 1
		dd offset aSrpDss3desEdeC ; "SRP-DSS-3DES-EDE-CBC-SHA"
		dd 300C01Ch, 400h, 4 dup(2), 81h, 0C030h, 70h, 0A8h, 1
		dd offset aSrpAes128CbcSh ; "SRP-AES-128-CBC-SHA"
		dd 300C01Dh, 2 dup(400h), 40h, 2 dup(2), 81h, 0C030h, 2	dup(80h)
		dd 1
		dd offset aSrpRsaAes128Cb ; "SRP-RSA-AES-128-CBC-SHA"
		dd 300C01Eh, 400h, 1, 40h, 2 dup(2), 81h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aSrpDssAes128Cb ; "SRP-DSS-AES-128-CBC-SHA"
		dd 300C01Fh, 400h, 2, 40h, 2 dup(2), 81h, 0C030h, 2 dup(80h)
		dd 1
		dd offset aSrpAes256CbcSh ; "SRP-AES-256-CBC-SHA"
		dd 300C020h, 2 dup(400h), 80h, 2 dup(2), 81h, 0C030h, 2	dup(100h)
		dd 1
		dd offset aSrpRsaAes256Cb ; "SRP-RSA-AES-256-CBC-SHA"
		dd 300C021h, 400h, 1, 80h, 2 dup(2), 81h, 0C030h, 2 dup(100h)
		dd 1
		dd offset aSrpDssAes256Cb ; "SRP-DSS-AES-256-CBC-SHA"
		dd 300C022h, 400h, 2, 80h, 2 dup(2), 81h, 0C030h, 2 dup(100h)
		dd 1
		dd offset aEcdheEcdsaAe_0 ; "ECDHE-ECDSA-AES128-SHA256"
		dd 300C023h, 80h, 2 dup(40h), 10h, 4, 181h, 20080h, 2 dup(80h)
		dd 1
		dd offset aEcdheEcdsaAe_1 ; "ECDHE-ECDSA-AES256-SHA384"
		dd 300C024h, 80h, 40h, 80h, 20h, 4, 181h, 40100h, 2 dup(100h)
		dd 1
		dd offset aEcdhEcdsaAes_0 ; "ECDH-ECDSA-AES128-SHA256"
		dd 300C025h, 40h, 10h, 40h, 10h, 4, 181h, 20080h, 2 dup(80h)
		dd 1
		dd offset aEcdhEcdsaAes_1 ; "ECDH-ECDSA-AES256-SHA384"
		dd 300C026h, 40h, 10h, 80h, 20h, 4, 181h, 40100h, 2 dup(100h)
		dd 1
		dd offset aEcdheRsaAes1_0 ; "ECDHE-RSA-AES128-SHA256"
		dd 300C027h, 80h, 1, 40h, 10h, 4, 181h,	20080h,	2 dup(80h)
		dd 1
		dd offset aEcdheRsaAes2_0 ; "ECDHE-RSA-AES256-SHA384"
		dd 300C028h, 80h, 1, 80h, 20h, 4, 181h,	40100h,	2 dup(100h)
		dd 1
		dd offset aEcdhRsaAes12_0 ; "ECDH-RSA-AES128-SHA256"
		dd 300C029h, 20h, 10h, 40h, 10h, 4, 181h, 20080h, 2 dup(80h)
		dd 1
		dd offset aEcdhRsaAes25_0 ; "ECDH-RSA-AES256-SHA384"
		dd 300C02Ah, 20h, 10h, 80h, 20h, 4, 181h, 40100h, 2 dup(100h)
		dd 1
		dd offset aEcdheEcdsaAe_2 ; "ECDHE-ECDSA-AES128-GCM-SHA256"
		dd 300C02Bh, 80h, 40h, 1000h, 40h, 4, 181h, 20080h, 2 dup(80h)
		dd 1
		dd offset aEcdheEcdsaAe_3 ; "ECDHE-ECDSA-AES256-GCM-SHA384"
		dd 300C02Ch, 80h, 40h, 2000h, 40h, 4, 181h, 40100h, 2 dup(100h)
		dd 1
		dd offset aEcdhEcdsaAes_2 ; "ECDH-ECDSA-AES128-GCM-SHA256"
		dd 300C02Dh, 40h, 10h, 1000h, 40h, 4, 181h, 20080h, 2 dup(80h)
		dd 1
		dd offset aEcdhEcdsaAes_3 ; "ECDH-ECDSA-AES256-GCM-SHA384"
		dd 300C02Eh, 40h, 10h, 2000h, 40h, 4, 181h, 40100h, 2 dup(100h)
		dd 1
		dd offset aEcdheRsaAes1_1 ; "ECDHE-RSA-AES128-GCM-SHA256"
		dd 300C02Fh, 80h, 1, 1000h, 40h, 4, 181h, 20080h, 2 dup(80h)
		dd 1
		dd offset aEcdheRsaAes2_1 ; "ECDHE-RSA-AES256-GCM-SHA384"
		dd 300C030h, 80h, 1, 2000h, 40h, 4, 181h, 40100h, 2 dup(100h)
		dd 1
		dd offset aEcdhRsaAes128G ; "ECDH-RSA-AES128-GCM-SHA256"
		dd 300C031h, 20h, 10h, 1000h, 40h, 4, 181h, 20080h, 2 dup(80h)
		dd 1
		dd offset aEcdhRsaAes256G ; "ECDH-RSA-AES256-GCM-SHA384"
		dd 300C032h, 20h, 10h, 2000h, 40h, 4, 181h, 40100h, 2 dup(100h)
		dd 4 dup(0)
asc_6E4497C0	db '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\',0
					; DATA XREF: sub_6E411B40+1E6o
					; sub_6E411E60+1F2o
		align 10h
a66666666666666	db '666666666666666666666666666666666666666666666666',0
					; DATA XREF: sub_6E411B40+16Ao
					; sub_6E411E60+FEo ...
		align 10h
dword_6E449840	dd 2000E8FDh, 8301E30h,	852A0606h, 9020203h, 6060830h
					; DATA XREF: sub_6E41C0E0+4ACo
		dd 203852Ah, 8301602h, 852A0606h, 17020203h
dword_6E449864	dd 6			; DATA XREF: sub_6E41DA10+8Er
					; sub_6E41DA10:loc_6E41DB30o ...
		dd 1
dword_6E44986C	dd 74h			; DATA XREF: sub_6E41DA10+9Ar
					; sub_6E41DA10:loc_6E41DB40o ...
		dd 2
dword_6E449874	dd 198h			; DATA XREF: sub_6E41DA10+A6r
					; sub_6E41DA10+AEo ...
		dd 3, 0
dword_6E449880	dd 4			; DATA XREF: sub_6E41DA10+18r
					; sub_6E41DA10:loc_6E41DAE0o
		dd 1
dword_6E449888	dd 40h			; DATA XREF: sub_6E41DA10+24r
					; sub_6E41DA10:loc_6E41DAF0o
		dd 2
dword_6E449890	dd 2A3h			; DATA XREF: sub_6E41DA10+30r
					; sub_6E41DA10:loc_6E41DB00o
		dd 3
dword_6E449898	dd 2A0h			; DATA XREF: sub_6E41DA10+3Cr
					; sub_6E41DA10:loc_6E41DB10o
		dd 4
dword_6E4498A0	dd 2A1h			; DATA XREF: sub_6E41DA10+48r
					; sub_6E41DA10:loc_6E41DB20o
		dd 5
dword_6E4498A8	dd 2A2h			; DATA XREF: sub_6E41DA10+54r
					; sub_6E41DA10:loc_6E41DA80o
		dd 6, 4	dup(0)
off_6E4498C0	dd offset sub_6E4206A0	; DATA XREF: .rdata:6E44C584o
					; .rdata:6E44C604o ...
		dd offset sub_6E4212D0
		dd offset sub_6E4203A0
		dd offset sub_6E421620
		dd offset sub_6E41F9C0
		dd offset sub_6E420DA0
		dd 0Ch
		dd offset sub_6E420C90
		dd offset aClientFinish_0 ; "client finished"
		dd 0Fh
		dd offset aServerFinish_0 ; "server finished"
		dd 0Fh
		dd offset sub_6E421EB0
		dd offset sub_6E421980
		align 10h
off_6E449900	dd offset sub_6E42F410	; DATA XREF: .rdata:6E44CD44o
					; .rdata:6E44CDE4o ...
		dd offset sub_6E4212D0
		dd offset sub_6E4203A0
		dd offset sub_6E421620
		dd offset sub_6E41F9C0
		dd offset sub_6E420DA0
		dd 0Ch
		dd offset sub_6E420C90
		dd offset aClientFinish_1 ; "client finished"
		dd 0Fh
		dd offset aServerFinish_1 ; "server finished"
		dd 0Fh
		dd offset sub_6E421EB0
		dd offset sub_6E421980
		align 10h
; char *Str1
Str1		dd offset aSrtp_aes128_cm ; DATA XREF: sub_6E42F730:loc_6E42F770r
					; sub_6E42F730+4Eo
					; "SRTP_AES128_CM_SHA1_80"
		dd 1
		dd offset aSrtp_aes128__0 ; "SRTP_AES128_CM_SHA1_32"
		dd 2, 4	dup(0)
dword_6E449960	dd 2 dup(0)		; DATA XREF: sub_6E4321C0+122o
		dd 3005600h, 0Dh dup(0)
dword_6E4499A0	dd 2 dup(0)		; DATA XREF: sub_6E4321C0+104o
		dd 30000FFh, 0Dh dup(0)
off_6E4499E0	dd offset sub_6E42FF90	; DATA XREF: .rdata:6E44C344o
					; .rdata:6E44C424o ...
		dd offset sub_6E42FF90
		dd offset sub_6E42FF90
		dd offset sub_6E42FF90
		dd offset sub_6E42FF90
		dd offset sub_6E42FF90
		dd 0
		dd offset sub_6E42FF90
		dd 4 dup(0)
		dd offset sub_6E42FF90
		dd offset sub_6E42FF90
		dd offset aOpenssl1_0_1s1 ; "OpenSSL 1.0.1s  1 Mar 2016"
		align 10h
dword_6E449A20	dd 0FFFFFFFFh		; DATA XREF: SSL_get_ex_data_X509_STORE_CTX_idx+27r
					; SSL_get_ex_data_X509_STORE_CTX_idx+54r ...
dword_6E449A24	dd 357h			; DATA XREF: sub_6E43B840+219r
		dd 2 dup(357h)
dword_6E449A30	dd 0			; DATA XREF: sub_6E43B560+1DFw
					; sub_6E43BC80+2A4r
		dd 2 dup(357h),	0
dword_6E449A40	dd 207h			; DATA XREF: BIO_f_sslo
					; BIO_new_buffer_ssl_connect+35o ...
		dd offset dword_6E450000
		dd offset sub_6E443A70
		dd offset sub_6E4438C0
		dd offset sub_6E443890
		dd 0
		dd offset sub_6E443D00
		dd offset sub_6E443C00
		dd offset sub_6E443800
		dd offset sub_6E4437B0
		align 20h
dword_6E449A80	dd 14000064h		; DATA XREF: ERR_load_SSL_strings+34o
		dd offset aAppDataInHands ; "app data in handshake"
		dd 14000110h
		dd offset aAttemptToReuse ; "attempt to	reuse session in different c"...
		dd 14000065h
		dd offset aBadAlertRecord ; "bad alert record"
		dd 14000066h
		dd offset aBadAuthenticat ; "bad authentication	type"
		dd 14000067h
		dd offset aBadChangeCiphe ; "bad change	cipher spec"
		dd 14000068h
		dd offset aBadChecksum	; "bad checksum"
		dd 1400006Ah
		dd offset aBadDataReturne ; "bad data returned by callback"
		dd 1400006Bh
		dd offset aBadDecompressi ; "bad decompression"
		dd 1400006Ch
		dd offset aBadDhGLength	; "bad dh g length"
		dd 14000177h
		dd offset aBadDhGValue	; "bad dh g value"
		dd 1400006Dh
		dd offset aBadDhPubKeyLen ; "bad dh pub	key length"
		dd 14000189h
		dd offset aBadDhPubKeyVal ; "bad dh pub	key value"
		dd 1400006Eh
		dd offset aBadDhPLength	; "bad dh p length"
		dd 1400018Bh
		dd offset aBadDhPValue	; "bad dh p value"
		dd 1400006Fh
		dd offset aBadDigestLengt ; "bad digest	length"
		dd 14000070h
		dd offset aBadDsaSignatur ; "bad dsa signature"
		dd 14000130h
		dd offset aBadEccCert	; "bad ecc cert"
		dd 14000131h
		dd offset aBadEcdsaSignat ; "bad ecdsa signature"
		dd 14000132h
		dd offset aBadEcpoint	; "bad ecpoint"
		dd 1400014Ch
		dd offset aBadHandshakeLe ; "bad handshake length"
		dd 14000069h
		dd offset aBadHelloReques ; "bad hello request"
		dd 1400010Fh
		dd offset aBadLength	; "bad length"
		dd 14000071h
		dd offset aBadMacDecode	; "bad mac decode"
		dd 1400014Dh
		dd offset aBadMacLength	; "bad mac length"
		dd 14000072h
		dd offset aBadMessageType ; "bad message type"
		dd 14000073h
		dd offset aBadPacketLengt ; "bad packet	length"
		dd 14000074h
		dd offset aBadProtocolVer ; "bad protocol version number"
		dd 1400013Ch
		dd offset aBadPskIdentity ; "bad psk identity hint length"
		dd 14000075h
		dd offset aBadResponseArg ; "bad response argument"
		dd 14000076h
		dd offset aBadRsaDecrypt ; "bad	rsa decrypt"
		dd 14000077h
		dd offset aBadRsaEncrypt ; "bad	rsa encrypt"
		dd 14000078h
		dd offset aBadRsaELength ; "bad	rsa e length"
		dd 14000079h
		dd offset aBadRsaModulusL ; "bad rsa modulus length"
		dd 1400007Ah
		dd offset aBadRsaSignatur ; "bad rsa signature"
		dd 1400007Bh
		dd offset aBadSignature	; "bad signature"
		dd 1400015Bh
		dd offset aBadSrpALength ; "bad	srp a length"
		dd 1400015Ch
		dd offset aBadSrpBLength ; "bad	srp b length"
		dd 1400015Dh
		dd offset aBadSrpGLength ; "bad	srp g length"
		dd 1400015Eh
		dd offset aBadSrpNLength ; "bad	srp n length"
		dd 14000173h
		dd offset aBadSrpParamete ; "bad srp parameters"
		dd 1400015Fh
		dd offset aBadSrpSLength ; "bad	srp s length"
		dd 14000160h
		dd offset aBadSrtpMkiValu ; "bad srtp mki value"
		dd 14000161h
		dd offset aBadSrtpProtect ; "bad srtp protection profile list"
		dd 1400007Ch
		dd offset aBadSslFiletype ; "bad ssl filetype"
		dd 1400007Dh
		dd offset aBadSslSessionI ; "bad ssl session id	length"
		dd 1400007Eh
		dd offset aBadState	; "bad state"
		dd 1400007Fh
		dd offset aBadWriteRetry ; "bad	write retry"
		dd 14000080h
		dd offset aBioNotSet	; "bio not set"
		dd 14000081h
		dd offset aBlockCipherPad ; "block cipher pad is wrong"
		dd 14000082h
		dd offset aBnLib	; "bn lib"
		dd 14000083h
		dd offset aCaDnLengthMism ; "ca	dn length mismatch"
		dd 14000084h
		dd offset aCaDnTooLong	; "ca dn too long"
		dd 14000085h
		dd offset aCcsReceivedEar ; "ccs received early"
		dd 14000086h
		dd offset aCertificateVer ; "certificate verify	failed"
		dd 14000087h
		dd offset aCertLengthMism ; "cert length mismatch"
		dd 14000088h
		dd offset aChallengeIsDif ; "challenge is different"
		dd 14000089h
		dd offset aCipherCodeWron ; "cipher code wrong length"
		dd 1400008Ah
		dd offset aCipherOrHashUn ; "cipher or hash unavailable"
		dd 1400008Bh
		dd offset aCipherTableSrc ; "cipher table src error"
		dd 140000E2h
		dd offset aClienthelloTls ; "clienthello tlsext"
		dd 1400008Ch
		dd offset aCompressedLeng ; "compressed	length too long"
		dd 14000157h
		dd offset aCompressionDis ; "compression disabled"
		dd 1400008Dh
		dd offset aCompressionFai ; "compression failure"
		dd 14000133h
		dd offset aCompressionIdN ; "compression id not	within private range"
		dd 1400008Eh
		dd offset aCompressionLib ; "compression library error"
		dd 1400008Fh
		dd offset aConnectionIdIs ; "connection	id is different"
		dd 14000090h
		dd offset aConnectionType ; "connection	type not set"
		dd 14000134h
		dd offset aCookieMismatch ; "cookie mismatch"
		dd 14000091h
		dd offset aDataBetweenCcs ; "data between ccs and finished"
		dd 14000092h
		dd offset aDataLengthTooL ; "data length too long"
		dd 14000093h
		dd offset aDecryptionFail ; "decryption	failed"
		dd 14000119h
		dd offset aDecryptionFa_0 ; "decryption	failed or bad record mac"
		dd 14000174h
		dd offset aDhKeyTooSmall ; "dh key too small"
		dd 14000094h
		dd offset aDhPublicValueL ; "dh	public value length is wrong"
		dd 14000095h
		dd offset aDigestCheckFai ; "digest check failed"
		dd 1400014Eh
		dd offset aDtlsMessageToo ; "dtls message too big"
		dd 14000135h
		dd offset aDuplicateCompr ; "duplicate compression id"
		dd 1400013Dh
		dd offset aEccCertNotForK ; "ecc cert not for key agreement"
		dd 1400013Eh
		dd offset aEccCertNotForS ; "ecc cert not for signing"
		dd 14000142h
		dd offset aEccCertShouldH ; "ecc cert should have rsa signature"
		dd 14000143h
		dd offset aEccCertShoul_0 ; "ecc cert should have sha1 signature"
		dd 14000136h
		dd offset aEcgroupTooLarg ; "ecgroup too large for cipher"
		dd 14000162h
		dd offset aEmptySrtpProte ; "empty srtp	protection profile list"
		dd 14000096h
		dd offset aEncryptedLengt ; "encrypted length too long"
		dd 1400011Ah
		dd offset aErrorGeneratin ; "error generating tmp rsa key"
		dd 14000097h
		dd offset aErrorInReceive ; "error in received cipher list"
		dd 14000098h
		dd offset aExcessiveMessa ; "excessive message size"
		dd 14000099h
		dd offset aExtraDataInMes ; "extra data	in message"
		dd 1400009Ah
		dd offset aGotAFinBeforeA ; "got a fin before a	ccs"
		dd 14000163h
		dd offset aGotNextProtoBe ; "got next proto before a ccs"
		dd 14000164h
		dd offset aGotNextProtoWi ; "got next proto without seeing extension"
		dd 1400009Bh
		dd offset aHttpsProxyRequ ; "https proxy request"
		dd 1400009Ch
		dd offset aHttpRequest	; "http	request"
		dd 1400011Bh
		dd offset aIllegalPadding ; "illegal padding"
		dd 14000175h
		dd offset aInappropriateF ; "inappropriate fallback"
		dd 14000154h
		dd offset aInconsistentCo ; "inconsistent compression"
		dd 1400009Eh
		dd offset aInvalidChallen ; "invalid challenge length"
		dd 14000118h
		dd offset aInvalidCommand ; "invalid command"
		dd 14000155h
		dd offset aInvalidCompres ; "invalid compression algorithm"
		dd 14000116h
		dd offset aInvalidPurpose ; "invalid purpose"
		dd 14000165h
		dd offset aInvalidSrpUser ; "invalid srp username"
		dd 14000148h
		dd offset aInvalidStatusR ; "invalid status response"
		dd 14000145h
		dd offset aInvalidTicketK ; "invalid ticket keys length"
		dd 14000117h
		dd offset aInvalidTrust	; "invalid trust"
		dd 1400011Ch
		dd offset aKeyArgTooLong ; "key	arg too	long"
		dd 1400011Dh
		dd offset aKrb5_0	; "krb5"
		dd 1400011Eh
		dd offset aKrb5ClientCcPr ; "krb5 client cc principal (no tkt?)"
		dd 1400011Fh
		dd offset aKrb5ClientGetC ; "krb5 client get cred"
		dd 14000120h
		dd offset aKrb5ClientInit ; "krb5 client init"
		dd 14000121h
		dd offset aKrb5ClientMk_r ; "krb5 client mk_req	(expired tkt?)"
		dd 14000122h
		dd offset aKrb5ServerBadT ; "krb5 server bad ticket"
		dd 14000123h
		dd offset aKrb5ServerInit ; "krb5 server init"
		dd 14000124h
		dd offset aKrb5ServerRd_r ; "krb5 server rd_req	(keytab	perms?)"
		dd 14000125h
		dd offset aKrb5ServerTktE ; "krb5 server tkt expired"
		dd 14000126h
		dd offset aKrb5ServerTktN ; "krb5 server tkt not yet valid"
		dd 14000127h
		dd offset aKrb5ServerTktS ; "krb5 server tkt skew"
		dd 1400009Fh
		dd offset aLengthMismatch ; "length mismatch"
		dd 140000A0h
		dd offset aLengthTooShort ; "length too	short"
		dd 14000112h
		dd offset aLibraryBug	; "library bug"
		dd 140000A1h
		dd offset aLibraryHasNoCi ; "library has no ciphers"
		dd 14000128h
		dd offset aMessageTooLong ; "message too long"
		dd 140000A2h
		dd offset aMissingDhDsaCe ; "missing dh	dsa cert"
		dd 140000A3h
		dd offset aMissingDhKey	; "missing dh key"
		dd 140000A4h
		dd offset aMissingDhRsaCe ; "missing dh	rsa cert"
		dd 140000A5h
		dd offset aMissingDsaSign ; "missing dsa signing cert"
		dd 140000A6h
		dd offset aMissingExportT ; "missing export tmp	dh key"
		dd 140000A7h
		dd offset aMissingExpor_0 ; "missing export tmp	rsa key"
		dd 140000A8h
		dd offset aMissingRsaCert ; "missing rsa certificate"
		dd 140000A9h
		dd offset aMissingRsaEncr ; "missing rsa encrypting cert"
		dd 140000AAh
		dd offset aMissingRsaSign ; "missing rsa signing cert"
		dd 14000166h
		dd offset aCanTFindSrpSer ; "can't find SRP server param"
		dd 140000ABh
		dd offset aMissingTmpDhKe ; "missing tmp dh key"
		dd 14000137h
		dd offset aMissingTmpEcdh ; "missing tmp ecdh key"
		dd 140000ACh
		dd offset aMissingTmpRsaK ; "missing tmp rsa key"
		dd 140000ADh
		dd offset aMissingTmpRsaP ; "missing tmp rsa pkey"
		dd 140000AEh
		dd offset aMissingVerifyM ; "missing verify message"
		dd 1400015Ah
		dd offset aMultipleSgcRes ; "multiple sgc restarts"
		dd 140000AFh
		dd offset aNonSslv2Initia ; "non sslv2 initial packet"
		dd 140000B0h
		dd offset aNoCertificates ; "no	certificates returned"
		dd 140000B1h
		dd offset aNoCertificateA ; "no	certificate assigned"
		dd 140000B2h
		dd offset aNoCertificateR ; "no	certificate returned"
		dd 140000B3h
		dd offset aNoCertificateS ; "no	certificate set"
		dd 140000B4h
		dd offset aNoCertificat_0 ; "no	certificate specified"
		dd 140000B5h
		dd offset aNoCiphersAvail ; "no	ciphers	available"
		dd 140000B6h
		dd offset aNoCiphersPasse ; "no	ciphers	passed"
		dd 140000B7h
		dd offset aNoCiphersSpeci ; "no	ciphers	specified"
		dd 140000B8h
		dd offset aNoCipherList	; "no cipher list"
		dd 140000B9h
		dd offset aNoCipherMatch ; "no cipher match"
		dd 1400014Bh
		dd offset aNoClientCertMe ; "no	client cert method"
		dd 140000BAh
		dd offset aNoClientCertRe ; "no	client cert received"
		dd 140000BBh
		dd offset aNoCompressionS ; "no	compression specified"
		dd 1400014Ah
		dd offset aPeerHavenTSent ; "Peer haven't sent GOST certificate, req"...
		dd 140000BCh
		dd offset aNoMethodSpecif ; "no	method specified"
		dd 140000BDh
		dd offset aNoPrivatekey	; "no privatekey"
		dd 140000BEh
		dd offset aNoPrivateKeyAs ; "no	private	key assigned"
		dd 140000BFh
		dd offset aNoProtocolsAva ; "no	protocols available"
		dd 140000C0h
		dd offset aNoPublickey	; "no publickey"
		dd 14000153h
		dd offset aNoRenegotiatio ; "no	renegotiation"
		dd 14000144h
		dd offset aDigestRequredF ; "digest requred for	handshake isn't comp"...
		dd 140000C1h
		dd offset aNoSharedCipher ; "no	shared cipher"
		dd 14000167h
		dd offset aNoSrtpProfiles ; "no	srtp profiles"
		dd 140000C2h
		dd offset aNoVerifyCallba ; "no	verify callback"
		dd 140000C3h
		dd offset aNullSslCtx	; "null	ssl ctx"
		dd 140000C4h
		dd offset aNullSslMethodP ; "null ssl method passed"
		dd 140000C5h
		dd offset aOldSessionCiph ; "old session cipher	not returned"
		dd 14000158h
		dd offset aOldSessionComp ; "old session compression algorithm not r"...
		dd 14000129h
		dd offset aOnlyTlsAllowed ; "only tls allowed in fips mode"
		dd 14000147h
		dd offset aOpaquePrfInput ; "opaque PRF	input too long"
		dd 140000C6h
		dd offset aPacketLengthTo ; "packet length too long"
		dd 140000E3h
		dd offset aParseTlsext	; "parse tlsext"
		dd 1400010Eh
		dd offset aPathTooLong	; "path	too long"
		dd 140000C7h
		dd offset aPeerDidNotRetu ; "peer did not return a certificate"
		dd 140000C8h
		dd offset aPeerError	; "peer	error"
		dd 140000C9h
		dd offset aPeerErrorCerti ; "peer error	certificate"
		dd 140000CAh
		dd offset aPeerErrorNoCer ; "peer error	no certificate"
		dd 140000CBh
		dd offset aPeerErrorNoCip ; "peer error	no cipher"
		dd 140000CCh
		dd offset aPeerErrorUnsup ; "peer error	unsupported certificate	type"
		dd 140000CDh
		dd offset aPreMacLengthTo ; "pre mac length too	long"
		dd 140000CEh
		dd offset aProblemsMappin ; "problems mapping cipher functions"
		dd 140000CFh
		dd offset aProtocolIsShut ; "protocol is shutdown"
		dd 140000DFh
		dd offset aPskIdentityNot ; "psk identity not found"
		dd 140000E0h
		dd offset aPskNoClientCb ; "psk	no client cb"
		dd 140000E1h
		dd offset aPskNoServerCb ; "psk	no server cb"
		dd 140000D0h
		dd offset aPublicKeyEncry ; "public key	encrypt	error"
		dd 140000D1h
		dd offset aPublicKeyIsNot ; "public key	is not rsa"
		dd 140000D2h
		dd offset aPublicKeyNotRs ; "public key	not rsa"
		dd 140000D3h
		dd offset aReadBioNotSet ; "read bio not set"
		dd 14000138h
		dd offset aReadTimeoutExp ; "read timeout expired"
		dd 140000D4h
		dd offset aReadWrongPacke ; "read wrong	packet type"
		dd 140000D5h
		dd offset aRecordLengthMi ; "record length mismatch"
		dd 140000D6h
		dd offset aRecordTooLarge ; "record too	large"
		dd 1400012Ah
		dd offset aRecordTooSmall ; "record too	small"
		dd 1400014Fh
		dd offset aRenegotiateExt ; "renegotiate ext too long"
		dd 14000150h
		dd offset aRenegotiationE ; "renegotiation encoding err"
		dd 14000151h
		dd offset aRenegotiationM ; "renegotiation mismatch"
		dd 140000D7h
		dd offset aRequiredCipher ; "required cipher missing"
		dd 14000156h
		dd offset aRequiredCompre ; "required compresssion algorithm missing"
		dd 140000D8h
		dd offset aReuseCertLengt ; "reuse cert	length not zero"
		dd 140000D9h
		dd offset aReuseCertTypeN ; "reuse cert	type not zero"
		dd 140000DAh
		dd offset aReuseCipherLis ; "reuse cipher list not zero"
		dd 14000159h
		dd offset aScsvReceivedWh ; "scsv received when	renegotiating"
		dd 14000113h
		dd offset aServerhelloTls ; "serverhello tlsext"
		dd 14000115h
		dd offset aSessionIdConte ; "session id	context	uninitialized"
		dd 140000DBh
		dd offset aShortRead	; "short read"
		dd 14000168h
		dd offset aSignatureAlgor ; "signature algorithms error"
		dd 140000DCh
		dd offset aSignatureForNo ; "signature for non signing certificate"
		dd 14000169h
		dd offset aErrorWithTheSr ; "error with	the srp	params"
		dd 1400016Ah
		dd offset aSrtpCouldNotAl ; "srtp could	not allocate profiles"
		dd 1400016Bh
		dd offset aSrtpProtection ; "srtp protection profile list too long"
		dd 1400016Ch
		dd offset aSrtpUnknownPro ; "srtp unknown protection profile"
		dd 140000DDh
		dd offset aSsl23DoingSess ; "ssl23 doing session id reuse"
		dd 1400012Bh
		dd offset aSsl2Connection ; "ssl2 connection id	too long"
		dd 14000141h
		dd offset aSsl3ExtInvalid ; "ssl3 ext invalid ecpointformat"
		dd 1400013Fh
		dd offset aSsl3ExtInval_0 ; "ssl3 ext invalid servername"
		dd 14000140h
		dd offset aSsl3ExtInval_1 ; "ssl3 ext invalid servername type"
		dd 1400012Ch
		dd offset aSsl3SessionIdT ; "ssl3 session id too long"
		dd 140000DEh
		dd offset aSsl3SessionI_0 ; "ssl3 session id too short"
		dd 14000412h
		dd offset aSslv3AlertBadC ; "sslv3 alert bad certificate"
		dd 140003FCh
		dd offset aSslv3AlertBadR ; "sslv3 alert bad record mac"
		dd 14000415h
		dd offset aSslv3AlertCert ; "sslv3 alert certificate expired"
		dd 14000414h
		dd offset aSslv3AlertCe_0 ; "sslv3 alert certificate revoked"
		dd 14000416h
		dd offset aSslv3AlertCe_1 ; "sslv3 alert certificate unknown"
		dd 14000406h
		dd offset aSslv3AlertDeco ; "sslv3 alert decompression failure"
		dd 14000410h
		dd offset aSslv3AlertHand ; "sslv3 alert handshake failure"
		dd 14000417h
		dd offset aSslv3AlertIlle ; "sslv3 alert illegal parameter"
		dd 14000411h
		dd offset aSslv3AlertNoCe ; "sslv3 alert no certificate"
		dd 140003F2h
		dd offset aSslv3AlertUnex ; "sslv3 alert unexpected message"
		dd 14000413h
		dd offset aSslv3AlertUnsu ; "sslv3 alert unsupported certificate"
		dd 140000E4h
		dd offset aSslCtxHasNoDef ; "ssl ctx has no default ssl	version"
		dd 140000E5h
		dd offset aSslHandshakeFa ; "ssl handshake failure"
		dd 140000E6h
		dd offset aSslLibraryHasN ; "ssl library has no	ciphers"
		dd 1400012Dh
		dd offset aSslSessionIdCa ; "ssl session id callback failed"
		dd 1400012Eh
		dd offset aSslSessionIdCo ; "ssl session id conflict"
		dd 14000111h
		dd offset aSslSessionId_0 ; "ssl session id context too	long"
		dd 1400012Fh
		dd offset aSslSessionIdHa ; "ssl session id has	bad length"
		dd 140000E7h
		dd offset aSslSessionIdIs ; "ssl session id is different"
		dd 14000419h
		dd offset aTlsv1AlertAcce ; "tlsv1 alert access	denied"
		dd 1400041Ah
		dd offset aTlsv1AlertDeco ; "tlsv1 alert decode	error"
		dd 140003FDh
		dd offset aTlsv1AlertDecr ; "tlsv1 alert decryption failed"
		dd 1400041Bh
		dd offset aTlsv1AlertDe_0 ; "tlsv1 alert decrypt error"
		dd 14000424h
		dd offset aTlsv1AlertExpo ; "tlsv1 alert export	restriction"
		dd 1400043Eh
		dd offset aTlsv1AlertInap ; "tlsv1 alert inappropriate fallback"
		dd 1400042Fh
		dd offset aTlsv1AlertInsu ; "tlsv1 alert insufficient security"
		dd 14000438h
		dd offset aTlsv1AlertInte ; "tlsv1 alert internal error"
		dd 1400044Ch
		dd offset aTlsv1AlertNoRe ; "tlsv1 alert no renegotiation"
		dd 1400042Eh
		dd offset aTlsv1AlertProt ; "tlsv1 alert protocol version"
		dd 140003FEh
		dd offset aTlsv1AlertReco ; "tlsv1 alert record	overflow"
		dd 14000418h
		dd offset aTlsv1AlertUnkn ; "tlsv1 alert unknown ca"
		dd 14000442h
		dd offset aTlsv1AlertUser ; "tlsv1 alert user cancelled"
		dd 1400045Ah
		dd offset aTlsv1BadCertif ; "tlsv1 bad certificate hash	value"
		dd 14000459h
		dd offset aTlsv1BadCert_0 ; "tlsv1 bad certificate status response"
		dd 14000457h
		dd offset aTlsv1Certifica ; "tlsv1 certificate unobtainable"
		dd 14000458h
		dd offset aTlsv1Unrecogni ; "tlsv1 unrecognized	name"
		dd 14000456h
		dd offset aTlsv1Unsupport ; "tlsv1 unsupported extension"
		dd 140000E8h
		dd offset aTlsClientCertR ; "tls client	cert req with anon cipher"
		dd 1400016Dh
		dd offset aPeerDoesNotAcc ; "peer does not accept heartbeats"
		dd 1400016Eh
		dd offset aHeartbeatReque ; "heartbeat request already pending"
		dd 1400016Fh
		dd offset aTlsIllegalExpo ; "tls illegal exporter label"
		dd 1400009Dh
		dd offset aTlsInvalidEcpo ; "tls invalid ecpointformat list"
		dd 140000E9h
		dd offset aTlsPeerDidNotR ; "tls peer did not respond with certifica"...
		dd 140000EAh
		dd offset aTlsRsaEncrypte ; "tls rsa encrypted value length is wrong"
		dd 140000EBh
		dd offset aTriedToUseUnsu ; "tried to use unsupported cipher"
		dd 140000ECh
		dd offset aUnableToDecode ; "unable to decode dh certs"
		dd 14000139h
		dd offset aUnableToDeco_0 ; "unable to decode ecdh certs"
		dd 140000EDh
		dd offset aUnableToExtrac ; "unable to extract public key"
		dd 140000EEh
		dd offset aUnableToFindDh ; "unable to find dh parameters"
		dd 1400013Ah
		dd offset aUnableToFindEc ; "unable to find ecdh parameters"
		dd 140000EFh
		dd offset aUnableToFindPu ; "unable to find public key parameters"
		dd 140000F0h
		dd offset aUnableToFindSs ; "unable to find ssl	method"
		dd 140000F1h
		dd offset aUnableToLoadSs ; "unable to load ssl2 md5 routines"
		dd 140000F2h
		dd offset aUnableToLoad_0 ; "unable to load ssl3 md5 routines"
		dd 140000F3h
		dd offset aUnableToLoad_1 ; "unable to load ssl3 sha1 routines"
		dd 140000F4h
		dd offset aUnexpectedMess ; "unexpected	message"
		dd 140000F5h
		dd offset aUnexpectedReco ; "unexpected	record"
		dd 14000114h
		dd offset aUninitialized ; "uninitialized"
		dd 140000F6h
		dd offset aUnknownAlertTy ; "unknown alert type"
		dd 140000F7h
		dd offset aUnknownCertifi ; "unknown certificate type"
		dd 140000F8h
		dd offset aUnknownCipherR ; "unknown cipher returned"
		dd 140000F9h
		dd offset aUnknownCipherT ; "unknown cipher type"
		dd 14000170h
		dd offset aUnknownDigest ; "unknown digest"
		dd 140000FAh
		dd offset aUnknownKeyExch ; "unknown key exchange type"
		dd 140000FBh
		dd offset aUnknownPkeyTyp ; "unknown pkey type"
		dd 140000FCh
		dd offset aUnknownProtoco ; "unknown protocol"
		dd 140000FDh
		dd offset aUnknownRemoteE ; "unknown remote error type"
		dd 140000FEh
		dd offset aUnknownSslVers ; "unknown ssl version"
		dd 140000FFh
		dd offset aUnknownState_0 ; "unknown state"
		dd 14000152h
		dd offset aUnsafeLegacyRe ; "unsafe legacy renegotiation disabled"
		dd 14000100h
		dd offset aUnsupportedCip ; "unsupported cipher"
		dd 14000101h
		dd offset aUnsupportedCom ; "unsupported compression algorithm"
		dd 14000146h
		dd offset aUnsupportedDig ; "unsupported digest	type"
		dd 1400013Bh
		dd offset aUnsupportedEll ; "unsupported elliptic curve"
		dd 14000102h
		dd offset aUnsupportedPro ; "unsupported protocol"
		dd 14000103h
		dd offset aUnsupportedSsl ; "unsupported ssl version"
		dd 14000149h
		dd offset aUnsupportedSta ; "unsupported status	type"
		dd 14000171h
		dd offset aUseSrtpNotNego ; "use srtp not negotiated"
		dd 14000104h
		dd offset aWriteBioNotSet ; "write bio not set"
		dd 14000105h
		dd offset aWrongCipherRet ; "wrong cipher returned"
		dd 14000106h
		dd offset aWrongMessageTy ; "wrong message type"
		dd 14000107h
		dd offset aWrongNumberOfK ; "wrong number of key bits"
		dd 14000108h
		dd offset aWrongSignature ; "wrong signature length"
		dd 14000109h
		dd offset aWrongSignatu_0 ; "wrong signature size"
		dd 14000172h
		dd offset aWrongSignatu_1 ; "wrong signature type"
		dd 1400010Ah
		dd offset aWrongSslVersio ; "wrong ssl version"
		dd 1400010Bh
		dd offset aWrongVersionNu ; "wrong version number"
		dd 1400010Ch
		dd offset aX509Lib	; "x509	lib"
		dd 1400010Dh
		dd offset aX509Verificati ; "x509 verification setup problems"
		align 20h
dword_6E44A420	dd 14064000h		; DATA XREF: ERR_load_SSL_strings+3r
					; ERR_load_SSL_strings:loc_6E444620o
		dd offset aClient_certifi ; "CLIENT_CERTIFICATE"
		dd 140A7000h
		dd offset aClient_finishe ; "CLIENT_FINISHED"
		dd 14065000h
		dd offset aClient_hello	; "CLIENT_HELLO"
		dd 14066000h
		dd offset aClient_master_ ; "CLIENT_MASTER_KEY"
		dd 14067000h
		dd offset aD2i_ssl_sessio ; "d2i_SSL_SESSION"
		dd 140F5000h
		dd offset aDo_dtls1_write ; "DO_DTLS1_WRITE"
		dd 14068000h
		dd offset aDo_ssl3_write ; "DO_SSL3_WRITE"
		dd 140F6000h
		dd offset aDtls1_accept	; "DTLS1_ACCEPT"
		dd 14127000h
		dd offset aDtls1_add_cert ; "DTLS1_ADD_CERT_TO_BUF"
		dd 140F7000h
		dd offset aDtls1_buffer_r ; "DTLS1_BUFFER_RECORD"
		dd 1413C000h
		dd offset aDtls1_check_ti ; "DTLS1_CHECK_TIMEOUT_NUM"
		dd 140F8000h
		dd offset aDtls1_client_h ; "DTLS1_CLIENT_HELLO"
		dd 140F9000h
		dd offset aDtls1_connect ; "DTLS1_CONNECT"
		dd 140FA000h
		dd offset aDtls1_enc	; "DTLS1_ENC"
		dd 140FB000h
		dd offset aDtls1_get_hell ; "DTLS1_GET_HELLO_VERIFY"
		dd 140FC000h
		dd offset aDtls1_get_mess ; "DTLS1_GET_MESSAGE"
		dd 140FD000h
		dd offset aDtls1_get_me_0 ; "DTLS1_GET_MESSAGE_FRAGMENT"
		dd 140FE000h
		dd offset aDtls1_get_reco ; "DTLS1_GET_RECORD"
		dd 14129000h
		dd offset aDtls1_handle_t ; "DTLS1_HANDLE_TIMEOUT"
		dd 14131000h
		dd offset aDtls1_heartbea ; "DTLS1_HEARTBEAT"
		dd 140FF000h
		dd offset aDtls1_output_c ; "DTLS1_OUTPUT_CERT_CHAIN"
		dd 14120000h
		dd offset aDtls1_preproce ; "DTLS1_PREPROCESS_FRAGMENT"
		dd 14100000h
		dd offset aDtls1_process_ ; "DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE"
		dd 14101000h
		dd offset aDtls1_proces_0 ; "DTLS1_PROCESS_RECORD"
		dd 14102000h
		dd offset aDtls1_read_byt ; "DTLS1_READ_BYTES"
		dd 14103000h
		dd offset aDtls1_read_fai ; "DTLS1_READ_FAILED"
		dd 14104000h
		dd offset aDtls1_send_cer ; "DTLS1_SEND_CERTIFICATE_REQUEST"
		dd 14105000h
		dd offset aDtls1_send_cli ; "DTLS1_SEND_CLIENT_CERTIFICATE"
		dd 14106000h
		dd offset aDtls1_send_c_0 ; "DTLS1_SEND_CLIENT_KEY_EXCHANGE"
		dd 14107000h
		dd offset aDtls1_send_c_1 ; "DTLS1_SEND_CLIENT_VERIFY"
		dd 14108000h
		dd offset aDtls1_send_hel ; "DTLS1_SEND_HELLO_VERIFY_REQUEST"
		dd 14109000h
		dd offset aDtls1_send_ser ; "DTLS1_SEND_SERVER_CERTIFICATE"
		dd 1410A000h
		dd offset aDtls1_send_s_0 ; "DTLS1_SEND_SERVER_HELLO"
		dd 1410B000h
		dd offset aDtls1_send_s_1 ; "DTLS1_SEND_SERVER_KEY_EXCHANGE"
		dd 1410C000h
		dd offset aDtls1_write_ap ; "DTLS1_WRITE_APP_DATA_BYTES"
		dd 14069000h
		dd offset aGet_client_fin ; "GET_CLIENT_FINISHED"
		dd 1406A000h
		dd offset aGet_client_hel ; "GET_CLIENT_HELLO"
		dd 1406B000h
		dd offset aGet_client_mas ; "GET_CLIENT_MASTER_KEY"
		dd 1406C000h
		dd offset aGet_server_fin ; "GET_SERVER_FINISHED"
		dd 1406D000h
		dd offset aGet_server_hel ; "GET_SERVER_HELLO"
		dd 1406E000h
		dd offset aGet_server_ver ; "GET_SERVER_VERIFY"
		dd 1406F000h
		dd offset aI2d_ssl_sessio ; "i2d_SSL_SESSION"
		dd 14070000h
		dd offset aRead_n	; "READ_N"
		dd 14071000h
		dd offset aRequest_certif ; "REQUEST_CERTIFICATE"
		dd 140EF000h
		dd offset aServer_finish ; "SERVER_FINISH"
		dd 14072000h
		dd offset aServer_hello	; "SERVER_HELLO"
		dd 140F0000h
		dd offset aServer_verify ; "SERVER_VERIFY"
		dd 14073000h
		dd offset aSsl23_accept	; "SSL23_ACCEPT"
		dd 14074000h
		dd offset aSsl23_client_h ; "SSL23_CLIENT_HELLO"
		dd 14075000h
		dd offset aSsl23_connect ; "SSL23_CONNECT"
		dd 14076000h
		dd offset aSsl23_get_clie ; "SSL23_GET_CLIENT_HELLO"
		dd 14077000h
		dd offset aSsl23_get_serv ; "SSL23_GET_SERVER_HELLO"
		dd 140ED000h
		dd offset aSsl23_peek	; "SSL23_PEEK"
		dd 14078000h
		dd offset aSsl23_read	; "SSL23_READ"
		dd 14079000h
		dd offset aSsl23_write	; "SSL23_WRITE"
		dd 1407A000h
		dd offset aSsl2_accept	; "SSL2_ACCEPT"
		dd 1407B000h
		dd offset aSsl2_connect	; "SSL2_CONNECT"
		dd 1407C000h
		dd offset aSsl2_enc_init ; "SSL2_ENC_INIT"
		dd 140F1000h
		dd offset aSsl2_generate_ ; "SSL2_GENERATE_KEY_MATERIAL"
		dd 140EA000h
		dd offset aSsl2_peek	; "SSL2_PEEK"
		dd 1407D000h
		dd offset aSsl2_read	; "SSL2_READ"
		dd 140EC000h
		dd offset aSsl2_read_inte ; "SSL2_READ_INTERNAL"
		dd 1407E000h
		dd offset aSsl2_set_certi ; "SSL2_SET_CERTIFICATE"
		dd 1407F000h
		dd offset aSsl2_write	; "SSL2_WRITE"
		dd 14080000h
		dd offset aSsl3_accept	; "SSL3_ACCEPT"
		dd 14128000h
		dd offset aSsl3_add_cert_ ; "SSL3_ADD_CERT_TO_BUF"
		dd 140E9000h
		dd offset aSsl3_callback_ ; "SSL3_CALLBACK_CTRL"
		dd 14081000h
		dd offset aSsl3_change_ci ; "SSL3_CHANGE_CIPHER_STATE"
		dd 14082000h
		dd offset aSsl3_check_cer ; "SSL3_CHECK_CERT_AND_ALGORITHM"
		dd 14130000h
		dd offset aSsl3_check_cli ; "SSL3_CHECK_CLIENT_HELLO"
		dd 14083000h
		dd offset aSsl3_client_he ; "SSL3_CLIENT_HELLO"
		dd 14084000h
		dd offset aSsl3_connect	; "SSL3_CONNECT"
		dd 140D5000h
		dd offset aSsl3_ctrl	; "SSL3_CTRL"
		dd 14085000h
		dd offset aSsl3_ctx_ctrl ; "SSL3_CTX_CTRL"
		dd 14125000h
		dd offset aSsl3_digest_ca ; "SSL3_DIGEST_CACHED_RECORDS"
		dd 14124000h
		dd offset aSsl3_do_change ; "SSL3_DO_CHANGE_CIPHER_SPEC"
		dd 14086000h
		dd offset aSsl3_enc	; "SSL3_ENC"
		dd 14153000h
		dd offset aSsl3_check_fin ; "SSL3_CHECK_FINISHED"
		dd 140EE000h
		dd offset aSsl3_generate_ ; "SSL3_GENERATE_KEY_BLOCK"
		dd 14184000h
		dd offset aSsl3_generat_0 ; "ssl3_generate_master_secret"
		dd 14087000h
		dd offset aSsl3_get_certi ; "SSL3_GET_CERTIFICATE_REQUEST"
		dd 14121000h
		dd offset aSsl3_get_cert_ ; "SSL3_GET_CERT_STATUS"
		dd 14088000h
		dd offset aSsl3_get_cer_0 ; "SSL3_GET_CERT_VERIFY"
		dd 14089000h
		dd offset aSsl3_get_clien ; "SSL3_GET_CLIENT_CERTIFICATE"
		dd 1408A000h
		dd offset aSsl3_get_cli_0 ; "SSL3_GET_CLIENT_HELLO"
		dd 1408B000h
		dd offset aSsl3_get_cli_1 ; "SSL3_GET_CLIENT_KEY_EXCHANGE"
		dd 1408C000h
		dd offset aSsl3_get_finis ; "SSL3_GET_FINISHED"
		dd 1408D000h
		dd offset aSsl3_get_key_e ; "SSL3_GET_KEY_EXCHANGE"
		dd 1408E000h
		dd offset aSsl3_get_messa ; "SSL3_GET_MESSAGE"
		dd 1411B000h
		dd offset aSsl3_get_new_s ; "SSL3_GET_NEW_SESSION_TICKET"
		dd 14132000h
		dd offset aSsl3_get_next_ ; "SSL3_GET_NEXT_PROTO"
		dd 1408F000h
		dd offset aSsl3_get_recor ; "SSL3_GET_RECORD"
		dd 14090000h
		dd offset aSsl3_get_serve ; "SSL3_GET_SERVER_CERTIFICATE"
		dd 14091000h
		dd offset aSsl3_get_ser_0 ; "SSL3_GET_SERVER_DONE"
		dd 14092000h
		dd offset aSsl3_get_ser_1 ; "SSL3_GET_SERVER_HELLO"
		dd 1411D000h
		dd offset aSsl3_handshake ; "ssl3_handshake_mac"
		dd 1411F000h
		dd offset aSsl3_new_sessi ; "SSL3_NEW_SESSION_TICKET"
		dd 14093000h
		dd offset aSsl3_output_ce ; "SSL3_OUTPUT_CERT_CHAIN"
		dd 140EB000h
		dd offset aSsl3_peek	; "SSL3_PEEK"
		dd 14094000h
		dd offset aSsl3_read_byte ; "SSL3_READ_BYTES"
		dd 14095000h
		dd offset aSsl3_read_n	; "SSL3_READ_N"
		dd 14096000h
		dd offset aSsl3_send_cert ; "SSL3_SEND_CERTIFICATE_REQUEST"
		dd 14097000h
		dd offset aSsl3_send_clie ; "SSL3_SEND_CLIENT_CERTIFICATE"
		dd 14098000h
		dd offset aSsl3_send_cl_0 ; "SSL3_SEND_CLIENT_KEY_EXCHANGE"
		dd 14099000h
		dd offset aSsl3_send_cl_1 ; "SSL3_SEND_CLIENT_VERIFY"
		dd 1409A000h
		dd offset aSsl3_send_serv ; "SSL3_SEND_SERVER_CERTIFICATE"
		dd 140F2000h
		dd offset aSsl3_send_se_0 ; "SSL3_SEND_SERVER_HELLO"
		dd 1409B000h
		dd offset aSsl3_send_se_1 ; "SSL3_SEND_SERVER_KEY_EXCHANGE"
		dd 1409D000h
		dd offset aSsl3_setup_key ; "SSL3_SETUP_KEY_BLOCK"
		dd 1409C000h
		dd offset aSsl3_setup_rea ; "SSL3_SETUP_READ_BUFFER"
		dd 14123000h
		dd offset aSsl3_setup_wri ; "SSL3_SETUP_WRITE_BUFFER"
		dd 1409E000h
		dd offset aSsl3_write_byt ; "SSL3_WRITE_BYTES"
		dd 1409F000h
		dd offset aSsl3_write_pen ; "SSL3_WRITE_PENDING"
		dd 1412A000h
		dd offset aSsl_add_client ; "SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT"
		dd 14115000h
		dd offset aSsl_add_clie_0 ; "SSL_ADD_CLIENTHELLO_TLSEXT"
		dd 14133000h
		dd offset aSsl_add_clie_1 ; "SSL_ADD_CLIENTHELLO_USE_SRTP_EXT"
		dd 140D7000h
		dd offset aSsl_add_dir_ce ; "SSL_add_dir_cert_subjects_to_stack"
		dd 140D8000h
		dd offset aSsl_add_file_c ; "SSL_add_file_cert_subjects_to_stack"
		dd 1412B000h
		dd offset aSsl_add_server ; "SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT"
		dd 14116000h
		dd offset aSsl_add_serv_0 ; "SSL_ADD_SERVERHELLO_TLSEXT"
		dd 14134000h
		dd offset aSsl_add_serv_1 ; "SSL_ADD_SERVERHELLO_USE_SRTP_EXT"
		dd 140A0000h
		dd offset aSsl_bad_method ; "SSL_BAD_METHOD"
		dd 140A1000h
		dd offset aSsl_bytes_to_c ; "SSL_BYTES_TO_CIPHER_LIST"
		dd 140DD000h
		dd offset aSsl_cert_dup	; "SSL_CERT_DUP"
		dd 140DE000h
		dd offset aSsl_cert_inst ; "SSL_CERT_INST"
		dd 140D6000h
		dd offset aSsl_cert_insta ; "SSL_CERT_INSTANTIATE"
		dd 140A2000h
		dd offset aSsl_cert_new	; "SSL_CERT_NEW"
		dd 140A3000h
		dd offset aSsl_check_priv ; "SSL_check_private_key"
		dd 14118000h
		dd offset aSsl_check_serv ; "SSL_CHECK_SERVERHELLO_TLSEXT"
		dd 14117000h
		dd offset aSsl_check_srvr ; "SSL_CHECK_SRVR_ECC_CERT_AND_ALG"
		dd 140E6000h
		dd offset aSsl_cipher_pro ; "SSL_CIPHER_PROCESS_RULESTR"
		dd 140E7000h
		dd offset aSsl_cipher_str ; "SSL_CIPHER_STRENGTH_SORT"
		dd 140A4000h
		dd offset aSsl_clear	; "SSL_clear"
		dd 140A5000h
		dd offset aSsl_comp_add_c ; "SSL_COMP_add_compression_method"
		dd 140A6000h
		dd offset aSsl_create_cip ; "SSL_CREATE_CIPHER_LIST"
		dd 140E8000h
		dd offset aSsl_ctrl	; "SSL_ctrl"
		dd 140A8000h
		dd offset aSsl_ctx_check_ ; "SSL_CTX_check_private_key"
		dd 14135000h
		dd offset aSsl_ctx_make_p ; "SSL_CTX_MAKE_PROFILES"
		dd 140A9000h
		dd offset aSsl_ctx_new	; "SSL_CTX_new"
		dd 1410D000h
		dd offset aSsl_ctx_set_ci ; "SSL_CTX_set_cipher_list"
		dd 14122000h
		dd offset aSsl_ctx_set_cl ; "SSL_CTX_set_client_cert_engine"
		dd 140E2000h
		dd offset aSsl_ctx_set_pu ; "SSL_CTX_set_purpose"
		dd 140DB000h
		dd offset aSsl_ctx_set_se ; "SSL_CTX_set_session_id_context"
		dd 140AA000h
		dd offset aSsl_ctx_set_ss ; "SSL_CTX_set_ssl_version"
		dd 140E5000h
		dd offset aSsl_ctx_set_tr ; "SSL_CTX_set_trust"
		dd 140AB000h
		dd offset aSsl_ctx_use_ce ; "SSL_CTX_use_certificate"
		dd 140AC000h
		dd offset aSsl_ctx_use__0 ; "SSL_CTX_use_certificate_ASN1"
		dd 140DC000h
		dd offset aSsl_ctx_use__1 ; "SSL_CTX_use_certificate_chain_file"
		dd 140AD000h
		dd offset aSsl_ctx_use__2 ; "SSL_CTX_use_certificate_file"
		dd 140AE000h
		dd offset aSsl_ctx_use_pr ; "SSL_CTX_use_PrivateKey"
		dd 140AF000h
		dd offset aSsl_ctx_use__3 ; "SSL_CTX_use_PrivateKey_ASN1"
		dd 140B0000h
		dd offset aSsl_ctx_use__4 ; "SSL_CTX_use_PrivateKey_file"
		dd 14110000h
		dd offset aSsl_ctx_use_ps ; "SSL_CTX_use_psk_identity_hint"
		dd 140B1000h
		dd offset aSsl_ctx_use_rs ; "SSL_CTX_use_RSAPrivateKey"
		dd 140B2000h
		dd offset aSsl_ctx_use__5 ; "SSL_CTX_use_RSAPrivateKey_ASN1"
		dd 140B3000h
		dd offset aSsl_ctx_use__6 ; "SSL_CTX_use_RSAPrivateKey_file"
		dd 140B4000h
		dd offset aSsl_do_handsha ; "SSL_do_handshake"
		dd 140B5000h
		dd offset aSsl_get_new_se ; "SSL_GET_NEW_SESSION"
		dd 140D9000h
		dd offset aSsl_get_prev_s ; "SSL_GET_PREV_SESSION"
		dd 140B6000h
		dd offset aSsl_get_server ; "SSL_GET_SERVER_SEND_CERT"
		dd 1413D000h
		dd offset aSsl_get_serv_0 ; "SSL_GET_SERVER_SEND_PKEY"
		dd 140B7000h
		dd offset aSsl_get_sign_p ; "SSL_GET_SIGN_PKEY"
		dd 140B8000h
		dd offset aSsl_init_wbio_ ; "SSL_INIT_WBIO_BUFFER"
		dd 140B9000h
		dd offset aSsl_load_clien ; "SSL_load_client_CA_file"
		dd 140BA000h
		dd offset aSsl_new	; "SSL_new"
		dd 1412C000h
		dd offset aSsl_parse_clie ; "SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT"
		dd 1412E000h
		dd offset aSsl_parse_cl_0 ; "SSL_PARSE_CLIENTHELLO_TLSEXT"
		dd 14136000h
		dd offset aSsl_parse_cl_1 ; "SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT"
		dd 1412D000h
		dd offset aSsl_parse_serv ; "SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT"
		dd 1412F000h
		dd offset aSsl_parse_se_0 ; "SSL_PARSE_SERVERHELLO_TLSEXT"
		dd 14137000h
		dd offset aSsl_parse_se_1 ; "SSL_PARSE_SERVERHELLO_USE_SRTP_EXT"
		dd 1410E000h
		dd offset aSsl_peek	; "SSL_peek"
		dd 14119000h
		dd offset aSsl_prepare_cl ; "SSL_PREPARE_CLIENTHELLO_TLSEXT"
		dd 1411A000h
		dd offset aSsl_prepare_se ; "SSL_PREPARE_SERVERHELLO_TLSEXT"
		dd 140DF000h
		dd offset aSsl_read	; "SSL_read"
		dd 140BB000h
		dd offset aSsl_rsa_privat ; "SSL_RSA_PRIVATE_DECRYPT"
		dd 140BC000h
		dd offset aSsl_rsa_public ; "SSL_RSA_PUBLIC_ENCRYPT"
		dd 1415C000h
		dd offset aSsl_session_du ; "ssl_session_dup"
		dd 140BD000h
		dd offset aSsl_session_ne ; "SSL_SESSION_new"
		dd 140BE000h
		dd offset aSsl_session_pr ; "SSL_SESSION_print_fp"
		dd 14138000h
		dd offset aSsl_session_se ; "SSL_SESSION_set1_id_context"
		dd 140E1000h
		dd offset aSsl_sess_cert_ ; "SSL_SESS_CERT_NEW"
		dd 140BF000h
		dd offset aSsl_set_cert	; "SSL_SET_CERT"
		dd 1410F000h
		dd offset aSsl_set_cipher ; "SSL_set_cipher_list"
		dd 140C0000h
		dd offset aSsl_set_fd	; "SSL_set_fd"
		dd 140C1000h
		dd offset aSsl_set_pkey	; "SSL_SET_PKEY"
		dd 140E3000h
		dd offset aSsl_set_purpos ; "SSL_set_purpose"
		dd 140C2000h
		dd offset aSsl_set_rfd	; "SSL_set_rfd"
		dd 140C3000h
		dd offset aSsl_set_sessio ; "SSL_set_session"
		dd 140DA000h
		dd offset aSsl_set_sess_0 ; "SSL_set_session_id_context"
		dd 14126000h
		dd offset aSsl_set_sess_1 ; "SSL_set_session_ticket_ext"
		dd 140E4000h
		dd offset aSsl_set_trust ; "SSL_set_trust"
		dd 140C4000h
		dd offset aSsl_set_wfd	; "SSL_set_wfd"
		dd 140E0000h
		dd offset aSsl_shutdown	; "SSL_shutdown"
		dd 14139000h
		dd offset aSsl_srp_ctx_in ; "SSL_SRP_CTX_init"
		dd 140F3000h
		dd offset aSsl_undefined_ ; "SSL_UNDEFINED_CONST_FUNCTION"
		dd 140C5000h
		dd offset aSsl_undefine_0 ; "SSL_UNDEFINED_FUNCTION"
		dd 140F4000h
		dd offset aSsl_undefine_1 ; "SSL_UNDEFINED_VOID_FUNCTION"
		dd 140C6000h
		dd offset aSsl_use_certif ; "SSL_use_certificate"
		dd 140C7000h
		dd offset aSsl_use_cert_0 ; "SSL_use_certificate_ASN1"
		dd 140C8000h
		dd offset aSsl_use_cert_1 ; "SSL_use_certificate_file"
		dd 140C9000h
		dd offset aSsl_use_privat ; "SSL_use_PrivateKey"
		dd 140CA000h
		dd offset aSsl_use_priv_0 ; "SSL_use_PrivateKey_ASN1"
		dd 140CB000h
		dd offset aSsl_use_priv_1 ; "SSL_use_PrivateKey_file"
		dd 14111000h
		dd offset aSsl_use_psk_id ; "SSL_use_psk_identity_hint"
		dd 140CC000h
		dd offset aSsl_use_rsapri ; "SSL_use_RSAPrivateKey"
		dd 140CD000h
		dd offset aSsl_use_rsap_0 ; "SSL_use_RSAPrivateKey_ASN1"
		dd 140CE000h
		dd offset aSsl_use_rsap_1 ; "SSL_use_RSAPrivateKey_file"
		dd 140CF000h
		dd offset aSsl_verify_cer ; "SSL_VERIFY_CERT_CHAIN"
		dd 140D0000h
		dd offset aSsl_write	; "SSL_write"
		dd 1411E000h
		dd offset aTls1_cert_veri ; "tls1_cert_verify_mac"
		dd 140D1000h
		dd offset aTls1_change_ci ; "TLS1_CHANGE_CIPHER_STATE"
		dd 14112000h
		dd offset aTls1_check_ser ; "TLS1_CHECK_SERVERHELLO_TLSEXT"
		dd 140D2000h
		dd offset aTls1_enc	; "TLS1_ENC"
		dd 1413A000h
		dd offset aTls1_export_ke ; "TLS1_EXPORT_KEYING_MATERIAL"
		dd 1413B000h
		dd offset aSsl_f_tls1_hea ; "SSL_F_TLS1_HEARTBEAT"
		dd 14113000h
		dd offset aTls1_prepare_c ; "TLS1_PREPARE_CLIENTHELLO_TLSEXT"
		dd 14114000h
		dd offset aTls1_prepare_s ; "TLS1_PREPARE_SERVERHELLO_TLSEXT"
		dd 1411C000h
		dd offset aTls1_prf	; "tls1_prf"
		dd 140D3000h
		dd offset aTls1_setup_key ; "TLS1_SETUP_KEY_BLOCK"
		dd 140D4000h
		dd offset aWrite_pending ; "WRITE_PENDING"
		align 20h
		dd 0FFFFFFFFh
dword_6E44AB24	dd 0FFFFFFFFh		; DATA XREF: sub_6E401260+11w
					; sub_6E401260:loc_6E4012B1w
off_6E44AB28	dd offset dword_6E447950 ; DATA	XREF: sub_6E446DF0:loc_6E4470C0r
					; sub_6E446DF0+2E2r ...
dword_6E44AB2C	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w
dword_6E44AB30	dd 0BB40E64Eh		; DATA XREF: sub_6E447160+9r
					; sub_6E447160:loc_6E4471ECw ...
dword_6E44AB34	dd 44BF19B1h		; DATA XREF: sub_6E447160+25w
					; sub_6E447160+92w ...
dword_6E44AB38	dd 0			; DATA XREF: sub_6E401460r
					; sub_6E401460+42o
		align 800h
_data		ends

; Section 3. (virtual address 0004B000)
; Virtual size			: 000086D0 (  34512.)
; Section size in file		: 00008800 (  34816.)
; Offset to raw	data for section: 00049A00
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 6E44B000h
; CHAR ModuleName[]
ModuleName	db 'libgcj-13.dll',0    ; DATA XREF: sub_6E401460+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_6E401460+28o
		align 20h
dword_6E44B040	dd 300h			; DATA XREF: sub_6E4014C0+Ao
					; SSLv3_methodo
		dd offset sub_6E40E430
		dd offset sub_6E40E640
		dd offset sub_6E40E530
		dd offset sub_6E406650
		dd offset sub_6E40D250
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E4014C0
		dd offset sub_6E40E3B0
		dd offset off_6E448000
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
aS3_srvr_c	db 's3_srvr.c',0        ; DATA XREF: sub_6E401570+C8o
					; sub_6E401670+BDo ...
; char Format[]
Format		db 'GOST signature length is %d',0 ; DATA XREF: sub_6E404D90+49Bo
		align 20h
dword_6E44B100	dd 300h			; DATA XREF: sub_6E4014F0+Ao
					; SSLv3_server_methodo
		dd offset sub_6E40E430
		dd offset sub_6E40E640
		dd offset sub_6E40E530
		dd offset sub_6E406650
		dd offset sub_6E42FF90
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E4014F0
		dd offset sub_6E40E3B0
		dd offset off_6E448000
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
aS3_clnt_c	db 's3_clnt.c',0        ; DATA XREF: sub_6E407680:loc_6E4079EEo
					; sub_6E407680+41Ao ...
		align 20h
dword_6E44B1A0	dd 300h			; DATA XREF: sub_6E407630+Ao
					; SSLv3_client_methodo
		dd offset sub_6E40E430
		dd offset sub_6E40E640
		dd offset sub_6E40E530
		dd offset sub_6E42FF90
		dd offset sub_6E40D250
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E407630
		dd offset sub_6E40E3B0
		dd offset off_6E448000
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
aS3_lib_c	db 's3_lib.c',0         ; DATA XREF: sub_6E40E430+12o
					; sub_6E40E840+5Ao ...
		align 4
off_6E44B22C	dd offset loc_6E40E8D0,	offset loc_6E40E980, offset loc_6E40E930
					; DATA XREF: sub_6E40E840+2Cr
		dd offset loc_6E40EB50,	offset loc_6E40EA40, offset loc_6E40EA00 ; jump	table for switch statement
		dd offset loc_6E40E9C0,	offset loc_6E40EB40, offset loc_6E40EC90
		dd offset loc_6E40E8D0,	offset loc_6E40EC80, offset loc_6E40EC60
		dd offset loc_6E40EC50,	offset loc_6E40EC40, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40EBB0, offset loc_6E40E8D0
		dd offset loc_6E40EBA0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E920
		dd offset loc_6E40EAD0,	offset loc_6E40EAC0, offset loc_6E40EAA0
		dd offset loc_6E40EA90,	offset loc_6E40EB20, offset loc_6E40EAF0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8E0, offset loc_6E40EA30
		dd offset loc_6E40EA10,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40E8D0
		dd offset loc_6E40E8D0,	offset loc_6E40E8D0, offset loc_6E40ECA0
off_6E44B40C	dd offset loc_6E40F02B,	offset loc_6E40F020, offset loc_6E40F370
					; DATA XREF: sub_6E40EFD0+19r
		dd offset loc_6E40F330,	offset loc_6E40F3B0, offset loc_6E40F2A0 ; jump	table for switch statement
		dd offset loc_6E40F2E0,	offset loc_6E40F2F0, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F300
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F030,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F050, offset loc_6E40F050
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F170, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F02B,	offset loc_6E40F02B, offset loc_6E40F02B
		dd offset loc_6E40F190,	offset loc_6E40F1B0, offset loc_6E40F240
		dd offset loc_6E40F260,	offset loc_6E40F280, offset loc_6E40EFF0
off_6E44B55C	dd offset loc_6E40F810,	offset loc_6E40F820, offset loc_6E40F830
					; DATA XREF: sub_6E40F7C0+1Ar
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0 ; jump	table for switch statement
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F840,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F850, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F8B0, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F860, offset loc_6E40F8B0
		dd offset loc_6E40F8B0,	offset loc_6E40F870, offset loc_6E40F890
		dd offset loc_6E40F7F0
aClnt		db 'CLNT',0             ; DATA XREF: .data:6E448020o
aSrvr		db 'SRVR',0             ; DATA XREF: .data:6E448028o
aNullMd5	db 'NULL-MD5',0         ; DATA XREF: .data:6E448044o
aNullSha	db 'NULL-SHA',0         ; DATA XREF: .data:6E448074o
aRc4Md5		db 'RC4-MD5',0          ; DATA XREF: .data:6E4480A4o
aRc4Sha		db 'RC4-SHA',0          ; DATA XREF: .data:6E4480D4o
aIdeaCbcSha	db 'IDEA-CBC-SHA',0     ; DATA XREF: .data:6E448104o
aDesCbc3Sha	db 'DES-CBC3-SHA',0     ; DATA XREF: .data:6E448134o
aDhDssDesCbc3Sh	db 'DH-DSS-DES-CBC3-SHA',0 ; DATA XREF: .data:6E448164o
aDhRsaDesCbc3Sh	db 'DH-RSA-DES-CBC3-SHA',0 ; DATA XREF: .data:6E448194o
aEdhDssDesCbc3S	db 'EDH-DSS-DES-CBC3-SHA',0 ; DATA XREF: .data:6E4481C4o
aEdhRsaDesCbc3S	db 'EDH-RSA-DES-CBC3-SHA',0 ; DATA XREF: .data:6E4481F4o
aAdhRc4Md5	db 'ADH-RC4-MD5',0      ; DATA XREF: .data:6E448224o
aAdhDesCbc3Sha	db 'ADH-DES-CBC3-SHA',0 ; DATA XREF: .data:6E448254o
aAes128Sha	db 'AES128-SHA',0       ; DATA XREF: .data:6E448284o
aDhDssAes128Sha	db 'DH-DSS-AES128-SHA',0 ; DATA XREF: .data:6E4482B4o
aDhRsaAes128Sha	db 'DH-RSA-AES128-SHA',0 ; DATA XREF: .data:6E4482E4o
aDheDssAes128Sh	db 'DHE-DSS-AES128-SHA',0 ; DATA XREF: .data:6E448314o
aDheRsaAes128Sh	db 'DHE-RSA-AES128-SHA',0 ; DATA XREF: .data:6E448344o
aAdhAes128Sha	db 'ADH-AES128-SHA',0   ; DATA XREF: .data:6E448374o
aAes256Sha	db 'AES256-SHA',0       ; DATA XREF: .data:6E4483A4o
aDhDssAes256Sha	db 'DH-DSS-AES256-SHA',0 ; DATA XREF: .data:6E4483D4o
aDhRsaAes256Sha	db 'DH-RSA-AES256-SHA',0 ; DATA XREF: .data:6E448404o
aDheDssAes256Sh	db 'DHE-DSS-AES256-SHA',0 ; DATA XREF: .data:6E448434o
aDheRsaAes256Sh	db 'DHE-RSA-AES256-SHA',0 ; DATA XREF: .data:6E448464o
aAdhAes256Sha	db 'ADH-AES256-SHA',0   ; DATA XREF: .data:6E448494o
aNullSha256	db 'NULL-SHA256',0      ; DATA XREF: .data:6E4484C4o
aAes128Sha256	db 'AES128-SHA256',0    ; DATA XREF: .data:6E4484F4o
aAes256Sha256	db 'AES256-SHA256',0    ; DATA XREF: .data:6E448524o
aDhDssAes128S_0	db 'DH-DSS-AES128-SHA256',0 ; DATA XREF: .data:6E448554o
aDhRsaAes128S_0	db 'DH-RSA-AES128-SHA256',0 ; DATA XREF: .data:6E448584o
aDheDssAes128_0	db 'DHE-DSS-AES128-SHA256',0 ; DATA XREF: .data:6E4485B4o
aCamellia128Sha	db 'CAMELLIA128-SHA',0  ; DATA XREF: .data:6E4485E4o
aDhDssCamellia1	db 'DH-DSS-CAMELLIA128-SHA',0 ; DATA XREF: .data:6E448614o
aDhRsaCamellia1	db 'DH-RSA-CAMELLIA128-SHA',0 ; DATA XREF: .data:6E448644o
aDheDssCamellia	db 'DHE-DSS-CAMELLIA128-SHA',0 ; DATA XREF: .data:6E448674o
aDheRsaCamellia	db 'DHE-RSA-CAMELLIA128-SHA',0 ; DATA XREF: .data:6E4486A4o
aAdhCamellia128	db 'ADH-CAMELLIA128-SHA',0 ; DATA XREF: .data:6E4486D4o
aDheRsaAes128_0	db 'DHE-RSA-AES128-SHA256',0 ; DATA XREF: .data:6E448704o
aDhDssAes256S_0	db 'DH-DSS-AES256-SHA256',0 ; DATA XREF: .data:6E448734o
aDhRsaAes256S_0	db 'DH-RSA-AES256-SHA256',0 ; DATA XREF: .data:6E448764o
aDheDssAes256_0	db 'DHE-DSS-AES256-SHA256',0 ; DATA XREF: .data:6E448794o
aDheRsaAes256_0	db 'DHE-RSA-AES256-SHA256',0 ; DATA XREF: .data:6E4487C4o
aAdhAes128Sha25	db 'ADH-AES128-SHA256',0 ; DATA XREF: .data:6E4487F4o
aAdhAes256Sha25	db 'ADH-AES256-SHA256',0 ; DATA XREF: .data:6E448824o
aGost94Gost89Go	db 'GOST94-GOST89-GOST89',0 ; DATA XREF: .data:6E448854o
aGost2001Gost89	db 'GOST2001-GOST89-GOST89',0 ; DATA XREF: .data:6E448884o
aGost94NullGost	db 'GOST94-NULL-GOST94',0 ; DATA XREF: .data:6E4488B4o
aGost2001NullGo	db 'GOST2001-NULL-GOST94',0 ; DATA XREF: .data:6E4488E4o
aCamellia256Sha	db 'CAMELLIA256-SHA',0  ; DATA XREF: .data:6E448914o
aDhDssCamellia2	db 'DH-DSS-CAMELLIA256-SHA',0 ; DATA XREF: .data:6E448944o
aDhRsaCamellia2	db 'DH-RSA-CAMELLIA256-SHA',0 ; DATA XREF: .data:6E448974o
aDheDssCamell_0	db 'DHE-DSS-CAMELLIA256-SHA',0 ; DATA XREF: .data:6E4489A4o
aDheRsaCamell_0	db 'DHE-RSA-CAMELLIA256-SHA',0 ; DATA XREF: .data:6E4489D4o
aAdhCamellia256	db 'ADH-CAMELLIA256-SHA',0 ; DATA XREF: .data:6E448A04o
aPskRc4Sha	db 'PSK-RC4-SHA',0      ; DATA XREF: .data:6E448A34o
aPsk3desEdeCbcS	db 'PSK-3DES-EDE-CBC-SHA',0 ; DATA XREF: .data:6E448A64o
aPskAes128CbcSh	db 'PSK-AES128-CBC-SHA',0 ; DATA XREF: .data:6E448A94o
aPskAes256CbcSh	db 'PSK-AES256-CBC-SHA',0 ; DATA XREF: .data:6E448AC4o
aSeedSha	db 'SEED-SHA',0         ; DATA XREF: .data:6E448AF4o
aDhDssSeedSha	db 'DH-DSS-SEED-SHA',0  ; DATA XREF: .data:6E448B24o
aDhRsaSeedSha	db 'DH-RSA-SEED-SHA',0  ; DATA XREF: .data:6E448B54o
aDheDssSeedSha	db 'DHE-DSS-SEED-SHA',0 ; DATA XREF: .data:6E448B84o
aDheRsaSeedSha	db 'DHE-RSA-SEED-SHA',0 ; DATA XREF: .data:6E448BB4o
aAdhSeedSha	db 'ADH-SEED-SHA',0     ; DATA XREF: .data:6E448BE4o
aAes128GcmSha25	db 'AES128-GCM-SHA256',0 ; DATA XREF: .data:6E448C14o
aAes256GcmSha38	db 'AES256-GCM-SHA384',0 ; DATA XREF: .data:6E448C44o
aDheRsaAes128Gc	db 'DHE-RSA-AES128-GCM-SHA256',0 ; DATA XREF: .data:6E448C74o
aDheRsaAes256Gc	db 'DHE-RSA-AES256-GCM-SHA384',0 ; DATA XREF: .data:6E448CA4o
aDhRsaAes128Gcm	db 'DH-RSA-AES128-GCM-SHA256',0 ; DATA XREF: .data:6E448CD4o
aDhRsaAes256Gcm	db 'DH-RSA-AES256-GCM-SHA384',0 ; DATA XREF: .data:6E448D04o
aDheDssAes128Gc	db 'DHE-DSS-AES128-GCM-SHA256',0 ; DATA XREF: .data:6E448D34o
aDheDssAes256Gc	db 'DHE-DSS-AES256-GCM-SHA384',0 ; DATA XREF: .data:6E448D64o
aDhDssAes128Gcm	db 'DH-DSS-AES128-GCM-SHA256',0 ; DATA XREF: .data:6E448D94o
aDhDssAes256Gcm	db 'DH-DSS-AES256-GCM-SHA384',0 ; DATA XREF: .data:6E448DC4o
aAdhAes128GcmSh	db 'ADH-AES128-GCM-SHA256',0 ; DATA XREF: .data:6E448DF4o
aAdhAes256GcmSh	db 'ADH-AES256-GCM-SHA384',0 ; DATA XREF: .data:6E448E24o
aEcdhEcdsaNullS	db 'ECDH-ECDSA-NULL-SHA',0 ; DATA XREF: .data:6E448E54o
aEcdhEcdsaRc4Sh	db 'ECDH-ECDSA-RC4-SHA',0 ; DATA XREF: .data:6E448E84o
aEcdhEcdsaDesCb	db 'ECDH-ECDSA-DES-CBC3-SHA',0 ; DATA XREF: .data:6E448EB4o
aEcdhEcdsaAes12	db 'ECDH-ECDSA-AES128-SHA',0 ; DATA XREF: .data:6E448EE4o
aEcdhEcdsaAes25	db 'ECDH-ECDSA-AES256-SHA',0 ; DATA XREF: .data:6E448F14o
aEcdheEcdsaNull	db 'ECDHE-ECDSA-NULL-SHA',0 ; DATA XREF: .data:6E448F44o
aEcdheEcdsaRc4S	db 'ECDHE-ECDSA-RC4-SHA',0 ; DATA XREF: .data:6E448F74o
aEcdheEcdsaDesC	db 'ECDHE-ECDSA-DES-CBC3-SHA',0 ; DATA XREF: .data:6E448FA4o
aEcdheEcdsaAes1	db 'ECDHE-ECDSA-AES128-SHA',0 ; DATA XREF: .data:6E448FD4o
aEcdheEcdsaAes2	db 'ECDHE-ECDSA-AES256-SHA',0 ; DATA XREF: .data:6E449004o
aEcdhRsaNullSha	db 'ECDH-RSA-NULL-SHA',0 ; DATA XREF: .data:6E449034o
aEcdhRsaRc4Sha	db 'ECDH-RSA-RC4-SHA',0 ; DATA XREF: .data:6E449064o
aEcdhRsaDesCbc3	db 'ECDH-RSA-DES-CBC3-SHA',0 ; DATA XREF: .data:6E449094o
aEcdhRsaAes128S	db 'ECDH-RSA-AES128-SHA',0 ; DATA XREF: .data:6E4490C4o
aEcdhRsaAes256S	db 'ECDH-RSA-AES256-SHA',0 ; DATA XREF: .data:6E4490F4o
aEcdheRsaNullSh	db 'ECDHE-RSA-NULL-SHA',0 ; DATA XREF: .data:6E449124o
aEcdheRsaRc4Sha	db 'ECDHE-RSA-RC4-SHA',0 ; DATA XREF: .data:6E449154o
aEcdheRsaDesCbc	db 'ECDHE-RSA-DES-CBC3-SHA',0 ; DATA XREF: .data:6E449184o
aEcdheRsaAes128	db 'ECDHE-RSA-AES128-SHA',0 ; DATA XREF: .data:6E4491B4o
aEcdheRsaAes256	db 'ECDHE-RSA-AES256-SHA',0 ; DATA XREF: .data:6E4491E4o
aAecdhNullSha	db 'AECDH-NULL-SHA',0   ; DATA XREF: .data:6E449214o
aAecdhRc4Sha	db 'AECDH-RC4-SHA',0    ; DATA XREF: .data:6E449244o
aAecdhDesCbc3Sh	db 'AECDH-DES-CBC3-SHA',0 ; DATA XREF: .data:6E449274o
aAecdhAes128Sha	db 'AECDH-AES128-SHA',0 ; DATA XREF: .data:6E4492A4o
aAecdhAes256Sha	db 'AECDH-AES256-SHA',0 ; DATA XREF: .data:6E4492D4o
aSrp3desEdeCbcS	db 'SRP-3DES-EDE-CBC-SHA',0 ; DATA XREF: .data:6E449304o
aSrpRsa3desEdeC	db 'SRP-RSA-3DES-EDE-CBC-SHA',0 ; DATA XREF: .data:6E449334o
aSrpDss3desEdeC	db 'SRP-DSS-3DES-EDE-CBC-SHA',0 ; DATA XREF: .data:6E449364o
aSrpAes128CbcSh	db 'SRP-AES-128-CBC-SHA',0 ; DATA XREF: .data:6E449394o
aSrpRsaAes128Cb	db 'SRP-RSA-AES-128-CBC-SHA',0 ; DATA XREF: .data:6E4493C4o
aSrpDssAes128Cb	db 'SRP-DSS-AES-128-CBC-SHA',0 ; DATA XREF: .data:6E4493F4o
aSrpAes256CbcSh	db 'SRP-AES-256-CBC-SHA',0 ; DATA XREF: .data:6E449424o
aSrpRsaAes256Cb	db 'SRP-RSA-AES-256-CBC-SHA',0 ; DATA XREF: .data:6E449454o
aSrpDssAes256Cb	db 'SRP-DSS-AES-256-CBC-SHA',0 ; DATA XREF: .data:6E449484o
aEcdheEcdsaAe_0	db 'ECDHE-ECDSA-AES128-SHA256',0 ; DATA XREF: .data:6E4494B4o
aEcdheEcdsaAe_1	db 'ECDHE-ECDSA-AES256-SHA384',0 ; DATA XREF: .data:6E4494E4o
aEcdhEcdsaAes_0	db 'ECDH-ECDSA-AES128-SHA256',0 ; DATA XREF: .data:6E449514o
aEcdhEcdsaAes_1	db 'ECDH-ECDSA-AES256-SHA384',0 ; DATA XREF: .data:6E449544o
aEcdheRsaAes1_0	db 'ECDHE-RSA-AES128-SHA256',0 ; DATA XREF: .data:6E449574o
aEcdheRsaAes2_0	db 'ECDHE-RSA-AES256-SHA384',0 ; DATA XREF: .data:6E4495A4o
aEcdhRsaAes12_0	db 'ECDH-RSA-AES128-SHA256',0 ; DATA XREF: .data:6E4495D4o
aEcdhRsaAes25_0	db 'ECDH-RSA-AES256-SHA384',0 ; DATA XREF: .data:6E449604o
aEcdheEcdsaAe_2	db 'ECDHE-ECDSA-AES128-GCM-SHA256',0 ; DATA XREF: .data:6E449634o
aEcdheEcdsaAe_3	db 'ECDHE-ECDSA-AES256-GCM-SHA384',0 ; DATA XREF: .data:6E449664o
aEcdhEcdsaAes_2	db 'ECDH-ECDSA-AES128-GCM-SHA256',0 ; DATA XREF: .data:6E449694o
aEcdhEcdsaAes_3	db 'ECDH-ECDSA-AES256-GCM-SHA384',0 ; DATA XREF: .data:6E4496C4o
aEcdheRsaAes1_1	db 'ECDHE-RSA-AES128-GCM-SHA256',0 ; DATA XREF: .data:6E4496F4o
aEcdheRsaAes2_1	db 'ECDHE-RSA-AES256-GCM-SHA384',0 ; DATA XREF: .data:6E449724o
aEcdhRsaAes128G	db 'ECDH-RSA-AES128-GCM-SHA256',0 ; DATA XREF: .data:6E449754o
aEcdhRsaAes256G	db 'ECDH-RSA-AES256-GCM-SHA384',0 ; DATA XREF: .data:6E449784o
		align 10h
aSslv3PartOfOpe	db 'SSLv3 part of OpenSSL 1.0.1s  1 Mar 2016',0
		align 20h
aM		db 'm',0                ; DATA XREF: sub_6E4106D0:loc_6E410D80o
aS3_enc_c	db 's3_enc.c',0         ; DATA XREF: sub_6E4106D0:loc_6E410A8Do
					; sub_6E4106D0+588o ...
		align 20h
byte_6E44C0E0	db 0			; DATA XREF: sub_6E412580+9r
		db 3 dup(0FFh)
		dd 0FFFFFFFFh, 0FF0AFFFFh, 2 dup(0FFFFFFFFh), 0FF141414h
		dd 0FFFFFFFFh, 0FF1EFFFFh, 2 dup(0FFFFFFFFh), 2B2A2928h
		dd 2F2E2D2Ch, 2828282Ah, 2 dup(0FFFFFFFFh), 0FFFFFF28h
		dd 0FFFFFFFFh, 2828FFFFh, 2 dup(0FFFFFFFFh), 0FFFFFF28h
		dd 0FF56FFFFh, 0FF28FFFFh, 4 dup(0FFFFFFFFh), 2828FFFFh
		dd 73282828h
dword_6E44C154	dd 42420041h, 43434300h, 0 ; DATA XREF:	.rdata:Stro
					; .rdata:6E44C164o ...
; char *Str
Str		dd offset dword_6E44C154 ; DATA	XREF: sub_6E412370+53r
		dd offset dword_6E44C154+2
		dd offset dword_6E44C154+5
		align 20h
aS3_pkt_c	db 's3_pkt.c',0         ; DATA XREF: sub_6E4125B0+258o
					; sub_6E4125B0+3F5o ...
aSS3WnumInt_max	db 's->s3->wnum <= INT_MAX',0 ; DATA XREF: sub_6E4132F0:loc_6E413968o
aMac_sizeEvp_ma	db 'mac_size <= EVP_MAX_MD_SIZE',0 ; DATA XREF: sub_6E413BF0:loc_6E414450o
aD		db '%d',0               ; DATA XREF: sub_6E413BF0+13B0o
aSslAlertNumber	db 'SSL alert number ',0 ; DATA XREF: sub_6E413BF0+13D3o
		align 10h
aIEvp_max_md_si	db 'i <= EVP_MAX_MD_SIZE',0 ; DATA XREF: sub_6E4158D0+2D4o
					; sub_6E4158D0+324o ...
aS3_both_c	db 's3_both.c',0        ; DATA XREF: sub_6E4158D0+2E4o
					; sub_6E4158D0+334o ...
		align 10h
byte_6E44C200	db 30h			; DATA XREF: sub_6E416A00+Cr
a033P0000000___	db '0***33*-*-****P00000,00+**....0................(',0
		align 10h
dword_6E44C240	dd 2 dup(0)		; DATA XREF: sub_6E4174B0+1BDo
		db 0
aOrig_lenMd_siz	db 'orig_len >= md_size',0 ; DATA XREF: sub_6E4176C0:loc_6E4178B0o
aS3_cbc_c	db 's3_cbc.c',0         ; DATA XREF: sub_6E4176C0+1D0o
					; sub_6E4176C0+200o ...
aMd_sizeEvp_max	db 'md_size <= EVP_MAX_MD_SIZE',0 ; DATA XREF: sub_6E4176C0:loc_6E417880o
		align 4
aData_plus_mac_	db 'data_plus_mac_plus_padding_size < 1024 * 1024',0
					; DATA XREF: sub_6E417930:loc_6E417C11o
a0		db '0',0                ; DATA XREF: sub_6E417930:loc_6E417F87o
aMac_secret_len	db 'mac_secret_length <= sizeof(hmac_pad)',0 ; DATA XREF: sub_6E417930+D71o
		align 10h
dword_6E44C2E0	dd 303h			; DATA XREF: SSLv23_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E4191D0
		dd offset sub_6E4194A0
		dd offset sub_6E41A560
		dd offset sub_6E41A630
		dd offset sub_6E41A700
		dd offset sub_6E42FF90
		dd offset sub_6E42FF90
		dd offset sub_6E4362A0
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E41A4E0
		dd offset sub_6E41A4F0
		dd offset sub_6E4356C0
		dd offset sub_6E41A4A0
		dd offset sub_6E41A4B0
		dd offset sub_6E418740
		dd offset sub_6E41A490
		dd offset off_6E4499E0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
aS23_srvr_c	db 's23_srvr.c',0       ; DATA XREF: sub_6E418840+80o
					; sub_6E418840+394o ...
aGet		db 'GET ',0             ; DATA XREF: sub_6E418840:loc_6E418C93o
aPost		db 'POST ',0            ; DATA XREF: sub_6E418840+467o
aHead		db 'HEAD ',0            ; DATA XREF: sub_6E418840+47Bo
aPut		db 'PUT ',0             ; DATA XREF: sub_6E418840+48Fo
aConnect	db 'CONNECT',0          ; DATA XREF: sub_6E418840+4A3o
aSVersionTls_ma	db 's->version <= TLS_MAX_VERSION',0 ; DATA XREF: sub_6E418840:loc_6E4188B0o
		align 20h
dword_6E44C3C0	dd 303h			; DATA XREF: SSLv23_server_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E4191D0
		dd offset sub_6E42FF90
		dd offset sub_6E41A560
		dd offset sub_6E41A630
		dd offset sub_6E41A700
		dd offset sub_6E42FF90
		dd offset sub_6E42FF90
		dd offset sub_6E4362A0
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E41A4E0
		dd offset sub_6E41A4F0
		dd offset sub_6E4356C0
		dd offset sub_6E41A4A0
		dd offset sub_6E41A4B0
		dd offset sub_6E4187C0
		dd offset sub_6E41A490
		dd offset off_6E4499E0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
aS23_clnt_c	db 's23_clnt.c',0       ; DATA XREF: sub_6E4194A0+BAo
					; sub_6E4194A0+893o ...
aSVersionTls__0	db 's->version <= TLS_MAX_VERSION',0 ; DATA XREF: sub_6E4194A0+CDBo
		align 20h
dword_6E44C480	dd 303h			; DATA XREF: SSLv23_client_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E42FF90
		dd offset sub_6E4194A0
		dd offset sub_6E41A560
		dd offset sub_6E41A630
		dd offset sub_6E41A700
		dd offset sub_6E42FF90
		dd offset sub_6E42FF90
		dd offset sub_6E4362A0
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E41A4E0
		dd offset sub_6E41A4F0
		dd offset sub_6E4356C0
		dd offset sub_6E41A4A0
		dd offset sub_6E41A4B0
		dd offset sub_6E419430
		dd offset sub_6E41A490
		dd offset off_6E4499E0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
aS23_lib_c	db 's23_lib.c',0        ; DATA XREF: sub_6E41A560+68o
					; sub_6E41A630+68o ...
		align 20h
dword_6E44C520	dd 301h			; DATA XREF: sub_6E41A8B0+19o
					; TLSv1_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E406650
		dd offset sub_6E40D250
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E41A8B0
		dd offset sub_6E41AE30
		dd offset off_6E4498C0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
dword_6E44C5A0	dd 302h			; DATA XREF: sub_6E41A8B0:loc_6E41A8F0o
					; TLSv1_1_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E406650
		dd offset sub_6E40D250
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E41A8B0
		dd offset sub_6E41AE30
		dd offset off_6E4498C0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
dword_6E44C620	dd 303h			; DATA XREF: sub_6E41A8B0:loc_6E41A8E0o
					; TLSv1_2_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E406650
		dd offset sub_6E40D250
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E41A8B0
		dd offset sub_6E41AE30
		dd offset off_6E4498C0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
dword_6E44C6A0	dd 301h			; DATA XREF: sub_6E41A930+19o
					; TLSv1_server_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E406650
		dd offset sub_6E42FF90
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E41A930
		dd offset sub_6E41AE30
		dd offset off_6E4498C0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
dword_6E44C720	dd 302h			; DATA XREF: sub_6E41A930:loc_6E41A970o
					; TLSv1_1_server_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E406650
		dd offset sub_6E42FF90
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E41A930
		dd offset sub_6E41AE30
		dd offset off_6E4498C0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
dword_6E44C7A0	dd 303h			; DATA XREF: sub_6E41A930:loc_6E41A960o
					; TLSv1_2_server_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E406650
		dd offset sub_6E42FF90
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E41A930
		dd offset sub_6E41AE30
		dd offset off_6E4498C0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
dword_6E44C820	dd 301h			; DATA XREF: sub_6E41A9B0+19o
					; TLSv1_client_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E42FF90
		dd offset sub_6E40D250
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E41A9B0
		dd offset sub_6E41AE30
		dd offset off_6E4498C0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
dword_6E44C8A0	dd 302h			; DATA XREF: sub_6E41A9B0:loc_6E41A9F0o
					; TLSv1_1_client_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E42FF90
		dd offset sub_6E40D250
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E41A9B0
		dd offset sub_6E41AE30
		dd offset off_6E4498C0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
dword_6E44C920	dd 303h			; DATA XREF: sub_6E41A9B0:loc_6E41A9E0o
					; TLSv1_2_client_methodo
		dd offset sub_6E41AE40
		dd offset sub_6E41AEA0
		dd offset sub_6E41AE70
		dd offset sub_6E42FF90
		dd offset sub_6E40D250
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E410130
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E4164A0
		dd offset sub_6E413BF0
		dd offset sub_6E4132F0
		dd offset sub_6E415280
		dd offset sub_6E40E840
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E40E3D0
		dd offset sub_6E41A9B0
		dd offset sub_6E41AE30
		dd offset off_6E4498C0
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
aT1_lib_c	db 't1_lib.c',0         ; DATA XREF: sub_6E41AA30+24Do
					; sub_6E41B270:loc_6E41B7B8o ...
		align 4
off_6E44C9AC	dd offset loc_6E41DC20	; DATA XREF: sub_6E41DBB0+Dr
		dd offset loc_6E41DC20	; jump table for switch	statement
		dd offset loc_6E41DBE0
		dd offset loc_6E41DBF0
		dd offset loc_6E41DC00
		dd offset loc_6E41DC10
		dd offset loc_6E41DBD0
off_6E44C9C8	dd offset loc_6E41DCB8	; DATA XREF: sub_6E41DC30+B7r
		dd offset loc_6E41DCB8	; jump table for switch	statement
		dd offset loc_6E41DD9B
		dd offset loc_6E41DD8C
		dd offset loc_6E41DD7D
		dd offset loc_6E41DD6E
		dd offset loc_6E41DD44
dword_6E44C9E4	dd 0C000D00h, 1050A00h,	1020104h, 3020304h ; DATA XREF:	sub_6E41DDD0+940o
dword_6E44C9F4	dd 8000A00h, 17000600h,	19001800h, 2000B00h ; DATA XREF: sub_6E41DDD0+432o
					; sub_6E41DDD0+91Co
		db 1, 0
byte_6E44CA06	db 6			; DATA XREF: sub_6E41B1A0+Do
					; sub_6E41B1A0:loc_6E41B250r ...
byte_6E44CA07	db 1			; DATA XREF: sub_6E41B1A0+B8o
					; sub_6E41B270+DE4o
		dd 3060206h, 2050105h, 1040305h, 3040204h, 2030103h, 1020303h
		dd 3020202h, 7 dup(0)
dword_6E44CA40	dd 2DEh			; DATA XREF: sub_6E41CEF0:loc_6E41D052r
		dd 2DDh, 2CCh, 2DBh, 2DCh, 2CBh, 2D9h, 2DAh, 2CAh, 19Fh
		dd 2D8h, 2D6h, 2D7h, 2C8h, 2C9h, 2D4h, 2D5h, 2C7h, 199h
		dd 2D1h, 2D2h, 2D3h, 2C4h, 2C5h, 2C6h, 7 dup(0)
dword_6E44CAC0	dd 2D1h			; DATA XREF: sub_6E41AEC0+Ar
		dd 2D2h, 2D3h, 2D4h, 2D5h, 2D6h, 2D7h, 2D8h, 2D9h, 2DAh
		dd 2DBh, 2DCh, 2DDh, 2DEh, 2C4h, 2C5h, 2C6h, 2C7h, 199h
		dd 2C8h, 2C9h, 2CAh, 19Fh, 2CBh, 2CCh
aClientFinish_0	db 'client finished',0  ; DATA XREF: .data:6E4498E0o
aServerFinish_0	db 'server finished',0  ; DATA XREF: .data:6E4498E8o
		align 20h
aTlsv1PartOfOpe	db 'TLSv1 part of OpenSSL 1.0.1s  1 Mar 2016',0
		align 20h
aChunk0		db 'chunk >= 0',0       ; DATA XREF: sub_6E41F140:loc_6E41F520o
aT1_enc_c	db 't1_enc.c',0         ; DATA XREF: sub_6E41F140+3F0o
					; sub_6E41F5D0+338o ...
aClientWriteKey	db 'client write key',0 ; DATA XREF: sub_6E41F9C0+5C1o
aServerWriteKey	db 'server write key',0 ; DATA XREF: sub_6E41F9C0+2C7o
aIvBlock	db 'IV block',0         ; DATA XREF: sub_6E41F9C0+433o
aKeyExpansion	db 'key expansion',0    ; DATA XREF: sub_6E4203A0+19Do
					; sub_6E421980+358o
aN0		db 'n >= 0',0           ; DATA XREF: sub_6E4206A0:loc_6E420C00o
					; sub_6E4206A0:loc_6E420C30o
; char aSDRecDataRecIn[]
aSDRecDataRecIn	db '%s:%d: rec->data != rec->input',0Ah,0 ; DATA XREF: sub_6E4206A0+C3o
aT0		db 't >= 0',0           ; DATA XREF: sub_6E4212D0+324o
aMasterSecret	db 'master secret',0    ; DATA XREF: sub_6E421620+191o
					; sub_6E421980+1F0o
aClientFinished	db 'client finished',0  ; DATA XREF: sub_6E421980+1B8o
aServerFinished	db 'server finished',0  ; DATA XREF: sub_6E421980+1D4o
		align 20h
byte_6E44CC60	db 0			; DATA XREF: sub_6E421EB0+9r
		db 3 dup(0FFh)
		dd 0FFFFFFFFh, 0FF0AFFFFh, 2 dup(0FFFFFFFFh), 0FF161514h
		dd 0FFFFFFFFh, 0FF1EFFFFh, 2 dup(0FFFFFFFFh), 2B2AFF28h
		dd 2F2E2D2Ch, 33323130h, 2 dup(0FFFFFFFFh), 0FFFFFF3Ch
		dd 0FFFFFFFFh, 4746FFFFh, 2 dup(0FFFFFFFFh), 0FFFFFF50h
		dd 0FF56FFFFh, 0FF5AFFFFh, 2 dup(0FFFFFFFFh), 0FFFFFF64h
		dd 0FFFFFFFFh, 6F6EFFFFh, 73727170h
dword_6E44CCD4	dd 3 dup(0)		; DATA XREF: sub_6E41F9C0+3F3o
dword_6E44CCE0	dd 0FEFFh		; DATA XREF: sub_6E421EE0+Ao
					; DTLSv1_methodo
		dd offset sub_6E427530
		dd offset sub_6E4277A0
		dd offset sub_6E427710
		dd offset sub_6E4239E0
		dd offset sub_6E426500
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E42EF80
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E42CAE0
		dd offset sub_6E4296E0
		dd offset sub_6E42A700
		dd offset sub_6E42B590
		dd offset sub_6E4281F0
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E427950
		dd offset sub_6E421EE0
		dd offset sub_6E427520
		dd offset off_6E449900
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
aD1_srvr_c	db 'd1_srvr.c',0        ; DATA XREF: sub_6E421FC0:loc_6E422248o
					; sub_6E421FC0+306o ...
		align 20h
dword_6E44CD80	dd 0FEFFh		; DATA XREF: sub_6E421F10+Ao
					; DTLSv1_server_methodo
		dd offset sub_6E427530
		dd offset sub_6E4277A0
		dd offset sub_6E427710
		dd offset sub_6E4239E0
		dd offset sub_6E42FF90
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E42EF80
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E42CAE0
		dd offset sub_6E4296E0
		dd offset sub_6E42A700
		dd offset sub_6E42B590
		dd offset sub_6E4281F0
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E427950
		dd offset sub_6E421F10
		dd offset sub_6E427520
		dd offset off_6E449900
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
aD1_clnt_c	db 'd1_clnt.c',0        ; DATA XREF: sub_6E424C90:loc_6E4250A9o
					; sub_6E424C90+4E8o ...
		align 20h
dword_6E44CE20	dd 0FEFFh		; DATA XREF: sub_6E424C50:loc_6E424C64o
					; DTLSv1_client_methodo
		dd offset sub_6E427530
		dd offset sub_6E4277A0
		dd offset sub_6E427710
		dd offset sub_6E42FF90
		dd offset sub_6E426500
		dd offset sub_6E4103A0
		dd offset sub_6E4104C0
		dd offset sub_6E410250
		dd offset sub_6E42EF80
		dd offset sub_6E4105E0
		dd offset sub_6E410630
		dd offset sub_6E42CAE0
		dd offset sub_6E4296E0
		dd offset sub_6E42A700
		dd offset sub_6E42B590
		dd offset sub_6E4281F0
		dd offset sub_6E40EFD0
		dd offset sub_6E40F8C0
		dd offset sub_6E40F920
		dd offset sub_6E40E400
		dd offset sub_6E40E3C0
		dd offset sub_6E427950
		dd offset sub_6E424C50
		dd offset sub_6E427520
		dd offset off_6E449900
		dd offset sub_6E435680
		dd offset sub_6E40EEE0
		dd offset sub_6E40F7C0
		align 10h
aD1_lib_c	db 'd1_lib.c',0         ; DATA XREF: sub_6E427530+28o
					; sub_6E427D80+6Do ...
aClientFinish_1	db 'client finished',0  ; DATA XREF: .data:6E449920o
aServerFinish_1	db 'server finished',0  ; DATA XREF: .data:6E449928o
		align 20h
aDtlsv1PartOfOp	db 'DTLSv1 part of OpenSSL 1.0.1s  1 Mar 2016',0
		align 20h
aD1_pkt_c	db 'd1_pkt.c',0         ; DATA XREF: sub_6E428400+35o
					; sub_6E428400+212o ...
aMac_sizeEvp__0	db 'mac_size <= EVP_MAX_MD_SIZE',0 ; DATA XREF: sub_6E428400:loc_6E428710o
aD_0		db '%d',0               ; DATA XREF: sub_6E4296E0+C7Eo
aSslAlertNumb_0	db 'SSL alert number ',0 ; DATA XREF: sub_6E4296E0+C9Eo
a0_0		db '0',0                ; DATA XREF: sub_6E42A700:loc_6E42AA20o
					; sub_6E42AC40:loc_6E42AF00o ...
aLenSsl3_rt_max	db 'len <= SSL3_RT_MAX_PLAIN_LENGTH',0 ; DATA XREF: sub_6E42AC40+2Ao
aD1_both_c	db 'd1_both.c',0        ; DATA XREF: sub_6E42BBC0:loc_6E42BC08o
					; sub_6E42BBC0+108o ...
aLongMsg_hdrMsg	db '((long)msg_hdr->msg_len) > 0',0 ; DATA XREF: sub_6E42BEC0+4DCo
aItemNull	db 'item != NULL',0     ; DATA XREF: sub_6E42BEC0+25Co
					; sub_6E42CAE0+924o
aSD1MtuDtls1_mi	db 's->d1->mtu >= dtls1_min_mtu(s)',0
					; DATA XREF: sub_6E42C4E0:loc_6E42CA50o
					; sub_6E42E5F0:loc_6E42E920o
		align 10h
aSInit_numIntSD	db 's->init_num == (int)s->d1->w_msg_hdr.msg_len + DTLS1_HM_HEADER_LE'
					; DATA XREF: sub_6E42C4E0+530o
		db 'NGTH',0
aLenUnsignedInt	db 'len == (unsigned int)ret',0 ; DATA XREF: sub_6E42C4E0+2A9o
					; sub_6E42E5F0+1A4o
; char aInvalidStateRe[]
aInvalidStateRe	db 'invalid state reached %s:%d',0 ; DATA XREF: sub_6E42DB10+21o
		align 4
; char aRetransmitMess[]
aRetransmitMess	db 'retransmit:  message %d non-existant',0Ah,0
					; DATA XREF: sub_6E42DBE0+314o
					; .text:6E42ECB9o
		align 4
aDtls1_retransm	db 'dtls1_retransmit_message() failed',0Ah,0 ; DATA XREF: sub_6E42DBE0+24Do
aSInit_off0	db 's->init_off == 0',0 ; DATA XREF: sub_6E42DF60:loc_6E42E180o
aSD1W_msg_hdr_0	db 's->d1->w_msg_hdr.msg_len + ((s->version == DTLS1_VERSION) ? DTLS1'
					; DATA XREF: sub_6E42DF60+1C9o
		db '_CCS_HEADER_LENGTH : 3) == (unsigned int)s->init_num',0
		align 10h
aSD1W_msg_hdr_m	db 's->d1->w_msg_hdr.msg_len + DTLS1_HM_HEADER_LENGTH == (unsigned in'
					; DATA XREF: sub_6E42DF60+98o
		db 't)s->init_num',0
aIEvp_max_md__0	db 'i <= EVP_MAX_MD_SIZE',0 ; DATA XREF: sub_6E42E280+274o
					; sub_6E42E280+2A4o
byte_6E44D184	db 0FFh			; DATA XREF: sub_6E42BEC0+210r
					; sub_6E42BEC0+461r
		db 1, 3, 7
		dd 7F3F1F0Fh
byte_6E44D18C	db 0FFh			; DATA XREF: sub_6E42BEC0+41Cr
		db 0FEh, 0FCh, 0F8h
		dd 80C0E0F0h
aD1_enc_c	db 'd1_enc.c',0         ; DATA XREF: sub_6E42F410+92o
					; sub_6E42F410+2F0o
		align 10h
; char aSDRecDataRec_0[]
aSDRecDataRec_0	db '%s:%d: rec->data != rec->input',0Ah,0 ; DATA XREF: sub_6E42F410+9Ao
aMac_size0	db 'mac_size >= 0',0    ; DATA XREF: sub_6E42F410:loc_6E42F6F0o
		align 10h
aD1_srtp_c	db 'd1_srtp.c',0        ; DATA XREF: sub_6E42F730+D8o
					; sub_6E42F730+144o ...
aSrtp_aes128_cm	db 'SRTP_AES128_CM_SHA1_80',0 ; DATA XREF: .data:Str1o
aSrtp_aes128__0	db 'SRTP_AES128_CM_SHA1_32',0 ; DATA XREF: .data:6E449948o
aSsl_lib_c	db 'ssl_lib.c',0        ; DATA XREF: sub_6E42FF90+Bo
					; SSL_clear+1F8o ...
aSslv2		db 'SSLv2',0            ; DATA XREF: SSL_CTX_set_ssl_version:loc_6E430320o
					; SSL_CTX_new:loc_6E433000o ...
aAllExportAnull	db 'ALL:!EXPORT:!aNULL:!eNULL:!SSLv2',0
					; DATA XREF: SSL_CTX_set_ssl_version+12o
					; SSL_CTX_new+1DDo
		align 4
off_6E44D23C	dd offset loc_6E431A10,	offset loc_6E431AE0, offset loc_6E431AE0
					; DATA XREF: SSL_ctrl+1Er
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0 ; jump	table for switch statement
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431A20, offset loc_6E431A30
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431A40,	offset loc_6E431A50, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431A60, offset loc_6E431A70
		dd offset loc_6E431A80,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AE0,	offset loc_6E431AE0, offset loc_6E431AE0
		dd offset loc_6E431AA0,	offset loc_6E431AC0, offset loc_6E4319F0
off_6E44D338	dd offset loc_6E431D70,	offset loc_6E431D80, offset loc_6E431D80
					; DATA XREF: SSL_CTX_ctrl+1Er
		dd offset loc_6E431D80,	offset loc_6E431D60, offset loc_6E431D50 ; jump	table for switch statement
		dd offset loc_6E431D40,	offset loc_6E431D30, offset loc_6E431D20
		dd offset loc_6E431D10,	offset loc_6E431D00, offset loc_6E431CF0
		dd offset loc_6E431CE0,	offset loc_6E431CD0, offset loc_6E431CC0
		dd offset loc_6E431CB0,	offset loc_6E431C90, offset loc_6E431C70
		dd offset loc_6E431D80,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431D80,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431C60,	offset loc_6E431C20, offset loc_6E431C10
		dd offset loc_6E431C00,	offset loc_6E431BF0, offset loc_6E431C50
		dd offset loc_6E431D80,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431D80,	offset loc_6E431C40, offset loc_6E431BE0
		dd offset loc_6E431BC0,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431D80,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431D80,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431D80,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431D80,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431D80,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431D80,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431D80,	offset loc_6E431D80, offset loc_6E431D80
		dd offset loc_6E431D80,	offset loc_6E431BA0, offset loc_6E431B80
aSsl2Md5	db 'ssl2-md5',0         ; DATA XREF: SSL_CTX_new+22Co
aSsl3Md5	db 'ssl3-md5',0         ; DATA XREF: SSL_CTX_new+246o
aSsl3Sha1	db 'ssl3-sha1',0        ; DATA XREF: SSL_CTX_new+260o
aSSid_ctx_lengt	db 's->sid_ctx_length <= sizeof s->sid_ctx',0
					; DATA XREF: SSL_new:loc_6E433810o
aTlsv1_2	db 'TLSv1.2',0          ; DATA XREF: SSL_get_version:loc_6E435780o
aTlsv1_1	db 'TLSv1.1',0          ; DATA XREF: SSL_get_version:loc_6E435790o
aTlsv1		db 'TLSv1',0            ; DATA XREF: SSL_get_version:loc_6E4357A0o
aSslv3		db 'SSLv3',0            ; DATA XREF: SSL_get_version:loc_6E435770o
aUnknown	db 'unknown',0          ; DATA XREF: SSL_get_version+27o
		align 4
aSslSid_ctx_len	db 'ssl->sid_ctx_length <= sizeof(ssl->sid_ctx)',0
					; DATA XREF: SSL_set_SSL_CTX:loc_6E436050o
aOpenssl1_0_1s1	db 'OpenSSL 1.0.1s  1 Mar 2016',0 ; DATA XREF: .data:6E449A18o
		align 4
aSsl_cert_c	db 'ssl_cert.c',0       ; DATA XREF: SSL_get_ex_data_X509_STORE_CTX_idx+Bo
					; SSL_get_ex_data_X509_STORE_CTX_idx+38o ...
aSslForVerifyCa	db 'SSL for verify callback',0
					; DATA XREF: SSL_get_ex_data_X509_STORE_CTX_idx+F8o
aSsl_client	db 'ssl_client',0       ; DATA XREF: sub_6E4371C0+99o
aSsl_server	db 'ssl_server',0       ; DATA XREF: sub_6E4371C0:loc_6E437320o
aSS		db '%s/%s',0            ; DATA XREF: SSL_add_dir_cert_subjects_to_stack+79o
asc_6E44D523	db 27h,')',0            ; DATA XREF: SSL_add_dir_cert_subjects_to_stack+112o
aOpenssl_dir_re	db 'OPENSSL_DIR_read(&ctx, ',27h,0
					; DATA XREF: SSL_add_dir_cert_subjects_to_stack+11Eo
		align 10h
aSsl_sess_c	db 'ssl_sess.c',0       ; DATA XREF: sub_6E437C10+AEo
					; SSL_get1_session+Co ...
		align 4
off_6E44D54C	dd offset loc_6E439570	; DATA XREF: sub_6E439430+66r
		dd offset loc_6E4394C0	; jump table for switch	statement
		dd offset loc_6E4394C0
		dd offset loc_6E439550
		dd offset loc_6E439550
aSslSessionPara	db 'SSL SESSION PARAMETERS',0 ; DATA XREF: PEM_read_bio_SSL_SESSION+23o
					; PEM_read_SSL_SESSION+23o ...
		align 10h
aSsl_ciph_c	db 'ssl_ciph.c',0       ; DATA XREF: sub_6E43A630+Co
					; sub_6E43A630+3Ao ...
aStrength	db 'STRENGTH',0         ; DATA XREF: sub_6E43AE10:loc_6E43B440o
aDesCbc		db 'DES-CBC',0          ; DATA XREF: sub_6E43B560+3o
aDesEde3Cbc	db 'DES-EDE3-CBC',0     ; DATA XREF: sub_6E43B560+14o
aRc4		db 'RC4',0              ; DATA XREF: sub_6E43B560+25o
					; .rdata:6E44E3D4o
aRc2Cbc		db 'RC2-CBC',0          ; DATA XREF: sub_6E43B560+36o
aIdeaCbc	db 'IDEA-CBC',0         ; DATA XREF: sub_6E43B560+47o
aAes128Cbc	db 'AES-128-CBC',0      ; DATA XREF: sub_6E43B560+58o
aAes256Cbc	db 'AES-256-CBC',0      ; DATA XREF: sub_6E43B560+69o
aCamellia128Cbc	db 'CAMELLIA-128-CBC',0 ; DATA XREF: sub_6E43B560+7Ao
aCamellia256Cbc	db 'CAMELLIA-256-CBC',0 ; DATA XREF: sub_6E43B560+8Bo
aGost89Cnt	db 'gost89-cnt',0       ; DATA XREF: sub_6E43B560+9Co
aSeedCbc	db 'SEED-CBC',0         ; DATA XREF: sub_6E43B560+ADo
aIdAes128Gcm	db 'id-aes128-GCM',0    ; DATA XREF: sub_6E43B560+BEo
aIdAes256Gcm	db 'id-aes256-GCM',0    ; DATA XREF: sub_6E43B560+CFo
aMd5_0		db 'MD5',0              ; DATA XREF: sub_6E43B560+E0o
					; SSL_CIPHER_description:loc_6E43C9F0o	...
aSsl_mac_secret	db 'ssl_mac_secret_size[SSL_MD_MD5_IDX] >= 0',0
					; DATA XREF: sub_6E43B560:loc_6E43B7B0o
aSha1		db 'SHA1',0             ; DATA XREF: sub_6E43B560:loc_6E43B666o
					; SSL_CIPHER_description:loc_6E43C970o	...
		align 4
aSsl_mac_secr_0	db 'ssl_mac_secret_size[SSL_MD_SHA1_IDX] >= 0',0
					; DATA XREF: sub_6E43B560:loc_6E43B7E0o
aMd_gost94	db 'md_gost94',0        ; DATA XREF: sub_6E43B560:loc_6E43B68Co
aSsl_mac_secr_1	db 'ssl_mac_secret_size[SSL_MD_GOST94_IDX] >= 0',0
					; DATA XREF: sub_6E43B560:loc_6E43B810o
aGostMac	db 'gost-mac',0         ; DATA XREF: sub_6E43B560:loc_6E43B6B6o
					; sub_6E43B560+17Fo
aSha256		db 'SHA256',0           ; DATA XREF: sub_6E43B560:loc_6E43B752o
					; SSL_CIPHER_description:loc_6E43CA20o	...
aSha384		db 'SHA384',0           ; DATA XREF: sub_6E43B560+210o
					; SSL_CIPHER_description:loc_6E43CA10o	...
aRc4HmacMd5	db 'RC4-HMAC-MD5',0     ; DATA XREF: sub_6E43B840+38Ao
aAes128CbcHmacS	db 'AES-128-CBC-HMAC-SHA1',0 ; DATA XREF: sub_6E43B840+3BAo
aAes256CbcHmacS	db 'AES-256-CBC-HMAC-SHA1',0 ; DATA XREF: sub_6E43B840+2A7o
aGost94		db 'gost94',0           ; DATA XREF: sub_6E43BC80+57o
aGost2001	db 'gost2001',0         ; DATA XREF: sub_6E43BC80+E7o
aDefault	db 'DEFAULT',0          ; DATA XREF: sub_6E43BC80+7F9o
aAllExportAnu_0	db 'ALL:!EXPORT:!aNULL:!eNULL:!SSLv2',0 ; DATA XREF: sub_6E43BC80+930o
aExport		db ' export',0          ; DATA XREF: SSL_CIPHER_description:loc_6E43C795o
byte_6E44D74D	db 0			; DATA XREF: SSL_CIPHER_description:loc_6E43C7DDo
aSslv2_0	db 'SSLv2',0            ; DATA XREF: SSL_CIPHER_description:loc_6E43C7EDo
					; SSL_CIPHER_get_version:loc_6E43CEC0o	...
aSslv3_0	db 'SSLv3',0            ; DATA XREF: SSL_CIPHER_description+61o
					; .rdata:6E44E794o
aTlsv1_2_0	db 'TLSv1.2',0          ; DATA XREF: SSL_CIPHER_description+1B5o
					; .rdata:6E44E7F4o
aUnknown_0	db 'unknown',0          ; DATA XREF: SSL_CIPHER_description:loc_6E43C8AFo
					; SSL_CIPHER_description:loc_6E43C960o	...
aRsa		db 'RSA',0              ; DATA XREF: SSL_CIPHER_description:loc_6E43CC30o
					; SSL_CIPHER_description:loc_6E43CDF0o	...
aDhRsa		db 'DH/RSA',0           ; DATA XREF: SSL_CIPHER_description+D2o
aDhDss		db 'DH/DSS',0           ; DATA XREF: SSL_CIPHER_description:loc_6E43CBE0o
aKrb5		db 'KRB5',0             ; DATA XREF: SSL_CIPHER_description+1D2o
					; SSL_CIPHER_description:loc_6E43CBC0o	...
aDh		db 'DH',0               ; DATA XREF: SSL_CIPHER_description:loc_6E43CCC0o
					; SSL_CIPHER_description:loc_6E43CE00o	...
aEcdhRsa	db 'ECDH/RSA',0         ; DATA XREF: SSL_CIPHER_description:loc_6E43CBF0o
aEcdhEcdsa	db 'ECDH/ECDSA',0       ; DATA XREF: SSL_CIPHER_description:loc_6E43CC90o
aEcdh		db 'ECDH',0             ; DATA XREF: SSL_CIPHER_description+1F2o
					; SSL_CIPHER_description+3F2o ...
aPsk		db 'PSK',0              ; DATA XREF: SSL_CIPHER_description+344o
					; SSL_CIPHER_description:loc_6E43CC80o	...
aSrp		db 'SRP',0              ; DATA XREF: SSL_CIPHER_description+1A6o
					; SSL_CIPHER_description+414o ...
aGost		db 'GOST',0             ; DATA XREF: SSL_CIPHER_description:loc_6E43CC00o
aDh1024		db 'DH(1024)',0         ; DATA XREF: SSL_CIPHER_description+458o
aDh512		db 'DH(512)',0          ; DATA XREF: SSL_CIPHER_description:loc_6E43CE54o
aRsa1024	db 'RSA(1024)',0        ; DATA XREF: SSL_CIPHER_description+518o
aRsa512		db 'RSA(512)',0         ; DATA XREF: SSL_CIPHER_description:loc_6E43CE4Ao
aDss		db 'DSS',0              ; DATA XREF: SSL_CIPHER_description+110o
					; .rdata:6E44DF84o
aNone		db 'None',0             ; DATA XREF: SSL_CIPHER_description:loc_6E43CC10o
					; SSL_CIPHER_description:loc_6E43CD50o
aEcdsa		db 'ECDSA',0            ; DATA XREF: SSL_CIPHER_description:loc_6E43CCA0o
					; .rdata:6E44E0A4o
aGost94_0	db 'GOST94',0           ; DATA XREF: SSL_CIPHER_description:loc_6E43CA40o
					; SSL_CIPHER_description:loc_6E43CCB0o	...
aGost01		db 'GOST01',0           ; DATA XREF: SSL_CIPHER_description:loc_6E43CBD0o
aDes56		db 'DES(56)',0          ; DATA XREF: SSL_CIPHER_description:loc_6E43CD80o
a3des168	db '3DES(168)',0        ; DATA XREF: SSL_CIPHER_description+432o
aRc4128		db 'RC4(128)',0         ; DATA XREF: SSL_CIPHER_description:loc_6E43CE40o
aRc2128		db 'RC2(128)',0         ; DATA XREF: SSL_CIPHER_description:loc_6E43CE10o
aIdea128	db 'IDEA(128)',0        ; DATA XREF: SSL_CIPHER_description:loc_6E43CDC0o
aAes128		db 'AES(128)',0         ; DATA XREF: SSL_CIPHER_description:loc_6E43CD40o
aAes256		db 'AES(256)',0         ; DATA XREF: SSL_CIPHER_description:loc_6E43CA60o
aAesgcm128	db 'AESGCM(128)',0      ; DATA XREF: SSL_CIPHER_description:loc_6E43CDD0o
aAesgcm256	db 'AESGCM(256)',0      ; DATA XREF: SSL_CIPHER_description:loc_6E43CD90o
aCamellia128	db 'Camellia(128)',0    ; DATA XREF: SSL_CIPHER_description:loc_6E43CD30o
aCamellia256	db 'Camellia(256)',0    ; DATA XREF: SSL_CIPHER_description:loc_6E43CD20o
aSeed128	db 'SEED(128)',0        ; DATA XREF: SSL_CIPHER_description+3D1o
aGost89256	db 'GOST89(256)',0      ; DATA XREF: SSL_CIPHER_description:loc_6E43CDE0o
aRc256		db 'RC2(56)',0          ; DATA XREF: SSL_CIPHER_description+391o
aRc240		db 'RC2(40)',0          ; DATA XREF: SSL_CIPHER_description:loc_6E43CE5Eo
aRc456		db 'RC4(56)',0          ; DATA XREF: SSL_CIPHER_description+663o
aRc464		db 'RC4(64)',0          ; DATA XREF: SSL_CIPHER_description+6D7o
aRc440		db 'RC4(40)',0          ; DATA XREF: SSL_CIPHER_description:loc_6E43CE68o
aDes40		db 'DES(40)',0          ; DATA XREF: SSL_CIPHER_description+61Fo
aAead		db 'AEAD',0             ; DATA XREF: SSL_CIPHER_description:loc_6E43CA00o
aGost89		db 'GOST89',0           ; DATA XREF: SSL_CIPHER_description:loc_6E43CA30o
aOpenssl_malloc	db 'OPENSSL_malloc Error',0
					; DATA XREF: SSL_CIPHER_description:loc_6E43CE72o
aBufferTooSmall	db 'Buffer too small',0 ; DATA XREF: SSL_CIPHER_description:loc_6E43CAF0o
		align 4
a23sSKx8sAu4sEn	db '%-23s %s Kx=%-8s Au=%-4s Enc=%-9s Mac=%-4s%s',0Ah,0
					; DATA XREF: SSL_CIPHER_description+276o
		align 4
off_6E44D908	dd offset loc_6E43CA50,	offset loc_6E43C9F0, offset loc_6E43C970
					; DATA XREF: SSL_CIPHER_description+179r
		dd offset loc_6E43CA50,	offset loc_6E43CA40, offset loc_6E43CA50 ; jump	table for switch statement
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA30
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA20, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA10
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA50, offset loc_6E43CA50
		dd offset loc_6E43CA50,	offset loc_6E43CA00
aNone_0		db '(NONE)',0           ; DATA XREF: SSL_CIPHER_get_version:loc_6E43CED0o
					; SSL_CIPHER_get_name:loc_6E43CEF0o
aTlsv1Sslv3	db 'TLSv1/SSLv3',0      ; DATA XREF: SSL_CIPHER_get_version:loc_6E43CEB0o
byte_6E44DA1F	db 0			; DATA XREF: sub_6E43B840+1F8r
dword_6E44DA20	dd 2FF0100h, 3FFFFFFh, 0FFFFFFFFh, 4FFFFFFh, 3 dup(0FFFFFFFFh)
		dd 5FFFFFFh, 4C4C41h, 504D4F43h, 454D454Ch, 464F544Eh
		dd 4C4C41h
aComplementofde	db 'COMPLEMENTOFDEFAULT',0 ; DATA XREF: .rdata:6E44DC24o
aKrsa		db 'kRSA',0             ; DATA XREF: .rdata:6E44DC54o
aKdhr		db 'kDHr',0             ; DATA XREF: .rdata:6E44DC84o
aKdhd		db 'kDHd',0             ; DATA XREF: .rdata:6E44DCB4o
aKdh		db 'kDH',0              ; DATA XREF: .rdata:6E44DCE4o
aKedh		db 'kEDH',0             ; DATA XREF: .rdata:6E44DD14o
aKkrb5		db 'kKRB5',0            ; DATA XREF: .rdata:6E44DD74o
aKecdhr		db 'kECDHr',0           ; DATA XREF: .rdata:6E44DDA4o
aKecdhe		db 'kECDHe',0           ; DATA XREF: .rdata:6E44DDD4o
aKecdh		db 'kECDH',0            ; DATA XREF: .rdata:6E44DE04o
aKeecdh		db 'kEECDH',0           ; DATA XREF: .rdata:6E44DE34o
aKpsk		db 'kPSK',0             ; DATA XREF: .rdata:6E44DE94o
aKsrp		db 'kSRP',0             ; DATA XREF: .rdata:6E44DEC4o
aKgost		db 'kGOST',0            ; DATA XREF: .rdata:6E44DEF4o
aArsa		db 'aRSA',0             ; DATA XREF: .rdata:6E44DF24o
aAdss		db 'aDSS',0             ; DATA XREF: .rdata:6E44DF54o
aAkrb5		db 'aKRB5',0            ; DATA XREF: .rdata:6E44DFB4o
aAnull		db 'aNULL',0            ; DATA XREF: .rdata:6E44DFE4o
aAdh		db 'aDH',0              ; DATA XREF: .rdata:6E44E014o
aAecdh		db 'aECDH',0            ; DATA XREF: .rdata:6E44E044o
aAecdsa		db 'aECDSA',0           ; DATA XREF: .rdata:6E44E074o
aApsk		db 'aPSK',0             ; DATA XREF: .rdata:6E44E0D4o
aAgost94	db 'aGOST94',0          ; DATA XREF: .rdata:6E44E104o
aAgost01	db 'aGOST01',0          ; DATA XREF: .rdata:6E44E134o
aAgost		db 'aGOST',0            ; DATA XREF: .rdata:6E44E164o
aAsrp		db 'aSRP',0             ; DATA XREF: .rdata:6E44E194o
aEdh		db 'EDH',0              ; DATA XREF: .rdata:6E44E1C4o
aEecdh		db 'EECDH',0            ; DATA XREF: .rdata:6E44E1F4o
aNull		db 'NULL',0             ; DATA XREF: .rdata:6E44E224o
aAdh_0		db 'ADH',0              ; DATA XREF: .rdata:6E44E2B4o
aAecdh_0	db 'AECDH',0            ; DATA XREF: .rdata:6E44E2E4o
aDes		db 'DES',0              ; DATA XREF: .rdata:6E44E374o
a3des		db '3DES',0             ; DATA XREF: .rdata:6E44E3A4o
aRc2		db 'RC2',0              ; DATA XREF: .rdata:6E44E404o
aIdea		db 'IDEA',0             ; DATA XREF: .rdata:6E44E434o
aSeed		db 'SEED',0             ; DATA XREF: .rdata:6E44E464o
aEnull		db 'eNULL',0            ; DATA XREF: .rdata:6E44E494o
aAes128_0	db 'AES128',0           ; DATA XREF: .rdata:6E44E4C4o
aAes256_0	db 'AES256',0           ; DATA XREF: .rdata:6E44E4F4o
aAes		db 'AES',0              ; DATA XREF: .rdata:6E44E524o
aAesgcm		db 'AESGCM',0           ; DATA XREF: .rdata:6E44E554o
aCamellia128_0	db 'CAMELLIA128',0      ; DATA XREF: .rdata:6E44E584o
aCamellia256_0	db 'CAMELLIA256',0      ; DATA XREF: .rdata:6E44E5B4o
aCamellia	db 'CAMELLIA',0         ; DATA XREF: .rdata:6E44E5E4o
aSha		db 'SHA',0              ; DATA XREF: .rdata:6E44E674o
aGost89mac	db 'GOST89MAC',0        ; DATA XREF: .rdata:6E44E6D4o
aTlsv1_3	db 'TLSv1',0            ; DATA XREF: .rdata:6E44E7C4o
aExp		db 'EXP',0              ; DATA XREF: .rdata:6E44E824o
aExport_0	db 'EXPORT',0           ; DATA XREF: .rdata:6E44E854o
aExport40	db 'EXPORT40',0         ; DATA XREF: .rdata:6E44E884o
aExport56	db 'EXPORT56',0         ; DATA XREF: .rdata:6E44E8B4o
aLow		db 'LOW',0              ; DATA XREF: .rdata:6E44E8E4o
aMedium		db 'MEDIUM',0           ; DATA XREF: .rdata:6E44E914o
aHigh		db 'HIGH',0             ; DATA XREF: .rdata:6E44E944o
aFips		db 'FIPS',0             ; DATA XREF: .rdata:6E44E974o
		align 10h
		dd 5 dup(0)
		dd offset dword_6E44DA20+20h
		dd 0
dword_6E44DBCC	dd 2 dup(0)		; DATA XREF: sub_6E43BC80:loc_6E43C41Eo
		dd 0FFFFFFDFh, 7 dup(0)
		dd offset dword_6E44DA20+24h
		dd 3 dup(0)
		dd 20h,	7 dup(0)
		dd offset aComplementofde ; "COMPLEMENTOFDEFAULT"
		align 10h
		dd 4, 0FFFFFFDFh, 0
		dd 0FFFFFFFEh, 3, 4 dup(0)
		dd offset aKrsa		; "kRSA"
		dd 0
		dd 1, 9	dup(0)
		dd offset aKdhr		; "kDHr"
		dd 0
		dd 2, 9	dup(0)
		dd offset aKdhd		; "kDHd"
		dd 0
		dd 4, 9	dup(0)
		dd offset aKdh		; "kDH"
		dd 0
		dd 6, 9	dup(0)
		dd offset aKedh		; "kEDH"
		dd 0
		dd 8, 9	dup(0)
		dd offset aDh		; "DH"
		dd 0
		dd 0Eh,	9 dup(0)
		dd offset aKkrb5	; "kKRB5"
		dd 0
		dd 10h,	9 dup(0)
		dd offset aKecdhr	; "kECDHr"
		dd 0
		dd 20h,	9 dup(0)
		dd offset aKecdhe	; "kECDHe"
		dd 0
		dd 40h,	9 dup(0)
		dd offset aKecdh	; "kECDH"
		dd 0
		dd 60h,	9 dup(0)
		dd offset aKeecdh	; "kEECDH"
		dd 0
		dd 80h,	9 dup(0)
		dd offset aEcdh		; "ECDH"
		dd 0
		dd 0E0h, 9 dup(0)
		dd offset aKpsk		; "kPSK"
		dd 0
		dd 100h, 9 dup(0)
		dd offset aKsrp		; "kSRP"
		dd 0
		dd 400h, 9 dup(0)
		dd offset aKgost	; "kGOST"
		dd 0
		dd 200h, 9 dup(0)
		dd offset aArsa		; "aRSA"
		align 10h
		dd 1, 8	dup(0)
		dd offset aAdss		; "aDSS"
		align 10h
		dd 2, 8	dup(0)
		dd offset aDss		; "DSS"
		align 10h
		dd 2, 8	dup(0)
		dd offset aAkrb5	; "aKRB5"
		align 10h
		dd 20h,	8 dup(0)
		dd offset aAnull	; "aNULL"
		align 10h
		dd 4, 8	dup(0)
		dd offset aAdh		; "aDH"
		align 10h
		dd 8, 8	dup(0)
		dd offset aAecdh	; "aECDH"
		align 10h
		dd 10h,	8 dup(0)
		dd offset aAecdsa	; "aECDSA"
		align 10h
		dd 40h,	8 dup(0)
		dd offset aEcdsa	; "ECDSA"
		align 10h
		dd 40h,	8 dup(0)
		dd offset aApsk		; "aPSK"
		align 10h
		dd 80h,	8 dup(0)
		dd offset aAgost94	; "aGOST94"
		dd 2 dup(0)
		dd 100h, 8 dup(0)
		dd offset aAgost01	; "aGOST01"
		dd 2 dup(0)
		dd 200h, 8 dup(0)
		dd offset aAgost	; "aGOST"
		dd 2 dup(0)
		dd 300h, 8 dup(0)
		dd offset aAsrp		; "aSRP"
		dd 2 dup(0)
		dd 400h, 8 dup(0)
		dd offset aEdh		; "EDH"
		dd 0
		dd 8, 0FFFFFFFBh, 8 dup(0)
		dd offset aEecdh	; "EECDH"
		dd 0
		dd 80h,	0FFFFFFFBh, 8 dup(0)
		dd offset aNull		; "NULL"
		dd 3 dup(0)
		dd 20h,	7 dup(0)
		dd offset aKrb5		; "KRB5"
		dd 0
		dd 10h,	20h, 8 dup(0)
		dd offset aRsa		; "RSA"
		dd 0
		dd 2 dup(1), 8 dup(0)
		dd offset aAdh_0	; "ADH"
		dd 0
		dd 8, 4, 8 dup(0)
		dd offset aAecdh_0	; "AECDH"
		dd 0
		dd 80h,	4, 8 dup(0)
		dd offset aPsk		; "PSK"
		dd 0
		dd 100h, 80h, 8	dup(0)
		dd offset aSrp		; "SRP"
		dd 0
		dd 400h, 9 dup(0)
		dd offset aDes		; "DES"
		dd 3 dup(0)
		dd 1, 7	dup(0)
		dd offset a3des		; "3DES"
		dd 3 dup(0)
		dd 2, 7	dup(0)
		dd offset aRc4		; "RC4"
		dd 3 dup(0)
		dd 4, 7	dup(0)
		dd offset aRc2		; "RC2"
		dd 3 dup(0)
		dd 8, 7	dup(0)
		dd offset aIdea		; "IDEA"
		dd 3 dup(0)
		dd 10h,	7 dup(0)
		dd offset aSeed		; "SEED"
		dd 3 dup(0)
		dd 800h, 7 dup(0)
		dd offset aEnull	; "eNULL"
		dd 3 dup(0)
		dd 20h,	7 dup(0)
		dd offset aAes128_0	; "AES128"
		dd 3 dup(0)
		dd 1040h, 7 dup(0)
		dd offset aAes256_0	; "AES256"
		dd 3 dup(0)
		dd 2080h, 7 dup(0)
		dd offset aAes		; "AES"
		dd 3 dup(0)
		dd 30C0h, 7 dup(0)
		dd offset aAesgcm	; "AESGCM"
		dd 3 dup(0)
		dd 3000h, 7 dup(0)
		dd offset aCamellia128_0 ; "CAMELLIA128"
		dd 3 dup(0)
		dd 100h, 7 dup(0)
		dd offset aCamellia256_0 ; "CAMELLIA256"
		dd 3 dup(0)
		dd 200h, 7 dup(0)
		dd offset aCamellia	; "CAMELLIA"
		dd 3 dup(0)
		dd 300h, 7 dup(0)
		dd offset aMd5_0	; "MD5"
		dd 4 dup(0)
		dd 1, 6	dup(0)
		dd offset aSha1		; "SHA1"
		dd 4 dup(0)
		dd 2, 6	dup(0)
		dd offset aSha		; "SHA"
		dd 4 dup(0)
		dd 2, 6	dup(0)
		dd offset aGost94_0	; "GOST94"
		dd 4 dup(0)
		dd 4, 6	dup(0)
		dd offset aGost89mac	; "GOST89MAC"
		dd 4 dup(0)
		dd 8, 6	dup(0)
		dd offset aSha256	; "SHA256"
		dd 4 dup(0)
		dd 10h,	6 dup(0)
		dd offset aSha384	; "SHA384"
		dd 4 dup(0)
		dd 20h,	6 dup(0)
		dd offset aSslv2_0	; "SSLv2"
		dd 5 dup(0)
		dd 1, 5	dup(0)
		dd offset aSslv3_0	; "SSLv3"
		dd 5 dup(0)
		dd 2, 5	dup(0)
		dd offset aTlsv1_3	; "TLSv1"
		dd 5 dup(0)
		dd 2, 5	dup(0)
		dd offset aTlsv1_2_0	; "TLSv1.2"
		dd 5 dup(0)
		dd 4, 5	dup(0)
		dd offset aExp		; "EXP"
		align 20h
		dd 2, 4	dup(0)
		dd offset aExport_0	; "EXPORT"
		dd 6 dup(0)
		dd 2, 4	dup(0)
		dd offset aExport40	; "EXPORT40"
		align 20h
		dd 8, 4	dup(0)
		dd offset aExport56	; "EXPORT56"
		dd 6 dup(0)
		dd 10h,	4 dup(0)
		dd offset aLow		; "LOW"
		align 20h
		dd 20h,	4 dup(0)
		dd offset aMedium	; "MEDIUM"
		dd 6 dup(0)
		dd 40h,	4 dup(0)
		dd offset aHigh		; "HIGH"
		align 20h
		dd 80h,	4 dup(0)
		dd offset aFips		; "FIPS"
		dd 3 dup(0)
		dd 0FFFFFFDFh, 2 dup(0)
		dd 100h, 3 dup(0)
dword_6E44E9A0	dd 10h			; DATA XREF: sub_6E43BC20+9r
		dd 20h,	40h
dword_6E44E9AC	dd 0			; DATA XREF: sub_6E43BC80+7ECo
		dd 80h,	100h, 2	dup(0)
aBeforeSslIniti	db 'before SSL initialization',0
					; DATA XREF: SSL_state_string_long:loc_6E43DA80o
aBeforeAccept_0	db 'before accept initialization',0
					; DATA XREF: SSL_state_string_long:loc_6E43DAC0o
aBeforeConnectI	db 'before connect initialization',0
					; DATA XREF: SSL_state_string_long:loc_6E43D9A0o
		align 4
aSslNegotiation	db 'SSL negotiation finished successfully',0
					; DATA XREF: SSL_state_string_long:loc_6E43D900o
aSslRenegotiate	db 'SSL renegotiate ciphers',0 ; DATA XREF: SSL_state_string_long+39Co
aBeforeConnec_0	db 'before/connect initialization',0
					; DATA XREF: SSL_state_string_long:loc_6E43DB50o
aOkConnectSslIn	db 'ok/connect SSL initialization',0 ; DATA XREF: SSL_state_string_long+22Do
aBeforeAcceptIn	db 'before/accept initialization',0 ; DATA XREF: SSL_state_string_long+142o
aOkAcceptSslIni	db 'ok/accept SSL initialization',0
					; DATA XREF: SSL_state_string_long:loc_6E43D8A0o
aError		db 'error',0            ; DATA XREF: SSL_state_string_long:loc_6E43D6F0o
aSslv3WriteCl_3	db 'SSLv3 write client hello A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D880o
aSslv3WriteCl_2	db 'SSLv3 write client hello B',0
					; DATA XREF: SSL_state_string_long:loc_6E43D720o
aSslv3ReadSer_7	db 'SSLv3 read server hello A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DA60o
aSslv3ReadServe	db 'SSLv3 read server hello B',0 ; DATA XREF: SSL_state_string_long+32Eo
aSslv3ReadSer_2	db 'SSLv3 read server certificate A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D6D0o
aSslv3ReadSer_3	db 'SSLv3 read server certificate B',0
					; DATA XREF: SSL_state_string_long:loc_6E43D990o
aSslv3ReadSer_0	db 'SSLv3 read server key exchange A',0
					; DATA XREF: SSL_state_string_long+35Eo
		align 10h
aSslv3ReadSer_9	db 'SSLv3 read server key exchange B',0
					; DATA XREF: SSL_state_string_long:loc_6E43DB30o
		align 4
aSslv3ReadSer_5	db 'SSLv3 read server certificate request A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DA10o
aSslv3ReadSer_1	db 'SSLv3 read server certificate request B',0
					; DATA XREF: SSL_state_string_long+3BCo
aSslv3ReadSer_4	db 'SSLv3 read server session ticket A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D9C0o
		align 4
aSslv3ReadSer_6	db 'SSLv3 read server session ticket B',0
					; DATA XREF: SSL_state_string_long:loc_6E43DA50o
aSslv3ReadSer_8	db 'SSLv3 read server done A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DB20o
aSslv3ReadSe_10	db 'SSLv3 read server done B',0
					; DATA XREF: SSL_state_string_long:loc_6E43DB90o
		align 10h
aSslv3WriteClie	db 'SSLv3 write client certificate A',0
					; DATA XREF: SSL_state_string_long+D4o
		align 4
aSslv3WriteCl_6	db 'SSLv3 write client certificate B',0
					; DATA XREF: SSL_state_string_long:loc_6E43DAA0o
		align 4
aSslv3WriteCl_5	db 'SSLv3 write client certificate C',0
					; DATA XREF: SSL_state_string_long:loc_6E43D950o
		align 4
aSslv3WriteCl_1	db 'SSLv3 write client certificate D',0
					; DATA XREF: SSL_state_string_long:loc_6E43D700o
		align 10h
aSslv3WriteCl_4	db 'SSLv3 write client key exchange A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D940o
		align 4
aSslv3WriteCl_0	db 'SSLv3 write client key exchange B',0
					; DATA XREF: SSL_state_string_long+2C0o
		align 4
aSslv3WriteCe_2	db 'SSLv3 write certificate verify A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D980o
		align 4
aSslv3WriteCe_1	db 'SSLv3 write certificate verify B',0
					; DATA XREF: SSL_state_string_long+4E2o
		align 10h
aSslv3WriteChan	db 'SSLv3 write change cipher spec A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D928o
		align 4
aSslv3WriteCh_0	db 'SSLv3 write change cipher spec B',0
					; DATA XREF: SSL_state_string_long:loc_6E43DAE0o
aSslv3WriteFini	db 'SSLv3 write finished A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D8D8o
aSslv3WriteFi_0	db 'SSLv3 write finished B',0
					; DATA XREF: SSL_state_string_long:loc_6E43DAF0o
		align 4
aSslv3ReadCha_0	db 'SSLv3 read change cipher spec A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D9D2o
aSslv3ReadChang	db 'SSLv3 read change cipher spec B',0
					; DATA XREF: SSL_state_string_long:loc_6E43D80Ao
aSslv3ReadFin_0	db 'SSLv3 read finished A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D9B0o
aSslv3ReadFinis	db 'SSLv3 read finished B',0
					; DATA XREF: SSL_state_string_long:loc_6E43D836o
aSslv3FlushData	db 'SSLv3 flush data',0 ; DATA XREF: SSL_state_string_long:loc_6E43D9F0o
aSslv3ReadCli_5	db 'SSLv3 read client hello A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DA70o
aSslv3ReadCli_1	db 'SSLv3 read client hello B',0 ; DATA XREF: SSL_state_string_long+48Eo
aSslv3ReadCli_4	db 'SSLv3 read client hello C',0
					; DATA XREF: SSL_state_string_long:loc_6E43DA40o
aSslv3WriteHe_1	db 'SSLv3 write hello request A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DB00o
aSslv3WriteHell	db 'SSLv3 write hello request B',0 ; DATA XREF: SSL_state_string_long+1E0o
aSslv3WriteHe_0	db 'SSLv3 write hello request C',0
					; DATA XREF: SSL_state_string_long:loc_6E43DAD0o
aSslv3WriteSe_1	db 'SSLv3 write server hello A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D860o
aSslv3WriteSe_0	db 'SSLv3 write server hello B',0
					; DATA XREF: SSL_state_string_long:loc_6E43D730o
aSslv3WriteCe_3	db 'SSLv3 write certificate A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DA30o
aSslv3WriteCert	db 'SSLv3 write certificate B',0 ; DATA XREF: SSL_state_string_long+2FEo
aSslv3WriteKe_0	db 'SSLv3 write key exchange A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DB70o
aSslv3WriteKeyE	db 'SSLv3 write key exchange B',0
					; DATA XREF: SSL_state_string_long:loc_6E43DA90o
		align 4
aSslv3WriteCe_0	db 'SSLv3 write certificate request A',0
					; DATA XREF: SSL_state_string_long+3DCo
		align 4
aSslv3WriteCe_4	db 'SSLv3 write certificate request B',0
					; DATA XREF: SSL_state_string_long:loc_6E43DB60o
aSslv3WriteSe_2	db 'SSLv3 write session ticket A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D960o
aSslv3WriteSess	db 'SSLv3 write session ticket B',0 ; DATA XREF: SSL_state_string_long+4BEo
aSslv3WriteSe_3	db 'SSLv3 write server done A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DA20o
aSslv3WriteServ	db 'SSLv3 write server done B',0 ; DATA XREF: SSL_state_string_long+69o
aSslv3ReadClien	db 'SSLv3 read client certificate A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D6E0o
aSslv3ReadCli_2	db 'SSLv3 read client certificate B',0
					; DATA XREF: SSL_state_string_long:loc_6E43D8E0o
aSslv3ReadCli_0	db 'SSLv3 read client key exchange A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D710o
		align 4
aSslv3ReadCli_3	db 'SSLv3 read client key exchange B',0
					; DATA XREF: SSL_state_string_long:loc_6E43D930o
		align 10h
aSslv3ReadCerti	db 'SSLv3 read certificate verify A',0
					; DATA XREF: SSL_state_string_long+270o
aSslv3ReadCer_0	db 'SSLv3 read certificate verify B',0
					; DATA XREF: SSL_state_string_long:loc_6E43D970o
aSslv2V3WriteCl	db 'SSLv2/v3 write client hello A',0 ; DATA XREF: SSL_state_string_long+37Co
aSslv2V3Write_0	db 'SSLv2/v3 write client hello B',0
					; DATA XREF: SSL_state_string_long:loc_6E43DA00o
aSslv2V3ReadS_0	db 'SSLv2/v3 read server hello A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DB80o
aSslv2V3ReadSer	db 'SSLv2/v3 read server hello B',0 ; DATA XREF: SSL_state_string_long+192o
aSslv2V3ReadCli	db 'SSLv2/v3 read client hello A',0
					; DATA XREF: SSL_state_string_long:loc_6E43D9E0o
aSslv2V3ReadC_0	db 'SSLv2/v3 read client hello B',0
					; DATA XREF: SSL_state_string_long:loc_6E43DB40o
aDtls1ReadHel_0	db 'DTLS1 read hello verify request A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DAB0o
		align 4
aDtls1ReadHello	db 'DTLS1 read hello verify request B',0
					; DATA XREF: SSL_state_string_long:loc_6E43D840o
		align 4
aDtls1WriteHe_0	db 'DTLS1 write hello verify request A',0
					; DATA XREF: SSL_state_string_long:loc_6E43DB10o
		align 4
aDtls1WriteHell	db 'DTLS1 write hello verify request B',0
					; DATA XREF: SSL_state_string_long:loc_6E43D740o
aUnknownState	db 'unknown state',0    ; DATA XREF: SSL_state_string_long:loc_6E43D3D0o
aUnknown_1	db 'unknown',0          ; DATA XREF: SSL_rstate_string_long:loc_6E43DBD0o
					; SSL_alert_type_string_long+11o ...
aPinit		db 'PINIT ',0           ; DATA XREF: SSL_state_string+270o
aAinit		db 'AINIT ',0           ; DATA XREF: SSL_state_string+494o
aCinit		db 'CINIT ',0           ; DATA XREF: SSL_state_string:loc_6E43E310o
aSslok		db 'SSLOK ',0           ; DATA XREF: SSL_state_string+3FEo
aSslerr		db 'SSLERR',0           ; DATA XREF: SSL_state_string:loc_6E43E320o
a3flush		db '3FLUSH',0           ; DATA XREF: SSL_state_string:loc_6E43E2C0o
a3wch_a		db '3WCH_A',0           ; DATA XREF: SSL_state_string:loc_6E43E100o
a3wch_b		db '3WCH_B',0           ; DATA XREF: SSL_state_string:loc_6E43DF90o
a3rsh_a		db '3RSH_A',0           ; DATA XREF: SSL_state_string:loc_6E43E2A0o
a3rsh_b		db '3RSH_B',0           ; DATA XREF: SSL_state_string+220o
a3rsc_a		db '3RSC_A',0           ; DATA XREF: SSL_state_string:loc_6E43DF20o
a3rsc_b		db '3RSC_B',0           ; DATA XREF: SSL_state_string:loc_6E43E1C0o
a3rskea		db '3RSKEA',0           ; DATA XREF: SSL_state_string+69o
a3rskeb		db '3RSKEB',0           ; DATA XREF: SSL_state_string:loc_6E43E210o
a3rcr_a		db '3RCR_A',0           ; DATA XREF: SSL_state_string:loc_6E43E120o
a3rcr_b		db '3RCR_B',0           ; DATA XREF: SSL_state_string:loc_6E43DF30o
a3rsd_a		db '3RSD_A',0           ; DATA XREF: SSL_state_string:loc_6E43E300o
a3rsd_b		db '3RSD_B',0           ; DATA XREF: SSL_state_string+2FAo
a3wcc_a		db '3WCC_A',0           ; DATA XREF: SSL_state_string:loc_6E43E220o
a3wcc_b		db '3WCC_B',0           ; DATA XREF: SSL_state_string:loc_6E43E350o
a3wcc_c		db '3WCC_C',0           ; DATA XREF: SSL_state_string:loc_6E43E360o
a3wcc_d		db '3WCC_D',0           ; DATA XREF: SSL_state_string+422o
a3wckea		db '3WCKEA',0           ; DATA XREF: SSL_state_string:loc_6E43E380o
a3wckeb		db '3WCKEB',0           ; DATA XREF: SSL_state_string:loc_6E43E140o
a3wcv_a		db '3WCV_A',0           ; DATA XREF: SSL_state_string:loc_6E43DFB0o
a3wcv_b		db '3WCV_B',0           ; DATA XREF: SSL_state_string+142o
a3wccsa		db '3WCCSA',0           ; DATA XREF: SSL_state_string:loc_6E43E3B2o
a3wccsb		db '3WCCSB',0           ; DATA XREF: SSL_state_string:loc_6E43E0DAo
a3wfina		db '3WFINA',0           ; DATA XREF: SSL_state_string:loc_6E43E1F2o
a3wfinb		db '3WFINB',0           ; DATA XREF: SSL_state_string:loc_6E43E252o
a3rccsa		db '3RCCSA',0           ; DATA XREF: SSL_state_string:loc_6E43E3C4o
a3rccsb		db '3RCCSB',0           ; DATA XREF: SSL_state_string:loc_6E43E0AAo
a3rfina		db '3RFINA',0           ; DATA XREF: SSL_state_string:loc_6E43E2E2o
a3rfinb		db '3RFINB',0           ; DATA XREF: SSL_state_string:loc_6E43E372o
a3whr_a		db '3WHR_A',0           ; DATA XREF: SSL_state_string+1D0o
a3whr_b		db '3WHR_B',0           ; DATA XREF: SSL_state_string:loc_6E43E240o
a3whr_c		db '3WHR_C',0           ; DATA XREF: SSL_state_string:loc_6E43E0E0o
a3rch_a		db '3RCH_A',0           ; DATA XREF: SSL_state_string:loc_6E43E200o
a3rch_b		db '3RCH_B',0           ; DATA XREF: SSL_state_string:loc_6E43E2F0o
a3rch_c		db '3RCH_C',0           ; DATA XREF: SSL_state_string:loc_6E43E340o
a3wsh_a		db '3WSH_A',0           ; DATA XREF: SSL_state_string:loc_6E43DF70o
a3wsh_b		db '3WSH_B',0           ; DATA XREF: SSL_state_string:loc_6E43E290o
a3wsc_a		db '3WSC_A',0           ; DATA XREF: SSL_state_string+D4o
a3wsc_b		db '3WSC_B',0           ; DATA XREF: SSL_state_string:loc_6E43E260o
a3wskea		db '3WSKEA',0           ; DATA XREF: SSL_state_string:loc_6E43E180o
a3wskeb		db '3WSKEB',0           ; DATA XREF: SSL_state_string:loc_6E43DF40o
a3wcr_a		db '3WCR_A',0           ; DATA XREF: SSL_state_string:loc_6E43E1D0o
a3wcr_b		db '3WCR_B',0           ; DATA XREF: SSL_state_string+32Ao
a3wsd_a		db '3WSD_A',0           ; DATA XREF: SSL_state_string:loc_6E43E390o
a3wsd_b		db '3WSD_B',0           ; DATA XREF: SSL_state_string+464o
a3rcc_a		db '3RCC_A',0           ; DATA XREF: SSL_state_string:loc_6E43E280o
a3rcc_b		db '3RCC_B',0           ; DATA XREF: SSL_state_string:loc_6E43E270o
a3rckea		db '3RCKEA',0           ; DATA XREF: SSL_state_string:loc_6E43E2B0o
a3rckeb		db '3RCKEB',0           ; DATA XREF: SSL_state_string:loc_6E43E1A0o
a3rcv_a		db '3RCV_A',0           ; DATA XREF: SSL_state_string:loc_6E43DF60o
a3rcv_b		db '3RCV_B',0           ; DATA XREF: SSL_state_string+192o
a23wcha		db '23WCHA',0           ; DATA XREF: SSL_state_string:loc_6E43DF50o
a23wchb		db '23WCHB',0           ; DATA XREF: SSL_state_string:loc_6E43E1E0o
a23rsha		db '23RSHA',0           ; DATA XREF: SSL_state_string+2C0o
					; SSL_state_string:loc_6E43E3A0o
a23rcha		db '23RCHA',0           ; DATA XREF: SSL_state_string:loc_6E43DF80o
a23rchb		db '23RCHB',0           ; DATA XREF: SSL_state_string:loc_6E43E2D0o
aDrchva		db 'DRCHVA',0           ; DATA XREF: SSL_state_string:loc_6E43E230o
aDrchvb		db 'DRCHVB',0           ; DATA XREF: SSL_state_string:loc_6E43E160o
aDwchva		db 'DWCHVA',0           ; DATA XREF: SSL_state_string:loc_6E43DFA0o
aDwchvb		db 'DWCHVB',0           ; DATA XREF: SSL_state_string:loc_6E43E330o
aUnkwn		db 'UNKWN ',0           ; DATA XREF: SSL_state_string:loc_6E43DCD0o
aWarning	db 'warning',0          ; DATA XREF: SSL_alert_type_string_long:loc_6E43E3F0o
aFatal		db 'fatal',0            ; DATA XREF: SSL_alert_type_string_long:loc_6E43E400o
aW		db 'W',0                ; DATA XREF: SSL_alert_type_string:loc_6E43E430o
asc_6E44F493	db 'F',0                ; DATA XREF: SSL_alert_type_string:loc_6E43E440o
aU		db 'U',0                ; DATA XREF: SSL_alert_type_string+11o
aUk		db 'UK',0               ; DATA XREF: SSL_alert_desc_string:loc_6E43E470o
					; .rdata:6E44F924o ...
aRh		db 'RH',0               ; DATA XREF: .rdata:off_6E44F4A4o
aRb		db 'RB',0               ; DATA XREF: .rdata:6E44F4A8o
aRd		db 'RD',0               ; DATA XREF: .rdata:6E44F4ACo
		align 4
off_6E44F4A4	dd offset aRh		; DATA XREF: SSL_rstate_string+11r
					; "RH"
		dd offset aRb		; "RB"
		dd offset aRd		; "RD"
aCloseNotify	db 'close notify',0     ; DATA XREF: .rdata:off_6E44F6E0o
aUnexpected_mes	db 'unexpected_message',0 ; DATA XREF: .rdata:6E44F708o
aBadRecordMac	db 'bad record mac',0   ; DATA XREF: .rdata:6E44F730o
aDecryptionFa_1	db 'decryption failed',0 ; DATA XREF: .rdata:6E44F734o
aRecordOverflow	db 'record overflow',0  ; DATA XREF: .rdata:6E44F738o
aDecompressionF	db 'decompression failure',0 ; DATA XREF: .rdata:6E44F758o
aHandshakeFailu	db 'handshake failure',0 ; DATA XREF: .rdata:6E44F780o
aNoCertificate	db 'no certificate',0   ; DATA XREF: .rdata:6E44F784o
aBadCertificate	db 'bad certificate',0  ; DATA XREF: .rdata:6E44F788o
aUnsupportedCer	db 'unsupported certificate',0 ; DATA XREF: .rdata:6E44F78Co
aCertificateRev	db 'certificate revoked',0 ; DATA XREF: .rdata:6E44F790o
aCertificateExp	db 'certificate expired',0 ; DATA XREF: .rdata:6E44F794o
aCertificateUnk	db 'certificate unknown',0 ; DATA XREF: .rdata:6E44F798o
aIllegalParamet	db 'illegal parameter',0 ; DATA XREF: .rdata:6E44F79Co
aUnknownCa	db 'unknown CA',0       ; DATA XREF: .rdata:6E44F7A0o
aAccessDenied	db 'access denied',0    ; DATA XREF: .rdata:6E44F7A4o
aDecodeError	db 'decode error',0     ; DATA XREF: .rdata:6E44F7A8o
aDecryptError	db 'decrypt error',0    ; DATA XREF: .rdata:6E44F7ACo
aExportRestrict	db 'export restriction',0 ; DATA XREF: .rdata:6E44F7D0o
aProtocolVersio	db 'protocol version',0 ; DATA XREF: .rdata:6E44F7F8o
aInsufficientSe	db 'insufficient security',0 ; DATA XREF: .rdata:6E44F7FCo
aInternalError	db 'internal error',0   ; DATA XREF: .rdata:6E44F820o
aUserCanceled	db 'user canceled',0    ; DATA XREF: .rdata:6E44F848o
aNoRenegotiat_0	db 'no renegotiation',0 ; DATA XREF: .rdata:6E44F870o
aUnsupportedExt	db 'unsupported extension',0 ; DATA XREF: .rdata:6E44F898o
aCertificateUno	db 'certificate unobtainable',0 ; DATA XREF: .rdata:6E44F89Co
aUnrecognizedNa	db 'unrecognized name',0 ; DATA XREF: .rdata:6E44F8A0o
		align 4
aBadCertifica_0	db 'bad certificate status response',0 ; DATA XREF: .rdata:6E44F8A4o
aBadCertifica_1	db 'bad certificate hash value',0 ; DATA XREF: .rdata:6E44F8A8o
aUnknownPskIden	db 'unknown PSK identity',0 ; DATA XREF: .rdata:6E44F8ACo
		align 10h
off_6E44F6E0	dd offset aCloseNotify	; DATA XREF: SSL_alert_desc_string_long+Br
					; "close notify"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnexpected_mes ; "unexpected_message"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aBadRecordMac	; "bad record mac"
		dd offset aDecryptionFa_1 ; "decryption	failed"
		dd offset aRecordOverflow ; "record overflow"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aDecompressionF ; "decompression failure"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aHandshakeFailu ; "handshake failure"
		dd offset aNoCertificate ; "no certificate"
		dd offset aBadCertificate ; "bad certificate"
		dd offset aUnsupportedCer ; "unsupported certificate"
		dd offset aCertificateRev ; "certificate revoked"
		dd offset aCertificateExp ; "certificate expired"
		dd offset aCertificateUnk ; "certificate unknown"
		dd offset aIllegalParamet ; "illegal parameter"
		dd offset aUnknownCa	; "unknown CA"
		dd offset aAccessDenied	; "access denied"
		dd offset aDecodeError	; "decode error"
		dd offset aDecryptError	; "decrypt error"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aExportRestrict ; "export restriction"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aProtocolVersio ; "protocol version"
		dd offset aInsufficientSe ; "insufficient security"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aInternalError ; "internal error"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUserCanceled	; "user	canceled"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aNoRenegotiat_0 ; "no	renegotiation"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnknown_1	; "unknown"
		dd offset aUnsupportedExt ; "unsupported extension"
		dd offset aCertificateUno ; "certificate unobtainable"
		dd offset aUnrecognizedNa ; "unrecognized name"
		dd offset aBadCertifica_0 ; "bad certificate status response"
		dd offset aBadCertifica_1 ; "bad certificate hash value"
		dd offset aUnknownPskIden ; "unknown PSK identity"
dword_6E44F8B0	dd 55004E43h, 4D42004Dh, 434400h, 44004F52h, 46480046h
					; DATA XREF: .rdata:off_6E44F920o
					; .rdata:6E44F948o ...
		dd 434E00h, 55004342h, 52430043h, 454300h, 49005543h, 41430050h
		dd 444100h, 43004544h, 52450059h, 565000h, 49005349h, 53550045h
		dd 524E00h, 43004555h, 4E55004Fh, 524200h, 55004842h, 50h
		dd 5 dup(0)
off_6E44F920	dd offset dword_6E44F8B0 ; DATA	XREF: SSL_alert_desc_string+Br
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset dword_6E44F8B0+3
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset dword_6E44F8B0+6
		dd offset dword_6E44F8B0+9
		dd offset dword_6E44F8B0+0Ch
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset dword_6E44F8B0+0Fh
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset dword_6E44F8B0+12h
		dd offset dword_6E44F8B0+15h
		dd offset dword_6E44F8B0+18h
		dd offset dword_6E44F8B0+1Bh
		dd offset dword_6E44F8B0+1Eh
		dd offset dword_6E44F8B0+21h
		dd offset dword_6E44F8B0+24h
		dd offset dword_6E44F8B0+27h
		dd offset dword_6E44F8B0+2Ah
		dd offset dword_6E44F8B0+2Dh
		dd offset dword_6E44F8B0+30h
		dd offset dword_6E44F8B0+33h
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset dword_6E44F8B0+36h
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset dword_6E44F8B0+39h
		dd offset dword_6E44F8B0+3Ch
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset dword_6E44F8B0+3Fh
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset dword_6E44F8B0+42h
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset dword_6E44F8B0+45h
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset aUk		; "UK"
		dd offset dword_6E44F8B0+48h
		dd offset dword_6E44F8B0+4Bh
		dd offset dword_6E44F8B0+4Eh
		dd offset dword_6E44F8B0+51h
		dd offset dword_6E44F8B0+54h
		dd offset dword_6E44F8B0+57h
aReadHeader	db 'read header',0      ; DATA XREF: .rdata:off_6E44FB10o
aReadBody	db 'read body',0        ; DATA XREF: .rdata:6E44FB14o
aReadDone	db 'read done',0        ; DATA XREF: .rdata:6E44FB18o
off_6E44FB10	dd offset aReadHeader	; DATA XREF: SSL_rstate_string_long+11r
					; "read	header"
		dd offset aReadBody	; "read	body"
		dd offset aReadDone	; "read	done"
		align 10h
aSsl_rsa_c	db 'ssl_rsa.c',0        ; DATA XREF: sub_6E43E4E0+A5o
					; sub_6E43E4E0+148o ...
		align 4
aSsl_asn1_c	db 'ssl_asn1.c',0       ; DATA XREF: d2i_SSL_SESSION+A1o
					; d2i_SSL_SESSION+320o
		align 4
aSslv2_1	db 'SSLv2',0            ; DATA XREF: SSL_SESSION_print:loc_6E443010o
aSslv3_1	db 'SSLv3',0            ; DATA XREF: SSL_SESSION_print:loc_6E443120o
aTlsv1_2_1	db 'TLSv1.2',0          ; DATA XREF: SSL_SESSION_print:loc_6E443130o
aTlsv1_1_0	db 'TLSv1.1',0          ; DATA XREF: SSL_SESSION_print:loc_6E4430B0o
aTlsv1_0	db 'TLSv1',0            ; DATA XREF: SSL_SESSION_print:loc_6E4431E0o
aDtlsv1		db 'DTLSv1',0           ; DATA XREF: SSL_SESSION_print:loc_6E4431EAo
aDtlsv1Bad	db 'DTLSv1-bad',0       ; DATA XREF: SSL_SESSION_print:loc_6E443249o
aUnknown_2	db 'unknown',0          ; DATA XREF: SSL_SESSION_print+7Bo
aNone_1		db 'None',0             ; DATA XREF: SSL_SESSION_print:loc_6E443279o
					; SSL_SESSION_print:loc_6E443460o ...
aSslSession	db 'SSL-Session:',0Ah,0 ; DATA XREF: SSL_SESSION_print+16o
aProtocolS	db '    Protocol  : %s',0Ah,0 ; DATA XREF: SSL_SESSION_print+119o
aCipher06lx	db '    Cipher    : %06lX',0Ah,0 ; DATA XREF: SSL_SESSION_print+35Co
aSessionId	db '    Session-ID: ',0 ; DATA XREF: SSL_SESSION_print:loc_6E443056o
aCipher04lx	db '    Cipher    : %04lX',0Ah,0 ; DATA XREF: SSL_SESSION_print+263o
aCipherS	db '    Cipher    : %s',0Ah,0 ; DATA XREF: SSL_SESSION_print+142o
aSessionIdCtx	db 0Ah			; DATA XREF: SSL_SESSION_print:loc_6E4430C0o
		db '    Session-ID-ctx: ',0
a02x		db '%02X',0             ; DATA XREF: SSL_SESSION_print+190o
					; SSL_SESSION_print+204o ...
aMasterKey	db 0Ah			; DATA XREF: SSL_SESSION_print:loc_6E443180o
		db '    Master-Key: ',0
aKeyArg		db 0Ah			; DATA XREF: SSL_SESSION_print:loc_6E4431F4o
		db '    Key-Arg   : ',0
aPskIdentity	db 0Ah			; DATA XREF: SSL_SESSION_print:loc_6E443291o
		db '    PSK identity: ',0
aS		db '%s',0               ; DATA XREF: SSL_SESSION_print+3BBo
					; SSL_SESSION_print+3FDo ...
aPskIdentityHin	db 0Ah			; DATA XREF: SSL_SESSION_print+3D3o
		db '    PSK identity hint: ',0
aSrpUsername	db 0Ah			; DATA XREF: SSL_SESSION_print+415o
		db '    SRP username: ',0
		align 4
aTlsSessionTi_0	db 0Ah			; DATA XREF: SSL_SESSION_print+56Eo
		db '    TLS session ticket lifetime hint: %ld (seconds)',0
aTlsSessionTick	db 0Ah			; DATA XREF: SSL_SESSION_print+46Fo
		db '    TLS session ticket:',0Ah,0
aCompressionD	db 0Ah			; DATA XREF: SSL_SESSION_print+5CFo
		db '    Compression: %d',0
aCompressionDS	db 0Ah			; DATA XREF: SSL_SESSION_print+D9o
		db '    Compression: %d (%s)',0
aStartTimeLd	db 0Ah			; DATA XREF: SSL_SESSION_print+5A8o
		db '    Start Time: %ld',0
asc_6E44FD07	db 0Ah,0		; DATA XREF: SSL_SESSION_print:loc_6E4433F5o
aTimeoutLdSec	db 0Ah			; DATA XREF: SSL_SESSION_print+4DDo
		db '    Timeout   : %ld (sec)',0
aVerifyReturnCo	db '    Verify return code: ',0 ; DATA XREF: SSL_SESSION_print+50Do
aLdS		db '%ld (%s)',0Ah,0     ; DATA XREF: SSL_SESSION_print+541o
aSsl_txt_c	db 'ssl_txt.c',0        ; DATA XREF: SSL_SESSION_print_fp+68o
		align 4
aMd5		db 'MD5',0              ; DATA XREF: SSL_library_init+E0o
					; SSL_library_init+FCo
aSsl2Md5_0	db 'ssl2-md5',0         ; DATA XREF: SSL_library_init+F0o
aSsl3Md5_0	db 'ssl3-md5',0         ; DATA XREF: SSL_library_init+10Co
aSha1_0		db 'SHA1',0             ; DATA XREF: SSL_library_init+125o
aSsl3Sha1_0	db 'ssl3-sha1',0        ; DATA XREF: SSL_library_init+135o
aRsaSha1	db 'RSA-SHA1',0         ; DATA XREF: SSL_library_init+141o
aRsaSha12	db 'RSA-SHA1-2',0       ; DATA XREF: SSL_library_init+151o
aDsaSha1	db 'DSA-SHA1',0         ; DATA XREF: SSL_library_init+19Eo
					; SSL_library_init+1BAo ...
aDsaSha1Old	db 'DSA-SHA1-old',0     ; DATA XREF: SSL_library_init+1AEo
aDss1		db 'DSS1',0             ; DATA XREF: SSL_library_init+1CAo
aDss1_0		db 'dss1',0             ; DATA XREF: SSL_library_init+1E6o
		align 10h
off_6E44FDB0	dd offset loc_6E443960	; DATA XREF: sub_6E4438C0+54r
		dd offset loc_6E443A30	; jump table for switch	statement
		dd offset loc_6E4439A0
		dd offset loc_6E443A00
		dd offset loc_6E4439C0
		dd offset loc_6E443A30
		dd offset loc_6E443A30
		dd offset loc_6E4439E0
		dd offset loc_6E443930
off_6E44FDD4	dd offset loc_6E443B10	; DATA XREF: sub_6E443A70+54r
		dd offset loc_6E443BC0	; jump table for switch	statement
		dd offset loc_6E443B50
		dd offset loc_6E443B70
		dd offset loc_6E443B90
		dd offset loc_6E443BC0
		dd offset loc_6E443BC0
		dd offset loc_6E443AE0
aBio_ssl_c	db 'bio_ssl.c',0        ; DATA XREF: sub_6E443C00+12o
					; sub_6E443C00+A8o ...
		align 10h
off_6E44FE00	dd offset loc_6E444140,	offset loc_6E443E10, offset loc_6E444140
					; DATA XREF: sub_6E443D00+29r
		dd offset loc_6E443D30,	offset loc_6E444140, offset loc_6E444140 ; jump	table for switch statement
		dd offset loc_6E443DB0,	offset loc_6E4440C0, offset loc_6E4440B0
		dd offset loc_6E444130,	offset loc_6E444050, offset loc_6E443EF0
		dd offset loc_6E443EA0,	offset loc_6E444090, offset loc_6E443D30
		dd offset loc_6E443FE0,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E443F70
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E443F50,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444158, offset loc_6E443F30
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444030
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444140
		dd offset loc_6E444140,	offset loc_6E444140, offset loc_6E444000
		dd offset loc_6E444020,	offset loc_6E443E70
dword_6E450000	dd 6C7373h		; DATA XREF: .data:6E449A44o
aAppDataInHands	db 'app data in handshake',0 ; DATA XREF: .data:6E449A84o
		align 4
aAttemptToReuse	db 'attempt to reuse session in different context',0
					; DATA XREF: .data:6E449A8Co
aBadAlertRecord	db 'bad alert record',0 ; DATA XREF: .data:6E449A94o
aBadAuthenticat	db 'bad authentication type',0 ; DATA XREF: .data:6E449A9Co
aBadChangeCiphe	db 'bad change cipher spec',0 ; DATA XREF: .data:6E449AA4o
aBadChecksum	db 'bad checksum',0     ; DATA XREF: .data:6E449AACo
aBadDataReturne	db 'bad data returned by callback',0 ; DATA XREF: .data:6E449AB4o
aBadDecompressi	db 'bad decompression',0 ; DATA XREF: .data:6E449ABCo
aBadDhGLength	db 'bad dh g length',0  ; DATA XREF: .data:6E449AC4o
aBadDhGValue	db 'bad dh g value',0   ; DATA XREF: .data:6E449ACCo
aBadDhPubKeyLen	db 'bad dh pub key length',0 ; DATA XREF: .data:6E449AD4o
aBadDhPubKeyVal	db 'bad dh pub key value',0 ; DATA XREF: .data:6E449ADCo
aBadDhPLength	db 'bad dh p length',0  ; DATA XREF: .data:6E449AE4o
aBadDhPValue	db 'bad dh p value',0   ; DATA XREF: .data:6E449AECo
aBadDigestLengt	db 'bad digest length',0 ; DATA XREF: .data:6E449AF4o
aBadDsaSignatur	db 'bad dsa signature',0 ; DATA XREF: .data:6E449AFCo
aBadEccCert	db 'bad ecc cert',0     ; DATA XREF: .data:6E449B04o
aBadEcdsaSignat	db 'bad ecdsa signature',0 ; DATA XREF: .data:6E449B0Co
aBadEcpoint	db 'bad ecpoint',0      ; DATA XREF: .data:6E449B14o
aBadHandshakeLe	db 'bad handshake length',0 ; DATA XREF: .data:6E449B1Co
aBadHelloReques	db 'bad hello request',0 ; DATA XREF: .data:6E449B24o
aBadLength	db 'bad length',0       ; DATA XREF: .data:6E449B2Co
aBadMacDecode	db 'bad mac decode',0   ; DATA XREF: .data:6E449B34o
aBadMacLength	db 'bad mac length',0   ; DATA XREF: .data:6E449B3Co
aBadMessageType	db 'bad message type',0 ; DATA XREF: .data:6E449B44o
aBadPacketLengt	db 'bad packet length',0 ; DATA XREF: .data:6E449B4Co
aBadProtocolVer	db 'bad protocol version number',0 ; DATA XREF: .data:6E449B54o
aBadPskIdentity	db 'bad psk identity hint length',0 ; DATA XREF: .data:6E449B5Co
aBadResponseArg	db 'bad response argument',0 ; DATA XREF: .data:6E449B64o
aBadRsaDecrypt	db 'bad rsa decrypt',0  ; DATA XREF: .data:6E449B6Co
aBadRsaEncrypt	db 'bad rsa encrypt',0  ; DATA XREF: .data:6E449B74o
aBadRsaELength	db 'bad rsa e length',0 ; DATA XREF: .data:6E449B7Co
aBadRsaModulusL	db 'bad rsa modulus length',0 ; DATA XREF: .data:6E449B84o
aBadRsaSignatur	db 'bad rsa signature',0 ; DATA XREF: .data:6E449B8Co
aBadSignature	db 'bad signature',0    ; DATA XREF: .data:6E449B94o
aBadSrpALength	db 'bad srp a length',0 ; DATA XREF: .data:6E449B9Co
aBadSrpBLength	db 'bad srp b length',0 ; DATA XREF: .data:6E449BA4o
aBadSrpGLength	db 'bad srp g length',0 ; DATA XREF: .data:6E449BACo
aBadSrpNLength	db 'bad srp n length',0 ; DATA XREF: .data:6E449BB4o
aBadSrpParamete	db 'bad srp parameters',0 ; DATA XREF: .data:6E449BBCo
aBadSrpSLength	db 'bad srp s length',0 ; DATA XREF: .data:6E449BC4o
aBadSrtpMkiValu	db 'bad srtp mki value',0 ; DATA XREF: .data:6E449BCCo
		align 4
aBadSrtpProtect	db 'bad srtp protection profile list',0 ; DATA XREF: .data:6E449BD4o
aBadSslFiletype	db 'bad ssl filetype',0 ; DATA XREF: .data:6E449BDCo
aBadSslSessionI	db 'bad ssl session id length',0 ; DATA XREF: .data:6E449BE4o
aBadState	db 'bad state',0        ; DATA XREF: .data:6E449BECo
aBadWriteRetry	db 'bad write retry',0  ; DATA XREF: .data:6E449BF4o
aBioNotSet	db 'bio not set',0      ; DATA XREF: .data:6E449BFCo
aBlockCipherPad	db 'block cipher pad is wrong',0 ; DATA XREF: .data:6E449C04o
aBnLib		db 'bn lib',0           ; DATA XREF: .data:6E449C0Co
aCaDnLengthMism	db 'ca dn length mismatch',0 ; DATA XREF: .data:6E449C14o
aCaDnTooLong	db 'ca dn too long',0   ; DATA XREF: .data:6E449C1Co
aCcsReceivedEar	db 'ccs received early',0 ; DATA XREF: .data:6E449C24o
aCertificateVer	db 'certificate verify failed',0 ; DATA XREF: .data:6E449C2Co
aCertLengthMism	db 'cert length mismatch',0 ; DATA XREF: .data:6E449C34o
aChallengeIsDif	db 'challenge is different',0 ; DATA XREF: .data:6E449C3Co
aCipherCodeWron	db 'cipher code wrong length',0 ; DATA XREF: .data:6E449C44o
aCipherOrHashUn	db 'cipher or hash unavailable',0 ; DATA XREF: .data:6E449C4Co
aCipherTableSrc	db 'cipher table src error',0 ; DATA XREF: .data:6E449C54o
aClienthelloTls	db 'clienthello tlsext',0 ; DATA XREF: .data:6E449C5Co
aCompressedLeng	db 'compressed length too long',0 ; DATA XREF: .data:6E449C64o
aCompressionDis	db 'compression disabled',0 ; DATA XREF: .data:6E449C6Co
aCompressionFai	db 'compression failure',0 ; DATA XREF: .data:6E449C74o
		align 4
aCompressionIdN	db 'compression id not within private range',0 ; DATA XREF: .data:6E449C7Co
aCompressionLib	db 'compression library error',0 ; DATA XREF: .data:6E449C84o
aConnectionIdIs	db 'connection id is different',0 ; DATA XREF: .data:6E449C8Co
aConnectionType	db 'connection type not set',0 ; DATA XREF: .data:6E449C94o
aCookieMismatch	db 'cookie mismatch',0  ; DATA XREF: .data:6E449C9Co
aDataBetweenCcs	db 'data between ccs and finished',0 ; DATA XREF: .data:6E449CA4o
aDataLengthTooL	db 'data length too long',0 ; DATA XREF: .data:6E449CACo
aDecryptionFail	db 'decryption failed',0 ; DATA XREF: .data:6E449CB4o
		align 4
aDecryptionFa_0	db 'decryption failed or bad record mac',0 ; DATA XREF: .data:6E449CBCo
aDhKeyTooSmall	db 'dh key too small',0 ; DATA XREF: .data:6E449CC4o
		align 10h
aDhPublicValueL	db 'dh public value length is wrong',0 ; DATA XREF: .data:6E449CCCo
aDigestCheckFai	db 'digest check failed',0 ; DATA XREF: .data:6E449CD4o
aDtlsMessageToo	db 'dtls message too big',0 ; DATA XREF: .data:6E449CDCo
aDuplicateCompr	db 'duplicate compression id',0 ; DATA XREF: .data:6E449CE4o
		align 4
aEccCertNotForK	db 'ecc cert not for key agreement',0 ; DATA XREF: .data:6E449CECo
aEccCertNotForS	db 'ecc cert not for signing',0 ; DATA XREF: .data:6E449CF4o
aEccCertShouldH	db 'ecc cert should have rsa signature',0 ; DATA XREF: .data:6E449CFCo
		align 10h
aEccCertShoul_0	db 'ecc cert should have sha1 signature',0 ; DATA XREF: .data:6E449D04o
aEcgroupTooLarg	db 'ecgroup too large for cipher',0 ; DATA XREF: .data:6E449D0Co
		align 4
aEmptySrtpProte	db 'empty srtp protection profile list',0 ; DATA XREF: .data:6E449D14o
aEncryptedLengt	db 'encrypted length too long',0 ; DATA XREF: .data:6E449D1Co
aErrorGeneratin	db 'error generating tmp rsa key',0 ; DATA XREF: .data:6E449D24o
aErrorInReceive	db 'error in received cipher list',0 ; DATA XREF: .data:6E449D2Co
aExcessiveMessa	db 'excessive message size',0 ; DATA XREF: .data:6E449D34o
aExtraDataInMes	db 'extra data in message',0 ; DATA XREF: .data:6E449D3Co
aGotAFinBeforeA	db 'got a fin before a ccs',0 ; DATA XREF: .data:6E449D44o
aGotNextProtoBe	db 'got next proto before a ccs',0 ; DATA XREF: .data:6E449D4Co
aGotNextProtoWi	db 'got next proto without seeing extension',0 ; DATA XREF: .data:6E449D54o
aHttpsProxyRequ	db 'https proxy request',0 ; DATA XREF: .data:6E449D5Co
aHttpRequest	db 'http request',0     ; DATA XREF: .data:6E449D64o
aIllegalPadding	db 'illegal padding',0  ; DATA XREF: .data:6E449D6Co
aInappropriateF	db 'inappropriate fallback',0 ; DATA XREF: .data:6E449D74o
aInconsistentCo	db 'inconsistent compression',0 ; DATA XREF: .data:6E449D7Co
aInvalidChallen	db 'invalid challenge length',0 ; DATA XREF: .data:6E449D84o
aInvalidCommand	db 'invalid command',0  ; DATA XREF: .data:6E449D8Co
aInvalidCompres	db 'invalid compression algorithm',0 ; DATA XREF: .data:6E449D94o
aInvalidPurpose	db 'invalid purpose',0  ; DATA XREF: .data:6E449D9Co
aInvalidSrpUser	db 'invalid srp username',0 ; DATA XREF: .data:6E449DA4o
aInvalidStatusR	db 'invalid status response',0 ; DATA XREF: .data:6E449DACo
aInvalidTicketK	db 'invalid ticket keys length',0 ; DATA XREF: .data:6E449DB4o
aInvalidTrust	db 'invalid trust',0    ; DATA XREF: .data:6E449DBCo
aKeyArgTooLong	db 'key arg too long',0 ; DATA XREF: .data:6E449DC4o
aKrb5_0		db 'krb5',0             ; DATA XREF: .data:6E449DCCo
aKrb5ClientCcPr	db 'krb5 client cc principal (no tkt?)',0 ; DATA XREF: .data:6E449DD4o
aKrb5ClientGetC	db 'krb5 client get cred',0 ; DATA XREF: .data:6E449DDCo
aKrb5ClientInit	db 'krb5 client init',0 ; DATA XREF: .data:6E449DE4o
		align 4
aKrb5ClientMk_r	db 'krb5 client mk_req (expired tkt?)',0 ; DATA XREF: .data:6E449DECo
aKrb5ServerBadT	db 'krb5 server bad ticket',0 ; DATA XREF: .data:6E449DF4o
aKrb5ServerInit	db 'krb5 server init',0 ; DATA XREF: .data:6E449DFCo
		align 10h
aKrb5ServerRd_r	db 'krb5 server rd_req (keytab perms?)',0 ; DATA XREF: .data:6E449E04o
aKrb5ServerTktE	db 'krb5 server tkt expired',0 ; DATA XREF: .data:6E449E0Co
aKrb5ServerTktN	db 'krb5 server tkt not yet valid',0 ; DATA XREF: .data:6E449E14o
aKrb5ServerTktS	db 'krb5 server tkt skew',0 ; DATA XREF: .data:6E449E1Co
aLengthMismatch	db 'length mismatch',0  ; DATA XREF: .data:6E449E24o
aLengthTooShort	db 'length too short',0 ; DATA XREF: .data:6E449E2Co
aLibraryBug	db 'library bug',0      ; DATA XREF: .data:6E449E34o
aLibraryHasNoCi	db 'library has no ciphers',0 ; DATA XREF: .data:6E449E3Co
aMessageTooLong	db 'message too long',0 ; DATA XREF: .data:6E449E44o
aMissingDhDsaCe	db 'missing dh dsa cert',0 ; DATA XREF: .data:6E449E4Co
aMissingDhKey	db 'missing dh key',0   ; DATA XREF: .data:6E449E54o
aMissingDhRsaCe	db 'missing dh rsa cert',0 ; DATA XREF: .data:6E449E5Co
aMissingDsaSign	db 'missing dsa signing cert',0 ; DATA XREF: .data:6E449E64o
aMissingExportT	db 'missing export tmp dh key',0 ; DATA XREF: .data:6E449E6Co
aMissingExpor_0	db 'missing export tmp rsa key',0 ; DATA XREF: .data:6E449E74o
aMissingRsaCert	db 'missing rsa certificate',0 ; DATA XREF: .data:6E449E7Co
aMissingRsaEncr	db 'missing rsa encrypting cert',0 ; DATA XREF: .data:6E449E84o
aMissingRsaSign	db 'missing rsa signing cert',0 ; DATA XREF: .data:6E449E8Co
aCanTFindSrpSer	db 'can',27h,'t find SRP server param',0 ; DATA XREF: .data:6E449E94o
aMissingTmpDhKe	db 'missing tmp dh key',0 ; DATA XREF: .data:6E449E9Co
aMissingTmpEcdh	db 'missing tmp ecdh key',0 ; DATA XREF: .data:6E449EA4o
aMissingTmpRsaK	db 'missing tmp rsa key',0 ; DATA XREF: .data:6E449EACo
aMissingTmpRsaP	db 'missing tmp rsa pkey',0 ; DATA XREF: .data:6E449EB4o
aMissingVerifyM	db 'missing verify message',0 ; DATA XREF: .data:6E449EBCo
aMultipleSgcRes	db 'multiple sgc restarts',0 ; DATA XREF: .data:6E449EC4o
aNonSslv2Initia	db 'non sslv2 initial packet',0 ; DATA XREF: .data:6E449ECCo
aNoCertificates	db 'no certificates returned',0 ; DATA XREF: .data:6E449ED4o
aNoCertificateA	db 'no certificate assigned',0 ; DATA XREF: .data:6E449EDCo
aNoCertificateR	db 'no certificate returned',0 ; DATA XREF: .data:6E449EE4o
aNoCertificateS	db 'no certificate set',0 ; DATA XREF: .data:6E449EECo
aNoCertificat_0	db 'no certificate specified',0 ; DATA XREF: .data:6E449EF4o
aNoCiphersAvail	db 'no ciphers available',0 ; DATA XREF: .data:6E449EFCo
aNoCiphersPasse	db 'no ciphers passed',0 ; DATA XREF: .data:6E449F04o
aNoCiphersSpeci	db 'no ciphers specified',0 ; DATA XREF: .data:6E449F0Co
aNoCipherList	db 'no cipher list',0   ; DATA XREF: .data:6E449F14o
aNoCipherMatch	db 'no cipher match',0  ; DATA XREF: .data:6E449F1Co
aNoClientCertMe	db 'no client cert method',0 ; DATA XREF: .data:6E449F24o
aNoClientCertRe	db 'no client cert received',0 ; DATA XREF: .data:6E449F2Co
aNoCompressionS	db 'no compression specified',0 ; DATA XREF: .data:6E449F34o
		align 10h
aPeerHavenTSent	db 'Peer haven',27h,'t sent GOST certificate, required for selected ciph'
					; DATA XREF: .data:6E449F3Co
		db 'ersuite',0
aNoMethodSpecif	db 'no method specified',0 ; DATA XREF: .data:6E449F44o
aNoPrivatekey	db 'no privatekey',0    ; DATA XREF: .data:6E449F4Co
aNoPrivateKeyAs	db 'no private key assigned',0 ; DATA XREF: .data:6E449F54o
aNoProtocolsAva	db 'no protocols available',0 ; DATA XREF: .data:6E449F5Co
aNoPublickey	db 'no publickey',0     ; DATA XREF: .data:6E449F64o
aNoRenegotiatio	db 'no renegotiation',0 ; DATA XREF: .data:6E449F6Co
		align 4
aDigestRequredF	db 'digest requred for handshake isn',27h,'t computed',0
					; DATA XREF: .data:6E449F74o
aNoSharedCipher	db 'no shared cipher',0 ; DATA XREF: .data:6E449F7Co
aNoSrtpProfiles	db 'no srtp profiles',0 ; DATA XREF: .data:6E449F84o
aNoVerifyCallba	db 'no verify callback',0 ; DATA XREF: .data:6E449F8Co
aNullSslCtx	db 'null ssl ctx',0     ; DATA XREF: .data:6E449F94o
aNullSslMethodP	db 'null ssl method passed',0 ; DATA XREF: .data:6E449F9Co
		align 10h
aOldSessionCiph	db 'old session cipher not returned',0 ; DATA XREF: .data:6E449FA4o
aOldSessionComp	db 'old session compression algorithm not returned',0
					; DATA XREF: .data:6E449FACo
aOnlyTlsAllowed	db 'only tls allowed in fips mode',0 ; DATA XREF: .data:6E449FB4o
aOpaquePrfInput	db 'opaque PRF input too long',0 ; DATA XREF: .data:6E449FBCo
aPacketLengthTo	db 'packet length too long',0 ; DATA XREF: .data:6E449FC4o
aParseTlsext	db 'parse tlsext',0     ; DATA XREF: .data:6E449FCCo
aPathTooLong	db 'path too long',0    ; DATA XREF: .data:6E449FD4o
		align 4
aPeerDidNotRetu	db 'peer did not return a certificate',0 ; DATA XREF: .data:6E449FDCo
aPeerError	db 'peer error',0       ; DATA XREF: .data:6E449FE4o
aPeerErrorCerti	db 'peer error certificate',0 ; DATA XREF: .data:6E449FECo
aPeerErrorNoCer	db 'peer error no certificate',0 ; DATA XREF: .data:6E449FF4o
aPeerErrorNoCip	db 'peer error no cipher',0 ; DATA XREF: .data:6E449FFCo
		align 10h
aPeerErrorUnsup	db 'peer error unsupported certificate type',0 ; DATA XREF: .data:6E44A004o
aPreMacLengthTo	db 'pre mac length too long',0 ; DATA XREF: .data:6E44A00Co
aProblemsMappin	db 'problems mapping cipher functions',0 ; DATA XREF: .data:6E44A014o
aProtocolIsShut	db 'protocol is shutdown',0 ; DATA XREF: .data:6E44A01Co
aPskIdentityNot	db 'psk identity not found',0 ; DATA XREF: .data:6E44A024o
aPskNoClientCb	db 'psk no client cb',0 ; DATA XREF: .data:6E44A02Co
aPskNoServerCb	db 'psk no server cb',0 ; DATA XREF: .data:6E44A034o
aPublicKeyEncry	db 'public key encrypt error',0 ; DATA XREF: .data:6E44A03Co
aPublicKeyIsNot	db 'public key is not rsa',0 ; DATA XREF: .data:6E44A044o
aPublicKeyNotRs	db 'public key not rsa',0 ; DATA XREF: .data:6E44A04Co
aReadBioNotSet	db 'read bio not set',0 ; DATA XREF: .data:6E44A054o
aReadTimeoutExp	db 'read timeout expired',0 ; DATA XREF: .data:6E44A05Co
aReadWrongPacke	db 'read wrong packet type',0 ; DATA XREF: .data:6E44A064o
aRecordLengthMi	db 'record length mismatch',0 ; DATA XREF: .data:6E44A06Co
aRecordTooLarge	db 'record too large',0 ; DATA XREF: .data:6E44A074o
aRecordTooSmall	db 'record too small',0 ; DATA XREF: .data:6E44A07Co
aRenegotiateExt	db 'renegotiate ext too long',0 ; DATA XREF: .data:6E44A084o
aRenegotiationE	db 'renegotiation encoding err',0 ; DATA XREF: .data:6E44A08Co
aRenegotiationM	db 'renegotiation mismatch',0 ; DATA XREF: .data:6E44A094o
aRequiredCipher	db 'required cipher missing',0 ; DATA XREF: .data:6E44A09Co
		align 4
aRequiredCompre	db 'required compresssion algorithm missing',0 ; DATA XREF: .data:6E44A0A4o
aReuseCertLengt	db 'reuse cert length not zero',0 ; DATA XREF: .data:6E44A0ACo
aReuseCertTypeN	db 'reuse cert type not zero',0 ; DATA XREF: .data:6E44A0B4o
aReuseCipherLis	db 'reuse cipher list not zero',0 ; DATA XREF: .data:6E44A0BCo
		align 4
aScsvReceivedWh	db 'scsv received when renegotiating',0 ; DATA XREF: .data:6E44A0C4o
aServerhelloTls	db 'serverhello tlsext',0 ; DATA XREF: .data:6E44A0CCo
aSessionIdConte	db 'session id context uninitialized',0 ; DATA XREF: .data:6E44A0D4o
aShortRead	db 'short read',0       ; DATA XREF: .data:6E44A0DCo
aSignatureAlgor	db 'signature algorithms error',0 ; DATA XREF: .data:6E44A0E4o
		align 10h
aSignatureForNo	db 'signature for non signing certificate',0 ; DATA XREF: .data:6E44A0ECo
aErrorWithTheSr	db 'error with the srp params',0 ; DATA XREF: .data:6E44A0F4o
aSrtpCouldNotAl	db 'srtp could not allocate profiles',0 ; DATA XREF: .data:6E44A0FCo
		align 4
aSrtpProtection	db 'srtp protection profile list too long',0 ; DATA XREF: .data:6E44A104o
		align 4
aSrtpUnknownPro	db 'srtp unknown protection profile',0 ; DATA XREF: .data:6E44A10Co
aSsl23DoingSess	db 'ssl23 doing session id reuse',0 ; DATA XREF: .data:6E44A114o
aSsl2Connection	db 'ssl2 connection id too long',0 ; DATA XREF: .data:6E44A11Co
		align 4
aSsl3ExtInvalid	db 'ssl3 ext invalid ecpointformat',0 ; DATA XREF: .data:6E44A124o
aSsl3ExtInval_0	db 'ssl3 ext invalid servername',0 ; DATA XREF: .data:6E44A12Co
		align 4
aSsl3ExtInval_1	db 'ssl3 ext invalid servername type',0 ; DATA XREF: .data:6E44A134o
aSsl3SessionIdT	db 'ssl3 session id too long',0 ; DATA XREF: .data:6E44A13Co
aSsl3SessionI_0	db 'ssl3 session id too short',0 ; DATA XREF: .data:6E44A144o
aSslv3AlertBadC	db 'sslv3 alert bad certificate',0 ; DATA XREF: .data:6E44A14Co
aSslv3AlertBadR	db 'sslv3 alert bad record mac',0 ; DATA XREF: .data:6E44A154o
		align 10h
aSslv3AlertCert	db 'sslv3 alert certificate expired',0 ; DATA XREF: .data:6E44A15Co
aSslv3AlertCe_0	db 'sslv3 alert certificate revoked',0 ; DATA XREF: .data:6E44A164o
aSslv3AlertCe_1	db 'sslv3 alert certificate unknown',0 ; DATA XREF: .data:6E44A16Co
aSslv3AlertDeco	db 'sslv3 alert decompression failure',0 ; DATA XREF: .data:6E44A174o
aSslv3AlertHand	db 'sslv3 alert handshake failure',0 ; DATA XREF: .data:6E44A17Co
aSslv3AlertIlle	db 'sslv3 alert illegal parameter',0 ; DATA XREF: .data:6E44A184o
aSslv3AlertNoCe	db 'sslv3 alert no certificate',0 ; DATA XREF: .data:6E44A18Co
		align 4
aSslv3AlertUnex	db 'sslv3 alert unexpected message',0 ; DATA XREF: .data:6E44A194o
		align 4
aSslv3AlertUnsu	db 'sslv3 alert unsupported certificate',0 ; DATA XREF: .data:6E44A19Co
aSslCtxHasNoDef	db 'ssl ctx has no default ssl version',0 ; DATA XREF: .data:6E44A1A4o
aSslHandshakeFa	db 'ssl handshake failure',0 ; DATA XREF: .data:6E44A1ACo
aSslLibraryHasN	db 'ssl library has no ciphers',0 ; DATA XREF: .data:6E44A1B4o
aSslSessionIdCa	db 'ssl session id callback failed',0 ; DATA XREF: .data:6E44A1BCo
aSslSessionIdCo	db 'ssl session id conflict',0 ; DATA XREF: .data:6E44A1C4o
		align 4
aSslSessionId_0	db 'ssl session id context too long',0 ; DATA XREF: .data:6E44A1CCo
aSslSessionIdHa	db 'ssl session id has bad length',0 ; DATA XREF: .data:6E44A1D4o
aSslSessionIdIs	db 'ssl session id is different',0 ; DATA XREF: .data:6E44A1DCo
aTlsv1AlertAcce	db 'tlsv1 alert access denied',0 ; DATA XREF: .data:6E44A1E4o
aTlsv1AlertDeco	db 'tlsv1 alert decode error',0 ; DATA XREF: .data:6E44A1ECo
aTlsv1AlertDecr	db 'tlsv1 alert decryption failed',0 ; DATA XREF: .data:6E44A1F4o
aTlsv1AlertDe_0	db 'tlsv1 alert decrypt error',0 ; DATA XREF: .data:6E44A1FCo
		align 4
aTlsv1AlertExpo	db 'tlsv1 alert export restriction',0 ; DATA XREF: .data:6E44A204o
		align 4
aTlsv1AlertInap	db 'tlsv1 alert inappropriate fallback',0 ; DATA XREF: .data:6E44A20Co
		align 4
aTlsv1AlertInsu	db 'tlsv1 alert insufficient security',0 ; DATA XREF: .data:6E44A214o
aTlsv1AlertInte	db 'tlsv1 alert internal error',0 ; DATA XREF: .data:6E44A21Co
aTlsv1AlertNoRe	db 'tlsv1 alert no renegotiation',0 ; DATA XREF: .data:6E44A224o
aTlsv1AlertProt	db 'tlsv1 alert protocol version',0 ; DATA XREF: .data:6E44A22Co
aTlsv1AlertReco	db 'tlsv1 alert record overflow',0 ; DATA XREF: .data:6E44A234o
aTlsv1AlertUnkn	db 'tlsv1 alert unknown ca',0 ; DATA XREF: .data:6E44A23Co
aTlsv1AlertUser	db 'tlsv1 alert user cancelled',0 ; DATA XREF: .data:6E44A244o
		align 10h
aTlsv1BadCertif	db 'tlsv1 bad certificate hash value',0 ; DATA XREF: .data:6E44A24Co
		align 4
aTlsv1BadCert_0	db 'tlsv1 bad certificate status response',0 ; DATA XREF: .data:6E44A254o
		align 4
aTlsv1Certifica	db 'tlsv1 certificate unobtainable',0 ; DATA XREF: .data:6E44A25Co
aTlsv1Unrecogni	db 'tlsv1 unrecognized name',0 ; DATA XREF: .data:6E44A264o
aTlsv1Unsupport	db 'tlsv1 unsupported extension',0 ; DATA XREF: .data:6E44A26Co
		align 10h
aTlsClientCertR	db 'tls client cert req with anon cipher',0 ; DATA XREF: .data:6E44A274o
		align 4
aPeerDoesNotAcc	db 'peer does not accept heartbeats',0 ; DATA XREF: .data:6E44A27Co
aHeartbeatReque	db 'heartbeat request already pending',0 ; DATA XREF: .data:6E44A284o
aTlsIllegalExpo	db 'tls illegal exporter label',0 ; DATA XREF: .data:6E44A28Co
		align 4
aTlsInvalidEcpo	db 'tls invalid ecpointformat list',0 ; DATA XREF: .data:6E44A294o
		align 4
aTlsPeerDidNotR	db 'tls peer did not respond with certificate list',0
					; DATA XREF: .data:6E44A29Co
		align 4
aTlsRsaEncrypte	db 'tls rsa encrypted value length is wrong',0 ; DATA XREF: .data:6E44A2A4o
aTriedToUseUnsu	db 'tried to use unsupported cipher',0 ; DATA XREF: .data:6E44A2ACo
aUnableToDecode	db 'unable to decode dh certs',0 ; DATA XREF: .data:6E44A2B4o
aUnableToDeco_0	db 'unable to decode ecdh certs',0 ; DATA XREF: .data:6E44A2BCo
aUnableToExtrac	db 'unable to extract public key',0 ; DATA XREF: .data:6E44A2C4o
aUnableToFindDh	db 'unable to find dh parameters',0 ; DATA XREF: .data:6E44A2CCo
aUnableToFindEc	db 'unable to find ecdh parameters',0 ; DATA XREF: .data:6E44A2D4o
		align 10h
aUnableToFindPu	db 'unable to find public key parameters',0 ; DATA XREF: .data:6E44A2DCo
aUnableToFindSs	db 'unable to find ssl method',0 ; DATA XREF: .data:6E44A2E4o
		align 10h
aUnableToLoadSs	db 'unable to load ssl2 md5 routines',0 ; DATA XREF: .data:6E44A2ECo
		align 4
aUnableToLoad_0	db 'unable to load ssl3 md5 routines',0 ; DATA XREF: .data:6E44A2F4o
		align 4
aUnableToLoad_1	db 'unable to load ssl3 sha1 routines',0 ; DATA XREF: .data:6E44A2FCo
aUnexpectedMess	db 'unexpected message',0 ; DATA XREF: .data:6E44A304o
aUnexpectedReco	db 'unexpected record',0 ; DATA XREF: .data:6E44A30Co
aUninitialized	db 'uninitialized',0    ; DATA XREF: .data:6E44A314o
aUnknownAlertTy	db 'unknown alert type',0 ; DATA XREF: .data:6E44A31Co
aUnknownCertifi	db 'unknown certificate type',0 ; DATA XREF: .data:6E44A324o
aUnknownCipherR	db 'unknown cipher returned',0 ; DATA XREF: .data:6E44A32Co
aUnknownCipherT	db 'unknown cipher type',0 ; DATA XREF: .data:6E44A334o
aUnknownDigest	db 'unknown digest',0   ; DATA XREF: .data:6E44A33Co
aUnknownKeyExch	db 'unknown key exchange type',0 ; DATA XREF: .data:6E44A344o
aUnknownPkeyTyp	db 'unknown pkey type',0 ; DATA XREF: .data:6E44A34Co
aUnknownProtoco	db 'unknown protocol',0 ; DATA XREF: .data:6E44A354o
aUnknownRemoteE	db 'unknown remote error type',0 ; DATA XREF: .data:6E44A35Co
aUnknownSslVers	db 'unknown ssl version',0 ; DATA XREF: .data:6E44A364o
aUnknownState_0	db 'unknown state',0    ; DATA XREF: .data:6E44A36Co
		align 10h
aUnsafeLegacyRe	db 'unsafe legacy renegotiation disabled',0 ; DATA XREF: .data:6E44A374o
aUnsupportedCip	db 'unsupported cipher',0 ; DATA XREF: .data:6E44A37Co
aUnsupportedCom	db 'unsupported compression algorithm',0 ; DATA XREF: .data:6E44A384o
aUnsupportedDig	db 'unsupported digest type',0 ; DATA XREF: .data:6E44A38Co
aUnsupportedEll	db 'unsupported elliptic curve',0 ; DATA XREF: .data:6E44A394o
aUnsupportedPro	db 'unsupported protocol',0 ; DATA XREF: .data:6E44A39Co
aUnsupportedSsl	db 'unsupported ssl version',0 ; DATA XREF: .data:6E44A3A4o
aUnsupportedSta	db 'unsupported status type',0 ; DATA XREF: .data:6E44A3ACo
aUseSrtpNotNego	db 'use srtp not negotiated',0 ; DATA XREF: .data:6E44A3B4o
aWriteBioNotSet	db 'write bio not set',0 ; DATA XREF: .data:6E44A3BCo
aWrongCipherRet	db 'wrong cipher returned',0 ; DATA XREF: .data:6E44A3C4o
aWrongMessageTy	db 'wrong message type',0 ; DATA XREF: .data:6E44A3CCo
aWrongNumberOfK	db 'wrong number of key bits',0 ; DATA XREF: .data:6E44A3D4o
aWrongSignature	db 'wrong signature length',0 ; DATA XREF: .data:6E44A3DCo
aWrongSignatu_0	db 'wrong signature size',0 ; DATA XREF: .data:6E44A3E4o
aWrongSignatu_1	db 'wrong signature type',0 ; DATA XREF: .data:6E44A3ECo
aWrongSslVersio	db 'wrong ssl version',0 ; DATA XREF: .data:6E44A3F4o
aWrongVersionNu	db 'wrong version number',0 ; DATA XREF: .data:6E44A3FCo
aX509Lib	db 'x509 lib',0         ; DATA XREF: .data:6E44A404o
		align 10h
aX509Verificati	db 'x509 verification setup problems',0 ; DATA XREF: .data:6E44A40Co
aClient_certifi	db 'CLIENT_CERTIFICATE',0 ; DATA XREF: .data:6E44A424o
aClient_finishe	db 'CLIENT_FINISHED',0  ; DATA XREF: .data:6E44A42Co
aClient_hello	db 'CLIENT_HELLO',0     ; DATA XREF: .data:6E44A434o
aClient_master_	db 'CLIENT_MASTER_KEY',0 ; DATA XREF: .data:6E44A43Co
aD2i_ssl_sessio	db 'd2i_SSL_SESSION',0  ; DATA XREF: .data:6E44A444o
aDo_dtls1_write	db 'DO_DTLS1_WRITE',0   ; DATA XREF: .data:6E44A44Co
aDo_ssl3_write	db 'DO_SSL3_WRITE',0    ; DATA XREF: .data:6E44A454o
aDtls1_accept	db 'DTLS1_ACCEPT',0     ; DATA XREF: .data:6E44A45Co
aDtls1_add_cert	db 'DTLS1_ADD_CERT_TO_BUF',0 ; DATA XREF: .data:6E44A464o
aDtls1_buffer_r	db 'DTLS1_BUFFER_RECORD',0 ; DATA XREF: .data:6E44A46Co
aDtls1_check_ti	db 'DTLS1_CHECK_TIMEOUT_NUM',0 ; DATA XREF: .data:6E44A474o
aDtls1_client_h	db 'DTLS1_CLIENT_HELLO',0 ; DATA XREF: .data:6E44A47Co
aDtls1_connect	db 'DTLS1_CONNECT',0    ; DATA XREF: .data:6E44A484o
aDtls1_enc	db 'DTLS1_ENC',0        ; DATA XREF: .data:6E44A48Co
aDtls1_get_hell	db 'DTLS1_GET_HELLO_VERIFY',0 ; DATA XREF: .data:6E44A494o
aDtls1_get_mess	db 'DTLS1_GET_MESSAGE',0 ; DATA XREF: .data:6E44A49Co
aDtls1_get_me_0	db 'DTLS1_GET_MESSAGE_FRAGMENT',0 ; DATA XREF: .data:6E44A4A4o
aDtls1_get_reco	db 'DTLS1_GET_RECORD',0 ; DATA XREF: .data:6E44A4ACo
aDtls1_handle_t	db 'DTLS1_HANDLE_TIMEOUT',0 ; DATA XREF: .data:6E44A4B4o
aDtls1_heartbea	db 'DTLS1_HEARTBEAT',0  ; DATA XREF: .data:6E44A4BCo
aDtls1_output_c	db 'DTLS1_OUTPUT_CERT_CHAIN',0 ; DATA XREF: .data:6E44A4C4o
aDtls1_preproce	db 'DTLS1_PREPROCESS_FRAGMENT',0 ; DATA XREF: .data:6E44A4CCo
		align 4
aDtls1_process_	db 'DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE',0 ; DATA XREF: .data:6E44A4D4o
aDtls1_proces_0	db 'DTLS1_PROCESS_RECORD',0 ; DATA XREF: .data:6E44A4DCo
aDtls1_read_byt	db 'DTLS1_READ_BYTES',0 ; DATA XREF: .data:6E44A4E4o
aDtls1_read_fai	db 'DTLS1_READ_FAILED',0 ; DATA XREF: .data:6E44A4ECo
		align 4
aDtls1_send_cer	db 'DTLS1_SEND_CERTIFICATE_REQUEST',0 ; DATA XREF: .data:6E44A4F4o
aDtls1_send_cli	db 'DTLS1_SEND_CLIENT_CERTIFICATE',0 ; DATA XREF: .data:6E44A4FCo
		align 4
aDtls1_send_c_0	db 'DTLS1_SEND_CLIENT_KEY_EXCHANGE',0 ; DATA XREF: .data:6E44A504o
aDtls1_send_c_1	db 'DTLS1_SEND_CLIENT_VERIFY',0 ; DATA XREF: .data:6E44A50Co
aDtls1_send_hel	db 'DTLS1_SEND_HELLO_VERIFY_REQUEST',0 ; DATA XREF: .data:6E44A514o
aDtls1_send_ser	db 'DTLS1_SEND_SERVER_CERTIFICATE',0 ; DATA XREF: .data:6E44A51Co
aDtls1_send_s_0	db 'DTLS1_SEND_SERVER_HELLO',0 ; DATA XREF: .data:6E44A524o
		align 4
aDtls1_send_s_1	db 'DTLS1_SEND_SERVER_KEY_EXCHANGE',0 ; DATA XREF: .data:6E44A52Co
aDtls1_write_ap	db 'DTLS1_WRITE_APP_DATA_BYTES',0 ; DATA XREF: .data:6E44A534o
aGet_client_fin	db 'GET_CLIENT_FINISHED',0 ; DATA XREF: .data:6E44A53Co
aGet_client_hel	db 'GET_CLIENT_HELLO',0 ; DATA XREF: .data:6E44A544o
aGet_client_mas	db 'GET_CLIENT_MASTER_KEY',0 ; DATA XREF: .data:6E44A54Co
aGet_server_fin	db 'GET_SERVER_FINISHED',0 ; DATA XREF: .data:6E44A554o
aGet_server_hel	db 'GET_SERVER_HELLO',0 ; DATA XREF: .data:6E44A55Co
aGet_server_ver	db 'GET_SERVER_VERIFY',0 ; DATA XREF: .data:6E44A564o
aI2d_ssl_sessio	db 'i2d_SSL_SESSION',0  ; DATA XREF: .data:6E44A56Co
aRead_n		db 'READ_N',0           ; DATA XREF: .data:6E44A574o
aRequest_certif	db 'REQUEST_CERTIFICATE',0 ; DATA XREF: .data:6E44A57Co
aServer_finish	db 'SERVER_FINISH',0    ; DATA XREF: .data:6E44A584o
aServer_hello	db 'SERVER_HELLO',0     ; DATA XREF: .data:6E44A58Co
aServer_verify	db 'SERVER_VERIFY',0    ; DATA XREF: .data:6E44A594o
aSsl23_accept	db 'SSL23_ACCEPT',0     ; DATA XREF: .data:6E44A59Co
aSsl23_client_h	db 'SSL23_CLIENT_HELLO',0 ; DATA XREF: .data:6E44A5A4o
aSsl23_connect	db 'SSL23_CONNECT',0    ; DATA XREF: .data:6E44A5ACo
aSsl23_get_clie	db 'SSL23_GET_CLIENT_HELLO',0 ; DATA XREF: .data:6E44A5B4o
aSsl23_get_serv	db 'SSL23_GET_SERVER_HELLO',0 ; DATA XREF: .data:6E44A5BCo
aSsl23_peek	db 'SSL23_PEEK',0       ; DATA XREF: .data:6E44A5C4o
aSsl23_read	db 'SSL23_READ',0       ; DATA XREF: .data:6E44A5CCo
aSsl23_write	db 'SSL23_WRITE',0      ; DATA XREF: .data:6E44A5D4o
aSsl2_accept	db 'SSL2_ACCEPT',0      ; DATA XREF: .data:6E44A5DCo
aSsl2_connect	db 'SSL2_CONNECT',0     ; DATA XREF: .data:6E44A5E4o
aSsl2_enc_init	db 'SSL2_ENC_INIT',0    ; DATA XREF: .data:6E44A5ECo
aSsl2_generate_	db 'SSL2_GENERATE_KEY_MATERIAL',0 ; DATA XREF: .data:6E44A5F4o
aSsl2_peek	db 'SSL2_PEEK',0        ; DATA XREF: .data:6E44A5FCo
aSsl2_read	db 'SSL2_READ',0        ; DATA XREF: .data:6E44A604o
aSsl2_read_inte	db 'SSL2_READ_INTERNAL',0 ; DATA XREF: .data:6E44A60Co
aSsl2_set_certi	db 'SSL2_SET_CERTIFICATE',0 ; DATA XREF: .data:6E44A614o
aSsl2_write	db 'SSL2_WRITE',0       ; DATA XREF: .data:6E44A61Co
aSsl3_accept	db 'SSL3_ACCEPT',0      ; DATA XREF: .data:6E44A624o
aSsl3_add_cert_	db 'SSL3_ADD_CERT_TO_BUF',0 ; DATA XREF: .data:6E44A62Co
aSsl3_callback_	db 'SSL3_CALLBACK_CTRL',0 ; DATA XREF: .data:6E44A634o
aSsl3_change_ci	db 'SSL3_CHANGE_CIPHER_STATE',0 ; DATA XREF: .data:6E44A63Co
aSsl3_check_cer	db 'SSL3_CHECK_CERT_AND_ALGORITHM',0 ; DATA XREF: .data:6E44A644o
aSsl3_check_cli	db 'SSL3_CHECK_CLIENT_HELLO',0 ; DATA XREF: .data:6E44A64Co
aSsl3_client_he	db 'SSL3_CLIENT_HELLO',0 ; DATA XREF: .data:6E44A654o
aSsl3_connect	db 'SSL3_CONNECT',0     ; DATA XREF: .data:6E44A65Co
aSsl3_ctrl	db 'SSL3_CTRL',0        ; DATA XREF: .data:6E44A664o
aSsl3_ctx_ctrl	db 'SSL3_CTX_CTRL',0    ; DATA XREF: .data:6E44A66Co
aSsl3_digest_ca	db 'SSL3_DIGEST_CACHED_RECORDS',0 ; DATA XREF: .data:6E44A674o
aSsl3_do_change	db 'SSL3_DO_CHANGE_CIPHER_SPEC',0 ; DATA XREF: .data:6E44A67Co
aSsl3_enc	db 'SSL3_ENC',0         ; DATA XREF: .data:6E44A684o
aSsl3_check_fin	db 'SSL3_CHECK_FINISHED',0 ; DATA XREF: .data:6E44A68Co
aSsl3_generate_	db 'SSL3_GENERATE_KEY_BLOCK',0 ; DATA XREF: .data:6E44A694o
aSsl3_generat_0	db 'ssl3_generate_master_secret',0 ; DATA XREF: .data:6E44A69Co
aSsl3_get_certi	db 'SSL3_GET_CERTIFICATE_REQUEST',0 ; DATA XREF: .data:6E44A6A4o
aSsl3_get_cert_	db 'SSL3_GET_CERT_STATUS',0 ; DATA XREF: .data:6E44A6ACo
aSsl3_get_cer_0	db 'SSL3_GET_CERT_VERIFY',0 ; DATA XREF: .data:6E44A6B4o
aSsl3_get_clien	db 'SSL3_GET_CLIENT_CERTIFICATE',0 ; DATA XREF: .data:6E44A6BCo
aSsl3_get_cli_0	db 'SSL3_GET_CLIENT_HELLO',0 ; DATA XREF: .data:6E44A6C4o
aSsl3_get_cli_1	db 'SSL3_GET_CLIENT_KEY_EXCHANGE',0 ; DATA XREF: .data:6E44A6CCo
aSsl3_get_finis	db 'SSL3_GET_FINISHED',0 ; DATA XREF: .data:6E44A6D4o
aSsl3_get_key_e	db 'SSL3_GET_KEY_EXCHANGE',0 ; DATA XREF: .data:6E44A6DCo
aSsl3_get_messa	db 'SSL3_GET_MESSAGE',0 ; DATA XREF: .data:6E44A6E4o
aSsl3_get_new_s	db 'SSL3_GET_NEW_SESSION_TICKET',0 ; DATA XREF: .data:6E44A6ECo
aSsl3_get_next_	db 'SSL3_GET_NEXT_PROTO',0 ; DATA XREF: .data:6E44A6F4o
aSsl3_get_recor	db 'SSL3_GET_RECORD',0  ; DATA XREF: .data:6E44A6FCo
aSsl3_get_serve	db 'SSL3_GET_SERVER_CERTIFICATE',0 ; DATA XREF: .data:6E44A704o
aSsl3_get_ser_0	db 'SSL3_GET_SERVER_DONE',0 ; DATA XREF: .data:6E44A70Co
aSsl3_get_ser_1	db 'SSL3_GET_SERVER_HELLO',0 ; DATA XREF: .data:6E44A714o
aSsl3_handshake	db 'ssl3_handshake_mac',0 ; DATA XREF: .data:6E44A71Co
aSsl3_new_sessi	db 'SSL3_NEW_SESSION_TICKET',0 ; DATA XREF: .data:6E44A724o
aSsl3_output_ce	db 'SSL3_OUTPUT_CERT_CHAIN',0 ; DATA XREF: .data:6E44A72Co
aSsl3_peek	db 'SSL3_PEEK',0        ; DATA XREF: .data:6E44A734o
aSsl3_read_byte	db 'SSL3_READ_BYTES',0  ; DATA XREF: .data:6E44A73Co
aSsl3_read_n	db 'SSL3_READ_N',0      ; DATA XREF: .data:6E44A744o
aSsl3_send_cert	db 'SSL3_SEND_CERTIFICATE_REQUEST',0 ; DATA XREF: .data:6E44A74Co
aSsl3_send_clie	db 'SSL3_SEND_CLIENT_CERTIFICATE',0 ; DATA XREF: .data:6E44A754o
aSsl3_send_cl_0	db 'SSL3_SEND_CLIENT_KEY_EXCHANGE',0 ; DATA XREF: .data:6E44A75Co
aSsl3_send_cl_1	db 'SSL3_SEND_CLIENT_VERIFY',0 ; DATA XREF: .data:6E44A764o
aSsl3_send_serv	db 'SSL3_SEND_SERVER_CERTIFICATE',0 ; DATA XREF: .data:6E44A76Co
aSsl3_send_se_0	db 'SSL3_SEND_SERVER_HELLO',0 ; DATA XREF: .data:6E44A774o
aSsl3_send_se_1	db 'SSL3_SEND_SERVER_KEY_EXCHANGE',0 ; DATA XREF: .data:6E44A77Co
aSsl3_setup_key	db 'SSL3_SETUP_KEY_BLOCK',0 ; DATA XREF: .data:6E44A784o
aSsl3_setup_rea	db 'SSL3_SETUP_READ_BUFFER',0 ; DATA XREF: .data:6E44A78Co
aSsl3_setup_wri	db 'SSL3_SETUP_WRITE_BUFFER',0 ; DATA XREF: .data:6E44A794o
aSsl3_write_byt	db 'SSL3_WRITE_BYTES',0 ; DATA XREF: .data:6E44A79Co
aSsl3_write_pen	db 'SSL3_WRITE_PENDING',0 ; DATA XREF: .data:6E44A7A4o
		align 4
aSsl_add_client	db 'SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT',0 ; DATA XREF: .data:6E44A7ACo
aSsl_add_clie_0	db 'SSL_ADD_CLIENTHELLO_TLSEXT',0 ; DATA XREF: .data:6E44A7B4o
		align 4
aSsl_add_clie_1	db 'SSL_ADD_CLIENTHELLO_USE_SRTP_EXT',0 ; DATA XREF: .data:6E44A7BCo
		align 4
aSsl_add_dir_ce	db 'SSL_add_dir_cert_subjects_to_stack',0 ; DATA XREF: .data:6E44A7C4o
		align 10h
aSsl_add_file_c	db 'SSL_add_file_cert_subjects_to_stack',0 ; DATA XREF: .data:6E44A7CCo
aSsl_add_server	db 'SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT',0 ; DATA XREF: .data:6E44A7D4o
aSsl_add_serv_0	db 'SSL_ADD_SERVERHELLO_TLSEXT',0 ; DATA XREF: .data:6E44A7DCo
		align 4
aSsl_add_serv_1	db 'SSL_ADD_SERVERHELLO_USE_SRTP_EXT',0 ; DATA XREF: .data:6E44A7E4o
aSsl_bad_method	db 'SSL_BAD_METHOD',0   ; DATA XREF: .data:6E44A7ECo
aSsl_bytes_to_c	db 'SSL_BYTES_TO_CIPHER_LIST',0 ; DATA XREF: .data:6E44A7F4o
aSsl_cert_dup	db 'SSL_CERT_DUP',0     ; DATA XREF: .data:6E44A7FCo
aSsl_cert_inst	db 'SSL_CERT_INST',0    ; DATA XREF: .data:6E44A804o
aSsl_cert_insta	db 'SSL_CERT_INSTANTIATE',0 ; DATA XREF: .data:6E44A80Co
aSsl_cert_new	db 'SSL_CERT_NEW',0     ; DATA XREF: .data:6E44A814o
aSsl_check_priv	db 'SSL_check_private_key',0 ; DATA XREF: .data:6E44A81Co
aSsl_check_serv	db 'SSL_CHECK_SERVERHELLO_TLSEXT',0 ; DATA XREF: .data:6E44A824o
		align 10h
aSsl_check_srvr	db 'SSL_CHECK_SRVR_ECC_CERT_AND_ALG',0 ; DATA XREF: .data:6E44A82Co
aSsl_cipher_pro	db 'SSL_CIPHER_PROCESS_RULESTR',0 ; DATA XREF: .data:6E44A834o
aSsl_cipher_str	db 'SSL_CIPHER_STRENGTH_SORT',0 ; DATA XREF: .data:6E44A83Co
aSsl_clear	db 'SSL_clear',0        ; DATA XREF: .data:6E44A844o
		align 10h
aSsl_comp_add_c	db 'SSL_COMP_add_compression_method',0 ; DATA XREF: .data:6E44A84Co
aSsl_create_cip	db 'SSL_CREATE_CIPHER_LIST',0 ; DATA XREF: .data:6E44A854o
aSsl_ctrl	db 'SSL_ctrl',0         ; DATA XREF: .data:6E44A85Co
aSsl_ctx_check_	db 'SSL_CTX_check_private_key',0 ; DATA XREF: .data:6E44A864o
aSsl_ctx_make_p	db 'SSL_CTX_MAKE_PROFILES',0 ; DATA XREF: .data:6E44A86Co
aSsl_ctx_new	db 'SSL_CTX_new',0      ; DATA XREF: .data:6E44A874o
aSsl_ctx_set_ci	db 'SSL_CTX_set_cipher_list',0 ; DATA XREF: .data:6E44A87Co
aSsl_ctx_set_cl	db 'SSL_CTX_set_client_cert_engine',0 ; DATA XREF: .data:6E44A884o
aSsl_ctx_set_pu	db 'SSL_CTX_set_purpose',0 ; DATA XREF: .data:6E44A88Co
		align 4
aSsl_ctx_set_se	db 'SSL_CTX_set_session_id_context',0 ; DATA XREF: .data:6E44A894o
aSsl_ctx_set_ss	db 'SSL_CTX_set_ssl_version',0 ; DATA XREF: .data:6E44A89Co
aSsl_ctx_set_tr	db 'SSL_CTX_set_trust',0 ; DATA XREF: .data:6E44A8A4o
aSsl_ctx_use_ce	db 'SSL_CTX_use_certificate',0 ; DATA XREF: .data:6E44A8ACo
aSsl_ctx_use__0	db 'SSL_CTX_use_certificate_ASN1',0 ; DATA XREF: .data:6E44A8B4o
		align 4
aSsl_ctx_use__1	db 'SSL_CTX_use_certificate_chain_file',0 ; DATA XREF: .data:6E44A8BCo
aSsl_ctx_use__2	db 'SSL_CTX_use_certificate_file',0 ; DATA XREF: .data:6E44A8C4o
aSsl_ctx_use_pr	db 'SSL_CTX_use_PrivateKey',0 ; DATA XREF: .data:6E44A8CCo
aSsl_ctx_use__3	db 'SSL_CTX_use_PrivateKey_ASN1',0 ; DATA XREF: .data:6E44A8D4o
aSsl_ctx_use__4	db 'SSL_CTX_use_PrivateKey_file',0 ; DATA XREF: .data:6E44A8DCo
aSsl_ctx_use_ps	db 'SSL_CTX_use_psk_identity_hint',0 ; DATA XREF: .data:6E44A8E4o
aSsl_ctx_use_rs	db 'SSL_CTX_use_RSAPrivateKey',0 ; DATA XREF: .data:6E44A8ECo
		align 10h
aSsl_ctx_use__5	db 'SSL_CTX_use_RSAPrivateKey_ASN1',0 ; DATA XREF: .data:6E44A8F4o
		align 10h
aSsl_ctx_use__6	db 'SSL_CTX_use_RSAPrivateKey_file',0 ; DATA XREF: .data:6E44A8FCo
aSsl_do_handsha	db 'SSL_do_handshake',0 ; DATA XREF: .data:6E44A904o
aSsl_get_new_se	db 'SSL_GET_NEW_SESSION',0 ; DATA XREF: .data:6E44A90Co
aSsl_get_prev_s	db 'SSL_GET_PREV_SESSION',0 ; DATA XREF: .data:6E44A914o
aSsl_get_server	db 'SSL_GET_SERVER_SEND_CERT',0 ; DATA XREF: .data:6E44A91Co
aSsl_get_serv_0	db 'SSL_GET_SERVER_SEND_PKEY',0 ; DATA XREF: .data:6E44A924o
aSsl_get_sign_p	db 'SSL_GET_SIGN_PKEY',0 ; DATA XREF: .data:6E44A92Co
aSsl_init_wbio_	db 'SSL_INIT_WBIO_BUFFER',0 ; DATA XREF: .data:6E44A934o
aSsl_load_clien	db 'SSL_load_client_CA_file',0 ; DATA XREF: .data:6E44A93Co
aSsl_new	db 'SSL_new',0          ; DATA XREF: .data:6E44A944o
		align 4
aSsl_parse_clie	db 'SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT',0 ; DATA XREF: .data:6E44A94Co
aSsl_parse_cl_0	db 'SSL_PARSE_CLIENTHELLO_TLSEXT',0 ; DATA XREF: .data:6E44A954o
		align 4
aSsl_parse_cl_1	db 'SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT',0 ; DATA XREF: .data:6E44A95Co
		align 4
aSsl_parse_serv	db 'SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT',0 ; DATA XREF: .data:6E44A964o
aSsl_parse_se_0	db 'SSL_PARSE_SERVERHELLO_TLSEXT',0 ; DATA XREF: .data:6E44A96Co
		align 10h
aSsl_parse_se_1	db 'SSL_PARSE_SERVERHELLO_USE_SRTP_EXT',0 ; DATA XREF: .data:6E44A974o
aSsl_peek	db 'SSL_peek',0         ; DATA XREF: .data:6E44A97Co
aSsl_prepare_cl	db 'SSL_PREPARE_CLIENTHELLO_TLSEXT',0 ; DATA XREF: .data:6E44A984o
		align 4
aSsl_prepare_se	db 'SSL_PREPARE_SERVERHELLO_TLSEXT',0 ; DATA XREF: .data:6E44A98Co
aSsl_read	db 'SSL_read',0         ; DATA XREF: .data:6E44A994o
aSsl_rsa_privat	db 'SSL_RSA_PRIVATE_DECRYPT',0 ; DATA XREF: .data:6E44A99Co
aSsl_rsa_public	db 'SSL_RSA_PUBLIC_ENCRYPT',0 ; DATA XREF: .data:6E44A9A4o
aSsl_session_du	db 'ssl_session_dup',0  ; DATA XREF: .data:6E44A9ACo
aSsl_session_ne	db 'SSL_SESSION_new',0  ; DATA XREF: .data:6E44A9B4o
aSsl_session_pr	db 'SSL_SESSION_print_fp',0 ; DATA XREF: .data:6E44A9BCo
aSsl_session_se	db 'SSL_SESSION_set1_id_context',0 ; DATA XREF: .data:6E44A9C4o
aSsl_sess_cert_	db 'SSL_SESS_CERT_NEW',0 ; DATA XREF: .data:6E44A9CCo
aSsl_set_cert	db 'SSL_SET_CERT',0     ; DATA XREF: .data:6E44A9D4o
aSsl_set_cipher	db 'SSL_set_cipher_list',0 ; DATA XREF: .data:6E44A9DCo
aSsl_set_fd	db 'SSL_set_fd',0       ; DATA XREF: .data:6E44A9E4o
aSsl_set_pkey	db 'SSL_SET_PKEY',0     ; DATA XREF: .data:6E44A9ECo
aSsl_set_purpos	db 'SSL_set_purpose',0  ; DATA XREF: .data:6E44A9F4o
aSsl_set_rfd	db 'SSL_set_rfd',0      ; DATA XREF: .data:6E44A9FCo
aSsl_set_sessio	db 'SSL_set_session',0  ; DATA XREF: .data:6E44AA04o
aSsl_set_sess_0	db 'SSL_set_session_id_context',0 ; DATA XREF: .data:6E44AA0Co
aSsl_set_sess_1	db 'SSL_set_session_ticket_ext',0 ; DATA XREF: .data:6E44AA14o
aSsl_set_trust	db 'SSL_set_trust',0    ; DATA XREF: .data:6E44AA1Co
aSsl_set_wfd	db 'SSL_set_wfd',0      ; DATA XREF: .data:6E44AA24o
aSsl_shutdown	db 'SSL_shutdown',0     ; DATA XREF: .data:6E44AA2Co
aSsl_srp_ctx_in	db 'SSL_SRP_CTX_init',0 ; DATA XREF: .data:6E44AA34o
aSsl_undefined_	db 'SSL_UNDEFINED_CONST_FUNCTION',0 ; DATA XREF: .data:6E44AA3Co
aSsl_undefine_0	db 'SSL_UNDEFINED_FUNCTION',0 ; DATA XREF: .data:6E44AA44o
aSsl_undefine_1	db 'SSL_UNDEFINED_VOID_FUNCTION',0 ; DATA XREF: .data:6E44AA4Co
aSsl_use_certif	db 'SSL_use_certificate',0 ; DATA XREF: .data:6E44AA54o
aSsl_use_cert_0	db 'SSL_use_certificate_ASN1',0 ; DATA XREF: .data:6E44AA5Co
aSsl_use_cert_1	db 'SSL_use_certificate_file',0 ; DATA XREF: .data:6E44AA64o
aSsl_use_privat	db 'SSL_use_PrivateKey',0 ; DATA XREF: .data:6E44AA6Co
aSsl_use_priv_0	db 'SSL_use_PrivateKey_ASN1',0 ; DATA XREF: .data:6E44AA74o
aSsl_use_priv_1	db 'SSL_use_PrivateKey_file',0 ; DATA XREF: .data:6E44AA7Co
aSsl_use_psk_id	db 'SSL_use_psk_identity_hint',0 ; DATA XREF: .data:6E44AA84o
aSsl_use_rsapri	db 'SSL_use_RSAPrivateKey',0 ; DATA XREF: .data:6E44AA8Co
aSsl_use_rsap_0	db 'SSL_use_RSAPrivateKey_ASN1',0 ; DATA XREF: .data:6E44AA94o
aSsl_use_rsap_1	db 'SSL_use_RSAPrivateKey_file',0 ; DATA XREF: .data:6E44AA9Co
aSsl_verify_cer	db 'SSL_VERIFY_CERT_CHAIN',0 ; DATA XREF: .data:6E44AAA4o
aSsl_write	db 'SSL_write',0        ; DATA XREF: .data:6E44AAACo
aTls1_cert_veri	db 'tls1_cert_verify_mac',0 ; DATA XREF: .data:6E44AAB4o
aTls1_change_ci	db 'TLS1_CHANGE_CIPHER_STATE',0 ; DATA XREF: .data:6E44AABCo
aTls1_check_ser	db 'TLS1_CHECK_SERVERHELLO_TLSEXT',0 ; DATA XREF: .data:6E44AAC4o
aTls1_enc	db 'TLS1_ENC',0         ; DATA XREF: .data:6E44AACCo
aTls1_export_ke	db 'TLS1_EXPORT_KEYING_MATERIAL',0 ; DATA XREF: .data:6E44AAD4o
aSsl_f_tls1_hea	db 'SSL_F_TLS1_HEARTBEAT',0 ; DATA XREF: .data:6E44AADCo
		align 10h
aTls1_prepare_c	db 'TLS1_PREPARE_CLIENTHELLO_TLSEXT',0 ; DATA XREF: .data:6E44AAE4o
aTls1_prepare_s	db 'TLS1_PREPARE_SERVERHELLO_TLSEXT',0 ; DATA XREF: .data:6E44AAECo
aTls1_prf	db 'tls1_prf',0         ; DATA XREF: .data:6E44AAF4o
aTls1_setup_key	db 'TLS1_SETUP_KEY_BLOCK',0 ; DATA XREF: .data:6E44AAFCo
aWrite_pending	db 'WRITE_PENDING',0    ; DATA XREF: .data:6E44AB04o
aTls_srp_c	db 'tls_srp.c',0        ; DATA XREF: SSL_SRP_CTX_init+1F8o
					; SSL_SRP_CTX_init+2C8o ...
		align 4
aT1_reneg_c	db 't1_reneg.c',0       ; DATA XREF: sub_6E4457A0+E8o
					; sub_6E445900:loc_6E445978o ...
		align 4
aExpected_len_0	db '!expected_len || s->s3->previous_client_finished_len',0
					; DATA XREF: sub_6E445C80:loc_6E445E30o
		align 4
aExpected_lenSS	db '!expected_len || s->s3->previous_server_finished_len',0
					; DATA XREF: sub_6E445C80:loc_6E445E00o
		align 4
off_6E4530A4	dd offset TlsCallback_0	; DATA XREF: sub_6E401040:loc_6E40112Ar
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_6E446B50+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_6E446BB0+21Bo
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_6E446BB0+207o
					; sub_6E446BB0+233o ...
		align 4
; char aVirtualprotect[]
aVirtualprotect	db '  VirtualProtect failed with code 0x%x',0 ; DATA XREF: sub_6E446BB0+1D9o
		align 10h
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_6E446DF0+2C4o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_6E446DF0+EEo
		align 10h
off_6E4531A0	dd offset dword_6E4543C0 ; DATA	XREF: .text:6E447268o
		dd offset dword_6E4540E0
aGccGnu4_8_2	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_0	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_1	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_2	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_3	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_4	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_5	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_6	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_7	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_8	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_9	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_10	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_11	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_12	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_13	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_14	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_15	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_16	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_17	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_18	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_19	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_20	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_21	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_22	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_23	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_24	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_25	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_26	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_27	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_28	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_29	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_30	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_31	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_32	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_33	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_34	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_35	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_36	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_37	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_38	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_39	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_40	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_41	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_42	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_43	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_44	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_45	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_46	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_47	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_48	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_49	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_50	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_51	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_52	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_53	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_54	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_55	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_56	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_57	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_58	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_59	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_60	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_61	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_62	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_63	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_64	db 'GCC: (GNU) 4.8.2',0
		align 10h
dword_6E4536D0	dd 0			; DATA XREF: sub_6E446DF0+52o
					; sub_6E446DF0+57o ...
dword_6E4536D4	dd 0			; DATA XREF: sub_6E446DF0+7Br
dword_6E4536D8	dd 0			; DATA XREF: sub_6E446DF0+88r
dword_6E4536DC	dd 49h dup(0)		; DATA XREF: sub_6E446DF0+8Eo
		align 1000h
_rdata		ends

; Section 4. (virtual address 00054000)
; Virtual size			: 00000464 (   1124.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 6E454000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_6E454000	dd ?			; DATA XREF: sub_6E401040+10r
					; sub_6E401040+28w ...
		align 20h
dword_6E454020	dd ?			; DATA XREF: sub_6E43B560+F9w
					; sub_6E43B840+22Ar
dword_6E454024	dd ?			; DATA XREF: sub_6E43B560+11Fw
dword_6E454028	dd ?			; DATA XREF: sub_6E43B560+149w
dword_6E45402C	dd ?			; DATA XREF: sub_6E43B560+1E8w
dword_6E454030	dd ?			; DATA XREF: sub_6E43B560+20Bw
dword_6E454034	dd ?			; DATA XREF: sub_6E43B560+229w
dword_6E454038	dd ?			; DATA XREF: sub_6E43B560+ECw
					; sub_6E43B840+208r ...
dword_6E45403C	dd ?			; DATA XREF: sub_6E43B560+112w
					; sub_6E43BC80+25Er
dword_6E454040	dd ?			; DATA XREF: sub_6E43B560+138w
					; sub_6E43BC80+288r
dword_6E454044	dd ?			; DATA XREF: sub_6E43B560+162w
					; sub_6E43BC80+296r
dword_6E454048	dd ?			; DATA XREF: sub_6E43B560+1FEw
					; sub_6E43BC80+26Cr
dword_6E45404C	dd ?			; DATA XREF: sub_6E43B560+21Cw
					; sub_6E43BC80+27Ar
dword_6E454050	dd ?			; DATA XREF: sub_6E43A630+28r
					; sub_6E43A630+A8r ...
		align 10h
dword_6E454060	dd ?			; DATA XREF: sub_6E43B560+Fw
					; sub_6E43B840:loc_6E43BA20r ...
dword_6E454064	dd ?			; DATA XREF: sub_6E43B560+20w
					; sub_6E43BC80+17Dr
dword_6E454068	dd ?			; DATA XREF: sub_6E43B560+31w
					; sub_6E43BC80+193r
dword_6E45406C	dd ?			; DATA XREF: sub_6E43B560+42w
					; sub_6E43BC80+1A3r
dword_6E454070	dd ?			; DATA XREF: sub_6E43B560+53w
					; sub_6E43BC80+1B3r
		align 8
dword_6E454078	dd ?			; DATA XREF: sub_6E43B560+64w
					; sub_6E43BC80+1C3r
dword_6E45407C	dd ?			; DATA XREF: sub_6E43B560+75w
					; sub_6E43BC80+1D3r
dword_6E454080	dd ?			; DATA XREF: sub_6E43B560+86w
					; sub_6E43BC80+209r
dword_6E454084	dd ?			; DATA XREF: sub_6E43B560+97w
					; sub_6E43BC80+21Br
dword_6E454088	dd ?			; DATA XREF: sub_6E43B560+A8w
					; sub_6E43BC80+22Dr
dword_6E45408C	dd ?			; DATA XREF: sub_6E43B560+B9w
					; sub_6E43BC80+23Fr
dword_6E454090	dd ?			; DATA XREF: sub_6E43B560+CAw
					; sub_6E43BC80+1E5r
dword_6E454094	dd ?			; DATA XREF: sub_6E43B560+DBw
					; sub_6E43BC80+1F7r
		dd 5 dup(?)
TlsIndex	dd ?			; DATA XREF: .tls:TlsIndex_ptro
dword_6E4540B0	dd ?			; DATA XREF: DllEntryPoint+7w
dword_6E4540B4	dd ?			; DATA XREF: sub_6E446DF0r
					; sub_6E446DF0+19w
dword_6E4540B8	dd ?			; DATA XREF: sub_6E446BB0+Er
					; sub_6E446BB0:loc_6E446C76w ...
dword_6E4540BC	dd ?			; DATA XREF: sub_6E446BB0+1Fr
					; sub_6E446BB0+60r ...
dword_6E4540C0	dd ?			; DATA XREF: sub_6E447140r
					; sub_6E447140:loc_6E447150w
		align 20h
dword_6E4540E0	dd 2Bh dup(?)		; DATA XREF: .rdata:6E4531A4o
dword_6E45418C	dd ?			; DATA XREF: .text:6E44724Aw
		dd 2 dup(?)
dword_6E454198	dd ?			; DATA XREF: .text:6E447236w
		dd 2 dup(?)
dword_6E4541A4	dd ?			; DATA XREF: .text:6E44721Cw
		dd 86h dup(?)
dword_6E4543C0	dd ?			; DATA XREF: .text:6E447222w
					; .rdata:off_6E4531A0o
dword_6E4543C4	dd ?			; DATA XREF: .text:6E44722Cw
		dd ?
dword_6E4543CC	dd ?			; DATA XREF: .text:6E44723Bw
		dd 14h dup(?)
dword_6E454420	dd ?			; DATA XREF: sub_6E4472A0+16r
					; .text:6E447372r ...
dword_6E454424	dd ?			; DATA XREF: .text:6E44732Ar
					; .text:6E4473B7r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_6E4472A0+9o
					; sub_6E4472A0:loc_6E4472F9o ...
		dd ?
dword_6E454444	dd ?			; DATA XREF: sub_6E401000+21w
					; sub_6E401040+143r ...
dword_6E454448	dd ?			; DATA XREF: sub_6E401000+1Cw
					; sub_6E401040:loc_6E401170r ...
dword_6E45444C	dd ?			; DATA XREF: sub_6E401040+43w
					; sub_6E401040+ABw ...
dword_6E454450	dd ?			; DATA XREF: sub_6E401040+4Fr
					; sub_6E401040:loc_6E4010F9r ...
		align 1000h
_bss		ends

;
; Imports from LIBEAY32.dll
;
; Section 6. (virtual address 00058000)
; Virtual size			: 00002F5C (  12124.)
; Section size in file		: 00003000 (  12288.)
; Offset to raw	data for section: 00054800
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn __imp_ASN1_INTEGER_get:dword ; DATA XREF:	ASN1_INTEGER_getr
		extrn __imp_ASN1_INTEGER_set:dword ; DATA XREF:	ASN1_INTEGER_setr
		extrn __imp_ASN1_const_check_infinite_end:dword
					; DATA XREF: ASN1_const_check_infinite_endr
		extrn __imp_ASN1_get_object:dword ; DATA XREF: ASN1_get_objectr
		extrn __imp_ASN1_object_size:dword ; DATA XREF:	ASN1_object_sizer
		extrn __imp_ASN1_put_object:dword ; DATA XREF: ASN1_put_objectr
		extrn __imp_BIO_callback_ctrl:dword ; DATA XREF: BIO_callback_ctrlr
		extrn __imp_BIO_clear_flags:dword ; DATA XREF: BIO_clear_flagsr
		extrn __imp_BIO_copy_next_retry:dword ;	DATA XREF: BIO_copy_next_retryr
		extrn __imp_BIO_ctrl:dword ; DATA XREF:	BIO_ctrlr
		extrn __imp_BIO_dump_indent:dword ; DATA XREF: BIO_dump_indentr
		extrn __imp_BIO_f_buffer:dword ; DATA XREF: BIO_f_bufferr
		extrn __imp_BIO_find_type:dword	; DATA XREF: BIO_find_typer
		extrn __imp_BIO_free:dword ; DATA XREF:	BIO_freer
		extrn __imp_BIO_free_all:dword ; DATA XREF: BIO_free_allr
		extrn __imp_BIO_get_retry_reason:dword ; DATA XREF: BIO_get_retry_reasonr
		extrn __imp_BIO_int_ctrl:dword ; DATA XREF: BIO_int_ctrlr
		extrn __imp_BIO_method_type:dword ; DATA XREF: BIO_method_typer
		extrn __imp_BIO_new:dword ; DATA XREF: BIO_newr
		extrn __imp_BIO_pop:dword ; DATA XREF: BIO_popr
		extrn __imp_BIO_printf:dword ; DATA XREF: BIO_printfr
		extrn __imp_BIO_push:dword ; DATA XREF:	BIO_pushr
		extrn __imp_BIO_puts:dword ; DATA XREF:	BIO_putsr
		extrn __imp_BIO_read:dword ; DATA XREF:	BIO_readr
		extrn __imp_BIO_s_connect:dword	; DATA XREF: BIO_s_connectr
		extrn __imp_BIO_s_file:dword ; DATA XREF: BIO_s_filer
		extrn __imp_BIO_s_mem:dword ; DATA XREF: BIO_s_memr
		extrn __imp_BIO_s_socket:dword ; DATA XREF: BIO_s_socketr
		extrn __imp_BIO_set_flags:dword	; DATA XREF: BIO_set_flagsr
		extrn __imp_BIO_snprintf:dword ; DATA XREF: BIO_snprintfr
		extrn __imp_BIO_test_flags:dword ; DATA	XREF: BIO_test_flagsr
		extrn __imp_BIO_write:dword ; DATA XREF: BIO_writer
		extrn __imp_BN_CTX_free:dword ;	DATA XREF: BN_CTX_freer
		extrn __imp_BN_CTX_new:dword ; DATA XREF: BN_CTX_newr
		extrn __imp_BN_bin2bn:dword ; DATA XREF: BN_bin2bnr
		extrn __imp_BN_bn2bin:dword ; DATA XREF: BN_bn2binr
		extrn __imp_BN_clear_free:dword	; DATA XREF: BN_clear_freer
		extrn __imp_BN_copy:dword ; DATA XREF: BN_copyr
		extrn __imp_BN_dup:dword ; DATA	XREF: BN_dupr
		extrn __imp_BN_free:dword ; DATA XREF: BN_freer
		extrn __imp_BN_num_bits:dword ;	DATA XREF: BN_num_bitsr
		extrn __imp_BN_ucmp:dword ; DATA XREF: BN_ucmpr
		extrn __imp_BUF_MEM_free:dword ; DATA XREF: BUF_MEM_freer
		extrn __imp_BUF_MEM_grow:dword ; DATA XREF: BUF_MEM_growr
		extrn __imp_BUF_MEM_grow_clean:dword ; DATA XREF: BUF_MEM_grow_cleanr
		extrn __imp_BUF_MEM_new:dword ;	DATA XREF: BUF_MEM_newr
		extrn __imp_BUF_memdup:dword ; DATA XREF: BUF_memdupr
		extrn __imp_BUF_strdup:dword ; DATA XREF: BUF_strdupr
		extrn __imp_BUF_strndup:dword ;	DATA XREF: BUF_strndupr
		extrn __imp_COMP_CTX_free:dword	; DATA XREF: COMP_CTX_freer
		extrn __imp_COMP_CTX_new:dword ; DATA XREF: COMP_CTX_newr
		extrn __imp_COMP_compress_block:dword ;	DATA XREF: COMP_compress_blockr
		extrn __imp_COMP_expand_block:dword ; DATA XREF: COMP_expand_blockr
		extrn __imp_COMP_zlib:dword ; DATA XREF: COMP_zlibr
		extrn __imp_CRYPTO_add_lock:dword ; DATA XREF: CRYPTO_add_lockr
		extrn __imp_CRYPTO_dup_ex_data:dword ; DATA XREF: CRYPTO_dup_ex_datar
		extrn __imp_CRYPTO_free:dword ;	DATA XREF: CRYPTO_freer
		extrn __imp_CRYPTO_free_ex_data:dword ;	DATA XREF: CRYPTO_free_ex_datar
		extrn __imp_CRYPTO_get_ex_data:dword ; DATA XREF: CRYPTO_get_ex_datar
		extrn __imp_CRYPTO_get_ex_new_index:dword
					; DATA XREF: CRYPTO_get_ex_new_indexr
		extrn __imp_CRYPTO_lock:dword ;	DATA XREF: CRYPTO_lockr
		extrn __imp_CRYPTO_malloc:dword	; DATA XREF: CRYPTO_mallocr
		extrn __imp_CRYPTO_mem_ctrl:dword ; DATA XREF: CRYPTO_mem_ctrlr
		extrn __imp_CRYPTO_memcmp:dword	; DATA XREF: CRYPTO_memcmpr
		extrn __imp_CRYPTO_new_ex_data:dword ; DATA XREF: CRYPTO_new_ex_datar
		extrn __imp_CRYPTO_set_ex_data:dword ; DATA XREF: CRYPTO_set_ex_datar
		extrn __imp_DH_compute_key:dword ; DATA	XREF: DH_compute_keyr
		extrn __imp_DH_free:dword ; DATA XREF: DH_freer
		extrn __imp_DH_generate_key:dword ; DATA XREF: DH_generate_keyr
		extrn __imp_DH_new:dword ; DATA	XREF: DH_newr
		extrn __imp_DH_size:dword ; DATA XREF: DH_sizer
		extrn __imp_DHparams_dup:dword ; DATA XREF: DHparams_dupr
		extrn __imp_DSA_sign:dword ; DATA XREF:	DSA_signr
		extrn __imp_DSA_verify:dword ; DATA XREF: DSA_verifyr
		extrn __imp_ECDH_compute_key:dword ; DATA XREF:	ECDH_compute_keyr
		extrn __imp_ECDSA_sign:dword ; DATA XREF: ECDSA_signr
		extrn __imp_ECDSA_verify:dword ; DATA XREF: ECDSA_verifyr
		extrn __imp_EC_GROUP_free:dword	; DATA XREF: EC_GROUP_freer
		extrn __imp_EC_GROUP_get_curve_name:dword
					; DATA XREF: EC_GROUP_get_curve_namer
		extrn __imp_EC_GROUP_get_degree:dword ;	DATA XREF: EC_GROUP_get_degreer
		extrn __imp_EC_GROUP_new_by_curve_name:dword
					; DATA XREF: EC_GROUP_new_by_curve_namer
		extrn __imp_EC_KEY_dup:dword ; DATA XREF: EC_KEY_dupr
		extrn __imp_EC_KEY_free:dword ;	DATA XREF: EC_KEY_freer
		extrn __imp_EC_KEY_generate_key:dword ;	DATA XREF: EC_KEY_generate_keyr
		extrn __imp_EC_KEY_get0_group:dword ; DATA XREF: EC_KEY_get0_groupr
		extrn __imp_EC_KEY_get0_private_key:dword
					; DATA XREF: EC_KEY_get0_private_keyr
		extrn __imp_EC_KEY_get0_public_key:dword
					; DATA XREF: EC_KEY_get0_public_keyr
		extrn __imp_EC_KEY_new:dword ; DATA XREF: EC_KEY_newr
		extrn __imp_EC_KEY_set_group:dword ; DATA XREF:	EC_KEY_set_groupr
		extrn __imp_EC_KEY_set_private_key:dword
					; DATA XREF: EC_KEY_set_private_keyr
		extrn __imp_EC_KEY_set_public_key:dword	; DATA XREF: EC_KEY_set_public_keyr
		extrn __imp_EC_KEY_up_ref:dword	; DATA XREF: EC_KEY_up_refr
		extrn __imp_EC_METHOD_get_field_type:dword
					; DATA XREF: EC_METHOD_get_field_typer
		extrn __imp_EC_POINT_copy:dword	; DATA XREF: EC_POINT_copyr
		extrn __imp_EC_POINT_free:dword	; DATA XREF: EC_POINT_freer
		extrn __imp_EC_POINT_new:dword ; DATA XREF: EC_POINT_newr
		extrn __imp_EC_POINT_oct2point:dword ; DATA XREF: EC_POINT_oct2pointr
		extrn __imp_EC_POINT_point2oct:dword ; DATA XREF: EC_POINT_point2octr
		extrn __imp_ENGINE_finish:dword	; DATA XREF: ENGINE_finishr
		extrn __imp_ENGINE_get_ssl_client_cert_function:dword
					; DATA XREF: ENGINE_get_ssl_client_cert_functionr
		extrn __imp_ENGINE_init:dword ;	DATA XREF: ENGINE_initr
		extrn __imp_ENGINE_load_ssl_client_cert:dword
					; DATA XREF: ENGINE_load_ssl_client_certr
		extrn __imp_ERR_add_error_data:dword ; DATA XREF: ERR_add_error_datar
		extrn __imp_ERR_clear_error:dword ; DATA XREF: ERR_clear_errorr
		extrn __imp_ERR_func_error_string:dword	; DATA XREF: ERR_func_error_stringr
		extrn __imp_ERR_load_crypto_strings:dword
					; DATA XREF: ERR_load_crypto_stringsr
		extrn __imp_ERR_load_strings:dword ; DATA XREF:	ERR_load_stringsr
		extrn __imp_ERR_peek_error:dword ; DATA	XREF: ERR_peek_errorr
		extrn __imp_ERR_peek_last_error:dword ;	DATA XREF: ERR_peek_last_errorr
		extrn __imp_ERR_put_error:dword	; DATA XREF: ERR_put_errorr
		extrn __imp_EVP_CIPHER_CTX_cipher:dword	; DATA XREF: EVP_CIPHER_CTX_cipherr
		extrn __imp_EVP_CIPHER_CTX_cleanup:dword
					; DATA XREF: EVP_CIPHER_CTX_cleanupr
		extrn __imp_EVP_CIPHER_CTX_ctrl:dword ;	DATA XREF: EVP_CIPHER_CTX_ctrlr
		extrn __imp_EVP_CIPHER_CTX_flags:dword ; DATA XREF: EVP_CIPHER_CTX_flagsr
		extrn __imp_EVP_CIPHER_CTX_free:dword ;	DATA XREF: EVP_CIPHER_CTX_freer
		extrn __imp_EVP_CIPHER_CTX_init:dword ;	DATA XREF: EVP_CIPHER_CTX_initr
		extrn __imp_EVP_CIPHER_CTX_iv_length:dword
					; DATA XREF: EVP_CIPHER_CTX_iv_lengthr
		extrn __imp_EVP_CIPHER_CTX_new:dword ; DATA XREF: EVP_CIPHER_CTX_newr
		extrn __imp_EVP_CIPHER_block_size:dword	; DATA XREF: EVP_CIPHER_block_sizer
		extrn __imp_EVP_CIPHER_flags:dword ; DATA XREF:	EVP_CIPHER_flagsr
		extrn __imp_EVP_CIPHER_iv_length:dword ; DATA XREF: EVP_CIPHER_iv_lengthr
		extrn __imp_EVP_CIPHER_key_length:dword	; DATA XREF: EVP_CIPHER_key_lengthr
		extrn __imp_EVP_Cipher:dword ; DATA XREF: EVP_Cipherr
		extrn __imp_EVP_CipherInit_ex:dword ; DATA XREF: EVP_CipherInit_exr
		extrn __imp_EVP_DecryptFinal:dword ; DATA XREF:	EVP_DecryptFinalr
		extrn __imp_EVP_DecryptInit_ex:dword ; DATA XREF: EVP_DecryptInit_exr
		extrn __imp_EVP_DecryptUpdate:dword ; DATA XREF: EVP_DecryptUpdater
		extrn __imp_EVP_Digest:dword ; DATA XREF: EVP_Digestr
		extrn __imp_EVP_DigestFinal:dword ; DATA XREF: EVP_DigestFinalr
		extrn __imp_EVP_DigestFinal_ex:dword ; DATA XREF: EVP_DigestFinal_exr
		extrn __imp_EVP_DigestInit:dword ; DATA	XREF: EVP_DigestInitr
		extrn __imp_EVP_DigestInit_ex:dword ; DATA XREF: EVP_DigestInit_exr
		extrn __imp_EVP_DigestSignFinal:dword ;	DATA XREF: EVP_DigestSignFinalr
		extrn __imp_EVP_DigestSignInit:dword ; DATA XREF: EVP_DigestSignInitr
		extrn __imp_EVP_DigestUpdate:dword ; DATA XREF:	EVP_DigestUpdater
		extrn __imp_EVP_EncryptFinal:dword ; DATA XREF:	EVP_EncryptFinalr
		extrn __imp_EVP_EncryptInit_ex:dword ; DATA XREF: EVP_EncryptInit_exr
		extrn __imp_EVP_EncryptUpdate:dword ; DATA XREF: EVP_EncryptUpdater
		extrn __imp_EVP_MD_CTX_cleanup:dword ; DATA XREF: EVP_MD_CTX_cleanupr
		extrn __imp_EVP_MD_CTX_copy:dword ; DATA XREF: EVP_MD_CTX_copyr
		extrn __imp_EVP_MD_CTX_copy_ex:dword ; DATA XREF: EVP_MD_CTX_copy_exr
		extrn __imp_EVP_MD_CTX_create:dword ; DATA XREF: EVP_MD_CTX_creater
		extrn __imp_EVP_MD_CTX_destroy:dword ; DATA XREF: EVP_MD_CTX_destroyr
		extrn __imp_EVP_MD_CTX_init:dword ; DATA XREF: EVP_MD_CTX_initr
		extrn __imp_EVP_MD_CTX_md:dword	; DATA XREF: EVP_MD_CTX_mdr
		extrn __imp_EVP_MD_CTX_set_flags:dword ; DATA XREF: EVP_MD_CTX_set_flagsr
		extrn __imp_EVP_MD_size:dword ;	DATA XREF: EVP_MD_sizer
		extrn __imp_EVP_MD_type:dword ;	DATA XREF: EVP_MD_typer
		extrn __imp_EVP_PKEY_CTX_ctrl:dword ; DATA XREF: EVP_PKEY_CTX_ctrlr
		extrn __imp_EVP_PKEY_CTX_free:dword ; DATA XREF: EVP_PKEY_CTX_freer
		extrn __imp_EVP_PKEY_CTX_new:dword ; DATA XREF:	EVP_PKEY_CTX_newr
		extrn __imp_EVP_PKEY_asn1_find_str:dword
					; DATA XREF: EVP_PKEY_asn1_find_strr
		extrn __imp_EVP_PKEY_asn1_get0_info:dword
					; DATA XREF: EVP_PKEY_asn1_get0_infor
		extrn __imp_EVP_PKEY_assign:dword ; DATA XREF: EVP_PKEY_assignr
		extrn __imp_EVP_PKEY_bits:dword	; DATA XREF: EVP_PKEY_bitsr
		extrn __imp_EVP_PKEY_copy_parameters:dword
					; DATA XREF: EVP_PKEY_copy_parametersr
		extrn __imp_EVP_PKEY_decrypt:dword ; DATA XREF:	EVP_PKEY_decryptr
		extrn __imp_EVP_PKEY_decrypt_init:dword	; DATA XREF: EVP_PKEY_decrypt_initr
		extrn __imp_EVP_PKEY_derive_set_peer:dword
					; DATA XREF: EVP_PKEY_derive_set_peerr
		extrn __imp_EVP_PKEY_encrypt:dword ; DATA XREF:	EVP_PKEY_encryptr
		extrn __imp_EVP_PKEY_encrypt_init:dword	; DATA XREF: EVP_PKEY_encrypt_initr
		extrn __imp_EVP_PKEY_free:dword	; DATA XREF: EVP_PKEY_freer
		extrn __imp_EVP_PKEY_missing_parameters:dword
					; DATA XREF: EVP_PKEY_missing_parametersr
		extrn __imp_EVP_PKEY_new:dword ; DATA XREF: EVP_PKEY_newr
		extrn __imp_EVP_PKEY_new_mac_key:dword ; DATA XREF: EVP_PKEY_new_mac_keyr
		extrn __imp_EVP_PKEY_sign:dword	; DATA XREF: EVP_PKEY_signr
		extrn __imp_EVP_PKEY_sign_init:dword ; DATA XREF: EVP_PKEY_sign_initr
		extrn __imp_EVP_PKEY_size:dword	; DATA XREF: EVP_PKEY_sizer
		extrn __imp_EVP_PKEY_verify:dword ; DATA XREF: EVP_PKEY_verifyr
		extrn __imp_EVP_PKEY_verify_init:dword ; DATA XREF: EVP_PKEY_verify_initr
		extrn __imp_EVP_SignFinal:dword	; DATA XREF: EVP_SignFinalr
		extrn __imp_EVP_VerifyFinal:dword ; DATA XREF: EVP_VerifyFinalr
		extrn __imp_EVP_add_cipher:dword ; DATA	XREF: EVP_add_cipherr
		extrn __imp_EVP_add_digest:dword ; DATA	XREF: EVP_add_digestr
		extrn __imp_EVP_aes_128_cbc:dword ; DATA XREF: EVP_aes_128_cbcr
		extrn __imp_EVP_aes_128_cbc_hmac_sha1:dword
					; DATA XREF: EVP_aes_128_cbc_hmac_sha1r
		extrn __imp_EVP_aes_128_gcm:dword ; DATA XREF: EVP_aes_128_gcmr
		extrn __imp_EVP_aes_192_cbc:dword ; DATA XREF: EVP_aes_192_cbcr
		extrn __imp_EVP_aes_256_cbc:dword ; DATA XREF: EVP_aes_256_cbcr
		extrn __imp_EVP_aes_256_cbc_hmac_sha1:dword
					; DATA XREF: EVP_aes_256_cbc_hmac_sha1r
		extrn __imp_EVP_aes_256_gcm:dword ; DATA XREF: EVP_aes_256_gcmr
		extrn __imp_EVP_camellia_128_cbc:dword ; DATA XREF: EVP_camellia_128_cbcr
		extrn __imp_EVP_camellia_256_cbc:dword ; DATA XREF: EVP_camellia_256_cbcr
		extrn __imp_EVP_des_cbc:dword ;	DATA XREF: EVP_des_cbcr
		extrn __imp_EVP_des_ede3_cbc:dword ; DATA XREF:	EVP_des_ede3_cbcr
		extrn __imp_EVP_dss1:dword ; DATA XREF:	EVP_dss1r
		extrn __imp_EVP_ecdsa:dword ; DATA XREF: EVP_ecdsar
		extrn __imp_EVP_enc_null:dword ; DATA XREF: EVP_enc_nullr
		extrn __imp_EVP_get_cipherbyname:dword ; DATA XREF: EVP_get_cipherbynamer
		extrn __imp_EVP_get_digestbyname:dword ; DATA XREF: EVP_get_digestbynamer
		extrn __imp_EVP_idea_cbc:dword ; DATA XREF: EVP_idea_cbcr
		extrn __imp_EVP_md5:dword ; DATA XREF: EVP_md5r
		extrn __imp_EVP_rc2_40_cbc:dword ; DATA	XREF: EVP_rc2_40_cbcr
		extrn __imp_EVP_rc2_cbc:dword ;	DATA XREF: EVP_rc2_cbcr
		extrn __imp_EVP_rc4:dword ; DATA XREF: EVP_rc4r
		extrn __imp_EVP_seed_cbc:dword ; DATA XREF: EVP_seed_cbcr
		extrn __imp_EVP_sha1:dword ; DATA XREF:	EVP_sha1r
		extrn __imp_EVP_sha224:dword ; DATA XREF: EVP_sha224r
		extrn __imp_EVP_sha256:dword ; DATA XREF: EVP_sha256r
		extrn __imp_EVP_sha384:dword ; DATA XREF: EVP_sha384r
		extrn __imp_EVP_sha512:dword ; DATA XREF: EVP_sha512r
		extrn __imp_HMAC_CTX_cleanup:dword ; DATA XREF:	HMAC_CTX_cleanupr
		extrn __imp_HMAC_CTX_init:dword	; DATA XREF: HMAC_CTX_initr
		extrn __imp_HMAC_Final:dword ; DATA XREF: HMAC_Finalr
		extrn __imp_HMAC_Init_ex:dword ; DATA XREF: HMAC_Init_exr
		extrn __imp_HMAC_Update:dword ;	DATA XREF: HMAC_Updater
		extrn __imp_MD5_Init:dword ; DATA XREF:	MD5_Initr
		extrn MD5_Transform:dword ; DATA XREF: .text:loc_6E446418r
		extrn __imp_OBJ_NAME_add:dword ; DATA XREF: OBJ_NAME_addr
		extrn __imp_OBJ_bsearch_:dword ; DATA XREF: OBJ_bsearch_r
		extrn __imp_OBJ_find_sigid_algs:dword ;	DATA XREF: OBJ_find_sigid_algsr
		extrn __imp_OBJ_nid2sn:dword ; DATA XREF: OBJ_nid2snr
		extrn __imp_OBJ_obj2nid:dword ;	DATA XREF: OBJ_obj2nidr
		extrn __imp_OCSP_RESPID_free:dword ; DATA XREF:	OCSP_RESPID_freer
		extrn __imp_OPENSSL_DIR_end:dword ; DATA XREF: OPENSSL_DIR_endr
		extrn __imp_OPENSSL_DIR_read:dword ; DATA XREF:	OPENSSL_DIR_readr
		extrn __imp_OPENSSL_cleanse:dword ; DATA XREF: OPENSSL_cleanser
		extrn __imp_OpenSSLDie:dword ; DATA XREF: OpenSSLDier
		extrn __imp_PEM_ASN1_read:dword	; DATA XREF: PEM_ASN1_readr
		extrn __imp_PEM_ASN1_read_bio:dword ; DATA XREF: PEM_ASN1_read_bior
		extrn __imp_PEM_ASN1_write:dword ; DATA	XREF: PEM_ASN1_writer
		extrn __imp_PEM_ASN1_write_bio:dword ; DATA XREF: PEM_ASN1_write_bior
		extrn __imp_PEM_read_bio_PrivateKey:dword
					; DATA XREF: PEM_read_bio_PrivateKeyr
		extrn __imp_PEM_read_bio_RSAPrivateKey:dword
					; DATA XREF: PEM_read_bio_RSAPrivateKeyr
		extrn __imp_PEM_read_bio_X509:dword ; DATA XREF: PEM_read_bio_X509r
		extrn __imp_PEM_read_bio_X509_AUX:dword	; DATA XREF: PEM_read_bio_X509_AUXr
		extrn __imp_RAND_add:dword ; DATA XREF:	RAND_addr
		extrn __imp_RAND_bytes:dword ; DATA XREF: RAND_bytesr
		extrn __imp_RAND_pseudo_bytes:dword ; DATA XREF: RAND_pseudo_bytesr
		extrn __imp_RSAPrivateKey_dup:dword ; DATA XREF: RSAPrivateKey_dupr
		extrn __imp_RSA_flags:dword ; DATA XREF: RSA_flagsr
		extrn __imp_RSA_free:dword ; DATA XREF:	RSA_freer
		extrn __imp_RSA_new:dword ; DATA XREF: RSA_newr
		extrn __imp_RSA_private_decrypt:dword ;	DATA XREF: RSA_private_decryptr
		extrn __imp_RSA_public_encrypt:dword ; DATA XREF: RSA_public_encryptr
		extrn __imp_RSA_sign:dword ; DATA XREF:	RSA_signr
		extrn __imp_RSA_size:dword ; DATA XREF:	RSA_sizer
		extrn __imp_RSA_up_ref:dword ; DATA XREF: RSA_up_refr
		extrn __imp_RSA_verify:dword ; DATA XREF: RSA_verifyr
		extrn __imp_SHA1_Init:dword ; DATA XREF: SHA1_Initr
		extrn SHA1_Transform:dword ; DATA XREF:	.text:loc_6E4463E0r
		extrn __imp_SHA224_Init:dword ;	DATA XREF: SHA224_Initr
		extrn __imp_SHA256_Init:dword ;	DATA XREF: SHA256_Initr
		extrn SHA256_Transform:dword ; DATA XREF: .text:loc_6E4463D0r
		extrn __imp_SHA384_Init:dword ;	DATA XREF: SHA384_Initr
		extrn __imp_SHA512_Init:dword ;	DATA XREF: SHA512_Initr
		extrn SHA512_Transform:dword ; DATA XREF: .text:loc_6E4463F0r
		extrn __imp_SRP_Calc_A:dword ; DATA XREF: SRP_Calc_Ar
		extrn __imp_SRP_Calc_B:dword ; DATA XREF: SRP_Calc_Br
		extrn __imp_SRP_Calc_client_key:dword ;	DATA XREF: SRP_Calc_client_keyr
		extrn __imp_SRP_Calc_server_key:dword ;	DATA XREF: SRP_Calc_server_keyr
		extrn __imp_SRP_Calc_u:dword ; DATA XREF: SRP_Calc_ur
		extrn __imp_SRP_Calc_x:dword ; DATA XREF: SRP_Calc_xr
		extrn __imp_SRP_Verify_A_mod_N:dword ; DATA XREF: SRP_Verify_A_mod_Nr
		extrn __imp_SRP_Verify_B_mod_N:dword ; DATA XREF: SRP_Verify_B_mod_Nr
		extrn __imp_SRP_check_known_gN_param:dword
					; DATA XREF: SRP_check_known_gN_paramr
		extrn __imp_SRP_create_verifier_BN:dword
					; DATA XREF: SRP_create_verifier_BNr
		extrn __imp_SRP_get_default_gN:dword ; DATA XREF: SRP_get_default_gNr
		extrn X509_EXTENSION_free:dword	; DATA XREF: .text:loc_6E446470r
		extrn __imp_X509_NAME_cmp:dword	; DATA XREF: X509_NAME_cmpr
		extrn __imp_X509_NAME_dup:dword	; DATA XREF: X509_NAME_dupr
		extrn __imp_X509_NAME_free:dword ; DATA	XREF: X509_NAME_freer
		extrn __imp_X509_STORE_CTX_cleanup:dword
					; DATA XREF: X509_STORE_CTX_cleanupr
		extrn __imp_X509_STORE_CTX_get0_param:dword
					; DATA XREF: X509_STORE_CTX_get0_paramr
		extrn __imp_X509_STORE_CTX_get_ex_new_index:dword
					; DATA XREF: X509_STORE_CTX_get_ex_new_indexr
		extrn __imp_X509_STORE_CTX_init:dword ;	DATA XREF: X509_STORE_CTX_initr
		extrn __imp_X509_STORE_CTX_set_default:dword
					; DATA XREF: X509_STORE_CTX_set_defaultr
		extrn __imp_X509_STORE_CTX_set_ex_data:dword
					; DATA XREF: X509_STORE_CTX_set_ex_datar
		extrn __imp_X509_STORE_CTX_set_verify_cb:dword
					; DATA XREF: X509_STORE_CTX_set_verify_cbr
		extrn __imp_X509_STORE_free:dword ; DATA XREF: X509_STORE_freer
		extrn __imp_X509_STORE_load_locations:dword
					; DATA XREF: X509_STORE_load_locationsr
		extrn __imp_X509_STORE_new:dword ; DATA	XREF: X509_STORE_newr
		extrn __imp_X509_STORE_set_default_paths:dword
					; DATA XREF: X509_STORE_set_default_pathsr
		extrn __imp_X509_VERIFY_PARAM_free:dword
					; DATA XREF: X509_VERIFY_PARAM_freer
		extrn __imp_X509_VERIFY_PARAM_get_depth:dword
					; DATA XREF: X509_VERIFY_PARAM_get_depthr
		extrn __imp_X509_VERIFY_PARAM_inherit:dword
					; DATA XREF: X509_VERIFY_PARAM_inheritr
		extrn __imp_X509_VERIFY_PARAM_new:dword	; DATA XREF: X509_VERIFY_PARAM_newr
		extrn __imp_X509_VERIFY_PARAM_set1:dword
					; DATA XREF: X509_VERIFY_PARAM_set1r
		extrn __imp_X509_VERIFY_PARAM_set_depth:dword
					; DATA XREF: X509_VERIFY_PARAM_set_depthr
		extrn __imp_X509_VERIFY_PARAM_set_purpose:dword
					; DATA XREF: X509_VERIFY_PARAM_set_purposer
		extrn __imp_X509_VERIFY_PARAM_set_trust:dword
					; DATA XREF: X509_VERIFY_PARAM_set_trustr
		extrn __imp_X509_certificate_type:dword	; DATA XREF: X509_certificate_typer
		extrn __imp_X509_check_private_key:dword
					; DATA XREF: X509_check_private_keyr
		extrn __imp_X509_check_purpose:dword ; DATA XREF: X509_check_purposer
		extrn __imp_X509_free:dword ; DATA XREF: X509_freer
		extrn __imp_X509_get_pubkey:dword ; DATA XREF: X509_get_pubkeyr
		extrn __imp_X509_get_subject_name:dword	; DATA XREF: X509_get_subject_namer
		extrn __imp_X509_verify_cert:dword ; DATA XREF:	X509_verify_certr
		extrn __imp_X509_verify_cert_error_string:dword
					; DATA XREF: X509_verify_cert_error_stringr
		extrn __imp_asn1_GetSequence:dword ; DATA XREF:	asn1_GetSequencer
		extrn __imp_asn1_add_error:dword ; DATA	XREF: asn1_add_errorr
		extrn __imp_asn1_const_Finish:dword ; DATA XREF: asn1_const_Finishr
		extrn __imp_d2i_ASN1_INTEGER:dword ; DATA XREF:	d2i_ASN1_INTEGERr
		extrn __imp_d2i_ASN1_OCTET_STRING:dword	; DATA XREF: d2i_ASN1_OCTET_STRINGr
		extrn __imp_d2i_OCSP_RESPID:dword ; DATA XREF: d2i_OCSP_RESPIDr
		extrn __imp_d2i_PrivateKey:dword ; DATA	XREF: d2i_PrivateKeyr
		extrn __imp_d2i_PrivateKey_bio:dword ; DATA XREF: d2i_PrivateKey_bior
		extrn __imp_d2i_RSAPrivateKey:dword ; DATA XREF: d2i_RSAPrivateKeyr
		extrn __imp_d2i_RSAPrivateKey_bio:dword	; DATA XREF: d2i_RSAPrivateKey_bior
		extrn __imp_d2i_X509:dword ; DATA XREF:	d2i_X509r
		extrn __imp_d2i_X509_EXTENSIONS:dword ;	DATA XREF: d2i_X509_EXTENSIONSr
		extrn __imp_d2i_X509_NAME:dword	; DATA XREF: d2i_X509_NAMEr
		extrn __imp_d2i_X509_bio:dword ; DATA XREF: d2i_X509_bior
		extrn __imp_i2d_ASN1_INTEGER:dword ; DATA XREF:	i2d_ASN1_INTEGERr
		extrn __imp_i2d_ASN1_OCTET_STRING:dword	; DATA XREF: i2d_ASN1_OCTET_STRINGr
		extrn __imp_i2d_OCSP_RESPID:dword ; DATA XREF: i2d_OCSP_RESPIDr
		extrn __imp_i2d_X509:dword ; DATA XREF:	i2d_X509r
		extrn __imp_i2d_X509_EXTENSIONS:dword ;	DATA XREF: i2d_X509_EXTENSIONSr
		extrn __imp_i2d_X509_NAME:dword	; DATA XREF: i2d_X509_NAMEr
		extrn __imp_lh_delete:dword ; DATA XREF: lh_deleter
		extrn __imp_lh_doall_arg:dword ; DATA XREF: lh_doall_argr
		extrn __imp_lh_free:dword ; DATA XREF: lh_freer
		extrn __imp_lh_insert:dword ; DATA XREF: lh_insertr
		extrn __imp_lh_new:dword ; DATA	XREF: lh_newr
		extrn __imp_lh_num_items:dword ; DATA XREF: lh_num_itemsr
		extrn __imp_lh_retrieve:dword ;	DATA XREF: lh_retriever
		extrn __imp_pitem_free:dword ; DATA XREF: pitem_freer
		extrn __imp_pitem_new:dword ; DATA XREF: pitem_newr
		extrn __imp_pqueue_find:dword ;	DATA XREF: pqueue_findr
		extrn __imp_pqueue_free:dword ;	DATA XREF: pqueue_freer
		extrn __imp_pqueue_insert:dword	; DATA XREF: pqueue_insertr
		extrn __imp_pqueue_iterator:dword ; DATA XREF: pqueue_iteratorr
		extrn __imp_pqueue_new:dword ; DATA XREF: pqueue_newr
		extrn __imp_pqueue_next:dword ;	DATA XREF: pqueue_nextr
		extrn __imp_pqueue_peek:dword ;	DATA XREF: pqueue_peekr
		extrn __imp_pqueue_pop:dword ; DATA XREF: pqueue_popr
		extrn __imp_pqueue_size:dword ;	DATA XREF: pqueue_sizer
		extrn __imp_sk_dup:dword ; DATA	XREF: sk_dupr
		extrn __imp_sk_find:dword ; DATA XREF: sk_findr
		extrn __imp_sk_free:dword ; DATA XREF: sk_freer
		extrn __imp_sk_new:dword ; DATA	XREF: sk_newr
		extrn __imp_sk_new_null:dword ;	DATA XREF: sk_new_nullr
		extrn __imp_sk_num:dword ; DATA	XREF: sk_numr
		extrn __imp_sk_pop_free:dword ;	DATA XREF: sk_pop_freer
		extrn __imp_sk_push:dword ; DATA XREF: sk_pushr
		extrn __imp_sk_set:dword ; DATA	XREF: sk_setr
		extrn __imp_sk_set_cmp_func:dword ; DATA XREF: sk_set_cmp_funcr
		extrn __imp_sk_shift:dword ; DATA XREF:	sk_shiftr
		extrn __imp_sk_sort:dword ; DATA XREF: sk_sortr
		extrn __imp_sk_value:dword ; DATA XREF:	sk_valuer
		extrn __imp_sk_zero:dword ; DATA XREF: sk_zeror

;
; Imports from KERNEL32.dll
;
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_6E447450+49p
					; DATA XREF: sub_6E447450+49r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_6E4472A0+10p
					; .text:6E44736Cp ...
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:6E447278p
					; DATA XREF: .text:6E447278r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_6E447160+49p
					; DATA XREF: sub_6E447160+49r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_6E447160+51p
					; DATA XREF: sub_6E447160+51r
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword
					; CODE XREF: SSL_add_dir_cert_subjects_to_stack:loc_6E437A34p
					; sub_6E446BB0+1D3p
					; DATA XREF: ...
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_6E401460+16p
					; DATA XREF: sub_6E401460+16r
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_6E401460+33p
					; DATA XREF: sub_6E401460+33r
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_6E447160+38p
					; DATA XREF: sub_6E447160+38r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_6E447160+5Ap
					; DATA XREF: sub_6E447160+5Ar
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_6E447450+77p
					; DATA XREF: sub_6E447450+77r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_6E4472A0+60p
					; .text:6E44738Ap ...
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_6E447160+69p
					; DATA XREF: sub_6E447160+69r
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: sub_6E406650+4Ap
					; sub_6E40D250+4Ap ...
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: .text:6E44725Fp
					; DATA XREF: .text:6E44725Fr
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_6E401040+37p
					; sub_6E401040+A4p
					; DATA XREF: ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:6E447289p
					; DATA XREF: .text:6E447289r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_6E4472A0+35p
					; DATA XREF: sub_6E4472A0+35r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:6E44726Fp
					; DATA XREF: .text:6E44726Fr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	sub_6E446BB0+147p
					; sub_6E446BB0+187p ...
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: sub_6E446BB0+A7p
					; sub_6E446BB0+DCp ...

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
; int *__cdecl errno()
		extrn _errno:dword	; CODE XREF: SSL_add_dir_cert_subjects_to_stack+CEp
					; DATA XREF: SSL_add_dir_cert_subjects_to_stack+CEr
		extrn _ftime:dword	; CODE XREF: sub_6E427980+30p
					; sub_6E427A20+2Fp ...
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _iob:dword	; DATA XREF: sub_6E404D90+4A3r
					; sub_6E4206A0+CBr ...
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_6E446970+A7p
					; DATA XREF: sub_6E446970+A7r
; time_t __cdecl static	time(time_t *Time)
		extrn __imp_time:dword	; DATA XREF: timer
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; int fprintf(FILE *File, const	char *Format, ...)
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; int __cdecl memcmp(const void	*Buf1, const void *Buf2, size_t	Size)
		extrn __imp_memcmp:dword ; DATA	XREF: memcmpr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp_memmove:dword ; DATA XREF: memmover
; char *__cdecl	strchr(const char *Str,	int Val)
		extrn __imp_strchr:dword ; DATA	XREF: strchrr
; size_t __cdecl strlen(const char *Str)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *Str1,	const char *Str2, size_t MaxCount)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; char *__cdecl	strncpy(char *Dest, const char *Source,	size_t Count)
		extrn __imp_strncpy:dword ; DATA XREF: strncpyr
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


; Section 7. (virtual address 0005B000)
; Virtual size			: 0000002C (	 44.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00057800
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 6E45B000h
dword_6E45B000	dd 0			; DATA XREF: sub_6E401040+1FCo
dword_6E45B004	dd 0			; DATA XREF: sub_6E401040:loc_6E401234o
dword_6E45B008	dd 0			; DATA XREF: sub_6E401040+1C8o
		dd offset sub_6E401000
dword_6E45B010	dd 2 dup(0)		; DATA XREF: sub_6E401040:loc_6E401200o
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 8
dword_6E45B028	dd 76h dup(0)		; DATA XREF: TlsCallback_0:loc_6E446AD1o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 0005C000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00057A00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 6E45C000h
TlsStart	dd 0			; DATA XREF: .tls:TlsDirectoryo
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end DllEntryPoint
