;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	F9159DA6BF9605A3A865761D3D9018A6
; Input	CRC32 :	51876C93

; File Name   :	C:\compspace\compare\openvpn\dlls\original\openssl.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00053484 ( 341124.)
; Section size in file		: 00053600 ( 341504.)
; Offset to raw	data for section: 00000600
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat
.intel_syntax noprefix

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000002 BYTES: COLLAPSED FUNCTION ___mingw_invalidParameterHandler]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: static

; int pre_c_init()
_pre_c_init	proc near		; DATA XREF: .CRT:_mingw_pcinito

ptr		= dword	ptr -1Ch

		sub	esp, 1Ch
		xor	eax, eax
		cmp	word ptr ds:400000h, 5A4Dh
		mov	ds:_mingw_initltsdrot_force, 1
		mov	ds:_mingw_initltsdyn_force, 1
		mov	ds:_mingw_initltssuo_force, 1
		mov	ds:_mingw_initcharmax, 1
		jz	short loc_4010B0

loc_401048:				; CODE XREF: _pre_c_init+B6j
					; _pre_c_init+C8j ...
		mov	ds:_managedapp,	eax
		mov	eax, ds:_mingw_app_type
		test	eax, eax
		jz	short loc_4010A0
		mov	[esp+1Ch+ptr], 2
		call	___set_app_type

loc_401062:				; CODE XREF: _pre_c_init+9Cj
		mov	[esp+1Ch+ptr], 0FFFFFFFFh ; ptr
		call	__encode_pointer
		mov	edx, ds:__fmode
		mov	ds:___onexitend, eax
		mov	ds:___onexitbegin, eax
		mov	eax, ds:__imp___fmode
		mov	[eax], edx
		call	__setargv
		cmp	__MINGW_INSTALL_DEBUG_MATHERR, 1
		jz	short loc_401100
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4010A0:				; CODE XREF: _pre_c_init+44j
		mov	[esp+1Ch+ptr], 1
		call	___set_app_type
		jmp	short loc_401062
; ---------------------------------------------------------------------------
		align 10h

loc_4010B0:				; CODE XREF: _pre_c_init+36j
		mov	edx, ds:40003Ch
		cmp	dword ptr [edx+400000h], 4550h
		lea	ecx, [edx+400000h]
		jnz	short loc_401048
		movzx	edx, word ptr [ecx+18h]
		cmp	dx, 10Bh
		jz	short loc_401112
		cmp	dx, 20Bh
		jnz	loc_401048
		cmp	dword ptr [ecx+84h], 0Eh
		jbe	loc_401048
		mov	edx, [ecx+0F8h]
		xor	eax, eax
		test	edx, edx
		setnz	al
		jmp	loc_401048
; ---------------------------------------------------------------------------
		align 10h

loc_401100:				; CODE XREF: _pre_c_init+81j
		mov	[esp+1Ch+ptr], offset __matherr	; f
		call	___mingw_setusermatherr
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_401112:				; CODE XREF: _pre_c_init+C1j
		cmp	dword ptr [ecx+74h], 0Eh
		jbe	loc_401048
		mov	ecx, [ecx+0E8h]
		xor	eax, eax
		test	ecx, ecx
		setnz	al
		jmp	loc_401048
_pre_c_init	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: static

; void pre_cpp_init()
_pre_cpp_init	proc near		; DATA XREF: .CRT:_mingw_pcppinito

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		sub	esp, 2Ch
		mov	eax, ds:__newmode
		mov	[esp+2Ch+var_1C], offset __bss_start__
		mov	[esp+2Ch+var_24], offset _envp
		mov	[esp+2Ch+var_28], offset _argv
		mov	ds:__bss_start__.newmode, eax
		mov	eax, ds:__dowildcard
		mov	[esp+2Ch+var_2C], offset _argc
		mov	[esp+2Ch+var_20], eax
		call	___getmainargs
		mov	ds:_argret, eax
		add	esp, 2Ch
		retn
_pre_cpp_init	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn static bp-based frame

; int __tmainCRTStartup()
___tmainCRTStartup proc	near		; CODE XREF: .text:004014D5j
					; _mainCRTStartup+15j

var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_5C		= byte ptr -5Ch
var_30		= byte ptr -30h
var_2C		= word ptr -2Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		mov	ecx, 11h
		push	edi
		push	esi
		lea	edx, [ebp+var_5C]
		push	ebx
		mov	edi, edx
		sub	esp, 7Ch
		rep stosd
		mov	al, 30h
		call	___chkstk_ms
		sub	esp, eax
		lea	eax, [esp+1Bh]
		and	eax, 0FFFFFFF0h
lpszCommandLine	= eax			; _TCHAR *
		mov	dword ptr [lpszCommandLine], 0CCCCCCCCh
		mov	dword ptr [lpszCommandLine+4], 0CCCCCCCCh
		mov	dword ptr [lpszCommandLine+8], 0CCCCCCCCh
		mov	dword ptr [lpszCommandLine+0Ch], 0CCCCCCCCh
		mov	dword ptr [lpszCommandLine+10h], 0CCCCCCCCh
		mov	dword ptr [lpszCommandLine+14h], 0CCCCCCCCh
		mov	dword ptr [lpszCommandLine+18h], 0CCCCCCCCh
		mov	dword ptr [lpszCommandLine+1Ch], 0CCCCCCCCh
		and	esp, 0FFFFFFF0h
		mov	esi, ds:_mingw_app_type
		test	esi, esi
		jnz	loc_401470

loc_4011EF:				; CODE XREF: ___tmainCRTStartup+2FCj
		mov	eax, large fs:18h
		xor	esi, esi
		mov	ebx, [eax+4]
fiberid	= ebx				; void *
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_401216
; ---------------------------------------------------------------------------

loc_401202:				; CODE XREF: ___tmainCRTStartup+A2j
lock_free = eax				; void *
		cmp	lock_free, fiberid
		jz	loc_401410
		mov	dword ptr [esp], 3E8h ;	dwMilliseconds
		call	edi ; __imp__Sleep@4
		sub	esp, 4

loc_401216:				; CODE XREF: ___tmainCRTStartup+80j
		mov	eax, esi
		lock cmpxchg ds:___native_startup_lock,	fiberid
lock_free = eax				; void *
		test	lock_free, lock_free
		jnz	short loc_401202
		mov	lock_free, ds:___native_startup_state
		xor	fiberid, fiberid
nested = ebx				; int
		cmp	eax, 1
		jz	loc_401423

loc_401234:				; CODE XREF: ___tmainCRTStartup+29Dj
		mov	eax, ds:___native_startup_state
		test	eax, eax
		jz	loc_401481
		mov	ds:_has_cctor, 1

loc_40124B:				; CODE XREF: ___tmainCRTStartup+31Fj
		mov	eax, ds:___native_startup_state
		cmp	eax, 1
		jz	loc_40143D

loc_401259:				; CODE XREF: ___tmainCRTStartup+2B7j
		test	nested,	nested
		jz	loc_401463

loc_401261:				; CODE XREF: ___tmainCRTStartup+2DDj
					; ___tmainCRTStartup+2E9j
		mov	eax, ds:___dyn_tls_init_callback
		test	eax, eax
		jz	short loc_401286
		mov	dword ptr [esp+8], 0 ; lpreserved
		mov	dword ptr [esp+4], 2 ; dwReason
		mov	dword ptr [esp], 0 ; hDllHandle
		call	eax ; ___dyn_tls_init@12
		sub	esp, 0Ch

loc_401286:				; CODE XREF: ___tmainCRTStartup+E8j
		call	__pei386_runtime_relocator
		mov	dword ptr [esp], offset	__gnu_exception_handler@4 ; lpTopLevelExceptionFilter
		call	ds:__imp__SetUnhandledExceptionFilter@4
		sub	esp, 4
		mov	ds:___mingw_oldexcpt_handler, eax
		mov	dword ptr [esp], offset	___mingw_invalidParameterHandler ; void	(*)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned	int, uintptr_t)
		call	near ptr __imp___set_invalid_parameter_handler
		call	_fpreset
		mov	eax, ds:__imp___acmdln
		mov	ds:___mingw_winmain_hInstance, 400000h
		mov	eax, [eax]
lpszCommandLine	= eax			; _TCHAR *
		test	lpszCommandLine, lpszCommandLine
		jz	short loc_401309
		xor	ecx, ecx
		jmp	short loc_4012E0
; ---------------------------------------------------------------------------
inDoubleQuote =	ecx			; WINBOOL
		align 10h

loc_4012D0:				; CODE XREF: ___tmainCRTStartup+166j
		test	dl, dl
		jz	short loc_401304
		test	inDoubleQuote, inDoubleQuote
		jz	short loc_4012F9
		mov	inDoubleQuote, 1

loc_4012DD:				; CODE XREF: ___tmainCRTStartup+173j
		add	lpszCommandLine, 1

loc_4012E0:				; CODE XREF: ___tmainCRTStartup+148j
		movzx	edx, byte ptr [lpszCommandLine]
		cmp	dl, 20h
		jle	short loc_4012D0
		mov	ebx, inDoubleQuote
		xor	ebx, 1
		cmp	dl, 22h
		cmovz	inDoubleQuote, ebx
		jmp	short loc_4012DD
; ---------------------------------------------------------------------------

loc_4012F5:				; CODE XREF: ___tmainCRTStartup+182j
inDoubleQuote =	ecx			; WINBOOL
		test	dl, dl
		jz	short loc_401304

loc_4012F9:				; CODE XREF: ___tmainCRTStartup+156j
		add	lpszCommandLine, 1
		movzx	edx, byte ptr [lpszCommandLine]
		cmp	dl, 20h
		jle	short loc_4012F5

loc_401304:				; CODE XREF: ___tmainCRTStartup+152j
					; ___tmainCRTStartup+177j
		mov	ds:___mingw_winmain_lpCmdLine, lpszCommandLine

loc_401309:				; CODE XREF: ___tmainCRTStartup+144j
		mov	ebx, ds:_mingw_app_type
		test	ebx, ebx
		jz	short loc_401328
		movzx	edx, [ebp+var_2C]
		mov	lpszCommandLine, 0Ah
		test	[ebp+var_30], 1
		cmovnz	eax, edx
		mov	___mingw_winmain_nShowCmd, eax

loc_401328:				; CODE XREF: ___tmainCRTStartup+191j
		mov	eax, ds:_argc
		mov	[ebp+var_70], eax
		mov	esi, eax
		lea	eax, ds:4[eax*4]
		mov	[ebp+var_74], eax
		mov	[esp], eax	; size_t
		call	_malloc
		test	esi, esi
		mov	edi, ds:_argv
		mov	[ebp+var_6C], eax
		jle	loc_4014A4
		xor	ebx, ebx
		mov	esi, edi
		lea	esi, [esi+0]

loc_401360:				; CODE XREF: ___tmainCRTStartup+215j
		mov	eax, [esi+ebx*4]
		mov	[esp], eax	; char *
		call	_strlen
		lea	edi, [eax+1]
		mov	[esp], edi	; size_t
		call	_malloc
		mov	ecx, [ebp+var_6C]
		mov	[ecx+ebx*4], eax
		mov	ecx, [esi+ebx*4]
		add	ebx, 1
		mov	[esp+8], edi	; size_t
		mov	[esp], eax	; void *
		mov	[esp+4], ecx	; void *
		call	_memcpy
		cmp	ebx, [ebp+var_70]
		jnz	short loc_401360
		mov	eax, [ebp+var_74]
		sub	eax, 4

loc_40139D:				; CODE XREF: ___tmainCRTStartup+326j
		mov	esi, [ebp+var_6C]
		mov	dword ptr [esi+eax], 0
		mov	ds:_argv, esi
		call	___main
		mov	edx, ds:_envp
		mov	eax, ds:__imp____initenv
		mov	[eax], edx
		mov	eax, ds:_argc
		mov	ecx, ds:_envp
		mov	edx, ds:_argv
		mov	[esp], eax	; argc
		mov	[esp+8], ecx	; envp
		mov	[esp+4], edx	; argv
		call	_main
; ---------------------------------------------------------------------------
		mov	ecx, ds:_managedapp
		test	ecx, ecx
		mov	ds:_mainret, eax
		jz	loc_4014AB
		mov	edx, ds:_has_cctor
		test	edx, edx
		jnz	short loc_401407
		call	__cexit
		mov	eax, ds:_mainret

loc_401407:				; CODE XREF: ___tmainCRTStartup+27Bj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
lock_free = eax				; void *
fiberid	= ebx				; void *
		align 10h

loc_401410:				; CODE XREF: ___tmainCRTStartup+84j
		mov	lock_free, ds:___native_startup_state
		mov	fiberid, 1
nested = ebx				; int
		cmp	eax, 1
		jnz	loc_401234

loc_401423:				; CODE XREF: ___tmainCRTStartup+AEj
		mov	dword ptr [esp], 1Fh
		call	__amsg_exit
		mov	eax, ds:___native_startup_state
		cmp	eax, 1
		jnz	loc_401259

loc_40143D:				; CODE XREF: ___tmainCRTStartup+D3j
		mov	dword ptr [esp+4], offset ___xc_z
		mov	dword ptr [esp], offset	___crt_xc_start__
		call	__initterm
		test	nested,	nested
		mov	ds:___native_startup_state, 2
		jnz	loc_401261

loc_401463:				; CODE XREF: ___tmainCRTStartup+DBj
		xchg	nested,	ds:___native_startup_lock
		jmp	loc_401261
; ---------------------------------------------------------------------------
lpszCommandLine	= eax			; _TCHAR *
		align 10h

loc_401470:				; CODE XREF: ___tmainCRTStartup+69j
		mov	[esp], edx	; lpStartupInfo
		call	ds:__imp__GetStartupInfoA@4
		sub	esp, 4
		jmp	loc_4011EF
; ---------------------------------------------------------------------------

loc_401481:				; CODE XREF: ___tmainCRTStartup+BBj
nested = ebx				; int
		mov	ds:___native_startup_state, 1
		mov	dword ptr [esp+4], offset ___xi_z
		mov	dword ptr [esp], offset	___crt_xc_end__
		call	__initterm
		jmp	loc_40124B
; ---------------------------------------------------------------------------

loc_4014A4:				; CODE XREF: ___tmainCRTStartup+1CFj
		xor	eax, eax
		jmp	loc_40139D
; ---------------------------------------------------------------------------

loc_4014AB:				; CODE XREF: ___tmainCRTStartup+26Dj
		mov	[esp], eax	; int
		xchg	ax, ax
		call	_exit_0
___tmainCRTStartup endp

; ---------------------------------------------------------------------------
		align 10h

		public _WinMainCRTStartup
_WinMainCRTStartup:
		sub	esp, 0Ch
		mov	ds:_mingw_app_type, 1
		call	___security_init_cookie
		add	esp, 0Ch
		jmp	___tmainCRTStartup
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int mainCRTStartup()
		public _mainCRTStartup
_mainCRTStartup	proc near
		sub	esp, 0Ch
		mov	ds:_mingw_app_type, 0
		call	___security_init_cookie
		add	esp, 0Ch
		jmp	___tmainCRTStartup
_mainCRTStartup	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public ___gcc_register_frame
___gcc_register_frame proc near		; CODE XREF: _register_frame_ctor+6p

lpModuleName	= dword	ptr -1Ch
lpProcName	= dword	ptr -18h

		mov	eax, ___JCR_END__
		test	eax, eax
		jz	short locret_40154C
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+1Ch+lpModuleName],	offset ModuleName ; "libgcj-13.dll"
		call	ds:__imp__GetModuleHandleA@4
		mov	edx, 0
		sub	esp, 4
		test	eax, eax
		jz	short loc_40153E
		mov	[esp+1Ch+lpProcName], offset ProcName ;	"_Jv_RegisterClasses"
		mov	[esp+1Ch+lpModuleName],	eax ; hModule
		call	ds:__imp__GetProcAddress@8
		sub	esp, 8
		mov	edx, eax

loc_40153E:				; CODE XREF: ___gcc_register_frame+26j
		test	edx, edx
		jz	short locret_40154B
		mov	[esp+1Ch+lpModuleName],	offset ___JCR_END__
		call	edx

locret_40154B:				; CODE XREF: ___gcc_register_frame+40j
		leave

locret_40154C:				; CODE XREF: ___gcc_register_frame+7j
		rep retn
___gcc_register_frame endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __gcc_deregister_frame(void)
		public ___gcc_deregister_frame
___gcc_deregister_frame	proc near	; DATA XREF: _register_frame_ctor+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
___gcc_deregister_frame	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_lock_dbg_cb	proc near		; DATA XREF: _main+A3o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	ecx, [esp+2Ch+arg_4]
		mov	edx, eax
		and	edx, 0Ch
		cmp	edx, 4
		jz	short loc_4015C0
		cmp	edx, 8
		jz	short loc_4015C0

loc_40157B:				; CODE XREF: _lock_dbg_cb+92j
		mov	edx, offset aInvalidMode ; "invalid mode"

loc_401580:				; CODE XREF: _lock_dbg_cb+85j
					; _lock_dbg_cb+B8j ...
		mov	ebx, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_14], ebx
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_18], ebx
		mov	[esp+2Ch+var_1C], ecx
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_28], offset aOpensslLock_db ; "openssl (lock_dbg_cb): %s (mode=%d,	typ"...
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+2Ch+var_2C], eax ;	FILE *
		call	_fprintf

loc_4015B4:				; CODE XREF: _lock_dbg_cb+7Bj
					; _lock_dbg_cb+E5j
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4015C0:				; CODE XREF: _lock_dbg_cb+14j
					; _lock_dbg_cb+19j
		cmp	ecx, 28h
		ja	short loc_4015E0
		test	al, 1
		jz	short loc_4015F0
		mov	ebx, ds:_modes_38028[ecx*4]
		test	ebx, ebx
		jnz	short loc_401620
		mov	ds:_modes_38028[ecx*4],	edx
		jmp	short loc_4015B4
; ---------------------------------------------------------------------------
		align 10h

loc_4015E0:				; CODE XREF: _lock_dbg_cb+63j
		mov	edx, offset aTypeOutOfBound ; "type out	of bounds"
		jmp	short loc_401580
; ---------------------------------------------------------------------------
		align 10h

loc_4015F0:				; CODE XREF: _lock_dbg_cb+67j
		test	al, 2
		jz	short loc_40157B
		mov	ebx, ds:_modes_38028[ecx*4]
		test	ebx, ebx
		jz	short loc_401630
		cmp	edx, ebx
		jz	short loc_40163A
		cmp	edx, 4
		jz	short loc_40164A
		mov	edx, offset aCrypto_w_unloc ; "CRYPTO_w_unlock on read lock"

loc_40160D:				; CODE XREF: _lock_dbg_cb+EFj
		mov	ds:_modes_38028[ecx*4],	0
		jmp	loc_401580
; ---------------------------------------------------------------------------
		align 10h

loc_401620:				; CODE XREF: _lock_dbg_cb+72j
		mov	edx, offset aAlreadyLocked ; "already locked"
		jmp	loc_401580
; ---------------------------------------------------------------------------
		align 10h

loc_401630:				; CODE XREF: _lock_dbg_cb+9Dj
		mov	edx, offset aNotLocked ; "not locked"
		jmp	loc_401580
; ---------------------------------------------------------------------------

loc_40163A:				; CODE XREF: _lock_dbg_cb+A1j
		mov	ds:_modes_38028[ecx*4],	0
		jmp	loc_4015B4
; ---------------------------------------------------------------------------

loc_40164A:				; CODE XREF: _lock_dbg_cb+A6j
		mov	edx, offset aCrypto_r_unloc ; "CRYPTO_r_unlock on write	lock"
		jmp	short loc_40160D
_lock_dbg_cb	endp

; ---------------------------------------------------------------------------
		jmp	short _function_LHASH_COMP
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_function_LHASH_COMP proc near		; CODE XREF: .text:00401651j
					; DATA XREF: _main+24Bo

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		sub	esp, 1Ch
		mov	[esp+1Ch+var_14], 8 ; size_t
		mov	eax, [esp+1Ch+arg_4]
		mov	eax, [eax+4]
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, [esp+1Ch+arg_0]
		mov	eax, [eax+4]
		mov	[esp+1Ch+var_1C], eax ;	char *
		call	_strncmp
		add	esp, 1Ch
		retn
_function_LHASH_COMP endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_function_LHASH_HASH proc near		; DATA XREF: _main+253o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+4]
		mov	[esp+arg_0], eax
		jmp	_lh_strhash
_function_LHASH_HASH endp


; =============== S U B	R O U T	I N E =======================================


_do_cmd		proc near		; CODE XREF: _main+402p _main+44Dp

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		test	edx, edx
		mov	[esp+5Ch+var_40], edx
		jle	short loc_4016F0
		mov	ebx, eax
		mov	esi, ecx
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_4016F0
		mov	[esp+5Ch+var_24], eax
		lea	edi, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], ebx
		call	_lh_retrieve
		test	eax, eax
		mov	edx, [esp+5Ch+var_40]
		jz	short loc_401700
		mov	eax, [eax+8]

loc_4016D8:				; CODE XREF: _do_cmd+87j _do_cmd+B4j
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], edx
		call	eax
		mov	ebx, eax

loc_4016E3:				; CODE XREF: _do_cmd+27Aj _do_cmd+2C1j ...
		mov	eax, ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4016F0:				; CODE XREF: _do_cmd+Dj _do_cmd+17j
		xor	ebx, ebx
		mov	eax, ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401700:				; CODE XREF: _do_cmd+33j
		mov	eax, [esi]
		mov	[esp+5Ch+var_5C], eax
		call	_EVP_get_digestbyname
		test	eax, eax
		mov	edx, [esp+5Ch+var_40]
		jz	short loc_401729
		mov	[esp+5Ch+var_28], 2
		mov	[esp+5Ch+var_20], offset _dgst_main
		mov	eax, offset _dgst_main
		jmp	short loc_4016D8
; ---------------------------------------------------------------------------

loc_401729:				; CODE XREF: _do_cmd+70j
		mov	[esp+5Ch+var_40], edx
		mov	eax, [esi]
		mov	[esp+5Ch+var_5C], eax
		call	_EVP_get_cipherbyname
		test	eax, eax
		jz	short loc_401756
		mov	[esp+5Ch+var_28], 3
		mov	[esp+5Ch+var_20], offset _enc_main
		mov	eax, offset _enc_main
		mov	edx, [esp+5Ch+var_40]
		jmp	short loc_4016D8
; ---------------------------------------------------------------------------

loc_401756:				; CODE XREF: _do_cmd+99j
		mov	ebp, [esi]
		mov	[esp+5Ch+var_54], 3 ; size_t
		mov	[esp+5Ch+var_58], offset aNo_2 ; "no-"
		mov	[esp+5Ch+var_5C], ebp ;	char *
		call	_strncmp
		test	eax, eax
		jz	loc_401970
		mov	edi, offset aQuit ; "quit"
		mov	ecx, 5
		mov	esi, ebp
		repe cmpsb
		jz	loc_4019E0
		mov	edi, offset aQ	; "q"
		mov	ecx, 2
		mov	esi, ebp
		repe cmpsb
		jz	loc_4019E0
		mov	edi, offset aExit ; "exit"
		mov	ecx, 5
		mov	esi, ebp
		repe cmpsb
		jz	loc_4019E0
		mov	edi, offset aBye ; "bye"
		mov	ecx, 4
		mov	esi, ebp
		repe cmpsb
		jz	loc_4019E0
		mov	edi, offset aListStandardCo ; "list-standard-commands"
		mov	ecx, 17h
		mov	esi, ebp
		repe cmpsb
		jz	loc_401920
		mov	edi, offset aListMessageDig ; "list-message-digest-commands"
		mov	ecx, 1Dh
		mov	esi, ebp
		repe cmpsb
		jz	loc_4019D0
		mov	edi, offset aListMessageD_0 ; "list-message-digest-algorithms"
		mov	ecx, 1Fh
		mov	esi, ebp
		repe cmpsb
		jnz	loc_4019F0
		mov	[esp+5Ch+var_58], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new_fp
		mov	edi, eax
		mov	[esp+5Ch+var_58], 0
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_load_config
		test	eax, eax
		jz	loc_40195C
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], offset _list_md_fn
		call	_EVP_MD_do_all_sorted
		mov	esi, 5

loc_401850:				; CODE XREF: _do_cmd+2B6j _do_cmd+4ECj
		mov	edx, off_455024
		mov	ebx, offset _functions
		test	edx, edx
		jnz	short loc_40187E
		jmp	loc_401910
; ---------------------------------------------------------------------------
		align 10h

loc_401870:				; CODE XREF: _do_cmd+1E0j _do_cmd+1F6j
		add	ebx, 0Ch
		mov	edx, [ebx+4]
		test	edx, edx
		jz	loc_401910

loc_40187E:				; CODE XREF: _do_cmd+1BDj
		cmp	[ebx], esi
		jnz	short loc_401870
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], offset aS_0 ;	"%s\n"
		mov	[esp+5Ch+var_5C], edi
		call	_BIO_printf
		jmp	short loc_401870
; ---------------------------------------------------------------------------

loc_401898:				; CODE XREF: _do_cmd+35Ej _do_cmd+372j
		mov	edi, offset aListPublicKeyA ; "list-public-key-algorithms"
		mov	ecx, 1Bh
		mov	esi, ebp
		repe cmpsb
		jz	loc_401A2C
		mov	edi, offset aListCipherAlgo ; "list-cipher-algorithms"
		mov	ecx, 17h
		mov	esi, ebp
		repe cmpsb
		jnz	loc_401BA0
		mov	[esp+5Ch+var_58], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new_fp
		mov	edi, eax
		mov	[esp+5Ch+var_58], 0
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_load_config
		test	eax, eax
		jz	short loc_40195C
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], offset _list_cipher_fn
		call	_EVP_CIPHER_do_all_sorted
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401910:				; CODE XREF: _do_cmd+1BFj _do_cmd+1D8j
		mov	[esp+5Ch+var_5C], edi
		call	_BIO_free_all
		xor	ebx, ebx
		jmp	loc_4016E3
; ---------------------------------------------------------------------------
		align 10h

loc_401920:				; CODE XREF: _do_cmd+136j
		mov	esi, 1

loc_401925:				; CODE XREF: _do_cmd+335j _do_cmd+505j
		mov	[esp+5Ch+var_58], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new_fp
		mov	edi, eax
		mov	[esp+5Ch+var_58], 0
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_load_config
		test	eax, eax
		jnz	loc_401850

loc_40195C:				; CODE XREF: _do_cmd+195j _do_cmd+251j ...
		mov	ebx, 1
		jmp	loc_4016E3
; ---------------------------------------------------------------------------
		align 10h

loc_401970:				; CODE XREF: _do_cmd+D2j
		mov	[esp+5Ch+var_58], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new_fp
		mov	ebp, eax
		mov	eax, [esi]
		add	eax, 3
		mov	[esp+5Ch+var_24], eax
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], ebx
		call	_lh_retrieve
		xor	ebx, ebx
		test	eax, eax
		setnz	bl
		mov	eax, [esi]
		test	ebx, ebx
		jz	short loc_4019AF
		add	eax, 3

loc_4019AF:				; CODE XREF: _do_cmd+30Aj
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aS_0 ;	"%s\n"
		mov	[esp+5Ch+var_5C], ebp
		call	_BIO_printf
		mov	[esp+5Ch+var_5C], ebp
		call	_BIO_free_all
		jmp	loc_4016E3
; ---------------------------------------------------------------------------

loc_4019D0:				; CODE XREF: _do_cmd+14Aj
		mov	esi, 2
		jmp	loc_401925
; ---------------------------------------------------------------------------
		align 10h

loc_4019E0:				; CODE XREF: _do_cmd+E6j _do_cmd+FAj ...
		mov	ebx, 0FFFFFFFFh
		jmp	loc_4016E3
; ---------------------------------------------------------------------------
		align 10h

loc_4019F0:				; CODE XREF: _do_cmd+15Ej
		mov	edi, offset aListCipherComm ; "list-cipher-commands"
		mov	ecx, 15h
		mov	esi, ebp
		repe cmpsb
		jz	loc_401898
		mov	edi, offset aListCipherAlgo ; "list-cipher-algorithms"
		mov	ecx, 17h
		mov	esi, ebp
		repe cmpsb
		jz	loc_401898
		mov	edi, offset aListPublicKeyA ; "list-public-key-algorithms"
		mov	ecx, 1Bh
		mov	esi, ebp
		repe cmpsb
		jnz	loc_401BAA

loc_401A2C:				; CODE XREF: _do_cmd+206j
		mov	[esp+5Ch+var_58], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new_fp
		mov	edi, eax
		mov	[esp+5Ch+var_58], 0
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_load_config
		test	eax, eax
		jz	loc_40195C
		xor	ebx, ebx
		lea	ebp, [esp+5Ch+var_2C]
		lea	esi, [esp+5Ch+var_30]
		lea	esi, [esi+0]

loc_401A70:				; CODE XREF: _do_cmd+455j _do_cmd+4D5j
		call	_EVP_PKEY_asn1_get_count
		cmp	ebx, eax
		jge	loc_401B87
		mov	[esp+5Ch+var_5C], ebx
		call	_EVP_PKEY_asn1_get0
		mov	[esp+5Ch+var_48], eax
		mov	[esp+5Ch+var_4C], ebp
		mov	[esp+5Ch+var_50], esi
		lea	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_54], eax
		lea	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], eax
		lea	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_5C], eax
		call	_EVP_PKEY_asn1_get0_info
		test	[esp+5Ch+var_34], 1
		jz	short loc_401B00
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_5C], eax
		call	_OBJ_nid2ln
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aNameS	; "Name: %s\n"
		mov	[esp+5Ch+var_5C], edi
		call	_BIO_printf
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	_OBJ_nid2ln
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aTypeAliasToS ; "\tType: Alias	to %s\n"
		mov	[esp+5Ch+var_5C], edi
		call	_BIO_printf
		inc	ebx
		jmp	loc_401A70
; ---------------------------------------------------------------------------
		align 10h

loc_401B00:				; CODE XREF: _do_cmd+412j
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aNameS	; "Name: %s\n"
		mov	[esp+5Ch+var_5C], edi
		call	_BIO_printf
		test	[esp+5Ch+var_34], 2
		jz	short loc_401B80
		mov	eax, offset aExternal ;	"External"

loc_401B24:				; CODE XREF: _do_cmd+4E5j
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aTypeSAlgorithm ; "\tType: %s Algorithm\n"
		mov	[esp+5Ch+var_5C], edi
		call	_BIO_printf
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_5C], eax
		call	_OBJ_nid2ln
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aOidS ; "\tOID: %s\n"
		mov	[esp+5Ch+var_5C], edi
		call	_BIO_printf
		mov	eax, [esp+5Ch+var_2C]
		test	eax, eax
		jz	short loc_401B91

loc_401B60:				; CODE XREF: _do_cmd+4FEj
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aPemStringS ; "\tPEM string: %s\n"
		mov	[esp+5Ch+var_5C], edi
		call	_BIO_printf
		inc	ebx
		jmp	loc_401A70
; ---------------------------------------------------------------------------
		align 10h

loc_401B80:				; CODE XREF: _do_cmd+47Dj
		mov	eax, offset aBuiltin ; "Builtin"
		jmp	short loc_401B24
; ---------------------------------------------------------------------------

loc_401B87:				; CODE XREF: _do_cmd+3D7j
		mov	esi, 4
		jmp	loc_401850
; ---------------------------------------------------------------------------

loc_401B91:				; CODE XREF: _do_cmd+4BEj
		mov	[esp+5Ch+var_2C], offset aNone_0 ; "(none)"
		mov	eax, offset aNone_0 ; "(none)"
		jmp	short loc_401B60
; ---------------------------------------------------------------------------

loc_401BA0:				; CODE XREF: _do_cmd+21Aj
		mov	esi, 3
		jmp	loc_401925
; ---------------------------------------------------------------------------

loc_401BAA:				; CODE XREF: _do_cmd+386j
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], offset aOpensslErrorSI ; "openssl:Error: '%s' is an invalid comma"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_58], offset aStandardComman ; "\nStandard commands"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	edx, off_455024
		test	edx, edx
		jz	loc_401C6A
		xor	esi, esi
		xor	eax, eax
		mov	ebx, offset _functions
		jmp	short loc_401C44
; ---------------------------------------------------------------------------

loc_401BF1:				; CODE XREF: _do_cmd+5A9j
		mov	ebp, [ebx]
		cmp	ebp, esi
		jz	short loc_401C1C
		mov	[esp+5Ch+var_58], offset asc_45822A ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	esi, ebp

loc_401C0E:				; CODE XREF: _do_cmd+5C8j
		cmp	esi, 2
		jz	short loc_401C86
		cmp	esi, 3
		jz	loc_401CA5

loc_401C1C:				; CODE XREF: _do_cmd+555j _do_cmd+5C4j ...
		mov	eax, [ebx+4]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset a18s ;	"%-18s"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		add	ebx, 0Ch
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_401C6A
		mov	eax, edi

loc_401C44:				; CODE XREF: _do_cmd+54Fj
		lea	edi, [eax+1]
		test	al, 3
		jnz	short loc_401BF1
		mov	[esp+5Ch+var_58], offset asc_45822A ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, [ebx]
		cmp	eax, esi
		jz	short loc_401C1C
		mov	esi, eax
		jmp	short loc_401C0E
; ---------------------------------------------------------------------------

loc_401C6A:				; CODE XREF: _do_cmd+540j _do_cmd+5A0j
		mov	[esp+5Ch+var_58], offset asc_458227 ; "\n\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_4016E3
; ---------------------------------------------------------------------------

loc_401C86:				; CODE XREF: _do_cmd+571j
		mov	[esp+5Ch+var_58], offset aMessageDigestC ; "\nMessage Digest commands (see the `dgs"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	edi, 1
		jmp	loc_401C1C
; ---------------------------------------------------------------------------

loc_401CA5:				; CODE XREF: _do_cmd+576j
		mov	[esp+5Ch+var_58], offset aCipherCommands ; "\nCipher commands (see the `enc' comman"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	edi, 1
		jmp	loc_401C1C
_do_cmd		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl SortFnByName(const void *, const void *)
_SortFnByName	proc near		; DATA XREF: _main:loc_4524FBo

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		mov	ecx, [esp+4+arg_0]
		mov	ebx, [esp+4+arg_4]
		mov	eax, [ecx]
		mov	edx, [ebx]
		cmp	eax, edx
		jz	short loc_401CF0
		sub	eax, edx
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401CF0:				; CODE XREF: _SortFnByName+Fj
		mov	eax, [ebx+4]
		mov	[esp+4+arg_4], eax ; char *
		mov	eax, [ecx+4]
		mov	[esp+4+arg_0], eax ; char *
		pop	ebx
		jmp	_strcmp
_SortFnByName	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_list_md_fn	proc near		; DATA XREF: _do_cmd+19Fo

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		mov	ecx, [esp+1Ch+arg_8]
		mov	ebx, [esp+1Ch+arg_C]
		test	eax, eax
		jz	short loc_401D60
		mov	[esp+1Ch+var_1C], eax
		call	_EVP_MD_type
		mov	[esp+1Ch+var_1C], eax
		call	_OBJ_nid2sn
		mov	[esp+1Ch+arg_8], eax
		mov	[esp+1Ch+arg_4], offset	aS_0 ; "%s\n"
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	_BIO_printf
; ---------------------------------------------------------------------------
		jmp	short loc_401D60
; ---------------------------------------------------------------------------
		align 10h

loc_401D60:				; CODE XREF: _list_md_fn+16j
					; _list_md_fn+41j
		test	edx, edx
		jz	short loc_401D90

loc_401D64:				; CODE XREF: _list_md_fn+85j
		test	ecx, ecx
		jz	short loc_401DA0

loc_401D68:				; CODE XREF: _list_md_fn+95j
		mov	[esp+1Ch+arg_C], ecx
		mov	[esp+1Ch+arg_8], edx
		mov	[esp+1Ch+arg_4], offset	aSS_0 ;	"%s => %s\n"
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	_BIO_printf
; ---------------------------------------------------------------------------
		align 10h

loc_401D90:				; CODE XREF: _list_md_fn+52j
		mov	edx, offset aUndefined ; "<undefined>"
		jmp	short loc_401D64
; ---------------------------------------------------------------------------
		align 10h

loc_401DA0:				; CODE XREF: _list_md_fn+56j
		mov	ecx, offset aUndefined ; "<undefined>"
		jmp	short loc_401D68
_list_md_fn	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_list_cipher_fn	proc near		; DATA XREF: _do_cmd+257o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_0]
		mov	edx, [esp+1Ch+arg_4]
		mov	ecx, [esp+1Ch+arg_8]
		mov	ebx, [esp+1Ch+arg_C]
		test	eax, eax
		jz	short loc_401E00
		mov	[esp+1Ch+var_1C], eax
		call	_EVP_CIPHER_nid
		mov	[esp+1Ch+var_1C], eax
		call	_OBJ_nid2sn
		mov	[esp+1Ch+arg_8], eax
		mov	[esp+1Ch+arg_4], offset	aS_0 ; "%s\n"
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	_BIO_printf
; ---------------------------------------------------------------------------
		jmp	short loc_401E00
; ---------------------------------------------------------------------------
		align 10h

loc_401E00:				; CODE XREF: _list_cipher_fn+16j
					; _list_cipher_fn+41j
		test	edx, edx
		jz	short loc_401E30

loc_401E04:				; CODE XREF: _list_cipher_fn+85j
		test	ecx, ecx
		jz	short loc_401E40

loc_401E08:				; CODE XREF: _list_cipher_fn+95j
		mov	[esp+1Ch+arg_C], ecx
		mov	[esp+1Ch+arg_8], edx
		mov	[esp+1Ch+arg_4], offset	aSS_0 ;	"%s => %s\n"
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	_BIO_printf
; ---------------------------------------------------------------------------
		align 10h

loc_401E30:				; CODE XREF: _list_cipher_fn+52j
		mov	edx, offset aUndefined ; "<undefined>"
		jmp	short loc_401E04
; ---------------------------------------------------------------------------
		align 10h

loc_401E40:				; CODE XREF: _list_cipher_fn+56j
		mov	ecx, offset aUndefined ; "<undefined>"
		jmp	short loc_401E08
_list_cipher_fn	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_cb		proc near		; DATA XREF: _verify_main+28o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_STORE_CTX_get_error
		mov	edi, eax
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_STORE_CTX_get_current_cert
		mov	edx, [esp+3Ch+arg_0]
		test	edx, edx
		jnz	loc_401F10
		test	eax, eax
		jz	short loc_401EB5
		mov	[esp+3Ch+var_3C], eax
		call	_X509_get_subject_name
		mov	[esp+3Ch+var_30], 82031Fh
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], eax
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+3Ch+var_3C], eax
		call	_X509_NAME_print_ex_fp
		mov	[esp+3Ch+var_3C], 0Ah ;	int
		call	_putchar

loc_401EB5:				; CODE XREF: _cb+2Bj
		mov	[esp+3Ch+var_3C], edi
		call	_X509_verify_cert_error_string
		mov	esi, eax
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_STORE_CTX_get_error_depth
		mov	ebp, eax
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_STORE_CTX_get0_parent_ctx
		test	eax, eax
		jz	loc_401FB0
		mov	eax, offset aCrlPath ; "[CRL path]"

loc_401EDE:				; CODE XREF: _cb+165j
		mov	[esp+3Ch+var_2C], esi
		mov	[esp+3Ch+var_30], ebp
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], offset aSerrorDAtDDept ; "%serror %d at %d depth lookup:%s\n"
		call	_printf
		sub	edi, 0Ah	; switch 34 cases
		cmp	edi, 21h
		ja	short loc_401F28 ; jumptable 00401F02 default case
		jmp	ds:off_458704[edi*4] ; switch jump
; ---------------------------------------------------------------------------
		align 10h

loc_401F10:				; CODE XREF: _cb+23j
		test	edi, edi
		jnz	short loc_401F1F
		cmp	[esp+3Ch+arg_0], 2
		jz	loc_401FC0

loc_401F1F:				; CODE XREF: _cb+C2j _cb+180j
		mov	eax, ds:_v_verbose
		test	eax, eax
		jz	short loc_401F90

loc_401F28:				; CODE XREF: _cb+B0j _cb+B2j
					; DATA XREF: ...
		mov	eax, [esp+3Ch+arg_0] ; jumptable 00401F02 default case
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401F40:				; CODE XREF: _cb+B2j
					; DATA XREF: .rdata:off_458704o
		mov	[esp+3Ch+arg_0], 1 ; jumptable 00401F02	cases 10-12,18,24-26,34,37
		mov	eax, [esp+3Ch+arg_0]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401F60:				; CODE XREF: _cb+B2j
					; DATA XREF: .rdata:off_458704o
		mov	[esp+3Ch+var_38], ebx ;	jumptable 00401F02 case	43
		mov	[esp+3Ch+var_3C], 0
		call	_policies_print
		mov	[esp+3Ch+arg_0], 1
		mov	eax, [esp+3Ch+arg_0]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401F90:				; CODE XREF: _cb+D6j
		call	_ERR_clear_error
		mov	eax, [esp+3Ch+arg_0]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_401FB0
; ---------------------------------------------------------------------------
		align 10h

loc_401FB0:				; CODE XREF: _cb+83j _cb+151j
		mov	eax, offset byte_4586DF
		jmp	loc_401EDE
; ---------------------------------------------------------------------------
		align 10h

loc_401FC0:				; CODE XREF: _cb+C9j
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], 0
		call	_policies_print
		jmp	loc_401F1F
_cb		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_check		proc near		; CODE XREF: _verify_main+53Ap
					; _verify_main+719p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, eax
		mov	ebx, edx
		mov	ebp, ecx
		mov	[esp+3Ch+var_28], offset aCertificateFil ; "certificate	file"
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_2C], eax
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 3
		mov	[esp+3Ch+var_38], edx
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_load_cert
		mov	esi, eax
		test	eax, eax
		jz	loc_40212D
		test	ebx, ebx
		jz	loc_402150

loc_402030:				; CODE XREF: _check+175j
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], offset aS_1 ;	"%s: "
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+3Ch+var_3C], eax ;	FILE *
		call	_fprintf
		call	_X509_STORE_CTX_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_402120
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], edi
		call	_X509_STORE_set_flags
		mov	[esp+3Ch+var_30], ebp
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_STORE_CTX_init
		test	eax, eax
		jz	loc_402120
		mov	edx, [esp+3Ch+arg_0]
		test	edx, edx
		jz	short loc_40209F
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_STORE_CTX_trusted_stack

loc_40209F:				; CODE XREF: _check+ADj
		mov	eax, [esp+3Ch+arg_4]
		test	eax, eax
		jz	short loc_4020B7
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_STORE_CTX_set0_crls

loc_4020B7:				; CODE XREF: _check+C5j
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_verify_cert
		mov	edi, eax
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_STORE_CTX_free
		test	edi, edi
		jle	loc_40215A
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+3Ch+var_30], eax ;	FILE *
		mov	[esp+3Ch+var_34], 3 ; size_t
		mov	[esp+3Ch+var_38], 1 ; size_t
		mov	[esp+3Ch+var_3C], offset aOk ; "OK\n"
		call	_fwrite
		mov	eax, 1

loc_4020FE:				; CODE XREF: _check+15Ej _check+189j
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_3C], esi
		call	_X509_free
		mov	eax, [esp+3Ch+var_20]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402120:				; CODE XREF: _check+75j _check+A1j
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors

loc_40212D:				; CODE XREF: _check+42j
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		xor	eax, eax
		test	esi, esi
		jnz	short loc_4020FE
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402150:				; CODE XREF: _check+4Aj
		mov	ebx, offset aStdin ; "stdin"
		jmp	loc_402030
; ---------------------------------------------------------------------------

loc_40215A:				; CODE XREF: _check+EBj
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		xor	eax, eax
		jmp	short loc_4020FE
_check		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _verify_main
_verify_main	proc near		; DATA XREF: .data:00455028o

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	[esp+6Ch+var_24], 0
		mov	[esp+6Ch+var_20], 0
		call	_X509_STORE_new
		mov	[esp+6Ch+var_44], eax
		test	eax, eax
		jz	loc_4022C1
		mov	[esp+6Ch+var_68], offset _cb
		mov	[esp+6Ch+var_6C], eax
		call	_X509_STORE_set_verify_cb
		call	_ERR_load_crypto_strings
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_40277E

loc_4021BB:				; CODE XREF: _verify_main+622j
					; _verify_main+653j
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_4022C1
		mov	eax, [esp+6Ch+arg_0]
		lea	ebp, [eax-1]
		mov	[esp+6Ch+arg_0], ebp
		add	[esp+6Ch+arg_4], 4
		mov	[esp+6Ch+var_34], 0
		mov	[esp+6Ch+var_30], 0
		mov	[esp+6Ch+var_38], 0
		mov	[esp+6Ch+var_3C], 0
		mov	[esp+6Ch+var_40], 0
		mov	[esp+6Ch+var_48], 0
		jmp	short loc_402237
; ---------------------------------------------------------------------------
		align 10h

loc_402220:				; CODE XREF: _verify_main+E3j
		mov	ebx, [eax+4]
		mov	[esp+6Ch+var_48], ebx
		add	eax, 4
		dec	ebp

loc_40222B:				; CODE XREF: _verify_main+100j
					; _verify_main+2D7j ...
		dec	ebp
		mov	[esp+6Ch+arg_0], ebp
		add	eax, 4
		mov	[esp+6Ch+arg_4], eax

loc_402237:				; CODE XREF: _verify_main+A3j
					; _verify_main+2E4j
		test	ebp, ebp
		jle	loc_4024B0
		mov	eax, [esp+6Ch+arg_4]
		mov	edx, [eax]
		mov	edi, offset aCapath ; "-CApath"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jz	short loc_402220
		mov	edi, offset aCafile ; "-CAfile"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jnz	short loc_402280
		mov	edx, [eax+4]
		mov	[esp+6Ch+var_40], edx
		add	eax, 4
		dec	ebp
		jmp	short loc_40222B
; ---------------------------------------------------------------------------
		align 10h

loc_402280:				; CODE XREF: _verify_main+F3j
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_5C], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_60], eax
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_64], eax
		lea	eax, [esp+6Ch+arg_0]
		mov	[esp+6Ch+var_68], eax
		lea	eax, [esp+6Ch+arg_4]
		mov	[esp+6Ch+var_6C], eax
		call	_args_verify
		test	eax, eax
		jz	loc_402400
		mov	edx, [esp+6Ch+var_24]
		test	edx, edx
		jz	loc_402450

loc_4022C1:				; CODE XREF: _verify_main+22j
					; _verify_main+5Dj ...
		xor	esi, esi
		mov	[esp+6Ch+var_48], 0

loc_4022CB:				; CODE XREF: _verify_main+4B2j
					; _verify_main+4F9j ...
		mov	[esp+6Ch+var_68], offset aUsageVerifyVer ; "usage: verify [-verbose] [-CApath path]"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aNo_alt_chainsA ; " [-no_alt_chains] [-attime timestamp]"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aEngineE ; " [-engine e]"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aCert1Cert2___	; " cert1 cert2	...\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aRecognizedUsag ; "recognized usages:\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	short loc_40237A
; ---------------------------------------------------------------------------
		align 10h

loc_402340:				; CODE XREF: _verify_main+211j
		mov	[esp+6Ch+var_6C], edi
		call	_X509_PURPOSE_get0
		mov	ebx, eax
		mov	[esp+6Ch+var_6C], eax
		call	_X509_PURPOSE_get0_name
		mov	ebp, eax
		mov	[esp+6Ch+var_6C], ebx
		call	_X509_PURPOSE_get0_sname
		mov	[esp+6Ch+var_60], ebp
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset a10sS ; "\t%-10s\t%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		inc	edi

loc_40237A:				; CODE XREF: _verify_main+1C6j
		call	_X509_PURPOSE_get_count
		cmp	edi, eax
		jl	short loc_402340
		xor	ebp, ebp
		mov	edi, 1

loc_40238A:				; CODE XREF: _verify_main+555j
					; _verify_main+72Bj
		mov	eax, [esp+6Ch+var_20]
		test	eax, eax
		jz	short loc_40239A
		mov	[esp+6Ch+var_6C], eax
		call	_X509_VERIFY_PARAM_free

loc_40239A:				; CODE XREF: _verify_main+220j
		mov	eax, [esp+6Ch+var_44]
		test	eax, eax
		jz	short loc_4023AA
		mov	[esp+6Ch+var_6C], eax
		call	_X509_STORE_free

loc_4023AA:				; CODE XREF: _verify_main+230j
		mov	[esp+6Ch+var_68], offset _X509_free
		mov	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_6C], eax
		call	_sk_pop_free
		mov	[esp+6Ch+var_68], offset _X509_free
		mov	[esp+6Ch+var_6C], esi
		call	_sk_pop_free
		mov	[esp+6Ch+var_68], offset _X509_CRL_free
		mov	[esp+6Ch+var_6C], ebp
		call	_sk_pop_free
		cmp	edi, 0FFFFFFFFh
		jz	loc_402490
		mov	eax, edi
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_402400
; ---------------------------------------------------------------------------
		align 10h

loc_402400:				; CODE XREF: _verify_main+13Fj
					; _verify_main+281j
		mov	eax, [esp+6Ch+arg_4]
		mov	ebx, [eax]
		mov	edi, offset aUntrusted ; "-untrusted"
		mov	ecx, 0Bh
		mov	esi, ebx
		repe cmpsb
		jz	short loc_402460
		mov	edi, offset aTrusted ; "-trusted"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jnz	loc_4026D0
		mov	edx, [esp+6Ch+arg_0]
		lea	ebp, [edx-1]
		mov	[esp+6Ch+arg_0], ebp
		test	edx, edx
		jle	loc_4022C1
		mov	esi, [eax+4]
		mov	[esp+6Ch+var_38], esi
		add	eax, 4
		jmp	loc_40222B
; ---------------------------------------------------------------------------
		align 10h

loc_402450:				; CODE XREF: _verify_main+14Bj
		mov	ebp, [esp+6Ch+arg_0]
		jmp	loc_402237
; ---------------------------------------------------------------------------
		align 10h

loc_402460:				; CODE XREF: _verify_main+2A4j
		mov	edx, [esp+6Ch+arg_0]
		lea	ebp, [edx-1]
		mov	[esp+6Ch+arg_0], ebp
		test	edx, edx
		jle	loc_4022C1
		mov	esi, [eax+4]
		mov	[esp+6Ch+var_3C], esi
		add	eax, 4
		jmp	loc_40222B
; ---------------------------------------------------------------------------
		align 10h

loc_402490:				; CODE XREF: _verify_main+271j
		mov	eax, 2
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40249D:				; CODE XREF: _verify_main+68Fj
		cmp	byte ptr [ebx],	2Dh
		jz	loc_4022C1
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4024B0:				; CODE XREF: _verify_main+C9j
		mov	[esp+6Ch+var_64], 0
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_68], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_setup_engine
		mov	[esp+6Ch+var_34], eax
		mov	eax, [esp+6Ch+var_20]
		test	eax, eax
		jz	short loc_4024E9
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_6C], eax
		call	_X509_STORE_set1_param

loc_4024E9:				; CODE XREF: _verify_main+367j
		call	_X509_LOOKUP_file
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_6C], eax
		call	_X509_STORE_add_lookup
		test	eax, eax
		jz	loc_4028A0
		mov	esi, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_5C], 0
		test	esi, esi
		jz	loc_40281F
		mov	[esp+6Ch+var_60], 1
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], eax
		call	_X509_LOOKUP_ctrl
		test	eax, eax
		jz	loc_4027C8

loc_40253E:				; CODE XREF: _verify_main+6CFj
		call	_X509_LOOKUP_hash_dir
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_6C], eax
		call	_X509_STORE_add_lookup
		test	eax, eax
		jz	loc_4028A0
		mov	esi, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_5C], 0
		test	esi, esi
		jz	loc_40284B
		mov	[esp+6Ch+var_60], 1
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], eax
		call	_X509_LOOKUP_ctrl
		test	eax, eax
		jz	loc_402738

loc_402593:				; CODE XREF: _verify_main+6FBj
		call	_ERR_clear_error
		mov	eax, [esp+6Ch+var_3C]
		test	eax, eax
		jz	loc_402771
		mov	[esp+6Ch+var_58], offset aUntrustedCerti ; "untrusted certificates"
		mov	esi, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_5C], esi
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 3
		mov	[esp+6Ch+var_68], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_load_certs
		mov	[esp+6Ch+var_48], eax
		test	eax, eax
		jz	loc_4022C1

loc_4025E1:				; CODE XREF: _verify_main+609j
		mov	eax, [esp+6Ch+var_38]
		test	eax, eax
		jz	loc_402818
		mov	[esp+6Ch+var_58], offset aTrustedCertifi ; "trusted certificates"
		mov	esi, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_5C], esi
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 3
		mov	[esp+6Ch+var_68], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_load_certs
		mov	esi, eax
		test	eax, eax
		jz	loc_4022CB

loc_402628:				; CODE XREF: _verify_main+6AAj
		mov	eax, [esp+6Ch+var_30]
		test	eax, eax
		jz	loc_402844
		mov	[esp+6Ch+var_58], offset aOtherCrls ; "other CRLs"
		mov	ebx, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_5C], ebx
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 3
		mov	[esp+6Ch+var_68], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_load_crls
		mov	ebp, eax
		test	eax, eax
		jz	loc_4022CB

loc_40266F:				; CODE XREF: _verify_main+6D6j
		mov	eax, [esp+6Ch+arg_0]
		test	eax, eax
		jle	loc_402870
		xor	edi, edi
		xor	ebx, ebx
		mov	[esp+6Ch+var_40], edi
		mov	edi, [esp+6Ch+var_34]
		mov	esi, esi
		lea	edi, [edi+0]

loc_402690:				; CODE XREF: _verify_main+54Fj
		mov	eax, [esp+6Ch+arg_4]
		mov	edx, [eax+ebx*4]
		mov	[esp+6Ch+var_64], edi
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], esi
		mov	ecx, [esp+6Ch+var_48]
		mov	eax, [esp+6Ch+var_44]
		call	_check
		dec	eax
		jz	short loc_4026BA
		mov	[esp+6Ch+var_40], 0FFFFFFFFh

loc_4026BA:				; CODE XREF: _verify_main+540j
		inc	ebx
		cmp	[esp+6Ch+arg_0], ebx
		jg	short loc_402690
		mov	edi, [esp+6Ch+var_40]
		jmp	loc_40238A
; ---------------------------------------------------------------------------
		align 10h

loc_4026D0:				; CODE XREF: _verify_main+2B4j
		mov	edi, offset aCrlfile ; "-CRLfile"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jz	short loc_402716
		mov	edi, offset aEngine ; "-engine"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jnz	loc_4027DD
		mov	esi, [esp+6Ch+arg_0]
		lea	ebp, [esi-1]
		mov	[esp+6Ch+arg_0], ebp
		test	ebp, ebp
		jle	loc_4022C1
		mov	esi, [eax+4]
		mov	[esp+6Ch+var_34], esi
		add	eax, 4
		jmp	loc_40222B
; ---------------------------------------------------------------------------

loc_402716:				; CODE XREF: _verify_main+56Ej
		mov	edx, [esp+6Ch+arg_0]
		lea	ebp, [edx-1]
		mov	[esp+6Ch+arg_0], ebp
		test	edx, edx
		jle	loc_4022C1
		mov	esi, [eax+4]
		mov	[esp+6Ch+var_30], esi
		add	eax, 4
		jmp	loc_40222B
; ---------------------------------------------------------------------------

loc_402738:				; CODE XREF: _verify_main+41Dj
		mov	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aErrorLoadingDi ; "Error loading directory %s\n"

loc_402748:				; CODE XREF: _verify_main+668j
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_ERR_print_errors
		xor	esi, esi
		mov	[esp+6Ch+var_48], 0
		jmp	loc_4022CB
; ---------------------------------------------------------------------------

loc_402771:				; CODE XREF: _verify_main+42Ej
		mov	[esp+6Ch+var_48], 0
		jmp	loc_4025E1
; ---------------------------------------------------------------------------

loc_40277E:				; CODE XREF: _verify_main+45j
		call	_BIO_s_file
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_4021BB
		mov	esi, ds:__imp___iob
		lea	edx, [esi+40h]
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_64], 10h
		mov	[esp+6Ch+var_68], 6Ah
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_4021BB
; ---------------------------------------------------------------------------

loc_4027C8:				; CODE XREF: _verify_main+3C8j
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aErrorLoadingFi ; "Error loading file %s\n"
		jmp	loc_402748
; ---------------------------------------------------------------------------

loc_4027DD:				; CODE XREF: _verify_main+57Ej
		mov	edi, offset aHelp ; "-help"
		mov	ecx, 6
		mov	esi, ebx
		repe cmpsb
		jz	loc_4022C1
		mov	edi, offset aVerbose ; "-verbose"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jnz	loc_40249D
		mov	ds:_v_verbose, 1
		mov	ebp, [esp+6Ch+arg_0]
		jmp	loc_40222B
; ---------------------------------------------------------------------------

loc_402818:				; CODE XREF: _verify_main+477j
		xor	esi, esi
		jmp	loc_402628
; ---------------------------------------------------------------------------

loc_40281F:				; CODE XREF: _verify_main+3A4j
		mov	[esp+6Ch+var_60], 3
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 1
		mov	[esp+6Ch+var_6C], eax
		call	_X509_LOOKUP_ctrl
		jmp	loc_40253E
; ---------------------------------------------------------------------------

loc_402844:				; CODE XREF: _verify_main+4BEj
		xor	ebp, ebp
		jmp	loc_40266F
; ---------------------------------------------------------------------------

loc_40284B:				; CODE XREF: _verify_main+3F9j
		mov	[esp+6Ch+var_60], 3
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 2
		mov	[esp+6Ch+var_6C], eax
		call	_X509_LOOKUP_ctrl
		jmp	loc_402593
; ---------------------------------------------------------------------------

loc_402870:				; CODE XREF: _verify_main+505j
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], esi
		mov	ecx, [esp+6Ch+var_48]
		xor	edx, edx
		mov	eax, [esp+6Ch+var_44]
		call	_check
		dec	eax
		setnz	al
		and	eax, 0FFh
		mov	edi, eax
		neg	edi
		jmp	loc_40238A
; ---------------------------------------------------------------------------

loc_4028A0:				; CODE XREF: _verify_main+390j
					; _verify_main+3E5j
		call	_abort
_verify_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _asn1parse_main
_asn1parse_main	proc near		; DATA XREF: .data:00455034o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_402F06

loc_4028C5:				; CODE XREF: _asn1parse_main+66Aj
					; _asn1parse_main+69Bj
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], ebx
		call	_load_config
		test	eax, eax
		jnz	short loc_402940
		mov	[esp+7Ch+var_58], 0

loc_4028E1:				; CODE XREF: _asn1parse_main+61Dj
					; _asn1parse_main+81Aj
		mov	[esp+7Ch+var_7C], 0
		call	_BIO_free
		xor	edi, edi
		mov	ebx, 1
		xor	esi, esi

loc_4028F6:				; CODE XREF: _asn1parse_main+78Aj
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors

loc_402903:				; CODE XREF: _asn1parse_main+784j
		test	esi, esi
		jz	short loc_40290F
		mov	[esp+7Ch+var_7C], esi
		call	_BUF_MEM_free

loc_40290F:				; CODE XREF: _asn1parse_main+55j
		test	edi, edi
		jz	short loc_40291B
		mov	[esp+7Ch+var_7C], edi
		call	_ASN1_TYPE_free

loc_40291B:				; CODE XREF: _asn1parse_main+61j
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jz	short loc_40292B
		mov	[esp+7Ch+var_7C], eax
		call	_sk_free

loc_40292B:				; CODE XREF: _asn1parse_main+71j
		call	_OBJ_cleanup
		mov	eax, ebx
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_402940:				; CODE XREF: _asn1parse_main+27j
		mov	eax, [esp+7Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+7Ch+var_4C], eax
		mov	eax, [esp+7Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+7Ch+arg_4]
		lea	ebx, [eax+4]
		call	_sk_new_null
		mov	[esp+7Ch+var_58], eax
		test	eax, eax
		jz	loc_4030B5
		mov	[esp+7Ch+var_38], 0
		mov	[esp+7Ch+var_34], 0
		mov	[esp+7Ch+var_54], 0
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_5C], 0
		mov	[esp+7Ch+var_30], 0
		mov	[esp+7Ch+var_48], 0
		mov	[esp+7Ch+var_50], 0
		mov	[esp+7Ch+var_60], 3
		mov	[esp+7Ch+var_3C], 0
		mov	[esp+7Ch+var_40], 0
		test	ebp, ebp
		jg	short loc_4029F1
		jmp	short loc_402A30
; ---------------------------------------------------------------------------

loc_4029D0:				; CODE XREF: _asn1parse_main+151j
		dec	ebp
		jz	loc_402D60
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_str2fmt
		mov	[esp+7Ch+var_60], eax

loc_4029E9:				; CODE XREF: _asn1parse_main+401j
					; _asn1parse_main+471j	...
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jle	short loc_402A30

loc_4029F1:				; CODE XREF: _asn1parse_main+11Cj
					; _asn1parse_main+17Ej
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aInform ; "-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_4029D0
		mov	edi, offset aIn	; "-in"
		mov	esi, eax
		mov	ecx, 4
		repe cmpsb
		jnz	loc_402C90
		dec	ebp
		jz	loc_402D60
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_5C], eax
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jg	short loc_4029F1

loc_402A30:				; CODE XREF: _asn1parse_main+11Ej
					; _asn1parse_main+13Fj
		call	_ERR_load_crypto_strings
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	ebp, eax
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	[esp+7Ch+var_4C], eax
		test	ebp, ebp
		jz	loc_4030FE
		mov	edx, eax
		test	eax, eax
		jz	loc_402FE0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 10h
		mov	[esp+7Ch+var_78], 6Ah
		mov	[esp+7Ch+var_7C], edx
		call	_BIO_ctrl
		mov	eax, [esp+7Ch+var_44]
		test	eax, eax
		jz	short loc_402ABF
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 3
		mov	[esp+7Ch+var_78], 6Ch
		mov	[esp+7Ch+var_7C], ebp
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_403163
		mov	[esp+7Ch+var_7C], ebp
		call	_OBJ_create_objects

loc_402ABF:				; CODE XREF: _asn1parse_main+1E1j
		mov	eax, [esp+7Ch+var_5C]
		test	eax, eax
		jz	loc_403237
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 3
		mov	[esp+7Ch+var_78], 6Ch
		mov	[esp+7Ch+var_7C], ebp
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_40334B

loc_402AF3:				; CODE XREF: _asn1parse_main+9A8j
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jz	loc_403287
		mov	[esp+7Ch+var_78], offset aWb_0 ; "wb"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_file
		mov	[esp+7Ch+var_44], eax
		test	eax, eax
		jz	loc_4033EC

loc_402B1B:				; CODE XREF: _asn1parse_main+9DFj
		call	_BUF_MEM_new
		mov	esi, eax
		test	eax, eax
		jz	loc_4030DE
		mov	[esp+7Ch+var_78], 1000h
		mov	[esp+7Ch+var_7C], eax
		call	_BUF_MEM_grow
		test	eax, eax
		jz	loc_4030DE
		mov	edi, [esp+7Ch+var_34]
		test	edi, edi
		jz	loc_403294
		mov	edi, ds:_bio_err
		mov	[esp+7Ch+var_24], 0
		mov	ecx, [esp+7Ch+var_38]
		test	ecx, ecx
		jz	loc_403493
		mov	[esp+7Ch+var_7C], 0
		call	_NCONF_new
		mov	ebx, eax
		lea	eax, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	_NCONF_load
		test	eax, eax
		jz	loc_40349A

loc_402B96:				; CODE XREF: _asn1parse_main+A4Aj
					; _asn1parse_main+BE5j
		mov	[esp+7Ch+var_78], ebx
		mov	eax, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_7C], eax
		call	_ASN1_generate_nconf
		mov	edi, eax
		mov	[esp+7Ch+var_7C], ebx
		call	_NCONF_free
		test	edi, edi
		jz	loc_40332A
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], edi
		call	_i2d_ASN1_TYPE
		mov	[esp+7Ch+var_60], eax
		test	eax, eax
		jle	loc_40346D
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	_BUF_MEM_grow
		test	eax, eax
		jz	loc_40346D
		mov	eax, [esi+4]
		mov	[esp+7Ch+var_20], eax
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edi
		call	_i2d_ASN1_TYPE
		mov	[esp+7Ch+var_7C], edi
		call	_ASN1_TYPE_free
		mov	[esp+7Ch+var_5C], 0

loc_402C0F:				; CODE XREF: _asn1parse_main+C94j
		mov	eax, [esi+4]
		mov	[esp+7Ch+var_54], eax
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_num
		xor	edi, edi
		test	eax, eax
		jz	loc_4031B3
		xor	ebx, ebx
		mov	[esp+7Ch+var_38], ebp
		mov	[esp+7Ch+var_34], esi
		mov	esi, [esp+7Ch+var_58]

loc_402C3A:				; CODE XREF: _asn1parse_main+3DCj
					; _asn1parse_main+800j
		mov	[esp+7Ch+var_7C], esi
		call	_sk_num
		cmp	ebx, eax
		jge	loc_4031AB
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], esi
		call	_sk_value
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_atoi
		test	eax, eax
		jnz	loc_403040
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], esi
		call	_sk_value
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aSIsAnInvalidNu ; "'%s' is an invalid number\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		inc	ebx
		jmp	short loc_402C3A
; ---------------------------------------------------------------------------
		align 10h

loc_402C90:				; CODE XREF: _asn1parse_main+161j
		mov	edi, offset aOut ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_402CC0
		dec	ebp
		jz	loc_402D60
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_54], eax
		jmp	loc_4029E9
; ---------------------------------------------------------------------------
		align 10h

loc_402CC0:				; CODE XREF: _asn1parse_main+3EEj
		mov	edi, offset aI	; "-i"
		mov	ecx, 3
		mov	esi, eax
		repe cmpsb
		jz	short loc_402D30
		mov	edi, offset aNoout ; "-noout"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_402EE0
		mov	edi, offset aOid ; "-oid"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jz	loc_402EF0
		mov	edi, offset aOffset ; "-offset"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_402F50
		dec	ebp
		jz	short loc_402D60
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_atoi
		mov	[esp+7Ch+var_40], eax
		jmp	loc_4029E9
; ---------------------------------------------------------------------------
		align 10h

loc_402D30:				; CODE XREF: _asn1parse_main+41Ej
		mov	esi, ebx
		mov	[esp+7Ch+var_50], 1
		jmp	loc_4029E9
; ---------------------------------------------------------------------------

loc_402D3F:				; CODE XREF: _asn1parse_main+B8Aj
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aUnknownOptionS ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		nop
		lea	esi, [esi+0]

loc_402D60:				; CODE XREF: _asn1parse_main+121j
					; _asn1parse_main+168j	...
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aSOptionsInfile ; "%s [options] <infile\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aWhereOptionsAr ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInformArgInput ; " -inform arg   input format	- one of DE"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInArgInputFile ; " -in arg	   input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOutArgOutputFi ; " -out arg	   output file (output form"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aNooutArgDonTPr ; " -noout arg	   don't produce any output"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOffsetArgOffse ; " -offset arg   offset into file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aLengthArgLengt ; " -length arg   length of section in	fil"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aIIndentEntries ; " -i		   indent entries\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aDumpDumpUnknow ; " -dump	   dump	unknown	data in	hex"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aDlimitArgDumpT ; " -dlimit arg   dump	the first arg bytes"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOidFileFileOfE ; " -oid file	   file	of extra oid defini"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aStrparseOffset ; " -strparse offset\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aASeriesOfThese ; "		   a series of these can be"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aAsn1BlobWrappi ; "		   ASN1	blob wrappings\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aGenstrStrStrin ; " -genstr str   string to generate ASN1 "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aGenconfFileFil ; " -genconf file file	to generate ASN1 st"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_4028E1
; ---------------------------------------------------------------------------
		align 10h

loc_402EE0:				; CODE XREF: _asn1parse_main+42Ej
		mov	esi, ebx
		mov	[esp+7Ch+var_48], 1
		jmp	loc_4029E9
; ---------------------------------------------------------------------------
		align 10h

loc_402EF0:				; CODE XREF: _asn1parse_main+442j
		dec	ebp
		jz	loc_402D60
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_44], eax
		jmp	loc_4029E9
; ---------------------------------------------------------------------------

loc_402F06:				; CODE XREF: _asn1parse_main+Fj
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_4028C5
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], 10h
		mov	[esp+7Ch+var_78], 6Ah
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_4028C5
; ---------------------------------------------------------------------------

loc_402F50:				; CODE XREF: _asn1parse_main+456j
		mov	edi, offset aLength ; "-length"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jz	short loc_402FB0
		mov	edi, offset aDump ; "-dump"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_4030CF
		mov	edi, offset aDlimit ; "-dlimit"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_40312D
		dec	ebp
		jz	loc_402D60
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_atoi
		mov	[esp+7Ch+var_30], eax
		test	eax, eax
		jg	loc_4029E9
		jmp	loc_402D60
; ---------------------------------------------------------------------------
		align 10h

loc_402FB0:				; CODE XREF: _asn1parse_main+6AEj
		dec	ebp
		jz	loc_402D60
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_atoi
		mov	[esp+7Ch+var_3C], eax
		test	eax, eax
		jnz	loc_4029E9
		jmp	loc_402D60
; ---------------------------------------------------------------------------
		align 10h

loc_402FE0:				; CODE XREF: _asn1parse_main+1B1j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	[esp+7Ch+var_7C], 0
		call	_BIO_free
		xor	edi, edi
		xor	esi, esi
		mov	[esp+7Ch+var_5C], 0
		mov	ebx, 1

loc_40300A:				; CODE XREF: _asn1parse_main+849j
		mov	[esp+7Ch+var_7C], ebp
		call	_BIO_free

loc_403012:				; CODE XREF: _asn1parse_main+878j
		mov	eax, [esp+7Ch+var_4C]
		test	eax, eax
		jz	short loc_403022
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_free_all

loc_403022:				; CODE XREF: _asn1parse_main+768j
		mov	eax, [esp+7Ch+var_5C]
		test	eax, eax
		jz	short loc_403032
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_free

loc_403032:				; CODE XREF: _asn1parse_main+778j
		test	ebx, ebx
		jz	loc_402903
		jmp	loc_4028F6
; ---------------------------------------------------------------------------
		align 10h

loc_403040:				; CODE XREF: _asn1parse_main+3B0j
		mov	edx, [esp+7Ch+var_54]
		add	edx, eax
		mov	[esp+7Ch+var_20], edx
		mov	edx, [esp+7Ch+var_60]
		sub	edx, eax
		mov	[esp+7Ch+var_74], edx
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_d2i_ASN1_TYPE
		mov	ebp, eax
		mov	[esp+7Ch+var_7C], edi
		call	_ASN1_TYPE_free
		test	ebp, ebp
		jz	loc_403456
		mov	[esp+7Ch+var_7C], ebp
		call	_ASN1_TYPE_get
		cmp	eax, 6
		jz	loc_4033AA
		cmp	eax, 1
		jz	loc_4033AA
		cmp	eax, 5
		jz	loc_4033AA
		mov	eax, [ebp+4]
		mov	edx, [eax+8]
		mov	[esp+7Ch+var_54], edx
		mov	eax, [eax]
		mov	[esp+7Ch+var_60], eax
		mov	edi, ebp
		inc	ebx
		jmp	loc_402C3A
; ---------------------------------------------------------------------------

loc_4030B5:				; CODE XREF: _asn1parse_main+BCj
		mov	[esp+7Ch+var_78], offset aMemoryAllocati ; "Memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_4028E1
; ---------------------------------------------------------------------------

loc_4030CF:				; CODE XREF: _asn1parse_main+6BEj
		mov	esi, ebx
		mov	[esp+7Ch+var_30], 0FFFFFFFFh
		jmp	loc_4029E9
; ---------------------------------------------------------------------------

loc_4030DE:				; CODE XREF: _asn1parse_main+274j
					; _asn1parse_main+28Cj
		xor	edi, edi
		mov	[esp+7Ch+var_5C], 0
		mov	ebx, 1

loc_4030ED:				; CODE XREF: _asn1parse_main+8F6j
					; _asn1parse_main+982j	...
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_free
		jmp	loc_40300A
; ---------------------------------------------------------------------------

loc_4030FE:				; CODE XREF: _asn1parse_main+1A7j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	[esp+7Ch+var_7C], 0
		call	_BIO_free
		mov	[esp+7Ch+var_5C], 0
		xor	edi, edi
		xor	esi, esi
		mov	ebx, 1
		jmp	loc_403012
; ---------------------------------------------------------------------------

loc_40312D:				; CODE XREF: _asn1parse_main+6D2j
		mov	edi, offset aStrparse ;	"-strparse"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	loc_40325D
		dec	ebp
		jz	loc_402D60
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_push
		jmp	loc_4029E9
; ---------------------------------------------------------------------------

loc_403163:				; CODE XREF: _asn1parse_main+201j
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aProblemsOpenin ; "problems opening %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors

loc_40318D:				; CODE XREF: _asn1parse_main+AA7j
		xor	edi, edi
		xor	esi, esi
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_5C], 0
		mov	ebx, 1
		jmp	loc_4030ED
; ---------------------------------------------------------------------------

loc_4031AB:				; CODE XREF: _asn1parse_main+394j
		mov	ebp, [esp+7Ch+var_38]
		mov	esi, [esp+7Ch+var_34]

loc_4031B3:				; CODE XREF: _asn1parse_main+376j
		mov	eax, [esp+7Ch+var_40]
		cmp	[esp+7Ch+var_60], eax
		jle	loc_403474
		mov	eax, [esp+7Ch+var_60]
		sub	eax, [esp+7Ch+var_40]
		mov	edx, [esp+7Ch+var_3C]
		test	edx, edx
		jz	short loc_4031D7
		cmp	eax, [esp+7Ch+var_3C]
		jge	short loc_4031DB

loc_4031D7:				; CODE XREF: _asn1parse_main+91Fj
		mov	[esp+7Ch+var_3C], eax

loc_4031DB:				; CODE XREF: _asn1parse_main+925j
		mov	edx, [esp+7Ch+var_44]
		test	edx, edx
		jz	loc_40335C
		mov	ebx, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_74], ebx
		mov	eax, [esp+7Ch+var_54]
		add	eax, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edx
		call	_BIO_write
		cmp	ebx, eax
		jz	loc_40335C
		mov	[esp+7Ch+var_78], offset aErrorWritingOu ; "Error writing output\n"

loc_403213:				; CODE XREF: _asn1parse_main+BB8j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf

loc_403220:				; CODE XREF: _asn1parse_main+AEDj
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	ebx, 1
		jmp	loc_4030ED
; ---------------------------------------------------------------------------

loc_403237:				; CODE XREF: _asn1parse_main+215j
		mov	eax, ds:__imp___iob
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 6Ah
		mov	[esp+7Ch+var_7C], ebp
		call	_BIO_ctrl
		jmp	loc_402AF3
; ---------------------------------------------------------------------------

loc_40325D:				; CODE XREF: _asn1parse_main+88Bj
		mov	edi, offset aGenstr ; "-genstr"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_40342C
		dec	ebp
		jz	loc_402D60
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_34], eax
		jmp	loc_4029E9
; ---------------------------------------------------------------------------

loc_403287:				; CODE XREF: _asn1parse_main+249j
		mov	[esp+7Ch+var_44], 0
		jmp	loc_402B1B
; ---------------------------------------------------------------------------

loc_403294:				; CODE XREF: _asn1parse_main+298j
		mov	ebx, [esp+7Ch+var_38]
		test	ebx, ebx
		jz	loc_4034C5
		mov	edi, ds:_bio_err
		mov	[esp+7Ch+var_24], 0
		mov	[esp+7Ch+var_7C], 0
		call	_NCONF_new
		mov	ebx, eax
		lea	eax, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	_NCONF_load
		test	eax, eax
		jz	loc_40349A
		mov	[esp+7Ch+var_74], offset aAsn1 ; "asn1"
		mov	[esp+7Ch+var_78], offset aDefault ; "default"
		mov	[esp+7Ch+var_7C], ebx
		call	_NCONF_get_string
		mov	[esp+7Ch+var_34], eax
		test	eax, eax
		jnz	loc_402B96
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aCanTFindAsn1In ; "Can't find 'asn1' in '%s'\n"
		mov	[esp+7Ch+var_7C], edi
		call	_BIO_printf
		xor	edi, edi

loc_40331A:				; CODE XREF: _asn1parse_main+BBFj
					; _asn1parse_main+C10j	...
		mov	[esp+7Ch+var_7C], ebx
		call	_NCONF_free
		mov	[esp+7Ch+var_7C], edi
		call	_ASN1_TYPE_free

loc_40332A:				; CODE XREF: _asn1parse_main+302j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	edi, edi
		mov	[esp+7Ch+var_5C], 0
		mov	ebx, 1
		jmp	loc_4030ED
; ---------------------------------------------------------------------------

loc_40334B:				; CODE XREF: _asn1parse_main+23Dj
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_perror
		jmp	loc_40318D
; ---------------------------------------------------------------------------

loc_40335C:				; CODE XREF: _asn1parse_main+931j
					; _asn1parse_main+955j
		mov	eax, [esp+7Ch+var_48]
		test	eax, eax
		jz	short loc_40336B
		xor	ebx, ebx
		jmp	loc_4030ED
; ---------------------------------------------------------------------------

loc_40336B:				; CODE XREF: _asn1parse_main+AB2j
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_6C], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_70], eax
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+var_54]
		add	eax, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_ASN1_parse_dump
		test	eax, eax
		jz	loc_403220
		xor	ebx, ebx
		jmp	loc_4030ED
; ---------------------------------------------------------------------------

loc_4033AA:				; CODE XREF: _asn1parse_main+7D5j
					; _asn1parse_main+7DEj	...
		mov	edi, ebp
		mov	ebp, [esp+7Ch+var_38]
		mov	esi, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_7C], eax
		call	_ASN1_tag2str
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aCanTParseSType ; "Can't parse %s type\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	ebx, 1
		jmp	loc_4030ED
; ---------------------------------------------------------------------------

loc_4033EC:				; CODE XREF: _asn1parse_main+265j
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aProblemsOpenin ; "problems opening %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	edi, edi
		xor	esi, esi
		mov	[esp+7Ch+var_5C], 0
		mov	ebx, 1
		jmp	loc_4030ED
; ---------------------------------------------------------------------------

loc_40342C:				; CODE XREF: _asn1parse_main+9BBj
		mov	edi, offset aGenconf ; "-genconf"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	loc_402D3F
		dec	ebp
		jz	loc_402D60
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_38], eax
		jmp	loc_4029E9
; ---------------------------------------------------------------------------

loc_403456:				; CODE XREF: _asn1parse_main+7C4j
		mov	edi, ebp
		mov	ebp, [esp+7Ch+var_38]
		mov	esi, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_78], offset aErrorParsingSt ; "Error parsing structure\n"
		jmp	loc_403213
; ---------------------------------------------------------------------------

loc_40346D:				; CODE XREF: _asn1parse_main+31Ej
					; _asn1parse_main+332j
		xor	ebx, ebx
		jmp	loc_40331A
; ---------------------------------------------------------------------------

loc_403474:				; CODE XREF: _asn1parse_main+90Bj
		mov	[esp+7Ch+var_78], offset aErrorOffsetToo ; "Error: offset too large\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_4030ED
; ---------------------------------------------------------------------------

loc_403493:				; CODE XREF: _asn1parse_main+2B2j
		xor	ebx, ebx
		jmp	loc_402B96
; ---------------------------------------------------------------------------

loc_40349A:				; CODE XREF: _asn1parse_main+2E0j
					; _asn1parse_main+A26j
		mov	eax, [esp+7Ch+var_24]
		test	eax, eax
		jle	short loc_403521
		mov	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aErrorOnLineLdO ; "Error on line %ld of config	file '%s'\n"
		mov	[esp+7Ch+var_7C], edi
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_40331A
; ---------------------------------------------------------------------------

loc_4034C5:				; CODE XREF: _asn1parse_main+9EAj
		mov	[esp+7Ch+var_5C], 0
		cmp	[esp+7Ch+var_60], 3
		jz	short loc_403549

loc_4034D4:				; CODE XREF: _asn1parse_main+CC4j
		xor	ebx, ebx
		jmp	short loc_4034FF
; ---------------------------------------------------------------------------
		align 10h

loc_4034E0:				; CODE XREF: _asn1parse_main+C63j
		mov	[esp+7Ch+var_74], 200h
		mov	eax, [esi+4]
		add	eax, ebx
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	_BIO_read
		test	eax, eax
		jle	short loc_403540
		add	ebx, eax

loc_4034FF:				; CODE XREF: _asn1parse_main+C26j
		lea	eax, [ebx+200h]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	_BUF_MEM_grow
		test	eax, eax
		jnz	short loc_4034E0

loc_403515:				; CODE XREF: _asn1parse_main+CAEj
		xor	edi, edi
		mov	ebx, 1
		jmp	loc_4030ED
; ---------------------------------------------------------------------------

loc_403521:				; CODE XREF: _asn1parse_main+BF0j
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aErrorLoadingCo ; "Error loading config file '%s'\n"
		mov	[esp+7Ch+var_7C], edi
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_40331A
; ---------------------------------------------------------------------------

loc_403540:				; CODE XREF: _asn1parse_main+C4Bj
		mov	[esp+7Ch+var_60], ebx
		jmp	loc_402C0F
; ---------------------------------------------------------------------------

loc_403549:				; CODE XREF: _asn1parse_main+C22j
		call	_BIO_f_base64
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	edi, eax
		mov	[esp+7Ch+var_5C], eax
		test	eax, eax
		jz	short loc_403515
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_push
		mov	eax, ebp
		mov	ebp, edi
		mov	[esp+7Ch+var_5C], eax
		jmp	loc_4034D4
_asn1parse_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_genpkey_cb	proc near		; DATA XREF: _req_main+2D38o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], 2Ah
		mov	[esp+2Ch+var_2C], esi
		call	_EVP_PKEY_CTX_get_app_data
		mov	ebx, eax
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], esi
		call	_EVP_PKEY_CTX_get_keygen_info
		test	eax, eax
		jnz	short loc_403600
		mov	[esp+2Ch+var_10], 2Eh

loc_4035B1:				; CODE XREF: _genpkey_cb+8Aj
					; _genpkey_cb+9Aj ...
		mov	[esp+2Ch+var_24], 1
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_write
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0Bh
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_ctrl
		mov	eax, 1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_403600:				; CODE XREF: _genpkey_cb+2Aj
		cmp	eax, 1
		jnz	short loc_403610
		mov	[esp+2Ch+var_10], 2Bh
		jmp	short loc_4035B1
; ---------------------------------------------------------------------------
		align 10h

loc_403610:				; CODE XREF: _genpkey_cb+83j
		cmp	eax, 2
		jnz	short loc_40361C
		mov	[esp+2Ch+var_10], 2Ah
		jmp	short loc_4035B1
; ---------------------------------------------------------------------------

loc_40361C:				; CODE XREF: _genpkey_cb+93j
		cmp	eax, 3
		jnz	short loc_4035B1
		mov	[esp+2Ch+var_10], 0Ah
		jmp	short loc_4035B1
_genpkey_cb	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _do_X509_sign
_do_X509_sign	proc near		; CODE XREF: _req_main+285Ap
					; _x509_main+1EEBp ...

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_10]
		lea	edi, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_MD_CTX_init
		mov	[esp+5Ch+var_38], 0
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_MD_CTX_init
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 0
		mov	eax, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_54], eax
		lea	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_DigestSignInit
		test	eax, eax
		jz	loc_403705
		xor	ebx, ebx
		jmp	short loc_4036B3
; ---------------------------------------------------------------------------
		align 10h

loc_403690:				; CODE XREF: _do_X509_sign+8Dj
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	_sk_value
		mov	ebp, eax
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	_pkey_ctrl_string
		test	eax, eax
		jle	short loc_4036E0
		inc	ebx

loc_4036B3:				; CODE XREF: _do_X509_sign+59j
		mov	[esp+5Ch+var_5C], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_403690
		mov	[esp+5Ch+var_58], edi
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_5C], eax
		call	_X509_sign_ctx
		xor	ebx, ebx
		test	eax, eax
		setnle	bl
		jmp	short loc_403707
; ---------------------------------------------------------------------------
		align 10h

loc_4036E0:				; CODE XREF: _do_X509_sign+80j
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], offset aParameterError ; "parameter error \"%s\"\n"
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_ERR_print_errors

loc_403705:				; CODE XREF: _do_X509_sign+51j
		xor	ebx, ebx

loc_403707:				; CODE XREF: _do_X509_sign+A6j
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_MD_CTX_cleanup
		mov	eax, ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_do_X509_sign	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _do_X509_REQ_sign
_do_X509_REQ_sign proc near		; CODE XREF: _req_main+851p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_10]
		lea	edi, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_MD_CTX_init
		mov	[esp+5Ch+var_38], 0
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_MD_CTX_init
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 0
		mov	eax, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_54], eax
		lea	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_DigestSignInit
		test	eax, eax
		jz	loc_4037F5
		xor	ebx, ebx
		jmp	short loc_4037A3
; ---------------------------------------------------------------------------
		align 10h

loc_403780:				; CODE XREF: _do_X509_REQ_sign+8Dj
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	_sk_value
		mov	ebp, eax
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	_pkey_ctrl_string
		test	eax, eax
		jle	short loc_4037D0
		inc	ebx

loc_4037A3:				; CODE XREF: _do_X509_REQ_sign+59j
		mov	[esp+5Ch+var_5C], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_403780
		mov	[esp+5Ch+var_58], edi
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_5C], eax
		call	_X509_REQ_sign_ctx
		xor	ebx, ebx
		test	eax, eax
		setnle	bl
		jmp	short loc_4037F7
; ---------------------------------------------------------------------------
		align 10h

loc_4037D0:				; CODE XREF: _do_X509_REQ_sign+80j
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], offset aParameterError ; "parameter error \"%s\"\n"
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_ERR_print_errors

loc_4037F5:				; CODE XREF: _do_X509_REQ_sign+51j
		xor	ebx, ebx

loc_4037F7:				; CODE XREF: _do_X509_REQ_sign+A6j
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_MD_CTX_cleanup
		mov	eax, ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_do_X509_REQ_sign endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _req_main
_req_main	proc near		; DATA XREF: .data:00455040o

var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 15Ch
		mov	ebx, [esp+16Ch+arg_4]
		mov	[esp+16Ch+var_A8], 0
		mov	[esp+16Ch+var_A4], 0
		mov	[esp+16Ch+var_A0], 0
		mov	[esp+16Ch+var_9C], 0
		mov	[esp+16Ch+var_98], 0FFFFFFFFh
		mov	[esp+16Ch+var_94], 0FFFFFFFFh
		mov	[esp+16Ch+var_90], 0
		mov	[esp+16Ch+var_8C], 0
		mov	ds:_req_conf, 0
		call	_EVP_des_ede3_cbc
		mov	[esp+16Ch+var_CC], eax
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_4048F2

loc_40389C:				; CODE XREF: _req_main+10F6j
					; _req_main+1121j
		mov	eax, [ebx]
		mov	[esp+16Ch+var_138], eax
		mov	eax, [esp+16Ch+arg_0]
		lea	ebp, [eax-1]
		add	ebx, 4
		mov	[esp+16Ch+var_10C], 1001h
		mov	[esp+16Ch+var_E4], 0
		test	ebp, ebp
		jle	loc_4049EA
		mov	[esp+16Ch+var_C4], 0
		mov	[esp+16Ch+var_C8], 0
		mov	[esp+16Ch+var_F0], 0
		mov	[esp+16Ch+var_128], 0
		mov	[esp+16Ch+var_12C], 0
		mov	[esp+16Ch+var_C0], 0
		mov	[esp+16Ch+var_104], 0
		mov	[esp+16Ch+var_120], 0
		mov	[esp+16Ch+var_100], 0
		mov	[esp+16Ch+var_108], 0
		mov	[esp+16Ch+var_140], 0
		mov	[esp+16Ch+var_F8], 0
		mov	[esp+16Ch+var_134], 0
		mov	[esp+16Ch+var_11C], 0
		mov	[esp+16Ch+var_F4], 0
		mov	[esp+16Ch+var_E8], 0
		mov	[esp+16Ch+var_118], 0
		mov	[esp+16Ch+var_EC], 0
		mov	[esp+16Ch+var_B0], 0
		mov	[esp+16Ch+var_D0], 0
		mov	[esp+16Ch+var_B4], 0
		mov	[esp+16Ch+var_B8], 3
		mov	[esp+16Ch+var_D4], 0
		mov	[esp+16Ch+var_D8], 0
		mov	[esp+16Ch+var_DC], 0
		mov	[esp+16Ch+var_144], 3
		mov	[esp+16Ch+var_148], 3
		mov	[esp+16Ch+var_FC], 0
		mov	[esp+16Ch+var_114], 0
		mov	[esp+16Ch+var_124], 0
		mov	[esp+16Ch+var_130], 0
		mov	[esp+16Ch+var_BC], 0
		mov	[esp+16Ch+var_E0], 1Eh
		mov	[esp+16Ch+var_110], 0
		mov	[esp+16Ch+var_13C], 0
		jmp	short loc_403A31
; ---------------------------------------------------------------------------
		align 10h

loc_403A10:				; CODE XREF: _req_main+231j
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_16C], eax	; char *
		call	_str2fmt
		mov	[esp+16Ch+var_148], eax

loc_403A29:				; CODE XREF: _req_main+AF1j
					; _req_main+B2Bj ...
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jle	short loc_403A78

loc_403A31:				; CODE XREF: _req_main+1FCj
					; _req_main+266j
		mov	eax, [ebx]
		mov	ecx, 8
		mov	esi, eax
		mov	edi, offset aInform_0 ;	"-inform"
		repe cmpsb
		jz	short loc_403A10
		mov	edi, offset aOutform ; "-outform"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	loc_4042E0
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_16C], eax	; char *
		call	_str2fmt
		mov	[esp+16Ch+var_144], eax
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jg	short loc_403A31

loc_403A78:				; CODE XREF: _req_main+21Fj
					; _req_main+131Cj
		call	_ERR_load_crypto_strings
		lea	eax, [esp+16Ch+var_8C]
		mov	[esp+16Ch+var_15C], eax	; int
		lea	eax, [esp+16Ch+var_90]
		mov	[esp+16Ch+var_160], eax	; int
		mov	eax, [esp+16Ch+var_128]
		mov	[esp+16Ch+var_164], eax	; char *
		mov	eax, [esp+16Ch+var_12C]
		mov	[esp+16Ch+var_168], eax	; char *
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax	; int
		call	_app_passwd
		test	eax, eax
		jz	loc_404957
		mov	edi, [esp+16Ch+var_134]
		test	edi, edi
		jz	loc_404B31
		mov	[esp+16Ch+var_80], 0FFFFFFFFh
		mov	esi, [esp+16Ch+var_FC]
		test	esi, esi
		jnz	loc_4049C8

loc_403ADB:				; CODE XREF: _req_main+11D5j
		mov	[esp+16Ch+var_16C], 0
		call	_NCONF_new
		mov	ds:_req_conf, eax
		lea	edx, [esp+16Ch+var_80]
		mov	[esp+16Ch+var_164], edx
		mov	edx, [esp+16Ch+var_134]
		mov	[esp+16Ch+var_168], edx
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_load
		test	eax, eax
		jz	loc_40499B

loc_403B0F:				; CODE XREF: _req_main+135Dj
					; _req_main+1603j
		mov	eax, ds:_req_conf
		test	eax, eax
		jz	loc_404B98

loc_403B1C:				; CODE XREF: _req_main+1339j
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_load_config
		test	eax, eax
		jz	loc_404735
		mov	[esp+16Ch+var_164], offset aOid_file ; "oid_file"
		mov	[esp+16Ch+var_168], 0
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_404BCF
		mov	[esp+16Ch+var_168], offset aR_6	; "r"
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	loc_404B9F
		mov	[esp+16Ch+var_16C], ebx
		call	_OBJ_create_objects
		mov	[esp+16Ch+var_16C], ebx
		call	_BIO_free
		mov	eax, ds:_req_conf

loc_403B89:				; CODE XREF: _req_main+138Aj
					; _req_main+1394j ...
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_add_oid_section
		test	eax, eax
		jz	loc_404735
		mov	edx, [esp+16Ch+var_C4]
		test	edx, edx
		jz	loc_406177

loc_403BB1:				; CODE XREF: _req_main+2992j
					; _req_main+299Fj ...
		mov	eax, [esp+16Ch+var_108]
		test	eax, eax
		jz	loc_406144

loc_403BBD:				; CODE XREF: _req_main+2957j
		mov	[esp+16Ch+var_158], 1
		mov	[esp+16Ch+var_15C], 0
		mov	[esp+16Ch+var_160], 0
		mov	[esp+16Ch+var_164], 0
		mov	[esp+16Ch+var_168], 0
		lea	ebx, [esp+16Ch+var_80]
		mov	[esp+16Ch+var_16C], ebx
		call	_X509V3_set_ctx
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebx
		call	_X509V3_set_nconf
		mov	[esp+16Ch+var_160], 0
		mov	eax, [esp+16Ch+var_108]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], ebx
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_X509V3_EXT_add_nconf
		test	eax, eax
		jz	loc_404BDE

loc_403C2E:				; CODE XREF: _req_main+2962j
		mov	eax, [esp+16Ch+var_90]
		test	eax, eax
		jz	loc_4060CE

loc_403C3D:				; CODE XREF: _req_main+28E4j
					; _req_main+28EFj
		mov	eax, [esp+16Ch+var_8C]
		test	eax, eax
		jz	loc_40610E

loc_403C4C:				; CODE XREF: _req_main+2924j
					; _req_main+292Fj
		mov	[esp+16Ch+var_164], offset aString_mask	; "string_mask"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	ebx, eax
		test	eax, eax
		jz	loc_406104
		mov	[esp+16Ch+var_16C], eax
		call	_ASN1_STRING_set_default_mask_asc
		test	eax, eax
		jz	loc_404D30

loc_403C83:				; CODE XREF: _req_main+28F9j
		cmp	[esp+16Ch+var_10C], 1000h
		jz	short loc_403CCA
		mov	[esp+16Ch+var_164], offset aUtf8 ; "utf8"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_4060C4
		mov	edi, offset aYes ; "yes"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_403CCA
		mov	[esp+16Ch+var_10C], 1000h

loc_403CCA:				; CODE XREF: _req_main+47Bj
					; _req_main+4B0j ...
		mov	eax, [esp+16Ch+var_100]
		test	eax, eax
		jz	loc_404E62

loc_403CD6:				; CODE XREF: _req_main+1675j
		mov	[esp+16Ch+var_158], 1
		mov	[esp+16Ch+var_15C], 0
		mov	[esp+16Ch+var_160], 0
		mov	[esp+16Ch+var_164], 0
		mov	[esp+16Ch+var_168], 0
		lea	ebx, [esp+16Ch+var_80]
		mov	[esp+16Ch+var_16C], ebx
		call	_X509V3_set_ctx
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebx
		call	_X509V3_set_nconf
		mov	[esp+16Ch+var_160], 0
		mov	eax, [esp+16Ch+var_100]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], ebx
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_X509V3_EXT_add_nconf
		test	eax, eax
		jz	loc_404D10

loc_403D47:				; CODE XREF: _req_main+1680j
		call	_BIO_s_file
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_new
		mov	edi, eax
		mov	[esp+16Ch+var_134], eax
		call	_BIO_s_file
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_new
		mov	[esp+16Ch+var_138], eax
		test	edi, edi
		jz	loc_404D25
		test	eax, eax
		jz	loc_404D25
		mov	[esp+16Ch+var_164], 0
		mov	eax, [esp+16Ch+var_140]
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_setup_engine
		mov	edx, [esp+16Ch+var_11C]
		test	edx, edx
		jz	loc_403E2E
		mov	[esp+16Ch+var_154], offset aPrivateKey ; "Private Key"
		mov	[esp+16Ch+var_158], eax
		mov	eax, [esp+16Ch+var_90]
		mov	[esp+16Ch+var_15C], eax
		mov	[esp+16Ch+var_160], 0
		mov	eax, [esp+16Ch+var_B8]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], edx
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_load_key
		mov	[esp+16Ch+var_9C], eax
		test	eax, eax
		jz	loc_404D25
		mov	[esp+16Ch+var_164], offset aRandfile ; "RANDFILE"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	ebx, eax
		test	eax, eax
		jz	loc_404D41

loc_403E15:				; CODE XREF: _req_main+1536j
		mov	[esp+16Ch+var_164], 0
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebx
		call	_app_RAND_load_file

loc_403E2E:				; CODE XREF: _req_main+58Ej
		mov	eax, [esp+16Ch+var_114]
		test	eax, eax
		jz	loc_404C60
		mov	eax, [esp+16Ch+var_9C]
		test	eax, eax
		jz	loc_40632C

loc_403E49:				; CODE XREF: _req_main+2EF5j
		call	_X509_REQ_new
		mov	ebp, eax
		test	eax, eax
		jz	loc_405D43
		xor	eax, eax
		mov	edx, [esp+16Ch+var_110]
		test	edx, edx
		setz	al
		mov	[esp+16Ch+var_C4], eax
		mov	eax, [esp+16Ch+var_9C]
		mov	[esp+16Ch+var_C0], eax
		mov	[esp+16Ch+var_164], offset aPrompt ; "prompt"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_406320
		mov	edi, offset aNo	; "no"
		mov	ecx, 3
		mov	esi, eax
		repe cmpsb
		setz	bl

loc_403EAE:				; CODE XREF: _req_main+2B17j
		mov	[esp+16Ch+var_164], offset aDistinguished_ ; "distinguished_name"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	[esp+16Ch+var_140], eax
		test	eax, eax
		jz	loc_4062FC
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_section
		mov	[esp+16Ch+var_FC], eax
		test	eax, eax
		jz	loc_4062F6
		mov	[esp+16Ch+var_164], offset aAttributes ; "attributes"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	[esp+16Ch+var_11C], eax
		test	eax, eax
		jz	loc_4062E4
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_section
		mov	[esp+16Ch+var_114], eax
		test	eax, eax
		jz	loc_4062C2

loc_403F3A:				; CODE XREF: _req_main+2AE1j
		mov	[esp+16Ch+var_168], 0
		mov	[esp+16Ch+var_16C], ebp
		call	_X509_REQ_set_version
		test	eax, eax
		jz	short loc_403F7F
		test	bl, bl
		jnz	loc_40532B
		mov	edx, [esp+16Ch+var_F0] ; char *
		test	edx, edx
		jz	loc_404EE4
		mov	eax, [esp+16Ch+var_C8]
		mov	[esp+16Ch+var_16C], eax	; int
		mov	ecx, [esp+16Ch+var_10C]	; int
		mov	eax, ebp
		call	_build_subject
		test	eax, eax
		jnz	loc_4059B4

loc_403F7F:				; CODE XREF: _req_main+73Cj
					; _req_main+1BCCj ...
		xor	ebx, ebx

loc_403F81:				; CODE XREF: _req_main+21BEj
					; _req_main+2B0Bj
		mov	eax, [esp+16Ch+var_D0]
		test	eax, eax
		jz	short loc_403FB6
		mov	eax, [ebp+0]
		mov	eax, [eax+18h]
		mov	[esp+16Ch+var_16C], eax
		call	_sk_num
		test	eax, eax
		jnz	short loc_403FB6
		mov	eax, [ebp+0]
		mov	eax, [eax+18h]
		mov	[esp+16Ch+var_16C], eax
		call	_sk_free
		mov	eax, [ebp+0]
		mov	dword ptr [eax+18h], 0

loc_403FB6:				; CODE XREF: _req_main+77Aj
					; _req_main+78Cj
		test	ebx, ebx
		jz	loc_405D1A
		mov	eax, [esp+16Ch+var_110]
		test	eax, eax
		jnz	loc_404C1D
		mov	[esp+16Ch+var_158], 0
		mov	[esp+16Ch+var_15C], 0
		mov	[esp+16Ch+var_160], ebp
		mov	[esp+16Ch+var_164], 0
		mov	[esp+16Ch+var_168], 0
		lea	ebx, [esp+16Ch+var_80]
		mov	[esp+16Ch+var_16C], ebx
		call	_X509V3_set_ctx
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebx
		call	_X509V3_set_nconf
		mov	eax, [esp+16Ch+var_100]
		test	eax, eax
		jz	short loc_404037
		mov	[esp+16Ch+var_160], ebp
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], ebx
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_X509V3_EXT_REQ_add_nconf
		test	eax, eax
		jz	loc_405D4C

loc_404037:				; CODE XREF: _req_main+804j
		mov	eax, [esp+16Ch+var_124]
		mov	[esp+16Ch+var_15C], eax
		mov	eax, [esp+16Ch+var_E4]
		mov	[esp+16Ch+var_160], eax
		mov	eax, [esp+16Ch+var_9C]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], ebp
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_do_X509_REQ_sign
		test	eax, eax
		jz	loc_405D36

loc_40406E:				; CODE XREF: _req_main+25D8j
		xor	edi, edi

loc_404070:				; CODE XREF: _req_main+286Dj
		mov	edx, [esp+16Ch+var_DC]
		test	edx, edx
		jz	short loc_4040CE
		mov	eax, [esp+16Ch+var_110]
		test	eax, eax
		jnz	short loc_4040CE

loc_404083:				; CODE XREF: _req_main+2686j
		mov	eax, [esp+16Ch+var_9C]
		test	eax, eax
		jz	loc_404E18
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebp
		call	_X509_REQ_verify

loc_40409E:				; CODE XREF: _req_main+164Dj
		test	eax, eax
		js	loc_404C54
		jnz	loc_404ECA
		mov	[esp+16Ch+var_168], offset aVerifyFailure ; "verify failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_ERR_print_errors

loc_4040CE:				; CODE XREF: _req_main+869j
					; _req_main+871j ...
		mov	eax, [esp+16Ch+var_D8]
		test	eax, eax
		jz	short loc_404103
		mov	eax, [esp+16Ch+var_D4]
		test	eax, eax
		jnz	short loc_404103
		mov	eax, [esp+16Ch+var_104]
		test	eax, eax
		jnz	short loc_404103
		mov	eax, [esp+16Ch+var_EC]
		test	eax, eax
		jnz	short loc_404103
		mov	eax, [esp+16Ch+var_118]
		test	eax, eax
		jz	loc_4042D5

loc_404103:				; CODE XREF: _req_main+8C7j
					; _req_main+8D2j ...
		mov	esi, [esp+16Ch+var_F4]
		test	esi, esi
		jz	loc_405C88
		mov	eax, [esp+16Ch+var_F8]
		test	eax, eax
		jz	short loc_40412F
		mov	[esp+16Ch+var_168], eax	; char *
		mov	eax, [esp+16Ch+var_F4]
		mov	[esp+16Ch+var_16C], eax	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_405CB5

loc_40412F:				; CODE XREF: _req_main+905j
		mov	eax, [esp+16Ch+var_F4]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], 5
		mov	[esp+16Ch+var_168], 6Ch
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_ctrl

loc_404153:				; CODE XREF: _req_main+24C9j
		test	eax, eax
		jz	loc_405C4E

loc_40415B:				; CODE XREF: _req_main+24A0j
		mov	ebx, [esp+16Ch+var_118]
		test	ebx, ebx
		jnz	loc_405C23

loc_404167:				; CODE XREF: _req_main+2439j
		mov	ecx, [esp+16Ch+var_D4]
		test	ecx, ecx
		jz	loc_405BE3
		mov	eax, [esp+16Ch+var_A4]
		mov	edx, [esp+16Ch+var_110]
		test	edx, edx
		mov	[esp+16Ch+var_160], eax
		mov	eax, [esp+16Ch+var_A8]
		mov	[esp+16Ch+var_164], eax
		jz	loc_405B84
		mov	[esp+16Ch+var_168], edi
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_X509_print_ex
		mov	eax, [esp+16Ch+var_EC]
		test	eax, eax
		jz	loc_404DC6

loc_4041B7:				; CODE XREF: _req_main+23E4j
		mov	ebx, [esp+16Ch+var_A8]
		mov	[esp+16Ch+var_16C], edi
		call	_X509_get_subject_name
		mov	[esp+16Ch+var_160], ebx
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aSubject ; "subject="
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_print_name
		mov	eax, [esp+16Ch+var_104]
		test	eax, eax
		jz	loc_404281

loc_4041EE:				; CODE XREF: _req_main+15BCj
					; _req_main+240Bj
		mov	[esp+16Ch+var_16C], edi
		call	_X509_get_pubkey
		mov	ebx, eax

loc_4041F8:				; CODE XREF: _req_main+23CEj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+16Ch+var_160], eax	; FILE *
		test	ebx, ebx
		jz	loc_405CF9
		mov	[esp+16Ch+var_164], 8 ;	size_t
		mov	[esp+16Ch+var_168], 1 ;	size_t
		mov	[esp+16Ch+var_16C], offset aModulus ; "Modulus="
		call	_fwrite
		mov	[esp+16Ch+var_16C], ebx
		call	_EVP_PKEY_base_id
		cmp	eax, 6
		jz	loc_405CDE
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+16Ch+var_160], eax	; FILE *
		mov	[esp+16Ch+var_164], 14h	; size_t
		mov	[esp+16Ch+var_168], 1 ;	size_t
		mov	[esp+16Ch+var_16C], offset aWrongAlgorithm ; "Wrong Algorithm type"
		call	_fwrite

loc_404261:				; CODE XREF: _req_main+24E4j
		mov	[esp+16Ch+var_16C], ebx
		call	_EVP_PKEY_free
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+16Ch+var_168], eax	; FILE *
		mov	[esp+16Ch+var_16C], 0Ah	; int
		call	_fputc

loc_404281:				; CODE XREF: _req_main+9D8j
					; _req_main+15C2j ...
		mov	eax, [esp+16Ch+var_D8]
		test	eax, eax
		jnz	short loc_4042D5
		mov	eax, [esp+16Ch+var_110]
		test	eax, eax
		jnz	loc_404D7C
		cmp	[esp+16Ch+var_144], 1
		jz	loc_404D67
		cmp	[esp+16Ch+var_144], 3
		jnz	loc_404D4B
		mov	eax, [esp+16Ch+var_B0]
		test	eax, eax
		mov	[esp+16Ch+var_168], ebp
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		jz	loc_405B7A
		call	_PEM_write_bio_X509_REQ_NEW

loc_4042CD:				; CODE XREF: _req_main+1567j
					; _req_main+236Fj
		test	eax, eax
		jz	loc_405B5E

loc_4042D5:				; CODE XREF: _req_main+8EDj
					; _req_main+A7Aj ...
		xor	ebx, ebx
		xor	esi, esi
		jmp	loc_40475D
; ---------------------------------------------------------------------------
		align 10h

loc_4042E0:				; CODE XREF: _req_main+241j
		mov	edi, offset aEngine_0 ;	"-engine"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_404310
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_140], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------
		align 10h

loc_404310:				; CODE XREF: _req_main+ADEj
		mov	edi, offset aKeygen_engine ; "-keygen_engine"
		mov	ecx, 0Fh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_404370
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_16C], eax
		call	_ENGINE_by_id
		mov	[esp+16Ch+var_13C], eax
		test	eax, eax
		jnz	loc_403A29
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aCanTFindKeygen ; "Can't find keygen engine %s\n"

loc_404350:				; CODE XREF: _req_main+13DEj
					; _req_main+1510j ...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_404735
; ---------------------------------------------------------------------------
		align 10h

loc_404370:				; CODE XREF: _req_main+B0Ej
		mov	edi, offset aKey ; "-key"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_404850
		dec	ebp
		jz	short loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_11C], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_404396:				; CODE XREF: _req_main+326Ej
		mov	eax, [ebx]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aUnknownOptio_0 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	short loc_4043C0
; ---------------------------------------------------------------------------
		align 10h

loc_4043C0:				; CODE XREF: _req_main+201j
					; _req_main+248j ...
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aSOptionsInfi_0 ; "%s [options] <infile >outfile\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aWhereOptions_0 ; "where options  are\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aInformArgInp_0 ; " -inform arg    input format - DER or P"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aOutformArgOutp ; " -outform	arg   output format - DER or "...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aInArgInputFi_0 ; " -in arg	      input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aOutArgOutput_0 ; " -out arg	      output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aTextTextFormOf ; " -text	      text form	of request\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aPubkeyOutputPu ; " -pubkey	      output public key\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aNooutDoNotOutp ; " -noout	      do not output REQ\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aVerifyVerifySi ; " -verify	      verify signature on REQ"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aModulusRsaModu ; " -modulus	      RSA modulus\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aNodesDonTEncry ; " -nodes	      don't encrypt the outpu"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aEngineEUseEn_0 ; " -engine e      use engine e, possibly "...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aSubjectOutputT ; " -subject	      output the request's su"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aPassinPrivateK ; " -passin	      private key password so"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aKeyFileUseTheP ; " -key file      use the private key con"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aKeyformArgKeyF ; " -keyform	arg   key file format\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aKeyoutArgFileT ; " -keyout arg    file to send the key to"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_160], 3Bh
		mov	[esp+16Ch+var_164], 3Bh
		mov	[esp+16Ch+var_168], offset aRandFileCfileC ; " -rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aLoadTheFileOrT ; "		      load the file (or	the f"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aTheRandomNumbe ; "		      the random number	gener"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aNewkeyRsaBitsG ; " -newkey rsa:bits	generate a new RSA ke"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aNewkeyDsaFileG ; " -newkey dsa:file	generate a new DSA ke"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aNewkeyEcFileGe ; " -newkey ec:file generate	a new EC key,"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aDigestDigestTo ; " -[digest]      Digest to	sign with (md"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aConfigFileRequ ; " -config file   request template file.\"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aSubjArgSetOrMo ; " -subj arg      set or modify request s"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aMultivalueRdnE ; " -multivalue-rdn enable support for mul"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aNewNewRequest_ ; " -new	      new request.\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aBatchDoNotAskA ; " -batch	      do not ask anything dur"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aX509OutputAX50 ; " -x509	      output a x509 structure"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aDaysNumberOfDa ; " -days	      number of	days a certif"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aSet_serialSeri ; " -set_serial    serial number to use fo"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aNewhdrOutputNe ; " -newhdr	      output \"NEW\" in	the h"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aAsn1KludgeOutp ; " -asn1-kludge   Output the 'request' in"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aHaveBeenReport ; "		      have been	reported as r"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aExtensions__Sp ; " -extensions .. specify certificate ext"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aReqexts__Speci ; " -reqexts	..    specify request extensi"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aUtf8InputChara ; " -utf8	      input characters are UT"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aNameoptArgVari ; " -nameopt	arg    - various certificate "...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aReqoptArgVario ; " -reqopt arg    -	various	request	text "...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf

loc_404735:				; CODE XREF: _req_main+31Fj
					; _req_main+38Cj ...
		mov	[esp+16Ch+var_138], 0
		mov	[esp+16Ch+var_134], 0
		xor	ebx, ebx
		xor	ebp, ebp
		xor	edi, edi

loc_40474B:				; CODE XREF: _req_main+1446j
					; _req_main+14BFj ...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_ERR_print_errors
		mov	esi, 1

loc_40475D:				; CODE XREF: _req_main+AC9j
		mov	eax, ds:_req_conf
		test	eax, eax
		jz	short loc_404776
		cmp	eax, ds:_config
		jz	short loc_404776
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_free

loc_404776:				; CODE XREF: _req_main+F54j
					; _req_main+F5Cj
		mov	eax, [esp+16Ch+var_134]
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_free
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_free_all
		mov	eax, [esp+16Ch+var_9C]
		mov	[esp+16Ch+var_16C], eax
		call	_EVP_PKEY_free
		test	ebx, ebx
		jz	short loc_4047A9
		mov	[esp+16Ch+var_16C], ebx
		call	_EVP_PKEY_CTX_free

loc_4047A9:				; CODE XREF: _req_main+F8Fj
		mov	eax, [esp+16Ch+var_130]
		test	eax, eax
		jz	short loc_4047B9
		mov	[esp+16Ch+var_16C], eax
		call	_sk_free

loc_4047B9:				; CODE XREF: _req_main+F9Fj
		mov	eax, [esp+16Ch+var_124]
		test	eax, eax
		jz	short loc_4047C9
		mov	[esp+16Ch+var_16C], eax
		call	_sk_free

loc_4047C9:				; CODE XREF: _req_main+FAFj
		mov	eax, [esp+16Ch+var_13C]
		test	eax, eax
		jz	short loc_4047D9
		mov	[esp+16Ch+var_16C], eax
		call	_ENGINE_free

loc_4047D9:				; CODE XREF: _req_main+FBFj
		mov	eax, [esp+16Ch+var_A0]
		test	eax, eax
		jz	short loc_4047EC
		mov	[esp+16Ch+var_16C], eax
		call	_CRYPTO_free

loc_4047EC:				; CODE XREF: _req_main+FD2j
		mov	[esp+16Ch+var_16C], ebp
		call	_X509_REQ_free
		mov	[esp+16Ch+var_16C], edi
		call	_X509_free
		mov	eax, [esp+16Ch+var_120]
		mov	[esp+16Ch+var_16C], eax
		call	_ASN1_INTEGER_free
		mov	eax, [esp+16Ch+var_12C]
		test	eax, eax
		jz	short loc_404823
		mov	eax, [esp+16Ch+var_90]
		test	eax, eax
		jz	short loc_404823
		mov	[esp+16Ch+var_16C], eax
		call	_CRYPTO_free

loc_404823:				; CODE XREF: _req_main+FFEj
					; _req_main+1009j
		mov	eax, [esp+16Ch+var_128]
		test	eax, eax
		jz	short loc_40483E
		mov	eax, [esp+16Ch+var_8C]
		test	eax, eax
		jz	short loc_40483E
		mov	[esp+16Ch+var_16C], eax
		call	_CRYPTO_free

loc_40483E:				; CODE XREF: _req_main+1019j
					; _req_main+1024j
		call	_OBJ_cleanup
		mov	eax, esi
		add	esp, 15Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_404850:				; CODE XREF: _req_main+B6Ej
		mov	edi, offset aPubkey ; "-pubkey"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_404870
		mov	esi, ebx
		mov	[esp+16Ch+var_118], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------
		align 10h

loc_404870:				; CODE XREF: _req_main+104Ej
		mov	edi, offset aNew ; "-new"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jz	short loc_4048A6
		mov	edi, offset aConfig ; "-config"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4048B5
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_134], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4048A6:				; CODE XREF: _req_main+106Ej
		mov	esi, ebx
		mov	[esp+16Ch+var_114], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4048B5:				; CODE XREF: _req_main+107Ej
		mov	edi, offset aKeyform ; "-keyform"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	short loc_404936
		mov	edi, offset aIn_0 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	loc_404971
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_E8], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4048F2:				; CODE XREF: _req_main+86j
		call	_BIO_s_file
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_40389C
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+16Ch+var_160], edx
		mov	[esp+16Ch+var_164], 10h
		mov	[esp+16Ch+var_168], 6Ah
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_ctrl
		jmp	loc_40389C
; ---------------------------------------------------------------------------

loc_404936:				; CODE XREF: _req_main+10B3j
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_16C], eax	; char *
		call	_str2fmt
		mov	[esp+16Ch+var_B8], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_404957:				; CODE XREF: _req_main+2A2j
		mov	[esp+16Ch+var_168], offset aErrorGettingPa ; "Error getting passwords\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_404735
; ---------------------------------------------------------------------------

loc_404971:				; CODE XREF: _req_main+10C3j
		mov	edi, offset aOut_0 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_404B72
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_F4], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_40499B:				; CODE XREF: _req_main+2F9j
		mov	eax, [esp+16Ch+var_134]
		mov	[esp+16Ch+var_160], eax
		mov	eax, [esp+16Ch+var_80]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aErrorOnLineL_0 ; "error on line %ld	of %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_404735
; ---------------------------------------------------------------------------

loc_4049C8:				; CODE XREF: _req_main+2C5j
		mov	eax, [esp+16Ch+var_134]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aUsingConfigura ; "Using configuration from %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_403ADB
; ---------------------------------------------------------------------------

loc_4049EA:				; CODE XREF: _req_main+B4j
		mov	[esp+16Ch+var_C8], 0
		mov	[esp+16Ch+var_F0], 0
		mov	[esp+16Ch+var_128], 0
		mov	[esp+16Ch+var_12C], 0
		mov	[esp+16Ch+var_C0], 0
		mov	[esp+16Ch+var_104], 0
		mov	[esp+16Ch+var_120], 0
		mov	[esp+16Ch+var_100], 0
		mov	[esp+16Ch+var_108], 0
		mov	[esp+16Ch+var_140], 0
		mov	[esp+16Ch+var_F8], 0
		mov	[esp+16Ch+var_134], 0
		mov	[esp+16Ch+var_11C], 0
		mov	[esp+16Ch+var_F4], 0
		mov	[esp+16Ch+var_E8], 0
		mov	[esp+16Ch+var_118], 0
		mov	[esp+16Ch+var_EC], 0
		mov	[esp+16Ch+var_B0], 0
		mov	[esp+16Ch+var_D0], 0
		mov	[esp+16Ch+var_B4], 0
		mov	[esp+16Ch+var_B8], 3
		mov	[esp+16Ch+var_D4], 0
		mov	[esp+16Ch+var_D8], 0
		mov	[esp+16Ch+var_DC], 0
		mov	[esp+16Ch+var_144], 3
		mov	[esp+16Ch+var_148], 3
		mov	[esp+16Ch+var_FC], 0
		mov	[esp+16Ch+var_114], 0
		mov	[esp+16Ch+var_124], 0
		mov	[esp+16Ch+var_130], 0
		mov	[esp+16Ch+var_BC], 0
		mov	[esp+16Ch+var_E0], 1Eh
		mov	[esp+16Ch+var_110], 0
		mov	[esp+16Ch+var_13C], 0
		mov	[esp+16Ch+var_C4], 0
		jmp	loc_403A78
; ---------------------------------------------------------------------------

loc_404B31:				; CODE XREF: _req_main+2AEj
		mov	eax, ds:_config
		mov	ds:_req_conf, eax
		test	eax, eax
		jz	loc_404DE9
		mov	ecx, [esp+16Ch+var_FC]
		test	ecx, ecx
		jz	loc_403B1C
		mov	eax, ds:_default_config_file
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aUsingConfigura ; "Using configuration from %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_403B0F
; ---------------------------------------------------------------------------

loc_404B72:				; CODE XREF: _req_main+116Fj
		mov	edi, offset aKeyout ; "-keyout"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_404BA9
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_F8], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_404B98:				; CODE XREF: _req_main+306j
		xor	eax, eax
		jmp	loc_403B89
; ---------------------------------------------------------------------------

loc_404B9F:				; CODE XREF: _req_main+35Ej
		mov	eax, ds:_req_conf
		jmp	loc_403B89
; ---------------------------------------------------------------------------

loc_404BA9:				; CODE XREF: _req_main+1370j
		mov	edi, offset aPassin ; "-passin"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_404BF3
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_12C], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_404BCF:				; CODE XREF: _req_main+344j
		call	_ERR_clear_error
		mov	eax, ds:_req_conf
		jmp	loc_403B89
; ---------------------------------------------------------------------------

loc_404BDE:				; CODE XREF: _req_main+418j
		mov	eax, [esp+16Ch+var_108]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aErrorLoadingEx ; "Error Loading extension section %s\n"
		jmp	loc_404350
; ---------------------------------------------------------------------------

loc_404BF3:				; CODE XREF: _req_main+13A7j
		mov	edi, offset aPassout ; "-passout"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	loc_404CE0
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_128], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_404C1D:				; CODE XREF: _req_main+7B4j
		mov	[esp+16Ch+var_F0], 0

loc_404C25:				; CODE XREF: _req_main+259Aj
		call	_X509_new
		mov	edi, eax
		test	eax, eax
		jz	short loc_404C54
		mov	eax, [esp+16Ch+var_108]
		test	eax, eax
		jz	loc_405EFF
		mov	[esp+16Ch+var_168], 2
		mov	[esp+16Ch+var_16C], edi
		call	_X509_set_version
		test	eax, eax
		jnz	loc_405EFF

loc_404C54:				; CODE XREF: _req_main+890j
					; _req_main+141Ej ...
		xor	ebx, ebx
		jmp	loc_40474B
; ---------------------------------------------------------------------------
		align 10h

loc_404C60:				; CODE XREF: _req_main+624j
		mov	ebp, [esp+16Ch+var_E8]
		test	ebp, ebp
		jz	loc_405ED5
		mov	eax, [esp+16Ch+var_E8]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], 3
		mov	[esp+16Ch+var_168], 6Ch
		mov	eax, [esp+16Ch+var_134]
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_405EBB

loc_404C9E:				; CODE XREF: _req_main+26EAj
		cmp	[esp+16Ch+var_148], 1
		jz	loc_405DCA
		cmp	[esp+16Ch+var_148], 3
		jz	loc_405D6B
		mov	[esp+16Ch+var_168], offset aBadInputFormat ; "bad input	format specified for X509 req"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		xor	ebx, ebx
		xor	ebp, ebp
		xor	edi, edi
		jmp	loc_40474B
; ---------------------------------------------------------------------------
		align 10h

loc_404CE0:				; CODE XREF: _req_main+13F1j
		mov	edi, offset aRand ; "-rand"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	loc_404E95
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_C0], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------
		align 10h

loc_404D10:				; CODE XREF: _req_main+531j
		mov	eax, [esp+16Ch+var_100]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aErrorLoadingRe ; "Error Loading request extension section"...
		jmp	loc_404350
; ---------------------------------------------------------------------------

loc_404D25:				; CODE XREF: _req_main+55Dj
					; _req_main+565j ...
		xor	ebx, ebx

loc_404D27:				; CODE XREF: _req_main+2BE1j
					; _req_main+2FCCj
		xor	ebp, ebp
		xor	edi, edi
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_404D30:				; CODE XREF: _req_main+46Dj
		mov	[esp+16Ch+var_164], ebx
		mov	[esp+16Ch+var_168], offset aInvalidGlobalS ; "Invalid global string mask setting %s\n"
		jmp	loc_404350
; ---------------------------------------------------------------------------

loc_404D41:				; CODE XREF: _req_main+5FFj
		call	_ERR_clear_error
		jmp	loc_403E15
; ---------------------------------------------------------------------------

loc_404D4B:				; CODE XREF: _req_main+A98j
					; _req_main+1580j
		mov	[esp+16Ch+var_168], offset aBadOutputForma ; "bad output format	specified for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_404D67:				; CODE XREF: _req_main+A8Dj
		mov	[esp+16Ch+var_168], ebp
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_i2d_X509_REQ_bio
		jmp	loc_4042CD
; ---------------------------------------------------------------------------

loc_404D7C:				; CODE XREF: _req_main+A82j
		test	edi, edi
		jz	loc_4042D5
		cmp	[esp+16Ch+var_144], 1
		jz	short loc_404DD7
		cmp	[esp+16Ch+var_144], 3
		jnz	short loc_404D4B
		mov	[esp+16Ch+var_168], edi
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_PEM_write_bio_X509

loc_404DA2:				; CODE XREF: _req_main+15D7j
		test	eax, eax
		jnz	loc_4042D5
		mov	[esp+16Ch+var_168], offset aUnableToWriteX ; "unable to	write X509 certificate\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_404DC6:				; CODE XREF: _req_main+9A1j
		mov	edx, [esp+16Ch+var_104]
		test	edx, edx
		jnz	loc_4041EE
		jmp	loc_404281
; ---------------------------------------------------------------------------

loc_404DD7:				; CODE XREF: _req_main+1579j
		mov	[esp+16Ch+var_168], edi
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_i2d_X509_bio
		jmp	short loc_404DA2
; ---------------------------------------------------------------------------

loc_404DE9:				; CODE XREF: _req_main+132Dj
		mov	eax, ds:_default_config_file
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aUnableToLoadCo ; "Unable to	load config info from %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	ebx, [esp+16Ch+var_114]
		test	ebx, ebx
		jnz	loc_404735
		jmp	loc_403B0F
; ---------------------------------------------------------------------------

loc_404E18:				; CODE XREF: _req_main+87Cj
		mov	[esp+16Ch+var_16C], ebp
		call	_X509_REQ_get_pubkey
		mov	[esp+16Ch+var_9C], eax
		test	eax, eax
		jz	loc_404C54
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebp
		call	_X509_REQ_verify
		mov	[esp+16Ch+var_148], eax
		mov	edx, [esp+16Ch+var_9C]
		mov	[esp+16Ch+var_16C], edx
		call	_EVP_PKEY_free
		mov	[esp+16Ch+var_9C], 0
		mov	eax, [esp+16Ch+var_148]
		jmp	loc_40409E
; ---------------------------------------------------------------------------

loc_404E62:				; CODE XREF: _req_main+4C0j
		mov	[esp+16Ch+var_164], offset aReq_extensions ; "req_extensions"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	[esp+16Ch+var_100], eax
		test	eax, eax
		jnz	loc_403CD6
		call	_ERR_clear_error
		jmp	loc_403D47
; ---------------------------------------------------------------------------

loc_404E95:				; CODE XREF: _req_main+14DEj
		mov	edi, offset aNewkey ; "-newkey"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	loc_405A73
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_BC], eax
		mov	[esp+16Ch+var_114], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_404ECA:				; CODE XREF: _req_main+896j
		mov	[esp+16Ch+var_168], offset aVerifyOk ; "verify OK\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_4040CE
; ---------------------------------------------------------------------------

loc_404EE4:				; CODE XREF: _req_main+74Cj
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	[esp+16Ch+var_E8], eax
		mov	eax, ds:_batch
		test	eax, eax
		jnz	loc_404F91
		mov	[esp+16Ch+var_168], offset aYouAreAboutToB ; "You are about to be asked	to enter info"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aIntoYourCertif ; "into your	certificate request.\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aWhatYouAreAbou ; "What you are about to enter is what is "...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aThereAreQuiteA ; "There are	quite a	few fields but you ca"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aForSomeFieldsT ; "For some fields there will be a default"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aIfYouEnter_The ; "If you enter '.', the field will be lef"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset asc_459B53 ;	"-----\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf

loc_404F91:				; CODE XREF: _req_main+16E8j
		mov	eax, [esp+16Ch+var_FC]
		mov	[esp+16Ch+var_16C], eax
		call	_sk_num
		test	eax, eax
		jz	loc_405AB9
		mov	[esp+16Ch+var_CC], 0FFFFFFFFh
		lea	esi, [esp+16Ch+var_80]
		mov	[esp+16Ch+var_148], ebp

loc_404FBB:				; CODE XREF: _req_main+17ECj
					; _req_main+17FCj ...
		inc	[esp+16Ch+var_CC]
		mov	edi, [esp+16Ch+var_FC]
		mov	[esp+16Ch+var_16C], edi
		call	_sk_num
		mov	edx, [esp+16Ch+var_CC]
		cmp	edx, eax
		jge	loc_405559
		mov	[esp+16Ch+var_168], edx
		mov	[esp+16Ch+var_16C], edi
		call	_sk_value
		mov	edi, eax
		mov	ebx, [eax+4]
		mov	edx, offset a_min ; "_min"
		mov	eax, ebx
		call	_check_end
		test	eax, eax
		jz	short loc_404FBB
		mov	edx, offset a_max ; "_max"
		mov	eax, ebx
		call	_check_end
		test	eax, eax
		jz	short loc_404FBB
		mov	edx, offset a_default ;	"_default"
		mov	eax, ebx
		call	_check_end
		test	eax, eax
		jz	short loc_404FBB
		mov	edx, offset a_value ; "_value"
		mov	eax, ebx
		call	_check_end
		test	eax, eax
		jz	short loc_404FBB
		mov	dl, [ebx]
		test	dl, dl
		jz	short loc_405077
		cmp	dl, 3Ah
		jz	loc_4054FE
		mov	al, dl
		and	eax, 0FFFFFFFDh
		cmp	al, 2Ch
		jz	loc_4054FE
		mov	eax, ebx

loc_40504C:				; CODE XREF: _req_main+184Ej
		inc	eax
		mov	cl, [eax]
		test	cl, cl
		jz	short loc_40506E
		cmp	cl, 3Ah
		jz	short loc_405060
		and	ecx, 0FFFFFFFDh
		cmp	cl, 2Ch
		jnz	short loc_40504C

loc_405060:				; CODE XREF: _req_main+1846j
					; _req_main+1CF0j
		lea	ecx, [eax+1]
		mov	al, [eax+1]
		test	al, al
		jz	short loc_40506E
		mov	dl, al
		mov	ebx, ecx

loc_40506E:				; CODE XREF: _req_main+1841j
					; _req_main+1858j
		cmp	dl, 2Bh
		jz	loc_4054F0

loc_405077:				; CODE XREF: _req_main+1822j
		mov	[esp+16Ch+var_F0], 0

loc_40507F:				; CODE XREF: _req_main+1CE9j
		mov	[esp+16Ch+var_16C], ebx
		call	_OBJ_txt2nid
		mov	[esp+16Ch+var_BC], eax
		test	eax, eax
		jz	loc_404FBB
		mov	eax, [edi+4]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], offset aS_default ;	"%s_default"
		mov	[esp+16Ch+var_168], 64h
		mov	[esp+16Ch+var_16C], esi
		call	_BIO_snprintf
		cmp	eax, 63h
		jg	loc_405505
		mov	[esp+16Ch+var_164], esi
		mov	eax, [esp+16Ch+var_140]
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	ebp, eax
		test	eax, eax
		jnz	short loc_4050E7
		call	_ERR_clear_error
		mov	ebp, offset byte_458F2F

loc_4050E7:				; CODE XREF: _req_main+18CBj
		mov	eax, [edi+4]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], offset aS_value ; "%s_value"
		mov	[esp+16Ch+var_168], 64h
		mov	[esp+16Ch+var_16C], esi
		call	_BIO_snprintf
		mov	[esp+16Ch+var_164], esi
		mov	eax, [esp+16Ch+var_140]
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_40512A
		call	_ERR_clear_error

loc_40512A:				; CODE XREF: _req_main+1913j
		mov	eax, [edi+4]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], offset aS_min ; "%s_min"
		mov	[esp+16Ch+var_168], 64h
		mov	[esp+16Ch+var_16C], esi
		call	_BIO_snprintf
		lea	eax, [esp+16Ch+var_88]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], esi
		mov	eax, [esp+16Ch+var_140]
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_number_e
		test	eax, eax
		jnz	short loc_405181
		call	_ERR_clear_error
		mov	[esp+16Ch+var_88], 0FFFFFFFFh

loc_405181:				; CODE XREF: _req_main+195Fj
		mov	eax, [edi+4]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], offset aS_max ; "%s_max"
		mov	[esp+16Ch+var_168], 64h
		mov	[esp+16Ch+var_16C], esi
		call	_BIO_snprintf
		lea	eax, [esp+16Ch+var_84]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], esi
		mov	eax, [esp+16Ch+var_140]
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_number_e
		test	eax, eax
		jz	loc_4054D0
		mov	eax, [esp+16Ch+var_84]
		mov	[esp+16Ch+var_C8], eax

loc_4051DA:				; CODE XREF: _req_main+1CDBj
		mov	eax, [esp+16Ch+var_88]
		mov	[esp+16Ch+var_B8], eax
		mov	edi, [edi+8]
		mov	eax, ds:_batch
		test	eax, eax
		jz	loc_405309

loc_4051F8:				; CODE XREF: _req_main+1B16j
		mov	[esp+16Ch+var_160], 0
		mov	[esp+16Ch+var_164], 0
		mov	[esp+16Ch+var_168], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_ctrl
		test	ebx, ebx
		jz	loc_40546B
		mov	[esp+16Ch+var_164], 400h
		mov	[esp+16Ch+var_168], ebx
		mov	[esp+16Ch+var_16C], offset _buf_36770
		call	_BUF_strlcpy
		mov	[esp+16Ch+var_164], 400h
		mov	[esp+16Ch+var_168], offset asc_459E0E ;	"\n"
		mov	[esp+16Ch+var_16C], offset _buf_36770
		call	_BUF_strlcat
		mov	[esp+16Ch+var_164], ebx
		mov	[esp+16Ch+var_168], offset aS_2	; "%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	al, ds:_buf_36770

loc_405277:				; CODE XREF: _req_main+1D44j
		test	al, al
		jz	loc_405432
		cmp	al, 0Ah
		jz	loc_40548D
		cmp	al, 2Eh
		jz	loc_405459

loc_40528F:				; CODE XREF: _req_main+1C50j
					; _req_main+1CBBj
		mov	edx, offset _buf_36770

loc_405294:				; CODE XREF: _req_main+1A98j
		mov	ecx, [edx]
		add	edx, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_405294
		test	eax, 8080h
		jnz	short loc_4052B7
		shr	eax, 10h
		add	edx, 2

loc_4052B7:				; CODE XREF: _req_main+1A9Fj
		add	al, al
		sbb	edx, 3
		sub	edx, offset _buf_36770
		lea	eax, [edx-1]
		cmp	ds:_buf_36770[eax], 0Ah
		jnz	loc_40543B
		mov	ds:_buf_36770[eax], 0
		mov	ecx, [esp+16Ch+var_C8]
		mov	edx, [esp+16Ch+var_B8]
		call	_req_check_len
		test	eax, eax
		jnz	loc_4053E8
		mov	eax, ds:_batch
		test	eax, eax
		jnz	loc_405432
		test	ebx, ebx
		jnz	loc_405432

loc_405309:				; CODE XREF: _req_main+19E2j
		mov	[esp+16Ch+var_160], ebp
		mov	[esp+16Ch+var_164], edi
		mov	[esp+16Ch+var_168], offset aSS_1 ; "%s [%s]:"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_4051F8
; ---------------------------------------------------------------------------

loc_40532B:				; CODE XREF: _req_main+740j
		mov	eax, [ebp+0]
		mov	esi, [eax+10h]
		xor	edi, edi

loc_405333:				; CODE XREF: _req_main+1BD3j
		mov	eax, [esp+16Ch+var_FC]
		mov	[esp+16Ch+var_16C], eax
		call	_sk_num
		cmp	edi, eax
		jge	loc_4059DA
		mov	[esp+16Ch+var_168], edi
		mov	eax, [esp+16Ch+var_FC]
		mov	[esp+16Ch+var_16C], eax
		call	_sk_value
		mov	ebx, [eax+4]
		mov	dl, [ebx]
		test	dl, dl
		jz	short loc_40539D
		cmp	dl, 3Ah
		jz	loc_4059D3
		and	edx, 0FFFFFFFDh
		mov	ecx, ebx
		cmp	dl, 2Ch
		jz	loc_4059D3

loc_405377:				; CODE XREF: _req_main+1B79j
		inc	ecx
		mov	dl, [ecx]
		test	dl, dl
		jz	short loc_40539D
		cmp	dl, 3Ah
		jz	short loc_40538B
		and	edx, 0FFFFFFFDh
		cmp	dl, 2Ch
		jnz	short loc_405377

loc_40538B:				; CODE XREF: _req_main+1B71j
					; _req_main+21C5j
		lea	edx, [ecx+1]
		mov	[esp+16Ch+var_148], edx
		mov	dl, [ecx+1]
		test	dl, dl
		jz	short loc_40539D
		mov	ebx, [esp+16Ch+var_148]

loc_40539D:				; CODE XREF: _req_main+1B4Ej
					; _req_main+1B6Cj ...
		mov	eax, [eax+8]
		cmp	dl, 2Bh
		setz	dl
		and	edx, 0FFh
		neg	edx
		mov	[esp+16Ch+var_154], edx
		mov	[esp+16Ch+var_158], 0FFFFFFFFh
		mov	[esp+16Ch+var_15C], 0FFFFFFFFh
		mov	[esp+16Ch+var_160], eax
		mov	eax, [esp+16Ch+var_10C]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], ebx
		mov	[esp+16Ch+var_16C], esi
		call	_X509_NAME_add_entry_by_txt
		test	eax, eax
		jz	loc_403F7F
		inc	edi
		jmp	loc_405333
; ---------------------------------------------------------------------------

loc_4053E8:				; CODE XREF: _req_main+1ADEj
		mov	eax, [esp+16Ch+var_F0]
		mov	[esp+16Ch+var_154], eax
		mov	[esp+16Ch+var_158], 0FFFFFFFFh
		mov	[esp+16Ch+var_15C], 0FFFFFFFFh
		mov	[esp+16Ch+var_160], offset _buf_36770
		mov	eax, [esp+16Ch+var_10C]
		mov	[esp+16Ch+var_164], eax
		mov	eax, [esp+16Ch+var_BC]
		mov	[esp+16Ch+var_168], eax
		mov	eax, [esp+16Ch+var_E8]
		mov	[esp+16Ch+var_16C], eax
		call	_X509_NAME_add_entry_by_NID
		test	eax, eax
		jnz	loc_404FBB

loc_405432:				; CODE XREF: _req_main+1A69j
					; _req_main+1AEBj ...
		mov	ebp, [esp+16Ch+var_148]
		jmp	loc_403F7F
; ---------------------------------------------------------------------------

loc_40543B:				; CODE XREF: _req_main+1ABCj
					; _req_main+2043j
		mov	ebp, [esp+16Ch+var_148]
		mov	[esp+16Ch+var_168], offset aWeirdInput ; "weird	input :-(\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_403F7F
; ---------------------------------------------------------------------------

loc_405459:				; CODE XREF: _req_main+1A79j
		cmp	ds:byte_472921,	0Ah
		jnz	loc_40528F
		jmp	loc_404FBB
; ---------------------------------------------------------------------------

loc_40546B:				; CODE XREF: _req_main+1A0Fj
		mov	ds:_buf_36770, 0
		mov	eax, ds:_batch
		test	eax, eax
		jz	loc_40552A
		mov	ds:_buf_36770, 0Ah
		mov	ds:byte_472921,	0

loc_40548D:				; CODE XREF: _req_main+1A71j
		cmp	byte ptr [ebp+0], 0
		jz	loc_404FBB
		mov	[esp+16Ch+var_164], 400h
		mov	[esp+16Ch+var_168], ebp
		mov	[esp+16Ch+var_16C], offset _buf_36770
		call	_BUF_strlcpy
		mov	[esp+16Ch+var_164], 400h
		mov	[esp+16Ch+var_168], offset asc_459E0E ;	"\n"
		mov	[esp+16Ch+var_16C], offset _buf_36770
		call	_BUF_strlcat
		jmp	loc_40528F
; ---------------------------------------------------------------------------

loc_4054D0:				; CODE XREF: _req_main+19B6j
		call	_ERR_clear_error
		mov	[esp+16Ch+var_84], 0FFFFFFFFh
		mov	[esp+16Ch+var_C8], 0FFFFFFFFh
		jmp	loc_4051DA
; ---------------------------------------------------------------------------

loc_4054F0:				; CODE XREF: _req_main+1861j
		inc	ebx
		mov	[esp+16Ch+var_F0], 0FFFFFFFFh
		jmp	loc_40507F
; ---------------------------------------------------------------------------

loc_4054FE:				; CODE XREF: _req_main+1827j
					; _req_main+1834j
		mov	eax, ebx
		jmp	loc_405060
; ---------------------------------------------------------------------------

loc_405505:				; CODE XREF: _req_main+18A8j
		mov	ebp, [esp+16Ch+var_148]
		mov	eax, [edi+4]

loc_40550C:				; CODE XREF: _req_main+2122j
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aNameSTooLong ; "Name '%s' too long\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_403F7F
; ---------------------------------------------------------------------------

loc_40552A:				; CODE XREF: _req_main+1C69j
		mov	eax, ds:__imp___iob
		mov	[esp+16Ch+var_164], eax	; FILE *
		mov	[esp+16Ch+var_168], 400h ; int
		mov	[esp+16Ch+var_16C], offset _buf_36770 ;	char *
		call	_fgets
		test	eax, eax
		jz	loc_405432
		mov	al, ds:_buf_36770
		jmp	loc_405277
; ---------------------------------------------------------------------------

loc_405559:				; CODE XREF: _req_main+17C7j
		mov	ebp, [esp+16Ch+var_148]
		mov	eax, [esp+16Ch+var_E8]
		mov	[esp+16Ch+var_16C], eax
		call	_X509_NAME_entry_count
		test	eax, eax
		jz	loc_40560D
		mov	edi, [esp+16Ch+var_C4]
		test	edi, edi
		jz	loc_4059B4
		mov	esi, [esp+16Ch+var_114]
		test	esi, esi
		jz	loc_4059B4
		mov	eax, [esp+16Ch+var_114]
		mov	[esp+16Ch+var_16C], eax
		call	_sk_num
		test	eax, eax
		jle	short loc_4055AD
		mov	ecx, ds:_batch
		test	ecx, ecx
		jz	loc_405AD3

loc_4055AD:				; CODE XREF: _req_main+1D8Dj
		mov	ebx, [esp+16Ch+var_114]
		test	ebx, ebx
		jz	loc_4059B4

loc_4055B9:				; CODE XREF: _req_main+22EDj
		mov	[esp+16Ch+var_FC], 0
		lea	edi, [esp+16Ch+var_80]
		mov	[esp+16Ch+var_148], ebp

loc_4055CC:				; CODE XREF: _req_main+1DFBj
		mov	ebx, [esp+16Ch+var_114]
		mov	[esp+16Ch+var_16C], ebx
		call	_sk_num
		mov	edx, [esp+16Ch+var_FC]
		cmp	eax, edx
		jle	loc_4059B0
		mov	[esp+16Ch+var_168], edx
		mov	[esp+16Ch+var_16C], ebx
		call	_sk_value
		mov	[esp+16Ch+var_140], eax
		mov	ebp, [eax+4]
		mov	[esp+16Ch+var_16C], ebp
		call	_OBJ_txt2nid
		mov	[esp+16Ch+var_F0], eax
		test	eax, eax
		jnz	short loc_405627

loc_405607:				; CODE XREF: _req_main+20AEj
					; _req_main+20D8j ...
		inc	[esp+16Ch+var_FC]
		jmp	short loc_4055CC
; ---------------------------------------------------------------------------

loc_40560D:				; CODE XREF: _req_main+1D5Ej
					; _req_main+21D4j
		mov	[esp+16Ch+var_168], offset aErrorNoObjects ; "error, no	objects	specified in config f"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_403F7F
; ---------------------------------------------------------------------------

loc_405627:				; CODE XREF: _req_main+1DF5j
		mov	[esp+16Ch+var_160], ebp
		mov	[esp+16Ch+var_164], offset aS_default ;	"%s_default"
		mov	[esp+16Ch+var_168], 64h
		mov	[esp+16Ch+var_16C], edi
		call	_BIO_snprintf
		cmp	eax, 63h
		jg	loc_405927
		mov	[esp+16Ch+var_164], edi
		mov	eax, [esp+16Ch+var_11C]
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	esi, eax
		test	eax, eax
		jnz	short loc_405675
		call	_ERR_clear_error
		mov	esi, offset byte_458F2F

loc_405675:				; CODE XREF: _req_main+1E59j
		mov	[esp+16Ch+var_160], ebp
		mov	[esp+16Ch+var_164], offset aS_value ; "%s_value"
		mov	[esp+16Ch+var_168], 64h
		mov	[esp+16Ch+var_16C], edi
		call	_BIO_snprintf
		mov	[esp+16Ch+var_164], edi
		mov	eax, [esp+16Ch+var_11C]
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_4056B5
		call	_ERR_clear_error

loc_4056B5:				; CODE XREF: _req_main+1E9Ej
		mov	[esp+16Ch+var_160], ebp
		mov	[esp+16Ch+var_164], offset aS_min ; "%s_min"
		mov	[esp+16Ch+var_168], 64h
		mov	[esp+16Ch+var_16C], edi
		call	_BIO_snprintf
		lea	eax, [esp+16Ch+var_88]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], edi
		mov	eax, [esp+16Ch+var_11C]
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_number_e
		test	eax, eax
		jnz	short loc_405709
		call	_ERR_clear_error
		mov	[esp+16Ch+var_88], 0FFFFFFFFh

loc_405709:				; CODE XREF: _req_main+1EE7j
		mov	[esp+16Ch+var_160], ebp
		mov	[esp+16Ch+var_164], offset aS_max ; "%s_max"
		mov	[esp+16Ch+var_168], 64h
		mov	[esp+16Ch+var_16C], edi
		call	_BIO_snprintf
		lea	eax, [esp+16Ch+var_84]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], edi
		mov	eax, [esp+16Ch+var_11C]
		mov	[esp+16Ch+var_168], eax
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_number_e
		test	eax, eax
		jz	loc_405937
		mov	ebp, [esp+16Ch+var_84]

loc_405758:				; CODE XREF: _req_main+213Cj
		mov	eax, [esp+16Ch+var_88]
		mov	[esp+16Ch+var_E8], eax
		mov	eax, [esp+16Ch+var_140]
		mov	eax, [eax+8]
		mov	[esp+16Ch+var_140], eax
		mov	edx, ds:_batch
		test	edx, edx
		jz	loc_40588B

loc_40577F:				; CODE XREF: _req_main+209Cj
		mov	[esp+16Ch+var_160], 0
		mov	[esp+16Ch+var_164], 0
		mov	[esp+16Ch+var_168], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_ctrl
		test	ebx, ebx
		jz	loc_4058C3
		mov	[esp+16Ch+var_164], 400h
		mov	[esp+16Ch+var_168], ebx
		mov	[esp+16Ch+var_16C], offset _buf_36784
		call	_BUF_strlcpy
		mov	[esp+16Ch+var_164], 400h
		mov	[esp+16Ch+var_168], offset asc_459E0E ;	"\n"
		mov	[esp+16Ch+var_16C], offset _buf_36784
		call	_BUF_strlcat
		mov	[esp+16Ch+var_164], ebx
		mov	[esp+16Ch+var_168], offset aS_2	; "%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	al, ds:_buf_36784

loc_4057FE:				; CODE XREF: _req_main+225Ej
		test	al, al
		jz	loc_405432
		cmp	al, 0Ah
		jz	loc_4058E5
		cmp	al, 2Eh
		jz	loc_4058B1

loc_405816:				; CODE XREF: _req_main+20A8j
					; _req_main+2112j
		mov	edx, offset _buf_36784

loc_40581B:				; CODE XREF: _req_main+201Fj
		mov	ecx, [edx]
		add	edx, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_40581B
		test	eax, 8080h
		jnz	short loc_40583E
		shr	eax, 10h
		add	edx, 2

loc_40583E:				; CODE XREF: _req_main+2026j
		add	al, al
		sbb	edx, 3
		sub	edx, offset _buf_36784
		lea	eax, [edx-1]
		cmp	ds:_buf_36784[eax], 0Ah
		jnz	loc_40543B
		mov	ds:_buf_36784[eax], 0
		mov	ecx, ebp
		mov	edx, [esp+16Ch+var_E8]
		call	_req_check_len
		test	eax, eax
		jnz	loc_405951
		mov	eax, ds:_batch
		test	eax, eax
		jnz	loc_405432
		test	ebx, ebx
		jnz	loc_405432

loc_40588B:				; CODE XREF: _req_main+1F69j
		mov	[esp+16Ch+var_160], esi
		mov	eax, [esp+16Ch+var_140]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aSS_1 ; "%s [%s]:"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_40577F
; ---------------------------------------------------------------------------

loc_4058B1:				; CODE XREF: _req_main+2000j
		cmp	ds:byte_472521,	0Ah
		jnz	loc_405816
		jmp	loc_405607
; ---------------------------------------------------------------------------

loc_4058C3:				; CODE XREF: _req_main+1F96j
		mov	ds:_buf_36784, 0
		mov	eax, ds:_batch
		test	eax, eax
		jz	loc_405A44
		mov	ds:_buf_36784, 0Ah
		mov	ds:byte_472521,	0

loc_4058E5:				; CODE XREF: _req_main+1FF8j
		cmp	byte ptr [esi],	0
		jz	loc_405607
		mov	[esp+16Ch+var_164], 400h
		mov	[esp+16Ch+var_168], esi
		mov	[esp+16Ch+var_16C], offset _buf_36784
		call	_BUF_strlcpy
		mov	[esp+16Ch+var_164], 400h
		mov	[esp+16Ch+var_168], offset asc_459E0E ;	"\n"
		mov	[esp+16Ch+var_16C], offset _buf_36784
		call	_BUF_strlcat
		jmp	loc_405816
; ---------------------------------------------------------------------------

loc_405927:				; CODE XREF: _req_main+1E36j
		mov	ebp, [esp+16Ch+var_148]
		mov	eax, [esp+16Ch+var_140]
		mov	eax, [eax+4]
		jmp	loc_40550C
; ---------------------------------------------------------------------------

loc_405937:				; CODE XREF: _req_main+1F3Bj
		call	_ERR_clear_error
		mov	[esp+16Ch+var_84], 0FFFFFFFFh
		mov	ebp, 0FFFFFFFFh
		jmp	loc_405758
; ---------------------------------------------------------------------------

loc_405951:				; CODE XREF: _req_main+2060j
		mov	[esp+16Ch+var_15C], 0FFFFFFFFh
		mov	[esp+16Ch+var_160], offset _buf_36784
		mov	eax, [esp+16Ch+var_10C]
		mov	[esp+16Ch+var_164], eax
		mov	eax, [esp+16Ch+var_F0]
		mov	[esp+16Ch+var_168], eax
		mov	eax, [esp+16Ch+var_148]
		mov	[esp+16Ch+var_16C], eax
		call	_X509_REQ_add1_attr_by_NID
		test	eax, eax
		jnz	loc_405607
		mov	ebp, [esp+16Ch+var_148]
		mov	[esp+16Ch+var_168], offset aErrorAddingAtt ; "Error adding attribute\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_ERR_print_errors
		jmp	loc_403F7F
; ---------------------------------------------------------------------------

loc_4059B0:				; CODE XREF: _req_main+1DCEj
		mov	ebp, [esp+16Ch+var_148]

loc_4059B4:				; CODE XREF: _req_main+769j
					; _req_main+1D6Dj ...
		mov	eax, [esp+16Ch+var_C0]
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebp
		call	_X509_REQ_set_pubkey
		xor	ebx, ebx
		test	eax, eax
		setnz	bl
		jmp	loc_403F81
; ---------------------------------------------------------------------------

loc_4059D3:				; CODE XREF: _req_main+1B53j
					; _req_main+1B61j
		mov	ecx, ebx
		jmp	loc_40538B
; ---------------------------------------------------------------------------

loc_4059DA:				; CODE XREF: _req_main+1B31j
		mov	[esp+16Ch+var_16C], esi
		call	_X509_NAME_entry_count
		test	eax, eax
		jz	loc_40560D
		mov	eax, [esp+16Ch+var_C4]
		test	eax, eax
		jz	short loc_4059B4
		xor	ebx, ebx
		mov	esi, [esp+16Ch+var_114]

loc_4059FB:				; CODE XREF: _req_main+2232j
		mov	[esp+16Ch+var_16C], esi
		call	_sk_num
		cmp	ebx, eax
		jge	short loc_4059B4
		mov	[esp+16Ch+var_168], ebx
		mov	[esp+16Ch+var_16C], esi
		call	_sk_value
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		mov	[esp+16Ch+var_15C], 0FFFFFFFFh
		mov	[esp+16Ch+var_160], edx
		mov	edx, [esp+16Ch+var_10C]
		mov	[esp+16Ch+var_164], edx
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebp
		call	_X509_REQ_add1_attr_by_txt
		test	eax, eax
		jz	loc_403F7F
		inc	ebx
		jmp	short loc_4059FB
; ---------------------------------------------------------------------------

loc_405A44:				; CODE XREF: _req_main+20C1j
		mov	eax, ds:__imp___iob
		mov	[esp+16Ch+var_164], eax	; FILE *
		mov	[esp+16Ch+var_168], 400h ; int
		mov	[esp+16Ch+var_16C], offset _buf_36784 ;	char *
		call	_fgets
		test	eax, eax
		jz	loc_405432
		mov	al, ds:_buf_36784
		jmp	loc_4057FE
; ---------------------------------------------------------------------------

loc_405A73:				; CODE XREF: _req_main+1693j
		mov	edi, offset aPkeyopt ; "-pkeyopt"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	loc_405B14
		dec	ebp
		jz	loc_4043C0
		mov	eax, [esp+16Ch+var_130]
		test	eax, eax
		jz	short loc_405B02

loc_405A96:				; CODE XREF: _req_main+22FDj
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_168], eax
		mov	eax, [esp+16Ch+var_130]
		mov	[esp+16Ch+var_16C], eax
		call	_sk_push
		test	eax, eax
		jnz	loc_403A29
		jmp	loc_4043C0
; ---------------------------------------------------------------------------

loc_405AB9:				; CODE XREF: _req_main+178Fj
		mov	[esp+16Ch+var_168], offset aNoTemplatePlea ; "No template, please set one up.\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_403F7F
; ---------------------------------------------------------------------------

loc_405AD3:				; CODE XREF: _req_main+1D97j
		mov	[esp+16Ch+var_168], offset aPleaseEnterThe ; "\nPlease enter the following 'extra' at"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset aToBeSentWithYo ; "to be sent with your certificate reques"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_4055B9
; ---------------------------------------------------------------------------

loc_405B02:				; CODE XREF: _req_main+2284j
		call	_sk_new_null
		mov	[esp+16Ch+var_130], eax
		test	eax, eax
		jnz	short loc_405A96
		jmp	loc_4043C0
; ---------------------------------------------------------------------------

loc_405B14:				; CODE XREF: _req_main+2271j
		mov	edi, offset aSigopt ; "-sigopt"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	loc_4061CA
		dec	ebp
		jz	loc_4043C0
		mov	eax, [esp+16Ch+var_124]
		test	eax, eax
		jz	loc_4061B4

loc_405B3B:				; CODE XREF: _req_main+29AFj
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_168], eax
		mov	eax, [esp+16Ch+var_124]
		mov	[esp+16Ch+var_16C], eax
		call	_sk_push
		test	eax, eax
		jnz	loc_403A29
		jmp	loc_4043C0
; ---------------------------------------------------------------------------

loc_405B5E:				; CODE XREF: _req_main+ABFj
		mov	[esp+16Ch+var_168], offset aUnableToWrit_0 ; "unable to	write X509 request\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_405B7A:				; CODE XREF: _req_main+AB2j
		call	_PEM_write_bio_X509_REQ
		jmp	loc_4042CD
; ---------------------------------------------------------------------------

loc_405B84:				; CODE XREF: _req_main+982j
		mov	[esp+16Ch+var_168], ebp
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_X509_REQ_print_ex
		mov	eax, [esp+16Ch+var_EC]
		test	eax, eax
		jz	short loc_405BFC

loc_405B9F:				; CODE XREF: _req_main+23EAj
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	edx, [esp+16Ch+var_A8]
		mov	[esp+16Ch+var_160], edx
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aSubject ; "subject="
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_print_name
		mov	ecx, [esp+16Ch+var_104]
		test	ecx, ecx
		jz	loc_404281

loc_405BD4:				; CODE XREF: _req_main+23F2j
					; _req_main+2411j
		mov	[esp+16Ch+var_16C], ebp
		call	_X509_REQ_get_pubkey
		mov	ebx, eax
		jmp	loc_4041F8
; ---------------------------------------------------------------------------

loc_405BE3:				; CODE XREF: _req_main+960j
		mov	esi, [esp+16Ch+var_EC]
		test	esi, esi
		jz	short loc_405C09
		mov	ebx, [esp+16Ch+var_110]
		test	ebx, ebx
		jnz	loc_4041B7
		jmp	short loc_405B9F
; ---------------------------------------------------------------------------

loc_405BFC:				; CODE XREF: _req_main+238Dj
		mov	eax, [esp+16Ch+var_104]
		test	eax, eax
		jnz	short loc_405BD4
		jmp	loc_404281
; ---------------------------------------------------------------------------

loc_405C09:				; CODE XREF: _req_main+23DCj
		mov	edx, [esp+16Ch+var_104]
		test	edx, edx
		jz	loc_404281
		mov	eax, [esp+16Ch+var_110]
		test	eax, eax
		jnz	loc_4041EE
		jmp	short loc_405BD4
; ---------------------------------------------------------------------------

loc_405C23:				; CODE XREF: _req_main+951j
		mov	[esp+16Ch+var_16C], ebp
		call	_X509_REQ_get_pubkey
		mov	ebx, eax
		test	eax, eax
		jz	short loc_405C61
		mov	[esp+16Ch+var_168], eax
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_PEM_write_bio_PUBKEY
		mov	[esp+16Ch+var_16C], ebx
		call	_EVP_PKEY_free
		jmp	loc_404167
; ---------------------------------------------------------------------------

loc_405C4E:				; CODE XREF: _req_main+945j
		mov	eax, [esp+16Ch+var_F4]
		mov	[esp+16Ch+var_16C], eax	; char *
		call	_perror
		xor	ebx, ebx
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_405C61:				; CODE XREF: _req_main+241Fj
		mov	[esp+16Ch+var_168], offset aErrorGettingPu ; "Error getting public key\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_ERR_print_errors
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_405C88:				; CODE XREF: _req_main+8F9j
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], 0
		mov	[esp+16Ch+var_168], 6Ah
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_ctrl
		jmp	loc_40415B
; ---------------------------------------------------------------------------

loc_405CB5:				; CODE XREF: _req_main+919j
		mov	eax, [esp+16Ch+var_F4]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], 9
		mov	[esp+16Ch+var_168], 6Ch
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_ctrl
		jmp	loc_404153
; ---------------------------------------------------------------------------

loc_405CDE:				; CODE XREF: _req_main+A23j
		mov	eax, [ebx+14h]
		mov	eax, [eax+10h]
		mov	[esp+16Ch+var_168], eax
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_BN_print
		jmp	loc_404261
; ---------------------------------------------------------------------------

loc_405CF9:				; CODE XREF: _req_main+9F6j
		mov	[esp+16Ch+var_164], 14h	; size_t
		mov	[esp+16Ch+var_168], 1 ;	size_t
		mov	[esp+16Ch+var_16C], offset aModulusUnavail ; "Modulus=unavailable\n"
		call	_fwrite
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_405D1A:				; CODE XREF: _req_main+7A8j
		mov	[esp+16Ch+var_168], offset aProblemsMaking ; "problems making Certificate Request\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_405D36:				; CODE XREF: _req_main+858j
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_ERR_print_errors

loc_405D43:				; CODE XREF: _req_main+642j
					; _req_main+2559j ...
		xor	ebx, ebx
		xor	edi, edi
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_405D4C:				; CODE XREF: _req_main+821j
		mov	eax, [esp+16Ch+var_100]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aErrorLoadingEx ; "Error Loading extension section %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	short loc_405D43
; ---------------------------------------------------------------------------

loc_405D6B:				; CODE XREF: _req_main+149Ej
		mov	[esp+16Ch+var_160], 0
		mov	[esp+16Ch+var_164], 0
		mov	[esp+16Ch+var_168], 0
		mov	eax, [esp+16Ch+var_134]
		mov	[esp+16Ch+var_16C], eax
		call	_PEM_read_bio_X509_REQ
		mov	ebp, eax

loc_405D91:				; CODE XREF: _req_main+25D0j
		test	ebp, ebp
		jz	loc_405EAE
		mov	edi, [esp+16Ch+var_110]
		test	edi, edi
		jz	short loc_405DE2
		mov	esi, [esp+16Ch+var_9C]
		test	esi, esi
		jnz	loc_404C25

loc_405DB0:				; CODE XREF: _req_main+2EFDj
		mov	[esp+16Ch+var_168], offset aYouNeedToSpeci ; "you need to specify a private key\n"

loc_405DB8:				; CODE XREF: _req_main+2699j
					; _req_main+26A6j
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_405D43
; ---------------------------------------------------------------------------

loc_405DCA:				; CODE XREF: _req_main+1493j
		mov	[esp+16Ch+var_168], 0
		mov	eax, [esp+16Ch+var_134]
		mov	[esp+16Ch+var_16C], eax
		call	_d2i_X509_REQ_bio
		mov	ebp, eax
		jmp	short loc_405D91
; ---------------------------------------------------------------------------

loc_405DE2:				; CODE XREF: _req_main+258Fj
		mov	ebx, [esp+16Ch+var_F0]
		test	ebx, ebx
		jz	loc_40406E
		mov	ebx, [esp+16Ch+var_FC]
		test	ebx, ebx
		jz	short loc_405E35
		mov	[esp+16Ch+var_168], offset aModifyingReque ; "Modifying	Request's Subject\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	edx, [esp+16Ch+var_A8]
		mov	[esp+16Ch+var_160], edx
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aOldSubject ; "old subject="
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_print_name

loc_405E35:				; CODE XREF: _req_main+25E4j
		mov	eax, [esp+16Ch+var_C8]
		mov	[esp+16Ch+var_16C], eax	; int
		mov	ecx, [esp+16Ch+var_10C]	; int
		mov	edx, [esp+16Ch+var_F0] ; char *
		mov	eax, ebp
		call	_build_subject
		test	eax, eax
		jz	short loc_405EA1
		mov	eax, [ebp+0]
		mov	dword ptr [eax+8], 1
		mov	ecx, [esp+16Ch+var_FC]
		test	ecx, ecx
		jz	short loc_405E8B
		mov	eax, [eax+10h]
		mov	edx, [esp+16Ch+var_A8]
		mov	[esp+16Ch+var_160], edx
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aNewSubject ; "new subject="
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_print_name

loc_405E8B:				; CODE XREF: _req_main+2652j
		xor	edi, edi
		mov	ecx, [esp+16Ch+var_DC]
		test	ecx, ecx
		jnz	loc_404083
		jmp	loc_4040CE
; ---------------------------------------------------------------------------

loc_405EA1:				; CODE XREF: _req_main+2640j
		mov	[esp+16Ch+var_168], offset aErrorCannotMod ; "ERROR: cannot modify subject\n"
		jmp	loc_405DB8
; ---------------------------------------------------------------------------

loc_405EAE:				; CODE XREF: _req_main+2583j
		mov	[esp+16Ch+var_168], offset aUnableToLoadX5 ; "unable to	load X509 request\n"
		jmp	loc_405DB8
; ---------------------------------------------------------------------------

loc_405EBB:				; CODE XREF: _req_main+1488j
		mov	eax, [esp+16Ch+var_E8]

loc_405EC2:				; CODE XREF: _req_main+2F06j
		mov	[esp+16Ch+var_16C], eax	; char *
		call	_perror
		xor	ebx, ebx
		xor	ebp, ebp
		xor	edi, edi
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_405ED5:				; CODE XREF: _req_main+1459j
		mov	eax, ds:__imp___iob
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], 0
		mov	[esp+16Ch+var_168], 6Ah
		mov	eax, [esp+16Ch+var_134]
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_ctrl
		jmp	loc_404C9E
; ---------------------------------------------------------------------------

loc_405EFF:				; CODE XREF: _req_main+1426j
					; _req_main+143Ej
		mov	eax, [esp+16Ch+var_120]
		test	eax, eax
		jz	loc_40609F
		mov	eax, [esp+16Ch+var_120]
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], edi
		call	_X509_set_serialNumber
		test	eax, eax
		jz	loc_404C54

loc_405F23:				; CODE XREF: _req_main+28AFj
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], edi
		call	_X509_set_issuer_name
		test	eax, eax
		jz	loc_404C54
		mov	eax, [edi]
		mov	eax, [eax+10h]
		mov	eax, [eax]
		mov	[esp+16Ch+var_168], 0
		mov	[esp+16Ch+var_16C], eax
		call	_X509_gmtime_adj
		test	eax, eax
		jz	loc_404C54
		mov	eax, [edi]
		mov	eax, [eax+10h]
		mov	eax, [eax+4]
		mov	[esp+16Ch+var_160], 0
		mov	[esp+16Ch+var_164], 0
		mov	edx, [esp+16Ch+var_E0]
		mov	[esp+16Ch+var_168], edx
		mov	[esp+16Ch+var_16C], eax
		call	_X509_time_adj_ex
		test	eax, eax
		jz	loc_404C54
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], edi
		call	_X509_set_subject_name
		test	eax, eax
		jz	loc_404C54
		mov	[esp+16Ch+var_16C], ebp
		call	_X509_REQ_get_pubkey
		mov	ebx, eax
		test	eax, eax
		jz	loc_404C54
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], edi
		call	_X509_set_pubkey
		test	eax, eax
		jz	loc_404C54
		mov	[esp+16Ch+var_16C], ebx
		call	_EVP_PKEY_free
		mov	[esp+16Ch+var_158], 0
		mov	[esp+16Ch+var_15C], 0
		mov	[esp+16Ch+var_160], 0
		mov	[esp+16Ch+var_164], edi
		mov	[esp+16Ch+var_168], edi
		lea	ebx, [esp+16Ch+var_80]
		mov	[esp+16Ch+var_16C], ebx
		call	_X509V3_set_ctx
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebx
		call	_X509V3_set_nconf
		mov	eax, [esp+16Ch+var_108]
		test	eax, eax
		jz	short loc_406040
		mov	[esp+16Ch+var_160], edi
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], ebx
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_X509V3_EXT_add_nconf
		test	eax, eax
		jz	loc_406474

loc_406040:				; CODE XREF: _req_main+280Dj
		mov	eax, [esp+16Ch+var_124]
		mov	[esp+16Ch+var_15C], eax
		mov	eax, [esp+16Ch+var_E4]
		mov	[esp+16Ch+var_160], eax
		mov	eax, [esp+16Ch+var_9C]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], edi
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_do_X509_sign
		test	eax, eax
		jz	loc_406496
		mov	esi, [esp+16Ch+var_F0]
		test	esi, esi
		jz	loc_404070
		mov	[esp+16Ch+var_168], offset aCannotModifiyC ; "Cannot modifiy certificate subject\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_40609F:				; CODE XREF: _req_main+26F5j
		mov	[esp+16Ch+var_16C], edi
		call	_X509_get_serialNumber
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], 0
		call	_rand_serial
		test	eax, eax
		jz	loc_404C54
		jmp	loc_405F23
; ---------------------------------------------------------------------------

loc_4060C4:				; CODE XREF: _req_main+49Cj
		call	_ERR_clear_error
		jmp	loc_403CCA
; ---------------------------------------------------------------------------

loc_4060CE:				; CODE XREF: _req_main+427j
		mov	[esp+16Ch+var_164], offset aInput_password ; "input_password"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	[esp+16Ch+var_90], eax
		test	eax, eax
		jnz	loc_403C3D
		call	_ERR_clear_error
		jmp	loc_403C3D
; ---------------------------------------------------------------------------

loc_406104:				; CODE XREF: _req_main+45Dj
		call	_ERR_clear_error
		jmp	loc_403C83
; ---------------------------------------------------------------------------

loc_40610E:				; CODE XREF: _req_main+436j
		mov	[esp+16Ch+var_164], offset aOutput_passwor ; "output_password"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	[esp+16Ch+var_8C], eax
		test	eax, eax
		jnz	loc_403C4C
		call	_ERR_clear_error
		jmp	loc_403C4C
; ---------------------------------------------------------------------------

loc_406144:				; CODE XREF: _req_main+3A7j
		mov	[esp+16Ch+var_164], offset aX509_extension ; "x509_extensions"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	[esp+16Ch+var_108], eax
		test	eax, eax
		jnz	loc_403BBD
		call	_ERR_clear_error
		jmp	loc_403C2E
; ---------------------------------------------------------------------------

loc_406177:				; CODE XREF: _req_main+39Bj
		mov	[esp+16Ch+var_164], offset aDefault_md ; "default_md"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	short loc_4061EB
		mov	[esp+16Ch+var_16C], eax
		call	_EVP_get_digestbyname
		test	eax, eax
		jz	loc_403BB1
		mov	[esp+16Ch+var_E4], eax
		jmp	loc_403BB1
; ---------------------------------------------------------------------------

loc_4061B4:				; CODE XREF: _req_main+2325j
		call	_sk_new_null
		mov	[esp+16Ch+var_124], eax
		test	eax, eax
		jnz	loc_405B3B
		jmp	loc_4043C0
; ---------------------------------------------------------------------------

loc_4061CA:				; CODE XREF: _req_main+2312j
		mov	edi, offset aBatch ; "-batch"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4061F5
		mov	ds:_batch, 1
		mov	esi, ebx
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4061EB:				; CODE XREF: _req_main+2986j
		call	_ERR_clear_error
		jmp	loc_403BB1
; ---------------------------------------------------------------------------

loc_4061F5:				; CODE XREF: _req_main+29C8j
		mov	edi, offset aNewhdr ; "-newhdr"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jz	loc_406A01
		mov	edi, offset aModulus_0 ; "-modulus"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	loc_4069F2
		mov	edi, offset aVerify ; "-verify"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jz	loc_4069E0
		mov	edi, offset aNodes ; "-nodes"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_4069CE
		mov	edi, offset aNoout_0 ; "-noout"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_4068C6
		mov	edi, offset aVerbose_0 ; "-verbose"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	loc_4068B7
		mov	edi, offset aUtf8_0 ; "-utf8"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_40681E
		mov	edi, offset aNameopt ; "-nameopt"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	loc_4067E1
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_168], eax
		lea	eax, [esp+16Ch+var_A8]
		mov	[esp+16Ch+var_16C], eax
		call	_set_name_ex
		test	eax, eax
		jnz	loc_403A29
		jmp	loc_4043C0
; ---------------------------------------------------------------------------

loc_4062C2:				; CODE XREF: _req_main+724j
		mov	eax, [esp+16Ch+var_11C]

loc_4062C6:				; CODE XREF: _req_main+2AEAj
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aUnableToGetSSe ; "unable to	get '%s' section\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_403F7F
; ---------------------------------------------------------------------------

loc_4062E4:				; CODE XREF: _req_main+707j
		call	_ERR_clear_error
		mov	[esp+16Ch+var_114], 0
		jmp	loc_403F3A
; ---------------------------------------------------------------------------

loc_4062F6:				; CODE XREF: _req_main+6DEj
		mov	eax, [esp+16Ch+var_140]
		jmp	short loc_4062C6
; ---------------------------------------------------------------------------

loc_4062FC:				; CODE XREF: _req_main+6C1j
		mov	[esp+16Ch+var_164], offset aDistinguished_ ; "distinguished_name"
		mov	[esp+16Ch+var_168], offset aUnableToFindSI ; "unable to	find '%s' in config\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_403F81
; ---------------------------------------------------------------------------

loc_406320:				; CODE XREF: _req_main+687j
		call	_ERR_clear_error
		xor	ebx, ebx
		jmp	loc_403EAE
; ---------------------------------------------------------------------------

loc_40632C:				; CODE XREF: _req_main+633j
		mov	[esp+16Ch+var_164], offset aRandfile ; "RANDFILE"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	edi, eax
		test	eax, eax
		jnz	short loc_406354
		call	_ERR_clear_error

loc_406354:				; CODE XREF: _req_main+2B3Dj
		mov	[esp+16Ch+var_164], 0
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], edi
		call	_app_RAND_load_file
		mov	eax, [esp+16Ch+var_C0]
		test	eax, eax
		jz	short loc_406380
		mov	[esp+16Ch+var_16C], eax
		call	_app_RAND_load_files

loc_406380:				; CODE XREF: _req_main+2B66j
		lea	esi, [esp+16Ch+var_94]
		mov	[esp+16Ch+var_160], esi
		mov	[esp+16Ch+var_164], offset aDefault_bits ; "default_bits"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_number_e
		test	eax, eax
		jnz	short loc_4063B7
		mov	[esp+16Ch+var_94], 200h

loc_4063B7:				; CODE XREF: _req_main+2B9Aj
		mov	edx, [esp+16Ch+var_BC]
		test	edx, edx
		jz	loc_406470
		mov	eax, [esp+16Ch+var_13C]
		mov	[esp+16Ch+var_164], eax
		lea	eax, [esp+16Ch+var_A0]
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], esi
		lea	ecx, [esp+16Ch+var_98]
		mov	eax, ds:_bio_err
		call	_set_keygen_ctx
		mov	ebx, eax
		test	eax, eax
		jz	loc_404D27

loc_4063F7:				; CODE XREF: _req_main+2C62j
		cmp	[esp+16Ch+var_94], 17Fh
		jg	short loc_40641D
		mov	eax, [esp+16Ch+var_98]
		cmp	eax, 6
		jz	loc_4064A8
		cmp	eax, 74h
		jz	loc_4064A8

loc_40641D:				; CODE XREF: _req_main+2BF2j
		test	ebx, ebx
		jz	loc_4067A9

loc_406425:				; CODE XREF: _req_main+2FC6j
		xor	esi, esi
		mov	ebp, [esp+16Ch+var_130]
		test	ebp, ebp
		jz	loc_40651D

loc_406433:				; CODE XREF: _req_main+2C5Ej
		mov	eax, [esp+16Ch+var_130]
		mov	[esp+16Ch+var_16C], eax
		call	_sk_num
		cmp	esi, eax
		jge	loc_40651D
		mov	[esp+16Ch+var_168], esi
		mov	eax, [esp+16Ch+var_130]
		mov	[esp+16Ch+var_16C], eax
		call	_sk_value
		mov	ebp, eax
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebx
		call	_pkey_ctrl_string
		test	eax, eax
		jle	loc_4064EE
		inc	esi
		jmp	short loc_406433
; ---------------------------------------------------------------------------

loc_406470:				; CODE XREF: _req_main+2BB0j
		xor	ebx, ebx
		jmp	short loc_4063F7
; ---------------------------------------------------------------------------

loc_406474:				; CODE XREF: _req_main+282Aj
		mov	eax, [esp+16Ch+var_108]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aErrorLoadingEx ; "Error Loading extension section %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		jmp	loc_404C54
; ---------------------------------------------------------------------------

loc_406496:				; CODE XREF: _req_main+2861j
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_ERR_print_errors
		jmp	loc_404C54
; ---------------------------------------------------------------------------

loc_4064A8:				; CODE XREF: _req_main+2BFEj
					; _req_main+2C07j
		mov	[esp+16Ch+var_168], offset aPrivateKeyLeng ; "private key length is too	short,\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	eax, [esp+16Ch+var_94]
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], 180h
		mov	[esp+16Ch+var_168], offset aItNeedsToBeAtL ; "it needs to be at	least %d bits, not %l"...
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		xor	ebp, ebp
		xor	edi, edi
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_4064EE:				; CODE XREF: _req_main+2C57j
		mov	[esp+16Ch+var_164], ebp
		mov	[esp+16Ch+var_168], offset aParameterError ; "parameter	error \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_ERR_print_errors
		xor	ebp, ebp
		xor	edi, edi
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_40651D:				; CODE XREF: _req_main+2C1Dj
					; _req_main+2C31j
		mov	eax, [esp+16Ch+var_A0]
		mov	[esp+16Ch+var_160], eax
		mov	eax, [esp+16Ch+var_94]
		mov	[esp+16Ch+var_164], eax
		mov	[esp+16Ch+var_168], offset aGeneratingALdB ; "Generating a %ld bit %s private key\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_168], offset _genpkey_cb
		mov	[esp+16Ch+var_16C], ebx
		call	_EVP_PKEY_CTX_set_cb
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebx
		call	_EVP_PKEY_CTX_set_app_data
		lea	eax, [esp+16Ch+var_9C]
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], ebx
		call	_EVP_PKEY_keygen
		test	eax, eax
		jle	loc_40678B
		mov	[esp+16Ch+var_16C], ebx
		call	_EVP_PKEY_CTX_free
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], edi
		call	_app_RAND_write_file
		mov	esi, [esp+16Ch+var_F8]
		test	esi, esi
		jz	loc_40671B

loc_4065A9:				; CODE XREF: _req_main+2F2Ej
		mov	edi, [esp+16Ch+var_F8]
		mov	[esp+16Ch+var_164], edi
		mov	[esp+16Ch+var_168], offset aWritingNewPriv ; "writing new private key to '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	[esp+16Ch+var_160], edi
		mov	[esp+16Ch+var_164], 5
		mov	[esp+16Ch+var_168], 6Ch
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_406712

loc_4065EE:				; CODE XREF: _req_main+2F76j
		mov	[esp+16Ch+var_164], offset aEncrypt_rsa_ke ; "encrypt_rsa_key"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_4066B3

loc_406613:				; CODE XREF: _req_main+2EC7j
		mov	edi, offset aNo	; "no"
		mov	ecx, 3
		mov	esi, eax
		repe cmpsb
		jnz	short loc_40662E
		mov	[esp+16Ch+var_CC], 0

loc_40662E:				; CODE XREF: _req_main+2E11j
					; _req_main+2ED2j
		mov	ebx, [esp+16Ch+var_B4]
		test	ebx, ebx
		jz	short loc_406644
		mov	[esp+16Ch+var_CC], 0

loc_406644:				; CODE XREF: _req_main+2E27j
		mov	ebx, 4

loc_406649:				; CODE XREF: _req_main+2EA1j
		mov	eax, [esp+16Ch+var_8C]
		mov	[esp+16Ch+var_154], eax
		mov	[esp+16Ch+var_158], 0
		mov	[esp+16Ch+var_15C], 0
		mov	[esp+16Ch+var_160], 0
		mov	eax, [esp+16Ch+var_CC]
		mov	[esp+16Ch+var_164], eax
		mov	eax, [esp+16Ch+var_9C]
		mov	[esp+16Ch+var_168], eax
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_PEM_write_bio_PrivateKey
		test	eax, eax
		jnz	short loc_4066E7
		call	_ERR_peek_error
		and	eax, 0FFFh
		cmp	eax, 6Dh
		jnz	loc_404D25
		dec	ebx
		jz	loc_404D25
		call	_ERR_clear_error
		jmp	short loc_406649
; ---------------------------------------------------------------------------

loc_4066B3:				; CODE XREF: _req_main+2DFDj
		call	_ERR_clear_error
		mov	[esp+16Ch+var_164], offset aEncrypt_key	; "encrypt_key"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		test	eax, eax
		jnz	loc_406613
		call	_ERR_clear_error
		jmp	loc_40662E
; ---------------------------------------------------------------------------

loc_4066E7:				; CODE XREF: _req_main+2E80j
		mov	[esp+16Ch+var_168], offset asc_459B53 ;	"-----\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	ecx, [esp+16Ch+var_9C]
		test	ecx, ecx
		jnz	loc_403E49
		xor	ebp, ebp
		jmp	loc_405DB0
; ---------------------------------------------------------------------------

loc_406712:				; CODE XREF: _req_main+2DD8j
		mov	eax, [esp+16Ch+var_F8]
		jmp	loc_405EC2
; ---------------------------------------------------------------------------

loc_40671B:				; CODE XREF: _req_main+2D93j
		mov	[esp+16Ch+var_164], offset aDefault_keyfil ; "default_keyfile"
		mov	[esp+16Ch+var_168], offset aReq	; "req"
		mov	eax, ds:_req_conf
		mov	[esp+16Ch+var_16C], eax
		call	_NCONF_get_string
		mov	[esp+16Ch+var_F8], eax
		test	eax, eax
		jnz	loc_4065A9
		call	_ERR_clear_error
		mov	[esp+16Ch+var_168], offset aWritingNewPr_0 ; "writing new private key to stdout\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_printf
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+16Ch+var_160], eax
		mov	[esp+16Ch+var_164], 0
		mov	[esp+16Ch+var_168], 6Ah
		mov	eax, [esp+16Ch+var_138]
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_ctrl
		jmp	loc_4065EE
; ---------------------------------------------------------------------------

loc_40678B:				; CODE XREF: _req_main+2D6Ej
		mov	[esp+16Ch+var_168], offset aErrorGeneratin ; "Error Generating Key\n"
		mov	eax, ds:_bio_err
		mov	[esp+16Ch+var_16C], eax
		call	_BIO_puts
		xor	ebp, ebp
		xor	edi, edi
		jmp	loc_40474B
; ---------------------------------------------------------------------------

loc_4067A9:				; CODE XREF: _req_main+2C0Fj
		mov	eax, [esp+16Ch+var_13C]
		mov	[esp+16Ch+var_164], eax
		lea	eax, [esp+16Ch+var_A0]
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], esi
		lea	ecx, [esp+16Ch+var_98]
		xor	edx, edx
		mov	eax, ds:_bio_err
		call	_set_keygen_ctx
		mov	ebx, eax
		test	eax, eax
		jnz	loc_406425
		jmp	loc_404D27
; ---------------------------------------------------------------------------

loc_4067E1:				; CODE XREF: _req_main+2A7Fj
		mov	edi, offset aReqopt ; "-reqopt"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_40682D
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_168], eax
		lea	eax, [esp+16Ch+var_A4]
		mov	[esp+16Ch+var_16C], eax
		call	_set_cert_ex
		test	eax, eax
		jnz	loc_403A29
		jmp	loc_4043C0
; ---------------------------------------------------------------------------

loc_40681E:				; CODE XREF: _req_main+2A6Bj
		mov	esi, ebx
		mov	[esp+16Ch+var_10C], 1000h
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_40682D:				; CODE XREF: _req_main+2FDFj
		mov	edi, offset aSubject_0 ; "-subject"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	loc_406A25
		mov	edi, offset aText ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_406A13
		mov	edi, offset aX509 ; "-x509"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_406A37
		mov	edi, offset aAsn1Kludge	; "-asn1-kludge"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jz	loc_4069BC
		mov	edi, offset aNoAsn1Kludge ; "-no-asn1-kludge"
		mov	ecx, 10h
		mov	esi, eax
		repe cmpsb
		jz	loc_406930
		mov	edi, offset aSubj ; "-subj"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4068D8
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_F0], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4068B7:				; CODE XREF: _req_main+2A57j
		mov	esi, ebx
		mov	[esp+16Ch+var_FC], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4068C6:				; CODE XREF: _req_main+2A43j
		mov	esi, ebx
		mov	[esp+16Ch+var_D8], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4068D8:				; CODE XREF: _req_main+308Fj
		mov	edi, offset aMultivalueRdn ; "-multivalue-rdn"
		mov	ecx, 10h
		mov	esi, eax
		repe cmpsb
		jz	loc_406980
		mov	edi, offset aDays ; "-days"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_406942
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_16C], eax	; char *
		call	_atoi
		mov	[esp+16Ch+var_E0], eax
		test	eax, eax
		jnz	loc_403A29
		mov	[esp+16Ch+var_E0], 1Eh
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_406930:				; CODE XREF: _req_main+307Bj
		mov	esi, ebx
		mov	[esp+16Ch+var_D0], 0
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_406942:				; CODE XREF: _req_main+30EAj
		mov	edi, offset aSet_serial	; "-set_serial"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_406992
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_168], eax
		mov	[esp+16Ch+var_16C], 0
		call	_s2i_ASN1_INTEGER
		mov	[esp+16Ch+var_120], eax
		test	eax, eax
		jnz	loc_403A29
		jmp	loc_4043C0
; ---------------------------------------------------------------------------

loc_406980:				; CODE XREF: _req_main+30D6j
		mov	esi, ebx
		mov	[esp+16Ch+var_C8], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_406992:				; CODE XREF: _req_main+3140j
		mov	edi, offset aExtensions	; "-extensions"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	loc_406A46
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_108], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4069BC:				; CODE XREF: _req_main+3067j
		mov	esi, ebx
		mov	[esp+16Ch+var_D0], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4069CE:				; CODE XREF: _req_main+2A2Fj
		mov	esi, ebx
		mov	[esp+16Ch+var_B4], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4069E0:				; CODE XREF: _req_main+2A1Bj
		mov	esi, ebx
		mov	[esp+16Ch+var_DC], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_4069F2:				; CODE XREF: _req_main+2A07j
		mov	esi, ebx
		mov	[esp+16Ch+var_104], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_406A01:				; CODE XREF: _req_main+29F3j
		mov	esi, ebx
		mov	[esp+16Ch+var_B0], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_406A13:				; CODE XREF: _req_main+303Fj
		mov	esi, ebx
		mov	[esp+16Ch+var_D4], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_406A25:				; CODE XREF: _req_main+302Bj
		mov	esi, ebx
		mov	[esp+16Ch+var_EC], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_406A37:				; CODE XREF: _req_main+3053j
		mov	esi, ebx
		mov	[esp+16Ch+var_110], 1
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_406A46:				; CODE XREF: _req_main+3190j
		mov	edi, offset aReqexts ; "-reqexts"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_406A6C
		dec	ebp
		jz	loc_4043C0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+16Ch+var_100], eax
		jmp	loc_403A29
; ---------------------------------------------------------------------------

loc_406A6C:				; CODE XREF: _req_main+3244j
		inc	eax
		mov	[esp+16Ch+var_16C], eax
		call	_EVP_get_digestbyname
		mov	[esp+16Ch+var_C4], eax
		test	eax, eax
		jz	loc_404396
		mov	[esp+16Ch+var_E4], eax
		mov	esi, ebx
		jmp	loc_403A29
_req_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _do_X509_CRL_sign
_do_X509_CRL_sign proc near		; CODE XREF: _ca_main+31D8p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_38		= dword	ptr -38h
var_34		= byte ptr -34h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	esi, [esp+5Ch+arg_10]
		lea	edi, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_MD_CTX_init
		mov	[esp+5Ch+var_38], 0
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_MD_CTX_init
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 0
		mov	eax, [esp+5Ch+arg_C]
		mov	[esp+5Ch+var_54], eax
		lea	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_DigestSignInit
		test	eax, eax
		jz	loc_406B75
		xor	ebx, ebx
		jmp	short loc_406B23
; ---------------------------------------------------------------------------
		align 10h

loc_406B00:				; CODE XREF: _do_X509_CRL_sign+8Dj
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	_sk_value
		mov	ebp, eax
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax
		call	_pkey_ctrl_string
		test	eax, eax
		jle	short loc_406B50
		inc	ebx

loc_406B23:				; CODE XREF: _do_X509_CRL_sign+59j
		mov	[esp+5Ch+var_5C], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_406B00
		mov	[esp+5Ch+var_58], edi
		mov	eax, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_5C], eax
		call	_X509_CRL_sign_ctx
		xor	ebx, ebx
		test	eax, eax
		setnle	bl
		jmp	short loc_406B77
; ---------------------------------------------------------------------------
		align 10h

loc_406B50:				; CODE XREF: _do_X509_CRL_sign+80j
		mov	[esp+5Ch+var_54], ebp
		mov	[esp+5Ch+var_58], offset aParameterError ; "parameter error \"%s\"\n"
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_ERR_print_errors

loc_406B75:				; CODE XREF: _do_X509_CRL_sign+51j
		xor	ebx, ebx

loc_406B77:				; CODE XREF: _do_X509_CRL_sign+A6j
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_MD_CTX_cleanup
		mov	eax, ebx
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_do_X509_CRL_sign endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl list_md_fn_0(int,	char *,	int, int)
_list_md_fn_0	proc near		; DATA XREF: _dgst_main+9DCo

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	ebp, [esp+2Ch+arg_C]
		test	ebx, ebx
		jz	short loc_406BC9
		mov	[esp+2Ch+var_2C], ebx
		call	_EVP_MD_type
		mov	[esp+2Ch+var_2C], eax
		call	_OBJ_nid2ln
		mov	esi, eax
		mov	[esp+2Ch+var_28], eax ;	char *
		mov	[esp+2Ch+var_2C], edi ;	char *
		call	_strcmp
		test	eax, eax
		jz	short loc_406BE0

loc_406BC9:				; CODE XREF: _list_md_fn_0+15j
					; _list_md_fn_0+5Aj
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_406BE0
; ---------------------------------------------------------------------------
		align 10h

loc_406BE0:				; CODE XREF: _list_md_fn_0+37j
					; _list_md_fn_0+41j
		mov	[esp+2Ch+var_2C], ebx
		call	_EVP_MD_flags
		test	al, 2
		jnz	short loc_406BC9
		mov	[esp+2Ch+var_28], 20h ;	int
		mov	[esp+2Ch+var_2C], esi ;	char *
		call	_strchr
		test	eax, eax
		jz	short loc_406C12
		mov	[esp+2Ch+var_2C], ebx
		call	_EVP_MD_type
		mov	[esp+2Ch+var_2C], eax
		call	_OBJ_nid2sn
		mov	esi, eax

loc_406C12:				; CODE XREF: _list_md_fn_0+6Ej
		mov	[esp+2Ch+arg_C], esi
		mov	[esp+2Ch+arg_8], esi
		mov	[esp+2Ch+arg_4], offset	a14sToUseTheSMe	; "-%-14s to use the %s	message	digest alg"...
		mov	[esp+2Ch+arg_0], ebp
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	_BIO_printf
_list_md_fn_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _do_fp
_do_fp		proc near		; CODE XREF: _dgst_main+D33p
					; _dgst_main+128Fp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 30h
		mov	edi, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		mov	esi, [esp+3Ch+arg_8]
		jmp	short loc_406C62
; ---------------------------------------------------------------------------
		align 10h

loc_406C60:				; CODE XREF: _do_fp+38j
		jz	short loc_406CB0

loc_406C62:				; CODE XREF: _do_fp+12j
		mov	[esp+3Ch+var_34], 2000h
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_read
		test	eax, eax
		jns	short loc_406C60
		mov	eax, [esp+3Ch+arg_28]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aReadErrorInS ; "Read Error in	%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		mov	eax, 1

loc_406CA9:				; CODE XREF: _do_fp+FBj _do_fp+1F2j ...
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_406CB0:				; CODE XREF: _do_fp:loc_406C60j
		mov	eax, [esp+3Ch+arg_18]
		test	eax, eax
		jz	loc_406D40
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 78h
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_ctrl
		mov	eax, [esp+3Ch+arg_1C]
		mov	[esp+3Ch+var_34], eax
		mov	eax, [esp+3Ch+arg_18]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_3C], eax
		call	_EVP_DigestVerifyFinal
		cmp	eax, 0
		jle	short loc_406D20
		mov	[esp+3Ch+var_38], offset aVerifiedOk ; "Verified OK\n"
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf
		xor	eax, eax
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_406D20:				; CODE XREF: _do_fp+BBj
		jnz	loc_406E37
		mov	[esp+3Ch+var_38], offset aVerificationFa ; "Verification Failure\n"
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf
		mov	eax, 1
		jmp	loc_406CA9
; ---------------------------------------------------------------------------

loc_406D40:				; CODE XREF: _do_fp+76j
		mov	eax, [esp+3Ch+arg_14]
		test	eax, eax
		jz	loc_406F47
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 78h
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_ctrl
		mov	[esp+3Ch+var_14], 2000h
		lea	eax, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], ebx
		mov	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_3C], eax
		call	_EVP_DigestSignFinal
		test	eax, eax
		jz	loc_406F1F

loc_406D94:				; CODE XREF: _do_fp+321j
		mov	eax, [esp+3Ch+arg_10]
		test	eax, eax
		jnz	loc_406F2C
		cmp	[esp+3Ch+arg_C], 2
		jz	loc_406ED3
		mov	eax, [esp+3Ch+arg_28]
		mov	esi, [esp+3Ch+arg_20]
		test	esi, esi
		jz	loc_406EA6
		mov	[esp+3Ch+var_2C], eax
		mov	eax, [esp+3Ch+arg_24]
		mov	[esp+3Ch+var_30], eax
		mov	eax, [esp+3Ch+arg_20]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aSSS ;	"%s-%s(%s)= "
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf

loc_406DDF:				; CODE XREF: _do_fp+28Ej _do_fp+340j
		mov	edx, [esp+3Ch+var_14]
		test	edx, edx
		jle	short loc_406E20
		xor	esi, esi
		mov	eax, [esp+3Ch+arg_C]
		test	eax, eax
		jnz	loc_406E80
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_406E00:				; CODE XREF: _do_fp+1DEj
		xor	eax, eax
		mov	al, [ebx+esi]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset a02x ;	"%02x"
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf
		inc	esi
		cmp	[esp+3Ch+var_14], esi
		jg	short loc_406E00

loc_406E20:				; CODE XREF: _do_fp+1A5j _do_fp+25Ej
		mov	[esp+3Ch+var_38], offset asc_45A119 ; "\n"
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_406CA9
; ---------------------------------------------------------------------------

loc_406E37:				; CODE XREF: _do_fp:loc_406D20j
		mov	[esp+3Ch+var_38], offset aErrorVerifying ; "Error Verifying Data\n"

loc_406E3F:				; CODE XREF: _do_fp+2E7j
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf

loc_406E4C:				; CODE XREF: _do_fp+327j
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		mov	eax, 1
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_406E65:				; CODE XREF: _do_fp+264j
		mov	[esp+3Ch+var_38], offset asc_45A11B ; ":"
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_406E80:				; CODE XREF: _do_fp+1AFj _do_fp+262j
		xor	eax, eax
		mov	al, [ebx+esi]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset a02x ;	"%02x"
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf
		inc	esi
		cmp	esi, [esp+3Ch+var_14]
		jge	short loc_406E20
		test	esi, esi
		jz	short loc_406E80
		jmp	short loc_406E65
; ---------------------------------------------------------------------------

loc_406EA6:				; CODE XREF: _do_fp+175j
		mov	ecx, [esp+3Ch+arg_24]
		test	ecx, ecx
		jz	loc_406F6C
		mov	[esp+3Ch+var_30], eax
		mov	eax, [esp+3Ch+arg_24]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aSS_2 ; "%s(%s)= "
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf
		jmp	loc_406DDF
; ---------------------------------------------------------------------------

loc_406ED3:				; CODE XREF: _do_fp+165j
		xor	esi, esi
		mov	eax, [esp+3Ch+var_14]
		test	eax, eax
		jle	short loc_406F00
		lea	esi, [esi+0]

loc_406EE0:				; CODE XREF: _do_fp+2BEj
		xor	eax, eax
		mov	al, [ebx+esi]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset a02x ;	"%02x"
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf
		inc	esi
		cmp	esi, [esp+3Ch+var_14]
		jl	short loc_406EE0

loc_406F00:				; CODE XREF: _do_fp+29Bj
		mov	eax, [esp+3Ch+arg_28]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aS_3 ;	" *%s\n"
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_406CA9
; ---------------------------------------------------------------------------

loc_406F1F:				; CODE XREF: _do_fp+14Ej
		mov	[esp+3Ch+var_38], offset aErrorSigningDa ; "Error Signing Data\n"
		jmp	loc_406E3F
; ---------------------------------------------------------------------------

loc_406F2C:				; CODE XREF: _do_fp+15Aj
		mov	eax, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_write
		xor	eax, eax
		jmp	loc_406CA9
; ---------------------------------------------------------------------------

loc_406F47:				; CODE XREF: _do_fp+106j
		mov	[esp+3Ch+var_34], 2000h
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_gets
		mov	[esp+3Ch+var_14], eax
		test	eax, eax
		jns	loc_406D94
		jmp	loc_406E4C
; ---------------------------------------------------------------------------

loc_406F6C:				; CODE XREF: _do_fp+26Cj
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aS_4 ;	"(%s)= "
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_printf
		jmp	loc_406DDF
_do_fp		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _dgst_main
_dgst_main	proc near		; DATA XREF: _do_cmd+7Ao _do_cmd+82o ...

var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0DCh
		mov	esi, [esp+0ECh+arg_4]
		mov	[esp+0ECh+var_54], 0
		mov	[esp+0ECh+var_50], 0
		mov	[esp+0ECh+var_E4], 87h
		mov	[esp+0ECh+var_E8], offset aDgst_c ; "dgst.c"
		mov	[esp+0ECh+var_EC], 2000h
		call	_CRYPTO_malloc
		mov	[esp+0ECh+var_A0], eax
		test	eax, eax
		jz	loc_4074E0
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_407520

loc_406FED:				; CODE XREF: _dgst_main+5A4j
					; _dgst_main+5D5j
		mov	[esp+0ECh+var_E8], 0
		mov	[esp+0ECh+var_EC], ebx
		call	_load_config
		test	eax, eax
		jnz	loc_4070C0
		mov	[esp+0ECh+var_A8], 0
		mov	[esp+0ECh+var_A4], 0

loc_407015:				; CODE XREF: _dgst_main+4F1j
					; _dgst_main+9E8j
		mov	[esp+0ECh+var_E8], 2000h
		mov	edi, [esp+0ECh+var_A0]
		mov	[esp+0ECh+var_EC], edi
		call	_OPENSSL_cleanse
		mov	[esp+0ECh+var_EC], edi
		call	_CRYPTO_free
		xor	ebp, ebp

loc_407033:				; CODE XREF: _dgst_main+811j
		xor	edi, edi
		mov	[esp+0ECh+var_AC], 0
		mov	ebx, 1

loc_407042:				; CODE XREF: _dgst_main+422j
					; _dgst_main+586j
		mov	eax, [esp+0ECh+var_50]
		test	eax, eax
		jz	short loc_407055
		mov	[esp+0ECh+var_EC], eax
		call	_CRYPTO_free

loc_407055:				; CODE XREF: _dgst_main+BBj
		mov	eax, [esp+0ECh+var_AC]
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_free_all
		mov	eax, [esp+0ECh+var_54]
		mov	[esp+0ECh+var_EC], eax
		call	_EVP_PKEY_free
		mov	eax, [esp+0ECh+var_A4]
		test	eax, eax
		jz	short loc_407080
		mov	[esp+0ECh+var_EC], eax
		call	_sk_free

loc_407080:				; CODE XREF: _dgst_main+E6j
		mov	eax, [esp+0ECh+var_A8]
		test	eax, eax
		jz	short loc_407090
		mov	[esp+0ECh+var_EC], eax
		call	_sk_free

loc_407090:				; CODE XREF: _dgst_main+F6j
		test	edi, edi
		jz	short loc_40709C
		mov	[esp+0ECh+var_EC], edi
		call	_CRYPTO_free

loc_40709C:				; CODE XREF: _dgst_main+102j
		test	ebp, ebp
		jz	short loc_4070A8
		mov	[esp+0ECh+var_EC], ebp
		call	_BIO_free

loc_4070A8:				; CODE XREF: _dgst_main+10Ej
		mov	eax, ebx
		add	esp, 0DCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4070C0:				; CODE XREF: _dgst_main+6Fj
		mov	eax, [esi]
		mov	[esp+0ECh+var_E4], 28h ; int
		lea	edx, [esp+0ECh+var_44]
		mov	[esp+0ECh+var_E8], edx ; int
		mov	[esp+0ECh+var_EC], eax ; char *
		call	_program_name
		lea	eax, [esp+0ECh+var_44]
		mov	[esp+0ECh+var_EC], eax
		call	_EVP_get_digestbyname
		mov	[esp+0ECh+var_68], eax
		mov	eax, [esp+0ECh+arg_0]
		lea	edx, [eax-1]
		lea	ebp, [esi+4]
		test	edx, edx
		jle	loc_407E2F
		mov	ebx, [esi+4]
		cmp	byte ptr [ebx],	2Dh
		jnz	loc_407E2F
		mov	[esp+0ECh+var_A8], 0
		mov	[esp+0ECh+var_A4], 0
		mov	[esp+0ECh+var_60], 0
		mov	[esp+0ECh+var_78], 0
		mov	[esp+0ECh+var_74], 0
		mov	[esp+0ECh+var_88], 0
		mov	[esp+0ECh+var_8C], 0
		mov	[esp+0ECh+var_6C], 0
		mov	[esp+0ECh+var_90], 0FFFFFFFFh
		mov	[esp+0ECh+var_AC], 0
		mov	[esp+0ECh+var_7C], 0
		mov	[esp+0ECh+var_94], 0
		mov	[esp+0ECh+var_98], 0
		mov	[esp+0ECh+var_64], 3
		mov	[esp+0ECh+var_84], 0
		mov	[esp+0ECh+var_B0], 0
		mov	[esp+0ECh+var_70], 0
		jmp	short loc_4071F9
; ---------------------------------------------------------------------------
		align 10h

loc_4071B0:				; CODE XREF: _dgst_main+277j
		mov	edi, offset aR_12 ; "-r"
		mov	esi, ebx
		mov	ecx, 3
		repe cmpsb
		jz	loc_4073C0
		mov	edi, offset aRand_0 ; "-rand"
		mov	esi, ebx
		mov	ecx, 6
		repe cmpsb
		jnz	loc_4073D0
		dec	edx
		jz	loc_407D56
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_AC], eax
		add	ebp, 4

loc_4071E9:				; CODE XREF: _dgst_main+438j
					; _dgst_main+461j ...
		lea	esi, [ebp+4]
		dec	edx
		jz	short loc_407217

loc_4071EF:				; CODE XREF: _dgst_main+285j
		mov	ebx, [ebp+4]
		cmp	byte ptr [ebx],	2Dh
		jnz	short loc_407217
		mov	ebp, esi

loc_4071F9:				; CODE XREF: _dgst_main+215j
		mov	esi, ebx
		mov	edi, offset aC_4 ; "-c"
		mov	ecx, 3
		repe cmpsb
		jnz	short loc_4071B0
		mov	[esp+0ECh+var_B0], 1
		lea	esi, [ebp+4]
		dec	edx
		jnz	short loc_4071EF

loc_407217:				; CODE XREF: _dgst_main+25Dj
					; _dgst_main+265j ...
		mov	ebp, [esp+0ECh+var_8C]
		test	ebp, ebp
		jnz	loc_407460

loc_407223:				; CODE XREF: _dgst_main+4D6j
					; _dgst_main+F32j
		test	edx, edx
		jle	short loc_407232
		mov	eax, [esi]
		cmp	byte ptr [eax],	2Dh
		jz	loc_4077BB

loc_407232:				; CODE XREF: _dgst_main+295j
		mov	[esp+0ECh+var_80], edx
		call	_BIO_s_file
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_new
		mov	edi, eax
		mov	[esp+0ECh+var_9C], eax
		call	_BIO_f_md
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_new
		mov	ebp, eax
		test	edi, edi
		jz	loc_407772
		test	eax, eax
		mov	edx, [esp+0ECh+var_80]
		jz	loc_407772
		mov	ebx, [esp+0ECh+var_84]
		test	ebx, ebx
		jnz	loc_40757D

loc_407278:				; CODE XREF: _dgst_main+61Aj
		mov	[esp+0ECh+var_84], edx
		mov	[esp+0ECh+var_DC], 0 ; int
		lea	eax, [esp+0ECh+var_50]
		mov	[esp+0ECh+var_E0], eax ; int
		mov	[esp+0ECh+var_E4], 0 ; char *
		mov	eax, [esp+0ECh+var_88]
		mov	[esp+0ECh+var_E8], eax ; char *
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax ; int
		call	_app_passwd
		test	eax, eax
		mov	edx, [esp+0ECh+var_84]
		jz	loc_4075AF
		cmp	[esp+0ECh+var_90], 0FFFFFFFFh
		jz	loc_40797D

loc_4072C3:				; CODE XREF: _dgst_main+9FCj
		mov	edi, [esp+0ECh+var_AC]
		test	edi, edi
		jz	short loc_4072EC
		mov	[esp+0ECh+var_AC], edx
		mov	[esp+0ECh+var_E4], 0
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_E8], eax
		mov	[esp+0ECh+var_EC], edi
		call	_app_RAND_load_file
		mov	edx, [esp+0ECh+var_AC]

loc_4072EC:				; CODE XREF: _dgst_main+339j
		mov	eax, [esp+0ECh+var_98]
		test	eax, eax
		jz	loc_407F51
		mov	eax, [esp+0ECh+var_90]
		test	eax, eax
		mov	[esp+0ECh+var_88], edx
		jz	loc_407570
		mov	[esp+0ECh+var_E8], offset aWb_1	; "wb"

loc_407310:				; CODE XREF: _dgst_main+5E8j
		mov	eax, [esp+0ECh+var_98]
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_new_file
		mov	[esp+0ECh+var_AC], eax
		mov	edx, [esp+0ECh+var_88]
		cmp	[esp+0ECh+var_AC], 0
		jz	loc_408369

loc_40732F:				; CODE XREF: _dgst_main+FE7j
		mov	eax, [esp+0ECh+var_78]
		test	eax, eax
		setnz	bl
		mov	ecx, [esp+0ECh+var_94]
		test	ecx, ecx
		setnz	al
		mov	edi, [esp+0ECh+var_74]
		test	edi, edi
		setnz	byte ptr [esp+0ECh+var_98]
		xor	ecx, ecx
		mov	cl, bl
		mov	edi, eax
		and	edi, 0FFh
		add	ecx, edi
		movzx	edi, byte ptr [esp+0ECh+var_98]
		and	edi, 0FFh
		add	ecx, edi
		dec	ecx
		jle	loc_4075D8
		mov	[esp+0ECh+var_E8], offset aMacAndSigningK ; "MAC and Signing key cannot	both be	spec"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		xor	edi, edi
		mov	ebx, 1

loc_40738A:				; CODE XREF: _dgst_main+643j
					; _dgst_main+7B4j ...
		mov	[esp+0ECh+var_E8], 2000h
		mov	esi, [esp+0ECh+var_A0]
		mov	[esp+0ECh+var_EC], esi
		call	_OPENSSL_cleanse
		mov	[esp+0ECh+var_EC], esi
		call	_CRYPTO_free

loc_4073A6:				; CODE XREF: _dgst_main+826j
		mov	eax, [esp+0ECh+var_9C]
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_free
		jmp	loc_407042
; ---------------------------------------------------------------------------
		align 10h

loc_4073C0:				; CODE XREF: _dgst_main+22Ej
		mov	[esp+0ECh+var_B0], 2
		jmp	loc_4071E9
; ---------------------------------------------------------------------------
		align 10h

loc_4073D0:				; CODE XREF: _dgst_main+242j
		mov	edi, offset aOut_1 ; "-out"
		mov	ecx, 5
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_407400
		dec	edx
		jz	loc_407D56
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_98], eax
		add	ebp, 4
		jmp	loc_4071E9
; ---------------------------------------------------------------------------
		align 10h

loc_407400:				; CODE XREF: _dgst_main+44Ej
		mov	edi, offset aSign ; "-sign"
		mov	esi, ebx
		mov	ecx, 6
		repe cmpsb
		jz	short loc_407440
		mov	edi, offset aPassin_0 ;	"-passin"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_407490
		dec	edx
		jz	loc_407D56
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_88], eax
		add	ebp, 4
		jmp	loc_4071E9
; ---------------------------------------------------------------------------
		align 10h

loc_407440:				; CODE XREF: _dgst_main+47Ej
		dec	edx
		jz	loc_407D56
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_94], eax
		add	ebp, 4
		jmp	loc_4071E9
; ---------------------------------------------------------------------------
		align 10h

loc_407460:				; CODE XREF: _dgst_main+28Dj
		mov	edi, [esp+0ECh+var_7C]
		test	edi, edi
		jnz	loc_407223
		mov	[esp+0ECh+var_E8], offset aNoSignatureToV ; "No	signature to verify: use the -signat"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		jmp	loc_407015
; ---------------------------------------------------------------------------
		align 10h

loc_407490:				; CODE XREF: _dgst_main+48Ej
		mov	edi, offset aVerify_0 ;	"-verify"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jz	loc_407749
		mov	edi, offset aPrverify ;	"-prverify"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		jnz	loc_407D8B
		dec	edx
		jz	loc_407D56
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_94], eax
		add	ebp, 4
		mov	[esp+0ECh+var_8C], 1
		jmp	loc_4071E9
; ---------------------------------------------------------------------------
		align 10h

loc_4074E0:				; CODE XREF: _dgst_main+49j
		mov	[esp+0ECh+var_E8], offset aOutOfMemory ; "out of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_A8], 0
		xor	ebp, ebp
		xor	edi, edi
		mov	[esp+0ECh+var_AC], 0
		mov	ebx, 1
		mov	[esp+0ECh+var_A4], 0
		jmp	loc_407042
; ---------------------------------------------------------------------------
		align 10h

loc_407520:				; CODE XREF: _dgst_main+57j
		call	_BIO_s_file
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_406FED
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+0ECh+var_E0], edx
		mov	[esp+0ECh+var_E4], 10h
		mov	[esp+0ECh+var_E8], 6Ah
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_406FED
; ---------------------------------------------------------------------------
		align 10h

loc_407570:				; CODE XREF: _dgst_main+372j
		mov	[esp+0ECh+var_E8], offset aW_2 ; "w"
		jmp	loc_407310
; ---------------------------------------------------------------------------

loc_40757D:				; CODE XREF: _dgst_main+2E2j
		mov	[esp+0ECh+var_84], edx
		mov	[esp+0ECh+var_E8], offset _BIO_debug_callback
		mov	edi, [esp+0ECh+var_9C]
		mov	[esp+0ECh+var_EC], edi
		call	_BIO_set_callback
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_E8], eax
		mov	[esp+0ECh+var_EC], edi
		call	_BIO_set_callback_arg
		mov	edx, [esp+0ECh+var_84]
		jmp	loc_407278
; ---------------------------------------------------------------------------

loc_4075AF:				; CODE XREF: _dgst_main+322j
		mov	[esp+0ECh+var_E8], offset aErrorGetting_0 ; "Error getting password\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		xor	edi, edi
		mov	[esp+0ECh+var_AC], 0
		mov	ebx, 1
		jmp	loc_40738A
; ---------------------------------------------------------------------------

loc_4075D8:				; CODE XREF: _dgst_main+3D8j
		test	al, al
		jz	short loc_407642
		mov	eax, [esp+0ECh+var_6C]
		test	eax, eax
		mov	[esp+0ECh+var_88], edx
		mov	[esp+0ECh+var_D4], offset aKeyFile ; "key file"
		mov	eax, [esp+0ECh+var_70]
		mov	[esp+0ECh+var_D8], eax
		jz	loc_407DAD
		mov	[esp+0ECh+var_DC], 0
		mov	[esp+0ECh+var_E0], 0
		mov	eax, [esp+0ECh+var_64]
		mov	[esp+0ECh+var_E4], eax
		mov	eax, [esp+0ECh+var_94]
		mov	[esp+0ECh+var_E8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_load_pubkey
		mov	[esp+0ECh+var_54], eax
		mov	edx, [esp+0ECh+var_88]

loc_40763A:				; CODE XREF: _dgst_main+E5Bj
		test	eax, eax
		jz	loc_407D7F

loc_407642:				; CODE XREF: _dgst_main+64Aj
		test	bl, bl
		jz	loc_407991
		mov	[esp+0ECh+var_94], edx
		mov	[esp+0ECh+var_48], 0
		mov	[esp+0ECh+var_DC], 0
		mov	eax, [esp+0ECh+var_70]
		mov	[esp+0ECh+var_E0], eax
		mov	eax, [esp+0ECh+var_78]
		mov	[esp+0ECh+var_E4], eax
		lea	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_E8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_init_gen_str
		xor	ebx, ebx
		test	eax, eax
		mov	edx, [esp+0ECh+var_94]
		jz	loc_40771D
		mov	eax, [esp+0ECh+var_A8]
		test	eax, eax
		jz	short loc_4076EE
		mov	[esp+0ECh+var_94], edx
		mov	[esp+0ECh+var_88], esi
		mov	edi, [esp+0ECh+var_A8]
		jmp	short loc_4076DA
; ---------------------------------------------------------------------------
		align 10h

loc_4076B0:				; CODE XREF: _dgst_main+754j
		mov	[esp+0ECh+var_E8], ebx
		mov	[esp+0ECh+var_EC], edi
		call	_sk_value
		mov	esi, eax
		mov	[esp+0ECh+var_E8], eax
		mov	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_EC], eax
		call	_pkey_ctrl_string
		test	eax, eax
		jle	loc_408003
		inc	ebx

loc_4076DA:				; CODE XREF: _dgst_main+71Bj
		mov	[esp+0ECh+var_EC], edi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_4076B0
		mov	edx, [esp+0ECh+var_94]
		mov	esi, [esp+0ECh+var_88]

loc_4076EE:				; CODE XREF: _dgst_main+70Dj
		mov	[esp+0ECh+var_94], edx
		lea	eax, [esp+0ECh+var_54]
		mov	[esp+0ECh+var_E8], eax
		mov	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_EC], eax
		call	_EVP_PKEY_keygen
		test	eax, eax
		mov	edx, [esp+0ECh+var_94]
		jle	loc_408264
		mov	ebx, 1

loc_40771D:				; CODE XREF: _dgst_main+701j
					; _dgst_main+10A5j
		mov	eax, [esp+0ECh+var_48]
		test	eax, eax
		jz	short loc_407738
		mov	[esp+0ECh+var_94], edx
		mov	[esp+0ECh+var_EC], eax
		call	_EVP_PKEY_CTX_free
		mov	edx, [esp+0ECh+var_94]

loc_407738:				; CODE XREF: _dgst_main+796j
		test	ebx, ebx
		jnz	loc_407991
		xor	edi, edi
		mov	bl, 1
		jmp	loc_40738A
; ---------------------------------------------------------------------------

loc_407749:				; CODE XREF: _dgst_main+50Ej
		dec	edx
		jz	loc_407D56
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_94], eax
		add	ebp, 4
		mov	[esp+0ECh+var_8C], 1
		mov	[esp+0ECh+var_6C], 1
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_407772:				; CODE XREF: _dgst_main+2CAj
					; _dgst_main+2D6j
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_ERR_print_errors
		mov	[esp+0ECh+var_E8], 2000h
		mov	ebx, [esp+0ECh+var_A0]
		mov	[esp+0ECh+var_EC], ebx
		call	_OPENSSL_cleanse
		mov	[esp+0ECh+var_EC], ebx
		call	_CRYPTO_free
		mov	esi, [esp+0ECh+var_9C]
		test	esi, esi
		jz	loc_407033
		mov	ebx, 1
		xor	edi, edi
		mov	[esp+0ECh+var_AC], 0
		jmp	loc_4073A6
; ---------------------------------------------------------------------------

loc_4077BB:				; CODE XREF: _dgst_main+29Cj
		mov	[esp+0ECh+var_E4], eax
		mov	[esp+0ECh+var_E8], offset aUnknownOptio_1 ; "unknown option '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aOptionsAre ;	"options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aCToOutputTheDi ; "-c		     to	output the digest wi"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aRToOutputTheDi ; "-r		     to	output the digest in"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aDToOutputDebug ; "-d		     to	output debug info\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aHexOutputAsHex ; "-hex	     output as hex dump\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aBinaryOutputIn ; "-binary	     output in binary form\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aHmacArgSetTheH ; "-hmac arg	     set the HMAC key to arg"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aNonFipsAllowAl ; "-non-fips-allow allow use of non FIPS d"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aSignFileSignDi ; "-sign   file    sign digest using priva"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aVerifyFileVeri ; "-verify file    verify a signature	usin"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aPrverifyFileVe ; "-prverify file  verify a signature	usin"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aKeyformArgKe_0 ; "-keyform arg    key file format (PEM or"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aOutFilenameOut ; "-out filename   output to filename	rath"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aSignatureFileS ; "-signature	file signature to verify\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aSigoptNmVSigna ; "-sigopt nm:v    signature parameter\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aHmacKeyCreateH ; "-hmac key	     create hashed MAC with "...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aMacAlgorithmCr ; "-mac algorithm  create MAC	(not neccess"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aMacoptNmVMacAl ; "-macopt nm:v    MAC algorithm parameter"...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aEngineEUseEn_1 ; "-engine e	     use engine	e, possibly "...
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_E8], eax
		mov	[esp+0ECh+var_EC], offset _list_md_fn_0
		call	_EVP_MD_do_all_sorted
		jmp	loc_407015
; ---------------------------------------------------------------------------

loc_40797D:				; CODE XREF: _dgst_main+32Dj
		xor	eax, eax
		mov	ecx, [esp+0ECh+var_94]
		test	ecx, ecx
		setnz	al
		mov	[esp+0ECh+var_90], eax
		jmp	loc_4072C3
; ---------------------------------------------------------------------------

loc_407991:				; CODE XREF: _dgst_main+6B4j
					; _dgst_main+7AAj
		mov	eax, [esp+0ECh+var_60]
		test	eax, eax
		jnz	loc_407FBC

loc_4079A0:				; CODE XREF: _dgst_main+106Ej
		cmp	byte ptr [esp+0ECh+var_98], 0
		jz	loc_407EC7
		mov	[esp+0ECh+var_98], edx
		mov	[esp+0ECh+var_E0], 0FFFFFFFFh
		mov	eax, [esp+0ECh+var_74]
		mov	[esp+0ECh+var_E4], eax
		mov	eax, [esp+0ECh+var_70]
		mov	[esp+0ECh+var_E8], eax
		mov	[esp+0ECh+var_EC], 357h
		call	_EVP_PKEY_new_mac_key
		mov	[esp+0ECh+var_54], eax
		test	eax, eax
		mov	edx, [esp+0ECh+var_98]
		jz	loc_407D7F

loc_4079E6:				; CODE XREF: _dgst_main+F40j
		mov	[esp+0ECh+var_98], edx
		mov	[esp+0ECh+var_4C], 0
		mov	[esp+0ECh+var_48], 0
		lea	eax, [esp+0ECh+var_4C]
		mov	[esp+0ECh+var_E0], eax
		mov	[esp+0ECh+var_E4], 0
		mov	[esp+0ECh+var_E8], 78h
		mov	[esp+0ECh+var_EC], ebp
		call	_BIO_ctrl
		test	eax, eax
		mov	edx, [esp+0ECh+var_98]
		jz	loc_407D5D
		mov	eax, [esp+0ECh+var_8C]
		test	eax, eax
		mov	[esp+0ECh+var_98], edx
		mov	eax, [esp+0ECh+var_54]
		mov	[esp+0ECh+var_DC], eax
		mov	[esp+0ECh+var_E0], 0
		mov	eax, [esp+0ECh+var_68]
		mov	[esp+0ECh+var_E4], eax
		lea	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_E8], eax
		mov	eax, [esp+0ECh+var_4C]
		mov	[esp+0ECh+var_EC], eax
		jz	loc_40803A
		call	_EVP_DigestVerifyInit
		mov	edx, [esp+0ECh+var_98]

loc_407A7B:				; CODE XREF: _dgst_main+10B3j
		test	eax, eax
		jz	loc_4080DC
		mov	eax, [esp+0ECh+var_A4]
		test	eax, eax
		jz	short loc_407ADE
		xor	ebx, ebx
		mov	[esp+0ECh+var_98], edx
		mov	[esp+0ECh+var_94], esi
		mov	esi, eax
		jmp	short loc_407ACA
; ---------------------------------------------------------------------------
		align 10h

loc_407AA0:				; CODE XREF: _dgst_main+B44j
		mov	[esp+0ECh+var_E8], ebx
		mov	[esp+0ECh+var_EC], esi
		call	_sk_value
		mov	edi, eax
		mov	[esp+0ECh+var_E8], eax
		mov	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_EC], eax
		call	_pkey_ctrl_string
		test	eax, eax
		jle	loc_4080A2
		inc	ebx

loc_407ACA:				; CODE XREF: _dgst_main+B07j
		mov	[esp+0ECh+var_EC], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_407AA0
		mov	edx, [esp+0ECh+var_98]
		mov	esi, [esp+0ECh+var_94]

loc_407ADE:				; CODE XREF: _dgst_main+AF9j
					; _dgst_main+F82j
		mov	eax, [esp+0ECh+var_7C]
		test	eax, eax
		jz	loc_4080CD
		mov	ebx, [esp+0ECh+var_54]
		test	ebx, ebx
		jz	loc_4080CD
		mov	[esp+0ECh+var_94], edx
		mov	[esp+0ECh+var_E8], offset aRb_2	; "rb"
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_new_file
		mov	ebx, eax
		mov	eax, [esp+0ECh+var_54]
		mov	[esp+0ECh+var_EC], eax
		call	_EVP_PKEY_size
		mov	[esp+0ECh+var_E4], 1BDh
		mov	[esp+0ECh+var_E8], offset aDgst_c ; "dgst.c"
		mov	[esp+0ECh+var_EC], eax
		mov	[esp+0ECh+var_98], eax
		call	_CRYPTO_malloc
		mov	edi, eax
		test	ebx, ebx
		mov	ecx, [esp+0ECh+var_98]
		mov	edx, [esp+0ECh+var_94]
		jz	loc_4082F8
		test	eax, eax
		jz	loc_408238
		mov	[esp+0ECh+var_98], edx
		mov	[esp+0ECh+var_E4], ecx
		mov	[esp+0ECh+var_E8], eax
		mov	[esp+0ECh+var_EC], ebx
		call	_BIO_read
		mov	[esp+0ECh+var_94], eax
		mov	[esp+0ECh+var_EC], ebx
		call	_BIO_free
		mov	ecx, [esp+0ECh+var_94]
		test	ecx, ecx
		mov	edx, [esp+0ECh+var_98]
		jle	loc_4082C4

loc_407B84:				; CODE XREF: _dgst_main+1147j
		mov	[esp+0ECh+var_98], edx
		mov	eax, [esp+0ECh+var_9C]
		mov	[esp+0ECh+var_E8], eax
		mov	[esp+0ECh+var_EC], ebp
		call	_BIO_push
		mov	[esp+0ECh+var_84], eax
		mov	edx, [esp+0ECh+var_68]
		test	edx, edx
		mov	edx, [esp+0ECh+var_98]
		jz	loc_408282

loc_407BAF:				; CODE XREF: _dgst_main+132Fj
		test	edx, edx
		jz	loc_4081A0
		mov	[esp+0ECh+var_48], 0
		mov	eax, [esp+0ECh+var_90]
		test	eax, eax
		jnz	loc_4080E9
		mov	eax, [esp+0ECh+var_54]
		test	eax, eax
		jz	short loc_407C24
		mov	[esp+0ECh+var_98], edx
		mov	[esp+0ECh+var_EC], eax
		call	_EVP_PKEY_get0_asn1
		test	eax, eax
		mov	edx, [esp+0ECh+var_98]
		jz	short loc_407C24
		mov	[esp+0ECh+var_D8], eax
		lea	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_DC], eax
		mov	[esp+0ECh+var_E0], 0
		mov	[esp+0ECh+var_E4], 0
		mov	[esp+0ECh+var_E8], 0
		mov	[esp+0ECh+var_EC], 0
		call	_EVP_PKEY_asn1_get0_info
		mov	edx, [esp+0ECh+var_98]

loc_407C24:				; CODE XREF: _dgst_main+C47j
					; _dgst_main+C5Bj
		mov	[esp+0ECh+var_98], edx
		mov	eax, [esp+0ECh+var_68]
		mov	[esp+0ECh+var_EC], eax
		call	_EVP_MD_type
		mov	[esp+0ECh+var_EC], eax
		call	_OBJ_nid2sn
		mov	[esp+0ECh+var_88], eax
		mov	edx, [esp+0ECh+var_98]

loc_407C47:				; CODE XREF: _dgst_main+1161j
		xor	ebx, ebx
		test	edx, edx
		jle	loc_40738A
		xor	eax, eax
		mov	[esp+0ECh+var_8C], edx
		mov	[esp+0ECh+var_98], ebx
		mov	[esp+0ECh+var_80], edi
		mov	edi, eax
		jmp	loc_407D01
; ---------------------------------------------------------------------------

loc_407C66:				; CODE XREF: _dgst_main+D99j
		mov	[esp+0ECh+var_C0], ebp
		mov	[esp+0ECh+var_C4], eax
		mov	eax, [esp+0ECh+var_88]
		mov	[esp+0ECh+var_C8], eax
		mov	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_CC], eax
		mov	eax, [esp+0ECh+var_94]
		mov	[esp+0ECh+var_D0], eax
		mov	eax, [esp+0ECh+var_80]
		mov	[esp+0ECh+var_D4], eax
		mov	eax, [esp+0ECh+var_54]
		mov	[esp+0ECh+var_D8], eax
		mov	eax, [esp+0ECh+var_90]
		mov	[esp+0ECh+var_DC], eax
		mov	eax, [esp+0ECh+var_B0]
		mov	[esp+0ECh+var_E0], eax
		mov	eax, [esp+0ECh+var_84]
		mov	[esp+0ECh+var_E4], eax
		mov	eax, [esp+0ECh+var_A0]
		mov	[esp+0ECh+var_E8], eax
		mov	eax, [esp+0ECh+var_AC]
		mov	[esp+0ECh+var_EC], eax
		call	_do_fp
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_407CD2
		mov	ebx, [esp+0ECh+var_98]

loc_407CD2:				; CODE XREF: _dgst_main+D3Cj
		mov	[esp+0ECh+var_E0], 0
		mov	[esp+0ECh+var_E4], 0
		mov	[esp+0ECh+var_E8], 1
		mov	[esp+0ECh+var_EC], ebp
		call	_BIO_ctrl
		mov	[esp+0ECh+var_98], ebx

loc_407CF6:				; CODE XREF: _dgst_main+DABj
		inc	edi
		cmp	edi, [esp+0ECh+var_8C]
		jz	loc_408095

loc_407D01:				; CODE XREF: _dgst_main+CD1j
		mov	eax, [esi+edi*4]
		mov	[esp+0ECh+var_E0], eax
		mov	[esp+0ECh+var_E4], 3
		mov	[esp+0ECh+var_E8], 6Ch
		mov	eax, [esp+0ECh+var_9C]
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_ctrl
		test	eax, eax
		mov	eax, [esi+edi*4]
		jg	loc_407C66
		mov	[esp+0ECh+var_EC], eax ; char *
		call	_perror
		inc	[esp+0ECh+var_98]
		jmp	short loc_407CF6
; ---------------------------------------------------------------------------

loc_407D3D:				; CODE XREF: _dgst_main+14A3j
		mov	[esp+0ECh+var_9C], edx
		call	_sk_new_null
		mov	[esp+0ECh+var_A8], eax
		test	eax, eax
		mov	edx, [esp+0ECh+var_9C]
		jnz	loc_408439

loc_407D56:				; CODE XREF: _dgst_main+249j
					; _dgst_main+451j ...
		mov	esi, ebp
		jmp	loc_407217
; ---------------------------------------------------------------------------

loc_407D5D:				; CODE XREF: _dgst_main+A99j
		mov	[esp+0ECh+var_E8], offset aErrorGettingCo ; "Error getting context\n"

loc_407D65:				; CODE XREF: _dgst_main+1154j
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_ERR_print_errors

loc_407D7F:				; CODE XREF: _dgst_main+6ACj
					; _dgst_main+A50j ...
		xor	edi, edi
		mov	ebx, 1
		jmp	loc_40738A
; ---------------------------------------------------------------------------

loc_407D8B:				; CODE XREF: _dgst_main+522j
		mov	edi, offset aSignature ; "-signature"
		mov	ecx, 0Bh
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_407DF0
		dec	edx
		jz	short loc_407D56
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_7C], eax
		add	ebp, 4
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_407DAD:				; CODE XREF: _dgst_main+669j
		mov	eax, [esp+0ECh+var_50]
		mov	[esp+0ECh+var_DC], eax
		mov	[esp+0ECh+var_E0], 0
		mov	eax, [esp+0ECh+var_64]
		mov	[esp+0ECh+var_E4], eax
		mov	eax, [esp+0ECh+var_94]
		mov	[esp+0ECh+var_E8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_load_key
		mov	[esp+0ECh+var_54], eax
		mov	edx, [esp+0ECh+var_88]
		jmp	loc_40763A
; ---------------------------------------------------------------------------

loc_407DF0:				; CODE XREF: _dgst_main+E09j
		mov	edi, offset aKeyform_0 ; "-keyform"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jnz	loc_408048
		dec	edx
		jz	loc_407D56
		mov	[esp+0ECh+var_9C], edx
		lea	ebx, [ebp+4]
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_EC], eax ; char *
		call	_str2fmt
		mov	[esp+0ECh+var_64], eax
		mov	ebp, ebx
		mov	edx, [esp+0ECh+var_9C]
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_407E2F:				; CODE XREF: _dgst_main+172j
					; _dgst_main+17Ej
		mov	esi, ebp
		mov	[esp+0ECh+var_60], 0
		mov	[esp+0ECh+var_78], 0
		mov	[esp+0ECh+var_74], 0
		mov	[esp+0ECh+var_88], 0
		mov	[esp+0ECh+var_8C], 0
		mov	[esp+0ECh+var_6C], 0
		mov	[esp+0ECh+var_90], 0FFFFFFFFh
		mov	[esp+0ECh+var_AC], 0
		mov	[esp+0ECh+var_7C], 0
		mov	[esp+0ECh+var_94], 0
		mov	[esp+0ECh+var_98], 0
		mov	[esp+0ECh+var_64], 3
		mov	[esp+0ECh+var_84], 0
		mov	[esp+0ECh+var_B0], 0
		mov	[esp+0ECh+var_70], 0
		mov	[esp+0ECh+var_A8], 0
		mov	[esp+0ECh+var_A4], 0
		jmp	loc_407223
; ---------------------------------------------------------------------------

loc_407EC7:				; CODE XREF: _dgst_main+A15j
		mov	eax, [esp+0ECh+var_54]
		test	eax, eax
		jnz	loc_4079E6
		mov	edi, [esp+0ECh+var_68]
		test	edi, edi
		jz	loc_408350

loc_407EE5:				; CODE XREF: _dgst_main+13D4j
		mov	[esp+0ECh+var_98], edx
		mov	eax, [esp+0ECh+var_68]
		mov	[esp+0ECh+var_E0], eax
		mov	[esp+0ECh+var_E4], 0
		mov	[esp+0ECh+var_E8], 6Fh
		mov	[esp+0ECh+var_EC], ebp
		call	_BIO_ctrl
		test	eax, eax
		mov	edx, [esp+0ECh+var_98]
		jnz	loc_407ADE
		lea	eax, [esp+0ECh+var_44]
		mov	[esp+0ECh+var_E4], eax
		mov	[esp+0ECh+var_E8], offset aErrorSettingDi ; "Error setting digest %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_ERR_print_errors
		xor	edi, edi
		mov	ebx, 1
		jmp	loc_40738A
; ---------------------------------------------------------------------------

loc_407F51:				; CODE XREF: _dgst_main+362j
		mov	[esp+0ECh+var_98], edx
		mov	[esp+0ECh+var_E8], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_new_fp
		mov	[esp+0ECh+var_AC], eax
		test	eax, eax
		mov	edx, [esp+0ECh+var_98]
		jnz	loc_40732F
		mov	eax, offset aStdout ; "(stdout)"

loc_407F82:				; CODE XREF: _dgst_main+13DDj
		mov	[esp+0ECh+var_E4], eax
		mov	[esp+0ECh+var_E8], offset aErrorOpeningOu ; "Error opening output file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_ERR_print_errors
		xor	edi, edi
		mov	[esp+0ECh+var_AC], 0
		mov	ebx, 1
		jmp	loc_40738A
; ---------------------------------------------------------------------------

loc_407FBC:				; CODE XREF: _dgst_main+A0Aj
		mov	[esp+0ECh+var_94], edx
		lea	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_E0], eax
		mov	[esp+0ECh+var_E4], 0
		mov	[esp+0ECh+var_E8], 78h
		mov	[esp+0ECh+var_EC], ebp
		call	_BIO_ctrl
		mov	[esp+0ECh+var_E8], 8
		mov	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_EC], eax
		call	_EVP_MD_CTX_set_flags
		mov	edx, [esp+0ECh+var_94]
		jmp	loc_4079A0
; ---------------------------------------------------------------------------

loc_408003:				; CODE XREF: _dgst_main+743j
		mov	edi, esi
		mov	esi, [esp+0ECh+var_88]
		mov	[esp+0ECh+var_E4], edi
		mov	[esp+0ECh+var_E8], offset aMacParameterEr ; "MAC parameter error \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf

loc_408022:				; CODE XREF: _dgst_main+12EDj
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		mov	edx, [esp+0ECh+var_94]
		jmp	loc_40771D
; ---------------------------------------------------------------------------

loc_40803A:				; CODE XREF: _dgst_main+ADCj
		call	_EVP_DigestSignInit
		mov	edx, [esp+0ECh+var_98]
		jmp	loc_407A7B
; ---------------------------------------------------------------------------

loc_408048:				; CODE XREF: _dgst_main+E6Ej
		mov	edi, offset aEngine_1 ;	"-engine"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jnz	loc_4080F6
		dec	edx
		jz	loc_407D56
		mov	[esp+0ECh+var_9C], edx
		lea	ebx, [ebp+4]
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_E4], 0
		mov	[esp+0ECh+var_E8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_setup_engine
		mov	[esp+0ECh+var_70], eax
		mov	ebp, ebx
		mov	edx, [esp+0ECh+var_9C]
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_408095:				; CODE XREF: _dgst_main+D6Bj
		mov	ebx, [esp+0ECh+var_98]
		mov	edi, [esp+0ECh+var_80]
		jmp	loc_40738A
; ---------------------------------------------------------------------------

loc_4080A2:				; CODE XREF: _dgst_main+B33j
		mov	[esp+0ECh+var_E4], edi
		mov	[esp+0ECh+var_E8], offset aParameterErr_0 ; "parameter error \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_ERR_print_errors
		jmp	loc_407D7F
; ---------------------------------------------------------------------------

loc_4080CD:				; CODE XREF: _dgst_main+B54j
					; _dgst_main+B63j
		mov	[esp+0ECh+var_94], 0
		xor	edi, edi
		jmp	loc_407B84
; ---------------------------------------------------------------------------

loc_4080DC:				; CODE XREF: _dgst_main+AEDj
		mov	[esp+0ECh+var_E8], offset aErrorSettingCo ; "Error setting context\n"
		jmp	loc_407D65
; ---------------------------------------------------------------------------

loc_4080E9:				; CODE XREF: _dgst_main+C38j
		mov	[esp+0ECh+var_88], 0
		jmp	loc_407C47
; ---------------------------------------------------------------------------

loc_4080F6:				; CODE XREF: _dgst_main+10C6j
		mov	edi, offset aHex ; "-hex"
		mov	ecx, 5
		mov	esi, ebx
		repe cmpsb
		jz	loc_40822B
		mov	edi, offset aBinary ; "-binary"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jz	loc_408329
		mov	edi, offset aD	; "-d"
		mov	esi, ebx
		mov	ecx, 3
		repe cmpsb
		jz	loc_408343
		mov	edi, offset aFipsFingerprin ; "-fips-fingerprint"
		mov	ecx, 12h
		mov	esi, ebx
		repe cmpsb
		jz	loc_408336
		mov	[esp+0ECh+var_9C], edx
		mov	[esp+0ECh+var_E8], offset aNonFipsAllow	; "-non-fips-allow"
		mov	[esp+0ECh+var_EC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0ECh+var_9C]
		jz	loc_4083A4
		mov	[esp+0ECh+var_E8], offset aHmac	; "-hmac"
		mov	[esp+0ECh+var_EC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0ECh+var_9C]
		jnz	loc_408372
		dec	edx
		jz	loc_407D56
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_74], eax
		add	ebp, 4
		jmp	loc_4071E9
; ---------------------------------------------------------------------------
		align 10h

loc_4081A0:				; CODE XREF: _dgst_main+C21j
		mov	eax, ds:__imp___iob
		mov	[esp+0ECh+var_E0], eax
		mov	[esp+0ECh+var_E4], 0
		mov	[esp+0ECh+var_E8], 6Ah
		mov	eax, [esp+0ECh+var_9C]
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_ctrl
		mov	[esp+0ECh+var_C0], ebp
		mov	[esp+0ECh+var_C4], offset aStdin_0 ; "stdin"
		mov	[esp+0ECh+var_C8], 0
		mov	[esp+0ECh+var_CC], 0
		mov	eax, [esp+0ECh+var_94]
		mov	[esp+0ECh+var_D0], eax
		mov	[esp+0ECh+var_D4], edi
		mov	eax, [esp+0ECh+var_54]
		mov	[esp+0ECh+var_D8], eax
		mov	eax, [esp+0ECh+var_90]
		mov	[esp+0ECh+var_DC], eax
		mov	eax, [esp+0ECh+var_B0]
		mov	[esp+0ECh+var_E0], eax
		mov	eax, [esp+0ECh+var_84]
		mov	[esp+0ECh+var_E4], eax
		mov	eax, [esp+0ECh+var_A0]
		mov	[esp+0ECh+var_E8], eax
		mov	eax, [esp+0ECh+var_AC]
		mov	[esp+0ECh+var_EC], eax
		call	_do_fp
		mov	ebx, eax
		jmp	loc_40738A
; ---------------------------------------------------------------------------

loc_40822B:				; CODE XREF: _dgst_main+1174j
		mov	[esp+0ECh+var_90], 0
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_408238:				; CODE XREF: _dgst_main+BBEj
		mov	[esp+0ECh+var_E8], offset aOutOfMemory_0 ; "Out	of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		jmp	loc_40738A
; ---------------------------------------------------------------------------

loc_408264:				; CODE XREF: _dgst_main+782j
		mov	[esp+0ECh+var_94], edx
		mov	[esp+0ECh+var_E8], offset aErrorGenerat_0 ; "Error generating key\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_puts
		jmp	loc_408022
; ---------------------------------------------------------------------------

loc_408282:				; CODE XREF: _dgst_main+C19j
		lea	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_E0], eax
		mov	[esp+0ECh+var_E4], 0
		mov	[esp+0ECh+var_E8], 78h
		mov	[esp+0ECh+var_EC], ebp
		call	_BIO_ctrl
		mov	eax, [esp+0ECh+var_48]
		mov	[esp+0ECh+var_EC], eax
		call	_EVP_MD_CTX_md
		mov	[esp+0ECh+var_68], eax
		mov	edx, [esp+0ECh+var_98]
		jmp	loc_407BAF
; ---------------------------------------------------------------------------

loc_4082C4:				; CODE XREF: _dgst_main+BEEj
		mov	eax, [esp+0ECh+var_7C]
		mov	[esp+0ECh+var_E4], eax
		mov	[esp+0ECh+var_E8], offset aErrorReadingSi ; "Error reading signature file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		jmp	loc_40738A
; ---------------------------------------------------------------------------

loc_4082F8:				; CODE XREF: _dgst_main+BB6j
		mov	eax, [esp+0ECh+var_7C]
		mov	[esp+0ECh+var_E4], eax
		mov	[esp+0ECh+var_E8], offset aErrorOpeningSi ; "Error opening signature file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0ECh+var_EC], eax
		call	_ERR_print_errors
		mov	bl, 1
		jmp	loc_40738A
; ---------------------------------------------------------------------------

loc_408329:				; CODE XREF: _dgst_main+1188j
		mov	[esp+0ECh+var_90], 1
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_408336:				; CODE XREF: _dgst_main+11B0j
		mov	[esp+0ECh+var_74], offset aEtaonrishdlcup ; "etaonrishdlcupfm"
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_408343:				; CODE XREF: _dgst_main+119Cj
		mov	[esp+0ECh+var_84], 1
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_408350:				; CODE XREF: _dgst_main+F4Fj
		mov	[esp+0ECh+var_98], edx
		call	_EVP_md5
		mov	[esp+0ECh+var_68], eax
		mov	edx, [esp+0ECh+var_98]
		jmp	loc_407EE5
; ---------------------------------------------------------------------------

loc_408369:				; CODE XREF: _dgst_main+399j
		mov	eax, [esp+0ECh+var_98]
		jmp	loc_407F82
; ---------------------------------------------------------------------------

loc_408372:				; CODE XREF: _dgst_main+11ECj
		mov	[esp+0ECh+var_9C], edx
		mov	[esp+0ECh+var_E8], offset aMac ; "-mac"
		mov	[esp+0ECh+var_EC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0ECh+var_9C]
		jnz	short loc_4083B4
		dec	edx
		jz	loc_407D56
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_78], eax
		add	ebp, 4
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_4083A4:				; CODE XREF: _dgst_main+11D0j
		mov	[esp+0ECh+var_60], 1
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_4083B4:				; CODE XREF: _dgst_main+13FCj
		mov	[esp+0ECh+var_9C], edx
		mov	[esp+0ECh+var_E8], offset aSigopt_0 ; "-sigopt"
		mov	[esp+0ECh+var_EC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0ECh+var_9C]
		jnz	short loc_40840B
		dec	edx
		jz	loc_407D56
		cmp	[esp+0ECh+var_A4], 0
		jz	short loc_40844D

loc_4083DE:				; CODE XREF: _dgst_main+14D0j
		mov	[esp+0ECh+var_9C], edx
		lea	esi, [ebp+4]
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_E8], eax
		mov	eax, [esp+0ECh+var_A4]

loc_4083F0:				; CODE XREF: _dgst_main+14BBj
		mov	[esp+0ECh+var_EC], eax
		call	_sk_push
		test	eax, eax
		mov	edx, [esp+0ECh+var_9C]
		jz	loc_407217
		mov	ebp, esi
		jmp	loc_4071E9
; ---------------------------------------------------------------------------

loc_40840B:				; CODE XREF: _dgst_main+143Ej
		mov	[esp+0ECh+var_9C], edx
		mov	[esp+0ECh+var_E8], offset aMacopt ; "-macopt"
		mov	[esp+0ECh+var_EC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0ECh+var_9C]
		jnz	short loc_40846D
		dec	edx
		jz	loc_407D56
		cmp	[esp+0ECh+var_A8], 0
		jz	loc_407D3D

loc_408439:				; CODE XREF: _dgst_main+DC0j
		mov	[esp+0ECh+var_9C], edx
		lea	esi, [ebp+4]
		mov	eax, [ebp+4]
		mov	[esp+0ECh+var_E8], eax
		mov	eax, [esp+0ECh+var_A8]
		jmp	short loc_4083F0
; ---------------------------------------------------------------------------

loc_40844D:				; CODE XREF: _dgst_main+144Cj
		mov	[esp+0ECh+var_9C], edx
		call	_sk_new_null
		mov	[esp+0ECh+var_A4], eax
		test	eax, eax
		mov	edx, [esp+0ECh+var_9C]
		jnz	loc_4083DE
		mov	esi, ebp
		jmp	loc_407217
; ---------------------------------------------------------------------------

loc_40846D:				; CODE XREF: _dgst_main+1495j
		mov	[esp+0ECh+var_9C], edx
		inc	ebx
		mov	[esp+0ECh+var_EC], ebx
		call	_EVP_get_digestbyname
		test	eax, eax
		mov	edx, [esp+0ECh+var_9C]
		jz	loc_407D56
		mov	[esp+0ECh+var_68], eax
		jmp	loc_4071E9
_dgst_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _dh_main
_dh_main	proc near		; DATA XREF: .data:00455058o

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_4088EE

loc_4084B5:				; CODE XREF: _dh_main+462j
					; _dh_main+493j
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_40889F
		mov	eax, [esp+6Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+6Ch+var_40], eax
		mov	eax, [esp+6Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+6Ch+arg_4]
		add	eax, 4
		mov	[esp+6Ch+var_44], 0
		mov	[esp+6Ch+var_48], 0
		mov	[esp+6Ch+var_4C], 0
		mov	[esp+6Ch+var_30], 0
		mov	[esp+6Ch+var_34], 0
		mov	[esp+6Ch+var_3C], 0
		mov	[esp+6Ch+var_50], 3
		mov	[esp+6Ch+var_54], 3
		mov	[esp+6Ch+var_38], 0
		test	ebp, ebp
		jg	loc_408685
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_408540:				; CODE XREF: _dh_main+1DFj
		call	_ERR_load_crypto_strings
		mov	[esp+6Ch+var_64], 0
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_68], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_setup_engine
		call	_BIO_s_file
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_new
		mov	ebx, eax
		call	_BIO_s_file
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_new
		mov	esi, eax
		test	ebx, ebx
		jz	loc_4089B0
		test	esi, esi
		jz	loc_408956
		mov	eax, [esp+6Ch+var_4C]
		test	eax, eax
		jz	loc_408A54
		mov	eax, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 3
		mov	[esp+6Ch+var_68], 6Ch
		mov	[esp+6Ch+var_6C], ebx
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_408998

loc_4085C4:				; CODE XREF: _dh_main+5D5j
		mov	eax, [esp+6Ch+var_48]
		test	eax, eax
		jz	loc_40896F
		mov	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 5
		mov	[esp+6Ch+var_68], 6Ch
		mov	[esp+6Ch+var_6C], esi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_408AA8

loc_4085F8:				; CODE XREF: _dh_main+4F3j
		cmp	[esp+6Ch+var_54], 1
		jz	loc_408A81
		cmp	[esp+6Ch+var_54], 3
		jz	loc_4089C9
		mov	[esp+6Ch+var_68], offset aBadInputForm_0 ; "bad	input format specified\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	ebp, 1
		xor	edi, edi

loc_40862A:				; CODE XREF: _dh_main+4CAj
					; _dh_main+50Bj ...
		mov	[esp+6Ch+var_6C], ebx
		call	_BIO_free

loc_408632:				; CODE XREF: _dh_main+524j
		test	esi, esi
		jz	short loc_40863E
		mov	[esp+6Ch+var_6C], esi
		call	_BIO_free_all

loc_40863E:				; CODE XREF: _dh_main+194j
		test	edi, edi
		jz	loc_4088A4
		mov	[esp+6Ch+var_6C], edi
		call	_DH_free
		mov	eax, ebp
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_408660:				; CODE XREF: _dh_main+1F5j
		dec	ebp
		jz	loc_4087B0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+6Ch+var_6C], eax ;	char *
		call	_str2fmt
		mov	[esp+6Ch+var_54], eax

loc_408679:				; CODE XREF: _dh_main+220j
					; _dh_main+251j ...
		dec	ebp
		lea	eax, [ebx+4]
		test	ebp, ebp
		jle	loc_408540

loc_408685:				; CODE XREF: _dh_main+8Fj
		mov	edx, [eax]
		mov	esi, edx
		mov	edi, offset aInform_1 ;	"-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_408660
		mov	edi, offset aOutform_0 ; "-outform"
		mov	esi, edx
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_4086D0
		dec	ebp
		jz	loc_4087B0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+6Ch+var_6C], eax ;	char *
		call	_str2fmt
		mov	[esp+6Ch+var_50], eax
		jmp	short loc_408679
; ---------------------------------------------------------------------------
		align 10h

loc_4086D0:				; CODE XREF: _dh_main+205j
		mov	edi, offset aIn_1 ; "-in"
		mov	ecx, 4
		mov	esi, edx
		repe cmpsb
		jnz	short loc_408700
		dec	ebp
		jz	loc_4087B0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+6Ch+var_4C], eax
		jmp	short loc_408679
; ---------------------------------------------------------------------------
		align 10h

loc_408700:				; CODE XREF: _dh_main+23Ej
		mov	edi, offset aOut_2 ; "-out"
		mov	ecx, 5
		mov	esi, edx
		repe cmpsb
		jnz	short loc_408730
		dec	ebp
		jz	loc_4087B0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+6Ch+var_48], eax
		jmp	loc_408679
; ---------------------------------------------------------------------------
		align 10h

loc_408730:				; CODE XREF: _dh_main+26Ej
		mov	edi, offset aEngine_2 ;	"-engine"
		mov	esi, edx
		mov	ecx, 8
		repe cmpsb
		jz	loc_4088B0
		mov	edi, offset aCheck ; "-check"
		mov	ecx, 7
		mov	esi, edx
		repe cmpsb
		jz	loc_4088D0
		mov	edi, offset aText_0 ; "-text"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jz	loc_4088DF
		mov	edi, offset aC	; "-C"
		mov	ecx, 3
		mov	esi, edx
		repe cmpsb
		jz	loc_408938
		mov	edi, offset aNoout_1 ; "-noout"
		mov	ecx, 7
		mov	esi, edx
		repe cmpsb
		jz	loc_408947
		mov	[esp+6Ch+var_64], edx
		mov	[esp+6Ch+var_68], offset aUnknownOptio_2 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		lea	esi, [esi+0]

loc_4087B0:				; CODE XREF: _dh_main+1C1j
					; _dh_main+208j ...
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSOptionsInfi_1 ; "%s [options] <infile >outfile\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aWhereOptions_1 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aInformArgInp_1 ; " -inform arg   input format	- one of DE"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aOutformArgOu_0 ; " -outform arg  output format - one of D"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aInArgInputFi_1 ; " -in arg	   input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aOutArgOutput_1 ; " -out arg	   output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aCheckCheckTheD ; " -check	   check the DH	parameters\"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aTextPrintAText ; " -text	   print a text	form of	the"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aCOutputCCode ; " -C		 Output	C code\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aNooutNoOutput	; " -noout	  no output\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aEngineEUseEn_2 ; " -engine e	   use engine e, possibly a"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf

loc_40889F:				; CODE XREF: _dh_main+27j
		mov	ebp, 1

loc_4088A4:				; CODE XREF: _dh_main+1A0j
		mov	eax, ebp
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4088B0:				; CODE XREF: _dh_main+29Ej
		dec	ebp
		jz	loc_4087B0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+6Ch+var_44], eax
		jmp	loc_408679
; ---------------------------------------------------------------------------
		align 10h

loc_4088D0:				; CODE XREF: _dh_main+2B2j
		mov	ebx, eax
		mov	[esp+6Ch+var_3C], 1
		jmp	loc_408679
; ---------------------------------------------------------------------------

loc_4088DF:				; CODE XREF: _dh_main+2C6j
		mov	ebx, eax
		mov	[esp+6Ch+var_38], 1
		jmp	loc_408679
; ---------------------------------------------------------------------------

loc_4088EE:				; CODE XREF: _dh_main+Fj
		call	_BIO_s_file
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_4084B5
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_64], 10h
		mov	[esp+6Ch+var_68], 6Ah
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_4084B5
; ---------------------------------------------------------------------------

loc_408938:				; CODE XREF: _dh_main+2DAj
		mov	ebx, eax
		mov	[esp+6Ch+var_30], 1
		jmp	loc_408679
; ---------------------------------------------------------------------------

loc_408947:				; CODE XREF: _dh_main+2EEj
		mov	ebx, eax
		mov	[esp+6Ch+var_34], 1
		jmp	loc_408679
; ---------------------------------------------------------------------------

loc_408956:				; CODE XREF: _dh_main+EAj
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_ERR_print_errors
		mov	ebp, 1
		xor	edi, edi
		jmp	loc_40862A
; ---------------------------------------------------------------------------

loc_40896F:				; CODE XREF: _dh_main+12Aj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 6Ah
		mov	[esp+6Ch+var_6C], esi
		call	_BIO_ctrl
		jmp	loc_4085F8
; ---------------------------------------------------------------------------

loc_408998:				; CODE XREF: _dh_main+11Ej
		mov	eax, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_6C], eax ;	char *
		call	_perror
		mov	ebp, 1
		xor	edi, edi
		jmp	loc_40862A
; ---------------------------------------------------------------------------

loc_4089B0:				; CODE XREF: _dh_main+E2j
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_ERR_print_errors
		mov	ebp, 1
		xor	edi, edi
		jmp	loc_408632
; ---------------------------------------------------------------------------

loc_4089C9:				; CODE XREF: _dh_main+168j
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	_PEM_read_bio_DHparams
		mov	edi, eax

loc_4089EB:				; CODE XREF: _dh_main+603j
		test	edi, edi
		jz	loc_408B56
		mov	eax, [esp+6Ch+var_38]
		test	eax, eax
		jnz	loc_408AC0

loc_4089FF:				; CODE XREF: _dh_main+62Cj
		mov	eax, [esp+6Ch+var_3C]
		test	eax, eax
		jnz	loc_408AD1

loc_408A0B:				; CODE XREF: _dh_main+69Fj
					; _dh_main+6B1j
		mov	eax, [esp+6Ch+var_30]
		test	eax, eax
		jnz	loc_408B82

loc_408A17:				; CODE XREF: _dh_main+8FBj
		mov	eax, [esp+6Ch+var_34]
		test	eax, eax
		jnz	short loc_408A7A
		cmp	[esp+6Ch+var_50], 1
		jz	loc_408DDA
		cmp	[esp+6Ch+var_50], 3
		jz	loc_408DB5
		mov	[esp+6Ch+var_68], offset aBadOutputFor_0 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	ebp, 1
		jmp	loc_40862A
; ---------------------------------------------------------------------------

loc_408A54:				; CODE XREF: _dh_main+F6j
		mov	eax, ds:__imp___iob
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 6Ah
		mov	[esp+6Ch+var_6C], ebx
		call	_BIO_ctrl
		jmp	loc_4085C4
; ---------------------------------------------------------------------------

loc_408A7A:				; CODE XREF: _dh_main+57Dj
					; _dh_main+927j
		xor	ebp, ebp
		jmp	loc_40862A
; ---------------------------------------------------------------------------

loc_408A81:				; CODE XREF: _dh_main+15Dj
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], ebx
		mov	[esp+6Ch+var_68], offset _d2i_DHparams
		mov	[esp+6Ch+var_6C], offset _DH_new
		call	_ASN1_d2i_bio
		mov	edi, eax
		jmp	loc_4089EB
; ---------------------------------------------------------------------------

loc_408AA8:				; CODE XREF: _dh_main+152j
		mov	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_6C], eax ;	char *
		call	_perror
		mov	ebp, 1
		xor	edi, edi
		jmp	loc_40862A
; ---------------------------------------------------------------------------

loc_408AC0:				; CODE XREF: _dh_main+559j
		mov	[esp+6Ch+var_68], edi
		mov	[esp+6Ch+var_6C], esi
		call	_DHparams_print
		jmp	loc_4089FF
; ---------------------------------------------------------------------------

loc_408AD1:				; CODE XREF: _dh_main+565j
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], edi
		call	_DH_check
		test	eax, eax
		jz	loc_408B6B
		mov	eax, [esp+6Ch+var_20]
		test	al, 1
		jz	short loc_408B01
		mov	[esp+6Ch+var_6C], offset aPValueIsNotPri ; "p value is not prime"
		call	_puts
		mov	eax, [esp+6Ch+var_20]

loc_408B01:				; CODE XREF: _dh_main+64Fj
		test	al, 2
		jz	short loc_408B15
		mov	[esp+6Ch+var_6C], offset aPValueIsNotASa ; "p value is not a safe prime"
		call	_puts
		mov	eax, [esp+6Ch+var_20]

loc_408B15:				; CODE XREF: _dh_main+663j
		test	al, 4
		jz	short loc_408B29
		mov	[esp+6Ch+var_6C], offset aUnableToCheckT ; "unable to check the	generator value"
		call	_puts
		mov	eax, [esp+6Ch+var_20]

loc_408B29:				; CODE XREF: _dh_main+677j
		test	al, 8
		jz	short loc_408B3D
		mov	[esp+6Ch+var_6C], offset aTheGValueIsNot ; "the	g value	is not a generator"
		call	_puts
		mov	eax, [esp+6Ch+var_20]

loc_408B3D:				; CODE XREF: _dh_main+68Bj
		test	eax, eax
		jnz	loc_408A0B
		mov	[esp+6Ch+var_6C], offset aDhParametersAp ; "DH parameters appear to be ok."
		call	_puts
		jmp	loc_408A0B
; ---------------------------------------------------------------------------

loc_408B56:				; CODE XREF: _dh_main+54Dj
		mov	[esp+6Ch+var_68], offset aUnableToLoadDh ; "unable to load DH parameters\n"

loc_408B5E:				; CODE XREF: _dh_main+935j
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf

loc_408B6B:				; CODE XREF: _dh_main+643j
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_ERR_print_errors
		mov	ebp, 1
		jmp	loc_40862A
; ---------------------------------------------------------------------------

loc_408B82:				; CODE XREF: _dh_main+571j
		mov	eax, [edi+8]
		mov	[esp+6Ch+var_6C], eax
		call	_BN_num_bits
		mov	ebp, eax
		mov	eax, [edi+8]
		mov	[esp+6Ch+var_6C], eax
		call	_BN_num_bits
		mov	[esp+6Ch+var_54], eax
		mov	[esp+6Ch+var_64], 10Dh
		mov	[esp+6Ch+var_68], offset aDh_c ; "dh.c"
		mov	eax, ebp
		add	eax, 7
		jns	short loc_408BB8
		lea	eax, [ebp+0Eh]

loc_408BB8:				; CODE XREF: _dh_main+713j
		sar	eax, 3
		mov	[esp+6Ch+var_6C], eax
		call	_CRYPTO_malloc
		mov	ebp, eax
		test	eax, eax
		jz	loc_408DA0
		mov	eax, [edi+8]
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], eax
		call	_BN_bn2bin
		mov	[esp+6Ch+var_4C], eax
		mov	edx, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], offset aStaticUnsign_0 ; "static unsigned char dh%d_p[]={"
		call	_printf
		mov	[esp+6Ch+var_20], 0
		xor	ecx, ecx
		mov	eax, [esp+6Ch+var_4C]
		test	eax, eax
		jg	short loc_408C37
		jmp	short loc_408C67
; ---------------------------------------------------------------------------
		align 10h

loc_408C10:				; CODE XREF: _dh_main+7B3j
					; _dh_main+7C5j
		xor	eax, eax
		mov	al, [ebp+ecx+0]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], offset a0x02x_1 ; "0x%02X,"
		call	_printf
		mov	eax, [esp+6Ch+var_20]
		lea	ecx, [eax+1]
		mov	[esp+6Ch+var_20], ecx
		cmp	[esp+6Ch+var_4C], ecx
		jle	short loc_408C67

loc_408C37:				; CODE XREF: _dh_main+764j
		mov	eax, 2AAAAAABh
		imul	ecx
		mov	eax, edx
		sar	eax, 1
		mov	edx, ecx
		sar	edx, 1Fh
		sub	eax, edx
		lea	edx, [eax+eax]
		add	eax, edx
		shl	eax, 2
		cmp	ecx, eax
		jnz	short loc_408C10
		mov	[esp+6Ch+var_6C], offset asc_45AA44 ; "\n\t"
		call	_printf
		mov	ecx, [esp+6Ch+var_20]
		jmp	short loc_408C10
; ---------------------------------------------------------------------------

loc_408C67:				; CODE XREF: _dh_main+766j
					; _dh_main+795j
		mov	[esp+6Ch+var_6C], offset asc_45AA1C ; "\n\t};"
		call	_puts
		mov	eax, [edi+0Ch]
		mov	[esp+6Ch+var_68], ebp
		mov	[esp+6Ch+var_6C], eax
		call	_BN_bn2bin
		mov	[esp+6Ch+var_4C], eax
		mov	edx, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], offset aStaticUnsign_1 ; "static unsigned char dh%d_g[]={"
		call	_printf
		mov	[esp+6Ch+var_20], 0
		xor	ecx, ecx
		mov	edx, [esp+6Ch+var_4C]
		test	edx, edx
		jg	short loc_408CD7
		jmp	short loc_408D07
; ---------------------------------------------------------------------------
		align 10h

loc_408CB0:				; CODE XREF: _dh_main+853j
					; _dh_main+865j
		xor	eax, eax
		mov	al, [ebp+ecx+0]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], offset a0x02x_1 ; "0x%02X,"
		call	_printf
		mov	eax, [esp+6Ch+var_20]
		lea	ecx, [eax+1]
		mov	[esp+6Ch+var_20], ecx
		cmp	[esp+6Ch+var_4C], ecx
		jle	short loc_408D07

loc_408CD7:				; CODE XREF: _dh_main+80Aj
		mov	eax, 2AAAAAABh
		imul	ecx
		mov	eax, edx
		sar	eax, 1
		mov	edx, ecx
		sar	edx, 1Fh
		sub	eax, edx
		lea	edx, [eax+eax]
		add	eax, edx
		shl	eax, 2
		cmp	ecx, eax
		jnz	short loc_408CB0
		mov	[esp+6Ch+var_6C], offset asc_45AA44 ; "\n\t"
		call	_printf
		mov	ecx, [esp+6Ch+var_20]
		jmp	short loc_408CB0
; ---------------------------------------------------------------------------

loc_408D07:				; CODE XREF: _dh_main+80Cj
					; _dh_main+835j
		mov	[esp+6Ch+var_6C], offset asc_45AA4F ; "\n\t};\n"
		call	_puts
		mov	eax, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], offset aDhGet_dhD ; "DH *get_dh%d()\n\t{\n"
		call	_printf
		mov	[esp+6Ch+var_6C], offset aDhDh ; "\tDH *dh;\n"
		call	_puts
		mov	[esp+6Ch+var_6C], offset aIfDhDh_newNull ; "\tif ((dh=DH_new())	== NULL) return(NUL"...
		call	_puts
		mov	eax, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], offset aDhPBn_bin2bnDh ; "\tdh->p=BN_bin2bn(dh%d_p,sizeof(dh%d_p)"...
		call	_printf
		mov	eax, [esp+6Ch+var_54]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], offset aDhGBn_bin2bnDh ; "\tdh->g=BN_bin2bn(dh%d_g,sizeof(dh%d_g)"...
		call	_printf
		mov	[esp+6Ch+var_6C], offset aIfDhPNullDhGNu ; "\tif ((dh->p == NULL) || (dh->g == NULL"...
		call	_puts
		mov	[esp+6Ch+var_6C], offset aReturnNull ; "\t\treturn(NULL);"
		call	_puts
		mov	[esp+6Ch+var_6C], offset aReturnDh ; "\treturn(dh);\n\t}"
		call	_puts
		mov	[esp+6Ch+var_6C], ebp
		call	_CRYPTO_free
		jmp	loc_408A17
; ---------------------------------------------------------------------------

loc_408DA0:				; CODE XREF: _dh_main+727j
		mov	[esp+6Ch+var_6C], offset aOpenssl_malloc ; "OPENSSL_malloc"
		call	_perror
		mov	bp, 1
		jmp	loc_40862A
; ---------------------------------------------------------------------------

loc_408DB5:				; CODE XREF: _dh_main+58Fj
		mov	[esp+6Ch+var_68], edi
		mov	[esp+6Ch+var_6C], esi
		call	_PEM_write_bio_DHparams
		mov	[esp+6Ch+var_20], eax

loc_408DC5:				; CODE XREF: _dh_main+952j
		test	eax, eax
		jnz	loc_408A7A
		mov	[esp+6Ch+var_68], offset aUnableToWriteD ; "unable to write DH parameters\n"
		jmp	loc_408B5E
; ---------------------------------------------------------------------------

loc_408DDA:				; CODE XREF: _dh_main+584j
		mov	[esp+6Ch+var_64], edi
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], offset _i2d_DHparams
		call	_ASN1_i2d_bio
		mov	[esp+6Ch+var_20], eax
		jmp	short loc_408DC5
_dh_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_dh_cb		proc near		; DATA XREF: _dhparam_main+11Bo

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], 2Ah
		test	eax, eax
		jnz	short loc_408E70
		mov	[esp+2Ch+var_10], 2Eh

loc_408E1A:				; CODE XREF: _dh_cb+7Aj _dh_cb+83j ...
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_24], 1
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_write
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0Bh
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_ctrl
		mov	eax, 1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_408E70:				; CODE XREF: _dh_cb+13j
		cmp	eax, 1
		jnz	short loc_408E80
		mov	[esp+2Ch+var_10], 2Bh
		jmp	short loc_408E1A
; ---------------------------------------------------------------------------
		align 10h

loc_408E80:				; CODE XREF: _dh_cb+73j
		cmp	eax, 2
		jz	short loc_408E1A
		cmp	eax, 3
		jnz	short loc_408E1A
		mov	[esp+2Ch+var_10], 0Ah
		jmp	short loc_408E1A
_dh_cb		endp

; ---------------------------------------------------------------------------
		jmp	short _dhparam_main
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _dhparam_main
_dhparam_main	proc near		; CODE XREF: .text:00408E91j
					; DATA XREF: .data:00455064o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	[esp+7Ch+var_2C], 0
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_40944E

loc_408EBD:				; CODE XREF: _dhparam_main+5C2j
					; _dhparam_main+5F3j
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_4091B0
		mov	eax, [esp+7Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+7Ch+var_44], eax
		mov	eax, [esp+7Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+7Ch+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+7Ch+var_4C], 0
		mov	[esp+7Ch+var_50], 0
		mov	[esp+7Ch+var_3C], 0
		mov	[esp+7Ch+var_54], 0
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_30], 0
		mov	[esp+7Ch+var_34], 0
		mov	[esp+7Ch+var_48], 0
		mov	[esp+7Ch+var_5C], 3
		mov	[esp+7Ch+var_60], 3
		mov	[esp+7Ch+var_40], 0
		mov	[esp+7Ch+var_38], 0
		test	ebp, ebp
		jg	loc_4090D5
		xchg	ax, ax

loc_408F60:				; CODE XREF: _dhparam_main+22Fj
		call	_ERR_load_crypto_strings
		mov	[esp+7Ch+var_74], 0
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_setup_engine
		mov	eax, [esp+7Ch+var_4C]
		test	eax, eax
		jz	loc_409610
		mov	eax, [esp+7Ch+var_2C]
		test	eax, eax
		jnz	short loc_408F9E
		mov	[esp+7Ch+var_2C], 800h

loc_408F9E:				; CODE XREF: _dhparam_main+F4j
		mov	ecx, [esp+7Ch+var_40]
		test	ecx, ecx
		jnz	loc_409747

loc_408FAA:				; CODE XREF: _dhparam_main+788j
					; _dhparam_main+7CEj
		mov	[esp+7Ch+var_28], 2
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_24], eax
		mov	[esp+7Ch+var_20], offset _dh_cb
		mov	[esp+7Ch+var_74], 1
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_app_RAND_load_file
		test	eax, eax
		jnz	loc_409498
		mov	esi, [esp+7Ch+var_3C]
		test	esi, esi
		jz	loc_409B9F

loc_408FEF:				; CODE XREF: _dhparam_main+604j
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_7C], eax
		call	_app_RAND_load_files
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aLdSemiRandomBy ; "%ld	semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf

loc_409014:				; CODE XREF: _dhparam_main+5FEj
					; _dhparam_main+D14j
		mov	ecx, [esp+7Ch+var_40]
		test	ecx, ecx
		jz	loc_4094A9
		call	_DSA_new
		mov	esi, eax
		mov	eax, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aGeneratingDsaP ; "Generating DSA parameters, %d bit long "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		test	esi, esi
		jz	short loc_409090
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_64], eax
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	eax, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	_DSA_generate_parameters_ex
		mov	[esp+7Ch+var_7C], esi
		test	eax, eax
		jnz	loc_40963F
		call	_DSA_free

loc_409090:				; CODE XREF: _dhparam_main+1A6j
					; _dhparam_main+7E5j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		jmp	loc_4091B2
; ---------------------------------------------------------------------------
		align 10h

loc_4090B0:				; CODE XREF: _dhparam_main+245j
		dec	ebp
		jz	loc_409290
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_str2fmt
		mov	[esp+7Ch+var_60], eax

loc_4090C9:				; CODE XREF: _dhparam_main+270j
					; _dhparam_main+2A1j ...
		lea	ebx, [esi+4]
		dec	ebp
		test	ebp, ebp
		jle	loc_408F60

loc_4090D5:				; CODE XREF: _dhparam_main+B8j
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aInform_2 ;	"-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_4090B0
		mov	edi, offset aOutform_1 ; "-outform"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_409120
		dec	ebp
		jz	loc_409290
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_str2fmt
		mov	[esp+7Ch+var_5C], eax
		jmp	short loc_4090C9
; ---------------------------------------------------------------------------
		align 10h

loc_409120:				; CODE XREF: _dhparam_main+255j
		mov	edi, offset aIn_2 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_409150
		dec	ebp
		jz	loc_409290
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_58], eax
		jmp	short loc_4090C9
; ---------------------------------------------------------------------------
		align 10h

loc_409150:				; CODE XREF: _dhparam_main+28Ej
		mov	edi, offset aOut_3 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_409180
		dec	ebp
		jz	loc_409290
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_54], eax
		jmp	loc_4090C9
; ---------------------------------------------------------------------------
		align 10h

loc_409180:				; CODE XREF: _dhparam_main+2BEj
		mov	edi, offset aEngine_3 ;	"-engine"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_4091D0
		dec	ebp
		jz	loc_409290
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_50], eax
		jmp	loc_4090C9
; ---------------------------------------------------------------------------
		align 10h

loc_4091B0:				; CODE XREF: _dhparam_main+2Fj
		xor	ebx, ebx

loc_4091B2:				; CODE XREF: _dhparam_main+1FFj
					; _dhparam_main+584j ...
		mov	ebp, 1

loc_4091B7:				; CODE XREF: _dhparam_main+74Aj
					; _dhparam_main+758j
		test	ebx, ebx
		jz	short loc_4091C3
		mov	[esp+7Ch+var_7C], ebx
		call	_DH_free

loc_4091C3:				; CODE XREF: _dhparam_main+319j
		mov	eax, ebp
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4091D0:				; CODE XREF: _dhparam_main+2EEj
		mov	edi, offset aCheck_0 ; "-check"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_409430
		mov	edi, offset aText_1 ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_40943F
		mov	edi, offset aDsaparam ;	"-dsaparam"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_4095FD
		mov	edi, offset aC_0 ; "-C"
		mov	ecx, 3
		mov	esi, eax
		repe cmpsb
		jz	loc_409630
		mov	edi, offset aNoout_2 ; "-noout"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_409AE3
		mov	edi, offset a2	; "-2"
		mov	ecx, 3
		mov	esi, eax
		repe cmpsb
		jz	loc_409B42
		mov	edi, offset a5	; "-5"
		mov	ecx, 3
		mov	esi, eax
		repe cmpsb
		jz	loc_409B66
		mov	edi, offset aRand_1 ; "-rand"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	loc_409C2A
		dec	ebp
		jz	short loc_409290
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_3C], eax
		jmp	loc_4090C9
; ---------------------------------------------------------------------------
		align 10h

loc_409290:				; CODE XREF: _dhparam_main+211j
					; _dhparam_main+258j ...
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aSOptionsNumbit ; "%s [options] [numbits]\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aWhereOptions_2 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInformArgInp_2 ; " -inform arg   input format	- one of DE"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOutformArgOu_1 ; " -outform arg  output format - one of D"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInArgInputFi_2 ; " -in arg	   input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOutArgOutput_2 ; " -out arg	   output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aDsaparamReadOr ; " -dsaparam	   read	or generate DSA	par"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aCheckCheckTh_0 ; " -check	   check the DH	parameters\"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aTextPrintATe_0 ; " -text	   print a text	form of	the"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aCOutputCCode_0 ; " -C		   Output C code\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset a2GenerateParam ; " -2		   generate parameters usin"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset a5GenerateParam ; " -5		   generate parameters usin"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aNumbitsNumberO ; " numbits	   number of bits in to	gen"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aEngineEUseEn_3 ; " -engine e	   use engine e, possibly a"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_70], 3Bh
		mov	[esp+7Ch+var_74], 3Bh
		mov	[esp+7Ch+var_78], offset aRandFileCfil_0 ; " -rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aLoadTheFileO_0 ; "		   - load the file (or the "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aTheRandomNum_0 ; "		   the random number genera"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aNooutNoOutpu_0 ; " -noout	   no output\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_4091B2
; ---------------------------------------------------------------------------
		align 10h

loc_409430:				; CODE XREF: _dhparam_main+33Ej
		mov	esi, ebx
		mov	[esp+7Ch+var_48], 1
		jmp	loc_4090C9
; ---------------------------------------------------------------------------

loc_40943F:				; CODE XREF: _dhparam_main+352j
		mov	esi, ebx
		mov	[esp+7Ch+var_38], 1
		jmp	loc_4090C9
; ---------------------------------------------------------------------------

loc_40944E:				; CODE XREF: _dhparam_main+17j
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_408EBD
		mov	edi, ds:__imp___iob
		lea	edx, [edi+40h]
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], 10h
		mov	[esp+7Ch+var_78], 6Ah
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_408EBD
; ---------------------------------------------------------------------------

loc_409498:				; CODE XREF: _dhparam_main+13Dj
		mov	ebx, [esp+7Ch+var_3C]
		test	ebx, ebx
		jz	loc_409014
		jmp	loc_408FEF
; ---------------------------------------------------------------------------

loc_4094A9:				; CODE XREF: _dhparam_main+17Aj
		call	_DH_new
		mov	ebx, eax
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_70], eax
		mov	eax, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aGeneratingDhPa ; "Generating DH parameters, %d bit long s"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aThisIsGoingToT ; "This is going to take a long time\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		test	ebx, ebx
		jz	loc_409656
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_70], eax
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	_DH_generate_parameters_ex
		test	eax, eax
		jz	loc_409656

loc_40951A:				; CODE XREF: _dhparam_main+7B0j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_app_RAND_write_file
		xor	edi, edi

loc_409531:				; CODE XREF: _dhparam_main+87Fj
					; _dhparam_main+8FEj
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_409AA6
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jz	loc_409AF2
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 5
		mov	[esp+7Ch+var_78], 6Ch
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_409B2C

loc_40957C:				; CODE XREF: _dhparam_main+C76j
		mov	eax, [esp+7Ch+var_38]
		test	eax, eax
		jnz	loc_409813

loc_409588:				; CODE XREF: _dhparam_main+97Fj
		mov	eax, [esp+7Ch+var_48]
		test	eax, eax
		jnz	loc_4097BE

loc_409594:				; CODE XREF: _dhparam_main+95Cj
					; _dhparam_main+96Ej
		mov	eax, [esp+7Ch+var_30]
		test	eax, eax
		jnz	loc_409824

loc_4095A0:				; CODE XREF: _dhparam_main+BD4j
		mov	ebp, [esp+7Ch+var_34]
		test	ebp, ebp
		jnz	loc_409740
		cmp	[esp+7Ch+var_5C], 1
		jz	loc_409B82
		cmp	[esp+7Ch+var_5C], 3
		jz	loc_409A79
		mov	[esp+7Ch+var_78], offset aBadOutputFor_1 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	ebp, 1

loc_4095DC:				; CODE XREF: _dhparam_main+8A2j
					; _dhparam_main+C18j ...
		test	edi, edi
		jz	short loc_4095E8

loc_4095E0:				; CODE XREF: _dhparam_main+89Bj
		mov	[esp+7Ch+var_7C], edi
		call	_BIO_free

loc_4095E8:				; CODE XREF: _dhparam_main+73Ej
		test	esi, esi
		jz	loc_4091B7
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_free_all
		jmp	loc_4091B7
; ---------------------------------------------------------------------------

loc_4095FD:				; CODE XREF: _dhparam_main+366j
		mov	esi, ebx
		mov	[esp+7Ch+var_40], 1
		jmp	loc_4090C9
; ---------------------------------------------------------------------------
		align 10h

loc_409610:				; CODE XREF: _dhparam_main+E8j
		mov	ebx, [esp+7Ch+var_40]
		test	ebx, ebx
		jnz	short loc_409668
		mov	ebp, [esp+7Ch+var_2C]
		test	ebp, ebp
		jz	short loc_409674
		mov	[esp+7Ch+var_4C], 2
		jmp	loc_408FAA
; ---------------------------------------------------------------------------
		align 10h

loc_409630:				; CODE XREF: _dhparam_main+37Aj
		mov	esi, ebx
		mov	[esp+7Ch+var_30], 1
		jmp	loc_4090C9
; ---------------------------------------------------------------------------

loc_40963F:				; CODE XREF: _dhparam_main+1E5j
		call	_DSA_dup_DH
		mov	ebx, eax
		mov	[esp+7Ch+var_7C], esi
		call	_DSA_free
		test	ebx, ebx
		jnz	loc_40951A

loc_409656:				; CODE XREF: _dhparam_main+64Cj
					; _dhparam_main+674j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		jmp	loc_4091B2
; ---------------------------------------------------------------------------

loc_409668:				; CODE XREF: _dhparam_main+776j
		mov	edi, [esp+7Ch+var_2C]
		test	edi, edi
		jnz	loc_408FAA

loc_409674:				; CODE XREF: _dhparam_main+77Ej
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_409090
		mov	edx, [esp+7Ch+var_58]
		test	edx, edx
		jz	loc_409ABD
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 3
		mov	[esp+7Ch+var_78], 6Ch
		mov	[esp+7Ch+var_7C], edi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_409B1B

loc_4096BF:				; CODE XREF: _dhparam_main+C3Ej
		mov	eax, [esp+7Ch+var_60]
		cmp	eax, 1
		jz	loc_409C5D
		cmp	eax, 3
		jnz	loc_409763
		mov	eax, [esp+7Ch+var_40]
		test	eax, eax
		jz	loc_40977A
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], edi
		call	_PEM_read_bio_DSAparams
		mov	esi, eax

loc_409703:				; CODE XREF: _dhparam_main+DE7j
		test	esi, esi
		jz	loc_409B75
		mov	[esp+7Ch+var_7C], esi
		call	_DSA_dup_DH
		mov	ebx, eax
		mov	[esp+7Ch+var_7C], esi
		call	_DSA_free
		test	ebx, ebx
		jnz	loc_409531

loc_409725:				; CODE XREF: _dhparam_main+919j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors

loc_409732:				; CODE XREF: _dhparam_main+8D8j
					; _dhparam_main+C87j
		mov	ebp, 1
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_4095E0
; ---------------------------------------------------------------------------

loc_409740:				; CODE XREF: _dhparam_main+706j
					; _dhparam_main+BEBj
		xor	ebp, ebp
		jmp	loc_4095DC
; ---------------------------------------------------------------------------

loc_409747:				; CODE XREF: _dhparam_main+104j
		mov	[esp+7Ch+var_78], offset aGeneratorMayNo ; "generator may not be chosen	for DSA	par"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_4091B2
; ---------------------------------------------------------------------------

loc_409763:				; CODE XREF: _dhparam_main+82Fj
		mov	[esp+7Ch+var_78], offset aBadInputForm_1 ; "bad	input format specified\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	short loc_409732
; ---------------------------------------------------------------------------

loc_40977A:				; CODE XREF: _dhparam_main+83Bj
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], edi
		call	_PEM_read_bio_DHparams
		mov	ebx, eax

loc_40979C:				; CODE XREF: _dhparam_main+E0Ej
		test	ebx, ebx
		jnz	loc_409531
		mov	[esp+7Ch+var_78], offset aUnableToLoad_0 ; "unable to load DH parameters\n"

loc_4097AC:				; CODE XREF: _dhparam_main+CDDj
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_409725
; ---------------------------------------------------------------------------

loc_4097BE:				; CODE XREF: _dhparam_main+6EEj
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	_DH_check
		test	eax, eax
		jz	loc_409AA6
		mov	eax, [esp+7Ch+var_28]
		test	al, 1
		jnz	loc_409C00

loc_4097E2:				; CODE XREF: _dhparam_main+D70j
		test	al, 2
		jnz	loc_409BEB

loc_4097EA:				; CODE XREF: _dhparam_main+D5Bj
		test	al, 4
		jnz	loc_409BD6

loc_4097F2:				; CODE XREF: _dhparam_main+D46j
		test	al, 8
		jnz	loc_409BC1

loc_4097FA:				; CODE XREF: _dhparam_main+D31j
		test	eax, eax
		jnz	loc_409594
		mov	[esp+7Ch+var_7C], offset aDhParameters_0 ; "DH parameters appear to be ok."
		call	_puts
		jmp	loc_409594
; ---------------------------------------------------------------------------

loc_409813:				; CODE XREF: _dhparam_main+6E2j
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], esi
		call	_DHparams_print
		jmp	loc_409588
; ---------------------------------------------------------------------------

loc_409824:				; CODE XREF: _dhparam_main+6FAj
		mov	eax, [ebx+8]
		mov	[esp+7Ch+var_7C], eax
		call	_BN_num_bits
		mov	ebp, eax
		mov	eax, [ebx+8]
		mov	[esp+7Ch+var_7C], eax
		call	_BN_num_bits
		mov	[esp+7Ch+var_60], eax
		mov	[esp+7Ch+var_74], 1C0h
		mov	[esp+7Ch+var_78], offset aDhparam_c ; "dhparam.c"
		mov	eax, ebp
		add	eax, 7
		js	loc_409BB9

loc_40985B:				; CODE XREF: _dhparam_main+D1Cj
		sar	eax, 3
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_malloc
		mov	ebp, eax
		test	eax, eax
		jz	loc_409C15
		mov	[esp+7Ch+var_7C], offset aIfndefHeader_d ; "#ifndef HEADER_DH_H\n#include <openssl/"...
		call	_puts
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset aDhGet_dhD_0 ;	"DH *get_dh%d()\n\t{\n"
		call	_printf
		mov	eax, [ebx+8]
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], eax
		call	_BN_bn2bin
		mov	[esp+7Ch+var_58], eax
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset aStaticUnsign_2 ; "\tstatic unsigned char dh%d_p[]={"
		call	_printf
		mov	[esp+7Ch+var_28], 0
		xor	ecx, ecx
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jle	short loc_409939
		mov	[esp+7Ch+var_54], ebx
		mov	ebx, [esp+7Ch+var_58]
		jmp	short loc_409905
; ---------------------------------------------------------------------------
		align 10h

loc_4098E0:				; CODE XREF: _dhparam_main+A81j
					; _dhparam_main+A93j
		xor	eax, eax
		mov	al, [ebp+ecx+0]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset a0x02x_2 ; "0x%02X,"
		call	_printf
		mov	eax, [esp+7Ch+var_28]
		lea	ecx, [eax+1]
		mov	[esp+7Ch+var_28], ecx
		cmp	ebx, ecx
		jle	short loc_409935

loc_409905:				; CODE XREF: _dhparam_main+A31j
		mov	eax, 2AAAAAABh
		imul	ecx
		mov	eax, edx
		sar	eax, 1
		mov	edx, ecx
		sar	edx, 1Fh
		sub	eax, edx
		lea	edx, [eax+eax]
		add	eax, edx
		shl	eax, 2
		cmp	ecx, eax
		jnz	short loc_4098E0
		mov	[esp+7Ch+var_7C], offset asc_45B1DD ; "\n\t\t"
		call	_printf
		mov	ecx, [esp+7Ch+var_28]
		jmp	short loc_4098E0
; ---------------------------------------------------------------------------

loc_409935:				; CODE XREF: _dhparam_main+A63j
		mov	ebx, [esp+7Ch+var_54]

loc_409939:				; CODE XREF: _dhparam_main+A27j
		mov	[esp+7Ch+var_7C], offset asc_45B1B5 ; "\n\t\t};"
		call	_puts
		mov	eax, [ebx+0Ch]
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], eax
		call	_BN_bn2bin
		mov	[esp+7Ch+var_58], eax
		mov	edx, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], offset aStaticUnsign_3 ; "\tstatic unsigned char dh%d_g[]={"
		call	_printf
		mov	[esp+7Ch+var_28], 0
		xor	ecx, ecx
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jle	short loc_4099E9
		mov	[esp+7Ch+var_54], ebx
		mov	ebx, [esp+7Ch+var_58]
		jmp	short loc_4099B5
; ---------------------------------------------------------------------------
		align 10h

loc_409990:				; CODE XREF: _dhparam_main+B31j
					; _dhparam_main+B43j
		xor	eax, eax
		mov	al, [ebp+ecx+0]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset a0x02x_2 ; "0x%02X,"
		call	_printf
		mov	eax, [esp+7Ch+var_28]
		lea	ecx, [eax+1]
		mov	[esp+7Ch+var_28], ecx
		cmp	ebx, ecx
		jle	short loc_4099E5

loc_4099B5:				; CODE XREF: _dhparam_main+AE6j
		mov	eax, 2AAAAAABh
		imul	ecx
		mov	eax, edx
		sar	eax, 1
		mov	edx, ecx
		sar	edx, 1Fh
		sub	eax, edx
		lea	edx, [eax+eax]
		add	eax, edx
		shl	eax, 2
		cmp	ecx, eax
		jnz	short loc_409990
		mov	[esp+7Ch+var_7C], offset asc_45B1DD ; "\n\t\t"
		call	_printf
		mov	ecx, [esp+7Ch+var_28]
		jmp	short loc_409990
; ---------------------------------------------------------------------------

loc_4099E5:				; CODE XREF: _dhparam_main+B13j
		mov	ebx, [esp+7Ch+var_54]

loc_4099E9:				; CODE XREF: _dhparam_main+ADCj
		mov	[esp+7Ch+var_7C], offset asc_45B1B5 ; "\n\t\t};"
		call	_puts
		mov	[esp+7Ch+var_7C], offset aDhDh_0 ; "\tDH *dh;\n"
		call	_puts
		mov	[esp+7Ch+var_7C], offset aIfDhDh_newNu_0 ; "\tif ((dh=DH_new())	== NULL) return(NUL"...
		call	_puts
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset aDhPBn_bin2bn_0 ; "\tdh->p=BN_bin2bn(dh%d_p,sizeof(dh%d_p)"...
		call	_printf
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset aDhGBn_bin2bn_0 ; "\tdh->g=BN_bin2bn(dh%d_g,sizeof(dh%d_g)"...
		call	_printf
		mov	[esp+7Ch+var_7C], offset aIfDhPNullDhG_0 ; "\tif ((dh->p == NULL) || (dh->g == NULL"...
		call	_puts
		mov	[esp+7Ch+var_7C], offset aDh_freeDhRetur ; "\t\t{ DH_free(dh); return(NULL); }"
		call	_puts
		mov	eax, [ebx+10h]
		test	eax, eax
		jnz	loc_409B51

loc_409A60:				; CODE XREF: _dhparam_main+CC1j
		mov	[esp+7Ch+var_7C], offset aReturnDh_0 ; "\treturn(dh);\n\t}"
		call	_puts
		mov	[esp+7Ch+var_7C], ebp
		call	_CRYPTO_free
		jmp	loc_4095A0
; ---------------------------------------------------------------------------

loc_409A79:				; CODE XREF: _dhparam_main+71Cj
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], esi
		call	_PEM_write_bio_DHparams
		mov	[esp+7Ch+var_28], eax

loc_409A89:				; CODE XREF: _dhparam_main+CFAj
		test	eax, eax
		jnz	loc_409740
		mov	[esp+7Ch+var_78], offset aUnableToWrit_1 ; "unable to write DH parameters\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf

loc_409AA6:				; CODE XREF: _dhparam_main+6A2j
					; _dhparam_main+930j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	ebp, 1
		jmp	loc_4095DC
; ---------------------------------------------------------------------------

loc_409ABD:				; CODE XREF: _dhparam_main+7F1j
		mov	eax, ds:__imp___iob
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 6Ah
		mov	[esp+7Ch+var_7C], edi
		call	_BIO_ctrl
		jmp	loc_4096BF
; ---------------------------------------------------------------------------

loc_409AE3:				; CODE XREF: _dhparam_main+38Ej
		mov	esi, ebx
		mov	[esp+7Ch+var_34], 1
		jmp	loc_4090C9
; ---------------------------------------------------------------------------

loc_409AF2:				; CODE XREF: _dhparam_main+6AEj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 6Ah
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_ctrl
		jmp	loc_40957C
; ---------------------------------------------------------------------------

loc_409B1B:				; CODE XREF: _dhparam_main+819j
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_perror
		jmp	loc_409732
; ---------------------------------------------------------------------------

loc_409B2C:				; CODE XREF: _dhparam_main+6D6j
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_perror
		mov	ebp, 1
		jmp	loc_4095DC
; ---------------------------------------------------------------------------

loc_409B42:				; CODE XREF: _dhparam_main+3A2j
		mov	esi, ebx
		mov	[esp+7Ch+var_4C], 2
		jmp	loc_4090C9
; ---------------------------------------------------------------------------

loc_409B51:				; CODE XREF: _dhparam_main+BBAj
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset aDhLengthLd ; "\tdh->length = %ld;\n"
		call	_printf
		jmp	loc_409A60
; ---------------------------------------------------------------------------

loc_409B66:				; CODE XREF: _dhparam_main+3B6j
		mov	esi, ebx
		mov	[esp+7Ch+var_4C], 5
		jmp	loc_4090C9
; ---------------------------------------------------------------------------

loc_409B75:				; CODE XREF: _dhparam_main+865j
		mov	[esp+7Ch+var_78], offset aUnableToLoadDs ; "unable to load DSA parameters\n"
		jmp	loc_4097AC
; ---------------------------------------------------------------------------

loc_409B82:				; CODE XREF: _dhparam_main+711j
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], offset _i2d_DHparams
		call	_ASN1_i2d_bio
		mov	[esp+7Ch+var_28], eax
		jmp	loc_409A89
; ---------------------------------------------------------------------------

loc_409B9F:				; CODE XREF: _dhparam_main+149j
		mov	[esp+7Ch+var_78], offset aWarningNotMuch ; "warning, not much extra random data, co"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_409014
; ---------------------------------------------------------------------------

loc_409BB9:				; CODE XREF: _dhparam_main+9B5j
		lea	eax, [ebp+0Eh]
		jmp	loc_40985B
; ---------------------------------------------------------------------------

loc_409BC1:				; CODE XREF: _dhparam_main+954j
		mov	[esp+7Ch+var_7C], offset aTheGValueIsN_0 ; "the	g value	is not a generator"
		call	_puts
		mov	eax, [esp+7Ch+var_28]
		jmp	loc_4097FA
; ---------------------------------------------------------------------------

loc_409BD6:				; CODE XREF: _dhparam_main+94Cj
		mov	[esp+7Ch+var_7C], offset aUnableToChec_0 ; "unable to check the	generator value"
		call	_puts
		mov	eax, [esp+7Ch+var_28]
		jmp	loc_4097F2
; ---------------------------------------------------------------------------

loc_409BEB:				; CODE XREF: _dhparam_main+944j
		mov	[esp+7Ch+var_7C], offset aPValueIsNotA_0 ; "p value is not a safe prime"
		call	_puts
		mov	eax, [esp+7Ch+var_28]
		jmp	loc_4097EA
; ---------------------------------------------------------------------------

loc_409C00:				; CODE XREF: _dhparam_main+93Cj
		mov	[esp+7Ch+var_7C], offset aPValueIsNotP_0 ; "p value is not prime"
		call	_puts
		mov	eax, [esp+7Ch+var_28]
		jmp	loc_4097E2
; ---------------------------------------------------------------------------

loc_409C15:				; CODE XREF: _dhparam_main+9CAj
		mov	[esp+7Ch+var_7C], offset aOpenssl_mall_0 ; "OPENSSL_malloc"
		call	_perror
		mov	bp, 1
		jmp	loc_4095DC
; ---------------------------------------------------------------------------

loc_409C2A:				; CODE XREF: _dhparam_main+3CAj
		lea	edi, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_74], edi
		mov	[esp+7Ch+var_78], offset aD_0 ;	"%d"
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_sscanf
		test	eax, eax
		jz	loc_409290
		mov	eax, [esp+7Ch+var_2C]
		test	eax, eax
		jle	loc_409290
		mov	esi, ebx
		jmp	loc_4090C9
; ---------------------------------------------------------------------------

loc_409C5D:				; CODE XREF: _dhparam_main+826j
		mov	edx, [esp+7Ch+var_40]
		test	edx, edx
		jz	short loc_409C8C
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], edi
		mov	[esp+7Ch+var_78], offset _d2i_DSAparams
		mov	[esp+7Ch+var_7C], offset _DSA_new
		call	_ASN1_d2i_bio
		mov	esi, eax
		jmp	loc_409703
; ---------------------------------------------------------------------------

loc_409C8C:				; CODE XREF: _dhparam_main+DC3j
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], edi
		mov	[esp+7Ch+var_78], offset _d2i_DHparams
		mov	[esp+7Ch+var_7C], offset _DH_new
		call	_ASN1_d2i_bio
		mov	ebx, eax
		jmp	loc_40979C
_dhparam_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_show_ciphers	proc near		; DATA XREF: _enc_main+6D6o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_4]
		mov	eax, [esp+1Ch+arg_0]
		mov	ebx, [eax+8]
		xor	eax, eax
		mov	al, [ebx]
		mov	[esp+1Ch+var_1C], eax ;	int
		call	ds:__imp__islower
		test	eax, eax
		jnz	short loc_409CF0

loc_409CE1:				; CODE XREF: _show_ciphers+8Aj
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_409CF0:				; CODE XREF: _show_ciphers+1Fj
		mov	[esp+1Ch+var_14], ebx
		mov	[esp+1Ch+var_18], offset a25s ;	"-%-25s"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	eax, ds:_n_36594
		inc	eax
		mov	ds:_n_36594, eax
		cmp	eax, 3
		jz	short loc_409D30
		mov	[esp+1Ch+arg_4], offset	asc_45B349 ; " "
		mov	[esp+1Ch+arg_0], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	_BIO_printf
; ---------------------------------------------------------------------------
		align 10h

loc_409D30:				; CODE XREF: _show_ciphers+52j
		mov	[esp+1Ch+var_18], offset asc_45B347 ; "\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	ds:_n_36594, 0
		jmp	short loc_409CE1
_show_ciphers	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl set_hex(char *, int, int)
		public _set_hex
_set_hex	proc near		; CODE XREF: _enc_main+8CDp
					; _enc_main+CB8p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, [esp+2Ch+arg_4]
		mov	ebp, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_2C], ebx ;	char *
		call	_strlen
		mov	edi, eax
		mov	[esp+2Ch+var_20], eax
		lea	eax, [ebp+ebp+0]
		cmp	edi, eax
		jg	loc_409EA0
		mov	edi, esi
		cmp	ebp, 4
		jnb	loc_409E70
		test	ebp, 2
		jnz	loc_409E50

loc_409D94:				; CODE XREF: _set_hex+13Fj
		and	ebp, 1
		jnz	loc_409E40

loc_409D9D:				; CODE XREF: _set_hex+F3j
					; _set_hex+10Bj
		mov	eax, [esp+2Ch+var_20]
		test	eax, eax
		jle	short loc_409E06
		mov	cl, [ebx]
		mov	byte ptr [ebx],	0
		test	cl, cl
		jz	short loc_409E06
		xor	eax, eax
		jmp	short loc_409DD5
; ---------------------------------------------------------------------------
		align 10h

loc_409DC0:				; CODE XREF: _set_hex+A3j
		or	[esi+ecx], dl
		inc	eax
		cmp	[esp+2Ch+var_20], eax
		jz	short loc_409E06

loc_409DCA:				; CODE XREF: _set_hex+B4j
		mov	cl, [ebx+eax]
		mov	byte ptr [ebx+eax], 0
		test	cl, cl
		jz	short loc_409E06

loc_409DD5:				; CODE XREF: _set_hex+60j
		lea	edx, [ecx-30h]
		cmp	dl, 9
		jbe	short loc_409DE8
		lea	edx, [ecx-41h]
		cmp	dl, 5
		ja	short loc_409E20
		lea	edx, [ecx-37h]

loc_409DE8:				; CODE XREF: _set_hex+8Bj _set_hex+DFj
		mov	ecx, eax
		shr	ecx, 1Fh
		add	ecx, eax
		sar	ecx, 1
		test	al, 1
		jnz	short loc_409DC0
		mov	edi, edx
		shl	edi, 4
		mov	edx, edi
		mov	[esi+ecx], dl
		inc	eax
		cmp	[esp+2Ch+var_20], eax
		jnz	short loc_409DCA

loc_409E06:				; CODE XREF: _set_hex+53j _set_hex+5Cj ...
		mov	eax, 1

loc_409E0B:				; CODE XREF: _set_hex+186j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_409E20:				; CODE XREF: _set_hex+93j
		lea	edx, [ecx-61h]
		cmp	dl, 5
		ja	loc_409EBF
		lea	edx, [ecx-57h]
		jmp	short loc_409DE8
; ---------------------------------------------------------------------------
		jmp	short loc_409E40
; ---------------------------------------------------------------------------
		align 10h

loc_409E40:				; CODE XREF: _set_hex+47j _set_hex+E1j ...
		mov	byte ptr [edi],	0
		jmp	loc_409D9D
; ---------------------------------------------------------------------------
		align 10h

loc_409E50:				; CODE XREF: _set_hex+3Ej
					; _set_hex+145j
		mov	word ptr [edi],	0
		add	edi, 2
		and	ebp, 1
		jz	loc_409D9D
		jmp	short loc_409E40
; ---------------------------------------------------------------------------
		align 10h

loc_409E70:				; CODE XREF: _set_hex+32j
		test	esi, 1
		jnz	short loc_409EE8

loc_409E78:				; CODE XREF: _set_hex+19Fj
		test	edi, 2
		jnz	short loc_409EDB

loc_409E80:				; CODE XREF: _set_hex+196j
		mov	ecx, ebp
		shr	ecx, 2
		xor	eax, eax
		rep stosd
		test	ebp, 2
		jz	loc_409D94
		jmp	short loc_409E50
; ---------------------------------------------------------------------------
		align 10h

loc_409EA0:				; CODE XREF: _set_hex+27j
		mov	[esp+2Ch+var_28], offset aHexStringIsToo ; "hex	string is too long\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_409EBF:				; CODE XREF: _set_hex+D6j
		mov	[esp+2Ch+var_28], offset aNonHexDigit ;	"non-hex digit\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_409E0B
; ---------------------------------------------------------------------------

loc_409EDB:				; CODE XREF: _set_hex+12Ej
		mov	word ptr [edi],	0
		add	edi, 2
		sub	ebp, 2
		jmp	short loc_409E80
; ---------------------------------------------------------------------------

loc_409EE8:				; CODE XREF: _set_hex+126j
		mov	byte ptr [esi],	0
		lea	edi, [esi+1]
		dec	ebp
		jmp	short loc_409E78
_set_hex	endp

; ---------------------------------------------------------------------------
		jmp	short _enc_main
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _enc_main
_enc_main	proc near		; CODE XREF: .text:00409EF1j
					; DATA XREF: _do_cmd+A3o ...

var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= byte ptr -12Ch
var_124		= dword	ptr -124h
var_11C		= dword	ptr -11Ch
var_10C		= dword	ptr -10Ch
var_E4		= dword	ptr -0E4h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1ACh
		mov	[esp+1BCh+var_134], 0
		mov	[esp+1BCh+var_130], 0
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_40A8A2

loc_409F2E:				; CODE XREF: _enc_main+9B6j
					; _enc_main+9E7j
		mov	[esp+1BCh+var_1B8], 0
		mov	[esp+1BCh+var_1BC], ebx
		call	_load_config
		test	eax, eax
		jnz	short loc_409F80

loc_409F42:				; CODE XREF: _enc_main+2A8j
					; _enc_main+6FFj ...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_ERR_print_errors

loc_409F4F:				; CODE XREF: _enc_main+123Fj
		mov	ebp, 1

loc_409F54:				; CODE XREF: _enc_main+979j
					; _enc_main+987j
		mov	eax, [esp+1BCh+var_134]
		test	eax, eax
		jz	short loc_409F67
		mov	[esp+1BCh+var_1BC], eax
		call	_CRYPTO_free

loc_409F67:				; CODE XREF: _enc_main+5Dj
		mov	eax, ebp
		add	esp, 1ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_409F80:				; CODE XREF: _enc_main+40j
		mov	eax, [esp+1BCh+arg_4]
		mov	eax, [eax]
		mov	[esp+1BCh+var_1B4], 28h	; int
		lea	ebx, [esp+1BCh+var_10C]
		mov	[esp+1BCh+var_1B8], ebx	; int
		mov	[esp+1BCh+var_1BC], eax	; char *
		call	_program_name
		mov	edi, offset aBase64 ; "base64"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jz	loc_40A1B0
		mov	[esp+1BCh+var_1BC], ebx
		call	_EVP_get_cipherbyname
		mov	[esp+1BCh+var_180], eax
		test	eax, eax
		jz	loc_40A9D6

loc_409FCC:				; CODE XREF: _enc_main+AE4j
		mov	[esp+1BCh+var_16C], 0

loc_409FD4:				; CODE XREF: _enc_main+2C4j
		mov	eax, [esp+1BCh+arg_0]
		lea	edx, [eax-1]
		mov	eax, [esp+1BCh+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+1BCh+var_148], 0
		mov	[esp+1BCh+var_184], 0
		mov	[esp+1BCh+var_18C], 0
		mov	[esp+1BCh+var_190], 0
		mov	[esp+1BCh+var_160], 0
		mov	[esp+1BCh+var_14C], 0
		mov	[esp+1BCh+var_164], 0
		mov	[esp+1BCh+var_168], 0
		mov	[esp+1BCh+var_194], 1
		mov	[esp+1BCh+var_174], 0
		mov	[esp+1BCh+var_150], 0
		mov	[esp+1BCh+var_15C], 0
		mov	[esp+1BCh+var_158], 0
		mov	[esp+1BCh+var_188], 0
		mov	[esp+1BCh+var_178], 0
		mov	[esp+1BCh+var_154], 0
		mov	[esp+1BCh+var_170], 0
		mov	[esp+1BCh+var_17C], 0
		test	edx, edx
		jg	short loc_40A0AD
		jmp	short loc_40A0CF
; ---------------------------------------------------------------------------
		align 10h

loc_40A080:				; CODE XREF: _enc_main+1BDj
		mov	edi, offset aIn_26 ; "-in"
		mov	esi, ebp
		mov	ecx, 4
		repe cmpsb
		jnz	loc_40A1D0
		dec	edx
		jz	loc_40A3D3
		mov	eax, [ebx+4]
		mov	[esp+1BCh+var_190], eax
		add	ebx, 4

loc_40A0A5:				; CODE XREF: _enc_main+2F1j
					; _enc_main+321j ...
		dec	edx
		add	ebx, 4
		test	edx, edx
		jle	short loc_40A0CF

loc_40A0AD:				; CODE XREF: _enc_main+17Aj
					; _enc_main+1CDj
		mov	ebp, [ebx]
		mov	esi, ebp
		mov	edi, offset aE	; "-e"
		mov	ecx, 3
		repe cmpsb
		jnz	short loc_40A080
		mov	[esp+1BCh+var_194], 1
		dec	edx
		add	ebx, 4
		test	edx, edx
		jg	short loc_40A0AD

loc_40A0CF:				; CODE XREF: _enc_main+17Cj
					; _enc_main+1ABj
		mov	[esp+1BCh+var_1B4], 0
		mov	eax, [esp+1BCh+var_184]
		mov	[esp+1BCh+var_1B8], eax
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_setup_engine
		mov	eax, [esp+1BCh+var_180]
		test	eax, eax
		jz	short loc_40A123
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CIPHER_flags
		test	eax, 200000h
		jnz	loc_40A944
		mov	eax, [esp+1BCh+var_180]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CIPHER_flags
		and	eax, 0F0007h
		cmp	eax, 10001h
		jz	loc_40AABB

loc_40A123:				; CODE XREF: _enc_main+1F2j
		mov	eax, [esp+1BCh+var_174]
		test	eax, eax
		jz	loc_40A938
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_get_digestbyname
		mov	ebp, eax
		test	eax, eax
		jz	loc_40B090

loc_40A141:				; CODE XREF: _enc_main+A3Fj
		mov	eax, [esp+1BCh+var_17C]
		test	eax, eax
		jz	loc_40AF19
		mov	dl, [eax]
		xor	ebx, ebx
		test	dl, dl
		jnz	short loc_40A174
		jmp	loc_40A60B
; ---------------------------------------------------------------------------
		align 10h

loc_40A160:				; CODE XREF: _enc_main+27Ej
		lea	edx, [ebx+ebx*4]
		add	edx, edx
		lea	ebx, [ecx+edx-30h]

loc_40A169:				; CODE XREF: _enc_main+283j
		inc	eax
		mov	dl, [eax]
		test	dl, dl
		jz	loc_40A88C

loc_40A174:				; CODE XREF: _enc_main+253j
		xor	ecx, ecx
		mov	cl, dl
		lea	esi, [ecx-30h]
		cmp	esi, 9
		jbe	short loc_40A160
		cmp	dl, 6Bh
		jnz	short loc_40A169
		mov	[esp+1BCh+var_17C], eax
		cmp	byte ptr [eax+1], 0
		jz	loc_40A604
		mov	[esp+1BCh+var_1B8], offset aInvalidBufsize ; "invalid 'bufsize' specified.\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		jmp	loc_409F42
; ---------------------------------------------------------------------------
		align 10h

loc_40A1B0:				; CODE XREF: _enc_main+B2j
		mov	[esp+1BCh+var_1BC], ebx
		call	_EVP_get_cipherbyname
		mov	[esp+1BCh+var_180], eax
		mov	[esp+1BCh+var_16C], 1
		jmp	loc_409FD4
; ---------------------------------------------------------------------------
		align 10h

loc_40A1D0:				; CODE XREF: _enc_main+18Ej
		mov	edi, offset aOut_4 ; "-out"
		mov	ecx, 5
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_40A200
		dec	edx
		jz	loc_40A3D3
		mov	eax, [ebx+4]
		mov	[esp+1BCh+var_18C], eax
		add	ebx, 4
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------
		align 10h

loc_40A200:				; CODE XREF: _enc_main+2DEj
		mov	edi, offset aPass ; "-pass"
		mov	ecx, 6
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_40A230
		dec	edx
		jz	loc_40A3D3
		mov	eax, [ebx+4]
		mov	[esp+1BCh+var_188], eax
		add	ebx, 4
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------
		align 10h

loc_40A230:				; CODE XREF: _enc_main+30Ej
		mov	edi, offset aEngine_4 ;	"-engine"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_40A260
		dec	edx
		jz	loc_40A3D3
		mov	eax, [ebx+4]
		mov	[esp+1BCh+var_184], eax
		add	ebx, 4
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------
		align 10h

loc_40A260:				; CODE XREF: _enc_main+33Ej
		mov	edi, offset aD_1 ; "-d"
		mov	esi, ebp
		mov	ecx, 3
		repe cmpsb
		jz	loc_40A380
		mov	edi, offset aP	; "-p"
		mov	esi, ebp
		mov	ecx, 3
		repe cmpsb
		jz	loc_40A895
		mov	edi, offset aV	; "-v"
		mov	esi, ebp
		mov	ecx, 3
		repe cmpsb
		jz	loc_40A92B
		mov	edi, offset aNopad ; "-nopad"
		mov	ecx, 7
		mov	esi, ebp
		repe cmpsb
		jz	loc_40AA08
		mov	edi, offset aSalt ; "-salt"
		mov	ecx, 6
		mov	esi, ebp
		repe cmpsb
		jz	loc_40AF0C
		mov	edi, offset aNosalt ; "-nosalt"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jz	loc_40B240
		mov	edi, offset aDebug ; "-debug"
		mov	ecx, 7
		mov	esi, ebp
		repe cmpsb
		jz	loc_40B2EF
		mov	edi, offset aP_0 ; "-P"
		mov	esi, ebp
		mov	ecx, 3
		repe cmpsb
		jz	loc_40B48A
		mov	edi, offset aA	; "-A"
		mov	esi, ebp
		mov	ecx, 3
		repe cmpsb
		jz	loc_40B47D
		mov	edi, offset aA_0 ; "-a"
		mov	esi, ebp
		mov	ecx, 3
		repe cmpsb
		jz	loc_40B470
		mov	[esp+1BCh+var_144], edx
		mov	[esp+1BCh+var_1B8], offset aBase64_0 ; "-base64"
		mov	[esp+1BCh+var_1BC], ebp	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+1BCh+var_144]
		jz	loc_40B470
		mov	[esp+1BCh+var_1B8], offset aBufsize ; "-bufsize"
		mov	[esp+1BCh+var_1BC], ebp	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+1BCh+var_144]
		jnz	loc_40B497
		dec	edx
		jz	short loc_40A3D3
		mov	eax, [ebx+4]
		mov	[esp+1BCh+var_17C], eax
		add	ebx, 4
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------
		align 10h

loc_40A380:				; CODE XREF: _enc_main+36Ej
		mov	[esp+1BCh+var_194], 0
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40A38D:				; CODE XREF: _enc_main+16B5j
					; _enc_main+16BEj
		mov	ds:_buf_36646[ecx], 0
		test	ecx, ecx
		jz	short loc_40A3BE
		sub	eax, 2
		mov	cl, ds:_buf_36646[eax]
		cmp	cl, 0Ah
		jz	short loc_40A3AF
		cmp	cl, 0Dh
		jnz	loc_40B5C4

loc_40A3AF:				; CODE XREF: _enc_main+4A4j
		mov	ds:_buf_36646[eax], 0
		test	eax, eax
		jg	loc_40B5C4

loc_40A3BE:				; CODE XREF: _enc_main+496j
					; _enc_main+169Fj
		mov	[esp+1BCh+var_1B8], offset aZeroLengthPass ; "zero length password\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf

loc_40A3D3:				; CODE XREF: _enc_main+195j
					; _enc_main+2E1j ...
		mov	[esp+1BCh+var_1B8], offset aOptionsAre_0 ; "options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aInFile ; "-in <file>"
		mov	[esp+1BCh+var_1B8], offset a14sInputFile ; "%-14s input	file\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aOutFile ; "-out <file>"
		mov	[esp+1BCh+var_1B8], offset a14sOutputFile ; "%-14s output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aPassArg ; "-pass <arg>"
		mov	[esp+1BCh+var_1B8], offset a14sPassPhraseS ; "%-14s pass phrase	source\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aE ;	"-e"
		mov	[esp+1BCh+var_1B8], offset a14sEncrypt ; "%-14s	encrypt\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aD_1	; "-d"
		mov	[esp+1BCh+var_1B8], offset a14sDecrypt ; "%-14s	decrypt\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aABase64 ; "-a/-base64"
		mov	[esp+1BCh+var_1B8], offset a14sBase64Encod ; "%-14s base64 encode/decode, depending o"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aK ;	"-k"
		mov	[esp+1BCh+var_1B8], offset a14sPassphraseI ; "%-14s passphrase is the next argument\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aKfile ; "-kfile"
		mov	[esp+1BCh+var_1B8], offset a14sPassphras_0 ; "%-14s passphrase is the first line of t"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aMd ; "-md"
		mov	[esp+1BCh+var_1B8], offset a14sTheNextArgu ; "%-14s the	next argument is the md	to us"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset word_45B5DA
		mov	[esp+1BCh+var_1B8], offset a14sFromAPassph ; "%-14s   from a passphrase.  One of md2,"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aS_5	; "-S"
		mov	[esp+1BCh+var_1B8], offset a14sSaltInHexIs ; "%-14s salt in hex	is the next argument\"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aKIv	; "-K/-iv"
		mov	[esp+1BCh+var_1B8], offset a14sKeyIvInHexI ; "%-14s key/iv in hex is the next argumen"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aPp ; "-[pP]"
		mov	[esp+1BCh+var_1B8], offset a14sPrintTheIvK ; "%-14s print the iv/key (then exit	if -P"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aBufsizeN ; "-bufsize <n>"
		mov	[esp+1BCh+var_1B8], offset a14sBufferSize ; "%-14s buffer size\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aNopad ; "-nopad"
		mov	[esp+1BCh+var_1B8], offset a14sDisableStan ; "%-14s disable standard block padding\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B4], offset aEngineE_0 ;	"-engine e"
		mov	[esp+1BCh+var_1B8], offset a14sUseEngineEP ; "%-14s use	engine e, possibly a hardware"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	[esp+1BCh+var_1B8], offset aCipherTypes	; "Cipher Types\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], offset _show_ciphers
		mov	[esp+1BCh+var_1BC], 2
		call	_OBJ_NAME_do_all_sorted
		mov	[esp+1BCh+var_1B8], offset asc_45B347 ;	"\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		jmp	loc_409F42
; ---------------------------------------------------------------------------

loc_40A604:				; CODE XREF: _enc_main+28Dj
		shl	ebx, 0Ah
		inc	[esp+1BCh+var_17C]

loc_40A60B:				; CODE XREF: _enc_main+255j
					; _enc_main+990j
		mov	ecx, [esp+1BCh+var_16C]
		test	ecx, ecx
		jnz	loc_40A8EC
		mov	esi, 2AAAAAABh
		mov	eax, ebx
		imul	esi
		mov	esi, edx
		sar	esi, 3
		mov	eax, ebx
		sar	eax, 1Fh
		sub	esi, eax
		lea	ecx, [ebx+2]
		mov	edx, 55555556h
		mov	eax, ecx
		imul	edx
		sar	ecx, 1Fh
		sub	edx, ecx
		add	edx, edx
		lea	edi, [esi+edx+29h]
		add	edi, edi
		mov	[esp+1BCh+var_140], ebx

loc_40A649:				; CODE XREF: _enc_main+A26j
					; _enc_main+AD1j
		mov	edx, [esp+1BCh+var_170]
		test	edx, edx
		jnz	loc_40A9A2

loc_40A655:				; CODE XREF: _enc_main+ABFj
					; _enc_main+1026j
		mov	[esp+1BCh+var_1B4], 179h
		mov	[esp+1BCh+var_1B8], offset aEnc_c ; "enc.c"
		mov	[esp+1BCh+var_1BC], 200h
		call	_CRYPTO_malloc
		mov	ebx, eax
		mov	[esp+1BCh+var_184], eax
		mov	[esp+1BCh+var_1B4], 17Ah
		mov	[esp+1BCh+var_1B8], offset aEnc_c ; "enc.c"
		mov	[esp+1BCh+var_1BC], edi
		call	_CRYPTO_malloc
		mov	esi, eax
		test	eax, eax
		jz	loc_40B113
		test	ebx, ebx
		jz	loc_40A95E
		call	_BIO_s_file
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_new
		mov	ebx, eax
		mov	[esp+1BCh+var_144], eax
		call	_BIO_s_file
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_new
		mov	[esp+1BCh+var_174], eax
		test	ebx, ebx
		jz	loc_40AAD5
		test	eax, eax
		jz	loc_40AAD5
		mov	eax, [esp+1BCh+var_164]
		test	eax, eax
		jnz	loc_40AA6C

loc_40A6E1:				; CODE XREF: _enc_main+BB6j
		mov	eax, [esp+1BCh+var_190]
		test	eax, eax
		jz	loc_40AA15
		mov	eax, [esp+1BCh+var_190]
		mov	[esp+1BCh+var_1B0], eax
		mov	[esp+1BCh+var_1B4], 3
		mov	[esp+1BCh+var_1B8], 6Ch
		mov	eax, [esp+1BCh+var_144]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_40B1E3

loc_40A719:				; CODE XREF: _enc_main+B67j
		mov	eax, [esp+1BCh+var_178]
		test	eax, eax
		jz	loc_40AF2B

loc_40A725:				; CODE XREF: _enc_main+1080j
					; _enc_main+108Cj ...
		mov	edx, [esp+1BCh+var_18C]
		test	edx, edx
		jz	loc_40B0B2
		mov	eax, [esp+1BCh+var_18C]
		mov	[esp+1BCh+var_1B0], eax
		mov	[esp+1BCh+var_1B4], 5
		mov	[esp+1BCh+var_1B8], 6Ch
		mov	eax, [esp+1BCh+var_174]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_40B291

loc_40A75D:				; CODE XREF: _enc_main+11E0j
					; _enc_main+120Ej
		mov	eax, [esp+1BCh+var_16C]
		test	eax, eax
		jnz	loc_40AEB0
		mov	eax, [esp+1BCh+var_174]
		mov	[esp+1BCh+var_190], eax
		mov	eax, [esp+1BCh+var_144]
		mov	[esp+1BCh+var_18C], eax
		xor	edi, edi

loc_40A77B:				; CODE XREF: _enc_main+1007j
					; _enc_main+1314j
		mov	eax, [esp+1BCh+var_180]
		test	eax, eax
		jz	loc_40B163
		mov	ebx, [esp+1BCh+var_178]
		test	ebx, ebx
		jz	loc_40B4C9
		mov	ecx, [esp+1BCh+var_160]
		test	ecx, ecx
		jnz	loc_40AAF0
		mov	edx, [esp+1BCh+var_194]
		test	edx, edx
		jz	loc_40B17A
		mov	eax, [esp+1BCh+var_150]
		test	eax, eax
		jz	loc_40B360
		mov	[esp+1BCh+var_1B4], 8 ;	int
		lea	ebx, [esp+1BCh+var_124]
		mov	[esp+1BCh+var_1B8], ebx	; int
		mov	[esp+1BCh+var_1BC], eax	; char *
		call	_set_hex
		test	eax, eax
		jz	loc_40B2A7

loc_40A7DA:				; CODE XREF: _enc_main+1479j
		cmp	[esp+1BCh+var_168], 2
		jz	loc_40AAF2
		mov	[esp+1BCh+var_1B4], 8
		mov	[esp+1BCh+var_1B8], offset _magic_36602	; "Salted__"
		mov	eax, [esp+1BCh+var_190]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_write
		cmp	eax, 8
		jz	loc_40B441

loc_40A80A:				; CODE XREF: _enc_main+155Cj
		mov	[esp+1BCh+var_1B8], offset aErrorWriting_0 ; "error writing output file\n"

loc_40A812:				; CODE XREF: _enc_main+12AAj
					; _enc_main+12DEj ...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf

loc_40A81F:				; CODE XREF: _enc_main+FC1j
					; _enc_main+147Fj
		xor	ebx, ebx

loc_40A821:				; CODE XREF: _enc_main+CD6j
					; _enc_main+12F3j
		mov	ebp, 1

loc_40A826:				; CODE XREF: _enc_main+BEBj
					; _enc_main+F50j ...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_ERR_print_errors

loc_40A833:				; CODE XREF: _enc_main+125Ej
		mov	eax, [esp+1BCh+var_184]
		mov	[esp+1BCh+var_1BC], eax
		call	_CRYPTO_free
		test	esi, esi
		jz	short loc_40A84B

loc_40A843:				; CODE XREF: _enc_main+A9Dj
		mov	[esp+1BCh+var_1BC], esi
		call	_CRYPTO_free

loc_40A84B:				; CODE XREF: _enc_main+941j
		mov	eax, [esp+1BCh+var_144]
		test	eax, eax
		jz	short loc_40A85B
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_free

loc_40A85B:				; CODE XREF: _enc_main+951j
		mov	eax, [esp+1BCh+var_174]
		test	eax, eax
		jz	short loc_40A86B
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_free_all

loc_40A86B:				; CODE XREF: _enc_main+961j
		test	ebx, ebx
		jz	short loc_40A877
		mov	[esp+1BCh+var_1BC], ebx
		call	_BIO_free

loc_40A877:				; CODE XREF: _enc_main+96Dj
		test	edi, edi
		jz	loc_409F54
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_free
		jmp	loc_409F54
; ---------------------------------------------------------------------------

loc_40A88C:				; CODE XREF: _enc_main+26Ej
		mov	[esp+1BCh+var_17C], eax
		jmp	loc_40A60B
; ---------------------------------------------------------------------------

loc_40A895:				; CODE XREF: _enc_main+382j
		mov	[esp+1BCh+var_168], 1
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40A8A2:				; CODE XREF: _enc_main+28j
		call	_BIO_s_file
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_409F2E
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+1BCh+var_1B0], edx
		mov	[esp+1BCh+var_1B4], 10h
		mov	[esp+1BCh+var_1B8], 6Ah
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_409F2E
; ---------------------------------------------------------------------------

loc_40A8EC:				; CODE XREF: _enc_main+711j
		cmp	ebx, 4Fh
		jbe	loc_40A9C4
		lea	ecx, [ebx+2]
		mov	edx, 55555556h
		mov	eax, ecx
		imul	edx
		sar	ecx, 1Fh
		sub	edx, ecx
		lea	ecx, [edx+edx]
		mov	edx, 2AAAAAABh
		mov	eax, ebx
		imul	edx
		sar	edx, 3
		mov	eax, ebx
		sar	eax, 1Fh
		sub	edx, eax
		lea	edi, [ecx+edx+29h]
		add	edi, edi
		mov	[esp+1BCh+var_140], ebx
		jmp	loc_40A649
; ---------------------------------------------------------------------------

loc_40A92B:				; CODE XREF: _enc_main+396j
		mov	[esp+1BCh+var_170], 1
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40A938:				; CODE XREF: _enc_main+229j
		call	_EVP_md5
		mov	ebp, eax
		jmp	loc_40A141
; ---------------------------------------------------------------------------

loc_40A944:				; CODE XREF: _enc_main+201j
		mov	[esp+1BCh+var_1B8], offset aAeadCiphersNot ; "AEAD ciphers not supported by the	enc u"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		jmp	loc_409F42
; ---------------------------------------------------------------------------

loc_40A95E:				; CODE XREF: _enc_main+79Bj
		mov	[esp+1BCh+var_1B4], edi
		mov	[esp+1BCh+var_1B8], offset aOpenssl_mall_1 ; "OPENSSL_malloc failure %ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_ERR_print_errors
		mov	ebp, 1
		mov	[esp+1BCh+var_144], 0
		xor	edi, edi
		mov	[esp+1BCh+var_174], 0
		xor	ebx, ebx
		jmp	loc_40A843
; ---------------------------------------------------------------------------

loc_40A9A2:				; CODE XREF: _enc_main+74Fj
		mov	eax, [esp+1BCh+var_140]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], offset aBufsizeD ; "bufsize=%d\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		jmp	loc_40A655
; ---------------------------------------------------------------------------

loc_40A9C4:				; CODE XREF: _enc_main+9EFj
		mov	edi, 0C0h
		mov	[esp+1BCh+var_140], 50h
		jmp	loc_40A649
; ---------------------------------------------------------------------------

loc_40A9D6:				; CODE XREF: _enc_main+C6j
		mov	edi, offset aEnc ; "enc"
		mov	ecx, 4
		mov	esi, ebx
		repe cmpsb
		jz	loc_409FCC
		mov	[esp+1BCh+var_1B4], ebx
		mov	[esp+1BCh+var_1B8], offset aSIsAnUnknownCi ; "%s is an unknown cipher\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		jmp	loc_40A3D3
; ---------------------------------------------------------------------------

loc_40AA08:				; CODE XREF: _enc_main+3AAj
		mov	[esp+1BCh+var_154], 1
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40AA15:				; CODE XREF: _enc_main+7E7j
		mov	eax, [esp+1BCh+var_17C]
		test	eax, eax
		jz	short loc_40AA42
		mov	[esp+1BCh+var_1B0], 0 ;	size_t
		mov	[esp+1BCh+var_1B4], 4 ;	int
		mov	[esp+1BCh+var_1B8], 0 ;	char *
		mov	eax, ds:__imp___iob
		mov	[esp+1BCh+var_1BC], eax	; FILE *
		call	_setvbuf

loc_40AA42:				; CODE XREF: _enc_main+B1Bj
		mov	eax, ds:__imp___iob
		mov	[esp+1BCh+var_1B0], eax
		mov	[esp+1BCh+var_1B4], 0
		mov	[esp+1BCh+var_1B8], 6Ah
		mov	eax, [esp+1BCh+var_144]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_ctrl
		jmp	loc_40A719
; ---------------------------------------------------------------------------

loc_40AA6C:				; CODE XREF: _enc_main+7DBj
		mov	[esp+1BCh+var_1B8], offset _BIO_debug_callback
		mov	ebx, [esp+1BCh+var_144]
		mov	[esp+1BCh+var_1BC], ebx
		call	_BIO_set_callback
		mov	[esp+1BCh+var_1B8], offset _BIO_debug_callback
		mov	edi, [esp+1BCh+var_174]
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_set_callback
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], ebx
		call	_BIO_set_callback_arg
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_set_callback_arg
		jmp	loc_40A6E1
; ---------------------------------------------------------------------------

loc_40AABB:				; CODE XREF: _enc_main+21Dj
		mov	[esp+1BCh+var_1B8], offset aCiphersInXtsMo ; "Ciphers in XTS mode are not supported b"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		jmp	loc_409F42
; ---------------------------------------------------------------------------

loc_40AAD5:				; CODE XREF: _enc_main+7C7j
					; _enc_main+7CFj
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		xor	edi, edi
		mov	ebp, 1
		jmp	loc_40A826
; ---------------------------------------------------------------------------

loc_40AAF0:				; CODE XREF: _enc_main+899j
		xor	ebx, ebx

loc_40AAF2:				; CODE XREF: _enc_main+8DFj
					; _enc_main+1445j ...
		mov	eax, [esp+1BCh+var_178]
		mov	[esp+1BCh+var_1BC], eax	; char *
		call	_strlen
		mov	edx, eax
		lea	eax, [esp+1BCh+var_11C]
		mov	[esp+1BCh+var_1A0], eax
		lea	eax, [esp+1BCh+var_E4]
		mov	[esp+1BCh+var_1A4], eax
		mov	[esp+1BCh+var_1A8], 1
		mov	[esp+1BCh+var_1AC], edx
		mov	eax, [esp+1BCh+var_178]
		mov	[esp+1BCh+var_1B0], eax
		mov	[esp+1BCh+var_1B4], ebx
		mov	[esp+1BCh+var_1B8], ebp
		mov	edx, [esp+1BCh+var_180]
		mov	[esp+1BCh+var_1BC], edx
		call	_EVP_BytesToKey
		mov	eax, [esp+1BCh+var_178]
		cmp	eax, [esp+1BCh+var_184]
		jz	loc_40B384
		mov	ebx, eax
		mov	[esp+1BCh+var_1BC], eax	; char *
		call	_strlen
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], ebx
		call	_OPENSSL_cleanse

loc_40AB62:				; CODE XREF: _enc_main+1498j
		cmp	[esp+1BCh+var_15C], 0
		jz	short loc_40AB92

loc_40AB69:				; CODE XREF: _enc_main+15CEj
		mov	eax, [esp+1BCh+var_180]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CIPHER_iv_length
		test	eax, eax
		jnz	loc_40B1AF
		mov	[esp+1BCh+var_1B8], offset aWarningIvNotUs ; "warning: iv not use by this cipher\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf

loc_40AB92:				; CODE XREF: _enc_main+C67j
					; _enc_main+12D0j ...
		mov	ebx, [esp+1BCh+var_158]
		test	ebx, ebx
		jz	short loc_40ABC5
		mov	eax, [esp+1BCh+var_180]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CIPHER_key_length
		mov	[esp+1BCh+var_1B4], eax	; int
		lea	eax, [esp+1BCh+var_E4]
		mov	[esp+1BCh+var_1B8], eax	; int
		mov	[esp+1BCh+var_1BC], ebx	; char *
		call	_set_hex
		test	eax, eax
		jz	loc_40B29A

loc_40ABC5:				; CODE XREF: _enc_main+C98j
		call	_BIO_f_cipher
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_40A821
		lea	eax, [esp+1BCh+var_130]
		mov	[esp+1BCh+var_1B0], eax
		mov	[esp+1BCh+var_1B4], 0
		mov	[esp+1BCh+var_1B8], 81h
		mov	[esp+1BCh+var_1BC], ebx
		call	_BIO_ctrl
		mov	eax, [esp+1BCh+var_148]
		test	eax, eax
		jz	short loc_40AC1E
		mov	[esp+1BCh+var_1B8], 8000h
		mov	eax, [esp+1BCh+var_130]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CIPHER_CTX_set_flags

loc_40AC1E:				; CODE XREF: _enc_main+D05j
		mov	eax, [esp+1BCh+var_194]
		mov	[esp+1BCh+var_1A8], eax
		mov	[esp+1BCh+var_1AC], 0
		mov	[esp+1BCh+var_1B0], 0
		mov	[esp+1BCh+var_1B4], 0
		mov	eax, [esp+1BCh+var_180]
		mov	[esp+1BCh+var_1B8], eax
		mov	eax, [esp+1BCh+var_130]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CipherInit_ex
		test	eax, eax
		jz	loc_40B24D
		mov	eax, [esp+1BCh+var_154]
		test	eax, eax
		jz	short loc_40AC7C
		mov	[esp+1BCh+var_1B8], 0
		mov	eax, [esp+1BCh+var_130]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CIPHER_CTX_set_padding

loc_40AC7C:				; CODE XREF: _enc_main+D63j
		mov	eax, [esp+1BCh+var_194]
		mov	[esp+1BCh+var_1A8], eax
		lea	eax, [esp+1BCh+var_11C]
		mov	[esp+1BCh+var_1AC], eax
		lea	eax, [esp+1BCh+var_E4]
		mov	[esp+1BCh+var_194], eax
		mov	[esp+1BCh+var_1B0], eax
		mov	[esp+1BCh+var_1B4], 0
		mov	[esp+1BCh+var_1B8], 0
		mov	eax, [esp+1BCh+var_130]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CipherInit_ex
		test	eax, eax
		jz	loc_40B24D
		mov	eax, [esp+1BCh+var_164]
		test	eax, eax
		jnz	loc_40B41B

loc_40ACD1:				; CODE XREF: _enc_main+153Cj
		mov	eax, [esp+1BCh+var_168]
		test	eax, eax
		jz	loc_40ADAE
		mov	eax, [esp+1BCh+var_160]
		test	eax, eax
		jz	loc_40B3B7

loc_40ACE9:				; CODE XREF: _enc_main+14F7j
		mov	ebp, [esp+1BCh+var_180]
		mov	eax, [ebp+8]
		test	eax, eax
		jle	short loc_40AD50
		mov	[esp+1BCh+var_1BC], offset aKey_0 ; "key="
		call	_printf
		mov	ebp, [ebp+8]
		test	ebp, ebp
		jle	short loc_40AD44
		xor	ebp, ebp
		mov	[esp+1BCh+var_188], edi
		mov	[esp+1BCh+var_17C], ebx
		mov	edi, [esp+1BCh+var_180]
		mov	eax, ebp
		mov	ebp, esi
		mov	ebx, [esp+1BCh+var_194]
		mov	esi, eax

loc_40AD1F:				; CODE XREF: _enc_main+E38j
		xor	eax, eax
		mov	al, [ebx+esi]
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], offset a02x_0 ; "%02X"
		call	_printf
		inc	esi
		cmp	[edi+8], esi
		jg	short loc_40AD1F
		mov	edi, [esp+1BCh+var_188]
		mov	ebx, [esp+1BCh+var_17C]
		mov	esi, ebp

loc_40AD44:				; CODE XREF: _enc_main+E05j
		mov	[esp+1BCh+var_1BC], 0Ah	; int
		call	_putchar

loc_40AD50:				; CODE XREF: _enc_main+DF2j
		mov	eax, [esp+1BCh+var_180]
		mov	ecx, [eax+0Ch]
		test	ecx, ecx
		jle	short loc_40ADA3
		mov	[esp+1BCh+var_1BC], offset aIv ; "iv ="
		call	_printf
		xor	ebp, ebp
		mov	eax, [esp+1BCh+var_180]
		mov	edx, [eax+0Ch]
		test	edx, edx
		jle	short loc_40AD97

loc_40AD74:				; CODE XREF: _enc_main+E95j
		xor	eax, eax
		mov	al, byte ptr [esp+ebp+1BCh+var_11C]
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], offset a02x_0 ; "%02X"
		call	_printf
		inc	ebp
		mov	eax, [esp+1BCh+var_180]
		cmp	[eax+0Ch], ebp
		jg	short loc_40AD74

loc_40AD97:				; CODE XREF: _enc_main+E72j
		mov	[esp+1BCh+var_1BC], 0Ah	; int
		call	_putchar

loc_40ADA3:				; CODE XREF: _enc_main+E59j
		cmp	[esp+1BCh+var_168], 2
		jz	loc_40AE4E

loc_40ADAE:				; CODE XREF: _enc_main+DD7j
		mov	eax, [esp+1BCh+var_190]
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], ebx
		call	_BIO_push
		mov	[esp+1BCh+var_190], eax
		mov	[esp+1BCh+var_194], edi
		mov	[esp+1BCh+var_188], ebx
		mov	edi, [esp+1BCh+var_18C]
		mov	ebp, eax
		jmp	short loc_40ADF8
; ---------------------------------------------------------------------------
		align 10h

loc_40ADE0:				; CODE XREF: _enc_main+F10j
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], esi
		mov	[esp+1BCh+var_1BC], ebp
		call	_BIO_write
		cmp	eax, ebx
		jnz	loc_40B219

loc_40ADF8:				; CODE XREF: _enc_main+ED0j
					; _enc_main+1275j
		mov	eax, [esp+1BCh+var_140]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], esi
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_read
		mov	ebx, eax
		test	eax, eax
		jg	short loc_40ADE0
		mov	edi, [esp+1BCh+var_194]
		mov	ebx, [esp+1BCh+var_188]
		mov	[esp+1BCh+var_1B0], 0
		mov	[esp+1BCh+var_1B4], 0
		mov	[esp+1BCh+var_1B8], 0Bh
		mov	eax, [esp+1BCh+var_190]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_ctrl
		test	eax, eax
		jz	loc_40B3FC
		mov	eax, [esp+1BCh+var_170]
		test	eax, eax
		jnz	short loc_40AE55

loc_40AE4E:				; CODE XREF: _enc_main+EA8j
		xor	ebp, ebp
		jmp	loc_40A826
; ---------------------------------------------------------------------------

loc_40AE55:				; CODE XREF: _enc_main+F4Cj
		mov	eax, [esp+1BCh+var_144]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_number_read
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], offset aBytesRead8ld ; "bytes read	 :%8ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	eax, [esp+1BCh+var_174]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_number_written
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], offset aBytesWritten8l ; "bytes written:%8ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		xor	ebp, ebp
		jmp	loc_40A826
; ---------------------------------------------------------------------------
		align 10h

loc_40AEB0:				; CODE XREF: _enc_main+863j
		call	_BIO_f_base64
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_40A81F
		mov	eax, [esp+1BCh+var_164]
		test	eax, eax
		jnz	loc_40B2C9

loc_40AED3:				; CODE XREF: _enc_main+13EAj
		mov	eax, [esp+1BCh+var_14C]
		test	eax, eax
		jnz	loc_40B2B4

loc_40AEDF:				; CODE XREF: _enc_main+13C4j
		mov	eax, [esp+1BCh+var_194]
		test	eax, eax
		jz	loc_40B1F8
		mov	eax, [esp+1BCh+var_174]
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_push
		mov	[esp+1BCh+var_190], eax
		mov	eax, [esp+1BCh+var_144]
		mov	[esp+1BCh+var_18C], eax
		jmp	loc_40A77B
; ---------------------------------------------------------------------------

loc_40AF0C:				; CODE XREF: _enc_main+3BEj
		mov	[esp+1BCh+var_160], 0
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40AF19:				; CODE XREF: _enc_main+247j
		mov	edi, 2C52h
		mov	[esp+1BCh+var_140], 2000h
		jmp	loc_40A655
; ---------------------------------------------------------------------------

loc_40AF2B:				; CODE XREF: _enc_main+81Fj
		mov	eax, [esp+1BCh+var_188]
		test	eax, eax
		jz	short loc_40AF7A
		mov	[esp+1BCh+var_1AC], 0 ;	int
		lea	eax, [esp+1BCh+var_134]
		mov	[esp+1BCh+var_1B0], eax	; int
		mov	[esp+1BCh+var_1B4], 0 ;	char *
		mov	eax, [esp+1BCh+var_188]
		mov	[esp+1BCh+var_1B8], eax	; char *
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax	; int
		call	_app_passwd
		test	eax, eax
		jz	loc_40B39D
		mov	eax, [esp+1BCh+var_134]
		test	eax, eax
		jnz	loc_40B017

loc_40AF7A:				; CODE XREF: _enc_main+1031j
		mov	edi, [esp+1BCh+var_180]
		test	edi, edi
		jz	loc_40A725
		mov	ebx, [esp+1BCh+var_158]
		test	ebx, ebx
		jnz	loc_40A725
		lea	eax, [esp+1BCh+var_E4]
		mov	ebx, [esp+1BCh+var_184]
		mov	edi, eax
		mov	ecx, [esp+1BCh+var_194]
		test	ecx, ecx
		jnz	short loc_40B026
		jmp	short loc_40AFAF
; ---------------------------------------------------------------------------

loc_40AFA9:				; CODE XREF: _enc_main+1108j
		js	loc_40B4F5

loc_40AFAF:				; CODE XREF: _enc_main+10A7j
		mov	eax, [esp+1BCh+var_180]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CIPHER_nid
		mov	[esp+1BCh+var_1BC], eax
		call	_OBJ_nid2ln
		mov	[esp+1BCh+var_1AC], offset aDecryption ; "decryption"
		mov	[esp+1BCh+var_1B0], eax
		mov	[esp+1BCh+var_1B4], offset aEnterSSPasswor ; "enter %s %s password:"
		mov	[esp+1BCh+var_1B8], 0C8h
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_snprintf
		mov	byte ptr [ebx],	0
		mov	[esp+1BCh+var_1B0], 0
		mov	[esp+1BCh+var_1B4], edi
		mov	[esp+1BCh+var_1B8], 200h
		mov	[esp+1BCh+var_1BC], ebx
		call	_EVP_read_pw_string
		test	eax, eax
		jnz	short loc_40AFA9

loc_40B00A:				; CODE XREF: _enc_main+1181j
		mov	eax, [esp+1BCh+var_184]
		cmp	byte ptr [eax],	0
		jz	loc_40B1EF

loc_40B017:				; CODE XREF: _enc_main+1074j
		mov	[esp+1BCh+var_178], eax
		jmp	loc_40A725
; ---------------------------------------------------------------------------

loc_40B020:				; CODE XREF: _enc_main+117Fj
		js	loc_40B4F5

loc_40B026:				; CODE XREF: _enc_main+10A5j
		mov	eax, [esp+1BCh+var_180]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CIPHER_nid
		mov	[esp+1BCh+var_1BC], eax
		call	_OBJ_nid2ln
		mov	[esp+1BCh+var_1AC], offset aEncryption ; "encryption"
		mov	[esp+1BCh+var_1B0], eax
		mov	[esp+1BCh+var_1B4], offset aEnterSSPasswor ; "enter %s %s password:"
		mov	[esp+1BCh+var_1B8], 0C8h
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_snprintf
		mov	byte ptr [ebx],	0
		mov	eax, [esp+1BCh+var_194]
		mov	[esp+1BCh+var_1B0], eax
		mov	[esp+1BCh+var_1B4], edi
		mov	[esp+1BCh+var_1B8], 200h
		mov	[esp+1BCh+var_1BC], ebx
		call	_EVP_read_pw_string
		test	eax, eax
		jnz	short loc_40B020
		jmp	short loc_40B00A
; ---------------------------------------------------------------------------
		align 10h

loc_40B090:				; CODE XREF: _enc_main+23Bj
		mov	eax, [esp+1BCh+var_174]
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], offset aSIsAnUnsupport ; "%s is an unsupported message digest typ"...
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		jmp	loc_409F42
; ---------------------------------------------------------------------------

loc_40B0B2:				; CODE XREF: _enc_main+82Bj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+1BCh+var_1B0], eax
		mov	[esp+1BCh+var_1B4], 0
		mov	[esp+1BCh+var_1B8], 6Ah
		mov	eax, [esp+1BCh+var_174]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_ctrl
		mov	eax, [esp+1BCh+var_17C]
		test	eax, eax
		jz	loc_40A75D
		mov	[esp+1BCh+var_1B0], 0 ;	size_t
		mov	[esp+1BCh+var_1B4], 4 ;	int
		mov	[esp+1BCh+var_1B8], 0 ;	char *
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+1BCh+var_1BC], eax	; FILE *
		call	_setvbuf
		jmp	loc_40A75D
; ---------------------------------------------------------------------------

loc_40B113:				; CODE XREF: _enc_main+793j
		mov	[esp+1BCh+var_1B4], edi
		mov	[esp+1BCh+var_1B8], offset aOpenssl_mall_1 ; "OPENSSL_malloc failure %ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_ERR_print_errors
		mov	eax, [esp+1BCh+var_184]
		test	eax, eax
		jz	loc_409F4F
		xor	ebx, ebx
		xor	edi, edi
		mov	[esp+1BCh+var_174], 0
		mov	[esp+1BCh+var_144], 0
		mov	ebp, 1
		jmp	loc_40A833
; ---------------------------------------------------------------------------

loc_40B163:				; CODE XREF: _enc_main+881j
		xor	ebx, ebx
		mov	[esp+1BCh+var_194], edi
		mov	[esp+1BCh+var_188], ebx
		mov	edi, [esp+1BCh+var_18C]
		mov	ebp, [esp+1BCh+var_190]
		jmp	loc_40ADF8
; ---------------------------------------------------------------------------

loc_40B17A:				; CODE XREF: _enc_main+8A5j
		mov	[esp+1BCh+var_1B4], 8
		lea	eax, [esp+1BCh+var_12C]
		mov	[esp+1BCh+var_1B8], eax
		mov	eax, [esp+1BCh+var_18C]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_read
		cmp	eax, 8
		jz	loc_40B2FC

loc_40B1A2:				; CODE XREF: _enc_main+141Ej
		mov	[esp+1BCh+var_1B8], offset aErrorReadingIn ; "error reading input file\n"
		jmp	loc_40A812
; ---------------------------------------------------------------------------

loc_40B1AF:				; CODE XREF: _enc_main+C77j
		mov	[esp+1BCh+var_1B4], 10h	; int
		lea	eax, [esp+1BCh+var_11C]
		mov	[esp+1BCh+var_1B8], eax	; int
		mov	eax, [esp+1BCh+var_15C]
		mov	[esp+1BCh+var_1BC], eax	; char *
		call	_set_hex
		test	eax, eax
		jnz	loc_40AB92
		mov	[esp+1BCh+var_1B8], offset aInvalidHexIvVa ; "invalid hex iv value\n"
		jmp	loc_40A812
; ---------------------------------------------------------------------------

loc_40B1E3:				; CODE XREF: _enc_main+813j
		mov	eax, [esp+1BCh+var_190]

loc_40B1E7:				; CODE XREF: _enc_main+1395j
		mov	[esp+1BCh+var_1BC], eax	; char *
		call	_perror

loc_40B1EF:				; CODE XREF: _enc_main+1111j
					; _enc_main+14B2j
		xor	ebx, ebx
		xor	edi, edi
		jmp	loc_40A821
; ---------------------------------------------------------------------------

loc_40B1F8:				; CODE XREF: _enc_main+FE5j
		mov	eax, [esp+1BCh+var_144]
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_push
		mov	[esp+1BCh+var_18C], eax
		mov	eax, [esp+1BCh+var_174]
		mov	[esp+1BCh+var_190], eax
		jmp	loc_40A77B
; ---------------------------------------------------------------------------

loc_40B219:				; CODE XREF: _enc_main+EF2j
		mov	edi, [esp+1BCh+var_194]
		mov	ebx, [esp+1BCh+var_188]
		mov	[esp+1BCh+var_1B8], offset aErrorWriting_0 ; "error writing output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	ebp, 1
		jmp	loc_40A826
; ---------------------------------------------------------------------------

loc_40B240:				; CODE XREF: _enc_main+3D2j
		mov	[esp+1BCh+var_160], 1
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B24D:				; CODE XREF: _enc_main+D57j
					; _enc_main+DBFj
		mov	eax, [esp+1BCh+var_180]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CIPHER_nid
		mov	[esp+1BCh+var_1BC], eax
		call	_OBJ_nid2sn
		mov	[esp+1BCh+var_1B4], eax
		mov	[esp+1BCh+var_1B8], offset aErrorSettingCi ; "Error setting cipher %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_ERR_print_errors
		mov	ebp, 1
		jmp	loc_40A826
; ---------------------------------------------------------------------------

loc_40B291:				; CODE XREF: _enc_main+857j
		mov	eax, [esp+1BCh+var_18C]
		jmp	loc_40B1E7
; ---------------------------------------------------------------------------

loc_40B29A:				; CODE XREF: _enc_main+CBFj
		mov	[esp+1BCh+var_1B8], offset aInvalidHexKeyV ; "invalid hex key value\n"
		jmp	loc_40A812
; ---------------------------------------------------------------------------

loc_40B2A7:				; CODE XREF: _enc_main+8D4j
		mov	[esp+1BCh+var_1B8], offset aInvalidHexSalt ; "invalid hex salt value\n"
		jmp	loc_40A812
; ---------------------------------------------------------------------------

loc_40B2B4:				; CODE XREF: _enc_main+FD9j
		mov	[esp+1BCh+var_1B8], 100h
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_set_flags
		jmp	loc_40AEDF
; ---------------------------------------------------------------------------

loc_40B2C9:				; CODE XREF: _enc_main+FCDj
		mov	[esp+1BCh+var_1B8], offset _BIO_debug_callback
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_set_callback
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], edi
		call	_BIO_set_callback_arg
		jmp	loc_40AED3
; ---------------------------------------------------------------------------

loc_40B2EF:				; CODE XREF: _enc_main+3E6j
		mov	[esp+1BCh+var_164], 1
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B2FC:				; CODE XREF: _enc_main+129Cj
		mov	[esp+1BCh+var_1B4], 8
		lea	ebx, [esp+1BCh+var_124]
		mov	[esp+1BCh+var_1B8], ebx
		mov	eax, [esp+1BCh+var_18C]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_read
		cmp	eax, 8
		jnz	loc_40B1A2
		mov	[esp+1BCh+var_1B4], 8 ;	size_t
		mov	[esp+1BCh+var_1B8], offset _magic_36602	; "Salted__"
		lea	eax, [esp+1BCh+var_12C]
		mov	[esp+1BCh+var_1BC], eax	; void *
		call	_memcmp
		test	eax, eax
		jz	loc_40AAF2
		mov	[esp+1BCh+var_1B8], offset aBadMagicNumber ; "bad magic	number\n"
		jmp	loc_40A812
; ---------------------------------------------------------------------------
		align 10h

loc_40B360:				; CODE XREF: _enc_main+8B1j
		mov	[esp+1BCh+var_1B8], 8
		lea	ebx, [esp+1BCh+var_124]
		mov	[esp+1BCh+var_1BC], ebx
		call	_RAND_pseudo_bytes
		test	eax, eax
		jns	loc_40A7DA
		jmp	loc_40A81F
; ---------------------------------------------------------------------------

loc_40B384:				; CODE XREF: _enc_main+C46j
		mov	[esp+1BCh+var_1B8], 200h
		mov	eax, [esp+1BCh+var_184]
		mov	[esp+1BCh+var_1BC], eax
		call	_OPENSSL_cleanse
		jmp	loc_40AB62
; ---------------------------------------------------------------------------

loc_40B39D:				; CODE XREF: _enc_main+1065j
		mov	[esp+1BCh+var_1B8], offset aErrorGetting_1 ; "Error getting password\n"

loc_40B3A5:				; CODE XREF: _enc_main+15FDj
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		jmp	loc_40B1EF
; ---------------------------------------------------------------------------

loc_40B3B7:				; CODE XREF: _enc_main+DE3j
		mov	[esp+1BCh+var_1BC], offset aSalt_0 ; "salt="
		call	_printf
		lea	ebp, [esp+1BCh+var_124]

loc_40B3CA:				; CODE XREF: _enc_main+14E9j
		xor	eax, eax
		mov	al, [ebp+0]
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], offset a02x_0 ; "%02X"
		call	_printf
		inc	ebp
		lea	eax, [esp+1BCh+var_11C]
		cmp	ebp, eax
		jnz	short loc_40B3CA
		mov	[esp+1BCh+var_1BC], 0Ah	; int
		call	_putchar
		jmp	loc_40ACE9
; ---------------------------------------------------------------------------

loc_40B3FC:				; CODE XREF: _enc_main+F40j
		mov	[esp+1BCh+var_1B8], offset aBadDecrypt ; "bad decrypt\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		mov	ebp, 1
		jmp	loc_40A826
; ---------------------------------------------------------------------------

loc_40B41B:				; CODE XREF: _enc_main+DCBj
		mov	[esp+1BCh+var_1B8], offset _BIO_debug_callback
		mov	[esp+1BCh+var_1BC], ebx
		call	_BIO_set_callback
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1B8], eax
		mov	[esp+1BCh+var_1BC], ebx
		call	_BIO_set_callback_arg
		jmp	loc_40ACD1
; ---------------------------------------------------------------------------

loc_40B441:				; CODE XREF: _enc_main+904j
		mov	[esp+1BCh+var_1B4], 8
		mov	[esp+1BCh+var_1B8], ebx
		mov	eax, [esp+1BCh+var_190]
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_write
		cmp	eax, 8
		jnz	loc_40A80A
		jmp	loc_40AAF2
; ---------------------------------------------------------------------------
		align 10h

loc_40B470:				; CODE XREF: _enc_main+422j
					; _enc_main+442j
		mov	[esp+1BCh+var_16C], 1
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B47D:				; CODE XREF: _enc_main+40Ej
		mov	[esp+1BCh+var_14C], 1
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B48A:				; CODE XREF: _enc_main+3FAj
		mov	[esp+1BCh+var_168], 2
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B497:				; CODE XREF: _enc_main+45Ej
		mov	[esp+1BCh+var_144], edx
		mov	[esp+1BCh+var_1B8], offset aK ;	"-k"
		mov	[esp+1BCh+var_1BC], ebp	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+1BCh+var_144]
		jnz	short loc_40B502
		dec	edx
		jz	loc_40A3D3
		mov	eax, [ebx+4]
		mov	[esp+1BCh+var_178], eax
		add	ebx, 4
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B4C9:				; CODE XREF: _enc_main+88Dj
		cmp	[esp+1BCh+var_15C], 0
		jnz	loc_40AB69
		mov	eax, [esp+1BCh+var_180]
		mov	[esp+1BCh+var_1BC], eax
		call	_EVP_CIPHER_iv_length
		test	eax, eax
		jz	loc_40AB92
		mov	[esp+1BCh+var_1B8], offset aIvUndefined	; "iv undefined\n"
		jmp	loc_40A812
; ---------------------------------------------------------------------------

loc_40B4F5:				; CODE XREF: _enc_main:loc_40AFA9j
					; _enc_main:loc_40B020j
		mov	[esp+1BCh+var_1B8], offset aBadPasswordRea ; "bad password read\n"
		jmp	loc_40B3A5
; ---------------------------------------------------------------------------

loc_40B502:				; CODE XREF: _enc_main+15B1j
		mov	[esp+1BCh+var_144], edx
		mov	[esp+1BCh+var_1B8], offset aKfile ; "-kfile"
		mov	[esp+1BCh+var_1BC], ebp	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+1BCh+var_144]
		jnz	loc_40B5D3
		dec	edx
		mov	[esp+1BCh+var_178], edx
		jz	loc_40A3D3
		lea	esi, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+1BCh+var_1B8], offset aR ;	"r"
		mov	[esp+1BCh+var_1BC], ebx	; char *
		call	_fopen
		mov	edi, eax
		test	eax, eax
		mov	edx, [esp+1BCh+var_178]
		jz	loc_40B637
		mov	[esp+1BCh+var_178], edx
		mov	ds:_buf_36646, 0
		mov	[esp+1BCh+var_1B4], eax	; FILE *
		mov	[esp+1BCh+var_1B8], 80h	; int
		mov	[esp+1BCh+var_1BC], offset _buf_36646 ;	char *
		call	_fgets
		test	eax, eax
		mov	edx, [esp+1BCh+var_178]
		jz	loc_40B637
		mov	[esp+1BCh+var_178], edx
		mov	[esp+1BCh+var_1BC], edi	; FILE *
		call	_fclose
		mov	edi, offset _buf_36646
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		repne scasb
		not	ecx
		lea	eax, [ecx-1]
		test	eax, eax
		jle	loc_40A3BE
		sub	ecx, 2
		mov	bl, ds:_buf_36646[ecx]
		cmp	bl, 0Ah
		mov	edx, [esp+1BCh+var_178]
		jz	loc_40A38D
		cmp	bl, 0Dh
		jz	loc_40A38D

loc_40B5C4:				; CODE XREF: _enc_main+4A9j
					; _enc_main+4B8j
		mov	ebx, esi
		mov	[esp+1BCh+var_178], offset _buf_36646
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B5D3:				; CODE XREF: _enc_main+161Cj
		mov	[esp+1BCh+var_144], edx
		mov	[esp+1BCh+var_1B8], offset aK_0	; "-K"
		mov	[esp+1BCh+var_1BC], ebp	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+1BCh+var_144]
		jnz	short loc_40B605
		dec	edx
		jz	loc_40A3D3
		mov	eax, [ebx+4]
		mov	[esp+1BCh+var_158], eax
		add	ebx, 4
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B605:				; CODE XREF: _enc_main+16EDj
		mov	[esp+1BCh+var_144], edx
		mov	[esp+1BCh+var_1B8], offset aS_5	; "-S"
		mov	[esp+1BCh+var_1BC], ebp	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+1BCh+var_144]
		jnz	short loc_40B655
		dec	edx
		jz	loc_40A3D3
		mov	eax, [ebx+4]
		mov	[esp+1BCh+var_150], eax
		add	ebx, 4
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B637:				; CODE XREF: _enc_main+164Bj
					; _enc_main+167Aj
		mov	[esp+1BCh+var_1B4], ebx
		mov	[esp+1BCh+var_1B8], offset aUnableToReadKe ; "unable to	read key from '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		jmp	loc_40A3D3
; ---------------------------------------------------------------------------

loc_40B655:				; CODE XREF: _enc_main+171Fj
		mov	[esp+1BCh+var_144], edx
		mov	[esp+1BCh+var_1B8], offset aIv_0 ; "-iv"
		mov	[esp+1BCh+var_1BC], ebp	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+1BCh+var_144]
		jnz	short loc_40B687
		dec	edx
		jz	loc_40A3D3
		mov	eax, [ebx+4]
		mov	[esp+1BCh+var_15C], eax
		add	ebx, 4
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B687:				; CODE XREF: _enc_main+176Fj
		mov	[esp+1BCh+var_144], edx
		mov	[esp+1BCh+var_1B8], offset aMd ; "-md"
		mov	[esp+1BCh+var_1BC], ebp	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+1BCh+var_144]
		jnz	short loc_40B6B9
		dec	edx
		jz	loc_40A3D3
		mov	eax, [ebx+4]
		mov	[esp+1BCh+var_174], eax
		add	ebx, 4
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B6B9:				; CODE XREF: _enc_main+17A1j
		mov	[esp+1BCh+var_144], edx
		mov	[esp+1BCh+var_1B8], offset aNonFipsAllow_0 ; "-non-fips-allow"
		mov	[esp+1BCh+var_1BC], ebp	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+1BCh+var_144]
		jz	short loc_40B706
		cmp	byte ptr [ebp+0], 2Dh
		jz	short loc_40B731

loc_40B6DB:				; CODE XREF: _enc_main+184Ej
		mov	[esp+1BCh+var_180], edx
		mov	esi, [ebx]
		mov	[esp+1BCh+var_1B8], offset aNone_1 ; "-none"
		mov	[esp+1BCh+var_1BC], esi	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+1BCh+var_180]
		jnz	short loc_40B713
		mov	[esp+1BCh+var_180], 0
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B706:				; CODE XREF: _enc_main+17D3j
		mov	[esp+1BCh+var_148], 1
		jmp	loc_40A0A5
; ---------------------------------------------------------------------------

loc_40B713:				; CODE XREF: _enc_main+17F7j
		mov	[esp+1BCh+var_1B4], esi
		mov	[esp+1BCh+var_1B8], offset aUnknownOptio_3 ; "unknown option '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+1BCh+var_1BC], eax
		call	_BIO_printf
		jmp	loc_40A3D3
; ---------------------------------------------------------------------------

loc_40B731:				; CODE XREF: _enc_main+17D9j
		mov	[esp+1BCh+var_144], edx
		inc	ebp
		mov	[esp+1BCh+var_1BC], ebp
		call	_EVP_get_cipherbyname
		mov	[esp+1BCh+var_180], eax
		test	eax, eax
		mov	edx, [esp+1BCh+var_144]
		jnz	loc_40A0A5
		jmp	short loc_40B6DB
_enc_main	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl do_passwd(char *,	int, int, int, int, int, int, int, int)
_do_passwd	proc near		; CODE XREF: _passwd_main+856p
					; _passwd_main+8EDp ...

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= byte ptr -6Ch
var_6B		= byte ptr -6Bh
var_6A		= byte ptr -6Ah
var_69		= byte ptr -69h
var_68		= byte ptr -68h
var_67		= byte ptr -67h
var_66		= byte ptr -66h
var_65		= byte ptr -65h
var_64		= byte ptr -64h
var_63		= byte ptr -63h
var_62		= byte ptr -62h
var_61		= byte ptr -61h
var_60		= byte ptr -60h
var_5F		= byte ptr -5Fh
var_5E		= byte ptr -5Eh
var_5D		= byte ptr -5Dh
var_5C		= byte ptr -5Ch
var_5B		= byte ptr -5Bh
var_5A		= byte ptr -5Ah
var_59		= byte ptr -59h
var_58		= byte ptr -58h
var_57		= byte ptr -57h
var_56		= byte ptr -56h
var_55		= byte ptr -55h
var_54		= byte ptr -54h
var_53		= byte ptr -53h
var_52		= byte ptr -52h
var_51		= byte ptr -51h
var_50		= byte ptr -50h
var_4F		= byte ptr -4Fh
var_4E		= byte ptr -4Eh
var_4C		= byte ptr -4Ch
var_34		= byte ptr -34h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, edx
		mov	ebp, [esp+8Ch+arg_14]
		mov	esi, [esp+8Ch+arg_18]
		mov	edi, [esp+8Ch+arg_1C]
		test	edx, edx
		jz	loc_40C232

loc_40B776:				; CODE XREF: _do_passwd+B0Ej
		test	ecx, ecx
		jz	loc_40C263

loc_40B77E:				; CODE XREF: _do_passwd+B3Fj
		test	eax, eax
		jnz	loc_40B89F
		test	esi, esi
		jz	short loc_40B7DC
		mov	eax, [ecx]
		test	eax, eax
		jz	loc_40C1C8
		mov	eax, [ebx]

loc_40B796:				; CODE XREF: _do_passwd+AA4j
		mov	[esp+8Ch+var_78], ecx
		mov	[esp+8Ch+var_88], 2
		mov	[esp+8Ch+var_8C], eax
		call	_RAND_pseudo_bytes
		test	eax, eax
		js	loc_40C1FA
		mov	eax, [ebx]
		mov	dl, [eax]
		and	edx, 3Fh
		mov	dl, ds:_cov_2char[edx]
		mov	[eax], dl
		mov	eax, [ebx]
		mov	dl, [eax+1]
		and	edx, 3Fh
		mov	dl, ds:_cov_2char[edx]
		mov	[eax+1], dl
		mov	eax, [ebx]
		mov	byte ptr [eax+2], 0
		mov	ecx, [esp+8Ch+var_78]

loc_40B7DC:				; CODE XREF: _do_passwd+38j
		test	edi, edi
		jnz	short loc_40B7EF
		mov	eax, [esp+8Ch+arg_20]
		test	eax, eax
		jz	loc_40B89F

loc_40B7EF:				; CODE XREF: _do_passwd+8Ej
		mov	eax, [ecx]
		test	eax, eax
		jz	loc_40C2BE
		mov	eax, [ebx]

loc_40B7FB:				; CODE XREF: _do_passwd+B9Aj
		mov	[esp+8Ch+var_88], 8
		mov	[esp+8Ch+var_8C], eax
		call	_RAND_pseudo_bytes
		test	eax, eax
		js	loc_40C1FA
		mov	eax, [ebx]
		mov	dl, [eax]
		and	edx, 3Fh
		mov	dl, ds:_cov_2char[edx]
		mov	[eax], dl
		mov	eax, [ebx]
		mov	dl, [eax+1]
		and	edx, 3Fh
		mov	dl, ds:_cov_2char[edx]
		mov	[eax+1], dl
		mov	eax, [ebx]
		mov	dl, [eax+2]
		and	edx, 3Fh
		mov	dl, ds:_cov_2char[edx]
		mov	[eax+2], dl
		mov	eax, [ebx]
		mov	dl, [eax+3]
		and	edx, 3Fh
		mov	dl, ds:_cov_2char[edx]
		mov	[eax+3], dl
		mov	eax, [ebx]
		mov	dl, [eax+4]
		and	edx, 3Fh
		mov	dl, ds:_cov_2char[edx]
		mov	[eax+4], dl
		mov	eax, [ebx]
		mov	dl, [eax+5]
		and	edx, 3Fh
		mov	dl, ds:_cov_2char[edx]
		mov	[eax+5], dl
		mov	eax, [ebx]
		mov	dl, [eax+6]
		and	edx, 3Fh
		mov	dl, ds:_cov_2char[edx]
		mov	[eax+6], dl
		mov	eax, [ebx]
		mov	dl, [eax+7]
		and	edx, 3Fh
		mov	dl, ds:_cov_2char[edx]
		mov	[eax+7], dl
		mov	eax, [ebx]
		mov	byte ptr [eax+8], 0

loc_40B89F:				; CODE XREF: _do_passwd+30j
					; _do_passwd+99j
		mov	eax, [ebx]
		test	eax, eax
		jz	loc_40C29D

loc_40B8A9:				; CODE XREF: _do_passwd+B69j
		mov	eax, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_strlen
		cmp	eax, ebp
		jbe	short loc_40B8FE
		mov	eax, [esp+8Ch+arg_8]
		test	eax, eax
		jz	loc_40C204

loc_40B8CB:				; CODE XREF: _do_passwd+ACDj
		mov	eax, [esp+8Ch+arg_0]
		mov	byte ptr [eax+ebp], 0
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_strlen
		cmp	ebp, eax
		jnb	short loc_40B8FE
		mov	[esp+8Ch+var_84], 1CFh ; unsigned int
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], offset aStrlenPasswdPw ; "strlen(passwd) <= pw_maxlen"
		call	__assert
; ---------------------------------------------------------------------------

loc_40B8FE:				; CODE XREF: _do_passwd+16Aj
					; _do_passwd+190j
		test	esi, esi
		jnz	loc_40C10B
		xor	eax, eax

loc_40B908:				; CODE XREF: _do_passwd+9D0j
		test	edi, edi
		jnz	loc_40BBDA
		mov	esi, [esp+8Ch+arg_20]
		test	esi, esi
		jz	loc_40C125
		mov	esi, [ebx]
		mov	ebx, offset aApr1 ; "apr1"

loc_40B926:				; CODE XREF: _do_passwd+491j
		mov	eax, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_strlen
		mov	[esp+8Ch+var_78], eax
		mov	ds:_out_buf_36381, 24h
		mov	ds:byte_472DE1,	0
		mov	[esp+8Ch+var_84], 4 ; size_t
		mov	[esp+8Ch+var_88], ebx ;	char *
		mov	[esp+8Ch+var_8C], offset _out_buf_36381	; char *
		call	_strncat
		mov	edx, offset _out_buf_36381

loc_40B964:				; CODE XREF: _do_passwd+228j
		mov	ecx, [edx]
		add	edx, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_40B964
		test	eax, 8080h
		jnz	short loc_40B987
		shr	eax, 10h
		add	edx, 2

loc_40B987:				; CODE XREF: _do_passwd+22Fj
		add	al, al
		sbb	edx, 3
		mov	word ptr [edx],	24h
		mov	[esp+8Ch+var_84], 8 ; size_t
		mov	[esp+8Ch+var_88], esi ;	char *
		mov	[esp+8Ch+var_8C], offset _out_buf_36381	; char *
		call	_strncat
		mov	edx, offset _out_buf_36381

loc_40B9AE:				; CODE XREF: _do_passwd+272j
		mov	ecx, [edx]
		add	edx, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_40B9AE
		test	eax, 8080h
		jz	loc_40C16C
		add	al, al
		sbb	edx, 3
		sub	edx, offset _out_buf_36381
		cmp	edx, 0Eh
		ja	loc_40C186

loc_40B9E3:				; CODE XREF: _do_passwd+A30j
					; _do_passwd+A52j
		mov	[esp+8Ch+var_8C], ebx ;	char *
		call	_strlen
		mov	esi, eax
		lea	eax, word_472DE2[eax]
		mov	[esp+8Ch+var_74], eax
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_strlen
		mov	[esp+8Ch+var_70], eax
		cmp	eax, 8
		ja	loc_40C1A7

loc_40BA0C:				; CODE XREF: _do_passwd+A73j
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_MD_CTX_init
		call	_EVP_md5
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], eax
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_DigestInit_ex
		mov	edi, [esp+8Ch+var_78]
		mov	[esp+8Ch+var_84], edi
		mov	eax, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_88], eax
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_DigestUpdate
		mov	[esp+8Ch+var_84], 1
		mov	[esp+8Ch+var_88], offset asc_45BA5A ; "$"
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_DigestUpdate
		mov	[esp+8Ch+var_84], esi
		mov	[esp+8Ch+var_88], ebx
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_DigestUpdate
		mov	[esp+8Ch+var_84], 1
		mov	[esp+8Ch+var_88], offset asc_45BA5A ; "$"
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_DigestUpdate
		mov	ebp, [esp+8Ch+var_70]
		mov	[esp+8Ch+var_84], ebp
		mov	eax, [esp+8Ch+var_74]
		mov	[esp+8Ch+var_88], eax
		lea	ecx, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], ecx
		call	_EVP_DigestUpdate
		lea	esi, [esp+8Ch+var_34]
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_MD_CTX_init
		call	_EVP_md5
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestInit_ex
		mov	ebx, edi
		mov	[esp+8Ch+var_84], edi
		mov	edi, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestUpdate
		mov	[esp+8Ch+var_84], ebp
		mov	eax, [esp+8Ch+var_74]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestUpdate
		mov	[esp+8Ch+var_84], ebx
		mov	eax, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestUpdate
		mov	[esp+8Ch+var_84], 0
		lea	edi, [esp+8Ch+var_6C]
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestFinal_ex
		cmp	ebx, 10h
		jbe	loc_40C294
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_40BB50:				; CODE XREF: _do_passwd+41Ej
		mov	[esp+8Ch+var_84], 10h
		mov	[esp+8Ch+var_88], edi
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_DigestUpdate
		sub	ebx, 10h
		cmp	ebx, 10h
		ja	short loc_40BB50
		mov	eax, [esp+8Ch+var_78]
		lea	edx, [eax-11h]
		and	edx, 0FFFFFFF0h
		sub	eax, 10h
		sub	eax, edx

loc_40BB7F:				; CODE XREF: _do_passwd+B48j
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], edi
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_DigestUpdate
		mov	eax, [esp+8Ch+var_78]
		mov	ebx, eax
		test	eax, eax
		jz	short loc_40BBF0
		mov	ebp, [esp+8Ch+arg_0]
		jmp	short loc_40BBD1
; ---------------------------------------------------------------------------
		align 10h

loc_40BBB0:				; CODE XREF: _do_passwd+484j
		mov	eax, offset byte_45B9A0

loc_40BBB5:				; CODE XREF: _do_passwd+488j
		mov	[esp+8Ch+var_84], 1
		mov	[esp+8Ch+var_88], eax
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_DigestUpdate
		sar	ebx, 1
		jz	short loc_40BBF0

loc_40BBD1:				; CODE XREF: _do_passwd+454j
		test	bl, 1
		jnz	short loc_40BBB0
		mov	eax, ebp
		jmp	short loc_40BBB5
; ---------------------------------------------------------------------------

loc_40BBDA:				; CODE XREF: _do_passwd+1BAj
		mov	esi, [ebx]
		mov	ebx, offset a1	; "1"
		jmp	loc_40B926
; ---------------------------------------------------------------------------
		align 10h

loc_40BBF0:				; CODE XREF: _do_passwd+44Bj
					; _do_passwd+47Fj
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], edi
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_DigestFinal_ex
		xor	ebx, ebx
		jmp	loc_40BCA6
; ---------------------------------------------------------------------------
		align 10h

loc_40BC10:				; CODE XREF: _do_passwd+574j
		mov	edx, [esp+8Ch+var_78]
		mov	eax, [esp+8Ch+arg_0]

loc_40BC1B:				; CODE XREF: _do_passwd+581j
		mov	[esp+8Ch+var_84], edx
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestUpdate
		mov	eax, 0AAAAAAABh
		mul	ebx
		shr	edx, 1
		lea	eax, [edx+edx]
		add	edx, eax
		cmp	ebx, edx
		jnz	loc_40BD10

loc_40BC41:				; CODE XREF: _do_passwd+5D8j
		mov	eax, 24924925h
		mul	ebx
		mov	ecx, ebx
		sub	ecx, edx
		mov	eax, ecx
		shr	eax, 1
		add	eax, edx
		shr	eax, 2
		lea	edx, [eax+eax]
		add	edx, eax
		add	edx, edx
		add	eax, edx
		cmp	ebx, eax
		jnz	loc_40BCF0

loc_40BC66:				; CODE XREF: _do_passwd+5BBj
		test	ebp, ebp
		jnz	short loc_40BCE0
		mov	edx, [esp+8Ch+var_78]
		mov	eax, [esp+8Ch+arg_0]

loc_40BC75:				; CODE XREF: _do_passwd+597j
		mov	[esp+8Ch+var_84], edx
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestUpdate
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestFinal_ex
		inc	ebx
		cmp	ebx, 3E8h
		jz	loc_40BD30

loc_40BCA6:				; CODE XREF: _do_passwd+4BAj
		call	_EVP_md5
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestInit_ex
		mov	ebp, ebx
		and	ebp, 1
		jnz	loc_40BC10
		mov	edx, 10h
		mov	eax, edi
		jmp	loc_40BC1B
; ---------------------------------------------------------------------------
		align 10h

loc_40BCE0:				; CODE XREF: _do_passwd+518j
		mov	edx, 10h
		mov	eax, edi
		jmp	short loc_40BC75
; ---------------------------------------------------------------------------
		align 10h

loc_40BCF0:				; CODE XREF: _do_passwd+510j
		mov	eax, [esp+8Ch+var_78]
		mov	[esp+8Ch+var_84], eax
		mov	eax, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestUpdate
		jmp	loc_40BC66
; ---------------------------------------------------------------------------

loc_40BD10:				; CODE XREF: _do_passwd+4EBj
		mov	eax, [esp+8Ch+var_70]
		mov	[esp+8Ch+var_84], eax
		mov	eax, [esp+8Ch+var_74]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_DigestUpdate
		jmp	loc_40BC41
; ---------------------------------------------------------------------------
		align 10h

loc_40BD30:				; CODE XREF: _do_passwd+550j
		mov	[esp+8Ch+var_8C], esi
		call	_EVP_MD_CTX_cleanup
		mov	al, [esp+8Ch+var_6C]
		mov	[esp+8Ch+var_5C], al
		mov	al, [esp+8Ch+var_66]
		mov	[esp+8Ch+var_5B], al
		mov	al, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_5A], al
		mov	al, [esp+8Ch+var_6B]
		mov	[esp+8Ch+var_59], al
		mov	al, [esp+8Ch+var_65]
		mov	[esp+8Ch+var_58], al
		mov	al, [esp+8Ch+var_5F]
		mov	[esp+8Ch+var_57], al
		mov	al, [esp+8Ch+var_6A]
		mov	[esp+8Ch+var_56], al
		mov	al, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_55], al
		mov	al, [esp+8Ch+var_5E]
		mov	[esp+8Ch+var_54], al
		mov	al, [esp+8Ch+var_69]
		mov	[esp+8Ch+var_53], al
		mov	al, [esp+8Ch+var_63]
		mov	[esp+8Ch+var_52], al
		mov	al, [esp+8Ch+var_5D]
		mov	[esp+8Ch+var_51], al
		mov	al, [esp+8Ch+var_68]
		mov	[esp+8Ch+var_50], al
		mov	al, [esp+8Ch+var_62]
		mov	[esp+8Ch+var_4F], al
		mov	al, [esp+8Ch+var_67]
		mov	[esp+8Ch+var_4E], al
		movzx	edi, [esp+8Ch+var_61]
		mov	ebx, [esp+8Ch+var_74]
		add	ebx, [esp+8Ch+var_70]
		mov	esi, offset _out_buf_36381

loc_40BDC2:				; CODE XREF: _do_passwd+686j
		mov	edx, [esi]
		add	esi, 4
		lea	eax, [edx-1010101h]
		not	edx
		and	eax, edx
		and	eax, 80808080h
		jz	short loc_40BDC2
		test	eax, 8080h
		jz	loc_40C161

loc_40BDE3:				; CODE XREF: _do_passwd+A17j
		add	al, al
		sbb	esi, 3
		cmp	ebx, esi
		jz	short loc_40BE08
		mov	[esp+8Ch+var_84], 178h ; unsigned int
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], offset aOutputOut_bufS ; "output == out_buf +	strlen(out_buf)"
		call	__assert
; ---------------------------------------------------------------------------

loc_40BE08:				; CODE XREF: _do_passwd+69Aj
		mov	byte ptr [ebx],	24h
		mov	dl, [esp+8Ch+var_5A]
		mov	eax, edx
		and	eax, 3Fh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+1], al
		mov	cl, [esp+8Ch+var_5B]
		mov	eax, ecx
		and	eax, 0Fh
		shl	eax, 2
		shr	dl, 6
		mov	esi, edx
		and	esi, 0FFh
		or	eax, esi
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+2], al
		mov	dl, [esp+8Ch+var_5C]
		mov	eax, edx
		and	eax, 3
		shl	eax, 4
		shr	cl, 4
		and	ecx, 0FFh
		or	eax, ecx
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+3], al
		mov	al, dl
		shr	al, 2
		and	eax, 0FFh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+4], al
		mov	dl, [esp+8Ch+var_57]
		mov	eax, edx
		and	eax, 3Fh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+5], al
		mov	cl, [esp+8Ch+var_58]
		mov	eax, ecx
		and	eax, 0Fh
		shl	eax, 2
		shr	dl, 6
		mov	esi, edx
		and	esi, 0FFh
		or	eax, esi
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+6], al
		mov	dl, [esp+8Ch+var_59]
		mov	eax, edx
		and	eax, 3
		shl	eax, 4
		shr	cl, 4
		and	ecx, 0FFh
		or	eax, ecx
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+7], al
		mov	al, dl
		shr	al, 2
		and	eax, 0FFh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+8], al
		mov	dl, [esp+8Ch+var_54]
		mov	eax, edx
		and	eax, 3Fh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+9], al
		mov	al, [esp+8Ch+var_55]
		mov	ecx, eax
		and	ecx, 0Fh
		shl	ecx, 2
		shr	dl, 6
		mov	esi, edx
		and	esi, 0FFh
		or	ecx, esi
		mov	cl, ds:_cov_2char[ecx]
		mov	[ebx+0Ah], cl
		mov	dl, [esp+8Ch+var_56]
		shr	al, 4
		and	eax, 0FFh
		mov	ecx, edx
		and	ecx, 3
		shl	ecx, 4
		or	eax, ecx
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+0Bh], al
		mov	al, dl
		shr	al, 2
		and	eax, 0FFh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+0Ch], al
		mov	dl, [esp+8Ch+var_51]
		mov	eax, edx
		and	eax, 3Fh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+0Dh], al
		mov	al, [esp+8Ch+var_52]
		mov	ecx, eax
		and	ecx, 0Fh
		shl	ecx, 2
		shr	dl, 6
		mov	esi, edx
		and	esi, 0FFh
		or	ecx, esi
		mov	cl, ds:_cov_2char[ecx]
		mov	[ebx+0Eh], cl
		mov	dl, [esp+8Ch+var_53]
		shr	al, 4
		and	eax, 0FFh
		mov	ecx, edx
		and	ecx, 3
		shl	ecx, 4
		or	eax, ecx
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+0Fh], al
		mov	al, dl
		shr	al, 2
		and	eax, 0FFh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+10h], al
		mov	dl, [esp+8Ch+var_4E]
		mov	eax, edx
		and	eax, 3Fh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+11h], al
		mov	al, [esp+8Ch+var_4F]
		mov	ecx, eax
		and	ecx, 0Fh
		shl	ecx, 2
		shr	dl, 6
		mov	esi, edx
		and	esi, 0FFh
		or	ecx, esi
		mov	cl, ds:_cov_2char[ecx]
		mov	[ebx+12h], cl
		mov	dl, [esp+8Ch+var_50]
		shr	al, 4
		and	eax, 0FFh
		mov	ecx, edx
		and	ecx, 3
		shl	ecx, 4
		or	eax, ecx
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+13h], al
		mov	al, dl
		shr	al, 2
		and	eax, 0FFh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+14h], al
		mov	eax, edi
		and	eax, 3Fh
		mov	al, ds:_cov_2char[eax]
		mov	[ebx+15h], al
		mov	edx, edi
		shr	dl, 6
		xor	eax, eax
		mov	al, dl
		mov	al, ds:_cov_2char[eax]
		mov	byte ptr [esp+8Ch+var_78], al
		mov	[ebx+16h], al
		mov	byte ptr [ebx+17h], 0
		mov	edx, offset _out_buf_36381

loc_40C038:				; CODE XREF: _do_passwd+8FCj
		mov	ecx, [edx]
		add	edx, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_40C038
		test	eax, 8080h
		jz	loc_40C156

loc_40C059:				; CODE XREF: _do_passwd+A0Cj
		add	al, al
		sbb	edx, 3
		sub	edx, offset _out_buf_36381
		cmp	edx, 28h
		jbe	short loc_40C085
		mov	[esp+8Ch+var_84], 188h ; unsigned int
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], offset aStrlenOut_bufS ; "strlen(out_buf) < sizeof(out_buf)"
		call	__assert
; ---------------------------------------------------------------------------

loc_40C085:				; CODE XREF: _do_passwd+917j
		lea	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_MD_CTX_cleanup
		mov	eax, offset _out_buf_36381

loc_40C096:				; CODE XREF: _do_passwd+9D7j
					; _do_passwd+A01j
		mov	ecx, [esp+8Ch+arg_C]
		test	ecx, ecx
		jz	short loc_40C0E3
		mov	edx, [esp+8Ch+arg_10]
		test	edx, edx
		jz	loc_40C222
		mov	edi, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_80], edi

loc_40C0BB:				; CODE XREF: _do_passwd+ADDj
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aSS ; "%s\t%s\n"
		mov	eax, [esp+8Ch+arg_4]
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	eax, 1
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40C0E3:				; CODE XREF: _do_passwd+94Fj
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aS ; "%s\n"
		mov	eax, [esp+8Ch+arg_4]
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	eax, 1
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40C10B:				; CODE XREF: _do_passwd+1B0j
		mov	eax, [ebx]
		mov	[esp+8Ch+var_88], eax
		mov	eax, [esp+8Ch+arg_0]
		mov	[esp+8Ch+var_8C], eax
		call	_DES_crypt
		jmp	loc_40B908
; ---------------------------------------------------------------------------

loc_40C125:				; CODE XREF: _do_passwd+1C9j
		test	eax, eax
		jnz	loc_40C096
		mov	[esp+8Ch+var_78], eax
		mov	[esp+8Ch+var_84], 1DAh ; unsigned int
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], offset aHashNull ; "hash != NULL"
		call	__assert
; ---------------------------------------------------------------------------
		mov	eax, [esp+8Ch+var_78]
		jmp	loc_40C096
; ---------------------------------------------------------------------------

loc_40C156:				; CODE XREF: _do_passwd+903j
		shr	eax, 10h
		add	edx, 2
		jmp	loc_40C059
; ---------------------------------------------------------------------------

loc_40C161:				; CODE XREF: _do_passwd+68Dj
		shr	eax, 10h
		add	esi, 2
		jmp	loc_40BDE3
; ---------------------------------------------------------------------------

loc_40C16C:				; CODE XREF: _do_passwd+279j
		shr	eax, 10h
		add	edx, 2
		add	al, al
		sbb	edx, 3
		sub	edx, offset _out_buf_36381
		cmp	edx, 0Eh
		jbe	loc_40B9E3

loc_40C186:				; CODE XREF: _do_passwd+28Dj
		mov	[esp+8Ch+var_84], 138h ; unsigned int
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], offset aStrlenOut_buf6 ; "strlen(out_buf) <= 6 + 8"
		call	__assert
; ---------------------------------------------------------------------------
		jmp	loc_40B9E3
; ---------------------------------------------------------------------------

loc_40C1A7:				; CODE XREF: _do_passwd+2B6j
		mov	[esp+8Ch+var_84], 13Bh ; unsigned int
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], offset aSalt_len8 ; "salt_len	<= 8"
		call	__assert
; ---------------------------------------------------------------------------
		jmp	loc_40BA0C
; ---------------------------------------------------------------------------

loc_40C1C8:				; CODE XREF: _do_passwd+3Ej
		mov	[esp+8Ch+var_78], ecx
		mov	[esp+8Ch+var_84], 19Fh
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], 3
		call	_CRYPTO_malloc
		mov	ecx, [esp+8Ch+var_78]
		mov	[ecx], eax
		mov	[ebx], eax
		mov	edx, [ecx]
		test	edx, edx
		jnz	loc_40B796

loc_40C1FA:				; CODE XREF: _do_passwd+5Cj
					; _do_passwd+BDj
		xor	eax, eax

loc_40C1FC:				; CODE XREF: _do_passwd+BA2j
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40C204:				; CODE XREF: _do_passwd+175j
		mov	[esp+8Ch+var_84], ebp
		mov	[esp+8Ch+var_88], offset aWarningTruncat ; "Warning: truncating	password to %u char"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		jmp	loc_40B8CB
; ---------------------------------------------------------------------------

loc_40C222:				; CODE XREF: _do_passwd+95Aj
		mov	[esp+8Ch+var_80], eax
		mov	eax, [esp+8Ch+arg_0]
		jmp	loc_40C0BB
; ---------------------------------------------------------------------------

loc_40C232:				; CODE XREF: _do_passwd+20j
		mov	[esp+8Ch+var_74], ecx
		mov	[esp+8Ch+var_78], eax
		mov	[esp+8Ch+var_84], 197h ; unsigned int
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], offset aSalt_pNull ; "salt_p != NULL"
		call	__assert
; ---------------------------------------------------------------------------
		mov	ecx, [esp+8Ch+var_74]
		mov	eax, [esp+8Ch+var_78]
		jmp	loc_40B776
; ---------------------------------------------------------------------------

loc_40C263:				; CODE XREF: _do_passwd+28j
		mov	[esp+8Ch+var_74], ecx
		mov	[esp+8Ch+var_78], eax
		mov	[esp+8Ch+var_84], 198h ; unsigned int
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], offset aSalt_malloc_pN ; "salt_malloc_p != NULL"
		call	__assert
; ---------------------------------------------------------------------------
		mov	ecx, [esp+8Ch+var_74]
		mov	eax, [esp+8Ch+var_78]
		jmp	loc_40B77E
; ---------------------------------------------------------------------------

loc_40C294:				; CODE XREF: _do_passwd+3F0j
		mov	eax, [esp+8Ch+var_78]
		jmp	loc_40BB7F
; ---------------------------------------------------------------------------

loc_40C29D:				; CODE XREF: _do_passwd+153j
		mov	[esp+8Ch+var_84], 1C2h ; unsigned int
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], offset aSalt_pNull_0 ; "*salt_p != NULL"
		call	__assert
; ---------------------------------------------------------------------------
		jmp	loc_40B8A9
; ---------------------------------------------------------------------------

loc_40C2BE:				; CODE XREF: _do_passwd+A3j
		mov	[esp+8Ch+var_78], ecx
		mov	[esp+8Ch+var_84], 1B4h
		mov	[esp+8Ch+var_88], offset aPasswd_c ; "passwd.c"
		mov	[esp+8Ch+var_8C], 9
		call	_CRYPTO_malloc
		mov	ecx, [esp+8Ch+var_78]
		mov	[ecx], eax
		mov	[ebx], eax
		mov	edx, [ecx]
		test	edx, edx
		jnz	loc_40B7FB
		xor	eax, eax
		jmp	loc_40C1FC
_do_passwd	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _passwd_main
_passwd_main	proc near		; DATA XREF: .data:0045507Co

var_28C		= dword	ptr -28Ch
var_288		= dword	ptr -288h
var_284		= dword	ptr -284h
var_280		= dword	ptr -280h
var_27C		= dword	ptr -27Ch
var_278		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
var_268		= dword	ptr -268h
var_264		= dword	ptr -264h
var_260		= dword	ptr -260h
var_25C		= dword	ptr -25Ch
var_258		= dword	ptr -258h
var_254		= dword	ptr -254h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= byte ptr -21Ch
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 27Ch
		mov	[esp+28Ch+var_224], 0
		mov	[esp+28Ch+var_220], 0
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_40C720

loc_40C328:				; CODE XREF: _passwd_main+434j
					; _passwd_main+465j
		mov	[esp+28Ch+var_288], 0
		mov	[esp+28Ch+var_28C], ebx
		call	_load_config
		test	eax, eax
		jnz	short loc_40C3A0

loc_40C33C:				; CODE XREF: _passwd_main+B5j
		mov	[esp+28Ch+var_264], 0
		xor	esi, esi
		xor	ebx, ebx
		mov	edi, 1

loc_40C34D:				; CODE XREF: _passwd_main+33Cj
					; _passwd_main+757j ...
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_ERR_print_errors
		mov	eax, [esp+28Ch+var_220]
		test	eax, eax
		jz	short loc_40C36A
		mov	[esp+28Ch+var_28C], eax
		call	_CRYPTO_free

loc_40C36A:				; CODE XREF: _passwd_main+60j
		test	ebx, ebx
		jz	short loc_40C376
		mov	[esp+28Ch+var_28C], ebx
		call	_CRYPTO_free

loc_40C376:				; CODE XREF: _passwd_main+6Cj
		test	esi, esi
		jz	short loc_40C382
		mov	[esp+28Ch+var_28C], esi
		call	_BIO_free

loc_40C382:				; CODE XREF: _passwd_main+78j
		mov	eax, [esp+28Ch+var_264]
		test	eax, eax
		jz	short loc_40C392
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_free_all

loc_40C392:				; CODE XREF: _passwd_main+88j
		mov	eax, edi
		add	esp, 27Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40C3A0:				; CODE XREF: _passwd_main+3Aj
		call	_BIO_s_file
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_new
		mov	edx, eax
		mov	[esp+28Ch+var_264], eax
		test	eax, eax
		jz	short loc_40C33C
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+28Ch+var_280], eax
		mov	[esp+28Ch+var_284], 10h
		mov	[esp+28Ch+var_288], 6Ah
		mov	[esp+28Ch+var_28C], edx
		call	_BIO_ctrl
		mov	eax, [esp+28Ch+arg_4]
		lea	ebp, [eax+4]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_40C96E
		mov	edx, 1
		mov	ebx, 1
		mov	[esp+28Ch+var_254], 0
		mov	[esp+28Ch+var_258], 0
		mov	[esp+28Ch+var_260], 0
		mov	[esp+28Ch+var_244], 0
		mov	[esp+28Ch+var_248], 0
		mov	[esp+28Ch+var_24C], 0
		mov	[esp+28Ch+var_250], 0
		mov	[esp+28Ch+var_25C], 0
		mov	[esp+28Ch+var_238], 0
		mov	[esp+28Ch+var_234], 0
		mov	[esp+28Ch+var_230], 0
		mov	[esp+28Ch+var_23C], 0
		mov	[esp+28Ch+var_240], 0
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_40C470:				; CODE XREF: _passwd_main+378j
		mov	esi, eax
		mov	edi, offset aCrypt ; "-crypt"
		mov	ecx, 7
		repe cmpsb
		setnbe	byte ptr [esp+28Ch+var_268]
		setb	cl
		cmp	byte ptr [esp+28Ch+var_268], cl
		jz	loc_40C650
		mov	edi, offset a1_0 ; "-1"
		mov	esi, eax
		mov	ecx, 3
		repe cmpsb
		setnbe	byte ptr [esp+28Ch+var_268]
		setb	cl
		cmp	byte ptr [esp+28Ch+var_268], cl
		jz	loc_40C680
		mov	edi, offset aApr1_0 ; "-apr1"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		setnbe	byte ptr [esp+28Ch+var_268]
		setb	cl
		cmp	byte ptr [esp+28Ch+var_268], cl
		jz	loc_40C690
		mov	edi, offset aSalt_1 ; "-salt"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		setnbe	byte ptr [esp+28Ch+var_268]
		setb	cl
		cmp	byte ptr [esp+28Ch+var_268], cl
		jnz	loc_40C6A0
		mov	eax, [esp+28Ch+arg_4]
		mov	ebx, [eax+edx*4+4]
		test	ebx, ebx
		jz	short loc_40C50B
		mov	ecx, [esp+28Ch+var_224]
		test	ecx, ecx
		jz	loc_40CA67

loc_40C50B:				; CODE XREF: _passwd_main+1FDj
					; _passwd_main+3CDj ...
		mov	ecx, 1

loc_40C510:				; CODE XREF: _passwd_main+36Cj
					; _passwd_main+4EFj
		mov	ebx, [esp+28Ch+var_260]
		test	ebx, ebx
		jz	loc_40C700
		mov	eax, [esp+28Ch+var_258]
		mov	edx, [esp+28Ch+var_254]
		lea	eax, [eax+edx+1]
		mov	[esp+28Ch+var_260], 1

loc_40C530:				; CODE XREF: _passwd_main+419j
					; _passwd_main+5A3j
		dec	eax
		jle	loc_40C800

loc_40C537:				; CODE XREF: _passwd_main+502j
		mov	[esp+28Ch+var_288], offset aUsagePasswdOpt ; "Usage: passwd [options] [passwords]\n"
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset aWhereOptions_3 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset aCryptStandardU ; "-crypt		 standard Unix passwo"...
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset a1Md5BasedPassw ; "-1		 MD5-based password a"...
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset aApr1Md5BasedPa ; "-apr1		 MD5-based password a"...
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset aSaltStringUseP ; "-salt string	 use provided salt\n"
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset aInFileReadPass ; "-in file		 read passwords	from "...
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset aStdinReadPassw ; "-stdin		 read passwords	from "...
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset aNoverifyNeverV ; "-noverify		 never verify when re"...
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset aQuietNoWarning ; "-quiet		 no warnings\n"
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset aTableFormatOut ; "-table		 format	output as tab"...
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		mov	[esp+28Ch+var_288], offset aReverseSwitchT ; "-reverse		 switch	table columns"...
		mov	eax, ds:_bio_err
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_printf
		xor	esi, esi
		xor	ebx, ebx
		mov	edi, 1
		jmp	loc_40C34D
; ---------------------------------------------------------------------------
		jmp	short loc_40C650
; ---------------------------------------------------------------------------
		align 10h

loc_40C650:				; CODE XREF: _passwd_main+18Aj
					; _passwd_main+341j
		mov	[esp+28Ch+var_260], 1
		xor	ecx, ecx

loc_40C65A:				; CODE XREF: _passwd_main+38Aj
					; _passwd_main+39Aj ...
		lea	edx, [ebx+1]
		mov	eax, [esp+28Ch+arg_4]
		lea	ebp, [eax+edx*4]
		mov	eax, [ebp+0]
		test	eax, eax
		jz	loc_40C510
		mov	[esp+28Ch+var_25C], ebx
		mov	ebx, edx
		jmp	loc_40C470
; ---------------------------------------------------------------------------
		align 10h

loc_40C680:				; CODE XREF: _passwd_main+1AAj
		mov	[esp+28Ch+var_258], 1
		xor	ecx, ecx
		jmp	short loc_40C65A
; ---------------------------------------------------------------------------
		align 10h

loc_40C690:				; CODE XREF: _passwd_main+1CAj
		mov	[esp+28Ch+var_254], 1
		xor	ecx, ecx
		jmp	short loc_40C65A
; ---------------------------------------------------------------------------
		align 10h

loc_40C6A0:				; CODE XREF: _passwd_main+1EAj
		mov	edi, offset aIn_3 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		setnbe	byte ptr [esp+28Ch+var_268]
		setb	cl
		cmp	byte ptr [esp+28Ch+var_268], cl
		jnz	loc_40C770
		mov	eax, [esp+28Ch+arg_4]
		mov	edx, [eax+edx*4+4]
		test	edx, edx
		jz	loc_40C50B
		mov	ebp, [esp+28Ch+var_238]
		test	ebp, ebp
		jnz	loc_40C50B
		mov	ebx, [esp+28Ch+var_25C]
		add	ebx, 2
		mov	eax, [eax+ebx*4]
		mov	[esp+28Ch+var_240], eax
		xor	ecx, ecx
		mov	[esp+28Ch+var_238], 1
		jmp	loc_40C65A
; ---------------------------------------------------------------------------
		align 10h

loc_40C700:				; CODE XREF: _passwd_main+216j
		mov	eax, [esp+28Ch+var_254]
		mov	edx, [esp+28Ch+var_258]
		test	edx, edx
		jz	loc_40C890
		inc	eax
		mov	[esp+28Ch+var_258], 1
		jmp	loc_40C530
; ---------------------------------------------------------------------------
		align 10h

loc_40C720:				; CODE XREF: _passwd_main+22j
		call	_BIO_s_file
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_40C328
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+28Ch+var_280], edx
		mov	[esp+28Ch+var_284], 10h
		mov	[esp+28Ch+var_288], 6Ah
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_40C328
; ---------------------------------------------------------------------------
		align 10h

loc_40C770:				; CODE XREF: _passwd_main+3BAj
		mov	edi, offset aStdin_1 ; "-stdin"
		mov	esi, eax
		mov	ecx, 7
		repe cmpsb
		jz	loc_40C900
		mov	edi, offset aNoverify ;	"-noverify"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_40CA84
		mov	edi, offset aQuiet ; "-quiet"
		mov	esi, eax
		mov	ecx, 7
		repe cmpsb
		jz	loc_40CA93
		mov	edi, offset aTable ; "-table"
		mov	esi, eax
		mov	ecx, 7
		repe cmpsb
		jz	loc_40CC17
		mov	edi, offset aReverse ; "-reverse"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	loc_40CC26
		cmp	byte ptr [eax],	2Dh
		jz	loc_40C50B
		mov	esi, [esp+28Ch+var_238]
		test	esi, esi
		jnz	loc_40C50B
		mov	[esp+28Ch+var_234], ebp
		xor	ecx, ecx
		jmp	loc_40C510
; ---------------------------------------------------------------------------
		align 10h

loc_40C800:				; CODE XREF: _passwd_main+231j
		test	ecx, ecx
		jnz	loc_40C537
		mov	eax, [esp+28Ch+var_240]
		test	eax, eax
		jz	loc_40C9D0
		call	_BIO_s_file
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_40CA50
		mov	edi, [esp+28Ch+var_23C]
		test	edi, edi
		jnz	loc_40CA20

loc_40C837:				; CODE XREF: _passwd_main+73Cj
		mov	eax, [esp+28Ch+var_240]
		mov	[esp+28Ch+var_280], eax
		mov	[esp+28Ch+var_284], 3
		mov	[esp+28Ch+var_288], 6Ch
		mov	[esp+28Ch+var_28C], esi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_40CA50

loc_40C85F:				; CODE XREF: _passwd_main+710j
					; _passwd_main+762j
		mov	ebx, [esp+28Ch+var_260]
		test	ebx, ebx
		jnz	short loc_40C8B0
		mov	ecx, [esp+28Ch+var_258]
		test	ecx, ecx
		jz	loc_40C930
		mov	[esp+28Ch+var_268], 101h
		mov	edi, 102h
		mov	[esp+28Ch+var_25C], 100h
		jmp	short loc_40C8C5
; ---------------------------------------------------------------------------
		align 10h

loc_40C890:				; CODE XREF: _passwd_main+40Aj
		mov	edx, eax
		xor	edx, 1
		add	eax, edx
		mov	[esp+28Ch+var_260], edx

loc_40C89B:				; CODE XREF: _passwd_main+6C5j
		mov	[esp+28Ch+var_258], 0
		jmp	loc_40C530
; ---------------------------------------------------------------------------
		align 10h

loc_40C8B0:				; CODE XREF: _passwd_main+565j
		mov	[esp+28Ch+var_268], 9
		mov	edi, 0Ah
		mov	[esp+28Ch+var_25C], 8

loc_40C8C5:				; CODE XREF: _passwd_main+588j
					; _passwd_main+669j
		mov	edx, [esp+28Ch+var_234]
		test	edx, edx
		jz	loc_40CAA2
		test	esi, esi
		jz	loc_40CD15
		mov	[esp+28Ch+var_284], 0F4h ; unsigned int
		mov	[esp+28Ch+var_288], offset aPasswd_c ; "passwd.c"
		mov	[esp+28Ch+var_28C], offset aPasswdNull ; "passwd != NULL"
		call	__assert
; ---------------------------------------------------------------------------
		xor	ebx, ebx
		jmp	loc_40CAC8
; ---------------------------------------------------------------------------
		align 10h

loc_40C900:				; CODE XREF: _passwd_main+47Ej
		mov	edi, [esp+28Ch+var_238]
		test	edi, edi
		jnz	loc_40C50B
		xor	ecx, ecx
		mov	[esp+28Ch+var_238], 1
		mov	[esp+28Ch+var_23C], 1
		jmp	loc_40C65A
; ---------------------------------------------------------------------------
		align 10h

loc_40C930:				; CODE XREF: _passwd_main+56Dj
		mov	eax, [esp+28Ch+var_254]
		cmp	eax, 1
		sbb	edx, edx
		mov	[esp+28Ch+var_268], edx
		and	[esp+28Ch+var_268], 0FFFFFF00h
		add	[esp+28Ch+var_268], 101h
		mov	edi, edx
		and	edi, 0FFFFFF00h
		add	edi, 102h
		neg	eax
		mov	[esp+28Ch+var_25C], eax
		and	[esp+28Ch+var_25C], 100h
		jmp	loc_40C8C5
; ---------------------------------------------------------------------------

loc_40C96E:				; CODE XREF: _passwd_main+EAj
		mov	eax, 1
		mov	[esp+28Ch+var_260], 1
		mov	[esp+28Ch+var_254], 0
		mov	[esp+28Ch+var_244], 0
		mov	[esp+28Ch+var_248], 0
		mov	[esp+28Ch+var_24C], 0
		mov	[esp+28Ch+var_250], 0
		xor	ecx, ecx
		mov	[esp+28Ch+var_234], 0
		mov	[esp+28Ch+var_230], 0
		mov	[esp+28Ch+var_23C], 0
		mov	[esp+28Ch+var_240], 0
		jmp	loc_40C89B
; ---------------------------------------------------------------------------
		align 10h

loc_40C9D0:				; CODE XREF: _passwd_main+50Ej
		mov	ebp, [esp+28Ch+var_23C]
		test	ebp, ebp
		jz	loc_40CA60
		call	_BIO_s_file
		mov	[esp+28Ch+var_28C], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_40CA50
		mov	eax, ds:__imp___iob
		mov	[esp+28Ch+var_280], eax
		mov	[esp+28Ch+var_284], 0
		mov	[esp+28Ch+var_288], 6Ah
		mov	[esp+28Ch+var_28C], esi
		call	_BIO_ctrl
		jmp	loc_40C85F
; ---------------------------------------------------------------------------
		align 10h

loc_40CA20:				; CODE XREF: _passwd_main+531j
		mov	[esp+28Ch+var_284], 0BBh ; unsigned int
		mov	[esp+28Ch+var_288], offset aPasswd_c ; "passwd.c"
		mov	[esp+28Ch+var_28C], offset aIn_stdin0 ;	"in_stdin == 0"
		call	__assert
; ---------------------------------------------------------------------------
		jmp	loc_40C837
; ---------------------------------------------------------------------------
		jmp	short loc_40CA50
; ---------------------------------------------------------------------------
		align 10h

loc_40CA50:				; CODE XREF: _passwd_main+525j
					; _passwd_main+559j ...
		xor	ebx, ebx

loc_40CA52:				; CODE XREF: _passwd_main+7BEj
					; _passwd_main+863j ...
		mov	edi, 1
		jmp	loc_40C34D
; ---------------------------------------------------------------------------
		align 10h

loc_40CA60:				; CODE XREF: _passwd_main+6D6j
		xor	esi, esi
		jmp	loc_40C85F
; ---------------------------------------------------------------------------

loc_40CA67:				; CODE XREF: _passwd_main+205j
		mov	ebx, [esp+28Ch+var_25C]
		add	ebx, 2
		mov	eax, [eax+ebx*4]
		mov	[esp+28Ch+var_224], eax
		mov	[esp+28Ch+var_250], 1
		xor	ecx, ecx
		jmp	loc_40C65A
; ---------------------------------------------------------------------------

loc_40CA84:				; CODE XREF: _passwd_main+492j
		xor	ecx, ecx
		mov	[esp+28Ch+var_230], 1
		jmp	loc_40C65A
; ---------------------------------------------------------------------------

loc_40CA93:				; CODE XREF: _passwd_main+4A6j
		mov	[esp+28Ch+var_24C], 1
		xor	ecx, ecx
		jmp	loc_40C65A
; ---------------------------------------------------------------------------

loc_40CAA2:				; CODE XREF: _passwd_main+5CBj
		mov	[esp+28Ch+var_284], 0D1h
		mov	[esp+28Ch+var_288], offset aPasswd_c ; "passwd.c"
		mov	[esp+28Ch+var_28C], edi
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_40CA52
		test	esi, esi
		jz	loc_40CC35

loc_40CAC8:				; CODE XREF: _passwd_main+5F7j
		lea	ebp, [esp+28Ch+var_21C]
		lea	esi, [esi+0]

loc_40CAD0:				; CODE XREF: _passwd_main+85Dj
					; _passwd_main+8FCj
		mov	eax, [esp+28Ch+var_268]
		mov	[esp+28Ch+var_284], eax
		mov	[esp+28Ch+var_288], ebx
		mov	[esp+28Ch+var_28C], esi
		call	_BIO_gets
		test	eax, eax
		jle	loc_40CC10
		mov	[esp+28Ch+var_288], 0Ah	; int
		mov	[esp+28Ch+var_28C], ebx	; char *
		call	_strchr
		test	eax, eax
		jz	loc_40CB84
		mov	byte ptr [eax],	0
		mov	eax, [esp+28Ch+var_254]
		mov	[esp+28Ch+var_26C], eax	; int
		mov	eax, [esp+28Ch+var_258]
		mov	[esp+28Ch+var_270], eax	; int
		mov	eax, [esp+28Ch+var_260]
		mov	[esp+28Ch+var_274], eax	; int
		mov	eax, [esp+28Ch+var_25C]
		mov	[esp+28Ch+var_278], eax	; int
		mov	eax, [esp+28Ch+var_244]
		mov	[esp+28Ch+var_27C], eax	; int
		mov	eax, [esp+28Ch+var_248]
		mov	[esp+28Ch+var_280], eax	; int
		mov	eax, [esp+28Ch+var_24C]
		mov	[esp+28Ch+var_284], eax	; int
		mov	eax, [esp+28Ch+var_264]
		mov	[esp+28Ch+var_288], eax	; int
		mov	[esp+28Ch+var_28C], ebx	; char *
		lea	ecx, [esp+28Ch+var_220]
		lea	edx, [esp+28Ch+var_224]
		mov	eax, [esp+28Ch+var_250]
		call	_do_passwd
		test	eax, eax
		jnz	loc_40CAD0
		jmp	loc_40CA52
; ---------------------------------------------------------------------------
		align 10h

loc_40CB70:				; CODE XREF: _passwd_main+89Cj
		mov	[esp+28Ch+var_288], 0Ah	; int
		mov	[esp+28Ch+var_28C], ebp	; char *
		call	_strchr
		test	eax, eax
		jnz	short loc_40CB9E

loc_40CB84:				; CODE XREF: _passwd_main+7FEj
		mov	[esp+28Ch+var_284], 200h
		mov	[esp+28Ch+var_288], ebp
		mov	[esp+28Ch+var_28C], esi
		call	_BIO_gets
		mov	edi, eax
		test	eax, eax
		jg	short loc_40CB70

loc_40CB9E:				; CODE XREF: _passwd_main+882j
		mov	eax, [esp+28Ch+var_254]
		mov	[esp+28Ch+var_26C], eax	; int
		mov	eax, [esp+28Ch+var_258]
		mov	[esp+28Ch+var_270], eax	; int
		mov	eax, [esp+28Ch+var_260]
		mov	[esp+28Ch+var_274], eax	; int
		mov	eax, [esp+28Ch+var_25C]
		mov	[esp+28Ch+var_278], eax	; int
		mov	eax, [esp+28Ch+var_244]
		mov	[esp+28Ch+var_27C], eax	; int
		mov	eax, [esp+28Ch+var_248]
		mov	[esp+28Ch+var_280], eax	; int
		mov	eax, [esp+28Ch+var_24C]
		mov	[esp+28Ch+var_284], eax	; int
		mov	eax, [esp+28Ch+var_264]
		mov	[esp+28Ch+var_288], eax	; int
		mov	[esp+28Ch+var_28C], ebx	; char *
		lea	ecx, [esp+28Ch+var_220]
		lea	edx, [esp+28Ch+var_224]
		mov	eax, [esp+28Ch+var_250]
		call	_do_passwd
		test	eax, eax
		jz	loc_40CA52
		test	edi, edi
		jg	loc_40CAD0
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_40CC10:				; CODE XREF: _passwd_main+7E6j
		xor	edi, edi
		jmp	loc_40C34D
; ---------------------------------------------------------------------------

loc_40CC17:				; CODE XREF: _passwd_main+4BAj
		mov	[esp+28Ch+var_248], 1
		xor	ecx, ecx
		jmp	loc_40C65A
; ---------------------------------------------------------------------------

loc_40CC26:				; CODE XREF: _passwd_main+4CEj
		mov	[esp+28Ch+var_244], 1
		xor	ecx, ecx
		jmp	loc_40C65A
; ---------------------------------------------------------------------------

loc_40CC35:				; CODE XREF: _passwd_main+7C2j
		xor	eax, eax
		cmp	[esp+28Ch+var_250], 0
		jnz	short loc_40CC48
		xor	eax, eax
		cmp	[esp+28Ch+var_230], 0
		setz	al

loc_40CC48:				; CODE XREF: _passwd_main+93Cj
		mov	[esp+28Ch+var_280], eax
		mov	[esp+28Ch+var_284], offset aPassword ; "Password: "
		mov	[esp+28Ch+var_288], edi
		mov	[esp+28Ch+var_28C], ebx
		call	_EVP_read_pw_string
		mov	edi, 1
		test	eax, eax
		jnz	loc_40C34D
		mov	ds:_passwds_static_36365, ebx
		mov	[esp+28Ch+var_234], offset _passwds_static_36365

loc_40CC7B:				; CODE XREF: _passwd_main+A1Ej
					; .text:0040CD42j
		mov	[esp+28Ch+var_268], ebx
		mov	ebx, [esp+28Ch+var_234]
		mov	esi, [esp+28Ch+var_260]
		mov	edi, [esp+28Ch+var_258]
		mov	ebp, [esp+28Ch+var_254]
		jmp	short loc_40CCA6
; ---------------------------------------------------------------------------
		jmp	short loc_40CCA0
; ---------------------------------------------------------------------------
		align 10h

loc_40CCA0:				; CODE XREF: _passwd_main+991j
					; _passwd_main+9F6j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_40CD08

loc_40CCA6:				; CODE XREF: _passwd_main+98Fj
		add	ebx, 4
		mov	eax, [ebx-4]
		mov	[esp+28Ch+var_26C], ebp	; int
		mov	[esp+28Ch+var_270], edi	; int
		mov	[esp+28Ch+var_274], esi	; int
		mov	edx, [esp+28Ch+var_25C]
		mov	[esp+28Ch+var_278], edx	; int
		mov	edx, [esp+28Ch+var_244]
		mov	[esp+28Ch+var_27C], edx	; int
		mov	edx, [esp+28Ch+var_248]
		mov	[esp+28Ch+var_280], edx	; int
		mov	edx, [esp+28Ch+var_24C]
		mov	[esp+28Ch+var_284], edx	; int
		mov	edx, [esp+28Ch+var_264]
		mov	[esp+28Ch+var_288], edx	; int
		mov	[esp+28Ch+var_28C], eax	; char *
		lea	ecx, [esp+28Ch+var_220]
		lea	edx, [esp+28Ch+var_224]
		mov	eax, [esp+28Ch+var_250]
		call	_do_passwd
		test	eax, eax
		jnz	short loc_40CCA0
		mov	ebx, [esp+28Ch+var_268]
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40C34D
; ---------------------------------------------------------------------------

loc_40CD08:				; CODE XREF: _passwd_main+9A4j
		mov	ebx, [esp+28Ch+var_268]
		xor	esi, esi
		xor	edi, edi
		jmp	loc_40C34D
; ---------------------------------------------------------------------------

loc_40CD15:				; CODE XREF: _passwd_main+5D3j
		xor	ebx, ebx
		mov	eax, [esp+28Ch+var_234]
		cmp	dword ptr [eax], 0
		jnz	loc_40CC7B
		mov	[esp+28Ch+var_284], 0E5h ; unsigned int
		mov	[esp+28Ch+var_288], offset aPasswd_c ; "passwd.c"
		mov	[esp+28Ch+var_28C], offset aPasswdsNull	; "*passwds != NULL"
		call	__assert
_passwd_main	endp

; ---------------------------------------------------------------------------
		mov	ebx, esi
		jmp	loc_40CC7B
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_dh_cb_0	proc near		; DATA XREF: _gendh_main+21o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], 2Ah
		test	eax, eax
		jnz	short loc_40CDC0
		mov	[esp+2Ch+var_10], 2Eh

loc_40CD6A:				; CODE XREF: _dh_cb_0+7Aj _dh_cb_0+83j ...
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_24], 1
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_write
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0Bh
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_ctrl
		mov	eax, 1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40CDC0:				; CODE XREF: _dh_cb_0+13j
		cmp	eax, 1
		jnz	short loc_40CDD0
		mov	[esp+2Ch+var_10], 2Bh
		jmp	short loc_40CD6A
; ---------------------------------------------------------------------------
		align 10h

loc_40CDD0:				; CODE XREF: _dh_cb_0+73j
		cmp	eax, 2
		jz	short loc_40CD6A
		cmp	eax, 3
		jnz	short loc_40CD6A
		mov	[esp+2Ch+var_10], 0Ah
		jmp	short loc_40CD6A
_dh_cb_0	endp

; ---------------------------------------------------------------------------
		jmp	short _gendh_main
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _gendh_main
_gendh_main	proc near		; CODE XREF: .text:0040CDE1j
					; DATA XREF: .data:00455088o

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	[esp+4Ch+var_2C], 800h
		mov	[esp+4Ch+var_28], 2
		mov	ebx, ds:_bio_err
		mov	[esp+4Ch+var_24], ebx
		mov	[esp+4Ch+var_20], offset _dh_cb_0
		test	ebx, ebx
		jz	loc_40D1A3

loc_40CE21:				; CODE XREF: _gendh_main+3C7j
					; _gendh_main+3F8j
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_40D178
		mov	eax, [esp+4Ch+arg_4]
		add	eax, 4
		mov	edi, [esp+4Ch+arg_0]
		lea	ebp, [edi-1]
		mov	[esp+4Ch+var_30], 0
		mov	[esp+4Ch+var_34], 0
		mov	[esp+4Ch+var_3C], 0
		mov	[esp+4Ch+var_38], 2
		test	ebp, ebp
		jg	loc_40CFFD
		nop

loc_40CE70:				; CODE XREF: _gendh_main+207j
					; _gendh_main+2C4j
		mov	[esp+4Ch+var_44], 0
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_48], eax
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_setup_engine
		call	_BIO_s_file
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_40D259
		mov	ecx, [esp+4Ch+var_3C]
		test	ecx, ecx
		jz	loc_40D21D
		mov	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 5
		mov	[esp+4Ch+var_48], 6Ch
		mov	[esp+4Ch+var_4C], esi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_40D246

loc_40CED8:				; CODE XREF: _gendh_main+451j
		mov	[esp+4Ch+var_44], 1
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], 0
		call	_app_RAND_load_file
		test	eax, eax
		jnz	loc_40D192
		mov	edx, [esp+4Ch+var_34]
		test	edx, edx
		jz	loc_40D26B

loc_40CF09:				; CODE XREF: _gendh_main+3AEj
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_4C], eax
		call	_app_RAND_load_files
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aLdSemiRandom_0 ; "%ld	semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf

loc_40CF2E:				; CODE XREF: _gendh_main+3A8j
					; _gendh_main+490j
		mov	ebx, [esp+4Ch+var_38]
		mov	[esp+4Ch+var_40], ebx
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aGeneratingDh_0 ; "Generating DH parameters, %d bit long s"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aThisIsGoingT_0 ; "This is going to take a long time\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		call	_DH_new
		mov	edi, eax
		test	eax, eax
		jz	short loc_40CF97
		lea	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], ebx
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	_DH_generate_parameters_ex
		test	eax, eax
		jnz	loc_40D1ED

loc_40CF97:				; CODE XREF: _gendh_main+181j
					; _gendh_main+420j ...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_ERR_print_errors
		mov	eax, 1

loc_40CFA9:				; CODE XREF: _gendh_main+428j
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_4C], esi
		call	_BIO_free_all
		test	edi, edi
		mov	eax, [esp+4Ch+var_3C]
		jz	loc_40D18A
		mov	[esp+4Ch+var_4C], edi
		call	_DH_free
		mov	eax, [esp+4Ch+var_3C]
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40CFE0:				; CODE XREF: _gendh_main+21Dj
		dec	ebp
		jz	loc_40D0C0
		mov	edx, [eax+4]
		mov	[esp+4Ch+var_3C], edx
		add	eax, 4

loc_40CFF1:				; CODE XREF: _gendh_main+25Cj
					; _gendh_main+268j ...
		add	eax, 4
		dec	ebp
		test	ebp, ebp
		jle	loc_40CE70

loc_40CFFD:				; CODE XREF: _gendh_main+79j
		mov	edx, [eax]
		mov	esi, edx
		mov	edi, offset aOut_5 ; "-out"
		mov	ecx, 5
		repe cmpsb
		jz	short loc_40CFE0
		mov	edi, offset a2_0 ; "-2"
		mov	esi, edx
		mov	ecx, 3
		repe cmpsb
		jz	short loc_40D050
		mov	edi, offset a5_0 ; "-5"
		mov	esi, edx
		mov	ecx, 3
		repe cmpsb
		jz	short loc_40D060
		mov	edi, offset aEngine_5 ;	"-engine"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jnz	short loc_40D070
		dec	ebp
		jz	short loc_40D0C0
		mov	edx, [eax+4]
		mov	[esp+4Ch+var_30], edx
		add	eax, 4
		jmp	short loc_40CFF1
; ---------------------------------------------------------------------------
		align 10h

loc_40D050:				; CODE XREF: _gendh_main+22Dj
		mov	[esp+4Ch+var_38], 2
		jmp	short loc_40CFF1
; ---------------------------------------------------------------------------
		align 10h

loc_40D060:				; CODE XREF: _gendh_main+23Dj
		mov	[esp+4Ch+var_38], 5
		jmp	short loc_40CFF1
; ---------------------------------------------------------------------------
		align 10h

loc_40D070:				; CODE XREF: _gendh_main+24Dj
		mov	edi, offset aRand_2 ; "-rand"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jnz	short loc_40D092
		dec	ebp
		jz	short loc_40D0C0
		mov	esi, [eax+4]
		mov	[esp+4Ch+var_34], esi
		add	eax, 4
		jmp	loc_40CFF1
; ---------------------------------------------------------------------------

loc_40D092:				; CODE XREF: _gendh_main+28Ej
		lea	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aD_2 ;	"%d"
		mov	[esp+4Ch+var_4C], edx ;	char *
		call	_sscanf
		test	eax, eax
		jz	short loc_40D0C0
		mov	ebx, [esp+4Ch+var_2C]
		test	ebx, ebx
		jns	loc_40CE70
		lea	esi, [esi+0]

loc_40D0C0:				; CODE XREF: _gendh_main+1F1j
					; _gendh_main+250j ...
		mov	[esp+4Ch+var_48], offset aUsageGendhArgs ; "usage: gendh [args]	[numbits]\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aOutFileOutputT ; " -out file - output	the key	to 'file\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset a2Use2AsTheGene ; " -2	       - use 2 as the generator	val"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset a5Use5AsTheGene ; " -5	       - use 5 as the generator	val"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aEngineEUseEn_4 ; " -engine e - use engine e, possibly	a h"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_40], 3Bh
		mov	[esp+4Ch+var_44], 3Bh
		mov	[esp+4Ch+var_48], offset aRandFileCfil_1 ; " -rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aLoadTheFileO_1 ; "	       - load the file (or the file"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aTheRandomNum_1 ; "		 the random number generato"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf

loc_40D178:				; CODE XREF: _gendh_main+43j
					; _gendh_main+476j
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_ERR_print_errors
		mov	eax, 1

loc_40D18A:				; CODE XREF: _gendh_main+1CBj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40D192:				; CODE XREF: _gendh_main+107j
		mov	eax, [esp+4Ch+var_34]
		test	eax, eax
		jz	loc_40CF2E
		jmp	loc_40CF09
; ---------------------------------------------------------------------------

loc_40D1A3:				; CODE XREF: _gendh_main+2Bj
		call	_BIO_s_file
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_40CE21
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], 10h
		mov	[esp+4Ch+var_48], 6Ah
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_40CE21
; ---------------------------------------------------------------------------

loc_40D1ED:				; CODE XREF: _gendh_main+1A1j
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], 0
		call	_app_RAND_write_file
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], esi
		call	_PEM_write_bio_DHparams
		test	eax, eax
		jz	loc_40CF97
		xor	eax, eax
		jmp	loc_40CFA9
; ---------------------------------------------------------------------------

loc_40D21D:				; CODE XREF: _gendh_main+BAj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 6Ah
		mov	[esp+4Ch+var_4C], esi
		call	_BIO_ctrl
		jmp	loc_40CED8
; ---------------------------------------------------------------------------

loc_40D246:				; CODE XREF: _gendh_main+E2j
		mov	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	_perror
		xor	edi, edi
		jmp	loc_40CF97
; ---------------------------------------------------------------------------

loc_40D259:				; CODE XREF: _gendh_main+AEj
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_ERR_print_errors
		jmp	loc_40D178
; ---------------------------------------------------------------------------

loc_40D26B:				; CODE XREF: _gendh_main+113j
		mov	[esp+4Ch+var_48], offset aWarningNotMu_0 ; "warning, not much extra random data, co"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		jmp	loc_40CF2E
_gendh_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _errstr_main
_errstr_main	proc near		; DATA XREF: .data:00455094o

var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_130		= dword	ptr -130h
var_120		= dword	ptr -120h
var_11C		= byte ptr -11Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 13Ch
		mov	ebx, [esp+14Ch+arg_4]
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_40D3F7

loc_40D2AE:				; CODE XREF: _errstr_main+17Bj
					; _errstr_main+1A6j
		call	_SSL_load_error_strings
		cmp	[esp+14Ch+arg_0], 1
		jle	loc_40D3E0
		mov	esi, [ebx+4]
		mov	edi, offset aStats ; "-stats"
		mov	ecx, 7
		repe cmpsb
		jz	loc_40D380

loc_40D2D6:				; CODE XREF: _errstr_main+149j
		mov	[esp+14Ch+var_130], 0
		mov	esi, 1
		lea	ebp, [esp+14Ch+var_120]
		lea	edi, [esp+14Ch+var_11C]
		jmp	short loc_40D31A
; ---------------------------------------------------------------------------
		align 10h

loc_40D2F0:				; CODE XREF: _errstr_main+A3j
		mov	[esp+14Ch+var_144], 100h
		mov	[esp+14Ch+var_148], edi
		mov	eax, [esp+14Ch+var_120]
		mov	[esp+14Ch+var_14C], eax
		call	_ERR_error_string_n
		mov	[esp+14Ch+var_14C], edi	; char *
		call	_puts
		inc	esi
		cmp	esi, [esp+14Ch+arg_0]
		jge	short loc_40D362

loc_40D31A:				; CODE XREF: _errstr_main+5Bj
					; _errstr_main+D0j
		mov	eax, [ebx+esi*4]
		mov	[esp+14Ch+var_144], ebp
		mov	[esp+14Ch+var_148], offset aLx ; "%lx"
		mov	[esp+14Ch+var_14C], eax	; char *
		call	_sscanf
		test	eax, eax
		jnz	short loc_40D2F0
		mov	eax, [ebx+esi*4]
		mov	[esp+14Ch+var_148], eax
		mov	[esp+14Ch+var_14C], offset aSBadErrorCode ; "%s: bad error code\n"
		call	_printf
		mov	[esp+14Ch+var_14C], offset aUsageErrstrSta ; "usage: errstr [-stats] <errno> ..."
		call	_puts
		inc	[esp+14Ch+var_130]
		inc	esi
		cmp	esi, [esp+14Ch+arg_0]
		jl	short loc_40D31A

loc_40D362:				; CODE XREF: _errstr_main+88j
		mov	eax, [esp+14Ch+var_130]
		add	esp, 13Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_40D380
; ---------------------------------------------------------------------------
		align 10h

loc_40D380:				; CODE XREF: _errstr_main+40j
					; _errstr_main+E1j
		call	_BIO_s_file
		mov	[esp+14Ch+var_14C], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_40D3C7
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+14Ch+var_140], eax
		mov	[esp+14Ch+var_144], 0
		mov	[esp+14Ch+var_148], 6Ah
		mov	[esp+14Ch+var_14C], esi
		call	_BIO_ctrl
		test	eax, eax
		jnz	loc_40D43B

loc_40D3BF:				; CODE XREF: _errstr_main+1DEj
		mov	[esp+14Ch+var_14C], esi
		call	_BIO_free_all

loc_40D3C7:				; CODE XREF: _errstr_main+101j
		dec	[esp+14Ch+arg_0]
		add	ebx, 4
		cmp	[esp+14Ch+arg_0], 1
		jnz	loc_40D2D6
		nop

loc_40D3E0:				; CODE XREF: _errstr_main+2Bj
		mov	[esp+14Ch+var_130], 0
		mov	eax, [esp+14Ch+var_130]
		add	esp, 13Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_40D3F7:				; CODE XREF: _errstr_main+18j
		call	_BIO_s_file
		mov	[esp+14Ch+var_14C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_40D2AE
		mov	ecx, ds:__imp___iob
		lea	edx, [ecx+40h]
		mov	[esp+14Ch+var_140], edx
		mov	[esp+14Ch+var_144], 10h
		mov	[esp+14Ch+var_148], 6Ah
		mov	[esp+14Ch+var_14C], eax
		call	_BIO_ctrl
		jmp	loc_40D2AE
; ---------------------------------------------------------------------------

loc_40D43B:				; CODE XREF: _errstr_main+129j
		call	_ERR_get_string_table
		mov	[esp+14Ch+var_148], esi
		mov	[esp+14Ch+var_14C], eax
		call	_lh_node_stats_bio
		call	_ERR_get_string_table
		mov	[esp+14Ch+var_148], esi
		mov	[esp+14Ch+var_14C], eax
		call	_lh_stats_bio
		call	_ERR_get_string_table
		mov	[esp+14Ch+var_148], esi
		mov	[esp+14Ch+var_14C], eax
		call	_lh_node_usage_stats_bio
		jmp	loc_40D3BF
_errstr_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl make_revocation_str(int, char *)
		public _make_revocation_str
_make_revocation_str proc near		; CODE XREF: _do_revoke+10Cp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		cmp	[esp+2Ch+arg_0], 2
		jz	loc_40D540
		jg	short loc_40D500
		cmp	[esp+2Ch+arg_0], 1
		jnz	loc_40D660
		xor	ebx, ebx
		mov	edi, ds:__imp___stricmp
		mov	esi, esi
		lea	edi, [edi+0]

loc_40D4B0:				; CODE XREF: _make_revocation_str+50j
		mov	esi, ds:_crl_reasons[ebx*4]
		mov	[esp+2Ch+var_28], esi
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], eax
		call	edi
		test	eax, eax
		jz	loc_40D680
		inc	ebx
		cmp	ebx, 8
		jnz	short loc_40D4B0

loc_40D4D2:				; CODE XREF: _make_revocation_str+204j
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aUnknownCrlReas ; "Unknown CRL	reason %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_40D64D
; ---------------------------------------------------------------------------
		align 10h

loc_40D500:				; CODE XREF: _make_revocation_str+12j
		cmp	[esp+2Ch+arg_0], 4
		jg	loc_40D660
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], 0
		call	_ASN1_GENERALIZEDTIME_set_string
		test	eax, eax
		jz	loc_40D694
		cmp	[esp+2Ch+arg_0], 3
		jz	loc_40D670
		mov	esi, offset aCakeytime ; "CAkeyTime"
		jmp	short loc_40D56B
; ---------------------------------------------------------------------------
		align 10h

loc_40D540:				; CODE XREF: _make_revocation_str+Cj
		mov	[esp+2Ch+var_28], 0
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], eax
		call	_OBJ_txt2obj
		mov	ebx, eax
		mov	[esp+2Ch+var_2C], eax
		call	_ASN1_OBJECT_free
		test	ebx, ebx
		jz	loc_40D6B5
		mov	esi, offset aHoldinstructio ; "holdInstruction"

loc_40D56B:				; CODE XREF: _make_revocation_str+B7j
					; _make_revocation_str+1EAj ...
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], 0
		call	_X509_gmtime_adj
		mov	ebp, eax
		test	eax, eax
		jz	loc_40D690
		mov	edi, [eax]
		lea	ebx, [edi+1]
		test	esi, esi
		jz	short loc_40D59E
		mov	[esp+2Ch+var_2C], esi ;	char *
		call	_strlen
		lea	ebx, [edi+eax+2]

loc_40D59E:				; CODE XREF: _make_revocation_str+110j
		mov	edx, [esp+2Ch+arg_4]
		test	edx, edx
		jz	short loc_40D5B6
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], eax ;	char *
		call	_strlen
		lea	ebx, [ebx+eax+1]

loc_40D5B6:				; CODE XREF: _make_revocation_str+124j
		mov	[esp+2Ch+var_24], 0A6Eh
		mov	[esp+2Ch+var_28], offset aCa_c ; "ca.c"
		mov	[esp+2Ch+var_2C], ebx
		call	_CRYPTO_malloc
		mov	edi, eax
		test	eax, eax
		jz	loc_40D690
		mov	eax, [ebp+8]
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edi
		call	_BUF_strlcpy
		test	esi, esi
		jz	short loc_40D613
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset asc_45C0EB ; ","
		mov	[esp+2Ch+var_2C], edi
		call	_BUF_strlcat
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], edi
		call	_BUF_strlcat

loc_40D613:				; CODE XREF: _make_revocation_str+16Dj
		mov	eax, [esp+2Ch+arg_4]
		test	eax, eax
		jz	short loc_40D643
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset asc_45C0EB ; ","
		mov	[esp+2Ch+var_2C], edi
		call	_BUF_strlcat
		mov	[esp+2Ch+var_24], ebx
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], edi
		call	_BUF_strlcat

loc_40D643:				; CODE XREF: _make_revocation_str+199j
		mov	[esp+2Ch+var_2C], ebp
		call	_ASN1_UTCTIME_free
		mov	eax, edi

loc_40D64D:				; CODE XREF: _make_revocation_str+71j
					; _make_revocation_str+212j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40D660:				; CODE XREF: _make_revocation_str+19j
					; _make_revocation_str+85j
		xor	esi, esi

loc_40D662:				; CODE XREF: _make_revocation_str+202j
		mov	[esp+2Ch+arg_4], 0
		jmp	loc_40D56B
; ---------------------------------------------------------------------------
		align 10h

loc_40D670:				; CODE XREF: _make_revocation_str+ACj
		mov	esi, offset aKeytime ; "keyTime"
		jmp	loc_40D56B
; ---------------------------------------------------------------------------
		align 10h

loc_40D680:				; CODE XREF: _make_revocation_str+46j
		test	esi, esi
		jnz	short loc_40D662
		jmp	loc_40D4D2
; ---------------------------------------------------------------------------
		align 10h

loc_40D690:				; CODE XREF: _make_revocation_str+103j
					; _make_revocation_str+152j
		xor	eax, eax
		jmp	short loc_40D64D
; ---------------------------------------------------------------------------

loc_40D694:				; CODE XREF: _make_revocation_str+A1j
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aInvalidTimeFor ; "Invalid time format	%s. Need YYYYMMDDHH"...
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	short loc_40D64D
; ---------------------------------------------------------------------------

loc_40D6B5:				; CODE XREF: _make_revocation_str+E0j
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aInvalidObjectI ; "Invalid object identifier %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_40D64D
_make_revocation_str endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl do_revoke(char *)
_do_revoke	proc near		; CODE XREF: _do_revoke+33Dp
					; _ca_main+3291p

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= byte ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebp, eax
		mov	[esp+5Ch+var_48], edx
		mov	[esp+5Ch+var_44], ecx
		lea	ebx, [esp+5Ch+var_34]
		mov	ecx, 6
		xor	eax, eax
		mov	edi, ebx
		rep stosd
		mov	[esp+5Ch+var_5C], ebp
		call	_X509_get_subject_name
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], eax
		call	_X509_NAME_oneline
		mov	[esp+5Ch+var_20], eax
		mov	[esp+5Ch+var_5C], ebp
		call	_X509_get_serialNumber
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], eax
		call	_ASN1_INTEGER_to_BN
		mov	esi, eax
		test	eax, eax
		jz	loc_40DABA
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_40D830
		mov	[esp+5Ch+var_5C], esi
		call	_BN_bn2hex
		mov	[esp+5Ch+var_28], eax

loc_40D75D:				; CODE XREF: _do_revoke+160j
		mov	[esp+5Ch+var_5C], esi
		call	_BN_free
		mov	edi, [esp+5Ch+var_20]
		test	edi, edi
		jz	loc_40DA4D
		mov	esi, [esp+5Ch+var_28]
		test	esi, esi
		jz	loc_40DA4D
		mov	eax, [esp+5Ch+var_48]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], 3
		mov	[esp+5Ch+var_5C], eax
		call	_TXT_DB_get_by_index
		mov	esi, eax
		test	eax, eax
		jz	loc_40D850
		mov	[esp+5Ch+var_58], eax ;	char *
		mov	[esp+5Ch+var_5C], ebx ;	char *
		call	_index_name_cmp
		test	eax, eax
		jnz	loc_40DA6C
		mov	eax, [esi]
		cmp	byte ptr [eax],	52h
		jz	loc_40DA93
		mov	eax, [esi+0Ch]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aRevokingCertif ; "Revoking Certificate %s.\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_58], eax ;	char *
		mov	eax, [esp+5Ch+var_44]
		mov	[esp+5Ch+var_5C], eax ;	int
		call	_make_revocation_str
		test	eax, eax
		jz	loc_40DB26
		mov	edx, [esi]
		mov	byte ptr [edx],	52h
		mov	edx, [esi]
		mov	byte ptr [edx+1], 0
		mov	[esi+8], eax
		mov	esi, 1

loc_40D80C:				; CODE XREF: _do_revoke+344j
					; _do_revoke+387j ...
		lea	edi, [esp+5Ch+var_1C]

loc_40D810:				; CODE XREF: _do_revoke+143j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_40D81E
		mov	[esp+5Ch+var_5C], eax
		call	_CRYPTO_free

loc_40D81E:				; CODE XREF: _do_revoke+134j
		add	ebx, 4
		cmp	ebx, edi
		jnz	short loc_40D810
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40D830:				; CODE XREF: _do_revoke+6Bj
		mov	[esp+5Ch+var_5C], offset a00 ; "00"
		call	_BUF_strdup
		mov	[esp+5Ch+var_28], eax
		jmp	loc_40D75D
; ---------------------------------------------------------------------------
		align 10h

loc_40D850:				; CODE XREF: _do_revoke+BCj
		mov	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_50], eax
		mov	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aAddingEntryWit ; "Adding Entry with serial number %s to D"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_54], 93Bh
		mov	[esp+5Ch+var_58], offset aCa_c ; "ca.c"
		mov	[esp+5Ch+var_5C], 2
		call	_CRYPTO_malloc
		mov	dword ptr [esp+5Ch+var_34], eax
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	edx, [eax+4]
		mov	[esp+5Ch+var_54], 93Eh
		mov	[esp+5Ch+var_58], offset aCa_c ; "ca.c"
		mov	eax, [edx]
		mov	[esp+5Ch+var_40], edx
		inc	eax
		mov	[esp+5Ch+var_5C], eax
		call	_CRYPTO_malloc
		mov	edi, eax
		mov	[esp+5Ch+var_30], eax
		mov	edx, [esp+5Ch+var_40]
		mov	eax, [edx]
		mov	esi, [edx+8]
		cmp	eax, 4
		jnb	loc_40DA29

loc_40D8D5:				; CODE XREF: _do_revoke+368j
		xor	ecx, ecx
		test	al, 2
		jz	short loc_40D8E6
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_40D8E6:				; CODE XREF: _do_revoke+1F9j
		test	al, 1
		jz	short loc_40D8F4
		mov	al, [esi+ecx]
		mov	byte ptr [esp+5Ch+var_40], al
		mov	[edi+ecx], al

loc_40D8F4:				; CODE XREF: _do_revoke+208j
		mov	eax, [edx]
		mov	edx, [esp+5Ch+var_30]
		mov	byte ptr [edx+eax], 0
		mov	[esp+5Ch+var_2C], 0
		mov	[esp+5Ch+var_54], 945h
		mov	[esp+5Ch+var_58], offset aCa_c ; "ca.c"
		mov	[esp+5Ch+var_5C], 8
		call	_CRYPTO_malloc
		mov	[esp+5Ch+var_24], eax
		mov	ecx, dword ptr [esp+5Ch+var_34]
		test	ecx, ecx
		jz	loc_40DA4D
		mov	edx, [esp+5Ch+var_30]
		test	edx, edx
		jz	loc_40DA4D
		test	eax, eax
		jz	loc_40DA4D
		mov	[esp+5Ch+var_54], 8
		mov	[esp+5Ch+var_58], offset aUnknown_0 ; "unknown"
		mov	[esp+5Ch+var_5C], eax
		call	_BUF_strlcpy
		mov	eax, dword ptr [esp+5Ch+var_34]
		mov	byte ptr [eax],	56h
		mov	eax, dword ptr [esp+5Ch+var_34]
		mov	byte ptr [eax+1], 0
		mov	[esp+5Ch+var_54], 953h
		mov	[esp+5Ch+var_58], offset aCa_c ; "ca.c"
		mov	[esp+5Ch+var_5C], 1Ch
		call	_CRYPTO_malloc
		test	eax, eax
		jz	loc_40DA4D
		mov	edx, dword ptr [esp+5Ch+var_34]
		mov	[eax], edx
		mov	dword ptr [esp+5Ch+var_34], 0
		mov	edx, [esp+5Ch+var_30]
		mov	[eax+4], edx
		mov	[esp+5Ch+var_30], 0
		mov	edx, [esp+5Ch+var_2C]
		mov	[eax+8], edx
		mov	[esp+5Ch+var_2C], 0
		mov	edx, [esp+5Ch+var_28]
		mov	[eax+0Ch], edx
		mov	[esp+5Ch+var_28], 0
		mov	edx, [esp+5Ch+var_24]
		mov	[eax+10h], edx
		mov	[esp+5Ch+var_24], 0
		mov	edx, [esp+5Ch+var_20]
		mov	[eax+14h], edx
		mov	[esp+5Ch+var_20], 0
		mov	dword ptr [eax+18h], 0
		mov	ecx, [esp+5Ch+var_48]
		mov	edx, [ecx+4]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edx
		call	_TXT_DB_insert
		test	eax, eax
		jz	loc_40DAE4
		mov	eax, [esp+5Ch+arg_0]
		mov	[esp+5Ch+var_5C], eax ;	char *
		mov	ecx, [esp+5Ch+var_44]
		mov	edx, [esp+5Ch+var_48]
		mov	eax, ebp
		call	_do_revoke
		mov	esi, eax
		jmp	loc_40D80C
; ---------------------------------------------------------------------------

loc_40DA29:				; CODE XREF: _do_revoke+1EFj
		test	edi, 1
		jnz	loc_40DAD8

loc_40DA35:				; CODE XREF: _do_revoke+3FFj
		test	edi, 2
		jnz	loc_40DAC4

loc_40DA41:				; CODE XREF: _do_revoke+3F3j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_40D8D5
; ---------------------------------------------------------------------------

loc_40DA4D:				; CODE XREF: _do_revoke+8Bj
					; _do_revoke+97j ...
		mov	[esp+5Ch+var_58], offset aMemoryAlloca_0 ; "Memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_40D80C
; ---------------------------------------------------------------------------

loc_40DA6C:				; CODE XREF: _do_revoke+D0j
		mov	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aErrorNameDoesN ; "ERROR:name does not	match %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_40D80C
; ---------------------------------------------------------------------------

loc_40DA93:				; CODE XREF: _do_revoke+DBj
		mov	eax, [esp+5Ch+var_28]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aErrorAlreadyRe ; "ERROR:Already revoked, serial number %s"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_40D80C
; ---------------------------------------------------------------------------

loc_40DABA:				; CODE XREF: _do_revoke+60j
		mov	esi, 0FFFFFFFFh
		jmp	loc_40D80C
; ---------------------------------------------------------------------------

loc_40DAC4:				; CODE XREF: _do_revoke+35Bj
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_40DA41
; ---------------------------------------------------------------------------

loc_40DAD8:				; CODE XREF: _do_revoke+34Fj
		mov	cl, [esi]
		mov	[edi], cl
		inc	edi
		inc	esi
		dec	eax
		jmp	loc_40DA35
; ---------------------------------------------------------------------------

loc_40DAE4:				; CODE XREF: _do_revoke+326j
		mov	[esp+5Ch+var_58], offset aFailedToUpdate ; "failed to update database\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, [esp+5Ch+var_48]
		mov	eax, [eax+4]
		mov	eax, [eax+10h]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aTxt_dbErrorNum ; "TXT_DB error number	%ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_40D80C
; ---------------------------------------------------------------------------

loc_40DB26:				; CODE XREF: _do_revoke+113j
		mov	[esp+5Ch+var_58], offset aErrorInRevocat ; "Error in revocation	arguments\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_40D80C
_do_revoke	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _old_entry_print
_old_entry_print proc near		; CODE XREF: _do_body+268p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_35		= byte ptr -35h
var_34		= byte ptr -34h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebx
		call	_i2a_ASN1_OBJECT
		mov	edx, 16h
		sub	edx, eax
		lea	esi, [esp+4Ch+var_35]
		test	edx, edx
		jle	loc_40DD75
		mov	ebp, edx
		mov	edi, esi
		cmp	edx, 4
		jnb	loc_40DCD0

loc_40DB8B:				; CODE XREF: _old_entry_print+1A4j
		test	ebp, 2
		jnz	loc_40DC90
		and	ebp, 1
		jnz	loc_40DC80

loc_40DBA0:				; CODE XREF: _old_entry_print+133j
					; _old_entry_print+14Bj
		add	edx, esi

loc_40DBA2:				; CODE XREF: _old_entry_print+227j
		mov	byte ptr [edx],	3Ah
		mov	byte ptr [edx+1], 0
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_puts
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax+4]
		cmp	eax, 13h
		jz	loc_40DD20
		cmp	eax, 14h
		jz	loc_40DD40
		cmp	eax, 16h
		jz	loc_40DD60
		cmp	eax, 1Ch
		jz	loc_40DD00
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aAsn_12d ; "ASN.1 %2d:'"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf

loc_40DBF4:				; CODE XREF: _old_entry_print+1C0j
					; _old_entry_print+1E0j ...
		mov	eax, [esp+4Ch+arg_8]
		mov	esi, [eax+8]
		mov	eax, [eax]
		lea	ebp, [esi+eax]
		test	eax, eax
		jg	short loc_40DC34
		jmp	short loc_40DC58
; ---------------------------------------------------------------------------
		align 10h

loc_40DC10:				; CODE XREF: _old_entry_print+EDj
		test	al, al
		js	loc_40DCB0
		add	eax, 40h
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aC_5 ;	"^%c"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf

loc_40DC2F:				; CODE XREF: _old_entry_print+174j
		inc	esi
		cmp	esi, ebp
		jz	short loc_40DC58

loc_40DC34:				; CODE XREF: _old_entry_print+B2j
					; _old_entry_print+106j
		movsx	eax, byte ptr [esi]
		lea	edx, [eax-20h]
		cmp	dl, 5Eh
		ja	short loc_40DC10
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aC_6 ;	"%c"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		inc	esi
		cmp	esi, ebp
		jnz	short loc_40DC34

loc_40DC58:				; CODE XREF: _old_entry_print+B4j
					; _old_entry_print+E2j
		mov	[esp+4Ch+var_48], offset asc_45C23D ; "'\n"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		mov	eax, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40DC80:				; CODE XREF: _old_entry_print+4Aj
					; _old_entry_print+151j
		mov	byte ptr [edi],	20h
		jmp	loc_40DBA0
; ---------------------------------------------------------------------------
		align 10h

loc_40DC90:				; CODE XREF: _old_entry_print+41j
		mov	word ptr [edi],	2020h
		add	edi, 2
		and	ebp, 1
		jz	loc_40DBA0
		jmp	short loc_40DC80
; ---------------------------------------------------------------------------
		align 10h

loc_40DCB0:				; CODE XREF: _old_entry_print+C2j
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset a0x02x_3 ; "\\0x%02X"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		jmp	loc_40DC2F
; ---------------------------------------------------------------------------
		align 10h

loc_40DCD0:				; CODE XREF: _old_entry_print+35j
		test	esi, 1
		jnz	loc_40DD8C

loc_40DCDC:				; CODE XREF: _old_entry_print+246j
		test	edi, 2
		jnz	loc_40DD7C

loc_40DCE8:				; CODE XREF: _old_entry_print+237j
		mov	ecx, ebp
		shr	ecx, 2
		mov	eax, 20202020h
		rep stosd
		jmp	loc_40DB8B
; ---------------------------------------------------------------------------
		align 10h

loc_40DD00:				; CODE XREF: _old_entry_print+8Aj
		mov	[esp+4Ch+var_48], offset aUniversalstrin ; "UNIVERSALSTRING:'"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		jmp	loc_40DBF4
; ---------------------------------------------------------------------------
		align 10h

loc_40DD20:				; CODE XREF: _old_entry_print+6Fj
		mov	[esp+4Ch+var_48], offset aPrintable ; "PRINTABLE:'"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		jmp	loc_40DBF4
; ---------------------------------------------------------------------------
		align 10h

loc_40DD40:				; CODE XREF: _old_entry_print+78j
		mov	[esp+4Ch+var_48], offset aT61string ; "T61STRING:'"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		jmp	loc_40DBF4
; ---------------------------------------------------------------------------
		align 10h

loc_40DD60:				; CODE XREF: _old_entry_print+81j
		mov	[esp+4Ch+var_48], offset aIa5string ; "IA5STRING:'"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		jmp	loc_40DBF4
; ---------------------------------------------------------------------------

loc_40DD75:				; CODE XREF: _old_entry_print+28j
		mov	edx, esi
		jmp	loc_40DBA2
; ---------------------------------------------------------------------------

loc_40DD7C:				; CODE XREF: _old_entry_print+192j
		mov	word ptr [edi],	2020h
		add	edi, 2
		sub	ebp, 2
		jmp	loc_40DCE8
; ---------------------------------------------------------------------------

loc_40DD8C:				; CODE XREF: _old_entry_print+186j
		mov	byte ptr [esi],	20h
		lea	edi, [esp+4Ch+var_34]
		lea	ebp, [edx-1]
		jmp	loc_40DCDC
_old_entry_print endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _unpack_revinfo
_unpack_revinfo	proc near		; CODE XREF: _make_revoked+50p
					; _ocsp_main+110Ep

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_3C], eax
		call	_BUF_strdup
		mov	edi, eax
		test	eax, eax
		jz	loc_40E030
		mov	[esp+3Ch+var_38], 2Ch ;	int
		mov	[esp+3Ch+var_3C], eax ;	char *
		call	_strchr
		test	eax, eax
		jz	loc_40DF10
		mov	byte ptr [eax],	0
		lea	ebx, [eax+1]
		mov	[esp+3Ch+var_38], 2Ch ;	int
		mov	[esp+3Ch+var_3C], ebx ;	char *
		call	_strchr
		test	eax, eax
		jz	loc_40DF20
		mov	byte ptr [eax],	0
		inc	eax
		mov	[esp+3Ch+var_24], eax

loc_40DDFF:				; CODE XREF: _unpack_revinfo+17Aj
					; _unpack_revinfo+188j
		test	esi, esi
		jz	short loc_40DE26
		call	_ASN1_UTCTIME_new
		mov	[esi], eax
		test	eax, eax
		jz	loc_40DFB0
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], eax
		call	_ASN1_UTCTIME_set_string
		test	eax, eax
		jz	loc_40DEB0

loc_40DE26:				; CODE XREF: _unpack_revinfo+61j
		test	ebx, ebx
		jz	loc_40DF30
		xor	ebp, ebp
		mov	esi, ds:__imp___stricmp
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_40DE40:				; CODE XREF: _unpack_revinfo+B8j
		mov	eax, ds:_crl_reasons[ebp*4]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	esi
		test	eax, eax
		jz	short loc_40DEC0
		inc	ebp
		cmp	ebp, 0Bh
		jnz	short loc_40DE40
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], offset aInvalidReasonC ; "invalid reason code	%s\n"

loc_40DE66:				; CODE XREF: _unpack_revinfo+11Cj
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		xor	ebx, ebx
		xor	esi, esi
		xor	eax, eax

loc_40DE79:				; CODE XREF: _unpack_revinfo+169j
					; _unpack_revinfo+22Bj	...
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_3C], edi
		call	_CRYPTO_free
		mov	eax, [esp+3Ch+var_24]

loc_40DE89:				; CODE XREF: _unpack_revinfo+2ABj
		mov	ecx, [esp+3Ch+arg_8]
		test	ecx, ecx
		jz	loc_40E050

loc_40DE95:				; CODE XREF: _unpack_revinfo+2C0j
		mov	edx, [esp+3Ch+arg_C]
		test	edx, edx
		jz	loc_40DF40
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40DEB0:				; CODE XREF: _unpack_revinfo+80j
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], offset aInvalidRevocat ; "invalid revocation date %s\n"
		jmp	short loc_40DE66
; ---------------------------------------------------------------------------
		align 10h

loc_40DEC0:				; CODE XREF: _unpack_revinfo+B2j
		mov	ecx, ebp
		cmp	ebp, 7
		jz	loc_40E070
		cmp	ebp, 8
		jz	loc_40DF60
		lea	edx, [ebp-9]
		cmp	edx, 1
		jbe	loc_40DFD0
		xor	ebx, ebx
		xor	esi, esi

loc_40DEE4:				; CODE XREF: _unpack_revinfo+199j
					; _unpack_revinfo+203j	...
		mov	eax, [esp+3Ch+arg_4]
		test	eax, eax
		jz	short loc_40DEF2
		mov	eax, [esp+3Ch+arg_4]
		mov	[eax], ecx

loc_40DEF2:				; CODE XREF: _unpack_revinfo+14Aj
		mov	ebp, [esp+3Ch+arg_C]
		test	ebp, ebp
		jz	loc_40E0A4
		mov	eax, [esp+3Ch+arg_C]
		mov	[eax], ebx
		mov	eax, 1
		jmp	loc_40DE79
; ---------------------------------------------------------------------------
		align 10h

loc_40DF10:				; CODE XREF: _unpack_revinfo+33j
		mov	[esp+3Ch+var_24], 0
		xor	ebx, ebx
		jmp	loc_40DDFF
; ---------------------------------------------------------------------------
		align 10h

loc_40DF20:				; CODE XREF: _unpack_revinfo+51j
		mov	[esp+3Ch+var_24], 0
		jmp	loc_40DDFF
; ---------------------------------------------------------------------------
		align 10h

loc_40DF30:				; CODE XREF: _unpack_revinfo+88j
		xor	ebx, ebx
		xor	esi, esi
		mov	ecx, 0FFFFFFFFh
		jmp	short loc_40DEE4
; ---------------------------------------------------------------------------
		align 10h

loc_40DF40:				; CODE XREF: _unpack_revinfo+FBj
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_3C], ebx
		call	_ASN1_GENERALIZEDTIME_free
		mov	eax, [esp+3Ch+var_24]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40DF60:				; CODE XREF: _unpack_revinfo+12Ej
		mov	eax, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_40E0B6
		mov	[esp+3Ch+var_38], 0
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], eax
		call	_OBJ_txt2obj
		mov	esi, eax
		test	eax, eax
		jz	loc_40E101
		mov	eax, [esp+3Ch+arg_8]
		test	eax, eax
		jz	loc_40E0C3
		mov	eax, [esp+3Ch+arg_8]
		mov	[eax], esi
		xor	ebx, ebx
		mov	ecx, 6
		jmp	loc_40DEE4
; ---------------------------------------------------------------------------
		align 10h

loc_40DFB0:				; CODE XREF: _unpack_revinfo+6Cj
		mov	[esp+3Ch+var_38], offset aMemoryAlloca_1 ; "memory allocation failure\n"

loc_40DFB8:				; CODE XREF: _unpack_revinfo+31Ej
					; _unpack_revinfo+337j
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		xor	ebx, ebx
		xor	esi, esi
		xor	eax, eax
		jmp	loc_40DE79
; ---------------------------------------------------------------------------

loc_40DFD0:				; CODE XREF: _unpack_revinfo+13Aj
		mov	eax, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_40E0CF
		mov	[esp+3Ch+var_20], ebp
		call	_ASN1_GENERALIZEDTIME_new
		mov	ebx, eax
		test	eax, eax
		mov	ecx, [esp+3Ch+var_20]
		jz	loc_40E0E3
		mov	[esp+3Ch+var_20], ecx
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	_ASN1_GENERALIZEDTIME_set_string
		test	eax, eax
		mov	ecx, [esp+3Ch+var_20]
		jz	short loc_40E07E
		xor	esi, esi
		cmp	ecx, 9
		jz	loc_40E0DC
		mov	ecx, 2
		jmp	loc_40DEE4
; ---------------------------------------------------------------------------
		align 10h

loc_40E030:				; CODE XREF: _unpack_revinfo+1Bj
		mov	[esp+3Ch+var_38], offset aMemoryAlloca_1 ; "memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		xor	ebx, ebx
		xor	esi, esi
		xor	eax, eax
		jmp	loc_40DE89
; ---------------------------------------------------------------------------

loc_40E050:				; CODE XREF: _unpack_revinfo+EFj
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_3C], esi
		call	_ASN1_OBJECT_free
		mov	eax, [esp+3Ch+var_24]
		jmp	loc_40DE95
; ---------------------------------------------------------------------------
		align 10h

loc_40E070:				; CODE XREF: _unpack_revinfo+125j
		xor	ebx, ebx
		xor	esi, esi
		mov	ecx, 8
		jmp	loc_40DEE4
; ---------------------------------------------------------------------------

loc_40E07E:				; CODE XREF: _unpack_revinfo+26Dj
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aInvalidComprom ; "invalid compromised	time %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		xor	esi, esi
		xor	eax, eax
		jmp	loc_40DE79
; ---------------------------------------------------------------------------

loc_40E0A4:				; CODE XREF: _unpack_revinfo+158j
		mov	[esp+3Ch+var_3C], ebx
		call	_ASN1_GENERALIZEDTIME_free
		mov	eax, 1
		jmp	loc_40DE79
; ---------------------------------------------------------------------------

loc_40E0B6:				; CODE XREF: _unpack_revinfo+1C6j
		mov	[esp+3Ch+var_38], offset aMissingHoldIns ; "missing hold instruction\n"
		jmp	loc_40DFB8
; ---------------------------------------------------------------------------

loc_40E0C3:				; CODE XREF: _unpack_revinfo+1F0j
		xor	ebx, ebx
		mov	ecx, 6
		jmp	loc_40DEE4
; ---------------------------------------------------------------------------

loc_40E0CF:				; CODE XREF: _unpack_revinfo+236j
		mov	[esp+3Ch+var_38], offset aMissingComprom ; "missing compromised	time\n"
		jmp	loc_40DFB8
; ---------------------------------------------------------------------------

loc_40E0DC:				; CODE XREF: _unpack_revinfo+274j
		mov	cl, 1
		jmp	loc_40DEE4
; ---------------------------------------------------------------------------

loc_40E0E3:				; CODE XREF: _unpack_revinfo+24Dj
		mov	[esp+3Ch+var_38], offset aMemoryAlloca_1 ; "memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		xor	esi, esi
		xor	eax, eax
		jmp	loc_40DE79
; ---------------------------------------------------------------------------

loc_40E101:				; CODE XREF: _unpack_revinfo+1E4j
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aInvalidObjec_0 ; "invalid object identifier %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		xor	ebx, ebx
		xor	eax, eax
		jmp	loc_40DE79
_unpack_revinfo	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _make_revoked
_make_revoked	proc near		; CODE XREF: _ca_main+1875p
					; _ca_main+2FBBp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 34h
		mov	ebx, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_1C], 0FFFFFFFFh
		mov	[esp+3Ch+var_18], 0
		mov	[esp+3Ch+var_14], 0
		mov	[esp+3Ch+var_10], 0
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_2C], eax
		lea	eax, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_30], eax
		lea	eax, [esp+3Ch+var_18]
		mov	[esp+3Ch+var_34], eax
		lea	eax, [esp+3Ch+var_1C]
		mov	[esp+3Ch+var_38], eax
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_3C], eax
		call	_unpack_revinfo
		test	eax, eax
		jz	short loc_40E1E0
		test	ebx, ebx
		jz	loc_40E220
		mov	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_REVOKED_set_revocationDate
		test	eax, eax
		jz	short loc_40E1E0
		cmp	[esp+3Ch+var_1C], 0FFFFFFFFh
		jz	loc_40E240
		call	_ASN1_ENUMERATED_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_40E1D3
		mov	eax, [esp+3Ch+var_1C]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], esi
		call	_ASN1_ENUMERATED_set
		test	eax, eax
		jnz	loc_40E2C0

loc_40E1D3:				; CODE XREF: _make_revoked+89j
					; _make_revoked+140j ...
		mov	eax, [esp+3Ch+var_18]
		xor	ebx, ebx
		jmp	short loc_40E1E8
; ---------------------------------------------------------------------------
		align 10h

loc_40E1E0:				; CODE XREF: _make_revoked+57j
					; _make_revoked+73j
		mov	eax, [esp+3Ch+var_18]
		xor	esi, esi
		xor	ebx, ebx

loc_40E1E8:				; CODE XREF: _make_revoked+A9j
					; _make_revoked+101j ...
		mov	[esp+3Ch+var_3C], eax
		call	_ASN1_OBJECT_free
		mov	eax, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_3C], eax
		call	_ASN1_GENERALIZEDTIME_free
		mov	[esp+3Ch+var_3C], esi
		call	_ASN1_ENUMERATED_free
		mov	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_3C], eax
		call	_ASN1_TIME_free
		mov	eax, ebx
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_40E220:				; CODE XREF: _make_revoked+5Bj
		mov	eax, [esp+3Ch+var_18]
		xor	esi, esi

loc_40E226:				; CODE XREF: _make_revoked+14Cj
					; _make_revoked+178j
		xor	ebx, ebx
		cmp	[esp+3Ch+var_1C], 0FFFFFFFFh
		setnz	bl
		inc	ebx
		jmp	short loc_40E1E8
; ---------------------------------------------------------------------------
		align 10h

loc_40E240:				; CODE XREF: _make_revoked+7Aj
		xor	esi, esi

loc_40E242:				; CODE XREF: _make_revoked+1B6j
		mov	eax, [esp+3Ch+var_14]
		test	eax, eax
		jz	short loc_40E276
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 8Eh
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_REVOKED_add1_ext_i2d
		test	eax, eax
		jz	loc_40E1D3

loc_40E276:				; CODE XREF: _make_revoked+118j
		mov	eax, [esp+3Ch+var_18]
		test	eax, eax
		jz	short loc_40E226
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], 1AEh
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_REVOKED_add1_ext_i2d
		test	eax, eax
		mov	eax, [esp+3Ch+var_18]
		jnz	loc_40E226
		xor	ebx, ebx
		jmp	loc_40E1E8
; ---------------------------------------------------------------------------
		align 10h

loc_40E2C0:				; CODE XREF: _make_revoked+9Dj
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], esi
		mov	[esp+3Ch+var_38], 8Dh
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_REVOKED_add1_ext_i2d
		test	eax, eax
		jnz	loc_40E242
		jmp	loc_40E1D3
_make_revoked	endp

; ---------------------------------------------------------------------------
		jmp	short _ca_main
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _ca_main
_ca_main	proc near		; CODE XREF: .text:0040E2F1j
					; DATA XREF: .data:004550A0o

lpFileName	= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
lpExistingFileName= dword ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_2C		= dword	ptr -2Ch
var_20		= byte ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 18Ch
		mov	[esp+19Ch+var_64], 0
		mov	[esp+19Ch+var_60], 0
		mov	[esp+19Ch+var_5C], 0
		mov	[esp+19Ch+var_58], 0FFFFFFFFh
		mov	[esp+19Ch+var_54], 0
		mov	[esp+19Ch+var_50], 0
		mov	[esp+19Ch+var_4C], 0
		mov	[esp+19Ch+var_48], 0
		mov	[esp+19Ch+var_44], 0
		mov	[esp+19Ch+var_40], 0
		mov	ds:_conf, 0
		mov	ds:_section, 0
		mov	ds:_preserve, 0
		mov	ds:_msie_hack, 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_40EBE1

loc_40E3AD:				; CODE XREF: _ca_main+8F5j
					; _ca_main+920j
		mov	eax, [esp+19Ch+arg_0]
		lea	ebx, [eax-1]
		mov	eax, [esp+19Ch+arg_4]
		lea	ebp, [eax+4]
		mov	[esp+19Ch+var_128], 0
		test	ebx, ebx
		jle	loc_40ED8E
		mov	[esp+19Ch+var_10C], 0
		mov	[esp+19Ch+var_C4], 0
		mov	[esp+19Ch+var_A0], 0
		mov	[esp+19Ch+var_D8], 0
		mov	[esp+19Ch+var_F4], 0
		mov	[esp+19Ch+var_FC], 0
		mov	[esp+19Ch+var_C8], 0
		mov	[esp+19Ch+var_CC], 0
		mov	[esp+19Ch+var_E4], 0
		mov	[esp+19Ch+var_100], 0
		mov	[esp+19Ch+var_110], 1001h
		mov	[esp+19Ch+var_12C], 0
		mov	[esp+19Ch+var_D0], 0
		mov	[esp+19Ch+var_104], 0
		mov	[esp+19Ch+var_F8], 0
		mov	[esp+19Ch+var_B8], 0
		mov	[esp+19Ch+var_134], 0
		mov	[esp+19Ch+var_B0], 0
		mov	[esp+19Ch+var_DC], 0
		mov	[esp+19Ch+var_D4], 0
		mov	[esp+19Ch+var_A4], 3
		mov	[esp+19Ch+var_BC], 0
		mov	[esp+19Ch+var_138], 0
		mov	[esp+19Ch+var_E0], 0
		mov	[esp+19Ch+var_E8], 0
		mov	[esp+19Ch+var_13C], 0
		mov	[esp+19Ch+var_B4], 0
		mov	[esp+19Ch+var_A8], 0
		mov	[esp+19Ch+var_AC], 0
		mov	[esp+19Ch+var_C0], 0
		mov	[esp+19Ch+var_140], 0
		mov	[esp+19Ch+var_F0], 0
		mov	[esp+19Ch+var_EC], 1
		mov	[esp+19Ch+var_108], 0
		mov	[esp+19Ch+var_130], 0
		jmp	loc_40E57D
; ---------------------------------------------------------------------------
		align 10h

loc_40E550:				; CODE XREF: _ca_main+28Ej
		mov	edi, offset aConfig_0 ;	"-config"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_40E7B0
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_13C], eax
		add	ebp, 4

loc_40E575:				; CODE XREF: _ca_main+4D2j
					; _ca_main+501j ...
		dec	ebx
		add	ebp, 4
		test	ebx, ebx
		jle	short loc_40E5A0

loc_40E57D:				; CODE XREF: _ca_main+240j
					; _ca_main+29Ej
		mov	eax, [ebp+0]
		mov	esi, eax
		mov	edi, offset aVerbose_1 ; "-verbose"
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_40E550
		mov	[esp+19Ch+var_140], 1
		dec	ebx
		add	ebp, 4
		test	ebx, ebx
		jg	short loc_40E57D

loc_40E5A0:				; CODE XREF: _ca_main+27Bj
					; _ca_main+BFDj ...
		call	_ERR_load_crypto_strings
		mov	eax, [esp+19Ch+var_13C]
		test	eax, eax
		jz	loc_40EC8F

loc_40E5B1:				; CODE XREF: _ca_main+9A1j
					; _ca_main+9B9j
		mov	esi, [esp+19Ch+var_13C]
		mov	[esp+19Ch+var_194], esi
		mov	[esp+19Ch+var_198], offset aUsingConfigu_0 ; "Using configuration from %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+lpFileName], 0
		call	_NCONF_new
		mov	ds:_conf, eax
		lea	edx, [esp+19Ch+var_58]
		mov	[esp+19Ch+var_8C], edx
		mov	[esp+19Ch+var_194], edx
		mov	[esp+19Ch+var_198], esi
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_load
		test	eax, eax
		jle	loc_40FAB6

loc_40E605:				; CODE XREF: _ca_main+A89j
		mov	eax, ds:_conf
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_load_config
		test	eax, eax
		jnz	loc_40E93E
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_40E630:				; CODE XREF: _ca_main+5E9j
					; _ca_main+612j ...
		mov	[esp+19Ch+var_114], 0

loc_40E63B:				; CODE XREF: _ca_main+CE9j
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		mov	[esp+19Ch+var_138], 0
		mov	[esp+19Ch+var_120], 0
		mov	[esp+19Ch+var_124], 0
		mov	[esp+19Ch+var_11C], 0
		mov	[esp+19Ch+var_118], 0

loc_40E673:				; CODE XREF: _ca_main+8DCj
					; _ca_main+C4Ej ...
		mov	[esp+19Ch+var_134], 0
		xor	esi, esi
		mov	[esp+19Ch+var_130], 0
		mov	edi, 1
		mov	[esp+19Ch+var_128], 0

loc_40E692:				; CODE XREF: _ca_main+10DEj
					; _ca_main+1169j ...
		mov	eax, [esp+19Ch+var_120]
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_free_all
		mov	eax, [esp+19Ch+var_124]
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_free_all
		mov	eax, [esp+19Ch+var_11C]
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_free_all
		mov	eax, [esp+19Ch+var_118]
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_free_all
		mov	eax, [esp+19Ch+var_13C]
		test	eax, eax
		jz	short loc_40E6E0
		mov	[esp+19Ch+var_198], offset _X509_free
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_pop_free

loc_40E6E0:				; CODE XREF: _ca_main+3CEj
		test	edi, edi
		jnz	loc_40E917

loc_40E6E8:				; CODE XREF: _ca_main+624j
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_114]
		mov	[esp+19Ch+lpFileName], eax
		call	_app_RAND_write_file
		mov	ecx, [esp+19Ch+var_128]
		test	ecx, ecx
		jz	short loc_40E71B
		mov	eax, [esp+19Ch+var_64]
		test	eax, eax
		jz	short loc_40E71B
		mov	[esp+19Ch+lpFileName], eax
		call	_CRYPTO_free

loc_40E71B:				; CODE XREF: _ca_main+406j
					; _ca_main+411j
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+lpFileName], eax
		call	_BN_free
		mov	[esp+19Ch+lpFileName], esi
		call	_BN_free
		mov	eax, [esp+19Ch+var_138]
		mov	[esp+19Ch+lpFileName], eax
		call	_free_index
		mov	eax, [esp+19Ch+var_10C]
		test	eax, eax
		jz	short loc_40E751
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_free

loc_40E751:				; CODE XREF: _ca_main+447j
		mov	eax, [esp+19Ch+var_130]
		mov	[esp+19Ch+lpFileName], eax
		call	_EVP_PKEY_free
		mov	eax, [esp+19Ch+var_134]
		test	eax, eax
		jz	short loc_40E76D
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_free

loc_40E76D:				; CODE XREF: _ca_main+463j
		mov	[esp+19Ch+lpFileName], ebx
		call	_X509_CRL_free
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_free
		mov	eax, ds:_extconf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_free
		call	_OBJ_cleanup
		mov	eax, edi
		add	esp, 18Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_40E7B0
; ---------------------------------------------------------------------------
		align 10h

loc_40E7B0:				; CODE XREF: _ca_main+25Ej
					; _ca_main+4A1j
		mov	edi, offset aName ; "-name"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_40E7E0
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	ds:_section, eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------
		align 10h

loc_40E7E0:				; CODE XREF: _ca_main+4BEj
		mov	edi, offset aSubj_0 ; "-subj"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_40E810
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_12C], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------
		align 10h

loc_40E810:				; CODE XREF: _ca_main+4EEj
		mov	edi, offset aUtf8_1 ; "-utf8"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	short loc_40E850
		mov	edi, offset aCreate_serial ; "-create_serial"
		mov	ecx, 0Fh
		mov	esi, eax
		repe cmpsb
		jz	short loc_40E860
		mov	edi, offset aMultivalueRd_0 ; "-multivalue-rdn"
		mov	ecx, 10h
		mov	esi, eax
		repe cmpsb
		jnz	short loc_40E870
		mov	[esp+19Ch+var_100], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40E850:				; CODE XREF: _ca_main+51Ej
		mov	[esp+19Ch+var_110], 1000h
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40E860:				; CODE XREF: _ca_main+52Ej
		mov	[esp+19Ch+var_108], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40E870:				; CODE XREF: _ca_main+53Ej
		mov	edi, offset aStartdate ; "-startdate"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jz	loc_40E929
		mov	edi, offset aEnddate ; "-enddate"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_40EC25
		dec	ebx
		jz	short loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_F4], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40E8AD:				; CODE XREF: _ca_main+3EF8j
		call	_sk_new_null
		mov	[esp+19Ch+var_10C], eax
		test	eax, eax
		jnz	loc_4121FE
		mov	eax, [ebp+0]

loc_40E8C4:				; CODE XREF: _ca_main+265j
					; _ca_main+4C1j ...
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aUnknownOptio_4 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	eax, _ca_usage
		mov	ebx, offset _ca_usage
		test	eax, eax
		jz	loc_40E630
		nop

loc_40E8F0:				; CODE XREF: _ca_main+610j
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aS_6	; "%s"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		add	ebx, 4
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_40E8F0
		jmp	loc_40E630
; ---------------------------------------------------------------------------

loc_40E917:				; CODE XREF: _ca_main+3E2j
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_ERR_print_errors
		jmp	loc_40E6E8
; ---------------------------------------------------------------------------

loc_40E929:				; CODE XREF: _ca_main+57Ej
		dec	ebx
		jz	short loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_FC], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40E93E:				; CODE XREF: _ca_main+31Dj
		mov	[esp+19Ch+var_194], 0
		mov	eax, [esp+19Ch+var_128]
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_setup_engine
		mov	[esp+19Ch+var_9C], eax
		mov	eax, ds:_section
		test	eax, eax
		jz	loc_40F488

loc_40E96F:				; CODE XREF: _ca_main+11ACj
		mov	eax, ds:_conf
		test	eax, eax
		jz	loc_40EFC9
		mov	[esp+19Ch+var_194], offset aOid_file_0 ; "oid_file"
		mov	[esp+19Ch+var_198], 0
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_40EC85
		mov	[esp+19Ch+var_198], offset aR_7	; "r"
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_new_file
		mov	esi, eax
		test	eax, eax
		jz	loc_40EC85
		mov	[esp+19Ch+lpFileName], esi
		call	_OBJ_create_objects
		mov	[esp+19Ch+lpFileName], esi
		call	_BIO_free

loc_40E9C6:				; CODE XREF: _ca_main+98Aj
		mov	eax, ds:_conf
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_add_oid_section
		test	eax, eax
		jz	loc_40EF53
		mov	eax, ds:_conf

loc_40E9E9:				; CODE XREF: _ca_main+CCBj
		mov	[esp+19Ch+var_194], offset aRandfile_0 ; "RANDFILE"
		mov	[esp+19Ch+var_198], offset aCa ; "ca"
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_114], eax
		test	eax, eax
		jz	loc_40F47E

loc_40EA10:				; CODE XREF: _ca_main+1183j
		mov	[esp+19Ch+var_194], 0
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_114]
		mov	[esp+19Ch+lpFileName], eax
		call	_app_RAND_load_file
		mov	[esp+19Ch+var_194], offset aString_mask_0 ; "string_mask"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	esi, eax
		test	eax, eax
		jz	loc_40F474
		mov	[esp+19Ch+lpFileName], eax
		call	_ASN1_STRING_set_default_mask_asc
		test	eax, eax
		jz	loc_40EFD0

loc_40EA68:				; CODE XREF: _ca_main+1179j
		cmp	[esp+19Ch+var_110], 1000h
		jz	short loc_40EAB6
		mov	[esp+19Ch+var_194], offset aUtf8_2 ; "utf8"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_40FAAC
		mov	edi, offset aYes_0 ; "yes"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_40EAB6
		mov	[esp+19Ch+var_110], 1000h

loc_40EAB6:				; CODE XREF: _ca_main+773j
					; _ca_main+7A9j ...
		mov	[esp+19Ch+var_3C], 1
		mov	[esp+19Ch+var_194], offset aUnique_subject ; "unique_subject"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_40EFEE
		mov	[esp+19Ch+var_198], 1
		mov	[esp+19Ch+lpFileName], eax
		call	_parse_yesno
		mov	[esp+19Ch+var_3C], eax

loc_40EAFE:				; CODE XREF: _ca_main+CF3j
		call	_BIO_s_file
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_new
		mov	[esp+19Ch+var_118], eax
		call	_BIO_s_file
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_new
		mov	edi, eax
		mov	[esp+19Ch+var_11C], eax
		call	_BIO_s_file
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_new
		mov	esi, eax
		mov	[esp+19Ch+var_124], eax
		call	_BIO_s_file
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_new
		mov	edx, eax
		mov	[esp+19Ch+var_120], eax
		mov	eax, [esp+19Ch+var_118]
		test	eax, eax
		jz	loc_40EF2F
		test	edi, edi
		jz	loc_40EF2F
		test	esi, esi
		jz	loc_40EF2F
		test	edx, edx
		jz	loc_40EF2F
		mov	edi, [esp+19Ch+var_134]
		test	edi, edi
		jz	loc_40F022
		mov	[esp+19Ch+var_194], offset aDatabase ; "database"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_40F4E0
		lea	edx, [esp+19Ch+var_3C]
		mov	[esp+19Ch+var_198], edx	; int
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_load_index
		mov	[esp+19Ch+var_138], eax
		test	eax, eax
		jz	short loc_40EBD2
		mov	[esp+19Ch+lpFileName], eax
		call	_index_index
		test	eax, eax
		jnz	loc_40F554

loc_40EBD2:				; CODE XREF: _ca_main+8C0j
					; _ca_main+13CFj
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		jmp	loc_40E673
; ---------------------------------------------------------------------------

loc_40EBE1:				; CODE XREF: _ca_main+A7j
		call	_BIO_s_file
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_40E3AD
		mov	ebx, ds:__imp___iob
		lea	edx, [ebx+40h]
		mov	[esp+19Ch+var_190], edx
		mov	[esp+19Ch+var_194], 10h
		mov	[esp+19Ch+var_198], 6Ah
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_ctrl
		jmp	loc_40E3AD
; ---------------------------------------------------------------------------

loc_40EC25:				; CODE XREF: _ca_main+592j
		mov	edi, offset aDays_0 ; "-days"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	short loc_40EC62
		mov	edi, offset aMd_0 ; "-md"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	loc_40EF02
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_E8], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40EC62:				; CODE XREF: _ca_main+933j
		dec	ebx
		jz	loc_40E8C4
		lea	esi, [ebp+4]
		mov	eax, [ebp+4]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_atoi
		mov	[esp+19Ch+var_50], eax
		mov	ebp, esi
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40EC85:				; CODE XREF: _ca_main+696j
					; _ca_main+6B0j
		call	_ERR_clear_error
		jmp	loc_40E9C6
; ---------------------------------------------------------------------------

loc_40EC8F:				; CODE XREF: _ca_main+2ABj
		mov	[esp+19Ch+lpFileName], offset aOpenssl_conf ; "OPENSSL_CONF"
		call	_getenv
		mov	[esp+19Ch+var_13C], eax
		test	eax, eax
		jnz	loc_40E5B1
		mov	[esp+19Ch+lpFileName], offset aSsleay_conf ; "SSLEAY_CONF"
		call	_getenv
		mov	[esp+19Ch+var_13C], eax
		test	eax, eax
		jnz	loc_40E5B1
		call	_X509_get_default_cert_area
		mov	[esp+19Ch+lpFileName], eax ; char *
		mov	[esp+19Ch+var_13C], eax
		call	_strlen
		lea	esi, [eax+0Dh]
		mov	[esp+19Ch+var_194], 232h
		mov	[esp+19Ch+var_198], offset aCa_c ; "ca.c"
		mov	[esp+19Ch+lpFileName], esi
		call	_CRYPTO_malloc
		mov	edi, eax
		test	eax, eax
		mov	edx, [esp+19Ch+var_13C]
		jz	loc_40F3F3
		mov	[esp+19Ch+var_194], esi
		mov	[esp+19Ch+var_198], edx
		mov	[esp+19Ch+lpFileName], eax
		call	_BUF_strlcpy
		mov	[esp+19Ch+var_194], esi
		mov	[esp+19Ch+var_198], offset asc_45CBC9 ;	"/"
		mov	[esp+19Ch+lpFileName], edi
		call	_BUF_strlcat
		mov	[esp+19Ch+var_194], esi
		mov	[esp+19Ch+var_198], offset aOpenssl_cnf	; "openssl.cnf"
		mov	[esp+19Ch+lpFileName], edi
		call	_BUF_strlcat
		mov	[esp+19Ch+var_194], edi
		mov	[esp+19Ch+var_198], offset aUsingConfigu_0 ; "Using configuration from %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+lpFileName], 0
		call	_NCONF_new
		mov	ds:_conf, eax
		lea	edx, [esp+19Ch+var_58]
		mov	[esp+19Ch+var_8C], edx
		mov	[esp+19Ch+var_194], edx
		mov	[esp+19Ch+var_198], edi
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_load
		test	eax, eax
		jle	loc_40EF65
		mov	[esp+19Ch+lpFileName], edi
		call	_CRYPTO_free
		jmp	loc_40E605
; ---------------------------------------------------------------------------

loc_40ED8E:				; CODE XREF: _ca_main+CBj
		mov	[esp+19Ch+var_C4], 0
		mov	[esp+19Ch+var_A0], 0
		mov	[esp+19Ch+var_D8], 0
		mov	[esp+19Ch+var_F4], 0
		mov	[esp+19Ch+var_FC], 0
		mov	[esp+19Ch+var_C8], 0
		mov	[esp+19Ch+var_CC], 0
		mov	[esp+19Ch+var_E4], 0
		mov	[esp+19Ch+var_100], 0
		mov	[esp+19Ch+var_110], 1001h
		mov	[esp+19Ch+var_12C], 0
		mov	[esp+19Ch+var_D0], 0
		mov	[esp+19Ch+var_104], 0
		mov	[esp+19Ch+var_F8], 0
		mov	[esp+19Ch+var_B8], 0
		mov	[esp+19Ch+var_134], 0
		mov	[esp+19Ch+var_B0], 0
		mov	[esp+19Ch+var_DC], 0
		mov	[esp+19Ch+var_D4], 0
		mov	[esp+19Ch+var_A4], 3
		mov	[esp+19Ch+var_BC], 0
		mov	[esp+19Ch+var_138], 0
		mov	[esp+19Ch+var_E0], 0
		mov	[esp+19Ch+var_E8], 0
		mov	[esp+19Ch+var_13C], 0
		mov	[esp+19Ch+var_B4], 0
		mov	[esp+19Ch+var_A8], 0
		mov	[esp+19Ch+var_AC], 0
		mov	[esp+19Ch+var_C0], 0
		mov	[esp+19Ch+var_140], 0
		mov	[esp+19Ch+var_EC], 1
		mov	[esp+19Ch+var_108], 0
		mov	[esp+19Ch+var_130], 0
		mov	[esp+19Ch+var_10C], 0
		mov	[esp+19Ch+var_F0], 0
		jmp	loc_40E5A0
; ---------------------------------------------------------------------------

loc_40EF02:				; CODE XREF: _ca_main+943j
		mov	edi, offset aPolicy ; "-policy"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_40EFF8
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_E0], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40EF2F:				; CODE XREF: _ca_main+857j
					; _ca_main+85Fj ...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_ERR_print_errors
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		mov	[esp+19Ch+var_138], 0
		jmp	loc_40E673
; ---------------------------------------------------------------------------

loc_40EF53:				; CODE XREF: _ca_main+6DEj
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_ERR_print_errors
		jmp	loc_40E630
; ---------------------------------------------------------------------------

loc_40EF65:				; CODE XREF: _ca_main+A7Bj
		mov	[esp+19Ch+var_13C], edi

loc_40EF69:				; CODE XREF: _ca_main+17B8j
		mov	eax, [esp+19Ch+var_58]
		test	eax, eax
		jle	short loc_40EFAA
		mov	ebx, [esp+19Ch+var_13C]
		mov	[esp+19Ch+var_190], ebx
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aErrorOnLineL_1 ; "error on line %ld	of config file '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_40EF95:				; CODE XREF: _ca_main+CC7j
		test	edi, edi
		jz	loc_40E630
		mov	[esp+19Ch+lpFileName], edi
		call	_CRYPTO_free
		jmp	loc_40E630
; ---------------------------------------------------------------------------

loc_40EFAA:				; CODE XREF: _ca_main+C72j
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aErrorLoadingTh ; "error loading the	config file '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	short loc_40EF95
; ---------------------------------------------------------------------------

loc_40EFC9:				; CODE XREF: _ca_main+676j
		xor	eax, eax
		jmp	loc_40E9E9
; ---------------------------------------------------------------------------

loc_40EFD0:				; CODE XREF: _ca_main+762j
		mov	[esp+19Ch+var_194], esi
		mov	[esp+19Ch+var_198], offset aInvalidGloba_0 ; "Invalid global string mask setting %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_40E63B
; ---------------------------------------------------------------------------

loc_40EFEE:				; CODE XREF: _ca_main+7E1j
		call	_ERR_clear_error
		jmp	loc_40EAFE
; ---------------------------------------------------------------------------

loc_40EFF8:				; CODE XREF: _ca_main+C10j
		mov	edi, offset aKeyfile ; "-keyfile"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_40F51D
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_138], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40F022:				; CODE XREF: _ca_main+87Bj
		mov	esi, [esp+19Ch+var_138]
		test	esi, esi
		jz	loc_40F770

loc_40F02E:				; CODE XREF: _ca_main+1494j
		mov	eax, [esp+19Ch+var_64]
		test	eax, eax
		jz	loc_40F8D1
		mov	[esp+19Ch+var_128], 0

loc_40F045:				; CODE XREF: _ca_main+1614j
		mov	[esp+19Ch+var_184], offset aCaPrivateKey ; "CA private key"
		mov	edx, [esp+19Ch+var_9C]
		mov	[esp+19Ch+var_188], edx
		mov	[esp+19Ch+var_18C], eax
		mov	[esp+19Ch+var_190], 0
		mov	eax, [esp+19Ch+var_A4]
		mov	[esp+19Ch+var_194], eax
		mov	eax, [esp+19Ch+var_138]
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_load_key
		mov	[esp+19Ch+var_130], eax
		mov	esi, [esp+19Ch+var_64]
		test	esi, esi
		jz	short loc_40F0A7
		mov	[esp+19Ch+lpFileName], esi ; char *
		call	_strlen
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], esi
		call	_OPENSSL_cleanse

loc_40F0A7:				; CODE XREF: _ca_main+D91j
		mov	ecx, [esp+19Ch+var_130]
		test	ecx, ecx
		jz	loc_40F9EA
		mov	edx, [esp+19Ch+var_C4]
		test	edx, edx
		jz	short loc_40F0CD
		mov	eax, [esp+19Ch+var_DC]
		test	eax, eax
		jz	loc_40F73A

loc_40F0CD:				; CODE XREF: _ca_main+DBCj
					; _ca_main+1443j ...
		mov	eax, [esp+19Ch+var_BC]
		test	eax, eax
		jz	loc_40F997

loc_40F0DC:				; CODE XREF: _ca_main+16BEj
		mov	[esp+19Ch+var_188], offset aCaCertificate ; "CA	certificate"
		mov	eax, [esp+19Ch+var_9C]
		mov	[esp+19Ch+var_18C], eax
		mov	[esp+19Ch+var_190], 0
		mov	[esp+19Ch+var_194], 3
		mov	eax, [esp+19Ch+var_BC]
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_load_cert
		mov	[esp+19Ch+var_134], eax
		test	eax, eax
		jz	loc_40F979
		mov	edx, [esp+19Ch+var_130]
		mov	[esp+19Ch+var_198], edx
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_check_private_key
		test	eax, eax
		jz	loc_40F964
		mov	eax, [esp+19Ch+var_C4]
		test	eax, eax
		jnz	loc_40F760
		mov	eax, [esp+19Ch+var_134]
		mov	[esp+19Ch+var_98], eax

loc_40F155:				; CODE XREF: _ca_main+146Bj
		mov	[esp+19Ch+var_194], offset aPreserve ; "preserve"
		mov	[esp+19Ch+var_198], offset aCa ; "ca"
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_4120D6
		mov	al, [eax]
		and	eax, 0FFFFFFDFh
		cmp	al, 59h
		jz	loc_4120C7

loc_40F187:				; CODE XREF: _ca_main+3DD1j
					; _ca_main+3DDBj
		mov	[esp+19Ch+var_194], offset aMsie_hack ;	"msie_hack"
		mov	[esp+19Ch+var_198], offset aCa ; "ca"
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_4120BD
		mov	al, [eax]
		and	eax, 0FFFFFFDFh
		cmp	al, 59h
		jz	loc_411FA4

loc_40F1B9:				; CODE XREF: _ca_main+3CAEj
					; _ca_main+3DC2j
		mov	[esp+19Ch+var_194], offset aName_opt ; "name_opt"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	esi, eax
		test	eax, eax
		jz	loc_411F8F
		mov	[esp+19Ch+var_198], eax
		lea	eax, [esp+19Ch+var_4C]
		mov	[esp+19Ch+lpFileName], eax
		call	_set_name_ex
		test	eax, eax
		jz	loc_411F71
		mov	[esp+19Ch+var_A4], 0

loc_40F207:				; CODE XREF: _ca_main+3C9Fj
		mov	[esp+19Ch+var_194], offset aCert_opt ; "cert_opt"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	esi, eax
		test	eax, eax
		jz	loc_411F67
		mov	[esp+19Ch+var_198], eax
		lea	eax, [esp+19Ch+var_48]
		mov	[esp+19Ch+lpFileName], eax
		call	_set_cert_ex
		test	eax, eax
		jz	loc_41209F
		mov	[esp+19Ch+var_A4], 0

loc_40F255:				; CODE XREF: _ca_main+3C6Cj
		mov	[esp+19Ch+var_194], offset aCopy_extension ; "copy_extensions"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	esi, eax
		test	eax, eax
		jz	loc_412095
		mov	[esp+19Ch+var_198], eax	; char *
		lea	eax, [esp+19Ch+var_44]
		mov	[esp+19Ch+lpFileName], eax ; int
		call	_set_ext_copy
		test	eax, eax
		jz	loc_412031

loc_40F298:				; CODE XREF: _ca_main+3D9Aj
		mov	eax, [esp+19Ch+var_F8]
		test	eax, eax
		jz	loc_411FB3

loc_40F2A7:				; CODE XREF: _ca_main+3CBCj
					; _ca_main+3D60j
		mov	[esp+19Ch+var_194], offset aDatabase ; "database"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_BC], eax
		test	eax, eax
		jz	loc_40FB3F
		lea	eax, [esp+19Ch+var_3C]
		mov	[esp+19Ch+var_198], eax	; int
		mov	eax, [esp+19Ch+var_BC]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_load_index
		mov	[esp+19Ch+var_138], eax
		test	eax, eax
		jz	loc_40FB18
		xor	edi, edi

loc_40F2FC:				; CODE XREF: _ca_main+116Fj
		mov	eax, [esp+19Ch+var_138]
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_num
		cmp	edi, eax
		jge	loc_40FB96
		mov	eax, [esp+19Ch+var_138]
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+19Ch+var_198], edi
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_value
		mov	esi, eax
		mov	eax, [eax]
		cmp	byte ptr [eax],	52h
		mov	eax, [esi+8]
		jz	loc_40FB6A
		cmp	byte ptr [eax],	0
		jnz	loc_40FB2E

loc_40F345:				; CODE XREF: _ca_main+187Cj
		mov	eax, [esi+4]
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], 0
		call	_ASN1_TIME_set_string
		test	eax, eax
		jz	loc_40FAFC
		mov	esi, [esi+0Ch]
		mov	[esp+19Ch+lpFileName], esi ; char *
		call	_strlen
		cmp	byte ptr [esi],	2Dh
		jz	loc_40FAF3
		mov	edx, esi

loc_40F376:				; CODE XREF: _ca_main+17F7j
		test	al, 1
		jnz	loc_40FABD
		cmp	eax, 1
		jle	loc_40FABD

loc_40F387:				; CODE XREF: _ca_main+10F1j
		movsx	eax, byte ptr [edx]
		test	al, al
		jz	loc_40F46E
		lea	ecx, [eax-30h]
		cmp	cl, 9
		jbe	short loc_40F3F0
		mov	cl, al
		and	ecx, 0FFFFFFDFh
		sub	ecx, 41h
		cmp	cl, 5
		jbe	short loc_40F3F0
		mov	[esp+19Ch+var_18C], eax
		sub	edx, esi
		mov	[esp+19Ch+var_190], edx
		lea	ebx, [edi+1]
		mov	[esp+19Ch+var_194], ebx
		mov	[esp+19Ch+var_198], offset aEntryDBadSeria ; "entry %d:	bad serial number characters,"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------
		align 10h

loc_40F3F0:				; CODE XREF: _ca_main+1098j
					; _ca_main+10A5j
		inc	edx
		jmp	short loc_40F387
; ---------------------------------------------------------------------------

loc_40F3F3:				; CODE XREF: _ca_main+9F3j
		mov	[esp+19Ch+var_198], offset aOutOfMemory_1 ; "Out of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_114], 0
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		mov	[esp+19Ch+var_138], 0
		mov	[esp+19Ch+var_120], 0
		mov	[esp+19Ch+var_124], 0
		mov	[esp+19Ch+var_11C], 0
		mov	[esp+19Ch+var_118], 0
		mov	[esp+19Ch+var_134], 0
		xor	esi, esi
		mov	[esp+19Ch+var_130], 0
		mov	di, 1
		mov	[esp+19Ch+var_128], 0
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_40F46E:				; CODE XREF: _ca_main+108Cj
		inc	edi
		jmp	loc_40F2FC
; ---------------------------------------------------------------------------

loc_40F474:				; CODE XREF: _ca_main+752j
		call	_ERR_clear_error
		jmp	loc_40EA68
; ---------------------------------------------------------------------------

loc_40F47E:				; CODE XREF: _ca_main+70Aj
		call	_ERR_clear_error
		jmp	loc_40EA10
; ---------------------------------------------------------------------------

loc_40F488:				; CODE XREF: _ca_main+669j
		mov	[esp+19Ch+var_194], offset aDefault_ca ; "default_ca"
		mov	[esp+19Ch+var_198], offset aCa ; "ca"
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	ds:_section, eax
		test	eax, eax
		jnz	loc_40E96F
		mov	[esp+19Ch+var_190], offset aDefault_ca ; "default_ca"
		mov	[esp+19Ch+var_194], offset aCa ; "ca"
		mov	[esp+19Ch+var_198], offset aVariableLookup ; "variable lookup failed for %s::%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_40E630
; ---------------------------------------------------------------------------
		align 10h

loc_40F4E0:				; CODE XREF: _ca_main+8A1j
		mov	[esp+19Ch+var_190], offset aDatabase ; "database"

loc_40F4E8:				; CODE XREF: _ca_main+14A2j
		mov	eax, ds:_section
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aVariableLookup ; "variable lookup failed for %s::%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		mov	[esp+19Ch+var_138], 0
		jmp	loc_40E673
; ---------------------------------------------------------------------------

loc_40F51D:				; CODE XREF: _ca_main+D06j
		mov	edi, offset aKeyform_1 ; "-keyform"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_40F710
		dec	ebx
		jz	loc_40E8C4
		lea	esi, [ebp+4]
		mov	eax, [ebp+4]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_str2fmt
		mov	[esp+19Ch+var_A4], eax
		mov	ebp, esi
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40F554:				; CODE XREF: _ca_main+8CCj
		lea	ebx, [esp+19Ch+var_38]
		mov	ecx, 6
		xor	eax, eax
		mov	edi, ebx
		rep stosd
		mov	eax, [esp+19Ch+var_134]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_strlen
		mov	[esp+19Ch+var_194], 98Fh
		mov	[esp+19Ch+var_198], offset aCa_c ; "ca.c"
		add	eax, 2
		mov	[esp+19Ch+lpFileName], eax
		call	_CRYPTO_malloc
		mov	edi, eax
		mov	[esp+19Ch+var_2C], eax
		test	eax, eax
		jz	loc_40FA8D
		mov	eax, [esp+19Ch+var_134]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_strlen
		test	al, 1
		jz	loc_40FA10
		mov	byte ptr [edi],	30h
		mov	esi, [esp+19Ch+var_134]
		mov	[esp+19Ch+lpFileName], esi ; char *
		call	_strlen
		mov	edx, [esp+19Ch+var_2C]
		lea	edi, [edx+1]
		cmp	eax, 4
		jnb	loc_40F835

loc_40F5D4:				; CODE XREF: _ca_main+156Cj
		xor	edx, edx
		test	al, 2
		jz	short loc_40F5E5
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_40F5E5:				; CODE XREF: _ca_main+12D8j
		test	al, 1
		jz	short loc_40F5F3
		mov	al, [esi+edx]
		mov	byte ptr [esp+19Ch+var_140], al
		mov	[edi+edx], al

loc_40F5F3:				; CODE XREF: _ca_main+12E7j
		mov	eax, [esp+19Ch+var_134]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_strlen
		mov	edx, [esp+19Ch+var_2C]
		mov	byte ptr [edx+eax+1], 0

loc_40F60B:				; CODE XREF: _ca_main+1753j
		mov	esi, [esp+19Ch+var_2C]
		mov	al, [esi]
		test	al, al
		jz	short loc_40F63D
		xor	edi, edi
		mov	ebp, ds:__imp__toupper
		mov	dl, al

loc_40F622:				; CODE XREF: _ca_main+133Bj
		xor	eax, eax
		mov	al, dl
		mov	[esp+19Ch+lpFileName], eax ; int
		call	ebp ; __imp__toupper
		mov	[esi], al
		inc	edi
		mov	esi, [esp+19Ch+var_2C]
		add	esi, edi
		mov	dl, [esi]
		test	dl, dl
		jnz	short loc_40F622

loc_40F63D:				; CODE XREF: _ca_main+1316j
		mov	eax, [esp+19Ch+var_138]
		mov	eax, [eax+4]
		mov	[esp+19Ch+var_194], ebx
		mov	[esp+19Ch+var_198], 3
		mov	[esp+19Ch+lpFileName], eax
		call	_TXT_DB_get_by_index
		test	eax, eax
		jz	loc_40F80B
		mov	eax, [eax]
		movsx	eax, byte ptr [eax]
		cmp	al, 56h
		jz	loc_40F7D9
		cmp	al, 52h
		jz	loc_40F7A7
		cmp	al, 45h
		jz	loc_40F89F
		cmp	al, 53h
		jnz	loc_40F871
		mov	[esp+19Ch+var_190], 53h
		mov	eax, [esp+19Ch+var_2C]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aSSuspendedC	; "%s=Suspended	(%c)\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	esi, 1

loc_40F6B2:				; CODE XREF: _ca_main+14D4j
					; _ca_main+1506j ...
		lea	edi, [esp+19Ch+var_20]

loc_40F6B9:				; CODE XREF: _ca_main+13CCj
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_40F6C7
		mov	[esp+19Ch+lpFileName], eax
		call	_CRYPTO_free

loc_40F6C7:				; CODE XREF: _ca_main+13BDj
		add	ebx, 4
		cmp	ebx, edi
		jnz	short loc_40F6B9
		dec	esi
		jz	loc_40EBD2
		mov	eax, [esp+19Ch+var_134]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aErrorVerifyi_0 ; "Error verifying serial %s!\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		jmp	loc_40E673
; ---------------------------------------------------------------------------
		jmp	short loc_40F710
; ---------------------------------------------------------------------------
		align 10h

loc_40F710:				; CODE XREF: _ca_main+122Bj
					; _ca_main+1401j
		mov	edi, offset aPassin_1 ;	"-passin"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_4120E0
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_130], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_40F73A:				; CODE XREF: _ca_main+DC7j
		mov	eax, [esp+19Ch+var_B0]
		test	eax, eax
		jnz	loc_40F0CD
		mov	eax, [esp+19Ch+var_C0]
		test	eax, eax
		jnz	loc_40F0CD
		mov	[esp+19Ch+var_134], 0

loc_40F760:				; CODE XREF: _ca_main+E44j
		mov	[esp+19Ch+var_98], 0
		jmp	loc_40F155
; ---------------------------------------------------------------------------

loc_40F770:				; CODE XREF: _ca_main+D28j
		mov	[esp+19Ch+var_194], offset aPrivate_key	; "private_key"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_138], eax
		test	eax, eax
		jnz	loc_40F02E
		mov	[esp+19Ch+var_190], offset aPrivate_key	; "private_key"
		jmp	loc_40F4E8
; ---------------------------------------------------------------------------

loc_40F7A7:				; CODE XREF: _ca_main+136Fj
		mov	[esp+19Ch+var_190], 52h
		mov	eax, [esp+19Ch+var_2C]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aSRevokedC ;	"%s=Revoked (%c)\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	esi, 1
		jmp	loc_40F6B2
; ---------------------------------------------------------------------------

loc_40F7D9:				; CODE XREF: _ca_main+1367j
		mov	[esp+19Ch+var_190], 56h
		mov	eax, [esp+19Ch+var_2C]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aSValidC ; "%s=Valid	(%c)\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	esi, 1
		jmp	loc_40F6B2
; ---------------------------------------------------------------------------

loc_40F80B:				; CODE XREF: _ca_main+135Aj
		mov	eax, [esp+19Ch+var_2C]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aSerialSNotPres ; "Serial %s	not present in db.\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_40F6B2
; ---------------------------------------------------------------------------

loc_40F835:				; CODE XREF: _ca_main+12CEj
		test	edi, 1
		jz	short loc_40F84E
		mov	esi, [esp+19Ch+var_134]
		mov	cl, [esi]
		mov	byte ptr [esp+19Ch+var_140], cl
		mov	[edi], cl
		lea	edi, [edx+2]
		inc	esi
		dec	eax

loc_40F84E:				; CODE XREF: _ca_main+153Bj
		test	edi, 2
		jz	short loc_40F865
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2

loc_40F865:				; CODE XREF: _ca_main+1554j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_40F5D4
; ---------------------------------------------------------------------------

loc_40F871:				; CODE XREF: _ca_main+137Fj
		mov	[esp+19Ch+var_190], eax
		mov	eax, [esp+19Ch+var_2C]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aSUnknownC_ ; "%s=Unknown (%c).\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_40F6B2
; ---------------------------------------------------------------------------

loc_40F89F:				; CODE XREF: _ca_main+1377j
		mov	[esp+19Ch+var_190], 45h
		mov	eax, [esp+19Ch+var_2C]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aSExpiredC ;	"%s=Expired (%c)\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	esi, 1
		jmp	loc_40F6B2
; ---------------------------------------------------------------------------

loc_40F8D1:				; CODE XREF: _ca_main+D37j
		mov	[esp+19Ch+var_18C], 0 ;	int
		lea	eax, [esp+19Ch+var_64]
		mov	[esp+19Ch+var_190], eax	; int
		mov	[esp+19Ch+var_194], 0 ;	char *
		mov	eax, [esp+19Ch+var_130]
		mov	[esp+19Ch+var_198], eax	; char *
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax ; int
		call	_app_passwd
		test	eax, eax
		jz	short loc_40F919
		mov	eax, [esp+19Ch+var_64]
		mov	[esp+19Ch+var_128], 1
		jmp	loc_40F045
; ---------------------------------------------------------------------------

loc_40F919:				; CODE XREF: _ca_main+1603j
		mov	[esp+19Ch+var_198], offset aErrorGetting_2 ; "Error getting password\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		mov	[esp+19Ch+var_138], 0
		mov	[esp+19Ch+var_134], 0
		xor	esi, esi
		mov	[esp+19Ch+var_130], 0
		mov	edi, 1
		mov	[esp+19Ch+var_128], 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_40F964:				; CODE XREF: _ca_main+E35j
		mov	[esp+19Ch+var_198], offset aCaCertificateA ; "CA certificate and CA private key	do no"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_40F979:				; CODE XREF: _ca_main+E1Dj
					; _ca_main+1865j ...
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		mov	[esp+19Ch+var_138], 0
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_40F997:				; CODE XREF: _ca_main+DD6j
		mov	[esp+19Ch+var_194], offset aCertificate	; "certificate"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_BC], eax
		test	eax, eax
		jnz	loc_40F0DC
		mov	[esp+19Ch+var_190], offset aCertificate	; "certificate"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aVariableLookup ; "variable lookup failed for %s::%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_40F9EA:				; CODE XREF: _ca_main+DADj
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		mov	[esp+19Ch+var_138], 0
		mov	[esp+19Ch+var_134], 0
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_40FA10:				; CODE XREF: _ca_main+12ACj
		mov	edx, eax
		mov	esi, [esp+19Ch+var_134]
		cmp	eax, 4
		jnb	short loc_40FA58

loc_40FA1B:				; CODE XREF: _ca_main+178Bj
		xor	eax, eax
		test	dl, 2
		jz	short loc_40FA2D
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2

loc_40FA2D:				; CODE XREF: _ca_main+1720j
		and	edx, 1
		jz	short loc_40FA3C
		mov	dl, [esi+eax]
		mov	byte ptr [esp+19Ch+var_140], dl
		mov	[edi+eax], dl

loc_40FA3C:				; CODE XREF: _ca_main+1730j
		mov	eax, [esp+19Ch+var_134]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_strlen
		mov	edx, [esp+19Ch+var_2C]
		mov	byte ptr [edx+eax], 0
		jmp	loc_40F60B
; ---------------------------------------------------------------------------

loc_40FA58:				; CODE XREF: _ca_main+1719j
		test	edi, 1
		jz	short loc_40FA6D
		mov	al, [esi]
		mov	byte ptr [esp+19Ch+var_140], al
		mov	[edi], al
		inc	edi
		lea	esi, [esi+1]
		dec	edx

loc_40FA6D:				; CODE XREF: _ca_main+175Ej
		test	edi, 2
		jz	short loc_40FA84
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	edx, 2

loc_40FA84:				; CODE XREF: _ca_main+1773j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	short loc_40FA1B
; ---------------------------------------------------------------------------

loc_40FA8D:				; CODE XREF: _ca_main+1298j
		mov	[esp+19Ch+var_198], offset aMallocFailure ; "Malloc failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_40F6B2
; ---------------------------------------------------------------------------

loc_40FAAC:				; CODE XREF: _ca_main+795j
		call	_ERR_clear_error
		jmp	loc_40EAB6
; ---------------------------------------------------------------------------

loc_40FAB6:				; CODE XREF: _ca_main+2FFj
		xor	edi, edi
		jmp	loc_40EF69
; ---------------------------------------------------------------------------

loc_40FABD:				; CODE XREF: _ca_main+1078j
					; _ca_main+1081j
		mov	[esp+19Ch+var_190], eax
		lea	ebx, [edi+1]
		mov	[esp+19Ch+var_194], ebx
		mov	[esp+19Ch+var_198], offset aEntryDBadSer_0 ; "entry %d:	bad serial number length (%d)"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_40FAF3:				; CODE XREF: _ca_main+106Ej
		lea	edx, [esi+1]
		dec	eax
		jmp	loc_40F376
; ---------------------------------------------------------------------------

loc_40FAFC:				; CODE XREF: _ca_main+105Aj
		lea	ebx, [edi+1]
		mov	[esp+19Ch+var_194], ebx
		mov	[esp+19Ch+var_198], offset aEntryDInvalidE ; "entry %d:	invalid	expiry date\n"

loc_40FB0B:				; CODE XREF: _ca_main+183Dj
					; _ca_main+1891j ...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_40FB18:				; CODE XREF: _ca_main+FF4j
					; _ca_main+1926j ...
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_40FB2E:				; CODE XREF: _ca_main+103Fj
		lea	ebx, [edi+1]
		mov	[esp+19Ch+var_194], ebx
		mov	[esp+19Ch+var_198], offset aEntryDNotRevok ; "entry %d:	not revoked yet, but has a re"...
		jmp	short loc_40FB0B
; ---------------------------------------------------------------------------

loc_40FB3F:				; CODE XREF: _ca_main+FCEj
		mov	[esp+19Ch+var_190], offset aDatabase ; "database"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aVariableLookup ; "variable lookup failed for %s::%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_40F979
; ---------------------------------------------------------------------------

loc_40FB6A:				; CODE XREF: _ca_main+1036j
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], 0
		call	_make_revoked
		test	eax, eax
		jnz	loc_40F345
		lea	ebx, [edi+1]
		mov	[esp+19Ch+var_194], ebx
		mov	[esp+19Ch+var_198], offset aInEntryD ; " in entry %d\n"
		jmp	loc_40FB0B
; ---------------------------------------------------------------------------

loc_40FB96:				; CODE XREF: _ca_main+1010j
		mov	esi, [esp+19Ch+var_140]
		test	esi, esi
		jz	short loc_40FC18
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+19Ch+var_190], eax
		mov	[esp+19Ch+var_194], 10h
		mov	[esp+19Ch+var_198], 6Ah
		mov	esi, [esp+19Ch+var_11C]
		mov	[esp+19Ch+lpFileName], esi
		call	_BIO_ctrl
		mov	edi, [esp+19Ch+var_138]
		mov	eax, [edi+4]
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], esi
		call	_TXT_DB_write
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_num
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aDEntriesLoaded ; "%d entries loaded	from the database\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_198], offset aGeneratingInde ; "generating index\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_40FC18:				; CODE XREF: _ca_main+189Cj
		mov	eax, [esp+19Ch+var_138]
		mov	[esp+19Ch+lpFileName], eax
		call	_index_index
		test	eax, eax
		jz	loc_40FB18
		mov	ecx, [esp+19Ch+var_A8]
		test	ecx, ecx
		jz	loc_40FE81
		mov	edx, [esp+19Ch+var_140]
		test	edx, edx
		jz	short loc_40FC63
		mov	eax, [esp+19Ch+var_BC]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aUpdatingS___ ; "Updating %s	...\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_40FC63:				; CODE XREF: _ca_main+1941j
		call	_ASN1_UTCTIME_new
		test	eax, eax
		jz	loc_40FDE0
		mov	[esp+19Ch+var_198], 0
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_gmtime_adj
		mov	esi, eax
		mov	[esp+19Ch+lpExistingFileName], eax
		mov	[esp+19Ch+var_194], 9DAh
		mov	[esp+19Ch+var_198], offset aCa_c ; "ca.c"
		mov	eax, [eax]
		mov	[esp+19Ch+var_13C], eax
		inc	eax
		mov	[esp+19Ch+lpFileName], eax
		call	_CRYPTO_malloc
		mov	edi, eax
		mov	[esp+19Ch+var_13C], eax
		test	eax, eax
		jz	loc_40FDC5
		mov	eax, [esi]
		mov	esi, [esi+8]
		cmp	eax, 4
		jnb	loc_40FD93

loc_40FCC4:				; CODE XREF: _ca_main+1AC0j
		xor	edx, edx
		test	al, 2
		jz	short loc_40FCD5
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_40FCD5:				; CODE XREF: _ca_main+19C8j
		test	al, 1
		jz	short loc_40FCE6
		mov	al, [esi+edx]
		mov	byte ptr [esp+19Ch+var_A8], al
		mov	[edi+edx], al

loc_40FCE6:				; CODE XREF: _ca_main+19D7j
		mov	eax, [esp+19Ch+lpExistingFileName]
		mov	eax, [eax]
		mov	esi, [esp+19Ch+var_13C]
		mov	byte ptr [esi+eax], 0
		mov	ecx, 2
		mov	edi, offset a49	; "49"
		repe cmpsb
		setnbe	al
		setb	dl
		sub	eax, edx
		test	al, al
		setle	al
		and	eax, 0FFh
		mov	[esp+19Ch+var_88], eax
		mov	[esp+19Ch+var_A8], 0
		mov	[esp+19Ch+var_90], 0
		mov	[esp+19Ch+var_84], ebx
		mov	[esp+19Ch+var_80], ebp

loc_40FD40:				; CODE XREF: _ca_main+1A91j
		mov	eax, [esp+19Ch+var_138]
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_num
		cmp	[esp+19Ch+var_90], eax
		jge	loc_411EEC
		mov	eax, [esp+19Ch+var_138]
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		mov	ebx, [esp+19Ch+var_90]
		mov	[esp+19Ch+var_198], ebx
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_value
		mov	ebx, eax
		mov	ebp, [eax]
		cmp	byte ptr [ebp+0], 56h
		jz	loc_411E83

loc_40FD8A:				; CODE XREF: _ca_main+3BB4j
					; _ca_main+3BE7j ...
		inc	[esp+19Ch+var_90]
		jmp	short loc_40FD40
; ---------------------------------------------------------------------------

loc_40FD93:				; CODE XREF: _ca_main+19BEj
		test	edi, 1
		jz	short loc_40FDA2
		mov	dl, [esi]
		mov	[edi], dl
		inc	edi
		inc	esi
		dec	eax

loc_40FDA2:				; CODE XREF: _ca_main+1A99j
		test	edi, 2
		jz	short loc_40FDB9
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2

loc_40FDB9:				; CODE XREF: _ca_main+1AA8j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_40FCC4
; ---------------------------------------------------------------------------

loc_40FDC5:				; CODE XREF: _ca_main+19B0j
		mov	eax, [esp+19Ch+lpExistingFileName]
		mov	[esp+19Ch+lpFileName], eax
		call	_ASN1_UTCTIME_free
		mov	[esp+19Ch+lpFileName], 0
		call	_CRYPTO_free

loc_40FDE0:				; CODE XREF: _ca_main+196Aj
		mov	[esp+19Ch+var_198], offset aMallocFailure ; "Malloc failure\n"

loc_40FDE8:				; CODE XREF: _ca_main+200Fj
					; _ca_main+202Bj ...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_40FE0B:				; CODE XREF: _ca_main+3C1Ej
		mov	eax, [esp+19Ch+var_138]
		mov	[esp+19Ch+var_194], eax	; int
		mov	[esp+19Ch+var_198], offset aNew_4 ; "new"
		mov	eax, [esp+19Ch+var_BC]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_save_index
		test	eax, eax
		jz	loc_40FB18
		mov	[esp+19Ch+var_194], offset aOld_0 ; "old"
		mov	[esp+19Ch+var_198], offset aNew_4 ; "new"
		mov	eax, [esp+19Ch+var_BC]
		mov	[esp+19Ch+lpFileName], eax ; lpExistingFileName
		call	_rotate_index
		test	eax, eax
		jz	loc_40FB18
		mov	eax, [esp+19Ch+var_140]
		test	eax, eax
		jz	short loc_40FE81
		mov	eax, [esp+19Ch+var_A8]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aDone_DEntriesM ; "Done. %d entries marked as expired\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_40FE81:				; CODE XREF: _ca_main+1935j
					; _ca_main+1B5Fj ...
		mov	esi, [esp+19Ch+var_D0]
		test	esi, esi
		jz	short loc_40FEF3
		mov	[esp+19Ch+lpFileName], 0
		call	_NCONF_new
		mov	ds:_extconf, eax
		mov	edx, [esp+19Ch+var_8C]
		mov	[esp+19Ch+var_194], edx
		mov	[esp+19Ch+var_198], esi
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_load
		test	eax, eax
		jle	loc_411E08
		mov	eax, [esp+19Ch+var_140]
		test	eax, eax
		jz	short loc_40FEE4
		mov	eax, [esp+19Ch+var_D0]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aSuccessfullyLo ; "Successfully loaded extensions file %s\"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_40FEE4:				; CODE XREF: _ca_main+1BC2j
		mov	eax, [esp+19Ch+var_104]
		test	eax, eax
		jz	loc_411E2F

loc_40FEF3:				; CODE XREF: _ca_main+1B8Aj
					; _ca_main+3B55j ...
		mov	eax, [esp+19Ch+var_F0]
		test	eax, eax
		jnz	short loc_40FF09
		mov	edi, [esp+19Ch+var_C0]
		test	edi, edi
		jz	short loc_40FF40

loc_40FF09:				; CODE XREF: _ca_main+1BFCj
		mov	eax, [esp+19Ch+var_B8]
		test	eax, eax
		jz	loc_411DDB
		mov	[esp+19Ch+var_190], eax
		mov	[esp+19Ch+var_194], 5
		mov	[esp+19Ch+var_198], 6Ch
		mov	eax, [esp+19Ch+var_124]
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_411DB6

loc_40FF40:				; CODE XREF: _ca_main+1C07j
					; _ca_main+3B03j
		mov	esi, [esp+19Ch+var_E8]
		test	esi, esi
		jz	loc_411D51

loc_40FF4F:				; CODE XREF: _ca_main+3A78j
		mov	edi, offset aDefault_0 ; "default"
		mov	ecx, 8
		mov	esi, [esp+19Ch+var_E8]
		repe cmpsb
		jnz	short loc_40FF99
		lea	eax, [esp+19Ch+var_38]
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_130]
		mov	[esp+19Ch+lpFileName], eax
		call	_EVP_PKEY_get_default_digest_nid
		test	eax, eax
		jle	loc_411D8B
		mov	eax, [esp+19Ch+var_38]
		mov	[esp+19Ch+lpFileName], eax
		call	_OBJ_nid2sn
		mov	[esp+19Ch+var_E8], eax

loc_40FF99:				; CODE XREF: _ca_main+1C62j
		mov	eax, [esp+19Ch+var_E8]
		mov	[esp+19Ch+lpFileName], eax
		call	_EVP_get_digestbyname
		mov	[esp+19Ch+var_D0], eax
		test	eax, eax
		jz	loc_411D39
		mov	ecx, [esp+19Ch+var_F0]
		test	ecx, ecx
		jz	loc_411D2C
		cmp	[esp+19Ch+var_EC], 1
		jz	loc_411CE4

loc_40FFD4:				; CODE XREF: _ca_main+3A04j
					; _ca_main+3A27j
		mov	edx, [esp+19Ch+var_140]
		test	edx, edx
		jz	short loc_410006
		mov	eax, [esp+19Ch+var_D0]
		mov	eax, [eax]
		mov	[esp+19Ch+lpFileName], eax
		call	_OBJ_nid2ln
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aMessageDigestI ; "message digest is	%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_410006:				; CODE XREF: _ca_main+1CDAj
		mov	eax, [esp+19Ch+var_E0]
		test	eax, eax
		jz	loc_411CAA

loc_410015:				; CODE XREF: _ca_main+39D1j
		mov	eax, [esp+19Ch+var_140]
		test	eax, eax
		jz	short loc_41003D
		mov	eax, [esp+19Ch+var_E0]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aPolicyIsS ;	"policy	is %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_41003D:				; CODE XREF: _ca_main+1D1Bj
		mov	[esp+19Ch+var_194], offset aSerial ; "serial"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+lpExistingFileName], eax
		test	eax, eax
		jz	loc_411C10
		mov	eax, ds:_extconf
		test	eax, eax
		jz	loc_411B75

loc_410077:				; CODE XREF: _ca_main+38F2j
					; _ca_main+39A5j
		mov	eax, [esp+19Ch+var_FC]
		test	eax, eax
		jz	loc_411B33

loc_410086:				; CODE XREF: _ca_main+385Aj
		mov	eax, [esp+19Ch+var_FC]
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], 0
		call	_ASN1_TIME_set_string
		test	eax, eax
		jz	loc_41190A

loc_4100A5:				; CODE XREF: _ca_main+3870j
		mov	eax, [esp+19Ch+var_F4]
		test	eax, eax
		jz	loc_4118D3

loc_4100B4:				; CODE XREF: _ca_main+35FAj
		mov	eax, [esp+19Ch+var_F4]
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], 0
		call	_ASN1_TIME_set_string
		test	eax, eax
		jz	loc_4118C6

loc_4100D3:				; CODE XREF: _ca_main+3605j
		mov	edi, [esp+19Ch+var_50]
		test	edi, edi
		jz	loc_411885

loc_4100E2:				; CODE XREF: _ca_main+35B0j
					; _ca_main+35C1j
		mov	esi, [esp+19Ch+var_F4]
		test	esi, esi
		jz	loc_410314

loc_4100F1:				; CODE XREF: _ca_main+201Dj
		mov	[esp+19Ch+var_194], 0 ;	int
		mov	eax, [esp+19Ch+var_108]
		mov	[esp+19Ch+var_198], eax	; int
		mov	eax, [esp+19Ch+lpExistingFileName]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_load_serial
		mov	[esp+19Ch+var_54], eax
		test	eax, eax
		jz	loc_410307
		mov	edx, [esp+19Ch+var_140]
		test	edx, edx
		jz	short loc_41014A
		mov	edi, [eax+4]
		test	edi, edi
		jnz	loc_411C3B
		mov	[esp+19Ch+var_198], offset aNextSerialNumb ; "next serial number is 00\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_41014A:				; CODE XREF: _ca_main+1E28j
					; _ca_main+396Ej
		mov	eax, [esp+19Ch+var_E0]
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_section
		mov	[esp+19Ch+var_A8], eax
		test	eax, eax
		jz	loc_41186D
		call	_sk_new_null
		mov	[esp+19Ch+var_13C], eax
		test	eax, eax
		jz	loc_411860
		mov	edx, [esp+19Ch+var_DC]
		test	edx, edx
		jz	loc_41059A
		mov	eax, [esp+19Ch+var_44]
		mov	[esp+19Ch+var_8C], eax
		mov	eax, [esp+19Ch+var_4C]
		mov	[esp+19Ch+var_88], eax
		mov	eax, [esp+19Ch+var_48]
		mov	[esp+19Ch+var_84], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+var_80], eax
		mov	eax, [esp+19Ch+var_50]
		mov	[esp+19Ch+var_7C], eax
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+var_78], eax
		lea	eax, [esp+19Ch+var_38]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], edx
		mov	[esp+19Ch+lpFileName], 0
		call	_CONF_load
		mov	[esp+19Ch+var_F0], eax
		test	eax, eax
		jz	loc_410554
		mov	[esp+19Ch+var_198], offset aDefault_0 ;	"default"
		mov	[esp+19Ch+lpFileName], eax
		call	_CONF_get_section
		mov	[esp+19Ch+var_74], eax
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_num
		test	eax, eax
		jz	loc_411939
		call	_X509_REQ_new
		mov	[esp+19Ch+var_E8], eax
		test	eax, eax
		jz	loc_411917
		mov	eax, [eax]
		mov	eax, [eax+10h]
		mov	[esp+19Ch+var_70], eax
		mov	[esp+19Ch+var_90], 0
		mov	[esp+19Ch+var_108], 0
		mov	[esp+19Ch+var_E0], ebx

loc_410271:				; CODE XREF: _ca_main+2002j
		mov	esi, [esp+19Ch+var_74]
		mov	[esp+19Ch+lpFileName], esi
		call	_sk_num
		mov	ebx, [esp+19Ch+var_90]
		cmp	eax, ebx
		jle	loc_410334
		mov	[esp+19Ch+var_198], ebx
		mov	[esp+19Ch+lpFileName], esi
		call	_sk_value
		mov	ebx, eax
		mov	esi, [eax+4]
		mov	al, [esi]
		test	al, al
		jz	short loc_4102D6
		cmp	al, 3Ah
		jz	loc_410330
		and	eax, 0FFFFFFFDh
		cmp	al, 2Ch
		jz	short loc_410330
		mov	eax, esi

loc_4102B7:				; CODE XREF: _ca_main+1FC9j
		inc	eax
		mov	dl, [eax]
		test	dl, dl
		jz	short loc_4102D6
		cmp	dl, 3Ah
		jz	short loc_4102CB
		and	edx, 0FFFFFFFDh
		cmp	dl, 2Ch
		jnz	short loc_4102B7

loc_4102CB:				; CODE XREF: _ca_main+1FC1j
					; _ca_main+2032j
		lea	edx, [eax+1]
		cmp	byte ptr [eax+1], 0
		jz	short loc_4102D6
		mov	esi, edx

loc_4102D6:				; CODE XREF: _ca_main+1FA4j
					; _ca_main+1FBCj ...
		mov	edi, [ebx+8]
		mov	[esp+19Ch+lpFileName], esi
		call	_OBJ_txt2nid
		test	eax, eax
		jnz	loc_4119BF
		mov	edi, offset aSpkac ; "SPKAC"
		mov	ecx, 6
		repe cmpsb
		jz	loc_41196A

loc_4102FB:				; CODE XREF: _ca_main+3686j
					; _ca_main+36FBj
		inc	[esp+19Ch+var_90]
		jmp	loc_410271
; ---------------------------------------------------------------------------

loc_410307:				; CODE XREF: _ca_main+1E1Cj
		mov	[esp+19Ch+var_198], offset aErrorWhileLoad ; "error while loading serial number\n"
		jmp	loc_40FDE8
; ---------------------------------------------------------------------------

loc_410314:				; CODE XREF: _ca_main+1DEBj
		mov	ecx, [esp+19Ch+var_50]
		test	ecx, ecx
		jnz	loc_4100F1
		mov	[esp+19Ch+var_198], offset aCannotLookupHo ; "cannot lookup how	many days to certify "...
		jmp	loc_40FDE8
; ---------------------------------------------------------------------------

loc_410330:				; CODE XREF: _ca_main+1FA8j
					; _ca_main+1FB3j
		mov	eax, esi
		jmp	short loc_4102CB
; ---------------------------------------------------------------------------

loc_410334:				; CODE XREF: _ca_main+1F89j
		mov	ebx, [esp+19Ch+var_E0]
		mov	esi, [esp+19Ch+var_108]
		test	esi, esi
		jz	loc_411A31
		mov	[esp+19Ch+var_198], offset aCheckThatTheSp ; "Check that the SPKAC request matches th"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	eax, [esp+19Ch+var_108]
		mov	[esp+19Ch+lpFileName], eax
		call	_NETSCAPE_SPKI_get_pubkey
		mov	esi, eax
		test	eax, eax
		jz	loc_411A12
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_108]
		mov	[esp+19Ch+lpFileName], eax
		call	_NETSCAPE_SPKI_verify
		test	eax, eax
		jle	loc_410535
		mov	[esp+19Ch+var_198], offset aSignatureOk	; "Signature ok\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_198], esi
		mov	edi, [esp+19Ch+var_E8]
		mov	[esp+19Ch+lpFileName], edi
		call	_X509_REQ_set_pubkey
		mov	[esp+19Ch+lpFileName], esi
		call	_EVP_PKEY_free
		lea	eax, [esp+19Ch+var_40]
		mov	esi, eax
		mov	[esp+19Ch+var_148], 0 ;	int
		mov	eax, [esp+19Ch+var_8C]
		mov	[esp+19Ch+var_14C], eax	; int
		mov	eax, [esp+19Ch+var_A4]
		mov	[esp+19Ch+var_150], eax	; int
		mov	eax, [esp+19Ch+var_88]
		mov	[esp+19Ch+var_154], eax	; int
		mov	eax, [esp+19Ch+var_84]
		mov	[esp+19Ch+var_158], eax	; int
		mov	eax, [esp+19Ch+var_80]
		mov	[esp+19Ch+var_15C], eax	; int
		mov	eax, [esp+19Ch+var_104]
		mov	[esp+19Ch+var_160], eax	; int
		mov	[esp+19Ch+var_164], edi	; int
		mov	eax, [esp+19Ch+var_140]
		mov	[esp+19Ch+var_168], eax	; int
		mov	[esp+19Ch+var_16C], 1 ;	int
		mov	eax, [esp+19Ch+var_7C]
		mov	[esp+19Ch+var_170], eax	; int
		mov	eax, [esp+19Ch+var_F4]
		mov	[esp+19Ch+var_174], eax	; int
		mov	eax, [esp+19Ch+var_FC]
		mov	[esp+19Ch+var_178], eax	; char *
		mov	eax, [esp+19Ch+var_EC]
		mov	[esp+19Ch+var_17C], eax	; int
		mov	eax, [esp+19Ch+var_100]
		mov	[esp+19Ch+var_180], eax	; int
		mov	eax, [esp+19Ch+var_110]
		mov	[esp+19Ch+var_184], eax	; int
		mov	eax, [esp+19Ch+var_12C]
		mov	[esp+19Ch+var_188], eax	; char *
		mov	eax, [esp+19Ch+var_78]
		mov	[esp+19Ch+var_18C], eax	; int
		mov	eax, [esp+19Ch+var_138]
		mov	[esp+19Ch+var_190], eax	; int
		mov	eax, [esp+19Ch+var_A8]
		mov	[esp+19Ch+var_194], eax	; int
		mov	eax, [esp+19Ch+var_10C]
		mov	[esp+19Ch+var_198], eax	; int
		mov	eax, [esp+19Ch+var_D0]
		mov	[esp+19Ch+lpFileName], eax ; int
		mov	ecx, [esp+19Ch+var_134]
		mov	edx, [esp+19Ch+var_130]
		mov	eax, esi
		call	_do_body
		mov	esi, eax

loc_4104B8:				; CODE XREF: _ca_main+224Fj
					; _ca_main+36BAj ...
		mov	eax, [esp+19Ch+var_E8]
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_REQ_free

loc_4104C7:				; CODE XREF: _ca_main+3634j
		mov	eax, [esp+19Ch+var_F0]
		mov	[esp+19Ch+lpFileName], eax
		call	_CONF_free
		mov	eax, [esp+19Ch+var_108]
		test	eax, eax
		jz	short loc_4104E9
		mov	[esp+19Ch+lpFileName], eax
		call	_NETSCAPE_SPKI_free

loc_4104E9:				; CODE XREF: _ca_main+21DFj
		test	esi, esi
		js	short loc_410527
		jz	loc_411AD6
		mov	[esp+19Ch+var_198], offset asc_45C772 ;	"\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_198], 1
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+lpFileName], eax
		call	_BN_add_word
		test	eax, eax
		jnz	loc_411A5B

loc_410527:				; CODE XREF: _ca_main+21EBj
					; _ca_main+2371j ...
		xor	ebx, ebx

loc_410529:				; CODE XREF: _ca_main+31DFj
					; _ca_main+3213j ...
		xor	esi, esi

loc_41052B:				; CODE XREF: _ca_main+2E72j
					; _ca_main+2E92j ...
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_410535:				; CODE XREF: _ca_main+208Dj
		mov	[esp+19Ch+var_198], offset aSignatureVerif ; "signature	verification failed on SPKAC "...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_4104B8
; ---------------------------------------------------------------------------

loc_410554:				; CODE XREF: _ca_main+1F07j
		mov	eax, [esp+19Ch+var_DC]
		mov	[esp+19Ch+var_190], eax
		mov	eax, [esp+19Ch+var_38]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aErrorOnLineL_2 ; "error on line %ld	of %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_41059A:				; CODE XREF: _ca_main+1E8Bj
		mov	[esp+19Ch+var_B8], 2
		mov	[esp+19Ch+var_DC], 2
		mov	[esp+19Ch+var_E8], 1
		mov	[esp+19Ch+var_108], 1
		mov	[esp+19Ch+var_E0], 0
		xor	esi, esi
		xor	eax, eax

loc_4105D5:				; CODE XREF: _ca_main+37D1j
					; _ca_main+3814j ...
		mov	edx, [esp+19Ch+var_B0]
		test	edx, edx
		jz	loc_41184D
		mov	eax, [esp+19Ch+var_44]
		mov	[esp+19Ch+var_B0], eax
		mov	eax, [esp+19Ch+var_4C]
		mov	[esp+19Ch+var_90], eax
		mov	eax, [esp+19Ch+var_48]
		mov	[esp+19Ch+var_8C], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+var_88], eax
		mov	eax, [esp+19Ch+var_50]
		mov	[esp+19Ch+var_84], eax
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+var_80], eax
		mov	eax, edx
		mov	[esp+19Ch+var_188], edx
		mov	edx, [esp+19Ch+var_9C]
		mov	[esp+19Ch+var_18C], edx
		mov	[esp+19Ch+var_190], 0
		mov	[esp+19Ch+var_194], 3
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_load_cert
		mov	[esp+19Ch+var_F0], eax
		test	eax, eax
		jz	loc_410527
		mov	edx, [esp+19Ch+var_140]
		test	edx, edx
		jz	short loc_410690
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_print

loc_410690:				; CODE XREF: _ca_main+237Dj
		mov	[esp+19Ch+var_198], offset aCheckThatTheRe ; "Check that the request matches the sign"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	eax, [esp+19Ch+var_F0]
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_get_pubkey
		mov	edi, eax
		test	eax, eax
		jz	loc_41182E
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_F0]
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_verify
		mov	[esp+19Ch+var_7C], eax
		mov	[esp+19Ch+lpFileName], edi
		call	_EVP_PKEY_free
		mov	eax, [esp+19Ch+var_7C]
		test	eax, eax
		js	loc_410CB8
		jnz	loc_410B6A
		mov	[esp+19Ch+var_198], offset aSignatureDidNo ; "Signature	did not	match the certificate"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		xor	edi, edi

loc_41070C:				; CODE XREF: _ca_main+29B3j
					; _ca_main+29CFj ...
		mov	eax, [esp+19Ch+var_F0]
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_free
		test	edi, edi
		js	loc_410527
		jz	loc_410CED
		mov	[esp+19Ch+var_198], offset asc_45C772 ;	"\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_198], 1
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+lpFileName], eax
		call	_BN_add_word
		test	eax, eax
		jz	loc_410527
		mov	eax, [esp+19Ch+var_40]
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_push
		test	eax, eax
		jz	loc_411860
		mov	edi, [esp+19Ch+var_DC]
		mov	esi, [esp+19Ch+var_E8]
		mov	eax, [esp+19Ch+var_B8]
		mov	[esp+19Ch+var_E8], eax

loc_410798:				; CODE XREF: _ca_main+29F4j
					; _ca_main+355Bj
		mov	edx, [esp+19Ch+var_D4]
		test	edx, edx
		jz	loc_410B5E
		lea	eax, [esp+19Ch+var_40]
		mov	[esp+19Ch+var_108], eax
		mov	ecx, [esp+19Ch+var_C4]
		mov	[esp+19Ch+var_148], ecx
		mov	eax, [esp+19Ch+var_44]
		mov	[esp+19Ch+var_14C], eax
		mov	ecx, [esp+19Ch+var_A4]
		mov	[esp+19Ch+var_150], ecx
		mov	eax, [esp+19Ch+var_4C]
		mov	[esp+19Ch+var_154], eax
		mov	eax, [esp+19Ch+var_48]
		mov	[esp+19Ch+var_158], eax
		mov	ecx, [esp+19Ch+var_140]
		mov	[esp+19Ch+var_15C], ecx
		mov	eax, ds:_conf
		mov	[esp+19Ch+var_160], eax
		mov	ecx, [esp+19Ch+var_104]
		mov	[esp+19Ch+var_164], ecx
		mov	ecx, [esp+19Ch+var_D8]
		mov	[esp+19Ch+var_168], ecx
		mov	eax, [esp+19Ch+var_50]
		mov	[esp+19Ch+var_16C], eax
		mov	ecx, [esp+19Ch+var_F4]
		mov	[esp+19Ch+var_170], ecx
		mov	ecx, [esp+19Ch+var_FC]
		mov	[esp+19Ch+var_174], ecx
		mov	ecx, [esp+19Ch+var_EC]
		mov	[esp+19Ch+var_178], ecx
		mov	ecx, [esp+19Ch+var_100]
		mov	[esp+19Ch+var_17C], ecx
		mov	ecx, [esp+19Ch+var_110]
		mov	[esp+19Ch+var_180], ecx
		mov	ecx, [esp+19Ch+var_12C]
		mov	[esp+19Ch+var_184], ecx
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+var_188], eax
		mov	ecx, [esp+19Ch+var_138]
		mov	[esp+19Ch+var_18C], ecx
		mov	ecx, [esp+19Ch+var_A8]
		mov	[esp+19Ch+var_190], ecx
		mov	ecx, [esp+19Ch+var_10C]
		mov	[esp+19Ch+var_194], ecx
		mov	ecx, [esp+19Ch+var_D0]
		mov	[esp+19Ch+var_198], ecx
		mov	ecx, [esp+19Ch+var_98]
		mov	[esp+19Ch+lpFileName], ecx
		mov	ecx, [esp+19Ch+var_130]
		mov	eax, [esp+19Ch+var_108]
		call	_certify
		test	eax, eax
		js	loc_410527
		jz	short loc_41090F
		mov	[esp+19Ch+var_198], offset asc_45C772 ;	"\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_198], 1
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+lpFileName], eax
		call	_BN_add_word
		test	eax, eax
		jz	loc_410527
		mov	eax, [esp+19Ch+var_40]
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_push
		test	eax, eax
		jz	loc_411860
		mov	esi, [esp+19Ch+var_E8]

loc_41090F:				; CODE XREF: _ca_main+25B3j
					; _ca_main+2865j
		test	ebx, ebx
		jle	loc_410A9D
		lea	eax, [ebx+edi]
		mov	[esp+19Ch+var_F0], eax
		mov	eax, edi
		neg	eax
		lea	ebx, [ebp+eax*4+0]
		lea	eax, [esp+19Ch+var_40]
		mov	[esp+19Ch+var_108], eax

loc_410937:				; CODE XREF: _ca_main+2797j
		inc	edi
		mov	edx, [ebx+edi*4-4]
		mov	eax, [esp+19Ch+var_C4]
		mov	[esp+19Ch+var_148], eax
		mov	eax, [esp+19Ch+var_44]
		mov	[esp+19Ch+var_14C], eax
		mov	eax, [esp+19Ch+var_A4]
		mov	[esp+19Ch+var_150], eax
		mov	eax, [esp+19Ch+var_4C]
		mov	[esp+19Ch+var_154], eax
		mov	eax, [esp+19Ch+var_48]
		mov	[esp+19Ch+var_158], eax
		mov	eax, [esp+19Ch+var_140]
		mov	[esp+19Ch+var_15C], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+var_160], eax
		mov	eax, [esp+19Ch+var_104]
		mov	[esp+19Ch+var_164], eax
		mov	eax, [esp+19Ch+var_D8]
		mov	[esp+19Ch+var_168], eax
		mov	eax, [esp+19Ch+var_50]
		mov	[esp+19Ch+var_16C], eax
		mov	eax, [esp+19Ch+var_F4]
		mov	[esp+19Ch+var_170], eax
		mov	eax, [esp+19Ch+var_FC]
		mov	[esp+19Ch+var_174], eax
		mov	eax, [esp+19Ch+var_EC]
		mov	[esp+19Ch+var_178], eax
		mov	eax, [esp+19Ch+var_100]
		mov	[esp+19Ch+var_17C], eax
		mov	eax, [esp+19Ch+var_110]
		mov	[esp+19Ch+var_180], eax
		mov	eax, [esp+19Ch+var_12C]
		mov	[esp+19Ch+var_184], eax
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+var_188], eax
		mov	eax, [esp+19Ch+var_138]
		mov	[esp+19Ch+var_18C], eax
		mov	eax, [esp+19Ch+var_A8]
		mov	[esp+19Ch+var_190], eax
		mov	eax, [esp+19Ch+var_10C]
		mov	[esp+19Ch+var_194], eax
		mov	eax, [esp+19Ch+var_D0]
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_98]
		mov	[esp+19Ch+lpFileName], eax
		mov	ecx, [esp+19Ch+var_130]
		mov	eax, [esp+19Ch+var_108]
		call	_certify
		test	eax, eax
		js	loc_410527
		jz	short loc_410A90
		inc	esi
		mov	[esp+19Ch+var_198], offset asc_45C772 ;	"\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_198], 1
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+lpFileName], eax
		call	_BN_add_word
		test	eax, eax
		jz	loc_410527
		mov	eax, [esp+19Ch+var_40]
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_push
		test	eax, eax
		jz	loc_411860

loc_410A90:				; CODE XREF: _ca_main+273Aj
		cmp	edi, [esp+19Ch+var_F0]
		jnz	loc_410937

loc_410A9D:				; CODE XREF: _ca_main+2611j
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_num
		test	eax, eax
		jle	loc_410D84
		mov	eax, [esp+19Ch+var_D8]
		test	eax, eax
		jnz	loc_410D06
		mov	[esp+19Ch+var_190], edi
		mov	[esp+19Ch+var_194], esi
		mov	[esp+19Ch+var_198], offset aDOutOfDCertifi ; "\n%d out of %d certificate requests cer"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_190], 0
		mov	[esp+19Ch+var_194], 0
		mov	[esp+19Ch+var_198], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_ctrl
		mov	ds:_buf_36752, 0
		mov	eax, ds:__imp___iob
		mov	[esp+19Ch+var_194], eax	; FILE *
		mov	[esp+19Ch+var_198], 0Ah	; int
		mov	[esp+19Ch+lpFileName], offset _buf_36752 ; char	*
		call	_fgets
		test	eax, eax
		jz	loc_410CF9
		mov	al, ds:_buf_36752
		and	eax, 0FFFFFFDFh
		cmp	al, 59h
		jz	loc_410D06
		mov	[esp+19Ch+var_198], offset aCertificationC ; "CERTIFICATION CANCELED\n"

loc_410B46:				; CODE XREF: _ca_main+2A01j
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		xor	ebx, ebx

loc_410B55:				; CODE XREF: _ca_main+3222j
		xor	esi, esi
		xor	edi, edi
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_410B5E:				; CODE XREF: _ca_main+24A1j
		mov	edi, [esp+19Ch+var_108]
		jmp	loc_41090F
; ---------------------------------------------------------------------------

loc_410B6A:				; CODE XREF: _ca_main+23EFj
		mov	[esp+19Ch+var_198], offset aSignatureOk	; "Signature ok\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		call	_EVP_md5
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], 0
		mov	eax, [esp+19Ch+var_F0]
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_to_X509_REQ
		mov	edx, eax
		test	eax, eax
		jz	loc_410CD4
		lea	eax, [esp+19Ch+var_40]
		mov	[esp+19Ch+var_148], 0 ;	int
		mov	edi, [esp+19Ch+var_B0]
		mov	[esp+19Ch+var_14C], edi	; int
		mov	edi, [esp+19Ch+var_A4]
		mov	[esp+19Ch+var_150], edi	; int
		mov	edi, [esp+19Ch+var_90]
		mov	[esp+19Ch+var_154], edi	; int
		mov	edi, [esp+19Ch+var_8C]
		mov	[esp+19Ch+var_158], edi	; int
		mov	edi, [esp+19Ch+var_88]
		mov	[esp+19Ch+var_15C], edi	; int
		mov	edi, [esp+19Ch+var_104]
		mov	[esp+19Ch+var_160], edi	; int
		mov	[esp+19Ch+var_B0], edx
		mov	[esp+19Ch+var_164], edx	; int
		mov	edi, [esp+19Ch+var_140]
		mov	[esp+19Ch+var_168], edi	; int
		mov	edi, [esp+19Ch+var_D8]
		mov	[esp+19Ch+var_16C], edi	; int
		mov	edi, [esp+19Ch+var_84]
		mov	[esp+19Ch+var_170], edi	; int
		mov	edi, [esp+19Ch+var_F4]
		mov	[esp+19Ch+var_174], edi	; int
		mov	edi, [esp+19Ch+var_FC]
		mov	[esp+19Ch+var_178], edi	; char *
		mov	edi, [esp+19Ch+var_EC]
		mov	[esp+19Ch+var_17C], edi	; int
		mov	edi, [esp+19Ch+var_100]
		mov	[esp+19Ch+var_180], edi	; int
		mov	edi, [esp+19Ch+var_110]
		mov	[esp+19Ch+var_184], edi	; int
		mov	edi, [esp+19Ch+var_12C]
		mov	[esp+19Ch+var_188], edi	; char *
		mov	edi, [esp+19Ch+var_80]
		mov	[esp+19Ch+var_18C], edi	; int
		mov	edi, [esp+19Ch+var_138]
		mov	[esp+19Ch+var_190], edi	; int
		mov	edi, [esp+19Ch+var_A8]
		mov	[esp+19Ch+var_194], edi	; int
		mov	edi, [esp+19Ch+var_10C]
		mov	[esp+19Ch+var_198], edi	; int
		mov	edi, [esp+19Ch+var_D0]
		mov	[esp+19Ch+lpFileName], edi ; int
		mov	ecx, [esp+19Ch+var_134]
		mov	edx, [esp+19Ch+var_130]
		call	_do_body
		mov	edi, eax
		mov	edx, [esp+19Ch+var_B0]
		mov	[esp+19Ch+lpFileName], edx
		call	_X509_REQ_free
		jmp	loc_41070C
; ---------------------------------------------------------------------------

loc_410CB8:				; CODE XREF: _ca_main+23E9j
		mov	[esp+19Ch+var_198], offset aSignatureVer_0 ; "Signature	verification problems....\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_41070C
; ---------------------------------------------------------------------------

loc_410CD4:				; CODE XREF: _ca_main+28A3j
		mov	edx, [esp+19Ch+var_F0]
		test	edx, edx
		jz	loc_410527
		mov	edi, 0FFFFFFFFh
		jmp	loc_41070C
; ---------------------------------------------------------------------------

loc_410CED:				; CODE XREF: _ca_main+2423j
		mov	edi, [esp+19Ch+var_DC]
		jmp	loc_410798
; ---------------------------------------------------------------------------

loc_410CF9:				; CODE XREF: _ca_main+2828j
		mov	[esp+19Ch+var_198], offset aCertificatio_0 ; "CERTIFICATION CANCELED: I/O error\n"
		jmp	loc_410B46
; ---------------------------------------------------------------------------

loc_410D06:				; CODE XREF: _ca_main+27BAj
					; _ca_main+2838j
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_num
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aWriteOutDataba ; "Write out	database with %d new entries\"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+var_190], 0 ;	int
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+var_194], eax	; int
		mov	[esp+19Ch+var_198], offset aNew_4 ; "new"
		mov	eax, [esp+19Ch+lpExistingFileName]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_save_serial
		test	eax, eax
		jz	loc_410527
		mov	eax, [esp+19Ch+var_138]
		mov	[esp+19Ch+var_194], eax	; int
		mov	[esp+19Ch+var_198], offset aNew_4 ; "new"
		mov	eax, [esp+19Ch+var_BC]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_save_index
		test	eax, eax
		jz	loc_410527

loc_410D84:				; CODE XREF: _ca_main+27ABj
		mov	eax, [esp+19Ch+var_140]
		test	eax, eax
		jz	short loc_410DA1
		mov	[esp+19Ch+var_198], offset aWritingNewCert ; "writing new certificates\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_410DA1:				; CODE XREF: _ca_main+2A8Aj
		mov	[esp+19Ch+var_12C], 0

loc_410DA9:				; CODE XREF: _ca_main+2C90j
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_num
		cmp	[esp+19Ch+var_12C], eax
		jge	loc_411037
		mov	eax, [esp+19Ch+var_12C]
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_value
		mov	[esp+19Ch+var_40], eax
		mov	eax, [eax]
		mov	eax, [eax+4]
		mov	ebp, [eax]
		mov	ebx, [eax+8]
		mov	eax, [esp+19Ch+var_F8]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_strlen
		test	ebp, ebp
		jz	loc_41102D
		mov	edx, 7Dh
		sub	edx, ebp
		add	edx, edx

loc_410E04:				; CODE XREF: _ca_main+2D32j
		cmp	edx, eax
		jbe	loc_410F95
		inc	eax
		mov	edi, offset byte_473020
		mov	esi, [esp+19Ch+var_F8]
		cmp	eax, 4
		jb	short loc_410E25
		mov	ecx, eax
		shr	ecx, 2
		rep movsd

loc_410E25:				; CODE XREF: _ca_main+2B1Cj
		xor	edx, edx
		test	al, 2
		jz	short loc_410E36
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_410E36:				; CODE XREF: _ca_main+2B29j
		test	al, 1
		jz	short loc_410E47
		mov	al, [esi+edx]
		mov	byte ptr [esp+19Ch+var_110], al
		mov	[edi+edx], al

loc_410E47:				; CODE XREF: _ca_main+2B38j
		mov	[esp+19Ch+var_194], 100h
		mov	[esp+19Ch+var_198], offset asc_45CBC9 ;	"/"
		mov	[esp+19Ch+lpFileName], offset byte_473020
		call	_BUF_strlcat
		mov	edx, offset byte_473020

loc_410E68:				; CODE XREF: _ca_main+2B7Cj
		mov	ecx, [edx]
		add	edx, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_410E68
		test	eax, 8080h
		jnz	short loc_410E8B
		shr	eax, 10h
		add	edx, 2

loc_410E8B:				; CODE XREF: _ca_main+2B83j
		add	al, al
		sbb	edx, 3
		sub	edx, offset byte_473020
		lea	edi, byte_473020[edx]
		test	ebp, ebp
		jle	loc_410FAF
		cmp	edi, offset _msie_hack
		jnb	short loc_410EE4
		mov	esi, offset _msie_hack
		add	ebp, ebx

loc_410EB3:				; CODE XREF: _ca_main+2BE2j
		inc	ebx
		xor	eax, eax
		mov	al, [ebx-1]
		mov	[esp+19Ch+var_190], eax
		mov	[esp+19Ch+var_194], offset a02x_1 ; "%02X"
		mov	eax, esi
		sub	eax, edi
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], edi
		call	_BIO_snprintf
		add	edi, 2
		cmp	ebx, ebp
		jz	short loc_410EE4
		cmp	edi, offset _msie_hack
		jb	short loc_410EB3

loc_410EE4:				; CODE XREF: _ca_main+2BAAj
					; _ca_main+2BDAj ...
		mov	byte ptr [edi],	2Eh
		mov	byte ptr [edi+1], 70h
		mov	byte ptr [edi+2], 65h
		mov	byte ptr [edi+3], 6Dh
		mov	byte ptr [edi+4], 0
		mov	eax, [esp+19Ch+var_140]
		test	eax, eax
		jz	short loc_410F1C
		mov	[esp+19Ch+var_194], offset byte_473020
		mov	[esp+19Ch+var_198], offset aWritingS ; "writing	%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_410F1C:				; CODE XREF: _ca_main+2BFDj
		mov	[esp+19Ch+var_190], offset byte_473020
		mov	[esp+19Ch+var_194], 5
		mov	[esp+19Ch+var_198], 6Ch
		mov	eax, [esp+19Ch+var_120]
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_411013
		mov	ebx, [esp+19Ch+var_40]
		mov	eax, [esp+19Ch+var_A0]
		test	eax, eax
		mov	[esp+19Ch+var_198], ebx
		jz	short loc_410FD4
		mov	eax, [esp+19Ch+var_120]
		mov	[esp+19Ch+lpFileName], eax
		call	_PEM_write_bio_X509
		mov	ebx, [esp+19Ch+var_40]
		mov	eax, [esp+19Ch+var_E0]
		test	eax, eax
		jnz	short loc_410FC2

loc_410F7C:				; CODE XREF: _ca_main+2D0Ej
		mov	[esp+19Ch+var_198], ebx
		mov	eax, [esp+19Ch+var_124]
		mov	[esp+19Ch+lpFileName], eax
		call	_PEM_write_bio_X509

loc_410F8C:				; CODE XREF: _ca_main+2CD2j
		inc	[esp+19Ch+var_12C]
		jmp	loc_410DA9
; ---------------------------------------------------------------------------

loc_410F95:				; CODE XREF: _ca_main+2B06j
		mov	[esp+19Ch+var_198], offset aCertificateF_0 ; "certificate file name too	long\n"

loc_410F9D:				; CODE XREF: _ca_main+3568j
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_410527
; ---------------------------------------------------------------------------

loc_410FAF:				; CODE XREF: _ca_main+2B9Ej
		mov	ds:byte_473020[edx], 30h
		mov	byte ptr [edi+1], 30h
		add	edi, 2
		jmp	loc_410EE4
; ---------------------------------------------------------------------------

loc_410FC2:				; CODE XREF: _ca_main+2C7Aj
					; _ca_main+2CFCj
		mov	[esp+19Ch+var_198], ebx
		mov	eax, [esp+19Ch+var_124]
		mov	[esp+19Ch+lpFileName], eax
		call	_i2d_X509_bio
		jmp	short loc_410F8C
; ---------------------------------------------------------------------------

loc_410FD4:				; CODE XREF: _ca_main+2C5Cj
		mov	esi, [esp+19Ch+var_120]
		mov	[esp+19Ch+lpFileName], esi
		call	_X509_print
		mov	[esp+19Ch+var_198], ebx
		mov	[esp+19Ch+lpFileName], esi
		call	_PEM_write_bio_X509
		mov	ebx, [esp+19Ch+var_40]
		mov	ebp, [esp+19Ch+var_E0]
		test	ebp, ebp
		jnz	short loc_410FC2
		mov	[esp+19Ch+var_198], ebx
		mov	eax, [esp+19Ch+var_124]
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_print
		jmp	loc_410F7C
; ---------------------------------------------------------------------------

loc_411013:				; CODE XREF: _ca_main+2C42j
		mov	[esp+19Ch+lpFileName], offset byte_473020 ; char *
		call	_perror
		xor	ebx, ebx
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_41102D:				; CODE XREF: _ca_main+2AF5j
		mov	edx, 0F8h
		jmp	loc_410E04
; ---------------------------------------------------------------------------

loc_411037:				; CODE XREF: _ca_main+2AB9j
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_num
		test	eax, eax
		jnz	loc_41170B

loc_41104B:				; CODE XREF: _ca_main+346Ej
					; _ca_main+3A34j
		mov	edi, [esp+19Ch+var_C0]
		test	edi, edi
		jz	loc_411813
		mov	esi, [esp+19Ch+var_E4]
		test	esi, esi
		jz	loc_41165F

loc_411069:				; CODE XREF: _ca_main+3386j
		mov	[esp+19Ch+var_188], 1
		mov	[esp+19Ch+var_18C], 0
		mov	[esp+19Ch+var_190], 0
		mov	[esp+19Ch+var_194], 0
		mov	[esp+19Ch+var_198], 0
		lea	ebx, [esp+19Ch+var_38]
		mov	[esp+19Ch+lpFileName], ebx
		call	_X509V3_set_ctx
		mov	eax, ds:_conf
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], ebx
		call	_X509V3_set_nconf
		mov	[esp+19Ch+var_190], 0
		mov	eax, [esp+19Ch+var_E4]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], ebx
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_X509V3_EXT_add_nconf
		test	eax, eax
		jz	loc_41169D

loc_4110DD:				; CODE XREF: _ca_main+3391j
		mov	[esp+19Ch+var_194], offset aCrlnumber ;	"crlnumber"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	ebp, eax
		test	eax, eax
		jz	loc_411696
		mov	[esp+19Ch+var_194], 0 ;	int
		mov	[esp+19Ch+var_198], 0 ;	int
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_load_serial
		mov	esi, eax
		test	eax, eax
		jz	loc_411286

loc_411127:				; CODE XREF: _ca_main+3398j
		mov	ebx, [esp+19Ch+var_60]
		test	ebx, ebx
		jnz	short loc_41114C
		mov	ecx, [esp+19Ch+var_5C]
		test	ecx, ecx
		jnz	short loc_41114C
		mov	edx, [esp+19Ch+var_B4]
		test	edx, edx
		jz	loc_411773

loc_41114C:				; CODE XREF: _ca_main+2E30j
					; _ca_main+2E3Bj ...
		mov	eax, [esp+19Ch+var_140]
		test	eax, eax
		jz	short loc_411169
		mov	[esp+19Ch+var_198], offset aMakingCrl ;	"making	CRL\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_411169:				; CODE XREF: _ca_main+2E52j
		call	_X509_CRL_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_41052B
		mov	eax, [esp+19Ch+var_134]
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_get_subject_name
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], ebx
		call	_X509_CRL_set_issuer_name
		test	eax, eax
		jz	loc_41052B
		call	_ASN1_TIME_new
		mov	edi, eax
		test	eax, eax
		jz	loc_41052B
		mov	[esp+19Ch+var_198], 0
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_gmtime_adj
		mov	[esp+19Ch+var_198], edi
		mov	[esp+19Ch+lpFileName], ebx
		call	_X509_CRL_set_lastUpdate
		mov	[esp+19Ch+var_190], 0
		mov	edx, [esp+19Ch+var_5C]
		lea	eax, [edx+edx]
		add	eax, edx
		lea	eax, [eax+eax*4]
		mov	edx, eax
		shl	edx, 4
		sub	edx, eax
		shl	edx, 4
		add	edx, [esp+19Ch+var_B4]
		mov	[esp+19Ch+var_194], edx
		mov	eax, [esp+19Ch+var_60]
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], edi
		call	_X509_time_adj_ex
		test	eax, eax
		jz	loc_4116CB
		mov	[esp+19Ch+var_198], edi
		mov	[esp+19Ch+lpFileName], ebx
		call	_X509_CRL_set_nextUpdate
		mov	[esp+19Ch+lpFileName], edi
		call	_ASN1_TIME_free
		mov	[esp+19Ch+var_108], 0
		mov	[esp+19Ch+var_110], 0
		mov	[esp+19Ch+var_12C], esi

loc_411238:				; CODE XREF: _ca_main+2F84j
		mov	eax, [esp+19Ch+var_138]
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_num
		cmp	[esp+19Ch+var_110], eax
		jge	loc_41135C
		mov	eax, [esp+19Ch+var_138]
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		mov	edx, [esp+19Ch+var_110]
		mov	[esp+19Ch+var_198], edx
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_value
		mov	esi, eax
		mov	eax, [eax]
		cmp	byte ptr [eax],	52h
		jz	short loc_4112A2

loc_41127D:				; CODE XREF: _ca_main+3049j
		inc	[esp+19Ch+var_110]
		jmp	short loc_411238
; ---------------------------------------------------------------------------

loc_411286:				; CODE XREF: _ca_main+2E21j
		mov	[esp+19Ch+var_198], offset aErrorWhileLo_0 ; "error while loading CRL number\n"

loc_41128E:				; CODE XREF: _ca_main+350Ej
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_41052B
; ---------------------------------------------------------------------------

loc_4112A2:				; CODE XREF: _ca_main+2F7Bj
		call	_X509_REVOKED_new
		mov	edi, eax
		test	eax, eax
		jz	loc_41134E
		mov	eax, [esi+8]
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], edi
		call	_make_revoked
		test	eax, eax
		jz	loc_41134E
		cmp	eax, 2
		jnz	short loc_4112D8
		mov	[esp+19Ch+var_108], 1

loc_4112D8:				; CODE XREF: _ca_main+2FCBj
		mov	eax, [esi+0Ch]
		mov	[esp+19Ch+var_198], eax
		lea	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+lpFileName], eax
		call	_BN_hex2bn
		test	eax, eax
		jz	short loc_41134E
		mov	[esp+19Ch+var_198], 0
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+lpFileName], eax
		call	_BN_to_ASN1_INTEGER
		mov	esi, eax
		mov	eax, [esp+19Ch+var_54]
		mov	[esp+19Ch+lpFileName], eax
		call	_BN_free
		mov	[esp+19Ch+var_54], 0
		test	esi, esi
		jz	short loc_41134E
		mov	[esp+19Ch+var_198], esi
		mov	[esp+19Ch+lpFileName], edi
		call	_X509_REVOKED_set_serialNumber
		mov	[esp+19Ch+lpFileName], esi
		call	_ASN1_INTEGER_free
		mov	[esp+19Ch+var_198], edi
		mov	[esp+19Ch+lpFileName], ebx
		call	_X509_CRL_add0_revoked
		jmp	loc_41127D
; ---------------------------------------------------------------------------

loc_41134E:				; CODE XREF: _ca_main+2FABj
					; _ca_main+2FC2j ...
		mov	esi, [esp+19Ch+var_12C]
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_41135C:				; CODE XREF: _ca_main+2F51j
		mov	esi, [esp+19Ch+var_12C]
		mov	[esp+19Ch+lpFileName], ebx
		call	_X509_CRL_sort
		mov	eax, [esp+19Ch+var_140]
		test	eax, eax
		jz	short loc_411385
		mov	[esp+19Ch+var_198], offset aSigningCrl ; "signing CRL\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf

loc_411385:				; CODE XREF: _ca_main+306Ej
		mov	eax, [esp+19Ch+var_E4]
		test	eax, eax
		jz	loc_41160E
		mov	[esp+19Ch+var_188], 0
		mov	[esp+19Ch+var_18C], ebx
		mov	[esp+19Ch+var_190], 0
		mov	[esp+19Ch+var_194], 0
		mov	eax, [esp+19Ch+var_134]
		mov	[esp+19Ch+var_198], eax
		lea	edi, [esp+19Ch+var_38]
		mov	[esp+19Ch+lpFileName], edi
		call	_X509V3_set_ctx
		mov	eax, ds:_conf
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], edi
		call	_X509V3_set_nconf
		mov	[esp+19Ch+var_190], ebx
		mov	eax, [esp+19Ch+var_E4]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], edi
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_X509V3_EXT_CRL_add_nconf
		test	eax, eax
		jz	loc_41052B
		test	ebp, ebp
		jz	short loc_411462

loc_411404:				; CODE XREF: _ca_main+335Aj
		mov	[esp+19Ch+var_198], 0
		mov	[esp+19Ch+lpFileName], esi
		call	_BN_to_ASN1_INTEGER
		mov	edi, eax
		test	eax, eax
		jz	loc_41052B
		mov	[esp+19Ch+var_18C], 0
		mov	[esp+19Ch+var_190], 0
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], 58h
		mov	[esp+19Ch+lpFileName], ebx
		call	_X509_CRL_add1_ext_i2d
		mov	[esp+19Ch+lpFileName], edi
		call	_ASN1_INTEGER_free
		mov	[esp+19Ch+var_198], 1
		mov	[esp+19Ch+lpFileName], esi
		call	_BN_add_word
		test	eax, eax
		jz	loc_41052B

loc_411462:				; CODE XREF: _ca_main+3102j
					; _ca_main+3523j
		mov	[esp+19Ch+var_198], 1
		mov	[esp+19Ch+lpFileName], ebx
		call	_X509_CRL_set_version
		test	eax, eax
		jz	loc_41052B
		test	ebp, ebp
		jz	short loc_4114A2
		mov	[esp+19Ch+var_190], 0 ;	int
		mov	[esp+19Ch+var_194], esi	; int
		mov	[esp+19Ch+var_198], offset aNew_4 ; "new"
		mov	[esp+19Ch+lpFileName], ebp ; char *
		call	_save_serial
		test	eax, eax
		jz	loc_41052B

loc_4114A2:				; CODE XREF: _ca_main+317Cj
					; _ca_main+3529j
		test	esi, esi
		jz	short loc_4114AE
		mov	[esp+19Ch+lpFileName], esi
		call	_BN_free

loc_4114AE:				; CODE XREF: _ca_main+31A4j
		mov	eax, [esp+19Ch+var_10C]
		mov	[esp+19Ch+var_18C], eax
		mov	eax, [esp+19Ch+var_D0]
		mov	[esp+19Ch+var_190], eax
		mov	eax, [esp+19Ch+var_130]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], ebx
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_do_X509_CRL_sign
		test	eax, eax
		jz	loc_410529
		mov	[esp+19Ch+var_198], ebx
		mov	eax, [esp+19Ch+var_124]
		mov	[esp+19Ch+lpFileName], eax
		call	_PEM_write_bio_X509_CRL
		test	ebp, ebp
		jz	short loc_411519
		mov	[esp+19Ch+var_194], offset aOld_0 ; "old"
		mov	[esp+19Ch+var_198], offset aNew_4 ; "new"
		mov	[esp+19Ch+lpFileName], ebp ; lpExistingFileName
		call	_rotate_serial
		test	eax, eax
		jz	loc_410529

loc_411519:				; CODE XREF: _ca_main+31F7j
					; _ca_main+3515j
		mov	edi, [esp+19Ch+var_AC]
		test	edi, edi
		jz	loc_410B55
		mov	esi, [esp+19Ch+var_D4]
		test	esi, esi
		jz	loc_4116EA
		mov	eax, [esp+19Ch+var_D4]
		mov	[esp+19Ch+var_188], eax
		mov	edx, [esp+19Ch+var_9C]
		mov	[esp+19Ch+var_18C], edx
		mov	[esp+19Ch+var_190], 0
		mov	[esp+19Ch+var_194], 3
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_load_cert
		mov	esi, eax
		test	eax, eax
		jz	loc_410529
		mov	eax, [esp+19Ch+var_C8]
		mov	[esp+19Ch+lpFileName], eax ; char *
		mov	ecx, [esp+19Ch+var_CC]
		mov	edi, [esp+19Ch+var_138]
		mov	edx, edi
		mov	eax, esi
		call	_do_revoke
		test	eax, eax
		jle	loc_410529
		mov	[esp+19Ch+lpFileName], esi
		call	_X509_free
		mov	[esp+19Ch+var_194], edi	; int
		mov	[esp+19Ch+var_198], offset aNew_4 ; "new"
		mov	eax, [esp+19Ch+var_BC]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_save_index
		test	eax, eax
		jz	loc_410529
		mov	[esp+19Ch+var_194], offset aOld_0 ; "old"
		mov	[esp+19Ch+var_198], offset aNew_4 ; "new"
		mov	eax, [esp+19Ch+var_BC]
		mov	[esp+19Ch+lpFileName], eax ; lpExistingFileName
		call	_rotate_index
		test	eax, eax
		jz	loc_410529
		mov	[esp+19Ch+var_198], offset aDataBaseUpdate ; "Data Base	Updated\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		xor	esi, esi
		xor	edi, edi
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_41160E:				; CODE XREF: _ca_main+308Ej
		test	ebp, ebp
		jz	loc_41181A
		mov	[esp+19Ch+var_188], 0
		mov	[esp+19Ch+var_18C], ebx
		mov	[esp+19Ch+var_190], 0
		mov	[esp+19Ch+var_194], 0
		mov	eax, [esp+19Ch+var_134]
		mov	[esp+19Ch+var_198], eax
		lea	edi, [esp+19Ch+var_38]
		mov	[esp+19Ch+lpFileName], edi
		call	_X509V3_set_ctx
		mov	eax, ds:_conf
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], edi
		call	_X509V3_set_nconf
		jmp	loc_411404
; ---------------------------------------------------------------------------

loc_41165F:				; CODE XREF: _ca_main+2D63j
		mov	[esp+19Ch+var_194], offset aCrl_extensions ; "crl_extensions"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_E4], eax
		test	eax, eax
		jnz	loc_411069
		call	_ERR_clear_error
		jmp	loc_4110DD
; ---------------------------------------------------------------------------

loc_411696:				; CODE XREF: _ca_main+2DFFj
		xor	esi, esi
		jmp	loc_411127
; ---------------------------------------------------------------------------

loc_41169D:				; CODE XREF: _ca_main+2DD7j
		mov	eax, [esp+19Ch+var_E4]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aErrorLoadingCr ; "Error Loading CRL	extension section %s\"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		xor	ebx, ebx
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_4116CB:				; CODE XREF: _ca_main+2F04j
		mov	[esp+19Ch+var_198], offset aErrorSettingCr ; "error setting CRL	nextUpdate\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_puts
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_4116EA:				; CODE XREF: _ca_main+3231j
		mov	[esp+19Ch+var_198], offset aNoInputFiles ; "no input files\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_41170B:				; CODE XREF: _ca_main+2D45j
		mov	[esp+19Ch+var_194], offset aOld_0 ; "old"
		mov	[esp+19Ch+var_198], offset aNew_4 ; "new"
		mov	eax, [esp+19Ch+lpExistingFileName]
		mov	[esp+19Ch+lpFileName], eax ; lpExistingFileName
		call	_rotate_serial
		test	eax, eax
		jz	loc_410527
		mov	[esp+19Ch+var_194], offset aOld_0 ; "old"
		mov	[esp+19Ch+var_198], offset aNew_4 ; "new"
		mov	eax, [esp+19Ch+var_BC]
		mov	[esp+19Ch+lpFileName], eax ; lpExistingFileName
		call	_rotate_index
		test	eax, eax
		jz	loc_410527
		mov	[esp+19Ch+var_198], offset aDataBaseUpdate ; "Data Base	Updated\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_41104B
; ---------------------------------------------------------------------------

loc_411773:				; CODE XREF: _ca_main+2E46j
		lea	eax, [esp+19Ch+var_60]
		mov	[esp+19Ch+var_190], eax
		mov	[esp+19Ch+var_194], offset aDefault_crl_da ; "default_crl_days"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_number_e
		test	eax, eax
		jnz	short loc_4117AB
		mov	[esp+19Ch+var_60], 0

loc_4117AB:				; CODE XREF: _ca_main+349Ej
		lea	eax, [esp+19Ch+var_5C]
		mov	[esp+19Ch+var_190], eax
		mov	[esp+19Ch+var_194], offset aDefault_crl_ho ; "default_crl_hours"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_number_e
		test	eax, eax
		jnz	short loc_4117E3
		mov	[esp+19Ch+var_5C], 0

loc_4117E3:				; CODE XREF: _ca_main+34D6j
		call	_ERR_clear_error
		mov	eax, [esp+19Ch+var_60]
		test	eax, eax
		jnz	loc_41114C
		mov	eax, [esp+19Ch+var_5C]
		test	eax, eax
		jnz	loc_41114C
		mov	[esp+19Ch+var_198], offset aCannotLookup_0 ; "cannot lookup how	long until the next C"...
		jmp	loc_41128E
; ---------------------------------------------------------------------------

loc_411813:				; CODE XREF: _ca_main+2D54j
		xor	ebx, ebx
		jmp	loc_411519
; ---------------------------------------------------------------------------

loc_41181A:				; CODE XREF: _ca_main+3310j
		mov	eax, [esp+19Ch+var_108]
		test	eax, eax
		jnz	loc_411462
		jmp	loc_4114A2
; ---------------------------------------------------------------------------

loc_41182E:				; CODE XREF: _ca_main+23B8j
		mov	[esp+19Ch+var_198], offset aErrorUnpacking ; "error unpacking public key\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	edi, 0FFFFFFFFh
		jmp	loc_41070C
; ---------------------------------------------------------------------------

loc_41184D:				; CODE XREF: _ca_main+22DEj
		mov	edi, [esp+19Ch+var_108]
		mov	[esp+19Ch+var_108], eax
		jmp	loc_410798
; ---------------------------------------------------------------------------

loc_411860:				; CODE XREF: _ca_main+1E7Cj
					; _ca_main+2476j ...
		mov	[esp+19Ch+var_198], offset aMemoryAlloca_0 ; "Memory allocation	failure\n"
		jmp	loc_410F9D
; ---------------------------------------------------------------------------

loc_41186D:				; CODE XREF: _ca_main+1E6Bj
		mov	eax, [esp+19Ch+var_E0]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aUnableToFindSe ; "unable to	find 'section' for %s\n"
		jmp	loc_40FB0B
; ---------------------------------------------------------------------------

loc_411885:				; CODE XREF: _ca_main+1DDCj
		lea	eax, [esp+19Ch+var_50]
		mov	[esp+19Ch+var_190], eax
		mov	[esp+19Ch+var_194], offset aDefault_days ; "default_days"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_number_e
		test	eax, eax
		jnz	loc_4100E2
		mov	[esp+19Ch+var_50], 0
		jmp	loc_4100E2
; ---------------------------------------------------------------------------

loc_4118C6:				; CODE XREF: _ca_main+1DCDj
		mov	[esp+19Ch+var_198], offset aEndDateIsInval ; "end date is invalid, it should be	YYMMD"...
		jmp	loc_40FDE8
; ---------------------------------------------------------------------------

loc_4118D3:				; CODE XREF: _ca_main+1DAEj
		mov	[esp+19Ch+var_194], offset aDefault_enddat ; "default_enddate"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_F4], eax
		test	eax, eax
		jnz	loc_4100B4
		call	_ERR_clear_error
		jmp	loc_4100D3
; ---------------------------------------------------------------------------

loc_41190A:				; CODE XREF: _ca_main+1D9Fj
		mov	[esp+19Ch+var_198], offset aStartDateIsInv ; "start date is invalid, it	should be YYM"...
		jmp	loc_40FDE8
; ---------------------------------------------------------------------------

loc_411917:				; CODE XREF: _ca_main+1F42j
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_ERR_print_errors

loc_411924:				; CODE XREF: _ca_main+3668j
		mov	esi, 0FFFFFFFFh
		mov	[esp+19Ch+var_108], 0
		jmp	loc_4104C7
; ---------------------------------------------------------------------------

loc_411939:				; CODE XREF: _ca_main+1F2Ej
		mov	eax, [esp+19Ch+var_DC]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aNoNameValuePai ; "no name/value pairs found	in %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	eax, [esp+19Ch+var_F0]
		mov	[esp+19Ch+lpFileName], eax
		call	_CONF_free
		jmp	short loc_411924
; ---------------------------------------------------------------------------

loc_41196A:				; CODE XREF: _ca_main+1FF5j
		mov	eax, [ebx+8]
		mov	[esp+19Ch+var_198], 0FFFFFFFFh
		mov	[esp+19Ch+lpFileName], eax
		call	_NETSCAPE_SPKI_b64_decode
		mov	[esp+19Ch+var_108], eax
		test	eax, eax
		jnz	loc_4102FB
		mov	ebx, [esp+19Ch+var_E0]
		mov	[esp+19Ch+var_198], offset aUnableToLoadNe ; "unable to	load Netscape SPKAC structure"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_ERR_print_errors
		mov	esi, 0FFFFFFFFh
		jmp	loc_4104B8
; ---------------------------------------------------------------------------

loc_4119BF:				; CODE XREF: _ca_main+1FE3j
		mov	[esp+19Ch+var_184], 0
		mov	[esp+19Ch+var_188], 0FFFFFFFFh
		mov	[esp+19Ch+var_18C], 0FFFFFFFFh
		mov	[esp+19Ch+var_190], edi
		mov	ebx, [esp+19Ch+var_110]
		mov	[esp+19Ch+var_194], ebx
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_70]
		mov	[esp+19Ch+lpFileName], eax
		call	_X509_NAME_add_entry_by_NID
		test	eax, eax
		jnz	loc_4102FB
		mov	ebx, [esp+19Ch+var_E0]
		mov	esi, 0FFFFFFFFh
		jmp	loc_4104B8
; ---------------------------------------------------------------------------

loc_411A12:				; CODE XREF: _ca_main+2072j
		mov	[esp+19Ch+var_198], offset aErrorUnpacki_0 ; "error unpacking SPKAC public key\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_4104B8
; ---------------------------------------------------------------------------

loc_411A31:				; CODE XREF: _ca_main+2044j
		mov	eax, [esp+19Ch+var_DC]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aNetscapeSpkacS ; "Netscape SPKAC structure not found in %"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_4104B8
; ---------------------------------------------------------------------------

loc_411A5B:				; CODE XREF: _ca_main+2221j
		mov	eax, [esp+19Ch+var_40]
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_push
		test	eax, eax
		jz	loc_411860
		mov	ecx, [esp+19Ch+var_B8]
		test	ecx, ecx
		mov	[esp+19Ch+var_B8], 3
		mov	[esp+19Ch+var_DC], 3
		mov	[esp+19Ch+var_E8], 2
		mov	[esp+19Ch+var_108], 2
		jz	short loc_411B19
		mov	[esp+19Ch+var_D8], 1
		mov	[esp+19Ch+var_E0], 1
		mov	esi, 1
		mov	eax, 1
		jmp	loc_4105D5
; ---------------------------------------------------------------------------

loc_411AD6:				; CODE XREF: _ca_main+21EDj
		mov	[esp+19Ch+var_B8], 2
		mov	[esp+19Ch+var_DC], 3
		mov	[esp+19Ch+var_E8], 1
		mov	[esp+19Ch+var_108], 2
		mov	[esp+19Ch+var_E0], 0
		xor	esi, esi
		mov	eax, 1
		jmp	loc_4105D5
; ---------------------------------------------------------------------------

loc_411B19:				; CODE XREF: _ca_main+37AFj
		mov	[esp+19Ch+var_E0], 0
		mov	esi, 1
		mov	eax, 1
		jmp	loc_4105D5
; ---------------------------------------------------------------------------

loc_411B33:				; CODE XREF: _ca_main+1D80j
		mov	[esp+19Ch+var_194], offset aDefault_startd ; "default_startdate"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_FC], eax
		test	eax, eax
		jnz	loc_410086
		call	_ERR_clear_error
		mov	[esp+19Ch+var_FC], offset aToday ; "today"
		jmp	loc_4100A5
; ---------------------------------------------------------------------------

loc_411B75:				; CODE XREF: _ca_main+1D71j
		mov	eax, [esp+19Ch+var_104]
		test	eax, eax
		jz	loc_411C73

loc_411B84:				; CODE XREF: _ca_main+399Aj
		mov	[esp+19Ch+var_188], 1
		mov	[esp+19Ch+var_18C], 0
		mov	[esp+19Ch+var_190], 0
		mov	[esp+19Ch+var_194], 0
		mov	[esp+19Ch+var_198], 0
		lea	esi, [esp+19Ch+var_38]
		mov	[esp+19Ch+lpFileName], esi
		call	_X509V3_set_ctx
		mov	eax, ds:_conf
		mov	[esp+19Ch+var_198], eax
		mov	[esp+19Ch+lpFileName], esi
		call	_X509V3_set_nconf
		mov	[esp+19Ch+var_190], 0
		mov	eax, [esp+19Ch+var_104]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], esi
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_X509V3_EXT_add_nconf
		test	eax, eax
		jnz	loc_410077
		mov	eax, [esp+19Ch+var_104]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aErrorLoading_0 ; "Error Loading extension section %s\n"
		jmp	loc_40FB0B
; ---------------------------------------------------------------------------

loc_411C10:				; CODE XREF: _ca_main+1D64j
		mov	[esp+19Ch+var_190], offset aSerial ; "serial"

loc_411C18:				; CODE XREF: _ca_main+39DFj
					; _ca_main+3A86j
		mov	eax, ds:_section
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aVariableLookup ; "variable lookup failed for %s::%s\n"

loc_411C29:				; CODE XREF: _ca_main+3B2Aj
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_40FB18
; ---------------------------------------------------------------------------

loc_411C3B:				; CODE XREF: _ca_main+1E2Fj
		mov	[esp+19Ch+lpFileName], eax
		call	_BN_bn2hex
		mov	esi, eax
		test	eax, eax
		jz	loc_40FB18
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aNextSerialNu_0 ; "next serial number is %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+lpFileName], esi
		call	_CRYPTO_free
		jmp	loc_41014A
; ---------------------------------------------------------------------------

loc_411C73:				; CODE XREF: _ca_main+387Ej
		mov	[esp+19Ch+var_194], offset aX509_extensi_0 ; "x509_extensions"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_104], eax
		test	eax, eax
		jnz	loc_411B84
		call	_ERR_clear_error
		jmp	loc_410077
; ---------------------------------------------------------------------------

loc_411CAA:				; CODE XREF: _ca_main+1D0Fj
		mov	[esp+19Ch+var_194], offset aPolicy_0 ; "policy"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_E0], eax
		test	eax, eax
		jnz	loc_410015
		mov	[esp+19Ch+var_190], offset aPolicy_0 ; "policy"
		jmp	loc_411C18
; ---------------------------------------------------------------------------

loc_411CE4:				; CODE XREF: _ca_main+1CCEj
		mov	[esp+19Ch+var_194], offset aEmail_in_dn	; "email_in_dn"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_40FFD4
		mov	edi, offset aNo_0 ; "no"
		mov	ecx, 3
		mov	esi, eax
		repe cmpsb
		setnz	al
		and	eax, 0FFh
		mov	[esp+19Ch+var_EC], eax
		jmp	loc_40FFD4
; ---------------------------------------------------------------------------

loc_411D2C:				; CODE XREF: _ca_main+1CC0j
		mov	[esp+19Ch+var_13C], 0
		jmp	loc_41104B
; ---------------------------------------------------------------------------

loc_411D39:				; CODE XREF: _ca_main+1CB1j
		mov	eax, [esp+19Ch+var_E8]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aSIsAnUnsuppo_0 ; "%s is an unsupported message digest typ"...
		jmp	loc_40FB0B
; ---------------------------------------------------------------------------

loc_411D51:				; CODE XREF: _ca_main+1C49j
		mov	[esp+19Ch+var_194], offset aDefault_md_0 ; "default_md"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_E8], eax
		test	eax, eax
		jnz	loc_40FF4F
		mov	[esp+19Ch+var_190], offset aDefault_md_0 ; "default_md"
		jmp	loc_411C18
; ---------------------------------------------------------------------------

loc_411D8B:				; CODE XREF: _ca_main+1C7Dj
		mov	[esp+19Ch+var_198], offset aNoDefaultDiges ; "no default digest\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_puts
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_411DB6:				; CODE XREF: _ca_main+1C3Aj
		mov	eax, [esp+19Ch+var_B8]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_perror
		mov	[esp+19Ch+var_13C], 0
		xor	ebx, ebx
		xor	esi, esi
		mov	edi, 1
		jmp	loc_40E692
; ---------------------------------------------------------------------------

loc_411DDB:				; CODE XREF: _ca_main+1C12j
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+19Ch+var_190], eax
		mov	[esp+19Ch+var_194], 10h
		mov	[esp+19Ch+var_198], 6Ah
		mov	eax, [esp+19Ch+var_124]
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_ctrl
		jmp	loc_40FF40
; ---------------------------------------------------------------------------

loc_411E08:				; CODE XREF: _ca_main+1BB6j
		mov	eax, [esp+19Ch+var_58]
		test	eax, eax
		jle	short loc_411E6B
		mov	ebx, [esp+19Ch+var_D0]
		mov	[esp+19Ch+var_190], ebx
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aErrorOnLineL_3 ; "ERROR: on	line %ld of config file	'%s'\"...
		jmp	loc_411C29
; ---------------------------------------------------------------------------

loc_411E2F:				; CODE XREF: _ca_main+1BEDj
		mov	[esp+19Ch+var_194], offset aExtensions_0 ; "extensions"
		mov	[esp+19Ch+var_198], offset aDefault_0 ;	"default"
		mov	eax, ds:_extconf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_104], eax
		test	eax, eax
		jnz	loc_40FEF3
		mov	[esp+19Ch+var_104], offset aDefault_0 ;	"default"
		jmp	loc_40FEF3
; ---------------------------------------------------------------------------

loc_411E6B:				; CODE XREF: _ca_main+3B11j
		mov	eax, [esp+19Ch+var_D0]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aErrorLoading_1 ; "ERROR: loading the config	file '%s'\n"
		jmp	loc_40FB0B
; ---------------------------------------------------------------------------

loc_411E83:				; CODE XREF: _ca_main+1A84j
		mov	eax, [eax+4]
		mov	esi, eax
		mov	edi, offset a49	; "49"
		mov	ecx, 2
		repe cmpsb
		setnbe	dl
		setb	cl
		sub	edx, ecx
		test	dl, dl
		setle	dl
		and	edx, 0FFh
		cmp	edx, [esp+19Ch+var_88]
		jz	loc_411F4A
		jge	loc_40FD8A

loc_411EBA:				; CODE XREF: _ca_main+3C62j
		mov	byte ptr [ebp+0], 45h
		mov	eax, [ebx]
		mov	byte ptr [eax+1], 0
		inc	[esp+19Ch+var_A8]
		mov	eax, [ebx+0Ch]
		mov	[esp+19Ch+var_194], eax
		mov	[esp+19Ch+var_198], offset aSExpired ; "%s=Expired\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_40FD8A
; ---------------------------------------------------------------------------

loc_411EEC:				; CODE XREF: _ca_main+1A59j
		mov	ebx, [esp+19Ch+var_84]
		mov	ebp, [esp+19Ch+var_80]
		mov	eax, [esp+19Ch+lpExistingFileName]
		mov	[esp+19Ch+lpFileName], eax
		call	_ASN1_UTCTIME_free
		mov	eax, [esp+19Ch+var_13C]
		mov	[esp+19Ch+lpFileName], eax
		call	_CRYPTO_free
		mov	eax, [esp+19Ch+var_A8]
		test	eax, eax
		jnz	loc_40FE0B
		mov	eax, [esp+19Ch+var_140]
		test	eax, eax
		jz	loc_40FE81
		mov	[esp+19Ch+var_198], offset aNoEntriesFound ; "No entries found to mark expired\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_40FE81
; ---------------------------------------------------------------------------

loc_411F4A:				; CODE XREF: _ca_main+3BAEj
		mov	edx, [esp+19Ch+var_13C]
		mov	[esp+19Ch+var_198], edx	; char *
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_strcmp
		test	eax, eax
		jg	loc_40FD8A
		jmp	loc_411EBA
; ---------------------------------------------------------------------------

loc_411F67:				; CODE XREF: _ca_main+F29j
		call	_ERR_clear_error
		jmp	loc_40F255
; ---------------------------------------------------------------------------

loc_411F71:				; CODE XREF: _ca_main+EF6j
		mov	[esp+19Ch+var_194], esi
		mov	[esp+19Ch+var_198], offset aInvalidNameOpt ; "Invalid name options: \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_40F979
; ---------------------------------------------------------------------------

loc_411F8F:				; CODE XREF: _ca_main+EDBj
		call	_ERR_clear_error
		mov	[esp+19Ch+var_A4], 1
		jmp	loc_40F207
; ---------------------------------------------------------------------------

loc_411FA4:				; CODE XREF: _ca_main+EB3j
		mov	ds:_msie_hack, 1
		jmp	loc_40F1B9
; ---------------------------------------------------------------------------

loc_411FB3:				; CODE XREF: _ca_main+FA1j
		mov	edi, [esp+19Ch+var_F0]
		test	edi, edi
		jz	loc_40F2A7
		mov	[esp+19Ch+var_194], offset aNew_certs_dir ; "new_certs_dir"
		mov	eax, ds:_section
		mov	[esp+19Ch+var_198], eax
		mov	eax, ds:_conf
		mov	[esp+19Ch+lpFileName], eax
		call	_NCONF_get_string
		mov	[esp+19Ch+var_F8], eax
		test	eax, eax
		jz	loc_41207B
		mov	[esp+19Ch+var_198], 7 ;	int
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	ds:__imp___access
		test	eax, eax
		jz	short loc_41204F
		mov	ebx, [esp+19Ch+var_F8]
		mov	[esp+19Ch+var_194], ebx
		mov	[esp+19Ch+var_198], offset aIAmUnableToAcc ; "I	am unable to access the	%s directory\"...

loc_412017:				; CODE XREF: _ca_main+3D79j
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+19Ch+lpFileName], ebx ; char *
		call	_perror
		jmp	loc_40F979
; ---------------------------------------------------------------------------

loc_412031:				; CODE XREF: _ca_main+F92j
		mov	[esp+19Ch+var_194], esi
		mov	[esp+19Ch+var_198], offset aInvalidExtensi ; "Invalid extension	copy option: \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_40F979
; ---------------------------------------------------------------------------

loc_41204F:				; CODE XREF: _ca_main+3D02j
		mov	eax, [esp+19Ch+var_F8]
		mov	[esp+19Ch+lpFileName], eax ; lpFileName
		call	_app_isdir
		test	eax, eax
		jg	loc_40F2A7
		mov	ebx, [esp+19Ch+var_F8]
		mov	[esp+19Ch+var_194], ebx
		mov	[esp+19Ch+var_198], offset aSNeedToBeADire ; "%s need to be a directory\n"
		jmp	short loc_412017
; ---------------------------------------------------------------------------

loc_41207B:				; CODE XREF: _ca_main+3CE9j
		mov	[esp+19Ch+var_198], offset aThereNeedsToBe ; "there needs to be	defined	a directory f"...
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_40F979
; ---------------------------------------------------------------------------

loc_412095:				; CODE XREF: _ca_main+F77j
		call	_ERR_clear_error
		jmp	loc_40F298
; ---------------------------------------------------------------------------

loc_41209F:				; CODE XREF: _ca_main+F44j
		mov	[esp+19Ch+var_194], esi
		mov	[esp+19Ch+var_198], offset aInvalidCertifi ; "Invalid certificate options: \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+19Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_40F979
; ---------------------------------------------------------------------------

loc_4120BD:				; CODE XREF: _ca_main+EA6j
		call	_ERR_clear_error
		jmp	loc_40F1B9
; ---------------------------------------------------------------------------

loc_4120C7:				; CODE XREF: _ca_main+E81j
		mov	ds:_preserve, 1
		jmp	loc_40F187
; ---------------------------------------------------------------------------

loc_4120D6:				; CODE XREF: _ca_main+E74j
		call	_ERR_clear_error
		jmp	loc_40F187
; ---------------------------------------------------------------------------

loc_4120E0:				; CODE XREF: _ca_main+141Ej
		mov	edi, offset aKey_1 ; "-key"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_412109
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_64], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412109:				; CODE XREF: _ca_main+3DEEj
		mov	edi, offset aCert ; "-cert"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_412132
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_BC], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412132:				; CODE XREF: _ca_main+3E17j
		mov	edi, offset aSelfsign ;	"-selfsign"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	short loc_412176
		mov	edi, offset aIn_4 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_412186
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_D4], eax
		add	ebp, 4
		mov	[esp+19Ch+var_F0], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412176:				; CODE XREF: _ca_main+3E40j
		mov	[esp+19Ch+var_C4], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412186:				; CODE XREF: _ca_main+3E50j
		mov	edi, offset aOut_6 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4121AF
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_B8], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_4121AF:				; CODE XREF: _ca_main+3E94j
		mov	edi, offset aOutdir ; "-outdir"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_4121D8
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_F8], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_4121D8:				; CODE XREF: _ca_main+3EBDj
		mov	edi, offset aSigopt_1 ;	"-sigopt"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_412222
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [esp+19Ch+var_10C]
		test	eax, eax
		jz	loc_40E8AD

loc_4121FE:				; CODE XREF: _ca_main+5BBj
		lea	esi, [ebp+4]
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_198], eax
		mov	eax, [esp+19Ch+var_10C]
		mov	[esp+19Ch+lpFileName], eax
		call	_sk_push
		test	eax, eax
		jz	short loc_412265
		mov	ebp, esi
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412222:				; CODE XREF: _ca_main+3EE6j
		mov	edi, offset aNotext ; "-notext"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jz	loc_4122C0
		mov	edi, offset aBatch_0 ; "-batch"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	short loc_4122B0
		mov	edi, offset aPreservedn	; "-preserveDN"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_41226D
		mov	ds:_preserve, 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412265:				; CODE XREF: _ca_main+3F19j
		mov	eax, [ebp+4]
		jmp	loc_40E8C4
; ---------------------------------------------------------------------------

loc_41226D:				; CODE XREF: _ca_main+3F54j
		mov	edi, offset aNoemaildn ; "-noemailDN"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jz	loc_412313
		mov	edi, offset aGencrl ; "-gencrl"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jz	short loc_412303
		mov	edi, offset aMsie_hack_0 ; "-msie_hack"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4122D0
		mov	ds:_msie_hack, 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_4122B0:				; CODE XREF: _ca_main+3F44j
		mov	[esp+19Ch+var_D8], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_4122C0:				; CODE XREF: _ca_main+3F30j
		mov	[esp+19Ch+var_A0], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_4122D0:				; CODE XREF: _ca_main+3F9Fj
		mov	edi, offset aCrldays ; "-crldays"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_412323
		dec	ebx
		jz	loc_40E8C4
		lea	esi, [ebp+4]
		mov	eax, [ebp+4]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_atol
		mov	[esp+19Ch+var_60], eax
		mov	ebp, esi
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412303:				; CODE XREF: _ca_main+3F8Fj
		mov	[esp+19Ch+var_C0], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412313:				; CODE XREF: _ca_main+3F7Bj
		mov	[esp+19Ch+var_EC], 0
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412323:				; CODE XREF: _ca_main+3FDEj
		mov	edi, offset aCrlhours ;	"-crlhours"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_412356
		dec	ebx
		jz	loc_40E8C4
		lea	esi, [ebp+4]
		mov	eax, [ebp+4]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_atol
		mov	[esp+19Ch+var_5C], eax
		mov	ebp, esi
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412356:				; CODE XREF: _ca_main+4031j
		mov	edi, offset aCrlsec ; "-crlsec"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_412389
		dec	ebx
		jz	loc_40E8C4
		lea	esi, [ebp+4]
		mov	eax, [ebp+4]
		mov	[esp+19Ch+lpFileName], eax ; char *
		call	_atol
		mov	[esp+19Ch+var_B4], eax
		mov	ebp, esi
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412389:				; CODE XREF: _ca_main+4064j
		mov	edi, offset aInfiles ; "-infiles"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jz	short loc_4123CD
		mov	edi, offset aSs_cert ; "-ss_cert"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_4123E1
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_B0], eax
		add	ebp, 4
		mov	[esp+19Ch+var_F0], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_4123CD:				; CODE XREF: _ca_main+4097j
		dec	ebx
		add	ebp, 4
		mov	[esp+19Ch+var_F0], 1
		jmp	loc_40E5A0
; ---------------------------------------------------------------------------

loc_4123E1:				; CODE XREF: _ca_main+40A7j
		mov	edi, offset aSpkac_0 ; "-spkac"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_412415
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_DC], eax
		add	ebp, 4
		mov	[esp+19Ch+var_F0], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412415:				; CODE XREF: _ca_main+40EFj
		mov	edi, offset aRevoke ; "-revoke"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_412449
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_D4], eax
		add	ebp, 4
		mov	[esp+19Ch+var_AC], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412449:				; CODE XREF: _ca_main+4123j
		mov	edi, offset aExtensions_1 ; "-extensions"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_412472
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_104], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412472:				; CODE XREF: _ca_main+4157j
		mov	edi, offset aExtfile ; "-extfile"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_41249B
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_D0], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_41249B:				; CODE XREF: _ca_main+4180j
		mov	edi, offset aStatus ; "-status"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_4124C1
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_134], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_4124C1:				; CODE XREF: _ca_main+41A9j
		mov	edi, offset aUpdatedb ;	"-updatedb"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	short loc_4124FA
		mov	edi, offset aCrlexts ; "-crlexts"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_41250A
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_E4], eax
		add	ebp, 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_4124FA:				; CODE XREF: _ca_main+41CFj
		mov	[esp+19Ch+var_A8], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_41250A:				; CODE XREF: _ca_main+41DFj
		mov	edi, offset aCrl_reason	; "-crl_reason"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_41253E
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_C8], eax
		add	ebp, 4
		mov	[esp+19Ch+var_CC], 1
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_41253E:				; CODE XREF: _ca_main+4218j
		mov	edi, offset aCrl_hold ;	"-crl_hold"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_412572
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_C8], eax
		add	ebp, 4
		mov	[esp+19Ch+var_CC], 2
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_412572:				; CODE XREF: _ca_main+424Cj
		mov	edi, offset aCrl_compromise ; "-crl_compromise"
		mov	ecx, 10h
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4125A6
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_C8], eax
		add	ebp, 4
		mov	[esp+19Ch+var_CC], 3
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_4125A6:				; CODE XREF: _ca_main+4280j
		mov	edi, offset aCrl_ca_comprom ; "-crl_CA_compromise"
		mov	ecx, 13h
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4125DA
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_C8], eax
		add	ebp, 4
		mov	[esp+19Ch+var_CC], 4
		jmp	loc_40E575
; ---------------------------------------------------------------------------

loc_4125DA:				; CODE XREF: _ca_main+42B4j
		mov	edi, offset aEngine_6 ;	"-engine"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_40E8C4
		dec	ebx
		jz	loc_40E8C4
		mov	eax, [ebp+4]
		mov	[esp+19Ch+var_128], eax
		add	ebp, 4
		jmp	loc_40E575
_ca_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _pkcs7_main
_pkcs7_main	proc near		; DATA XREF: .data:0045516Co

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_412A14

loc_412625:				; CODE XREF: _pkcs7_main+418j
					; _pkcs7_main+449j
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_4129BA
		mov	eax, [esp+5Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+5Ch+var_30], eax
		mov	eax, [esp+5Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+5Ch+arg_4]
		add	eax, 4
		mov	[esp+5Ch+var_2C], 0
		mov	[esp+5Ch+var_24], 0
		mov	[esp+5Ch+var_34], 0
		mov	[esp+5Ch+var_28], 0
		mov	[esp+5Ch+var_20], 0
		mov	[esp+5Ch+var_38], 0
		mov	[esp+5Ch+var_3C], 0
		mov	[esp+5Ch+var_40], 3
		mov	[esp+5Ch+var_44], 3
		test	ebp, ebp
		jg	loc_4127B5
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4126B0:				; CODE XREF: _pkcs7_main+19Fj
		call	_ERR_load_crypto_strings
		mov	[esp+5Ch+var_54], 0
		mov	eax, [esp+5Ch+var_2C]
		mov	[esp+5Ch+var_58], eax
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_setup_engine
		call	_BIO_s_file
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new
		mov	ebp, eax
		call	_BIO_s_file
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new
		mov	ebx, eax
		test	ebp, ebp
		jz	loc_412A6D
		test	ebx, ebx
		jz	loc_412A6D
		mov	edx, [esp+5Ch+var_3C]
		test	edx, edx
		jz	loc_412C7C
		mov	eax, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+var_58], 6Ch
		mov	[esp+5Ch+var_5C], ebp
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_412B49

loc_412734:				; CODE XREF: _pkcs7_main+68Dj
		cmp	[esp+5Ch+var_44], 1
		jz	loc_412A90
		cmp	[esp+5Ch+var_44], 3
		jz	loc_412B70
		mov	[esp+5Ch+var_58], offset aBadInputForm_2 ; "bad	input format specified for pkcs7 ob"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf

loc_41275F:				; CODE XREF: _pkcs7_main+55Bj
		mov	esi, 1

loc_412764:				; CODE XREF: _pkcs7_main+471j
					; _pkcs7_main+534j
		mov	[esp+5Ch+var_5C], ebp
		call	_BIO_free

loc_41276C:				; CODE XREF: _pkcs7_main+477j
		test	ebx, ebx
		jz	loc_4129BF
		mov	[esp+5Ch+var_5C], ebx
		call	_BIO_free_all
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_412790:				; CODE XREF: _pkcs7_main+1B5j
		dec	ebp
		jz	loc_4128E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_5C], eax ;	char *
		call	_str2fmt
		mov	[esp+5Ch+var_44], eax

loc_4127A9:				; CODE XREF: _pkcs7_main+1E0j
					; _pkcs7_main+211j ...
		dec	ebp
		lea	eax, [ebx+4]
		test	ebp, ebp
		jle	loc_4126B0

loc_4127B5:				; CODE XREF: _pkcs7_main+8Fj
		mov	edx, [eax]
		mov	esi, edx
		mov	edi, offset aInform_3 ;	"-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_412790
		mov	edi, offset aOutform_2 ; "-outform"
		mov	esi, edx
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_412800
		dec	ebp
		jz	loc_4128E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_5C], eax ;	char *
		call	_str2fmt
		mov	[esp+5Ch+var_40], eax
		jmp	short loc_4127A9
; ---------------------------------------------------------------------------
		align 10h

loc_412800:				; CODE XREF: _pkcs7_main+1C5j
		mov	edi, offset aIn_5 ; "-in"
		mov	ecx, 4
		mov	esi, edx
		repe cmpsb
		jnz	short loc_412830
		dec	ebp
		jz	loc_4128E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_3C], eax
		jmp	short loc_4127A9
; ---------------------------------------------------------------------------
		align 10h

loc_412830:				; CODE XREF: _pkcs7_main+1FEj
		mov	edi, offset aOut_7 ; "-out"
		mov	ecx, 5
		mov	esi, edx
		repe cmpsb
		jnz	short loc_412860
		dec	ebp
		jz	loc_4128E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_38], eax
		jmp	loc_4127A9
; ---------------------------------------------------------------------------
		align 10h

loc_412860:				; CODE XREF: _pkcs7_main+22Ej
		mov	edi, offset aNoout_3 ; "-noout"
		mov	ecx, 7
		mov	esi, edx
		repe cmpsb
		jz	loc_4129D0
		mov	edi, offset aText_2 ; "-text"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jz	loc_4129E0
		mov	edi, offset aPrint ; "-print"
		mov	ecx, 7
		mov	esi, edx
		repe cmpsb
		jz	loc_412A05
		mov	edi, offset aPrint_certs ; "-print_certs"
		mov	ecx, 0Dh
		mov	esi, edx
		repe cmpsb
		jz	loc_412A5E
		mov	edi, offset aEngine_7 ;	"-engine"
		mov	esi, edx
		mov	ecx, 8
		repe cmpsb
		jz	loc_4129EF
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], offset aUnknownOptio_5 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		lea	esi, [esi+0]

loc_4128E0:				; CODE XREF: _pkcs7_main+181j
					; _pkcs7_main+1C8j ...
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aSOptionsInfi_2 ; "%s [options] <infile >outfile\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_58], offset aWhereOptions_4 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_58], offset aInformArgInp_3 ; " -inform arg   input format	- DER or PE"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_58], offset aOutformArgOu_2 ; " -outform arg  output format - DER or P"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_58], offset aInArgInputFi_3 ; " -in arg	   input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_58], offset aOutArgOutput_3 ; " -out arg	   output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_58], offset aPrint_certsPri ; " -print_certs  print any certs or crl i"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_58], offset aTextPrintFullD ; " -text	   print full details of ce"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_58], offset aNooutDonTOutpu ; " -noout	   don't output encoded dat"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_58], offset aEngineEUseEn_5 ; " -engine e	   use engine e, possibly a"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf

loc_4129BA:				; CODE XREF: _pkcs7_main+27j
		mov	esi, 1

loc_4129BF:				; CODE XREF: _pkcs7_main+15Ej
		mov	eax, esi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4129D0:				; CODE XREF: _pkcs7_main+25Ej
		mov	ebx, eax
		mov	[esp+5Ch+var_34], 1
		jmp	loc_4127A9
; ---------------------------------------------------------------------------
		align 10h

loc_4129E0:				; CODE XREF: _pkcs7_main+272j
		mov	ebx, eax
		mov	[esp+5Ch+var_28], 1
		jmp	loc_4127A9
; ---------------------------------------------------------------------------

loc_4129EF:				; CODE XREF: _pkcs7_main+2AEj
		dec	ebp
		jz	loc_4128E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_2C], eax
		jmp	loc_4127A9
; ---------------------------------------------------------------------------

loc_412A05:				; CODE XREF: _pkcs7_main+286j
		mov	ebx, eax
		mov	[esp+5Ch+var_24], 1
		jmp	loc_4127A9
; ---------------------------------------------------------------------------

loc_412A14:				; CODE XREF: _pkcs7_main+Fj
		call	_BIO_s_file
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_412625
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], 10h
		mov	[esp+5Ch+var_58], 6Ah
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_412625
; ---------------------------------------------------------------------------

loc_412A5E:				; CODE XREF: _pkcs7_main+29Aj
		mov	ebx, eax
		mov	[esp+5Ch+var_20], 1
		jmp	loc_4127A9
; ---------------------------------------------------------------------------

loc_412A6D:				; CODE XREF: _pkcs7_main+E2j
					; _pkcs7_main+EAj
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_ERR_print_errors
		mov	esi, 1
		test	ebp, ebp
		jnz	loc_412764
		jmp	loc_41276C
; ---------------------------------------------------------------------------
		align 10h

loc_412A90:				; CODE XREF: _pkcs7_main+129j
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebp
		call	_d2i_PKCS7_bio
		mov	[esp+5Ch+var_44], eax

loc_412AA4:				; CODE XREF: _pkcs7_main+584j
		mov	eax, [esp+5Ch+var_44]
		test	eax, eax
		jz	loc_412EE6
		mov	eax, [esp+5Ch+var_38]
		test	eax, eax
		jz	loc_412D70
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 5
		mov	[esp+5Ch+var_58], 6Ch
		mov	[esp+5Ch+var_5C], ebx
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_412D99

loc_412AE4:				; CODE XREF: _pkcs7_main+784j
		mov	eax, [esp+5Ch+var_24]
		test	eax, eax
		jnz	loc_412CE3

loc_412AF0:				; CODE XREF: _pkcs7_main+6F3j
		mov	eax, [esp+5Ch+var_20]
		test	eax, eax
		jnz	loc_412B99
		mov	eax, [esp+5Ch+var_34]
		test	eax, eax
		jnz	loc_412C75
		cmp	[esp+5Ch+var_40], 1
		jz	loc_412ED4
		cmp	[esp+5Ch+var_40], 3
		jz	loc_412E90
		mov	[esp+5Ch+var_58], offset aBadOutputFor_2 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	esi, 1

loc_412B38:				; CODE XREF: _pkcs7_main+667j
					; _pkcs7_main+75Bj ...
		mov	eax, [esp+5Ch+var_44]
		mov	[esp+5Ch+var_5C], eax
		call	_PKCS7_free
		jmp	loc_412764
; ---------------------------------------------------------------------------

loc_412B49:				; CODE XREF: _pkcs7_main+11Ej
		mov	[esp+5Ch+var_58], offset aUnableToLoadIn ; "unable to load input file\n"

loc_412B51:				; CODE XREF: _pkcs7_main+8DEj
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_ERR_print_errors
		jmp	loc_41275F
; ---------------------------------------------------------------------------

loc_412B70:				; CODE XREF: _pkcs7_main+134j
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebp
		call	_PEM_read_bio_PKCS7
		mov	[esp+5Ch+var_44], eax
		jmp	loc_412AA4
; ---------------------------------------------------------------------------

loc_412B99:				; CODE XREF: _pkcs7_main+4E6j
		mov	eax, [esp+5Ch+var_44]
		mov	eax, [eax+10h]
		mov	[esp+5Ch+var_5C], eax
		call	_OBJ_obj2nid
		cmp	eax, 16h
		jz	short loc_412BB6
		cmp	eax, 18h
		jnz	loc_412C75

loc_412BB6:				; CODE XREF: _pkcs7_main+59Bj
		mov	eax, [esp+5Ch+var_44]
		mov	eax, [eax+14h]
		mov	edi, [eax+8]
		mov	esi, [eax+0Ch]
		test	edi, edi
		jz	loc_412D08
		mov	eax, [esp+5Ch+var_34]
		test	eax, eax
		jz	loc_412DAF
		mov	ecx, [esp+5Ch+var_28]
		test	ecx, ecx
		mov	[esp+5Ch+var_40], 0
		jnz	loc_412CCE
		jmp	short loc_412C1C
; ---------------------------------------------------------------------------
		align 10h

loc_412BF0:				; CODE XREF: _pkcs7_main+61Aj
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], edi
		call	_sk_value
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_dump_cert_text
		mov	[esp+5Ch+var_58], offset asc_45E252 ; "\n"
		mov	[esp+5Ch+var_5C], ebx
		call	_BIO_puts
		inc	[esp+5Ch+var_40]

loc_412C1C:				; CODE XREF: _pkcs7_main+5DBj
		mov	[esp+5Ch+var_5C], edi
		call	_sk_num
		mov	edx, [esp+5Ch+var_40]
		cmp	eax, edx
		jg	short loc_412BF0

loc_412C2C:				; CODE XREF: _pkcs7_main+6CEj
		test	esi, esi
		jz	short loc_412C75

loc_412C30:				; CODE XREF: _pkcs7_main+706j
		xor	edi, edi
		jmp	short loc_412C69
; ---------------------------------------------------------------------------
		align 10h

loc_412C40:				; CODE XREF: _pkcs7_main+663j
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	_sk_value
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_X509_CRL_print
		mov	[esp+5Ch+var_58], offset asc_45E252 ; "\n"
		mov	[esp+5Ch+var_5C], ebx
		call	_BIO_puts
		inc	edi

loc_412C69:				; CODE XREF: _pkcs7_main+622j
		mov	[esp+5Ch+var_5C], esi
		call	_sk_num
		cmp	edi, eax
		jl	short loc_412C40

loc_412C75:				; CODE XREF: _pkcs7_main+4F2j
					; _pkcs7_main+5A0j ...
		xor	esi, esi
		jmp	loc_412B38
; ---------------------------------------------------------------------------

loc_412C7C:				; CODE XREF: _pkcs7_main+F6j
		mov	eax, ds:__imp___iob
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 6Ah
		mov	[esp+5Ch+var_5C], ebp
		call	_BIO_ctrl
		jmp	loc_412734
; ---------------------------------------------------------------------------

loc_412CA2:				; CODE XREF: _pkcs7_main+6CCj
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], edi
		call	_sk_value
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_X509_print
		mov	[esp+5Ch+var_58], offset asc_45E252 ; "\n"
		mov	[esp+5Ch+var_5C], ebx
		call	_BIO_puts
		inc	[esp+5Ch+var_40]

loc_412CCE:				; CODE XREF: _pkcs7_main+5D5j
		mov	[esp+5Ch+var_5C], edi
		call	_sk_num
		mov	edx, [esp+5Ch+var_40]
		cmp	edx, eax
		jl	short loc_412CA2
		jmp	loc_412C2C
; ---------------------------------------------------------------------------

loc_412CE3:				; CODE XREF: _pkcs7_main+4DAj
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	eax, [esp+5Ch+var_44]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_PKCS7_print_ctx
		jmp	loc_412AF0
; ---------------------------------------------------------------------------

loc_412D08:				; CODE XREF: _pkcs7_main+5B5j
		test	esi, esi
		jz	loc_412C75
		mov	edx, [esp+5Ch+var_34]
		test	edx, edx
		jnz	loc_412C30

loc_412D1C:				; CODE XREF: _pkcs7_main+806j
		xor	edi, edi
		jmp	short loc_412D5D
; ---------------------------------------------------------------------------

loc_412D20:				; CODE XREF: _pkcs7_main+757j
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	_sk_value
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_40], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_X509_CRL_print
		mov	edx, [esp+5Ch+var_40]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], ebx
		call	_PEM_write_bio_X509_CRL
		mov	[esp+5Ch+var_58], offset asc_45E252 ; "\n"
		mov	[esp+5Ch+var_5C], ebx
		call	_BIO_puts
		inc	edi

loc_412D5D:				; CODE XREF: _pkcs7_main+70Ej
		mov	[esp+5Ch+var_5C], esi
		call	_sk_num
		cmp	edi, eax
		jl	short loc_412D20
		xor	esi, esi
		jmp	loc_412B38
; ---------------------------------------------------------------------------

loc_412D70:				; CODE XREF: _pkcs7_main+4A6j
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 6Ah
		mov	[esp+5Ch+var_5C], ebx
		call	_BIO_ctrl
		jmp	loc_412AE4
; ---------------------------------------------------------------------------

loc_412D99:				; CODE XREF: _pkcs7_main+4CEj
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax ;	char *
		call	_perror
		mov	esi, 1
		jmp	loc_412B38
; ---------------------------------------------------------------------------

loc_412DAF:				; CODE XREF: _pkcs7_main+5C1j
		mov	eax, [esp+5Ch+var_28]
		test	eax, eax
		mov	[esp+5Ch+var_40], 0
		jz	short loc_412E04
		jmp	loc_412E74
; ---------------------------------------------------------------------------

loc_412DC4:				; CODE XREF: _pkcs7_main+802j
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], edi
		call	_sk_value
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_3C], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_dump_cert_text
		mov	edx, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], ebx
		call	_PEM_write_bio_X509
		mov	[esp+5Ch+var_58], offset asc_45E252 ; "\n"
		mov	[esp+5Ch+var_5C], ebx
		call	_BIO_puts
		inc	[esp+5Ch+var_40]

loc_412E04:				; CODE XREF: _pkcs7_main+7ADj
		mov	[esp+5Ch+var_5C], edi
		call	_sk_num
		mov	edx, [esp+5Ch+var_40]
		cmp	eax, edx
		jg	short loc_412DC4

loc_412E14:				; CODE XREF: _pkcs7_main+872j
		test	esi, esi
		jnz	loc_412D1C
		xor	esi, esi
		jmp	loc_412B38
; ---------------------------------------------------------------------------
		align 10h

loc_412E30:				; CODE XREF: _pkcs7_main+870j
		mov	eax, [esp+5Ch+var_40]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], edi
		call	_sk_value
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_3C], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_X509_print
		mov	edx, [esp+5Ch+var_3C]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], ebx
		call	_PEM_write_bio_X509
		mov	[esp+5Ch+var_58], offset asc_45E252 ; "\n"
		mov	[esp+5Ch+var_5C], ebx
		call	_BIO_puts
		inc	[esp+5Ch+var_40]

loc_412E74:				; CODE XREF: _pkcs7_main+7AFj
		mov	[esp+5Ch+var_5C], edi
		call	_sk_num
		cmp	[esp+5Ch+var_40], eax
		jl	short loc_412E30
		jmp	short loc_412E14
; ---------------------------------------------------------------------------
		align 10h

loc_412E90:				; CODE XREF: _pkcs7_main+508j
		mov	eax, [esp+5Ch+var_44]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_PEM_write_bio_PKCS7

loc_412EA0:				; CODE XREF: _pkcs7_main+8D4j
		test	eax, eax
		jnz	loc_412C75
		mov	[esp+5Ch+var_58], offset aUnableToWriteP ; "unable to write pkcs7 object\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_ERR_print_errors
		mov	esi, 1
		jmp	loc_412B38
; ---------------------------------------------------------------------------

loc_412ED4:				; CODE XREF: _pkcs7_main+4FDj
		mov	eax, [esp+5Ch+var_44]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_i2d_PKCS7_bio
		jmp	short loc_412EA0
; ---------------------------------------------------------------------------

loc_412EE6:				; CODE XREF: _pkcs7_main+49Aj
		mov	[esp+5Ch+var_58], offset aUnableToLoadPk ; "unable to load PKCS7 object\n"
		jmp	loc_412B51
_pkcs7_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _crl2pkcs7_main
_crl2pkcs7_main	proc near		; DATA XREF: .data:00455184o

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_4]
		mov	edi, ds:_bio_err
		test	edi, edi
		jz	loc_41328F

loc_412F19:				; CODE XREF: _crl2pkcs7_main+3A3j
					; _crl2pkcs7_main+3CEj
		mov	eax, [ebx]
		mov	[esp+4Ch+var_24], eax
		mov	eax, [esp+4Ch+arg_0]
		lea	ebp, [eax-1]
		add	ebx, 4
		mov	[esp+4Ch+var_2C], 0
		mov	[esp+4Ch+var_30], 0
		mov	[esp+4Ch+var_28], 0
		mov	[esp+4Ch+var_34], 0
		mov	[esp+4Ch+var_38], 3
		mov	[esp+4Ch+var_3C], 3
		test	ebp, ebp
		jg	short loc_412F81
		jmp	short loc_412FC8
; ---------------------------------------------------------------------------
		align 10h

loc_412F60:				; CODE XREF: _crl2pkcs7_main+91j
		dec	ebp
		jz	loc_413160
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	_str2fmt
		mov	[esp+4Ch+var_3C], eax

loc_412F79:				; CODE XREF: _crl2pkcs7_main+1E1j
					; _crl2pkcs7_main+221j	...
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jle	short loc_412FC8

loc_412F81:				; CODE XREF: _crl2pkcs7_main+5Bj
					; _crl2pkcs7_main+C6j
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aInform_4 ;	"-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_412F60
		mov	edi, offset aOutform_3 ; "-outform"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_4130C0
		dec	ebp
		jz	loc_413160
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	_str2fmt
		mov	[esp+4Ch+var_38], eax
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jg	short loc_412F81

loc_412FC8:				; CODE XREF: _crl2pkcs7_main+5Dj
					; _crl2pkcs7_main+7Fj
		call	_ERR_load_crypto_strings
		call	_BIO_s_file
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_new
		mov	edi, eax
		call	_BIO_s_file
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_new
		mov	ebp, eax
		test	edi, edi
		jz	loc_4132E5
		test	ebp, ebp
		jz	loc_4133A0
		mov	ebx, [esp+4Ch+var_2C]
		test	ebx, ebx
		jnz	loc_41339C
		mov	ecx, [esp+4Ch+var_34]
		test	ecx, ecx
		jz	loc_4133C1
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 3
		mov	[esp+4Ch+var_48], 6Ch
		mov	[esp+4Ch+var_4C], edi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_4133FE

loc_41303B:				; CODE XREF: _crl2pkcs7_main+4E2j
		cmp	[esp+4Ch+var_3C], 1
		jz	loc_4133E7
		cmp	[esp+4Ch+var_3C], 3
		jz	loc_413306
		mov	[esp+4Ch+var_48], offset aBadInputForm_3 ; "bad	input format specified for input cr"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	esi, 1
		xor	ebx, ebx
		mov	[esp+4Ch+var_3C], 0

loc_413075:				; CODE XREF: _crl2pkcs7_main+497j
					; _crl2pkcs7_main+4BCj	...
		mov	[esp+4Ch+var_4C], edi
		call	_BIO_free

loc_41307D:				; CODE XREF: _crl2pkcs7_main+401j
		test	ebp, ebp
		jz	short loc_413089
		mov	[esp+4Ch+var_4C], ebp
		call	_BIO_free_all

loc_413089:				; CODE XREF: _crl2pkcs7_main+17Fj
		mov	eax, [esp+4Ch+var_3C]
		test	eax, eax
		jz	short loc_413099
		mov	[esp+4Ch+var_4C], eax
		call	_PKCS7_free

loc_413099:				; CODE XREF: _crl2pkcs7_main+18Fj
		test	ebx, ebx
		jz	loc_41322A
		mov	[esp+4Ch+var_4C], ebx
		call	_X509_CRL_free
		mov	eax, esi
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4130C0:				; CODE XREF: _crl2pkcs7_main+A1j
		mov	edi, offset aIn_6 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4130F0
		dec	ebp
		jz	loc_413160
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+4Ch+var_34], eax
		jmp	loc_412F79
; ---------------------------------------------------------------------------
		align 10h

loc_4130F0:				; CODE XREF: _crl2pkcs7_main+1CEj
		mov	edi, offset aNocrl ; "-nocrl"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	short loc_413130
		mov	edi, offset aOut_8 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_413240
		dec	ebp
		jz	short loc_413160
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+4Ch+var_28], eax
		jmp	loc_412F79
; ---------------------------------------------------------------------------
		align 10h

loc_413130:				; CODE XREF: _crl2pkcs7_main+1FEj
		mov	esi, ebx
		mov	[esp+4Ch+var_2C], 1
		jmp	loc_412F79
; ---------------------------------------------------------------------------

loc_41313F:				; CODE XREF: _crl2pkcs7_main+34Ej
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aUnknownOptio_6 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		nop
		lea	esi, [esi+0]

loc_413160:				; CODE XREF: _crl2pkcs7_main+61j
					; _crl2pkcs7_main+A8j ...
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aSOptionsInfi_3 ; "%s [options] <infile >outfile\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aWhereOptions_5 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aInformArgInp_4 ; " -inform arg    input format - DER or P"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aOutformArgOu_3 ; " -outform arg   output format - DER	or "...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aInArgInputFi_4 ; " -in arg	    input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aOutArgOutput_4 ; " -out arg	    output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aCertfileArgCer ; " -certfile arg  certificates file of ch"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aCanBeUsedMoreT ; "		    (can be used more than "...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aNocrlNoCrlToLo ; " -nocrl	    no crl to load, just ce"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf

loc_413225:				; CODE XREF: _crl2pkcs7_main+38Dj
					; _crl2pkcs7_main+3E0j
		mov	esi, 1

loc_41322A:				; CODE XREF: _crl2pkcs7_main+19Bj
		mov	eax, esi
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_413240:				; CODE XREF: _crl2pkcs7_main+20Ej
		mov	edi, offset aCertfile ;	"-certfile"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	loc_41313F
		dec	ebp
		jz	loc_413160
		mov	esi, [esp+4Ch+var_30]
		test	esi, esi
		jz	short loc_4132D3

loc_413263:				; CODE XREF: _crl2pkcs7_main+3DEj
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+4Ch+var_48], eax
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], eax
		call	_sk_push
		test	eax, eax
		jnz	loc_412F79
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], eax
		call	_sk_free
		jmp	short loc_413225
; ---------------------------------------------------------------------------

loc_41328F:				; CODE XREF: _crl2pkcs7_main+13j
		call	_BIO_s_file
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_412F19
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], 10h
		mov	[esp+4Ch+var_48], 6Ah
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_ctrl
		jmp	loc_412F19
; ---------------------------------------------------------------------------

loc_4132D3:				; CODE XREF: _crl2pkcs7_main+361j
		call	_sk_new_null
		mov	[esp+4Ch+var_30], eax
		test	eax, eax
		jnz	short loc_413263
		jmp	loc_413225
; ---------------------------------------------------------------------------

loc_4132E5:				; CODE XREF: _crl2pkcs7_main+EDj
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_ERR_print_errors
		mov	esi, 1
		xor	ebx, ebx
		mov	[esp+4Ch+var_3C], 0
		jmp	loc_41307D
; ---------------------------------------------------------------------------

loc_413306:				; CODE XREF: _crl2pkcs7_main+14Bj
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], edi
		call	_PEM_read_bio_X509_CRL
		mov	ebx, eax

loc_413328:				; CODE XREF: _crl2pkcs7_main+4F9j
		test	ebx, ebx
		jz	loc_41364A

loc_413330:				; CODE XREF: _crl2pkcs7_main+49Ej
		call	_PKCS7_new
		mov	[esp+4Ch+var_3C], eax
		test	eax, eax
		jz	short loc_413392
		call	_PKCS7_SIGNED_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_413392
		mov	[esp+4Ch+var_4C], 16h
		call	_OBJ_nid2obj
		mov	edx, [esp+4Ch+var_3C]
		mov	[edx+10h], eax
		mov	[edx+14h], esi
		mov	edx, [esi+14h]
		mov	[esp+4Ch+var_34], edx
		mov	[esp+4Ch+var_4C], 15h
		call	_OBJ_nid2obj
		mov	edx, [esp+4Ch+var_34]
		mov	[edx+10h], eax
		mov	eax, [esi]
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+var_4C], eax
		call	_ASN1_INTEGER_set
		test	eax, eax
		jnz	loc_41341E

loc_413392:				; CODE XREF: _crl2pkcs7_main+43Bj
					; _crl2pkcs7_main+446j	...
		mov	esi, 1
		jmp	loc_413075
; ---------------------------------------------------------------------------

loc_41339C:				; CODE XREF: _crl2pkcs7_main+101j
		xor	ebx, ebx
		jmp	short loc_413330
; ---------------------------------------------------------------------------

loc_4133A0:				; CODE XREF: _crl2pkcs7_main+F5j
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_ERR_print_errors
		mov	esi, 1
		xor	ebx, ebx
		mov	[esp+4Ch+var_3C], 0
		jmp	loc_413075
; ---------------------------------------------------------------------------

loc_4133C1:				; CODE XREF: _crl2pkcs7_main+10Dj
		mov	eax, ds:__imp___iob
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 6Ah
		mov	[esp+4Ch+var_4C], edi
		call	_BIO_ctrl
		jmp	loc_41303B
; ---------------------------------------------------------------------------

loc_4133E7:				; CODE XREF: _crl2pkcs7_main+140j
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], edi
		call	_d2i_X509_CRL_bio
		mov	ebx, eax
		jmp	loc_413328
; ---------------------------------------------------------------------------

loc_4133FE:				; CODE XREF: _crl2pkcs7_main+135j
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	_perror
		mov	esi, 1
		xor	ebx, ebx
		mov	[esp+4Ch+var_3C], 0
		jmp	loc_413075
; ---------------------------------------------------------------------------

loc_41341E:				; CODE XREF: _crl2pkcs7_main+48Cj
		call	_sk_new_null
		test	eax, eax
		jz	loc_413392
		mov	[esi+0Ch], eax
		test	ebx, ebx
		jz	short loc_41343E
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], eax
		call	_sk_push

loc_41343E:				; CODE XREF: _crl2pkcs7_main+530j
		call	_sk_new_null
		test	eax, eax
		jz	loc_4135BF
		mov	[esi+8], eax
		mov	[esp+4Ch+var_34], 0
		mov	edx, [esp+4Ch+var_30]
		test	edx, edx
		jz	loc_4135D3
		mov	[esp+4Ch+var_24], edi
		mov	[esp+4Ch+var_20], ebp
		mov	edi, eax

loc_41346C:				; CODE XREF: _crl2pkcs7_main+66Bj
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], eax
		call	_sk_num
		cmp	[esp+4Ch+var_34], eax
		jge	loc_4135CB
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_48], eax
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], eax
		call	_sk_value
		mov	esi, eax
		call	_BIO_s_file
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_new
		mov	ebx, eax
		mov	[esp+4Ch+var_2C], eax
		test	eax, eax
		jz	loc_4136A1
		mov	[esp+4Ch+var_40], esi
		mov	[esp+4Ch+var_44], 3
		mov	[esp+4Ch+var_48], 6Ch
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_413570
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebx
		call	_PEM_X509_INFO_read_bio
		mov	ebx, eax
		test	eax, eax
		jz	loc_41367E
		xor	esi, esi
		jmp	short loc_41353C
; ---------------------------------------------------------------------------
		align 10h

loc_413510:				; CODE XREF: _crl2pkcs7_main+646j
		mov	[esp+4Ch+var_4C], ebx
		call	_sk_shift
		mov	ebp, eax
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_413534
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	_sk_push
		mov	dword ptr [ebp+0], 0
		inc	esi

loc_413534:				; CODE XREF: _crl2pkcs7_main+61Ej
		mov	[esp+4Ch+var_4C], ebp
		call	_X509_INFO_free

loc_41353C:				; CODE XREF: _crl2pkcs7_main+603j
		mov	[esp+4Ch+var_4C], ebx
		call	_sk_num
		test	eax, eax
		jnz	short loc_413510

loc_413548:				; CODE XREF: _crl2pkcs7_main+79Cj
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_free
		test	ebx, ebx
		jz	short loc_413560
		mov	[esp+4Ch+var_4C], ebx
		call	_sk_free

loc_413560:				; CODE XREF: _crl2pkcs7_main+656j
		inc	esi
		jz	loc_4136C7
		inc	[esp+4Ch+var_34]
		jmp	loc_41346C
; ---------------------------------------------------------------------------

loc_413570:				; CODE XREF: _crl2pkcs7_main+5D1j
		mov	edi, [esp+4Ch+var_24]
		mov	ebp, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], offset aErrorOpeningTh ; "error opening the file, %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_free

loc_41359D:				; CODE XREF: _crl2pkcs7_main+7C2j
					; _crl2pkcs7_main+7CFj
		mov	[esp+4Ch+var_48], offset aErrorLoadingCe ; "error loading certificates\n"

loc_4135A5:				; CODE XREF: _crl2pkcs7_main+80Bj
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_ERR_print_errors

loc_4135BF:				; CODE XREF: _crl2pkcs7_main+545j
		mov	esi, 1
		xor	ebx, ebx
		jmp	loc_413075
; ---------------------------------------------------------------------------

loc_4135CB:				; CODE XREF: _crl2pkcs7_main+57Cj
		mov	edi, [esp+4Ch+var_24]
		mov	ebp, [esp+4Ch+var_20]

loc_4135D3:				; CODE XREF: _crl2pkcs7_main+55Cj
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_4C], eax
		call	_sk_free
		mov	eax, [esp+4Ch+var_28]
		test	eax, eax
		jz	loc_413728
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 5
		mov	[esp+4Ch+var_48], 6Ch
		mov	[esp+4Ch+var_4C], ebp
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_413710

loc_413613:				; CODE XREF: _crl2pkcs7_main+84Cj
		cmp	[esp+4Ch+var_38], 1
		jz	loc_4136F1
		cmp	[esp+4Ch+var_38], 3
		jz	loc_4136D4
		mov	[esp+4Ch+var_48], offset aBadOutputFor_3 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	esi, 1
		xor	ebx, ebx
		jmp	loc_413075
; ---------------------------------------------------------------------------

loc_41364A:				; CODE XREF: _crl2pkcs7_main+42Aj
		mov	[esp+4Ch+var_48], offset aUnableToLoadCr ; "unable to load CRL\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_ERR_print_errors
		mov	esi, 1
		mov	[esp+4Ch+var_3C], 0
		jmp	loc_413075
; ---------------------------------------------------------------------------

loc_41367E:				; CODE XREF: _crl2pkcs7_main+5FBj
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], offset aErrorReadingTh ; "error reading the file, %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	esi, 0FFFFFFFFh
		jmp	loc_413548
; ---------------------------------------------------------------------------

loc_4136A1:				; CODE XREF: _crl2pkcs7_main+5ADj
		mov	edi, [esp+4Ch+var_24]
		mov	ebp, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], offset aErrorOpeningTh ; "error opening the file, %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		jmp	loc_41359D
; ---------------------------------------------------------------------------

loc_4136C7:				; CODE XREF: _crl2pkcs7_main+661j
		mov	edi, [esp+4Ch+var_24]
		mov	ebp, [esp+4Ch+var_20]
		jmp	loc_41359D
; ---------------------------------------------------------------------------

loc_4136D4:				; CODE XREF: _crl2pkcs7_main+723j
		mov	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebp
		call	_PEM_write_bio_PKCS7

loc_4136E4:				; CODE XREF: _crl2pkcs7_main+801j
		test	eax, eax
		jz	short loc_413703
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_413075
; ---------------------------------------------------------------------------

loc_4136F1:				; CODE XREF: _crl2pkcs7_main+718j
		mov	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], ebp
		call	_i2d_PKCS7_bio
		jmp	short loc_4136E4
; ---------------------------------------------------------------------------

loc_413703:				; CODE XREF: _crl2pkcs7_main+7E6j
		mov	[esp+4Ch+var_48], offset aUnableToWrit_2 ; "unable to write pkcs7 object\n"
		jmp	loc_4135A5
; ---------------------------------------------------------------------------

loc_413710:				; CODE XREF: _crl2pkcs7_main+70Dj
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	_perror
		mov	esi, 1
		xor	ebx, ebx
		jmp	loc_413075
; ---------------------------------------------------------------------------

loc_413728:				; CODE XREF: _crl2pkcs7_main+6E5j
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 6Ah
		mov	[esp+4Ch+var_4C], ebp
		call	_BIO_ctrl
		jmp	loc_413613
_crl2pkcs7_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _crl_main
_crl_main	proc near		; DATA XREF: .data:004550ACo

var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= byte ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= byte ptr -0E4h
var_A4		= byte ptr -0A4h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14Ch
		mov	[esp+15Ch+var_F4], 0
		call	_EVP_sha1
		mov	[esp+15Ch+var_11C], eax
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_413CE9

loc_413789:				; CODE XREF: _crl_main+59Dj
					; _crl_main+5CEj
		mov	[esp+15Ch+var_158], 0
		mov	[esp+15Ch+var_15C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_413B60
		mov	eax, ds:_bio_out
		test	eax, eax
		jz	loc_413D42

loc_4137AE:				; CODE XREF: _crl_main+5F6j
					; _crl_main+621j
		mov	eax, [esp+15Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+15Ch+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+15Ch+var_120], 0
		mov	[esp+15Ch+var_124], 0
		mov	[esp+15Ch+var_100], 0
		mov	[esp+15Ch+var_104], 0
		mov	[esp+15Ch+var_110], 0
		mov	[esp+15Ch+var_10C], 0
		mov	[esp+15Ch+var_108], 0
		mov	[esp+15Ch+var_128], 0
		mov	[esp+15Ch+var_12C], 0
		mov	[esp+15Ch+var_130], 0
		mov	[esp+15Ch+var_134], 0
		mov	[esp+15Ch+var_13C], 0
		mov	[esp+15Ch+var_140], 3
		mov	[esp+15Ch+var_144], 3
		mov	[esp+15Ch+var_138], 0
		mov	[esp+15Ch+var_118], 0
		mov	[esp+15Ch+var_114], 0
		test	ebp, ebp
		jg	loc_413A95
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_413860:				; CODE XREF: _crl_main+32Fj
		call	_ERR_load_crypto_strings
		call	_BIO_s_file
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_413F33
		mov	eax, [esp+15Ch+var_13C]
		test	eax, eax
		jz	loc_413EE1
		mov	eax, [esp+15Ch+var_13C]
		mov	[esp+15Ch+var_150], eax
		mov	[esp+15Ch+var_154], 3
		mov	[esp+15Ch+var_158], 6Ch
		mov	[esp+15Ch+var_15C], ebx
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_41412C

loc_4138B0:				; CODE XREF: _crl_main+7A2j
		cmp	[esp+15Ch+var_144], 1
		jz	loc_413F07
		cmp	[esp+15Ch+var_144], 3
		jnz	loc_413B3A
		mov	[esp+15Ch+var_150], 0
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], 0
		mov	[esp+15Ch+var_15C], ebx
		call	_PEM_read_bio_X509_CRL
		mov	ebp, eax

loc_4138E8:				; CODE XREF: _crl_main+7B9j
		test	ebp, ebp
		jz	loc_413F1E
		mov	[esp+15Ch+var_15C], ebx
		call	_BIO_free
		mov	eax, [esp+15Ch+var_120]
		test	eax, eax
		jnz	loc_413DA0
		xor	esi, esi

loc_413906:				; CODE XREF: _crl_main+8FFj
					; _crl_main+9FFj
		mov	eax, [esp+15Ch+var_138]
		test	eax, eax
		jz	short loc_41397F
		mov	ebx, 1
		mov	edi, [esp+15Ch+var_104]
		mov	[esp+15Ch+var_13C], esi
		mov	esi, [esp+15Ch+var_108]
		mov	[esp+15Ch+var_144], ebp
		mov	ebp, [esp+15Ch+var_100]
		mov	esi, esi
		lea	edi, [edi+0]

loc_413930:				; CODE XREF: _crl_main+215j
		cmp	[esp+15Ch+var_12C], ebx
		jz	loc_414384

loc_41393A:				; CODE XREF: _crl_main+C4Ej
		cmp	[esp+15Ch+var_124], ebx
		jz	loc_414304

loc_413944:				; CODE XREF: _crl_main+C1Fj
		cmp	[esp+15Ch+var_130], ebx
		jz	loc_4142D5

loc_41394E:				; CODE XREF: _crl_main+B9Fj
		cmp	edi, ebx
		jz	loc_4142A6

loc_413956:				; CODE XREF: _crl_main+B70j
		cmp	[esp+15Ch+var_128], ebx
		jz	loc_41425D

loc_413960:				; CODE XREF: _crl_main+B41j
		cmp	esi, ebx
		jz	loc_4143B3

loc_413968:				; CODE XREF: _crl_main+C9Bj
		cmp	ebp, ebx
		jz	loc_41418B

loc_413970:				; CODE XREF: _crl_main+A8Aj
					; _crl_main+AD6j
		inc	ebx
		cmp	ebx, [esp+15Ch+var_138]
		jle	short loc_413930
		mov	esi, [esp+15Ch+var_13C]
		mov	ebp, [esp+15Ch+var_144]

loc_41397F:				; CODE XREF: _crl_main+1ACj
		call	_BIO_s_file
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_414091
		mov	edi, [esp+15Ch+var_134]
		test	edi, edi
		jz	loc_413F45
		mov	eax, [esp+15Ch+var_134]
		mov	[esp+15Ch+var_150], eax
		mov	[esp+15Ch+var_154], 5
		mov	[esp+15Ch+var_158], 6Ch
		mov	[esp+15Ch+var_15C], ebx
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_413F95

loc_4139CA:				; CODE XREF: _crl_main+809j
		mov	ecx, [esp+15Ch+var_110]
		test	ecx, ecx
		jnz	loc_413ED0

loc_4139D6:				; CODE XREF: _crl_main+77Cj
		mov	edx, [esp+15Ch+var_10C]
		test	edx, edx
		jnz	loc_413D99
		cmp	[esp+15Ch+var_140], 1
		jz	loc_4140CB
		cmp	[esp+15Ch+var_140], 3
		jz	loc_413FAB
		mov	[esp+15Ch+var_158], offset aBadOutputFor_4 ; "bad output format	specified for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		mov	eax, 1

loc_413A12:				; CODE XREF: _crl_main+63Bj
					; _crl_main+725j ...
		mov	[esp+15Ch+var_144], eax
		mov	[esp+15Ch+var_15C], ebx
		call	_BIO_free_all
		mov	edx, ds:_bio_out
		mov	[esp+15Ch+var_15C], edx
		call	_BIO_free_all
		mov	ds:_bio_out, 0
		mov	[esp+15Ch+var_15C], ebp
		call	_X509_CRL_free
		test	esi, esi
		mov	eax, [esp+15Ch+var_144]
		jz	loc_413B94
		lea	edx, [esp+15Ch+var_A4]
		mov	[esp+15Ch+var_15C], edx
		call	_X509_STORE_CTX_cleanup
		mov	[esp+15Ch+var_15C], esi
		call	_X509_STORE_free
		mov	eax, [esp+15Ch+var_144]
		add	esp, 14Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_413A70:				; CODE XREF: _crl_main+345j
		dec	ebp
		jz	loc_413C70
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+15Ch+var_15C], eax	; char *
		call	_str2fmt
		mov	[esp+15Ch+var_144], eax

loc_413A89:				; CODE XREF: _crl_main+370j
					; _crl_main+3A1j ...
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jle	loc_413860

loc_413A95:				; CODE XREF: _crl_main+ECj
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aInform_5 ;	"-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_413A70
		mov	edi, offset aOutform_4 ; "-outform"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_413AE0
		dec	ebp
		jz	loc_413C70
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+15Ch+var_15C], eax	; char *
		call	_str2fmt
		mov	[esp+15Ch+var_140], eax
		jmp	short loc_413A89
; ---------------------------------------------------------------------------
		align 10h

loc_413AE0:				; CODE XREF: _crl_main+355j
		mov	edi, offset aIn_7 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_413B10
		dec	ebp
		jz	loc_413C70
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+15Ch+var_13C], eax
		jmp	short loc_413A89
; ---------------------------------------------------------------------------
		align 10h

loc_413B10:				; CODE XREF: _crl_main+38Ej
		mov	edi, offset aOut_9 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_413BA0
		dec	ebp
		jz	loc_413C70
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+15Ch+var_134], eax
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_413B3A:				; CODE XREF: _crl_main+160j
		mov	[esp+15Ch+var_158], offset aBadInputForm_4 ; "bad input	format specified for input cr"...
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf

loc_413B4F:				; CODE XREF: _crl_main+7E0j
					; _crl_main+9D8j
		mov	[esp+15Ch+var_15C], ebx
		call	_BIO_free
		mov	esi, esi
		lea	edi, [edi+0]

loc_413B60:				; CODE XREF: _crl_main+3Bj
					; _crl_main+51Cj ...
		mov	[esp+15Ch+var_15C], 0
		call	_BIO_free_all
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_free_all
		mov	ds:_bio_out, 0
		mov	[esp+15Ch+var_15C], 0
		call	_X509_CRL_free
		mov	eax, 1

loc_413B94:				; CODE XREF: _crl_main+2E4j
		add	esp, 14Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_413BA0:				; CODE XREF: _crl_main+3BEj
		mov	edi, offset aCapath_0 ;	"-CApath"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_413BD0
		dec	ebp
		jz	loc_413C70
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+15Ch+var_118], eax
		mov	[esp+15Ch+var_120], 1
		jmp	loc_413A89
; ---------------------------------------------------------------------------
		align 10h

loc_413BD0:				; CODE XREF: _crl_main+44Ej
		mov	edi, offset aCafile_0 ;	"-CAfile"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jz	loc_413CC0
		mov	edi, offset aVerify_1 ;	"-verify"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jz	loc_413CDA
		mov	edi, offset aText_3 ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_413D33
		mov	edi, offset aHash ; "-hash"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_413D86
		mov	edi, offset aHash_old ;	"-hash_old"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	loc_413E8A
		inc	[esp+15Ch+var_138]
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+var_104], eax
		mov	esi, ebx
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_413C47:				; CODE XREF: _crl_main+D41j
		mov	eax, [ebx]
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset aUnknownOptio_7 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_413C70:				; CODE XREF: _crl_main+311j
					; _crl_main+358j ...
		mov	eax, _crl_usage
		mov	ebx, offset _crl_usage
		test	eax, eax
		jz	loc_413B60
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_413C90:				; CODE XREF: _crl_main+550j
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset aS_18 ; "%s"
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		add	ebx, 4
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_413C90
		jmp	loc_413B60
; ---------------------------------------------------------------------------
		align 10h

loc_413CC0:				; CODE XREF: _crl_main+47Ej
		dec	ebp
		jz	short loc_413C70
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+15Ch+var_114], eax
		mov	[esp+15Ch+var_120], 1
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_413CDA:				; CODE XREF: _crl_main+492j
		mov	esi, ebx
		mov	[esp+15Ch+var_120], 1
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_413CE9:				; CODE XREF: _crl_main+23j
		call	_BIO_s_file
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_413789
		mov	edi, ds:__imp___iob
		lea	edx, [edi+40h]
		mov	[esp+15Ch+var_150], edx
		mov	[esp+15Ch+var_154], 10h
		mov	[esp+15Ch+var_158], 6Ah
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_413789
; ---------------------------------------------------------------------------

loc_413D33:				; CODE XREF: _crl_main+4A6j
		mov	esi, ebx
		mov	[esp+15Ch+var_110], 1
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_413D42:				; CODE XREF: _crl_main+48j
		call	_BIO_s_file
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_new
		mov	ds:_bio_out, eax
		test	eax, eax
		jz	loc_4137AE
		mov	edi, ds:__imp___iob
		lea	edx, [edi+20h]
		mov	[esp+15Ch+var_150], edx
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], 6Ah
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_ctrl
		jmp	loc_4137AE
; ---------------------------------------------------------------------------

loc_413D86:				; CODE XREF: _crl_main+4BAj
		inc	[esp+15Ch+var_138]
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+var_130], eax
		mov	esi, ebx
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_413D99:				; CODE XREF: _crl_main+27Cj
					; _crl_main+859j
		xor	eax, eax
		jmp	loc_413A12
; ---------------------------------------------------------------------------

loc_413DA0:				; CODE XREF: _crl_main+19Ej
		call	_X509_STORE_new
		mov	esi, eax
		call	_X509_LOOKUP_file
		mov	[esp+15Ch+var_158], eax
		mov	[esp+15Ch+var_15C], esi
		call	_X509_STORE_add_lookup
		mov	ebx, eax
		test	eax, eax
		jz	loc_413E7E
		mov	[esp+15Ch+var_14C], 0
		mov	[esp+15Ch+var_150], 1
		mov	eax, [esp+15Ch+var_114]
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 1
		mov	[esp+15Ch+var_15C], ebx
		call	_X509_LOOKUP_ctrl
		test	eax, eax
		jz	loc_414064

loc_413DF2:				; CODE XREF: _crl_main+92Cj
		call	_X509_LOOKUP_hash_dir
		mov	[esp+15Ch+var_158], eax
		mov	[esp+15Ch+var_15C], esi
		call	_X509_STORE_add_lookup
		mov	ebx, eax
		test	eax, eax
		jz	short loc_413E7E
		mov	[esp+15Ch+var_14C], 0
		mov	[esp+15Ch+var_150], 1
		mov	eax, [esp+15Ch+var_118]
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 2
		mov	[esp+15Ch+var_15C], ebx
		call	_X509_LOOKUP_ctrl
		test	eax, eax
		jz	loc_4140DC

loc_413E39:				; CODE XREF: _crl_main+9A4j
		call	_ERR_clear_error
		mov	[esp+15Ch+var_150], 0
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], esi
		lea	ebx, [esp+15Ch+var_A4]
		mov	[esp+15Ch+var_15C], ebx
		call	_X509_STORE_CTX_init
		test	eax, eax
		jnz	loc_413FDE
		mov	[esp+15Ch+var_158], offset aErrorInitialis ; "Error initialising X509 store\n"

loc_413E71:				; CODE XREF: _crl_main+9E5j
					; _crl_main+AF8j
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf

loc_413E7E:				; CODE XREF: _crl_main+65Cj
					; _crl_main+6A7j ...
		xor	ebx, ebx
		mov	eax, 1
		jmp	loc_413A12
; ---------------------------------------------------------------------------

loc_413E8A:				; CODE XREF: _crl_main+4CEj
		mov	edi, offset aNameopt_0 ; "-nameopt"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	loc_413F6E
		dec	ebp
		jz	loc_413C70
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+15Ch+var_158], eax
		lea	eax, [esp+15Ch+var_F4]
		mov	[esp+15Ch+var_15C], eax
		call	_set_name_ex
		test	eax, eax
		jnz	loc_413A89
		jmp	loc_413C70
; ---------------------------------------------------------------------------
		align 10h

loc_413ED0:				; CODE XREF: _crl_main+270j
		mov	[esp+15Ch+var_158], ebp
		mov	[esp+15Ch+var_15C], ebx
		call	_X509_CRL_print
		jmp	loc_4139D6
; ---------------------------------------------------------------------------

loc_413EE1:				; CODE XREF: _crl_main+122j
		mov	eax, ds:__imp___iob
		mov	[esp+15Ch+var_150], eax
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], 6Ah
		mov	[esp+15Ch+var_15C], ebx
		call	_BIO_ctrl
		jmp	loc_4138B0
; ---------------------------------------------------------------------------

loc_413F07:				; CODE XREF: _crl_main+155j
		mov	[esp+15Ch+var_158], 0
		mov	[esp+15Ch+var_15C], ebx
		call	_d2i_X509_CRL_bio
		mov	ebp, eax
		jmp	loc_4138E8
; ---------------------------------------------------------------------------

loc_413F1E:				; CODE XREF: _crl_main+18Aj
		mov	[esp+15Ch+var_158], offset aUnableToLoad_1 ; "unable to	load CRL\n"
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf

loc_413F33:				; CODE XREF: _crl_main+116j
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_ERR_print_errors
		jmp	loc_413B4F
; ---------------------------------------------------------------------------

loc_413F45:				; CODE XREF: _crl_main+23Cj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+15Ch+var_150], eax
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], 6Ah
		mov	[esp+15Ch+var_15C], ebx
		call	_BIO_ctrl
		jmp	loc_4139CA
; ---------------------------------------------------------------------------

loc_413F6E:				; CODE XREF: _crl_main+738j
		mov	edi, offset aIssuer ; "-issuer"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_4140A8
		inc	[esp+15Ch+var_138]
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+var_12C], eax
		mov	esi, ebx
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_413F95:				; CODE XREF: _crl_main+264j
		mov	eax, [esp+15Ch+var_134]
		mov	[esp+15Ch+var_15C], eax	; char *
		call	_perror
		mov	eax, 1
		jmp	loc_413A12
; ---------------------------------------------------------------------------

loc_413FAB:				; CODE XREF: _crl_main+292j
		mov	[esp+15Ch+var_158], ebp
		mov	[esp+15Ch+var_15C], ebx
		call	_PEM_write_bio_X509_CRL

loc_413FB7:				; CODE XREF: _crl_main+977j
		test	eax, eax
		jnz	loc_413D99
		mov	[esp+15Ch+var_158], offset aUnableToWriteC ; "unable to	write CRL\n"
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		mov	eax, 1
		jmp	loc_413A12
; ---------------------------------------------------------------------------

loc_413FDE:				; CODE XREF: _crl_main+703j
		mov	eax, [ebp+0]
		mov	eax, [eax+8]
		lea	edi, [esp+15Ch+var_EC]
		mov	[esp+15Ch+var_150], edi
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], 1
		mov	[esp+15Ch+var_15C], ebx
		call	_X509_STORE_get_by_subject
		test	eax, eax
		jle	loc_41413D
		mov	eax, [esp+15Ch+var_E8]
		mov	[esp+15Ch+var_15C], eax
		call	_X509_get_pubkey
		mov	ebx, eax
		mov	[esp+15Ch+var_15C], edi
		call	_X509_OBJECT_free_contents
		test	ebx, ebx
		jz	loc_41445D
		mov	[esp+15Ch+var_158], ebx
		mov	[esp+15Ch+var_15C], ebp
		call	_X509_CRL_verify
		mov	edi, eax
		mov	[esp+15Ch+var_15C], ebx
		call	_EVP_PKEY_free
		test	edi, edi
		js	loc_413E7E
		jnz	loc_41414A
		mov	[esp+15Ch+var_158], offset aVerifyFailur_0 ; "verify failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		jmp	loc_413906
; ---------------------------------------------------------------------------

loc_414064:				; CODE XREF: _crl_main+68Cj
		mov	[esp+15Ch+var_14C], 0
		mov	[esp+15Ch+var_150], 3
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], 1
		mov	[esp+15Ch+var_15C], ebx
		call	_X509_LOOKUP_ctrl
		jmp	loc_413DF2
; ---------------------------------------------------------------------------

loc_414091:				; CODE XREF: _crl_main+230j
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_ERR_print_errors
		mov	eax, 1
		jmp	loc_413A12
; ---------------------------------------------------------------------------

loc_4140A8:				; CODE XREF: _crl_main+81Cj
		mov	edi, offset aLastupdate	; "-lastupdate"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_414109
		inc	[esp+15Ch+var_138]
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+var_128], eax
		mov	esi, ebx
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_4140CB:				; CODE XREF: _crl_main+287j
		mov	[esp+15Ch+var_158], ebp
		mov	[esp+15Ch+var_15C], ebx
		call	_i2d_X509_CRL_bio
		jmp	loc_413FB7
; ---------------------------------------------------------------------------

loc_4140DC:				; CODE XREF: _crl_main+6D3j
		mov	[esp+15Ch+var_14C], 0
		mov	[esp+15Ch+var_150], 3
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], 2
		mov	[esp+15Ch+var_15C], ebx
		call	_X509_LOOKUP_ctrl
		jmp	loc_413E39
; ---------------------------------------------------------------------------

loc_414109:				; CODE XREF: _crl_main+956j
		mov	edi, offset aNextupdate	; "-nextupdate"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_414164
		inc	[esp+15Ch+var_138]
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+var_108], eax
		mov	esi, ebx
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_41412C:				; CODE XREF: _crl_main+14Aj
		mov	eax, [esp+15Ch+var_13C]
		mov	[esp+15Ch+var_15C], eax	; char *
		call	_perror
		jmp	loc_413B4F
; ---------------------------------------------------------------------------

loc_41413D:				; CODE XREF: _crl_main+8A2j
		mov	[esp+15Ch+var_158], offset aErrorGettingCr ; "Error getting CRL	issuer certificate\n"
		jmp	loc_413E71
; ---------------------------------------------------------------------------

loc_41414A:				; CODE XREF: _crl_main+8E4j
		mov	[esp+15Ch+var_158], offset aVerifyOk_0 ; "verify OK\n"
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		jmp	loc_413906
; ---------------------------------------------------------------------------

loc_414164:				; CODE XREF: _crl_main+9B7j
		mov	edi, offset aNoout_4 ; "-noout"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	loc_414400
		inc	[esp+15Ch+var_138]
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+var_10C], eax
		mov	esi, ebx
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_41418B:				; CODE XREF: _crl_main+20Aj
		lea	eax, [esp+15Ch+var_F0]
		mov	[esp+15Ch+var_150], eax
		lea	eax, [esp+15Ch+var_E4]
		mov	[esp+15Ch+var_154], eax
		mov	eax, [esp+15Ch+var_11C]
		mov	[esp+15Ch+var_158], eax
		mov	eax, [esp+15Ch+var_144]
		mov	[esp+15Ch+var_15C], eax
		call	_X509_CRL_digest
		test	eax, eax
		jz	loc_414248
		mov	eax, [esp+15Ch+var_11C]
		mov	[esp+15Ch+var_15C], eax
		call	_EVP_MD_type
		mov	[esp+15Ch+var_15C], eax
		call	_OBJ_nid2sn
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset aSFingerprint ; "%s Fingerprint="
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		mov	eax, [esp+15Ch+var_F0]
		test	eax, eax
		jle	loc_413970
		xor	ecx, ecx
		jmp	short loc_41423C
; ---------------------------------------------------------------------------
		align 10h

loc_414200:				; CODE XREF: _crl_main+ADFj
		mov	eax, 3Ah

loc_414205:				; CODE XREF: _crl_main+AE6j
		mov	[esp+15Ch+var_150], eax
		xor	eax, eax
		mov	al, byte ptr [esp+ecx+15Ch+var_E8+3]
		mov	[esp+15Ch+var_120], ecx
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset a02xC ; "%02X%c"
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		mov	eax, [esp+15Ch+var_F0]
		mov	ecx, [esp+15Ch+var_120]
		cmp	eax, ecx
		jle	loc_413970

loc_41423C:				; CODE XREF: _crl_main+A92j
		inc	ecx
		cmp	eax, ecx
		jnz	short loc_414200
		mov	eax, 0Ah
		jmp	short loc_414205
; ---------------------------------------------------------------------------

loc_414248:				; CODE XREF: _crl_main+A51j
		mov	esi, [esp+15Ch+var_13C]
		mov	ebp, [esp+15Ch+var_144]
		mov	[esp+15Ch+var_158], offset aOutOfMemory_2 ; "out of memory\n"
		jmp	loc_413E71
; ---------------------------------------------------------------------------

loc_41425D:				; CODE XREF: _crl_main+1FAj
		mov	[esp+15Ch+var_158], offset aLastupdate_0 ; "lastUpdate="
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		mov	eax, [esp+15Ch+var_144]
		mov	eax, [eax]
		mov	eax, [eax+0Ch]
		mov	[esp+15Ch+var_158], eax
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_ASN1_TIME_print
		mov	[esp+15Ch+var_158], offset asc_45E6B6 ;	"\n"
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		jmp	loc_413960
; ---------------------------------------------------------------------------

loc_4142A6:				; CODE XREF: _crl_main+1F0j
		mov	eax, [esp+15Ch+var_144]
		mov	eax, [eax]
		mov	eax, [eax+8]
		mov	[esp+15Ch+var_15C], eax
		call	_X509_NAME_hash_old
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset a08lx ; "%08lx\n"
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		jmp	loc_413956
; ---------------------------------------------------------------------------

loc_4142D5:				; CODE XREF: _crl_main+1E8j
		mov	eax, [esp+15Ch+var_144]
		mov	eax, [eax]
		mov	eax, [eax+8]
		mov	[esp+15Ch+var_15C], eax
		call	_X509_NAME_hash
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset a08lx ; "%08lx\n"
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		jmp	loc_41394E
; ---------------------------------------------------------------------------

loc_414304:				; CODE XREF: _crl_main+1DEj
		mov	[esp+15Ch+var_150], 0
		mov	[esp+15Ch+var_154], 0
		mov	[esp+15Ch+var_158], 58h
		mov	eax, [esp+15Ch+var_144]
		mov	[esp+15Ch+var_15C], eax
		call	_X509_CRL_get_ext_d2i
		mov	[esp+15Ch+var_120], eax
		mov	[esp+15Ch+var_158], offset aCrlnumber_0	; "crlNumber="
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		mov	ecx, [esp+15Ch+var_120]
		test	ecx, ecx
		jz	loc_41447C
		mov	[esp+15Ch+var_158], ecx
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_i2a_ASN1_INTEGER
		mov	ecx, [esp+15Ch+var_120]
		mov	[esp+15Ch+var_15C], ecx
		call	_ASN1_INTEGER_free

loc_41436A:				; CODE XREF: _crl_main+D31j
		mov	[esp+15Ch+var_158], offset asc_45E6B6 ;	"\n"
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		jmp	loc_413944
; ---------------------------------------------------------------------------

loc_414384:				; CODE XREF: _crl_main+1D4j
		mov	eax, [esp+15Ch+var_144]
		mov	eax, [eax]
		mov	eax, [eax+8]
		mov	ecx, [esp+15Ch+var_F4]
		mov	[esp+15Ch+var_150], ecx
		mov	[esp+15Ch+var_154], eax
		mov	[esp+15Ch+var_158], offset aIssuer_0 ; "issuer="
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_print_name
		jmp	loc_41393A
; ---------------------------------------------------------------------------

loc_4143B3:				; CODE XREF: _crl_main+202j
		mov	[esp+15Ch+var_158], offset aNextupdate_0 ; "nextUpdate="
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		mov	eax, [esp+15Ch+var_144]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_414423
		mov	[esp+15Ch+var_158], eax
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_ASN1_TIME_print

loc_4143E6:				; CODE XREF: _crl_main+CD8j
		mov	[esp+15Ch+var_158], offset asc_45E6B6 ;	"\n"
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		jmp	loc_413968
; ---------------------------------------------------------------------------

loc_414400:				; CODE XREF: _crl_main+A12j
		mov	edi, offset aFingerprint ; "-fingerprint"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_41443A
		inc	[esp+15Ch+var_138]
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+var_100], eax
		mov	esi, ebx
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_414423:				; CODE XREF: _crl_main+C73j
		mov	[esp+15Ch+var_158], offset aNone_2 ; "NONE"
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		jmp	short loc_4143E6
; ---------------------------------------------------------------------------

loc_41443A:				; CODE XREF: _crl_main+CAEj
		mov	edi, offset aCrlnumber_1 ; "-crlnumber"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_414496
		inc	[esp+15Ch+var_138]
		mov	eax, [esp+15Ch+var_138]
		mov	[esp+15Ch+var_124], eax
		mov	esi, ebx
		jmp	loc_413A89
; ---------------------------------------------------------------------------

loc_41445D:				; CODE XREF: _crl_main+8C0j
		mov	[esp+15Ch+var_158], offset aErrorGetting_3 ; "Error getting CRL	issuer public key\n"
		mov	eax, ds:_bio_err
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_printf
		mov	eax, 1
		jmp	loc_413A12
; ---------------------------------------------------------------------------

loc_41447C:				; CODE XREF: _crl_main+BE7j
		mov	[esp+15Ch+var_158], offset aNone_3 ; "<NONE>"
		mov	eax, ds:_bio_out
		mov	[esp+15Ch+var_15C], eax
		call	_BIO_puts
		jmp	loc_41436A
; ---------------------------------------------------------------------------

loc_414496:				; CODE XREF: _crl_main+CE8j
		inc	eax
		mov	[esp+15Ch+var_15C], eax
		call	_EVP_get_digestbyname
		test	eax, eax
		jz	loc_413C47
		mov	[esp+15Ch+var_11C], eax
		mov	esi, ebx
		jmp	loc_413A89
_crl_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _rsa_main
_rsa_main	proc near		; DATA XREF: .data:004550B8o

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	[esp+8Ch+var_28], 0
		mov	[esp+8Ch+var_24], 0
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_414BF0

loc_4144E5:				; CODE XREF: _rsa_main+744j
					; _rsa_main+775j
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_4147A0
		mov	eax, [esp+8Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+8Ch+var_5C], eax
		mov	eax, [esp+8Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+8Ch+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+8Ch+var_40], 2
		mov	[esp+8Ch+var_34], 0
		mov	[esp+8Ch+var_54], 0
		mov	[esp+8Ch+var_58], 0
		mov	[esp+8Ch+var_60], 0
		mov	[esp+8Ch+var_64], 0
		mov	[esp+8Ch+var_68], 0
		mov	[esp+8Ch+var_44], 0
		mov	[esp+8Ch+var_50], 0
		mov	[esp+8Ch+var_38], 0
		mov	[esp+8Ch+var_48], 0
		mov	[esp+8Ch+var_3C], 0
		mov	[esp+8Ch+var_6C], 3
		mov	[esp+8Ch+var_70], 3
		test	ebp, ebp
		jle	loc_414CC7
		mov	[esp+8Ch+var_30], 0
		mov	[esp+8Ch+var_4C], 0
		jmp	short loc_4145D1
; ---------------------------------------------------------------------------
		align 10h

loc_4145B0:				; CODE XREF: _rsa_main+121j
		dec	ebp
		jz	loc_414880
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_str2fmt
		mov	[esp+8Ch+var_70], eax

loc_4145C9:				; CODE XREF: _rsa_main+331j
					; _rsa_main+35Dj ...
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jle	short loc_414618

loc_4145D1:				; CODE XREF: _rsa_main+E6j
					; _rsa_main+156j
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aInform_6 ;	"-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_4145B0
		mov	edi, offset aOutform_5 ; "-outform"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_4147D0
		dec	ebp
		jz	loc_414880
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_str2fmt
		mov	[esp+8Ch+var_6C], eax
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jg	short loc_4145D1

loc_414618:				; CODE XREF: _rsa_main+10Fj
					; _rsa_main+817j
		call	_ERR_load_crypto_strings
		mov	[esp+8Ch+var_84], 0
		mov	eax, [esp+8Ch+var_54]
		mov	[esp+8Ch+var_88], eax
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_setup_engine
		mov	esi, eax
		lea	eax, [esp+8Ch+var_24]
		mov	[esp+8Ch+var_7C], eax ;	int
		lea	eax, [esp+8Ch+var_28]
		mov	[esp+8Ch+var_80], eax ;	int
		mov	eax, [esp+8Ch+var_58]
		mov	[esp+8Ch+var_84], eax ;	char *
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_88], eax ;	char *
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax ;	int
		call	_app_passwd
		test	eax, eax
		jz	loc_414780
		mov	ebx, [esp+8Ch+var_48]
		test	ebx, ebx
		jz	loc_414C58
		mov	ecx, [esp+8Ch+var_50]
		test	ecx, ecx
		jnz	loc_414D75
		call	_BIO_s_file
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_new
		mov	ebx, eax

loc_414698:				; CODE XREF: _rsa_main+7ADj
		mov	edx, [esp+8Ch+var_28]
		cmp	[esp+8Ch+var_70], 4
		jz	loc_414EB9
		mov	eax, [esp+8Ch+var_70]

loc_4146AB:				; CODE XREF: _rsa_main+A06j
		mov	[esp+8Ch+var_74], offset aPrivateKey_0 ; "Private Key"
		mov	[esp+8Ch+var_78], esi
		mov	[esp+8Ch+var_7C], edx
		mov	[esp+8Ch+var_80], 1
		mov	[esp+8Ch+var_84], eax
		mov	eax, [esp+8Ch+var_68]
		mov	[esp+8Ch+var_88], eax
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_load_key
		mov	edi, eax

loc_4146DE:				; CODE XREF: _rsa_main+802j
		test	edi, edi
		jz	loc_414D50
		mov	[esp+8Ch+var_8C], edi
		call	_EVP_PKEY_get1_RSA
		mov	esi, eax
		mov	[esp+8Ch+var_8C], edi
		call	_EVP_PKEY_free
		test	esi, esi
		jz	loc_414D5C
		mov	eax, [esp+8Ch+var_64]
		test	eax, eax
		jz	loc_414E90
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 5
		mov	[esp+8Ch+var_88], 6Ch
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_414F14

loc_414734:				; CODE XREF: _rsa_main+9F4j
		mov	eax, [esp+8Ch+var_3C]
		test	eax, eax
		jnz	loc_414D8F

loc_414740:				; CODE XREF: _rsa_main+8E5j
		mov	eax, [esp+8Ch+var_34]
		test	eax, eax
		jnz	loc_414DCE

loc_41474C:				; CODE XREF: _rsa_main+93Dj
		mov	eax, [esp+8Ch+var_48]
		test	eax, eax
		jnz	loc_414E02

loc_414758:				; CODE XREF: _rsa_main+9CBj
		mov	eax, [esp+8Ch+var_38]
		test	eax, eax
		jz	loc_414CDC

loc_414764:				; CODE XREF: _rsa_main+A9Ej
		xor	edi, edi

loc_414766:				; CODE XREF: _rsa_main+87Cj
					; _rsa_main+8B0j ...
		test	ebx, ebx
		jz	short loc_414772
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_free_all

loc_414772:				; CODE XREF: _rsa_main+2A8j
		test	esi, esi
		jz	short loc_4147A5
		mov	[esp+8Ch+var_8C], esi
		call	_RSA_free
		jmp	short loc_4147A5
; ---------------------------------------------------------------------------

loc_414780:				; CODE XREF: _rsa_main+1ABj
		mov	[esp+8Ch+var_88], offset aErrorGetting_4 ; "Error getting passwords\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4147A0:				; CODE XREF: _rsa_main+37j
					; _rsa_main+5C0j ...
		mov	edi, 1

loc_4147A5:				; CODE XREF: _rsa_main+2B4j
					; _rsa_main+2BEj
		mov	eax, [esp+8Ch+var_28]
		test	eax, eax
		jz	short loc_4147B5
		mov	[esp+8Ch+var_8C], eax
		call	_CRYPTO_free

loc_4147B5:				; CODE XREF: _rsa_main+2EBj
		mov	eax, [esp+8Ch+var_24]
		test	eax, eax
		jz	short loc_4147C5
		mov	[esp+8Ch+var_8C], eax
		call	_CRYPTO_free

loc_4147C5:				; CODE XREF: _rsa_main+2FBj
		mov	eax, edi
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4147D0:				; CODE XREF: _rsa_main+131j
		mov	edi, offset aIn_8 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_414800
		dec	ebp
		jz	loc_414880
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_68], eax
		jmp	loc_4145C9
; ---------------------------------------------------------------------------
		align 10h

loc_414800:				; CODE XREF: _rsa_main+31Ej
		mov	edi, offset aOut_10 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_414830
		dec	ebp
		jz	short loc_414880
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_64], eax
		jmp	loc_4145C9
; ---------------------------------------------------------------------------
		align 10h

loc_414830:				; CODE XREF: _rsa_main+34Ej
		mov	edi, offset aPassin_2 ;	"-passin"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_414A90
		dec	ebp
		jz	short loc_414880
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_60], eax
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_414856:				; CODE XREF: _rsa_main+CD8j
		mov	eax, [ebx]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aUnknownOptio_8 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		jmp	short loc_414880
; ---------------------------------------------------------------------------
		align 10h

loc_414880:				; CODE XREF: _rsa_main+F1j
					; _rsa_main+138j ...
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aSOptionsInfi_4 ; "%s [options] <infile >outfile\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aWhereOptions_6 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aInformArgInp_5 ; " -inform arg     input format - one	of "...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aOutformArgOu_4 ; " -outform arg    output format - one of"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aInArgInputFi_5 ; " -in arg	     input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aSgckeyUseIisSg ; " -sgckey	     Use IIS SGC key format"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aPassinArgInput ; " -passin arg     input file	pass phrase"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aOutArgOutput_5 ; " -out arg	     output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aPassoutArgOutp ; " -passout arg    output file pass phras"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aDesEncryptPemO ; " -des	     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aDes3EncryptPem ; " -des3	     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIdeaEncryptPem ; " -idea	     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aSeedEncryptPem ; " -seed	     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aAes128Aes192Ae ; " -aes128, -aes192, -aes256\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aEncryptPemOutp ; "		     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aCamellia128Cam ; " -camellia128, -camellia192, -camellia2"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aEncryptPemOu_0 ; "		     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aTextPrintTheKe ; " -text	     print the key in text\"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aNooutDonTPrint ; " -noout	     don't print key out\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aModulusPrintTh ; " -modulus	     print the RSA key modu"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aCheckVerifyKey ; " -check	     verify key	consistency"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aPubinExpectAPu ; " -pubin	     expect a public key in"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aPuboutOutputAP ; " -pubout	     output a public key\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aEngineEUseEn_6 ; " -engine e	     use engine	e, possibly"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		jmp	loc_4147A0
; ---------------------------------------------------------------------------
		align 10h

loc_414A90:				; CODE XREF: _rsa_main+37Ej
		mov	edi, offset aPassout_0 ; "-passout"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jz	short loc_414AD0
		mov	edi, offset aEngine_8 ;	"-engine"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_414AE6
		dec	ebp
		jz	loc_414880
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_54], eax
		jmp	loc_4145C9
; ---------------------------------------------------------------------------
		align 10h

loc_414AD0:				; CODE XREF: _rsa_main+5DEj
		dec	ebp
		jz	loc_414880
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_58], eax
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_414AE6:				; CODE XREF: _rsa_main+5EEj
		mov	edi, offset aSgckey ; "-sgckey"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jz	loc_414C3A
		mov	edi, offset aPubin ; "-pubin"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_414C49
		mov	edi, offset aPubout ; "-pubout"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jz	loc_414D41
		mov	edi, offset aRsapublickey_i ; "-RSAPublicKey_in"
		mov	ecx, 11h
		mov	esi, eax
		repe cmpsb
		jz	loc_414ECB
		mov	edi, offset aRsapublickey_o ; "-RSAPublicKey_out"
		mov	ecx, 12h
		mov	esi, eax
		repe cmpsb
		jz	loc_414F2A
		mov	edi, offset aPvkStrong ; "-pvk-strong"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jz	loc_415055
		mov	edi, offset aPvkWeak ; "-pvk-weak"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_415109
		mov	edi, offset aPvkNone ; "-pvk-none"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_4150FA
		mov	edi, offset aNoout_5 ; "-noout"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_4151FD
		mov	edi, offset aText_4 ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_4151EE
		mov	edi, offset aModulus_1 ; "-modulus"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jz	loc_4151A5
		mov	edi, offset aCheck_1 ; "-check"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	loc_415189
		mov	esi, ebx
		mov	[esp+8Ch+var_48], 1
		jmp	loc_4145C9
; ---------------------------------------------------------------------------
		align 10h

loc_414BF0:				; CODE XREF: _rsa_main+1Fj
		call	_BIO_s_file
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_4144E5
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+8Ch+var_80], edx
		mov	[esp+8Ch+var_84], 10h
		mov	[esp+8Ch+var_88], 6Ah
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_4144E5
; ---------------------------------------------------------------------------

loc_414C3A:				; CODE XREF: _rsa_main+634j
		mov	esi, ebx
		mov	[esp+8Ch+var_4C], 1
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_414C49:				; CODE XREF: _rsa_main+648j
		mov	esi, ebx
		mov	[esp+8Ch+var_50], 1
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_414C58:				; CODE XREF: _rsa_main+1B7j
		call	_BIO_s_file
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_new
		mov	ebx, eax
		mov	eax, [esp+8Ch+var_50]
		test	eax, eax
		jz	loc_414698
		cmp	eax, 2
		jz	loc_414EDA
		cmp	[esp+8Ch+var_70], 4
		jz	loc_414EFB

loc_414C87:				; CODE XREF: _rsa_main+A36j
					; _rsa_main+A41j ...
		mov	[esp+8Ch+var_74], offset aPublicKey ; "Public Key"
		mov	[esp+8Ch+var_78], esi
		mov	eax, [esp+8Ch+var_28]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], 1
		mov	eax, [esp+8Ch+var_70]
		mov	[esp+8Ch+var_84], eax
		mov	eax, [esp+8Ch+var_68]
		mov	[esp+8Ch+var_88], eax
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_load_pubkey
		mov	edi, eax
		jmp	loc_4146DE
; ---------------------------------------------------------------------------

loc_414CC7:				; CODE XREF: _rsa_main+D0j
		mov	[esp+8Ch+var_4C], 0
		mov	[esp+8Ch+var_30], 0
		jmp	loc_414618
; ---------------------------------------------------------------------------

loc_414CDC:				; CODE XREF: _rsa_main+29Ej
		mov	[esp+8Ch+var_88], offset aWritingRsaKey	; "writing RSA key\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		cmp	[esp+8Ch+var_6C], 1
		jz	loc_414F39
		cmp	[esp+8Ch+var_6C], 4
		jz	loc_414F7E
		cmp	[esp+8Ch+var_6C], 3
		jz	loc_4150B7
		mov	eax, [esp+8Ch+var_6C]
		sub	eax, 0Bh
		cmp	eax, 1
		jbe	loc_415064
		mov	[esp+8Ch+var_88], offset aBadOutputFor_5 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	edi, 1
		jmp	loc_414766
; ---------------------------------------------------------------------------

loc_414D41:				; CODE XREF: _rsa_main+65Cj
		mov	esi, ebx
		mov	[esp+8Ch+var_44], 1
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_414D50:				; CODE XREF: _rsa_main+220j
		mov	[esp+8Ch+var_8C], 0
		call	_EVP_PKEY_free

loc_414D5C:				; CODE XREF: _rsa_main+23Aj
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_print_errors
		xor	esi, esi
		mov	edi, 1
		jmp	loc_414766
; ---------------------------------------------------------------------------

loc_414D75:				; CODE XREF: _rsa_main+1C3j
		mov	[esp+8Ch+var_88], offset aOnlyPrivateKey ; "Only private keys can be checked\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		jmp	loc_4147A0
; ---------------------------------------------------------------------------

loc_414D8F:				; CODE XREF: _rsa_main+27Aj
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_RSA_print
		test	eax, eax
		jnz	loc_414740
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_perror
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_print_errors
		mov	edi, 1
		jmp	loc_414766
; ---------------------------------------------------------------------------

loc_414DCE:				; CODE XREF: _rsa_main+286j
		mov	[esp+8Ch+var_88], offset aModulus_2 ; "Modulus="
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	eax, [esi+10h]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], ebx
		call	_BN_print
		mov	[esp+8Ch+var_88], offset asc_45EFBE ; "\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		jmp	loc_41474C
; ---------------------------------------------------------------------------

loc_414E02:				; CODE XREF: _rsa_main+292j
		mov	[esp+8Ch+var_8C], esi
		call	_RSA_check_key
		cmp	eax, 1
		jz	loc_415040
		test	eax, eax
		jz	short loc_414E79
		inc	eax
		jnz	short loc_414E82

loc_414E1A:				; CODE XREF: _rsa_main+9C9j
					; _rsa_main+AB9j
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_print_errors
		mov	edi, 1
		jmp	loc_414766
; ---------------------------------------------------------------------------

loc_414E31:				; CODE XREF: _rsa_main+9C0j
		mov	edx, eax
		shr	edx, 18h
		cmp	edx, 4
		jnz	short loc_414E82
		mov	edx, eax
		shr	edx, 0Ch
		and	edx, 0FFFh
		cmp	edx, 7Bh
		jnz	short loc_414E82
		mov	edx, eax
		and	edx, 0FFFh
		cmp	edx, 41h
		jz	short loc_414E82
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_reason_error_string
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aRsaKeyErrorS ; "RSA key error: %s\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		call	_ERR_get_error

loc_414E79:				; CODE XREF: _rsa_main+955j
		call	_ERR_peek_error
		test	eax, eax
		jnz	short loc_414E31

loc_414E82:				; CODE XREF: _rsa_main+958j
					; _rsa_main+979j ...
		call	_ERR_peek_error
		test	eax, eax
		jnz	short loc_414E1A
		jmp	loc_414758
; ---------------------------------------------------------------------------

loc_414E90:				; CODE XREF: _rsa_main+246j
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], 6Ah
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_ctrl
		jmp	loc_414734
; ---------------------------------------------------------------------------

loc_414EB9:				; CODE XREF: _rsa_main+1E1j
		cmp	[esp+8Ch+var_4C], 1
		sbb	eax, eax
		and	eax, 0FFFFFFFCh
		add	eax, 8
		jmp	loc_4146AB
; ---------------------------------------------------------------------------

loc_414ECB:				; CODE XREF: _rsa_main+670j
		mov	esi, ebx
		mov	[esp+8Ch+var_50], 2
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_414EDA:				; CODE XREF: _rsa_main+7B6j
		mov	eax, [esp+8Ch+var_70]
		cmp	eax, 3
		jz	loc_4150ED
		dec	eax
		jz	loc_4150E0
		mov	[esp+8Ch+var_70], 0FFFFFFFFh
		jmp	loc_414C87
; ---------------------------------------------------------------------------

loc_414EFB:				; CODE XREF: _rsa_main+7C1j
		mov	edx, [esp+8Ch+var_4C]
		test	edx, edx
		jz	loc_414C87
		mov	[esp+8Ch+var_70], 8
		jmp	loc_414C87
; ---------------------------------------------------------------------------

loc_414F14:				; CODE XREF: _rsa_main+26Ej
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_perror
		mov	edi, 1
		jmp	loc_414766
; ---------------------------------------------------------------------------

loc_414F2A:				; CODE XREF: _rsa_main+684j
		mov	esi, ebx
		mov	[esp+8Ch+var_44], 2
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_414F39:				; CODE XREF: _rsa_main+836j
		mov	eax, [esp+8Ch+var_44]
		test	eax, eax
		jz	loc_415021
		cmp	[esp+8Ch+var_44], 2
		jnz	loc_415010
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2d_RSAPublicKey_bio

loc_414F5C:				; CODE XREF: _rsa_main+B5Cj
					; _rsa_main+B75j ...
		test	eax, eax
		jg	loc_414764
		mov	[esp+8Ch+var_88], offset aUnableToWriteK ; "unable to write key\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		jmp	loc_414E1A
; ---------------------------------------------------------------------------

loc_414F7E:				; CODE XREF: _rsa_main+841j
		mov	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], esi
		call	_i2d_RSA_NET
		mov	edi, eax
		mov	[esp+8Ch+var_84], 17Ch
		mov	[esp+8Ch+var_88], offset aRsa_c	; "rsa.c"
		mov	[esp+8Ch+var_8C], eax
		call	_CRYPTO_malloc
		mov	ebp, eax
		mov	[esp+8Ch+var_20], eax
		test	eax, eax
		jz	loc_41516A
		mov	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 0
		lea	eax, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		call	_i2d_RSA_NET
		mov	[esp+8Ch+var_84], edi
		mov	[esp+8Ch+var_88], ebp
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_write
		mov	[esp+8Ch+var_8C], ebp
		call	_CRYPTO_free
		xor	edi, edi
		jmp	loc_414766
; ---------------------------------------------------------------------------
		align 10h

loc_415010:				; CODE XREF: _rsa_main+A8Aj
					; _rsa_main+B67j
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2d_RSA_PUBKEY_bio
		jmp	loc_414F5C
; ---------------------------------------------------------------------------

loc_415021:				; CODE XREF: _rsa_main+A7Fj
		mov	ebp, [esp+8Ch+var_50]
		test	ebp, ebp
		jnz	short loc_415010
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2d_RSAPrivateKey_bio
		jmp	loc_414F5C
; ---------------------------------------------------------------------------
		align 10h

loc_415040:				; CODE XREF: _rsa_main+94Dj
		mov	[esp+8Ch+var_88], offset aRsaKeyOk ; "RSA key ok\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		jmp	loc_414E82
; ---------------------------------------------------------------------------

loc_415055:				; CODE XREF: _rsa_main+698j
		mov	esi, ebx
		mov	[esp+8Ch+var_40], 2
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_415064:				; CODE XREF: _rsa_main+85Cj
		call	_EVP_PKEY_new
		mov	edi, eax
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_PKEY_set1_RSA
		cmp	[esp+8Ch+var_6C], 0Ch
		jz	loc_4151B4
		mov	edx, [esp+8Ch+var_50]
		test	edx, edx
		jnz	short loc_415096
		mov	eax, [esp+8Ch+var_44]
		test	eax, eax
		jz	loc_4151DD

loc_415096:				; CODE XREF: _rsa_main+BC8j
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2b_PublicKey_bio

loc_4150A2:				; CODE XREF: _rsa_main+D18j
					; _rsa_main+D29j
		mov	[esp+8Ch+var_70], eax
		mov	[esp+8Ch+var_8C], edi
		call	_EVP_PKEY_free
		mov	eax, [esp+8Ch+var_70]
		jmp	loc_414F5C
; ---------------------------------------------------------------------------

loc_4150B7:				; CODE XREF: _rsa_main+84Cj
		mov	edi, [esp+8Ch+var_44]
		test	edi, edi
		jz	short loc_415129
		cmp	[esp+8Ch+var_44], 2
		jnz	short loc_415118
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_PEM_write_bio_RSAPublicKey
		jmp	loc_414F5C
; ---------------------------------------------------------------------------
		align 10h

loc_4150E0:				; CODE XREF: _rsa_main+A28j
		mov	[esp+8Ch+var_70], 0Ah
		jmp	loc_414C87
; ---------------------------------------------------------------------------

loc_4150ED:				; CODE XREF: _rsa_main+A21j
		mov	[esp+8Ch+var_70], 9
		jmp	loc_414C87
; ---------------------------------------------------------------------------

loc_4150FA:				; CODE XREF: _rsa_main+6C0j
		mov	esi, ebx
		mov	[esp+8Ch+var_40], 0
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_415109:				; CODE XREF: _rsa_main+6ACj
		mov	esi, ebx
		mov	[esp+8Ch+var_40], 1
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_415118:				; CODE XREF: _rsa_main+C04j
					; _rsa_main+C6Fj
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_PEM_write_bio_RSA_PUBKEY
		jmp	loc_414F5C
; ---------------------------------------------------------------------------

loc_415129:				; CODE XREF: _rsa_main+BFDj
		mov	ecx, [esp+8Ch+var_50]
		test	ecx, ecx
		jnz	short loc_415118
		mov	eax, [esp+8Ch+var_24]
		mov	[esp+8Ch+var_74], eax
		mov	[esp+8Ch+var_78], 0
		mov	[esp+8Ch+var_7C], 0
		mov	[esp+8Ch+var_80], 0
		mov	eax, [esp+8Ch+var_30]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_PEM_write_bio_RSAPrivateKey
		jmp	loc_414F5C
; ---------------------------------------------------------------------------

loc_41516A:				; CODE XREF: _rsa_main+B00j
		mov	[esp+8Ch+var_88], offset aMemoryAlloca_2 ; "Memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	edi, 1
		jmp	loc_414766
; ---------------------------------------------------------------------------

loc_415189:				; CODE XREF: _rsa_main+710j
		inc	eax
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_get_cipherbyname
		mov	[esp+8Ch+var_30], eax
		test	eax, eax
		jz	loc_414856
		mov	esi, ebx
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_4151A5:				; CODE XREF: _rsa_main+6FCj
		mov	esi, ebx
		mov	[esp+8Ch+var_34], 1
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_4151B4:				; CODE XREF: _rsa_main+BBCj
		mov	eax, [esp+8Ch+var_24]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], 0
		mov	eax, [esp+8Ch+var_40]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2b_PVK_bio
		jmp	loc_4150A2
; ---------------------------------------------------------------------------

loc_4151DD:				; CODE XREF: _rsa_main+BD0j
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2b_PrivateKey_bio
		jmp	loc_4150A2
; ---------------------------------------------------------------------------

loc_4151EE:				; CODE XREF: _rsa_main+6E8j
		mov	esi, ebx
		mov	[esp+8Ch+var_3C], 1
		jmp	loc_4145C9
; ---------------------------------------------------------------------------

loc_4151FD:				; CODE XREF: _rsa_main+6D4j
		mov	esi, ebx
		mov	[esp+8Ch+var_38], 1
		jmp	loc_4145C9
_rsa_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _rsautl_main
_rsautl_main	proc near		; DATA XREF: .data:004550C4o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_36		= byte ptr -36h
var_35		= byte ptr -35h
var_34		= byte ptr -34h
var_33		= byte ptr -33h
var_32		= byte ptr -32h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	[esp+7Ch+var_20], 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_415870

loc_41522C:				; CODE XREF: _rsautl_main+67Dj
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], eax
		call	_load_config
		test	eax, eax
		jz	loc_415350
		mov	eax, [esp+7Ch+arg_0]
		lea	edx, [eax-1]
		mov	[esp+7Ch+var_54], edx
		call	_ERR_load_crypto_strings
		call	_OPENSSL_add_all_algorithms_noconf
		mov	edx, [esp+7Ch+var_54]
		test	edx, edx
		jle	loc_415606
		mov	eax, [esp+7Ch+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+7Ch+var_48], 0
		mov	[esp+7Ch+var_34], 1
		mov	[esp+7Ch+var_32], 0
		mov	[esp+7Ch+var_31], 0
		mov	[esp+7Ch+var_33], 0
		mov	byte ptr [esp+7Ch+var_40], 0
		mov	[esp+7Ch+var_3C], 3
		mov	[esp+7Ch+var_36], 1
		mov	[esp+7Ch+var_35], 2
		mov	[esp+7Ch+var_4C], 0
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_50], 0
		mov	[esp+7Ch+var_54], 0
		jmp	short loc_4152E9
; ---------------------------------------------------------------------------
		align 10h

loc_4152D0:				; CODE XREF: _rsautl_main+E9j
		dec	edx
		jz	loc_415450
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_54], eax

loc_4152E1:				; CODE XREF: _rsautl_main+1B1j
					; _rsautl_main+1DDj ...
		dec	edx
		lea	ebx, [esi+4]
		test	edx, edx
		jle	short loc_415328

loc_4152E9:				; CODE XREF: _rsautl_main+B5j
					; _rsautl_main+116j
		mov	ebp, [ebx]
		mov	esi, ebp
		mov	edi, offset aIn_9 ; "-in"
		mov	ecx, 4
		repe cmpsb
		jz	short loc_4152D0
		mov	edi, offset aOut_11 ; "-out"
		mov	esi, ebp
		mov	ecx, 5
		repe cmpsb
		jnz	loc_4153A0
		dec	edx
		jz	loc_415450
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_50], eax
		dec	edx
		lea	ebx, [esi+4]
		test	edx, edx
		jg	short loc_4152E9

loc_415328:				; CODE XREF: _rsautl_main+D7j
		mov	al, [esp+7Ch+var_36]
		mov	bl, al
		cmp	byte ptr [esp+7Ch+var_40], 0
		jz	loc_415660
		dec	al
		jz	loc_415660
		mov	[esp+7Ch+var_78], offset aAPrivateKeyIsN ; "A private key is needed for	this operat"...
		jmp	loc_4155BD
; ---------------------------------------------------------------------------
		align 10h

loc_415350:				; CODE XREF: _rsautl_main+2Ej
		xor	ebx, ebx
		xor	esi, esi

loc_415354:				; CODE XREF: _rsautl_main+3BEj
					; _rsautl_main+B24j ...
		mov	[esp+7Ch+var_7C], ebx
		call	_RSA_free
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_free
		mov	[esp+7Ch+var_7C], 0
		call	_BIO_free_all
		mov	edi, 1

loc_415375:				; CODE XREF: _rsautl_main+8B1j
					; _rsautl_main+8BFj
		mov	eax, [esp+7Ch+var_20]
		test	eax, eax
		jz	loc_415440
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_free
		mov	eax, edi

loc_41538B:				; CODE XREF: _rsautl_main+658j
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4153A0:				; CODE XREF: _rsautl_main+F9j
		mov	edi, offset aInkey ; "-inkey"
		mov	ecx, 7
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_4153D0
		dec	edx
		jz	loc_415450
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_4C], eax
		jmp	loc_4152E1
; ---------------------------------------------------------------------------
		align 10h

loc_4153D0:				; CODE XREF: _rsautl_main+19Ej
		mov	edi, offset aPassin_3 ;	"-passin"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_415400
		dec	edx
		jz	short loc_415450
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_48], eax
		jmp	loc_4152E1
; ---------------------------------------------------------------------------
		align 10h

loc_415400:				; CODE XREF: _rsautl_main+1CEj
		mov	edi, offset aKeyform_2 ; "-keyform"
		mov	ecx, 9
		mov	esi, ebp
		repe cmpsb
		jz	loc_4155E0
		mov	edi, offset aEngine_9 ;	"-engine"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	loc_4156D0
		dec	edx
		jz	short loc_415450
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_44], eax
		jmp	loc_4152E1
; ---------------------------------------------------------------------------
		align 10h

loc_415440:				; CODE XREF: _rsautl_main+16Bj
		mov	eax, edi
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_415450:				; CODE XREF: _rsautl_main+C1j
					; _rsautl_main+100j ...
		mov	[esp+7Ch+var_78], offset aUsageRsautlOpt ; "Usage: rsautl [options]\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInFileInputF_0 ; "-in	file	    input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOutFileOutpu_0 ; "-out file	    output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInkeyFileInp_0 ; "-inkey file	    input key\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aKeyformArgPr_0 ; "-keyform arg    private key	format - de"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aPubinInputIsAn ; "-pubin	    input is an	RSA public\"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aCertinInputI_0 ; "-certin	    input is a certificate "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aSslUseSslV2Pad ; "-ssl	    use	SSL v2 padding\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aRawUseNoPaddin ; "-raw	    use	no padding\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aPkcsUsePkcs1V1 ; "-pkcs	    use	PKCS#1 v1.5 padding"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOaepUsePkcs1Oa ; "-oaep	    use	PKCS#1 OAEP\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aSignSignWith_0 ; "-sign	    sign with private key\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aVerifyVerify_0 ; "-verify	    verify with	public key\"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aEncryptEncry_0 ; "-encrypt	    encrypt with public	key"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aDecryptDecry_0 ; "-decrypt	    decrypt with private ke"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aHexdumpHexDu_0 ; "-hexdump	    hex	dump output\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aEngineEUseEn_7 ; "-engine e	    use	engine e, possibly "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aPassinArgPas_0 ; "-passin arg	   pass	phrase source\n"

loc_4155BD:				; CODE XREF: _rsautl_main+139j
					; _rsautl_main+4ACj
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		xor	ebx, ebx
		xor	esi, esi
		jmp	loc_415354
; ---------------------------------------------------------------------------
		align 10h

loc_4155E0:				; CODE XREF: _rsautl_main+1FEj
		dec	edx
		mov	[esp+7Ch+var_30], edx
		jz	loc_415450
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_str2fmt
		mov	[esp+7Ch+var_3C], eax
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415606:				; CODE XREF: _rsautl_main+52j
		mov	[esp+7Ch+var_48], 0
		mov	[esp+7Ch+var_34], 1
		mov	[esp+7Ch+var_32], 0
		mov	[esp+7Ch+var_31], 0
		mov	[esp+7Ch+var_33], 0
		mov	[esp+7Ch+var_3C], 3
		mov	bl, 1
		mov	[esp+7Ch+var_35], 2
		mov	[esp+7Ch+var_4C], 0
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_50], 0
		mov	[esp+7Ch+var_54], 0
		jmp	short loc_415660
; ---------------------------------------------------------------------------
		align 10h

loc_415660:				; CODE XREF: _rsautl_main+123j
					; _rsautl_main+12Bj ...
		mov	[esp+7Ch+var_74], 0
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_setup_engine
		mov	esi, eax
		mov	[esp+7Ch+var_6C], 0 ; int
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_70], eax ;	int
		mov	[esp+7Ch+var_74], 0 ; char *
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_78], eax ;	char *
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax ;	int
		call	_app_passwd
		test	eax, eax
		jnz	loc_415830
		mov	[esp+7Ch+var_78], offset aErrorGetting_5 ; "Error getting password\n"
		jmp	loc_4155BD
; ---------------------------------------------------------------------------
		jmp	short loc_4156D0
; ---------------------------------------------------------------------------
		align 10h

loc_4156D0:				; CODE XREF: _rsautl_main+212j
					; _rsautl_main+4B1j
		mov	edi, offset aPubin_0 ; "-pubin"
		mov	ecx, 7
		mov	esi, ebp
		repe cmpsb
		jz	loc_415892
		mov	edi, offset aCertin ; "-certin"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jz	loc_415AD4
		mov	edi, offset aAsn1parse ; "-asn1parse"
		mov	ecx, 0Bh
		mov	esi, ebp
		repe cmpsb
		jz	loc_415BB0
		mov	edi, offset aHexdump ; "-hexdump"
		mov	ecx, 9
		mov	esi, ebp
		repe cmpsb
		jz	loc_415CD0
		mov	edi, offset aRaw ; "-raw"
		mov	esi, ebp
		mov	ecx, 5
		repe cmpsb
		jz	loc_415DB2
		mov	edi, offset aOaep ; "-oaep"
		mov	ecx, 6
		mov	esi, ebp
		repe cmpsb
		jz	loc_415DD6
		mov	edi, offset aSsl ; "-ssl"
		mov	esi, ebp
		mov	ecx, 5
		repe cmpsb
		jz	loc_415DE2
		mov	edi, offset aPkcs ; "-pkcs"
		mov	ecx, 6
		mov	esi, ebp
		repe cmpsb
		jz	loc_415DFA
		mov	edi, offset aX931 ; "-x931"
		mov	ecx, 6
		mov	esi, ebp
		repe cmpsb
		jz	loc_415DEE
		mov	[esp+7Ch+var_30], edx
		mov	[esp+7Ch+var_78], offset aSign_0 ; "-sign"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_415E3F
		mov	[esp+7Ch+var_78], offset aVerify_2 ; "-verify"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_415E33
		mov	[esp+7Ch+var_78], offset aRev ;	"-rev"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_415E27
		mov	[esp+7Ch+var_78], offset aEncrypt ; "-encrypt"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		mov	esi, ebx
		mov	[esp+7Ch+var_35], 3
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_4152E1
		mov	[esp+7Ch+var_40], edx
		mov	[esp+7Ch+var_78], offset aDecrypt ; "-decrypt"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_40]
		jnz	loc_415450
		mov	byte ptr [esp+7Ch+var_40], 1
		mov	[esp+7Ch+var_35], 4
		jmp	loc_4152E1
; ---------------------------------------------------------------------------
		align 10h

loc_415830:				; CODE XREF: _rsautl_main+49Ej
		mov	[esp+7Ch+var_74], 0
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_app_RAND_load_file
		cmp	bl, 2
		jz	loc_415B20
		cmp	bl, 3
		jz	short loc_41589E
		dec	bl
		jz	loc_415AE0

loc_415863:				; CODE XREF: _rsautl_main+6C3j
					; _rsautl_main+6D9j
		mov	eax, 1
		jmp	loc_41538B
; ---------------------------------------------------------------------------
		align 10h

loc_415870:				; CODE XREF: _rsautl_main+16j
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_41522C
; ---------------------------------------------------------------------------

loc_415892:				; CODE XREF: _rsautl_main+4CEj
		mov	esi, ebx
		mov	[esp+7Ch+var_36], 2
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_41589E:				; CODE XREF: _rsautl_main+649j
		mov	[esp+7Ch+var_68], offset aCertificate_0	; "Certificate"
		mov	[esp+7Ch+var_6C], esi
		mov	[esp+7Ch+var_70], 0
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_load_cert
		mov	ebx, eax
		test	eax, eax
		jz	short loc_415863
		mov	[esp+7Ch+var_7C], eax
		call	_X509_get_pubkey
		mov	esi, eax
		mov	[esp+7Ch+var_7C], ebx
		call	_X509_free

loc_4158E7:				; CODE XREF: _rsautl_main+90Bj
					; _rsautl_main+94Bj
		test	esi, esi
		jz	loc_415863
		mov	[esp+7Ch+var_7C], esi
		call	_EVP_PKEY_get1_RSA
		mov	ebx, eax
		mov	[esp+7Ch+var_7C], esi
		call	_EVP_PKEY_free
		test	ebx, ebx
		jz	loc_415D10
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jz	loc_415C02
		mov	[esp+7Ch+var_78], offset aRb_3 ; "rb"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_file
		mov	esi, eax
		test	eax, eax
		jz	loc_415D60

loc_41592F:				; CODE XREF: _rsautl_main+A09j
		mov	eax, [esp+7Ch+var_50]
		test	eax, eax
		jz	loc_415C59
		mov	[esp+7Ch+var_78], offset aWb_2 ; "wb"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_file
		mov	[esp+7Ch+var_54], eax
		test	eax, eax
		jz	loc_415D39

loc_415957:				; CODE XREF: _rsautl_main+A65j
		mov	[esp+7Ch+var_7C], ebx
		call	_RSA_size
		mov	ebp, eax
		lea	edi, [eax+eax]
		mov	[esp+7Ch+var_74], 10Dh
		mov	[esp+7Ch+var_78], offset aRsautl_c ; "rsautl.c"
		mov	[esp+7Ch+var_7C], edi
		call	_CRYPTO_malloc
		mov	[esp+7Ch+var_50], eax
		mov	[esp+7Ch+var_74], 10Eh
		mov	[esp+7Ch+var_78], offset aRsautl_c ; "rsautl.c"
		mov	[esp+7Ch+var_7C], ebp
		call	_CRYPTO_malloc
		mov	ebp, eax
		mov	edx, [esp+7Ch+var_50]
		test	edx, edx
		jz	loc_415D6A
		test	eax, eax
		jz	loc_415B60
		mov	[esp+7Ch+var_74], edi
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_read
		mov	edi, eax
		test	eax, eax
		mov	edx, [esp+7Ch+var_50]
		jle	loc_415E06
		cmp	[esp+7Ch+var_33], 0
		jz	short loc_415A0C
		sar	eax, 1
		jz	short loc_415A0C
		lea	ecx, [edx+edi]
		add	eax, edx
		mov	[esp+7Ch+var_4C], esi
		mov	esi, eax
		mov	eax, edx
		mov	[esp+7Ch+var_50], ebx
		mov	[esp+7Ch+var_48], edx
		lea	esi, [esi+0]

loc_4159F0:				; CODE XREF: _rsautl_main+7EEj
		mov	bl, [eax]
		mov	dl, [ecx-1]
		mov	[eax], dl
		mov	[ecx-1], bl
		inc	eax
		dec	ecx
		cmp	eax, esi
		jnz	short loc_4159F0
		mov	esi, [esp+7Ch+var_4C]
		mov	ebx, [esp+7Ch+var_50]
		mov	edx, [esp+7Ch+var_48]

loc_415A0C:				; CODE XREF: _rsautl_main+7C1j
					; _rsautl_main+7C5j
		cmp	[esp+7Ch+var_35], 2
		jz	loc_415C7A
		jle	loc_415BCC
		mov	al, [esp+7Ch+var_35]
		cmp	al, 3
		jz	loc_415CA5
		cmp	al, 4
		jnz	loc_415CDC
		xor	eax, eax
		mov	al, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], ebx
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+var_7C], edi
		call	_RSA_private_decrypt
		mov	edx, [esp+7Ch+var_50]

loc_415A57:				; CODE XREF: _rsautl_main+9EDj
					; _rsautl_main+A90j ...
		test	eax, eax
		jle	loc_415CDC
		cmp	[esp+7Ch+var_32], 0
		jnz	loc_415C1E
		cmp	[esp+7Ch+var_31], 0
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebp
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		jz	loc_415BBC
		call	_BIO_dump
		xor	edi, edi
		mov	edx, [esp+7Ch+var_50]

loc_415A93:				; CODE XREF: _rsautl_main+9B7j
					; _rsautl_main+A44j ...
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+var_7C], ebx
		call	_RSA_free
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_free
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_free_all
		mov	edx, [esp+7Ch+var_50]

loc_415AB7:				; CODE XREF: _rsautl_main+99Bj
		mov	[esp+7Ch+var_7C], edx
		call	_CRYPTO_free

loc_415ABF:				; CODE XREF: _rsautl_main+B9Dj
		test	ebp, ebp
		jz	loc_415375
		mov	[esp+7Ch+var_7C], ebp
		call	_CRYPTO_free
		jmp	loc_415375
; ---------------------------------------------------------------------------

loc_415AD4:				; CODE XREF: _rsautl_main+4E2j
		mov	esi, ebx
		mov	[esp+7Ch+var_36], 3
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415AE0:				; CODE XREF: _rsautl_main+64Dj
		mov	[esp+7Ch+var_64], offset aPrivateKey_1 ; "Private Key"
		mov	[esp+7Ch+var_68], esi
		mov	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], 0
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_load_key
		mov	esi, eax
		jmp	loc_4158E7
; ---------------------------------------------------------------------------

loc_415B20:				; CODE XREF: _rsautl_main+640j
		mov	[esp+7Ch+var_64], offset aPublicKey_0 ;	"Public	Key"
		mov	[esp+7Ch+var_68], esi
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_load_pubkey
		mov	esi, eax
		jmp	loc_4158E7
; ---------------------------------------------------------------------------

loc_415B60:				; CODE XREF: _rsautl_main+798j
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+var_78], offset aOutOfMemory_3	; "Out of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	[esp+7Ch+var_7C], ebx
		call	_RSA_free
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_free
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_free_all
		mov	edi, 1
		mov	edx, [esp+7Ch+var_50]
		jmp	loc_415AB7
; ---------------------------------------------------------------------------

loc_415BB0:				; CODE XREF: _rsautl_main+4F6j
		mov	esi, ebx
		mov	[esp+7Ch+var_32], 1
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415BBC:				; CODE XREF: _rsautl_main+872j
		call	_BIO_write
		xor	edi, edi
		mov	edx, [esp+7Ch+var_50]
		jmp	loc_415A93
; ---------------------------------------------------------------------------

loc_415BCC:				; CODE XREF: _rsautl_main+807j
		cmp	[esp+7Ch+var_35], 1
		jnz	loc_415CDC
		xor	eax, eax
		mov	al, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], ebx
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+var_7C], edi
		call	_RSA_private_encrypt
		mov	edx, [esp+7Ch+var_50]
		jmp	loc_415A57
; ---------------------------------------------------------------------------

loc_415C02:				; CODE XREF: _rsautl_main+6FFj
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	esi, eax
		jmp	loc_41592F
; ---------------------------------------------------------------------------

loc_415C1E:				; CODE XREF: _rsautl_main+854j
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+var_6C], 0FFFFFFFFh
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebp
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_ASN1_parse_dump
		test	eax, eax
		mov	edx, [esp+7Ch+var_50]
		jz	loc_415DBE
		xor	edi, edi
		jmp	loc_415A93
; ---------------------------------------------------------------------------

loc_415C59:				; CODE XREF: _rsautl_main+725j
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	[esp+7Ch+var_54], eax
		jmp	loc_415957
; ---------------------------------------------------------------------------

loc_415C7A:				; CODE XREF: _rsautl_main+801j
		xor	eax, eax
		mov	al, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], ebx
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+var_7C], edi
		call	_RSA_public_decrypt
		mov	edx, [esp+7Ch+var_50]
		jmp	loc_415A57
; ---------------------------------------------------------------------------

loc_415CA5:				; CODE XREF: _rsautl_main+813j
		xor	eax, eax
		mov	al, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], ebx
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+var_7C], edi
		call	_RSA_public_encrypt
		mov	edx, [esp+7Ch+var_50]
		jmp	loc_415A57
; ---------------------------------------------------------------------------

loc_415CD0:				; CODE XREF: _rsautl_main+50Aj
		mov	esi, ebx
		mov	[esp+7Ch+var_31], 1
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415CDC:				; CODE XREF: _rsautl_main+81Bj
					; _rsautl_main+849j ...
		mov	[esp+7Ch+var_50], edx
		mov	[esp+7Ch+var_78], offset aRsaOperationEr ; "RSA	operation error\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	edi, 1
		mov	edx, [esp+7Ch+var_50]
		jmp	loc_415A93
; ---------------------------------------------------------------------------

loc_415D10:				; CODE XREF: _rsautl_main+6F3j
		mov	[esp+7Ch+var_78], offset aErrorGettingRs ; "Error getting RSA key\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	esi, esi
		jmp	loc_415354
; ---------------------------------------------------------------------------

loc_415D39:				; CODE XREF: _rsautl_main+741j
		mov	[esp+7Ch+var_78], offset aErrorReadingOu ; "Error Reading Output File\n"

loc_415D41:				; CODE XREF: _rsautl_main+B58j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		jmp	loc_415354
; ---------------------------------------------------------------------------

loc_415D60:				; CODE XREF: _rsautl_main+719j
		mov	[esp+7Ch+var_78], offset aErrorReading_0 ; "Error Reading Input	File\n"
		jmp	short loc_415D41
; ---------------------------------------------------------------------------

loc_415D6A:				; CODE XREF: _rsautl_main+790j
		mov	[esp+7Ch+var_78], offset aOutOfMemory_3	; "Out of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	[esp+7Ch+var_7C], ebx
		call	_RSA_free
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_free
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_free_all
		mov	edi, 1
		jmp	loc_415ABF
; ---------------------------------------------------------------------------

loc_415DB2:				; CODE XREF: _rsautl_main+51Ej
		mov	esi, ebx
		mov	[esp+7Ch+var_34], 3
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415DBE:				; CODE XREF: _rsautl_main+A3Cj
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	edi, edi
		mov	edx, [esp+7Ch+var_50]
		jmp	loc_415A93
; ---------------------------------------------------------------------------

loc_415DD6:				; CODE XREF: _rsautl_main+532j
		mov	esi, ebx
		mov	[esp+7Ch+var_34], 4
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415DE2:				; CODE XREF: _rsautl_main+546j
		mov	esi, ebx
		mov	[esp+7Ch+var_34], 2
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415DEE:				; CODE XREF: _rsautl_main+56Ej
		mov	esi, ebx
		mov	[esp+7Ch+var_34], 5
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415DFA:				; CODE XREF: _rsautl_main+55Aj
		mov	esi, ebx
		mov	[esp+7Ch+var_34], 1
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415E06:				; CODE XREF: _rsautl_main+7B6j
		mov	[esp+7Ch+var_78], offset aErrorReading_1 ; "Error reading input	Data\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_7C], 1 ; int
		call	_exit_0
; ---------------------------------------------------------------------------

loc_415E27:				; CODE XREF: _rsautl_main+5C6j
		mov	esi, ebx
		mov	[esp+7Ch+var_33], 1
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415E33:				; CODE XREF: _rsautl_main+5AAj
		mov	esi, ebx
		mov	[esp+7Ch+var_35], 2
		jmp	loc_4152E1
; ---------------------------------------------------------------------------

loc_415E3F:				; CODE XREF: _rsautl_main+58Ej
		mov	esi, ebx
		mov	byte ptr [esp+7Ch+var_40], 1
		mov	[esp+7Ch+var_35], 1
		jmp	loc_4152E1
_rsautl_main	endp


; =============== S U B	R O U T	I N E =======================================


		public _dsa_main
_dsa_main	proc near		; DATA XREF: .data:004550D0o

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	[esp+8Ch+var_24], 0
		mov	[esp+8Ch+var_20], 0
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_4164F0

loc_415E75:				; CODE XREF: _dsa_main+6B4j
					; _dsa_main+6E5j
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_41637C
		mov	eax, [esp+8Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+8Ch+var_54], eax
		mov	eax, [esp+8Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+8Ch+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+8Ch+var_44], 2
		mov	[esp+8Ch+var_30], 0
		mov	[esp+8Ch+var_50], 0
		mov	[esp+8Ch+var_58], 0
		mov	[esp+8Ch+var_4C], 0
		mov	[esp+8Ch+var_5C], 0
		mov	[esp+8Ch+var_60], 0
		mov	[esp+8Ch+var_40], 0
		mov	[esp+8Ch+var_48], 0
		mov	[esp+8Ch+var_34], 0
		mov	[esp+8Ch+var_38], 0
		mov	[esp+8Ch+var_64], 3
		mov	[esp+8Ch+var_68], 3
		mov	[esp+8Ch+var_3C], 0
		test	ebp, ebp
		jg	loc_416115
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_415F30:				; CODE XREF: _dsa_main+2BFj
		call	_ERR_load_crypto_strings
		mov	[esp+8Ch+var_84], 0
		mov	eax, [esp+8Ch+var_4C]
		mov	[esp+8Ch+var_88], eax
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_setup_engine
		mov	esi, eax
		lea	eax, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_7C], eax ;	int
		lea	eax, [esp+8Ch+var_24]
		mov	[esp+8Ch+var_80], eax ;	int
		mov	eax, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_84], eax ;	char *
		mov	eax, [esp+8Ch+var_58]
		mov	[esp+8Ch+var_88], eax ;	char *
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax ;	int
		call	_app_passwd
		test	eax, eax
		jz	loc_416549
		call	_BIO_s_file
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_new
		mov	ebp, eax
		call	_BIO_s_file
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_new
		mov	ebx, eax
		test	ebp, ebp
		jz	loc_416761
		test	eax, eax
		jz	loc_4165C7
		mov	ecx, [esp+8Ch+var_60]
		test	ecx, ecx
		jz	loc_41673B
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 3
		mov	[esp+8Ch+var_88], 6Ch
		mov	[esp+8Ch+var_8C], ebp
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_416723

loc_415FEB:				; CODE XREF: _dsa_main+90Cj
		mov	[esp+8Ch+var_88], offset aReadDsaKey ; "read DSA key\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	edx, [esp+8Ch+var_48]
		test	edx, edx
		jz	loc_416572
		mov	[esp+8Ch+var_74], offset aPublicKey_1 ;	"Public	Key"
		mov	[esp+8Ch+var_78], esi
		mov	eax, [esp+8Ch+var_24]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], 1
		mov	eax, [esp+8Ch+var_68]
		mov	[esp+8Ch+var_84], eax
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_88], eax
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_load_pubkey
		mov	edi, eax

loc_416047:				; CODE XREF: _dsa_main+75Dj
		test	edi, edi
		jz	loc_4165B2
		mov	[esp+8Ch+var_8C], edi
		call	_EVP_PKEY_get1_DSA
		mov	esi, eax
		mov	[esp+8Ch+var_8C], edi
		call	_EVP_PKEY_free
		test	esi, esi
		jz	loc_4165B2
		mov	eax, [esp+8Ch+var_5C]
		test	eax, eax
		jz	loc_4166FA
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 5
		mov	[esp+8Ch+var_88], 6Ch
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_41677A

loc_41609D:				; CODE XREF: _dsa_main+8CEj
		mov	eax, [esp+8Ch+var_38]
		test	eax, eax
		jnz	loc_4165EF

loc_4160A9:				; CODE XREF: _dsa_main+7B5j
		mov	eax, [esp+8Ch+var_30]
		test	eax, eax
		jnz	loc_416697

loc_4160B5:				; CODE XREF: _dsa_main+896j
		mov	eax, [esp+8Ch+var_34]
		test	eax, eax
		jz	loc_41663D

loc_4160C1:				; CODE XREF: _dsa_main+AA8j
		mov	edi, 1

loc_4160C6:				; CODE XREF: _dsa_main+78Bj
					; _dsa_main+7D9j ...
		mov	[esp+8Ch+var_8C], ebp
		call	_BIO_free

loc_4160CE:				; CODE XREF: _dsa_main+925j
		test	ebx, ebx
		jz	short loc_4160DA
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_free_all

loc_4160DA:				; CODE XREF: _dsa_main+280j
		test	esi, esi
		jz	loc_416381
		mov	[esp+8Ch+var_8C], esi
		call	_DSA_free
		jmp	loc_416381
; ---------------------------------------------------------------------------
		align 10h

loc_4160F0:				; CODE XREF: _dsa_main+2D5j
		dec	ebp
		jz	loc_4161D0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_str2fmt
		mov	[esp+8Ch+var_68], eax

loc_416109:				; CODE XREF: _dsa_main+300j
					; _dsa_main+32Dj ...
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jle	loc_415F30

loc_416115:				; CODE XREF: _dsa_main+D0j
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aInform_7 ;	"-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_4160F0
		mov	edi, offset aOutform_6 ; "-outform"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_416160
		dec	ebp
		jz	loc_4161D0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_str2fmt
		mov	[esp+8Ch+var_64], eax
		jmp	short loc_416109
; ---------------------------------------------------------------------------
		align 10h

loc_416160:				; CODE XREF: _dsa_main+2E5j
		mov	edi, offset aIn_10 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_416180
		dec	ebp
		jz	short loc_4161D0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_60], eax
		jmp	short loc_416109
; ---------------------------------------------------------------------------
		align 10h

loc_416180:				; CODE XREF: _dsa_main+31Ej
		mov	edi, offset aOut_12 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_4163B0
		dec	ebp
		jz	short loc_4161D0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_5C], eax
		jmp	loc_416109
; ---------------------------------------------------------------------------

loc_4161A6:				; CODE XREF: _dsa_main+A17j
		mov	eax, [ebx]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aUnknownOptio_9 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		jmp	short loc_4161D0
; ---------------------------------------------------------------------------
		align 10h

loc_4161D0:				; CODE XREF: _dsa_main+2A1j
					; _dsa_main+2E8j ...
		mov	eax, [esp+8Ch+var_54]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aSOptionsInfi_5 ; "%s [options] <infile >outfile\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aWhereOptions_7 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aInformArgInp_6 ; " -inform arg     input format - DER	or "...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aOutformArgOu_5 ; " -outform arg    output format - DER or"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aInArgInputFi_6 ; " -in arg	     input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aPassinArgInp_0 ; " -passin arg     input file	pass phrase"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aOutArgOutput_6 ; " -out arg	     output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aPassoutArgOu_0 ; " -passout arg    output file pass phras"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aEngineEUseEn_8 ; " -engine e	     use engine	e, possibly"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aDesEncryptPe_0 ; " -des	     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aDes3EncryptP_0 ; " -des3	     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIdeaEncryptP_0 ; " -idea	     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aAes128Aes192_0 ; " -aes128, -aes192, -aes256\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aEncryptPemOu_1 ; "		     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aCamellia128C_0 ; " -camellia128, -camellia192, -camellia2"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aEncryptPemOu_2 ; "		     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aSeedEncryptP_0 ; " -seed	     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aTextPrintThe_0 ; " -text	     print the key in text\"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aNooutDonTPri_0 ; " -noout	     don't print key out\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aModulusPrint_0 ; " -modulus	     print the DSA public v"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf

loc_41637C:				; CODE XREF: _dsa_main+37j
					; _dsa_main+70Ej
		mov	edi, 1

loc_416381:				; CODE XREF: _dsa_main+28Cj
					; _dsa_main+29Aj
		mov	eax, [esp+8Ch+var_24]
		test	eax, eax
		jz	short loc_416391
		mov	[esp+8Ch+var_8C], eax
		call	_CRYPTO_free

loc_416391:				; CODE XREF: _dsa_main+537j
		mov	eax, [esp+8Ch+var_20]
		test	eax, eax
		jz	short loc_4163A1
		mov	[esp+8Ch+var_8C], eax
		call	_CRYPTO_free

loc_4163A1:				; CODE XREF: _dsa_main+547j
		mov	eax, edi
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4163B0:				; CODE XREF: _dsa_main+33Ej
		mov	edi, offset aPassin_4 ;	"-passin"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_4163E0
		dec	ebp
		jz	loc_4161D0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_58], eax
		jmp	loc_416109
; ---------------------------------------------------------------------------
		align 10h

loc_4163E0:				; CODE XREF: _dsa_main+56Ej
		mov	edi, offset aPassout_1 ; "-passout"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jz	short loc_416420
		mov	edi, offset aEngine_10 ; "-engine"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_416436
		dec	ebp
		jz	loc_4161D0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_4C], eax
		jmp	loc_416109
; ---------------------------------------------------------------------------
		align 10h

loc_416420:				; CODE XREF: _dsa_main+59Ej
		dec	ebp
		jz	loc_4161D0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+8Ch+var_50], eax
		jmp	loc_416109
; ---------------------------------------------------------------------------

loc_416436:				; CODE XREF: _dsa_main+5AEj
		mov	edi, offset aPvkStrong_0 ; "-pvk-strong"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jz	loc_41653A
		mov	edi, offset aPvkWeak_0 ; "-pvk-weak"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_416563
		mov	edi, offset aPvkNone_0 ; "-pvk-none"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_4165E0
		mov	edi, offset aNoout_6 ; "-noout"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_41662E
		mov	edi, offset aText_5 ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_4166EB
		mov	edi, offset aModulus_3 ; "-modulus"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jz	loc_416829
		mov	edi, offset aPubin_1 ; "-pubin"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_416838
		mov	edi, offset aPubout_0 ;	"-pubout"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_416858
		mov	esi, ebx
		mov	[esp+8Ch+var_40], 1
		jmp	loc_416109
; ---------------------------------------------------------------------------
		align 10h

loc_4164F0:				; CODE XREF: _dsa_main+1Fj
		call	_BIO_s_file
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_415E75
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+8Ch+var_80], edx
		mov	[esp+8Ch+var_84], 10h
		mov	[esp+8Ch+var_88], 6Ah
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_415E75
; ---------------------------------------------------------------------------

loc_41653A:				; CODE XREF: _dsa_main+5F4j
		mov	esi, ebx
		mov	[esp+8Ch+var_44], 2
		jmp	loc_416109
; ---------------------------------------------------------------------------

loc_416549:				; CODE XREF: _dsa_main+133j
		mov	[esp+8Ch+var_88], offset aErrorGetting_6 ; "Error getting passwords\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		jmp	loc_41637C
; ---------------------------------------------------------------------------

loc_416563:				; CODE XREF: _dsa_main+608j
		mov	esi, ebx
		mov	[esp+8Ch+var_44], 1
		jmp	loc_416109
; ---------------------------------------------------------------------------

loc_416572:				; CODE XREF: _dsa_main+1B6j
		mov	[esp+8Ch+var_74], offset aPrivateKey_2 ; "Private Key"
		mov	[esp+8Ch+var_78], esi
		mov	eax, [esp+8Ch+var_24]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], 1
		mov	eax, [esp+8Ch+var_68]
		mov	[esp+8Ch+var_84], eax
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_88], eax
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_load_key
		mov	edi, eax
		jmp	loc_416047
; ---------------------------------------------------------------------------

loc_4165B2:				; CODE XREF: _dsa_main+1F9j
					; _dsa_main+213j
		mov	[esp+8Ch+var_88], offset aUnableToLoadKe ; "unable to load Key\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf

loc_4165C7:				; CODE XREF: _dsa_main+161j
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_print_errors
		xor	esi, esi
		mov	edi, 1
		jmp	loc_4160C6
; ---------------------------------------------------------------------------

loc_4165E0:				; CODE XREF: _dsa_main+61Cj
		mov	esi, ebx
		mov	[esp+8Ch+var_44], 0
		jmp	loc_416109
; ---------------------------------------------------------------------------

loc_4165EF:				; CODE XREF: _dsa_main+253j
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_DSA_print
		test	eax, eax
		jnz	loc_4160A9
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_perror
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_print_errors
		mov	edi, 1
		jmp	loc_4160C6
; ---------------------------------------------------------------------------

loc_41662E:				; CODE XREF: _dsa_main+630j
		mov	esi, ebx
		mov	[esp+8Ch+var_34], 1
		jmp	loc_416109
; ---------------------------------------------------------------------------

loc_41663D:				; CODE XREF: _dsa_main+26Bj
		mov	[esp+8Ch+var_88], offset aWritingDsaKey	; "writing DSA key\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		cmp	[esp+8Ch+var_64], 1
		jz	loc_4167BF
		cmp	[esp+8Ch+var_64], 3
		jz	loc_416790
		mov	eax, [esp+8Ch+var_64]
		sub	eax, 0Bh
		cmp	eax, 1
		jbe	loc_4167DD
		mov	[esp+8Ch+var_88], offset aBadOutputFor_6 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	edi, 1
		jmp	loc_4160C6
; ---------------------------------------------------------------------------

loc_416697:				; CODE XREF: _dsa_main+25Fj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+8Ch+var_80], eax ;	FILE *
		mov	[esp+8Ch+var_84], 0Bh ;	size_t
		mov	[esp+8Ch+var_88], 1 ; size_t
		mov	[esp+8Ch+var_8C], offset aPublicKey_2 ;	"Public	Key="
		call	_fwrite
		mov	eax, [esi+18h]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], ebx
		call	_BN_print
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+8Ch+var_88], eax ;	FILE *
		mov	[esp+8Ch+var_8C], 0Ah ;	int
		call	_fputc
		jmp	loc_4160B5
; ---------------------------------------------------------------------------

loc_4166EB:				; CODE XREF: _dsa_main+644j
		mov	esi, ebx
		mov	[esp+8Ch+var_38], 1
		jmp	loc_416109
; ---------------------------------------------------------------------------

loc_4166FA:				; CODE XREF: _dsa_main+21Fj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], 6Ah
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_ctrl
		jmp	loc_41609D
; ---------------------------------------------------------------------------

loc_416723:				; CODE XREF: _dsa_main+195j
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_perror
		xor	esi, esi
		mov	edi, 1
		jmp	loc_4160C6
; ---------------------------------------------------------------------------

loc_41673B:				; CODE XREF: _dsa_main+16Dj
		mov	eax, ds:__imp___iob
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], 6Ah
		mov	[esp+8Ch+var_8C], ebp
		call	_BIO_ctrl
		jmp	loc_415FEB
; ---------------------------------------------------------------------------

loc_416761:				; CODE XREF: _dsa_main+159j
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_print_errors
		xor	esi, esi
		mov	edi, 1
		jmp	loc_4160CE
; ---------------------------------------------------------------------------

loc_41677A:				; CODE XREF: _dsa_main+247j
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_perror
		mov	edi, 1
		jmp	loc_4160C6
; ---------------------------------------------------------------------------

loc_416790:				; CODE XREF: _dsa_main+812j
		mov	edi, [esp+8Ch+var_48]
		test	edi, edi
		jnz	short loc_4167A4
		mov	ecx, [esp+8Ch+var_40]
		test	ecx, ecx
		jz	loc_41689D

loc_4167A4:				; CODE XREF: _dsa_main+946j
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_PEM_write_bio_DSA_PUBKEY

loc_4167B0:				; CODE XREF: _dsa_main+98Bj
					; _dsa_main+9D7j ...
		test	eax, eax
		jle	loc_4168D6
		xor	edi, edi
		jmp	loc_4160C6
; ---------------------------------------------------------------------------

loc_4167BF:				; CODE XREF: _dsa_main+807j
		mov	eax, [esp+8Ch+var_48]
		test	eax, eax
		jnz	short loc_4167CF
		mov	eax, [esp+8Ch+var_40]
		test	eax, eax
		jz	short loc_416847

loc_4167CF:				; CODE XREF: _dsa_main+975j
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2d_DSA_PUBKEY_bio
		jmp	short loc_4167B0
; ---------------------------------------------------------------------------

loc_4167DD:				; CODE XREF: _dsa_main+822j
		call	_EVP_PKEY_new
		mov	edi, eax
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_PKEY_set1_DSA
		cmp	[esp+8Ch+var_64], 0Ch
		jz	short loc_416874
		mov	edx, [esp+8Ch+var_48]
		test	edx, edx
		jnz	short loc_41680B
		mov	eax, [esp+8Ch+var_40]
		test	eax, eax
		jz	loc_4168FD

loc_41680B:				; CODE XREF: _dsa_main+9ADj
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2b_PublicKey_bio

loc_416817:				; CODE XREF: _dsa_main+A48j
					; _dsa_main+AB9j
		mov	[esp+8Ch+var_68], eax
		mov	[esp+8Ch+var_8C], edi
		call	_EVP_PKEY_free
		mov	eax, [esp+8Ch+var_68]
		jmp	short loc_4167B0
; ---------------------------------------------------------------------------

loc_416829:				; CODE XREF: _dsa_main+658j
		mov	esi, ebx
		mov	[esp+8Ch+var_30], 1
		jmp	loc_416109
; ---------------------------------------------------------------------------

loc_416838:				; CODE XREF: _dsa_main+66Cj
		mov	esi, ebx
		mov	[esp+8Ch+var_48], 1
		jmp	loc_416109
; ---------------------------------------------------------------------------

loc_416847:				; CODE XREF: _dsa_main+97Dj
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2d_DSAPrivateKey_bio
		jmp	loc_4167B0
; ---------------------------------------------------------------------------

loc_416858:				; CODE XREF: _dsa_main+680j
		inc	eax
		mov	[esp+8Ch+var_8C], eax
		call	_EVP_get_cipherbyname
		mov	[esp+8Ch+var_3C], eax
		test	eax, eax
		jz	loc_4161A6
		mov	esi, ebx
		jmp	loc_416109
; ---------------------------------------------------------------------------

loc_416874:				; CODE XREF: _dsa_main+9A5j
		mov	eax, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_7C], eax
		mov	[esp+8Ch+var_80], 0
		mov	eax, [esp+8Ch+var_44]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2b_PVK_bio
		jmp	loc_416817
; ---------------------------------------------------------------------------

loc_41689D:				; CODE XREF: _dsa_main+94Ej
		mov	eax, [esp+8Ch+var_20]
		mov	[esp+8Ch+var_74], eax
		mov	[esp+8Ch+var_78], 0
		mov	[esp+8Ch+var_7C], 0
		mov	[esp+8Ch+var_80], 0
		mov	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_PEM_write_bio_DSAPrivateKey
		jmp	loc_4167B0
; ---------------------------------------------------------------------------

loc_4168D6:				; CODE XREF: _dsa_main+962j
		mov	[esp+8Ch+var_88], offset aUnableToWrit_3 ; "unable to write private key\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_print_errors
		jmp	loc_4160C1
; ---------------------------------------------------------------------------

loc_4168FD:				; CODE XREF: _dsa_main+9B5j
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2b_PrivateKey_bio
		jmp	loc_416817
_dsa_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_dsa_cb		proc near		; DATA XREF: _dsaparam_main+1A1o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], 2Ah
		test	eax, eax
		jnz	short loc_416980
		mov	[esp+2Ch+var_10], 2Eh

loc_41692A:				; CODE XREF: _dsa_cb+7Aj _dsa_cb+83j ...
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_24], 1
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_write
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0Bh
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_ctrl
		mov	eax, 1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_416980:				; CODE XREF: _dsa_cb+13j
		cmp	eax, 1
		jnz	short loc_416990
		mov	[esp+2Ch+var_10], 2Bh
		jmp	short loc_41692A
; ---------------------------------------------------------------------------
		align 10h

loc_416990:				; CODE XREF: _dsa_cb+73j
		cmp	eax, 2
		jz	short loc_41692A
		cmp	eax, 3
		jnz	short loc_41692A
		mov	[esp+2Ch+var_10], 0Ah
		jmp	short loc_41692A
_dsa_cb		endp

; ---------------------------------------------------------------------------
		jmp	short _dsaparam_main
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _dsaparam_main
_dsaparam_main	proc near		; CODE XREF: .text:004169A1j
					; DATA XREF: .data:004550DCo

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_416F3E

loc_4169C5:				; CODE XREF: _dsaparam_main+5A2j
					; _dsaparam_main+5D3j
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_416E69
		mov	eax, [esp+7Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+7Ch+var_4C], eax
		mov	eax, [esp+7Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+7Ch+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+7Ch+var_50], 0
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_38], 0
		mov	[esp+7Ch+var_3C], 0FFFFFFFFh
		mov	[esp+7Ch+var_30], 0
		mov	[esp+7Ch+var_54], 0
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_40], 0
		mov	[esp+7Ch+var_34], 0
		mov	[esp+7Ch+var_5C], 3
		mov	[esp+7Ch+var_60], 3
		mov	[esp+7Ch+var_48], 0
		test	ebp, ebp
		jg	loc_416C95
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_416A70:				; CODE XREF: _dsaparam_main+2DFj
		call	_ERR_load_crypto_strings
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	ebx, eax
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	ebp, eax
		test	ebx, ebx
		jz	loc_41701C
		test	ebp, ebp
		jz	loc_416FC2
		mov	edi, [esp+7Ch+var_58]
		test	edi, edi
		jz	loc_4171F5
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 3
		mov	[esp+7Ch+var_78], 6Ch
		mov	[esp+7Ch+var_7C], ebx
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_417004

loc_416AD7:				; CODE XREF: _dsaparam_main+866j
		mov	esi, [esp+7Ch+var_54]
		test	esi, esi
		jz	loc_416FDB
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 5
		mov	[esp+7Ch+var_78], 6Ch
		mov	[esp+7Ch+var_7C], ebp
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_4173A7

loc_416B0B:				; CODE XREF: _dsaparam_main+64Fj
		mov	[esp+7Ch+var_74], 0
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_setup_engine
		mov	ecx, [esp+7Ch+var_44]
		test	ecx, ecx
		jnz	loc_41711A

loc_416B34:				; CODE XREF: _dsaparam_main+79Aj
					; _dsaparam_main+7C1j
		mov	edx, [esp+7Ch+var_3C]
		test	edx, edx
		jle	loc_417176
		mov	[esp+7Ch+var_28], 2
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_24], eax
		mov	[esp+7Ch+var_20], offset _dsa_cb
		mov	eax, [esp+7Ch+var_44]
		test	eax, eax
		jz	loc_4171AD

loc_416B65:				; CODE XREF: _dsaparam_main+819j
		call	_DSA_new
		mov	esi, eax
		test	eax, eax
		jz	loc_41759D
		mov	eax, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aGeneratingDs_0 ; "Generating DSA parameters, %d bit long "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aThisCouldTakeS ; "This could take some time\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_64], eax
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	eax, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	_DSA_generate_parameters_ex
		test	eax, eax
		jz	loc_4171CE

loc_416BE6:				; CODE XREF: _dsaparam_main+738j
		mov	eax, [esp+7Ch+var_48]
		test	eax, eax
		jnz	loc_417396

loc_416BF2:				; CODE XREF: _dsaparam_main+9F2j
		mov	eax, [esp+7Ch+var_40]
		test	eax, eax
		jnz	loc_4172B8

loc_416BFE:				; CODE XREF: _dsaparam_main+BE8j
		mov	edi, [esp+7Ch+var_34]
		test	edi, edi
		jnz	loc_417035
		cmp	[esp+7Ch+var_5C], 1
		jz	loc_4175FF
		cmp	[esp+7Ch+var_5C], 3
		jz	loc_4175B7
		mov	[esp+7Ch+var_78], offset aBadOutputFor_7 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	edi, 1

loc_416C3A:				; CODE XREF: _dsaparam_main+626j
					; _dsaparam_main+667j ...
		mov	[esp+7Ch+var_7C], ebx
		call	_BIO_free

loc_416C42:				; CODE XREF: _dsaparam_main+680j
		test	ebp, ebp
		jz	short loc_416C4E
		mov	[esp+7Ch+var_7C], ebp
		call	_BIO_free_all

loc_416C4E:				; CODE XREF: _dsaparam_main+294j
		test	esi, esi
		jz	loc_416E6E
		mov	[esp+7Ch+var_7C], esi
		call	_DSA_free
		mov	eax, edi
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_416C70:				; CODE XREF: _dsaparam_main+2F5j
		dec	ebp
		jz	loc_416D50
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_str2fmt
		mov	[esp+7Ch+var_60], eax

loc_416C89:				; CODE XREF: _dsaparam_main+320j
					; _dsaparam_main+34Dj ...
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jle	loc_416A70

loc_416C95:				; CODE XREF: _dsaparam_main+B0j
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aInform_8 ;	"-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_416C70
		mov	edi, offset aOutform_7 ; "-outform"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_416CE0
		dec	ebp
		jz	loc_416D50
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_str2fmt
		mov	[esp+7Ch+var_5C], eax
		jmp	short loc_416C89
; ---------------------------------------------------------------------------
		align 10h

loc_416CE0:				; CODE XREF: _dsaparam_main+305j
		mov	edi, offset aIn_11 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_416D00
		dec	ebp
		jz	short loc_416D50
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_58], eax
		jmp	short loc_416C89
; ---------------------------------------------------------------------------
		align 10h

loc_416D00:				; CODE XREF: _dsaparam_main+33Ej
		mov	edi, offset aOut_13 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_416E80
		dec	ebp
		jz	short loc_416D50
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_54], eax
		jmp	loc_416C89
; ---------------------------------------------------------------------------

loc_416D26:				; CODE XREF: _dsaparam_main+8EBj
		mov	eax, [ebx]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aUnknownOpti_10 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	short loc_416D50
; ---------------------------------------------------------------------------
		align 10h

loc_416D50:				; CODE XREF: _dsaparam_main+2C1j
					; _dsaparam_main+308j ...
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aSOptionsBitsIn ; "%s [options] [bits]	<infile	>outfile\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aWhereOptions_8 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInformArgInp_7 ; " -inform arg   input format	- DER or PE"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOutformArgOu_6 ; " -outform arg  output format - DER or P"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInArgInputFi_7 ; " -in arg	   input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOutArgOutput_7 ; " -out arg	   output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aTextPrintAsTex ; " -text	   print as text\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aCOutputCCode_1 ; " -C		   Output C code\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aNooutNoOutpu_1 ; " -noout	   no output\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aGenkeyGenerate ; " -genkey	   generate a DSA key\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aRandFilesToUse ; " -rand	   files to use	for random "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aEngineEUseEn_9 ; " -engine e	   use engine e, possibly a"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aNumberNumberOf ; " number	   number of bits to use fo"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf

loc_416E69:				; CODE XREF: _dsaparam_main+27j
		mov	edi, 1

loc_416E6E:				; CODE XREF: _dsaparam_main+2A0j
		mov	eax, edi
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_416E80:				; CODE XREF: _dsaparam_main+35Ej
		mov	edi, offset aEngine_11 ; "-engine"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_416EB0
		dec	ebp
		jz	loc_416D50
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_50], eax
		jmp	loc_416C89
; ---------------------------------------------------------------------------
		align 10h

loc_416EB0:				; CODE XREF: _dsaparam_main+4DEj
		mov	edi, offset aText_6 ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	short loc_416F20
		mov	edi, offset aC_1 ; "-C"
		mov	ecx, 3
		mov	esi, eax
		repe cmpsb
		jz	short loc_416F2F
		mov	edi, offset aGenkey ; "-genkey"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jz	loc_416F88
		mov	edi, offset aRand_3 ; "-rand"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	loc_416F9F
		dec	ebp
		jz	loc_416D50
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_30], eax
		mov	[esp+7Ch+var_44], 1
		jmp	loc_416C89
; ---------------------------------------------------------------------------
		align 10h

loc_416F20:				; CODE XREF: _dsaparam_main+50Ej
		mov	esi, ebx
		mov	[esp+7Ch+var_48], 1
		jmp	loc_416C89
; ---------------------------------------------------------------------------

loc_416F2F:				; CODE XREF: _dsaparam_main+51Ej
		mov	esi, ebx
		mov	[esp+7Ch+var_40], 1
		jmp	loc_416C89
; ---------------------------------------------------------------------------

loc_416F3E:				; CODE XREF: _dsaparam_main+Fj
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_4169C5
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], 10h
		mov	[esp+7Ch+var_78], 6Ah
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_4169C5
; ---------------------------------------------------------------------------

loc_416F88:				; CODE XREF: _dsaparam_main+52Ej
		mov	esi, ebx
		mov	[esp+7Ch+var_44], 1
		mov	[esp+7Ch+var_38], 1
		jmp	loc_416C89
; ---------------------------------------------------------------------------

loc_416F9F:				; CODE XREF: _dsaparam_main+542j
		mov	edi, offset aNoout_7 ; "-noout"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	loc_417282
		mov	esi, ebx
		mov	[esp+7Ch+var_34], 1
		jmp	loc_416C89
; ---------------------------------------------------------------------------

loc_416FC2:				; CODE XREF: _dsaparam_main+EDj
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	edi, 1
		xor	esi, esi
		jmp	loc_416C3A
; ---------------------------------------------------------------------------

loc_416FDB:				; CODE XREF: _dsaparam_main+12Dj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 6Ah
		mov	[esp+7Ch+var_7C], ebp
		call	_BIO_ctrl
		jmp	loc_416B0B
; ---------------------------------------------------------------------------

loc_417004:				; CODE XREF: _dsaparam_main+121j
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_perror
		mov	edi, 1
		xor	esi, esi
		jmp	loc_416C3A
; ---------------------------------------------------------------------------

loc_41701C:				; CODE XREF: _dsaparam_main+E5j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	edi, 1
		xor	esi, esi
		jmp	loc_416C42
; ---------------------------------------------------------------------------

loc_417035:				; CODE XREF: _dsaparam_main+254j
					; _dsaparam_main+C15j
		mov	ecx, [esp+7Ch+var_38]
		test	ecx, ecx
		jz	loc_417257
		mov	edx, [esp+7Ch+var_44]
		test	edx, edx
		jnz	short loc_417065
		mov	[esp+7Ch+var_74], 196h ; unsigned int
		mov	[esp+7Ch+var_78], offset aDsaparam_c ; "dsaparam.c"
		mov	[esp+7Ch+var_7C], offset aNeed_rand ; "need_rand"
		call	__assert
; ---------------------------------------------------------------------------

loc_417065:				; CODE XREF: _dsaparam_main+697j
		mov	[esp+7Ch+var_7C], esi
		call	_DSAparams_dup
		mov	edi, eax
		test	eax, eax
		jz	loc_417110
		mov	[esp+7Ch+var_7C], eax
		call	_DSA_generate_key
		test	eax, eax
		jz	loc_417633
		cmp	[esp+7Ch+var_5C], 1
		jz	loc_417652
		cmp	[esp+7Ch+var_5C], 3
		jz	loc_41721B
		mov	[esp+7Ch+var_78], offset aBadOutputFor_7 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_7C], edi
		call	_DSA_free
		mov	edi, 1
		jmp	loc_416C3A
; ---------------------------------------------------------------------------

loc_4170C4:				; CODE XREF: _dsaparam_main+7D6j
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], ebx
		call	_PEM_read_bio_DSAparams
		mov	esi, eax

loc_4170E6:				; CODE XREF: _dsaparam_main+C4Aj
		test	esi, esi
		jnz	loc_416BE6
		mov	[esp+7Ch+var_78], offset aUnableToLoad_2 ; "unable to load DSA parameters\n"

loc_4170F6:				; CODE XREF: _dsaparam_main+C23j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors

loc_417110:				; CODE XREF: _dsaparam_main+6C1j
					; _dsaparam_main+840j ...
		mov	edi, 1
		jmp	loc_416C3A
; ---------------------------------------------------------------------------

loc_41711A:				; CODE XREF: _dsaparam_main+17Ej
		mov	edi, [esp+7Ch+var_30]
		test	edi, edi
		setnz	dl
		xor	eax, eax
		mov	al, dl
		mov	[esp+7Ch+var_58], edx
		mov	[esp+7Ch+var_74], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_app_RAND_load_file
		mov	edx, [esp+7Ch+var_58]
		test	dl, dl
		jz	loc_416B34
		mov	[esp+7Ch+var_7C], edi
		call	_app_RAND_load_files
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aLdSemiRandom_1 ; "%ld	semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_416B34
; ---------------------------------------------------------------------------

loc_417176:				; CODE XREF: _dsaparam_main+18Aj
		cmp	[esp+7Ch+var_60], 1
		jz	loc_4175D8
		cmp	[esp+7Ch+var_60], 3
		jz	loc_4170C4
		mov	[esp+7Ch+var_78], offset aBadInputForm_5 ; "bad	input format specified\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	edi, 1
		xor	esi, esi
		jmp	loc_416C3A
; ---------------------------------------------------------------------------

loc_4171AD:				; CODE XREF: _dsaparam_main+1AFj
		mov	[esp+7Ch+var_74], 118h ; unsigned int
		mov	[esp+7Ch+var_78], offset aDsaparam_c ; "dsaparam.c"
		mov	[esp+7Ch+var_7C], offset aNeed_rand ; "need_rand"
		call	__assert
; ---------------------------------------------------------------------------
		jmp	loc_416B65
; ---------------------------------------------------------------------------

loc_4171CE:				; CODE XREF: _dsaparam_main+230j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	[esp+7Ch+var_78], offset aErrorDsaKeyGen ; "Error, DSA key generation failed\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_417110
; ---------------------------------------------------------------------------

loc_4171F5:				; CODE XREF: _dsaparam_main+F9j
		mov	eax, ds:__imp___iob
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 6Ah
		mov	[esp+7Ch+var_7C], ebx
		call	_BIO_ctrl
		jmp	loc_416AD7
; ---------------------------------------------------------------------------

loc_41721B:				; CODE XREF: _dsaparam_main+6E7j
		mov	[esp+7Ch+var_64], 0
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], ebp
		call	_PEM_write_bio_DSAPrivateKey

loc_41724F:				; CODE XREF: _dsaparam_main+CAEj
		mov	[esp+7Ch+var_7C], edi
		call	_DSA_free

loc_417257:				; CODE XREF: _dsaparam_main+68Bj
		mov	eax, [esp+7Ch+var_44]
		test	eax, eax
		jnz	short loc_417266
		xor	edi, edi
		jmp	loc_416C3A
; ---------------------------------------------------------------------------

loc_417266:				; CODE XREF: _dsaparam_main+8ADj
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_app_RAND_write_file
		xor	edi, edi
		jmp	loc_416C3A
; ---------------------------------------------------------------------------

loc_417282:				; CODE XREF: _dsaparam_main+5FDj
		lea	edx, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], offset aD_3 ;	"%d"
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_sscanf
		dec	eax
		jnz	loc_416D26
		mov	eax, [esp+7Ch+var_2C]
		mov	[esp+7Ch+var_3C], eax
		mov	esi, ebx
		mov	[esp+7Ch+var_44], 1
		jmp	loc_416C89
; ---------------------------------------------------------------------------

loc_4172B8:				; CODE XREF: _dsaparam_main+248j
		mov	eax, [esi+0Ch]
		mov	[esp+7Ch+var_7C], eax
		call	_BN_num_bits
		mov	edi, eax
		mov	eax, [esi+0Ch]
		mov	[esp+7Ch+var_7C], eax
		call	_BN_num_bits
		mov	[esp+7Ch+var_54], eax
		mov	[esp+7Ch+var_74], 155h
		mov	[esp+7Ch+var_78], offset aDsaparam_c ; "dsaparam.c"
		mov	eax, edi
		add	eax, 7
		js	loc_41762B

loc_4172EF:				; CODE XREF: _dsaparam_main+C7Ej
		sar	eax, 3
		add	eax, 14h
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_malloc
		mov	[esp+7Ch+var_60], eax
		test	eax, eax
		jz	loc_417615
		mov	edx, eax
		mov	eax, [esi+0Ch]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], eax
		call	_BN_bn2bin
		mov	[esp+7Ch+var_58], eax
		mov	edx, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], offset aStaticUnsign_4 ; "static unsigned char dsa%d_p[]={"
		call	_printf
		xor	edi, edi
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jle	loc_4173C3
		mov	eax, esi
		mov	esi, ebx
		mov	ebx, edi
		mov	edi, eax
		jmp	short loc_41736A
; ---------------------------------------------------------------------------

loc_41734A:				; CODE XREF: _dsaparam_main+9D6j
					; _dsaparam_main+9E4j
		mov	edx, [esp+7Ch+var_60]
		xor	eax, eax
		mov	al, [edx+ebx]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset a0x02x_4 ; "0x%02X,"
		call	_printf
		inc	ebx
		cmp	ebx, [esp+7Ch+var_58]
		jz	short loc_4173BF

loc_41736A:				; CODE XREF: _dsaparam_main+998j
		mov	eax, 2AAAAAABh
		imul	ebx
		mov	eax, edx
		sar	eax, 1
		mov	edx, ebx
		sar	edx, 1Fh
		sub	eax, edx
		lea	edx, [eax+eax]
		add	eax, edx
		shl	eax, 2
		cmp	ebx, eax
		jnz	short loc_41734A
		mov	[esp+7Ch+var_7C], offset asc_45FD25 ; "\n\t"
		call	_printf
		jmp	short loc_41734A
; ---------------------------------------------------------------------------

loc_417396:				; CODE XREF: _dsaparam_main+23Cj
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], ebp
		call	_DSAparams_print
		jmp	loc_416BF2
; ---------------------------------------------------------------------------

loc_4173A7:				; CODE XREF: _dsaparam_main+155j
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_perror
		mov	edi, 1
		xor	esi, esi
		jmp	loc_416C3A
; ---------------------------------------------------------------------------

loc_4173BF:				; CODE XREF: _dsaparam_main+9B8j
		mov	ebx, esi
		mov	esi, edi

loc_4173C3:				; CODE XREF: _dsaparam_main+98Aj
		mov	[esp+7Ch+var_7C], offset asc_45FCFD ; "\n\t};"
		call	_puts
		mov	eax, [esi+10h]
		mov	edx, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], eax
		call	_BN_bn2bin
		mov	[esp+7Ch+var_58], eax
		mov	edx, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], offset aStaticUnsign_5 ; "static unsigned char dsa%d_q[]={"
		call	_printf
		xor	edi, edi
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jle	short loc_417460
		mov	eax, esi
		mov	esi, ebx
		mov	ebx, edi
		mov	edi, eax
		jmp	short loc_417430
; ---------------------------------------------------------------------------
		align 10h

loc_417410:				; CODE XREF: _dsaparam_main+A9Cj
					; _dsaparam_main+AAAj
		mov	edx, [esp+7Ch+var_60]
		xor	eax, eax
		mov	al, [edx+ebx]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset a0x02x_4 ; "0x%02X,"
		call	_printf
		inc	ebx
		cmp	ebx, [esp+7Ch+var_58]
		jz	short loc_41745C

loc_417430:				; CODE XREF: _dsaparam_main+A5Cj
		mov	eax, 2AAAAAABh
		imul	ebx
		mov	eax, edx
		sar	eax, 1
		mov	edx, ebx
		sar	edx, 1Fh
		sub	eax, edx
		lea	edx, [eax+eax]
		add	eax, edx
		shl	eax, 2
		cmp	ebx, eax
		jnz	short loc_417410
		mov	[esp+7Ch+var_7C], offset asc_45FD25 ; "\n\t"
		call	_printf
		jmp	short loc_417410
; ---------------------------------------------------------------------------

loc_41745C:				; CODE XREF: _dsaparam_main+A7Ej
		mov	ebx, esi
		mov	esi, edi

loc_417460:				; CODE XREF: _dsaparam_main+A52j
		mov	[esp+7Ch+var_7C], offset asc_45FCFD ; "\n\t};"
		call	_puts
		mov	eax, [esi+14h]
		mov	edx, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], eax
		call	_BN_bn2bin
		mov	[esp+7Ch+var_58], eax
		mov	edx, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_78], edx
		mov	[esp+7Ch+var_7C], offset aStaticUnsign_6 ; "static unsigned char dsa%d_g[]={"
		call	_printf
		xor	edi, edi
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jle	short loc_417500
		mov	eax, esi
		mov	esi, ebx
		mov	ebx, edi
		mov	edi, eax
		jmp	short loc_4174D0
; ---------------------------------------------------------------------------
		align 10h

loc_4174B0:				; CODE XREF: _dsaparam_main+B3Cj
					; _dsaparam_main+B4Aj
		mov	edx, [esp+7Ch+var_60]
		xor	eax, eax
		mov	al, [edx+ebx]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], offset a0x02x_4 ; "0x%02X,"
		call	_printf
		inc	ebx
		cmp	ebx, [esp+7Ch+var_58]
		jz	short loc_4174FC

loc_4174D0:				; CODE XREF: _dsaparam_main+AF9j
		mov	eax, 2AAAAAABh
		imul	ebx
		mov	eax, edx
		sar	eax, 1
		mov	edx, ebx
		sar	edx, 1Fh
		sub	eax, edx
		lea	edx, [eax+eax]
		add	eax, edx
		shl	eax, 2
		cmp	ebx, eax
		jnz	short loc_4174B0
		mov	[esp+7Ch+var_7C], offset asc_45FD25 ; "\n\t"
		call	_printf
		jmp	short loc_4174B0
; ---------------------------------------------------------------------------

loc_4174FC:				; CODE XREF: _dsaparam_main+B1Ej
		mov	ebx, esi
		mov	esi, edi

loc_417500:				; CODE XREF: _dsaparam_main+AEFj
		mov	[esp+7Ch+var_7C], offset asc_45FD51 ; "\n\t};\n"
		call	_puts
		mov	edi, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], offset aDsaGet_dsaD ;	"DSA *get_dsa%d()\n\t{\n"
		call	_printf
		mov	[esp+7Ch+var_7C], offset aDsaDsa ; "\tDSA *dsa;\n"
		call	_puts
		mov	[esp+7Ch+var_7C], offset aIfDsaDsa_newNu ; "\tif ((dsa=DSA_new()) == NULL) return(N"...
		call	_puts
		mov	[esp+7Ch+var_74], edi
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], offset aDsaPBn_bin2bnD ; "\tdsa->p=BN_bin2bn(dsa%d_p,sizeof(dsa%d"...
		call	_printf
		mov	[esp+7Ch+var_74], edi
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], offset aDsaQBn_bin2bnD ; "\tdsa->q=BN_bin2bn(dsa%d_q,sizeof(dsa%d"...
		call	_printf
		mov	[esp+7Ch+var_74], edi
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], offset aDsaGBn_bin2bnD ; "\tdsa->g=BN_bin2bn(dsa%d_g,sizeof(dsa%d"...
		call	_printf
		mov	[esp+7Ch+var_7C], offset aIfDsaPNullDsaQ ; "\tif ((dsa->p == NULL) || (dsa->q == NU"...
		call	_puts
		mov	[esp+7Ch+var_7C], offset aDsa_freeDsaRet ; "\t\t{ DSA_free(dsa); return(NULL); }"
		call	_puts
		mov	[esp+7Ch+var_7C], offset aReturnDsa ; "\treturn(dsa);\n\t}"
		call	_puts
		jmp	loc_416BFE
; ---------------------------------------------------------------------------

loc_41759D:				; CODE XREF: _dsaparam_main+1BEj
		mov	[esp+7Ch+var_78], offset aErrorAllocatin ; "Error allocating DSA object\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_417110
; ---------------------------------------------------------------------------

loc_4175B7:				; CODE XREF: _dsaparam_main+26Aj
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], ebp
		call	_PEM_write_bio_DSAparams

loc_4175C3:				; CODE XREF: _dsaparam_main+C63j
		test	eax, eax
		jnz	loc_417035
		mov	[esp+7Ch+var_78], offset aUnableToWrit_4 ; "unable to write DSA	parameters\n"
		jmp	loc_4170F6
; ---------------------------------------------------------------------------

loc_4175D8:				; CODE XREF: _dsaparam_main+7CBj
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], offset _d2i_DSAparams
		mov	[esp+7Ch+var_7C], offset _DSA_new
		call	_ASN1_d2i_bio
		mov	esi, eax
		jmp	loc_4170E6
; ---------------------------------------------------------------------------

loc_4175FF:				; CODE XREF: _dsaparam_main+25Fj
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], offset _i2d_DSAparams
		call	_ASN1_i2d_bio
		jmp	short loc_4175C3
; ---------------------------------------------------------------------------

loc_417615:				; CODE XREF: _dsaparam_main+953j
		mov	[esp+7Ch+var_7C], offset aOpenssl_mall_2 ; "OPENSSL_malloc"
		call	_perror
		mov	edi, 1
		jmp	loc_416C3A
; ---------------------------------------------------------------------------

loc_41762B:				; CODE XREF: _dsaparam_main+939j
		lea	eax, [edi+0Eh]
		jmp	loc_4172EF
; ---------------------------------------------------------------------------

loc_417633:				; CODE XREF: _dsaparam_main+6D1j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	[esp+7Ch+var_7C], edi
		call	_DSA_free
		mov	edi, 1
		jmp	loc_416C3A
; ---------------------------------------------------------------------------

loc_417652:				; CODE XREF: _dsaparam_main+6DCj
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], ebp
		call	_i2d_DSAPrivateKey_bio
		jmp	loc_41724F
_dsaparam_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _ec_main
_ec_main	proc near		; DATA XREF: .data:004550E8o

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	[esp+9Ch+var_24], 0
		mov	[esp+9Ch+var_20], 0
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_417D40

loc_417698:				; CODE XREF: _ec_main+6E4j
					; _ec_main+715j
		mov	[esp+9Ch+var_98], 0
		mov	[esp+9Ch+var_9C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_417BE1
		mov	eax, [esp+9Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+9Ch+var_60], eax
		mov	eax, [esp+9Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+9Ch+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+9Ch+var_38], 0
		mov	[esp+9Ch+var_3C], 1
		mov	[esp+9Ch+var_48], 0
		mov	[esp+9Ch+var_4C], 4
		mov	[esp+9Ch+var_5C], 0
		mov	[esp+9Ch+var_64], 0
		mov	[esp+9Ch+var_58], 0
		mov	[esp+9Ch+var_68], 0
		mov	[esp+9Ch+var_6C], 0
		mov	[esp+9Ch+var_40], 0
		mov	[esp+9Ch+var_44], 0
		mov	[esp+9Ch+var_54], 0
		mov	[esp+9Ch+var_50], 0
		mov	[esp+9Ch+var_30], 0
		mov	[esp+9Ch+var_70], 3
		mov	[esp+9Ch+var_74], 3
		mov	[esp+9Ch+var_34], 0
		test	ebp, ebp
		jg	loc_41795D
		jmp	short loc_417770
; ---------------------------------------------------------------------------
		align 10h

loc_417770:				; CODE XREF: _ec_main+F1j
					; _ec_main+2E7j
		call	_ERR_load_crypto_strings
		mov	[esp+9Ch+var_94], 0
		mov	eax, [esp+9Ch+var_58]
		mov	[esp+9Ch+var_98], eax
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_setup_engine
		lea	eax, [esp+9Ch+var_20]
		mov	[esp+9Ch+var_8C], eax ;	int
		lea	eax, [esp+9Ch+var_24]
		mov	[esp+9Ch+var_90], eax ;	int
		mov	eax, [esp+9Ch+var_5C]
		mov	[esp+9Ch+var_94], eax ;	char *
		mov	eax, [esp+9Ch+var_64]
		mov	[esp+9Ch+var_98], eax ;	char *
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax ;	int
		call	_app_passwd
		test	eax, eax
		jz	loc_417D99
		call	_BIO_s_file
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_new
		mov	edi, eax
		call	_BIO_s_file
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_new
		mov	esi, eax
		test	edi, edi
		jz	loc_4180A4
		test	eax, eax
		jz	loc_417F4F
		mov	ebp, [esp+9Ch+var_6C]
		test	ebp, ebp
		jz	loc_418055
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], 3
		mov	[esp+9Ch+var_98], 6Ch
		mov	[esp+9Ch+var_9C], edi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_41803D

loc_417829:				; CODE XREF: _ec_main+A06j
		mov	[esp+9Ch+var_98], offset aReadEcKey ; "read EC key\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		cmp	[esp+9Ch+var_74], 1
		jz	loc_417ECC
		cmp	[esp+9Ch+var_74], 3
		jnz	loc_417EAB
		mov	ecx, [esp+9Ch+var_54]
		test	ecx, ecx
		jz	loc_417F68
		mov	[esp+9Ch+var_90], 0
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], 0
		mov	[esp+9Ch+var_9C], edi
		call	_PEM_read_bio_EC_PUBKEY
		mov	ebx, eax

loc_417882:				; CODE XREF: _ec_main+87Aj
					; _ec_main+91Aj ...
		test	ebx, ebx
		jz	loc_4180D3
		mov	edx, [esp+9Ch+var_68]
		test	edx, edx
		jz	loc_41807B
		mov	eax, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], 5
		mov	[esp+9Ch+var_98], 6Ch
		mov	[esp+9Ch+var_9C], esi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_4180BD

loc_4178BE:				; CODE XREF: _ec_main+A2Fj
		mov	[esp+9Ch+var_9C], ebx
		call	_EC_KEY_get0_group
		mov	ebp, eax
		mov	eax, [esp+9Ch+var_48]
		test	eax, eax
		jnz	loc_417FF8

loc_4178D4:				; CODE XREF: _ec_main+998j
		mov	eax, [esp+9Ch+var_38]
		test	eax, eax
		jnz	loc_417FE3

loc_4178E0:				; CODE XREF: _ec_main+983j
		mov	eax, [esp+9Ch+var_30]
		test	eax, eax
		jnz	loc_417F8F

loc_4178EC:				; CODE XREF: _ec_main+935j
		mov	eax, [esp+9Ch+var_50]
		test	eax, eax
		jz	loc_417DC2

loc_4178F8:				; CODE XREF: _ec_main+7ABj
		xor	ebp, ebp

loc_4178FA:				; CODE XREF: _ec_main+7D8j
					; _ec_main+857j ...
		mov	[esp+9Ch+var_9C], edi
		call	_BIO_free

loc_417902:				; CODE XREF: _ec_main+A48j
		test	esi, esi
		jz	short loc_41790E
		mov	[esp+9Ch+var_9C], esi
		call	_BIO_free_all

loc_41790E:				; CODE XREF: _ec_main+294j
		test	ebx, ebx
		jz	loc_417BE6
		mov	[esp+9Ch+var_9C], ebx
		call	_EC_KEY_free
		jmp	loc_417BE6
; ---------------------------------------------------------------------------
		align 10h

loc_417930:				; CODE XREF: _ec_main+2FDj
		dec	ebp
		jz	loc_417A20
		lea	edx, [ebx+4]
		mov	[esp+9Ch+var_78], edx
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_9C], eax ;	char *
		call	_str2fmt
		mov	[esp+9Ch+var_74], eax
		mov	edx, [esp+9Ch+var_78]

loc_417951:				; CODE XREF: _ec_main+330j
					; _ec_main+35Dj ...
		dec	ebp
		lea	ebx, [edx+4]
		test	ebp, ebp
		jle	loc_417770

loc_41795D:				; CODE XREF: _ec_main+EBj
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aInform_9 ;	"-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_417930
		mov	edi, offset aOutform_8 ; "-outform"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_4179B0
		dec	ebp
		jz	loc_417A20
		lea	edx, [ebx+4]
		mov	[esp+9Ch+var_78], edx
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_9C], eax ;	char *
		call	_str2fmt
		mov	[esp+9Ch+var_70], eax
		mov	edx, [esp+9Ch+var_78]
		jmp	short loc_417951
; ---------------------------------------------------------------------------
		align 10h

loc_4179B0:				; CODE XREF: _ec_main+30Dj
		mov	edi, offset aIn_12 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4179D0
		dec	ebp
		jz	short loc_417A20
		lea	edx, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_6C], eax
		jmp	short loc_417951
; ---------------------------------------------------------------------------
		align 10h

loc_4179D0:				; CODE XREF: _ec_main+34Ej
		mov	edi, offset aOut_14 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_417C20
		dec	ebp
		jz	short loc_417A20
		lea	edx, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_68], eax
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_4179F6:				; CODE XREF: _ec_main+AF3j
		mov	eax, [ebx]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aUnknownOpti_11 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		jmp	short loc_417A20
; ---------------------------------------------------------------------------
		align 10h

loc_417A20:				; CODE XREF: _ec_main+2C1j
					; _ec_main+310j ...
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aSOptionsInfi_6 ; "%s [options] <infile >outfile\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aWhereOptions_9 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aInformArgInp_8 ; " -inform arg     input format - DER	or "...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aOutformArgOu_7 ; " -outform arg    output format - DER or"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aInArgInputFi_8 ; " -in arg	     input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aPassinArgInp_1 ; " -passin arg     input file	pass phrase"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aOutArgOutput_8 ; " -out arg	     output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aPassoutArgOu_1 ; " -passout arg    output file pass phras"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aEngineEUseE_10 ; " -engine e	     use engine	e, possibly"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aDesEncryptPe_1 ; " -des	     encrypt PEM output, in"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aTextPrintThe_1 ; " -text	     print the key\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aNooutDonTPri_1 ; " -noout	     don't print key out\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aParam_outPrint ; " -param_out	     print the elliptic	cur"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aConv_formArgSp ; " -conv_form	arg  specifies the point co"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aPossibleValues ; "		     possible values: compr"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aUncompressedDe ; "				      uncom"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aHybrid ; "				       hybr"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aParam_encArgSp ; " -param_enc	arg  specifies the way the "...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aInTheAsn1DerEn ; "		     in	the asn1 der encodi"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aPossibleValu_0 ; "		     possible values: named"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aExplicit ; "					expli"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf

loc_417BE1:				; CODE XREF: _ec_main+3Aj
					; _ec_main+73Ej
		mov	ebp, 1

loc_417BE6:				; CODE XREF: _ec_main+2A0j
					; _ec_main+2AEj
		mov	eax, [esp+9Ch+var_24]
		test	eax, eax
		jz	short loc_417BF6
		mov	[esp+9Ch+var_9C], eax
		call	_CRYPTO_free

loc_417BF6:				; CODE XREF: _ec_main+57Cj
		mov	eax, [esp+9Ch+var_20]
		test	eax, eax
		jz	short loc_417C06
		mov	[esp+9Ch+var_9C], eax
		call	_CRYPTO_free

loc_417C06:				; CODE XREF: _ec_main+58Cj
		mov	eax, ebp
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_417C20:				; CODE XREF: _ec_main+36Ej
		mov	edi, offset aPassin_5 ;	"-passin"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_417C50
		dec	ebp
		jz	loc_417A20
		lea	edx, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_64], eax
		jmp	loc_417951
; ---------------------------------------------------------------------------
		align 10h

loc_417C50:				; CODE XREF: _ec_main+5BEj
		mov	edi, offset aPassout_2 ; "-passout"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jz	short loc_417C90
		mov	edi, offset aEngine_12 ; "-engine"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_417CA6
		dec	ebp
		jz	loc_417A20
		lea	edx, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_58], eax
		jmp	loc_417951
; ---------------------------------------------------------------------------
		align 10h

loc_417C90:				; CODE XREF: _ec_main+5EEj
		dec	ebp
		jz	loc_417A20
		lea	edx, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_5C], eax
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_417CA6:				; CODE XREF: _ec_main+5FEj
		mov	edi, offset aNoout_8 ; "-noout"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_417D8A
		mov	edi, offset aText_7 ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_417DB3
		mov	edi, offset aConv_form ; "-conv_form"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jnz	loc_417E4D
		dec	ebp
		jz	loc_417A20
		lea	edx, [ebx+4]
		mov	eax, [ebx+4]
		mov	edi, offset aCompressed	; "compressed"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jz	loc_417EEF
		mov	edi, offset aUncompressed ; "uncompressed"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jz	loc_417FCE
		mov	edi, offset aHybrid_0 ;	"hybrid"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	loc_417A20
		mov	[esp+9Ch+var_48], 1
		mov	[esp+9Ch+var_4C], 6
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_417D40:				; CODE XREF: _ec_main+22j
		call	_BIO_s_file
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_417698
		mov	edi, ds:__imp___iob
		lea	edx, [edi+40h]
		mov	[esp+9Ch+var_90], edx
		mov	[esp+9Ch+var_94], 10h
		mov	[esp+9Ch+var_98], 6Ah
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_417698
; ---------------------------------------------------------------------------

loc_417D8A:				; CODE XREF: _ec_main+644j
		mov	edx, ebx
		mov	[esp+9Ch+var_50], 1
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_417D99:				; CODE XREF: _ec_main+151j
		mov	[esp+9Ch+var_98], offset aErrorGetting_7 ; "Error getting passwords\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		jmp	loc_417BE1
; ---------------------------------------------------------------------------

loc_417DB3:				; CODE XREF: _ec_main+658j
		mov	edx, ebx
		mov	[esp+9Ch+var_30], 1
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_417DC2:				; CODE XREF: _ec_main+282j
		mov	[esp+9Ch+var_98], offset aWritingEcKey ; "writing EC key\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		cmp	[esp+9Ch+var_70], 1
		jz	loc_41810E
		cmp	[esp+9Ch+var_70], 3
		jnz	loc_4180EF
		mov	ecx, [esp+9Ch+var_40]
		test	ecx, ecx
		jnz	loc_418170
		mov	edx, [esp+9Ch+var_54]
		test	edx, edx
		jnz	short loc_417E0D
		mov	eax, [esp+9Ch+var_44]
		test	eax, eax
		jz	loc_418181

loc_417E0D:				; CODE XREF: _ec_main+78Fj
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+var_9C], esi
		call	_PEM_write_bio_EC_PUBKEY

loc_417E19:				; CODE XREF: _ec_main+AC6j
					; _ec_main+ADFj ...
		test	eax, eax
		jnz	loc_4178F8
		mov	[esp+9Ch+var_98], offset aUnableToWrit_5 ; "unable to write private key\n"

loc_417E29:				; CODE XREF: _ec_main+A6Bj
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_ERR_print_errors
		mov	ebp, 1
		jmp	loc_4178FA
; ---------------------------------------------------------------------------

loc_417E4D:				; CODE XREF: _ec_main+66Cj
		mov	edi, offset aParam_enc ; "-param_enc"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jnz	loc_417F04
		dec	ebp
		jz	loc_417A20
		lea	edx, [ebx+4]
		mov	eax, [ebx+4]
		mov	edi, offset aNamed_curve ; "named_curve"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jz	loc_418028
		mov	edi, offset aExplicit_0	; "explicit"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_417A20
		mov	[esp+9Ch+var_38], 1
		mov	[esp+9Ch+var_3C], 0
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_417EAB:				; CODE XREF: _ec_main+1DEj
		mov	[esp+9Ch+var_98], offset aBadInputForm_6 ; "bad	input format specified for key\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		xor	ebx, ebx
		mov	ebp, 1
		jmp	loc_4178FA
; ---------------------------------------------------------------------------

loc_417ECC:				; CODE XREF: _ec_main+1D3j
		mov	ebx, [esp+9Ch+var_54]
		test	ebx, ebx
		mov	[esp+9Ch+var_98], 0
		mov	[esp+9Ch+var_9C], edi
		jz	loc_41801C
		call	_d2i_EC_PUBKEY_bio
		mov	ebx, eax
		jmp	loc_417882
; ---------------------------------------------------------------------------

loc_417EEF:				; CODE XREF: _ec_main+68Dj
		mov	[esp+9Ch+var_48], 1
		mov	[esp+9Ch+var_4C], 2
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_417F04:				; CODE XREF: _ec_main+7EBj
		mov	edi, offset aParam_out ; "-param_out"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jz	loc_41800D
		mov	edi, offset aPubin_2 ; "-pubin"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_4180E0
		mov	edi, offset aPubout_1 ;	"-pubout"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_418154
		mov	edx, ebx
		mov	[esp+9Ch+var_44], 1
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_417F4F:				; CODE XREF: _ec_main+17Fj
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		mov	ebp, 1
		jmp	loc_4178FA
; ---------------------------------------------------------------------------

loc_417F68:				; CODE XREF: _ec_main+1EAj
		mov	eax, [esp+9Ch+var_24]
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], 0
		mov	[esp+9Ch+var_9C], edi
		call	_PEM_read_bio_ECPrivateKey
		mov	ebx, eax
		jmp	loc_417882
; ---------------------------------------------------------------------------

loc_417F8F:				; CODE XREF: _ec_main+276j
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+var_9C], esi
		call	_EC_KEY_print
		test	eax, eax
		jnz	loc_4178EC
		mov	eax, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_9C], eax ;	char *
		call	_perror
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_ERR_print_errors
		mov	ebp, 1
		jmp	loc_4178FA
; ---------------------------------------------------------------------------

loc_417FCE:				; CODE XREF: _ec_main+6A1j
		mov	[esp+9Ch+var_48], 1
		mov	[esp+9Ch+var_4C], 4
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_417FE3:				; CODE XREF: _ec_main+26Aj
		mov	eax, [esp+9Ch+var_3C]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebx
		call	_EC_KEY_set_asn1_flag
		jmp	loc_4178E0
; ---------------------------------------------------------------------------

loc_417FF8:				; CODE XREF: _ec_main+25Ej
		mov	eax, [esp+9Ch+var_4C]
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+var_9C], ebx
		call	_EC_KEY_set_conv_form
		jmp	loc_4178D4
; ---------------------------------------------------------------------------

loc_41800D:				; CODE XREF: _ec_main+8A2j
		mov	edx, ebx
		mov	[esp+9Ch+var_40], 1
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_41801C:				; CODE XREF: _ec_main+86Dj
		call	_d2i_ECPrivateKey_bio
		mov	ebx, eax
		jmp	loc_417882
; ---------------------------------------------------------------------------

loc_418028:				; CODE XREF: _ec_main+80Cj
		mov	[esp+9Ch+var_38], 1
		mov	[esp+9Ch+var_3C], 1
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_41803D:				; CODE XREF: _ec_main+1B3j
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_9C], eax ;	char *
		call	_perror
		xor	ebx, ebx
		mov	ebp, 1
		jmp	loc_4178FA
; ---------------------------------------------------------------------------

loc_418055:				; CODE XREF: _ec_main+18Bj
		mov	eax, ds:__imp___iob
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], 6Ah
		mov	[esp+9Ch+var_9C], edi
		call	_BIO_ctrl
		jmp	loc_417829
; ---------------------------------------------------------------------------

loc_41807B:				; CODE XREF: _ec_main+220j
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], 6Ah
		mov	[esp+9Ch+var_9C], esi
		call	_BIO_ctrl
		jmp	loc_4178BE
; ---------------------------------------------------------------------------

loc_4180A4:				; CODE XREF: _ec_main+177j
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		mov	ebp, 1
		jmp	loc_417902
; ---------------------------------------------------------------------------

loc_4180BD:				; CODE XREF: _ec_main+248j
		mov	eax, [esp+9Ch+var_68]
		mov	[esp+9Ch+var_9C], eax ;	char *
		call	_perror
		mov	ebp, 1
		jmp	loc_4178FA
; ---------------------------------------------------------------------------

loc_4180D3:				; CODE XREF: _ec_main+214j
		mov	[esp+9Ch+var_98], offset aUnableToLoad_3 ; "unable to load Key\n"
		jmp	loc_417E29
; ---------------------------------------------------------------------------

loc_4180E0:				; CODE XREF: _ec_main+8B6j
		mov	edx, ebx
		mov	[esp+9Ch+var_54], 1
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_4180EF:				; CODE XREF: _ec_main+777j
		mov	[esp+9Ch+var_98], offset aBadOutputFor_8 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		mov	ebp, 1
		jmp	loc_4178FA
; ---------------------------------------------------------------------------

loc_41810E:				; CODE XREF: _ec_main+76Cj
		mov	eax, [esp+9Ch+var_40]
		test	eax, eax
		jnz	short loc_41813B
		mov	eax, [esp+9Ch+var_54]
		test	eax, eax
		jnz	short loc_41812A
		mov	ebp, [esp+9Ch+var_44]
		test	ebp, ebp
		jz	loc_4181BA

loc_41812A:				; CODE XREF: _ec_main+AACj
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+var_9C], esi
		call	_i2d_EC_PUBKEY_bio
		jmp	loc_417E19
; ---------------------------------------------------------------------------

loc_41813B:				; CODE XREF: _ec_main+AA4j
		mov	[esp+9Ch+var_94], ebp
		mov	[esp+9Ch+var_98], esi
		mov	[esp+9Ch+var_9C], offset _i2d_ECPKParameters
		call	_ASN1_i2d_bio
		jmp	loc_417E19
; ---------------------------------------------------------------------------

loc_418154:				; CODE XREF: _ec_main+8CAj
		inc	eax
		mov	[esp+9Ch+var_9C], eax
		call	_EVP_get_cipherbyname
		mov	[esp+9Ch+var_34], eax
		test	eax, eax
		jz	loc_4179F6
		mov	edx, ebx
		jmp	loc_417951
; ---------------------------------------------------------------------------

loc_418170:				; CODE XREF: _ec_main+783j
		mov	[esp+9Ch+var_98], ebp
		mov	[esp+9Ch+var_9C], esi
		call	_PEM_write_bio_ECPKParameters
		jmp	loc_417E19
; ---------------------------------------------------------------------------

loc_418181:				; CODE XREF: _ec_main+797j
		mov	eax, [esp+9Ch+var_20]
		mov	[esp+9Ch+var_84], eax
		mov	[esp+9Ch+var_88], 0
		mov	[esp+9Ch+var_8C], 0
		mov	[esp+9Ch+var_90], 0
		mov	eax, [esp+9Ch+var_34]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+var_9C], esi
		call	_PEM_write_bio_ECPrivateKey
		jmp	loc_417E19
; ---------------------------------------------------------------------------

loc_4181BA:				; CODE XREF: _ec_main+AB4j
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+var_9C], esi
		call	_i2d_ECPrivateKey_bio
		jmp	loc_417E19
_ec_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _ecparam_main
_ecparam_main	proc near		; DATA XREF: .data:004550F4o

var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_41890E

loc_4181E5:				; CODE XREF: _ecparam_main+752j
					; _ecparam_main+783j
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_418630
		mov	eax, [esp+8Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+8Ch+var_5C], eax
		mov	eax, [esp+8Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+8Ch+arg_4]
		add	eax, 4
		mov	[esp+8Ch+var_34], 0
		mov	[esp+8Ch+var_54], 0
		mov	[esp+8Ch+var_20], 0
		mov	[esp+8Ch+var_68], 3
		mov	[esp+8Ch+var_6C], 3
		mov	[esp+8Ch+var_60], 0
		mov	[esp+8Ch+var_64], 0
		mov	[esp+8Ch+var_24], 0
		mov	[esp+8Ch+var_44], 0
		mov	[esp+8Ch+var_58], 0
		mov	[esp+8Ch+var_4C], 0
		mov	[esp+8Ch+var_28], 0
		mov	[esp+8Ch+var_38], 0
		mov	[esp+8Ch+var_2C], 0
		mov	[esp+8Ch+var_50], 0
		mov	[esp+8Ch+var_30], 0
		mov	[esp+8Ch+var_3C], 1
		mov	[esp+8Ch+var_40], 0
		mov	[esp+8Ch+var_48], 4
		test	ebp, ebp
		jg	loc_418565
		xchg	ax, ax

loc_4182C0:				; CODE XREF: _ecparam_main+38Fj
		call	_ERR_load_crypto_strings
		call	_BIO_s_file
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_new
		mov	ebp, eax
		call	_BIO_s_file
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_new
		mov	ebx, eax
		test	ebp, ebp
		jz	loc_418A2A
		test	eax, eax
		jz	loc_418A2A
		mov	eax, [esp+8Ch+var_64]
		test	eax, eax
		jz	loc_418BB8
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 3
		mov	[esp+8Ch+var_88], 6Ch
		mov	[esp+8Ch+var_8C], ebp
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_418A12

loc_418327:				; CODE XREF: _ecparam_main+A09j
		mov	edi, [esp+8Ch+var_60]
		test	edi, edi
		jz	loc_4189E9
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 5
		mov	[esp+8Ch+var_88], 6Ch
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_418C70

loc_41835B:				; CODE XREF: _ecparam_main+83Dj
		mov	[esp+8Ch+var_84], 0
		mov	eax, [esp+8Ch+var_34]
		mov	[esp+8Ch+var_88], eax
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_setup_engine
		mov	esi, [esp+8Ch+var_38]
		test	esi, esi
		jnz	loc_418A43
		mov	esi, [esp+8Ch+var_50]
		test	esi, esi
		jz	loc_418CB8
		mov	edi, offset aSecp192r1 ; "secp192r1"
		mov	ecx, 0Ah
		repe cmpsb
		jz	loc_418BDE
		mov	edi, offset aSecp256r1 ; "secp256r1"
		mov	ecx, 0Ah
		mov	esi, [esp+8Ch+var_50]
		repe cmpsb
		jnz	loc_418B7F
		mov	[esp+8Ch+var_88], offset aUsingCurveName ; "using curve	name prime256v1	instead	of "...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	eax, 19Fh

loc_4183D2:				; CODE XREF: _ecparam_main+9BDj
					; _ecparam_main+A28j
		mov	[esp+8Ch+var_8C], eax
		call	_EC_GROUP_new_by_curve_name
		mov	edi, eax
		test	eax, eax
		jz	loc_418DCC
		mov	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_set_asn1_flag
		mov	eax, [esp+8Ch+var_48]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_set_point_conversion_form

loc_418404:				; CODE XREF: _ecparam_main+DA4j
		mov	ecx, [esp+8Ch+var_40]
		test	ecx, ecx
		jnz	loc_418D87

loc_418410:				; CODE XREF: _ecparam_main+BC7j
		mov	edx, [esp+8Ch+var_30]
		test	edx, edx
		jnz	loc_418D72

loc_41841C:				; CODE XREF: _ecparam_main+BB2j
		mov	eax, [esp+8Ch+var_28]
		test	eax, eax
		jnz	loc_418D55

loc_418428:				; CODE XREF: _ecparam_main+B9Dj
		mov	eax, [esp+8Ch+var_58]
		test	eax, eax
		jnz	loc_418D2F

loc_418434:				; CODE XREF: _ecparam_main+B75j
		mov	eax, [esp+8Ch+var_4C]
		test	eax, eax
		jnz	loc_418EA0

loc_418440:				; CODE XREF: _ecparam_main+D7Bj
		mov	eax, [esp+8Ch+var_54]
		test	eax, eax
		jnz	loc_418E0B
		mov	[esp+8Ch+var_6C], 0
		mov	[esp+8Ch+var_60], 0
		mov	[esp+8Ch+var_64], 0
		mov	[esp+8Ch+var_58], 0
		mov	[esp+8Ch+var_50], 0
		mov	[esp+8Ch+var_54], 0
		mov	[esp+8Ch+var_5C], 0

loc_418484:				; CODE XREF: _ecparam_main+13CFj
		mov	eax, [esp+8Ch+var_20]
		test	eax, eax
		jnz	loc_418CEF
		cmp	[esp+8Ch+var_68], 1
		jz	loc_4195D7
		cmp	[esp+8Ch+var_68], 3
		jz	loc_418FD1
		mov	[esp+8Ch+var_88], offset aBadOutputFor_9 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	esi, 1

loc_4184C0:				; CODE XREF: _ecparam_main+B45j
					; _ecparam_main+D61j ...
		mov	eax, [esp+8Ch+var_5C]
		test	eax, eax
		jz	short loc_4184D4

loc_4184C8:				; CODE XREF: _ecparam_main+CCBj
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_8C], eax
		call	_BN_free

loc_4184D4:				; CODE XREF: _ecparam_main+2F6j
		mov	eax, [esp+8Ch+var_54]
		test	eax, eax
		jz	short loc_4184E4
		mov	[esp+8Ch+var_8C], eax
		call	_BN_free

loc_4184E4:				; CODE XREF: _ecparam_main+30Aj
		mov	eax, [esp+8Ch+var_50]
		test	eax, eax
		jz	short loc_4184F4
		mov	[esp+8Ch+var_8C], eax
		call	_BN_free

loc_4184F4:				; CODE XREF: _ecparam_main+31Aj
		mov	eax, [esp+8Ch+var_58]
		test	eax, eax
		jz	short loc_418504
		mov	[esp+8Ch+var_8C], eax
		call	_BN_free

loc_418504:				; CODE XREF: _ecparam_main+32Aj
		mov	eax, [esp+8Ch+var_64]
		test	eax, eax
		jz	short loc_418514
		mov	[esp+8Ch+var_8C], eax
		call	_BN_free

loc_418514:				; CODE XREF: _ecparam_main+33Aj
		mov	eax, [esp+8Ch+var_60]
		test	eax, eax
		jz	short loc_418524
		mov	[esp+8Ch+var_8C], eax
		call	_BN_free

loc_418524:				; CODE XREF: _ecparam_main+34Aj
		mov	eax, [esp+8Ch+var_6C]
		test	eax, eax
		jz	loc_41863B
		mov	[esp+8Ch+var_8C], eax
		call	_CRYPTO_free
		jmp	loc_41863B
; ---------------------------------------------------------------------------
		align 10h

loc_418540:				; CODE XREF: _ecparam_main+3A5j
		dec	ebp
		jz	loc_4186E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_str2fmt
		mov	[esp+8Ch+var_6C], eax

loc_418559:				; CODE XREF: _ecparam_main+3D0j
					; _ecparam_main+401j ...
		dec	ebp
		lea	eax, [ebx+4]
		test	ebp, ebp
		jle	loc_4182C0

loc_418565:				; CODE XREF: _ecparam_main+E8j
		mov	edx, [eax]
		mov	esi, edx
		mov	edi, offset aInform_10 ; "-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_418540
		mov	edi, offset aOutform_9 ; "-outform"
		mov	esi, edx
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_4185B0
		dec	ebp
		jz	loc_4186E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_str2fmt
		mov	[esp+8Ch+var_68], eax
		jmp	short loc_418559
; ---------------------------------------------------------------------------
		align 10h

loc_4185B0:				; CODE XREF: _ecparam_main+3B5j
		mov	edi, offset aIn_13 ; "-in"
		mov	ecx, 4
		mov	esi, edx
		repe cmpsb
		jnz	short loc_4185E0
		dec	ebp
		jz	loc_4186E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+8Ch+var_64], eax
		jmp	short loc_418559
; ---------------------------------------------------------------------------
		align 10h

loc_4185E0:				; CODE XREF: _ecparam_main+3EEj
		mov	edi, offset aOut_15 ; "-out"
		mov	ecx, 5
		mov	esi, edx
		repe cmpsb
		jnz	short loc_418610
		dec	ebp
		jz	loc_4186E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+8Ch+var_60], eax
		jmp	loc_418559
; ---------------------------------------------------------------------------
		align 10h

loc_418610:				; CODE XREF: _ecparam_main+41Ej
		mov	edi, offset aText_8 ; "-text"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jnz	short loc_418670
		mov	ebx, eax
		mov	[esp+8Ch+var_58], 1
		jmp	loc_418559
; ---------------------------------------------------------------------------
		align 10h

loc_418630:				; CODE XREF: _ecparam_main+27j
		mov	esi, 1
		xor	ebx, ebx
		xor	ebp, ebp
		xor	edi, edi

loc_41863B:				; CODE XREF: _ecparam_main+35Aj
					; _ecparam_main+368j ...
		test	ebp, ebp
		jz	short loc_418647
		mov	[esp+8Ch+var_8C], ebp
		call	_BIO_free

loc_418647:				; CODE XREF: _ecparam_main+46Dj
		test	ebx, ebx
		jz	short loc_418653
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_free_all

loc_418653:				; CODE XREF: _ecparam_main+479j
		test	edi, edi
		jz	short loc_41865F
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_free

loc_41865F:				; CODE XREF: _ecparam_main+485j
		mov	eax, esi
		add	esp, 7Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_418670:				; CODE XREF: _ecparam_main+44Ej
		mov	edi, offset aC_2 ; "-C"
		mov	ecx, 3
		mov	esi, edx
		repe cmpsb
		jz	loc_4188F0
		mov	edi, offset aCheck_2 ; "-check"
		mov	ecx, 7
		mov	esi, edx
		repe cmpsb
		jz	loc_4188FF
		mov	edi, offset aName_0 ; "-name"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jnz	loc_418958
		dec	ebp
		jz	short loc_4186E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+8Ch+var_50], eax
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_4186BE:				; CODE XREF: _ecparam_main+F0Bj
		mov	[esp+8Ch+var_84], edx
		mov	[esp+8Ch+var_88], offset aUnknownOpti_12 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	esi, esi
		lea	edi, [edi+0]

loc_4186E0:				; CODE XREF: _ecparam_main+371j
					; _ecparam_main+3B8j ...
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aSOptionsInfi_7 ; "%s [options] <infile >outfile\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aWhereOption_10 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aInformArgInp_9 ; " -inform arg       input format - defau"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aOutformArgOu_8 ; " -outform arg      output format - defa"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aInArgInputFi_9 ; " -in  arg	       input file  - defaul"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aOutArgOutput_9 ; " -out arg	       output file - defaul"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aNooutDoNotPrin ; " -noout	       do not print the	ec "...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aTextPrintTheEc ; " -text	       print the ec paramet"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aCheckValidateT ; " -check	       validate	the ec para"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aCPrintACFuncti ; " -C		       print a 'C' function"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aNameArgUseTheE ; " -name arg	       use the ec parameter"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aList_curvesPri ; " -list_curves      prints a	list of	all"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aConv_formArg_0 ; " -conv_form	arg    specifies the point "...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aPossibleValu_1 ; "		       possible	values:	com"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aUncompressed_0 ; "					unc"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aHybrid_1 ; "					  hyb"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aParam_encArg_0 ; " -param_enc	arg    specifies the way th"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aInTheAsn1Der_0 ; "		       in the asn1 der enco"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aPossibleValu_2 ; "		       possible	values:	nam"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aExplicit_1 ; "				    exp"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aNo_seedIfExpli ; " -no_seed	       if 'explicit' parame"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aGenkeyGenera_0 ; " -genkey	       generate	ec key\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aRandFileFilesT ; " -rand file	       files to	use for	ran"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aEngineEUseE_11 ; " -engine e	       use engine e, possib"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	esi, 1
		xor	ebx, ebx
		xor	ebp, ebp
		xor	edi, edi
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_4188F0:				; CODE XREF: _ecparam_main+4AEj
		mov	ebx, eax
		mov	[esp+8Ch+var_54], 1
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_4188FF:				; CODE XREF: _ecparam_main+4C2j
		mov	ebx, eax
		mov	[esp+8Ch+var_4C], 1
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_41890E:				; CODE XREF: _ecparam_main+Fj
		call	_BIO_s_file
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_4181E5
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+8Ch+var_80], edx
		mov	[esp+8Ch+var_84], 10h
		mov	[esp+8Ch+var_88], 6Ah
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_4181E5
; ---------------------------------------------------------------------------

loc_418958:				; CODE XREF: _ecparam_main+4D6j
		mov	edi, offset aList_curves ; "-list_curves"
		mov	ecx, 0Dh
		mov	esi, edx
		repe cmpsb
		jz	short loc_4189DA
		mov	edi, offset aConv_form_0 ; "-conv_form"
		mov	ecx, 0Bh
		mov	esi, edx
		repe cmpsb
		jnz	loc_418B17
		dec	ebp
		jz	loc_4186E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	edi, offset aCompressed_0 ; "compressed"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jz	loc_418CA3
		mov	edi, offset aUncompressed_1 ; "uncompressed"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jz	loc_418D1A
		mov	edi, offset aHybrid_2 ;	"hybrid"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	loc_4186E0
		mov	[esp+8Ch+var_40], 1
		mov	[esp+8Ch+var_48], 6
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_4189DA:				; CODE XREF: _ecparam_main+796j
		mov	ebx, eax
		mov	[esp+8Ch+var_38], 1
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_4189E9:				; CODE XREF: _ecparam_main+15Dj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], 6Ah
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_ctrl
		jmp	loc_41835B
; ---------------------------------------------------------------------------

loc_418A12:				; CODE XREF: _ecparam_main+151j
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_perror
		mov	esi, 1
		xor	edi, edi
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_418A2A:				; CODE XREF: _ecparam_main+115j
					; _ecparam_main+11Dj
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_print_errors
		mov	esi, 1
		xor	edi, edi
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_418A43:				; CODE XREF: _ecparam_main+1AEj
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], 0
		call	_EC_get_builtin_curves
		mov	edi, eax
		mov	[esp+8Ch+var_6C], eax
		mov	[esp+8Ch+var_84], 145h
		mov	[esp+8Ch+var_88], offset aEcparam_c ; "ecparam.c"
		shl	eax, 3
		mov	[esp+8Ch+var_8C], eax
		call	_CRYPTO_malloc
		mov	edx, eax
		mov	[esp+8Ch+var_68], eax
		test	eax, eax
		jz	loc_418DC0
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], edx
		call	_EC_get_builtin_curves
		test	eax, eax
		jz	loc_418DF3
		test	edi, edi
		jz	loc_418C8E
		mov	esi, [esp+8Ch+var_68]
		xor	eax, eax
		mov	[esp+8Ch+var_64], ebp
		mov	ebp, esi
		mov	esi, ebx
		mov	ebx, eax
		jmp	short loc_418AFE
; ---------------------------------------------------------------------------
		align 10h

loc_418AC0:				; CODE XREF: _ecparam_main+93Ej
					; _ecparam_main+945j
		test	eax, eax
		jz	loc_418B75

loc_418AC8:				; CODE XREF: _ecparam_main+9AAj
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset a10s ;	"  %-10s: "
		mov	[esp+8Ch+var_8C], esi
		call	_BIO_printf
		mov	[esp+8Ch+var_84], edi
		mov	[esp+8Ch+var_88], offset aS_7 ;	"%s\n"
		mov	[esp+8Ch+var_8C], esi
		call	_BIO_printf
		inc	ebx
		add	ebp, 8
		cmp	ebx, [esp+8Ch+var_6C]
		jz	loc_418C88

loc_418AFE:				; CODE XREF: _ecparam_main+8E2j
		mov	edi, [ebp+4]
		mov	eax, [ebp+0]
		mov	[esp+8Ch+var_8C], eax
		call	_OBJ_nid2sn
		test	edi, edi
		jnz	short loc_418AC0
		mov	edi, offset aCurveDescripti ; "CURVE DESCRIPTION NOT AVAILABLE"
		jmp	short loc_418AC0
; ---------------------------------------------------------------------------

loc_418B17:				; CODE XREF: _ecparam_main+7A6j
		mov	edi, offset aParam_enc_0 ; "-param_enc"
		mov	ecx, 0Bh
		mov	esi, edx
		repe cmpsb
		jnz	loc_418BFD
		dec	ebp
		jz	loc_4186E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	edi, offset aNamed_curve_0 ; "named_curve"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jz	loc_418DAB
		mov	edi, offset aExplicit_2	; "explicit"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_4186E0
		mov	[esp+8Ch+var_30], 1
		mov	[esp+8Ch+var_3C], 0
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_418B75:				; CODE XREF: _ecparam_main+8F2j
		mov	eax, offset byte_4604E8
		jmp	loc_418AC8
; ---------------------------------------------------------------------------

loc_418B7F:				; CODE XREF: _ecparam_main+1E2j
		mov	edi, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_8C], edi
		call	_OBJ_sn2nid
		test	eax, eax
		jnz	loc_4183D2
		mov	[esp+8Ch+var_84], edi
		mov	[esp+8Ch+var_88], offset aUnknownCurveNa ; "unknown curve name (%s)\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	esi, 1
		xor	edi, edi
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_418BB8:				; CODE XREF: _ecparam_main+129j
		mov	eax, ds:__imp___iob
		mov	[esp+8Ch+var_80], eax
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], 6Ah
		mov	[esp+8Ch+var_8C], ebp
		call	_BIO_ctrl
		jmp	loc_418327
; ---------------------------------------------------------------------------

loc_418BDE:				; CODE XREF: _ecparam_main+1CCj
		mov	[esp+8Ch+var_88], offset aUsingCurveNa_0 ; "using curve	name prime192v1	instead	of "...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	eax, 199h
		jmp	loc_4183D2
; ---------------------------------------------------------------------------

loc_418BFD:				; CODE XREF: _ecparam_main+955j
		mov	edi, offset aNo_seed ; "-no_seed"
		mov	esi, edx
		mov	ecx, 9
		repe cmpsb
		jz	loc_418D9C
		mov	edi, offset aNoout_9 ; "-noout"
		mov	ecx, 7
		mov	esi, edx
		repe cmpsb
		jz	loc_418FAB
		mov	edi, offset aGenkey_0 ;	"-genkey"
		mov	esi, edx
		mov	ecx, 8
		repe cmpsb
		jz	loc_418FBA
		mov	edi, offset aRand_4 ; "-rand"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jnz	loc_4190CD
		dec	ebp
		jz	loc_4186E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+8Ch+var_2C], eax
		mov	[esp+8Ch+var_44], 1
		jmp	loc_418559
; ---------------------------------------------------------------------------
		align 10h

loc_418C70:				; CODE XREF: _ecparam_main+185j
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_8C], eax ;	char *
		call	_perror
		mov	esi, 1
		xor	edi, edi
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_418C88:				; CODE XREF: _ecparam_main+928j
		mov	ebp, [esp+8Ch+var_64]
		mov	ebx, esi

loc_418C8E:				; CODE XREF: _ecparam_main+8CCj
		mov	eax, [esp+8Ch+var_68]
		mov	[esp+8Ch+var_8C], eax
		call	_CRYPTO_free
		xor	esi, esi
		xor	edi, edi
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_418CA3:				; CODE XREF: _ecparam_main+7C7j
		mov	[esp+8Ch+var_40], 1
		mov	[esp+8Ch+var_48], 2
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_418CB8:				; CODE XREF: _ecparam_main+1BAj
		cmp	[esp+8Ch+var_6C], 1
		jz	loc_418F87
		cmp	[esp+8Ch+var_6C], 3
		jz	loc_418F50
		mov	[esp+8Ch+var_88], offset aBadInputForm_7 ; "bad	input format specified\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	esi, 1
		xor	edi, edi
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_418CEF:				; CODE XREF: _ecparam_main+2BAj
					; _ecparam_main+E0Fj
		mov	eax, [esp+8Ch+var_44]
		test	eax, eax
		jnz	loc_419071

loc_418CFB:				; CODE XREF: _ecparam_main+ED1j
					; _ecparam_main+EF8j
		mov	esi, [esp+8Ch+var_24]
		test	esi, esi
		jnz	loc_41903C

loc_418D07:				; CODE XREF: _ecparam_main+147Dj
		mov	edx, [esp+8Ch+var_44]
		test	edx, edx
		jnz	loc_419020
		xor	esi, esi
		jmp	loc_4184C0
; ---------------------------------------------------------------------------

loc_418D1A:				; CODE XREF: _ecparam_main+7DBj
		mov	[esp+8Ch+var_40], 1
		mov	[esp+8Ch+var_48], 4
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_418D2F:				; CODE XREF: _ecparam_main+25Ej
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], ebx
		call	_ECPKParameters_print
		test	eax, eax
		jnz	loc_418434

loc_418D4B:				; CODE XREF: _ecparam_main+D1Bj
		mov	esi, 1
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_418D55:				; CODE XREF: _ecparam_main+252j
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_set_seed
		jmp	loc_418428
; ---------------------------------------------------------------------------

loc_418D72:				; CODE XREF: _ecparam_main+246j
		mov	eax, [esp+8Ch+var_3C]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_set_asn1_flag
		jmp	loc_41841C
; ---------------------------------------------------------------------------

loc_418D87:				; CODE XREF: _ecparam_main+23Aj
		mov	eax, [esp+8Ch+var_48]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_set_point_conversion_form
		jmp	loc_418410
; ---------------------------------------------------------------------------

loc_418D9C:				; CODE XREF: _ecparam_main+A3Bj
		mov	ebx, eax
		mov	[esp+8Ch+var_28], 1
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_418DAB:				; CODE XREF: _ecparam_main+976j
		mov	[esp+8Ch+var_30], 1
		mov	[esp+8Ch+var_3C], 1
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_418DC0:				; CODE XREF: _ecparam_main+8B0j
		mov	esi, 1
		xor	edi, edi
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_418DCC:				; CODE XREF: _ecparam_main+20Ej
		mov	eax, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aUnableToCreate ; "unable to create curve (%s)\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	esi, 1
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_418DF3:				; CODE XREF: _ecparam_main+8C4j
		mov	eax, [esp+8Ch+var_68]
		mov	[esp+8Ch+var_8C], eax
		call	_CRYPTO_free
		mov	esi, 1
		xor	edi, edi
		jmp	loc_41863B
; ---------------------------------------------------------------------------

loc_418E0B:				; CODE XREF: _ecparam_main+276j
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_method_of
		mov	esi, eax
		call	_BN_new
		mov	[esp+8Ch+var_5C], eax
		test	eax, eax
		jz	loc_418EF0
		call	_BN_new
		mov	[esp+8Ch+var_54], eax
		test	eax, eax
		jz	loc_418EF0
		call	_BN_new
		mov	[esp+8Ch+var_50], eax
		test	eax, eax
		jz	loc_4195C2
		call	_BN_new
		mov	[esp+8Ch+var_58], eax
		test	eax, eax
		jz	loc_4195A4
		call	_BN_new
		mov	[esp+8Ch+var_64], eax
		test	eax, eax
		jz	loc_418F10
		call	_BN_new
		mov	[esp+8Ch+var_60], eax
		test	eax, eax
		jz	loc_418F10
		mov	[esp+8Ch+var_8C], esi
		call	_EC_METHOD_get_field_type
		cmp	eax, 196h
		jz	loc_41913B

loc_418E8E:				; CODE XREF: _ecparam_main+F95j
					; _ecparam_main+FA7j ...
		mov	[esp+8Ch+var_6C], 0
		mov	esi, 1
		jmp	loc_4184C8
; ---------------------------------------------------------------------------

loc_418EA0:				; CODE XREF: _ecparam_main+26Aj
		mov	[esp+8Ch+var_88], offset aCheckingEllipt ; "checking elliptic curve parameters:	"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_check
		test	eax, eax
		jnz	short loc_418F36
		mov	[esp+8Ch+var_88], offset aFailed ; "failed\n"

loc_418ED1:				; CODE XREF: _ecparam_main+DB2j
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_print_errors
		jmp	loc_418D4B
; ---------------------------------------------------------------------------

loc_418EF0:				; CODE XREF: _ecparam_main+C50j
					; _ecparam_main+C61j
		mov	[esp+8Ch+var_64], 0
		mov	[esp+8Ch+var_58], 0
		mov	[esp+8Ch+var_50], 0
		mov	[esp+8Ch+var_54], 0

loc_418F10:				; CODE XREF: _ecparam_main+C94j
					; _ecparam_main+CA5j ...
		mov	[esp+8Ch+var_8C], offset aOpenssl_mall_3 ; "OPENSSL_malloc"
		call	_perror
		mov	[esp+8Ch+var_6C], 0
		mov	[esp+8Ch+var_60], 0
		mov	esi, 1
		jmp	loc_4184C0
; ---------------------------------------------------------------------------

loc_418F36:				; CODE XREF: _ecparam_main+CF7j
		mov	[esp+8Ch+var_88], offset aOk_0 ; "ok\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		jmp	loc_418440
; ---------------------------------------------------------------------------

loc_418F50:				; CODE XREF: _ecparam_main+AF8j
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], 0
		mov	[esp+8Ch+var_8C], ebp
		call	_PEM_read_bio_ECPKParameters
		mov	edi, eax

loc_418F72:				; CODE XREF: _ecparam_main+DD9j
		test	edi, edi
		jnz	loc_418404
		mov	[esp+8Ch+var_88], offset aUnableToLoadEl ; "unable to load elliptic curve parameter"...
		jmp	loc_418ED1
; ---------------------------------------------------------------------------

loc_418F87:				; CODE XREF: _ecparam_main+AEDj
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+var_84], ebp
		mov	[esp+8Ch+var_88], offset _d2i_ECPKParameters
		mov	[esp+8Ch+var_8C], 0
		call	_ASN1_d2i_bio
		mov	edi, eax
		jmp	short loc_418F72
; ---------------------------------------------------------------------------

loc_418FAB:				; CODE XREF: _ecparam_main+A4Fj
		mov	ebx, eax
		mov	[esp+8Ch+var_20], 1
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_418FBA:				; CODE XREF: _ecparam_main+A63j
		mov	ebx, eax
		mov	[esp+8Ch+var_24], 1
		mov	[esp+8Ch+var_44], 1
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_418FD1:				; CODE XREF: _ecparam_main+2D0j
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], ebx
		call	_PEM_write_bio_ECPKParameters

loc_418FDD:				; CODE XREF: _ecparam_main+141Bj
		test	eax, eax
		jnz	loc_418CEF
		mov	[esp+8Ch+var_88], offset aUnableToWriteE ; "unable to write elliptic curve paramete"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_ERR_print_errors
		mov	esi, 1
		jmp	loc_4184C0
; ---------------------------------------------------------------------------
		jmp	short loc_419020
; ---------------------------------------------------------------------------
		align 10h

loc_419020:				; CODE XREF: _ecparam_main+B3Dj
					; _ecparam_main+E41j
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], 0
		call	_app_RAND_write_file
		xor	esi, esi
		jmp	loc_4184C0
; ---------------------------------------------------------------------------

loc_41903C:				; CODE XREF: _ecparam_main+B31j
		call	_EC_KEY_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_419067
		mov	ecx, [esp+8Ch+var_44]
		test	ecx, ecx
		jz	loc_4195F0

loc_419053:				; CODE XREF: _ecparam_main+143Cj
		mov	[esp+8Ch+var_88], edi
		mov	[esp+8Ch+var_8C], esi
		call	_EC_KEY_set_group
		test	eax, eax
		jnz	loc_4190F7

loc_419067:				; CODE XREF: _ecparam_main+E75j
					; _ecparam_main+F66j
		mov	esi, 1
		jmp	loc_4184C0
; ---------------------------------------------------------------------------

loc_419071:				; CODE XREF: _ecparam_main+B25j
		mov	esi, [esp+8Ch+var_2C]
		test	esi, esi
		setnz	dl
		xor	eax, eax
		mov	al, dl
		mov	[esp+8Ch+var_4C], edx
		mov	[esp+8Ch+var_84], eax
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], 0
		call	_app_RAND_load_file
		mov	edx, [esp+8Ch+var_4C]
		test	dl, dl
		jz	loc_418CFB
		mov	[esp+8Ch+var_8C], esi
		call	_app_RAND_load_files
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], offset aLdSemiRandom_2 ; "%ld	semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf
		jmp	loc_418CFB
; ---------------------------------------------------------------------------

loc_4190CD:				; CODE XREF: _ecparam_main+A77j
		mov	edi, offset aEngine_13 ; "-engine"
		mov	esi, edx
		mov	ecx, 8
		repe cmpsb
		jnz	loc_4186BE
		dec	ebp
		jz	loc_4186E0
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+8Ch+var_34], eax
		jmp	loc_418559
; ---------------------------------------------------------------------------

loc_4190F7:				; CODE XREF: _ecparam_main+E91j
		mov	[esp+8Ch+var_8C], esi
		call	_EC_KEY_generate_key
		test	eax, eax
		jz	short loc_41912E
		cmp	[esp+8Ch+var_68], 1
		jz	loc_419652
		cmp	[esp+8Ch+var_68], 3
		jz	loc_419611
		mov	[esp+8Ch+var_88], offset aBadOutputFor_9 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+8Ch+var_8C], eax
		call	_BIO_printf

loc_41912E:				; CODE XREF: _ecparam_main+F31j
		mov	[esp+8Ch+var_8C], esi
		call	_EC_KEY_free
		jmp	loc_419067
; ---------------------------------------------------------------------------

loc_41913B:				; CODE XREF: _ecparam_main+CB8j
		mov	[esp+8Ch+var_7C], 0
		mov	eax, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_80], eax
		mov	eax, [esp+8Ch+var_54]
		mov	[esp+8Ch+var_84], eax
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_get_curve_GFp
		test	eax, eax
		jz	loc_418E8E
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_get0_generator
		mov	esi, eax
		test	eax, eax
		jz	loc_418E8E
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_get_point_conversion_form
		mov	[esp+8Ch+var_7C], 0
		mov	edx, [esp+8Ch+var_58]
		mov	[esp+8Ch+var_80], edx
		mov	[esp+8Ch+var_84], eax
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], edi
		call	_EC_POINT_point2bn
		test	eax, eax
		jz	loc_418E8E
		mov	[esp+8Ch+var_84], 0
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_get_order
		test	eax, eax
		jz	loc_418E8E
		mov	[esp+8Ch+var_84], 0
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], edi
		call	_EC_GROUP_get_cofactor
		test	eax, eax
		jz	loc_418E8E
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax
		call	_BN_num_bits
		mov	esi, eax
		mov	eax, [esp+8Ch+var_5C]
		mov	[esp+8Ch+var_8C], eax
		call	_BN_num_bits
		mov	edx, eax
		add	edx, 7
		jns	short loc_419211
		lea	edx, [eax+0Eh]

loc_419211:				; CODE XREF: _ecparam_main+103Cj
		sar	edx, 3
		mov	[esp+8Ch+var_6C], edx
		mov	eax, [esp+8Ch+var_54]
		mov	[esp+8Ch+var_8C], eax
		call	_BN_num_bits
		mov	edx, eax
		add	edx, 7
		jns	short loc_41922E
		lea	edx, [eax+0Eh]

loc_41922E:				; CODE XREF: _ecparam_main+1059j
		sar	edx, 3
		cmp	edx, [esp+8Ch+var_6C]
		jnb	short loc_41923B
		mov	edx, [esp+8Ch+var_6C]

loc_41923B:				; CODE XREF: _ecparam_main+1065j
		mov	[esp+8Ch+var_6C], edx
		mov	eax, [esp+8Ch+var_50]
		mov	[esp+8Ch+var_8C], eax
		call	_BN_num_bits
		mov	ecx, eax
		add	ecx, 7
		mov	edx, [esp+8Ch+var_6C]
		jns	short loc_419259
		lea	ecx, [eax+0Eh]

loc_419259:				; CODE XREF: _ecparam_main+1084j
		sar	ecx, 3
		cmp	edx, ecx
		jnb	short loc_419262
		mov	edx, ecx

loc_419262:				; CODE XREF: _ecparam_main+108Ej
		mov	[esp+8Ch+var_6C], edx
		mov	eax, [esp+8Ch+var_58]
		mov	[esp+8Ch+var_8C], eax
		call	_BN_num_bits
		mov	ecx, eax
		add	ecx, 7
		mov	edx, [esp+8Ch+var_6C]
		jns	short loc_419280
		lea	ecx, [eax+0Eh]

loc_419280:				; CODE XREF: _ecparam_main+10ABj
		sar	ecx, 3
		cmp	edx, ecx
		jnb	short loc_419289
		mov	edx, ecx

loc_419289:				; CODE XREF: _ecparam_main+10B5j
		mov	[esp+8Ch+var_6C], edx
		mov	eax, [esp+8Ch+var_64]
		mov	[esp+8Ch+var_8C], eax
		call	_BN_num_bits
		mov	ecx, eax
		add	ecx, 7
		mov	edx, [esp+8Ch+var_6C]
		jns	short loc_4192A7
		lea	ecx, [eax+0Eh]

loc_4192A7:				; CODE XREF: _ecparam_main+10D2j
		sar	ecx, 3
		cmp	edx, ecx
		jnb	short loc_4192B0
		mov	edx, ecx

loc_4192B0:				; CODE XREF: _ecparam_main+10DCj
		mov	[esp+8Ch+var_6C], edx
		mov	eax, [esp+8Ch+var_60]
		mov	[esp+8Ch+var_8C], eax
		call	_BN_num_bits
		mov	ecx, eax
		add	ecx, 7
		mov	edx, [esp+8Ch+var_6C]
		jns	short loc_4192CE
		lea	ecx, [eax+0Eh]

loc_4192CE:				; CODE XREF: _ecparam_main+10F9j
		sar	ecx, 3
		mov	[esp+8Ch+var_84], 1DFh
		mov	[esp+8Ch+var_88], offset aEcparam_c ; "ecparam.c"
		mov	eax, edx
		cmp	edx, ecx
		jnb	short loc_4192E9
		mov	eax, ecx

loc_4192E9:				; CODE XREF: _ecparam_main+1115j
		mov	[esp+8Ch+var_8C], eax
		call	_CRYPTO_malloc
		mov	[esp+8Ch+var_6C], eax
		test	eax, eax
		jz	loc_4195B1
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		mov	ecx, offset aEc_p ; "ec_p"
		mov	edx, [esp+8Ch+var_5C]
		mov	eax, ebx
		call	_ecparam_print_var
		mov	eax, [esp+8Ch+var_6C]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		mov	ecx, offset aEc_a ; "ec_a"
		mov	edx, [esp+8Ch+var_54]
		mov	eax, ebx
		call	_ecparam_print_var
		mov	eax, [esp+8Ch+var_6C]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		mov	ecx, offset aEc_b ; "ec_b"
		mov	edx, [esp+8Ch+var_50]
		mov	eax, ebx
		call	_ecparam_print_var
		mov	eax, [esp+8Ch+var_6C]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		mov	ecx, offset aEc_gen ; "ec_gen"
		mov	edx, [esp+8Ch+var_58]
		mov	eax, ebx
		call	_ecparam_print_var
		mov	eax, [esp+8Ch+var_6C]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		mov	ecx, offset aEc_order ;	"ec_order"
		mov	edx, [esp+8Ch+var_64]
		mov	eax, ebx
		call	_ecparam_print_var
		mov	eax, [esp+8Ch+var_6C]
		mov	[esp+8Ch+var_88], eax
		mov	[esp+8Ch+var_8C], esi
		mov	ecx, offset aEc_cofactor ; "ec_cofactor"
		mov	edx, [esp+8Ch+var_60]
		mov	eax, ebx
		call	_ecparam_print_var
		mov	[esp+8Ch+var_88], offset asc_460C43 ; "\n\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_84], esi
		mov	[esp+8Ch+var_88], offset aEc_groupGet_ec ; "EC_GROUP *get_ec_group_%d(void)\n\t{\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIntOk0 ; "\tint ok=0;\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aEc_groupGroupN ; "\tEC_GROUP *group =	NULL;\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aEc_pointPointN ; "\tEC_POINT *point =	NULL;\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aBignumTmp_1Nul ; "\tBIGNUM   *tmp_1 =	NULL, *tmp_2 = NULL"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_80], esi
		mov	[esp+8Ch+var_84], esi
		mov	[esp+8Ch+var_88], offset aIfTmp_1Bn_bin2 ; "\tif ((tmp_1 = BN_bin2bn(ec_p_%d, sizeo"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_80], esi
		mov	[esp+8Ch+var_84], esi
		mov	[esp+8Ch+var_88], offset aIfTmp_2Bn_bin2 ; "\tif ((tmp_2 = BN_bin2bn(ec_a_%d, sizeo"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_80], esi
		mov	[esp+8Ch+var_84], esi
		mov	[esp+8Ch+var_88], offset aIfTmp_3Bn_bin2 ; "\tif ((tmp_3 = BN_bin2bn(ec_b_%d, sizeo"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIfGroupEc_grou ; "\tif ((group = EC_GROUP_new_curve_GFp(t"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aBuildGenerator ; "\t/* build generator */\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_80], esi
		mov	[esp+8Ch+var_84], esi
		mov	[esp+8Ch+var_88], offset aIfTmp_1Bn_bi_0 ; "\tif ((tmp_1 = BN_bin2bn(ec_gen_%d,	siz"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aPointEc_point_ ; "\tpoint = EC_POINT_bn2point(group, tmp_"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIfPointNullGot ; "\tif (point	== NULL)\n\t\tgoto err;\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_80], esi
		mov	[esp+8Ch+var_84], esi
		mov	[esp+8Ch+var_88], offset aIfTmp_2Bn_bi_0 ; "\tif ((tmp_2 = BN_bin2bn(ec_order_%d, s"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_80], esi
		mov	[esp+8Ch+var_84], esi
		mov	[esp+8Ch+var_88], offset aIfTmp_3Bn_bi_0 ; "\tif ((tmp_3 = BN_bin2bn(ec_cofactor_%d"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIfEc_group_set ; "\tif (!EC_GROUP_set_generator(group, po"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aOk1 ;	"\n\tok=1;\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aErr ;	"err:\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIfTmp_1Bn_free ; "\tif (tmp_1)\n\t\tBN_free(tmp_1);\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIfTmp_2Bn_free ; "\tif (tmp_2)\n\t\tBN_free(tmp_2);\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIfTmp_3Bn_free ; "\tif (tmp_3)\n\t\tBN_free(tmp_3);\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIfPointEc_poin ; "\tif (point)\n\t\tEC_POINT_free(point);"...
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aIfOk ; "\tif (!ok)\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset asc_461098 ; "\t\t{\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aEc_group_freeG ; "\t\tEC_GROUP_free(group);\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aGroupNull ; "\t\tgroup = NULL;\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset asc_4610C7 ; "\t\t}\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		mov	[esp+8Ch+var_88], offset aReturnGroup ;	"\treturn(group);\n\t}\n"
		mov	[esp+8Ch+var_8C], ebx
		call	_BIO_printf
		jmp	loc_418484
; ---------------------------------------------------------------------------

loc_4195A4:				; CODE XREF: _ecparam_main+C83j
		mov	[esp+8Ch+var_64], 0
		jmp	loc_418F10
; ---------------------------------------------------------------------------

loc_4195B1:				; CODE XREF: _ecparam_main+1127j
		mov	[esp+8Ch+var_8C], offset aOpenssl_mall_3 ; "OPENSSL_malloc"
		call	_perror
		jmp	loc_418E8E
; ---------------------------------------------------------------------------

loc_4195C2:				; CODE XREF: _ecparam_main+C72j
		mov	[esp+8Ch+var_64], 0
		mov	[esp+8Ch+var_58], 0
		jmp	loc_418F10
; ---------------------------------------------------------------------------

loc_4195D7:				; CODE XREF: _ecparam_main+2C5j
		mov	[esp+8Ch+var_84], edi
		mov	[esp+8Ch+var_88], ebx
		mov	[esp+8Ch+var_8C], offset _i2d_ECPKParameters
		call	_ASN1_i2d_bio
		jmp	loc_418FDD
; ---------------------------------------------------------------------------

loc_4195F0:				; CODE XREF: _ecparam_main+E7Dj
		mov	[esp+8Ch+var_84], 242h ; unsigned int
		mov	[esp+8Ch+var_88], offset aEcparam_c ; "ecparam.c"
		mov	[esp+8Ch+var_8C], offset aNeed_rand_0 ;	"need_rand"
		call	__assert
; ---------------------------------------------------------------------------
		jmp	loc_419053
; ---------------------------------------------------------------------------

loc_419611:				; CODE XREF: _ecparam_main+F43j
		mov	[esp+8Ch+var_74], 0
		mov	[esp+8Ch+var_78], 0
		mov	[esp+8Ch+var_7C], 0
		mov	[esp+8Ch+var_80], 0
		mov	[esp+8Ch+var_84], 0
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_PEM_write_bio_ECPrivateKey

loc_419645:				; CODE XREF: _ecparam_main+148Ej
		mov	[esp+8Ch+var_8C], esi
		call	_EC_KEY_free
		jmp	loc_418D07
; ---------------------------------------------------------------------------

loc_419652:				; CODE XREF: _ecparam_main+F38j
		mov	[esp+8Ch+var_88], esi
		mov	[esp+8Ch+var_8C], ebx
		call	_i2d_ECPrivateKey_bio
		jmp	short loc_419645
_ecparam_main	endp


; =============== S U B	R O U T	I N E =======================================


_callb		proc near		; DATA XREF: _x509_main+1CDo

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_CTX_get_error
		mov	esi, eax
		cmp	eax, 12h
		jz	loc_419720
		mov	eax, [esp+2Ch+arg_0]
		test	eax, eax
		jnz	short loc_419700
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_CTX_get_current_cert
		mov	[esp+2Ch+var_2C], eax
		call	_X509_get_subject_name
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], 0
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_print_name
		mov	[esp+2Ch+var_2C], esi
		call	_X509_verify_cert_error_string
		mov	edi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_CTX_get_error_depth
		mov	[esp+2Ch+var_1C], edi
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aErrorWithCerti ; "error with certificate - error %d at de"...
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, 1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_419700:				; CODE XREF: _callb+23j
		mov	[esp+2Ch+var_28], offset aErrorWithCer_0 ; "error with certificate to be certified "...
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_419720:				; CODE XREF: _callb+17j
		mov	eax, 1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
_callb		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _x509_main
_x509_main	proc near		; DATA XREF: .data:00455100o

var_2DC		= dword	ptr -2DCh
var_2D8		= dword	ptr -2D8h
var_2D4		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
var_2CC		= dword	ptr -2CCh
var_2C8		= dword	ptr -2C8h
var_2C4		= dword	ptr -2C4h
var_2B8		= dword	ptr -2B8h
var_2B4		= dword	ptr -2B4h
var_2B0		= dword	ptr -2B0h
var_2AC		= dword	ptr -2ACh
var_2A8		= dword	ptr -2A8h
var_2A4		= dword	ptr -2A4h
var_2A0		= dword	ptr -2A0h
var_29C		= dword	ptr -29Ch
var_298		= dword	ptr -298h
var_294		= dword	ptr -294h
var_290		= dword	ptr -290h
var_28C		= dword	ptr -28Ch
var_288		= dword	ptr -288h
var_284		= dword	ptr -284h
var_280		= dword	ptr -280h
var_27C		= dword	ptr -27Ch
var_278		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
var_268		= dword	ptr -268h
var_264		= dword	ptr -264h
var_260		= dword	ptr -260h
var_25C		= dword	ptr -25Ch
var_258		= dword	ptr -258h
var_254		= dword	ptr -254h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_204		= dword	ptr -204h
var_200		= dword	ptr -200h
var_1FC		= dword	ptr -1FCh
var_1F8		= dword	ptr -1F8h
var_1F4		= dword	ptr -1F4h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1E0		= dword	ptr -1E0h
var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C4		= dword	ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1A5		= byte ptr -1A5h
var_1A4		= dword	ptr -1A4h
var_19C		= dword	ptr -19Ch
var_11C		= byte ptr -11Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2CCh
		mov	[esp+2DCh+var_1CC], 0
		mov	[esp+2DCh+var_1C8], 0
		mov	[esp+2DCh+var_1C4], 0
		mov	ds:_reqfile, 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_419C70

loc_419772:				; CODE XREF: _x509_main+55Dj
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], eax
		call	_load_config
		test	eax, eax
		jnz	loc_4198D0
		mov	[esp+2DCh+var_298], 0
		mov	[esp+2DCh+var_2AC], 0
		mov	[esp+2DCh+var_28C], 0
		mov	[esp+2DCh+var_290], 0
		mov	[esp+2DCh+var_294], 0
		mov	[esp+2DCh+var_2B8], 0

loc_4197BA:				; CODE XREF: _x509_main+690j
		xor	esi, esi
		mov	[esp+2DCh+var_29C], 0
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	[esp+2DCh+var_2A4], 0
		mov	[esp+2DCh+var_2A8], 0
		xor	ebp, ebp
		mov	[esp+2DCh+var_2A0], 0
		mov	ebx, 1

loc_4197F3:				; CODE XREF: _x509_main+621j
					; _x509_main+63Cj
		call	_OBJ_cleanup
		mov	eax, [esp+2DCh+var_298]
		mov	[esp+2DCh+var_2DC], eax
		call	_NCONF_free
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_free_all
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_free_all
		mov	eax, [esp+2DCh+var_28C]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_STORE_free
		mov	eax, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_REQ_free
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_free
		mov	eax, [esp+2DCh+var_2A8]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_free
		mov	eax, [esp+2DCh+var_2B4]
		mov	[esp+2DCh+var_2DC], eax
		call	_EVP_PKEY_free
		mov	eax, [esp+2DCh+var_2B0]
		mov	[esp+2DCh+var_2DC], eax
		call	_EVP_PKEY_free
		mov	eax, [esp+2DCh+var_2A4]
		test	eax, eax
		jz	short loc_41986C
		mov	[esp+2DCh+var_2DC], eax
		call	_sk_free

loc_41986C:				; CODE XREF: _x509_main+132j
		mov	eax, [esp+2DCh+var_2AC]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_REQ_free
		mov	eax, [esp+2DCh+var_29C]
		mov	[esp+2DCh+var_2DC], eax
		call	_ASN1_INTEGER_free
		mov	[esp+2DCh+var_2D8], offset _ASN1_OBJECT_free
		mov	eax, [esp+2DCh+var_294]
		mov	[esp+2DCh+var_2DC], eax
		call	_sk_pop_free
		mov	[esp+2DCh+var_2D8], offset _ASN1_OBJECT_free
		mov	eax, [esp+2DCh+var_290]
		mov	[esp+2DCh+var_2DC], eax
		call	_sk_pop_free
		mov	eax, [esp+2DCh+var_1CC]
		test	eax, eax
		jz	short loc_4198BF
		mov	[esp+2DCh+var_2DC], eax
		call	_CRYPTO_free

loc_4198BF:				; CODE XREF: _x509_main+185j
		mov	eax, ebx
		add	esp, 2CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4198D0:				; CODE XREF: _x509_main+54j
		mov	[esp+2DCh+var_2D8], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_new_fp
		mov	[esp+2DCh+var_2B8], eax
		call	_X509_STORE_new
		mov	[esp+2DCh+var_28C], eax
		test	eax, eax
		jz	loc_419DA0
		mov	[esp+2DCh+var_2D8], offset _callb
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_STORE_set_verify_cb
		mov	eax, [esp+2DCh+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+2DCh+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+2DCh+var_2A8], 0
		mov	[esp+2DCh+var_1D4], 0
		mov	[esp+2DCh+var_1D8], 0
		mov	[esp+2DCh+var_288], 0
		mov	[esp+2DCh+var_2AC], 0
		mov	[esp+2DCh+var_1FC], 0
		mov	[esp+2DCh+var_270], 0
		mov	[esp+2DCh+var_200], 0
		mov	[esp+2DCh+var_210], 0
		mov	[esp+2DCh+var_214], 0
		mov	[esp+2DCh+var_218], 0
		mov	[esp+2DCh+var_21C], 0
		mov	[esp+2DCh+var_220], 1Eh
		mov	[esp+2DCh+var_250], 0
		mov	[esp+2DCh+var_224], 0
		mov	[esp+2DCh+var_1EC], 0
		mov	[esp+2DCh+var_228], 0
		mov	[esp+2DCh+var_1DC], 0
		mov	[esp+2DCh+var_1E0], 0
		mov	[esp+2DCh+var_204], 0
		mov	[esp+2DCh+var_254], 0
		mov	[esp+2DCh+var_258], 0
		mov	[esp+2DCh+var_1E4], 0
		mov	[esp+2DCh+var_274], 0
		mov	[esp+2DCh+var_25C], 0
		mov	[esp+2DCh+var_22C], 0
		mov	[esp+2DCh+var_230], 0
		mov	[esp+2DCh+var_234], 0
		mov	[esp+2DCh+var_238], 0
		mov	[esp+2DCh+var_23C], 0
		mov	[esp+2DCh+var_240], 0
		mov	[esp+2DCh+var_260], 0
		mov	[esp+2DCh+var_264], 0
		mov	[esp+2DCh+var_268], 0
		mov	[esp+2DCh+var_244], 0
		mov	[esp+2DCh+var_248], 0
		mov	[esp+2DCh+var_24C], 0
		mov	[esp+2DCh+var_26C], 0
		mov	[esp+2DCh+var_1E8], 0
		mov	[esp+2DCh+var_1F0], 0
		mov	[esp+2DCh+var_208], 0
		mov	[esp+2DCh+var_20C], 0
		mov	[esp+2DCh+var_1F4], 0
		mov	[esp+2DCh+var_1F8], 0
		mov	[esp+2DCh+var_2A0], 0
		mov	[esp+2DCh+var_278], 3
		mov	[esp+2DCh+var_2B0], 3
		mov	[esp+2DCh+var_280], 3
		mov	[esp+2DCh+var_284], 3
		mov	[esp+2DCh+var_2B4], 3
		mov	[esp+2DCh+var_290], 0
		mov	[esp+2DCh+var_294], 0
		mov	[esp+2DCh+var_27C], 0
		mov	[esp+2DCh+var_29C], 0
		mov	[esp+2DCh+var_2A4], 0
		test	ebp, ebp
		jg	short loc_419B75
		jmp	loc_419E20
; ---------------------------------------------------------------------------
		align 10h

loc_419B50:				; CODE XREF: _x509_main+455j
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2DC], eax	; char *
		call	_str2fmt
		mov	[esp+2DCh+var_2B4], eax

loc_419B69:				; CODE XREF: _x509_main+480j
					; _x509_main+4B9j ...
		dec	ebp
		lea	ebx, [esi+4]
		test	ebp, ebp
		jle	loc_419E20

loc_419B75:				; CODE XREF: _x509_main+414j
		mov	edx, [ebx]
		mov	ecx, 8
		mov	esi, edx
		mov	edi, offset aInform_11 ; "-inform"
		repe cmpsb
		jz	short loc_419B50
		mov	edi, offset aOutform_10	; "-outform"
		mov	ecx, 9
		mov	esi, edx
		repe cmpsb
		jnz	short loc_419BC0
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2DC], eax	; char *
		call	_str2fmt
		mov	[esp+2DCh+var_284], eax
		jmp	short loc_419B69
; ---------------------------------------------------------------------------
		align 10h

loc_419BC0:				; CODE XREF: _x509_main+465j
		mov	edi, offset aKeyform_3 ; "-keyform"
		mov	ecx, 9
		mov	esi, edx
		repe cmpsb
		jnz	short loc_419BF0
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2DC], eax	; char *
		call	_str2fmt
		mov	[esp+2DCh+var_280], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------
		align 10h

loc_419BF0:				; CODE XREF: _x509_main+49Ej
		mov	edi, offset aReq_0 ; "-req"
		mov	ecx, 5
		mov	esi, edx
		repe cmpsb
		jnz	short loc_419C20
		mov	ds:_reqfile, 1
		mov	esi, ebx
		mov	[esp+2DCh+var_288], 1
		jmp	loc_419B69
; ---------------------------------------------------------------------------
		align 10h

loc_419C20:				; CODE XREF: _x509_main+4CEj
		mov	edi, offset aCaform ; "-CAform"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jz	loc_419D80
		mov	edi, offset aCakeyform ; "-CAkeyform"
		mov	ecx, 0Bh
		mov	esi, edx
		repe cmpsb
		jnz	loc_419DD0
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2DC], eax	; char *
		call	_str2fmt
		mov	[esp+2DCh+var_278], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------
		align 10h

loc_419C70:				; CODE XREF: _x509_main+3Cj
		mov	[esp+2DCh+var_2D8], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_419772
; ---------------------------------------------------------------------------

loc_419C92:				; CODE XREF: _x509_main+6AEj
		mov	edi, offset aDays_1 ; "-days"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jnz	loc_419EA3
		dec	ebp
		jz	short loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2DC], eax	; char *
		call	_atoi
		mov	[esp+2DCh+var_220], eax
		test	eax, eax
		jnz	loc_419B69
		mov	[esp+2DCh+var_2D8], offset aBadNumberOfDay ; "bad number of days\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		nop
		lea	esi, [esi+0]

loc_419CE0:				; CODE XREF: _x509_main+421j
					; _x509_main+468j ...
		mov	eax, _x509_usage
		test	eax, eax
		jz	short loc_419D12
		mov	ebx, offset _x509_usage
		xchg	ax, ax

loc_419CF0:				; CODE XREF: _x509_main+5E0j
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aS_19 ; "%s"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		add	ebx, 4
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_419CF0

loc_419D12:				; CODE XREF: _x509_main+5B7j
					; _x509_main+76Ej ...
		mov	[esp+2DCh+var_298], 0

loc_419D1A:				; CODE XREF: _x509_main+83Ej
					; _x509_main+DADj ...
		mov	[esp+2DCh+var_2AC], 0
		xor	esi, esi
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	[esp+2DCh+var_2A8], 0
		xor	ebp, ebp
		mov	[esp+2DCh+var_2A0], 0
		mov	ebx, 1

loc_419D4B:				; CODE XREF: _x509_main+A91j
					; _x509_main+C88j ...
		mov	eax, [esp+2DCh+var_288]
		test	eax, eax
		jz	loc_4197F3
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], 0
		call	_app_RAND_write_file
		jmp	loc_4197F3
; ---------------------------------------------------------------------------
		jmp	short loc_419D80
; ---------------------------------------------------------------------------
		align 10h

loc_419D80:				; CODE XREF: _x509_main+4FEj
					; _x509_main+641j
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2DC], eax	; char *
		call	_str2fmt
		mov	[esp+2DCh+var_2B0], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------
		align 10h

loc_419DA0:				; CODE XREF: _x509_main+1C7j
		mov	[esp+2DCh+var_298], 0
		mov	[esp+2DCh+var_2AC], 0
		mov	[esp+2DCh+var_290], 0
		mov	[esp+2DCh+var_294], 0
		jmp	loc_4197BA
; ---------------------------------------------------------------------------
		align 10h

loc_419DD0:				; CODE XREF: _x509_main+512j
		mov	edi, offset aSigopt_2 ;	"-sigopt"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jnz	loc_419C92
		dec	ebp
		jz	loc_419CE0
		mov	eax, [esp+2DCh+var_2A4]
		test	eax, eax
		jz	loc_41A1D3

loc_419DF7:				; CODE XREF: _x509_main+AAEj
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, [esp+2DCh+var_2A4]
		mov	[esp+2DCh+var_2DC], eax
		call	_sk_push
		test	eax, eax
		jnz	loc_419B69
		jmp	loc_419CE0
; ---------------------------------------------------------------------------
		align 10h

loc_419E20:				; CODE XREF: _x509_main+416j
					; _x509_main+43Fj
		mov	[esp+2DCh+var_2D4], 0
		mov	eax, [esp+2DCh+var_2A8]
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_setup_engine
		mov	[esp+2DCh+var_1D0], eax
		mov	eax, [esp+2DCh+var_288]
		test	eax, eax
		jnz	loc_419F9C

loc_419E50:				; CODE XREF: _x509_main+889j
		call	_ERR_load_crypto_strings
		mov	[esp+2DCh+var_2CC], 0 ;	int
		lea	eax, [esp+2DCh+var_1CC]
		mov	[esp+2DCh+var_2D0], eax	; int
		mov	[esp+2DCh+var_2D4], 0 ;	char *
		mov	eax, [esp+2DCh+var_2AC]
		mov	[esp+2DCh+var_2D8], eax	; char *
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax	; int
		call	_app_passwd
		test	eax, eax
		jnz	short loc_419ECD
		mov	[esp+2DCh+var_2D8], offset aErrorGetting_8 ; "Error getting password\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		jmp	loc_419D12
; ---------------------------------------------------------------------------

loc_419EA3:				; CODE XREF: _x509_main+570j
		mov	edi, offset aPassin_6 ;	"-passin"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jnz	loc_419F73
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2AC], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_419ECD:				; CODE XREF: _x509_main+757j
		mov	eax, [esp+2DCh+var_28C]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_STORE_set_default_paths
		test	eax, eax
		jz	loc_419FE8
		mov	ebp, [esp+2DCh+var_208]
		test	ebp, ebp
		jz	loc_41A21F

loc_419EF0:				; CODE XREF: _x509_main+AF4j
					; _x509_main+E3Ej
		mov	edi, [esp+2DCh+var_1FC]
		test	edi, edi
		jz	loc_41A1C6
		mov	[esp+2DCh+var_1A4], 0FFFFFFFFh
		mov	[esp+2DCh+var_2DC], 0
		call	_NCONF_new
		mov	ebx, eax
		mov	[esp+2DCh+var_298], eax
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], edi
		mov	[esp+2DCh+var_2DC], ebx
		call	_NCONF_load
		test	eax, eax
		jnz	loc_419FFA
		mov	eax, [esp+2DCh+var_1A4]
		test	eax, eax
		jle	loc_41A4BD
		mov	edx, [esp+2DCh+var_1FC]
		mov	[esp+2DCh+var_2D0], edx
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aErrorOnLineL_4 ; "error on line %ld	of config file '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		jmp	loc_419D1A
; ---------------------------------------------------------------------------

loc_419F73:				; CODE XREF: _x509_main+781j
		mov	edi, offset aExtfile_0 ; "-extfile"
		mov	ecx, 9
		mov	esi, edx
		repe cmpsb
		jnz	short loc_419FBE
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_1FC], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_419F9C:				; CODE XREF: _x509_main+71Aj
		mov	[esp+2DCh+var_2D4], 0
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], 0
		call	_app_RAND_load_file
		jmp	loc_419E50
; ---------------------------------------------------------------------------

loc_419FBE:				; CODE XREF: _x509_main+851j
		mov	edi, offset aExtensions_2 ; "-extensions"
		mov	ecx, 0Ch
		mov	esi, edx
		repe cmpsb
		jnz	loc_41A1E9
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_270], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_419FE8:				; CODE XREF: _x509_main+7ABj
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_ERR_print_errors
		jmp	loc_419D12
; ---------------------------------------------------------------------------

loc_419FFA:				; CODE XREF: _x509_main+805j
		mov	edi, [esp+2DCh+var_270]
		test	edi, edi
		jz	loc_41B121

loc_41A006:				; CODE XREF: _x509_main+1A13j
					; _x509_main+1A26j
		mov	[esp+2DCh+var_2C8], 1
		mov	[esp+2DCh+var_2CC], 0
		mov	[esp+2DCh+var_2D0], 0
		mov	[esp+2DCh+var_2D4], 0
		mov	[esp+2DCh+var_2D8], 0
		lea	ebx, [esp+2DCh+var_11C]
		mov	[esp+2DCh+var_2DC], ebx
		call	_X509V3_set_ctx
		mov	edi, [esp+2DCh+var_298]
		mov	[esp+2DCh+var_2D8], edi
		mov	[esp+2DCh+var_2DC], ebx
		call	_X509V3_set_nconf
		mov	[esp+2DCh+var_2D0], 0
		mov	eax, [esp+2DCh+var_270]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], ebx
		mov	[esp+2DCh+var_2DC], edi
		call	_X509V3_EXT_add_nconf
		test	eax, eax
		jz	loc_41A517

loc_41A071:				; CODE XREF: _x509_main+A9Ej
		mov	esi, ds:_reqfile
		test	esi, esi
		jz	loc_41A24F
		mov	ebx, [esp+2DCh+var_25C]
		test	ebx, ebx
		jnz	short loc_41A096
		mov	ecx, [esp+2DCh+var_274]
		test	ecx, ecx
		jz	loc_41A546

loc_41A096:				; CODE XREF: _x509_main+958j
		call	_BIO_s_file
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_41A9CC
		mov	edx, [esp+2DCh+var_2A0]
		test	edx, edx
		jz	loc_41A8A0
		mov	eax, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+var_2D0], eax
		mov	[esp+2DCh+var_2D4], 3
		mov	[esp+2DCh+var_2D8], 6Ch
		mov	[esp+2DCh+var_2DC], ebx
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_41A5C3

loc_41A0E1:				; CODE XREF: _x509_main+1191j
		mov	[esp+2DCh+var_2D0], 0
		mov	[esp+2DCh+var_2D4], 0
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], ebx
		call	_PEM_read_bio_X509_REQ
		mov	edi, eax
		mov	[esp+2DCh+var_2A0], eax
		mov	[esp+2DCh+var_2DC], ebx
		call	_BIO_free
		test	edi, edi
		jz	loc_41A924
		mov	eax, [esp+2DCh+var_2A0]
		mov	eax, [eax]
		test	eax, eax
		jz	loc_41A3FE
		mov	eax, [eax+14h]
		test	eax, eax
		jz	loc_41A3FE
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_41A3FE
		cmp	dword ptr [eax+8], 0
		jz	loc_41A3FE
		mov	eax, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_REQ_get_pubkey
		mov	ebx, eax
		test	eax, eax
		jz	loc_41B15B
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_REQ_verify
		mov	esi, eax
		mov	[esp+2DCh+var_2DC], ebx
		call	_EVP_PKEY_free
		test	esi, esi
		js	loc_41A90F
		jnz	loc_41A5DC
		mov	[esp+2DCh+var_2D8], offset aSignatureDid_0 ; "Signature	did not	match the certificate"...

loc_41A18B:				; CODE XREF: _x509_main+CEBj
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41A198:				; CODE XREF: _x509_main+1201j
		mov	[esp+2DCh+var_2AC], 0
		xor	esi, esi
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	[esp+2DCh+var_2A8], 0
		xor	ebp, ebp
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41A1C6:				; CODE XREF: _x509_main+7C9j
		mov	[esp+2DCh+var_298], 0
		jmp	loc_41A071
; ---------------------------------------------------------------------------

loc_41A1D3:				; CODE XREF: _x509_main+6C1j
		call	_sk_new_null
		mov	[esp+2DCh+var_2A4], eax
		test	eax, eax
		jnz	loc_419DF7
		jmp	loc_419CE0
; ---------------------------------------------------------------------------

loc_41A1E9:				; CODE XREF: _x509_main+89Cj
		mov	[esp+2DCh+var_2D8], offset aIn_14 ; "-in"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	loc_41A4E2
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2A0], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41A21F:				; CODE XREF: _x509_main+7BAj
		cmp	[esp+2DCh+var_274], 0
		jz	loc_419EF0
		cmp	[esp+2DCh+var_2B0], 3
		jz	loc_41A560
		mov	[esp+2DCh+var_2D8], offset aNeedToSpecifyA ; "need to specify a	CAkey if using the CA"...
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		jmp	loc_419D12
; ---------------------------------------------------------------------------

loc_41A24F:				; CODE XREF: _x509_main+949j
		mov	[esp+2DCh+var_2C8], offset aCertificate_1 ; "Certificate"
		mov	eax, [esp+2DCh+var_1D0]
		mov	[esp+2DCh+var_2CC], eax
		mov	[esp+2DCh+var_2D0], 0
		mov	eax, [esp+2DCh+var_2B4]
		mov	[esp+2DCh+var_2D4], eax
		mov	eax, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_load_cert
		mov	ebp, eax
		test	eax, eax
		jz	loc_41A998
		mov	[esp+2DCh+var_2A0], 0

loc_41A299:				; CODE XREF: _x509_main+1938j
		mov	[esp+2DCh+var_2A8], 0
		cmp	[esp+2DCh+var_274], 0
		jnz	loc_41A835

loc_41A2AC:				; CODE XREF: _x509_main+1146j
		cmp	[esp+2DCh+var_22C], 0
		jz	loc_41A420
		cmp	[esp+2DCh+var_26C], 0
		jnz	loc_41A420
		cmp	[esp+2DCh+var_260], 0
		jnz	loc_41A420
		xor	esi, esi

loc_41A2D2:				; CODE XREF: _x509_main+D56j
					; _x509_main+1263j
		mov	eax, [esp+2DCh+var_1E8]
		test	eax, eax
		jz	short loc_41A2F1
		mov	[esp+2DCh+var_2D4], 0FFFFFFFFh
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_alias_set1

loc_41A2F1:				; CODE XREF: _x509_main+BABj
		cmp	[esp+2DCh+var_1E0], 0
		jz	short loc_41A303
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_trust_clear

loc_41A303:				; CODE XREF: _x509_main+BC9j
		cmp	[esp+2DCh+var_1DC], 0
		jz	short loc_41A315
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_reject_clear

loc_41A315:				; CODE XREF: _x509_main+BDBj
		xor	ebx, ebx
		cmp	[esp+2DCh+var_294], 0
		jz	short loc_41A349
		mov	edi, [esp+2DCh+var_294]
		jmp	short loc_41A33D
; ---------------------------------------------------------------------------

loc_41A324:				; CODE XREF: _x509_main+C17j
		mov	[esp+2DCh+var_2D8], ebx
		mov	[esp+2DCh+var_2DC], edi
		call	_sk_value
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_add1_trust_object
		inc	ebx

loc_41A33D:				; CODE XREF: _x509_main+BF2j
		mov	[esp+2DCh+var_2DC], edi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_41A324

loc_41A349:				; CODE XREF: _x509_main+BECj
		xor	ebx, ebx
		cmp	[esp+2DCh+var_290], 0
		jz	short loc_41A37D
		mov	edi, [esp+2DCh+var_290]
		jmp	short loc_41A371
; ---------------------------------------------------------------------------

loc_41A358:				; CODE XREF: _x509_main+C4Bj
		mov	[esp+2DCh+var_2D8], ebx
		mov	[esp+2DCh+var_2DC], edi
		call	_sk_value
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_add1_reject_object
		inc	ebx

loc_41A371:				; CODE XREF: _x509_main+C26j
		mov	[esp+2DCh+var_2DC], edi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_41A358

loc_41A37D:				; CODE XREF: _x509_main+C20j
		cmp	[esp+2DCh+var_27C], 0
		mov	[esp+2DCh+var_2AC], 0
		jnz	loc_41A6E6
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0

loc_41A3A0:				; CODE XREF: _x509_main+1100j
		cmp	[esp+2DCh+var_1D8], 0
		jnz	loc_41A691
		xor	ebx, ebx
		cmp	[esp+2DCh+var_22C], 0
		jnz	loc_419D4B
		cmp	[esp+2DCh+var_284], 1
		jz	loc_41B0E2
		cmp	[esp+2DCh+var_284], 3
		jz	loc_41B099
		cmp	[esp+2DCh+var_284], 4
		jz	loc_41B19B
		mov	[esp+2DCh+var_2D8], offset aBadOutputFo_10 ; "bad output format	specified for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41A3FE:				; CODE XREF: _x509_main+9EFj
					; _x509_main+9FAj ...
		mov	[esp+2DCh+var_2D8], offset aTheCertificate ; "The certificate request appears to corr"...
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	[esp+2DCh+var_2D8], offset aItDoesNotConta ; "It does not contain a public key\n"
		jmp	loc_41A18B
; ---------------------------------------------------------------------------

loc_41A420:				; CODE XREF: _x509_main+B84j
					; _x509_main+B8Fj ...
		mov	[esp+2DCh+var_2D4], offset aSetX509v3Exten ; "SET x509v3 extension 3"
		mov	[esp+2DCh+var_2D8], offset aSet_ex3 ; "SET.ex3"
		mov	[esp+2DCh+var_2DC], offset a2_99999_3 ;	"2.99999.3"
		call	_OBJ_create
		call	_BIO_s_file
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_41AA0C
		cmp	[esp+2DCh+var_1F8], 0
		jz	loc_41A96F
		mov	eax, [esp+2DCh+var_1F8]
		mov	[esp+2DCh+var_2D0], eax
		mov	[esp+2DCh+var_2D4], 5
		mov	[esp+2DCh+var_2D8], 6Ch
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_ctrl
		test	eax, eax
		jg	loc_41A2D2
		mov	eax, [esp+2DCh+var_1F8]
		mov	[esp+2DCh+var_2DC], eax	; char *
		call	_perror
		mov	[esp+2DCh+var_2AC], 0
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41A4BD:				; CODE XREF: _x509_main+814j
		mov	eax, [esp+2DCh+var_1FC]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aErrorLoading_2 ; "error loading the	config file '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		jmp	loc_419D1A
; ---------------------------------------------------------------------------

loc_41A4E2:				; CODE XREF: _x509_main+AD3j
		mov	[esp+2DCh+var_2D8], offset aOut_16 ; "-out"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41A573
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_1F8], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41A517:				; CODE XREF: _x509_main+93Bj
		mov	eax, [esp+2DCh+var_270]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aErrorLoading_3 ; "Error Loading extension section %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_ERR_print_errors
		jmp	loc_419D1A
; ---------------------------------------------------------------------------

loc_41A546:				; CODE XREF: _x509_main+960j
		mov	[esp+2DCh+var_2D8], offset aWeNeedAPrivate ; "We need a	private	key to sign with\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		jmp	loc_419D1A
; ---------------------------------------------------------------------------

loc_41A560:				; CODE XREF: _x509_main+AFFj
		mov	eax, [esp+2DCh+var_20C]
		mov	[esp+2DCh+var_208], eax
		jmp	loc_419EF0
; ---------------------------------------------------------------------------

loc_41A573:				; CODE XREF: _x509_main+DCCj
		mov	[esp+2DCh+var_2D8], offset aSignkey ; "-signkey"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	loc_41A8C6
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_1F4], eax
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_25C], eax
		mov	[esp+2DCh+var_288], 1
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41A5C3:				; CODE XREF: _x509_main+9ABj
		mov	eax, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+var_2DC], eax	; char *
		call	_perror
		mov	[esp+2DCh+var_2DC], ebx
		call	_BIO_free
		jmp	loc_419D1A
; ---------------------------------------------------------------------------

loc_41A5DC:				; CODE XREF: _x509_main+A4Dj
		mov	[esp+2DCh+var_2D8], offset aSignatureOk_0 ; "Signature ok\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	eax, [esp+2DCh+var_2A0]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		mov	edx, [esp+2DCh+var_1C8]
		mov	[esp+2DCh+var_2D0], edx
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aSubject_1 ;	"subject="
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_print_name
		call	_X509_new
		mov	ebp, eax
		test	eax, eax
		jz	short loc_41A665
		cmp	[esp+2DCh+var_29C], 0
		jz	loc_41B06D
		mov	eax, [esp+2DCh+var_29C]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_serialNumber
		test	eax, eax
		jz	short loc_41A665

loc_41A648:				; CODE XREF: _x509_main+19DFj
		mov	eax, [esp+2DCh+var_2A0]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_issuer_name
		test	eax, eax
		jnz	loc_41AFE5

loc_41A665:				; CODE XREF: _x509_main+EF7j
					; _x509_main+F16j ...
		mov	[esp+2DCh+var_2AC], 0
		xor	esi, esi
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	[esp+2DCh+var_2A8], 0
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41A691:				; CODE XREF: _x509_main+C78j
		mov	[esp+2DCh+var_2DC], 0
		call	__time32
		add	eax, [esp+2DCh+var_1D4]
		mov	[esp+2DCh+var_1A4], eax
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	eax, [eax+4]
		lea	edx, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2D8], edx
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_cmp_time
		test	eax, eax
		js	loc_41BE93
		mov	[esp+2DCh+var_2D8], offset aCertificateWil ; "Certificate will not expire\n"
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41A6E6:				; CODE XREF: _x509_main+C5Aj
		mov	ebx, 1
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	[esp+2DCh+var_1FC], esi

loc_41A702:				; CODE XREF: _x509_main+10F3j
		cmp	[esp+2DCh+var_244], ebx
		jz	loc_41BE63
		cmp	[esp+2DCh+var_248], ebx
		jz	loc_41BE33
		cmp	[esp+2DCh+var_24C], ebx
		jz	loc_41BDF6
		cmp	[esp+2DCh+var_260], ebx
		jz	loc_41BEF0
		cmp	[esp+2DCh+var_258], ebx
		jz	loc_41BEAD
		cmp	[esp+2DCh+var_254], ebx
		jz	loc_41BF89
		cmp	[esp+2DCh+var_228], ebx
		jz	loc_41BDA6
		cmp	[esp+2DCh+var_240], ebx
		jz	loc_41AFDB
		cmp	[esp+2DCh+var_234], ebx
		jz	loc_41AFD1
		cmp	[esp+2DCh+var_23C], ebx
		jz	loc_41AFC7
		cmp	[esp+2DCh+var_230], ebx
		jz	loc_41AFA2
		cmp	[esp+2DCh+var_214], ebx
		jz	loc_41AE6F
		cmp	[esp+2DCh+var_21C], ebx
		jz	loc_41AE00
		cmp	[esp+2DCh+var_218], ebx
		jz	loc_41ADD1
		cmp	[esp+2DCh+var_224], ebx
		jz	loc_41AA8C
		cmp	[esp+2DCh+var_26C], ebx
		jz	loc_41B318
		cmp	[esp+2DCh+var_268], ebx
		jz	loc_41B2FA
		cmp	[esp+2DCh+var_264], ebx
		jz	loc_41B296
		cmp	[esp+2DCh+var_210], ebx
		jz	loc_41B1E7
		cmp	[esp+2DCh+var_25C], ebx
		jz	loc_41B8FF

loc_41A7FA:				; CODE XREF: _x509_main+21D7j
		cmp	[esp+2DCh+var_274], ebx
		jz	loc_41B343
		cmp	[esp+2DCh+var_250], ebx
		jz	loc_41B82C
		cmp	[esp+2DCh+var_238], ebx
		jz	loc_41AA74

loc_41A81E:				; CODE XREF: _x509_main+1357j
					; _x509_main+1669j ...
		inc	ebx
		cmp	ebx, [esp+2DCh+var_27C]
		jle	loc_41A702
		mov	esi, [esp+2DCh+var_1FC]
		jmp	loc_41A3A0
; ---------------------------------------------------------------------------

loc_41A835:				; CODE XREF: _x509_main+B76j
		mov	[esp+2DCh+var_2C8], offset aCaCertificat_0 ; "CA Certificate"
		mov	eax, [esp+2DCh+var_1D0]
		mov	[esp+2DCh+var_2CC], eax
		mov	[esp+2DCh+var_2D0], 0
		mov	eax, [esp+2DCh+var_2B0]
		mov	[esp+2DCh+var_2D4], eax
		mov	eax, [esp+2DCh+var_20C]
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_load_cert
		mov	[esp+2DCh+var_2A8], eax
		test	eax, eax
		jnz	loc_41A2AC
		mov	[esp+2DCh+var_2AC], 0
		xor	esi, esi
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41A8A0:				; CODE XREF: _x509_main+983j
		mov	eax, ds:__imp___iob
		mov	[esp+2DCh+var_2D0], eax
		mov	[esp+2DCh+var_2D4], 10h
		mov	[esp+2DCh+var_2D8], 6Ah
		mov	[esp+2DCh+var_2DC], ebx
		call	_BIO_ctrl
		jmp	loc_41A0E1
; ---------------------------------------------------------------------------

loc_41A8C6:				; CODE XREF: _x509_main+E5Dj
		mov	[esp+2DCh+var_2D8], offset aCa_0 ; "-CA"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41A936
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_20C], eax
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_274], eax
		mov	[esp+2DCh+var_288], 1
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41A90F:				; CODE XREF: _x509_main+A47j
		mov	[esp+2DCh+var_2D8], offset aSignatureVer_1 ; "Signature	verification error\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41A924:				; CODE XREF: _x509_main+9E1j
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_ERR_print_errors
		jmp	loc_41A198
; ---------------------------------------------------------------------------

loc_41A936:				; CODE XREF: _x509_main+11B0j
		mov	[esp+2DCh+var_2D8], offset aCakey ; "-CAkey"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	loc_41AA3B
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_208], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41A96F:				; CODE XREF: _x509_main+D2Bj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+2DCh+var_2D0], eax
		mov	[esp+2DCh+var_2D4], 0
		mov	[esp+2DCh+var_2D8], 6Ah
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_ctrl
		jmp	loc_41A2D2
; ---------------------------------------------------------------------------

loc_41A998:				; CODE XREF: _x509_main+B5Bj
		mov	[esp+2DCh+var_2AC], 0
		xor	esi, esi
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	[esp+2DCh+var_2A8], 0
		mov	[esp+2DCh+var_2A0], 0
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41A9CC:				; CODE XREF: _x509_main+977j
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_ERR_print_errors
		mov	[esp+2DCh+var_2AC], 0
		xor	esi, esi
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	[esp+2DCh+var_2A8], 0
		xor	ebp, ebp
		mov	[esp+2DCh+var_2A0], 0
		mov	bl, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41AA0C:				; CODE XREF: _x509_main+D1Dj
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_ERR_print_errors
		mov	[esp+2DCh+var_2AC], 0
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41AA3B:				; CODE XREF: _x509_main+1220j
		mov	[esp+2DCh+var_2D8], offset aCaserial ; "-CAserial"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	loc_41BAFF
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_1F0], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41AA74:				; CODE XREF: _x509_main+10E8j
		mov	[esp+2DCh+var_2D8], ebp
		mov	eax, [esp+2DCh+var_1FC]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_ocspid_print
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41AA8C:				; CODE XREF: _x509_main+108Cj
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_subject_name
		mov	[esp+2DCh+var_2D4], 100h
		lea	esi, [esp+2DCh+var_11C]
		mov	[esp+2DCh+var_2D8], esi
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_NAME_oneline
		mov	[esp+2DCh+var_2D4], esi
		mov	[esp+2DCh+var_2D8], offset aSubjectS ; "/* subject:%s */\n"
		mov	edi, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_printf
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_issuer_name
		mov	[esp+2DCh+var_2D4], 100h
		mov	[esp+2DCh+var_2D8], esi
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_NAME_oneline
		mov	[esp+2DCh+var_2D4], esi
		mov	[esp+2DCh+var_2D8], offset aIssuerS ; "/* issuer :%s */\n"
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_printf
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], ebp
		call	_i2d_X509
		mov	[esp+2DCh+var_2D4], 311h
		mov	[esp+2DCh+var_2D8], offset aX509_c ; "x509.c"
		mov	[esp+2DCh+var_2DC], eax
		call	_CRYPTO_malloc
		mov	esi, eax
		test	eax, eax
		jz	loc_41AD9E
		mov	[esp+2DCh+var_1A4], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_subject_name
		lea	edx, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2D8], edx
		mov	[esp+2DCh+var_2DC], eax
		call	_i2d_X509_NAME
		mov	[esp+2DCh+var_1F8], eax
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aUnsignedCharXx ; "unsigned char XXX_subject_name[%d]={\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	[esp+2DCh+var_1A4], esi
		xor	edi, edi

loc_41AB73:				; CODE XREF: _x509_main+1493j
		cmp	edi, [esp+2DCh+var_1F8]
		jge	short loc_41ABC5
		mov	eax, [esp+2DCh+var_1A4]
		mov	dl, [eax+edi]
		and	edx, 0FFh
		mov	[esp+2DCh+var_2D4], edx
		mov	[esp+2DCh+var_2D8], offset a0x02x_5 ; "0x%02X,"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	eax, edi
		and	eax, 0Fh
		cmp	eax, 0Fh
		jnz	short loc_41ABC2
		mov	[esp+2DCh+var_2D8], offset asc_46167F ;	"\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41ABC2:				; CODE XREF: _x509_main+147Cj
		inc	edi
		jmp	short loc_41AB73
; ---------------------------------------------------------------------------

loc_41ABC5:				; CODE XREF: _x509_main+144Aj
		mov	edx, [esp+2DCh+var_1F8]
		mov	eax, edx
		not	eax
		sar	eax, 1Fh
		and	eax, edx
		test	al, 0Fh
		jz	short loc_41ABED
		mov	[esp+2DCh+var_2D8], offset asc_46167F ;	"\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41ABED:				; CODE XREF: _x509_main+14A7j
		mov	[esp+2DCh+var_2D8], offset asc_461792 ;	"};\n"
		mov	edi, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_printf
		mov	eax, [ebp+0]
		mov	eax, [eax+18h]
		lea	edx, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2D8], edx
		mov	[esp+2DCh+var_2DC], eax
		call	_i2d_X509_PUBKEY
		mov	[esp+2DCh+var_1F8], eax
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aUnsignedChar_0 ; "unsigned char XXX_public_key[%d]={\n"
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_printf
		mov	[esp+2DCh+var_1A4], esi
		xor	edi, edi

loc_41AC3E:				; CODE XREF: _x509_main+155Ej
		cmp	edi, [esp+2DCh+var_1F8]
		jge	short loc_41AC90
		mov	eax, [esp+2DCh+var_1A4]
		mov	dl, [eax+edi]
		and	edx, 0FFh
		mov	[esp+2DCh+var_2D4], edx
		mov	[esp+2DCh+var_2D8], offset a0x02x_5 ; "0x%02X,"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	eax, edi
		and	eax, 0Fh
		cmp	eax, 0Fh
		jnz	short loc_41AC8D
		mov	[esp+2DCh+var_2D8], offset asc_46167F ;	"\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41AC8D:				; CODE XREF: _x509_main+1547j
		inc	edi
		jmp	short loc_41AC3E
; ---------------------------------------------------------------------------

loc_41AC90:				; CODE XREF: _x509_main+1515j
		mov	edx, [esp+2DCh+var_1F8]
		mov	eax, edx
		not	eax
		sar	eax, 1Fh
		and	eax, edx
		test	al, 0Fh
		jz	short loc_41ACB8
		mov	[esp+2DCh+var_2D8], offset asc_46167F ;	"\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41ACB8:				; CODE XREF: _x509_main+1572j
		mov	[esp+2DCh+var_2D8], offset asc_461792 ;	"};\n"
		mov	edi, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_printf
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_i2d_X509
		mov	[esp+2DCh+var_1F8], eax
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aUnsignedChar_1 ; "unsigned char XXX_certificate[%d]={\n"
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_printf
		mov	[esp+2DCh+var_1A4], esi
		xor	edi, edi

loc_41AD03:				; CODE XREF: _x509_main+1623j
		cmp	edi, [esp+2DCh+var_1F8]
		jge	short loc_41AD55
		mov	eax, [esp+2DCh+var_1A4]
		mov	dl, [eax+edi]
		and	edx, 0FFh
		mov	[esp+2DCh+var_2D4], edx
		mov	[esp+2DCh+var_2D8], offset a0x02x_5 ; "0x%02X,"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	eax, edi
		and	eax, 0Fh
		cmp	eax, 0Fh
		jnz	short loc_41AD52
		mov	[esp+2DCh+var_2D8], offset asc_46167F ;	"\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41AD52:				; CODE XREF: _x509_main+160Cj
		inc	edi
		jmp	short loc_41AD03
; ---------------------------------------------------------------------------

loc_41AD55:				; CODE XREF: _x509_main+15DAj
		mov	edx, [esp+2DCh+var_1F8]
		mov	eax, edx
		not	eax
		sar	eax, 1Fh
		and	eax, edx
		test	al, 0Fh
		jz	short loc_41AD7D
		mov	[esp+2DCh+var_2D8], offset asc_46167F ;	"\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41AD7D:				; CODE XREF: _x509_main+1637j
		mov	[esp+2DCh+var_2D8], offset asc_461792 ;	"};\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	[esp+2DCh+var_2DC], esi
		call	_CRYPTO_free
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41AD9E:				; CODE XREF: _x509_main+13F3j
		mov	esi, [esp+2DCh+var_1FC]
		mov	[esp+2DCh+var_2D8], offset aOutOfMemory_4 ; "Out of memory\n"

loc_41ADAD:				; CODE XREF: _x509_main+186Dj
					; _x509_main+2921j
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41ADD1:				; CODE XREF: _x509_main+107Fj
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_pubkey
		mov	esi, eax
		test	eax, eax
		jz	loc_41AF8E
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_PEM_write_bio_PUBKEY
		mov	[esp+2DCh+var_2DC], esi
		call	_EVP_PKEY_free
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41AE00:				; CODE XREF: _x509_main+1072j
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_pubkey
		mov	esi, eax
		test	eax, eax
		jz	loc_41C042
		mov	[esp+2DCh+var_2D8], offset aModulus_4 ;	"Modulus="
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	eax, [esi]
		cmp	eax, 6
		jz	loc_41BDDB
		cmp	eax, 74h
		jz	loc_41C00E
		mov	[esp+2DCh+var_2D8], offset aWrongAlgorit_0 ; "Wrong Algorithm type"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41AE4E:				; CODE XREF: _x509_main+26C1j
					; _x509_main+28F4j
		mov	[esp+2DCh+var_2D8], offset asc_46167F ;	"\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	[esp+2DCh+var_2DC], esi
		call	_EVP_PKEY_free
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41AE6F:				; CODE XREF: _x509_main+1065j
		mov	[esp+2DCh+var_2D8], offset aCertificatePur ; "Certificate purposes:\n"
		mov	esi, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf
		mov	[esp+2DCh+var_1F8], 0
		mov	[esp+2DCh+var_1E8], ebx

loc_41AE95:				; CODE XREF: _x509_main+1859j
		call	_X509_PURPOSE_get_count
		cmp	[esp+2DCh+var_1F8], eax
		jge	loc_41C084
		mov	eax, [esp+2DCh+var_1F8]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_PURPOSE_get0
		mov	ebx, eax
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_PURPOSE_get_id
		mov	edi, eax
		mov	[esp+2DCh+var_2DC], ebx
		call	_X509_PURPOSE_get0_name
		mov	ebx, eax
		mov	[esp+2DCh+var_2D4], 0
		mov	[esp+2DCh+var_2D8], edi
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_check_purpose
		mov	[esp+2DCh+var_1E0], eax
		mov	[esp+2DCh+var_2D0], offset byte_4616AF
		mov	[esp+2DCh+var_2D4], ebx
		mov	[esp+2DCh+var_2D8], offset aSS_3 ; "%s%s : "
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf
		mov	edx, [esp+2DCh+var_1E0]
		cmp	edx, 1
		jz	loc_41C06F
		test	edx, edx
		jz	loc_41C090
		mov	[esp+2DCh+var_2D4], edx
		mov	[esp+2DCh+var_2D8], offset aYesWarningCode ; "Yes (WARNING code=%d)\n"
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf

loc_41AF2F:				; CODE XREF: _x509_main+294Fj
					; _x509_main+2970j
		mov	[esp+2DCh+var_2D4], 1
		mov	[esp+2DCh+var_2D8], edi
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_check_purpose
		mov	edi, eax
		mov	[esp+2DCh+var_2D0], offset aCa_2 ; " CA"
		mov	[esp+2DCh+var_2D4], ebx
		mov	[esp+2DCh+var_2D8], offset aSS_3 ; "%s%s : "
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf
		cmp	edi, 1
		jz	loc_41BFF9
		test	edi, edi
		jnz	loc_41C029
		mov	[esp+2DCh+var_2D8], offset aNo_1 ; "No\n"
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf

loc_41AF82:				; CODE XREF: _x509_main+28D9j
					; _x509_main+290Dj
		inc	[esp+2DCh+var_1F8]
		jmp	loc_41AE95
; ---------------------------------------------------------------------------

loc_41AF8E:				; CODE XREF: _x509_main+16ADj
		mov	esi, [esp+2DCh+var_1FC]
		mov	[esp+2DCh+var_2D8], offset aErrorGetting_9 ; "Error getting public key\n"
		jmp	loc_41ADAD
; ---------------------------------------------------------------------------

loc_41AFA2:				; CODE XREF: _x509_main+1058j
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_issuer_name_hash_old

loc_41AFAA:				; CODE XREF: _x509_main+189Fj
					; _x509_main+18A9j ...
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset a08lx_0 ; "%08lx\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41AFC7:				; CODE XREF: _x509_main+104Bj
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_issuer_name_hash
		jmp	short loc_41AFAA
; ---------------------------------------------------------------------------

loc_41AFD1:				; CODE XREF: _x509_main+103Ej
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_subject_name_hash_old
		jmp	short loc_41AFAA
; ---------------------------------------------------------------------------

loc_41AFDB:				; CODE XREF: _x509_main+1031j
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_subject_name_hash
		jmp	short loc_41AFAA
; ---------------------------------------------------------------------------

loc_41AFE5:				; CODE XREF: _x509_main+F2Fj
		mov	eax, [esp+2DCh+var_2A0]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_subject_name
		test	eax, eax
		jz	loc_41A665
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	eax, [eax]
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_gmtime_adj
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	eax, [eax+4]
		mov	[esp+2DCh+var_2D0], 0
		mov	[esp+2DCh+var_2D4], 0
		mov	edx, [esp+2DCh+var_220]
		mov	[esp+2DCh+var_2D8], edx
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_time_adj_ex
		mov	eax, [esp+2DCh+var_2A0]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_REQ_get_pubkey
		mov	ebx, eax
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_pubkey
		mov	[esp+2DCh+var_2DC], ebx
		call	_EVP_PKEY_free
		jmp	loc_41A299
; ---------------------------------------------------------------------------

loc_41B06D:				; CODE XREF: _x509_main+EFEj
		call	_ASN1_INTEGER_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_41B114
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], 0
		call	_rand_serial
		test	eax, eax
		jnz	short loc_41B0F7

loc_41B090:				; CODE XREF: _x509_main+19D5j
		mov	[esp+2DCh+var_29C], ebx
		jmp	loc_41A665
; ---------------------------------------------------------------------------

loc_41B099:				; CODE XREF: _x509_main+C9Ej
		cmp	[esp+2DCh+var_204], 0
		mov	[esp+2DCh+var_2D8], ebp
		mov	[esp+2DCh+var_2DC], esi
		jz	short loc_41B0F0
		call	_PEM_write_bio_X509_AUX

loc_41B0AF:				; CODE XREF: _x509_main+19BEj
					; _x509_main+19C5j ...
		xor	ebx, ebx
		test	eax, eax
		jnz	loc_419D4B
		mov	[esp+2DCh+var_2D8], offset aUnableToWrit_6 ; "unable to	write certificate\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_ERR_print_errors
		mov	bl, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41B0E2:				; CODE XREF: _x509_main+C93j
		mov	[esp+2DCh+var_2D8], ebp
		mov	[esp+2DCh+var_2DC], esi
		call	_i2d_X509_bio
		jmp	short loc_41B0AF
; ---------------------------------------------------------------------------

loc_41B0F0:				; CODE XREF: _x509_main+1978j
		call	_PEM_write_bio_X509
		jmp	short loc_41B0AF
; ---------------------------------------------------------------------------

loc_41B0F7:				; CODE XREF: _x509_main+195Ej
		mov	[esp+2DCh+var_2D8], ebx
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_serialNumber
		test	eax, eax
		jz	short loc_41B090
		mov	[esp+2DCh+var_2DC], ebx
		call	_ASN1_INTEGER_free
		jmp	loc_41A648
; ---------------------------------------------------------------------------

loc_41B114:				; CODE XREF: _x509_main+1946j
		mov	[esp+2DCh+var_29C], 0
		jmp	loc_41A665
; ---------------------------------------------------------------------------

loc_41B121:				; CODE XREF: _x509_main+8D0j
		mov	[esp+2DCh+var_2D4], offset aExtensions_3 ; "extensions"
		mov	[esp+2DCh+var_2D8], offset aDefault_1 ;	"default"
		mov	eax, [esp+2DCh+var_298]
		mov	[esp+2DCh+var_2DC], eax
		call	_NCONF_get_string
		mov	[esp+2DCh+var_270], eax
		test	eax, eax
		jnz	loc_41A006
		call	_ERR_clear_error
		mov	[esp+2DCh+var_270], offset aDefault_1 ;	"default"
		jmp	loc_41A006
; ---------------------------------------------------------------------------

loc_41B15B:				; CODE XREF: _x509_main+A25j
		mov	[esp+2DCh+var_2D8], offset aErrorUnpacki_1 ; "error unpacking public key\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	[esp+2DCh+var_2AC], 0
		xor	esi, esi
		mov	[esp+2DCh+var_2B0], 0
		mov	[esp+2DCh+var_2B4], 0
		mov	[esp+2DCh+var_2A8], 0
		xor	ebp, ebp
		mov	bl, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41B19B:				; CODE XREF: _x509_main+CA9j
		mov	[esp+2DCh+var_19C], offset aCertificate_2 ; "certificate"
		mov	[esp+2DCh+var_1A4], 0Bh
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_1C0], eax
		mov	[esp+2DCh+var_1BC], ebp
		call	_NETSCAPE_X509_it
		lea	edx, [esp+2DCh+var_1C0]
		mov	[esp+2DCh+var_2D4], edx
		mov	[esp+2DCh+var_2D8], esi
		mov	[esp+2DCh+var_2DC], eax
		call	_ASN1_item_i2d_bio
		jmp	loc_41B0AF
; ---------------------------------------------------------------------------

loc_41B1E7:				; CODE XREF: _x509_main+10B7j
		mov	eax, [esp+2DCh+var_200]
		mov	esi, eax
		test	eax, eax
		jnz	short loc_41B1FB
		call	_EVP_sha1
		mov	esi, eax

loc_41B1FB:				; CODE XREF: _x509_main+1AC2j
		lea	eax, [esp+2DCh+var_1C0]
		mov	[esp+2DCh+var_2D0], eax
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], esi
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_digest
		test	eax, eax
		jz	loc_41B2D4
		mov	[esp+2DCh+var_2DC], esi
		call	_EVP_MD_type
		mov	[esp+2DCh+var_2DC], eax
		call	_OBJ_nid2sn
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aSFingerprint_0 ; "%s Fingerprint="
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		xor	esi, esi
		jmp	short loc_41B27B
; ---------------------------------------------------------------------------

loc_41B251:				; CODE XREF: _x509_main+1B5Dj
		mov	eax, 3Ah

loc_41B256:				; CODE XREF: _x509_main+1B64j
		mov	[esp+2DCh+var_2D0], eax
		xor	eax, eax
		mov	al, [esp+esi+2DCh+var_1A5]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset a02xC_0 ; "%02X%c"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41B27B:				; CODE XREF: _x509_main+1B1Fj
		mov	eax, [esp+2DCh+var_1C0]
		cmp	esi, eax
		jge	loc_41A81E
		inc	esi
		cmp	eax, esi
		jnz	short loc_41B251
		mov	eax, 0Ah
		jmp	short loc_41B256
; ---------------------------------------------------------------------------

loc_41B296:				; CODE XREF: _x509_main+10AAj
		mov	[esp+2DCh+var_2D8], offset aNotafter ; "notAfter="
		mov	edi, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_puts
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	eax, [eax+4]

loc_41B2B3:				; CODE XREF: _x509_main+1BE6j
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], edi
		call	_ASN1_TIME_print
		mov	[esp+2DCh+var_2D8], offset asc_46167F ;	"\n"
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_puts
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41B2D4:				; CODE XREF: _x509_main+1AEFj
		mov	esi, [esp+2DCh+var_1FC]
		mov	[esp+2DCh+var_2D8], offset aOutOfMemory_5 ; "out of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41B2FA:				; CODE XREF: _x509_main+10A0j
		mov	[esp+2DCh+var_2D8], offset aNotbefore ;	"notBefore="
		mov	edi, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_puts
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	eax, [eax]
		jmp	short loc_41B2B3
; ---------------------------------------------------------------------------

loc_41B318:				; CODE XREF: _x509_main+1096j
		mov	eax, [esp+2DCh+var_1C4]
		mov	[esp+2DCh+var_2D0], eax
		mov	eax, [esp+2DCh+var_1C8]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], ebp
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_print_ex
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41B343:				; CODE XREF: _x509_main+10CEj
		mov	[esp+2DCh+var_2D8], offset aGettingCaPriva ; "Getting CA Private Key\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	edx, [esp+2DCh+var_208]
		test	edx, edx
		jz	short loc_41B3AE
		mov	[esp+2DCh+var_2C4], offset aCaPrivateKey_0 ; "CA Private Key"
		mov	eax, [esp+2DCh+var_1D0]
		mov	[esp+2DCh+var_2C8], eax
		mov	eax, [esp+2DCh+var_1CC]
		mov	[esp+2DCh+var_2CC], eax
		mov	[esp+2DCh+var_2D0], 0
		mov	eax, [esp+2DCh+var_278]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], edx
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_load_key
		mov	[esp+2DCh+var_2B0], eax
		test	eax, eax
		jz	loc_41B4C9

loc_41B3AE:				; CODE XREF: _x509_main+1C31j
		cmp	[esp+2DCh+var_288], 0
		jnz	short loc_41B3D1
		mov	[esp+2DCh+var_2D4], 377h ; unsigned int
		mov	[esp+2DCh+var_2D8], offset aX509_c ; "x509.c"
		mov	[esp+2DCh+var_2DC], offset aNeed_rand_1	; "need_rand"
		call	__assert
; ---------------------------------------------------------------------------

loc_41B3D1:				; CODE XREF: _x509_main+1C83j
		mov	eax, [esp+2DCh+var_2A8]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_get_pubkey
		mov	esi, eax
		mov	eax, [esp+2DCh+var_2B0]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], esi
		call	_EVP_PKEY_copy_parameters
		mov	[esp+2DCh+var_2DC], esi
		call	_EVP_PKEY_free
		mov	[esp+2DCh+var_2D0], 0
		mov	[esp+2DCh+var_2D4], ebp
		mov	eax, [esp+2DCh+var_28C]
		mov	[esp+2DCh+var_2D8], eax
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_STORE_CTX_init
		test	eax, eax
		jz	loc_41B7D0
		mov	eax, [esp+2DCh+var_29C]
		mov	esi, eax
		test	eax, eax
		jz	loc_41B67F

loc_41B430:				; CODE XREF: _x509_main+2026j
		mov	[esp+2DCh+var_2D8], ebp
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_STORE_CTX_set_cert
		mov	[esp+2DCh+var_2D8], 4000h
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_STORE_CTX_set_flags
		cmp	ds:_reqfile, 0
		jz	loc_41B663

loc_41B467:				; CODE XREF: _x509_main+1F44j
		mov	eax, [esp+2DCh+var_2B0]
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, [esp+2DCh+var_2A8]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_check_private_key
		test	eax, eax
		jnz	short loc_41B4DA
		mov	[esp+2DCh+var_2D8], offset aCaCertificat_1 ; "CA certificate and CA private key	do no"...
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41B494:				; CODE XREF: _x509_main+1DC4j
					; _x509_main+1DD4j ...
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_STORE_CTX_cleanup
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_ERR_print_errors
		xor	edi, edi

loc_41B4B2:				; CODE XREF: _x509_main+1F0Cj
		cmp	[esp+2DCh+var_29C], 0
		jnz	short loc_41B4C1
		mov	[esp+2DCh+var_2DC], esi
		call	_ASN1_INTEGER_free

loc_41B4C1:				; CODE XREF: _x509_main+1D87j
		test	edi, edi
		jnz	loc_41A81E

loc_41B4C9:				; CODE XREF: _x509_main+1C78j
					; _x509_main+2169j ...
		mov	esi, [esp+2DCh+var_1FC]
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41B4DA:				; CODE XREF: _x509_main+1D4Dj
		mov	eax, [esp+2DCh+var_2A8]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_get_subject_name
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_issuer_name
		test	eax, eax
		jz	short loc_41B494
		mov	[esp+2DCh+var_2D8], esi
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_serialNumber
		test	eax, eax
		jz	short loc_41B494
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	eax, [eax]
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_gmtime_adj
		test	eax, eax
		jz	loc_41B494
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	eax, [eax+4]
		mov	[esp+2DCh+var_2D0], 0
		mov	[esp+2DCh+var_2D4], 0
		mov	edx, [esp+2DCh+var_220]
		mov	[esp+2DCh+var_2D8], edx
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_time_adj_ex
		test	eax, eax
		jz	loc_41B494
		cmp	[esp+2DCh+var_1EC], 0
		jnz	loc_41B641

loc_41B568:				; CODE XREF: _x509_main+1F1Bj
		cmp	[esp+2DCh+var_298], 0
		jz	loc_41B5F4
		mov	[esp+2DCh+var_2D8], 2
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_version
		mov	[esp+2DCh+var_2C8], 0
		mov	[esp+2DCh+var_2CC], 0
		mov	[esp+2DCh+var_2D0], 0
		mov	[esp+2DCh+var_2D4], ebp
		mov	eax, [esp+2DCh+var_2A8]
		mov	[esp+2DCh+var_2D8], eax
		lea	eax, [esp+2DCh+var_1C0]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509V3_set_ctx
		mov	edi, [esp+2DCh+var_298]
		mov	[esp+2DCh+var_2D8], edi
		lea	eax, [esp+2DCh+var_1C0]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509V3_set_nconf
		mov	[esp+2DCh+var_2D0], ebp
		mov	eax, [esp+2DCh+var_270]
		mov	[esp+2DCh+var_2D4], eax
		lea	eax, [esp+2DCh+var_1C0]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], edi
		call	_X509V3_EXT_add_nconf
		test	eax, eax
		jz	loc_41B494

loc_41B5F4:				; CODE XREF: _x509_main+1E3Dj
		mov	eax, [esp+2DCh+var_2A4]
		mov	[esp+2DCh+var_2CC], eax
		mov	eax, [esp+2DCh+var_200]
		mov	[esp+2DCh+var_2D0], eax
		mov	eax, [esp+2DCh+var_2B0]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], ebp
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_do_X509_sign
		test	eax, eax
		jz	loc_41B494
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_STORE_CTX_cleanup
		mov	edi, 1
		jmp	loc_41B4B2
; ---------------------------------------------------------------------------

loc_41B641:				; CODE XREF: _x509_main+1E32j
					; _x509_main+1F31j
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_ext_count
		test	eax, eax
		jle	loc_41B568
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_delete_ext
		jmp	short loc_41B641
; ---------------------------------------------------------------------------

loc_41B663:				; CODE XREF: _x509_main+1D31j
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_verify_cert
		test	eax, eax
		jg	loc_41B467
		jmp	loc_41B494
; ---------------------------------------------------------------------------

loc_41B67F:				; CODE XREF: _x509_main+1CFAj
		mov	[esp+2DCh+var_1C0], 0
		cmp	[esp+2DCh+var_1F0], 0
		jz	loc_41B77A
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, [esp+2DCh+var_1F0]
		repne scasb
		not	ecx
		mov	[esp+2DCh+var_2D4], 3F0h
		mov	[esp+2DCh+var_2D8], offset aX509_c ; "x509.c"
		mov	[esp+2DCh+var_2DC], ecx
		mov	[esp+2DCh+var_1F8], ecx
		call	_CRYPTO_malloc
		mov	esi, eax
		test	eax, eax
		mov	ecx, [esp+2DCh+var_1F8]
		jz	loc_41B761
		mov	[esp+2DCh+var_2D4], ecx
		mov	eax, [esp+2DCh+var_1F0]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], esi
		call	_BUF_strlcpy

loc_41B6EF:				; CODE XREF: _x509_main+20F7j
		mov	[esp+2DCh+var_2D4], 0 ;	int
		mov	eax, [esp+2DCh+var_1E4]
		mov	[esp+2DCh+var_2D8], eax	; int
		mov	[esp+2DCh+var_2DC], esi	; char *
		call	_load_serial
		mov	edi, eax
		test	eax, eax
		jz	short loc_41B73D
		mov	[esp+2DCh+var_2D8], 1
		mov	[esp+2DCh+var_2DC], eax
		call	_BN_add_word
		test	eax, eax
		jnz	loc_41B7EC
		mov	[esp+2DCh+var_2D8], offset aAdd_wordFailur ; "add_word failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf

loc_41B73D:				; CODE XREF: _x509_main+1FDEj
					; _x509_main+20DBj
		mov	[esp+2DCh+var_2DC], esi
		call	_CRYPTO_free

loc_41B745:				; CODE XREF: _x509_main+2048j
		mov	[esp+2DCh+var_2DC], edi
		call	_BN_free
		mov	esi, [esp+2DCh+var_1C0]
		test	esi, esi
		jnz	loc_41B430
		jmp	loc_41B494
; ---------------------------------------------------------------------------

loc_41B761:				; CODE XREF: _x509_main+1FA2j
					; _x509_main+2077j
		mov	[esp+2DCh+var_2D8], offset aOutOfMem ; "out of mem\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	short loc_41B745
; ---------------------------------------------------------------------------

loc_41B77A:				; CODE XREF: _x509_main+1F62j
		or	ecx, 0FFFFFFFFh
		mov	edi, [esp+2DCh+var_20C]
		repne scasb
		not	ecx
		lea	edi, [ecx+5]
		mov	[esp+2DCh+var_2D4], 3F0h
		mov	[esp+2DCh+var_2D8], offset aX509_c ; "x509.c"
		mov	[esp+2DCh+var_2DC], edi
		call	_CRYPTO_malloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_41B761
		mov	[esp+2DCh+var_2D4], edi
		mov	eax, [esp+2DCh+var_20C]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], esi
		call	_BUF_strlcpy
		mov	eax, esi

loc_41B7C2:				; CODE XREF: _x509_main+209Ej
		mov	dl, [eax]
		test	dl, dl
		jz	short loc_41B813
		cmp	dl, 2Eh
		jz	short loc_41B810
		inc	eax
		jmp	short loc_41B7C2
; ---------------------------------------------------------------------------

loc_41B7D0:				; CODE XREF: _x509_main+1CECj
		mov	[esp+2DCh+var_2D8], offset aErrorInitial_0 ; "Error initialising X509 store\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		xor	esi, esi
		jmp	loc_41B494
; ---------------------------------------------------------------------------

loc_41B7EC:				; CODE XREF: _x509_main+1FF2j
		lea	eax, [esp+2DCh+var_1C0]
		mov	[esp+2DCh+var_2D0], eax	; int
		mov	[esp+2DCh+var_2D4], edi	; int
		mov	[esp+2DCh+var_2D8], 0 ;	char *
		mov	[esp+2DCh+var_2DC], esi	; char *
		call	_save_serial
		jmp	loc_41B73D
; ---------------------------------------------------------------------------

loc_41B810:				; CODE XREF: _x509_main+209Bj
		mov	byte ptr [eax],	0

loc_41B813:				; CODE XREF: _x509_main+2096j
		mov	[esp+2DCh+var_2D4], edi
		mov	[esp+2DCh+var_2D8], offset a_srl ; ".srl"
		mov	[esp+2DCh+var_2DC], esi
		call	_BUF_strlcat
		jmp	loc_41B6EF
; ---------------------------------------------------------------------------

loc_41B82C:				; CODE XREF: _x509_main+10DBj
		mov	[esp+2DCh+var_2D8], offset aGettingRequest ; "Getting request Private Key\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		cmp	[esp+2DCh+var_1F4], 0
		jz	loc_41BAD9
		mov	[esp+2DCh+var_2C4], offset aRequestKey ; "request key"
		mov	eax, [esp+2DCh+var_1D0]
		mov	[esp+2DCh+var_2C8], eax
		mov	eax, [esp+2DCh+var_1CC]
		mov	[esp+2DCh+var_2CC], eax
		mov	[esp+2DCh+var_2D0], 0
		mov	eax, [esp+2DCh+var_280]
		mov	[esp+2DCh+var_2D4], eax
		mov	eax, [esp+2DCh+var_1F4]
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_load_key
		mov	esi, eax
		test	eax, eax
		jz	loc_41B4C9
		mov	[esp+2DCh+var_2D8], offset aGeneratingCert ; "Generating certificate request\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	eax, [esp+2DCh+var_200]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], esi
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_to_X509_REQ
		mov	edi, eax
		mov	[esp+2DCh+var_2AC], eax
		mov	[esp+2DCh+var_2DC], esi
		call	_EVP_PKEY_free
		test	edi, edi
		jz	loc_41BABB
		cmp	[esp+2DCh+var_22C], 0
		jz	loc_41BB49
		mov	[esp+2DCh+var_22C], 1
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41B8FF:				; CODE XREF: _x509_main+10C4j
		cmp	[esp+2DCh+var_250], 0
		jnz	loc_41A7FA
		mov	[esp+2DCh+var_2D8], offset aGettingPrivate ; "Getting Private key\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		cmp	[esp+2DCh+var_2B4], 0
		jz	loc_41BD02

loc_41B92D:				; CODE XREF: _x509_main+261Ej
		cmp	[esp+2DCh+var_288], 0
		jnz	short loc_41B950
		mov	[esp+2DCh+var_2D4], 36Ah ; unsigned int
		mov	[esp+2DCh+var_2D8], offset aX509_c ; "x509.c"
		mov	[esp+2DCh+var_2DC], offset aNeed_rand_1	; "need_rand"
		call	__assert
; ---------------------------------------------------------------------------

loc_41B950:				; CODE XREF: _x509_main+2202j
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_pubkey
		mov	esi, eax
		mov	eax, [esp+2DCh+var_2B4]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], esi
		call	_EVP_PKEY_copy_parameters
		mov	[esp+2DCh+var_2D8], 1
		mov	[esp+2DCh+var_2DC], esi
		call	_EVP_PKEY_save_parameters
		mov	[esp+2DCh+var_2DC], esi
		call	_EVP_PKEY_free
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_subject_name
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_issuer_name
		test	eax, eax
		jz	loc_41BABB
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	eax, [eax]
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_gmtime_adj
		test	eax, eax
		jz	loc_41BABB
		mov	eax, [ebp+0]
		mov	eax, [eax+10h]
		mov	eax, [eax+4]
		mov	[esp+2DCh+var_2D0], 0
		mov	[esp+2DCh+var_2D4], 0
		mov	edx, [esp+2DCh+var_220]
		mov	[esp+2DCh+var_2D8], edx
		mov	[esp+2DCh+var_2DC], eax
		call	_X509_time_adj_ex
		test	eax, eax
		jz	loc_41BABB
		mov	eax, [esp+2DCh+var_2B4]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_pubkey
		test	eax, eax
		jz	loc_41BABB
		cmp	[esp+2DCh+var_1EC], 0
		jnz	loc_41BCE0

loc_41BA18:				; CODE XREF: _x509_main+25BAj
		cmp	[esp+2DCh+var_298], 0
		jz	short loc_41BA98
		mov	[esp+2DCh+var_2D8], 2
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_set_version
		mov	[esp+2DCh+var_2C8], 0
		mov	[esp+2DCh+var_2CC], 0
		mov	[esp+2DCh+var_2D0], 0
		mov	[esp+2DCh+var_2D4], ebp
		mov	[esp+2DCh+var_2D8], ebp
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509V3_set_ctx
		mov	edi, [esp+2DCh+var_298]
		mov	[esp+2DCh+var_2D8], edi
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2DC], eax
		call	_X509V3_set_nconf
		mov	[esp+2DCh+var_2D0], ebp
		mov	eax, [esp+2DCh+var_270]
		mov	[esp+2DCh+var_2D4], eax
		lea	eax, [esp+2DCh+var_1A4]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], edi
		call	_X509V3_EXT_add_nconf
		test	eax, eax
		jz	short loc_41BABB

loc_41BA98:				; CODE XREF: _x509_main+22EDj
		mov	eax, [esp+2DCh+var_200]
		mov	[esp+2DCh+var_2D4], eax
		mov	eax, [esp+2DCh+var_2B4]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_sign
		test	eax, eax
		jnz	loc_41A81E

loc_41BABB:				; CODE XREF: _x509_main+21ABj
					; _x509_main+2268j ...
		mov	esi, [esp+2DCh+var_1FC]
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41BAD9:				; CODE XREF: _x509_main+2119j
		mov	esi, [esp+2DCh+var_1FC]
		mov	[esp+2DCh+var_2D8], offset aNoRequestKeyFi ; "no request key file specified\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41BAFF:				; CODE XREF: _x509_main+1325j
		mov	[esp+2DCh+var_2D8], offset aSet_serial_0 ; "-set_serial"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41BB7C
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], 0
		call	_s2i_ASN1_INTEGER
		mov	[esp+2DCh+var_29C], eax
		test	eax, eax
		jnz	loc_419B69
		jmp	loc_419CE0
; ---------------------------------------------------------------------------

loc_41BB49:				; CODE XREF: _x509_main+21B9j
		mov	edi, [esp+2DCh+var_2AC]
		mov	[esp+2DCh+var_2D8], edi
		mov	esi, [esp+2DCh+var_1FC]
		mov	[esp+2DCh+var_2DC], esi
		call	_X509_REQ_print
		mov	[esp+2DCh+var_2D8], edi
		mov	[esp+2DCh+var_2DC], esi
		call	_PEM_write_bio_X509_REQ
		mov	[esp+2DCh+var_22C], 1
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41BB7C:				; CODE XREF: _x509_main+23E9j
		mov	[esp+2DCh+var_2D8], offset aAddtrust ; "-addtrust"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41BC0C
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], eax
		call	_OBJ_txt2obj
		mov	edi, eax
		test	eax, eax
		jz	short loc_41BBEB
		cmp	[esp+2DCh+var_294], 0
		jnz	short loc_41BBCB
		call	_sk_new_null
		mov	[esp+2DCh+var_294], eax

loc_41BBCB:				; CODE XREF: _x509_main+2490j
		mov	[esp+2DCh+var_2D8], edi
		mov	eax, [esp+2DCh+var_294]
		mov	[esp+2DCh+var_2DC], eax
		call	_sk_push
		mov	[esp+2DCh+var_204], 1
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41BBEB:				; CODE XREF: _x509_main+2489j
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aInvalidTrustOb ; "Invalid trust object value %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		jmp	loc_419CE0
; ---------------------------------------------------------------------------

loc_41BC0C:				; CODE XREF: _x509_main+2466j
		mov	[esp+2DCh+var_2D8], offset aAddreject ;	"-addreject"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41BC9C
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], eax
		call	_OBJ_txt2obj
		mov	edi, eax
		test	eax, eax
		jz	short loc_41BC7B
		cmp	[esp+2DCh+var_290], 0
		jnz	short loc_41BC5B
		call	_sk_new_null
		mov	[esp+2DCh+var_290], eax

loc_41BC5B:				; CODE XREF: _x509_main+2520j
		mov	[esp+2DCh+var_2D8], edi
		mov	eax, [esp+2DCh+var_290]
		mov	[esp+2DCh+var_2DC], eax
		call	_sk_push
		mov	[esp+2DCh+var_204], 1
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41BC7B:				; CODE XREF: _x509_main+2519j
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aInvalidRejectO ; "Invalid reject object value %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		jmp	loc_419CE0
; ---------------------------------------------------------------------------

loc_41BC9C:				; CODE XREF: _x509_main+24F6j
		mov	[esp+2DCh+var_2D8], offset aSetalias ; "-setalias"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	loc_41BD59
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_1E8], eax
		mov	[esp+2DCh+var_204], 1
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41BCE0:				; CODE XREF: _x509_main+22E2j
					; _x509_main+25D0j
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_ext_count
		test	eax, eax
		jle	loc_41BA18
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_delete_ext
		jmp	short loc_41BCE0
; ---------------------------------------------------------------------------

loc_41BD02:				; CODE XREF: _x509_main+21F7j
		mov	[esp+2DCh+var_2C4], offset aPrivateKey_3 ; "Private key"
		mov	eax, [esp+2DCh+var_1D0]
		mov	[esp+2DCh+var_2C8], eax
		mov	eax, [esp+2DCh+var_1CC]
		mov	[esp+2DCh+var_2CC], eax
		mov	[esp+2DCh+var_2D0], 0
		mov	eax, [esp+2DCh+var_280]
		mov	[esp+2DCh+var_2D4], eax
		mov	eax, [esp+2DCh+var_1F4]
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_load_key
		mov	[esp+2DCh+var_2B4], eax
		test	eax, eax
		jnz	loc_41B92D
		jmp	loc_41B4C9
; ---------------------------------------------------------------------------

loc_41BD59:				; CODE XREF: _x509_main+2586j
		mov	[esp+2DCh+var_2D8], offset aCertopt ; "-certopt"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	loc_41BFAC
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2D8], eax
		lea	eax, [esp+2DCh+var_1C4]
		mov	[esp+2DCh+var_2DC], eax
		call	_set_cert_ex
		test	eax, eax
		jnz	loc_419B69
		jmp	loc_419CE0
; ---------------------------------------------------------------------------

loc_41BDA6:				; CODE XREF: _x509_main+1024j
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_alias_get0
		test	eax, eax
		jz	loc_41C056
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aS_8	; "%s\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41BDDB:				; CODE XREF: _x509_main+16FBj
		mov	eax, [esi+14h]
		mov	eax, [eax+10h]
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BN_print
		jmp	loc_41AE4E
; ---------------------------------------------------------------------------

loc_41BDF6:				; CODE XREF: _x509_main+FF3j
		mov	[esp+2DCh+var_2D8], offset aSerial_0 ; "serial="
		mov	edi, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_printf
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_serialNumber
		mov	[esp+2DCh+var_2D8], eax
		mov	[esp+2DCh+var_2DC], edi
		call	_i2a_ASN1_INTEGER
		mov	[esp+2DCh+var_2D8], offset asc_46167F ;	"\n"
		mov	[esp+2DCh+var_2DC], edi
		call	_BIO_printf
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41BE33:				; CODE XREF: _x509_main+FE6j
		mov	esi, [esp+2DCh+var_1C8]
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_subject_name
		mov	[esp+2DCh+var_2D0], esi
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aSubject_2 ;	"subject= "
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_print_name
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41BE63:				; CODE XREF: _x509_main+FD9j
		mov	esi, [esp+2DCh+var_1C8]
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_issuer_name
		mov	[esp+2DCh+var_2D0], esi
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aIssuer_1 ; "issuer=	"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_print_name
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41BE93:				; CODE XREF: _x509_main+F99j
		mov	[esp+2DCh+var_2D8], offset aCertificateW_0 ; "Certificate will expire\n"
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_419D4B
; ---------------------------------------------------------------------------

loc_41BEAD:				; CODE XREF: _x509_main+100Aj
					; _x509_main+2867j
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get1_email
		mov	edi, eax

loc_41BEB7:				; CODE XREF: _x509_main+2877j
		xor	esi, esi

loc_41BEB9:				; CODE XREF: _x509_main+27BEj
		mov	[esp+2DCh+var_2DC], edi
		call	_sk_num
		cmp	esi, eax
		jge	loc_41BF7C
		mov	[esp+2DCh+var_2D8], esi
		mov	[esp+2DCh+var_2DC], edi
		call	_sk_value
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aS_8	; "%s\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		inc	esi
		jmp	short loc_41BEB9
; ---------------------------------------------------------------------------

loc_41BEF0:				; CODE XREF: _x509_main+FFDj
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get_serialNumber
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], eax
		call	_ASN1_INTEGER_to_BN
		mov	esi, eax
		test	eax, eax
		jz	loc_41B4C9
		mov	[esp+2DCh+var_2D8], 1
		mov	[esp+2DCh+var_2DC], eax
		call	_BN_add_word
		test	eax, eax
		jz	loc_41B4C9
		mov	[esp+2DCh+var_2D8], 0
		mov	[esp+2DCh+var_2DC], esi
		call	_BN_to_ASN1_INTEGER
		mov	edi, eax
		test	eax, eax
		jz	loc_41B4C9
		mov	[esp+2DCh+var_2DC], esi
		call	_BN_free
		mov	[esp+2DCh+var_2D8], edi
		mov	esi, [esp+2DCh+var_1FC]
		mov	[esp+2DCh+var_2DC], esi
		call	_i2a_ASN1_INTEGER
		mov	[esp+2DCh+var_2DC], edi
		call	_ASN1_INTEGER_free
		mov	[esp+2DCh+var_2D8], offset asc_46167F ;	"\n"
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_puts
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41BF7C:				; CODE XREF: _x509_main+2793j
		mov	[esp+2DCh+var_2DC], edi
		call	_X509_email_free
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41BF89:				; CODE XREF: _x509_main+1017j
		mov	eax, [esp+2DCh+var_254]
		cmp	[esp+2DCh+var_258], eax
		jz	loc_41BEAD
		mov	[esp+2DCh+var_2DC], ebp
		call	_X509_get1_ocsp
		mov	edi, eax
		jmp	loc_41BEB7
; ---------------------------------------------------------------------------

loc_41BFAC:				; CODE XREF: _x509_main+2643j
		mov	[esp+2DCh+var_2D8], offset aNameopt_1 ;	"-nameopt"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	loc_41C0A5
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2D8], eax
		lea	eax, [esp+2DCh+var_1C8]
		mov	[esp+2DCh+var_2DC], eax
		call	_set_name_ex
		test	eax, eax
		jnz	loc_419B69
		jmp	loc_419CE0
; ---------------------------------------------------------------------------

loc_41BFF9:				; CODE XREF: _x509_main+1834j
		mov	[esp+2DCh+var_2D8], offset aYes_1 ; "Yes\n"
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf
		jmp	loc_41AF82
; ---------------------------------------------------------------------------

loc_41C00E:				; CODE XREF: _x509_main+1704j
		mov	eax, [esi+14h]
		mov	eax, [eax+18h]
		mov	[esp+2DCh+var_2D8], eax
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BN_print
		jmp	loc_41AE4E
; ---------------------------------------------------------------------------

loc_41C029:				; CODE XREF: _x509_main+183Cj
		mov	[esp+2DCh+var_2D4], edi
		mov	[esp+2DCh+var_2D8], offset aYesWarningCode ; "Yes (WARNING code=%d)\n"
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf
		jmp	loc_41AF82
; ---------------------------------------------------------------------------

loc_41C042:				; CODE XREF: _x509_main+16DCj
		mov	esi, [esp+2DCh+var_1FC]
		mov	[esp+2DCh+var_2D8], offset aModulusUnava_0 ; "Modulus=unavailable\n"
		jmp	loc_41ADAD
; ---------------------------------------------------------------------------

loc_41C056:				; CODE XREF: _x509_main+2688j
		mov	[esp+2DCh+var_2D8], offset aNoAlias ; "<No Alias>\n"
		mov	eax, [esp+2DCh+var_2B8]
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_puts
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41C06F:				; CODE XREF: _x509_main+17DDj
		mov	[esp+2DCh+var_2D8], offset aYes_1 ; "Yes\n"
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf
		jmp	loc_41AF2F
; ---------------------------------------------------------------------------

loc_41C084:				; CODE XREF: _x509_main+1771j
		mov	ebx, [esp+2DCh+var_1E8]
		jmp	loc_41A81E
; ---------------------------------------------------------------------------

loc_41C090:				; CODE XREF: _x509_main+17E5j
		mov	[esp+2DCh+var_2D8], offset aNo_1 ; "No\n"
		mov	[esp+2DCh+var_2DC], esi
		call	_BIO_printf
		jmp	loc_41AF2F
; ---------------------------------------------------------------------------

loc_41C0A5:				; CODE XREF: _x509_main+2896j
		mov	[esp+2DCh+var_2D8], offset aEngine_14 ;	"-engine"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C0D7
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2A8], eax
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C0D7:				; CODE XREF: _x509_main+298Fj
		mov	[esp+2DCh+var_2D8], offset aC_3	; "-C"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C109
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_224], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C109:				; CODE XREF: _x509_main+29C1j
		mov	[esp+2DCh+var_2D8], offset aEmail ; "-email"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C13B
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_258], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C13B:				; CODE XREF: _x509_main+29F3j
		mov	[esp+2DCh+var_2D8], offset aOcsp_uri ; "-ocsp_uri"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C16D
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_254], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C16D:				; CODE XREF: _x509_main+2A25j
		mov	[esp+2DCh+var_2D8], offset aSerial_1 ; "-serial"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C19F
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_24C], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C19F:				; CODE XREF: _x509_main+2A57j
		mov	[esp+2DCh+var_2D8], offset aNext_serial	; "-next_serial"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C1CE
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_260], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C1CE:				; CODE XREF: _x509_main+2A89j
		mov	[esp+2DCh+var_2D8], offset aModulus_5 ;	"-modulus"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C200
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_21C], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C200:				; CODE XREF: _x509_main+2AB8j
		mov	[esp+2DCh+var_2D8], offset aPubkey_0 ; "-pubkey"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C232
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_218], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C232:				; CODE XREF: _x509_main+2AEAj
		mov	[esp+2DCh+var_2D8], offset aX509toreq ;	"-x509toreq"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C264
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_250], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C264:				; CODE XREF: _x509_main+2B1Cj
		mov	[esp+2DCh+var_2D8], offset aText_9 ; "-text"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C293
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_26C], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C293:				; CODE XREF: _x509_main+2B4Ej
		mov	[esp+2DCh+var_2D8], offset aHash_0 ; "-hash"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jz	short loc_41C2C7
		mov	[esp+2DCh+var_2D8], offset aSubject_hash ; "-subject_hash"
		mov	[esp+2DCh+var_2DC], edx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C2DD

loc_41C2C7:				; CODE XREF: _x509_main+2B7Dj
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_240], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C2DD:				; CODE XREF: _x509_main+2B95j
		mov	[esp+2DCh+var_2D8], offset aSubject_hash_o ; "-subject_hash_old"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C30F
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_234], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C30F:				; CODE XREF: _x509_main+2BC7j
		mov	[esp+2DCh+var_2D8], offset aIssuer_hash	; "-issuer_hash"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C341
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_23C], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C341:				; CODE XREF: _x509_main+2BF9j
		mov	[esp+2DCh+var_2D8], offset aIssuer_hash_ol ; "-issuer_hash_old"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C373
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_230], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C373:				; CODE XREF: _x509_main+2C2Bj
		mov	[esp+2DCh+var_2D8], offset aSubject_3 ;	"-subject"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C3A5
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_248], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C3A5:				; CODE XREF: _x509_main+2C5Dj
		mov	[esp+2DCh+var_2D8], offset aIssuer_2 ; "-issuer"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C3D7
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_244], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C3D7:				; CODE XREF: _x509_main+2C8Fj
		mov	[esp+2DCh+var_2D8], offset aFingerprint_0 ; "-fingerprint"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C409
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_210], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C409:				; CODE XREF: _x509_main+2CC1j
		mov	[esp+2DCh+var_2D8], offset aDates ; "-dates"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C442
		mov	eax, [esp+2DCh+var_27C]
		inc	eax
		mov	[esp+2DCh+var_268], eax
		add	[esp+2DCh+var_27C], 2
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_264], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C442:				; CODE XREF: _x509_main+2CF3j
		mov	[esp+2DCh+var_2D8], offset aPurpose ; "-purpose"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C474
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_214], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C474:				; CODE XREF: _x509_main+2D2Cj
		mov	[esp+2DCh+var_2D8], offset aStartdate_0	; "-startdate"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C4A3
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_268], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C4A3:				; CODE XREF: _x509_main+2D5Ej
		mov	[esp+2DCh+var_2D8], offset aEnddate_0 ;	"-enddate"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C4D2
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_264], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C4D2:				; CODE XREF: _x509_main+2D8Dj
		mov	[esp+2DCh+var_2D8], offset aCheckend ; "-checkend"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C51A
		dec	ebp
		jz	loc_419CE0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+2DCh+var_2DC], eax	; char *
		call	_atoi
		mov	[esp+2DCh+var_1D4], eax
		mov	[esp+2DCh+var_1D8], 1
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C51A:				; CODE XREF: _x509_main+2DBCj
		mov	[esp+2DCh+var_2D8], offset aNoout_10 ; "-noout"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C54C
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_22C], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C54C:				; CODE XREF: _x509_main+2E04j
		mov	[esp+2DCh+var_2D8], offset aTrustout ; "-trustout"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jz	short loc_41C596
		mov	[esp+2DCh+var_2D8], offset aClrtrust ; "-clrtrust"
		mov	[esp+2DCh+var_2DC], edx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C5A8
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_1E0], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C596:				; CODE XREF: _x509_main+2E36j
		mov	esi, ebx
		mov	[esp+2DCh+var_204], 1
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C5A8:				; CODE XREF: _x509_main+2E4Ej
		mov	[esp+2DCh+var_2D8], offset aClrreject ;	"-clrreject"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C5DA
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_1DC], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C5DA:				; CODE XREF: _x509_main+2E92j
		mov	[esp+2DCh+var_2D8], offset aAlias ; "-alias"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C60C
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_228], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C60C:				; CODE XREF: _x509_main+2EC4j
		mov	[esp+2DCh+var_2D8], offset aCacreateserial ; "-CAcreateserial"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C63E
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_1E4], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C63E:				; CODE XREF: _x509_main+2EF6j
		mov	[esp+2DCh+var_2D8], offset aClrext ; "-clrext"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jz	short loc_41C6A4
		mov	[esp+2DCh+var_2D8], offset aCrlext ; "-crlext"
		mov	[esp+2DCh+var_2DC], edx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jz	short loc_41C6D1
		mov	[esp+2DCh+var_2D8], offset aOcspid ; "-ocspid"
		mov	[esp+2DCh+var_2DC], edx	; char *
		mov	[esp+2DCh+var_298], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+2DCh+var_298]
		jnz	short loc_41C6B6
		inc	[esp+2DCh+var_27C]
		mov	eax, [esp+2DCh+var_27C]
		mov	[esp+2DCh+var_238], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C6A4:				; CODE XREF: _x509_main+2F28j
		mov	esi, ebx
		mov	[esp+2DCh+var_1EC], 1
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C6B6:				; CODE XREF: _x509_main+2F5Cj
		inc	edx
		mov	[esp+2DCh+var_2DC], edx
		call	_EVP_get_digestbyname
		test	eax, eax
		jz	short loc_41C6F8
		mov	[esp+2DCh+var_200], eax
		mov	esi, ebx
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C6D1:				; CODE XREF: _x509_main+2F40j
		mov	[esp+2DCh+var_2D8], offset aUseClrextInste ; "use -clrext instead of -crlext\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		mov	esi, ebx
		mov	[esp+2DCh+var_1EC], 1
		jmp	loc_419B69
; ---------------------------------------------------------------------------

loc_41C6F8:				; CODE XREF: _x509_main+2F91j
		mov	eax, [ebx]
		mov	[esp+2DCh+var_2D4], eax
		mov	[esp+2DCh+var_2D8], offset aUnknownOpti_13 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2DCh+var_2DC], eax
		call	_BIO_printf
		jmp	loc_419CE0
_x509_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_genrsa_cb	proc near		; DATA XREF: _genrsa_main+3Ao

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 28h
		mov	eax, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], 2Ah
		test	eax, eax
		jnz	short loc_41C790
		mov	[esp+2Ch+var_10], 2Eh

loc_41C73A:				; CODE XREF: _genrsa_cb+7Aj
					; _genrsa_cb+83j ...
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_24], 1
		lea	edx, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_write
		mov	eax, [ebx+4]
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0Bh
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_ctrl
		mov	eax, 1
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41C790:				; CODE XREF: _genrsa_cb+13j
		cmp	eax, 1
		jnz	short loc_41C7A0
		mov	[esp+2Ch+var_10], 2Bh
		jmp	short loc_41C73A
; ---------------------------------------------------------------------------
		align 10h

loc_41C7A0:				; CODE XREF: _genrsa_cb+73j
		cmp	eax, 2
		jz	short loc_41C73A
		cmp	eax, 3
		jnz	short loc_41C73A
		mov	[esp+2Ch+var_10], 0Ah
		jmp	short loc_41C73A
_genrsa_cb	endp

; ---------------------------------------------------------------------------
		jmp	short _genrsa_main
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _genrsa_main
_genrsa_main	proc near		; CODE XREF: .text:0041C7B1j
					; DATA XREF: .data:0045510Co

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	[esp+7Ch+var_38], 400h
		mov	[esp+7Ch+var_34], 0
		call	_BN_new
		mov	[esp+7Ch+var_50], eax
		test	eax, eax
		jz	loc_41C880
		mov	[esp+7Ch+var_28], 2
		mov	ebx, ds:_bio_err
		mov	[esp+7Ch+var_24], ebx
		mov	[esp+7Ch+var_20], offset _genrsa_cb
		test	ebx, ebx
		jz	loc_41CDDF

loc_41C80A:				; CODE XREF: _genrsa_main+633j
					; _genrsa_main+664j
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], ebx
		call	_load_config
		test	eax, eax
		jnz	short loc_41C890
		mov	[esp+7Ch+var_54], 0

loc_41C826:				; CODE XREF: _genrsa_main+2F0j
					; _genrsa_main+61Aj ...
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	_BN_free
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jz	short loc_41C880
		mov	ebx, 1

loc_41C83F:				; CODE XREF: _genrsa_main+32Bj
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_free_all

loc_41C84B:				; CODE XREF: _genrsa_main+C5j
		mov	eax, [esp+7Ch+var_34]
		test	eax, eax
		jz	short loc_41C85B
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_free

loc_41C85B:				; CODE XREF: _genrsa_main+91j
		test	ebx, ebx
		jz	short loc_41C86C
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors

loc_41C86C:				; CODE XREF: _genrsa_main+9Dj
		mov	eax, ebx
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41C880:				; CODE XREF: _genrsa_main+22j
					; _genrsa_main+78j
		mov	ebx, 1
		jmp	short loc_41C84B
; ---------------------------------------------------------------------------
		align 10h

loc_41C890:				; CODE XREF: _genrsa_main+5Cj
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	[esp+7Ch+var_54], eax
		test	eax, eax
		jz	loc_41CE7E
		mov	eax, [esp+7Ch+arg_4]
		lea	ebx, [eax+4]
		mov	eax, [esp+7Ch+arg_0]
		lea	ebp, [eax-1]
		mov	[esp+7Ch+var_48], 0
		mov	[esp+7Ch+var_4C], 0
		mov	[esp+7Ch+var_40], 0
		mov	[esp+7Ch+var_5C], 0
		mov	[esp+7Ch+var_58], 10001h
		mov	[esp+7Ch+var_44], 0
		test	ebp, ebp
		jg	short loc_41C91D
		jmp	loc_41C9A0
; ---------------------------------------------------------------------------
		align 10h

loc_41C900:				; CODE XREF: _genrsa_main+16Dj
		dec	ebp
		jz	loc_41CC50
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_5C], eax
		add	ebx, 4

loc_41C911:				; CODE XREF: _genrsa_main+338j
					; _genrsa_main+348j ...
		add	ebx, 4
		dec	ebp
		test	ebp, ebp
		jle	loc_41C9A0

loc_41C91D:				; CODE XREF: _genrsa_main+12Fj
					; _genrsa_main+1D6j
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aOut_17 ; "-out"
		mov	ecx, 5
		repe cmpsb
		jz	short loc_41C900
		mov	edi, offset a3	; "-3"
		mov	esi, eax
		mov	ecx, 3
		repe cmpsb
		jz	loc_41CAF0
		mov	edi, offset aF4	; "-F4"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jz	loc_41CB00
		mov	edi, offset aF4_0 ; "-f4"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jz	loc_41CB00
		mov	edi, offset aEngine_15 ; "-engine"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	loc_41CB10
		dec	ebp
		jz	loc_41CC50
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_4C], eax
		add	ebx, 4
		add	ebx, 4
		dec	ebp
		test	ebp, ebp
		jg	short loc_41C91D
		nop
		lea	esi, [esi+0]

loc_41C9A0:				; CODE XREF: _genrsa_main+131j
					; _genrsa_main+157j ...
		call	_ERR_load_crypto_strings
		lea	eax, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_6C], eax ;	int
		mov	[esp+7Ch+var_70], 0 ; int
		mov	eax, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_74], eax ;	char *
		mov	[esp+7Ch+var_78], 0 ; char *
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax ;	int
		call	_app_passwd
		test	eax, eax
		jz	loc_41CE29
		mov	[esp+7Ch+var_74], 0
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_setup_engine
		mov	ebx, eax
		mov	esi, [esp+7Ch+var_5C]
		test	esi, esi
		jz	loc_41CF8E
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 5
		mov	[esp+7Ch+var_78], 6Ch
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_41CFC9

loc_41CA31:				; CODE XREF: _genrsa_main+7F6j
		mov	[esp+7Ch+var_74], 1
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_app_RAND_load_file
		test	eax, eax
		jnz	loc_41CE6D
		mov	ecx, [esp+7Ch+var_48]
		test	ecx, ecx
		jz	loc_41CFF6

loc_41CA62:				; CODE XREF: _genrsa_main+6B9j
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_7C], eax
		call	_app_RAND_load_files
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aLdSemiRandom_3 ; "%ld	semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf

loc_41CA87:				; CODE XREF: _genrsa_main+6B3j
					; _genrsa_main+83Dj ...
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aGeneratingRsaP ; "Generating RSA private key,	%d bit long"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_7C], ebx
		call	_RSA_new_method
		mov	esi, eax
		test	eax, eax
		jz	loc_41C826
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	_BN_set_word
		test	eax, eax
		jnz	loc_41CEB4

loc_41CAD2:				; CODE XREF: _genrsa_main+716j
		mov	ebx, 1

loc_41CAD7:				; CODE XREF: _genrsa_main+7BBj
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_7C], eax
		call	_BN_free
		mov	[esp+7Ch+var_7C], esi
		call	_RSA_free
		jmp	loc_41C83F
; ---------------------------------------------------------------------------

loc_41CAF0:				; CODE XREF: _genrsa_main+17Dj
		mov	[esp+7Ch+var_58], 3
		jmp	loc_41C911
; ---------------------------------------------------------------------------
		align 10h

loc_41CB00:				; CODE XREF: _genrsa_main+191j
					; _genrsa_main+1A5j
		mov	[esp+7Ch+var_58], 10001h
		jmp	loc_41C911
; ---------------------------------------------------------------------------
		align 10h

loc_41CB10:				; CODE XREF: _genrsa_main+1B9j
		mov	edi, offset aRand_5 ; "-rand"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_41CC10
		mov	edi, offset aDes ; "-des"
		mov	esi, eax
		mov	ecx, 5
		repe cmpsb
		jz	loc_41CE51
		mov	edi, offset aDes3 ; "-des3"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_41CE5F
		mov	edi, offset aIdea ; "-idea"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_41CE43
		mov	edi, offset aSeed ; "-seed"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_41CE98
		mov	edi, offset aAes128 ; "-aes128"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jz	loc_41CEA6
		mov	edi, offset aAes192 ; "-aes192"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jz	loc_41CF80
		mov	edi, offset aAes256 ; "-aes256"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jz	loc_41CFBB
		mov	edi, offset aCamellia128 ; "-camellia128"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jz	loc_41CFDA
		mov	edi, offset aCamellia192 ; "-camellia192"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jz	loc_41CFE8
		mov	edi, offset aCamellia256 ; "-camellia256"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jz	loc_41D020
		mov	edi, offset aPassout_3 ; "-passout"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_41CC22
		dec	ebp
		jz	short loc_41CC50
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_40], eax
		add	ebx, 4
		jmp	loc_41C911
; ---------------------------------------------------------------------------
		align 10h

loc_41CC10:				; CODE XREF: _genrsa_main+35Ej
		dec	ebp
		jz	short loc_41CC50
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_48], eax
		add	ebx, 4
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41CC22:				; CODE XREF: _genrsa_main+43Aj
		lea	edx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], offset aD_6 ;	"%d"
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_sscanf
		test	eax, eax
		jz	short loc_41CC50
		mov	edi, [esp+7Ch+var_38]
		test	edi, edi
		jns	loc_41C9A0
		lea	esi, [esi+0]

loc_41CC50:				; CODE XREF: _genrsa_main+141j
					; _genrsa_main+1C0j ...
		mov	[esp+7Ch+var_78], offset aUsageGenrsaArg ; "usage: genrsa [args] [numbits]\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aDesEncryptTheG ; " -des	     encrypt the generated "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aDes3EncryptThe ; " -des3	     encrypt the generated "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aIdeaEncryptThe ; " -idea	     encrypt the generated "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aSeed_0 ; " -seed\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aEncryptPemOu_3 ; "		     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aAes128Aes192_1 ; " -aes128, -aes192, -aes256\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aEncryptPemOu_4 ; "		     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aCamellia128C_1 ; " -camellia128, -camellia192, -camellia2"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aEncryptPemOu_5 ; "		     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOutFileOutpu_1 ; " -out file	     output the	key to 'fil"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aPassoutArgOu_2 ; " -passout arg    output file pass phras"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aF4UseF40x10001 ; " -f4	     use F4 (0x10001) for t"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset a3Use3ForTheEVa ; " -3		     use 3 for the E value\"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aEngineEUseE_12 ; " -engine e	     use engine	e, possibly"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_70], 3Bh
		mov	[esp+7Ch+var_74], 3Bh
		mov	[esp+7Ch+var_78], offset aRandFileCfil_2 ; " -rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aLoadTheFileO_2 ; "		     load the file (or the "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aTheRandomNum_2 ; "		     the random	number gene"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_41C826
; ---------------------------------------------------------------------------

loc_41CDDF:				; CODE XREF: _genrsa_main+44j
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_41C80A
		mov	edi, ds:__imp___iob
		lea	edx, [edi+40h]
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], 10h
		mov	[esp+7Ch+var_78], 6Ah
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_41C80A
; ---------------------------------------------------------------------------

loc_41CE29:				; CODE XREF: _genrsa_main+214j
		mov	[esp+7Ch+var_78], offset aErrorGettin_10 ; "Error getting password\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_41C826
; ---------------------------------------------------------------------------

loc_41CE43:				; CODE XREF: _genrsa_main+39Aj
		call	_EVP_idea_cbc
		mov	[esp+7Ch+var_44], eax
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41CE51:				; CODE XREF: _genrsa_main+372j
		call	_EVP_des_cbc
		mov	[esp+7Ch+var_44], eax
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41CE5F:				; CODE XREF: _genrsa_main+386j
		call	_EVP_des_ede3_cbc
		mov	[esp+7Ch+var_44], eax
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41CE6D:				; CODE XREF: _genrsa_main+290j
		mov	edx, [esp+7Ch+var_48]
		test	edx, edx
		jz	loc_41CA87
		jmp	loc_41CA62
; ---------------------------------------------------------------------------

loc_41CE7E:				; CODE XREF: _genrsa_main+E3j
		mov	[esp+7Ch+var_78], offset aUnableToCrea_0 ; "unable to create BIO for output\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_41C826
; ---------------------------------------------------------------------------

loc_41CE98:				; CODE XREF: _genrsa_main+3AEj
		call	_EVP_seed_cbc
		mov	[esp+7Ch+var_44], eax
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41CEA6:				; CODE XREF: _genrsa_main+3C2j
		call	_EVP_aes_128_cbc
		mov	[esp+7Ch+var_44], eax
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41CEB4:				; CODE XREF: _genrsa_main+30Cj
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_70], eax
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	_RSA_generate_key_ex
		test	eax, eax
		jz	loc_41CAD2
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_app_RAND_write_file
		mov	eax, [esi+14h]
		mov	edx, [eax+4]
		test	edx, edx
		jle	loc_41D02E
		mov	eax, [eax]
		lea	ecx, [eax+edx*4]

loc_41CF04:				; CODE XREF: _genrsa_main+74Bj
		mov	edx, [eax]
		add	eax, 4
		cmp	eax, ecx
		jnz	short loc_41CF04
		mov	eax, edx

loc_41CF0F:				; CODE XREF: _genrsa_main+870j
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aEIsLd0xLx ; "e is %ld	(0x%lX)\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, [esp+7Ch+var_34]
		mov	[esp+7Ch+var_30], eax
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_2C], eax
		lea	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_64], eax
		mov	[esp+7Ch+var_68], offset _password_callback
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], esi
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_PEM_write_bio_RSAPrivateKey
		xor	ebx, ebx
		test	eax, eax
		setz	bl
		jmp	loc_41CAD7
; ---------------------------------------------------------------------------

loc_41CF80:				; CODE XREF: _genrsa_main+3D6j
		call	_EVP_aes_192_cbc
		mov	[esp+7Ch+var_44], eax
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41CF8E:				; CODE XREF: _genrsa_main+23Fj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 6Ah
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_ctrl
		jmp	loc_41CA31
; ---------------------------------------------------------------------------

loc_41CFBB:				; CODE XREF: _genrsa_main+3EAj
		call	_EVP_aes_256_cbc
		mov	[esp+7Ch+var_44], eax
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41CFC9:				; CODE XREF: _genrsa_main+26Bj
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_perror
		jmp	loc_41C826
; ---------------------------------------------------------------------------

loc_41CFDA:				; CODE XREF: _genrsa_main+3FEj
		call	_EVP_camellia_128_cbc
		mov	[esp+7Ch+var_44], eax
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41CFE8:				; CODE XREF: _genrsa_main+412j
		call	_EVP_camellia_192_cbc
		mov	[esp+7Ch+var_44], eax
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41CFF6:				; CODE XREF: _genrsa_main+29Cj
		call	_RAND_status
		test	eax, eax
		jnz	loc_41CA87
		mov	[esp+7Ch+var_78], offset aWarningNotMu_1 ; "warning, not much extra random data, co"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_41CA87
; ---------------------------------------------------------------------------
		align 10h

loc_41D020:				; CODE XREF: _genrsa_main+426j
		call	_EVP_camellia_256_cbc
		mov	[esp+7Ch+var_44], eax
		jmp	loc_41C911
; ---------------------------------------------------------------------------

loc_41D02E:				; CODE XREF: _genrsa_main+739j
		xor	eax, eax
		jmp	loc_41CF0F
_genrsa_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _gendsa_main
_gendsa_main	proc near		; DATA XREF: .data:00455118o

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	[esp+6Ch+var_20], 0
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_41D6A0

loc_41D05D:				; CODE XREF: _gendsa_main+674j
					; _gendsa_main+6A5j
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_41D190
		mov	eax, [esp+6Ch+arg_4]
		lea	ebx, [eax+4]
		mov	eax, [esp+6Ch+arg_0]
		lea	ebp, [eax-1]
		test	ebp, ebp
		jle	loc_41D1E0
		mov	[esp+6Ch+var_3C], 0
		mov	[esp+6Ch+var_34], 0
		mov	[esp+6Ch+var_40], 0
		mov	[esp+6Ch+var_30], 0
		mov	[esp+6Ch+var_38], 0
		mov	[esp+6Ch+var_44], 0
		jmp	short loc_41D0D9
; ---------------------------------------------------------------------------
		align 10h

loc_41D0C0:				; CODE XREF: _gendsa_main+A9j
		dec	ebp
		jz	loc_41D1E0
		lea	eax, [ebx+4]
		mov	edx, [ebx+4]
		mov	[esp+6Ch+var_44], edx

loc_41D0D1:				; CODE XREF: _gendsa_main+341j
					; _gendsa_main+371j ...
		lea	ebx, [eax+4]
		dec	ebp
		test	ebp, ebp
		jle	short loc_41D118

loc_41D0D9:				; CODE XREF: _gendsa_main+7Bj
					; _gendsa_main+D6j
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aOut_18 ; "-out"
		mov	ecx, 5
		repe cmpsb
		jz	short loc_41D0C0
		mov	edi, offset aPassout_4 ; "-passout"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_41D360
		dec	ebp
		jz	loc_41D1E0
		lea	eax, [ebx+4]
		mov	edi, [ebx+4]
		mov	[esp+6Ch+var_40], edi
		lea	ebx, [eax+4]
		dec	ebp
		test	ebp, ebp
		jg	short loc_41D0D9

loc_41D118:				; CODE XREF: _gendsa_main+97j
		mov	ebx, [esp+6Ch+var_30]
		test	ebx, ebx
		jz	loc_41D1E0
		mov	[esp+6Ch+var_64], 0
		mov	eax, [esp+6Ch+var_3C]
		mov	[esp+6Ch+var_68], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_setup_engine
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_5C], eax ;	int
		mov	[esp+6Ch+var_60], 0 ; int
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_64], eax ;	char *
		mov	[esp+6Ch+var_68], 0 ; char *
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax ;	int
		call	_app_passwd
		test	eax, eax
		jnz	loc_41D500
		mov	[esp+6Ch+var_68], offset aErrorGettin_11 ; "Error getting password\n"
		jmp	loc_41D348
; ---------------------------------------------------------------------------
		align 10h

loc_41D190:				; CODE XREF: _gendsa_main+2Fj
		xor	edi, edi
		xor	esi, esi

loc_41D194:				; CODE XREF: _gendsa_main+319j
					; _gendsa_main+53Aj ...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_ERR_print_errors
		mov	ebx, 1
		test	edi, edi
		jz	short loc_41D1B2

loc_41D1AA:				; CODE XREF: _gendsa_main+651j
		mov	[esp+6Ch+var_6C], edi
		call	_BIO_free_all

loc_41D1B2:				; CODE XREF: _gendsa_main+168j
		test	esi, esi
		jz	short loc_41D1BE
		mov	[esp+6Ch+var_6C], esi
		call	_DSA_free

loc_41D1BE:				; CODE XREF: _gendsa_main+174j
					; _gendsa_main+6E4j
		mov	eax, [esp+6Ch+var_20]
		test	eax, eax
		jz	short loc_41D1CE
		mov	[esp+6Ch+var_6C], eax
		call	_CRYPTO_free

loc_41D1CE:				; CODE XREF: _gendsa_main+184j
		mov	eax, ebx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41D1E0:				; CODE XREF: _gendsa_main+45j
					; _gendsa_main+81j ...
		mov	[esp+6Ch+var_68], offset aUsageGendsaArg ; "usage: gendsa [args] dsaparam-file\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aOutFileOutpu_2 ; " -out file - output	the key	to 'file'\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aDesEncryptTh_0 ; " -des      - encrypt the generated key "...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aDes3EncryptT_0 ; " -des3     - encrypt the generated key "...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aIdeaEncryptT_0 ; " -idea     - encrypt the generated key "...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aSeed_1 ; " -seed\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aEncryptPemOu_6 ; "		     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aAes128Aes192_2 ; " -aes128, -aes192, -aes256\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aEncryptPemOu_7 ; "		     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aCamellia128C_2 ; " -camellia128, -camellia192, -camellia2"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aEncryptPemOu_8 ; "		     encrypt PEM output	wit"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aEngineEUseE_13 ; " -engine e - use engine e, possibly	a h"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_60], 3Bh
		mov	[esp+6Ch+var_64], 3Bh
		mov	[esp+6Ch+var_68], offset aRandFileCfil_3 ; " -rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aLoadTheFileO_3 ; "	       - load the file (or the file"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aTheRandomNum_3 ; "		 the random number generato"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aDsaparamFile ; " dsaparam-file\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aADsaParameterF ; "	       - a DSA parameter file as ge"...

loc_41D348:				; CODE XREF: _gendsa_main+13Ej
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		xor	edi, edi
		xor	esi, esi
		jmp	loc_41D194
; ---------------------------------------------------------------------------
		align 10h

loc_41D360:				; CODE XREF: _gendsa_main+B9j
		mov	edi, offset aEngine_16 ; "-engine"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_41D390
		dec	ebp
		jz	loc_41D1E0
		lea	eax, [ebx+4]
		mov	esi, [ebx+4]
		mov	[esp+6Ch+var_3C], esi
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------
		align 10h

loc_41D390:				; CODE XREF: _gendsa_main+32Ej
		mov	edi, offset aRand_6 ; "-rand"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_41D3C0
		dec	ebp
		jz	loc_41D1E0
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+6Ch+var_38], ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------
		align 10h

loc_41D3C0:				; CODE XREF: _gendsa_main+35Ej
		mov	edi, offset asc_462DAC ; "-"
		mov	ecx, 2
		mov	esi, eax
		repe cmpsb
		jz	loc_41D1E0
		mov	edi, offset aDes_0 ; "-des"
		mov	esi, eax
		mov	ecx, 5
		repe cmpsb
		jz	loc_41D4C0
		mov	edi, offset aDes3_0 ; "-des3"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_41D4E0
		mov	edi, offset aIdea_0 ; "-idea"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_41D4F0
		mov	edi, offset aSeed_2 ; "-seed"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_41D4D0
		mov	edi, offset aAes128_0 ;	"-aes128"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jz	loc_41D6EA
		mov	edi, offset aAes192_0 ;	"-aes192"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jz	loc_41D739
		mov	edi, offset aAes256_0 ;	"-aes256"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jz	loc_41D749
		mov	edi, offset aCamellia128_0 ; "-camellia128"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jz	loc_41D759
		mov	edi, offset aCamellia192_0 ; "-camellia192"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jz	loc_41D729
		mov	edi, offset aCamellia256_0 ; "-camellia256"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jz	loc_41D77A
		cmp	byte ptr [eax],	2Dh
		jz	loc_41D1E0
		mov	esi, [esp+6Ch+var_30]
		test	esi, esi
		jnz	loc_41D1E0
		mov	[esp+6Ch+var_30], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------
		align 10h

loc_41D4C0:				; CODE XREF: _gendsa_main+3A2j
		call	_EVP_des_cbc
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------

loc_41D4D0:				; CODE XREF: _gendsa_main+3DEj
		call	_EVP_seed_cbc
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------

loc_41D4E0:				; CODE XREF: _gendsa_main+3B6j
		call	_EVP_des_ede3_cbc
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------

loc_41D4F0:				; CODE XREF: _gendsa_main+3CAj
		call	_EVP_idea_cbc
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------

loc_41D500:				; CODE XREF: _gendsa_main+130j
		call	_BIO_s_file
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_new
		mov	ebx, eax
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 3
		mov	[esp+6Ch+var_68], 6Ch
		mov	[esp+6Ch+var_6C], ebx
		call	_BIO_ctrl
		test	eax, eax
		jz	loc_41D6FA
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], ebx
		call	_PEM_read_bio_DSAparams
		mov	esi, eax
		test	eax, eax
		jz	loc_41D78A
		mov	[esp+6Ch+var_6C], ebx
		call	_BIO_free
		call	_BIO_s_file
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_41D194
		mov	ecx, [esp+6Ch+var_44]
		test	ecx, ecx
		jz	loc_41D7A4
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 5
		mov	[esp+6Ch+var_68], 6Ch
		mov	[esp+6Ch+var_6C], edi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_41D7CD

loc_41D5B4:				; CODE XREF: _gendsa_main+788j
		mov	[esp+6Ch+var_64], 1
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], 0
		call	_app_RAND_load_file
		test	eax, eax
		jnz	loc_41D769
		mov	edx, [esp+6Ch+var_38]
		test	edx, edx
		jz	loc_41D7DE

loc_41D5E5:				; CODE XREF: _gendsa_main+735j
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_6C], eax
		call	_app_RAND_load_files
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aLdSemiRandom_4 ; "%ld	semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf

loc_41D60A:				; CODE XREF: _gendsa_main+72Fj
					; _gendsa_main+7B3j
		mov	eax, [esi+0Ch]
		mov	[esp+6Ch+var_6C], eax
		call	_BN_num_bits
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aGeneratingDsaK ; "Generating DSA key,	%d bits\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_6C], esi
		call	_DSA_generate_key
		test	eax, eax
		jz	loc_41D194
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], 0
		call	_app_RAND_write_file
		mov	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_54], eax
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], edi
		call	_PEM_write_bio_DSAPrivateKey
		test	eax, eax
		jz	loc_41D194
		xor	ebx, ebx
		jmp	loc_41D1AA
; ---------------------------------------------------------------------------
		align 10h

loc_41D6A0:				; CODE XREF: _gendsa_main+17j
		call	_BIO_s_file
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_41D05D
		mov	ebx, ds:__imp___iob
		lea	edx, [ebx+40h]
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_64], 10h
		mov	[esp+6Ch+var_68], 6Ah
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_41D05D
; ---------------------------------------------------------------------------

loc_41D6EA:				; CODE XREF: _gendsa_main+3F2j
		call	_EVP_aes_128_cbc
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------

loc_41D6FA:				; CODE XREF: _gendsa_main+4F1j
		mov	eax, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], eax ;	char *
		call	_perror

loc_41D706:				; CODE XREF: _gendsa_main+75Fj
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_ERR_print_errors
		test	ebx, ebx
		jz	short loc_41D71F
		mov	[esp+6Ch+var_6C], ebx
		call	_BIO_free

loc_41D71F:				; CODE XREF: _gendsa_main+6D5j
		mov	ebx, 1
		jmp	loc_41D1BE
; ---------------------------------------------------------------------------

loc_41D729:				; CODE XREF: _gendsa_main+442j
		call	_EVP_camellia_192_cbc
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------

loc_41D739:				; CODE XREF: _gendsa_main+406j
		call	_EVP_aes_192_cbc
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------

loc_41D749:				; CODE XREF: _gendsa_main+41Aj
		call	_EVP_aes_256_cbc
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------

loc_41D759:				; CODE XREF: _gendsa_main+42Ej
		call	_EVP_camellia_128_cbc
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------

loc_41D769:				; CODE XREF: _gendsa_main+593j
		mov	eax, [esp+6Ch+var_38]
		test	eax, eax
		jz	loc_41D60A
		jmp	loc_41D5E5
; ---------------------------------------------------------------------------

loc_41D77A:				; CODE XREF: _gendsa_main+456j
		call	_EVP_camellia_256_cbc
		mov	[esp+6Ch+var_34], eax
		mov	eax, ebx
		jmp	loc_41D0D1
; ---------------------------------------------------------------------------

loc_41D78A:				; CODE XREF: _gendsa_main+51Bj
		mov	[esp+6Ch+var_68], offset aUnableToLoad_4 ; "unable to load DSA parameter file\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		jmp	loc_41D706
; ---------------------------------------------------------------------------

loc_41D7A4:				; CODE XREF: _gendsa_main+546j
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+6Ch+var_60], eax
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], 6Ah
		mov	[esp+6Ch+var_6C], edi
		call	_BIO_ctrl
		jmp	loc_41D5B4
; ---------------------------------------------------------------------------

loc_41D7CD:				; CODE XREF: _gendsa_main+56Ej
		mov	eax, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_6C], eax ;	char *
		call	_perror
		jmp	loc_41D194
; ---------------------------------------------------------------------------

loc_41D7DE:				; CODE XREF: _gendsa_main+59Fj
		mov	[esp+6Ch+var_68], offset aWarningNotMu_2 ; "warning, not much extra random data, co"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		jmp	loc_41D60A
_gendsa_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_genpkey_cb_0	proc near		; DATA XREF: _genpkey_main:loc_41DBF7o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= byte ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_10], 2Ah
		mov	[esp+2Ch+var_2C], esi
		call	_EVP_PKEY_CTX_get_app_data
		mov	ebx, eax
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], esi
		call	_EVP_PKEY_CTX_get_keygen_info
		test	eax, eax
		jnz	short loc_41D880
		mov	[esp+2Ch+var_10], 2Eh

loc_41D831:				; CODE XREF: _genpkey_cb_0+8Aj
					; _genpkey_cb_0+9Aj ...
		mov	[esp+2Ch+var_24], 1
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_write
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0Bh
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_ctrl
		mov	eax, 1
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41D880:				; CODE XREF: _genpkey_cb_0+2Aj
		cmp	eax, 1
		jnz	short loc_41D890
		mov	[esp+2Ch+var_10], 2Bh
		jmp	short loc_41D831
; ---------------------------------------------------------------------------
		align 10h

loc_41D890:				; CODE XREF: _genpkey_cb_0+83j
		cmp	eax, 2
		jnz	short loc_41D89C
		mov	[esp+2Ch+var_10], 2Ah
		jmp	short loc_41D831
; ---------------------------------------------------------------------------

loc_41D89C:				; CODE XREF: _genpkey_cb_0+93j
		cmp	eax, 3
		jnz	short loc_41D831
		mov	[esp+2Ch+var_10], 0Ah
		jmp	short loc_41D831
_genpkey_cb_0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _init_gen_str
_init_gen_str	proc near		; CODE XREF: _dgst_main+6F4p
					; _genpkey_main+356p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	esi
		push	ebx
		sub	esp, 34h
		mov	ebx, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_14], 0
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_41D8F0
		mov	[esp+3Ch+var_38], offset aAlgorithmAlrea ; "Algorithm already set!\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_puts
		xor	eax, eax

loc_41D8DD:				; CODE XREF: _init_gen_str+12Bj
					; _init_gen_str+17Dj ...
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41D8F0:				; CODE XREF: _init_gen_str+15j
		mov	[esp+3Ch+var_34], 0FFFFFFFFh
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_38], eax
		lea	eax, [esp+3Ch+var_14]
		mov	[esp+3Ch+var_3C], eax
		call	_EVP_PKEY_asn1_find_str
		mov	esi, eax
		test	eax, eax
		jz	loc_41D9E0

loc_41D916:				; CODE XREF: _init_gen_str+158j
		call	_ERR_clear_error
		mov	[esp+3Ch+var_28], esi
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 0
		lea	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_3C], eax
		call	_EVP_PKEY_asn1_get0_info
		mov	eax, [esp+3Ch+var_14]
		test	eax, eax
		jz	short loc_41D95B
		mov	[esp+3Ch+var_3C], eax
		call	_ENGINE_finish

loc_41D95B:				; CODE XREF: _init_gen_str+A1j
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+var_10]
		mov	[esp+3Ch+var_3C], eax
		call	_EVP_PKEY_CTX_new_id
		mov	esi, eax
		test	eax, eax
		jz	loc_41DA32
		mov	eax, [esp+3Ch+arg_10]
		test	eax, eax
		mov	[esp+3Ch+var_3C], esi
		jz	short loc_41D9A0
		call	_EVP_PKEY_paramgen_init
		test	eax, eax
		jle	short loc_41D9A9

loc_41D98D:				; CODE XREF: _init_gen_str+F7j
		mov	[ebx], esi
		mov	eax, 1
		add	esp, 34h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41D9A0:				; CODE XREF: _init_gen_str+D2j
		call	_EVP_PKEY_keygen_init
		test	eax, eax
		jg	short loc_41D98D

loc_41D9A9:				; CODE XREF: _init_gen_str+DBj
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aErrorInitializ ; "Error initializing %s context\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		mov	[esp+3Ch+var_3C], esi
		call	_EVP_PKEY_CTX_free
		xor	eax, eax
		jmp	loc_41D8DD
; ---------------------------------------------------------------------------

loc_41D9E0:				; CODE XREF: _init_gen_str+60j
		mov	edx, [esp+3Ch+arg_C]
		test	edx, edx
		jz	short loc_41DA0E
		mov	[esp+3Ch+var_34], 0FFFFFFFFh
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_3C], eax
		call	_ENGINE_get_pkey_asn1_meth_str
		mov	esi, eax
		test	eax, eax
		jnz	loc_41D916

loc_41DA0E:				; CODE XREF: _init_gen_str+136j
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aAlgorithmSNotF ; "Algorithm %s not found\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_41D8DD
; ---------------------------------------------------------------------------

loc_41DA32:				; CODE XREF: _init_gen_str+C3j
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aErrorInitializ ; "Error initializing %s context\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		xor	eax, eax
		jmp	loc_41D8DD
_init_gen_str	endp

; ---------------------------------------------------------------------------
		jmp	short _genpkey_main
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _genpkey_main
_genpkey_main	proc near		; CODE XREF: .text:0041DA61j
					; DATA XREF: .data:00455124o

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	[esp+6Ch+var_28], 0
		mov	[esp+6Ch+var_24], 0
		mov	[esp+6Ch+var_20], 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_41DFE0

loc_41DA9C:				; CODE XREF: _genpkey_main+58Dj
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], eax
		call	_load_config
		test	eax, eax
		jnz	short loc_41DB10

loc_41DAB0:				; CODE XREF: _genpkey_main+2F8j
					; _genpkey_main+363j ...
		mov	ebx, 1
		xor	esi, esi

loc_41DAB7:				; CODE XREF: _genpkey_main+22Ej
					; _genpkey_main+498j ...
		mov	eax, [esp+6Ch+var_28]
		test	eax, eax
		jz	short loc_41DAC7
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_PKEY_free

loc_41DAC7:				; CODE XREF: _genpkey_main+4Dj
		mov	eax, [esp+6Ch+var_24]
		test	eax, eax
		jz	short loc_41DAD7
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_PKEY_CTX_free

loc_41DAD7:				; CODE XREF: _genpkey_main+5Dj
		test	esi, esi
		jz	short loc_41DAE3
		mov	[esp+6Ch+var_6C], esi
		call	_BIO_free_all

loc_41DAE3:				; CODE XREF: _genpkey_main+69j
		mov	[esp+6Ch+var_6C], 0
		call	_BIO_free
		mov	eax, [esp+6Ch+var_20]
		test	eax, eax
		jz	short loc_41DAFF
		mov	[esp+6Ch+var_6C], eax
		call	_CRYPTO_free

loc_41DAFF:				; CODE XREF: _genpkey_main+85j
		mov	eax, ebx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41DB10:				; CODE XREF: _genpkey_main+3Ej
		call	_ERR_load_crypto_strings
		call	_OPENSSL_add_all_algorithms_noconf
		mov	eax, [esp+6Ch+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+6Ch+var_44], 0
		mov	[esp+6Ch+var_3C], 0
		mov	[esp+6Ch+var_4C], 3
		mov	[esp+6Ch+var_38], 0
		xor	ebp, ebp
		mov	[esp+6Ch+var_40], 0
		mov	[esp+6Ch+var_48], 0

loc_41DB53:				; CODE XREF: _genpkey_main+7BEj
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_41DB95

loc_41DB59:				; CODE XREF: _genpkey_main+123j
		cmp	byte ptr [eax],	2Dh
		jnz	short loc_41DB95
		mov	edi, offset aOutform_11	; "-outform"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_41DCB0
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_41DDF0
		add	ebx, 4
		mov	[esp+6Ch+var_6C], eax ;	char *
		call	_str2fmt
		mov	[esp+6Ch+var_4C], eax

loc_41DB8C:				; CODE XREF: _genpkey_main+25Ej
					; _genpkey_main+2ABj ...
		add	ebx, 4
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_41DB59

loc_41DB95:				; CODE XREF: _genpkey_main+E7j
					; _genpkey_main+ECj
		cmp	[esp+6Ch+var_24], 0
		jz	loc_41DDF0
		mov	[esp+6Ch+var_5C], 0 ; int
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_60], eax ;	int
		mov	[esp+6Ch+var_64], 0 ; char *
		mov	[esp+6Ch+var_68], ebp ;	char *
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax ;	int
		call	_app_passwd
		test	eax, eax
		jz	loc_41E132
		mov	eax, [esp+6Ch+var_40]
		test	eax, eax
		jz	loc_41E18C
		mov	[esp+6Ch+var_68], offset aWb_3 ; "wb"
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_new_file
		mov	esi, eax
		test	eax, eax
		jz	loc_41E2D0

loc_41DBF7:				; CODE XREF: _genpkey_main+736j
		mov	[esp+6Ch+var_68], offset _genpkey_cb_0
		mov	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_PKEY_CTX_set_cb
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_PKEY_CTX_set_app_data
		lea	eax, [esp+6Ch+var_28]
		mov	ecx, [esp+6Ch+var_44]
		test	ecx, ecx
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_6C], eax
		jz	loc_41E0F0
		call	_EVP_PKEY_paramgen
		test	eax, eax
		jle	loc_41E2A4
		mov	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], esi
		call	_PEM_write_bio_Parameters

loc_41DC58:				; CODE XREF: _genpkey_main+74Bj
					; _genpkey_main+808j
		test	eax, eax
		jle	loc_41E27D

loc_41DC60:				; CODE XREF: _genpkey_main+82Fj
		mov	edx, [esp+6Ch+var_3C]
		test	edx, edx
		jz	short loc_41DC9C
		mov	eax, [esp+6Ch+var_44]
		test	eax, eax
		mov	[esp+6Ch+var_60], 0
		mov	[esp+6Ch+var_64], 0
		mov	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], esi
		jz	loc_41E1DD
		call	_EVP_PKEY_print_params

loc_41DC94:				; CODE XREF: _genpkey_main+772j
		test	eax, eax
		jle	loc_41E0C6

loc_41DC9C:				; CODE XREF: _genpkey_main+1F6j
		xor	ebx, ebx
		jmp	loc_41DAB7
; ---------------------------------------------------------------------------
		align 10h

loc_41DCB0:				; CODE XREF: _genpkey_main+FCj
		mov	edi, offset aPass_0 ; "-pass"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_41DCE0
		mov	ebp, [ebx+4]
		test	ebp, ebp
		jz	loc_41DDF0

loc_41DCCB:				; CODE XREF: _genpkey_main+4A9j
		add	ebx, 4
		jmp	loc_41DB8C
; ---------------------------------------------------------------------------
		align 10h

loc_41DCE0:				; CODE XREF: _genpkey_main+24Ej
		mov	edi, offset aEngine_17 ; "-engine"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_41DD20
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_41DDF0
		add	ebx, 4
		mov	[esp+6Ch+var_64], 0
		mov	[esp+6Ch+var_68], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_setup_engine
		mov	[esp+6Ch+var_48], eax
		jmp	loc_41DB8C
; ---------------------------------------------------------------------------

loc_41DD20:				; CODE XREF: _genpkey_main+27Ej
		mov	edi, offset aParamfile ; "-paramfile"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_41DD70
		mov	esi, [ebx+4]
		test	esi, esi
		jz	loc_41DDF0
		cmp	[esp+6Ch+var_44], 1
		jz	loc_41DDF0
		mov	edi, ds:_bio_err
		mov	eax, [esp+6Ch+var_24]
		test	eax, eax
		jz	loc_41DF30
		mov	[esp+6Ch+var_68], offset aParametersAlre ; "Parameters already set!\n"
		mov	[esp+6Ch+var_6C], edi
		call	_BIO_puts
		jmp	loc_41DAB0
; ---------------------------------------------------------------------------
		align 10h

loc_41DD70:				; CODE XREF: _genpkey_main+2BEj
		mov	edi, offset aOut_19 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jz	loc_41DF10
		mov	edi, offset aAlgorithm ; "-algorithm"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jnz	loc_41E010
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_41DDF0
		add	ebx, 4
		mov	edx, [esp+6Ch+var_44]
		mov	[esp+6Ch+var_5C], edx
		mov	edx, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_64], eax
		lea	eax, [esp+6Ch+var_24]
		mov	[esp+6Ch+var_68], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_init_gen_str
		test	eax, eax
		jnz	loc_41DB8C
		jmp	loc_41DAB0
; ---------------------------------------------------------------------------

loc_41DDD8:				; CODE XREF: _genpkey_main+5C1j
		mov	[esp+6Ch+var_68], offset aNoKeytypeSpeci ; "No keytype specified\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_puts
		lea	esi, [esi+0]

loc_41DDF0:				; CODE XREF: _genpkey_main+107j
					; _genpkey_main+12Aj ...
		mov	[esp+6Ch+var_68], offset aUsageGenpkeyOp ; "Usage: genpkey [options]\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aWhereOptionsMa ; "where options may be\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aOutFileOutpu_3 ; "-out file	       output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aOutformXOutput ; "-outform X	       output format (DER o"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aPassArgOutputF ; "-pass arg	       output file pass	phr"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aCipherUseCiphe ; "-<cipher>	       use cipher <cipher> "...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aEngineEUseE_14 ; "-engine e	       use engine e, possib"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aParamfileFileP ; "-paramfile file    parameters file\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aAlgorithmAlgTh ; "-algorithm alg     the public key algor"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aPkeyoptOptValu ; "-pkeyopt opt:value set the public key a"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aGenparamGenera ; "-genparam	       generate	parameters,"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aTextPrintTheIn ; "-text	       print the in text\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_68], offset aNbOptionsOrder ; "NB:	options	order may be important!	 Se"...
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	ebx, 1
		xor	esi, esi
		jmp	loc_41DAB7
; ---------------------------------------------------------------------------
		align 10h

loc_41DF10:				; CODE XREF: _genpkey_main+30Ej
		mov	eax, [ebx+4]
		mov	[esp+6Ch+var_40], eax
		test	eax, eax
		jnz	loc_41DCCB
		jmp	loc_41DDF0
; ---------------------------------------------------------------------------
		align 10h

loc_41DF30:				; CODE XREF: _genpkey_main+2E2j
		mov	[esp+6Ch+var_68], offset aR_0 ;	"r"
		mov	[esp+6Ch+var_6C], esi
		call	_BIO_new_file
		test	eax, eax
		jz	loc_41E0AD
		mov	[esp+6Ch+var_68], 0
		mov	[esp+6Ch+var_6C], eax
		mov	[esp+6Ch+var_30], eax
		call	_PEM_read_bio_Parameters
		mov	[esp+6Ch+var_34], eax
		mov	edx, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_6C], edx
		call	_BIO_free
		mov	eax, [esp+6Ch+var_34]
		test	eax, eax
		jz	loc_41E1E7
		mov	eax, [esp+6Ch+var_48]
		mov	[esp+6Ch+var_68], eax
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_PKEY_CTX_new
		mov	esi, eax
		test	eax, eax
		jz	loc_41E1C0
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_PKEY_keygen_init
		test	eax, eax
		jg	loc_41E174
		mov	[esp+6Ch+var_68], offset aErrorInitial_1 ; "Error initializing context\n"
		mov	[esp+6Ch+var_6C], edi
		call	_BIO_puts
		mov	[esp+6Ch+var_6C], edi
		call	_ERR_print_errors
		mov	[esp+6Ch+var_6C], esi
		call	_EVP_PKEY_CTX_free

loc_41DFC6:				; CODE XREF: _genpkey_main+768j
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_PKEY_free
		jmp	loc_41DAB0
; ---------------------------------------------------------------------------
		align 10h

loc_41DFE0:				; CODE XREF: _genpkey_main+26j
		mov	[esp+6Ch+var_68], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_41DA9C
; ---------------------------------------------------------------------------
		align 10h

loc_41E010:				; CODE XREF: _genpkey_main+322j
		mov	edi, offset aPkeyopt_0 ; "-pkeyopt"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_41E080
		mov	edx, [ebx+4]
		test	edx, edx
		jz	loc_41DDF0
		mov	eax, [esp+6Ch+var_24]
		test	eax, eax
		jz	loc_41DDD8
		add	ebx, 4
		mov	[esp+6Ch+var_68], edx
		mov	[esp+6Ch+var_6C], eax
		call	_pkey_ctrl_string
		test	eax, eax
		jg	loc_41DB8C
		mov	[esp+6Ch+var_68], offset aParameterSetti ; "parameter setting error\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_puts
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_ERR_print_errors
		mov	ebx, 1
		xor	esi, esi
		jmp	loc_41DAB7
; ---------------------------------------------------------------------------
		align 10h

loc_41E080:				; CODE XREF: _genpkey_main+5AEj
		mov	edi, offset aGenparam ;	"-genparam"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	loc_41E153
		mov	esi, [esp+6Ch+var_24]
		test	esi, esi
		jnz	loc_41DDF0
		mov	[esp+6Ch+var_44], 1
		jmp	loc_41DB8C
; ---------------------------------------------------------------------------

loc_41E0AD:				; CODE XREF: _genpkey_main+4D2j
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], offset aCanTOpenParame ; "Can't open parameter file %s\n"
		mov	[esp+6Ch+var_6C], edi
		call	_BIO_printf
		jmp	loc_41DAB0
; ---------------------------------------------------------------------------

loc_41E0C6:				; CODE XREF: _genpkey_main+226j
		mov	[esp+6Ch+var_68], offset aErrorPrintingK ; "Error printing key\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_puts
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		jmp	loc_41DAB7
; ---------------------------------------------------------------------------
		align 10h

loc_41E0F0:				; CODE XREF: _genpkey_main+1C5j
		call	_EVP_PKEY_keygen
		test	eax, eax
		jle	loc_41E2F7
		cmp	[esp+6Ch+var_4C], 3
		jz	loc_41E240
		cmp	[esp+6Ch+var_4C], 1
		jz	loc_41E1AB
		mov	[esp+6Ch+var_68], offset aBadFormatSpeci ; "Bad	format specified for key\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_41DAB7
; ---------------------------------------------------------------------------

loc_41E132:				; CODE XREF: _genpkey_main+15Bj
		mov	[esp+6Ch+var_68], offset aErrorGettin_12 ; "Error getting password\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_puts
		mov	ebx, 1
		xor	esi, esi
		jmp	loc_41DAB7
; ---------------------------------------------------------------------------

loc_41E153:				; CODE XREF: _genpkey_main+61Ej
		mov	edi, offset aText_10 ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	loc_41E205
		mov	[esp+6Ch+var_3C], 1
		jmp	loc_41DB8C
; ---------------------------------------------------------------------------

loc_41E174:				; CODE XREF: _genpkey_main+530j
		add	ebx, 4
		mov	eax, [esp+6Ch+var_34]
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_PKEY_free
		mov	[esp+6Ch+var_24], esi
		jmp	loc_41DB8C
; ---------------------------------------------------------------------------

loc_41E18C:				; CODE XREF: _genpkey_main+167j
		mov	[esp+6Ch+var_68], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_new_fp
		mov	esi, eax
		jmp	loc_41DBF7
; ---------------------------------------------------------------------------

loc_41E1AB:				; CODE XREF: _genpkey_main+69Dj
		mov	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], esi
		call	_i2d_PrivateKey_bio
		jmp	loc_41DC58
; ---------------------------------------------------------------------------

loc_41E1C0:				; CODE XREF: _genpkey_main+520j
		mov	[esp+6Ch+var_68], offset aErrorInitial_1 ; "Error initializing context\n"
		mov	[esp+6Ch+var_6C], edi
		call	_BIO_puts
		mov	[esp+6Ch+var_6C], edi
		call	_ERR_print_errors
		jmp	loc_41DFC6
; ---------------------------------------------------------------------------

loc_41E1DD:				; CODE XREF: _genpkey_main+219j
		call	_EVP_PKEY_print_private
		jmp	loc_41DC94
; ---------------------------------------------------------------------------

loc_41E1E7:				; CODE XREF: _genpkey_main+502j
		mov	[esp+6Ch+var_64], esi
		mov	[esp+6Ch+var_68], offset aErrorReadingPa ; "Error reading parameter file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		jmp	loc_41DAB0
; ---------------------------------------------------------------------------

loc_41E205:				; CODE XREF: _genpkey_main+6F1j
		inc	eax
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_get_cipherbyname
		mov	edx, eax
		mov	[esp+6Ch+var_38], eax
		xor	eax, eax
		test	edx, edx
		jz	loc_41E301

loc_41E21E:				; CODE XREF: _genpkey_main+8B2j
		cmp	[esp+6Ch+var_44], 1
		jz	loc_41DDF0
		add	ebx, 4
		test	eax, eax
		jz	loc_41DB53
		jmp	loc_41DDF0
; ---------------------------------------------------------------------------
		align 10h

loc_41E240:				; CODE XREF: _genpkey_main+692j
		mov	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_54], eax
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	eax, [esp+6Ch+var_38]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [esp+6Ch+var_28]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], esi
		call	_PEM_write_bio_PrivateKey
		jmp	loc_41DC58
; ---------------------------------------------------------------------------

loc_41E27D:				; CODE XREF: _genpkey_main+1EAj
		mov	[esp+6Ch+var_68], offset aErrorWritingKe ; "Error writing key\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_puts
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_ERR_print_errors
		jmp	loc_41DC60
; ---------------------------------------------------------------------------

loc_41E2A4:				; CODE XREF: _genpkey_main+1D2j
		mov	[esp+6Ch+var_68], offset aErrorGenerat_1 ; "Error generating parameters\n"

loc_41E2AC:				; CODE XREF: _genpkey_main+88Fj
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_puts
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_ERR_print_errors
		mov	ebx, 1
		jmp	loc_41DAB7
; ---------------------------------------------------------------------------

loc_41E2D0:				; CODE XREF: _genpkey_main+181j
		mov	eax, [esp+6Ch+var_40]
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aCanTOpenOutput ; "Can't open output file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_41DAB7
; ---------------------------------------------------------------------------

loc_41E2F7:				; CODE XREF: _genpkey_main+687j
		mov	[esp+6Ch+var_68], offset aErrorGenerat_2 ; "Error generating key\n"
		jmp	short loc_41E2AC
; ---------------------------------------------------------------------------

loc_41E301:				; CODE XREF: _genpkey_main+7A8j
		mov	eax, [ebx]
		inc	eax
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aUnknownCipherS ; "Unknown cipher %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	eax, 1
		jmp	loc_41E21E
_genpkey_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_next_proto_cb	proc near		; DATA XREF: _s_server_main+122Co

arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		mov	eax, [esp+arg_C]
		mov	ecx, [eax]
		mov	edx, [esp+arg_4]
		mov	[edx], ecx
		mov	edx, [eax+4]
		mov	eax, [esp+arg_8]
		mov	[eax], edx
		xor	eax, eax
		retn
_next_proto_cb	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_print_stats	proc near		; CODE XREF: _sv_body+F75p
					; _www_body+957p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, eax
		mov	ebx, edx
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 14h
		mov	[esp+1Ch+var_1C], edx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldItemsInTheS ; "%4ld items in the session cache\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 15h
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldClientConne ; "%4ld client	connects (SSL_connect())\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 17h
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldClientReneg ; "%4ld client	renegotiates (SSL_connect()"...
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 16h
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldClientCon_0 ; "%4ld client	connects that finished\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 18h
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldServerAccep ; "%4ld server	accepts	(SSL_accept())\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1Ah
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldServerReneg ; "%4ld server	renegotiates (SSL_accept())"...
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 19h
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldServerAcc_0 ; "%4ld server	accepts	that finished\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1Bh
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldSessionCach ; "%4ld session cache hits\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1Dh
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldSessionCa_0 ; "%4ld session cache misses\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1Eh
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldSessionCa_1 ; "%4ld session cache timeouts\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1Ch
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldCallbackCac ; "%4ld callback cache	hits\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 2Bh
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	edi, eax
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 1Fh
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_10], edi
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a4ldCacheFullOv ; "%4ld cache full overflows (%ld allowed)"...
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
_print_stats	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_cert_status_cb	proc near		; DATA XREF: _sv_body:loc_41F540o

var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= byte ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= byte ptr -0A4h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ECh
		mov	esi, [esp+0FCh+arg_4]
		mov	eax, [esi+14h]
		mov	[esp+0FCh+var_D4], eax
		mov	[esp+0FCh+var_B4], 0
		mov	ecx, [esi+18h]
		test	ecx, ecx
		jnz	loc_41E7C0

loc_41E62B:				; CODE XREF: _cert_status_cb+1D0j
		mov	eax, [esp+0FCh+arg_0]
		mov	[esp+0FCh+var_FC], eax
		call	_SSL_get_certificate
		mov	edi, eax
		mov	[esp+0FCh+var_FC], eax
		call	_X509_get1_ocsp
		mov	ebx, eax
		test	eax, eax
		jz	loc_41E790
		mov	[esp+0FCh+var_F8], 0
		mov	[esp+0FCh+var_FC], eax
		call	_sk_value
		lea	edx, [esp+0FCh+var_B8]
		mov	[esp+0FCh+var_EC], edx
		lea	edx, [esp+0FCh+var_BC]
		mov	[esp+0FCh+var_F0], edx
		lea	edx, [esp+0FCh+var_C0]
		mov	[esp+0FCh+var_F4], edx
		lea	edx, [esp+0FCh+var_C4]
		mov	[esp+0FCh+var_F8], edx
		mov	[esp+0FCh+var_FC], eax
		call	_OCSP_parse_url
		test	eax, eax
		jz	loc_41E760
		mov	edx, [esi+18h]
		test	edx, edx
		jnz	loc_41E7E0

loc_41E699:				; CODE XREF: _cert_status_cb+1B3j
					; _cert_status_cb+208j
		mov	eax, [esp+0FCh+arg_0]
		mov	[esp+0FCh+var_FC], eax
		call	_SSL_get_SSL_CTX
		mov	[esp+0FCh+var_FC], eax
		call	_SSL_CTX_get_cert_store
		mov	[esp+0FCh+var_F0], 0
		mov	[esp+0FCh+var_F4], 0
		mov	[esp+0FCh+var_F8], eax
		lea	eax, [esp+0FCh+var_A4]
		mov	[esp+0FCh+var_FC], eax
		call	_X509_STORE_CTX_init
		test	eax, eax
		jnz	loc_41E810

loc_41E6D8:				; CODE XREF: _cert_status_cb+249j
		mov	esi, 2
		mov	[esp+0FCh+var_D0], 0
		xor	edi, edi
		xor	ebp, ebp

loc_41E6E9:				; CODE XREF: _cert_status_cb+185j
					; _cert_status_cb+37Bj	...
		mov	eax, [esp+0FCh+var_D4]
		mov	[esp+0FCh+var_FC], eax
		call	_ERR_print_errors

loc_41E6F5:				; CODE XREF: _cert_status_cb+46Aj
		test	ebx, ebx
		jz	short loc_41E725
		mov	eax, [esp+0FCh+var_C4]
		mov	[esp+0FCh+var_FC], eax
		call	_CRYPTO_free
		mov	eax, [esp+0FCh+var_BC]
		mov	[esp+0FCh+var_FC], eax
		call	_CRYPTO_free
		mov	eax, [esp+0FCh+var_C0]
		mov	[esp+0FCh+var_FC], eax
		call	_CRYPTO_free
		mov	[esp+0FCh+var_FC], ebx
		call	_X509_email_free

loc_41E725:				; CODE XREF: _cert_status_cb+F7j
		mov	eax, [esp+0FCh+var_D0]
		test	eax, eax
		jz	short loc_41E735
		mov	[esp+0FCh+var_FC], eax
		call	_OCSP_CERTID_free

loc_41E735:				; CODE XREF: _cert_status_cb+12Bj
		test	ebp, ebp
		jz	short loc_41E741
		mov	[esp+0FCh+var_FC], ebp
		call	_OCSP_REQUEST_free

loc_41E741:				; CODE XREF: _cert_status_cb+137j
		test	edi, edi
		jz	short loc_41E74D
		mov	[esp+0FCh+var_FC], edi
		call	_OCSP_RESPONSE_free

loc_41E74D:				; CODE XREF: _cert_status_cb+143j
		mov	eax, esi
		add	esp, 0ECh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41E760:				; CODE XREF: _cert_status_cb+88j
		mov	[esp+0FCh+var_F8], offset aCert_statusCan ; "cert_status: can't parse AIA URL\n"
		mov	eax, [esp+0FCh+var_D4]
		mov	[esp+0FCh+var_FC], eax
		call	_BIO_puts
		mov	esi, 2
		mov	[esp+0FCh+var_D0], 0
		xor	edi, edi
		xor	ebp, ebp
		jmp	loc_41E6E9
; ---------------------------------------------------------------------------
		align 10h

loc_41E790:				; CODE XREF: _cert_status_cb+48j
		mov	eax, [esi]
		test	eax, eax
		jz	loc_41E9C0
		mov	[esp+0FCh+var_C4], eax
		mov	eax, [esi+4]
		mov	[esp+0FCh+var_BC], eax
		mov	eax, [esi+8]
		mov	[esp+0FCh+var_C0], eax
		mov	eax, [esi+0Ch]
		mov	[esp+0FCh+var_B8], eax
		jmp	loc_41E699
; ---------------------------------------------------------------------------
		align 10h

loc_41E7C0:				; CODE XREF: _cert_status_cb+25j
		mov	[esp+0FCh+var_F8], offset aCert_statusCal ; "cert_status: callback called\n"
		mov	[esp+0FCh+var_FC], eax
		call	_BIO_puts
		jmp	loc_41E62B
; ---------------------------------------------------------------------------
		align 10h

loc_41E7E0:				; CODE XREF: _cert_status_cb+93j
		mov	[esp+0FCh+var_F8], 0
		mov	[esp+0FCh+var_FC], ebx
		call	_sk_value
		mov	[esp+0FCh+var_F4], eax
		mov	[esp+0FCh+var_F8], offset aCert_statusAia ; "cert_status: AIA URL: %s\n"
		mov	eax, [esp+0FCh+var_D4]
		mov	[esp+0FCh+var_FC], eax
		call	_BIO_printf
		jmp	loc_41E699
; ---------------------------------------------------------------------------
		align 10h

loc_41E810:				; CODE XREF: _cert_status_cb+D2j
		mov	[esp+0FCh+var_FC], edi
		call	_X509_get_issuer_name
		lea	edx, [esp+0FCh+var_AC]
		mov	[esp+0FCh+var_F0], edx
		mov	[esp+0FCh+var_F4], eax
		mov	[esp+0FCh+var_F8], 1
		lea	eax, [esp+0FCh+var_A4]
		mov	[esp+0FCh+var_FC], eax
		call	_X509_STORE_get_by_subject
		test	eax, eax
		jle	loc_41E980
		call	_OCSP_REQUEST_new
		mov	ebp, eax
		test	eax, eax
		jz	loc_41E6D8
		mov	eax, [esp+0FCh+var_A8]
		mov	[esp+0FCh+var_F4], eax
		mov	[esp+0FCh+var_F8], edi
		mov	[esp+0FCh+var_FC], 0
		call	_OCSP_cert_to_id
		mov	edi, eax
		mov	[esp+0FCh+var_D0], eax
		mov	eax, [esp+0FCh+var_A8]
		mov	[esp+0FCh+var_FC], eax
		call	_X509_free
		lea	eax, [esp+0FCh+var_A4]
		mov	[esp+0FCh+var_FC], eax
		call	_X509_STORE_CTX_cleanup
		test	edi, edi
		jz	loc_41E9F0
		mov	[esp+0FCh+var_F8], edi
		mov	[esp+0FCh+var_FC], ebp
		call	_OCSP_request_add0_id
		test	eax, eax
		jz	loc_41E9F0
		lea	eax, [esp+0FCh+var_B0]
		mov	[esp+0FCh+var_F0], eax
		mov	[esp+0FCh+var_F4], 0
		mov	[esp+0FCh+var_F8], 42h
		mov	eax, [esp+0FCh+arg_0]
		mov	[esp+0FCh+var_FC], eax
		call	_SSL_ctrl
		xor	edi, edi
		jmp	short loc_41E8FD
; ---------------------------------------------------------------------------
		align 10h

loc_41E8D0:				; CODE XREF: _cert_status_cb+30Bj
		mov	[esp+0FCh+var_F8], edi
		mov	eax, [esp+0FCh+var_B0]
		mov	[esp+0FCh+var_FC], eax
		call	_sk_value
		mov	[esp+0FCh+var_F4], 0FFFFFFFFh
		mov	[esp+0FCh+var_F8], eax
		mov	[esp+0FCh+var_FC], ebp
		call	_OCSP_REQUEST_add_ext
		test	eax, eax
		jz	loc_41E9FC
		inc	edi

loc_41E8FD:				; CODE XREF: _cert_status_cb+2CAj
		mov	eax, [esp+0FCh+var_B0]
		mov	[esp+0FCh+var_FC], eax
		call	_sk_num
		cmp	edi, eax
		jl	short loc_41E8D0
		mov	eax, [esi+10h]
		mov	[esp+0FCh+var_E0], eax
		mov	[esp+0FCh+var_E4], 0
		mov	eax, [esp+0FCh+var_B8]
		mov	[esp+0FCh+var_E8], eax
		mov	eax, [esp+0FCh+var_C0]
		mov	[esp+0FCh+var_EC], eax
		mov	eax, [esp+0FCh+var_BC]
		mov	[esp+0FCh+var_F0], eax
		mov	eax, [esp+0FCh+var_C4]
		mov	[esp+0FCh+var_F4], eax
		mov	[esp+0FCh+var_F8], ebp
		mov	eax, [esp+0FCh+var_D4]
		mov	[esp+0FCh+var_FC], eax
		call	_process_responder
		mov	edi, eax
		test	eax, eax
		jz	loc_41EA10
		lea	eax, [esp+0FCh+var_B4]
		mov	[esp+0FCh+var_F8], eax
		mov	[esp+0FCh+var_FC], edi
		call	_i2d_OCSP_RESPONSE
		test	eax, eax
		jg	loc_41EA36
		mov	esi, 2
		mov	[esp+0FCh+var_D0], 0
		jmp	loc_41E6E9
; ---------------------------------------------------------------------------

loc_41E980:				; CODE XREF: _cert_status_cb+23Aj
		mov	[esp+0FCh+var_F8], offset aCert_statusC_0 ; "cert_status: Can't retrieve issuer cert"...
		mov	eax, [esp+0FCh+var_D4]
		mov	[esp+0FCh+var_FC], eax
		call	_BIO_puts
		lea	eax, [esp+0FCh+var_A4]
		mov	[esp+0FCh+var_FC], eax
		call	_X509_STORE_CTX_cleanup
		mov	esi, 3
		mov	[esp+0FCh+var_D0], 0
		xor	edi, edi
		xor	ebp, ebp
		jmp	loc_41E6E9
; ---------------------------------------------------------------------------
		align 10h

loc_41E9C0:				; CODE XREF: _cert_status_cb+194j
		mov	eax, [esi+14h]
		mov	[esp+0FCh+var_F8], offset aCert_statusNoA ; "cert_status: no AIA and no	default	resp"...
		mov	[esp+0FCh+var_FC], eax
		call	_BIO_puts
		mov	esi, 3
		mov	[esp+0FCh+var_D0], 0
		xor	edi, edi
		xor	ebp, ebp
		jmp	loc_41E6E9
; ---------------------------------------------------------------------------
		align 10h

loc_41E9F0:				; CODE XREF: _cert_status_cb+287j
					; _cert_status_cb+29Bj
		mov	esi, 2
		xor	edi, edi
		jmp	loc_41E6E9
; ---------------------------------------------------------------------------

loc_41E9FC:				; CODE XREF: _cert_status_cb+2F6j
		mov	esi, 2
		mov	[esp+0FCh+var_D0], 0
		xor	edi, edi
		jmp	loc_41E6E9
; ---------------------------------------------------------------------------

loc_41EA10:				; CODE XREF: _cert_status_cb+350j
		mov	[esp+0FCh+var_F8], offset aCert_statusErr ; "cert_status: error	querying responder\n"
		mov	eax, [esp+0FCh+var_D4]
		mov	[esp+0FCh+var_FC], eax
		call	_BIO_puts
		mov	esi, 3
		mov	[esp+0FCh+var_D0], 0
		jmp	loc_41E6E9
; ---------------------------------------------------------------------------

loc_41EA36:				; CODE XREF: _cert_status_cb+368j
		mov	edx, [esp+0FCh+var_B4]
		mov	[esp+0FCh+var_F0], edx
		mov	[esp+0FCh+var_F4], eax
		mov	[esp+0FCh+var_F8], 47h
		mov	eax, [esp+0FCh+arg_0]
		mov	[esp+0FCh+var_FC], eax
		call	_SSL_ctrl
		mov	eax, [esi+18h]
		test	eax, eax
		jnz	short loc_41EA6F

loc_41EA60:				; CODE XREF: _cert_status_cb+497j
		xor	esi, esi
		mov	[esp+0FCh+var_D0], 0
		jmp	loc_41E6F5
; ---------------------------------------------------------------------------

loc_41EA6F:				; CODE XREF: _cert_status_cb+45Ej
		mov	[esp+0FCh+var_F8], offset aCert_statusOcs ; "cert_status: ocsp response	sent:\n"
		mov	esi, [esp+0FCh+var_D4]
		mov	[esp+0FCh+var_FC], esi
		call	_BIO_puts
		mov	[esp+0FCh+var_F4], 2
		mov	[esp+0FCh+var_F8], edi
		mov	[esp+0FCh+var_FC], esi
		call	_OCSP_RESPONSE_print
		jmp	short loc_41EA60
_cert_status_cb	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sv_body(int, SOCKET s, char *)
_sv_body	proc near		; DATA XREF: _s_server_main:loc_423177o

var_14C		= dword	ptr -14Ch
nfds		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
timeout		= timeval ptr -124h
readfds		= fd_set ptr -11Ch
s		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 16Ch
		mov	ebx, [ebp+arg_8]
		mov	dword ptr [esp+8], 7B6h
		mov	dword ptr [esp+4], offset aS_server_c ;	"s_server.c"
		mov	dword ptr [esp], 4000h
		call	_CRYPTO_malloc
		mov	edi, eax
		test	eax, eax
		jz	loc_41F9C8
		mov	ecx, ds:_s_nbio
		test	ecx, ecx
		jnz	loc_41F380

loc_41EAE3:				; CODE XREF: _sv_body+917j
					; _sv_body+92Aj
		mov	eax, ds:_ctx
		mov	[esp], eax
		call	_SSL_new
		mov	esi, eax
		mov	eax, ds:_s_tlsextdebug
		test	eax, eax
		jnz	loc_41F5A0

loc_41EAFF:				; CODE XREF: _sv_body+B39j
		mov	eax, ds:_s_tlsextstatus
		test	eax, eax
		jnz	loc_41F540

loc_41EB0C:				; CODE XREF: _sv_body+AECj
		test	ebx, ebx
		jz	short loc_41EB28
		mov	[esp], ebx	; char *
		call	_strlen
		mov	[esp+8], eax
		mov	[esp+4], ebx
		mov	[esp], esi
		call	_SSL_set_session_id_context

loc_41EB28:				; CODE XREF: _sv_body+6Ej
		mov	[esp], esi
		call	_SSL_clear
		mov	[esp], esi
		call	_SSL_version
		mov	dword ptr [esp+4], 0
		cmp	eax, 0FEFFh
		mov	eax, [ebp+s]
		mov	[esp], eax
		jz	loc_41F6D0
		call	_BIO_new_socket
		mov	ebx, eax

loc_41EB58:				; CODE XREF: _sv_body+D3Aj
		mov	eax, ds:_s_nbio_test
		test	eax, eax
		jnz	loc_41F6B0

loc_41EB65:				; CODE XREF: _sv_body+C2Bj
		mov	[esp+8], ebx
		mov	[esp+4], ebx
		mov	[esp], esi
		call	_SSL_set_bio
		mov	[esp], esi
		call	_SSL_set_accept_state
		mov	eax, ds:_s_debug
		test	eax, eax
		jnz	loc_41F660

loc_41EB8A:				; CODE XREF: _sv_body+C02j
		mov	ebx, ds:_s_msg
		test	ebx, ebx
		jnz	loc_41F620

loc_41EB98:				; CODE XREF: _sv_body+BB1j
		mov	ecx, ds:_s_tlsextdebug
		test	ecx, ecx
		jnz	loc_41F5E0

loc_41EBA6:				; CODE XREF: _sv_body+B79j
		mov	eax, [ebp+s]
		inc	eax
		mov	[ebp+nfds], eax

loc_41EBB0:				; CODE XREF: _sv_body+42Fj
					; _sv_body+4ABj ...
		mov	[esp], esi	; jumptable 0041F8C5 default case
		call	_SSL_pending
		test	eax, eax
		jz	loc_41F0E0

loc_41EBC0:				; CODE XREF: _sv_body+997j
		mov	[esp], esi
		call	_SSL_state
		cmp	eax, 3
		jz	loc_41F040

loc_41EBD1:				; CODE XREF: _sv_body+D05j
		mov	[esp], esi
		call	_SSL_accept
		mov	ebx, eax
		test	eax, eax
		jg	loc_41EC74

loc_41EBE3:				; CODE XREF: _sv_body+1CEj
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_get_error
		cmp	eax, 4
		jnz	loc_41F968
		mov	eax, ds:_srp_callback_parm
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aLookupDuringAc ; "LOOKUP during accept %s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:dword_473390
		mov	[esp], eax
		call	_SRP_user_pwd_free
		mov	eax, ds:_srp_callback_parm
		mov	[esp+4], eax
		mov	eax, ds:dword_47338C
		mov	[esp], eax
		call	_SRP_VBASE_get1_by_user
		mov	ds:dword_473390, eax
		test	eax, eax
		jz	loc_41F790
		mov	eax, [eax+14h]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aLookupDoneS ; "LOOKUP done %s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], esi
		call	_SSL_accept
		mov	ebx, eax
		test	eax, eax
		jle	loc_41EBE3

loc_41EC74:				; CODE XREF: _sv_body+13Dj
		mov	[esp], esi
		call	_SSL_get_session
		mov	[esp+4], eax
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_PEM_write_bio_SSL_SESSION
		mov	[esp], esi
		call	_SSL_get_peer_certificate
		mov	ebx, eax
		test	eax, eax
		jz	loc_41ED47
		mov	dword ptr [esp+4], offset aClientCertific ; "Client certificate\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp+4], ebx
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_PEM_write_bio_X509
		mov	[esp], ebx
		call	_X509_get_subject_name
		mov	dword ptr [esp+8], 200h
		mov	dword ptr [esp+4], offset _buf_38278
		mov	[esp], eax
		call	_X509_NAME_oneline
		mov	dword ptr [esp+8], offset _buf_38278
		mov	dword ptr [esp+4], offset aSubjectS_0 ;	"subject=%s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], ebx
		call	_X509_get_issuer_name
		mov	dword ptr [esp+8], 200h
		mov	dword ptr [esp+4], offset _buf_38278
		mov	[esp], eax
		call	_X509_NAME_oneline
		mov	dword ptr [esp+8], offset _buf_38278
		mov	dword ptr [esp+4], offset aIssuerS_0 ; "issuer=%s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], ebx
		call	_X509_free

loc_41ED47:				; CODE XREF: _sv_body+1F9j
		mov	dword ptr [esp+8], 200h
		mov	dword ptr [esp+4], offset _buf_38278
		mov	[esp], esi
		call	_SSL_get_shared_ciphers
		test	eax, eax
		jz	short loc_41ED80
		mov	dword ptr [esp+8], offset _buf_38278
		mov	dword ptr [esp+4], offset aSharedCiphersS ; "Shared ciphers:%s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf

loc_41ED80:				; CODE XREF: _sv_body+2C1j
		mov	[esp], esi
		call	_SSL_get_current_cipher
		mov	[esp], eax
		call	_SSL_CIPHER_get_name
		test	eax, eax
		jz	loc_41FBBF

loc_41ED98:				; CODE XREF: _sv_body+1124j
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aCipherIsS ; "CIPHER is %s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		lea	eax, [ebp+var_130]
		mov	[esp+8], eax
		lea	eax, [ebp+var_134]
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_get0_next_proto_negotiated
		mov	ecx, [ebp+var_134]
		test	ecx, ecx
		jz	short loc_41EE22
		mov	dword ptr [esp+4], offset aNextprotoIs ; "NEXTPROTO is "
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, [ebp+var_130]
		mov	[esp+8], eax
		mov	eax, [ebp+var_134]
		mov	[esp+4], eax
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_write
		mov	dword ptr [esp+4], offset asc_4637D6 ; "\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf

loc_41EE22:				; CODE XREF: _sv_body+335j
		mov	[esp], esi
		call	_SSL_get_selected_srtp_profile
		test	eax, eax
		jz	short loc_41EE49
		mov	eax, [eax]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aSrtpExtensionN ; "SRTP Extension negotiated,	profile=%s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf

loc_41EE49:				; CODE XREF: _sv_body+38Cj
		mov	[esp], esi
		call	_SSL_cache_hit
		test	eax, eax
		jnz	loc_41FAC3

loc_41EE59:				; CODE XREF: _sv_body+1038j
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Dh
		mov	[esp], esi
		call	_SSL_ctrl
		test	al, 8
		jnz	loc_41FAA9

loc_41EE81:				; CODE XREF: _sv_body+101Ej
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 4Ch
		mov	[esp], esi
		call	_SSL_ctrl
		test	eax, eax
		jz	loc_41F9FC
		mov	eax, offset byte_463601

loc_41EEAE:				; CODE XREF: _sv_body+F61j
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aSecureRenegoti ; "Secure Renegotiation IS%s supported\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	edx, ds:_keymatexportlabel
		test	edx, edx
		jz	loc_41EBB0	; jumptable 0041F8C5 default case
		mov	dword ptr [esp+4], offset aKeyingMaterial ; "Keying material exporter:\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_keymatexportlabel
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aLabelS ; "	 Label:	'%s'\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, _keymatexportlen
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aLengthIBytes	; "    Length: %i bytes\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+8], 9B0h
		mov	dword ptr [esp+4], offset aS_server_c ;	"s_server.c"
		mov	eax, _keymatexportlen
		mov	[esp], eax
		call	_CRYPTO_malloc
		mov	[ebp+var_13C], eax
		test	eax, eax
		jz	loc_41EBB0	; jumptable 0041F8C5 default case
		mov	ebx, ds:_keymatexportlabel
		mov	[esp], ebx	; char *
		call	_strlen
		mov	dword ptr [esp+1Ch], 0
		mov	dword ptr [esp+18h], 0
		mov	dword ptr [esp+14h], 0
		mov	[esp+10h], eax
		mov	[esp+0Ch], ebx
		mov	eax, _keymatexportlen
		mov	[esp+8], eax
		mov	eax, [ebp+var_13C]
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_export_keying_material
		test	eax, eax
		jz	loc_41FA60
		mov	dword ptr [esp+4], offset aKeyingMateri_0 ; "	 Keying	material: "
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		xor	ebx, ebx
		mov	eax, _keymatexportlen
		test	eax, eax
		jle	short loc_41EFFD
		mov	[ebp+var_140], esi
		mov	esi, ebx
		mov	ebx, [ebp+var_13C]

loc_41EFD0:				; CODE XREF: _sv_body+555j
		xor	eax, eax
		mov	al, [ebx+esi]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset a02x_2 ; "%02X"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		inc	esi
		cmp	esi, _keymatexportlen
		jl	short loc_41EFD0
		mov	esi, [ebp+var_140]

loc_41EFFD:				; CODE XREF: _sv_body+520j
		mov	dword ptr [esp+4], offset asc_4637D6 ; "\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_41FA75
; ---------------------------------------------------------------------------
		align 10h

loc_41F020:				; CODE XREF: _sv_body+60Aj
		mov	dword ptr [esp+4], offset aLookupNotSucce ; "LOOKUP not	successful\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_41F040:				; CODE XREF: _sv_body+12Bj
					; _sv_body+62Cj ...
		mov	dword ptr [esp+8], 4000h
		mov	[esp+4], edi
		mov	[esp], esi
		call	_SSL_read
		mov	ebx, eax
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_get_error
		cmp	eax, 4
		jnz	loc_41F8B0
		mov	dword ptr [esp+4], offset aLookupRenegoDu ; "LOOKUP renego during read\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:dword_473390
		mov	[esp], eax
		call	_SRP_user_pwd_free
		mov	eax, ds:_srp_callback_parm
		mov	[esp+4], eax
		mov	eax, ds:dword_47338C
		mov	[esp], eax
		call	_SRP_VBASE_get1_by_user
		mov	ds:dword_473390, eax
		test	eax, eax
		jz	loc_41F020
		mov	eax, [eax+14h]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aLookupDoneS ; "LOOKUP done %s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_41F040
; ---------------------------------------------------------------------------
		jmp	short loc_41F0E0
; ---------------------------------------------------------------------------
		align 10h

loc_41F0E0:				; CODE XREF: _sv_body+11Aj
					; _sv_body+631j
		mov	eax, [ebp+s]
		mov	[ebp+readfds.fd_array],	eax
		mov	[ebp+readfds.fd_count],	1
		mov	[ebp+timeout.tv_sec], 1
		mov	[ebp+timeout.tv_usec], 0
		lea	eax, [ebp+timeout]
		mov	[esp+10h], eax	; timeout
		mov	dword ptr [esp+0Ch], 0 ; exceptfds
		mov	dword ptr [esp+8], 0 ; writefds
		lea	eax, [ebp+readfds]
		mov	[esp+4], eax	; readfds
		mov	eax, [ebp+nfds]
		mov	[esp], eax	; nfds
		call	ds:__imp__select@20
		sub	esp, 14h
		test	eax, eax
		js	loc_41EBB0	; jumptable 0041F8C5 default case
		mov	ebx, ds:__imp___kbhit
		jnz	short loc_41F157
		call	ebx ; __imp___kbhit
		test	eax, eax
		jz	loc_41EBB0	; jumptable 0041F8C5 default case

loc_41F157:				; CODE XREF: _sv_body+6ABj
		call	ebx ; __imp___kbhit
		mov	ebx, eax
		lea	eax, [ebp+readfds]
		mov	[esp+4], eax	; fd_set *
		mov	eax, [ebp+s]
		mov	[esp], eax	; SOCKET
		call	___WSAFDIsSet@8
		sub	esp, 8
		mov	[ebp+var_14C], eax
		test	ebx, ebx
		jz	loc_41F429
		mov	eax, ds:_s_crlf
		test	eax, eax
		jz	loc_41F520
		mov	dword ptr [esp+4], 2000h ; nNumberOfBytesToRead
		mov	[esp], edi	; lpBuffer
		call	_raw_read_stdin
		mov	ecx, eax
		mov	[ebp+var_13C], eax
		test	eax, eax
		jle	loc_41FAA2
		mov	eax, edi
		lea	ebx, [ecx+edi]
		xor	edx, edx
		jmp	short loc_41F1C5
; ---------------------------------------------------------------------------
		align 10h

loc_41F1C0:				; CODE XREF: _sv_body+72Bj
		inc	eax
		cmp	eax, ebx
		jz	short loc_41F1D4

loc_41F1C5:				; CODE XREF: _sv_body+715j
					; _sv_body+732j
		lea	ecx, [edx+1]
		cmp	byte ptr [eax],	0Ah
		jnz	short loc_41F1C0
		mov	edx, ecx
		inc	eax
		cmp	eax, ebx
		jnz	short loc_41F1C5

loc_41F1D4:				; CODE XREF: _sv_body+723j
					; _sv_body+1004j
		mov	ebx, [ebp+var_13C]
		mov	eax, ebx
		dec	eax
		js	short loc_41F216
		lea	ecx, [edi+edx]
		jmp	short loc_41F1F6
; ---------------------------------------------------------------------------
		align 10h

loc_41F1F0:				; CODE XREF: _sv_body+760j
		dec	eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_41F216

loc_41F1F6:				; CODE XREF: _sv_body+742j
					; _sv_body+774j
		mov	bl, [edi+eax]
		mov	[ecx+eax], bl
		cmp	byte ptr [edi+eax], 0Ah
		jnz	short loc_41F1F0
		dec	edx
		inc	[ebp+var_13C]
		lea	ecx, [edi+edx]
		mov	byte ptr [ecx+eax], 0Dh
		dec	eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_41F1F6

loc_41F216:				; CODE XREF: _sv_body+73Dj
					; _sv_body+754j
		test	edx, edx
		jnz	loc_41F8CC

loc_41F21E:				; CODE XREF: _sv_body+A96j
					; _sv_body+E48j
		mov	eax, ds:_s_quiet
		test	eax, eax
		jnz	short loc_41F290
		mov	eax, [ebp+var_13C]
		test	eax, eax
		jle	loc_41FB33
		mov	al, [edi]
		cmp	al, 51h
		jz	loc_41FB33
		cmp	al, 71h
		jz	loc_41FADD
		cmp	al, 42h
		jz	loc_41F907
		cmp	al, 72h
		jz	loc_41F950
		cmp	al, 52h
		jz	loc_41F7DF
		cmp	al, 50h
		jnz	short loc_41F285
		mov	[esp], esi
		call	_SSL_get_wbio
		mov	dword ptr [esp+8], 1Bh
		mov	dword ptr [esp+4], offset aLetsPrintSomeC ; "Lets print	some clear text\n"
		mov	[esp], eax
		call	_BIO_write
		mov	al, [edi]

loc_41F285:				; CODE XREF: _sv_body+7C1j
		cmp	al, 53h
		jz	loc_41FA06
		lea	esi, [esi+0]

loc_41F290:				; CODE XREF: _sv_body+785j
					; _sv_body+D48j ...
		mov	[ebp+var_144], 0
		mov	[ebp+var_140], edi

loc_41F2A0:				; CODE XREF: _sv_body+97Dj
		mov	edi, [ebp+var_140]
		add	edi, [ebp+var_144]
		mov	eax, [ebp+var_13C]
		mov	[esp+8], eax
		mov	[esp+4], edi
		mov	[esp], esi
		call	_SSL_write
		mov	ebx, eax
		mov	eax, edi
		mov	edi, ebx
		mov	ebx, eax
		jmp	short loc_41F304
; ---------------------------------------------------------------------------
		align 10h

loc_41F2D0:				; CODE XREF: _sv_body+8B8j
		mov	eax, [eax+14h]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aLookupDoneS ; "LOOKUP done %s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf

loc_41F2EC:				; CODE XREF: _sv_body+8D3j
		mov	eax, [ebp+var_13C]
		mov	[esp+8], eax
		mov	[esp+4], ebx
		mov	[esp], esi
		call	_SSL_write
		mov	edi, eax

loc_41F304:				; CODE XREF: _sv_body+82Aj
		mov	[esp+4], edi
		mov	[esp], esi
		call	_SSL_get_error
		cmp	eax, 4
		jnz	loc_41F3D0
		mov	dword ptr [esp+4], offset aLookupRenego_0 ; "LOOKUP renego during write\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:dword_473390
		mov	[esp], eax
		call	_SRP_user_pwd_free
		mov	eax, ds:_srp_callback_parm
		mov	[esp+4], eax
		mov	eax, ds:dword_47338C
		mov	[esp], eax
		call	_SRP_VBASE_get1_by_user
		mov	ds:dword_473390, eax
		test	eax, eax
		jnz	loc_41F2D0
		mov	dword ptr [esp+4], offset aLookupNotSucce ; "LOOKUP not	successful\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_41F2EC
; ---------------------------------------------------------------------------
		align 10h

loc_41F380:				; CODE XREF: _sv_body+3Dj
		mov	[ebp+readfds.fd_count],	1
		mov	edx, ds:_s_quiet
		test	edx, edx
		jz	loc_41F8ED

loc_41F398:				; CODE XREF: _sv_body+E62j
		lea	eax, [ebp+readfds]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 8004667Eh
		mov	eax, [ebp+s]
		mov	[esp], eax
		call	_BIO_socket_ioctl
		test	eax, eax
		jns	loc_41EAE3
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		jmp	loc_41EAE3
; ---------------------------------------------------------------------------
		align 10h

loc_41F3D0:				; CODE XREF: _sv_body+873j
		mov	ebx, edi
		mov	[esp+4], edi
		mov	[esp], esi
		call	_SSL_get_error
		cmp	eax, 6		; switch 7 cases
		ja	short loc_41F405 ; jumptable 0041F3E3 default case
		jmp	ds:off_46390C[eax*4] ; switch jump
; ---------------------------------------------------------------------------
		align 10h

loc_41F3F0:				; CODE XREF: _sv_body+943j
					; DATA XREF: .rdata:off_46390Co
		mov	dword ptr [esp+4], offset aWriteBlock ;	jumptable 0041F3E3 cases 2-4
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf

loc_41F405:				; CODE XREF: _sv_body+941j
					; _sv_body+943j
					; DATA XREF: ...
		test	ebx, ebx	; jumptable 0041F3E3 default case
		jle	short loc_41F415
		add	[ebp+var_144], ebx
		sub	[ebp+var_13C], ebx

loc_41F415:				; CODE XREF: _sv_body+967j
		mov	ebx, [ebp+var_13C]
		test	ebx, ebx
		jg	loc_41F2A0
		mov	edi, [ebp+var_140]

loc_41F429:				; CODE XREF: _sv_body+6DBj
		mov	edx, [ebp+var_14C]
		test	edx, edx
		jz	loc_41EBB0	; jumptable 0041F8C5 default case
		jmp	loc_41EBC0
; ---------------------------------------------------------------------------
		align 10h

loc_41F440:				; CODE XREF: _sv_body+943j
					; DATA XREF: .rdata:off_46390Co
		mov	edi, [ebp+var_140] ; jumptable 0041F3E3	cases 1,5

loc_41F446:				; CODE XREF: _sv_body+E25j
					; DATA XREF: .rdata:off_463928o
		mov	dword ptr [esp+4], offset aError_0 ; jumptable 0041F8C5	cases 1,5
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	ebx, 1

loc_41F46D:				; CODE XREF: _sv_body+A70j
					; _sv_body+CE4j ...
		test	esi, esi
		jz	short loc_41F49E
		mov	dword ptr [esp+4], offset aShuttingDownSs ; "shutting down SSL\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], 3
		mov	[esp], esi
		call	_SSL_set_shutdown
		mov	[esp], esi
		call	_SSL_free

loc_41F49E:				; CODE XREF: _sv_body+9CFj
		mov	dword ptr [esp+4], offset aConnectionClos ; "CONNECTION	CLOSED\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], 4000h
		mov	[esp], edi
		call	_OPENSSL_cleanse
		mov	[esp], edi
		call	_CRYPTO_free
		test	ebx, ebx
		js	short loc_41F4E4

loc_41F4CF:				; CODE XREF: _sv_body+F57j
		mov	dword ptr [esp+4], offset aAccept ; "ACCEPT\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf

loc_41F4E4:				; CODE XREF: _sv_body+A2Dj
		mov	eax, ebx
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41F4F0:				; CODE XREF: _sv_body+943j
					; DATA XREF: .rdata:off_46390Co
		mov	edi, [ebp+var_140] ; jumptable 0041F3E3	case 6

loc_41F4F6:				; CODE XREF: _sv_body+E25j
					; DATA XREF: .rdata:off_463928o
		mov	dword ptr [esp+4], offset aDone	; jumptable 0041F8C5 case 6
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_41F46D
; ---------------------------------------------------------------------------
		align 10h

loc_41F520:				; CODE XREF: _sv_body+6E8j
		mov	dword ptr [esp+4], 4000h ; nNumberOfBytesToRead
		mov	[esp], edi	; lpBuffer
		call	_raw_read_stdin
		mov	[ebp+var_13C], eax
		jmp	loc_41F21E
; ---------------------------------------------------------------------------
		align 10h

loc_41F540:				; CODE XREF: _sv_body+66j
		mov	dword ptr [esp+8], offset _cert_status_cb
		mov	dword ptr [esp+4], 3Fh
		mov	eax, ds:_ctx
		mov	[esp], eax
		call	_SSL_CTX_callback_ctrl
		mov	eax, ds:_bio_err
		mov	dword_455774, eax
		mov	dword ptr [esp+0Ch], offset _tlscstatp
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 40h
		mov	eax, ds:_ctx
		mov	[esp], eax
		call	_SSL_CTX_ctrl
		jmp	loc_41EB0C
; ---------------------------------------------------------------------------
		jmp	short loc_41F5A0
; ---------------------------------------------------------------------------
		align 10h

loc_41F5A0:				; CODE XREF: _sv_body+59j
					; _sv_body+AF1j
		mov	dword ptr [esp+8], offset _tlsext_cb
		mov	dword ptr [esp+4], 38h
		mov	[esp], esi
		call	_SSL_callback_ctrl
		mov	eax, ds:_bio_s_out
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 39h
		mov	[esp], esi
		call	_SSL_ctrl
		jmp	loc_41EAFF
; ---------------------------------------------------------------------------
		align 10h

loc_41F5E0:				; CODE XREF: _sv_body+100j
		mov	dword ptr [esp+8], offset _tlsext_cb
		mov	dword ptr [esp+4], 38h
		mov	[esp], esi
		call	_SSL_callback_ctrl
		mov	eax, ds:_bio_s_out
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 39h
		mov	[esp], esi
		call	_SSL_ctrl
		jmp	loc_41EBA6
; ---------------------------------------------------------------------------
		align 10h

loc_41F620:				; CODE XREF: _sv_body+F2j
		mov	dword ptr [esp+4], offset _msg_cb
		mov	[esp], esi
		call	_SSL_set_msg_callback
		mov	eax, ds:_bio_s_out
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 10h
		mov	[esp], esi
		call	_SSL_ctrl
		jmp	loc_41EB98
; ---------------------------------------------------------------------------
		align 10h

loc_41F660:				; CODE XREF: _sv_body+E4j
		mov	dword ptr [esp+4], 1
		mov	[esp], esi
		call	_SSL_set_debug
		mov	[esp], esi
		call	_SSL_get_rbio
		mov	dword ptr [esp+4], offset _bio_dump_callback
		mov	[esp], eax
		call	_BIO_set_callback
		mov	ebx, ds:_bio_s_out
		mov	[esp], esi
		call	_SSL_get_rbio
		mov	[esp+4], ebx
		mov	[esp], eax
		call	_BIO_set_callback_arg
		jmp	loc_41EB8A
; ---------------------------------------------------------------------------
		align 10h

loc_41F6B0:				; CODE XREF: _sv_body+BFj
		call	_BIO_f_nbio_test
		mov	[esp], eax
		call	_BIO_new
		mov	[esp+4], ebx
		mov	[esp], eax
		call	_BIO_push
		mov	ebx, eax
		jmp	loc_41EB65
; ---------------------------------------------------------------------------

loc_41F6D0:				; CODE XREF: _sv_body+ABj
		call	_BIO_new_dgram
		mov	ebx, eax
		mov	eax, ds:_enable_timeouts
		test	eax, eax
		jnz	loc_41F82B

loc_41F6E4:				; CODE XREF: _sv_body+DFDj
		mov	eax, ds:_socket_mtu
		test	eax, eax
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		jz	loc_41F7AA
		mov	dword ptr [esp+4], 79h
		mov	[esp], esi
		call	_SSL_ctrl
		cmp	eax, ds:_socket_mtu
		mov	dword ptr [esp+0Ch], 0
		jg	loc_41FBDB
		mov	dword ptr [esp+8], 1000h
		mov	dword ptr [esp+4], 20h
		mov	[esp], esi
		call	_SSL_ctrl
		mov	dword ptr [esp+0Ch], 0
		mov	eax, ds:_socket_mtu
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 78h
		mov	[esp], esi
		call	_SSL_ctrl
		test	eax, eax
		jnz	short loc_41F7BA
		mov	dword ptr [esp+4], offset aFailedToSetMtu ; "Failed to set MTU\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], ebx
		call	_BIO_free
		mov	ebx, 0FFFFFFFFh
		jmp	loc_41F46D
; ---------------------------------------------------------------------------
		align 10h

loc_41F790:				; CODE XREF: _sv_body+1A0j
		mov	dword ptr [esp+4], offset aLookupNotSucce ; "LOOKUP not	successful\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_41EBD1
; ---------------------------------------------------------------------------

loc_41F7AA:				; CODE XREF: _sv_body+C5Bj
		mov	dword ptr [esp+4], 27h
		mov	[esp], ebx
		call	_BIO_ctrl

loc_41F7BA:				; CODE XREF: _sv_body+CC0j
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 2000h
		mov	dword ptr [esp+4], 20h
		mov	[esp], esi
		call	_SSL_ctrl
		jmp	loc_41EB58
; ---------------------------------------------------------------------------

loc_41F7DF:				; CODE XREF: _sv_body+7B9j
		mov	al, [edi+1]
		cmp	al, 0Ah
		jz	short loc_41F7EE
		cmp	al, 0Dh
		jnz	loc_41F290

loc_41F7EE:				; CODE XREF: _sv_body+D44j
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 5
		mov	[esp], esi
		call	_SSL_set_verify

loc_41F806:				; CODE XREF: _sv_body+EB5j
					; _sv_body+EC3j
		mov	[esp], esi
		call	_SSL_renegotiate
		mov	[esp], esi
		call	_SSL_do_handshake
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aSsl_do_handsha	; "SSL_do_handshake -> %d\n"
		call	_printf
		jmp	loc_41EBB0	; jumptable 0041F8C5 default case
; ---------------------------------------------------------------------------

loc_41F82B:				; CODE XREF: _sv_body+C3Ej
		mov	[ebp+var_12C], 0
		mov	[ebp+var_128], 3D090h
		lea	edx, [ebp+var_12C]
		mov	[esp+0Ch], edx
		mov	[ebp+var_13C], edx
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 21h
		mov	[esp], ebx
		call	_BIO_ctrl
		mov	[ebp+var_12C], 0
		mov	[ebp+var_128], 3D090h
		mov	edx, [ebp+var_13C]
		mov	[esp+0Ch], edx
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 23h
		mov	[esp], ebx
		call	_BIO_ctrl
		jmp	loc_41F6E4
; ---------------------------------------------------------------------------
		align 10h

loc_41F8B0:				; CODE XREF: _sv_body+5C5j
		mov	[esp+4], ebx
		mov	[esp], esi
		call	_SSL_get_error
		cmp	eax, 6		; switch 7 cases
		ja	loc_41EBB0	; jumptable 0041F8C5 default case
		jmp	ds:off_463928[eax*4] ; switch jump
; ---------------------------------------------------------------------------

loc_41F8CC:				; CODE XREF: _sv_body+778j
		mov	dword ptr [esp+8], 87Eh	; unsigned int
		mov	dword ptr [esp+4], offset aS_server_c ;	"s_server.c"
		mov	dword ptr [esp], offset	aLf_num0 ; "lf_num == 0"
		call	__assert
; ---------------------------------------------------------------------------
		jmp	loc_41F21E
; ---------------------------------------------------------------------------

loc_41F8ED:				; CODE XREF: _sv_body+8F2j
		mov	dword ptr [esp+4], offset aTurningOnNonBl ; "turning on	non blocking io\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_41F398
; ---------------------------------------------------------------------------

loc_41F907:				; CODE XREF: _sv_body+7A9j
		mov	al, [edi+1]
		cmp	al, 0Ah
		jz	short loc_41F916
		cmp	al, 0Dh
		jnz	loc_41F290

loc_41F916:				; CODE XREF: _sv_body+E6Cj
		mov	dword ptr [esp+4], offset aHeartbeating	; "HEARTBEATING\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 55h
		mov	[esp], esi
		call	_SSL_ctrl
		jmp	loc_41EBB0	; jumptable 0041F8C5 default case
; ---------------------------------------------------------------------------

loc_41F950:				; CODE XREF: _sv_body+7B1j
		mov	al, [edi+1]
		cmp	al, 0Ah
		jz	loc_41F806
		cmp	al, 0Dh
		jnz	loc_41F290
		jmp	loc_41F806
; ---------------------------------------------------------------------------

loc_41F968:				; CODE XREF: _sv_body+152j
		mov	[esp], ebx
		call	_BIO_sock_should_retry
		test	eax, eax
		jnz	loc_41FA88
		mov	dword ptr [esp+4], offset aError_0 ; "ERROR\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], esi
		call	_SSL_get_verify_result
		test	eax, eax
		jz	loc_41FBC9
		mov	[esp], eax
		call	_X509_verify_cert_error_string
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aVerifyErrorS_0 ; "verify error:%s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf

loc_41F9BE:				; CODE XREF: _sv_body+105Fj
					; _sv_body+1136j
		mov	ebx, 1
		jmp	loc_41F46D
; ---------------------------------------------------------------------------

loc_41F9C8:				; CODE XREF: _sv_body+2Fj
		mov	dword ptr [esp+4], offset aOutOfMemory_6 ; "out	of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aConnectionClos ; "CONNECTION	CLOSED\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_41F4CF
; ---------------------------------------------------------------------------

loc_41F9FC:				; CODE XREF: _sv_body+403j
		mov	eax, offset aNot ; " NOT"
		jmp	loc_41EEAE
; ---------------------------------------------------------------------------

loc_41FA06:				; CODE XREF: _sv_body+7E7j
		mov	[esp], esi
		call	_SSL_get_SSL_CTX
		mov	edx, eax
		mov	eax, ds:_bio_s_out
		call	_print_stats
		jmp	loc_41F290
; ---------------------------------------------------------------------------

loc_41FA1F:				; CODE XREF: _sv_body+E25j
					; DATA XREF: .rdata:off_463928o
		mov	dword ptr [esp+4], offset aReadBlock ; jumptable 0041F8C5 cases	2,3
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_41EBB0	; jumptable 0041F8C5 default case
; ---------------------------------------------------------------------------

loc_41FA39:				; CODE XREF: _sv_body+E25j
					; DATA XREF: .rdata:off_463928o
		mov	[esp+4], ebx	; jumptable 0041F8C5 case 0
		mov	[esp], edi	; lpBuffer
		call	_raw_write_stdout
		mov	[esp], esi
		call	_SSL_pending
		test	eax, eax
		jnz	loc_41F040
		jmp	loc_41EBB0	; jumptable 0041F8C5 default case
; ---------------------------------------------------------------------------
		align 10h

loc_41FA60:				; CODE XREF: _sv_body+4FCj
		mov	dword ptr [esp+4], offset aError_1 ; "	  Error\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf

loc_41FA75:				; CODE XREF: _sv_body+572j
		mov	eax, [ebp+var_13C]
		mov	[esp], eax
		call	_CRYPTO_free
		jmp	loc_41EBB0	; jumptable 0041F8C5 default case
; ---------------------------------------------------------------------------

loc_41FA88:				; CODE XREF: _sv_body+ED2j
		mov	dword ptr [esp+4], offset aDelay_0 ; "DELAY\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_41EBB0	; jumptable 0041F8C5 default case
; ---------------------------------------------------------------------------

loc_41FAA2:				; CODE XREF: _sv_body+708j
		xor	edx, edx
		jmp	loc_41F1D4
; ---------------------------------------------------------------------------

loc_41FAA9:				; CODE XREF: _sv_body+3DBj
		mov	dword ptr [esp+4], offset aPeerHasIncorre ; "Peer has incorrect	TLSv1 block padding\"...
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_41EE81
; ---------------------------------------------------------------------------

loc_41FAC3:				; CODE XREF: _sv_body+3B3j
		mov	dword ptr [esp+4], offset aReusedSessionI ; "Reused session-id\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_41EE59
; ---------------------------------------------------------------------------

loc_41FADD:				; CODE XREF: _sv_body+7A1j
		mov	dword ptr [esp+4], offset aDone	; "DONE\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], esi
		call	_SSL_version
		cmp	eax, 0FEFFh
		jz	loc_41F9BE
		mov	dword ptr [esp+4], 0 ; how
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	ds:__imp__shutdown@8
		sub	esp, 8
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	ds:__imp__closesocket@4
		push	eax
		mov	ebx, 1
		jmp	loc_41F46D
; ---------------------------------------------------------------------------

loc_41FB33:				; CODE XREF: _sv_body+78Fj
					; _sv_body+799j
		mov	dword ptr [esp+4], offset aDone	; "DONE\n"
		mov	eax, ds:_bio_s_out
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], 0 ; how
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		mov	edx, ds:__imp__shutdown@8
		mov	[ebp+var_13C], edx
		call	edx ; __imp__shutdown@8
		sub	esp, 8
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		mov	ebx, ds:__imp__closesocket@4
		call	ebx ; __imp__closesocket@4
		push	eax
		mov	dword ptr [esp+4], offset aShutdownAccept ; "shutdown accept socket\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, _accept_socket
		test	eax, eax
		mov	edx, [ebp+var_13C]
		js	short loc_41FBB5
		mov	dword ptr [esp+4], 2
		mov	[esp], eax
		call	edx
		sub	esp, 8
		mov	eax, _accept_socket
		mov	[esp], eax	; s
		call	ebx ; __imp__closesocket@4
		push	eax

loc_41FBB5:				; CODE XREF: _sv_body+10F8j
		mov	ebx, 0FFFFFFF5h
		jmp	loc_41F46D
; ---------------------------------------------------------------------------

loc_41FBBF:				; CODE XREF: _sv_body+2F2j
		mov	eax, offset aNone_4 ; "(NONE)"
		jmp	loc_41ED98
; ---------------------------------------------------------------------------

loc_41FBC9:				; CODE XREF: _sv_body+EF7j
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		jmp	loc_41F9BE
; ---------------------------------------------------------------------------

loc_41FBDB:				; CODE XREF: _sv_body+C7Fj
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 79h
		mov	[esp], esi
		call	_SSL_ctrl
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aMtuTooSmall_Mu ; "MTU too small. Must be at least %ld\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], ebx
		call	_BIO_free
		mov	ebx, 0FFFFFFFFh
		jmp	loc_41F46D
_sv_body	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl www_body(int, int, char *)
_www_body	proc near		; DATA XREF: _s_server_main+2008o

lpFileName	= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	[esp+4Ch+var_44], 9F9h
		mov	[esp+4Ch+var_48], offset aS_server_c ; "s_server.c"
		mov	[esp+4Ch+lpFileName], 4000h
		call	_CRYPTO_malloc
		mov	[esp+4Ch+var_3C], eax
		test	eax, eax
		jz	loc_41FD20
		call	_BIO_f_buffer
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_new
		mov	ebp, eax
		call	_BIO_f_ssl
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_new
		mov	esi, eax
		test	ebp, ebp
		jz	loc_41FF70
		test	eax, eax
		jz	short loc_41FCDF ; jumptable 0041FF10 cases 1,5,6
		mov	eax, ds:_s_nbio
		test	eax, eax
		jz	short loc_41FCBB
		mov	[esp+4Ch+var_20], 1
		mov	eax, ds:_s_quiet
		test	eax, eax
		jz	loc_4202F0

loc_41FC97:				; CODE XREF: _www_body+6E5j
		lea	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], 8004667Eh
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_socket_ioctl
		test	eax, eax
		js	loc_4203D0

loc_41FCBB:				; CODE XREF: _www_body+60j
					; _www_body+7BDj
		mov	[esp+4Ch+var_40], 1
		mov	[esp+4Ch+var_44], 4000h
		mov	[esp+4Ch+var_48], 75h
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_int_ctrl
		test	eax, eax
		jnz	short loc_41FD30

loc_41FCDF:				; CODE XREF: _www_body+57j
					; _www_body+121j ...
		mov	[esp+4Ch+var_48], offset aAccept ; jumptable 0041FF10 cases 1,5,6
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		mov	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+lpFileName], eax
		call	_CRYPTO_free
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_free_all
		mov	eax, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41FD20:				; CODE XREF: _www_body+29j
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41FD30:				; CODE XREF: _www_body+BDj
		mov	eax, ds:_ctx
		mov	[esp+4Ch+lpFileName], eax
		call	_SSL_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_41FCDF ; jumptable 0041FF10 cases 1,5,6
		mov	eax, ds:_s_tlsextdebug
		test	eax, eax
		jnz	loc_4204A0

loc_41FD50:				; CODE XREF: _www_body+8B9j
		mov	eax, [esp+4Ch+arg_8]
		test	eax, eax
		jz	short loc_41FD78
		mov	eax, [esp+4Ch+arg_8]
		mov	[esp+4Ch+lpFileName], eax ; char *
		call	_strlen
		mov	[esp+4Ch+var_44], eax
		mov	eax, [esp+4Ch+arg_8]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_set_session_id_context

loc_41FD78:				; CODE XREF: _www_body+136j
		mov	[esp+4Ch+var_48], 0
		mov	eax, [esp+4Ch+arg_4]
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_new_socket
		mov	edi, eax
		mov	eax, ds:_s_nbio_test
		test	eax, eax
		jnz	loc_420480

loc_41FD9B:				; CODE XREF: _www_body+87Bj
		mov	[esp+4Ch+var_44], edi
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_set_bio
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_set_accept_state
		mov	[esp+4Ch+var_40], ebx
		mov	[esp+4Ch+var_44], 1
		mov	[esp+4Ch+var_48], 6Dh
		mov	[esp+4Ch+lpFileName], esi
		call	_BIO_ctrl
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_push
		mov	edi, ds:_s_debug
		test	edi, edi
		jnz	loc_420430

loc_41FDE9:				; CODE XREF: _www_body+852j
		mov	esi, ds:_s_msg
		test	esi, esi
		jnz	loc_4203F0
		mov	esi, esi
		lea	edi, [edi+0]

loc_41FE00:				; CODE XREF: _www_body+2F0j
					; _www_body+390j ...
		mov	ecx, ds:_hack	; jumptable 0041FF10 cases 2-4
		test	ecx, ecx
		jnz	short loc_41FE60

loc_41FE0A:				; CODE XREF: _www_body+238j
					; _www_body+320j
		mov	[esp+4Ch+var_44], 3FFFh
		mov	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_gets
		test	eax, eax
		js	loc_420310
		jz	loc_420618
		mov	eax, ds:_www
		cmp	eax, 1
		jz	loc_41FFA0
		cmp	eax, 2
		jz	loc_420260
		cmp	eax, 3
		jz	loc_420276
		mov	ecx, ds:_hack
		test	ecx, ecx
		jz	short loc_41FE0A
		lea	esi, [esi+0]

loc_41FE60:				; CODE XREF: _www_body+1E8j
					; _www_body+345j
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_accept
		mov	esi, eax
		test	eax, eax
		jg	loc_41FEFF

loc_41FE72:				; CODE XREF: _www_body+2D9j
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_get_error
		cmp	eax, 4
		jnz	short loc_41FEFF
		mov	eax, ds:_srp_callback_parm
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aLookupDuringAc ; "LOOKUP during accept %s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		mov	eax, ds:dword_473390
		mov	[esp+4Ch+lpFileName], eax
		call	_SRP_user_pwd_free
		mov	eax, ds:_srp_callback_parm
		mov	[esp+4Ch+var_48], eax
		mov	eax, ds:dword_47338C
		mov	[esp+4Ch+lpFileName], eax
		call	_SRP_VBASE_get1_by_user
		mov	ds:dword_473390, eax
		test	eax, eax
		jz	loc_41FF50
		mov	eax, [eax+14h]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aLookupDoneS ;	"LOOKUP	done %s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_accept
		mov	esi, eax
		test	eax, eax
		jle	loc_41FE72

loc_41FEFF:				; CODE XREF: _www_body+24Cj
					; _www_body+261j
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_get_error
		cmp	eax, 6		; switch 7 cases
		ja	short loc_41FF20 ; jumptable 0041FF10 default case
		jmp	ds:off_463B88[eax*4] ; switch jump
; ---------------------------------------------------------------------------
		align 10h

loc_41FF20:				; CODE XREF: _www_body+2EEj
					; _www_body+2F0j
					; DATA XREF: ...
		mov	[esp+4Ch+lpFileName], ebx ; jumptable 0041FF10 default case
		call	_SSL_renegotiate
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_write
		jmp	loc_41FE0A
; ---------------------------------------------------------------------------
		align 10h

loc_41FF50:				; CODE XREF: _www_body+2ABj
		mov	[esp+4Ch+var_48], offset aLookupNotSucce ; "LOOKUP not successful\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_41FE60
; ---------------------------------------------------------------------------
		align 10h

loc_41FF70:				; CODE XREF: _www_body+4Fj
		mov	[esp+4Ch+var_48], offset aAccept ; "ACCEPT\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		mov	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+lpFileName], eax
		call	_CRYPTO_free
		mov	eax, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_41FFA0:				; CODE XREF: _www_body+218j
		mov	esi, offset aGet ; "GET	"
		mov	ecx, 4
		mov	edi, [esp+4Ch+var_3C]
		repe cmpsb
		jnz	loc_41FE00	; jumptable 0041FF10 cases 2-4

loc_41FFB6:				; CODE XREF: _www_body+650j
		mov	[esp+4Ch+var_48], offset aHttp1_0200OkCo ; "HTTP/1.0 200 ok\r\nContent-type: text/h"...
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_48], offset aHtmlBodyBgcolo ; "<HTML><BODY	BGCOLOR=\"#ffffff\">\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_48], offset aPre ;	"<pre>\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_48], offset asc_4637D6 ; "\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	eax, ds:_local_argc
		test	eax, eax
		jle	short loc_420048
		xor	edi, edi
		xor	esi, esi
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_420010:				; CODE XREF: _www_body+426j
		mov	eax, ds:_local_argv
		mov	eax, [eax+edi]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_44], 1
		mov	[esp+4Ch+var_48], offset byte_463944
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_write
		inc	esi
		add	edi, 4
		cmp	ds:_local_argc,	esi
		jg	short loc_420010

loc_420048:				; CODE XREF: _www_body+3DDj
		mov	[esp+4Ch+var_48], offset asc_4637D6 ; "\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 4Ch
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_ctrl
		test	eax, eax
		jnz	loc_42065B
		mov	eax, offset aNot ; " NOT"

loc_420085:				; CODE XREF: _www_body+A40j
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aSecureRenegoti ; "Secure Renegotiation IS%s supported\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		mov	[esp+4Ch+var_48], offset aCiphersSupport ; "Ciphers supported in s_server binary\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_get_ciphers
		mov	[esp+4Ch+var_34], eax
		mov	[esp+4Ch+lpFileName], eax
		call	_sk_num
		mov	[esp+4Ch+var_38], eax
		test	eax, eax
		jle	loc_420183
		mov	[esp+4Ch+var_48], 0
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+lpFileName], eax
		call	_sk_value
		mov	esi, eax
		mov	[esp+4Ch+lpFileName], eax
		call	_SSL_CIPHER_get_name
		mov	[esp+4Ch+var_30], eax
		mov	[esp+4Ch+lpFileName], esi
		call	_SSL_CIPHER_get_version
		mov	edx, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset a11s25s ; "%-11s:%-25s"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		mov	esi, 1
		mov	[esp+4Ch+var_30], ebx

loc_420118:				; CODE XREF: _www_body+541j
		cmp	esi, [esp+4Ch+var_38]
		jz	short loc_42017F

loc_42011E:				; CODE XREF: _www_body+55Dj
		mov	[esp+4Ch+var_48], esi
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+lpFileName], eax
		call	_sk_value
		mov	edi, eax
		mov	[esp+4Ch+lpFileName], eax
		call	_SSL_CIPHER_get_name
		mov	ebx, eax
		mov	[esp+4Ch+lpFileName], edi
		call	_SSL_CIPHER_get_version
		mov	[esp+4Ch+var_40], ebx
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset a11s25s ; "%-11s:%-25s"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		inc	esi
		test	esi, 1
		jnz	short loc_420118
		cmp	[esp+4Ch+var_38], esi
		jz	short loc_42017F
		mov	[esp+4Ch+var_48], offset asc_4637D6 ; "\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		cmp	esi, [esp+4Ch+var_38]
		jnz	short loc_42011E

loc_42017F:				; CODE XREF: _www_body+4FCj
					; _www_body+547j
		mov	ebx, [esp+4Ch+var_30]

loc_420183:				; CODE XREF: _www_body+4A3j
		mov	[esp+4Ch+var_48], offset asc_4637D6 ; "\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_44], 4000h
		mov	eax, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_get_shared_ciphers
		mov	edi, eax
		test	eax, eax
		jz	loc_4204F2
		mov	[esp+4Ch+var_48], offset aCiphersCommonB ; "---\nCiphers common	between	both SSL en"...
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		mov	al, [edi]
		test	al, al
		jz	loc_4204E2
		xor	esi, esi
		xor	ecx, ecx
		mov	[esp+4Ch+var_38], ebx
		mov	ebx, ecx
		jmp	short loc_4201FB
; ---------------------------------------------------------------------------

loc_4201DB:				; CODE XREF: _www_body+5DDj
		mov	[esp+4Ch+var_44], 1
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_write
		inc	esi

loc_4201F0:				; CODE XREF: _www_body+631j
		inc	edi
		mov	al, [edi]
		test	al, al
		jz	loc_4204DE

loc_4201FB:				; CODE XREF: _www_body+5B9j
		cmp	al, 3Ah
		jnz	short loc_4201DB
		mov	eax, 1Ah
		sub	eax, esi
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset asc_463A39 ; "				 "
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_write
		inc	ebx
		mov	eax, 55555556h
		imul	ebx
		mov	eax, ebx
		sar	eax, 1Fh
		sub	edx, eax
		lea	eax, [edx+edx]
		add	edx, eax
		cmp	ebx, edx
		jz	loc_420651
		mov	eax, offset byte_463944

loc_42023B:				; CODE XREF: _www_body+A36j
		mov	[esp+4Ch+var_44], 1
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_write
		xor	esi, esi
		jmp	short loc_4201F0
; ---------------------------------------------------------------------------
		align 10h

loc_420260:				; CODE XREF: _www_body+221j
		mov	esi, offset aGetStats ;	"GET /stats "
		mov	edi, [esp+4Ch+var_3C]
		mov	ecx, 0Bh
		repe cmpsb
		jz	loc_41FFB6

loc_420276:				; CODE XREF: _www_body+22Aj
		mov	esi, offset aGet_0 ; "GET /"
		mov	edi, [esp+4Ch+var_3C]
		mov	ecx, 5
		repe cmpsb
		jnz	loc_41FE00	; jumptable 0041FF10 cases 2-4
		mov	eax, [esp+4Ch+var_3C]
		lea	esi, [eax+5]
		mov	al, [eax+5]
		mov	ecx, esi
		mov	edx, 1
		test	al, al
		jz	loc_420678
		cmp	al, 20h
		jnz	short loc_4202D9
		jmp	loc_420678
; ---------------------------------------------------------------------------
		align 10h

loc_4202B0:				; CODE XREF: _www_body+6BCj
		cmp	edx, 3
		jz	loc_42063F
		cmp	edx, 1
		jz	loc_42062D
		test	edx, edx
		jz	short loc_4202E6

loc_4202C6:				; CODE XREF: _www_body+6CDj
					; _www_body+A1Aj ...
		inc	ecx
		mov	al, [ecx]
		test	al, al
		jz	loc_42066F
		cmp	al, 20h
		jz	loc_42066F

loc_4202D9:				; CODE XREF: _www_body+687j
		cmp	edx, 2
		jnz	short loc_4202B0
		cmp	al, 2Eh
		jz	loc_4206DC

loc_4202E6:				; CODE XREF: _www_body+6A4j
					; _www_body+A0Fj ...
		xor	edx, edx
		cmp	al, 2Fh
		setz	dl
		jmp	short loc_4202C6
; ---------------------------------------------------------------------------
		align 10h

loc_4202F0:				; CODE XREF: _www_body+71j
		mov	[esp+4Ch+var_48], offset aTurningOnNonBl ; "turning on non blocking io\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_41FC97
; ---------------------------------------------------------------------------
		align 10h

loc_420310:				; CODE XREF: _www_body+204j
		mov	[esp+4Ch+var_48], 8
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_test_flags
		test	eax, eax
		jz	loc_4206E6
		mov	[esp+4Ch+var_48], offset aReadRBlock ; "read R BLOCK\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_48], 4
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_test_flags
		test	eax, eax
		jz	loc_41FE00	; jumptable 0041FF10 cases 2-4
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_get_retry_reason
		dec	eax
		jnz	loc_41FE00	; jumptable 0041FF10 cases 2-4
		mov	[esp+4Ch+var_48], offset aLookupRenegoDu ; "LOOKUP renego during read\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		mov	eax, ds:dword_473390
		mov	[esp+4Ch+lpFileName], eax
		call	_SRP_user_pwd_free
		mov	eax, ds:_srp_callback_parm
		mov	[esp+4Ch+var_48], eax
		mov	eax, ds:dword_47338C
		mov	[esp+4Ch+lpFileName], eax
		call	_SRP_VBASE_get1_by_user
		mov	ds:dword_473390, eax
		test	eax, eax
		jz	loc_420777
		mov	eax, [eax+14h]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aLookupDoneS ;	"LOOKUP	done %s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_41FE00	; jumptable 0041FF10 cases 2-4
; ---------------------------------------------------------------------------
		align 10h

loc_4203D0:				; CODE XREF: _www_body+95j
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+lpFileName], eax
		call	_ERR_print_errors
		jmp	loc_41FCBB
; ---------------------------------------------------------------------------
		align 10h

loc_4203F0:				; CODE XREF: _www_body+1D1j
		mov	[esp+4Ch+var_48], offset _msg_cb
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_set_msg_callback
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 10h
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_ctrl
		jmp	loc_41FE00	; jumptable 0041FF10 cases 2-4
; ---------------------------------------------------------------------------
		align 10h

loc_420430:				; CODE XREF: _www_body+1C3j
		mov	[esp+4Ch+var_48], 1
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_set_debug
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_get_rbio
		mov	[esp+4Ch+var_48], offset _bio_dump_callback
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_set_callback
		mov	esi, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_get_rbio
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_set_callback_arg
		jmp	loc_41FDE9
; ---------------------------------------------------------------------------
		align 10h

loc_420480:				; CODE XREF: _www_body+175j
		call	_BIO_f_nbio_test
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_new
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_push
		mov	edi, eax
		jmp	loc_41FD9B
; ---------------------------------------------------------------------------

loc_4204A0:				; CODE XREF: _www_body+12Aj
		mov	[esp+4Ch+var_44], offset _tlsext_cb
		mov	[esp+4Ch+var_48], 38h
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_callback_ctrl
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+var_40], eax
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 39h
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_ctrl
		jmp	loc_41FD50
; ---------------------------------------------------------------------------

loc_4204DE:				; CODE XREF: _www_body+5D5j
		mov	ebx, [esp+4Ch+var_38]

loc_4204E2:				; CODE XREF: _www_body+5A9j
		mov	[esp+4Ch+var_48], offset asc_4637D6 ; "\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts

loc_4204F2:				; CODE XREF: _www_body+58Fj
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_cache_hit
		test	eax, eax
		jz	loc_420665
		mov	eax, offset aReused ; "---\nReused, "

loc_420507:				; CODE XREF: _www_body+A4Aj
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_get_current_cipher
		mov	esi, eax
		mov	[esp+4Ch+lpFileName], eax
		call	_SSL_CIPHER_get_name
		mov	edi, eax
		mov	[esp+4Ch+lpFileName], esi
		call	_SSL_CIPHER_get_version
		mov	[esp+4Ch+var_40], edi
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aSCipherIsS ; "%s, Cipher is %s\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_get_session
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+lpFileName], ebp
		call	_SSL_SESSION_print
		mov	[esp+4Ch+var_48], offset asc_463A66 ; "---\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_get_SSL_CTX
		mov	edx, eax
		mov	eax, ebp
		call	_print_stats
		mov	[esp+4Ch+var_48], offset asc_463A66 ; "---\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_get_peer_certificate
		mov	esi, eax
		test	eax, eax
		jz	loc_420706
		mov	[esp+4Ch+var_48], offset aClientCertific ; "Client certificate\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+lpFileName], ebp
		call	_X509_print
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+lpFileName], ebp
		call	_PEM_write_bio_X509

loc_4205C6:				; CODE XREF: _www_body+AF6j
		mov	[esp+4Ch+var_48], offset aBodyHtml ; "</BODY></HTML>\r\n\r\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		jmp	short loc_4205F4
; ---------------------------------------------------------------------------
		align 10h

loc_4205E0:				; CODE XREF: _www_body+9F6j
		mov	[esp+4Ch+var_48], 8
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_test_flags
		test	eax, eax
		jz	short loc_420618

loc_4205F4:				; CODE XREF: _www_body+9B6j
					; _www_body+AB7j ...
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], 0
		mov	[esp+4Ch+var_48], 0Bh
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_ctrl
		test	eax, eax
		jle	short loc_4205E0

loc_420618:				; CODE XREF: _www_body+20Aj
					; _www_body+9D2j
		mov	[esp+4Ch+var_48], 3
		mov	[esp+4Ch+lpFileName], ebx
		call	_SSL_set_shutdown
		jmp	loc_41FCDF	; jumptable 0041FF10 cases 1,5,6
; ---------------------------------------------------------------------------

loc_42062D:				; CODE XREF: _www_body+69Cj
		cmp	al, 2Eh
		jnz	loc_4202E6
		mov	edx, 2
		jmp	loc_4202C6
; ---------------------------------------------------------------------------

loc_42063F:				; CODE XREF: _www_body+693j
		cmp	al, 2Fh
		jnz	loc_4202E6
		mov	edx, 0FFFFFFFFh
		jmp	loc_4202C6
; ---------------------------------------------------------------------------

loc_420651:				; CODE XREF: _www_body+610j
		mov	eax, offset asc_4637D6 ; "\n"
		jmp	loc_42023B
; ---------------------------------------------------------------------------

loc_42065B:				; CODE XREF: _www_body+45Aj
		mov	eax, offset byte_463601
		jmp	loc_420085
; ---------------------------------------------------------------------------

loc_420665:				; CODE XREF: _www_body+8DCj
		mov	eax, offset aNew_0 ; "---\nNew,	"
		jmp	loc_420507
; ---------------------------------------------------------------------------

loc_42066F:				; CODE XREF: _www_body+6ABj
					; _www_body+6B3j
		cmp	edx, 3
		jz	loc_42076D

loc_420678:				; CODE XREF: _www_body+67Fj
					; _www_body+689j
		inc	edx
		setz	dl
		and	edx, 0FFh

loc_420682:				; CODE XREF: _www_body+B52j
		test	al, al
		jz	loc_42071B
		mov	byte ptr [ecx],	0
		test	edx, edx
		jnz	loc_420744
		mov	eax, [esp+4Ch+var_3C]
		cmp	byte ptr [eax+5], 2Fh
		jz	loc_42085C
		mov	[esp+4Ch+lpFileName], esi ; lpFileName
		call	_app_isdir
		test	eax, eax
		jle	loc_420791
		mov	[esp+4Ch+var_48], offset aHttp1_0200Ok_0 ; "HTTP/1.0 200 ok\r\nContent-type: text/p"...
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], offset aSIsADirectory	; "'%s' is a directory\r\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		jmp	loc_4205F4
; ---------------------------------------------------------------------------

loc_4206DC:				; CODE XREF: _www_body+6C0j
		mov	edx, 3
		jmp	loc_4202C6
; ---------------------------------------------------------------------------

loc_4206E6:				; CODE XREF: _www_body+702j
		mov	edx, ds:_s_quiet
		test	edx, edx
		jnz	loc_41FCDF	; jumptable 0041FF10 cases 1,5,6
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+lpFileName], eax
		call	_ERR_print_errors
		jmp	loc_41FCDF	; jumptable 0041FF10 cases 1,5,6
; ---------------------------------------------------------------------------

loc_420706:				; CODE XREF: _www_body+978j
		mov	[esp+4Ch+var_48], offset aNoClientCertif ; "no client certificate available\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		jmp	loc_4205C6
; ---------------------------------------------------------------------------

loc_42071B:				; CODE XREF: _www_body+A64j
		mov	[esp+4Ch+var_48], offset aHttp1_0200Ok_0 ; "HTTP/1.0 200 ok\r\nContent-type: text/p"...
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], offset aSIsAnInvalidFi ; "'%s' is an invalid file name\r\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		jmp	loc_4205F4
; ---------------------------------------------------------------------------

loc_420744:				; CODE XREF: _www_body+A6Fj
		mov	[esp+4Ch+var_48], offset aHttp1_0200Ok_0 ; "HTTP/1.0 200 ok\r\nContent-type: text/p"...
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], offset aSContains__Ref ; "'%s' contains '..' reference\r\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		jmp	loc_4205F4
; ---------------------------------------------------------------------------

loc_42076D:				; CODE XREF: _www_body+A52j
		mov	edx, 1
		jmp	loc_420682
; ---------------------------------------------------------------------------

loc_420777:				; CODE XREF: _www_body+783j
		mov	[esp+4Ch+var_48], offset aLookupNotSucce ; "LOOKUP not successful\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		jmp	loc_41FE00	; jumptable 0041FF10 cases 2-4
; ---------------------------------------------------------------------------

loc_420791:				; CODE XREF: _www_body+A8Dj
		mov	[esp+4Ch+var_48], offset aR_1 ;	"r"
		mov	[esp+4Ch+lpFileName], esi
		call	_BIO_new_file
		mov	[esp+4Ch+var_34], eax
		test	eax, eax
		jz	loc_420885
		cmp	ds:_s_quiet, 0
		jnz	short loc_4207CF
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], offset aFileS	; "FILE:%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf

loc_4207CF:				; CODE XREF: _www_body+B94j
		cmp	ds:_www, 2
		jz	loc_4208CB
		mov	edi, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_38], ebx

loc_4207E4:				; CODE XREF: _www_body+BF4j
					; _www_body+CEEj ...
		mov	[esp+4Ch+var_44], 4000h
		mov	[esp+4Ch+var_48], edi
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_read
		mov	esi, eax
		test	eax, eax
		jle	loc_4208B6
		xor	ebx, ebx
		jmp	short loc_420816
; ---------------------------------------------------------------------------
		align 10h

loc_420810:				; CODE XREF: _www_body+C0Fj
		add	ebx, eax

loc_420812:				; CODE XREF: _www_body+C3Aj
		cmp	ebx, esi
		jge	short loc_4207E4

loc_420816:				; CODE XREF: _www_body+BE8j
		mov	eax, esi
		sub	eax, ebx
		mov	[esp+4Ch+var_44], eax
		lea	eax, [edi+ebx]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_write
		test	eax, eax
		jg	short loc_420810
		mov	[esp+4Ch+var_48], 8
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_test_flags
		test	eax, eax
		jz	short loc_4208B6
		mov	[esp+4Ch+var_48], offset aRwriteWBlock ; "rwrite W BLOCK\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_printf
		jmp	short loc_420812
; ---------------------------------------------------------------------------

loc_42085C:				; CODE XREF: _www_body+A7Dj
		mov	[esp+4Ch+var_48], offset aHttp1_0200Ok_0 ; "HTTP/1.0 200 ok\r\nContent-type: text/p"...
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], offset aSIsAnInvalidPa ; "'%s' is an invalid path\r\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		jmp	loc_4205F4
; ---------------------------------------------------------------------------

loc_420885:				; CODE XREF: _www_body+B87j
		mov	[esp+4Ch+var_48], offset aHttp1_0200Ok_0 ; "HTTP/1.0 200 ok\r\nContent-type: text/p"...
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	[esp+4Ch+var_44], esi
		mov	[esp+4Ch+var_48], offset aErrorOpeningS	; "Error opening '%s'\r\n"
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_printf
		mov	[esp+4Ch+lpFileName], ebp
		call	_ERR_print_errors
		jmp	loc_4205F4
; ---------------------------------------------------------------------------

loc_4208B6:				; CODE XREF: _www_body+BE0j
					; _www_body+C23j
		mov	ebx, [esp+4Ch+var_38]
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+lpFileName], eax
		call	_BIO_free
		jmp	loc_4205F4
; ---------------------------------------------------------------------------

loc_4208CB:				; CODE XREF: _www_body+BB6j
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, esi
		repne scasb
		not	ecx
		lea	edi, [ecx-1]
		cmp	edi, 5
		jle	short loc_420913
		mov	[esp+4Ch+var_48], offset a_html	; ".html"
		lea	eax, [esi+ecx-6]
		mov	[esp+4Ch+lpFileName], eax ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_420915

loc_4208F6:				; CODE XREF: _www_body+D0Bj
					; _www_body+D1Fj
		mov	[esp+4Ch+var_48], offset aHttp1_0200OkCo ; "HTTP/1.0 200 ok\r\nContent-type: text/h"...
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	edi, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_38], ebx
		jmp	loc_4207E4
; ---------------------------------------------------------------------------

loc_420913:				; CODE XREF: _www_body+CBCj
		jnz	short loc_420941

loc_420915:				; CODE XREF: _www_body+CD4j
		lea	esi, [esi+edi-4]
		mov	[esp+4Ch+var_48], offset a_php ; ".php"
		mov	[esp+4Ch+lpFileName], esi ; char *
		call	_strcmp
		test	eax, eax
		jz	short loc_4208F6
		mov	[esp+4Ch+var_48], offset a_htm ; ".htm"
		mov	[esp+4Ch+lpFileName], esi ; char *
		call	_strcmp
		test	eax, eax
		jz	short loc_4208F6

loc_420941:				; CODE XREF: _www_body:loc_420913j
		mov	[esp+4Ch+var_48], offset aHttp1_0200Ok_0 ; "HTTP/1.0 200 ok\r\nContent-type: text/p"...
		mov	[esp+4Ch+lpFileName], ebp
		call	_BIO_puts
		mov	edi, [esp+4Ch+var_3C]
		mov	[esp+4Ch+var_38], ebx
		jmp	loc_4207E4
_www_body	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ssl_srp_server_param_cb proc near	; DATA XREF: _s_server_main+1FA3o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_8]
		mov	edx, [ebx]
		mov	eax, [ebx+8]
		test	edx, edx
		jz	loc_420A20
		test	eax, eax
		jz	loc_420A60

loc_42097F:				; CODE XREF: _ssl_srp_server_param_cb+C2j
		mov	edi, [eax+14h]
		mov	esi, [eax+8]
		mov	ecx, [eax+4]
		mov	edx, [eax+0Ch]
		mov	eax, [eax+10h]
		mov	[esp+2Ch+var_18], edi
		mov	[esp+2Ch+var_1C], esi
		mov	[esp+2Ch+var_20], ecx
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_SSL_set_srp_server_param
		test	eax, eax
		js	short loc_420A00
		mov	eax, [ebx+8]
		mov	edx, [eax+14h]
		mov	eax, [ebx]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aSrpParametersS ; "SRP	parameters set:	username = \"%s\" i"...
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	esi, esi

loc_4209D9:				; CODE XREF: _ssl_srp_server_param_cb+AFj
					; _ssl_srp_server_param_cb+11Ej
		mov	edx, [ebx+8]
		mov	[esp+2Ch+var_2C], edx
		call	_SRP_user_pwd_free
		mov	dword ptr [ebx+8], 0
		mov	dword ptr [ebx], 0
		mov	eax, esi

loc_4209F3:				; CODE XREF: _ssl_srp_server_param_cb+F2j
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_420A00:				; CODE XREF: _ssl_srp_server_param_cb+50j
		mov	eax, [esp+2Ch+arg_4]
		mov	dword ptr [eax], 50h
		mov	esi, 2
		jmp	short loc_4209D9
; ---------------------------------------------------------------------------
		jmp	short loc_420A20
; ---------------------------------------------------------------------------
		align 10h

loc_420A20:				; CODE XREF: _ssl_srp_server_param_cb+11j
					; _ssl_srp_server_param_cb+B1j
		test	eax, eax
		jnz	loc_42097F
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_SSL_get_srp_username
		mov	[ebx], eax
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aSrpUsernameS ; "SRP username = \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		or	eax, 0FFFFFFFFh
		jmp	short loc_4209F3
; ---------------------------------------------------------------------------
		align 10h

loc_420A60:				; CODE XREF: _ssl_srp_server_param_cb+19j
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_28], offset aUserSDoesnTExi ; "User %s doesn't exist\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	esi, 2
		jmp	loc_4209D9
_ssl_srp_server_param_cb endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl psk_server_cb(int, char *, int, int)
_psk_server_cb	proc near		; DATA XREF: _s_server_main:loc_4228B3o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_10], 0
		mov	edi, ds:_s_debug
		test	edi, edi
		jnz	loc_420BE0

loc_420AB0:				; CODE XREF: _psk_server_cb+165j
		test	ebx, ebx
		jz	loc_420BA0
		mov	esi, ds:_s_debug
		test	esi, esi
		jnz	loc_420C30

loc_420AC6:				; CODE XREF: _psk_server_cb+1C5j
		mov	edi, offset aClient_identit ; "Client_identity"
		mov	ecx, 10h
		mov	esi, ebx
		repe cmpsb
		jnz	loc_420C00
		mov	ecx, ds:_s_debug
		test	ecx, ecx
		jnz	loc_420C60

loc_420AE8:				; CODE XREF: _psk_server_cb+1E5j
		mov	eax, ds:_psk_key
		mov	[esp+2Ch+var_28], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_hex2bn
		test	eax, eax
		jz	short loc_420B60
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_num_bits
		mov	edx, eax
		add	edx, 7
		js	loc_420CD0

loc_420B18:				; CODE XREF: _psk_server_cb+243j
		sar	edx, 3
		cmp	edx, [esp+2Ch+arg_C]
		jg	loc_420C80
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_bn2bin
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_free
		test	ebx, ebx
		js	short loc_420BB5
		mov	edx, ds:_s_debug
		test	edx, edx
		jnz	loc_420CE0
		mov	eax, ebx
		jmp	short loc_420B90
; ---------------------------------------------------------------------------
		align 10h

loc_420B60:				; CODE XREF: _psk_server_cb+6Fj
		mov	eax, ds:_psk_key
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aCouldNotConver ; "Could not convert PSK key '%s' to BIGNU"...
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+var_10]
		test	eax, eax
		jz	short loc_420B8E
		mov	[esp+2Ch+var_2C], eax
		call	_BN_free

loc_420B8E:				; CODE XREF: _psk_server_cb+F4j
					; _psk_server_cb+12Cj ...
		xor	eax, eax

loc_420B90:				; CODE XREF: _psk_server_cb+CBj
					; _psk_server_cb+26Bj
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_420BA0:				; CODE XREF: _psk_server_cb+22j
		mov	[esp+2Ch+var_28], offset aErrorClientDid ; "Error: client did not send PSK identity"...
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf

loc_420BB5:				; CODE XREF: _psk_server_cb+B9j
		mov	eax, ds:_s_debug
		test	eax, eax
		jz	short loc_420B8E

loc_420BBE:				; CODE XREF: _psk_server_cb+19Ej
		mov	[esp+2Ch+var_28], offset aErrorInPskServ ; "Error in PSK server	callback\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_420BE0:				; CODE XREF: _psk_server_cb+1Aj
		mov	[esp+2Ch+var_28], offset aPsk_server_cb	; "psk_server_cb\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	loc_420AB0
; ---------------------------------------------------------------------------
		align 10h

loc_420C00:				; CODE XREF: _psk_server_cb+44j
		mov	[esp+2Ch+var_20], offset aClient_identit ; "Client_identity"
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset aPskErrorClient ; "PSK	error: client identity not found (g"...
		mov	eax, ds:_bio_s_out
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, ds:_s_debug
		test	eax, eax
		jz	loc_420B8E
		jmp	short loc_420BBE
; ---------------------------------------------------------------------------

loc_420C30:				; CODE XREF: _psk_server_cb+30j
		mov	[esp+2Ch+var_2C], ebx ;	char *
		call	_strlen
		mov	[esp+2Ch+var_20], ebx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aIdentity_lenDI ; "identity_len=%d identity=%s\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	loc_420AC6
; ---------------------------------------------------------------------------
		align 10h

loc_420C60:				; CODE XREF: _psk_server_cb+52j
		mov	[esp+2Ch+var_28], offset aPskClientIdent ; "PSK	client identity	found\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	loc_420AE8
; ---------------------------------------------------------------------------
		align 10h

loc_420C80:				; CODE XREF: _psk_server_cb+8Fj
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_num_bits
		mov	ecx, ds:_bio_err
		mov	edx, eax
		add	edx, 7
		js	short loc_420D00

loc_420C99:				; CODE XREF: _psk_server_cb+273j
		sar	edx, 3
		mov	[esp+2Ch+var_20], edx
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aPskBufferOfCal ; "psk	buffer of callback is too small	(%d"...
		mov	[esp+2Ch+var_2C], ecx
		call	_BIO_printf
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_free
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_420CD0:				; CODE XREF: _psk_server_cb+82j
		lea	edx, [eax+0Eh]
		jmp	loc_420B18
; ---------------------------------------------------------------------------
		align 10h

loc_420CE0:				; CODE XREF: _psk_server_cb+C3j
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset aFetchedPskLenD ; "fetched PSK	len=%d\n"
		mov	eax, ds:_bio_s_out
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, ebx
		jmp	loc_420B90
; ---------------------------------------------------------------------------

loc_420D00:				; CODE XREF: _psk_server_cb+207j
		lea	edx, [eax+0Eh]
		jmp	short loc_420C99
_psk_server_cb	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_tmp_rsa_cb	proc near		; DATA XREF: _s_server_main:loc_422EFDo
					; _s_server_main+1E3Fo

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_8		= dword	ptr  0Ch

		mov	ecx, ds:_rsa_tmp_38368
		test	ecx, ecx
		jz	short loc_420D20
		mov	eax, ds:_rsa_tmp_38368
		retn
; ---------------------------------------------------------------------------

loc_420D20:				; CODE XREF: _tmp_rsa_cb+8j
		push	ebx
		sub	esp, 18h
		call	_BN_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_420E5F
		cmp	ds:_rsa_tmp_38368, 0
		jnz	short loc_420D8E
		mov	edx, ds:_s_quiet
		test	edx, edx
		jz	loc_420DD0

loc_420D4A:				; CODE XREF: _tmp_rsa_cb+102j
		mov	[esp+1Ch+var_18], 10001h
		mov	[esp+1Ch+var_1C], ebx
		call	_BN_set_word
		test	eax, eax
		jnz	short loc_420DA0

loc_420D5E:				; CODE XREF: _tmp_rsa_cb+BCj
		mov	eax, ds:_rsa_tmp_38368
		test	eax, eax
		jz	short loc_420D6F
		mov	[esp+1Ch+var_1C], eax
		call	_RSA_free

loc_420D6F:				; CODE XREF: _tmp_rsa_cb+55j
					; _tmp_rsa_cb+9Cj
		mov	ds:_rsa_tmp_38368, 0

loc_420D79:				; CODE XREF: _tmp_rsa_cb+BEj
		mov	eax, ds:_s_quiet
		test	eax, eax
		jz	loc_420E20

loc_420D86:				; CODE XREF: _tmp_rsa_cb+14Aj
		mov	[esp+1Ch+var_1C], ebx
		call	_BN_free

loc_420D8E:				; CODE XREF: _tmp_rsa_cb+2Aj
					; _tmp_rsa_cb+164j
		mov	eax, ds:_rsa_tmp_38368
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_420DA0:				; CODE XREF: _tmp_rsa_cb+4Cj
		call	_RSA_new
		mov	ds:_rsa_tmp_38368, eax
		test	eax, eax
		jz	short loc_420D6F
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], ebx
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], edx
		mov	[esp+1Ch+var_1C], eax
		call	_RSA_generate_key_ex
		test	eax, eax
		jz	short loc_420D5E
		jmp	short loc_420D79
; ---------------------------------------------------------------------------

loc_420DD0:				; CODE XREF: _tmp_rsa_cb+34j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset aGeneratingTemp ; "Generating temp (%d	bit) RSA key..."
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_ctrl
		jmp	loc_420D4A
; ---------------------------------------------------------------------------
		align 10h

loc_420E20:				; CODE XREF: _tmp_rsa_cb+70j
		mov	[esp+1Ch+var_18], offset asc_4637D6 ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_ctrl
		jmp	loc_420D86
; ---------------------------------------------------------------------------

loc_420E5F:				; CODE XREF: _tmp_rsa_cb+1Dj
		mov	[esp+1Ch+var_18], offset aAllocationErro ; "Allocation error in	generating RSA key\"...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		jmp	loc_420D8E
_tmp_rsa_cb	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_generate_session_id proc near		; DATA XREF: _s_server_main:loc_422029o
					; _s_server_main:loc_4221D0o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_4]
		mov	ebx, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_24], 0Ah
		mov	eax, ebp
		and	eax, 1
		mov	[esp+3Ch+var_20], eax
		jmp	short loc_420EF3
; ---------------------------------------------------------------------------
		align 10h

loc_420EB0:				; CODE XREF: _generate_session_id+AAj
					; _generate_session_id+C3j
		xor	edx, edx
		test	al, 2
		jz	short loc_420EC1
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_420EC1:				; CODE XREF: _generate_session_id+34j
		test	al, 1
		jz	short loc_420ECF
		mov	al, [esi+edx]
		mov	byte ptr [esp+3Ch+var_28], al
		mov	[edi+edx], al

loc_420ECF:				; CODE XREF: _generate_session_id+43j
		mov	eax, [ebx]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], ebp
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_SSL_has_matching_session_id
		test	eax, eax
		jz	loc_420FA0
		dec	[esp+3Ch+var_24]
		jz	short loc_420F50

loc_420EF3:				; CODE XREF: _generate_session_id+20j
		mov	eax, [ebx]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebp
		call	_RAND_pseudo_bytes
		test	eax, eax
		js	short loc_420F50
		mov	edx, ds:_session_id_prefix
		mov	[esp+3Ch+var_3C], edx ;	char *
		mov	[esp+3Ch+var_28], edx
		call	_strlen
		mov	ecx, [ebx]
		cmp	eax, ecx
		mov	edx, [esp+3Ch+var_28]
		jbe	short loc_420F23
		mov	eax, ecx

loc_420F23:				; CODE XREF: _generate_session_id+9Fj
		mov	edi, ebp
		mov	esi, edx
		cmp	eax, 4
		jb	short loc_420EB0
		mov	ecx, [esp+3Ch+var_20]
		test	ecx, ecx
		jnz	short loc_420F60
		test	edi, 2
		jnz	short loc_420F80

loc_420F3C:				; CODE XREF: _generate_session_id+F4j
					; _generate_session_id+10Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_420EB0
; ---------------------------------------------------------------------------
		align 10h

loc_420F50:				; CODE XREF: _generate_session_id+71j
					; _generate_session_id+83j
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_420F60:				; CODE XREF: _generate_session_id+B2j
		mov	cl, [edx]
		mov	byte ptr [esp+3Ch+var_28], cl
		mov	[ebp+0], cl
		lea	edi, [ebp+1]
		inc	esi
		dec	eax
		test	edi, 2
		jz	short loc_420F3C
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_420F80:				; CODE XREF: _generate_session_id+BAj
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	short loc_420F3C
; ---------------------------------------------------------------------------
		jmp	short loc_420FA0
; ---------------------------------------------------------------------------
		align 10h

loc_420FA0:				; CODE XREF: _generate_session_id+67j
					; _generate_session_id+111j
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_generate_session_id endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_load_dh_param	proc near		; CODE XREF: _s_server_main+1D91p
					; _s_server_main+20A9p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	esi
		push	ebx
		sub	esp, 14h
		mov	[esp+1Ch+var_18], offset aR_1 ;	"r"
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	short loc_421000
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], eax
		call	_PEM_read_bio_DHparams
		mov	esi, eax
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_free

loc_420FF5:				; CODE XREF: _load_dh_param+52j
		mov	eax, esi
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_421000:				; CODE XREF: _load_dh_param+19j
		xor	esi, esi
		jmp	short loc_420FF5
_load_dh_param	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ssl_servername_cb proc	near		; DATA XREF: _s_server_main+1900o
					; _s_server_main+1945o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	edi, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], edi
		call	_SSL_get_servername
		mov	ebx, eax
		test	eax, eax
		jz	short loc_4210A0
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_42104F
		mov	[esp+1Ch+var_14], ebx
		mov	[esp+1Ch+var_18], offset aHostnameInTlsE ; "Hostname in	TLS extension: \"%s\"\n"
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf

loc_42104F:				; CODE XREF: _ssl_servername_cb+29j
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_4210C0
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	[esp+1Ch+var_1C], ebx ;	char *
		call	ds:__imp___stricmp
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_4210D0
		mov	eax, ds:_ctx2
		test	eax, eax
		jz	short loc_4210A6
		mov	eax, [esi+4]
		mov	[esp+1Ch+var_18], offset aSwitchingServe ; "Switching server context.\n"
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	eax, ds:_ctx2
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], edi
		call	_SSL_set_SSL_CTX
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4210A0:				; CODE XREF: _ssl_servername_cb+22j
		mov	edx, [esi]
		test	edx, edx
		jz	short loc_4210C0

loc_4210A6:				; CODE XREF: _ssl_servername_cb+5Fj
		xor	ebx, ebx
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_4210C0
; ---------------------------------------------------------------------------
		align 10h

loc_4210C0:				; CODE XREF: _ssl_servername_cb+43j
					; _ssl_servername_cb+94j ...
		mov	ebx, 3
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4210D0:				; CODE XREF: _ssl_servername_cb+56j
		mov	ebx, [esi+8]
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
_ssl_servername_cb endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _s_server_main
_s_server_main	proc near		; DATA XREF: .data:00455130o

hostshort	= word ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0CCh
		mov	[esp+0DCh+var_40], 0
		mov	[esp+0DCh+var_3C], 0
		mov	word ptr [esp+0DCh+var_48], 1151h
		mov	[esp+0DCh+var_38], 0
		mov	[esp+0DCh+var_34], 0
		mov	[esp+0DCh+var_28], 0
		mov	[esp+0DCh+var_24], 0
		mov	[esp+0DCh+var_20], 1
		call	_SSLv23_server_method
		mov	[esp+0DCh+var_A8], eax
		mov	eax, [esp+0DCh+arg_0]
		mov	ds:_local_argc,	eax
		mov	eax, [esp+0DCh+arg_4]
		mov	ds:_local_argv,	eax
		mov	_accept_socket,	0FFFFFFFFh
		mov	ds:_cipher, 0
		mov	ds:_s_server_verify, 0
		mov	ds:_s_dcert_file, 0
		mov	ds:_s_dkey_file, 0
		mov	_s_cert_file, offset aServer_pem ; "server.pem"
		mov	ds:_s_key_file,	0
		mov	_s_cert_file2, offset aServer2_pem ; "server2.pem"
		mov	ds:_s_key_file2, 0
		mov	ds:_ctx2, 0
		mov	ds:_s_nbio, 0
		mov	ds:_s_nbio_test, 0
		mov	ds:_ctx, 0
		mov	ds:_www, 0
		mov	ds:_bio_s_out, 0
		mov	ds:_s_debug, 0
		mov	ds:_s_msg, 0
		mov	ds:_s_quiet, 0
		mov	ds:_hack, 0
		mov	ds:_engine_id, 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_4224E0

loc_421237:				; CODE XREF: _s_server_main+141Dj
		mov	[esp+0DCh+var_D8], 0
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_load_config
		test	eax, eax
		jz	loc_421B66
		mov	ds:_verify_depth, 0
		mov	ds:_s_nbio, 0
		mov	ds:_s_nbio_test, 0
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		add	[esp+0DCh+arg_4], 4
		mov	[esp+0DCh+var_60], 0
		mov	[esp+0DCh+var_50], 0
		mov	[esp+0DCh+var_8C], 0
		mov	[esp+0DCh+var_6C], 0
		mov	[esp+0DCh+var_80], 3
		mov	[esp+0DCh+var_84], 3
		mov	[esp+0DCh+var_B0], 0
		mov	[esp+0DCh+var_B4], 0
		mov	[esp+0DCh+var_64], 3
		mov	[esp+0DCh+var_94], 3
		mov	[esp+0DCh+var_90], 0
		mov	[esp+0DCh+var_98], 1
		mov	[esp+0DCh+var_70], 0
		mov	[esp+0DCh+var_54], 0
		mov	[esp+0DCh+var_9C], 0
		mov	[esp+0DCh+var_58], 0
		mov	[esp+0DCh+var_5C], 0
		mov	[esp+0DCh+var_A0], 0
		mov	[esp+0DCh+var_74], 0
		mov	[esp+0DCh+var_78], 0
		mov	[esp+0DCh+var_68], 0
		mov	[esp+0DCh+var_A4], 0
		mov	[esp+0DCh+var_88], 0
		mov	[esp+0DCh+var_7C], 0
		jmp	loc_4213F5
; ---------------------------------------------------------------------------
		align 10h

loc_421360:				; CODE XREF: _s_server_main+334j
		mov	edi, offset aAccept_0 ;	"-accept"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jz	loc_42141A
		mov	edi, offset aVerify_3 ;	"-verify"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	loc_421CA0
		mov	ds:_s_server_verify, 5
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_atoi
		mov	ds:_verify_depth, eax
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], offset aVerifyDepthIsD ; "verify depth is %d\n"

loc_4213C8:				; CODE XREF: _s_server_main+C17j
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf

loc_4213D5:				; CODE XREF: _s_server_main+368j
					; _s_server_main+2509j	...
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]

loc_4213E3:				; CODE XREF: _s_server_main+C4Aj
					; _s_server_main+CABj ...
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		add	ebx, 4
		mov	[esp+0DCh+arg_4], ebx

loc_4213F5:				; CODE XREF: _s_server_main+272j
					; _s_server_main+222Aj
		test	edx, edx
		jle	loc_421DB0
		mov	ebx, [esp+0DCh+arg_4]
		mov	ebp, [ebx]
		mov	edi, offset aPort ; "-port"
		mov	ecx, 6
		mov	esi, ebp
		repe cmpsb
		jnz	loc_421360

loc_42141A:				; CODE XREF: _s_server_main+28Ej
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	short loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		lea	edi, [esp+0DCh+var_48]
		mov	[esp+0DCh+var_D8], edi ; int
		mov	dword ptr [esp+0DCh+hostshort],	eax ; name
		call	_extract_port
		test	eax, eax
		jnz	short loc_4213D5

loc_42144A:				; CODE XREF: _s_server_main+2BCj
					; _s_server_main+344j ...
		mov	[esp+0DCh+var_D8], offset aUsageS_serverA ; "usage: s_server [args ...]\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset asc_4637D6 ; "\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D4], 1151h
		mov	[esp+0DCh+var_D8], offset aAcceptArgPortT ; " -accept arg   - port to accept on	(def"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aContextArgSetS ; " -context arg  - set session ID context"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aVerifyArgTurnO ; " -verify arg   - turn on peer certifica"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aVerifyArgTur_0 ; " -Verify arg   - turn on peer certifica"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aVerify_return_ ; " -verify_return_error - return verifica"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aCertArgCertifi ; " -cert arg	    - certificate file to us"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D4], offset aServer_pem ;	"server.pem"
		mov	[esp+0DCh+var_D8], offset aDefaultIsS ;	"		  (default is %s)\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aCrl_checkCheck ; " -crl_check    - check the	peer certifi"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aCrl_check_allC ; " -crl_check_all - check the peer certif"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aCertformArgCer ; " -certform	arg - certificate format (PE"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aKeyArgPrivateK ; " -key arg	    - Private Key file to us"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D4], offset aServer_pem ;	"server.pem"
		mov	[esp+0DCh+var_D8], offset aNotSpecifiedDe ; "		      not specified (default"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aKeyformArgKe_1 ; " -keyform arg  - key format (PEM, DER o"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aPassArgPrivate ; " -pass arg	    - private key file pass "...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aDcertArgSecond ; " -dcert arg    - second certificate fil"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aDcertformXSeco ; " -dcertform x  - second certificate for"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aDkeyArgSecondP ; " -dkey arg	    - second private key fil"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aDkeyformArgSec ; " -dkeyform	arg - second key format	(PEM"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aDpassArgSecond ; " -dpass arg    - second private key fil"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aDhparamArgDhPa ; " -dhparam arg  - DH parameter file	to u"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aOrADefaultSetO ; "		      or a default set of pa"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNamed_curveArg ; " -named_curve arg	- Elliptic curve nam"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNbioRunWithNon ; " -nbio	    - Run with non-blocking "...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNbio_testTestW ; " -nbio_test    - test with	the non-bloc"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aCrlfConvertLfF ; " -crlf	    - convert LF from termin"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aDebugPrintMore ; " -debug	    - Print more output\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aMsgShowProtoco ; " -msg	    - Show protocol messages"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aStatePrintTheS ; " -state	    - Print the	SSL states\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aCapathArgPemFo ; " -CApath arg   - PEM format directory o"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aCafileArgPemFo ; " -CAfile arg   - PEM format file of CA'"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNo_alt_chainsO ; " -no_alt_chains - only ever use the fir"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNocertDonTUseA ; " -nocert	    - Don't use any certific"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aCipherArgPlayW ; " -cipher arg   - play with	'openssl cip"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aServerprefUseS ; " -serverpref   - Use server's cipher pr"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aQuietNoServerO ; " -quiet	    - No server	output\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNo_tmp_rsaDoNo ; " -no_tmp_rsa   - Do not generate a	tmp "...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aPsk_hintArgPsk ; " -psk_hint	arg - PSK identity hint	to u"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aPskArgPskInHex ; " -psk arg	    - PSK in hex (without 0x"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aSrpvfileFileTh ; " -srpvfile	file	  - The	verifier fil"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aSrpuserseedStr ; " -srpuserseed string - A seed string fo"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aSsl2JustTalkSs ; " -ssl2	    - Just talk	SSLv2\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aSsl3JustTalkSs ; " -ssl3	    - Just talk	SSLv3\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aTls1_2JustTalk ; " -tls1_2	    - Just talk	TLSv1.2\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aTls1_1JustTalk ; " -tls1_1	    - Just talk	TLSv1.1\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aTls1JustTalkTl ; " -tls1	    - Just talk	TLSv1\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aDtls1JustTalkD ; " -dtls1	    - Just talk	DTLSv1\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aTimeoutEnableT ; " -timeout	    - Enable timeouts\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aMtuSetLinkLaye ; " -mtu	    - Set link layer MTU\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aChainReadACert ; " -chain	    - Read a certificate cha"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNo_ssl2JustDis ; " -no_ssl2	    - Just disable SSLv2\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNo_ssl3JustDis ; " -no_ssl3	    - Just disable SSLv3\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNo_tls1JustDis ; " -no_tls1	    - Just disable TLSv1\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNo_tls1_1JustD ; " -no_tls1_1    - Just disable TLSv1.1\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNo_tls1_2JustD ; " -no_tls1_2    - Just disable TLSv1.2\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNo_dheDisableE ; " -no_dhe	    - Disable ephemeral	DH\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNo_ecdheDisabl ; " -no_ecdhe	    - Disable ephemeral	ECDH"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aBugsTurnOnSslB ; " -bugs	    - Turn on SSL bug compat"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aHackWorkaround ; " -hack	    - workaround for early N"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aWwwRespondToAG ; " -www	    - Respond to a 'GET /' w"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aWwwRespondTo_0 ; " -WWW	    - Respond to a 'GET /<pa"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aHttpRespondToA ; " -HTTP	    - Respond to a 'GET /<pa"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aWithTheAssumpt ; "		      with the assumption it"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aEngineIdInitia ; " -engine id    - Initialise and use the"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aId_prefixArgGe ; " -id_prefix arg - Generate	SSL/TLS	sess"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D0], 3Bh
		mov	[esp+0DCh+var_D4], 3Bh
		mov	[esp+0DCh+var_D8], offset aRandFileCfil_4 ; " -rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aServernameHost ; " -servername host - servername for	Host"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aServername_fat ; " -servername_fatal	- on mismatch send f"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aCert2ArgCertif ; " -cert2 arg    - certificate file to us"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D4], offset aServer2_pem ; "server2.pem"
		mov	[esp+0DCh+var_D8], offset aDefaultIsS ;	"		  (default is %s)\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aKey2ArgPrivate ; " -key2 arg	    - Private Key file to us"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D4], offset aServer2_pem ; "server2.pem"
		mov	[esp+0DCh+var_D8], offset aNotSpecifiedDe ; "		      not specified (default"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aTlsextdebugHex ; " -tlsextdebug  - hex dump of all TLS ex"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNo_ticketDisab ; " -no_ticket    - disable use of RFC4507"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aLegacy_renegot ; " -legacy_renegotiation - enable use of "...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aNextprotonegAr ; " -nextprotoneg arg	- set the advertised"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aUse_srtpProfil ; " -use_srtp	profiles - Offer SRTP key ma"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aKeymatexportLa ; " -keymatexport label   - Export keying "...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aKeymatexportle ; " -keymatexportlen len  - Export len byt"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aStatusRespondT ; " -status		- respond to certifi"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aStatus_verbose ; " -status_verbose	- enable status	requ"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aStatus_timeout ; " -status_timeout n	- status request res"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D8], offset aStatus_urlUrlS ; " -status_url URL	- status request fal"...

loc_421B59:				; CODE XREF: _s_server_main+1607j
					; _s_server_main+1A28j
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf

loc_421B66:				; CODE XREF: _s_server_main+169j
		xor	ebp, ebp
		mov	[esp+0DCh+var_B4], 0
		xor	edi, edi
		mov	[esp+0DCh+var_AC], 0
		xor	esi, esi
		mov	[esp+0DCh+var_B0], 0
		mov	ebx, 1

loc_421B89:				; CODE XREF: _s_server_main+138Fj
					; _s_server_main+156Ej	...
		mov	eax, ds:_ctx
		test	eax, eax
		jz	short loc_421B9A
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_free

loc_421B9A:				; CODE XREF: _s_server_main+AB0j
		mov	eax, [esp+0DCh+var_B0]
		test	eax, eax
		jz	short loc_421BAA
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_X509_free

loc_421BAA:				; CODE XREF: _s_server_main+AC0j
		test	esi, esi
		jz	short loc_421BB6
		mov	dword ptr [esp+0DCh+hostshort],	esi
		call	_X509_free

loc_421BB6:				; CODE XREF: _s_server_main+ACCj
		mov	eax, [esp+0DCh+var_AC]
		test	eax, eax
		jz	short loc_421BC6
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_EVP_PKEY_free

loc_421BC6:				; CODE XREF: _s_server_main+ADCj
		test	edi, edi
		jz	short loc_421BD2
		mov	dword ptr [esp+0DCh+hostshort],	edi
		call	_EVP_PKEY_free

loc_421BD2:				; CODE XREF: _s_server_main+AE8j
		mov	eax, [esp+0DCh+var_38]
		test	eax, eax
		jz	short loc_421BE5
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_CRYPTO_free

loc_421BE5:				; CODE XREF: _s_server_main+AFBj
		mov	eax, [esp+0DCh+var_34]
		test	eax, eax
		jz	short loc_421BF8
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_CRYPTO_free

loc_421BF8:				; CODE XREF: _s_server_main+B0Ej
		mov	eax, [esp+0DCh+var_40]
		test	eax, eax
		jz	short loc_421C0B
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_X509_VERIFY_PARAM_free

loc_421C0B:				; CODE XREF: _s_server_main+B21j
		mov	eax, _tlscstatp
		test	eax, eax
		jz	short loc_421C1C
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_CRYPTO_free

loc_421C1C:				; CODE XREF: _s_server_main+B32j
		mov	eax, dword_455768
		test	eax, eax
		jz	short loc_421C2D
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_CRYPTO_free

loc_421C2D:				; CODE XREF: _s_server_main+B43j
		mov	eax, dword_455764
		test	eax, eax
		jz	short loc_421C3E
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_CRYPTO_free

loc_421C3E:				; CODE XREF: _s_server_main+B54j
		mov	eax, ds:_ctx2
		test	eax, eax
		jz	short loc_421C4F
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_free

loc_421C4F:				; CODE XREF: _s_server_main+B65j
		test	ebp, ebp
		jz	short loc_421C5B
		mov	dword ptr [esp+0DCh+hostshort],	ebp
		call	_X509_free

loc_421C5B:				; CODE XREF: _s_server_main+B71j
		mov	eax, [esp+0DCh+var_B4]
		test	eax, eax
		jz	short loc_421C6B
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_EVP_PKEY_free

loc_421C6B:				; CODE XREF: _s_server_main+B81j
		mov	eax, ds:_bio_s_out
		test	eax, eax
		jz	short loc_421C86
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_free
		mov	ds:_bio_s_out, 0

loc_421C86:				; CODE XREF: _s_server_main+B92j
		mov	eax, ebx
		add	esp, 0CCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_421CA0:				; CODE XREF: _s_server_main+2A2j
		mov	edi, offset aVerify_4 ;	"-Verify"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_421D00
		mov	ds:_s_server_verify, 7
		mov	eax, [esp+0DCh+arg_0]
		dec	eax
		mov	[esp+0DCh+arg_0], eax
		test	eax, eax
		jle	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_atoi
		mov	ds:_verify_depth, eax
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], offset aVerifyDepthI_0 ; "verify depth is %d, must return a certi"...
		jmp	loc_4213C8
; ---------------------------------------------------------------------------
		align 10h

loc_421D00:				; CODE XREF: _s_server_main+BCEj
		mov	edi, offset aContext ; "-context"
		mov	ecx, 9
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_421D30
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_A4], eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------
		align 10h

loc_421D30:				; CODE XREF: _s_server_main+C2Ej
		mov	edi, offset aCert_0 ; "-cert"
		mov	ecx, 6
		mov	esi, ebp
		repe cmpsb
		jz	short loc_421D90
		mov	edi, offset aCertform ;	"-certform"
		mov	ecx, 0Ah
		mov	esi, ebp
		repe cmpsb
		jnz	loc_422480
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_str2fmt
		mov	[esp+0DCh+var_94], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_421D90:				; CODE XREF: _s_server_main+C5Ej
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		mov	eax, [ebx+4]
		mov	_s_cert_file, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_421DB0:				; CODE XREF: _s_server_main+317j
		mov	eax, ds:_www
		test	eax, eax
		jz	short loc_421DC4
		cmp	[esp+0DCh+var_98], 2
		jz	loc_422B00

loc_421DC4:				; CODE XREF: _s_server_main+CD7j
		call	_SSL_load_error_strings
		call	_SSL_library_init
		mov	[esp+0DCh+var_D4], 1
		mov	eax, ds:_engine_id
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_setup_engine
		mov	ebx, eax
		lea	eax, [esp+0DCh+var_34]
		mov	[esp+0DCh+var_CC], eax ; int
		lea	eax, [esp+0DCh+var_38]
		mov	[esp+0DCh+var_D0], eax ; int
		mov	eax, [esp+0DCh+var_B0]
		mov	[esp+0DCh+var_D4], eax ; char *
		mov	eax, [esp+0DCh+var_B4]
		mov	[esp+0DCh+var_D8], eax ; char *
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax ; int
		call	_app_passwd
		test	eax, eax
		jz	loc_4226DF
		mov	eax, ds:_s_key_file
		test	eax, eax
		jz	loc_422AF1

loc_421E36:				; CODE XREF: _s_server_main+1A1Bj
		mov	ebp, ds:_s_key_file2
		test	ebp, ebp
		jz	loc_422AE0

loc_421E44:				; CODE XREF: _s_server_main+1A0Cj
		mov	edi, [esp+0DCh+var_9C]
		test	edi, edi
		jz	loc_422522
		xor	ebp, ebp
		mov	[esp+0DCh+var_B4], 0
		mov	[esp+0DCh+var_AC], 0
		mov	[esp+0DCh+var_B0], 0

loc_421E6A:				; CODE XREF: _s_server_main+1552j
					; _s_server_main+1BAAj
		mov	eax, [esp+0DCh+var_8C]
		test	eax, eax
		jz	loc_422747
		mov	[esp+0DCh+var_D8], eax ; char *
		lea	eax, [esp+0DCh+var_44]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; int
		call	_next_protos_parse
		mov	[esp+0DCh+var_30], eax
		test	eax, eax
		jz	loc_422BCB
		xor	eax, eax
		mov	ax, word ptr [esp+0DCh+var_44]
		mov	[esp+0DCh+var_2C], eax

loc_421EA9:				; CODE XREF: _s_server_main+1672j
		mov	edx, ds:_s_dcert_file
		test	edx, edx
		jz	loc_422DB0
		mov	eax, ds:_s_dkey_file
		test	eax, eax
		jz	loc_422BA4

loc_421EC4:				; CODE XREF: _s_server_main+1ACCj
		mov	[esp+0DCh+var_C4], offset aSecondCertific ; "second certificate	private	key file"
		mov	[esp+0DCh+var_C8], ebx
		mov	edx, [esp+0DCh+var_34]
		mov	[esp+0DCh+var_CC], edx
		mov	[esp+0DCh+var_D0], 0
		mov	esi, [esp+0DCh+var_80]
		mov	[esp+0DCh+var_D4], esi
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_load_key
		mov	edi, eax
		test	eax, eax
		jz	loc_422B8B
		mov	[esp+0DCh+var_C8], offset aSecondServerCe ; "second server certificate file"
		mov	[esp+0DCh+var_CC], ebx
		mov	[esp+0DCh+var_D0], 0
		mov	eax, [esp+0DCh+var_84]
		mov	[esp+0DCh+var_D4], eax
		mov	eax, ds:_s_dcert_file
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_load_cert
		mov	esi, eax
		test	eax, eax
		jz	loc_4226C8

loc_421F42:				; CODE XREF: _s_server_main+1CD4j
		mov	[esp+0DCh+var_D4], 1
		mov	eax, ds:_bio_err
		mov	[esp+0DCh+var_D8], eax
		mov	dword ptr [esp+0DCh+hostshort],	0
		call	_app_RAND_load_file
		test	eax, eax
		jnz	loc_422703
		mov	ecx, [esp+0DCh+var_90]
		test	ecx, ecx
		jz	loc_422EC1

loc_421F73:				; CODE XREF: _s_server_main+162Fj
		mov	eax, [esp+0DCh+var_90]
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_app_RAND_load_files
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], offset aLdSemiRandom_5 ; "%ld semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf

loc_421F98:				; CODE XREF: _s_server_main+1629j
					; _s_server_main+1DE8j	...
		mov	eax, ds:_bio_s_out
		test	eax, eax
		jz	loc_422C2D

loc_421FA5:				; CODE XREF: _s_server_main+1B77j
					; _s_server_main+1C4Aj
		mov	eax, [esp+0DCh+var_9C]
		test	eax, eax
		jz	short loc_421FE9
		mov	_s_cert_file, 0
		mov	ds:_s_key_file,	0
		mov	ds:_s_dcert_file, 0
		mov	ds:_s_dkey_file, 0
		mov	_s_cert_file2, 0
		mov	ds:_s_key_file2, 0

loc_421FE9:				; CODE XREF: _s_server_main+ECBj
		mov	eax, [esp+0DCh+var_A8]
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_new
		mov	ebx, eax
		mov	ds:_ctx, eax
		test	eax, eax
		jz	loc_422DB9
		mov	eax, ds:_session_id_prefix
		test	eax, eax
		jz	short loc_422065
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_strlen
		cmp	eax, 1Fh
		ja	loc_422757
		cmp	eax, 0Fh
		ja	loc_422B6C
		mov	eax, ebx

loc_422029:				; CODE XREF: _s_server_main+1691j
					; _s_server_main+1AA6j
		mov	[esp+0DCh+var_D8], offset _generate_session_id
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_generate_session_id
		test	eax, eax
		jz	loc_4226EC
		mov	eax, ds:_session_id_prefix
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], offset aId_prefixSSet_ ; "id_prefix '%s' set.\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	ebx, ds:_ctx

loc_422065:				; CODE XREF: _s_server_main+F2Bj
		mov	[esp+0DCh+var_D8], 1
		mov	dword ptr [esp+0DCh+hostshort],	ebx
		call	_SSL_CTX_set_quiet_shutdown
		mov	eax, [esp+0DCh+var_74]
		test	eax, eax
		jnz	loc_422C03

loc_422081:				; CODE XREF: _s_server_main+1B48j
		mov	ebx, ds:_hack
		test	ebx, ebx
		jnz	loc_422BD9

loc_42208F:				; CODE XREF: _s_server_main+1B1Ej
		mov	[esp+0DCh+var_D0], 0
		mov	eax, [esp+0DCh+var_A0]
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], 20h
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		mov	ecx, [esp+0DCh+var_70]
		test	ecx, ecx
		jnz	loc_422BB1

loc_4220C0:				; CODE XREF: _s_server_main+1AE6j
		mov	edx, [esp+0DCh+var_6C]
		test	edx, edx
		mov	[esp+0DCh+var_D0], 0
		jz	loc_422B0D
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 2Ch
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl

loc_4220F1:				; CODE XREF: _s_server_main+1A4Aj
		mov	eax, ds:_srtp_profiles
		test	eax, eax
		jz	short loc_42210B
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_tlsext_use_srtp

loc_42210B:				; CODE XREF: _s_server_main+1018j
		mov	eax, [esp+0DCh+var_7C]
		mov	[esp+0DCh+var_D4], eax
		mov	eax, [esp+0DCh+var_88]
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_load_verify_locations
		test	eax, eax
		jz	short loc_42213D
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_default_verify_paths
		test	eax, eax
		jnz	short loc_42214A

loc_42213D:				; CODE XREF: _s_server_main+104Aj
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_ERR_print_errors

loc_42214A:				; CODE XREF: _s_server_main+105Bj
		mov	eax, [esp+0DCh+var_40]
		test	eax, eax
		jz	short loc_422166
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set1_param

loc_422166:				; CODE XREF: _s_server_main+1073j
		test	ebp, ebp
		jz	loc_422C60
		mov	eax, [esp+0DCh+var_A8]
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_new
		mov	ds:_ctx2, eax
		test	eax, eax
		jz	loc_4226C8

loc_422187:				; CODE XREF: _s_server_main+1B8Dj
		mov	[esp+0DCh+var_D8], offset aSettingSeconda ; "Setting secondary ctx parameters\n"
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	eax, ds:_session_id_prefix
		test	eax, eax
		jz	short loc_42220B
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_strlen
		cmp	eax, 1Fh
		ja	loc_422CE4
		cmp	eax, 0Fh
		jbe	short loc_4221D0
		mov	[esp+0DCh+var_D8], offset aWarningId_pref ; "warning: id_prefix	is too long if you u"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf

loc_4221D0:				; CODE XREF: _s_server_main+10D9j
					; _s_server_main+1C19j
		mov	[esp+0DCh+var_D8], offset _generate_session_id
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_generate_session_id
		test	eax, eax
		jz	loc_4226EC
		mov	eax, ds:_session_id_prefix
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], offset aId_prefixSSet_ ; "id_prefix '%s' set.\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf

loc_42220B:				; CODE XREF: _s_server_main+10C3j
		mov	[esp+0DCh+var_D8], 1
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_quiet_shutdown
		mov	eax, [esp+0DCh+var_74]
		test	eax, eax
		jnz	loc_422DCD

loc_42222C:				; CODE XREF: _s_server_main+1D12j
		mov	eax, ds:_hack
		test	eax, eax
		jnz	loc_422E97

loc_422239:				; CODE XREF: _s_server_main+1DDCj
		mov	[esp+0DCh+var_D0], 0
		mov	eax, [esp+0DCh+var_A0]
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], 20h
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		mov	eax, [esp+0DCh+var_70]
		test	eax, eax
		jnz	loc_422E7D

loc_42226A:				; CODE XREF: _s_server_main+1DB2j
		mov	eax, [esp+0DCh+var_6C]
		test	eax, eax
		mov	[esp+0DCh+var_D0], 0
		jz	loc_422CC2
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 2Ch
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl

loc_42229B:				; CODE XREF: _s_server_main+1BFFj
		mov	eax, [esp+0DCh+var_7C]
		mov	[esp+0DCh+var_D4], eax
		mov	eax, [esp+0DCh+var_88]
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_load_verify_locations
		test	eax, eax
		jz	short loc_4222CD
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_default_verify_paths
		test	eax, eax
		jnz	short loc_4222DA

loc_4222CD:				; CODE XREF: _s_server_main+11DAj
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_ERR_print_errors

loc_4222DA:				; CODE XREF: _s_server_main+11EBj
		mov	eax, [esp+0DCh+var_40]
		test	eax, eax
		jz	short loc_4222F6
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set1_param

loc_4222F6:				; CODE XREF: _s_server_main+1203j
					; _s_server_main+1B87j
		mov	eax, [esp+0DCh+var_30]
		test	eax, eax
		jz	short loc_422321
		lea	eax, [esp+0DCh+var_30]
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], offset _next_proto_cb
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_next_protos_advertised_cb

loc_422321:				; CODE XREF: _s_server_main+121Fj
		mov	ebx, [esp+0DCh+var_58]
		test	ebx, ebx
		jnz	loc_422422
		mov	eax, [esp+0DCh+var_68]
		test	eax, eax
		jz	loc_422E64
		mov	[esp+0DCh+var_D8], offset aR_1 ; "r"
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_new_file
		test	eax, eax
		jz	loc_422653
		mov	[esp+0DCh+var_D0], 0
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 0
		mov	dword ptr [esp+0DCh+hostshort],	eax
		mov	[esp+0DCh+var_A8], eax
		call	_PEM_read_bio_DHparams
		mov	ebx, eax
		mov	edx, [esp+0DCh+var_A8]
		mov	dword ptr [esp+0DCh+hostshort],	edx
		call	_BIO_free

loc_422386:				; CODE XREF: _s_server_main+1D98j
		test	ebx, ebx
		jz	loc_422653
		mov	[esp+0DCh+var_D8], offset aSettingTempDhP ; "Setting temp DH parameters\n"
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf

loc_4223A3:				; CODE XREF: _s_server_main+15DAj
		mov	[esp+0DCh+var_D0], 0
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 0Bh
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_ctrl
		mov	[esp+0DCh+var_D0], ebx
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 3
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		mov	eax, ds:_ctx2
		test	eax, eax
		jz	short loc_42241A
		mov	edx, [esp+0DCh+var_68]
		test	edx, edx
		jz	loc_423184

loc_4223FE:				; CODE XREF: _s_server_main+20B7j
					; _s_server_main+210Ej
		mov	[esp+0DCh+var_D0], ebx
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 3
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl

loc_42241A:				; CODE XREF: _s_server_main+1310j
		mov	dword ptr [esp+0DCh+hostshort],	ebx
		call	_DH_free

loc_422422:				; CODE XREF: _s_server_main+124Aj
		mov	eax, [esp+0DCh+var_54]
		test	eax, eax
		jnz	loc_422810
		mov	eax, [esp+0DCh+var_78]
		test	eax, eax
		jz	loc_422D5D
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_OBJ_sn2nid
		test	eax, eax
		jnz	loc_422776
		mov	eax, [esp+0DCh+var_78]
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], offset aUnknownCurve_0 ; "unknown curve name	(%s)\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------
		align 10h

loc_422480:				; CODE XREF: _s_server_main+C6Ej
		mov	edi, offset aKey_2 ; "-key"
		mov	ecx, 5
		mov	esi, ebp
		repe cmpsb
		jz	short loc_422502
		mov	edi, offset aKeyform_4 ; "-keyform"
		mov	ecx, 9
		mov	esi, ebp
		repe cmpsb
		jnz	loc_422714
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_str2fmt
		mov	[esp+0DCh+var_64], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4224E0:				; CODE XREF: _s_server_main+151j
		mov	[esp+0DCh+var_D8], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_421237
; ---------------------------------------------------------------------------

loc_422502:				; CODE XREF: _s_server_main+13AEj
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		mov	eax, [ebx+4]
		mov	ds:_s_key_file,	eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_422522:				; CODE XREF: _s_server_main+D6Aj
		mov	[esp+0DCh+var_C4], offset aServerCertific ; "server certificate	private	key file"
		mov	[esp+0DCh+var_C8], ebx
		mov	edx, [esp+0DCh+var_38]
		mov	[esp+0DCh+var_CC], edx
		mov	[esp+0DCh+var_D0], 0
		mov	esi, [esp+0DCh+var_64]
		mov	[esp+0DCh+var_D4], esi
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_load_key
		mov	[esp+0DCh+var_AC], eax
		test	eax, eax
		jz	loc_422D30
		mov	[esp+0DCh+var_C8], offset aServerCertif_0 ; "server certificate	file"
		mov	[esp+0DCh+var_CC], ebx
		mov	[esp+0DCh+var_D0], 0
		mov	eax, [esp+0DCh+var_94]
		mov	[esp+0DCh+var_D4], eax
		mov	eax, _s_cert_file
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_load_cert
		mov	[esp+0DCh+var_B0], eax
		test	eax, eax
		jz	loc_422F40
		mov	esi, [esp+0DCh+var_28]
		test	esi, esi
		jz	loc_422C80
		mov	[esp+0DCh+var_C4], offset aSecondServer_0 ; "second server certificate private key f"...
		mov	[esp+0DCh+var_C8], ebx
		mov	eax, [esp+0DCh+var_38]
		mov	[esp+0DCh+var_CC], eax
		mov	[esp+0DCh+var_D0], 0
		mov	eax, [esp+0DCh+var_64]
		mov	[esp+0DCh+var_D4], eax
		mov	eax, ds:_s_key_file2
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_load_key
		mov	[esp+0DCh+var_B4], eax
		test	eax, eax
		jz	loc_422E47
		mov	[esp+0DCh+var_C8], offset aSecondServerCe ; "second server certificate file"
		mov	[esp+0DCh+var_CC], ebx
		mov	[esp+0DCh+var_D0], 0
		mov	eax, [esp+0DCh+var_94]
		mov	[esp+0DCh+var_D4], eax
		mov	eax, _s_cert_file2
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_load_cert
		mov	ebp, eax
		test	eax, eax
		jnz	loc_421E6A
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_ERR_print_errors
		xor	edi, edi
		xor	esi, esi
		mov	ebx, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_422653:				; CODE XREF: _s_server_main+126Ej
					; _s_server_main+12A8j	...
		mov	[esp+0DCh+var_D8], offset aUsingDefaultTe ; "Using default temp	DH parameters\n"
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		call	_DH_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_4226C8
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 100h
		mov	dword ptr [esp+0DCh+hostshort],	offset _dh2048_p
		call	_BN_bin2bn
		mov	[ebx+8], eax
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 1
		mov	dword ptr [esp+0DCh+hostshort],	offset _dh2048_g
		call	_BN_bin2bn
		mov	[ebx+0Ch], eax
		mov	ecx, [ebx+8]
		test	ecx, ecx
		jz	short loc_4226C0
		test	eax, eax
		jnz	loc_4223A3

loc_4226C0:				; CODE XREF: _s_server_main+15D6j
		mov	dword ptr [esp+0DCh+hostshort],	ebx
		call	_DH_free

loc_4226C8:				; CODE XREF: _s_server_main+E5Cj
					; _s_server_main+10A1j	...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_ERR_print_errors
		mov	ebx, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_4226DF:				; CODE XREF: _s_server_main+D43j
		mov	[esp+0DCh+var_D8], offset aErrorGettin_13 ; "Error getting password\n"
		jmp	loc_421B59
; ---------------------------------------------------------------------------

loc_4226EC:				; CODE XREF: _s_server_main+F5Bj
					; _s_server_main+1107j
		mov	[esp+0DCh+var_D8], offset aErrorSettingId ; "error setting 'id_prefix'\n"

loc_4226F4:				; CODE XREF: _s_server_main+1E18j
					; _s_server_main+1F09j
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		jmp	short loc_4226C8
; ---------------------------------------------------------------------------

loc_422703:				; CODE XREF: _s_server_main+E81j
		mov	edx, [esp+0DCh+var_90]
		test	edx, edx
		jz	loc_421F98
		jmp	loc_421F73
; ---------------------------------------------------------------------------

loc_422714:				; CODE XREF: _s_server_main+13BEj
		mov	edi, offset aPass_1 ; "-pass"
		mov	ecx, 6
		mov	esi, ebp
		repe cmpsb
		jnz	loc_422B2F
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_B4], eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_422747:				; CODE XREF: _s_server_main+D90j
		mov	[esp+0DCh+var_30], 0
		jmp	loc_421EA9
; ---------------------------------------------------------------------------

loc_422757:				; CODE XREF: _s_server_main+F38j
		mov	[esp+0DCh+var_D8], offset aWarningId_pr_0 ; "warning: id_prefix	is too long, only on"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	eax, ds:_ctx
		jmp	loc_422029
; ---------------------------------------------------------------------------

loc_422776:				; CODE XREF: _s_server_main+1367j
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_EC_KEY_new_by_curve_name
		mov	ebx, eax
		test	eax, eax
		jz	loc_42302D
		mov	[esp+0DCh+var_D8], offset aSettingTempEcd ; "Setting temp ECDH parameters\n"
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf

loc_42279D:				; CODE XREF: _s_server_main+1CA2j
		mov	[esp+0DCh+var_D0], 0
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 0Bh
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_ctrl
		mov	[esp+0DCh+var_D0], ebx
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 4
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		mov	eax, ds:_ctx2
		test	eax, eax
		jz	short loc_422808
		mov	[esp+0DCh+var_D0], ebx
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 4
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl

loc_422808:				; CODE XREF: _s_server_main+170Aj
		mov	dword ptr [esp+0DCh+hostshort],	ebx
		call	_EC_KEY_free

loc_422810:				; CODE XREF: _s_server_main+134Bj
		mov	eax, [esp+0DCh+var_AC]
		mov	[esp+0DCh+var_D4], eax
		mov	eax, [esp+0DCh+var_B0]
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_set_cert_key_stuff
		test	eax, eax
		jz	loc_422B62
		mov	eax, ds:_ctx2
		test	eax, eax
		jz	short loc_42285A
		mov	ecx, [esp+0DCh+var_B4]
		mov	[esp+0DCh+var_D4], ecx
		mov	[esp+0DCh+var_D8], ebp
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_set_cert_key_stuff
		test	eax, eax
		jz	loc_422B62

loc_42285A:				; CODE XREF: _s_server_main+175Cj
		test	esi, esi
		jz	short loc_42287B
		mov	[esp+0DCh+var_D4], edi
		mov	[esp+0DCh+var_D8], esi
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_set_cert_key_stuff
		test	eax, eax
		jz	loc_422B62

loc_42287B:				; CODE XREF: _s_server_main+177Cj
		mov	eax, [esp+0DCh+var_5C]
		test	eax, eax
		jz	loc_422EFD

loc_42288A:				; CODE XREF: _s_server_main+1E39j
					; _s_server_main+1E4Fj
		mov	ebx, ds:_psk_key
		test	ebx, ebx
		jz	short loc_4228C8
		mov	ecx, ds:_s_debug
		test	ecx, ecx
		jz	short loc_4228B3
		mov	[esp+0DCh+var_D8], offset aPskKeyGivenOrJ ; "PSK key given or JPAKE in use, setting "...
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf

loc_4228B3:				; CODE XREF: _s_server_main+17BCj
		mov	[esp+0DCh+var_D8], offset _psk_server_cb
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_psk_server_callback

loc_4228C8:				; CODE XREF: _s_server_main+17B2j
		mov	eax, ds:_psk_identity_hint_38181
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_use_psk_identity_hint
		test	eax, eax
		jz	loc_422EF0
		mov	eax, ds:_cipher
		test	eax, eax
		jz	short loc_42292B
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_cipher_list
		test	eax, eax
		jz	loc_422FE1
		mov	eax, ds:_ctx2
		test	eax, eax
		jz	short loc_42292B
		mov	edx, ds:_cipher
		mov	[esp+0DCh+var_D8], edx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_cipher_list
		test	eax, eax
		jz	loc_422FE1

loc_42292B:				; CODE XREF: _s_server_main+180Dj
					; _s_server_main+182Fj
		mov	[esp+0DCh+var_D4], offset _verify_callback
		mov	eax, ds:_s_server_verify
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_verify
		mov	[esp+0DCh+var_D4], 4
		mov	[esp+0DCh+var_D8], offset _s_server_session_id_context
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_session_id_context
		mov	[esp+0DCh+var_D8], offset _generate_cookie_callback
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_cookie_generate_cb
		mov	[esp+0DCh+var_D8], offset _verify_cookie_callback
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_cookie_verify_cb
		mov	eax, ds:_ctx2
		test	eax, eax
		jz	loc_422A63
		mov	[esp+0DCh+var_D4], offset _verify_callback
		mov	edx, ds:_s_server_verify
		mov	[esp+0DCh+var_D8], edx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_verify
		mov	[esp+0DCh+var_D4], 4
		mov	[esp+0DCh+var_D8], offset _s_server_session_id_context
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_session_id_context
		mov	eax, ds:_bio_s_out
		mov	[esp+0DCh+var_24], eax
		mov	[esp+0DCh+var_D4], offset _ssl_servername_cb
		mov	[esp+0DCh+var_D8], 35h
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_callback_ctrl
		lea	ebx, [esp+0DCh+var_28]
		mov	[esp+0DCh+var_D0], ebx
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 36h
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		mov	[esp+0DCh+var_D4], offset _ssl_servername_cb
		mov	[esp+0DCh+var_D8], 35h
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_callback_ctrl
		mov	[esp+0DCh+var_D0], ebx
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 36h
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl

loc_422A63:				; CODE XREF: _s_server_main+18B7j
		mov	ebx, [esp+0DCh+var_60]
		test	ebx, ebx
		jz	loc_423127
		mov	eax, [esp+0DCh+var_50]
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SRP_VBASE_new
		mov	ds:dword_47338C, eax
		mov	ds:dword_473390, 0
		mov	ds:_srp_callback_parm, 0
		mov	[esp+0DCh+var_D8], ebx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SRP_VBASE_init
		mov	ebx, eax
		test	eax, eax
		jz	loc_423051
		mov	[esp+0DCh+var_D0], eax
		mov	eax, [esp+0DCh+var_60]
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], offset aCannotInitiali ; "Cannot initialize SRP verifier file \"%"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		jmp	loc_421B89
; ---------------------------------------------------------------------------
		align 10h

loc_422AE0:				; CODE XREF: _s_server_main+D5Ej
		mov	edx, _s_cert_file2
		mov	ds:_s_key_file2, edx
		jmp	loc_421E44
; ---------------------------------------------------------------------------

loc_422AF1:				; CODE XREF: _s_server_main+D50j
		mov	eax, _s_cert_file
		mov	ds:_s_key_file,	eax
		jmp	loc_421E36
; ---------------------------------------------------------------------------

loc_422B00:				; CODE XREF: _s_server_main+CDEj
		mov	[esp+0DCh+var_D8], offset aCanTUseHttpWww ; "Can't use -HTTP, -www or -WWW with DTLS"...
		jmp	loc_421B59
; ---------------------------------------------------------------------------

loc_422B0D:				; CODE XREF: _s_server_main+FEEj
		mov	[esp+0DCh+var_D4], 80h
		mov	[esp+0DCh+var_D8], 2Ah
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		jmp	loc_4220F1
; ---------------------------------------------------------------------------

loc_422B2F:				; CODE XREF: _s_server_main+1642j
		mov	edi, offset aDhparam ; "-dhparam"
		mov	ecx, 9
		mov	esi, ebp
		repe cmpsb
		jnz	loc_422C8F
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_68], eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_422B62:				; CODE XREF: _s_server_main+174Fj
					; _s_server_main+1774j	...
		mov	ebx, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_422B6C:				; CODE XREF: _s_server_main+F41j
		mov	[esp+0DCh+var_D8], offset aWarningId_pref ; "warning: id_prefix	is too long if you u"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	eax, ds:_ctx
		jmp	loc_422029
; ---------------------------------------------------------------------------

loc_422B8B:				; CODE XREF: _s_server_main+E20j
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_ERR_print_errors
		xor	esi, esi
		mov	ebx, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_422BA4:				; CODE XREF: _s_server_main+DDEj
		mov	ds:_s_dkey_file, edx
		mov	eax, edx
		jmp	loc_421EC4
; ---------------------------------------------------------------------------

loc_422BB1:				; CODE XREF: _s_server_main+FDAj
		mov	[esp+0DCh+var_D8], offset _apps_ssl_info_callback
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_info_callback
		jmp	loc_4220C0
; ---------------------------------------------------------------------------

loc_422BCB:				; CODE XREF: _s_server_main+DB2j
		xor	edi, edi
		xor	esi, esi
		mov	ebx, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_422BD9:				; CODE XREF: _s_server_main+FA9j
		mov	[esp+0DCh+var_D0], 0
		mov	[esp+0DCh+var_D4], 40000000h
		mov	[esp+0DCh+var_D8], 20h
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		jmp	loc_42208F
; ---------------------------------------------------------------------------

loc_422C03:				; CODE XREF: _s_server_main+F9Bj
		mov	[esp+0DCh+var_D0], 0
		mov	[esp+0DCh+var_D4], 80000BFFh
		mov	[esp+0DCh+var_D8], 20h
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		jmp	loc_422081
; ---------------------------------------------------------------------------

loc_422C2D:				; CODE XREF: _s_server_main+EBFj
		mov	eax, ds:_s_quiet
		test	eax, eax
		jnz	loc_422CFE

loc_422C3A:				; CODE XREF: _s_server_main+1C25j
					; _s_server_main+1C32j
		mov	[esp+0DCh+var_D8], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_new_fp
		mov	ds:_bio_s_out, eax
		jmp	loc_421FA5
; ---------------------------------------------------------------------------
		align 10h

loc_422C60:				; CODE XREF: _s_server_main+1088j
		mov	eax, ds:_ctx2
		test	eax, eax
		jz	loc_4222F6
		jmp	loc_422187
; ---------------------------------------------------------------------------
		align 10h

loc_422C80:				; CODE XREF: _s_server_main+14CDj
		xor	ebp, ebp
		mov	[esp+0DCh+var_B4], 0
		jmp	loc_421E6A
; ---------------------------------------------------------------------------

loc_422C8F:				; CODE XREF: _s_server_main+1A5Dj
		mov	edi, offset aNamed_curve_1 ; "-named_curve"
		mov	ecx, 0Dh
		mov	esi, ebp
		repe cmpsb
		jnz	loc_422DF7
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_78], eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_422CC2:				; CODE XREF: _s_server_main+1198j
		mov	[esp+0DCh+var_D4], 80h
		mov	[esp+0DCh+var_D8], 2Ah
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		jmp	loc_42229B
; ---------------------------------------------------------------------------

loc_422CE4:				; CODE XREF: _s_server_main+10D0j
		mov	[esp+0DCh+var_D8], offset aWarningId_pr_0 ; "warning: id_prefix	is too long, only on"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		jmp	loc_4221D0
; ---------------------------------------------------------------------------

loc_422CFE:				; CODE XREF: _s_server_main+1B54j
		mov	eax, ds:_s_debug
		test	eax, eax
		jnz	loc_422C3A
		mov	eax, ds:_s_msg
		test	eax, eax
		jnz	loc_422C3A
		call	_BIO_s_null
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_new
		mov	ds:_bio_s_out, eax
		jmp	loc_421FA5
; ---------------------------------------------------------------------------
		align 10h

loc_422D30:				; CODE XREF: _s_server_main+1480j
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_ERR_print_errors
		xor	ebp, ebp
		mov	[esp+0DCh+var_B4], 0
		xor	edi, edi
		xor	esi, esi
		mov	[esp+0DCh+var_B0], 0
		mov	ebx, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_422D5D:				; CODE XREF: _s_server_main+1357j
		mov	[esp+0DCh+var_D8], offset aUsingDefault_0 ; "Using default temp	ECDH parameters\n"
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	dword ptr [esp+0DCh+hostshort],	19Fh
		call	_EC_KEY_new_by_curve_name
		mov	ebx, eax
		test	eax, eax
		jnz	loc_42279D
		mov	[esp+0DCh+var_D8], offset aUnableToCrea_1 ; "unable to create curve (nistp256)\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------
		align 10h

loc_422DB0:				; CODE XREF: _s_server_main+DD1j
		xor	edi, edi
		xor	esi, esi
		jmp	loc_421F42
; ---------------------------------------------------------------------------

loc_422DB9:				; CODE XREF: _s_server_main+F1Ej
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_ERR_print_errors
		mov	bl, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_422DCD:				; CODE XREF: _s_server_main+1146j
		mov	[esp+0DCh+var_D0], 0
		mov	[esp+0DCh+var_D4], 80000BFFh
		mov	[esp+0DCh+var_D8], 20h
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		jmp	loc_42222C
; ---------------------------------------------------------------------------

loc_422DF7:				; CODE XREF: _s_server_main+1BBDj
		mov	edi, offset aDcertform ; "-dcertform"
		mov	ecx, 0Bh
		mov	esi, ebp
		repe cmpsb
		jnz	loc_422F65
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_str2fmt
		mov	[esp+0DCh+var_84], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_422E47:				; CODE XREF: _s_server_main+1516j
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_ERR_print_errors
		xor	ebp, ebp
		xor	edi, edi
		xor	esi, esi
		mov	ebx, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_422E64:				; CODE XREF: _s_server_main+1256j
		mov	eax, _s_cert_file
		test	eax, eax
		jz	loc_422653
		call	_load_dh_param
		mov	ebx, eax
		jmp	loc_422386
; ---------------------------------------------------------------------------

loc_422E7D:				; CODE XREF: _s_server_main+1184j
		mov	[esp+0DCh+var_D8], offset _apps_ssl_info_callback
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_info_callback
		jmp	loc_42226A
; ---------------------------------------------------------------------------

loc_422E97:				; CODE XREF: _s_server_main+1153j
		mov	[esp+0DCh+var_D0], 0
		mov	[esp+0DCh+var_D4], 40000000h
		mov	[esp+0DCh+var_D8], 20h
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_ctrl
		jmp	loc_422239
; ---------------------------------------------------------------------------

loc_422EC1:				; CODE XREF: _s_server_main+E8Dj
		call	_RAND_status
		test	eax, eax
		jnz	loc_421F98
		mov	[esp+0DCh+var_D8], offset aWarningNotMu_3 ; "warning, not much extra random data, co"...
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		jmp	loc_421F98
; ---------------------------------------------------------------------------
		align 10h

loc_422EF0:				; CODE XREF: _s_server_main+1800j
		mov	[esp+0DCh+var_D8], offset aErrorSettingPs ; "error setting PSK identity	hint to	cont"...
		jmp	loc_4226F4
; ---------------------------------------------------------------------------

loc_422EFD:				; CODE XREF: _s_server_main+17A4j
		mov	[esp+0DCh+var_D8], offset _tmp_rsa_cb
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_tmp_rsa_callback
		mov	eax, ds:_ctx2
		test	eax, eax
		jz	loc_42288A
		mov	[esp+0DCh+var_D8], offset _tmp_rsa_cb
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_tmp_rsa_callback
		jmp	loc_42288A
; ---------------------------------------------------------------------------
		align 10h

loc_422F40:				; CODE XREF: _s_server_main+14BEj
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_ERR_print_errors
		xor	ebp, ebp
		mov	[esp+0DCh+var_B4], 0
		xor	edi, edi
		xor	esi, esi
		mov	ebx, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_422F65:				; CODE XREF: _s_server_main+1D25j
		mov	edi, offset aDcert ; "-dcert"
		mov	ecx, 7
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_422F95
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		mov	eax, [ebx+4]
		mov	ds:_s_dcert_file, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_422F95:				; CODE XREF: _s_server_main+1E93j
		mov	edi, offset aDkeyform ;	"-dkeyform"
		mov	ecx, 0Ah
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_422FEE
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_str2fmt
		mov	[esp+0DCh+var_80], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_422FE1:				; CODE XREF: _s_server_main+1822j
					; _s_server_main+1845j
		mov	[esp+0DCh+var_D8], offset aErrorSetting_0 ; "error setting cipher list\n"
		jmp	loc_4226F4
; ---------------------------------------------------------------------------

loc_422FEE:				; CODE XREF: _s_server_main+1EC3j
		mov	[esp+0DCh+var_AC], edx
		mov	[esp+0DCh+var_D8], offset aDpass ; "-dpass"
		mov	dword ptr [esp+0DCh+hostshort],	ebp ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0DCh+var_AC]
		jnz	loc_4231F3
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_B0], eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42302D:				; CODE XREF: _s_server_main+16A2j
		mov	eax, [esp+0DCh+var_78]
		mov	[esp+0DCh+var_D4], eax
		mov	[esp+0DCh+var_D8], offset aUnableToCrea_2 ; "unable to create curve (%s)\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	bl, 1
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_423051:				; CODE XREF: _s_server_main+19C7j
		mov	[esp+0DCh+var_D4], offset _verify_callback
		mov	[esp+0DCh+var_D8], 0
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_verify
		mov	[esp+0DCh+var_D8], offset _srp_callback_parm
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_srp_cb_arg
		mov	[esp+0DCh+var_D8], offset _ssl_srp_server_param_cb
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_srp_username_callback

loc_423098:				; CODE XREF: _s_server_main+204Dj
					; _s_server_main+2073j	...
		mov	[esp+0DCh+var_D8], offset aAccept ; "ACCEPT\n"
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D0], 0
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 0Bh
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_ctrl
		mov	eax, [esp+0DCh+var_A4]
		mov	edx, ds:_www
		test	edx, edx
		mov	[esp+0DCh+var_CC], eax ; int
		jz	loc_423177
		mov	[esp+0DCh+var_D0], offset _www_body ; int

loc_4230F0:				; CODE XREF: _s_server_main+209Fj
		mov	[esp+0DCh+var_D4], offset _accept_socket ; int
		mov	eax, [esp+0DCh+var_98]
		mov	[esp+0DCh+var_D8], eax ; int
		movsx	eax, word ptr [esp+0DCh+var_48]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; hostshort
		call	_do_server
		mov	edx, ds:_ctx
		mov	eax, ds:_bio_s_out
		call	_print_stats
		xor	ebx, ebx
		jmp	loc_421B89
; ---------------------------------------------------------------------------

loc_423127:				; CODE XREF: _s_server_main+1989j
		mov	ebx, [esp+0DCh+var_88]
		test	ebx, ebx
		jz	loc_423098
		mov	dword ptr [esp+0DCh+hostshort],	ebx
		call	_SSL_load_client_CA_file
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_client_CA_list
		cmp	ds:_ctx2, 0
		jz	loc_423098
		mov	dword ptr [esp+0DCh+hostshort],	ebx
		call	_SSL_load_client_CA_file
		mov	[esp+0DCh+var_D8], eax
		mov	eax, ds:_ctx2
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_SSL_CTX_set_client_CA_list
		jmp	loc_423098
; ---------------------------------------------------------------------------

loc_423177:				; CODE XREF: _s_server_main+2002j
		mov	[esp+0DCh+var_D0], offset _sv_body
		jmp	loc_4230F0
; ---------------------------------------------------------------------------

loc_423184:				; CODE XREF: _s_server_main+1318j
		mov	eax, _s_cert_file2
		call	_load_dh_param
		mov	edx, eax
		mov	eax, ds:_ctx2
		test	edx, edx
		jz	loc_4223FE
		mov	[esp+0DCh+var_A8], edx
		mov	[esp+0DCh+var_D8], offset aSettingTempDhP ; "Setting temp DH parameters\n"
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		mov	[esp+0DCh+var_D0], 0
		mov	[esp+0DCh+var_D4], 0
		mov	[esp+0DCh+var_D8], 0Bh
		mov	eax, ds:_bio_s_out
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_ctrl
		mov	dword ptr [esp+0DCh+hostshort],	ebx
		call	_DH_free
		mov	eax, ds:_ctx2
		mov	edx, [esp+0DCh+var_A8]
		mov	ebx, edx
		jmp	loc_4223FE
; ---------------------------------------------------------------------------

loc_4231F3:				; CODE XREF: _s_server_main+1F28j
		mov	[esp+0DCh+var_AC], edx
		mov	[esp+0DCh+var_D8], offset aDkey	; "-dkey"
		mov	dword ptr [esp+0DCh+hostshort],	ebp ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0DCh+var_AC]
		jnz	short loc_42322F
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		mov	eax, [ebx+4]
		mov	ds:_s_dkey_file, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42322F:				; CODE XREF: _s_server_main+212Dj
		mov	[esp+0DCh+var_AC], edx
		mov	[esp+0DCh+var_D8], offset aNocert ; "-nocert"
		mov	dword ptr [esp+0DCh+hostshort],	ebp ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0DCh+var_AC]
		jz	short loc_423282
		mov	[esp+0DCh+var_D8], offset aCapath_1 ; "-CApath"
		mov	dword ptr [esp+0DCh+hostshort],	ebp ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0DCh+var_AC]
		jnz	short loc_42328F
		dec	edx
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jz	loc_42144A
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_7C], eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423282:				; CODE XREF: _s_server_main+2169j
		mov	[esp+0DCh+var_9C], 1
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42328F:				; CODE XREF: _s_server_main+2181j
		mov	[esp+0DCh+var_AC], edx
		mov	[esp+0DCh+var_D8], offset aNo_cache ; "-no_cache"
		mov	dword ptr [esp+0DCh+hostshort],	ebp ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0DCh+var_AC]
		jnz	short loc_4232B8
		mov	[esp+0DCh+var_6C], 1
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4232B8:				; CODE XREF: _s_server_main+21C9j
		lea	eax, [esp+0DCh+var_40]
		mov	[esp+0DCh+var_CC], eax
		mov	eax, ds:_bio_err
		mov	[esp+0DCh+var_D0], eax
		lea	eax, [esp+0DCh+var_3C]
		mov	[esp+0DCh+var_D4], eax
		lea	eax, [esp+0DCh+arg_0]
		mov	[esp+0DCh+var_D8], eax
		lea	eax, [esp+0DCh+arg_4]
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_args_verify
		test	eax, eax
		jz	short loc_42330F
		cmp	[esp+0DCh+var_3C], 0
		jnz	loc_42144A
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213F5
; ---------------------------------------------------------------------------

loc_42330F:				; CODE XREF: _s_server_main+2213j
		mov	ebx, [esp+0DCh+arg_4]
		mov	esi, [ebx]
		mov	[esp+0DCh+var_D8], offset aVerify_retur_0 ; "-verify_return_error"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423342
		mov	ds:_verify_return_error, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423342:				; CODE XREF: _s_server_main+224Aj
		mov	[esp+0DCh+var_D8], offset aServerpref ;	"-serverpref"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42336A
		or	[esp+0DCh+var_A0], 400000h
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42336A:				; CODE XREF: _s_server_main+2274j
		mov	[esp+0DCh+var_D8], offset aLegacy_reneg_0 ; "-legacy_renegotiation"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423392
		or	[esp+0DCh+var_A0], 40000h
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423392:				; CODE XREF: _s_server_main+229Cj
		mov	[esp+0DCh+var_D8], offset aCipher ; "-cipher"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4233CF
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	ds:_cipher, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4233CF:				; CODE XREF: _s_server_main+22C4j
		mov	[esp+0DCh+var_D8], offset aCafile_1 ; "-CAfile"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42340B
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_88], eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42340B:				; CODE XREF: _s_server_main+2301j
		mov	[esp+0DCh+var_D8], offset aNbio	; "-nbio"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423435
		mov	ds:_s_nbio, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423435:				; CODE XREF: _s_server_main+233Dj
		mov	[esp+0DCh+var_D8], offset aNbio_test ; "-nbio_test"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423469
		mov	ds:_s_nbio, 1
		mov	ds:_s_nbio_test, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423469:				; CODE XREF: _s_server_main+2367j
		mov	[esp+0DCh+var_D8], offset aDebug_0 ; "-debug"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423493
		mov	ds:_s_debug, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423493:				; CODE XREF: _s_server_main+239Bj
		mov	[esp+0DCh+var_D8], offset aTlsextdebug ; "-tlsextdebug"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4234BD
		mov	ds:_s_tlsextdebug, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4234BD:				; CODE XREF: _s_server_main+23C5j
		mov	[esp+0DCh+var_D8], offset aStatus_0 ; "-status"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4234E7
		mov	ds:_s_tlsextstatus, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4234E7:				; CODE XREF: _s_server_main+23EFj
		mov	[esp+0DCh+var_D8], offset aStatus_verbo_0 ; "-status_verbose"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42351B
		mov	ds:_s_tlsextstatus, 1
		mov	dword_455778, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42351B:				; CODE XREF: _s_server_main+2419j
		mov	[esp+0DCh+var_D8], offset aStatus_timeo_0 ; "-status_timeout"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42357D
		mov	ds:_s_tlsextstatus, 1
		mov	eax, [esp+0DCh+arg_0]
		dec	eax
		mov	[esp+0DCh+arg_0], eax
		test	eax, eax
		jle	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_atoi
		mov	dword_455770, eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42357D:				; CODE XREF: _s_server_main+244Dj
		mov	[esp+0DCh+var_D8], offset aStatus_url ;	"-status_url"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423609
		mov	ds:_s_tlsextstatus, 1
		mov	eax, [esp+0DCh+arg_0]
		dec	eax
		mov	[esp+0DCh+arg_0], eax
		test	eax, eax
		jle	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_CC], offset dword_45576C
		mov	[esp+0DCh+var_D0], offset dword_455764
		mov	[esp+0DCh+var_D4], offset dword_455768
		mov	[esp+0DCh+var_D8], offset _tlscstatp
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_OCSP_parse_url
		test	eax, eax
		jnz	loc_4213D5
		mov	[esp+0DCh+var_D8], offset aErrorParsingUr ; "Error parsing URL\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		jmp	loc_42144A
; ---------------------------------------------------------------------------

loc_423609:				; CODE XREF: _s_server_main+24AFj
		mov	[esp+0DCh+var_D8], offset aMsg ; "-msg"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423633
		mov	ds:_s_msg, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423633:				; CODE XREF: _s_server_main+253Bj
		mov	[esp+0DCh+var_D8], offset aHack	; "-hack"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42365D
		mov	ds:_hack, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42365D:				; CODE XREF: _s_server_main+2565j
		mov	[esp+0DCh+var_D8], offset aState ; "-state"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423685
		mov	edx, [esp+0DCh+arg_0]
		mov	[esp+0DCh+var_70], 1
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423685:				; CODE XREF: _s_server_main+258Fj
		mov	[esp+0DCh+var_D8], offset aCrlf	; "-crlf"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4236AF
		mov	ds:_s_crlf, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4236AF:				; CODE XREF: _s_server_main+25B7j
		mov	[esp+0DCh+var_D8], offset aQuiet_0 ; "-quiet"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4236D9
		mov	ds:_s_quiet, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4236D9:				; CODE XREF: _s_server_main+25E1j
		mov	[esp+0DCh+var_D8], offset aBugs	; "-bugs"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423701
		mov	edx, [esp+0DCh+arg_0]
		mov	[esp+0DCh+var_74], 1
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423701:				; CODE XREF: _s_server_main+260Bj
		mov	[esp+0DCh+var_D8], offset aNo_tmp_rsa ;	"-no_tmp_rsa"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42372C
		mov	edx, [esp+0DCh+arg_0]
		mov	[esp+0DCh+var_5C], 1
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42372C:				; CODE XREF: _s_server_main+2633j
		mov	[esp+0DCh+var_D8], offset aNo_dhe ; "-no_dhe"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423757
		mov	edx, [esp+0DCh+arg_0]
		mov	[esp+0DCh+var_58], 1
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423757:				; CODE XREF: _s_server_main+265Ej
		mov	[esp+0DCh+var_D8], offset aNo_ecdhe ; "-no_ecdhe"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423782
		mov	edx, [esp+0DCh+arg_0]
		mov	[esp+0DCh+var_54], 1
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423782:				; CODE XREF: _s_server_main+2689j
		mov	[esp+0DCh+var_D8], offset aPsk_hint ; "-psk_hint"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4237BF
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	ds:_psk_identity_hint_38181, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4237BF:				; CODE XREF: _s_server_main+26B4j
		mov	[esp+0DCh+var_D8], offset aPsk ; "-psk"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423832
		mov	eax, [esp+0DCh+arg_0]
		lea	esi, [eax-1]
		mov	[esp+0DCh+arg_0], esi
		test	esi, esi
		jle	loc_42144A
		lea	ebp, [ebx+4]
		mov	[esp+0DCh+arg_4], ebp
		mov	ebx, [ebx+4]
		mov	ds:_psk_key, ebx
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, ebx
		repne scasb
		not	ecx
		lea	eax, [ecx-1]
		mov	[esp+0DCh+var_AC], eax
		xor	edi, edi

loc_423813:				; CODE XREF: _s_server_main+2750j
		cmp	edi, [esp+0DCh+var_AC]
		jz	loc_4238A8
		xor	eax, eax
		mov	al, [ebx+edi]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; int
		call	ds:__imp__isxdigit
		test	eax, eax
		jz	short loc_42388A
		inc	edi
		jmp	short loc_423813
; ---------------------------------------------------------------------------

loc_423832:				; CODE XREF: _s_server_main+26F1j
		mov	[esp+0DCh+var_D8], offset aSrpvfile ; "-srpvfile"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4238B1
		mov	eax, [esp+0DCh+arg_0]
		dec	eax
		mov	[esp+0DCh+arg_0], eax
		test	eax, eax
		jle	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_60], eax
		call	_TLSv1_server_method
		mov	[esp+0DCh+var_A8], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42388A:				; CODE XREF: _s_server_main+274Dj
		mov	[esp+0DCh+var_D4], ebx
		mov	[esp+0DCh+var_D8], offset aNotAHexNumberS ; "Not a hex number '%s'\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		jmp	loc_42144A
; ---------------------------------------------------------------------------

loc_4238A8:				; CODE XREF: _s_server_main+2737j
		mov	ebx, ebp
		mov	edx, esi
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4238B1:				; CODE XREF: _s_server_main+2764j
		mov	[esp+0DCh+var_D8], offset aSrpuserseed ; "-srpuserseed"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42390C
		mov	eax, [esp+0DCh+arg_0]
		dec	eax
		mov	[esp+0DCh+arg_0], eax
		test	eax, eax
		jle	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_50], eax
		call	_TLSv1_server_method
		mov	[esp+0DCh+var_A8], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42390C:				; CODE XREF: _s_server_main+27E3j
		mov	[esp+0DCh+var_D8], offset aWww ; "-www"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423936
		mov	ds:_www, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423936:				; CODE XREF: _s_server_main+283Ej
		mov	[esp+0DCh+var_D8], offset aWww_0 ; "-WWW"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423960
		mov	ds:_www, 2
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423960:				; CODE XREF: _s_server_main+2868j
		mov	[esp+0DCh+var_D8], offset aHttp	; "-HTTP"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42398A
		mov	ds:_www, 3
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_42398A:				; CODE XREF: _s_server_main+2892j
		mov	[esp+0DCh+var_D8], offset aNo_ssl2 ; "-no_ssl2"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4239B2
		or	[esp+0DCh+var_A0], 1000000h
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4239B2:				; CODE XREF: _s_server_main+28BCj
		mov	[esp+0DCh+var_D8], offset aNo_ssl3 ; "-no_ssl3"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4239DA
		or	[esp+0DCh+var_A0], 2000000h
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_4239DA:				; CODE XREF: _s_server_main+28E4j
		mov	[esp+0DCh+var_D8], offset aNo_tls1 ; "-no_tls1"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423A02
		or	[esp+0DCh+var_A0], 4000000h
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423A02:				; CODE XREF: _s_server_main+290Cj
		mov	[esp+0DCh+var_D8], offset aNo_tls1_1 ; "-no_tls1_1"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423A2A
		or	[esp+0DCh+var_A0], 10000000h
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423A2A:				; CODE XREF: _s_server_main+2934j
		mov	[esp+0DCh+var_D8], offset aNo_tls1_2 ; "-no_tls1_2"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423A52
		or	[esp+0DCh+var_A0], 8000000h
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423A52:				; CODE XREF: _s_server_main+295Cj
		mov	[esp+0DCh+var_D8], offset aNo_comp ; "-no_comp"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423A7A
		or	[esp+0DCh+var_A0], 20000h
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423A7A:				; CODE XREF: _s_server_main+2984j
		mov	[esp+0DCh+var_D8], offset aNo_ticket ; "-no_ticket"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423AA2
		or	[esp+0DCh+var_A0], 4000h
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423AA2:				; CODE XREF: _s_server_main+29ACj
		mov	[esp+0DCh+var_D8], offset aSsl3	; "-ssl3"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jz	loc_423B44
		mov	[esp+0DCh+var_D8], offset aTls1	; "-tls1"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jz	loc_423BFC
		mov	[esp+0DCh+var_D8], offset aTls1_1 ; "-tls1_1"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jz	loc_423BE0
		mov	[esp+0DCh+var_D8], offset aTls1_2 ; "-tls1_2"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jz	loc_423C18
		mov	[esp+0DCh+var_D8], offset aDtls1 ; "-dtls1"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jz	loc_423BBC
		mov	[esp+0DCh+var_D8], offset aTimeout ; "-timeout"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423B60
		mov	ds:_enable_timeouts, 1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423B44:				; CODE XREF: _s_server_main+29D4j
		call	_SSLv3_server_method
		mov	[esp+0DCh+var_A8], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423B60:				; CODE XREF: _s_server_main+2A4Cj
		mov	[esp+0DCh+var_D8], offset aMtu ; "-mtu"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_423C34
		mov	eax, [esp+0DCh+arg_0]
		dec	eax
		mov	[esp+0DCh+arg_0], eax
		test	eax, eax
		jle	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_atol
		mov	ds:_socket_mtu,	eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423BBC:				; CODE XREF: _s_server_main+2A34j
		call	_DTLSv1_server_method
		mov	[esp+0DCh+var_A8], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		mov	[esp+0DCh+var_98], 2
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423BE0:				; CODE XREF: _s_server_main+2A04j
		call	_TLSv1_1_server_method
		mov	[esp+0DCh+var_A8], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423BFC:				; CODE XREF: _s_server_main+29ECj
		call	_TLSv1_server_method
		mov	[esp+0DCh+var_A8], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423C18:				; CODE XREF: _s_server_main+2A1Cj
		call	_TLSv1_2_server_method
		mov	[esp+0DCh+var_A8], eax
		mov	edx, [esp+0DCh+arg_0]
		mov	ebx, [esp+0DCh+arg_4]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423C34:				; CODE XREF: _s_server_main+2A92j
		mov	[esp+0DCh+var_D8], offset aChain ; "-chain"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423C5E
		mov	ds:_cert_chain,	1
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423C5E:				; CODE XREF: _s_server_main+2B66j
		mov	[esp+0DCh+var_D8], offset aId_prefix ; "-id_prefix"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423C9B
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	ds:_session_id_prefix, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423C9B:				; CODE XREF: _s_server_main+2B90j
		mov	[esp+0DCh+var_D8], offset aEngine_18 ; "-engine"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423CD8
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	ds:_engine_id, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423CD8:				; CODE XREF: _s_server_main+2BCDj
		mov	[esp+0DCh+var_D8], offset aRand_7 ; "-rand"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423D14
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_90], eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423D14:				; CODE XREF: _s_server_main+2C0Aj
		mov	[esp+0DCh+var_D8], offset aServername ;	"-servername"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423D53
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_28], eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423D53:				; CODE XREF: _s_server_main+2C46j
		mov	[esp+0DCh+var_D8], offset aServername_f_0 ; "-servername_fatal"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423D7E
		mov	[esp+0DCh+var_20], 2
		mov	edx, [esp+0DCh+arg_0]
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423D7E:				; CODE XREF: _s_server_main+2C85j
		mov	[esp+0DCh+var_D8], offset aCert2 ; "-cert2"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423DBB
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	_s_cert_file2, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423DBB:				; CODE XREF: _s_server_main+2CB0j
		mov	[esp+0DCh+var_D8], offset aKey2	; "-key2"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423DF8
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	ds:_s_key_file2, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423DF8:				; CODE XREF: _s_server_main+2CEDj
		mov	[esp+0DCh+var_D8], offset aNextprotoneg	; "-nextprotoneg"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423E34
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	[esp+0DCh+var_8C], eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423E34:				; CODE XREF: _s_server_main+2D2Aj
		mov	[esp+0DCh+var_D8], offset aUse_srtp ; "-use_srtp"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423E71
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	ds:_srtp_profiles, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423E71:				; CODE XREF: _s_server_main+2D66j
		mov	[esp+0DCh+var_D8], offset aKeymatexport	; "-keymatexport"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423EAE
		mov	eax, [esp+0DCh+arg_0]
		lea	edx, [eax-1]
		mov	[esp+0DCh+arg_0], edx
		test	edx, edx
		jle	loc_42144A
		mov	eax, [ebx+4]
		mov	ds:_keymatexportlabel, eax
		add	ebx, 4
		jmp	loc_4213E3
; ---------------------------------------------------------------------------

loc_423EAE:				; CODE XREF: _s_server_main+2DA3j
		mov	[esp+0DCh+var_D8], offset aKeymatexport_0 ; "-keymatexportlen"
		mov	dword ptr [esp+0DCh+hostshort],	esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_423F00
		mov	eax, [esp+0DCh+arg_0]
		dec	eax
		mov	[esp+0DCh+arg_0], eax
		test	eax, eax
		jle	loc_42144A
		lea	eax, [ebx+4]
		mov	[esp+0DCh+arg_4], eax
		mov	eax, [ebx+4]
		mov	dword ptr [esp+0DCh+hostshort],	eax ; char *
		call	_atoi
		mov	_keymatexportlen, eax
		test	eax, eax
		jnz	loc_4213D5
		jmp	loc_42144A
; ---------------------------------------------------------------------------

loc_423F00:				; CODE XREF: _s_server_main+2DE0j
		mov	[esp+0DCh+var_D4], esi
		mov	[esp+0DCh+var_D8], offset aUnknownOpti_14 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	dword ptr [esp+0DCh+hostshort],	eax
		call	_BIO_printf
		jmp	loc_42144A
_s_server_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ocsp_resp_cb	proc near		; DATA XREF: _s_client_main+1507o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_4]
		lea	esi, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 46h
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_SSL_ctrl
		mov	edi, eax
		mov	[esp+2Ch+var_28], offset aOcspResponse ; "OCSP response: "
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_puts
		mov	eax, [esp+2Ch+var_10]
		test	eax, eax
		jz	short loc_423FD0
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], 0
		call	_d2i_OCSP_RESPONSE
		mov	esi, eax
		test	eax, eax
		jz	short loc_423FF0
		mov	[esp+2Ch+var_28], offset asc_4657C0 ; "\n====================================="...
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_puts
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	_OCSP_RESPONSE_print
		mov	[esp+2Ch+var_28], offset asc_4657EC ; "======================================\"...
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_puts
		mov	[esp+2Ch+var_2C], esi
		call	_OCSP_RESPONSE_free
		mov	eax, 1

loc_423FC3:				; CODE XREF: _ocsp_resp_cb+FEj
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_423FD0:				; CODE XREF: _ocsp_resp_cb+46j
		mov	[esp+2Ch+var_28], offset aNoResponseSent ; "no response	sent\n"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_puts
		mov	eax, 1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_423FF0:				; CODE XREF: _ocsp_resp_cb+60j
		mov	[esp+2Ch+var_28], offset aResponseParseE ; "response parse error\n"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_puts
		mov	[esp+2Ch+var_20], 4
		mov	[esp+2Ch+var_24], edi
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_dump_indent
		xor	eax, eax
		jmp	short loc_423FC3
_ocsp_resp_cb	endp


; =============== S U B	R O U T	I N E =======================================


_ssl_srp_verify_param_cb proc near	; DATA XREF: _s_client_main:loc_4261A7o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_0]
		mov	edi, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_3C], esi
		call	_SSL_get_srp_N
		mov	ebx, eax
		test	eax, eax
		jz	loc_42413F
		mov	[esp+3Ch+var_3C], esi
		call	_SSL_get_srp_g
		mov	esi, eax
		test	eax, eax
		jz	loc_42413F
		mov	ebp, [edi+0Ch]
		test	ebp, ebp
		jnz	short loc_424070
		mov	ecx, [edi+8]
		test	ecx, ecx
		jnz	short loc_424070
		cmp	dword ptr [edi+10h], 1
		jnz	short loc_4240E6
		mov	esi, esi
		lea	edi, [edi+0]

loc_424070:				; CODE XREF: _ssl_srp_verify_param_cb+38j
					; _ssl_srp_verify_param_cb+3Fj
		mov	[esp+3Ch+var_38], offset aSrpParameters	; "SRP parameters:\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aN ; "\tN="
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], ebx
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BN_print
		mov	[esp+3Ch+var_38], offset aG ; "\n\tg="
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], esi
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BN_print
		mov	[esp+3Ch+var_38], offset asc_46582E ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf

loc_4240E6:				; CODE XREF: _ssl_srp_verify_param_cb+45j
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	_SRP_check_known_gN_param
		test	eax, eax
		jz	short loc_424110

loc_4240F6:				; CODE XREF: _ssl_srp_verify_param_cb+1A5j
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_424110:				; CODE XREF: _ssl_srp_verify_param_cb+D4j
		cmp	dword ptr [edi+10h], 1
		jnz	short loc_42412A
		mov	edx, [edi+0Ch]
		test	edx, edx
		jnz	short loc_424150

loc_42411D:				; CODE XREF: _ssl_srp_verify_param_cb+145j
		mov	[esp+3Ch+var_3C], esi
		call	_BN_num_bits
		cmp	eax, 40h
		jle	short loc_424170

loc_42412A:				; CODE XREF: _ssl_srp_verify_param_cb+F4j
					; _ssl_srp_verify_param_cb+19Fj
		mov	[esp+3Ch+var_38], offset aSrpParamNAndGR ; "SRP	param N	and g rejected.\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf

loc_42413F:				; CODE XREF: _ssl_srp_verify_param_cb+1Bj
					; _ssl_srp_verify_param_cb+2Dj
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_424150:				; CODE XREF: _ssl_srp_verify_param_cb+FBj
		mov	[esp+3Ch+var_38], offset aSrpParamNAndGA ; "SRP	param N	and g are not known params,"...
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		jmp	short loc_42411D
; ---------------------------------------------------------------------------
		align 10h

loc_424170:				; CODE XREF: _ssl_srp_verify_param_cb+108j
		call	_BN_CTX_new
		mov	edi, eax
		call	_BN_new
		mov	ebp, eax
		call	_BN_new
		mov	edx, eax
		test	edi, edi
		jz	short loc_424197
		mov	eax, [ebx+4]
		test	eax, eax
		jle	short loc_424197
		mov	eax, [ebx]
		test	byte ptr [eax],	1
		jnz	short loc_4241CA

loc_424197:				; CODE XREF: _ssl_srp_verify_param_cb+167j
					; _ssl_srp_verify_param_cb+16Ej ...
		xor	ebx, ebx
		test	edx, edx
		jz	short loc_4241A5

loc_42419D:				; CODE XREF: _ssl_srp_verify_param_cb+238j
					; _ssl_srp_verify_param_cb+26Cj
		mov	[esp+3Ch+var_3C], edx
		call	_BN_free

loc_4241A5:				; CODE XREF: _ssl_srp_verify_param_cb+17Bj
		test	ebp, ebp
		jz	short loc_4241B1

loc_4241A9:				; CODE XREF: _ssl_srp_verify_param_cb+273j
		mov	[esp+3Ch+var_3C], ebp
		call	_BN_free

loc_4241B1:				; CODE XREF: _ssl_srp_verify_param_cb+187j
		test	edi, edi
		jz	short loc_4241BD
		mov	[esp+3Ch+var_3C], edi
		call	_BN_CTX_free

loc_4241BD:				; CODE XREF: _ssl_srp_verify_param_cb+193j
		test	ebx, ebx
		jz	loc_42412A
		jmp	loc_4240F6
; ---------------------------------------------------------------------------

loc_4241CA:				; CODE XREF: _ssl_srp_verify_param_cb+175j
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], 40h
		mov	[esp+3Ch+var_3C], ebx
		call	_BN_is_prime_ex
		test	eax, eax
		mov	edx, [esp+3Ch+var_20]
		jz	short loc_424197
		test	ebp, ebp
		jz	short loc_424197
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], ebp
		call	_BN_rshift1
		test	eax, eax
		mov	edx, [esp+3Ch+var_20]
		jz	short loc_424197
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], 40h
		mov	[esp+3Ch+var_3C], ebp
		call	_BN_is_prime_ex
		test	eax, eax
		mov	edx, [esp+3Ch+var_20]
		jz	loc_424197
		test	edx, edx
		jz	short loc_424291
		mov	[esp+3Ch+var_2C], edi
		mov	[esp+3Ch+var_30], ebx
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], edx
		call	_BN_mod_exp
		test	eax, eax
		mov	edx, [esp+3Ch+var_20]
		jnz	short loc_42425D

loc_424256:				; CODE XREF: _ssl_srp_verify_param_cb+253j
		xor	ebx, ebx
		jmp	loc_42419D
; ---------------------------------------------------------------------------

loc_42425D:				; CODE XREF: _ssl_srp_verify_param_cb+234j
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], edx
		call	_BN_add_word
		test	eax, eax
		mov	edx, [esp+3Ch+var_20]
		jz	short loc_424256
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], edx
		call	_BN_cmp
		xor	ebx, ebx
		test	eax, eax
		setz	bl
		mov	edx, [esp+3Ch+var_20]
		jmp	loc_42419D
; ---------------------------------------------------------------------------

loc_424291:				; CODE XREF: _ssl_srp_verify_param_cb+214j
		xor	ebx, ebx
		jmp	loc_4241A9
_ssl_srp_verify_param_cb endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_next_proto_cb_0 proc near		; DATA XREF: _s_client_main+1087o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, [esp+3Ch+arg_C]
		mov	ebp, [esp+3Ch+arg_14]
		mov	edx, ds:_c_quiet
		test	edx, edx
		jz	short loc_424300

loc_4242B9:				; CODE XREF: _next_proto_cb_0+FDj
		mov	eax, [ebp+0]
		xor	edx, edx
		mov	dx, [ebp+4]
		mov	[esp+3Ch+var_28], edx
		mov	[esp+3Ch+var_2C], eax
		mov	eax, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], esi
		mov	eax, [esp+3Ch+arg_8]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_3C], eax
		call	_SSL_select_next_proto
		mov	[ebp+8], eax
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_424300:				; CODE XREF: _next_proto_cb_0+17j
		mov	[esp+3Ch+var_38], offset aProtocolsAdver ; "Protocols advertised by server: "
		mov	eax, ds:_bio_c_out
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		xor	ebx, ebx
		mov	eax, [esp+3Ch+arg_10]
		test	eax, eax
		jz	short loc_424380
		nop

loc_424320:				; CODE XREF: _next_proto_cb_0+B0j
					; _next_proto_cb_0+CFj
		lea	edi, [esi+ebx]
		xor	eax, eax
		mov	al, [edi]
		mov	[esp+3Ch+var_34], eax
		lea	eax, [esi+ebx+1]
		mov	[esp+3Ch+var_38], eax
		mov	eax, ds:_bio_c_out
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_write
		xor	eax, eax
		mov	al, [edi]
		lea	ebx, [ebx+eax+1]
		cmp	[esp+3Ch+arg_10], ebx
		jbe	short loc_424380
		test	ebx, ebx
		jz	short loc_424320
		mov	[esp+3Ch+var_34], 2
		mov	[esp+3Ch+var_38], offset asc_4658B1 ; ", "
		mov	eax, ds:_bio_c_out
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_write
		jmp	short loc_424320
; ---------------------------------------------------------------------------
		jmp	short loc_424380
; ---------------------------------------------------------------------------
		align 10h

loc_424380:				; CODE XREF: _next_proto_cb_0+7Dj
					; _next_proto_cb_0+ACj	...
		mov	[esp+3Ch+var_34], 1
		mov	[esp+3Ch+var_38], offset asc_46582E ; "\n"
		mov	eax, ds:_bio_c_out
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_write
		jmp	loc_4242B9
_next_proto_cb_0 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_psk_client_cb	proc near		; DATA XREF: _s_client_main:loc_425F9Eo

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_8]
		mov	ebx, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_10], 0
		mov	ecx, ds:_c_debug
		test	ecx, ecx
		jnz	loc_4244D0

loc_4243D3:				; CODE XREF: _psk_client_cb+144j
					; _psk_client_cb+167j ...
		mov	eax, _psk_identity
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], offset aS_9 ;	"%s"
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_snprintf
		test	eax, eax
		js	loc_424490
		cmp	ebx, eax
		jb	loc_424490
		mov	ecx, ds:_c_debug
		test	ecx, ecx
		jnz	loc_424590

loc_42440E:				; CODE XREF: _psk_client_cb+1FDj
		mov	eax, ds:_psk_key
		mov	[esp+2Ch+var_28], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_hex2bn
		test	eax, eax
		jz	loc_424520
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_num_bits
		mov	edx, eax
		add	edx, 7
		js	loc_424630

loc_424442:				; CODE XREF: _psk_client_cb+283j
		sar	edx, 3
		cmp	edx, [esp+2Ch+arg_14]
		ja	loc_4245C0
		mov	eax, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_bn2bin
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_free
		test	ebx, ebx
		jz	short loc_424490
		mov	edx, ds:_c_debug
		test	edx, edx
		jnz	loc_424610
		mov	eax, ebx
		jmp	short loc_42449B
; ---------------------------------------------------------------------------
		align 10h

loc_424490:				; CODE XREF: _psk_client_cb+42j
					; _psk_client_cb+4Aj ...
		mov	eax, ds:_c_debug
		test	eax, eax
		jnz	short loc_4244B0

loc_424499:				; CODE XREF: _psk_client_cb+194j
					; _psk_client_cb+1A2j
		xor	eax, eax

loc_42449B:				; CODE XREF: _psk_client_cb+D5j
					; _psk_client_cb+256j ...
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_4244B0
; ---------------------------------------------------------------------------
		align 10h

loc_4244B0:				; CODE XREF: _psk_client_cb+E7j
					; _psk_client_cb+F1j
		mov	[esp+2Ch+var_28], offset aErrorInPskClie ; "Error in PSK client	callback\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	eax, eax
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4244D0:				; CODE XREF: _psk_client_cb+1Dj
		mov	[esp+2Ch+var_28], offset aPsk_client_cb	; "psk_client_cb\n"
		mov	eax, ds:_bio_c_out
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, ds:_c_debug
		mov	edx, [esp+2Ch+arg_4]
		test	edx, edx
		jz	short loc_424560
		test	eax, eax
		jz	loc_4243D3
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aReceivedPskIde ; "Received PSK identity hint '%s'\n"
		mov	eax, ds:_bio_c_out
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	loc_4243D3
; ---------------------------------------------------------------------------
		align 10h

loc_424520:				; CODE XREF: _psk_client_cb+75j
		mov	eax, ds:_psk_key
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aCouldNotConv_0 ; "Could not convert PSK key '%s' to BIGNU"...
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+var_10]
		test	eax, eax
		jz	loc_424499
		mov	[esp+2Ch+var_2C], eax
		call	_BN_free
		jmp	loc_424499
; ---------------------------------------------------------------------------
		align 10h

loc_424560:				; CODE XREF: _psk_client_cb+140j
		test	eax, eax
		jz	loc_4243D3
		mov	[esp+2Ch+var_28], offset aNullReceivedPs ; "NULL received PSK identity hint, contin"...
		mov	eax, ds:_bio_c_out
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	loc_4243D3
; ---------------------------------------------------------------------------
		align 10h

loc_424590:				; CODE XREF: _psk_client_cb+58j
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aCreatedIdentit ; "created identity '%s' len=%d\n"
		mov	eax, ds:_bio_c_out
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	loc_42440E
; ---------------------------------------------------------------------------
		align 10h

loc_4245C0:				; CODE XREF: _psk_client_cb+99j
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_num_bits
		mov	ecx, ds:_bio_err
		mov	edx, eax
		add	edx, 7
		js	short loc_424640

loc_4245D9:				; CODE XREF: _psk_client_cb+293j
		sar	edx, 3
		mov	[esp+2Ch+var_20], edx
		mov	eax, [esp+2Ch+arg_14]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aPskBufferOfC_0 ; "psk	buffer of callback is too small	(%d"...
		mov	[esp+2Ch+var_2C], ecx
		call	_BIO_printf
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_2C], eax
		call	_BN_free
		xor	eax, eax
		jmp	loc_42449B
; ---------------------------------------------------------------------------
		align 10h

loc_424610:				; CODE XREF: _psk_client_cb+CDj
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset aCreatedPskLenD ; "created PSK	len=%d\n"
		mov	eax, ds:_bio_c_out
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, ebx
		jmp	loc_42449B
; ---------------------------------------------------------------------------

loc_424630:				; CODE XREF: _psk_client_cb+8Cj
		lea	edx, [eax+0Eh]
		jmp	loc_424442
; ---------------------------------------------------------------------------
		align 10h

loc_424640:				; CODE XREF: _psk_client_cb+227j
		lea	edx, [eax+0Eh]
		jmp	short loc_4245D9
_psk_client_cb	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_print_stuff	proc near		; CODE XREF: _s_client_main+1695p
					; _s_client_main+18FEp	...

var_25C		= dword	ptr -25Ch
var_258		= dword	ptr -258h
var_254		= dword	ptr -254h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= byte ptr -21Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 24Ch
		mov	ebx, eax
		mov	[esp+25Ch+var_234], edx
		test	ecx, ecx
		jnz	loc_4249B0
		xor	ebp, ebp

loc_42466A:				; CODE XREF: _print_stuff+702j
		mov	eax, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_cache_hit
		test	eax, eax
		jz	loc_424980
		mov	eax, offset aReused_0 ;	"---\nReused, "

loc_424683:				; CODE XREF: _print_stuff+335j
		mov	[esp+25Ch+var_258], eax
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	eax, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_get_current_cipher
		mov	esi, eax
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_CIPHER_get_name
		mov	edi, eax
		mov	[esp+25Ch+var_25C], esi
		call	_SSL_CIPHER_get_version
		mov	[esp+25Ch+var_250], edi
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset aSCipherIsS_0 ; "%s,	Cipher is %s\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		test	ebp, ebp
		jz	short loc_4246F9
		mov	[esp+25Ch+var_25C], ebp
		call	_X509_get_pubkey
		mov	esi, eax
		mov	[esp+25Ch+var_25C], eax
		call	_EVP_PKEY_bits
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset aServerPublicKe ; "Server public key	is %d bit\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	[esp+25Ch+var_25C], esi
		call	_EVP_PKEY_free

loc_4246F9:				; CODE XREF: _print_stuff+79j
		mov	[esp+25Ch+var_250], 0
		mov	[esp+25Ch+var_254], 0
		mov	[esp+25Ch+var_258], 4Ch
		mov	eax, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_ctrl
		test	eax, eax
		jz	loc_424970
		mov	eax, offset byte_4659EA

loc_42472A:				; CODE XREF: _print_stuff+325j
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset aSecureRenego_0 ; "Secure Renegotiation IS%s	supported\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	esi, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], esi
		call	_SSL_get_current_compression
		mov	edi, eax
		mov	[esp+25Ch+var_25C], esi
		call	_SSL_get_current_expansion
		mov	esi, eax
		test	edi, edi
		jz	loc_4249A0
		mov	[esp+25Ch+var_25C], edi
		call	_SSL_COMP_get_name

loc_424766:				; CODE XREF: _print_stuff+355j
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset aCompressionS ; "Compression: %s\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		test	esi, esi
		jz	loc_424990
		mov	[esp+25Ch+var_25C], esi
		call	_SSL_COMP_get_name

loc_42478A:				; CODE XREF: _print_stuff+345j
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset aExpansionS ; "Expansion: %s\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		cmp	ds:dword_47340C, 0FFFFFFFFh
		jz	short loc_42480C
		lea	eax, [esp+25Ch+var_220]
		mov	[esp+25Ch+var_254], eax
		lea	eax, [esp+25Ch+var_224]
		mov	[esp+25Ch+var_258], eax
		mov	eax, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_get0_next_proto_negotiated
		mov	eax, ds:dword_47340C
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset aNextProtocolD ; "Next protocol: (%d) "
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	eax, [esp+25Ch+var_220]
		mov	[esp+25Ch+var_254], eax
		mov	eax, [esp+25Ch+var_224]
		mov	[esp+25Ch+var_258], eax
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_write
		mov	[esp+25Ch+var_254], 1
		mov	[esp+25Ch+var_258], offset asc_46582E ;	"\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_write

loc_42480C:				; CODE XREF: _print_stuff+155j
		mov	eax, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_get_selected_srtp_profile
		test	eax, eax
		jz	short loc_424832
		mov	eax, [eax]
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset aSrtpExtensio_0 ; "SRTP Extension negotiated, profile=%s\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf

loc_424832:				; CODE XREF: _print_stuff+1CAj
		mov	eax, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_get_session
		mov	[esp+25Ch+var_258], eax
		mov	[esp+25Ch+var_25C], ebx
		call	_SSL_SESSION_print
		mov	edx, ds:_keymatexportlabel_0
		test	edx, edx
		jz	loc_424924
		mov	[esp+25Ch+var_258], offset aKeyingMateri_1 ; "Keying material exporter:\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	eax, ds:_keymatexportlabel_0
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset aLabelS_0 ; "    Label: '%s'\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	eax, _keymatexportlen_0
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset aLengthIBytes_0 ; "	  Length: %i bytes\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	[esp+25Ch+var_254], 813h
		mov	[esp+25Ch+var_258], offset aS_client_c ; "s_client.c"
		mov	eax, _keymatexportlen_0
		mov	[esp+25Ch+var_25C], eax
		call	_CRYPTO_malloc
		mov	esi, eax
		test	eax, eax
		jz	short loc_424924
		mov	edi, ds:_keymatexportlabel_0
		mov	[esp+25Ch+var_25C], edi	; char *
		call	_strlen
		mov	[esp+25Ch+var_240], 0
		mov	[esp+25Ch+var_244], 0
		mov	[esp+25Ch+var_248], 0
		mov	[esp+25Ch+var_24C], eax
		mov	[esp+25Ch+var_250], edi
		mov	eax, _keymatexportlen_0
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], esi
		mov	eax, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_export_keying_material
		test	eax, eax
		jnz	loc_424D80
		mov	[esp+25Ch+var_258], offset aError_2 ; "	   Error\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf

loc_42491C:				; CODE XREF: _print_stuff+782j
		mov	[esp+25Ch+var_25C], esi
		call	_CRYPTO_free

loc_424924:				; CODE XREF: _print_stuff+202j
					; _print_stuff+26Bj
		mov	[esp+25Ch+var_258], offset asc_465A1F ;	"---\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		test	ebp, ebp
		jz	short loc_424940
		mov	[esp+25Ch+var_25C], ebp
		call	_X509_free

loc_424940:				; CODE XREF: _print_stuff+2E6j
		mov	[esp+25Ch+var_250], 0
		mov	[esp+25Ch+var_254], 0
		mov	[esp+25Ch+var_258], 0Bh
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_ctrl
		add	esp, 24Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_424970:				; CODE XREF: _print_stuff+CFj
		mov	eax, offset aNot_0 ; " NOT"
		jmp	loc_42472A
; ---------------------------------------------------------------------------
		align 10h

loc_424980:				; CODE XREF: _print_stuff+28j
		mov	eax, offset aNew_1 ; "---\nNew,	"
		jmp	loc_424683
; ---------------------------------------------------------------------------
		align 10h

loc_424990:				; CODE XREF: _print_stuff+12Cj
		mov	eax, offset aNone_5 ; "NONE"
		jmp	loc_42478A
; ---------------------------------------------------------------------------
		align 10h

loc_4249A0:				; CODE XREF: _print_stuff+108j
		mov	eax, offset aNone_5 ; "NONE"
		jmp	loc_424766
; ---------------------------------------------------------------------------
		align 10h

loc_4249B0:				; CODE XREF: _print_stuff+12j
		mov	[esp+25Ch+var_25C], edx
		call	_SSL_get_peer_cert_chain
		mov	ebp, eax
		test	eax, eax
		jz	loc_424E10
		mov	[esp+25Ch+var_258], offset aCertificateCha ; "---\nCertificate chain\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		xor	edi, edi
		lea	esi, [esp+25Ch+var_21C]
		mov	[esp+25Ch+var_25C], ebp
		call	_sk_num
		cmp	edi, eax
		jge	loc_424A8A
		nop
		lea	esi, [esi+0]

loc_4249F0:				; CODE XREF: _print_stuff+434j
		mov	[esp+25Ch+var_258], edi
		mov	[esp+25Ch+var_25C], ebp
		call	_sk_value
		mov	[esp+25Ch+var_25C], eax
		call	_X509_get_subject_name
		mov	[esp+25Ch+var_254], 200h
		mov	[esp+25Ch+var_258], esi
		mov	[esp+25Ch+var_25C], eax
		call	_X509_NAME_oneline
		mov	[esp+25Ch+var_250], esi
		mov	[esp+25Ch+var_254], edi
		mov	[esp+25Ch+var_258], offset a2dSS ; "%2d	s:%s\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	[esp+25Ch+var_258], edi
		mov	[esp+25Ch+var_25C], ebp
		call	_sk_value
		mov	[esp+25Ch+var_25C], eax
		call	_X509_get_issuer_name
		mov	[esp+25Ch+var_254], 200h
		mov	[esp+25Ch+var_258], esi
		mov	[esp+25Ch+var_25C], eax
		call	_X509_NAME_oneline
		mov	[esp+25Ch+var_254], esi
		mov	[esp+25Ch+var_258], offset aIS ; "   i:%s\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	eax, ds:_c_showcerts
		test	eax, eax
		jnz	loc_424D60
		inc	edi

loc_424A7A:				; CODE XREF: _print_stuff+729j
		mov	[esp+25Ch+var_25C], ebp
		call	_sk_num
		cmp	edi, eax
		jl	loc_4249F0

loc_424A8A:				; CODE XREF: _print_stuff+392j
		mov	edi, 1

loc_424A8F:				; CODE XREF: _print_stuff+7C6j
		mov	[esp+25Ch+var_258], offset asc_465A1F ;	"---\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	eax, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_get_peer_certificate
		mov	ebp, eax
		test	eax, eax
		jz	loc_424E20
		mov	[esp+25Ch+var_258], offset aServerCertif_1 ; "Server certificate\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	ecx, ds:_c_showcerts
		test	ecx, ecx
		jz	short loc_424AD3
		test	edi, edi
		jnz	short loc_424ADF

loc_424AD3:				; CODE XREF: _print_stuff+47Dj
		mov	[esp+25Ch+var_258], ebp
		mov	[esp+25Ch+var_25C], ebx
		call	_PEM_write_bio_X509

loc_424ADF:				; CODE XREF: _print_stuff+481j
		mov	[esp+25Ch+var_25C], ebp
		call	_X509_get_subject_name
		mov	[esp+25Ch+var_254], 200h
		mov	[esp+25Ch+var_258], esi
		mov	[esp+25Ch+var_25C], eax
		call	_X509_NAME_oneline
		mov	[esp+25Ch+var_254], esi
		mov	[esp+25Ch+var_258], offset aSubjectS_1 ; "subject=%s\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	[esp+25Ch+var_25C], ebp
		call	_X509_get_issuer_name
		mov	[esp+25Ch+var_254], 200h
		mov	[esp+25Ch+var_258], esi
		mov	[esp+25Ch+var_25C], eax
		call	_X509_NAME_oneline
		mov	[esp+25Ch+var_254], esi
		mov	[esp+25Ch+var_258], offset aIssuerS_1 ;	"issuer=%s\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf

loc_424B3F:				; CODE XREF: _print_stuff+7E0j
		mov	eax, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_get_client_CA_list
		mov	edi, eax
		test	eax, eax
		jz	loc_424DF0
		mov	[esp+25Ch+var_25C], eax
		call	_sk_num
		test	eax, eax
		jle	loc_424DF0
		mov	[esp+25Ch+var_258], offset aAcceptableClie ; "---\nAcceptable client certificate CA n"...
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		xor	eax, eax
		mov	[esp+25Ch+var_230], ebp
		mov	ebp, eax
		mov	[esp+25Ch+var_25C], edi
		call	_sk_num
		cmp	ebp, eax
		jge	loc_424C15
		lea	esi, [esi+0]

loc_424B90:				; CODE XREF: _print_stuff+5BFj
		mov	[esp+25Ch+var_258], ebp
		mov	[esp+25Ch+var_25C], edi
		call	_sk_value
		mov	[esp+25Ch+var_254], 200h
		mov	[esp+25Ch+var_258], esi
		mov	[esp+25Ch+var_25C], eax
		call	_X509_NAME_oneline
		mov	edx, esi

loc_424BB2:				; CODE XREF: _print_stuff+576j
		mov	ecx, [edx]
		add	edx, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_424BB2
		test	eax, 8080h
		jnz	short loc_424BD5
		shr	eax, 10h
		add	edx, 2

loc_424BD5:				; CODE XREF: _print_stuff+57Dj
		add	al, al
		sbb	edx, 3
		sub	edx, esi
		mov	[esp+25Ch+var_254], edx
		mov	[esp+25Ch+var_258], esi
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_write
		mov	[esp+25Ch+var_254], 1
		mov	[esp+25Ch+var_258], offset asc_46582E ;	"\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_write
		inc	ebp
		mov	[esp+25Ch+var_25C], edi
		call	_sk_num
		cmp	ebp, eax
		jl	loc_424B90

loc_424C15:				; CODE XREF: _print_stuff+537j
		mov	ebp, [esp+25Ch+var_230]

loc_424C19:				; CODE XREF: _print_stuff+7B0j
		mov	[esp+25Ch+var_254], 200h
		mov	[esp+25Ch+var_258], esi
		mov	eax, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], eax
		call	_SSL_get_shared_ciphers
		mov	esi, eax
		test	eax, eax
		jz	loc_424D14
		mov	[esp+25Ch+var_258], offset aCiphersCommo_0 ; "---\nCiphers common between both SSL en"...
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		mov	al, [esi]
		test	al, al
		jz	loc_424CFC
		xor	edi, edi
		mov	[esp+25Ch+var_230], ebp
		mov	ebp, edi
		jmp	short loc_424C7C
; ---------------------------------------------------------------------------
		align 10h

loc_424C60:				; CODE XREF: _print_stuff+62Ej
		mov	[esp+25Ch+var_254], 1
		mov	[esp+25Ch+var_258], esi
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_write
		inc	ebp
		inc	esi
		mov	al, [esi]
		test	al, al
		jz	short loc_424CF8

loc_424C7C:				; CODE XREF: _print_stuff+60Dj
					; _print_stuff+6A6j
		cmp	al, 3Ah
		jnz	short loc_424C60
		mov	eax, 51EB851Fh
		imul	ebp
		mov	eax, edx
		sar	eax, 3
		mov	edx, ebp
		sar	edx, 1Fh
		sub	eax, edx
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		mov	ecx, ebp
		sub	ecx, eax
		mov	eax, 0Fh
		sub	eax, ecx
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset asc_465AF8 ;	"		 "
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_write
		inc	edi
		mov	edx, 55555556h
		mov	eax, edi
		imul	edx
		mov	eax, edi
		sar	eax, 1Fh
		sub	edx, eax
		lea	eax, [edx+edx]
		add	edx, eax
		cmp	edi, edx
		jz	loc_424DE0
		mov	eax, offset asc_4659D1 ; " "

loc_424CDB:				; CODE XREF: _print_stuff+795j
		mov	[esp+25Ch+var_254], 1
		mov	[esp+25Ch+var_258], eax
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_write
		xor	ebp, ebp
		inc	esi
		mov	al, [esi]
		test	al, al
		jnz	short loc_424C7C

loc_424CF8:				; CODE XREF: _print_stuff+62Aj
		mov	ebp, [esp+25Ch+var_230]

loc_424CFC:				; CODE XREF: _print_stuff+5FFj
		mov	[esp+25Ch+var_254], 1
		mov	[esp+25Ch+var_258], offset asc_46582E ;	"\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_write

loc_424D14:				; CODE XREF: _print_stuff+5E5j
		mov	edi, [esp+25Ch+var_234]
		mov	[esp+25Ch+var_25C], edi
		call	_SSL_get_wbio
		mov	[esp+25Ch+var_25C], eax
		call	_BIO_number_written
		mov	esi, eax
		mov	[esp+25Ch+var_25C], edi
		call	_SSL_get_rbio
		mov	[esp+25Ch+var_25C], eax
		call	_BIO_number_read
		mov	[esp+25Ch+var_250], esi
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset aSslHandshakeHa ; "---\nSSL handshake has read %ld bytes a"...
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		jmp	loc_42466A
; ---------------------------------------------------------------------------
		align 10h

loc_424D60:				; CODE XREF: _print_stuff+423j
		mov	[esp+25Ch+var_258], edi
		mov	[esp+25Ch+var_25C], ebp
		call	_sk_value
		mov	[esp+25Ch+var_258], eax
		mov	[esp+25Ch+var_25C], ebx
		call	_PEM_write_bio_X509
		inc	edi
		jmp	loc_424A7A
; ---------------------------------------------------------------------------
		align 10h

loc_424D80:				; CODE XREF: _print_stuff+2B6j
		mov	[esp+25Ch+var_258], offset aKeyingMateri_2 ; "	  Keying material: "
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		xor	edi, edi
		mov	eax, _keymatexportlen_0
		test	eax, eax
		jle	short loc_424DC2
		nop
		lea	esi, [esi+0]

loc_424DA0:				; CODE XREF: _print_stuff+770j
		xor	eax, eax
		mov	al, [esi+edi]
		mov	[esp+25Ch+var_254], eax
		mov	[esp+25Ch+var_258], offset a02x_3 ; "%02X"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		inc	edi
		cmp	_keymatexportlen_0, edi
		jg	short loc_424DA0

loc_424DC2:				; CODE XREF: _print_stuff+749j
		mov	[esp+25Ch+var_258], offset asc_46582E ;	"\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		jmp	loc_42491C
; ---------------------------------------------------------------------------
		align 10h

loc_424DE0:				; CODE XREF: _print_stuff+680j
		mov	eax, offset asc_46582E ; "\n"
		jmp	loc_424CDB
; ---------------------------------------------------------------------------
		align 10h

loc_424DF0:				; CODE XREF: _print_stuff+4FFj
					; _print_stuff+50Fj
		mov	[esp+25Ch+var_258], offset aNoClientCert_0 ; "---\nNo client certificate CA names sen"...
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		jmp	loc_424C19
; ---------------------------------------------------------------------------
		align 10h

loc_424E10:				; CODE XREF: _print_stuff+36Cj
		xor	edi, edi
		lea	esi, [esp+25Ch+var_21C]
		jmp	loc_424A8F
; ---------------------------------------------------------------------------
		align 10h

loc_424E20:				; CODE XREF: _print_stuff+45Fj
		mov	[esp+25Ch+var_258], offset aNoPeerCertific ; "no peer certificate available\n"
		mov	[esp+25Ch+var_25C], ebx
		call	_BIO_printf
		jmp	loc_424B3F
_print_stuff	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ssl_give_srp_client_pwd_cb proc near	; DATA XREF: _s_client_main+11DAo

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 28h
		mov	[esp+2Ch+var_24], 224h
		mov	[esp+2Ch+var_28], offset aS_client_c ; "s_client.c"
		mov	[esp+2Ch+var_2C], 401h
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_424EB0
		mov	eax, [esp+2Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+2Ch+var_14], eax
		mov	[esp+2Ch+var_10], offset aSrpUser ; "SRP user"
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], eax ;	int
		mov	[esp+2Ch+var_24], 0 ; int
		mov	[esp+2Ch+var_28], 400h ; int
		mov	[esp+2Ch+var_2C], ebx ;	char *
		call	_password_callback
		test	eax, eax
		js	short loc_424ED0
		mov	byte ptr [ebx+eax], 0
		mov	eax, ebx

loc_424EA2:				; CODE XREF: _ssl_give_srp_client_pwd_cb+87j
					; _ssl_give_srp_client_pwd_cb+AFj
		add	esp, 28h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_424EB0:				; CODE XREF: _ssl_give_srp_client_pwd_cb+24j
		mov	[esp+2Ch+var_28], offset aMallocFailur_0 ; "Malloc failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	short loc_424EA2
; ---------------------------------------------------------------------------
		align 10h

loc_424ED0:				; CODE XREF: _ssl_give_srp_client_pwd_cb+5Aj
		mov	[esp+2Ch+var_28], offset aCanTReadPasswo ; "Can't read Password\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	[esp+2Ch+var_2C], ebx
		call	_CRYPTO_free
		xor	eax, eax
		jmp	short loc_424EA2
_ssl_give_srp_client_pwd_cb endp

; ---------------------------------------------------------------------------
		jmp	short _ssl_servername_cb_0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ssl_servername_cb_0 proc near		; CODE XREF: .text:00424EF1j
					; DATA XREF: _s_client_main+114Co

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_8		= dword	ptr  0Ch

		push	esi
		push	ebx
		sub	esp, 14h
		mov	ebx, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_get_servername
		mov	esi, eax
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_get_servername_type
		inc	eax
		jz	short loc_424F70
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 8
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_ctrl
		test	eax, eax
		jz	short loc_424F60
		xor	edx, edx

loc_424F4C:				; CODE XREF: _ssl_servername_cb_0+67j
		mov	eax, [esp+1Ch+arg_8]
		mov	[eax+4], edx
		xor	eax, eax
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_424F60:				; CODE XREF: _ssl_servername_cb_0+48j
		xor	edx, edx
		test	esi, esi
		setnz	dl
		jmp	short loc_424F4C
; ---------------------------------------------------------------------------
		align 10h

loc_424F70:				; CODE XREF: _ssl_servername_cb_0+24j
		mov	[esp+1Ch+var_18], offset aCanTUseSsl_get ; "Can't use SSL_get_servername\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		xor	eax, eax
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
_ssl_servername_cb_0 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _s_client_main
_s_client_main	proc near		; DATA XREF: .data:0045513Co

var_31C		= dword	ptr -31Ch
var_318		= dword	ptr -318h
var_314		= dword	ptr -314h
var_310		= dword	ptr -310h
var_30C		= dword	ptr -30Ch
var_308		= dword	ptr -308h
var_304		= dword	ptr -304h
var_300		= dword	ptr -300h
var_2FC		= dword	ptr -2FCh
var_2F8		= dword	ptr -2F8h
var_2F4		= dword	ptr -2F4h
var_2F0		= dword	ptr -2F0h
var_2EC		= dword	ptr -2ECh
var_2E8		= dword	ptr -2E8h
nfds		= dword	ptr -2E4h
var_2E0		= dword	ptr -2E0h
var_2DC		= dword	ptr -2DCh
var_2D8		= dword	ptr -2D8h
var_2D4		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
nNumberOfBytesToWrite= dword ptr -2CCh
var_2C8		= dword	ptr -2C8h
var_2C4		= dword	ptr -2C4h
var_2C0		= dword	ptr -2C0h
var_2BC		= dword	ptr -2BCh
var_2B8		= dword	ptr -2B8h
var_2B4		= dword	ptr -2B4h
var_2B0		= dword	ptr -2B0h
var_2AC		= dword	ptr -2ACh
var_2A8		= dword	ptr -2A8h
var_2A4		= dword	ptr -2A4h
var_2A0		= dword	ptr -2A0h
var_29C		= dword	ptr -29Ch
lpBuffer	= dword	ptr -298h
var_294		= dword	ptr -294h
var_290		= dword	ptr -290h
var_28C		= dword	ptr -28Ch
var_280		= dword	ptr -280h
s		= dword	ptr -27Ch
var_278		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
namelen		= dword	ptr -268h
var_264		= dword	ptr -264h
var_260		= dword	ptr -260h
var_25C		= dword	ptr -25Ch
timeout		= timeval ptr -258h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
name		= sockaddr ptr -248h
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
readfds		= fd_set ptr -220h
writefds	= fd_set ptr -11Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 32Ch
		mov	word ptr [ebp+var_280],	1151h
		mov	[ebp+var_278], offset aLocalhost ; "localhost"
		mov	[ebp+var_274], 0
		mov	[ebp+var_270], 0
		mov	[ebp+var_26C], 0
		mov	[ebp+var_250], 0
		mov	[ebp+var_24C], 0
		mov	[ebp+namelen], 10h
		mov	[ebp+var_238], 0
		mov	[ebp+var_234], 0
		mov	[ebp+var_230], 0
		mov	[ebp+var_22C], 0
		mov	[ebp+var_228], 0
		mov	[ebp+var_224], 400h
		call	_SSLv23_client_method
		mov	[ebp+var_29C], eax
		mov	ds:_c_Pause, 0
		mov	ds:_c_quiet, 0
		mov	ds:_c_ign_eof, 0
		mov	ds:_c_debug, 0
		mov	ds:_c_msg, 0
		mov	ds:_c_showcerts, 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_425BA0

loc_42507B:				; CODE XREF: _s_client_main+C2Dj
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	_load_config
		test	eax, eax
		jnz	loc_4251C0
		xor	esi, esi
		xor	edi, edi
		xor	ebx, ebx
		mov	[ebp+var_294], 0
		mov	[ebp+var_290], 0
		mov	[ebp+lpBuffer],	0

loc_4250B7:				; CODE XREF: _s_client_main+4DFj
					; _s_client_main+AFDj ...
		mov	[ebp+var_28C], 1

loc_4250C1:				; CODE XREF: _s_client_main+1952j
					; _s_client_main+1974j
		mov	eax, ds:_next_proto
		test	eax, eax
		jz	short loc_4250D2
		mov	[esp], eax
		call	_CRYPTO_free

loc_4250D2:				; CODE XREF: _s_client_main+138j
		test	esi, esi
		jz	short loc_4250DE
		mov	[esp], esi
		call	_SSL_CTX_free

loc_4250DE:				; CODE XREF: _s_client_main+144j
		test	ebx, ebx
		jz	short loc_4250EA
		mov	[esp], ebx
		call	_X509_free

loc_4250EA:				; CODE XREF: _s_client_main+150j
		test	edi, edi
		jz	short loc_4250F6
		mov	[esp], edi
		call	_EVP_PKEY_free

loc_4250F6:				; CODE XREF: _s_client_main+15Cj
		mov	eax, [ebp+var_274]
		test	eax, eax
		jz	short loc_425108
		mov	[esp], eax
		call	_CRYPTO_free

loc_425108:				; CODE XREF: _s_client_main+16Ej
		mov	eax, [ebp+var_238]
		mov	[esp], eax
		call	_CRYPTO_free
		mov	eax, [ebp+var_270]
		test	eax, eax
		jz	short loc_425128
		mov	[esp], eax
		call	_X509_VERIFY_PARAM_free

loc_425128:				; CODE XREF: _s_client_main+18Ej
		mov	edi, [ebp+lpBuffer]
		test	edi, edi
		jz	short loc_42514A
		mov	dword ptr [esp+4], 2000h
		mov	[esp], edi
		call	_OPENSSL_cleanse
		mov	[esp], edi
		call	_CRYPTO_free

loc_42514A:				; CODE XREF: _s_client_main+1A0j
		mov	edi, [ebp+var_290]
		test	edi, edi
		jz	short loc_42516C
		mov	dword ptr [esp+4], 2000h
		mov	[esp], edi
		call	_OPENSSL_cleanse
		mov	[esp], edi
		call	_CRYPTO_free

loc_42516C:				; CODE XREF: _s_client_main+1C2j
		mov	edi, [ebp+var_294]
		test	edi, edi
		jz	short loc_42518E
		mov	dword ptr [esp+4], 2000h
		mov	[esp], edi
		call	_OPENSSL_cleanse
		mov	[esp], edi
		call	_CRYPTO_free

loc_42518E:				; CODE XREF: _s_client_main+1E4j
		mov	eax, ds:_bio_c_out
		test	eax, eax
		jz	short loc_4251A9
		mov	[esp], eax
		call	_BIO_free
		mov	ds:_bio_c_out, 0

loc_4251A9:				; CODE XREF: _s_client_main+205j
		mov	eax, [ebp+var_28C]
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4251C0:				; CODE XREF: _s_client_main+FDj
		mov	dword ptr [esp+8], 2C4h
		mov	dword ptr [esp+4], offset aS_client_c ;	"s_client.c"
		mov	dword ptr [esp], 2000h
		call	_CRYPTO_malloc
		mov	[ebp+lpBuffer],	eax
		test	eax, eax
		jz	loc_425440
		mov	dword ptr [esp+8], 2C5h
		mov	dword ptr [esp+4], offset aS_client_c ;	"s_client.c"
		mov	dword ptr [esp], 2000h
		call	_CRYPTO_malloc
		mov	[ebp+var_290], eax
		test	eax, eax
		jz	loc_425440
		mov	dword ptr [esp+8], 2C6h
		mov	dword ptr [esp+4], offset aS_client_c ;	"s_client.c"
		mov	dword ptr [esp], 2000h
		call	_CRYPTO_malloc
		mov	[ebp+var_294], eax
		test	eax, eax
		jz	loc_42544A
		mov	ds:_verify_depth, 0
		mov	ds:_verify_error, 0
		mov	ds:_c_nbio, 0
		mov	eax, [ebp+arg_0]
		dec	eax
		mov	[ebp+arg_0], eax
		add	[ebp+arg_4], 4
		mov	edx, eax
		mov	[ebp+var_318], 0
		mov	[ebp+var_2E0], 0
		mov	[ebp+var_2DC], 0
		mov	[ebp+var_314], 0
		mov	[ebp+var_310], 0
		mov	[ebp+var_2B0], 0
		mov	[ebp+var_2BC], 0
		mov	[ebp+var_2AC], 0
		mov	[ebp+var_2D8], 0
		mov	[ebp+var_2D0], 0
		mov	[ebp+nNumberOfBytesToWrite], 0
		mov	[ebp+var_2D4], 0
		mov	[ebp+var_30C], 1
		mov	[ebp+var_2A0], 0
		mov	[ebp+var_2B4], 0
		mov	[ebp+var_308], 0
		mov	[ebp+var_304], 0
		mov	[ebp+var_300], 0
		mov	[ebp+var_2A4], 0
		mov	[ebp+var_2F4], 0
		mov	[ebp+var_2FC], 0
		mov	[ebp+var_2F0], 0
		mov	[ebp+var_2EC], 0
		mov	[ebp+var_2C8], 0
		mov	[ebp+var_2E8], 3
		mov	[ebp+var_2C0], 3
		mov	[ebp+var_2C4], 0
		mov	[ebp+var_2A8], 0
		mov	[ebp+var_2F8], 0
		mov	[ebp+nfds], 0
		mov	[ebp+var_2B8], 0
		jmp	loc_4253D2
; ---------------------------------------------------------------------------
		align 10h

loc_4253B0:				; CODE XREF: _s_client_main+461j
		dec	edx
		mov	[ebp+arg_0], edx
		test	edx, edx
		jz	loc_4254E0
		mov	ecx, [eax+4]
		mov	[ebp+var_278], ecx
		lea	ebx, [eax+4]

loc_4253C8:				; CODE XREF: _s_client_main+4AAj
					; _s_client_main+B6Fj ...
		dec	edx
		mov	[ebp+arg_0], edx
		add	ebx, 4
		mov	[ebp+arg_4], ebx

loc_4253D2:				; CODE XREF: _s_client_main+40Fj
					; _s_client_main+F10j
		test	edx, edx
		jle	loc_425BD0
		mov	eax, [ebp+arg_4]
		mov	esi, [eax]
		mov	[ebp+var_28C], esi
		mov	edi, offset aHost ; "-host"
		mov	ecx, 6
		repe cmpsb
		jz	short loc_4253B0
		mov	edi, offset aPort_0 ; "-port"
		mov	ecx, 6
		mov	esi, [ebp+var_28C]
		repe cmpsb
		jnz	short loc_425480
		dec	edx
		mov	[ebp+arg_0], edx
		test	edx, edx
		jz	loc_4254E0
		lea	edx, [eax+4]
		mov	[ebp+arg_4], edx
		mov	eax, [eax+4]
		mov	[esp], eax	; char *
		call	_atoi
		mov	word ptr [ebp+var_280],	ax
		test	ax, ax
		jz	loc_4254E0

loc_425434:				; CODE XREF: _s_client_main+53Fj
					; _s_client_main+EC3j ...
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	short loc_4253C8
; ---------------------------------------------------------------------------
		align 10h

loc_425440:				; CODE XREF: _s_client_main+254j
					; _s_client_main+27Ej
		mov	[ebp+var_290], 0

loc_42544A:				; CODE XREF: _s_client_main+2A8j
		mov	dword ptr [esp+4], offset aOutOfMemory_7 ; "out	of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	esi, esi
		xor	edi, edi
		xor	ebx, ebx
		mov	[ebp+var_294], 0
		jmp	loc_4250B7
; ---------------------------------------------------------------------------
		align 10h

loc_425480:				; CODE XREF: _s_client_main+475j
		mov	edi, offset aConnect ; "-connect"
		mov	ecx, 9
		mov	esi, [ebp+var_28C]
		repe cmpsb
		jnz	loc_425AA0
		dec	edx
		mov	[ebp+arg_0], edx
		test	edx, edx
		jz	short loc_4254E0
		lea	edx, [eax+4]
		mov	[ebp+arg_4], edx
		mov	eax, [eax+4]
		lea	edx, [ebp+var_280]
		mov	[esp+0Ch], edx	; int
		mov	dword ptr [esp+8], 0 ; int
		lea	edx, [ebp+var_278]
		mov	[esp+4], edx	; int
		mov	[esp], eax	; char *
		call	_extract_host_port
		test	eax, eax
		jnz	loc_425434
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4254E0:				; CODE XREF: _s_client_main+426j
					; _s_client_main+47Dj ...
		mov	dword ptr [esp+4], offset aUsageS_clientA ; "usage: s_client args\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset asc_46582E ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aHostHostUseCon ; " -host host     - use -connect instead\"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aPortPortUseCon ; " -port port     - use -connect instead\"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], offset a4433 ; "4433"
		mov	dword ptr [esp+8], offset aLocalhost ; "localhost"
		mov	dword ptr [esp+4], offset aConnectHostPor ; " -connect host:port - who to connect to"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aVerifyArgTur_1 ; " -verify arg   - turn on peer certifica"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aVerify_retur_1 ; " -verify_return_error - return verifica"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aCertArgCerti_0 ; " -cert arg	    - certificate file to us"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aCertformArgC_0 ; " -certform	arg - certificate format (PE"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aKeyArgPrivat_0 ; " -key arg	    - Private key file to us"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aNotSpecifiedBu ; "		      not specified but	cert"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aKeyformArgKe_2 ; " -keyform arg  - key format (PEM or DER"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aPassArgPriva_0 ; " -pass arg	    - private key file pass "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aCapathArgPem_0 ; " -CApath arg   - PEM format directory o"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aCafileArgPem_0 ; " -CAfile arg   - PEM format file of CA'"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aNo_alt_chain_0 ; " -no_alt_chains - only ever use the fir"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aReconnectDropA ; " -reconnect    - Drop and re-make the c"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aPauseSleep1Aft ; " -pause	    - sleep(1) after each re"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aPrexitPrintSes ; " -prexit	    - print session informat"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aShowcertsShowA ; " -showcerts    - show all certificates "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aDebugExtraOutp ; " -debug	    - extra output\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aMsgShowProto_0 ; " -msg	    - Show protocol messages"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aNbio_testMoreS ; " -nbio_test    - more ssl protocol	test"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aStatePrintTh_0 ; " -state	    - print the	'ssl' states"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aNbioRunWithN_0 ; " -nbio	    - Run with non-blocking "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aCrlfConvertL_0 ; " -crlf	    - convert LF from termin"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aQuietNoS_clien ; " -quiet	    - no s_client output\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aIgn_eofIgnoreI ; " -ign_eof	    - ignore input eof (defa"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aNo_ign_eofDonT ; " -no_ign_eof   - don't ignore input eof"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aPsk_identityAr ; " -psk_identity arg	- PSK identity\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aPskArgPskInH_0 ; " -psk arg	    - PSK in hex (without 0x"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSrpuserUserSrp ; " -srpuser user	- SRP authentificati"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSrppassArgPass ; " -srppass arg	- password for 'user"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSrp_lateuserSr ; " -srp_lateuser	- SRP username into "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSrp_moregroups ; " -srp_moregroups	- Tolerate other tha"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+8], 400h
		mov	dword ptr [esp+4], offset aSrp_strengthIn ; " -srp_strength int	- minimal length in "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSsl2JustUseSsl ; " -ssl2	    - just use SSLv2\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSsl3JustUseSsl ; " -ssl3	    - just use SSLv3\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aTls1_2JustUseT ; " -tls1_2	    - just use TLSv1.2\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aTls1_1JustUseT ; " -tls1_1	    - just use TLSv1.1\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aTls1JustUseTls ; " -tls1	    - just use TLSv1\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aDtls1JustUseDt ; " -dtls1	    - just use DTLSv1\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aFallback_scsvS ; " -fallback_scsv - send TLS_FALLBACK_SCS"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aMtuSetTheLinkL ; " -mtu	    - set the link layer MTU"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aNo_tls1_2No_tl ; " -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aBugsSwitchOnAl ; " -bugs	    - Switch on	all SSL	impl"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aServerprefUs_0 ; " -serverpref   - Use server's cipher pr"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aCipherPreferre ; " -cipher	    - preferred	cipher to us"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aCommandToSeeWh ; "		      command to see what is"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aStarttlsProtUs ; " -starttls	prot - use the STARTTLS	comm"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aForThoseProtoc ; "		      for those	protocols th"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aProtDefinesWhi ; "		      'prot' defines which o"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aOnlySmtpPop3Im ; "		      only \"smtp\", \"pop3\"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aAreSupported_ ; "		     are supported.\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEngineIdInit_0 ; " -engine id    - Initialise and use the"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 3Bh
		mov	dword ptr [esp+8], 3Bh
		mov	dword ptr [esp+4], offset aRandFileCfil_5 ; " -rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSess_outArgFil ; " -sess_out	arg - file to write SSL	sess"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSess_inArgFile ; " -sess_in arg  - file to read SSL sessi"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aServernameHo_0 ; " -servername host	- Set TLS extension "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aTlsextdebugH_0 ; " -tlsextdebug	- hex dump of all TL"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aStatusRequestC ; " -status		- request certificat"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aNo_ticketDis_0 ; " -no_ticket	- disable use of RFC"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aNextprotoneg_0 ; " -nextprotoneg arg	- enable NPN extensi"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aLegacy_reneg_1 ; " -legacy_renegotiation - enable use of "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aUse_srtpProf_0 ; " -use_srtp	profiles - Offer SRTP key ma"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aKeymatexport_1 ; " -keymatexport label   - Export keying "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aKeymatexport_2 ; " -keymatexportlen len  - Export len byt"...

loc_425A7A:				; CODE XREF: _s_client_main+FB5j
					; _s_client_main+1B7Dj	...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	esi, esi
		xor	edi, edi
		xor	ebx, ebx
		jmp	loc_4250B7
; ---------------------------------------------------------------------------
		align 10h

loc_425AA0:				; CODE XREF: _s_client_main+502j
		mov	edi, offset aVerify_5 ;	"-verify"
		mov	ecx, 8
		mov	esi, [ebp+var_28C]
		repe cmpsb
		jnz	short loc_425B10
		dec	edx
		mov	[ebp+arg_0], edx
		test	edx, edx
		jz	loc_4254E0
		lea	edx, [eax+4]
		mov	[ebp+arg_4], edx
		mov	eax, [eax+4]
		mov	[esp], eax	; char *
		call	_atoi
		mov	ds:_verify_depth, eax
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aVerifyDepthI_1 ; "verify depth is %d\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_2A4], 1
		jmp	loc_4253C8
; ---------------------------------------------------------------------------
		align 10h

loc_425B10:				; CODE XREF: _s_client_main+B22j
		mov	edi, offset aCert_1 ; "-cert"
		mov	ecx, 6
		mov	esi, [ebp+var_28C]
		repe cmpsb
		jnz	short loc_425B50
		dec	edx
		mov	[ebp+arg_0], edx
		test	edx, edx
		jz	loc_4254E0
		mov	ebx, [eax+4]
		mov	[ebp+var_2A8], ebx
		lea	ebx, [eax+4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------
		jmp	short loc_425B50
; ---------------------------------------------------------------------------
		align 10h

loc_425B50:				; CODE XREF: _s_client_main+B92j
					; _s_client_main+BB1j
		mov	edi, offset aSess_out ;	"-sess_out"
		mov	ecx, 0Ah
		mov	esi, [ebp+var_28C]
		repe cmpsb
		jz	loc_425DF0
		mov	edi, offset aSess_in ; "-sess_in"
		mov	ecx, 9
		mov	esi, [ebp+var_28C]
		repe cmpsb
		jnz	loc_425E1C
		dec	edx
		mov	[ebp+arg_0], edx
		test	edx, edx
		jz	loc_4254E0
		mov	ecx, [eax+4]
		mov	[ebp+var_2BC], ecx
		lea	ebx, [eax+4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------
		align 10h

loc_425BA0:				; CODE XREF: _s_client_main+E5j
		mov	dword ptr [esp+4], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_42507B
; ---------------------------------------------------------------------------
		align 10h

loc_425BD0:				; CODE XREF: _s_client_main+444j
		call	_SSL_library_init
		call	_SSL_load_error_strings
		mov	ds:dword_47340C, 0FFFFFFFFh
		mov	eax, [ebp+var_2AC]
		test	eax, eax
		jz	loc_425E0D
		mov	eax, [ebp+var_2AC]
		mov	[esp+4], eax	; char *
		mov	dword ptr [esp], offset	dword_473408 ; int
		call	_next_protos_parse
		mov	ds:_next_proto,	eax
		test	eax, eax
		jz	loc_426B05

loc_425C15:				; CODE XREF: _s_client_main+E87j
		mov	dword ptr [esp+8], 1
		mov	eax, [ebp+nNumberOfBytesToWrite]
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_setup_engine
		mov	esi, eax
		mov	eax, [ebp+var_2D0]
		test	eax, eax
		jz	loc_426A4A
		mov	[esp], eax
		call	_ENGINE_by_id
		mov	[ebp+var_28C], eax
		test	eax, eax
		jz	loc_426BB2

loc_425C5A:				; CODE XREF: _s_client_main+1AC4j
		mov	dword ptr [esp+10h], 0 ; int
		lea	eax, [ebp+var_274]
		mov	[esp+0Ch], eax	; int
		mov	dword ptr [esp+8], 0 ; char *
		mov	eax, [ebp+var_2C8]
		mov	[esp+4], eax	; char *
		mov	eax, ds:_bio_err
		mov	[esp], eax	; int
		call	_app_passwd
		test	eax, eax
		jz	loc_425F3D
		mov	eax, [ebp+var_2C4]
		test	eax, eax
		jz	loc_426A59

loc_425CA1:				; CODE XREF: _s_client_main+29B3j
		mov	dword ptr [esp+18h], offset aClientCertif_0 ; "client certificate private key file"
		mov	[esp+14h], esi
		mov	eax, [ebp+var_274]
		mov	[esp+10h], eax
		mov	dword ptr [esp+0Ch], 0
		mov	eax, [ebp+var_2E8]
		mov	[esp+8], eax
		mov	eax, [ebp+var_2C4]
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_load_key
		mov	edi, eax
		test	eax, eax
		jz	loc_426BD9
		mov	eax, [ebp+var_2A8]
		test	eax, eax
		jz	loc_427930
		mov	dword ptr [esp+14h], offset aClientCertif_1 ; "client certificate file"
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 0
		mov	ebx, [ebp+var_2C0]
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_load_cert
		mov	ebx, eax
		test	eax, eax
		jz	loc_426D22

loc_425D31:				; CODE XREF: _s_client_main+1ADBj
					; _s_client_main+29A2j
		mov	dword ptr [esp+8], 1
		mov	eax, ds:_bio_err
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_RAND_load_file
		test	eax, eax
		jnz	loc_425F2A
		mov	eax, [ebp+var_2D4]
		test	eax, eax
		jz	loc_426E19

loc_425D64:				; CODE XREF: _s_client_main+FA8j
		mov	eax, [ebp+var_2D4]
		mov	[esp], eax
		call	_app_RAND_load_files
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aLdSemiRandom_6 ; "%ld semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf

loc_425D8B:				; CODE XREF: _s_client_main+FA2j
					; _s_client_main+1E90j	...
		mov	esi, ds:_bio_c_out
		test	esi, esi
		jz	loc_426AB3

loc_425D99:				; CODE XREF: _s_client_main+1B4Ej
					; _s_client_main+1C8Bj
		mov	dword ptr [esp+10h], 0 ; int
		lea	eax, [ebp+var_238]
		mov	[esp+0Ch], eax	; int
		mov	dword ptr [esp+8], 0 ; char *
		mov	eax, [ebp+var_2E0]
		mov	[esp+4], eax	; char *
		mov	eax, ds:_bio_err
		mov	[esp], eax	; int
		call	_app_passwd
		test	eax, eax
		jnz	loc_425EA5
		mov	dword ptr [esp+4], offset aErrorGettin_14 ; "Error getting password\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	esi, esi
		jmp	loc_4250B7
; ---------------------------------------------------------------------------
		align 10h

loc_425DF0:				; CODE XREF: _s_client_main+BD2j
		dec	edx
		mov	[ebp+arg_0], edx
		test	edx, edx
		jz	loc_4254E0
		mov	ecx, [eax+4]
		mov	[ebp+var_2B0], ecx
		lea	ebx, [eax+4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_425E0D:				; CODE XREF: _s_client_main+C5Cj
		mov	ds:_next_proto,	0
		jmp	loc_425C15
; ---------------------------------------------------------------------------

loc_425E1C:				; CODE XREF: _s_client_main+BEAj
		mov	edi, offset aCertform_0	; "-certform"
		mov	ecx, 0Ah
		mov	esi, [ebp+var_28C]
		repe cmpsb
		jnz	short loc_425E58
		dec	edx
		mov	[ebp+arg_0], edx
		test	edx, edx
		jz	loc_4254E0
		lea	edx, [eax+4]
		mov	[ebp+arg_4], edx
		mov	eax, [eax+4]
		mov	[esp], eax	; char *
		call	_str2fmt
		mov	[ebp+var_2C0], eax
		jmp	loc_425434
; ---------------------------------------------------------------------------

loc_425E58:				; CODE XREF: _s_client_main+E9Ej
		lea	eax, [ebp+var_270]
		mov	[esp+10h], eax
		mov	eax, ds:_bio_err
		mov	[esp+0Ch], eax
		lea	eax, [ebp+var_26C]
		mov	[esp+8], eax
		lea	eax, [ebp+arg_0]
		mov	[esp+4], eax
		lea	eax, [ebp+arg_4]
		mov	[esp], eax
		call	_args_verify
		test	eax, eax
		jz	loc_425F4A
		mov	eax, [ebp+var_26C]
		test	eax, eax
		jnz	loc_4254E0
		mov	edx, [ebp+arg_0]
		jmp	loc_4253D2
; ---------------------------------------------------------------------------

loc_425EA5:				; CODE XREF: _s_client_main+E3Cj
		mov	eax, [ebp+var_29C]
		mov	[esp], eax
		call	_SSL_CTX_new
		mov	esi, eax
		test	eax, eax
		jz	loc_426B27
		mov	eax, [ebp+var_270]
		test	eax, eax
		jz	short loc_425ED3
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_CTX_set1_param

loc_425ED3:				; CODE XREF: _s_client_main+F35j
		mov	eax, [ebp+var_28C]
		test	eax, eax
		jz	loc_425F87
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_CTX_set_client_cert_engine
		test	eax, eax
		jnz	loc_425F79
		mov	dword ptr [esp+4], offset aErrorSettingCl ; "Error setting client auth engine\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_puts
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	eax, [ebp+var_28C]
		mov	[esp], eax
		call	_ENGINE_free
		jmp	loc_4250B7
; ---------------------------------------------------------------------------

loc_425F2A:				; CODE XREF: _s_client_main+DC0j
		mov	eax, [ebp+var_2D4]
		test	eax, eax
		jz	loc_425D8B
		jmp	loc_425D64
; ---------------------------------------------------------------------------

loc_425F3D:				; CODE XREF: _s_client_main+CFDj
		mov	dword ptr [esp+4], offset aErrorGettin_14 ; "Error getting password\n"
		jmp	loc_425A7A
; ---------------------------------------------------------------------------

loc_425F4A:				; CODE XREF: _s_client_main+EF9j
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebx]
		mov	[ebp+var_28C], esi
		mov	edi, offset aVerify_retur_2 ; "-verify_return_error"
		mov	ecx, 15h
		repe cmpsb
		jnz	loc_426A70
		mov	ds:_verify_return_error, 1
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_425F79:				; CODE XREF: _s_client_main+F5Fj
		mov	eax, [ebp+var_28C]
		mov	[esp], eax
		call	_ENGINE_free

loc_425F87:				; CODE XREF: _s_client_main+F4Bj
		mov	edx, ds:_psk_key
		test	edx, edx
		jz	short loc_425FAE
		mov	eax, ds:_c_debug
		test	eax, eax
		jnz	loc_426BBF

loc_425F9E:				; CODE XREF: _s_client_main+1C44j
		mov	dword ptr [esp+4], offset _psk_client_cb
		mov	[esp], esi
		call	_SSL_CTX_set_psk_client_callback

loc_425FAE:				; CODE XREF: _s_client_main+FFFj
		mov	eax, ds:_srtp_profiles_0
		test	eax, eax
		jz	short loc_425FC3
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_CTX_set_tlsext_use_srtp

loc_425FC3:				; CODE XREF: _s_client_main+1025j
		mov	eax, [ebp+var_300]
		test	eax, eax
		mov	dword ptr [esp+0Ch], 0
		mov	eax, [ebp+var_2B8]
		jz	loc_426A9A
		or	eax, 80000BFFh
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 20h
		mov	[esp], esi
		call	_SSL_CTX_ctrl

loc_425FF8:				; CODE XREF: _s_client_main+1B1Ej
		mov	eax, [ebp+nfds]
		test	eax, eax
		jnz	loc_426B39

loc_426006:				; CODE XREF: _s_client_main+1BCBj
		mov	eax, ds:_next_proto
		test	eax, eax
		jz	short loc_426027
		mov	dword ptr [esp+8], offset _next_proto
		mov	dword ptr [esp+4], offset _next_proto_cb_0
		mov	[esp], esi
		call	_SSL_CTX_set_next_proto_select_cb

loc_426027:				; CODE XREF: _s_client_main+107Dj
		mov	eax, [ebp+var_2F8]
		test	eax, eax
		jnz	loc_426AF0

loc_426035:				; CODE XREF: _s_client_main+1B70j
		mov	eax, [ebp+var_2FC]
		test	eax, eax
		jz	short loc_426053
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_CTX_set_cipher_list
		test	eax, eax
		jz	loc_426B12

loc_426053:				; CODE XREF: _s_client_main+10ADj
		mov	dword ptr [esp+8], offset _verify_callback
		mov	eax, [ebp+var_2A4]
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_CTX_set_verify
		mov	[esp+8], edi
		mov	[esp+4], ebx
		mov	[esp], esi
		call	_set_cert_key_stuff
		test	eax, eax
		jz	loc_4250B7
		mov	eax, [ebp+var_2F0]
		test	eax, eax
		jz	loc_4270A2

loc_426093:				; CODE XREF: _s_client_main+2119j
		mov	eax, [ebp+var_2EC]
		mov	[esp+8], eax
		mov	eax, [ebp+var_2F0]
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_CTX_load_verify_locations
		test	eax, eax
		jz	loc_427090

loc_4260B7:				; CODE XREF: _s_client_main+210Dj
					; _s_client_main+211Fj
		mov	[esp], esi
		call	_SSL_CTX_set_default_verify_paths
		test	eax, eax
		jz	loc_42707E

loc_4260C7:				; CODE XREF: _s_client_main+20FBj
		mov	ecx, [ebp+var_2D8]
		test	ecx, ecx
		jz	short loc_426116
		mov	eax, ds:_bio_err
		mov	[ebp+var_250], eax
		mov	dword ptr [esp+8], offset _ssl_servername_cb_0
		mov	dword ptr [esp+4], 35h
		mov	[esp], esi
		call	_SSL_CTX_callback_ctrl
		lea	eax, [ebp+var_250]
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 36h
		mov	[esp], esi
		call	_SSL_CTX_ctrl

loc_426116:				; CODE XREF: _s_client_main+113Fj
		mov	eax, [ebp+var_234]
		test	eax, eax
		jz	loc_4261B7
		mov	edx, [ebp+var_318]
		test	edx, edx
		jnz	short loc_426142
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_CTX_set_srp_username
		test	eax, eax
		jz	loc_426E71

loc_426142:				; CODE XREF: _s_client_main+119Cj
		mov	eax, ds:_c_msg
		mov	[ebp+var_230], eax
		mov	eax, ds:_c_debug
		mov	[ebp+var_22C], eax
		lea	eax, [ebp+var_238]
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_CTX_set_srp_cb_arg
		mov	dword ptr [esp+4], offset _ssl_give_srp_client_pwd_cb
		mov	[esp], esi
		call	_SSL_CTX_set_srp_client_pwd_callback
		mov	eax, [ebp+var_224]
		mov	[esp+4], eax
		mov	[esp], esi
		call	_SSL_CTX_set_srp_strength
		mov	eax, ds:_c_msg
		test	eax, eax
		jnz	short loc_4261A7
		cmp	ds:_c_debug, 0
		jnz	short loc_4261A7
		cmp	[ebp+var_228], 0
		jnz	short loc_4261B7

loc_4261A7:				; CODE XREF: _s_client_main+1203j
					; _s_client_main+120Cj
		mov	dword ptr [esp+4], offset _ssl_srp_verify_param_cb
		mov	[esp], esi
		call	_SSL_CTX_set_srp_verify_param_callback

loc_4261B7:				; CODE XREF: _s_client_main+118Ej
					; _s_client_main+1215j
		mov	[esp], esi
		call	_SSL_new
		mov	[ebp+var_29C], eax
		mov	eax, [ebp+var_2BC]
		test	eax, eax
		jz	loc_426259
		mov	dword ptr [esp+4], offset aR_8 ; "r"
		mov	[esp], eax
		call	_BIO_new_file
		test	eax, eax
		jz	loc_42720C
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		mov	[ebp+var_2A4], eax
		call	_PEM_read_bio_SSL_SESSION
		mov	[ebp+var_28C], eax
		mov	edx, [ebp+var_2A4]
		mov	[esp], edx
		call	_BIO_free
		mov	ecx, [ebp+var_28C]
		test	ecx, ecx
		jz	loc_42720C
		mov	[esp+4], ecx
		mov	[ebp+var_28C], ecx
		mov	eax, [ebp+var_29C]
		mov	[esp], eax
		call	_SSL_set_session
		mov	ecx, [ebp+var_28C]
		mov	[esp], ecx
		call	_SSL_SESSION_free

loc_426259:				; CODE XREF: _s_client_main+123Dj
		mov	eax, [ebp+var_310]
		test	eax, eax
		jz	short loc_426289
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 80h
		mov	dword ptr [esp+4], 21h
		mov	eax, [ebp+var_29C]
		mov	[esp], eax
		call	_SSL_ctrl

loc_426289:				; CODE XREF: _s_client_main+12D1j
		mov	eax, [ebp+var_2D8]
		test	eax, eax
		jz	short loc_4262C3
		mov	eax, [ebp+var_2D8]
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 37h
		mov	eax, [ebp+var_29C]
		mov	[esp], eax
		call	_SSL_ctrl
		test	eax, eax
		jz	loc_426E40

loc_4262C3:				; CODE XREF: _s_client_main+1301j
		mov	[ebp+var_2C4], 1
		mov	[ebp+var_2D4], 1
		mov	[ebp+var_2A4], edi
		mov	[ebp+var_28C], esi
		mov	[ebp+var_2A8], ebx
		mov	ebx, [ebp+var_29C]

loc_4262EF:				; CODE XREF: _s_client_main+297Aj
		mov	eax, [ebp+var_30C]
		mov	[esp+0Ch], eax	; int
		movsx	eax, word ptr [ebp+var_280]
		mov	[esp+8], eax	; hostshort
		mov	eax, [ebp+var_278]
		mov	[esp+4], eax	; char *
		lea	eax, [ebp+s]
		mov	[esp], eax	; int
		call	_init_client
		test	eax, eax
		jz	loc_427948
		mov	eax, [ebp+s]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aConnected08x	; "CONNECTED(%08X)\n"
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		cmp	ds:_c_nbio, 0
		jnz	loc_426FB6

loc_426350:				; CODE XREF: _s_client_main+2067j
		test	byte ptr ds:_c_Pause, 1
		jz	short loc_426369
		mov	dword ptr [esp+4], 1
		mov	[esp], ebx
		call	_SSL_set_debug

loc_426369:				; CODE XREF: _s_client_main+13C7j
		mov	[esp], ebx
		call	_SSL_version
		mov	dword ptr [esp+4], 0
		cmp	eax, 0FEFFh
		mov	eax, [ebp+s]
		mov	[esp], eax
		jz	loc_426E8B
		call	_BIO_new_socket
		mov	esi, eax

loc_426394:				; CODE XREF: _s_client_main+1FD6j
					; _s_client_main+244Cj
		cmp	[ebp+var_308], 0
		jz	short loc_4263B8
		call	_BIO_f_nbio_test
		mov	[esp], eax
		call	_BIO_new
		mov	[esp+4], esi
		mov	[esp], eax
		call	_BIO_push
		mov	esi, eax

loc_4263B8:				; CODE XREF: _s_client_main+140Bj
		cmp	ds:_c_debug, 0
		jz	short loc_4263F2
		mov	dword ptr [esp+4], 1
		mov	[esp], ebx
		call	_SSL_set_debug
		mov	dword ptr [esp+4], offset _bio_dump_callback
		mov	[esp], esi
		call	_BIO_set_callback
		mov	eax, ds:_bio_c_out
		mov	[esp+4], eax
		mov	[esp], esi
		call	_BIO_set_callback_arg

loc_4263F2:				; CODE XREF: _s_client_main+142Fj
		cmp	ds:_c_msg, 0
		jz	short loc_42642C
		mov	dword ptr [esp+4], offset _msg_cb
		mov	[esp], ebx
		call	_SSL_set_msg_callback
		mov	eax, ds:_bio_c_out
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 10h
		mov	[esp], ebx
		call	_SSL_ctrl

loc_42642C:				; CODE XREF: _s_client_main+1469j
		cmp	ds:_c_tlsextdebug, 0
		jz	short loc_42646E
		mov	dword ptr [esp+8], offset _tlsext_cb
		mov	dword ptr [esp+4], 38h
		mov	[esp], ebx
		call	_SSL_callback_ctrl
		mov	eax, ds:_bio_c_out
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 39h
		mov	[esp], ebx
		call	_SSL_ctrl

loc_42646E:				; CODE XREF: _s_client_main+14A3j
		cmp	ds:_c_status_req, 0
		jz	short loc_4264D6
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 1
		mov	dword ptr [esp+4], 41h
		mov	[esp], ebx
		call	_SSL_ctrl
		mov	dword ptr [esp+8], offset _ocsp_resp_cb
		mov	dword ptr [esp+4], 3Fh
		mov	edi, [ebp+var_28C]
		mov	[esp], edi
		call	_SSL_CTX_callback_ctrl
		mov	eax, ds:_bio_c_out
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 40h
		mov	[esp], edi
		call	_SSL_CTX_ctrl

loc_4264D6:				; CODE XREF: _s_client_main+14E5j
		mov	[esp+8], esi
		mov	[esp+4], esi
		mov	[esp], ebx
		call	_SSL_set_bio
		mov	[esp], ebx
		call	_SSL_set_connect_state
		mov	[esp], ebx
		call	_SSL_get_fd
		inc	eax
		mov	[ebp+nfds], eax
		cmp	[ebp+var_2B4], 1
		jz	loc_427751
		cmp	[ebp+var_2B4], 2
		jz	loc_427502
		cmp	[ebp+var_2B4], 3
		jz	loc_4273E1
		cmp	[ebp+var_2B4], 4
		jz	loc_42754B
		cmp	[ebp+var_2B4], 5
		jz	loc_427277

loc_42653E:				; CODE XREF: _s_client_main+23C3j
					; _s_client_main+25B6j
		mov	[ebp+var_2C0], 1
		mov	[ebp+var_2B8], 1
		mov	[ebp+var_2AC], 1
		mov	[ebp+var_2BC], 0
		mov	[ebp+var_2D0], 0
		mov	[ebp+nNumberOfBytesToWrite], 0
		mov	[ebp+var_2C8], 0
		xor	esi, esi

loc_426586:				; CODE XREF: _s_client_main+18A0j
					; _s_client_main+198Ej	...
		mov	[ebp+readfds.fd_count],	0 ; jumptable 00426836 default case
		mov	[ebp+writefds.fd_count], 0
		mov	[esp], ebx
		call	_SSL_version
		cmp	eax, 0FEFFh
		jz	loc_426D6F
		mov	[ebp+var_2D8], 0

loc_4265B7:				; CODE XREF: _s_client_main+1E0Dj
					; _s_client_main+1E1Fj
		mov	[esp], ebx
		call	_SSL_state
		test	ah, 30h
		jnz	loc_426D36

loc_4265C8:				; CODE XREF: _s_client_main+1DC8j
		mov	edi, [ebp+var_2C4]
		test	edi, edi
		jz	loc_426682
		mov	eax, [ebp+var_2B0]
		test	eax, eax
		jz	short loc_426616
		mov	dword ptr [esp+4], offset aW_3 ; "w"
		mov	[esp], eax
		call	_BIO_new_file
		mov	edi, eax
		test	eax, eax
		jz	loc_4279F7
		mov	[esp], ebx
		call	_SSL_get_session
		mov	[esp+4], eax
		mov	[esp], edi
		call	_PEM_write_bio_SSL_SESSION
		mov	[esp], edi
		call	_BIO_free

loc_426616:				; CODE XREF: _s_client_main+164Ej
					; _s_client_main+2A86j
		mov	edi, [ebp+var_2D4]
		mov	ecx, edi
		mov	edx, ebx
		mov	eax, ds:_bio_c_out
		call	_print_stuff
		dec	edi
		jnz	short loc_426637
		mov	[ebp+var_2D4], 0

loc_426637:				; CODE XREF: _s_client_main+169Bj
		mov	ecx, [ebp+var_2B4]
		test	ecx, ecx
		jz	short loc_426660
		mov	eax, [ebp+var_294]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aS_9 ; "%s"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf

loc_426660:				; CODE XREF: _s_client_main+16AFj
		mov	edx, [ebp+var_2F4]
		test	edx, edx
		jnz	loc_42789E
		mov	[ebp+var_2B4], 0
		mov	[ebp+var_2C4], 0

loc_426682:				; CODE XREF: _s_client_main+1640j
		mov	edi, 1

loc_426687:				; CODE XREF: _s_client_main+1DDAj
		mov	eax, [ebp+var_2C0]
		test	eax, eax
		jnz	loc_426C32

loc_426695:				; CODE XREF: _s_client_main+1CACj
		test	edi, edi
		jz	short loc_4266A7
		mov	eax, [ebp+var_2BC]
		test	eax, eax
		jnz	loc_4267E8

loc_4266A7:				; CODE XREF: _s_client_main+1707j
		mov	eax, [ebp+var_2C0]
		test	eax, eax
		jz	short loc_42671B
		cmp	[ebp+readfds.fd_count],	0
		jz	loc_427205
		xor	edx, edx
		lea	edi, [ebp+readfds]
		mov	[ebp+var_2E8], esi
		mov	esi, edx
		mov	eax, edi
		mov	edi, ebx
		mov	ebx, eax
		jmp	short loc_4266E9
; ---------------------------------------------------------------------------
		align 10h

loc_4266E0:				; CODE XREF: _s_client_main+1771j
		inc	esi
		cmp	[ebp+readfds.fd_count],	esi
		jbe	short loc_426703

loc_4266E9:				; CODE XREF: _s_client_main+1744j
		mov	eax, [ebx+esi*4+4]
		mov	[ebp+var_2E0], eax
		mov	[esp], edi
		call	_SSL_get_fd
		cmp	[ebp+var_2E0], eax
		jnz	short loc_4266E0

loc_426703:				; CODE XREF: _s_client_main+1757j
		mov	ebx, edi
		mov	edx, esi
		mov	esi, [ebp+var_2E8]
		mov	edi, [ebp+readfds.fd_count]
		cmp	edi, edx
		jz	loc_42705B

loc_42671B:				; CODE XREF: _s_client_main+171Fj
					; _s_client_main+20CEj	...
		mov	eax, [ebp+var_2B8]
		test	eax, eax
		jz	short loc_426774
		cmp	[ebp+writefds.fd_count], 0
		jz	loc_4271FE
		xor	edx, edx
		mov	[ebp+var_2E0], esi
		mov	edi, edx
		mov	esi, ebx
		jmp	short loc_426749
; ---------------------------------------------------------------------------

loc_426740:				; CODE XREF: _s_client_main+17CAj
		inc	edi
		cmp	[ebp+writefds.fd_count], edi
		jbe	short loc_42675C

loc_426749:				; CODE XREF: _s_client_main+17AEj
		mov	ebx, [ebp+edi*4+writefds.fd_array]
		mov	[esp], esi
		call	_SSL_get_fd
		cmp	ebx, eax
		jnz	short loc_426740

loc_42675C:				; CODE XREF: _s_client_main+17B7j
		mov	edx, edi
		mov	ebx, esi
		mov	esi, [ebp+var_2E0]
		mov	edi, [ebp+writefds.fd_count]
		cmp	edi, edx
		jz	loc_426DF6

loc_426774:				; CODE XREF: _s_client_main+1793j
					; _s_client_main+1E69j	...
		mov	edi, [ebp+var_2BC]
		test	edi, edi
		jnz	short loc_4267E8
		mov	ecx, [ebp+var_2AC]
		test	ecx, ecx
		jz	loc_427155
		mov	[ebp+timeout.tv_sec], 1
		mov	[ebp+timeout.tv_usec], 0
		lea	eax, [ebp+timeout]
		mov	[esp+10h], eax	; timeout
		mov	dword ptr [esp+0Ch], 0 ; exceptfds
		lea	eax, [ebp+writefds]
		mov	[esp+8], eax	; writefds
		lea	edi, [ebp+readfds]
		mov	[esp+4], edi	; readfds
		mov	eax, [ebp+nfds]
		mov	[esp], eax	; nfds
		call	ds:__imp__select@20
		sub	esp, 14h
		test	eax, eax
		jz	loc_427192

loc_4267E0:				; CODE XREF: _s_client_main+21FDj
		test	eax, eax
		js	loc_427BD4

loc_4267E8:				; CODE XREF: _s_client_main+1711j
					; _s_client_main+17ECj	...
		xor	edi, edi

loc_4267EA:				; CODE XREF: _s_client_main+1CB7j
		mov	[esp], ebx
		call	_SSL_version
		cmp	eax, 0FEFFh
		jz	loc_426DB4

loc_4267FD:				; CODE XREF: _s_client_main+1E46j
					; _s_client_main+1E61j
		test	edi, edi
		jz	loc_426C4C

loc_426805:				; CODE XREF: _s_client_main+1D0Cj
		mov	dword ptr [esp+8], 400h
		mov	eax, [ebp+var_290]
		mov	[esp+4], eax
		mov	[esp], ebx
		call	_SSL_read
		mov	edi, eax
		mov	[esp+4], eax
		mov	[esp], ebx
		call	_SSL_get_error
		cmp	eax, 6		; switch 7 cases
		ja	loc_426586	; jumptable 00426836 default case
		jmp	ds:off_467374[eax*4] ; switch jump
; ---------------------------------------------------------------------------

loc_42683D:				; CODE XREF: _s_client_main+18A6j
					; DATA XREF: .rdata:off_467374o
		mov	edi, [ebp+var_2A4] ; jumptable 00426836	case 5
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		call	ds:__imp__WSAGetLastError@0
		mov	[ebp+var_28C], eax
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aReadErrnoD ;	"read:errno=%d\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf

loc_426874:				; CODE XREF: _s_client_main+1A2Fj
					; _s_client_main+1A65j	...
		cmp	[ebp+var_2C4], 0
		jz	short loc_426893
		mov	ecx, [ebp+var_2D4]
		mov	edx, [ebp+var_29C]
		mov	eax, ds:_bio_c_out
		call	_print_stuff

loc_426893:				; CODE XREF: _s_client_main+18EBj
		mov	eax, [ebp+var_29C]
		mov	[esp], eax
		call	_SSL_shutdown
		mov	eax, [ebp+var_29C]
		mov	[esp], eax
		call	_SSL_get_fd
		mov	dword ptr [esp+4], 0 ; how
		mov	[esp], eax	; s
		call	ds:__imp__shutdown@8
		push	ecx
		push	ecx
		mov	eax, [ebp+var_29C]
		mov	[esp], eax
		call	_SSL_get_fd
		mov	[esp], eax	; s
		call	ds:__imp__closesocket@4
		push	eax

loc_4268DA:				; CODE XREF: _s_client_main+1EDCj
					; _s_client_main+2096j	...
		mov	edx, [ebp+var_29C]
		test	edx, edx
		jz	loc_4250C1
		mov	eax, [ebp+var_2A0]
		test	eax, eax
		jnz	loc_426A30

loc_4268F6:				; CODE XREF: _s_client_main+1AB5j
		mov	eax, [ebp+var_29C]
		mov	[esp], eax
		call	_SSL_free
		jmp	loc_4250C1
; ---------------------------------------------------------------------------

loc_426909:				; CODE XREF: _s_client_main+18A6j
					; DATA XREF: .rdata:off_467374o
		mov	dword ptr [esp+4], offset aReadXBlock ;	jumptable 00426836 case	4
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_426923:				; CODE XREF: _s_client_main+18A6j
					; DATA XREF: .rdata:off_467374o
		mov	dword ptr [esp+4], offset aReadWBlock ;	jumptable 00426836 case	3

loc_42692B:				; CODE XREF: _s_client_main+2BCEj
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[ebp+var_2B8], 1
		mov	[ebp+var_2AC], 0
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_426951:				; CODE XREF: _s_client_main+18A6j
					; DATA XREF: .rdata:off_467374o
		mov	dword ptr [esp+4], offset aReadRBlock_0	; jumptable 00426836 case 2
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		cmp	[ebp+var_2AC], 0
		mov	[ebp+var_2C0], 1
		jnz	loc_4270B4
		mov	[ebp+var_2B8], 1
		mov	[ebp+var_2BC], 0
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_426996:				; CODE XREF: _s_client_main+18A6j
					; _s_client_main+21BEj
					; DATA XREF: ...
		mov	edi, [ebp+var_2A4] ; jumptable 00426836	case 1
					; jumptable 0042714E case 1
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	[ebp+var_28C], 1
		jmp	loc_426874
; ---------------------------------------------------------------------------

loc_4269C4:				; CODE XREF: _s_client_main+18A6j
					; DATA XREF: .rdata:off_467374o
		mov	edi, [ebp+var_2A4] ; jumptable 00426836	case 6
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		mov	dword ptr [esp+4], offset aClosed ; "closed\n"
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[ebp+var_28C], 0
		jmp	loc_426874
; ---------------------------------------------------------------------------

loc_4269FA:				; CODE XREF: _s_client_main+18A6j
					; DATA XREF: .rdata:off_467374o
		test	edi, edi	; jumptable 00426836 case 0
		jle	loc_42790F
		mov	[ebp+nNumberOfBytesToWrite], edi
		mov	[ebp+var_2C0], 0
		mov	[ebp+var_2BC], 1
		mov	[ebp+var_2D0], 0
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------
		align 10h

loc_426A30:				; CODE XREF: _s_client_main+1960j
		mov	ecx, 1
		mov	edx, [ebp+var_29C]
		mov	eax, ds:_bio_c_out
		call	_print_stuff
		jmp	loc_4268F6
; ---------------------------------------------------------------------------

loc_426A4A:				; CODE XREF: _s_client_main+CAEj
		mov	[ebp+var_28C], 0
		jmp	loc_425C5A
; ---------------------------------------------------------------------------

loc_426A59:				; CODE XREF: _s_client_main+D0Bj
		mov	eax, [ebp+var_2A8]
		test	eax, eax
		jnz	loc_427937
		xor	edi, edi
		xor	ebx, ebx
		jmp	loc_425D31
; ---------------------------------------------------------------------------

loc_426A70:				; CODE XREF: _s_client_main+FD1j
		mov	edi, offset aPrexit ; "-prexit"
		mov	ecx, 8
		mov	esi, [ebp+var_28C]
		repe cmpsb
		jnz	loc_426B60
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_2A0], 1
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_426A9A:				; CODE XREF: _s_client_main+1049j
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 20h
		mov	[esp], esi
		call	_SSL_CTX_ctrl
		jmp	loc_425FF8
; ---------------------------------------------------------------------------

loc_426AB3:				; CODE XREF: _s_client_main+E03j
		mov	ecx, ds:_c_quiet
		test	ecx, ecx
		jnz	loc_426BEF

loc_426AC1:				; CODE XREF: _s_client_main+1C66j
					; _s_client_main+1C73j
		mov	dword ptr [esp+4], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax
		call	_BIO_new_fp
		mov	ds:_bio_c_out, eax
		jmp	loc_425D99
; ---------------------------------------------------------------------------
		align 10h

loc_426AF0:				; CODE XREF: _s_client_main+109Fj
		mov	dword ptr [esp+4], offset _apps_ssl_info_callback
		mov	[esp], esi
		call	_SSL_CTX_set_info_callback
		jmp	loc_426035
; ---------------------------------------------------------------------------

loc_426B05:				; CODE XREF: _s_client_main+C7Fj
		mov	dword ptr [esp+4], offset aErrorParsingNe ; "Error parsing -nextprotoneg argument\n"
		jmp	loc_425A7A
; ---------------------------------------------------------------------------

loc_426B12:				; CODE XREF: _s_client_main+10BDj
		mov	dword ptr [esp+4], offset aErrorSetting_1 ; "error setting cipher list\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf

loc_426B27:				; CODE XREF: _s_client_main+F27j
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		jmp	loc_4250B7
; ---------------------------------------------------------------------------

loc_426B39:				; CODE XREF: _s_client_main+1070j
		mov	dword ptr [esp+0Ch], 0
		mov	eax, [ebp+nfds]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 4Dh
		mov	[esp], esi
		call	_SSL_CTX_ctrl
		jmp	loc_426006
; ---------------------------------------------------------------------------

loc_426B60:				; CODE XREF: _s_client_main+1AF2j
		mov	edi, offset aCrlf_0 ; "-crlf"
		mov	ecx, 6
		mov	esi, [ebp+var_28C]
		repe cmpsb
		jz	loc_426C20
		mov	dword ptr [esp+4], offset aQuiet_1 ; "-quiet"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_42702B
		mov	ds:_c_quiet, 1
		mov	ds:_c_ign_eof, 1
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_426BB2:				; CODE XREF: _s_client_main+CC4j
		mov	dword ptr [esp+4], offset aErrorGettingCl ; "Error getting client auth engine\n"
		jmp	loc_425A7A
; ---------------------------------------------------------------------------

loc_426BBF:				; CODE XREF: _s_client_main+1008j
		mov	dword ptr [esp+4], offset aPskKeyGivenO_0 ; "PSK key given or JPAKE in use, setting "...
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_425F9E
; ---------------------------------------------------------------------------

loc_426BD9:				; CODE XREF: _s_client_main+D54j
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_4250B7
; ---------------------------------------------------------------------------

loc_426BEF:				; CODE XREF: _s_client_main+1B2Bj
		cmp	ds:_c_debug, 0
		jnz	loc_426AC1
		cmp	ds:_c_msg, 0
		jnz	loc_426AC1
		call	_BIO_s_null
		mov	[esp], eax
		call	_BIO_new
		mov	ds:_bio_c_out, eax
		jmp	loc_425D99
; ---------------------------------------------------------------------------

loc_426C20:				; CODE XREF: _s_client_main+1BE2j
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_304], 1
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_426C32:				; CODE XREF: _s_client_main+16FFj
		mov	[esp], ebx
		call	_SSL_pending
		test	eax, eax
		jz	loc_426695
		mov	edi, 1
		jmp	loc_4267EA
; ---------------------------------------------------------------------------

loc_426C4C:				; CODE XREF: _s_client_main+186Fj
		mov	[esp], ebx
		call	_SSL_get_fd
		lea	ecx, [ebp+writefds]
		mov	[esp+4], ecx	; fd_set *
		mov	[esp], eax	; SOCKET
		call	___WSAFDIsSet@8
		push	edx
		push	edx
		test	eax, eax
		jnz	loc_42711B
		cmp	[ebp+var_2BC], 0
		jnz	loc_4270CD
		mov	[esp], ebx
		call	_SSL_get_fd
		lea	edi, [ebp+readfds]
		mov	[esp+4], edi	; fd_set *
		mov	[esp], eax	; SOCKET
		call	___WSAFDIsSet@8
		sub	esp, 8
		test	eax, eax
		jnz	loc_426805
		call	ds:__imp___kbhit
		test	eax, eax
		jz	loc_426586	; jumptable 00426836 default case
		cmp	[ebp+var_304], 0
		jz	loc_427A4B
		mov	dword ptr [esp+4], 1000h ; nNumberOfBytesToRead
		mov	eax, [ebp+lpBuffer]
		mov	[esp], eax	; lpBuffer
		call	_raw_read_stdin
		mov	esi, eax
		xor	eax, eax
		xor	edx, edx
		jmp	short loc_426CF1
; ---------------------------------------------------------------------------

loc_426CDB:				; CODE XREF: _s_client_main+1D63j
		mov	ecx, [ebp+lpBuffer]
		cmp	byte ptr [ecx+edx], 0Ah
		setz	cl
		and	ecx, 0FFh
		add	eax, ecx
		inc	edx

loc_426CF1:				; CODE XREF: _s_client_main+1D49j
		cmp	edx, esi
		jl	short loc_426CDB
		lea	edx, [esi-1]
		mov	[ebp+var_2AC], ebx
		mov	ecx, [ebp+lpBuffer]

loc_426D04:				; CODE XREF: _s_client_main+1D90j
					; _s_client_main+29E8j
		test	edx, edx
		js	loc_42797D
		lea	edi, [ecx+edx]
		mov	bl, [ecx+edx]
		mov	[edi+eax], bl
		cmp	byte ptr [ecx+edx], 0Ah
		jz	loc_427971
		dec	edx
		jmp	short loc_426D04
; ---------------------------------------------------------------------------

loc_426D22:				; CODE XREF: _s_client_main+D9Bj
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		xor	esi, esi
		jmp	loc_4250B7
; ---------------------------------------------------------------------------

loc_426D36:				; CODE XREF: _s_client_main+1632j
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Ch
		mov	[esp], ebx
		call	_SSL_ctrl
		test	eax, eax
		jnz	loc_4265C8
		mov	[ebp+var_2C4], 1
		xor	edi, edi
		jmp	loc_426687
; ---------------------------------------------------------------------------

loc_426D6F:				; CODE XREF: _s_client_main+1617j
		lea	eax, [ebp+var_260]
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 49h
		mov	[esp], ebx
		call	_SSL_ctrl
		mov	[ebp+var_2D8], 0
		test	eax, eax
		jz	loc_4265B7
		lea	eax, [ebp+var_260]
		mov	[ebp+var_2D8], eax
		jmp	loc_4265B7
; ---------------------------------------------------------------------------

loc_426DB4:				; CODE XREF: _s_client_main+1867j
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 4Ah
		mov	[esp], ebx
		call	_SSL_ctrl
		test	eax, eax
		jle	loc_4267FD
		mov	dword ptr [esp+4], offset aTimeoutOccured ; "TIMEOUT occured\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_4267FD
; ---------------------------------------------------------------------------

loc_426DF6:				; CODE XREF: _s_client_main+17DEj
		cmp	edx, 3Fh
		ja	loc_426774

loc_426DFF:				; CODE XREF: _s_client_main+2270j
		mov	[esp], ebx
		call	_SSL_get_fd
		mov	[ebp+edi*4+writefds.fd_array], eax
		inc	[ebp+writefds.fd_count]
		jmp	loc_426774
; ---------------------------------------------------------------------------

loc_426E19:				; CODE XREF: _s_client_main+DCEj
		call	_RAND_status
		test	eax, eax
		jnz	loc_425D8B
		mov	dword ptr [esp+4], offset aWarningNotMu_4 ; "warning, not much extra random data, co"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_425D8B
; ---------------------------------------------------------------------------

loc_426E40:				; CODE XREF: _s_client_main+132Dj
		mov	dword ptr [esp+4], offset aUnableToSetTls ; "Unable to set TLS servername extension."...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	[ebp+var_28C], 1
		jmp	loc_4268DA
; ---------------------------------------------------------------------------

loc_426E71:				; CODE XREF: _s_client_main+11ACj
		mov	dword ptr [esp+4], offset aUnableToSetSrp ; "Unable to set SRP username\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_4250B7
; ---------------------------------------------------------------------------

loc_426E8B:				; CODE XREF: _s_client_main+13F7j
		call	_BIO_new_dgram
		mov	esi, eax
		lea	eax, [ebp+namelen]
		mov	[esp+8], eax	; namelen
		lea	edi, [ebp+name]
		mov	[esp+4], edi	; name
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	ds:__imp__getsockname@12
		sub	esp, 0Ch
		test	eax, eax
		js	loc_4276B8
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 1
		mov	dword ptr [esp+4], 20h
		mov	[esp], esi
		call	_BIO_ctrl
		cmp	[ebp+var_314], 0
		jnz	loc_42762C

loc_426EE9:				; CODE XREF: _s_client_main+2702j
		cmp	[ebp+var_2DC], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		jz	loc_4273CC
		mov	dword ptr [esp+4], 79h
		mov	[esp], ebx
		call	_SSL_ctrl
		cmp	eax, [ebp+var_2DC]
		jg	loc_427358
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 1000h
		mov	dword ptr [esp+4], 20h
		mov	[esp], ebx
		call	_SSL_ctrl
		mov	dword ptr [esp+0Ch], 0
		mov	eax, [ebp+var_2DC]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 78h
		mov	[esp], ebx
		call	_SSL_ctrl
		test	eax, eax
		jnz	loc_426394
		mov	[ebp+var_2AC], esi
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		mov	dword ptr [esp+4], offset aFailedToSetM_0 ; "Failed to set MTU\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, [ebp+var_2AC]
		mov	[esp], eax
		call	_BIO_free
		mov	[ebp+var_28C], 1
		jmp	loc_426874
; ---------------------------------------------------------------------------

loc_426FB6:				; CODE XREF: _s_client_main+13BAj
		mov	[ebp+var_264], 1
		mov	dword ptr [esp+4], offset aTurningOnNon_0 ; "turning on	non blocking io\n"
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		lea	eax, [ebp+var_264]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 8004667Eh
		mov	eax, [ebp+s]
		mov	[esp], eax
		call	_BIO_socket_ioctl
		test	eax, eax
		jns	loc_426350
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	[ebp+var_28C], 1
		jmp	loc_4268DA
; ---------------------------------------------------------------------------

loc_42702B:				; CODE XREF: _s_client_main+1C00j
		mov	dword ptr [esp+4], offset aIgn_eof ; "-ign_eof"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_427247
		mov	ds:_c_ign_eof, 1
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42705B:				; CODE XREF: _s_client_main+1785j
		cmp	edx, 3Fh
		ja	loc_42671B

loc_427064:				; CODE XREF: _s_client_main+2277j
		mov	[esp], ebx
		call	_SSL_get_fd
		mov	[ebp+edi*4+readfds.fd_array], eax
		inc	[ebp+readfds.fd_count]
		jmp	loc_42671B
; ---------------------------------------------------------------------------

loc_42707E:				; CODE XREF: _s_client_main+1131j
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		jmp	loc_4260C7
; ---------------------------------------------------------------------------

loc_427090:				; CODE XREF: _s_client_main+1121j
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		jmp	loc_4260B7
; ---------------------------------------------------------------------------

loc_4270A2:				; CODE XREF: _s_client_main+10FDj
		cmp	[ebp+var_2EC], 0
		jnz	loc_426093
		jmp	loc_4260B7
; ---------------------------------------------------------------------------

loc_4270B4:				; CODE XREF: _s_client_main+19E7j
		mov	[ebp+var_2AC], 1
		mov	[ebp+var_2BC], 0
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_4270CD:				; CODE XREF: _s_client_main+1CE7j
		mov	eax, [ebp+nNumberOfBytesToWrite]
		mov	[esp+4], eax	; nNumberOfBytesToWrite
		mov	eax, [ebp+var_290]
		add	eax, [ebp+var_2D0]
		mov	[esp], eax	; lpBuffer
		call	_raw_write_stdout
		test	eax, eax
		jle	loc_4271C8
		sub	[ebp+nNumberOfBytesToWrite], eax
		add	[ebp+var_2D0], eax
		cmp	[ebp+nNumberOfBytesToWrite], 0
		jle	loc_4271AF
		mov	[ebp+var_2BC], 1
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_42711B:				; CODE XREF: _s_client_main+1CDAj
		mov	[esp+8], esi
		mov	eax, [ebp+lpBuffer]
		add	eax, [ebp+var_2C8]
		mov	[esp+4], eax
		mov	[esp], ebx
		call	_SSL_write
		mov	edi, eax
		mov	[esp+4], eax
		mov	[esp], ebx
		call	_SSL_get_error
		cmp	eax, 6		; switch 7 cases
		ja	loc_426586	; jumptable 00426836 default case
		jmp	ds:off_467390[eax*4] ; switch jump
; ---------------------------------------------------------------------------

loc_427155:				; CODE XREF: _s_client_main+17F6j
		mov	eax, [ebp+var_2D8]
		mov	[esp+10h], eax	; timeout
		mov	dword ptr [esp+0Ch], 0 ; exceptfds
		lea	eax, [ebp+writefds]
		mov	[esp+8], eax	; writefds
		lea	edi, [ebp+readfds]
		mov	[esp+4], edi	; readfds
		mov	eax, [ebp+nfds]
		mov	[esp], eax	; nfds
		call	ds:__imp__select@20
		sub	esp, 14h
		jmp	loc_4267E0
; ---------------------------------------------------------------------------

loc_427192:				; CODE XREF: _s_client_main+184Aj
		call	ds:__imp___kbhit
		test	eax, eax
		jnz	loc_4267E8

loc_4271A0:				; CODE XREF: _s_client_main+2BE5j
		mov	[ebp+var_2AC], 1
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_4271AF:				; CODE XREF: _s_client_main+2176j
		mov	[ebp+var_2C0], 1
		mov	[ebp+var_2BC], 0
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_4271C8:				; CODE XREF: _s_client_main+215Dj
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		mov	dword ptr [esp+4], offset aDone_0 ; "DONE\n"
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[ebp+var_28C], 0
		jmp	loc_426874
; ---------------------------------------------------------------------------

loc_4271FE:				; CODE XREF: _s_client_main+179Cj
		xor	edi, edi
		jmp	loc_426DFF
; ---------------------------------------------------------------------------

loc_427205:				; CODE XREF: _s_client_main+1728j
		xor	edi, edi
		jmp	loc_427064
; ---------------------------------------------------------------------------

loc_42720C:				; CODE XREF: _s_client_main+1255j
					; _s_client_main+129Dj
		mov	eax, [ebp+var_2BC]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aCanTOpenSessio ; "Can't open session file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	[ebp+var_28C], 1
		jmp	loc_4268DA
; ---------------------------------------------------------------------------

loc_427247:				; CODE XREF: _s_client_main+20B3j
		mov	dword ptr [esp+4], offset aNo_ign_eof ;	"-no_ign_eof"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_4275D0
		mov	ds:_c_ign_eof, 0
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427277:				; CODE XREF: _s_client_main+15A8j
		mov	eax, [ebp+var_278]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aStreamStreamXm ; "<stream:stream xmlns:stream='http://eth"...
		mov	[esp], esi
		call	_BIO_printf
		mov	dword ptr [esp+8], 2000h
		mov	edi, [ebp+var_294]
		mov	[esp+4], edi
		mov	[esp], esi
		call	_BIO_read
		mov	byte ptr [edi+eax], 0
		jmp	short loc_4272F0
; ---------------------------------------------------------------------------
		jmp	short loc_4272C0
; ---------------------------------------------------------------------------
		align 10h

loc_4272C0:				; CODE XREF: _s_client_main+2321j
					; _s_client_main+2372j
		mov	dword ptr [esp+4], offset aStreamFeatures ; "/stream:features>"
		mov	[esp], edi	; char *
		call	_strstr
		test	eax, eax
		jnz	loc_427697
		mov	dword ptr [esp+8], 2000h
		mov	[esp+4], edi
		mov	[esp], esi
		call	_BIO_read
		mov	byte ptr [edi+eax], 0

loc_4272F0:				; CODE XREF: _s_client_main+231Fj
		mov	dword ptr [esp+4], offset aStarttlsXmlnsU ; "<starttls xmlns='urn:ietf:params:xml:ns"...
		mov	[esp], edi	; char *
		call	_strstr
		test	eax, eax
		jz	short loc_4272C0
		mov	dword ptr [esp+4], offset aStarttlsXmln_0 ; "<starttls xmlns='urn:ietf:params:xml:ns"...
		mov	[esp], esi
		call	_BIO_printf
		mov	dword ptr [esp+8], 2000h
		mov	edi, [ebp+var_290]
		mov	[esp+4], edi
		mov	[esp], esi
		call	_BIO_read
		mov	byte ptr [edi+eax], 0
		mov	dword ptr [esp+4], offset aProceed ; "<proceed"
		mov	[esp], edi	; char *
		call	_strstr
		test	eax, eax
		jz	loc_427697
		mov	eax, [ebp+var_294]
		mov	byte ptr [eax],	0
		jmp	loc_42653E
; ---------------------------------------------------------------------------

loc_427358:				; CODE XREF: _s_client_main+1F8Cj
		mov	[ebp+var_2AC], esi
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 79h
		mov	eax, [ebp+var_29C]
		mov	[esp], eax
		call	_SSL_ctrl
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aMtuTooSmall__0 ; "MTU too small. Must be at least %ld\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, [ebp+var_2AC]
		mov	[esp], eax
		call	_BIO_free
		mov	[ebp+var_28C], 1
		jmp	loc_426874
; ---------------------------------------------------------------------------

loc_4273CC:				; CODE XREF: _s_client_main+1F70j
		mov	dword ptr [esp+4], 27h
		mov	[esp], esi
		call	_BIO_ctrl
		jmp	loc_426394
; ---------------------------------------------------------------------------

loc_4273E1:				; CODE XREF: _s_client_main+158Ej
		call	_BIO_f_buffer
		mov	[esp], eax
		call	_BIO_new
		mov	edi, eax
		mov	[esp+4], esi
		mov	[esp], eax
		call	_BIO_push
		mov	dword ptr [esp+8], 2000h
		mov	eax, [ebp+var_294]
		mov	[esp+4], eax
		mov	[esp], edi
		call	_BIO_gets
		mov	dword ptr [esp+4], offset a_Capability ; ". CAPABILITY\r\n"
		mov	[esp], edi
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	[esp], edi
		call	_BIO_ctrl
		mov	[ebp+var_2AC], 0
		jmp	short loc_42745D
; ---------------------------------------------------------------------------

loc_427452:				; CODE XREF: _s_client_main+2518j
		mov	eax, [ebp+var_294]
		cmp	byte ptr [eax],	2Eh
		jz	short loc_4274AA

loc_42745D:				; CODE XREF: _s_client_main+24C0j
		mov	dword ptr [esp+8], 2000h
		mov	eax, [ebp+var_294]
		mov	[esp+4], eax
		mov	[esp], edi
		call	_BIO_gets
		mov	[ebp+var_2B8], eax
		mov	dword ptr [esp+4], offset aStarttls ; "STARTTLS"
		mov	eax, [ebp+var_294]
		mov	[esp], eax	; char *
		call	_strstr
		test	eax, eax
		jz	short loc_4274A1
		mov	[ebp+var_2AC], 1

loc_4274A1:				; CODE XREF: _s_client_main+2505j
		cmp	[ebp+var_2B8], 3
		jg	short loc_427452

loc_4274AA:				; CODE XREF: _s_client_main+24CBj
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	[esp], edi
		call	_BIO_ctrl
		mov	[esp], edi
		call	_BIO_pop
		mov	[esp], edi
		call	_BIO_free
		cmp	[ebp+var_2AC], 0
		jnz	short loc_4274F8
		mov	dword ptr [esp+4], offset aDidnTFoundStar ; "didn't found STARTTLS in server respons"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf

loc_4274F8:				; CODE XREF: _s_client_main+2551j
		mov	dword ptr [esp+4], offset a_Starttls ; ". STARTTLS\r\n"
		jmp	short loc_427524
; ---------------------------------------------------------------------------

loc_427502:				; CODE XREF: _s_client_main+1581j
		mov	dword ptr [esp+8], 2000h
		mov	eax, [ebp+var_294]
		mov	[esp+4], eax
		mov	[esp], esi
		call	_BIO_read
		mov	dword ptr [esp+4], offset aStls	; "STLS\r\n"

loc_427524:				; CODE XREF: _s_client_main+2570j
					; _s_client_main+263Bj	...
		mov	[esp], esi
		call	_BIO_printf
		mov	dword ptr [esp+8], 2000h
		mov	eax, [ebp+var_290]
		mov	[esp+4], eax
		mov	[esp], esi
		call	_BIO_read
		jmp	loc_42653E
; ---------------------------------------------------------------------------

loc_42754B:				; CODE XREF: _s_client_main+159Bj
		call	_BIO_f_buffer
		mov	[esp], eax
		call	_BIO_new
		mov	edi, eax
		mov	[esp+4], esi
		mov	[esp], eax
		call	_BIO_push
		jmp	short loc_427574
; ---------------------------------------------------------------------------

loc_427568:				; CODE XREF: _s_client_main+2601j
		mov	eax, [ebp+var_294]
		cmp	byte ptr [eax+3], 2Dh
		jnz	short loc_427593

loc_427574:				; CODE XREF: _s_client_main+25D6j
		mov	dword ptr [esp+8], 2000h
		mov	eax, [ebp+var_294]
		mov	[esp+4], eax
		mov	[esp], edi
		call	_BIO_gets
		cmp	eax, 3
		jg	short loc_427568

loc_427593:				; CODE XREF: _s_client_main+25E2j
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	[esp], edi
		call	_BIO_ctrl
		mov	[esp], edi
		call	_BIO_pop
		mov	[esp], edi
		call	_BIO_free
		mov	dword ptr [esp+4], offset aAuthTls ; "AUTH TLS\r\n"
		jmp	loc_427524
; ---------------------------------------------------------------------------

loc_4275D0:				; CODE XREF: _s_client_main+22CFj
		mov	dword ptr [esp+4], offset aPause ; "-pause"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4275FC
		mov	ds:_c_Pause, 1
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4275FC:				; CODE XREF: _s_client_main+2658j
		mov	dword ptr [esp+4], offset aDebug_1 ; "-debug"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_427721
		mov	ds:_c_debug, 1
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42762C:				; CODE XREF: _s_client_main+1F53j
		mov	[ebp+var_260], 0
		mov	[ebp+var_25C], 3D090h
		lea	edi, [ebp+var_260]
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 21h
		mov	[esp], esi
		call	_BIO_ctrl
		mov	[ebp+var_260], 0
		mov	[ebp+var_25C], 3D090h
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 23h
		mov	[esp], esi
		call	_BIO_ctrl
		jmp	loc_426EE9
; ---------------------------------------------------------------------------

loc_427697:				; CODE XREF: _s_client_main+2342j
					; _s_client_main+23B4j
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		mov	[ebp+var_28C], 1
		jmp	loc_426874
; ---------------------------------------------------------------------------

loc_4276B8:				; CODE XREF: _s_client_main+1F2Aj
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		call	ds:__imp__WSAGetLastError@0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aGetsocknameErr ; "getsockname:errno=%d\n"

loc_4276DC:				; CODE XREF: _s_client_main+29DCj
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], 0 ; how
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	ds:__imp__shutdown@8
		push	eax
		push	eax
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	ds:__imp__closesocket@4
		push	eax
		mov	[ebp+var_28C], 1
		jmp	loc_4268DA
; ---------------------------------------------------------------------------

loc_427721:				; CODE XREF: _s_client_main+2684j
		mov	dword ptr [esp+4], offset aTlsextdebug_0 ; "-tlsextdebug"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_427A1B
		mov	ds:_c_tlsextdebug, 1
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427751:				; CODE XREF: _s_client_main+1574j
		call	_BIO_f_buffer
		mov	[esp], eax
		call	_BIO_new
		mov	edi, eax
		mov	[esp+4], esi
		mov	[esp], eax
		call	_BIO_push
		mov	eax, [ebp+var_294]
		jmp	short loc_42778C
; ---------------------------------------------------------------------------
		align 10h

loc_427780:				; CODE XREF: _s_client_main+2813j
		mov	eax, [ebp+var_294]
		cmp	byte ptr [eax+3], 2Dh
		jnz	short loc_4277A5

loc_42778C:				; CODE XREF: _s_client_main+27E2j
		mov	dword ptr [esp+8], 2000h
		mov	[esp+4], eax
		mov	[esp], edi
		call	_BIO_gets
		cmp	eax, 3
		jg	short loc_427780

loc_4277A5:				; CODE XREF: _s_client_main+27FAj
		mov	dword ptr [esp+4], offset aEhloOpenssl_cl ; "EHLO openssl.client.net\r\n"
		mov	[esp], edi
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	[esp], edi
		call	_BIO_ctrl
		mov	[ebp+var_2AC], 0
		mov	eax, [ebp+var_294]
		jmp	short loc_4277FC
; ---------------------------------------------------------------------------
		align 10h

loc_4277F0:				; CODE XREF: _s_client_main+28B1j
		mov	eax, [ebp+var_294]
		cmp	byte ptr [eax+3], 2Dh
		jnz	short loc_427843

loc_4277FC:				; CODE XREF: _s_client_main+2855j
		mov	dword ptr [esp+8], 2000h
		mov	[esp+4], eax
		mov	[esp], edi
		call	_BIO_gets
		mov	[ebp+var_2B8], eax
		mov	dword ptr [esp+4], offset aStarttls ; "STARTTLS"
		mov	eax, [ebp+var_294]
		mov	[esp], eax	; char *
		call	_strstr
		test	eax, eax
		jz	short loc_42783A
		mov	[ebp+var_2AC], 1

loc_42783A:				; CODE XREF: _s_client_main+289Ej
		cmp	[ebp+var_2B8], 3
		jg	short loc_4277F0

loc_427843:				; CODE XREF: _s_client_main+286Aj
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	[esp], edi
		call	_BIO_ctrl
		mov	[esp], edi
		call	_BIO_pop
		mov	[esp], edi
		call	_BIO_free
		cmp	[ebp+var_2AC], 0
		jnz	short loc_427891
		mov	dword ptr [esp+4], offset aDidnTFoundSt_0 ; "didn't found starttls in server respons"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf

loc_427891:				; CODE XREF: _s_client_main+28EAj
		mov	dword ptr [esp+4], offset aStarttls_0 ;	"STARTTLS\r\n"
		jmp	loc_427524
; ---------------------------------------------------------------------------

loc_42789E:				; CODE XREF: _s_client_main+16D8j
		dec	[ebp+var_2F4]
		mov	dword ptr [esp+4], offset aDropConnection ; "drop connection and then reconnect\n"
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], ebx
		call	_SSL_shutdown
		mov	[esp], ebx
		call	_SSL_set_connect_state
		mov	[esp], ebx
		call	_SSL_get_fd
		mov	dword ptr [esp+4], 0 ; how
		mov	[esp], eax	; s
		call	ds:__imp__shutdown@8
		push	eax
		push	eax
		mov	[esp], ebx
		call	_SSL_get_fd
		mov	[esp], eax	; s
		call	ds:__imp__closesocket@4
		push	eax
		mov	[ebp+var_2C4], 0
		mov	[ebp+var_2B4], 0
		jmp	loc_4262EF
; ---------------------------------------------------------------------------

loc_42790F:				; CODE XREF: _s_client_main+1A6Cj
					; _s_client_main+2C8Ej
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		mov	[ebp+var_28C], 1
		jmp	loc_4268DA
; ---------------------------------------------------------------------------

loc_427930:				; CODE XREF: _s_client_main+D62j
		xor	ebx, ebx
		jmp	loc_425D31
; ---------------------------------------------------------------------------

loc_427937:				; CODE XREF: _s_client_main+1AD1j
		mov	eax, [ebp+var_2A8]
		mov	[ebp+var_2C4], eax
		jmp	loc_425CA1
; ---------------------------------------------------------------------------

loc_427948:				; CODE XREF: _s_client_main+138Ej
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		call	ds:__imp__WSAGetLastError@0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aConnectErrnoD ; "connect:errno=%d\n"
		jmp	loc_4276DC
; ---------------------------------------------------------------------------

loc_427971:				; CODE XREF: _s_client_main+1D89j
		dec	eax
		inc	esi
		mov	byte ptr [edi+eax], 0Dh
		dec	edx
		jmp	loc_426D04
; ---------------------------------------------------------------------------

loc_42797D:				; CODE XREF: _s_client_main+1D76j
		mov	ebx, [ebp+var_2AC]
		test	eax, eax
		jz	short loc_4279A3
		mov	dword ptr [esp+8], 724h	; unsigned int
		mov	dword ptr [esp+4], offset aS_client_c ;	"s_client.c"
		mov	dword ptr [esp], offset	aLf_num0_0 ; "lf_num ==	0"
		call	__assert
; ---------------------------------------------------------------------------

loc_4279A3:				; CODE XREF: _s_client_main+29F5j
					; _s_client_main+2AD3j
		cmp	ds:_c_ign_eof, 0
		jnz	short loc_4279D4
		test	esi, esi
		jle	loc_427AA0
		mov	eax, [ebp+lpBuffer]
		mov	al, [eax]
		cmp	al, 51h
		jz	loc_427AA0
		cmp	al, 52h
		jz	loc_427A68
		cmp	al, 42h
		jz	loc_427AD6

loc_4279D4:				; CODE XREF: _s_client_main+2A1Aj
		mov	[ebp+var_2B8], 1
		mov	[ebp+var_2AC], 0
		mov	[ebp+var_2C8], 0
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_4279F7:				; CODE XREF: _s_client_main+1664j
		mov	eax, [ebp+var_2B0]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aErrorWritingSe ; "Error writing session file	%s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_426616
; ---------------------------------------------------------------------------

loc_427A1B:				; CODE XREF: _s_client_main+27A9j
		mov	dword ptr [esp+4], offset aStatus_1 ; "-status"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_427B26
		mov	ds:_c_status_req, 1
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427A4B:				; CODE XREF: _s_client_main+1D27j
		mov	dword ptr [esp+4], 2000h ; nNumberOfBytesToRead
		mov	eax, [ebp+lpBuffer]
		mov	[esp], eax	; lpBuffer
		call	_raw_read_stdin
		mov	esi, eax
		jmp	loc_4279A3
; ---------------------------------------------------------------------------

loc_427A68:				; CODE XREF: _s_client_main+2A36j
		mov	dword ptr [esp+4], offset aRenegotiating ; "RENEGOTIATING\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], ebx
		call	_SSL_renegotiate
		mov	[ebp+var_2B8], 1
		mov	[ebp+var_2AC], 0
		xor	esi, esi
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_427AA0:				; CODE XREF: _s_client_main+2A1Ej
					; _s_client_main+2A2Ej
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		mov	dword ptr [esp+4], offset aDone_0 ; "DONE\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[ebp+var_28C], 0
		jmp	loc_426874
; ---------------------------------------------------------------------------

loc_427AD6:				; CODE XREF: _s_client_main+2A3Ej
		mov	dword ptr [esp+4], offset aHeartbeating_0 ; "HEARTBEATING\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 55h
		mov	[esp], ebx
		call	_SSL_ctrl
		mov	[ebp+var_2B8], 1
		mov	[ebp+var_2AC], 0
		xor	esi, esi
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_427B26:				; CODE XREF: _s_client_main+2AA3j
		mov	dword ptr [esp+4], offset aMsg_0 ; "-msg"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_427C7B
		mov	ds:_c_msg, 1
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427B56:				; CODE XREF: _s_client_main+21BEj
					; DATA XREF: .rdata:off_467390o
		mov	dword ptr [esp+4], offset aWriteWBlock ; jumptable 0042714E case 3
		jmp	loc_42692B
; ---------------------------------------------------------------------------

loc_427B63:				; CODE XREF: _s_client_main+21BEj
					; DATA XREF: .rdata:off_467390o
		test	edi, edi	; jumptable 0042714E case 5
		jnz	short loc_427B94
		test	esi, esi
		jnz	short loc_427B94

loc_427B6B:				; CODE XREF: _s_client_main+2D19j
		mov	[ebp+var_2B8], 0
		jmp	loc_4271A0
; ---------------------------------------------------------------------------

loc_427B7A:				; CODE XREF: _s_client_main+21BEj
					; DATA XREF: .rdata:off_467390o
		mov	dword ptr [esp+4], offset aWriteXBlock ; jumptable 0042714E case 4
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_427B94:				; CODE XREF: _s_client_main+2BD5j
					; _s_client_main+2BD9j
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		call	ds:__imp__WSAGetLastError@0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aWriteErrnoD ; "write:errno=%d\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[ebp+var_28C], 1
		jmp	loc_426874
; ---------------------------------------------------------------------------

loc_427BD4:				; CODE XREF: _s_client_main+1852j
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		call	ds:__imp__WSAGetLastError@0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aBadSelectD ;	"bad select %d\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[ebp+var_28C], 1
		jmp	loc_426874
; ---------------------------------------------------------------------------

loc_427C14:				; CODE XREF: _s_client_main+21BEj
					; DATA XREF: .rdata:off_467390o
		add	[ebp+var_2C8], edi ; jumptable 0042714E	case 0
		sub	esi, edi
		test	edi, edi
		jle	loc_42790F
		xor	eax, eax
		test	esi, esi
		setnle	al
		mov	[ebp+var_2B8], eax
		xor	eax, eax
		test	esi, esi
		setle	al
		mov	[ebp+var_2AC], eax
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_427C43:				; CODE XREF: _s_client_main+21BEj
					; DATA XREF: .rdata:off_467390o
		mov	dword ptr [esp+4], offset aWriteRBlock ; jumptable 0042714E case 2
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[ebp+var_2C0], 1
		mov	[ebp+var_2B8], 0
		mov	[ebp+var_2BC], 0
		jmp	loc_426586	; jumptable 00426836 default case
; ---------------------------------------------------------------------------

loc_427C7B:				; CODE XREF: _s_client_main+2BAEj
		mov	dword ptr [esp+4], offset aShowcerts ; "-showcerts"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_427CE5
		mov	ds:_c_showcerts, 1
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427CA7:				; CODE XREF: _s_client_main+21BEj
					; DATA XREF: .rdata:off_467390o
		test	esi, esi	; jumptable 0042714E case 6
		jz	loc_427B6B
		mov	edi, [ebp+var_2A4]
		mov	esi, [ebp+var_28C]
		mov	ebx, [ebp+var_2A8]
		mov	dword ptr [esp+4], offset aShutdown ; "shutdown\n"
		mov	eax, ds:_bio_c_out
		mov	[esp], eax
		call	_BIO_printf
		mov	[ebp+var_28C], 0
		jmp	loc_426874
; ---------------------------------------------------------------------------

loc_427CE5:				; CODE XREF: _s_client_main+2D03j
		mov	dword ptr [esp+4], offset aNbio_test_0 ; "-nbio_test"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_427D11
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_308], 1
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427D11:				; CODE XREF: _s_client_main+2D6Dj
		mov	dword ptr [esp+4], offset aState_0 ; "-state"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_427D3D
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_2F8], 1
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427D3D:				; CODE XREF: _s_client_main+2D99j
		mov	dword ptr [esp+4], offset aPsk_identity	; "-psk_identity"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_427D78
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	_psk_identity, eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427D78:				; CODE XREF: _s_client_main+2DC5j
		mov	dword ptr [esp+4], offset aPsk_0 ; "-psk"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_427DF5
		mov	eax, [ebp+arg_0]
		lea	esi, [eax-1]
		mov	[ebp+arg_0], esi
		test	esi, esi
		jle	loc_4254E0
		lea	edx, [ebx+4]
		mov	[ebp+arg_4], edx
		mov	ebx, [ebx+4]
		mov	ds:_psk_key, ebx
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, ebx
		repne scasb
		mov	eax, ecx
		not	eax
		dec	eax
		mov	[ebp+var_28C], eax
		xor	edi, edi

loc_427DC8:				; CODE XREF: _s_client_main+2E63j
		cmp	edi, [ebp+var_28C]
		jz	loc_427E61
		mov	[ebp+var_31C], edx
		xor	eax, eax
		mov	al, [ebx+edi]
		mov	[esp], eax	; int
		call	ds:__imp__isxdigit
		test	eax, eax
		jz	short loc_427E43
		inc	edi
		mov	edx, [ebp+var_31C]
		jmp	short loc_427DC8
; ---------------------------------------------------------------------------

loc_427DF5:				; CODE XREF: _s_client_main+2E00j
		mov	dword ptr [esp+4], offset aSrpuser ; "-srpuser"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_427E6A
		mov	eax, [ebp+arg_0]
		dec	eax
		mov	[ebp+arg_0], eax
		test	eax, eax
		jle	loc_4254E0
		lea	eax, [ebx+4]
		mov	[ebp+arg_4], eax
		mov	eax, [ebx+4]
		mov	[ebp+var_234], eax
		call	_TLSv1_client_method
		mov	[ebp+var_29C], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427E43:				; CODE XREF: _s_client_main+2E5Aj
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset aNotAHexNumbe_0 ; "Not a hex number '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_4254E0
; ---------------------------------------------------------------------------

loc_427E61:				; CODE XREF: _s_client_main+2E3Ej
		mov	ebx, edx
		mov	edx, esi
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427E6A:				; CODE XREF: _s_client_main+2E7Dj
		mov	dword ptr [esp+4], offset aSrppass ; "-srppass"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_427EB8
		mov	eax, [ebp+arg_0]
		dec	eax
		mov	[ebp+arg_0], eax
		test	eax, eax
		jle	loc_4254E0
		lea	eax, [ebx+4]
		mov	[ebp+arg_4], eax
		mov	eax, [ebx+4]
		mov	[ebp+var_2E0], eax
		call	_TLSv1_client_method
		mov	[ebp+var_29C], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427EB8:				; CODE XREF: _s_client_main+2EF2j
		mov	dword ptr [esp+4], offset aSrp_strength	; "-srp_strength"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_427F27
		mov	eax, [ebp+arg_0]
		dec	eax
		mov	[ebp+arg_0], eax
		test	eax, eax
		jle	loc_4254E0
		lea	eax, [ebx+4]
		mov	[ebp+arg_4], eax
		mov	eax, [ebx+4]
		mov	[esp], eax	; char *
		call	_atoi
		mov	[ebp+var_224], eax
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aSrpMinimalLeng ; "SRP minimal length	for N is %d\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		call	_TLSv1_client_method
		mov	[ebp+var_29C], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_427F27:				; CODE XREF: _s_client_main+2F40j
		mov	dword ptr [esp+4], offset aSrp_lateuser	; "-srp_lateuser"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_428021
		mov	dword ptr [esp+4], offset aSrp_moregrou_0 ; "-srp_moregroups"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_42811E
		mov	dword ptr [esp+4], offset aSsl3_0 ; "-ssl3"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_428108
		mov	dword ptr [esp+4], offset aTls1_2_0 ; "-tls1_2"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_42813E
		mov	dword ptr [esp+4], offset aTls1_1_0 ; "-tls1_1"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_4280F2
		mov	dword ptr [esp+4], offset aTls1_0 ; "-tls1"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_42808D
		mov	dword ptr [esp+4], offset aDtls1_0 ; "-dtls1"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jz	short loc_42806D
		mov	dword ptr [esp+4], offset aFallback_scsv ; "-fallback_scsv"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428041
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_310], 1
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428021:				; CODE XREF: _s_client_main+2FAFj
		call	_TLSv1_client_method
		mov	[ebp+var_29C], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_318], 1
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428041:				; CODE XREF: _s_client_main+307Dj
		mov	dword ptr [esp+4], offset aTimeout_0 ; "-timeout"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4280A3
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_314], 1
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42806D:				; CODE XREF: _s_client_main+3063j
		call	_DTLSv1_client_method
		mov	[ebp+var_29C], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_30C], 2
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42808D:				; CODE XREF: _s_client_main+3045j
		call	_TLSv1_client_method
		mov	[ebp+var_29C], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4280A3:				; CODE XREF: _s_client_main+30C9j
		mov	dword ptr [esp+4], offset aMtu_0 ; "-mtu"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_428154
		mov	eax, [ebp+arg_0]
		dec	eax
		mov	[ebp+arg_0], eax
		test	eax, eax
		jle	loc_4254E0
		lea	eax, [ebx+4]
		mov	[ebp+arg_4], eax
		mov	eax, [ebx+4]
		mov	[esp], eax	; char *
		call	_atol
		mov	[ebp+var_2DC], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4280F2:				; CODE XREF: _s_client_main+3027j
		call	_TLSv1_1_client_method
		mov	[ebp+var_29C], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428108:				; CODE XREF: _s_client_main+2FEBj
		call	_SSLv3_client_method
		mov	[ebp+var_29C], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42811E:				; CODE XREF: _s_client_main+2FCDj
		mov	[ebp+var_228], 1
		call	_TLSv1_client_method
		mov	[ebp+var_29C], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42813E:				; CODE XREF: _s_client_main+3009j
		call	_TLSv1_2_client_method
		mov	[ebp+var_29C], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428154:				; CODE XREF: _s_client_main+312Bj
		mov	dword ptr [esp+4], offset aBugs_0 ; "-bugs"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428180
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_300], 1
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428180:				; CODE XREF: _s_client_main+31DCj
		mov	dword ptr [esp+4], offset aKeyform_5 ; "-keyform"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4281CB
		mov	eax, [ebp+arg_0]
		dec	eax
		mov	[ebp+arg_0], eax
		test	eax, eax
		jle	loc_4254E0
		lea	eax, [ebx+4]
		mov	[ebp+arg_4], eax
		mov	eax, [ebx+4]
		mov	[esp], eax	; char *
		call	_str2fmt
		mov	[ebp+var_2E8], eax
		mov	edx, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4281CB:				; CODE XREF: _s_client_main+3208j
		mov	dword ptr [esp+4], offset aPass_2 ; "-pass"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428207
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	[ebp+var_2C8], eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428207:				; CODE XREF: _s_client_main+3253j
		mov	dword ptr [esp+4], offset aKey_3 ; "-key"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428243
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	[ebp+var_2C4], eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428243:				; CODE XREF: _s_client_main+328Fj
		mov	dword ptr [esp+4], offset aReconnect ; "-reconnect"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42826F
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_2F4], 5
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42826F:				; CODE XREF: _s_client_main+32CBj
		mov	dword ptr [esp+4], offset aCapath_2 ; "-CApath"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4282AB
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	[ebp+var_2EC], eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4282AB:				; CODE XREF: _s_client_main+32F7j
		mov	dword ptr [esp+4], offset aCafile_2 ; "-CAfile"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4282E7
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	[ebp+var_2F0], eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4282E7:				; CODE XREF: _s_client_main+3333j
		mov	dword ptr [esp+4], offset aNo_tls1_2_0 ; "-no_tls1_2"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428313
		or	[ebp+var_2B8], 8000000h
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428313:				; CODE XREF: _s_client_main+336Fj
		mov	dword ptr [esp+4], offset aNo_tls1_1_0 ; "-no_tls1_1"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42833F
		or	[ebp+var_2B8], 10000000h
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42833F:				; CODE XREF: _s_client_main+339Bj
		mov	dword ptr [esp+4], offset aNo_tls1_0 ; "-no_tls1"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42836B
		or	[ebp+var_2B8], 4000000h
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42836B:				; CODE XREF: _s_client_main+33C7j
		mov	dword ptr [esp+4], offset aNo_ssl3_0 ; "-no_ssl3"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428397
		or	[ebp+var_2B8], 2000000h
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428397:				; CODE XREF: _s_client_main+33F3j
		mov	dword ptr [esp+4], offset aNo_ssl2_0 ; "-no_ssl2"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4283C3
		or	[ebp+var_2B8], 1000000h
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4283C3:				; CODE XREF: _s_client_main+341Fj
		mov	dword ptr [esp+4], offset aNo_comp_0 ; "-no_comp"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4283EF
		or	[ebp+var_2B8], 20000h
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4283EF:				; CODE XREF: _s_client_main+344Bj
		mov	dword ptr [esp+4], offset aNo_ticket_0 ; "-no_ticket"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42841B
		or	[ebp+var_2B8], 4000h
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42841B:				; CODE XREF: _s_client_main+3477j
		mov	dword ptr [esp+4], offset aNextprotoneg_1 ; "-nextprotoneg"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428457
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	[ebp+var_2AC], eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428457:				; CODE XREF: _s_client_main+34A3j
		mov	dword ptr [esp+4], offset aServerpref_0	; "-serverpref"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428483
		or	[ebp+var_2B8], 400000h
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428483:				; CODE XREF: _s_client_main+34DFj
		mov	dword ptr [esp+4], offset aLegacy_reneg_2 ; "-legacy_renegotiation"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4284AF
		or	[ebp+var_2B8], 40000h
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4284AF:				; CODE XREF: _s_client_main+350Bj
		mov	dword ptr [esp+4], offset aLegacy_server_ ; "-legacy_server_connect"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4284D8
		or	[ebp+var_2B8], 4
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4284D8:				; CODE XREF: _s_client_main+3537j
		mov	dword ptr [esp+4], offset aNo_legacy_serv ; "-no_legacy_server_connect"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428504
		mov	edx, [ebp+arg_0]
		mov	[ebp+nfds], 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428504:				; CODE XREF: _s_client_main+3560j
		mov	dword ptr [esp+4], offset aCipher_0 ; "-cipher"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428540
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	[ebp+var_2FC], eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428540:				; CODE XREF: _s_client_main+358Cj
		mov	dword ptr [esp+4], offset aNbio_0 ; "-nbio"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42856C
		mov	ds:_c_nbio, 1
		mov	edx, [ebp+arg_0]
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42856C:				; CODE XREF: _s_client_main+35C8j
		mov	dword ptr [esp+4], offset aStarttls_1 ;	"-starttls"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_42862B
		mov	eax, [ebp+arg_0]
		lea	esi, [eax-1]
		mov	[ebp+arg_0], esi
		test	esi, esi
		jle	loc_4254E0
		lea	edi, [ebx+4]
		mov	[ebp+arg_4], edi
		mov	ebx, [ebx+4]
		mov	dword ptr [esp+4], offset aSmtp	; "smtp"
		mov	[esp], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_42868D
		mov	dword ptr [esp+4], offset aPop3	; "pop3"
		mov	[esp], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_42867A
		mov	dword ptr [esp+4], offset aImap	; "imap"
		mov	[esp], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_4286A0
		mov	dword ptr [esp+4], offset aFtp ; "ftp"
		mov	[esp], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	short loc_428667
		mov	dword ptr [esp+4], offset aXmpp	; "xmpp"
		mov	[esp], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_4254E0
		mov	ebx, edi
		mov	edx, esi
		mov	[ebp+var_2B4], 5
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42862B:				; CODE XREF: _s_client_main+35F4j
		mov	dword ptr [esp+4], offset aEngine_19 ; "-engine"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4286B3
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	[ebp+nNumberOfBytesToWrite], eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428667:				; CODE XREF: _s_client_main+366Ej
		mov	ebx, edi
		mov	edx, esi
		mov	[ebp+var_2B4], 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42867A:				; CODE XREF: _s_client_main+363Ej
		mov	ebx, edi
		mov	edx, esi
		mov	[ebp+var_2B4], 2
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42868D:				; CODE XREF: _s_client_main+3626j
		mov	ebx, edi
		mov	edx, esi
		mov	[ebp+var_2B4], 1
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4286A0:				; CODE XREF: _s_client_main+3656j
		mov	ebx, edi
		mov	edx, esi
		mov	[ebp+var_2B4], 3
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4286B3:				; CODE XREF: _s_client_main+36B3j
		mov	dword ptr [esp+4], offset aSsl_client_eng ; "-ssl_client_engine"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4286EF
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	[ebp+var_2D0], eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4286EF:				; CODE XREF: _s_client_main+373Bj
		mov	dword ptr [esp+4], offset aRand_8 ; "-rand"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_42872B
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	[ebp+var_2D4], eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_42872B:				; CODE XREF: _s_client_main+3777j
		mov	dword ptr [esp+4], offset aServername_0	; "-servername"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428767
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	[ebp+var_2D8], eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_428767:				; CODE XREF: _s_client_main+37B3j
		mov	dword ptr [esp+4], offset aUse_srtp_0 ;	"-use_srtp"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4287A2
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	ds:_srtp_profiles_0, eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4287A2:				; CODE XREF: _s_client_main+37EFj
		mov	dword ptr [esp+4], offset aKeymatexport_3 ; "-keymatexport"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4287DD
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	[ebp+arg_0], edx
		test	edx, edx
		jle	loc_4254E0
		mov	eax, [ebx+4]
		mov	ds:_keymatexportlabel_0, eax
		add	ebx, 4
		jmp	loc_4253C8
; ---------------------------------------------------------------------------

loc_4287DD:				; CODE XREF: _s_client_main+382Aj
		mov	dword ptr [esp+4], offset aKeymatexport_4 ; "-keymatexportlen"
		mov	eax, [ebp+var_28C]
		mov	[esp], eax	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_428829
		mov	eax, [ebp+arg_0]
		dec	eax
		mov	[ebp+arg_0], eax
		test	eax, eax
		jle	loc_4254E0
		lea	eax, [ebx+4]
		mov	[ebp+arg_4], eax
		mov	eax, [ebx+4]
		mov	[esp], eax	; char *
		call	_atoi
		mov	_keymatexportlen_0, eax
		test	eax, eax
		jnz	loc_425434
		jmp	loc_4254E0
; ---------------------------------------------------------------------------

loc_428829:				; CODE XREF: _s_client_main+3865j
		mov	eax, [ebp+var_28C]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnknownOpti_15 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_4254E0
_s_client_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_KDF1_SHA1	proc near		; DATA XREF: _speed_main+6EB1o

arg_C		= dword	ptr  10h

		push	ebx
		mov	eax, [esp+4+arg_C]
		cmp	dword ptr [eax], 13h
		jbe	short loc_428870
		mov	dword ptr [eax], 14h
		pop	ebx
		jmp	_SHA1
; ---------------------------------------------------------------------------
		align 10h

loc_428870:				; CODE XREF: _KDF1_SHA1+8j
		xor	eax, eax
		pop	ebx
		retn
_KDF1_SHA1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; DWORD	__stdcall sleepy(LPVOID	lpThreadParameter)
_sleepy@4	proc near		; DATA XREF: _speed_main+919o
					; _speed_main+B39o ...

lpThreadParameter= dword ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	ds:_schlock, 1
		mov	eax, ds:_lapse
		mov	[esp], eax	; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	eax
		mov	ds:_run, 0
		xor	eax, eax
		leave
		retn	4
_sleepy@4	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _get_dsa512
_get_dsa512	proc near		; CODE XREF: _speed_main+67Fp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebx
		sub	esp, 18h
		call	_DSA_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_428990
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 14h
		mov	[esp+1Ch+var_1C], offset _dsa512_priv
		call	_BN_bin2bn
		mov	[ebx+1Ch], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 41h
		mov	[esp+1Ch+var_1C], offset _dsa512_pub
		call	_BN_bin2bn
		mov	[ebx+18h], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 40h
		mov	[esp+1Ch+var_1C], offset _dsa512_p
		call	_BN_bin2bn
		mov	[ebx+0Ch], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 14h
		mov	[esp+1Ch+var_1C], offset _dsa512_q
		call	_BN_bin2bn
		mov	[ebx+10h], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 40h
		mov	[esp+1Ch+var_1C], offset _dsa512_g
		call	_BN_bin2bn
		mov	[ebx+14h], eax
		mov	ecx, [ebx+1Ch]
		test	ecx, ecx
		jz	short loc_428990
		mov	edx, [ebx+18h]
		test	edx, edx
		jz	short loc_428990
		mov	ecx, [ebx+0Ch]
		test	ecx, ecx
		jz	short loc_428990
		mov	edx, [ebx+10h]
		test	edx, edx
		jz	short loc_428990
		test	eax, eax
		jz	short loc_428990
		mov	eax, ebx
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_428990:				; CODE XREF: _get_dsa512+Dj
					; _get_dsa512+B3j ...
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
_get_dsa512	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _get_dsa1024
_get_dsa1024	proc near		; CODE XREF: _speed_main+68Ap

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebx
		sub	esp, 18h
		call	_DSA_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_428A80
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 14h
		mov	[esp+1Ch+var_1C], offset _dsa1024_priv
		call	_BN_bin2bn
		mov	[ebx+1Ch], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 80h
		mov	[esp+1Ch+var_1C], offset _dsa1024_pub
		call	_BN_bin2bn
		mov	[ebx+18h], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 80h
		mov	[esp+1Ch+var_1C], offset _dsa1024_p
		call	_BN_bin2bn
		mov	[ebx+0Ch], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 14h
		mov	[esp+1Ch+var_1C], offset _dsa1024_q
		call	_BN_bin2bn
		mov	[ebx+10h], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 80h
		mov	[esp+1Ch+var_1C], offset _dsa1024_g
		call	_BN_bin2bn
		mov	[ebx+14h], eax
		mov	ecx, [ebx+1Ch]
		test	ecx, ecx
		jz	short loc_428A80
		mov	edx, [ebx+18h]
		test	edx, edx
		jz	short loc_428A80
		mov	ecx, [ebx+0Ch]
		test	ecx, ecx
		jz	short loc_428A80
		mov	edx, [ebx+10h]
		test	edx, edx
		jz	short loc_428A80
		test	eax, eax
		jz	short loc_428A80
		mov	eax, ebx
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_428A80:				; CODE XREF: _get_dsa1024+Dj
					; _get_dsa1024+B3j ...
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
_get_dsa1024	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _get_dsa2048
_get_dsa2048	proc near		; CODE XREF: _speed_main+695p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebx
		sub	esp, 18h
		call	_DSA_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_428B70
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 14h
		mov	[esp+1Ch+var_1C], offset _dsa2048_priv
		call	_BN_bin2bn
		mov	[ebx+1Ch], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 100h
		mov	[esp+1Ch+var_1C], offset _dsa2048_pub
		call	_BN_bin2bn
		mov	[ebx+18h], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 100h
		mov	[esp+1Ch+var_1C], offset _dsa2048_p
		call	_BN_bin2bn
		mov	[ebx+0Ch], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 14h
		mov	[esp+1Ch+var_1C], offset _dsa2048_q
		call	_BN_bin2bn
		mov	[ebx+10h], eax
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 100h
		mov	[esp+1Ch+var_1C], offset _dsa2048_g
		call	_BN_bin2bn
		mov	[ebx+14h], eax
		mov	ecx, [ebx+1Ch]
		test	ecx, ecx
		jz	short loc_428B70
		mov	edx, [ebx+18h]
		test	edx, edx
		jz	short loc_428B70
		mov	ecx, [ebx+0Ch]
		test	ecx, ecx
		jz	short loc_428B70
		mov	edx, [ebx+10h]
		test	edx, edx
		jz	short loc_428B70
		test	eax, eax
		jz	short loc_428B70
		mov	eax, ebx
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_428B70:				; CODE XREF: _get_dsa2048+Dj
					; _get_dsa2048+B3j ...
		xor	eax, eax
		add	esp, 18h
		pop	ebx
		retn
_get_dsa2048	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _speed_main
_speed_main	proc near		; DATA XREF: .data:00455148o

var_2964	= dword	ptr -2964h
var_2960	= qword	ptr -2960h
var_2958	= dword	ptr -2958h
var_2954	= dword	ptr -2954h
var_2950	= qword	ptr -2950h
var_2948	= qword	ptr -2948h
var_2940	= qword	ptr -2940h
var_2938	= qword	ptr -2938h
var_2930	= dword	ptr -2930h
var_292C	= dword	ptr -292Ch
var_2928	= dword	ptr -2928h
var_2924	= dword	ptr -2924h
var_2920	= dword	ptr -2920h
var_291C	= dword	ptr -291Ch
var_2918	= dword	ptr -2918h
var_2914	= dword	ptr -2914h
var_2910	= dword	ptr -2910h
var_290C	= dword	ptr -290Ch
var_2908	= dword	ptr -2908h
var_2904	= dword	ptr -2904h
var_2900	= dword	ptr -2900h
var_28FC	= dword	ptr -28FCh
var_28EC	= dword	ptr -28ECh
var_28E8	= dword	ptr -28E8h
var_28E4	= dword	ptr -28E4h
var_28E0	= dword	ptr -28E0h
var_28DC	= byte ptr -28DCh
var_28CC	= byte ptr -28CCh
var_28BC	= byte ptr -28BCh
var_28AC	= byte ptr -28ACh
var_289C	= byte ptr -289Ch
var_2888	= byte ptr -2888h
var_2874	= byte ptr -2874h
var_2854	= byte ptr -2854h
var_2834	= byte ptr -2834h
var_2814	= dword	ptr -2814h
var_27D4	= dword	ptr -27D4h
var_2794	= dword	ptr -2794h
var_2754	= dword	ptr -2754h
var_2750	= dword	ptr -2750h
var_274C	= dword	ptr -274Ch
var_2748	= dword	ptr -2748h
var_2744	= dword	ptr -2744h
var_2740	= dword	ptr -2740h
var_273C	= dword	ptr -273Ch
var_2738	= dword	ptr -2738h
var_2734	= dword	ptr -2734h
var_2730	= dword	ptr -2730h
var_272C	= dword	ptr -272Ch
var_2728	= dword	ptr -2728h
var_2724	= dword	ptr -2724h
var_2720	= dword	ptr -2720h
var_271C	= dword	ptr -271Ch
var_2718	= dword	ptr -2718h
var_2714	= dword	ptr -2714h
var_2710	= dword	ptr -2710h
var_270C	= dword	ptr -270Ch
var_2708	= dword	ptr -2708h
var_2704	= dword	ptr -2704h
var_2700	= dword	ptr -2700h
var_26FC	= dword	ptr -26FCh
var_26F8	= dword	ptr -26F8h
var_26F4	= dword	ptr -26F4h
var_26F0	= dword	ptr -26F0h
var_26EC	= dword	ptr -26ECh
var_26E8	= dword	ptr -26E8h
var_26E4	= dword	ptr -26E4h
var_26E0	= dword	ptr -26E0h
var_26DC	= dword	ptr -26DCh
var_26D8	= dword	ptr -26D8h
var_26D4	= byte ptr -26D4h
var_2694	= byte ptr -2694h
var_2654	= byte ptr -2654h
var_2618	= dword	ptr -2618h
var_2614	= dword	ptr -2614h
var_2610	= dword	ptr -2610h
var_260C	= dword	ptr -260Ch
var_2608	= dword	ptr -2608h
var_2604	= dword	ptr -2604h
var_2600	= dword	ptr -2600h
var_25FC	= dword	ptr -25FCh
var_25F8	= dword	ptr -25F8h
var_25F4	= dword	ptr -25F4h
var_25F0	= dword	ptr -25F0h
var_25EC	= dword	ptr -25ECh
var_25E8	= dword	ptr -25E8h
var_25E4	= dword	ptr -25E4h
var_25DC	= dword	ptr -25DCh
var_25D8	= dword	ptr -25D8h
var_25D4	= dword	ptr -25D4h
var_25D0	= dword	ptr -25D0h
var_25CC	= dword	ptr -25CCh
var_25C8	= dword	ptr -25C8h
var_25C4	= dword	ptr -25C4h
var_25C0	= dword	ptr -25C0h
var_25BC	= dword	ptr -25BCh
var_25B8	= dword	ptr -25B8h
var_25B4	= dword	ptr -25B4h
var_25B0	= dword	ptr -25B0h
var_25AC	= dword	ptr -25ACh
var_25A8	= dword	ptr -25A8h
var_25A4	= dword	ptr -25A4h
var_25A0	= dword	ptr -25A0h
var_259C	= byte ptr -259Ch
var_251C	= byte ptr -251Ch
var_249C	= byte ptr -249Ch
var_241C	= byte ptr -241Ch
var_239C	= byte ptr -239Ch
var_2318	= byte ptr -2318h
var_228C	= byte ptr -228Ch
var_21BC	= byte ptr -21BCh
var_20E4	= byte ptr -20E4h
var_1FF0	= byte ptr -1FF0h
var_1EFC	= byte ptr -1EFCh
var_1E08	= byte ptr -1E08h
var_1D08	= byte ptr -1D08h
var_1C08	= byte ptr -1C08h
var_1B08	= byte ptr -1B08h
var_1A08	= byte ptr -1A08h
var_18F0	= byte ptr -18F0h
var_17D8	= byte ptr -17D8h
var_16C0	= byte ptr -16C0h
var_1468	= byte ptr -1468h
var_1060	= dword	ptr -1060h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		mov	eax, 298Ch
		call	___chkstk_ms
		sub	esp, eax
		mov	_usertime, 0FFFFFFFFh
		mov	edx, offset _results
		xor	eax, eax
		mov	ecx, 12Ch
		mov	edi, edx
		rep stosd
		mov	cl, 3
		lea	edi, [ebp+var_2914]
		rep stosd
		mov	cl, 10h
		lea	edi, [ebp+var_2814]
		rep stosd
		mov	cl, 10h
		lea	edi, [ebp+var_27D4]
		rep stosd
		mov	cl, 10h
		lea	edi, [ebp+var_2794]
		rep stosd
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_42EB12

loc_428BE2:				; CODE XREF: _speed_main+5FA6j
					; _speed_main+5FD7j
		mov	dword ptr [esp+4], 0
		mov	[esp], ebx
		call	_load_config
		test	eax, eax
		jnz	loc_428CC0
		lea	eax, [ebp+var_28FC]
		mov	[ebp+var_2954],	eax

loc_428C06:				; CODE XREF: _speed_main+60E9j
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	esi, 1
		lea	ebx, [ebp+var_28EC]

loc_428C1E:				; CODE XREF: _speed_main+5B89j
					; _speed_main+6129j
		mov	edi, [ebp+var_2954]

loc_428C24:				; CODE XREF: _speed_main+B7j
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_428C32
		mov	[esp], eax
		call	_RSA_free

loc_428C32:				; CODE XREF: _speed_main+A8j
		add	edi, 4
		cmp	edi, ebx
		jnz	short loc_428C24
		lea	edi, [ebp+var_2914]
		lea	ebx, [ebp+var_2908]

loc_428C45:				; CODE XREF: _speed_main+D8j
		mov	eax, [edi]
		test	eax, eax
		jz	short loc_428C53
		mov	[esp], eax
		call	_DSA_free

loc_428C53:				; CODE XREF: _speed_main+C9j
		add	edi, 4
		cmp	edi, ebx
		jnz	short loc_428C45
		lea	ebx, [ebp+var_2814]

loc_428C60:				; CODE XREF: _speed_main+F9j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_428C6E
		mov	[esp], eax
		call	_EC_KEY_free

loc_428C6E:				; CODE XREF: _speed_main+E4j
		add	ebx, 4
		lea	eax, [ebp+var_27D4]
		cmp	ebx, eax
		jnz	short loc_428C60
		xor	ebx, ebx
		lea	esi, [esi+0]

loc_428C80:				; CODE XREF: _speed_main+12Aj
		mov	eax, [ebp+ebx*4+var_27D4]
		test	eax, eax
		jz	short loc_428C93
		mov	[esp], eax
		call	_EC_KEY_free

loc_428C93:				; CODE XREF: _speed_main+109j
		mov	eax, [ebp+ebx*4+var_2794]
		test	eax, eax
		jz	short loc_428CA6
		mov	[esp], eax
		call	_EC_KEY_free

loc_428CA6:				; CODE XREF: _speed_main+11Cj
		inc	ebx
		cmp	ebx, 10h
		jnz	short loc_428C80
		mov	eax, esi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_428CC0:				; CODE XREF: _speed_main+74j
		lea	edi, [ebp+var_28FC]
		mov	[ebp+var_2954],	edi
		xor	ebx, ebx
		mov	ecx, 4
		mov	eax, ebx
		rep stosd
		mov	dword ptr [esp+8], 2ABh
		mov	dword ptr [esp+4], offset aSpeed_c ; "speed.c"
		mov	dword ptr [esp], 2001h
		call	_CRYPTO_malloc
		mov	[ebp+var_292C],	eax
		test	eax, eax
		jz	loc_42EC54
		mov	dword ptr [esp+8], 2AFh
		mov	dword ptr [esp+4], offset aSpeed_c ; "speed.c"
		mov	dword ptr [esp], 2001h
		call	_CRYPTO_malloc
		mov	[ebp+var_2930],	eax
		test	eax, eax
		jz	loc_42EC6E
		lea	edx, [ebp+var_16C0]
		mov	ecx, 96h
		mov	edi, edx
		mov	eax, ebx
		rep stosd
		mov	[ebp+var_291C],	0
		mov	[ebp+var_2918],	0
		mov	cl, 8
		lea	edi, [ebp+var_2834]
		rep stosd
		mov	cl, 1Eh
		lea	edi, [ebp+var_2614]
		rep stosd
		mov	[ebp+var_28EC],	0
		mov	[ebp+var_28E8],	0
		mov	[ebp+var_28E4],	0
		mov	[ebp+var_28E0],	0
		mov	[ebp+var_2908],	0
		mov	[ebp+var_2904],	0
		mov	[ebp+var_2900],	0
		mov	cl, 10h
		lea	edi, [ebp+var_2754]
		rep stosd
		mov	cl, 10h
		lea	edi, [ebp+var_2714]
		rep stosd
		mov	eax, [ebp+arg_4]
		lea	ebx, [eax+4]
		mov	eax, [ebp+arg_0]
		dec	eax
		mov	dword ptr [ebp+var_2938], eax
		mov	[ebp+var_2958],	0
		mov	dword ptr [ebp+var_2948], 0
		mov	dword ptr [ebp+var_2950], 0
		jz	loc_428FBD
		mov	dword ptr [ebp+var_2940], 0
		jmp	short loc_428E25
; ---------------------------------------------------------------------------
		align 10h

loc_428E00:				; CODE XREF: _speed_main+2C3j
		mov	_usertime, 0
		dec	dword ptr [ebp+var_2940]

loc_428E10:				; CODE XREF: _speed_main+309j
					; _speed_main+330j ...
		add	ebx, 4
		inc	dword ptr [ebp+var_2940]
		dec	dword ptr [ebp+var_2938]
		jz	loc_428FAF

loc_428E25:				; CODE XREF: _speed_main+27Cj
		mov	eax, [ebx]
		mov	edx, dword ptr [ebp+var_2938]
		test	edx, edx
		jle	loc_428F40
		mov	edi, offset aElapsed ; "-elapsed"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	short loc_428E00
		mov	edi, offset aEvp ; "-evp"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_428E90
		lea	esi, [ebx+4]
		dec	dword ptr [ebp+var_2938]
		jz	loc_42F5D0
		mov	eax, [ebx+4]
		mov	[esp], eax
		call	_EVP_get_cipherbyname
		mov	dword ptr [ebp+var_2950], eax
		test	eax, eax
		jz	loc_42E69C

loc_428E7D:				; CODE XREF: _speed_main+5B2Fj
		mov	[ebp+var_25BC],	1
		mov	ebx, esi
		jmp	short loc_428E10
; ---------------------------------------------------------------------------
		align 10h

loc_428E90:				; CODE XREF: _speed_main+2D3j
		mov	edi, offset aDecrypt_0 ; "-decrypt"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_428EC0
		dec	dword ptr [ebp+var_2940]
		mov	[ebp+var_2958],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------
		align 10h

loc_428EC0:				; CODE XREF: _speed_main+31Ej
		mov	edi, offset aEngine_20 ; "-engine"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_428F10
		lea	esi, [ebx+4]
		dec	dword ptr [ebp+var_2938]
		jz	loc_42FA77
		mov	eax, [ebx+4]
		mov	dword ptr [esp+8], 0
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_setup_engine
		dec	dword ptr [ebp+var_2940]
		mov	ebx, esi
		jmp	loc_428E10
; ---------------------------------------------------------------------------
		align 10h

loc_428F10:				; CODE XREF: _speed_main+34Ej
		mov	edi, offset aMr	; "-mr"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_428F40
		mov	ds:_mr,	1
		dec	dword ptr [ebp+var_2940]
		jmp	loc_428E10
; ---------------------------------------------------------------------------
		align 10h

loc_428F40:				; CODE XREF: _speed_main+2AFj
					; _speed_main+39Ej
		mov	edi, offset aMdc2 ; "mdc2"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_428F60
		mov	[ebp+var_2610],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------
		align 10h

loc_428F60:				; CODE XREF: _speed_main+3CEj
		mov	edi, offset aMd4 ; "md4"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jz	short loc_428FA0
		mov	edi, offset aMd5 ; "md5"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	loc_42E835
		mov	[ebp+var_2608],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------
		align 10h

loc_428FA0:				; CODE XREF: _speed_main+3EEj
		mov	[ebp+var_260C],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_428FAF:				; CODE XREF: _speed_main+29Fj
		mov	eax, dword ptr [ebp+var_2940]
		test	eax, eax
		jnz	loc_42916E

loc_428FBD:				; CODE XREF: _speed_main+26Cj
		mov	eax, 1
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_428FD0:				; CODE XREF: _speed_main+466j
		cmp	eax, 17h
		jz	short loc_428FE5
		mov	[ebp+eax*4+var_2618], 1
		cmp	eax, 1Eh
		jz	short loc_428FE8

loc_428FE5:				; CODE XREF: _speed_main+453j
		inc	eax
		jmp	short loc_428FD0
; ---------------------------------------------------------------------------

loc_428FE8:				; CODE XREF: _speed_main+463j
		mov	[ebp+var_28EC],	1
		mov	[ebp+var_28E8],	1
		mov	[ebp+var_28E4],	1
		mov	[ebp+var_28E0],	1
		mov	[ebp+var_2908],	1
		mov	[ebp+var_2904],	1
		mov	[ebp+var_2900],	1
		mov	[ebp+var_2754],	1
		mov	[ebp+var_2750],	1
		mov	[ebp+var_274C],	1
		mov	[ebp+var_2748],	1
		mov	[ebp+var_2744],	1
		mov	[ebp+var_2740],	1
		mov	[ebp+var_273C],	1
		mov	[ebp+var_2738],	1
		mov	[ebp+var_2734],	1
		mov	[ebp+var_2730],	1
		mov	[ebp+var_272C],	1
		mov	[ebp+var_2728],	1
		mov	[ebp+var_2724],	1
		mov	[ebp+var_2720],	1
		mov	[ebp+var_271C],	1
		mov	[ebp+var_2718],	1
		mov	[ebp+var_2714],	1
		mov	[ebp+var_2710],	1
		mov	[ebp+var_270C],	1
		mov	[ebp+var_2708],	1
		mov	[ebp+var_2704],	1
		mov	[ebp+var_2700],	1
		mov	[ebp+var_26FC],	1
		mov	[ebp+var_26F8],	1
		mov	[ebp+var_26F4],	1
		mov	[ebp+var_26F0],	1
		mov	[ebp+var_26EC],	1
		mov	[ebp+var_26E8],	1
		mov	[ebp+var_26E4],	1
		mov	[ebp+var_26E0],	1
		mov	[ebp+var_26DC],	1
		mov	[ebp+var_26D8],	1

loc_42916E:				; CODE XREF: _speed_main+437j
		lea	eax, [ebp+var_2614]
		xor	edx, edx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_429180:				; CODE XREF: _speed_main+618j
		lea	ecx, [edx+1]
		mov	edi, [eax]
		test	edi, edi
		jnz	short loc_42918B
		mov	ecx, edx

loc_42918B:				; CODE XREF: _speed_main+607j
		mov	edx, ecx
		add	eax, 4
		lea	edi, [ebp+var_259C]
		cmp	eax, edi
		jnz	short loc_429180
		mov	[ebp+var_2964],	ecx
		mov	esi, _usertime
		test	esi, esi
		jnz	short loc_4291B8
		mov	ebx, ds:_mr
		test	ebx, ebx
		jz	loc_42F9FB

loc_4291B8:				; CODE XREF: _speed_main+628j
					; _speed_main+6E90j
		xor	ebx, ebx
		mov	esi, [ebp+var_2954]

loc_4291C0:				; CODE XREF: _speed_main+67Dj
		mov	eax, ds:_rsa_data_37947[ebx*4]
		mov	[ebp+var_1060],	eax
		mov	eax, ds:_rsa_data_length_37948[ebx*4]
		mov	[esp+8], eax
		lea	eax, [ebp+var_1060]
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_d2i_RSAPrivateKey
		mov	[esi+ebx*4], eax
		test	eax, eax
		jz	loc_42F9EA
		inc	ebx
		cmp	ebx, 4
		jnz	short loc_4291C0
		call	_get_dsa512
		mov	[ebp+var_2914],	eax
		call	_get_dsa1024
		mov	[ebp+var_2910],	eax
		call	_get_dsa2048
		mov	[ebp+var_290C],	eax
		lea	eax, [ebp+var_251C]
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	_key_37930
		call	_DES_set_key_unchecked
		lea	eax, [ebp+var_249C]
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	_key2_37931
		call	_DES_set_key_unchecked
		lea	eax, [ebp+var_241C]
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	_key3_37932
		call	_DES_set_key_unchecked
		lea	eax, [ebp+var_20E4]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 80h
		mov	dword ptr [esp], offset	_key16_37923
		call	_AES_set_encrypt_key
		lea	eax, [ebp+var_1FF0]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 0C0h
		mov	dword ptr [esp], offset	_key24_37924
		call	_AES_set_encrypt_key
		lea	eax, [ebp+var_1EFC]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 100h
		mov	dword ptr [esp], offset	_key32_37925
		call	_AES_set_encrypt_key
		lea	eax, [ebp+var_1A08]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 80h
		mov	dword ptr [esp], offset	_key16_37923
		call	_Camellia_set_key
		lea	eax, [ebp+var_18F0]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 0C0h
		mov	dword ptr [esp], offset	_ckey24_37926
		call	_Camellia_set_key
		lea	eax, [ebp+var_17D8]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 100h
		mov	dword ptr [esp], offset	_ckey32_37927
		call	_Camellia_set_key
		lea	eax, [ebp+var_21BC]
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	_key16_37923
		call	_idea_set_encrypt_key
		lea	eax, [ebp+var_259C]
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	_key16_37923
		call	_SEED_set_key
		mov	dword ptr [esp+8], offset _key16_37923
		mov	dword ptr [esp+4], 10h
		lea	eax, [ebp+var_1468]
		mov	[esp], eax
		call	_RC4_set_key
		mov	dword ptr [esp+0Ch], 80h
		mov	dword ptr [esp+8], offset _key16_37923
		mov	dword ptr [esp+4], 10h
		lea	eax, [ebp+var_1E08]
		mov	[esp], eax
		call	_RC2_set_key
		mov	dword ptr [esp+8], offset _key16_37923
		mov	dword ptr [esp+4], 10h
		lea	eax, [ebp+var_1060]
		mov	[esp], eax
		call	_BF_set_key
		mov	dword ptr [esp+8], offset _key16_37923
		mov	dword ptr [esp+4], 10h
		lea	eax, [ebp+var_239C]
		mov	[esp], eax
		call	_CAST_set_key
		lea	edx, [ebp+var_2874]
		mov	ecx, 8
		xor	eax, eax
		mov	edi, edx
		rep stosd
		mov	ecx, [ebp+var_2610]
		test	ecx, ecx
		jz	loc_42EB5C
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		jmp	short loc_429402
; ---------------------------------------------------------------------------
		align 10h

loc_429400:				; CODE XREF: _speed_main+A6Ej
		fstp	st

loc_429402:				; CODE XREF: _speed_main+876j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_4558E4
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E293
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_429427:				; CODE XREF: _speed_main+5718j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_4294F7
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4294E0:				; CODE XREF: _speed_main+975j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_4294E0

loc_4294F7:				; CODE XREF: _speed_main+952j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	edi, [ebp+var_28DC]
		test	eax, eax
		jnz	short loc_429538
		jmp	short loc_429571
; ---------------------------------------------------------------------------
		align 10h

loc_429530:				; CODE XREF: _speed_main+9EFj
		cmp	ebx, 7FFFFFFFh
		jz	short loc_429571

loc_429538:				; CODE XREF: _speed_main+9A7j
		call	_EVP_mdc2
		mov	dword ptr [esp+14h], 0
		mov	[esp+10h], eax
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_EVP_Digest
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_429530

loc_429571:				; CODE XREF: _speed_main+9A9j
					; _speed_main+9B6j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_4558E4
		mov	edi, ds:_mr
		test	edi, edi
		jnz	loc_42E22F
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42959E:				; CODE XREF: _speed_main+56B4j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_473688[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_429400

loc_4295F4:				; CODE XREF: _speed_main+5FE0j
		mov	ecx, [ebp+var_260C]
		test	ecx, ecx
		jz	loc_429814
		fstp	st
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		jmp	short loc_429622
; ---------------------------------------------------------------------------
		align 10h

loc_429620:				; CODE XREF: _speed_main+C8Ej
		fstp	st

loc_429622:				; CODE XREF: _speed_main+A99j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_4558E8
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E27F
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_429647:				; CODE XREF: _speed_main+5704j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_429717
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_429700:				; CODE XREF: _speed_main+B95j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_429700

loc_429717:				; CODE XREF: _speed_main+B72j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	edi, [ebp+var_28CC]
		test	eax, eax
		jnz	short loc_429758
		jmp	short loc_429791
; ---------------------------------------------------------------------------
		align 10h

loc_429750:				; CODE XREF: _speed_main+C0Fj
		cmp	ebx, 7FFFFFFFh
		jz	short loc_429791

loc_429758:				; CODE XREF: _speed_main+BC7j
		call	_EVP_md4
		mov	dword ptr [esp+14h], 0
		mov	[esp+10h], eax
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_EVP_Digest
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_429750

loc_429791:				; CODE XREF: _speed_main+BC9j
					; _speed_main+BD6j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_4558E8
		mov	edi, ds:_mr
		test	edi, edi
		jnz	loc_42E289
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_4297BE:				; CODE XREF: _speed_main+570Ej
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_4736B0[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_429620

loc_429814:				; CODE XREF: _speed_main+A7Cj
		mov	ecx, [ebp+var_2608]
		test	ecx, ecx
		jz	loc_429A3B
		fstp	st
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		jmp	short loc_429842
; ---------------------------------------------------------------------------
		align 10h

loc_429840:				; CODE XREF: _speed_main+EB5j
		fstp	st

loc_429842:				; CODE XREF: _speed_main+CB9j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_4558EC
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E257
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_429867:				; CODE XREF: _speed_main+56DCj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_429937
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_429920:				; CODE XREF: _speed_main+DB5j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_429920

loc_429937:				; CODE XREF: _speed_main+D92j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	edi, [ebp+var_28BC]
		test	eax, eax
		jnz	short loc_429978
		jmp	short loc_4299B8
; ---------------------------------------------------------------------------
		align 10h

loc_429970:				; CODE XREF: _speed_main+E36j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_4299B8

loc_429978:				; CODE XREF: _speed_main+DE7j
		mov	dword ptr [esp], offset	aMd5 ; "md5"
		call	_EVP_get_digestbyname
		mov	dword ptr [esp+14h], 0
		mov	[esp+10h], eax
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_EVP_Digest
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_429970

loc_4299B8:				; CODE XREF: _speed_main+DE9j
					; _speed_main+DF6j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_4558EC
		mov	edi, ds:_mr
		test	edi, edi
		jnz	loc_42E261
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_4299E5:				; CODE XREF: _speed_main+56E6j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_4736D8[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_429840

loc_429A3B:				; CODE XREF: _speed_main+C9Cj
		mov	ecx, [ebp+var_2604]
		test	ecx, ecx
		jnz	loc_42F021

loc_429A49:				; CODE XREF: _speed_main+671Dj
		mov	ecx, [ebp+var_2600]
		test	ecx, ecx
		jz	loc_429C64
		fstp	st
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		jmp	short loc_429A72
; ---------------------------------------------------------------------------

loc_429A70:				; CODE XREF: _speed_main+10DEj
		fstp	st

loc_429A72:				; CODE XREF: _speed_main+EEEj
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_4558F4
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E26B
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_429A97:				; CODE XREF: _speed_main+56F0j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_429B67
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_429B50:				; CODE XREF: _speed_main+FE5j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_429B50

loc_429B67:				; CODE XREF: _speed_main+FC2j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	edi, [ebp+var_289C]
		test	eax, eax
		jnz	short loc_429BA8
		jmp	short loc_429BE1
; ---------------------------------------------------------------------------
		align 10h

loc_429BA0:				; CODE XREF: _speed_main+105Fj
		cmp	ebx, 7FFFFFFFh
		jz	short loc_429BE1

loc_429BA8:				; CODE XREF: _speed_main+1017j
		call	_EVP_sha1
		mov	dword ptr [esp+14h], 0
		mov	[esp+10h], eax
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_EVP_Digest
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_429BA0

loc_429BE1:				; CODE XREF: _speed_main+1019j
					; _speed_main+1026j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_4558F4
		mov	edi, ds:_mr
		test	edi, edi
		jnz	loc_42E275
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_429C0E:				; CODE XREF: _speed_main+56FAj
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_473728[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_429A70

loc_429C64:				; CODE XREF: _speed_main+ED1j
		mov	ecx, [ebp+var_25B8]
		test	ecx, ecx
		jz	loc_429E6B
		fstp	st
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		jmp	short loc_429C92
; ---------------------------------------------------------------------------
		align 10h

loc_429C90:				; CODE XREF: _speed_main+12E5j
		fstp	st

loc_429C92:				; CODE XREF: _speed_main+1109j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_45593C
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E239
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_429CB7:				; CODE XREF: _speed_main+56BEj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_429D87
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_429D70:				; CODE XREF: _speed_main+1205j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_429D70

loc_429D87:				; CODE XREF: _speed_main+11E2j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	edi, [ebp+var_2854]
		test	eax, eax
		jnz	short loc_429DC8
		jmp	short loc_429DE8
; ---------------------------------------------------------------------------
		align 10h

loc_429DC0:				; CODE XREF: _speed_main+1266j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_429DE8

loc_429DC8:				; CODE XREF: _speed_main+1237j
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_SHA256
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_429DC0

loc_429DE8:				; CODE XREF: _speed_main+1239j
					; _speed_main+1246j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_45593C
		mov	edi, ds:_mr
		test	edi, edi
		jnz	loc_42E243
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_429E15:				; CODE XREF: _speed_main+56C8j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_4739F8[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_429C90

loc_429E6B:				; CODE XREF: _speed_main+10ECj
		mov	ecx, [ebp+var_25B4]
		test	ecx, ecx
		jz	loc_42A07B
		fstp	st
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		jmp	short loc_429EA2
; ---------------------------------------------------------------------------
		align 10h

loc_429EA0:				; CODE XREF: _speed_main+14F5j
		fstp	st

loc_429EA2:				; CODE XREF: _speed_main+1310j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_455940
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E24D
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_429EC7:				; CODE XREF: _speed_main+56D2j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_429F97
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_429F80:				; CODE XREF: _speed_main+1415j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_429F80

loc_429F97:				; CODE XREF: _speed_main+13F2j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	edi, [ebp+var_2694]
		test	eax, eax
		jnz	short loc_429FD8
		jmp	short loc_429FF8
; ---------------------------------------------------------------------------
		align 10h

loc_429FD0:				; CODE XREF: _speed_main+1476j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_429FF8

loc_429FD8:				; CODE XREF: _speed_main+1447j
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_SHA512
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_429FD0

loc_429FF8:				; CODE XREF: _speed_main+1449j
					; _speed_main+1456j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_455940
		mov	edi, ds:_mr
		test	edi, edi
		jnz	loc_42E50C
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42A025:				; CODE XREF: _speed_main+5991j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_473A20[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_429EA0

loc_42A07B:				; CODE XREF: _speed_main+12F3j
		mov	ecx, [ebp+var_25B0]
		test	ecx, ecx
		jz	loc_42A28B
		fstp	st
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		jmp	short loc_42A0B2
; ---------------------------------------------------------------------------
		align 10h

loc_42A0B0:				; CODE XREF: _speed_main+1705j
		fstp	st

loc_42A0B2:				; CODE XREF: _speed_main+1520j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_455944
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E516
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42A0D7:				; CODE XREF: _speed_main+599Bj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42A1A7
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42A190:				; CODE XREF: _speed_main+1625j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42A190

loc_42A1A7:				; CODE XREF: _speed_main+1602j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	edi, [ebp+var_2654]
		test	eax, eax
		jnz	short loc_42A1E8
		jmp	short loc_42A208
; ---------------------------------------------------------------------------
		align 10h

loc_42A1E0:				; CODE XREF: _speed_main+1686j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42A208

loc_42A1E8:				; CODE XREF: _speed_main+1657j
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_WHIRLPOOL
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42A1E0

loc_42A208:				; CODE XREF: _speed_main+1659j
					; _speed_main+1666j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_455944
		mov	edi, ds:_mr
		test	edi, edi
		jnz	loc_42E520
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42A235:				; CODE XREF: _speed_main+59A5j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_473A48[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_42A0B0

loc_42A28B:				; CODE XREF: _speed_main+1503j
		mov	ecx, [ebp+var_25FC]
		test	ecx, ecx
		jz	loc_42A4B4
		fstp	st
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		jmp	short loc_42A2C2
; ---------------------------------------------------------------------------
		align 10h

loc_42A2C0:				; CODE XREF: _speed_main+192Ej
		fstp	st

loc_42A2C2:				; CODE XREF: _speed_main+1730j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_4558F8
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E52A
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42A2E7:				; CODE XREF: _speed_main+59AFj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42A3B7
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42A3A0:				; CODE XREF: _speed_main+1835j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42A3A0

loc_42A3B7:				; CODE XREF: _speed_main+1812j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	edi, [ebp+var_2888]
		test	eax, eax
		jnz	short loc_42A3F8
		jmp	short loc_42A431
; ---------------------------------------------------------------------------
		align 10h

loc_42A3F0:				; CODE XREF: _speed_main+18AFj
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42A431

loc_42A3F8:				; CODE XREF: _speed_main+1867j
		call	_EVP_ripemd160
		mov	dword ptr [esp+14h], 0
		mov	[esp+10h], eax
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_EVP_Digest
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42A3F0

loc_42A431:				; CODE XREF: _speed_main+1869j
					; _speed_main+1876j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_4558F8
		mov	edi, ds:_mr
		test	edi, edi
		jnz	loc_42E534
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42A45E:				; CODE XREF: _speed_main+59B9j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_473750[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_42A2C0

loc_42A4B4:				; CODE XREF: _speed_main+1713j
		mov	ecx, [ebp+var_25F8]
		test	ecx, ecx
		jz	loc_42A6DB
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42A4F2
; ---------------------------------------------------------------------------
		jmp	short loc_42A4F0
; ---------------------------------------------------------------------------
		align 10h

loc_42A4F0:				; CODE XREF: _speed_main+1961j
					; _speed_main+1B55j
		fstp	st

loc_42A4F2:				; CODE XREF: _speed_main+195Fj
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_4558FC
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E53E
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42A517:				; CODE XREF: _speed_main+59C3j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42A5E4
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42A5D0:				; CODE XREF: _speed_main+1A62j
		mov	dword ptr [esp], 0
		call	edi
		push	ecx
		mov	ebx, ds:_schlock
		test	ebx, ebx
		jz	short loc_42A5D0

loc_42A5E4:				; CODE XREF: _speed_main+1A42j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42A658
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42A628
; ---------------------------------------------------------------------------
		align 10h

loc_42A620:				; CODE XREF: _speed_main+1AD0j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42A652

loc_42A628:				; CODE XREF: _speed_main+1A9Cj
		mov	[esp+0Ch], esi
		mov	[esp+8], esi
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+4], eax
		lea	eax, [ebp+var_1468]
		mov	[esp], eax
		call	_RC4
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42A620

loc_42A652:				; CODE XREF: _speed_main+1AA6j
		mov	esi, dword ptr [ebp+var_2940]

loc_42A658:				; CODE XREF: _speed_main+1A8Ej
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_4558FC
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E548
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42A685:				; CODE XREF: _speed_main+59CDj
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_473778[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42A4F0

loc_42A6DB:				; CODE XREF: _speed_main+193Cj
		mov	ecx, [ebp+var_25F4]
		test	ecx, ecx
		jz	loc_42A912
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	esi, [ebp+var_292C]
		jmp	short loc_42A712
; ---------------------------------------------------------------------------
		align 10h

loc_42A710:				; CODE XREF: _speed_main+1D8Cj
		fstp	st

loc_42A712:				; CODE XREF: _speed_main+1B86j
		mov	eax, dword ptr [ebp+var_2960]
		mov	edi, ds:_lengths[eax*4]
		mov	eax, off_455900
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E552
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42A737:				; CODE XREF: _speed_main+59D7j
		mov	[esp+10h], edi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42A808
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42A7F0:				; CODE XREF: _speed_main+1C86j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	ecx
		mov	ebx, ds:_schlock
		test	ebx, ebx
		jz	short loc_42A7F0

loc_42A808:				; CODE XREF: _speed_main+1C62j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42A88F
		lea	eax, [ebp+var_291C]
		mov	dword ptr [ebp+var_2940], eax
		jmp	short loc_42A858
; ---------------------------------------------------------------------------
		align 10h

loc_42A850:				; CODE XREF: _speed_main+1D0Dj
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42A88F

loc_42A858:				; CODE XREF: _speed_main+1CC0j
		mov	dword ptr [esp+14h], 1
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_251C]
		mov	[esp+0Ch], eax
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	[esp], esi
		call	_DES_ncbc_encrypt
		inc	ebx
		mov	edx, ds:_run
		test	edx, edx
		jnz	short loc_42A850

loc_42A88F:				; CODE XREF: _speed_main+1CB2j
					; _speed_main+1CD6j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_455900
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E55C
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42A8BC:				; CODE XREF: _speed_main+59E1j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], edi
		fimul	dword ptr [esp]
		pop	edi
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_4737A0[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42A710

loc_42A912:				; CODE XREF: _speed_main+1B63j
		mov	ecx, [ebp+var_25F0]
		test	ecx, ecx
		jz	loc_42AB56
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	esi, [ebp+var_292C]
		jmp	short loc_42A942
; ---------------------------------------------------------------------------
		align 10h

loc_42A940:				; CODE XREF: _speed_main+1FD0j
		fstp	st

loc_42A942:				; CODE XREF: _speed_main+1DBDj
		mov	eax, dword ptr [ebp+var_2960]
		mov	edi, ds:_lengths[eax*4]
		mov	eax, off_455904
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E566
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42A967:				; CODE XREF: _speed_main+59EBj
		mov	[esp+10h], edi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42AA38
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42AA20:				; CODE XREF: _speed_main+1EB6j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	ecx
		mov	ebx, ds:_schlock
		test	ebx, ebx
		jz	short loc_42AA20

loc_42AA38:				; CODE XREF: _speed_main+1E92j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42AAD3
		lea	eax, [ebp+var_291C]
		mov	dword ptr [ebp+var_2940], eax
		jmp	short loc_42AA88
; ---------------------------------------------------------------------------
		align 10h

loc_42AA80:				; CODE XREF: _speed_main+1F51j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42AAD3

loc_42AA88:				; CODE XREF: _speed_main+1EF0j
		mov	dword ptr [esp+1Ch], 1
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+18h], eax
		lea	eax, [ebp+var_241C]
		mov	[esp+14h], eax
		lea	eax, [ebp+var_249C]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_251C]
		mov	[esp+0Ch], eax
		mov	[esp+8], edi
		mov	[esp+4], esi
		mov	[esp], esi
		call	_DES_ede3_cbc_encrypt
		inc	ebx
		mov	edx, ds:_run
		test	edx, edx
		jnz	short loc_42AA80

loc_42AAD3:				; CODE XREF: _speed_main+1EE2j
					; _speed_main+1F06j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_455904
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E570
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42AB00:				; CODE XREF: _speed_main+59F5j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], edi
		fimul	dword ptr [esp]
		pop	edi
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_4737C8[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42A940

loc_42AB56:				; CODE XREF: _speed_main+1D9Aj
		mov	ecx, [ebp+var_25D4]
		test	ecx, ecx
		jz	loc_42AD8D
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42AB92
; ---------------------------------------------------------------------------
		align 10h

loc_42AB90:				; CODE XREF: _speed_main+2207j
		fstp	st

loc_42AB92:				; CODE XREF: _speed_main+2001j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_455920
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E57A
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42ABB7:				; CODE XREF: _speed_main+59FFj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42AC84
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42AC70:				; CODE XREF: _speed_main+2102j
		mov	dword ptr [esp], 0
		call	edi
		push	ecx
		mov	ebx, ds:_schlock
		test	ebx, ebx
		jz	short loc_42AC70

loc_42AC84:				; CODE XREF: _speed_main+20E2j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42AD0A
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42ACC8
; ---------------------------------------------------------------------------
		align 10h

loc_42ACC0:				; CODE XREF: _speed_main+2182j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42AD04

loc_42ACC8:				; CODE XREF: _speed_main+213Cj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_20E4]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_AES_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42ACC0

loc_42AD04:				; CODE XREF: _speed_main+2146j
		mov	esi, dword ptr [ebp+var_2940]

loc_42AD0A:				; CODE XREF: _speed_main+212Ej
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_455920
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E584
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42AD37:				; CODE XREF: _speed_main+5A09j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_4738E0[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42AB90

loc_42AD8D:				; CODE XREF: _speed_main+1FDEj
		mov	ecx, [ebp+var_25D0]
		test	ecx, ecx
		jz	loc_42AFBD
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42ADC2
; ---------------------------------------------------------------------------
		align 10h

loc_42ADC0:				; CODE XREF: _speed_main+2437j
		fstp	st

loc_42ADC2:				; CODE XREF: _speed_main+2238j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_455924
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E5A2
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42ADE7:				; CODE XREF: _speed_main+5A27j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42AEB4
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42AEA0:				; CODE XREF: _speed_main+2332j
		mov	dword ptr [esp], 0
		call	edi
		push	ecx
		mov	ebx, ds:_schlock
		test	ebx, ebx
		jz	short loc_42AEA0

loc_42AEB4:				; CODE XREF: _speed_main+2312j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42AF3A
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42AEF8
; ---------------------------------------------------------------------------
		align 10h

loc_42AEF0:				; CODE XREF: _speed_main+23B2j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42AF34

loc_42AEF8:				; CODE XREF: _speed_main+236Cj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_1FF0]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_AES_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42AEF0

loc_42AF34:				; CODE XREF: _speed_main+2376j
		mov	esi, dword ptr [ebp+var_2940]

loc_42AF3A:				; CODE XREF: _speed_main+235Ej
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_455924
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E5AC
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42AF67:				; CODE XREF: _speed_main+5A31j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_473908[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42ADC0

loc_42AFBD:				; CODE XREF: _speed_main+2215j
		mov	ecx, [ebp+var_25CC]
		test	ecx, ecx
		jz	loc_42B1ED
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42AFF2
; ---------------------------------------------------------------------------
		align 10h

loc_42AFF0:				; CODE XREF: _speed_main+2667j
		fstp	st

loc_42AFF2:				; CODE XREF: _speed_main+2468j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_455928
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E5B6
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42B017:				; CODE XREF: _speed_main+5A3Bj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42B0E4
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42B0D0:				; CODE XREF: _speed_main+2562j
		mov	dword ptr [esp], 0
		call	edi
		push	ecx
		mov	ebx, ds:_schlock
		test	ebx, ebx
		jz	short loc_42B0D0

loc_42B0E4:				; CODE XREF: _speed_main+2542j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42B16A
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42B128
; ---------------------------------------------------------------------------
		align 10h

loc_42B120:				; CODE XREF: _speed_main+25E2j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42B164

loc_42B128:				; CODE XREF: _speed_main+259Cj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_1EFC]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_AES_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42B120

loc_42B164:				; CODE XREF: _speed_main+25A6j
		mov	esi, dword ptr [ebp+var_2940]

loc_42B16A:				; CODE XREF: _speed_main+258Ej
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_455928
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E5C0
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42B197:				; CODE XREF: _speed_main+5A45j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_473930[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42AFF0

loc_42B1ED:				; CODE XREF: _speed_main+2445j
		mov	ecx, [ebp+var_25AC]
		test	ecx, ecx
		jz	loc_42B41D
		fstp	st
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42B222
; ---------------------------------------------------------------------------
		align 10h

loc_42B220:				; CODE XREF: _speed_main+2897j
		fstp	st

loc_42B222:				; CODE XREF: _speed_main+2698j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_455948
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E5CA
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42B247:				; CODE XREF: _speed_main+5A4Fj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42B314
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42B300:				; CODE XREF: _speed_main+2792j
		mov	dword ptr [esp], 0
		call	edi
		push	ecx
		mov	ebx, ds:_schlock
		test	ebx, ebx
		jz	short loc_42B300

loc_42B314:				; CODE XREF: _speed_main+2772j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jnz	short loc_42B358
		jmp	short loc_42B39A
; ---------------------------------------------------------------------------
		align 10h

loc_42B350:				; CODE XREF: _speed_main+2818j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42B39A

loc_42B358:				; CODE XREF: _speed_main+27BEj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_20E4]
		mov	[esp+0Ch], eax
		mov	[esp+8], esi
		mov	eax, [ebp+var_2930]
		mov	[esp+4], eax
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_AES_ige_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42B350

loc_42B39A:				; CODE XREF: _speed_main+27C0j
					; _speed_main+27D6j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_455948
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E5D4
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42B3C7:				; CODE XREF: _speed_main+5A59j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_473A70[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_42B220

loc_42B41D:				; CODE XREF: _speed_main+2675j
		mov	ecx, [ebp+var_25A8]
		test	ecx, ecx
		jz	loc_42B64D
		fstp	st
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42B452
; ---------------------------------------------------------------------------
		align 10h

loc_42B450:				; CODE XREF: _speed_main+2AC7j
		fstp	st

loc_42B452:				; CODE XREF: _speed_main+28C8j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_45594C
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E5DE
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42B477:				; CODE XREF: _speed_main+5A63j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42B544
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42B530:				; CODE XREF: _speed_main+29C2j
		mov	dword ptr [esp], 0
		call	edi
		push	ecx
		mov	ebx, ds:_schlock
		test	ebx, ebx
		jz	short loc_42B530

loc_42B544:				; CODE XREF: _speed_main+29A2j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jnz	short loc_42B588
		jmp	short loc_42B5CA
; ---------------------------------------------------------------------------
		align 10h

loc_42B580:				; CODE XREF: _speed_main+2A48j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42B5CA

loc_42B588:				; CODE XREF: _speed_main+29EEj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_1FF0]
		mov	[esp+0Ch], eax
		mov	[esp+8], esi
		mov	eax, [ebp+var_2930]
		mov	[esp+4], eax
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_AES_ige_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42B580

loc_42B5CA:				; CODE XREF: _speed_main+29F0j
					; _speed_main+2A06j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_45594C
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42E5E8
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42B5F7:				; CODE XREF: _speed_main+5A6Dj
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	ecx
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_473A98[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_42B450

loc_42B64D:				; CODE XREF: _speed_main+28A5j
		mov	edx, [ebp+var_25A4]
		test	edx, edx
		jz	loc_42B87D
		fstp	st
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42B682
; ---------------------------------------------------------------------------
		align 10h

loc_42B680:				; CODE XREF: _speed_main+2CF7j
		fstp	st

loc_42B682:				; CODE XREF: _speed_main+2AF8j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	edx, off_455950
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E5F2
		mov	eax, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42B6A7:				; CODE XREF: _speed_main+5A77j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42B773
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42B760:				; CODE XREF: _speed_main+2BF1j
		mov	dword ptr [esp], 0
		call	edi
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42B760

loc_42B773:				; CODE XREF: _speed_main+2BD2j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jnz	short loc_42B7B8
		jmp	short loc_42B7FA
; ---------------------------------------------------------------------------
		jmp	short loc_42B7B0
; ---------------------------------------------------------------------------
		align 10h

loc_42B7B0:				; CODE XREF: _speed_main+2C21j
					; _speed_main+2C78j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42B7FA

loc_42B7B8:				; CODE XREF: _speed_main+2C1Dj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_1EFC]
		mov	[esp+0Ch], eax
		mov	[esp+8], esi
		mov	eax, [ebp+var_2930]
		mov	[esp+4], eax
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_AES_ige_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42B7B0

loc_42B7FA:				; CODE XREF: _speed_main+2C1Fj
					; _speed_main+2C36j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	edx, off_455950
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E5FC
		mov	eax, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42B827:				; CODE XREF: _speed_main+5A81j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], edx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	esi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_473AC0[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_42B680

loc_42B87D:				; CODE XREF: _speed_main+2AD5j
		mov	ecx, [ebp+var_25A0]
		test	ecx, ecx
		jnz	loc_42EDDA

loc_42B88B:				; CODE XREF: _speed_main+648Bj
		mov	esi, [ebp+var_25C8]
		test	esi, esi
		jz	loc_42BABD
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42B8C2
; ---------------------------------------------------------------------------
		align 10h

loc_42B8C0:				; CODE XREF: _speed_main+2F37j
		fstp	st

loc_42B8C2:				; CODE XREF: _speed_main+2D36j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	edx, off_45592C
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42E606
		mov	eax, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42B8E8:				; CODE XREF: _speed_main+5A8Bj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42B9B3
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42B9A0:				; CODE XREF: _speed_main+2E31j
		mov	dword ptr [esp], 0
		call	edi
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42B9A0

loc_42B9B3:				; CODE XREF: _speed_main+2E13j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42BA3A
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42B9F8
; ---------------------------------------------------------------------------
		align 10h

loc_42B9F0:				; CODE XREF: _speed_main+2EB2j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42BA34

loc_42B9F8:				; CODE XREF: _speed_main+2E6Bj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_1A08]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_Camellia_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42B9F0

loc_42BA34:				; CODE XREF: _speed_main+2E76j
		mov	esi, dword ptr [ebp+var_2940]

loc_42BA3A:				; CODE XREF: _speed_main+2E5Dj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	edx, off_45592C
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E610
		mov	eax, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42BA67:				; CODE XREF: _speed_main+5A95j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], edx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	eax
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_473958[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42B8C0

loc_42BABD:				; CODE XREF: _speed_main+2D13j
		mov	esi, [ebp+var_25C4]
		test	esi, esi
		jz	loc_42BCED
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42BAF2
; ---------------------------------------------------------------------------
		align 10h

loc_42BAF0:				; CODE XREF: _speed_main+3167j
		fstp	st

loc_42BAF2:				; CODE XREF: _speed_main+2F68j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	edx, off_455930
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42E61A
		mov	eax, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42BB18:				; CODE XREF: _speed_main+5A9Fj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42BBE3
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42BBD0:				; CODE XREF: _speed_main+3061j
		mov	dword ptr [esp], 0
		call	edi
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42BBD0

loc_42BBE3:				; CODE XREF: _speed_main+3043j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42BC6A
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42BC28
; ---------------------------------------------------------------------------
		align 10h

loc_42BC20:				; CODE XREF: _speed_main+30E2j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42BC64

loc_42BC28:				; CODE XREF: _speed_main+309Bj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_18F0]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_Camellia_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42BC20

loc_42BC64:				; CODE XREF: _speed_main+30A6j
		mov	esi, dword ptr [ebp+var_2940]

loc_42BC6A:				; CODE XREF: _speed_main+308Dj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	edx, off_455930
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E624
		mov	eax, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42BC97:				; CODE XREF: _speed_main+5AA9j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], edx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	eax
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_473980[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42BAF0

loc_42BCED:				; CODE XREF: _speed_main+2F45j
		mov	esi, [ebp+var_25C0]
		test	esi, esi
		jz	loc_42BF1D
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42BD22
; ---------------------------------------------------------------------------
		align 10h

loc_42BD20:				; CODE XREF: _speed_main+3397j
		fstp	st

loc_42BD22:				; CODE XREF: _speed_main+3198j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	edx, off_455934
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42E62E
		mov	eax, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42BD48:				; CODE XREF: _speed_main+5AB3j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42BE13
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42BE00:				; CODE XREF: _speed_main+3291j
		mov	dword ptr [esp], 0
		call	edi
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42BE00

loc_42BE13:				; CODE XREF: _speed_main+3273j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42BE9A
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42BE58
; ---------------------------------------------------------------------------
		align 10h

loc_42BE50:				; CODE XREF: _speed_main+3312j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42BE94

loc_42BE58:				; CODE XREF: _speed_main+32CBj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_17D8]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_Camellia_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42BE50

loc_42BE94:				; CODE XREF: _speed_main+32D6j
		mov	esi, dword ptr [ebp+var_2940]

loc_42BE9A:				; CODE XREF: _speed_main+32BDj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	edx, off_455934
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E638
		mov	eax, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42BEC7:				; CODE XREF: _speed_main+5ABDj
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], edx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	eax
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_4739A8[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42BD20

loc_42BF1D:				; CODE XREF: _speed_main+3175j
		mov	esi, [ebp+var_25EC]
		test	esi, esi
		jz	loc_42C14D
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42BF52
; ---------------------------------------------------------------------------
		align 10h

loc_42BF50:				; CODE XREF: _speed_main+35C7j
		fstp	st

loc_42BF52:				; CODE XREF: _speed_main+33C8j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	edx, off_455908
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42E58E
		mov	eax, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42BF78:				; CODE XREF: _speed_main+5A13j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42C043
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42C030:				; CODE XREF: _speed_main+34C1j
		mov	dword ptr [esp], 0
		call	edi
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42C030

loc_42C043:				; CODE XREF: _speed_main+34A3j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42C0CA
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42C088
; ---------------------------------------------------------------------------
		align 10h

loc_42C080:				; CODE XREF: _speed_main+3542j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42C0C4

loc_42C088:				; CODE XREF: _speed_main+34FBj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_21BC]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_idea_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42C080

loc_42C0C4:				; CODE XREF: _speed_main+3506j
		mov	esi, dword ptr [ebp+var_2940]

loc_42C0CA:				; CODE XREF: _speed_main+34EDj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	edx, off_455908
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E598
		mov	eax, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42C0F7:				; CODE XREF: _speed_main+5A1Dj
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], edx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	eax
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_4737F0[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42BF50

loc_42C14D:				; CODE XREF: _speed_main+33A5j
		mov	esi, [ebp+var_25E8]
		test	esi, esi
		jz	loc_42C37D
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42C182
; ---------------------------------------------------------------------------
		align 10h

loc_42C180:				; CODE XREF: _speed_main+37F7j
		fstp	st

loc_42C182:				; CODE XREF: _speed_main+35F8j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	edx, off_45590C
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42E642
		mov	eax, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42C1A8:				; CODE XREF: _speed_main+5AC7j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42C273
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42C260:				; CODE XREF: _speed_main+36F1j
		mov	dword ptr [esp], 0
		call	edi
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42C260

loc_42C273:				; CODE XREF: _speed_main+36D3j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42C2FA
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42C2B8
; ---------------------------------------------------------------------------
		align 10h

loc_42C2B0:				; CODE XREF: _speed_main+3772j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42C2F4

loc_42C2B8:				; CODE XREF: _speed_main+372Bj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_259C]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_SEED_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42C2B0

loc_42C2F4:				; CODE XREF: _speed_main+3736j
		mov	esi, dword ptr [ebp+var_2940]

loc_42C2FA:				; CODE XREF: _speed_main+371Dj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	edx, off_45590C
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E64C
		mov	eax, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42C327:				; CODE XREF: _speed_main+5AD1j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], edx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	eax
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_473818[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42C180

loc_42C37D:				; CODE XREF: _speed_main+35D5j
		mov	esi, [ebp+var_25E4]
		test	esi, esi
		jz	loc_42C5AD
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42C3B2
; ---------------------------------------------------------------------------
		align 10h

loc_42C3B0:				; CODE XREF: _speed_main+3A27j
		fstp	st

loc_42C3B2:				; CODE XREF: _speed_main+3828j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	edx, off_455910
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42E656
		mov	eax, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42C3D8:				; CODE XREF: _speed_main+5ADBj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42C4A3
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42C490:				; CODE XREF: _speed_main+3921j
		mov	dword ptr [esp], 0
		call	edi
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42C490

loc_42C4A3:				; CODE XREF: _speed_main+3903j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42C52A
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42C4E8
; ---------------------------------------------------------------------------
		align 10h

loc_42C4E0:				; CODE XREF: _speed_main+39A2j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42C524

loc_42C4E8:				; CODE XREF: _speed_main+395Bj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_1E08]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_RC2_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42C4E0

loc_42C524:				; CODE XREF: _speed_main+3966j
		mov	esi, dword ptr [ebp+var_2940]

loc_42C52A:				; CODE XREF: _speed_main+394Dj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	edx, off_455910
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E660
		mov	eax, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42C557:				; CODE XREF: _speed_main+5AE5j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], edx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	eax
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_473840[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42C3B0

loc_42C5AD:				; CODE XREF: _speed_main+3805j
		mov	esi, [ebp+var_25DC]
		test	esi, esi
		jz	loc_42C7DD
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42C5E2
; ---------------------------------------------------------------------------
		align 10h

loc_42C5E0:				; CODE XREF: _speed_main+3C57j
		fstp	st

loc_42C5E2:				; CODE XREF: _speed_main+3A58j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	edx, off_455918
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42E66A
		mov	eax, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42C608:				; CODE XREF: _speed_main+5AEFj
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42C6D3
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42C6C0:				; CODE XREF: _speed_main+3B51j
		mov	dword ptr [esp], 0
		call	edi
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42C6C0

loc_42C6D3:				; CODE XREF: _speed_main+3B33j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42C75A
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42C718
; ---------------------------------------------------------------------------
		align 10h

loc_42C710:				; CODE XREF: _speed_main+3BD2j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42C754

loc_42C718:				; CODE XREF: _speed_main+3B8Bj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_1060]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_BF_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42C710

loc_42C754:				; CODE XREF: _speed_main+3B96j
		mov	esi, dword ptr [ebp+var_2940]

loc_42C75A:				; CODE XREF: _speed_main+3B7Dj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	edx, off_455918
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E674
		mov	eax, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42C787:				; CODE XREF: _speed_main+5AF9j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], edx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	eax
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_473890[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42C5E0

loc_42C7DD:				; CODE XREF: _speed_main+3A35j
		mov	esi, [ebp+var_25D8]
		test	esi, esi
		jz	loc_42CA0D
		fstp	st
		mov	dword ptr [ebp+var_2960], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		mov	edi, ds:__imp__Sleep@4
		jmp	short loc_42C812
; ---------------------------------------------------------------------------
		align 10h

loc_42C810:				; CODE XREF: _speed_main+3E87j
		fstp	st

loc_42C812:				; CODE XREF: _speed_main+3C88j
		mov	eax, dword ptr [ebp+var_2960]
		mov	esi, ds:_lengths[eax*4]
		mov	edx, off_45591C
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42E67E
		mov	eax, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42C838:				; CODE XREF: _speed_main+5B03j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42C903
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42C8F0:				; CODE XREF: _speed_main+3D81j
		mov	dword ptr [esp], 0
		call	edi
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42C8F0

loc_42C903:				; CODE XREF: _speed_main+3D63j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	short loc_42C98A
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, [ebp+var_292C]
		jmp	short loc_42C948
; ---------------------------------------------------------------------------
		align 10h

loc_42C940:				; CODE XREF: _speed_main+3E02j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42C984

loc_42C948:				; CODE XREF: _speed_main+3DBBj
		mov	dword ptr [esp+14h], 1
		lea	eax, [ebp+var_2834]
		mov	[esp+10h], eax
		lea	eax, [ebp+var_239C]
		mov	[esp+0Ch], eax
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], esi
		call	_CAST_cbc_encrypt
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42C940

loc_42C984:				; CODE XREF: _speed_main+3DC6j
		mov	esi, dword ptr [ebp+var_2940]

loc_42C98A:				; CODE XREF: _speed_main+3DADj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	edx, off_45591C
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E688
		mov	eax, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42C9B7:				; CODE XREF: _speed_main+5B0Dj
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	[esp+0Ch], edx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2940]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	eax
		mov	eax, dword ptr [ebp+var_2960]
		fstp	ds:dbl_4738B8[eax*8]
		inc	dword ptr [ebp+var_2960]
		cmp	dword ptr [ebp+var_2960], 5
		jnz	loc_42C810

loc_42CA0D:				; CODE XREF: _speed_main+3C65j
		mov	edi, [ebp+var_25BC]
		test	edi, edi
		jz	loc_42CE89
		mov	dword ptr [ebp+var_2940], 0

loc_42CA25:				; CODE XREF: _speed_main+42FFj
		mov	esi, dword ptr [ebp+var_2950]
		test	esi, esi
		jz	loc_42E858
		fstp	st
		mov	eax, dword ptr [ebp+var_2950]
		mov	eax, [eax]
		mov	[esp], eax
		call	_OBJ_nid2ln
		mov	off_455938, eax
		mov	ecx, dword ptr [ebp+var_2940]
		mov	edi, ds:_lengths[ecx*4]
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42EACB
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42CA6A:				; CODE XREF: _speed_main+5F50j
		mov	[esp+10h], edi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		lea	eax, [ebp+var_2318]
		mov	[esp], eax
		call	_EVP_CIPHER_CTX_init
		lea	eax, [ebp+var_2834]
		mov	edx, [ebp+var_2958]
		test	edx, edx
		mov	[esp+10h], eax
		mov	dword ptr [esp+0Ch], offset _key16_37923
		mov	dword ptr [esp+8], 0
		mov	eax, dword ptr [ebp+var_2950]
		mov	[esp+4], eax
		lea	eax, [ebp+var_2318]
		mov	[esp], eax
		jz	loc_42E79D
		call	_EVP_DecryptInit_ex

loc_42CB08:				; CODE XREF: _speed_main+5C22j
		mov	dword ptr [esp+4], 0
		lea	eax, [ebp+var_2318]
		mov	[esp], eax
		call	_EVP_CIPHER_CTX_set_padding
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0 ; lpThreadId
		mov	dword ptr [esp+10h], 0 ; dwCreationFlags
		mov	dword ptr [esp+0Ch], 0 ; lpParameter
		mov	dword ptr [esp+8], offset _sleepy@4 ; lpStartAddress
		mov	dword ptr [esp+4], 1000h ; dwStackSize
		mov	dword ptr [esp], 0 ; lpThreadAttributes
		call	ds:__imp__CreateThread@24
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	ebx, ds:__imp__Sleep@4
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42CBA4
		jmp	short loc_42CB90
; ---------------------------------------------------------------------------
		align 10h

loc_42CB90:				; CODE XREF: _speed_main+4001j
					; _speed_main+4022j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ebx ; __imp__Sleep@4
		push	ecx
		mov	esi, ds:_schlock
		test	esi, esi
		jz	short loc_42CB90

loc_42CBA4:				; CODE XREF: _speed_main+3FFFj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	eax, [ebp+var_2958]
		test	eax, eax
		jz	loc_42E70E
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	esi, [ebp+var_1B08]
		test	eax, eax
		jz	short loc_42CC3C
		mov	dword ptr [ebp+var_2938], edi
		mov	edi, [ebp+var_292C]
		jmp	short loc_42CC08
; ---------------------------------------------------------------------------
		align 10h

loc_42CC00:				; CODE XREF: _speed_main+40B4j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42CC36

loc_42CC08:				; CODE XREF: _speed_main+4070j
		mov	eax, dword ptr [ebp+var_2938]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	[esp+8], esi
		mov	[esp+4], edi
		lea	eax, [ebp+var_2318]
		mov	[esp], eax
		call	_EVP_DecryptUpdate
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42CC00

loc_42CC36:				; CODE XREF: _speed_main+4086j
		mov	edi, dword ptr [ebp+var_2938]

loc_42CC3C:				; CODE XREF: _speed_main+4062j
		mov	[esp+8], esi
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_2318]
		mov	[esp], eax
		call	_EVP_DecryptFinal_ex

loc_42CC58:				; CODE XREF: _speed_main+5C18j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		fstp	[ebp+var_2938]
		lea	eax, [ebp+var_2318]
		mov	[esp], eax
		call	_EVP_CIPHER_CTX_cleanup
		fld	[ebp+var_2938]

loc_42CC87:				; CODE XREF: _speed_main+5CE5j
		mov	eax, dword ptr [ebp+var_2948]
		test	eax, eax
		jz	loc_42CE17
		fstp	st
		mov	eax, [eax]
		mov	[esp], eax
		call	_OBJ_nid2ln
		mov	off_455938, eax
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42EAC1
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42CCB9:				; CODE XREF: _speed_main+5F46j
		mov	[esp+10h], edi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0 ; lpThreadId
		mov	dword ptr [esp+10h], 0 ; dwCreationFlags
		mov	dword ptr [esp+0Ch], 0 ; lpParameter
		mov	dword ptr [esp+8], offset _sleepy@4 ; lpStartAddress
		mov	dword ptr [esp+4], 1000h ; dwStackSize
		mov	dword ptr [esp], 0 ; lpThreadAttributes
		call	ds:__imp__CreateThread@24
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	ecx
		mov	ebx, ds:__imp__Sleep@4
		mov	esi, ds:_schlock
		test	esi, esi
		jnz	short loc_42CD84
		lea	esi, [esi+0]

loc_42CD70:				; CODE XREF: _speed_main+4202j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ebx ; __imp__Sleep@4
		push	eax
		mov	edx, ds:_schlock
		test	edx, edx
		jz	short loc_42CD70

loc_42CD84:				; CODE XREF: _speed_main+41EBj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	esi, [ebp+var_26D4]
		test	eax, eax
		jnz	short loc_42CDC8
		jmp	short loc_42CE02
; ---------------------------------------------------------------------------
		align 10h

loc_42CDC0:				; CODE XREF: _speed_main+4280j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42CE02

loc_42CDC8:				; CODE XREF: _speed_main+4234j
		mov	dword ptr [esp+14h], 0
		mov	eax, dword ptr [ebp+var_2948]
		mov	[esp+10h], eax
		mov	dword ptr [esp+0Ch], 0
		mov	[esp+8], esi
		mov	[esp+4], edi
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_EVP_Digest
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42CDC0

loc_42CE02:				; CODE XREF: _speed_main+4236j
					; _speed_main+4246j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval

loc_42CE17:				; CODE XREF: _speed_main+410Fj
		mov	edx, off_455938
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E692
		mov	eax, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42CE2F:				; CODE XREF: _speed_main+5B17j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2938]
		mov	[esp+0Ch], edx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2938]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], edi
		fimul	dword ptr [esp]
		pop	eax
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_4739D0[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_42CA25
		fstp	st
		jmp	short loc_42CE8B
; ---------------------------------------------------------------------------

loc_42CE89:				; CODE XREF: _speed_main+3E95j
		fstp	st

loc_42CE8B:				; CODE XREF: _speed_main+4307j
		mov	dword ptr [esp+4], 24h
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_RAND_pseudo_bytes
		xor	esi, esi
		mov	edi, [ebp+var_2930]
		jmp	short loc_42CEBA
; ---------------------------------------------------------------------------
		align 10h

loc_42CEB0:				; CODE XREF: _speed_main+4343j
					; _speed_main+4629j ...
		inc	esi
		cmp	esi, 3
		jg	loc_42D458

loc_42CEBA:				; CODE XREF: _speed_main+4329j
		mov	eax, [ebp+esi*4+var_28EC]
		test	eax, eax
		jz	short loc_42CEB0
		mov	eax, [ebp+esi*4+var_28FC]
		mov	dword ptr [ebp+var_2940], eax
		mov	[esp+14h], eax
		lea	eax, [ebp+var_2928]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 24h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 72h
		call	_RSA_sign
		test	eax, eax
		jnz	loc_42D200
		mov	dword ptr [esp+4], offset aRsaSignFailure ; "RSA sign failure.	No RSA sign will be "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	dword ptr [ebp+var_2938], 1

loc_42CF36:				; CODE XREF: _speed_main+48BEj
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+14h], eax
		mov	eax, [ebp+var_2928]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 24h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 72h
		call	_RSA_verify
		test	eax, eax
		jle	loc_42E7D1
		mov	eax, ds:_rsa_bits_37946[esi*4]
		mov	dword ptr [ebp+var_2948], eax
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E7A7
		mov	eax, offset aDoingDBitSSSFo ; "Doing %d	bit %s %s's for %ds: "

loc_42CF93:				; CODE XREF: _speed_main+5C2Cj
		mov	dword ptr [esp+14h], 0Ah
		mov	dword ptr [esp+10h], offset aRsa ; "rsa"
		mov	dword ptr [esp+0Ch], offset aPublic ; "public"
		mov	ecx, dword ptr [ebp+var_2948]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 2710h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0 ; lpThreadId
		mov	dword ptr [esp+10h], 0 ; dwCreationFlags
		mov	dword ptr [esp+0Ch], 0 ; lpParameter
		mov	dword ptr [esp+8], offset _sleepy@4 ; lpStartAddress
		mov	dword ptr [esp+4], 1000h ; dwStackSize
		mov	dword ptr [esp], 0 ; lpThreadAttributes
		call	ds:__imp__CreateThread@24
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	ebx, ds:__imp__Sleep@4
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42D073
		nop
		lea	esi, [esi+0]

loc_42D060:				; CODE XREF: _speed_main+44F1j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ebx ; __imp__Sleep@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42D060

loc_42D073:				; CODE XREF: _speed_main+44D6j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	loc_42D13B
		mov	dword ptr [ebp+var_2950], esi
		mov	esi, dword ptr [ebp+var_2940]
		jmp	short loc_42D0DA
; ---------------------------------------------------------------------------
		jmp	short loc_42D0C0
; ---------------------------------------------------------------------------
		align 10h

loc_42D0C0:				; CODE XREF: _speed_main+4531j
					; _speed_main+458Cj
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jz	loc_42D443
		cmp	ebx, 7FFFFFFFh
		jz	loc_42D443

loc_42D0DA:				; CODE XREF: _speed_main+452Fj
		mov	[esp+14h], esi
		mov	eax, [ebp+var_2928]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 24h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 72h
		call	_RSA_verify
		test	eax, eax
		jg	short loc_42D0C0
		mov	esi, dword ptr [ebp+var_2950]
		mov	dword ptr [esp+4], offset aRsaVerifyFailu ; "RSA verify	failure\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	ebx, 1

loc_42D13B:				; CODE XREF: _speed_main+451Dj
					; _speed_main+48C9j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	ecx, ds:_mr
		test	ecx, ecx
		jz	loc_42D44E
		mov	eax, offset aR2LdD_2f ;	"+R2:%ld:%d:%.2f\n"

loc_42D163:				; CODE XREF: _speed_main+48D3j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	ecx, dword ptr [ebp+var_2948]
		mov	[esp+0Ch], ecx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, esi
		shl	eax, 4
		fld	[ebp+var_2940]
		push	ebx
		fidiv	dword ptr [esp]
		pop	edx
		fstp	ds:dbl_473628[eax]

loc_42D1A2:				; CODE XREF: _speed_main+5C7Ej
		cmp	dword ptr [ebp+var_2938], 1
		jg	loc_42CEB0
		lea	eax, [esi+1]
		cmp	eax, 4
		jz	loc_42D458
		mov	[ebp+eax*4+var_28EC], 0
		lea	eax, [esi+2]
		cmp	eax, 3
		jg	loc_42F9D9
		mov	[ebp+eax*4+var_28EC], 0
		lea	eax, [esi+3]
		cmp	eax, 3
		jnz	loc_42F9D9
		mov	[ebp+var_28E0],	0
		add	esi, 4
		jmp	loc_42CEB0
; ---------------------------------------------------------------------------
		align 10h

loc_42D200:				; CODE XREF: _speed_main+4384j
		mov	eax, ds:_rsa_bits_37946[esi*4]
		mov	dword ptr [ebp+var_2948], eax
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42EAFA
		mov	eax, offset aDoingDBitSSSFo ; "Doing %d	bit %s %s's for %ds: "

loc_42D21F:				; CODE XREF: _speed_main+5F7Fj
		mov	dword ptr [esp+14h], 0Ah
		mov	dword ptr [esp+10h], offset aRsa ; "rsa"
		mov	dword ptr [esp+0Ch], offset aPrivate ; "private"
		mov	ecx, dword ptr [ebp+var_2948]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 2710h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0 ; lpThreadId
		mov	dword ptr [esp+10h], 0 ; dwCreationFlags
		mov	dword ptr [esp+0Ch], 0 ; lpParameter
		mov	dword ptr [esp+8], offset _sleepy@4 ; lpStartAddress
		mov	dword ptr [esp+4], 1000h ; dwStackSize
		mov	dword ptr [esp], 0 ; lpThreadAttributes
		call	ds:__imp__CreateThread@24
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	ebx
		mov	ebx, ds:__imp__Sleep@4
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42D304
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42D2F0:				; CODE XREF: _speed_main+4782j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ebx ; __imp__Sleep@4
		push	edx
		mov	ecx, ds:_schlock
		test	ecx, ecx
		jz	short loc_42D2F0

loc_42D304:				; CODE XREF: _speed_main+4762j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		mov	dword ptr [ebp+var_2938], 0
		test	eax, eax
		jz	loc_42D3D1
		mov	ebx, dword ptr [ebp+var_2938]
		jmp	short loc_42D36A
; ---------------------------------------------------------------------------
		align 10h

loc_42D350:				; CODE XREF: _speed_main+4823j
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jz	loc_42E7BB
		cmp	ebx, 7FFFFFFFh
		jz	loc_42E7BB

loc_42D36A:				; CODE XREF: _speed_main+47C2j
		mov	eax, [ebp+esi*4+var_28FC]
		mov	[esp+14h], eax
		lea	eax, [ebp+var_2928]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 24h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 72h
		call	_RSA_sign
		test	eax, eax
		jnz	short loc_42D350
		mov	dword ptr [esp+4], offset aRsaSignFailu_0 ; "RSA sign failure\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	dword ptr [ebp+var_2938], 1

loc_42D3D1:				; CODE XREF: _speed_main+47B6j
					; _speed_main+5C41j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, ds:_mr
		test	eax, eax
		jz	loc_42E86A
		mov	eax, offset aR1LdD_2f ;	"+R1:%ld:%d:%.2f\n"

loc_42D3F8:				; CODE XREF: _speed_main+5CEFj
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2950]
		mov	ecx, dword ptr [ebp+var_2948]
		mov	[esp+0Ch], ecx
		mov	ecx, dword ptr [ebp+var_2938]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, esi
		shl	eax, 4
		fld	[ebp+var_2950]
		fidiv	dword ptr [ebp+var_2938]
		fstp	ds:_rsa_results[eax]
		jmp	loc_42CF36
; ---------------------------------------------------------------------------

loc_42D443:				; CODE XREF: _speed_main+4548j
					; _speed_main+4554j
		mov	esi, dword ptr [ebp+var_2950]
		jmp	loc_42D13B
; ---------------------------------------------------------------------------

loc_42D44E:				; CODE XREF: _speed_main+45D8j
		mov	eax, offset aLdDBitPublicRs ; "%ld %d bit public RSA's in %.2fs\n"
		jmp	loc_42D163
; ---------------------------------------------------------------------------

loc_42D458:				; CODE XREF: _speed_main+4334j
					; _speed_main+4635j
		mov	dword ptr [esp+4], 14h
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_RAND_pseudo_bytes
		call	_RAND_status
		dec	eax
		jz	short loc_42D494
		mov	dword ptr [esp+4], 40h
		mov	dword ptr [esp], offset	_rnd_seed ; "string to make the	random number genera"...
		call	_RAND_seed
		mov	ds:_rnd_fake, 1

loc_42D494:				; CODE XREF: _speed_main+48F4j
		xor	esi, esi
		mov	edi, [ebp+var_2930]
		lea	esi, [esi+0]

loc_42D4A0:				; CODE XREF: _speed_main+4933j
		mov	eax, [ebp+esi*4+var_2908]
		test	eax, eax
		jnz	loc_42D790

loc_42D4AF:				; CODE XREF: _speed_main+4EF9j
		inc	esi

loc_42D4B0:				; CODE XREF: _speed_main+4F2Bj
					; _speed_main+6E65j ...
		cmp	esi, 2
		jle	short loc_42D4A0
		mov	esi, ds:_rnd_fake
		test	esi, esi
		jnz	loc_42EDD0

loc_42D4C3:				; CODE XREF: _speed_main+6255j
		call	_RAND_status
		dec	eax
		jz	short loc_42D4E9
		mov	dword ptr [esp+4], 40h
		mov	dword ptr [esp], offset	_rnd_seed ; "string to make the	random number genera"...
		call	_RAND_seed
		mov	ds:_rnd_fake, 1

loc_42D4E9:				; CODE XREF: _speed_main+4949j
		xor	ebx, ebx
		lea	edi, [ebp+var_1D08]
		mov	esi, ebx
		jmp	short loc_42D50A
; ---------------------------------------------------------------------------
		align 10h

loc_42D500:				; CODE XREF: _speed_main+4993j
					; _speed_main+4A9Cj ...
		inc	esi
		cmp	esi, 0Fh
		jg	loc_42DF57

loc_42D50A:				; CODE XREF: _speed_main+4973j
		mov	ebx, [ebp+esi*4+var_2754]
		test	ebx, ebx
		jz	short loc_42D500
		mov	eax, ds:_test_curves_37952[esi*4]
		mov	[esp], eax
		call	_EC_KEY_new_by_curve_name
		mov	ebx, eax
		mov	[ebp+esi*4+var_2814], eax
		test	eax, eax
		jz	loc_42EB6F
		mov	dword ptr [esp+4], 0
		mov	[esp], eax
		call	_EC_KEY_precompute_mult
		mov	[esp], ebx
		call	_EC_KEY_generate_key
		mov	[esp+14h], ebx
		lea	eax, [ebp+var_2924]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 14h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_ECDSA_sign
		test	eax, eax
		jnz	loc_42DD00
		mov	dword ptr [esp+4], offset aEcdsaSignFailu ; "ECDSA sign	failure.  No ECDSA sign	will"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	dword ptr [ebp+var_2938], 1

loc_42D5B1:				; CODE XREF: _speed_main+53BDj
		mov	[esp+14h], ebx
		mov	eax, [ebp+var_2924]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 14h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_ECDSA_verify
		dec	eax
		jz	loc_42E87E
		mov	dword ptr [esp+4], offset aEcdsaVerifyFai ; "ECDSA verify failure.  No ECDSA verify "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	[ebp+esi*4+var_2754], 0

loc_42D615:				; CODE XREF: _speed_main+5F3Cj
		cmp	dword ptr [ebp+var_2938], 1
		jg	loc_42D500
		lea	eax, [esi+1]
		cmp	eax, 10h
		jz	loc_42DF57
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+2]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+3]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+4]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+5]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+6]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+7]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+8]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+9]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+0Ah]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+0Bh]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+0Ch]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+0Dh]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+0Eh]
		cmp	eax, 0Fh
		jg	loc_42EB04
		mov	[ebp+eax*4+var_2754], 0
		lea	eax, [esi+0Fh]
		cmp	eax, 0Fh
		jnz	loc_42EB04
		mov	[ebp+var_2718],	0
		add	esi, 10h
		jmp	loc_42D500
; ---------------------------------------------------------------------------
		align 10h

loc_42D790:				; CODE XREF: _speed_main+4929j
		mov	eax, [ebp+esi*4+var_2914]
		mov	dword ptr [ebp+var_2940], eax
		mov	[esp+14h], eax
		lea	eax, [ebp+var_2920]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 14h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 74h
		call	_DSA_sign
		test	eax, eax
		jnz	loc_42DAB0
		mov	dword ptr [esp+4], offset aDsaSignFailure ; "DSA sign failure.	No DSA sign will be "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	dword ptr [ebp+var_2938], 1

loc_42D801:				; CODE XREF: _speed_main+516Ej
		mov	eax, dword ptr [ebp+var_2940]
		mov	[esp+14h], eax
		mov	eax, [ebp+var_2920]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 14h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 74h
		call	_DSA_verify
		test	eax, eax
		jle	loc_42E803
		mov	eax, ds:_dsa_bits_37951[esi*4]
		mov	dword ptr [ebp+var_2948], eax
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E7B1
		mov	eax, offset aDoingDBitSSSFo ; "Doing %d	bit %s %s's for %ds: "

loc_42D85E:				; CODE XREF: _speed_main+5C36j
		mov	dword ptr [esp+14h], 0Ah
		mov	dword ptr [esp+10h], offset aDsa ; "dsa"
		mov	dword ptr [esp+0Ch], offset aVerify_6 ;	"verify"
		mov	ecx, dword ptr [ebp+var_2948]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 2710h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0 ; lpThreadId
		mov	dword ptr [esp+10h], 0 ; dwCreationFlags
		mov	dword ptr [esp+0Ch], 0 ; lpParameter
		mov	dword ptr [esp+8], offset _sleepy@4 ; lpStartAddress
		mov	dword ptr [esp+4], 1000h ; dwStackSize
		mov	dword ptr [esp], 0 ; lpThreadAttributes
		call	ds:__imp__CreateThread@24
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	ebx, ds:__imp__Sleep@4
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42D943
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42D930:				; CODE XREF: _speed_main+4DC1j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ebx ; __imp__Sleep@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42D930

loc_42D943:				; CODE XREF: _speed_main+4DA1j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jz	loc_42DA0B
		mov	dword ptr [ebp+var_2950], esi
		mov	esi, dword ptr [ebp+var_2940]
		jmp	short loc_42D9AA
; ---------------------------------------------------------------------------
		jmp	short loc_42D990
; ---------------------------------------------------------------------------
		align 10h

loc_42D990:				; CODE XREF: _speed_main+4E01j
					; _speed_main+4E5Cj
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jz	loc_42DF42
		cmp	ebx, 7FFFFFFFh
		jz	loc_42DF42

loc_42D9AA:				; CODE XREF: _speed_main+4DFFj
		mov	[esp+14h], esi
		mov	eax, [ebp+var_2920]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 14h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 74h
		call	_DSA_verify
		test	eax, eax
		jg	short loc_42D990
		mov	esi, dword ptr [ebp+var_2950]
		mov	dword ptr [esp+4], offset aDsaVerifyFailu ; "DSA verify	failure\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	ebx, 1

loc_42DA0B:				; CODE XREF: _speed_main+4DEDj
					; _speed_main+53C8j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	ecx, ds:_mr
		test	ecx, ecx
		jz	loc_42DF4D
		mov	eax, offset aR4LdD_2f ;	"+R4:%ld:%d:%.2f\n"

loc_42DA33:				; CODE XREF: _speed_main+53D2j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2940]
		mov	ecx, dword ptr [ebp+var_2948]
		mov	[esp+0Ch], ecx
		mov	[esp+8], ebx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, esi
		shl	eax, 4
		fld	[ebp+var_2940]
		push	ebx
		fidiv	dword ptr [esp]
		pop	edx
		fstp	ds:dbl_4735E8[eax]

loc_42DA72:				; CODE XREF: _speed_main+5CB0j
		cmp	dword ptr [ebp+var_2938], 1
		jg	loc_42D4AF
		lea	eax, [esi+1]
		cmp	eax, 3
		jz	loc_42F9E0
		mov	[ebp+eax*4+var_2908], 0
		test	esi, esi
		jnz	loc_42FA15
		mov	[ebp+var_2900],	0
		add	esi, 4
		jmp	loc_42D4B0
; ---------------------------------------------------------------------------

loc_42DAB0:				; CODE XREF: _speed_main+4C4Fj
		mov	eax, ds:_dsa_bits_37951[esi*4]
		mov	dword ptr [ebp+var_2948], eax
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42EAF0
		mov	eax, offset aDoingDBitSSSFo ; "Doing %d	bit %s %s's for %ds: "

loc_42DACF:				; CODE XREF: _speed_main+5F75j
		mov	dword ptr [esp+14h], 0Ah
		mov	dword ptr [esp+10h], offset aDsa ; "dsa"
		mov	dword ptr [esp+0Ch], offset aSign_1 ; "sign"
		mov	ecx, dword ptr [ebp+var_2948]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 2710h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0 ; lpThreadId
		mov	dword ptr [esp+10h], 0 ; dwCreationFlags
		mov	dword ptr [esp+0Ch], 0 ; lpParameter
		mov	dword ptr [esp+8], offset _sleepy@4 ; lpStartAddress
		mov	dword ptr [esp+4], 1000h ; dwStackSize
		mov	dword ptr [esp], 0 ; lpThreadAttributes
		call	ds:__imp__CreateThread@24
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	ebx
		mov	ebx, ds:__imp__Sleep@4
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42DBB4
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42DBA0:				; CODE XREF: _speed_main+5032j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ebx ; __imp__Sleep@4
		push	edx
		mov	ecx, ds:_schlock
		test	ecx, ecx
		jz	short loc_42DBA0

loc_42DBB4:				; CODE XREF: _speed_main+5012j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		mov	dword ptr [ebp+var_2938], 0
		test	eax, eax
		jz	loc_42DC81
		mov	ebx, dword ptr [ebp+var_2938]
		jmp	short loc_42DC1A
; ---------------------------------------------------------------------------
		align 10h

loc_42DC00:				; CODE XREF: _speed_main+50D3j
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jz	loc_42E7C6
		cmp	ebx, 7FFFFFFFh
		jz	loc_42E7C6

loc_42DC1A:				; CODE XREF: _speed_main+5072j
		mov	eax, [ebp+esi*4+var_2914]
		mov	[esp+14h], eax
		lea	eax, [ebp+var_2920]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 14h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 74h
		call	_DSA_sign
		test	eax, eax
		jnz	short loc_42DC00
		mov	dword ptr [esp+4], offset aDsaSignFailu_0 ; "DSA sign failure\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	dword ptr [ebp+var_2938], 1

loc_42DC81:				; CODE XREF: _speed_main+5066j
					; _speed_main+5C4Cj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, ds:_mr
		test	eax, eax
		jz	loc_42E874
		mov	eax, offset aR3LdD_2f ;	"+R3:%ld:%d:%.2f\n"

loc_42DCA8:				; CODE XREF: _speed_main+5CF9j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2950]
		mov	ecx, dword ptr [ebp+var_2948]
		mov	[esp+0Ch], ecx
		mov	ecx, dword ptr [ebp+var_2938]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, esi
		shl	eax, 4
		fld	[ebp+var_2950]
		fidiv	dword ptr [ebp+var_2938]
		fstp	ds:_dsa_results[eax]
		jmp	loc_42D801
; ---------------------------------------------------------------------------
		align 10h

loc_42DD00:				; CODE XREF: _speed_main+49FFj
		mov	eax, ds:_test_curves_bits_37954[esi*4]
		mov	dword ptr [ebp+var_2940], eax
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42EB65
		mov	eax, offset aDoingDBitSSSFo ; "Doing %d	bit %s %s's for %ds: "

loc_42DD20:				; CODE XREF: _speed_main+5FEAj
		mov	dword ptr [esp+14h], 0Ah
		mov	dword ptr [esp+10h], offset aEcdsa ; "ecdsa"
		mov	dword ptr [esp+0Ch], offset aSign_1 ; "sign"
		mov	ecx, dword ptr [ebp+var_2940]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 2710h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0 ; lpThreadId
		mov	dword ptr [esp+10h], 0 ; dwCreationFlags
		mov	dword ptr [esp+0Ch], 0 ; lpParameter
		mov	dword ptr [esp+8], offset _sleepy@4 ; lpStartAddress
		mov	dword ptr [esp+4], 1000h ; dwStackSize
		mov	dword ptr [esp], 0 ; lpThreadAttributes
		call	ds:__imp__CreateThread@24
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:__imp__Sleep@4
		mov	edx, ds:_schlock
		test	edx, edx
		jnz	short loc_42DE09
		mov	dword ptr [ebp+var_2938], ebx
		mov	ebx, eax
		lea	esi, [esi+0]

loc_42DDF0:				; CODE XREF: _speed_main+5281j
		mov	dword ptr [esp], 0
		call	ebx
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42DDF0
		mov	ebx, dword ptr [ebp+var_2938]

loc_42DE09:				; CODE XREF: _speed_main+5263j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		mov	dword ptr [ebp+var_2938], 0
		test	eax, eax
		jz	loc_42DED0
		mov	dword ptr [ebp+var_2948], esi
		mov	esi, dword ptr [ebp+var_2938]
		jmp	short loc_42DE6A
; ---------------------------------------------------------------------------
		align 10h

loc_42DE50:				; CODE XREF: _speed_main+531Cj
		inc	esi
		mov	eax, ds:_run
		test	eax, eax
		jz	loc_42EAD5
		cmp	esi, 7FFFFFFFh
		jz	loc_42EAD5

loc_42DE6A:				; CODE XREF: _speed_main+52CDj
		mov	[esp+14h], ebx
		lea	eax, [ebp+var_2924]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 14h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_ECDSA_sign
		test	eax, eax
		jnz	short loc_42DE50
		mov	esi, dword ptr [ebp+var_2948]
		mov	dword ptr [esp+4], offset aEcdsaSignFai_0 ; "ECDSA sign	failure\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	dword ptr [ebp+var_2938], 1

loc_42DED0:				; CODE XREF: _speed_main+52BBj
					; _speed_main+5F61j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, ds:_mr
		test	eax, eax
		jz	loc_42EAE6
		mov	eax, offset aR5LdD_2f ;	"+R5:%ld:%d:%.2f\n"

loc_42DEF7:				; CODE XREF: _speed_main+5F6Bj
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2948]
		mov	ecx, dword ptr [ebp+var_2940]
		mov	[esp+0Ch], ecx
		mov	ecx, dword ptr [ebp+var_2938]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, esi
		shl	eax, 4
		fld	[ebp+var_2948]
		fidiv	dword ptr [ebp+var_2938]
		fstp	ds:_ecdsa_results[eax]
		jmp	loc_42D5B1
; ---------------------------------------------------------------------------

loc_42DF42:				; CODE XREF: _speed_main+4E18j
					; _speed_main+4E24j
		mov	esi, dword ptr [ebp+var_2950]
		jmp	loc_42DA0B
; ---------------------------------------------------------------------------

loc_42DF4D:				; CODE XREF: _speed_main+4EA8j
		mov	eax, offset aLdDBitDsaVerif ; "%ld %d bit DSA verify in	%.2fs\n"
		jmp	loc_42DA33
; ---------------------------------------------------------------------------

loc_42DF57:				; CODE XREF: _speed_main+4984j
					; _speed_main+4AA8j
		mov	esi, ds:_rnd_fake
		test	esi, esi
		jnz	loc_42EDBF

loc_42DF65:				; CODE XREF: _speed_main+6244j
		call	_RAND_status
		dec	eax
		jz	short loc_42DF8B
		mov	dword ptr [esp+4], 40h
		mov	dword ptr [esp], offset	_rnd_seed ; "string to make the	random number genera"...
		call	_RAND_seed
		mov	ds:_rnd_fake, 1

loc_42DF8B:				; CODE XREF: _speed_main+53EBj
		xor	edi, edi
		jmp	short loc_42DF9A
; ---------------------------------------------------------------------------
		align 10h

loc_42DF90:				; CODE XREF: _speed_main+5423j
					; _speed_main+55F7j ...
		inc	edi
		cmp	edi, 0Fh
		jg	loc_42E189

loc_42DF9A:				; CODE XREF: _speed_main+540Dj
		mov	ebx, [ebp+edi*4+var_2714]
		test	ebx, ebx
		jz	short loc_42DF90
		mov	esi, ds:_test_curves_37952[edi*4]
		mov	[esp], esi
		call	_EC_KEY_new_by_curve_name
		mov	ebx, eax
		mov	[ebp+edi*4+var_27D4], eax
		mov	[esp], esi
		call	_EC_KEY_new_by_curve_name
		mov	esi, eax
		mov	[ebp+edi*4+var_2794], eax
		test	ebx, ebx
		jz	loc_42E17C
		test	eax, eax
		jz	loc_42E17C
		mov	[esp], ebx
		call	_EC_KEY_generate_key
		test	eax, eax
		jz	short loc_42DFFA
		mov	[esp], esi
		call	_EC_KEY_generate_key
		test	eax, eax
		jnz	loc_42F2B3

loc_42DFFA:				; CODE XREF: _speed_main+5468j
		mov	dword ptr [esp+4], offset aEcdhKeyGenerat ; "ECDH key generation failure.\n"

loc_42E002:				; CODE XREF: _speed_main+5604j
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors

loc_42E01C:				; CODE XREF: _speed_main+6A3Fj
		lea	eax, [edi+1]
		cmp	eax, 10h
		jz	loc_42E189
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+2]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+3]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+4]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+5]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+6]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+7]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+8]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+9]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+0Ah]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+0Bh]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+0Ch]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+0Dh]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+0Eh]
		cmp	eax, 0Fh
		jg	loc_42EB0B
		mov	[ebp+eax*4+var_2714], 0
		lea	eax, [edi+0Fh]
		cmp	eax, 0Fh
		jnz	loc_42EB0B
		mov	[ebp+var_26D8],	0
		add	edi, 10h
		jmp	loc_42DF90
; ---------------------------------------------------------------------------

loc_42E17C:				; CODE XREF: _speed_main+5450j
					; _speed_main+5458j
		mov	dword ptr [esp+4], offset aEcdhFailure_	; "ECDH	failure.\n"
		jmp	loc_42E002
; ---------------------------------------------------------------------------

loc_42E189:				; CODE XREF: _speed_main+5414j
					; _speed_main+54A2j
		mov	eax, ds:_rnd_fake
		test	eax, eax
		jnz	loc_42EDB5

loc_42E196:				; CODE XREF: _speed_main+623Aj
		mov	eax, ds:_mr
		test	eax, eax
		jz	loc_42ECAE

loc_42E1A3:				; CODE XREF: _speed_main+6230j
		mov	eax, [ebp+var_2964]
		test	eax, eax
		jz	loc_42E2B5
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	edi, ds:_mr
		test	edi, edi
		mov	[esp+0Ch], eax	; FILE *
		jz	loc_42EBEB
		mov	dword ptr [esp+8], 2 ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	asc_467FDB ; "+H"
		call	_fwrite

loc_42E1E7:				; CODE XREF: _speed_main+60AFj
		xor	ebx, ebx
		jmp	short loc_42E217
; ---------------------------------------------------------------------------
		align 10h

loc_42E1F0:				; CODE XREF: _speed_main+56A6j
		mov	eax, offset aD_7 ; ":%d"

loc_42E1F5:				; CODE XREF: _speed_main+56ADj
		mov	[esp+8], edx
		mov	[esp+4], eax	; char *
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		inc	ebx
		cmp	ebx, 5
		jz	loc_42E29D

loc_42E217:				; CODE XREF: _speed_main+5669j
		mov	edx, ds:_lengths[ebx*4]
		mov	esi, ds:_mr
		test	esi, esi
		jnz	short loc_42E1F0
		mov	eax, offset a7dBytes ; "%7d bytes"
		jmp	short loc_42E1F5
; ---------------------------------------------------------------------------

loc_42E22F:				; CODE XREF: _speed_main+A13j
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42959E
; ---------------------------------------------------------------------------

loc_42E239:				; CODE XREF: _speed_main+112Cj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_429CB7
; ---------------------------------------------------------------------------

loc_42E243:				; CODE XREF: _speed_main+128Aj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_429E15
; ---------------------------------------------------------------------------

loc_42E24D:				; CODE XREF: _speed_main+133Cj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_429EC7
; ---------------------------------------------------------------------------

loc_42E257:				; CODE XREF: _speed_main+CDCj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_429867
; ---------------------------------------------------------------------------

loc_42E261:				; CODE XREF: _speed_main+E5Aj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_4299E5
; ---------------------------------------------------------------------------

loc_42E26B:				; CODE XREF: _speed_main+F0Cj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_429A97
; ---------------------------------------------------------------------------

loc_42E275:				; CODE XREF: _speed_main+1083j
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_429C0E
; ---------------------------------------------------------------------------

loc_42E27F:				; CODE XREF: _speed_main+ABCj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_429647
; ---------------------------------------------------------------------------

loc_42E289:				; CODE XREF: _speed_main+C33j
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_4297BE
; ---------------------------------------------------------------------------

loc_42E293:				; CODE XREF: _speed_main+89Cj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_429427
; ---------------------------------------------------------------------------

loc_42E29D:				; CODE XREF: _speed_main+5691j
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+4], eax	; FILE *
		mov	dword ptr [esp], 0Ah ; int
		call	_fputc

loc_42E2B5:				; CODE XREF: _speed_main+562Bj
		xor	ebx, ebx
		mov	esi, esi
		lea	edi, [edi+0]

loc_42E2C0:				; CODE XREF: _speed_main+57F6j
		mov	ecx, [ebp+ebx*4+var_2614]
		test	ecx, ecx
		jz	loc_42E372
		mov	eax, _names[ebx*4]
		mov	edx, ds:_mr
		test	edx, edx
		jz	loc_42E480
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset aFDS ; "+F:%d:%s"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf

loc_42E304:				; CODE XREF: _speed_main+591Cj
		lea	edi, [ebx+ebx*4]
		shl	edi, 3
		xor	esi, esi

loc_42E30C:				; CODE XREF: _speed_main+57D8j
		fld	ds:_results[edi+esi*8]
		fld	ds:flt_4684E0
		fxch	st(1)
		fucom	st(1)
		fnstsw	ax
		fstp	st(1)
		test	ah, 45h
		jnz	loc_42E430
		mov	eax, ds:_mr
		test	eax, eax
		jz	loc_42E450

loc_42E337:				; CODE XREF: _speed_main+58B7j
		mov	eax, offset a_2f ; ":%.2f"

loc_42E33C:				; CODE XREF: _speed_main+58C2j
		fstp	qword ptr [esp+8]
		mov	[esp+4], eax	; char *
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf

loc_42E354:				; CODE XREF: _speed_main+58F2j
		inc	esi
		cmp	esi, 5
		jnz	short loc_42E30C
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+4], eax	; FILE *
		mov	dword ptr [esp], 0Ah ; int
		call	_fputc

loc_42E372:				; CODE XREF: _speed_main+5749j
		inc	ebx
		cmp	ebx, 1Eh
		jnz	loc_42E2C0
		mov	edi, offset dbl_473628
		xor	esi, esi
		mov	edx, 1
		lea	ebx, [ebp+var_28EC]

loc_42E38E:				; CODE XREF: _speed_main+5874j
		mov	eax, [ebx+esi*4]
		test	eax, eax
		jz	short loc_42E3ED
		test	edx, edx
		jz	loc_42E4B5
		mov	ecx, ds:_mr
		test	ecx, ecx
		jz	loc_42E4A1

loc_42E3AB:				; CODE XREF: _speed_main+624Bj
		mov	dword ptr [ebp+var_2938], edx
		fld	qword ptr [edi]
		fld	qword ptr [edi-8]
		fxch	st(1)
		fstp	qword ptr [esp+18h]
		fstp	qword ptr [esp+10h]
		mov	eax, ds:_rsa_bits_37946[esi*4]
		mov	[esp+0Ch], eax
		mov	[esp+8], esi
		mov	dword ptr [esp+4], offset aF2UUFF ; "+F2:%u:%u:%f:%f\n"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		mov	edx, dword ptr [ebp+var_2938]

loc_42E3ED:				; CODE XREF: _speed_main+5813j
					; _speed_main+5987j
		inc	esi
		add	edi, 10h
		cmp	esi, 4
		jnz	short loc_42E38E
		mov	eax, [ebp+var_2908]
		test	eax, eax
		jnz	loc_42F5FF
		mov	ecx, [ebp+var_2904]
		test	ecx, ecx
		jnz	loc_42F65F
		mov	edx, [ebp+var_2900]
		test	edx, edx
		jz	loc_42F70A
		jmp	loc_42F6C0
; ---------------------------------------------------------------------------
		align 10h

loc_42E430:				; CODE XREF: _speed_main+57A4j
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42E337
		mov	eax, offset a11_2f ; " %11.2f "
		jmp	loc_42E33C
; ---------------------------------------------------------------------------
		align 10h

loc_42E450:				; CODE XREF: _speed_main+57B1j
		fdiv	ds:flt_4684E4
		fstp	qword ptr [esp+8]
		mov	dword ptr [esp+4], offset a11_2fk ; " %11.2fk"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		jmp	loc_42E354
; ---------------------------------------------------------------------------
		align 10h

loc_42E480:				; CODE XREF: _speed_main+575Ej
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset a13s ; "%-13s"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		jmp	loc_42E304
; ---------------------------------------------------------------------------

loc_42E4A1:				; CODE XREF: _speed_main+5825j
		mov	dword ptr [esp+4], offset asc_468040 ; " "
		mov	dword ptr [esp], offset	a18ssignVerifyS	; "%18ssign    verify	 sign/s	verify/s\n"
		call	_printf

loc_42E4B5:				; CODE XREF: _speed_main+5817j
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42EDC9
		fld	qword ptr [edi]
		fld	qword ptr [edi-8]
		fld1
		fld	st
		fdiv	st, st(3)
		fstp	qword ptr [esp+24h]
		fdiv	st, st(1)
		fstp	qword ptr [esp+1Ch]
		fxch	st(1)
		fstp	qword ptr [esp+14h]
		fstp	qword ptr [esp+0Ch]
		mov	eax, ds:_rsa_bits_37946[esi*4]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aRsa4uBits8_6fs ; "rsa %4u bits %8.6fs %8.6fs	%8.1f %8.1f\"...
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		xor	edx, edx
		jmp	loc_42E3ED
; ---------------------------------------------------------------------------

loc_42E50C:				; CODE XREF: _speed_main+149Aj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42A025
; ---------------------------------------------------------------------------

loc_42E516:				; CODE XREF: _speed_main+154Cj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42A0D7
; ---------------------------------------------------------------------------

loc_42E520:				; CODE XREF: _speed_main+16AAj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42A235
; ---------------------------------------------------------------------------

loc_42E52A:				; CODE XREF: _speed_main+175Cj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42A2E7
; ---------------------------------------------------------------------------

loc_42E534:				; CODE XREF: _speed_main+18D3j
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42A45E
; ---------------------------------------------------------------------------

loc_42E53E:				; CODE XREF: _speed_main+198Cj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42A517
; ---------------------------------------------------------------------------

loc_42E548:				; CODE XREF: _speed_main+1AFAj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42A685
; ---------------------------------------------------------------------------

loc_42E552:				; CODE XREF: _speed_main+1BACj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42A737
; ---------------------------------------------------------------------------

loc_42E55C:				; CODE XREF: _speed_main+1D31j
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42A8BC
; ---------------------------------------------------------------------------

loc_42E566:				; CODE XREF: _speed_main+1DDCj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42A967
; ---------------------------------------------------------------------------

loc_42E570:				; CODE XREF: _speed_main+1F75j
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42AB00
; ---------------------------------------------------------------------------

loc_42E57A:				; CODE XREF: _speed_main+202Cj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42ABB7
; ---------------------------------------------------------------------------

loc_42E584:				; CODE XREF: _speed_main+21ACj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42AD37
; ---------------------------------------------------------------------------

loc_42E58E:				; CODE XREF: _speed_main+33EDj
		mov	eax, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42BF78
; ---------------------------------------------------------------------------

loc_42E598:				; CODE XREF: _speed_main+356Cj
		mov	eax, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42C0F7
; ---------------------------------------------------------------------------

loc_42E5A2:				; CODE XREF: _speed_main+225Cj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42ADE7
; ---------------------------------------------------------------------------

loc_42E5AC:				; CODE XREF: _speed_main+23DCj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42AF67
; ---------------------------------------------------------------------------

loc_42E5B6:				; CODE XREF: _speed_main+248Cj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42B017
; ---------------------------------------------------------------------------

loc_42E5C0:				; CODE XREF: _speed_main+260Cj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42B197
; ---------------------------------------------------------------------------

loc_42E5CA:				; CODE XREF: _speed_main+26BCj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42B247
; ---------------------------------------------------------------------------

loc_42E5D4:				; CODE XREF: _speed_main+283Cj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42B3C7
; ---------------------------------------------------------------------------

loc_42E5DE:				; CODE XREF: _speed_main+28ECj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42B477
; ---------------------------------------------------------------------------

loc_42E5E8:				; CODE XREF: _speed_main+2A6Cj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42B5F7
; ---------------------------------------------------------------------------

loc_42E5F2:				; CODE XREF: _speed_main+2B1Cj
		mov	eax, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42B6A7
; ---------------------------------------------------------------------------

loc_42E5FC:				; CODE XREF: _speed_main+2C9Cj
		mov	eax, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42B827
; ---------------------------------------------------------------------------

loc_42E606:				; CODE XREF: _speed_main+2D5Dj
		mov	eax, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42B8E8
; ---------------------------------------------------------------------------

loc_42E610:				; CODE XREF: _speed_main+2EDCj
		mov	eax, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42BA67
; ---------------------------------------------------------------------------

loc_42E61A:				; CODE XREF: _speed_main+2F8Dj
		mov	eax, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42BB18
; ---------------------------------------------------------------------------

loc_42E624:				; CODE XREF: _speed_main+310Cj
		mov	eax, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42BC97
; ---------------------------------------------------------------------------

loc_42E62E:				; CODE XREF: _speed_main+31BDj
		mov	eax, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42BD48
; ---------------------------------------------------------------------------

loc_42E638:				; CODE XREF: _speed_main+333Cj
		mov	eax, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42BEC7
; ---------------------------------------------------------------------------

loc_42E642:				; CODE XREF: _speed_main+361Dj
		mov	eax, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42C1A8
; ---------------------------------------------------------------------------

loc_42E64C:				; CODE XREF: _speed_main+379Cj
		mov	eax, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42C327
; ---------------------------------------------------------------------------

loc_42E656:				; CODE XREF: _speed_main+384Dj
		mov	eax, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42C3D8
; ---------------------------------------------------------------------------

loc_42E660:				; CODE XREF: _speed_main+39CCj
		mov	eax, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42C557
; ---------------------------------------------------------------------------

loc_42E66A:				; CODE XREF: _speed_main+3A7Dj
		mov	eax, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42C608
; ---------------------------------------------------------------------------

loc_42E674:				; CODE XREF: _speed_main+3BFCj
		mov	eax, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42C787
; ---------------------------------------------------------------------------

loc_42E67E:				; CODE XREF: _speed_main+3CADj
		mov	eax, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42C838
; ---------------------------------------------------------------------------

loc_42E688:				; CODE XREF: _speed_main+3E2Cj
		mov	eax, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42C9B7
; ---------------------------------------------------------------------------

loc_42E692:				; CODE XREF: _speed_main+42A4j
		mov	eax, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	loc_42CE2F
; ---------------------------------------------------------------------------

loc_42E69C:				; CODE XREF: _speed_main+2F7j
		mov	eax, [ebx+4]
		mov	[esp], eax
		call	_EVP_get_digestbyname
		mov	dword ptr [ebp+var_2948], eax
		test	eax, eax
		jnz	loc_428E7D
		mov	eax, [ebx+4]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aSIsAnUnknown_0 ; "%s	is an unknown cipher or	digest\n"

loc_42E6C4:				; CODE XREF: _speed_main+6E76j
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	esi, 1
		lea	ebx, [ebp+var_28EC]
		lea	esi, [esi+0]

loc_42E6E0:				; CODE XREF: _speed_main+6A70j
					; _speed_main+6D2Ej
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_CRYPTO_free
		mov	eax, [ebp+var_2930]
		mov	[esp], eax
		call	_CRYPTO_free
		jmp	loc_428C1E
; ---------------------------------------------------------------------------

loc_42E70E:				; CODE XREF: _speed_main+4043j
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		lea	esi, [ebp+var_1B08]
		test	eax, eax
		jz	short loc_42E77C
		mov	dword ptr [ebp+var_2938], edi
		mov	edi, [ebp+var_292C]
		jmp	short loc_42E748
; ---------------------------------------------------------------------------
		align 10h

loc_42E740:				; CODE XREF: _speed_main+5BF4j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42E776

loc_42E748:				; CODE XREF: _speed_main+5BB5j
		mov	eax, dword ptr [ebp+var_2938]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	[esp+8], esi
		mov	[esp+4], edi
		lea	eax, [ebp+var_2318]
		mov	[esp], eax
		call	_EVP_EncryptUpdate
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42E740

loc_42E776:				; CODE XREF: _speed_main+5BC6j
		mov	edi, dword ptr [ebp+var_2938]

loc_42E77C:				; CODE XREF: _speed_main+5BA7j
		mov	[esp+8], esi
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		lea	eax, [ebp+var_2318]
		mov	[esp], eax
		call	_EVP_EncryptFinal_ex
		jmp	loc_42CC58
; ---------------------------------------------------------------------------

loc_42E79D:				; CODE XREF: _speed_main+3F7Dj
		call	_EVP_EncryptInit_ex
		jmp	loc_42CB08
; ---------------------------------------------------------------------------

loc_42E7A7:				; CODE XREF: _speed_main+4408j
		mov	eax, offset aDtpDSSD ; "+DTP:%d:%s:%s:%d\n"
		jmp	loc_42CF93
; ---------------------------------------------------------------------------

loc_42E7B1:				; CODE XREF: _speed_main+4CD3j
		mov	eax, offset aDtpDSSD ; "+DTP:%d:%s:%s:%d\n"
		jmp	loc_42D85E
; ---------------------------------------------------------------------------

loc_42E7BB:				; CODE XREF: _speed_main+47D8j
					; _speed_main+47E4j
		mov	dword ptr [ebp+var_2938], ebx
		jmp	loc_42D3D1
; ---------------------------------------------------------------------------

loc_42E7C6:				; CODE XREF: _speed_main+5088j
					; _speed_main+5094j
		mov	dword ptr [ebp+var_2938], ebx
		jmp	loc_42DC81
; ---------------------------------------------------------------------------

loc_42E7D1:				; CODE XREF: _speed_main+43EEj
		mov	dword ptr [esp+4], offset aRsaVerifyFai_0 ; "RSA verify	failure.  No RSA verify	will"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	[ebp+esi*4+var_28EC], 0
		jmp	loc_42D1A2
; ---------------------------------------------------------------------------

loc_42E803:				; CODE XREF: _speed_main+4CB9j
		mov	dword ptr [esp+4], offset aDsaVerifyFai_0 ; "DSA verify	failure.  No DSA verify	will"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	[ebp+esi*4+var_2908], 0
		jmp	loc_42DA72
; ---------------------------------------------------------------------------

loc_42E835:				; CODE XREF: _speed_main+3FEj
		mov	edi, offset aHmac_0 ; "hmac"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_42EB96
		mov	[ebp+var_2604],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42E858:				; CODE XREF: _speed_main+3EADj
		mov	eax, dword ptr [ebp+var_2940]
		mov	edi, ds:_lengths[eax*4]
		jmp	loc_42CC87
; ---------------------------------------------------------------------------

loc_42E86A:				; CODE XREF: _speed_main+486Dj
		mov	eax, offset aLdDBitPrivateR ; "%ld %d bit private RSA's in %.2fs\n"
		jmp	loc_42D3F8
; ---------------------------------------------------------------------------

loc_42E874:				; CODE XREF: _speed_main+511Dj
		mov	eax, offset aLdDBitDsaSigns ; "%ld %d bit DSA signs in %.2fs\n"
		jmp	loc_42DCA8
; ---------------------------------------------------------------------------

loc_42E87E:				; CODE XREF: _speed_main+4A62j
		mov	eax, ds:_test_curves_bits_37954[esi*4]
		mov	dword ptr [ebp+var_2948], eax
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42F5F5
		mov	eax, offset aDoingDBitSSSFo ; "Doing %d	bit %s %s's for %ds: "

loc_42E89E:				; CODE XREF: _speed_main+6A7Aj
		mov	dword ptr [esp+14h], 0Ah
		mov	dword ptr [esp+10h], offset aEcdsa ; "ecdsa"
		mov	dword ptr [esp+0Ch], offset aVerify_6 ;	"verify"
		mov	ecx, dword ptr [ebp+var_2948]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 2710h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0 ; lpThreadId
		mov	dword ptr [esp+10h], 0 ; dwCreationFlags
		mov	dword ptr [esp+0Ch], 0 ; lpParameter
		mov	dword ptr [esp+8], offset _sleepy@4 ; lpStartAddress
		mov	dword ptr [esp+4], 1000h ; dwStackSize
		mov	dword ptr [esp], 0 ; lpThreadAttributes
		call	ds:__imp__CreateThread@24
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:__imp__Sleep@4
		mov	edx, ds:_schlock
		test	edx, edx
		jnz	short loc_42E989
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, eax
		nop
		lea	esi, [esi+0]

loc_42E970:				; CODE XREF: _speed_main+5E01j
		mov	dword ptr [esp], 0
		call	esi
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jz	short loc_42E970
		mov	esi, dword ptr [ebp+var_2940]

loc_42E989:				; CODE XREF: _speed_main+5DE1j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		mov	dword ptr [ebp+var_2940], 0
		test	eax, eax
		jz	loc_42EA4F
		mov	dword ptr [ebp+var_2950], esi
		mov	esi, dword ptr [ebp+var_2940]
		jmp	short loc_42E9EA
; ---------------------------------------------------------------------------
		align 10h

loc_42E9D0:				; CODE XREF: _speed_main+5E9Bj
		inc	esi
		mov	eax, ds:_run
		test	eax, eax
		jz	loc_42EC43
		cmp	esi, 7FFFFFFFh
		jz	loc_42EC43

loc_42E9EA:				; CODE XREF: _speed_main+5E4Dj
		mov	[esp+14h], ebx
		mov	eax, [ebp+var_2924]
		mov	[esp+10h], eax
		mov	[esp+0Ch], edi
		mov	dword ptr [esp+8], 14h
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_ECDSA_verify
		dec	eax
		jz	short loc_42E9D0
		mov	esi, dword ptr [ebp+var_2950]
		mov	dword ptr [esp+4], offset aEcdsaVerifyF_0 ; "ECDSA verify failure\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	dword ptr [ebp+var_2940], 1

loc_42EA4F:				; CODE XREF: _speed_main+5E3Bj
					; _speed_main+60CFj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42EBE1
		mov	eax, offset aLdDBitEcdsaVer ; "%ld %d bit ECDSA	verify in %.2fs\n"

loc_42EA76:				; CODE XREF: _speed_main+6066j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2950]
		mov	ecx, dword ptr [ebp+var_2948]
		mov	[esp+0Ch], ecx
		mov	ecx, dword ptr [ebp+var_2940]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, esi
		shl	eax, 4
		fld	[ebp+var_2950]
		fidiv	dword ptr [ebp+var_2940]
		fstp	ds:dbl_4734E8[eax]
		jmp	loc_42D615
; ---------------------------------------------------------------------------

loc_42EAC1:				; CODE XREF: _speed_main+412Ej
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42CCB9
; ---------------------------------------------------------------------------

loc_42EACB:				; CODE XREF: _speed_main+3EDFj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42CA6A
; ---------------------------------------------------------------------------

loc_42EAD5:				; CODE XREF: _speed_main+52D8j
					; _speed_main+52E4j
		mov	dword ptr [ebp+var_2938], esi
		mov	esi, dword ptr [ebp+var_2948]
		jmp	loc_42DED0
; ---------------------------------------------------------------------------

loc_42EAE6:				; CODE XREF: _speed_main+536Cj
		mov	eax, offset aLdDBitEcdsaSig ; "%ld %d bit ECDSA	signs in %.2fs \n"
		jmp	loc_42DEF7
; ---------------------------------------------------------------------------

loc_42EAF0:				; CODE XREF: _speed_main+4F44j
		mov	eax, offset aDtpDSSD ; "+DTP:%d:%s:%s:%d\n"
		jmp	loc_42DACF
; ---------------------------------------------------------------------------

loc_42EAFA:				; CODE XREF: _speed_main+4694j
		mov	eax, offset aDtpDSSD ; "+DTP:%d:%s:%s:%d\n"
		jmp	loc_42D21F
; ---------------------------------------------------------------------------

loc_42EB04:				; CODE XREF: _speed_main+4ABFj
					; _speed_main+4AD6j ...
		mov	esi, eax
		jmp	loc_42D500
; ---------------------------------------------------------------------------

loc_42EB0B:				; CODE XREF: _speed_main+54B9j
					; _speed_main+54D0j ...
		mov	edi, eax
		jmp	loc_42DF90
; ---------------------------------------------------------------------------

loc_42EB12:				; CODE XREF: _speed_main+5Cj
		call	_BIO_s_file
		mov	[esp], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_428BE2
		mov	ecx, ds:__imp___iob
		lea	edx, [ecx+40h]
		mov	[esp+0Ch], edx
		mov	dword ptr [esp+8], 10h
		mov	dword ptr [esp+4], 6Ah
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_428BE2
; ---------------------------------------------------------------------------

loc_42EB5C:				; CODE XREF: _speed_main+85Bj
		fldz
		xor	ebx, ebx
		jmp	loc_4295F4
; ---------------------------------------------------------------------------

loc_42EB65:				; CODE XREF: _speed_main+5195j
		mov	eax, offset aDtpDSSD ; "+DTP:%d:%s:%s:%d\n"
		jmp	loc_42DD20
; ---------------------------------------------------------------------------

loc_42EB6F:				; CODE XREF: _speed_main+49AFj
		mov	dword ptr [esp+4], offset aEcdsaFailure_ ; "ECDSA failure.\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		jmp	loc_42D500
; ---------------------------------------------------------------------------

loc_42EB96:				; CODE XREF: _speed_main+5CC3j
		mov	edi, offset aSha1 ; "sha1"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jz	loc_42EC34
		mov	edi, offset aSha ; "sha"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	loc_42FA84
		mov	[ebp+var_2600],	1
		mov	[ebp+var_25B8],	1
		mov	[ebp+var_25B4],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42EBE1:				; CODE XREF: _speed_main+5EEBj
		mov	eax, offset aR6LdD_2f ;	"+R6:%ld:%d:%.2f\n"
		jmp	loc_42EA76
; ---------------------------------------------------------------------------

loc_42EBEB:				; CODE XREF: _speed_main+5645j
		mov	dword ptr [esp+8], 3Ah ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aTheNumbersAreI	; "The 'numbers' are in 1000s of bytes per"...
		call	_fwrite
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+0Ch], eax	; FILE *
		mov	dword ptr [esp+8], 0Ch ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aType ;	"type	     "
		call	_fwrite
		jmp	loc_42E1E7
; ---------------------------------------------------------------------------

loc_42EC34:				; CODE XREF: _speed_main+6024j
		mov	[ebp+var_2600],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42EC43:				; CODE XREF: _speed_main+5E58j
					; _speed_main+5E64j
		mov	dword ptr [ebp+var_2940], esi
		mov	esi, dword ptr [ebp+var_2950]
		jmp	loc_42EA4F
; ---------------------------------------------------------------------------

loc_42EC54:				; CODE XREF: _speed_main+17Bj
		mov	dword ptr [esp+4], offset aOutOfMemory_8 ; "out	of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_428C06
; ---------------------------------------------------------------------------

loc_42EC6E:				; CODE XREF: _speed_main+1A5j
		mov	dword ptr [esp+4], offset aOutOfMemory_8 ; "out	of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	eax, [ebp+var_292C]
		mov	[esp], eax
		call	_CRYPTO_free
		mov	esi, 1
		lea	ebx, [ebp+var_28EC]
		jmp	loc_428C1E
; ---------------------------------------------------------------------------

loc_42ECAE:				; CODE XREF: _speed_main+561Dj
		mov	dword ptr [esp], 0
		call	_SSLeay_version
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aS_20	; "%s\n"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		mov	dword ptr [esp], 3
		call	_SSLeay_version
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aS_20	; "%s\n"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		mov	dword ptr [esp], offset	aOptions ; "options:"
		call	_printf
		call	_BN_options
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aS_10 ;	"%s "
		call	_printf
		call	_RC4_options
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aS_10 ;	"%s "
		call	_printf
		call	_DES_options
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aS_10 ;	"%s "
		call	_printf
		call	_AES_options
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aS_10 ;	"%s "
		call	_printf
		call	_idea_options
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aS_10 ;	"%s "
		call	_printf
		call	_BF_options
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aS_10 ;	"%s "
		call	_printf
		mov	dword ptr [esp], 2
		call	_SSLeay_version
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aS_11	; "\n%s\n"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		jmp	loc_42E1A3
; ---------------------------------------------------------------------------

loc_42EDB5:				; CODE XREF: _speed_main+5610j
		call	_RAND_cleanup
		jmp	loc_42E196
; ---------------------------------------------------------------------------

loc_42EDBF:				; CODE XREF: _speed_main+53DFj
		call	_RAND_cleanup
		jmp	loc_42DF65
; ---------------------------------------------------------------------------

loc_42EDC9:				; CODE XREF: _speed_main+593Dj
		xor	edx, edx
		jmp	loc_42E3AB
; ---------------------------------------------------------------------------

loc_42EDD0:				; CODE XREF: _speed_main+493Dj
		call	_RAND_cleanup
		jmp	loc_42D4C3
; ---------------------------------------------------------------------------

loc_42EDDA:				; CODE XREF: _speed_main+2D05j
		fstp	st
		mov	dword ptr [esp+4], offset _AES_encrypt
		lea	eax, [ebp+var_20E4]
		mov	[esp], eax
		call	_CRYPTO_gcm128_new
		mov	edi, eax
		mov	dword ptr [esp+8], 0Ch
		mov	dword ptr [esp+4], offset a0123456789ab	; "0123456789ab"
		mov	[esp], eax
		call	_CRYPTO_gcm128_setiv
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		jmp	short loc_42EE25
; ---------------------------------------------------------------------------

loc_42EE23:				; CODE XREF: _speed_main+6471j
		fstp	st

loc_42EE25:				; CODE XREF: _speed_main+62A1j
		mov	eax, dword ptr [ebp+var_2940]
		mov	esi, ds:_lengths[eax*4]
		mov	eax, off_455954
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42F010
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42EE4A:				; CODE XREF: _speed_main+6495j
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42EF18
		mov	esi, esi
		lea	edi, [edi+0]

loc_42EF00:				; CODE XREF: _speed_main+6396j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	ecx
		mov	ebx, ds:_schlock
		test	ebx, ebx
		jz	short loc_42EF00

loc_42EF18:				; CODE XREF: _speed_main+6375j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jnz	short loc_42EF58
		jmp	short loc_42EF78
; ---------------------------------------------------------------------------
		align 10h

loc_42EF50:				; CODE XREF: _speed_main+63F6j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42EF78

loc_42EF58:				; CODE XREF: _speed_main+63C2j
		mov	[esp+8], esi
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	[esp], edi
		call	_CRYPTO_gcm128_aad
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42EF50

loc_42EF78:				; CODE XREF: _speed_main+63C4j
					; _speed_main+63D6j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_455954
		mov	edx, ds:_mr
		test	edx, edx
		jnz	short loc_42F01A
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42EFA1:				; CODE XREF: _speed_main+649Fj
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], esi
		fimul	dword ptr [esp]
		pop	eax
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_473AE8[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_42EE23
		fstp	[ebp+var_2938]
		mov	[esp], edi
		call	_CRYPTO_gcm128_release
		fld	[ebp+var_2938]
		jmp	loc_42B88B
; ---------------------------------------------------------------------------

loc_42F010:				; CODE XREF: _speed_main+62BFj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42EE4A
; ---------------------------------------------------------------------------

loc_42F01A:				; CODE XREF: _speed_main+641Aj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	short loc_42EFA1
; ---------------------------------------------------------------------------

loc_42F021:				; CODE XREF: _speed_main+EC3j
		fstp	st
		lea	esi, [ebp+var_228C]
		mov	[esp], esi
		call	_HMAC_CTX_init
		call	_EVP_md5
		mov	dword ptr [esp+10h], 0
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 10h
		mov	dword ptr [esp+4], offset aThisIsAKey___ ; "This is a key..."
		mov	[esp], esi
		call	_HMAC_Init_ex
		mov	dword ptr [ebp+var_2940], 0
		mov	eax, ds:__imp__CreateThread@24
		mov	dword ptr [ebp+var_2938], eax
		jmp	short loc_42F073
; ---------------------------------------------------------------------------

loc_42F071:				; CODE XREF: _speed_main+6703j
		fstp	st

loc_42F073:				; CODE XREF: _speed_main+64EFj
		mov	eax, dword ptr [ebp+var_2940]
		mov	edi, ds:_lengths[eax*4]
		mov	eax, off_4558F0
		mov	edx, ds:_mr
		test	edx, edx
		jnz	loc_42F2A2
		mov	edx, offset aDoingSForDsOnD ; "Doing %s	for %ds	on %d size blocks: "

loc_42F098:				; CODE XREF: _speed_main+6727j
		mov	[esp+10h], edi
		mov	dword ptr [esp+0Ch], 3
		mov	[esp+8], eax
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 0BB8h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], offset _sleepy@4
		mov	dword ptr [esp+4], 1000h
		mov	dword ptr [esp], 0
		call	dword ptr [ebp+var_2938]
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	eax
		mov	eax, ds:_schlock
		test	eax, eax
		jnz	short loc_42F168
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_42F150:				; CODE XREF: _speed_main+65E6j
		mov	dword ptr [esp], 0 ; dwMilliseconds
		call	ds:__imp__Sleep@4
		push	ecx
		mov	ebx, ds:_schlock
		test	ebx, ebx
		jz	short loc_42F150

loc_42F168:				; CODE XREF: _speed_main+65C3j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		xor	ebx, ebx
		test	eax, eax
		jnz	short loc_42F1A8
		jmp	short loc_42F20A
; ---------------------------------------------------------------------------
		align 10h

loc_42F1A0:				; CODE XREF: _speed_main+6688j
		cmp	ebx, 7FFFFFFFh
		jz	short loc_42F20A

loc_42F1A8:				; CODE XREF: _speed_main+6612j
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0
		mov	[esp], esi
		call	_HMAC_Init_ex
		mov	[esp+8], edi
		mov	eax, [ebp+var_292C]
		mov	[esp+4], eax
		mov	[esp], esi
		call	_HMAC_Update
		mov	dword ptr [esp+8], 0
		lea	eax, [ebp+var_28AC]
		mov	[esp+4], eax
		mov	[esp], esi
		call	_HMAC_Final
		inc	ebx
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42F1A0

loc_42F20A:				; CODE XREF: _speed_main+6614j
					; _speed_main+6626j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, off_4558F0
		mov	edx, ds:_mr
		test	edx, edx
		jnz	short loc_42F2AC
		mov	edx, offset aDSSIn_2fs ; "%d %s's in %.2fs\n"

loc_42F233:				; CODE XREF: _speed_main+6731j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2960]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	[esp+4], edx
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2960]
		fld	st
		push	ebx
		fidivr	dword ptr [esp]
		mov	[esp], edi
		fimul	dword ptr [esp]
		pop	edi
		mov	eax, dword ptr [ebp+var_2940]
		fstp	ds:dbl_473700[eax*8]
		inc	dword ptr [ebp+var_2940]
		cmp	dword ptr [ebp+var_2940], 5
		jnz	loc_42F071
		fstp	[ebp+var_2938]
		mov	[esp], esi
		call	_HMAC_CTX_cleanup
		fld	[ebp+var_2938]
		jmp	loc_429A49
; ---------------------------------------------------------------------------

loc_42F2A2:				; CODE XREF: _speed_main+650Dj
		mov	edx, offset aDtSDD ; "+DT:%s:%d:%d\n"
		jmp	loc_42F098
; ---------------------------------------------------------------------------

loc_42F2AC:				; CODE XREF: _speed_main+66ACj
		mov	edx, offset aRDSF ; "+R:%d:%s:%f\n"
		jmp	short loc_42F233
; ---------------------------------------------------------------------------

loc_42F2B3:				; CODE XREF: _speed_main+5474j
		mov	[esp], ebx
		call	_EC_KEY_get0_group
		mov	[esp], eax
		call	_EC_GROUP_get_degree
		cmp	eax, 0C0h
		jle	loc_42FA27
		add	eax, 7
		mov	dword ptr [ebp+var_2938], eax
		sar	dword ptr [ebp+var_2938], 3
		mov	dword ptr [ebp+var_2940], 0

loc_42F2E8:				; CODE XREF: _speed_main+6EBBj
		mov	[esp], esi
		call	_EC_KEY_get0_public_key
		mov	ecx, dword ptr [ebp+var_2940]
		mov	[esp+10h], ecx
		mov	[esp+0Ch], ebx
		mov	[esp+8], eax
		mov	eax, dword ptr [ebp+var_2938]
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C08]
		mov	[esp], eax
		call	_ECDH_compute_key
		mov	dword ptr [ebp+var_2948], eax
		mov	[esp], ebx
		call	_EC_KEY_get0_public_key
		mov	edx, dword ptr [ebp+var_2940]
		mov	[esp+10h], edx
		mov	[esp+0Ch], esi
		mov	[esp+8], eax
		mov	edx, dword ptr [ebp+var_2938]
		mov	[esp+4], edx
		lea	edx, [ebp+var_1B08]
		mov	[esp], edx
		call	_ECDH_compute_key
		mov	ecx, dword ptr [ebp+var_2948]
		cmp	ecx, eax
		setz	al
		and	eax, 0FFh
		mov	edx, eax
		test	ecx, ecx
		jle	short loc_42F3AB
		cmp	eax, 1
		jnz	loc_42FA46
		xor	al, al
		mov	dword ptr [ebp+var_2948], edi
		mov	edi, ecx
		jmp	short loc_42F387
; ---------------------------------------------------------------------------
		align 10h

loc_42F380:				; CODE XREF: _speed_main+6823j
		dec	ecx
		jnz	loc_42FA40

loc_42F387:				; CODE XREF: _speed_main+67FBj
		mov	cl, [ebp+eax+var_1B08]
		cmp	[ebp+eax+var_1C08], cl
		setz	cl
		and	ecx, 0FFh
		mov	edx, ecx
		inc	eax
		cmp	eax, edi
		jnz	short loc_42F380
		mov	edi, dword ptr [ebp+var_2948]

loc_42F3AB:				; CODE XREF: _speed_main+67E6j
		test	edx, edx
		jz	loc_42FA46

loc_42F3B3:				; CODE XREF: _speed_main+6EE8j
		mov	eax, ds:_test_curves_bits_37954[edi*4]
		mov	dword ptr [ebp+var_2950], eax
		mov	ecx, ds:_mr
		test	ecx, ecx
		jnz	loc_42FA6D
		mov	eax, offset aDoingDBitSSSFo ; "Doing %d	bit %s %s's for %ds: "

loc_42F3D3:				; CODE XREF: _speed_main+6EF2j
		mov	dword ptr [esp+14h], 0Ah
		mov	dword ptr [esp+10h], offset aEcdh ; "ecdh"
		mov	dword ptr [esp+0Ch], offset byte_467FC4
		mov	ecx, dword ptr [ebp+var_2950]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl
		mov	ds:_lapse, 2710h
		mov	ds:_schlock, 0
		mov	dword ptr [esp+14h], 0 ; lpThreadId
		mov	dword ptr [esp+10h], 0 ; dwCreationFlags
		mov	dword ptr [esp+0Ch], 0 ; lpParameter
		mov	dword ptr [esp+8], offset _sleepy@4 ; lpStartAddress
		mov	dword ptr [esp+4], 1000h ; dwStackSize
		mov	dword ptr [esp], 0 ; lpThreadAttributes
		call	ds:__imp__CreateThread@24
		sub	esp, 18h
		test	eax, eax
		jz	loc_42FBE3
		mov	[esp], eax	; hObject
		call	ds:__imp__CloseHandle@4
		push	ecx
		mov	eax, ds:__imp__Sleep@4
		mov	edx, ds:_schlock
		test	edx, edx
		jnz	short loc_42F4BA
		mov	dword ptr [ebp+var_2948], edi
		mov	edi, eax

loc_42F4A0:				; CODE XREF: _speed_main+6932j
		mov	dword ptr [esp], 0
		call	edi
		push	eax
		mov	edx, ds:_schlock
		test	edx, edx
		jz	short loc_42F4A0
		mov	edi, dword ptr [ebp+var_2948]

loc_42F4BA:				; CODE XREF: _speed_main+6916j
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		mov	ds:_run, 1
		mov	eax, ds:_run
		mov	dword ptr [ebp+var_2948], 0
		test	eax, eax
		jz	short loc_42F550
		mov	[ebp+var_2958],	edi
		mov	edi, dword ptr [ebp+var_2948]
		jmp	short loc_42F508
; ---------------------------------------------------------------------------
		align 10h

loc_42F500:				; CODE XREF: _speed_main+69C2j
		cmp	edi, 7FFFFFFFh
		jz	short loc_42F544

loc_42F508:				; CODE XREF: _speed_main+697Aj
		mov	[esp], esi
		call	_EC_KEY_get0_public_key
		mov	ecx, dword ptr [ebp+var_2940]
		mov	[esp+10h], ecx
		mov	[esp+0Ch], ebx
		mov	[esp+8], eax
		mov	eax, dword ptr [ebp+var_2938]
		mov	[esp+4], eax
		lea	eax, [ebp+var_1C08]
		mov	[esp], eax
		call	_ECDH_compute_key
		inc	edi
		mov	eax, ds:_run
		test	eax, eax
		jnz	short loc_42F500

loc_42F544:				; CODE XREF: _speed_main+6986j
		mov	dword ptr [ebp+var_2948], edi
		mov	edi, [ebp+var_2958]

loc_42F550:				; CODE XREF: _speed_main+696Cj
		mov	eax, _usertime
		mov	[esp+4], eax
		mov	dword ptr [esp], 1
		call	_app_tminterval
		mov	eax, ds:_mr
		test	eax, eax
		jz	loc_42FA1D
		mov	eax, offset aR7LdD_2f ;	"+R7:%ld:%d:%.2f\n"

loc_42F577:				; CODE XREF: _speed_main+6EA2j
		fst	qword ptr [esp+10h]
		fstp	[ebp+var_2938]
		mov	ecx, dword ptr [ebp+var_2950]
		mov	[esp+0Ch], ecx
		mov	esi, dword ptr [ebp+var_2948]
		mov	[esp+8], esi
		mov	[esp+4], eax
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		fld	[ebp+var_2938]
		push	esi
		fidiv	dword ptr [esp]
		pop	eax
		fstp	ds:_ecdh_results[edi*8]
		dec	esi
		jg	loc_42DF90
		jmp	loc_42E01C
; ---------------------------------------------------------------------------
		align 10h

loc_42F5D0:				; CODE XREF: _speed_main+2DEj
		mov	dword ptr [esp+4], offset aNoEvpGiven ;	"no EVP	given\n"

loc_42F5D8:				; CODE XREF: _speed_main+6EFFj
					; _speed_main+7E29j
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	esi, 1
		lea	ebx, [ebp+var_28EC]
		jmp	loc_42E6E0
; ---------------------------------------------------------------------------

loc_42F5F5:				; CODE XREF: _speed_main+5D13j
		mov	eax, offset aDtpDSSD ; "+DTP:%d:%s:%s:%d\n"
		jmp	loc_42E89E
; ---------------------------------------------------------------------------

loc_42F5FF:				; CODE XREF: _speed_main+587Ej
		mov	eax, ds:_mr
		test	eax, eax
		jz	loc_42FAAE
		mov	esi, 1

loc_42F611:				; CODE XREF: _speed_main+7000j
		fld	ds:dbl_4735E8
		fstp	qword ptr [esp+18h]
		fld	ds:_dsa_results
		fstp	qword ptr [esp+10h]
		mov	dword ptr [esp+0Ch], 200h
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], offset aF3UUFF ; "+F3:%u:%u:%f:%f\n"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		mov	eax, [ebp+var_2904]
		test	eax, eax
		jz	short loc_42F6AE
		test	esi, esi
		jz	loc_42F973

loc_42F65F:				; CODE XREF: _speed_main+588Cj
		mov	esi, ds:_mr
		test	esi, esi
		jz	loc_42F95F
		mov	esi, 1

loc_42F672:				; CODE XREF: _speed_main+6F29j
		fld	ds:dbl_4735F8
		fstp	qword ptr [esp+18h]
		fld	ds:dbl_4735F0
		fstp	qword ptr [esp+10h]
		mov	dword ptr [esp+0Ch], 400h
		mov	dword ptr [esp+8], 1
		mov	dword ptr [esp+4], offset aF3UUFF ; "+F3:%u:%u:%f:%f\n"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf

loc_42F6AE:				; CODE XREF: _speed_main+6AD5j
		mov	ecx, [ebp+var_2900]
		test	ecx, ecx
		jz	short loc_42F70A
		test	esi, esi
		jz	loc_42F907

loc_42F6C0:				; CODE XREF: _speed_main+58A0j
		mov	edx, ds:_mr
		test	edx, edx
		jz	loc_42F8F3

loc_42F6CE:				; CODE XREF: _speed_main+6D8Ej
		fld	ds:dbl_473608
		fstp	qword ptr [esp+18h]
		fld	ds:dbl_473600
		fstp	qword ptr [esp+10h]
		mov	dword ptr [esp+0Ch], 800h
		mov	dword ptr [esp+8], 2
		mov	dword ptr [esp+4], offset aF3UUFF ; "+F3:%u:%u:%f:%f\n"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf

loc_42F70A:				; CODE XREF: _speed_main+589Aj
					; _speed_main+6B36j ...
		mov	edi, offset dbl_4734E8
		xor	esi, esi
		mov	edx, 1
		mov	dword ptr [ebp+var_2938], ebx
		mov	ebx, edx
		jmp	short loc_42F76C
; ---------------------------------------------------------------------------

loc_42F720:				; CODE XREF: _speed_main+6BF9j
		mov	eax, ds:_mr
		test	eax, eax
		jz	loc_42F8BA

loc_42F72D:				; CODE XREF: _speed_main+6D35j
		fld	qword ptr [edi]
		fld	qword ptr [edi-8]
		fxch	st(1)
		fstp	qword ptr [esp+18h]
		fstp	qword ptr [esp+10h]
		mov	eax, ds:_test_curves_bits_37954[esi*4]
		mov	[esp+0Ch], eax
		mov	[esp+8], esi
		mov	dword ptr [esp+4], offset aF4UUFF ; "+F4:%u:%u:%f:%f\n"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf

loc_42F763:				; CODE XREF: _speed_main+6BF5j
		inc	esi
		add	edi, 10h
		cmp	esi, 10h
		jz	short loc_42F7E0

loc_42F76C:				; CODE XREF: _speed_main+6B9Ej
					; _speed_main+6C5Ej
		mov	eax, [ebp+esi*4+var_2754]
		test	eax, eax
		jz	short loc_42F763
		test	ebx, ebx
		jnz	short loc_42F720

loc_42F77B:				; CODE XREF: _speed_main+6D4Ej
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42F8B3
		fld	qword ptr [edi]
		fld	qword ptr [edi-8]
		fld1
		fld	st
		fdiv	st, st(3)
		fstp	qword ptr [esp+28h]
		fdiv	st, st(1)
		fstp	qword ptr [esp+20h]
		fxch	st(1)
		fstp	qword ptr [esp+18h]
		fstp	qword ptr [esp+10h]
		mov	eax, ds:_test_curves_names_37953[esi*4]
		mov	[esp+0Ch], eax
		mov	eax, ds:_test_curves_bits_37954[esi*4]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset a4uBitEcdsaS8_4 ; "%4u bit ecdsa (%s)	%8.4fs %8.4fs %8.1f "...
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		xor	ebx, ebx
		inc	esi
		add	edi, 10h
		cmp	esi, 10h
		jnz	short loc_42F76C

loc_42F7E0:				; CODE XREF: _speed_main+6BEAj
		mov	ebx, dword ptr [ebp+var_2938]
		xor	si, si
		mov	edi, 1
		jmp	short loc_42F846
; ---------------------------------------------------------------------------

loc_42F7F0:				; CODE XREF: _speed_main+6CD3j
		mov	eax, ds:_mr
		test	eax, eax
		jz	loc_42F8DA
		mov	edi, 1

loc_42F802:				; CODE XREF: _speed_main+6D55j
		fld	ds:_ecdh_results[esi*8]
		fld	st
		fdivr	ds:flt_4684E8
		fstp	qword ptr [esp+18h]
		fstp	qword ptr [esp+10h]
		mov	eax, ds:_test_curves_bits_37954[esi*4]
		mov	[esp+0Ch], eax
		mov	[esp+8], esi
		mov	dword ptr [esp+4], offset aF5UUFF ; "+F5:%u:%u:%f:%f\n"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf

loc_42F840:				; CODE XREF: _speed_main+6CCFj
		inc	esi
		cmp	esi, 10h
		jz	short loc_42F8AC

loc_42F846:				; CODE XREF: _speed_main+6C6Ej
					; _speed_main+6D2Aj
		mov	eax, [ebp+esi*4+var_2714]
		test	eax, eax
		jz	short loc_42F840
		test	edi, edi
		jnz	short loc_42F7F0

loc_42F855:				; CODE XREF: _speed_main+6D6Ej
		mov	edi, ds:_mr
		test	edi, edi
		jnz	short loc_42F8D3
		fld	ds:_ecdh_results[esi*8]
		fld	st
		fdivr	ds:flt_4684E8
		fstp	qword ptr [esp+18h]
		fstp	qword ptr [esp+10h]
		mov	eax, ds:_test_curves_names_37953[esi*4]
		mov	[esp+0Ch], eax
		mov	eax, ds:_test_curves_bits_37954[esi*4]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset a4uBitEcdhS8_4f ; "%4u bit ecdh (%s) %8.4fs %8.1f\n"
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		xor	edi, edi
		inc	esi
		cmp	esi, 10h
		jnz	short loc_42F846

loc_42F8AC:				; CODE XREF: _speed_main+6CC4j
		xor	esi, esi
		jmp	loc_42E6E0
; ---------------------------------------------------------------------------

loc_42F8B3:				; CODE XREF: _speed_main+6C02j
		xor	ebx, ebx
		jmp	loc_42F72D
; ---------------------------------------------------------------------------

loc_42F8BA:				; CODE XREF: _speed_main+6BA7j
		mov	dword ptr [esp+4], offset asc_468040 ; " "
		mov	dword ptr [esp], offset	a30ssignVerifyS	; "%30ssign    verify	 sign/s	verify/s\n"
		call	_printf
		jmp	loc_42F77B
; ---------------------------------------------------------------------------

loc_42F8D3:				; CODE XREF: _speed_main+6CDDj
		xor	edi, edi
		jmp	loc_42F802
; ---------------------------------------------------------------------------

loc_42F8DA:				; CODE XREF: _speed_main+6C77j
		mov	dword ptr [esp+4], offset asc_468040 ; " "
		mov	dword ptr [esp], offset	a30sopOpS ; "%30sop	 op/s\n"
		call	_printf
		jmp	loc_42F855
; ---------------------------------------------------------------------------

loc_42F8F3:				; CODE XREF: _speed_main+6B48j
		mov	dword ptr [esp+4], offset asc_468040 ; " "
		mov	dword ptr [esp], offset	a18ssignVerifyS	; "%18ssign    verify	 sign/s	verify/s\n"
		call	_printf

loc_42F907:				; CODE XREF: _speed_main+6B3Aj
					; _speed_main+6E54j ...
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42F6CE
		fld	ds:dbl_473608
		fld	ds:dbl_473600
		fld1
		fld	st
		fdiv	st, st(3)
		fstp	qword ptr [esp+24h]
		fdiv	st, st(1)
		fstp	qword ptr [esp+1Ch]
		fxch	st(1)
		fstp	qword ptr [esp+14h]
		fstp	qword ptr [esp+0Ch]
		mov	dword ptr [esp+8], 800h
		mov	dword ptr [esp+4], offset aDsa4uBits8_6fs ; "dsa %4u bits %8.6fs %8.6fs	%8.1f %8.1f\"...
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		jmp	loc_42F70A
; ---------------------------------------------------------------------------

loc_42F95F:				; CODE XREF: _speed_main+6AE7j
		mov	dword ptr [esp+4], offset asc_468040 ; " "
		mov	dword ptr [esp], offset	a18ssignVerifyS	; "%18ssign    verify	 sign/s	verify/s\n"
		call	_printf

loc_42F973:				; CODE XREF: _speed_main+6AD9j
					; _speed_main+6F9Dj
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42FAA7
		fld	ds:dbl_4735F8
		fld	ds:dbl_4735F0
		fld1
		fld	st
		fdiv	st, st(3)
		fstp	qword ptr [esp+24h]
		fdiv	st, st(1)
		fstp	qword ptr [esp+1Ch]
		fxch	st(1)
		fstp	qword ptr [esp+14h]
		fstp	qword ptr [esp+0Ch]
		mov	dword ptr [esp+8], 400h
		mov	dword ptr [esp+4], offset aDsa4uBits8_6fs ; "dsa %4u bits %8.6fs %8.6fs	%8.1f %8.1f\"...
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		mov	edi, [ebp+var_2900]
		test	edi, edi
		jz	loc_42F70A
		jmp	loc_42F907
; ---------------------------------------------------------------------------

loc_42F9D9:				; CODE XREF: _speed_main+464Cj
					; _speed_main+4663j
		mov	esi, eax
		jmp	loc_42CEB0
; ---------------------------------------------------------------------------

loc_42F9E0:				; CODE XREF: _speed_main+4F05j
		mov	esi, 4
		jmp	loc_42D4B0
; ---------------------------------------------------------------------------

loc_42F9EA:				; CODE XREF: _speed_main+673j
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset aInternalErrorL ; "internal error loading RSA	key number %"...
		jmp	loc_42E6C4
; ---------------------------------------------------------------------------

loc_42F9FB:				; CODE XREF: _speed_main+632j
		mov	dword ptr [esp+4], offset aYouHaveChosenT ; "You have chosen to	measure	elapsed	time"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_4291B8
; ---------------------------------------------------------------------------

loc_42FA15:				; CODE XREF: _speed_main+4F18j
		add	esi, 3
		jmp	loc_42D4B0
; ---------------------------------------------------------------------------

loc_42FA1D:				; CODE XREF: _speed_main+69ECj
		mov	eax, offset aLdDBitEcdhOpsI ; "%ld %d-bit ECDH ops in %.2fs\n"
		jmp	loc_42F577
; ---------------------------------------------------------------------------

loc_42FA27:				; CODE XREF: _speed_main+6748j
		mov	dword ptr [ebp+var_2938], 14h
		mov	dword ptr [ebp+var_2940], offset _KDF1_SHA1
		jmp	loc_42F2E8
; ---------------------------------------------------------------------------

loc_42FA40:				; CODE XREF: _speed_main+6801j
		mov	edi, dword ptr [ebp+var_2948]

loc_42FA46:				; CODE XREF: _speed_main+67EBj
					; _speed_main+682Dj
		mov	dword ptr [esp+4], offset aEcdhComputatio ; "ECDH computations don't match.\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		jmp	loc_42F3B3
; ---------------------------------------------------------------------------

loc_42FA6D:				; CODE XREF: _speed_main+6848j
		mov	eax, offset aDtpDSSD ; "+DTP:%d:%s:%s:%d\n"
		jmp	loc_42F3D3
; ---------------------------------------------------------------------------

loc_42FA77:				; CODE XREF: _speed_main+359j
		mov	dword ptr [esp+4], offset aNoEngineGiven ; "no engine given\n"
		jmp	loc_42F5D8
; ---------------------------------------------------------------------------

loc_42FA84:				; CODE XREF: _speed_main+6038j
		mov	edi, offset aSha256 ; "sha256"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	loc_42FB40
		mov	[ebp+var_25B8],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FAA7:				; CODE XREF: _speed_main+6DFAj
		xor	esi, esi
		jmp	loc_42F672
; ---------------------------------------------------------------------------

loc_42FAAE:				; CODE XREF: _speed_main+6A86j
		mov	dword ptr [esp+4], offset asc_468040 ; " "
		mov	dword ptr [esp], offset	a18ssignVerifyS	; "%18ssign    verify	 sign/s	verify/s\n"
		call	_printf
		mov	eax, ds:_mr
		test	eax, eax
		jnz	loc_42FB7E
		fld	ds:dbl_4735E8
		fld	ds:_dsa_results
		fld1
		fld	st
		fdiv	st, st(3)
		fstp	qword ptr [esp+24h]
		fdiv	st, st(1)
		fstp	qword ptr [esp+1Ch]
		fxch	st(1)
		fstp	qword ptr [esp+14h]
		fstp	qword ptr [esp+0Ch]
		mov	dword ptr [esp+8], 200h
		mov	dword ptr [esp+4], offset aDsa4uBits8_6fs ; "dsa %4u bits %8.6fs %8.6fs	%8.1f %8.1f\"...
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fprintf
		mov	eax, [ebp+var_2904]
		test	eax, eax
		jnz	loc_42F973
		mov	eax, [ebp+var_2900]
		test	eax, eax
		jz	loc_42F70A
		jmp	loc_42F907
; ---------------------------------------------------------------------------
		align 10h

loc_42FB40:				; CODE XREF: _speed_main+6F12j
		mov	edi, offset aSha512 ; "sha512"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FB5F
		mov	[ebp+var_25B4],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FB5F:				; CODE XREF: _speed_main+6FCEj
		mov	edi, offset aWhirlpool ; "whirlpool"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FB85
		mov	[ebp+var_25B0],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FB7E:				; CODE XREF: _speed_main+6F49j
		xor	esi, esi
		jmp	loc_42F611
; ---------------------------------------------------------------------------

loc_42FB85:				; CODE XREF: _speed_main+6FEDj
		mov	edi, offset aRipemd ; "ripemd"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FBB5
		mov	edi, offset aRmd160 ; "rmd160"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FBB5
		mov	edi, offset aRipemd160 ; "ripemd160"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FBC4

loc_42FBB5:				; CODE XREF: _speed_main+7013j
					; _speed_main+7023j
		mov	[ebp+var_25FC],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FBC4:				; CODE XREF: _speed_main+7033j
		mov	edi, offset aRc4 ; "rc4"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FBE8
		mov	[ebp+var_25F8],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FBE3:				; CODE XREF: _speed_main+93Bj
					; _speed_main+B5Bj ...
		call	_Time_F_part_2
; ---------------------------------------------------------------------------

loc_42FBE8:				; CODE XREF: _speed_main+7052j
		mov	edi, offset aDesCbc ; "des-cbc"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FC07
		mov	[ebp+var_25F4],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FC07:				; CODE XREF: _speed_main+7076j
		mov	edi, offset aDesEde3 ; "des-ede3"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FC50
		mov	edi, offset aAes128Cbc ; "aes-128-cbc"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FC5F
		mov	[ebp+var_25D4],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FC36:				; CODE XREF: _speed_main+7422j
		mov	edi, offset aDes_1 ; "des"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FCAD
		mov	[ebp+var_25F4],	1

loc_42FC50:				; CODE XREF: _speed_main+7095j
		mov	[ebp+var_25F0],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FC5F:				; CODE XREF: _speed_main+70A5j
		mov	edi, offset aAes192Cbc ; "aes-192-cbc"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FC7E
		mov	[ebp+var_25D0],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FC7E:				; CODE XREF: _speed_main+70EDj
		mov	edi, offset aAes256Cbc ; "aes-256-cbc"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FCD5
		mov	edi, offset aAes128Ige ; "aes-128-ige"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FCE4
		mov	[ebp+var_25AC],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FCAD:				; CODE XREF: _speed_main+70C4j
		mov	edi, offset aAes ; "aes"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	loc_42FFB7
		mov	[ebp+var_25D4],	1
		mov	[ebp+var_25D0],	1

loc_42FCD5:				; CODE XREF: _speed_main+710Cj
		mov	[ebp+var_25CC],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FCE4:				; CODE XREF: _speed_main+711Cj
		mov	edi, offset aAes192Ige ; "aes-192-ige"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FD03
		mov	[ebp+var_25A8],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FD03:				; CODE XREF: _speed_main+7172j
		mov	edi, offset aAes256Ige ; "aes-256-ige"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FD22
		mov	[ebp+var_25A4],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FD22:				; CODE XREF: _speed_main+7191j
		mov	edi, offset aCamellia128Cbc ; "camellia-128-cbc"
		mov	ecx, 11h
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FD41
		mov	[ebp+var_25C8],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FD41:				; CODE XREF: _speed_main+71B0j
		mov	edi, offset aCamellia192Cbc ; "camellia-192-cbc"
		mov	ecx, 11h
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FD60
		mov	[ebp+var_25C4],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FD60:				; CODE XREF: _speed_main+71CFj
		mov	edi, offset aCamellia256Cbc ; "camellia-256-cbc"
		mov	ecx, 11h
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FDC7
		mov	edi, offset aOpenssl ; "openssl"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FDF5
		mov	edi, offset aDsa512 ; "dsa512"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FDD6
		mov	[ebp+var_2908],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FD9F:				; CODE XREF: _speed_main+7445j
		mov	edi, offset aCamellia ;	"camellia"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	loc_42FFDA
		mov	[ebp+var_25C8],	1
		mov	[ebp+var_25C4],	1

loc_42FDC7:				; CODE XREF: _speed_main+71EEj
		mov	[ebp+var_25C0],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FDD6:				; CODE XREF: _speed_main+720Ej
		mov	edi, offset aDsa1024 ; "dsa1024"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FE0D
		mov	[ebp+var_2904],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FDF5:				; CODE XREF: _speed_main+71FEj
		call	_RSA_PKCS1_SSLeay
		mov	[esp], eax
		call	_RSA_set_default_method
		dec	dword ptr [ebp+var_2940]
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FE0D:				; CODE XREF: _speed_main+7264j
		mov	edi, offset aDsa2048 ; "dsa2048"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FE2C
		mov	[ebp+var_2900],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FE2C:				; CODE XREF: _speed_main+729Bj
		mov	edi, offset aRsa512 ; "rsa512"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FE4B
		mov	[ebp+var_28EC],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FE4B:				; CODE XREF: _speed_main+72BAj
		mov	edi, offset aRsa1024 ; "rsa1024"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FE6A
		mov	[ebp+var_28E8],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FE6A:				; CODE XREF: _speed_main+72D9j
		mov	edi, offset aRsa2048 ; "rsa2048"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FE89
		mov	[ebp+var_28E4],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FE89:				; CODE XREF: _speed_main+72F8j
		mov	edi, offset aRsa4096 ; "rsa4096"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FEA8
		mov	[ebp+var_28E0],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FEA8:				; CODE XREF: _speed_main+7317j
		mov	edi, offset aRc2Cbc ; "rc2-cbc"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FEC8
		mov	edi, offset aRc2 ; "rc2"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FED7

loc_42FEC8:				; CODE XREF: _speed_main+7336j
		mov	[ebp+var_25E4],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FED7:				; CODE XREF: _speed_main+7346j
		mov	edi, offset aIdeaCbc ; "idea-cbc"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FEF7
		mov	edi, offset aIdea_1 ; "idea"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FF06

loc_42FEF7:				; CODE XREF: _speed_main+7365j
		mov	[ebp+var_25EC],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FF06:				; CODE XREF: _speed_main+7375j
		mov	edi, offset aSeedCbc ; "seed-cbc"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FF26
		mov	edi, offset aSeed_3 ; "seed"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FF35

loc_42FF26:				; CODE XREF: _speed_main+7394j
		mov	[ebp+var_25E8],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FF35:				; CODE XREF: _speed_main+73A4j
		mov	edi, offset aBfCbc ; "bf-cbc"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FF65
		mov	edi, offset aBlowfish ;	"blowfish"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FF65
		mov	edi, offset aBf	; "bf"
		mov	ecx, 3
		mov	esi, eax
		repe cmpsb
		jnz	short loc_42FF74

loc_42FF65:				; CODE XREF: _speed_main+73C3j
					; _speed_main+73D3j
		mov	[ebp+var_25DC],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FF74:				; CODE XREF: _speed_main+73E3j
		mov	edi, offset aCastCbc ; "cast-cbc"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FFA8
		mov	edi, offset aCast ; "cast"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jz	short loc_42FFA8
		mov	edi, offset aCast5 ; "cast5"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	loc_42FC36

loc_42FFA8:				; CODE XREF: _speed_main+7402j
					; _speed_main+7412j
		mov	[ebp+var_25D8],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FFB7:				; CODE XREF: _speed_main+713Bj
		mov	edi, offset aGhash ; "ghash"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	loc_42FD9F
		mov	[ebp+var_25A0],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_42FFDA:				; CODE XREF: _speed_main+722Dj
		mov	edi, offset aRsa ; "rsa"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430017
		mov	[ebp+var_28EC],	1
		mov	[ebp+var_28E8],	1
		mov	[ebp+var_28E4],	1
		mov	[ebp+var_28E0],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430017:				; CODE XREF: _speed_main+7468j
		mov	edi, offset aDsa ; "dsa"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_43004A
		mov	[ebp+var_2908],	1
		mov	[ebp+var_2904],	1
		mov	[ebp+var_2900],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_43004A:				; CODE XREF: _speed_main+74A5j
		mov	edi, offset aEcdsap160 ; "ecdsap160"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430069
		mov	[ebp+var_2754],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430069:				; CODE XREF: _speed_main+74D8j
		mov	edi, offset aEcdsap192 ; "ecdsap192"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430088
		mov	[ebp+var_2750],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430088:				; CODE XREF: _speed_main+74F7j
		mov	edi, offset aEcdsap224 ; "ecdsap224"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4300A7
		mov	[ebp+var_274C],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4300A7:				; CODE XREF: _speed_main+7516j
		mov	edi, offset aEcdsap256 ; "ecdsap256"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4300C6
		mov	[ebp+var_2748],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4300C6:				; CODE XREF: _speed_main+7535j
		mov	edi, offset aEcdsap384 ; "ecdsap384"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4300E5
		mov	[ebp+var_2744],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4300E5:				; CODE XREF: _speed_main+7554j
		mov	edi, offset aEcdsap521 ; "ecdsap521"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430104
		mov	[ebp+var_2740],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430104:				; CODE XREF: _speed_main+7573j
		mov	edi, offset aEcdsak163 ; "ecdsak163"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430123
		mov	[ebp+var_273C],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430123:				; CODE XREF: _speed_main+7592j
		mov	edi, offset aEcdsak233 ; "ecdsak233"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430142
		mov	[ebp+var_2738],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430142:				; CODE XREF: _speed_main+75B1j
		mov	edi, offset aEcdsak283 ; "ecdsak283"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430161
		mov	[ebp+var_2734],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430161:				; CODE XREF: _speed_main+75D0j
		mov	edi, offset aEcdsak409 ; "ecdsak409"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430180
		mov	[ebp+var_2730],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430180:				; CODE XREF: _speed_main+75EFj
		mov	edi, offset aEcdsak571 ; "ecdsak571"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_43019F
		mov	[ebp+var_272C],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_43019F:				; CODE XREF: _speed_main+760Ej
		mov	edi, offset aEcdsab163 ; "ecdsab163"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4301BE
		mov	[ebp+var_2728],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4301BE:				; CODE XREF: _speed_main+762Dj
		mov	edi, offset aEcdsab233 ; "ecdsab233"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4301DD
		mov	[ebp+var_2724],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4301DD:				; CODE XREF: _speed_main+764Cj
		mov	edi, offset aEcdsab283 ; "ecdsab283"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4301FC
		mov	[ebp+var_2720],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4301FC:				; CODE XREF: _speed_main+766Bj
		mov	edi, offset aEcdsab409 ; "ecdsab409"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_43021B
		mov	[ebp+var_271C],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_43021B:				; CODE XREF: _speed_main+768Aj
		mov	edi, offset aEcdsab571 ; "ecdsab571"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_43023A
		mov	[ebp+var_2718],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_43023A:				; CODE XREF: _speed_main+76A9j
		mov	edi, offset aEcdsa ; "ecdsa"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	loc_4302F3
		mov	[ebp+var_2754],	1
		mov	[ebp+var_2750],	1
		mov	[ebp+var_274C],	1
		mov	[ebp+var_2748],	1
		mov	[ebp+var_2744],	1
		mov	[ebp+var_2740],	1
		mov	[ebp+var_273C],	1
		mov	[ebp+var_2738],	1
		mov	[ebp+var_2734],	1
		mov	[ebp+var_2730],	1
		mov	[ebp+var_272C],	1
		mov	[ebp+var_2728],	1
		mov	[ebp+var_2724],	1
		mov	[ebp+var_2720],	1
		mov	[ebp+var_271C],	1
		mov	[ebp+var_2718],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4302F3:				; CODE XREF: _speed_main+76C8j
		mov	edi, offset aEcdhp160 ;	"ecdhp160"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430312
		mov	[ebp+var_2714],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430312:				; CODE XREF: _speed_main+7781j
		mov	edi, offset aEcdhp192 ;	"ecdhp192"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430331
		mov	[ebp+var_2710],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430331:				; CODE XREF: _speed_main+77A0j
		mov	edi, offset aEcdhp224 ;	"ecdhp224"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430350
		mov	[ebp+var_270C],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430350:				; CODE XREF: _speed_main+77BFj
		mov	edi, offset aEcdhp256 ;	"ecdhp256"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_43036F
		mov	[ebp+var_2708],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_43036F:				; CODE XREF: _speed_main+77DEj
		mov	edi, offset aEcdhp384 ;	"ecdhp384"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_43038E
		mov	[ebp+var_2704],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_43038E:				; CODE XREF: _speed_main+77FDj
		mov	edi, offset aEcdhp521 ;	"ecdhp521"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4303AD
		mov	[ebp+var_2700],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4303AD:				; CODE XREF: _speed_main+781Cj
		mov	edi, offset aEcdhk163 ;	"ecdhk163"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4303CC
		mov	[ebp+var_26FC],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4303CC:				; CODE XREF: _speed_main+783Bj
		mov	edi, offset aEcdhk233 ;	"ecdhk233"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4303EB
		mov	[ebp+var_26F8],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4303EB:				; CODE XREF: _speed_main+785Aj
		mov	edi, offset aEcdhk283 ;	"ecdhk283"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_43040A
		mov	[ebp+var_26F4],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_43040A:				; CODE XREF: _speed_main+7879j
		mov	edi, offset aEcdhk409 ;	"ecdhk409"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430429
		mov	[ebp+var_26F0],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430429:				; CODE XREF: _speed_main+7898j
		mov	edi, offset aEcdhk571 ;	"ecdhk571"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430448
		mov	[ebp+var_26EC],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430448:				; CODE XREF: _speed_main+78B7j
		mov	edi, offset aEcdhb163 ;	"ecdhb163"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430467
		mov	[ebp+var_26E8],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430467:				; CODE XREF: _speed_main+78D6j
		mov	edi, offset aEcdhb233 ;	"ecdhb233"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_430486
		mov	[ebp+var_26E4],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_430486:				; CODE XREF: _speed_main+78F5j
		mov	edi, offset aEcdhb283 ;	"ecdhb283"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4304A5
		mov	[ebp+var_26E0],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4304A5:				; CODE XREF: _speed_main+7914j
		mov	edi, offset aEcdhb409 ;	"ecdhb409"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4304C4
		mov	[ebp+var_26DC],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4304C4:				; CODE XREF: _speed_main+7933j
		mov	edi, offset aEcdhb571 ;	"ecdhb571"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4304E3
		mov	[ebp+var_26D8],	2
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_4304E3:				; CODE XREF: _speed_main+7952j
		mov	edi, offset aEcdh ; "ecdh"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_43059C
		mov	[ebp+var_2714],	1
		mov	[ebp+var_2710],	1
		mov	[ebp+var_270C],	1
		mov	[ebp+var_2708],	1
		mov	[ebp+var_2704],	1
		mov	[ebp+var_2700],	1
		mov	[ebp+var_26FC],	1
		mov	[ebp+var_26F8],	1
		mov	[ebp+var_26F4],	1
		mov	[ebp+var_26F0],	1
		mov	[ebp+var_26EC],	1
		mov	[ebp+var_26E8],	1
		mov	[ebp+var_26E4],	1
		mov	[ebp+var_26E0],	1
		mov	[ebp+var_26DC],	1
		mov	[ebp+var_26D8],	1
		jmp	loc_428E10
; ---------------------------------------------------------------------------

loc_43059C:				; CODE XREF: _speed_main+7971j
		mov	dword ptr [esp+4], offset aErrorBadOption ; "Error: bad	option or value\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset asc_46793F ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aAvailableValue ; "Available values:\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aMdc2_0 ; "mdc2     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aMd4_0 ; "md4	     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aMd5_0 ; "md5	     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aHmac_1 ; "hmac     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSha1_0 ; "sha1     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSha256_0 ; "sha256	"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSha512_0 ; "sha512	"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aWhirlpool ; "whirlpool"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aRmd160 ; "rmd160"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset asc_46793F ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aIdeaCbc_0 ; "idea-cbc "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSeedCbc_0 ; "seed-cbc "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aRc2Cbc_0 ; "rc2-cbc	"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aBfCbc ; "bf-cbc"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset asc_46793F ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aDesCbcDesEde3 ; "des-cbc  des-ede3 "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aAes128CbcAes19 ; "aes-128-cbc aes-192-cbc aes-256-cbc "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aAes128IgeAes19 ; "aes-128-ige aes-192-ige aes-256-ige "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset asc_46793F ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aCamellia128C_3 ; "camellia-128-cbc camellia-192-cbc camel"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aRc4 ; "rc4"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset asc_46793F ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aRsa512Rsa1024R ; "rsa512   rsa1024  rsa2048	rsa4096\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aDsa512Dsa1024D ; "dsa512   dsa1024  dsa2048\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEcdsap160Ecdsa ; "ecdsap160 ecdsap192 ecdsap224 ecdsap256"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEcdsak163Ecdsa ; "ecdsak163 ecdsak233 ecdsak283 ecdsak409"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEcdsab163Ecdsa ; "ecdsab163 ecdsab233 ecdsab283 ecdsab409"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEcdsa_0 ; "ecdsa\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEcdhp160Ecdhp1 ; "ecdhp160  ecdhp192	 ecdhp224 ecdhp256  "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEcdhk163Ecdhk2 ; "ecdhk163  ecdhk233	 ecdhk283  ecdhk409 "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEcdhb163Ecdhb2 ; "ecdhb163  ecdhb233	 ecdhb283  ecdhb409 "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEcdh_0 ; "ecdh\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aIdea_2 ; "idea     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aSeed_4 ; "seed     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aRc2_0 ; "rc2	     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aDes_2 ; "des	     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aAes_0 ; "aes	     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aCamellia_0 ;	"camellia "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aRsa_0 ; "rsa	     "
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aBlowfish ; "blowfish"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset asc_46793F ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset asc_46793F ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aAvailableOptio ; "Available options:\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEngineEUseE_15 ; "-engine e	     use engine	e, possibly "...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aEvpEUseEvpE_	; "-evp	e	   use EVP e.\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aDecryptTimeDec ; "-decrypt	     time decryption instead"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp+4], offset aMrProduceMachi ; "-mr	     produce machine readabl"...
		jmp	loc_42F5D8
_speed_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_doConnection	proc near		; CODE XREF: _s_time_main+525p
					; _s_time_main+666p ...

readfds		= fd_set ptr -11Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 13Ch
		mov	edi, eax
		call	_BIO_s_connect
		mov	[esp], eax
		call	_BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_430B00
		mov	eax, _host
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 64h
		mov	[esp], ebx
		call	_BIO_ctrl
		test	edi, edi
		jz	loc_430B10
		mov	[esp], edi
		call	_SSL_set_connect_state
		mov	esi, edi

loc_430A08:				; CODE XREF: _doConnection+16Fj
		mov	[esp+8], ebx
		mov	[esp+4], ebx
		mov	[esp], esi
		call	_SSL_set_bio

loc_430A18:				; CODE XREF: _doConnection+ECj
		mov	[esp], esi
		call	_SSL_connect
		mov	ebx, eax
		mov	[esp], eax
		call	_BIO_sock_should_retry
		test	eax, eax
		jnz	short loc_430A40
		test	ebx, ebx
		jle	short loc_430AB0
		mov	eax, esi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_430A40:				; CODE XREF: _doConnection+7Cj
		mov	dword ptr [esp+4], offset aDelay ; "DELAY\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], esi
		call	_SSL_get_fd
		mov	[ebp+readfds.fd_array],	eax
		mov	[ebp+readfds.fd_count],	1
		mov	dword ptr [esp+10h], 0 ; timeout
		mov	dword ptr [esp+0Ch], 0 ; exceptfds
		mov	dword ptr [esp+8], 0 ; writefds
		lea	edx, [ebp+readfds]
		mov	[esp+4], edx	; readfds
		inc	eax
		mov	[esp], eax	; nfds
		call	ds:__imp__select@20
		sub	esp, 14h
		jmp	loc_430A18
; ---------------------------------------------------------------------------
		jmp	short loc_430AB0
; ---------------------------------------------------------------------------
		align 10h

loc_430AB0:				; CODE XREF: _doConnection+80j
					; _doConnection+F1j
		mov	dword ptr [esp+4], offset aError ; "ERROR\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	eax, ds:_verify_error
		test	eax, eax
		jz	short loc_430B30
		mov	[esp], eax
		call	_X509_verify_cert_error_string
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aVerifyErrorS	; "verify error:%s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf

loc_430AEF:				; CODE XREF: _doConnection+18Dj
		test	edi, edi
		jnz	short loc_430B00
		mov	[esp], esi
		call	_SSL_free
		nop
		lea	esi, [esi+0]

loc_430B00:				; CODE XREF: _doConnection+1Fj
					; _doConnection+141j
		xor	eax, eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_430B10:				; CODE XREF: _doConnection+48j
		mov	eax, ds:_tm_ctx
		mov	[esp], eax
		call	_SSL_new
		mov	esi, eax
		jmp	loc_430A08
; ---------------------------------------------------------------------------
		align 10h

loc_430B30:				; CODE XREF: _doConnection+11Cj
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		jmp	short loc_430AEF
_doConnection	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _s_time_main
_s_time_main	proc near		; DATA XREF: .data:00455154o

var_24		= dword	ptr -24h
var_20		= qword	ptr -20h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	_host, offset aLocalhost4433 ; "localhost:4433"
		mov	ds:_t_cert_file, 0
		mov	ds:_t_key_file,	0
		mov	ds:_CApath, 0
		mov	ds:_CAfile, 0
		mov	ds:_tm_cipher, 0
		mov	ds:_tm_verify, 0
		mov	_maxTime, 1Eh
		mov	ds:_tm_ctx, 0
		mov	ds:_s_time_meth, 0
		mov	ds:_s_www_path,	0
		mov	ds:_bytes_read,	0
		mov	ds:_st_bugs, 0
		mov	ds:_perform, 0
		mov	ds:_t_nbio, 0
		mov	ds:_exitNow, 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_4312F4

loc_430BF6:				; CODE XREF: _s_time_main+7D1j
		call	_SSLv23_client_method
		mov	ds:_s_time_meth, eax
		mov	ds:_verify_depth, 0
		mov	ds:_verify_error, 0
		mov	eax, [ebp+arg_0]
		lea	edx, [eax-1]
		mov	eax, [ebp+arg_4]
		lea	ebx, [eax+4]
		mov	[ebp+var_24], 0
		test	edx, edx
		jg	short loc_430C4A
		jmp	short loc_430C98
; ---------------------------------------------------------------------------
		align 10h

loc_430C30:				; CODE XREF: _s_time_main+124j
		dec	edx
		jz	loc_430EC0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	_host, eax

loc_430C42:				; CODE XREF: _s_time_main+246j
					; _s_time_main+2ADj ...
		dec	edx
		lea	ebx, [esi+4]
		test	edx, edx
		jle	short loc_430C98

loc_430C4A:				; CODE XREF: _s_time_main+E9j
					; _s_time_main+156j
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aConnect_0 ; "-connect"
		mov	ecx, 9
		repe cmpsb
		setnbe	cl
		setb	byte ptr [ebp+var_20]
		cmp	cl, byte ptr [ebp+var_20]
		jz	short loc_430C30
		mov	edi, offset aReuse ; "-reuse"
		mov	esi, eax
		mov	ecx, 7
		repe cmpsb
		setnbe	cl
		setb	byte ptr [ebp+var_20]
		cmp	cl, byte ptr [ebp+var_20]
		jnz	loc_430D60
		mov	ds:_perform, 2
		mov	esi, ebx
		dec	edx
		lea	ebx, [esi+4]
		test	edx, edx
		jg	short loc_430C4A

loc_430C98:				; CODE XREF: _s_time_main+EBj
					; _s_time_main+108j ...
		mov	eax, ds:_perform
		test	eax, eax
		jz	loc_430EB0

loc_430CA5:				; CODE XREF: _s_time_main+37Aj
		mov	eax, [ebp+var_24]
		test	eax, eax
		jnz	loc_430EC0
		call	_SSL_library_init
		mov	eax, ds:_s_time_meth
		mov	[esp], eax
		call	_SSL_CTX_new
		mov	ds:_tm_ctx, eax
		test	eax, eax
		jz	loc_430FA6
		mov	dword ptr [esp+4], 1
		mov	[esp], eax
		call	_SSL_CTX_set_quiet_shutdown
		mov	eax, ds:_st_bugs
		test	eax, eax
		jnz	loc_430FCA

loc_430CEC:				; CODE XREF: _s_time_main+4AFj
		mov	eax, ds:_tm_cipher
		mov	[esp+4], eax
		mov	eax, ds:_tm_ctx
		mov	[esp], eax
		call	_SSL_CTX_set_cipher_list
		mov	eax, ds:_t_key_file
		mov	[esp+8], eax
		mov	eax, ds:_t_cert_file
		mov	[esp+4], eax
		mov	eax, ds:_tm_ctx
		mov	[esp], eax
		call	_set_cert_stuff
		test	eax, eax
		jnz	loc_430FF4

loc_430D29:				; CODE XREF: _s_time_main+408j
					; _s_time_main+511j ...
		mov	esi, 1

loc_430D2E:				; CODE XREF: _s_time_main+BEEj
		mov	edx, ds:_tm_ctx
		test	edx, edx
		jz	loc_430F4D
		mov	[esp], edx
		call	_SSL_CTX_free
		mov	ds:_tm_ctx, 0
		mov	eax, esi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_430D60:				; CODE XREF: _s_time_main+13Ej
		mov	edi, offset aNew_2 ; "-new"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		setnbe	cl
		setb	byte ptr [ebp+var_20]
		cmp	cl, byte ptr [ebp+var_20]
		jnz	short loc_430D90
		mov	ds:_perform, 1
		mov	esi, ebx
		jmp	loc_430C42
; ---------------------------------------------------------------------------
		align 10h

loc_430D90:				; CODE XREF: _s_time_main+238j
		mov	edi, offset aVerify_7 ;	"-verify"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		setnbe	cl
		setb	byte ptr [ebp+var_20]
		cmp	cl, byte ptr [ebp+var_20]
		jnz	short loc_430E00
		mov	ds:_tm_verify, 5
		dec	edx
		mov	dword ptr [ebp+var_20],	edx
		jz	loc_430EC0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp], eax	; char *
		call	_atoi
		mov	ds:_verify_depth, eax
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aVerifyDepthI_2 ; "verify depth is %d\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	edx, dword ptr [ebp+var_20]
		jmp	loc_430C42
; ---------------------------------------------------------------------------
		align 10h

loc_430E00:				; CODE XREF: _s_time_main+268j
		mov	edi, offset aCert_2 ; "-cert"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		setnbe	cl
		setb	byte ptr [ebp+var_20]
		cmp	cl, byte ptr [ebp+var_20]
		jnz	short loc_430E40
		dec	edx
		jz	loc_430EC0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	ds:_t_cert_file, eax
		jmp	loc_430C42
; ---------------------------------------------------------------------------
		jmp	short loc_430E40
; ---------------------------------------------------------------------------
		align 10h

loc_430E40:				; CODE XREF: _s_time_main+2D8j
					; _s_time_main+2F1j
		mov	edi, offset aKey_4 ; "-key"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		setnbe	cl
		setb	byte ptr [ebp+var_20]
		cmp	cl, byte ptr [ebp+var_20]
		jz	short loc_430E90
		mov	edi, offset aCapath_3 ;	"-CApath"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		setnbe	cl
		setb	byte ptr [ebp+var_20]
		cmp	cl, byte ptr [ebp+var_20]
		jnz	loc_430F57
		dec	edx
		jz	short loc_430EC0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	ds:_CApath, eax
		jmp	loc_430C42
; ---------------------------------------------------------------------------
		align 10h

loc_430E90:				; CODE XREF: _s_time_main+318j
		dec	edx
		jz	short loc_430EC0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	ds:_t_key_file,	eax
		jmp	loc_430C42
; ---------------------------------------------------------------------------
		align 10h

loc_430EB0:				; CODE XREF: _s_time_main+15Fj
		mov	ds:_perform, 3
		jmp	loc_430CA5
; ---------------------------------------------------------------------------
		align 10h

loc_430EC0:				; CODE XREF: _s_time_main+F1j
					; _s_time_main+16Aj ...
		mov	dword ptr [esp], offset	aUsageS_timeArg	; "usage: s_time <args>\n"
		call	_puts
		mov	dword ptr [esp+4], offset aLocalhost4433 ; "localhost:4433"
		mov	dword ptr [esp], offset	aConnectHostP_0	; "-connect host:port -	host:port to conne"...
		call	_printf
		mov	dword ptr [esp], offset	aNbioRunWithN_1	; "-nbio	 - Run with non-blocking I"...
		call	_puts
		mov	dword ptr [esp], offset	aSsl2JustUseS_0	; "-ssl2	 - Just	use SSLv2"
		call	_puts
		mov	dword ptr [esp], offset	aSsl3JustUseS_0	; "-ssl3	 - Just	use SSLv3"
		call	_puts
		mov	dword ptr [esp], offset	aBugsTurnOnSs_0	; "-bugs	 - Turn	on SSL bug compati"...
		call	_puts
		mov	dword ptr [esp], offset	aNewJustTimeNew	; "-new		 - Just	time new connectio"...
		call	_puts
		mov	dword ptr [esp], offset	aReuseJustTimeC	; "-reuse	 - Just	time connection	re"...
		call	_puts
		mov	dword ptr [esp], offset	aWwwPageRetriev	; "-www	page	 - Retrieve 'page' from th"...
		call	_puts
		mov	dword ptr [esp+4], 1Eh
		mov	dword ptr [esp], offset	_umsg_37892 ; "-time arg     - max number of seconds t"...
		call	_printf
		jmp	loc_430D29
; ---------------------------------------------------------------------------

loc_430F4D:				; CODE XREF: _s_time_main+1F6j
		mov	eax, esi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_430F57:				; CODE XREF: _s_time_main+332j
		mov	edi, offset aCafile_3 ;	"-CAfile"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		setnbe	cl
		setb	byte ptr [ebp+var_20]
		cmp	cl, byte ptr [ebp+var_20]
		jz	short loc_430FB3
		mov	edi, offset aCipher_1 ;	"-cipher"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		setnbe	cl
		setb	byte ptr [ebp+var_20]
		cmp	cl, byte ptr [ebp+var_20]
		jnz	loc_431316
		dec	edx
		jz	loc_430EC0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	ds:_tm_cipher, eax
		jmp	loc_430C42
; ---------------------------------------------------------------------------

loc_430FA6:				; CODE XREF: _s_time_main+189j
		mov	eax, 1
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_430FB3:				; CODE XREF: _s_time_main+42Fj
		dec	edx
		jz	loc_430EC0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	ds:_CAfile, eax
		jmp	loc_430C42
; ---------------------------------------------------------------------------

loc_430FCA:				; CODE XREF: _s_time_main+1A6j
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 80000BFFh
		mov	dword ptr [esp+4], 20h
		mov	eax, ds:_tm_ctx
		mov	[esp], eax
		call	_SSL_CTX_ctrl
		jmp	loc_430CEC
; ---------------------------------------------------------------------------

loc_430FF4:				; CODE XREF: _s_time_main+1E3j
		call	_SSL_load_error_strings
		mov	eax, ds:_CApath
		mov	[esp+8], eax
		mov	eax, ds:_CAfile
		mov	[esp+4], eax
		mov	eax, ds:_tm_ctx
		mov	[esp], eax
		call	_SSL_CTX_load_verify_locations
		test	eax, eax
		jz	loc_4312E2
		mov	eax, ds:_tm_ctx
		mov	[esp], eax
		call	_SSL_CTX_set_default_verify_paths
		test	eax, eax
		jz	loc_4312E2

loc_431035:				; CODE XREF: _s_time_main+7AFj
		mov	eax, ds:_tm_cipher
		test	eax, eax
		jz	loc_43173A

loc_431042:				; CODE XREF: _s_time_main+C0Dj
					; _s_time_main+C3Bj
		mov	eax, ds:_perform
		test	al, 1
		jnz	loc_4313E3

loc_43104F:				; CODE XREF: _s_time_main+B1Dj
		test	al, 2
		jz	loc_430D29
		mov	dword ptr [esp], offset	aNowTimingWithS	; "\n\nNow timing with session id reuse."
		call	_puts
		xor	eax, eax
		call	_doConnection
		mov	ebx, eax
		test	eax, eax
		jz	loc_4317F0
		mov	eax, ds:_s_www_path
		test	eax, eax
		jz	loc_431104
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], offset aGetSHttp1_0 ; "GET %s HTTP/1.0\r\n\r\n"
		mov	dword ptr [esp+4], 2000h
		mov	dword ptr [esp], offset	_buf_37918
		call	_BIO_snprintf
		mov	edx, offset _buf_37918

loc_4310A6:				; CODE XREF: _s_time_main+57Aj
		mov	ecx, [edx]
		add	edx, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_4310A6
		test	eax, 8080h
		jnz	short loc_4310C9
		shr	eax, 10h
		add	edx, 2

loc_4310C9:				; CODE XREF: _s_time_main+581j
		add	al, al
		sbb	edx, 3
		sub	edx, offset _buf_37918
		mov	[esp+8], edx
		mov	dword ptr [esp+4], offset _buf_37918
		mov	[esp], ebx
		call	_SSL_write

loc_4310E8:				; CODE XREF: _s_time_main+5C2j
		mov	dword ptr [esp+8], 2000h
		mov	dword ptr [esp+4], offset _buf_37918
		mov	[esp], ebx
		call	_SSL_read
		test	eax, eax
		jg	short loc_4310E8

loc_431104:				; CODE XREF: _s_time_main+53Bj
		mov	dword ptr [esp+4], 3
		mov	[esp], ebx
		call	_SSL_set_shutdown
		mov	[esp], ebx
		call	_SSL_get_fd
		mov	dword ptr [esp+4], 2 ; how
		mov	[esp], eax	; s
		mov	eax, ds:__imp__shutdown@8
		mov	[ebp+var_24], eax
		call	eax ; __imp__shutdown@8
		sub	esp, 8
		mov	[esp], ebx
		call	_SSL_get_fd
		mov	[esp], eax	; s
		mov	eax, ds:__imp__closesocket@4
		mov	dword ptr [ebp+var_20],	eax
		call	eax ; __imp__closesocket@4
		push	ecx
		mov	dword ptr [esp], 0
		call	__time32
		mov	edi, _maxTime
		add	edi, eax
		mov	dword ptr [esp], offset	aStarting ; "starting"
		call	_puts
		mov	ds:_bytes_read,	0
		mov	dword ptr [esp+4], 1
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		xor	esi, esi
		lea	esi, [esi+0]

loc_431190:				; CODE XREF: _s_time_main+79Dj
		mov	dword ptr [esp], 0
		call	__time32
		cmp	edi, eax
		jl	loc_43169B
		mov	eax, ebx
		call	_doConnection
		test	eax, eax
		jz	loc_431733
		mov	eax, ds:_s_www_path
		test	eax, eax
		jz	loc_431252
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], offset aGetSHttp1_0 ; "GET %s HTTP/1.0\r\n\r\n"
		mov	dword ptr [esp+4], 2000h
		mov	dword ptr [esp], offset	_buf_37918
		call	_BIO_snprintf
		mov	edx, offset _buf_37918

loc_4311E5:				; CODE XREF: _s_time_main+6B9j
		mov	ecx, [edx]
		add	edx, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_4311E5
		test	eax, 8080h
		jnz	short loc_431208
		shr	eax, 10h
		add	edx, 2

loc_431208:				; CODE XREF: _s_time_main+6C0j
		add	al, al
		sbb	edx, 3
		sub	edx, offset _buf_37918
		mov	[esp+8], edx
		mov	dword ptr [esp+4], offset _buf_37918
		mov	[esp], ebx
		call	_SSL_write
		jmp	short loc_431236
; ---------------------------------------------------------------------------
		align 10h

loc_431230:				; CODE XREF: _s_time_main+710j
		add	ds:_bytes_read,	eax

loc_431236:				; CODE XREF: _s_time_main+6E7j
		mov	dword ptr [esp+8], 2000h
		mov	dword ptr [esp+4], offset _buf_37918
		mov	[esp], ebx
		call	_SSL_read
		test	eax, eax
		jg	short loc_431230

loc_431252:				; CODE XREF: _s_time_main+67Aj
		mov	dword ptr [esp+4], 3
		mov	[esp], ebx
		call	_SSL_set_shutdown
		mov	[esp], ebx
		call	_SSL_get_fd
		mov	dword ptr [esp+4], 2
		mov	[esp], eax
		call	[ebp+var_24]
		sub	esp, 8
		mov	[esp], ebx
		call	_SSL_get_fd
		mov	[esp], eax
		call	dword ptr [ebp+var_20]
		push	edx
		inc	esi
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 8
		mov	[esp], ebx
		call	_SSL_ctrl
		test	eax, eax
		jz	loc_4313AE
		mov	eax, 72h

loc_4312B8:				; CODE XREF: _s_time_main+89Ej
					; _s_time_main+A82j ...
		mov	edx, ds:__imp___iob
		add	edx, 20h
		mov	[esp+4], edx	; FILE *
		mov	[esp], eax	; int
		call	_fputc
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fflush
		jmp	loc_431190
; ---------------------------------------------------------------------------

loc_4312E2:				; CODE XREF: _s_time_main+4DAj
					; _s_time_main+4EFj
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		jmp	loc_431035
; ---------------------------------------------------------------------------

loc_4312F4:				; CODE XREF: _s_time_main+B0j
		mov	dword ptr [esp+4], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_430BF6
; ---------------------------------------------------------------------------

loc_431316:				; CODE XREF: _s_time_main+449j
		mov	edi, offset aNbio_1 ; "-nbio"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		setnbe	byte ptr [ebp+var_20]
		setb	cl
		cmp	byte ptr [ebp+var_20], cl
		jz	short loc_43139D
		mov	edi, offset aWww_1 ; "-www"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		setnbe	byte ptr [ebp+var_20]
		setb	cl
		cmp	byte ptr [ebp+var_20], cl
		jnz	loc_431662
		dec	edx
		mov	dword ptr [ebp+var_20],	edx
		jz	loc_430EC0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	ds:_s_www_path,	eax
		mov	[esp], eax	; char *
		call	_strlen
		cmp	eax, 1F9Ch
		mov	edx, dword ptr [ebp+var_20]
		jbe	loc_430C42
		mov	dword ptr [esp+4], offset aWwwOptionTooLo ; "-www option too long\n"

loc_431381:				; CODE XREF: _s_time_main+CABj
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[ebp+var_24], 1
		mov	edx, dword ptr [ebp+var_20]
		jmp	loc_430C42
; ---------------------------------------------------------------------------

loc_43139D:				; CODE XREF: _s_time_main+7EEj
		mov	ds:_t_nbio, 1
		mov	esi, ebx
		jmp	loc_430C42
; ---------------------------------------------------------------------------

loc_4313AE:				; CODE XREF: _s_time_main+76Dj
		mov	[esp], ebx
		call	_SSL_version
		cmp	eax, 301h
		jz	loc_4315BD
		cmp	eax, 300h
		jz	loc_431691
		cmp	eax, 2
		setz	al
		and	eax, 0FFh
		lea	eax, ds:2Ah[eax*8]
		jmp	loc_4312B8
; ---------------------------------------------------------------------------

loc_4313E3:				; CODE XREF: _s_time_main+509j
		mov	eax, _maxTime
		mov	[esp+4], eax
		mov	dword ptr [esp], offset	aCollectingConn	; "Collecting connection statistics for	%d"...
		call	_printf
		mov	ds:_bytes_read,	0
		mov	dword ptr [esp], 0
		call	__time32
		mov	edi, _maxTime
		add	edi, eax
		mov	dword ptr [esp+4], 1
		mov	dword ptr [esp], 0
		call	_app_tminterval
		fstp	st
		xor	esi, esi
		xchg	ax, ax

loc_431430:				; CODE XREF: _s_time_main+A47j
		mov	dword ptr [esp], 0
		call	__time32
		cmp	edi, eax
		jl	loc_4315CE
		xor	eax, eax
		call	_doConnection
		mov	ebx, eax
		test	eax, eax
		jz	loc_430D29
		mov	eax, ds:_s_www_path
		test	eax, eax
		jz	loc_4314F2
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], offset aGetSHttp1_0 ; "GET %s HTTP/1.0\r\n\r\n"
		mov	dword ptr [esp+4], 2000h
		mov	dword ptr [esp], offset	_buf_37918
		call	_BIO_snprintf
		mov	edx, offset _buf_37918

loc_431487:				; CODE XREF: _s_time_main+95Bj
		mov	ecx, [edx]
		add	edx, 4
		lea	eax, [ecx-1010101h]
		not	ecx
		and	eax, ecx
		and	eax, 80808080h
		jz	short loc_431487
		test	eax, 8080h
		jnz	short loc_4314AA
		shr	eax, 10h
		add	edx, 2

loc_4314AA:				; CODE XREF: _s_time_main+962j
		add	al, al
		sbb	edx, 3
		sub	edx, offset _buf_37918
		mov	[esp+8], edx
		mov	dword ptr [esp+4], offset _buf_37918
		mov	[esp], ebx
		call	_SSL_write
		jmp	short loc_4314D6
; ---------------------------------------------------------------------------
		align 10h

loc_4314D0:				; CODE XREF: _s_time_main+9B0j
		add	ds:_bytes_read,	eax

loc_4314D6:				; CODE XREF: _s_time_main+989j
		mov	dword ptr [esp+8], 2000h
		mov	dword ptr [esp+4], offset _buf_37918
		mov	[esp], ebx
		call	_SSL_read
		test	eax, eax
		jg	short loc_4314D0

loc_4314F2:				; CODE XREF: _s_time_main+91Cj
		mov	dword ptr [esp+4], 3
		mov	[esp], ebx
		call	_SSL_set_shutdown
		mov	[esp], ebx
		call	_SSL_get_fd
		mov	dword ptr [esp+4], 2 ; how
		mov	[esp], eax	; s
		call	ds:__imp__shutdown@8
		sub	esp, 8
		mov	[esp], ebx
		call	_SSL_get_fd
		mov	[esp], eax	; s
		call	ds:__imp__closesocket@4
		push	eax
		inc	esi
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 8
		mov	[esp], ebx
		call	_SSL_ctrl
		test	eax, eax
		jz	short loc_43158C
		mov	eax, 72h

loc_43155A:				; CODE XREF: _s_time_main+A74j
					; _s_time_main+A7Bj ...
		mov	edx, ds:__imp___iob
		add	edx, 20h
		mov	[esp+4], edx	; FILE *
		mov	[esp], eax	; int
		call	_fputc
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fflush
		mov	[esp], ebx
		call	_SSL_free
		jmp	loc_431430
; ---------------------------------------------------------------------------

loc_43158C:				; CODE XREF: _s_time_main+A13j
		mov	[esp], ebx
		call	_SSL_version
		cmp	eax, 301h
		jz	short loc_4315B6
		cmp	eax, 300h
		jz	short loc_4315C7
		cmp	eax, 2
		setz	al
		and	eax, 0FFh
		lea	eax, ds:2Ah[eax*8]
		jmp	short loc_43155A
; ---------------------------------------------------------------------------

loc_4315B6:				; CODE XREF: _s_time_main+A59j
		mov	eax, 74h
		jmp	short loc_43155A
; ---------------------------------------------------------------------------

loc_4315BD:				; CODE XREF: _s_time_main+87Bj
		mov	eax, 74h
		jmp	loc_4312B8
; ---------------------------------------------------------------------------

loc_4315C7:				; CODE XREF: _s_time_main+A60j
		mov	eax, 33h
		jmp	short loc_43155A
; ---------------------------------------------------------------------------

loc_4315CE:				; CODE XREF: _s_time_main+8FEj
		mov	dword ptr [esp+4], 1
		mov	dword ptr [esp], 1
		call	_app_tminterval
		fadd	ds:flt_468894
		fstp	[ebp+var_20]
		mov	dword ptr [esp], 0
		call	__time32
		mov	eax, ds:_bytes_read
		mov	[esp+18h], eax
		fld	[ebp+var_20]
		fld	st
		push	esi
		fidivr	dword ptr [esp]
		pop	ebx
		fstp	qword ptr [esp+10h]
		fstp	qword ptr [esp+8]
		mov	[esp+4], esi
		mov	dword ptr [esp], offset	aDConnectionsIn	; "\n\n%d connections in %.2fs;	%.2f conne"...
		call	_printf
		mov	eax, ds:_bytes_read
		cdq
		idiv	esi
		mov	ebx, eax
		mov	dword ptr [esp], 0
		call	__time32
		mov	[esp+0Ch], ebx
		sub	eax, edi
		add	eax, _maxTime
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	dword ptr [esp], offset	aDConnections_0	; "%d connections in %ld real seconds, %ld"...
		call	_printf
		mov	eax, ds:_perform
		jmp	loc_43104F
; ---------------------------------------------------------------------------

loc_431662:				; CODE XREF: _s_time_main+808j
		mov	edi, offset aBugs_1 ; "-bugs"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		setnbe	byte ptr [ebp+var_20]
		setb	cl
		cmp	byte ptr [ebp+var_20], cl
		jnz	loc_431787
		mov	ds:_st_bugs, 1
		mov	esi, ebx
		jmp	loc_430C42
; ---------------------------------------------------------------------------

loc_431691:				; CODE XREF: _s_time_main+886j
		mov	eax, 33h
		jmp	loc_4312B8
; ---------------------------------------------------------------------------

loc_43169B:				; CODE XREF: _s_time_main+65Ej
		mov	dword ptr [esp+4], 1
		mov	dword ptr [esp], 1
		call	_app_tminterval
		fadd	ds:flt_468894
		mov	eax, ds:_bytes_read
		mov	[esp+18h], eax
		fld	st
		push	esi
		fidivr	dword ptr [esp]
		pop	eax
		fstp	qword ptr [esp+10h]
		fstp	qword ptr [esp+8]
		mov	[esp+4], esi
		mov	dword ptr [esp], offset	aDConnectionsIn	; "\n\n%d connections in %.2fs;	%.2f conne"...
		call	_printf
		mov	eax, ds:_bytes_read
		test	esi, esi
		jnz	loc_431780
		mov	ecx, 1

loc_4316EF:				; CODE XREF: _s_time_main+C42j
		cdq
		idiv	ecx
		mov	dword ptr [ebp+var_20],	eax
		mov	dword ptr [esp], 0
		call	__time32
		mov	edx, dword ptr [ebp+var_20]
		mov	[esp+0Ch], edx
		sub	eax, edi
		add	eax, _maxTime
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	dword ptr [esp], offset	aDConnections_0	; "%d connections in %ld real seconds, %ld"...
		call	_printf
		xor	esi, esi

loc_431726:				; CODE XREF: _s_time_main+BF8j
		mov	[esp], ebx
		call	_SSL_free
		jmp	loc_430D2E
; ---------------------------------------------------------------------------

loc_431733:				; CODE XREF: _s_time_main+66Dj
		mov	esi, 1
		jmp	short loc_431726
; ---------------------------------------------------------------------------

loc_43173A:				; CODE XREF: _s_time_main+4FCj
		mov	dword ptr [esp], offset	aSsl_cipher ; "SSL_CIPHER"
		call	_getenv
		mov	ds:_tm_cipher, eax
		test	eax, eax
		jnz	loc_431042
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	dword ptr [esp+8], 14h ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aNoCipherSpecif	; "No CIPHER specified\n"
		call	_fwrite
		jmp	loc_431042
; ---------------------------------------------------------------------------

loc_431780:				; CODE XREF: _s_time_main+BA4j
		mov	ecx, esi
		jmp	loc_4316EF
; ---------------------------------------------------------------------------

loc_431787:				; CODE XREF: _s_time_main+B3Aj
		mov	edi, offset aSsl3_1 ; "-ssl3"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		setnbe	byte ptr [ebp+var_20]
		setb	cl
		cmp	byte ptr [ebp+var_20], cl
		jz	short loc_43181D
		mov	edi, offset aTime ; "-time"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		setnbe	byte ptr [ebp+var_20]
		setb	cl
		cmp	byte ptr [ebp+var_20], cl
		jnz	short loc_431834
		dec	edx
		mov	dword ptr [ebp+var_20],	edx
		jz	loc_430EC0
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp], eax	; char *
		call	_atoi
		mov	_maxTime, eax
		test	eax, eax
		mov	edx, dword ptr [ebp+var_20]
		jg	loc_430C42
		mov	dword ptr [esp+4], offset aTimeMustBe0 ; "time must be > 0\n"
		jmp	loc_431381
; ---------------------------------------------------------------------------

loc_4317F0:				; CODE XREF: _s_time_main+52Ej
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	dword ptr [esp+8], 19h ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aUnableToGetCon	; "Unable to get connection\n"
		call	_fwrite
		jmp	loc_430D29
; ---------------------------------------------------------------------------

loc_43181D:				; CODE XREF: _s_time_main+C5Fj
		mov	dword ptr [ebp+var_20],	edx
		call	_SSLv3_client_method
		mov	ds:_s_time_meth, eax
		mov	esi, ebx
		mov	edx, dword ptr [ebp+var_20]
		jmp	loc_430C42
; ---------------------------------------------------------------------------

loc_431834:				; CODE XREF: _s_time_main+C79j
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnknownOpti_16 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[ebp+var_24], 1
		jmp	loc_430C98
_s_time_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_index_name_qual proc near		; DATA XREF: _index_index+73o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax]
		cmp	byte ptr [eax],	56h
		setz	al
		and	eax, 0FFh
		retn
_index_name_qual endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl index_serial_LHASH_COMP(char *, char *)
_index_serial_LHASH_COMP proc near	; DATA XREF: _index_index+Co

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	30h
		jnz	short loc_431896

loc_431890:				; CODE XREF: _index_serial_LHASH_COMP+14j
		inc	eax
		cmp	byte ptr [eax],	30h
		jz	short loc_431890

loc_431896:				; CODE XREF: _index_serial_LHASH_COMP+Ej
		mov	edx, [edx+0Ch]
		cmp	byte ptr [edx],	30h
		jnz	short loc_4318A6
		xchg	ax, ax

loc_4318A0:				; CODE XREF: _index_serial_LHASH_COMP+24j
		inc	edx
		cmp	byte ptr [edx],	30h
		jz	short loc_4318A0

loc_4318A6:				; CODE XREF: _index_serial_LHASH_COMP+1Cj
		mov	[esp+arg_4], edx ; char	*
		mov	[esp+arg_0], eax ; char	*
		jmp	_strcmp
_index_serial_LHASH_COMP endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl index_name_LHASH_COMP(char *, char *)
_index_name_LHASH_COMP proc near	; DATA XREF: _index_index+63o

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax+14h]
		mov	[esp+arg_4], eax ; char	*
		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		mov	[esp+arg_0], eax ; char	*
		jmp	_strcmp
_index_name_LHASH_COMP endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ui_close	proc near		; DATA XREF: _setup_ui_method+4Eo

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		call	_UI_OpenSSL
		mov	[esp+1Ch+var_1C], eax
		call	_UI_method_get_closer
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	eax
_ui_close	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ui_write	proc near		; DATA XREF: _setup_ui_method+39o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		mov	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_1C], ebx
		call	_UI_get_input_flags
		test	al, 2
		jz	short loc_431933
		mov	[esp+1Ch+var_1C], esi
		call	_UI_get0_user_data
		test	eax, eax
		jz	short loc_431933
		mov	[esp+1Ch+var_1C], ebx
		call	_UI_get_string_type
		dec	eax
		cmp	eax, 1
		jbe	short loc_431950

loc_431933:				; CODE XREF: _ui_write+17j
					; _ui_write+23j ...
		call	_UI_OpenSSL
		mov	[esp+1Ch+var_1C], eax
		call	_UI_method_get_writer
		mov	[esp+1Ch+arg_4], ebx
		mov	[esp+1Ch+arg_0], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_431950:				; CODE XREF: _ui_write+31j
		mov	[esp+1Ch+var_1C], esi
		call	_UI_get0_user_data
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_431933
		cmp	byte ptr [eax],	0
		jz	short loc_431933
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
_ui_write	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ui_read	proc near		; DATA XREF: _setup_ui_method+24o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_0]
		mov	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_1C], ebx
		call	_UI_get_input_flags
		test	al, 2
		jz	short loc_4319A3
		mov	[esp+1Ch+var_1C], esi
		call	_UI_get0_user_data
		test	eax, eax
		jz	short loc_4319A3
		mov	[esp+1Ch+var_1C], ebx
		call	_UI_get_string_type
		dec	eax
		cmp	eax, 1
		jbe	short loc_4319C0

loc_4319A3:				; CODE XREF: _ui_read+17j _ui_read+23j ...
		call	_UI_OpenSSL
		mov	[esp+1Ch+var_1C], eax
		call	_UI_method_get_reader
		mov	[esp+1Ch+arg_4], ebx
		mov	[esp+1Ch+arg_0], esi
		add	esp, 14h
		pop	ebx
		pop	esi
		jmp	eax
; ---------------------------------------------------------------------------
		align 10h

loc_4319C0:				; CODE XREF: _ui_read+31j
		mov	[esp+1Ch+var_1C], esi
		call	_UI_get0_user_data
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_4319A3
		cmp	byte ptr [eax],	0
		jz	short loc_4319A3
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], esi
		call	_UI_set_result
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
_ui_read	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_ui_open	proc near		; DATA XREF: _setup_ui_method+14o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		call	_UI_OpenSSL
		mov	[esp+1Ch+var_1C], eax
		call	_UI_method_get_opener
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	eax
_ui_open	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl password_callback(char *,	int, int, int)
		public _password_callback
_password_callback proc	near		; CODE XREF: _ssl_give_srp_client_pwd_cb+53p
					; _srp_verify_user+4Fp	...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, [esp+3Ch+arg_C]
		test	eax, eax
		jz	loc_431AE0
		mov	esi, [eax]
		mov	edi, [eax+4]
		test	esi, esi
		jz	loc_431AE2
		mov	[esp+3Ch+var_3C], esi ;	char *
		call	_strlen
		cmp	eax, [esp+3Ch+arg_4]
		jg	short loc_431AA0
		mov	edx, eax
		mov	edi, [esp+3Ch+arg_0]
		cmp	eax, 4
		jnb	short loc_431AAF

loc_431A49:				; CODE XREF: _password_callback+9Dj
					; _password_callback+BEj
		xor	ecx, ecx
		test	dl, 2
		jnz	short loc_431A80
		and	edx, 1
		jnz	short loc_431A60

loc_431A55:				; CODE XREF: _password_callback+7Ej
					; _password_callback+1FAj ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_431A60:				; CODE XREF: _password_callback+43j
					; _password_callback+80j
		mov	bl, [esi+ecx]
		mov	byte ptr [esp+3Ch+var_20], bl
		mov	[edi+ecx], bl
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_431A80:				; CODE XREF: _password_callback+3Ej
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		and	edx, 1
		jz	short loc_431A55
		jmp	short loc_431A60
; ---------------------------------------------------------------------------
		align 10h

loc_431AA0:				; CODE XREF: _password_callback+2Cj
		mov	eax, [esp+3Ch+arg_4]
		mov	edx, eax
		mov	edi, [esp+3Ch+arg_0]
		cmp	eax, 4
		jb	short loc_431A49

loc_431AAF:				; CODE XREF: _password_callback+37j
		test	edi, 1
		jnz	loc_431C20

loc_431ABB:				; CODE XREF: _password_callback+219j
		test	edi, 2
		jnz	loc_431C30

loc_431AC7:				; CODE XREF: _password_callback+22Fj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	loc_431A49
; ---------------------------------------------------------------------------
		align 10h

loc_431AE0:				; CODE XREF: _password_callback+Dj
		xor	edi, edi

loc_431AE2:				; CODE XREF: _password_callback+1Aj
		mov	eax, ds:_ui_method
		mov	[esp+3Ch+var_3C], eax
		call	_UI_new_method
		mov	esi, eax
		test	eax, eax
		jz	loc_431C10
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], offset aPassPhrase ; "pass phrase"
		mov	[esp+3Ch+var_3C], eax
		call	_UI_construct_prompt
		mov	edi, eax
		test	eax, eax
		jz	loc_431D1F
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 1
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], esi
		call	_UI_ctrl
		mov	eax, [esp+3Ch+arg_4]
		dec	eax
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_2C], 4
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], 2
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], esi
		call	_UI_add_input_string
		mov	ebp, eax
		test	eax, eax
		js	loc_431C50
		mov	eax, [esp+3Ch+arg_8]
		test	eax, eax
		jnz	loc_431C96
		xor	ebx, ebx
		jmp	short loc_431BBC
; ---------------------------------------------------------------------------
		align 10h

loc_431B90:				; CODE XREF: _password_callback+1B8j
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 2
		mov	[esp+3Ch+var_3C], esi
		call	_UI_ctrl
		test	eax, eax
		jz	short loc_431BCA

loc_431BBC:				; CODE XREF: _password_callback+178j
					; _password_callback+2E0j
		mov	[esp+3Ch+var_3C], esi
		call	_UI_process
		mov	ebp, eax
		test	eax, eax
		js	short loc_431B90

loc_431BCA:				; CODE XREF: _password_callback+1AAj
		test	ebx, ebx
		jz	short loc_431BE6

loc_431BCE:				; CODE XREF: _password_callback+2E6j
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	_OPENSSL_cleanse
		mov	[esp+3Ch+var_3C], ebx
		call	_CRYPTO_free

loc_431BE6:				; CODE XREF: _password_callback+1BCj
		test	ebp, ebp
		js	short loc_431C50
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax ;	char *
		call	_strlen
		mov	ebx, eax

loc_431BF8:				; CODE XREF: _password_callback+281j
					; _password_callback+361j
		mov	[esp+3Ch+var_3C], esi
		call	_UI_free
		mov	[esp+3Ch+var_3C], edi
		call	_CRYPTO_free
		mov	eax, ebx
		jmp	loc_431A55
; ---------------------------------------------------------------------------
		align 10h

loc_431C10:				; CODE XREF: _password_callback+E3j
		xor	eax, eax
		jmp	loc_431A55
; ---------------------------------------------------------------------------
		align 10h

loc_431C20:				; CODE XREF: _password_callback+A5j
		mov	bl, [esi]
		mov	[edi], bl
		inc	edi
		inc	esi
		lea	edx, [eax-1]
		jmp	loc_431ABB
; ---------------------------------------------------------------------------
		align 10h

loc_431C30:				; CODE XREF: _password_callback+B1j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_431AC7
; ---------------------------------------------------------------------------
		align 10h

loc_431C50:				; CODE XREF: _password_callback+164j
					; _password_callback+1D8j
		cmp	ebp, 0FFFFFFFFh
		jnz	loc_431D00
		mov	[esp+3Ch+var_38], offset aUserInterfaceE ; "User interface error\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors

loc_431C7B:				; CODE XREF: _password_callback+30Aj
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_OPENSSL_cleanse
		xor	ebx, ebx
		jmp	loc_431BF8
; ---------------------------------------------------------------------------

loc_431C96:				; CODE XREF: _password_callback+170j
		mov	[esp+3Ch+var_34], 249h
		mov	[esp+3Ch+var_38], offset aApps_c ; "apps.c"
		mov	eax, [esp+3Ch+arg_4]
		mov	[esp+3Ch+var_3C], eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_431D43
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_24], eax
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_28], eax
		mov	[esp+3Ch+var_2C], 4
		mov	[esp+3Ch+var_30], ebx
		mov	[esp+3Ch+var_34], 2
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], esi
		call	_UI_add_verify_string
		mov	ebp, eax
		test	eax, eax
		jns	loc_431BBC
		jmp	loc_431BCE
; ---------------------------------------------------------------------------
		align 10h

loc_431D00:				; CODE XREF: _password_callback+243j
		cmp	ebp, 0FFFFFFFEh
		jnz	short loc_431D6F
		mov	[esp+3Ch+var_38], offset aAborted ; "aborted!\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		jmp	loc_431C7B
; ---------------------------------------------------------------------------

loc_431D1F:				; CODE XREF: _password_callback+101j
		mov	[esp+3Ch+var_38], offset aOutOfMemory_9	; "Out of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_3C], esi
		call	_UI_free
		xor	eax, eax
		jmp	loc_431A55
; ---------------------------------------------------------------------------

loc_431D43:				; CODE XREF: _password_callback+2A6j
		mov	[esp+3Ch+var_38], offset aOutOfMemory_9	; "Out of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_3C], esi
		call	_UI_free
		mov	[esp+3Ch+var_3C], edi
		call	_CRYPTO_free
		xor	eax, eax
		jmp	loc_431A55
; ---------------------------------------------------------------------------

loc_431D6F:				; CODE XREF: _password_callback+2F3j
		xor	ebx, ebx
		jmp	loc_431BF8
_password_callback endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_load_netscape_key proc	near		; CODE XREF: _load_key+223p
					; _load_pubkey+1C3p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	[esp+4Ch+var_34], eax
		mov	edi, edx
		mov	[esp+4Ch+var_30], ecx
		call	_BUF_MEM_new
		mov	esi, eax
		call	_EVP_PKEY_new
		mov	ebp, eax
		test	esi, esi
		jz	short loc_431DEB
		test	eax, eax
		jz	short loc_431DEB
		xor	ebx, ebx
		jmp	short loc_431DD5
; ---------------------------------------------------------------------------
		align 10h

loc_431DB0:				; CODE XREF: _load_netscape_key+69j
		mov	[esp+4Ch+var_44], 2800h
		mov	eax, [esi+4]
		add	eax, ebx
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], edi
		call	_BIO_read
		add	ebx, eax
		test	eax, eax
		jz	short loc_431E10
		js	loc_431E70

loc_431DD5:				; CODE XREF: _load_netscape_key+29j
		lea	eax, [ebx+2800h]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], esi
		call	_BUF_MEM_grow_clean
		test	eax, eax
		jnz	short loc_431DB0

loc_431DEB:				; CODE XREF: _load_netscape_key+21j
					; _load_netscape_key+25j ...
		mov	[esp+4Ch+var_4C], esi
		call	_BUF_MEM_free
		mov	[esp+4Ch+var_4C], ebp
		call	_EVP_PKEY_free
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_431E10:				; CODE XREF: _load_netscape_key+4Dj
		mov	eax, [esi+4]
		mov	[esp+4Ch+var_20], eax
		xor	eax, eax
		cmp	[esp+4Ch+arg_4], 8
		setz	al
		mov	[esp+4Ch+var_3C], eax
		mov	[esp+4Ch+var_40], 0
		mov	[esp+4Ch+var_44], ebx
		lea	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], 0
		call	_d2i_RSA_NET
		mov	ebx, eax
		test	eax, eax
		jz	short loc_431DEB
		mov	[esp+4Ch+var_4C], esi
		call	_BUF_MEM_free
		mov	[esp+4Ch+var_48], ebx
		mov	[esp+4Ch+var_4C], ebp
		call	_EVP_PKEY_set1_RSA
		mov	eax, ebp
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_431E70:				; CODE XREF: _load_netscape_key+4Fj
		mov	eax, [esp+4Ch+var_30]
		mov	[esp+4Ch+var_40], eax
		mov	eax, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aErrorReadingSS ; "Error reading %s %s"
		mov	eax, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		jmp	loc_431DEB
_load_netscape_key endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_set_multi_opts	proc near		; CODE XREF: _set_cert_ex+Dj
					; _set_name_ex+13p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_30		= dword	ptr -30h
var_29		= byte ptr -29h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_28], ecx
		test	edx, edx
		jz	loc_431FDB
		mov	[esp+3Ch+var_3C], edx
		call	_X509V3_parse_list
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_20], 1
		xor	edi, edi
		mov	esi, ds:__imp___stricmp
		mov	[esp+3Ch+var_3C], eax
		call	_sk_num
		cmp	edi, eax
		jge	loc_431F7B
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_431EF0:				; CODE XREF: _set_multi_opts+D5j
		mov	[esp+3Ch+var_38], edi
		mov	eax, [esp+3Ch+var_30]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_value
		mov	ebx, [eax+4]
		mov	al, [ebx]
		cmp	al, 2Dh
		jz	loc_431FB0
		cmp	al, 2Bh
		jz	loc_431FD0
		mov	[esp+3Ch+var_29], 1

loc_431F1A:				; CODE XREF: _set_multi_opts+116j
					; _set_multi_opts+136j
		mov	ebp, [esp+3Ch+var_28]
		mov	eax, [ebp+0]
		test	eax, eax
		jnz	short loc_431F3A
		jmp	short loc_431FA0
; ---------------------------------------------------------------------------
		align 10h

loc_431F30:				; CODE XREF: _set_multi_opts+A5j
		add	ebp, 0Ch
		mov	eax, [ebp+0]
		test	eax, eax
		jz	short loc_431FA0

loc_431F3A:				; CODE XREF: _set_multi_opts+83j
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	esi
		test	eax, eax
		jnz	short loc_431F30
		mov	eax, [ebp+8]
		not	eax
		mov	ecx, [esp+3Ch+var_24]
		and	eax, [ecx]
		mov	[ecx], eax
		cmp	[esp+3Ch+var_29], 0
		jz	short loc_431FC0
		or	eax, [ebp+4]
		mov	edx, eax

loc_431F60:				; CODE XREF: _set_multi_opts+127j
		mov	eax, [esp+3Ch+var_24]
		mov	[eax], edx

loc_431F66:				; CODE XREF: _set_multi_opts+108j
		inc	edi
		mov	eax, [esp+3Ch+var_30]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_num
		cmp	edi, eax
		jl	loc_431EF0

loc_431F7B:				; CODE XREF: _set_multi_opts+3Dj
		mov	[esp+3Ch+var_38], offset _X509V3_conf_free
		mov	eax, [esp+3Ch+var_30]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_pop_free
		mov	eax, [esp+3Ch+var_20]
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_431FA0:				; CODE XREF: _set_multi_opts+85j
					; _set_multi_opts+98j
		mov	[esp+3Ch+var_20], 0
		jmp	short loc_431F66
; ---------------------------------------------------------------------------
		align 10h

loc_431FB0:				; CODE XREF: _set_multi_opts+67j
		inc	ebx
		mov	[esp+3Ch+var_29], 0
		jmp	loc_431F1A
; ---------------------------------------------------------------------------
		align 10h

loc_431FC0:				; CODE XREF: _set_multi_opts+B9j
		mov	edx, [ebp+4]
		not	edx
		and	edx, eax
		jmp	short loc_431F60
; ---------------------------------------------------------------------------
		align 10h

loc_431FD0:				; CODE XREF: _set_multi_opts+6Fj
		inc	ebx
		mov	[esp+3Ch+var_29], 1
		jmp	loc_431F1A
; ---------------------------------------------------------------------------

loc_431FDB:				; CODE XREF: _set_multi_opts+11j
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_set_multi_opts	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_index_name_LHASH_HASH proc near	; DATA XREF: _index_index+6Bo

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		mov	[esp+arg_0], eax
		jmp	_lh_strhash
_index_name_LHASH_HASH endp


; =============== S U B	R O U T	I N E =======================================


_index_serial_LHASH_HASH proc near	; DATA XREF: _index_index+14o

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	eax, [eax+0Ch]
		cmp	byte ptr [eax],	30h
		jnz	short loc_432016
		lea	esi, [esi+0]

loc_432010:				; CODE XREF: _index_serial_LHASH_HASH+14j
		inc	eax
		cmp	byte ptr [eax],	30h
		jz	short loc_432010

loc_432016:				; CODE XREF: _index_serial_LHASH_HASH+Aj
		mov	[esp+arg_0], eax
		jmp	_lh_strhash
_index_serial_LHASH_HASH endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_app_get_pass_part_0 proc near		; CODE XREF: _app_passwd+7Cp
					; _app_passwd+D9p

var_42C		= dword	ptr -42Ch
var_428		= dword	ptr -428h
var_424		= dword	ptr -424h
var_420		= dword	ptr -420h
var_41C		= byte ptr -41Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 41Ch
		mov	ebp, eax
		mov	ebx, ecx
		test	ecx, ecx
		jz	short loc_4320B0
		mov	eax, ds:_pwdbio_36996
		test	eax, eax
		jz	short loc_4320B0

loc_43203B:				; CODE XREF: _app_get_pass_part_0+D0j
					; _app_get_pass_part_0+10Aj
		mov	[esp+42Ch+var_424], 400h
		lea	esi, [esp+42Ch+var_41C]
		mov	[esp+42Ch+var_428], esi
		mov	[esp+42Ch+var_42C], eax
		call	_BIO_gets
		dec	ebx
		jz	short loc_432076
		mov	[esp+42Ch+var_420], eax
		mov	edx, ds:_pwdbio_36996
		mov	[esp+42Ch+var_42C], edx
		call	_BIO_free_all
		mov	ds:_pwdbio_36996, 0
		mov	eax, [esp+42Ch+var_420]

loc_432076:				; CODE XREF: _app_get_pass_part_0+34j
		test	eax, eax
		jle	loc_432170
		mov	[esp+42Ch+var_428], 0Ah	; int
		mov	[esp+42Ch+var_42C], esi	; char *
		call	_strchr
		test	eax, eax
		jz	short loc_432095
		mov	byte ptr [eax],	0

loc_432095:				; CODE XREF: _app_get_pass_part_0+70j
		mov	[esp+42Ch+var_42C], esi
		call	_BUF_strdup

loc_43209D:				; CODE XREF: _app_get_pass_part_0+E8j
					; _app_get_pass_part_0+126j ...
		add	esp, 41Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4320B0:				; CODE XREF: _app_get_pass_part_0+10j
					; _app_get_pass_part_0+19j
		mov	edi, offset aFile ; "file:"
		mov	ecx, 5
		mov	esi, edx
		repe cmpsb
		jz	short loc_432110
		mov	edi, offset aStdin_2 ; "stdin"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jnz	loc_432150
		mov	[esp+42Ch+var_428], 0
		mov	eax, ds:__imp___iob
		mov	[esp+42Ch+var_42C], eax
		call	_BIO_new_fp
		mov	ds:_pwdbio_36996, eax
		test	eax, eax
		jnz	loc_43203B
		mov	[esp+42Ch+var_428], offset aCanTOpenBioFor ; "Can't open BIO for stdin\n"
		mov	[esp+42Ch+var_42C], ebp
		call	_BIO_printf
		xor	eax, eax
		jmp	short loc_43209D
; ---------------------------------------------------------------------------
		align 10h

loc_432110:				; CODE XREF: _app_get_pass_part_0+9Ej
		lea	esi, [edx+5]
		mov	[esp+42Ch+var_428], offset aR_2	; "r"
		mov	[esp+42Ch+var_42C], esi
		call	_BIO_new_file
		mov	ds:_pwdbio_36996, eax
		test	eax, eax
		jnz	loc_43203B
		mov	[esp+42Ch+var_424], esi
		mov	[esp+42Ch+var_428], offset aCanTOpenFileS ; "Can't open file %s\n"
		mov	[esp+42Ch+var_42C], ebp
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_43209D
; ---------------------------------------------------------------------------
		align 10h

loc_432150:				; CODE XREF: _app_get_pass_part_0+AEj
		mov	[esp+42Ch+var_424], edx
		mov	[esp+42Ch+var_428], offset aInvalidPasswor ; "Invalid password argument	\"%s\"\n"
		mov	[esp+42Ch+var_42C], ebp
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_43209D
; ---------------------------------------------------------------------------
		align 10h

loc_432170:				; CODE XREF: _app_get_pass_part_0+58j
		mov	[esp+42Ch+var_428], offset aErrorReading_2 ; "Error reading password from BIO\n"
		mov	[esp+42Ch+var_42C], ebp
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_43209D
_app_get_pass_part_0 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_WIN32_rename_part_3 proc near		; CODE XREF: _rotate_serial:loc_4348D6p
					; _rotate_serial:loc_434900p ...
		sub	esp, 0Ch
		call	ds:__imp___errno
		mov	dword ptr [eax], 2
		mov	eax, 0FFFFFFFFh
		add	esp, 0Ch
		retn
_WIN32_rename_part_3 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_load_pkcs12_constprop_4 proc near	; CODE XREF: _load_cert+E9p
					; _load_key+359p

var_43C		= dword	ptr -43Ch
var_438		= dword	ptr -438h
var_434		= dword	ptr -434h
var_430		= dword	ptr -430h
var_42C		= dword	ptr -42Ch
var_420		= dword	ptr -420h
var_41C		= byte ptr -41Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 42Ch
		mov	esi, eax
		mov	edi, ecx
		mov	[esp+43Ch+var_438], 0
		mov	[esp+43Ch+var_43C], edx
		call	_d2i_PKCS12_bio
		mov	ebx, eax
		test	eax, eax
		jz	loc_4322D0
		mov	[esp+43Ch+var_434], 0
		mov	[esp+43Ch+var_438], offset byte_468975
		mov	[esp+43Ch+var_43C], eax
		call	_PKCS12_verify_mac
		test	eax, eax
		jz	short loc_432240

loc_4321F4:				; CODE XREF: _load_pkcs12_constprop_4+AAj
		mov	eax, offset byte_468975

loc_4321F9:				; CODE XREF: _load_pkcs12_constprop_4+10Ej
		mov	[esp+43Ch+var_42C], 0
		mov	edx, [esp+43Ch+arg_C]
		mov	[esp+43Ch+var_430], edx
		mov	edx, [esp+43Ch+arg_8]
		mov	[esp+43Ch+var_434], edx
		mov	[esp+43Ch+var_438], eax
		mov	[esp+43Ch+var_43C], ebx
		call	_PKCS12_parse

loc_432223:				; CODE XREF: _load_pkcs12_constprop_4+166j
					; _load_pkcs12_constprop_4+196j
		mov	[esp+43Ch+var_420], eax
		mov	[esp+43Ch+var_43C], ebx
		call	_PKCS12_free
		mov	eax, [esp+43Ch+var_420]
		add	esp, 42Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_432240:				; CODE XREF: _load_pkcs12_constprop_4+42j
		mov	[esp+43Ch+var_434], 0
		mov	[esp+43Ch+var_438], 0
		mov	[esp+43Ch+var_43C], ebx
		call	_PKCS12_verify_mac
		test	eax, eax
		jnz	short loc_4321F4
		mov	eax, [esp+43Ch+arg_0]
		test	eax, eax
		jz	loc_432320

loc_43226B:				; CODE XREF: _load_pkcs12_constprop_4+17Bj
		mov	eax, [esp+43Ch+arg_4]
		mov	[esp+43Ch+var_430], eax
		mov	[esp+43Ch+var_434], 0
		mov	[esp+43Ch+var_438], 400h
		lea	ebp, [esp+43Ch+var_41C]
		mov	[esp+43Ch+var_43C], ebp
		call	[esp+43Ch+arg_0]
		test	eax, eax
		js	loc_432330
		cmp	eax, 3FFh
		jg	short loc_4322A8
		mov	[esp+eax+43Ch+var_41C],	0

loc_4322A8:				; CODE XREF: _load_pkcs12_constprop_4+F1j
		mov	[esp+43Ch+var_434], eax
		mov	[esp+43Ch+var_438], ebp
		mov	[esp+43Ch+var_43C], ebx
		call	_PKCS12_verify_mac
		test	eax, eax
		jz	short loc_432300
		mov	eax, ebp
		jmp	loc_4321F9
; ---------------------------------------------------------------------------
		align 10h

loc_4322D0:				; CODE XREF: _load_pkcs12_constprop_4+22j
		mov	[esp+43Ch+var_434], edi
		mov	[esp+43Ch+var_438], offset aErrorLoadingPk ; "Error loading PKCS12 file	for %s\n"
		mov	[esp+43Ch+var_43C], esi
		call	_BIO_printf
		xor	eax, eax
		add	esp, 42Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_432300
; ---------------------------------------------------------------------------
		align 10h

loc_432300:				; CODE XREF: _load_pkcs12_constprop_4+10Aj
					; _load_pkcs12_constprop_4+141j
		mov	[esp+43Ch+var_434], edi
		mov	[esp+43Ch+var_438], offset aMacVerifyError ; "Mac verify error (wrong password?) in P"...
		mov	[esp+43Ch+var_43C], esi
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_432223
; ---------------------------------------------------------------------------
		align 10h

loc_432320:				; CODE XREF: _load_pkcs12_constprop_4+B5j
		mov	[esp+43Ch+arg_0], offset _password_callback
		jmp	loc_43226B
; ---------------------------------------------------------------------------

loc_432330:				; CODE XREF: _load_pkcs12_constprop_4+E6j
		mov	[esp+43Ch+var_434], edi
		mov	[esp+43Ch+var_438], offset aPasspharseCall ; "Passpharse callback error	for %s\n"
		mov	[esp+43Ch+var_43C], esi
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_432223
_load_pkcs12_constprop_4 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl str2fmt(char *)
		public _str2fmt
_str2fmt	proc near		; CODE XREF: _asn1parse_main+130p
					; _req_main+210p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_4323C0
		mov	al, [ebx]
		mov	dl, al
		and	edx, 0FFFFFFDFh
		cmp	dl, 44h
		jz	short loc_4323B0
		cmp	dl, 54h
		jz	short loc_4323A0
		cmp	dl, 4Eh
		jz	short loc_4323D0
		cmp	dl, 53h
		jz	short loc_4323E0
		cmp	dl, 4Dh
		jz	short loc_4323E7
		cmp	al, 31h
		jz	short loc_432392
		mov	edi, offset aPkcs12 ; "PKCS12"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_4323EE

loc_432392:				; CODE XREF: _str2fmt+30j _str2fmt+ACj
		mov	eax, 5
		jmp	short loc_4323A5
; ---------------------------------------------------------------------------
		align 10h

loc_4323A0:				; CODE XREF: _str2fmt+1Dj
		mov	eax, 2

loc_4323A5:				; CODE XREF: _str2fmt+47j _str2fmt+85j ...
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4323B0:				; CODE XREF: _str2fmt+18j
		mov	eax, 1
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4323C0:				; CODE XREF: _str2fmt+Cj
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4323D0:				; CODE XREF: _str2fmt+22j
		mov	eax, 4
		jmp	short loc_4323A5
; ---------------------------------------------------------------------------
		align 10h

loc_4323E0:				; CODE XREF: _str2fmt+27j
		mov	eax, 6
		jmp	short loc_4323A5
; ---------------------------------------------------------------------------

loc_4323E7:				; CODE XREF: _str2fmt+2Cj
		mov	eax, 0Bh
		jmp	short loc_4323A5
; ---------------------------------------------------------------------------

loc_4323EE:				; CODE XREF: _str2fmt+40j
		mov	edi, offset aPkcs12_0 ;	"pkcs12"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jz	short loc_432392
		mov	[esp+1Ch+var_10], edx
		mov	[esp+1Ch+var_18], offset aP12 ;	"P12"
		mov	[esp+1Ch+var_1C], ebx ;	char *
		call	_strcmp
		mov	ecx, eax
		mov	eax, 5
		test	ecx, ecx
		jz	short loc_4323A5
		mov	[esp+1Ch+var_18], offset aP12_0	; "p12"
		mov	[esp+1Ch+var_1C], ebx ;	char *
		call	_strcmp
		mov	ecx, eax
		mov	eax, 5
		test	ecx, ecx
		mov	edx, [esp+1Ch+var_10]
		jz	loc_4323A5
		mov	al, 7
		cmp	dl, 45h
		jz	loc_4323A5
		xor	al, al
		cmp	dl, 50h
		jnz	loc_4323A5
		mov	al, [ebx+1]
		and	eax, 0FFFFFFDFh
		cmp	al, 56h
		setz	al
		and	eax, 0FFh
		lea	eax, [eax+eax*8+3]
		jmp	loc_4323A5
_str2fmt	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl program_name(char	*, int,	int)
		public _program_name
_program_name	proc near		; CODE XREF: _dgst_main+148p
					; _enc_main+9Fp ...

var_2C		= dword	ptr -2Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], esi ;	char *
		call	_strlen
		lea	edx, [eax-1]
		mov	edi, eax
		test	edx, edx
		jg	short loc_4324B1
		jmp	loc_432530
; ---------------------------------------------------------------------------
		jmp	short loc_4324A0
; ---------------------------------------------------------------------------
		align 10h

loc_4324A0:				; CODE XREF: _program_name+21j
					; _program_name+47j
		cmp	cl, 5Ch
		jz	short loc_4324B9
		cmp	cl, 3Ah
		jz	short loc_4324B9
		dec	edx
		jz	loc_432530

loc_4324B1:				; CODE XREF: _program_name+1Aj
		mov	cl, [esi+edx]
		cmp	cl, 2Fh
		jnz	short loc_4324A0

loc_4324B9:				; CODE XREF: _program_name+33j
					; _program_name+38j
		lea	ebp, [esi+edx+1]
		test	ebp, ebp
		jz	short loc_432530
		mov	[esp+2Ch+var_2C], ebp ;	char *
		call	_strlen
		mov	edi, eax

loc_4324CB:				; CODE XREF: _program_name+C2j
		cmp	eax, 4
		jle	short loc_4324D7
		cmp	byte ptr [ebp+edi-4], 2Eh
		jz	short loc_432540

loc_4324D7:				; CODE XREF: _program_name+5Ej
					; _program_name+DAj ...
		cmp	eax, [esp+2Ch+arg_8]
		jl	short loc_4324E2
		mov	eax, [esp+2Ch+arg_8]
		dec	eax

loc_4324E2:				; CODE XREF: _program_name+6Bj
		xor	edx, edx
		test	eax, eax
		jg	short loc_4324FF
		jmp	short loc_432517
; ---------------------------------------------------------------------------
		align 10h

loc_4324F0:				; CODE XREF: _program_name+99j
		add	ecx, 20h
		mov	edi, [esp+2Ch+arg_4]
		mov	[edi+edx], cl
		inc	edx
		cmp	edx, eax
		jz	short loc_432517

loc_4324FF:				; CODE XREF: _program_name+76j
					; _program_name+A5j
		mov	cl, [ebp+edx+0]
		lea	ebx, [ecx-41h]
		cmp	bl, 19h
		jbe	short loc_4324F0
		mov	edi, [esp+2Ch+arg_4]
		mov	[edi+edx], cl
		inc	edx
		cmp	edx, eax
		jnz	short loc_4324FF

loc_432517:				; CODE XREF: _program_name+78j
					; _program_name+8Dj
		mov	esi, [esp+2Ch+arg_4]
		mov	byte ptr [esi+eax], 0
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_432530:				; CODE XREF: _program_name+1Cj
					; _program_name+3Bj ...
		mov	ebp, esi
		jmp	short loc_4324CB
; ---------------------------------------------------------------------------
		align 10h

loc_432540:				; CODE XREF: _program_name+65j
		mov	dl, [ebp+edi-3]
		and	edx, 0FFFFFFDFh
		cmp	dl, 45h
		jnz	short loc_4324D7
		mov	dl, [ebp+edi-2]
		and	edx, 0FFFFFFDFh
		cmp	dl, 58h
		jnz	loc_4324D7
		mov	dl, [ebp+edi-1]
		and	edx, 0FFFFFFDFh
		cmp	dl, 45h
		jnz	loc_4324D7
		sub	eax, 4
		jmp	loc_4324D7
_program_name	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _chopup_args
_chopup_args	proc near		; CODE XREF: _main+434p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	edi, [esp+3Ch+arg_4]
		mov	eax, [esp+3Ch+arg_8]
		mov	dword ptr [eax], 0
		mov	eax, [esp+3Ch+arg_C]
		mov	dword ptr [eax], 0
		mov	esi, [ebx+4]
		test	esi, esi
		jz	loc_43275C
		mov	ecx, [ebx]

loc_4325B0:				; CODE XREF: _chopup_args+20Aj
		test	esi, esi
		jle	short loc_4325D1
		xor	edx, edx
		xor	eax, eax
		nop
		lea	esi, [esi+0]

loc_4325C0:				; CODE XREF: _chopup_args+4Fj
		mov	dword ptr [ecx+edx], 0
		inc	eax
		add	edx, 4
		mov	ecx, [ebx]
		cmp	eax, esi
		jnz	short loc_4325C0

loc_4325D1:				; CODE XREF: _chopup_args+32j
		mov	al, [edi]
		xor	ebp, ebp
		test	al, al
		jz	loc_432799
		lea	esi, [esi+0]

loc_4325E0:				; CODE XREF: _chopup_args+10Cj
					; _chopup_args+160j
		cmp	al, 20h
		jz	loc_432680
		sub	eax, 9
		cmp	al, 1
		jbe	loc_432680
		mov	edx, [ebx+4]
		cmp	ebp, edx
		jge	loc_4326FA

loc_4325FE:				; CODE XREF: _chopup_args+1D0j
					; _chopup_args+1D7j
		lea	esi, [ebp+1]
		shl	ebp, 2
		mov	[ecx+ebp], edi
		mov	cl, [edi]
		cmp	cl, 27h
		jz	loc_4326A0
		cmp	cl, 22h
		jz	loc_4326A0
		test	cl, cl
		jz	short loc_43265A
		cmp	cl, 20h
		jz	loc_4326F0
		sub	ecx, 9
		cmp	cl, 1
		ja	short loc_432653
		jmp	loc_4326F0
; ---------------------------------------------------------------------------
		align 10h

loc_432640:				; CODE XREF: _chopup_args+D8j
		cmp	al, 20h
		jz	loc_4326F0
		sub	eax, 9
		cmp	al, 1
		jbe	loc_4326F0

loc_432653:				; CODE XREF: _chopup_args+AEj
		inc	edi
		mov	al, [edi]
		test	al, al
		jnz	short loc_432640

loc_43265A:				; CODE XREF: _chopup_args+9Dj
					; _chopup_args+154j
		mov	ecx, [ebx]
		mov	ebp, esi
		xchg	ax, ax

loc_432660:				; CODE XREF: _chopup_args+108j
					; _chopup_args+21Bj
		mov	eax, [esp+3Ch+arg_8]
		mov	[eax], ebp
		mov	eax, [esp+3Ch+arg_C]
		mov	[eax], ecx
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_432680:				; CODE XREF: _chopup_args+62j
					; _chopup_args+6Dj
		lea	edx, [edi+1]
		mov	al, [edi+1]
		test	al, al
		jz	short loc_432660
		mov	edi, edx
		jmp	loc_4325E0
; ---------------------------------------------------------------------------
		jmp	short loc_4326A0
; ---------------------------------------------------------------------------
		align 10h

loc_4326A0:				; CODE XREF: _chopup_args+8Cj
					; _chopup_args+95j ...
		lea	edx, [edi+1]
		add	ebp, [ebx]
		inc	dword ptr [ebp+0]
		mov	al, [edi+1]
		test	al, al
		jnz	short loc_4326C7
		jmp	short loc_4326CB
; ---------------------------------------------------------------------------
		jmp	short loc_4326C0
; ---------------------------------------------------------------------------
		align 10h

loc_4326C0:				; CODE XREF: _chopup_args+131j
					; _chopup_args+149j
		inc	edx
		mov	al, [edx]
		test	al, al
		jz	short loc_4326CB

loc_4326C7:				; CODE XREF: _chopup_args+12Dj
		cmp	cl, al
		jnz	short loc_4326C0

loc_4326CB:				; CODE XREF: _chopup_args+12Fj
					; _chopup_args+145j
		mov	byte ptr [edx],	0
		mov	al, [edx+1]

loc_4326D1:				; CODE XREF: _chopup_args+178j
		inc	edx
		test	al, al
		jz	loc_43265A
		mov	ecx, [ebx]
		mov	ebp, esi
		mov	edi, edx
		jmp	loc_4325E0
; ---------------------------------------------------------------------------
		align 10h

loc_4326F0:				; CODE XREF: _chopup_args+A2j
					; _chopup_args+B0j ...
		mov	byte ptr [edi],	0
		mov	al, [edi+1]
		mov	edx, edi
		jmp	short loc_4326D1
; ---------------------------------------------------------------------------

loc_4326FA:				; CODE XREF: _chopup_args+78j
		add	edx, 14h
		mov	[esp+3Ch+var_30], 19Ch
		mov	[esp+3Ch+var_34], offset aApps_c ; "apps.c"
		lea	esi, ds:0[edx*4]
		mov	[esp+3Ch+var_20], edx
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ecx
		call	_CRYPTO_realloc
		test	eax, eax
		jz	short loc_43278F
		mov	[ebx], eax
		mov	edx, [esp+3Ch+var_20]
		mov	[ebx+4], edx
		cmp	ebp, edx
		jge	short loc_432755
		lea	edx, ds:0[ebp*4]
		mov	ecx, eax
		xchg	ax, ax

loc_432740:				; CODE XREF: _chopup_args+1CEj
		mov	dword ptr [ecx+edx], 0
		add	edx, 4
		mov	ecx, [ebx]
		cmp	edx, esi
		jnz	short loc_432740
		jmp	loc_4325FE
; ---------------------------------------------------------------------------

loc_432755:				; CODE XREF: _chopup_args+1B3j
		mov	ecx, eax
		jmp	loc_4325FE
; ---------------------------------------------------------------------------

loc_43275C:				; CODE XREF: _chopup_args+28j
		mov	dword ptr [ebx+4], 14h
		mov	[esp+3Ch+var_34], 185h
		mov	[esp+3Ch+var_38], offset aApps_c ; "apps.c"
		mov	[esp+3Ch+var_3C], 50h
		call	_CRYPTO_malloc
		mov	[ebx], eax
		test	eax, eax
		jz	short loc_43278F
		mov	esi, [ebx+4]
		mov	ecx, eax
		jmp	loc_4325B0
; ---------------------------------------------------------------------------

loc_43278F:				; CODE XREF: _chopup_args+1A6j
					; _chopup_args+203j
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_432799:				; CODE XREF: _chopup_args+57j
		xor	ebp, ebp
		jmp	loc_432660
_chopup_args	endp


; =============== S U B	R O U T	I N E =======================================


		public _app_init
_app_init	proc near
		mov	eax, 1
		retn
_app_init	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _dump_cert_text
_dump_cert_text	proc near		; CODE XREF: _pkcs7_main+5F3p
					; _pkcs7_main+7CBp ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_1C], esi
		call	_X509_get_subject_name
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], eax
		call	_X509_NAME_oneline
		mov	edi, eax
		mov	[esp+1Ch+var_18], offset aSubject_4 ; "subject="
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_puts
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_puts
		mov	[esp+1Ch+var_1C], edi
		call	_CRYPTO_free
		mov	[esp+1Ch+var_1C], esi
		call	_X509_get_issuer_name
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], eax
		call	_X509_NAME_oneline
		mov	esi, eax
		mov	[esp+1Ch+var_18], offset aIssuer_3 ; "\nissuer="
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_puts
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_puts
		mov	[esp+1Ch+var_18], offset asc_468A22 ; "\n"
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_puts
		mov	[esp+1Ch+var_1C], esi
		call	_CRYPTO_free
		xor	eax, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
_dump_cert_text	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _setup_ui_method
_setup_ui_method proc near		; CODE XREF: _main+14Fp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		sub	esp, 1Ch
		mov	[esp+1Ch+var_1C], offset aOpensslApplica ; "OpenSSL application	user interface"
		call	_UI_create_method
		mov	ds:_ui_method, eax
		mov	[esp+1Ch+var_18], offset _ui_open
		mov	[esp+1Ch+var_1C], eax
		call	_UI_method_set_opener
		mov	[esp+1Ch+var_18], offset _ui_read
		mov	eax, ds:_ui_method
		mov	[esp+1Ch+var_1C], eax
		call	_UI_method_set_reader
		mov	[esp+1Ch+var_18], offset _ui_write
		mov	eax, ds:_ui_method
		mov	[esp+1Ch+var_1C], eax
		call	_UI_method_set_writer
		mov	[esp+1Ch+var_18], offset _ui_close
		mov	eax, ds:_ui_method
		mov	[esp+1Ch+var_1C], eax
		call	_UI_method_set_closer
		xor	eax, eax
		add	esp, 1Ch
		retn
_setup_ui_method endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _destroy_ui_method
_destroy_ui_method proc	near		; CODE XREF: _main+340p

var_1C		= dword	ptr -1Ch

		mov	eax, ds:_ui_method
		test	eax, eax
		jz	short locret_432901
		sub	esp, 1Ch
		mov	[esp+1Ch+var_1C], eax
		call	_UI_destroy_method
		mov	ds:_ui_method, 0
		add	esp, 1Ch

locret_432901:				; CODE XREF: _destroy_ui_method+7j
		retn
_destroy_ui_method endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl app_passwd(int, char *, char *, int, int)
		public _app_passwd
_app_passwd	proc near		; CODE XREF: _req_main+29Bp
					; _dgst_main+317p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_4]
		mov	ebx, [esp+3Ch+arg_8]
		test	ebx, ebx
		jz	loc_432A40
		test	ebp, ebp
		jz	loc_432A48
		mov	[esp+3Ch+var_38], ebx ;	char *
		mov	[esp+3Ch+var_3C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		setz	al
		and	eax, 0FFh
		mov	[esp+3Ch+var_28], eax

loc_432949:				; CODE XREF: _app_passwd+263j
		mov	edi, offset aPass_3 ; "pass:"
		mov	[esp+3Ch+var_24], edi
		mov	ecx, 5
		mov	esi, ebp
		repe cmpsb
		jz	loc_432AF0
		mov	edi, offset aEnv ; "env:"
		mov	ecx, 4
		mov	esi, ebp
		repe cmpsb
		setnbe	al
		setb	dl
		sub	eax, edx
		movsx	ecx, al
		test	ecx, ecx
		jz	loc_432AA0
		mov	ecx, [esp+3Ch+var_28]
		mov	edx, ebp
		mov	eax, [esp+3Ch+arg_0]
		call	_app_get_pass_part_0

loc_432991:				; CODE XREF: _app_passwd+1B3j
					; _app_passwd+1EBj
		mov	esi, [esp+3Ch+arg_C]
		mov	[esi], eax
		test	eax, eax
		jz	loc_432B00
		test	ebx, ebx
		jz	loc_432A70
		mov	edx, [esp+3Ch+var_28]
		test	edx, edx
		jnz	short loc_432A10

loc_4329AF:				; CODE XREF: _app_passwd+154j
		xor	edx, edx
		mov	ecx, 5
		mov	esi, ebx
		mov	edi, [esp+3Ch+var_24]
		repe cmpsb
		jz	short loc_432A24

loc_4329C0:				; CODE XREF: _app_passwd+112j
		mov	edi, offset aEnv ; "env:"
		mov	ecx, 4
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	ecx, al
		test	ecx, ecx
		jz	loc_432AD0
		mov	ecx, edx
		mov	edx, ebx
		mov	eax, [esp+3Ch+arg_0]
		call	_app_get_pass_part_0

loc_4329EE:				; CODE XREF: _app_passwd+11Fj
					; _app_passwd+1DBj
		mov	edx, [esp+3Ch+arg_10]
		mov	[edx], eax
		xor	ecx, ecx
		test	eax, eax
		setnz	cl

loc_4329FB:				; CODE XREF: _app_passwd+1F2j
					; _app_passwd+1FCj ...
		mov	eax, ecx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_432A10:				; CODE XREF: _app_passwd+9Dj
		mov	edx, 2
		mov	ecx, 5
		mov	esi, ebx
		mov	edi, [esp+3Ch+var_24]
		repe cmpsb
		jnz	short loc_4329C0

loc_432A24:				; CODE XREF: _app_passwd+AEj
		add	ebx, 5
		mov	[esp+3Ch+var_3C], ebx
		call	_BUF_strdup
		jmp	short loc_4329EE
; ---------------------------------------------------------------------------
		jmp	short loc_432A40
; ---------------------------------------------------------------------------
		align 10h

loc_432A40:				; CODE XREF: _app_passwd+11j
					; _app_passwd+121j
		test	ebp, ebp
		jnz	loc_432B6B

loc_432A48:				; CODE XREF: _app_passwd+19j
		mov	ecx, [esp+3Ch+arg_C]
		test	ecx, ecx
		jz	short loc_432A5A
		mov	eax, [esp+3Ch+arg_C]
		mov	dword ptr [eax], 0

loc_432A5A:				; CODE XREF: _app_passwd+13Ej
		mov	[esp+3Ch+var_24], offset aPass_3 ; "pass:"
		test	ebx, ebx
		jnz	loc_4329AF
		lea	esi, [esi+0]

loc_432A70:				; CODE XREF: _app_passwd+91j
		mov	eax, [esp+3Ch+arg_10]
		test	eax, eax
		jz	loc_432B07
		mov	eax, [esp+3Ch+arg_10]
		mov	dword ptr [eax], 0
		mov	ecx, 1
		mov	eax, ecx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_432AA0:				; CODE XREF: _app_passwd+6Cj
		mov	[esp+3Ch+var_20], ecx
		add	ebp, 4
		mov	[esp+3Ch+var_3C], ebp ;	char *
		call	_getenv
		test	eax, eax
		mov	ecx, [esp+3Ch+var_20]
		jz	loc_432B3C
		mov	[esp+3Ch+var_3C], eax
		call	_BUF_strdup
		jmp	loc_432991
; ---------------------------------------------------------------------------
		align 10h

loc_432AD0:				; CODE XREF: _app_passwd+CBj
		mov	[esp+3Ch+var_28], ecx
		add	ebx, 4
		mov	[esp+3Ch+var_3C], ebx ;	char *
		call	_getenv
		test	eax, eax
		jz	short loc_432B11
		mov	[esp+3Ch+var_3C], eax
		call	_BUF_strdup
		jmp	loc_4329EE
; ---------------------------------------------------------------------------

loc_432AF0:				; CODE XREF: _app_passwd+4Bj
		add	ebp, 5
		mov	[esp+3Ch+var_3C], ebp
		call	_BUF_strdup
		jmp	loc_432991
; ---------------------------------------------------------------------------

loc_432B00:				; CODE XREF: _app_passwd+89j
		xor	ecx, ecx
		jmp	loc_4329FB
; ---------------------------------------------------------------------------

loc_432B07:				; CODE XREF: _app_passwd+166j
		mov	ecx, 1
		jmp	loc_4329FB
; ---------------------------------------------------------------------------

loc_432B11:				; CODE XREF: _app_passwd+1D1j
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], offset aCanTReadEnviro ; "Can't read environment variable %s\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, [esp+3Ch+arg_10]
		mov	dword ptr [eax], 0
		mov	ecx, [esp+3Ch+var_28]
		jmp	loc_4329FB
; ---------------------------------------------------------------------------

loc_432B3C:				; CODE XREF: _app_passwd+1A5j
		mov	[esp+3Ch+var_28], ecx
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], offset aCanTReadEnviro ; "Can't read environment variable %s\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, [esp+3Ch+arg_C]
		mov	dword ptr [eax], 0
		mov	ecx, [esp+3Ch+var_28]
		jmp	loc_4329FB
; ---------------------------------------------------------------------------

loc_432B6B:				; CODE XREF: _app_passwd+132j
		mov	[esp+3Ch+var_28], 0
		jmp	loc_432949
_app_passwd	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _add_oid_section
_add_oid_section proc near		; CODE XREF: _req_main+385p
					; _ca_main+6D7p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_24], offset aOid_section ;	"oid_section"
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], esi
		call	_NCONF_get_string
		mov	ebx, eax
		test	eax, eax
		jz	loc_432C50
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	_NCONF_get_section
		mov	edi, eax
		test	eax, eax
		jz	loc_432C64
		xor	ebx, ebx
		jmp	short loc_432BFB
; ---------------------------------------------------------------------------
		align 10h

loc_432BD0:				; CODE XREF: _add_oid_section+85j
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], edi
		call	_sk_value
		mov	esi, eax
		mov	edx, [eax+4]
		mov	eax, [eax+8]
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	_OBJ_create
		mov	ebp, eax
		test	eax, eax
		jz	short loc_432C20
		inc	ebx

loc_432BFB:				; CODE XREF: _add_oid_section+45j
		mov	[esp+2Ch+var_2C], edi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_432BD0
		mov	ebp, 1

loc_432C0C:				; CODE XREF: _add_oid_section+FEj
		mov	eax, ebp
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_432C20:				; CODE XREF: _add_oid_section+78j
		mov	edx, [esi+8]
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aProblemCreatin ; "problem creating object %s=%s\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, ebp
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_432C50:				; CODE XREF: _add_oid_section+27j
		call	_ERR_clear_error
		mov	ebp, 1
		mov	eax, ebp
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_432C64:				; CODE XREF: _add_oid_section+3Dj
		mov	[esp+2Ch+var_24], ebx
		mov	[esp+2Ch+var_28], offset aProblemLoading ; "problem loading oid	section	%s\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	ebp, ebp
		jmp	short loc_432C0C
_add_oid_section endp


; =============== S U B	R O U T	I N E =======================================


		public _load_cert
_load_cert	proc near		; CODE XREF: _check+39p _ca_main+E12p	...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_14		= dword	ptr  18h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_10], 0
		call	_BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_432DA0
		test	edi, edi
		jz	loc_432DC0
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 6Ch
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_432D80
		cmp	esi, 1
		jz	loc_432E10

loc_432CE2:				; CODE XREF: _load_cert+189j
		cmp	esi, 4
		jz	loc_432E30
		cmp	esi, 3
		jz	loc_432EA0
		cmp	esi, 5
		jz	short loc_432D40
		mov	eax, [esp+2Ch+arg_14]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aBadInputForm_8 ; "bad	input format specified for %s\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf

loc_432D15:				; CODE XREF: _load_cert+1CBj
		mov	eax, [esp+2Ch+var_10]

loc_432D19:				; CODE XREF: _load_cert+F2j
					; _load_cert+130j ...
		test	eax, eax
		jz	loc_432ED0

loc_432D21:				; CODE XREF: _load_cert+270j
		test	ebx, ebx
		jz	short loc_432D2D
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_free

loc_432D2D:				; CODE XREF: _load_cert+A3j
		mov	eax, [esp+2Ch+var_10]
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_432D40:				; CODE XREF: _load_cert+77j
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], 0
		mov	ecx, [esp+2Ch+arg_14]
		mov	edx, ebx
		mov	eax, [esp+2Ch+arg_0]
		call	_load_pkcs12_constprop_4
		mov	eax, [esp+2Ch+var_10]
		jmp	short loc_432D19
; ---------------------------------------------------------------------------
		align 10h

loc_432D80:				; CODE XREF: _load_cert+53j
		mov	[esp+2Ch+var_20], edi
		mov	eax, [esp+2Ch+arg_14]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aErrorOpeningSS ; "Error opening %s %s\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf

loc_432DA0:				; CODE XREF: _load_cert+27j
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors
		mov	eax, [esp+2Ch+var_10]
		jmp	loc_432D19
; ---------------------------------------------------------------------------
		align 10h

loc_432DC0:				; CODE XREF: _load_cert+2Fj
		mov	[esp+2Ch+var_20], 0 ; size_t
		mov	[esp+2Ch+var_24], 4 ; int
		mov	[esp+2Ch+var_28], 0 ; char *
		mov	eax, ds:__imp___iob
		mov	[esp+2Ch+var_2C], eax ;	FILE *
		call	_setvbuf
		mov	eax, ds:__imp___iob
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 6Ah
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_ctrl
		cmp	esi, 1
		jnz	loc_432CE2
		nop

loc_432E10:				; CODE XREF: _load_cert+5Cj
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	_d2i_X509_bio
		mov	[esp+2Ch+var_10], eax
		jmp	loc_432D19
; ---------------------------------------------------------------------------
		align 10h

loc_432E30:				; CODE XREF: _load_cert+65j
		call	_NETSCAPE_X509_it
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], eax
		call	_ASN1_item_d2i_bio
		test	eax, eax
		jz	loc_432D15
		mov	edx, [eax]
		mov	edi, [edx+8]
		mov	ecx, [edx]
		cmp	ecx, 0Ch
		jg	loc_432F20

loc_432E61:				; CODE XREF: _load_cert+2A5j
		mov	esi, offset aCertificate_3 ; "certificate"
		cmp	ecx, ecx
		repe cmpsb
		jz	loc_432F00
		mov	[esp+2Ch+var_2C], eax
		call	_NETSCAPE_X509_free
		mov	[esp+2Ch+var_28], offset aErrorReadingHe ; "Error reading header on certificate\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+var_10]
		jmp	loc_432D19
; ---------------------------------------------------------------------------
		align 10h

loc_432EA0:				; CODE XREF: _load_cert+6Ej
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], offset _password_callback
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	_PEM_read_bio_X509_AUX
		mov	[esp+2Ch+var_10], eax
		jmp	loc_432D19
; ---------------------------------------------------------------------------
		align 10h

loc_432ED0:				; CODE XREF: _load_cert+9Bj
		mov	[esp+2Ch+var_28], offset aUnableToLoadCe ; "unable to load certificate\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors
		jmp	loc_432D21
; ---------------------------------------------------------------------------
		align 10h

loc_432F00:				; CODE XREF: _load_cert+1EAj
		mov	edx, [eax+4]
		mov	[esp+2Ch+var_10], edx
		mov	dword ptr [eax+4], 0
		mov	[esp+2Ch+var_2C], eax
		call	_NETSCAPE_X509_free
		mov	eax, [esp+2Ch+var_10]
		jmp	loc_432D19
; ---------------------------------------------------------------------------
		align 10h

loc_432F20:				; CODE XREF: _load_cert+1DBj
		mov	ecx, 0Ch
		jmp	loc_432E61
_load_cert	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _load_key
_load_key	proc near		; CODE XREF: _req_main+5CAp
					; _dgst_main+E4Bp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ebx, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_18], 0
		mov	eax, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_14], eax
		mov	[esp+2Ch+var_10], ebx
		test	ebx, ebx
		jz	short loc_432FB0
		cmp	esi, 7
		jnz	loc_4330AD
		mov	eax, [esp+2Ch+arg_14]
		test	eax, eax
		jz	loc_433090
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], eax
		mov	eax, ds:_ui_method
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], ebx
		mov	eax, [esp+2Ch+arg_14]
		mov	[esp+2Ch+var_2C], eax
		call	_ENGINE_load_private_key
		mov	[esp+2Ch+var_18], eax
		test	eax, eax
		jz	loc_433220

loc_432F98:				; CODE XREF: _load_key+158j
					; _load_key+178j ...
		test	eax, eax
		jz	loc_433030
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_432FB0:				; CODE XREF: _load_key+24j
		mov	edx, [esp+2Ch+arg_C]
		test	edx, edx
		jz	loc_433070
		cmp	esi, 7
		jz	loc_433070
		call	_BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_4332B1
		mov	[esp+2Ch+var_20], 0 ; size_t
		mov	[esp+2Ch+var_24], 4 ; int
		mov	[esp+2Ch+var_28], 0 ; char *
		mov	eax, ds:__imp___iob
		mov	[esp+2Ch+var_2C], eax ;	FILE *
		call	_setvbuf
		mov	eax, ds:__imp___iob
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 6Ah
		mov	[esp+2Ch+var_2C], edi
		call	_BIO_ctrl
		jmp	loc_4330E8
; ---------------------------------------------------------------------------
		align 10h

loc_433030:				; CODE XREF: _load_key+6Aj
		mov	eax, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aUnableToLoadS	; "unable to load %s\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors
		mov	eax, [esp+2Ch+var_18]
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433070:				; CODE XREF: _load_key+86j
					; _load_key+8Fj
		mov	[esp+2Ch+var_28], offset aNoKeyfileSpeci ; "no keyfile specified\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+var_18]
		jmp	loc_432F98
; ---------------------------------------------------------------------------
		align 10h

loc_433090:				; CODE XREF: _load_key+35j
		mov	[esp+2Ch+var_28], offset aNoEngineSpecif ; "no engine specified\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+var_18]
		jmp	loc_432F98
; ---------------------------------------------------------------------------

loc_4330AD:				; CODE XREF: _load_key+29j
		call	_BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_4332B1
		mov	[esp+2Ch+var_20], ebx
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 6Ch
		mov	[esp+2Ch+var_2C], edi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_433180

loc_4330E8:				; CODE XREF: _load_key+F2j
		cmp	esi, 1
		jz	short loc_433160
		cmp	esi, 3
		jz	loc_4331C0
		cmp	esi, 4
		jz	short loc_433140
		cmp	esi, 8
		jz	short loc_433140
		cmp	esi, 5
		jz	loc_433260
		cmp	esi, 0Bh
		jz	loc_4332A0
		cmp	esi, 0Ch
		jz	loc_4331F0
		mov	[esp+2Ch+var_28], offset aBadInputForm_9 ; "bad	input format specified for key file"...
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf

loc_43312F:				; CODE XREF: _load_key+22Cj
					; _load_key+244j ...
		mov	[esp+2Ch+var_2C], edi
		call	_BIO_free
		mov	eax, [esp+2Ch+var_18]
		jmp	loc_432F98
; ---------------------------------------------------------------------------

loc_433140:				; CODE XREF: _load_key+1C9j
					; _load_key+1CEj
		mov	[esp+2Ch+var_28], esi
		mov	eax, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_2C], eax
		mov	ecx, ebx
		mov	edx, edi
		mov	eax, [esp+2Ch+arg_0]
		call	_load_netscape_key
		mov	[esp+2Ch+var_18], eax
		jmp	short loc_43312F
; ---------------------------------------------------------------------------
		align 10h

loc_433160:				; CODE XREF: _load_key+1BBj
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], edi
		call	_d2i_PrivateKey_bio
		mov	[esp+2Ch+var_18], eax
		jmp	short loc_43312F
; ---------------------------------------------------------------------------
		align 10h

loc_433180:				; CODE XREF: _load_key+1B2j
		mov	[esp+2Ch+var_20], ebx
		mov	eax, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aErrorOpeningSS ; "Error opening %s %s\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors
		jmp	loc_43312F
; ---------------------------------------------------------------------------
		jmp	short loc_4331C0
; ---------------------------------------------------------------------------
		align 10h

loc_4331C0:				; CODE XREF: _load_key+1C0j
					; _load_key+281j
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], offset _password_callback
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], edi
		call	_PEM_read_bio_PrivateKey
		mov	[esp+2Ch+var_18], eax
		jmp	loc_43312F
; ---------------------------------------------------------------------------
		align 10h

loc_4331F0:				; CODE XREF: _load_key+1E5j
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset _password_callback
		mov	[esp+2Ch+var_2C], edi
		call	_b2i_PVK_bio
		mov	[esp+2Ch+var_18], eax
		jmp	loc_43312F
; ---------------------------------------------------------------------------
		jmp	short loc_433220
; ---------------------------------------------------------------------------
		align 10h

loc_433220:				; CODE XREF: _load_key+62j
					; _load_key+2E1j
		mov	eax, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aCannotLoadSFro ; "cannot load	%s from	engine\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors
		mov	eax, [esp+2Ch+var_18]
		jmp	loc_432F98
; ---------------------------------------------------------------------------
		jmp	short loc_433260
; ---------------------------------------------------------------------------
		align 10h

loc_433260:				; CODE XREF: _load_key+1D3j
					; _load_key+321j
		mov	[esp+2Ch+var_20], 0
		lea	eax, [esp+2Ch+var_18]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], offset _password_callback
		mov	ecx, [esp+2Ch+arg_18]
		mov	edx, edi
		mov	eax, [esp+2Ch+arg_0]
		call	_load_pkcs12_constprop_4
		jmp	loc_43312F
; ---------------------------------------------------------------------------
		align 10h

loc_4332A0:				; CODE XREF: _load_key+1DCj
		mov	[esp+2Ch+var_2C], edi
		call	_b2i_PrivateKey_bio
		mov	[esp+2Ch+var_18], eax
		jmp	loc_43312F
; ---------------------------------------------------------------------------

loc_4332B1:				; CODE XREF: _load_key+A6j
					; _load_key+18Ej
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors
		mov	eax, [esp+2Ch+var_18]
		jmp	loc_432F98
_load_key	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _load_pubkey
_load_pubkey	proc near		; CODE XREF: _dgst_main+69Ap
					; _rsa_main+7FBp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_4]
		mov	ebx, [esp+2Ch+arg_8]
		mov	eax, [esp+2Ch+arg_10]
		mov	[esp+2Ch+var_14], eax
		mov	[esp+2Ch+var_10], esi
		test	esi, esi
		jz	short loc_433340
		cmp	ebx, 7
		jnz	loc_4333F5
		mov	eax, [esp+2Ch+arg_14]
		test	eax, eax
		jz	loc_4333B4
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], eax
		mov	eax, ds:_ui_method
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], esi
		mov	eax, [esp+2Ch+arg_14]
		mov	[esp+2Ch+var_2C], eax
		call	_ENGINE_load_public_key
		mov	ebx, eax

loc_433326:				; CODE XREF: _load_pubkey+1A5j
		test	ebx, ebx
		jz	loc_4333D0
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433340:				; CODE XREF: _load_pubkey+1Cj
		mov	edx, [esp+2Ch+arg_C]
		test	edx, edx
		jz	loc_43357B
		cmp	ebx, 7
		jz	loc_43357B
		call	_BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_4335C9
		mov	[esp+2Ch+var_20], 0 ; size_t
		mov	[esp+2Ch+var_24], 4 ; int
		mov	[esp+2Ch+var_28], 0 ; char *
		mov	eax, ds:__imp___iob
		mov	[esp+2Ch+var_2C], eax ;	FILE *
		call	_setvbuf
		mov	eax, ds:__imp___iob
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 6Ah
		mov	[esp+2Ch+var_2C], edi
		call	_BIO_ctrl
		jmp	short loc_433430
; ---------------------------------------------------------------------------

loc_4333B4:				; CODE XREF: _load_pubkey+2Dj
		mov	[esp+2Ch+var_28], offset aNoEngineSpecif ; "no engine specified\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	bl, bl
		nop
		lea	esi, [esi+0]

loc_4333D0:				; CODE XREF: _load_pubkey+58j
					; _load_pubkey+2C1j ...
		mov	eax, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aUnableToLoadS	; "unable to load %s\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_4333F5:				; CODE XREF: _load_pubkey+21j
		call	_BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_4335C9
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 6Ch
		mov	[esp+2Ch+var_2C], edi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_433596

loc_433430:				; CODE XREF: _load_pubkey+E2j
		cmp	ebx, 1
		jz	short loc_4334A0
		cmp	ebx, 0Ah
		jz	loc_4334C0
		cmp	ebx, 9
		jz	loc_433500
		cmp	ebx, 3
		jz	loc_433530
		cmp	ebx, 4
		jz	short loc_433480
		cmp	ebx, 8
		jz	short loc_433480
		cmp	ebx, 0Bh
		jnz	loc_433560
		mov	[esp+2Ch+var_2C], edi
		call	_b2i_PublicKey_bio
		mov	ebx, eax

loc_43346D:				; CODE XREF: _load_pubkey+1CAj
					; _load_pubkey+1E2j ...
		mov	[esp+2Ch+var_2C], edi
		call	_BIO_free
		jmp	loc_433326
; ---------------------------------------------------------------------------
		align 10h

loc_433480:				; CODE XREF: _load_pubkey+183j
					; _load_pubkey+188j
		mov	[esp+2Ch+var_28], ebx
		mov	eax, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_2C], eax
		mov	ecx, esi
		mov	edx, edi
		mov	eax, [esp+2Ch+arg_0]
		call	_load_netscape_key
		mov	ebx, eax
		jmp	short loc_43346D
; ---------------------------------------------------------------------------
		align 10h

loc_4334A0:				; CODE XREF: _load_pubkey+163j
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], edi
		call	_d2i_PUBKEY_bio
		mov	ebx, eax
		jmp	short loc_43346D
; ---------------------------------------------------------------------------
		align 10h

loc_4334C0:				; CODE XREF: _load_pubkey+168j
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], edi
		call	_d2i_RSAPublicKey_bio
		mov	esi, eax
		test	eax, eax
		jz	short loc_433526

loc_4334D6:				; CODE XREF: _load_pubkey+254j
		call	_EVP_PKEY_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_4334ED
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], eax
		call	_EVP_PKEY_set1_RSA

loc_4334ED:				; CODE XREF: _load_pubkey+20Fj
		mov	[esp+2Ch+var_2C], esi
		call	_RSA_free
		jmp	loc_43346D
; ---------------------------------------------------------------------------
		align 10h

loc_433500:				; CODE XREF: _load_pubkey+171j
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], offset _password_callback
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], edi
		call	_PEM_read_bio_RSAPublicKey
		mov	esi, eax
		test	eax, eax
		jnz	short loc_4334D6

loc_433526:				; CODE XREF: _load_pubkey+204j
		xor	ebx, ebx
		jmp	loc_43346D
; ---------------------------------------------------------------------------
		align 10h

loc_433530:				; CODE XREF: _load_pubkey+17Aj
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], offset _password_callback
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], edi
		call	_PEM_read_bio_PUBKEY
		mov	ebx, eax
		jmp	loc_43346D
; ---------------------------------------------------------------------------
		align 10h

loc_433560:				; CODE XREF: _load_pubkey+18Dj
		mov	[esp+2Ch+var_28], offset aBadInputForm_9 ; "bad	input format specified for key file"...
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_43346D
; ---------------------------------------------------------------------------

loc_43357B:				; CODE XREF: _load_pubkey+76j
					; _load_pubkey+7Fj
		mov	[esp+2Ch+var_28], offset aNoKeyfileSpeci ; "no keyfile specified\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_4333D0
; ---------------------------------------------------------------------------

loc_433596:				; CODE XREF: _load_pubkey+15Aj
		mov	[esp+2Ch+var_20], esi
		mov	eax, [esp+2Ch+arg_18]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aErrorOpeningSS ; "Error opening %s %s\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		jmp	loc_43346D
; ---------------------------------------------------------------------------

loc_4335C9:				; CODE XREF: _load_pubkey+96j
					; _load_pubkey+136j
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		jmp	loc_4333D0
_load_pubkey	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _load_certs
_load_certs	proc near		; CODE XREF: _verify_main+460p
					; _verify_main+4A9p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_4]
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_20], ebx
		cmp	[esp+3Ch+arg_8], 3
		jnz	loc_4336C0
		test	ebx, ebx
		jz	loc_433760
		mov	[esp+3Ch+var_38], offset aR_2 ;	"r"
		mov	[esp+3Ch+var_3C], ebx
		call	_BIO_new_file
		mov	edi, eax
		test	eax, eax
		jz	loc_433790

loc_433624:				; CODE XREF: _load_certs+199j
		lea	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], offset _password_callback
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], edi
		call	_PEM_X509_INFO_read_bio
		mov	esi, eax
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_free
		call	_sk_new_null
		mov	edi, eax
		test	eax, eax
		jz	loc_4336F0
		xor	ebx, ebx
		mov	[esp+3Ch+var_3C], esi
		call	_sk_num
		cmp	ebx, eax
		jge	short loc_4336A8
		nop
		lea	esi, [esi+0]

loc_433670:				; CODE XREF: _load_certs+C6j
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	_sk_value
		mov	ebp, eax
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_43369B
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], edi
		call	_sk_push
		test	eax, eax
		jz	short loc_4336F0
		mov	dword ptr [ebp+0], 0

loc_43369B:				; CODE XREF: _load_certs+A2j
		inc	ebx
		mov	[esp+3Ch+var_3C], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_433670

loc_4336A8:				; CODE XREF: _load_certs+89j
		mov	[esp+3Ch+var_3C], edi
		call	_sk_num
		xor	ebx, ebx
		test	eax, eax
		setnle	bl
		jmp	short loc_4336F2
; ---------------------------------------------------------------------------
		align 10h

loc_4336C0:				; CODE XREF: _load_certs+1Cj
		mov	eax, [esp+3Ch+arg_14]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aBadInputForm_8 ; "bad	input format specified for %s\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf

loc_4336DC:				; CODE XREF: _load_certs+162j
					; _load_certs+1DCj
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4336F0:				; CODE XREF: _load_certs+77j
					; _load_certs+B2j
		xor	ebx, ebx

loc_4336F2:				; CODE XREF: _load_certs+D7j
		test	esi, esi
		jz	short loc_433706
		mov	[esp+3Ch+var_38], offset _X509_INFO_free
		mov	[esp+3Ch+var_3C], esi
		call	_sk_pop_free

loc_433706:				; CODE XREF: _load_certs+114j
		test	ebx, ebx
		jnz	short loc_433750
		mov	[esp+3Ch+var_38], offset _X509_free
		mov	[esp+3Ch+var_3C], edi
		call	_sk_pop_free
		mov	[esp+3Ch+var_34], offset aCertificates ; "certificates"
		mov	[esp+3Ch+var_38], offset aUnableToLoadS	; "unable to load %s\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		jmp	short loc_4336DC
; ---------------------------------------------------------------------------
		align 10h

loc_433750:				; CODE XREF: _load_certs+128j
		mov	eax, edi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433760:				; CODE XREF: _load_certs+24j
		mov	[esp+3Ch+var_38], 0
		mov	eax, ds:__imp___iob
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_new_fp
		mov	edi, eax
		test	eax, eax
		jnz	loc_433624
		mov	ebx, offset aStdin_2 ; "stdin"
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_433790:				; CODE XREF: _load_certs+3Ej
		mov	[esp+3Ch+var_30], ebx
		mov	eax, [esp+3Ch+arg_14]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aErrorOpeningSS ; "Error opening %s %s\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		jmp	loc_4336DC
_load_certs	endp

; ---------------------------------------------------------------------------
		jmp	short _load_crls
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _load_crls
_load_crls	proc near		; CODE XREF: _verify_main+4F0p
					; .text:004337C1j

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_4]
		mov	eax, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_20], ebx
		cmp	[esp+3Ch+arg_8], 3
		jnz	loc_4338B0
		test	ebx, ebx
		jz	loc_433950
		mov	[esp+3Ch+var_38], offset aR_2 ;	"r"
		mov	[esp+3Ch+var_3C], ebx
		call	_BIO_new_file
		mov	edi, eax
		test	eax, eax
		jz	loc_433980

loc_433814:				; CODE XREF: _load_crls+199j
		lea	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], offset _password_callback
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], edi
		call	_PEM_X509_INFO_read_bio
		mov	esi, eax
		mov	[esp+3Ch+var_3C], edi
		call	_BIO_free
		call	_sk_new_null
		mov	edi, eax
		test	eax, eax
		jz	loc_4338E0
		xor	ebx, ebx
		mov	[esp+3Ch+var_3C], esi
		call	_sk_num
		cmp	ebx, eax
		jge	short loc_433899
		nop
		lea	esi, [esi+0]

loc_433860:				; CODE XREF: _load_crls+C7j
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	_sk_value
		mov	ebp, eax
		mov	edx, [eax+4]
		test	edx, edx
		jz	short loc_43388C
		mov	[esp+3Ch+var_38], edx
		mov	[esp+3Ch+var_3C], edi
		call	_sk_push
		test	eax, eax
		jz	short loc_4338E0
		mov	dword ptr [ebp+4], 0

loc_43388C:				; CODE XREF: _load_crls+A3j
		inc	ebx
		mov	[esp+3Ch+var_3C], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_433860

loc_433899:				; CODE XREF: _load_crls+89j
		mov	[esp+3Ch+var_3C], edi
		call	_sk_num
		xor	ebx, ebx
		test	eax, eax
		setnle	bl
		jmp	short loc_4338E2
; ---------------------------------------------------------------------------
		align 10h

loc_4338B0:				; CODE XREF: _load_crls+1Cj
		mov	eax, [esp+3Ch+arg_14]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aBadInputForm_8 ; "bad	input format specified for %s\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf

loc_4338CC:				; CODE XREF: _load_crls+162j
					; _load_crls+1DCj
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4338E0:				; CODE XREF: _load_crls+77j
					; _load_crls+B3j
		xor	ebx, ebx

loc_4338E2:				; CODE XREF: _load_crls+D8j
		test	esi, esi
		jz	short loc_4338F6
		mov	[esp+3Ch+var_38], offset _X509_INFO_free
		mov	[esp+3Ch+var_3C], esi
		call	_sk_pop_free

loc_4338F6:				; CODE XREF: _load_crls+114j
		test	ebx, ebx
		jnz	short loc_433940
		mov	[esp+3Ch+var_38], offset _X509_CRL_free
		mov	[esp+3Ch+var_3C], edi
		call	_sk_pop_free
		mov	[esp+3Ch+var_34], offset aCrls ; "CRLs"
		mov	[esp+3Ch+var_38], offset aUnableToLoadS	; "unable to load %s\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		jmp	short loc_4338CC
; ---------------------------------------------------------------------------
		align 10h

loc_433940:				; CODE XREF: _load_crls+128j
		mov	eax, edi
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433950:				; CODE XREF: _load_crls+24j
		mov	[esp+3Ch+var_38], 0
		mov	eax, ds:__imp___iob
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_new_fp
		mov	edi, eax
		test	eax, eax
		jnz	loc_433814
		mov	ebx, offset aStdin_2 ; "stdin"
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_433980:				; CODE XREF: _load_crls+3Ej
		mov	[esp+3Ch+var_30], ebx
		mov	eax, [esp+3Ch+arg_14]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aErrorOpeningSS ; "Error opening %s %s\n"
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		jmp	loc_4338CC
_load_crls	endp

; ---------------------------------------------------------------------------
		jmp	short _set_cert_ex
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _set_cert_ex
_set_cert_ex	proc near		; CODE XREF: _req_main+2FFCp
					; _ca_main+F3Dp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, offset _cert_tbl_37129
		mov	edx, [esp+arg_4]
		mov	eax, [esp+arg_0]
		jmp	_set_multi_opts
_set_cert_ex	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _set_name_ex
_set_name_ex	proc near		; CODE XREF: _req_main+2AA0p
					; _ca_main+EEFp ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 8
		mov	ebx, [esp+0Ch+arg_0]
		mov	ecx, offset _ex_tbl_37134
		mov	edx, [esp+0Ch+arg_4]
		mov	eax, ebx
		call	_set_multi_opts
		test	eax, eax
		jz	short loc_433A11
		mov	eax, [ebx]
		test	eax, 0F0000h
		jnz	short loc_433A20
		or	eax, 20000h
		mov	[ebx], eax
		mov	eax, 1

loc_433A11:				; CODE XREF: _set_name_ex+1Aj
		add	esp, 8
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433A20:				; CODE XREF: _set_name_ex+23j
		mov	eax, 1
		add	esp, 8
		pop	ebx
		retn
_set_name_ex	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl set_ext_copy(int,	char *)
		public _set_ext_copy
_set_ext_copy	proc near		; CODE XREF: _ca_main+F8Bp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], offset aNone_6 ; "none"
		mov	[esp+1Ch+var_1C], esi ;	char *
		mov	ebx, ds:__imp___stricmp
		call	ebx ; __imp___stricmp
		test	eax, eax
		jnz	short loc_433A70
		mov	eax, [esp+1Ch+arg_0]
		mov	dword ptr [eax], 0
		mov	eax, 1

loc_433A5F:				; CODE XREF: _set_ext_copy+90j
					; _set_ext_copy+A2j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433A70:				; CODE XREF: _set_ext_copy+1Ej
		mov	[esp+1Ch+var_18], offset aCopy ; "copy"
		mov	[esp+1Ch+var_1C], esi ;	char *
		call	ebx ; __imp___stricmp
		test	eax, eax
		jnz	short loc_433AA0
		mov	eax, [esp+1Ch+arg_0]
		mov	dword ptr [eax], 1
		mov	eax, 1
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433AA0:				; CODE XREF: _set_ext_copy+4Fj
		mov	[esp+1Ch+var_18], offset aCopyall ; "copyall"
		mov	[esp+1Ch+var_1C], esi ;	char *
		call	ebx ; __imp___stricmp
		test	eax, eax
		jnz	short loc_433AD0
		mov	eax, [esp+1Ch+arg_0]
		mov	dword ptr [eax], 2
		mov	eax, 1
		jmp	short loc_433A5F
; ---------------------------------------------------------------------------
		align 10h

loc_433AD0:				; CODE XREF: _set_ext_copy+7Fj
		xor	eax, eax
		jmp	short loc_433A5F
_set_ext_copy	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _copy_extensions
_copy_extensions proc near		; CODE XREF: _do_body+B9Cp

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [esp+3Ch+arg_0]
		mov	eax, [esp+3Ch+arg_4]
		test	ebx, ebx
		jz	short loc_433AFF
		test	eax, eax
		jz	short loc_433AFF
		mov	edx, [esp+3Ch+arg_8]
		test	edx, edx
		jnz	short loc_433B10

loc_433AFF:				; CODE XREF: _copy_extensions+11j
					; _copy_extensions+15j
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433B10:				; CODE XREF: _copy_extensions+1Dj
		mov	[esp+3Ch+var_3C], eax
		call	_X509_REQ_get_extensions
		mov	[esp+3Ch+var_24], eax
		mov	[esp+3Ch+var_28], 0
		mov	[esp+3Ch+var_3C], eax
		call	_sk_num
		cmp	[esp+3Ch+var_28], eax
		jge	loc_433C03
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_433B40:				; CODE XREF: _copy_extensions+11Dj
		mov	eax, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_38], eax
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_value
		mov	[esp+3Ch+var_20], eax
		mov	[esp+3Ch+var_3C], eax
		call	_X509_EXTENSION_get_object
		mov	esi, eax
		mov	[esp+3Ch+var_34], 0FFFFFFFFh
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_get_ext_by_OBJ
		mov	edi, eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_433BCD
		cmp	[esp+3Ch+arg_8], 1
		jz	short loc_433BE9
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_433B90:				; CODE XREF: _copy_extensions+EBj
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_get_ext
		mov	ebp, eax
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_delete_ext
		mov	[esp+3Ch+var_3C], ebp
		call	_X509_EXTENSION_free
		mov	[esp+3Ch+var_34], 0FFFFFFFFh
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_get_ext_by_OBJ
		mov	edi, eax
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_433B90

loc_433BCD:				; CODE XREF: _copy_extensions+9Bj
		mov	[esp+3Ch+var_34], 0FFFFFFFFh
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	_X509_add_ext
		test	eax, eax
		jz	short loc_433C26

loc_433BE9:				; CODE XREF: _copy_extensions+A2j
		inc	[esp+3Ch+var_28]
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_num
		cmp	[esp+3Ch+var_28], eax
		jl	loc_433B40

loc_433C03:				; CODE XREF: _copy_extensions+50j
		mov	ebx, 1

loc_433C08:				; CODE XREF: _copy_extensions+148j
		mov	[esp+3Ch+var_38], offset _X509_EXTENSION_free
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_pop_free
		mov	eax, ebx
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_433C26:				; CODE XREF: _copy_extensions+107j
		xor	ebx, ebx
		jmp	short loc_433C08
_copy_extensions endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _print_name
_print_name	proc near		; CODE XREF: _req_main+9CDp
					; _req_main+23B3p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [esp+1Ch+arg_4]
		mov	edi, [esp+1Ch+arg_8]
		mov	esi, [esp+1Ch+arg_C]
		test	eax, eax
		jz	short loc_433C56
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_puts

loc_433C56:				; CODE XREF: _print_name+18j
		mov	eax, esi
		and	eax, 0F0000h
		cmp	eax, 40000h
		jz	short loc_433CA0
		test	esi, esi
		jz	short loc_433CC0
		xor	eax, eax

loc_433C6A:				; CODE XREF: _print_name+85j
		mov	[esp+1Ch+var_10], esi
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], ebx
		call	_X509_NAME_print_ex
		mov	[esp+1Ch+arg_4], offset	asc_468A22 ; "\n"
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	_BIO_puts
; ---------------------------------------------------------------------------
		align 10h

loc_433CA0:				; CODE XREF: _print_name+32j
		mov	[esp+1Ch+var_18], offset asc_468A22 ; "\n"
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_puts
		mov	eax, 4
		jmp	short loc_433C6A
; ---------------------------------------------------------------------------
		align 10h

loc_433CC0:				; CODE XREF: _print_name+36j
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], edi
		call	_X509_NAME_oneline
		mov	esi, eax
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_puts
		mov	[esp+1Ch+var_18], offset asc_468A22 ; "\n"
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_puts
		mov	[esp+1Ch+arg_0], esi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		jmp	_CRYPTO_free
_print_name	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _setup_verify
_setup_verify	proc near		; CODE XREF: _smime_main+1582p
					; _cms_main+1B31p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_4]
		mov	edi, [esp+2Ch+arg_8]
		call	_X509_STORE_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_433E48
		call	_X509_LOOKUP_file
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_add_lookup
		test	eax, eax
		jz	loc_433E48
		mov	[esp+2Ch+var_1C], 0
		test	esi, esi
		jz	short loc_433DD0
		mov	[esp+2Ch+var_20], 1
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], eax
		call	_X509_LOOKUP_ctrl
		test	eax, eax
		jz	loc_433E30

loc_433D76:				; CODE XREF: _setup_verify+E0j
		call	_X509_LOOKUP_hash_dir
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_add_lookup
		test	eax, eax
		jz	loc_433E48
		mov	[esp+2Ch+var_1C], 0
		test	edi, edi
		jz	short loc_433E00
		mov	[esp+2Ch+var_20], 1
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], 2
		mov	[esp+2Ch+var_2C], eax
		call	_X509_LOOKUP_ctrl
		test	eax, eax
		jz	loc_433E60

loc_433DBF:				; CODE XREF: _setup_verify+110j
		call	_ERR_clear_error
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433DD0:				; CODE XREF: _setup_verify+40j
		mov	[esp+2Ch+var_20], 3
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 1
		mov	[esp+2Ch+var_2C], eax
		call	_X509_LOOKUP_ctrl
		jmp	short loc_433D76
; ---------------------------------------------------------------------------
		align 10h

loc_433E00:				; CODE XREF: _setup_verify+89j
		mov	[esp+2Ch+var_20], 3
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 2
		mov	[esp+2Ch+var_2C], eax
		call	_X509_LOOKUP_ctrl
		jmp	short loc_433DBF
; ---------------------------------------------------------------------------
		align 10h

loc_433E30:				; CODE XREF: _setup_verify+60j
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aErrorLoading_4 ; "Error loading file %s\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf

loc_433E48:				; CODE XREF: _setup_verify+17j
					; _setup_verify+30j ...
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_free
		xor	eax, eax
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433E60:				; CODE XREF: _setup_verify+A9j
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], offset aErrorLoading_5 ; "Error loading directory %s\n"
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	short loc_433E48
_setup_verify	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _setup_engine
_setup_engine	proc near		; CODE XREF: _verify_main+358p
					; _req_main+583p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_0]
		mov	ebx, [esp+3Ch+arg_4]
		test	ebx, ebx
		jz	loc_433FF0
		mov	edi, offset aAuto ; "auto"
		mov	ecx, 5
		mov	esi, ebx
		repe cmpsb
		jz	loc_434000
		mov	[esp+3Ch+var_3C], ebx
		call	_ENGINE_by_id
		mov	esi, eax
		test	eax, eax
		jz	loc_433F70

loc_433EBD:				; CODE XREF: _setup_engine+144j
		mov	eax, [esp+3Ch+arg_8]
		test	eax, eax
		jnz	short loc_433F40

loc_433EC5:				; CODE XREF: _setup_engine+E4j
		mov	[esp+3Ch+var_28], 1
		mov	[esp+3Ch+var_2C], 0
		mov	eax, ds:_ui_method
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], offset aSet_user_inter ; "SET_USER_INTERFACE"
		mov	[esp+3Ch+var_3C], esi
		call	_ENGINE_ctrl_cmd
		mov	[esp+3Ch+var_38], 0FFFFh
		mov	[esp+3Ch+var_3C], esi
		call	_ENGINE_set_default
		test	eax, eax
		jz	loc_434020
		mov	[esp+3Ch+var_3C], esi
		call	_ENGINE_get_id
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aEngineSSet_ ;	"engine	\"%s\" set.\n"
		mov	[esp+3Ch+var_3C], ebp
		call	_BIO_printf
		mov	[esp+3Ch+var_3C], esi
		call	_ENGINE_free
		mov	eax, esi

loc_433F34:				; CODE XREF: _setup_engine+197j
					; _setup_engine+1C2j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_433F40:				; CODE XREF: _setup_engine+43j
		mov	[esp+3Ch+var_2C], 0
		mov	[esp+3Ch+var_30], ebp
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 1
		mov	[esp+3Ch+var_3C], esi
		call	_ENGINE_ctrl
		jmp	loc_433EC5
; ---------------------------------------------------------------------------
		align 10h

loc_433F70:				; CODE XREF: _setup_engine+37j
		mov	[esp+3Ch+var_3C], offset aDynamic ; "dynamic"
		call	_ENGINE_by_id
		mov	esi, eax
		test	eax, eax
		jz	short loc_433FD2
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], offset aSo_path ; "SO_PATH"
		mov	[esp+3Ch+var_3C], eax
		call	_ENGINE_ctrl_cmd_string
		test	eax, eax
		jz	short loc_433FCA
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], offset aLoad ; "LOAD"
		mov	[esp+3Ch+var_3C], esi
		call	_ENGINE_ctrl_cmd_string
		test	eax, eax
		jnz	loc_433EBD

loc_433FCA:				; CODE XREF: _setup_engine+120j
		mov	[esp+3Ch+var_3C], esi
		call	_ENGINE_free

loc_433FD2:				; CODE XREF: _setup_engine+100j
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], offset aInvalidEngineS ; "invalid engine \"%s\"\n"
		mov	[esp+3Ch+var_3C], ebp
		call	_BIO_printf
		mov	[esp+3Ch+var_3C], ebp
		call	_ERR_print_errors
		xchg	ax, ax

loc_433FF0:				; CODE XREF: _setup_engine+11j
		xor	eax, eax
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434000:				; CODE XREF: _setup_engine+25j
		mov	[esp+3Ch+var_38], offset aEnablingAutoEn ; "enabling auto ENGINE support\n"
		mov	[esp+3Ch+var_3C], ebp
		call	_BIO_printf
		call	_ENGINE_register_all_complete
		xor	eax, eax
		jmp	loc_433F34
; ---------------------------------------------------------------------------
		align 10h

loc_434020:				; CODE XREF: _setup_engine+88j
		mov	[esp+3Ch+var_38], offset aCanTUseThatEng ; "can't use that engine\n"
		mov	[esp+3Ch+var_3C], ebp
		call	_BIO_printf
		mov	[esp+3Ch+var_3C], ebp
		call	_ERR_print_errors
		mov	[esp+3Ch+var_3C], esi
		call	_ENGINE_free
		xor	eax, eax
		jmp	loc_433F34
_setup_engine	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _load_config
_load_config	proc near		; CODE XREF: _do_cmd+18Ep _do_cmd+24Ap ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		mov	eax, ds:_load_config_called_37217
		test	eax, eax
		jnz	short loc_434090
		mov	ds:_load_config_called_37217, 1
		test	ebx, ebx
		jz	short loc_4340D0

loc_43406F:				; CODE XREF: _load_config+8Aj
		call	_OPENSSL_load_builtin_modules
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], ebx
		call	_CONF_modules_load
		test	eax, eax
		jle	short loc_4340A0

loc_434090:				; CODE XREF: _load_config+Fj
					; _load_config+88j
		mov	eax, 1

loc_434095:				; CODE XREF: _load_config+72j
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4340A0:				; CODE XREF: _load_config+3Ej
		mov	[esp+1Ch+var_18], offset aErrorConfiguri ; "Error configuring OpenSSL\n"
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	_ERR_print_errors
		xor	eax, eax
		jmp	short loc_434095
; ---------------------------------------------------------------------------
		align 10h

loc_4340D0:				; CODE XREF: _load_config+1Dj
		mov	ebx, ds:_config
		test	ebx, ebx
		jz	short loc_434090
		jmp	short loc_43406F
_load_config	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _make_config_name
_make_config_name proc near		; CODE XREF: _main+560p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		call	_X509_get_default_cert_area
		mov	edi, eax
		mov	[esp+1Ch+var_1C], eax ;	char *
		call	_strlen
		lea	esi, [eax+0Dh]
		mov	[esp+1Ch+var_14], 5D6h
		mov	[esp+1Ch+var_18], offset aApps_c ; "apps.c"
		mov	[esp+1Ch+var_1C], esi
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	short loc_43414E
		mov	[esp+1Ch+var_14], esi
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], eax
		call	_BUF_strlcpy
		mov	[esp+1Ch+var_14], esi
		mov	[esp+1Ch+var_18], offset asc_468CCB ; "/"
		mov	[esp+1Ch+var_1C], ebx
		call	_BUF_strlcat
		mov	[esp+1Ch+var_14], esi
		mov	[esp+1Ch+var_18], offset aOpenssl_cnf_0	; "openssl.cnf"
		mov	[esp+1Ch+var_1C], ebx
		call	_BUF_strlcat

loc_43414E:				; CODE XREF: _make_config_name+34j
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
_make_config_name endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl index_name_cmp(char *, char *)
		public _index_name_cmp
_index_name_cmp	proc near		; CODE XREF: _do_revoke+C9p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	eax, [esp+arg_4]
		mov	eax, [eax+14h]
		mov	[esp+arg_4], eax ; char	*
		mov	eax, [esp+arg_0]
		mov	eax, [eax+14h]
		mov	[esp+arg_0], eax ; char	*
		jmp	_strcmp
_index_name_cmp	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl load_serial(char *, int, int)
		public _load_serial
_load_serial	proc near		; CODE XREF: _ca_main+1E0Ep
					; _ca_main+2E18p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [esp+2Ch+arg_0]
		mov	ebp, [esp+2Ch+arg_8]
		call	_ASN1_INTEGER_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_4342CD
		call	_BIO_s_file
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_4342C0
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_24], 3
		mov	[esp+2Ch+var_28], 6Ch
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	short loc_434240
		mov	[esp+2Ch+var_20], 400h
		mov	[esp+2Ch+var_24], offset _buf_37279
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], edi
		call	_a2i_ASN1_INTEGER
		test	eax, eax
		jz	loc_434300
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	_ASN1_INTEGER_to_BN
		mov	esi, eax
		test	eax, eax
		jz	loc_434330

loc_434213:				; CODE XREF: _load_serial+114j
					; _load_serial+12Ej
		test	ebp, ebp
		jz	short loc_43421C
		mov	[ebp+0], ebx
		xor	ebx, ebx

loc_43421C:				; CODE XREF: _load_serial+95j
					; _load_serial+175j ...
		mov	[esp+2Ch+var_2C], edi
		call	_BIO_free

loc_434224:				; CODE XREF: _load_serial+14Fj
		test	ebx, ebx
		jz	short loc_434230
		mov	[esp+2Ch+var_2C], ebx
		call	_ASN1_INTEGER_free

loc_434230:				; CODE XREF: _load_serial+A6j
		mov	eax, esi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434240:				; CODE XREF: _load_serial+53j
		mov	eax, [esp+2Ch+arg_4]
		test	eax, eax
		jz	loc_434320
		call	_BN_new
		mov	esi, eax
		test	eax, eax
		jz	loc_4342E0
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 40h
		mov	[esp+2Ch+var_2C], eax
		call	_BN_pseudo_rand
		test	eax, eax
		jnz	short loc_4342A0

loc_43427F:				; CODE XREF: _load_serial+134j
		mov	[esp+2Ch+var_28], offset aOutOfMemory_9	; "Out of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	loc_434213
; ---------------------------------------------------------------------------
		align 10h

loc_4342A0:				; CODE XREF: _load_serial+FDj
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], esi
		call	_BN_to_ASN1_INTEGER
		test	eax, eax
		jnz	loc_434213
		jmp	short loc_43427F
; ---------------------------------------------------------------------------
		align 10h

loc_4342C0:				; CODE XREF: _load_serial+2Fj
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors

loc_4342CD:				; CODE XREF: _load_serial+18j
		xor	esi, esi
		jmp	loc_434224
; ---------------------------------------------------------------------------
		align 10h

loc_4342E0:				; CODE XREF: _load_serial+D5j
		mov	[esp+2Ch+var_28], offset aOutOfMemory_9	; "Out of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	loc_43421C
; ---------------------------------------------------------------------------
		align 10h

loc_434300:				; CODE XREF: _load_serial+73j
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aUnableToLoadNu ; "unable to load number from %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		xor	esi, esi
		jmp	loc_43421C
; ---------------------------------------------------------------------------

loc_434320:				; CODE XREF: _load_serial+C6j
		mov	[esp+2Ch+var_2C], esi ;	char *
		call	_perror
		xor	esi, esi
		jmp	loc_43421C
; ---------------------------------------------------------------------------
		align 10h

loc_434330:				; CODE XREF: _load_serial+8Dj
		mov	[esp+2Ch+var_28], offset aErrorConvertin ; "error converting number from bin to	BIG"...
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	loc_43421C
_load_serial	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl save_serial(char *, char *, int, int)
		public _save_serial
_save_serial	proc near		; CODE XREF: _ca_main+2A50p
					; _ca_main+3195p ...

var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_110		= dword	ptr -110h
var_10C		= byte ptr -10Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h

		push	edi
		push	esi
		push	ebx
		sub	esp, 120h
		mov	esi, [esp+12Ch+arg_0]
		mov	ebx, [esp+12Ch+arg_4]
		mov	[esp+12Ch+var_12C], esi	; char *
		test	ebx, ebx
		jz	loc_4344B0
		call	_strlen
		mov	edi, eax
		mov	[esp+12Ch+var_12C], ebx	; char *
		call	_strlen
		lea	eax, [edi+eax+1]
		cmp	eax, 0FFh
		jg	loc_434470
		mov	[esp+12Ch+var_11C], ebx
		mov	[esp+12Ch+var_120], esi
		mov	[esp+12Ch+var_124], offset aS_S	; "%s.%s"
		mov	[esp+12Ch+var_128], 100h
		lea	edi, [esp+12Ch+var_10C]
		mov	[esp+12Ch+var_12C], edi
		call	_BIO_snprintf

loc_4343B4:				; CODE XREF: _save_serial+184j
		call	_BIO_s_file
		mov	[esp+12Ch+var_12C], eax
		call	_BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_4344E0
		mov	[esp+12Ch+var_120], edi
		mov	[esp+12Ch+var_124], 5
		mov	[esp+12Ch+var_128], 6Ch
		mov	[esp+12Ch+var_12C], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_4344A0
		mov	[esp+12Ch+var_128], 0
		mov	eax, [esp+12Ch+arg_8]
		mov	[esp+12Ch+var_12C], eax
		call	_BN_to_ASN1_INTEGER
		mov	esi, eax
		test	eax, eax
		jz	loc_434500
		mov	[esp+12Ch+var_128], eax
		mov	[esp+12Ch+var_12C], ebx
		call	_i2a_ASN1_INTEGER
		mov	[esp+12Ch+var_128], offset asc_468A22 ;	"\n"
		mov	[esp+12Ch+var_12C], ebx
		call	_BIO_puts
		mov	eax, [esp+12Ch+arg_C]
		test	eax, eax
		jz	loc_434520
		mov	eax, [esp+12Ch+arg_C]
		mov	[eax], esi
		mov	eax, 1

loc_434449:				; CODE XREF: _save_serial+15Aj
					; _save_serial+1C7j
		mov	[esp+12Ch+var_110], eax
		mov	[esp+12Ch+var_12C], ebx
		call	_BIO_free_all
		mov	eax, [esp+12Ch+var_110]

loc_434459:				; CODE XREF: _save_serial+1E5j
		add	esp, 120h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434470:				; CODE XREF: _save_serial+3Aj
					; _save_serial+16Aj
		mov	[esp+12Ch+var_128], offset aFileNameTooLon ; "file name	too long\n"
		mov	eax, ds:_bio_err
		mov	[esp+12Ch+var_12C], eax
		call	_BIO_printf
		xor	eax, eax

loc_434487:				; CODE XREF: _save_serial+19Fj
		add	esp, 120h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_4344A0
; ---------------------------------------------------------------------------
		align 10h

loc_4344A0:				; CODE XREF: _save_serial+99j
					; _save_serial+141j
		mov	[esp+12Ch+var_12C], esi	; char *
		call	_perror
		xor	eax, eax
		jmp	short loc_434449
; ---------------------------------------------------------------------------
		align 10h

loc_4344B0:				; CODE XREF: _save_serial+1Cj
		call	_strlen
		cmp	eax, 0FFh
		jg	short loc_434470
		mov	[esp+12Ch+var_124], 100h
		mov	[esp+12Ch+var_128], esi
		lea	edi, [esp+12Ch+var_10C]
		mov	[esp+12Ch+var_12C], edi
		call	_BUF_strlcpy
		jmp	loc_4343B4
; ---------------------------------------------------------------------------
		align 10h

loc_4344E0:				; CODE XREF: _save_serial+75j
		mov	eax, ds:_bio_err
		mov	[esp+12Ch+var_12C], eax
		call	_ERR_print_errors
		xor	eax, eax
		jmp	short loc_434487
; ---------------------------------------------------------------------------
		jmp	short loc_434500
; ---------------------------------------------------------------------------
		align 10h

loc_434500:				; CODE XREF: _save_serial+BAj
					; _save_serial+1A1j
		mov	[esp+12Ch+var_128], offset aErrorConvert_0 ; "error converting serial to ASN.1 format"...
		mov	eax, ds:_bio_err
		mov	[esp+12Ch+var_12C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_434449
; ---------------------------------------------------------------------------
		align 10h

loc_434520:				; CODE XREF: _save_serial+E5j
		mov	[esp+12Ch+var_12C], ebx
		call	_BIO_free_all
		mov	[esp+12Ch+var_12C], esi
		call	_ASN1_INTEGER_free
		mov	eax, 1
		jmp	loc_434459
_save_serial	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl rotate_serial(LPCSTR lpExistingFileName, char *, char *)
		public _rotate_serial
_rotate_serial	proc near		; CODE XREF: _ca_main+320Cp
					; _ca_main+3425p

var_520		= dword	ptr -520h
var_51C		= dword	ptr -51Ch
var_518		= byte ptr -518h
NewFileName	= byte ptr -418h
lpExistingFileName= dword ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 52Ch
		mov	ebx, [ebp+lpExistingFileName]
		mov	[esp], ebx	; char *
		call	_strlen
		mov	esi, eax
		mov	eax, [ebp+arg_8]
		mov	[esp], eax	; char *
		call	_strlen
		lea	edi, [eax+esi]
		mov	eax, [ebp+arg_4]
		mov	[esp], eax	; char *
		call	_strlen
		add	esi, eax
		cmp	esi, edi
		jge	short loc_43457A
		mov	esi, edi

loc_43457A:				; CODE XREF: _rotate_serial+36j
		cmp	esi, 0FEh
		jg	loc_4347A0
		mov	eax, [ebp+arg_4]
		mov	[esp+10h], eax
		mov	[esp+0Ch], ebx
		mov	dword ptr [esp+8], offset aS_S ; "%s.%s"
		mov	dword ptr [esp+4], 100h
		lea	eax, [ebp+var_518]
		mov	[esp], eax
		call	_BIO_snprintf
		mov	eax, [ebp+arg_8]
		mov	[esp+10h], eax
		mov	[esp+0Ch], ebx
		mov	dword ptr [esp+8], offset aS_S ; "%s.%s"
		mov	dword ptr [esp+4], 100h
		lea	esi, [ebp+NewFileName]
		mov	[esp], esi
		call	_BIO_snprintf
		mov	[esp+4], esi	; lpNewFileName
		mov	[esp], ebx	; lpExistingFileName
		mov	eax, ds:__imp__MoveFileA@8
		mov	[ebp+var_51C], eax
		call	eax ; __imp__MoveFileA@8
		sub	esp, 8
		mov	edi, eax
		test	eax, eax
		jz	short loc_434630

loc_4345F5:				; CODE XREF: _rotate_serial+144j
					; _rotate_serial+155j ...
		mov	[esp+4], ebx
		lea	eax, [ebp+var_518]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		mov	edi, eax
		test	eax, eax
		jz	loc_4346D0

loc_434615:				; CODE XREF: _rotate_serial+316j
					; _rotate_serial+3C7j
		mov	edi, 1

loc_43461A:				; CODE XREF: _rotate_serial+184j
					; _rotate_serial+213j ...
		mov	eax, edi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434630:				; CODE XREF: _rotate_serial+B3j
		mov	eax, ds:__imp__GetLastError@0
		mov	[ebp+var_520], eax
		call	eax ; __imp__GetLastError@0
		cmp	eax, 0B7h
		jz	loc_4347F0
		cmp	eax, 50h
		jz	loc_4347F0

loc_434651:				; CODE XREF: _rotate_serial+2DEj
		lea	ecx, [eax-2]
		cmp	ecx, 1
		jbe	loc_4348D6
		cmp	eax, 5
		mov	eax, ds:__imp___errno
		mov	[ebp+var_520], eax
		jz	loc_4347D0
		call	eax ; __imp___errno
		mov	dword ptr [eax], 16h
		mov	eax, [ebp+var_520]

loc_43467F:				; CODE XREF: _rotate_serial+29Ej
					; _rotate_serial+3AEj
		call	eax
		cmp	dword ptr [eax], 2
		jz	loc_4345F5
		mov	eax, [ebp+var_520]
		call	eax
		cmp	dword ptr [eax], 14h
		jz	loc_4345F5
		mov	[esp+0Ch], esi
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset aUnableToRename ; "unable to rename %s to %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp], offset	aReason	; "reason"
		call	_perror
		jmp	loc_43461A
; ---------------------------------------------------------------------------
		align 10h

loc_4346D0:				; CODE XREF: _rotate_serial+CFj
		mov	eax, ds:__imp__GetLastError@0
		mov	[ebp+var_520], eax
		call	eax ; __imp__GetLastError@0
		cmp	eax, 0B7h
		jz	loc_434830
		cmp	eax, 50h
		jz	loc_434830

loc_4346F1:				; CODE XREF: _rotate_serial+324j
		lea	ecx, [eax-2]
		cmp	ecx, 1
		jbe	loc_434900
		cmp	eax, 5
		jz	loc_434870
		call	ds:__imp___errno
		mov	dword ptr [eax], 16h

loc_434712:				; CODE XREF: _rotate_serial+33Cj
					; _rotate_serial+3CDj
		mov	[esp+0Ch], ebx
		lea	eax, [ebp+var_518]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnableToRename ; "unable to rename %s to %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp], offset	aReason	; "reason"
		call	_perror
		mov	[esp+4], ebx
		mov	[esp], esi
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_43461A
		mov	eax, [ebp+var_520]
		call	eax
		cmp	eax, 0B7h
		jz	loc_434890
		cmp	eax, 50h
		jz	loc_434890

loc_434775:				; CODE XREF: _rotate_serial+37Ej
		lea	edx, [eax-2]
		cmp	edx, 1
		jbe	loc_434912
		cmp	eax, 5
		jz	loc_4348C3
		call	ds:__imp___errno
		mov	dword ptr [eax], 16h
		xor	edi, edi
		jmp	loc_43461A
; ---------------------------------------------------------------------------
		align 10h

loc_4347A0:				; CODE XREF: _rotate_serial+40j
		mov	dword ptr [esp+4], offset aFileNameTooLon ; "file name too long\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	edi, edi
		mov	eax, edi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_4347D0
; ---------------------------------------------------------------------------
		align 10h

loc_4347D0:				; CODE XREF: _rotate_serial+12Bj
					; _rotate_serial+281j
		call	eax ; __imp___errno
		mov	dword ptr [eax], 0Dh
		mov	eax, [ebp+var_520]
		jmp	loc_43467F
; ---------------------------------------------------------------------------
		align 10h

loc_4347F0:				; CODE XREF: _rotate_serial+102j
					; _rotate_serial+10Bj
		mov	[esp], esi	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	edx
		test	eax, eax
		jz	short loc_434816
		mov	[esp+4], esi
		mov	[esp], ebx
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_4345F5

loc_434816:				; CODE XREF: _rotate_serial+2BCj
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_434651
; ---------------------------------------------------------------------------
		align 10h

loc_434830:				; CODE XREF: _rotate_serial+1A2j
					; _rotate_serial+1ABj
		mov	[esp], ebx	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	ecx
		test	eax, eax
		jz	short loc_43485C
		mov	[esp+4], ebx
		lea	eax, [ebp+var_518]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_434615

loc_43485C:				; CODE XREF: _rotate_serial+2FCj
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_4346F1
; ---------------------------------------------------------------------------
		align 10h

loc_434870:				; CODE XREF: _rotate_serial+1C0j
		call	ds:__imp___errno
		mov	dword ptr [eax], 0Dh
		jmp	loc_434712
; ---------------------------------------------------------------------------
		jmp	short loc_434890
; ---------------------------------------------------------------------------
		align 10h

loc_434890:				; CODE XREF: _rotate_serial+226j
					; _rotate_serial+22Fj ...
		mov	[esp], ebx	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	edx
		test	eax, eax
		jz	short loc_4348B6
		mov	[esp+4], ebx
		mov	[esp], esi
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_43461A

loc_4348B6:				; CODE XREF: _rotate_serial+35Cj
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_434775
; ---------------------------------------------------------------------------

loc_4348C3:				; CODE XREF: _rotate_serial+244j
		call	ds:__imp___errno
		mov	dword ptr [eax], 0Dh
		xor	edi, edi
		jmp	loc_43461A
; ---------------------------------------------------------------------------

loc_4348D6:				; CODE XREF: _rotate_serial+117j
		call	_WIN32_rename_part_3
		test	eax, eax
		jns	loc_4345F5
		mov	eax, ds:__imp___errno
		mov	[ebp+var_520], eax
		jmp	loc_43467F
; ---------------------------------------------------------------------------
		align 10h

loc_434900:				; CODE XREF: _rotate_serial+1B7j
		call	_WIN32_rename_part_3
		test	eax, eax
		jns	loc_434615
		jmp	loc_434712
; ---------------------------------------------------------------------------

loc_434912:				; CODE XREF: _rotate_serial+23Bj
		call	_WIN32_rename_part_3
		xor	edi, edi
		jmp	loc_43461A
_rotate_serial	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _rand_serial
_rand_serial	proc near		; CODE XREF: _req_main+28A2p
					; _x509_main+1957p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 24h
		mov	ebx, [esp+2Ch+arg_0]
		mov	esi, ebx
		test	ebx, ebx
		jz	short loc_4349A0

loc_43492F:				; CODE XREF: _rand_serial+89j
		mov	[esp+2Ch+var_20], 0
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 40h
		mov	[esp+2Ch+var_2C], esi
		call	_BN_pseudo_rand
		test	eax, eax
		jz	short loc_434980
		mov	eax, [esp+2Ch+arg_4]
		test	eax, eax
		jz	short loc_434990
		mov	eax, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	_BN_to_ASN1_INTEGER
		test	eax, eax
		setnz	al
		and	eax, 0FFh

loc_434975:				; CODE XREF: _rand_serial+62j
					; _rand_serial+75j
		test	ebx, ebx
		jz	short loc_4349B0

loc_434979:				; CODE XREF: _rand_serial+8Dj
					; _rand_serial+A0j
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434980:				; CODE XREF: _rand_serial+31j
		xor	eax, eax
		jmp	short loc_434975
; ---------------------------------------------------------------------------
		align 10h

loc_434990:				; CODE XREF: _rand_serial+39j
		mov	eax, 1
		jmp	short loc_434975
; ---------------------------------------------------------------------------
		align 10h

loc_4349A0:				; CODE XREF: _rand_serial+Dj
		call	_BN_new
		mov	esi, eax
		test	eax, eax
		jnz	short loc_43492F
		xor	eax, eax
		jmp	short loc_434979
; ---------------------------------------------------------------------------
		align 10h

loc_4349B0:				; CODE XREF: _rand_serial+57j
		mov	[esp+2Ch+var_10], eax
		mov	[esp+2Ch+var_2C], esi
		call	_BN_free
		mov	eax, [esp+2Ch+var_10]
		jmp	short loc_434979
_rand_serial	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl load_index(char *, int)
		public _load_index
_load_index	proc near		; CODE XREF: _ca_main+8B5p
					; _ca_main+FE9p ...

var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_120		= dword	ptr -120h
var_11C		= byte ptr -11Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 12Ch
		mov	esi, [esp+13Ch+arg_0]
		call	_BIO_s_file
		mov	[esp+13Ch+var_13C], eax
		call	_BIO_new
		mov	ebx, eax
		mov	[esp+13Ch+var_120], 0FFFFFFFFh
		test	eax, eax
		jz	loc_434C60
		mov	[esp+13Ch+var_130], esi
		mov	[esp+13Ch+var_134], 3
		mov	[esp+13Ch+var_138], 6Ch
		mov	[esp+13Ch+var_13C], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_434C30
		mov	[esp+13Ch+var_138], 6
		mov	[esp+13Ch+var_13C], ebx
		call	_TXT_DB_read
		mov	edi, eax
		test	eax, eax
		jz	loc_434B60
		mov	[esp+13Ch+var_130], esi
		mov	[esp+13Ch+var_134], offset aS_attr ; "%s.attr"
		mov	[esp+13Ch+var_138], 100h
		lea	ebp, [esp+13Ch+var_11C]
		mov	[esp+13Ch+var_13C], ebp
		call	_BIO_snprintf
		mov	[esp+13Ch+var_13C], 0
		call	_NCONF_new
		mov	esi, eax
		lea	eax, [esp+13Ch+var_120]
		mov	[esp+13Ch+var_134], eax
		mov	[esp+13Ch+var_138], ebp
		mov	[esp+13Ch+var_13C], esi
		call	_NCONF_load
		test	eax, eax
		jle	loc_434B40

loc_434A88:				; CODE XREF: _load_index+182j
		mov	[esp+13Ch+var_134], 6F0h
		mov	[esp+13Ch+var_138], offset aApps_c ; "apps.c"
		mov	[esp+13Ch+var_13C], 8
		call	_CRYPTO_malloc
		mov	ebp, eax
		test	eax, eax
		jz	loc_434C00
		mov	[eax+4], edi
		mov	eax, [esp+13Ch+arg_4]
		test	eax, eax
		jz	loc_434BB0
		mov	eax, [esp+13Ch+arg_4]
		mov	eax, [eax]
		mov	[ebp+0], eax

loc_434ACC:				; CODE XREF: _load_index+1E7j
		test	esi, esi
		jz	loc_434B70
		mov	[esp+13Ch+var_134], offset aUnique_subje_0 ; "unique_subject"
		mov	[esp+13Ch+var_138], 0
		mov	[esp+13Ch+var_13C], esi
		call	_NCONF_get_string
		test	eax, eax
		jz	short loc_434B18
		mov	al, [eax]
		cmp	al, 4Eh
		jz	loc_434B9C
		jg	loc_434B90
		cmp	al, 30h
		jz	loc_434B9C
		cmp	al, 46h
		jz	loc_434B9C

loc_434B10:				; CODE XREF: _load_index+1C6j
		mov	eax, 1

loc_434B15:				; CODE XREF: _load_index+1CEj
		mov	[ebp+0], eax

loc_434B18:				; CODE XREF: _load_index+11Ej
		mov	[esp+13Ch+var_13C], esi
		call	_NCONF_free

loc_434B20:				; CODE XREF: _load_index+1A2j
					; _load_index+223j
		mov	[esp+13Ch+var_13C], ebx
		call	_BIO_free_all

loc_434B28:				; CODE XREF: _load_index+29Fj
		mov	eax, ebp
		add	esp, 12Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434B40:				; CODE XREF: _load_index+B2j
		mov	eax, [esp+13Ch+var_120]
		test	eax, eax
		jg	short loc_434BC0
		mov	[esp+13Ch+var_13C], esi
		call	_NCONF_free
		xor	esi, esi
		jmp	loc_434A88
; ---------------------------------------------------------------------------
		align 10h

loc_434B60:				; CODE XREF: _load_index+68j
		xor	ebp, ebp
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_434B70:				; CODE XREF: _load_index+FEj
					; _load_index+283j
		test	ebx, ebx
		jnz	short loc_434B20
		mov	eax, ebp
		add	esp, 12Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_434B90
; ---------------------------------------------------------------------------
		align 10h

loc_434B90:				; CODE XREF: _load_index+12Aj
					; _load_index+1B1j
		cmp	al, 66h
		jz	short loc_434B9C
		cmp	al, 6Eh
		jnz	loc_434B10

loc_434B9C:				; CODE XREF: _load_index+124j
					; _load_index+132j ...
		xor	eax, eax
		jmp	loc_434B15
; ---------------------------------------------------------------------------
		align 10h

loc_434BB0:				; CODE XREF: _load_index+EAj
		mov	dword ptr [ebp+0], 1
		jmp	loc_434ACC
; ---------------------------------------------------------------------------
		align 10h

loc_434BC0:				; CODE XREF: _load_index+176j
		mov	[esp+13Ch+var_130], ebp
		mov	[esp+13Ch+var_134], eax
		mov	[esp+13Ch+var_138], offset aErrorOnLineL_5 ; "error on line %ld	of db attribute	file "...
		mov	eax, ds:_bio_err
		mov	[esp+13Ch+var_13C], eax
		call	_BIO_printf

loc_434BDD:				; CODE XREF: _load_index+258j
		test	esi, esi
		jz	short loc_434BE9
		mov	[esp+13Ch+var_13C], esi
		call	_NCONF_free

loc_434BE9:				; CODE XREF: _load_index+20Fj
		mov	[esp+13Ch+var_13C], edi
		call	_TXT_DB_free
		xor	ebp, ebp
		jmp	loc_434B20
; ---------------------------------------------------------------------------
		align 10h

loc_434C00:				; CODE XREF: _load_index+D8j
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+13Ch+var_130], eax	; FILE *
		mov	[esp+13Ch+var_134], 0Eh	; size_t
		mov	[esp+13Ch+var_138], 1 ;	size_t
		mov	[esp+13Ch+var_13C], offset aOutOfMemory_9 ; "Out of memory\n"
		call	_fwrite
		jmp	short loc_434BDD
; ---------------------------------------------------------------------------
		align 10h

loc_434C30:				; CODE XREF: _load_index+4Ej
		mov	[esp+13Ch+var_13C], esi	; char *
		call	_perror
		mov	[esp+13Ch+var_134], esi
		mov	[esp+13Ch+var_138], offset aUnableToOpenS ; "unable to open '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+13Ch+var_13C], eax
		call	_BIO_printf
		xor	ebp, ebp
		jmp	loc_434B70
; ---------------------------------------------------------------------------
		align 10h

loc_434C60:				; CODE XREF: _load_index+2Aj
		mov	eax, ds:_bio_err
		mov	[esp+13Ch+var_13C], eax
		call	_ERR_print_errors
		xor	ebp, ebp
		jmp	loc_434B28
_load_index	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _index_index
_index_index	proc near		; CODE XREF: _ca_main+8C5p
					; _ca_main+191Fp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, [esp+2Ch+arg_0]
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_1C], offset _index_serial_LHASH_COMP
		mov	[esp+2Ch+var_20], offset _index_serial_LHASH_HASH
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], 3
		mov	[esp+2Ch+var_2C], eax
		call	_TXT_DB_create_index
		mov	ebx, eax
		test	eax, eax
		jz	loc_434D50
		mov	eax, [esi]
		test	eax, eax
		jnz	short loc_434CE0

loc_434CC4:				; CODE XREF: _index_index+8Fj
		mov	ebx, 1
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_434CE0
; ---------------------------------------------------------------------------
		align 10h

loc_434CE0:				; CODE XREF: _index_index+42j
					; _index_index+51j
		mov	eax, [esi+4]
		mov	[esp+2Ch+var_1C], offset _index_name_LHASH_COMP
		mov	[esp+2Ch+var_20], offset _index_name_LHASH_HASH
		mov	[esp+2Ch+var_24], offset _index_name_qual
		mov	[esp+2Ch+var_28], 5
		mov	[esp+2Ch+var_2C], eax
		call	_TXT_DB_create_index
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_434CC4
		mov	eax, [esi+4]
		mov	ecx, [eax+18h]
		mov	edx, [eax+14h]
		mov	eax, [eax+10h]
		mov	[esp+2Ch+var_1C], ecx
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aErrorCreatingN ; "error creating name	index:(%ld,%ld,%ld)"...
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434D50:				; CODE XREF: _index_index+38j
		mov	eax, [esi+4]
		mov	ecx, [eax+18h]
		mov	edx, [eax+14h]
		mov	eax, [eax+10h]
		mov	[esp+2Ch+var_1C], ecx
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aErrorCreatingS ; "error creating serial number index:(%ld"...
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
_index_index	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl save_index(char *, char *, int)
		public _save_index
_save_index	proc near		; CODE XREF: _ca_main+1B25p
					; _ca_main+2A77p ...

var_33C		= dword	ptr -33Ch
var_338		= dword	ptr -338h
var_334		= dword	ptr -334h
var_330		= dword	ptr -330h
var_32C		= dword	ptr -32Ch
var_31C		= byte ptr -31Ch
var_21C		= byte ptr -21Ch
var_11C		= byte ptr -11Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 32Ch
		mov	ebx, [esp+33Ch+arg_0]
		call	_BIO_s_file
		mov	[esp+33Ch+var_33C], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_434FA0
		mov	[esp+33Ch+var_33C], ebx	; char *
		call	_strlen
		mov	edi, eax
		mov	eax, [esp+33Ch+arg_4]
		mov	[esp+33Ch+var_33C], eax	; char *
		call	_strlen
		add	edi, eax
		cmp	edi, 0F9h
		jg	loc_434F20
		mov	[esp+33Ch+var_330], ebx
		mov	[esp+33Ch+var_334], offset aS_attr ; "%s.attr"
		mov	[esp+33Ch+var_338], 100h
		lea	edi, [esp+33Ch+var_31C]
		lea	eax, [esp+33Ch+var_11C]
		mov	[esp+33Ch+var_33C], eax
		call	_BIO_snprintf
		mov	eax, [esp+33Ch+arg_4]
		mov	[esp+33Ch+var_32C], eax
		mov	[esp+33Ch+var_330], ebx
		mov	[esp+33Ch+var_334], offset aS_attr_S ; "%s.attr.%s"
		mov	[esp+33Ch+var_338], 100h
		lea	ebp, [esp+33Ch+var_21C]
		mov	[esp+33Ch+var_33C], ebp
		call	_BIO_snprintf
		mov	eax, [esp+33Ch+arg_4]
		mov	[esp+33Ch+var_32C], eax
		mov	[esp+33Ch+var_330], ebx
		mov	[esp+33Ch+var_334], offset aS_S	; "%s.%s"
		mov	[esp+33Ch+var_338], 100h
		mov	[esp+33Ch+var_33C], edi
		call	_BIO_snprintf
		mov	[esp+33Ch+var_330], edi
		mov	[esp+33Ch+var_334], 5
		mov	[esp+33Ch+var_338], 6Ch
		mov	[esp+33Ch+var_33C], esi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_434F60
		mov	eax, [esp+33Ch+arg_8]
		mov	eax, [eax+4]
		mov	[esp+33Ch+var_338], eax
		mov	[esp+33Ch+var_33C], esi
		call	_TXT_DB_write
		test	eax, eax
		jle	loc_434F90
		mov	[esp+33Ch+var_33C], esi
		call	_BIO_free
		call	_BIO_s_file
		mov	[esp+33Ch+var_33C], eax
		call	_BIO_new
		mov	ebx, eax
		mov	[esp+33Ch+var_330], ebp
		mov	[esp+33Ch+var_334], 5
		mov	[esp+33Ch+var_338], 6Ch
		mov	[esp+33Ch+var_33C], eax
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_434FC0
		mov	eax, [esp+33Ch+arg_8]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_434F50
		mov	eax, offset aNo_3 ; "no"

loc_434EEA:				; CODE XREF: _save_index+1C5j
		mov	[esp+33Ch+var_334], eax
		mov	[esp+33Ch+var_338], offset aUnique_subje_1 ; "unique_subject = %s\n"
		mov	[esp+33Ch+var_33C], ebx
		call	_BIO_printf
		mov	[esp+33Ch+var_33C], ebx
		call	_BIO_free
		mov	eax, 1
		add	esp, 32Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434F20:				; CODE XREF: _save_index+49j
		mov	[esp+33Ch+var_338], offset aFileNameTooLon ; "file name	too long\n"
		mov	eax, ds:_bio_err
		mov	[esp+33Ch+var_33C], eax
		call	_BIO_printf
		xor	eax, eax

loc_434F37:				; CODE XREF: _save_index+21Fj
		add	esp, 32Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434F50:				; CODE XREF: _save_index+153j
		mov	eax, offset aYes_2 ; "yes"
		jmp	short loc_434EEA
; ---------------------------------------------------------------------------
		align 10h

loc_434F60:				; CODE XREF: _save_index+E9j
		mov	[esp+33Ch+var_33C], ebx	; char *
		call	_perror
		mov	[esp+33Ch+var_334], ebx

loc_434F6C:				; CODE XREF: _save_index+24Aj
		mov	[esp+33Ch+var_338], offset aUnableToOpenS ; "unable to open '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+33Ch+var_33C], eax
		call	_BIO_printf
		xor	eax, eax
		add	esp, 32Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434F90:				; CODE XREF: _save_index+107j
		xor	eax, eax
		add	esp, 32Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_434FA0:				; CODE XREF: _save_index+22j
		mov	eax, ds:_bio_err
		mov	[esp+33Ch+var_33C], eax
		call	_ERR_print_errors
		xor	eax, eax
		jmp	short loc_434F37
; ---------------------------------------------------------------------------
		jmp	short loc_434FC0
; ---------------------------------------------------------------------------
		align 10h

loc_434FC0:				; CODE XREF: _save_index+142j
					; _save_index+221j
		lea	eax, [esp+33Ch+var_11C]
		mov	[esp+33Ch+var_33C], eax	; char *
		call	_perror
		lea	eax, [esp+33Ch+var_11C]
		mov	[esp+33Ch+var_334], eax
		jmp	short loc_434F6C
_save_index	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl rotate_index(LPCSTR lpExistingFileName, char *, char *)
		public _rotate_index
_rotate_index	proc near		; CODE XREF: _ca_main+1B4Cp
					; _ca_main+32E3p ...

var_524		= dword	ptr -524h
var_520		= dword	ptr -520h
var_51C		= dword	ptr -51Ch
var_518		= byte ptr -518h
NewFileName	= byte ptr -418h
var_318		= byte ptr -318h
FileName	= byte ptr -218h
var_118		= byte ptr -118h
lpExistingFileName= dword ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 52Ch
		mov	ebx, [ebp+lpExistingFileName]
		mov	[esp], ebx	; char *
		call	_strlen
		mov	esi, eax
		mov	eax, [ebp+arg_8]
		mov	[esp], eax	; char *
		call	_strlen
		lea	edi, [eax+esi]
		mov	eax, [ebp+arg_4]
		mov	[esp], eax	; char *
		call	_strlen
		add	esi, eax
		cmp	esi, edi
		jge	short loc_43501A
		mov	esi, edi

loc_43501A:				; CODE XREF: _rotate_index+36j
		cmp	esi, 0F9h
		jg	loc_4352C0
		mov	[esp+0Ch], ebx
		mov	dword ptr [esp+8], offset aS_attr ; "%s.attr"
		mov	dword ptr [esp+4], 100h
		lea	edi, [ebp+var_118]
		mov	[esp], edi
		call	_BIO_snprintf
		mov	eax, [ebp+arg_4]
		mov	[esp+10h], eax
		mov	[esp+0Ch], ebx
		mov	dword ptr [esp+8], offset aS_attr_S ; "%s.attr.%s"
		mov	dword ptr [esp+4], 100h
		lea	eax, [ebp+var_318]
		mov	[esp], eax
		call	_BIO_snprintf
		mov	eax, [ebp+arg_4]
		mov	[esp+10h], eax
		mov	[esp+0Ch], ebx
		mov	dword ptr [esp+8], offset aS_S ; "%s.%s"
		mov	dword ptr [esp+4], 100h
		lea	eax, [ebp+var_518]
		mov	[esp], eax
		call	_BIO_snprintf
		mov	eax, [ebp+arg_8]
		mov	[esp+10h], eax
		mov	[esp+0Ch], ebx
		mov	dword ptr [esp+8], offset aS_S ; "%s.%s"
		mov	dword ptr [esp+4], 100h
		lea	eax, [ebp+NewFileName]
		mov	[esp], eax
		call	_BIO_snprintf
		mov	eax, [ebp+arg_8]
		mov	[esp+10h], eax
		mov	[esp+0Ch], ebx
		mov	dword ptr [esp+8], offset aS_attr_S ; "%s.attr.%s"
		mov	dword ptr [esp+4], 100h
		lea	eax, [ebp+FileName]
		mov	[esp], eax
		call	_BIO_snprintf
		lea	eax, [ebp+NewFileName]
		mov	[esp+4], eax	; lpNewFileName
		mov	[esp], ebx	; lpExistingFileName
		mov	eax, ds:__imp__MoveFileA@8
		mov	[ebp+var_51C], eax
		call	eax ; __imp__MoveFileA@8
		sub	esp, 8
		mov	esi, eax
		test	eax, eax
		jz	short loc_435180

loc_43510F:				; CODE XREF: _rotate_index+1F4j
					; _rotate_index+205j ...
		mov	[esp+4], ebx
		lea	eax, [ebp+var_518]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jz	loc_435220

loc_43512D:				; CODE XREF: _rotate_index+3E6j
					; _rotate_index+917j
		lea	eax, [ebp+FileName]
		mov	[esp+4], eax
		mov	[esp], edi
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jz	loc_4353E0

loc_43514B:				; CODE XREF: _rotate_index+454j
					; _rotate_index+45Fj ...
		mov	[esp+4], edi
		lea	eax, [ebp+var_318]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jz	loc_435500

loc_435169:				; CODE XREF: _rotate_index+676j
					; _rotate_index+957j
		mov	esi, 1

loc_43516E:				; CODE XREF: _rotate_index+23Aj
					; _rotate_index+34Dj ...
		mov	eax, esi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_435180:				; CODE XREF: _rotate_index+12Dj
		mov	eax, ds:__imp__GetLastError@0
		mov	[ebp+var_520], eax
		call	eax ; __imp__GetLastError@0
		cmp	eax, 0B7h
		jz	loc_435360
		cmp	eax, 50h
		jz	loc_435360

loc_4351A1:				; CODE XREF: _rotate_index+3BAj
		lea	ecx, [eax-2]
		cmp	ecx, 1
		jbe	loc_4358D1
		cmp	eax, 5
		mov	eax, ds:__imp___errno
		mov	[ebp+var_524], eax
		jz	loc_435340
		call	eax ; __imp___errno
		mov	dword ptr [eax], 16h
		mov	eax, [ebp+var_524]

loc_4351CF:				; CODE XREF: _rotate_index+36Ej
					; _rotate_index+909j
		call	eax
		cmp	dword ptr [eax], 2
		jz	loc_43510F
		mov	eax, [ebp+var_524]
		call	eax
		cmp	dword ptr [eax], 14h
		jz	loc_43510F
		lea	eax, [ebp+NewFileName]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset aUnableToRename ; "unable to rename %s to %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp], offset	aReason	; "reason"
		call	_perror
		jmp	loc_43516E
; ---------------------------------------------------------------------------
		align 10h

loc_435220:				; CODE XREF: _rotate_index+147j
		mov	eax, ds:__imp__GetLastError@0
		mov	[ebp+var_520], eax
		call	eax ; __imp__GetLastError@0
		cmp	eax, 0B7h
		jz	loc_4353A0
		cmp	eax, 50h
		jz	loc_4353A0

loc_435241:				; CODE XREF: _rotate_index+3F4j
		lea	edx, [eax-2]
		cmp	edx, 1
		jbe	loc_4358F0
		cmp	eax, 5
		jz	loc_435670
		call	ds:__imp___errno
		mov	dword ptr [eax], 16h

loc_435262:				; CODE XREF: _rotate_index+69Cj
					; _rotate_index+91Dj
		mov	[esp+0Ch], ebx
		lea	eax, [ebp+var_518]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnableToRename ; "unable to rename %s to %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp], offset	aReason	; "reason"
		call	_perror

loc_435291:				; CODE XREF: _rotate_index+5C7j
					; _rotate_index+60Aj ...
		mov	[esp+4], ebx
		lea	eax, [ebp+NewFileName]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		mov	esi, eax
		test	eax, eax
		jz	short loc_4352F0

loc_4352AD:				; CODE XREF: _rotate_index+4CCj
					; _rotate_index+6D6j ...
		xor	esi, esi

loc_4352AF:				; CODE XREF: _rotate_index+969j
		mov	eax, esi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4352C0:				; CODE XREF: _rotate_index+40j
		mov	dword ptr [esp+4], offset aFileNameTooLon ; "file name too long\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	esi, esi
		mov	eax, esi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_4352F0
; ---------------------------------------------------------------------------
		align 10h

loc_4352F0:				; CODE XREF: _rotate_index+2CBj
					; _rotate_index+301j
		mov	eax, [ebp+var_520]
		call	eax
		cmp	eax, 0B7h
		jz	loc_435690
		cmp	eax, 50h
		jz	loc_435690

loc_43530C:				; CODE XREF: _rotate_index+6E4j
		lea	ecx, [eax-2]
		cmp	ecx, 1
		jbe	loc_435942
		cmp	eax, 5
		jz	loc_435750
		call	ds:__imp___errno
		mov	dword ptr [eax], 16h
		jmp	loc_43516E
; ---------------------------------------------------------------------------
		align 10h

loc_435340:				; CODE XREF: _rotate_index+1DBj
		call	eax ; __imp___errno
		mov	dword ptr [eax], 0Dh
		mov	eax, [ebp+var_524]
		jmp	loc_4351CF
; ---------------------------------------------------------------------------
		align 10h

loc_435360:				; CODE XREF: _rotate_index+1B2j
					; _rotate_index+1BBj
		lea	eax, [ebp+NewFileName]
		mov	[esp], eax	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	edx
		test	eax, eax
		jz	short loc_435392
		lea	eax, [ebp+NewFileName]
		mov	[esp+4], eax
		mov	[esp], ebx
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_43510F

loc_435392:				; CODE XREF: _rotate_index+392j
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_4351A1
; ---------------------------------------------------------------------------
		align 10h

loc_4353A0:				; CODE XREF: _rotate_index+252j
					; _rotate_index+25Bj
		mov	[esp], ebx	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	ecx
		test	eax, eax
		jz	short loc_4353CC
		mov	[esp+4], ebx
		lea	eax, [ebp+var_518]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_43512D

loc_4353CC:				; CODE XREF: _rotate_index+3CCj
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_435241
; ---------------------------------------------------------------------------
		align 10h

loc_4353E0:				; CODE XREF: _rotate_index+165j
		mov	eax, ds:__imp__GetLastError@0
		mov	[ebp+var_520], eax
		call	eax ; __imp__GetLastError@0
		cmp	eax, 0B7h
		jz	loc_4355F0
		cmp	eax, 50h
		jz	loc_4355F0

loc_435401:				; CODE XREF: _rotate_index+64Aj
		lea	edx, [eax-2]
		cmp	edx, 1
		jbe	loc_435910
		cmp	eax, 5
		mov	eax, ds:__imp___errno
		mov	[ebp+var_524], eax
		jz	loc_4356D0
		call	eax ; __imp___errno
		mov	dword ptr [eax], 16h
		mov	esi, [ebp+var_524]

loc_43542F:				; CODE XREF: _rotate_index+6FEj
					; _rotate_index+94Aj
		call	esi
		cmp	dword ptr [eax], 2
		jz	loc_43514B
		call	esi
		cmp	dword ptr [eax], 14h
		jz	loc_43514B
		lea	eax, [ebp+FileName]
		mov	[esp+0Ch], eax
		mov	[esp+8], edi
		mov	dword ptr [esp+4], offset aUnableToRename ; "unable to rename %s to %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp], offset	aReason	; "reason"
		call	_perror
		lea	eax, [ebp+var_518]
		mov	[esp+4], eax
		mov	[esp], ebx
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jz	loc_4357D9

loc_435492:				; CODE XREF: _rotate_index+838j
					; _rotate_index+8C4j ...
		mov	[esp+4], ebx
		lea	eax, [ebp+NewFileName]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		mov	esi, eax
		test	eax, eax
		jnz	loc_4352AD
		mov	eax, [ebp+var_520]
		call	eax
		cmp	eax, 0B7h
		jz	loc_43583F
		cmp	eax, 50h
		jz	loc_43583F

loc_4354CE:				; CODE XREF: _rotate_index+893j
		lea	ecx, [eax-2]
		cmp	ecx, 1
		jbe	loc_435942
		cmp	eax, 5
		mov	eax, [ebp+var_524]
		jz	loc_4358C4
		call	eax
		mov	dword ptr [eax], 16h
		jmp	loc_43516E
; ---------------------------------------------------------------------------
		align 10h

loc_435500:				; CODE XREF: _rotate_index+183j
		mov	eax, ds:__imp__GetLastError@0
		mov	[ebp+var_520], eax
		call	eax ; __imp__GetLastError@0
		cmp	eax, 0B7h
		jz	loc_435630
		cmp	eax, 50h
		jz	loc_435630

loc_435521:				; CODE XREF: _rotate_index+684j
		lea	edx, [eax-2]
		cmp	edx, 1
		jbe	loc_435930
		cmp	eax, 5
		jz	loc_4356F0
		call	ds:__imp___errno
		mov	dword ptr [eax], 16h

loc_435542:				; CODE XREF: _rotate_index+71Cj
					; _rotate_index+95Dj
		mov	[esp+0Ch], edi
		lea	eax, [ebp+var_318]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnableToRename ; "unable to rename %s to %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	dword ptr [esp], offset	aReason	; "reason"
		call	_perror
		mov	[esp+4], edi
		lea	eax, [ebp+FileName]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jz	loc_435710

loc_43558F:				; CODE XREF: _rotate_index+769j
					; _rotate_index+7E6j ...
		lea	eax, [ebp+var_518]
		mov	[esp+4], eax
		mov	[esp], ebx
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_435291
		mov	eax, [ebp+var_520]
		call	eax
		cmp	eax, 0B7h
		jz	loc_435761
		cmp	eax, 50h
		jz	loc_435761

loc_4355C9:				; CODE XREF: _rotate_index+7BBj
		lea	edx, [eax-2]
		cmp	edx, 1
		jbe	loc_43594E
		cmp	eax, 5
		jz	loc_43582E
		call	ds:__imp___errno
		mov	dword ptr [eax], 16h
		jmp	loc_435291
; ---------------------------------------------------------------------------
		align 10h

loc_4355F0:				; CODE XREF: _rotate_index+412j
					; _rotate_index+41Bj
		lea	eax, [ebp+FileName]
		mov	[esp], eax	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	edx
		test	eax, eax
		jz	short loc_435622
		lea	eax, [ebp+FileName]
		mov	[esp+4], eax
		mov	[esp], edi
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_43514B

loc_435622:				; CODE XREF: _rotate_index+622j
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_435401
; ---------------------------------------------------------------------------
		align 10h

loc_435630:				; CODE XREF: _rotate_index+532j
					; _rotate_index+53Bj
		mov	[esp], edi	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	edx
		test	eax, eax
		jz	short loc_43565C
		mov	[esp+4], edi
		lea	eax, [ebp+var_318]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_435169

loc_43565C:				; CODE XREF: _rotate_index+65Cj
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_435521
; ---------------------------------------------------------------------------
		align 10h

loc_435670:				; CODE XREF: _rotate_index+270j
		call	ds:__imp___errno
		mov	dword ptr [eax], 0Dh
		jmp	loc_435262
; ---------------------------------------------------------------------------
		jmp	short loc_435690
; ---------------------------------------------------------------------------
		align 10h

loc_435690:				; CODE XREF: _rotate_index+31Dj
					; _rotate_index+326j ...
		mov	[esp], ebx	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	edx
		test	eax, eax
		jz	short loc_4356BC
		mov	[esp+4], ebx
		lea	eax, [ebp+NewFileName]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_4352AD

loc_4356BC:				; CODE XREF: _rotate_index+6BCj
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_43530C
; ---------------------------------------------------------------------------
		align 10h

loc_4356D0:				; CODE XREF: _rotate_index+43Bj
		call	eax ; __imp___errno
		mov	dword ptr [eax], 0Dh
		mov	esi, [ebp+var_524]
		jmp	loc_43542F
; ---------------------------------------------------------------------------
		align 10h

loc_4356F0:				; CODE XREF: _rotate_index+550j
		call	ds:__imp___errno
		mov	dword ptr [eax], 0Dh
		jmp	loc_435542
; ---------------------------------------------------------------------------
		jmp	short loc_435710
; ---------------------------------------------------------------------------
		align 10h

loc_435710:				; CODE XREF: _rotate_index+5A9j
					; _rotate_index+721j
		mov	eax, [ebp+var_520]
		call	eax
		cmp	eax, 0B7h
		jz	loc_4357A0
		cmp	eax, 50h
		jz	short loc_4357A0

loc_435728:				; CODE XREF: _rotate_index+7F4j
		lea	edx, [eax-2]
		cmp	edx, 1
		jbe	loc_435958
		cmp	eax, 5
		jz	loc_43581D
		call	ds:__imp___errno
		mov	dword ptr [eax], 16h
		jmp	loc_43558F
; ---------------------------------------------------------------------------
		align 10h

loc_435750:				; CODE XREF: _rotate_index+33Bj
		call	ds:__imp___errno
		mov	dword ptr [eax], 0Dh
		jmp	loc_43516E
; ---------------------------------------------------------------------------

loc_435761:				; CODE XREF: _rotate_index+5DAj
					; _rotate_index+5E3j
		lea	eax, [ebp+var_518]
		mov	[esp], eax	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	ecx
		test	eax, eax
		jz	short loc_435793
		lea	eax, [ebp+var_518]
		mov	[esp+4], eax
		mov	[esp], ebx
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_435291

loc_435793:				; CODE XREF: _rotate_index+793j
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_4355C9
; ---------------------------------------------------------------------------

loc_4357A0:				; CODE XREF: _rotate_index+73Dj
					; _rotate_index+746j
		mov	[esp], edi	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	esi
		test	eax, eax
		jz	short loc_4357CC
		mov	[esp+4], edi
		lea	eax, [ebp+FileName]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_43558F

loc_4357CC:				; CODE XREF: _rotate_index+7CCj
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_435728
; ---------------------------------------------------------------------------

loc_4357D9:				; CODE XREF: _rotate_index+4ACj
		mov	eax, [ebp+var_520]
		call	eax
		cmp	eax, 0B7h
		jz	loc_435878
		cmp	eax, 50h
		jz	loc_435878

loc_4357F5:				; CODE XREF: _rotate_index+8D2j
		lea	edx, [eax-2]
		cmp	edx, 1
		jbe	loc_435962
		cmp	eax, 5
		mov	eax, [ebp+var_524]
		jz	loc_4358B7
		call	eax
		mov	dword ptr [eax], 16h
		jmp	loc_435492
; ---------------------------------------------------------------------------

loc_43581D:				; CODE XREF: _rotate_index+757j
		call	ds:__imp___errno
		mov	dword ptr [eax], 0Dh
		jmp	loc_43558F
; ---------------------------------------------------------------------------

loc_43582E:				; CODE XREF: _rotate_index+5F8j
		call	ds:__imp___errno
		mov	dword ptr [eax], 0Dh
		jmp	loc_435291
; ---------------------------------------------------------------------------

loc_43583F:				; CODE XREF: _rotate_index+4DFj
					; _rotate_index+4E8j
		mov	[esp], ebx	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	ecx
		test	eax, eax
		jz	short loc_43586B
		mov	[esp+4], ebx
		lea	eax, [ebp+NewFileName]
		mov	[esp], eax
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_4352AD

loc_43586B:				; CODE XREF: _rotate_index+86Bj
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_4354CE
; ---------------------------------------------------------------------------

loc_435878:				; CODE XREF: _rotate_index+806j
					; _rotate_index+80Fj
		lea	eax, [ebp+var_518]
		mov	[esp], eax	; lpFileName
		call	ds:__imp__DeleteFileA@4
		push	esi
		test	eax, eax
		jz	short loc_4358AA
		lea	eax, [ebp+var_518]
		mov	[esp+4], eax
		mov	[esp], ebx
		call	[ebp+var_51C]
		sub	esp, 8
		test	eax, eax
		jnz	loc_435492

loc_4358AA:				; CODE XREF: _rotate_index+8AAj
		mov	eax, [ebp+var_520]
		call	eax
		jmp	loc_4357F5
; ---------------------------------------------------------------------------

loc_4358B7:				; CODE XREF: _rotate_index+82Aj
		call	eax
		mov	dword ptr [eax], 0Dh
		jmp	loc_435492
; ---------------------------------------------------------------------------

loc_4358C4:				; CODE XREF: _rotate_index+503j
		call	eax
		mov	dword ptr [eax], 0Dh
		jmp	loc_43516E
; ---------------------------------------------------------------------------

loc_4358D1:				; CODE XREF: _rotate_index+1C7j
		call	_WIN32_rename_part_3
		test	eax, eax
		jns	loc_43510F
		mov	eax, ds:__imp___errno
		mov	[ebp+var_524], eax
		jmp	loc_4351CF
; ---------------------------------------------------------------------------
		align 10h

loc_4358F0:				; CODE XREF: _rotate_index+267j
		call	_WIN32_rename_part_3
		test	eax, eax
		jns	loc_43512D
		jmp	loc_435262
; ---------------------------------------------------------------------------
		align 10h

loc_435910:				; CODE XREF: _rotate_index+427j
		call	_WIN32_rename_part_3
		test	eax, eax
		jns	loc_43514B
		mov	eax, ds:__imp___errno
		mov	[ebp+var_524], eax
		mov	esi, eax
		jmp	loc_43542F
; ---------------------------------------------------------------------------
		align 10h

loc_435930:				; CODE XREF: _rotate_index+547j
		call	_WIN32_rename_part_3
		test	eax, eax
		jns	loc_435169
		jmp	loc_435542
; ---------------------------------------------------------------------------

loc_435942:				; CODE XREF: _rotate_index+332j
					; _rotate_index+4F4j
		call	_WIN32_rename_part_3
		xor	esi, esi
		jmp	loc_4352AF
; ---------------------------------------------------------------------------

loc_43594E:				; CODE XREF: _rotate_index+5EFj
		call	_WIN32_rename_part_3
		jmp	loc_435291
; ---------------------------------------------------------------------------

loc_435958:				; CODE XREF: _rotate_index+74Ej
		call	_WIN32_rename_part_3
		jmp	loc_43558F
; ---------------------------------------------------------------------------

loc_435962:				; CODE XREF: _rotate_index+81Bj
		call	_WIN32_rename_part_3
		jmp	loc_435492
_rotate_index	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _free_index
_free_index	proc near		; CODE XREF: _ca_main+439p
					; _ocsp_main+183p ...

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		test	ebx, ebx
		jz	short loc_4359A0
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_43598B
		mov	[esp+1Ch+var_1C], eax
		call	_TXT_DB_free

loc_43598B:				; CODE XREF: _free_index+11j
		mov	[esp+1Ch+arg_0], ebx
		add	esp, 18h
		pop	ebx
		jmp	_CRYPTO_free
; ---------------------------------------------------------------------------
		align 10h

loc_4359A0:				; CODE XREF: _free_index+Aj
		add	esp, 18h
		pop	ebx
		retn
_free_index	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _parse_yesno
_parse_yesno	proc near		; CODE XREF: _ca_main+7F2p

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	edx, [esp+arg_0]
		mov	eax, [esp+arg_4]
		test	edx, edx
		jz	short locret_4359E5 ; jumptable	004359CC default case
		mov	dl, [edx]
		sub	edx, 30h
		cmp	dl, 49h		; switch 74 cases
		ja	short locret_4359E5 ; jumptable	004359CC default case
		and	edx, 0FFh
		jmp	ds:off_468E6C[edx*4] ; switch jump
; ---------------------------------------------------------------------------
		align 10h

loc_4359E0:				; CODE XREF: _parse_yesno+1Cj
					; DATA XREF: .rdata:off_468E6Co
		mov	eax, 1		; jumptable 004359CC cases 1,36,41,68,73

locret_4359E5:				; CODE XREF: _parse_yesno+Aj
					; _parse_yesno+14j ...
		retn			; jumptable 004359CC default case
; ---------------------------------------------------------------------------
		align 10h

loc_4359F0:				; CODE XREF: _parse_yesno+1Cj
					; DATA XREF: .rdata:off_468E6Co
		xor	eax, eax	; jumptable 004359CC cases 0,22,30,54,62
		retn
_parse_yesno	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl parse_name(char *, int, int)
		public _parse_name
_parse_name	proc near		; CODE XREF: _build_subject+16p
					; _do_body+93p

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	edi, [esp+4Ch+arg_0]
		mov	[esp+4Ch+var_4C], edi ;	char *
		call	_strlen
		lea	ebx, [eax+1]
		mov	[esp+4Ch+var_44], 7EEh
		mov	[esp+4Ch+var_48], offset aApps_c ; "apps.c"
		mov	[esp+4Ch+var_4C], ebx
		call	_CRYPTO_malloc
		mov	ebp, eax
		shr	ebx, 1
		lea	esi, ds:4[ebx*4]
		mov	[esp+4Ch+var_44], 7F0h
		mov	[esp+4Ch+var_48], offset aApps_c ; "apps.c"
		mov	[esp+4Ch+var_4C], esi
		call	_CRYPTO_malloc
		mov	ebx, eax
		mov	[esp+4Ch+var_44], 7F1h
		mov	[esp+4Ch+var_48], offset aApps_c ; "apps.c"
		mov	[esp+4Ch+var_4C], esi
		call	_CRYPTO_malloc
		mov	[esp+4Ch+var_28], eax
		mov	[esp+4Ch+var_44], 7F2h
		mov	[esp+4Ch+var_48], offset aApps_c ; "apps.c"
		mov	[esp+4Ch+var_4C], esi
		call	_CRYPTO_malloc
		mov	esi, eax
		test	ebp, ebp
		jz	loc_435D80
		test	ebx, ebx
		jz	loc_435D80
		mov	eax, [esp+4Ch+var_28]
		test	eax, eax
		jz	loc_435DC3
		test	esi, esi
		jz	loc_435DE9
		cmp	byte ptr [edi],	2Fh
		jz	short loc_435B10
		mov	[esp+4Ch+var_48], offset aSubjectDoesNot ; "Subject does not start with	'/'.\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		xor	edi, edi

loc_435AC9:				; CODE XREF: _parse_name+175j
					; _parse_name+20Aj ...
		mov	[esp+4Ch+var_4C], edi
		call	_X509_NAME_free

loc_435AD1:				; CODE XREF: _parse_name+3ADj
					; _parse_name+40Aj
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	_CRYPTO_free

loc_435ADD:				; CODE XREF: _parse_name+3A7j
		test	ebx, ebx
		jz	short loc_435AE9

loc_435AE1:				; CODE XREF: _parse_name+3E4j
		mov	[esp+4Ch+var_4C], ebx
		call	_CRYPTO_free

loc_435AE9:				; CODE XREF: _parse_name+DFj
		test	esi, esi
		jz	short loc_435AF5
		mov	[esp+4Ch+var_4C], esi
		call	_CRYPTO_free

loc_435AF5:				; CODE XREF: _parse_name+EBj
		test	ebp, ebp
		jz	loc_435D20
		mov	[esp+4Ch+var_4C], ebp
		call	_CRYPTO_free
		xor	eax, eax

loc_435B07:				; CODE XREF: _parse_name+45Ej
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_435B10:				; CODE XREF: _parse_name+B0j
		lea	edx, [edi+1]
		mov	dword ptr [esi], 0
		cmp	byte ptr [edi+1], 0
		jz	loc_435E63
		mov	eax, ebp
		mov	[esp+4Ch+var_2C], 0

loc_435B2D:				; CODE XREF: _parse_name+1FBj
					; _parse_name+34Aj
		mov	edi, [esp+4Ch+var_2C]
		mov	[ebx+edi*4], eax
		lea	ecx, [eax+1]
		lea	edi, [ecx-1]
		mov	al, [edx]
		test	al, al
		jz	short loc_435B56

loc_435B40:				; CODE XREF: _parse_name+154j
		cmp	al, 5Ch
		jz	short loc_435B80
		cmp	al, 3Dh
		jz	short loc_435BA0
		inc	edx
		mov	[ecx-1], al
		inc	ecx

loc_435B4D:				; CODE XREF: _parse_name+192j
		lea	edi, [ecx-1]
		mov	al, [edx]
		test	al, al
		jnz	short loc_435B40

loc_435B56:				; CODE XREF: _parse_name+13Ej
					; _parse_name+1AAj
		mov	eax, [esp+4Ch+var_2C]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aEndOfStringEnc ; "end	of string encountered while process"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_435AC9
; ---------------------------------------------------------------------------
		align 10h

loc_435B80:				; CODE XREF: _parse_name+142j
		mov	al, [edx+1]
		test	al, al
		jz	loc_435D60
		add	edx, 2
		mov	[ecx-1], al
		inc	ecx
		jmp	short loc_435B4D
; ---------------------------------------------------------------------------
		align 10h

loc_435BA0:				; CODE XREF: _parse_name+146j
		mov	eax, edx
		inc	edx
		mov	byte ptr [edi],	0
		cmp	byte ptr [eax+1], 0
		jz	short loc_435B56
		mov	eax, [esp+4Ch+var_28]
		mov	edi, [esp+4Ch+var_2C]
		mov	[eax+edi*4], ecx
		inc	ecx
		mov	edi, [esp+4Ch+arg_8]
		test	edi, edi
		jnz	loc_435CD2
		lea	edi, [ecx-1]
		mov	al, [edx]
		test	al, al
		jz	short loc_435BEE
		lea	esi, [esi+0]

loc_435BD0:				; CODE XREF: _parse_name+1ECj
		cmp	al, 5Ch
		jz	loc_435D00
		cmp	al, 2Fh
		jz	loc_435D30
		inc	edx
		mov	[ecx-1], al
		inc	ecx

loc_435BE5:				; CODE XREF: _parse_name+30Ej
		lea	edi, [ecx-1]
		mov	al, [edx]
		test	al, al
		jnz	short loc_435BD0

loc_435BEE:				; CODE XREF: _parse_name+1CBj
					; _parse_name+2D9j ...
		lea	eax, [edi+1]
		mov	byte ptr [edi],	0
		inc	[esp+4Ch+var_2C]
		cmp	byte ptr [edx],	0
		jnz	loc_435B2D

loc_435C01:				; CODE XREF: _parse_name+350j
		call	_X509_NAME_new
		mov	edi, eax
		test	eax, eax
		jz	loc_435AC9
		xor	edx, edx
		mov	eax, [esp+4Ch+var_2C]
		test	eax, eax
		jz	loc_435E38
		mov	[esp+4Ch+var_20], ebp
		mov	ebp, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_24], edi
		mov	edi, edx
		jmp	short loc_435C55
; ---------------------------------------------------------------------------

loc_435C2E:				; CODE XREF: _parse_name+26Fj
		mov	eax, [ebx+edi*4]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aNoValueProvide ; "No value provided for Subject Attribute"...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf

loc_435C4A:				; CODE XREF: _parse_name+2A6j
					; _parse_name+42Bj
		inc	edi
		cmp	edi, [esp+4Ch+var_2C]
		jz	loc_435E30

loc_435C55:				; CODE XREF: _parse_name+22Cj
		mov	eax, [ebx+edi*4]
		mov	[esp+4Ch+var_4C], eax
		call	_OBJ_txt2nid
		test	eax, eax
		jz	loc_435E0F
		mov	ecx, [ebp+edi*4+0]
		cmp	byte ptr [ecx],	0
		jz	short loc_435C2E
		mov	edx, [esi+edi*4]
		mov	[esp+4Ch+var_34], edx
		mov	[esp+4Ch+var_38], 0FFFFFFFFh
		mov	[esp+4Ch+var_3C], 0FFFFFFFFh
		mov	[esp+4Ch+var_40], ecx
		mov	edx, [esp+4Ch+arg_4]
		mov	[esp+4Ch+var_44], edx
		mov	[esp+4Ch+var_48], eax
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_4C], eax
		call	_X509_NAME_add_entry_by_NID
		test	eax, eax
		jnz	short loc_435C4A
		mov	ebp, [esp+4Ch+var_20]
		mov	edi, [esp+4Ch+var_24]
		jmp	loc_435AC9
; ---------------------------------------------------------------------------
		align 10h

loc_435CC0:				; CODE XREF: _parse_name+2E1j
		mov	al, [edx+1]
		test	al, al
		jz	loc_435D60
		add	edx, 2
		mov	[ecx-1], al
		inc	ecx

loc_435CD2:				; CODE XREF: _parse_name+1BEj
					; _parse_name+2F4j
		lea	edi, [ecx-1]
		mov	al, [edx]
		test	al, al
		jz	loc_435BEE
		cmp	al, 5Ch
		jz	short loc_435CC0
		cmp	al, 2Fh
		jz	short loc_435D30
		inc	edx
		cmp	al, 2Bh
		jz	loc_435DB2
		mov	[ecx-1], al
		inc	ecx
		jmp	short loc_435CD2
; ---------------------------------------------------------------------------
		align 10h

loc_435D00:				; CODE XREF: _parse_name+1D2j
		mov	al, [edx+1]
		test	al, al
		jz	short loc_435D60
		add	edx, 2
		mov	[ecx-1], al
		inc	ecx
		jmp	loc_435BE5
; ---------------------------------------------------------------------------
		align 10h

loc_435D20:				; CODE XREF: _parse_name+F7j
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_435D30:				; CODE XREF: _parse_name+1DAj
					; _parse_name+2E5j
		inc	edx
		mov	eax, [esp+4Ch+var_2C]
		mov	dword ptr [esi+eax*4+4], 0
		lea	eax, [edi+1]
		mov	byte ptr [edi],	0
		inc	[esp+4Ch+var_2C]
		cmp	byte ptr [edx],	0
		jnz	loc_435B2D
		jmp	loc_435C01
; ---------------------------------------------------------------------------
		align 10h

loc_435D60:				; CODE XREF: _parse_name+185j
					; _parse_name+2C5j ...
		mov	[esp+4Ch+var_48], offset aEscapeCharacte ; "escape character at	end of string\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_435AC9
; ---------------------------------------------------------------------------
		align 10h

loc_435D80:				; CODE XREF: _parse_name+8Bj
					; _parse_name+93j
		mov	[esp+4Ch+var_48], offset aMallocError ;	"malloc	error\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_4C], 0
		call	_X509_NAME_free
		mov	eax, [esp+4Ch+var_28]
		test	eax, eax
		jz	loc_435ADD
		jmp	loc_435AD1
; ---------------------------------------------------------------------------

loc_435DB2:				; CODE XREF: _parse_name+2EAj
		mov	eax, [esp+4Ch+var_2C]
		mov	dword ptr [esi+eax*4+4], 0FFFFFFFFh
		jmp	loc_435BEE
; ---------------------------------------------------------------------------

loc_435DC3:				; CODE XREF: _parse_name+9Fj
		mov	[esp+4Ch+var_48], offset aMallocError ;	"malloc	error\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_4C], 0
		call	_X509_NAME_free
		jmp	loc_435AE1
; ---------------------------------------------------------------------------

loc_435DE9:				; CODE XREF: _parse_name+A7j
		mov	[esp+4Ch+var_48], offset aMallocError ;	"malloc	error\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	[esp+4Ch+var_4C], 0
		call	_X509_NAME_free
		jmp	loc_435AD1
; ---------------------------------------------------------------------------

loc_435E0F:				; CODE XREF: _parse_name+262j
		mov	eax, [ebx+edi*4]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aSubjectAttribu ; "Subject Attribute %s has no	known NID, "...
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		jmp	loc_435C4A
; ---------------------------------------------------------------------------

loc_435E30:				; CODE XREF: _parse_name+24Fj
		mov	ebp, [esp+4Ch+var_20]
		mov	edi, [esp+4Ch+var_24]

loc_435E38:				; CODE XREF: _parse_name+218j
					; _parse_name+46Cj
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_4C], eax
		call	_CRYPTO_free
		mov	[esp+4Ch+var_4C], ebx
		call	_CRYPTO_free
		mov	[esp+4Ch+var_4C], ebp
		call	_CRYPTO_free
		mov	[esp+4Ch+var_4C], esi
		call	_CRYPTO_free
		mov	eax, edi
		jmp	loc_435B07
; ---------------------------------------------------------------------------

loc_435E63:				; CODE XREF: _parse_name+11Dj
		call	_X509_NAME_new
		mov	edi, eax
		test	eax, eax
		jnz	short loc_435E38
		jmp	loc_435AC9
_parse_name	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _args_verify
_args_verify	proc near		; CODE XREF: _verify_main+138p
					; _s_server_main+220Cp	...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebx, [esp+4Ch+arg_0]
		mov	eax, [ebx]
		mov	[esp+4Ch+var_38], eax
		mov	edx, [eax]
		mov	ebp, [eax+4]
		mov	edi, offset aPolicy_1 ;	"-policy"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jnz	loc_435F40
		test	ebp, ebp
		jz	loc_436090
		mov	[esp+4Ch+var_48], 0
		mov	[esp+4Ch+var_4C], ebp
		call	_OBJ_txt2obj
		mov	esi, eax
		test	eax, eax
		jz	loc_436290
		mov	edx, [ebx]
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]

loc_435ED4:				; CODE XREF: _args_verify+225j
					; _args_verify+439j
		add	edx, 4
		mov	[ebx], edx
		mov	[esp+4Ch+var_34], 0
		mov	edi, 0FFFFFFFFh
		xor	edx, edx
		xor	ebp, ebp

loc_435EEA:				; CODE XREF: _args_verify+205j
					; _args_verify+28Bj ...
		test	eax, eax
		mov	eax, [esp+4Ch+arg_10]
		mov	eax, [eax]
		jz	loc_435FAA

loc_435EF8:				; CODE XREF: _args_verify+124j
		test	eax, eax
		jz	short loc_435F04
		mov	[esp+4Ch+var_4C], eax
		call	_X509_VERIFY_PARAM_free

loc_435F04:				; CODE XREF: _args_verify+7Aj
		mov	eax, [esp+4Ch+arg_10]
		mov	dword ptr [eax], 0

loc_435F0E:				; CODE XREF: _args_verify+176j
					; _args_verify+405j
		mov	eax, [ebx]
		add	eax, 4
		mov	[ebx], eax
		mov	edx, [esp+4Ch+arg_4]
		test	edx, edx
		jz	loc_436030

loc_435F21:				; CODE XREF: _args_verify+19Fj
		sub	eax, [esp+4Ch+var_38]
		sar	eax, 2
		mov	ebx, [esp+4Ch+arg_4]
		sub	[ebx], eax
		mov	eax, 1

loc_435F33:				; CODE XREF: _args_verify+714j
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_435F40:				; CODE XREF: _args_verify+24j
		mov	edi, offset aPurpose_0 ; "-purpose"
		mov	ecx, 9
		mov	esi, edx
		repe cmpsb
		jnz	loc_436040
		test	ebp, ebp
		jz	loc_436110
		mov	[esp+4Ch+var_4C], ebp
		call	_X509_PURPOSE_get_by_sname
		test	eax, eax
		js	loc_436210
		mov	[esp+4Ch+var_4C], eax
		call	_X509_PURPOSE_get0
		mov	[esp+4Ch+var_4C], eax
		call	_X509_PURPOSE_get_id
		mov	edx, eax
		mov	ecx, [ebx]
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]

loc_435F86:				; CODE XREF: _args_verify+2A5j
					; _args_verify+3B7j
		add	ecx, 4
		mov	[ebx], ecx
		mov	[esp+4Ch+var_34], 0
		mov	edi, 0FFFFFFFFh
		xor	ebp, ebp
		xor	esi, esi
		test	eax, eax
		mov	eax, [esp+4Ch+arg_10]
		mov	eax, [eax]
		jnz	loc_435EF8

loc_435FAA:				; CODE XREF: _args_verify+72j
		test	eax, eax
		jz	loc_436260

loc_435FB2:				; CODE XREF: _args_verify+3F5j
		test	esi, esi
		jz	short loc_435FCA
		mov	[esp+4Ch+var_30], edx
		mov	[esp+4Ch+var_48], esi
		mov	[esp+4Ch+var_4C], eax
		call	_X509_VERIFY_PARAM_add0_policy
		mov	edx, [esp+4Ch+var_30]

loc_435FCA:				; CODE XREF: _args_verify+134j
		test	ebp, ebp
		jnz	loc_436150

loc_435FD2:				; CODE XREF: _args_verify+2EAj
		test	edx, edx
		jnz	loc_436130

loc_435FDA:				; CODE XREF: _args_verify+2C2j
		test	edi, edi
		js	short loc_435FF0
		mov	eax, [esp+4Ch+arg_10]
		mov	eax, [eax]
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], eax
		call	_X509_VERIFY_PARAM_set_depth

loc_435FF0:				; CODE XREF: _args_verify+15Cj
		mov	ecx, [esp+4Ch+var_34]
		test	ecx, ecx
		jz	loc_435F0E
		mov	eax, [esp+4Ch+arg_10]
		mov	eax, [eax]
		mov	edi, [esp+4Ch+var_34]
		mov	[esp+4Ch+var_48], edi
		mov	[esp+4Ch+var_4C], eax
		call	_X509_VERIFY_PARAM_set_time
		mov	eax, [ebx]
		add	eax, 4
		mov	[ebx], eax
		mov	edx, [esp+4Ch+arg_4]
		test	edx, edx
		jnz	loc_435F21
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_436030:				; CODE XREF: _args_verify+9Bj
		mov	eax, 1
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436040:				; CODE XREF: _args_verify+CEj
		mov	edi, offset aVerify_depth ; "-verify_depth"
		mov	ecx, 0Eh
		mov	esi, edx
		repe cmpsb
		jnz	short loc_4360B0
		test	ebp, ebp
		jz	loc_436240
		mov	[esp+4Ch+var_4C], ebp ;	char *
		call	_atoi
		mov	edi, eax
		test	eax, eax
		js	loc_436330
		mov	edx, [ebx]
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]

loc_436072:				; CODE XREF: _args_verify+3D8j
					; _args_verify+4D5j
		add	edx, 4
		mov	[ebx], edx
		mov	[esp+4Ch+var_34], 0
		xor	edx, edx
		xor	ebp, ebp
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------
		align 10h

loc_436090:				; CODE XREF: _args_verify+2Cj
		mov	eax, [esp+4Ch+arg_8]
		mov	dword ptr [eax], 1
		mov	edx, [esp+4Ch+var_38]
		mov	eax, 1
		xor	esi, esi
		jmp	loc_435ED4
; ---------------------------------------------------------------------------
		align 10h

loc_4360B0:				; CODE XREF: _args_verify+1CEj
		mov	edi, offset aAttime ; "-attime"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jnz	loc_436170
		test	ebp, ebp
		jz	loc_4361F0
		lea	eax, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aLi ; "%li"
		mov	[esp+4Ch+var_4C], ebp ;	char *
		call	_sscanf
		dec	eax
		jnz	loc_4362C0
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]

loc_4360F1:				; CODE XREF: _args_verify+468j
		mov	edi, [esp+4Ch+var_20]
		mov	[esp+4Ch+var_34], edi
		mov	edx, [ebx]

loc_4360FB:				; CODE XREF: _args_verify+38Bj
		add	edx, 4
		mov	[ebx], edx
		mov	edi, 0FFFFFFFFh
		xor	edx, edx
		xor	ebp, ebp
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_436110:				; CODE XREF: _args_verify+D6j
		mov	eax, [esp+4Ch+arg_8]
		mov	dword ptr [eax], 1
		mov	ecx, [esp+4Ch+var_38]
		mov	eax, 1
		xor	edx, edx
		jmp	loc_435F86
; ---------------------------------------------------------------------------
		align 10h

loc_436130:				; CODE XREF: _args_verify+154j
		mov	eax, [esp+4Ch+arg_10]
		mov	eax, [eax]
		mov	[esp+4Ch+var_48], edx
		mov	[esp+4Ch+var_4C], eax
		call	_X509_VERIFY_PARAM_set_purpose
		jmp	loc_435FDA
; ---------------------------------------------------------------------------
		align 10h

loc_436150:				; CODE XREF: _args_verify+14Cj
		mov	[esp+4Ch+var_30], edx
		mov	eax, [esp+4Ch+arg_10]
		mov	eax, [eax]
		mov	[esp+4Ch+var_48], ebp
		mov	[esp+4Ch+var_4C], eax
		call	_X509_VERIFY_PARAM_set_flags
		mov	edx, [esp+4Ch+var_30]
		jmp	loc_435FD2
; ---------------------------------------------------------------------------
		align 10h

loc_436170:				; CODE XREF: _args_verify+23Ej
		mov	edi, offset aIgnore_critica ; "-ignore_critical"
		mov	ecx, 11h
		mov	esi, edx
		repe cmpsb
		jz	short loc_4361C0
		mov	edi, offset aIssuer_checks ; "-issuer_checks"
		mov	ecx, 0Fh
		mov	esi, edx
		repe cmpsb
		jnz	loc_4362F0
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		mov	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 1
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------
		align 10h

loc_4361C0:				; CODE XREF: _args_verify+2FEj
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		mov	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 10h
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------
		jmp	short loc_4361F0
; ---------------------------------------------------------------------------
		align 10h

loc_4361F0:				; CODE XREF: _args_verify+246j
					; _args_verify+361j
		mov	eax, [esp+4Ch+arg_8]
		mov	dword ptr [eax], 1
		mov	edx, [esp+4Ch+var_38]
		mov	eax, 1
		mov	[esp+4Ch+var_34], 0
		jmp	loc_4360FB
; ---------------------------------------------------------------------------

loc_436210:				; CODE XREF: _args_verify+E6j
		mov	[esp+4Ch+var_48], offset aUnrecognizedPu ; "unrecognized purpose\n"
		mov	eax, [esp+4Ch+arg_C]
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	eax, [esp+4Ch+arg_8]
		mov	dword ptr [eax], 1
		mov	ecx, [ebx]
		mov	eax, 1
		xor	edx, edx
		jmp	loc_435F86
; ---------------------------------------------------------------------------
		align 10h

loc_436240:				; CODE XREF: _args_verify+1D2j
		mov	eax, [esp+4Ch+arg_8]
		mov	dword ptr [eax], 1
		mov	edx, [esp+4Ch+var_38]
		mov	eax, 1
		mov	edi, 0FFFFFFFFh
		jmp	loc_436072
; ---------------------------------------------------------------------------
		align 10h

loc_436260:				; CODE XREF: _args_verify+12Cj
		mov	[esp+4Ch+var_30], edx
		call	_X509_VERIFY_PARAM_new
		mov	edx, [esp+4Ch+arg_10]
		mov	[edx], eax
		test	eax, eax
		mov	edx, [esp+4Ch+var_30]
		jnz	loc_435FB2
		mov	eax, [esp+4Ch+arg_8]
		mov	dword ptr [eax], 1
		jmp	loc_435F0E
; ---------------------------------------------------------------------------
		align 10h

loc_436290:				; CODE XREF: _args_verify+46j
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_48], offset aInvalidPolicyS ; "Invalid Policy \"%s\"\n"
		mov	eax, [esp+4Ch+arg_C]
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	eax, [esp+4Ch+arg_8]
		mov	dword ptr [eax], 1
		mov	edx, [ebx]
		mov	eax, 1
		jmp	loc_435ED4
; ---------------------------------------------------------------------------
		align 10h

loc_4362C0:				; CODE XREF: _args_verify+265j
		mov	[esp+4Ch+var_44], ebp
		mov	[esp+4Ch+var_48], offset aErrorParsingTi ; "Error parsing timestamp %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	eax, [esp+4Ch+arg_8]
		mov	dword ptr [eax], 1
		mov	eax, 1
		jmp	loc_4360F1
; ---------------------------------------------------------------------------
		align 10h

loc_4362F0:				; CODE XREF: _args_verify+30Ej
		mov	edi, offset aCrl_check ; "-crl_check"
		mov	ecx, 0Bh
		mov	esi, edx
		repe cmpsb
		jnz	short loc_43635A
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		mov	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 4
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------
		jmp	short loc_436330
; ---------------------------------------------------------------------------
		align 10h

loc_436330:				; CODE XREF: _args_verify+1E4j
					; _args_verify+4A1j
		mov	[esp+4Ch+var_48], offset aInvalidDepth ; "invalid depth\n"
		mov	eax, [esp+4Ch+arg_C]
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	eax, [esp+4Ch+arg_8]
		mov	dword ptr [eax], 1
		mov	edx, [ebx]
		mov	eax, 1
		jmp	loc_436072
; ---------------------------------------------------------------------------

loc_43635A:				; CODE XREF: _args_verify+47Ej
		mov	edi, offset aCrl_check_all ; "-crl_check_all"
		mov	ecx, 0Fh
		mov	esi, edx
		repe cmpsb
		jnz	short loc_43638B
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		mov	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 0Ch
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_43638B:				; CODE XREF: _args_verify+4E8j
		mov	edi, offset aPolicy_check ; "-policy_check"
		mov	ecx, 0Eh
		mov	esi, edx
		repe cmpsb
		jnz	short loc_4363BC
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		mov	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 80h
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_4363BC:				; CODE XREF: _args_verify+519j
		mov	edi, offset aExplicit_polic ; "-explicit_policy"
		mov	ecx, 11h
		mov	esi, edx
		repe cmpsb
		jnz	short loc_4363ED
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		mov	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 100h
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_4363ED:				; CODE XREF: _args_verify+54Aj
		mov	edi, offset aInhibit_any ; "-inhibit_any"
		mov	ecx, 0Dh
		mov	esi, edx
		repe cmpsb
		jnz	short loc_43641C
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		or	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 200h
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_43641C:				; CODE XREF: _args_verify+57Bj
		mov	[esp+4Ch+var_48], offset aInhibit_map ;	"-inhibit_map"
		mov	[esp+4Ch+var_4C], edx ;	char *
		mov	[esp+4Ch+var_34], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+4Ch+var_34]
		jz	short loc_436473
		mov	[esp+4Ch+var_48], offset aX509_strict ;	"-x509_strict"
		mov	[esp+4Ch+var_4C], edx ;	char *
		mov	[esp+4Ch+var_34], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+4Ch+var_34]
		jnz	short loc_436492
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		or	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 20h
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_436473:				; CODE XREF: _args_verify+5B6j
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		or	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 400h
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_436492:				; CODE XREF: _args_verify+5D2j
		mov	[esp+4Ch+var_48], offset aExtended_crl ; "-extended_crl"
		mov	[esp+4Ch+var_4C], edx ;	char *
		mov	[esp+4Ch+var_34], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+4Ch+var_34]
		jnz	short loc_4364CD
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		or	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 1000h
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_4364CD:				; CODE XREF: _args_verify+62Cj
		mov	[esp+4Ch+var_48], offset aUse_deltas ; "-use_deltas"
		mov	[esp+4Ch+var_4C], edx ;	char *
		mov	[esp+4Ch+var_34], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+4Ch+var_34]
		jz	short loc_436524
		mov	[esp+4Ch+var_48], offset aPolicy_print ; "-policy_print"
		mov	[esp+4Ch+var_4C], edx ;	char *
		mov	[esp+4Ch+var_34], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+4Ch+var_34]
		jnz	short loc_436543
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		or	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 800h
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_436524:				; CODE XREF: _args_verify+667j
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		or	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 2000h
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_436543:				; CODE XREF: _args_verify+683j
		mov	[esp+4Ch+var_48], offset aCheck_ss_sig ; "-check_ss_sig"
		mov	[esp+4Ch+var_4C], edx ;	char *
		mov	[esp+4Ch+var_34], edx
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+4Ch+var_34]
		jnz	short loc_43657E
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		or	edi, 0FFFFFFFFh
		xor	edx, edx
		mov	ebp, 4000h
		xor	esi, esi
		jmp	loc_435EEA
; ---------------------------------------------------------------------------

loc_43657E:				; CODE XREF: _args_verify+6DDj
		mov	[esp+4Ch+var_48], offset aNo_alt_chains	; "-no_alt_chains"
		mov	[esp+4Ch+var_4C], edx ;	char *
		call	_strcmp
		mov	edx, eax
		xor	eax, eax
		test	edx, edx
		jnz	loc_435F33
		mov	eax, [esp+4Ch+arg_8]
		mov	eax, [eax]
		mov	[esp+4Ch+var_34], 0
		or	edi, 0FFFFFFFFh
		mov	ebp, 100000h
		xor	esi, esi
		jmp	loc_435EEA
_args_verify	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _bio_to_mem
_bio_to_mem	proc near		; CODE XREF: _pkeyutl_main+687p
					; _pkeyutl_main+6BEp

var_42C		= dword	ptr -42Ch
var_428		= dword	ptr -428h
var_424		= dword	ptr -424h
var_420		= dword	ptr -420h
var_41C		= byte ptr -41Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 41Ch
		mov	ebx, [esp+42Ch+arg_4]
		call	_BIO_s_mem
		mov	[esp+42Ch+var_42C], eax
		call	_BIO_new
		mov	edi, eax
		test	eax, eax
		jz	loc_4366A8
		lea	esi, [esp+42Ch+var_41C]
		jmp	short loc_436627
; ---------------------------------------------------------------------------
		align 10h

loc_4365F0:				; CODE XREF: _bio_to_mem+72j
		mov	eax, ebx

loc_4365F2:				; CODE XREF: _bio_to_mem+79j
		mov	[esp+42Ch+var_424], eax
		mov	[esp+42Ch+var_428], esi
		mov	eax, [esp+42Ch+arg_8]
		mov	[esp+42Ch+var_42C], eax
		call	_BIO_read
		mov	ebp, eax
		test	eax, eax
		jle	short loc_436640
		mov	[esp+42Ch+var_424], eax
		mov	[esp+42Ch+var_428], esi
		mov	[esp+42Ch+var_42C], edi
		call	_BIO_write
		cmp	eax, ebp
		jnz	short loc_436690
		sub	ebx, eax
		jz	short loc_436640

loc_436627:				; CODE XREF: _bio_to_mem+2Cj
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_436634
		cmp	ebx, 3FFh
		jle	short loc_4365F0

loc_436634:				; CODE XREF: _bio_to_mem+6Aj
		mov	eax, 400h
		jmp	short loc_4365F2
; ---------------------------------------------------------------------------
		align 10h

loc_436640:				; CODE XREF: _bio_to_mem+4Dj
					; _bio_to_mem+65j
		mov	eax, [esp+42Ch+arg_0]
		mov	[esp+42Ch+var_420], eax
		mov	[esp+42Ch+var_424], 0
		mov	[esp+42Ch+var_428], 3
		mov	[esp+42Ch+var_42C], edi
		call	_BIO_ctrl
		mov	ebx, eax
		mov	[esp+42Ch+var_428], 200h
		mov	[esp+42Ch+var_42C], edi
		call	_BIO_set_flags
		mov	[esp+42Ch+var_42C], edi
		call	_BIO_free
		mov	eax, ebx

loc_43667F:				; CODE XREF: _bio_to_mem+EDj
		add	esp, 41Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436690:				; CODE XREF: _bio_to_mem+61j
		mov	[esp+42Ch+var_42C], edi
		call	_BIO_free
		mov	eax, 0FFFFFFFFh
		add	esp, 41Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_4366A8:				; CODE XREF: _bio_to_mem+22j
		mov	eax, 0FFFFFFFFh
		jmp	short loc_43667F
_bio_to_mem	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _pkey_ctrl_string
_pkey_ctrl_string proc near		; CODE XREF: _do_X509_sign+79p
					; _do_X509_REQ_sign+79p ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		sub	esp, 14h
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_1C], eax
		call	_BUF_strdup
		mov	ebx, eax
		test	eax, eax
		jz	short loc_436705
		mov	[esp+1Ch+var_18], 3Ah ;	int
		mov	[esp+1Ch+var_1C], eax ;	char *
		call	_strchr
		test	eax, eax
		jz	short loc_4366DF
		mov	byte ptr [eax],	0
		inc	eax

loc_4366DF:				; CODE XREF: _pkey_ctrl_string+29j
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], ebx
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	_EVP_PKEY_CTX_ctrl_str
		mov	esi, eax
		mov	[esp+1Ch+var_1C], ebx
		call	_CRYPTO_free
		mov	eax, esi

loc_4366FF:				; CODE XREF: _pkey_ctrl_string+5Aj
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_436705:				; CODE XREF: _pkey_ctrl_string+15j
		mov	eax, 0FFFFFFFFh
		jmp	short loc_4366FF
_pkey_ctrl_string endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _policies_print
_policies_print	proc near		; CODE XREF: _cb+11Bp _cb+17Bp ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_20], 0
		test	esi, esi
		jz	loc_4368A5

loc_43672F:				; CODE XREF: _policies_print+1B7j
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_CTX_get0_policy_tree
		mov	ebp, eax
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_CTX_get_explicit_policy
		test	eax, eax
		jz	loc_436850
		mov	eax, offset aTrue ; "True"

loc_43674E:				; CODE XREF: _policies_print+145j
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aRequireExplici ; "Require explicit Policy: %s\n"
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_printf
		mov	[esp+2Ch+var_2C], ebp
		call	_X509_policy_tree_get0_policies
		mov	edi, eax
		mov	[esp+2Ch+var_24], offset aAuthority ; "Authority"
		mov	[esp+2Ch+var_28], offset aSPolicies ; "%s Policies:"
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_printf
		test	edi, edi
		jz	loc_436890
		mov	[esp+2Ch+var_28], offset asc_468A22 ; "\n"
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_puts
		xor	ebx, ebx
		jmp	short loc_4367C1
; ---------------------------------------------------------------------------

loc_4367A0:				; CODE XREF: _policies_print+BBj
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], edi
		call	_sk_value
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	_X509_POLICY_NODE_print
		inc	ebx

loc_4367C1:				; CODE XREF: _policies_print+8Ej
		mov	[esp+2Ch+var_2C], edi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_4367A0

loc_4367CD:				; CODE XREF: _policies_print+190j
		mov	[esp+2Ch+var_2C], ebp
		call	_X509_policy_tree_get0_user_policies
		mov	edi, eax
		mov	[esp+2Ch+var_24], offset aUser ; "User"
		mov	[esp+2Ch+var_28], offset aSPolicies ; "%s Policies:"
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_printf
		test	edi, edi
		jz	short loc_436870
		mov	[esp+2Ch+var_28], offset asc_468A22 ; "\n"
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_puts
		xor	ebx, ebx
		jmp	short loc_436831
; ---------------------------------------------------------------------------
		align 10h

loc_436810:				; CODE XREF: _policies_print+12Bj
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], edi
		call	_sk_value
		mov	[esp+2Ch+var_24], 2
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	_X509_POLICY_NODE_print
		inc	ebx

loc_436831:				; CODE XREF: _policies_print+F5j
		mov	[esp+2Ch+var_2C], edi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_436810

loc_43683D:				; CODE XREF: _policies_print+170j
		mov	eax, [esp+2Ch+var_20]
		test	eax, eax
		jnz	short loc_436860
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436850:				; CODE XREF: _policies_print+33j
		mov	eax, offset aFalse ; "False"
		jmp	loc_43674E
; ---------------------------------------------------------------------------
		align 10h

loc_436860:				; CODE XREF: _policies_print+133j
		mov	[esp+2Ch+arg_0], esi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	_BIO_free
; ---------------------------------------------------------------------------

loc_436870:				; CODE XREF: _policies_print+E1j
		mov	[esp+2Ch+var_28], offset aEmpty	; " <empty>\n"
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_puts
		jmp	short loc_43683D
; ---------------------------------------------------------------------------
		align 10h

loc_436890:				; CODE XREF: _policies_print+76j
		mov	[esp+2Ch+var_28], offset aEmpty	; " <empty>\n"
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_puts
		jmp	loc_4367CD
; ---------------------------------------------------------------------------

loc_4368A5:				; CODE XREF: _policies_print+19j
		mov	[esp+2Ch+var_28], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_new_fp
		mov	esi, eax
		mov	[esp+2Ch+var_20], 1
		jmp	loc_43672F
_policies_print	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl next_protos_parse(int, char *)
		public _next_protos_parse
_next_protos_parse proc	near		; CODE XREF: _s_server_main+DA4p
					; _s_client_main+C73p

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], edi ;	char *
		call	_strlen
		mov	esi, eax
		cmp	eax, 0FFFEh
		ja	loc_43698C
		mov	[esp+2Ch+var_24], 0A37h
		mov	[esp+2Ch+var_28], offset aApps_c ; "apps.c"
		lea	eax, [eax+1]
		mov	[esp+2Ch+var_2C], eax
		call	_CRYPTO_malloc
		mov	[esp+2Ch+var_20], eax
		test	eax, eax
		jz	short loc_43698C
		mov	ecx, 1
		xor	edx, edx
		xor	ebp, ebp
		jmp	short loc_436931
; ---------------------------------------------------------------------------
		align 10h

loc_436920:				; CODE XREF: _next_protos_parse+6Bj
		mov	eax, [esp+2Ch+var_20]
		mov	[eax+ecx], bl
		inc	edx
		lea	ebx, [ecx+1]
		cmp	ecx, esi
		ja	short loc_436960

loc_43692F:				; CODE XREF: _next_protos_parse+8Ej
		mov	ecx, ebx

loc_436931:				; CODE XREF: _next_protos_parse+4Cj
		cmp	esi, edx
		jz	short loc_43693D
		mov	bl, [edi+edx]
		cmp	bl, 2Ch
		jnz	short loc_436920

loc_43693D:				; CODE XREF: _next_protos_parse+63j
		mov	ebx, edx
		sub	ebx, ebp
		cmp	ebx, 0FFh
		ja	short loc_436980
		mov	bl, dl
		mov	eax, ebp
		sub	ebx, eax
		mov	eax, [esp+2Ch+var_20]
		mov	[eax+ebp], bl
		mov	ebp, ecx
		inc	edx
		lea	ebx, [ecx+1]
		cmp	ecx, esi
		jbe	short loc_43692F

loc_436960:				; CODE XREF: _next_protos_parse+5Dj
		inc	esi
		mov	edx, [esp+2Ch+arg_0]
		mov	[edx], si
		mov	eax, [esp+2Ch+var_20]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436980:				; CODE XREF: _next_protos_parse+77j
		mov	eax, [esp+2Ch+var_20]
		mov	[esp+2Ch+var_2C], eax
		call	_CRYPTO_free

loc_43698C:				; CODE XREF: _next_protos_parse+1Aj
					; _next_protos_parse+41j
		xor	eax, eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_next_protos_parse endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public _app_tminterval
_app_tminterval	proc near		; CODE XREF: _speed_main+987p
					; _speed_main+A01p ...

var_30		= qword	ptr -30h
UserTime	= _FILETIME ptr	-20h
CreationTime	= _FILETIME ptr	-18h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	ebx, [ebp+arg_4]
		mov	eax, ds:_proc_37494
		test	eax, eax
		jz	short loc_436A10

loc_4369B3:				; CODE XREF: _app_tminterval+A7j
		test	ebx, ebx
		jz	loc_436A90
		cmp	eax, 0FFFFFFFFh
		jz	loc_436A60
		lea	edx, [ebp+UserTime]
		mov	[esp+10h], edx	; lpUserTime
		lea	edx, [ebp+CreationTime]
		mov	[esp+0Ch], edx	; lpKernelTime
		mov	[esp+8], edx	; lpExitTime
		mov	[esp+4], edx	; lpCreationTime
		mov	[esp], eax	; hProcess
		call	ds:__imp__GetProcessTimes@20
		sub	esp, 14h
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	loc_436ABB

loc_4369F1:				; CODE XREF: _app_tminterval+115j
		mov	eax, [ebp+UserTime.dwLowDateTime]
		mov	ds:_tmstart_37492, eax
		mov	eax, [ebp+UserTime.dwHighDateTime]
		mov	ds:dword_475B64, eax
		fldz
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436A10:				; CODE XREF: _app_tminterval+11j
		call	ds:__imp__GetVersion@0
		test	eax, eax
		js	loc_436AF0
		call	ds:__imp__GetCurrentProcessId@0
		mov	[esp+8], eax	; dwProcessId
		mov	dword ptr [esp+4], 0 ; bInheritHandle
		mov	dword ptr [esp], 400h ;	dwDesiredAccess
		call	ds:__imp__OpenProcess@12
		sub	esp, 0Ch
		mov	ds:_proc_37494,	eax

loc_436A45:				; CODE XREF: _app_tminterval+155j
		test	eax, eax
		jnz	loc_4369B3
		mov	ds:_proc_37494,	0FFFFFFFFh
		test	ebx, ebx
		jz	short loc_436A90
		nop
		lea	esi, [esi+0]

loc_436A60:				; CODE XREF: _app_tminterval+1Ej
		mov	ecx, _warning_37493
		test	ecx, ecx
		jz	short loc_436A90
		mov	dword ptr [esp+4], offset aToGetMeaningfu ; "To	get meaningful results,	run this pro"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	_warning_37493,	0
		lea	esi, [esi+0]

loc_436A90:				; CODE XREF: _app_tminterval+15j
					; _app_tminterval+B9j ...
		lea	ebx, [ebp+CreationTime]
		mov	[esp], ebx	; lpSystemTime
		call	ds:__imp__GetSystemTime@4
		push	edx
		lea	eax, [ebp+UserTime]
		mov	[esp+4], eax	; lpFileTime
		mov	[esp], ebx	; lpSystemTime
		call	ds:__imp__SystemTimeToFileTime@8
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	loc_4369F1

loc_436ABB:				; CODE XREF: _app_tminterval+4Bj
		mov	eax, [ebp+UserTime.dwLowDateTime]
		mov	edx, [ebp+UserTime.dwHighDateTime]
		sub	eax, ds:_tmstart_37492
		sbb	edx, ds:dword_475B64
		mov	dword ptr [ebp+var_30],	eax
		mov	dword ptr [ebp+var_30+4], edx
		fild	[ebp+var_30]
		fmul	ds:dbl_469688
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_436AF0
; ---------------------------------------------------------------------------
		align 10h

loc_436AF0:				; CODE XREF: _app_tminterval+78j
					; _app_tminterval+141j
		mov	eax, ds:_proc_37494
		jmp	loc_436A45
_app_tminterval	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl app_isdir(LPCSTR lpFileName)
		public _app_isdir
_app_isdir	proc near		; CODE XREF: _ca_main+3D59p
					; _www_body+A86p

FindFileData	= _WIN32_FIND_DATAA ptr	-148h
lpFileName	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 158h
		lea	eax, [ebp+FindFileData]
		mov	[esp+4], eax	; lpFindFileData
		mov	eax, [ebp+lpFileName]
		mov	[esp], eax	; lpFileName
		call	ds:__imp__FindFirstFileA@8
		sub	esp, 8
		cmp	eax, 0FFFFFFFFh
		jz	short loc_436B40
		mov	[esp], eax	; hFindFile
		call	ds:__imp__FindClose@4
		push	eax
		mov	eax, [ebp+FindFileData.dwFileAttributes]
		shr	eax, 4
		and	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436B40:				; CODE XREF: _app_isdir+25j
		mov	eax, 0FFFFFFFFh
		leave
		retn
_app_isdir	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl raw_read_stdin(LPVOID lpBuffer, DWORD nNumberOfBytesToRead)
		public _raw_read_stdin
_raw_read_stdin	proc near		; CODE XREF: _sv_body+6F9p
					; _sv_body+A8Bp ...

NumberOfBytesRead= dword ptr -0Ch
lpBuffer	= dword	ptr  8
nNumberOfBytesToRead= dword ptr	 0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	dword ptr [esp], 0FFFFFFF6h ; nStdHandle
		call	ds:__imp__GetStdHandle@4
		push	edx
		mov	dword ptr [esp+10h], 0 ; lpOverlapped
		lea	edx, [ebp+NumberOfBytesRead]
		mov	[esp+0Ch], edx	; lpNumberOfBytesRead
		mov	edx, [ebp+nNumberOfBytesToRead]
		mov	[esp+8], edx	; nNumberOfBytesToRead
		mov	edx, [ebp+lpBuffer]
		mov	[esp+4], edx	; lpBuffer
		mov	[esp], eax	; hFile
		call	ds:__imp__ReadFile@20
		sub	esp, 14h
		test	eax, eax
		jz	short loc_436BA0
		mov	eax, [ebp+NumberOfBytesRead]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436BA0:				; CODE XREF: _raw_read_stdin+3Fj
		mov	eax, 0FFFFFFFFh
		leave
		retn
_raw_read_stdin	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl raw_write_stdout(LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite)
		public _raw_write_stdout
_raw_write_stdout proc near		; CODE XREF: _sv_body+FA0p
					; _s_client_main+2156p

NumberOfBytesWritten= dword ptr	-0Ch
lpBuffer	= dword	ptr  8
nNumberOfBytesToWrite= dword ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	dword ptr [esp], 0FFFFFFF5h ; nStdHandle
		call	ds:__imp__GetStdHandle@4
		push	edx
		mov	dword ptr [esp+10h], 0 ; lpOverlapped
		lea	edx, [ebp+NumberOfBytesWritten]
		mov	[esp+0Ch], edx	; lpNumberOfBytesWritten
		mov	edx, [ebp+nNumberOfBytesToWrite]
		mov	[esp+8], edx	; nNumberOfBytesToWrite
		mov	edx, [ebp+lpBuffer]
		mov	[esp+4], edx	; lpBuffer
		mov	[esp], eax	; hFile
		call	ds:__imp__WriteFile@20
		sub	esp, 14h
		test	eax, eax
		jz	short loc_436C00
		mov	eax, [ebp+NumberOfBytesWritten]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436C00:				; CODE XREF: _raw_write_stdout+3Fj
		mov	eax, 0FFFFFFFFh
		leave
		retn
_raw_write_stdout endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _verify_callback
_verify_callback proc near		; DATA XREF: _s_server_main:loc_42292Bo
					; _s_server_main+18BDo	...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_4]
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_CTX_get_current_cert
		mov	edi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_CTX_get_error
		mov	esi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	_X509_STORE_CTX_get_error_depth
		mov	ebp, eax
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aDepthD ; "depth=%d "
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		test	edi, edi
		jz	loc_436E30
		mov	[esp+2Ch+var_2C], edi
		call	_X509_get_subject_name
		mov	[esp+2Ch+var_20], 82031Fh
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], eax
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_X509_NAME_print_ex
		mov	[esp+2Ch+var_28], offset asc_4696AA ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_puts

loc_436C98:				; CODE XREF: _verify_callback+235j
		mov	ecx, [esp+2Ch+arg_0]
		test	ecx, ecx
		jz	loc_436DD0

loc_436CA4:				; CODE XREF: _verify_callback+208j
					; _verify_callback+21Aj
		cmp	esi, 2Bh	; switch 44 cases
		ja	short loc_436CB0 ; jumptable 00436CA9 default case
		jmp	ds:off_469700[esi*4] ; switch jump
; ---------------------------------------------------------------------------

loc_436CB0:				; CODE XREF: _verify_callback+97j
					; _verify_callback+99j
					; DATA XREF: ...
		test	esi, esi	; jumptable 00436CA9 default case
		jnz	short loc_436CCC
		cmp	[esp+2Ch+arg_0], 2
		jnz	short loc_436CCC

loc_436CBB:				; CODE XREF: _verify_callback+99j
					; DATA XREF: .rdata:off_469700o
		mov	[esp+2Ch+var_28], ebx ;	jumptable 00436CA9 case	43
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_policies_print

loc_436CCC:				; CODE XREF: _verify_callback+A2j
					; _verify_callback+A9j	...
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aVerifyReturnD	; "verify return:%d\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [esp+2Ch+arg_0]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436D00:				; CODE XREF: _verify_callback+99j
					; DATA XREF: .rdata:off_469700o
		mov	[esp+2Ch+var_28], offset aNotafter_0 ; jumptable 00436CA9 cases	10,14
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [edi]
		mov	eax, [eax+10h]
		mov	eax, [eax+4]

loc_436D1D:				; CODE XREF: _verify_callback+15Cj
		mov	[esp+2Ch+var_28], eax
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_ASN1_TIME_print
		mov	[esp+2Ch+var_28], offset asc_4696AA ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	short loc_436CCC
; ---------------------------------------------------------------------------
		align 10h

loc_436D50:				; CODE XREF: _verify_callback+99j
					; DATA XREF: .rdata:off_469700o
		mov	[esp+2Ch+var_28], offset aNotbefore_0 ;	jumptable 00436CA9 cases 9,13
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	eax, [edi]
		mov	eax, [eax+10h]
		mov	eax, [eax]
		jmp	short loc_436D1D
; ---------------------------------------------------------------------------
		align 10h

loc_436D70:				; CODE XREF: _verify_callback+99j
					; DATA XREF: .rdata:off_469700o
		mov	[esp+2Ch+var_28], offset aIssuer_4 ; jumptable 00436CA9	case 2
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_puts
		mov	[esp+2Ch+var_2C], edi
		call	_X509_get_issuer_name
		mov	[esp+2Ch+var_20], 82031Fh
		mov	[esp+2Ch+var_24], 0
		mov	[esp+2Ch+var_28], eax
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_X509_NAME_print_ex
		mov	[esp+2Ch+var_28], offset asc_4696AA ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_puts
		jmp	loc_436CCC
; ---------------------------------------------------------------------------
		align 10h

loc_436DD0:				; CODE XREF: _verify_callback+8Ej
		mov	[esp+2Ch+var_2C], esi
		call	_X509_verify_cert_error_string
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aVerifyErrorNum ; "verify error:num=%d:%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		cmp	ebp, ds:_verify_depth
		jg	short loc_436E20
		xor	eax, eax
		mov	edx, ds:_verify_return_error
		test	edx, edx
		setz	al
		mov	[esp+2Ch+arg_0], eax
		mov	ds:_verify_error, 0
		jmp	loc_436CA4
; ---------------------------------------------------------------------------
		align 10h

loc_436E20:				; CODE XREF: _verify_callback+1EBj
		mov	ds:_verify_error, 16h
		jmp	loc_436CA4
; ---------------------------------------------------------------------------
		align 10h

loc_436E30:				; CODE XREF: _verify_callback+44j
		mov	[esp+2Ch+var_28], offset aNoCert ; "<no	cert>\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_puts
		jmp	loc_436C98
_verify_callback endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _set_cert_stuff
_set_cert_stuff	proc near		; CODE XREF: _s_time_main+1DCp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [esp+1Ch+arg_0]
		mov	esi, [esp+1Ch+arg_4]
		mov	edi, [esp+1Ch+arg_8]
		test	esi, esi
		jz	short loc_436EB0
		mov	[esp+1Ch+var_14], 1
		mov	[esp+1Ch+var_18], esi
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_use_certificate_file
		test	eax, eax
		jle	loc_436F30
		test	edi, edi
		jz	loc_436F20

loc_436E8A:				; CODE XREF: _set_cert_stuff+D2j
		mov	[esp+1Ch+var_14], 1
		mov	[esp+1Ch+var_18], edi
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_use_PrivateKey_file
		test	eax, eax
		jle	short loc_436EE0
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_check_private_key
		mov	ebx, eax
		test	eax, eax
		jz	short loc_436EC0

loc_436EB0:				; CODE XREF: _set_cert_stuff+14j
		mov	ebx, 1
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436EC0:				; CODE XREF: _set_cert_stuff+5Ej
		mov	[esp+1Ch+var_18], offset aPrivateKeyDoes ; "Private key	does not match the certific"...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436EE0:				; CODE XREF: _set_cert_stuff+50j
		mov	[esp+1Ch+var_14], edi
		mov	[esp+1Ch+var_18], offset aUnableToGetPri ; "unable to get private key from '%s'\n"

loc_436EEC:				; CODE XREF: _set_cert_stuff+ECj
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_436F20
; ---------------------------------------------------------------------------
		align 10h

loc_436F20:				; CODE XREF: _set_cert_stuff+34j
					; _set_cert_stuff+C1j
		mov	edi, esi
		jmp	loc_436E8A
; ---------------------------------------------------------------------------
		align 10h

loc_436F30:				; CODE XREF: _set_cert_stuff+2Cj
		mov	[esp+1Ch+var_14], esi
		mov	[esp+1Ch+var_18], offset aUnableToGetCer ; "unable to get certificate from '%s'\n"
		jmp	short loc_436EEC
_set_cert_stuff	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _set_cert_key_stuff
_set_cert_key_stuff proc near		; CODE XREF: _s_server_main+1748p
					; _s_server_main+176Dp	...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_0]
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_436F82
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_use_certificate
		test	eax, eax
		jle	short loc_436FB0
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_use_PrivateKey
		test	eax, eax
		jle	short loc_436FE0
		mov	[esp+1Ch+var_1C], ebx
		call	_SSL_CTX_check_private_key
		mov	ebx, eax
		test	eax, eax
		jz	short loc_436F90

loc_436F82:				; CODE XREF: _set_cert_key_stuff+Ej
		mov	ebx, 1
		mov	eax, ebx
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436F90:				; CODE XREF: _set_cert_key_stuff+40j
		mov	[esp+1Ch+var_18], offset aPrivateKeyDoes ; "Private key	does not match the certific"...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	eax, ebx
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436FB0:				; CODE XREF: _set_cert_key_stuff+1Ej
		mov	[esp+1Ch+var_18], offset aErrorSettingCe ; "error setting certificate\n"

loc_436FB8:				; CODE XREF: _set_cert_key_stuff+A8j
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		mov	eax, ebx
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_436FE0:				; CODE XREF: _set_cert_key_stuff+32j
		mov	[esp+1Ch+var_18], offset aErrorSettingPr ; "error setting private key\n"
		jmp	short loc_436FB8
_set_cert_key_stuff endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _bio_dump_callback
_bio_dump_callback proc	near		; DATA XREF: _sv_body+BD8o
					; _www_body+828o ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_14		= dword	ptr  18h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	edi, [esp+2Ch+arg_0]
		mov	ebx, [esp+2Ch+arg_14]
		mov	[esp+2Ch+var_2C], edi
		call	_BIO_get_callback_arg
		mov	esi, eax
		test	eax, eax
		jz	short loc_437020
		cmp	[esp+2Ch+arg_4], 82h
		jz	short loc_437080
		cmp	[esp+2Ch+arg_4], 83h
		jz	short loc_437030

loc_437020:				; CODE XREF: _bio_dump_callback+1Aj
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_437030:				; CODE XREF: _bio_dump_callback+2Ej
		mov	[esp+2Ch+var_14], ebx
		mov	[esp+2Ch+var_18], ebx
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_1C], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], offset aWriteToPPLuByt ; "write to %p	[%p] (%lu bytes	=> %ld (0x%"...

loc_437054:				; CODE XREF: _bio_dump_callback+B4j
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_printf
		mov	[esp+2Ch+var_24], ebx
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_dump
		mov	eax, ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_437080:				; CODE XREF: _bio_dump_callback+24j
		mov	[esp+2Ch+var_14], ebx
		mov	[esp+2Ch+var_18], ebx
		mov	eax, [esp+2Ch+arg_C]
		mov	[esp+2Ch+var_1C], eax
		mov	eax, [esp+2Ch+arg_8]
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], offset aReadFromPPLuBy ; "read from %p [%p] (%lu bytes => %ld	(0x"...
		jmp	short loc_437054
_bio_dump_callback endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _apps_ssl_info_callback
_apps_ssl_info_callback	proc near	; DATA XREF: _s_server_main:loc_422BB1o
					; _s_server_main:loc_422E7Do ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	eax, [esp+2Ch+arg_4]
		mov	ebx, [esp+2Ch+arg_8]
		test	ah, 10h
		jnz	short loc_437110
		test	ah, 20h
		jz	loc_4371B0
		mov	esi, offset aSsl_accept	; "SSL_accept"
		test	al, 1
		jz	short loc_437119

loc_4370D5:				; CODE XREF: _apps_ssl_info_callback+67j
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_SSL_state_string_long
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aSS_4 ; "%s:%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_437110:				; CODE XREF: _apps_ssl_info_callback+11j
		mov	esi, offset aSsl_connect ; "SSL_connect"

loc_437115:				; CODE XREF: _apps_ssl_info_callback+105j
		test	al, 1
		jnz	short loc_4370D5

loc_437119:				; CODE XREF: _apps_ssl_info_callback+23j
		test	ah, 40h
		jz	short loc_437170
		test	al, 4
		jnz	loc_4371F0
		mov	edi, offset aWrite ; "write"

loc_43712B:				; CODE XREF: _apps_ssl_info_callback+145j
		mov	[esp+2Ch+var_2C], ebx
		call	_SSL_alert_desc_string_long
		mov	esi, eax
		mov	[esp+2Ch+var_2C], ebx
		call	_SSL_alert_type_string_long
		mov	[esp+2Ch+var_1C], esi
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+var_28], offset aSsl3AlertSSS ; "SSL3 alert %s:%s:%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf

loc_43715E:				; CODE XREF: _apps_ssl_info_callback+C2j
					; _apps_ssl_info_callback+C8j ...
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_437170:				; CODE XREF: _apps_ssl_info_callback+6Cj
		test	al, 2
		jz	short loc_43715E
		test	ebx, ebx
		jz	short loc_4371C0
		jns	short loc_43715E
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_SSL_state_string_long
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aSErrorInS ; "%s:error	in %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	short loc_43715E
; ---------------------------------------------------------------------------
		align 10h

loc_4371B0:				; CODE XREF: _apps_ssl_info_callback+16j
		mov	esi, offset aUndefined_0 ; "undefined"
		jmp	loc_437115
; ---------------------------------------------------------------------------
		align 10h

loc_4371C0:				; CODE XREF: _apps_ssl_info_callback+C6j
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+var_2C], eax
		call	_SSL_state_string_long
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aSFailedInS ; "%s:failed in %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	loc_43715E
; ---------------------------------------------------------------------------
		align 10h

loc_4371F0:				; CODE XREF: _apps_ssl_info_callback+70j
		mov	edi, offset aRead ; "read"
		jmp	loc_43712B
_apps_ssl_info_callback	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _msg_cb
_msg_cb		proc near		; DATA XREF: _sv_body:loc_41F620o
					; _www_body:loc_4203F0o ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_18		= dword	ptr  1Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, [esp+4Ch+arg_4]
		mov	edx, [esp+4Ch+arg_8]
		mov	ecx, [esp+4Ch+arg_C]
		mov	[esp+4Ch+var_20], ecx
		mov	esi, [esp+4Ch+arg_10]
		mov	ebx, [esp+4Ch+arg_18]
		mov	ecx, [esp+4Ch+arg_0]
		test	ecx, ecx
		jz	loc_437310
		mov	[esp+4Ch+var_28], offset asc_469936 ; ">>>"
		cmp	eax, 301h
		jz	loc_437323

loc_43723E:				; CODE XREF: _msg_cb+11Dj
		jle	loc_437330
		cmp	eax, 303h
		jz	loc_4374E0
		jl	loc_437360
		cmp	eax, 0FEFFh
		jnz	loc_4377B0
		mov	[esp+4Ch+var_24], offset aDtls1_0_0 ; "DTLS 1.0	"
		nop
		lea	esi, [esi+0]

loc_437270:				; CODE XREF: _msg_cb+12Bj _msg_cb+168j ...
		mov	ebp, offset byte_46994A
		mov	ecx, ebp

loc_437277:				; CODE XREF: _msg_cb+15Aj _msg_cb+31Aj ...
		lea	edi, [eax-300h]
		cmp	edi, 3
		jbe	loc_437380
		cmp	eax, 0FEFFh
		jz	loc_437380
		cmp	eax, 100h
		jz	loc_437380
		mov	eax, offset byte_46994A

loc_4372A1:				; CODE XREF: _msg_cb+1A6j _msg_cb+1B8j ...
		mov	[esp+4Ch+var_30], ebp
		mov	[esp+4Ch+var_34], ecx
		mov	[esp+4Ch+var_38], esi
		mov	[esp+4Ch+var_3C], eax
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_40], eax
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aSSSLength04lxS ; "%s %s%s [length %04lx]%s%s\n"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		test	esi, esi
		jnz	loc_437413

loc_4372D9:				; CODE XREF: _msg_cb+280j _msg_cb+358j
		mov	[esp+4Ch+arg_C], 0
		mov	[esp+4Ch+arg_8], 0
		mov	[esp+4Ch+arg_4], 0Bh
		mov	[esp+4Ch+arg_0], ebx
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	_BIO_ctrl
; ---------------------------------------------------------------------------
		jmp	short loc_437310
; ---------------------------------------------------------------------------
		align 10h

loc_437310:				; CODE XREF: _msg_cb+25j _msg_cb+101j
		mov	[esp+4Ch+var_28], offset asc_46993A ; "<<<"
		cmp	eax, 301h
		jnz	loc_43723E

loc_437323:				; CODE XREF: _msg_cb+38j
		mov	[esp+4Ch+var_24], offset aTls1_0_0 ; "TLS 1.0 "
		jmp	loc_437270
; ---------------------------------------------------------------------------

loc_437330:				; CODE XREF: _msg_cb:loc_43723Ej
		cmp	eax, 100h
		jz	loc_4374D0
		cmp	eax, 300h
		jz	short loc_437370
		cmp	eax, 2
		jz	loc_4374F0

loc_43734B:				; CODE XREF: _msg_cb+5B3j
		mov	[esp+4Ch+var_24], offset a??? ;	"???"
		mov	ebp, offset byte_46994A
		mov	ecx, ebp
		jmp	loc_437277
; ---------------------------------------------------------------------------
		align 10h

loc_437360:				; CODE XREF: _msg_cb+4Fj
		mov	[esp+4Ch+var_24], offset aTls1_1_1 ; "TLS 1.1 "
		jmp	loc_437270
; ---------------------------------------------------------------------------
		align 10h

loc_437370:				; CODE XREF: _msg_cb+140j
		mov	[esp+4Ch+var_24], offset aSsl3_0_0 ; "SSL 3.0 "
		jmp	loc_437270
; ---------------------------------------------------------------------------
		align 10h

loc_437380:				; CODE XREF: _msg_cb+80j _msg_cb+8Bj ...
		lea	eax, [edx-14h]
		cmp	eax, 2
		ja	short loc_4373B0
		mov	eax, ds:_CSWTCH_26[eax*4]
		cmp	edx, 15h
		jnz	loc_437490
		cmp	esi, 2
		jz	loc_437560
		mov	ecx, offset a???_0 ; ",	???"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------
		align 10h

loc_4373B0:				; CODE XREF: _msg_cb+186j
		mov	eax, offset byte_46994A

loc_4373B5:				; CODE XREF: _msg_cb+293j
		cmp	edx, 18h
		jnz	loc_4372A1
		test	esi, esi
		jz	loc_437520
		mov	edx, [esp+4Ch+var_20]
		mov	dl, [edx]
		cmp	dl, 1
		jz	loc_437790
		cmp	dl, 2
		jz	loc_437593
		mov	edx, offset aHeartbeat ; ", Heartbeat"

loc_4373E3:				; CODE XREF: _msg_cb+398j _msg_cb+595j
		mov	[esp+4Ch+var_30], ebp
		mov	[esp+4Ch+var_34], edx
		mov	[esp+4Ch+var_38], esi
		mov	[esp+4Ch+var_3C], eax
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_40], eax
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aSSSLength04lxS ; "%s %s%s [length %04lx]%s%s\n"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf

loc_437413:				; CODE XREF: _msg_cb+D3j
		mov	[esp+4Ch+var_48], offset asc_469CD5 ; "	  "
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		xor	ebp, ebp
		mov	edi, [esp+4Ch+var_20]
		lea	esi, [esi+0]

loc_437430:				; CODE XREF: _msg_cb+254j _msg_cb+258j ...
		xor	eax, eax
		mov	al, [edi+ebp]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset a02x_4	; " %02x"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		inc	ebp
		cmp	esi, ebp
		jbe	short loc_437470
		test	ebp, 0Fh
		jnz	short loc_437430
		test	ebp, ebp
		jz	short loc_437430
		mov	[esp+4Ch+var_48], offset asc_469CCA ; "\n   "
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		jmp	short loc_437430
; ---------------------------------------------------------------------------
		align 10h

loc_437470:				; CODE XREF: _msg_cb+24Cj
		mov	[esp+4Ch+var_48], offset asc_4696AA ; "\n"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		jmp	loc_4372D9
; ---------------------------------------------------------------------------
		align 10h

loc_437490:				; CODE XREF: _msg_cb+192j
		cmp	edx, 16h
		jnz	loc_4373B5
		test	esi, esi
		jz	short loc_4374C0
		mov	edx, [esp+4Ch+var_20]
		mov	dl, [edx]
		cmp	dl, 14h
		ja	short loc_4374C0
		and	edx, 0FFh
		mov	ecx, ds:_CSWTCH_27[edx*4]
		jmp	loc_4372A1
; ---------------------------------------------------------------------------
		align 10h

loc_4374C0:				; CODE XREF: _msg_cb+29Bj _msg_cb+2A6j
		mov	ecx, offset a??? ; "???"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------
		align 10h

loc_4374D0:				; CODE XREF: _msg_cb+135j
		mov	[esp+4Ch+var_24], offset aDtls1_0Bad ; "DTLS 1.0 (bad) "
		jmp	loc_437270
; ---------------------------------------------------------------------------
		align 10h

loc_4374E0:				; CODE XREF: _msg_cb+49j
		mov	[esp+4Ch+var_24], offset aTls1_2_1 ; "TLS 1.2 "
		jmp	loc_437270
; ---------------------------------------------------------------------------
		align 10h

loc_4374F0:				; CODE XREF: _msg_cb+145j
		mov	[esp+4Ch+var_24], offset aSsl2_0 ; "SSL	2.0"

loc_4374F8:				; CODE XREF: _msg_cb+5C1j
		test	esi, esi
		jz	short loc_437510
		mov	edi, [esp+4Ch+var_20]
		cmp	byte ptr [edi],	8
		ja	short loc_437510
		xor	ecx, ecx
		mov	cl, [edi]
		jmp	ds:off_469CDC[ecx*4]
; ---------------------------------------------------------------------------

loc_437510:				; CODE XREF: _msg_cb+2FAj _msg_cb+303j
		mov	ebp, offset byte_46994A
		mov	ecx, offset a??? ; "???"
		jmp	loc_437277
; ---------------------------------------------------------------------------
		align 10h

loc_437520:				; CODE XREF: _msg_cb+1C0j
		mov	[esp+4Ch+var_30], ebp
		mov	[esp+4Ch+var_34], offset aHeartbeat ; ", Heartbeat"
		mov	[esp+4Ch+var_38], 0
		mov	[esp+4Ch+var_3C], eax
		mov	eax, [esp+4Ch+var_24]
		mov	[esp+4Ch+var_40], eax
		mov	eax, [esp+4Ch+var_28]
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aSSSLength04lxS ; "%s %s%s [length %04lx]%s%s\n"
		mov	[esp+4Ch+var_4C], ebx
		call	_BIO_printf
		jmp	loc_4372D9
; ---------------------------------------------------------------------------
		align 10h

loc_437560:				; CODE XREF: _msg_cb+19Bj
		mov	edx, [esp+4Ch+var_20]
		mov	dl, [edx]
		cmp	dl, 1
		jz	short loc_43759D
		cmp	dl, 2
		jz	loc_43779A
		mov	ecx, offset a???_0 ; ",	???"

loc_437579:				; CODE XREF: _msg_cb+3A2j _msg_cb+59Fj
		mov	edi, [esp+4Ch+var_20]
		cmp	byte ptr [edi+1], 73h
		ja	loc_43777B
		xor	edx, edx
		mov	dl, [edi+1]
		jmp	ds:off_469D00[edx*4]
; ---------------------------------------------------------------------------

loc_437593:				; CODE XREF: _msg_cb+1D8j
		mov	edx, offset aHeartbeatrespo ; ", HeartbeatResponse"
		jmp	loc_4373E3
; ---------------------------------------------------------------------------

loc_43759D:				; CODE XREF: _msg_cb+369j
		mov	ecx, offset aWarning ; ", warning"
		jmp	short loc_437579
; ---------------------------------------------------------------------------

loc_4375A4:				; CODE XREF: _msg_cb+309j
					; DATA XREF: .rdata:00469CE0o
		mov	ebp, offset byte_46994A
		mov	ecx, offset aClientHello ; ", CLIENT-HELLO"
		jmp	loc_437277
; ---------------------------------------------------------------------------

loc_4375B3:				; CODE XREF: _msg_cb+309j
					; DATA XREF: .rdata:00469CE4o
		mov	ebp, offset byte_46994A
		mov	ecx, offset aClientMasterKe ; ", CLIENT-MASTER-KEY"
		jmp	loc_437277
; ---------------------------------------------------------------------------

loc_4375C2:				; CODE XREF: _msg_cb+309j
					; DATA XREF: .rdata:off_469CDCo
		cmp	esi, 2
		jbe	loc_4377C6
		mov	edi, [esp+4Ch+var_20]
		xor	ecx, ecx
		mov	cl, [edi+1]
		shl	ecx, 8
		movzx	ebp, byte ptr [edi+2]
		and	ebp, 0FFh
		lea	ecx, [ecx+ebp-1]
		cmp	ecx, 5
		ja	loc_4377C6
		mov	ebp, ds:_CSWTCH_25[ecx*4]
		mov	ecx, offset aError_3 ; ", ERROR:"
		jmp	loc_437277
; ---------------------------------------------------------------------------

loc_4375FF:				; CODE XREF: _msg_cb+309j
					; DATA XREF: .rdata:00469CFCo
		mov	ebp, offset byte_46994A
		mov	ecx, offset aClientCertif_2 ; ", CLIENT-CERTIFICATE"
		jmp	loc_437277
; ---------------------------------------------------------------------------

loc_43760E:				; CODE XREF: _msg_cb+309j
					; DATA XREF: .rdata:00469CF8o
		mov	ebp, offset byte_46994A
		mov	ecx, offset aRequestCertifi ; ", REQUEST-CERTIFICATE"
		jmp	loc_437277
; ---------------------------------------------------------------------------

loc_43761D:				; CODE XREF: _msg_cb+309j
					; DATA XREF: .rdata:00469CF4o
		mov	ebp, offset byte_46994A
		mov	ecx, offset aServerFinished ; ", SERVER-FINISHED"
		jmp	loc_437277
; ---------------------------------------------------------------------------

loc_43762C:				; CODE XREF: _msg_cb+309j
					; DATA XREF: .rdata:00469CF0o
		mov	ebp, offset byte_46994A
		mov	ecx, offset aServerVerify ; ", SERVER-VERIFY"
		jmp	loc_437277
; ---------------------------------------------------------------------------

loc_43763B:				; CODE XREF: _msg_cb+309j
					; DATA XREF: .rdata:00469CECo
		mov	ebp, offset byte_46994A
		mov	ecx, offset aServerHello ; ", SERVER-HELLO"
		jmp	loc_437277
; ---------------------------------------------------------------------------

loc_43764A:				; CODE XREF: _msg_cb+309j
					; DATA XREF: .rdata:00469CE8o
		mov	ebp, offset byte_46994A
		mov	ecx, offset aClientFinished ; ", CLIENT-FINISHED"
		jmp	loc_437277
; ---------------------------------------------------------------------------

loc_437659:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aClose_notify ; " close_notify"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437663:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aUnexpected_mes ; "	unexpected_message"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_43766D:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aBad_certificat ; "	bad_certificate_hash_value"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437677:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aBad_certific_0 ; "	bad_certificate_status_response"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437681:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aDecompression_ ; "	decompression_failure"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_43768B:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aRecord_overflo ; "	record_overflow"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437695:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aDecryption_fai ; "	decryption_failed"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_43769F:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aBad_record_mac ; "	bad_record_mac"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_4376A9:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aUnknown_ca	; " unknown_ca"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_4376B3:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aIllegal_parame ; "	illegal_parameter"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_4376BD:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aCertificate_un ; "	certificate_unknown"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_4376C7:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aCertificate_ex ; "	certificate_expired"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_4376D1:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aCertificate_re ; "	certificate_revoked"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_4376DB:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aUnsupported_ce ; "	unsupported_certificate"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_4376E5:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aBad_certific_1 ; "	bad_certificate"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_4376EF:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aHandshake_fail ; "	handshake_failure"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_4376F9:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aUnknown_psk_id ; "	unknown_psk_identity"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437703:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aUnrecognized_n ; "	unrecognized_name"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_43770D:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aCertificate__0 ; "	certificate_unobtainable"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437717:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aUnsupported_ex ; "	unsupported_extension"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437721:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aNo_renegotiati ; "	no_renegotiation"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_43772B:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aUser_canceled ; " user_canceled"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437735:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aInternal_error ; "	internal_error"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_43773F:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aInsufficient_s ; "	insufficient_security"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437749:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aProtocol_versi ; "	protocol_version"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437753:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aExport_restric ; "	export_restriction"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_43775D:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aDecrypt_error ; " decrypt_error"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437767:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aDecode_error ; " decode_error"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_437771:				; CODE XREF: _msg_cb+309j _msg_cb+38Cj
					; DATA XREF: ...
		mov	ebp, offset aAccess_denied ; " access_denied"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------

loc_43777B:				; CODE XREF: _msg_cb+309j _msg_cb+381j ...
		mov	ebp, offset a???_1 ; " ???"
		jmp	loc_4372A1
; ---------------------------------------------------------------------------
		align 10h

loc_437790:				; CODE XREF: _msg_cb+1CFj
		mov	edx, offset aHeartbeatreque ; ", HeartbeatRequest"
		jmp	loc_4373E3
; ---------------------------------------------------------------------------

loc_43779A:				; CODE XREF: _msg_cb+36Ej
		mov	ecx, offset aFatal ; ",	fatal"
		jmp	loc_437579
; ---------------------------------------------------------------------------
		align 10h

loc_4377B0:				; CODE XREF: _msg_cb+5Aj
		cmp	eax, 2
		jnz	loc_43734B
		mov	[esp+4Ch+var_24], offset a??? ;	"???"
		jmp	loc_4374F8
; ---------------------------------------------------------------------------

loc_4377C6:				; CODE XREF: _msg_cb+3C5j _msg_cb+3E8j
		mov	ebp, offset a???_1 ; " ???"
		mov	ecx, offset aError_3 ; ", ERROR:"
		jmp	loc_437277
_msg_cb		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _tlsext_cb
_tlsext_cb	proc near		; DATA XREF: _sv_body:loc_41F5A0o
					; _sv_body:loc_41F5E0o	...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	ecx, [esp+2Ch+arg_4]
		mov	eax, [esp+2Ch+arg_8]
		mov	edi, [esp+2Ch+arg_C]
		mov	esi, [esp+2Ch+arg_10]
		mov	ebx, [esp+2Ch+arg_14]
		cmp	eax, 9
		jz	loc_437A70
		jle	loc_4378B0
		cmp	eax, 0Eh
		jz	loc_4379B0
		jle	loc_437900
		cmp	eax, 23h
		jz	loc_437A80
		jg	loc_437960
		cmp	eax, 0Fh
		jz	loc_4379F0
		mov	edx, offset aTlsPadding	; "TLS padding"
		cmp	eax, 15h
		jnz	loc_4378F0
		xchg	ax, ax

loc_437840:				; CODE XREF: _tlsext_cb+FBj
					; _tlsext_cb+115j ...
		test	ecx, ecx
		jnz	loc_437980
		mov	ecx, offset aClient ; "client"

loc_43784D:				; CODE XREF: _tlsext_cb+1A5j
		mov	[esp+2Ch+var_18], esi
		mov	[esp+2Ch+var_1C], eax
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], ecx
		mov	[esp+2Ch+var_28], offset aTlsSExtensionS ; "TLS	%s extension \"%s\" (id=%d), len=%d"...
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], edi
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_dump
		mov	[esp+2Ch+arg_C], 0
		mov	[esp+2Ch+arg_8], 0
		mov	[esp+2Ch+arg_4], 0Bh
		mov	[esp+2Ch+arg_0], ebx
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		jmp	_BIO_ctrl
; ---------------------------------------------------------------------------
		align 10h

loc_4378B0:				; CODE XREF: _tlsext_cb+23j
		cmp	eax, 4
		jz	loc_437A20
		jg	short loc_437930
		cmp	eax, 1
		jz	loc_4379E0
		jle	loc_437990
		cmp	eax, 2
		jz	loc_437A00
		mov	edx, offset aTrustedCaKeys ; "trusted CA keys"
		cmp	eax, 3
		jz	loc_437840
		jmp	short loc_4378F0
; ---------------------------------------------------------------------------
		align 10h

loc_4378F0:				; CODE XREF: _tlsext_cb+58j
					; _tlsext_cb+101j ...
		mov	edx, offset aUnknown_1 ; "unknown"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437900:				; CODE XREF: _tlsext_cb+32j
		cmp	eax, 0Bh
		jz	loc_4379C0
		jl	loc_437A40
		cmp	eax, 0Ch
		jz	loc_437A30
		cmp	eax, 0Dh
		jnz	short loc_4378F0
		mov	edx, offset aSignatureAlgor ; "signature algorithms"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437930:				; CODE XREF: _tlsext_cb+D9j
		cmp	eax, 6
		jz	loc_4379D0
		jl	loc_437A60
		cmp	eax, 7
		jz	loc_437A50
		cmp	eax, 8
		jnz	short loc_4378F0
		mov	edx, offset aServerAuthz ; "server authz"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437960:				; CODE XREF: _tlsext_cb+41j
		cmp	eax, 3374h
		jz	loc_437A10
		mov	edx, offset aRenegotiationI ; "renegotiation info"
		cmp	eax, 0FF01h
		jz	loc_437840
		jmp	loc_4378F0
; ---------------------------------------------------------------------------

loc_437980:				; CODE XREF: _tlsext_cb+62j
		mov	ecx, offset aServer ; "server"
		jmp	loc_43784D
; ---------------------------------------------------------------------------
		align 10h

loc_437990:				; CODE XREF: _tlsext_cb+E4j
		mov	edx, offset aServerName	; "server name"
		test	eax, eax
		jz	loc_437840
		jmp	loc_4378F0
; ---------------------------------------------------------------------------
		align 10h

loc_4379B0:				; CODE XREF: _tlsext_cb+2Cj
		mov	edx, offset aUseSrtp ; "use SRTP"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_4379C0:				; CODE XREF: _tlsext_cb+123j
		mov	edx, offset aEcPointFormats ; "EC point	formats"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_4379D0:				; CODE XREF: _tlsext_cb+153j
		mov	edx, offset aUserMapping ; "user mapping"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_4379E0:				; CODE XREF: _tlsext_cb+DEj
		mov	edx, offset aMaxFragmentLen ; "max fragment length"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_4379F0:				; CODE XREF: _tlsext_cb+4Aj
		mov	edx, offset aHeartbeat_0 ; "heartbeat"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437A00:				; CODE XREF: _tlsext_cb+EDj
		mov	edx, offset aClientCertif_3 ; "client certificate URL"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437A10:				; CODE XREF: _tlsext_cb+185j
		mov	edx, offset aNextProtocol ; "next protocol"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437A20:				; CODE XREF: _tlsext_cb+D3j
		mov	edx, offset aTruncatedHmac ; "truncated	HMAC"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437A30:				; CODE XREF: _tlsext_cb+132j
		mov	edx, offset aSrp ; "SRP"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437A40:				; CODE XREF: _tlsext_cb+129j
		mov	edx, offset aEllipticCurves ; "elliptic	curves"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437A50:				; CODE XREF: _tlsext_cb+162j
		mov	edx, offset aClientAuthz ; "client authz"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437A60:				; CODE XREF: _tlsext_cb+159j
		mov	edx, offset aStatusRequest ; "status request"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437A70:				; CODE XREF: _tlsext_cb+1Dj
		mov	edx, offset aCertType ;	"cert type"
		jmp	loc_437840
; ---------------------------------------------------------------------------
		align 10h

loc_437A80:				; CODE XREF: _tlsext_cb+3Bj
		mov	edx, offset aSessionTicket ; "session ticket"
		jmp	loc_437840
_tlsext_cb	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _generate_cookie_callback
_generate_cookie_callback proc near	; DATA XREF: _s_server_main+1886o

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_7D		= byte ptr -7Dh
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_6F		= byte ptr -6Fh
var_5C		= byte ptr -5Ch
var_5B		= byte ptr -5Bh
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	eax, ds:_cookie_initialized
		test	eax, eax
		jnz	short loc_437AC9
		mov	[esp+9Ch+var_98], 10h
		mov	[esp+9Ch+var_9C], offset _cookie_secret
		call	_RAND_bytes
		test	eax, eax
		jle	loc_437D10
		mov	ds:_cookie_initialized,	1

loc_437AC9:				; CODE XREF: _generate_cookie_callback+11j
		mov	eax, [esp+9Ch+arg_0]
		mov	[esp+9Ch+var_9C], eax
		call	_SSL_get_rbio
		lea	edx, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_90], edx
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], 2Eh
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_ctrl
		mov	eax, [esp+9Ch+var_78]
		cmp	ax, 2
		jz	loc_437C80
		cmp	ax, 17h
		jz	loc_437C40
		mov	[esp+9Ch+var_94], offset a0 ; "0"
		mov	[esp+9Ch+var_98], 307h
		mov	[esp+9Ch+var_9C], offset aS_cb_c ; "s_cb.c"
		call	_OpenSSLDie
		xor	eax, eax
		xor	ebp, ebp

loc_437B30:				; CODE XREF: _generate_cookie_callback+1BAj
					; _generate_cookie_callback+1FAj
		mov	[esp+9Ch+var_94], 30Ah
		mov	[esp+9Ch+var_98], offset aS_cb_c ; "s_cb.c"
		mov	[esp+9Ch+var_9C], eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_437D30
		mov	eax, [esp+9Ch+var_78]
		cmp	ax, 2
		jz	loc_437CC0
		cmp	ax, 17h
		jnz	loc_437C90
		mov	ax, word ptr [esp+9Ch+var_78+2]
		mov	[ebx], ax
		lea	edi, [ebx+2]
		lea	esi, [esp+9Ch+var_70]
		mov	eax, 10h
		test	edi, 1
		jnz	loc_437D90

loc_437B8A:				; CODE XREF: _generate_cookie_callback+313j
		test	edi, 2
		jnz	loc_437DB0

loc_437B96:				; CODE XREF: _generate_cookie_callback+32Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jnz	loc_437CF0
		test	al, 1
		jnz	loc_437CE0
		nop

loc_437BB0:				; CODE XREF: _generate_cookie_callback+21Cj
					; _generate_cookie_callback+23Fj ...
		call	_EVP_sha1
		lea	edx, [esp+9Ch+var_7C]
		mov	[esp+9Ch+var_84], edx
		lea	esi, [esp+9Ch+var_5C]
		mov	[esp+9Ch+var_88], esi
		mov	[esp+9Ch+var_8C], ebp
		mov	[esp+9Ch+var_90], ebx
		mov	[esp+9Ch+var_94], 10h
		mov	[esp+9Ch+var_98], offset _cookie_secret
		mov	[esp+9Ch+var_9C], eax
		call	_HMAC
		mov	[esp+9Ch+var_9C], ebx
		call	_CRYPTO_free
		mov	eax, [esp+9Ch+var_7C]
		mov	edx, eax
		mov	edi, [esp+9Ch+arg_4]
		cmp	eax, 4
		jnb	short loc_437C50

loc_437BFF:				; CODE XREF: _generate_cookie_callback+1DFj
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_437C11
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_437C11:				; CODE XREF: _generate_cookie_callback+174j
		and	edx, 1
		jz	short loc_437C20
		mov	bl, [esi+ecx]
		mov	[esp+9Ch+var_7D], bl
		mov	[edi+ecx], bl

loc_437C20:				; CODE XREF: _generate_cookie_callback+184j
		mov	edx, [esp+9Ch+arg_8]
		mov	[edx], eax
		mov	eax, 1

loc_437C2E:				; CODE XREF: _generate_cookie_callback+297j
					; _generate_cookie_callback+2B7j
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_437C40:				; CODE XREF: _generate_cookie_callback+7Aj
		mov	eax, 12h
		mov	ebp, 12h
		jmp	loc_437B30
; ---------------------------------------------------------------------------
		align 10h

loc_437C50:				; CODE XREF: _generate_cookie_callback+16Dj
		test	edi, 1
		jnz	loc_437D50

loc_437C5C:				; CODE XREF: _generate_cookie_callback+2D0j
		test	edi, 2
		jnz	loc_437D70

loc_437C68:				; CODE XREF: _generate_cookie_callback+2EFj
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	short loc_437BFF
; ---------------------------------------------------------------------------
		jmp	short loc_437C80
; ---------------------------------------------------------------------------
		align 10h

loc_437C80:				; CODE XREF: _generate_cookie_callback+70j
					; _generate_cookie_callback+1E1j
		mov	eax, 6
		mov	ebp, 6
		jmp	loc_437B30
; ---------------------------------------------------------------------------
		align 10h

loc_437C90:				; CODE XREF: _generate_cookie_callback+D4j
		mov	[esp+9Ch+var_94], offset a0 ; "0"
		mov	[esp+9Ch+var_98], 31Fh
		mov	[esp+9Ch+var_9C], offset aS_cb_c ; "s_cb.c"
		call	_OpenSSLDie
		jmp	loc_437BB0
; ---------------------------------------------------------------------------
		jmp	short loc_437CC0
; ---------------------------------------------------------------------------
		align 10h

loc_437CC0:				; CODE XREF: _generate_cookie_callback+CAj
					; _generate_cookie_callback+221j
		mov	ax, word ptr [esp+9Ch+var_78+2]
		mov	[ebx], ax
		mov	eax, [esp+9Ch+var_74]
		mov	[ebx+2], eax
		jmp	loc_437BB0
; ---------------------------------------------------------------------------
		align 10h

loc_437CE0:				; CODE XREF: _generate_cookie_callback+119j
					; _generate_cookie_callback+273j
		mov	al, [esi+edx]
		mov	[esp+9Ch+var_7D], al
		mov	[edi+edx], al
		jmp	loc_437BB0
; ---------------------------------------------------------------------------
		align 10h

loc_437CF0:				; CODE XREF: _generate_cookie_callback+111j
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2
		test	al, 1
		jz	loc_437BB0
		jmp	short loc_437CE0
; ---------------------------------------------------------------------------
		align 10h

loc_437D10:				; CODE XREF: _generate_cookie_callback+29j
		mov	[esp+9Ch+var_98], offset aErrorSettingRa ; "error setting random cookie	secret\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_437C2E
; ---------------------------------------------------------------------------
		align 10h

loc_437D30:				; CODE XREF: _generate_cookie_callback+BCj
		mov	[esp+9Ch+var_98], offset aOutOfMemory_10 ; "out	of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_437C2E
; ---------------------------------------------------------------------------
		align 10h

loc_437D50:				; CODE XREF: _generate_cookie_callback+1C6j
		mov	cl, [esi]
		mov	[esp+9Ch+var_7D], cl
		mov	[edi], cl
		inc	edi
		lea	esi, [esp+9Ch+var_5B]
		lea	edx, [eax-1]
		jmp	loc_437C5C
; ---------------------------------------------------------------------------
		align 10h

loc_437D70:				; CODE XREF: _generate_cookie_callback+1D2j
		mov	cx, [esi]
		mov	[edi], cx
		add	edi, 2
		add	esi, 2
		sub	edx, 2
		jmp	loc_437C68
; ---------------------------------------------------------------------------
		align 10h

loc_437D90:				; CODE XREF: _generate_cookie_callback+F4j
		mov	al, [esp+9Ch+var_70]
		mov	[ebx+2], al
		lea	edi, [ebx+3]
		lea	esi, [esp+9Ch+var_6F]
		mov	eax, 0Fh
		jmp	loc_437B8A
; ---------------------------------------------------------------------------
		align 10h

loc_437DB0:				; CODE XREF: _generate_cookie_callback+100j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_437B96
_generate_cookie_callback endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl verify_cookie_callback(int, void *, size_t)
		public _verify_cookie_callback
_verify_cookie_callback	proc near	; DATA XREF: _s_server_main+189Bo

var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_7D		= byte ptr -7Dh
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= byte ptr -70h
var_6F		= byte ptr -6Fh
var_5C		= byte ptr -5Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		mov	eax, ds:_cookie_initialized
		test	eax, eax
		jnz	short loc_437DE0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_437DE0:				; CODE XREF: _verify_cookie_callback+7j
		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	eax, [esp+9Ch+arg_0]
		mov	[esp+9Ch+var_9C], eax
		call	_SSL_get_rbio
		lea	edx, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_90], edx
		mov	[esp+9Ch+var_94], 0
		mov	[esp+9Ch+var_98], 2Eh
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_ctrl
		mov	eax, [esp+9Ch+var_78]
		cmp	ax, 2
		jz	loc_437F50
		cmp	ax, 17h
		jz	loc_437F40
		mov	[esp+9Ch+var_94], offset a0 ; "0"
		mov	[esp+9Ch+var_98], 350h
		mov	[esp+9Ch+var_9C], offset aS_cb_c ; "s_cb.c"
		call	_OpenSSLDie
		xor	eax, eax
		xor	ebp, ebp

loc_437E51:				; CODE XREF: _verify_cookie_callback+17Aj
					; _verify_cookie_callback+18Aj
		mov	[esp+9Ch+var_94], 353h
		mov	[esp+9Ch+var_98], offset aS_cb_c ; "s_cb.c"
		mov	[esp+9Ch+var_9C], eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_437FF0
		mov	eax, [esp+9Ch+var_78]
		cmp	ax, 2
		jz	loc_437F90
		cmp	ax, 17h
		jnz	loc_437F60
		mov	ax, word ptr [esp+9Ch+var_78+2]
		mov	[ebx], ax
		lea	edi, [ebx+2]
		lea	esi, [esp+9Ch+var_70]
		mov	eax, 10h
		test	edi, 1
		jnz	loc_438030

loc_437EAB:				; CODE XREF: _verify_cookie_callback+273j
		test	edi, 2
		jnz	loc_438010

loc_437EB7:				; CODE XREF: _verify_cookie_callback+24Fj
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		xor	edx, edx
		test	al, 2
		jz	short loc_437ECF
		mov	dx, [esi]
		mov	[edi], dx
		mov	edx, 2

loc_437ECF:				; CODE XREF: _verify_cookie_callback+F2j
		test	al, 1
		jz	short loc_437EE0
		mov	al, [esi+edx]
		mov	[esp+9Ch+var_7D], al
		mov	[edi+edx], al
		lea	esi, [esi+0]

loc_437EE0:				; CODE XREF: _verify_cookie_callback+101j
					; _verify_cookie_callback+1ACj	...
		call	_EVP_sha1
		lea	edx, [esp+9Ch+var_7C]
		mov	[esp+9Ch+var_84], edx
		lea	esi, [esp+9Ch+var_5C]
		mov	[esp+9Ch+var_88], esi
		mov	[esp+9Ch+var_8C], ebp
		mov	[esp+9Ch+var_90], ebx
		mov	[esp+9Ch+var_94], 10h
		mov	[esp+9Ch+var_98], offset _cookie_secret
		mov	[esp+9Ch+var_9C], eax
		call	_HMAC
		mov	[esp+9Ch+var_9C], ebx
		call	_CRYPTO_free
		mov	eax, [esp+9Ch+var_7C]
		cmp	[esp+9Ch+arg_8], eax
		jz	loc_437FB0
		xor	eax, eax

loc_437F30:				; CODE XREF: _verify_cookie_callback+237j
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_437F40:				; CODE XREF: _verify_cookie_callback+5Bj
		mov	eax, 12h
		mov	ebp, 12h
		jmp	loc_437E51
; ---------------------------------------------------------------------------
		align 10h

loc_437F50:				; CODE XREF: _verify_cookie_callback+51j
		mov	eax, 6
		mov	ebp, 6
		jmp	loc_437E51
; ---------------------------------------------------------------------------
		align 10h

loc_437F60:				; CODE XREF: _verify_cookie_callback+B5j
		mov	[esp+9Ch+var_94], offset a0 ; "0"
		mov	[esp+9Ch+var_98], 368h
		mov	[esp+9Ch+var_9C], offset aS_cb_c ; "s_cb.c"
		call	_OpenSSLDie
		jmp	loc_437EE0
; ---------------------------------------------------------------------------
		jmp	short loc_437F90
; ---------------------------------------------------------------------------
		align 10h

loc_437F90:				; CODE XREF: _verify_cookie_callback+ABj
					; _verify_cookie_callback+1B1j
		mov	ax, word ptr [esp+9Ch+var_78+2]
		mov	[ebx], ax
		mov	eax, [esp+9Ch+var_74]
		mov	[ebx+2], eax
		jmp	loc_437EE0
; ---------------------------------------------------------------------------
		align 10h

loc_437FB0:				; CODE XREF: _verify_cookie_callback+158j
		mov	eax, [esp+9Ch+arg_8]
		mov	[esp+9Ch+var_94], eax ;	size_t
		mov	eax, [esp+9Ch+arg_4]
		mov	[esp+9Ch+var_98], eax ;	void *
		mov	[esp+9Ch+var_9C], esi ;	void *
		call	_memcmp
		test	eax, eax
		setz	al
		and	eax, 0FFh
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_437FF0:				; CODE XREF: _verify_cookie_callback+9Dj
		mov	[esp+9Ch+var_98], offset aOutOfMemory_10 ; "out	of memory\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_9C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_437F30
; ---------------------------------------------------------------------------
		align 10h

loc_438010:				; CODE XREF: _verify_cookie_callback+E1j
		mov	dx, [esi]
		mov	[edi], dx
		add	edi, 2
		add	esi, 2
		sub	eax, 2
		jmp	loc_437EB7
; ---------------------------------------------------------------------------
		align 10h

loc_438030:				; CODE XREF: _verify_cookie_callback+D5j
		mov	al, [esp+9Ch+var_70]
		mov	[ebx+2], al
		lea	edi, [ebx+3]
		lea	esi, [esp+9Ch+var_6F]
		mov	eax, 0Fh
		jmp	loc_437EAB
_verify_cookie_callback	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_GetHostByName	proc near		; CODE XREF: _init_client+57p
					; _do_server+1E7p ...

var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, eax
		mov	edi, ds:dword_476070
		cmp	edi, 0FFFFFFFFh
		jz	loc_438140
		test	edi, edi
		jnz	loc_438140
		mov	eax, ds:dword_476104

loc_438077:				; CODE XREF: _GetHostByName+117j
		xor	ebx, ebx

loc_438079:				; CODE XREF: _GetHostByName+124j
		test	eax, eax
		jz	short loc_43809D
		mov	dword ptr [esp+8], 80h ; size_t
		mov	dword ptr [esp+4], offset byte_476074 ;	char *
		mov	[esp], esi	; char *
		call	_strncmp
		test	eax, eax
		jz	loc_438240

loc_43809D:				; CODE XREF: _GetHostByName+2Bj
		mov	eax, ds:dword_476198
		cmp	edi, eax
		jbe	short loc_4380AD
		mov	edi, eax
		mov	ebx, 2

loc_4380AD:				; CODE XREF: _GetHostByName+54j
		test	eax, eax
		jz	short loc_4380D1
		mov	dword ptr [esp+8], 80h ; size_t
		mov	dword ptr [esp+4], offset byte_476108 ;	char *
		mov	[esp], esi	; char *
		call	_strncmp
		test	eax, eax
		jz	loc_438250

loc_4380D1:				; CODE XREF: _GetHostByName+5Fj
		mov	eax, ds:dword_47622C
		cmp	eax, edi
		jnb	short loc_4380DF
		mov	ebx, 3

loc_4380DF:				; CODE XREF: _GetHostByName+88j
		test	eax, eax
		jz	short loc_438103
		mov	dword ptr [esp+8], 80h ; size_t
		mov	dword ptr [esp+4], offset byte_47619C ;	char *
		mov	[esp], esi	; char *
		call	_strncmp
		test	eax, eax
		jz	loc_438260

loc_438103:				; CODE XREF: _GetHostByName+91j
		inc	ds:_ghbn_miss
		mov	[esp], esi	; name
		call	ds:__imp__gethostbyname@4
		push	edx
		test	eax, eax
		mov	[ebp+var_1C], eax
		jz	loc_438267
		mov	[esp], esi	; char *
		call	_strlen
		cmp	eax, 7Fh
		mov	edx, [ebp+var_1C]
		jbe	short loc_438180
		mov	eax, edx

loc_438130:				; CODE XREF: _GetHostByName+17Ej
					; _GetHostByName+1DBj ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_438140:				; CODE XREF: _GetHostByName+14j
					; _GetHostByName+1Cj
		mov	dword ptr [esp+8], 80h ; size_t
		mov	dword ptr [esp+4], offset _ghbn_cache ;	char *
		mov	[esp], esi	; char *
		call	_strncmp
		test	eax, eax
		jz	loc_438200
		mov	eax, ds:dword_476104
		cmp	edi, eax
		jbe	loc_438077
		mov	edi, eax
		mov	ebx, 1
		jmp	loc_438079
; ---------------------------------------------------------------------------
		align 10h

loc_438180:				; CODE XREF: _GetHostByName+DCj
		lea	ecx, [ebx+ebx*8]
		lea	ecx, [ebx+ecx*4]
		inc	eax
		lea	edi, _ghbn_cache[ecx*4]
		cmp	eax, 4
		jnb	loc_438230

loc_438197:				; CODE XREF: _GetHostByName+1E7j
		xor	ecx, ecx
		test	al, 2
		jnz	short loc_4381F0

loc_43819D:				; CODE XREF: _GetHostByName+1ABj
		test	al, 1
		jnz	short loc_4381E0

loc_4381A1:				; CODE XREF: _GetHostByName+199j
		lea	eax, [ebx+ebx*8]
		lea	ebx, [ebx+eax*4]
		shl	ebx, 2
		lea	eax, dword_476060[ebx]
		mov	ecx, 4
		mov	edi, eax
		mov	esi, edx
		rep movsd
		mov	eax, ds:_ghbn_hits
		add	eax, ds:_ghbn_miss
		mov	ds:dword_476070[ebx], eax
		mov	eax, edx
		jmp	loc_438130
; ---------------------------------------------------------------------------
		align 10h

loc_4381E0:				; CODE XREF: _GetHostByName+14Fj
		mov	al, [esi+ecx]
		mov	byte ptr [ebp+var_1C], al
		mov	[edi+ecx], al
		jmp	short loc_4381A1
; ---------------------------------------------------------------------------
		align 10h

loc_4381F0:				; CODE XREF: _GetHostByName+14Bj
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2
		jmp	short loc_43819D
; ---------------------------------------------------------------------------
		align 10h

loc_438200:				; CODE XREF: _GetHostByName+10Aj
		xor	eax, eax

loc_438202:				; CODE XREF: _GetHostByName+1F5j
					; _GetHostByName+205j ...
		mov	ecx, ds:_ghbn_hits
		lea	edx, [ecx+1]
		mov	ds:_ghbn_hits, edx
		lea	ecx, [eax+eax*8]
		lea	eax, [eax+ecx*4]
		shl	eax, 2
		add	edx, ds:_ghbn_miss
		mov	ds:dword_476070[eax], edx
		add	eax, offset dword_476060
		jmp	loc_438130
; ---------------------------------------------------------------------------

loc_438230:				; CODE XREF: _GetHostByName+141j
		mov	ecx, eax
		shr	ecx, 2
		rep movsd
		jmp	loc_438197
; ---------------------------------------------------------------------------
		align 10h

loc_438240:				; CODE XREF: _GetHostByName+47j
		mov	eax, 1
		jmp	short loc_438202
; ---------------------------------------------------------------------------
		align 10h

loc_438250:				; CODE XREF: _GetHostByName+7Bj
		mov	eax, 2
		jmp	short loc_438202
; ---------------------------------------------------------------------------
		align 10h

loc_438260:				; CODE XREF: _GetHostByName+ADj
		mov	eax, 3
		jmp	short loc_438202
; ---------------------------------------------------------------------------

loc_438267:				; CODE XREF: _GetHostByName+C8j
		xor	eax, eax
		jmp	loc_438130
_GetHostByName	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void __cdecl ssl_sock_cleanup(int)
_ssl_sock_cleanup proc near		; DATA XREF: _init_client+A5o
					; _init_client:loc_4384F0o ...
		mov	eax, ds:_wsa_init_done
		test	eax, eax
		jnz	short loc_438280
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_438280:				; CODE XREF: _ssl_sock_cleanup+7j
		sub	esp, 0Ch
		mov	ds:_wsa_init_done, 0
		call	ds:__imp__WSACancelBlockingCall@0
		mov	eax, ds:__imp__WSACleanup@0
		add	esp, 0Ch
		jmp	eax
_ssl_sock_cleanup endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl init_client(int, char *, u_short hostshort, int)
		public _init_client
_init_client	proc near		; CODE XREF: _s_client_main+1387p

var_50		= dword	ptr -50h
var_49		= byte ptr -49h
var_48		= dword	ptr -48h
optval		= byte ptr -30h
var_2C		= dword	ptr -2Ch
name		= sockaddr ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
hostshort	= word ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	esi, [ebp+arg_4]
		mov	[ebp+var_2C], 0
		lea	ebx, [ebp+name]
		lea	eax, [ebp+name.sa_data+0Ah]
		mov	[esp+14h], eax
		lea	eax, [ebp+name.sa_data+6]
		mov	[esp+10h], eax
		lea	eax, [ebp+name.sa_data+2]
		mov	[esp+0Ch], eax
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset aU_U_U_U ; "%u.%u.%u.%u"
		mov	[esp], esi	; char *
		call	_sscanf
		cmp	eax, 4
		jz	loc_4383C0
		mov	eax, ds:_wsa_init_done
		test	eax, eax
		jz	loc_4384F0

loc_4382F5:				; CODE XREF: _init_client+294j
		mov	eax, esi
		call	_GetHostByName
		test	eax, eax
		jz	loc_438660
		cmp	word ptr [eax+8], 2
		jnz	loc_438570
		mov	eax, [eax+0Ch]
		mov	eax, [eax]
		mov	cl, [eax]
		mov	byte ptr [ebp+var_48], cl
		mov	byte ptr [ebp+var_2C], cl
		movzx	esi, byte ptr [eax+1]
		mov	ecx, esi
		mov	byte ptr [ebp+var_2C+1], cl
		mov	cl, [eax+2]
		mov	[ebp+var_49], cl
		mov	byte ptr [ebp+var_2C+2], cl
		mov	dl, [eax+3]
		mov	byte ptr [ebp+var_2C+3], dl
		mov	edi, ds:_wsa_init_done
		test	edi, edi
		jnz	loc_438422

loc_438342:				; CODE XREF: _init_client+17Cj
		mov	[ebp+var_50], edx
		mov	dword ptr [esp+4], offset _ssl_sock_cleanup ; void (__cdecl *)(int)
		mov	dword ptr [esp], 2 ; int
		call	_signal
		mov	ds:_wsa_init_done, 1
		mov	ecx, 64h
		xor	eax, eax
		mov	edi, offset _wsa_state
		rep stosd
		mov	dword ptr [esp+4], offset _wsa_state ; lpWSAData
		mov	dword ptr [esp], 101h ;	wVersionRequested
		call	ds:__imp__WSAStartup@8
		sub	esp, 8
		test	eax, eax
		mov	edx, [ebp+var_50]
		jz	loc_438422
		call	ds:__imp__WSAGetLastError@0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnableToStartW ; "unable to start WINSOCK, error code=%d\"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_4384DB
; ---------------------------------------------------------------------------
		align 10h

loc_4383C0:				; CODE XREF: _init_client+42j
		mov	eax, dword ptr [ebp+name.sa_family]
		cmp	eax, 0FFh
		ja	loc_438590
		cmp	dword ptr [ebp+name.sa_data+2],	0FFh
		ja	loc_438590
		cmp	dword ptr [ebp+name.sa_data+6],	0FFh
		ja	loc_438590
		cmp	dword ptr [ebp+name.sa_data+0Ah], 0FFh
		ja	loc_438590
		mov	byte ptr [ebp+var_48], al
		mov	byte ptr [ebp+var_2C], al
		mov	eax, dword ptr [ebp+name.sa_data+2]
		mov	esi, eax
		mov	byte ptr [ebp+var_2C+1], al
		mov	eax, dword ptr [ebp+name.sa_data+6]
		mov	[ebp+var_49], al
		mov	byte ptr [ebp+var_2C+2], al
		mov	eax, dword ptr [ebp+name.sa_data+0Ah]
		mov	dl, al
		mov	byte ptr [ebp+var_2C+3], al
		mov	edi, ds:_wsa_init_done
		test	edi, edi
		jz	loc_438342

loc_438422:				; CODE XREF: _init_client+9Cj
					; _init_client+EEj
		mov	[ebp+var_50], edx
		mov	ecx, 4
		xor	eax, eax
		mov	edi, ebx
		rep stosd
		mov	[ebp+name.sa_family], 2
		xor	eax, eax
		mov	ax, [ebp+hostshort]
		mov	[esp], eax	; hostshort
		call	ds:__imp__htons@4
		push	edx
		mov	word ptr [ebp+name.sa_data], ax
		mov	eax, [ebp+var_48]
		shl	eax, 18h
		and	esi, 0FFh
		shl	esi, 10h
		or	eax, esi
		mov	edx, [ebp+var_50]
		and	edx, 0FFh
		or	eax, edx
		xor	edx, edx
		mov	dl, [ebp+var_49]
		shl	edx, 8
		or	eax, edx
		mov	[esp], eax	; hostlong
		call	ds:__imp__htonl@4
		push	ecx
		mov	dword ptr [ebp+name.sa_data+2],	eax
		cmp	[ebp+arg_C], 1
		jz	loc_4385C0
		mov	dword ptr [esp+8], 11h ; protocol
		mov	dword ptr [esp+4], 2 ; type
		mov	dword ptr [esp], 2 ; af
		call	ds:__imp__socket@12
		sub	esp, 0Ch
		mov	esi, eax
		cmp	eax, 0FFFFFFFFh
		jz	loc_4385A9

loc_4384B2:				; CODE XREF: _init_client+380j
		mov	dword ptr [esp+8], 10h ; namelen
		mov	[esp+4], ebx	; name
		mov	[esp], esi	; s
		call	ds:__imp__connect@12
		sub	esp, 0Ch
		inc	eax
		jz	loc_438643
		mov	eax, [ebp+arg_0]
		mov	[eax], esi
		mov	eax, 1

loc_4384DB:				; CODE XREF: _init_client+115j
					; _init_client+317j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4384F0:				; CODE XREF: _init_client+4Fj
		mov	dword ptr [esp+4], offset _ssl_sock_cleanup ; void (__cdecl *)(int)
		mov	dword ptr [esp], 2 ; int
		call	_signal
		mov	ds:_wsa_init_done, 1
		mov	edx, offset _wsa_state
		mov	ecx, 64h
		xor	eax, eax
		mov	edi, edx
		rep stosd
		mov	[esp+4], edx	; lpWSAData
		mov	dword ptr [esp], 101h ;	wVersionRequested
		call	ds:__imp__WSAStartup@8
		sub	esp, 8
		test	eax, eax
		jz	loc_4382F5
		call	ds:__imp__WSAGetLastError@0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnableToStartW ; "unable to start WINSOCK, error code=%d\"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax

loc_43855B:				; CODE XREF: _init_client+2E7j
					; _init_client+307j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_438570:				; CODE XREF: _init_client+69j
		mov	dword ptr [esp+4], offset aGethostbynameA ; "gethostbyname addr	is not AF_INET\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	short loc_43855B
; ---------------------------------------------------------------------------
		align 10h

loc_438590:				; CODE XREF: _init_client+128j
					; _init_client+135j ...
		mov	dword ptr [esp+4], offset aInvalidIpAddre ; "invalid IP	address\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	short loc_43855B
; ---------------------------------------------------------------------------

loc_4385A9:				; CODE XREF: _init_client+20Cj
					; _init_client+347j
		mov	dword ptr [esp], offset	aSocket	; "socket"
		call	_perror
		xor	eax, eax
		jmp	loc_4384DB
; ---------------------------------------------------------------------------
		align 10h

loc_4385C0:				; CODE XREF: _init_client+1E1j
		mov	dword ptr [esp+8], 6 ; protocol
		mov	dword ptr [esp+4], 1 ; type
		mov	dword ptr [esp], 2 ; af
		call	ds:__imp__socket@12
		sub	esp, 0Ch
		mov	edi, eax
		mov	esi, eax
		cmp	eax, 0FFFFFFFFh
		jz	short loc_4385A9
		mov	dword ptr [ebp+optval],	0
		mov	dword ptr [esp+10h], 4 ; optlen
		lea	eax, [ebp+optval]
		mov	[esp+0Ch], eax	; optval
		mov	dword ptr [esp+8], 8 ; optname
		mov	dword ptr [esp+4], 0FFFFh ; level
		mov	[esp], edi	; s
		call	ds:__imp__setsockopt@20
		sub	esp, 14h
		mov	dword ptr [ebp+optval],	eax
		test	eax, eax
		jns	loc_4384B2
		mov	[esp], edi	; s
		call	ds:__imp__closesocket@4
		push	esi
		mov	dword ptr [esp], offset	aKeepalive ; "keepalive"
		call	_perror
		xor	eax, eax
		jmp	loc_4384DB
; ---------------------------------------------------------------------------

loc_438643:				; CODE XREF: _init_client+22Bj
		mov	[esp], esi	; s
		call	ds:__imp__closesocket@4
		push	ebx
		mov	dword ptr [esp], offset	aConnect_1 ; "connect"
		call	_perror
		xor	eax, eax
		jmp	loc_4384DB
; ---------------------------------------------------------------------------

loc_438660:				; CODE XREF: _init_client+5Ej
		mov	dword ptr [esp+4], offset aGethostbynameF ; "gethostbyname failure\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_43855B
_init_client	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl do_server(u_short	hostshort, int,	int, int, int)
		public _do_server
_do_server	proc near		; CODE XREF: _s_server_main+202Bp

s		= dword	ptr -3Ch
optval		= byte ptr -2Ch
name		= sockaddr ptr -28h
hostshort	= word ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	eax, ds:_wsa_init_done
		test	eax, eax
		jz	loc_4388D0

loc_438696:				; CODE XREF: _do_server+294j
		mov	ecx, 4
		xor	eax, eax
		lea	edi, [ebp+name]
		rep stosd
		mov	[ebp+name.sa_family], 2
		xor	eax, eax
		mov	ax, [ebp+hostshort]
		mov	[esp], eax	; hostshort
		call	ds:__imp__htons@4
		push	edx
		mov	word ptr [ebp+name.sa_data], ax
		mov	dword ptr [ebp+name.sa_data+2],	0
		cmp	[ebp+arg_4], 1
		jz	loc_438A10
		mov	dword ptr [esp+8], 11h ; protocol
		mov	dword ptr [esp+4], 2 ; type

loc_4386DD:				; CODE XREF: _do_server+3A0j
		mov	dword ptr [esp], 2 ; af
		call	ds:__imp__socket@12
		sub	esp, 0Ch
		mov	[ebp+s], eax
		mov	esi, eax
		cmp	eax, 0FFFFFFFFh
		jz	loc_4388BF
		mov	dword ptr [ebp+optval],	1
		mov	dword ptr [esp+10h], 4 ; optlen
		lea	eax, [ebp+optval]
		mov	[esp+0Ch], eax	; optval
		mov	dword ptr [esp+8], 4 ; optname
		mov	dword ptr [esp+4], 0FFFFh ; level
		mov	[esp], esi	; s
		call	ds:__imp__setsockopt@20
		sub	esp, 14h
		mov	dword ptr [esp+8], 10h ; namelen
		lea	eax, [ebp+name]
		mov	[esp+4], eax	; name
		mov	[esp], esi	; s
		call	ds:__imp__bind@12
		sub	esp, 0Ch
		inc	eax
		jz	loc_43889E
		cmp	[ebp+arg_4], 1
		jz	loc_438A8F

loc_438759:				; CODE XREF: _do_server+427j
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	short loc_438768
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+s]
		mov	[eax], edx

loc_438768:				; CODE XREF: _do_server+DEj
		xor	ebx, ebx
		jmp	short loc_4387A4
; ---------------------------------------------------------------------------
		align 10h

loc_438770:				; CODE XREF: _do_server+128j
		mov	edi, [ebp+s]

loc_438773:				; CODE XREF: _do_server+1F9j
					; _do_server+3BCj
		mov	eax, [ebp+arg_10]
		mov	[esp+8], eax
		mov	[esp+4], edi
		mov	[esp], ebx
		call	[ebp+arg_C]
		mov	esi, eax
		test	ebx, ebx
		jz	short loc_438792
		mov	[esp], ebx
		call	_CRYPTO_free

loc_438792:				; CODE XREF: _do_server+108j
		cmp	[ebp+arg_4], 1
		jz	loc_438940
		test	esi, esi
		js	loc_438970

loc_4387A4:				; CODE XREF: _do_server+EAj
					; _do_server+2E0j
		cmp	[ebp+arg_4], 1
		jnz	short loc_438770
		mov	eax, ds:_wsa_init_done
		test	eax, eax
		jz	loc_4389A0

loc_4387B7:				; CODE XREF: _do_server+364j
		mov	edx, offset _from_37925
		mov	ecx, 4
		xor	eax, eax
		mov	edi, edx
		rep stosd
		mov	dword ptr [ebp+name.sa_family],	10h
		lea	eax, [ebp+name]
		mov	[esp+8], eax	; addrlen
		mov	[esp+4], edx	; addr
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	ds:__imp__accept@12
		sub	esp, 0Ch
		mov	edi, eax
		cmp	eax, 0FFFFFFFFh
		jz	loc_438A50
		mov	dword ptr [esp+8], 2 ; type
		mov	dword ptr [esp+4], 4 ; len
		mov	dword ptr [esp], (offset _from_37925.sa_data+2)	; addr
		call	ds:__imp__gethostbyaddr@12
		sub	esp, 0Ch
		mov	esi, eax
		test	eax, eax
		jz	loc_438A25
		mov	eax, [eax]
		mov	[esp], eax	; char *
		call	_strlen
		mov	dword ptr [esp+8], 1C5h
		mov	dword ptr [esp+4], offset aS_socket_c ;	"s_socket.c"
		inc	eax
		mov	[esp], eax
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_438A74
		mov	esi, [esi]
		mov	[esp], esi	; char *
		call	_strlen
		inc	eax
		mov	[esp+8], eax
		mov	[esp+4], esi
		mov	[esp], ebx
		call	_BUF_strlcpy
		mov	eax, ebx
		call	_GetHostByName
		test	eax, eax
		jz	loc_438AB2
		cmp	word ptr [eax+8], 2
		jz	loc_438773
		mov	dword ptr [esp+4], offset aGethostbynameA ; "gethostbyname addr	is not AF_INET\n"

loc_438887:				; CODE XREF: _do_server+43Aj
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], edi	; s
		call	ds:__imp__closesocket@4
		push	eax

loc_43889E:				; CODE XREF: _do_server+C9j
					; _do_server+389j ...
		mov	dword ptr [esp+4], 0 ; how
		mov	esi, [ebp+s]
		mov	[esp], esi	; s
		call	ds:__imp__shutdown@8
		sub	esp, 8
		mov	[esp], esi	; s
		call	ds:__imp__closesocket@4
		push	eax

loc_4388BF:				; CODE XREF: _do_server+75j
					; _do_server+2B9j
		xor	eax, eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4388D0:				; CODE XREF: _do_server+10j
		mov	dword ptr [esp+4], offset _ssl_sock_cleanup ; void (__cdecl *)(int)
		mov	dword ptr [esp], 2 ; int
		call	_signal
		mov	ds:_wsa_init_done, 1
		mov	edx, offset _wsa_state
		mov	ecx, 64h
		xor	eax, eax
		mov	edi, edx
		rep stosd
		mov	[esp+4], edx	; lpWSAData
		mov	dword ptr [esp], 101h ;	wVersionRequested
		call	ds:__imp__WSAStartup@8
		sub	esp, 8
		test	eax, eax
		jz	loc_438696
		call	ds:__imp__WSAGetLastError@0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnableToStartW ; "unable to start WINSOCK, error code=%d\"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	short loc_4388BF
; ---------------------------------------------------------------------------
		align 10h

loc_438940:				; CODE XREF: _do_server+116j
		mov	dword ptr [esp+4], 2 ; how
		mov	[esp], edi	; s
		call	ds:__imp__shutdown@8
		sub	esp, 8
		mov	[esp], edi	; s
		call	ds:__imp__closesocket@4
		push	edi
		test	esi, esi
		jns	loc_4387A4
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_438970:				; CODE XREF: _do_server+11Ej
		mov	dword ptr [esp+4], 2 ; how
		mov	edi, [ebp+s]
		mov	[esp], edi	; s
		call	ds:__imp__shutdown@8
		sub	esp, 8
		mov	[esp], edi	; s
		call	ds:__imp__closesocket@4
		push	ecx
		mov	eax, esi
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4389A0:				; CODE XREF: _do_server+131j
		mov	dword ptr [esp+4], offset _ssl_sock_cleanup ; void (__cdecl *)(int)
		mov	dword ptr [esp], 2 ; int
		call	_signal
		mov	ds:_wsa_init_done, 1
		mov	edx, offset _wsa_state
		mov	ecx, 64h
		xor	eax, eax
		mov	edi, edx
		rep stosd
		mov	[esp+4], edx	; lpWSAData
		mov	dword ptr [esp], 101h ;	wVersionRequested
		call	ds:__imp__WSAStartup@8
		sub	esp, 8
		test	eax, eax
		jz	loc_4387B7
		call	ds:__imp__WSAGetLastError@0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnableToStartW ; "unable to start WINSOCK, error code=%d\"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_43889E
; ---------------------------------------------------------------------------
		align 10h

loc_438A10:				; CODE XREF: _do_server+47j
		mov	dword ptr [esp+8], 6
		mov	dword ptr [esp+4], 1
		jmp	loc_4386DD
; ---------------------------------------------------------------------------

loc_438A25:				; CODE XREF: _do_server+197j
		mov	dword ptr [esp+4], offset aBadGethostbyad ; "bad gethostbyaddr\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	loc_438773
; ---------------------------------------------------------------------------
		jmp	short loc_438A50
; ---------------------------------------------------------------------------
		align 10h

loc_438A50:				; CODE XREF: _do_server+16Dj
					; _do_server+3C1j
		call	ds:__imp__WSAGetLastError@0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aAcceptErrorD	; "accept error	%d\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_43889E
; ---------------------------------------------------------------------------

loc_438A74:				; CODE XREF: _do_server+1C4j
		mov	dword ptr [esp], offset	aOpenssl_mall_4	; "OPENSSL_malloc"
		call	_perror
		mov	[esp], edi	; s
		call	ds:__imp__closesocket@4
		push	eax
		jmp	loc_43889E
; ---------------------------------------------------------------------------

loc_438A8F:				; CODE XREF: _do_server+D3j
		mov	dword ptr [esp+4], 80h ; backlog
		mov	eax, [ebp+s]
		mov	[esp], eax	; s
		call	ds:__imp__listen@8
		sub	esp, 8
		inc	eax
		jnz	loc_438759
		jmp	loc_43889E
; ---------------------------------------------------------------------------

loc_438AB2:				; CODE XREF: _do_server+1EEj
		mov	dword ptr [esp+4], offset aGethostbynameF ; "gethostbyname failure\n"
		jmp	loc_438887
_do_server	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl extract_host_port(char *,	int, int, int)
		public _extract_host_port
_extract_host_port proc	near		; CODE XREF: _s_client_main+538p

var_29		= byte ptr -29h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_0]
		mov	dword ptr [esp+4], 3Ah ; int
		mov	[esp], esi	; char *
		call	_strchr
		mov	ebx, eax
		test	eax, eax
		jz	loc_438D00
		mov	byte ptr [eax],	0
		mov	eax, [ebp+arg_8]
		test	eax, eax
		jz	loc_438B90
		lea	eax, [ebp+var_28]
		lea	edx, [ebp+var_1C]
		mov	[esp+14h], edx
		lea	edx, [ebp+var_20]
		mov	[esp+10h], edx
		lea	edx, [ebp+var_24]
		mov	[esp+0Ch], edx
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aU_U_U_U ; "%u.%u.%u.%u"
		mov	[esp], esi	; char *
		call	_sscanf
		cmp	eax, 4
		jz	loc_438BC0
		mov	edi, ds:_wsa_init_done
		test	edi, edi
		jz	loc_438C70

loc_438B37:				; CODE XREF: _extract_host_port+1F4j
		mov	eax, esi
		call	_GetHostByName
		test	eax, eax
		jz	loc_438D40
		cmp	word ptr [eax+8], 2
		jnz	loc_438C50
		mov	edx, [eax+0Ch]
		mov	edx, [edx]
		mov	cl, [edx]
		mov	edi, [ebp+arg_8]
		mov	[edi], cl
		mov	edx, [eax+0Ch]
		mov	edx, [edx]
		mov	cl, [edx+1]
		mov	[edi+1], cl
		mov	edx, [eax+0Ch]
		mov	edx, [edx]
		mov	cl, [edx+2]
		mov	[edi+2], cl
		mov	eax, [eax+0Ch]
		mov	eax, [eax]
		mov	al, [eax+3]
		mov	[ebp+var_29], al
		mov	[edi+3], al
		jmp	short loc_438B90
; ---------------------------------------------------------------------------
		align 10h

loc_438B90:				; CODE XREF: _extract_host_port+2Ej
					; _extract_host_port+C1j ...
		mov	ecx, [ebp+arg_4]
		test	ecx, ecx
		jz	short loc_438B9C
		mov	eax, [ebp+arg_4]
		mov	[eax], esi

loc_438B9C:				; CODE XREF: _extract_host_port+D5j
		inc	ebx
		mov	[esp], ebx	; char *
		call	_atoi
		test	eax, eax
		jz	short loc_438C10

loc_438BA9:				; CODE XREF: _extract_host_port+17Fj
		mov	ecx, [ebp+arg_C]
		mov	[ecx], ax
		mov	eax, 1

loc_438BB4:				; CODE XREF: _extract_host_port+257j
					; _extract_host_port+27Bj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_438BC0:				; CODE XREF: _extract_host_port+63j
		mov	eax, [ebp+var_28]
		cmp	eax, 0FFh
		ja	loc_438CE0
		cmp	[ebp+var_24], 0FFh
		ja	loc_438CE0
		cmp	[ebp+var_20], 0FFh
		ja	loc_438CE0
		cmp	[ebp+var_1C], 0FFh
		ja	loc_438CE0
		mov	edi, [ebp+arg_8]
		mov	[edi], al
		mov	eax, [ebp+var_24]
		mov	[edi+1], al
		mov	eax, [ebp+var_20]
		mov	[edi+2], al
		mov	eax, [ebp+var_1C]
		mov	[edi+3], al
		jmp	short loc_438B90
; ---------------------------------------------------------------------------
		align 10h

loc_438C10:				; CODE XREF: _extract_host_port+E7j
		mov	dword ptr [esp+4], offset proto	; "tcp"
		mov	[esp], ebx	; name
		call	ds:__imp__getservbyname@8
		sub	esp, 8
		test	eax, eax
		jz	loc_438D20
		mov	edi, [eax+8]
		and	edi, 0FFFFh
		mov	[esp], edi	; netshort
		call	ds:__imp__ntohs@4
		push	edx
		jmp	loc_438BA9
; ---------------------------------------------------------------------------
		align 10h

loc_438C50:				; CODE XREF: _extract_host_port+8Bj
		mov	dword ptr [esp+4], offset aGethostbynameA ; "gethostbyname addr	is not AF_INET\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax

loc_438C67:				; CODE XREF: _extract_host_port+21Bj
					; _extract_host_port+237j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_438C70:				; CODE XREF: _extract_host_port+71j
		mov	dword ptr [esp+4], offset _ssl_sock_cleanup ; void (__cdecl *)(int)
		mov	dword ptr [esp], 2 ; int
		call	_signal
		mov	ds:_wsa_init_done, 1
		mov	edx, offset _wsa_state
		mov	ecx, 64h
		xor	eax, eax
		mov	edi, edx
		rep stosd
		mov	[esp+4], edx	; lpWSAData
		mov	dword ptr [esp], 101h ;	wVersionRequested
		call	ds:__imp__WSAStartup@8
		sub	esp, 8
		test	eax, eax
		jz	loc_438B37
		call	ds:__imp__WSAGetLastError@0
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnableToStartW ; "unable to start WINSOCK, error code=%d\"...
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	short loc_438C67
; ---------------------------------------------------------------------------
		align 10h

loc_438CE0:				; CODE XREF: _extract_host_port+108j
					; _extract_host_port+115j ...
		mov	dword ptr [esp+4], offset aInvalidIpAddre ; "invalid IP	address\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_438C67
; ---------------------------------------------------------------------------
		align 10h

loc_438D00:				; CODE XREF: _extract_host_port+20j
		mov	dword ptr [esp+4], offset aNoPortDefined ; "no port defined\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_438BB4
; ---------------------------------------------------------------------------
		align 10h

loc_438D20:				; CODE XREF: _extract_host_port+166j
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset aGetservbynameF ; "getservbyname failure for %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_438BB4
; ---------------------------------------------------------------------------

loc_438D40:				; CODE XREF: _extract_host_port+80j
		mov	dword ptr [esp+4], offset aGethostbynameF ; "gethostbyname failure\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_438C67
_extract_host_port endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl extract_port(char	*name, int)
		public _extract_port
_extract_port	proc near		; CODE XREF: _s_server_main+361p

var_4		= dword	ptr -4
name		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+name]
		mov	[esp], ebx	; char *
		call	_atoi
		test	eax, eax
		jz	short loc_438D90

loc_438D76:				; CODE XREF: _extract_port+5Bj
		mov	ecx, [ebp+arg_4]
		mov	[ecx], ax
		mov	eax, 1

loc_438D81:				; CODE XREF: _extract_port+7Bj
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_438D90:				; CODE XREF: _extract_port+14j
		mov	dword ptr [esp+4], offset proto	; "tcp"
		mov	[esp], ebx	; name
		call	ds:__imp__getservbyname@8
		sub	esp, 8
		test	eax, eax
		jz	short loc_438DC0
		mov	edx, [eax+8]
		and	edx, 0FFFFh
		mov	[esp], edx	; netshort
		call	ds:__imp__ntohs@4
		push	edx
		jmp	short loc_438D76
; ---------------------------------------------------------------------------
		align 10h

loc_438DC0:				; CODE XREF: _extract_port+46j
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset aGetservbynameF ; "getservbyname failure for %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	short loc_438D81
_extract_port	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _app_RAND_load_file
_app_RAND_load_file proc near		; CODE XREF: _req_main+619p
					; _req_main+2B58p ...

var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_D4		= byte ptr -0D4h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 0E0h
		mov	esi, [esp+0ECh+arg_0]
		mov	ebx, [esp+0ECh+arg_4]
		mov	[esp+0ECh+var_E8], offset aLoadingScreenI ; "Loading 'screen' into random state -"
		mov	[esp+0ECh+var_EC], ebx
		call	_BIO_printf
		mov	[esp+0ECh+var_E0], 0
		mov	[esp+0ECh+var_E4], 0
		mov	[esp+0ECh+var_E8], 0Bh
		mov	[esp+0ECh+var_EC], ebx
		call	_BIO_ctrl
		call	_RAND_screen
		mov	[esp+0ECh+var_E8], offset aDone_1 ; " done\n"
		mov	[esp+0ECh+var_EC], ebx
		call	_BIO_printf
		test	esi, esi
		jz	loc_438F20
		mov	[esp+0ECh+var_EC], esi
		call	_RAND_egd
		test	eax, eax
		jle	short loc_438E70
		mov	ds:_egdsocket, 1
		mov	edi, 1

loc_438E5F:				; CODE XREF: _app_RAND_load_file+BAj
					; _app_RAND_load_file+EEj ...
		mov	eax, edi
		add	esp, 0E0h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_438E70:				; CODE XREF: _app_RAND_load_file+6Ej
		mov	eax, esi

loc_438E72:				; CODE XREF: _app_RAND_load_file+156j
		mov	[esp+0ECh+var_E8], 0FFFFFFFFh
		mov	[esp+0ECh+var_EC], eax
		call	_RAND_load_file
		test	eax, eax
		jnz	short loc_438F00

loc_438E86:				; CODE XREF: _app_RAND_load_file+15Cj
		call	_RAND_status
		mov	edi, eax
		test	eax, eax
		jnz	short loc_438F00
		mov	eax, [esp+0ECh+arg_8]
		test	eax, eax
		jnz	short loc_438E5F
		mov	[esp+0ECh+var_E8], offset aUnableToLoadRa ; "unable to load 'random state'\n"
		mov	[esp+0ECh+var_EC], ebx
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aThisMeansThatT ; "This means	that the random	number gener"...
		mov	[esp+0ECh+var_EC], ebx
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aWithMuchRandom ; "with much random data.\n"
		mov	[esp+0ECh+var_EC], ebx
		call	_BIO_printf
		test	esi, esi
		jnz	short loc_438E5F
		mov	[esp+0ECh+var_E8], offset aConsiderSettin ; "Consider setting the RANDFILE environme"...
		mov	[esp+0ECh+var_EC], ebx
		call	_BIO_printf
		mov	[esp+0ECh+var_E8], offset aRandomDataCanB ; "'random' data can be kept in (the file "...
		mov	[esp+0ECh+var_EC], ebx
		call	_BIO_printf
		jmp	loc_438E5F
; ---------------------------------------------------------------------------
		align 10h

loc_438F00:				; CODE XREF: _app_RAND_load_file+A4j
					; _app_RAND_load_file+AFj
		mov	ds:_seeded, 1
		mov	edi, 1
		mov	eax, edi
		add	esp, 0E0h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_438F20:				; CODE XREF: _app_RAND_load_file+5Ej
		mov	[esp+0ECh+var_E8], 0C8h
		lea	eax, [esp+0ECh+var_D4]
		mov	[esp+0ECh+var_EC], eax
		call	_RAND_file_name
		test	eax, eax
		jnz	loc_438E72
		jmp	loc_438E86
_app_RAND_load_file endp

; ---------------------------------------------------------------------------
		jmp	short _app_RAND_load_files
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _app_RAND_load_files
_app_RAND_load_files proc near		; CODE XREF: _req_main+2B6Bp
					; _dhparam_main+156p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		xor	esi, esi

loc_438F5D:				; CODE XREF: _app_RAND_load_files+50j
		mov	al, [ebx]
		mov	edx, ebx
		test	al, al
		jz	short loc_438F7C
		cmp	al, 3Bh
		jnz	short loc_438F75
		jmp	short loc_438FB0
; ---------------------------------------------------------------------------
		align 10h

loc_438F70:				; CODE XREF: _app_RAND_load_files+2Aj
		cmp	cl, 3Bh
		jz	short loc_438FB0

loc_438F75:				; CODE XREF: _app_RAND_load_files+17j
		inc	edx
		mov	cl, [edx]
		test	cl, cl
		jnz	short loc_438F70

loc_438F7C:				; CODE XREF: _app_RAND_load_files+13j
		mov	edi, 1
		mov	byte ptr [edx],	0
		lea	ebp, [edx+1]
		cmp	byte ptr [ebx],	0
		jz	short loc_438FC0

loc_438F8C:				; CODE XREF: _app_RAND_load_files+6Bj
		mov	[esp+2Ch+var_2C], ebx
		call	_RAND_egd
		test	eax, eax
		jle	short loc_438FE0

loc_438F98:				; CODE XREF: _app_RAND_load_files+A0j
		add	esi, eax
		test	edi, edi
		jnz	short loc_438FC0
		mov	ebx, ebp
		jmp	short loc_438F5D
; ---------------------------------------------------------------------------
		align 10h

loc_438FB0:				; CODE XREF: _app_RAND_load_files+19j
					; _app_RAND_load_files+23j
		xor	edi, edi
		mov	byte ptr [edx],	0
		lea	ebp, [edx+1]
		cmp	byte ptr [ebx],	0
		jnz	short loc_438F8C
		lea	esi, [esi+0]

loc_438FC0:				; CODE XREF: _app_RAND_load_files+3Aj
					; _app_RAND_load_files+4Cj
		cmp	esi, 200h
		jle	short loc_438FD2
		mov	ds:_seeded, 1

loc_438FD2:				; CODE XREF: _app_RAND_load_files+76j
		mov	eax, esi
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_438FE0:				; CODE XREF: _app_RAND_load_files+46j
		mov	[esp+2Ch+var_28], 0FFFFFFFFh
		mov	[esp+2Ch+var_2C], ebx
		call	_RAND_load_file
		jmp	short loc_438F98
_app_RAND_load_files endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _app_RAND_write_file
_app_RAND_write_file proc near		; CODE XREF: _req_main+2D88p
					; _dhparam_main+68Ap ...

var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_D4		= byte ptr -0D4h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		mov	ecx, ds:_egdsocket
		test	ecx, ecx
		jnz	short loc_439060
		mov	edx, ds:_seeded
		test	edx, edx
		jz	short loc_439060
		sub	esp, 0ECh
		mov	eax, [esp+0ECh+arg_0]
		test	eax, eax
		jz	short loc_439080

loc_439025:				; CODE XREF: _app_RAND_write_file+9Fj
		mov	eax, [esp+0ECh+arg_0]
		mov	[esp+0ECh+var_EC], eax
		call	_RAND_write_file
		test	eax, eax
		jnz	short loc_439070

loc_439038:				; CODE XREF: _app_RAND_write_file+9Dj
		mov	[esp+0ECh+var_E8], offset aUnableToWriteR ; "unable to write 'random state'\n"
		mov	eax, [esp+0ECh+arg_4]
		mov	[esp+0ECh+var_EC], eax
		call	_BIO_printf
		xor	eax, eax
		add	esp, 0ECh
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_439060:				; CODE XREF: _app_RAND_write_file+8j
					; _app_RAND_write_file+12j
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_439070:				; CODE XREF: _app_RAND_write_file+36j
		mov	eax, 1
		add	esp, 0ECh
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_439080:				; CODE XREF: _app_RAND_write_file+23j
		mov	[esp+0ECh+var_E8], 0C8h
		lea	eax, [esp+0ECh+var_D4]
		mov	[esp+0ECh+var_EC], eax
		call	_RAND_file_name
		mov	[esp+0ECh+arg_0], eax
		test	eax, eax
		jz	short loc_439038
		jmp	short loc_439025
_app_RAND_write_file endp

; ---------------------------------------------------------------------------
		jmp	short _app_RAND_allow_write_file
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _app_RAND_allow_write_file
_app_RAND_allow_write_file proc	near	; CODE XREF: .text:004390A1j
		mov	ds:_seeded, 1
		retn
_app_RAND_allow_write_file endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _version_main
_version_main	proc near		; DATA XREF: .data:00455160o

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	ebp, [esp+4Ch+arg_4]
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_43940F

loc_4390D8:				; CODE XREF: _version_main+363j
					; _version_main+38Ej
		xor	eax, eax
		cmp	[esp+4Ch+arg_0], 1
		setz	al
		mov	[esp+4Ch+var_34], eax
		cmp	[esp+4Ch+arg_0], 1
		mov	[esp+4Ch+var_20], 0
		mov	[esp+4Ch+var_24], 0
		mov	[esp+4Ch+var_28], 0
		mov	[esp+4Ch+var_30], 0
		mov	[esp+4Ch+var_2C], 0
		jle	loc_4391F3
		mov	eax, 1
		xchg	ax, ax

loc_439120:				; CODE XREF: _version_main+12Dj
					; _version_main+19Dj
		mov	edx, [ebp+eax*4+0]
		mov	esi, edx
		mov	edi, offset aV_0 ; "-v"
		mov	ecx, 3
		repe cmpsb
		jz	loc_439250
		mov	edi, offset aB	; "-b"
		mov	esi, edx
		mov	ecx, 3
		repe cmpsb
		jz	loc_4393C0
		mov	edi, offset asc_46A4AA ; "-f"
		mov	esi, edx
		mov	ecx, 3
		repe cmpsb
		jz	loc_4391E0
		mov	edi, offset aO	; "-o"
		mov	esi, edx
		mov	ecx, 3
		repe cmpsb
		jz	loc_4393D0
		mov	edi, offset aP_1 ; "-p"
		mov	esi, edx
		mov	ecx, 3
		repe cmpsb
		jz	loc_4393E0
		mov	edi, offset aD_4 ; "-d"
		mov	esi, edx
		mov	ecx, 3
		repe cmpsb
		jz	loc_4393F0
		mov	edi, offset aA_1 ; "-a"
		mov	esi, edx
		mov	ecx, 3
		repe cmpsb
		jnz	loc_439453
		mov	[esp+4Ch+var_20], 1
		mov	[esp+4Ch+var_24], 1
		mov	[esp+4Ch+var_28], 1
		mov	[esp+4Ch+var_30], 1
		mov	[esp+4Ch+var_34], 1
		nop
		lea	esi, [esi+0]

loc_4391E0:				; CODE XREF: _version_main+9Aj
		mov	[esp+4Ch+var_2C], 1
		inc	eax
		cmp	eax, [esp+4Ch+arg_0]
		jnz	loc_439120

loc_4391F3:				; CODE XREF: _version_main+53j
		mov	edi, [esp+4Ch+var_34]
		test	edi, edi
		jnz	short loc_43926B
		nop
		lea	esi, [esi+0]

loc_439200:				; CODE XREF: _version_main+1A9j
					; _version_main+34Aj
		mov	esi, [esp+4Ch+var_30]
		test	esi, esi
		jnz	loc_4392AB

loc_43920C:				; CODE XREF: _version_main+1E5j
		mov	ebx, [esp+4Ch+var_24]
		test	ebx, ebx
		jnz	loc_4392CB

loc_439218:				; CODE XREF: _version_main+205j
		mov	ecx, [esp+4Ch+var_28]
		test	ecx, ecx
		jnz	loc_4392EB

loc_439224:				; CODE XREF: _version_main+225j
		mov	edx, [esp+4Ch+var_2C]
		test	edx, edx
		jnz	loc_439378

loc_439230:				; CODE XREF: _version_main+2B2j
		mov	eax, [esp+4Ch+var_20]
		test	eax, eax
		jnz	loc_439398

loc_43923C:				; CODE XREF: _version_main+2D2j
		xor	eax, eax

loc_43923E:				; CODE XREF: _version_main+3ADj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_439250:				; CODE XREF: _version_main+72j
		mov	[esp+4Ch+var_34], 1

loc_439258:				; CODE XREF: _version_main+308j
					; _version_main+318j ...
		inc	eax
		cmp	eax, [esp+4Ch+arg_0]
		jnz	loc_439120
		mov	edi, [esp+4Ch+var_34]
		test	edi, edi
		jz	short loc_439200

loc_43926B:				; CODE XREF: _version_main+139j
		call	_SSLeay
		mov	[esp+4Ch+var_4C], 0
		cmp	eax, 1000113Fh
		jz	loc_4393FD
		call	_SSLeay_version
		mov	[esp+4Ch+var_44], eax
		mov	[esp+4Ch+var_48], offset aOpenssl1_0_1s1 ; "OpenSSL 1.0.1s  1 Mar 2016"
		mov	[esp+4Ch+var_4C], offset aSLibraryS ; "%s (Library: %s)\n"
		call	_printf
		mov	esi, [esp+4Ch+var_30]
		test	esi, esi
		jz	loc_43920C

loc_4392AB:				; CODE XREF: _version_main+146j
		mov	[esp+4Ch+var_4C], 3
		call	_SSLeay_version
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	_puts
		mov	ebx, [esp+4Ch+var_24]
		test	ebx, ebx
		jz	loc_439218

loc_4392CB:				; CODE XREF: _version_main+152j
		mov	[esp+4Ch+var_4C], 4
		call	_SSLeay_version
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	_puts
		mov	ecx, [esp+4Ch+var_28]
		test	ecx, ecx
		jz	loc_439224

loc_4392EB:				; CODE XREF: _version_main+15Ej
		mov	[esp+4Ch+var_4C], offset aOptions_0 ; "options:	 "
		call	_printf
		call	_BN_options
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], offset aS_12 ; "%s "
		call	_printf
		call	_RC4_options
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], offset aS_12 ; "%s "
		call	_printf
		call	_DES_options
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], offset aS_12 ; "%s "
		call	_printf
		call	_idea_options
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], offset aS_12 ; "%s "
		call	_printf
		call	_BF_options
		mov	[esp+4Ch+var_48], eax
		mov	[esp+4Ch+var_4C], offset aS_12 ; "%s "
		call	_printf
		mov	[esp+4Ch+var_4C], 0Ah ;	int
		call	_putchar
		mov	edx, [esp+4Ch+var_2C]
		test	edx, edx
		jz	loc_439230

loc_439378:				; CODE XREF: _version_main+16Aj
		mov	[esp+4Ch+var_4C], 2
		call	_SSLeay_version
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	_puts
		mov	eax, [esp+4Ch+var_20]
		test	eax, eax
		jz	loc_43923C

loc_439398:				; CODE XREF: _version_main+176j
		mov	[esp+4Ch+var_4C], 5
		call	_SSLeay_version
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	_puts
		xor	eax, eax
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4393C0:				; CODE XREF: _version_main+86j
		mov	[esp+4Ch+var_30], 1
		jmp	loc_439258
; ---------------------------------------------------------------------------
		align 10h

loc_4393D0:				; CODE XREF: _version_main+AEj
		mov	[esp+4Ch+var_28], 1
		jmp	loc_439258
; ---------------------------------------------------------------------------
		align 10h

loc_4393E0:				; CODE XREF: _version_main+C2j
		mov	[esp+4Ch+var_24], 1
		jmp	loc_439258
; ---------------------------------------------------------------------------
		align 10h

loc_4393F0:				; CODE XREF: _version_main+D6j
		mov	[esp+4Ch+var_20], 1
		jmp	loc_439258
; ---------------------------------------------------------------------------

loc_4393FD:				; CODE XREF: _version_main+1BCj
		call	_SSLeay_version
		mov	[esp+4Ch+var_4C], eax ;	char *
		call	_puts
		jmp	loc_439200
; ---------------------------------------------------------------------------

loc_43940F:				; CODE XREF: _version_main+12j
		call	_BIO_s_file
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_4390D8
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+4Ch+var_40], edx
		mov	[esp+4Ch+var_44], 10h
		mov	[esp+4Ch+var_48], 6Ah
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_ctrl
		jmp	loc_4390D8
; ---------------------------------------------------------------------------

loc_439453:				; CODE XREF: _version_main+EAj
		mov	[esp+4Ch+var_48], offset aUsageVersionAv ; "usage:version -[avbofpd]\n"
		mov	eax, ds:_bio_err
		mov	[esp+4Ch+var_4C], eax
		call	_BIO_printf
		mov	eax, 1
		jmp	loc_43923E
_version_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _sess_id_main
_sess_id_main	proc near		; DATA XREF: .data:00455190o

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ecx, ds:_bio_err
		test	ecx, ecx
		jz	loc_4397D9

loc_439495:				; CODE XREF: _sess_id_main+36Dj
					; _sess_id_main+398j
		mov	eax, [esp+5Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+5Ch+arg_4]
		add	eax, 4
		test	ebp, ebp
		jle	loc_439850
		mov	[esp+5Ch+var_2C], 0
		mov	[esp+5Ch+var_20], 0
		mov	[esp+5Ch+var_28], 0
		mov	[esp+5Ch+var_24], 0
		mov	[esp+5Ch+var_30], 0
		mov	[esp+5Ch+var_38], 0
		mov	[esp+5Ch+var_3C], 3
		mov	[esp+5Ch+var_40], 3
		mov	[esp+5Ch+var_34], 0
		jmp	short loc_439521
; ---------------------------------------------------------------------------
		align 10h

loc_439500:				; CODE XREF: _sess_id_main+B1j
		dec	ebp
		jz	loc_439730
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_5C], eax ;	char *
		call	_str2fmt
		mov	[esp+5Ch+var_40], eax

loc_439519:				; CODE XREF: _sess_id_main+211j
					; _sess_id_main+23Dj ...
		dec	ebp
		lea	eax, [ebx+4]
		test	ebp, ebp
		jle	short loc_439568

loc_439521:				; CODE XREF: _sess_id_main+73j
					; _sess_id_main+E6j
		mov	edx, [eax]
		mov	esi, edx
		mov	edi, offset aInform_12 ; "-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_439500
		mov	edi, offset aOutform_12	; "-outform"
		mov	esi, edx
		mov	ecx, 9
		repe cmpsb
		jnz	loc_439670
		dec	ebp
		jz	loc_439730
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_5C], eax ;	char *
		call	_str2fmt
		mov	[esp+5Ch+var_3C], eax
		dec	ebp
		lea	eax, [ebx+4]
		test	ebp, ebp
		jg	short loc_439521

loc_439568:				; CODE XREF: _sess_id_main+9Fj
		call	_ERR_load_crypto_strings
		call	_BIO_s_file
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_439ABF
		mov	edx, [esp+5Ch+var_38]
		test	edx, edx
		jz	loc_4398A4
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 3
		mov	[esp+5Ch+var_58], 6Ch
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_439AE3

loc_4395B8:				; CODE XREF: _sess_id_main+445j
		cmp	[esp+5Ch+var_40], 1
		jz	loc_439A02
		cmp	[esp+5Ch+var_40], 3
		jnz	loc_4399E0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], esi
		call	_PEM_read_bio_SSL_SESSION
		mov	ebx, eax

loc_4395F0:				; CODE XREF: _sess_id_main+5A4j
		test	ebx, ebx
		jz	loc_439A29
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_free
		mov	[esp+5Ch+var_5C], ebx
		call	_SSL_SESSION_get0_peer
		mov	edi, eax
		mov	eax, [esp+5Ch+var_24]
		test	eax, eax
		jz	loc_439831
		mov	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_5C], eax ;	char *
		call	_strlen
		cmp	eax, 20h
		jbe	loc_43981D
		mov	[esp+5Ch+var_58], offset aContextTooLong ; "Context too	long\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf

loc_439640:				; CODE XREF: _sess_id_main+65Ej
		mov	eax, 1
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_439650:				; CODE XREF: _sess_id_main+3CBj
					; _sess_id_main+4FDj
		mov	[esp+5Ch+var_40], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_SSL_SESSION_free
		mov	eax, [esp+5Ch+var_40]
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_439670:				; CODE XREF: _sess_id_main+C1j
		mov	edi, offset aIn_15 ; "-in"
		mov	ecx, 4
		mov	esi, edx
		repe cmpsb
		jnz	short loc_4396A0
		dec	ebp
		jz	loc_439730
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_38], eax
		jmp	loc_439519
; ---------------------------------------------------------------------------
		align 10h

loc_4396A0:				; CODE XREF: _sess_id_main+1FEj
		mov	edi, offset aOut_20 ; "-out"
		mov	ecx, 5
		mov	esi, edx
		repe cmpsb
		jnz	short loc_4396D0
		dec	ebp
		jz	short loc_439730
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_30], eax
		jmp	loc_439519
; ---------------------------------------------------------------------------
		align 10h

loc_4396D0:				; CODE XREF: _sess_id_main+22Ej
		mov	edi, offset aText_11 ; "-text"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jnz	loc_439770
		inc	[esp+5Ch+var_34]
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_2C], edx
		mov	ebx, eax
		jmp	loc_439519
; ---------------------------------------------------------------------------

loc_4396F7:				; CODE XREF: _sess_id_main+30Ej
		mov	edi, offset aContext_0 ; "-context"
		mov	esi, edx
		mov	ecx, 9
		repe cmpsb
		jz	loc_4397C3
		mov	[esp+5Ch+var_54], edx
		mov	[esp+5Ch+var_58], offset aUnknownOpti_17 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_439730:				; CODE XREF: _sess_id_main+81j
					; _sess_id_main+C8j ...
		mov	eax, _sess_id_usage
		mov	ebx, offset _sess_id_usage
		test	eax, eax
		jz	short loc_439762
		xchg	ax, ax

loc_439740:				; CODE XREF: _sess_id_main+2E0j
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aS_21 ; "%s"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		add	ebx, 4
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_439740

loc_439762:				; CODE XREF: _sess_id_main+2BCj
					; _sess_id_main+57Dj ...
		mov	eax, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_439770:				; CODE XREF: _sess_id_main+25Ej
		mov	edi, offset aCert_3 ; "-cert"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jz	short loc_4397B0
		mov	edi, offset aNoout_11 ;	"-noout"
		mov	ecx, 7
		mov	esi, edx
		repe cmpsb
		jnz	loc_4396F7
		inc	[esp+5Ch+var_34]
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_20], edx
		mov	ebx, eax
		jmp	loc_439519
; ---------------------------------------------------------------------------
		align 10h

loc_4397B0:				; CODE XREF: _sess_id_main+2FEj
		inc	[esp+5Ch+var_34]
		mov	edx, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_28], edx
		mov	ebx, eax
		jmp	loc_439519
; ---------------------------------------------------------------------------

loc_4397C3:				; CODE XREF: _sess_id_main+285j
		dec	ebp
		jz	loc_439730
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+5Ch+var_24], eax
		jmp	loc_439519
; ---------------------------------------------------------------------------

loc_4397D9:				; CODE XREF: _sess_id_main+Fj
		call	_BIO_s_file
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_439495
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], 10h
		mov	[esp+5Ch+var_58], 6Ah
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_ctrl
		jmp	loc_439495
; ---------------------------------------------------------------------------

loc_43981D:				; CODE XREF: _sess_id_main+1A5j
		mov	[esp+5Ch+var_54], eax
		mov	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_SSL_SESSION_set1_id_context

loc_439831:				; CODE XREF: _sess_id_main+190j
		mov	eax, [esp+5Ch+var_20]
		test	eax, eax
		jz	loc_4398CA
		mov	eax, [esp+5Ch+var_2C]
		test	eax, eax
		jnz	loc_4398CA
		xor	eax, eax
		jmp	loc_439650
; ---------------------------------------------------------------------------

loc_439850:				; CODE XREF: _sess_id_main+25j
		call	_ERR_load_crypto_strings
		call	_BIO_s_file
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_439ABF
		mov	[esp+5Ch+var_30], 0
		mov	[esp+5Ch+var_24], 0
		mov	[esp+5Ch+var_28], 0
		mov	[esp+5Ch+var_2C], 0
		mov	[esp+5Ch+var_40], 3
		mov	[esp+5Ch+var_3C], 3
		mov	[esp+5Ch+var_20], 0

loc_4398A4:				; CODE XREF: _sess_id_main+10Aj
		mov	eax, ds:__imp___iob
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 6Ah
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_ctrl
		jmp	loc_4395B8
; ---------------------------------------------------------------------------

loc_4398CA:				; CODE XREF: _sess_id_main+3B7j
					; _sess_id_main+3C3j
		call	_BIO_s_file
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	loc_439AD1
		mov	eax, [esp+5Ch+var_30]
		test	eax, eax
		jz	loc_439A96
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 5
		mov	[esp+5Ch+var_58], 6Ch
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_439A80

loc_439915:				; CODE XREF: _sess_id_main+63Aj
		mov	eax, [esp+5Ch+var_2C]
		test	eax, eax
		jz	short loc_439982
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	_SSL_SESSION_print
		mov	eax, [esp+5Ch+var_28]
		test	eax, eax
		jnz	loc_439A4D
		mov	edx, [esp+5Ch+var_20]
		test	edx, edx
		jnz	short loc_4399B8

loc_43993D:				; CODE XREF: _sess_id_main+510j
		cmp	[esp+5Ch+var_3C], 1
		jz	loc_439B38
		cmp	[esp+5Ch+var_3C], 3
		jz	loc_439B05

loc_439953:				; CODE XREF: _sess_id_main+526j
		mov	[esp+5Ch+var_58], offset aBadOutputFo_11 ; "bad	output format specified	for outfile"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, 1

loc_43996D:				; CODE XREF: _sess_id_main+53Aj
					; _sess_id_main+556j ...
		mov	[esp+5Ch+var_40], eax
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_free_all
		mov	eax, [esp+5Ch+var_40]
		jmp	loc_439650
; ---------------------------------------------------------------------------

loc_439982:				; CODE XREF: _sess_id_main+49Bj
		mov	ebp, [esp+5Ch+var_20]
		test	ebp, ebp
		jnz	short loc_4399B8
		mov	ecx, [esp+5Ch+var_28]
		test	ecx, ecx
		jz	short loc_43993D
		test	edi, edi
		jz	short loc_4399B8

loc_439996:				; CODE XREF: _sess_id_main+5E7j
		cmp	[esp+5Ch+var_3C], 1
		jz	loc_439AF4
		cmp	[esp+5Ch+var_3C], 3
		jnz	short loc_439953
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	_PEM_write_bio_X509

loc_4399B4:				; CODE XREF: _sess_id_main+680j
		test	eax, eax
		jz	short loc_4399BC

loc_4399B8:				; CODE XREF: _sess_id_main+4BBj
					; _sess_id_main+508j ...
		xor	eax, eax
		jmp	short loc_43996D
; ---------------------------------------------------------------------------

loc_4399BC:				; CODE XREF: _sess_id_main+536j
		mov	[esp+5Ch+var_58], offset aUnableToWrit_7 ; "unable to write X509\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, 1
		jmp	short loc_43996D
; ---------------------------------------------------------------------------
		align 10h

loc_4399E0:				; CODE XREF: _sess_id_main+148j
		mov	[esp+5Ch+var_58], offset aBadInputFor_10 ; "bad	input format specified for input cr"...
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf

loc_4399F5:				; CODE XREF: _sess_id_main+5CBj
					; _sess_id_main+66Fj
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_free
		jmp	loc_439762
; ---------------------------------------------------------------------------

loc_439A02:				; CODE XREF: _sess_id_main+13Dj
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], esi
		mov	[esp+5Ch+var_58], offset _d2i_SSL_SESSION
		mov	[esp+5Ch+var_5C], offset _SSL_SESSION_new
		call	_ASN1_d2i_bio
		mov	ebx, eax
		jmp	loc_4395F0
; ---------------------------------------------------------------------------

loc_439A29:				; CODE XREF: _sess_id_main+172j
		mov	[esp+5Ch+var_58], offset aUnableToLoadSs ; "unable to load SSL_SESSION\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_ERR_print_errors
		jmp	short loc_4399F5
; ---------------------------------------------------------------------------

loc_439A4D:				; CODE XREF: _sess_id_main+4AFj
		test	edi, edi
		jz	loc_439B4E
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	_X509_print
		mov	eax, [esp+5Ch+var_20]
		test	eax, eax
		jz	loc_439996
		xor	eax, eax
		jmp	loc_43996D
; ---------------------------------------------------------------------------
		align 10h

loc_439A80:				; CODE XREF: _sess_id_main+48Fj
		mov	eax, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], eax ;	char *
		call	_perror
		mov	eax, 1
		jmp	loc_43996D
; ---------------------------------------------------------------------------

loc_439A96:				; CODE XREF: _sess_id_main+467j
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 6Ah
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_ctrl
		jmp	loc_439915
; ---------------------------------------------------------------------------

loc_439ABF:				; CODE XREF: _sess_id_main+FEj
					; _sess_id_main+3E6j
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_ERR_print_errors
		jmp	loc_439762
; ---------------------------------------------------------------------------

loc_439AD1:				; CODE XREF: _sess_id_main+45Bj
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_ERR_print_errors
		jmp	loc_439640
; ---------------------------------------------------------------------------

loc_439AE3:				; CODE XREF: _sess_id_main+132j
		mov	eax, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_5C], eax ;	char *
		call	_perror
		jmp	loc_4399F5
; ---------------------------------------------------------------------------

loc_439AF4:				; CODE XREF: _sess_id_main+51Bj
		mov	[esp+5Ch+var_58], edi
		mov	[esp+5Ch+var_5C], esi
		call	_i2d_X509_bio
		jmp	loc_4399B4
; ---------------------------------------------------------------------------

loc_439B05:				; CODE XREF: _sess_id_main+4CDj
		mov	[esp+5Ch+var_58], ebx
		mov	[esp+5Ch+var_5C], esi
		call	_PEM_write_bio_SSL_SESSION

loc_439B11:				; CODE XREF: _sess_id_main+6CCj
		test	eax, eax
		jnz	loc_4399B8
		mov	[esp+5Ch+var_58], offset aUnableToWriteS ; "unable to write SSL_SESSION\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, 1
		jmp	loc_43996D
; ---------------------------------------------------------------------------

loc_439B38:				; CODE XREF: _sess_id_main+4C2j
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], offset _i2d_SSL_SESSION
		call	_ASN1_i2d_bio
		jmp	short loc_439B11
; ---------------------------------------------------------------------------

loc_439B4E:				; CODE XREF: _sess_id_main+5CFj
		mov	[esp+5Ch+var_58], offset aNoCertificateP ; "No certificate present\n"
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_puts
		xor	eax, eax
		jmp	loc_43996D
_sess_id_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _ciphers_main
_ciphers_main	proc near		; DATA XREF: .data:0045519Co

var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_220		= dword	ptr -220h
var_21C		= byte ptr -21Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 23Ch
		mov	ebp, [esp+24Ch+arg_4]
		call	_SSLv23_server_method
		mov	[esp+24Ch+var_228], eax
		mov	ecx, ds:_bio_err
		test	ecx, ecx
		jz	loc_439E17

loc_439B98:				; CODE XREF: _ciphers_main+2C4j
		mov	[esp+24Ch+var_248], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+24Ch+var_24C], eax
		call	_BIO_new_fp
		mov	[esp+24Ch+var_220], eax
		mov	[esp+24Ch+var_248], 0
		mov	eax, ds:_bio_err
		mov	[esp+24Ch+var_24C], eax
		call	_load_config
		test	eax, eax
		jz	loc_439D70
		cmp	[esp+24Ch+arg_0], 1
		jle	loc_439E6C
		mov	eax, [esp+24Ch+arg_0]
		dec	eax
		mov	[esp+24Ch+var_234], eax
		xor	ebx, ebx
		mov	[esp+24Ch+var_224], 0
		mov	[esp+24Ch+var_22C], 0
		mov	[esp+24Ch+var_230], 0
		jmp	short loc_439C7F
; ---------------------------------------------------------------------------
		align 10h

loc_439C10:				; CODE XREF: _ciphers_main+121j
		mov	edi, offset aV_5 ; "-V"
		mov	esi, eax
		mov	ecx, 3
		repe cmpsb
		jz	loc_439DA0
		mov	edi, offset aSsl3_2 ; "-ssl3"
		mov	esi, eax
		mov	ecx, 6
		repe cmpsb
		jz	loc_439DC0
		mov	edi, offset aTls1_3 ; "-tls1"
		mov	esi, eax
		mov	ecx, 6
		repe cmpsb
		jz	loc_439DD0
		mov	edi, offset asc_46A7D2 ; "-h"
		mov	ecx, 2
		mov	esi, eax
		repe cmpsb
		jz	loc_439DDE
		mov	edi, offset a?_0 ; "-?"
		mov	esi, eax
		mov	ecx, 3
		repe cmpsb
		jz	loc_439DDE
		mov	[esp+24Ch+var_224], eax

loc_439C78:				; CODE XREF: _ciphers_main+259j
					; _ciphers_main+269j
		inc	ebx
		cmp	ebx, [esp+24Ch+var_234]
		jz	short loc_439CA6

loc_439C7F:				; CODE XREF: _ciphers_main+95j
					; _ciphers_main+134j
		mov	eax, [ebp+ebx*4+4]
		mov	esi, eax
		mov	edi, offset aV_4 ; "-v"
		mov	ecx, 3
		repe cmpsb
		jnz	loc_439C10
		mov	[esp+24Ch+var_230], 1

loc_439C9F:				; CODE XREF: _ciphers_main+240j
		inc	ebx
		cmp	ebx, [esp+24Ch+var_234]
		jnz	short loc_439C7F

loc_439CA6:				; CODE XREF: _ciphers_main+10Dj
		call	_SSL_library_init
		mov	eax, [esp+24Ch+var_228]
		mov	[esp+24Ch+var_24C], eax
		call	_SSL_CTX_new
		mov	edi, eax
		test	eax, eax
		jz	loc_439D51
		mov	eax, [esp+24Ch+var_224]
		test	eax, eax
		jz	short loc_439CDD
		mov	[esp+24Ch+var_248], eax
		mov	[esp+24Ch+var_24C], edi
		call	_SSL_CTX_set_cipher_list
		test	eax, eax
		jz	loc_439EBF

loc_439CDD:				; CODE XREF: _ciphers_main+157j
		mov	[esp+24Ch+var_24C], edi
		call	_SSL_new
		mov	[esp+24Ch+var_234], eax
		test	eax, eax
		jz	loc_439E9B
		mov	edx, [esp+24Ch+var_230]
		test	edx, edx
		jnz	loc_439ED6

loc_439CFD:				; CODE XREF: _ciphers_main+325j
		xor	ebx, ebx
		mov	esi, [esp+24Ch+var_220]
		mov	[esp+24Ch+var_230], edi
		mov	ebp, [esp+24Ch+var_234]
		jmp	short loc_439D25
; ---------------------------------------------------------------------------
		align 10h

loc_439D10:				; CODE XREF: _ciphers_main+1CDj
					; _ciphers_main+1DFj
		mov	[esp+24Ch+var_244], edi
		mov	[esp+24Ch+var_248], offset aS_13 ; "%s"
		mov	[esp+24Ch+var_24C], esi
		call	_BIO_printf
		inc	ebx

loc_439D25:				; CODE XREF: _ciphers_main+19Bj
		mov	[esp+24Ch+var_248], ebx
		mov	[esp+24Ch+var_24C], ebp
		call	_SSL_get_cipher_list
		mov	edi, eax
		test	eax, eax
		jz	loc_439E39
		test	ebx, ebx
		jz	short loc_439D10
		mov	[esp+24Ch+var_248], offset asc_46A7F1 ;	":"
		mov	[esp+24Ch+var_24C], esi
		call	_BIO_printf
		jmp	short loc_439D10
; ---------------------------------------------------------------------------

loc_439D51:				; CODE XREF: _ciphers_main+14Bj
					; _ciphers_main+311j
		call	_SSL_load_error_strings
		mov	eax, ds:_bio_err
		mov	[esp+24Ch+var_24C], eax
		call	_ERR_print_errors
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_439D70:				; CODE XREF: _ciphers_main+5Bj
					; _ciphers_main+27Aj ...
		mov	eax, 1

loc_439D75:				; CODE XREF: _ciphers_main+2F7j
					; _ciphers_main+34Aj
		mov	ebx, [esp+24Ch+var_220]
		test	ebx, ebx
		jz	short loc_439D8D
		mov	[esp+24Ch+var_234], eax
		mov	[esp+24Ch+var_24C], ebx
		call	_BIO_free_all
		mov	eax, [esp+24Ch+var_234]

loc_439D8D:				; CODE XREF: _ciphers_main+20Bj
		add	esp, 23Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_439DA0:				; CODE XREF: _ciphers_main+AEj
		mov	[esp+24Ch+var_22C], 1
		mov	[esp+24Ch+var_230], 1
		jmp	loc_439C9F
; ---------------------------------------------------------------------------
		align 10h

loc_439DC0:				; CODE XREF: _ciphers_main+C2j
		call	_SSLv3_client_method
		mov	[esp+24Ch+var_228], eax
		jmp	loc_439C78
; ---------------------------------------------------------------------------
		align 10h

loc_439DD0:				; CODE XREF: _ciphers_main+D6j
		call	_TLSv1_client_method
		mov	[esp+24Ch+var_228], eax
		jmp	loc_439C78
; ---------------------------------------------------------------------------

loc_439DDE:				; CODE XREF: _ciphers_main+EAj
					; _ciphers_main+FEj
		mov	eax, _ciphers_usage
		mov	ebx, offset _ciphers_usage
		test	eax, eax
		jz	short loc_439D70
		lea	esi, [esi+0]

loc_439DF0:				; CODE XREF: _ciphers_main+2A0j
		mov	[esp+24Ch+var_244], eax
		mov	[esp+24Ch+var_248], offset aS_13 ; "%s"
		mov	eax, ds:_bio_err
		mov	[esp+24Ch+var_24C], eax
		call	_BIO_printf
		add	ebx, 4
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_439DF0
		jmp	loc_439D70
; ---------------------------------------------------------------------------

loc_439E17:				; CODE XREF: _ciphers_main+22j
		mov	[esp+24Ch+var_248], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+24Ch+var_24C], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_439B98
; ---------------------------------------------------------------------------

loc_439E39:				; CODE XREF: _ciphers_main+1C5j
		mov	edi, [esp+24Ch+var_230]
		mov	[esp+24Ch+var_248], offset asc_46A7F3 ;	"\n"
		mov	eax, [esp+24Ch+var_220]
		mov	[esp+24Ch+var_24C], eax
		call	_BIO_printf

loc_439E51:				; CODE XREF: _ciphers_main+439j
		mov	[esp+24Ch+var_24C], edi
		call	_SSL_CTX_free
		mov	eax, [esp+24Ch+var_234]
		mov	[esp+24Ch+var_24C], eax
		call	_SSL_free
		xor	eax, eax
		jmp	loc_439D75
; ---------------------------------------------------------------------------

loc_439E6C:				; CODE XREF: _ciphers_main+69j
		call	_SSL_library_init
		mov	eax, [esp+24Ch+var_228]
		mov	[esp+24Ch+var_24C], eax
		call	_SSL_CTX_new
		mov	edi, eax
		test	eax, eax
		jz	loc_439D51
		mov	[esp+24Ch+var_24C], eax
		call	_SSL_new
		mov	[esp+24Ch+var_234], eax
		test	eax, eax
		jnz	loc_439CFD

loc_439E9B:				; CODE XREF: _ciphers_main+17Bj
					; _ciphers_main+364j
		call	_SSL_load_error_strings
		mov	eax, ds:_bio_err
		mov	[esp+24Ch+var_24C], eax
		call	_ERR_print_errors
		mov	[esp+24Ch+var_24C], edi
		call	_SSL_CTX_free
		mov	eax, 1
		jmp	loc_439D75
; ---------------------------------------------------------------------------

loc_439EBF:				; CODE XREF: _ciphers_main+167j
		mov	[esp+24Ch+var_248], offset aErrorInCipherL ; "Error in cipher list\n"
		mov	eax, ds:_bio_err
		mov	[esp+24Ch+var_24C], eax
		call	_BIO_printf
		jmp	short loc_439E9B
; ---------------------------------------------------------------------------

loc_439ED6:				; CODE XREF: _ciphers_main+187j
		mov	eax, [esp+24Ch+var_234]
		mov	[esp+24Ch+var_24C], eax
		call	_SSL_get_ciphers
		mov	ebp, eax
		xor	esi, esi
		mov	[esp+24Ch+var_224], edi
		mov	edi, [esp+24Ch+var_220]
		jmp	short loc_439F15
; ---------------------------------------------------------------------------

loc_439EF0:				; CODE XREF: _ciphers_main+3C9j
					; _ciphers_main+430j ...
		mov	[esp+24Ch+var_244], 200h
		lea	eax, [esp+24Ch+var_21C]
		mov	[esp+24Ch+var_248], eax
		mov	[esp+24Ch+var_24C], ebx
		call	_SSL_CIPHER_description
		mov	[esp+24Ch+var_248], eax
		mov	[esp+24Ch+var_24C], edi
		call	_BIO_puts
		inc	esi

loc_439F15:				; CODE XREF: _ciphers_main+37Ej
		mov	[esp+24Ch+var_24C], ebp
		call	_sk_num
		cmp	esi, eax
		jge	loc_439FA5
		mov	[esp+24Ch+var_248], esi
		mov	[esp+24Ch+var_24C], ebp
		call	_sk_value
		mov	ebx, eax
		mov	eax, [esp+24Ch+var_22C]
		test	eax, eax
		jz	short loc_439EF0
		mov	[esp+24Ch+var_24C], ebx
		call	_SSL_CIPHER_get_id
		mov	edx, eax
		shr	edx, 10h
		and	edx, 0FFh
		mov	[esp+24Ch+var_228], edx
		movzx	edx, ah
		mov	[esp+24Ch+var_230], edx
		xor	ecx, ecx
		mov	cl, al
		mov	edx, eax
		and	edx, 0FF000000h
		cmp	edx, 2000000h
		jz	short loc_439FCF
		cmp	edx, 3000000h
		jz	short loc_439FAE
		mov	[esp+24Ch+var_238], ecx
		mov	edx, [esp+24Ch+var_230]
		mov	[esp+24Ch+var_23C], edx
		mov	edx, [esp+24Ch+var_228]
		mov	[esp+24Ch+var_240], edx
		shr	eax, 18h
		mov	[esp+24Ch+var_244], eax
		mov	[esp+24Ch+var_248], offset a0x02x0x02x0x02 ; "0x%02X,0x%02X,0x%02X,0x%02X - "
		mov	[esp+24Ch+var_24C], edi
		call	_BIO_printf
		jmp	loc_439EF0
; ---------------------------------------------------------------------------

loc_439FA5:				; CODE XREF: _ciphers_main+3AFj
		mov	edi, [esp+24Ch+var_224]
		jmp	loc_439E51
; ---------------------------------------------------------------------------

loc_439FAE:				; CODE XREF: _ciphers_main+403j
		mov	[esp+24Ch+var_240], ecx
		mov	eax, [esp+24Ch+var_230]
		mov	[esp+24Ch+var_244], eax
		mov	[esp+24Ch+var_248], offset a0x02x0x02x ; "	    0x%02X,0x%02X - "
		mov	[esp+24Ch+var_24C], edi
		call	_BIO_printf
		jmp	loc_439EF0
; ---------------------------------------------------------------------------

loc_439FCF:				; CODE XREF: _ciphers_main+3FBj
		mov	[esp+24Ch+var_23C], ecx
		mov	eax, [esp+24Ch+var_230]
		mov	[esp+24Ch+var_240], eax
		mov	eax, [esp+24Ch+var_228]
		mov	[esp+24Ch+var_244], eax
		mov	[esp+24Ch+var_248], offset a0x02x0x02x0x_0 ; "	   0x%02X,0x%02X,0x%02X	- "
		mov	[esp+24Ch+var_24C], edi
		call	_BIO_printf
		jmp	loc_439EF0
_ciphers_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _nseq_main
_nseq_main	proc near		; DATA XREF: .data:004551A8o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edx, ds:_bio_err
		test	edx, edx
		jz	loc_43A33F

loc_43A015:				; CODE XREF: _nseq_main+35Cj
		call	_ERR_load_crypto_strings
		mov	eax, [esp+3Ch+arg_4]
		lea	edx, [eax+4]
		mov	[esp+3Ch+var_28], 0
		mov	[esp+3Ch+var_24], 0
		xor	ebp, ebp
		mov	eax, [edx]
		test	eax, eax
		jz	short loc_43A084
		lea	esi, [esi+0]

loc_43A040:				; CODE XREF: _nseq_main+82j
		cmp	byte ptr [eax],	2Dh
		jnz	short loc_43A084
		mov	edi, offset aToseq ; "-toseq"
		mov	esi, eax
		mov	ecx, 7
		repe cmpsb
		jz	loc_43A180
		mov	edi, offset aIn_16 ; "-in"
		mov	esi, eax
		mov	ecx, 4
		repe cmpsb
		jnz	loc_43A190
		mov	ebp, [edx+4]
		test	ebp, ebp
		jz	loc_43A1B0

loc_43A078:				; CODE XREF: _nseq_main+1A9j
		add	edx, 4

loc_43A07B:				; CODE XREF: _nseq_main+188j
		add	edx, 4
		mov	eax, [edx]
		test	eax, eax
		jnz	short loc_43A040

loc_43A084:				; CODE XREF: _nseq_main+37j
					; _nseq_main+43j
		test	ebp, ebp
		jz	loc_43A2F3
		mov	[esp+3Ch+var_38], offset aR_9 ;	"r"
		mov	[esp+3Ch+var_3C], ebp
		call	_BIO_new_file
		mov	[esp+3Ch+var_20], eax
		test	eax, eax
		jz	loc_43A361
		mov	eax, [esp+3Ch+var_24]
		test	eax, eax
		jz	loc_43A320

loc_43A0B4:				; CODE XREF: _nseq_main+312j
		mov	[esp+3Ch+var_38], offset aW_4 ;	"w"
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	loc_43A388

loc_43A0CE:				; CODE XREF: _nseq_main+33Aj
		mov	eax, [esp+3Ch+var_28]
		test	eax, eax
		jnz	loc_43A240
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 0
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	_PEM_read_bio_NETSCAPE_CERT_SEQUENCE
		mov	edi, eax
		test	eax, eax
		jz	loc_43A3B1
		xor	ebp, ebp
		jmp	short loc_43A13A
; ---------------------------------------------------------------------------
		align 10h

loc_43A110:				; CODE XREF: _nseq_main+147j
		mov	eax, [edi+4]
		mov	[esp+3Ch+var_38], ebp
		mov	[esp+3Ch+var_3C], eax
		call	_sk_value
		mov	esi, eax
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebx
		call	_dump_cert_text
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], ebx
		call	_PEM_write_bio_X509
		inc	ebp

loc_43A13A:				; CODE XREF: _nseq_main+10Aj
		mov	eax, [edi+4]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_num
		cmp	ebp, eax
		jl	short loc_43A110
		xor	ebp, ebp

loc_43A14B:				; CODE XREF: _nseq_main+2CDj
					; _nseq_main+2EEj ...
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_free
		mov	[esp+3Ch+var_3C], ebx
		call	_BIO_free_all
		mov	[esp+3Ch+var_3C], edi
		call	_NETSCAPE_CERT_SEQUENCE_free
		mov	eax, ebp
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_43A180
; ---------------------------------------------------------------------------
		align 10h

loc_43A180:				; CODE XREF: _nseq_main+53j
					; _nseq_main+171j
		mov	[esp+3Ch+var_28], 1
		jmp	loc_43A07B
; ---------------------------------------------------------------------------
		align 10h

loc_43A190:				; CODE XREF: _nseq_main+67j
		mov	edi, offset aOut_21 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_43A1B0
		mov	eax, [edx+4]
		mov	[esp+3Ch+var_24], eax
		test	eax, eax
		jnz	loc_43A078
		nop

loc_43A1B0:				; CODE XREF: _nseq_main+72j
					; _nseq_main+19Ej
		mov	[esp+3Ch+var_38], offset aNetscapeCertif ; "Netscape certificate sequence utility\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aUsageNseqOptio ; "Usage nseq [options]\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aWhereOption_11 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aInFileInputF_1 ; "-in	file  input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aOutFileOutpu_4 ; "-out file output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aToseqOutputNsS ; "-toseq    output NS	Sequence file\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43A240:				; CODE XREF: _nseq_main+D4j
		call	_NETSCAPE_CERT_SEQUENCE_new
		mov	edi, eax
		call	_sk_new_null
		mov	[edi+4], eax
		mov	esi, [esp+3Ch+var_20]
		jmp	short loc_43A26F
; ---------------------------------------------------------------------------
		align 10h

loc_43A260:				; CODE XREF: _nseq_main+291j
		mov	edx, [edi+4]
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], edx
		call	_sk_push

loc_43A26F:				; CODE XREF: _nseq_main+253j
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], esi
		call	_PEM_read_bio_X509
		test	eax, eax
		jnz	short loc_43A260
		mov	eax, [edi+4]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_num
		test	eax, eax
		jnz	short loc_43A2E0
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], offset aErrorReadingCe ; "Error reading certs	file %s\n"

loc_43A2AE:				; CODE XREF: _nseq_main+3BDj
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		mov	ebp, 1
		jmp	loc_43A14B
; ---------------------------------------------------------------------------
		align 10h

loc_43A2E0:				; CODE XREF: _nseq_main+2A0j
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	_PEM_write_bio_NETSCAPE_CERT_SEQUENCE
		xor	ebp, ebp
		jmp	loc_43A14B
; ---------------------------------------------------------------------------

loc_43A2F3:				; CODE XREF: _nseq_main+86j
		mov	[esp+3Ch+var_38], 0
		mov	eax, ds:__imp___iob
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_new_fp
		mov	[esp+3Ch+var_20], eax
		mov	eax, [esp+3Ch+var_24]
		test	eax, eax
		jnz	loc_43A0B4
		nop
		lea	esi, [esi+0]

loc_43A320:				; CODE XREF: _nseq_main+AEj
		mov	[esp+3Ch+var_38], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_new_fp
		mov	ebx, eax
		jmp	loc_43A0CE
; ---------------------------------------------------------------------------

loc_43A33F:				; CODE XREF: _nseq_main+Fj
		mov	[esp+3Ch+var_38], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_43A015
; ---------------------------------------------------------------------------

loc_43A361:				; CODE XREF: _nseq_main+A2j
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], offset aCanTOpenInputF ; "Can't open input file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	ebp, 1
		xor	edi, edi
		xor	ebx, ebx
		jmp	loc_43A14B
; ---------------------------------------------------------------------------

loc_43A388:				; CODE XREF: _nseq_main+C8j
		mov	eax, [esp+3Ch+var_24]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aCanTOpenOutp_0 ; "Can't open output file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	ebp, 1
		xor	edi, edi
		jmp	loc_43A14B
; ---------------------------------------------------------------------------

loc_43A3B1:				; CODE XREF: _nseq_main+102j
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], offset aErrorReadingSe ; "Error reading sequence file	%s\n"
		jmp	loc_43A2AE
_nseq_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _alg_print
_alg_print	proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 20h
		mov	esi, [esp+2Ch+arg_4]
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	edx, [eax+8]
		mov	[esp+2Ch+var_10], edx
		mov	eax, [eax]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], 0
		call	_d2i_PBEPARAM
		mov	ebx, eax
		test	eax, eax
		jz	short loc_43A44B
		mov	eax, [eax+4]
		mov	[esp+2Ch+var_2C], eax
		call	_ASN1_INTEGER_get
		mov	edi, eax
		mov	eax, [esi]
		mov	[esp+2Ch+var_2C], eax
		call	_OBJ_obj2nid
		mov	[esp+2Ch+var_2C], eax
		call	_OBJ_nid2ln
		mov	[esp+2Ch+var_20], edi
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aSIterationLd ; "%s, Iteration	%ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	[esp+2Ch+var_2C], ebx
		call	_PBEPARAM_free

loc_43A44B:				; CODE XREF: _alg_print+35j
		mov	eax, 1
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	edi
		retn
_alg_print	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _cert_load
_cert_load	proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+arg_4]
		xor	ebx, ebx
		jmp	short loc_43A491
; ---------------------------------------------------------------------------
		align 10h

loc_43A480:				; CODE XREF: _cert_load+53j
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], edi
		call	_sk_push
		mov	ebx, 1

loc_43A491:				; CODE XREF: _cert_load+10j
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 0
		mov	[esp+1Ch+var_18], 0
		mov	[esp+1Ch+var_1C], esi
		call	_PEM_read_bio_X509
		test	eax, eax
		jnz	short loc_43A480
		test	ebx, ebx
		jz	short loc_43A4BE
		call	_ERR_clear_error

loc_43A4BE:				; CODE XREF: _cert_load+57j
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
_cert_load	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _print_attribs
_print_attribs	proc near		; CODE XREF: _dump_certs_pkeys_bag+66p
					; _dump_certs_pkeys_bag+132p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [esp+2Ch+arg_0]
		mov	edi, [esp+2Ch+arg_4]
		mov	esi, [esp+2Ch+arg_8]
		test	edi, edi
		jz	loc_43A770
		mov	[esp+2Ch+var_2C], edi
		call	_sk_num
		mov	[esp+2Ch+var_24], esi
		test	eax, eax
		jz	loc_43A750
		mov	[esp+2Ch+var_28], offset aS_22 ; "%s\n"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		xor	esi, esi
		mov	[esp+2Ch+var_2C], edi
		call	_sk_num
		cmp	esi, eax
		jge	loc_43A5F0
		jmp	short loc_43A530
; ---------------------------------------------------------------------------
		align 10h

loc_43A530:				; CODE XREF: _print_attribs+51j
					; _print_attribs+11Aj
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], edi
		call	_sk_value
		mov	ebp, eax
		mov	eax, [eax]
		mov	[esp+2Ch+var_2C], eax
		call	_OBJ_obj2nid
		mov	[esp+2Ch+var_20], eax
		mov	[esp+2Ch+var_28], offset asc_46AAB7 ; "	   "
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		mov	edx, [esp+2Ch+var_20]
		test	edx, edx
		jnz	loc_43A620
		mov	eax, [ebp+0]
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+var_2C], ebx
		call	_i2a_ASN1_OBJECT
		mov	[esp+2Ch+var_28], offset asc_46AABC ; ": "
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf

loc_43A587:				; CODE XREF: _print_attribs+16Cj
		mov	eax, [ebp+8]
		mov	[esp+2Ch+var_2C], eax
		call	_sk_num
		test	eax, eax
		jz	short loc_43A600
		mov	eax, [ebp+8]
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], eax
		call	_sk_value
		mov	edx, [eax]
		cmp	edx, 4
		jz	loc_43A650
		cmp	edx, 1Eh
		jz	loc_43A710
		cmp	edx, 3
		jz	loc_43A6B0
		mov	[esp+2Ch+var_24], edx
		mov	[esp+2Ch+var_28], offset aUnsupportedTag ; "<Unsupported tag %d>\n"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		inc	esi
		nop
		lea	esi, [esi+0]

loc_43A5E0:				; CODE XREF: _print_attribs+141j
					; _print_attribs+1D1j ...
		mov	[esp+2Ch+var_2C], edi
		call	_sk_num
		cmp	esi, eax
		jl	loc_43A530

loc_43A5F0:				; CODE XREF: _print_attribs+4Bj
		mov	eax, 1
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43A600:				; CODE XREF: _print_attribs+C4j
		mov	[esp+2Ch+var_28], offset aNoValues ; "<No Values>\n"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		inc	esi
		jmp	short loc_43A5E0
; ---------------------------------------------------------------------------
		align 10h

loc_43A620:				; CODE XREF: _print_attribs+92j
		mov	[esp+2Ch+var_2C], edx
		call	_OBJ_nid2ln
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aS_14 ; "%s: "
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		jmp	loc_43A587
; ---------------------------------------------------------------------------
		jmp	short loc_43A650
; ---------------------------------------------------------------------------
		align 10h

loc_43A650:				; CODE XREF: _print_attribs+DEj
					; _print_attribs+171j
		mov	eax, [eax+4]
		mov	ecx, [eax]
		mov	edx, [eax+8]
		test	ecx, ecx
		jle	short loc_43A690
		mov	ebp, edx
		lea	eax, [edx+ecx]
		mov	[esp+2Ch+var_20], eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_43A670:				; CODE XREF: _print_attribs+1BEj
		xor	eax, eax
		mov	al, [ebp+0]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset a02x_5	; "%02X	"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		inc	ebp
		cmp	ebp, [esp+2Ch+var_20]
		jnz	short loc_43A670

loc_43A690:				; CODE XREF: _print_attribs+18Aj
					; _print_attribs+1EAj
		mov	[esp+2Ch+var_28], offset asc_46AAC4 ; "\n"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf

loc_43A6A0:				; CODE XREF: _print_attribs+230j
		inc	esi
		jmp	loc_43A5E0
; ---------------------------------------------------------------------------
		align 10h

loc_43A6B0:				; CODE XREF: _print_attribs+F0j
		mov	eax, [eax+4]
		mov	ecx, [eax]
		mov	edx, [eax+8]
		test	ecx, ecx
		jle	short loc_43A690
		mov	ebp, edx
		lea	eax, [edx+ecx]
		mov	[esp+2Ch+var_20], eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_43A6D0:				; CODE XREF: _print_attribs+21Ej
		xor	eax, eax
		mov	al, [ebp+0]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset a02x_5	; "%02X	"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		inc	ebp
		cmp	ebp, [esp+2Ch+var_20]
		jnz	short loc_43A6D0
		mov	[esp+2Ch+var_28], offset asc_46AAC4 ; "\n"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		jmp	short loc_43A6A0
; ---------------------------------------------------------------------------
		align 10h

loc_43A710:				; CODE XREF: _print_attribs+E7j
		mov	eax, [eax+4]
		mov	edx, [eax]
		mov	eax, [eax+8]
		mov	[esp+2Ch+var_28], edx
		mov	[esp+2Ch+var_2C], eax
		call	_OPENSSL_uni2asc
		mov	ebp, eax
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aS_22 ; "%s\n"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		mov	[esp+2Ch+var_2C], ebp
		call	_CRYPTO_free
		inc	esi
		jmp	loc_43A5E0
; ---------------------------------------------------------------------------
		align 10h

loc_43A750:				; CODE XREF: _print_attribs+29j
		mov	[esp+2Ch+var_28], offset aSEmptyAttribut ; "%s:	<Empty Attributes>\n"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		mov	eax, 1
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43A770:				; CODE XREF: _print_attribs+15j
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aSNoAttributes	; "%s: <No Attributes>\n"
		mov	[esp+2Ch+var_2C], ebx
		call	_BIO_printf
		mov	eax, 1
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_print_attribs	endp

; ---------------------------------------------------------------------------
		jmp	short _dump_certs_pkeys_bag
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _dump_certs_pkeys_bag
_dump_certs_pkeys_bag proc near		; CODE XREF: .text:0043A791j
					; _dump_certs_pkeys_bag+182p ...

var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	ebp, [esp+6Ch+arg_0]
		mov	ebx, [esp+6Ch+arg_4]
		mov	eax, [ebx]
		mov	[esp+6Ch+var_6C], eax
		call	_OBJ_obj2nid
		cmp	eax, 97h
		jz	loc_43AD70
		jle	loc_43ACA0
		cmp	eax, 98h
		jz	loc_43A970
		cmp	eax, 9Bh
		jnz	loc_43AE50
		mov	eax, [esp+6Ch+arg_10]
		and	eax, 4
		mov	[esp+6Ch+var_48], eax
		jnz	loc_43AEA0

loc_43A7F4:				; CODE XREF: _dump_certs_pkeys_bag+715j
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_64], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	eax, [ebx+4]
		mov	[esp+6Ch+var_4C], eax
		mov	eax, [esp+6Ch+arg_10]
		and	eax, 1
		mov	[esp+6Ch+var_44], eax
		mov	eax, [esp+6Ch+arg_10]
		and	eax, 2
		mov	[esp+6Ch+var_3C], eax
		mov	eax, [esp+6Ch+arg_10]
		and	eax, 10h
		mov	[esp+6Ch+var_38], eax
		mov	eax, [esp+6Ch+arg_10]
		and	eax, 8
		mov	[esp+6Ch+var_34], eax
		xor	edi, edi
		mov	eax, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_6C], eax
		call	_sk_num
		cmp	edi, eax
		jge	loc_43A960

loc_43A860:				; CODE XREF: _dump_certs_pkeys_bag+1AFj
		mov	[esp+6Ch+var_68], edi
		mov	eax, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_6C], eax
		call	_sk_value
		mov	ebx, eax
		mov	eax, [eax]
		mov	[esp+6Ch+var_6C], eax
		call	_OBJ_obj2nid
		cmp	eax, 97h
		jz	loc_43AAD0
		jle	loc_43AA20
		cmp	eax, 98h
		jz	loc_43ABF0
		cmp	eax, 9Bh
		jnz	loc_43ABA0
		mov	eax, [esp+6Ch+var_48]
		test	eax, eax
		jz	short loc_43A8C0
		mov	[esp+6Ch+var_68], offset aSafeContentsBa ; "Safe Contents bag\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf

loc_43A8C0:				; CODE XREF: _dump_certs_pkeys_bag+109j
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_64], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	esi, [ebx+4]
		xor	ebx, ebx
		mov	[esp+6Ch+var_40], edi
		mov	edi, [esp+6Ch+arg_14]
		jmp	short loc_43A930
; ---------------------------------------------------------------------------
		align 10h

loc_43A8F0:				; CODE XREF: _dump_certs_pkeys_bag+19Aj
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], esi
		call	_sk_value
		mov	[esp+6Ch+var_58], edi
		mov	ecx, [esp+6Ch+arg_10]
		mov	[esp+6Ch+var_5C], ecx
		mov	edx, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_60], edx
		mov	ecx, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_64], ecx
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_dump_certs_pkeys_bag
		test	eax, eax
		jz	loc_43AD60
		inc	ebx

loc_43A930:				; CODE XREF: _dump_certs_pkeys_bag+147j
		mov	[esp+6Ch+var_6C], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_43A8F0
		mov	edi, [esp+6Ch+var_40]

loc_43A940:				; CODE XREF: _dump_certs_pkeys_bag+29Dj
					; _dump_certs_pkeys_bag+342j ...
		inc	edi

loc_43A941:				; CODE XREF: _dump_certs_pkeys_bag+327j
					; _dump_certs_pkeys_bag+3F3j ...
		mov	eax, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_6C], eax
		call	_sk_num
		cmp	edi, eax
		jl	loc_43A860
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_43A960:				; CODE XREF: _dump_certs_pkeys_bag+BAj
					; _dump_certs_pkeys_bag+1E6j ...
		mov	edx, 1

loc_43A965:				; CODE XREF: _dump_certs_pkeys_bag+26Fj
					; _dump_certs_pkeys_bag+5AFj ...
		mov	eax, edx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43A970:				; CODE XREF: _dump_certs_pkeys_bag+2Fj
		test	byte ptr [esp+6Ch+arg_10], 4
		jnz	loc_43AEE0

loc_43A97E:				; CODE XREF: _dump_certs_pkeys_bag+755j
		test	byte ptr [esp+6Ch+arg_10], 2
		jnz	short loc_43A960
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_68], 9Dh
		mov	[esp+6Ch+var_6C], eax
		call	_PKCS12_get_attr_gen
		test	eax, eax
		jz	loc_43B0BC
		test	byte ptr [esp+6Ch+arg_10], 10h
		jnz	short loc_43A960

loc_43A9AD:				; CODE XREF: _dump_certs_pkeys_bag+924j
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_64], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	eax, [ebx+4]
		mov	eax, [eax]
		mov	[esp+6Ch+var_6C], eax
		call	_OBJ_obj2nid
		cmp	eax, 9Eh
		jnz	short loc_43A960
		mov	[esp+6Ch+var_6C], ebx
		call	_PKCS12_certbag2x509
		mov	ebx, eax
		test	eax, eax
		jz	loc_43AFB0
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_dump_cert_text
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], ebp
		call	_PEM_write_bio_X509
		mov	[esp+6Ch+var_6C], ebx
		call	_X509_free
		mov	edx, 1
		jmp	loc_43A965
; ---------------------------------------------------------------------------
		align 10h

loc_43AA20:				; CODE XREF: _dump_certs_pkeys_bag+E7j
		cmp	eax, 96h
		jnz	loc_43ABA0
		mov	eax, [esp+6Ch+var_48]
		test	eax, eax
		jnz	loc_43B090

loc_43AA37:				; CODE XREF: _dump_certs_pkeys_bag+905j
		mov	eax, [esp+6Ch+var_44]
		test	eax, eax
		jnz	loc_43A940
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_64], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	esi, [ebx+4]
		mov	[esp+6Ch+var_6C], esi
		call	_EVP_PKCS82PKEY
		mov	ebx, eax
		test	eax, eax
		jz	loc_43AFB0
		mov	eax, [esi+10h]
		mov	[esp+6Ch+var_64], offset aKeyAttributes	; "Key Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	eax, [esp+6Ch+arg_14]
		mov	[esp+6Ch+var_54], eax
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	eax, ds:_enc
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], ebp
		call	_PEM_write_bio_PrivateKey
		mov	[esp+6Ch+var_6C], ebx
		call	_EVP_PKEY_free
		inc	edi
		jmp	loc_43A941
; ---------------------------------------------------------------------------
		align 10h

loc_43AAD0:				; CODE XREF: _dump_certs_pkeys_bag+E1j
		mov	eax, [esp+6Ch+var_48]
		test	eax, eax
		jnz	loc_43AFC0

loc_43AADC:				; CODE XREF: _dump_certs_pkeys_bag+869j
					; _dump_certs_pkeys_bag+8BDj
		mov	eax, [esp+6Ch+var_44]
		test	eax, eax
		jnz	loc_43A940
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_64], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	eax, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	_PKCS12_decrypt_skey
		mov	ebx, eax
		test	eax, eax
		jz	loc_43AFB0
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_PKCS82PKEY
		mov	esi, eax
		test	eax, eax
		jz	loc_43AF9A
		mov	eax, [ebx+10h]
		mov	[esp+6Ch+var_64], offset aKeyAttributes	; "Key Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	[esp+6Ch+var_6C], ebx
		call	_PKCS8_PRIV_KEY_INFO_free
		mov	eax, [esp+6Ch+arg_14]
		mov	[esp+6Ch+var_54], eax
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	eax, ds:_enc
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], ebp
		call	_PEM_write_bio_PrivateKey
		mov	[esp+6Ch+var_6C], esi
		call	_EVP_PKEY_free
		inc	edi
		jmp	loc_43A941
; ---------------------------------------------------------------------------
		align 10h

loc_43ABA0:				; CODE XREF: _dump_certs_pkeys_bag+FDj
					; _dump_certs_pkeys_bag+285j
		mov	[esp+6Ch+var_68], offset aWarningUnsuppo ; "Warning unsupported	bag type: "
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	eax, [ebx]
		mov	[esp+6Ch+var_68], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_i2a_ASN1_OBJECT
		mov	[esp+6Ch+var_68], offset asc_46AAC4 ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		inc	edi
		jmp	loc_43A941
; ---------------------------------------------------------------------------
		align 10h

loc_43ABF0:				; CODE XREF: _dump_certs_pkeys_bag+F2j
		mov	eax, [esp+6Ch+var_48]
		test	eax, eax
		jnz	loc_43B070

loc_43ABFC:				; CODE XREF: _dump_certs_pkeys_bag+8E5j
		mov	esi, [esp+6Ch+var_3C]
		test	esi, esi
		jnz	loc_43A940
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_68], 9Dh
		mov	[esp+6Ch+var_6C], eax
		call	_PKCS12_get_attr_gen
		test	eax, eax
		jz	loc_43B0AA
		mov	ecx, [esp+6Ch+var_38]
		test	ecx, ecx
		jnz	loc_43A940

loc_43AC2F:				; CODE XREF: _dump_certs_pkeys_bag+910j
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_64], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	eax, [ebx+4]
		mov	eax, [eax]
		mov	[esp+6Ch+var_6C], eax
		call	_OBJ_obj2nid
		cmp	eax, 9Eh
		jnz	loc_43A940
		mov	[esp+6Ch+var_6C], ebx
		call	_PKCS12_certbag2x509
		mov	ebx, eax
		test	eax, eax
		jz	loc_43AFB0
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_dump_cert_text
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], ebp
		call	_PEM_write_bio_X509
		mov	[esp+6Ch+var_6C], ebx
		call	_X509_free
		inc	edi
		jmp	loc_43A941
; ---------------------------------------------------------------------------
		align 10h

loc_43ACA0:				; CODE XREF: _dump_certs_pkeys_bag+24j
		cmp	eax, 96h
		jnz	loc_43AE50
		test	byte ptr [esp+6Ch+arg_10], 4
		jnz	loc_43AEC0

loc_43ACB9:				; CODE XREF: _dump_certs_pkeys_bag+735j
		test	byte ptr [esp+6Ch+arg_10], 1
		jnz	loc_43A960
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_64], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	esi, [ebx+4]
		mov	[esp+6Ch+var_6C], esi
		call	_EVP_PKCS82PKEY
		mov	ebx, eax
		test	eax, eax
		jz	loc_43AFB0
		mov	eax, [esi+10h]
		mov	[esp+6Ch+var_64], offset aKeyAttributes	; "Key Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	eax, [esp+6Ch+arg_14]
		mov	[esp+6Ch+var_54], eax
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	eax, ds:_enc
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], ebx
		mov	[esp+6Ch+var_6C], ebp
		call	_PEM_write_bio_PrivateKey
		mov	[esp+6Ch+var_6C], ebx
		call	_EVP_PKEY_free
		mov	edx, 1
		jmp	loc_43A965
; ---------------------------------------------------------------------------
		align 10h

loc_43AD60:				; CODE XREF: _dump_certs_pkeys_bag+189j
		mov	edx, eax
		mov	eax, edx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43AD70:				; CODE XREF: _dump_certs_pkeys_bag+1Ej
		test	byte ptr [esp+6Ch+arg_10], 4
		jnz	loc_43AF00

loc_43AD7E:				; CODE XREF: _dump_certs_pkeys_bag+7A5j
					; _dump_certs_pkeys_bag+7F5j
		mov	edx, [esp+6Ch+arg_10]
		and	edx, 1
		jnz	loc_43A960
		mov	[esp+6Ch+var_4C], edx
		mov	eax, [ebx+8]
		mov	[esp+6Ch+var_64], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	eax, [esp+6Ch+arg_C]
		mov	[esp+6Ch+var_64], eax
		mov	eax, [esp+6Ch+arg_8]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebx
		call	_PKCS12_decrypt_skey
		mov	ebx, eax
		test	eax, eax
		jz	loc_43AFB0
		mov	[esp+6Ch+var_6C], eax
		call	_EVP_PKCS82PKEY
		mov	esi, eax
		test	eax, eax
		jz	loc_43B0CF
		mov	eax, [ebx+10h]
		mov	[esp+6Ch+var_64], offset aKeyAttributes	; "Key Attributes"
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], ebp
		call	_print_attribs
		mov	[esp+6Ch+var_6C], ebx
		call	_PKCS8_PRIV_KEY_INFO_free
		mov	eax, [esp+6Ch+arg_14]
		mov	[esp+6Ch+var_54], eax
		mov	[esp+6Ch+var_58], 0
		mov	[esp+6Ch+var_5C], 0
		mov	[esp+6Ch+var_60], 0
		mov	eax, ds:_enc
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], esi
		mov	[esp+6Ch+var_6C], ebp
		call	_PEM_write_bio_PrivateKey
		mov	[esp+6Ch+var_6C], esi
		call	_EVP_PKEY_free
		mov	edx, 1
		jmp	loc_43A965
; ---------------------------------------------------------------------------
		align 10h

loc_43AE50:				; CODE XREF: _dump_certs_pkeys_bag+3Aj
					; _dump_certs_pkeys_bag+505j
		mov	[esp+6Ch+var_68], offset aWarningUnsuppo ; "Warning unsupported	bag type: "
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	eax, [ebx]
		mov	[esp+6Ch+var_68], eax
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_i2a_ASN1_OBJECT
		mov	[esp+6Ch+var_68], offset asc_46AAC4 ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		jmp	loc_43A960
; ---------------------------------------------------------------------------
		align 10h

loc_43AEA0:				; CODE XREF: _dump_certs_pkeys_bag+4Ej
		mov	[esp+6Ch+var_68], offset aSafeContentsBa ; "Safe Contents bag\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		jmp	loc_43A7F4
; ---------------------------------------------------------------------------
		align 10h

loc_43AEC0:				; CODE XREF: _dump_certs_pkeys_bag+513j
		mov	[esp+6Ch+var_68], offset aKeyBag ; "Key	bag\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		jmp	loc_43ACB9
; ---------------------------------------------------------------------------
		align 10h

loc_43AEE0:				; CODE XREF: _dump_certs_pkeys_bag+1D8j
		mov	[esp+6Ch+var_68], offset aCertificateBag ; "Certificate	bag\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		jmp	loc_43A97E
; ---------------------------------------------------------------------------
		align 10h

loc_43AF00:				; CODE XREF: _dump_certs_pkeys_bag+5D8j
		mov	[esp+6Ch+var_68], offset aShroudedKeybag ; "Shrouded Keybag: "
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	eax, [ebx+4]
		mov	edi, [eax]
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	edx, [eax+8]
		mov	[esp+6Ch+var_20], edx
		mov	eax, [eax]
		mov	[esp+6Ch+var_64], eax
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], 0
		call	_d2i_PBEPARAM
		mov	esi, eax
		test	eax, eax
		jz	loc_43AD7E
		mov	eax, [eax+4]
		mov	[esp+6Ch+var_6C], eax
		call	_ASN1_INTEGER_get
		mov	[esp+6Ch+var_4C], eax
		mov	eax, [edi]
		mov	[esp+6Ch+var_6C], eax
		call	_OBJ_obj2nid
		mov	[esp+6Ch+var_6C], eax
		call	_OBJ_nid2ln
		mov	edx, [esp+6Ch+var_4C]
		mov	[esp+6Ch+var_60], edx
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSIterationLd ; "%s, Iteration	%ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_6C], esi
		call	_PBEPARAM_free
		jmp	loc_43AD7E
; ---------------------------------------------------------------------------

loc_43AF9A:				; CODE XREF: _dump_certs_pkeys_bag+38Dj
		mov	[esp+6Ch+var_6C], ebx
		call	_PKCS8_PRIV_KEY_INFO_free
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_43AFB0:				; CODE XREF: _dump_certs_pkeys_bag+244j
					; _dump_certs_pkeys_bag+2C9j ...
		xor	edx, edx
		mov	eax, edx
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43AFC0:				; CODE XREF: _dump_certs_pkeys_bag+336j
		mov	[esp+6Ch+var_68], offset aShroudedKeybag ; "Shrouded Keybag: "
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	eax, [ebx+4]
		mov	edx, [eax]
		mov	eax, [edx+4]
		mov	[esp+6Ch+var_40], edx
		mov	eax, [eax+4]
		mov	ecx, [eax+8]
		mov	[esp+6Ch+var_20], ecx
		mov	eax, [eax]
		mov	[esp+6Ch+var_64], eax
		lea	eax, [esp+6Ch+var_20]
		mov	[esp+6Ch+var_68], eax
		mov	[esp+6Ch+var_6C], 0
		call	_d2i_PBEPARAM
		mov	esi, eax
		test	eax, eax
		jz	loc_43AADC
		mov	eax, [eax+4]
		mov	[esp+6Ch+var_6C], eax
		call	_ASN1_INTEGER_get
		mov	[esp+6Ch+var_30], eax
		mov	edx, [esp+6Ch+var_40]
		mov	eax, [edx]
		mov	[esp+6Ch+var_6C], eax
		call	_OBJ_obj2nid
		mov	[esp+6Ch+var_6C], eax
		call	_OBJ_nid2ln
		mov	ecx, [esp+6Ch+var_30]
		mov	[esp+6Ch+var_60], ecx
		mov	[esp+6Ch+var_64], eax
		mov	[esp+6Ch+var_68], offset aSIterationLd ; "%s, Iteration	%ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		mov	[esp+6Ch+var_6C], esi
		call	_PBEPARAM_free
		jmp	loc_43AADC
; ---------------------------------------------------------------------------
		align 10h

loc_43B070:				; CODE XREF: _dump_certs_pkeys_bag+456j
		mov	[esp+6Ch+var_68], offset aCertificateBag ; "Certificate	bag\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		jmp	loc_43ABFC
; ---------------------------------------------------------------------------
		align 10h

loc_43B090:				; CODE XREF: _dump_certs_pkeys_bag+291j
		mov	[esp+6Ch+var_68], offset aKeyBag ; "Key	bag\n"
		mov	eax, ds:_bio_err
		mov	[esp+6Ch+var_6C], eax
		call	_BIO_printf
		jmp	loc_43AA37
; ---------------------------------------------------------------------------

loc_43B0AA:				; CODE XREF: _dump_certs_pkeys_bag+47Dj
		mov	edx, [esp+6Ch+var_34]
		test	edx, edx
		jz	loc_43AC2F
		inc	edi
		jmp	loc_43A941
; ---------------------------------------------------------------------------

loc_43B0BC:				; CODE XREF: _dump_certs_pkeys_bag+1FDj
		test	byte ptr [esp+6Ch+arg_10], 8
		jz	loc_43A9AD
		jmp	loc_43A960
; ---------------------------------------------------------------------------

loc_43B0CF:				; CODE XREF: _dump_certs_pkeys_bag+637j
		mov	[esp+6Ch+var_6C], ebx
		call	_PKCS8_PRIV_KEY_INFO_free
		mov	edx, [esp+6Ch+var_4C]
		jmp	loc_43A965
_dump_certs_pkeys_bag endp


; =============== S U B	R O U T	I N E =======================================


		public _dump_certs_pkeys_bags
_dump_certs_pkeys_bags proc near

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebp, [esp+3Ch+arg_0]
		mov	esi, [esp+3Ch+arg_4]
		mov	edi, [esp+3Ch+arg_8]
		xor	ebx, ebx
		jmp	short loc_43B139
; ---------------------------------------------------------------------------
		align 10h

loc_43B100:				; CODE XREF: _dump_certs_pkeys_bags+63j
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], esi
		call	_sk_value
		mov	edx, [esp+3Ch+arg_14]
		mov	[esp+3Ch+var_28], edx
		mov	ecx, [esp+3Ch+arg_10]
		mov	[esp+3Ch+var_2C], ecx
		mov	edx, [esp+3Ch+arg_C]
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], edi
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], ebp
		call	_dump_certs_pkeys_bag
		test	eax, eax
		jz	short loc_43B14A
		inc	ebx

loc_43B139:				; CODE XREF: _dump_certs_pkeys_bags+15j
		mov	[esp+3Ch+var_3C], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_43B100
		mov	eax, 1

loc_43B14A:				; CODE XREF: _dump_certs_pkeys_bags+56j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_dump_certs_pkeys_bags endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _dump_certs_keys_p12
_dump_certs_keys_p12 proc near		; CODE XREF: _pkcs12_main+E60p

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	ebp, [esp+7Ch+arg_0]
		mov	eax, [esp+7Ch+arg_4]
		mov	[esp+7Ch+var_7C], eax
		call	_PKCS12_unpack_authsafes
		mov	[esp+7Ch+var_4C], eax
		test	eax, eax
		jz	loc_43B86F
		mov	eax, [esp+7Ch+arg_10]
		and	eax, 4
		mov	[esp+7Ch+var_3C], eax
		mov	eax, [esp+7Ch+arg_10]
		and	eax, 1
		mov	[esp+7Ch+var_48], eax
		mov	eax, [esp+7Ch+arg_10]
		and	eax, 2
		mov	[esp+7Ch+var_40], eax
		mov	eax, [esp+7Ch+arg_10]
		and	eax, 10h
		mov	[esp+7Ch+var_34], eax
		mov	eax, [esp+7Ch+arg_10]
		and	eax, 8
		mov	[esp+7Ch+var_30], eax
		mov	[esp+7Ch+var_50], 0
		jmp	short loc_43B1E4
; ---------------------------------------------------------------------------
		align 10h

loc_43B1E0:				; CODE XREF: _dump_certs_keys_p12+C7j
					; _dump_certs_keys_p12+249j
		inc	[esp+7Ch+var_50]

loc_43B1E4:				; CODE XREF: _dump_certs_keys_p12+77j
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_num
		cmp	[esp+7Ch+var_50], eax
		jge	loc_43B865
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_value
		mov	ebx, eax
		mov	eax, [eax+10h]
		mov	[esp+7Ch+var_7C], eax
		call	_OBJ_obj2nid
		cmp	eax, 15h
		jz	loc_43B760
		cmp	eax, 1Ah
		jnz	short loc_43B1E0
		mov	edx, [esp+7Ch+var_3C]
		test	edx, edx
		jnz	loc_43B793

loc_43B235:				; CODE XREF: _dump_certs_keys_p12+67Cj
					; _dump_certs_keys_p12+6CCj
		mov	eax, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+arg_8]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	_PKCS12_unpack_p7encdata
		mov	[esp+7Ch+var_58], eax
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_54], eax

loc_43B25F:				; CODE XREF: _dump_certs_keys_p12+700j
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jz	loc_43B78C

loc_43B26B:				; CODE XREF: _dump_certs_keys_p12+626j
		xor	edi, edi
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_num
		cmp	edi, eax
		jge	loc_43B395
		jmp	short loc_43B290
; ---------------------------------------------------------------------------
		align 10h

loc_43B290:				; CODE XREF: _dump_certs_keys_p12+121j
					; _dump_certs_keys_p12+22Fj
		mov	[esp+7Ch+var_78], edi
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_value
		mov	ebx, eax
		mov	eax, [eax]
		mov	[esp+7Ch+var_7C], eax
		call	_OBJ_obj2nid
		cmp	eax, 97h
		jz	loc_43B460
		jle	loc_43B3B0
		cmp	eax, 98h
		jz	loc_43B580
		cmp	eax, 9Bh
		jnz	loc_43B530
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jz	short loc_43B2F0
		mov	[esp+7Ch+var_78], offset aSafeContentsBa ; "Safe Contents bag\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf

loc_43B2F0:				; CODE XREF: _dump_certs_keys_p12+179j
		mov	eax, [ebx+8]
		mov	[esp+7Ch+var_74], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	_print_attribs
		mov	esi, [ebx+4]
		xor	ebx, ebx
		mov	[esp+7Ch+var_44], edi
		mov	edi, [esp+7Ch+arg_14]
		jmp	short loc_43B366
; ---------------------------------------------------------------------------
		align 10h

loc_43B320:				; CODE XREF: _dump_certs_keys_p12+210j
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], esi
		call	_sk_value
		mov	[esp+7Ch+var_68], edi
		mov	ecx, [esp+7Ch+arg_10]
		mov	[esp+7Ch+var_6C], ecx
		mov	edx, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_70], edx
		mov	ecx, [esp+7Ch+arg_8]
		mov	[esp+7Ch+var_74], ecx
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	_dump_certs_pkeys_bag
		test	eax, eax
		jz	loc_43B630
		inc	ebx

loc_43B366:				; CODE XREF: _dump_certs_keys_p12+1B7j
		mov	[esp+7Ch+var_7C], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_43B320
		mov	edi, [esp+7Ch+var_44]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_43B380:				; CODE XREF: _dump_certs_keys_p12+26Dj
					; _dump_certs_keys_p12+312j ...
		inc	edi

loc_43B381:				; CODE XREF: _dump_certs_keys_p12+2F3j
					; _dump_certs_keys_p12+3C9j ...
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_num
		cmp	edi, eax
		jl	loc_43B290

loc_43B395:				; CODE XREF: _dump_certs_keys_p12+11Bj
		mov	[esp+7Ch+var_78], offset _PKCS12_SAFEBAG_free
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		jmp	loc_43B1E0
; ---------------------------------------------------------------------------
		align 10h

loc_43B3B0:				; CODE XREF: _dump_certs_keys_p12+157j
		cmp	eax, 96h
		jnz	loc_43B530
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jnz	loc_43B740

loc_43B3C7:				; CODE XREF: _dump_certs_keys_p12+5F5j
		mov	eax, [esp+7Ch+var_48]
		test	eax, eax
		jnz	short loc_43B380
		mov	eax, [ebx+8]
		mov	[esp+7Ch+var_74], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	_print_attribs
		mov	esi, [ebx+4]
		mov	[esp+7Ch+var_7C], esi
		call	_EVP_PKCS82PKEY
		mov	ebx, eax
		test	eax, eax
		jz	loc_43B630
		mov	eax, [esi+10h]
		mov	[esp+7Ch+var_74], offset aKeyAttributes	; "Key Attributes"
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	_print_attribs
		mov	eax, [esp+7Ch+arg_14]
		mov	[esp+7Ch+var_64], eax
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	eax, ds:_enc
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], ebp
		call	_PEM_write_bio_PrivateKey
		mov	[esp+7Ch+var_7C], ebx
		call	_EVP_PKEY_free
		inc	edi
		jmp	loc_43B381
; ---------------------------------------------------------------------------
		align 10h

loc_43B460:				; CODE XREF: _dump_certs_keys_p12+151j
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jnz	loc_43B690

loc_43B46C:				; CODE XREF: _dump_certs_keys_p12+579j
					; _dump_certs_keys_p12+5CDj
		mov	eax, [esp+7Ch+var_48]
		test	eax, eax
		jnz	loc_43B380
		mov	eax, [ebx+8]
		mov	[esp+7Ch+var_74], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	_print_attribs
		mov	eax, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+arg_8]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	_PKCS12_decrypt_skey
		mov	ebx, eax
		test	eax, eax
		jz	loc_43B630
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKCS82PKEY
		mov	esi, eax
		test	eax, eax
		jz	loc_43B622
		mov	eax, [ebx+10h]
		mov	[esp+7Ch+var_74], offset aKeyAttributes	; "Key Attributes"
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	_print_attribs
		mov	[esp+7Ch+var_7C], ebx
		call	_PKCS8_PRIV_KEY_INFO_free
		mov	eax, [esp+7Ch+arg_14]
		mov	[esp+7Ch+var_64], eax
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	eax, ds:_enc
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], ebp
		call	_PEM_write_bio_PrivateKey
		mov	[esp+7Ch+var_7C], esi
		call	_EVP_PKEY_free
		inc	edi
		jmp	loc_43B381
; ---------------------------------------------------------------------------
		align 10h

loc_43B530:				; CODE XREF: _dump_certs_keys_p12+16Dj
					; _dump_certs_keys_p12+255j
		mov	[esp+7Ch+var_78], offset aWarningUnsuppo ; "Warning unsupported	bag type: "
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, [ebx]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_i2a_ASN1_OBJECT
		mov	[esp+7Ch+var_78], offset asc_46AAC4 ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		inc	edi
		jmp	loc_43B381
; ---------------------------------------------------------------------------
		align 10h

loc_43B580:				; CODE XREF: _dump_certs_keys_p12+162j
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jnz	loc_43B670

loc_43B58C:				; CODE XREF: _dump_certs_keys_p12+525j
		mov	esi, [esp+7Ch+var_40]
		test	esi, esi
		jnz	loc_43B380
		mov	eax, [ebx+8]
		mov	[esp+7Ch+var_78], 9Dh
		mov	[esp+7Ch+var_7C], eax
		call	_PKCS12_get_attr_gen
		test	eax, eax
		jz	loc_43B831
		mov	ecx, [esp+7Ch+var_34]
		test	ecx, ecx
		jnz	loc_43B380

loc_43B5BF:				; CODE XREF: _dump_certs_keys_p12+6D7j
		mov	eax, [ebx+8]
		mov	[esp+7Ch+var_74], offset aBagAttributes	; "Bag Attributes"
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	_print_attribs
		mov	eax, [ebx+4]
		mov	eax, [eax]
		mov	[esp+7Ch+var_7C], eax
		call	_OBJ_obj2nid
		cmp	eax, 9Eh
		jnz	loc_43B380
		mov	[esp+7Ch+var_7C], ebx
		call	_PKCS12_certbag2x509
		mov	ebx, eax
		test	eax, eax
		jz	short loc_43B630
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebp
		call	_dump_cert_text
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], ebp
		call	_PEM_write_bio_X509
		mov	[esp+7Ch+var_7C], ebx
		call	_X509_free
		inc	edi
		jmp	loc_43B381
; ---------------------------------------------------------------------------

loc_43B622:				; CODE XREF: _dump_certs_keys_p12+363j
		mov	[esp+7Ch+var_7C], ebx
		call	_PKCS8_PRIV_KEY_INFO_free
		lea	esi, [esi+0]

loc_43B630:				; CODE XREF: _dump_certs_keys_p12+1FFj
					; _dump_certs_keys_p12+295j ...
		mov	[esp+7Ch+var_78], offset _PKCS12_SAFEBAG_free
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		xor	ebx, ebx

loc_43B646:				; CODE XREF: _dump_certs_keys_p12+62Ej
					; _dump_certs_keys_p12+70Aj
		mov	[esp+7Ch+var_78], offset _PKCS7_free
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		mov	eax, ebx
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43B670:				; CODE XREF: _dump_certs_keys_p12+426j
		mov	[esp+7Ch+var_78], offset aCertificateBag ; "Certificate	bag\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_43B58C
; ---------------------------------------------------------------------------
		align 10h

loc_43B690:				; CODE XREF: _dump_certs_keys_p12+306j
		mov	[esp+7Ch+var_78], offset aShroudedKeybag ; "Shrouded Keybag: "
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, [ebx+4]
		mov	edx, [eax]
		mov	eax, [edx+4]
		mov	[esp+7Ch+var_44], edx
		mov	eax, [eax+4]
		mov	ecx, [eax+8]
		mov	[esp+7Ch+var_20], ecx
		mov	eax, [eax]
		mov	[esp+7Ch+var_74], eax
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_d2i_PBEPARAM
		mov	esi, eax
		test	eax, eax
		jz	loc_43B46C
		mov	eax, [eax+4]
		mov	[esp+7Ch+var_7C], eax
		call	_ASN1_INTEGER_get
		mov	[esp+7Ch+var_38], eax
		mov	edx, [esp+7Ch+var_44]
		mov	eax, [edx]
		mov	[esp+7Ch+var_7C], eax
		call	_OBJ_obj2nid
		mov	[esp+7Ch+var_7C], eax
		call	_OBJ_nid2ln
		mov	ecx, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_70], ecx
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aSIterationLd ; "%s, Iteration	%ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_7C], esi
		call	_PBEPARAM_free
		jmp	loc_43B46C
; ---------------------------------------------------------------------------
		align 10h

loc_43B740:				; CODE XREF: _dump_certs_keys_p12+261j
		mov	[esp+7Ch+var_78], offset aKeyBag ; "Key	bag\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_43B3C7
; ---------------------------------------------------------------------------
		align 10h

loc_43B760:				; CODE XREF: _dump_certs_keys_p12+BEj
		mov	[esp+7Ch+var_7C], ebx
		call	_PKCS12_unpack_p7data
		mov	[esp+7Ch+var_58], eax
		mov	ecx, [esp+7Ch+var_3C]
		test	ecx, ecx
		jnz	loc_43B843
		mov	[esp+7Ch+var_54], 0
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jnz	loc_43B26B

loc_43B78C:				; CODE XREF: _dump_certs_keys_p12+105j
		xor	ebx, ebx
		jmp	loc_43B646
; ---------------------------------------------------------------------------

loc_43B793:				; CODE XREF: _dump_certs_keys_p12+CFj
		mov	[esp+7Ch+var_78], offset aPkcs7Encrypted ; "PKCS7 Encrypted data: "
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, [ebx+14h]
		mov	eax, [eax+4]
		mov	esi, [eax+4]
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	edx, [eax+8]
		mov	[esp+7Ch+var_20], edx
		mov	eax, [eax]
		mov	[esp+7Ch+var_74], eax
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_d2i_PBEPARAM
		mov	edi, eax
		test	eax, eax
		jz	loc_43B235
		mov	eax, [eax+4]
		mov	[esp+7Ch+var_7C], eax
		call	_ASN1_INTEGER_get
		mov	[esp+7Ch+var_58], eax
		mov	eax, [esi]
		mov	[esp+7Ch+var_7C], eax
		call	_OBJ_obj2nid
		mov	[esp+7Ch+var_7C], eax
		call	_OBJ_nid2ln
		mov	edx, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_70], edx
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aSIterationLd ; "%s, Iteration	%ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_7C], edi
		call	_PBEPARAM_free
		jmp	loc_43B235
; ---------------------------------------------------------------------------

loc_43B831:				; CODE XREF: _dump_certs_keys_p12+44Dj
		mov	edx, [esp+7Ch+var_30]
		test	edx, edx
		jz	loc_43B5BF
		inc	edi
		jmp	loc_43B381
; ---------------------------------------------------------------------------

loc_43B843:				; CODE XREF: _dump_certs_keys_p12+612j
		mov	[esp+7Ch+var_78], offset aPkcs7Data ; "PKCS7 Data\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_54], eax
		jmp	loc_43B25F
; ---------------------------------------------------------------------------

loc_43B865:				; CODE XREF: _dump_certs_keys_p12+94j
		mov	ebx, 1
		jmp	loc_43B646
; ---------------------------------------------------------------------------

loc_43B86F:				; CODE XREF: _dump_certs_keys_p12+23j
		xor	eax, eax
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_dump_certs_keys_p12 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _pkcs12_main
_pkcs12_main	proc near		; DATA XREF: .data:004551B4o

var_1AC		= dword	ptr -1ACh
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= byte ptr -108h
var_D6		= byte ptr -0D6h
var_A4		= byte ptr -0A4h
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 19Ch
		mov	ebx, [esp+1ACh+arg_4]
		mov	[esp+1ACh+var_114], 92h
		mov	[esp+1ACh+var_110], 0
		mov	[esp+1ACh+var_10C], 0
		call	_EVP_des_ede3_cbc
		mov	ds:_enc, eax
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_43C4B0

loc_43B8C9:				; CODE XREF: _pkcs12_main+C4Dj
		mov	[esp+1ACh+var_1A8], 0
		mov	[esp+1ACh+var_1AC], eax
		call	_load_config
		test	eax, eax
		jz	loc_43BE40
		mov	[esp+1ACh+var_118], 95h
		lea	ebp, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+1ACh+var_158], 0
		mov	[esp+1ACh+var_120], 0
		mov	[esp+1ACh+var_124], 0
		mov	[esp+1ACh+var_138], 0
		mov	[esp+1ACh+var_178], 0
		mov	[esp+1ACh+var_164], 0
		mov	[esp+1ACh+var_15C], 0
		mov	[esp+1ACh+var_160], 0
		mov	[esp+1ACh+var_17C], 0
		mov	[esp+1ACh+var_154], 0
		mov	[esp+1ACh+var_128], 1
		mov	[esp+1ACh+var_170], 0
		mov	[esp+1ACh+var_150], 0
		mov	[esp+1ACh+var_140], 800h
		mov	[esp+1ACh+var_130], 800h
		test	ebx, ebx
		jz	loc_43BF3D
		mov	[esp+1ACh+var_184], 0
		mov	[esp+1ACh+var_14C], 0
		mov	[esp+1ACh+var_174], 0
		mov	[esp+1ACh+var_180], 0
		mov	[esp+1ACh+var_148], 0
		mov	[esp+1ACh+var_13C], 0
		mov	[esp+1ACh+var_134], 0
		mov	[esp+1ACh+var_144], 0
		mov	[esp+1ACh+var_12C], 0
		mov	[esp+1ACh+var_168], 0
		mov	[esp+1ACh+var_16C], 0
		jmp	short loc_43B9F4
; ---------------------------------------------------------------------------
		align 10h

loc_43B9E0:				; CODE XREF: _pkcs12_main+177j
					; _pkcs12_main+1649j ...
		mov	[esp+1ACh+var_184], 1

loc_43B9E8:				; CODE XREF: _pkcs12_main+69Dj
					; _pkcs12_main+6B8j ...
		lea	eax, [ebp+4]
		mov	ebx, [ebp+4]
		test	ebx, ebx
		jz	short loc_43BA20

loc_43B9F2:				; CODE XREF: _pkcs12_main+19Aj
		mov	ebp, eax

loc_43B9F4:				; CODE XREF: _pkcs12_main+156j
		cmp	byte ptr [ebx],	2Dh
		jnz	short loc_43B9E0
		mov	edi, offset aNokeys ; "-nokeys"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jnz	loc_43BEE0
		or	[esp+1ACh+var_174], 1
		lea	eax, [ebp+4]
		mov	ebx, [ebp+4]
		test	ebx, ebx
		jnz	short loc_43B9F2
		lea	esi, [esi+0]

loc_43BA20:				; CODE XREF: _pkcs12_main+170j
		mov	eax, [esp+1ACh+var_184]
		test	eax, eax
		jz	loc_43BF90
		mov	[esp+1ACh+var_1A8], offset aUsagePkcs12Opt ; "Usage: pkcs12 [options]\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aWhereOption_12 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aExportOutputPk ; "-export	    output PKCS12 file\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aChainAddCertif ; "-chain	    add	certificate chain\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aInkeyFilePriva ; "-inkey file   private key	if not infile"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aCertfileFAddAl ; "-certfile	f   add	all certs in f\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aCapathArgPem_1 ; "-CApath arg   - PEM format directory of"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aCafileArgPem_1 ; "-CAfile arg   - PEM format file of CA's"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aNameNameUseNam ; "-name \"name\"  use name as friendly na"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aCanameNmUseNmA ; "-caname \"nm\"  use nm as	CA friendly n"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aInInfileInputF ; "-in  infile   input filename\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aOutOutfileOutp ; "-out outfile  output filename\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aNooutDonTOut_0 ; "-noout	    don't output anything, ju"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aNomacverDonTVe ; "-nomacver	    don't verify MAC.\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aNocertsDonTOut ; "-nocerts	    don't output certificates"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aClcertsOnlyOut ; "-clcerts	    only output	client certif"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aCacertsOnlyOut ; "-cacerts	    only output	CA certificat"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aNokeysDonTOutp ; "-nokeys	    don't output private keys"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aInfoGiveInfoAb ; "-info	    give info about PKCS#12 s"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aDesEncryptPriv ; "-des	    encrypt private keys with"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aDes3EncryptPri ; "-des3	    encrypt private keys with"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aIdeaEncryptPri ; "-idea	    encrypt private keys with"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aSeedEncryptPri ; "-seed	    encrypt private keys with"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aAes128Aes192_3 ; "-aes128, -aes192,	-aes256\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aEncryptPemOu_9 ; "		    encrypt PEM	output with c"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aCamellia128C_4 ; "-camellia128, -camellia192, -camellia25"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aEncryptPemO_10 ; "		    encrypt PEM	output with c"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aNodesDonTEnc_0 ; "-nodes	    don't encrypt private key"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aNoiterDonTUseE ; "-noiter	    don't use encryption iter"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aNomaciterDonTU ; "-nomaciter    don't use MAC iteration\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aMaciterUseMacI ; "-maciter	    use	MAC iteration\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aNomacDonTGener ; "-nomac	    don't generate MAC\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aTwopassSeparat ; "-twopass	    separate MAC, encryption "...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aDescertEncrypt ; "-descert	    encrypt PKCS#12 certifica"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aCertpbeAlgSpec ; "-certpbe alg  specify certificate	PBE a"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aKeypbeAlgSpeci ; "-keypbe alg   specify private key	PBE a"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aMacalgAlgDiges ; "-macalg alg   digest algorithm used in "...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aKeyexSetMsKeyE ; "-keyex	    set	MS key exchange	type\"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aKeysigSetMsKey ; "-keysig	    set	MS key signature type"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aPasswordPSetIm ; "-password	p   set	import/export passwor"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aPassinPInputFi ; "-passin p	    input file pass phrase so"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aPassoutPOutput ; "-passout p    output file	pass phrase s"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aEngineEUseE_16 ; "-engine e	    use	engine e, possibly a "...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A0], 3Bh
		mov	[esp+1ACh+var_1A4], 3Bh
		mov	[esp+1ACh+var_1A8], offset aRandFileCfil_6 ; "-rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aLoadTheFileO_4 ; "		    load the file (or the fil"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aTheRandomNum_4 ; "		    the	random number generat"...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aCspNameMicroso ; "-CSP name	    Microsoft CSP name\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_1A8], offset aLmkAddLocalMac ; "-LMK	    Add	local machine keyset "...

loc_43BE1F:				; CODE XREF: _pkcs12_main+788j
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		xor	edi, edi
		xor	ebp, ebp
		jmp	loc_43BE5C
; ---------------------------------------------------------------------------
		align 10h

loc_43BE40:				; CODE XREF: _pkcs12_main+5Bj
		mov	[esp+1ACh+var_178], 0
		mov	[esp+1ACh+var_17C], 0
		mov	[esp+1ACh+var_180], 0
		xor	edi, edi
		xor	ebp, ebp

loc_43BE5C:				; CODE XREF: _pkcs12_main+5B0j
					; _pkcs12_main+D68j ...
		mov	ebx, 1

loc_43BE61:				; CODE XREF: _pkcs12_main+B7Cj
		mov	edx, [esp+1ACh+var_180]
		test	edx, edx
		jnz	short loc_43BE71
		mov	eax, [esp+1ACh+var_178]
		test	eax, eax
		jz	short loc_43BE86

loc_43BE71:				; CODE XREF: _pkcs12_main+5E7j
					; _pkcs12_main+B6Ej ...
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1A8], eax
		mov	[esp+1ACh+var_1AC], 0
		call	_app_RAND_write_file

loc_43BE86:				; CODE XREF: _pkcs12_main+5EFj
		mov	[esp+1ACh+var_1AC], ebp
		call	_BIO_free
		mov	[esp+1ACh+var_1AC], edi
		call	_BIO_free_all
		mov	eax, [esp+1ACh+var_17C]
		test	eax, eax
		jz	short loc_43BEA6
		mov	[esp+1ACh+var_1AC], eax
		call	_sk_free

loc_43BEA6:				; CODE XREF: _pkcs12_main+61Cj
		mov	eax, [esp+1ACh+var_110]
		test	eax, eax
		jz	short loc_43BEB9
		mov	[esp+1ACh+var_1AC], eax
		call	_CRYPTO_free

loc_43BEB9:				; CODE XREF: _pkcs12_main+62Fj
		mov	eax, [esp+1ACh+var_10C]
		test	eax, eax
		jz	short loc_43BECC
		mov	[esp+1ACh+var_1AC], eax
		call	_CRYPTO_free

loc_43BECC:				; CODE XREF: _pkcs12_main+642j
		mov	eax, ebx
		add	esp, 19Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43BEE0:				; CODE XREF: _pkcs12_main+187j
		mov	edi, offset aKeyex ; "-keyex"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jz	short loc_43BF30
		mov	edi, offset aKeysig ; "-keysig"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jz	loc_43C410
		mov	edi, offset aNocerts ; "-nocerts"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jnz	loc_43C470
		or	[esp+1ACh+var_174], 2
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------
		align 10h

loc_43BF30:				; CODE XREF: _pkcs12_main+66Ej
		mov	[esp+1ACh+var_170], 10h
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43BF3D:				; CODE XREF: _pkcs12_main+F5j
		mov	[esp+1ACh+var_14C], 0
		mov	[esp+1ACh+var_174], 0
		mov	[esp+1ACh+var_180], 0
		mov	[esp+1ACh+var_148], 0
		mov	[esp+1ACh+var_13C], 0
		mov	[esp+1ACh+var_134], 0
		mov	[esp+1ACh+var_144], 0
		mov	[esp+1ACh+var_12C], 0
		mov	[esp+1ACh+var_168], 0
		mov	[esp+1ACh+var_16C], 0

loc_43BF90:				; CODE XREF: _pkcs12_main+1A6j
		mov	[esp+1ACh+var_1A4], 0
		mov	eax, [esp+1ACh+var_158]
		mov	[esp+1ACh+var_1A8], eax
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_setup_engine
		mov	esi, eax
		mov	eax, [esp+1ACh+var_164]
		test	eax, eax
		jz	short loc_43C00D
		mov	ebp, [esp+1ACh+var_180]
		test	ebp, ebp
		jz	loc_43C41D
		lea	eax, [esp+1ACh+var_10C]
		mov	[esp+1ACh+var_19C], eax	; int
		lea	eax, [esp+1ACh+var_110]
		mov	[esp+1ACh+var_1A0], eax	; int
		mov	eax, [esp+1ACh+var_164]
		mov	[esp+1ACh+var_1A4], eax	; char *
		mov	eax, [esp+1ACh+var_160]
		mov	[esp+1ACh+var_1A8], eax	; char *
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax	; int
		call	_app_passwd
		test	eax, eax
		jnz	short loc_43C050
		lea	esi, [esi+0]

loc_43C000:				; CODE XREF: _pkcs12_main+7C2j
					; _pkcs12_main+BD2j
		mov	[esp+1ACh+var_1A8], offset aErrorGettin_15 ; "Error getting passwords\n"
		jmp	loc_43BE1F
; ---------------------------------------------------------------------------

loc_43C00D:				; CODE XREF: _pkcs12_main+735j
		lea	eax, [esp+1ACh+var_10C]
		mov	[esp+1ACh+var_19C], eax	; int
		lea	eax, [esp+1ACh+var_110]
		mov	[esp+1ACh+var_1A0], eax	; int
		mov	eax, [esp+1ACh+var_15C]
		mov	[esp+1ACh+var_1A4], eax	; char *
		mov	eax, [esp+1ACh+var_160]
		mov	[esp+1ACh+var_1A8], eax	; char *
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax	; int
		call	_app_passwd
		test	eax, eax
		jz	short loc_43C000
		mov	edi, [esp+1ACh+var_180]
		test	edi, edi
		jz	loc_43C460

loc_43C050:				; CODE XREF: _pkcs12_main+778j
		mov	eax, [esp+1ACh+var_10C]
		mov	[esp+1ACh+var_184], eax

loc_43C05B:				; CODE XREF: _pkcs12_main+BEBj
		mov	ebx, [esp+1ACh+var_184]
		test	ebx, ebx
		jz	loc_43C746
		mov	eax, [esp+1ACh+var_184]
		mov	[esp+1ACh+var_164], eax
		mov	[esp+1ACh+var_154], 1

loc_43C077:				; CODE XREF: _pkcs12_main+EDCj
		mov	ecx, [esp+1ACh+var_180]
		test	ecx, ecx
		jnz	loc_43C4E0
		mov	edx, [esp+1ACh+var_178]
		test	edx, edx
		jz	short loc_43C0CD
		mov	[esp+1ACh+var_1A4], 1
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1A8], eax
		mov	[esp+1ACh+var_1AC], 0
		call	_app_RAND_load_file

loc_43C0A8:				; CODE XREF: _pkcs12_main+C8Ej
		mov	eax, [esp+1ACh+var_178]
		mov	[esp+1ACh+var_1AC], eax
		call	_app_RAND_load_files
		mov	[esp+1ACh+var_1A4], eax
		mov	[esp+1ACh+var_1A8], offset aLdSemiRandom_7 ; "%ld semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf

loc_43C0CD:				; CODE XREF: _pkcs12_main+809j
					; _pkcs12_main+C88j
		call	_ERR_load_crypto_strings
		mov	eax, [esp+1ACh+var_16C]
		test	eax, eax
		jz	loc_43C6F4
		mov	[esp+1ACh+var_1A8], offset aRb ; "rb"
		mov	eax, [esp+1ACh+var_16C]
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_new_file
		mov	ebp, eax
		test	eax, eax
		jz	loc_43C7B4

loc_43C0FC:				; CODE XREF: _pkcs12_main+E8Dj
		mov	eax, [esp+1ACh+var_168]
		test	eax, eax
		jz	loc_43C761
		mov	[esp+1ACh+var_1A8], offset aWb_4 ; "wb"
		mov	eax, [esp+1ACh+var_168]
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_new_file
		mov	edi, eax
		test	eax, eax
		jz	loc_43C7DB

loc_43C126:				; CODE XREF: _pkcs12_main+EFDj
		mov	eax, [esp+1ACh+var_150]
		test	eax, eax
		jnz	loc_43C5A4

loc_43C132:				; CODE XREF: _pkcs12_main+D4Dj
		mov	eax, [esp+1ACh+var_180]
		test	eax, eax
		jz	loc_43C5ED
		mov	eax, [esp+1ACh+var_174]
		and	eax, 3
		cmp	eax, 3
		jz	loc_43C9F3
		mov	ebx, [esp+1ACh+var_174]
		and	ebx, 2
		jz	short loc_43C15F
		mov	[esp+1ACh+var_14C], 0

loc_43C15F:				; CODE XREF: _pkcs12_main+8D5j
		test	byte ptr [esp+1ACh+var_174], 1
		jz	loc_43C52A
		mov	[esp+1ACh+var_174], 0

loc_43C172:				; CODE XREF: _pkcs12_main+CF7j
		test	ebx, ebx
		jz	loc_43C7E1
		mov	[esp+1ACh+var_16C], 0
		mov	[esp+1ACh+var_168], 0

loc_43C18A:				; CODE XREF: _pkcs12_main+1295j
					; _pkcs12_main+13F1j
		mov	eax, [esp+1ACh+var_144]
		test	eax, eax
		jz	short loc_43C1F5
		mov	[esp+1ACh+var_198], offset aCertificatesFr ; "certificates from	certfile"
		mov	[esp+1ACh+var_19C], esi
		mov	[esp+1ACh+var_1A0], 0
		mov	[esp+1ACh+var_1A4], 3
		mov	[esp+1ACh+var_1A8], eax
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_load_certs
		mov	ebx, eax
		test	eax, eax
		jz	loc_43CAAD
		mov	esi, [esp+1ACh+var_16C]
		jmp	short loc_43C1E1
; ---------------------------------------------------------------------------
		align 10h

loc_43C1D0:				; CODE XREF: _pkcs12_main+96Ej
		call	_sk_shift
		mov	[esp+1ACh+var_1A8], eax
		mov	[esp+1ACh+var_1AC], esi
		call	_sk_push

loc_43C1E1:				; CODE XREF: _pkcs12_main+94Dj
		mov	[esp+1ACh+var_1AC], ebx
		call	_sk_num
		mov	[esp+1ACh+var_1AC], ebx
		test	eax, eax
		jg	short loc_43C1D0
		call	_sk_free

loc_43C1F5:				; CODE XREF: _pkcs12_main+910j
		mov	ebx, [esp+1ACh+var_14C]
		test	ebx, ebx
		jnz	loc_43C8A0

loc_43C201:				; CODE XREF: _pkcs12_main+1339j
		xor	ebx, ebx
		mov	[esp+1ACh+var_160], edi
		mov	edi, [esp+1ACh+var_16C]
		mov	[esp+1ACh+var_15C], ebp
		mov	esi, [esp+1ACh+var_17C]
		jmp	short loc_43C24F
; ---------------------------------------------------------------------------
		align 10h

loc_43C220:				; CODE XREF: _pkcs12_main+9D9j
		mov	[esp+1ACh+var_1A8], ebx
		mov	[esp+1ACh+var_1AC], esi
		call	_sk_value
		mov	ebp, eax
		mov	[esp+1ACh+var_1A8], ebx
		mov	[esp+1ACh+var_1AC], edi
		call	_sk_value
		mov	[esp+1ACh+var_1A4], 0FFFFFFFFh
		mov	[esp+1ACh+var_1A8], ebp
		mov	[esp+1ACh+var_1AC], eax
		call	_X509_alias_set1
		inc	ebx

loc_43C24F:				; CODE XREF: _pkcs12_main+993j
		mov	[esp+1ACh+var_1AC], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_43C220
		mov	edi, [esp+1ACh+var_160]
		mov	ebp, [esp+1ACh+var_15C]
		mov	eax, [esp+1ACh+var_13C]
		test	eax, eax
		jz	loc_43C587
		mov	ecx, [esp+1ACh+var_174]
		test	ecx, ecx
		jz	short loc_43C2CF
		mov	[esp+1ACh+var_19C], 0FFFFFFFFh
		mov	[esp+1ACh+var_1A0], eax
		mov	[esp+1ACh+var_1A4], 1001h
		mov	[esp+1ACh+var_1A8], 1A1h
		mov	[esp+1ACh+var_1AC], ecx
		call	_EVP_PKEY_add1_attr_by_NID
		mov	ecx, [esp+1ACh+var_148]
		test	ecx, ecx
		jz	short loc_43C2CF

loc_43C2A3:				; CODE XREF: _pkcs12_main+D19j
		mov	[esp+1ACh+var_19C], 0FFFFFFFFh
		mov	[esp+1ACh+var_1A0], 0
		mov	[esp+1ACh+var_1A4], 0
		mov	[esp+1ACh+var_1A8], 358h
		mov	eax, [esp+1ACh+var_174]
		mov	[esp+1ACh+var_1AC], eax
		call	_EVP_PKEY_add1_attr_by_NID

loc_43C2CF:				; CODE XREF: _pkcs12_main+9F5j
					; _pkcs12_main+A21j ...
		mov	eax, [esp+1ACh+var_154]
		test	eax, eax
		jz	loc_43C975

loc_43C2DB:				; CODE XREF: _pkcs12_main+111Ej
		mov	eax, [esp+1ACh+var_150]
		test	eax, eax
		jz	loc_43C9CC

loc_43C2E7:				; CODE XREF: _pkcs12_main+116Ej
		mov	eax, [esp+1ACh+var_170]
		mov	[esp+1ACh+var_188], eax
		mov	[esp+1ACh+var_18C], 0FFFFFFFFh
		mov	eax, [esp+1ACh+var_130]
		mov	[esp+1ACh+var_190], eax
		mov	eax, [esp+1ACh+var_118]
		mov	[esp+1ACh+var_194], eax
		mov	eax, [esp+1ACh+var_114]
		mov	[esp+1ACh+var_198], eax
		mov	eax, [esp+1ACh+var_16C]
		mov	[esp+1ACh+var_19C], eax
		mov	eax, [esp+1ACh+var_168]
		mov	[esp+1ACh+var_1A0], eax
		mov	eax, [esp+1ACh+var_174]
		mov	[esp+1ACh+var_1A4], eax
		mov	eax, [esp+1ACh+var_134]
		mov	[esp+1ACh+var_1A8], eax
		mov	eax, [esp+1ACh+var_184]
		mov	[esp+1ACh+var_1AC], eax
		call	_PKCS12_create
		mov	esi, eax
		test	eax, eax
		jz	loc_43CC3E
		mov	eax, [esp+1ACh+var_138]
		test	eax, eax
		jz	loc_43C9C5
		mov	[esp+1ACh+var_1AC], eax
		call	_EVP_get_digestbyname
		mov	ebx, eax
		test	eax, eax
		jz	loc_43CCE0

loc_43C369:				; CODE XREF: _pkcs12_main+1147j
					; _pkcs12_main+147Dj
		mov	eax, [esp+1ACh+var_140]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_43C3A2
		mov	[esp+1ACh+var_194], ebx
		mov	[esp+1ACh+var_198], eax
		mov	[esp+1ACh+var_19C], 0
		mov	[esp+1ACh+var_1A0], 0
		mov	[esp+1ACh+var_1A4], 0FFFFFFFFh
		mov	eax, [esp+1ACh+var_164]
		mov	[esp+1ACh+var_1A8], eax
		mov	[esp+1ACh+var_1AC], esi
		call	_PKCS12_set_mac

loc_43C3A2:				; CODE XREF: _pkcs12_main+AF0j
		mov	[esp+1ACh+var_1A8], esi
		mov	[esp+1ACh+var_1AC], edi
		call	_i2d_PKCS12_bio
		xor	ebx, ebx

loc_43C3B0:				; CODE XREF: _pkcs12_main+10A4j
					; _pkcs12_main+1140j ...
		mov	eax, [esp+1ACh+var_174]
		test	eax, eax
		jz	short loc_43C3C4

loc_43C3B8:				; CODE XREF: _pkcs12_main+101Bj
		mov	eax, [esp+1ACh+var_174]
		mov	[esp+1ACh+var_1AC], eax
		call	_EVP_PKEY_free

loc_43C3C4:				; CODE XREF: _pkcs12_main+B36j
		mov	eax, [esp+1ACh+var_16C]
		test	eax, eax
		jz	short loc_43C3DC
		mov	[esp+1ACh+var_1A8], offset _X509_free
		mov	[esp+1ACh+var_1AC], eax
		call	_sk_pop_free

loc_43C3DC:				; CODE XREF: _pkcs12_main+B4Aj
		mov	eax, [esp+1ACh+var_168]
		test	eax, eax
		jz	short loc_43C3EC
		mov	[esp+1ACh+var_1AC], eax
		call	_X509_free

loc_43C3EC:				; CODE XREF: _pkcs12_main+B62j
		test	esi, esi
		jz	loc_43BE71

loc_43C3F4:				; CODE XREF: _pkcs12_main+E6Fj
					; _pkcs12_main+10F0j ...
		mov	[esp+1ACh+var_1AC], esi
		call	_PKCS12_free
		jmp	loc_43BE61
; ---------------------------------------------------------------------------
		jmp	short loc_43C410
; ---------------------------------------------------------------------------
		align 10h

loc_43C410:				; CODE XREF: _pkcs12_main+67Ej
					; _pkcs12_main+B81j
		mov	[esp+1ACh+var_170], 80h
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43C41D:				; CODE XREF: _pkcs12_main+73Dj
		lea	eax, [esp+1ACh+var_10C]
		mov	[esp+1ACh+var_19C], eax	; int
		lea	eax, [esp+1ACh+var_110]
		mov	[esp+1ACh+var_1A0], eax	; int
		mov	eax, [esp+1ACh+var_15C]
		mov	[esp+1ACh+var_1A4], eax	; char *
		mov	eax, [esp+1ACh+var_164]
		mov	[esp+1ACh+var_1A8], eax	; char *
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax	; int
		call	_app_passwd
		test	eax, eax
		jz	loc_43C000
		nop
		lea	esi, [esi+0]

loc_43C460:				; CODE XREF: _pkcs12_main+7CAj
		mov	eax, [esp+1ACh+var_110]
		mov	[esp+1ACh+var_184], eax
		jmp	loc_43C05B
; ---------------------------------------------------------------------------

loc_43C470:				; CODE XREF: _pkcs12_main+692j
		mov	edi, offset aClcerts ; "-clcerts"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jz	loc_43C520
		mov	edi, offset aCacerts ; "-cacerts"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jnz	loc_43C7BD
		or	[esp+1ACh+var_174], 10h
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------
		align 10h

loc_43C4B0:				; CODE XREF: _pkcs12_main+43j
		mov	[esp+1ACh+var_1A8], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_43B8C9
; ---------------------------------------------------------------------------
		align 10h

loc_43C4E0:				; CODE XREF: _pkcs12_main+7FDj
		mov	eax, [esp+1ACh+var_178]
		test	eax, eax
		setnz	bl
		xor	eax, eax
		mov	al, bl
		mov	[esp+1ACh+var_1A4], eax
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1A8], eax
		mov	[esp+1ACh+var_1AC], 0
		call	_app_RAND_load_file
		test	bl, bl
		jz	loc_43C0CD
		jmp	loc_43C0A8
; ---------------------------------------------------------------------------
		align 10h

loc_43C520:				; CODE XREF: _pkcs12_main+BFEj
		or	[esp+1ACh+var_174], 8
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43C52A:				; CODE XREF: _pkcs12_main+8E4j
		mov	edx, [esp+1ACh+var_110]
		mov	eax, [esp+1ACh+var_12C]
		test	eax, eax
		jz	loc_43CBBE

loc_43C540:				; CODE XREF: _pkcs12_main+1342j
		mov	[esp+1ACh+var_194], offset aPrivateKey_4 ; "private key"
		mov	[esp+1ACh+var_198], esi
		mov	[esp+1ACh+var_19C], edx
		mov	[esp+1ACh+var_1A0], 1
		mov	[esp+1ACh+var_1A4], 3
		mov	[esp+1ACh+var_1A8], eax
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_load_key
		mov	[esp+1ACh+var_174], eax
		test	eax, eax
		jnz	loc_43C172

loc_43C57D:				; CODE XREF: _pkcs12_main+1188j
		mov	ebx, 1
		jmp	loc_43BE71
; ---------------------------------------------------------------------------

loc_43C587:				; CODE XREF: _pkcs12_main+9E9j
		mov	edx, [esp+1ACh+var_148]
		test	edx, edx
		jz	loc_43C2CF
		mov	eax, [esp+1ACh+var_174]
		test	eax, eax
		jnz	loc_43C2A3
		jmp	loc_43C2CF
; ---------------------------------------------------------------------------

loc_43C5A4:				; CODE XREF: _pkcs12_main+8ACj
		mov	eax, [esp+1ACh+var_180]
		mov	[esp+1ACh+var_1A0], eax
		mov	[esp+1ACh+var_1A4], offset aEnterMacPasswo ; "Enter MAC	Password:"
		mov	[esp+1ACh+var_1A8], 32h
		lea	eax, [esp+1ACh+var_D6]
		mov	[esp+1ACh+var_1AC], eax
		call	_EVP_read_pw_string
		test	eax, eax
		jz	loc_43C132
		mov	[esp+1ACh+var_1A8], offset aCanTReadPass_0 ; "Can't read Password\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		jmp	loc_43BE5C
; ---------------------------------------------------------------------------

loc_43C5ED:				; CODE XREF: _pkcs12_main+8B8j
		mov	[esp+1ACh+var_1A8], 0
		mov	[esp+1ACh+var_1AC], ebp
		call	_d2i_PKCS12_bio
		mov	esi, eax
		test	eax, eax
		jz	loc_43CC83
		mov	eax, [esp+1ACh+var_154]
		test	eax, eax
		jz	loc_43CA2B

loc_43C613:				; CODE XREF: _pkcs12_main+11D4j
		mov	eax, [esp+1ACh+var_150]
		test	eax, eax
		jz	loc_43CA79

loc_43C61F:				; CODE XREF: _pkcs12_main+121Bj
		test	byte ptr [esp+1ACh+var_174], 4
		jz	short loc_43C659
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_43C659
		mov	eax, [eax+8]
		test	eax, eax
		jz	loc_43CC34
		mov	[esp+1ACh+var_1AC], eax
		call	_ASN1_INTEGER_get

loc_43C640:				; CODE XREF: _pkcs12_main+13B9j
		mov	[esp+1ACh+var_1A4], eax
		mov	[esp+1ACh+var_1A8], offset aMacIterationLd ; "MAC Iteration %ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf

loc_43C659:				; CODE XREF: _pkcs12_main+DA4j
					; _pkcs12_main+DABj
		mov	ebx, [esp+1ACh+var_128]
		test	ebx, ebx
		jz	short loc_43C6B6
		mov	eax, [esp+1ACh+var_164]
		cmp	byte ptr [eax],	0
		jnz	loc_43C929
		mov	[esp+1ACh+var_1A4], 0
		mov	[esp+1ACh+var_1A8], 0
		mov	[esp+1ACh+var_1AC], esi
		call	_PKCS12_verify_mac
		test	eax, eax
		jz	loc_43C929
		mov	ecx, [esp+1ACh+var_150]
		test	ecx, ecx
		jnz	short loc_43C6A1
		mov	[esp+1ACh+var_184], 0

loc_43C6A1:				; CODE XREF: _pkcs12_main+E17j
					; _pkcs12_main+10C3j
		mov	[esp+1ACh+var_1A8], offset aMacVerifiedOk ; "MAC verified OK\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf

loc_43C6B6:				; CODE XREF: _pkcs12_main+DE2j
		mov	eax, [esp+1ACh+var_10C]
		mov	[esp+1ACh+var_198], eax
		mov	eax, [esp+1ACh+var_174]
		mov	[esp+1ACh+var_19C], eax
		mov	[esp+1ACh+var_1A0], 0FFFFFFFFh
		mov	eax, [esp+1ACh+var_184]
		mov	[esp+1ACh+var_1A4], eax
		mov	[esp+1ACh+var_1A8], esi
		mov	[esp+1ACh+var_1AC], edi
		call	_dump_certs_keys_p12
		test	eax, eax
		jz	loc_43CAA0
		xor	ebx, ebx
		jmp	loc_43C3F4
; ---------------------------------------------------------------------------

loc_43C6F4:				; CODE XREF: _pkcs12_main+858j
		mov	[esp+1ACh+var_1A8], 0
		mov	eax, ds:__imp___iob
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_new_fp
		mov	ebp, eax
		test	eax, eax
		jnz	loc_43C0FC
		mov	eax, offset aStdin_3 ; "<stdin>"

loc_43C718:				; CODE XREF: _pkcs12_main+F38j
		mov	[esp+1ACh+var_1A4], eax
		mov	[esp+1ACh+var_1A8], offset aErrorOpeningIn ; "Error opening input file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	eax, [esp+1ACh+var_16C]
		mov	[esp+1ACh+var_1AC], eax	; char *
		call	_perror
		xor	edi, edi
		xor	ebp, ebp
		jmp	loc_43BE5C
; ---------------------------------------------------------------------------

loc_43C746:				; CODE XREF: _pkcs12_main+7E1j
		lea	eax, [esp+1ACh+var_D6]
		mov	[esp+1ACh+var_164], eax
		lea	eax, [esp+1ACh+var_108]
		mov	[esp+1ACh+var_184], eax
		jmp	loc_43C077
; ---------------------------------------------------------------------------

loc_43C761:				; CODE XREF: _pkcs12_main+882j
		mov	[esp+1ACh+var_1A8], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_new_fp
		mov	edi, eax
		test	eax, eax
		jnz	loc_43C126
		mov	eax, offset aStdout_0 ;	"<stdout>"

loc_43C788:				; CODE XREF: _pkcs12_main+F5Fj
		mov	[esp+1ACh+var_1A4], eax
		mov	[esp+1ACh+var_1A8], offset aErrorOpening_0 ; "Error opening output file	%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	eax, [esp+1ACh+var_168]
		mov	[esp+1ACh+var_1AC], eax	; char *
		call	_perror
		xor	edi, edi
		jmp	loc_43BE5C
; ---------------------------------------------------------------------------

loc_43C7B4:				; CODE XREF: _pkcs12_main+876j
		mov	eax, [esp+1ACh+var_16C]
		jmp	loc_43C718
; ---------------------------------------------------------------------------

loc_43C7BD:				; CODE XREF: _pkcs12_main+C12j
		mov	edi, offset aNoout_12 ;	"-noout"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jnz	loc_43CA0D
		or	[esp+1ACh+var_174], 3
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43C7DB:				; CODE XREF: _pkcs12_main+8A0j
		mov	eax, [esp+1ACh+var_168]
		jmp	short loc_43C788
; ---------------------------------------------------------------------------

loc_43C7E1:				; CODE XREF: _pkcs12_main+8F4j
		mov	[esp+1ACh+var_198], offset aCertificates_0 ; "certificates"
		mov	[esp+1ACh+var_19C], esi
		mov	[esp+1ACh+var_1A0], 0
		mov	[esp+1ACh+var_1A4], 3
		mov	eax, [esp+1ACh+var_16C]
		mov	[esp+1ACh+var_1A8], eax
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_load_certs
		mov	[esp+1ACh+var_16C], eax
		test	eax, eax
		jz	loc_43CC55
		mov	ecx, [esp+1ACh+var_174]
		test	ecx, ecx
		jz	loc_43CC69
		mov	[esp+1ACh+var_158], esi
		mov	esi, eax
		mov	[esp+1ACh+var_160], edi
		mov	[esp+1ACh+var_15C], ebp
		mov	ebp, ecx
		jmp	short loc_43C863
; ---------------------------------------------------------------------------
		align 10h

loc_43C840:				; CODE XREF: _pkcs12_main+FEDj
		mov	[esp+1ACh+var_1A8], ebx
		mov	[esp+1ACh+var_1AC], esi
		call	_sk_value
		mov	edi, eax
		mov	[esp+1ACh+var_1A8], ebp
		mov	[esp+1ACh+var_1AC], eax
		call	_X509_check_private_key
		test	eax, eax
		jnz	loc_43CAB9
		inc	ebx

loc_43C863:				; CODE XREF: _pkcs12_main+FBAj
		mov	[esp+1ACh+var_1AC], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_43C840
		mov	edi, [esp+1ACh+var_160]
		mov	ebp, [esp+1ACh+var_15C]

loc_43C877:				; CODE XREF: _pkcs12_main+129Bj
		mov	[esp+1ACh+var_1A8], offset aNoCertificateM ; "No certificate matches private key\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	[esp+1ACh+var_168], 0
		mov	ebx, 1
		xor	esi, esi
		jmp	loc_43C3B8
; ---------------------------------------------------------------------------

loc_43C8A0:				; CODE XREF: _pkcs12_main+97Bj
		call	_X509_STORE_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_43CC95
		mov	eax, [esp+1ACh+var_124]
		mov	[esp+1ACh+var_1A4], eax
		mov	eax, [esp+1ACh+var_120]
		mov	[esp+1ACh+var_1A8], eax
		mov	[esp+1ACh+var_1AC], ebx
		call	_X509_STORE_load_locations
		test	eax, eax
		jz	loc_43CC27

loc_43C8D5:				; CODE XREF: _pkcs12_main+13AFj
		mov	[esp+1ACh+var_1A0], 0
		mov	eax, [esp+1ACh+var_168]
		mov	[esp+1ACh+var_1A4], eax
		mov	[esp+1ACh+var_1A8], ebx
		lea	edx, [esp+1ACh+var_A4]
		mov	[esp+1ACh+var_1AC], edx
		mov	[esp+1ACh+var_160], edx
		call	_X509_STORE_CTX_init
		test	eax, eax
		mov	edx, [esp+1ACh+var_160]
		jnz	loc_43CB20

loc_43C908:				; CODE XREF: _pkcs12_main+145Bj
		mov	[esp+1ACh+var_1AC], ebx
		call	_X509_STORE_free

loc_43C910:				; CODE XREF: _pkcs12_main+1495j
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		xor	esi, esi
		jmp	loc_43C3B0
; ---------------------------------------------------------------------------

loc_43C929:				; CODE XREF: _pkcs12_main+DEBj
					; _pkcs12_main+E0Bj
		mov	[esp+1ACh+var_1A4], 0FFFFFFFFh
		mov	eax, [esp+1ACh+var_164]
		mov	[esp+1ACh+var_1A8], eax
		mov	[esp+1ACh+var_1AC], esi
		call	_PKCS12_verify_mac
		test	eax, eax
		jnz	loc_43C6A1
		mov	[esp+1ACh+var_1A8], offset aMacVerifyErr_0 ; "Mac verify error:	invalid	password?\n"

loc_43C951:				; CODE XREF: _pkcs12_main+1228j
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		jmp	loc_43C3F4
; ---------------------------------------------------------------------------

loc_43C975:				; CODE XREF: _pkcs12_main+A55j
		mov	[esp+1ACh+var_1A0], 1
		mov	[esp+1ACh+var_1A4], offset aEnterExportPas ; "Enter Export Password:"
		mov	[esp+1ACh+var_1A8], 32h
		lea	eax, [esp+1ACh+var_108]
		mov	[esp+1ACh+var_1AC], eax
		call	_EVP_read_pw_string
		test	eax, eax
		jz	loc_43C2DB
		mov	[esp+1ACh+var_1A8], offset aCanTReadPass_0 ; "Can't read Password\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	ebx, 1
		xor	esi, esi
		jmp	loc_43C3B0
; ---------------------------------------------------------------------------

loc_43C9C5:				; CODE XREF: _pkcs12_main+AD1j
		xor	ebx, ebx
		jmp	loc_43C369
; ---------------------------------------------------------------------------

loc_43C9CC:				; CODE XREF: _pkcs12_main+A61j
		mov	[esp+1ACh+var_1A4], 32h
		lea	eax, [esp+1ACh+var_108]
		mov	[esp+1ACh+var_1A8], eax
		lea	eax, [esp+1ACh+var_D6]
		mov	[esp+1ACh+var_1AC], eax
		call	_BUF_strlcpy
		jmp	loc_43C2E7
; ---------------------------------------------------------------------------

loc_43C9F3:				; CODE XREF: _pkcs12_main+8C8j
		mov	[esp+1ACh+var_1A8], offset aNothingToDo	; "Nothing to do!\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		jmp	loc_43C57D
; ---------------------------------------------------------------------------

loc_43CA0D:				; CODE XREF: _pkcs12_main+F4Bj
		mov	edi, offset aInfo ; "-info"
		mov	ecx, 6
		mov	esi, ebx
		repe cmpsb
		jnz	loc_43CBC7
		or	[esp+1ACh+var_174], 4
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CA2B:				; CODE XREF: _pkcs12_main+D8Dj
		mov	[esp+1ACh+var_1A0], 0
		mov	[esp+1ACh+var_1A4], offset aEnterImportPas ; "Enter Import Password:"
		mov	[esp+1ACh+var_1A8], 32h
		lea	eax, [esp+1ACh+var_108]
		mov	[esp+1ACh+var_1AC], eax
		call	_EVP_read_pw_string
		test	eax, eax
		jz	loc_43C613
		mov	[esp+1ACh+var_1A8], offset aCanTReadPass_0 ; "Can't read Password\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_43C3F4
; ---------------------------------------------------------------------------

loc_43CA79:				; CODE XREF: _pkcs12_main+D99j
		mov	[esp+1ACh+var_1A4], 32h
		lea	eax, [esp+1ACh+var_108]
		mov	[esp+1ACh+var_1A8], eax
		lea	eax, [esp+1ACh+var_D6]
		mov	[esp+1ACh+var_1AC], eax
		call	_BUF_strlcpy
		jmp	loc_43C61F
; ---------------------------------------------------------------------------

loc_43CAA0:				; CODE XREF: _pkcs12_main+E67j
		mov	[esp+1ACh+var_1A8], offset aErrorOutputtin ; "Error outputting keys and	certificates\"...
		jmp	loc_43C951
; ---------------------------------------------------------------------------

loc_43CAAD:				; CODE XREF: _pkcs12_main+943j
		mov	ebx, 1
		xor	esi, esi
		jmp	loc_43C3B0
; ---------------------------------------------------------------------------

loc_43CAB9:				; CODE XREF: _pkcs12_main+FDCj
		mov	eax, edi
		mov	[esp+1ACh+var_168], edi
		mov	esi, [esp+1ACh+var_158]
		mov	edi, [esp+1ACh+var_160]
		mov	ebp, [esp+1ACh+var_15C]
		mov	[esp+1ACh+var_1A4], 0
		mov	[esp+1ACh+var_1A8], 0
		mov	[esp+1ACh+var_1AC], eax
		call	_X509_keyid_set1
		mov	[esp+1ACh+var_1A4], 0
		mov	[esp+1ACh+var_1A8], 0
		mov	eax, [esp+1ACh+var_168]
		mov	[esp+1ACh+var_1AC], eax
		call	_X509_alias_set1
		mov	[esp+1ACh+var_1A8], ebx
		mov	ecx, [esp+1ACh+var_16C]
		mov	[esp+1ACh+var_1AC], ecx
		call	_sk_delete
		mov	eax, [esp+1ACh+var_168]
		test	eax, eax
		jnz	loc_43C18A
		jmp	loc_43C877
; ---------------------------------------------------------------------------

loc_43CB20:				; CODE XREF: _pkcs12_main+1082j
		mov	[esp+1ACh+var_1AC], edx
		call	_X509_verify_cert
		test	eax, eax
		mov	edx, [esp+1ACh+var_160]
		mov	[esp+1ACh+var_1AC], edx
		jle	loc_43CCC0
		call	_X509_STORE_CTX_get1_chain
		mov	esi, eax
		mov	edx, [esp+1ACh+var_160]
		mov	[esp+1ACh+var_1AC], edx
		call	_X509_STORE_CTX_cleanup
		mov	[esp+1ACh+var_1AC], ebx
		call	_X509_STORE_free
		mov	ebx, 1
		mov	[esp+1ACh+var_160], edi
		mov	edi, [esp+1ACh+var_16C]
		jmp	short loc_43CB89
; ---------------------------------------------------------------------------
		jmp	short loc_43CB70
; ---------------------------------------------------------------------------
		align 10h

loc_43CB70:				; CODE XREF: _pkcs12_main+12E1j
					; _pkcs12_main+1313j
		mov	[esp+1ACh+var_1A8], ebx
		mov	[esp+1ACh+var_1AC], esi
		call	_sk_value
		mov	[esp+1ACh+var_1A8], eax
		mov	[esp+1ACh+var_1AC], edi
		call	_sk_push
		inc	ebx

loc_43CB89:				; CODE XREF: _pkcs12_main+12DFj
		mov	[esp+1ACh+var_1AC], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_43CB70
		mov	edi, [esp+1ACh+var_160]
		mov	[esp+1ACh+var_1A8], 0
		mov	[esp+1ACh+var_1AC], esi
		call	_sk_value
		mov	[esp+1ACh+var_1AC], eax
		call	_X509_free
		mov	[esp+1ACh+var_1AC], esi
		call	_sk_free
		jmp	loc_43C201
; ---------------------------------------------------------------------------

loc_43CBBE:				; CODE XREF: _pkcs12_main+CBAj
		mov	eax, [esp+1ACh+var_16C]
		jmp	loc_43C540
; ---------------------------------------------------------------------------

loc_43CBC7:				; CODE XREF: _pkcs12_main+119Bj
		mov	edi, offset aChain_0 ; "-chain"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jz	loc_43CC76
		mov	edi, offset aTwopass ; "-twopass"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jz	loc_43CCB3
		mov	edi, offset aNomacver ;	"-nomacver"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		jz	loc_43CEE0
		mov	edi, offset aDescert ; "-descert"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jnz	loc_43CD48
		mov	[esp+1ACh+var_118], 92h
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CC27:				; CODE XREF: _pkcs12_main+104Fj
		mov	[esp+1ACh+var_1AC], ebx
		call	_X509_STORE_set_default_paths
		jmp	loc_43C8D5
; ---------------------------------------------------------------------------

loc_43CC34:				; CODE XREF: _pkcs12_main+DB2j
		mov	eax, 1
		jmp	loc_43C640
; ---------------------------------------------------------------------------

loc_43CC3E:				; CODE XREF: _pkcs12_main+AC5j
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		jmp	loc_43C3B0
; ---------------------------------------------------------------------------

loc_43CC55:				; CODE XREF: _pkcs12_main+F98j
		mov	[esp+1ACh+var_168], 0
		mov	ebx, 1
		xor	esi, esi
		jmp	loc_43C3B0
; ---------------------------------------------------------------------------

loc_43CC69:				; CODE XREF: _pkcs12_main+FA4j
		mov	[esp+1ACh+var_168], 0
		jmp	loc_43C18A
; ---------------------------------------------------------------------------

loc_43CC76:				; CODE XREF: _pkcs12_main+1355j
		mov	[esp+1ACh+var_14C], 1
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CC83:				; CODE XREF: _pkcs12_main+D81j
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_ERR_print_errors
		jmp	loc_43BE5C
; ---------------------------------------------------------------------------

loc_43CC95:				; CODE XREF: _pkcs12_main+1029j
		mov	[esp+1ACh+var_1A8], offset aMemoryAlloca_3 ; "Memory allocation	error\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	bl, 1
		xor	esi, esi
		jmp	loc_43C3B0
; ---------------------------------------------------------------------------

loc_43CCB3:				; CODE XREF: _pkcs12_main+1369j
		mov	[esp+1ACh+var_150], 1
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CCC0:				; CODE XREF: _pkcs12_main+12B1j
		mov	[esp+1ACh+var_184], edx
		call	_X509_STORE_CTX_get_error
		mov	esi, eax
		test	eax, eax
		mov	edx, [esp+1ACh+var_184]
		jnz	short loc_43CD02
		mov	[esp+1ACh+var_1AC], edx
		call	_X509_STORE_CTX_cleanup
		jmp	loc_43C908
; ---------------------------------------------------------------------------

loc_43CCE0:				; CODE XREF: _pkcs12_main+AE3j
		mov	eax, [esp+1ACh+var_138]
		mov	[esp+1ACh+var_1A4], eax
		mov	[esp+1ACh+var_1A8], offset aUnknownDigestA ; "Unknown digest algorithm %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		jmp	loc_43C369
; ---------------------------------------------------------------------------

loc_43CD02:				; CODE XREF: _pkcs12_main+1451j
		mov	[esp+1ACh+var_1AC], edx
		call	_X509_STORE_CTX_cleanup
		mov	[esp+1ACh+var_1AC], ebx
		call	_X509_STORE_free
		cmp	esi, 1
		jz	loc_43C910
		mov	[esp+1ACh+var_1AC], esi
		call	_X509_verify_cert_error_string
		mov	[esp+1ACh+var_1A4], eax
		mov	[esp+1ACh+var_1A8], offset aErrorSGettingC ; "Error %s getting chain.\n"
		mov	eax, ds:_bio_err
		mov	[esp+1ACh+var_1AC], eax
		call	_BIO_printf
		mov	ebx, 1
		xor	esi, esi
		jmp	loc_43C3B0
; ---------------------------------------------------------------------------

loc_43CD48:				; CODE XREF: _pkcs12_main+1391j
		mov	edi, offset aExport ; "-export"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jz	loc_43CEF0
		mov	[esp+1ACh+var_1A8], offset aDes_3 ; "-des"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43CEFD
		mov	[esp+1ACh+var_1A8], offset aDes3_1 ; "-des3"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43CF1B
		mov	[esp+1ACh+var_1A8], offset aIdea_3 ; "-idea"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43CF0C
		mov	[esp+1ACh+var_1A8], offset aSeed_5 ; "-seed"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43CF57
		mov	[esp+1ACh+var_1A8], offset aAes128_1 ; "-aes128"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43CF48
		mov	[esp+1ACh+var_1A8], offset aAes192_1 ; "-aes192"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43CF39
		mov	[esp+1ACh+var_1A8], offset aAes256_1 ; "-aes256"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43CF2A
		mov	[esp+1ACh+var_1A8], offset aCamellia128_1 ; "-camellia128"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43D0BE
		mov	[esp+1ACh+var_1A8], offset aCamellia192_1 ; "-camellia192"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43D0AF
		mov	[esp+1ACh+var_1A8], offset aCamellia256_1 ; "-camellia256"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43D0CD
		mov	[esp+1ACh+var_1A8], offset aNoiter ; "-noiter"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43D0A2
		mov	[esp+1ACh+var_1A8], offset aMaciter ; "-maciter"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43CFFA
		mov	[esp+1ACh+var_1A8], offset aNomaciter ;	"-nomaciter"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43CFED
		mov	[esp+1ACh+var_1A8], offset aNomac ; "-nomac"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43CF89
		mov	[esp+1ACh+var_1A8], offset aMacalg ; "-macalg"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_43CF66
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_138], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------
		align 10h

loc_43CEE0:				; CODE XREF: _pkcs12_main+137Dj
		mov	[esp+1ACh+var_128], 0
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CEF0:				; CODE XREF: _pkcs12_main+14D6j
		mov	[esp+1ACh+var_180], 1
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CEFD:				; CODE XREF: _pkcs12_main+14EEj
		call	_EVP_des_cbc
		mov	ds:_enc, eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CF0C:				; CODE XREF: _pkcs12_main+151Ej
		call	_EVP_idea_cbc
		mov	ds:_enc, eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CF1B:				; CODE XREF: _pkcs12_main+1506j
		call	_EVP_des_ede3_cbc
		mov	ds:_enc, eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CF2A:				; CODE XREF: _pkcs12_main+157Ej
		call	_EVP_aes_256_cbc
		mov	ds:_enc, eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CF39:				; CODE XREF: _pkcs12_main+1566j
		call	_EVP_aes_192_cbc
		mov	ds:_enc, eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CF48:				; CODE XREF: _pkcs12_main+154Ej
		call	_EVP_aes_128_cbc
		mov	ds:_enc, eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CF57:				; CODE XREF: _pkcs12_main+1536j
		call	_EVP_seed_cbc
		mov	ds:_enc, eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CF66:				; CODE XREF: _pkcs12_main+163Ej
		mov	[esp+1ACh+var_1A8], offset aNodes_0 ; "-nodes"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43CF96
		mov	ds:_enc, 0
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CF89:				; CODE XREF: _pkcs12_main+1626j
		mov	[esp+1ACh+var_140], 0FFFFFFFFh
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CF96:				; CODE XREF: _pkcs12_main+16F8j
		mov	[esp+1ACh+var_1A8], offset aCertpbe ; "-certpbe"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_43D056
		mov	[esp+1ACh+var_1A8], offset aKeypbe ; "-keypbe"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	short loc_43D035
		mov	[esp+1ACh+var_1A8], offset aRand_9 ; "-rand"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D007
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_178], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CFED:				; CODE XREF: _pkcs12_main+160Ej
		mov	[esp+1ACh+var_140], 1
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43CFFA:				; CODE XREF: _pkcs12_main+15F6j
		mov	[esp+1ACh+var_140], 800h
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D007:				; CODE XREF: _pkcs12_main+1754j
		mov	[esp+1ACh+var_1A8], offset aInkey_0 ; "-inkey"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D077
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_12C], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D035:				; CODE XREF: _pkcs12_main+1740j
		lea	ebx, [ebp+4]
		mov	edx, [ebp+4]
		lea	eax, [esp+1ACh+var_114]
		call	_set_pbe_isra_0
		mov	ebp, ebx
		test	eax, eax
		jz	loc_43B9E0
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D056:				; CODE XREF: _pkcs12_main+1728j
		lea	ebx, [ebp+4]
		mov	edx, [ebp+4]
		lea	eax, [esp+1ACh+var_118]
		call	_set_pbe_isra_0
		mov	ebp, ebx
		test	eax, eax
		jz	loc_43B9E0
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D077:				; CODE XREF: _pkcs12_main+1799j
		mov	[esp+1ACh+var_1A8], offset aCertfile_0 ; "-certfile"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D0DC
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_144], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D0A2:				; CODE XREF: _pkcs12_main+15DEj
		mov	[esp+1ACh+var_130], 1
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D0AF:				; CODE XREF: _pkcs12_main+15AEj
		call	_EVP_camellia_192_cbc
		mov	ds:_enc, eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D0BE:				; CODE XREF: _pkcs12_main+1596j
		call	_EVP_camellia_128_cbc
		mov	ds:_enc, eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D0CD:				; CODE XREF: _pkcs12_main+15C6j
		call	_EVP_camellia_256_cbc
		mov	ds:_enc, eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D0DC:				; CODE XREF: _pkcs12_main+1809j
		mov	[esp+1ACh+var_1A8], offset aName_1 ; "-name"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D107
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_134], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D107:				; CODE XREF: _pkcs12_main+186Ej
		mov	[esp+1ACh+var_1A8], offset aLmk	; "-LMK"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	short loc_43D146
		mov	[esp+1ACh+var_1A8], offset aCsp	; "-CSP"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D153
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_13C], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D146:				; CODE XREF: _pkcs12_main+1899j
		mov	[esp+1ACh+var_148], 1
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D153:				; CODE XREF: _pkcs12_main+18ADj
		mov	[esp+1ACh+var_1A8], offset aCaname ; "-caname"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D19E
		cmp	dword ptr [ebp+4], 0
		jz	loc_43B9E0
		lea	ebx, [ebp+4]
		cmp	[esp+1ACh+var_17C], 0
		jnz	short loc_43D184
		call	_sk_new_null
		mov	[esp+1ACh+var_17C], eax

loc_43D184:				; CODE XREF: _pkcs12_main+18F9j
		mov	eax, [ebp+4]
		mov	[esp+1ACh+var_1A8], eax
		mov	eax, [esp+1ACh+var_17C]
		mov	[esp+1ACh+var_1AC], eax
		call	_sk_push
		mov	ebp, ebx
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D19E:				; CODE XREF: _pkcs12_main+18E5j
		mov	[esp+1ACh+var_1A8], offset aIn_17 ; "-in"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D1C9
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_16C], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D1C9:				; CODE XREF: _pkcs12_main+1930j
		mov	[esp+1ACh+var_1A8], offset aOut_22 ; "-out"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D1F4
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_168], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D1F4:				; CODE XREF: _pkcs12_main+195Bj
		mov	[esp+1ACh+var_1A8], offset aPassin_7 ; "-passin"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D21F
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_160], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D21F:				; CODE XREF: _pkcs12_main+1986j
		mov	[esp+1ACh+var_1A8], offset aPassout_5 ;	"-passout"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D24A
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_15C], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D24A:				; CODE XREF: _pkcs12_main+19B1j
		mov	[esp+1ACh+var_1A8], offset aPassword_0 ; "-password"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D27D
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_164], eax
		mov	[esp+1ACh+var_154], 1
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D27D:				; CODE XREF: _pkcs12_main+19DCj
		mov	[esp+1ACh+var_1A8], offset aCapath_4 ; "-CApath"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D2AB
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_124], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D2AB:				; CODE XREF: _pkcs12_main+1A0Fj
		mov	[esp+1ACh+var_1A8], offset aCafile_4 ; "-CAfile"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_43D2D9
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_120], eax
		jmp	loc_43B9E8
; ---------------------------------------------------------------------------

loc_43D2D9:				; CODE XREF: _pkcs12_main+1A3Dj
		mov	[esp+1ACh+var_1A8], offset aEngine_21 ;	"-engine"
		mov	[esp+1ACh+var_1AC], ebx	; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_43B9E0
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43B9E0
		add	ebp, 4
		mov	[esp+1ACh+var_158], eax
		jmp	loc_43B9E8
_pkcs12_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _hex_prin
_hex_prin	proc near

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [esp+1Ch+arg_0]
		mov	edi, [esp+1Ch+arg_8]
		test	edi, edi
		jle	short loc_43D34D
		mov	ebx, [esp+1Ch+arg_4]
		add	edi, ebx
		nop
		lea	esi, [esi+0]

loc_43D330:				; CODE XREF: _hex_prin+3Bj
		xor	eax, eax
		mov	al, [ebx]
		mov	[esp+1Ch+var_14], eax
		mov	[esp+1Ch+var_18], offset a02x_5	; "%02X	"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_printf
		inc	ebx
		cmp	ebx, edi
		jnz	short loc_43D330

loc_43D34D:				; CODE XREF: _hex_prin+10j
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
_hex_prin	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _pkcs8_main
_pkcs8_main	proc near		; DATA XREF: .data:004551C0o

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_4E		= byte ptr -4Eh
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	[esp+0BCh+var_58], 0
		mov	[esp+0BCh+var_54], 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_43DA00

loc_43D387:				; CODE XREF: _pkcs8_main+6BDj
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], eax
		call	_load_config
		test	eax, eax
		jnz	short loc_43D410

loc_43D39B:				; CODE XREF: _pkcs8_main+675j
					; _pkcs8_main+755j
		mov	ebx, 1
		mov	[esp+0BCh+var_8C], 0
		xor	edi, edi
		xor	edx, edx
		xor	esi, esi
		xor	ebp, ebp

loc_43D3B0:				; CODE XREF: _pkcs8_main+4AFj
					; _pkcs8_main+73Bj ...
		mov	[esp+0BCh+var_BC], edx
		call	_X509_SIG_free
		mov	[esp+0BCh+var_BC], edi
		call	_PKCS8_PRIV_KEY_INFO_free
		mov	eax, [esp+0BCh+var_8C]
		mov	[esp+0BCh+var_BC], eax
		call	_EVP_PKEY_free
		mov	[esp+0BCh+var_BC], esi
		call	_BIO_free_all
		mov	[esp+0BCh+var_BC], ebp
		call	_BIO_free
		mov	eax, [esp+0BCh+var_58]
		test	eax, eax
		jz	short loc_43D3EC
		mov	[esp+0BCh+var_BC], eax
		call	_CRYPTO_free

loc_43D3EC:				; CODE XREF: _pkcs8_main+82j
		mov	eax, [esp+0BCh+var_54]
		test	eax, eax
		jz	short loc_43D3FC
		mov	[esp+0BCh+var_BC], eax
		call	_CRYPTO_free

loc_43D3FC:				; CODE XREF: _pkcs8_main+92j
		mov	eax, ebx
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43D410:				; CODE XREF: _pkcs8_main+39j
		call	_ERR_load_crypto_strings
		call	_OPENSSL_add_all_algorithms_noconf
		mov	eax, [esp+0BCh+arg_4]
		lea	ebp, [eax+4]
		mov	ebx, [eax+4]
		test	ebx, ebx
		jz	loc_43D6A1
		cmp	byte ptr [ebx],	2Dh
		mov	[esp+0BCh+var_74], 0
		mov	[esp+0BCh+var_6C], 0
		mov	[esp+0BCh+var_60], 0
		mov	[esp+0BCh+var_84], 3
		mov	[esp+0BCh+var_8C], 3
		mov	[esp+0BCh+var_68], 800h
		mov	[esp+0BCh+var_90], 0
		mov	[esp+0BCh+var_88], 0FFFFFFFFh
		mov	[esp+0BCh+var_78], 0
		mov	[esp+0BCh+var_7C], 0
		mov	[esp+0BCh+var_80], 0
		mov	[esp+0BCh+var_64], 0
		mov	[esp+0BCh+var_70], 0
		jz	short loc_43D4F5
		jmp	loc_43D710
; ---------------------------------------------------------------------------
		jmp	short loc_43D4B0
; ---------------------------------------------------------------------------
		align 10h

loc_43D4B0:				; CODE XREF: _pkcs8_main+141j
					; _pkcs8_main+1A3j
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43D540
		lea	ebx, [ebp+4]
		mov	[esp+0BCh+var_BC], eax
		call	_EVP_get_cipherbyname
		mov	ecx, eax
		mov	[esp+0BCh+var_90], eax
		xor	eax, eax
		test	ecx, ecx
		jz	loc_43D820

loc_43D4D6:				; CODE XREF: _pkcs8_main+1D5j
					; _pkcs8_main+1E7j ...
		lea	ebp, [ebx+4]
		test	eax, eax
		jnz	loc_43D870
		mov	ebx, [ebx+4]
		test	ebx, ebx
		jz	loc_43D710
		cmp	byte ptr [ebx],	2Dh
		jnz	loc_43D710

loc_43D4F5:				; CODE XREF: _pkcs8_main+13Aj
		mov	esi, ebx
		mov	edi, offset aV2	; "-v2"
		mov	ecx, 4
		repe cmpsb
		jz	short loc_43D4B0
		mov	edi, offset aV1	; "-v1"
		mov	esi, ebx
		mov	ecx, 4
		repe cmpsb
		jnz	short loc_43D550
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_43D540
		lea	ebx, [ebp+4]
		mov	[esp+0BCh+var_BC], eax
		call	_OBJ_txt2nid
		mov	[esp+0BCh+var_88], eax
		test	eax, eax
		jz	loc_43D660
		xor	eax, eax
		jmp	short loc_43D4D6
; ---------------------------------------------------------------------------
		align 10h

loc_43D540:				; CODE XREF: _pkcs8_main+155j
					; _pkcs8_main+1BAj ...
		mov	ebx, ebp
		mov	eax, 1
		jmp	short loc_43D4D6
; ---------------------------------------------------------------------------
		align 10h

loc_43D550:				; CODE XREF: _pkcs8_main+1B3j
		mov	edi, offset aInform_13 ; "-inform"
		mov	esi, ebx
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_43D580
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_43D540
		lea	ebx, [ebp+4]
		mov	[esp+0BCh+var_BC], eax ; char *
		call	_str2fmt
		mov	[esp+0BCh+var_8C], eax
		xor	eax, eax
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------
		align 10h

loc_43D580:				; CODE XREF: _pkcs8_main+1FEj
		mov	edi, offset aOutform_13	; "-outform"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_43D5B0
		mov	eax, [ebp+4]
		test	eax, eax
		jz	short loc_43D540
		lea	ebx, [ebp+4]
		mov	[esp+0BCh+var_BC], eax ; char *
		call	_str2fmt
		mov	[esp+0BCh+var_84], eax
		xor	eax, eax
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------
		align 10h

loc_43D5B0:				; CODE XREF: _pkcs8_main+22Ej
		mov	edi, offset aTopk8 ; "-topk8"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jz	loc_43D690
		mov	edi, offset aNoiter_0 ;	"-noiter"
		mov	esi, ebx
		mov	ecx, 8
		repe cmpsb
		jz	loc_43D9E0
		mov	edi, offset aNocrypt ; "-nocrypt"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jz	loc_43DA22
		mov	edi, offset aNooct ; "-nooct"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jz	loc_43DB87
		mov	edi, offset aNsdb ; "-nsdb"
		mov	ecx, 6
		mov	esi, ebx
		repe cmpsb
		jz	loc_43DC36
		mov	edi, offset aEmbed ; "-embed"
		mov	ecx, 7
		mov	esi, ebx
		repe cmpsb
		jz	loc_43DD37
		mov	edi, offset aPassin_8 ;	"-passin"
		mov	esi, ebx
		mov	ecx, 8
		repe cmpsb
		jnz	loc_43D846
		mov	eax, [ebp+4]
		mov	[esp+0BCh+var_80], eax
		test	eax, eax
		jz	loc_43D870

loc_43D64B:				; CODE XREF: _pkcs8_main+503j
					; _pkcs8_main+B84j
		lea	ebx, [ebp+4]
		xor	eax, eax
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------
		align 10h

loc_43D660:				; CODE XREF: _pkcs8_main+1CDj
		mov	eax, [ebp+4]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], offset aUnknownPbeAl_0 ; "Unknown PBE algorithm %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	eax, 1
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------
		align 10h

loc_43D690:				; CODE XREF: _pkcs8_main+25Ej
		mov	ebx, ebp
		xor	eax, eax
		mov	[esp+0BCh+var_78], 1
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------

loc_43D6A1:				; CODE XREF: _pkcs8_main+C9j
		mov	[esp+0BCh+var_74], 0
		mov	[esp+0BCh+var_6C], 0
		mov	[esp+0BCh+var_60], 0
		mov	[esp+0BCh+var_84], 3
		mov	[esp+0BCh+var_8C], 3
		mov	[esp+0BCh+var_68], 800h
		mov	[esp+0BCh+var_90], 0
		mov	[esp+0BCh+var_88], 0FFFFFFFFh
		mov	[esp+0BCh+var_78], 0
		mov	[esp+0BCh+var_7C], 0
		mov	[esp+0BCh+var_80], 0
		mov	[esp+0BCh+var_64], 0
		mov	[esp+0BCh+var_70], 0
		lea	esi, [esi+0]

loc_43D710:				; CODE XREF: _pkcs8_main+13Cj
					; _pkcs8_main+186j ...
		mov	[esp+0BCh+var_B4], 0
		mov	eax, [esp+0BCh+var_74]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_setup_engine
		mov	ebx, eax
		lea	eax, [esp+0BCh+var_54]
		mov	[esp+0BCh+var_AC], eax ; int
		lea	eax, [esp+0BCh+var_58]
		mov	[esp+0BCh+var_B0], eax ; int
		mov	eax, [esp+0BCh+var_7C]
		mov	[esp+0BCh+var_B4], eax ; char *
		mov	eax, [esp+0BCh+var_80]
		mov	[esp+0BCh+var_B8], eax ; char *
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax ; int
		call	_app_passwd
		test	eax, eax
		jz	loc_43DAA0
		cmp	[esp+0BCh+var_88], 0FFFFFFFFh
		jz	loc_43DA33

loc_43D76F:				; CODE XREF: _pkcs8_main+6D9j
					; _pkcs8_main+6E7j
		mov	eax, [esp+0BCh+var_70]
		test	eax, eax
		jz	loc_43DC47
		mov	[esp+0BCh+var_B8], offset aRb_4	; "rb"
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	ebp, eax
		test	eax, eax
		jz	loc_43DA6B

loc_43D795:				; CODE XREF: _pkcs8_main+8FEj
		mov	eax, [esp+0BCh+var_64]
		test	eax, eax
		jz	loc_43DA4C
		mov	[esp+0BCh+var_B8], offset aWb_5	; "wb"
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	esi, eax
		test	eax, eax
		jz	loc_43DD48

loc_43D7BB:				; CODE XREF: _pkcs8_main+706j
		mov	edi, [esp+0BCh+var_78]
		test	edi, edi
		jnz	loc_43DB98
		mov	edx, [esp+0BCh+var_6C]
		test	edx, edx
		jz	loc_43DABA
		cmp	[esp+0BCh+var_8C], 3
		jz	loc_43DDF8
		cmp	[esp+0BCh+var_8C], 1
		jz	loc_43DD1E

loc_43D7E9:				; CODE XREF: _pkcs8_main+76Aj
		mov	[esp+0BCh+var_B8], offset aBadFormatSpe_0 ; "Bad format	specified for key\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	ebx, 1
		mov	[esp+0BCh+var_8C], 0
		xor	edi, edi
		xor	edx, edx
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------
		align 10h

loc_43D820:				; CODE XREF: _pkcs8_main+170j
		mov	eax, [ebp+4]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], offset aUnknownCiphe_0 ; "Unknown cipher %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	eax, 1
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------

loc_43D846:				; CODE XREF: _pkcs8_main+2D6j
		mov	edi, offset aPassout_6 ; "-passout"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jnz	loc_43DEC7
		mov	eax, [ebp+4]
		mov	[esp+0BCh+var_7C], eax
		test	eax, eax
		jnz	loc_43D64B
		lea	esi, [esi+0]

loc_43D870:				; CODE XREF: _pkcs8_main+17Bj
					; _pkcs8_main+2E5j ...
		mov	[esp+0BCh+var_B8], offset aUsagePkcs8Opti ; "Usage pkcs8 [options]\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aWhereOption_13 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aInFileInputF_2 ; "-in file	     input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aInformXInputFo ; "-inform X	     input format (DER or PE"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aPassinArgInp_2 ; "-passin arg     input file	pass phrase "...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aOutformXOutp_0 ; "-outform X	     output format (DER	or P"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aOutFileOutpu_5 ; "-out file	     output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aPassoutArgOu_3 ; "-passout arg    output file pass phrase"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aTopk8OutputPkc ; "-topk8	     output PKCS8 file\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aNooctUseNonsta ; "-nooct	     use (nonstandard) no oc"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aEmbedUseNonsta ; "-embed	     use (nonstandard) embed"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aNsdbUseNonstan ; "-nsdb	     use (nonstandard) DSA N"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aNoiterUse1AsIt ; "-noiter	     use 1 as iteration	coun"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aNocryptUseOrEx ; "-nocrypt	     use or expect unencrypt"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aV2AlgUsePkcs5V ; "-v2 alg	     use PKCS#5	v2.0 and cip"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aV1ObjUsePkcs5V ; "-v1 obj	     use PKCS#5	v1.5 and cip"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aEngineEUseE_17 ; " -engine e	      use engine e, possibly"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		jmp	loc_43D39B
; ---------------------------------------------------------------------------
		align 10h

loc_43D9E0:				; CODE XREF: _pkcs8_main+272j
		mov	ebx, ebp
		xor	eax, eax
		mov	[esp+0BCh+var_68], 1
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------
		jmp	short loc_43DA00
; ---------------------------------------------------------------------------
		align 10h

loc_43DA00:				; CODE XREF: _pkcs8_main+21j
					; _pkcs8_main+691j
		mov	[esp+0BCh+var_B8], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_43D387
; ---------------------------------------------------------------------------

loc_43DA22:				; CODE XREF: _pkcs8_main+286j
		mov	ebx, ebp
		xor	eax, eax
		mov	[esp+0BCh+var_6C], 1
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------

loc_43DA33:				; CODE XREF: _pkcs8_main+409j
		mov	ebp, [esp+0BCh+var_90]
		test	ebp, ebp
		jnz	loc_43D76F
		mov	[esp+0BCh+var_88], 0Ah
		jmp	loc_43D76F
; ---------------------------------------------------------------------------

loc_43DA4C:				; CODE XREF: _pkcs8_main+43Bj
		mov	[esp+0BCh+var_B8], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_fp
		mov	esi, eax
		jmp	loc_43D7BB
; ---------------------------------------------------------------------------

loc_43DA6B:				; CODE XREF: _pkcs8_main+42Fj
		mov	eax, [esp+0BCh+var_70]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], offset aCanTOpenInpu_0 ; "Can't open input file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	ebx, 1
		mov	[esp+0BCh+var_8C], 0
		xor	edi, edi
		xor	edx, edx
		xor	esi, esi
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DAA0:				; CODE XREF: _pkcs8_main+3FEj
		mov	[esp+0BCh+var_B8], offset aErrorGettin_16 ; "Error getting passwords\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		jmp	loc_43D39B
; ---------------------------------------------------------------------------

loc_43DABA:				; CODE XREF: _pkcs8_main+46Dj
		cmp	[esp+0BCh+var_8C], 3
		jz	loc_43DE21
		cmp	[esp+0BCh+var_8C], 1
		jnz	loc_43D7E9
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], ebp
		call	_d2i_PKCS8_bio
		mov	edx, eax

loc_43DAE2:				; CODE XREF: _pkcs8_main+AE3j
		test	edx, edx
		jz	loc_43E0E0
		mov	ebx, [esp+0BCh+var_58]
		test	ebx, ebx
		jz	loc_43E06C

loc_43DAF6:				; CODE XREF: _pkcs8_main+D38j
		mov	[esp+0BCh+var_90], edx
		mov	[esp+0BCh+var_BC], ebx ; char *
		call	_strlen
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], ebx
		mov	edx, [esp+0BCh+var_90]
		mov	[esp+0BCh+var_BC], edx
		call	_PKCS8_decrypt
		mov	edi, eax
		mov	edx, [esp+0BCh+var_90]

loc_43DB1C:				; CODE XREF: _pkcs8_main+9D2j
					; _pkcs8_main+ABCj
		mov	[esp+0BCh+var_90], edx
		test	edi, edi
		jz	loc_43DE48
		mov	[esp+0BCh+var_BC], edi
		call	_EVP_PKCS82PKEY
		mov	[esp+0BCh+var_8C], eax
		test	eax, eax
		mov	edx, [esp+0BCh+var_90]
		jz	loc_43DF2E
		mov	eax, [edi]
		test	eax, eax
		jnz	loc_43DD7B

loc_43DB4A:				; CODE XREF: _pkcs8_main+A78j
					; _pkcs8_main+BB4j ...
		cmp	[esp+0BCh+var_84], 3
		jz	loc_43DE80
		cmp	[esp+0BCh+var_84], 1
		mov	[esp+0BCh+var_90], edx
		jz	loc_43DDDD

loc_43DB64:				; CODE XREF: _pkcs8_main+9ABj
		mov	[esp+0BCh+var_B8], offset aBadFormatSpe_0 ; "Bad format	specified for key\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	ebx, 1
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DB87:				; CODE XREF: _pkcs8_main+29Aj
		mov	ebx, ebp
		xor	eax, eax
		mov	[esp+0BCh+var_60], 1
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------

loc_43DB98:				; CODE XREF: _pkcs8_main+461j
		mov	[esp+0BCh+var_A4], offset aKey_7 ; "key"
		mov	[esp+0BCh+var_A8], ebx
		mov	eax, [esp+0BCh+var_58]
		mov	[esp+0BCh+var_AC], eax
		mov	[esp+0BCh+var_B0], 1
		mov	eax, [esp+0BCh+var_8C]
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [esp+0BCh+var_70]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_load_key
		mov	[esp+0BCh+var_8C], eax
		test	eax, eax
		jz	loc_43DD10
		mov	edi, [esp+0BCh+var_60]
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], eax
		call	_EVP_PKEY2PKCS8_broken
		mov	edi, eax
		test	eax, eax
		jz	loc_43E0B2
		mov	ecx, [esp+0BCh+var_6C]
		test	ecx, ecx
		jz	short loc_43DC63
		cmp	[esp+0BCh+var_84], 3
		jz	loc_43E09D
		cmp	[esp+0BCh+var_84], 1
		jz	loc_43DF19
		mov	[esp+0BCh+var_B8], offset aBadFormatSpe_0 ; "Bad format	specified for key\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	ebx, 1
		xor	edx, edx
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DC36:				; CODE XREF: _pkcs8_main+2AEj
		mov	ebx, ebp
		xor	eax, eax
		mov	[esp+0BCh+var_60], 3
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------

loc_43DC47:				; CODE XREF: _pkcs8_main+415j
		mov	[esp+0BCh+var_B8], 0
		mov	eax, ds:__imp___iob
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_fp
		mov	ebp, eax
		jmp	loc_43D795
; ---------------------------------------------------------------------------

loc_43DC63:				; CODE XREF: _pkcs8_main+89Dj
		mov	ebx, [esp+0BCh+var_54]
		test	ebx, ebx
		jz	loc_43DF79

loc_43DC6F:				; CODE XREF: _pkcs8_main+C3Fj
		mov	[esp+0BCh+var_B4], 0
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], 0
		call	_app_RAND_load_file
		mov	[esp+0BCh+var_BC], ebx ; char *
		call	_strlen
		mov	[esp+0BCh+var_A0], edi
		mov	edx, [esp+0BCh+var_68]
		mov	[esp+0BCh+var_A4], edx
		mov	[esp+0BCh+var_A8], 0
		mov	[esp+0BCh+var_AC], 0
		mov	[esp+0BCh+var_B0], eax
		mov	[esp+0BCh+var_B4], ebx
		mov	eax, [esp+0BCh+var_90]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [esp+0BCh+var_88]
		mov	[esp+0BCh+var_BC], eax
		call	_PKCS8_encrypt
		mov	[esp+0BCh+var_90], eax
		test	eax, eax
		jz	loc_43DFC8
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], 0
		call	_app_RAND_write_file
		cmp	[esp+0BCh+var_84], 3
		mov	edx, [esp+0BCh+var_90]
		jz	loc_43DFB1
		cmp	[esp+0BCh+var_84], 1
		jz	loc_43DF5E
		mov	[esp+0BCh+var_90], edx
		jmp	loc_43DB64
; ---------------------------------------------------------------------------

loc_43DD10:				; CODE XREF: _pkcs8_main+877j
		mov	ebx, 1
		xor	edi, edi
		xor	edx, edx
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DD1E:				; CODE XREF: _pkcs8_main+483j
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], ebp
		call	_d2i_PKCS8_PRIV_KEY_INFO_bio
		mov	edi, eax
		xor	edx, edx
		jmp	loc_43DB1C
; ---------------------------------------------------------------------------

loc_43DD37:				; CODE XREF: _pkcs8_main+2C2j
		mov	ebx, ebp
		xor	eax, eax
		mov	[esp+0BCh+var_60], 2
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------

loc_43DD48:				; CODE XREF: _pkcs8_main+455j
		mov	eax, [esp+0BCh+var_64]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], offset aCanTOpenOutp_1 ; "Can't open output file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	ebx, 1
		mov	[esp+0BCh+var_8C], 0
		xor	edi, edi
		xor	edx, edx
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DD7B:				; CODE XREF: _pkcs8_main+7E4j
		mov	[esp+0BCh+var_90], edx
		mov	[esp+0BCh+var_B8], offset aWarningBrokenK ; "Warning: broken key encoding: "
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	eax, [edi]
		cmp	eax, 2
		mov	edx, [esp+0BCh+var_90]
		jz	loc_43E019
		jle	loc_43DEF0
		cmp	eax, 3
		jz	loc_43DFF7
		cmp	eax, 4
		jnz	loc_43DFD5
		mov	[esp+0BCh+var_90], edx
		mov	[esp+0BCh+var_B8], offset aDsaPrivateKeyV ; "DSA private key value is negative\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43DB4A
; ---------------------------------------------------------------------------

loc_43DDDD:				; CODE XREF: _pkcs8_main+7FEj
		mov	eax, [esp+0BCh+var_8C]
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], esi
		call	_i2d_PrivateKey_bio
		xor	ebx, ebx
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DDF8:				; CODE XREF: _pkcs8_main+478j
		mov	[esp+0BCh+var_B0], 0
		mov	[esp+0BCh+var_B4], 0
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], ebp
		call	_PEM_read_bio_PKCS8_PRIV_KEY_INFO
		mov	edi, eax
		xor	edx, edx
		jmp	loc_43DB1C
; ---------------------------------------------------------------------------

loc_43DE21:				; CODE XREF: _pkcs8_main+75Fj
		mov	[esp+0BCh+var_B0], 0
		mov	[esp+0BCh+var_B4], 0
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], ebp
		call	_PEM_read_bio_PKCS8
		mov	edx, eax
		jmp	loc_43DAE2
; ---------------------------------------------------------------------------

loc_43DE48:				; CODE XREF: _pkcs8_main+7C2j
		mov	[esp+0BCh+var_B8], offset aErrorDecryptin ; "Error decrypting key\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		mov	[esp+0BCh+var_8C], 0
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DE80:				; CODE XREF: _pkcs8_main+7EFj
		mov	[esp+0BCh+var_90], edx
		mov	eax, [esp+0BCh+var_54]
		mov	[esp+0BCh+var_A4], eax
		mov	[esp+0BCh+var_A8], 0
		mov	[esp+0BCh+var_AC], 0
		mov	[esp+0BCh+var_B0], 0
		mov	[esp+0BCh+var_B4], 0
		mov	eax, [esp+0BCh+var_8C]
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], esi
		call	_PEM_write_bio_PrivateKey
		xor	ebx, ebx
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DEC7:				; CODE XREF: _pkcs8_main+4F4j
		mov	edi, offset aEngine_22 ; "-engine"
		mov	esi, ebx
		mov	ecx, 8
		repe cmpsb
		jnz	loc_43E03B
		mov	eax, [ebp+4]
		mov	[esp+0BCh+var_74], eax
		test	eax, eax
		jnz	loc_43D64B
		jmp	loc_43D870
; ---------------------------------------------------------------------------
		align 10h

loc_43DEF0:				; CODE XREF: _pkcs8_main+A43j
		dec	eax
		jnz	loc_43DFD5
		mov	[esp+0BCh+var_90], edx
		mov	[esp+0BCh+var_B8], offset aNoOctetStringI ; "No	Octet String in	PrivateKey\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43DB4A
; ---------------------------------------------------------------------------

loc_43DF19:				; CODE XREF: _pkcs8_main+8AFj
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], esi
		call	_i2d_PKCS8_PRIV_KEY_INFO_bio
		xor	ebx, ebx
		xor	edx, edx
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DF2E:				; CODE XREF: _pkcs8_main+7DAj
		mov	[esp+0BCh+var_B8], offset aErrorConvert_1 ; "Error converting key\n"

loc_43DF36:				; CODE XREF: _pkcs8_main+C70j
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DF5E:				; CODE XREF: _pkcs8_main+9A1j
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_90], edx
		mov	[esp+0BCh+var_BC], esi
		call	_i2d_PKCS8_bio
		xor	ebx, ebx
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DF79:				; CODE XREF: _pkcs8_main+909j
		mov	[esp+0BCh+var_B0], 1
		mov	[esp+0BCh+var_B4], offset aEnterEncryptio ; "Enter Encryption Password:"
		mov	[esp+0BCh+var_B8], 32h
		lea	ebx, [esp+0BCh+var_4E]
		mov	[esp+0BCh+var_BC], ebx
		call	_EVP_read_pw_string
		test	eax, eax
		jz	loc_43DC6F
		mov	ebx, 1
		xor	edx, edx
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DFB1:				; CODE XREF: _pkcs8_main+996j
		mov	[esp+0BCh+var_B8], edx
		mov	[esp+0BCh+var_BC], esi
		call	_PEM_write_bio_PKCS8
		xor	ebx, ebx
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43DFC8:				; CODE XREF: _pkcs8_main+972j
		mov	[esp+0BCh+var_B8], offset aErrorEncryptin ; "Error encrypting key\n"
		jmp	loc_43DF36
; ---------------------------------------------------------------------------

loc_43DFD5:				; CODE XREF: _pkcs8_main+A55j
					; _pkcs8_main+B91j
		mov	[esp+0BCh+var_90], edx
		mov	[esp+0BCh+var_B8], offset aUnknownBrokenT ; "Unknown broken type\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43DB4A
; ---------------------------------------------------------------------------

loc_43DFF7:				; CODE XREF: _pkcs8_main+A4Cj
		mov	[esp+0BCh+var_90], edx
		mov	[esp+0BCh+var_B8], offset aDsaPublicKeyIn ; "DSA public	key include in PrivateKey\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43DB4A
; ---------------------------------------------------------------------------

loc_43E019:				; CODE XREF: _pkcs8_main+A3Dj
		mov	[esp+0BCh+var_90], edx
		mov	[esp+0BCh+var_B8], offset aDsaParametersI ; "DSA parameters included in	PrivateKey\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43DB4A
; ---------------------------------------------------------------------------

loc_43E03B:				; CODE XREF: _pkcs8_main+B75j
		mov	[esp+0BCh+var_B8], offset aIn_18 ; "-in"
		mov	[esp+0BCh+var_BC], ebx ; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_43E11E
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43D540
		lea	ebx, [ebp+4]
		mov	[esp+0BCh+var_70], eax
		xor	eax, eax
		jmp	loc_43D4D6
; ---------------------------------------------------------------------------

loc_43E06C:				; CODE XREF: _pkcs8_main+790j
		mov	[esp+0BCh+var_90], edx
		mov	[esp+0BCh+var_B0], 0
		mov	[esp+0BCh+var_B4], offset aEnterPassword ; "Enter Password:"
		mov	[esp+0BCh+var_B8], 32h
		lea	ebx, [esp+0BCh+var_4E]
		mov	[esp+0BCh+var_BC], ebx
		call	_EVP_read_pw_string
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43DAF6
; ---------------------------------------------------------------------------

loc_43E09D:				; CODE XREF: _pkcs8_main+8A4j
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], esi
		call	_PEM_write_bio_PKCS8_PRIV_KEY_INFO
		xor	ebx, ebx
		xor	edx, edx
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43E0B2:				; CODE XREF: _pkcs8_main+891j
		mov	[esp+0BCh+var_B8], offset aErrorConvert_1 ; "Error converting key\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		xor	edx, edx
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43E0E0:				; CODE XREF: _pkcs8_main+784j
		mov	[esp+0BCh+var_90], edx
		mov	[esp+0BCh+var_B8], offset aErrorReadingKe ; "Error reading key\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_ERR_print_errors
		mov	ebx, 1
		mov	[esp+0BCh+var_8C], 0
		xor	edi, edi
		mov	edx, [esp+0BCh+var_90]
		jmp	loc_43D3B0
; ---------------------------------------------------------------------------

loc_43E11E:				; CODE XREF: _pkcs8_main+CEDj
		mov	[esp+0BCh+var_B8], offset aOut_23 ; "-out"
		mov	[esp+0BCh+var_BC], ebx ; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_43D540
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_43D540
		lea	ebx, [ebp+4]
		mov	[esp+0BCh+var_64], eax
		xor	eax, eax
		jmp	loc_43D4D6
_pkcs8_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _pkey_main
_pkey_main	proc near		; DATA XREF: .data:004551CCo

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	[esp+7Ch+var_24], 0
		mov	[esp+7Ch+var_20], 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_43E659

loc_43E174:				; CODE XREF: _pkey_main+526j
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], eax
		call	_load_config
		test	eax, eax
		jz	loc_43E370
		call	_ERR_load_crypto_strings
		call	_OPENSSL_add_all_algorithms_noconf
		mov	eax, [esp+7Ch+arg_4]
		lea	ebx, [eax+4]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_43E454
		cmp	byte ptr [eax],	2Dh
		mov	[esp+7Ch+var_50], 0
		mov	[esp+7Ch+var_40], 0
		mov	[esp+7Ch+var_3C], 0
		mov	[esp+7Ch+var_38], 0
		mov	[esp+7Ch+var_34], 0
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_5C], 3
		mov	ebp, 3
		mov	[esp+7Ch+var_30], 0
		mov	[esp+7Ch+var_54], 0
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_48], 0
		mov	[esp+7Ch+var_4C], 0
		jz	short loc_43E255
		jmp	loc_43E4C0
; ---------------------------------------------------------------------------
		align 10h

loc_43E220:				; CODE XREF: _pkey_main+113j
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_43E400
		lea	esi, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_str2fmt
		mov	ebp, eax
		xor	eax, eax

loc_43E23A:				; CODE XREF: _pkey_main+2A4j
					; _pkey_main+2B7j ...
		lea	ebx, [esi+4]
		test	eax, eax
		jnz	short loc_43E2A0

loc_43E241:				; CODE XREF: _pkey_main+14Aj
		mov	eax, [esi+4]
		test	eax, eax
		jz	loc_43E4C0
		cmp	byte ptr [eax],	2Dh
		jnz	loc_43E4C0

loc_43E255:				; CODE XREF: _pkey_main+C3j
		mov	esi, eax
		mov	edi, offset aInform_14 ; "-inform"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_43E220
		mov	edi, offset aOutform_14	; "-outform"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_43E3D0
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_43E400
		lea	esi, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_str2fmt
		mov	[esp+7Ch+var_5C], eax
		xor	eax, eax
		lea	ebx, [esi+4]
		test	eax, eax
		jz	short loc_43E241
		lea	esi, [esi+0]

loc_43E2A0:				; CODE XREF: _pkey_main+EFj
					; _pkey_main+299j ...
		mov	[esp+7Ch+var_78], offset aUsagePkeyOptio ; "Usage pkey [options]\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aWhereOption_14 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInFileInputF_3 ; "-in	file	    input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInformXInput_0 ; "-inform X	    input format (DER or PE"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aPassinArgInp_3 ; "-passin arg	    input file pass phrase "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOutformXOutp_1 ; "-outform X	    output format (DER or P"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOutFileOutpu_6 ; "-out file	    output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aPassoutArgOu_4 ; "-passout arg    output file	pass phrase"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aEngineEUseE_18 ; "-engine e	    use	engine e, possibly "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, 1
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43E370:				; CODE XREF: _pkey_main+36j
		mov	esi, 1
		xor	edi, edi
		xor	ebx, ebx

loc_43E379:				; CODE XREF: _pkey_main+4A6j
					; _pkey_main+5FEj ...
		mov	[esp+7Ch+var_7C], edi
		call	_EVP_PKEY_free
		mov	[esp+7Ch+var_7C], ebx
		call	_BIO_free_all
		mov	[esp+7Ch+var_7C], 0
		call	_BIO_free
		mov	edx, [esp+7Ch+var_24]
		test	edx, edx
		jz	short loc_43E3A5
		mov	[esp+7Ch+var_7C], edx
		call	_CRYPTO_free

loc_43E3A5:				; CODE XREF: _pkey_main+24Bj
		mov	edx, [esp+7Ch+var_20]
		test	edx, edx
		jz	short loc_43E3C0
		mov	[esp+7Ch+var_7C], edx
		call	_CRYPTO_free
		mov	eax, esi
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43E3C0:				; CODE XREF: _pkey_main+25Bj
		mov	eax, esi
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43E3D0:				; CODE XREF: _pkey_main+123j
		mov	edi, offset aPassin_9 ;	"-passin"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_43E410
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_58], eax
		test	eax, eax
		jz	loc_43E2A0

loc_43E3EF:				; CODE XREF: _pkey_main+2D9j
					; _pkey_main+2FDj
		lea	esi, [ebx+4]
		xor	eax, eax
		jmp	loc_43E23A
; ---------------------------------------------------------------------------
		align 10h

loc_43E400:				; CODE XREF: _pkey_main+D5j
					; _pkey_main+12Ej ...
		mov	esi, ebx
		mov	eax, 1
		jmp	loc_43E23A
; ---------------------------------------------------------------------------
		align 10h

loc_43E410:				; CODE XREF: _pkey_main+28Ej
		mov	edi, offset aPassout_7 ; "-passout"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_43E430
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_54], eax
		test	eax, eax
		jnz	short loc_43E3EF
		jmp	loc_43E2A0
; ---------------------------------------------------------------------------

loc_43E430:				; CODE XREF: _pkey_main+2CEj
		mov	edi, offset aEngine_23 ; "-engine"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_43E600
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_50], eax
		test	eax, eax
		jnz	short loc_43E3EF
		jmp	loc_43E2A0
; ---------------------------------------------------------------------------

loc_43E454:				; CODE XREF: _pkey_main+55j
		mov	[esp+7Ch+var_50], 0
		mov	[esp+7Ch+var_40], 0
		mov	[esp+7Ch+var_3C], 0
		mov	[esp+7Ch+var_38], 0
		mov	[esp+7Ch+var_34], 0
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_5C], 3
		mov	ebp, 3
		mov	[esp+7Ch+var_30], 0
		mov	[esp+7Ch+var_54], 0
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_48], 0
		mov	[esp+7Ch+var_4C], 0
		lea	esi, [esi+0]

loc_43E4C0:				; CODE XREF: _pkey_main+C5j
					; _pkey_main+F6j ...
		mov	[esp+7Ch+var_74], 0
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_setup_engine
		mov	esi, eax
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_6C], eax ;	int
		lea	eax, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_70], eax ;	int
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_74], eax ;	char *
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], eax ;	char *
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax ;	int
		call	_app_passwd
		test	eax, eax
		jz	loc_43E730
		mov	eax, [esp+7Ch+var_48]
		test	eax, eax
		jz	loc_43E77B
		mov	[esp+7Ch+var_78], offset aWb_6 ; "wb"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	loc_43E83C

loc_43E53A:				; CODE XREF: _pkey_main+645j
		mov	eax, [esp+7Ch+var_44]
		test	eax, eax
		jz	loc_43E67B
		mov	[esp+7Ch+var_64], offset aPublicKey_3 ;	"Public	Key"
		mov	[esp+7Ch+var_68], esi
		mov	eax, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], ebp
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_load_pubkey
		mov	edi, eax

loc_43E57D:				; CODE XREF: _pkey_main+562j
		test	edi, edi
		jz	loc_43E7DE
		mov	ebp, [esp+7Ch+var_40]
		test	ebp, ebp
		jnz	short loc_43E5C0
		cmp	[esp+7Ch+var_5C], 3
		jz	loc_43E79A
		cmp	[esp+7Ch+var_5C], 1
		jnz	loc_43E7BF
		mov	ecx, [esp+7Ch+var_34]
		test	ecx, ecx
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], ebx
		jz	loc_43E7F9
		call	_i2d_PUBKEY_bio
		nop
		lea	esi, [esi+0]

loc_43E5C0:				; CODE XREF: _pkey_main+43Bj
					; _pkey_main+65Ej ...
		mov	edx, [esp+7Ch+var_3C]
		test	edx, edx
		jz	loc_43E753
		mov	eax, [esp+7Ch+var_38]
		test	eax, eax
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], ebx
		jz	loc_43E7B3
		call	_EVP_PKEY_print_public
		xor	esi, esi
		jmp	loc_43E379
; ---------------------------------------------------------------------------
		align 10h

loc_43E600:				; CODE XREF: _pkey_main+2EEj
		mov	edi, offset aIn_19 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jz	short loc_43E640
		mov	edi, offset aOut_24 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_43E6B7
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_43E400
		lea	esi, [ebx+4]
		mov	[esp+7Ch+var_48], eax
		xor	eax, eax
		jmp	loc_43E23A
; ---------------------------------------------------------------------------
		align 10h

loc_43E640:				; CODE XREF: _pkey_main+4BEj
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_43E400
		lea	esi, [ebx+4]
		mov	[esp+7Ch+var_4C], eax
		xor	eax, eax
		jmp	loc_43E23A
; ---------------------------------------------------------------------------

loc_43E659:				; CODE XREF: _pkey_main+1Ej
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_43E174
; ---------------------------------------------------------------------------

loc_43E67B:				; CODE XREF: _pkey_main+3F0j
		mov	[esp+7Ch+var_64], offset aKey_5	; "key"
		mov	[esp+7Ch+var_68], esi
		mov	eax, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], ebp
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_load_key
		mov	edi, eax
		jmp	loc_43E57D
; ---------------------------------------------------------------------------

loc_43E6B7:				; CODE XREF: _pkey_main+4CEj
		mov	edi, offset aPubin_3 ; "-pubin"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_43E75A
		mov	edi, offset aPubout_2 ;	"-pubout"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jz	loc_43E7E8
		mov	edi, offset aText_pub ;	"-text_pub"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_43E865
		mov	edi, offset aText_12 ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_43E87E
		mov	edi, offset aNoout_13 ;	"-noout"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	loc_43E88F
		mov	esi, ebx
		xor	eax, eax
		mov	[esp+7Ch+var_40], 1
		jmp	loc_43E23A
; ---------------------------------------------------------------------------
		align 10h

loc_43E730:				; CODE XREF: _pkey_main+3BEj
		mov	[esp+7Ch+var_78], offset aErrorGettin_17 ; "Error getting passwords\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	esi, 1
		xor	edi, edi
		xor	ebx, ebx
		jmp	loc_43E379
; ---------------------------------------------------------------------------

loc_43E753:				; CODE XREF: _pkey_main+476j
		xor	esi, esi
		jmp	loc_43E379
; ---------------------------------------------------------------------------

loc_43E75A:				; CODE XREF: _pkey_main+575j
		mov	esi, ebx
		xor	eax, eax
		mov	[esp+7Ch+var_38], 1
		mov	[esp+7Ch+var_34], 1
		mov	[esp+7Ch+var_44], 1
		jmp	loc_43E23A
; ---------------------------------------------------------------------------

loc_43E77B:				; CODE XREF: _pkey_main+3CAj
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	ebx, eax
		jmp	loc_43E53A
; ---------------------------------------------------------------------------

loc_43E79A:				; CODE XREF: _pkey_main+442j
		mov	esi, [esp+7Ch+var_34]
		test	esi, esi
		jz	short loc_43E803
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], ebx
		call	_PEM_write_bio_PUBKEY
		jmp	loc_43E5C0
; ---------------------------------------------------------------------------

loc_43E7B3:				; CODE XREF: _pkey_main+499j
		call	_EVP_PKEY_print_private
		xor	esi, esi
		jmp	loc_43E379
; ---------------------------------------------------------------------------

loc_43E7BF:				; CODE XREF: _pkey_main+44Dj
		mov	[esp+7Ch+var_78], offset aBadFormatSpe_1 ; "Bad	format specified for key\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	esi, 1
		jmp	loc_43E379
; ---------------------------------------------------------------------------

loc_43E7DE:				; CODE XREF: _pkey_main+42Fj
		mov	esi, 1
		jmp	loc_43E379
; ---------------------------------------------------------------------------

loc_43E7E8:				; CODE XREF: _pkey_main+589j
		mov	esi, ebx
		xor	eax, eax
		mov	[esp+7Ch+var_34], 1
		jmp	loc_43E23A
; ---------------------------------------------------------------------------

loc_43E7F9:				; CODE XREF: _pkey_main+460j
		call	_i2d_PrivateKey_bio
		jmp	loc_43E5C0
; ---------------------------------------------------------------------------

loc_43E803:				; CODE XREF: _pkey_main+650j
		mov	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_64], eax
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], ebx
		call	_PEM_write_bio_PrivateKey
		jmp	loc_43E5C0
; ---------------------------------------------------------------------------

loc_43E83C:				; CODE XREF: _pkey_main+3E4j
		mov	eax, [esp+7Ch+var_48]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aCanTOpenOutp_2 ; "Can't open output file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	esi, 1
		xor	edi, edi
		jmp	loc_43E379
; ---------------------------------------------------------------------------

loc_43E865:				; CODE XREF: _pkey_main+59Dj
		mov	esi, ebx
		xor	eax, eax
		mov	[esp+7Ch+var_3C], 1
		mov	[esp+7Ch+var_38], 1
		jmp	loc_43E23A
; ---------------------------------------------------------------------------

loc_43E87E:				; CODE XREF: _pkey_main+5B1j
		mov	esi, ebx
		xor	eax, eax
		mov	[esp+7Ch+var_3C], 1
		jmp	loc_43E23A
; ---------------------------------------------------------------------------

loc_43E88F:				; CODE XREF: _pkey_main+5C5j
		inc	eax
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_get_cipherbyname
		mov	[esp+7Ch+var_30], eax
		test	eax, eax
		jz	short loc_43E8A9
		mov	esi, ebx
		xor	eax, eax
		jmp	loc_43E23A
; ---------------------------------------------------------------------------

loc_43E8A9:				; CODE XREF: _pkey_main+74Ej
		mov	eax, [ebx]
		inc	eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aUnknownCiphe_1 ; "Unknown cipher %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	esi, ebx
		mov	eax, 1
		jmp	loc_43E23A
_pkey_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _pkeyparam_main
_pkeyparam_main	proc near		; DATA XREF: .data:004551D8o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_43EB82

loc_43E8F4:				; CODE XREF: _pkeyparam_main+2BFj
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], eax
		call	_load_config
		test	eax, eax
		jz	loc_43EAB0
		call	_ERR_load_crypto_strings
		call	_OPENSSL_add_all_algorithms_noconf
		mov	eax, [esp+3Ch+arg_4]
		add	eax, 4
		mov	[esp+3Ch+var_28], 0
		mov	[esp+3Ch+var_20], 0
		mov	[esp+3Ch+var_24], 0
		mov	[esp+3Ch+var_2C], 0
		xor	ebp, ebp
		jmp	short loc_43E95D
; ---------------------------------------------------------------------------
		jmp	short loc_43E950
; ---------------------------------------------------------------------------
		align 10h

loc_43E950:				; CODE XREF: _pkeyparam_main+61j
					; _pkeyparam_main+9Ej
		mov	ebp, [eax+4]
		test	ebp, ebp
		jz	short loc_43E99F

loc_43E957:				; CODE XREF: _pkeyparam_main+BDj
					; _pkeyparam_main+179j
		add	eax, 4

loc_43E95A:				; CODE XREF: _pkeyparam_main+1AEj
					; _pkeyparam_main+1BCj	...
		add	eax, 4

loc_43E95D:				; CODE XREF: _pkeyparam_main+5Fj
		mov	edx, [eax]
		test	edx, edx
		jz	loc_43EAF0
		cmp	byte ptr [edx],	2Dh
		jnz	loc_43EAF0
		mov	edi, offset aIn_20 ; "-in"
		mov	esi, edx
		mov	ecx, 4
		repe cmpsb
		jz	short loc_43E950
		mov	edi, offset aOut_25 ; "-out"
		mov	esi, edx
		mov	ecx, 5
		repe cmpsb
		jnz	loc_43EA40
		mov	ebx, [eax+4]
		mov	[esp+3Ch+var_2C], ebx
		test	ebx, ebx
		jnz	short loc_43E957

loc_43E99F:				; CODE XREF: _pkeyparam_main+75j
					; _pkeyparam_main+17Fj
		mov	[esp+3Ch+var_38], offset aUsagePkeyparam ; "Usage pkeyparam [options]\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aWhereOption_15 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aInFileInputF_4 ; "-in	file	    input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aOutFileOutpu_7 ; "-out file	    output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aTextPrintParam ; "-text	    print parameters as	tex"...
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aNooutDonTOut_1 ; "-noout	    don't output encoded pa"...
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	[esp+3Ch+var_38], offset aEngineEUseE_19 ; "-engine e	    use	engine e, possibly "...
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43EA40:				; CODE XREF: _pkeyparam_main+AEj
		mov	edi, offset aEngine_24 ; "-engine"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jnz	short loc_43EA70
		mov	esi, [eax+4]
		mov	[esp+3Ch+var_28], esi
		test	esi, esi
		jnz	loc_43E957
		jmp	loc_43E99F
; ---------------------------------------------------------------------------
		align 10h

loc_43EA70:				; CODE XREF: _pkeyparam_main+16Ej
		mov	edi, offset aText_13 ; "-text"
		mov	ecx, 6
		mov	esi, edx
		repe cmpsb
		jz	short loc_43EAE0
		mov	edi, offset aNoout_14 ;	"-noout"
		mov	ecx, 7
		mov	esi, edx
		repe cmpsb
		jnz	loc_43E95A
		mov	[esp+3Ch+var_20], 1
		jmp	loc_43E95A
; ---------------------------------------------------------------------------
		jmp	short loc_43EAB0
; ---------------------------------------------------------------------------
		align 10h

loc_43EAB0:				; CODE XREF: _pkeyparam_main+26j
					; _pkeyparam_main+1C1j
		mov	ebp, 1
		xor	edi, edi
		xor	esi, esi
		xor	ebx, ebx

loc_43EABB:				; CODE XREF: _pkeyparam_main+29Dj
					; _pkeyparam_main+2E6j	...
		mov	[esp+3Ch+var_3C], edi
		call	_EVP_PKEY_free
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_free_all
		mov	[esp+3Ch+var_3C], ebx
		call	_BIO_free
		mov	eax, ebp
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43EAE0:				; CODE XREF: _pkeyparam_main+19Ej
		mov	[esp+3Ch+var_24], 1
		jmp	loc_43E95A
; ---------------------------------------------------------------------------
		align 10h

loc_43EAF0:				; CODE XREF: _pkeyparam_main+81j
					; _pkeyparam_main+8Aj
		mov	[esp+3Ch+var_34], 0
		mov	eax, [esp+3Ch+var_28]
		mov	[esp+3Ch+var_38], eax
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_setup_engine
		test	ebp, ebp
		jz	loc_43EBFF
		mov	[esp+3Ch+var_38], offset aR_3 ;	"r"
		mov	[esp+3Ch+var_3C], ebp
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	short loc_43EBA4

loc_43EB2B:				; CODE XREF: _pkeyparam_main+336j
		mov	eax, [esp+3Ch+var_2C]
		test	eax, eax
		jz	loc_43EC1B
		mov	[esp+3Ch+var_38], offset aW_5 ;	"w"
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_new_file
		mov	esi, eax
		test	eax, eax
		jz	loc_43EC66

loc_43EB51:				; CODE XREF: _pkeyparam_main+355j
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], ebx
		call	_PEM_read_bio_Parameters
		mov	edi, eax
		test	eax, eax
		jz	loc_43EC3A
		mov	edx, [esp+3Ch+var_20]
		test	edx, edx
		jz	short loc_43EBEE

loc_43EB73:				; CODE XREF: _pkeyparam_main+31Aj
		mov	eax, [esp+3Ch+var_24]
		test	eax, eax
		jnz	short loc_43EBCB
		xor	ebp, ebp
		jmp	loc_43EABB
; ---------------------------------------------------------------------------

loc_43EB82:				; CODE XREF: _pkeyparam_main+Ej
		mov	[esp+3Ch+var_38], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_43E8F4
; ---------------------------------------------------------------------------

loc_43EBA4:				; CODE XREF: _pkeyparam_main+249j
		mov	[esp+3Ch+var_34], ebp
		mov	[esp+3Ch+var_38], offset aCanTOpenInpu_1 ; "Can't open input file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	ebp, 1
		xor	edi, edi
		xor	esi, esi
		jmp	loc_43EABB
; ---------------------------------------------------------------------------

loc_43EBCB:				; CODE XREF: _pkeyparam_main+299j
		mov	[esp+3Ch+var_30], 0
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], esi
		call	_EVP_PKEY_print_params
		xor	ebp, ebp
		jmp	loc_43EABB
; ---------------------------------------------------------------------------

loc_43EBEE:				; CODE XREF: _pkeyparam_main+291j
		mov	[esp+3Ch+var_38], eax
		mov	[esp+3Ch+var_3C], esi
		call	_PEM_write_bio_Parameters
		jmp	loc_43EB73
; ---------------------------------------------------------------------------

loc_43EBFF:				; CODE XREF: _pkeyparam_main+22Fj
		mov	[esp+3Ch+var_38], 0
		mov	eax, ds:__imp___iob
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_new_fp
		mov	ebx, eax
		jmp	loc_43EB2B
; ---------------------------------------------------------------------------

loc_43EC1B:				; CODE XREF: _pkeyparam_main+251j
		mov	[esp+3Ch+var_38], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_new_fp
		mov	esi, eax
		jmp	loc_43EB51
; ---------------------------------------------------------------------------

loc_43EC3A:				; CODE XREF: _pkeyparam_main+285j
		mov	[esp+3Ch+var_38], offset aErrorReading_3 ; "Error reading parameters\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_ERR_print_errors
		mov	ebp, 1
		jmp	loc_43EABB
; ---------------------------------------------------------------------------

loc_43EC66:				; CODE XREF: _pkeyparam_main+26Bj
		mov	eax, [esp+3Ch+var_2C]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset aCanTOpenOutp_3 ; "Can't open output file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		mov	ebp, 1
		xor	edi, edi
		jmp	loc_43EABB
_pkeyparam_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_usage		proc near		; CODE XREF: _pkeyutl_main:loc_43F130p
					; _pkeyutl_main:loc_43F9F5p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		sub	esp, 1Ch
		mov	[esp+1Ch+var_18], offset aUsagePkeyutlOp ; "Usage: pkeyutl [options]\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aInFileInputFil ; "-in	file	    input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aOutFileOutputF ; "-out file	    output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aSigfileFileSig ; "-sigfile file signature file (verify op"...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aInkeyFileInput ; "-inkey file	    input key\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aKeyformArgPriv ; "-keyform arg    private key	format - de"...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aPubinInputIsAP ; "-pubin	    input is a public key\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aCertinInputIsA ; "-certin	    input is a certificate "...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aPkeyoptXYPubli ; "-pkeyopt X:Y    public key options\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aSignSignWithPr ; "-sign	    sign with private key\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aVerifyVerifyWi ; "-verify	    verify with	public key\"...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aVerifyrecoverV ; "-verifyrecover  verify with	public key,"...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aEncryptEncrypt ; "-encrypt	    encrypt with public	key"...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aDecryptDecrypt ; "-decrypt	    decrypt with private ke"...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aDeriveDeriveSh ; "-derive	    derive shared secret\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aHexdumpHexDump ; "-hexdump	    hex	dump output\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aEngineEUseEngi ; "-engine e	    use	engine e, possibly "...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		mov	[esp+1Ch+var_18], offset aPassinArgPassP ; "-passin arg	    pass phrase	source\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		add	esp, 1Ch
		retn
_usage		endp

; ---------------------------------------------------------------------------
		jmp	short _pkeyutl_main
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _pkeyutl_main
_pkeyutl_main	proc near		; CODE XREF: .text:0043EE11j
					; DATA XREF: .data:004551E4o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_33		= byte ptr -33h
var_32		= byte ptr -32h
var_31		= byte ptr -31h
var_30		= dword	ptr -30h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	[esp+7Ch+var_28], 0
		mov	[esp+7Ch+var_24], 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_43F3D0

loc_43EE44:				; CODE XREF: _pkeyutl_main+5CDj
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], eax
		call	_load_config
		test	eax, eax
		jnz	short loc_43EEB0

loc_43EE58:				; CODE XREF: _pkeyutl_main+BDAj
		mov	edi, 1
		xor	ebp, ebp
		xor	esi, esi
		xor	ebx, ebx

loc_43EE63:				; CODE XREF: _pkeyutl_main+326j
					; _pkeyutl_main+338j
		mov	[esp+7Ch+var_7C], ebx
		call	_BIO_free
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_free_all
		mov	eax, [esp+7Ch+var_28]
		test	eax, eax
		jz	short loc_43EE83
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_free

loc_43EE83:				; CODE XREF: _pkeyutl_main+59j
		test	ebp, ebp
		jz	short loc_43EE8F
		mov	[esp+7Ch+var_7C], ebp
		call	_CRYPTO_free

loc_43EE8F:				; CODE XREF: _pkeyutl_main+65j
		mov	eax, [esp+7Ch+var_24]
		test	eax, eax
		jz	short loc_43EE9F
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_free

loc_43EE9F:				; CODE XREF: _pkeyutl_main+75j
		mov	eax, edi
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_43EEB0:				; CODE XREF: _pkeyutl_main+36j
		mov	eax, [esp+7Ch+arg_0]
		lea	edx, [eax-1]
		mov	[esp+7Ch+var_60], edx
		call	_ERR_load_crypto_strings
		call	_OPENSSL_add_all_algorithms_noconf
		mov	edx, [esp+7Ch+var_60]
		test	edx, edx
		jle	loc_43F9F5
		mov	eax, [esp+7Ch+arg_4]
		lea	ebx, [eax+4]
		mov	[esp+7Ch+var_40], 0FFFFFFFFh
		mov	[esp+7Ch+var_44], 0
		mov	[esp+7Ch+var_5C], 0
		mov	[esp+7Ch+var_32], 0
		mov	[esp+7Ch+var_31], 0
		mov	[esp+7Ch+var_33], 0
		mov	[esp+7Ch+var_38], 3
		mov	[esp+7Ch+var_3C], 3
		mov	[esp+7Ch+var_48], 1
		mov	[esp+7Ch+var_50], 8
		mov	[esp+7Ch+var_4C], 0
		mov	[esp+7Ch+var_54], 0
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_60], 0
		jmp	short loc_43EF69
; ---------------------------------------------------------------------------
		align 10h

loc_43EF50:				; CODE XREF: _pkeyutl_main+159j
		dec	edx
		jz	loc_43F130
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_60], eax

loc_43EF61:				; CODE XREF: _pkeyutl_main+1F1j
					; _pkeyutl_main+2E4j ...
		dec	edx
		lea	ebx, [esi+4]
		test	edx, edx
		jle	short loc_43EFA4

loc_43EF69:				; CODE XREF: _pkeyutl_main+125j
					; _pkeyutl_main+182j
		mov	ebp, [ebx]
		mov	esi, ebp
		mov	edi, offset aIn_21 ; "-in"
		mov	ecx, 4
		repe cmpsb
		jz	short loc_43EF50
		mov	edi, offset aOut_26 ; "-out"
		mov	ecx, 5
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_43EFF0
		dec	edx
		jz	loc_43F130
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_58], eax
		dec	edx
		lea	ebx, [esi+4]
		test	edx, edx
		jg	short loc_43EF69

loc_43EFA4:				; CODE XREF: _pkeyutl_main+147j
		mov	edx, [esp+7Ch+var_5C]
		test	edx, edx
		jz	loc_43F9F5
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jz	loc_43F7C4
		cmp	[esp+7Ch+var_50], 10h
		jz	loc_43F400
		mov	[esp+7Ch+var_78], offset aSignatureFil_0 ; "Signature file specified for non verify"...

loc_43EFCF:				; CODE XREF: _pkeyutl_main+F36j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_puts
		mov	edi, 1
		xor	ebp, ebp
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_43F14C
; ---------------------------------------------------------------------------
		align 10h

loc_43EFF0:				; CODE XREF: _pkeyutl_main+169j
		mov	edi, offset aSigfile ; "-sigfile"
		mov	ecx, 9
		mov	esi, ebp
		repe cmpsb
		jnz	short loc_43F020
		dec	edx
		jz	loc_43F130
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_54], eax
		jmp	loc_43EF61
; ---------------------------------------------------------------------------
		align 10h

loc_43F020:				; CODE XREF: _pkeyutl_main+1DEj
		mov	edi, offset aInkey_1 ; "-inkey"
		mov	ecx, 7
		mov	esi, ebp
		repe cmpsb
		jnz	loc_43F160
		dec	edx
		jz	loc_43F130
		lea	esi, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+7Ch+var_20], 0
		mov	eax, [esp+7Ch+var_50]
		cmp	eax, 8
		jz	loc_43F250
		cmp	eax, 200h
		jz	loc_43F250
		cmp	eax, 400h
		jz	loc_43F250
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_6C], 0 ; int
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_70], eax ;	int
		mov	[esp+7Ch+var_74], 0 ; char *
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_78], eax ;	char *
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax ;	int
		call	_app_passwd
		test	eax, eax
		mov	edx, [esp+7Ch+var_5C]
		jz	loc_43FC30
		mov	eax, [esp+7Ch+var_48]
		cmp	eax, 2
		jz	loc_43F6F0
		cmp	eax, 3
		jz	loc_43F738
		dec	eax
		jz	loc_43F298

loc_43F0C6:				; CODE XREF: _pkeyutl_main+955j
		mov	[esp+7Ch+var_30], edx
		mov	[esp+7Ch+var_7C], 0
		call	_EVP_PKEY_size
		mov	[esp+7Ch+var_40], eax
		mov	[esp+7Ch+var_5C], 0
		mov	edx, [esp+7Ch+var_30]

loc_43F0E6:				; CODE XREF: _pkeyutl_main+4FFj
					; _pkeyutl_main+557j ...
		mov	eax, [esp+7Ch+var_20]
		test	eax, eax
		jz	short loc_43F0FE
		mov	[esp+7Ch+var_30], edx
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_free
		mov	edx, [esp+7Ch+var_30]

loc_43F0FE:				; CODE XREF: _pkeyutl_main+2CCj
		mov	ebp, [esp+7Ch+var_5C]
		test	ebp, ebp
		jnz	loc_43EF61
		mov	[esp+7Ch+var_78], offset aErrorInitial_2 ; "Error initializing context\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_puts
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		lea	esi, [esi+0]

loc_43F130:				; CODE XREF: _pkeyutl_main+131j
					; _pkeyutl_main+16Cj ...
		call	_usage
		mov	edi, 1
		xor	ebp, ebp
		xor	esi, esi
		xor	ebx, ebx
		mov	ecx, [esp+7Ch+var_5C]
		test	ecx, ecx
		jz	loc_43EE63

loc_43F14C:				; CODE XREF: _pkeyutl_main+1C7j
					; _pkeyutl_main+847j ...
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_CTX_free
		jmp	loc_43EE63
; ---------------------------------------------------------------------------
		align 10h

loc_43F160:				; CODE XREF: _pkeyutl_main+20Ej
		mov	edi, offset aPeerkey ; "-peerkey"
		mov	ecx, 9
		mov	esi, ebp
		repe cmpsb
		jnz	loc_43F220
		dec	edx
		jz	short loc_43F130
		lea	esi, [ebx+4]
		mov	ebx, [ebx+4]
		mov	ebp, ds:_bio_err
		mov	edi, [esp+7Ch+var_5C]
		test	edi, edi
		jz	loc_43FBA0
		mov	[esp+7Ch+var_30], edx
		mov	[esp+7Ch+var_64], offset aPeerKey ; "Peer Key"
		mov	[esp+7Ch+var_68], 0
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	eax, [esp+7Ch+var_38]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], ebp
		call	_load_pubkey
		mov	edi, eax
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_43FBDD
		mov	[esp+7Ch+var_30], edx
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_derive_set_peer
		mov	ebx, eax
		mov	[esp+7Ch+var_7C], edi
		call	_EVP_PKEY_free
		test	ebx, ebx
		mov	edx, [esp+7Ch+var_30]
		jg	loc_43EF61
		mov	[esp+7Ch+var_7C], ebp
		call	_ERR_print_errors
		test	ebx, ebx
		mov	edx, [esp+7Ch+var_30]
		jz	loc_43F130
		jmp	loc_43EF61
; ---------------------------------------------------------------------------
		align 10h

loc_43F220:				; CODE XREF: _pkeyutl_main+34Ej
		mov	edi, offset aPassin_10 ; "-passin"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	loc_43F380
		dec	edx
		jz	loc_43F130
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_44], eax
		jmp	loc_43EF61
; ---------------------------------------------------------------------------
		align 10h

loc_43F250:				; CODE XREF: _pkeyutl_main+230j
					; _pkeyutl_main+23Bj ...
		cmp	[esp+7Ch+var_48], 1
		jnz	loc_43F9CB
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_6C], 0 ; int
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_70], eax ;	int
		mov	[esp+7Ch+var_74], 0 ; char *
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_78], eax ;	char *
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax ;	int
		call	_app_passwd
		test	eax, eax
		mov	edx, [esp+7Ch+var_5C]
		jz	loc_43FC30

loc_43F298:				; CODE XREF: _pkeyutl_main+2A0j
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_64], offset aPrivateKey_5 ; "Private Key"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_68], eax
		mov	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], 0
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebx
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_load_key
		mov	ebx, eax
		mov	edx, [esp+7Ch+var_5C]

loc_43F2DB:				; CODE XREF: _pkeyutl_main+913j
					; _pkeyutl_main+971j
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_7C], ebx
		call	_EVP_PKEY_size
		mov	[esp+7Ch+var_40], eax
		test	ebx, ebx
		mov	edx, [esp+7Ch+var_5C]
		jz	loc_43FE65
		mov	[esp+7Ch+var_30], edx
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	_EVP_PKEY_CTX_new
		mov	edi, eax
		mov	[esp+7Ch+var_5C], eax
		mov	[esp+7Ch+var_7C], ebx
		call	_EVP_PKEY_free
		test	edi, edi
		mov	edx, [esp+7Ch+var_30]
		jz	loc_43F0E6
		cmp	[esp+7Ch+var_50], 20h
		jz	loc_43F8E9
		mov	eax, [esp+7Ch+var_50]
		jle	loc_43F6AE
		cmp	eax, 200h
		jz	loc_43F8D0
		cmp	eax, 400h
		jz	loc_43F902
		cmp	eax, 100h
		jz	loc_43F89E

loc_43F35B:				; CODE XREF: _pkeyutl_main+89Aj
					; _pkeyutl_main+8C8j
		mov	[esp+7Ch+var_30], edx
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_CTX_free
		mov	[esp+7Ch+var_5C], 0
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_43F0E6
; ---------------------------------------------------------------------------
		align 10h

loc_43F380:				; CODE XREF: _pkeyutl_main+40Ej
		mov	edi, offset aPeerform ;	"-peerform"
		mov	ecx, 0Ah
		mov	esi, ebp
		repe cmpsb
		jz	loc_43F66C
		mov	edi, offset aKeyform_6 ; "-keyform"
		mov	ecx, 9
		mov	esi, ebp
		repe cmpsb
		jnz	loc_43F80B
		dec	edx
		mov	[esp+7Ch+var_30], edx
		jz	loc_43F130
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_str2fmt
		mov	[esp+7Ch+var_3C], eax
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_43EF61
; ---------------------------------------------------------------------------
		align 10h

loc_43F3D0:				; CODE XREF: _pkeyutl_main+1Ej
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_43EE44
; ---------------------------------------------------------------------------
		align 10h

loc_43F400:				; CODE XREF: _pkeyutl_main+1A1j
		mov	[esp+7Ch+var_74], 0
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_app_RAND_load_file

loc_43F41D:				; CODE XREF: _pkeyutl_main+9D4j
		mov	eax, [esp+7Ch+var_60]
		test	eax, eax
		jz	loc_43F692
		mov	[esp+7Ch+var_78], offset aRb_5 ; "rb"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	loc_43FD5B

loc_43F443:				; CODE XREF: _pkeyutl_main+889j
					; _pkeyutl_main+9DCj
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jz	loc_43F9AC
		mov	[esp+7Ch+var_78], offset aWb_7 ; "wb"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_file
		mov	esi, eax
		test	eax, eax
		jz	loc_43FD20

loc_43F469:				; CODE XREF: _pkeyutl_main+BA6j
		mov	eax, [esp+7Ch+var_54]
		test	eax, eax
		jz	loc_43F801
		mov	[esp+7Ch+var_78], offset aRb_5 ; "rb"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_file
		mov	edi, eax
		test	eax, eax
		jz	loc_43FBB5
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+var_40]
		lea	eax, [eax+eax*4]
		add	eax, eax
		mov	[esp+7Ch+var_78], eax
		lea	eax, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_7C], eax
		call	_bio_to_mem
		mov	ebp, eax
		mov	[esp+7Ch+var_7C], edi
		call	_BIO_free
		test	ebp, ebp
		jle	loc_43FCD4

loc_43F4BE:				; CODE XREF: _pkeyutl_main+9E6j
		test	ebx, ebx
		jz	loc_43F856
		mov	[esp+7Ch+var_74], ebx
		mov	eax, [esp+7Ch+var_40]
		lea	eax, [eax+eax*4]
		add	eax, eax
		mov	[esp+7Ch+var_78], eax
		lea	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_7C], eax
		call	_bio_to_mem
		mov	[esp+7Ch+var_54], eax
		test	eax, eax
		jle	loc_43FE72
		cmp	[esp+7Ch+var_33], 0
		jz	short loc_43F556
		mov	edx, [esp+7Ch+var_54]
		mov	eax, edx
		shr	eax, 1
		mov	edi, eax
		jz	loc_43FE09
		lea	eax, [edx-1]
		mov	edx, eax
		xor	eax, eax
		mov	[esp+7Ch+var_4C], ebp
		mov	[esp+7Ch+var_48], ebx
		mov	[esp+7Ch+var_44], esi
		mov	esi, edi
		mov	ebp, edx
		lea	esi, [esi+0]

loc_43F520:				; CODE XREF: _pkeyutl_main+728j
		mov	edi, [esp+7Ch+var_28]
		lea	ecx, [edi+eax]
		mov	bl, [ecx]
		mov	byte ptr [esp+7Ch+var_60], bl
		mov	edx, ebp
		sub	edx, eax
		mov	bl, [edi+edx]
		mov	byte ptr [esp+7Ch+var_58], bl
		mov	[ecx], bl
		mov	ecx, [esp+7Ch+var_28]
		mov	bl, byte ptr [esp+7Ch+var_60]
		mov	[ecx+edx], bl
		inc	eax
		cmp	eax, esi
		jnz	short loc_43F520
		mov	ebp, [esp+7Ch+var_4C]
		mov	ebx, [esp+7Ch+var_48]
		mov	esi, [esp+7Ch+var_44]

loc_43F556:				; CODE XREF: _pkeyutl_main+6D4j
		mov	edi, [esp+7Ch+var_54]

loc_43F55A:				; CODE XREF: _pkeyutl_main+A38j
					; _pkeyutl_main+FEEj
		cmp	[esp+7Ch+var_50], 10h
		jz	loc_43F91B
		mov	eax, [esp+7Ch+var_28]
		mov	edx, [esp+7Ch+var_50]
		cmp	edx, 100h
		jz	loc_43FC41
		jg	loc_43F85D
		cmp	edx, 8
		jz	loc_43FC03
		cmp	edx, 20h
		jnz	loc_43F796
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], eax
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_60], eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 0
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_verify_recover

loc_43F5B9:				; CODE XREF: _pkeyutl_main+A79j
					; _pkeyutl_main+E0Bj ...
		test	eax, eax
		jle	loc_43F796
		mov	[esp+7Ch+var_74], 136h
		mov	[esp+7Ch+var_78], offset aPkeyutl_c ; "pkeyutl.c"
		mov	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_malloc
		mov	ebp, eax
		test	eax, eax
		jz	loc_43F796
		mov	eax, [esp+7Ch+var_28]
		mov	edx, [esp+7Ch+var_50]
		cmp	edx, 100h
		jz	loc_43FDB0
		jg	loc_43FC9B
		cmp	edx, 8
		jz	loc_43FDD5
		cmp	edx, 20h
		jnz	loc_43F798
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], eax
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebp
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_verify_recover

loc_43F633:				; CODE XREF: _pkeyutl_main+EAFj
					; _pkeyutl_main+F8Bj ...
		test	eax, eax
		jle	loc_43F798
		cmp	[esp+7Ch+var_32], 0
		jnz	loc_43F970
		mov	eax, [esp+7Ch+var_20]
		cmp	[esp+7Ch+var_31], 0
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], esi
		jz	loc_43F964
		call	_BIO_dump
		xor	edi, edi
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43F66C:				; CODE XREF: _pkeyutl_main+56Ej
		dec	edx
		mov	[esp+7Ch+var_30], edx
		jz	loc_43F130
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_str2fmt
		mov	[esp+7Ch+var_38], eax
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43F692:				; CODE XREF: _pkeyutl_main+603j
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	ebx, eax
		jmp	loc_43F443
; ---------------------------------------------------------------------------

loc_43F6AE:				; CODE XREF: _pkeyutl_main+514j
		cmp	eax, 8
		jz	loc_43F8B7
		cmp	eax, 10h
		jnz	loc_43F35B
		mov	[esp+7Ch+var_30], edx
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_verify_init
		mov	edx, [esp+7Ch+var_30]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_43F6E0:				; CODE XREF: _pkeyutl_main+A92j
					; _pkeyutl_main+AABj ...
		test	eax, eax
		jg	loc_43F0E6
		jmp	loc_43F35B
; ---------------------------------------------------------------------------
		align 10h

loc_43F6F0:				; CODE XREF: _pkeyutl_main+290j
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_64], offset aPublicKey_4 ;	"Public	Key"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_68], eax
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebx
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_load_pubkey
		mov	ebx, eax
		mov	edx, [esp+7Ch+var_5C]
		jmp	loc_43F2DB
; ---------------------------------------------------------------------------

loc_43F738:				; CODE XREF: _pkeyutl_main+299j
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_68], offset aCertificate_4	; "Certificate"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_6C], eax
		mov	[esp+7Ch+var_70], 0
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebx
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_load_cert
		mov	edi, eax
		test	eax, eax
		mov	edx, [esp+7Ch+var_5C]
		jz	loc_43F0C6
		mov	[esp+7Ch+var_7C], eax
		call	_X509_get_pubkey
		mov	ebx, eax
		mov	[esp+7Ch+var_7C], edi
		call	_X509_free
		mov	edx, [esp+7Ch+var_5C]
		jmp	loc_43F2DB
; ---------------------------------------------------------------------------

loc_43F796:				; CODE XREF: _pkeyutl_main+76Bj
					; _pkeyutl_main+79Bj ...
		xor	ebp, ebp

loc_43F798:				; CODE XREF: _pkeyutl_main+7EDj
					; _pkeyutl_main+815j ...
		mov	[esp+7Ch+var_78], offset aPublicKeyOpera ; "Public Key operation error\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	edi, 1
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43F7C4:				; CODE XREF: _pkeyutl_main+196j
		cmp	[esp+7Ch+var_50], 10h
		jz	loc_43FD4E
		mov	[esp+7Ch+var_74], 0
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], 0
		call	_app_RAND_load_file
		cmp	[esp+7Ch+var_50], 400h
		jnz	loc_43F41D
		xor	ebx, ebx
		jmp	loc_43F443
; ---------------------------------------------------------------------------

loc_43F801:				; CODE XREF: _pkeyutl_main+64Fj
		mov	ebp, 0FFFFFFFFh
		jmp	loc_43F4BE
; ---------------------------------------------------------------------------

loc_43F80B:				; CODE XREF: _pkeyutl_main+582j
		mov	edi, offset aEngine_25 ; "-engine"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jnz	loc_43F9FF
		dec	edx
		mov	[esp+7Ch+var_30], edx
		jz	loc_43F130
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_setup_engine
		mov	[esp+7Ch+var_4C], eax
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43F856:				; CODE XREF: _pkeyutl_main+6A0j
		xor	edi, edi
		jmp	loc_43F55A
; ---------------------------------------------------------------------------

loc_43F85D:				; CODE XREF: _pkeyutl_main+759j
		mov	edx, [esp+7Ch+var_50]
		cmp	edx, 200h
		jz	loc_43FC6E
		cmp	edx, 400h
		jnz	loc_43F796
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_60], eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 0
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_derive
		jmp	loc_43F5B9
; ---------------------------------------------------------------------------

loc_43F89E:				; CODE XREF: _pkeyutl_main+535j
		mov	[esp+7Ch+var_30], edx
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_encrypt_init
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_43F6E0
; ---------------------------------------------------------------------------

loc_43F8B7:				; CODE XREF: _pkeyutl_main+891j
		mov	[esp+7Ch+var_30], edx
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_sign_init
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_43F6E0
; ---------------------------------------------------------------------------

loc_43F8D0:				; CODE XREF: _pkeyutl_main+51Fj
		mov	[esp+7Ch+var_30], edx
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_decrypt_init
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_43F6E0
; ---------------------------------------------------------------------------

loc_43F8E9:				; CODE XREF: _pkeyutl_main+50Aj
		mov	[esp+7Ch+var_30], edx
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_verify_recover_init
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_43F6E0
; ---------------------------------------------------------------------------

loc_43F902:				; CODE XREF: _pkeyutl_main+52Aj
		mov	[esp+7Ch+var_30], edx
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_derive_init
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_43F6E0
; ---------------------------------------------------------------------------

loc_43F91B:				; CODE XREF: _pkeyutl_main+73Fj
		mov	[esp+7Ch+var_6C], edi
		mov	eax, [esp+7Ch+var_28]
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], ebp
		mov	eax, [esp+7Ch+var_24]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_verify
		test	eax, eax
		jz	loc_43FD04
		cmp	eax, 1
		jz	loc_43FE1F
		test	eax, eax
		js	loc_43F796
		mov	edi, 1
		xor	ebp, ebp
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43F964:				; CODE XREF: _pkeyutl_main+83Aj
		call	_BIO_write

loc_43F969:				; CODE XREF: _pkeyutl_main+B76j
		xor	edi, edi
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43F970:				; CODE XREF: _pkeyutl_main+820j
		mov	[esp+7Ch+var_6C], 0FFFFFFFFh
		mov	[esp+7Ch+var_70], 1
		mov	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], esi
		call	_ASN1_parse_dump
		test	eax, eax
		jnz	short loc_43F969
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	edi, edi
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43F9AC:				; CODE XREF: _pkeyutl_main+629j
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	esi, eax
		jmp	loc_43F469
; ---------------------------------------------------------------------------

loc_43F9CB:				; CODE XREF: _pkeyutl_main+435j
		mov	[esp+7Ch+var_30], edx
		mov	[esp+7Ch+var_78], offset aAPrivateKeyI_0 ; "A private key is needed for	this operat"...

loc_43F9D7:				; CODE XREF: _pkeyutl_main+E1Cj
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_5C], 0
		mov	edx, [esp+7Ch+var_30]
		jmp	loc_43F0E6
; ---------------------------------------------------------------------------

loc_43F9F5:				; CODE XREF: _pkeyutl_main+AEj
					; _pkeyutl_main+18Aj
		call	_usage
		jmp	loc_43EE58
; ---------------------------------------------------------------------------

loc_43F9FF:				; CODE XREF: _pkeyutl_main+9F9j
		mov	edi, offset aPubin_4 ; "-pubin"
		mov	ecx, 7
		mov	esi, ebp
		repe cmpsb
		jz	loc_43FCF5
		mov	edi, offset aCertin_0 ;	"-certin"
		mov	ecx, 8
		mov	esi, ebp
		repe cmpsb
		jz	loc_43FDFA
		mov	edi, offset aAsn1parse_0 ; "-asn1parse"
		mov	ecx, 0Bh
		mov	esi, ebp
		repe cmpsb
		jz	loc_43FE13
		mov	edi, offset aHexdump_0 ; "-hexdump"
		mov	ecx, 9
		mov	esi, ebp
		repe cmpsb
		jz	loc_43FE3B
		mov	[esp+7Ch+var_30], edx
		mov	[esp+7Ch+var_78], offset aSign_2 ; "-sign"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_43FE56
		mov	[esp+7Ch+var_78], offset aVerify_8 ; "-verify"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_43FE47
		mov	[esp+7Ch+var_78], offset aVerifyrecover	; "-verifyrecover"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_43FE9F
		mov	[esp+7Ch+var_78], offset aRev_0	; "-rev"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_43FE93
		mov	[esp+7Ch+var_78], offset aEncrypt_0 ; "-encrypt"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_43FEE6
		mov	[esp+7Ch+var_78], offset aDecrypt_1 ; "-decrypt"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_43FED7
		mov	[esp+7Ch+var_78], offset aDerive ; "-derive"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jz	loc_43FEC8
		mov	[esp+7Ch+var_78], offset aPkeyopt_1 ; "-pkeyopt"
		mov	[esp+7Ch+var_7C], ebp ;	char *
		call	_strcmp
		test	eax, eax
		jnz	loc_43F130
		mov	edx, [esp+7Ch+var_30]
		dec	edx
		jz	loc_43F130
		cmp	[esp+7Ch+var_5C], 0
		jz	loc_43FEAE
		mov	[esp+7Ch+var_30], edx
		lea	esi, [ebx+4]
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_pkey_ctrl_string
		test	eax, eax
		mov	edx, [esp+7Ch+var_30]
		jg	loc_43EF61
		mov	[esp+7Ch+var_78], offset aParameterSet_0 ; "parameter setting error\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_puts
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	edi, 1
		xor	ebp, ebp
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_43F14C
; ---------------------------------------------------------------------------
		align 10h

loc_43FBA0:				; CODE XREF: _pkeyutl_main+369j
		mov	[esp+7Ch+var_78], offset aPeerkeyCommand ; "-peerkey command before -inkey\n"
		mov	[esp+7Ch+var_7C], ebp
		call	_BIO_puts
		jmp	loc_43F130
; ---------------------------------------------------------------------------

loc_43FBB5:				; CODE XREF: _pkeyutl_main+669j
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aCanTOpenSignat ; "Can't open signature file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	di, 1
		xor	ebp, ebp
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43FBDD:				; CODE XREF: _pkeyutl_main+3AFj
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], offset aErrorReadingPe ; "Error reading peer key %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_7C], ebp
		call	_ERR_print_errors
		jmp	loc_43F130
; ---------------------------------------------------------------------------

loc_43FC03:				; CODE XREF: _pkeyutl_main+762j
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], eax
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_60], eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 0
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_sign
		jmp	loc_43F5B9
; ---------------------------------------------------------------------------

loc_43FC30:				; CODE XREF: _pkeyutl_main+283j
					; _pkeyutl_main+472j
		mov	[esp+7Ch+var_30], edx
		mov	[esp+7Ch+var_78], offset aErrorGettin_18 ; "Error getting password\n"
		jmp	loc_43F9D7
; ---------------------------------------------------------------------------

loc_43FC41:				; CODE XREF: _pkeyutl_main+753j
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], eax
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_60], eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 0
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_encrypt
		jmp	loc_43F5B9
; ---------------------------------------------------------------------------

loc_43FC6E:				; CODE XREF: _pkeyutl_main+A47j
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], eax
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_60], eax
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], 0
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_decrypt
		jmp	loc_43F5B9
; ---------------------------------------------------------------------------

loc_43FC9B:				; CODE XREF: _pkeyutl_main+7DBj
		mov	edx, [esp+7Ch+var_50]
		cmp	edx, 200h
		jz	loc_43FD8B
		cmp	edx, 400h
		jnz	loc_43F798
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebp
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_derive
		jmp	loc_43F633
; ---------------------------------------------------------------------------

loc_43FCD4:				; CODE XREF: _pkeyutl_main+698j
		mov	[esp+7Ch+var_78], offset aErrorReading_4 ; "Error reading signature data\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	edi, 1
		xor	ebp, ebp
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43FCF5:				; CODE XREF: _pkeyutl_main+BEDj
		mov	esi, ebx
		mov	[esp+7Ch+var_48], 2
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43FD04:				; CODE XREF: _pkeyutl_main+B21j
		mov	[esp+7Ch+var_78], offset aSignatureVer_2 ; "Signature Verification Failure\n"
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_puts
		mov	edi, 1
		xor	ebp, ebp
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43FD20:				; CODE XREF: _pkeyutl_main+643j
		mov	[esp+7Ch+var_78], offset aErrorCreatingO ; "Error Creating Output File\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	edi, 1
		xor	ebp, ebp
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43FD4E:				; CODE XREF: _pkeyutl_main+9A9j
		mov	[esp+7Ch+var_78], offset aNoSignatureFil ; "No signature file specified	for verify\"...
		jmp	loc_43EFCF
; ---------------------------------------------------------------------------

loc_43FD5B:				; CODE XREF: _pkeyutl_main+61Dj
		mov	[esp+7Ch+var_78], offset aErrorOpening_1 ; "Error Opening Input	File\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_puts
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	edi, 1
		xor	ebp, ebp
		xor	esi, esi
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43FD8B:				; CODE XREF: _pkeyutl_main+E85j
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], eax
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebp
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_decrypt
		jmp	loc_43F633
; ---------------------------------------------------------------------------

loc_43FDB0:				; CODE XREF: _pkeyutl_main+7D5j
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], eax
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebp
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_encrypt
		jmp	loc_43F633
; ---------------------------------------------------------------------------

loc_43FDD5:				; CODE XREF: _pkeyutl_main+7E4j
		mov	[esp+7Ch+var_6C], edi
		mov	[esp+7Ch+var_70], eax
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebp
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_EVP_PKEY_sign
		jmp	loc_43F633
; ---------------------------------------------------------------------------

loc_43FDFA:				; CODE XREF: _pkeyutl_main+C01j
		mov	esi, ebx
		mov	[esp+7Ch+var_48], 3
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43FE09:				; CODE XREF: _pkeyutl_main+6E0j
		mov	edi, 1
		jmp	loc_43F55A
; ---------------------------------------------------------------------------

loc_43FE13:				; CODE XREF: _pkeyutl_main+C15j
		mov	esi, ebx
		mov	[esp+7Ch+var_32], 1
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43FE1F:				; CODE XREF: _pkeyutl_main+B2Aj
		mov	[esp+7Ch+var_78], offset aSignatureVer_3 ; "Signature Verified Successfully\n"
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_puts
		mov	edi, 1
		xor	ebp, ebp
		jmp	loc_43F14C
; ---------------------------------------------------------------------------

loc_43FE3B:				; CODE XREF: _pkeyutl_main+C29j
		mov	esi, ebx
		mov	[esp+7Ch+var_31], 1
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43FE47:				; CODE XREF: _pkeyutl_main+C65j
		mov	esi, ebx
		mov	[esp+7Ch+var_50], 10h
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43FE56:				; CODE XREF: _pkeyutl_main+C49j
		mov	esi, ebx
		mov	[esp+7Ch+var_50], 8
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43FE65:				; CODE XREF: _pkeyutl_main+4D1j
		mov	[esp+7Ch+var_5C], 0
		jmp	loc_43F0E6
; ---------------------------------------------------------------------------

loc_43FE72:				; CODE XREF: _pkeyutl_main+6C9j
		mov	[esp+7Ch+var_78], offset aErrorReading_5 ; "Error reading input	Data\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_7C], 1 ; int
		call	_exit_0
; ---------------------------------------------------------------------------

loc_43FE93:				; CODE XREF: _pkeyutl_main+C9Dj
		mov	esi, ebx
		mov	[esp+7Ch+var_33], 1
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43FE9F:				; CODE XREF: _pkeyutl_main+C81j
		mov	esi, ebx
		mov	[esp+7Ch+var_50], 20h
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43FEAE:				; CODE XREF: _pkeyutl_main+D1Fj
		mov	[esp+7Ch+var_78], offset aPkeyoptCommand ; "-pkeyopt command before -inkey\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_puts
		jmp	loc_43F130
; ---------------------------------------------------------------------------

loc_43FEC8:				; CODE XREF: _pkeyutl_main+CF1j
		mov	esi, ebx
		mov	[esp+7Ch+var_50], 400h
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43FED7:				; CODE XREF: _pkeyutl_main+CD5j
		mov	esi, ebx
		mov	[esp+7Ch+var_50], 200h
		jmp	loc_43EF61
; ---------------------------------------------------------------------------

loc_43FEE6:				; CODE XREF: _pkeyutl_main+CB9j
		mov	esi, ebx
		mov	[esp+7Ch+var_50], 100h
		jmp	loc_43EF61
_pkeyutl_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _spkac_main
_spkac_main	proc near		; DATA XREF: .data:004551F0o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	[esp+7Ch+var_20], 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_4403EC

loc_43FF1C:				; CODE XREF: _spkac_main+509j
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], eax
		call	_load_config
		test	eax, eax
		jz	loc_440120
		mov	eax, [esp+7Ch+arg_4]
		mov	eax, [eax]
		mov	[esp+7Ch+var_50], eax
		mov	eax, [esp+7Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+7Ch+arg_4]
		add	eax, 4
		mov	[esp+7Ch+var_3C], 0
		mov	[esp+7Ch+var_54], 0
		mov	[esp+7Ch+var_4C], 0
		mov	[esp+7Ch+var_40], offset aDefault_2 ; "default"
		mov	[esp+7Ch+var_44], offset aSpkac_1 ; "SPKAC"
		mov	[esp+7Ch+var_58], 0
		mov	[esp+7Ch+var_5C], 0
		mov	[esp+7Ch+var_60], 0
		mov	[esp+7Ch+var_30], 0
		mov	[esp+7Ch+var_34], 0
		mov	[esp+7Ch+var_38], 0
		test	ebp, ebp
		jle	loc_440266
		mov	[esp+7Ch+var_48], 0
		jmp	short loc_43FFD5
; ---------------------------------------------------------------------------
		align 10h

loc_43FFC0:				; CODE XREF: _spkac_main+E5j
		dec	ebp
		jz	short loc_44001C
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+7Ch+var_60], eax

loc_43FFCD:				; CODE XREF: _spkac_main+2A1j
					; _spkac_main+2D1j ...
		dec	ebp
		lea	eax, [edx+4]
		test	ebp, ebp
		jle	short loc_440010

loc_43FFD5:				; CODE XREF: _spkac_main+BDj
					; _spkac_main+10Ej
		mov	edx, [eax]
		mov	esi, edx
		mov	edi, offset aIn_22 ; "-in"
		mov	ecx, 4
		repe cmpsb
		jz	short loc_43FFC0
		mov	edi, offset aOut_27 ; "-out"
		mov	esi, edx
		mov	ecx, 5
		repe cmpsb
		jnz	loc_440180
		dec	ebp
		jz	short loc_44001C
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+7Ch+var_5C], eax
		dec	ebp
		lea	eax, [edx+4]
		test	ebp, ebp
		jg	short loc_43FFD5

loc_440010:				; CODE XREF: _spkac_main+D3j
		mov	ebx, [esp+7Ch+var_48]
		test	ebx, ebx
		jz	loc_440266

loc_44001C:				; CODE XREF: _spkac_main+C1j
					; _spkac_main+FCj ...
		mov	eax, [esp+7Ch+var_50]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aSOptions ; "%s [options]\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aWhereOption_16 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aInArgInputF_10 ; " -in arg	    input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aOutArgOutpu_10 ; " -out arg	    output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aKeyArgCreateSp ; " -key arg	    create SPKAC using priv"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aPassinArgInp_4 ; " -passin arg    input file pass phrase "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aChallengeArgCh ; " -challenge	arg challenge string\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aSpkacArgAltern ; " -spkac arg	    alternative	SPKAC name\"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aNooutDonTPri_2 ; " -noout	    don't print SPKAC\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aPubkeyOutput_0 ; " -pubkey	    output public key\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aVerifyVerifySp ; " -verify	    verify SPKAC signature\"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset aEngineEUseE_20 ; " -engine e	    use	engine e, possibly "...

loc_440113:				; CODE XREF: _spkac_main+516j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf

loc_440120:				; CODE XREF: _spkac_main+2Ej
					; _spkac_main+416j
		xor	ebx, ebx
		xor	edi, edi
		xor	edx, edx
		xor	esi, esi
		xor	ebp, ebp
		mov	[esp+7Ch+var_60], 1

loc_440132:				; CODE XREF: _spkac_main+4C1j
					; _spkac_main+61Cj ...
		mov	[esp+7Ch+var_7C], edx
		call	_NCONF_free
		mov	[esp+7Ch+var_7C], edi
		call	_NETSCAPE_SPKI_free
		mov	[esp+7Ch+var_7C], ebp
		call	_BIO_free
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_free_all
		mov	[esp+7Ch+var_7C], ebx
		call	_EVP_PKEY_free
		mov	eax, [esp+7Ch+var_20]
		test	eax, eax
		jz	short loc_44016A
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_free

loc_44016A:				; CODE XREF: _spkac_main+260j
		mov	eax, [esp+7Ch+var_60]
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_440180:				; CODE XREF: _spkac_main+F5j
		mov	edi, offset aPassin_11 ; "-passin"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jnz	short loc_4401B0
		dec	ebp
		jz	loc_44001C
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+7Ch+var_58], eax
		jmp	loc_43FFCD
; ---------------------------------------------------------------------------
		align 10h

loc_4401B0:				; CODE XREF: _spkac_main+28Ej
		mov	edi, offset aKey_6 ; "-key"
		mov	esi, edx
		mov	ecx, 5
		repe cmpsb
		jnz	short loc_4401E0
		dec	ebp
		jz	loc_44001C
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+7Ch+var_54], eax
		jmp	loc_43FFCD
; ---------------------------------------------------------------------------
		align 10h

loc_4401E0:				; CODE XREF: _spkac_main+2BEj
		mov	edi, offset aChallenge ; "-challenge"
		mov	ecx, 0Bh
		mov	esi, edx
		repe cmpsb
		jnz	short loc_440210
		dec	ebp
		jz	loc_44001C
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+7Ch+var_4C], eax
		jmp	loc_43FFCD
; ---------------------------------------------------------------------------
		align 10h

loc_440210:				; CODE XREF: _spkac_main+2EEj
		mov	edi, offset aSpkac_2 ; "-spkac"
		mov	ecx, 7
		mov	esi, edx
		repe cmpsb
		jz	short loc_440250
		mov	edi, offset aSpksect ; "-spksect"
		mov	ecx, 9
		mov	esi, edx
		repe cmpsb
		jnz	loc_4403C6
		dec	ebp
		jz	loc_44001C
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+7Ch+var_40], eax
		jmp	loc_43FFCD
; ---------------------------------------------------------------------------
		align 10h

loc_440250:				; CODE XREF: _spkac_main+31Ej
		dec	ebp
		jz	loc_44001C
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+7Ch+var_44], eax
		jmp	loc_43FFCD
; ---------------------------------------------------------------------------

loc_440266:				; CODE XREF: _spkac_main+AFj
					; _spkac_main+116j
		call	_ERR_load_crypto_strings
		mov	[esp+7Ch+var_6C], 0 ; int
		lea	eax, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_70], eax ;	int
		mov	[esp+7Ch+var_74], 0 ; char *
		mov	eax, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], eax ;	char *
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax ;	int
		call	_app_passwd
		test	eax, eax
		jz	loc_44040E
		mov	[esp+7Ch+var_74], 0
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], eax
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_setup_engine
		mov	esi, [esp+7Ch+var_54]
		test	esi, esi
		jz	loc_44048E
		mov	edx, [esp+7Ch+var_20]
		mov	edi, offset asc_46C8DB ; "-"
		mov	ecx, 2
		repe cmpsb
		jnz	loc_440469
		xor	ecx, ecx

loc_4402E1:				; CODE XREF: _spkac_main+56Dj
		mov	[esp+7Ch+var_64], offset aPrivateKey_6 ; "private key"
		mov	[esp+7Ch+var_68], eax
		mov	[esp+7Ch+var_6C], edx
		mov	[esp+7Ch+var_70], 1
		mov	[esp+7Ch+var_74], 3
		mov	[esp+7Ch+var_78], ecx
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_load_key
		mov	ebx, eax
		test	eax, eax
		jz	loc_440120
		call	_NETSCAPE_SPKI_new
		mov	edi, eax
		mov	esi, [esp+7Ch+var_4C]
		test	esi, esi
		jz	short loc_440348
		mov	[esp+7Ch+var_7C], esi ;	char *
		call	_strlen
		mov	edx, [edi]
		mov	edx, [edx+4]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], edx
		call	_ASN1_STRING_set

loc_440348:				; CODE XREF: _spkac_main+429j
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], edi
		call	_NETSCAPE_SPKI_set_pubkey
		call	_EVP_md5
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], edi
		call	_NETSCAPE_SPKI_sign
		mov	[esp+7Ch+var_7C], edi
		call	_NETSCAPE_SPKI_b64_encode
		mov	ebp, eax
		mov	eax, [esp+7Ch+var_5C]
		test	eax, eax
		jz	loc_440554
		mov	[esp+7Ch+var_78], offset aW ; "w"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_file
		mov	esi, eax

loc_440391:				; CODE XREF: _spkac_main+66Ej
		test	esi, esi
		jz	loc_440521
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], offset aSpkacS ; "SPKAC=%s\n"
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_printf
		mov	[esp+7Ch+var_7C], ebp
		call	_CRYPTO_free
		xor	edx, edx
		xor	ebp, ebp
		mov	[esp+7Ch+var_60], 0
		jmp	loc_440132
; ---------------------------------------------------------------------------

loc_4403C6:				; CODE XREF: _spkac_main+32Ej
		mov	edi, offset aEngine_26 ; "-engine"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jnz	short loc_44041B
		dec	ebp
		jz	loc_44001C
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+7Ch+var_3C], eax
		jmp	loc_43FFCD
; ---------------------------------------------------------------------------

loc_4403EC:				; CODE XREF: _spkac_main+16j
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_43FF1C
; ---------------------------------------------------------------------------

loc_44040E:				; CODE XREF: _spkac_main+39Aj
		mov	[esp+7Ch+var_78], offset aErrorGettin_19 ; "Error getting password\n"
		jmp	loc_440113
; ---------------------------------------------------------------------------

loc_44041B:				; CODE XREF: _spkac_main+4D4j
		mov	edi, offset aNoout_15 ;	"-noout"
		mov	ecx, 7
		mov	esi, edx
		repe cmpsb
		jz	short loc_44045A
		mov	edi, offset aPubkey_1 ;	"-pubkey"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		jz	short loc_440472
		mov	edi, offset aVerify_9 ;	"-verify"
		mov	ecx, 8
		mov	esi, edx
		repe cmpsb
		mov	edx, eax
		jnz	short loc_440481
		mov	[esp+7Ch+var_38], 1
		jmp	loc_43FFCD
; ---------------------------------------------------------------------------

loc_44045A:				; CODE XREF: _spkac_main+529j
		mov	edx, eax
		mov	[esp+7Ch+var_34], 1
		jmp	loc_43FFCD
; ---------------------------------------------------------------------------

loc_440469:				; CODE XREF: _spkac_main+3D9j
		mov	ecx, [esp+7Ch+var_54]
		jmp	loc_4402E1
; ---------------------------------------------------------------------------

loc_440472:				; CODE XREF: _spkac_main+539j
		mov	edx, eax
		mov	[esp+7Ch+var_30], 1
		jmp	loc_43FFCD
; ---------------------------------------------------------------------------

loc_440481:				; CODE XREF: _spkac_main+54Bj
		mov	[esp+7Ch+var_48], 1
		jmp	loc_43FFCD
; ---------------------------------------------------------------------------

loc_44048E:				; CODE XREF: _spkac_main+3C3j
		mov	eax, [esp+7Ch+var_60]
		test	eax, eax
		jz	loc_440661
		mov	[esp+7Ch+var_78], offset aR_4 ;	"r"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_file
		mov	ebp, eax

loc_4404AC:				; CODE XREF: _spkac_main+778j
		test	ebp, ebp
		jz	loc_44062A
		mov	[esp+7Ch+var_7C], 0
		call	_NCONF_new
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], eax
		mov	[esp+7Ch+var_60], eax
		call	_NCONF_load_bio
		test	eax, eax
		mov	edx, [esp+7Ch+var_60]
		jnz	loc_440573
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_78], offset aErrorParsingCo ; "Error parsing config file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf

loc_4404FD:				; CODE XREF: _spkac_main+8D8j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		xor	edi, edi
		xor	esi, esi
		mov	[esp+7Ch+var_60], 1
		mov	edx, [esp+7Ch+var_5C]
		jmp	loc_440132
; ---------------------------------------------------------------------------

loc_440521:				; CODE XREF: _spkac_main+493j
		mov	[esp+7Ch+var_78], offset aErrorOpening_2 ; "Error opening output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	edx, edx
		xor	ebp, ebp
		mov	[esp+7Ch+var_60], 1
		jmp	loc_440132
; ---------------------------------------------------------------------------

loc_440554:				; CODE XREF: _spkac_main+479j
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	esi, eax
		jmp	loc_440391
; ---------------------------------------------------------------------------

loc_440573:				; CODE XREF: _spkac_main+5DEj
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_74], eax
		mov	eax, [esp+7Ch+var_40]
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edx
		mov	[esp+7Ch+var_60], edx
		call	_NCONF_get_string
		test	eax, eax
		mov	edx, [esp+7Ch+var_60]
		jz	loc_4407B7
		mov	[esp+7Ch+var_60], edx
		mov	[esp+7Ch+var_78], 0FFFFFFFFh
		mov	[esp+7Ch+var_7C], eax
		call	_NETSCAPE_SPKI_b64_decode
		mov	edi, eax
		test	eax, eax
		mov	edx, [esp+7Ch+var_60]
		jz	loc_44077C
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_60], edx
		test	eax, eax
		jz	loc_440759
		mov	[esp+7Ch+var_78], offset aW ; "w"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_file
		mov	esi, eax
		mov	edx, [esp+7Ch+var_60]

loc_4405E3:				; CODE XREF: _spkac_main+877j
		test	esi, esi
		jz	loc_440720
		mov	ecx, [esp+7Ch+var_34]
		test	ecx, ecx
		jz	loc_4406D0

loc_4405F7:				; CODE XREF: _spkac_main+7E4j
		mov	[esp+7Ch+var_60], edx
		mov	[esp+7Ch+var_7C], edi
		call	_NETSCAPE_SPKI_get_pubkey
		mov	ebx, eax
		mov	edx, [esp+7Ch+var_38]
		test	edx, edx
		mov	edx, [esp+7Ch+var_60]
		jnz	loc_44069E

loc_440615:				; CODE XREF: _spkac_main+7CBj
		mov	eax, [esp+7Ch+var_30]
		test	eax, eax
		jnz	short loc_44067D
		mov	[esp+7Ch+var_60], 0
		jmp	loc_440132
; ---------------------------------------------------------------------------

loc_44062A:				; CODE XREF: _spkac_main+5AEj
		mov	[esp+7Ch+var_78], offset aErrorOpening_3 ; "Error opening input	file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		xor	edi, edi
		xor	edx, edx
		xor	esi, esi
		mov	[esp+7Ch+var_60], 1
		jmp	loc_440132
; ---------------------------------------------------------------------------

loc_440661:				; CODE XREF: _spkac_main+594j
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	ebp, eax
		jmp	loc_4404AC
; ---------------------------------------------------------------------------

loc_44067D:				; CODE XREF: _spkac_main+71Bj
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], esi
		call	_PEM_write_bio_PUBKEY
		mov	[esp+7Ch+var_60], 0
		mov	edx, [esp+7Ch+var_5C]
		jmp	loc_440132
; ---------------------------------------------------------------------------

loc_44069E:				; CODE XREF: _spkac_main+70Fj
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], edi
		call	_NETSCAPE_SPKI_verify
		test	eax, eax
		mov	edx, [esp+7Ch+var_60]
		jle	short loc_4406E9
		mov	[esp+7Ch+var_78], offset aSignatureOk_1	; "Signature OK\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	edx, [esp+7Ch+var_60]
		jmp	loc_440615
; ---------------------------------------------------------------------------

loc_4406D0:				; CODE XREF: _spkac_main+6F1j
		mov	[esp+7Ch+var_60], edx
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], esi
		call	_NETSCAPE_SPKI_print
		mov	edx, [esp+7Ch+var_60]
		jmp	loc_4405F7
; ---------------------------------------------------------------------------

loc_4406E9:				; CODE XREF: _spkac_main+7B0j
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_78], offset aSignatureFailu ; "Signature Failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	[esp+7Ch+var_60], 1
		mov	edx, [esp+7Ch+var_5C]
		jmp	loc_440132
; ---------------------------------------------------------------------------

loc_440720:				; CODE XREF: _spkac_main+6E5j
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_78], offset aErrorOpening_2 ; "Error opening output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		mov	[esp+7Ch+var_60], 1
		mov	edx, [esp+7Ch+var_5C]
		jmp	loc_440132
; ---------------------------------------------------------------------------

loc_440759:				; CODE XREF: _spkac_main+6C7j
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	esi, eax
		mov	edx, [esp+7Ch+var_60]
		jmp	loc_4405E3
; ---------------------------------------------------------------------------

loc_44077C:				; CODE XREF: _spkac_main+6B7j
		mov	[esp+7Ch+var_5C], edx
		mov	[esp+7Ch+var_78], offset aErrorLoadingSp ; "Error loading SPKAC\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		xor	esi, esi
		mov	[esp+7Ch+var_60], 1
		mov	edx, [esp+7Ch+var_5C]
		jmp	loc_440132
; ---------------------------------------------------------------------------

loc_4407B7:				; CODE XREF: _spkac_main+695j
		mov	[esp+7Ch+var_5C], edx
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aCanTFindSpkacC ; "Can't find SPKAC called \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_4404FD
_spkac_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_smime_cb	proc near		; DATA XREF: _smime_main+1595o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_1C], ebx
		call	_X509_STORE_CTX_get_error
		cmp	eax, 2Bh
		jz	short loc_440810
		test	eax, eax
		jnz	short loc_440800
		cmp	[esp+1Ch+arg_0], 2
		jz	short loc_440810

loc_440800:				; CODE XREF: _smime_cb+17j
		mov	eax, [esp+1Ch+arg_0]
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_440810:				; CODE XREF: _smime_cb+13j
					; _smime_cb+1Ej
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], 0
		call	_policies_print
		mov	eax, [esp+1Ch+arg_0]
		add	esp, 18h
		pop	ebx
		retn
_smime_cb	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _smime_main
_smime_main	proc near		; DATA XREF: .data:004551FCo

var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0BCh
		mov	[esp+0CCh+var_2C], 0
		mov	[esp+0CCh+var_28], 0
		mov	[esp+0CCh+var_24], 0
		mov	[esp+0CCh+var_20], 0
		mov	eax, [esp+0CCh+arg_4]
		add	eax, 4
		mov	[esp+0CCh+var_30], eax
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_441494

loc_440885:				; CODE XREF: _smime_main+C78j
					; _smime_main+CA9j
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], ebx
		call	_load_config
		test	eax, eax
		jz	loc_440D00
		mov	eax, [esp+0CCh+var_28]
		mov	[esp+0CCh+var_90], 0
		mov	[esp+0CCh+var_7C], 3
		mov	[esp+0CCh+var_78], 6
		mov	[esp+0CCh+var_70], 6
		mov	[esp+0CCh+var_74], 0
		mov	[esp+0CCh+var_64], 0
		mov	[esp+0CCh+var_88], 0
		mov	[esp+0CCh+var_8C], 0
		mov	[esp+0CCh+var_94], 0
		mov	[esp+0CCh+var_48], 0
		mov	[esp+0CCh+var_4C], 0
		mov	[esp+0CCh+var_50], 0
		mov	[esp+0CCh+var_54], 0
		mov	[esp+0CCh+var_58], 0
		mov	[esp+0CCh+var_80], 40h
		mov	[esp+0CCh+var_98], 0
		mov	[esp+0CCh+var_5C], 0
		mov	[esp+0CCh+var_A0], 0
		mov	[esp+0CCh+var_6C], 0
		mov	[esp+0CCh+var_A4], 0
		mov	[esp+0CCh+var_A8], 0
		mov	[esp+0CCh+var_9C], 0
		mov	[esp+0CCh+var_84], 0
		mov	[esp+0CCh+var_60], 0
		mov	[esp+0CCh+var_68], 0
		xor	edx, edx

loc_440974:				; CODE XREF: _smime_main+2423j
		test	eax, eax
		jnz	loc_440A67
		lea	esi, [esi+0]

loc_440980:				; CODE XREF: _smime_main+231j
		mov	ebp, [esp+0CCh+var_30]
		mov	ebx, [ebp+0]
		test	ebx, ebx
		jz	loc_441430
		cmp	byte ptr [ebx],	2Dh
		jnz	loc_441430
		mov	edi, offset aEncrypt_1 ; "-encrypt"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_440A50
		mov	edi, offset aDecrypt_2 ; "-decrypt"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_440CE0
		mov	edi, offset aSign_3 ; "-sign"
		mov	ecx, 6
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_440CF0
		mov	edi, offset aResign ; "-resign"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_440E40
		mov	edi, offset aVerify_10 ; "-verify"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jnz	loc_4412F0
		mov	edx, 24h
		jmp	short loc_440A55
; ---------------------------------------------------------------------------
		align 10h

loc_440A50:				; CODE XREF: _smime_main+186j
		mov	edx, 11h

loc_440A55:				; CODE XREF: _smime_main+215j
					; _smime_main+4B5j ...
		add	ebp, 4
		mov	[esp+0CCh+var_30], ebp
		test	eax, eax
		jz	loc_440980

loc_440A67:				; CODE XREF: _smime_main+146j
		mov	ebx, edx
		and	ebx, 40h
		jz	loc_440E50

loc_440A72:				; CODE XREF: _smime_main+C0Dj
		mov	eax, [esp+0CCh+var_A0]
		test	eax, eax
		jz	loc_44172E
		mov	eax, [esp+0CCh+var_84]
		test	eax, eax
		jz	loc_441AE7

loc_440A8A:				; CODE XREF: _smime_main+F0Aj
		mov	eax, [esp+0CCh+var_A8]
		test	eax, eax
		jz	loc_441B1D

loc_440A96:				; CODE XREF: _smime_main+12FEj
		mov	[esp+0CCh+var_88], edx
		mov	eax, [esp+0CCh+var_84]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_push
		mov	eax, [esp+0CCh+var_A4]
		test	eax, eax
		mov	edx, [esp+0CCh+var_88]
		jz	loc_441B0B

loc_440ABE:				; CODE XREF: _smime_main+12E8j
		mov	eax, [esp+0CCh+var_A0]
		test	eax, eax
		jz	loc_441740

loc_440ACA:				; CODE XREF: _smime_main+F18j
		mov	[esp+0CCh+var_88], edx
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_push
		mov	edx, [esp+0CCh+var_88]

loc_440AE6:				; CODE XREF: _smime_main+F04j
		mov	ebp, [esp+0CCh+var_A8]
		test	ebp, ebp
		jz	loc_441ABA
		mov	eax, [esp+0CCh+var_28]
		mov	[esp+0CCh+var_88], 1
		mov	[esp+0CCh+var_A0], 0
		mov	[esp+0CCh+var_84], 0

loc_440B11:				; CODE XREF: _smime_main+CB6j
					; _smime_main+DAAj ...
		test	eax, eax
		jnz	loc_440E71
		mov	[esp+0CCh+var_40], edx
		mov	[esp+0CCh+var_C4], 0
		mov	eax, [esp+0CCh+var_90]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_setup_engine
		mov	[esp+0CCh+var_44], eax
		mov	[esp+0CCh+var_BC], 0 ; int
		lea	eax, [esp+0CCh+var_24]
		mov	[esp+0CCh+var_C0], eax ; int
		mov	[esp+0CCh+var_C4], 0 ; char *
		mov	eax, [esp+0CCh+var_94]
		mov	[esp+0CCh+var_C8], eax ; char *
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax ; int
		call	_app_passwd
		test	eax, eax
		mov	edx, [esp+0CCh+var_40]
		jz	loc_441721
		mov	eax, [esp+0CCh+var_88]
		test	eax, eax
		jnz	loc_441530

loc_440B8F:				; CODE XREF: _smime_main+D38j
					; _smime_main+D67j
		test	ebx, ebx
		jnz	short loc_440B98
		and	[esp+0CCh+var_80], 0FFFFFFBFh

loc_440B98:				; CODE XREF: _smime_main+361j
		test	dl, 10h
		jnz	loc_4414EB
		test	byte ptr [esp+0CCh+var_80], 80h
		jz	loc_4414F6

loc_440BAC:				; CODE XREF: _smime_main+CC0j
		mov	[esp+0CCh+var_40], offset aWb ;	"wb"

loc_440BB7:				; CODE XREF: _smime_main+CD1j
		mov	ebp, edx
		and	ebp, 20h
		jz	loc_4415DF
		cmp	[esp+0CCh+var_70], 1
		jz	loc_441B01
		mov	esi, offset aR_10 ; "r"

loc_440BD2:				; CODE XREF: _smime_main+DC2j
					; _smime_main+12D6j
		mov	[esp+0CCh+var_8C], 0

loc_440BDA:				; CODE XREF: _smime_main+DF2j
					; _smime_main+130Bj
		mov	eax, [esp+0CCh+var_6C]
		test	eax, eax
		jz	loc_4419CA
		mov	[esp+0CCh+var_94], edx
		mov	[esp+0CCh+var_B8], offset aCertificateF_1 ; "certificate file"
		mov	edx, [esp+0CCh+var_44]
		mov	[esp+0CCh+var_BC], edx
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+var_C4], 3
		mov	[esp+0CCh+var_C8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_load_certs
		mov	[esp+0CCh+var_90], eax
		test	eax, eax
		mov	edx, [esp+0CCh+var_94]
		jz	loc_441D22

loc_440C2E:				; CODE XREF: _smime_main+11A2j
		mov	eax, [esp+0CCh+var_9C]
		test	eax, eax
		jz	loc_441B40
		cmp	edx, 22h
		jz	loc_441BD4

loc_440C43:				; CODE XREF: _smime_main+1313j
		cmp	edx, 53h
		jz	loc_441A2B
		mov	[esp+0CCh+var_94], 0
		xor	edi, edi

loc_440C56:				; CODE XREF: _smime_main+125Ej
					; _smime_main+1343j
		mov	eax, [esp+0CCh+var_68]
		mov	[esp+0CCh+var_A0], edx
		test	eax, eax
		jz	loc_441C55
		mov	[esp+0CCh+var_C8], esi
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_new_file
		mov	[esp+0CCh+var_9C], eax
		test	eax, eax
		mov	edx, [esp+0CCh+var_A0]
		jz	loc_441D6E

loc_440C82:				; CODE XREF: _smime_main+1442j
		test	ebp, ebp
		jz	loc_44174D
		cmp	[esp+0CCh+var_70], 6
		jz	loc_442068
		cmp	[esp+0CCh+var_70], 3
		jz	loc_442035
		cmp	[esp+0CCh+var_70], 1
		jz	loc_441F94
		mov	[esp+0CCh+var_C8], offset aBadInputFor_11 ; "Bad input format for PKCS#7 file\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf

loc_440CC0:				; CODE XREF: _smime_main+155Bj
		mov	[esp+0CCh+var_A0], 0
		xor	esi, esi
		mov	[esp+0CCh+var_98], 0
		xor	ebp, ebp
		mov	ebx, 2
		jmp	loc_4412C1
; ---------------------------------------------------------------------------
		align 10h

loc_440CE0:				; CODE XREF: _smime_main+1A7j
		mov	edx, 22h
		jmp	loc_440A55
; ---------------------------------------------------------------------------
		align 10h

loc_440CF0:				; CODE XREF: _smime_main+1C8j
		mov	edx, 53h
		jmp	loc_440A55
; ---------------------------------------------------------------------------
		align 10h

loc_440D00:				; CODE XREF: _smime_main+67j
		mov	[esp+0CCh+var_98], 0
		xor	edi, edi
		mov	[esp+0CCh+var_8C], 0
		xor	esi, esi
		mov	[esp+0CCh+var_94], 0
		mov	ebx, 1
		mov	[esp+0CCh+var_A8], 0
		xor	ebp, ebp
		mov	[esp+0CCh+var_90], 0
		mov	[esp+0CCh+var_9C], 0
		mov	[esp+0CCh+var_A0], 0
		mov	[esp+0CCh+var_A4], 0

loc_440D4B:				; CODE XREF: _smime_main+AB6j
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_ERR_print_errors

loc_440D58:				; CODE XREF: _smime_main+AB0j
		mov	[esp+0CCh+var_C8], offset _X509_free
		mov	eax, [esp+0CCh+var_8C]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_pop_free
		mov	[esp+0CCh+var_C8], offset _X509_free
		mov	eax, [esp+0CCh+var_90]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_pop_free
		mov	eax, [esp+0CCh+var_20]
		test	eax, eax
		jz	short loc_440D93
		mov	[esp+0CCh+var_CC], eax
		call	_X509_VERIFY_PARAM_free

loc_440D93:				; CODE XREF: _smime_main+559j
		mov	eax, [esp+0CCh+var_A8]
		test	eax, eax
		jz	short loc_440DA3
		mov	[esp+0CCh+var_CC], eax
		call	_sk_free

loc_440DA3:				; CODE XREF: _smime_main+569j
		mov	eax, [esp+0CCh+var_A4]
		test	eax, eax
		jz	short loc_440DB3
		mov	[esp+0CCh+var_CC], eax
		call	_sk_free

loc_440DB3:				; CODE XREF: _smime_main+579j
		mov	eax, [esp+0CCh+var_98]
		mov	[esp+0CCh+var_CC], eax
		call	_X509_STORE_free
		mov	[esp+0CCh+var_CC], 0
		call	_X509_free
		mov	eax, [esp+0CCh+var_94]
		mov	[esp+0CCh+var_CC], eax
		call	_X509_free
		mov	[esp+0CCh+var_CC], esi
		call	_X509_free
		mov	[esp+0CCh+var_CC], edi
		call	_EVP_PKEY_free
		mov	[esp+0CCh+var_CC], ebp
		call	_PKCS7_free
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_free
		mov	eax, [esp+0CCh+var_2C]
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_free
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_free_all
		mov	eax, [esp+0CCh+var_24]
		test	eax, eax
		jz	short loc_440E29
		mov	[esp+0CCh+var_CC], eax
		call	_CRYPTO_free

loc_440E29:				; CODE XREF: _smime_main+5EFj
		mov	eax, ebx
		add	esp, 0BCh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_440E40:				; CODE XREF: _smime_main+1E9j
		mov	edx, 76h
		jmp	loc_440A55
; ---------------------------------------------------------------------------
		align 10h

loc_440E50:				; CODE XREF: _smime_main+23Cj
					; _smime_main+C07j
		mov	esi, [esp+0CCh+var_A4]
		test	esi, esi
		jz	loc_44145A

loc_440E5C:				; CODE XREF: _smime_main+C30j
		mov	[esp+0CCh+var_C8], offset aMultipleSigner ; "Multiple signers or keys not allowed\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_puts

loc_440E71:				; CODE XREF: _smime_main+2E3j
					; _smime_main+C5Fj ...
		mov	[esp+0CCh+var_C8], offset aUsageSmimeOpti ; "Usage smime [options] cert.pem ...\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aWhereOption_17 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aEncryptEncry_1 ; "-encrypt	    encrypt message\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aDecryptDecry_1 ; "-decrypt	    decrypt encrypted messag"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aSignSignMessag ; "-sign	    sign message\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aVerifyVerify_1 ; "-verify	    verify signed message\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aPk7outOutputPk ; "-pk7out	    output PKCS#7 structure\"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aDes3EncryptWit ; "-des3	    encrypt with triple	DES\"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aDesEncryptWith ; "-des	    encrypt with DES\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aSeedEncryptWit ; "-seed	    encrypt with SEED\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aRc240EncryptWi ; "-rc2-40	    encrypt with RC2-40	(def"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aRc264EncryptWi ; "-rc2-64	    encrypt with RC2-64\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aRc2128EncryptW ; "-rc2-128	    encrypt with RC2-128\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aAes128Aes192_4 ; "-aes128, -aes192, -aes256\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aEncryptPemO_11 ; "		    encrypt PEM	output with "...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aCamellia128C_5 ; "-camellia128, -camellia192, -camellia25"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aEncryptPemO_12 ; "		    encrypt PEM	output with "...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aNointernDonTSe ; "-nointern	    don't search certificate"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aNosigsDonTVeri ; "-nosigs	    don't verify message sig"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aNoverifyDonTVe ; "-noverify	    don't verify signers cer"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aNocertsDonTInc ; "-nocerts	    don't include signers ce"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aNodetachUseOpa ; "-nodetach	    use	opaque signing\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aNoattrDonTIncl ; "-noattr	    don't include any signed"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aBinaryDonTTran ; "-binary	    don't translate message "...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aCertfileFileOt ; "-certfile file other certificates file\"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aSignerFileSign ; "-signer file   signer certificate file\"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aRecipFileRecip ; "-recip  file   recipient certificate fi"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aInFileInputF_5 ; "-in file	    input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aInformArgIn_10 ; "-inform arg    input format SMIME (defa"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aInkeyFileInp_1 ; "-inkey file    input private key (if no"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aKeyformArgInpu ; "-keyform arg   input private key format"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aOutFileOutpu_8 ; "-out file	    output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aOutformArgOu_9 ; "-outform arg   output format SMIME	(def"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aContentFileSup ; "-content file  supply or override conte"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aToAddrToAddres ; "-to addr	    to address\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aFromAdFromAddr ; "-from ad	    from address\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aSubjectSSubjec ; "-subject s	    subject\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aTextIncludeOrD ; "-text	    include or delete text M"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aCapathDirTrust ; "-CApath dir    trusted certificates dir"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aCafileFileTrus ; "-CAfile file   trusted certificates fil"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aNo_alt_chain_1 ; "-no_alt_chains only ever use the first "...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aCrl_checkChe_0 ; "-crl_check	    check revocation status "...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aCrl_check_al_0 ; "-crl_check_all check revocation status "...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aEngineEUseE_21 ; "-engine e	    use	engine e, possibly a"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aPassinArgInp_5 ; "-passin arg    input file pass phrase s"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C0], 3Bh
		mov	[esp+0CCh+var_C4], 3Bh
		mov	[esp+0CCh+var_C8], offset aRandFileCfil_7 ; "-rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aLoadTheFileO_5 ; "		    load the file (or the fi"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aTheRandomNum_5 ; "		    the	random number genera"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_C8], offset aCert_pemRecipi ; "cert.pem	    recipient certificate(s)"...

loc_441279:				; CODE XREF: _smime_main+EF9j
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_A0], 0
		mov	[esp+0CCh+var_9C], 0
		mov	[esp+0CCh+var_90], 0
		mov	[esp+0CCh+var_8C], 0
		xor	edi, edi
		xor	esi, esi
		mov	[esp+0CCh+var_94], 0
		mov	[esp+0CCh+var_98], 0
		xor	ebp, ebp
		mov	ebx, 1

loc_4412C1:				; CODE XREF: _smime_main+4A9j
					; _smime_main+E9Cj ...
		mov	eax, [esp+0CCh+var_88]
		test	eax, eax
		jz	short loc_4412DE
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], 0
		call	_app_RAND_write_file

loc_4412DE:				; CODE XREF: _smime_main+A97j
		test	ebx, ebx
		jz	loc_440D58
		jmp	loc_440D4B
; ---------------------------------------------------------------------------
		align 10h

loc_4412F0:				; CODE XREF: _smime_main+20Aj
		mov	edi, offset aPk7out ; "-pk7out"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_441450
		mov	edi, offset aDes3_2 ; "-des3"
		mov	ecx, 6
		mov	esi, ebx
		repe cmpsb
		jz	loc_44159C
		mov	edi, offset aDes_4 ; "-des"
		mov	ecx, 5
		mov	esi, ebx
		repe cmpsb
		jz	loc_4416F7
		mov	edi, offset aSeed_6 ; "-seed"
		mov	ecx, 6
		mov	esi, ebx
		repe cmpsb
		jz	loc_441506
		mov	edi, offset aRc240 ; "-rc2-40"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jz	loc_4419D7
		mov	edi, offset aRc2128 ; "-rc2-128"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jz	loc_441A01
		mov	edi, offset aRc264 ; "-rc2-64"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jz	loc_441B80
		mov	edi, offset aAes128_2 ;	"-aes128"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jz	loc_441C87
		mov	edi, offset aAes192_2 ;	"-aes192"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jz	loc_441D44
		mov	edi, offset aAes256_2 ;	"-aes256"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jz	loc_441E4C
		mov	edi, offset aCamellia128_2 ; "-camellia128"
		mov	ecx, 0Dh
		mov	esi, ebx
		repe cmpsb
		jz	loc_441ED0
		mov	edi, offset aCamellia192_2 ; "-camellia192"
		mov	ecx, 0Dh
		mov	esi, ebx
		repe cmpsb
		jz	loc_44213C
		mov	edi, offset aCamellia256_2 ; "-camellia256"
		mov	ecx, 0Dh
		mov	esi, ebx
		repe cmpsb
		jz	loc_4421B0
		mov	edi, offset aText_14 ; "-text"
		mov	ecx, 6
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jnz	loc_442189
		or	[esp+0CCh+var_80], 1
		jmp	loc_440A55
; ---------------------------------------------------------------------------
		align 10h

loc_441430:				; CODE XREF: _smime_main+15Cj
					; _smime_main+165j
		xor	eax, eax
		mov	ebx, edx
		and	ebx, 40h
		jz	loc_440E50
		jmp	loc_440A72
; ---------------------------------------------------------------------------
		align 10h

loc_441450:				; CODE XREF: _smime_main+ADBj
		mov	edx, 35h
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_44145A:				; CODE XREF: _smime_main+626j
		mov	ecx, [esp+0CCh+var_A8]
		test	ecx, ecx
		jnz	loc_440E5C
		cmp	edx, 22h
		jz	loc_4415C6
		cmp	edx, 11h
		jz	loc_4416D1
		test	edx, edx
		jnz	short loc_4414DE
		mov	[esp+0CCh+var_28], 1

loc_441487:				; CODE XREF: _smime_main+12B2j
					; _smime_main+1AD6j
		mov	[esp+0CCh+var_A8], 0
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_441494:				; CODE XREF: _smime_main+4Fj
		call	_BIO_s_file
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_440885
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+0CCh+var_C0], edx
		mov	[esp+0CCh+var_C4], 10h
		mov	[esp+0CCh+var_C8], 6Ah
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_440885
; ---------------------------------------------------------------------------

loc_4414DE:				; CODE XREF: _smime_main+C4Aj
		mov	edi, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_A4], edi
		jmp	loc_440B11
; ---------------------------------------------------------------------------

loc_4414EB:				; CODE XREF: _smime_main+36Bj
		cmp	[esp+0CCh+var_78], 1
		jz	loc_440BAC

loc_4414F6:				; CODE XREF: _smime_main+376j
		mov	[esp+0CCh+var_40], offset aW_0 ; "w"
		jmp	loc_440BB7
; ---------------------------------------------------------------------------

loc_441506:				; CODE XREF: _smime_main+B17j
		mov	[esp+0CCh+var_44], edx
		call	_EVP_seed_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_441530:				; CODE XREF: _smime_main+359j
		mov	[esp+0CCh+var_90], edx
		mov	esi, [esp+0CCh+var_8C]
		test	esi, esi
		setnz	cl
		xor	eax, eax
		mov	al, cl
		mov	[esp+0CCh+var_94], ecx
		mov	[esp+0CCh+var_C4], eax
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], 0
		call	_app_RAND_load_file
		mov	ecx, [esp+0CCh+var_94]
		test	cl, cl
		mov	edx, [esp+0CCh+var_90]
		jz	loc_440B8F
		mov	[esp+0CCh+var_94], edx
		mov	[esp+0CCh+var_CC], esi
		call	_app_RAND_load_files
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], offset aLdSemiRandom_8 ; "%ld semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	edx, [esp+0CCh+var_94]
		jmp	loc_440B8F
; ---------------------------------------------------------------------------

loc_44159C:				; CODE XREF: _smime_main+AEFj
		mov	[esp+0CCh+var_44], edx
		call	_EVP_des_ede3_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4415C6:				; CODE XREF: _smime_main+C39j
		mov	edi, [esp+0CCh+var_9C]
		test	edi, edi
		jz	loc_441BB7
		mov	esi, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_A4], esi
		jmp	loc_440B11
; ---------------------------------------------------------------------------

loc_4415DF:				; CODE XREF: _smime_main+38Cj
		test	byte ptr [esp+0CCh+var_80], 80h
		jnz	loc_4419C0
		mov	esi, offset aR_10 ; "r"

loc_4415EF:				; CODE XREF: _smime_main+1195j
		cmp	edx, 11h
		jnz	loc_440BD2
		mov	eax, [esp+0CCh+var_98]
		test	eax, eax
		jz	loc_442173

loc_441604:				; CODE XREF: _smime_main+1954j
		mov	[esp+0CCh+var_94], edx
		call	_sk_new_null
		mov	edi, eax
		mov	[esp+0CCh+var_8C], eax
		mov	eax, [esp+0CCh+var_30]
		mov	eax, [eax]
		test	eax, eax
		mov	edx, [esp+0CCh+var_94]
		jz	loc_440BDA
		mov	[esp+0CCh+var_90], esi
		mov	esi, [esp+0CCh+var_44]
		jmp	short loc_441668
; ---------------------------------------------------------------------------
		align 10h

loc_441640:				; CODE XREF: _smime_main+E67j
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], edi
		call	_sk_push
		mov	eax, [esp+0CCh+var_30]
		lea	edx, [eax+4]
		mov	[esp+0CCh+var_30], edx
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_441B33

loc_441668:				; CODE XREF: _smime_main+E03j
		mov	[esp+0CCh+var_B8], offset aRecipientCerti ; "recipient certificate file"
		mov	[esp+0CCh+var_BC], esi
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+var_C4], 3
		mov	[esp+0CCh+var_C8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_load_cert
		test	eax, eax
		jnz	short loc_441640
		mov	[esp+0CCh+var_A0], 0
		mov	[esp+0CCh+var_9C], 0
		mov	[esp+0CCh+var_90], 0

loc_4416B1:				; CODE XREF: _smime_main+150Fj
		xor	edi, edi
		xor	esi, esi
		mov	[esp+0CCh+var_94], 0
		mov	[esp+0CCh+var_98], 0
		xor	ebp, ebp
		mov	ebx, 2
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_4416D1:				; CODE XREF: _smime_main+C42j
		mov	ecx, [esp+0CCh+var_30]
		mov	ecx, [ecx]
		test	ecx, ecx
		jz	loc_4420A3
		mov	edi, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_A4], edi
		mov	[esp+0CCh+var_88], 1
		jmp	loc_440B11
; ---------------------------------------------------------------------------

loc_4416F7:				; CODE XREF: _smime_main+B03j
		mov	[esp+0CCh+var_44], edx
		call	_EVP_des_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_441721:				; CODE XREF: _smime_main+34Dj
		mov	[esp+0CCh+var_C8], offset aErrorGettin_20 ; "Error getting password\n"
		jmp	loc_441279
; ---------------------------------------------------------------------------

loc_44172E:				; CODE XREF: _smime_main+248j
		mov	eax, [esp+0CCh+var_84]
		test	eax, eax
		jz	loc_440AE6
		jmp	loc_440A8A
; ---------------------------------------------------------------------------
		align 10h

loc_441740:				; CODE XREF: _smime_main+294j
		mov	eax, [esp+0CCh+var_84]
		mov	[esp+0CCh+var_A0], eax
		jmp	loc_440ACA
; ---------------------------------------------------------------------------

loc_44174D:				; CODE XREF: _smime_main+454j
		xor	ebp, ebp

loc_44174F:				; CODE XREF: _smime_main+1790j
					; _smime_main+17C6j
		mov	eax, [esp+0CCh+var_60]
		mov	[esp+0CCh+var_70], edx
		test	eax, eax
		jz	loc_441E76
		mov	edx, [esp+0CCh+var_40]
		mov	[esp+0CCh+var_C8], edx
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_new_file
		mov	[esp+0CCh+var_A0], eax
		test	eax, eax
		mov	edx, [esp+0CCh+var_70]
		jz	loc_441F63

loc_441782:				; CODE XREF: _smime_main+1666j
		cmp	edx, 24h
		jz	loc_441D90
		cmp	edx, 11h
		jz	loc_441CB1
		test	ebx, ebx
		jz	loc_441BAA
		cmp	edx, 53h
		jz	loc_441EFA
		mov	[esp+0CCh+var_98], 0

loc_4417AD:				; CODE XREF: _smime_main+15C6j
		or	[esp+0CCh+var_80], 8000h

loc_4417B5:				; CODE XREF: _smime_main+172Ej
		xor	ebx, ebx
		mov	[esp+0CCh+var_6C], edx
		mov	[esp+0CCh+var_70], ebp
		jmp	loc_4418BE
; ---------------------------------------------------------------------------
		align 10h

loc_4417D0:				; CODE XREF: _smime_main+109Cj
		mov	[esp+0CCh+var_C8], ebx
		mov	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_value
		mov	ebp, eax
		mov	[esp+0CCh+var_84], eax
		mov	[esp+0CCh+var_C8], ebx
		mov	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_value
		mov	esi, eax
		mov	[esp+0CCh+var_B8], offset aSignerCertific ; "signer certificate"
		mov	eax, [esp+0CCh+var_44]
		mov	[esp+0CCh+var_BC], eax
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+var_C4], 3
		mov	[esp+0CCh+var_C8], ebp
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_load_cert
		mov	ebp, eax
		test	eax, eax
		jz	loc_441C77
		mov	[esp+0CCh+var_B4], offset aSigningKeyFile ; "signing key file"
		mov	eax, [esp+0CCh+var_44]
		mov	[esp+0CCh+var_B8], eax
		mov	eax, [esp+0CCh+var_24]
		mov	[esp+0CCh+var_BC], eax
		mov	[esp+0CCh+var_C0], 0
		mov	eax, [esp+0CCh+var_7C]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], esi
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_load_key
		mov	edi, eax
		test	eax, eax
		jz	loc_441C77
		mov	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_BC], eax
		mov	eax, [esp+0CCh+var_74]
		mov	[esp+0CCh+var_C0], eax
		mov	[esp+0CCh+var_C4], edi
		mov	[esp+0CCh+var_C8], ebp
		mov	eax, [esp+0CCh+var_70]
		mov	[esp+0CCh+var_CC], eax
		call	_PKCS7_sign_add_signer
		test	eax, eax
		jz	loc_441C77
		mov	[esp+0CCh+var_CC], ebp
		call	_X509_free
		mov	[esp+0CCh+var_CC], edi
		call	_EVP_PKEY_free
		inc	ebx
		xor	edi, edi

loc_4418BE:				; CODE XREF: _smime_main+F8Fj
		mov	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_num
		cmp	ebx, eax
		jl	loc_4417D0
		mov	edx, [esp+0CCh+var_6C]
		mov	ebp, [esp+0CCh+var_70]
		cmp	edx, 53h
		jz	loc_4422A4

loc_4418E3:				; CODE XREF: _smime_main+1382j
		test	ebp, ebp
		jz	loc_441CFF
		cmp	edx, 22h
		jz	loc_441E9B
		cmp	edx, 24h
		jz	loc_441E04
		cmp	edx, 35h
		jz	loc_44221C

loc_441906:				; CODE XREF: _smime_main+14C9j
		mov	eax, [esp+0CCh+var_58]
		test	eax, eax
		jz	short loc_44192E
		mov	[esp+0CCh+var_84], edx
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], offset aToS ; "To: %s\n"
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	edx, [esp+0CCh+var_84]

loc_44192E:				; CODE XREF: _smime_main+10DCj
		mov	eax, [esp+0CCh+var_54]
		test	eax, eax
		jz	short loc_441956
		mov	[esp+0CCh+var_84], edx
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], offset aFromS ; "From: %s\n"
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	edx, [esp+0CCh+var_84]

loc_441956:				; CODE XREF: _smime_main+1104j
		mov	eax, [esp+0CCh+var_50]
		test	eax, eax
		jz	short loc_44197E
		mov	[esp+0CCh+var_84], edx
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], offset aSubjectS_2 ;	"Subject: %s\n"
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	edx, [esp+0CCh+var_84]

loc_44197E:				; CODE XREF: _smime_main+112Cj
		cmp	[esp+0CCh+var_78], 6
		jz	loc_4420B0
		cmp	[esp+0CCh+var_78], 3
		jz	loc_442235
		cmp	[esp+0CCh+var_78], 1
		jz	loc_442113
		mov	[esp+0CCh+var_C8], offset aBadOutputFo_12 ; "Bad output	format for PKCS#7 file\n"

loc_4419A7:				; CODE XREF: _smime_main+1617j
					; _smime_main+193Ej
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		xor	esi, esi
		mov	ebx, 4
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_4419C0:				; CODE XREF: _smime_main+DB4j
		mov	esi, offset aRb_0 ; "rb"
		jmp	loc_4415EF
; ---------------------------------------------------------------------------

loc_4419CA:				; CODE XREF: _smime_main+3B0j
		mov	[esp+0CCh+var_90], 0
		jmp	loc_440C2E
; ---------------------------------------------------------------------------

loc_4419D7:				; CODE XREF: _smime_main+B2Bj
		mov	[esp+0CCh+var_44], edx
		call	_EVP_rc2_40_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_441A01:				; CODE XREF: _smime_main+B3Fj
		mov	[esp+0CCh+var_44], edx
		call	_EVP_rc2_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_441A2B:				; CODE XREF: _smime_main+416j
		mov	eax, [esp+0CCh+var_A0]
		test	eax, eax
		jz	loc_44208E
		mov	[esp+0CCh+var_94], 0

loc_441A3F:				; CODE XREF: _smime_main+1327j
					; _smime_main+133Bj
		mov	[esp+0CCh+var_9C], edx
		mov	[esp+0CCh+var_B4], offset aSigningKeyFile ; "signing key file"
		mov	eax, [esp+0CCh+var_44]
		mov	[esp+0CCh+var_B8], eax
		mov	eax, [esp+0CCh+var_24]
		mov	[esp+0CCh+var_BC], eax
		mov	[esp+0CCh+var_C0], 0
		mov	eax, [esp+0CCh+var_7C]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_load_key
		mov	edi, eax
		test	eax, eax
		mov	edx, [esp+0CCh+var_9C]
		jnz	loc_440C56
		mov	[esp+0CCh+var_A0], 0
		mov	[esp+0CCh+var_9C], 0
		xor	esi, esi
		mov	[esp+0CCh+var_98], 0
		xor	ebp, ebp
		mov	ebx, 2
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_441ABA:				; CODE XREF: _smime_main+2BCj
		mov	[esp+0CCh+var_C8], offset aNoSignerCertif ; "No	signer certificate specified\n"

loc_441AC2:				; CODE XREF: _smime_main+187Bj
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_28], 1
		mov	[esp+0CCh+var_88], 1
		jmp	loc_441487
; ---------------------------------------------------------------------------

loc_441AE7:				; CODE XREF: _smime_main+254j
					; _smime_main+20BCj
		mov	[esp+0CCh+var_C8], offset aIllegalInkeyWi ; "Illegal -inkey without -signer\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_puts
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_441B01:				; CODE XREF: _smime_main+397j
		mov	esi, offset aRb_0 ; "rb"
		jmp	loc_440BD2
; ---------------------------------------------------------------------------

loc_441B0B:				; CODE XREF: _smime_main+288j
		call	_sk_new_null
		mov	[esp+0CCh+var_A4], eax
		mov	edx, [esp+0CCh+var_88]
		jmp	loc_440ABE
; ---------------------------------------------------------------------------

loc_441B1D:				; CODE XREF: _smime_main+260j
		mov	[esp+0CCh+var_88], edx
		call	_sk_new_null
		mov	[esp+0CCh+var_A8], eax
		mov	edx, [esp+0CCh+var_88]
		jmp	loc_440A96
; ---------------------------------------------------------------------------

loc_441B33:				; CODE XREF: _smime_main+E32j
		mov	edx, [esp+0CCh+var_94]
		mov	esi, [esp+0CCh+var_90]
		jmp	loc_440BDA
; ---------------------------------------------------------------------------

loc_441B40:				; CODE XREF: _smime_main+404j
		cmp	edx, 22h
		jnz	loc_440C43
		mov	[esp+0CCh+var_94], 0

loc_441B51:				; CODE XREF: _smime_main+13EAj
		mov	eax, [esp+0CCh+var_A0]
		test	eax, eax
		jnz	loc_441A3F
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_A0], eax

loc_441B65:				; CODE XREF: _smime_main+186Ej
		mov	edi, [esp+0CCh+var_A0]
		test	edi, edi
		jnz	loc_441A3F
		xor	edi, edi
		jmp	loc_440C56
; ---------------------------------------------------------------------------
		align 10h

loc_441B80:				; CODE XREF: _smime_main+B53j
		mov	[esp+0CCh+var_44], edx
		call	_EVP_rc2_64_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_441BAA:				; CODE XREF: _smime_main+F66j
		mov	[esp+0CCh+var_98], 0
		jmp	loc_4418E3
; ---------------------------------------------------------------------------

loc_441BB7:				; CODE XREF: _smime_main+D9Cj
		mov	esi, [esp+0CCh+var_A0]
		test	esi, esi
		jz	loc_4422E6
		mov	edi, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_A4], edi
		mov	[esp+0CCh+var_A8], edi
		jmp	loc_440B11
; ---------------------------------------------------------------------------

loc_441BD4:				; CODE XREF: _smime_main+40Dj
		mov	[esp+0CCh+var_6C], edx
		mov	[esp+0CCh+var_B8], offset aRecipientCerti ; "recipient certificate file"
		mov	eax, [esp+0CCh+var_44]
		mov	[esp+0CCh+var_BC], eax
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+var_C4], 3
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_load_cert
		mov	[esp+0CCh+var_94], eax
		test	eax, eax
		mov	edx, [esp+0CCh+var_6C]
		jnz	loc_441B51
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_ERR_print_errors
		mov	[esp+0CCh+var_A0], 0
		mov	[esp+0CCh+var_9C], 0
		xor	edi, edi
		xor	esi, esi
		mov	[esp+0CCh+var_98], 0
		xor	ebp, ebp
		mov	ebx, 2
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_441C55:				; CODE XREF: _smime_main+430j
		mov	[esp+0CCh+var_C8], 0
		mov	eax, ds:__imp___iob
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_new_fp
		mov	[esp+0CCh+var_9C], eax
		mov	edx, [esp+0CCh+var_A0]
		jmp	loc_440C82
; ---------------------------------------------------------------------------

loc_441C77:				; CODE XREF: _smime_main+1000j
					; _smime_main+1049j ...
		mov	esi, ebp
		mov	ebp, [esp+0CCh+var_70]
		mov	ebx, 3
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_441C87:				; CODE XREF: _smime_main+B67j
		mov	[esp+0CCh+var_44], edx
		call	_EVP_aes_128_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_441CB1:				; CODE XREF: _smime_main+F5Ej
		mov	ebx, [esp+0CCh+var_64]
		test	ebx, ebx
		jz	short loc_441CC1
		or	[esp+0CCh+var_80], 1000h

loc_441CC1:				; CODE XREF: _smime_main+1487j
		mov	[esp+0CCh+var_84], edx
		mov	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_C0], eax
		mov	eax, [esp+0CCh+var_98]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, [esp+0CCh+var_8C]
		mov	[esp+0CCh+var_CC], eax
		call	_PKCS7_encrypt
		mov	ebp, eax
		mov	[esp+0CCh+var_98], 0
		mov	edx, [esp+0CCh+var_84]

loc_441CF7:				; CODE XREF: _smime_main+1A7Cj
					; _smime_main+1AA4j
		test	ebp, ebp
		jnz	loc_441906

loc_441CFF:				; CODE XREF: _smime_main+10B5j
					; _smime_main+15CEj
		mov	[esp+0CCh+var_C8], offset aErrorCreatingP ; "Error creating PKCS#7 structure\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		xor	esi, esi
		xor	ebp, ebp
		mov	ebx, 3
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_441D22:				; CODE XREF: _smime_main+3F8j
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_ERR_print_errors
		mov	[esp+0CCh+var_A0], 0
		mov	[esp+0CCh+var_9C], 0
		jmp	loc_4416B1
; ---------------------------------------------------------------------------

loc_441D44:				; CODE XREF: _smime_main+B7Bj
		mov	[esp+0CCh+var_44], edx
		call	_EVP_aes_192_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_441D6E:				; CODE XREF: _smime_main+44Cj
		mov	eax, [esp+0CCh+var_68]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], offset aCanTOpenInpu_2 ; "Can't open input file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		jmp	loc_440CC0
; ---------------------------------------------------------------------------

loc_441D90:				; CODE XREF: _smime_main+F55j
		mov	[esp+0CCh+var_70], edx
		mov	eax, [esp+0CCh+var_48]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+var_4C]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_setup_verify
		mov	esi, eax
		mov	[esp+0CCh+var_98], eax
		test	eax, eax
		jz	loc_442210
		mov	[esp+0CCh+var_C8], offset _smime_cb
		mov	[esp+0CCh+var_CC], eax
		call	_X509_STORE_set_verify_cb
		mov	eax, [esp+0CCh+var_20]
		test	eax, eax
		mov	edx, [esp+0CCh+var_70]
		jz	short loc_441DF4
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], esi
		call	_X509_STORE_set1_param
		mov	edx, [esp+0CCh+var_70]

loc_441DF4:				; CODE XREF: _smime_main+15B2j
		test	ebx, ebx
		jnz	loc_4417AD
		test	ebp, ebp
		jz	loc_441CFF

loc_441E04:				; CODE XREF: _smime_main+10C7j
		mov	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_B8], eax
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_BC], eax
		mov	eax, [esp+0CCh+var_2C]
		mov	[esp+0CCh+var_C0], eax
		mov	eax, [esp+0CCh+var_98]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+var_90]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebp
		call	_PKCS7_verify
		test	eax, eax
		jnz	loc_44230B
		mov	[esp+0CCh+var_C8], offset aVerification_0 ; "Verification failure\n"
		jmp	loc_4419A7
; ---------------------------------------------------------------------------

loc_441E4C:				; CODE XREF: _smime_main+B8Fj
		mov	[esp+0CCh+var_44], edx
		call	_EVP_aes_256_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_441E76:				; CODE XREF: _smime_main+F29j
		mov	[esp+0CCh+var_C8], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_new_fp
		mov	[esp+0CCh+var_A0], eax
		mov	edx, [esp+0CCh+var_70]
		jmp	loc_441782
; ---------------------------------------------------------------------------

loc_441E9B:				; CODE XREF: _smime_main+10BEj
		mov	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_BC], eax
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_C0], eax
		mov	eax, [esp+0CCh+var_94]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], edi
		mov	[esp+0CCh+var_CC], ebp
		call	_PKCS7_decrypt
		test	eax, eax
		jz	loc_442166
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_441ED0:				; CODE XREF: _smime_main+BA3j
		mov	[esp+0CCh+var_44], edx
		call	_EVP_camellia_128_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_441EFA:				; CODE XREF: _smime_main+F6Fj
		test	byte ptr [esp+0CCh+var_80], 40h
		jz	loc_44226A
		cmp	[esp+0CCh+var_78], 6
		jz	loc_442276

loc_441F10:				; CODE XREF: _smime_main+1A40j
					; _smime_main+1A4Ej
		mov	[esp+0CCh+var_70], edx
		or	[esp+0CCh+var_80], 4000h
		mov	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_BC], eax
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_C0], eax
		mov	eax, [esp+0CCh+var_90]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], 0
		mov	[esp+0CCh+var_CC], 0
		call	_PKCS7_sign
		mov	ebp, eax
		test	eax, eax
		jz	loc_442290
		mov	[esp+0CCh+var_98], 0
		mov	edx, [esp+0CCh+var_70]
		jmp	loc_4417B5
; ---------------------------------------------------------------------------

loc_441F63:				; CODE XREF: _smime_main+F4Cj
		mov	eax, [esp+0CCh+var_60]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], offset aCanTOpenOutp_4 ; "Can't open output file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		xor	esi, esi
		mov	[esp+0CCh+var_98], 0
		mov	ebx, 2
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_441F94:				; CODE XREF: _smime_main+475j
		mov	[esp+0CCh+var_A0], edx
		mov	[esp+0CCh+var_C8], 0
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_CC], eax
		call	_d2i_PKCS7_bio
		mov	ebp, eax
		mov	edx, [esp+0CCh+var_A0]

loc_441FB2:				; CODE XREF: _smime_main+1833j
					; _smime_main+1859j
		test	ebp, ebp
		jz	loc_4420E2
		mov	esi, [esp+0CCh+var_5C]
		test	esi, esi
		jz	loc_44174F
		mov	[esp+0CCh+var_A0], edx
		mov	eax, [esp+0CCh+var_2C]
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_free
		mov	[esp+0CCh+var_C8], offset aRb_0	; "rb"
		mov	[esp+0CCh+var_CC], esi
		call	_BIO_new_file
		mov	[esp+0CCh+var_2C], eax
		test	eax, eax
		mov	edx, [esp+0CCh+var_A0]
		jnz	loc_44174F
		mov	eax, [esp+0CCh+var_5C]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], offset aCanTReadConten ; "Can't read content file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_A0], 0
		xor	esi, esi
		mov	[esp+0CCh+var_98], 0
		mov	ebx, 2
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_442035:				; CODE XREF: _smime_main+46Aj
		mov	[esp+0CCh+var_A0], edx
		mov	[esp+0CCh+var_C0], 0
		mov	[esp+0CCh+var_C4], 0
		mov	[esp+0CCh+var_C8], 0
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_CC], eax
		call	_PEM_read_bio_PKCS7
		mov	ebp, eax
		mov	edx, [esp+0CCh+var_A0]
		jmp	loc_441FB2
; ---------------------------------------------------------------------------

loc_442068:				; CODE XREF: _smime_main+45Fj
		mov	[esp+0CCh+var_A0], edx
		lea	eax, [esp+0CCh+var_2C]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_CC], eax
		call	_SMIME_read_PKCS7
		mov	ebp, eax
		mov	edx, [esp+0CCh+var_A0]
		jmp	loc_441FB2
; ---------------------------------------------------------------------------

loc_44208E:				; CODE XREF: _smime_main+1201j
		mov	eax, [esp+0CCh+var_84]
		mov	[esp+0CCh+var_A0], eax
		mov	[esp+0CCh+var_94], 0
		jmp	loc_441B65
; ---------------------------------------------------------------------------

loc_4420A3:				; CODE XREF: _smime_main+EACj
		mov	[esp+0CCh+var_C8], offset aNoRecipientSCe ; "No	recipient(s) certificate(s) specifie"...
		jmp	loc_441AC2
; ---------------------------------------------------------------------------

loc_4420B0:				; CODE XREF: _smime_main+1153j
		mov	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_C0], eax
		cmp	edx, 76h
		jz	loc_44225E
		mov	eax, [esp+0CCh+var_9C]

loc_4420C5:				; CODE XREF: _smime_main+1A35j
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], ebp
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_CC], eax
		call	_SMIME_write_PKCS7
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_4420E2:				; CODE XREF: _smime_main+1784j
		mov	[esp+0CCh+var_C8], offset aErrorReadingSM ; "Error reading S/MIME message\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_A0], 0
		xor	esi, esi
		mov	[esp+0CCh+var_98], 0
		mov	ebx, 2
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_442113:				; CODE XREF: _smime_main+1169j
		mov	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_C0], eax
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], ebp
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_CC], eax
		call	_i2d_PKCS7_bio_stream
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_44213C:				; CODE XREF: _smime_main+BB7j
		mov	[esp+0CCh+var_44], edx
		call	_EVP_camellia_192_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_442166:				; CODE XREF: _smime_main+1691j
		mov	[esp+0CCh+var_C8], offset aErrorDecrypt_0 ; "Error decrypting PKCS#7 structure\n"
		jmp	loc_4419A7
; ---------------------------------------------------------------------------

loc_442173:				; CODE XREF: _smime_main+DCEj
		mov	[esp+0CCh+var_94], edx
		call	_EVP_des_ede3_cbc
		mov	[esp+0CCh+var_98], eax
		mov	edx, [esp+0CCh+var_94]
		jmp	loc_441604
; ---------------------------------------------------------------------------

loc_442189:				; CODE XREF: _smime_main+BECj
		mov	edi, offset aNointern ;	"-nointern"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jnz	short loc_4421DA
		or	[esp+0CCh+var_80], 10h
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4421B0:				; CODE XREF: _smime_main+BCBj
		mov	[esp+0CCh+var_44], edx
		call	_EVP_camellia_256_cbc
		mov	[esp+0CCh+var_98], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4421DA:				; CODE XREF: _smime_main+1974j
		mov	edi, offset aNoverify_0	; "-noverify"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jnz	loc_4423B9
		or	[esp+0CCh+var_80], 20h
		jmp	loc_440A55
; ---------------------------------------------------------------------------
		align 10h

loc_442210:				; CODE XREF: _smime_main+158Fj
		xor	esi, esi
		mov	ebx, 2
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_44221C:				; CODE XREF: _smime_main+10D0j
		mov	[esp+0CCh+var_C8], ebp
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_CC], eax
		call	_PEM_write_bio_PKCS7
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_442235:				; CODE XREF: _smime_main+115Ej
		mov	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_C0], eax
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], ebp
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_CC], eax
		call	_PEM_write_bio_PKCS7_stream
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_44225E:				; CODE XREF: _smime_main+188Bj
		mov	eax, [esp+0CCh+var_2C]
		jmp	loc_4420C5
; ---------------------------------------------------------------------------

loc_44226A:				; CODE XREF: _smime_main+16CFj
		mov	ecx, [esp+0CCh+var_64]
		test	ecx, ecx
		jz	loc_441F10

loc_442276:				; CODE XREF: _smime_main+16DAj
		or	[esp+0CCh+var_80], 1000h
		jmp	loc_441F10
; ---------------------------------------------------------------------------
		align 10h

loc_442290:				; CODE XREF: _smime_main+171Cj
		xor	esi, esi
		mov	[esp+0CCh+var_98], 0
		mov	ebx, 3
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_4422A4:				; CODE XREF: _smime_main+10ADj
		test	[esp+0CCh+var_80], 1000h
		jnz	loc_441CF7
		mov	[esp+0CCh+var_84], edx
		mov	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+var_9C]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebp
		call	_PKCS7_final
		test	eax, eax
		mov	edx, [esp+0CCh+var_84]
		jnz	loc_441CF7
		xor	esi, esi
		mov	ebx, 3
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_4422E6:				; CODE XREF: _smime_main+138Dj
		mov	[esp+0CCh+var_C8], offset aNoRecipientCer ; "No	recipient certificate or key specifi"...
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	[esp+0CCh+var_28], 1
		jmp	loc_441487
; ---------------------------------------------------------------------------

loc_44230B:				; CODE XREF: _smime_main+1609j
		mov	[esp+0CCh+var_C8], offset aVerificationSu ; "Verification successful\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		mov	eax, [esp+0CCh+var_80]
		mov	[esp+0CCh+var_C4], eax
		mov	eax, [esp+0CCh+var_90]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebp
		call	_PKCS7_get0_signers
		mov	esi, eax
		mov	eax, [esp+0CCh+var_84]
		test	eax, eax
		jz	short loc_4423A8
		mov	[esp+0CCh+var_C8], offset aW_0 ; "w"
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	loc_4423E5
		mov	[esp+0CCh+var_84], 0
		mov	[esp+0CCh+var_CC], esi
		call	_sk_num
		cmp	[esp+0CCh+var_84], eax
		jge	short loc_4423A0

loc_442372:				; CODE XREF: _smime_main+1B6Ej
		mov	eax, [esp+0CCh+var_84]
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], esi
		call	_sk_value
		mov	[esp+0CCh+var_C8], eax
		mov	[esp+0CCh+var_CC], ebx
		call	_PEM_write_bio_X509
		inc	[esp+0CCh+var_84]
		mov	[esp+0CCh+var_CC], esi
		call	_sk_num
		cmp	[esp+0CCh+var_84], eax
		jl	short loc_442372

loc_4423A0:				; CODE XREF: _smime_main+1B40j
		mov	[esp+0CCh+var_CC], ebx
		call	_BIO_free

loc_4423A8:				; CODE XREF: _smime_main+1B10j
		mov	[esp+0CCh+var_CC], esi
		call	_sk_free
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_4423B9:				; CODE XREF: _smime_main+19C5j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aNochain ; "-nochain"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_44240E
		or	[esp+0CCh+var_80], 8
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4423E5:				; CODE XREF: _smime_main+1B26j
		mov	eax, [esp+0CCh+var_84]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], offset aErrorWritingSi ; "Error writing signers to %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		xor	esi, esi
		mov	ebx, 5
		jmp	loc_4412C1
; ---------------------------------------------------------------------------

loc_44240E:				; CODE XREF: _smime_main+1BA9j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aNocerts_0 ; "-nocerts"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_44243A
		or	[esp+0CCh+var_80], 2
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_44243A:				; CODE XREF: _smime_main+1BFEj
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aNoattr ; "-noattr"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442469
		or	[esp+0CCh+var_80], 100h
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_442469:				; CODE XREF: _smime_main+1C2Aj
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aNodetach ; "-nodetach"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442495
		and	[esp+0CCh+var_80], 0FFFFFFBFh
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_442495:				; CODE XREF: _smime_main+1C59j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aNosmimecap ;	"-nosmimecap"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_4424C4
		or	[esp+0CCh+var_80], 200h
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4424C4:				; CODE XREF: _smime_main+1C85j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aBinary_0 ; "-binary"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_4424F3
		or	[esp+0CCh+var_80], 80h
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4424F3:				; CODE XREF: _smime_main+1CB4j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aNosigs ; "-nosigs"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_44251F
		or	[esp+0CCh+var_80], 4
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_44251F:				; CODE XREF: _smime_main+1CE3j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aStream ; "-stream"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jz	short loc_44259F
		mov	[esp+0CCh+var_C8], offset aIndef ; "-indef"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jz	short loc_44259F
		mov	[esp+0CCh+var_C8], offset aNoindef ; "-noindef"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jz	short loc_4425DB
		mov	[esp+0CCh+var_C8], offset aNooldmime ; "-nooldmime"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_4425AC
		or	[esp+0CCh+var_80], 400h
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_44259F:				; CODE XREF: _smime_main+1D0Fj
					; _smime_main+1D2Aj
		mov	[esp+0CCh+var_64], 1
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4425AC:				; CODE XREF: _smime_main+1D60j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aCrlfeol ; "-crlfeol"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_4425E8
		or	[esp+0CCh+var_80], 800h
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4425DB:				; CODE XREF: _smime_main+1D45j
		mov	[esp+0CCh+var_64], 0
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4425E8:				; CODE XREF: _smime_main+1D9Cj
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aRand_10 ; "-rand"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442629
		mov	esi, [ebp+4]
		mov	[esp+0CCh+var_8C], esi
		test	esi, esi
		jz	loc_440E71
		add	ebp, 4
		mov	[esp+0CCh+var_88], 1
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_442629:				; CODE XREF: _smime_main+1DD8j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aEngine_27 ; "-engine"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442662
		mov	edi, [ebp+4]
		mov	[esp+0CCh+var_90], edi
		test	edi, edi
		jz	loc_440E71

loc_44265A:				; CODE XREF: _smime_main+1E5Dj
					; _smime_main+1E8Fj ...
		add	ebp, 4
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_442662:				; CODE XREF: _smime_main+1E19j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aPassin_12 ; "-passin"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442694
		mov	esi, [ebp+4]
		mov	[esp+0CCh+var_94], esi
		test	esi, esi
		jnz	short loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_442694:				; CODE XREF: _smime_main+1E52j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aTo ;	"-to"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_4426C6
		mov	edi, [ebp+4]
		mov	[esp+0CCh+var_58], edi
		test	edi, edi
		jnz	short loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_4426C6:				; CODE XREF: _smime_main+1E84j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aFrom	; "-from"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_4426FC
		mov	esi, [ebp+4]
		mov	[esp+0CCh+var_54], esi
		test	esi, esi
		jnz	loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_4426FC:				; CODE XREF: _smime_main+1EB6j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aSubject_5 ; "-subject"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442732
		mov	edi, [ebp+4]
		mov	[esp+0CCh+var_50], edi
		test	edi, edi
		jnz	loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_442732:				; CODE XREF: _smime_main+1EECj
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aSigner ; "-signer"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	loc_442811
		cmp	dword ptr [ebp+4], 0
		jz	loc_440E71
		cmp	[esp+0CCh+var_84], 0
		jz	loc_4427FB
		cmp	[esp+0CCh+var_A8], 0
		jnz	short loc_442784
		call	_sk_new_null
		mov	[esp+0CCh+var_A8], eax
		mov	edx, [esp+0CCh+var_44]

loc_442784:				; CODE XREF: _smime_main+1F42j
		mov	[esp+0CCh+var_44], edx
		mov	eax, [esp+0CCh+var_84]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_push
		mov	eax, [esp+0CCh+var_A0]
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jz	short loc_4427B2
		mov	[esp+0CCh+var_84], eax

loc_4427B2:				; CODE XREF: _smime_main+1F7Cj
		cmp	[esp+0CCh+var_A4], 0
		jnz	short loc_4427CA
		mov	[esp+0CCh+var_A0], edx
		call	_sk_new_null
		mov	[esp+0CCh+var_A4], eax
		mov	edx, [esp+0CCh+var_A0]

loc_4427CA:				; CODE XREF: _smime_main+1F87j
		mov	[esp+0CCh+var_44], edx
		mov	eax, [esp+0CCh+var_84]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_push
		mov	[esp+0CCh+var_A0], 0
		mov	ebp, [esp+0CCh+var_30]
		mov	edx, [esp+0CCh+var_44]

loc_4427FB:				; CODE XREF: _smime_main+1F37j
		mov	eax, [ebp+4]
		mov	[esp+0CCh+var_84], eax
		mov	eax, [esp+0CCh+var_28]
		add	ebp, 4
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_442811:				; CODE XREF: _smime_main+1F22j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aRecip ; "-recip"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442847
		mov	esi, [ebp+4]
		mov	[esp+0CCh+var_9C], esi
		test	esi, esi
		jnz	loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_442847:				; CODE XREF: _smime_main+2001j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aMd_1	; "-md"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_4428AC
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_440E71
		add	ebp, 4
		mov	[esp+0CCh+var_30], ebp
		mov	[esp+0CCh+var_CC], eax
		call	_EVP_get_digestbyname
		mov	[esp+0CCh+var_74], eax
		test	eax, eax
		jz	loc_4429EE

loc_442892:				; CODE XREF: _smime_main+2363j
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4428AC:				; CODE XREF: _smime_main+2037j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aInkey_2 ; "-inkey"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	loc_442991
		cmp	dword ptr [ebp+4], 0
		jz	loc_440E71
		cmp	[esp+0CCh+var_A0], 0
		jz	loc_44297B
		cmp	[esp+0CCh+var_84], 0
		jz	loc_441AE7
		cmp	[esp+0CCh+var_A8], 0
		jnz	short loc_442910
		mov	[esp+0CCh+var_44], edx
		call	_sk_new_null
		mov	[esp+0CCh+var_A8], eax
		mov	edx, [esp+0CCh+var_44]

loc_442910:				; CODE XREF: _smime_main+20C7j
		mov	[esp+0CCh+var_44], edx
		mov	eax, [esp+0CCh+var_84]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, [esp+0CCh+var_A8]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_push
		cmp	[esp+0CCh+var_A4], 0
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_44294A
		mov	[esp+0CCh+var_84], edx
		call	_sk_new_null
		mov	[esp+0CCh+var_A4], eax
		mov	edx, [esp+0CCh+var_84]

loc_44294A:				; CODE XREF: _smime_main+2107j
		mov	[esp+0CCh+var_44], edx
		mov	eax, [esp+0CCh+var_A0]
		mov	[esp+0CCh+var_C8], eax
		mov	eax, [esp+0CCh+var_A4]
		mov	[esp+0CCh+var_CC], eax
		call	_sk_push
		mov	[esp+0CCh+var_84], 0
		mov	ebp, [esp+0CCh+var_30]
		mov	edx, [esp+0CCh+var_44]

loc_44297B:				; CODE XREF: _smime_main+20B1j
		mov	eax, [ebp+4]
		mov	[esp+0CCh+var_A0], eax
		mov	eax, [esp+0CCh+var_28]
		add	ebp, 4
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_442991:				; CODE XREF: _smime_main+209Cj
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aKeyform_7 ; "-keyform"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442A15
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_440E71
		add	ebp, 4
		mov	[esp+0CCh+var_30], ebp
		mov	[esp+0CCh+var_CC], eax ; char *
		call	_str2fmt
		mov	[esp+0CCh+var_7C], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_4429EE:				; CODE XREF: _smime_main+205Cj
		mov	eax, [esp+0CCh+var_30]
		mov	eax, [eax]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], offset aUnknownDigestS ; "Unknown digest %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_CC], eax
		call	_BIO_printf
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_442A15:				; CODE XREF: _smime_main+2181j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aCertfile_1 ;	"-certfile"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442A4B
		mov	edi, [ebp+4]
		mov	[esp+0CCh+var_6C], edi
		test	edi, edi
		jnz	loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_442A4B:				; CODE XREF: _smime_main+2205j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aCafile_5 ; "-CAfile"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442A84
		mov	esi, [ebp+4]
		mov	[esp+0CCh+var_4C], esi
		test	esi, esi
		jnz	loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_442A84:				; CODE XREF: _smime_main+223Bj
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aCapath_5 ; "-CApath"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442ABD
		mov	edi, [ebp+4]
		mov	[esp+0CCh+var_48], edi
		test	edi, edi
		jnz	loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_442ABD:				; CODE XREF: _smime_main+2274j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aIn_23 ; "-in"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442AF3
		mov	esi, [ebp+4]
		mov	[esp+0CCh+var_68], esi
		test	esi, esi
		jnz	loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_442AF3:				; CODE XREF: _smime_main+22ADj
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aInform_15 ; "-inform"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442B50
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_440E71
		add	ebp, 4
		mov	[esp+0CCh+var_30], ebp
		mov	[esp+0CCh+var_CC], eax ; char *
		call	_str2fmt
		mov	[esp+0CCh+var_70], eax
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		mov	edx, [esp+0CCh+var_44]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_442B50:				; CODE XREF: _smime_main+22E3j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aOutform_15 ;	"-outform"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442B98
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_440E71
		add	ebp, 4
		mov	[esp+0CCh+var_30], ebp
		mov	[esp+0CCh+var_CC], eax ; char *
		call	_str2fmt
		mov	[esp+0CCh+var_78], eax
		jmp	loc_442892
; ---------------------------------------------------------------------------

loc_442B98:				; CODE XREF: _smime_main+2340j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aOut_28 ; "-out"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442BCE
		mov	edi, [ebp+4]
		mov	[esp+0CCh+var_60], edi
		test	edi, edi
		jnz	loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_442BCE:				; CODE XREF: _smime_main+2388j
		mov	[esp+0CCh+var_44], edx
		mov	[esp+0CCh+var_C8], offset aContent ; "-content"
		mov	[esp+0CCh+var_CC], ebx ; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jnz	short loc_442C04
		mov	esi, [ebp+4]
		mov	[esp+0CCh+var_5C], esi
		test	esi, esi
		jnz	loc_44265A
		jmp	loc_440E71
; ---------------------------------------------------------------------------

loc_442C04:				; CODE XREF: _smime_main+23BEj
		mov	[esp+0CCh+var_44], edx
		lea	eax, [esp+0CCh+var_20]
		mov	[esp+0CCh+var_BC], eax
		mov	eax, ds:_bio_err
		mov	[esp+0CCh+var_C0], eax
		lea	eax, [esp+0CCh+var_28]
		mov	[esp+0CCh+var_C4], eax
		mov	[esp+0CCh+var_C8], 0
		lea	eax, [esp+0CCh+var_30]
		mov	[esp+0CCh+var_CC], eax
		call	_args_verify
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jz	short loc_442C58
		mov	eax, [esp+0CCh+var_28]
		jmp	loc_440974
; ---------------------------------------------------------------------------

loc_442C58:				; CODE XREF: _smime_main+241Aj
		mov	[esp+0CCh+var_44], edx
		mov	eax, [esp+0CCh+var_30]
		mov	eax, [eax]
		inc	eax
		mov	[esp+0CCh+var_CC], eax
		call	_EVP_get_cipherbyname
		mov	[esp+0CCh+var_98], eax
		test	eax, eax
		mov	edx, [esp+0CCh+var_44]
		jz	short loc_442C93
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, [esp+0CCh+var_28]
		jmp	loc_440A55
; ---------------------------------------------------------------------------

loc_442C93:				; CODE XREF: _smime_main+244Ej
		mov	[esp+0CCh+var_28], 1
		mov	ebp, [esp+0CCh+var_30]
		mov	eax, 1
		jmp	loc_440A55
_smime_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_cms_cb		proc near		; DATA XREF: _cms_main+1B44o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	ebx, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_1C], ebx
		call	_X509_STORE_CTX_get_error
		mov	ds:_verify_err,	eax
		cmp	eax, 2Bh
		jz	short loc_442CE0
		test	eax, eax
		jnz	short loc_442CD5
		cmp	[esp+1Ch+arg_0], 2
		jz	short loc_442CE0

loc_442CD5:				; CODE XREF: _cms_cb+1Cj
		mov	eax, [esp+1Ch+arg_0]
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_442CE0:				; CODE XREF: _cms_cb+18j _cms_cb+23j
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], 0
		call	_policies_print
		mov	eax, [esp+1Ch+arg_0]
		add	esp, 18h
		pop	ebx
		retn
_cms_cb		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_save_certs	proc near		; CODE XREF: _cms_main+1A8Dp
					; _cms_main+21FDp

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		test	eax, eax
		jz	short loc_442D70
		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, edx
		mov	[esp+1Ch+var_18], offset aW_1 ;	"w"
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_new_file
		mov	edi, eax
		test	eax, eax
		jz	short loc_442D80
		xor	ebx, ebx
		jmp	short loc_442D49
; ---------------------------------------------------------------------------
		align 10h

loc_442D30:				; CODE XREF: _save_certs+53j
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], esi
		call	_sk_value
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], edi
		call	_PEM_write_bio_X509
		inc	ebx

loc_442D49:				; CODE XREF: _save_certs+24j
		mov	[esp+1Ch+var_1C], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_442D30
		mov	[esp+1Ch+var_1C], edi
		call	_BIO_free
		mov	eax, 1

loc_442D62:				; CODE XREF: _save_certs+82j
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_442D70:				; CODE XREF: _save_certs+2j
		mov	eax, 1
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_442D80:				; CODE XREF: _save_certs+20j
		xor	eax, eax
		jmp	short loc_442D62
_save_certs	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _cms_main
_cms_main	proc near		; DATA XREF: .data:00455178o

var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 10Ch
		mov	[esp+11Ch+var_40], 0
		mov	[esp+11Ch+var_3C], 0
		mov	[esp+11Ch+var_38], 0
		mov	[esp+11Ch+var_34], 0
		mov	eax, [esp+11Ch+arg_4]
		add	eax, 4
		mov	[esp+11Ch+var_44], eax
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_443DDC

loc_442DE5:				; CODE XREF: _cms_main+1060j
					; _cms_main+1091j
		mov	[esp+11Ch+var_118], 0
		mov	[esp+11Ch+var_11C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_4433E0
		mov	eax, [esp+11Ch+var_3C]
		mov	[esp+11Ch+var_B4], 0
		mov	[esp+11Ch+var_6C], 0
		mov	[esp+11Ch+var_90], 0
		mov	[esp+11Ch+var_94], 0
		mov	[esp+11Ch+var_BC], 0
		mov	[esp+11Ch+var_CC], 0
		mov	[esp+11Ch+var_D0], 0
		mov	[esp+11Ch+var_70], 3
		mov	[esp+11Ch+var_88], 6
		mov	[esp+11Ch+var_98], 6
		mov	[esp+11Ch+var_D8], 6
		mov	[esp+11Ch+var_74], 0
		mov	[esp+11Ch+var_D4], 0
		mov	[esp+11Ch+var_C4], 0
		mov	[esp+11Ch+var_DC], 0
		mov	[esp+11Ch+var_50], 0
		mov	[esp+11Ch+var_54], 0
		mov	[esp+11Ch+var_58], 0
		mov	[esp+11Ch+var_5C], 0
		mov	[esp+11Ch+var_60], 0
		mov	[esp+11Ch+var_EC], 0
		mov	[esp+11Ch+var_F8], 0
		mov	[esp+11Ch+var_AC], 0FFFFFFFFh
		mov	[esp+11Ch+var_64], 0
		mov	[esp+11Ch+var_9C], 0
		mov	[esp+11Ch+var_68], 0
		mov	[esp+11Ch+var_78], 0
		mov	[esp+11Ch+var_A8], 40h
		mov	[esp+11Ch+var_A0], 0
		mov	[esp+11Ch+var_8C], 0
		mov	[esp+11Ch+var_7C], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_C8], 0
		mov	[esp+11Ch+var_F0], 0
		mov	[esp+11Ch+var_F4], 0
		mov	[esp+11Ch+var_E4], 0
		mov	[esp+11Ch+var_A4], 0
		mov	[esp+11Ch+var_E0], 0
		mov	[esp+11Ch+var_80], 0
		mov	[esp+11Ch+var_84], 0
		xor	edx, edx

loc_442F82:				; CODE XREF: _cms_main+362Bj
		test	eax, eax
		jnz	loc_443397
		lea	esi, [esi+0]

loc_442F90:				; CODE XREF: _cms_main+601j
		mov	ebp, [esp+11Ch+var_44]
		mov	ebx, [ebp+0]
		test	ebx, ebx
		jz	loc_443610
		cmp	byte ptr [ebx],	2Dh
		jnz	loc_443610
		mov	edi, offset aEncrypt_2 ; "-encrypt"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_443380
		mov	edi, offset aDecrypt_3 ; "-decrypt"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_4433C0
		mov	edi, offset aSign_4 ; "-sign"
		mov	ecx, 6
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_4433D0
		mov	edi, offset aSign_receipt ; "-sign_receipt"
		mov	ecx, 0Eh
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_443600
		mov	edi, offset aResign_0 ;	"-resign"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_4438D0
		mov	edi, offset aVerify_11 ; "-verify"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_443DA0
		mov	edi, offset aVerify_retcode ; "-verify_retcode"
		mov	ecx, 10h
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_443E26
		mov	edi, offset aVerify_receipt ; "-verify_receipt"
		mov	ecx, 10h
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_443E36
		mov	edi, offset aCmsout ; "-cmsout"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_443F26
		mov	edi, offset aData_out ;	"-data_out"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_444102
		mov	edi, offset aData_create ; "-data_create"
		mov	ecx, 0Dh
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_444249
		mov	edi, offset aDigest_verify ; "-digest_verify"
		mov	ecx, 0Fh
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_444313
		mov	edi, offset aDigest_create ; "-digest_create"
		mov	ecx, 0Fh
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_4446C9
		mov	edi, offset aCompress ;	"-compress"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_4446BF
		mov	edi, offset aUncompress	; "-uncompress"
		mov	ecx, 0Ch
		mov	esi, ebx
		repe cmpsb
		setnbe	al
		setb	cl
		sub	eax, ecx
		movsx	eax, al
		test	eax, eax
		jz	loc_4446B5
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aEncrypteddata_ ; "-EncryptedData_decrypt"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_4455EF
		mov	[esp+11Ch+var_118], offset aEncrypteddat_0 ; "-EncryptedData_encrypt"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		jz	loc_4456D9
		mov	[esp+11Ch+var_118], offset aDes3_3 ; "-des3"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_4456B9
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aDes_5 ; "-des"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445699
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aSeed_7 ; "-seed"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445679
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aRc240_0 ; "-rc2-40"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445659
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aRc2128_0 ; "-rc2-128"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445639
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aRc264_0 ; "-rc2-64"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445619
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aAes128_3 ; "-aes128"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_4455F9
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aAes192_3 ; "-aes192"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445743
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aAes256_3 ; "-aes256"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445723
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aCamellia128_3 ; "-camellia128"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445703
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aCamellia192_3 ; "-camellia192"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_4456E3
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aCamellia256_3 ; "-camellia256"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_44528F
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aDebug_decrypt ; "-debug_decrypt"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	loc_445269
		or	[esp+11Ch+var_A8], 20000h
		jmp	short loc_443385
; ---------------------------------------------------------------------------
		align 10h

loc_443380:				; CODE XREF: _cms_main+236j
		mov	edx, 11h

loc_443385:				; CODE XREF: _cms_main+5E2j
					; _cms_main+635j ...
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		test	eax, eax
		jz	loc_442F90

loc_443397:				; CODE XREF: _cms_main+1F4j
		mov	[esp+11Ch+var_B0], edx
		cmp	[esp+11Ch+var_AC], 0FFFFFFFFh
		jnz	loc_443621

loc_4433A6:				; CODE XREF: _cms_main+88Bj
		mov	edx, [esp+11Ch+var_EC]
		test	edx, edx
		jnz	loc_443621
		jmp	loc_44362D
; ---------------------------------------------------------------------------
		align 10h

loc_4433C0:				; CODE XREF: _cms_main+257j
		mov	edx, 22h
		jmp	short loc_443385
; ---------------------------------------------------------------------------
		align 10h

loc_4433D0:				; CODE XREF: _cms_main+278j
		mov	edx, 53h
		jmp	short loc_443385
; ---------------------------------------------------------------------------
		align 10h

loc_4433E0:				; CODE XREF: _cms_main+67j
		mov	[esp+11Ch+var_B4], 0
		xor	esi, esi
		mov	[esp+11Ch+var_BC], 0
		mov	[esp+11Ch+var_CC], 0
		mov	[esp+11Ch+var_D4], 0
		xor	edi, edi
		mov	[esp+11Ch+var_EC], 0
		mov	[esp+11Ch+var_F8], 0
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_E4], 0
		mov	[esp+11Ch+var_C0], 0
		mov	[esp+11Ch+var_B8], 0
		mov	[esp+11Ch+var_C8], 0
		mov	[esp+11Ch+var_D0], 0
		mov	[esp+11Ch+var_C4], 0
		mov	[esp+11Ch+var_DC], 0
		mov	[esp+11Ch+var_E0], 0
		xor	ebp, ebp
		mov	[esp+11Ch+var_F0], 0
		mov	[esp+11Ch+var_F4], 0
		mov	ebx, 1

loc_44347B:				; CODE XREF: _cms_main+B14j
					; _cms_main+100Bj ...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_ERR_print_errors

loc_443488:				; CODE XREF: _cms_main+1C35j
					; _cms_main+1CDAj ...
		mov	eax, [esp+11Ch+var_D4]
		test	eax, eax
		jnz	loc_4438B0

loc_443494:				; CODE XREF: _cms_main+B35j
		mov	[esp+11Ch+var_118], offset _X509_free
		mov	eax, [esp+11Ch+var_B8]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_pop_free
		mov	[esp+11Ch+var_118], offset _X509_free
		mov	eax, [esp+11Ch+var_C0]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_pop_free
		mov	eax, [esp+11Ch+var_34]
		test	eax, eax
		jz	short loc_4434CF
		mov	[esp+11Ch+var_11C], eax
		call	_X509_VERIFY_PARAM_free

loc_4434CF:				; CODE XREF: _cms_main+735j
		mov	eax, [esp+11Ch+var_F4]
		test	eax, eax
		jz	short loc_4434DF
		mov	[esp+11Ch+var_11C], eax
		call	_sk_free

loc_4434DF:				; CODE XREF: _cms_main+745j
		mov	eax, [esp+11Ch+var_F0]
		test	eax, eax
		jz	short loc_4434EF
		mov	[esp+11Ch+var_11C], eax
		call	_sk_free

loc_4434EF:				; CODE XREF: _cms_main+755j
		mov	eax, [esp+11Ch+var_CC]
		test	eax, eax
		jz	short loc_4434FF
		mov	[esp+11Ch+var_11C], eax
		call	_CRYPTO_free

loc_4434FF:				; CODE XREF: _cms_main+765j
		mov	eax, [esp+11Ch+var_BC]
		test	eax, eax
		jz	short loc_44350F
		mov	[esp+11Ch+var_11C], eax
		call	_CRYPTO_free

loc_44350F:				; CODE XREF: _cms_main+775j
		test	esi, esi
		jz	short loc_44351B
		mov	[esp+11Ch+var_11C], esi
		call	_CRYPTO_free

loc_44351B:				; CODE XREF: _cms_main+781j
		mov	eax, [esp+11Ch+var_B4]
		test	eax, eax
		jz	short loc_44352B
		mov	[esp+11Ch+var_11C], eax
		call	_ASN1_OBJECT_free

loc_44352B:				; CODE XREF: _cms_main+791j
		test	edi, edi
		jz	short loc_443537
		mov	[esp+11Ch+var_11C], edi
		call	_CMS_ReceiptRequest_free

loc_443537:				; CODE XREF: _cms_main+79Dj
		mov	eax, [esp+11Ch+var_F8]
		test	eax, eax
		jz	short loc_443547
		mov	[esp+11Ch+var_11C], eax
		call	_sk_free

loc_443547:				; CODE XREF: _cms_main+7ADj
		mov	eax, [esp+11Ch+var_EC]
		test	eax, eax
		jz	short loc_443557
		mov	[esp+11Ch+var_11C], eax
		call	_sk_free

loc_443557:				; CODE XREF: _cms_main+7BDj
		mov	eax, [esp+11Ch+var_DC]
		mov	[esp+11Ch+var_11C], eax
		call	_X509_STORE_free
		mov	[esp+11Ch+var_11C], 0
		call	_X509_free
		mov	eax, [esp+11Ch+var_C4]
		mov	[esp+11Ch+var_11C], eax
		call	_X509_free
		mov	eax, [esp+11Ch+var_D0]
		mov	[esp+11Ch+var_11C], eax
		call	_X509_free
		mov	eax, [esp+11Ch+var_C8]
		mov	[esp+11Ch+var_11C], eax
		call	_EVP_PKEY_free
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_ContentInfo_free
		mov	eax, [esp+11Ch+var_E0]
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_ContentInfo_free
		mov	eax, [esp+11Ch+var_D8]
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_free
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_free
		mov	eax, [esp+11Ch+var_40]
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_free
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_free_all
		mov	eax, [esp+11Ch+var_38]
		test	eax, eax
		jz	short loc_4435ED
		mov	[esp+11Ch+var_11C], eax
		call	_CRYPTO_free

loc_4435ED:				; CODE XREF: _cms_main+853j
		mov	eax, ebx
		add	esp, 10Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_443600:				; CODE XREF: _cms_main+299j
		mov	edx, 3Fh
		jmp	loc_443385
; ---------------------------------------------------------------------------
		align 10h

loc_443610:				; CODE XREF: _cms_main+20Cj
					; _cms_main+215j
		mov	[esp+11Ch+var_B0], edx
		xor	eax, eax
		cmp	[esp+11Ch+var_AC], 0FFFFFFFFh
		jz	loc_4433A6

loc_443621:				; CODE XREF: _cms_main+610j
					; _cms_main+61Cj
		mov	ebp, [esp+11Ch+var_F8]
		test	ebp, ebp
		jz	loc_443EDA

loc_44362D:				; CODE XREF: _cms_main+622j
		mov	ebx, [esp+11Ch+var_B0]
		and	ebx, 40h
		jz	loc_4438E0
		mov	eax, [esp+11Ch+var_E8]
		test	eax, eax
		jz	loc_443E52
		mov	eax, [esp+11Ch+var_A4]
		test	eax, eax
		jz	loc_444293

loc_443652:				; CODE XREF: _cms_main+10CEj
		mov	eax, [esp+11Ch+var_F4]
		test	eax, eax
		jz	loc_443E8B

loc_44365E:				; CODE XREF: _cms_main+1104j
		mov	eax, [esp+11Ch+var_A4]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_F4]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_push
		mov	ebp, [esp+11Ch+var_F0]
		test	ebp, ebp
		jz	loc_443E7D

loc_44367E:				; CODE XREF: _cms_main+10F6j
		mov	edi, [esp+11Ch+var_E8]
		test	edi, edi
		jz	loc_443E70

loc_44368A:				; CODE XREF: _cms_main+10E8j
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_push

loc_44369E:				; CODE XREF: _cms_main+10C8j
		mov	esi, [esp+11Ch+var_F4]
		test	esi, esi
		jz	loc_444253
		mov	eax, [esp+11Ch+var_3C]
		mov	[esp+11Ch+var_D4], 1
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_A4], 0

loc_4436C9:				; CODE XREF: _cms_main+116Cj
					; _cms_main+1191j ...
		test	eax, eax
		jnz	loc_443901
		mov	[esp+11Ch+var_114], 0
		mov	eax, [esp+11Ch+var_D0]
		mov	[esp+11Ch+var_118], eax
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_setup_engine
		mov	esi, eax
		mov	[esp+11Ch+var_10C], 0 ;	int
		lea	eax, [esp+11Ch+var_38]
		mov	[esp+11Ch+var_110], eax	; int
		mov	[esp+11Ch+var_114], 0 ;	char *
		mov	eax, [esp+11Ch+var_DC]
		mov	[esp+11Ch+var_118], eax	; char *
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax	; int
		call	_app_passwd
		test	eax, eax
		jz	loc_444099
		mov	ecx, [esp+11Ch+var_D4]
		test	ecx, ecx
		jnz	loc_4440A6

loc_443734:				; CODE XREF: _cms_main+1346j
					; _cms_main+136Dj
		test	ebx, ebx
		jnz	short loc_44373D
		and	[esp+11Ch+var_A8], 0FFFFFFBFh

loc_44373D:				; CODE XREF: _cms_main+9A6j
		test	byte ptr [esp+11Ch+var_B0], 10h
		jz	loc_444081
		cmp	[esp+11Ch+var_98], 1
		jz	loc_44408C

loc_443756:				; CODE XREF: _cms_main+12F6j
		mov	[esp+11Ch+var_DC], offset aW_1 ; "w"

loc_44375E:				; CODE XREF: _cms_main+1304j
		mov	ebp, [esp+11Ch+var_B0]
		and	ebp, 20h
		jz	loc_443F56
		cmp	[esp+11Ch+var_D8], 1
		jz	loc_444280
		mov	edi, offset aR_11 ; "r"

loc_44377B:				; CODE XREF: _cms_main+11DBj
					; _cms_main+120Cj ...
		mov	[esp+11Ch+var_B8], 0

loc_443783:				; CODE XREF: _cms_main+1228j
					; _cms_main+14FEj
		mov	eax, [esp+11Ch+var_C8]
		test	eax, eax
		jz	loc_444116
		mov	[esp+11Ch+var_108], offset aCertificateF_2 ; "certificate file"
		mov	[esp+11Ch+var_10C], esi
		mov	[esp+11Ch+var_110], 0
		mov	[esp+11Ch+var_114], 3
		mov	[esp+11Ch+var_118], eax
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_load_certs
		mov	[esp+11Ch+var_C0], eax
		test	eax, eax
		jz	loc_4443DF

loc_4437C8:				; CODE XREF: _cms_main+138Ej
		mov	eax, [esp+11Ch+var_E4]
		test	eax, eax
		jz	short loc_4437DB
		cmp	[esp+11Ch+var_B0], 22h
		jz	loc_4442AD

loc_4437DB:				; CODE XREF: _cms_main+A3Ej
		cmp	[esp+11Ch+var_B0], 3Fh
		jz	loc_444327
		cmp	[esp+11Ch+var_B0], 22h
		jz	loc_44431D
		cmp	[esp+11Ch+var_B0], 53h
		mov	[esp+11Ch+var_D0], 0
		jz	loc_4441B2
		mov	[esp+11Ch+var_C4], 0
		mov	[esp+11Ch+var_C8], 0

loc_443814:				; CODE XREF: _cms_main+147Bj
					; _cms_main+29DBj
		mov	eax, [esp+11Ch+var_84]
		test	eax, eax
		jz	loc_4443A0
		mov	[esp+11Ch+var_118], edi
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_new_file
		mov	[esp+11Ch+var_E4], eax
		test	eax, eax
		jz	loc_44440D

loc_44383B:				; CODE XREF: _cms_main+1629j
		test	ebp, ebp
		jz	loc_444123
		cmp	[esp+11Ch+var_D8], 6
		jz	loc_4449D0
		cmp	[esp+11Ch+var_D8], 3
		jz	loc_444878
		cmp	[esp+11Ch+var_D8], 1
		jz	loc_4447A4
		mov	[esp+11Ch+var_118], offset aBadInputFor_12 ; "Bad input	format for CMS file\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf

loc_443879:				; CODE XREF: _cms_main+169Dj
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_DC], 0
		mov	[esp+11Ch+var_E0], 0
		xor	ebp, ebp
		mov	ebx, 2
		jmp	loc_44347B
; ---------------------------------------------------------------------------
		align 10h

loc_4438B0:				; CODE XREF: _cms_main+6FEj
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], 0
		call	_app_RAND_write_file
		jmp	loc_443494
; ---------------------------------------------------------------------------
		align 10h

loc_4438D0:				; CODE XREF: _cms_main+2BAj
		mov	edx, 76h
		jmp	loc_443385
; ---------------------------------------------------------------------------
		align 10h

loc_4438E0:				; CODE XREF: _cms_main+8A4j
		mov	edi, [esp+11Ch+var_F8]
		test	edi, edi
		jz	loc_443DAA

loc_4438EC:				; CODE XREF: _cms_main+1020j
		mov	[esp+11Ch+var_118], offset aSignedReceipts ; "Signed receipts only allowed with	-sign"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_puts

loc_443901:				; CODE XREF: _cms_main+93Bj
					; _cms_main+1047j ...
		mov	[esp+11Ch+var_118], offset aUsageCmsOption ; "Usage cms	[options] cert.pem ...\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aWhereOption_18 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aEncryptEncry_2 ; "-encrypt	     encrypt message\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aDecryptDecry_2 ; "-decrypt	     decrypt encrypted messag"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aSignSignMess_0 ; "-sign	     sign message\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aVerifyVerify_2 ; "-verify	     verify signed message\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aCmsoutOutputCm ; "-cmsout	     output CMS	structure\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aDes3EncryptW_0 ; "-des3	     encrypt with triple DES\"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aDesEncryptWi_0 ; "-des	     encrypt with DES\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aSeedEncryptW_0 ; "-seed	     encrypt with SEED\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aRc240Encrypt_0 ; "-rc2-40	     encrypt with RC2-40 (def"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aRc264Encrypt_0 ; "-rc2-64	     encrypt with RC2-64\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aRc2128Encryp_0 ; "-rc2-128	     encrypt with RC2-128\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aAes128Aes192_5 ; "-aes128, -aes192,	-aes256\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aEncryptPemO_13 ; "		     encrypt PEM output	with "...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aCamellia128C_6 ; "-camellia128, -camellia192, -camellia25"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aEncryptPemO_14 ; "		     encrypt PEM output	with "...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aNointernDonT_0 ; "-nointern	     don't search certificate"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aNosigsDonTVe_0 ; "-nosigs	     don't verify message sig"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aNoverifyDonT_0 ; "-noverify	     don't verify signers cer"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aNocertsDonTI_0 ; "-nocerts	     don't include signers ce"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aNodetachUseO_0 ; "-nodetach	     use opaque	signing\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aNoattrDonTIn_0 ; "-noattr	     don't include any signed"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aBinaryDonTTr_0 ; "-binary	     don't translate message "...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aCertfileFile_0 ; "-certfile	file other certificates	file\"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aCertsoutFileCe ; "-certsout	file certificate output	file\"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aSignerFileSi_0 ; "-signer file   signer certificate	file\"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aRecipFileRec_0 ; "-recip  file   recipient certificate fi"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aKeyidUseSubjec ; "-keyid	     use subject key identifi"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aInFileInputF_6 ; "-in file	     input file\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aInformArgIn_11 ; "-inform arg    input format SMIME	(defa"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aInkeyFileInp_2 ; "-inkey file    input private key (if no"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aKeyformArgIn_0 ; "-keyform arg   input private key format"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aOutFileOutpu_9 ; "-out file	     output file\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aOutformArgO_10 ; "-outform arg   output format SMIME (def"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aContentFileS_0 ; "-content file  supply or override	conte"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aToAddrToAddr_0 ; "-to addr	     to	address\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aFromAdFromAd_0 ; "-from ad	     from address\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aSubjectSSubj_0 ; "-subject s     subject\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aTextIncludeO_0 ; "-text	     include or	delete text M"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aCapathDirTru_0 ; "-CApath dir    trusted certificates dir"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aCafileFileTr_0 ; "-CAfile file   trusted certificates fil"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aNo_alt_chain_2 ; "-no_alt_chains only ever use the first "...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aCrl_checkChe_1 ; "-crl_check     check revocation status "...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aCrl_check_al_1 ; "-crl_check_all check revocation status "...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aEngineEUseE_22 ; "-engine e	     use engine	e, possibly a"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aPassinArgInp_6 ; "-passin arg    input file	pass phrase s"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_110], 3Bh
		mov	[esp+11Ch+var_114], 3Bh
		mov	[esp+11Ch+var_118], offset aRandFileCfil_8 ; "-rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aLoadTheFileO_6 ; "		     load the file (or the fi"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aTheRandomNum_6 ; "		     the random	number genera"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_118], offset aCert_pemReci_0 ; "cert.pem	     recipient certificate(s)"...

loc_443D33:				; CODE XREF: _cms_main+1311j
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_E4], 0
		mov	[esp+11Ch+var_C0], 0
		mov	[esp+11Ch+var_B8], 0
		mov	[esp+11Ch+var_C8], 0
		mov	[esp+11Ch+var_D0], 0
		mov	[esp+11Ch+var_C4], 0
		mov	[esp+11Ch+var_DC], 0
		mov	[esp+11Ch+var_E0], 0
		xor	ebp, ebp
		mov	ebx, 1
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_443DA0:				; CODE XREF: _cms_main+2DBj
		mov	edx, 24h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_443DAA:				; CODE XREF: _cms_main+B56j
		mov	esi, [esp+11Ch+var_EC]
		test	esi, esi
		jnz	loc_4438EC
		mov	ecx, [esp+11Ch+var_F0]
		test	ecx, ecx
		jz	loc_443EA0

loc_443DC2:				; CODE XREF: _cms_main+1116j
		mov	[esp+11Ch+var_118], offset aMultipleSign_0 ; "Multiple signers or keys not allowed\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_puts
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_443DDC:				; CODE XREF: _cms_main+4Fj
		call	_BIO_s_file
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_442DE5
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+11Ch+var_110], edx
		mov	[esp+11Ch+var_114], 10h
		mov	[esp+11Ch+var_118], 6Ah
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_442DE5
; ---------------------------------------------------------------------------

loc_443E26:				; CODE XREF: _cms_main+2FCj
		mov	[esp+11Ch+var_9C], 1
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_443E36:				; CODE XREF: _cms_main+31Dj
		mov	edx, [ebp+4]
		mov	[esp+11Ch+var_E0], edx
		test	edx, edx
		jz	loc_443901
		add	ebp, 4
		mov	edx, 30h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_443E52:				; CODE XREF: _cms_main+8B0j
		mov	eax, [esp+11Ch+var_A4]
		test	eax, eax
		jz	loc_44369E
		jmp	loc_443652
; ---------------------------------------------------------------------------
		align 10h

loc_443E70:				; CODE XREF: _cms_main+8F4j
		mov	eax, [esp+11Ch+var_A4]
		mov	[esp+11Ch+var_E8], eax
		jmp	loc_44368A
; ---------------------------------------------------------------------------

loc_443E7D:				; CODE XREF: _cms_main+8E8j
		call	_sk_new_null
		mov	[esp+11Ch+var_F0], eax
		jmp	loc_44367E
; ---------------------------------------------------------------------------

loc_443E8B:				; CODE XREF: _cms_main+8C8j
		call	_sk_new_null
		mov	[esp+11Ch+var_F4], eax
		jmp	loc_44365E
; ---------------------------------------------------------------------------
		align 10h

loc_443EA0:				; CODE XREF: _cms_main+102Cj
		mov	edx, [esp+11Ch+var_F4]
		test	edx, edx
		jnz	loc_443DC2
		cmp	[esp+11Ch+var_B0], 22h
		jz	short loc_443F01
		cmp	[esp+11Ch+var_B0], 11h
		jz	short loc_443F30
		mov	esi, [esp+11Ch+var_B0]
		test	esi, esi
		jnz	short loc_443EF4
		mov	[esp+11Ch+var_3C], 1

loc_443ECD:				; CODE XREF: _cms_main+14EBj
					; _cms_main+2A6Ej
		mov	[esp+11Ch+var_F4], 0
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_443EDA:				; CODE XREF: _cms_main+897j
		mov	[esp+11Ch+var_118], offset aNoSignedReceip ; "No Signed	Receipts Recipients\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_puts
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_443EF4:				; CODE XREF: _cms_main+1130j
					; _cms_main+1177j ...
		mov	edx, [esp+11Ch+var_F4]
		mov	[esp+11Ch+var_F0], edx
		jmp	loc_4436C9
; ---------------------------------------------------------------------------

loc_443F01:				; CODE XREF: _cms_main+1121j
		mov	ecx, [esp+11Ch+var_E4]
		test	ecx, ecx
		jnz	short loc_443EF4
		mov	edx, [esp+11Ch+var_E8]
		test	edx, edx
		jz	loc_4457C5
		mov	edx, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_F0], edx
		mov	[esp+11Ch+var_F4], edx
		jmp	loc_4436C9
; ---------------------------------------------------------------------------

loc_443F26:				; CODE XREF: _cms_main+33Ej
		mov	edx, 35h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_443F30:				; CODE XREF: _cms_main+1128j
		mov	edx, [esp+11Ch+var_44]
		mov	ebp, [edx]
		test	ebp, ebp
		jz	loc_4443BE
		mov	edx, [esp+11Ch+var_F4]
		mov	[esp+11Ch+var_F0], edx
		mov	[esp+11Ch+var_D4], 1
		jmp	loc_4436C9
; ---------------------------------------------------------------------------

loc_443F56:				; CODE XREF: _cms_main+9D5j
		test	byte ptr [esp+11Ch+var_A8], 80h
		jnz	loc_44410C
		mov	edi, offset aR_11 ; "r"

loc_443F66:				; CODE XREF: _cms_main+1381j
		cmp	[esp+11Ch+var_B0], 11h
		jnz	loc_44377B
		mov	edx, [esp+11Ch+var_A0]
		test	edx, edx
		jz	loc_444796

loc_443F7D:				; CODE XREF: _cms_main+1A0Fj
		mov	eax, [esp+11Ch+var_CC]
		test	eax, eax
		jz	short loc_443F91
		mov	eax, [esp+11Ch+var_BC]
		test	eax, eax
		jz	loc_4446D3

loc_443F91:				; CODE XREF: _cms_main+11F3j
		mov	eax, [esp+11Ch+var_44]
		mov	eax, [eax]
		test	eax, eax
		jz	loc_44377B
		call	_sk_new_null
		mov	edx, eax
		mov	[esp+11Ch+var_B8], eax
		mov	eax, [esp+11Ch+var_44]
		mov	eax, [eax]
		test	eax, eax
		jz	loc_443783
		mov	[esp+11Ch+var_D0], ebx
		mov	ebx, edx
		jmp	short loc_443FF8
; ---------------------------------------------------------------------------
		align 10h

loc_443FD0:				; CODE XREF: _cms_main+1297j
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebx
		call	_sk_push
		mov	eax, [esp+11Ch+var_44]
		lea	edx, [eax+4]
		mov	[esp+11Ch+var_44], edx
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_44428A

loc_443FF8:				; CODE XREF: _cms_main+1234j
		mov	[esp+11Ch+var_108], offset aRecipientCer_0 ; "recipient	certificate file"
		mov	[esp+11Ch+var_10C], esi
		mov	[esp+11Ch+var_110], 0
		mov	[esp+11Ch+var_114], 3
		mov	[esp+11Ch+var_118], eax
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_load_cert
		test	eax, eax
		jnz	short loc_443FD0
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_E4], 0
		mov	[esp+11Ch+var_C0], 0

loc_44404D:				; CODE XREF: _cms_main+1678j
					; _cms_main+1984j
		mov	[esp+11Ch+var_C8], 0
		mov	[esp+11Ch+var_D0], 0

loc_44405D:				; CODE XREF: _cms_main+1605j
		mov	[esp+11Ch+var_C4], 0
		mov	[esp+11Ch+var_DC], 0
		mov	[esp+11Ch+var_E0], 0
		xor	ebp, ebp
		mov	ebx, 2
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444081:				; CODE XREF: _cms_main+9B2j
		test	byte ptr [esp+11Ch+var_A8], 80h
		jz	loc_443756

loc_44408C:				; CODE XREF: _cms_main+9C0j
		mov	[esp+11Ch+var_DC], offset aWb_8	; "wb"
		jmp	loc_44375E
; ---------------------------------------------------------------------------

loc_444099:				; CODE XREF: _cms_main+992j
		mov	[esp+11Ch+var_118], offset aErrorGettin_21 ; "Error getting password\n"
		jmp	loc_443D33
; ---------------------------------------------------------------------------

loc_4440A6:				; CODE XREF: _cms_main+99Ej
		mov	edi, [esp+11Ch+var_C4]
		test	edi, edi
		setnz	dl
		xor	eax, eax
		mov	al, dl
		mov	[esp+11Ch+var_DC], edx
		mov	[esp+11Ch+var_114], eax
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], 0
		call	_app_RAND_load_file
		mov	edx, [esp+11Ch+var_DC]
		test	dl, dl
		jz	loc_443734
		mov	[esp+11Ch+var_11C], edi
		call	_app_RAND_load_files
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aLdSemiRandom_9 ; "%ld semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		jmp	loc_443734
; ---------------------------------------------------------------------------

loc_444102:				; CODE XREF: _cms_main+35Fj
		mov	edx, 27h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_44410C:				; CODE XREF: _cms_main+11CBj
		mov	edi, offset aRb_6 ; "rb"
		jmp	loc_443F66
; ---------------------------------------------------------------------------

loc_444116:				; CODE XREF: _cms_main+9F9j
		mov	[esp+11Ch+var_C0], 0
		jmp	loc_4437C8
; ---------------------------------------------------------------------------

loc_444123:				; CODE XREF: _cms_main+AADj
		xor	ebp, ebp

loc_444125:				; CODE XREF: _cms_main+1A74j
					; _cms_main+1C6Ej
		mov	eax, [esp+11Ch+var_E0]
		test	eax, eax
		jz	loc_444781
		cmp	[esp+11Ch+var_88], 1
		jz	loc_4452D5
		mov	[esp+11Ch+var_118], offset aR_11 ; "r"
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_new_file
		mov	[esp+11Ch+var_D8], eax
		test	eax, eax
		jz	loc_444736
		cmp	[esp+11Ch+var_88], 6
		jz	loc_444719
		cmp	[esp+11Ch+var_88], 3
		jz	loc_444432
		mov	[esp+11Ch+var_118], offset aBadInputFor_13 ; "Bad input	format for receipt\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_DC], 0
		mov	[esp+11Ch+var_E0], 0
		mov	ebx, 2
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_4441B2:				; CODE XREF: _cms_main+A6Ej
					; _cms_main+15CEj
		mov	eax, [esp+11Ch+var_E8]
		test	eax, eax
		jz	loc_4446A0
		mov	[esp+11Ch+var_C4], 0

loc_4441C6:				; CODE XREF: _cms_main+1568j
					; _cms_main+157Ej
		mov	[esp+11Ch+var_104], offset aSigningKeyFi_0 ; "signing key file"
		mov	[esp+11Ch+var_108], esi
		mov	eax, [esp+11Ch+var_38]
		mov	[esp+11Ch+var_10C], eax
		mov	[esp+11Ch+var_110], 0
		mov	eax, [esp+11Ch+var_70]
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_118], eax
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_load_key
		mov	[esp+11Ch+var_C8], eax
		test	eax, eax
		jnz	loc_443814
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_E4], 0
		mov	[esp+11Ch+var_DC], 0
		mov	[esp+11Ch+var_E0], 0
		xor	ebp, ebp
		mov	ebx, 2
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444249:				; CODE XREF: _cms_main+380j
		mov	edx, 18h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_444253:				; CODE XREF: _cms_main+914j
		mov	[esp+11Ch+var_118], offset aNoSignerCert_0 ; "No signer	certificate specified\n"

loc_44425B:				; CODE XREF: _cms_main+1C91j
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_3C], 1
		mov	[esp+11Ch+var_D4], 1
		jmp	loc_443ECD
; ---------------------------------------------------------------------------

loc_444280:				; CODE XREF: _cms_main+9E0j
		mov	edi, offset aRb_6 ; "rb"
		jmp	loc_44377B
; ---------------------------------------------------------------------------

loc_44428A:				; CODE XREF: _cms_main+1262j
		mov	ebx, [esp+11Ch+var_D0]
		jmp	loc_443783
; ---------------------------------------------------------------------------

loc_444293:				; CODE XREF: _cms_main+8BCj
					; _cms_main+32DDj
		mov	[esp+11Ch+var_118], offset aIllegalInkey_0 ; "Illegal -inkey without -signer\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_puts
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_4442AD:				; CODE XREF: _cms_main+A45j
		mov	[esp+11Ch+var_108], offset aRecipientCer_0 ; "recipient	certificate file"
		mov	[esp+11Ch+var_10C], esi
		mov	[esp+11Ch+var_110], 0
		mov	[esp+11Ch+var_114], 3
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_118], eax
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_load_cert
		mov	[esp+11Ch+var_C4], eax
		test	eax, eax
		jz	loc_445770

loc_4442EA:				; CODE XREF: _cms_main+1595j
		mov	eax, [esp+11Ch+var_E8]
		test	eax, eax
		mov	[esp+11Ch+var_D0], 0
		jnz	loc_4441C6
		mov	eax, [esp+11Ch+var_E4]

loc_444302:				; CODE XREF: _cms_main+1920j
		test	eax, eax
		jz	loc_445763
		mov	[esp+11Ch+var_E8], eax
		jmp	loc_4441C6
; ---------------------------------------------------------------------------

loc_444313:				; CODE XREF: _cms_main+3A1j
		mov	edx, 29h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_44431D:				; CODE XREF: _cms_main+A5Bj
		mov	[esp+11Ch+var_C4], 0
		jmp	short loc_4442EA
; ---------------------------------------------------------------------------

loc_444327:				; CODE XREF: _cms_main+A50j
		mov	[esp+11Ch+var_108], offset aReceiptSignerC ; "receipt signer certificate file"
		mov	[esp+11Ch+var_10C], esi
		mov	[esp+11Ch+var_110], 0
		mov	[esp+11Ch+var_114], 3
		mov	eax, [esp+11Ch+var_A4]
		mov	[esp+11Ch+var_118], eax
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_load_cert
		mov	[esp+11Ch+var_D0], eax
		test	eax, eax
		jnz	loc_4441B2
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_ERR_print_errors
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_E4], 0
		mov	[esp+11Ch+var_C8], 0
		jmp	loc_44405D
; ---------------------------------------------------------------------------
		align 10h

loc_4443A0:				; CODE XREF: _cms_main+A8Dj
		mov	[esp+11Ch+var_118], 0
		mov	eax, ds:__imp___iob
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_new_fp
		mov	[esp+11Ch+var_E4], eax
		jmp	loc_44383B
; ---------------------------------------------------------------------------

loc_4443BE:				; CODE XREF: _cms_main+11ABj
		mov	edi, [esp+11Ch+var_CC]
		test	edi, edi
		jz	loc_444A03
		mov	edx, [esp+11Ch+var_F8]
		mov	[esp+11Ch+var_F4], edx
		mov	[esp+11Ch+var_D4], 1
		jmp	loc_4436C9
; ---------------------------------------------------------------------------

loc_4443DF:				; CODE XREF: _cms_main+A32j
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_ERR_print_errors
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_E4], 0
		jmp	loc_44404D
; ---------------------------------------------------------------------------

loc_44440D:				; CODE XREF: _cms_main+AA5j
		mov	eax, [esp+11Ch+var_84]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aCanTOpenInpu_3 ; "Can't open input file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		jmp	loc_443879
; ---------------------------------------------------------------------------

loc_444432:				; CODE XREF: _cms_main+13E1j
		mov	[esp+11Ch+var_110], 0
		mov	[esp+11Ch+var_114], 0
		mov	[esp+11Ch+var_118], 0
		mov	eax, [esp+11Ch+var_D8]
		mov	[esp+11Ch+var_11C], eax
		call	_PEM_read_bio_CMS
		mov	[esp+11Ch+var_E0], eax

loc_44445A:				; CODE XREF: _cms_main+19A1j
					; _cms_main+2579j
		mov	ecx, [esp+11Ch+var_E0]
		test	ecx, ecx
		jz	loc_445517

loc_444466:				; CODE XREF: _cms_main+1A01j
		mov	eax, [esp+11Ch+var_80]
		test	eax, eax
		jz	loc_444910
		mov	edx, [esp+11Ch+var_DC]
		mov	[esp+11Ch+var_118], edx
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_new_file
		mov	[esp+11Ch+var_E8], eax
		test	eax, eax
		jz	loc_4454E1

loc_444491:				; CODE XREF: _cms_main+1B9Cj
		mov	eax, [esp+11Ch+var_B0]
		cmp	eax, 24h
		jz	loc_4448A3
		cmp	eax, 30h
		jz	loc_4448A3
		mov	[esp+11Ch+var_DC], 0

loc_4444AF:				; CODE XREF: _cms_main+1B5Dj
					; _cms_main+1B6Fj
		cmp	[esp+11Ch+var_B0], 18h
		jz	loc_445580
		cmp	[esp+11Ch+var_B0], 1Ah
		jz	loc_445558
		cmp	[esp+11Ch+var_B0], 1Ch
		jz	loc_44559D
		cmp	[esp+11Ch+var_B0], 11h
		jz	loc_445390
		cmp	[esp+11Ch+var_B0], 1Eh
		jz	loc_444DB9
		cmp	[esp+11Ch+var_B0], 3Fh
		jz	loc_444D56
		test	ebx, ebx
		jz	loc_444931
		cmp	[esp+11Ch+var_B0], 53h
		jz	loc_444C6B
		or	[esp+11Ch+var_A8], 8000h
		xor	edi, edi

loc_44450E:				; CODE XREF: _cms_main+1F96j
					; _cms_main+1FC1j
		xor	ebx, ebx
		jmp	loc_444631
; ---------------------------------------------------------------------------

loc_444515:				; CODE XREF: _cms_main+18AFj
		mov	[esp+11Ch+var_118], ebx
		mov	eax, [esp+11Ch+var_F4]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_value
		mov	[esp+11Ch+var_A4], eax
		mov	[esp+11Ch+var_118], ebx
		mov	edx, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], edx
		call	_sk_value
		mov	[esp+11Ch+var_AC], eax
		mov	[esp+11Ch+var_108], offset aSignerCertif_0 ; "signer certificate"
		mov	[esp+11Ch+var_10C], esi
		mov	[esp+11Ch+var_110], 0
		mov	[esp+11Ch+var_114], 3
		mov	eax, [esp+11Ch+var_A4]
		mov	[esp+11Ch+var_118], eax
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_load_cert
		mov	[esp+11Ch+var_D0], eax
		test	eax, eax
		jz	loc_444686
		mov	[esp+11Ch+var_104], offset aSigningKeyFi_0 ; "signing key file"
		mov	[esp+11Ch+var_108], esi
		mov	eax, [esp+11Ch+var_38]
		mov	[esp+11Ch+var_10C], eax
		mov	[esp+11Ch+var_110], 0
		mov	edx, [esp+11Ch+var_70]
		mov	[esp+11Ch+var_114], edx
		mov	edx, [esp+11Ch+var_AC]
		mov	[esp+11Ch+var_118], edx
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_load_key
		mov	[esp+11Ch+var_C8], eax
		test	eax, eax
		jz	loc_444686
		mov	edx, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_10C], edx
		mov	edx, [esp+11Ch+var_74]
		mov	[esp+11Ch+var_110], edx
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_D0]
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_add1_signer
		test	eax, eax
		jz	loc_444686
		test	edi, edi
		jz	short loc_444608
		mov	[esp+11Ch+var_118], edi
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_add1_ReceiptRequest
		test	eax, eax
		jz	short loc_444686

loc_444608:				; CODE XREF: _cms_main+1866j
		mov	eax, [esp+11Ch+var_D0]
		mov	[esp+11Ch+var_11C], eax
		call	_X509_free
		mov	eax, [esp+11Ch+var_C8]
		mov	[esp+11Ch+var_11C], eax
		call	_EVP_PKEY_free
		inc	ebx
		mov	[esp+11Ch+var_D0], 0
		mov	[esp+11Ch+var_C8], 0

loc_444631:				; CODE XREF: _cms_main+1780j
		mov	eax, [esp+11Ch+var_F4]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_num
		cmp	ebx, eax
		jl	loc_444515
		cmp	[esp+11Ch+var_B0], 53h
		jnz	loc_444933
		test	[esp+11Ch+var_A8], 1000h
		jnz	loc_444933
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_110], eax
		mov	[esp+11Ch+var_114], 0
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_final
		test	eax, eax
		jnz	loc_444933

loc_444686:				; CODE XREF: _cms_main+17E4j
					; _cms_main+182Fj ...
		xor	esi, esi
		mov	ebx, 3
		jmp	loc_44347B
; ---------------------------------------------------------------------------
		align 10h

loc_4446A0:				; CODE XREF: _cms_main+1428j
		mov	eax, [esp+11Ch+var_A4]
		mov	[esp+11Ch+var_E4], eax
		mov	[esp+11Ch+var_C4], 0
		jmp	loc_444302
; ---------------------------------------------------------------------------

loc_4446B5:				; CODE XREF: _cms_main+404j
		mov	edx, 2Bh
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4446BF:				; CODE XREF: _cms_main+3E3j
		mov	edx, 1Ch
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4446C9:				; CODE XREF: _cms_main+3C2j
		mov	edx, 1Ah
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4446D3:				; CODE XREF: _cms_main+11FBj
		mov	[esp+11Ch+var_118], offset aNoSecretKeyId ; "No	secret key id\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_E4], 0
		mov	[esp+11Ch+var_C0], 0
		mov	[esp+11Ch+var_B8], 0
		jmp	loc_44404D
; ---------------------------------------------------------------------------

loc_444719:				; CODE XREF: _cms_main+13D3j
		mov	[esp+11Ch+var_118], 0
		mov	eax, [esp+11Ch+var_D8]
		mov	[esp+11Ch+var_11C], eax
		call	_SMIME_read_CMS
		mov	[esp+11Ch+var_E0], eax
		jmp	loc_44445A
; ---------------------------------------------------------------------------

loc_444736:				; CODE XREF: _cms_main+13C5j
					; _cms_main+255Fj
		mov	eax, [esp+11Ch+var_E0]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aCanTOpenReceip ; "Can't open receipt file %s\n"

loc_444746:				; CODE XREF: _cms_main+2591j
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf

loc_444753:				; CODE XREF: _cms_main+274Cj
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_DC], 0
		mov	[esp+11Ch+var_E0], 0
		mov	ebx, 2
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444781:				; CODE XREF: _cms_main+139Bj
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E0], 0
		jmp	loc_444466
; ---------------------------------------------------------------------------

loc_444796:				; CODE XREF: _cms_main+11E7j
		call	_EVP_des_ede3_cbc
		mov	[esp+11Ch+var_A0], eax
		jmp	loc_443F7D
; ---------------------------------------------------------------------------

loc_4447A4:				; CODE XREF: _cms_main+ACEj
		mov	[esp+11Ch+var_118], 0
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_11C], eax
		call	_d2i_CMS_bio
		mov	ebp, eax

loc_4447BA:				; CODE XREF: _cms_main+1B0Ej
					; _cms_main+1C59j
		test	ebp, ebp
		jz	loc_4454C7
		mov	edi, [esp+11Ch+var_7C]
		test	edi, edi
		jz	short loc_4447FB
		mov	eax, [esp+11Ch+var_40]
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_free
		mov	[esp+11Ch+var_118], offset aRb_6 ; "rb"
		mov	[esp+11Ch+var_11C], edi
		call	_BIO_new_file
		mov	[esp+11Ch+var_40], eax
		test	eax, eax
		jz	loc_44530E

loc_4447FB:				; CODE XREF: _cms_main+1A3Bj
		mov	edi, [esp+11Ch+var_8C]
		test	edi, edi
		jz	loc_444125
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_get1_certs
		mov	edi, eax
		mov	edx, eax
		mov	eax, [esp+11Ch+var_8C]
		call	_save_certs
		test	eax, eax
		jnz	loc_4449EE
		mov	eax, [esp+11Ch+var_8C]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aErrorWritingCe ; "Error writing certs to %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_DC], 0
		mov	[esp+11Ch+var_E0], 0
		mov	ebx, 5
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444878:				; CODE XREF: _cms_main+AC3j
		mov	[esp+11Ch+var_110], 0
		mov	[esp+11Ch+var_114], 0
		mov	[esp+11Ch+var_118], 0
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_11C], eax
		call	_PEM_read_bio_CMS
		mov	ebp, eax
		jmp	loc_4447BA
; ---------------------------------------------------------------------------

loc_4448A3:				; CODE XREF: _cms_main+1708j
					; _cms_main+1711j
		mov	eax, [esp+11Ch+var_50]
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_54]
		mov	[esp+11Ch+var_118], eax
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_setup_verify
		mov	edi, eax
		mov	[esp+11Ch+var_DC], eax
		test	eax, eax
		jz	loc_44554A
		mov	[esp+11Ch+var_118], offset _cms_cb
		mov	[esp+11Ch+var_11C], eax
		call	_X509_STORE_set_verify_cb
		mov	eax, [esp+11Ch+var_34]
		test	eax, eax
		jz	loc_4444AF
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], edi
		call	_X509_STORE_set1_param
		jmp	loc_4444AF
; ---------------------------------------------------------------------------
		align 10h

loc_444910:				; CODE XREF: _cms_main+16DFj
		mov	[esp+11Ch+var_118], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_new_fp
		mov	[esp+11Ch+var_E8], eax
		jmp	loc_444491
; ---------------------------------------------------------------------------

loc_444931:				; CODE XREF: _cms_main+1763j
		xor	edi, edi

loc_444933:				; CODE XREF: _cms_main+18BAj
					; _cms_main+18C8j ...
		test	ebp, ebp
		jz	loc_444C4A

loc_44493B:				; CODE XREF: _cms_main+2024j
		cmp	[esp+11Ch+var_B0], 22h
		jz	loc_444B12
		cmp	[esp+11Ch+var_B0], 27h
		jz	loc_444AEF
		cmp	[esp+11Ch+var_B0], 2Bh
		jz	loc_444A6F
		cmp	[esp+11Ch+var_B0], 29h
		jz	loc_444A26
		cmp	[esp+11Ch+var_B0], 2Dh
		jz	loc_444FBB
		cmp	[esp+11Ch+var_B0], 24h
		jz	loc_444F20
		cmp	[esp+11Ch+var_B0], 30h
		jz	loc_444AA6
		mov	edx, [esp+11Ch+var_78]
		test	edx, edx
		jz	loc_444E06
		cmp	[esp+11Ch+var_68], 0
		jz	short loc_4449C1
		mov	[esp+11Ch+var_110], 0
		mov	[esp+11Ch+var_114], 0
		mov	[esp+11Ch+var_118], ebp
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_ContentInfo_print_ctx

loc_4449C1:				; CODE XREF: _cms_main+1C0Fj
					; _cms_main+1E72j ...
		xor	esi, esi

loc_4449C3:				; CODE XREF: _cms_main+1D06j
					; _cms_main+1D7Dj ...
		xor	ebx, ebx
		jmp	loc_443488
; ---------------------------------------------------------------------------
		align 10h

loc_4449D0:				; CODE XREF: _cms_main+AB8j
		lea	eax, [esp+11Ch+var_40]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_11C], eax
		call	_SMIME_read_CMS
		mov	ebp, eax
		jmp	loc_4447BA
; ---------------------------------------------------------------------------

loc_4449EE:				; CODE XREF: _cms_main+1A94j
		mov	[esp+11Ch+var_118], offset _X509_free
		mov	[esp+11Ch+var_11C], edi
		call	_sk_pop_free
		jmp	loc_444125
; ---------------------------------------------------------------------------

loc_444A03:				; CODE XREF: _cms_main+1634j
		mov	[esp+11Ch+var_D4], 1
		cmp	[esp+11Ch+var_94], 0
		jnz	loc_4436C9
		mov	[esp+11Ch+var_118], offset aNoRecipientS_0 ; "No recipient(s) certificate(s) specifie"...
		jmp	loc_44425B
; ---------------------------------------------------------------------------

loc_444A26:				; CODE XREF: _cms_main+1BD1j
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_110], eax
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_40]
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_digest_verify
		test	eax, eax
		jle	loc_444AD6

loc_444A51:				; CODE XREF: _cms_main+1D40j
		mov	[esp+11Ch+var_118], offset aVerification_1 ; "Verification successful\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_443488
; ---------------------------------------------------------------------------

loc_444A6F:				; CODE XREF: _cms_main+1BC6j
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_110], eax
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_40]
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_uncompress
		xor	esi, esi
		test	eax, eax
		jnz	loc_4449C3

loc_444A9C:				; CODE XREF: _cms_main+1D5Dj
					; _cms_main+1D7Bj ...
		mov	ebx, 4
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444AA6:				; CODE XREF: _cms_main+1BF2j
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_10C], eax
		mov	eax, [esp+11Ch+var_DC]
		mov	[esp+11Ch+var_110], eax
		mov	eax, [esp+11Ch+var_C0]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], ebp
		mov	eax, [esp+11Ch+var_E0]
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_verify_receipt
		test	eax, eax
		jg	loc_444A51

loc_444AD6:				; CODE XREF: _cms_main+1CBBj
		mov	[esp+11Ch+var_118], offset aVerification_2 ; "Verification failure\n"

loc_444ADE:				; CODE XREF: _cms_main+1E80j
					; _cms_main+209Cj
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		jmp	short loc_444A9C
; ---------------------------------------------------------------------------

loc_444AEF:				; CODE XREF: _cms_main+1BBBj
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_data
		xor	esi, esi
		test	eax, eax
		jz	short loc_444A9C
		jmp	loc_4449C3
; ---------------------------------------------------------------------------

loc_444B12:				; CODE XREF: _cms_main+1BB0j
		test	[esp+11Ch+var_A8], 20000h
		jz	short loc_444B4C
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_108], eax
		mov	[esp+11Ch+var_10C], 0
		mov	[esp+11Ch+var_110], 0
		mov	[esp+11Ch+var_114], 0
		mov	[esp+11Ch+var_118], 0
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_decrypt

loc_444B4C:				; CODE XREF: _cms_main+1D8Aj
		mov	eax, [esp+11Ch+var_CC]
		test	eax, eax
		jz	short loc_444B86
		mov	edx, [esp+11Ch+var_6C]
		mov	[esp+11Ch+var_10C], edx
		mov	edx, [esp+11Ch+var_BC]
		mov	[esp+11Ch+var_110], edx
		mov	edx, [esp+11Ch+var_90]
		mov	[esp+11Ch+var_114], edx
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_decrypt_set1_key
		test	eax, eax
		jz	loc_444C36

loc_444B86:				; CODE XREF: _cms_main+1DC2j
		mov	eax, [esp+11Ch+var_C8]
		test	eax, eax
		jz	short loc_444BAA
		mov	edx, [esp+11Ch+var_C4]
		mov	[esp+11Ch+var_114], edx
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_decrypt_set1_pkey
		test	eax, eax
		jz	loc_444C40

loc_444BAA:				; CODE XREF: _cms_main+1DFCj
		mov	eax, [esp+11Ch+var_94]
		test	eax, eax
		jz	short loc_444BCD
		mov	[esp+11Ch+var_114], 0FFFFFFFFh
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_decrypt_set1_password
		test	eax, eax
		jz	short loc_444C15

loc_444BCD:				; CODE XREF: _cms_main+1E23j
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_108], eax
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_10C], eax
		mov	eax, [esp+11Ch+var_40]
		mov	[esp+11Ch+var_110], eax
		mov	[esp+11Ch+var_114], 0
		mov	[esp+11Ch+var_118], 0
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_decrypt
		test	eax, eax
		jnz	loc_4449C1
		mov	[esp+11Ch+var_118], offset aErrorDecrypt_1 ; "Error decrypting CMS structure\n"
		jmp	loc_444ADE
; ---------------------------------------------------------------------------

loc_444C15:				; CODE XREF: _cms_main+1E3Bj
		mov	[esp+11Ch+var_118], offset aErrorDecrypt_2 ; "Error decrypting CMS using password\n"

loc_444C1D:				; CODE XREF: _cms_main+1EAEj
					; _cms_main+1EB8j
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_puts
		xor	esi, esi
		mov	ebx, 4
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444C36:				; CODE XREF: _cms_main+1DF0j
		mov	[esp+11Ch+var_118], offset aErrorDecrypt_3 ; "Error decrypting CMS using secret	key\n"
		jmp	short loc_444C1D
; ---------------------------------------------------------------------------

loc_444C40:				; CODE XREF: _cms_main+1E14j
		mov	[esp+11Ch+var_118], offset aErrorDecrypt_4 ; "Error decrypting CMS using private key\"...
		jmp	short loc_444C1D
; ---------------------------------------------------------------------------

loc_444C4A:				; CODE XREF: _cms_main+1BA5j
		mov	[esp+11Ch+var_118], offset aErrorCreatingC ; "Error creating CMS structure\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		mov	ebx, 3
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444C6B:				; CODE XREF: _cms_main+176Ej
		test	byte ptr [esp+11Ch+var_A8], 40h
		jz	short loc_444C84
		cmp	[esp+11Ch+var_98], 6
		jnz	short loc_444C84
		or	[esp+11Ch+var_A8], 1000h

loc_444C84:				; CODE XREF: _cms_main+1EE0j
					; _cms_main+1EEAj
		or	[esp+11Ch+var_A8], 4000h
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_10C], eax
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_110], eax
		mov	eax, [esp+11Ch+var_C0]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], 0
		mov	[esp+11Ch+var_11C], 0
		call	_CMS_sign
		mov	ebp, eax
		test	eax, eax
		jz	loc_444DF1
		mov	eax, [esp+11Ch+var_B4]
		test	eax, eax
		jz	short loc_444CD6
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_set1_eContentType

loc_444CD6:				; CODE XREF: _cms_main+1F38j
		mov	eax, [esp+11Ch+var_F8]
		test	eax, eax
		jz	short loc_444D4F
		call	_make_names_stack
		mov	ebx, eax
		test	eax, eax
		jz	short loc_444D2C
		mov	eax, [esp+11Ch+var_EC]
		test	eax, eax
		jz	loc_444DFF
		call	_make_names_stack
		test	eax, eax
		jz	short loc_444D2C

loc_444CFE:				; CODE XREF: _cms_main+2071j
		mov	[esp+11Ch+var_10C], ebx
		mov	[esp+11Ch+var_110], eax
		mov	eax, [esp+11Ch+var_AC]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], 0FFFFFFFFh
		mov	[esp+11Ch+var_11C], 0
		call	_CMS_ReceiptRequest_create0
		mov	edi, eax
		test	eax, eax
		jnz	loc_44450E

loc_444D2C:				; CODE XREF: _cms_main+1F57j
					; _cms_main+1F6Cj
		mov	[esp+11Ch+var_118], offset aSignedReceiptR ; "Signed Receipt Request Creation Error\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_puts
		xor	esi, esi
		xor	edi, edi
		mov	ebx, 3
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444D4F:				; CODE XREF: _cms_main+1F4Cj
		xor	edi, edi
		jmp	loc_44450E
; ---------------------------------------------------------------------------

loc_444D56:				; CODE XREF: _cms_main+175Bj
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_get0_SignerInfos
		test	eax, eax
		jz	loc_444DF1
		mov	[esp+11Ch+var_118], 0
		mov	[esp+11Ch+var_11C], eax
		call	_sk_value
		mov	ebx, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_10C], ebx
		mov	edx, [esp+11Ch+var_C0]
		mov	[esp+11Ch+var_110], edx
		mov	edx, [esp+11Ch+var_C8]
		mov	[esp+11Ch+var_114], edx
		mov	edx, [esp+11Ch+var_D0]
		mov	[esp+11Ch+var_118], edx
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_sign_receipt
		mov	esi, eax
		test	eax, eax
		jz	short loc_444DF1
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_ContentInfo_free
		mov	ebp, esi

loc_444DAE:				; CODE XREF: _cms_main+26FCj
		mov	[esp+11Ch+var_A8], ebx
		xor	edi, edi
		jmp	loc_44493B
; ---------------------------------------------------------------------------

loc_444DB9:				; CODE XREF: _cms_main+1750j
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_10C], eax
		mov	eax, [esp+11Ch+var_90]
		mov	[esp+11Ch+var_110], eax
		mov	eax, [esp+11Ch+var_CC]
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_A0]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_EncryptedData_encrypt
		mov	ebp, eax
		xor	edi, edi
		jmp	loc_444933
; ---------------------------------------------------------------------------

loc_444DF1:				; CODE XREF: _cms_main+1F2Cj
					; _cms_main+1FD0j ...
		xor	esi, esi
		xor	edi, edi
		mov	ebx, 3
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444DFF:				; CODE XREF: _cms_main+1F5Fj
		xor	eax, eax
		jmp	loc_444CFE
; ---------------------------------------------------------------------------

loc_444E06:				; CODE XREF: _cms_main+1C01j
		cmp	[esp+11Ch+var_98], 6
		jz	short loc_444E87
		cmp	[esp+11Ch+var_98], 3
		jz	short loc_444E65
		cmp	[esp+11Ch+var_98], 1
		jz	short loc_444E31
		mov	[esp+11Ch+var_118], offset aBadOutputFo_13 ; "Bad output format	for CMS	file\n"
		jmp	loc_444ADE
; ---------------------------------------------------------------------------

loc_444E31:				; CODE XREF: _cms_main+2092j
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_110], eax
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], ebp
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_11C], eax
		call	_i2d_CMS_bio_stream

loc_444E51:				; CODE XREF: _cms_main+20F5j
					; _cms_main+218Bj
		test	eax, eax
		jg	loc_4449C1
		xor	esi, esi
		mov	ebx, 6
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444E65:				; CODE XREF: _cms_main+2088j
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_110], eax
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], ebp
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_11C], eax
		call	_PEM_write_bio_CMS_stream
		jmp	short loc_444E51
; ---------------------------------------------------------------------------

loc_444E87:				; CODE XREF: _cms_main+207Ej
		mov	eax, [esp+11Ch+var_60]
		test	eax, eax
		jz	short loc_444EAA
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aToS_0 ; "To: %s\n"
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf

loc_444EAA:				; CODE XREF: _cms_main+2100j
		mov	eax, [esp+11Ch+var_5C]
		test	eax, eax
		jz	short loc_444ECD
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aFromS_0 ; "From: %s\n"
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf

loc_444ECD:				; CODE XREF: _cms_main+2123j
		mov	eax, [esp+11Ch+var_58]
		test	eax, eax
		jz	short loc_444EF0
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aSubjectS_3 ; "Subject: %s\n"
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf

loc_444EF0:				; CODE XREF: _cms_main+2146j
		mov	eax, [esp+11Ch+var_A8]
		cmp	[esp+11Ch+var_B0], 76h
		mov	[esp+11Ch+var_110], eax
		jz	loc_445000
		mov	eax, [esp+11Ch+var_E4]

loc_444F07:				; CODE XREF: _cms_main+2277j
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], ebp
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_11C], eax
		call	_SMIME_write_CMS
		jmp	loc_444E51
; ---------------------------------------------------------------------------

loc_444F20:				; CODE XREF: _cms_main+1BE7j
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_108], eax
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_10C], eax
		mov	eax, [esp+11Ch+var_40]
		mov	[esp+11Ch+var_110], eax
		mov	eax, [esp+11Ch+var_DC]
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_C0]
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_verify
		test	eax, eax
		jle	loc_44519C
		mov	[esp+11Ch+var_118], offset aVerification_1 ; "Verification successful\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		cmp	[esp+11Ch+var_A4], 0
		jz	loc_445014
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_get0_signers
		mov	ebx, eax
		mov	edx, eax
		mov	esi, [esp+11Ch+var_A4]
		mov	eax, esi
		call	_save_certs
		test	eax, eax
		jnz	short loc_44500C
		mov	[esp+11Ch+var_114], esi
		mov	[esp+11Ch+var_118], offset aErrorWriting_1 ; "Error writing signers to %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		mov	ebx, 5
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_444FBB:				; CODE XREF: _cms_main+1BDCj
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_108], eax
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_10C], eax
		mov	eax, [esp+11Ch+var_40]
		mov	[esp+11Ch+var_110], eax
		mov	eax, [esp+11Ch+var_90]
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_CC]
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_EncryptedData_decrypt
		xor	esi, esi
		test	eax, eax
		jz	loc_444A9C
		jmp	loc_4449C3
; ---------------------------------------------------------------------------

loc_445000:				; CODE XREF: _cms_main+216Dj
		mov	eax, [esp+11Ch+var_40]
		jmp	loc_444F07
; ---------------------------------------------------------------------------

loc_44500C:				; CODE XREF: _cms_main+2204j
		mov	[esp+11Ch+var_11C], ebx
		call	_sk_free

loc_445014:				; CODE XREF: _cms_main+21E5j
		cmp	[esp+11Ch+var_64], 0
		jz	loc_4449C1
		mov	esi, ds:_bio_err
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_get0_SignerInfos
		mov	[esp+11Ch+var_B0], eax
		xor	ebx, ebx

loc_445036:				; CODE XREF: _cms_main+23F9j
					; _cms_main+2407j
		mov	eax, [esp+11Ch+var_B0]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_num
		cmp	ebx, eax
		jge	loc_4449C1
		mov	[esp+11Ch+var_118], ebx
		mov	eax, [esp+11Ch+var_B0]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_value
		lea	edx, [esp+11Ch+var_30]
		mov	[esp+11Ch+var_118], edx
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_get1_ReceiptRequest
		mov	[esp+11Ch+var_AC], eax
		inc	ebx
		mov	[esp+11Ch+var_114], ebx
		mov	[esp+11Ch+var_118], offset aSignerD ; "Signer %d:\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	edx, [esp+11Ch+var_AC]
		test	edx, edx
		jz	loc_445221
		js	loc_4451FA
		lea	eax, [esp+11Ch+var_28]
		mov	[esp+11Ch+var_10C], eax
		lea	eax, [esp+11Ch+var_24]
		mov	[esp+11Ch+var_110], eax
		lea	eax, [esp+11Ch+var_2C]
		mov	[esp+11Ch+var_114], eax
		lea	eax, [esp+11Ch+var_20]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_30]
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_ReceiptRequest_get0_values
		mov	[esp+11Ch+var_118], offset aSignedContentI ; "	Signed Content ID:\n"
		mov	[esp+11Ch+var_11C], esi
		call	_BIO_puts
		mov	eax, [esp+11Ch+var_20]
		mov	[esp+11Ch+var_11C], eax
		call	_ASN1_STRING_length
		mov	[esp+11Ch+var_AC], eax
		mov	eax, [esp+11Ch+var_20]
		mov	[esp+11Ch+var_11C], eax
		call	_ASN1_STRING_data
		mov	[esp+11Ch+var_110], 4
		mov	edx, [esp+11Ch+var_AC]
		mov	[esp+11Ch+var_114], edx
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], esi
		call	_BIO_dump_indent
		mov	[esp+11Ch+var_118], offset aReceiptsFrom ; "  Receipts From"
		mov	[esp+11Ch+var_11C], esi
		call	_BIO_puts
		cmp	[esp+11Ch+var_24], 0
		jz	loc_4451D5
		mov	[esp+11Ch+var_118], offset aList ; " List:\n"
		mov	[esp+11Ch+var_11C], esi
		call	_BIO_puts
		mov	edx, [esp+11Ch+var_24]
		mov	eax, esi
		call	_gnames_stack_print

loc_445162:				; CODE XREF: _cms_main+2465j
					; _cms_main+24BFj ...
		mov	[esp+11Ch+var_118], offset aReceiptsTo ; "  Receipts To:\n"
		mov	[esp+11Ch+var_11C], esi
		call	_BIO_puts
		mov	edx, [esp+11Ch+var_28]
		mov	eax, esi
		call	_gnames_stack_print

loc_445180:				; CODE XREF: _cms_main+248Cj
					; _cms_main+24A6j
		mov	eax, [esp+11Ch+var_30]
		test	eax, eax
		jz	loc_445036
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_ReceiptRequest_free
		jmp	loc_445036
; ---------------------------------------------------------------------------

loc_44519C:				; CODE XREF: _cms_main+21C5j
		mov	[esp+11Ch+var_118], offset aVerification_2 ; "Verification failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		cmp	[esp+11Ch+var_9C], 0
		jz	loc_444A9C
		mov	ebx, ds:_verify_err
		add	ebx, 20h
		jz	loc_443488
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_4451D5:				; CODE XREF: _cms_main+23AEj
		mov	eax, [esp+11Ch+var_2C]
		cmp	eax, 1
		jz	short loc_445254
		test	eax, eax
		jnz	short loc_44523B
		mov	[esp+11Ch+var_118], offset aAll	; ": All\n"
		mov	[esp+11Ch+var_11C], esi
		call	_BIO_puts
		jmp	loc_445162
; ---------------------------------------------------------------------------

loc_4451FA:				; CODE XREF: _cms_main+2307j
		mov	[esp+11Ch+var_118], offset aReceiptRequest ; "	Receipt	Request	Parse Error\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_puts
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_ERR_print_errors
		jmp	loc_445180
; ---------------------------------------------------------------------------

loc_445221:				; CODE XREF: _cms_main+2301j
		mov	[esp+11Ch+var_118], offset aNoReceiptReque ; "	No Receipt Request\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_puts
		jmp	loc_445180
; ---------------------------------------------------------------------------

loc_44523B:				; CODE XREF: _cms_main+2453j
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aUnknownD ; " Unknown (%d)\n"
		mov	[esp+11Ch+var_11C], esi
		call	_BIO_printf
		jmp	loc_445162
; ---------------------------------------------------------------------------

loc_445254:				; CODE XREF: _cms_main+244Fj
		mov	[esp+11Ch+var_118], offset aFirstTier ;	": First Tier\n"
		mov	[esp+11Ch+var_11C], esi
		call	_BIO_puts
		jmp	loc_445162
; ---------------------------------------------------------------------------

loc_445269:				; CODE XREF: _cms_main+5D4j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aText_15 ; "-text"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_4452AF
		or	[esp+11Ch+var_A8], 1
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_44528F:				; CODE XREF: _cms_main+5B4j
		call	_EVP_camellia_256_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4452AF:				; CODE XREF: _cms_main+24F3j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNointern_0 ; "-nointern"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445326
		or	[esp+11Ch+var_A8], 10h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4452D5:				; CODE XREF: _cms_main+13A9j
		mov	[esp+11Ch+var_118], offset aRb_6 ; "rb"
		mov	eax, [esp+11Ch+var_E0]
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_new_file
		mov	[esp+11Ch+var_D8], eax
		test	eax, eax
		jz	loc_444736
		mov	[esp+11Ch+var_118], 0
		mov	[esp+11Ch+var_11C], eax
		call	_d2i_CMS_bio
		mov	[esp+11Ch+var_E0], eax
		jmp	loc_44445A
; ---------------------------------------------------------------------------

loc_44530E:				; CODE XREF: _cms_main+1A65j
		mov	eax, [esp+11Ch+var_7C]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aCanTReadCont_0 ; "Can't read content file %s\n"
		jmp	loc_444746
; ---------------------------------------------------------------------------

loc_445326:				; CODE XREF: _cms_main+2539j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNoverify_1 ; "-noverify"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	short loc_44535A
		mov	[esp+11Ch+var_118], offset aNo_signer_cert ; "-no_signer_cert_verify"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445366

loc_44535A:				; CODE XREF: _cms_main+25B0j
		or	[esp+11Ch+var_A8], 20h
		xor	eax, eax
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445366:				; CODE XREF: _cms_main+25C8j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNocerts_1 ;	"-nocerts"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	loc_4455C2
		or	[esp+11Ch+var_A8], 2
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445390:				; CODE XREF: _cms_main+1745j
		mov	ebx, [esp+11Ch+var_A8]
		or	bh, 40h
		mov	[esp+11Ch+var_110], ebx
		mov	eax, [esp+11Ch+var_A0]
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_B8]
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_encrypt
		mov	ebp, eax
		test	eax, eax
		jz	loc_444DF1
		mov	eax, [esp+11Ch+var_CC]
		test	eax, eax
		jz	short loc_445423
		mov	[esp+11Ch+var_FC], 0
		mov	[esp+11Ch+var_100], 0
		mov	[esp+11Ch+var_104], 0
		mov	edx, [esp+11Ch+var_6C]
		mov	[esp+11Ch+var_108], edx
		mov	edx, [esp+11Ch+var_BC]
		mov	[esp+11Ch+var_10C], edx
		mov	edx, [esp+11Ch+var_90]
		mov	[esp+11Ch+var_110], edx
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], 0
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_add0_recipient_key
		test	eax, eax
		jz	loc_444DF1
		mov	[esp+11Ch+var_BC], 0

loc_445423:				; CODE XREF: _cms_main+2637j
		cmp	[esp+11Ch+var_94], 0
		jz	short loc_44547A
		mov	eax, [esp+11Ch+var_94]
		mov	[esp+11Ch+var_11C], eax
		call	_BUF_strdup
		mov	esi, eax
		test	eax, eax
		jz	short loc_4454B3
		mov	[esp+11Ch+var_104], 0
		mov	[esp+11Ch+var_108], 0FFFFFFFFh
		mov	[esp+11Ch+var_10C], eax
		mov	[esp+11Ch+var_110], 0
		mov	[esp+11Ch+var_114], 0
		mov	[esp+11Ch+var_118], 0FFFFFFFFh
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_add0_recipient_password
		test	eax, eax
		jz	short loc_4454B3

loc_44547A:				; CODE XREF: _cms_main+269Bj
		test	[esp+11Ch+var_A8], 1000h
		jz	short loc_445491

loc_445484:				; CODE XREF: _cms_main+2721j
		mov	[esp+11Ch+var_CC], 0
		jmp	loc_444DAE
; ---------------------------------------------------------------------------

loc_445491:				; CODE XREF: _cms_main+26F2j
		mov	[esp+11Ch+var_110], ebx
		mov	[esp+11Ch+var_114], 0
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_118], eax
		mov	[esp+11Ch+var_11C], ebp
		call	_CMS_final
		xor	esi, esi
		test	eax, eax
		jnz	short loc_445484

loc_4454B3:				; CODE XREF: _cms_main+26B0j
					; _cms_main+26E8j
		mov	[esp+11Ch+var_CC], 0
		xor	edi, edi
		mov	ebx, 3
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_4454C7:				; CODE XREF: _cms_main+1A2Cj
		mov	[esp+11Ch+var_118], offset aErrorReading_6 ; "Error reading S/MIME message\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		jmp	loc_444753
; ---------------------------------------------------------------------------

loc_4454E1:				; CODE XREF: _cms_main+16FBj
		mov	eax, [esp+11Ch+var_80]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aCanTOpenOutp_5 ; "Can't open output file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_DC], 0
		mov	ebx, 2
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_445517:				; CODE XREF: _cms_main+16D0j
		mov	[esp+11Ch+var_118], offset aErrorReadingRe ; "Error reading receipt\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_DC], 0
		mov	ebx, 2
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_44554A:				; CODE XREF: _cms_main+1B3Ej
		xor	esi, esi
		xor	edi, edi
		mov	ebx, 2
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_445558:				; CODE XREF: _cms_main+172Fj
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_114], eax
		mov	eax, [esp+11Ch+var_74]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_digest_create
		mov	ebp, eax
		xor	edi, edi
		jmp	loc_444933
; ---------------------------------------------------------------------------

loc_445580:				; CODE XREF: _cms_main+1724j
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_data_create
		mov	ebp, eax
		xor	edi, edi
		jmp	loc_444933
; ---------------------------------------------------------------------------

loc_44559D:				; CODE XREF: _cms_main+173Aj
		mov	eax, [esp+11Ch+var_A8]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], 0FFFFFFFFh
		mov	eax, [esp+11Ch+var_E4]
		mov	[esp+11Ch+var_11C], eax
		call	_CMS_compress
		mov	ebp, eax
		xor	edi, edi
		jmp	loc_444933
; ---------------------------------------------------------------------------

loc_4455C2:				; CODE XREF: _cms_main+25F0j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNoattr_0 ; "-noattr"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	loc_445803
		or	[esp+11Ch+var_A8], 100h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4455EF:				; CODE XREF: _cms_main+420j
		mov	edx, 2Dh
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4455F9:				; CODE XREF: _cms_main+514j
		call	_EVP_aes_128_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445619:				; CODE XREF: _cms_main+4F4j
		call	_EVP_rc2_64_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445639:				; CODE XREF: _cms_main+4D4j
		call	_EVP_rc2_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445659:				; CODE XREF: _cms_main+4B4j
		call	_EVP_rc2_40_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445679:				; CODE XREF: _cms_main+494j
		call	_EVP_seed_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445699:				; CODE XREF: _cms_main+474j
		call	_EVP_des_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4456B9:				; CODE XREF: _cms_main+454j
		call	_EVP_des_ede3_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4456D9:				; CODE XREF: _cms_main+438j
		mov	edx, 1Eh
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4456E3:				; CODE XREF: _cms_main+594j
		call	_EVP_camellia_192_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445703:				; CODE XREF: _cms_main+574j
		call	_EVP_camellia_128_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445723:				; CODE XREF: _cms_main+554j
		call	_EVP_aes_256_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445743:				; CODE XREF: _cms_main+534j
		call	_EVP_aes_192_cbc
		mov	[esp+11Ch+var_A0], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445763:				; CODE XREF: _cms_main+1574j
		mov	[esp+11Ch+var_C8], 0
		jmp	loc_443814
; ---------------------------------------------------------------------------

loc_445770:				; CODE XREF: _cms_main+1554j
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_ERR_print_errors
		xor	esi, esi
		xor	edi, edi
		mov	[esp+11Ch+var_D8], 0
		mov	[esp+11Ch+var_E8], 0
		mov	[esp+11Ch+var_E4], 0
		mov	[esp+11Ch+var_C8], 0
		mov	[esp+11Ch+var_D0], 0
		mov	[esp+11Ch+var_DC], 0
		mov	[esp+11Ch+var_E0], 0
		xor	ebp, ebp
		mov	ebx, 2
		jmp	loc_44347B
; ---------------------------------------------------------------------------

loc_4457C5:				; CODE XREF: _cms_main+117Fj
		cmp	[esp+11Ch+var_CC], 0
		jnz	loc_443EF4
		cmp	[esp+11Ch+var_94], 0
		jnz	loc_4436C9
		mov	[esp+11Ch+var_118], offset aNoRecipientC_0 ; "No recipient certificate or key specifi"...
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		mov	[esp+11Ch+var_3C], 1
		jmp	loc_443ECD
; ---------------------------------------------------------------------------

loc_445803:				; CODE XREF: _cms_main+284Cj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNodetach_0 ; "-nodetach"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445829
		and	[esp+11Ch+var_A8], 0FFFFFFBFh
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445829:				; CODE XREF: _cms_main+2A8Dj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNosmimecap_0 ; "-nosmimecap"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445852
		or	[esp+11Ch+var_A8], 200h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445852:				; CODE XREF: _cms_main+2AB3j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aBinary_1 ; "-binary"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_44587B
		or	[esp+11Ch+var_A8], 80h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_44587B:				; CODE XREF: _cms_main+2ADCj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aKeyid ; "-keyid"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_4458A4
		or	[esp+11Ch+var_A8], 10000h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4458A4:				; CODE XREF: _cms_main+2B05j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNosigs_0 ; "-nosigs"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_4458CA
		or	[esp+11Ch+var_A8], 0Ch
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4458CA:				; CODE XREF: _cms_main+2B2Ej
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNo_content_ver ; "-no_content_verify"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_4458F0
		or	[esp+11Ch+var_A8], 4
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4458F0:				; CODE XREF: _cms_main+2B54j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNo_attr_verify ; "-no_attr_verify"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445916
		or	[esp+11Ch+var_A8], 8
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445916:				; CODE XREF: _cms_main+2B7Aj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aStream_0 ; "-stream"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	short loc_44594E
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aIndef_0 ; "-indef"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_44595B

loc_44594E:				; CODE XREF: _cms_main+2BA0j
		or	[esp+11Ch+var_A8], 1000h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_44595B:				; CODE XREF: _cms_main+2BBCj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNoindef_0 ;	"-noindef"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445984
		and	[esp+11Ch+var_A8], 0FFFFEFFFh
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445984:				; CODE XREF: _cms_main+2BE5j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNooldmime_0	; "-nooldmime"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_4459AD
		or	[esp+11Ch+var_A8], 400h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4459AD:				; CODE XREF: _cms_main+2C0Ej
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aCrlfeol_0 ;	"-crlfeol"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_4459D6
		or	[esp+11Ch+var_A8], 800h
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4459D6:				; CODE XREF: _cms_main+2C37j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aNoout_16 ; "-noout"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445BD2
		mov	[esp+11Ch+var_118], offset aReceipt_reques ; "-receipt_request_print"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445BB7
		mov	[esp+11Ch+var_118], offset aReceipt_requ_0 ; "-receipt_request_all"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445BE2
		mov	[esp+11Ch+var_118], offset aReceipt_requ_1 ; "-receipt_request_first"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445BAA
		mov	[esp+11Ch+var_118], offset aReceipt_requ_2 ; "-receipt_request_from"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445ABE
		cmp	dword ptr [ebp+4], 0
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		cmp	[esp+11Ch+var_EC], 0
		jnz	short loc_445A8A
		call	_sk_new_null
		mov	[esp+11Ch+var_EC], eax
		mov	edx, [esp+11Ch+var_C0]

loc_445A8A:				; CODE XREF: _cms_main+2CEBj
		mov	[esp+11Ch+var_C0], edx
		mov	eax, [esp+11Ch+var_44]
		mov	eax, [eax]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_EC]

loc_445A9F:				; CODE XREF: _cms_main+2D87j
		mov	[esp+11Ch+var_11C], eax
		call	_sk_push
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445ABE:				; CODE XREF: _cms_main+2CD0j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aReceipt_requ_3 ; "-receipt_request_to"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445B19
		cmp	dword ptr [ebp+4], 0
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		cmp	[esp+11Ch+var_F8], 0
		jnz	short loc_445B02
		call	_sk_new_null
		mov	[esp+11Ch+var_F8], eax
		mov	edx, [esp+11Ch+var_C0]

loc_445B02:				; CODE XREF: _cms_main+2D63j
		mov	[esp+11Ch+var_C0], edx
		mov	eax, [esp+11Ch+var_44]
		mov	eax, [eax]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_F8]
		jmp	short loc_445A9F
; ---------------------------------------------------------------------------

loc_445B19:				; CODE XREF: _cms_main+2D48j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aPrint_0 ; "-print"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	loc_445BC7
		mov	[esp+11Ch+var_118], offset aSecretkey ;	"-secretkey"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	loc_445C16
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		lea	ecx, [esp+11Ch+var_20]
		mov	[esp+11Ch+var_118], ecx
		mov	[esp+11Ch+var_11C], eax
		call	_string_to_hex
		mov	[esp+11Ch+var_CC], eax
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	short loc_445BEF
		mov	eax, [esp+11Ch+var_20]
		mov	[esp+11Ch+var_90], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445BAA:				; CODE XREF: _cms_main+2CB4j
		mov	[esp+11Ch+var_AC], 1
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445BB7:				; CODE XREF: _cms_main+2C7Cj
		mov	[esp+11Ch+var_64], 1
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445BC7:				; CODE XREF: _cms_main+2DA3j
		mov	[esp+11Ch+var_68], 1

loc_445BD2:				; CODE XREF: _cms_main+2C60j
		mov	[esp+11Ch+var_78], 1
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445BE2:				; CODE XREF: _cms_main+2C98j
		mov	[esp+11Ch+var_AC], 0
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445BEF:				; CODE XREF: _cms_main+2DF7j
		mov	eax, [esp+11Ch+var_44]
		mov	eax, [eax]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aInvalidKeyS	; "Invalid key %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_445C16:				; CODE XREF: _cms_main+2DBFj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aSecretkeyid	; "-secretkeyid"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445CAE
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		lea	ecx, [esp+11Ch+var_20]
		mov	[esp+11Ch+var_118], ecx
		mov	[esp+11Ch+var_11C], eax
		call	_string_to_hex
		mov	[esp+11Ch+var_BC], eax
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	short loc_445C87
		mov	eax, [esp+11Ch+var_20]
		mov	[esp+11Ch+var_6C], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445C87:				; CODE XREF: _cms_main+2ED4j
		mov	eax, [esp+11Ch+var_44]
		mov	eax, [eax]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aInvalidIdS ; "Invalid id %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_445CAE:				; CODE XREF: _cms_main+2EA0j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aPwri_password ; "-pwri_password"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445CE4
		mov	edi, [ebp+4]
		mov	[esp+11Ch+var_94], edi
		test	edi, edi
		jz	loc_443901

loc_445CDC:				; CODE XREF: _cms_main+303Bj
					; _cms_main+306Bj ...
		add	ebp, 4
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445CE4:				; CODE XREF: _cms_main+2F38j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aEcontent_type ; "-econtent_type"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445D44
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		mov	[esp+11Ch+var_118], 0
		mov	[esp+11Ch+var_11C], eax
		call	_OBJ_txt2obj
		mov	[esp+11Ch+var_B4], eax
		test	eax, eax
		jz	short loc_445D7F

loc_445D2D:				; CODE XREF: _cms_main+327Aj
					; _cms_main+3577j
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445D44:				; CODE XREF: _cms_main+2F6Ej
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aRand_11 ; "-rand"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445DA6
		mov	edi, [ebp+4]
		mov	[esp+11Ch+var_C4], edi
		test	edi, edi
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_D4], 1
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445D7F:				; CODE XREF: _cms_main+2F9Bj
		mov	eax, [esp+11Ch+var_44]
		mov	eax, [eax]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aInvalidOidS	; "Invalid OID %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_445DA6:				; CODE XREF: _cms_main+2FCEj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aEngine_28 ;	"-engine"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445DD6
		mov	edi, [ebp+4]
		mov	[esp+11Ch+var_D0], edi
		test	edi, edi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_445DD6:				; CODE XREF: _cms_main+3030j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aPassin_13 ;	"-passin"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445E06
		mov	edi, [ebp+4]
		mov	[esp+11Ch+var_DC], edi
		test	edi, edi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_445E06:				; CODE XREF: _cms_main+3060j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aTo_0 ; "-to"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445E39
		mov	edi, [ebp+4]
		mov	[esp+11Ch+var_60], edi
		test	edi, edi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_445E39:				; CODE XREF: _cms_main+3090j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aFrom_0 ; "-from"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445E6C
		mov	edi, [ebp+4]
		mov	[esp+11Ch+var_5C], edi
		test	edi, edi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_445E6C:				; CODE XREF: _cms_main+30C3j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aSubject_6 ;	"-subject"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445E9F
		mov	esi, [ebp+4]
		mov	[esp+11Ch+var_58], esi
		test	esi, esi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_445E9F:				; CODE XREF: _cms_main+30F6j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aSigner_0 ; "-signer"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	loc_445F65
		cmp	dword ptr [ebp+4], 0
		jz	loc_443901
		cmp	[esp+11Ch+var_A4], 0
		jz	short loc_445F4F
		cmp	[esp+11Ch+var_F4], 0
		jnz	short loc_445EE4
		call	_sk_new_null
		mov	[esp+11Ch+var_F4], eax
		mov	edx, [esp+11Ch+var_C0]

loc_445EE4:				; CODE XREF: _cms_main+3145j
		mov	[esp+11Ch+var_C0], edx
		mov	eax, [esp+11Ch+var_A4]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_F4]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_push
		mov	eax, [esp+11Ch+var_E8]
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	short loc_445F0C
		mov	[esp+11Ch+var_A4], eax

loc_445F0C:				; CODE XREF: _cms_main+3176j
		cmp	[esp+11Ch+var_F0], 0
		jnz	short loc_445F24
		mov	[esp+11Ch+var_E8], edx
		call	_sk_new_null
		mov	[esp+11Ch+var_F0], eax
		mov	edx, [esp+11Ch+var_E8]

loc_445F24:				; CODE XREF: _cms_main+3181j
		mov	[esp+11Ch+var_C0], edx
		mov	eax, [esp+11Ch+var_A4]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_push
		mov	[esp+11Ch+var_E8], 0
		mov	ebp, [esp+11Ch+var_44]
		mov	edx, [esp+11Ch+var_C0]

loc_445F4F:				; CODE XREF: _cms_main+313Ej
		mov	eax, [ebp+4]
		mov	[esp+11Ch+var_A4], eax
		mov	eax, [esp+11Ch+var_3C]
		add	ebp, 4
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_445F65:				; CODE XREF: _cms_main+3129j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aRecip_0 ; "-recip"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445F95
		mov	edi, [ebp+4]
		mov	[esp+11Ch+var_E4], edi
		test	edi, edi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_445F95:				; CODE XREF: _cms_main+31EFj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aCertsout ; "-certsout"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_445FC8
		mov	esi, [ebp+4]
		mov	[esp+11Ch+var_8C], esi
		test	esi, esi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_445FC8:				; CODE XREF: _cms_main+321Fj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aMd_2 ; "-md"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_446037
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		mov	[esp+11Ch+var_11C], eax
		call	_EVP_get_digestbyname
		mov	[esp+11Ch+var_74], eax
		test	eax, eax
		jnz	loc_445D2D
		mov	eax, [esp+11Ch+var_44]
		mov	eax, [eax]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], offset aUnknownDiges_0 ; "Unknown digest %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_11C], eax
		call	_BIO_printf
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_446037:				; CODE XREF: _cms_main+3252j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aInkey_3 ; "-inkey"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	loc_4460FC
		cmp	dword ptr [ebp+4], 0
		jz	loc_443901
		cmp	[esp+11Ch+var_E8], 0
		jz	short loc_4460E6
		cmp	[esp+11Ch+var_A4], 0
		jz	loc_444293
		cmp	[esp+11Ch+var_F4], 0
		jnz	short loc_44608B
		mov	[esp+11Ch+var_C0], edx
		call	_sk_new_null
		mov	[esp+11Ch+var_F4], eax
		mov	edx, [esp+11Ch+var_C0]

loc_44608B:				; CODE XREF: _cms_main+32E8j
		mov	[esp+11Ch+var_C0], edx
		mov	eax, [esp+11Ch+var_A4]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_F4]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_push
		cmp	[esp+11Ch+var_F0], 0
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_4460BB
		call	_sk_new_null
		mov	[esp+11Ch+var_F0], eax
		mov	edx, [esp+11Ch+var_C0]

loc_4460BB:				; CODE XREF: _cms_main+331Cj
		mov	[esp+11Ch+var_C0], edx
		mov	eax, [esp+11Ch+var_E8]
		mov	[esp+11Ch+var_118], eax
		mov	eax, [esp+11Ch+var_F0]
		mov	[esp+11Ch+var_11C], eax
		call	_sk_push
		mov	[esp+11Ch+var_A4], 0
		mov	ebp, [esp+11Ch+var_44]
		mov	edx, [esp+11Ch+var_C0]

loc_4460E6:				; CODE XREF: _cms_main+32D6j
		mov	eax, [ebp+4]
		mov	[esp+11Ch+var_E8], eax
		mov	eax, [esp+11Ch+var_3C]
		add	ebp, 4
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4460FC:				; CODE XREF: _cms_main+32C1j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aKeyform_8 ;	"-keyform"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_446153
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		mov	[esp+11Ch+var_11C], eax	; char *
		call	_str2fmt
		mov	[esp+11Ch+var_70], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_446153:				; CODE XREF: _cms_main+3386j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aRctform ; "-rctform"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_4461AA
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		mov	[esp+11Ch+var_11C], eax	; char *
		call	_str2fmt
		mov	[esp+11Ch+var_88], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4461AA:				; CODE XREF: _cms_main+33DDj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aCertfile_2 ; "-certfile"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_4461DA
		mov	edi, [ebp+4]
		mov	[esp+11Ch+var_C8], edi
		test	edi, edi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_4461DA:				; CODE XREF: _cms_main+3434j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aCafile_6 ; "-CAfile"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_44620D
		mov	esi, [ebp+4]
		mov	[esp+11Ch+var_54], esi
		test	esi, esi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_44620D:				; CODE XREF: _cms_main+3464j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aCapath_6 ; "-CApath"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_446240
		mov	edi, [ebp+4]
		mov	[esp+11Ch+var_50], edi
		test	edi, edi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_446240:				; CODE XREF: _cms_main+3497j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aIn_24 ; "-in"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_446273
		mov	esi, [ebp+4]
		mov	[esp+11Ch+var_84], esi
		test	esi, esi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_446273:				; CODE XREF: _cms_main+34CAj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aInform_16 ;	"-inform"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_4462C7
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		mov	[esp+11Ch+var_11C], eax	; char *
		call	_str2fmt
		mov	[esp+11Ch+var_D8], eax
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		mov	edx, [esp+11Ch+var_C0]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4462C7:				; CODE XREF: _cms_main+34FDj
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aOutform_16 ; "-outform"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_44630C
		mov	eax, [ebp+4]
		test	eax, eax
		jz	loc_443901
		add	ebp, 4
		mov	[esp+11Ch+var_44], ebp
		mov	[esp+11Ch+var_11C], eax	; char *
		call	_str2fmt
		mov	[esp+11Ch+var_98], eax
		jmp	loc_445D2D
; ---------------------------------------------------------------------------

loc_44630C:				; CODE XREF: _cms_main+3551j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aOut_29 ; "-out"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_44633F
		mov	edi, [ebp+4]
		mov	[esp+11Ch+var_80], edi
		test	edi, edi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_44633F:				; CODE XREF: _cms_main+3596j
		mov	[esp+11Ch+var_C0], edx
		mov	[esp+11Ch+var_118], offset aContent_0 ;	"-content"
		mov	[esp+11Ch+var_11C], ebx	; char *
		call	_strcmp
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jnz	short loc_446372
		mov	esi, [ebp+4]
		mov	[esp+11Ch+var_7C], esi
		test	esi, esi
		jnz	loc_445CDC
		jmp	loc_443901
; ---------------------------------------------------------------------------

loc_446372:				; CODE XREF: _cms_main+35C9j
		mov	[esp+11Ch+var_C0], edx
		lea	eax, [esp+11Ch+var_34]
		mov	[esp+11Ch+var_10C], eax
		mov	eax, ds:_bio_err
		mov	[esp+11Ch+var_110], eax
		lea	eax, [esp+11Ch+var_3C]
		mov	[esp+11Ch+var_114], eax
		mov	[esp+11Ch+var_118], 0
		lea	eax, [esp+11Ch+var_44]
		mov	[esp+11Ch+var_11C], eax
		call	_args_verify
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	short loc_4463C0
		mov	eax, [esp+11Ch+var_3C]
		jmp	loc_442F82
; ---------------------------------------------------------------------------

loc_4463C0:				; CODE XREF: _cms_main+3622j
		mov	[esp+11Ch+var_C0], edx
		mov	eax, [esp+11Ch+var_44]
		mov	eax, [eax]
		inc	eax
		mov	[esp+11Ch+var_11C], eax
		call	_EVP_get_cipherbyname
		mov	[esp+11Ch+var_A0], eax
		test	eax, eax
		mov	edx, [esp+11Ch+var_C0]
		jz	short loc_4463F5
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, [esp+11Ch+var_3C]
		jmp	loc_443385
; ---------------------------------------------------------------------------

loc_4463F5:				; CODE XREF: _cms_main+3650j
		mov	[esp+11Ch+var_3C], 1
		mov	ebp, [esp+11Ch+var_44]
		mov	eax, 1
		jmp	loc_443385
_cms_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _rand_main
_rand_main	proc near		; DATA XREF: .data:00455208o

var_105C	= dword	ptr -105Ch
var_1058	= dword	ptr -1058h
var_1054	= dword	ptr -1054h
var_1050	= dword	ptr -1050h
var_104C	= dword	ptr -104Ch
var_1048	= dword	ptr -1048h
var_1044	= dword	ptr -1044h
var_1040	= dword	ptr -1040h
var_103C	= dword	ptr -103Ch
var_1038	= dword	ptr -1038h
var_1034	= dword	ptr -1034h
var_1030	= dword	ptr -1030h
var_1020	= dword	ptr -1020h
var_101C	= byte ptr -101Ch
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		mov	eax, 104Ch
		call	___chkstk_ms
		sub	esp, eax
		mov	ebp, [esp+105Ch+arg_4]
		mov	[esp+105Ch+var_1020], 0FFFFFFFFh
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_446911

loc_44644D:				; CODE XREF: _rand_main+505j
					; _rand_main+536j
		mov	[esp+105Ch+var_1058], 0
		mov	[esp+105Ch+var_105C], ebx
		call	_load_config
		test	eax, eax
		jz	loc_4465A7
		mov	eax, [esp+105Ch+var_1020]
		mov	[esp+105Ch+var_1034], eax
		mov	[esp+105Ch+var_103C], 0
		mov	[esp+105Ch+var_1040], 0
		mov	[esp+105Ch+var_1030], 0
		mov	[esp+105Ch+var_1038], 0
		mov	[esp+105Ch+var_1044], 0
		mov	[esp+105Ch+var_1048], 0
		mov	eax, [esp+105Ch+var_1048]

loc_4464A1:				; CODE XREF: _rand_main+3A1j
					; _rand_main+3F1j ...
		lea	ebx, [eax+1]
		lea	edx, ds:0[ebx*4]
		mov	eax, [ebp+edx+0]
		test	eax, eax
		jz	short loc_4464EC
		mov	edi, offset aOut_30 ; "-out"
		mov	esi, eax
		mov	ecx, 5
		repe cmpsb
		setnbe	byte ptr [esp+105Ch+var_104C]
		setb	cl
		cmp	byte ptr [esp+105Ch+var_104C], cl
		jnz	loc_446780
		mov	eax, [ebp+edx+4]
		test	eax, eax
		jz	short loc_4464E7
		mov	ecx, [esp+105Ch+var_1044]
		test	ecx, ecx
		jz	loc_446874

loc_4464E7:				; CODE XREF: _rand_main+B9j
					; _rand_main+382j ...
		mov	eax, 1

loc_4464EC:				; CODE XREF: _rand_main+91j
		mov	edi, [esp+105Ch+var_1040]
		test	edi, edi
		jz	loc_4465C4
		mov	esi, [esp+105Ch+var_1030]
		test	esi, esi
		jz	loc_4465C4

loc_446504:				; CODE XREF: _rand_main+1AAj
					; _rand_main+1B2j
		mov	[esp+105Ch+var_1058], offset aUsageRandOptio ; "Usage: rand [options] num\n"
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_printf
		mov	[esp+105Ch+var_1058], offset aWhereOption_19 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_printf
		mov	[esp+105Ch+var_1058], offset aOutFileWriteTo ; "-out file	      -	write to file\n"
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_printf
		mov	[esp+105Ch+var_1058], offset aEngineEUseE_23 ; "-engine	e	      -	use engine e, p"...
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_printf
		mov	[esp+105Ch+var_1050], 3Bh
		mov	[esp+105Ch+var_1054], 3Bh
		mov	[esp+105Ch+var_1058], offset aRandFileCfil_9 ; "-rand file%cfile%c... -	seed PRNG from "...
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_printf
		mov	[esp+105Ch+var_1058], offset aBase64Base64En ; "-base64		      -	base64 encode o"...
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_printf
		mov	[esp+105Ch+var_1058], offset aHexHexEncodeOu ; "-hex		      -	hex encode outp"...
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_printf

loc_4465A7:				; CODE XREF: _rand_main+3Fj
					; _rand_main+231j
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_ERR_print_errors
		mov	eax, 1

loc_4465B9:				; CODE XREF: _rand_main+337j
		add	esp, 104Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_4465C4:				; CODE XREF: _rand_main+D2j
					; _rand_main+DEj
		mov	ebx, [esp+105Ch+var_1034]
		test	ebx, ebx
		js	loc_446504
		test	eax, eax
		jnz	loc_446504
		mov	[esp+105Ch+var_1054], 0
		mov	eax, [esp+105Ch+var_103C]
		mov	[esp+105Ch+var_1058], eax
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_setup_engine
		mov	edi, [esp+105Ch+var_1038]
		test	edi, edi
		setnz	bl
		xor	eax, eax
		mov	al, bl
		mov	[esp+105Ch+var_1054], eax
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_1058], eax
		mov	[esp+105Ch+var_105C], 0
		call	_app_RAND_load_file
		test	bl, bl
		jz	short loc_446640
		mov	[esp+105Ch+var_105C], edi
		call	_app_RAND_load_files
		mov	[esp+105Ch+var_1054], eax
		mov	[esp+105Ch+var_1058], offset aLdSemiRando_10 ; "%ld semi-random	bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_printf

loc_446640:				; CODE XREF: _rand_main+1FDj
		call	_BIO_s_file
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_4465A7
		mov	eax, [esp+105Ch+var_1044]
		test	eax, eax
		jz	loc_446996
		mov	[esp+105Ch+var_1050], eax
		mov	[esp+105Ch+var_1054], 5
		mov	[esp+105Ch+var_1058], 6Ch
		mov	[esp+105Ch+var_105C], ebx
		call	_BIO_ctrl

loc_44667F:				; CODE XREF: _rand_main+59Aj
		test	eax, eax
		jle	loc_44696C
		mov	ecx, [esp+105Ch+var_1030]
		test	ecx, ecx
		jnz	loc_44695B

loc_446693:				; CODE XREF: _rand_main+571j
		mov	eax, [esp+105Ch+var_1020]
		test	eax, eax
		jle	short loc_4466FC
		lea	edi, [esp+105Ch+var_101C]
		nop

loc_4466A0:				; CODE XREF: _rand_main+2DAj
					; _rand_main+4DCj
		mov	esi, eax
		cmp	eax, 1000h
		jle	short loc_4466AE
		mov	esi, 1000h

loc_4466AE:				; CODE XREF: _rand_main+287j
		mov	[esp+105Ch+var_1058], esi
		mov	[esp+105Ch+var_105C], edi
		call	_RAND_bytes
		test	eax, eax
		jle	loc_446907
		mov	edx, [esp+105Ch+var_1040]
		test	edx, edx
		jz	loc_4468E0
		xor	ebp, ebp

loc_4466D0:				; CODE XREF: _rand_main+2CCj
		xor	eax, eax
		mov	al, [edi+ebp]
		mov	[esp+105Ch+var_1054], eax
		mov	[esp+105Ch+var_1058], offset a02x_6 ; "%02x"
		mov	[esp+105Ch+var_105C], ebx
		call	_BIO_printf
		inc	ebp
		cmp	esi, ebp
		jg	short loc_4466D0
		mov	eax, [esp+105Ch+var_1020]
		sub	eax, esi
		mov	[esp+105Ch+var_1020], eax
		test	eax, eax
		jg	short loc_4466A0

loc_4466FC:				; CODE XREF: _rand_main+279j
					; _rand_main+4E2j
		mov	eax, [esp+105Ch+var_1040]
		test	eax, eax
		jnz	loc_4469BF

loc_446708:				; CODE XREF: _rand_main+5AFj
		mov	[esp+105Ch+var_1050], 0
		mov	[esp+105Ch+var_1054], 0
		mov	[esp+105Ch+var_1058], 0Bh
		mov	[esp+105Ch+var_105C], ebx
		call	_BIO_ctrl
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_1058], eax
		mov	[esp+105Ch+var_105C], 0
		call	_app_RAND_write_file
		xor	eax, eax

loc_44673F:				; CODE XREF: _rand_main+4ECj
		mov	[esp+105Ch+var_104C], eax
		mov	edx, ds:_bio_err
		mov	[esp+105Ch+var_105C], edx
		call	_ERR_print_errors
		test	ebx, ebx
		mov	eax, [esp+105Ch+var_104C]
		jz	loc_4465B9

loc_44675D:				; CODE XREF: _rand_main+55Ej
		mov	[esp+105Ch+var_104C], eax
		mov	[esp+105Ch+var_105C], ebx
		call	_BIO_free_all
		mov	eax, [esp+105Ch+var_104C]
		add	esp, 104Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_446780:				; CODE XREF: _rand_main+ADj
		mov	edi, offset aEngine_29 ; "-engine"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		setnbe	byte ptr [esp+105Ch+var_104C]
		setb	cl
		cmp	byte ptr [esp+105Ch+var_104C], cl
		jnz	short loc_4467D0
		mov	eax, [ebp+edx+4]
		test	eax, eax
		jz	loc_4464E7
		mov	edx, [esp+105Ch+var_103C]
		test	edx, edx
		jnz	loc_4464E7
		add	[esp+105Ch+var_1048], 2
		mov	[esp+105Ch+var_103C], eax
		mov	eax, [esp+105Ch+var_1048]
		jmp	loc_4464A1
; ---------------------------------------------------------------------------
		align 10h

loc_4467D0:				; CODE XREF: _rand_main+37Aj
		mov	edi, offset aRand_12 ; "-rand"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		setnbe	byte ptr [esp+105Ch+var_104C]
		setb	cl
		cmp	byte ptr [esp+105Ch+var_104C], cl
		jnz	short loc_446816
		mov	eax, [ebp+edx+4]
		test	eax, eax
		jz	loc_4464E7
		mov	edi, [esp+105Ch+var_1038]
		test	edi, edi
		jnz	loc_4464E7
		add	[esp+105Ch+var_1048], 2
		mov	[esp+105Ch+var_1038], eax
		mov	eax, [esp+105Ch+var_1048]
		jmp	loc_4464A1
; ---------------------------------------------------------------------------

loc_446816:				; CODE XREF: _rand_main+3CAj
		mov	edi, offset aBase64_1 ;	"-base64"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_446845
		mov	esi, [esp+105Ch+var_1030]
		test	esi, esi
		jnz	loc_4464E7
		mov	[esp+105Ch+var_1048], ebx
		mov	[esp+105Ch+var_1030], 1
		mov	eax, ebx
		jmp	loc_4464A1
; ---------------------------------------------------------------------------

loc_446845:				; CODE XREF: _rand_main+404j
		mov	edi, offset aHex_0 ; "-hex"
		mov	esi, eax
		mov	ecx, 5
		repe cmpsb
		jnz	short loc_446886
		mov	ecx, [esp+105Ch+var_1040]
		test	ecx, ecx
		jnz	loc_4464E7
		mov	[esp+105Ch+var_1048], ebx
		mov	[esp+105Ch+var_1040], 1
		mov	eax, ebx
		jmp	loc_4464A1
; ---------------------------------------------------------------------------

loc_446874:				; CODE XREF: _rand_main+C1j
		add	[esp+105Ch+var_1048], 2
		mov	[esp+105Ch+var_1044], eax
		mov	eax, [esp+105Ch+var_1048]
		jmp	loc_4464A1
; ---------------------------------------------------------------------------

loc_446886:				; CODE XREF: _rand_main+433j
		xor	edx, edx
		mov	dl, [eax]
		sub	edx, 30h
		cmp	edx, 9
		ja	loc_4464E7
		mov	edx, [esp+105Ch+var_1034]
		test	edx, edx
		jns	loc_4464E7
		lea	edx, [esp+105Ch+var_1020]
		mov	[esp+105Ch+var_1054], edx
		mov	[esp+105Ch+var_1058], offset aD_5 ; "%d"
		mov	[esp+105Ch+var_105C], eax ; char *
		call	_sscanf
		test	eax, eax
		mov	eax, [esp+105Ch+var_1020]
		mov	[esp+105Ch+var_1034], eax
		jz	loc_4464E7
		test	eax, eax
		js	loc_4464E7
		mov	[esp+105Ch+var_1048], ebx
		mov	eax, ebx
		jmp	loc_4464A1
; ---------------------------------------------------------------------------
		align 10h

loc_4468E0:				; CODE XREF: _rand_main+2A8j
		mov	[esp+105Ch+var_1054], esi
		mov	[esp+105Ch+var_1058], edi
		mov	[esp+105Ch+var_105C], ebx
		call	_BIO_write
		mov	eax, [esp+105Ch+var_1020]
		sub	eax, esi
		mov	[esp+105Ch+var_1020], eax
		test	eax, eax
		jg	loc_4466A0
		jmp	loc_4466FC
; ---------------------------------------------------------------------------

loc_446907:				; CODE XREF: _rand_main+29Cj
		mov	eax, 1
		jmp	loc_44673F
; ---------------------------------------------------------------------------

loc_446911:				; CODE XREF: _rand_main+27j
		call	_BIO_s_file
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_44644D
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+105Ch+var_1050], edx
		mov	[esp+105Ch+var_1054], 10h
		mov	[esp+105Ch+var_1058], 6Ah
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_ctrl
		mov	ebx, ds:_bio_err
		jmp	loc_44644D
; ---------------------------------------------------------------------------

loc_44695B:				; CODE XREF: _rand_main+26Dj
		call	_BIO_f_base64
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_new
		test	eax, eax
		jnz	short loc_446983

loc_44696C:				; CODE XREF: _rand_main+261j
		mov	eax, ds:_bio_err
		mov	[esp+105Ch+var_105C], eax
		call	_ERR_print_errors
		mov	eax, 1
		jmp	loc_44675D
; ---------------------------------------------------------------------------

loc_446983:				; CODE XREF: _rand_main+54Aj
		mov	[esp+105Ch+var_1058], ebx
		mov	[esp+105Ch+var_105C], eax
		call	_BIO_push
		mov	ebx, eax
		jmp	loc_446693
; ---------------------------------------------------------------------------

loc_446996:				; CODE XREF: _rand_main+23Dj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+105Ch+var_1050], eax
		mov	[esp+105Ch+var_1054], 10h
		mov	[esp+105Ch+var_1058], 6Ah
		mov	[esp+105Ch+var_105C], ebx
		call	_BIO_ctrl
		jmp	loc_44667F
; ---------------------------------------------------------------------------

loc_4469BF:				; CODE XREF: _rand_main+2E2j
		mov	[esp+105Ch+var_1058], offset asc_46EA16	; "\n"
		mov	[esp+105Ch+var_105C], ebx
		call	_BIO_puts
		jmp	loc_446708
_rand_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_identity	proc near		; DATA XREF: _engine_main+55o
					; _engine_main+69o ...
		retn
_identity	endp

; ---------------------------------------------------------------------------
		jmp	short _util_do_cmds_isra_0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_util_do_cmds_isra_0 proc near		; CODE XREF: .text:004469E1j
					; _engine_main+24Ap ...

var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_11D		= byte ptr -11Dh
var_11C		= byte ptr -11Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 13Ch
		mov	[esp+14Ch+var_124], eax
		mov	[esp+14Ch+var_12C], edx
		mov	[esp+14Ch+var_130], ecx
		mov	[esp+14Ch+var_14C], edx
		call	_sk_num
		mov	[esp+14Ch+var_128], eax
		test	eax, eax
		js	loc_446B6F
		mov	ebp, 0
		jnz	short loc_446A5B
		jmp	loc_446B21
; ---------------------------------------------------------------------------
		align 10h

loc_446A30:				; CODE XREF: _util_do_cmds_isra_0+108j
		mov	[esp+14Ch+var_144], ebx
		mov	[esp+14Ch+var_148], offset aFailureS ; "[Failure]: %s\n"
		mov	esi, [esp+14Ch+var_130]
		mov	[esp+14Ch+var_14C], esi
		call	_BIO_printf
		mov	[esp+14Ch+var_14C], esi
		call	_ERR_print_errors
		inc	ebp
		cmp	ebp, [esp+14Ch+var_128]
		jz	loc_446B21

loc_446A5B:				; CODE XREF: _util_do_cmds_isra_0+2Fj
					; _util_do_cmds_isra_0+12Bj
		mov	[esp+14Ch+var_148], ebp
		mov	eax, [esp+14Ch+var_12C]
		mov	[esp+14Ch+var_14C], eax
		call	_sk_value
		mov	ebx, eax
		mov	[esp+14Ch+var_148], 3Ah	; int
		mov	[esp+14Ch+var_14C], eax	; char *
		call	_strchr
		mov	[esp+14Ch+var_134], eax
		test	eax, eax
		jz	loc_446B30
		mov	edx, eax
		sub	edx, ebx
		cmp	edx, 0FEh
		jg	loc_446B50
		lea	edi, [esp+14Ch+var_11C]
		mov	esi, ebx
		cmp	edx, 4
		jb	short loc_446AAB
		mov	ecx, edx
		shr	ecx, 2
		rep movsd

loc_446AAB:				; CODE XREF: _util_do_cmds_isra_0+B2j
		xor	ecx, ecx
		test	dl, 2
		jz	short loc_446ABD
		mov	cx, [esi]
		mov	[edi], cx
		mov	ecx, 2

loc_446ABD:				; CODE XREF: _util_do_cmds_isra_0+C0j
		test	dl, 1
		jz	short loc_446ACC
		mov	al, [esi+ecx]
		mov	[esp+14Ch+var_11D], al
		mov	[edi+ecx], al

loc_446ACC:				; CODE XREF: _util_do_cmds_isra_0+D0j
		mov	[esp+edx+14Ch+var_11C],	0
		mov	[esp+14Ch+var_140], 0
		mov	eax, [esp+14Ch+var_134]
		inc	eax
		mov	[esp+14Ch+var_144], eax
		lea	eax, [esp+14Ch+var_11C]
		mov	[esp+14Ch+var_148], eax

loc_446AEA:				; CODE XREF: _util_do_cmds_isra_0+154j
		mov	eax, [esp+14Ch+var_124]
		mov	[esp+14Ch+var_14C], eax
		call	_ENGINE_ctrl_cmd_string
		test	eax, eax
		jz	loc_446A30
		mov	[esp+14Ch+var_144], ebx
		mov	[esp+14Ch+var_148], offset aSuccessS ; "[Success]: %s\n"
		mov	eax, [esp+14Ch+var_130]
		mov	[esp+14Ch+var_14C], eax
		call	_BIO_printf
		inc	ebp
		cmp	ebp, [esp+14Ch+var_128]
		jnz	loc_446A5B

loc_446B21:				; CODE XREF: _util_do_cmds_isra_0+31j
					; _util_do_cmds_isra_0+65j ...
		add	esp, 13Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_446B30:				; CODE XREF: _util_do_cmds_isra_0+93j
		mov	[esp+14Ch+var_140], 0
		mov	[esp+14Ch+var_144], 0
		mov	[esp+14Ch+var_148], ebx
		jmp	short loc_446AEA
; ---------------------------------------------------------------------------
		align 10h

loc_446B50:				; CODE XREF: _util_do_cmds_isra_0+A3j
		mov	[esp+14Ch+var_148], offset aErrorCommandNa ; "[Error]: command name too	long\n"
		mov	eax, [esp+14Ch+var_130]
		mov	[esp+14Ch+var_14C], eax
		call	_BIO_printf
		add	esp, 13Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_446B6F:				; CODE XREF: _util_do_cmds_isra_0+24j
		mov	[esp+14Ch+var_148], offset aErrorInternalS ; "[Error]: internal	stack error\n"
		mov	eax, [esp+14Ch+var_130]
		mov	[esp+14Ch+var_14C], eax
		call	_BIO_printf
		jmp	short loc_446B21
_util_do_cmds_isra_0 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _engine_main
_engine_main	proc near		; DATA XREF: .data:00455214o

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		call	_sk_new_null
		mov	[esp+7Ch+var_60], eax
		call	_sk_new_null
		mov	[esp+7Ch+var_5C], eax
		call	_sk_new_null
		mov	[esp+7Ch+var_54], eax
		call	_SSL_load_error_strings
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_447510

loc_446BC4:				; CODE XREF: _engine_main+99Dj
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], eax
		call	_load_config
		test	eax, eax
		jnz	short loc_446C30
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		mov	[esp+7Ch+var_78], offset _identity
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		mov	[esp+7Ch+var_78], offset _identity
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		mov	[esp+7Ch+var_78], offset _identity
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		mov	eax, 1

loc_446C26:				; CODE XREF: _engine_main+3FFj
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_446C30:				; CODE XREF: _engine_main+46j
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	[esp+7Ch+var_4C], eax
		mov	eax, [esp+7Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+7Ch+arg_4]
		lea	ebx, [eax+4]
		test	ebp, ebp
		jle	loc_447CDD
		mov	[esp+7Ch+var_38], 0
		mov	[esp+7Ch+var_40], 0
		mov	[esp+7Ch+var_50], 0
		mov	[esp+7Ch+var_64], 0
		jmp	short loc_446CCE
; ---------------------------------------------------------------------------
		align 10h

loc_446C90:				; CODE XREF: _engine_main+14Ej
		lea	esi, [eax+1]
		mov	[esp+7Ch+var_78], offset aV_3 ;	"v"
		mov	[esp+7Ch+var_7C], esi ;	char *
		call	_strspn
		mov	edi, eax
		mov	[esp+7Ch+var_7C], esi ;	char *
		call	_strlen
		cmp	edi, eax
		jb	loc_446F00
		mov	[esp+7Ch+var_64], eax
		cmp	eax, 4
		jg	loc_446F00

loc_446CC2:				; CODE XREF: _engine_main+2E8j
					; _engine_main+31Bj ...
		dec	ebp
		add	ebx, 4
		test	ebp, ebp
		jle	loc_446D50

loc_446CCE:				; CODE XREF: _engine_main+F8j
					; _engine_main+1B7j
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aV_1 ; "-v"
		mov	ecx, 2
		repe cmpsb
		jz	short loc_446C90
		mov	edi, offset aC_7 ; "-c"
		mov	esi, eax
		mov	ecx, 3
		repe cmpsb
		jz	loc_446E70
		mov	edi, offset aT_0 ; "-t"
		mov	esi, eax
		mov	ecx, 2
		repe cmpsb
		jnz	loc_446E80
		lea	esi, [eax+1]
		mov	[esp+7Ch+var_78], offset aT ; "t"
		mov	[esp+7Ch+var_7C], esi ;	char *
		call	_strspn
		mov	edi, eax
		mov	[esp+7Ch+var_7C], esi ;	char *
		call	_strlen
		cmp	edi, eax
		jb	loc_446F00
		dec	eax
		mov	[esp+7Ch+var_38], eax
		dec	eax
		jg	loc_446F00
		mov	[esp+7Ch+var_40], 1
		dec	ebp
		add	ebx, 4
		test	ebp, ebp
		jg	short loc_446CCE
		lea	esi, [esi+0]

loc_446D50:				; CODE XREF: _engine_main+138j
					; _engine_main+116Dj
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_num
		test	eax, eax
		jz	loc_4479AB

loc_446D64:				; CODE XREF: _engine_main+E24j
					; _engine_main+E52j
		mov	[esp+7Ch+var_3C], 0

loc_446D6C:				; CODE XREF: _engine_main+2CFj
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_num
		cmp	[esp+7Ch+var_3C], eax
		jge	loc_447CC4
		mov	eax, [esp+7Ch+var_3C]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_value
		mov	ebx, eax
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_by_id
		mov	edi, eax
		mov	[esp+7Ch+var_44], eax
		test	eax, eax
		jz	loc_447532
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_get_name
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], offset aSS_5 ; "(%s) %s\n"
		mov	esi, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_printf
		mov	ecx, esi
		mov	edx, [esp+7Ch+var_5C]
		mov	eax, edi
		call	_util_do_cmds_isra_0
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_get_id
		mov	[esp+7Ch+var_78], ebx ;	char *
		mov	[esp+7Ch+var_7C], eax ;	char *
		call	_strcmp
		test	eax, eax
		jnz	loc_447210

loc_446DFB:				; CODE XREF: _engine_main+6B2j
		mov	eax, [esp+7Ch+var_50]
		test	eax, eax
		jnz	loc_446FE0

loc_446E07:				; CODE XREF: _engine_main+F95j
		mov	eax, [esp+7Ch+var_40]
		test	eax, eax
		jnz	loc_447250

loc_446E13:				; CODE XREF: _engine_main+715j
					; _engine_main+9E1j
		mov	eax, [esp+7Ch+var_64]
		test	eax, eax
		jle	short loc_446E4F
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0Ah
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_ctrl
		test	eax, eax
		jnz	loc_4472B0

loc_446E4F:				; CODE XREF: _engine_main+289j
					; _engine_main+750j ...
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_free

loc_446E5B:				; CODE XREF: _engine_main+9AFj
		inc	[esp+7Ch+var_3C]
		jmp	loc_446D6C
; ---------------------------------------------------------------------------
		align 10h

loc_446E70:				; CODE XREF: _engine_main+15Ej
		mov	[esp+7Ch+var_50], 1
		jmp	loc_446CC2
; ---------------------------------------------------------------------------
		align 10h

loc_446E80:				; CODE XREF: _engine_main+172j
		mov	edi, offset aPre_0 ; "-pre"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_446EB0
		lea	esi, [ebx+4]
		dec	ebp
		jz	short loc_446F00
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_push
		mov	ebx, esi
		jmp	loc_446CC2
; ---------------------------------------------------------------------------

loc_446EB0:				; CODE XREF: _engine_main+2FEj
		mov	edi, offset aPost ; "-post"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_446FB0
		mov	edi, offset asc_46EA9F ; "-h"
		mov	esi, eax
		mov	ecx, 2
		repe cmpsb
		jz	short loc_446F00
		mov	edi, offset a?_1 ; "-?"
		mov	esi, eax
		mov	ecx, 3
		repe cmpsb
		jz	short loc_446F00
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_push
		jmp	loc_446CC2
; ---------------------------------------------------------------------------
		align 10h

loc_446F00:				; CODE XREF: _engine_main+11Fj
					; _engine_main+12Cj ...
		mov	eax, _engine_usage
		mov	ebx, offset _engine_usage
		test	eax, eax
		jz	short loc_446F32
		xchg	ax, ax

loc_446F10:				; CODE XREF: _engine_main+3A0j
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aS_15 ; "%s"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		add	ebx, 4
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_446F10

loc_446F32:				; CODE XREF: _engine_main+37Cj
					; _engine_main+484j ...
		mov	eax, 1

loc_446F37:				; CODE XREF: _engine_main+1136j
		mov	[esp+7Ch+var_64], eax
		mov	edx, ds:_bio_err
		mov	[esp+7Ch+var_7C], edx
		call	_ERR_print_errors
		mov	[esp+7Ch+var_78], offset _identity
		mov	eax, [esp+7Ch+var_60]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		mov	[esp+7Ch+var_78], offset _identity
		mov	eax, [esp+7Ch+var_5C]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		mov	[esp+7Ch+var_78], offset _identity
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		mov	edx, [esp+7Ch+var_4C]
		test	edx, edx
		mov	eax, [esp+7Ch+var_64]
		jz	loc_446C26
		mov	[esp+7Ch+var_7C], edx
		call	_BIO_free_all
		mov	eax, [esp+7Ch+var_64]
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_446FB0:				; CODE XREF: _engine_main+32Ej
		lea	esi, [ebx+4]
		dec	ebp
		jz	loc_446F00
		mov	eax, [ebx+4]
		mov	[esp+7Ch+var_78], eax
		mov	eax, [esp+7Ch+var_54]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_push
		mov	ebx, esi
		jmp	loc_446CC2
; ---------------------------------------------------------------------------
		align 10h

loc_446FE0:				; CODE XREF: _engine_main+271j
		mov	edi, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_get_RSA
		test	eax, eax
		jz	loc_447D8E
		mov	[esp+7Ch+var_74], 68h
		mov	[esp+7Ch+var_78], offset aEngine_c ; "engine.c"
		mov	[esp+7Ch+var_7C], 100h
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_446F32
		mov	byte ptr [eax],	0
		mov	[esp+7Ch+var_74], 100h
		mov	[esp+7Ch+var_78], offset aRsa_1	; "RSA"
		mov	[esp+7Ch+var_7C], eax
		call	_BUF_strlcat
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_get_DSA
		test	eax, eax
		jz	loc_447D62

loc_447045:				; CODE XREF: _engine_main+1237j
		mov	[esp+7Ch+var_7C], ebx ;	char *
		call	_strlen
		add	eax, 3
		cmp	eax, 0FFh
		ja	loc_447A28
		mov	esi, 100h
		mov	[esp+7Ch+var_58], 100h

loc_447068:				; CODE XREF: _engine_main+ECFj
		cmp	byte ptr [ebx],	0
		jnz	loc_447A9B

loc_447071:				; CODE XREF: _engine_main+F1Fj
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset aDsa_0	; "DSA"
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat

loc_447085:				; CODE XREF: _engine_main+11DFj
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_get_DH
		test	eax, eax
		jz	loc_4475A7

loc_447099:				; CODE XREF: _engine_main+1282j
		mov	[esp+7Ch+var_7C], ebx ;	char *
		call	_strlen
		add	eax, 2
		cmp	eax, esi
		jnb	loc_4479F1

loc_4470AC:				; CODE XREF: _engine_main+E8Dj
		cmp	byte ptr [ebx],	0
		jnz	loc_447AB4

loc_4470B5:				; CODE XREF: _engine_main+F38j
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset aDh ; "DH"
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_get_RAND
		test	eax, eax
		jz	short loc_447109

loc_4470D9:				; CODE XREF: _engine_main+A2Dj
					; _engine_main+A69j
		mov	[esp+7Ch+var_7C], ebx ;	char *
		call	_strlen
		add	eax, 4
		cmp	eax, esi
		jnb	loc_447A64

loc_4470EC:				; CODE XREF: _engine_main+F00j
		cmp	byte ptr [ebx],	0
		jnz	loc_447ACD

loc_4470F5:				; CODE XREF: _engine_main+F51j
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset aRand_13 ; "RAND"
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat

loc_447109:				; CODE XREF: _engine_main+547j
					; _engine_main+A25j ...
		mov	edi, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_get_ciphers
		test	eax, eax
		jz	loc_447686
		mov	[esp+7Ch+var_70], 0
		lea	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], edi
		call	eax
		mov	[esp+7Ch+var_34], eax
		test	eax, eax
		jle	loc_447686
		xor	esi, esi
		jmp	short loc_447174
; ---------------------------------------------------------------------------
		align 10h

loc_447150:				; CODE XREF: _engine_main+61Bj
		cmp	byte ptr [ebx],	0
		jnz	loc_4471E8

loc_447159:				; CODE XREF: _engine_main+652j
					; _engine_main+66Cj
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat
		inc	esi
		cmp	esi, [esp+7Ch+var_34]
		jz	loc_447686

loc_447174:				; CODE XREF: _engine_main+5B8j
		mov	eax, [esp+7Ch+var_20]
		mov	eax, [eax+esi*4]
		mov	[esp+7Ch+var_7C], eax
		call	_OBJ_nid2sn
		mov	edi, eax
		test	ebx, ebx
		jz	loc_44764B
		mov	ebp, [esp+7Ch+var_58]

loc_447191:				; CODE XREF: _engine_main+AF1j
		mov	[esp+7Ch+var_7C], ebx ;	char *
		call	_strlen
		mov	[esp+7Ch+var_48], eax
		mov	[esp+7Ch+var_7C], edi ;	char *
		call	_strlen
		add	eax, [esp+7Ch+var_48]
		cmp	eax, ebp
		jb	short loc_447150
		add	[esp+7Ch+var_58], 100h
		mov	[esp+7Ch+var_70], 70h
		mov	[esp+7Ch+var_74], offset aEngine_c ; "engine.c"
		mov	ebp, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], ebx
		call	_CRYPTO_realloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_446F32
		cmp	byte ptr [ebx],	0
		jz	loc_447159

loc_4471E8:				; CODE XREF: _engine_main+5C3j
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], offset asc_46EACF ; ", "
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat
		jmp	loc_447159
; ---------------------------------------------------------------------------
		jmp	short loc_447210
; ---------------------------------------------------------------------------
		align 10h

loc_447210:				; CODE XREF: _engine_main+265j
					; _engine_main+671j
		mov	edi, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_get_name
		mov	ebx, eax
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_get_id
		mov	[esp+7Ch+var_70], ebx
		mov	[esp+7Ch+var_74], eax
		mov	[esp+7Ch+var_78], offset aLoadedSS ; "Loaded: (%s) %s\n"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_446DFB
; ---------------------------------------------------------------------------
		align 10h

loc_447250:				; CODE XREF: _engine_main+27Dj
		mov	[esp+7Ch+var_74], offset asc_46EAE5 ; "	    "
		mov	[esp+7Ch+var_78], offset aS_15 ; "%s"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_init
		test	eax, eax
		jnz	loc_447544
		mov	[esp+7Ch+var_78], offset aUnavailable ;	"[ unavailable ]\n"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, [esp+7Ch+var_38]
		test	eax, eax
		jnz	loc_447BA7

loc_4472A0:				; CODE XREF: _engine_main+1027j
		call	_ERR_clear_error
		jmp	loc_446E13
; ---------------------------------------------------------------------------
		align 10h

loc_4472B0:				; CODE XREF: _engine_main+2B9j
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0Bh
		mov	edi, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_ctrl
		mov	ebx, eax
		test	eax, eax
		jle	loc_446E4F
		call	_sk_new_null
		mov	[esp+7Ch+var_30], eax
		test	eax, eax
		jz	loc_446F32
		mov	[esp+7Ch+var_58], 0
		jmp	short loc_44734A
; ---------------------------------------------------------------------------
		jmp	short loc_447310
; ---------------------------------------------------------------------------
		align 10h

loc_447310:				; CODE XREF: _engine_main+771j
					; _engine_main+7F8j
		mov	[esp+7Ch+var_7C], 0
		call	_CRYPTO_free

loc_44731C:				; CODE XREF: _engine_main+95Ej
					; _engine_main+96Cj
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], 0Ch
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_ctrl
		mov	ebx, eax
		test	eax, eax
		jle	loc_447CCB

loc_44734A:				; CODE XREF: _engine_main+76Fj
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], 12h
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_ctrl
		mov	[esp+7Ch+var_48], eax
		test	eax, eax
		js	loc_447AE6
		and	eax, 8
		mov	[esp+7Ch+var_34], eax
		jz	short loc_44738A
		cmp	[esp+7Ch+var_64], 4
		jnz	short loc_447310

loc_44738A:				; CODE XREF: _engine_main+7F1j
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], 0Eh
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_ctrl
		test	eax, eax
		jle	loc_447AE6
		mov	[esp+7Ch+var_74], 0DAh
		mov	[esp+7Ch+var_78], offset aEngine_c ; "engine.c"
		inc	eax
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_malloc
		mov	esi, eax
		test	eax, eax
		jz	loc_447AE6
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], 0Fh
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_ctrl
		test	eax, eax
		jle	loc_447C8F
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], 10h
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_ctrl
		test	eax, eax
		js	loc_447C8F
		jz	loc_4475A0
		mov	[esp+7Ch+var_74], 0E4h
		mov	[esp+7Ch+var_78], offset aEngine_c ; "engine.c"
		inc	eax
		mov	[esp+7Ch+var_7C], eax
		call	_CRYPTO_malloc
		mov	ebp, eax
		test	eax, eax
		jz	loc_447D02
		mov	[esp+7Ch+var_6C], 0
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], 11h
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_ctrl
		test	eax, eax
		jle	loc_447D02

loc_44747E:				; CODE XREF: _engine_main+A12j
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jnz	loc_447580
		mov	[esp+7Ch+var_78], offset asc_46EAE5 ; "	    "
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_puts
		mov	edx, eax

loc_4474A0:				; CODE XREF: _engine_main+A0Aj
		cmp	[esp+7Ch+var_64], 1
		jz	loc_447600
		test	ebp, ebp
		jz	loc_4479E7
		mov	eax, ebp

loc_4474B5:				; CODE XREF: _engine_main+E5Cj
		mov	[esp+7Ch+var_70], eax
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset aSS_6 ; "%s: %s\n"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		cmp	[esp+7Ch+var_64], 2
		jnz	loc_447789
		mov	[esp+7Ch+var_58], 0

loc_4474E4:				; CODE XREF: _engine_main+AB6j
					; _engine_main+CD7j ...
		mov	[esp+7Ch+var_7C], esi
		call	_CRYPTO_free
		test	ebp, ebp
		jz	loc_44731C
		mov	[esp+7Ch+var_7C], ebp
		call	_CRYPTO_free
		jmp	loc_44731C
; ---------------------------------------------------------------------------
		jmp	short loc_447510
; ---------------------------------------------------------------------------
		align 10h

loc_447510:				; CODE XREF: _engine_main+2Ej
					; _engine_main+971j
		mov	[esp+7Ch+var_78], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_446BC4
; ---------------------------------------------------------------------------

loc_447532:				; CODE XREF: _engine_main+218j
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		jmp	loc_446E5B
; ---------------------------------------------------------------------------

loc_447544:				; CODE XREF: _engine_main+6EAj
		mov	[esp+7Ch+var_78], offset aAvailable ; "[ available ]\n"
		mov	ebx, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], ebx
		call	_BIO_printf
		mov	ecx, ebx
		mov	edx, [esp+7Ch+var_54]
		mov	ebx, [esp+7Ch+var_44]
		mov	eax, ebx
		call	_util_do_cmds_isra_0
		mov	[esp+7Ch+var_7C], ebx
		call	_ENGINE_finish
		jmp	loc_446E13
; ---------------------------------------------------------------------------
		align 10h

loc_447580:				; CODE XREF: _engine_main+8F4j
		mov	[esp+7Ch+var_78], offset asc_46EACF ; ", "
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	edx, [esp+7Ch+var_58]
		add	edx, eax
		jmp	loc_4474A0
; ---------------------------------------------------------------------------
		align 10h

loc_4475A0:				; CODE XREF: _engine_main+89Dj
		xor	ebp, ebp
		jmp	loc_44747E
; ---------------------------------------------------------------------------

loc_4475A7:				; CODE XREF: _engine_main+503j
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_get_RAND
		test	eax, eax
		jz	loc_447109
		test	ebx, ebx
		jnz	loc_4470D9

loc_4475C3:				; CODE XREF: _engine_main+1295j
		mov	[esp+7Ch+var_74], 68h
		mov	[esp+7Ch+var_78], offset aEngine_c ; "engine.c"
		mov	[esp+7Ch+var_7C], 100h
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_446F32
		mov	byte ptr [eax],	0
		mov	esi, 100h
		mov	[esp+7Ch+var_58], 100h
		jmp	loc_4470D9
; ---------------------------------------------------------------------------
		align 10h

loc_447600:				; CODE XREF: _engine_main+915j
		cmp	edx, 5
		jle	short loc_447620
		mov	[esp+7Ch+var_58], edx
		mov	[esp+7Ch+var_7C], esi ;	char *
		call	_strlen
		mov	edx, [esp+7Ch+var_58]
		add	eax, edx
		cmp	eax, 4Eh
		jg	loc_447C60

loc_447620:				; CODE XREF: _engine_main+A73j
					; _engine_main+10FAj
		mov	[esp+7Ch+var_58], edx
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset aS_15 ; "%s"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	edx, [esp+7Ch+var_58]
		add	eax, edx
		mov	[esp+7Ch+var_58], eax
		jmp	loc_4474E4
; ---------------------------------------------------------------------------

loc_44764B:				; CODE XREF: _engine_main+5F7j
		mov	[esp+7Ch+var_74], 68h
		mov	[esp+7Ch+var_78], offset aEngine_c ; "engine.c"
		mov	[esp+7Ch+var_7C], 100h
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_446F32
		mov	byte ptr [eax],	0
		mov	ebp, 100h
		mov	[esp+7Ch+var_58], 100h
		jmp	loc_447191
; ---------------------------------------------------------------------------

loc_447686:				; CODE XREF: _engine_main+587j
					; _engine_main+5B0j ...
		mov	edi, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_get_digests
		test	eax, eax
		jz	loc_4478A7
		mov	[esp+7Ch+var_70], 0
		lea	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], edi
		call	eax
		mov	[esp+7Ch+var_34], eax
		test	eax, eax
		jle	loc_4478A7
		xor	esi, esi
		jmp	short loc_4476F4
; ---------------------------------------------------------------------------
		align 10h

loc_4476D0:				; CODE XREF: _engine_main+B9Bj
					; _engine_main+BC9j
		cmp	byte ptr [ebx],	0
		jnz	loc_447770

loc_4476D9:				; CODE XREF: _engine_main+BF4j
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat
		inc	esi
		cmp	esi, [esp+7Ch+var_34]
		jz	loc_4478A7

loc_4476F4:				; CODE XREF: _engine_main+B35j
		mov	eax, [esp+7Ch+var_20]
		mov	eax, [eax+esi*4]
		mov	[esp+7Ch+var_7C], eax
		call	_OBJ_nid2sn
		mov	edi, eax
		test	ebx, ebx
		jz	loc_44786C
		mov	ebp, [esp+7Ch+var_58]

loc_447711:				; CODE XREF: _engine_main+D12j
		mov	[esp+7Ch+var_7C], ebx ;	char *
		call	_strlen
		mov	[esp+7Ch+var_48], eax
		mov	[esp+7Ch+var_7C], edi ;	char *
		call	_strlen
		add	eax, [esp+7Ch+var_48]
		cmp	eax, ebp
		jb	short loc_4476D0
		add	[esp+7Ch+var_58], 100h
		mov	[esp+7Ch+var_70], 70h
		mov	[esp+7Ch+var_74], offset aEngine_c ; "engine.c"
		mov	ebp, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], ebx
		call	_CRYPTO_realloc
		mov	ebx, eax
		test	eax, eax
		jnz	loc_4476D0
		jmp	loc_446F32
; ---------------------------------------------------------------------------
		align 10h

loc_447770:				; CODE XREF: _engine_main+B43j
		mov	[esp+7Ch+var_74], ebp
		mov	[esp+7Ch+var_78], offset asc_46EACF ; ", "
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat
		jmp	loc_4476D9
; ---------------------------------------------------------------------------

loc_447789:				; CODE XREF: _engine_main+946j
		mov	[esp+7Ch+var_70], offset asc_46EAE5 ; "	    "
		mov	[esp+7Ch+var_74], offset asc_46EAE5 ; "	    "
		mov	[esp+7Ch+var_78], offset aSSInputFlags ; "%s%s(input flags): "
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, [esp+7Ch+var_48]
		test	eax, eax
		jz	loc_447C3F
		mov	ecx, [esp+7Ch+var_34]
		test	ecx, ecx
		jnz	loc_447C26

loc_4477C5:				; CODE XREF: _engine_main+10AAj
		test	byte ptr [esp+7Ch+var_48], 1
		jnz	loc_447BD5
		test	byte ptr [esp+7Ch+var_48], 2
		jz	loc_447D74
		mov	[esp+7Ch+var_58], 0

loc_4477E3:				; CODE XREF: _engine_main+1192j
		mov	[esp+7Ch+var_78], offset aString ; "STRING"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		test	byte ptr [esp+7Ch+var_48], 4
		jnz	loc_447B65
		mov	edx, [esp+7Ch+var_48]
		and	edx, 0FFFFFFF0h
		jz	short loc_44783F

loc_44780B:				; CODE XREF: _engine_main+100Cj
					; _engine_main+1091j
		mov	[esp+7Ch+var_48], edx
		mov	[esp+7Ch+var_78], offset asc_46EB49 ; "|"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	edx, [esp+7Ch+var_48]

loc_447827:				; CODE XREF: _engine_main+108Bj
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], offset a0x04x	; "<0x%04X>"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf

loc_44783F:				; CODE XREF: _engine_main+C79j
					; _engine_main+1012j
		mov	edx, [esp+7Ch+var_58]
		test	edx, edx
		jnz	loc_447BBC

loc_44784B:				; CODE XREF: _engine_main+1040j
					; _engine_main+107Bj
		mov	[esp+7Ch+var_78], offset asc_46EB0B ; "\n"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_58], 0
		jmp	loc_4474E4
; ---------------------------------------------------------------------------

loc_44786C:				; CODE XREF: _engine_main+B77j
		mov	[esp+7Ch+var_74], 68h
		mov	[esp+7Ch+var_78], offset aEngine_c ; "engine.c"
		mov	[esp+7Ch+var_7C], 100h
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_446F32
		mov	byte ptr [eax],	0
		mov	ebp, 100h
		mov	[esp+7Ch+var_58], 100h
		jmp	loc_447711
; ---------------------------------------------------------------------------

loc_4478A7:				; CODE XREF: _engine_main+B04j
					; _engine_main+B2Dj ...
		mov	edi, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], edi
		call	_ENGINE_get_pkey_meths
		test	eax, eax
		jz	loc_447B10
		mov	[esp+7Ch+var_70], 0
		lea	edx, [esp+7Ch+var_20]
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], edi
		call	eax
		mov	[esp+7Ch+var_34], eax
		test	eax, eax
		jle	loc_447B10
		xor	esi, esi
		jmp	short loc_447914
; ---------------------------------------------------------------------------
		align 10h

loc_4478F0:				; CODE XREF: _engine_main+DBFj
					; _engine_main+DF5j
		cmp	byte ptr [ebx],	0
		jnz	loc_44798A

loc_4478F9:				; CODE XREF: _engine_main+E16j
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_78], edi
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat
		inc	esi
		cmp	esi, [esp+7Ch+var_34]
		jz	loc_447B14

loc_447914:				; CODE XREF: _engine_main+D56j
		mov	eax, [esp+7Ch+var_20]
		mov	eax, [eax+esi*4]
		mov	[esp+7Ch+var_7C], eax
		call	_OBJ_nid2sn
		mov	edi, eax
		test	ebx, ebx
		jz	loc_447B2A
		mov	edx, [esp+7Ch+var_58]

loc_447931:				; CODE XREF: _engine_main+FD0j
		mov	[esp+7Ch+var_48], edx
		mov	[esp+7Ch+var_7C], ebx ;	char *
		call	_strlen
		mov	ebp, eax
		mov	[esp+7Ch+var_7C], edi ;	char *
		call	_strlen
		add	ebp, eax
		mov	edx, [esp+7Ch+var_48]
		cmp	ebp, edx
		jb	short loc_4478F0
		add	[esp+7Ch+var_58], 100h
		mov	[esp+7Ch+var_70], 70h
		mov	[esp+7Ch+var_74], offset aEngine_c ; "engine.c"
		mov	ebp, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], ebx
		call	_CRYPTO_realloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_446F32
		mov	edx, ebp
		jmp	loc_4478F0
; ---------------------------------------------------------------------------

loc_44798A:				; CODE XREF: _engine_main+D63j
		mov	[esp+7Ch+var_74], edx
		mov	[esp+7Ch+var_48], edx
		mov	[esp+7Ch+var_78], offset asc_46EACF ; ", "
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat
		mov	edx, [esp+7Ch+var_48]
		jmp	loc_4478F9
; ---------------------------------------------------------------------------

loc_4479AB:				; CODE XREF: _engine_main+1CEj
		call	_ENGINE_get_first
		mov	ebx, eax
		test	eax, eax
		jz	loc_446D64
		mov	esi, [esp+7Ch+var_60]
		xchg	ax, ax

loc_4479C0:				; CODE XREF: _engine_main+E50j
		mov	[esp+7Ch+var_7C], ebx
		call	_ENGINE_get_id
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], esi
		call	_sk_push
		mov	[esp+7Ch+var_7C], ebx
		call	_ENGINE_get_next
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_4479C0
		jmp	loc_446D64
; ---------------------------------------------------------------------------

loc_4479E7:				; CODE XREF: _engine_main+91Dj
		mov	eax, offset aNoDescription ; "<no description>"
		jmp	loc_4474B5
; ---------------------------------------------------------------------------

loc_4479F1:				; CODE XREF: _engine_main+516j
		add	[esp+7Ch+var_58], 100h
		mov	[esp+7Ch+var_70], 70h
		mov	[esp+7Ch+var_74], offset aEngine_c ; "engine.c"
		mov	esi, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], ebx
		call	_CRYPTO_realloc
		mov	ebx, eax
		test	eax, eax
		jnz	loc_4470AC
		jmp	loc_446F32
; ---------------------------------------------------------------------------

loc_447A28:				; CODE XREF: _engine_main+4C5j
		mov	[esp+7Ch+var_70], 70h
		mov	[esp+7Ch+var_74], offset aEngine_c ; "engine.c"
		mov	[esp+7Ch+var_78], 200h
		mov	[esp+7Ch+var_7C], ebx
		call	_CRYPTO_realloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_446F32
		mov	esi, 200h
		mov	[esp+7Ch+var_58], 200h
		jmp	loc_447068
; ---------------------------------------------------------------------------

loc_447A64:				; CODE XREF: _engine_main+556j
		add	[esp+7Ch+var_58], 100h
		mov	[esp+7Ch+var_70], 70h
		mov	[esp+7Ch+var_74], offset aEngine_c ; "engine.c"
		mov	esi, [esp+7Ch+var_58]
		mov	[esp+7Ch+var_78], esi
		mov	[esp+7Ch+var_7C], ebx
		call	_CRYPTO_realloc
		mov	ebx, eax
		test	eax, eax
		jnz	loc_4470EC
		jmp	loc_446F32
; ---------------------------------------------------------------------------

loc_447A9B:				; CODE XREF: _engine_main+4DBj
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset asc_46EACF ; ", "
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat
		jmp	loc_447071
; ---------------------------------------------------------------------------

loc_447AB4:				; CODE XREF: _engine_main+51Fj
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset asc_46EACF ; ", "
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat
		jmp	loc_4470B5
; ---------------------------------------------------------------------------

loc_447ACD:				; CODE XREF: _engine_main+55Fj
		mov	[esp+7Ch+var_74], esi
		mov	[esp+7Ch+var_78], offset asc_46EACF ; ", "
		mov	[esp+7Ch+var_7C], ebx
		call	_BUF_strlcat
		jmp	loc_4470F5
; ---------------------------------------------------------------------------

loc_447AE6:				; CODE XREF: _engine_main+7E4j
					; _engine_main+820j ...
		xor	ebx, ebx

loc_447AE8:				; CODE XREF: _engine_main+1148j
					; _engine_main+11CDj
		mov	[esp+7Ch+var_78], offset _identity
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		test	ebx, ebx
		jnz	loc_446E4F
		jmp	loc_446F32
; ---------------------------------------------------------------------------
		align 10h

loc_447B10:				; CODE XREF: _engine_main+D25j
					; _engine_main+D4Ej
		test	ebx, ebx
		jz	short loc_447B1D

loc_447B14:				; CODE XREF: _engine_main+D7Ej
		cmp	byte ptr [ebx],	0
		jnz	loc_447D27

loc_447B1D:				; CODE XREF: _engine_main+F82j
					; _engine_main+11AFj
		mov	[esp+7Ch+var_7C], ebx
		call	_CRYPTO_free
		jmp	loc_446E07
; ---------------------------------------------------------------------------

loc_447B2A:				; CODE XREF: _engine_main+D97j
		mov	[esp+7Ch+var_74], 68h
		mov	[esp+7Ch+var_78], offset aEngine_c ; "engine.c"
		mov	[esp+7Ch+var_7C], 100h
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_446F32
		mov	byte ptr [eax],	0
		mov	edx, 100h
		mov	[esp+7Ch+var_58], 100h
		jmp	loc_447931
; ---------------------------------------------------------------------------

loc_447B65:				; CODE XREF: _engine_main+C6Cj
					; _engine_main+106Ej
		mov	[esp+7Ch+var_78], offset asc_46EB49 ; "|"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_58], 1

loc_447B81:				; CODE XREF: _engine_main+11F9j
		mov	[esp+7Ch+var_78], offset aNo_input ; "NO_INPUT"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	edx, [esp+7Ch+var_48]
		and	edx, 0FFFFFFF0h
		jnz	loc_44780B
		jmp	loc_44783F
; ---------------------------------------------------------------------------

loc_447BA7:				; CODE XREF: _engine_main+70Aj
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors_fp
		jmp	loc_4472A0
; ---------------------------------------------------------------------------

loc_447BBC:				; CODE XREF: _engine_main+CB5j
		mov	[esp+7Ch+var_78], offset aIllegalFlags ; "  <illegal flags!>"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_44784B
; ---------------------------------------------------------------------------

loc_447BD5:				; CODE XREF: _engine_main+C3Aj
		mov	[esp+7Ch+var_78], offset aNumeric ; "NUMERIC"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		test	byte ptr [esp+7Ch+var_48], 2
		jnz	loc_447D06
		mov	eax, 1
		test	byte ptr [esp+7Ch+var_48], 4
		jnz	loc_447B65

loc_447C04:				; CODE XREF: _engine_main+11EBj
		mov	edx, [esp+7Ch+var_48]
		and	edx, 0FFFFFFF0h
		jz	loc_44784B
		mov	[esp+7Ch+var_58], 0
		test	eax, eax
		jz	loc_447827
		jmp	loc_44780B
; ---------------------------------------------------------------------------

loc_447C26:				; CODE XREF: _engine_main+C2Fj
		mov	[esp+7Ch+var_78], offset aInternal ; "[Internal] "
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_4477C5
; ---------------------------------------------------------------------------

loc_447C3F:				; CODE XREF: _engine_main+C23j
		mov	[esp+7Ch+var_78], offset aNoFlags ; "<no flags>\n"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_58], 0
		jmp	loc_4474E4
; ---------------------------------------------------------------------------

loc_447C60:				; CODE XREF: _engine_main+A8Aj
		mov	[esp+7Ch+var_78], offset asc_46EB0B ; "\n"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_78], offset asc_46EAE5 ; "	    "
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_puts
		mov	edx, eax
		jmp	loc_447620
; ---------------------------------------------------------------------------

loc_447C8F:				; CODE XREF: _engine_main+86Bj
					; _engine_main+897j
		mov	edi, esi
		xor	ebp, ebp

loc_447C93:				; CODE XREF: _engine_main+1174j
		mov	[esp+7Ch+var_78], offset _identity
		mov	eax, [esp+7Ch+var_30]
		mov	[esp+7Ch+var_7C], eax
		call	_sk_pop_free
		mov	[esp+7Ch+var_7C], edi
		call	_CRYPTO_free
		test	ebp, ebp
		jz	loc_446F32
		mov	[esp+7Ch+var_7C], ebp
		call	_CRYPTO_free
		jmp	loc_446F32
; ---------------------------------------------------------------------------

loc_447CC4:				; CODE XREF: _engine_main+1ECj
		xor	eax, eax
		jmp	loc_446F37
; ---------------------------------------------------------------------------

loc_447CCB:				; CODE XREF: _engine_main+7B4j
		mov	eax, [esp+7Ch+var_58]
		test	eax, eax
		jg	short loc_447D44
		mov	ebx, 1
		jmp	loc_447AE8
; ---------------------------------------------------------------------------

loc_447CDD:				; CODE XREF: _engine_main+D2j
		mov	[esp+7Ch+var_50], 0
		mov	[esp+7Ch+var_38], 0
		mov	[esp+7Ch+var_40], 0
		mov	[esp+7Ch+var_64], 0
		jmp	loc_446D50
; ---------------------------------------------------------------------------

loc_447D02:				; CODE XREF: _engine_main+8C0j
					; _engine_main+8E8j
		mov	edi, esi
		jmp	short loc_447C93
; ---------------------------------------------------------------------------

loc_447D06:				; CODE XREF: _engine_main+105Ej
		mov	[esp+7Ch+var_78], offset asc_46EB49 ; "|"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	[esp+7Ch+var_58], 1
		jmp	loc_4477E3
; ---------------------------------------------------------------------------

loc_447D27:				; CODE XREF: _engine_main+F87j
		mov	[esp+7Ch+var_74], ebx
		mov	[esp+7Ch+var_78], offset aS_16 ; " [%s]\n"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_447B1D
; ---------------------------------------------------------------------------

loc_447D44:				; CODE XREF: _engine_main+1141j
		mov	[esp+7Ch+var_78], offset asc_46EB0B ; "\n"
		mov	eax, [esp+7Ch+var_4C]
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_447AE8
; ---------------------------------------------------------------------------

loc_447D62:				; CODE XREF: _engine_main+4AFj
		mov	esi, 100h
		mov	[esp+7Ch+var_58], 100h
		jmp	loc_447085
; ---------------------------------------------------------------------------

loc_447D74:				; CODE XREF: _engine_main+C45j
		xor	eax, eax
		test	byte ptr [esp+7Ch+var_48], 4
		jz	loc_447C04
		mov	[esp+7Ch+var_58], 0
		jmp	loc_447B81
; ---------------------------------------------------------------------------

loc_447D8E:				; CODE XREF: _engine_main+45Ej
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_get_DSA
		test	eax, eax
		jz	short loc_447DCC
		mov	[esp+7Ch+var_74], 68h
		mov	[esp+7Ch+var_78], offset aEngine_c ; "engine.c"
		mov	[esp+7Ch+var_7C], 100h
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_446F32
		mov	byte ptr [eax],	0
		jmp	loc_447045
; ---------------------------------------------------------------------------

loc_447DCC:				; CODE XREF: _engine_main+120Cj
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_get_DH
		test	eax, eax
		jz	short loc_447E17
		mov	[esp+7Ch+var_74], 68h
		mov	[esp+7Ch+var_78], offset aEngine_c ; "engine.c"
		mov	[esp+7Ch+var_7C], 100h
		call	_CRYPTO_malloc
		mov	ebx, eax
		test	eax, eax
		jz	loc_446F32
		mov	byte ptr [eax],	0
		mov	esi, 100h
		mov	[esp+7Ch+var_58], 100h
		jmp	loc_447099
; ---------------------------------------------------------------------------

loc_447E17:				; CODE XREF: _engine_main+124Aj
		mov	eax, [esp+7Ch+var_44]
		mov	[esp+7Ch+var_7C], eax
		call	_ENGINE_get_RAND
		test	eax, eax
		jnz	loc_4475C3
		xor	ebx, ebx
		mov	[esp+7Ch+var_58], 100h
		jmp	loc_447109
_engine_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_query_responder proc near		; CODE XREF: _process_responder+6Ap

var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
timeout		= timeval ptr -124h
writefds	= fd_set ptr -11Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 14Ch
		mov	[ebp+var_144], eax
		mov	edi, edx
		mov	[ebp+var_13C], edx
		mov	ebx, ecx
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_128], 0
		cmp	[ebp+arg_8], 0FFFFFFFFh
		mov	dword ptr [esp+0Ch], 0
		jz	loc_44819A
		mov	dword ptr [esp+8], 1
		mov	dword ptr [esp+4], 66h
		mov	[esp], edx
		call	_BIO_ctrl
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 65h
		mov	[esp], edi
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_447FB0

loc_447EBB:				; CODE XREF: _query_responder+37Aj
		lea	eax, [ebp+var_12C]
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 69h
		mov	eax, [ebp+var_13C]
		mov	[esp], eax
		call	_BIO_ctrl
		test	eax, eax
		js	loc_448180

loc_447EEB:				; CODE XREF: _query_responder+21Aj
		mov	dword ptr [esp+0Ch], 0FFFFFFFFh
		mov	dword ptr [esp+8], 0
		mov	[esp+4], ebx
		mov	eax, [ebp+var_13C]
		mov	[esp], eax
		call	_OCSP_sendreq_new
		mov	edi, eax
		test	eax, eax
		jz	loc_44822E
		xor	ebx, ebx
		jmp	short loc_447F47
; ---------------------------------------------------------------------------
		align 10h

loc_447F20:				; CODE XREF: _query_responder+111j
		mov	[esp+4], ebx
		mov	[esp], esi
		call	_sk_value
		mov	edx, [eax+8]
		mov	eax, [eax+4]
		mov	[esp+8], edx
		mov	[esp+4], eax
		mov	[esp], edi
		call	_OCSP_REQ_CTX_add1_header
		test	eax, eax
		jz	short loc_447F90
		inc	ebx

loc_447F47:				; CODE XREF: _query_responder+D9j
		mov	[esp], esi
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_447F20
		mov	eax, [ebp+arg_4]
		mov	[esp+4], eax
		mov	[esp], edi
		call	_OCSP_REQ_CTX_set1_req
		test	eax, eax
		jz	short loc_447F90
		lea	ebx, [ebp+var_128]
		cmp	[ebp+arg_8], 0FFFFFFFFh
		jnz	loc_448080
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_447F80:				; CODE XREF: _query_responder+14Dj
		mov	[esp+4], edi
		mov	[esp], ebx
		call	_OCSP_sendreq_nbio
		inc	eax
		jz	short loc_447F80
		nop

loc_447F90:				; CODE XREF: _query_responder+104j
					; _query_responder+124j ...
		mov	[esp], edi
		call	_OCSP_REQ_CTX_free

loc_447F98:				; CODE XREF: _query_responder+355j
		mov	eax, [ebp+var_128]

loc_447F9E:				; CODE XREF: _query_responder+238j
					; _query_responder+398j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_447FB0:				; CODE XREF: _query_responder+75j
		mov	dword ptr [esp+4], 8
		mov	eax, [ebp+var_13C]
		mov	[esp], eax
		call	_BIO_test_flags
		test	eax, eax
		jz	loc_4481C0
		lea	eax, [ebp+var_12C]
		mov	[esp+0Ch], eax
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 69h
		mov	eax, [ebp+var_13C]
		mov	[esp], eax
		call	_BIO_ctrl
		test	eax, eax
		js	loc_448180
		mov	eax, [ebp+var_12C]
		mov	[ebp+writefds.fd_array], eax
		mov	[ebp+writefds.fd_count], 1
		mov	[ebp+timeout.tv_usec], 0
		mov	ecx, [ebp+arg_8]
		mov	[ebp+timeout.tv_sec], ecx
		lea	edx, [ebp+timeout]
		mov	[esp+10h], edx	; timeout
		mov	dword ptr [esp+0Ch], 0 ; exceptfds
		lea	edx, [ebp+writefds]
		mov	[esp+8], edx	; writefds
		mov	dword ptr [esp+4], 0 ; readfds
		inc	eax
		mov	[esp], eax	; nfds
		call	ds:__imp__select@20
		sub	esp, 14h
		test	eax, eax
		jnz	loc_447EEB
		mov	dword ptr [esp+4], offset aTimeoutOnConne ; "Timeout on	connect\n"
		mov	eax, [ebp+var_144]
		mov	[esp], eax
		call	_BIO_puts
		xor	eax, eax
		jmp	loc_447F9E
; ---------------------------------------------------------------------------
		align 10h

loc_448080:				; CODE XREF: _query_responder+130j
		lea	esi, [ebp+timeout]
		mov	[ebp+var_140], ebx
		mov	ebx, [ebp+var_13C]
		jmp	short loc_4480E0
; ---------------------------------------------------------------------------
		align 10h

loc_4480A0:				; CODE XREF: _query_responder+2F4j
		mov	[esp+10h], esi	; timeout
		mov	dword ptr [esp+0Ch], 0 ; exceptfds
		mov	dword ptr [esp+8], 0 ; writefds
		lea	eax, [ebp+writefds]
		mov	[esp+4], eax	; readfds

loc_4480BE:				; CODE XREF: _query_responder+330j
		mov	eax, [ebp+var_12C]
		inc	eax
		mov	[esp], eax	; nfds
		call	ds:__imp__select@20
		sub	esp, 14h
		test	eax, eax
		jz	loc_4481DD
		inc	eax
		jz	loc_4481F8

loc_4480E0:				; CODE XREF: _query_responder+252j
		mov	[esp+4], edi
		mov	eax, [ebp+var_140]
		mov	[esp], eax
		call	_OCSP_sendreq_nbio
		inc	eax
		jnz	loc_447F90
		mov	eax, [ebp+var_12C]
		mov	[ebp+writefds.fd_array], eax
		mov	[ebp+writefds.fd_count], 1
		mov	[ebp+timeout.tv_usec], 0
		mov	eax, [ebp+arg_8]
		mov	[ebp+timeout.tv_sec], eax
		mov	dword ptr [esp+4], 1
		mov	[esp], ebx
		call	_BIO_test_flags
		test	eax, eax
		jnz	loc_4480A0
		mov	dword ptr [esp+4], 2
		mov	[esp], ebx
		call	_BIO_test_flags
		test	eax, eax
		jz	loc_448213
		mov	[esp+10h], esi
		mov	dword ptr [esp+0Ch], 0
		lea	eax, [ebp+writefds]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], 0
		jmp	loc_4480BE
; ---------------------------------------------------------------------------
		align 10h

loc_448180:				; CODE XREF: _query_responder+A5j
					; _query_responder+1B8j
		mov	dword ptr [esp+4], offset aCanTGetConnect ; "Can't get connection fd\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_puts
		jmp	loc_447F98
; ---------------------------------------------------------------------------

loc_44819A:				; CODE XREF: _query_responder+35j
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 65h
		mov	eax, [ebp+var_13C]
		mov	[esp], eax
		call	_BIO_ctrl
		test	eax, eax
		jg	loc_447EBB

loc_4481C0:				; CODE XREF: _query_responder+188j
		mov	dword ptr [esp+4], offset aErrorConnectin ; "Error connecting BIO\n"
		mov	eax, [ebp+var_144]
		mov	[esp], eax
		call	_BIO_puts
		xor	eax, eax
		jmp	loc_447F9E
; ---------------------------------------------------------------------------

loc_4481DD:				; CODE XREF: _query_responder+293j
		mov	dword ptr [esp+4], offset aTimeoutOnReque ; "Timeout on	request\n"
		mov	eax, [ebp+var_144]
		mov	[esp], eax
		call	_BIO_puts
		jmp	loc_447F90
; ---------------------------------------------------------------------------

loc_4481F8:				; CODE XREF: _query_responder+29Aj
		mov	dword ptr [esp+4], offset aSelectError ; "Select error\n"
		mov	eax, [ebp+var_144]
		mov	[esp], eax
		call	_BIO_puts
		jmp	loc_447F90
; ---------------------------------------------------------------------------

loc_448213:				; CODE XREF: _query_responder+30Cj
		mov	dword ptr [esp+4], offset aUnexpectedRetr ; "Unexpected	retry condition\n"
		mov	eax, [ebp+var_144]
		mov	[esp], eax
		call	_BIO_puts
		jmp	loc_447F90
; ---------------------------------------------------------------------------

loc_44822E:				; CODE XREF: _query_responder+D1j
		xor	eax, eax
		jmp	loc_447F9E
_query_responder endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_do_responder_isra_0 proc near		; CODE XREF: _ocsp_main+8FDp

var_43C		= dword	ptr -43Ch
var_438		= dword	ptr -438h
var_434		= dword	ptr -434h
var_430		= dword	ptr -430h
var_420		= dword	ptr -420h
var_41C		= byte ptr -41Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 42Ch
		mov	[esp+43Ch+var_420], eax
		mov	esi, edx
		mov	ebx, ecx
		mov	[esp+43Ch+var_430], 0
		mov	[esp+43Ch+var_434], 0
		mov	[esp+43Ch+var_438], 65h
		mov	[esp+43Ch+var_43C], ecx
		call	_BIO_ctrl
		test	eax, eax
		jle	loc_448330
		mov	[esp+43Ch+var_43C], ebx
		call	_BIO_pop
		mov	ebp, eax
		mov	[esi], eax
		xor	esi, esi
		lea	ebx, [esp+43Ch+var_41C]
		jmp	short loc_4482B9
; ---------------------------------------------------------------------------
		align 10h

loc_448290:				; CODE XREF: _do_responder_isra_0+8Fj
		test	esi, esi
		jnz	short loc_4482A8
		mov	edi, offset aPost_0 ; "POST"
		mov	esi, ebx
		mov	ecx, 4
		repe cmpsb
		jnz	loc_448360

loc_4482A8:				; CODE XREF: _do_responder_isra_0+52j
		mov	al, [esp+43Ch+var_41C]
		cmp	al, 0Dh
		jz	short loc_4482F0
		cmp	al, 0Ah
		jz	short loc_4482F0
		mov	esi, 1

loc_4482B9:				; CODE XREF: _do_responder_isra_0+4Cj
		mov	[esp+43Ch+var_434], 400h
		mov	[esp+43Ch+var_438], ebx
		mov	[esp+43Ch+var_43C], ebp
		call	_BIO_gets
		test	eax, eax
		jg	short loc_448290
		mov	eax, 1
		add	esp, 42Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_4482F0
; ---------------------------------------------------------------------------
		align 10h

loc_4482F0:				; CODE XREF: _do_responder_isra_0+6Ej
					; _do_responder_isra_0+72j ...
		mov	[esp+43Ch+var_430], 0
		mov	[esp+43Ch+var_434], ebp
		mov	[esp+43Ch+var_438], offset _d2i_OCSP_REQUEST
		mov	[esp+43Ch+var_43C], offset _OCSP_REQUEST_new
		call	_ASN1_d2i_bio
		mov	ebx, eax
		test	eax, eax
		jz	short loc_448385

loc_448316:				; CODE XREF: _do_responder_isra_0+167j
		mov	eax, [esp+43Ch+var_420]
		mov	[eax], ebx
		mov	eax, 1
		add	esp, 42Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_448330:				; CODE XREF: _do_responder_isra_0+34j
		mov	[esp+43Ch+var_438], offset aErrorAccepting ; "Error accepting connection\n"
		mov	eax, ds:_bio_err
		mov	[esp+43Ch+var_43C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+43Ch+var_43C], eax
		call	_ERR_print_errors
		xor	eax, eax
		add	esp, 42Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_448360:				; CODE XREF: _do_responder_isra_0+62j
		mov	[esp+43Ch+var_438], offset aInvalidRequest ; "Invalid request\n"
		mov	eax, ds:_bio_err
		mov	[esp+43Ch+var_43C], eax
		call	_BIO_printf
		mov	eax, 1
		add	esp, 42Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_448385:				; CODE XREF: _do_responder_isra_0+D4j
		mov	[esp+43Ch+var_438], offset aErrorParsingOc ; "Error parsing OCSP request\n"
		mov	eax, ds:_bio_err
		mov	[esp+43Ch+var_43C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+43Ch+var_43C], eax
		call	_ERR_print_errors
		jmp	loc_448316
_do_responder_isra_0 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _process_responder
_process_responder proc	near		; CODE XREF: _cert_status_cb+347p
					; _ocsp_main+17F9p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [esp+1Ch+arg_10]
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_new_connect
		mov	ebx, eax
		test	eax, eax
		jz	loc_4484CA
		test	esi, esi
		jz	short loc_4483F0
		mov	[esp+1Ch+var_10], esi
		mov	[esp+1Ch+var_14], 1
		mov	[esp+1Ch+var_18], 64h
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_ctrl

loc_4483F0:				; CODE XREF: _process_responder+22j
		cmp	[esp+1Ch+arg_14], 1
		jz	short loc_448450
		xor	esi, esi

loc_4483F9:				; CODE XREF: _process_responder+F5j
		mov	eax, [esp+1Ch+arg_1C]
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_18]
		mov	[esp+1Ch+var_1C], eax
		mov	ecx, [esp+1Ch+arg_C]
		mov	edx, ebx
		mov	eax, [esp+1Ch+arg_0]
		call	_query_responder
		mov	edi, eax
		test	eax, eax
		jz	loc_4484B0

loc_448429:				; CODE XREF: _process_responder+115j
		test	ebx, ebx
		jz	short loc_448435

loc_44842D:				; CODE XREF: _process_responder+14Bj
		mov	[esp+1Ch+var_1C], ebx
		call	_BIO_free_all

loc_448435:				; CODE XREF: _process_responder+7Bj
		test	esi, esi
		jz	short loc_448441
		mov	[esp+1Ch+var_1C], esi
		call	_SSL_CTX_free

loc_448441:				; CODE XREF: _process_responder+87j
					; _process_responder+130j
		mov	eax, edi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_448450:				; CODE XREF: _process_responder+45j
		call	_SSLv23_client_method
		mov	[esp+1Ch+var_1C], eax
		call	_SSL_CTX_new
		mov	esi, eax
		test	eax, eax
		jz	loc_4484E5
		mov	[esp+1Ch+var_10], 0
		mov	[esp+1Ch+var_14], 4
		mov	[esp+1Ch+var_18], 21h
		mov	[esp+1Ch+var_1C], eax
		call	_SSL_CTX_ctrl
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_new_ssl
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_push
		mov	ebx, eax
		jmp	loc_4483F9
; ---------------------------------------------------------------------------
		align 10h

loc_4484B0:				; CODE XREF: _process_responder+73j
		mov	[esp+1Ch+var_18], offset aErrorQueryingO ; "Error querying OCSP	responder\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		jmp	loc_448429
; ---------------------------------------------------------------------------

loc_4484CA:				; CODE XREF: _process_responder+1Aj
		mov	[esp+1Ch+var_18], offset aErrorCreatin_0 ; "Error creating connect BIO\n"
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_448441
; ---------------------------------------------------------------------------

loc_4484E5:				; CODE XREF: _process_responder+B1j
		mov	[esp+1Ch+var_18], offset aErrorCreatin_1 ; "Error creating SSL context.\n"
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_44842D
_process_responder endp


; =============== S U B	R O U T	I N E =======================================


		public _ocsp_main
_ocsp_main	proc near		; DATA XREF: .data:00455220o

var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_168		= dword	ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= dword	ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_124		= dword	ptr -124h
var_120		= dword	ptr -120h
var_11C		= dword	ptr -11Ch
var_118		= dword	ptr -118h
var_114		= dword	ptr -114h
var_110		= dword	ptr -110h
var_10C		= dword	ptr -10Ch
var_108		= dword	ptr -108h
var_104		= dword	ptr -104h
var_100		= dword	ptr -100h
var_FC		= dword	ptr -0FCh
var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_D0		= dword	ptr -0D0h
var_CC		= dword	ptr -0CCh
var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 17Ch
		mov	[esp+18Ch+var_A0], 0
		mov	[esp+18Ch+var_9C], 0
		mov	[esp+18Ch+var_98], offset asc_46F087 ; "/"
		mov	[esp+18Ch+var_94], 0FFFFFFFFh
		mov	[esp+18Ch+var_90], 0
		mov	[esp+18Ch+var_8C], 0
		mov	[esp+18Ch+var_88], 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_449DE0

loc_448564:				; CODE XREF: _ocsp_main+18FDj
		mov	[esp+18Ch+var_188], 0
		mov	[esp+18Ch+var_18C], eax
		call	_load_config
		test	eax, eax
		jnz	loc_448760
		xor	ebp, ebp
		mov	[esp+18Ch+var_160], 0
		mov	[esp+18Ch+var_168], 0
		mov	[esp+18Ch+var_11C], 0
		mov	[esp+18Ch+var_114], 0
		mov	edi, 1
		xor	esi, esi
		mov	[esp+18Ch+var_144], 0
		mov	[esp+18Ch+var_164], 0
		mov	[esp+18Ch+var_138], 0
		mov	[esp+18Ch+var_140], 0
		mov	[esp+18Ch+var_130], 0
		mov	[esp+18Ch+var_124], 0
		mov	[esp+18Ch+var_134], 0
		mov	[esp+18Ch+var_158], 0
		mov	[esp+18Ch+var_118], 0
		mov	[esp+18Ch+var_120], 0
		xor	ebx, ebx
		mov	[esp+18Ch+var_148], 0
		mov	[esp+18Ch+var_14C], 0
		mov	[esp+18Ch+var_150], 0

loc_44860F:				; CODE XREF: _ocsp_main+FEEj
					; _ocsp_main+1201j ...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_ERR_print_errors
		mov	eax, [esp+18Ch+var_158]
		mov	[esp+18Ch+var_18C], eax
		call	_X509_free
		mov	eax, [esp+18Ch+var_164]
		mov	[esp+18Ch+var_18C], eax
		call	_X509_STORE_free
		mov	eax, [esp+18Ch+var_124]
		mov	[esp+18Ch+var_18C], eax
		call	_EVP_PKEY_free
		mov	eax, [esp+18Ch+var_130]
		mov	[esp+18Ch+var_18C], eax
		call	_EVP_PKEY_free
		mov	eax, [esp+18Ch+var_120]
		mov	[esp+18Ch+var_18C], eax
		call	_X509_free
		mov	eax, [esp+18Ch+var_118]
		mov	[esp+18Ch+var_18C], eax
		call	_X509_free
		mov	eax, [esp+18Ch+var_134]
		mov	[esp+18Ch+var_18C], eax
		call	_X509_free
		mov	eax, [esp+18Ch+var_168]
		mov	[esp+18Ch+var_18C], eax
		call	_X509_free
		mov	eax, [esp+18Ch+var_160]
		mov	[esp+18Ch+var_18C], eax
		call	_free_index
		mov	eax, [esp+18Ch+var_88]
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_free_all
		mov	eax, [esp+18Ch+var_140]
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_free_all
		mov	eax, [esp+18Ch+var_138]
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_free
		mov	eax, [esp+18Ch+var_8C]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_REQUEST_free
		mov	[esp+18Ch+var_18C], ebp
		call	_OCSP_RESPONSE_free
		mov	[esp+18Ch+var_18C], ebx
		call	_OCSP_BASICRESP_free
		mov	eax, [esp+18Ch+var_114]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_free
		mov	eax, [esp+18Ch+var_11C]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_free
		mov	[esp+18Ch+var_188], offset _X509_free
		mov	eax, [esp+18Ch+var_144]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_pop_free
		mov	[esp+18Ch+var_188], offset _X509_free
		mov	[esp+18Ch+var_18C], esi
		call	_sk_pop_free
		mov	[esp+18Ch+var_188], offset _X509V3_conf_free
		mov	eax, [esp+18Ch+var_90]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_pop_free
		mov	eax, [esp+18Ch+var_150]
		test	eax, eax
		jz	short loc_448731
		mov	[esp+18Ch+var_18C], eax
		call	_CRYPTO_free

loc_448731:				; CODE XREF: _ocsp_main+227j
		mov	eax, [esp+18Ch+var_14C]
		test	eax, eax
		jz	short loc_448741
		mov	[esp+18Ch+var_18C], eax
		call	_CRYPTO_free

loc_448741:				; CODE XREF: _ocsp_main+237j
		mov	eax, [esp+18Ch+var_148]
		test	eax, eax
		jz	short loc_448751
		mov	[esp+18Ch+var_18C], eax
		call	_CRYPTO_free

loc_448751:				; CODE XREF: _ocsp_main+247j
		mov	eax, edi
		add	esp, 17Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_448760:				; CODE XREF: _ocsp_main+76j
		call	_SSL_load_error_strings
		call	_SSL_library_init
		mov	eax, [esp+18Ch+arg_4]
		lea	ebx, [eax+4]
		call	_sk_new_null
		mov	[esp+18Ch+var_114], eax
		call	_sk_new_null
		mov	[esp+18Ch+var_11C], eax
		mov	eax, [esp+18Ch+arg_4]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_448AB8
		cmp	byte ptr [eax],	2Dh
		jnz	loc_448AB8
		mov	[esp+18Ch+var_144], 0
		mov	[esp+18Ch+var_E0], 0FFFFFFFFh
		mov	[esp+18Ch+var_158], 0
		mov	[esp+18Ch+var_15C], 0
		mov	[esp+18Ch+var_FC], 0
		mov	[esp+18Ch+var_DC], 0
		mov	[esp+18Ch+var_108], 0FFFFFFFFh
		mov	[esp+18Ch+var_D8], 0
		mov	[esp+18Ch+var_D4], 0
		mov	[esp+18Ch+var_E8], 0
		mov	[esp+18Ch+var_160], 0
		mov	[esp+18Ch+var_CC], 0
		mov	[esp+18Ch+var_EC], 0
		mov	[esp+18Ch+var_B8], 0
		mov	[esp+18Ch+var_BC], 0
		mov	[esp+18Ch+var_C0], 0FFFFFFFFh
		mov	[esp+18Ch+var_C4], 12Ch
		mov	[esp+18Ch+var_E4], 0
		mov	[esp+18Ch+var_F4], 0
		mov	[esp+18Ch+var_104], 0FFFFFFFFh
		mov	[esp+18Ch+var_118], 0
		mov	[esp+18Ch+var_120], 0
		mov	[esp+18Ch+var_C8], 0
		mov	[esp+18Ch+var_F8], 1
		xor	ebp, ebp
		mov	[esp+18Ch+var_164], 0
		mov	[esp+18Ch+var_168], 0
		mov	[esp+18Ch+var_10C], 0
		mov	[esp+18Ch+var_110], 0
		mov	[esp+18Ch+var_F0], 0
		mov	[esp+18Ch+var_100], 0
		mov	[esp+18Ch+var_D0], 0
		mov	[esp+18Ch+var_154], 0
		mov	[esp+18Ch+var_148], 0
		mov	[esp+18Ch+var_14C], 0
		mov	[esp+18Ch+var_150], 0
		jmp	short loc_448931
; ---------------------------------------------------------------------------
		align 10h

loc_448900:				; CODE XREF: _ocsp_main+43Fj
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	ebp, eax
		xor	edx, edx

loc_448912:				; CODE XREF: _ocsp_main+478j
					; _ocsp_main+531j ...
		lea	ebx, [esi+4]
		test	edx, edx
		jnz	loc_4497D0
		mov	eax, [esi+4]
		test	eax, eax
		jz	loc_448C10
		cmp	byte ptr [eax],	2Dh
		jnz	loc_448C10

loc_448931:				; CODE XREF: _ocsp_main+3FDj
		mov	ecx, 5
		mov	esi, eax
		mov	edi, offset aOut_31 ; "-out"
		repe cmpsb
		jz	short loc_448900
		mov	edi, offset aTimeout_1 ; "-timeout"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_448980
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_18C], eax	; char *
		call	_atol
		mov	[esp+18Ch+var_104], eax
		test	eax, eax
		js	loc_449520

loc_448976:				; CODE XREF: _ocsp_main+25C2j
					; _ocsp_main+261Dj ...
		xor	edx, edx
		jmp	short loc_448912
; ---------------------------------------------------------------------------
		align 10h

loc_448980:				; CODE XREF: _ocsp_main+44Fj
		mov	edi, offset aUrl ; "-url"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_448A90
		mov	eax, [esp+18Ch+var_150]
		test	eax, eax
		jz	short loc_4489A4
		mov	[esp+18Ch+var_18C], eax
		call	_CRYPTO_free

loc_4489A4:				; CODE XREF: _ocsp_main+49Aj
		mov	eax, [esp+18Ch+var_14C]
		test	eax, eax
		jz	short loc_4489B4
		mov	[esp+18Ch+var_18C], eax
		call	_CRYPTO_free

loc_4489B4:				; CODE XREF: _ocsp_main+4AAj
		mov	eax, [esp+18Ch+var_148]
		test	eax, eax
		jz	short loc_4489C4
		mov	[esp+18Ch+var_18C], eax
		call	_CRYPTO_free

loc_4489C4:				; CODE XREF: _ocsp_main+4BAj
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		lea	ebx, [esp+18Ch+var_94]
		mov	[esp+18Ch+var_17C], ebx
		lea	edx, [esp+18Ch+var_98]
		mov	[esp+18Ch+var_180], edx
		lea	edx, [esp+18Ch+var_9C]
		mov	[esp+18Ch+var_184], edx
		lea	edx, [esp+18Ch+var_A0]
		mov	[esp+18Ch+var_188], edx
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_parse_url
		test	eax, eax
		jz	loc_449760
		xor	edx, edx

loc_448A10:				; CODE XREF: _ocsp_main+127Aj
		mov	eax, [esp+18Ch+var_A0]
		mov	[esp+18Ch+var_150], eax
		mov	eax, [esp+18Ch+var_9C]
		mov	[esp+18Ch+var_14C], eax
		mov	eax, [esp+18Ch+var_98]
		mov	[esp+18Ch+var_148], eax
		jmp	loc_448912
; ---------------------------------------------------------------------------
		align 10h

loc_448A40:				; CODE XREF: _ocsp_main+59Ej
		mov	edi, offset aPort_1 ; "-port"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_449500
		mov	edi, offset aHeader ; "-header"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	loc_449D20
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_448A80
		mov	edx, [ebx+8]
		test	edx, edx
		jnz	loc_449E4F
		lea	esi, [esi+0]

loc_448A80:				; CODE XREF: _ocsp_main+405j
					; _ocsp_main+456j ...
		mov	esi, ebx

loc_448A82:				; CODE XREF: _ocsp_main+2A41j
		mov	edx, 1
		jmp	loc_448912
; ---------------------------------------------------------------------------
		align 10h

loc_448A90:				; CODE XREF: _ocsp_main+48Ej
		mov	edi, offset aHost_0 ; "-host"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_448A40
		mov	eax, [ebx+4]
		test	eax, eax
		jz	short loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_A0], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_448AB8:				; CODE XREF: _ocsp_main+292j
					; _ocsp_main+29Bj
		mov	[esp+18Ch+var_E0], 0FFFFFFFFh
		mov	[esp+18Ch+var_158], 0
		mov	[esp+18Ch+var_15C], 0
		mov	[esp+18Ch+var_FC], 0
		mov	[esp+18Ch+var_DC], 0
		xor	edx, edx
		mov	[esp+18Ch+var_108], 0FFFFFFFFh
		mov	[esp+18Ch+var_D8], 0
		mov	[esp+18Ch+var_D4], 0
		mov	[esp+18Ch+var_E8], 0
		mov	[esp+18Ch+var_160], 0
		mov	[esp+18Ch+var_CC], 0
		mov	[esp+18Ch+var_EC], 0
		mov	[esp+18Ch+var_B8], 0
		mov	[esp+18Ch+var_BC], 0
		mov	[esp+18Ch+var_C0], 0FFFFFFFFh
		mov	[esp+18Ch+var_C4], 12Ch
		mov	[esp+18Ch+var_E4], 0
		mov	[esp+18Ch+var_F4], 0
		mov	[esp+18Ch+var_104], 0FFFFFFFFh
		mov	[esp+18Ch+var_118], 0
		mov	[esp+18Ch+var_120], 0
		mov	[esp+18Ch+var_C8], 0
		mov	[esp+18Ch+var_F8], 1
		xor	ebp, ebp
		mov	[esp+18Ch+var_164], 0
		mov	[esp+18Ch+var_168], 0
		mov	[esp+18Ch+var_10C], 0
		mov	[esp+18Ch+var_110], 0
		mov	[esp+18Ch+var_F0], 0
		mov	[esp+18Ch+var_100], 0
		mov	[esp+18Ch+var_D0], 0
		mov	[esp+18Ch+var_154], 0
		mov	[esp+18Ch+var_148], 0
		mov	[esp+18Ch+var_14C], 0
		mov	[esp+18Ch+var_150], 0
		xchg	ax, ax

loc_448C10:				; CODE XREF: _ocsp_main+422j
					; _ocsp_main+42Bj ...
		mov	eax, [esp+18Ch+var_8C]
		test	eax, eax
		jz	loc_4497DA

loc_448C1F:				; CODE XREF: _ocsp_main+12E0j
					; _ocsp_main+12EFj ...
		test	edx, edx
		jnz	loc_449810
		test	ebp, ebp
		jz	loc_449E8C
		mov	[esp+18Ch+var_188], offset aW_6	; "w"
		mov	[esp+18Ch+var_18C], ebp
		call	_BIO_new_file
		mov	[esp+18Ch+var_138], eax

loc_448C43:				; CODE XREF: _ocsp_main+19A8j
		mov	edi, [esp+18Ch+var_138]
		test	edi, edi
		jz	loc_44A16F
		mov	esi, [esp+18Ch+var_8C]
		test	esi, esi
		jz	loc_449FA5

loc_448C5E:				; CODE XREF: _ocsp_main+1B1Cj
					; _ocsp_main+1CE7j
		mov	[esp+18Ch+var_140], 0

loc_448C66:				; CODE XREF: _ocsp_main+1D54j
		mov	ecx, [esp+18Ch+var_168]
		test	ecx, ecx
		jz	loc_44A147
		mov	edx, [esp+18Ch+var_164]
		test	edx, edx
		jz	loc_44A072

loc_448C7E:				; CODE XREF: _ocsp_main+1B7Aj
		mov	[esp+18Ch+var_178], offset aResponderCerti ; "responder	certificate"
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 3
		mov	eax, [esp+18Ch+var_168]
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_load_cert
		mov	[esp+18Ch+var_134], eax
		test	eax, eax
		jz	loc_44A07F
		mov	[esp+18Ch+var_178], offset aCaCertificat_2 ; "CA certificate"
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 3
		mov	eax, [esp+18Ch+var_15C]
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_load_cert
		mov	[esp+18Ch+var_168], eax
		mov	eax, [esp+18Ch+var_160]
		test	eax, eax
		jz	loc_44A0DC
		mov	[esp+18Ch+var_178], offset aResponderOther ; "responder	other certificates"
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 3
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_load_certs
		mov	[esp+18Ch+var_B4], eax
		test	eax, eax
		jz	loc_44A124

loc_448D44:				; CODE XREF: _ocsp_main+1BE7j
		mov	[esp+18Ch+var_174], offset aResponderPriva ; "responder	private	key"
		mov	[esp+18Ch+var_178], 0
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 3
		mov	eax, [esp+18Ch+var_164]
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_load_key
		mov	[esp+18Ch+var_130], eax
		test	eax, eax
		jz	loc_44A0EC

loc_448D8D:				; CODE XREF: _ocsp_main+1C6Aj
		mov	eax, [esp+18Ch+var_140]
		test	eax, eax
		jz	short loc_448DAA
		mov	[esp+18Ch+var_188], offset aWaitingForOcsp ; "Waiting for OCSP client connections...\"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf

loc_448DAA:				; CODE XREF: _ocsp_main+893j
		mov	ebx, [esp+18Ch+var_158]
		mov	eax, ebx
		add	eax, ebx
		add	eax, ebx
		lea	eax, [eax+eax*4]
		shl	eax, 2
		mov	[esp+18Ch+var_B0], eax
		xor	ebp, ebp
		mov	[esp+18Ch+var_160], 0
		mov	[esp+18Ch+var_144], 0
		mov	[esp+18Ch+var_124], 0
		mov	[esp+18Ch+var_158], 0

loc_448DE3:				; CODE XREF: _ocsp_main+11EDj
		mov	ecx, [esp+18Ch+var_140]
		test	ecx, ecx
		jz	loc_449474

loc_448DEF:				; CODE XREF: _ocsp_main+F6Ej
		lea	edx, [esp+18Ch+var_88]
		lea	eax, [esp+18Ch+var_8C]
		call	_do_responder_isra_0
		test	eax, eax
		jz	loc_4494DD
		mov	eax, [esp+18Ch+var_8C]
		test	eax, eax
		jz	loc_449F60

loc_448E19:				; CODE XREF: _ocsp_main+F7Dj
		mov	edi, [esp+18Ch+var_F8]
		test	edi, edi
		jnz	loc_449710

loc_448E28:				; CODE XREF: _ocsp_main+1228j
		mov	esi, [esp+18Ch+var_110]
		test	esi, esi
		jz	loc_448F56
		mov	ebx, [esp+18Ch+var_10C]
		test	ebx, ebx
		jz	loc_449D10

loc_448E43:				; CODE XREF: _ocsp_main+181Bj
		mov	[esp+18Ch+var_178], offset aSignerCertif_1 ; "signer certificate"
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 3
		mov	eax, [esp+18Ch+var_110]
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_load_cert
		mov	[esp+18Ch+var_158], eax
		test	eax, eax
		jz	loc_44A1D1
		mov	eax, [esp+18Ch+var_EC]
		test	eax, eax
		jz	short loc_448ECC
		mov	[esp+18Ch+var_178], offset aSignerCertif_2 ; "signer certificates"
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 3
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_load_certs
		mov	[esp+18Ch+var_144], eax
		test	eax, eax
		jz	loc_4494DD

loc_448ECC:				; CODE XREF: _ocsp_main+98Dj
		mov	[esp+18Ch+var_174], offset aSignerPrivateK ; "signer private key"
		mov	[esp+18Ch+var_178], 0
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 3
		mov	eax, [esp+18Ch+var_10C]
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_load_key
		mov	[esp+18Ch+var_124], eax
		test	eax, eax
		jz	loc_4494DD
		mov	ebx, [esp+18Ch+var_E8]
		mov	[esp+18Ch+var_178], ebx
		mov	ebx, [esp+18Ch+var_144]
		mov	[esp+18Ch+var_17C], ebx
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], eax
		mov	eax, [esp+18Ch+var_158]
		mov	[esp+18Ch+var_188], eax
		mov	eax, [esp+18Ch+var_8C]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_request_sign
		test	eax, eax
		jz	loc_44A1B0

loc_448F56:				; CODE XREF: _ocsp_main+92Ej
					; _ocsp_main+FB5j
		mov	ecx, [esp+18Ch+var_F4]
		test	ecx, ecx
		jz	short loc_448F84
		mov	eax, [esp+18Ch+var_8C]
		test	eax, eax
		jz	short loc_448F84
		mov	[esp+18Ch+var_184], 0
		mov	[esp+18Ch+var_188], eax
		mov	eax, [esp+18Ch+var_138]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_REQUEST_print

loc_448F84:				; CODE XREF: _ocsp_main+A5Fj
					; _ocsp_main+A6Aj
		mov	eax, [esp+18Ch+var_100]
		test	eax, eax
		jz	short loc_448FCC
		mov	[esp+18Ch+var_188], offset aWb_9 ; "wb"
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	loc_44A297
		mov	eax, [esp+18Ch+var_8C]
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], ebx
		mov	[esp+18Ch+var_18C], offset _i2d_OCSP_REQUEST
		call	_ASN1_i2d_bio
		mov	[esp+18Ch+var_18C], ebx
		call	_BIO_free

loc_448FCC:				; CODE XREF: _ocsp_main+A8Dj
		mov	edx, [esp+18Ch+var_FC]
		test	edx, edx
		jz	loc_449C90
		mov	eax, [esp+18Ch+var_130]
		test	eax, eax
		jz	loc_44A065
		mov	eax, [esp+18Ch+var_134]
		test	eax, eax
		jz	loc_44A065
		mov	eax, [esp+18Ch+var_168]
		test	eax, eax
		jz	loc_44A065
		mov	eax, [esp+18Ch+var_160]
		test	eax, eax
		jz	loc_449F20

loc_44900B:				; CODE XREF: _ocsp_main+1796j
					; _ocsp_main+1A4Dj
		mov	ebp, [esp+18Ch+var_8C]
		mov	[esp+18Ch+var_18C], ebp
		call	_OCSP_request_onereq_count
		mov	[esp+18Ch+var_15C], eax
		test	eax, eax
		jle	loc_449DA0
		call	_OCSP_BASICRESP_new
		mov	[esp+18Ch+var_13C], eax
		mov	[esp+18Ch+var_188], 0
		mov	[esp+18Ch+var_18C], 0
		call	_X509_gmtime_adj
		mov	[esp+18Ch+var_12C], eax
		mov	eax, [esp+18Ch+var_E0]
		cmp	eax, 0FFFFFFFFh
		jz	loc_449750
		mov	[esp+18Ch+var_180], 0
		mov	ebx, [esp+18Ch+var_B0]
		mov	[esp+18Ch+var_184], ebx
		mov	[esp+18Ch+var_188], eax
		mov	[esp+18Ch+var_18C], 0
		call	_X509_time_adj_ex
		mov	[esp+18Ch+var_128], eax

loc_44907E:				; CODE XREF: _ocsp_main+1258j
		xor	edi, edi
		xor	esi, esi
		jmp	loc_4491AD
; ---------------------------------------------------------------------------
		align 10h

loc_449090:				; CODE XREF: _ocsp_main+D51j
		mov	[esp+18Ch+var_17C], ebx
		lea	eax, [esp+18Ch+var_84]
		mov	[esp+18Ch+var_180], eax
		mov	[esp+18Ch+var_184], 0
		mov	[esp+18Ch+var_188], 0
		mov	[esp+18Ch+var_18C], 0
		call	_OCSP_id_get0_info
		mov	[esp+18Ch+var_70], 0
		mov	[esp+18Ch+var_6C], 0
		mov	[esp+18Ch+var_68], 0
		mov	[esp+18Ch+var_64], 0
		mov	[esp+18Ch+var_60], 0
		mov	[esp+18Ch+var_5C], 0
		mov	[esp+18Ch+var_188], 0
		mov	eax, [esp+18Ch+var_84]
		mov	[esp+18Ch+var_18C], eax
		call	_ASN1_INTEGER_to_BN
		mov	edx, eax
		test	eax, eax
		jz	loc_4497A0

loc_44911E:				; CODE XREF: _ocsp_main+12C4j
		mov	eax, [edx+4]
		test	eax, eax
		jz	loc_449550
		mov	[esp+18Ch+var_18C], edx
		mov	[esp+18Ch+var_164], edx
		call	_BN_bn2hex
		mov	ecx, eax
		mov	edx, [esp+18Ch+var_164]

loc_44913B:				; CODE XREF: _ocsp_main+1066j
		mov	[esp+18Ch+var_64], ecx
		mov	[esp+18Ch+var_154], ecx
		mov	[esp+18Ch+var_18C], edx
		call	_BN_free
		mov	eax, [esp+18Ch+var_160]
		mov	eax, [eax+4]
		lea	ecx, [esp+18Ch+var_70]
		mov	[esp+18Ch+var_184], ecx
		mov	[esp+18Ch+var_188], 3
		mov	[esp+18Ch+var_18C], eax
		call	_TXT_DB_get_by_index
		mov	[esp+18Ch+var_164], eax
		mov	ecx, [esp+18Ch+var_154]
		mov	[esp+18Ch+var_18C], ecx
		call	_CRYPTO_free
		mov	eax, [esp+18Ch+var_164]
		test	eax, eax
		jz	loc_449257
		mov	edx, [eax]
		mov	dl, [edx]
		cmp	dl, 56h
		jz	loc_449570
		cmp	dl, 52h
		jz	loc_4495B0

loc_4491A2:				; CODE XREF: _ocsp_main+10A8j
					; _ocsp_main+11B1j
		inc	esi
		cmp	esi, [esp+18Ch+var_15C]
		jz	loc_44929A

loc_4491AD:				; CODE XREF: _ocsp_main+B82j
					; _ocsp_main+D94j
		mov	[esp+18Ch+var_188], esi
		mov	[esp+18Ch+var_18C], ebp
		call	_OCSP_request_onereq_get0
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_onereq_get0_id
		mov	ebx, eax
		mov	[esp+18Ch+var_17C], eax
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 0
		lea	eax, [esp+18Ch+var_80]
		mov	[esp+18Ch+var_188], eax
		mov	[esp+18Ch+var_18C], 0
		call	_OCSP_id_get0_info
		mov	eax, [esp+18Ch+var_80]
		mov	[esp+18Ch+var_18C], eax
		call	_OBJ_obj2nid
		mov	[esp+18Ch+var_18C], eax
		call	_OBJ_nid2sn
		mov	[esp+18Ch+var_18C], eax
		call	_EVP_get_digestbyname
		test	eax, eax
		jz	loc_449730
		test	edi, edi
		jz	short loc_449229
		mov	[esp+18Ch+var_164], eax
		mov	[esp+18Ch+var_18C], edi
		call	_OCSP_CERTID_free
		mov	eax, [esp+18Ch+var_164]

loc_449229:				; CODE XREF: _ocsp_main+D17j
		mov	edi, [esp+18Ch+var_168]
		mov	[esp+18Ch+var_184], edi
		mov	[esp+18Ch+var_188], 0
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_cert_to_id
		mov	edi, eax
		mov	[esp+18Ch+var_188], ebx
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_id_issuer_cmp
		test	eax, eax
		jz	loc_449090

loc_449257:				; CODE XREF: _ocsp_main+C86j
		mov	eax, [esp+18Ch+var_128]
		mov	[esp+18Ch+var_174], eax
		mov	eax, [esp+18Ch+var_12C]
		mov	[esp+18Ch+var_178], eax
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 2
		mov	[esp+18Ch+var_188], ebx
		mov	eax, [esp+18Ch+var_13C]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_basic_add1_status
		inc	esi
		cmp	esi, [esp+18Ch+var_15C]
		jnz	loc_4491AD

loc_44929A:				; CODE XREF: _ocsp_main+CA7j
		mov	[esp+18Ch+var_188], ebp
		mov	ebx, [esp+18Ch+var_13C]
		mov	[esp+18Ch+var_18C], ebx
		call	_OCSP_copy_nonce
		mov	eax, [esp+18Ch+var_D8]
		mov	[esp+18Ch+var_178], eax
		mov	eax, [esp+18Ch+var_B4]
		mov	[esp+18Ch+var_17C], eax
		mov	[esp+18Ch+var_180], 0
		mov	eax, [esp+18Ch+var_130]
		mov	[esp+18Ch+var_184], eax
		mov	eax, [esp+18Ch+var_134]
		mov	[esp+18Ch+var_188], eax
		mov	[esp+18Ch+var_18C], ebx
		call	_OCSP_basic_sign
		mov	[esp+18Ch+var_188], ebx
		mov	[esp+18Ch+var_18C], 0
		call	_OCSP_response_create
		mov	ebp, eax

loc_4492F2:				; CODE XREF: _ocsp_main+1246j
					; _ocsp_main+18D0j
		mov	eax, [esp+18Ch+var_12C]
		mov	[esp+18Ch+var_18C], eax
		call	_ASN1_TIME_free
		mov	eax, [esp+18Ch+var_128]
		mov	[esp+18Ch+var_18C], eax
		call	_ASN1_TIME_free
		mov	[esp+18Ch+var_18C], edi
		call	_OCSP_CERTID_free
		mov	eax, [esp+18Ch+var_13C]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_BASICRESP_free
		mov	ebx, [esp+18Ch+var_88]
		test	ebx, ebx
		jz	short loc_44939F
		mov	esi, offset aHttp1_0200Ok_1 ; "HTTP/1.0	200 OK\r\nContent-type:	applic"...
		mov	ecx, 14h
		lea	edi, [esp+18Ch+var_70]
		rep movsd
		mov	al, [esi]
		mov	byte ptr [esp+18Ch+var_164], al
		mov	[edi], al

loc_449344:				; CODE XREF: _ocsp_main+1A9Aj
		mov	[esp+18Ch+var_188], 0
		mov	[esp+18Ch+var_18C], ebp
		call	_i2d_OCSP_RESPONSE
		mov	[esp+18Ch+var_184], eax
		lea	eax, [esp+18Ch+var_70]
		mov	[esp+18Ch+var_188], eax
		mov	[esp+18Ch+var_18C], ebx
		call	_BIO_printf
		mov	[esp+18Ch+var_184], ebp
		mov	[esp+18Ch+var_188], ebx
		mov	[esp+18Ch+var_18C], offset _i2d_OCSP_RESPONSE
		call	_ASN1_i2d_bio
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 0
		mov	[esp+18Ch+var_188], 0Bh
		mov	[esp+18Ch+var_18C], ebx
		call	_BIO_ctrl

loc_44939F:				; CODE XREF: _ocsp_main+E27j
					; _ocsp_main+1802j ...
		mov	eax, [esp+18Ch+var_F0]
		test	eax, eax
		jz	short loc_4493E0
		mov	[esp+18Ch+var_188], offset aWb_9 ; "wb"
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	loc_44A17C
		mov	[esp+18Ch+var_184], ebp
		mov	[esp+18Ch+var_188], eax
		mov	[esp+18Ch+var_18C], offset _i2d_OCSP_RESPONSE
		call	_ASN1_i2d_bio
		mov	[esp+18Ch+var_18C], ebx
		call	_BIO_free

loc_4493E0:				; CODE XREF: _ocsp_main+EA8j
		mov	[esp+18Ch+var_18C], ebp
		call	_OCSP_response_status
		mov	ebx, eax
		test	eax, eax
		jnz	loc_4496C0
		mov	ebx, [esp+18Ch+var_E4]
		test	ebx, ebx
		jnz	loc_449780

loc_449401:				; CODE XREF: _ocsp_main+1298j
		mov	eax, [esp+18Ch+var_88]
		test	eax, eax
		jz	loc_44A2A3
		mov	ecx, [esp+18Ch+var_108]
		test	ecx, ecx
		jle	short loc_449422
		dec	[esp+18Ch+var_108]

loc_449422:				; CODE XREF: _ocsp_main+F19j
		mov	edx, [esp+18Ch+var_108]
		test	edx, edx
		jz	loc_4494DD
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_free_all
		mov	[esp+18Ch+var_88], 0
		mov	eax, [esp+18Ch+var_8C]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_REQUEST_free
		mov	[esp+18Ch+var_8C], 0
		mov	[esp+18Ch+var_18C], ebp
		call	_OCSP_RESPONSE_free
		xor	ebp, ebp
		mov	ecx, [esp+18Ch+var_140]
		test	ecx, ecx
		jnz	loc_448DEF

loc_449474:				; CODE XREF: _ocsp_main+8E9j
		mov	eax, [esp+18Ch+var_8C]
		test	eax, eax
		jnz	loc_448E19
		mov	eax, [esp+18Ch+var_110]
		test	eax, eax
		jnz	short loc_4494BB
		mov	eax, [esp+18Ch+var_100]
		test	eax, eax
		jnz	short loc_4494BB
		mov	eax, [esp+18Ch+var_A0]
		test	eax, eax
		jnz	short loc_4494BB
		mov	eax, [esp+18Ch+var_F8]
		test	eax, eax
		jnz	short loc_4494BB
		mov	eax, [esp+18Ch+var_FC]
		test	eax, eax
		jz	loc_448F56

loc_4494BB:				; CODE XREF: _ocsp_main+F89j
					; _ocsp_main+F94j ...
		mov	[esp+18Ch+var_188], offset aNeedAnOcspRequ ; "Need an OCSP request for this operation"...
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4494D0:				; CODE XREF: _ocsp_main+1A17j
					; _ocsp_main+1B6Dj ...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf

loc_4494DD:				; CODE XREF: _ocsp_main+904j
					; _ocsp_main+9C6j ...
		mov	edi, 1
		xor	esi, esi
		mov	[esp+18Ch+var_164], 0
		xor	ebx, ebx
		jmp	loc_44860F
; ---------------------------------------------------------------------------
		align 10h

loc_449500:				; CODE XREF: _ocsp_main+54Ej
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_9C], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------
		align 10h

loc_449520:				; CODE XREF: _ocsp_main+470j
		mov	eax, [ebx+4]
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aIllegalTimeout ; "Illegal timeout value %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edx, 1
		jmp	loc_448912
; ---------------------------------------------------------------------------
		align 10h

loc_449550:				; CODE XREF: _ocsp_main+C23j
		mov	[esp+18Ch+var_164], edx
		mov	[esp+18Ch+var_18C], offset a00_0 ; "00"
		call	_BUF_strdup
		mov	ecx, eax
		mov	edx, [esp+18Ch+var_164]
		jmp	loc_44913B
; ---------------------------------------------------------------------------
		align 10h

loc_449570:				; CODE XREF: _ocsp_main+C93j
		mov	eax, [esp+18Ch+var_128]
		mov	[esp+18Ch+var_174], eax
		mov	eax, [esp+18Ch+var_12C]
		mov	[esp+18Ch+var_178], eax
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 0
		mov	[esp+18Ch+var_188], ebx
		mov	eax, [esp+18Ch+var_13C]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_basic_add1_status
		jmp	loc_4491A2
; ---------------------------------------------------------------------------
		align 10h

loc_4495B0:				; CODE XREF: _ocsp_main+C9Cj
		mov	[esp+18Ch+var_7C], 0
		mov	[esp+18Ch+var_78], 0
		mov	[esp+18Ch+var_74], 0
		mov	[esp+18Ch+var_70], 0FFFFFFFFh
		mov	eax, [eax+8]
		mov	[esp+18Ch+var_17C], eax
		lea	eax, [esp+18Ch+var_74]
		mov	[esp+18Ch+var_180], eax
		lea	eax, [esp+18Ch+var_7C]
		mov	[esp+18Ch+var_184], eax
		lea	eax, [esp+18Ch+var_70]
		mov	[esp+18Ch+var_188], eax
		lea	eax, [esp+18Ch+var_78]
		mov	[esp+18Ch+var_18C], eax
		call	_unpack_revinfo
		mov	eax, [esp+18Ch+var_128]
		mov	[esp+18Ch+var_174], eax
		mov	eax, [esp+18Ch+var_12C]
		mov	[esp+18Ch+var_178], eax
		mov	eax, [esp+18Ch+var_78]
		mov	[esp+18Ch+var_17C], eax
		mov	eax, [esp+18Ch+var_70]
		mov	[esp+18Ch+var_180], eax
		mov	[esp+18Ch+var_184], 1
		mov	[esp+18Ch+var_188], ebx
		mov	eax, [esp+18Ch+var_13C]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_basic_add1_status
		mov	edx, [esp+18Ch+var_74]
		test	edx, edx
		jz	loc_449E10
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], edx
		mov	[esp+18Ch+var_188], 8Eh
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_SINGLERESP_add1_ext_i2d
		mov	eax, [esp+18Ch+var_7C]

loc_44968B:				; CODE XREF: _ocsp_main+194Aj
					; _ocsp_main+19AFj
		mov	[esp+18Ch+var_18C], eax
		call	_ASN1_OBJECT_free
		mov	eax, [esp+18Ch+var_78]
		mov	[esp+18Ch+var_18C], eax
		call	_ASN1_TIME_free
		mov	eax, [esp+18Ch+var_74]
		mov	[esp+18Ch+var_18C], eax
		call	_ASN1_GENERALIZEDTIME_free
		jmp	loc_4491A2
; ---------------------------------------------------------------------------
		align 10h

loc_4496C0:				; CODE XREF: _ocsp_main+EECj
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_response_status_str
		mov	[esp+18Ch+var_180], ebx
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aResponderError ; "Responder	Error: %s (%d)\n"
		mov	eax, [esp+18Ch+var_138]
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	esi, [esp+18Ch+var_DC]
		test	esi, esi
		jnz	loc_448DE3

loc_4496F3:				; CODE XREF: _ocsp_main+19BDj
		xor	edi, edi
		xor	esi, esi
		mov	[esp+18Ch+var_164], 0
		xor	ebx, ebx
		jmp	loc_44860F
; ---------------------------------------------------------------------------
		align 10h

loc_449710:				; CODE XREF: _ocsp_main+922j
		mov	[esp+18Ch+var_184], 0FFFFFFFFh
		mov	[esp+18Ch+var_188], 0
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_request_add1_nonce
		jmp	loc_448E28
; ---------------------------------------------------------------------------
		align 10h

loc_449730:				; CODE XREF: _ocsp_main+D0Fj
		mov	[esp+18Ch+var_188], 0
		mov	[esp+18Ch+var_18C], 2
		call	_OCSP_response_create
		mov	ebp, eax
		jmp	loc_4492F2
; ---------------------------------------------------------------------------
		align 10h

loc_449750:				; CODE XREF: _ocsp_main+B51j
		mov	[esp+18Ch+var_128], 0
		jmp	loc_44907E
; ---------------------------------------------------------------------------
		align 10h

loc_449760:				; CODE XREF: _ocsp_main+508j
		mov	[esp+18Ch+var_188], offset aErrorParsing_0 ; "Error parsing URL\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edx, 1
		jmp	loc_448A10
; ---------------------------------------------------------------------------
		align 10h

loc_449780:				; CODE XREF: _ocsp_main+EFBj
		mov	[esp+18Ch+var_184], 0
		mov	[esp+18Ch+var_188], ebp
		mov	eax, [esp+18Ch+var_138]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_RESPONSE_print
		jmp	loc_449401
; ---------------------------------------------------------------------------
		align 10h

loc_4497A0:				; CODE XREF: _ocsp_main+C18j
		mov	[esp+18Ch+var_164], eax
		mov	[esp+18Ch+var_184], offset aBn ; "bn"
		mov	[esp+18Ch+var_188], 445h
		mov	[esp+18Ch+var_18C], offset aOcsp_c ; "ocsp.c"
		call	_OpenSSLDie
		mov	edx, [esp+18Ch+var_164]
		jmp	loc_44911E
; ---------------------------------------------------------------------------
		align 10h

loc_4497D0:				; CODE XREF: _ocsp_main+417j
		mov	edx, 1
		jmp	loc_448C10
; ---------------------------------------------------------------------------

loc_4497DA:				; CODE XREF: _ocsp_main+719j
		mov	eax, [esp+18Ch+var_154]
		test	eax, eax
		jnz	loc_448C1F
		mov	eax, [esp+18Ch+var_D0]
		test	eax, eax
		jnz	loc_448C1F
		mov	eax, [esp+18Ch+var_9C]
		test	eax, eax
		jz	short loc_449810
		mov	eax, [esp+18Ch+var_FC]
		test	eax, eax
		jnz	loc_448C1F
		nop

loc_449810:				; CODE XREF: _ocsp_main+721j
					; _ocsp_main+12FEj
		mov	[esp+18Ch+var_188], offset aOcspUtility	; "OCSP	utility\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aUsageOcspOptio ; "Usage ocsp [options]\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aWhereOption_20 ; "where options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aOutFileOutp_10 ; "-out file		   output filename\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aIssuerFileIssu ; "-issuer file	   issuer certificate"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aCertFileCertif ; "-cert file	   certificate to che"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aSerialNSerialN ; "-serial n		   serial number to c"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aSignerFileCert ; "-signer file	   certificate to sig"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aSignkeyFilePri ; "-signkey file	   private key to sig"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aSign_otherFile ; "-sign_other file	   additional certifi"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNo_certsDonTIn ; "-no_certs		   don't include any "...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aReq_textPrintT ; "-req_text		   print text form of"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aResp_textPrint ; "-resp_text	   print text form of"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aTextPrintTextF ; "-text		   print text form of"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aReqoutFileWrit ; "-reqout file	   write DER encoded "...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aRespoutFileWri ; "-respout file	   write DER encoded "...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aReqinFileReadD ; "-reqin file	   read	DER encoded O"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aRespinFileRead ; "-respin file	   read	DER encoded O"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNonceAddOcspNo ; "-nonce		   add OCSP nonce to "...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNo_nonceDonTAd ; "-no_nonce		   don't add OCSP non"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aUrlUrlOcspResp ; "-url URL		   OCSP	responder URL"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aHostHostNSendO ; "-host host:n	   send	OCSP request "...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aPathPathToUseI ; "-path		   path	to use in OCS"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aCapathDirTru_1 ; "-CApath dir	   trusted certificat"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aCafileFileTr_1 ; "-CAfile file	   trusted certificat"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNo_alt_chain_3 ; "-no_alt_chains	   only	ever use the "...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aVafileFileVali ; "-VAfile file	   validator certific"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aValidity_perio ; "-validity_period n   maximum validity d"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aStatus_ageNMax ; "-status_age n	   maximum status age"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNoverifyDonT_1 ; "-noverify		   don't verify respo"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aVerify_otherFi ; "-verify_other file   additional certifi"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aTrust_otherDon ; "-trust_other	   don't verify addit"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNo_internDonTS ; "-no_intern	   don't search certi"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNo_signature_v ; "-no_signature_verify don't check signat"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNo_cert_verify ; "-no_cert_verify	   don't check signin"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNo_chainDonTCh ; "-no_chain		   don't chain verify"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNo_cert_checks ; "-no_cert_checks	   don't do additiona"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aPortNumPortToR ; "-port num		   port	to run respon"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aIndexFileCerti ; "-index file	   certificate status"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aCaFileCaCertif ; "-CA file		   CA certificate\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aRsignerFileRes ; "-rsigner file	   responder certific"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aRkeyFileRespon ; "-rkey file	   responder key to s"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aRotherFileOthe ; "-rother file	   other certificates"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aResp_no_certsD ; "-resp_no_certs	   don't include any "...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNminNNumberOfM ; "-nmin n		   number of minutes "...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNdaysNNumberOf ; "-ndays n		   number of days bef"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aResp_key_idIde ; "-resp_key_id	   identify reponse b"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aNrequestNNumbe ; "-nrequest	n	   number of requests"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aDgstAlgUseSpec ; "-<dgst alg>	   use specified dige"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aTimeoutNTimeou ; "-timeout n	   timeout connection"...
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf

loc_449C2A:				; CODE XREF: _ocsp_main+1968j
					; _ocsp_main+275Dj ...
		xor	ebp, ebp
		mov	[esp+18Ch+var_160], 0
		mov	[esp+18Ch+var_168], 0
		mov	edi, 1
		xor	esi, esi
		mov	[esp+18Ch+var_144], 0
		mov	[esp+18Ch+var_164], 0
		mov	[esp+18Ch+var_138], 0

loc_449C5B:				; CODE XREF: _ocsp_main+1B60j
		mov	[esp+18Ch+var_140], 0
		mov	[esp+18Ch+var_130], 0
		mov	[esp+18Ch+var_124], 0
		mov	[esp+18Ch+var_134], 0
		mov	[esp+18Ch+var_158], 0
		xor	ebx, ebx
		jmp	loc_44860F
; ---------------------------------------------------------------------------
		align 10h

loc_449C90:				; CODE XREF: _ocsp_main+AD5j
		mov	eax, [esp+18Ch+var_160]
		test	eax, eax
		jnz	loc_44900B
		mov	eax, [esp+18Ch+var_A0]
		test	eax, eax
		jz	loc_449EB4
		mov	ebx, [esp+18Ch+var_104]
		mov	[esp+18Ch+var_170], ebx
		mov	edx, [esp+18Ch+var_90]
		mov	[esp+18Ch+var_174], edx
		mov	edx, [esp+18Ch+var_94]
		mov	[esp+18Ch+var_178], edx
		mov	edx, [esp+18Ch+var_9C]
		mov	[esp+18Ch+var_17C], edx
		mov	edx, [esp+18Ch+var_98]
		mov	[esp+18Ch+var_180], edx
		mov	[esp+18Ch+var_184], eax
		mov	eax, [esp+18Ch+var_8C]
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_process_responder
		mov	ebp, eax
		test	eax, eax
		jnz	loc_44939F
		jmp	loc_4494DD
; ---------------------------------------------------------------------------
		align 10h

loc_449D10:				; CODE XREF: _ocsp_main+93Dj
		mov	eax, [esp+18Ch+var_110]
		mov	[esp+18Ch+var_10C], eax
		jmp	loc_448E43
; ---------------------------------------------------------------------------

loc_449D20:				; CODE XREF: _ocsp_main+562j
		mov	edi, offset aIgnore_err	; "-ignore_err"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jz	loc_449E78
		mov	edi, offset aNoverify_2	; "-noverify"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_44A133
		mov	edi, offset aNonce ; "-nonce"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jz	loc_44A1BD
		mov	edi, offset aNo_nonce ;	"-no_nonce"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_44A485
		mov	edi, offset aResp_no_certs ; "-resp_no_certs"
		mov	ecx, 0Fh
		mov	esi, eax
		repe cmpsb
		jnz	loc_44A63F
		or	[esp+18Ch+var_D8], 1
		mov	esi, ebx
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------
		align 10h

loc_449DA0:				; CODE XREF: _ocsp_main+B20j
		mov	[esp+18Ch+var_188], 0
		mov	[esp+18Ch+var_18C], 1
		call	_OCSP_response_create
		mov	ebp, eax
		mov	[esp+18Ch+var_13C], 0
		xor	edi, edi
		mov	[esp+18Ch+var_128], 0
		mov	[esp+18Ch+var_12C], 0
		jmp	loc_4492F2
; ---------------------------------------------------------------------------
		align 10h

loc_449DE0:				; CODE XREF: _ocsp_main+5Ej
		mov	[esp+18Ch+var_188], 0
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_new_fp
		mov	ds:_bio_err, eax
		jmp	loc_448564
; ---------------------------------------------------------------------------
		align 10h

loc_449E10:				; CODE XREF: _ocsp_main+115Aj
		mov	edx, [esp+18Ch+var_7C]
		test	edx, edx
		jz	loc_449EAD
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], edx
		mov	[esp+18Ch+var_188], 1AEh
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_SINGLERESP_add1_ext_i2d
		mov	eax, [esp+18Ch+var_7C]
		jmp	loc_44968B
; ---------------------------------------------------------------------------

loc_449E4F:				; CODE XREF: _ocsp_main+574j
		lea	edi, [esp+18Ch+var_90]
		mov	[esp+18Ch+var_184], edi
		mov	[esp+18Ch+var_188], edx
		mov	[esp+18Ch+var_18C], eax
		call	_X509V3_add_value
		test	eax, eax
		jz	loc_449C2A
		lea	esi, [ebx+8]
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_449E78:				; CODE XREF: _ocsp_main+182Ej
		mov	esi, ebx
		mov	[esp+18Ch+var_DC], 1
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_449E8C:				; CODE XREF: _ocsp_main+729j
		mov	[esp+18Ch+var_188], 0
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_new_fp
		mov	[esp+18Ch+var_138], eax
		jmp	loc_448C43
; ---------------------------------------------------------------------------

loc_449EAD:				; CODE XREF: _ocsp_main+1919j
		xor	eax, eax
		jmp	loc_44968B
; ---------------------------------------------------------------------------

loc_449EB4:				; CODE XREF: _ocsp_main+17A5j
		mov	eax, [esp+18Ch+var_D0]
		test	eax, eax
		jz	loc_4496F3
		mov	[esp+18Ch+var_188], offset aRb_7 ; "rb"
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	loc_44A729
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset _d2i_OCSP_RESPONSE
		mov	[esp+18Ch+var_18C], offset _OCSP_RESPONSE_new
		call	_ASN1_d2i_bio
		mov	ebp, eax
		mov	[esp+18Ch+var_18C], ebx
		call	_BIO_free
		test	ebp, ebp
		jnz	loc_44939F
		mov	[esp+18Ch+var_188], offset aErrorReadingOc ; "Error reading OCSP response\n"
		jmp	loc_4494D0
; ---------------------------------------------------------------------------
		align 10h

loc_449F20:				; CODE XREF: _ocsp_main+B05j
		mov	[esp+18Ch+var_188], 0 ;	int
		mov	eax, [esp+18Ch+var_FC]
		mov	[esp+18Ch+var_18C], eax	; char *
		call	_load_index
		mov	[esp+18Ch+var_160], eax
		test	eax, eax
		jz	loc_4494DD
		mov	[esp+18Ch+var_18C], eax
		call	_index_index
		test	eax, eax
		jnz	loc_44900B
		jmp	loc_4494DD
; ---------------------------------------------------------------------------
		align 10h

loc_449F60:				; CODE XREF: _ocsp_main+913j
		mov	[esp+18Ch+var_188], 0
		mov	[esp+18Ch+var_18C], 1
		call	_OCSP_response_create
		mov	ebp, eax
		mov	ebx, [esp+18Ch+var_88]
		mov	esi, offset aHttp1_0200Ok_1 ; "HTTP/1.0	200 OK\r\nContent-type:	applic"...
		mov	ecx, 14h
		lea	edi, [esp+18Ch+var_70]
		rep movsd
		mov	al, [esi]
		mov	byte ptr [esp+18Ch+var_164], al
		mov	[edi], al
		test	ebx, ebx
		jnz	loc_449344
		jmp	loc_44939F
; ---------------------------------------------------------------------------

loc_449FA5:				; CODE XREF: _ocsp_main+758j
		cmp	[esp+18Ch+var_F8], 2
		jz	short loc_449FBA
		mov	[esp+18Ch+var_F8], 0

loc_449FBA:				; CODE XREF: _ocsp_main+1AADj
		mov	eax, [esp+18Ch+var_154]
		test	eax, eax
		jz	loc_44A1DE
		mov	[esp+18Ch+var_188], offset aRb_7 ; "rb"
		mov	eax, [esp+18Ch+var_154]
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_new_file
		mov	ebx, eax
		test	eax, eax
		jz	loc_44A5D4
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset _d2i_OCSP_REQUEST
		mov	[esp+18Ch+var_18C], offset _OCSP_REQUEST_new
		call	_ASN1_d2i_bio
		mov	[esp+18Ch+var_8C], eax
		mov	[esp+18Ch+var_18C], ebx
		call	_BIO_free
		mov	ebx, [esp+18Ch+var_8C]
		test	ebx, ebx
		jnz	loc_448C5E
		mov	[esp+18Ch+var_188], offset aErrorReading_7 ; "Error reading OCSP request\n"

loc_44A02A:				; CODE XREF: _ocsp_main+1C77j
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf

loc_44A037:				; CODE XREF: _ocsp_main+1D92j
		xor	ebp, ebp
		mov	[esp+18Ch+var_160], 0
		mov	[esp+18Ch+var_168], 0
		mov	edi, 1
		xor	esi, esi
		mov	[esp+18Ch+var_144], 0
		mov	[esp+18Ch+var_164], 0
		jmp	loc_449C5B
; ---------------------------------------------------------------------------

loc_44A065:				; CODE XREF: _ocsp_main+AE1j
					; _ocsp_main+AEDj ...
		mov	[esp+18Ch+var_188], offset aNeedAResponder ; "Need a responder certificate, key	and C"...
		jmp	loc_4494D0
; ---------------------------------------------------------------------------

loc_44A072:				; CODE XREF: _ocsp_main+778j
		mov	eax, [esp+18Ch+var_168]
		mov	[esp+18Ch+var_164], eax
		jmp	loc_448C7E
; ---------------------------------------------------------------------------

loc_44A07F:				; CODE XREF: _ocsp_main+7B9j
		mov	[esp+18Ch+var_188], offset aErrorLoading_6 ; "Error loading responder certificate\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		xor	ebp, ebp
		mov	[esp+18Ch+var_160], 0
		mov	[esp+18Ch+var_168], 0

loc_44A0A6:				; CODE XREF: _ocsp_main+1C2Ej
		mov	edi, 1
		xor	esi, esi
		mov	[esp+18Ch+var_144], 0
		mov	[esp+18Ch+var_164], 0
		mov	[esp+18Ch+var_130], 0
		mov	[esp+18Ch+var_124], 0
		mov	[esp+18Ch+var_158], 0
		xor	ebx, ebx
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A0DC:				; CODE XREF: _ocsp_main+7FEj
		mov	[esp+18Ch+var_B4], 0
		jmp	loc_448D44
; ---------------------------------------------------------------------------

loc_44A0EC:				; CODE XREF: _ocsp_main+887j
		xor	ebp, ebp
		mov	[esp+18Ch+var_160], 0
		mov	edi, 1
		xor	esi, esi
		mov	[esp+18Ch+var_144], 0
		mov	[esp+18Ch+var_164], 0
		mov	[esp+18Ch+var_124], 0
		mov	[esp+18Ch+var_158], 0
		xor	ebx, ebx
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A124:				; CODE XREF: _ocsp_main+83Ej
		xor	ebp, ebp
		mov	[esp+18Ch+var_160], 0
		jmp	loc_44A0A6
; ---------------------------------------------------------------------------

loc_44A133:				; CODE XREF: _ocsp_main+1842j
		mov	esi, ebx
		xor	edx, edx
		mov	[esp+18Ch+var_C8], 1
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A147:				; CODE XREF: _ocsp_main+76Cj
		mov	[esp+18Ch+var_168], 0
		mov	[esp+18Ch+var_B4], 0
		mov	[esp+18Ch+var_130], 0
		mov	[esp+18Ch+var_134], 0
		jmp	loc_448D8D
; ---------------------------------------------------------------------------

loc_44A16F:				; CODE XREF: _ocsp_main+749j
		mov	[esp+18Ch+var_188], offset aErrorOpening_4 ; "Error opening output file\n"
		jmp	loc_44A02A
; ---------------------------------------------------------------------------

loc_44A17C:				; CODE XREF: _ocsp_main+EBEj
		mov	eax, [esp+18Ch+var_F0]

loc_44A183:				; CODE XREF: _ocsp_main+1D9Ej
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aErrorOpeningFi ; "Error opening file %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edi, 1
		xor	esi, esi
		mov	[esp+18Ch+var_164], 0
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A1B0:				; CODE XREF: _ocsp_main+A50j
		mov	[esp+18Ch+var_188], offset aErrorSigningOc ; "Error signing OCSP request\n"
		jmp	loc_4494D0
; ---------------------------------------------------------------------------

loc_44A1BD:				; CODE XREF: _ocsp_main+1856j
		mov	esi, ebx
		xor	edx, edx
		mov	[esp+18Ch+var_F8], 2
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A1D1:				; CODE XREF: _ocsp_main+97Ej
		mov	[esp+18Ch+var_188], offset aErrorLoadingSi ; "Error loading signer certificate\n"
		jmp	loc_4494D0
; ---------------------------------------------------------------------------

loc_44A1DE:				; CODE XREF: _ocsp_main+1AC0j
		mov	esi, [esp+18Ch+var_9C]
		test	esi, esi
		jz	loc_448C5E
		call	_BIO_f_buffer
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_44A79D
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_new_accept
		mov	[esp+18Ch+var_140], eax
		test	eax, eax
		jz	short loc_44A282
		mov	[esp+18Ch+var_180], ebx
		mov	[esp+18Ch+var_184], 2
		mov	[esp+18Ch+var_188], 76h
		mov	ebx, eax
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_ctrl
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 0
		mov	[esp+18Ch+var_188], 65h
		mov	[esp+18Ch+var_18C], ebx
		call	_BIO_ctrl
		test	eax, eax
		jg	loc_448C66
		mov	[esp+18Ch+var_188], offset aErrorSettingUp ; "Error setting up accept BIO\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_ERR_print_errors
		xor	ebx, ebx
		mov	eax, [esp+18Ch+var_140]

loc_44A282:				; CODE XREF: _ocsp_main+1D12j
					; _ocsp_main+22A9j
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_free_all
		mov	[esp+18Ch+var_18C], ebx
		call	_BIO_free
		jmp	loc_44A037
; ---------------------------------------------------------------------------

loc_44A297:				; CODE XREF: _ocsp_main+AA3j
		mov	eax, [esp+18Ch+var_100]
		jmp	loc_44A183
; ---------------------------------------------------------------------------

loc_44A2A3:				; CODE XREF: _ocsp_main+F0Aj
		mov	eax, [esp+18Ch+var_B8]
		mov	[esp+18Ch+var_184], eax
		mov	eax, [esp+18Ch+var_BC]
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_setup_verify
		mov	[esp+18Ch+var_164], eax
		test	eax, eax
		jz	loc_44A71B
		mov	eax, [esp+18Ch+var_CC]
		test	eax, eax
		jz	loc_44A714
		mov	[esp+18Ch+var_178], offset aValidatorCerti ; "validator	certificate"
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 3
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_load_certs
		mov	esi, eax
		test	eax, eax
		jz	loc_44A708

loc_44A31C:				; CODE XREF: _ocsp_main+2216j
		mov	[esp+18Ch+var_18C], ebp
		call	_OCSP_response_get1_basic
		mov	ebx, eax
		test	eax, eax
		jz	loc_44A7CF
		mov	edi, [esp+18Ch+var_C8]
		test	edi, edi
		jnz	short loc_44A39C
		mov	eax, [esp+18Ch+var_8C]
		test	eax, eax
		jz	short loc_44A358
		mov	[esp+18Ch+var_188], ebx
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_check_nonce
		test	eax, eax
		jle	loc_44A752

loc_44A358:				; CODE XREF: _ocsp_main+1E42j
					; _ocsp_main+2303j
		mov	eax, [esp+18Ch+var_D4]
		mov	[esp+18Ch+var_180], eax
		mov	eax, [esp+18Ch+var_164]
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], esi
		mov	[esp+18Ch+var_18C], ebx
		call	_OCSP_basic_verify
		test	eax, eax
		js	loc_44A778

loc_44A37F:				; CODE XREF: _ocsp_main+2298j
		test	eax, eax
		jle	loc_44A6E1
		mov	[esp+18Ch+var_188], offset aResponseVerify ; "Response verify OK\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf

loc_44A39C:				; CODE XREF: _ocsp_main+1E37j
					; _ocsp_main+2203j
		mov	ecx, [esp+18Ch+var_8C]
		test	ecx, ecx
		jz	short loc_44A3B7
		mov	eax, [esp+18Ch+var_114]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_num
		test	eax, eax
		jnz	short loc_44A3BE

loc_44A3B7:				; CODE XREF: _ocsp_main+1EA5j
					; _ocsp_main+1ECCj
		xor	edi, edi
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A3BE:				; CODE XREF: _ocsp_main+1EB5j
		mov	eax, [esp+18Ch+var_11C]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_num
		test	eax, eax
		jz	short loc_44A3B7
		xor	edi, edi
		mov	[esp+18Ch+var_15C], esi
		mov	esi, [esp+18Ch+var_138]

loc_44A3D8:				; CODE XREF: _ocsp_main+1F80j
					; _ocsp_main+20CFj
		mov	eax, [esp+18Ch+var_11C]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_num
		cmp	edi, eax
		jge	loc_44A663
		mov	[esp+18Ch+var_188], edi
		mov	eax, [esp+18Ch+var_11C]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_value
		mov	[esp+18Ch+var_154], eax
		mov	[esp+18Ch+var_188], edi
		mov	eax, [esp+18Ch+var_114]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_value
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aS_17 ; "%s:	"
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_printf
		lea	eax, [esp+18Ch+var_70]
		mov	[esp+18Ch+var_174], eax
		lea	eax, [esp+18Ch+var_74]
		mov	[esp+18Ch+var_178], eax
		lea	eax, [esp+18Ch+var_78]
		mov	[esp+18Ch+var_17C], eax
		lea	eax, [esp+18Ch+var_7C]
		mov	[esp+18Ch+var_180], eax
		lea	eax, [esp+18Ch+var_80]
		mov	[esp+18Ch+var_184], eax
		mov	edx, [esp+18Ch+var_154]
		mov	[esp+18Ch+var_188], edx
		mov	[esp+18Ch+var_18C], ebx
		call	_OCSP_resp_find_status
		test	eax, eax
		jnz	short loc_44A499
		mov	[esp+18Ch+var_188], offset aErrorNoStatusF ; "ERROR: No	Status found.\n"
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_puts

loc_44A47F:				; CODE XREF: _ocsp_main+206Dj
		inc	edi
		jmp	loc_44A3D8
; ---------------------------------------------------------------------------

loc_44A485:				; CODE XREF: _ocsp_main+186Aj
		mov	esi, ebx
		xor	edx, edx
		mov	[esp+18Ch+var_F8], 0
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A499:				; CODE XREF: _ocsp_main+1F6Dj
		mov	eax, [esp+18Ch+var_C0]
		mov	[esp+18Ch+var_180], eax
		mov	eax, [esp+18Ch+var_C4]
		mov	[esp+18Ch+var_184], eax
		mov	eax, [esp+18Ch+var_70]
		mov	[esp+18Ch+var_188], eax
		mov	eax, [esp+18Ch+var_74]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_check_validity
		test	eax, eax
		jz	loc_44A6B0

loc_44A4D1:				; CODE XREF: _ocsp_main+21C8j
		mov	eax, [esp+18Ch+var_80]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_cert_status_str
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aS_23 ; "%s\n"
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_printf
		mov	[esp+18Ch+var_188], offset aThisUpdate ; "\tThis Update: "
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_puts
		mov	eax, [esp+18Ch+var_74]
		mov	[esp+18Ch+var_188], eax
		mov	[esp+18Ch+var_18C], esi
		call	_ASN1_GENERALIZEDTIME_print
		mov	[esp+18Ch+var_188], offset asc_4701DB ;	"\n"
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_puts
		mov	edx, [esp+18Ch+var_70]
		test	edx, edx
		jz	short loc_44A565
		mov	[esp+18Ch+var_188], offset aNextUpdate ; "\tNext Update: "
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_puts
		mov	eax, [esp+18Ch+var_70]
		mov	[esp+18Ch+var_188], eax
		mov	[esp+18Ch+var_18C], esi
		call	_ASN1_GENERALIZEDTIME_print
		mov	[esp+18Ch+var_188], offset asc_4701DB ;	"\n"
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_puts

loc_44A565:				; CODE XREF: _ocsp_main+2030j
		cmp	[esp+18Ch+var_80], 1
		jnz	loc_44A47F
		mov	eax, [esp+18Ch+var_7C]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_44A59B
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_crl_reason_str
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aReasonS ; "\tReason: %s\n"
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_printf

loc_44A59B:				; CODE XREF: _ocsp_main+207Dj
		mov	[esp+18Ch+var_188], offset aRevocationTime ; "\tRevocation Time: "
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_puts
		mov	eax, [esp+18Ch+var_78]
		mov	[esp+18Ch+var_188], eax
		mov	[esp+18Ch+var_18C], esi
		call	_ASN1_GENERALIZEDTIME_print
		mov	[esp+18Ch+var_188], offset asc_4701DB ;	"\n"
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_puts
		inc	edi
		jmp	loc_44A3D8
; ---------------------------------------------------------------------------

loc_44A5D4:				; CODE XREF: _ocsp_main+1ADEj
		mov	[esp+18Ch+var_188], offset aErrorOpeningOc ; "Error Opening OCSP request file\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		xor	ebp, ebp
		mov	[esp+18Ch+var_160], 0
		mov	[esp+18Ch+var_168], 0
		mov	edi, 1
		xor	esi, esi
		mov	[esp+18Ch+var_144], 0
		mov	[esp+18Ch+var_164], 0
		mov	[esp+18Ch+var_140], 0
		mov	[esp+18Ch+var_130], 0
		mov	[esp+18Ch+var_124], 0
		mov	[esp+18Ch+var_134], 0
		mov	[esp+18Ch+var_158], 0
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A63F:				; CODE XREF: _ocsp_main+187Ej
		mov	edi, offset aResp_key_id ; "-resp_key_id"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A66E
		or	[esp+18Ch+var_D8], 400h
		mov	esi, ebx
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A663:				; CODE XREF: _ocsp_main+1EE6j
		mov	esi, [esp+18Ch+var_15C]
		xor	edi, edi
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A66E:				; CODE XREF: _ocsp_main+214Dj
		mov	edi, offset aNo_certs ;	"-no_certs"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	short loc_44A6CD
		mov	edi, offset aNo_signature_0 ; "-no_signature_verify"
		mov	ecx, 15h
		mov	esi, eax
		repe cmpsb
		jnz	loc_44A7AE
		or	[esp+18Ch+var_D4], 4
		mov	esi, ebx
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------
		align 10h

loc_44A6B0:				; CODE XREF: _ocsp_main+1FCBj
		mov	[esp+18Ch+var_188], offset aWarningStatusT ; "WARNING: Status times invalid.\n"
		mov	[esp+18Ch+var_18C], esi
		call	_BIO_puts
		mov	[esp+18Ch+var_18C], esi
		call	_ERR_print_errors
		jmp	loc_44A4D1
; ---------------------------------------------------------------------------

loc_44A6CD:				; CODE XREF: _ocsp_main+217Cj
		mov	esi, ebx
		xor	edx, edx
		mov	[esp+18Ch+var_E8], 1
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A6E1:				; CODE XREF: _ocsp_main+1E81j
		mov	[esp+18Ch+var_188], offset aResponseVeri_0 ; "Response Verify Failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_ERR_print_errors
		jmp	loc_44A39C
; ---------------------------------------------------------------------------

loc_44A708:				; CODE XREF: _ocsp_main+1E16j
		mov	edi, 1
		xor	ebx, ebx
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A714:				; CODE XREF: _ocsp_main+1DDBj
		xor	esi, esi
		jmp	loc_44A31C
; ---------------------------------------------------------------------------

loc_44A71B:				; CODE XREF: _ocsp_main+1DCCj
		mov	edi, 1
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A729:				; CODE XREF: _ocsp_main+19D7j
		mov	[esp+18Ch+var_188], offset aErrorOpening_5 ; "Error Opening OCSP response file\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edi, 1
		xor	esi, esi
		mov	[esp+18Ch+var_164], 0
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A752:				; CODE XREF: _ocsp_main+1E52j
		inc	eax
		jz	loc_44A7EE
		mov	[esp+18Ch+var_188], offset aNonceVerifyErr ; "Nonce Verify error\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edi, 1
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A778:				; CODE XREF: _ocsp_main+1E79j
		mov	[esp+18Ch+var_180], 0
		mov	eax, [esp+18Ch+var_164]
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], 0
		mov	[esp+18Ch+var_18C], ebx
		call	_OCSP_basic_verify
		jmp	loc_44A37F
; ---------------------------------------------------------------------------

loc_44A79D:				; CODE XREF: _ocsp_main+1CFEj
		mov	[esp+18Ch+var_140], 0
		mov	eax, [esp+18Ch+var_140]
		jmp	loc_44A282
; ---------------------------------------------------------------------------

loc_44A7AE:				; CODE XREF: _ocsp_main+218Cj
		mov	edi, offset aNo_cert_veri_0 ; "-no_cert_verify"
		mov	ecx, 10h
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A808
		or	[esp+18Ch+var_D4], 10h
		mov	esi, ebx
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A7CF:				; CODE XREF: _ocsp_main+1E28j
		mov	[esp+18Ch+var_188], offset aErrorParsingRe ; "Error parsing response\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edi, 1
		jmp	loc_44860F
; ---------------------------------------------------------------------------

loc_44A7EE:				; CODE XREF: _ocsp_main+2253j
		mov	[esp+18Ch+var_188], offset aWarningNoNonce ; "WARNING: no nonce	in response\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		jmp	loc_44A358
; ---------------------------------------------------------------------------

loc_44A808:				; CODE XREF: _ocsp_main+22BCj
		mov	edi, offset aNo_chain ;	"-no_chain"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A829
		or	[esp+18Ch+var_D4], 8
		mov	esi, ebx
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A829:				; CODE XREF: _ocsp_main+2316j
		mov	edi, offset aNo_cert_chec_0 ; "-no_cert_checks"
		mov	ecx, 10h
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A84D
		or	[esp+18Ch+var_D4], 100h
		mov	esi, ebx
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A84D:				; CODE XREF: _ocsp_main+2337j
		mov	edi, offset aNo_explicit ; "-no_explicit"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A86E
		or	[esp+18Ch+var_D4], 20h
		mov	esi, ebx
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A86E:				; CODE XREF: _ocsp_main+235Bj
		mov	edi, offset aTrust_other ; "-trust_other"
		mov	ecx, 0Dh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A892
		or	[esp+18Ch+var_D4], 200h
		mov	esi, ebx
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A892:				; CODE XREF: _ocsp_main+237Cj
		mov	edi, offset aNo_intern ; "-no_intern"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A8B3
		or	[esp+18Ch+var_D4], 2
		mov	esi, ebx
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A8B3:				; CODE XREF: _ocsp_main+23A0j
		mov	edi, offset aText_16 ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	short loc_44A910
		mov	edi, offset aReq_text ;	"-req_text"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_44A96F
		mov	edi, offset aResp_text ; "-resp_text"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jz	short loc_44A95B
		mov	edi, offset aReqin ; "-reqin"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A92F
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_154], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A910:				; CODE XREF: _ocsp_main+23C1j
		mov	esi, ebx
		xor	edx, edx
		mov	[esp+18Ch+var_E4], 1
		mov	[esp+18Ch+var_F4], 1
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A92F:				; CODE XREF: _ocsp_main+23F5j
		mov	edi, offset aRespin ; "-respin"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A983
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_D0], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A95B:				; CODE XREF: _ocsp_main+23E5j
		mov	esi, ebx
		xor	edx, edx
		mov	[esp+18Ch+var_E4], 1
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A96F:				; CODE XREF: _ocsp_main+23D1j
		mov	esi, ebx
		xor	edx, edx
		mov	[esp+18Ch+var_F4], 1
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A983:				; CODE XREF: _ocsp_main+243Dj
		mov	edi, offset aSigner_1 ;	"-signer"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A9AC
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_110], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A9AC:				; CODE XREF: _ocsp_main+2491j
		mov	edi, offset aVafile ; "-VAfile"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44A9E3
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		or	[esp+18Ch+var_D4], 200h
		mov	[esp+18Ch+var_CC], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44A9E3:				; CODE XREF: _ocsp_main+24BAj
		mov	edi, offset aSign_other	; "-sign_other"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AA0F
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_EC], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AA0F:				; CODE XREF: _ocsp_main+24F1j
		mov	edi, offset aVerify_other ; "-verify_other"
		mov	ecx, 0Eh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AA3B
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_CC], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AA3B:				; CODE XREF: _ocsp_main+251Dj
		mov	edi, offset aCafile_7 ;	"-CAfile"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AA67
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_BC], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AA67:				; CODE XREF: _ocsp_main+2549j
		mov	edi, offset aCapath_7 ;	"-CApath"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AA93
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_B8], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AA93:				; CODE XREF: _ocsp_main+2575j
		mov	edi, offset aValidity_per_0 ; "-validity_period"
		mov	ecx, 11h
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AAEE
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_18C], eax	; char *
		call	_atol
		mov	[esp+18Ch+var_C4], eax
		test	eax, eax
		jns	loc_448976
		mov	eax, [ebx+4]
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aIllegalValidit ; "Illegal validity period %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edx, 1
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AAEE:				; CODE XREF: _ocsp_main+25A1j
		mov	edi, offset aStatus_age	; "-status_age"
		mov	ecx, 0Ch
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AB49
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_18C], eax	; char *
		call	_atol
		mov	[esp+18Ch+var_C0], eax
		test	eax, eax
		jns	loc_448976
		mov	eax, [ebx+4]
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aIllegalValid_0 ; "Illegal validity age %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edx, 1
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AB49:				; CODE XREF: _ocsp_main+25FCj
		mov	edi, offset aSignkey_0 ; "-signkey"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AB75
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_10C], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AB75:				; CODE XREF: _ocsp_main+2657j
		mov	edi, offset aReqout ; "-reqout"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44ABA1
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_100], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44ABA1:				; CODE XREF: _ocsp_main+2683j
		mov	edi, offset aRespout ; "-respout"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44ABCD
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_F0], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44ABCD:				; CODE XREF: _ocsp_main+26AFj
		mov	edi, offset aPath ; "-path"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44ABF9
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_98], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44ABF9:				; CODE XREF: _ocsp_main+26DBj
		mov	edi, offset aIssuer_5 ;	"-issuer"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AC6A
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	eax, [esp+18Ch+var_120]
		mov	[esp+18Ch+var_18C], eax
		call	_X509_free
		mov	eax, [ebx+4]
		mov	[esp+18Ch+var_178], offset aIssuerCertific ; "issuer certificate"
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 3
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_load_cert
		mov	[esp+18Ch+var_120], eax
		test	eax, eax
		jz	loc_449C2A
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AC6A:				; CODE XREF: _ocsp_main+2707j
		mov	edi, offset aCert_4 ; "-cert"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	loc_44AD7C
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	eax, [esp+18Ch+var_118]
		mov	[esp+18Ch+var_18C], eax
		call	_X509_free
		mov	eax, [ebx+4]
		mov	[esp+18Ch+var_178], offset aCertificate_5 ; "certificate"
		mov	[esp+18Ch+var_17C], 0
		mov	[esp+18Ch+var_180], 0
		mov	[esp+18Ch+var_184], 3
		mov	[esp+18Ch+var_188], eax
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_load_cert
		mov	[esp+18Ch+var_118], eax
		test	eax, eax
		jz	loc_449C2A
		mov	eax, [esp+18Ch+var_144]
		test	eax, eax
		jnz	short loc_44ACE9
		call	_EVP_sha1
		mov	[esp+18Ch+var_144], eax

loc_44ACE9:				; CODE XREF: _ocsp_main+27DEj
		mov	eax, [esp+18Ch+var_120]
		test	eax, eax
		jz	short loc_44AD62
		mov	edi, [esp+18Ch+var_8C]
		test	edi, edi
		jz	short loc_44AD50

loc_44ACFC:				; CODE XREF: _ocsp_main+285Ej
		mov	eax, [esp+18Ch+var_120]
		mov	[esp+18Ch+var_184], eax
		mov	eax, [esp+18Ch+var_118]
		mov	[esp+18Ch+var_188], eax
		mov	eax, [esp+18Ch+var_144]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_cert_to_id
		mov	edi, eax
		test	eax, eax
		jz	short loc_44AD36

loc_44AD1E:				; CODE XREF: _ocsp_main+2935j
		mov	[esp+18Ch+var_188], edi
		mov	eax, [esp+18Ch+var_11C]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_push
		test	eax, eax
		jnz	loc_44AE6C

loc_44AD36:				; CODE XREF: _ocsp_main+281Cj
					; _ocsp_main+2860j ...
		mov	[esp+18Ch+var_188], offset aErrorCreatin_2 ; "Error Creating OCSP request\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		jmp	loc_449C2A
; ---------------------------------------------------------------------------

loc_44AD50:				; CODE XREF: _ocsp_main+27FAj
		call	_OCSP_REQUEST_new
		mov	[esp+18Ch+var_8C], eax
		test	eax, eax
		jnz	short loc_44ACFC
		jmp	short loc_44AD36
; ---------------------------------------------------------------------------

loc_44AD62:				; CODE XREF: _ocsp_main+27EFj
					; _ocsp_main+28B8j
		mov	[esp+18Ch+var_188], offset aNoIssuerCertif ; "No issuer	certificate specified\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		jmp	loc_449C2A
; ---------------------------------------------------------------------------

loc_44AD7C:				; CODE XREF: _ocsp_main+2778j
		mov	edi, offset aSerial_2 ;	"-serial"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	loc_44AE40
		mov	edi, [ebx+4]
		test	edi, edi
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	ecx, [esp+18Ch+var_144]
		test	ecx, ecx
		jnz	short loc_44ADB2
		call	_EVP_sha1
		mov	[esp+18Ch+var_144], eax
		mov	edi, [ebx+4]

loc_44ADB2:				; CODE XREF: _ocsp_main+28A4j
		mov	edx, [esp+18Ch+var_120]
		test	edx, edx
		jz	short loc_44AD62
		mov	eax, [esp+18Ch+var_8C]
		test	eax, eax
		jz	loc_44AEF0

loc_44ADC9:				; CODE XREF: _ocsp_main+29FEj
		mov	eax, [esp+18Ch+var_120]
		mov	[esp+18Ch+var_18C], eax
		call	_X509_get_subject_name
		mov	[esp+18Ch+var_140], eax
		mov	eax, [esp+18Ch+var_120]
		mov	[esp+18Ch+var_18C], eax
		call	_X509_get0_pubkey_bitstr
		mov	[esp+18Ch+var_13C], eax
		mov	[esp+18Ch+var_188], edi
		mov	[esp+18Ch+var_18C], 0
		call	_s2i_ASN1_INTEGER
		test	eax, eax
		mov	ecx, [esp+18Ch+var_13C]
		jz	loc_44AED2
		mov	[esp+18Ch+var_180], eax
		mov	[esp+18Ch+var_13C], eax
		mov	[esp+18Ch+var_184], ecx
		mov	eax, [esp+18Ch+var_140]
		mov	[esp+18Ch+var_188], eax
		mov	eax, [esp+18Ch+var_144]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_cert_id_new
		mov	edi, eax
		mov	edx, [esp+18Ch+var_13C]
		mov	[esp+18Ch+var_18C], edx
		call	_ASN1_INTEGER_free
		test	edi, edi
		jnz	loc_44AD1E
		jmp	loc_44AD36
; ---------------------------------------------------------------------------

loc_44AE40:				; CODE XREF: _ocsp_main+288Aj
		mov	edi, offset aIndex ; "-index"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AEA9
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_FC], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AE6C:				; CODE XREF: _ocsp_main+2830j
		mov	[esp+18Ch+var_188], edi
		mov	eax, [esp+18Ch+var_8C]
		mov	[esp+18Ch+var_18C], eax
		call	_OCSP_request_add0_id
		test	eax, eax
		jz	loc_44AD36
		mov	eax, [ebx+4]
		mov	[esp+18Ch+var_188], eax
		mov	eax, [esp+18Ch+var_114]
		mov	[esp+18Ch+var_18C], eax
		call	_sk_push
		test	eax, eax
		jz	loc_449C2A
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AEA9:				; CODE XREF: _ocsp_main+294Ej
		mov	edi, offset aCa_1 ; "-CA"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AF09
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_15C], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AED2:				; CODE XREF: _ocsp_main+28FFj
		mov	[esp+18Ch+var_184], edi
		mov	[esp+18Ch+var_188], offset aErrorConvert_2 ; "Error converting serial number %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		jmp	loc_449C2A
; ---------------------------------------------------------------------------

loc_44AEF0:				; CODE XREF: _ocsp_main+28C3j
		call	_OCSP_REQUEST_new
		mov	[esp+18Ch+var_8C], eax
		test	eax, eax
		jnz	loc_44ADC9
		jmp	loc_44AD36
; ---------------------------------------------------------------------------

loc_44AF09:				; CODE XREF: _ocsp_main+29B7j
		mov	edi, offset aNmin ; "-nmin"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AF57
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_44AFD8
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_18C], eax	; char *
		call	_atol
		mov	[esp+18Ch+var_158], eax
		test	eax, eax
		js	short loc_44AFB2
		xor	edx, edx

loc_44AF39:				; CODE XREF: _ocsp_main+2AD3j
					; _ocsp_main+2ADCj
		cmp	[esp+18Ch+var_E0], 0FFFFFFFFh
		jnz	loc_448A82
		mov	[esp+18Ch+var_E0], 0
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AF57:				; CODE XREF: _ocsp_main+2A17j
		mov	edi, offset aNrequest ;	"-nrequest"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44AFE1
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_18C], eax	; char *
		call	_atol
		mov	[esp+18Ch+var_108], eax
		test	eax, eax
		jns	loc_448976
		mov	eax, [ebx+4]
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aIllegalAcceptC ; "Illegal accept count %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edx, 1
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44AFB2:				; CODE XREF: _ocsp_main+2A35j
		mov	eax, [ebx+4]
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aIllegalUpdateP ; "Illegal update period %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edx, 1
		jmp	loc_44AF39
; ---------------------------------------------------------------------------

loc_44AFD8:				; CODE XREF: _ocsp_main+2A1Ej
		mov	esi, ebx
		xor	edx, edx
		jmp	loc_44AF39
; ---------------------------------------------------------------------------

loc_44AFE1:				; CODE XREF: _ocsp_main+2A65j
		mov	edi, offset aNdays ; "-ndays"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44B03C
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_18C], eax	; char *
		call	_atol
		mov	[esp+18Ch+var_E0], eax
		test	eax, eax
		jns	loc_448976
		mov	eax, [ebx+4]
		mov	[esp+18Ch+var_184], eax
		mov	[esp+18Ch+var_188], offset aIllegalUpdateP ; "Illegal update period %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+18Ch+var_18C], eax
		call	_BIO_printf
		mov	edx, 1
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44B03C:				; CODE XREF: _ocsp_main+2AEFj
		mov	edi, offset aRsigner ; "-rsigner"
		mov	ecx, 9
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44B065
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_168], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44B065:				; CODE XREF: _ocsp_main+2B4Aj
		mov	edi, offset aRkey ; "-rkey"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44B08E
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_164], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44B08E:				; CODE XREF: _ocsp_main+2B73j
		mov	edi, offset aRother ; "-rother"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44B0B7
		mov	eax, [ebx+4]
		test	eax, eax
		jz	loc_448A80
		lea	esi, [ebx+4]
		mov	[esp+18Ch+var_160], eax
		xor	edx, edx
		jmp	loc_448912
; ---------------------------------------------------------------------------

loc_44B0B7:				; CODE XREF: _ocsp_main+2B9Cj
		inc	eax
		mov	[esp+18Ch+var_18C], eax
		call	_EVP_get_digestbyname
		mov	[esp+18Ch+var_144], eax
		xor	edx, edx
		test	eax, eax
		setz	dl
		mov	esi, ebx
		jmp	loc_448912
_ocsp_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _prime_main
_prime_main	proc near		; DATA XREF: .data:0045522Co

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ebx, [esp+5Ch+arg_4]
		mov	[esp+5Ch+var_20], 0
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_44B467

loc_44B100:				; CODE XREF: _prime_main+39Bj
					; _prime_main+3C6j
		mov	eax, [esp+5Ch+arg_0]
		lea	ebp, [eax-1]
		lea	edx, [ebx+4]
		test	ebp, ebp
		jle	loc_44B3C9
		mov	eax, [ebx+4]
		cmp	byte ptr [eax],	2Dh
		jnz	loc_44B4AB
		mov	[esp+5Ch+var_30], 0
		mov	[esp+5Ch+var_38], 0
		mov	[esp+5Ch+var_3C], 0
		mov	[esp+5Ch+var_34], 14h
		mov	[esp+5Ch+var_40], 0
		jmp	short loc_44B1A5
; ---------------------------------------------------------------------------
		align 10h

loc_44B150:				; CODE XREF: _prime_main+D3j
		mov	edi, offset aGenerate ;	"-generate"
		mov	esi, eax
		mov	ecx, 0Ah
		repe cmpsb
		jz	loc_44B2C0
		mov	edi, offset aBits ; "-bits"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	loc_44B2D0
		dec	ebp
		jz	loc_44B3E9
		lea	ebx, [edx+4]
		mov	eax, [edx+4]
		mov	[esp+5Ch+var_5C], eax ;	char *
		call	_atoi
		mov	[esp+5Ch+var_38], eax
		mov	edx, ebx

loc_44B193:				; CODE XREF: _prime_main+1E8j
					; _prime_main+22Fj ...
		dec	ebp
		lea	ebx, [edx+4]
		test	ebp, ebp
		jle	short loc_44B1C5

loc_44B19B:				; CODE XREF: _prime_main+E3j
		mov	eax, [edx+4]
		cmp	byte ptr [eax],	2Dh
		jnz	short loc_44B1E0
		mov	edx, ebx

loc_44B1A5:				; CODE XREF: _prime_main+66j
		mov	esi, eax
		mov	edi, offset aHex_1 ; "-hex"
		mov	ecx, 5
		repe cmpsb
		jnz	short loc_44B150
		mov	[esp+5Ch+var_40], 1
		dec	ebp
		lea	ebx, [edx+4]
		test	ebp, ebp
		jg	short loc_44B19B

loc_44B1C5:				; CODE XREF: _prime_main+B9j
		mov	eax, [edx+4]
		test	eax, eax
		jnz	short loc_44B1E0
		mov	ebp, [esp+5Ch+var_3C]
		test	ebp, ebp
		jz	loc_44B3D4
		mov	[esp+5Ch+var_3C], 1

loc_44B1E0:				; CODE XREF: _prime_main+C1j
					; _prime_main+EAj ...
		call	_BIO_s_file
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_44B217
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp+5Ch+var_50], eax
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 6Ah
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_ctrl

loc_44B217:				; CODE XREF: _prime_main+111j
		mov	edi, [esp+5Ch+var_3C]
		test	edi, edi
		jnz	loc_44B330
		mov	eax, [ebx]
		mov	edx, [esp+5Ch+var_40]
		test	edx, edx
		mov	[esp+5Ch+var_58], eax
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_5C], eax
		jz	loc_44B3B6
		call	_BN_hex2bn

loc_44B241:				; CODE XREF: _prime_main+2DBj
		mov	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], esi
		call	_BN_print
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_58], eax
		mov	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_5C], eax
		call	_BN_is_prime_ex
		test	eax, eax
		jz	loc_44B3AC
		mov	eax, offset byte_470260

loc_44B282:				; CODE XREF: _prime_main+2D1j
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aIsSprime ; " is %sprime\n"
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_printf

loc_44B296:				; CODE XREF: _prime_main+2C7j
		mov	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_5C], eax
		call	_BN_free
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_free_all
		xor	eax, eax
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_44B2C0:				; CODE XREF: _prime_main+7Ej
		mov	[esp+5Ch+var_3C], 1
		jmp	loc_44B193
; ---------------------------------------------------------------------------
		align 10h

loc_44B2D0:				; CODE XREF: _prime_main+92j
		mov	edi, offset aSafe ; "-safe"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	short loc_44B320
		mov	edi, offset aChecks ; "-checks"
		mov	ecx, 8
		mov	esi, eax
		repe cmpsb
		jnz	loc_44B4DA
		dec	ebp
		jz	loc_44B3E9
		lea	ebx, [edx+4]
		mov	eax, [edx+4]
		mov	[esp+5Ch+var_5C], eax ;	char *
		call	_atoi
		mov	[esp+5Ch+var_34], eax
		mov	edx, ebx
		jmp	loc_44B193
; ---------------------------------------------------------------------------
		align 10h

loc_44B320:				; CODE XREF: _prime_main+1FEj
		mov	[esp+5Ch+var_30], 1
		jmp	loc_44B193
; ---------------------------------------------------------------------------
		align 10h

loc_44B330:				; CODE XREF: _prime_main+13Dj
		mov	ebx, [esp+5Ch+var_38]
		test	ebx, ebx
		jz	loc_44B445
		call	_BN_new
		mov	[esp+5Ch+var_20], eax
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	edx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_54], edx
		mov	edx, [esp+5Ch+var_38]
		mov	[esp+5Ch+var_58], edx
		mov	[esp+5Ch+var_5C], eax
		call	_BN_generate_prime_ex
		mov	eax, [esp+5Ch+var_20]
		mov	ecx, [esp+5Ch+var_40]
		test	ecx, ecx
		mov	[esp+5Ch+var_5C], eax
		jnz	short loc_44B3C0
		call	_BN_bn2dec
		mov	ebx, eax

loc_44B38B:				; CODE XREF: _prime_main+2E7j
		mov	[esp+5Ch+var_54], ebx
		mov	[esp+5Ch+var_58], offset aS_24 ; "%s\n"
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_printf
		mov	[esp+5Ch+var_5C], ebx
		call	_CRYPTO_free
		jmp	loc_44B296
; ---------------------------------------------------------------------------

loc_44B3AC:				; CODE XREF: _prime_main+197j
		mov	eax, offset aNot_1 ; "not "
		jmp	loc_44B282
; ---------------------------------------------------------------------------

loc_44B3B6:				; CODE XREF: _prime_main+156j
		call	_BN_dec2bn
		jmp	loc_44B241
; ---------------------------------------------------------------------------

loc_44B3C0:				; CODE XREF: _prime_main+2A2j
		call	_BN_bn2hex
		mov	ebx, eax
		jmp	short loc_44B38B
; ---------------------------------------------------------------------------

loc_44B3C9:				; CODE XREF: _prime_main+2Cj
		mov	eax, [ebx+4]
		test	eax, eax
		jnz	loc_44B4AB

loc_44B3D4:				; CODE XREF: _prime_main+F2j
		mov	[esp+5Ch+var_58], offset aNoPrimeSpecifi ; "No prime specified\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf

loc_44B3E9:				; CODE XREF: _prime_main+99j
					; _prime_main+215j ...
		mov	[esp+5Ch+var_58], offset aOptionsAre_1 ; "options are\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_54], offset aHex_1	; "-hex"
		mov	[esp+5Ch+var_58], offset a14sHex ; "%-14s hex\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_54], offset aChecksN ; "-checks <n>"
		mov	[esp+5Ch+var_58], offset a14sNumberOfChe ; "%-14s number of checks\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_44B445:				; CODE XREF: _prime_main+256j
		mov	[esp+5Ch+var_58], offset aSpecifiyTheNum ; "Specifiy the number	of bits.\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	eax, 1
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_44B467:				; CODE XREF: _prime_main+1Aj
		call	_BIO_s_file
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_44B100
		mov	edx, ds:__imp___iob
		add	edx, 40h
		mov	[esp+5Ch+var_50], edx
		mov	[esp+5Ch+var_54], 10h
		mov	[esp+5Ch+var_58], 6Ah
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_ctrl
		jmp	loc_44B100
; ---------------------------------------------------------------------------

loc_44B4AB:				; CODE XREF: _prime_main+38j
					; _prime_main+2EEj
		mov	ebx, edx
		mov	[esp+5Ch+var_30], 0
		mov	[esp+5Ch+var_38], 0
		mov	[esp+5Ch+var_3C], 0
		mov	[esp+5Ch+var_34], 14h
		mov	[esp+5Ch+var_40], 0
		jmp	loc_44B1E0
; ---------------------------------------------------------------------------

loc_44B4DA:				; CODE XREF: _prime_main+20Ej
		mov	[esp+5Ch+var_54], eax
		mov	[esp+5Ch+var_58], offset aUnknownOpti_18 ; "Unknown option '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		jmp	loc_44B3E9
_prime_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_verify_cb	proc near		; DATA XREF: _ts_main+27Do

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
_verify_cb	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_create_digest	proc near		; CODE XREF: _ts_main+12CBp

var_104C	= dword	ptr -104Ch
var_1048	= dword	ptr -1048h
var_1044	= dword	ptr -1044h
var_1034	= byte ptr -1034h
var_101C	= dword	ptr -101Ch
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		push	eax
		mov	eax, 1038h
		call	___chkstk_ms
		sub	esp, eax
		mov	eax, [esp+104Ch+var_14]
		mov	esi, eax
		mov	edi, edx
		mov	ebx, ecx
		mov	[esp+104Ch+var_104C], ecx
		call	_EVP_MD_size
		mov	ebp, eax
		test	eax, eax
		js	loc_44B5F0
		test	esi, esi
		jz	loc_44B600
		mov	[esp+104Ch+var_1044], 24Ah
		mov	[esp+104Ch+var_1048], offset aTs_c ; "ts.c"
		mov	[esp+104Ch+var_104C], eax
		call	_CRYPTO_malloc
		mov	edx, [esp+104Ch+arg_0]
		mov	[edx], eax
		test	eax, eax
		jz	loc_44B5F0
		mov	[esp+104Ch+var_1048], ebx
		lea	edi, [esp+104Ch+var_1034]
		mov	[esp+104Ch+var_104C], edi
		call	_EVP_DigestInit
		lea	ebx, [esp+104Ch+var_101C]
		jmp	short loc_44B5A0
; ---------------------------------------------------------------------------
		align 10h

loc_44B590:				; CODE XREF: _create_digest+A6j
		mov	[esp+104Ch+var_1044], eax
		mov	[esp+104Ch+var_1048], ebx
		mov	[esp+104Ch+var_104C], edi
		call	_EVP_DigestUpdate

loc_44B5A0:				; CODE XREF: _create_digest+75j
		mov	[esp+104Ch+var_1044], 1000h
		mov	[esp+104Ch+var_1048], ebx
		mov	[esp+104Ch+var_104C], esi
		call	_BIO_read
		test	eax, eax
		jg	short loc_44B590
		mov	eax, [esp+104Ch+arg_0]
		mov	eax, [eax]
		mov	[esp+104Ch+var_1044], 0
		mov	[esp+104Ch+var_1048], eax
		mov	[esp+104Ch+var_104C], edi
		call	_EVP_DigestFinal
		mov	eax, ebp

loc_44B5D7:				; CODE XREF: _create_digest+143j
					; _create_digest+147j
		add	esp, 103Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_44B5F0:				; CODE XREF: _create_digest+2Aj
					; _create_digest+5Bj
		xor	eax, eax
		add	esp, 103Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_44B600:				; CODE XREF: _create_digest+32j
		lea	eax, [esp+104Ch+var_101C]
		mov	[esp+104Ch+var_1048], eax
		mov	[esp+104Ch+var_104C], edi
		call	_string_to_hex
		mov	ecx, [esp+104Ch+arg_0]
		mov	[ecx], eax
		test	eax, eax
		jz	short loc_44B623
		cmp	ebp, [esp+104Ch+var_101C]
		jz	short loc_44B655

loc_44B623:				; CODE XREF: _create_digest+10Bj
		mov	[esp+104Ch+var_104C], eax
		call	_CRYPTO_free
		mov	eax, [esp+104Ch+arg_0]
		mov	dword ptr [eax], 0
		mov	[esp+104Ch+var_1044], ebp
		mov	[esp+104Ch+var_1048], offset aBadDigestDByte ; "bad digest, %d bytes must be specified\"...
		mov	eax, ds:_bio_err
		mov	[esp+104Ch+var_104C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	short loc_44B5D7
; ---------------------------------------------------------------------------

loc_44B655:				; CODE XREF: _create_digest+111j
		mov	eax, ebp
		jmp	loc_44B5D7
_create_digest	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_load_config_file proc near		; CODE XREF: _ts_main+61Bp
					; _ts_main+925p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h

		push	esi
		push	ebx
		sub	esp, 24h
		mov	esi, eax
		mov	[esp+2Ch+var_10], 0FFFFFFFFh
		test	eax, eax
		jz	loc_44B7D0

loc_44B677:				; CODE XREF: _load_config_file+180j
					; _load_config_file+196j
		mov	[esp+2Ch+var_2C], 0
		call	_NCONF_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_44B750
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], esi
		mov	[esp+2Ch+var_2C], ebx
		call	_NCONF_load
		test	eax, eax
		jle	loc_44B750

loc_44B6A9:				; CODE XREF: _load_config_file+117j
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aUsingConfigu_1 ; "Using configuration	from %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		mov	[esp+2Ch+var_24], offset aOid_file_1 ; "oid_file"
		mov	[esp+2Ch+var_28], 0
		mov	[esp+2Ch+var_2C], ebx
		call	_NCONF_get_string
		test	eax, eax
		jz	loc_44B7A0
		mov	[esp+2Ch+var_28], offset aR_5 ;	"r"
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_new_file
		mov	esi, eax
		test	eax, eax
		jz	loc_44B7B0
		mov	[esp+2Ch+var_2C], eax
		call	_OBJ_create_objects
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_free_all

loc_44B70C:				; CODE XREF: _load_config_file+145j
					; _load_config_file+15Dj
		mov	[esp+2Ch+var_28], ebx
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_add_oid_section
		test	eax, eax
		jz	short loc_44B730

loc_44B721:				; CODE XREF: _load_config_file+11Dj
					; _load_config_file+19Ej
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_44B730:				; CODE XREF: _load_config_file+BFj
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors
		mov	eax, ebx
		add	esp, 24h
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_44B750:				; CODE XREF: _load_config_file+27j
					; _load_config_file+43j
		mov	eax, [esp+2Ch+var_10]
		test	eax, eax
		jle	short loc_44B780
		mov	[esp+2Ch+var_20], esi
		mov	[esp+2Ch+var_24], eax
		mov	[esp+2Ch+var_28], offset aErrorOnLineL_6 ; "error on line %ld of config	file '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf

loc_44B775:				; CODE XREF: _load_config_file+139j
		test	ebx, ebx
		jnz	loc_44B6A9
		jmp	short loc_44B721
; ---------------------------------------------------------------------------
		align 10h

loc_44B780:				; CODE XREF: _load_config_file+F6j
		mov	[esp+2Ch+var_24], esi
		mov	[esp+2Ch+var_28], offset aErrorLoading_7 ; "error loading the config file '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_BIO_printf
		jmp	short loc_44B775
; ---------------------------------------------------------------------------
		align 10h

loc_44B7A0:				; CODE XREF: _load_config_file+7Cj
		call	_ERR_clear_error
		jmp	loc_44B70C
; ---------------------------------------------------------------------------
		align 10h

loc_44B7B0:				; CODE XREF: _load_config_file+96j
		mov	eax, ds:_bio_err
		mov	[esp+2Ch+var_2C], eax
		call	_ERR_print_errors
		jmp	loc_44B70C
; ---------------------------------------------------------------------------
		align 10h

loc_44B7D0:				; CODE XREF: _load_config_file+11j
		mov	[esp+2Ch+var_2C], offset aOpenssl_conf_0 ; "OPENSSL_CONF"
		call	_getenv
		mov	esi, eax
		test	eax, eax
		jnz	loc_44B677
		mov	[esp+2Ch+var_2C], offset aSsleay_conf_0	; "SSLEAY_CONF"
		call	_getenv
		mov	esi, eax
		test	eax, eax
		jnz	loc_44B677
		xor	ebx, ebx
		jmp	loc_44B721
_load_config_file endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_next_serial	proc near		; CODE XREF: _serial_cb+Cp

var_41C		= dword	ptr -41Ch
var_418		= dword	ptr -418h
var_414		= dword	ptr -414h
var_410		= dword	ptr -410h
var_40C		= byte ptr -40Ch

		push	edi
		push	esi
		push	ebx
		sub	esp, 410h
		mov	edi, eax
		call	_ASN1_INTEGER_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_44B8F0
		mov	[esp+41Ch+var_418], offset aR_5	; "r"
		mov	[esp+41Ch+var_41C], edi
		call	_BIO_new_file
		mov	esi, eax
		test	eax, eax
		jz	loc_44B920
		mov	[esp+41Ch+var_410], 400h
		lea	eax, [esp+41Ch+var_40C]
		mov	[esp+41Ch+var_414], eax
		mov	[esp+41Ch+var_418], ebx
		mov	[esp+41Ch+var_41C], esi
		call	_a2i_ASN1_INTEGER
		test	eax, eax
		jnz	short loc_44B8B0
		mov	[esp+41Ch+var_414], edi
		mov	[esp+41Ch+var_418], offset aUnableToLoad_5 ; "unable to	load number from %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+41Ch+var_41C], eax
		call	_BIO_printf
		xor	edi, edi

loc_44B87F:				; CODE XREF: _next_serial+B4j
					; _next_serial+D4j ...
		mov	[esp+41Ch+var_41C], ebx
		call	_ASN1_INTEGER_free
		xor	ebx, ebx

loc_44B889:				; CODE XREF: _next_serial+104j
					; _next_serial+148j
		mov	[esp+41Ch+var_41C], esi
		call	_BIO_free_all
		mov	[esp+41Ch+var_41C], edi
		call	_BN_free
		mov	eax, ebx
		add	esp, 410h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_44B8B0:				; CODE XREF: _next_serial+52j
		mov	[esp+41Ch+var_418], 0
		mov	[esp+41Ch+var_41C], ebx
		call	_ASN1_INTEGER_to_BN
		mov	edi, eax
		test	eax, eax
		jz	short loc_44B87F
		mov	[esp+41Ch+var_41C], ebx
		call	_ASN1_INTEGER_free
		mov	[esp+41Ch+var_418], 1
		mov	[esp+41Ch+var_41C], edi
		call	_BN_add_word
		test	eax, eax
		jnz	short loc_44B900
		xor	ebx, ebx
		jmp	short loc_44B87F
; ---------------------------------------------------------------------------
		align 10h

loc_44B8F0:				; CODE XREF: _next_serial+14j
		xor	edi, edi
		xor	esi, esi
		jmp	short loc_44B87F
; ---------------------------------------------------------------------------
		align 10h

loc_44B900:				; CODE XREF: _next_serial+D0j
		mov	[esp+41Ch+var_418], 0
		mov	[esp+41Ch+var_41C], edi
		call	_BN_to_ASN1_INTEGER
		mov	ebx, eax
		test	eax, eax
		jnz	loc_44B889
		jmp	loc_44B87F
; ---------------------------------------------------------------------------
		align 10h

loc_44B920:				; CODE XREF: _next_serial+2Ej
		call	_ERR_clear_error
		mov	[esp+41Ch+var_414], edi
		mov	[esp+41Ch+var_418], offset aWarningCouldNo ; "Warning: could not open file %s for rea"...
		mov	eax, ds:_bio_err
		mov	[esp+41Ch+var_41C], eax
		call	_BIO_printf
		mov	[esp+41Ch+var_418], 1
		mov	[esp+41Ch+var_41C], ebx
		call	_ASN1_INTEGER_set
		xor	edi, edi
		test	eax, eax
		jz	loc_44B87F
		jmp	loc_44B889
_next_serial	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_serial_cb	proc near		; DATA XREF: _ts_main+8BAo

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	edi, [esp+1Ch+arg_4]
		mov	eax, edi
		call	_next_serial
		mov	ebx, eax
		test	eax, eax
		jz	short loc_44B9F0
		mov	[esp+1Ch+var_18], offset aW_7 ;	"w"
		mov	[esp+1Ch+var_1C], edi
		call	_BIO_new_file
		mov	esi, eax
		test	eax, eax
		jz	short loc_44B9C0
		mov	[esp+1Ch+var_18], ebx
		mov	[esp+1Ch+var_1C], eax
		call	_i2a_ASN1_INTEGER
		test	eax, eax
		jle	short loc_44B9C0
		mov	[esp+1Ch+var_18], offset asc_470471 ; "\n"
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_puts
		test	eax, eax
		jg	short loc_44B9D9
		jmp	short loc_44B9C0
; ---------------------------------------------------------------------------
		align 10h

loc_44B9C0:				; CODE XREF: _serial_cb+2Bj
					; _serial_cb+3Bj ...
		mov	[esp+1Ch+var_14], edi
		mov	[esp+1Ch+var_18], offset aCouldNotSaveSe ; "could not save serial number to %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf

loc_44B9D9:				; CODE XREF: _serial_cb+4Fj
		mov	[esp+1Ch+var_1C], esi
		call	_BIO_free_all
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_44B9F0:				; CODE XREF: _serial_cb+15j
		mov	[esp+1Ch+var_14], offset aErrorDuringSer ; "Error during serial	number generation."
		mov	[esp+1Ch+var_18], 2
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	_TS_RESP_CTX_set_status_info
		mov	[esp+1Ch+var_18], 11h
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	_TS_RESP_CTX_add_failure_info
		mov	eax, ebx
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
_serial_cb	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _ts_main
_ts_main	proc near		; DATA XREF: .data:00455238o

var_BC		= dword	ptr -0BCh
var_B8		= dword	ptr -0B8h
var_B4		= dword	ptr -0B4h
var_B0		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= byte ptr -2Ch
var_2B		= byte ptr -2Bh
var_2A		= byte ptr -2Ah
var_29		= byte ptr -29h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ACh
		mov	[esp+0BCh+var_38], 0
		call	_ERR_load_crypto_strings
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	loc_44C1E3

loc_44BA57:				; CODE XREF: _ts_main+820j
		mov	[esp+0BCh+var_94], 0

loc_44BA5F:				; CODE XREF: _ts_main+7FBj
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], eax
		call	_load_config
		test	eax, eax
		jz	loc_44BE10
		mov	eax, [esp+0BCh+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+0BCh+arg_4]
		lea	ebx, [eax+4]
		test	ebp, ebp
		jle	loc_44BF64
		mov	[esp+0BCh+var_58], 0
		mov	[esp+0BCh+var_68], 0
		mov	[esp+0BCh+var_40], 0
		mov	[esp+0BCh+var_44], 0
		mov	[esp+0BCh+var_60], 0
		mov	[esp+0BCh+var_64], 0
		mov	[esp+0BCh+var_48], 0
		mov	[esp+0BCh+var_4C], 0
		mov	[esp+0BCh+var_50], 0
		mov	[esp+0BCh+var_74], 0
		mov	[esp+0BCh+var_7C], 0
		mov	[esp+0BCh+var_5C], 0
		mov	[esp+0BCh+var_6C], 0
		mov	[esp+0BCh+var_84], 0
		mov	[esp+0BCh+var_54], 0
		mov	[esp+0BCh+var_78], 0
		mov	[esp+0BCh+var_80], 0
		mov	[esp+0BCh+var_88], 0
		mov	[esp+0BCh+var_70], 0
		mov	[esp+0BCh+var_8C], 0
		mov	[esp+0BCh+var_90], 0
		mov	[esp+0BCh+var_9C], 0
		mov	[esp+0BCh+var_98], 0
		mov	[esp+0BCh+var_A0], 0
		jmp	short loc_44BB73
; ---------------------------------------------------------------------------
		align 10h

loc_44BB60:				; CODE XREF: _ts_main+153j
		dec	ebp
		lea	eax, [ebx+4]
		mov	edx, [ebx+4]
		mov	[esp+0BCh+var_A0], edx

loc_44BB6B:				; CODE XREF: _ts_main+476j
					; _ts_main+49Bj ...
		dec	ebp
		lea	ebx, [eax+4]
		test	ebp, ebp
		jle	short loc_44BBAC

loc_44BB73:				; CODE XREF: _ts_main+123j
					; _ts_main+17Aj
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aConfig_1 ;	"-config"
		mov	ecx, 8
		repe cmpsb
		jz	short loc_44BB60
		mov	edi, offset aSection ; "-section"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	loc_44BE80
		dec	ebp
		lea	eax, [ebx+4]
		mov	edi, [ebx+4]
		mov	[esp+0BCh+var_98], edi
		dec	ebp
		lea	ebx, [eax+4]
		test	ebp, ebp
		jg	short loc_44BB73

loc_44BBAC:				; CODE XREF: _ts_main+141j
		cmp	[esp+0BCh+var_9C], 1
		jz	loc_44BF40
		cmp	[esp+0BCh+var_9C], 2
		jz	loc_44C00B
		mov	eax, [esp+0BCh+var_9C]
		test	eax, eax
		jz	loc_44BF64
		cmp	eax, 3
		jnz	loc_44BE10
		mov	edi, [esp+0BCh+var_7C]
		test	edi, edi
		jz	loc_44C685
		mov	esi, [esp+0BCh+var_90]
		test	esi, esi
		jnz	loc_44BF64

loc_44BBEF:				; CODE XREF: _ts_main+C5Bj
		mov	edx, [esp+0BCh+var_8C]
		test	edx, edx
		jnz	loc_44BF64

loc_44BBFB:				; CODE XREF: _ts_main+C67j
		mov	edx, [esp+0BCh+var_84]
		test	edx, edx
		jz	loc_44BF64
		mov	[esp+0BCh+var_B8], offset aRb_1	; "rb"
		mov	eax, [esp+0BCh+var_84]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	[esp+0BCh+var_98], eax
		test	eax, eax
		jz	loc_44C7F6
		mov	eax, [esp+0BCh+var_68]
		test	eax, eax
		mov	[esp+0BCh+var_B8], 0
		mov	eax, [esp+0BCh+var_98]
		mov	[esp+0BCh+var_BC], eax
		jz	loc_44C6B0
		call	_d2i_PKCS7_bio
		mov	[esp+0BCh+var_A0], eax
		test	eax, eax
		jz	loc_44C7F6
		mov	[esp+0BCh+var_9C], 0

loc_44BC5B:				; CODE XREF: _ts_main+C99j
		mov	eax, [esp+0BCh+var_90]
		test	eax, eax
		jz	loc_44C81B
		call	_TS_VERIFY_CTX_new
		mov	ebx, eax
		test	eax, eax
		jz	loc_44C869
		mov	dword ptr [ebx], 52h
		mov	[esp+0BCh+var_B8], offset aRb_1	; "rb"
		mov	eax, [esp+0BCh+var_90]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	[ebx+1Ch], eax
		test	eax, eax
		jz	loc_44C8B2

loc_44BC9B:				; CODE XREF: _ts_main+E34j
		mov	eax, [ebx]
		or	eax, 1
		xor	edi, edi
		xor	esi, esi

loc_44BCA4:				; CODE XREF: _ts_main+1250j
		mov	[ebx], eax
		call	_X509_STORE_new
		mov	ebp, eax
		mov	[esp+0BCh+var_B8], offset _verify_cb
		mov	[esp+0BCh+var_BC], eax
		call	_X509_STORE_set_verify_cb
		mov	eax, [esp+0BCh+var_64]
		test	eax, eax
		jz	short loc_44BD0E
		call	_X509_LOOKUP_hash_dir
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], ebp
		call	_X509_STORE_add_lookup
		test	eax, eax
		jz	loc_44CC85
		mov	[esp+0BCh+var_AC], 0
		mov	[esp+0BCh+var_B0], 1
		mov	edx, [esp+0BCh+var_64]
		mov	[esp+0BCh+var_B4], edx
		mov	[esp+0BCh+var_B8], 2
		mov	[esp+0BCh+var_BC], eax
		call	_X509_LOOKUP_ctrl
		test	eax, eax
		jz	loc_44C5DF

loc_44BD0E:				; CODE XREF: _ts_main+293j
		mov	eax, [esp+0BCh+var_60]
		test	eax, eax
		jz	short loc_44BD5F
		call	_X509_LOOKUP_file
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], ebp
		call	_X509_STORE_add_lookup
		test	eax, eax
		jz	loc_44CC85
		mov	[esp+0BCh+var_AC], 0
		mov	[esp+0BCh+var_B0], 1
		mov	edx, [esp+0BCh+var_60]
		mov	[esp+0BCh+var_B4], edx
		mov	[esp+0BCh+var_B8], 1
		mov	[esp+0BCh+var_BC], eax
		call	_X509_LOOKUP_ctrl
		test	eax, eax
		jz	loc_44CCC3

loc_44BD5F:				; CODE XREF: _ts_main+2E4j
		mov	[ebx+4], ebp
		test	ebp, ebp
		jz	loc_44C60B
		mov	eax, [esp+0BCh+var_44]
		test	eax, eax
		jz	short loc_44BD85
		mov	[esp+0BCh+var_BC], eax
		call	_TS_CONF_load_certs
		mov	[ebx+8], eax
		test	eax, eax
		jz	loc_44C60B

loc_44BD85:				; CODE XREF: _ts_main+340j
		mov	[esp+0BCh+var_BC], esi
		call	_BIO_free_all
		mov	[esp+0BCh+var_BC], edi
		call	_TS_REQ_free
		mov	esi, [esp+0BCh+var_68]
		test	esi, esi
		jz	loc_44C6FF
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_RESP_verify_token
		mov	esi, eax

loc_44BDB3:				; CODE XREF: _ts_main+CE1j
		mov	[esp+0BCh+var_BC], offset aVerification	; "Verification: "
		call	_printf
		test	esi, esi
		jz	loc_44C631
		mov	[esp+0BCh+var_BC], offset aOk_1	; "OK"
		call	_puts
		xor	esi, esi

loc_44BDD5:				; CODE XREF: _ts_main+C1Fj
		mov	eax, [esp+0BCh+var_98]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_free_all
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		call	_PKCS7_free
		mov	eax, [esp+0BCh+var_9C]
		mov	[esp+0BCh+var_BC], eax
		call	_TS_RESP_free
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_VERIFY_CTX_free
		xor	ebx, ebx
		jmp	short loc_44BE17
; ---------------------------------------------------------------------------
		align 10h

loc_44BE10:				; CODE XREF: _ts_main+41j
					; _ts_main+1A1j
		xor	ebx, ebx
		mov	esi, 1

loc_44BE17:				; CODE XREF: _ts_main+3D3j
					; _ts_main+58Aj ...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], 0
		call	_app_RAND_write_file
		mov	[esp+0BCh+var_BC], ebx
		call	_NCONF_free
		mov	eax, [esp+0BCh+var_38]
		mov	[esp+0BCh+var_BC], eax
		call	_CRYPTO_free
		call	_OBJ_cleanup
		mov	eax, [esp+0BCh+var_94]
		test	eax, eax
		jz	short loc_44BE67
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_free_all
		mov	ds:_bio_err, 0

loc_44BE67:				; CODE XREF: _ts_main+41Ej
		mov	eax, esi
		add	esp, 0ACh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_44BE80:				; CODE XREF: _ts_main+163j
		mov	edi, offset aQuery ; "-query"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44BEB0
		mov	esi, [esp+0BCh+var_9C]
		test	esi, esi
		jnz	loc_44BF64
		mov	eax, ebx
		mov	[esp+0BCh+var_9C], 1
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------
		align 10h

loc_44BEB0:				; CODE XREF: _ts_main+45Ej
		mov	edi, offset aData ; "-data"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44BED0
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_90], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44BED0:				; CODE XREF: _ts_main+48Ej
		mov	edi, offset aDigest ; "-digest"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_44BEF0
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_8C], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44BEF0:				; CODE XREF: _ts_main+4AEj
		mov	edi, offset aRand_14 ; "-rand"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	short loc_44BF30
		mov	edi, offset aPolicy_2 ;	"-policy"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_44BFBF
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_80], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------
		align 10h

loc_44BF30:				; CODE XREF: _ts_main+4CEj
		dec	ebp
		lea	eax, [ebx+4]
		mov	esi, [ebx+4]
		mov	[esp+0BCh+var_88], esi
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44BF40:				; CODE XREF: _ts_main+181j
		mov	eax, [esp+0BCh+var_78]
		test	eax, eax
		jz	loc_44C43F

loc_44BF4C:				; CODE XREF: _ts_main+A65j
					; _ts_main+B9Ej ...
		mov	ebp, [esp+0BCh+var_90]
		test	ebp, ebp
		jz	loc_44C49A
		mov	eax, [esp+0BCh+var_8C]
		test	eax, eax
		jz	loc_44C351

loc_44BF64:				; CODE XREF: _ts_main+5Dj
					; _ts_main+198j ...
		xor	ebx, ebx

loc_44BF66:				; CODE XREF: _ts_main+634j
					; _ts_main+84Cj ...
		mov	[esp+0BCh+var_B0], 3Bh
		mov	[esp+0BCh+var_B4], 3Bh
		mov	[esp+0BCh+var_B8], offset aUsageTsQueryRa ; "usage:\nts	-query [-rand file%cfile%c.."...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aOrTsReplyConfi ; "or\nts -reply [-config configfile]	[-se"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_B8], offset aOrTsVerifyData ; "or\nts -verify [-data file_to_hash] [-d"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	esi, 1
		jmp	loc_44BE17
; ---------------------------------------------------------------------------

loc_44BFBF:				; CODE XREF: _ts_main+4DEj
		mov	edi, offset aNo_nonce_0	; "-no_nonce"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_44C230
		mov	edi, offset aCert_5 ; "-cert"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_44C23F
		mov	edi, offset aIn_25 ; "-in"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	loc_44C58A
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_84], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44C00B:				; CODE XREF: _ts_main+18Cj
		mov	esi, [esp+0BCh+var_74]
		test	esi, esi
		jz	short loc_44C047
		mov	[esp+0BCh+var_AC], 0 ; int
		lea	eax, [esp+0BCh+var_38]
		mov	[esp+0BCh+var_B0], eax ; int
		mov	[esp+0BCh+var_B4], 0 ; char *
		mov	[esp+0BCh+var_B8], esi ; char *
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax ; int
		call	_app_passwd
		test	eax, eax
		jz	loc_44C255

loc_44C047:				; CODE XREF: _ts_main+5E1j
		mov	eax, [esp+0BCh+var_A0]
		call	_load_config_file
		mov	ebx, eax
		mov	ecx, [esp+0BCh+var_84]
		test	ecx, ecx
		jz	loc_44C276
		mov	esi, [esp+0BCh+var_7C]
		test	esi, esi
		jnz	loc_44BF66
		mov	[esp+0BCh+var_B8], offset aRb_1	; "rb"
		mov	eax, [esp+0BCh+var_84]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	[esp+0BCh+var_A0], eax
		test	eax, eax
		jz	loc_44C7C0
		mov	ecx, [esp+0BCh+var_68]
		test	ecx, ecx
		mov	[esp+0BCh+var_B8], 0
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		jz	loc_44C5D3
		call	_d2i_PKCS7_bio
		mov	edi, eax
		test	eax, eax
		jz	loc_44C750
		mov	[esp+0BCh+var_BC], eax
		call	_PKCS7_to_TS_TST_INFO
		mov	[esp+0BCh+var_9C], eax
		test	eax, eax
		jz	loc_44C812
		call	_TS_RESP_new
		mov	ebp, eax
		test	eax, eax
		jz	loc_44C8BB
		call	_TS_STATUS_INFO_new
		mov	esi, eax
		test	eax, eax
		jz	short loc_44C0FC
		mov	eax, [eax]
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], eax
		call	_ASN1_INTEGER_set
		test	eax, eax
		jnz	loc_44CB87

loc_44C0FC:				; CODE XREF: _ts_main+6B0j
					; _ts_main+D2Cj ...
		mov	[esp+0BCh+var_BC], edi
		call	_PKCS7_free
		mov	eax, [esp+0BCh+var_9C]
		mov	[esp+0BCh+var_BC], eax
		call	_TS_TST_INFO_free
		mov	[esp+0BCh+var_BC], ebp
		call	_TS_RESP_free
		xor	ebp, ebp

loc_44C11A:				; CODE XREF: _ts_main+1197j
		mov	[esp+0BCh+var_BC], esi
		call	_TS_STATUS_INFO_free

loc_44C122:				; CODE XREF: _ts_main+BAAj
		test	ebp, ebp
		jz	loc_44C6DD

loc_44C12A:				; CODE XREF: _ts_main+1117j
		mov	eax, ds:__imp___iob
		mov	edx, [esp+0BCh+var_6C]
		test	edx, edx
		jz	loc_44C874
		mov	[esp+0BCh+var_B8], offset aWb_10 ; "wb"
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	edi, eax

loc_44C151:				; CODE XREF: _ts_main+E59j
		test	edi, edi
		jz	loc_44C8A8
		mov	eax, [esp+0BCh+var_5C]
		test	eax, eax
		jz	loc_44C654
		mov	eax, [esp+0BCh+var_58]
		test	eax, eax
		jz	loc_44C716
		mov	[esp+0BCh+var_BC], ebp
		call	_TS_RESP_get_tst_info
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], edi
		call	_TS_TST_INFO_print_bio
		test	eax, eax
		setz	al
		and	eax, 0FFh
		mov	esi, eax

loc_44C191:				; CODE XREF: _ts_main+91Cj
					; _ts_main+C50j ...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_ERR_print_errors
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_free_all
		mov	[esp+0BCh+var_BC], 0
		call	_BIO_free_all
		mov	[esp+0BCh+var_BC], 0
		call	_BIO_free_all
		mov	[esp+0BCh+var_BC], 0
		call	_BIO_free_all
		mov	[esp+0BCh+var_BC], edi
		call	_BIO_free_all
		mov	[esp+0BCh+var_BC], ebp
		call	_TS_RESP_free
		jmp	loc_44BE17
; ---------------------------------------------------------------------------

loc_44C1E3:				; CODE XREF: _ts_main+21j
		call	_BIO_s_file
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	short loc_44C24E
		mov	ebx, ds:__imp___iob
		lea	edx, [ebx+40h]
		mov	[esp+0BCh+var_B0], edx
		mov	[esp+0BCh+var_B4], 10h
		mov	[esp+0BCh+var_B8], 6Ah
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_ctrl
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_94], 1
		jmp	loc_44BA5F
; ---------------------------------------------------------------------------

loc_44C230:				; CODE XREF: _ts_main+59Dj
		mov	eax, ebx
		mov	[esp+0BCh+var_78], 1
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44C23F:				; CODE XREF: _ts_main+5B1j
		mov	eax, ebx
		mov	[esp+0BCh+var_54], 1
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44C24E:				; CODE XREF: _ts_main+7C7j
		xor	eax, eax
		jmp	loc_44BA57
; ---------------------------------------------------------------------------

loc_44C255:				; CODE XREF: _ts_main+611j
		mov	[esp+0BCh+var_B8], offset aErrorGettin_22 ; "Error getting password.\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		xor	ebx, ebx
		mov	esi, 1
		jmp	loc_44BE17
; ---------------------------------------------------------------------------

loc_44C276:				; CODE XREF: _ts_main+628j
		mov	ebp, [esp+0BCh+var_7C]
		test	ebp, ebp
		jz	loc_44BF66
		test	ebx, ebx
		jz	loc_44BF66
		mov	edi, [esp+0BCh+var_68]
		test	edi, edi
		jnz	loc_44BF66
		mov	ebp, [esp+0BCh+var_38]
		mov	[esp+0BCh+var_B8], offset aRb_1	; "rb"
		mov	eax, [esp+0BCh+var_7C]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	[esp+0BCh+var_A0], eax
		test	eax, eax
		jz	loc_44C80B
		mov	eax, [esp+0BCh+var_98]
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_get_tsa_section
		mov	edi, eax
		test	eax, eax
		jz	loc_44C80B
		call	_TS_RESP_CTX_new
		mov	esi, eax
		test	eax, eax
		jz	loc_44C80B
		mov	[esp+0BCh+var_B0], eax
		mov	[esp+0BCh+var_B4], offset _serial_cb
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_serial
		test	eax, eax
		jnz	loc_44C9B4

loc_44C306:				; CODE XREF: _ts_main+DDDj
					; _ts_main+F9Aj ...
		mov	[esp+0BCh+var_BC], 0
		call	_TS_RESP_free
		mov	[esp+0BCh+var_BC], esi
		call	_TS_RESP_CTX_free
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_free_all
		mov	[esp+0BCh+var_B8], offset aResponseIsNotG ; "Response is not generated.\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	esi, 1
		xor	edi, edi
		mov	[esp+0BCh+var_A0], 0
		xor	ebp, ebp
		jmp	loc_44C191
; ---------------------------------------------------------------------------

loc_44C351:				; CODE XREF: _ts_main+52Ej
		mov	eax, [esp+0BCh+var_A0]
		call	_load_config_file
		mov	ebx, eax
		mov	eax, [esp+0BCh+var_84]
		test	eax, eax
		jz	loc_44CCA6

loc_44C368:				; CODE XREF: _ts_main+A7Bj
		mov	[esp+0BCh+var_B8], offset aRb_1	; "rb"
		mov	eax, [esp+0BCh+var_84]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	edi, eax
		test	eax, eax
		jz	loc_44C7DA
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], eax
		call	_d2i_TS_REQ_bio
		mov	[esp+0BCh+var_A0], eax
		mov	[esp+0BCh+var_98], 0

loc_44C3A2:				; CODE XREF: _ts_main+B55j
		mov	esi, [esp+0BCh+var_A0]
		test	esi, esi
		jz	loc_44C7CE
		mov	eax, ds:__imp___iob
		mov	ecx, [esp+0BCh+var_6C]
		test	ecx, ecx
		jz	loc_44C88E
		mov	[esp+0BCh+var_B8], offset aWb_10 ; "wb"
		mov	eax, [esp+0BCh+var_6C]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	ebp, eax

loc_44C3D5:				; CODE XREF: _ts_main+E73j
		test	ebp, ebp
		jz	loc_44C8C2
		mov	eax, [esp+0BCh+var_A0]
		mov	edx, [esp+0BCh+var_5C]
		test	edx, edx
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], ebp
		jz	loc_44C6E9
		call	_TS_REQ_print_bio
		test	eax, eax
		setz	al
		and	eax, 0FFh
		mov	esi, eax

loc_44C405:				; CODE XREF: _ts_main+CCAj
					; _ts_main+DA5j ...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_ERR_print_errors
		mov	[esp+0BCh+var_BC], edi
		call	_BIO_free_all
		mov	eax, [esp+0BCh+var_98]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_free_all
		mov	[esp+0BCh+var_BC], ebp
		call	_BIO_free_all
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		call	_TS_REQ_free
		jmp	loc_44BE17
; ---------------------------------------------------------------------------

loc_44C43F:				; CODE XREF: _ts_main+516j
		mov	[esp+0BCh+var_B4], 1
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], 0
		call	_app_RAND_load_file
		test	eax, eax
		jnz	loc_44C5C2
		mov	eax, [esp+0BCh+var_88]
		test	eax, eax
		jz	loc_44C8CC

loc_44C470:				; CODE XREF: _ts_main+B98j
		mov	eax, [esp+0BCh+var_88]
		mov	[esp+0BCh+var_BC], eax
		call	_app_RAND_load_files
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], offset aLdSemiRando_11 ; "%ld semi-random bytes loaded\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		jmp	loc_44BF4C
; ---------------------------------------------------------------------------

loc_44C49A:				; CODE XREF: _ts_main+522j
		mov	eax, [esp+0BCh+var_A0]
		call	_load_config_file
		mov	ebx, eax
		mov	edi, [esp+0BCh+var_84]
		test	edi, edi
		jnz	loc_44C368
		mov	eax, [esp+0BCh+var_8C]
		test	eax, eax
		jz	loc_44CB4C
		mov	[esp+0BCh+var_98], 0

loc_44C4C5:				; CODE XREF: _ts_main+113Bj
		mov	[esp+0BCh+var_34], 0
		mov	ebp, [esp+0BCh+var_70]
		test	ebp, ebp
		jz	loc_44C957

loc_44C4DC:				; CODE XREF: _ts_main+F39j
		call	_TS_REQ_new
		mov	[esp+0BCh+var_A0], eax
		test	eax, eax
		jz	loc_44C96F
		mov	[esp+0BCh+var_B8], 1
		mov	[esp+0BCh+var_BC], eax
		call	_TS_REQ_set_version
		test	eax, eax
		jnz	loc_44C8E6
		xor	ebp, ebp
		mov	[esp+0BCh+var_9C], 0
		mov	[esp+0BCh+var_88], 0
		mov	[esp+0BCh+var_90], 0

loc_44C51F:				; CODE XREF: _ts_main+F22j
					; _ts_main+F61j ...
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		call	_TS_REQ_free
		mov	[esp+0BCh+var_B8], offset aCouldNotCreate ; "could not create query\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_A0], 0

loc_44C548:				; CODE XREF: _ts_main+13A4j
		mov	eax, [esp+0BCh+var_90]
		mov	[esp+0BCh+var_BC], eax
		call	_TS_MSG_IMPRINT_free
		mov	eax, [esp+0BCh+var_88]
		mov	[esp+0BCh+var_BC], eax
		call	_X509_ALGOR_free
		mov	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_BC], eax
		call	_CRYPTO_free
		mov	eax, [esp+0BCh+var_9C]
		mov	[esp+0BCh+var_BC], eax
		call	_ASN1_OBJECT_free
		mov	[esp+0BCh+var_BC], ebp
		call	_ASN1_INTEGER_free
		xor	edi, edi
		jmp	loc_44C3A2
; ---------------------------------------------------------------------------

loc_44C58A:				; CODE XREF: _ts_main+5C5j
		mov	edi, offset aToken_in ;	"-token_in"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_44C6CE
		mov	edi, offset aOut_32 ; "-out"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_44C761
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_6C], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44C5C2:				; CODE XREF: _ts_main+A2Ej
		mov	eax, [esp+0BCh+var_88]
		test	eax, eax
		jnz	loc_44C470
		jmp	loc_44BF4C
; ---------------------------------------------------------------------------

loc_44C5D3:				; CODE XREF: _ts_main+66Fj
		call	_d2i_TS_RESP_bio
		mov	ebp, eax
		jmp	loc_44C122
; ---------------------------------------------------------------------------

loc_44C5DF:				; CODE XREF: _ts_main+2D8j
		mov	eax, [esp+0BCh+var_64]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], offset aErrorLoading_8 ; "Error loading directory %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf

loc_44C5FC:				; CODE XREF: _ts_main+126Aj
					; _ts_main+12B0j
		mov	[esp+0BCh+var_BC], ebp
		call	_X509_STORE_free
		mov	dword ptr [ebx+4], 0

loc_44C60B:				; CODE XREF: _ts_main+334j
					; _ts_main+34Fj ...
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_VERIFY_CTX_free
		mov	[esp+0BCh+var_BC], esi
		call	_BIO_free_all
		mov	[esp+0BCh+var_BC], edi
		call	_TS_REQ_free

loc_44C623:				; CODE XREF: _ts_main+DD6j
					; _ts_main+11FBj
		mov	[esp+0BCh+var_BC], offset aVerification	; "Verification: "
		call	_printf
		xor	ebx, ebx

loc_44C631:				; CODE XREF: _ts_main+391j
		mov	[esp+0BCh+var_BC], offset aFailed_0 ; "FAILED"
		call	_puts
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_ERR_print_errors
		mov	esi, 1
		jmp	loc_44BDD5
; ---------------------------------------------------------------------------

loc_44C654:				; CODE XREF: _ts_main+72Fj
		mov	eax, [esp+0BCh+var_58]
		test	eax, eax
		jz	loc_44C733
		mov	[esp+0BCh+var_BC], ebp
		call	_TS_RESP_get_token
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], edi
		call	_i2d_PKCS7_bio
		test	eax, eax
		setz	al
		and	eax, 0FFh
		mov	esi, eax
		jmp	loc_44C191
; ---------------------------------------------------------------------------

loc_44C685:				; CODE XREF: _ts_main+1ADj
		mov	ebx, [esp+0BCh+var_90]
		test	ebx, ebx
		jnz	loc_44BBEF
		mov	ecx, [esp+0BCh+var_8C]
		test	ecx, ecx
		jnz	loc_44BBFB
		jmp	loc_44BF64
; ---------------------------------------------------------------------------
		align 10h

loc_44C6B0:				; CODE XREF: _ts_main+20Cj
		call	_d2i_TS_RESP_bio
		mov	[esp+0BCh+var_9C], eax
		test	eax, eax
		jz	loc_44C7F6
		mov	[esp+0BCh+var_A0], 0
		jmp	loc_44BC5B
; ---------------------------------------------------------------------------

loc_44C6CE:				; CODE XREF: _ts_main+B68j
		mov	eax, ebx
		mov	[esp+0BCh+var_68], 1
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44C6DD:				; CODE XREF: _ts_main+6F4j
		mov	esi, 1
		xor	edi, edi
		jmp	loc_44C191
; ---------------------------------------------------------------------------

loc_44C6E9:				; CODE XREF: _ts_main+9BEj
		call	_i2d_TS_REQ_bio
		test	eax, eax
		setz	al
		and	eax, 0FFh
		mov	esi, eax
		jmp	loc_44C405
; ---------------------------------------------------------------------------

loc_44C6FF:				; CODE XREF: _ts_main+36Bj
		mov	eax, [esp+0BCh+var_9C]
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_RESP_verify_response
		mov	esi, eax
		jmp	loc_44BDB3
; ---------------------------------------------------------------------------

loc_44C716:				; CODE XREF: _ts_main+73Bj
		mov	[esp+0BCh+var_B8], ebp
		mov	[esp+0BCh+var_BC], edi
		call	_TS_RESP_print_bio
		test	eax, eax
		setz	al
		and	eax, 0FFh
		mov	esi, eax
		jmp	loc_44C191
; ---------------------------------------------------------------------------

loc_44C733:				; CODE XREF: _ts_main+C2Aj
		mov	[esp+0BCh+var_B8], ebp
		mov	[esp+0BCh+var_BC], edi
		call	_i2d_TS_RESP_bio
		test	eax, eax
		setz	al
		and	eax, 0FFh
		mov	esi, eax
		jmp	loc_44C191
; ---------------------------------------------------------------------------

loc_44C750:				; CODE XREF: _ts_main+67Ej
		xor	esi, esi
		xor	ebp, ebp
		mov	[esp+0BCh+var_9C], 0
		jmp	loc_44C0FC
; ---------------------------------------------------------------------------

loc_44C761:				; CODE XREF: _ts_main+B7Cj
		mov	edi, offset aToken_out ; "-token_out"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jz	loc_44C9A5
		mov	edi, offset aText_17 ; "-text"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_44C996
		mov	edi, offset aReply ; "-reply"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	loc_44CBCC
		mov	ecx, [esp+0BCh+var_9C]
		test	ecx, ecx
		jnz	loc_44BF64
		mov	eax, ebx
		mov	[esp+0BCh+var_9C], 2
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------
		align 10h

loc_44C7C0:				; CODE XREF: _ts_main+654j
		mov	esi, 1
		xor	edi, edi
		xor	ebp, ebp
		jmp	loc_44C191
; ---------------------------------------------------------------------------

loc_44C7CE:				; CODE XREF: _ts_main+978j
		mov	esi, 1
		xor	ebp, ebp
		jmp	loc_44C405
; ---------------------------------------------------------------------------

loc_44C7DA:				; CODE XREF: _ts_main+950j
		mov	esi, 1
		xor	ebp, ebp
		mov	[esp+0BCh+var_98], 0
		mov	[esp+0BCh+var_A0], 0
		jmp	loc_44C405
; ---------------------------------------------------------------------------

loc_44C7F6:				; CODE XREF: _ts_main+1F1j
					; _ts_main+21Dj ...
		mov	[esp+0BCh+var_9C], 0
		mov	[esp+0BCh+var_A0], 0
		jmp	loc_44C623
; ---------------------------------------------------------------------------

loc_44C80B:				; CODE XREF: _ts_main+887j
					; _ts_main+8A1j ...
		xor	esi, esi
		jmp	loc_44C306
; ---------------------------------------------------------------------------

loc_44C812:				; CODE XREF: _ts_main+692j
		xor	esi, esi
		xor	ebp, ebp
		jmp	loc_44C0FC
; ---------------------------------------------------------------------------

loc_44C81B:				; CODE XREF: _ts_main+231j
		mov	eax, [esp+0BCh+var_8C]
		test	eax, eax
		jz	loc_44CC25
		call	_TS_VERIFY_CTX_new
		mov	ebx, eax
		test	eax, eax
		jz	short loc_44C869
		mov	dword ptr [ebx], 4Ah
		lea	eax, [esp+0BCh+var_30]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [esp+0BCh+var_8C]
		mov	[esp+0BCh+var_BC], eax
		call	_string_to_hex
		mov	[ebx+14h], eax
		test	eax, eax
		jz	loc_44CC07
		mov	eax, [esp+0BCh+var_30]
		mov	[ebx+18h], eax
		jmp	loc_44BC9B
; ---------------------------------------------------------------------------

loc_44C869:				; CODE XREF: _ts_main+240j
					; _ts_main+E00j ...
		xor	edi, edi
		xor	esi, esi
		xor	ebx, ebx
		jmp	loc_44C60B
; ---------------------------------------------------------------------------

loc_44C874:				; CODE XREF: _ts_main+705j
		mov	[esp+0BCh+var_B8], 0
		add	eax, 20h
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_fp
		mov	edi, eax
		jmp	loc_44C151
; ---------------------------------------------------------------------------

loc_44C88E:				; CODE XREF: _ts_main+989j
		mov	[esp+0BCh+var_B8], 0
		add	eax, 20h
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_fp
		mov	ebp, eax
		jmp	loc_44C3D5
; ---------------------------------------------------------------------------

loc_44C8A8:				; CODE XREF: _ts_main+723j
		mov	esi, 1
		jmp	loc_44C191
; ---------------------------------------------------------------------------

loc_44C8B2:				; CODE XREF: _ts_main+265j
		xor	edi, edi
		xor	esi, esi
		jmp	loc_44C60B
; ---------------------------------------------------------------------------

loc_44C8BB:				; CODE XREF: _ts_main+6A1j
		xor	esi, esi
		jmp	loc_44C0FC
; ---------------------------------------------------------------------------

loc_44C8C2:				; CODE XREF: _ts_main+9A7j
		mov	esi, 1
		jmp	loc_44C405
; ---------------------------------------------------------------------------

loc_44C8CC:				; CODE XREF: _ts_main+A3Aj
		mov	[esp+0BCh+var_B8], offset aWarningNotMu_5 ; "warning, not much extra random data, co"...
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		jmp	loc_44BF4C
; ---------------------------------------------------------------------------

loc_44C8E6:				; CODE XREF: _ts_main+ACFj
		call	_TS_MSG_IMPRINT_new
		mov	edi, eax
		mov	[esp+0BCh+var_90], eax
		test	eax, eax
		jz	loc_44CBF0
		call	_X509_ALGOR_new
		mov	esi, eax
		mov	[esp+0BCh+var_88], eax
		test	eax, eax
		jz	short loc_44C948
		mov	eax, [esp+0BCh+var_70]
		mov	[esp+0BCh+var_BC], eax
		call	_EVP_MD_type
		mov	[esp+0BCh+var_BC], eax
		call	_OBJ_nid2obj
		mov	[esi], eax
		test	eax, eax
		jz	short loc_44C948
		call	_ASN1_TYPE_new
		mov	[esi+4], eax
		test	eax, eax
		jz	short loc_44C948
		mov	dword ptr [eax], 5
		mov	[esp+0BCh+var_B8], esi
		mov	[esp+0BCh+var_BC], edi
		call	_TS_MSG_IMPRINT_set_algo
		test	eax, eax
		jnz	loc_44CCE5

loc_44C948:				; CODE XREF: _ts_main+ED6j
					; _ts_main+EF0j ...
		xor	ebp, ebp
		mov	[esp+0BCh+var_9C], 0
		jmp	loc_44C51F
; ---------------------------------------------------------------------------

loc_44C957:				; CODE XREF: _ts_main+AA6j
		mov	[esp+0BCh+var_BC], offset aSha1_1 ; "sha1"
		call	_EVP_get_digestbyname
		mov	[esp+0BCh+var_70], eax
		test	eax, eax
		jnz	loc_44C4DC

loc_44C96F:				; CODE XREF: _ts_main+AB7j
		xor	ebp, ebp
		mov	[esp+0BCh+var_9C], 0
		mov	[esp+0BCh+var_88], 0
		mov	[esp+0BCh+var_90], 0
		mov	[esp+0BCh+var_A0], 0
		jmp	loc_44C51F
; ---------------------------------------------------------------------------

loc_44C996:				; CODE XREF: _ts_main+D53j
		mov	eax, ebx
		mov	[esp+0BCh+var_5C], 1
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44C9A5:				; CODE XREF: _ts_main+D3Fj
		mov	eax, ebx
		mov	[esp+0BCh+var_58], 1
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44C9B4:				; CODE XREF: _ts_main+8D0j
		mov	eax, [esp+0BCh+var_40]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_crypto_device
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_B0], esi
		mov	eax, [esp+0BCh+var_4C]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_signer_cert
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_B0], esi
		mov	eax, [esp+0BCh+var_48]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_certs
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_AC], esi
		mov	[esp+0BCh+var_B0], ebp
		mov	eax, [esp+0BCh+var_50]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_signer_key
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_B0], esi
		mov	eax, [esp+0BCh+var_80]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_def_policy
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_B4], esi
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_policies
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_B4], esi
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_digests
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_B4], esi
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_accuracy
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_B4], esi
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_clock_precision_digits
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_B4], esi
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_ordering
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_B4], esi
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_tsa_name
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_B4], esi
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebx
		call	_TS_CONF_set_ess_cert_id_chain
		test	eax, eax
		jz	loc_44C306
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_B8], eax
		mov	[esp+0BCh+var_BC], esi
		call	_TS_RESP_create_response
		mov	ebp, eax
		test	eax, eax
		jz	loc_44C306
		mov	[esp+0BCh+var_BC], esi
		call	_TS_RESP_CTX_free
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_free_all
		mov	[esp+0BCh+var_B8], offset aResponseHasBee ; "Response has been generated.\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_A0], 0
		jmp	loc_44C12A
; ---------------------------------------------------------------------------

loc_44CB4C:				; CODE XREF: _ts_main+A87j
		mov	[esp+0BCh+var_B8], 0
		mov	eax, ds:__imp___iob
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_fp
		mov	[esp+0BCh+var_98], eax

loc_44CB65:				; CODE XREF: _ts_main+128Ej
		mov	eax, [esp+0BCh+var_98]
		test	eax, eax
		jnz	loc_44C4C5
		mov	esi, 1
		xor	ebp, ebp
		xor	edi, edi
		mov	[esp+0BCh+var_A0], 0
		jmp	loc_44C405
; ---------------------------------------------------------------------------

loc_44CB87:				; CODE XREF: _ts_main+6C6j
		mov	[esp+0BCh+var_B8], esi
		mov	[esp+0BCh+var_BC], ebp
		call	_TS_RESP_set_status_info
		test	eax, eax
		jz	loc_44C0FC
		mov	eax, [esp+0BCh+var_9C]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], edi
		mov	[esp+0BCh+var_BC], ebp
		call	_TS_RESP_set_tst_info
		mov	[esp+0BCh+var_BC], 0
		call	_PKCS7_free
		mov	[esp+0BCh+var_BC], 0
		call	_TS_TST_INFO_free
		jmp	loc_44C11A
; ---------------------------------------------------------------------------

loc_44CBCC:				; CODE XREF: _ts_main+D67j
		mov	edi, offset aQueryfile ; "-queryfile"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jnz	loc_44CD86
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_7C], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44CBF0:				; CODE XREF: _ts_main+EC3j
		xor	ebp, ebp
		mov	[esp+0BCh+var_9C], 0
		mov	[esp+0BCh+var_88], 0
		jmp	loc_44C51F
; ---------------------------------------------------------------------------

loc_44CC07:				; CODE XREF: _ts_main+E24j
		mov	[esp+0BCh+var_B8], offset aInvalidDigestS ; "invalid digest string\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		xor	edi, edi
		xor	esi, esi
		jmp	loc_44C60B
; ---------------------------------------------------------------------------

loc_44CC25:				; CODE XREF: _ts_main+DF1j
		mov	eax, [esp+0BCh+var_7C]
		test	eax, eax
		jz	loc_44C623
		mov	[esp+0BCh+var_B8], offset aRb_1	; "rb"
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	esi, eax
		test	eax, eax
		jz	loc_44C869
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], eax
		call	_d2i_TS_REQ_bio
		mov	edi, eax
		test	eax, eax
		jz	short loc_44CC9F
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], eax
		call	_TS_REQ_to_TS_VERIFY_CTX
		mov	ebx, eax
		test	eax, eax
		jz	loc_44C60B
		mov	eax, [eax]
		or	eax, 1
		jmp	loc_44BCA4
; ---------------------------------------------------------------------------

loc_44CC85:				; CODE XREF: _ts_main+2A8j
					; _ts_main+2F9j
		mov	[esp+0BCh+var_B8], offset aMemoryAlloca_4 ; "memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		jmp	loc_44C5FC
; ---------------------------------------------------------------------------

loc_44CC9F:				; CODE XREF: _ts_main+122Fj
		xor	ebx, ebx
		jmp	loc_44C60B
; ---------------------------------------------------------------------------

loc_44CCA6:				; CODE XREF: _ts_main+932j
		mov	[esp+0BCh+var_B8], offset aRb_1	; "rb"
		mov	eax, [esp+0BCh+var_90]
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_new_file
		mov	[esp+0BCh+var_98], eax
		jmp	loc_44CB65
; ---------------------------------------------------------------------------

loc_44CCC3:				; CODE XREF: _ts_main+329j
		mov	eax, [esp+0BCh+var_60]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], offset aErrorLoading_9 ; "Error loading file	%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		jmp	loc_44C5FC
; ---------------------------------------------------------------------------

loc_44CCE5:				; CODE XREF: _ts_main+F12j
		lea	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_BC], eax
		mov	ecx, [esp+0BCh+var_70]
		mov	edx, [esp+0BCh+var_8C]
		mov	eax, [esp+0BCh+var_98]
		call	_create_digest
		test	eax, eax
		jz	loc_44C948
		mov	[esp+0BCh+var_B4], eax
		mov	eax, [esp+0BCh+var_34]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [esp+0BCh+var_90]
		mov	[esp+0BCh+var_BC], eax
		call	_TS_MSG_IMPRINT_set_msg
		test	eax, eax
		jz	loc_44C948
		mov	eax, [esp+0BCh+var_90]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		call	_TS_REQ_set_msg_imprint
		test	eax, eax
		jz	loc_44C948
		mov	eax, [esp+0BCh+var_80]
		test	eax, eax
		jz	short loc_44CDA6
		mov	[esp+0BCh+var_B8], 0
		mov	[esp+0BCh+var_BC], eax
		call	_OBJ_txt2obj
		mov	[esp+0BCh+var_9C], eax
		test	eax, eax
		jz	loc_44CFDA
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		call	_TS_REQ_set_policy_id
		test	eax, eax
		jnz	short loc_44CDAE
		xor	ebp, ebp
		jmp	loc_44C51F
; ---------------------------------------------------------------------------

loc_44CD86:				; CODE XREF: _ts_main+11AAj
		mov	edi, offset aPassin_14 ; "-passin"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_44CDD9
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_74], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44CDA6:				; CODE XREF: _ts_main+131Dj
		mov	[esp+0BCh+var_9C], 0

loc_44CDAE:				; CODE XREF: _ts_main+134Dj
		mov	edi, [esp+0BCh+var_78]
		test	edi, edi
		jz	short loc_44CDFD
		xor	ebp, ebp

loc_44CDB8:				; CODE XREF: _ts_main+14F1j
		mov	eax, [esp+0BCh+var_54]
		mov	[esp+0BCh+var_B8], eax
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		call	_TS_REQ_set_cert_req
		test	eax, eax
		jz	loc_44C51F
		jmp	loc_44C548
; ---------------------------------------------------------------------------

loc_44CDD9:				; CODE XREF: _ts_main+1364j
		mov	edi, offset aInkey_4 ; "-inkey"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	loc_44CFBA
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_50], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44CDFD:				; CODE XREF: _ts_main+1384j
		mov	[esp+0BCh+var_B8], 8
		lea	eax, [esp+0BCh+var_30]
		mov	[esp+0BCh+var_BC], eax
		call	_RAND_bytes
		test	eax, eax
		jle	loc_44CF51
		cmp	byte ptr [esp+0BCh+var_30], 0
		jnz	loc_44CFB3
		cmp	byte ptr [esp+0BCh+var_30+1], 0
		jnz	loc_44CFA9
		cmp	byte ptr [esp+0BCh+var_30+2], 0
		jnz	loc_44CF9F
		cmp	byte ptr [esp+0BCh+var_30+3], 0
		jnz	loc_44CF95
		cmp	[esp+0BCh+var_2C], 0
		jnz	loc_44CF8B
		cmp	[esp+0BCh+var_2B], 0
		jnz	loc_44CF81
		cmp	[esp+0BCh+var_2A], 0
		jnz	loc_44CF77
		cmp	[esp+0BCh+var_29], 1
		sbb	esi, esi
		not	esi
		add	esi, 8

loc_44CE8D:				; CODE XREF: _ts_main+154Cj
					; _ts_main+1556j ...
		call	_ASN1_INTEGER_new
		mov	ebp, eax
		test	eax, eax
		jz	loc_44CF51
		mov	eax, [eax+8]
		mov	[esp+0BCh+var_BC], eax
		call	_CRYPTO_free
		mov	eax, 8
		sub	eax, esi
		mov	[ebp+0], eax
		mov	[esp+0BCh+var_B4], 279h
		mov	[esp+0BCh+var_B8], offset aTs_c	; "ts.c"
		mov	eax, 9
		sub	eax, esi
		mov	[esp+0BCh+var_BC], eax
		call	_CRYPTO_malloc
		mov	[ebp+8], eax
		test	eax, eax
		jz	short loc_44CF53
		mov	edx, [ebp+0]
		mov	edi, eax
		lea	esi, [esp+esi+0BCh+var_30]
		cmp	edx, 4
		jnb	short loc_44CF26

loc_44CEE8:				; CODE XREF: _ts_main+151Fj
		xor	eax, eax
		test	dl, 2
		jz	short loc_44CEFA
		mov	ax, [esi]
		mov	[edi], ax
		mov	eax, 2

loc_44CEFA:				; CODE XREF: _ts_main+14BDj
		and	edx, 1
		jz	short loc_44CF09
		mov	dl, [esi+eax]
		mov	byte ptr [esp+0BCh+var_8C], dl
		mov	[edi+eax], dl

loc_44CF09:				; CODE XREF: _ts_main+14CDj
		mov	[esp+0BCh+var_B8], ebp
		mov	eax, [esp+0BCh+var_A0]
		mov	[esp+0BCh+var_BC], eax
		call	_TS_REQ_set_nonce
		test	eax, eax
		jz	loc_44C51F
		jmp	loc_44CDB8
; ---------------------------------------------------------------------------

loc_44CF26:				; CODE XREF: _ts_main+14B6j
		test	al, 1
		jz	short loc_44CF31
		mov	al, [esi]
		mov	[edi], al
		inc	edi
		inc	esi
		dec	edx

loc_44CF31:				; CODE XREF: _ts_main+14F8j
		test	edi, 2
		jz	short loc_44CF48
		mov	ax, [esi]
		mov	[edi], ax
		add	edi, 2
		add	esi, 2
		sub	edx, 2

loc_44CF48:				; CODE XREF: _ts_main+1507j
		mov	ecx, edx
		shr	ecx, 2
		rep movsd
		jmp	short loc_44CEE8
; ---------------------------------------------------------------------------

loc_44CF51:				; CODE XREF: _ts_main+13E6j
					; _ts_main+1466j
		xor	ebp, ebp

loc_44CF53:				; CODE XREF: _ts_main+14A5j
		mov	[esp+0BCh+var_B8], offset aCouldNotCrea_0 ; "could not create nonce\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		mov	[esp+0BCh+var_BC], ebp
		call	_ASN1_INTEGER_free
		xor	ebp, ebp
		jmp	loc_44C51F
; ---------------------------------------------------------------------------

loc_44CF77:				; CODE XREF: _ts_main+1448j
		mov	esi, 6
		jmp	loc_44CE8D
; ---------------------------------------------------------------------------

loc_44CF81:				; CODE XREF: _ts_main+143Aj
		mov	esi, 5
		jmp	loc_44CE8D
; ---------------------------------------------------------------------------

loc_44CF8B:				; CODE XREF: _ts_main+142Cj
		mov	esi, 4
		jmp	loc_44CE8D
; ---------------------------------------------------------------------------

loc_44CF95:				; CODE XREF: _ts_main+141Ej
		mov	esi, 3
		jmp	loc_44CE8D
; ---------------------------------------------------------------------------

loc_44CF9F:				; CODE XREF: _ts_main+1410j
		mov	esi, 2
		jmp	loc_44CE8D
; ---------------------------------------------------------------------------

loc_44CFA9:				; CODE XREF: _ts_main+1402j
		mov	esi, 1
		jmp	loc_44CE8D
; ---------------------------------------------------------------------------

loc_44CFB3:				; CODE XREF: _ts_main+13F4j
		xor	esi, esi
		jmp	loc_44CE8D
; ---------------------------------------------------------------------------

loc_44CFBA:				; CODE XREF: _ts_main+13B7j
		mov	edi, offset aSigner_2 ;	"-signer"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_44CFFE
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_4C], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44CFDA:				; CODE XREF: _ts_main+1335j
		mov	eax, [esp+0BCh+var_80]
		mov	[esp+0BCh+var_B4], eax
		mov	[esp+0BCh+var_B8], offset aCannotConvertS ; "cannot convert %s to OID\n"
		mov	eax, ds:_bio_err
		mov	[esp+0BCh+var_BC], eax
		call	_BIO_printf
		xor	ebp, ebp
		jmp	loc_44C51F
; ---------------------------------------------------------------------------

loc_44CFFE:				; CODE XREF: _ts_main+1598j
		mov	edi, offset aChain_1 ; "-chain"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44D01E
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_48], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44D01E:				; CODE XREF: _ts_main+15DCj
		mov	edi, offset aVerify_12 ; "-verify"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_44D049
		mov	edx, [esp+0BCh+var_9C]
		test	edx, edx
		jnz	loc_44BF64
		mov	eax, ebx
		mov	[esp+0BCh+var_9C], 3
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44D049:				; CODE XREF: _ts_main+15FCj
		mov	edi, offset aCapath_8 ;	"-CApath"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_44D069
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_64], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44D069:				; CODE XREF: _ts_main+1627j
		mov	edi, offset aCafile_8 ;	"-CAfile"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_44D089
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_60], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44D089:				; CODE XREF: _ts_main+1647j
		mov	edi, offset aUntrusted_0 ; "-untrusted"
		mov	ecx, 0Bh
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44D0A9
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_44], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44D0A9:				; CODE XREF: _ts_main+1667j
		mov	edi, offset aEngine_30 ; "-engine"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	short loc_44D0C9
		dec	ebp
		lea	eax, [ebx+4]
		mov	ebx, [ebx+4]
		mov	[esp+0BCh+var_40], ebx
		jmp	loc_44BB6B
; ---------------------------------------------------------------------------

loc_44D0C9:				; CODE XREF: _ts_main+1687j
		inc	eax
		mov	[esp+0BCh+var_BC], eax
		call	_EVP_get_digestbyname
		mov	[esp+0BCh+var_70], eax
		test	eax, eax
		jz	loc_44BF64
		mov	eax, ebx
		jmp	loc_44BB6B
_ts_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_srp_verify_user proc near		; CODE XREF: _srp_main+105Ep

var_44C		= dword	ptr -44Ch
var_448		= dword	ptr -448h
var_444		= dword	ptr -444h
var_440		= dword	ptr -440h
var_43C		= dword	ptr -43Ch
var_438		= dword	ptr -438h
var_434		= dword	ptr -434h
var_430		= dword	ptr -430h
var_428		= dword	ptr -428h
var_424		= dword	ptr -424h
var_420		= dword	ptr -420h
var_41C		= byte ptr -41Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 43Ch
		mov	esi, eax
		mov	ebp, edx
		mov	[esp+44Ch+var_430], ecx
		mov	edi, [esp+44Ch+arg_C]
		mov	[esp+44Ch+var_428], 0
		mov	[esp+44Ch+var_420], eax
		mov	eax, [esp+44Ch+arg_8]
		mov	[esp+44Ch+var_424], eax
		lea	eax, [esp+44Ch+var_424]
		mov	[esp+44Ch+var_440], eax	; int
		mov	[esp+44Ch+var_444], 0 ;	int
		mov	[esp+44Ch+var_448], 400h ; int
		lea	ebx, [esp+44Ch+var_41C]
		mov	[esp+44Ch+var_44C], ebx	; char *
		call	_password_callback
		test	eax, eax
		jle	loc_44D240
		mov	eax, [esp+44Ch+arg_10]
		test	eax, eax
		jnz	loc_44D1E0

loc_44D15B:				; CODE XREF: _srp_verify_user+126j
		mov	[esp+44Ch+var_444], ebx
		mov	[esp+44Ch+var_448], offset aPassS ; "Pass %s\n"
		mov	[esp+44Ch+var_44C], edi
		call	_BIO_printf
		mov	eax, [esp+44Ch+arg_0]
		mov	[esp+44Ch+var_438], eax
		mov	eax, [esp+44Ch+arg_4]
		mov	[esp+44Ch+var_43C], eax
		lea	eax, [esp+44Ch+var_428]
		mov	[esp+44Ch+var_440], eax
		lea	eax, [esp+44Ch+var_430]
		mov	[esp+44Ch+var_444], eax
		mov	[esp+44Ch+var_448], ebx
		mov	[esp+44Ch+var_44C], esi
		call	_SRP_create_verifier
		mov	ebx, eax
		test	eax, eax
		jz	short loc_44D220
		mov	esi, [esp+44Ch+var_428]
		mov	[esp+44Ch+var_448], ebp	; char *
		mov	[esp+44Ch+var_44C], esi	; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_44D1D0

loc_44D1BB:				; CODE XREF: _srp_verify_user+E2j
		mov	[esp+44Ch+var_44C], esi
		call	_CRYPTO_free

loc_44D1C3:				; CODE XREF: _srp_verify_user+140j
					; _srp_verify_user+152j
		mov	eax, ebx
		add	esp, 43Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_44D1D0:				; CODE XREF: _srp_verify_user+C9j
		xor	ebx, ebx
		jmp	short loc_44D1BB
; ---------------------------------------------------------------------------
		align 10h

loc_44D1E0:				; CODE XREF: _srp_verify_user+65j
		mov	eax, [esp+44Ch+arg_4]
		mov	[esp+44Ch+var_434], eax
		mov	eax, [esp+44Ch+arg_0]
		mov	[esp+44Ch+var_438], eax
		mov	eax, [esp+44Ch+var_430]
		mov	[esp+44Ch+var_43C], eax
		mov	[esp+44Ch+var_440], ebp
		mov	[esp+44Ch+var_444], esi
		mov	[esp+44Ch+var_448], offset aValidatingUser ; "Validating\n   user=\"%s\"\n srp_verifi"...
		mov	[esp+44Ch+var_44C], edi
		call	_BIO_printf
		jmp	loc_44D15B
; ---------------------------------------------------------------------------
		align 10h

loc_44D220:				; CODE XREF: _srp_verify_user+B5j
		mov	[esp+44Ch+var_448], offset aInternalErrorV ; "Internal error validating	SRP verifier\"...
		mov	[esp+44Ch+var_44C], edi
		call	_BIO_printf
		jmp	short loc_44D1C3
; ---------------------------------------------------------------------------
		align 10h

loc_44D240:				; CODE XREF: _srp_verify_user+56j
		xor	ebx, ebx
		jmp	loc_44D1C3
_srp_verify_user endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_srp_create_user proc near		; CODE XREF: _srp_main+C29p
					; _srp_main+D59p

var_44C		= dword	ptr -44Ch
var_448		= dword	ptr -448h
var_444		= dword	ptr -444h
var_440		= dword	ptr -440h
var_43C		= dword	ptr -43Ch
var_438		= dword	ptr -438h
var_428		= dword	ptr -428h
var_424		= dword	ptr -424h
var_420		= dword	ptr -420h
var_41C		= byte ptr -41Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 43Ch
		mov	ebx, eax
		mov	edi, edx
		mov	ebp, ecx
		mov	[esp+44Ch+var_428], 0
		mov	[esp+44Ch+var_420], eax
		mov	eax, [esp+44Ch+arg_8]
		mov	[esp+44Ch+var_424], eax
		lea	eax, [esp+44Ch+var_424]
		mov	[esp+44Ch+var_440], eax	; int
		mov	[esp+44Ch+var_444], 1 ;	int
		mov	[esp+44Ch+var_448], 400h ; int
		lea	esi, [esp+44Ch+var_41C]
		mov	[esp+44Ch+var_44C], esi	; char *
		call	_password_callback
		test	eax, eax
		jle	loc_44D3A0
		mov	eax, [esp+44Ch+arg_10]
		test	eax, eax
		jnz	loc_44D340

loc_44D2B2:				; CODE XREF: _srp_create_user+121j
		mov	eax, [esp+44Ch+arg_0]
		mov	[esp+44Ch+var_438], eax
		mov	eax, [esp+44Ch+arg_4]
		mov	[esp+44Ch+var_43C], eax
		mov	[esp+44Ch+var_440], edi
		lea	eax, [esp+44Ch+var_428]
		mov	[esp+44Ch+var_444], eax
		mov	[esp+44Ch+var_448], esi
		mov	[esp+44Ch+var_44C], ebx
		call	_SRP_create_verifier
		mov	ebx, eax
		test	eax, eax
		jz	loc_44D380
		mov	eax, [esp+44Ch+var_428]
		mov	[ebp+0], eax

loc_44D2F1:				; CODE XREF: _srp_create_user+147j
		cmp	[esp+44Ch+arg_10], 1
		jle	short loc_44D324
		mov	eax, [edi]
		mov	[esp+44Ch+var_43C], eax
		mov	eax, [esp+44Ch+var_428]
		mov	[esp+44Ch+var_440], eax
		mov	[esp+44Ch+var_444], ebx
		mov	[esp+44Ch+var_448], offset aGnidSSaltSVeri ; "gNid=%s salt =\"%s\"\n verifier =\"%s\""...
		mov	eax, [esp+44Ch+arg_C]
		mov	[esp+44Ch+var_44C], eax
		call	_BIO_printf

loc_44D324:				; CODE XREF: _srp_create_user+A9j
					; _srp_create_user+152j
		mov	eax, ebx
		add	esp, 43Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		jmp	short loc_44D340
; ---------------------------------------------------------------------------
		align 10h

loc_44D340:				; CODE XREF: _srp_create_user+5Cj
					; _srp_create_user+E1j
		mov	eax, [esp+44Ch+arg_4]
		mov	[esp+44Ch+var_43C], eax
		mov	eax, [esp+44Ch+arg_0]
		mov	[esp+44Ch+var_440], eax
		mov	[esp+44Ch+var_444], ebx
		mov	[esp+44Ch+var_448], offset aCreatingUserSG ; "Creating\n user=\"%s\"\n g=\"%s\"\n N=\"...
		mov	eax, [esp+44Ch+arg_C]
		mov	[esp+44Ch+var_44C], eax
		call	_BIO_printf
		jmp	loc_44D2B2
; ---------------------------------------------------------------------------
		align 10h

loc_44D380:				; CODE XREF: _srp_create_user+94j
		mov	[esp+44Ch+var_448], offset aInternalErrorC ; "Internal error creating SRP verifier\n"
		mov	eax, [esp+44Ch+arg_C]
		mov	[esp+44Ch+var_44C], eax
		call	_BIO_printf
		jmp	loc_44D2F1
; ---------------------------------------------------------------------------
		align 10h

loc_44D3A0:				; CODE XREF: _srp_create_user+4Dj
		xor	ebx, ebx
		jmp	short loc_44D324
_srp_create_user endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_print_user_part_4 proc	near		; CODE XREF: _srp_main+A61p
					; _srp_main+ED1p ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, eax
		mov	[esp+3Ch+var_20], edx
		mov	ebx, ecx
		mov	eax, [eax+4]
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_38], ecx
		mov	[esp+3Ch+var_3C], eax
		call	_sk_value
		mov	edi, eax
		mov	eax, [eax]
		cmp	byte ptr [eax],	49h
		jz	loc_44D4D0
		test	ebx, ebx
		js	short loc_44D3EE
		mov	edx, [esp+3Ch+arg_0]
		test	edx, edx
		jnz	loc_44D4E0

loc_44D3EE:				; CODE XREF: _print_user_part_4+30j
					; _print_user_part_4+197j
		mov	edi, [edi+10h]
		test	edi, edi
		jz	loc_44D4D0
		xor	ebx, ebx
		nop
		lea	esi, [esi+0]

loc_44D400:				; CODE XREF: _print_user_part_4+80j
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_num
		cmp	ebx, eax
		jge	loc_44D4D0
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], eax
		call	_sk_value
		mov	edx, [eax]
		cmp	byte ptr [edx],	49h
		jz	short loc_44D440

loc_44D42F:				; CODE XREF: _print_user_part_4+A1j
		inc	ebx
		jmp	short loc_44D400
; ---------------------------------------------------------------------------
		align 10h

loc_44D440:				; CODE XREF: _print_user_part_4+7Dj
		mov	eax, [eax+0Ch]
		mov	[esp+3Ch+var_38], eax ;	char *
		mov	[esp+3Ch+var_3C], edi ;	char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_44D42F
		test	ebx, ebx
		js	short loc_44D4D0
		mov	eax, [esp+3Ch+arg_0]
		test	eax, eax
		jz	short loc_44D4D0
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], eax
		call	_sk_value
		mov	esi, eax
		mov	eax, [eax+0Ch]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], offset aGNEntry ; "g N entry"
		mov	[esp+3Ch+var_38], offset aSS_7 ; "%s \"%s\"\n"
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		xor	ebx, ebx
		nop
		lea	esi, [esi+0]

loc_44D4A0:				; CODE XREF: _print_user_part_4+115j
		mov	edx, [esi+ebx*4]
		mov	[esp+3Ch+var_30], edx
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], offset aDS ; "  %d = \"%s\"\n"
		mov	edx, ds:_bio_err
		mov	[esp+3Ch+var_3C], edx
		call	_BIO_printf
		inc	ebx
		cmp	ebx, 6
		jnz	short loc_44D4A0
		mov	esi, esi
		lea	edi, [edi+0]

loc_44D4D0:				; CODE XREF: _print_user_part_4+28j
					; _print_user_part_4+43j ...
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_44D4E0:				; CODE XREF: _print_user_part_4+38j
		mov	eax, [esi+4]
		mov	eax, [eax+4]
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], eax
		call	_sk_value
		mov	ebp, eax
		mov	eax, [eax+0Ch]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], offset aUserEntry ; "User entry"
		mov	[esp+3Ch+var_38], offset aSS_7 ; "%s \"%s\"\n"
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		xor	ebx, ebx
		lea	esi, [esi+0]

loc_44D520:				; CODE XREF: _print_user_part_4+195j
		mov	eax, [ebp+ebx*4+0]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], ebx
		mov	[esp+3Ch+var_38], offset aDS ; "  %d = \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+3Ch+var_3C], eax
		call	_BIO_printf
		inc	ebx
		cmp	ebx, 6
		jnz	short loc_44D520
		jmp	loc_44D3EE
_print_user_part_4 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _srp_main
_srp_main	proc near		; DATA XREF: .data:00455244o

lpExistingFileName= dword ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 8Ch
		mov	[esp+9Ch+var_44], 0
		mov	[esp+9Ch+var_40], 0
		mov	[esp+9Ch+var_3C], 0FFFFFFFFh
		mov	ds:_conf_0, 0
		mov	ds:_section_0, 0
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_44DB93

loc_44D594:				; CODE XREF: _srp_main+657j
					; _srp_main+682j
		mov	eax, [esp+9Ch+arg_0]
		lea	ebp, [eax-1]
		mov	eax, [esp+9Ch+arg_4]
		lea	ebx, [eax+4]
		test	ebp, ebp
		jle	loc_44E7D0
		mov	[esp+9Ch+var_5C], 0
		mov	[esp+9Ch+var_78], 0
		mov	[esp+9Ch+var_84], 0
		mov	[esp+9Ch+var_88], 0
		mov	[esp+9Ch+var_64], 0
		mov	[esp+9Ch+var_60], 0
		mov	[esp+9Ch+var_6C], 0
		mov	[esp+9Ch+var_80], 0
		mov	[esp+9Ch+var_74], 0
		mov	[esp+9Ch+var_70], 0
		mov	[esp+9Ch+var_68], 0
		mov	[esp+9Ch+var_7C], 0
		jmp	short loc_44D62C
; ---------------------------------------------------------------------------
		align 10h

loc_44D620:				; CODE XREF: _srp_main+ECj
		inc	[esp+9Ch+var_88]

loc_44D624:				; CODE XREF: _srp_main+2D2j
					; _srp_main+301j ...
		dec	ebp
		add	ebx, 4
		test	ebp, ebp
		jle	short loc_44D66B

loc_44D62C:				; CODE XREF: _srp_main+C0j
					; _srp_main+119j
		mov	eax, [ebx]
		mov	esi, eax
		mov	edi, offset aVerbose_2 ; "-verbose"
		mov	ecx, 9
		repe cmpsb
		jz	short loc_44D620
		mov	edi, offset aConfig_2 ;	"-config"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_44D800
		dec	ebp
		jz	loc_44DB04
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_84], eax
		add	ebx, 4
		dec	ebp
		add	ebx, 4
		test	ebp, ebp
		jg	short loc_44D62C

loc_44D66B:				; CODE XREF: _srp_main+DAj
		mov	esi, [esp+9Ch+var_7C]
		mov	edx, [esp+9Ch+var_70]
		add	esi, edx
		mov	edi, [esp+9Ch+var_74]
		add	esi, edi
		add	esi, [esp+9Ch+var_68]
		mov	eax, edx
		add	eax, edi
		lea	edi, [edx+eax]
		xor	eax, eax

loc_44D688:				; CODE XREF: _srp_main+5EBj
					; _srp_main+15E9j
		mov	ecx, [esp+9Ch+var_78]
		test	ecx, ecx
		jz	short loc_44D6B2
		mov	edx, [esp+9Ch+var_84]
		test	edx, edx
		jz	short loc_44D6B2
		mov	[esp+9Ch+var_98], offset aDbfileAndConfi ; "-dbfile and	-configfile cannot be speci"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	eax, 1

loc_44D6B2:				; CODE XREF: _srp_main+13Ej
					; _srp_main+146j
		dec	esi
		jz	short loc_44D6CF

loc_44D6B5:				; CODE XREF: _srp_main+12E2j
		mov	[esp+9Ch+var_98], offset aExactlyOneOfTh ; "Exactly one	of the options -add, -delet"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	eax, 1

loc_44D6CF:				; CODE XREF: _srp_main+163j
		dec	edi
		jz	loc_44DB52

loc_44D6D6:				; CODE XREF: _srp_main+604j
					; _srp_main+624j
		mov	ecx, [esp+9Ch+var_44]
		test	ecx, ecx
		jz	loc_44D8CA

loc_44D6E2:				; CODE XREF: _srp_main+380j
		cmp	ebp, 1
		jz	loc_44D8D6
		mov	[esp+9Ch+var_98], offset aPassinPassoutA ; "-passin, -passout arguments	only valid "...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf

loc_44D700:				; CODE XREF: _srp_main+388j
		mov	eax, _srp_usage
		mov	ebx, offset _srp_usage
		test	eax, eax
		jz	short loc_44D732
		xchg	ax, ax

loc_44D710:				; CODE XREF: _srp_main+1E0j
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aS_25 ; "%s"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		add	ebx, 4
		mov	eax, [ebx]
		test	eax, eax
		jnz	short loc_44D710

loc_44D732:				; CODE XREF: _srp_main+1BCj
		mov	[esp+9Ch+var_90], 3Bh
		mov	[esp+9Ch+var_94], 3Bh
		mov	[esp+9Ch+var_98], offset aRandFileCfi_10 ; " -rand file%cfile%c...\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aLoadTheFileO_7 ; "		     load the file (or the "...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_98], offset aTheRandomNum_7 ; "		     the random	number gene"...

loc_44D774:				; CODE XREF: _srp_main+63Ej
					; _srp_main+15ABj
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf

loc_44D781:				; CODE XREF: _srp_main+7F6j
		xor	ecx, ecx
		mov	[esp+9Ch+var_6C], 0
		xor	edi, edi

loc_44D78D:				; CODE XREF: _srp_main+1223j
					; _srp_main+1366j ...
		mov	esi, 1

loc_44D792:				; CODE XREF: _srp_main+156Fj
		mov	ebx, [esp+9Ch+var_88]
		test	ebx, ebx
		jnz	loc_44DADE

loc_44D79E:				; CODE XREF: _srp_main+5AFj
		test	ecx, ecx
		jz	short loc_44D7AA
		mov	[esp+9Ch+lpExistingFileName], ecx
		call	_CRYPTO_free

loc_44D7AA:				; CODE XREF: _srp_main+250j
					; _srp_main+569j
		test	esi, esi
		jnz	loc_44DB40

loc_44D7B2:				; CODE XREF: _srp_main+5FDj
		mov	edx, [esp+9Ch+var_6C]
		test	edx, edx
		jz	short loc_44D7CB
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_98], eax
		mov	[esp+9Ch+lpExistingFileName], edx
		call	_app_RAND_write_file

loc_44D7CB:				; CODE XREF: _srp_main+268j
		mov	eax, ds:_conf_0
		test	eax, eax
		jz	short loc_44D7DC
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_NCONF_free

loc_44D7DC:				; CODE XREF: _srp_main+282j
		test	edi, edi
		jz	short loc_44D7E8
		mov	[esp+9Ch+lpExistingFileName], edi
		call	_free_index

loc_44D7E8:				; CODE XREF: _srp_main+28Ej
		call	_OBJ_cleanup
		mov	eax, esi
		add	esp, 8Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_44D800:				; CODE XREF: _srp_main+FCj
		mov	edi, offset aName_2 ; "-name"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44D830
		dec	ebp
		jz	loc_44DB04
		mov	eax, [ebx+4]
		mov	ds:_section_0, eax
		add	ebx, 4
		jmp	loc_44D624
; ---------------------------------------------------------------------------
		align 10h

loc_44D830:				; CODE XREF: _srp_main+2BEj
		mov	edi, offset aSrpvfile_0	; "-srpvfile"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jnz	short loc_44D860
		dec	ebp
		jz	loc_44DB04
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_78], eax
		add	ebx, 4
		jmp	loc_44D624
; ---------------------------------------------------------------------------
		align 10h

loc_44D860:				; CODE XREF: _srp_main+2EEj
		mov	edi, offset aAdd ; "-add"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jz	short loc_44D8B0
		mov	edi, offset aDelete ; "-delete"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jz	short loc_44D8BD
		mov	edi, offset aModify ; "-modify"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_44D9D6
		mov	[esp+9Ch+var_74], 1
		jmp	loc_44D624
; ---------------------------------------------------------------------------
		jmp	short loc_44D8B0
; ---------------------------------------------------------------------------
		align 10h

loc_44D8B0:				; CODE XREF: _srp_main+31Ej
					; _srp_main+351j
		mov	[esp+9Ch+var_7C], 1
		jmp	loc_44D624
; ---------------------------------------------------------------------------

loc_44D8BD:				; CODE XREF: _srp_main+32Ej
		mov	[esp+9Ch+var_70], 1
		jmp	loc_44D624
; ---------------------------------------------------------------------------

loc_44D8CA:				; CODE XREF: _srp_main+18Cj
		mov	edx, [esp+9Ch+var_40]
		test	edx, edx
		jnz	loc_44D6E2

loc_44D8D6:				; CODE XREF: _srp_main+195j
		test	eax, eax
		jnz	loc_44D700
		call	_ERR_load_crypto_strings
		mov	[esp+9Ch+var_94], 0
		mov	eax, [esp+9Ch+var_5C]
		mov	[esp+9Ch+var_98], eax
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_setup_engine
		lea	eax, [esp+9Ch+var_40]
		mov	[esp+9Ch+var_8C], eax ;	int
		lea	eax, [esp+9Ch+var_44]
		mov	[esp+9Ch+var_90], eax ;	int
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+var_94], eax ;	char *
		mov	eax, [esp+9Ch+var_80]
		mov	[esp+9Ch+var_98], eax ;	char *
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax ; int
		call	_app_passwd
		test	eax, eax
		jz	loc_44DB86
		mov	eax, [esp+9Ch+var_78]
		test	eax, eax
		jz	loc_44DCAE

loc_44D941:				; CODE XREF: _srp_main+889j
		call	_ERR_clear_error
		mov	[esp+9Ch+var_6C], 0

loc_44D94E:				; CODE XREF: _srp_main+8ACj
		mov	ecx, [esp+9Ch+var_88]
		test	ecx, ecx
		jnz	loc_44E670

loc_44D95A:				; CODE XREF: _srp_main+113Dj
		lea	eax, [esp+9Ch+var_38]
		mov	[esp+9Ch+var_98], eax ;	int
		mov	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+lpExistingFileName], eax ; char *
		call	_load_index
		mov	edi, eax
		test	eax, eax
		jz	loc_44E771
		xor	eax, eax
		mov	esi, 0FFFFFFFFh
		mov	[esp+9Ch+var_84], 0FFFFFFFFh
		mov	[esp+9Ch+var_80], ebp
		mov	ebp, eax
		mov	[esp+9Ch+var_5C], ebx
		jmp	short loc_44D9A0
; ---------------------------------------------------------------------------
		align 10h

loc_44D9A0:				; CODE XREF: _srp_main+441j
					; _srp_main+484j ...
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_num
		cmp	ebp, eax
		jge	loc_44DE17
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], ebp
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	edx, [eax]
		cmp	byte ptr [edx],	49h
		jz	loc_44DC20
		inc	ebp
		jmp	short loc_44D9A0
; ---------------------------------------------------------------------------

loc_44D9D6:				; CODE XREF: _srp_main+33Ej
		mov	edi, offset aList_0 ; "-list"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_44DB79
		mov	edi, offset aGn	; "-gn"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jnz	loc_44DBD7
		dec	ebp
		jz	loc_44DB04
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_60], eax
		add	ebx, 4
		jmp	loc_44D624
; ---------------------------------------------------------------------------

loc_44DA14:				; CODE XREF: _srp_main+E85j
		mov	[esp+9Ch+var_98], offset aFailedToUpda_0 ; "failed to update srpvfile\n"
		mov	[esp+9Ch+lpExistingFileName], ebx
		call	_BIO_printf
		mov	eax, [edi+4]
		mov	eax, [eax+10h]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aTxt_dbErrorN_0 ; "TXT_DB error number	%ld\n"
		mov	[esp+9Ch+lpExistingFileName], ebx
		call	_BIO_printf
		mov	[esp+9Ch+lpExistingFileName], esi
		call	_CRYPTO_free

loc_44DA46:				; CODE XREF: _srp_main+DE2j
					; _srp_main+12FCj
		mov	edx, [esp+9Ch+var_28]
		test	edx, edx
		jnz	loc_44E6BB

loc_44DA52:				; CODE XREF: _srp_main+1173j
		mov	eax, [esp+9Ch+var_24]

loc_44DA56:				; CODE XREF: _srp_main+D96j
		test	eax, eax
		jz	short loc_44DA62
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_CRYPTO_free

loc_44DA62:				; CODE XREF: _srp_main+508j
		mov	eax, [esp+9Ch+var_20]
		test	eax, eax
		jz	short loc_44DA72
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_CRYPTO_free

loc_44DA72:				; CODE XREF: _srp_main+518j
		mov	eax, [esp+9Ch+var_34]
		test	eax, eax
		jz	short loc_44DA82
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_CRYPTO_free

loc_44DA82:				; CODE XREF: _srp_main+528j
		mov	eax, [esp+9Ch+var_30]
		test	eax, eax
		jz	short loc_44DA92
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_CRYPTO_free

loc_44DA92:				; CODE XREF: _srp_main+538j
		mov	eax, [esp+9Ch+var_2C]
		test	eax, eax
		jz	short loc_44DAA2
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_CRYPTO_free

loc_44DAA2:				; CODE XREF: _srp_main+548j
					; _srp_main+C4Fj ...
		mov	esi, 1

loc_44DAA7:				; CODE XREF: _srp_main+121Cj
		mov	eax, [esp+9Ch+var_54]
		test	eax, eax
		jz	loc_44EABD

loc_44DAB3:				; CODE XREF: _srp_main+108Dj
		mov	ebp, [esp+9Ch+var_88]
		test	ebp, ebp
		jz	loc_44D7AA
		mov	eax, [esp+9Ch+var_54]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aUserErrorsD_ ; "User errors %d.\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		xor	ecx, ecx

loc_44DADE:				; CODE XREF: _srp_main+248j
		mov	[esp+9Ch+var_88], ecx
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aSrpTerminating ; "SRP	terminating with code %d.\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	ecx, [esp+9Ch+var_88]
		jmp	loc_44D79E
; ---------------------------------------------------------------------------

loc_44DB04:				; CODE XREF: _srp_main+103j
					; _srp_main+2C1j ...
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aUnknownOpti_19 ; "unknown option %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	esi, [esp+9Ch+var_7C]
		mov	edx, [esp+9Ch+var_70]
		add	esi, edx
		mov	eax, [esp+9Ch+var_74]
		add	esi, eax
		add	esi, [esp+9Ch+var_68]
		add	eax, edx
		lea	edi, [edx+eax]
		mov	eax, 1
		jmp	loc_44D688
; ---------------------------------------------------------------------------

loc_44DB40:				; CODE XREF: _srp_main+25Cj
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_ERR_print_errors
		jmp	loc_44D7B2
; ---------------------------------------------------------------------------

loc_44DB52:				; CODE XREF: _srp_main+180j
		test	ebp, ebp
		jg	loc_44D6D6
		mov	[esp+9Ch+var_98], offset aNeedAtLeastOne ; "Need at least one user for options -add"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	eax, 1
		jmp	loc_44D6D6
; ---------------------------------------------------------------------------

loc_44DB79:				; CODE XREF: _srp_main+494j
		mov	[esp+9Ch+var_68], 1
		jmp	loc_44D624
; ---------------------------------------------------------------------------

loc_44DB86:				; CODE XREF: _srp_main+3DFj
		mov	[esp+9Ch+var_98], offset aErrorGettin_23 ; "Error getting passwords\n"
		jmp	loc_44D774
; ---------------------------------------------------------------------------

loc_44DB93:				; CODE XREF: _srp_main+3Ej
		call	_BIO_s_file
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_44D594
		mov	esi, ds:__imp___iob
		lea	edx, [esi+40h]
		mov	[esp+9Ch+var_90], edx
		mov	[esp+9Ch+var_94], 10h
		mov	[esp+9Ch+var_98], 6Ah
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_ctrl
		jmp	loc_44D594
; ---------------------------------------------------------------------------

loc_44DBD7:				; CODE XREF: _srp_main+4A8j
		mov	edi, offset aUserinfo ;	"-userinfo"
		mov	ecx, 0Ah
		mov	esi, eax
		repe cmpsb
		jz	loc_44DE01
		mov	edi, offset aPassin_15 ; "-passin"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_44E851
		dec	ebp
		jz	loc_44DB04
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_80], eax
		add	ebx, 4
		jmp	loc_44D624
; ---------------------------------------------------------------------------
		align 10h

loc_44DC20:				; CODE XREF: _srp_main+47Dj
		mov	edx, [esp+9Ch+var_84]
		test	edx, edx
		js	loc_44E486

loc_44DC2C:				; CODE XREF: _srp_main+F3Cj
					; _srp_main+F53j ...
		mov	esi, ds:_bio_err
		test	ebp, ebp
		js	short loc_44DCA6
		cmp	[esp+9Ch+var_88], 1
		jle	short loc_44DCA6
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], ebp
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	ebx, eax
		mov	eax, [eax+0Ch]
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], offset aGNEntry ; "g N entry"
		mov	[esp+9Ch+var_98], offset aSS_7 ; "%s \"%s\"\n"
		mov	[esp+9Ch+lpExistingFileName], esi
		call	_BIO_printf
		xor	esi, esi
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_44DC80:				; CODE XREF: _srp_main+754j
		mov	eax, [ebx+esi*4]
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aDS ; "  %d = \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		inc	esi
		cmp	esi, 6
		jnz	short loc_44DC80

loc_44DCA6:				; CODE XREF: _srp_main+6E4j
					; _srp_main+6EBj
		mov	esi, ebp
		inc	ebp
		jmp	loc_44D9A0
; ---------------------------------------------------------------------------

loc_44DCAE:				; CODE XREF: _srp_main+3EBj
		mov	eax, [esp+9Ch+var_84]
		test	eax, eax
		jz	loc_44EA14

loc_44DCBA:				; CODE XREF: _srp_main+15B4j
		xor	ecx, ecx

loc_44DCBC:				; CODE XREF: _srp_main+14F2j
					; _srp_main+1568j
		mov	eax, [esp+9Ch+var_88]
		test	eax, eax
		jz	short loc_44DCE9
		mov	[esp+9Ch+var_80], ecx
		mov	eax, [esp+9Ch+var_84]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aUsingConfigu_2 ; "Using configuration	from %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	ecx, [esp+9Ch+var_80]

loc_44DCE9:				; CODE XREF: _srp_main+772j
		mov	[esp+9Ch+var_80], ecx
		mov	[esp+9Ch+lpExistingFileName], 0
		call	_NCONF_new
		mov	ds:_conf_0, eax
		lea	edx, [esp+9Ch+var_3C]
		mov	[esp+9Ch+var_94], edx
		mov	esi, [esp+9Ch+var_84]
		mov	[esp+9Ch+var_98], esi
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_NCONF_load
		test	eax, eax
		mov	ecx, [esp+9Ch+var_80]
		jle	loc_44E877
		test	ecx, ecx
		jz	short loc_44DD2E
		mov	[esp+9Ch+lpExistingFileName], ecx
		call	_CRYPTO_free

loc_44DD2E:				; CODE XREF: _srp_main+7D4j
		mov	eax, ds:_conf_0
		mov	[esp+9Ch+var_98], eax
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_load_config
		test	eax, eax
		jz	loc_44D781
		mov	eax, ds:_section_0
		test	eax, eax
		jz	loc_44EB3E

loc_44DD59:				; CODE XREF: _srp_main+162Fj
		mov	edx, ds:_conf_0
		test	edx, edx
		jz	loc_44E9C1
		mov	[esp+9Ch+var_94], offset aRandfile_1 ; "RANDFILE"
		mov	[esp+9Ch+var_98], offset aSrp_0	; "srp"
		mov	[esp+9Ch+lpExistingFileName], edx
		call	_NCONF_get_string
		mov	[esp+9Ch+var_6C], eax
		mov	eax, ds:_section_0

loc_44DD88:				; CODE XREF: _srp_main+1479j
		mov	edi, [esp+9Ch+var_88]
		test	edi, edi
		jz	short loc_44DDAE
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aTryingToReadSr ; "trying to read srpvfile in section \"%s"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	eax, ds:_section_0

loc_44DDAE:				; CODE XREF: _srp_main+83Ej
		mov	[esp+9Ch+var_94], offset aSrpvfile_1 ; "srpvfile"
		mov	[esp+9Ch+var_98], eax
		mov	eax, ds:_conf_0
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_NCONF_get_string
		mov	[esp+9Ch+var_78], eax
		test	eax, eax
		jz	loc_44EAC4
		mov	esi, [esp+9Ch+var_6C]
		test	esi, esi
		jz	loc_44D941
		mov	[esp+9Ch+var_94], 0
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+var_98], eax
		mov	eax, [esp+9Ch+var_6C]
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_app_RAND_load_file
		jmp	loc_44D94E
; ---------------------------------------------------------------------------

loc_44DE01:				; CODE XREF: _srp_main+695j
		dec	ebp
		jz	loc_44DB04
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_64], eax
		add	ebx, 4
		jmp	loc_44D624
; ---------------------------------------------------------------------------

loc_44DE17:				; CODE XREF: _srp_main+460j
		mov	ebp, [esp+9Ch+var_80]
		mov	ebx, [esp+9Ch+var_5C]
		mov	eax, [esp+9Ch+var_88]
		test	eax, eax
		jnz	loc_44E6A1

loc_44DE2B:				; CODE XREF: _srp_main+1166j
		mov	edx, [esp+9Ch+var_84]
		test	edx, edx
		js	loc_44E5FF
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	esi, edx
		mov	[esp+9Ch+var_98], edx
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	[esp+9Ch+var_58], eax
		mov	edx, ds:_bio_err
		mov	[esp+9Ch+var_84], edx
		cmp	[esp+9Ch+var_88], 1
		jle	short loc_44DEDE
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], esi
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	esi, eax
		mov	eax, [eax+0Ch]
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], offset aDefaultGAndN ; "Default g and	N"
		mov	[esp+9Ch+var_98], offset aSS_7 ; "%s \"%s\"\n"
		mov	edx, [esp+9Ch+var_84]
		mov	[esp+9Ch+lpExistingFileName], edx
		call	_BIO_printf
		xor	edx, edx
		mov	[esp+9Ch+var_84], ebx
		mov	ebx, edx

loc_44DE9F:				; CODE XREF: _srp_main+973j
		mov	eax, [esi+ebx*4]
		mov	[esp+9Ch+var_90], eax
		mov	[esp+9Ch+var_94], ebx
		mov	[esp+9Ch+var_98], offset aDS ; "  %d = \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		inc	ebx
		cmp	ebx, 6
		jnz	short loc_44DE9F
		mov	ebx, [esp+9Ch+var_84]

loc_44DEC9:				; CODE XREF: _srp_main+1268j
		mov	[esp+9Ch+var_98], offset aStartingUserPr ; "Starting user processing\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf

loc_44DEDE:				; CODE XREF: _srp_main+90Ej
					; _srp_main+10DBj ...
		test	ebp, ebp
		jle	loc_44E6C8
		lea	eax, [ebx+4]
		mov	[esp+9Ch+var_80], eax
		mov	esi, [ebx]

loc_44DEEF:				; CODE XREF: _srp_main+117Ej
		mov	[esp+9Ch+var_5C], 0
		mov	[esp+9Ch+var_54], 0
		mov	[esp+9Ch+var_84], ebp
		mov	ebp, [esp+9Ch+var_68]
		test	ebp, ebp
		jnz	loc_44DFF5
		nop

loc_44DF10:				; CODE XREF: _srp_main+A9Fj
		test	esi, esi
		jz	loc_44E070

loc_44DF18:				; CODE XREF: _srp_main+AA7j
		cmp	[esp+9Ch+var_88], 1
		jle	short loc_44DF38
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aProcessingUser ; "Processing user \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf

loc_44DF38:				; CODE XREF: _srp_main+9CDj
		xor	ebx, ebx
		lea	esi, [esi+0]

loc_44DF40:				; CODE XREF: _srp_main+A33j
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_num
		cmp	ebx, eax
		jge	loc_44DFFD
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	edx, [eax]
		cmp	byte ptr [edx],	49h
		jz	short loc_44DF82
		mov	eax, [eax+0Ch]
		mov	[esp+9Ch+var_98], eax ;	char *
		mov	[esp+9Ch+lpExistingFileName], esi ; char *
		call	_strcmp
		test	eax, eax
		jz	short loc_44DF90

loc_44DF82:				; CODE XREF: _srp_main+A1Dj
		inc	ebx
		jmp	short loc_44DF40
; ---------------------------------------------------------------------------
		align 10h

loc_44DF90:				; CODE XREF: _srp_main+A30j
		test	ebx, ebx
		js	short loc_44DFB6
		mov	edx, [esp+9Ch+var_88]
		test	edx, edx
		jz	loc_44E0C0

loc_44DFA0:				; CODE XREF: _srp_main+B72j
		mov	[esp+9Ch+lpExistingFileName], 1
		mov	ecx, ebx
		mov	edx, ds:_bio_err
		mov	eax, edi
		call	_print_user_part_4

loc_44DFB6:				; CODE XREF: _srp_main+A42j
		test	ebp, ebp
		jz	short loc_44E006
		lea	esi, [esi+0]

loc_44DFC0:				; CODE XREF: _srp_main+AB4j
		test	esi, esi
		jz	loc_44E3E8
		test	ebx, ebx
		js	loc_44E440

loc_44DFD0:				; CODE XREF: _srp_main+CA2j
					; _srp_main+CF7j ...
		dec	[esp+9Ch+var_84]
		mov	esi, [esp+9Ch+var_84]
		test	esi, esi
		jle	loc_44E070

loc_44DFE0:				; CODE XREF: _srp_main+B10j
		mov	eax, [esp+9Ch+var_80]
		mov	esi, [eax]
		add	eax, 4
		mov	[esp+9Ch+var_80], eax
		test	ebp, ebp
		jz	loc_44DF10

loc_44DFF5:				; CODE XREF: _srp_main+9B9j
		test	esi, esi
		jnz	loc_44DF18

loc_44DFFD:				; CODE XREF: _srp_main+A00j
		mov	ebx, 0FFFFFFFFh
		test	ebp, ebp
		jnz	short loc_44DFC0

loc_44E006:				; CODE XREF: _srp_main+A68j
		mov	eax, [esp+9Ch+var_7C]
		test	eax, eax
		jz	loc_44E0E0
		test	ebx, ebx
		js	loc_44E24C

loc_44E01A:				; CODE XREF: _srp_main+B7Ej
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	ebx, eax
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aUserSReactivat ; "user \"%s\"	reactivated.\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	eax, [ebx]
		mov	byte ptr [eax],	56h
		mov	[esp+9Ch+var_5C], 1
		xor	ebp, ebp
		dec	[esp+9Ch+var_84]
		mov	esi, [esp+9Ch+var_84]
		test	esi, esi
		jg	loc_44DFE0
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_44E070:				; CODE XREF: _srp_main+9C2j
					; _srp_main+A8Aj
		mov	ebx, [esp+9Ch+var_88]
		test	ebx, ebx
		jnz	loc_44E950
		mov	eax, [esp+9Ch+var_5C]
		test	eax, eax
		jz	loc_44E75F
		xor	ebx, ebx

loc_44E08A:				; CODE XREF: _srp_main+B6Ej
					; _srp_main+1187j
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_num
		cmp	eax, ebx
		jle	loc_44E907
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	eax, [eax]
		cmp	byte ptr [eax],	76h
		jz	loc_44E6D3
		inc	ebx
		jmp	short loc_44E08A
; ---------------------------------------------------------------------------

loc_44E0C0:				; CODE XREF: _srp_main+A4Aj
		test	ebp, ebp
		jnz	loc_44DFA0
		mov	edx, [esp+9Ch+var_7C]
		test	edx, edx
		jnz	loc_44E01A
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_44E0E0:				; CODE XREF: _srp_main+ABCj
		mov	eax, [esp+9Ch+var_74]
		test	eax, eax
		jz	loc_44E1F7
		test	ebx, ebx
		js	loc_44E462
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	[esp+9Ch+var_68], eax
		mov	eax, [eax]
		mov	al, [eax]
		cmp	al, 76h
		jz	loc_44E65F
		cmp	al, 56h
		jz	loc_44E4D0

loc_44E11E:				; CODE XREF: _srp_main+1065j
		mov	ecx, [esp+9Ch+var_88]
		test	ecx, ecx
		jnz	loc_44E4B2

loc_44E12A:				; CODE XREF: _srp_main+F7Bj
		mov	ebp, ds:_bio_err
		mov	eax, [esp+9Ch+var_40]
		mov	[esp+9Ch+var_50], eax
		mov	eax, [esp+9Ch+var_58]
		test	eax, eax
		jz	loc_44E692
		mov	ebx, [eax+4]
		mov	eax, [eax+8]
		mov	[esp+9Ch+var_5C], eax

loc_44E14E:				; CODE XREF: _srp_main+114Cj
		mov	edx, [esp+9Ch+var_68]
		lea	ecx, [edx+8]
		add	edx, 4
		mov	eax, [esp+9Ch+var_88]
		mov	[esp+9Ch+var_8C], eax
		mov	[esp+9Ch+var_90], ebp
		mov	eax, [esp+9Ch+var_50]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], ebx
		mov	eax, [esp+9Ch+var_5C]
		mov	[esp+9Ch+lpExistingFileName], eax
		mov	eax, esi
		call	_srp_create_user
		test	eax, eax
		jz	loc_44E9CE
		mov	esi, [esp+9Ch+var_68]
		mov	edx, [esi]
		mov	byte ptr [edx],	76h
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BUF_strdup
		mov	[esi+10h], eax
		mov	edx, [esi+0Ch]
		test	edx, edx
		jz	loc_44DAA2
		test	eax, eax
		jz	loc_44DAA2
		mov	eax, [esi]
		test	eax, eax
		jz	loc_44DAA2
		mov	eax, [esi+4]
		test	eax, eax
		jz	loc_44DAA2
		mov	eax, [esi+8]
		test	eax, eax
		jz	loc_44DAA2
		mov	eax, [esp+9Ch+var_64]
		test	eax, eax
		jz	short loc_44E1E8
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BUF_strdup
		mov	[esi+14h], eax
		test	eax, eax
		jz	loc_44DAA2

loc_44E1E8:				; CODE XREF: _srp_main+C83j
		mov	[esp+9Ch+var_5C], 1
		xor	ebp, ebp
		jmp	loc_44DFD0
; ---------------------------------------------------------------------------

loc_44E1F7:				; CODE XREF: _srp_main+B96j
		mov	ebp, [esp+9Ch+var_70]
		test	ebp, ebp
		jz	loc_44E439
		test	ebx, ebx
		js	loc_44E64E
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	ebx, eax
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aUserSRevoked_T ; "user \"%s\"	revoked. t\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	eax, [ebx]
		mov	byte ptr [eax],	52h
		mov	[esp+9Ch+var_5C], 1
		xor	ebp, ebp
		jmp	loc_44DFD0
; ---------------------------------------------------------------------------

loc_44E24C:				; CODE XREF: _srp_main+AC4j
		mov	[esp+9Ch+var_30], 0
		mov	[esp+9Ch+var_2C], 0
		mov	[esp+9Ch+var_20], 0
		mov	edx, ds:_bio_err
		mov	eax, [esp+9Ch+var_40]
		mov	ecx, [esp+9Ch+var_58]
		test	ecx, ecx
		jz	loc_44E5F0
		mov	ebx, [ecx+4]
		mov	ecx, [ecx+8]
		mov	[esp+9Ch+var_68], ecx

loc_44E284:				; CODE XREF: _srp_main+10AAj
		mov	ecx, [esp+9Ch+var_88]
		mov	[esp+9Ch+var_8C], ecx
		mov	[esp+9Ch+var_90], edx
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], ebx
		mov	eax, [esp+9Ch+var_68]
		mov	[esp+9Ch+lpExistingFileName], eax
		lea	ecx, [esp+9Ch+var_2C]
		lea	edx, [esp+9Ch+var_30]
		mov	eax, esi
		call	_srp_create_user
		mov	ebx, eax
		test	eax, eax
		jz	loc_44E8E5
		mov	[esp+9Ch+lpExistingFileName], esi
		call	_BUF_strdup
		mov	[esp+9Ch+var_28], eax
		mov	[esp+9Ch+lpExistingFileName], offset aV_2 ; "v"
		call	_BUF_strdup
		mov	[esp+9Ch+var_34], eax
		mov	[esp+9Ch+lpExistingFileName], ebx
		call	_BUF_strdup
		mov	[esp+9Ch+var_24], eax
		mov	edx, [esp+9Ch+var_28]
		test	edx, edx
		jz	loc_44DA56
		test	eax, eax
		jz	loc_44E6BB
		mov	eax, [esp+9Ch+var_34]
		test	eax, eax
		jz	loc_44E6BB
		mov	eax, [esp+9Ch+var_30]
		test	eax, eax
		jz	loc_44E6BB
		mov	eax, [esp+9Ch+var_2C]
		test	eax, eax
		jz	loc_44E6BB
		mov	eax, [esp+9Ch+var_64]
		test	eax, eax
		jz	short loc_44E338
		mov	eax, [esp+9Ch+var_64]
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BUF_strdup
		mov	[esp+9Ch+var_20], eax
		test	eax, eax
		jz	loc_44DA46

loc_44E338:				; CODE XREF: _srp_main+DCEj
		mov	ebx, ds:_bio_err
		mov	[esp+9Ch+var_94], 0B5h
		mov	[esp+9Ch+var_98], offset aSrp_c	; "srp.c"
		mov	[esp+9Ch+lpExistingFileName], 1Ch
		call	_CRYPTO_malloc
		mov	esi, eax
		test	eax, eax
		jz	loc_44E837
		mov	eax, [esp+9Ch+var_34]
		mov	[esi], eax
		mov	[esp+9Ch+var_34], 0
		mov	eax, [esp+9Ch+var_30]
		mov	[esi+4], eax
		mov	[esp+9Ch+var_30], 0
		mov	eax, [esp+9Ch+var_2C]
		mov	[esi+8], eax
		mov	[esp+9Ch+var_2C], 0
		mov	eax, [esp+9Ch+var_28]
		mov	[esi+0Ch], eax
		mov	[esp+9Ch+var_28], 0
		mov	eax, [esp+9Ch+var_24]
		mov	[esi+10h], eax
		mov	[esp+9Ch+var_24], 0
		mov	eax, [esp+9Ch+var_20]
		mov	[esi+14h], eax
		mov	[esp+9Ch+var_20], 0
		mov	dword ptr [esi+18h], 0
		mov	eax, [edi+4]
		mov	[esp+9Ch+var_98], esi
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_TXT_DB_insert
		test	eax, eax
		jz	loc_44DA14
		mov	[esp+9Ch+var_5C], 1
		jmp	loc_44DFD0
; ---------------------------------------------------------------------------

loc_44E3E8:				; CODE XREF: _srp_main+A72j
		mov	[esp+9Ch+var_98], offset aListAllUsers ; "List all users\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		xor	ebx, ebx
		jmp	short loc_44E427
; ---------------------------------------------------------------------------
		jmp	short loc_44E410
; ---------------------------------------------------------------------------
		align 10h

loc_44E410:				; CODE XREF: _srp_main+EB1j
					; _srp_main+EE7j
		mov	[esp+9Ch+lpExistingFileName], 1
		mov	ecx, ebx
		mov	edx, ds:_bio_err
		mov	eax, edi
		call	_print_user_part_4
		inc	ebx

loc_44E427:				; CODE XREF: _srp_main+EAFj
		mov	eax, [edi+4]
		mov	edx, [eax+4]
		mov	[esp+9Ch+lpExistingFileName], edx
		call	_sk_num
		cmp	ebx, eax
		jl	short loc_44E410

loc_44E439:				; CODE XREF: _srp_main+CADj
		xor	ebp, ebp
		jmp	loc_44DFD0
; ---------------------------------------------------------------------------

loc_44E440:				; CODE XREF: _srp_main+A7Aj
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aUserSDoesNotEx ; "user \"%s\"	does not exist,	ignored. t\"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		inc	[esp+9Ch+var_54]
		jmp	loc_44DFD0
; ---------------------------------------------------------------------------

loc_44E462:				; CODE XREF: _srp_main+B9Ej
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aUserSDoesNot_0 ; "user \"%s\"	does not exist,	operation i"...

loc_44E46E:				; CODE XREF: _srp_main+110Aj
					; _srp_main+111Bj
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		inc	[esp+9Ch+var_54]
		xor	ebp, ebp
		jmp	loc_44DFD0
; ---------------------------------------------------------------------------

loc_44E486:				; CODE XREF: _srp_main+6D6j
		mov	esi, [esp+9Ch+var_60]
		test	esi, esi
		jz	loc_44DC2C
		mov	eax, [eax+0Ch]
		mov	[esp+9Ch+var_98], eax ;	char *
		mov	[esp+9Ch+lpExistingFileName], esi ; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_44DC2C
		mov	[esp+9Ch+var_84], ebp
		jmp	loc_44DC2C
; ---------------------------------------------------------------------------

loc_44E4B2:				; CODE XREF: _srp_main+BD4j
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aPasswordForUse ; "Password for user \"%s\" ok.\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		jmp	loc_44E12A
; ---------------------------------------------------------------------------

loc_44E4D0:				; CODE XREF: _srp_main+BC8j
		mov	ebp, [esp+9Ch+var_88]
		test	ebp, ebp
		jnz	loc_44E778

loc_44E4DC:				; CODE XREF: _srp_main+1241j
		mov	eax, [esp+9Ch+var_68]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	loc_44E637
		xor	ebp, ebp
		mov	[esp+9Ch+var_5C], ebx
		mov	ebx, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_44E500:				; CODE XREF: _srp_main+FE0j
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_num
		cmp	ebp, eax
		jge	loc_44E630
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], ebp
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	edx, [eax]
		cmp	byte ptr [edx],	49h
		jz	short loc_44E532

loc_44E52F:				; CODE XREF: _srp_main+FF3j
		inc	ebp
		jmp	short loc_44E500
; ---------------------------------------------------------------------------

loc_44E532:				; CODE XREF: _srp_main+FDDj
		mov	eax, [eax+0Ch]
		mov	[esp+9Ch+var_98], eax ;	char *
		mov	[esp+9Ch+lpExistingFileName], ebx ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_44E52F
		mov	ebx, [esp+9Ch+var_5C]
		test	ebp, ebp
		js	loc_44E630
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	ebp, ds:_bio_err
		mov	ebx, [esp+9Ch+var_44]
		test	eax, eax
		jz	loc_44EB09
		mov	edx, [eax+4]
		mov	[esp+9Ch+var_5C], edx
		mov	eax, [eax+8]

loc_44E57F:				; CODE XREF: _srp_main+10F9j
		mov	edx, [esp+9Ch+var_68]
		mov	ecx, [edx+8]
		mov	edx, [edx+4]
		mov	[esp+9Ch+var_50], edx
		mov	edx, [esp+9Ch+var_88]
		mov	[esp+9Ch+var_8C], edx
		mov	[esp+9Ch+var_90], ebp
		mov	[esp+9Ch+var_94], ebx
		mov	edx, [esp+9Ch+var_5C]
		mov	[esp+9Ch+var_98], edx
		mov	[esp+9Ch+lpExistingFileName], eax
		mov	edx, [esp+9Ch+var_50]
		mov	eax, esi
		call	_srp_verify_user
		test	eax, eax
		jnz	loc_44E11E
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aInvalidPassw_0 ; "Invalid password for user \"%s\", opera"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		inc	[esp+9Ch+var_54]

loc_44E5D8:				; CODE XREF: _srp_main+149Bj
		mov	esi, 1
		jmp	loc_44DAB3
; ---------------------------------------------------------------------------
		align 10h

loc_44E5F0:				; CODE XREF: _srp_main+D24j
		mov	ecx, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_68], ecx
		xor	ebx, ebx
		jmp	loc_44E284
; ---------------------------------------------------------------------------

loc_44E5FF:				; CODE XREF: _srp_main+8E1j
		test	esi, esi
		jle	short loc_44E617
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_SRP_get_default_gN
		test	eax, eax
		jz	loc_44E9F0

loc_44E617:				; CODE XREF: _srp_main+10B1j
		mov	ecx, [esp+9Ch+var_88]
		test	ecx, ecx
		jnz	loc_44E796
		mov	[esp+9Ch+var_58], 0
		jmp	loc_44DEDE
; ---------------------------------------------------------------------------

loc_44E630:				; CODE XREF: _srp_main+FC0j
					; _srp_main+FFBj
		mov	eax, [esp+9Ch+var_68]
		mov	eax, [eax+10h]

loc_44E637:				; CODE XREF: _srp_main+F95j
		mov	ebp, ds:_bio_err
		mov	ebx, [esp+9Ch+var_44]

loc_44E641:				; CODE XREF: _srp_main+15C0j
		mov	[esp+9Ch+var_5C], 0
		jmp	loc_44E57F
; ---------------------------------------------------------------------------

loc_44E64E:				; CODE XREF: _srp_main+CB5j
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aUserSDoesNot_1 ; "user \"%s\"	does not exist,	operation i"...
		jmp	loc_44E46E
; ---------------------------------------------------------------------------

loc_44E65F:				; CODE XREF: _srp_main+BC0j
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aUserSAlreadyUp ; "user \"%s\"	already	updated, operation "...
		jmp	loc_44E46E
; ---------------------------------------------------------------------------

loc_44E670:				; CODE XREF: _srp_main+404j
		mov	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aTryingToRead_0 ; "Trying to read SRP verifier	file \"%s\""...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		jmp	loc_44D95A
; ---------------------------------------------------------------------------

loc_44E692:				; CODE XREF: _srp_main+BEEj
		xor	ebx, ebx
		mov	[esp+9Ch+var_5C], 0
		jmp	loc_44E14E
; ---------------------------------------------------------------------------

loc_44E6A1:				; CODE XREF: _srp_main+8D5j
		mov	[esp+9Ch+var_98], offset aDatabaseInitia ; "Database initialised\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		jmp	loc_44DE2B
; ---------------------------------------------------------------------------

loc_44E6BB:				; CODE XREF: _srp_main+4FCj
					; _srp_main+D9Ej ...
		mov	[esp+9Ch+lpExistingFileName], edx
		call	_CRYPTO_free
		jmp	loc_44DA52
; ---------------------------------------------------------------------------

loc_44E6C8:				; CODE XREF: _srp_main+990j
		mov	[esp+9Ch+var_80], ebx
		xor	esi, esi
		jmp	loc_44DEEF
; ---------------------------------------------------------------------------

loc_44E6D3:				; CODE XREF: _srp_main+B67j
		mov	byte ptr [eax],	56h
		inc	ebx
		jmp	loc_44E08A
; ---------------------------------------------------------------------------

loc_44E6DC:				; CODE XREF: _srp_main+1433j
		mov	[esp+9Ch+var_98], offset aTryingToUpdate ; "Trying to update srpvfile.\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_94], edi ;	int
		mov	[esp+9Ch+var_98], offset aNew_3	; "new"
		mov	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+lpExistingFileName], eax ; char *
		call	_save_index
		test	eax, eax
		jz	loc_44DAA2
		mov	[esp+9Ch+var_98], offset aTemporarySrpvf ; "Temporary srpvfile created.\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_94], offset aOld ;	"old"
		mov	[esp+9Ch+var_98], offset aNew_3	; "new"
		mov	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+lpExistingFileName], eax ; lpExistingFileName
		call	_rotate_index
		test	eax, eax
		jz	loc_44DAA2
		mov	[esp+9Ch+var_98], offset aSrpvfileUpdate ; "srpvfile updated.\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf

loc_44E75F:				; CODE XREF: _srp_main+B32j
					; _srp_main+13FBj ...
		xor	eax, eax
		mov	edx, [esp+9Ch+var_54]
		test	edx, edx
		setnz	al
		mov	esi, eax
		jmp	loc_44DAA7
; ---------------------------------------------------------------------------

loc_44E771:				; CODE XREF: _srp_main+422j
		xor	ecx, ecx
		jmp	loc_44D78D
; ---------------------------------------------------------------------------

loc_44E778:				; CODE XREF: _srp_main+F86j
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aVerifyingPassw ; "Verifying password for user	\"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		jmp	loc_44E4DC
; ---------------------------------------------------------------------------

loc_44E796:				; CODE XREF: _srp_main+10CDj
		mov	[esp+9Ch+var_98], offset aDatabaseHasNoG ; "Database has no g N	information.\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		cmp	[esp+9Ch+var_88], 1
		mov	[esp+9Ch+var_58], 0
		jnz	loc_44DEC9
		jmp	loc_44DEDE
; ---------------------------------------------------------------------------
		align 10h

loc_44E7D0:				; CODE XREF: _srp_main+5Aj
		xor	edi, edi
		mov	[esp+9Ch+var_5C], 0
		mov	[esp+9Ch+var_78], 0
		mov	[esp+9Ch+var_84], 0
		mov	[esp+9Ch+var_88], 0
		mov	[esp+9Ch+var_64], 0
		mov	[esp+9Ch+var_60], 0
		mov	[esp+9Ch+var_6C], 0
		mov	[esp+9Ch+var_80], 0
		mov	[esp+9Ch+var_74], 0
		mov	[esp+9Ch+var_70], 0
		mov	[esp+9Ch+var_68], 0
		mov	[esp+9Ch+var_7C], 0
		jmp	loc_44D6B5
; ---------------------------------------------------------------------------

loc_44E837:				; CODE XREF: _srp_main+E0Ej
		mov	[esp+9Ch+var_98], offset aMemoryAlloca_5 ; "Memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		jmp	loc_44DA46
; ---------------------------------------------------------------------------

loc_44E851:				; CODE XREF: _srp_main+6A9j
		mov	edi, offset aPassout_8 ; "-passout"
		mov	esi, eax
		mov	ecx, 9
		repe cmpsb
		jnz	short loc_44E8BB
		dec	ebp
		jz	loc_44DB04
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_6C], eax
		add	ebx, 4
		jmp	loc_44D624
; ---------------------------------------------------------------------------

loc_44E877:				; CODE XREF: _srp_main+7CCj
		mov	eax, [esp+9Ch+var_3C]
		test	eax, eax
		jle	loc_44EBBB
		mov	[esp+9Ch+var_80], ecx
		mov	esi, [esp+9Ch+var_84]
		mov	[esp+9Ch+var_90], esi
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aErrorOnLineL_7 ; "error on line %ld of config	file '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_6C], 0
		xor	edi, edi
		mov	ecx, [esp+9Ch+var_80]
		jmp	loc_44D78D
; ---------------------------------------------------------------------------

loc_44E8BB:				; CODE XREF: _srp_main+130Fj
		mov	edi, offset aEngine_31 ; "-engine"
		mov	esi, eax
		mov	ecx, 8
		repe cmpsb
		jnz	loc_44EB15
		dec	ebp
		jz	loc_44DB04
		mov	eax, [ebx+4]
		mov	[esp+9Ch+var_5C], eax
		add	ebx, 4
		jmp	loc_44D624
; ---------------------------------------------------------------------------

loc_44E8E5:				; CODE XREF: _srp_main+D62j
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aCannotCreateSr ; "Cannot create srp verifier for user	\"%"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		inc	[esp+9Ch+var_54]
		jmp	loc_44DAA2
; ---------------------------------------------------------------------------

loc_44E907:				; CODE XREF: _srp_main+B4Aj
		mov	[esp+9Ch+var_94], edi ;	int
		mov	[esp+9Ch+var_98], offset aNew_3	; "new"
		mov	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+lpExistingFileName], eax ; char *
		call	_save_index
		test	eax, eax
		jz	loc_44DAA2
		mov	[esp+9Ch+var_94], offset aOld ;	"old"
		mov	[esp+9Ch+var_98], offset aNew_3	; "new"
		mov	eax, [esp+9Ch+var_78]
		mov	[esp+9Ch+lpExistingFileName], eax ; lpExistingFileName
		call	_rotate_index
		test	eax, eax
		jz	loc_44DAA2
		jmp	loc_44E75F
; ---------------------------------------------------------------------------

loc_44E950:				; CODE XREF: _srp_main+B26j
		mov	[esp+9Ch+var_98], offset aUserProcession ; "User procession done.\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	ecx, [esp+9Ch+var_5C]
		test	ecx, ecx
		jz	loc_44E75F
		xor	ebx, ebx

loc_44E973:				; CODE XREF: _srp_main+1453j
					; _srp_main+146Fj
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_num
		cmp	ebx, eax
		jge	loc_44E6DC
		mov	eax, [edi+4]
		mov	eax, [eax+4]
		mov	[esp+9Ch+var_98], ebx
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_sk_value
		mov	eax, [eax]
		cmp	byte ptr [eax],	76h
		jz	short loc_44E9A5
		inc	ebx
		jmp	short loc_44E973
; ---------------------------------------------------------------------------

loc_44E9A5:				; CODE XREF: _srp_main+1450j
		mov	byte ptr [eax],	56h
		mov	eax, [esp+9Ch+var_88]
		mov	[esp+9Ch+lpExistingFileName], eax
		mov	ecx, ebx
		mov	edx, ds:_bio_err
		mov	eax, edi
		call	_print_user_part_4
		inc	ebx
		jmp	short loc_44E973
; ---------------------------------------------------------------------------

loc_44E9C1:				; CODE XREF: _srp_main+811j
		mov	[esp+9Ch+var_6C], 0
		jmp	loc_44DD88
; ---------------------------------------------------------------------------

loc_44E9CE:				; CODE XREF: _srp_main+C30j
		mov	[esp+9Ch+var_94], esi
		mov	[esp+9Ch+var_98], offset aCannotCreate_0 ; "Cannot create srp verifier for user	\"%"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		inc	[esp+9Ch+var_54]
		jmp	loc_44E5D8
; ---------------------------------------------------------------------------

loc_44E9F0:				; CODE XREF: _srp_main+10C1j
		mov	eax, [esp+9Ch+var_60]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aNoGAndNValueFo ; "No g and N value for index \"%s\"\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		xor	ecx, ecx
		jmp	loc_44D78D
; ---------------------------------------------------------------------------

loc_44EA14:				; CODE XREF: _srp_main+764j
		mov	[esp+9Ch+lpExistingFileName], offset aOpenssl_conf_1 ; "OPENSSL_CONF"
		call	_getenv
		test	eax, eax
		jnz	loc_44EB00
		mov	[esp+9Ch+var_80], eax
		mov	[esp+9Ch+lpExistingFileName], offset aSsleay_conf_1 ; "SSLEAY_CONF"
		call	_getenv
		mov	[esp+9Ch+var_84], eax
		test	eax, eax
		mov	ecx, [esp+9Ch+var_80]
		jnz	loc_44DCBC
		call	_X509_get_default_cert_area
		mov	esi, eax
		mov	[esp+9Ch+lpExistingFileName], eax ; char *
		call	_strlen
		lea	edi, [eax+0Dh]
		mov	[esp+9Ch+var_94], 1BDh
		mov	[esp+9Ch+var_98], offset aSrp_c	; "srp.c"
		mov	[esp+9Ch+lpExistingFileName], edi
		call	_CRYPTO_malloc
		mov	[esp+9Ch+var_84], eax
		test	eax, eax
		jz	short loc_44EAF3
		mov	[esp+9Ch+var_94], edi
		mov	[esp+9Ch+var_98], esi
		mov	esi, [esp+9Ch+var_84]
		mov	[esp+9Ch+lpExistingFileName], esi
		call	_BUF_strlcpy
		mov	[esp+9Ch+var_94], edi
		mov	[esp+9Ch+var_98], offset asc_470D04 ; "/"
		mov	[esp+9Ch+lpExistingFileName], esi
		call	_BUF_strlcat
		mov	[esp+9Ch+var_94], edi
		mov	[esp+9Ch+var_98], offset aOpenssl_cnf_1	; "openssl.cnf"
		mov	[esp+9Ch+lpExistingFileName], esi
		call	_BUF_strlcat
		mov	ecx, esi
		jmp	loc_44DCBC
; ---------------------------------------------------------------------------

loc_44EABD:				; CODE XREF: _srp_main+55Dj
		xor	ecx, ecx
		jmp	loc_44D792
; ---------------------------------------------------------------------------

loc_44EAC4:				; CODE XREF: _srp_main+87Dj
		mov	[esp+9Ch+var_90], offset aSrpvfile_1 ; "srpvfile"
		mov	eax, ds:_section_0
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aVariableLook_0 ; "variable lookup failed for %s::%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		xor	ecx, ecx
		xor	edi, edi
		jmp	loc_44D78D
; ---------------------------------------------------------------------------

loc_44EAF3:				; CODE XREF: _srp_main+1528j
		mov	[esp+9Ch+var_98], offset aOutOfMemory_11 ; "Out	of memory\n"
		jmp	loc_44D774
; ---------------------------------------------------------------------------

loc_44EB00:				; CODE XREF: _srp_main+14D2j
		mov	[esp+9Ch+var_84], eax
		jmp	loc_44DCBA
; ---------------------------------------------------------------------------

loc_44EB09:				; CODE XREF: _srp_main+101Fj
		mov	eax, [esp+9Ch+var_68]
		mov	eax, [eax+10h]
		jmp	loc_44E641
; ---------------------------------------------------------------------------

loc_44EB15:				; CODE XREF: _srp_main+1379j
		cmp	byte ptr [eax],	2Dh
		jz	loc_44DB04
		mov	esi, [esp+9Ch+var_7C]
		mov	edx, [esp+9Ch+var_70]
		add	esi, edx
		mov	eax, [esp+9Ch+var_74]
		add	esi, eax
		add	esi, [esp+9Ch+var_68]
		add	eax, edx
		lea	edi, [eax+edx]
		xor	eax, eax
		jmp	loc_44D688
; ---------------------------------------------------------------------------

loc_44EB3E:				; CODE XREF: _srp_main+803j
		mov	eax, [esp+9Ch+var_88]
		test	eax, eax
		jz	short loc_44EB5B
		mov	[esp+9Ch+var_98], offset aTryingToReadDe ; "trying to read default_srp in \" BASE_S"...
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf

loc_44EB5B:				; CODE XREF: _srp_main+15F4j
		mov	[esp+9Ch+var_94], offset aDefault_srp ;	"default_srp"
		mov	[esp+9Ch+var_98], offset aSrp_0	; "srp"
		mov	eax, ds:_conf_0
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_NCONF_get_string
		mov	ds:_section_0, eax
		test	eax, eax
		jnz	loc_44DD59
		mov	[esp+9Ch+var_90], offset aDefault_srp ;	"default_srp"
		mov	[esp+9Ch+var_94], offset aSrp_0	; "srp"
		mov	[esp+9Ch+var_98], offset aVariableLook_0 ; "variable lookup failed for %s::%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		xor	ecx, ecx
		mov	[esp+9Ch+var_6C], 0
		xor	edi, edi
		jmp	loc_44D78D
; ---------------------------------------------------------------------------

loc_44EBBB:				; CODE XREF: _srp_main+132Dj
		mov	eax, [esp+9Ch+var_84]
		mov	[esp+9Ch+var_94], eax
		mov	[esp+9Ch+var_98], offset aErrorLoadin_10 ; "error loading the config file '%s'\n"
		mov	eax, ds:_bio_err
		mov	[esp+9Ch+lpExistingFileName], eax
		call	_BIO_printf
		mov	[esp+9Ch+var_6C], 0
		xor	edi, edi
		mov	ecx, [esp+9Ch+var_80]
		jmp	loc_44D78D
_srp_main	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_app_stdin	proc near		; DATA XREF: _OPENSSL_Applink+Do
		mov	eax, ds:__imp___iob
		retn
_app_stdin	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_app_stdout	proc near		; DATA XREF: _OPENSSL_Applink+17o
		mov	eax, ds:__imp___iob
		add	eax, 20h
		retn
_app_stdout	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_app_stderr	proc near		; DATA XREF: _OPENSSL_Applink+21o
		mov	eax, ds:__imp___iob
		add	eax, 40h
		retn
_app_stderr	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_app_fileno	proc near		; DATA XREF: _OPENSSL_Applink+ADo
		mov	eax, ds:__imp___fileno
		jmp	eax
_app_fileno	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void __cdecl app_clearerr(FILE *)
_app_clearerr	proc near		; DATA XREF: _OPENSSL_Applink+A3o
		jmp	_clearerr
_app_clearerr	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl app_ferror(FILE *)
_app_ferror	proc near		; DATA XREF: _OPENSSL_Applink+99o
		jmp	_ferror
_app_ferror	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl app_feof(FILE *)
_app_feof	proc near		; DATA XREF: _OPENSSL_Applink+5Do
		jmp	_feof
_app_feof	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl app_fsetmod(FILE *, int)
_app_fsetmod	proc near		; DATA XREF: _OPENSSL_Applink+53o

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, [esp+1Ch+arg_0]
		cmp	byte ptr [esp+1Ch+arg_4], 62h
		jz	short loc_44EC90
		mov	ebx, 4000h

loc_44EC74:				; CODE XREF: _app_fsetmod+35j
		mov	[esp+1Ch+var_1C], eax ;	FILE *
		call	ds:__imp___fileno
		mov	[esp+1Ch+arg_4], ebx
		mov	[esp+1Ch+arg_0], eax
		mov	eax, ds:__imp___setmode
		add	esp, 18h
		pop	ebx
		jmp	eax
; ---------------------------------------------------------------------------

loc_44EC90:				; CODE XREF: _app_fsetmod+Dj
		mov	ebx, 8000h
		jmp	short loc_44EC74
_app_fsetmod	endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry   1. OPENSSL_Applink

; =============== S U B	R O U T	I N E =======================================


		public _OPENSSL_Applink
_OPENSSL_Applink proc near
		mov	eax, _once_3635
		test	eax, eax
		jz	loc_44ED93
		mov	dword_457424, offset _app_stdin
		mov	dword_457428, offset _app_stdout
		mov	dword_45742C, offset _app_stderr
		mov	dword_457430, offset _fprintf
		mov	dword_457434, offset _fgets
		mov	dword_457438, offset _fread
		mov	dword_45743C, offset _fwrite
		mov	dword_457440, offset _app_fsetmod
		mov	dword_457444, offset _app_feof
		mov	dword_457448, offset _fclose
		mov	dword_45744C, offset _fopen
		mov	dword_457450, offset _fseek
		mov	dword_457454, offset _ftell
		mov	dword_457458, offset _fflush
		mov	dword_45745C, offset _app_ferror
		mov	dword_457460, offset _app_clearerr
		mov	dword_457464, offset _app_fileno
		mov	eax, ds:__imp___open
		mov	dword_457468, eax
		mov	eax, ds:__imp___read
		mov	dword_45746C, eax
		mov	eax, ds:__imp___write
		mov	dword_457470, eax
		mov	eax, ds:__imp___lseek
		mov	dword_457474, eax
		mov	eax, ds:__imp___close
		mov	dword_457478, eax
		mov	_once_3635, 0

loc_44ED93:				; CODE XREF: _OPENSSL_Applink+7j
		mov	eax, offset _OPENSSL_ApplinkTable_3636
		retn
_OPENSSL_Applink endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_load_error_strings]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_ctrl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_certificate]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_SSL_CTX]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_get_cert_store]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_ctrl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_session_id_context]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_clear]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_version]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_accept_state]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_pending]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_state]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_accept]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_error]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_session]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_SSL_SESSION]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_peer_certificate]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_shared_ciphers]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_current_cipher]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CIPHER_get_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get0_next_proto_negotiated]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_selected_srtp_profile]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_cache_hit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_export_keying_material]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_read]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_wbio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_write]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_shutdown]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_callback_ctrl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_callback_ctrl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_msg_callback]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_debug]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_rbio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_renegotiate]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_do_handshake]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_verify_result]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_f_ssl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_ciphers]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CIPHER_get_version]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_SESSION_print]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_srp_server_param]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_srp_username]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_has_matching_session_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_servername]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_SSL_CTX]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSLv23_server_method]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_library_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_generate_session_id]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_quiet_shutdown]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_tlsext_use_srtp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_load_verify_locations]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_default_verify_paths]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set1_param]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_next_protos_advertised_cb]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_psk_server_callback]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_use_psk_identity_hint]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_cipher_list]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_verify]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_session_id_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_cookie_generate_cb]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_cookie_verify_cb]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_info_callback]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_tmp_rsa_callback]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_srp_cb_arg]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_srp_username_callback]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_load_client_CA_file]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_client_CA_list]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TLSv1_server_method]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSLv3_server_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DTLSv1_server_method]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TLSv1_1_server_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TLSv1_2_server_method]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_srp_N]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_srp_g]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_select_next_proto]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_current_compression]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_current_expansion]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_COMP_get_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_peer_cert_chain]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_client_CA_list]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_servername_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSLv23_client_method]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_client_cert_engine]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_psk_client_callback]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_next_proto_select_cb]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_srp_username]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_srp_client_pwd_callback]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_srp_strength]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_set_srp_verify_param_callback]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_SSL_SESSION]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_session]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_SESSION_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_set_connect_state]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_fd]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_shutdown]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TLSv1_client_method]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _DTLSv1_client_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TLSv1_1_client_method]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSLv3_client_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TLSv1_2_client_method]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_connect]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_use_certificate_file]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_use_PrivateKey_file]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_check_private_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_use_certificate]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CTX_use_PrivateKey]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_state_string_long]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_alert_desc_string_long]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_alert_type_string_long]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_SESSION_get0_peer]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_SESSION_set1_id_context]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_SSL_SESSION]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_SESSION_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_SSL_SESSION]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_get_cipher_list]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CIPHER_description]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSL_CIPHER_get_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_new_ssl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lh_strhash]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _lh_retrieve]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_get_digestbyname]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_get_cipherbyname]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_new_fp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_MD_do_all_sorted]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_printf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_CIPHER_do_all_sorted]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_free_all]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_asn1_get_count]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_asn1_get0]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_asn1_get0_info]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_nid2ln]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_MD_type]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_nid2sn]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_CIPHER_nid]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_dbg_get_options]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_dbg_set_options]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_dbg_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_dbg_realloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_dbg_malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_set_mem_debug_functions]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_set_mem_debug_options]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_mem_ctrl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_set_locking_callback]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_set_mem_functions]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_load_crypto_strings]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OPENSSL_add_all_algorithms_noconf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_load_builtin_engines]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NCONF_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _NCONF_load]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_peek_last_error]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_print_errors]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NCONF_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_clear_error]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _lh_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lh_insert]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lh_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CONF_modules_unload]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_cleanup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_cleanup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_cleanup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_cleanup_all_ex_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_remove_thread_state]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RAND_cleanup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_free_strings]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _COMP_zlib_cleanup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_mem_leaks]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_s_file]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_ctrl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_get_error]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_get_current_cert]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_subject_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_print_ex_fp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_verify_cert_error_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_get_error_depth]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_get0_parent_ctx]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_set_flags]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_trusted_stack]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_set0_crls]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_verify_cert]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_set_verify_cb]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_PURPOSE_get0]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_PURPOSE_get0_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_PURPOSE_get0_sname]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_PURPOSE_get_count]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_VERIFY_PARAM_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _sk_pop_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_set1_param]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_LOOKUP_file]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_add_lookup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_LOOKUP_ctrl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_LOOKUP_hash_dir]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BUF_MEM_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_TYPE_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _sk_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _sk_new_null]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_create_objects]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_new_file]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BUF_MEM_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BUF_MEM_grow]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_generate_nconf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_ASN1_TYPE]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _sk_num]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _sk_value]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_ASN1_TYPE]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_TYPE_get]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _sk_push]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_write]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NCONF_get_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_parse_dump]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_tag2str]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_read]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_f_base64]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_push]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_CTX_get_app_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_CTX_get_keygen_info]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_asn1_find_str]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_finish]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_Parameters]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_X509]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_pubkey]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_base_id]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_asn1_find]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_puts]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BUF_strdup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_CTX_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_bits]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_CTX_new_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_keygen_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_CTX_ctrl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_CTX_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_set_subject_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_MD_CTX_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DigestSignInit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_sign_ctx]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_MD_CTX_cleanup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_sign_ctx]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_des_ede3_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509V3_set_ctx]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509V3_set_nconf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509V3_EXT_add_nconf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_STRING_set_default_mask_asc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NCONF_get_section]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_set_version]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509V3_EXT_REQ_add_nconf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_print_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_X509_REQ_NEW]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_by_id]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_INTEGER_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_set_version]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_X509_REQ_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_X509]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_X509_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_get_pubkey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_txt2nid]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_snprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NCONF_get_number_e]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BUF_strlcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BUF_strlcat]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_add_entry_by_txt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_add_entry_by_NID]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_entry_count]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_add1_attr_by_NID]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_set_pubkey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_add1_attr_by_txt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_X509_REQ]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_print_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_PUBKEY]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_print]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_X509_REQ]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_X509_REQ_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_set_serialNumber]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_set_issuer_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_gmtime_adj]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_time_adj_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_set_subject_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_set_pubkey]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_serialNumber]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_CTX_set_cb]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_CTX_set_app_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_keygen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_PrivateKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_peek_error]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _s2i_ASN1_INTEGER]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_sign_ctx]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_MD_flags]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DigestVerifyFinal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DigestSignFinal]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_gets]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OPENSSL_cleanse]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_f_md]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_debug_callback]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_set_callback]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_set_callback_arg]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_new_mac_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DigestVerifyInit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_get0_asn1]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_MD_CTX_set_flags]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_MD_CTX_md]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_md5]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DH_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_DHparams]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_DHparams]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _DH_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_d2i_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _DHparams_print]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DH_check]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BN_num_bits]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_bn2bin]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_DHparams]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_DHparams]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_i2d_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_generate_parameters_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _DH_generate_parameters_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_dup_DH]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_DSAparams]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_DSAparams]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_CIPHER_flags]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_NAME_do_all_sorted]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_BytesToKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_CIPHER_iv_length]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_CIPHER_key_length]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_f_cipher]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_CIPHER_CTX_set_flags]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_CipherInit_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_CIPHER_CTX_set_padding]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_number_read]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_number_written]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_read_pw_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_set_flags]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RAND_pseudo_bytes]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DigestInit_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DigestUpdate]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DigestFinal_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DES_crypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_error_string_n]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_get_string_table]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lh_node_stats_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _lh_stats_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lh_node_usage_stats_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_GENERALIZEDTIME_set_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_txt2obj]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_OBJECT_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_UTCTIME_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_oneline]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_INTEGER_to_BN]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_bn2hex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BN_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TXT_DB_get_by_index]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TXT_DB_insert]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2a_ASN1_OBJECT]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_UTCTIME_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_get_entry]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_ENTRY_get_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_ENTRY_get_object]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_obj2nid]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_UNIVERSALSTRING_to_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_PRINTABLE_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_dup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_nid2obj]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_get_index_by_OBJ]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_STRING_cmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_add_entry]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_ENTRY_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_get_index_by_NID]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_delete_entry]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BN_to_ASN1_INTEGER]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_TIME_set_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_INTEGER_set]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_EXTENSION_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_INTEGER_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_TIME_print]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_missing_parameters]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_copy_parameters]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_print]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_check_private_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_UTCTIME_set_string]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_GENERALIZEDTIME_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_GENERALIZEDTIME_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REVOKED_set_revocationDate]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_ENUMERATED_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_ENUMERATED_set]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_ENUMERATED_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_TIME_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REVOKED_add1_ext_i2d]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_default_cert_area]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_check_private_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TXT_DB_write]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_get_default_digest_nid]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CONF_load]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CONF_get_section]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_SPKI_get_pubkey]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_SPKI_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CONF_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_SPKI_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_add_word]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_print]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_verify]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_to_X509_REQ]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_set_issuer_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_TIME_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_set_lastUpdate]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_set_nextUpdate]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REVOKED_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_hex2bn]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REVOKED_set_serialNumber]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_add0_revoked]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_sort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509V3_EXT_CRL_add_nconf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_add1_ext_i2d]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_set_version]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_X509_CRL]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_SPKI_b64_decode]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_PKCS7_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_PKCS7]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_print]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_print_ctx]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_PKCS7]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_PKCS7_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_X509_CRL]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_SIGNED_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_X509_CRL_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_X509_INFO_read_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _sk_shift]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_INFO_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_sha1]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_cleanup]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_get_by_subject]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_OBJECT_free_contents]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_X509_CRL_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_digest]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_hash_old]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_hash]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_CRL_get_ext_d2i]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2a_ASN1_INTEGER]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_get1_RSA]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_print]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_check_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_reason_error_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_get_error]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_RSAPublicKey_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_RSA_NET]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_RSA_PUBKEY_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_RSAPrivateKey_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_set1_RSA]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2b_PublicKey_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_RSAPublicKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_RSA_PUBKEY]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_RSAPrivateKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2b_PVK_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2b_PrivateKey_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_size]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_private_decrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_dump]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_private_encrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_public_decrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_public_encrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_get1_DSA]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_print]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_DSA_PUBKEY]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_DSA_PUBKEY_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_set1_DSA]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_DSAPrivateKey_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_DSAPrivateKey]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _DSAparams_dup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_generate_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _DSAparams_print]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_DSAparams]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_DSAparams]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_EC_PUBKEY]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_get0_group]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_EC_PUBKEY]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_EC_PUBKEY_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_ECPrivateKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_print]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_set_asn1_flag]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_set_conv_form]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_ECPrivateKey_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_EC_PUBKEY_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_ECPKParameters]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_ECPKParameters]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_ECPrivateKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_ECPrivateKey_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_new_by_curve_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_set_asn1_flag]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_set_point_conversion_form]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_get_builtin_curves]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_sn2nid]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ECPKParameters_print]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_set_seed]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_method_of]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_METHOD_get_field_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_check]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_ECPKParameters]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_ECPKParameters]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_set_group]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_generate_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_get_curve_GFp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_get0_generator]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_get_point_conversion_form]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_POINT_point2bn]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_get_order]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_get_cofactor]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_set_default_paths]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_alias_set1]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_trust_clear]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_reject_clear]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_add1_trust_object]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_add1_reject_object]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OBJ_create]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_cmp_time]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_ocspid_print]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_issuer_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_X509]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_X509_NAME]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_X509_PUBKEY]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_PURPOSE_get_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_check_purpose]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_issuer_name_hash_old]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_issuer_name_hash]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_subject_name_hash_old]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_subject_name_hash]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_X509_AUX]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_X509_it]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_item_i2d_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_digest]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_set_cert]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_set_flags]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_ext_count]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_delete_ext]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_save_parameters]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_sign]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_alias_get0]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get1_email]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_email_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get1_ocsp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_new_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_set_word]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_idea_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_des_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_seed_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_aes_128_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_generate_key_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_aes_192_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_aes_256_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_camellia_128_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_camellia_192_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RAND_status]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_camellia_256_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_paramgen_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_pkey_asn1_meth_str]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_paramgen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_Parameters]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_print_params]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_PrivateKey_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_print_private]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_parse_url]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_CERTID_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_REQUEST_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_RESPONSE_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_REQUEST_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_cert_to_id]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_request_add0_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_REQUEST_add_ext]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_OCSP_RESPONSE]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_RESPONSE_print]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_new_socket]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SRP_user_pwd_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SRP_VBASE_get1_by_user]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_socket_ioctl]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_f_nbio_test]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_new_dgram]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_sock_should_retry]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_f_buffer]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_int_ctrl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_test_flags]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_get_retry_reason]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BN_bin2bn]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_new_by_curve_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SRP_VBASE_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SRP_VBASE_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_s_null]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_OCSP_RESPONSE]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_dump_indent]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SRP_check_known_gN_param]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BN_CTX_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_CTX_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BN_is_prime_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_rshift1]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BN_mod_exp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_cmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_pop]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SHA1]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_RSAPrivateKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DES_set_key_unchecked]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _AES_set_encrypt_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _Camellia_set_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _idea_set_encrypt_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SEED_set_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RC4_set_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RC2_set_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BF_set_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CAST_set_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_mdc2]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_Digest]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_md4]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SHA256]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SHA512]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _WHIRLPOOL]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_ripemd160]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RC4]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _DES_ncbc_encrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DES_ede3_cbc_encrypt]
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public _AES_cbc_encrypt
_AES_cbc_encrypt proc near		; CODE XREF: _speed_main+2175p
					; _speed_main+23A5p ...
		jmp	ds:__IAT_start__
_AES_cbc_encrypt endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _AES_ige_encrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _Camellia_cbc_encrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _idea_cbc_encrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SEED_cbc_encrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RC2_cbc_encrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BF_cbc_encrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CAST_cbc_encrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_CIPHER_CTX_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DecryptInit_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DecryptUpdate]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DecryptFinal_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_CIPHER_CTX_cleanup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_sign]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RAND_seed]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_precompute_mult]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ECDSA_sign]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ECDSA_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_sign]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_EncryptUpdate]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_EncryptFinal_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_EncryptInit_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SSLeay_version]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_options]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RC4_options]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DES_options]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _AES_options]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _idea_options]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BF_options]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _AES_encrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_gcm128_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_gcm128_setiv]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_gcm128_aad]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_gcm128_release]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _HMAC_CTX_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _HMAC_Init_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _HMAC_Update]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _HMAC_Final]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _HMAC_CTX_cleanup]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EC_GROUP_get_degree]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EC_KEY_get0_public_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ECDH_compute_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_PKCS1_SSLeay]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_set_default_method]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_s_connect]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_OpenSSL]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_method_get_closer]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_get_input_flags]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_get0_user_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_get_string_type]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_method_get_writer]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_method_get_reader]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_set_result]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_method_get_opener]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_new_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_construct_prompt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_ctrl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_add_input_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_process]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_add_verify_string]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BUF_MEM_grow_clean]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_RSA_NET]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509V3_parse_list]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509V3_conf_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_PKCS12_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_verify_mac]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_parse]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CRYPTO_realloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_create_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_method_set_opener]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_method_set_reader]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_method_set_writer]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _UI_method_set_closer]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _UI_destroy_method]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_X509_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_item_d2i_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_X509_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_X509_AUX]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_load_private_key]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_PrivateKey_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_PrivateKey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _b2i_PVK_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _b2i_PrivateKey_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_load_public_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _b2i_PublicKey_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_PUBKEY_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_RSAPublicKey_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_RSAPublicKey]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_PUBKEY]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_REQ_get_extensions]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_EXTENSION_get_object]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_ext_by_OBJ]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_ext]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_add_ext]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_print_ex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_ctrl_cmd]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_set_default]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_id]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_ctrl]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_ctrl_cmd_string]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_register_all_complete]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OPENSSL_load_builtin_modules]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CONF_modules_load]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _a2i_ASN1_INTEGER]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BN_pseudo_rand]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TXT_DB_read]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TXT_DB_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TXT_DB_create_index]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_PURPOSE_get_by_sname]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_VERIFY_PARAM_add0_policy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_VERIFY_PARAM_set_depth]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_VERIFY_PARAM_set_time]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_VERIFY_PARAM_set_purpose]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_VERIFY_PARAM_set_flags]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_VERIFY_PARAM_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_s_mem]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_CTX_ctrl_str]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_get0_policy_tree]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_get_explicit_policy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_policy_tree_get0_policies]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_POLICY_NODE_print]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_policy_tree_get0_user_policies]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_get_callback_arg]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RAND_bytes]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OpenSSLDie]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _HMAC]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RAND_screen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RAND_egd]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RAND_load_file]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RAND_file_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _RAND_write_file]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SSLeay]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_NETSCAPE_CERT_SEQUENCE]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_CERT_SEQUENCE_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_CERT_SEQUENCE_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_NETSCAPE_CERT_SEQUENCE]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_PBEPARAM]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_INTEGER_get]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PBEPARAM_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OPENSSL_uni2asc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_get_attr_gen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_certbag2x509]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKCS82PKEY]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_decrypt_skey]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS8_PRIV_KEY_INFO_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_unpack_authsafes]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_unpack_p7encdata]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_SAFEBAG_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_unpack_p7data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_add1_attr_by_NID]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_create]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS12_set_mac]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_PKCS12_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_load_locations]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_keyid_set1]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _sk_delete]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509_STORE_CTX_get1_chain]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_SIG_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_PKCS8_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS8_decrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY2PKCS8_broken]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS8_encrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_PKCS8_PRIV_KEY_INFO_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_PKCS8_PRIV_KEY_INFO]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_PKCS8]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_PKCS8_PRIV_KEY_INFO_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_PKCS8_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_PKCS8]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_PKCS8_PRIV_KEY_INFO]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_PUBKEY_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_print_public]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_derive_set_peer]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_verify_recover]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_verify_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_derive]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_encrypt_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_sign_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_decrypt_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_verify_recover_init]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_derive_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_sign]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_encrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_decrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_SPKI_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_STRING_set]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_SPKI_set_pubkey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_SPKI_sign]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_SPKI_b64_encode]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _NCONF_load_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _NETSCAPE_SPKI_print]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_sign_add_signer]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_rc2_40_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_rc2_cbc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_rc2_64_cbc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_encrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_decrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_sign]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SMIME_read_PKCS7]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SMIME_write_PKCS7]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_PKCS7_bio_stream]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_PKCS7_stream]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_final]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_get0_signers]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _a2i_GENERAL_NAME]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _GENERAL_NAMES_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _GENERAL_NAMES_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _GENERAL_NAME_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _GENERAL_NAME_print]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_ReceiptRequest_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_ContentInfo_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_read_bio_CMS]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_add1_signer]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_add1_ReceiptRequest]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_final]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SMIME_read_CMS]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_CMS_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_get1_certs]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_ContentInfo_print_ctx]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_digest_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_uncompress]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_verify_receipt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_decrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_decrypt_set1_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_decrypt_set1_pkey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_decrypt_set1_password]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_sign]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_set1_eContentType]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_ReceiptRequest_create0]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_get0_SignerInfos]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_sign_receipt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_EncryptedData_encrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_CMS_bio_stream]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PEM_write_bio_CMS_stream]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SMIME_write_CMS]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_verify]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_get0_signers]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_EncryptedData_decrypt]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_get1_ReceiptRequest]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_ReceiptRequest_get0_values]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_STRING_length]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_STRING_data]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_encrypt]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_add0_recipient_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_add0_recipient_password]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_digest_create]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_data_create]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _CMS_compress]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _string_to_hex]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_name]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_RSA]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_DSA]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_DH]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_RAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_ciphers]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_init]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_digests]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_pkey_meths]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_first]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ENGINE_get_next]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ERR_print_errors_fp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_sendreq_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_REQ_CTX_add1_header]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_REQ_CTX_set1_req]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_sendreq_nbio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_REQ_CTX_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_OCSP_REQUEST]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_new_connect]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_BASICRESP_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_request_sign]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_REQUEST_print]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_OCSP_REQUEST]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_request_onereq_count]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_BASICRESP_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_id_get0_info]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_request_onereq_get0]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_onereq_get0_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_id_issuer_cmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_basic_add1_status]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_copy_nonce]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_basic_sign]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_response_create]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_response_status]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_SINGLERESP_add1_ext_i2d]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_response_status_str]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_request_add1_nonce]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _X509V3_add_value]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_RESPONSE_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BIO_new_accept]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_response_get1_basic]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_check_nonce]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_basic_verify]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_resp_find_status]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_check_validity]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_cert_status_str]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_GENERALIZEDTIME_print]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_crl_reason_str]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get0_pubkey_bitstr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _OCSP_cert_id_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_generate_prime_ex]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _BN_bn2dec]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _BN_dec2bn]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_MD_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DigestInit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_DigestFinal]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_CTX_set_status_info]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_CTX_add_failure_info]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_VERIFY_CTX_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_load_certs]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_REQ_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_verify_token]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_VERIFY_CTX_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _PKCS7_to_TS_TST_INFO]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_STATUS_INFO_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_TST_INFO_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_STATUS_INFO_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_get_tst_info]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_TST_INFO_print_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_get_tsa_section]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_CTX_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_serial]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_CTX_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_TS_REQ_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_REQ_print_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_REQ_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_REQ_set_version]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_MSG_IMPRINT_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_ALGOR_free]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_TS_RESP_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_get_token]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_TS_REQ_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_verify_response]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_print_bio]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _i2d_TS_RESP_bio]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_MSG_IMPRINT_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_ALGOR_new]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ASN1_TYPE_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_MSG_IMPRINT_set_algo]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_crypto_device]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_signer_cert]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_certs]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_signer_key]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_def_policy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_policies]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_digests]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_accuracy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_clock_precision_digits]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_ordering]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_tsa_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_CONF_set_ess_cert_id_chain]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_create_response]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_set_status_info]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_RESP_set_tst_info]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_REQ_to_TS_VERIFY_CTX]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_MSG_IMPRINT_set_msg]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_REQ_set_msg_imprint]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_REQ_set_policy_id]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _TS_REQ_set_cert_req]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _TS_REQ_set_nonce]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _SRP_create_verifier]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _SRP_get_default_gN]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ___WSAFDIsSet@8]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: static

; BOOL __stdcall __dyn_tls_dtor(HANDLE hDllHandle, DWORD dwReason, LPVOID lpreserved)
		public ___dyn_tls_dtor@12
___dyn_tls_dtor@12 proc	near		; DATA XREF: .CRT:___xl_do

var_1C		= dword	ptr -1Ch
reason		= dword	ptr -18h
reserved	= dword	ptr -14h
hDllHandle	= dword	ptr  4
dwReason	= dword	ptr  8
lpreserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+dwReason]
		test	eax, eax
		jz	short loc_450DB0
		cmp	eax, 3
		jz	short loc_450DB0
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_450DB0:				; CODE XREF: ___dyn_tls_dtor@12+9j
					; ___dyn_tls_dtor@12+Ej
		mov	edx, [esp+1Ch+lpreserved]
		mov	[esp+1Ch+reason], eax ;	reason
		mov	eax, [esp+1Ch+hDllHandle]
		mov	[esp+1Ch+reserved], edx	; reserved
		mov	[esp+1Ch+var_1C], eax ;	hDllHandle
		call	___mingw_TLScallback
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
___dyn_tls_dtor@12 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall __dyn_tls_init(HANDLE hDllHandle, DWORD dwReason, LPVOID lpreserved)
		public ___dyn_tls_init@12
___dyn_tls_init@12 proc	near		; CODE XREF: ___tmainCRTStartup+101p
					; DATA XREF: .rdata:___dyn_tls_init_callbacko ...

var_1C		= dword	ptr -1Ch
reason		= dword	ptr -18h
reserved	= dword	ptr -14h
hDllHandle	= dword	ptr  4
dwReason	= dword	ptr  8
lpreserved	= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	__CRT_MT, 2
		mov	eax, [esp+1Ch+dwReason]
		jz	short loc_450DFB
		mov	__CRT_MT, 2

loc_450DFB:				; CODE XREF: ___dyn_tls_init@12+Fj
		cmp	eax, 2
		jz	short loc_450E11
		cmp	eax, 1
		jz	short loc_450E40

loc_450E05:				; CODE XREF: ___dyn_tls_init@12+3Cj
					; ___dyn_tls_init@12+7Cj
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_450E11:				; CODE XREF: ___dyn_tls_init@12+1Ej
		mov	ebx, offset ___xd_z
ps = ebx				; uintptr_t
		cmp	ps, offset ___xd_z
		jz	short loc_450E05
		xchg	ax, ax

loc_450E20:				; CODE XREF: ___dyn_tls_init@12+51j
		mov	eax, [ps]
		test	eax, eax
		jz	short loc_450E28
		call	eax

loc_450E28:				; CODE XREF: ___dyn_tls_init@12+44j
		add	ps, 4
		cmp	ps, offset ___xd_z
		jnz	short loc_450E20
		add	esp, 18h
		mov	eax, 1
		pop	ps
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_450E40:				; CODE XREF: ___dyn_tls_init@12+23j
		mov	eax, [esp+1Ch+lpreserved]
		mov	[esp+1Ch+reason], 1 ; reason
		mov	[esp+1Ch+reserved], eax	; reserved
		mov	eax, [esp+1Ch+hDllHandle]
		mov	[esp+1Ch+var_1C], eax ;	hDllHandle
		call	___mingw_TLScallback
		jmp	short loc_450E05
___dyn_tls_init@12 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl __tlregdtor(_PVFV	func)
		public ___tlregdtor
___tlregdtor	proc near

func		= dword	ptr  4

		xor	eax, eax
		retn
___tlregdtor	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: static

; int my_lconv_init()
_my_lconv_init	proc near		; DATA XREF: .CRT:___mingw_pinito
		mov	eax, ds:__imp____lconv_init
		jmp	eax
_my_lconv_init	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void *__cdecl	_decode_pointer(void *codedptr)
		public __decode_pointer
__decode_pointer proc near		; CODE XREF: _mingw_onexit+Cp
					; _mingw_onexit+32p ...

codedptr	= dword	ptr  4

		mov	eax, [esp+codedptr]
		retn
__decode_pointer endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void *__cdecl	_encode_pointer(void *ptr)
		public __encode_pointer
__encode_pointer proc near		; CODE XREF: _pre_c_init+59p
					; _mingw_onexit+71p ...

ptr		= dword	ptr  4

		mov	eax, [esp+ptr]
		retn
__encode_pointer endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; _onexit_t __cdecl mingw_onexit(_onexit_t func)
		public _mingw_onexit
_mingw_onexit	proc near		; CODE XREF: _atexit+Ap

codedptr	= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
onexitbegin	= dword	ptr -14h
onexitend	= dword	ptr -10h
func		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:___onexitbegin
		mov	[esp+2Ch+codedptr], eax	; codedptr
		call	__decode_pointer
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+onexitbegin], eax
		jz	loc_450F40
		mov	[esp+2Ch+codedptr], 8
		call	__lock
		mov	eax, ds:___onexitbegin
		mov	[esp+2Ch+codedptr], eax	; codedptr
		call	__decode_pointer
		mov	[esp+2Ch+onexitbegin], eax
		mov	eax, ds:___onexitend
		mov	[esp+2Ch+codedptr], eax	; codedptr
		call	__decode_pointer
		mov	[esp+2Ch+onexitend], eax
		lea	eax, [esp+2Ch+onexitend]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+onexitbegin]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+func]
		mov	[esp+2Ch+codedptr], eax
		call	___dllonexit
		mov	ebx, eax
retval = eax				; _onexit_t
		mov	retval,	[esp+2Ch+onexitbegin]
retval = ebx				; _onexit_t
		mov	[esp+2Ch+codedptr], eax	; ptr
		call	__encode_pointer
		mov	ds:___onexitbegin, eax
		mov	eax, [esp+2Ch+onexitend]
		mov	[esp+2Ch+codedptr], eax	; ptr
		call	__encode_pointer
		mov	[esp+2Ch+codedptr], 8
		mov	ds:___onexitend, eax
		call	__unlock
		add	esp, 28h
		mov	eax, retval
		pop	retval
retval = eax				; _onexit_t
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_450F40:				; CODE XREF: _mingw_onexit+18j
		mov	eax, [esp+2Ch+func]
		mov	[esp+2Ch+codedptr], eax	; _onexit_t
		call	ds:__imp___onexit
		add	esp, 28h
		pop	ebx
		retn
_mingw_onexit	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl atexit(_PVFV func)
		public _atexit
_atexit		proc near		; CODE XREF: ___do_global_ctors+29p
					; _register_frame_ctor+12p

var_1C		= dword	ptr -1Ch
func		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+func]
		mov	[esp+1Ch+var_1C], eax ;	func
		call	_mingw_onexit
		test	eax, eax
		setz	al
		add	esp, 1Ch
		movzx	eax, al
		neg	eax
		retn
_atexit		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __stdcall	_gnu_exception_handler(EXCEPTION_POINTERS *exception_data)
		public __gnu_exception_handler@4
__gnu_exception_handler@4 proc near	; DATA XREF: ___tmainCRTStartup+10Bo

exception_data	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+exception_data]
		mov	eax, [ebx]
		mov	eax, [eax]
		cmp	eax, 0C0000091h
		ja	short loc_450FD8
		cmp	eax, 0C000008Dh
		jnb	loc_451040
		cmp	eax, 0C0000005h
		jnz	loc_451047
		mov	dword ptr [esp+4], 0 ; void (__cdecl *)(int)
		mov	dword ptr [esp], 0Bh ; int
		call	_signal
old_handler = eax			; void (*)(int)
		cmp	old_handler, 1
		jz	loc_451076
		test	old_handler, old_handler
		jz	short loc_450FED
		mov	dword ptr [esp], 0Bh
		call	old_handler
		jmp	short loc_45102D
; ---------------------------------------------------------------------------

loc_450FD8:				; CODE XREF: __gnu_exception_handler@4+14j
		cmp	eax, 0C0000094h
		jz	short loc_451001
		cmp	eax, 0C0000096h
		jz	short loc_45104E
		cmp	eax, 0C0000093h
		jz	short loc_451040

loc_450FED:				; CODE XREF: __gnu_exception_handler@4+4Bj
					; __gnu_exception_handler@4+A2j ...
		mov	eax, ds:___mingw_oldexcpt_handler
		test	eax, eax
		jz	short loc_451032
		mov	[ebp+exception_data], ebx
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------

loc_451001:				; CODE XREF: __gnu_exception_handler@4+5Dj
		xor	esi, esi

loc_451003:				; CODE XREF: __gnu_exception_handler@4+C5j
reset_fpu = esi				; int ;	void (__cdecl *)(int)
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], 8 ; int
		call	_signal
old_handler = eax			; void (*)(int)
		cmp	old_handler, 1
		jz	loc_4510A6
		test	old_handler, old_handler
		jz	short loc_450FED
		mov	dword ptr [esp], 8
		call	old_handler

loc_45102D:				; CODE XREF: __gnu_exception_handler@4+56j
					; __gnu_exception_handler@4+F4j ...
		mov	eax, 0FFFFFFFFh

loc_451032:				; CODE XREF: __gnu_exception_handler@4+74j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_451040:				; CODE XREF: __gnu_exception_handler@4+1Bj
					; __gnu_exception_handler@4+6Bj
		mov	esi, 1
		jmp	short loc_451003
; ---------------------------------------------------------------------------

loc_451047:				; CODE XREF: __gnu_exception_handler@4+26j
		cmp	eax, 0C000001Dh
		jnz	short loc_450FED

loc_45104E:				; CODE XREF: __gnu_exception_handler@4+64j
		mov	dword ptr [esp+4], 0 ; void (__cdecl *)(int)
		mov	dword ptr [esp], 4 ; int
		call	_signal
old_handler = eax			; void (*)(int)
		cmp	old_handler, 1
		jz	short loc_451090
		test	old_handler, old_handler
		jz	short loc_450FED
		mov	dword ptr [esp], 4
		call	old_handler
		jmp	short loc_45102D
; ---------------------------------------------------------------------------

loc_451076:				; CODE XREF: __gnu_exception_handler@4+43j
old_handler = eax			; void (*)(int)	; void (__cdecl	*)(int)
		mov	dword ptr [esp+4], 1
		mov	dword ptr [esp], 0Bh ; int
		call	_signal
		jmp	short loc_45102D
; ---------------------------------------------------------------------------
old_handler = eax			; void (*)(int)
		align 10h

loc_451090:				; CODE XREF: __gnu_exception_handler@4+E5j
		mov	dword ptr [esp+4], 1 ; void (__cdecl *)(int)
		mov	dword ptr [esp], 4 ; int
		call	_signal
		jmp	short loc_45102D
; ---------------------------------------------------------------------------

loc_4510A6:				; CODE XREF: __gnu_exception_handler@4+9Aj
old_handler = eax			; void (*)(int)	; void (__cdecl	*)(int)
reset_fpu = esi				; int
		mov	dword ptr [esp+4], 1
		mov	dword ptr [esp], 8 ; int
		call	_signal
		test	reset_fpu, reset_fpu
		jz	loc_45102D
		call	_fpreset
		jmp	loc_45102D
__gnu_exception_handler@4 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int _setargv()
		public __setargv
__setargv	proc near		; CODE XREF: _pre_c_init+75p
		xor	eax, eax
		retn
__setargv	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void __cdecl __mingw_raise_matherr(int typ, const char *name,	double a1, double a2, double rslt)
		public ___mingw_raise_matherr
___mingw_raise_matherr proc near

var_3C		= dword	ptr -3Ch
ex		= _exception ptr -2Ch
typ		= dword	ptr  4
name		= dword	ptr  8
a1		= qword	ptr  0Ch
a2		= qword	ptr  14h
rslt		= qword	ptr  1Ch

		sub	esp, 3Ch
		mov	eax, ds:_stUserMathErr
		fld	[esp+3Ch+a1]
		fld	[esp+3Ch+a2]
		fld	[esp+3Ch+rslt]
		test	eax, eax
		jz	short loc_451121
		fxch	st(2)
		mov	edx, [esp+3Ch+typ]
		fstp	[esp+3Ch+ex.arg1]
		fstp	[esp+3Ch+ex.arg2]
		fstp	[esp+3Ch+ex.retval]
		mov	[esp+3Ch+ex.type], edx
		mov	edx, [esp+3Ch+name]
		mov	[esp+3Ch+ex.name], edx
		lea	edx, [esp+3Ch+ex]
		mov	[esp+3Ch+var_3C], edx ;	_exception *
		call	eax ; _stUserMathErr
		jmp	short loc_451127
; ---------------------------------------------------------------------------

loc_451121:				; CODE XREF: ___mingw_raise_matherr+16j
		fstp	st
		fstp	st
		fstp	st

loc_451127:				; CODE XREF: ___mingw_raise_matherr+3Fj
		add	esp, 3Ch
		retn
___mingw_raise_matherr endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void __cdecl __mingw_setusermatherr(int (*f)(_exception *))
		public ___mingw_setusermatherr
___mingw_setusermatherr	proc near	; CODE XREF: _pre_c_init+F7p

f		= dword	ptr  4

		mov	eax, [esp+f]
		mov	ds:_stUserMathErr, eax
		jmp	___setusermatherr
___mingw_setusermatherr	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl _matherr(_exception *pexcept)
		public __matherr
__matherr	proc near		; DATA XREF: _pre_c_init:loc_401100o

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= qword	ptr -2Ch
var_24		= qword	ptr -24h
var_1C		= qword	ptr -1Ch
pexcept		= dword	ptr  4

		sub	esp, 3Ch
		mov	eax, [esp+3Ch+pexcept]
		mov	edx, [eax]
		lea	ecx, [edx-1]
		mov	edx, offset aUnknownError ; "Unknown error"
		cmp	ecx, 5
		ja	short loc_45115D
		mov	edx, ds:_CSWTCH_5[ecx*4]

loc_45115D:				; CODE XREF: __matherr+14j
type = edx				; const	char *
		fld	qword ptr [eax+18h]
		fld	qword ptr [eax+10h]
		fld	qword ptr [eax+8]
		fxch	st(2)
		mov	eax, [eax+4]
		fstp	[esp+3Ch+var_1C]
		fstp	[esp+3Ch+var_24]
		fstp	[esp+3Ch+var_2C]
		mov	[esp+3Ch+var_34], type
		mov	[esp+3Ch+var_30], eax
		mov	eax, ds:__imp___iob
		mov	[esp+3Ch+var_38], offset a_matherrSInSGG ; "_matherr():	%s in %s(%g, %g)  (retval=%"...
		add	eax, 40h
		mov	[esp+3Ch+var_3C], eax ;	FILE *
		call	_fprintf
		xor	eax, eax
		add	esp, 3Ch
		retn
__matherr	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn static

; void __report_error(const char *msg, ...)
___report_error	proc near		; CODE XREF: ___report_error+244p
					; ___report_error+272p	...

lpAddress	= dword	ptr -78h
var_74		= dword	ptr -74h
flNewProtect	= dword	ptr -70h
p		= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
msg		= dword	ptr  4
arg_4		= byte ptr  8

argp = ebx				; va_list
		push	argp
		sub	esp, 18h
		mov	eax, ds:__imp___iob
		mov	[esp+1Ch+var_14], 1Bh ;	size_t
		lea	argp, [esp+1Ch+arg_4]
		mov	[esp+1Ch+var_18], 1 ; size_t
		mov	[esp+1Ch+var_1C], offset aMingwW64Runtim ; "Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+var_10], eax ;	FILE *
		call	_fwrite
		mov	eax, [esp+1Ch+msg]
		mov	[esp+1Ch+var_14], argp ; va_list
		mov	[esp+1Ch+var_18], eax ;	char *
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+1Ch+var_1C], eax ;	FILE *
		call	_vfprintf
		call	_abort
; ---------------------------------------------------------------------------
		jmp	short ___write_memory_part_0
; ---------------------------------------------------------------------------
		align 10h

___write_memory_part_0:			; CODE XREF: ___report_error+51j
					; __pei386_runtime_relocator+140p ...
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 4Ch
		mov	[ebp-40h], ecx
		mov	ecx, ds:_maxSections
		mov	[ebp-3Ch], edx
		test	ecx, ecx
		jle	loc_4513F0
		mov	edx, ds:_the_secs
		xor	ebx, ebx

loc_451227:				; CODE XREF: ___report_error+A4j
		mov	eax, [edx+4]
		cmp	esi, eax
		jb	short loc_45123C
		mov	edi, [edx+8]
		add	eax, [edi+8]
		cmp	esi, eax
		jb	loc_451310

loc_45123C:				; CODE XREF: ___report_error+8Cj
		add	ebx, 1
		add	edx, 0Ch
		cmp	ebx, ecx
		jnz	short loc_451227

loc_451246:				; CODE XREF: ___report_error+252j
		mov	[esp+78h+lpAddress], esi ; p
		call	___mingw_GetSectionForAddress
		test	eax, eax
		mov	edi, eax
		jz	loc_451417
		lea	ecx, [ebx+ebx*2]
		shl	ecx, 2
		mov	ebx, ecx
		add	ebx, ds:_the_secs
		mov	[ebp-44h], ecx
		mov	[ebx+8], eax
		mov	dword ptr [ebx], 0
		call	__GetPEImageBase
		mov	ecx, [ebp-44h]
		lea	edx, [ebp-34h]
		mov	[ebp-44h], edx
		add	eax, [edi+0Ch]
		mov	[ebp-48h], ecx
		mov	[ebx+4], eax
		mov	eax, ds:_the_secs
		mov	ebx, ds:__imp__VirtualQuery@12
		mov	eax, [eax+ecx+4]
		mov	[esp+78h+var_74], edx ;	lpBuffer
		mov	[esp+78h+flNewProtect],	1Ch ; dwLength
		mov	[esp+78h+lpAddress], eax ; lpAddress
		call	ebx ; __imp__VirtualQuery@12
		mov	edx, [ebp-44h]
		mov	ecx, [ebp-48h]
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_4513F7
		mov	eax, [ebp-20h]
		cmp	eax, 4
		jnz	loc_451394

loc_4512C6:				; CODE XREF: ___report_error+1F7j
					; ___report_error+22Dj
		add	ds:_maxSections, 1

loc_4512CD:				; CODE XREF: ___report_error+179j
		mov	[esp+78h+flNewProtect],	1Ch ; dwLength
		mov	[esp+78h+var_74], edx ;	lpBuffer
		mov	[esp+78h+lpAddress], esi ; lpAddress
		call	ebx ; __imp__VirtualQuery@12
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_451427
		mov	eax, [ebp-20h]
		cmp	eax, 4
		jnz	short loc_451320

loc_4512F1:				; CODE XREF: ___report_error+183j
		mov	eax, [ebp-40h]
		mov	[esp+78h+lpAddress], esi ; void	*
		mov	[esp+78h+flNewProtect],	eax ; size_t
		mov	eax, [ebp-3Ch]
		mov	[esp+78h+var_74], eax ;	void *
		call	_memcpy

loc_451307:				; CODE XREF: ___report_error+1C8j
					; ___report_error+1CDj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_451310:				; CODE XREF: ___report_error+96j
		lea	edx, [ebp-34h]
		mov	ebx, ds:__imp__VirtualQuery@12
		jmp	short loc_4512CD
; ---------------------------------------------------------------------------
		align 10h

loc_451320:				; CODE XREF: ___report_error+14Fj
		cmp	eax, 40h
		jz	short loc_4512F1
		mov	eax, [ebp-28h]
		lea	edi, [ebp-38h]
		mov	ebx, ds:__imp__VirtualProtect@16
		mov	[esp+0Ch], edi	; lpflOldProtect
		mov	[esp+78h+flNewProtect],	40h ; flNewProtect
		mov	[esp+78h+var_74], eax ;	dwSize
		mov	eax, [ebp-34h]
		mov	[esp+78h+lpAddress], eax ; lpAddress
		call	ebx ; __imp__VirtualProtect@16
		mov	eax, [ebp-40h]
		sub	esp, 10h
		mov	[esp+78h+flNewProtect],	eax ; size_t
		mov	eax, [ebp-3Ch]
		mov	[esp+78h+lpAddress], esi ; void	*
		mov	[esp+78h+var_74], eax ;	void *
		call	_memcpy
		mov	eax, [ebp-20h]
		cmp	eax, 40h
		jz	short loc_451307
		cmp	eax, 4
		jz	short loc_451307
		mov	eax, [ebp-38h]
		mov	[esp+0Ch], edi	; lpflOldProtect
		mov	[esp+78h+flNewProtect],	eax ; flNewProtect
		mov	eax, [ebp-28h]
		mov	[esp+78h+var_74], eax ;	dwSize
		mov	eax, [ebp-34h]
		mov	[esp+78h+lpAddress], eax ; lpAddress
		call	ebx ; __imp__VirtualProtect@16
		sub	esp, 10h
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_451394:				; CODE XREF: ___report_error+120j
		cmp	eax, 40h
		jz	loc_4512C6
		mov	eax, [ebp-28h]
		add	ecx, ds:_the_secs
		mov	[ebp-44h], edx
		mov	[esp+78h+flNewProtect],	40h ; flNewProtect
		mov	[esp+78h+var_74], eax ;	dwSize
		mov	eax, [ebp-34h]
		mov	[esp+0Ch], ecx	; lpflOldProtect
		mov	[esp+78h+lpAddress], eax ; lpAddress
		call	ds:__imp__VirtualProtect@16
		mov	edx, [ebp-44h]
		sub	esp, 10h
		test	eax, eax
		jnz	loc_4512C6
		call	ds:__imp__GetLastError@0
		mov	[esp+78h+lpAddress], offset msg	; "  VirtualProtect failed with	code 0x%x"
		mov	[esp+78h+var_74], eax
		call	___report_error
; ---------------------------------------------------------------------------
		align 10h

loc_4513F0:				; CODE XREF: ___report_error+79j
		xor	ebx, ebx
		jmp	loc_451246
; ---------------------------------------------------------------------------

loc_4513F7:				; CODE XREF: ___report_error+114j
		mov	eax, ds:_the_secs
		mov	eax, [eax+ecx+4]
		mov	[esp+78h+flNewProtect],	eax
		mov	eax, [edi+8]
		mov	[esp+78h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+78h+var_74], eax
		call	___report_error
; ---------------------------------------------------------------------------

loc_451417:				; CODE XREF: ___report_error+B2j
		mov	[esp+78h+var_74], esi
		mov	[esp+78h+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	___report_error
; ---------------------------------------------------------------------------

loc_451427:				; CODE XREF: ___report_error+143j
		mov	[esp+78h+flNewProtect],	esi
		mov	[esp+78h+var_74], 1Ch
		mov	[esp+78h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		call	___report_error
___report_error	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void _pei386_runtime_relocator()
		public __pei386_runtime_relocator
__pei386_runtime_relocator proc	near	; CODE XREF: ___tmainCRTStartup:loc_401286p

msg		= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_3D		= byte ptr -3Dh

		mov	eax, ds:_was_init_60783
		test	eax, eax
		jz	short loc_451450
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_451450:				; CODE XREF: __pei386_runtime_relocator+7j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ds:_was_init_60783, 1
		call	___mingw_GetSectionCount
mSecs =	eax				; int
		lea	mSecs, [mSecs+mSecs*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	___chkstk_ms
		mov	ds:_maxSections, 0
		sub	esp, eax
		lea	eax, [esp+5Ch+var_3D]
		and	eax, 0FFFFFFF0h
		mov	ds:_the_secs, eax
		mov	eax, offset __RUNTIME_PSEUDO_RELOC_LIST_END___0
		sub	eax, offset __rt_psrelocs_start
		cmp	eax, 7
		jle	loc_451541
		cmp	eax, 0Bh
		jle	loc_451613
		mov	eax, ds:__rt_psrelocs_start
		test	eax, eax
		jnz	loc_451549
		mov	eax, ds:dword_471DBC
		test	eax, eax
		jnz	loc_451549
		mov	edi, ds:dword_471DC0
		mov	ebx, offset dword_471DC4
		test	edi, edi
		jz	loc_451618
		mov	ebx, offset __rt_psrelocs_start

loc_4514E0:				; CODE XREF: __pei386_runtime_relocator+1E7j
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_451700
		add	ebx, 0Ch
		cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END___0
		jnb	short loc_451541

loc_4514F7:				; CODE XREF: __pei386_runtime_relocator+236j
		mov	edx, [ebx]
		mov	edi, [ebx+4]
		mov	ecx, [edx+400000h]
		lea	eax, [edi+400000h]
		mov	[ebp-3Ch], ecx
		movzx	ecx, byte ptr [ebx+8]
		cmp	ecx, 10h
		jz	loc_451632
		cmp	ecx, 20h
		jz	loc_4516B6
		cmp	ecx, 8
		jz	loc_451681
		mov	[esp+5Ch+lpBuffer], ecx
		mov	[esp+5Ch+msg], offset aUnknownPseudoR ;	"  Unknown pseudo relocation bit size %d"...
		mov	dword ptr [ebp-34h], 0
		call	___report_error
; ---------------------------------------------------------------------------

loc_451541:				; CODE XREF: __pei386_runtime_relocator+5Fj
					; __pei386_runtime_relocator+B5j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_451549:				; CODE XREF: __pei386_runtime_relocator+75j
					; __pei386_runtime_relocator+82j
		mov	ebx, offset __rt_psrelocs_start

loc_45154E:				; CODE XREF: __pei386_runtime_relocator+1DCj
					; __pei386_runtime_relocator+1EDj
		cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END___0
		jnb	short loc_451541
		lea	eax, [ebp-34h]
		mov	[ebp-3Ch], eax
		lea	esi, [esi+0]

loc_451560:				; CODE XREF: __pei386_runtime_relocator+14Bj
		mov	edx, [ebx+4]
		mov	ecx, 4
		add	ebx, 8
		lea	eax, [edx+400000h]
		mov	edx, [edx+400000h]
		add	edx, [ebx-8]
		mov	[ebp-34h], edx
		mov	edx, [ebp-3Ch]
		call	___write_memory_part_0
; ---------------------------------------------------------------------------
		cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END___0
		jb	short loc_451560

loc_45158D:				; CODE XREF: __pei386_runtime_relocator+23Cj
		mov	eax, ds:_maxSections
		xor	ebx, ebx
		test	eax, eax
		jg	short loc_4515AB
		jmp	short loc_451541
; ---------------------------------------------------------------------------
		align 10h

loc_4515A0:				; CODE XREF: __pei386_runtime_relocator+180j
					; __pei386_runtime_relocator+1D1j
		add	ebx, 1
		cmp	ebx, ds:_maxSections
		jge	short loc_451541

loc_4515AB:				; CODE XREF: __pei386_runtime_relocator+156j
		mov	eax, ds:_the_secs
		lea	esi, [ebx+ebx*2]
		lea	edi, ds:0[esi*4]
		add	eax, edi
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_4515A0
		mov	eax, [eax+4]
		mov	ecx, [ebp-3Ch]
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	[esp+5Ch+msg], eax ; lpAddress
		mov	[esp+5Ch+lpBuffer], ecx	; lpBuffer
		call	ds:__imp__VirtualQuery@12
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_4516DB
		mov	eax, ds:_the_secs
		lea	ecx, [ebp-38h]
		mov	eax, [eax+esi*4]
		mov	[esp+5Ch+lpflOldProtect], ecx ;	lpflOldProtect
		mov	[esp+5Ch+dwLength], eax	; flNewProtect
		mov	eax, [ebp-28h]
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [ebp-34h]
		mov	[esp+5Ch+msg], eax ; lpAddress
		call	ds:__imp__VirtualProtect@16
		sub	esp, 10h
		jmp	short loc_4515A0
; ---------------------------------------------------------------------------

loc_451613:				; CODE XREF: __pei386_runtime_relocator+68j
		mov	ebx, offset __rt_psrelocs_start

loc_451618:				; CODE XREF: __pei386_runtime_relocator+95j
		mov	esi, [ebx]
		test	esi, esi
		jnz	loc_45154E
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jz	loc_4514E0
		jmp	loc_45154E
; ---------------------------------------------------------------------------

loc_451632:				; CODE XREF: __pei386_runtime_relocator+D2j
		movzx	ecx, word ptr [edi+400000h]
		movzx	edi, cx
		mov	esi, edi
		or	esi, 0FFFF0000h
		test	cx, cx
		cmovs	edi, esi
		mov	esi, [ebp-3Ch]
		sub	edi, edx
		lea	ecx, [ebp-34h]
		sub	edi, 400000h
		mov	[ebp-3Ch], ecx
		lea	edx, [ebp-34h]
		mov	ecx, 2
		add	esi, edi
		mov	[ebp-34h], esi
		call	___write_memory_part_0
; ---------------------------------------------------------------------------

loc_45166D:				; CODE XREF: __pei386_runtime_relocator+274j
					; __pei386_runtime_relocator+299j
		add	ebx, 0Ch
		cmp	ebx, offset __RUNTIME_PSEUDO_RELOC_LIST_END___0
		jb	loc_4514F7
		jmp	loc_45158D
; ---------------------------------------------------------------------------

loc_451681:				; CODE XREF: __pei386_runtime_relocator+E4j
		movzx	ecx, byte ptr [eax]
		movzx	edi, cl
		mov	esi, edi
		or	esi, 0FFFFFF00h
		test	cl, cl
		cmovs	edi, esi
		mov	esi, [ebp-3Ch]
		mov	ecx, 1
		sub	edi, 400000h
		sub	edi, edx
		lea	edx, [ebp-34h]
		add	esi, edi
		mov	[ebp-34h], esi
		mov	[ebp-3Ch], edx
		call	___write_memory_part_0
; ---------------------------------------------------------------------------
		jmp	short loc_45166D
; ---------------------------------------------------------------------------

loc_4516B6:				; CODE XREF: __pei386_runtime_relocator+DBj
		mov	esi, [ebp-3Ch]
		add	edx, 400000h
		lea	ecx, [ebp-34h]
		mov	[ebp-3Ch], ecx
		mov	ecx, 4
		sub	esi, edx
		add	esi, [eax]
		lea	edx, [ebp-34h]
		mov	[ebp-34h], esi
		call	___write_memory_part_0
; ---------------------------------------------------------------------------
		jmp	short loc_45166D
; ---------------------------------------------------------------------------

loc_4516DB:				; CODE XREF: __pei386_runtime_relocator+1A2j
		mov	ecx, ds:_the_secs
		add	ecx, edi
		mov	eax, [ecx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ecx+8]
		mov	eax, [eax+8]
		mov	[esp+5Ch+msg], offset aVirtualqueryFa ;	"  VirtualQuery	failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax
		call	___report_error
; ---------------------------------------------------------------------------

loc_451700:				; CODE XREF: __pei386_runtime_relocator+A6j
		mov	[esp+5Ch+lpBuffer], eax
		mov	[esp+5Ch+msg], offset aUnknownPseud_0 ;	"  Unknown pseudo relocation protocol ve"...
		call	___report_error
__pei386_runtime_relocator endp


; =============== S U B	R O U T	I N E =======================================


; void fpreset()
		public _fpreset
_fpreset	proc near		; CODE XREF: ___tmainCRTStartup+12Cp
					; __gnu_exception_handler@4+142p
		fninit
		retn
_fpreset	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void __do_global_dtors()
		public ___do_global_dtors
___do_global_dtors proc	near		; DATA XREF: ___do_global_ctors:loc_451772o
		mov	eax, _p_59322
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_45174A
		sub	esp, 0Ch
		xchg	ax, ax

loc_451730:				; CODE XREF: ___do_global_dtors+25j
		call	eax
		mov	eax, _p_59322
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	_p_59322, edx
		test	eax, eax
		jnz	short loc_451730
		add	esp, 0Ch

locret_45174A:				; CODE XREF: ___do_global_dtors+9j
		rep retn
___do_global_dtors endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void __do_global_ctors()
		public ___do_global_ctors
___do_global_ctors proc	near		; CODE XREF: ___main+1Aj

func		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		mov	ebx, ds:___CTOR_LIST__
nptrs =	ebx				; unsigned int
		cmp	nptrs, 0FFFFFFFFh
		jz	short loc_451783

loc_45175F:				; CODE XREF: ___do_global_ctors+47j
i = ebx					; unsigned int
		test	i, i
		jz	short loc_451772

loc_451763:				; CODE XREF: ___do_global_ctors+20j
		call	ds:___CTOR_LIST__[i*4]
		sub	ebx, 1
i = ebx					; unsigned int
		lea	esi, [esi+0]
		jnz	short loc_451763

loc_451772:				; CODE XREF: ___do_global_ctors+11j
		mov	[esp+1Ch+func],	offset ___do_global_dtors ; func
		call	_atexit
		add	esp, 18h
		pop	i
		retn
; ---------------------------------------------------------------------------

loc_451783:				; CODE XREF: ___do_global_ctors+Dj
nptrs =	ebx				; unsigned int
		xor	nptrs, nptrs
		jmp	short loc_451789
; ---------------------------------------------------------------------------

loc_451787:				; CODE XREF: ___do_global_ctors+45j
nptrs =	ebx				; unsigned int
		mov	nptrs, eax

loc_451789:				; CODE XREF: ___do_global_ctors+35j
		lea	eax, [nptrs+1]
		mov	edx, ds:___CTOR_LIST__[eax*4]
		test	edx, edx
		jnz	short loc_451787
		jmp	short loc_45175F
___do_global_ctors endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; void __main()
		public ___main
___main		proc near		; CODE XREF: ___tmainCRTStartup+22Dp
					; _main+Cp
		mov	eax, ds:_initialized
		test	eax, eax
		jz	short loc_4517B0
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_4517B0:				; CODE XREF: ___main+7j
		mov	ds:_initialized, 1
		jmp	short ___do_global_ctors
___main		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __security_init_cookie()
		public ___security_init_cookie
___security_init_cookie	proc near	; CODE XREF: .text:004014CDp
					; _mainCRTStartup+Dp

var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
systime		= FT ptr -28h
perfctr		= LARGE_INTEGER	ptr -20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, ___security_cookie
		mov	dword ptr [ebp+systime], 0
		mov	dword ptr [ebp+systime+4], 0
		cmp	eax, 0BB40E64Eh
		jz	short loc_4517F2
		not	eax
		mov	___security_cookie_complement, eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_4517F2:				; CODE XREF: ___security_init_cookie+21j
		lea	eax, [ebp+systime]
		mov	[esp], eax	; lpSystemTimeAsFileTime
		call	ds:__imp__GetSystemTimeAsFileTime@4
		mov	esi, dword ptr [ebp+systime]
cookie = esi				; UINT_PTR
		mov	edi, dword ptr [ebp+systime+4]
		xor	esi, edi
cookie = esi				; UINT_PTR
		sub	esp, 4
		call	ds:__imp__GetCurrentProcessId@0
		mov	ebx, eax
		call	ds:__imp__GetCurrentThreadId@0
		mov	[ebp+var_2C], eax
		call	ds:__imp__GetTickCount@0
		mov	[ebp+var_30], eax
		lea	eax, [ebp+perfctr]
		mov	[esp], eax	; lpPerformanceCount
		call	ds:__imp__QueryPerformanceCounter@4
		xor	esi, dword ptr [ebp+perfctr]
		xor	esi, dword ptr [ebp+perfctr+4]
		xor	esi, ebx
		xor	esi, [ebp+var_2C]
		sub	esp, 4
		xor	esi, [ebp+var_30]
cookie = esi				; UINT_PTR
		cmp	cookie,	0BB40E64Eh
		jz	short loc_451860
		mov	eax, cookie
		not	eax

loc_45184C:				; CODE XREF: ___security_init_cookie+AAj
		mov	___security_cookie, cookie
		mov	___security_cookie_complement, eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	cookie
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
cookie = esi				; UINT_PTR
		align 10h

loc_451860:				; CODE XREF: ___security_init_cookie+86j
		mov	eax, 44BF19B0h
		mov	cookie,	0BB40E64Fh
		jmp	short loc_45184C
___security_init_cookie	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl __report_gsfailure(ULONG_PTR StackCookie)
		public ___report_gsfailure
___report_gsfailure proc near

cookie		= dword	ptr -10h
StackCookie	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:_GS_ContextRecord._Esp, edx
		mov	ds:_GS_ExceptionRecord.ExceptionCode, 0C0000409h
		mov	ds:_GS_ExceptionRecord.ExceptionFlags, 1
		mov	ds:_GS_ContextRecord._Eip, eax
		mov	ds:_GS_ExceptionRecord.ExceptionAddress, eax
		mov	eax, [ebp+StackCookie]
		mov	dword ptr [esp], 0 ; lpTopLevelExceptionFilter
		mov	ds:_GS_ContextRecord._Ecx, eax
		mov	eax, ___security_cookie
		mov	[ebp+cookie], eax
		mov	eax, ___security_cookie_complement
		mov	[ebp+cookie+4],	eax
		call	ds:__imp__SetUnhandledExceptionFilter@4
		sub	esp, 4
		mov	dword ptr [esp], offset	_GS_ExceptionPointers ;	ExceptionInfo
		call	ds:__imp__UnhandledExceptionFilter@4
		sub	esp, 4
		call	ds:__imp__GetCurrentProcess@0
		mov	dword ptr [esp+4], 0C0000409h ;	uExitCode
		mov	[esp], eax	; hProcess
		call	ds:__imp__TerminateProcess@8
		sub	esp, 8
		call	_abort
; ---------------------------------------------------------------------------
		align 10h

___mingwthr_run_key_dtors_part_0:	; CODE XREF: ___mingw_TLScallback:loc_451B32p
					; ___mingw_TLScallback:loc_451B40p
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	dword ptr [esp], offset	___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__EnterCriticalSection@4
		mov	edi, ds:_key_dtor_list
		mov	esi, ds:__imp__GetLastError@0
		sub	esp, 4
		test	edi, edi
		jz	short loc_451959
		lea	esi, [esi+0]

loc_451930:				; CODE XREF: ___report_gsfailure+E7j
		mov	eax, [edi]
		mov	[esp], eax	; dwTlsIndex
		call	ds:__imp__TlsGetValue@4
		sub	esp, 4
		mov	ebx, eax
		call	esi
		test	eax, eax
		jnz	short loc_451952
		test	ebx, ebx
		jz	short loc_451952
		mov	eax, [edi+4]
		mov	[esp], ebx
		call	eax

loc_451952:				; CODE XREF: ___report_gsfailure+D4j
					; ___report_gsfailure+D8j
		mov	edi, [edi+8]
		test	edi, edi
		jnz	short loc_451930

loc_451959:				; CODE XREF: ___report_gsfailure+B7j
		mov	dword ptr [esp], offset	___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__LeaveCriticalSection@4
		sub	esp, 4
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
___report_gsfailure endp

; ---------------------------------------------------------------------------
		jmp	short ____w64_mingwthr_add_key_dtor
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ___w64_mingwthr_add_key_dtor(DWORD key, void (*dtor)(void	*))
		public ____w64_mingwthr_add_key_dtor
____w64_mingwthr_add_key_dtor proc near	; CODE XREF: .text:00451971j

key		= dword	ptr  8
dtor		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 10h
		mov	eax, ds:___mingwthr_cs_init
		test	eax, eax
		jnz	short loc_4519A0

loc_451993:				; CODE XREF: ____w64_mingwthr_add_key_dtor+81j
		lea	esp, [ebp-8]
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4519A0:				; CODE XREF: ____w64_mingwthr_add_key_dtor+11j
		mov	dword ptr [esp+4], 0Ch ; size_t
		mov	dword ptr [esp], 1 ; size_t
		call	_calloc
		test	eax, eax
		mov	ebx, eax
new_key	= eax				; __mingwthr_key_t *
		jz	short loc_4519FC
		mov	new_key, [ebp+key]
new_key	= ebx				; __mingwthr_key_t *
		mov	dword ptr [esp], offset	___mingwthr_cs ; lpCriticalSection
		mov	[new_key], eax
		mov	eax, [ebp+dtor]
		mov	[new_key+4], eax
		call	ds:__imp__EnterCriticalSection@4
		mov	eax, ds:_key_dtor_list
		mov	ds:_key_dtor_list, new_key
		mov	[new_key+8], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__LeaveCriticalSection@4
		mov	eax, esi
		sub	esp, 4
		lea	esp, [ebp-8]
		pop	new_key
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_4519FC:				; CODE XREF: ____w64_mingwthr_add_key_dtor+38j
new_key	= eax				; __mingwthr_key_t *
		mov	esi, 0FFFFFFFFh
		jmp	short loc_451993
____w64_mingwthr_add_key_dtor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl ___w64_mingwthr_remove_key_dtor(DWORD key)
		public ____w64_mingwthr_remove_key_dtor
____w64_mingwthr_remove_key_dtor proc near

var_4		= dword	ptr -4
key		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:___mingwthr_cs_init
		mov	ebx, [ebp+key]
		test	eax, eax
		jnz	short loc_451A30
		xor	eax, eax
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_451A30:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+11j
		mov	dword ptr [esp], offset	___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__EnterCriticalSection@4
		mov	edx, ds:_key_dtor_list
		sub	esp, 4
cur_key	= edx				; volatile __mingwthr_key_t *
		test	cur_key, cur_key
		jz	short loc_451A61
		mov	eax, [cur_key]
		cmp	eax, ebx
		jnz	short loc_451A5A
		jmp	short loc_451A98
; ---------------------------------------------------------------------------

loc_451A52:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+4Fj
cur_key	= eax				; volatile __mingwthr_key_t *
prev_key = edx				; volatile __mingwthr_key_t *
		mov	ecx, [cur_key]
		cmp	ecx, ebx
		jz	short loc_451A78
		mov	prev_key, cur_key

loc_451A5A:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+3Ej
cur_key	= edx				; volatile __mingwthr_key_t *
		mov	eax, [cur_key+8]
prev_key = edx				; volatile __mingwthr_key_t *
cur_key	= eax				; volatile __mingwthr_key_t *
		test	cur_key, cur_key
		jnz	short loc_451A52

loc_451A61:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+38j
		mov	dword ptr [esp], offset	___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__LeaveCriticalSection@4
		sub	esp, 4

loc_451A71:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+86j
		xor	eax, eax
		mov	ebx, [ebp+var_4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_451A78:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+46j
prev_key = edx				; volatile __mingwthr_key_t *
cur_key	= eax				; volatile __mingwthr_key_t *
		mov	ecx, [cur_key+8]
		mov	[prev_key+8], ecx

loc_451A7E:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+92j
		mov	[esp], cur_key	; void *
		call	_free
		mov	dword ptr [esp], offset	___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__LeaveCriticalSection@4
		sub	esp, 4
		jmp	short loc_451A71
; ---------------------------------------------------------------------------

loc_451A98:				; CODE XREF: ____w64_mingwthr_remove_key_dtor+40j
cur_key	= edx				; volatile __mingwthr_key_t *
		mov	eax, [cur_key+8]
		mov	ds:_key_dtor_list, eax
		mov	eax, cur_key
		jmp	short loc_451A7E
____w64_mingwthr_remove_key_dtor endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; WINBOOL __cdecl __mingw_TLScallback(HANDLE hDllHandle, DWORD reason, LPVOID reserved)
		public ___mingw_TLScallback
___mingw_TLScallback proc near		; CODE XREF: ___dyn_tls_dtor@12+33p
					; ___dyn_tls_init@12+77p

hDllHandle	= dword	ptr  8
reason		= dword	ptr  0Ch
reserved	= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+reason]
		cmp	eax, 1
		jz	short loc_451B04
		jb	short loc_451AD5
		cmp	eax, 3
		jnz	short loc_451ACE
		mov	eax, ds:___mingwthr_cs_init
		test	eax, eax
		jnz	short loc_451B32

loc_451ACE:				; CODE XREF: ___mingw_TLScallback+13j
					; ___mingw_TLScallback+36j ...
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------

loc_451AD5:				; CODE XREF: ___mingw_TLScallback+Ej
		mov	eax, ds:___mingwthr_cs_init
		test	eax, eax
		jnz	short loc_451B40

loc_451ADE:				; CODE XREF: ___mingw_TLScallback+95j
		mov	eax, ds:___mingwthr_cs_init
		cmp	eax, 1
		jnz	short loc_451ACE
		mov	ds:___mingwthr_cs_init,	0
		mov	dword ptr [esp], offset	___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__DeleteCriticalSection@4
		sub	esp, 4
		jmp	short loc_451ACE
; ---------------------------------------------------------------------------

loc_451B04:				; CODE XREF: ___mingw_TLScallback+Cj
		mov	eax, ds:___mingwthr_cs_init
		test	eax, eax
		jz	short loc_451B20

loc_451B0D:				; CODE XREF: ___mingw_TLScallback+80j
		mov	ds:___mingwthr_cs_init,	1
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_451B20:				; CODE XREF: ___mingw_TLScallback+5Bj
		mov	dword ptr [esp], offset	___mingwthr_cs ; lpCriticalSection
		call	ds:__imp__InitializeCriticalSection@4
		sub	esp, 4
		jmp	short loc_451B0D
; ---------------------------------------------------------------------------

loc_451B32:				; CODE XREF: ___mingw_TLScallback+1Cj
		call	___mingwthr_run_key_dtors_part_0
; ---------------------------------------------------------------------------
		jmp	short loc_451ACE
; ---------------------------------------------------------------------------
		align 10h

loc_451B40:				; CODE XREF: ___mingw_TLScallback+2Cj
		call	___mingwthr_run_key_dtors_part_0
; ---------------------------------------------------------------------------
		jmp	short loc_451ADE
___mingw_TLScallback endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; WINBOOL __usercall _ValidateImageBase_part_0@<eax>(PBYTE pImageBase@<eax>)
__ValidateImageBase_part_0 proc	near	; CODE XREF: __ValidateImageBase:loc_451B80j
					; __FindPESectionByName+35p ...
pImageBase = eax			; PBYTE
		add	pImageBase, [pImageBase+3Ch]
pNTHeader = eax				; PIMAGE_NT_HEADERS
		cmp	dword ptr [pNTHeader], 4550h
		jz	short loc_451B60
		xor	pNTHeader, pNTHeader
		retn
; ---------------------------------------------------------------------------
pNTHeader = eax				; PIMAGE_NT_HEADERS
		align 10h

loc_451B60:				; CODE XREF: __ValidateImageBase_part_0+9j
		cmp	word ptr [pNTHeader+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
__ValidateImageBase_part_0 endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; WINBOOL __cdecl _ValidateImageBase(PBYTE pImageBase)
		public __ValidateImageBase
__ValidateImageBase proc near

pDOSHeader	= dword	ptr  4

		mov	eax, [esp+pDOSHeader]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_451B80
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
pDOSHeader_0 = eax			; PIMAGE_DOS_HEADER
		align 10h

loc_451B80:				; CODE XREF: __ValidateImageBase+9j
		jmp	short __ValidateImageBase_part_0
__ValidateImageBase endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; PIMAGE_SECTION_HEADER	__cdecl	_FindPESection(PBYTE pImageBase, DWORD_PTR rva)
		public __FindPESection
__FindPESection	proc near		; CODE XREF: ___mingw_GetSectionForAddress+3Ap
					; __IsNonwritableInCurrentImage+35p ...

pImageBase	= dword	ptr  4
rva		= dword	ptr  8

		push	esi
		push	ebx
		mov	edx, [esp+8+pImageBase]
		mov	ebx, [esp+8+rva]
		add	edx, [edx+3Ch]
pNTHeader = edx				; PIMAGE_NT_HEADERS
		movzx	esi, word ptr [pNTHeader+6]
		movzx	eax, word ptr [pNTHeader+14h]
		test	esi, esi
		lea	eax, [pNTHeader+eax+18h]
pSection = eax				; PIMAGE_SECTION_HEADER
		jz	short loc_451BC8
		xor	pNTHeader, pNTHeader
iSection = edx				; unsigned int
		nop

loc_451BB0:				; CODE XREF: __FindPESection+36j
		mov	ecx, [pSection+0Ch]
		cmp	ecx, ebx
		ja	short loc_451BBE
		add	ecx, [pSection+8]
		cmp	ebx, ecx
		jb	short loc_451BCA

loc_451BBE:				; CODE XREF: __FindPESection+25j
		add	iSection, 1
		add	pSection, 28h
		cmp	iSection, esi
		jb	short loc_451BB0

loc_451BC8:				; CODE XREF: __FindPESection+1Bj
rva_0 =	ebx				; DWORD_PTR
		xor	pSection, pSection

loc_451BCA:				; CODE XREF: __FindPESection+2Cj
		pop	rva_0
		pop	esi
		retn
__FindPESection	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; PIMAGE_SECTION_HEADER	__cdecl	_FindPESectionByName(const char	*pName)
		public __FindPESectionByName
__FindPESectionByName proc near

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
pName		= dword	ptr  4

		push	ebp
		push	edi
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+2Ch+pName]
		mov	[esp+2Ch+var_2C], edi ;	char *
		call	_strlen
		cmp	eax, 8
		ja	short loc_451BF5
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_451C00

loc_451BF5:				; CODE XREF: __FindPESectionByName+18j
					; __FindPESectionByName+3Cj ...
		add	esp, 1Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_451C00:				; CODE XREF: __FindPESectionByName+23j
		mov	eax, 400000h	; pImageBase
		call	__ValidateImageBase_part_0
		test	eax, eax
		jz	short loc_451BF5
		mov	eax, ds:40003Ch
		lea	edx, [eax+400000h]
pNTHeader = edx				; PIMAGE_NT_HEADERS
		movzx	eax, word ptr [eax+400014h]
		movzx	ebp, word ptr [pNTHeader+6]
		lea	ebx, [pNTHeader+eax+18h]
pSection = ebx				; PIMAGE_SECTION_HEADER
		test	ebp, ebp
		jnz	short loc_451C3A
		jmp	short loc_451BF5
; ---------------------------------------------------------------------------
iSection = esi				; unsigned int
		align 10h

loc_451C30:				; CODE XREF: __FindPESectionByName+80j
		add	iSection, 1
		add	pSection, 28h
		cmp	iSection, ebp
		jnb	short loc_451C60

loc_451C3A:				; CODE XREF: __FindPESectionByName+5Aj
		mov	[esp+2Ch+var_24], 8 ; size_t
		mov	[esp+2Ch+var_28], edi ;	char *
		mov	[esp+2Ch+var_2C], pSection ; char *
		call	_strncmp
		test	eax, eax
		jnz	short loc_451C30
		add	esp, 1Ch
		mov	iSection, pSection
		mov	eax, esi
		pop	pSection
pSection = eax				; PIMAGE_SECTION_HEADER
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
pSection = ebx				; PIMAGE_SECTION_HEADER
iSection = esi				; unsigned int
		align 10h

loc_451C60:				; CODE XREF: __FindPESectionByName+68j
		add	esp, 1Ch
		xor	iSection, iSection
		pop	pSection
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
__FindPESectionByName endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; PIMAGE_SECTION_HEADER	__cdecl	__mingw_GetSectionForAddress(LPVOID p)
		public ___mingw_GetSectionForAddress
___mingw_GetSectionForAddress proc near	; CODE XREF: ___report_error+A9p

pImageBase	= dword	ptr -0Ch
var_8		= dword	ptr -8
p		= dword	ptr  4

		push	ebx
		xor	ebx, ebx
		sub	esp, 8
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_451C88

loc_451C81:				; CODE XREF: ___mingw_GetSectionForAddress+24j
		add	esp, 8
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_451C88:				; CODE XREF: ___mingw_GetSectionForAddress+Fj
		mov	eax, 400000h	; pImageBase
		call	__ValidateImageBase_part_0
		test	eax, eax
		jz	short loc_451C81
		mov	eax, [esp+0Ch+p]
		mov	[esp+0Ch+pImageBase], 400000h ;	pImageBase
		sub	eax, 400000h
rva = eax				; DWORD_PTR
		mov	[esp+0Ch+var_8], rva ; rva
		call	__FindPESection
		add	esp, 8
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
___mingw_GetSectionForAddress endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __mingw_GetSectionCount()
		public ___mingw_GetSectionCount
___mingw_GetSectionCount proc near	; CODE XREF: __pei386_runtime_relocator+23p
		push	ebx
		xor	ebx, ebx
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_451CD2

loc_451CCE:				; CODE XREF: ___mingw_GetSectionCount+1Ej
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_451CD2:				; CODE XREF: ___mingw_GetSectionCount+Cj
		mov	eax, 400000h	; pImageBase
		call	__ValidateImageBase_part_0
		test	eax, eax
		jz	short loc_451CCE
		mov	eax, ds:40003Ch
		movzx	ebx, word ptr [eax+400006h]
		mov	eax, ebx
		pop	ebx
		retn
___mingw_GetSectionCount endp


; =============== S U B	R O U T	I N E =======================================


; PIMAGE_SECTION_HEADER	__cdecl	_FindPESectionExec(size_t eNo)
		public __FindPESectionExec
__FindPESectionExec proc near

eNo		= dword	ptr  4

pSection = edx				; PIMAGE_SECTION_HEADER
		push	esi
		xor	esi, esi
		cmp	word ptr ds:400000h, 5A4Dh
		push	ebx
		mov	ebx, [esp+8+eNo]
		jz	short loc_451D08

loc_451D03:				; CODE XREF: __FindPESectionExec+24j
					; __FindPESectionExec+42j
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_451D08:				; CODE XREF: __FindPESectionExec+11j
eNo_0 =	ebx				; size_t ; pImageBase
		mov	eax, 400000h
		call	__ValidateImageBase_part_0
		test	eax, eax
		jz	short loc_451D03
		mov	eax, ds:40003Ch
		lea	ecx, [eax+400000h]
pNTHeader = ecx				; PIMAGE_NT_HEADERS
		movzx	eax, word ptr [eax+400014h]
		lea	pSection, [pNTHeader+eax+18h]
		movzx	pNTHeader, word	ptr [pNTHeader+6]
		test	ecx, ecx
		jz	short loc_451D03
		xor	eax, eax

loc_451D36:				; CODE XREF: __FindPESectionExec+5Bj
iSection = eax				; unsigned int
		test	byte ptr [pSection+27h], 20h
		jz	short loc_451D43
		test	eNo_0, eNo_0
		jz	short loc_451D54
		sub	eNo_0, 1

loc_451D43:				; CODE XREF: __FindPESectionExec+4Aj
		add	iSection, 1
		add	pSection, 28h
		cmp	iSection, ecx
		jb	short loc_451D36
		xor	esi, esi
		mov	iSection, esi
		pop	eNo_0
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_451D54:				; CODE XREF: __FindPESectionExec+4Ej
eNo_0 =	ebx				; size_t
iSection = eax				; unsigned int
		mov	esi, pSection
		mov	iSection, esi
		pop	eNo_0
		pop	esi
		retn
__FindPESectionExec endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; PBYTE	_GetPEImageBase()
		public __GetPEImageBase
__GetPEImageBase proc near		; CODE XREF: ___report_error+D2p
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_451D70

loc_451D6B:				; CODE XREF: __GetPEImageBase+1Cj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_451D70:				; CODE XREF: __GetPEImageBase+9j
		mov	eax, 400000h	; pImageBase
		call	__ValidateImageBase_part_0
		test	eax, eax
		jz	short loc_451D6B
		mov	eax, 400000h
		retn
__GetPEImageBase endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; WINBOOL __cdecl _IsNonwritableInCurrentImage(PBYTE pTarget)
		public __IsNonwritableInCurrentImage
__IsNonwritableInCurrentImage proc near

pImageBase	= dword	ptr -8
rva		= dword	ptr -4
pTarget		= dword	ptr  4

		xor	eax, eax
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_451DA0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_451DA0:				; CODE XREF: __IsNonwritableInCurrentImage+Bj
		sub	esp, 8
		mov	eax, 400000h	; pImageBase
		call	__ValidateImageBase_part_0
		test	eax, eax
		jz	short loc_451DD6
		mov	eax, [esp+8+pTarget]
		mov	[esp+8+pImageBase], 400000h ; pImageBase
		sub	eax, 400000h
rvaTarget = eax				; DWORD_PTR
		mov	[esp+8+rva], rvaTarget ; rva
		call	__FindPESection
pSection = eax				; PIMAGE_SECTION_HEADER
		test	pSection, pSection
		jz	short loc_451DE0
		mov	pSection, [pSection+24h]
		not	eax
		shr	eax, 1Fh

loc_451DD6:				; CODE XREF: __IsNonwritableInCurrentImage+1Fj
					; __IsNonwritableInCurrentImage+52j
		add	esp, 8
		retn
; ---------------------------------------------------------------------------
pSection = eax				; PIMAGE_SECTION_HEADER
		align 10h

loc_451DE0:				; CODE XREF: __IsNonwritableInCurrentImage+3Cj
		xor	pSection, pSection
		jmp	short loc_451DD6
__IsNonwritableInCurrentImage endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; const	char *__cdecl __mingw_enum_import_library_names(int i)
		public ___mingw_enum_import_library_names
___mingw_enum_import_library_names proc	near

pImageBase	= dword	ptr -14h
rva		= dword	ptr -10h
i		= dword	ptr  4

		push	edi
		xor	edi, edi
		push	esi
		push	ebx
		sub	esp, 8
		cmp	word ptr ds:400000h, 5A4Dh
		mov	ebx, [esp+14h+i]
		jz	short loc_451E10

loc_451E07:				; CODE XREF: ___mingw_enum_import_library_names+2Cj
					; ___mingw_enum_import_library_names+3Bj ...
		add	esp, 8
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_451E10:				; CODE XREF: ___mingw_enum_import_library_names+15j
		mov	eax, 400000h	; pImageBase
		call	__ValidateImageBase_part_0
		test	eax, eax
		jz	short loc_451E07
		mov	eax, ds:40003Ch
		mov	esi, [eax+400080h]
importsStartRVA	= esi			; DWORD
		test	importsStartRVA, importsStartRVA
		jz	short loc_451E07
		mov	[esp+14h+rva], importsStartRVA ; rva
		mov	[esp+14h+pImageBase], 400000h ;	pImageBase
		call	__FindPESection
pSection = eax				; PIMAGE_SECTION_HEADER
		test	pSection, pSection
		jz	short loc_451E07
		add	importsStartRVA, 400000h
importDesc = esi			; PIMAGE_IMPORT_DESCRIPTOR
		mov	edx, importDesc
		jnz	short loc_451E56
		jmp	short loc_451E07
; ---------------------------------------------------------------------------
i_0 = ebx				; int
importDesc = edx			; PIMAGE_IMPORT_DESCRIPTOR
		align 10h

loc_451E50:				; CODE XREF: ___mingw_enum_import_library_names+76j
		sub	i_0, 1
		add	importDesc, 14h

loc_451E56:				; CODE XREF: ___mingw_enum_import_library_names+59j
		mov	ecx, [importDesc+4]
		test	ecx, ecx
		jnz	short loc_451E64
		mov	eax, [importDesc+0Ch]
		test	eax, eax
		jz	short loc_451E80

loc_451E64:				; CODE XREF: ___mingw_enum_import_library_names+6Bj
		test	i_0, i_0
		jg	short loc_451E50
		mov	edi, [importDesc+0Ch]
		add	esp, 8
		pop	i_0
		pop	esi
		add	edi, 400000h
		mov	eax, edi
		pop	edi
		retn
; ---------------------------------------------------------------------------
i_0 = ebx				; int
		align 10h

loc_451E80:				; CODE XREF: ___mingw_enum_import_library_names+72j
		add	esp, 8
		xor	edi, edi
		mov	eax, edi
		pop	i_0
		pop	esi
		pop	edi
		retn
___mingw_enum_import_library_names endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public ___chkstk_ms
___chkstk_ms	proc near		; CODE XREF: ___tmainCRTStartup+19p
					; _speed_main+Bp ...

arg_0		= byte ptr  4

		push	ecx
		push	eax
		cmp	eax, 1000h
		lea	ecx, [esp+8+arg_0]
		jb	short loc_451EB2

loc_451E9D:				; CODE XREF: ___chkstk_ms+20j
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_451E9D

loc_451EB2:				; CODE XREF: ___chkstk_ms+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		pop	eax
		pop	ecx
		retn
___chkstk_ms	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; void __cdecl _wassert(const wchar_t *_Message, const wchar_t *_File, unsigned	int _Line)
		public __wassert
__wassert	proc near		; CODE XREF: __wassert+201p

var_22C		= dword	ptr -22Ch
fn		= word ptr -222h
var_s0		= byte ptr  0
_Message	= dword	ptr  8
_File		= dword	ptr  0Ch
_Line		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 23Ch
		mov	ebx, [ebp+_File]
		mov	dword ptr [esp], 4000h ; size_t
		mov	esi, [ebp+_Message]
		call	_malloc
		test	ebx, ebx
		mov	edi, eax
msgbuf = eax				; wchar_t *
		jz	loc_451FD0
		cmp	word ptr [ebx],	0
		mov	msgbuf,	offset aUnknown	; "<unknown>"
msgbuf = edi				; wchar_t *
		cmovz	ebx, eax

loc_451EF4:				; CODE XREF: __wassert+115j
_File_0	= ebx				; const	wchar_t	*
		test	esi, esi
		jz	loc_451FC3
		cmp	word ptr [esi],	0
		mov	eax, offset a?	; "?"
		cmovz	esi, eax

loc_451F08:				; CODE XREF: __wassert+108j
_Message_0 = esi			; const	wchar_t	*
		lea	edx, [ebp+fn]
		mov	[esp+4], edx	; lpFilename
		mov	[ebp+var_22C], edx
		mov	dword ptr [esp+8], 104h	; nSize
		mov	dword ptr [esp], 0 ; hModule
		call	ds:__imp__GetModuleFileNameW@12
		mov	edx, [ebp+var_22C]
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_451FA8

loc_451F3A:				; CODE XREF: __wassert+FEj
		mov	eax, [ebp+_Line]
		mov	[esp+18h], _Message_0
		mov	[esp+10h], _File_0
		mov	[esp+0Ch], edx
		mov	[esp+14h], eax
		mov	dword ptr [esp+8], offset aAssertionFaile ; "Assertion failed!\n\nProgram: %ws\nFile"...
		mov	dword ptr [esp+4], 1FFFh ; size_t
		mov	[esp], msgbuf	; wchar_t *
		call	__snwprintf
		mov	eax, ds:_mingw_app_type
		test	eax, eax
		jz	loc_451FF7
		mov	dword ptr [esp+0Ch], 12012h ; uType
		mov	dword ptr [esp+8], offset Caption ; "MinGW Runtime Assertion"
		mov	[esp+4], msgbuf	; lpText
		mov	dword ptr [esp], 0 ; hWnd
		call	ds:__imp__MessageBoxW@16
		sub	esp, 10h
nCode =	eax				; DWORD
		cmp	nCode, 3
		jz	short loc_451FDF
		cmp	nCode, 5
		jnz	short loc_451FDA
		lea	esp, [ebp-0Ch]
		pop	_File_0
		pop	_Message_0
		pop	msgbuf
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_451FA8:				; CODE XREF: __wassert+78j
_Message_0 = esi			; const	wchar_t	* ; wchar_t *
_File_0	= ebx				; const	wchar_t	*
msgbuf = edi				; wchar_t *
		mov	[esp], edx
		mov	dword ptr [esp+4], offset aUnknown ; "<unknown>"
		call	_wcscpy
		mov	edx, [ebp+var_22C]
		jmp	loc_451F3A
; ---------------------------------------------------------------------------

loc_451FC3:				; CODE XREF: __wassert+36j
		mov	esi, offset a?	; "?"
		jmp	loc_451F08
; ---------------------------------------------------------------------------
msgbuf = eax				; wchar_t *
		align 10h

loc_451FD0:				; CODE XREF: __wassert+22j
		mov	ebx, offset aUnknown ; "<unknown>"
		jmp	loc_451EF4
; ---------------------------------------------------------------------------

loc_451FDA:				; CODE XREF: __wassert+DEj
_Message_0 = esi			; const	wchar_t	*
_File_0	= ebx				; const	wchar_t	*
msgbuf = edi				; wchar_t *
nCode =	eax				; DWORD
		call	_abort
; ---------------------------------------------------------------------------

loc_451FDF:				; CODE XREF: __wassert+D9j
nCode =	eax				; DWORD	; int
		mov	dword ptr [esp], 16h
		call	_raise
		mov	dword ptr [esp], 3 ; int
		call	__exit
; ---------------------------------------------------------------------------

loc_451FF7:				; CODE XREF: __wassert+ACj
		mov	eax, ds:__imp___iob
		mov	[esp+8], msgbuf
		mov	dword ptr [esp+4], offset aWs ;	"%ws\n"
		add	eax, 40h
		mov	[esp], eax	; FILE *
		call	_fwprintf
		call	_abort
; ---------------------------------------------------------------------------
		align 10h

; void __cdecl _assert(void *, void *, unsigned	int)
		public __assert
__assert:				; CODE XREF: _do_passwd+1A9p
					; _do_passwd+6B3p ...
		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebp, [esp+30h]
		mov	eax, [esp+38h]
		mov	edi, [esp+34h]
		mov	[esp], ebp	; char *
		mov	[esp+0Ch], eax
		call	_strlen
		lea	eax, [eax+eax+2]
		mov	[esp], eax	; size_t
		call	_malloc
		mov	[esp], edi	; char *
		mov	esi, eax
		call	_strlen
		lea	eax, [eax+eax+2]
		mov	[esp], eax	; size_t
		call	_malloc
		movzx	ecx, [ebp+var_s0]
		test	cl, cl
		jz	short loc_4520E2
		xor	ebx, ebx
		xor	edx, edx
		lea	esi, [esi+0]

loc_452070:				; CODE XREF: __wassert+1C0j
		add	edx, 1
		mov	[esi+ebx*2], cx
		movzx	ecx, [ebp+edx+var_s0]
		mov	ebx, edx
		test	cl, cl
		jnz	short loc_452070
		add	edx, edx

loc_452084:				; CODE XREF: __wassert+224j
		xor	ebx, ebx
		mov	[esi+edx], bx
		movzx	ecx, byte ptr [edi]
		test	cl, cl
		jz	short loc_4520E6
		xor	ebx, ebx
		xor	edx, edx

loc_452095:				; CODE XREF: __wassert+1E4j
		add	edx, 1
		mov	[eax+ebx*2], cx
		movzx	ecx, byte ptr [edi+edx]
		mov	ebx, edx
		test	cl, cl
		jnz	short loc_452095
		add	edx, edx

loc_4520A8:				; CODE XREF: __wassert+228j
		mov	edi, [esp+0Ch]
		xor	ecx, ecx
		mov	[eax+edx], cx
		mov	[esp+4], eax	; _File
		mov	[esp], esi	; _Message
		mov	[esp+8], edi	; _Line
		mov	[esp+0Ch], eax
		call	__wassert
; ---------------------------------------------------------------------------
		mov	[esp], esi	; void *
		call	_free
		mov	eax, [esp+0Ch]
		mov	[esp+30h], eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	_free
; ---------------------------------------------------------------------------

loc_4520E2:				; CODE XREF: __wassert+1A7j
		xor	edx, edx
		jmp	short loc_452084
; ---------------------------------------------------------------------------

loc_4520E6:				; CODE XREF: __wassert+1CFj
		xor	edx, edx
		jmp	short loc_4520A8
__wassert	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ___set_app_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ___getmainargs]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: static

; void (*mingw_get_invalid_parameter_handler())(const wchar_t *, const wchar_t *, const	wchar_t	*, unsigned int, uintptr_t)
_mingw_get_invalid_parameter_handler proc near
					; DATA XREF: .data:__imp___get_invalid_parameter_handlero
		mov	eax, dword ptr ds:__RUNTIME_PSEUDO_RELOC_LIST_END__+3
		retn
_mingw_get_invalid_parameter_handler endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: static

; void (*__cdecl mingw_set_invalid_parameter_handler(void (*new_handler)(const wchar_t *, const	wchar_t	*, const wchar_t *, unsigned int, uintptr_t)))(const wchar_t *,	const wchar_t *, const wchar_t *, unsigned int,	uintptr_t)
_mingw_set_invalid_parameter_handler proc near
					; DATA XREF: .data:__imp___set_invalid_parameter_handlero

new_handler	= dword	ptr  4

		mov	eax, [esp+new_handler]
		xchg	eax, dword ptr ds:__RUNTIME_PSEUDO_RELOC_LIST_END__+3
		retn
_mingw_set_invalid_parameter_handler endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _strlen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __cexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __amsg_exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __initterm]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; void __cdecl __noreturn exit_0(int)
		public _exit_0
_exit_0		proc near		; CODE XREF: ___tmainCRTStartup+330p
					; _rsautl_main+C12p ...
		jmp	ds:__imp__exit
_exit_0		endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _fprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strncmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _strcmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _getenv]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _fwrite]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _realloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _qsort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _fputs]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _fflush]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _fgets]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _putchar]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _printf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _abort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _atoi]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _perror]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _atol]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strchr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _fputc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _puts]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _sscanf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _setvbuf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _memcmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _fopen]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _fclose]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strncat]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __time32]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strstr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _signal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strspn]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _clearerr]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ferror]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _feof]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _fread]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _fseek]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _ftell]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __lock]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ___dllonexit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __unlock]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ___setusermatherr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _vfprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _calloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __snwprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _wcscpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _raise]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _fwprintf]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

; int __cdecl main(int argc, const char	**argv,	const char **envp)
		public _main
_main		proc near		; CODE XREF: ___tmainCRTStartup+25Bp

argc		= dword	ptr  8
argv		= dword	ptr  0Ch
envp		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		and	esp, 0FFFFFFF0h
		sub	esp, 70h
		call	___main
		mov	dword ptr [esp+34h], 0
		mov	dword ptr [esp+38h], 0
		mov	ebx, ds:_bio_err
		test	ebx, ebx
		jz	loc_452674

loc_4522FF:				; CODE XREF: _main+3B8j _main+3E3j
		mov	dword ptr [esp], offset	aOpenssl_debug_	; "OPENSSL_DEBUG_MEMORY"
		call	_getenv
		test	eax, eax
		jz	short loc_452367
		mov	dword ptr [esp], offset	aOpenssl_debug_	; "OPENSSL_DEBUG_MEMORY"
		call	_getenv
		mov	edi, offset aOff ; "off"
		mov	ecx, 4
		mov	esi, eax
		repe cmpsb
		jz	loc_4523C3
		mov	dword ptr [esp+10h], offset _CRYPTO_dbg_get_options
		mov	dword ptr [esp+0Ch], offset _CRYPTO_dbg_set_options
		mov	dword ptr [esp+8], offset _CRYPTO_dbg_free
		mov	dword ptr [esp+4], offset _CRYPTO_dbg_realloc
		mov	dword ptr [esp], offset	_CRYPTO_dbg_malloc
		call	_CRYPTO_set_mem_debug_functions
		mov	dword ptr [esp], 3
		call	_CRYPTO_set_mem_debug_options

loc_452367:				; CODE XREF: _main+3Dj	_main+11Fj
		mov	dword ptr [esp], 1
		call	_CRYPTO_mem_ctrl
		mov	dword ptr [esp], offset	_lock_dbg_cb
		call	_CRYPTO_set_locking_callback
		mov	dword ptr [esp], offset	aOpenssl_fips ;	"OPENSSL_FIPS"
		call	_getenv
		test	eax, eax
		jz	short loc_4523F4
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+0Ch], eax	; FILE *
		mov	dword ptr [esp+8], 19h ; size_t
		mov	dword ptr [esp+4], 1 ; size_t
		mov	dword ptr [esp], offset	aFipsModeNotSup	; "FIPS	mode not supported.\n"
		call	_fwrite
		mov	dword ptr [esp], 1 ; int
		call	_exit_0
; ---------------------------------------------------------------------------

loc_4523C3:				; CODE XREF: _main+59j
		mov	dword ptr [esp+10h], 0
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], 0
		call	_CRYPTO_set_mem_debug_functions
		jmp	loc_452367
; ---------------------------------------------------------------------------

loc_4523F4:				; CODE XREF: _main+BDj
		mov	dword ptr [esp+8], offset _free
		mov	dword ptr [esp+4], offset _realloc
		mov	dword ptr [esp], offset	_malloc
		call	_CRYPTO_set_mem_functions
		call	_ERR_load_crypto_strings
		call	_OPENSSL_add_all_algorithms_noconf
		call	_ENGINE_load_builtin_engines
		call	_setup_ui_method
		mov	dword ptr [esp], offset	aOpenssl_conf_2	; "OPENSSL_CONF"
		call	_getenv
		mov	esi, eax
		test	eax, eax
		jz	loc_45281A
		mov	ebx, eax
		xor	esi, esi

loc_45243E:				; CODE XREF: _main+55Aj _main+569j
		mov	ds:_default_config_file, ebx
		mov	dword ptr [esp], 0
		call	_NCONF_new
		mov	ds:_config, eax
		lea	edx, [esp+30h]
		mov	[esp+8], edx
		mov	[esp+4], ebx
		mov	[esp], eax
		call	_NCONF_load
		test	eax, eax
		jnz	short loc_4524D7
		call	_ERR_peek_last_error
		and	eax, 0FFFh
		cmp	eax, 72h
		jz	short loc_4524A2
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_ERR_print_errors
		mov	eax, ds:_config
		mov	[esp], eax
		call	_NCONF_free
		mov	dword ptr [esp], 1 ; int
		call	_exit_0
; ---------------------------------------------------------------------------

loc_4524A2:				; CODE XREF: _main+1AAj
		mov	[esp+8], ebx
		mov	dword ptr [esp+4], offset aWarningCanTOpe ; "WARNING: can't open config file: %s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		call	_ERR_clear_error
		mov	eax, ds:_config
		mov	[esp], eax
		call	_NCONF_free
		mov	ds:_config, 0

loc_4524D7:				; CODE XREF: _main+19Bj
		xor	edx, edx
		cmp	off_455024, 0
		jz	short loc_4524FB
		mov	eax, offset _functions
		mov	esi, esi
		lea	edi, [edi+0]

loc_4524F0:				; CODE XREF: _main+229j
		add	eax, 0Ch
		inc	edx
		mov	ecx, [eax+4]
		test	ecx, ecx
		jnz	short loc_4524F0

loc_4524FB:				; CODE XREF: _main+210j
		mov	dword ptr [esp+0Ch], offset _SortFnByName ; int	(__cdecl *)(const void *, const	void *)
		mov	dword ptr [esp+8], 0Ch ; size_t
		mov	[esp+4], edx	; size_t
		mov	dword ptr [esp], offset	_functions ; void *
		call	_qsort
		mov	dword ptr [esp+4], offset _function_LHASH_COMP
		mov	dword ptr [esp], offset	_function_LHASH_HASH
		call	_lh_new
		mov	edi, eax
		test	eax, eax
		jz	loc_45285D
		cmp	off_455024, 0
		jz	short loc_452566
		mov	ebx, offset _functions
		mov	esi, esi
		lea	edi, [edi+0]

loc_452550:				; CODE XREF: _main+294j
		mov	[esp+4], ebx
		mov	[esp], edi
		call	_lh_insert
		add	ebx, 0Ch
		mov	eax, [ebx+4]
		test	eax, eax
		jnz	short loc_452550

loc_452566:				; CODE XREF: _main+270j
		mov	[esp+1Ch], edi

loc_45256A:				; CODE XREF: _main+595j
		mov	eax, [ebp+argv]
		mov	eax, [eax]
		mov	dword ptr [esp+8], 28h ; int
		lea	ebx, [esp+48h]
		mov	[esp+4], ebx	; int
		mov	[esp], eax	; char *
		call	_program_name
		mov	[esp+40h], ebx
		lea	eax, [esp+3Ch]
		mov	[esp+4], eax
		mov	eax, [esp+1Ch]
		mov	[esp], eax
		call	_lh_retrieve
		test	eax, eax
		jz	loc_4526B8
		mov	edi, [ebp+argv]
		mov	[edi], ebx
		mov	eax, [eax+8]
		mov	[esp+4], edi
		mov	edi, [ebp+argc]
		mov	[esp], edi
		call	eax
		mov	ebx, eax

loc_4525BD:				; CODE XREF: _main+410j _main+545j ...
		test	esi, esi
		jz	short loc_4525C9
		mov	[esp], esi
		call	_CRYPTO_free

loc_4525C9:				; CODE XREF: _main+2EFj
		mov	eax, ds:_config
		test	eax, eax
		jz	short loc_4525E4
		mov	[esp], eax
		call	_NCONF_free
		mov	ds:_config, 0

loc_4525E4:				; CODE XREF: _main+300j
		mov	eax, [esp+1Ch]
		test	eax, eax
		jz	short loc_4525F4
		mov	[esp], eax
		call	_lh_free

loc_4525F4:				; CODE XREF: _main+31Aj
		mov	eax, [esp+34h]
		test	eax, eax
		jz	short loc_452604
		mov	[esp], eax
		call	_CRYPTO_free

loc_452604:				; CODE XREF: _main+32Aj
		mov	dword ptr [esp], 1
		call	_CONF_modules_unload
		call	_destroy_ui_method
		call	_OBJ_cleanup
		call	_EVP_cleanup
		call	_ENGINE_cleanup
		call	_CRYPTO_cleanup_all_ex_data
		mov	dword ptr [esp], 0
		call	_ERR_remove_thread_state
		call	_RAND_cleanup
		call	_ERR_free_strings
		call	_COMP_zlib_cleanup
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_CRYPTO_mem_leaks
		mov	eax, ds:_bio_err
		test	eax, eax
		jz	short loc_45266C
		mov	[esp], eax
		call	_BIO_free
		mov	ds:_bio_err, 0

loc_45266C:				; CODE XREF: _main+388j
		mov	[esp], ebx	; int
		call	_exit_0
; ---------------------------------------------------------------------------

loc_452674:				; CODE XREF: _main+29j
		call	_BIO_s_file
		mov	[esp], eax
		call	_BIO_new
		mov	ds:_bio_err, eax
		test	eax, eax
		jz	loc_4522FF
		mov	esi, ds:__imp___iob
		lea	edx, [esi+40h]
		mov	[esp+0Ch], edx
		mov	dword ptr [esp+8], 10h
		mov	dword ptr [esp+4], 6Ah
		mov	[esp], eax
		call	_BIO_ctrl
		jmp	loc_4522FF
; ---------------------------------------------------------------------------

loc_4526B8:				; CODE XREF: _main+2D1j
		cmp	[ebp+argc], 1
		jz	loc_452755
		mov	eax, [ebp+argv]
		lea	ecx, [eax+4]
		mov	eax, [ebp+argc]
		lea	edx, [eax-1]
		mov	eax, [esp+1Ch]
		call	_do_cmd
		mov	ebx, eax
		not	eax
		sar	eax, 1Fh
		and	ebx, eax
		jmp	loc_4525BD
; ---------------------------------------------------------------------------

loc_4526E5:				; CODE XREF: _main+500j _main+50Bj
		lea	eax, [esp+2Ch]
		mov	[esp+0Ch], eax
		lea	eax, [esp+28h]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset _buf_38041
		lea	eax, [esp+34h]
		mov	[esp], eax
		call	_chopup_args
		test	eax, eax
		jz	loc_45283E
		mov	ecx, [esp+2Ch]
		mov	edx, [esp+28h]
		mov	eax, [esp+1Ch]
		call	_do_cmd
		test	eax, eax
		js	loc_452813
		jnz	loc_4527EF

loc_452730:				; CODE XREF: _main+53Ej
		mov	dword ptr [esp+0Ch], 0
		mov	dword ptr [esp+8], 0
		mov	dword ptr [esp+4], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_ctrl

loc_452755:				; CODE XREF: _main+3ECj
		mov	ebx, offset _buf_38041
		xor	ecx, ecx
		mov	dword ptr [esp+18h], 400h

loc_452764:				; CODE XREF: _main+51Aj
		mov	byte ptr [ebx],	0
		mov	eax, offset aOpenssl_0 ; "OpenSSL> "
		test	ecx, ecx
		jz	short loc_452775
		mov	eax, offset asc_4582CB ; ">"

loc_452775:				; CODE XREF: _main+49Ej
		mov	ds:_prompt_38040, eax
		mov	ecx, ds:__imp___iob
		lea	edx, [ecx+20h]
		mov	[esp+4], edx	; FILE *
		mov	[esp], eax	; char *
		call	_fputs
		mov	eax, ds:__imp___iob
		add	eax, 20h
		mov	[esp], eax	; FILE *
		call	_fflush
		mov	eax, ds:__imp___iob
		mov	[esp+8], eax	; FILE *
		mov	eax, [esp+18h]
		mov	[esp+4], eax	; int
		mov	[esp], ebx	; char *
		call	_fgets
		test	eax, eax
		jz	short loc_452813
		cmp	byte ptr [ebx],	0
		jz	short loc_452813
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, ebx
		repne scasb
		not	ecx
		lea	eax, [ecx-1]
		dec	eax
		jle	loc_4526E5
		cmp	byte ptr [ebx+ecx-3], 5Ch
		jnz	loc_4526E5
		sub	ecx, 3
		add	ebx, ecx
		sub	[esp+18h], ecx
		jmp	loc_452764
; ---------------------------------------------------------------------------

loc_4527EF:				; CODE XREF: _main+45Aj
		mov	eax, [esp+2Ch]
		mov	eax, [eax]
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aErrorInS ; "error in	%s\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		jmp	loc_452730
; ---------------------------------------------------------------------------

loc_452813:				; CODE XREF: _main+454j _main+4EAj ...
		xor	ebx, ebx
		jmp	loc_4525BD
; ---------------------------------------------------------------------------

loc_45281A:				; CODE XREF: _main+164j
		mov	dword ptr [esp], offset	aSsleay_conf_2 ; "SSLEAY_CONF"
		call	_getenv
		mov	ebx, eax
		test	eax, eax
		jnz	loc_45243E
		call	_make_config_name
		mov	esi, eax
		mov	ebx, eax
		jmp	loc_45243E
; ---------------------------------------------------------------------------

loc_45283E:				; CODE XREF: _main+43Bj
		mov	dword ptr [esp+4], offset aBadExit ; "bad exit\n"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	ebx, 1
		jmp	loc_4525BD
; ---------------------------------------------------------------------------

loc_45285D:				; CODE XREF: _main+263j
		mov	dword ptr [esp+1Ch], 0
		jmp	loc_45256A
_main		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


_check_end	proc near		; CODE XREF: _req_main+17E5p
					; _req_main+17F5p ...

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, eax
		or	ebp, 0FFFFFFFFh
		xor	eax, eax
		mov	ecx, ebp
		mov	edi, edx
		repne scasb
		not	ecx
		lea	esi, [ecx-1]
		mov	ecx, ebp
		mov	edi, ebx
		repne scasb
		not	ecx
		dec	ecx
		mov	eax, 1
		cmp	esi, ecx
		jg	short loc_4528AB
		mov	[esp+2Ch+var_28], edx ;	char *
		sub	ecx, esi
		add	ebx, ecx
		mov	[esp+2Ch+var_2C], ebx ;	char *
		call	_strcmp

loc_4528AB:				; CODE XREF: _check_end+29j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_check_end	endp


; =============== S U B	R O U T	I N E =======================================


_set_keygen_ctx	proc near		; CODE XREF: _req_main+2BD8p
					; _req_main+2FBDp

var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	[esp+5Ch+var_34], eax
		mov	ebp, edx
		mov	esi, ecx
		test	edx, edx
		jnz	short loc_4528DB
		mov	dword ptr [ecx], 6
		mov	eax, [esp+5Ch+arg_0]
		mov	eax, [eax]
		mov	[esp+5Ch+var_38], eax
		jmp	loc_452B39
; ---------------------------------------------------------------------------

loc_4528DB:				; CODE XREF: _set_keygen_ctx+11j
		mov	al, [edx]
		sub	eax, 30h
		cmp	al, 9
		ja	short loc_452901
		mov	dword ptr [ecx], 6
		mov	[esp+5Ch+var_5C], edx ;	char *
		call	_atol
		mov	[esp+5Ch+var_38], eax
		mov	edx, [esp+5Ch+arg_0]
		mov	[edx], eax
		jmp	loc_452B39
; ---------------------------------------------------------------------------

loc_452901:				; CODE XREF: _set_keygen_ctx+2Fj
		mov	[esp+5Ch+var_54], 6 ; size_t
		mov	[esp+5Ch+var_58], offset aParam	; "param:"
		mov	[esp+5Ch+var_5C], edx ;	char *
		call	_strncmp
		test	eax, eax
		jnz	short loc_45292D
		lea	edi, [ebp+6]
		mov	[esp+5Ch+var_38], 0FFFFFFFFh
		jmp	loc_452A1E
; ---------------------------------------------------------------------------

loc_45292D:				; CODE XREF: _set_keygen_ctx+68j
		mov	[esp+5Ch+var_58], 3Ah ;	int
		mov	[esp+5Ch+var_5C], ebp ;	char *
		call	_strchr
		mov	ebx, eax
		test	eax, eax
		jz	short loc_452949
		mov	edi, eax
		sub	edi, ebp
		jmp	short loc_452959
; ---------------------------------------------------------------------------

loc_452949:				; CODE XREF: _set_keygen_ctx+8Ej
		xor	eax, eax
		or	ecx, 0FFFFFFFFh
		mov	edi, ebp
		repne scasb
		mov	edx, ecx
		not	edx
		lea	edi, [edx-1]

loc_452959:				; CODE XREF: _set_keygen_ctx+94j
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], ebp
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_5C], eax
		call	_EVP_PKEY_asn1_find_str
		test	eax, eax
		jnz	short loc_452994
		mov	[esp+5Ch+var_50], ebp
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], offset aUnknownAlgorit ; "Unknown algorithm %.*s\n"
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_452CC0
; ---------------------------------------------------------------------------

loc_452994:				; CODE XREF: _set_keygen_ctx+BCj
		mov	[esp+5Ch+var_48], eax
		mov	[esp+5Ch+var_4C], 0
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], esi
		mov	[esp+5Ch+var_5C], 0
		call	_EVP_PKEY_asn1_get0_info
		mov	eax, [esp+5Ch+var_20]
		test	eax, eax
		jz	short loc_4529D0
		mov	[esp+5Ch+var_5C], eax
		call	_ENGINE_finish

loc_4529D0:				; CODE XREF: _set_keygen_ctx+113j
		cmp	dword ptr [esi], 6
		jnz	short loc_452A00
		test	ebx, ebx
		jz	short loc_4529F1
		inc	ebx
		mov	[esp+5Ch+var_5C], ebx ;	char *
		call	_atol
		mov	[esp+5Ch+var_38], eax
		mov	ecx, [esp+5Ch+arg_0]
		mov	[ecx], eax
		jmp	loc_452B39
; ---------------------------------------------------------------------------

loc_4529F1:				; CODE XREF: _set_keygen_ctx+124j
		mov	eax, [esp+5Ch+arg_0]
		mov	eax, [eax]
		mov	[esp+5Ch+var_38], eax
		jmp	loc_452B39
; ---------------------------------------------------------------------------

loc_452A00:				; CODE XREF: _set_keygen_ctx+120j
		test	ebx, ebx
		jz	short loc_452A11
		lea	edi, [ebx+1]
		mov	[esp+5Ch+var_38], 0FFFFFFFFh
		jmp	short loc_452A1E
; ---------------------------------------------------------------------------

loc_452A11:				; CODE XREF: _set_keygen_ctx+14Fj
		mov	[esp+5Ch+var_38], 0FFFFFFFFh
		jmp	loc_452B39
; ---------------------------------------------------------------------------

loc_452A1E:				; CODE XREF: _set_keygen_ctx+75j
					; _set_keygen_ctx+15Cj
		test	edi, edi
		jz	loc_452B39
		mov	[esp+5Ch+var_58], offset aR_6 ;	"r"
		mov	[esp+5Ch+var_5C], edi
		call	_BIO_new_file
		mov	ebp, eax
		test	eax, eax
		jnz	short loc_452A5B
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], offset aCanTOpenPara_0 ; "Can't open parameter file %s\n"
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_452CC0
; ---------------------------------------------------------------------------

loc_452A5B:				; CODE XREF: _set_keygen_ctx+187j
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], eax
		call	_PEM_read_bio_Parameters
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_452ACF
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 1
		mov	[esp+5Ch+var_5C], ebp
		call	_BIO_ctrl
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], ebp
		call	_PEM_read_bio_X509
		test	eax, eax
		jz	short loc_452ACF
		mov	[esp+5Ch+var_5C], eax
		mov	[esp+5Ch+var_30], eax
		call	_X509_get_pubkey
		mov	ebx, eax
		mov	ecx, [esp+5Ch+var_30]
		mov	[esp+5Ch+var_5C], ecx
		call	_X509_free

loc_452ACF:				; CODE XREF: _set_keygen_ctx+1BCj
					; _set_keygen_ctx+200j
		mov	[esp+5Ch+var_5C], ebp
		call	_BIO_free
		test	ebx, ebx
		jnz	short loc_452AFA
		mov	[esp+5Ch+var_54], edi
		mov	[esp+5Ch+var_58], offset aErrorReading_8 ; "Error reading parameter file %s\n"
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_452CC0
; ---------------------------------------------------------------------------

loc_452AFA:				; CODE XREF: _set_keygen_ctx+226j
		mov	edi, [esi]
		mov	[esp+5Ch+var_5C], ebx
		cmp	edi, 0FFFFFFFFh
		jnz	short loc_452B0D
		call	_EVP_PKEY_id
		mov	[esi], eax
		jmp	short loc_452B3B
; ---------------------------------------------------------------------------

loc_452B0D:				; CODE XREF: _set_keygen_ctx+24Fj
		call	_EVP_PKEY_base_id
		cmp	edi, eax
		jz	short loc_452B3B
		mov	[esp+5Ch+var_58], offset aKeyTypeDoesNot ; "Key	Type does not match parameters\n"
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_printf
		mov	[esp+5Ch+var_5C], ebx
		call	_EVP_PKEY_free
		xor	edi, edi
		jmp	loc_452CC0
; ---------------------------------------------------------------------------

loc_452B39:				; CODE XREF: _set_keygen_ctx+23j
					; _set_keygen_ctx+49j ...
		xor	ebx, ebx

loc_452B3B:				; CODE XREF: _set_keygen_ctx+258j
					; _set_keygen_ctx+261j
		cmp	[esp+5Ch+arg_4], 0
		jz	loc_452BC9
		mov	eax, [esi]
		mov	[esp+5Ch+var_58], eax
		lea	eax, [esp+5Ch+var_24]
		mov	[esp+5Ch+var_5C], eax
		call	_EVP_PKEY_asn1_find
		test	eax, eax
		jnz	short loc_452B77
		mov	[esp+5Ch+var_58], offset aInternalErro_0 ; "Internal error: can't find key algorith"...
		mov	eax, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], eax
		call	_BIO_puts
		xor	edi, edi
		jmp	loc_452CC0
; ---------------------------------------------------------------------------

loc_452B77:				; CODE XREF: _set_keygen_ctx+2A7j
		mov	[esp+5Ch+var_48], eax
		lea	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 0
		mov	[esp+5Ch+var_54], 0
		mov	[esp+5Ch+var_58], 0
		mov	[esp+5Ch+var_5C], 0
		call	_EVP_PKEY_asn1_get0_info
		mov	eax, [esp+5Ch+var_20]
		mov	[esp+5Ch+var_5C], eax
		call	_BUF_strdup
		mov	ecx, [esp+5Ch+arg_4]
		mov	[ecx], eax
		mov	eax, [esp+5Ch+var_24]
		test	eax, eax
		jz	short loc_452BC9
		mov	[esp+5Ch+var_5C], eax
		call	_ENGINE_finish

loc_452BC9:				; CODE XREF: _set_keygen_ctx+28Dj
					; _set_keygen_ctx+30Cj
		test	ebx, ebx
		jz	short loc_452BF7
		mov	eax, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_58], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_EVP_PKEY_CTX_new
		mov	edi, eax
		mov	[esp+5Ch+var_5C], ebx
		call	_EVP_PKEY_bits
		mov	edx, [esp+5Ch+arg_0]
		mov	[edx], eax
		mov	[esp+5Ch+var_5C], ebx
		call	_EVP_PKEY_free
		jmp	short loc_452C0B
; ---------------------------------------------------------------------------

loc_452BF7:				; CODE XREF: _set_keygen_ctx+318j
		mov	eax, [esi]
		mov	ecx, [esp+5Ch+arg_8]
		mov	[esp+5Ch+var_58], ecx
		mov	[esp+5Ch+var_5C], eax
		call	_EVP_PKEY_CTX_new_id
		mov	edi, eax

loc_452C0B:				; CODE XREF: _set_keygen_ctx+342j
		test	edi, edi
		jnz	short loc_452C30
		mov	[esp+5Ch+var_58], offset aErrorAllocat_0 ; "Error allocating keygen context\n"
		mov	esi, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_puts
		mov	[esp+5Ch+var_5C], esi
		call	_ERR_print_errors
		jmp	loc_452CC0
; ---------------------------------------------------------------------------

loc_452C30:				; CODE XREF: _set_keygen_ctx+35Aj
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_PKEY_keygen_init
		test	eax, eax
		jg	short loc_452C5C
		mov	[esp+5Ch+var_58], offset aErrorInitial_3 ; "Error initializing keygen context\n"
		mov	esi, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_puts
		mov	[esp+5Ch+var_5C], esi
		call	_ERR_print_errors
		xor	edi, edi
		jmp	short loc_452CC0
; ---------------------------------------------------------------------------

loc_452C5C:				; CODE XREF: _set_keygen_ctx+387j
		cmp	dword ptr [esi], 6
		jnz	short loc_452CC0
		mov	eax, [esp+5Ch+var_38]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_452CC0
		mov	[esp+5Ch+var_48], 0
		mov	[esp+5Ch+var_4C], eax
		mov	[esp+5Ch+var_50], 1003h
		mov	[esp+5Ch+var_54], 4
		mov	[esp+5Ch+var_58], 6
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_PKEY_CTX_ctrl
		test	eax, eax
		jg	short loc_452CC0
		mov	[esp+5Ch+var_58], offset aErrorSettingRs ; "Error setting RSA keysize\n"
		mov	esi, [esp+5Ch+var_34]
		mov	[esp+5Ch+var_5C], esi
		call	_BIO_puts
		mov	[esp+5Ch+var_5C], esi
		call	_ERR_print_errors
		mov	[esp+5Ch+var_5C], edi
		call	_EVP_PKEY_CTX_free
		xor	edi, edi

loc_452CC0:				; CODE XREF: _set_keygen_ctx+DCj
					; _set_keygen_ctx+1A3j	...
		mov	eax, edi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_set_keygen_ctx	endp


; =============== S U B	R O U T	I N E =======================================


; int __usercall build_subject@<eax>(int@<ecx>,	char *@<edx>, int)
_build_subject	proc near		; CODE XREF: _req_main+762p
					; _req_main+2639p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	esi
		push	ebx
		sub	esp, 14h
		mov	esi, eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], eax ;	int
		mov	[esp+1Ch+var_18], ecx ;	int
		mov	[esp+1Ch+var_1C], edx ;	char *
		call	_parse_name
		mov	ebx, eax
		test	eax, eax
		jz	short loc_452D1C
		mov	[esp+1Ch+var_18], eax
		mov	[esp+1Ch+var_1C], esi
		call	_X509_REQ_set_subject_name
		test	eax, eax
		jnz	short loc_452D0D
		mov	[esp+1Ch+var_10], eax
		mov	[esp+1Ch+var_1C], ebx
		call	_X509_NAME_free
		mov	eax, [esp+1Ch+var_10]
		jmp	short loc_452D1E
; ---------------------------------------------------------------------------

loc_452D0D:				; CODE XREF: _build_subject+2Fj
		mov	[esp+1Ch+var_1C], ebx
		call	_X509_NAME_free
		mov	eax, 1
		jmp	short loc_452D1E
; ---------------------------------------------------------------------------

loc_452D1C:				; CODE XREF: _build_subject+1Fj
		xor	eax, eax

loc_452D1E:				; CODE XREF: _build_subject+41j
					; _build_subject+50j
		add	esp, 14h
		pop	ebx
		pop	esi
		retn
_build_subject	endp


; =============== S U B	R O U T	I N E =======================================


_req_check_len	proc near		; CODE XREF: _req_main+1AD7p
					; _req_main+2059p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebx
		sub	esp, 18h
		mov	ebx, eax
		test	edx, edx
		jle	short loc_452D4F
		cmp	eax, edx
		jge	short loc_452D4F
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_18], offset aStringIsTooSho ; "string is too short, it needs to be	at "...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	short loc_452D77
; ---------------------------------------------------------------------------

loc_452D4F:				; CODE XREF: _req_check_len+8j
					; _req_check_len+Cj
		mov	eax, 1
		test	ecx, ecx
		js	short loc_452D77
		cmp	ebx, ecx
		jle	short loc_452D77
		mov	[esp+1Ch+var_14], ecx
		mov	[esp+1Ch+var_18], offset aStringIsTooLon ; "string is too long,	it needs to be less"...
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		xor	eax, eax

loc_452D77:				; CODE XREF: _req_check_len+29j
					; _req_check_len+32j ...
		add	esp, 18h
		pop	ebx
		retn
_req_check_len	endp


; =============== S U B	R O U T	I N E =======================================


; int __cdecl do_body(int, int,	int, int, int, char *, int, int, int, char *, int, int,	int, int, int, int, int, int, int, int,	int, int)
_do_body	proc near		; CODE XREF: _ca_main+21B1p
					; _ca_main+299Dp ...

var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= byte ptr -38h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h
arg_30		= dword	ptr  34h
arg_34		= dword	ptr  38h
arg_38		= dword	ptr  3Ch
arg_3C		= dword	ptr  40h
arg_40		= dword	ptr  44h
arg_44		= dword	ptr  48h
arg_48		= dword	ptr  4Ch
arg_4C		= dword	ptr  50h
arg_50		= dword	ptr  54h
arg_54		= dword	ptr  58h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 9Ch
		mov	[esp+0ACh+var_68], eax
		mov	[esp+0ACh+var_60], edx
		mov	[esp+0ACh+var_64], ecx
		mov	ebx, [esp+0ACh+arg_14]
		call	_ASN1_UTCTIME_new
		mov	[esp+0ACh+var_6C], eax
		test	eax, eax
		jnz	short loc_452DC2
		mov	[esp+0ACh+var_A8], offset aMallocError_0 ; "malloc error\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		xor	eax, eax
		jmp	loc_453E99
; ---------------------------------------------------------------------------

loc_452DC2:				; CODE XREF: _do_body+28j
		mov	[esp+0ACh+var_50], 0
		mov	[esp+0ACh+var_4C], 0
		mov	[esp+0ACh+var_48], 0
		mov	[esp+0ACh+var_44], 0
		mov	[esp+0ACh+var_40], 0
		mov	[esp+0ACh+var_3C], 0
		test	ebx, ebx
		jz	short loc_452E71
		mov	eax, [esp+0ACh+arg_1C]
		mov	[esp+0ACh+var_A4], eax ; int
		mov	eax, [esp+0ACh+arg_18]
		mov	[esp+0ACh+var_A8], eax ; int
		mov	[esp+0ACh+var_AC], ebx ; char *
		call	_parse_name
		mov	ebx, eax
		test	eax, eax
		jnz	short loc_452E46
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_ERR_print_errors
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		mov	[esp+0ACh+var_88], 0
		mov	[esp+0ACh+var_70], 0
		xor	ebp, ebp
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_452E46:				; CODE XREF: _do_body+9Cj
		mov	[esp+0ACh+var_A8], eax
		mov	eax, [esp+0ACh+arg_38]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_REQ_set_subject_name
		mov	eax, [esp+0ACh+arg_38]
		mov	eax, [eax]
		mov	dword ptr [eax+8], 1
		mov	[esp+0ACh+var_AC], ebx
		call	_X509_NAME_free

loc_452E71:				; CODE XREF: _do_body+78j
		cmp	[esp+0ACh+arg_4C], 0
		jz	short loc_452E90
		mov	[esp+0ACh+var_A8], offset aTheSubjectSDis ; "The Subject's Distinguished Name is as "...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf

loc_452E90:				; CODE XREF: _do_body+FDj
		mov	eax, [esp+0ACh+arg_38]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		mov	[esp+0ACh+var_8C], eax
		xor	ebx, ebx

loc_452EA2:				; CODE XREF: _do_body+26Ej
		mov	eax, [esp+0ACh+var_8C]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_entry_count
		cmp	eax, ebx
		jle	loc_452FEF
		mov	[esp+0ACh+var_A8], ebx
		mov	eax, [esp+0ACh+var_8C]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_get_entry
		mov	edi, eax
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_ENTRY_get_data
		mov	esi, eax
		mov	[esp+0ACh+var_AC], edi
		call	_X509_NAME_ENTRY_get_object
		mov	ebp, eax
		cmp	ds:_msie_hack, 0
		jz	short loc_452F26
		mov	eax, [edi]
		mov	[esp+0ACh+var_AC], eax
		call	_OBJ_obj2nid
		mov	edi, eax
		cmp	dword ptr [esi+4], 1Ch
		jnz	short loc_452EFF
		mov	[esp+0ACh+var_AC], esi
		call	_ASN1_UNIVERSALSTRING_to_string

loc_452EFF:				; CODE XREF: _do_body+179j
		mov	edx, [esi+4]
		cmp	edx, 16h
		jnz	short loc_452F15
		cmp	edi, 30h
		jz	short loc_452F26
		mov	dword ptr [esi+4], 14h
		jmp	short loc_452F26
; ---------------------------------------------------------------------------

loc_452F15:				; CODE XREF: _do_body+189j
		cmp	edi, 30h
		jnz	short loc_452F26
		cmp	edx, 13h
		jnz	short loc_452F26
		mov	dword ptr [esi+4], 16h

loc_452F26:				; CODE XREF: _do_body+167j
					; _do_body+18Ej ...
		mov	[esp+0ACh+var_AC], ebp
		call	_OBJ_obj2nid
		cmp	eax, 30h
		jnz	short loc_452F41
		cmp	[esp+0ACh+arg_20], 0
		jz	loc_452FE9

loc_452F41:				; CODE XREF: _do_body+1B5j
		mov	[esp+0ACh+var_AC], ebp
		call	_OBJ_obj2nid
		cmp	eax, 30h
		jnz	short loc_452F5E
		cmp	dword ptr [esi+4], 16h
		jz	short loc_452F5E
		mov	[esp+0ACh+var_A8], offset aEmailaddressTy ; "\nemailAddress type needs to be of	type"...
		jmp	short loc_452F9C
; ---------------------------------------------------------------------------

loc_452F5E:				; CODE XREF: _do_body+1D0j
					; _do_body+1D6j
		mov	eax, [esi+4]
		cmp	eax, 1Eh
		jz	short loc_452FCA
		cmp	eax, 0Ch
		jz	short loc_452FCA
		mov	edx, [esi]
		mov	eax, [esi+8]
		mov	[esp+0ACh+var_A8], edx
		mov	[esp+0ACh+var_AC], eax
		call	_ASN1_PRINTABLE_type
		cmp	eax, 14h
		jnz	short loc_452F89
		cmp	dword ptr [esi+4], 14h
		jz	short loc_452FCA
		jmp	short loc_452F94
; ---------------------------------------------------------------------------

loc_452F89:				; CODE XREF: _do_body+203j
		cmp	eax, 16h
		jnz	short loc_452FCA
		cmp	dword ptr [esi+4], 13h
		jnz	short loc_452FCA

loc_452F94:				; CODE XREF: _do_body+20Bj
		mov	[esp+0ACh+var_A8], offset aTheStringConta ; "\nThe string contains characters that a"...

loc_452F9C:				; CODE XREF: _do_body+1E0j
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		mov	[esp+0ACh+var_88], 0
		xor	ebx, ebx
		mov	[esp+0ACh+var_70], 0
		xor	ebp, ebp
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_452FCA:				; CODE XREF: _do_body+1E8j
					; _do_body+1EDj ...
		cmp	[esp+0ACh+arg_4C], 0
		jz	short loc_452FE9
		mov	[esp+0ACh+var_A4], esi
		mov	[esp+0ACh+var_A8], ebp
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_old_entry_print

loc_452FE9:				; CODE XREF: _do_body+1BFj
					; _do_body+256j
		inc	ebx
		jmp	loc_452EA2
; ---------------------------------------------------------------------------

loc_452FEF:				; CODE XREF: _do_body+134j
		call	_X509_NAME_new
		mov	[esp+0ACh+var_70], eax
		test	eax, eax
		jnz	short loc_45302A
		mov	[esp+0ACh+var_A8], offset aMemoryAlloca_0 ; "Memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		xor	ebx, ebx
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		mov	[esp+0ACh+var_88], 0
		xor	ebp, ebp
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_45302A:				; CODE XREF: _do_body+27Ej
		cmp	[esp+0ACh+arg_54], 0
		jz	short loc_453044
		mov	eax, [esp+0ACh+var_8C]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_dup
		mov	ebp, eax
		jmp	short loc_453057
; ---------------------------------------------------------------------------

loc_453044:				; CODE XREF: _do_body+2B6j
		mov	eax, [esp+0ACh+var_64]
		mov	eax, [eax]
		mov	eax, [eax+14h]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_dup
		mov	ebp, eax

loc_453057:				; CODE XREF: _do_body+2C6j
		test	ebp, ebp
		jz	loc_453154
		mov	[esp+0ACh+var_78], 0
		mov	[esp+0ACh+var_7C], 0
		xor	edi, edi
		mov	esi, edi
		jmp	short loc_4530ED
; ---------------------------------------------------------------------------

loc_453075:				; CODE XREF: _do_body+3B2j
		mov	[esp+0ACh+var_AC], eax
		call	_OBJ_nid2obj
		mov	[esp+0ACh+var_88], eax
		or	ebx, 0FFFFFFFFh

loc_453084:				; CODE XREF: _do_body+578j
		mov	[esp+0ACh+var_A4], ebx
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_A8], eax
		mov	eax, [esp+0ACh+var_8C]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_get_index_by_OBJ
		mov	[esp+0ACh+var_80], eax
		test	eax, eax
		jns	loc_45316B
		inc	ebx
		jnz	short loc_4530E9
		mov	[esp+0ACh+var_84], 0

loc_4530B3:				; CODE XREF: _do_body+407j
		mov	eax, [esp+0ACh+var_74]
		mov	ebx, [eax+8]
		mov	[esp+0ACh+var_A8], offset aOptional ; "optional"
		mov	[esp+0ACh+var_AC], ebx ; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_453188
		mov	edi, [esp+0ACh+var_80]
		cmp	[esp+0ACh+var_84], 0
		jnz	loc_45328C

loc_4530E1:				; CODE XREF: _do_body+536j
		test	edi, edi
		jns	loc_4532F0

loc_4530E9:				; CODE XREF: _do_body+32Dj
		inc	[esp+0ACh+var_78]

loc_4530ED:				; CODE XREF: _do_body+2F7j
		mov	eax, [esp+0ACh+arg_8]
		mov	[esp+0ACh+var_AC], eax
		call	_sk_num
		cmp	eax, [esp+0ACh+var_78]
		jle	loc_4532F9
		mov	eax, [esp+0ACh+var_78]
		mov	[esp+0ACh+var_A8], eax
		mov	eax, [esp+0ACh+arg_8]
		mov	[esp+0ACh+var_AC], eax
		call	_sk_value
		mov	[esp+0ACh+var_74], eax
		mov	eax, [eax+4]
		mov	[esp+0ACh+var_AC], eax
		call	_OBJ_txt2nid
		test	eax, eax
		jnz	loc_453075
		mov	eax, [esp+0ACh+var_74]
		mov	eax, [eax+4]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aSUnknownObject ; "%s:unknown	object type in 'policy' conf"...

loc_453147:				; CODE XREF: _do_body+43Ej
					; _do_body+472j ...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf

loc_453154:				; CODE XREF: _do_body+2DDj
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		mov	[esp+0ACh+var_88], 0
		xor	ebx, ebx
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_45316B:				; CODE XREF: _do_body+326j
		mov	eax, [esp+0ACh+var_80]
		mov	[esp+0ACh+var_A8], eax
		mov	eax, [esp+0ACh+var_8C]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_get_entry
		mov	[esp+0ACh+var_84], eax
		jmp	loc_4530B3
; ---------------------------------------------------------------------------

loc_453188:				; CODE XREF: _do_body+350j
		mov	[esp+0ACh+var_A8], offset aSupplied ; "supplied"
		mov	[esp+0ACh+var_AC], ebx ; char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_4531BC
		cmp	[esp+0ACh+var_84], 0
		jnz	loc_45327E
		mov	eax, [esp+0ACh+var_74]
		mov	eax, [eax+4]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aTheSFieldNeede ; "The %s field needed to be supplied	and "...
		jmp	short loc_453147
; ---------------------------------------------------------------------------

loc_4531BC:				; CODE XREF: _do_body+41Ej
		mov	[esp+0ACh+var_A8], offset aMatch ; "match"
		mov	[esp+0ACh+var_AC], ebx ; char *
		call	_strcmp
		test	eax, eax
		jnz	loc_45326D
		cmp	[esp+0ACh+var_84], 0
		jnz	short loc_4531F3
		mov	eax, [esp+0ACh+var_74]
		mov	eax, [eax+4]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aTheMandatorySF ; "The mandatory %s field was	missing\n"
		jmp	loc_453147
; ---------------------------------------------------------------------------

loc_4531F3:				; CODE XREF: _do_body+45Dj
		or	ebx, 0FFFFFFFFh

loc_4531F6:				; CODE XREF: _do_body+4EFj
		mov	[esp+0ACh+var_A4], ebx
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_A8], eax
		mov	[esp+0ACh+var_AC], ebp
		call	_X509_NAME_get_index_by_OBJ
		mov	edi, eax
		test	eax, eax
		jns	short loc_453231
		mov	edi, esi
		inc	ebx
		mov	eax, [esp+0ACh+var_74]
		mov	eax, [eax+4]
		jnz	loc_453471
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aTheSFieldDoesN ; "The %s field does not exist in the	CA c"...
		jmp	loc_453147
; ---------------------------------------------------------------------------

loc_453231:				; CODE XREF: _do_body+492j
		mov	[esp+0ACh+var_A8], eax
		mov	[esp+0ACh+var_AC], ebp
		call	_X509_NAME_get_entry
		mov	ebx, eax
		mov	eax, [esp+0ACh+var_84]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_ENTRY_get_data
		mov	esi, eax
		mov	[esp+0ACh+var_AC], ebx
		call	_X509_NAME_ENTRY_get_data
		mov	[esp+0ACh+var_7C], eax
		mov	[esp+0ACh+var_A8], eax
		mov	[esp+0ACh+var_AC], esi
		call	_ASN1_STRING_cmp
		test	eax, eax
		jz	short loc_453284
		mov	ebx, edi
		jmp	short loc_4531F6
; ---------------------------------------------------------------------------

loc_45326D:				; CODE XREF: _do_body+452j
		mov	[esp+0ACh+var_A4], ebx
		mov	[esp+0ACh+var_A8], offset aSInvalidTypeIn ; "%s:invalid	type in	'policy' configurati"...
		jmp	loc_453147
; ---------------------------------------------------------------------------

loc_45327E:				; CODE XREF: _do_body+425j
		mov	edi, [esp+0ACh+var_80]
		jmp	short loc_45328C
; ---------------------------------------------------------------------------

loc_453284:				; CODE XREF: _do_body+4EBj
		test	ebx, ebx
		jz	short loc_4532F0
		mov	[esp+0ACh+var_84], ebx

loc_45328C:				; CODE XREF: _do_body+35Fj
					; _do_body+506j
		mov	[esp+0ACh+var_A0], 0
		mov	[esp+0ACh+var_A4], 0FFFFFFFFh
		mov	eax, [esp+0ACh+var_84]
		mov	[esp+0ACh+var_A8], eax
		mov	eax, [esp+0ACh+var_70]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_add_entry
		test	eax, eax
		jnz	loc_4530E1
		mov	eax, [esp+0ACh+var_84]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_ENTRY_free
		mov	[esp+0ACh+var_A8], offset aMemoryAlloca_0 ; "Memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		mov	[esp+0ACh+var_88], 0
		xor	ebx, ebx
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_4532F0:				; CODE XREF: _do_body+367j
					; _do_body+50Aj
		mov	ebx, [esp+0ACh+var_80]
		jmp	loc_453084
; ---------------------------------------------------------------------------

loc_4532F9:				; CODE XREF: _do_body+384j
		cmp	ds:_preserve, 0
		jz	short loc_453326
		mov	eax, [esp+0ACh+var_70]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_free
		mov	eax, [esp+0ACh+var_8C]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_dup
		mov	[esp+0ACh+var_70], eax
		test	eax, eax
		jz	loc_45345D

loc_453326:				; CODE XREF: _do_body+584j
		cmp	[esp+0ACh+arg_34], 0
		jz	short loc_453345
		mov	[esp+0ACh+var_A8], offset aTheSubjectName ; "The subject name appears to be ok,	chec"...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf

loc_453345:				; CODE XREF: _do_body+5B2j
		mov	ebx, [esp+0ACh+var_70]
		cmp	[esp+0ACh+arg_20], 0
		jnz	short loc_4533A3
		mov	[esp+0ACh+var_AC], ebx
		call	_X509_NAME_dup
		mov	ebx, eax
		test	eax, eax
		jz	short loc_4533DC

loc_453361:				; CODE XREF: _do_body+625j
		mov	[esp+0ACh+var_A4], 0FFFFFFFFh
		mov	[esp+0ACh+var_A8], 30h
		mov	[esp+0ACh+var_AC], ebx
		call	_X509_NAME_get_index_by_NID
		mov	esi, eax
		test	eax, eax
		js	short loc_4533A3
		mov	[esp+0ACh+var_A8], esi
		mov	[esp+0ACh+var_AC], ebx
		call	_X509_NAME_get_entry
		mov	edi, eax
		mov	[esp+0ACh+var_A8], esi
		mov	[esp+0ACh+var_AC], ebx
		call	_X509_NAME_delete_entry
		mov	[esp+0ACh+var_AC], edi
		call	_X509_NAME_ENTRY_free
		jmp	short loc_453361
; ---------------------------------------------------------------------------

loc_4533A3:				; CODE XREF: _do_body+5D5j
					; _do_body+601j
		mov	eax, [esp+0ACh+arg_10]
		cmp	dword ptr [eax+4], 0
		jnz	short loc_4533C2
		mov	[esp+0ACh+var_AC], offset a00 ;	"00"
		call	_BUF_strdup
		mov	[esp+0ACh+var_44], eax
		jmp	short loc_4533D5
; ---------------------------------------------------------------------------

loc_4533C2:				; CODE XREF: _do_body+632j
		mov	eax, [esp+0ACh+arg_10]
		mov	[esp+0ACh+var_AC], eax
		call	_BN_bn2hex
		mov	[esp+0ACh+var_44], eax

loc_4533D5:				; CODE XREF: _do_body+644j
		cmp	[esp+0ACh+var_44], 0
		jnz	short loc_453406

loc_4533DC:				; CODE XREF: _do_body+5E3j
		mov	[esp+0ACh+var_A8], offset aMemoryAlloca_0 ; "Memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		mov	[esp+0ACh+var_88], 0
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_453406:				; CODE XREF: _do_body+65Ej
		mov	eax, [esp+0ACh+arg_C]
		cmp	dword ptr [eax], 0
		jz	loc_45355C
		mov	eax, [eax+4]
		lea	edx, [esp+0ACh+var_50]
		mov	[esp+0ACh+var_A4], edx
		mov	[esp+0ACh+var_A8], 5
		mov	[esp+0ACh+var_AC], eax
		call	_TXT_DB_get_by_index
		mov	esi, eax
		test	eax, eax
		jz	loc_45355C
		mov	eax, [esp+0ACh+var_3C]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aErrorThereIsAl ; "ERROR:There is already a certificate fo"...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		jmp	loc_453D6E
; ---------------------------------------------------------------------------

loc_45345D:				; CODE XREF: _do_body+5A4j
		xor	ebx, ebx
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		mov	[esp+0ACh+var_88], 0
		jmp	short loc_4534BF
; ---------------------------------------------------------------------------

loc_453471:				; CODE XREF: _do_body+49Ej
		mov	edx, offset aNull ; "NULL"
		test	esi, esi
		jz	short loc_45347D
		mov	edx, [edi+8]

loc_45347D:				; CODE XREF: _do_body+6FCj
		mov	ecx, [esp+0ACh+var_7C]
		test	ecx, ecx
		jz	loc_453552
		mov	ecx, [ecx+8]

loc_45348C:				; CODE XREF: _do_body+7DBj
		mov	[esp+0ACh+var_9C], edx
		mov	[esp+0ACh+var_A0], ecx
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aTheSFieldNee_0 ; "The %s field needed to be the same	in t"...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		mov	[esp+0ACh+var_88], 0
		xor	ebx, ebx

loc_4534BF:				; CODE XREF: _do_body+C5j
					; _do_body+249j ...
		xor	esi, esi

loc_4534C1:				; CODE XREF: _do_body+759j
		mov	eax, [esp+esi*4+0ACh+var_50]
		test	eax, eax
		jz	short loc_4534D1
		mov	[esp+0ACh+var_AC], eax
		call	_CRYPTO_free

loc_4534D1:				; CODE XREF: _do_body+74Bj
		inc	esi
		cmp	esi, 6
		jnz	short loc_4534C1
		test	ebp, ebp
		jz	short loc_4534E3
		mov	[esp+0ACh+var_AC], ebp
		call	_X509_NAME_free

loc_4534E3:				; CODE XREF: _do_body+75Dj
		mov	eax, [esp+0ACh+var_70]
		test	eax, eax
		jz	short loc_4534F3
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_free

loc_4534F3:				; CODE XREF: _do_body+76Dj
		test	ebx, ebx
		jz	short loc_453509
		cmp	[esp+0ACh+arg_20], 0
		jnz	short loc_453509
		mov	[esp+0ACh+var_AC], ebx
		call	_X509_NAME_free

loc_453509:				; CODE XREF: _do_body+779j
					; _do_body+783j
		mov	eax, [esp+0ACh+var_6C]
		mov	[esp+0ACh+var_AC], eax
		call	_ASN1_UTCTIME_free
		cmp	[esp+0ACh+var_8C], 1
		jz	short loc_453535
		mov	eax, [esp+0ACh+var_88]
		test	eax, eax
		jz	short loc_453549
		mov	[esp+0ACh+var_AC], eax
		call	_X509_free
		mov	eax, [esp+0ACh+var_8C]
		jmp	loc_453E99
; ---------------------------------------------------------------------------

loc_453535:				; CODE XREF: _do_body+79Ej
		mov	eax, [esp+0ACh+var_68]
		mov	ecx, [esp+0ACh+var_88]
		mov	[eax], ecx
		mov	eax, 1
		jmp	loc_453E99
; ---------------------------------------------------------------------------

loc_453549:				; CODE XREF: _do_body+7A6j
		mov	eax, [esp+0ACh+var_8C]
		jmp	loc_453E99
; ---------------------------------------------------------------------------

loc_453552:				; CODE XREF: _do_body+707j
		mov	ecx, offset aNull ; "NULL"
		jmp	loc_45348C
; ---------------------------------------------------------------------------

loc_45355C:				; CODE XREF: _do_body+694j
					; _do_body+6B9j
		mov	eax, [esp+0ACh+arg_C]
		mov	eax, [eax+4]
		lea	edx, [esp+0ACh+var_50]
		mov	[esp+0ACh+var_A4], edx
		mov	[esp+0ACh+var_A8], 3
		mov	[esp+0ACh+var_AC], eax
		call	_TXT_DB_get_by_index
		mov	esi, eax
		test	eax, eax
		jz	short loc_4535BB
		mov	eax, [esp+0ACh+var_44]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aErrorSerialNum ; "ERROR:Serial number %s has	already	been"...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_A8], offset aCheckTheDataba ; "	   check the database/serial_file fo"...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		jmp	loc_453D6E
; ---------------------------------------------------------------------------

loc_4535BB:				; CODE XREF: _do_body+806j
		cmp	[esp+0ACh+arg_34], 0
		jz	short loc_4535DA
		mov	[esp+0ACh+var_A8], offset aEverythingAppe ; "Everything	appears	to be ok, creating a"...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf

loc_4535DA:				; CODE XREF: _do_body+847j
		call	_X509_new
		mov	[esp+0ACh+var_88], eax
		test	eax, eax
		jz	loc_453D61
		mov	esi, [eax]
		mov	eax, [esi+4]
		mov	[esp+0ACh+var_A8], eax
		mov	eax, [esp+0ACh+arg_10]
		mov	[esp+0ACh+var_AC], eax
		call	_BN_to_ASN1_INTEGER
		test	eax, eax
		jz	loc_453D61
		cmp	[esp+0ACh+arg_54], 0
		jz	short loc_453671
		mov	eax, [esp+0ACh+var_70]

loc_453619:				; CODE XREF: _do_body+901j
		mov	[esp+0ACh+var_A8], eax
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_set_issuer_name
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		test	eax, eax
		jz	loc_4534BF
		mov	[esp+0ACh+var_A8], offset aToday ; "today"
		mov	eax, [esp+0ACh+arg_24]
		mov	[esp+0ACh+var_AC], eax ; char *
		call	_strcmp
		test	eax, eax
		mov	eax, [esp+0ACh+var_88]
		mov	eax, [eax]
		jnz	short loc_45367F
		mov	eax, [eax+10h]
		mov	eax, [eax]
		mov	[esp+0ACh+var_A8], 0
		mov	[esp+0ACh+var_AC], eax
		call	_X509_gmtime_adj
		jmp	short loc_453697
; ---------------------------------------------------------------------------

loc_453671:				; CODE XREF: _do_body+897j
		mov	eax, [esp+0ACh+var_64]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_get_subject_name
		jmp	short loc_453619
; ---------------------------------------------------------------------------

loc_45367F:				; CODE XREF: _do_body+8DCj
		mov	eax, [eax+10h]
		mov	eax, [eax]
		mov	ecx, [esp+0ACh+arg_24]
		mov	[esp+0ACh+var_A8], ecx
		mov	[esp+0ACh+var_AC], eax
		call	_ASN1_TIME_set_string

loc_453697:				; CODE XREF: _do_body+8F3j
		cmp	[esp+0ACh+arg_28], 0
		mov	eax, [esp+0ACh+var_88]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		mov	eax, [eax+4]
		jnz	short loc_4536D2
		mov	[esp+0ACh+var_A0], 0
		mov	[esp+0ACh+var_A4], 0
		mov	ecx, [esp+0ACh+arg_2C]
		mov	[esp+0ACh+var_A8], ecx
		mov	[esp+0ACh+var_AC], eax
		call	_X509_time_adj_ex
		jmp	short loc_4536E5
; ---------------------------------------------------------------------------

loc_4536D2:				; CODE XREF: _do_body+92Fj
		mov	ecx, [esp+0ACh+arg_28]
		mov	[esp+0ACh+var_A8], ecx
		mov	[esp+0ACh+var_AC], eax
		call	_ASN1_TIME_set_string

loc_4536E5:				; CODE XREF: _do_body+954j
		mov	eax, [esp+0ACh+var_70]
		mov	[esp+0ACh+var_A8], eax
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_set_subject_name
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		test	eax, eax
		jz	loc_4534BF
		mov	eax, [esp+0ACh+arg_38]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_REQ_get_pubkey
		mov	edi, eax
		mov	[esp+0ACh+var_A8], eax
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_set_pubkey
		mov	[esp+0ACh+var_84], eax
		mov	[esp+0ACh+var_AC], edi
		call	_EVP_PKEY_free
		mov	eax, [esp+0ACh+var_84]
		test	eax, eax
		jz	loc_4534BF
		cmp	[esp+0ACh+arg_3C], 0
		jz	loc_4538FB
		cmp	dword ptr [esi], 0
		jz	short loc_453780

loc_453755:				; CODE XREF: _do_body+A0Dj
		mov	eax, [esi]
		mov	[esp+0ACh+var_A8], 2
		mov	[esp+0ACh+var_AC], eax
		call	_ASN1_INTEGER_set
		mov	eax, [esi+24h]
		test	eax, eax
		jz	short loc_453790
		mov	[esp+0ACh+var_A8], offset _X509_EXTENSION_free
		mov	[esp+0ACh+var_AC], eax
		call	_sk_pop_free
		jmp	short loc_453790
; ---------------------------------------------------------------------------

loc_453780:				; CODE XREF: _do_body+9D7j
		call	_ASN1_INTEGER_new
		mov	[esi], eax
		test	eax, eax
		jnz	short loc_453755
		jmp	loc_453D61
; ---------------------------------------------------------------------------

loc_453790:				; CODE XREF: _do_body+9F0j
					; _do_body+A02j
		mov	dword ptr [esi+24h], 0
		cmp	[esp+0ACh+arg_54], 0
		mov	[esp+0ACh+var_98], 0
		mov	[esp+0ACh+var_9C], 0
		mov	eax, [esp+0ACh+arg_38]
		mov	[esp+0ACh+var_A0], eax
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_A4], eax
		jnz	short loc_4537C8
		mov	eax, [esp+0ACh+var_64]

loc_4537C8:				; CODE XREF: _do_body+A46j
		mov	[esp+0ACh+var_A8], eax
		lea	eax, [esp+0ACh+var_38]
		mov	[esp+0ACh+var_AC], eax
		call	_X509V3_set_ctx
		cmp	ds:_extconf, 0
		jz	loc_453869
		cmp	[esp+0ACh+arg_34], 0
		jz	short loc_453804
		mov	[esp+0ACh+var_A8], offset aExtraConfigura ; "Extra configuration file found\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf

loc_453804:				; CODE XREF: _do_body+A71j
		mov	eax, ds:_extconf
		mov	[esp+0ACh+var_A8], eax
		lea	esi, [esp+0ACh+var_38]
		mov	[esp+0ACh+var_AC], esi
		call	_X509V3_set_nconf
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_A0], eax
		mov	eax, [esp+0ACh+arg_3C]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], esi
		mov	eax, ds:_extconf
		mov	[esp+0ACh+var_AC], eax
		call	_X509V3_EXT_add_nconf
		test	eax, eax
		jz	short loc_4538AA
		cmp	[esp+0ACh+arg_34], 0
		jz	loc_4538FB
		mov	[esp+0ACh+var_A8], offset aSuccessfullyAd ; "Successfully added	extensions from	file"...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		jmp	loc_4538FB
; ---------------------------------------------------------------------------

loc_453869:				; CODE XREF: _do_body+A63j
		mov	eax, [esp+0ACh+arg_40]
		mov	[esp+0ACh+var_A8], eax
		lea	esi, [esp+0ACh+var_38]
		mov	[esp+0ACh+var_AC], esi
		call	_X509V3_set_nconf
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_A0], eax
		mov	eax, [esp+0ACh+arg_3C]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], esi
		mov	eax, [esp+0ACh+arg_40]
		mov	[esp+0ACh+var_AC], eax
		call	_X509V3_EXT_add_nconf
		test	eax, eax
		jnz	short loc_4538DC

loc_4538AA:				; CODE XREF: _do_body+AC3j
		mov	eax, [esp+0ACh+arg_3C]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aErrorAddingExt ; "ERROR: adding extensions in section %s\"...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_ERR_print_errors
		jmp	loc_453D61
; ---------------------------------------------------------------------------

loc_4538DC:				; CODE XREF: _do_body+B2Cj
		cmp	[esp+0ACh+arg_34], 0
		jz	short loc_4538FB
		mov	[esp+0ACh+var_A8], offset aSuccessfully_0 ; "Successfully added	extensions from	conf"...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf

loc_4538FB:				; CODE XREF: _do_body+9CEj
					; _do_body+ACDj ...
		mov	eax, [esp+0ACh+arg_50]
		mov	[esp+0ACh+var_A4], eax
		mov	eax, [esp+0ACh+arg_38]
		mov	[esp+0ACh+var_A8], eax
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_AC], eax
		call	_copy_extensions
		test	eax, eax
		jnz	short loc_453950
		mov	[esp+0ACh+var_A8], offset aErrorAddingE_0 ; "ERROR: adding extensions from request\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_ERR_print_errors
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_453950:				; CODE XREF: _do_body+BA3j
		cmp	[esp+0ACh+arg_20], 0
		jz	short loc_4539AB

loc_45395A:				; CODE XREF: _do_body+C4Fj
		cmp	[esp+0ACh+arg_4C], 0
		jnz	short loc_4539CD
		mov	[esp+0ACh+var_A8], offset aCertificateDet ; "Certificate Details:\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	eax, [esp+0ACh+arg_44]
		or	eax, 208h
		mov	[esp+0ACh+var_A0], eax
		mov	eax, [esp+0ACh+arg_48]
		mov	[esp+0ACh+var_A4], eax
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_A8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_X509_print_ex
		jmp	short loc_4539CD
; ---------------------------------------------------------------------------

loc_4539AB:				; CODE XREF: _do_body+BDCj
		mov	[esp+0ACh+var_A8], ebx
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_set_subject_name
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		test	eax, eax
		jz	loc_4534BF
		jmp	short loc_45395A
; ---------------------------------------------------------------------------

loc_4539CD:				; CODE XREF: _do_body+BE6j
					; _do_body+C2Dj
		mov	[esp+0ACh+var_A8], offset aCertificateIsT ; "Certificate is to be certified until "
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	eax, [esp+0ACh+var_88]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		mov	eax, [eax+4]
		mov	[esp+0ACh+var_A8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_ASN1_TIME_print
		cmp	[esp+0ACh+arg_2C], 0
		jz	short loc_453A29
		mov	eax, [esp+0ACh+arg_2C]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aLdDays ; " (%ld days)"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf

loc_453A29:				; CODE XREF: _do_body+C8Bj
		mov	[esp+0ACh+var_A8], offset asc_45C772 ; "\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		cmp	[esp+0ACh+arg_30], 0
		jnz	loc_453AFB
		mov	[esp+0ACh+var_A8], offset aSignTheCertifi ; "Sign the certificate? [y/n]:"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_A0], 0
		mov	[esp+0ACh+var_A4], 0
		mov	[esp+0ACh+var_A8], 0Bh
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_ctrl
		mov	[esp+0ACh+var_38], 0
		mov	eax, ds:__imp___iob
		mov	[esp+0ACh+var_A4], eax ; FILE *
		mov	[esp+0ACh+var_A8], 18h ; int
		lea	eax, [esp+0ACh+var_38]
		mov	[esp+0ACh+var_AC], eax ; char *
		call	_fgets
		test	eax, eax
		jnz	short loc_453ACE
		mov	[esp+0ACh+var_A8], offset aCertificateW_1 ; "CERTIFICATE WILL NOT BE CERTIFIED:	I/O "...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_8C], 0
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_453ACE:				; CODE XREF: _do_body+D2Ej
		mov	al, [esp+0ACh+var_38]
		and	eax, 0FFFFFFDFh
		cmp	al, 59h
		jz	short loc_453AFB
		mov	[esp+0ACh+var_A8], offset aCertificateW_2 ; "CERTIFICATE WILL NOT BE CERTIFIED\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_8C], 0
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_453AFB:				; CODE XREF: _do_body+CCAj
					; _do_body+D5Bj
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_get_pubkey
		mov	esi, eax
		mov	[esp+0ACh+var_AC], eax
		call	_EVP_PKEY_missing_parameters
		test	eax, eax
		jz	short loc_453B35
		mov	eax, [esp+0ACh+var_60]
		mov	[esp+0ACh+var_AC], eax
		call	_EVP_PKEY_missing_parameters
		test	eax, eax
		jnz	short loc_453B35
		mov	eax, [esp+0ACh+var_60]
		mov	[esp+0ACh+var_A8], eax
		mov	[esp+0ACh+var_AC], esi
		call	_EVP_PKEY_copy_parameters

loc_453B35:				; CODE XREF: _do_body+D97j
					; _do_body+DA7j
		mov	[esp+0ACh+var_AC], esi
		call	_EVP_PKEY_free
		mov	eax, [esp+0ACh+arg_4]
		mov	[esp+0ACh+var_9C], eax
		mov	eax, [esp+0ACh+arg_0]
		mov	[esp+0ACh+var_A0], eax
		mov	eax, [esp+0ACh+var_60]
		mov	[esp+0ACh+var_A4], eax
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_A8], eax
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_do_X509_sign
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		test	eax, eax
		jz	loc_4534BF
		mov	[esp+0ACh+var_A4], 82Fh
		mov	[esp+0ACh+var_A8], offset aCa_c	; "ca.c"
		mov	[esp+0ACh+var_AC], 2
		call	_CRYPTO_malloc
		mov	[esp+0ACh+var_50], eax
		mov	eax, [esp+0ACh+var_88]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		mov	edx, [eax+4]
		mov	[esp+0ACh+var_A4], 832h
		mov	[esp+0ACh+var_A8], offset aCa_c	; "ca.c"
		mov	ecx, [edx]
		mov	[esp+0ACh+var_84], edx
		lea	eax, [ecx+1]
		mov	[esp+0ACh+var_AC], eax
		call	_CRYPTO_malloc
		mov	[esp+0ACh+var_4C], eax
		mov	edx, [esp+0ACh+var_84]
		mov	esi, [edx+8]
		mov	ecx, [edx]
		mov	edi, eax
		rep movsb
		mov	eax, [edx]
		mov	edx, [esp+0ACh+var_4C]
		mov	byte ptr [edx+eax], 0
		mov	[esp+0ACh+var_48], 0
		mov	[esp+0ACh+var_A4], 839h
		mov	[esp+0ACh+var_A8], offset aCa_c	; "ca.c"
		mov	[esp+0ACh+var_AC], 8
		call	_CRYPTO_malloc
		mov	[esp+0ACh+var_40], eax
		mov	eax, [esp+0ACh+var_88]
		mov	[esp+0ACh+var_AC], eax
		call	_X509_get_subject_name
		mov	[esp+0ACh+var_A4], 0
		mov	[esp+0ACh+var_A8], 0
		mov	[esp+0ACh+var_AC], eax
		call	_X509_NAME_oneline
		mov	[esp+0ACh+var_3C], eax
		cmp	[esp+0ACh+var_50], 0
		jz	short loc_453C52
		cmp	[esp+0ACh+var_4C], 0
		jz	short loc_453C52
		mov	edx, [esp+0ACh+var_40]
		test	edx, edx
		jz	short loc_453C52
		test	eax, eax
		jnz	short loc_453C74

loc_453C52:				; CODE XREF: _do_body+EC1j
					; _do_body+EC8j ...
		mov	[esp+0ACh+var_A8], offset aMemoryAlloca_0 ; "Memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_453C74:				; CODE XREF: _do_body+ED4j
		mov	[esp+0ACh+var_A4], 8
		mov	[esp+0ACh+var_A8], offset aUnknown_0 ; "unknown"
		mov	[esp+0ACh+var_AC], edx
		call	_BUF_strlcpy
		mov	eax, [esp+0ACh+var_50]
		mov	byte ptr [eax],	56h
		mov	eax, [esp+0ACh+var_50]
		mov	byte ptr [eax+1], 0
		mov	[esp+0ACh+var_A4], 846h
		mov	[esp+0ACh+var_A8], offset aCa_c	; "ca.c"
		mov	[esp+0ACh+var_AC], 1Ch
		call	_CRYPTO_malloc
		xor	edx, edx
		test	eax, eax
		jnz	short loc_453CD7
		mov	[esp+0ACh+var_A8], offset aMemoryAlloca_0 ; "Memory allocation failure\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_453CD7:				; CODE XREF: _do_body+F3Fj
					; _do_body+F6Ej
		mov	ecx, [esp+edx*4+0ACh+var_50]
		mov	[eax+edx*4], ecx
		mov	[esp+edx*4+0ACh+var_50], 0
		inc	edx
		cmp	edx, 6
		jnz	short loc_453CD7
		mov	dword ptr [eax+18h], 0
		mov	ecx, [esp+0ACh+arg_C]
		mov	edx, [ecx+4]
		mov	[esp+0ACh+var_A8], eax
		mov	[esp+0ACh+var_AC], edx
		call	_TXT_DB_insert
		mov	[esp+0ACh+var_8C], 1
		test	eax, eax
		jnz	loc_4534BF
		mov	[esp+0ACh+var_A8], offset aFailedToUpdate ; "failed to update database\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	eax, [esp+0ACh+arg_C]
		mov	eax, [eax+4]
		mov	eax, [eax+10h]
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aTxt_dbErrorNum ; "TXT_DB error number %ld\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_453D61:				; CODE XREF: _do_body+869j
					; _do_body+889j ...
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_453D6E:				; CODE XREF: _do_body+6DCj
					; _do_body+83Aj
		mov	[esp+0ACh+var_A8], offset aTheMatchingEnt ; "The matching entry	has the	following de"...
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	eax, [esi]
		mov	al, [eax]
		cmp	al, 45h
		jz	short loc_453DA6
		cmp	al, 52h
		jz	short loc_453D9F
		mov	edx, offset aInvalidTypeDat ; "\ninvalid type, Data base error\n"
		cmp	al, 56h
		jnz	short loc_453DAB
		mov	edx, offset aValid ; "Valid"
		jmp	short loc_453DAB
; ---------------------------------------------------------------------------

loc_453D9F:				; CODE XREF: _do_body+1011j
		mov	edx, offset aRevoked ; "Revoked"
		jmp	short loc_453DAB
; ---------------------------------------------------------------------------

loc_453DA6:				; CODE XREF: _do_body+100Dj
		mov	edx, offset aExpired ; "Expired"

loc_453DAB:				; CODE XREF: _do_body+101Aj
					; _do_body+1021j ...
		mov	[esp+0ACh+var_A4], edx
		mov	[esp+0ACh+var_A8], offset aTypeS ; "Type	  :%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	eax, [esi]
		cmp	byte ptr [eax],	52h
		jnz	short loc_453DF0
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_453DD7
		mov	eax, offset aUndef ; "undef"

loc_453DD7:				; CODE XREF: _do_body+1054j
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aWasRevokedOnS ; "Was	revoked	on:%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf

loc_453DF0:				; CODE XREF: _do_body+104Dj
		mov	eax, [esi+4]
		test	eax, eax
		jnz	short loc_453DFC
		mov	eax, offset aUndef ; "undef"

loc_453DFC:				; CODE XREF: _do_body+1079j
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aExpiresOnS ;	"Expires on    :%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	eax, [esi+0Ch]
		test	eax, eax
		jnz	short loc_453E21
		mov	eax, offset aUndef ; "undef"

loc_453E21:				; CODE XREF: _do_body+109Ej
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aSerialNumberS ; "Serial Number :%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	eax, [esi+10h]
		test	eax, eax
		jnz	short loc_453E46
		mov	eax, offset aUndef ; "undef"

loc_453E46:				; CODE XREF: _do_body+10C3j
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aFileNameS ; "File name     :%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	eax, [esi+14h]
		test	eax, eax
		jnz	short loc_453E6B
		mov	eax, offset aUndef ; "undef"

loc_453E6B:				; CODE XREF: _do_body+10E8j
		mov	[esp+0ACh+var_A4], eax
		mov	[esp+0ACh+var_A8], offset aSubjectNameS	; "Subject Name	 :%s\n"
		mov	eax, ds:_bio_err
		mov	[esp+0ACh+var_AC], eax
		call	_BIO_printf
		mov	[esp+0ACh+var_8C], 0FFFFFFFFh
		mov	[esp+0ACh+var_88], 0
		jmp	loc_4534BF
; ---------------------------------------------------------------------------

loc_453E99:				; CODE XREF: _do_body+41j
					; _do_body+7B4j ...
		add	esp, 9Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_do_body	endp


; =============== S U B	R O U T	I N E =======================================


_certify	proc near		; CODE XREF: _ca_main+25A6p
					; _ca_main+272Dp

var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch
arg_C		= dword	ptr  10h
arg_10		= dword	ptr  14h
arg_14		= dword	ptr  18h
arg_18		= dword	ptr  1Ch
arg_1C		= dword	ptr  20h
arg_20		= dword	ptr  24h
arg_24		= dword	ptr  28h
arg_28		= dword	ptr  2Ch
arg_2C		= dword	ptr  30h
arg_30		= dword	ptr  34h
arg_34		= dword	ptr  38h
arg_38		= dword	ptr  3Ch
arg_3C		= dword	ptr  40h
arg_40		= dword	ptr  44h
arg_44		= dword	ptr  48h
arg_48		= dword	ptr  4Ch
arg_4C		= dword	ptr  50h
arg_50		= dword	ptr  54h
arg_54		= dword	ptr  58h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6Ch
		mov	[esp+7Ch+var_20], eax
		mov	edi, edx
		mov	ebp, ecx
		call	_BIO_s_file
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_new
		mov	esi, eax
		mov	[esp+7Ch+var_70], edi
		mov	[esp+7Ch+var_74], 3
		mov	[esp+7Ch+var_78], 6Ch
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_ctrl
		test	eax, eax
		jg	short loc_453EEF
		mov	[esp+7Ch+var_7C], edi ;	char *
		call	_perror
		jmp	loc_454138
; ---------------------------------------------------------------------------

loc_453EEF:				; CODE XREF: _certify+3Cj
		mov	[esp+7Ch+var_70], 0
		mov	[esp+7Ch+var_74], 0
		mov	[esp+7Ch+var_78], 0
		mov	[esp+7Ch+var_7C], esi
		call	_PEM_read_bio_X509_REQ
		mov	ebx, eax
		test	eax, eax
		mov	eax, ds:_bio_err
		jnz	short loc_453F33
		mov	[esp+7Ch+var_74], edi
		mov	[esp+7Ch+var_78], offset aErrorReading_9 ; "Error reading certificate request in %s"...
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		jmp	loc_454138
; ---------------------------------------------------------------------------

loc_453F33:				; CODE XREF: _certify+74j
		cmp	[esp+7Ch+arg_40], 0
		jz	short loc_453F49
		mov	[esp+7Ch+var_78], ebx
		mov	[esp+7Ch+var_7C], eax
		call	_X509_REQ_print

loc_453F49:				; CODE XREF: _certify+97j
		mov	[esp+7Ch+var_78], offset aCheckThatTheRe ; "Check that the request matches the sign"...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		cmp	[esp+7Ch+arg_54], 0
		jz	short loc_453F94
		mov	[esp+7Ch+var_78], ebp
		mov	[esp+7Ch+var_7C], ebx
		call	_X509_REQ_check_private_key
		test	eax, eax
		jnz	short loc_453F94
		mov	[esp+7Ch+var_78], offset aCertificateReq ; "Certificate	request	and CA private key "...
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		xor	edi, edi
		jmp	loc_454122
; ---------------------------------------------------------------------------

loc_453F94:				; CODE XREF: _certify+C2j _certify+D2j
		mov	[esp+7Ch+var_7C], ebx
		call	_X509_REQ_get_pubkey
		mov	edi, eax
		test	eax, eax
		jnz	short loc_453FBF
		mov	[esp+7Ch+var_78], offset aErrorUnpacking ; "error unpacking public key\n"
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		or	edi, 0FFFFFFFFh
		jmp	loc_454122
; ---------------------------------------------------------------------------

loc_453FBF:				; CODE XREF: _certify+FCj
		mov	[esp+7Ch+var_78], eax
		mov	[esp+7Ch+var_7C], ebx
		call	_X509_REQ_verify
		mov	[esp+7Ch+var_24], eax
		mov	[esp+7Ch+var_7C], edi
		call	_EVP_PKEY_free
		mov	eax, [esp+7Ch+var_24]
		test	eax, eax
		mov	eax, ds:_bio_err
		jns	short loc_453FEE
		mov	[esp+7Ch+var_78], offset aSignatureVer_0 ; "Signature verification problems....\n"
		jmp	short loc_453FF8
; ---------------------------------------------------------------------------

loc_453FEE:				; CODE XREF: _certify+13Ej
		jnz	short loc_454014
		mov	[esp+7Ch+var_78], offset aSignatureDid_1 ; "Signature did not match the	certificate"...

loc_453FF8:				; CODE XREF: _certify+148j
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, ds:_bio_err
		mov	[esp+7Ch+var_7C], eax
		call	_ERR_print_errors
		xor	edi, edi
		jmp	loc_454122
; ---------------------------------------------------------------------------

loc_454014:				; CODE XREF: _certify:loc_453FEEj
		mov	[esp+7Ch+var_78], offset aSignatureOk ;	"Signature ok\n"
		mov	[esp+7Ch+var_7C], eax
		call	_BIO_printf
		mov	eax, [esp+7Ch+arg_54]
		mov	[esp+7Ch+var_28], eax ;	int
		mov	eax, [esp+7Ch+arg_50]
		mov	[esp+7Ch+var_2C], eax ;	int
		mov	eax, [esp+7Ch+arg_4C]
		mov	[esp+7Ch+var_30], eax ;	int
		mov	eax, [esp+7Ch+arg_48]
		mov	[esp+7Ch+var_34], eax ;	int
		mov	eax, [esp+7Ch+arg_44]
		mov	[esp+7Ch+var_38], eax ;	int
		mov	eax, [esp+7Ch+arg_3C]
		mov	[esp+7Ch+var_3C], eax ;	int
		mov	eax, [esp+7Ch+arg_38]
		mov	[esp+7Ch+var_40], eax ;	int
		mov	[esp+7Ch+var_44], ebx ;	int
		mov	eax, [esp+7Ch+arg_40]
		mov	[esp+7Ch+var_48], eax ;	int
		mov	eax, [esp+7Ch+arg_34]
		mov	[esp+7Ch+var_4C], eax ;	int
		mov	eax, [esp+7Ch+arg_30]
		mov	[esp+7Ch+var_50], eax ;	int
		mov	eax, [esp+7Ch+arg_2C]
		mov	[esp+7Ch+var_54], eax ;	int
		mov	eax, [esp+7Ch+arg_28]
		mov	[esp+7Ch+var_58], eax ;	char *
		mov	eax, [esp+7Ch+arg_24]
		mov	[esp+7Ch+var_5C], eax ;	int
		mov	eax, [esp+7Ch+arg_20]
		mov	[esp+7Ch+var_60], eax ;	int
		mov	eax, [esp+7Ch+arg_1C]
		mov	[esp+7Ch+var_64], eax ;	int
		mov	eax, [esp+7Ch+arg_18]
		mov	[esp+7Ch+var_68], eax ;	char *
		mov	eax, [esp+7Ch+arg_14]
		mov	[esp+7Ch+var_6C], eax ;	int
		mov	eax, [esp+7Ch+arg_10]
		mov	[esp+7Ch+var_70], eax ;	int
		mov	eax, [esp+7Ch+arg_C]
		mov	[esp+7Ch+var_74], eax ;	int
		mov	eax, [esp+7Ch+arg_8]
		mov	[esp+7Ch+var_78], eax ;	int
		mov	eax, [esp+7Ch+arg_4]
		mov	[esp+7Ch+var_7C], eax ;	int
		mov	ecx, [esp+7Ch+arg_0]
		mov	edx, ebp
		mov	eax, [esp+7Ch+var_20]
		call	_do_body
		mov	edi, eax

loc_454122:				; CODE XREF: _certify+EBj
					; _certify+116j ...
		mov	[esp+7Ch+var_7C], ebx
		call	_X509_REQ_free

loc_45412A:				; CODE XREF: _certify+297j
		test	esi, esi
		jz	short loc_45413D
		mov	[esp+7Ch+var_7C], esi
		call	_BIO_free
		jmp	short loc_45413D
; ---------------------------------------------------------------------------

loc_454138:				; CODE XREF: _certify+46j _certify+8Aj
		or	edi, 0FFFFFFFFh
		jmp	short loc_45412A
; ---------------------------------------------------------------------------

loc_45413D:				; CODE XREF: _certify+288j
					; _certify+292j
		mov	eax, edi
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_certify	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


_ecparam_print_var proc	near		; CODE XREF: _ecparam_main+113Fp
					; _ecparam_main+115Ap ...

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	esi, eax
		mov	ebx, edx
		mov	edi, [esp+3Ch+arg_4]
		mov	eax, [esp+3Ch+arg_0]
		mov	[esp+3Ch+var_30], eax
		mov	[esp+3Ch+var_34], ecx
		mov	[esp+3Ch+var_38], offset aStaticUnsigned ; "static unsigned char %s_%d[] = {"
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_printf
		cmp	dword ptr [ebx+4], 0
		jnz	short loc_45418E
		mov	[esp+3Ch+var_38], offset a0x00 ; "\n\t0x00"
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_printf
		jmp	loc_454216
; ---------------------------------------------------------------------------

loc_45418E:				; CODE XREF: _ecparam_print_var+2Fj
		mov	[esp+3Ch+var_38], edi
		mov	[esp+3Ch+var_3C], ebx
		call	_BN_bn2bin
		xor	ebp, ebp
		dec	eax
		mov	[esp+3Ch+var_20], eax
		mov	ebx, 0Ch

loc_4541A6:				; CODE XREF: _ecparam_print_var+96j
		cmp	[esp+3Ch+var_20], ebp
		jle	short loc_4541E0
		mov	eax, ebp
		cdq
		idiv	ebx
		test	edx, edx
		jnz	short loc_4541C5
		mov	[esp+3Ch+var_38], offset asc_4604AC ; "\n\t"
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_printf

loc_4541C5:				; CODE XREF: _ecparam_print_var+6Bj
		movzx	eax, byte ptr [edi+ebp]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset a0x02x	; "0x%02X,"
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_printf
		inc	ebp
		jmp	short loc_4541A6
; ---------------------------------------------------------------------------

loc_4541E0:				; CODE XREF: _ecparam_print_var+62j
		mov	ebx, 0Ch
		mov	eax, ebp
		cdq
		idiv	ebx
		test	edx, edx
		jnz	short loc_4541FE
		mov	[esp+3Ch+var_38], offset asc_4604AC ; "\n\t"
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_printf

loc_4541FE:				; CODE XREF: _ecparam_print_var+A4j
		movzx	eax, byte ptr [edi+ebp]
		mov	[esp+3Ch+var_34], eax
		mov	[esp+3Ch+var_38], offset a0x02x_0 ; "0x%02X"
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_printf

loc_454216:				; CODE XREF: _ecparam_print_var+41j
		mov	[esp+3Ch+var_38], offset asc_4604BE ; "\n\t};\n\n"
		mov	[esp+3Ch+var_3C], esi
		call	_BIO_printf
		mov	eax, 1
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_ecparam_print_var endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn bp-based	frame

_Time_F_part_2	proc near		; CODE XREF: _speed_main:loc_42FBE3p
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		call	ds:__imp__GetLastError@0
		mov	ebx, eax
		mov	[esp+8], eax
		mov	dword ptr [esp+4], offset aUnableToCrea_3 ; "unable to CreateThread (%d)"
		mov	eax, ds:_bio_err
		mov	[esp], eax
		call	_BIO_printf
		mov	[esp], ebx	; uExitCode
		call	ds:__imp__ExitProcess@4
_Time_F_part_2	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


_set_pbe_isra_0	proc near		; CODE XREF: _pkcs12_main+17C2p
					; _pkcs12_main+17E3p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, edx
		test	edx, edx
		jz	short loc_4542C2
		mov	edi, eax
		mov	[esp+1Ch+var_18], offset aNone ; "NONE"
		mov	[esp+1Ch+var_1C], edx ;	char *
		call	_strcmp
		test	eax, eax
		jnz	short loc_454297
		mov	dword ptr [edi], 0FFFFFFFFh
		mov	esi, 1
		jmp	short loc_4542CB
; ---------------------------------------------------------------------------

loc_454297:				; CODE XREF: _set_pbe_isra_0+20j
		mov	[esp+1Ch+var_1C], ebx
		call	_OBJ_txt2nid
		mov	esi, eax
		mov	[edi], eax
		test	eax, eax
		jnz	short loc_4542C6
		mov	[esp+1Ch+var_14], ebx
		mov	[esp+1Ch+var_18], offset aUnknownPbeAlgo ; "Unknown PBE	algorithm %s\n"
		mov	eax, ds:_bio_err
		mov	[esp+1Ch+var_1C], eax
		call	_BIO_printf
		jmp	short loc_4542CB
; ---------------------------------------------------------------------------

loc_4542C2:				; CODE XREF: _set_pbe_isra_0+Aj
		xor	esi, esi
		jmp	short loc_4542CB
; ---------------------------------------------------------------------------

loc_4542C6:				; CODE XREF: _set_pbe_isra_0+3Dj
		mov	esi, 1

loc_4542CB:				; CODE XREF: _set_pbe_isra_0+2Dj
					; _set_pbe_isra_0+58j ...
		mov	eax, esi
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	edi
		retn
_set_pbe_isra_0	endp


; =============== S U B	R O U T	I N E =======================================


_make_names_stack proc near		; CODE XREF: _cms_main+1F4Ep
					; _cms_main+1F65p

var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	edi, eax
		call	_sk_new_null
		mov	[esp+3Ch+var_20], eax
		test	eax, eax
		jz	loc_454376
		xor	ebx, ebx

loc_4542F0:				; CODE XREF: _make_names_stack+9Aj
		mov	[esp+3Ch+var_3C], edi
		call	_sk_num
		cmp	eax, ebx
		jle	short loc_454370
		mov	[esp+3Ch+var_38], ebx
		mov	[esp+3Ch+var_3C], edi
		call	_sk_value
		mov	[esp+3Ch+var_28], 0
		mov	[esp+3Ch+var_2C], eax
		mov	[esp+3Ch+var_30], 1
		mov	[esp+3Ch+var_34], 0
		mov	[esp+3Ch+var_38], 0
		mov	[esp+3Ch+var_3C], 0
		call	_a2i_GENERAL_NAME
		mov	esi, eax
		test	eax, eax
		jz	short loc_45437A
		call	_GENERAL_NAMES_new
		mov	ebp, eax
		test	eax, eax
		jz	short loc_454380
		mov	[esp+3Ch+var_38], esi
		mov	[esp+3Ch+var_3C], eax
		call	_sk_push
		test	eax, eax
		jz	short loc_454380
		mov	[esp+3Ch+var_38], ebp
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_push
		test	eax, eax
		jz	short loc_45437E
		inc	ebx
		jmp	short loc_4542F0
; ---------------------------------------------------------------------------

loc_454370:				; CODE XREF: _make_names_stack+26j
		mov	eax, [esp+3Ch+var_20]
		jmp	short loc_4543AE
; ---------------------------------------------------------------------------

loc_454376:				; CODE XREF: _make_names_stack+14j
					; _make_names_stack+CEj
		xor	eax, eax
		jmp	short loc_4543AE
; ---------------------------------------------------------------------------

loc_45437A:				; CODE XREF: _make_names_stack+68j
		xor	ebp, ebp
		jmp	short loc_454380
; ---------------------------------------------------------------------------

loc_45437E:				; CODE XREF: _make_names_stack+97j
		xor	esi, esi

loc_454380:				; CODE XREF: _make_names_stack+73j
					; _make_names_stack+83j ...
		mov	[esp+3Ch+var_38], offset _GENERAL_NAMES_free
		mov	eax, [esp+3Ch+var_20]
		mov	[esp+3Ch+var_3C], eax
		call	_sk_pop_free
		test	ebp, ebp
		jz	short loc_4543A0
		mov	[esp+3Ch+var_3C], ebp
		call	_GENERAL_NAMES_free

loc_4543A0:				; CODE XREF: _make_names_stack+C2j
		test	esi, esi
		jz	short loc_454376
		mov	[esp+3Ch+var_3C], esi
		call	_GENERAL_NAME_free
		xor	eax, eax

loc_4543AE:				; CODE XREF: _make_names_stack+A0j
					; _make_names_stack+A4j
		add	esp, 2Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_make_names_stack endp


; =============== S U B	R O U T	I N E =======================================


_gnames_stack_print proc near		; CODE XREF: _cms_main+23CDp
					; _cms_main+23EBp

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, eax
		mov	[esp+2Ch+var_20], edx
		mov	[esp+2Ch+var_24], 0

loc_4543CB:				; CODE XREF: _gnames_stack_print+8Cj
		mov	eax, [esp+2Ch+var_20]
		mov	[esp+2Ch+var_2C], eax
		call	_sk_num
		cmp	eax, [esp+2Ch+var_24]
		jle	short loc_454444
		mov	eax, [esp+2Ch+var_24]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+var_20]
		mov	[esp+2Ch+var_2C], eax
		call	_sk_value
		mov	edi, eax
		xor	ebx, ebx

loc_4543F5:				; CODE XREF: _gnames_stack_print+86j
		mov	[esp+2Ch+var_2C], edi
		call	_sk_num
		cmp	eax, ebx
		jle	short loc_45443E
		mov	[esp+2Ch+var_28], ebx
		mov	[esp+2Ch+var_2C], edi
		call	_sk_value
		mov	ebp, eax
		mov	[esp+2Ch+var_28], offset asc_46D6FA ; "	   "
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_puts
		mov	[esp+2Ch+var_28], ebp
		mov	[esp+2Ch+var_2C], esi
		call	_GENERAL_NAME_print
		mov	[esp+2Ch+var_28], offset asc_46D6FF ; "\n"
		mov	[esp+2Ch+var_2C], esi
		call	_BIO_puts
		inc	ebx
		jmp	short loc_4543F5
; ---------------------------------------------------------------------------

loc_45443E:				; CODE XREF: _gnames_stack_print+49j
		inc	[esp+2Ch+var_24]
		jmp	short loc_4543CB
; ---------------------------------------------------------------------------

loc_454444:				; CODE XREF: _gnames_stack_print+25j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
_gnames_stack_print endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

_register_frame_ctor proc near		; DATA XREF: .text:00454474o
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	___gcc_register_frame
		mov	dword ptr [esp], offset	___gcc_deregister_frame	; func
		call	_atexit
		leave
		retn
_register_frame_ctor endp

; ---------------------------------------------------------------------------
		align 10h
		public ___CTOR_LIST__
___CTOR_LIST__	dd 0FFFFFFFFh		; DATA XREF: ___do_global_ctors+4r
					; ___do_global_ctors:loc_451763r ...
		dd offset _register_frame_ctor
		dd 0
		public __DTOR_LIST__
__DTOR_LIST__	dd 0FFFFFFFFh
dword_454480	dd 60h dup(0)		; DATA XREF: .data:_p_59322o
		dd 280h	dup(?)
_text		ends

; Section 2. (virtual address 00055000)
; Virtual size			: 000024AC (   9388.)
; Section size in file		: 00002600 (   9728.)
; Offset to raw	data for section: 00053C00
; Flags	C0600040: Data Readable	Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 455000h
		public ___mingw_winmain_nShowCmd
; DWORD	__mingw_winmain_nShowCmd
___mingw_winmain_nShowCmd dd 0Ah	; DATA XREF: ___tmainCRTStartup+1A3w
		align 20h
		public _functions
_functions	dd 1			; DATA XREF: _do_cmd+1B6o _do_cmd+54Ao ...
off_455024	dd offset aVerify_13	; DATA XREF: _do_cmd:loc_401850r
					; _do_cmd+538r	...
					; "verify"
		dd offset _verify_main
		dd 1
		dd offset aAsn1parse_1	; "asn1parse"
		dd offset _asn1parse_main
		dd 1
		dd offset aReq_1	; "req"
		dd offset _req_main
		dd 1
		dd offset aDgst		; "dgst"
		dd offset _dgst_main
		dd 1
		dd offset aDh_0		; "dh"
		dd offset _dh_main
		dd 1
		dd offset aDhparam_0	; "dhparam"
		dd offset _dhparam_main
		dd 1
		dd offset aEnc_0	; "enc"
		dd offset _enc_main
		dd 1
		dd offset aPasswd	; "passwd"
		dd offset _passwd_main
		dd 1
		dd offset aGendh	; "gendh"
		dd offset _gendh_main
		dd 1
		dd offset aErrstr	; "errstr"
		dd offset _errstr_main
		dd 1
		dd offset aCa_3		; "ca"
		dd offset _ca_main
		dd 1
		dd offset aCrl		; "crl"
		dd offset _crl_main
		dd 1
		dd offset aRsa_2	; "rsa"
		dd offset _rsa_main
		dd 1
		dd offset aRsautl	; "rsautl"
		dd offset _rsautl_main
		dd 1
		dd offset aDsa_1	; "dsa"
		dd offset _dsa_main
		dd 1
		dd offset aDsaparam_0	; "dsaparam"
		dd offset _dsaparam_main
		dd 1
		dd offset aEc		; "ec"
		dd offset _ec_main
		dd 1
		dd offset aEcparam	; "ecparam"
		dd offset _ecparam_main
		dd 1
		dd offset aX509_0	; "x509"
		dd offset _x509_main
		dd 1
		dd offset aGenrsa	; "genrsa"
		dd offset _genrsa_main
		dd 1
		dd offset aGendsa	; "gendsa"
		dd offset _gendsa_main
		dd 1
		dd offset aGenpkey	; "genpkey"
		dd offset _genpkey_main
		dd 1
		dd offset aS_server	; "s_server"
		dd offset _s_server_main
		dd 1
		dd offset aS_client	; "s_client"
		dd offset _s_client_main
		dd 1
		dd offset aSpeed	; "speed"
		dd offset _speed_main
		dd 1
		dd offset aS_time	; "s_time"
		dd offset _s_time_main
		dd 1
		dd offset aVersion	; "version"
		dd offset _version_main
		dd 1
		dd offset aPkcs7	; "pkcs7"
		dd offset _pkcs7_main
		dd 1
		dd offset aCms		; "cms"
		dd offset _cms_main
		dd 1
		dd offset aCrl2pkcs7	; "crl2pkcs7"
		dd offset _crl2pkcs7_main
		dd 1
		dd offset aSess_id	; "sess_id"
		dd offset _sess_id_main
		dd 1
		dd offset aCiphers	; "ciphers"
		dd offset _ciphers_main
		dd 1
		dd offset aNseq		; "nseq"
		dd offset _nseq_main
		dd 1
		dd offset aPkcs12_1	; "pkcs12"
		dd offset _pkcs12_main
		dd 1
		dd offset aPkcs8	; "pkcs8"
		dd offset _pkcs8_main
		dd 1
		dd offset aPkey		; "pkey"
		dd offset _pkey_main
		dd 1
		dd offset aPkeyparam	; "pkeyparam"
		dd offset _pkeyparam_main
		dd 1
		dd offset aPkeyutl	; "pkeyutl"
		dd offset _pkeyutl_main
		dd 1
		dd offset aSpkac_3	; "spkac"
		dd offset _spkac_main
		dd 1
		dd offset aSmime	; "smime"
		dd offset _smime_main
		dd 1
		dd offset aRand_15	; "rand"
		dd offset _rand_main
		dd 1
		dd offset aEngine_32	; "engine"
		dd offset _engine_main
		dd 1
		dd offset aOcsp		; "ocsp"
		dd offset _ocsp_main
		dd 1
		dd offset aPrime	; "prime"
		dd offset _prime_main
		dd 1
		dd offset aTs		; "ts"
		dd offset _ts_main
		dd 1
		dd offset aSrp_1	; "srp"
		dd offset _srp_main
		dd 2
		dd offset aMd4_1	; "md4"
		dd offset _dgst_main
		dd 2
		dd offset aMd5_1	; "md5"
		dd offset _dgst_main
		dd 2
		dd offset aSha_0	; "sha"
		dd offset _dgst_main
		dd 2
		dd offset aSha1_2	; "sha1"
		dd offset _dgst_main
		dd 2
		dd offset aMdc2_1	; "mdc2"
		dd offset _dgst_main
		dd 2
		dd offset aRmd160_0	; "rmd160"
		dd offset _dgst_main
		dd 3
		dd offset aAes128Cbc_1	; "aes-128-cbc"
		dd offset _enc_main
		dd 3
		dd offset aAes128Ecb	; "aes-128-ecb"
		dd offset _enc_main
		dd 3
		dd offset aAes192Cbc_1	; "aes-192-cbc"
		dd offset _enc_main
		dd 3
		dd offset aAes192Ecb	; "aes-192-ecb"
		dd offset _enc_main
		dd 3
		dd offset aAes256Cbc_1	; "aes-256-cbc"
		dd offset _enc_main
		dd 3
		dd offset aAes256Ecb	; "aes-256-ecb"
		dd offset _enc_main
		dd 3
		dd offset aCamellia128C_8 ; "camellia-128-cbc"
		dd offset _enc_main
		dd 3
		dd offset aCamellia128Ecb ; "camellia-128-ecb"
		dd offset _enc_main
		dd 3
		dd offset aCamellia192C_1 ; "camellia-192-cbc"
		dd offset _enc_main
		dd 3
		dd offset aCamellia192Ecb ; "camellia-192-ecb"
		dd offset _enc_main
		dd 3
		dd offset aCamellia256C_1 ; "camellia-256-cbc"
		dd offset _enc_main
		dd 3
		dd offset aCamellia256Ecb ; "camellia-256-ecb"
		dd offset _enc_main
		dd 3
		dd offset aBase64_2	; "base64"
		dd offset _enc_main
		dd 3
		dd offset aDes_6	; "des"
		dd offset _enc_main
		dd 3
		dd offset aDes3_4	; "des3"
		dd offset _enc_main
		dd 3
		dd offset aDesx		; "desx"
		dd offset _enc_main
		dd 3
		dd offset aIdea_4	; "idea"
		dd offset _enc_main
		dd 3
		dd offset aSeed_8	; "seed"
		dd offset _enc_main
		dd 3
		dd offset aRc4_0	; "rc4"
		dd offset _enc_main
		dd 3
		dd offset aRc440	; "rc4-40"
		dd offset _enc_main
		dd 3
		dd offset aRc2_1	; "rc2"
		dd offset _enc_main
		dd 3
		dd offset aBf_0		; "bf"
		dd offset _enc_main
		dd 3
		dd offset aCast_0	; "cast"
		dd offset _enc_main
		dd 3
		dd offset aDesEcb	; "des-ecb"
		dd offset _enc_main
		dd 3
		dd offset aDesEde	; "des-ede"
		dd offset _enc_main
		dd 3
		dd offset aDesEde3_1	; "des-ede3"
		dd offset _enc_main
		dd 3
		dd offset aDesCbc_1	; "des-cbc"
		dd offset _enc_main
		dd 3
		dd offset aDesEdeCbc	; "des-ede-cbc"
		dd offset _enc_main
		dd 3
		dd offset aDesEde3Cbc	; "des-ede3-cbc"
		dd offset _enc_main
		dd 3
		dd offset aDesCfb	; "des-cfb"
		dd offset _enc_main
		dd 3
		dd offset aDesEdeCfb	; "des-ede-cfb"
		dd offset _enc_main
		dd 3
		dd offset aDesEde3Cfb	; "des-ede3-cfb"
		dd offset _enc_main
		dd 3
		dd offset aDesOfb	; "des-ofb"
		dd offset _enc_main
		dd 3
		dd offset aDesEdeOfb	; "des-ede-ofb"
		dd offset _enc_main
		dd 3
		dd offset aDesEde3Ofb	; "des-ede3-ofb"
		dd offset _enc_main
		dd 3
		dd offset aIdeaCbc_2	; "idea-cbc"
		dd offset _enc_main
		dd 3
		dd offset aIdeaEcb	; "idea-ecb"
		dd offset _enc_main
		dd 3
		dd offset aIdeaCfb	; "idea-cfb"
		dd offset _enc_main
		dd 3
		dd offset aIdeaOfb	; "idea-ofb"
		dd offset _enc_main
		dd 3
		dd offset aSeedCbc_2	; "seed-cbc"
		dd offset _enc_main
		dd 3
		dd offset aSeedEcb	; "seed-ecb"
		dd offset _enc_main
		dd 3
		dd offset aSeedCfb	; "seed-cfb"
		dd offset _enc_main
		dd 3
		dd offset aSeedOfb	; "seed-ofb"
		dd offset _enc_main
		dd 3
		dd offset aRc2Cbc_2	; "rc2-cbc"
		dd offset _enc_main
		dd 3
		dd offset aRc2Ecb	; "rc2-ecb"
		dd offset _enc_main
		dd 3
		dd offset aRc2Cfb	; "rc2-cfb"
		dd offset _enc_main
		dd 3
		dd offset aRc2Ofb	; "rc2-ofb"
		dd offset _enc_main
		dd 3
		dd offset aRc264Cbc	; "rc2-64-cbc"
		dd offset _enc_main
		dd 3
		dd offset aRc240Cbc	; "rc2-40-cbc"
		dd offset _enc_main
		dd 3
		dd offset aBfCbc_0	; "bf-cbc"
		dd offset _enc_main
		dd 3
		dd offset aBfEcb	; "bf-ecb"
		dd offset _enc_main
		dd 3
		dd offset aBfCfb	; "bf-cfb"
		dd offset _enc_main
		dd 3
		dd offset aBfOfb	; "bf-ofb"
		dd offset _enc_main
		dd 3
		dd offset aCast5Cbc	; "cast5-cbc"
		dd offset _enc_main
		dd 3
		dd offset aCast5Ecb	; "cast5-ecb"
		dd offset _enc_main
		dd 3
		dd offset aCast5Cfb	; "cast5-cfb"
		dd offset _enc_main
		dd 3
		dd offset aCast5Ofb	; "cast5-ofb"
		dd offset _enc_main
		dd 3
		dd offset aCastCbc_1	; "cast-cbc"
		dd offset _enc_main
		align 20h
_ca_usage	dd offset aUsageCaArgs	; DATA XREF: _ca_main+5DDr
					; _ca_main+5E2o
					; "usage: ca args\n"
		dd offset asc_45C772	; "\n"
		dd offset aVerboseTalkAlo ; " -verbose	      -	Talk alot while	doin"...
		dd offset aConfigFileACon ; " -config file    -	A config file\n"
		dd offset aNameArgThePart ; " -name arg	      -	The particular CA de"...
		dd offset aGencrlGenerate ; " -gencrl	      -	Generate a new CRL\n"
		dd offset aCrldaysDaysDay ; " -crldays days   -	Days is	when the nex"...
		dd offset aCrlhoursHoursH ; " -crlhours	hours -	Hours is when the ne"...
		dd offset aStartdateYymmd ; " -startdate YYMMDDHHMMSSZ	- certificat"...
		dd offset aEnddateYymmddh ; " -enddate YYMMDDHHMMSSZ	- certificat"...
		dd offset aDaysArgNumberO ; " -days arg	      -	number of days to ce"...
		dd offset aMdArgMdToUseOn ; " -md arg	      -	md to use, one of md"...
		dd offset aPolicyArgTheCa ; " -policy arg     -	The CA 'policy' to s"...
		dd offset aKeyfileArgPriv ; " -keyfile arg    -	private	key file\n"
		dd offset aKeyformArgPr_1 ; " -keyform arg    -	private	key file for"...
		dd offset aKeyArgKeyToDec ; " -key arg	      -	key to decode the pr"...
		dd offset aCertFileTheCaC ; " -cert file      -	The CA certificate\n"
		dd offset aSelfsignSignAC ; " -selfsign	      -	sign a certificate w"...
		dd offset aInFileTheInput ; " -in file	      -	The input PEM encode"...
		dd offset aOutFileWhereTo ; " -out file	      -	Where to put the out"...
		dd offset aOutdirDirWhere ; " -outdir dir     -	Where to put output "...
		dd offset aInfiles____The ; " -infiles ....   -	The last argument, r"...
		dd offset aSpkacFileFileC ; " -spkac file     -	File contains DN and"...
		dd offset aSs_certFileFil ; " -ss_cert file   -	File contains a	self"...
		dd offset aPreservednDonT ; " -preserveDN     -	Don't re-order the D"...
		dd offset aNoemaildnDonTA ; " -noemailDN      -	Don't add the EMAIL "...
		dd offset aBatchDonTAskQu ; " -batch	      -	Don't ask questions\"...
		dd offset aMsie_hackMsieM ; " -msie_hack      -	msie modifications t"...
		dd offset aRevokeFileRevo ; " -revoke file    -	Revoke a certificate"...
		dd offset aSubjArgUseArgI ; " -subj arg	      -	Use arg	instead	of r"...
		dd offset aUtf8InputCha_0 ; " -utf8	      -	input characters are"...
		dd offset aMultivalueRd_1 ; " -multivalue-rdn -	enable support for m"...
		dd offset aExtensions__Ex ; " -extensions ..  -	Extension section (o"...
		dd offset aExtfileFileCon ; " -extfile file   -	Configuration file w"...
		dd offset aCrlexts__CrlEx ; " -crlexts ..     -	CRL extension sectio"...
		dd offset aEngineEUseE_24 ; " -engine e	      -	use engine e, possib"...
		dd offset aStatusSerialSh ; " -status serial  -	Shows certificate st"...
		dd offset aUpdatedbUpdate ; " -updatedb	      -	Updates	db for expir"...
		align 10h
_crl_usage	dd offset aUsageCrlArgs	; DATA XREF: _crl_main:loc_413C70r
					; _crl_main+515o
					; "usage: crl args\n"
		dd offset asc_45E6B6	; "\n"
		dd offset aInformArgIn_12 ; " -inform arg     -	input format - defau"...
		dd offset aOutformArgO_11 ; " -outform arg    -	output format -	defa"...
		dd offset aTextPrintOutAT ; " -text	      -	print out a text for"...
		dd offset aInArgInputF_11 ; " -in arg	      -	input file - default"...
		dd offset aOutArgOutpu_11 ; " -out arg	      -	output file - defaul"...
		dd offset aHashPrintHashV ; " -hash	      -	print hash value\n"
		dd offset aHash_oldPrintO ; " -hash_old	      -	print old-style	(MD5"...
		dd offset aFingerprintPri ; " -fingerprint    -	print the crl finger"...
		dd offset aIssuerPrintIss ; " -issuer	      -	print issuer DN\n"
		dd offset aLastupdateLast ; " -lastupdate     -	lastUpdate field\n"
		dd offset aNextupdateNext ; " -nextupdate     -	nextUpdate field\n"
		dd offset aCrlnumberPrint ; " -crlnumber      -	print CRL number\n"
		dd offset aNooutNoCrlOutp ; " -noout	      -	no CRL output\n"
		dd offset aCafileNameVeri ; " -CAfile  name   -	verify CRL using cer"...
		dd offset aCapathDirVerif ; " -CApath  dir    -	verify CRL using cer"...
		dd offset aNameoptArgVa_0 ; " -nameopt arg    -	various	certificate "...
		align 20h
_x509_usage	dd offset aUsageX509Args ; DATA	XREF: _x509_main:loc_419CE0r
					; _x509_main+5B9o
					; "usage: x509 args\n"
		dd offset aInformArgIn_13 ; " -inform arg     -	input format - defau"...
		dd offset aOutformArgO_12 ; " -outform arg    -	output format -	defa"...
		dd offset aKeyformArgPr_2 ; " -keyform arg    -	private	key format -"...
		dd offset aCaformArgCaFor ; " -CAform arg     -	CA format - default "...
		dd offset aCakeyformArgCa ; " -CAkeyform arg  -	CA key format -	defa"...
		dd offset aInArgInputF_12 ; " -in arg	      -	input file - default"...
		dd offset aOutArgOutpu_12 ; " -out arg	      -	output file - defaul"...
		dd offset aPassinArgPriva ; " -passin arg     -	private	key password"...
		dd offset aSerialPrintSer ; " -serial	      -	print serial number "...
		dd offset aSubject_hashPr ; " -subject_hash   -	print subject hash v"...
		dd offset aSubject_hash_0 ; " -subject_hash_old	  - print old-style "...
		dd offset aIssuer_hashPri ; " -issuer_hash    -	print issuer hash va"...
		dd offset aIssuer_hash__0 ; " -issuer_hash_old	  - print old-style "...
		dd offset aHashSynonymFor ; " -hash	      -	synonym	for -subject"...
		dd offset aSubjectPrintSu ; " -subject	      -	print subject DN\n"
		dd offset aIssuerPrintI_0 ; " -issuer	      -	print issuer DN\n"
		dd offset aEmailPrintEmai ; " -email	      -	print email address("...
		dd offset aStartdateNotbe ; " -startdate      -	notBefore field\n"
		dd offset aEnddateNotafte ; " -enddate	      -	notAfter field\n"
		dd offset aPurposePrintOu ; " -purpose	      -	print out certificat"...
		dd offset aDatesBothBefor ; " -dates	      -	both Before and	Afte"...
		dd offset aModulusPrint_1 ; " -modulus	      -	print the RSA key mo"...
		dd offset aPubkeyOutputTh ; " -pubkey	      -	output the public ke"...
		dd offset aFingerprintP_0 ; " -fingerprint    -	print the certificat"...
		dd offset aAliasOutputCer ; " -alias	      -	output certificate a"...
		dd offset aNooutNoCertifi ; " -noout	      -	no certificate outpu"...
		dd offset aOcspidPrintOcs ; " -ocspid	      -	print OCSP hash	valu"...
		dd offset aOcsp_uriPrintO ; " -ocsp_uri	      -	print OCSP Responder"...
		dd offset aTrustoutOutput ; " -trustout	      -	output a \"trusted\""...
		dd offset aClrtrustClearA ; " -clrtrust	      -	clear all trusted pu"...
		dd offset aClrrejectClear ; " -clrreject      -	clear all rejected p"...
		dd offset aAddtrustArgTru ; " -addtrust	arg   -	trust certificate fo"...
		dd offset aAddrejectArgRe ; " -addreject arg  -	reject certificate f"...
		dd offset aSetaliasArgSet ; " -setalias	arg   -	set certificate	alia"...
		dd offset aDaysArgHowLong ; " -days arg	      -	How long till expiry"...
		dd offset aCheckendArgChe ; " -checkend	arg   -	check whether the ce"...
		dd offset aExit1IfSo0IfNo ; "			exit 1 if so, 0	if n"...
		dd offset aSignkeyArgSelf ; " -signkey arg    -	self sign cert with "...
		dd offset aX509toreqOutpu ; " -x509toreq      -	output a certificati"...
		dd offset aReqInputIsACer ; " -req	      -	input is a certifica"...
		dd offset aCaArgSetTheCaC ; " -CA arg	      -	set the	CA certifica"...
		dd offset aCakeyArgSetThe ; " -CAkey arg      -	set the	CA key,	must"...
		dd offset aMissingItIsAss ; "			missing, it is assum"...
		dd offset aCacreateseri_0 ; " -CAcreateserial -	create serial number"...
		dd offset aCaserialArgSer ; " -CAserial	arg   -	serial file\n"
		dd offset aSet_serialSe_0 ; " -set_serial     -	serial number to use"...
		dd offset aTextPrintTheCe ; " -text	      -	print the certificat"...
		dd offset aCPrintOutCCode ; " -C	      -	print out C code for"...
		dd offset aMd2Md5Sha1Mdc2 ; " -md2/-md5/-sha1/-mdc2 - digest to	use\"...
		dd offset aExtfileConfigu ; " -extfile	      -	configuration file w"...
		dd offset aExtensionsSect ; " -extensions     -	section	from config "...
		dd offset aClrextDeleteEx ; " -clrext	      -	delete extensions be"...
		dd offset aNameoptArgVa_1 ; " -nameopt arg    -	various	certificate "...
		dd offset aEngineEUseE_25 ; " -engine e	      -	use engine e, possib"...
		dd offset aCertoptArgVari ; " -certopt arg    -	various	certificate "...
		dd 8 dup(0)
_tlscstatp	dd 0			; DATA XREF: _sv_body+AC7o
					; _s_server_main:loc_421C0Br ...
dword_455764	dd 0			; DATA XREF: _s_server_main:loc_421C2Dr
					; _s_server_main+24E7o
dword_455768	dd 0			; DATA XREF: _s_server_main:loc_421C1Cr
					; _s_server_main+24EFo
dword_45576C	dd 0			; DATA XREF: _s_server_main+24DFo
dword_455770	dd 0FFFFFFFFh		; DATA XREF: _s_server_main+2485w
dword_455774	dd 0			; DATA XREF: _sv_body+AC2w
dword_455778	dd 0			; DATA XREF: _s_server_main+2425w
_keymatexportlen dd 14h			; DATA XREF: _sv_body+468r
					; _sv_body+496r ...
_s_cert_file2	dd offset aServer2_pem	; DATA XREF: _s_server_main+C8w
					; _s_server_main+EF5w ...
					; "server2.pem"
_s_cert_file	dd offset aServer_pem	; DATA XREF: _s_server_main+B4w
					; _s_server_main+CC3w ...
					; "server.pem"
_s_server_session_id_context dd	1	; DATA XREF: _s_server_main+1871o
					; _s_server_main+18DFo
; SOCKET accept_socket
_accept_socket	dd 0FFFFFFFFh		; DATA XREF: _sv_body+10EBr
					; _sv_body+110Ar ...
_dh2048_g	dd 2, 3	dup(0)		; DATA XREF: _s_server_main+15C2o
_dh2048_p	dd 0B75742F6h, 17087F08h, 0D6BAA272h, 5F342A9h,	1153F9E8h
					; DATA XREF: _s_server_main+15A3o
		dd 0F1B64F39h, 384BB96Eh, 0A701DA20h, 0E914A356h, 0F355408Fh
		dd 0CBC607D0h, 0AD94A943h, 86644CF7h, 830CF849h, 17E965BDh
		dd 50D3A1D4h, 5F59F5F8h, 4F5276DCh, 0DB8D3D3Dh,	57E199CEh
		dd 0FDCD5992h, 4F74AEB8h, 0BC76FCC5h, 3047C583h, 0C97CCE61h
		dd 0F915FF66h, 5E91FDBBh, 0D3AA01C7h, 0A08D9E5Bh, 0D43A72A5h
		dd 46BFF01Ah, 0E52B5800h, 58FD88F4h, 0CDDB494Eh, 0E49DB420h
		dd 6B360791h, 0D386C33h, 7C0F1D45h, 7C1CB388h, 0F68E2D5Bh
		dd 0C023C9F3h, 5BA5F043h, 0BB8E8D18h, 5DB88C55h, 0FD34D338h
		dd 4357177Ch, 6C181DA3h, 2C2133DEh, 3CFF2AB5h, 4029B1E1h
		dd 7C8D1118h, 720AA784h, 3C486D6h, 2907C819h, 0C95CA7Ah
		dd 0AB9F96D9h, 9B500AD0h, 8D34602h, 5DA4663Dh, 7C9C9F41h
		dd 224B89BDh, 0ABBA2619h, 55C35EA2h, 3B0B32E9h
_psk_identity	dd offset aClient_ident_0 ; DATA XREF: _psk_client_cb:loc_4243D3r
					; _s_client_main+2DDBw
					; "Client_identity"
_keymatexportlen_0 dd 14h		; DATA XREF: _print_stuff+231r
					; _print_stuff+25Ar ...
		align 20h
_key3_37932	dd 0BC9A7856h, 3412F0DEh ; DATA	XREF: _speed_main+6D6o
_key2_37931	dd 9A785634h, 12F0DEBCh	; DATA XREF: _speed_main+6C0o
_key_37930	dd 78563412h, 0F0DEBC9Ah, 2 dup(0) ; DATA XREF:	_speed_main+6AAo
_names		dd offset dword_4683BC	; DATA XREF: _speed_main+574Fr
off_4558E4	dd offset aMdc2		; DATA XREF: _speed_main+88Fr
					; _speed_main+A06r
					; "mdc2"
off_4558E8	dd offset aMd4		; DATA XREF: _speed_main+AAFr
					; _speed_main+C26r
					; "md4"
off_4558EC	dd offset aMd5		; DATA XREF: _speed_main+CCFr
					; _speed_main+E4Dr
					; "md5"
off_4558F0	dd offset aHmacMd5	; DATA XREF: _speed_main+6500r
					; _speed_main+669Fr
					; "hmac(md5)"
off_4558F4	dd offset aSha1		; DATA XREF: _speed_main+EFFr
					; _speed_main+1076r
					; "sha1"
off_4558F8	dd offset aRmd160	; DATA XREF: _speed_main+174Fr
					; _speed_main+18C6r
					; "rmd160"
off_4558FC	dd offset aRc4		; DATA XREF: _speed_main+197Fr
					; _speed_main+1AEDr
					; "rc4"
off_455900	dd offset aDesCbc_0	; DATA XREF: _speed_main+1B9Fr
					; _speed_main+1D24r
					; "des cbc"
off_455904	dd offset aDesEde3_0	; DATA XREF: _speed_main+1DCFr
					; _speed_main+1F68r
					; "des ede3"
off_455908	dd offset aIdeaCbc_1	; DATA XREF: _speed_main+33DFr
					; _speed_main+355Fr
					; "idea	cbc"
off_45590C	dd offset aSeedCbc_1	; DATA XREF: _speed_main+360Fr
					; _speed_main+378Fr
					; "seed	cbc"
off_455910	dd offset aRc2Cbc_1	; DATA XREF: _speed_main+383Fr
					; _speed_main+39BFr
					; "rc2 cbc"
		dd offset aRc53212Cbc	; "rc5-32/12 cbc"
off_455918	dd offset aBlowfishCbc	; DATA XREF: _speed_main+3A6Fr
					; _speed_main+3BEFr
					; "blowfish cbc"
off_45591C	dd offset aCastCbc_0	; DATA XREF: _speed_main+3C9Fr
					; _speed_main+3E1Fr
					; "cast	cbc"
off_455920	dd offset aAes128Cbc_0	; DATA XREF: _speed_main+201Fr
					; _speed_main+219Fr
					; "aes-128 cbc"
off_455924	dd offset aAes192Cbc_0	; DATA XREF: _speed_main+224Fr
					; _speed_main+23CFr
					; "aes-192 cbc"
off_455928	dd offset aAes256Cbc_0	; DATA XREF: _speed_main+247Fr
					; _speed_main+25FFr
					; "aes-256 cbc"
off_45592C	dd offset aCamellia128C_7 ; DATA XREF: _speed_main+2D4Fr
					; _speed_main+2ECFr
					; "camellia-128	cbc"
off_455930	dd offset aCamellia192C_0 ; DATA XREF: _speed_main+2F7Fr
					; _speed_main+30FFr
					; "camellia-192	cbc"
off_455934	dd offset aCamellia256C_0 ; DATA XREF: _speed_main+31AFr
					; _speed_main+332Fr
					; "camellia-256	cbc"
off_455938	dd offset aEvp_0	; DATA XREF: _speed_main+3EC5w
					; _speed_main+4121w ...
					; "evp"
off_45593C	dd offset aSha256	; DATA XREF: _speed_main+111Fr
					; _speed_main+127Dr
					; "sha256"
off_455940	dd offset aSha512	; DATA XREF: _speed_main+132Fr
					; _speed_main+148Dr
					; "sha512"
off_455944	dd offset aWhirlpool	; DATA XREF: _speed_main+153Fr
					; _speed_main+169Dr
					; "whirlpool"
off_455948	dd offset aAes128Ige_0	; DATA XREF: _speed_main+26AFr
					; _speed_main+282Fr
					; "aes-128 ige"
off_45594C	dd offset aAes192Ige_0	; DATA XREF: _speed_main+28DFr
					; _speed_main+2A5Fr
					; "aes-192 ige"
off_455950	dd offset aAes256Ige_0	; DATA XREF: _speed_main+2B0Fr
					; _speed_main+2C8Fr
					; "aes-256 ige"
off_455954	dd offset aGhash	; DATA XREF: _speed_main+62B2r
					; _speed_main+640Dr
					; "ghash"
_usertime	dd 1			; DATA XREF: _speed_main+12w
					; _speed_main:loc_428E00w ...
		align 10h
_dsa2048_g	dd 5916782Ch, 0F3F46334h, 0A5B5FC92h, 2FDE134Fh, 0AE3CA41Ch
					; DATA XREF: _get_dsa2048+9Fo
		dd 7E3F38ADh, 0A696BF90h, 729025AEh, 0C808EF5h,	0ECD91C39h
		dd 3A5B90BAh, 9E6C58E8h, 2374230h, 6ABC8231h, 29096ADFh
		dd 0D146C0E3h, 0CEC85CBh, 0C8EA5E30h, 9F228E39h, 34D21022h
		dd 3D376861h, 9A5B4A2Eh, 0C648C1F5h, 1A63DCF6h,	0BA6496D3h
		dd 0A0D1C934h, 2F6CAED1h, 14931748h, 21F0ED43h,	1BC31930h
		dd 0F0A3DE5Fh, 0E1187870h, 2EEEE4A8h, 0B3E4A500h, 7D0CC817h
		dd 0B7DC426Eh, 4D360046h, 3DAA46D4h, 4089463Ch,	77841DBFh
		dd 87F3750Ah, 0A64C081Dh, 1E1CA9D1h, 0C7E11E12h, 0A5762830h
		dd 96856C7Fh, 80DB6F2Bh, 0F5AE2666h, 0AE8EC793h, 0CAE4ED9Ah
		dd 723BEA04h, 0ED87DCEFh, 4A4CA50Dh, 642271DDh,	8E4E6959h
		dd 0ABDC43BFh, 1BB668Eh, 0FDE7F4B6h, 369FADD2h,	9929A0C1h
		dd 597096D1h, 0BD357806h, 9E525565h, 38E5B2F8h
_dsa2048_q	dd 4D33E797h, 0B3E94D3h, 0C67462DBh, 19DD08A1h,	1B1775A3h
					; DATA XREF: _get_dsa2048+80o
		dd 3 dup(0)
_dsa2048_p	dd 0ADFA25A0h, 0E5B98EF4h, 6F5DF399h, 0E234834Fh, 0BF6FCF7Eh
					; DATA XREF: _get_dsa2048+61o
		dd 816FAF30h, 13C4F8EBh, 8B5DA0D9h, 0C2DC8E5Ch,	32410B1Dh
		dd 0EFFE1FB0h, 7EA2C20Ch, 21285C68h, 58B1F5E9h,	194C6312h
		dd 4B02FF4Eh, 7D2ED92h,	588C4D11h, 8E555C16h, 7D67A3ADh
		dd 0B6E86B9h, 406F54E6h, 4C670EAEh, 3C5B12F9h, 0FCF77A08h
		dd 0E7698667h, 0BF40940Ah, 26FE768Bh, 1AA1F2D1h, 5643A184h
		dd 5F9ABC28h, 89693BD7h, 512C368Ah, 2F7712DFh, 0AAA07B57h
		dd 62A17FDDh, 687B403Bh, 380D8F1Ah, 185D21BBh, 0F7460FFCh
		dd 231DB0A3h, 72C7D2C3h, 46DF1851h, 0BDD97995h,	2C0219B5h
		dd 57E7DC87h, 8BF17E82h, 0A5003D06h, 27266B7Bh,	776A0F91h
		dd 0E404D5E4h, 0FF422C12h, 0D3BB88D2h, 0C8F9A092h, 5C146451h
		dd 476CF9D8h, 7F1CB482h, 25F0B809h, 3F3F1D83h, 0A21B305h
		dd 54D8A75Dh, 0C37D65C3h, 0AEBF1DB0h, 9BCF68F8h
_dsa2048_pub	dd 11A88F17h, 83EC9284h, 0B06AC747h, 205AAF92h,	7964A337h
					; DATA XREF: _get_dsa2048+42o
		dd 0CD3DD0D2h, 888861E0h, 5D74CC21h, 47514CCEh,	4C5CC5F0h
		dd 72AF7A82h, 53E0B9ADh, 0F0B778F2h, 8A7F48B5h,	9FD1183Ah
		dd 47A57D8Bh, 98AB95B7h, 50747BF8h, 0F0578E56h,	0BAB7F5EEh
		dd 0F98685ABh, 5641EF2Bh, 0B79FA4A0h, 0A460038h, 1FFCF1A6h
		dd 44854ED8h, 5D214392h, 0CBC2CC6Eh, 210D3126h,	248DBDC4h
		dd 1918D9BCh, 0E7F1DCD7h, 3485093h, 0E72EAE2Ch,	935F8849h
		dd 36992757h, 0FCAB20B4h, 0D9F22BA7h, 34D4D798h, 5850969Dh
		dd 0F354EA9Ah, 1463F5EEh, 748385EEh, 9552E176h,	4EBF7C3h
		dd 28A77B04h, 4AEACC1Bh, 0D8DA844Eh, 9BD8799Ch,	0CF2F8966h
		dd 0F979D7ACh, 1345D8A9h, 1400B978h, 51227EC9h,	9FB06786h
		dd 0C8231126h, 1D70D738h, 4F4D8E15h, 0A1409795h, 18017EC2h
		dd 0E610F472h, 7F16528Dh, 33F8C9F2h, 0CEB7338Bh
_dsa2048_priv	dd 0F6926732h, 0E8E2E2C4h, 456B8BA0h, 0B0768A0Ch, 0A791CFEEh
					; DATA XREF: _get_dsa2048+23o
		dd 3 dup(0)
_dsa1024_g	dd 34CDF4Dh, 0F58A91A6h, 46506F19h, 68E59925h, 69E3306Fh
					; DATA XREF: _get_dsa1024+9Fo
		dd 5DB3E5E1h, 8628BB98h, 99DEFC48h, 885F3F04h, 24739C0Ch
		dd 0B95D200Dh, 183F9A2Ah, 62E42796h, 747BC187h,	61FC5362h
		dd 917AA827h, 0F1B69D09h, 0F549C4Dh, 49EE0658h,	55CE0774h
		dd 16CE237Eh, 5ADCCAF6h, 0C97E0161h, 0F64DB571h, 872934DCh
		dd 205EF668h, 0F5DBB393h, 416C09E4h, 0EB929517h, 0A573B501h
		dd 32D87E6Ah, 0B8020EEDh
_dsa1024_q	dd 0ED3107F7h, 3066CFAh, 1C8A85D5h, 0E7659CACh,	6F656650h
					; DATA XREF: _get_dsa1024+80o
		dd 3 dup(0)
_dsa1024_p	dd 856E3FA7h, 296A41BFh, 479FF07Dh, 9A903019h, 6ADA1D09h
					; DATA XREF: _get_dsa1024+61o
		dd 3DC51E33h, 15B39686h, 8F2E53E0h, 738259E0h, 31753E90h
		dd 527A4799h, 0D9E485FBh, 9B387BA6h, 9B848A68h,	0B51EC687h
		dd 534B867Eh, 71CF595Bh, 6E881965h, 6BAE66CEh, 0ECFB3688h
		dd 0D7C2DC28h, 2CE5BBA5h, 0DA4B2639h, 9518709Ah, 56109537h
		dd 0ED15F623h, 0DE5E04BAh, 0B7FD4F39h, 0A4B51F43h, 80CD6F65h
		dd 9570E411h, 49CD505Bh
_dsa1024_pub	dd 2A9C4E3Ch, 25C1167Fh, 6378ACEBh, 8B8C1490h, 3C4368F4h
					; DATA XREF: _get_dsa1024+42o
		dd 5065EE2Dh, 8C8F9C7Dh, 11D6518Ah, 1EAF992Bh, 0D3B59790h
		dd 0D62520A6h, 0D50243FEh, 8CA77D91h, 0A385C9DBh, 68F74836h
		dd 0F7B160AAh, 0A33A6805h, 8219D33Fh, 777A82D8h, 15F4EFFBh
		dd 406EB0Ah, 0C07537Fh,	832DCBBCh, 28D13EDBh, 0E031A1A5h
		dd 0DE50FA67h, 7E83079Bh, 13C30B2Ch, 0ADE56150h, 97B836BDh
		dd 0E87D404Eh, 4BBC0D83h
_dsa1024_priv	dd 0BBDA217Dh, 36471562h, 0E8126707h, 0CD1CAA8Ch, 18611238h
					; DATA XREF: _get_dsa1024+23o
		dd 3 dup(0)
_dsa512_g	dd 0E5883E83h, 0CE7389C5h, 49016C3Bh, 9FC7B3BFh, 9144EA0Ah
					; DATA XREF: _get_dsa512+9Fo
		dd 0D9AA30E5h, 0B75F5BBEh, 0B789D710h, 0CFFB748Eh, 0A8EB1E29h
		dd 0B851542Ch, 0CEA0DE10h, 6B24CC2Fh, 0A2DE7790h, 1252A668h
		dd 209D03A2h
_dsa512_q	dd 50EF53FBh, 319240B4h, 7A538656h, 9A228BE8h, 8F71FB49h
					; DATA XREF: _get_dsa512+80o
		dd 3 dup(0)
_dsa512_p	dd 8E691B9Dh, 2BF2DB26h, 86197011h, 0F8C819F6h,	5318F219h
					; DATA XREF: _get_dsa512+61o
		dd 0D0064694h, 4B335062h, 30523C02h, 0F93B8B03h, 624D15Fh
		dd 0BA4C7B4Fh, 0FD9B40AAh, 3337E496h, 0D75A2DBBh, 6640115Ah
		dd 317D76A2h
_dsa512_pub	dd 0DA79500h, 0BA6893ECh, 75FF75Fh, 6BAD3BF2h, 0ECBEDC01h
					; DATA XREF: _get_dsa512+42o
		dd 3A7A04DEh, 49ECB327h, 3D4308FDh, 5E2CA87Eh, 0F4FCBB7Bh
		dd 0B06CEB6Eh, 1202F86Eh, 835D388Ch, 53EE7D56h,	84243E05h
		dd 6B0ABABEh
		db 0C8h
_dsa512_priv	db 65h,	0E5h, 0C7h	; DATA XREF: _get_dsa512+23o
		dd 0B5246038h, 0EB9CD489h, 7A1D9C4Ch, 0C2D1BD22h, 0D2h
		dd 2 dup(0)
_test4096	dd 29098230h, 2000102h,	10282h,	1AAC71C0h, 43828813h, 7157513Bh
					; DATA XREF: .rdata:004683A4o
		dd 822BB68Dh, 5F532165h, 8D4F2928h, 44B98A7Ch, 4F4128B3h
		dd 0F86AFAD3h, 395028B9h, 3C2C5367h, 4196CBD7h,	0EBBB3240h
		dd 0B01FAE70h, 0D93AF765h, 0AE10FD22h, 0DDE202BDh, 3C79C2F3h
		dd 0BB75FCC6h, 363A4EAFh, 25EA4FC2h, 4B1613DFh,	694BFE20h
		dd 1A7FC416h, 1B17A643h, 9F30AB9h, 0CF892886h, 81D4D02Ch
		dd 0E66DC6AFh, 0EFEE8D21h, 0C6B7DCEAh, 0E9F633Bh, 237889ADh
		dd 7E70BF18h, 0EC37E084h, 3E9C8EDBh, 99CC196Ah,	7DB5E672h
		dd 0D3E5FA6Dh, 0B2B590E4h, 4E7012B2h, 0F810F8CAh, 48C214A3h
		dd 9960EB19h, 0B11F2ABBh, 243DB17Ah, 0DA29A0FBh, 0A4D71BBDh
		dd 2D60EFBFh, 9865CA22h, 0C9E1C4F1h, 28166B02h,	79AAA12Fh
		dd 7CDCDA00h, 3C42F743h, 0F768EFA0h, 0FB69B9DFh, 1ED018Eh
		dd 574EB542h, 0D0B826A6h, 36D567Bh, 8C8C40C6h, 9CD7552Ah
		dd 93940035h, 22EB03ECh, 79BB77EFh, 0A1153F13h,	0FDDFCA8Fh
		dd 0D4E1B8D3h, 3C3F09CCh, 49D1DB2Ch, 8307387Fh,	6608EB6Dh
		dd 124406E9h, 902295ACh, 8D46723h, 0DCB7F4CCh, 0ACD487CCh
		dd 0B54C3569h, 0A4CD3639h, 0DCA95D2h, 0C5C2DAC5h, 8283222h
		dd 388BD2E3h, 758CDC30h, 7AEC6A4Fh, 0A83E16ACh,	0E1456AD4h
		dd 802E4FA8h, 1B54AA34h, 8A7D9502h, 0CA79CC6Dh,	8D2EA4F2h
		dd 5115FEFBh, 884D0E10h, 79F4C7B1h, 56B4F0DBh, 5ACA3744h
		dd 0AC488CC1h, 838048AEh, 0D9DE3F01h, 46512CD3h, 0C6B641B1h
		dd 83F97291h, 0BA8C1B55h, 2CE573F3h, 0BE3A5074h, 0B2A72FC5h
		dd 139E8C6Dh, 0CD13A377h, 0E1458C6Dh, 69B70BFCh, 65BC27E9h
		dd 0D09BFAC3h, 1FE8FEEFh, 0F4345EB3h, 0D3FCEA8Ch, 303DBF81h
		dd 0E801B4B2h, 2BA0F43h, 82764223h, 0ED917331h,	0D614607h
		dd 0CE408339h, 80DBD47Ah, 0D10D1F2Ch, 0E392D434h, 1C2F1D4h
		dd 10302h, 2820201h, 6C970001h,	4FEA6EDAh, 4CF7AFCFh, 90F1D9h
		dd 97F2DB77h, 0B7B97276h, 0DD9CD147h, 6E334ACBh, 0E67675C9h
		dd 8C31A5E4h, 29B41377h, 1752F5CDh, 8F3EFh, 0BC2EBDE3h
		dd 0E98852D4h, 20B7530h, 0C89CDF5h, 2719576Ch, 0B4851E3Dh
		dd 921D2FC1h, 29765C00h, 12E1A44Bh, 0FE09C8B3h,	6172780Eh
		dd 396F61CBh, 0D54E9591h, 0B88FC73Eh, 9CFE36F6h, 25389A93h
		dd 124AF47Ah, 0BD13A0D4h, 3E121DF9h, 72FB3921h,	0C33D05E0h
		dd 5DA850E5h, 5FEAA385h, 0EA3FB21Ch, 5591036Dh,	210A19D8h
		dd 12D91612h, 1807E6C4h, 0AEA4265Bh, 0A6B72BEDh, 0ECADF8EDh
		dd 4F7FE677h, 0FAC00076h, 2CB49215h, 6AEBC222h,	0B20514ADh
		dd 859E8AE5h, 0F104CC83h, 5E447856h, 1A60E0DEh,	23317965h
		dd 0FF01BB05h, 0B3B72EDDh, 0A5E074AAh, 0DE4BAF94h, 0DE550F58h
		dd 0D6E3F633h, 0D6573634h, 0BE2E9179h, 0B64ED93Bh, 0D35C219Dh
		dd 4A7F1448h, 29A960C4h, 887F53F8h, 0C5B52D11h,	85EE6F2Dh
		dd 9A8DF70Bh, 0F242B0BEh, 19AF712Eh, 0CDEC6D31h, 0DF232B6Fh
		dd 2CAF40B4h, 7D1BC30Ah, 4B1D037Dh, 85E0B5F3h, 6B91DFD8h
		dd 0F2F7690Ah, 0F15B6669h, 0E97D46CFh, 7E6DFA70h, 77A94E75h
		dd 0F7028CE6h, 41A54D14h, 62C13F8Fh, 385E711Eh,	0E1E6D6B4h
		dd 302CC24Bh, 496F8183h, 0C9E6962Eh, 95DF79Ah, 0A50255A0h
		dd 0D023253Ah, 0E3A3C392h, 4D2F120Eh, 5A55F3EFh, 8619E6BEh
		dd 9A75AB31h, 0C52CF0D3h, 1FD99241h, 758C115Fh,	2D0631Ch
		dd 0CB682C80h, 7351FB93h, 0DA60B449h, 0A9AF26E2h, 0ECB81246h
		dd 612DD50h, 0E659CE5Fh, 54E01CF6h, 0CDF6AD10h,	0FB0FCC98h
		dd 9D1441CBh, 74B4E4EDh, 0C760095Fh, 3C7BF612h,	0BC20A78Fh
		dd 0EBEFB1E4h, 6C593A4h, 9D279ACAh, 0CADEF387h,	1CF6E7E5h
		dd 0FB5B6501h, 86E7919h, 28C8C526h, 73BB60Eh, 8202C108h
		dd 0E8000101h, 0B8A6731Ch, 8D6D0EE0h, 0ED53B91Bh, 1DE69458h
		dd 765C1460h, 1958C443h, 0BCE824C4h, 130B3B1Bh,	0E544524h
		dd 0E0F037CCh, 0F7C37D63h, 817481FBh, 211A0FC4h, 0C1CEAF48h
		dd 61894C4h, 0D2D38D44h, 3E2D2D22h, 95DC315Ah, 0FC41F48Eh
		dd 9240C958h, 0DAE35F17h, 1C3F9EACh, 5F586B2Ah,	0B1207848h
		dd 3C9B24AFh, 25938B20h, 0BC6BE69Eh, 6C144213h,	7AFF3136h
		dd 261AC1D1h, 76A97F14h, 0CCF80CA7h, 0D26A07EDh, 0AEE62DFh
		dd 49CB847Ch, 0D03B290h, 770682A2h, 0F267CDF1h,	3F022147h
		dd 46F02143h, 72516230h, 0C648E7B1h, 9ECD1267h,	21E515D6h
		dd 308FFAEDh, 0B6FE41A6h, 14348FFAh, 0F711E819h, 0B73E77A5h
		dd 8C0739F9h, 7BAB2A67h, 6B0F808h, 8F2FEAA8h, 40CCCCFAh
		dd 4F70F3CEh, 0CE27F3Fh, 354A76EAh, 2BAD474Eh, 745D97A7h
		dd 0D2909743h, 96F9D9FBh, 0ED053301h, 0AD05037Bh, 20349F8h
		dd 10182h, 661740D4h, 0C8959210h, 7AA962ECh, 0E68E93CBh
		dd 4880D453h, 0CE414B27h, 94BFDF61h, 3713DA4h, 7125ED0Bh
		dd 0D5D6A498h, 6CF5574Ah, 7D21DA1Bh, 0F3B34535h, 43D3D96Ah
		dd 1C545CE8h, 5FB41B83h, 2E2497F2h, 92DE40DCh, 0BC8E5923h
		dd 0E0F2A1D2h, 0D10BDD4Ch, 0BC65AEE7h, 985BF5B5h, 0B7C2D7E9h
		dd 0E71550Eh, 6B240A3Ch, 6114E6A6h, 4233FD11h, 77842B99h
		dd 0F5919274h, 0ADCF7979h, 80EF048Eh, 14F4571Eh, 740935F5h
		dd 587113B2h, 5D32EA6Bh, 4876D3F3h, 84231039h, 7792BE9Dh
		dd 3E70ED4Ah, 0B36CA21Ah, 0C9C30081h, 24C852E4h, 0AD410C88h
		dd 0A3EA5A87h, 5E1C857Ah, 35C37F31h, 0C810FAC6h, 96C41075h
		dd 1FEE799h, 0B4DB74B4h, 8CC8C311h, 663BF7F6h, 0EBDBFC50h
		dd 898547CAh, 62D965E1h, 0D8703C34h, 652FB42Eh,	2AA64A3Ch
		dd 41D8C7E7h, 0BF438A8Fh, 0BC4DF242h, 95279EFCh, 0ABFF75FBh
		dd 18202h, 57442F41h, 5B17126Dh, 6CB7C632h, 0E8A7A57h
		dd 0A872EF79h, 382DDA68h, 0F68DBBE4h, 56CF6502h, 0CB1AE113h
		dd 0B1A68039h, 0DD1E0332h, 0ACD935BBh, 8318943h, 355E9290h
		dd 6F9C7B3Dh, 0DD17CB86h, 35EDE485h, 0F4C18E08h, 0C668D805h
		dd 0FFF73C63h, 393347F7h, 0EB73EC5h, 819D3558h,	2C6AF8EAh
		dd 78685A1Ch, 0C16B1164h, 0BD7A4E3Eh, 0C20FCB84h, 0D31D85B6h
		dd 6A93C576h, 34568969h, 0BC9B4ADCh, 6E0DA8FFh,	0A7609C35h
		dd 6C73023h, 948B3964h,	7FBAEE89h, 0B6FA8D60h, 51DC7697h
		dd 3AEB3C4Ah, 60202C14h, 0FE864A69h, 4984218Ch,	0E120B354h
		dd 0DF587F01h, 5121B57Fh, 919F478Ch, 0F23E97EBh, 4616CF54h
		dd 0E7B6D9F9h, 54D0C964h, 0CFA12FEAh, 8D287FA5h, 39D5EC84h
		dd 2D5B7603h, 1F2438Eh,	0C06FC924h, 7D6F69F5h, 5FD285B5h
		dd 740787Fh, 0B515097Fh, 1065281Fh, 0C6A819E4h,	0CBDC8D9Eh
		dd 18202h, 56EE0113h, 709380h, 94D2527Fh, 4A8498A1h, 9B4C2592h
		dd 0C22E91A9h, 0E35CB779h, 0C28ED5C5h, 0AD171654h, 76259B55h
		dd 22506312h, 7958582Fh, 0F9E3046Bh, 41048F9Fh,	1FA59467h
		dd 9C158AACh, 0F86C1026h, 0D7615719h, 0B0317D3Ah, 94BD382Dh
		dd 0FAC4AD62h, 0F0424236h, 9D656724h, 6F7C0B8Bh, 8C1A4482h
		dd 0BBABC9C8h, 7BFC454Ch, 0E130EE38h, 0BC8DEFFCh, 5D2BDF58h
		dd 49E0540Dh, 8F99974Dh, 0BE83A822h, 2E50BB40h,	950F2878h
		dd 988F8C78h, 97C25624h, 0D2432CF3h, 81668203h,	16535F72h
		dd 4B1B1ECh, 4820405Eh,	97023F7Bh, 1296EB6Ah, 1FFE3521h
		dd 0EA95C047h, 84088AC5h, 94635E4Fh, 5B710F60h,	4FEC4A7Fh
		dd 4ABAC660h, 8B20F124h, 0CE3A2EA7h, 1D27E08Dh
		dd 21B48EB5h, 16A6E2C5h, 5583510Ah, 1130D188h, 8DD7D563h
		dd 821216AEh, 4E0085C4h, 7CA58327h, 0A2E52E90h,	634CD3A3h
		dd 1018202h, 98088600h,	500A598h, 66D97739h, 0A0CACFB3h
		dd 0CE50B371h, 9593B13Dh, 2ED4C435h, 0FC0FDF90h, 6894C160h
		dd 9ACA4361h, 451E4A23h, 1EB59972h, 0F778D61h, 77D7BBA0h
		dd 11152AB4h, 56B32D88h, 0ED6A5E61h, 3F4A46A4h,	0BAD61150h
		dd 6595D7B6h, 8FA1C353h, 1CF5A3E0h, 436EAFFDh, 0D3A717D7h
		dd 0DFA41B81h, 468A97E0h, 0E46D303h, 0D24E4883h, 0ADC0CB02h
		dd 968C9579h, 113440BAh, 11E95E71h, 5E4AC5F9h, 92F59D91h
		dd 70C6EB4Fh, 43D2D02h,	8E3AE9AAh, 0F7ADA8D5h, 0B2160DCEh
		dd 0F59C0AECh, 8AB93994h, 0CCF91EFCh, 31215FF2h, 646B7274h
		dd 8D6135AEh, 0DAE7CB0Dh, 21F3CA39h, 0D7950B66h, 0A1CA7C0Ah
		dd 0ACE85AA9h, 0AF5471E0h, 70D5CF28h, 9EF3E089h, 7B8D6C43h
		dd 4D680199h, 0C4645A1h, 2CCCBC43h, 0C846C5DDh,	0EDBE0E4Eh
		dd 2EAB26B9h, 0FF8FEBDBh, 55C6B0DBh, 912AF8AFh,	2144509Dh
		dd 17h,	4 dup(0)
_test2048	dd 0A3048230h, 2000102h, 10182h, 3ECEC0C0h, 3F67533Ch
					; DATA XREF: .rdata:004683A0o
		dd 0A42FC54Fh, 582F5AC2h, 6A5227FDh, 734ACFE8h,	0F258D47h
		dd 7826035Fh, 1222F0EFh, 0B247DED3h, 63380B1Ch,	7A856C1Ah
		dd 0A08FC680h, 0C462AF41h, 0F8883267h, 23F59CA6h, 3FACE41Dh
		dd 0E1ECF929h, 2C03268Bh, 7DF3ABB2h, 0C049CAB5h, 33DF1C8Fh
		dd 3CDA603Ah, 0A9F816B0h, 0AC648F12h, 64690C23h, 0D4995D97h
		dd 619B8309h, 0DEF0ACD3h, 449F5EDDh, 4D3ADB94h,	2952E897h
		dd 794DBF7h, 1E789045h,	0F7800B31h, 791CAD57h, 0B032CBC5h
		dd 0B374CDCEh, 78C594E2h, 451A342Fh, 0A5528CF7h, 0D1EC8DBCh
		dd 0F03B312Fh, 885E5949h, 3592159Dh, 61E7C132h,	7C4850ECh
		dd 0F8F905BAh, 838CA7F8h, 0EB5B66E8h, 0DD4FD8FEh, 0B2C0366Dh
		dd 52B80F90h, 409B04F9h, 36D6272Ch, 441BC28Eh, 15D592F3h
		dd 0F3BC9A9Eh, 2D7037Dh, 10E92014h, 0FCF9FD92h,	0E118E58Fh
		dd 609ECC95h, 4D38FAA6h, 10302h, 1820201h, 0C3C30000h
		dd 9027B40Dh, 0B8BF4B8Dh, 0B8D0AA84h, 0BE995DC7h, 7C3EF655h
		dd 8ACB2049h, 660E198Eh, 3AFAC24h, 95EB9733h, 400F3BD5h
		dd 0D1500456h, 0B84BEE6h, 0E29CD325h, 62F56C83h, 7D2BBA5Dh
		dd 0E16C7A3Dh, 93540ED2h, 51910180h, 8E5BE809h,	0E464BD47h
		dd 5583030Eh, 0F0375ACFh, 217DB525h, 6FDF69D7h,	0C910CFC2h
		dd 7A9F408Ah, 0E8E8C070h, 159AE6C0h, 464E8D0Ah,	0B3DB7ACBh
		dd 0C40283CBh, 2EBABF0h, 0FC230E01h, 0D4BDC41Dh, 46315DAAh
		dd 0F89ECE99h, 67107504h, 444753C4h, 7325C2FAh,	598ED07Eh
		dd 0F45AB2D1h, 2F9218C7h, 0A3CDAB39h, 0C7B9C2B5h, 489F1BB9h
		dd 98C613FAh, 9C84CA4Dh, 89E7CA06h, 6CC40401h, 355929FDh
		dd 0CEDDF3E7h, 21BF5964h, 0E9FA913h, 33BDFFC5h,	6BACEC00h
		dd 5E51EF11h, 0DE1507ADh, 0B9C65FB8h, 466522A3h, 0D0DF1483h
		dd 0E18A44F1h, 0B433239Ch, 6BE63397h, 81810281h, 0A712EC00h
		dd 0DE6A7459h, 36D8AD3Eh, 0D5A25080h, 0F1078121h, 6CF291D0h
		dd 1A9D2F12h, 6530F826h, 9BC0E8DFh, 8298306Ah, 56A2EC87h
		dd 0E76F6287h, 0E656F69Fh, 86498F71h, 344D5A93h, 4D9FE58h
		dd 0B779AF13h, 30D111ADh, 0A006149Ah, 0DC55B7FAh, 2C4C5A6Ch
		dd 0E8F65659h, 780AAF9Dh, 9E060699h, 55519CE7h,	6C3BFC43h
		dd 412DBF0Bh, 0E0B7AFA7h, 0B41828E8h, 97E6D113h, 806A9FD0h
		dd 7E1ADDCAh, 81810215h, 0C06D100h, 0ABD0E31Fh,	0BC7CCAD6h
		dd 0CE35137Dh, 49D8CD27h, 0F646351h, 0FC1206CAh, 61AF3E07h
		dd 3953E26Dh, 11C3AE27h, 4F01949Eh, 0F967F3E3h,	95E7F977h
		dd 20E26F3Ah, 7AA43E73h, 9761D428h, 23A017F6h, 84CE2B10h
		dd 1F257E57h, 0D254A8F4h, 95CC9465h, 0C130AB0Ah, 8E611F59h
		dd 4ED76BB9h, 794383B9h, 0FBC1185h, 52025AEh, 0A148D2BCh
		dd 0F6840968h, 0B9669A12h, 376BB2Bh, 974E4617h,	80810259h
		dd 0D6FA4C09h, 784865E5h, 1FB543h, 24B72C93h, 5A7DC6E8h
		dd 0C8924570h, 0E1CDA36Ch, 0FA4029F7h, 44475B3Fh, 72E8C139h
		dd 0DA0E7A9Eh, 92AA0AAh, 239354FDh, 5B8537AAh, 0D8F9D4CCh
		dd 0D61C1FFh, 24187EBDh, 72406D73h, 480993F1h, 90846C97h
		dd 11446A8h, 3CE51139h,	75322741h, 0D9A1ED24h, 288A2912h
		dd 0CA8D8971h, 0C401B030h, 1419822Fh, 0B81C704Ch, 90E82E23h
		dd 97929749h, 0B99D7A6Bh, 0F808102h, 0F676A10Eh, 0AF8F44A1h
		dd 87D3767Ch, 1083BBBBh, 14180188h, 5975D3D1h, 16F5AA24h
		dd 0D19DE9A5h, 15F4EECCh, 277EC5D9h, 64944E9h, 0D3FCB972h
		dd 362CC48Ah, 5A9B127Dh, 0EE85DCAAh, 0B354AD6Eh, 0A131FCF4h
		dd 57703A06h, 5B95F30Ch, 1AFDE83Eh, 9378F64Fh, 31D76A46h
		dd 856484B4h, 92893809h, 0E2BF1C94h, 0FFE02A3Ch, 2BF0A399h
		dd 0CD36C231h, 2D9DBF60h, 9CE83274h, 91BB6E93h,	2D9FD7Bh
		dd 0A2008181h, 0EB382571h, 0CD37E92Ah, 90CE44FEh, 8487523Fh
		dd 8DAE1B52h, 38CE9422h, 768804E6h, 14D39A85h, 9A69E509h
		dd 29258FFh, 1E7C7D6Ah,	0CAA8FD2Ch, 0D4F1432h, 43370D84h
		dd 125DE4BFh, 279124C8h, 54D9468Dh, 7162E753h, 41712BA8h
		dd 3AF8758Dh, 462961A0h, 0FA82E5A6h, 0FA08D93Ah, 6BFD63FCh
		dd 4EF4BC30h, 0C258C9Eh, 3CE755B6h, 0FD0B4ED4h,	1D0EC38Bh
		dd 8F57449Ch, 0D5F7861Fh, 95E41Bh, 6 dup(0)
_test1024	dd 5C028230h, 2000102h,	0DC008181h, 3DE84398h, 5E45B43h
					; DATA XREF: .rdata:0046839Co
		dd 3EA9D0CDh, 0F67583CBh, 6B9FA5B5h, 294134E9h,	556AFA18h
		dd 0ECFC704Dh, 0A3887AEh, 45C0A920h, 60576E77h,	96EDF457h
		dd 0E18FCB22h, 1F173A33h, 6FA537EDh, 12BCA6EBh,	0BD531D80h
		dd 7621EB70h, 1A2FC93Eh, 0FF822445h, 63259CDh, 233B122Eh
		dd 3D12ED78h, 67F98DE0h, 474E374Fh, 0C02D4C02h,	94B31F4Fh
		dd 2D2E41E1h, 82FC1090h, 220F8B91h, 2CFCF2D4h, 25553ABh
		dd 1000103h, 2B808102h,	588F3FCCh, 16008BBAh, 0F03AEAF6h
		dd 1705D030h, 9AEBB0DAh, 0B0264F2Dh, 0EBC138D6h, 1F3DD8F5h
		dd 0F47FF770h, 5151CFE2h, 0E8FA8879h, 2D7B0E32h, 0BAFAF297h
		dd 0D99CC527h, 798AEBC5h, 34643C52h, 28CFC27Dh,	43D54EC7h
		dd 0CAA6D10Bh, 722D036Dh, 56DBC23h, 2F0916FAh, 0EEB65C2Eh
		dd 48D2DD74h, 60C368Eh,	10E54D3Dh, 0F36AEB82h, 0EDD69F4Bh
		dd 0EC6EB111h, 758EFEF4h, 0CB2F2094h, 2F146ACh,	8CF90041h
		dd 0DDB185A3h, 0C165AF29h, 0C595F333h, 0D40B6852h, 20EE5F1h
		dd 77FA4F9Fh, 0C79E46DCh, 2916E4A6h, 0CF07B0DAh, 8A12A95Bh
		dd 0DE0A63DDh, 8B668C2Eh, 0A319DC8Ch, 0D03BF47Eh, 0C2A48C1Ah
		dd 4102D3E1h, 54CE200h,	4E8604F2h, 0B0DB4361h, 528696B9h
		dd 7B8DCA2Ch, 0D130BABh, 0E25B387Eh, 0E70E7B2Eh, 0E7389919h
		dd 85BD21F2h, 28FDE385h, 71312077h, 0FBFFD02Ch,	0B485AF2Eh
		dd 0BBF3CA86h, 950FAACAh, 0E400237h, 0E8959A41h, 4BCE59B3h
		dd 0EC35DE61h, 0B89C7938h, 63415210h, 6FAE82ABh, 0DEF4A900h
		dd 7E0B49DDh, 0A965A5B8h, 0F98F8F0Ch, 92C6351Fh, 66B05EB8h
		dd 0C04052ABh, 7D6A36B6h, 2044680h, 2419FE5h, 0ADC00041h
		dd 0EE214ECCh, 0FB91241Dh, 9A8D80A7h, 8F2EB3B6h, 0DF82E1C2h
		dd 71B41869h, 0DE65A6FFh, 428D84EDh, 6921B3B7h,	60071C56h
		dd 0FF042951h, 0B9DD0634h, 47C2C67h, 15460E93h,	1BB72ABBh
		dd 400287E7h, 75DDA78h,	7A160C51h, 8420299Fh, 0D7FA420Dh
		dd 7E77D800h, 0D66BB0B0h, 9BB8535Bh, 2BC7CD7Ah,	0A9636AB8h
		dd 72A46FFBh, 5D4CBFh, 59FABA14h, 0E0E4ED88h, 14ECA28Ch
		dd 0F0E22D7Eh, 45954946h
_test512	dd 3A018230h, 2000102h,	33D60041h, 4FFBC8B9h, 1C07D3Ch
					; DATA XREF: .rdata:_rsa_data_37947o
		dd 0A0E7D086h, 9395F255h, 5BB74FCCh, 68945B67h,	0DE1534C9h
		dd 331C2EA5h, 34FC6EC2h, 0B713715Eh, 0A5D8EED6h, 87720565h
		dd 0FE77B0A8h, 5FFCF557h, 0DD878355h, 3024957h,	2010001h
		dd 0F7A70041h, 840FC591h, 0F707DC57h, 52607F6Ah, 66F172B3h
		dd 3B977D1Fh, 8F0AB69Eh, 2342CF8Ch, 28D40400h, 0C4901C0Eh
		dd 0A5252511h, 702FA593h, 9C81DF02h, 0F8A00349h, 262E546Dh
		dd 5985AADEh, 210231A8h, 0D747EB00h, 0DDC3F63Bh, 0B9C5465Ah
		dd 9A09A2Bh, 0F3FBA68Fh, 70337A78h, 6B420F9Dh, 0D3246813h
		dd 210215h, 0B3B010E9h,	6882E20Dh, 7C6E8A77h, 533EBCDAh
		dd 22D6FB83h, 6EAEB5E7h, 5500DA80h, 65D0C197h, 0F84C2002h
		dd 496AB173h, 461F6129h, 0C7F30D10h, 88D758E7h,	9B945E15h
		dd 42A27BBFh, 0C414558h, 200201CBh, 31BA1112h, 113D9D57h
		dd 2F8C5B0Eh, 4F02E25Fh, 158C4705h, 3F56B38Eh, 0D4ADFBB8h
		dd 0C510FCF4h, 0A1182002h, 0D95B9929h, 49FCD4C8h, 2C212A7Ah
		dd 0EB4FE449h, 0ABF151EFh, 144BFB6Dh, 0B5524BE9h, 2C82h
; char umsg_37892[]
_umsg_37892	db '-time arg     - max number of seconds to collect data, default %d'
					; DATA XREF: _s_time_main+3FCo
		db 0Ah
		db '-verify arg   - turn on peer certificate verification, arg == dep'
		db 'th',0Ah
		db '-cert arg     - certificate file to use, PEM format assumed',0Ah
		db '-key arg      - RSA file to use, PEM format assumed, key is in ce'
		db 'rt file',0Ah
		db '                file if not specified by this option',0Ah
		db '-CApath arg   - PEM format directory of CA',27h,'s',0Ah
		db '-CAfile arg   - PEM format file of CA',27h,'s',0Ah
		db '-cipher       - preferred cipher to use, play with ',27h,'openssl ci'
		db 'phers',27h,0Ah
		db 0Ah,0
_maxTime	dd 1Eh			; DATA XREF: _s_time_main+4Fw
					; _s_time_main+616r ...
_host		dd offset aLocalhost4433 ; DATA	XREF: _doConnection+25r
					; _s_time_main+9w ...
					; "localhost:4433"
		align 20h
_warning_37493	dd 1			; DATA XREF: _app_tminterval:loc_436A60r
					; _app_tminterval+DFw
		align 20h
_sess_id_usage	dd offset aUsageSess_idAr ; DATA XREF: _sess_id_main:loc_439730r
					; _sess_id_main+2B5o
					; "usage: sess_id args\n"
		dd offset asc_46A63D	; "\n"
		dd offset aInformArgIn_14 ; " -inform arg     -	input format - defau"...
		dd offset aOutformArgO_13 ; " -outform arg    -	output format -	defa"...
		dd offset aInArgInputF_13 ; " -in arg	      -	input file - default"...
		dd offset aOutArgOutpu_13 ; " -out arg	      -	output file - defaul"...
		dd offset aTextPrintSslSe ; " -text	      -	print ssl session id"...
		dd offset aCertOutputCert ; " -cert	      -	output certificate \"...
		dd offset aNooutNoCrlOu_0 ; " -noout	      -	no CRL output\n"
		dd offset aContextArgSetT ; " -context arg    -	set the	session	ID c"...
		align 20h
_ciphers_usage	dd offset aUsageCiphersAr ; DATA XREF: _ciphers_main:loc_439DDEr
					; _ciphers_main+273o
					; "usage: ciphers args\n"
		dd offset aVVerboseModeAT ; " -v	  - verbose mode, a textual "...
		dd offset aVEvenMoreVerbo ; " -V	  - even more verbose\n"
		dd offset aSsl2Ssl2Mode	; " -ssl2	- SSL2 mode\n"
		dd offset aSsl3Ssl3Mode	; " -ssl3	- SSL3 mode\n"
		dd offset aTls1Tls1Mode	; " -tls1	- TLS1 mode\n"
		align 10h
_engine_usage	dd offset aUsageEngineOpt ; DATA XREF: _engine_main:loc_446F00r
					; _engine_main+375o
					; "usage: engine opts [engine ...]\n"
		dd offset aVVVVVerboseMod ; " -v[v[v[v]]] - verbose mode, for each e"...
		dd offset aVvWillAddition ; "		    -vv	will additionally di"...
		dd offset aVvvWillAlsoAdd ; "		    -vvv will also add the i"...
		dd offset aVvvvWillAlsoSh ; "		    -vvvv will also show int"...
		dd offset aCForEachEngine ; " -c	  - for	each engine, also li"...
		dd offset aTTForEachEngin ; " -t[t]	  - for	each engine, check t"...
		dd offset aTtWillDisplayE ; "		    -tt	will display error t"...
		dd offset aPreCmdRunsComm ; " -pre <cmd>  - runs command 'cmd' again"...
		dd offset aToLoadItIfTIsU ; "		    to load it (if -t is use"...
		dd offset aPostCmdRunsCom ; " -post <cmd> - runs command 'cmd' again"...
		dd offset aOnlyUsedIfTIsA ; "		    (only used if -t is	also"...
		dd offset aNbPreAndPostWi ; " NB: -pre and -post will be applied to "...
		dd offset aLineOrAllSuppo ; " line, or all supported ENGINEs if	none"...
		dd offset aEg_PreSo_pathL ; " Eg. '-pre \"SO_PATH:/lib/libdriver.so\"...
		dd offset aArgumentLibLib ; " argument \"/lib/libdriver.so\".\n"
		dd 8 dup(0)
_srp_usage	dd offset aUsageSrpArgsUs ; DATA XREF: _srp_main:loc_44D700r
					; _srp_main+1B5o
					; "usage: srp [args] [user] \n"
		dd offset asc_4711DE	; "\n"
		dd offset aVerboseTalkA_0 ; " -verbose	      Talk alot	while doing "...
		dd offset aConfigFileAC_0 ; " -config file    A	config file\n"
		dd offset aNameArgThePa_0 ; " -name arg	      The particular srp def"...
		dd offset aSrpvfileArgThe ; " -srpvfile	arg   The srp verifier file "...
		dd offset aAddAddAnUserAn ; " -add	      add an user and srp ve"...
		dd offset aModifyModifyTh ; " -modify	      modify the srp verifie"...
		dd offset aDeleteDeleteUs ; " -delete	      delete user from verif"...
		dd offset aListListUser	; " -list	    list user\n"
		dd offset aGnArgGAndNValu ; " -gn arg	      g	and N values to	be u"...
		dd offset aUserinfoArgAdd ; " -userinfo	arg   additional info to be "...
		dd offset aPassinArgInp_7 ; " -passin arg     input file pass phrase"...
		dd offset aPassoutArgOu_5 ; " -passout arg    output file pass phras"...
		dd offset aEngineEUseE_26 ; " -engine e		- use engine e,	poss"...
		align 10h
_OPENSSL_ApplinkTable_3636 dd 16h	; DATA XREF: _OPENSSL_Applink:loc_44ED93o
dword_457424	dd 0			; DATA XREF: _OPENSSL_Applink+Dw
dword_457428	dd 0			; DATA XREF: _OPENSSL_Applink+17w
dword_45742C	dd 0			; DATA XREF: _OPENSSL_Applink+21w
dword_457430	dd 0			; DATA XREF: _OPENSSL_Applink+2Bw
dword_457434	dd 0			; DATA XREF: _OPENSSL_Applink+35w
dword_457438	dd 0			; DATA XREF: _OPENSSL_Applink+3Fw
dword_45743C	dd 0			; DATA XREF: _OPENSSL_Applink+49w
dword_457440	dd 0			; DATA XREF: _OPENSSL_Applink+53w
dword_457444	dd 0			; DATA XREF: _OPENSSL_Applink+5Dw
dword_457448	dd 0			; DATA XREF: _OPENSSL_Applink+67w
dword_45744C	dd 0			; DATA XREF: _OPENSSL_Applink+71w
dword_457450	dd 0			; DATA XREF: _OPENSSL_Applink+7Bw
dword_457454	dd 0			; DATA XREF: _OPENSSL_Applink+85w
dword_457458	dd 0			; DATA XREF: _OPENSSL_Applink+8Fw
dword_45745C	dd 0			; DATA XREF: _OPENSSL_Applink+99w
dword_457460	dd 0			; DATA XREF: _OPENSSL_Applink+A3w
dword_457464	dd 0			; DATA XREF: _OPENSSL_Applink+ADw
dword_457468	dd 0			; DATA XREF: _OPENSSL_Applink+BCw
dword_45746C	dd 0			; DATA XREF: _OPENSSL_Applink+C6w
dword_457470	dd 0			; DATA XREF: _OPENSSL_Applink+D0w
dword_457474	dd 0			; DATA XREF: _OPENSSL_Applink+DAw
dword_457478	dd 0			; DATA XREF: _OPENSSL_Applink+E4w
_once_3635	dd 1			; DATA XREF: _OPENSSL_Applinkr
					; _OPENSSL_Applink+E9w
		public __charmax
; int _charmax
__charmax	dd 0FFh
		public ___native_vcclrit_reason
; volatile unsigned int	__native_vcclrit_reason
___native_vcclrit_reason dd 0FFFFFFFFh
		public ___native_dllmain_reason
; volatile unsigned int	__native_dllmain_reason
___native_dllmain_reason dd 0FFFFFFFFh
; Function-local static	variable
; func_ptr *p_59322
_p_59322	dd offset dword_454480	; DATA XREF: ___do_global_dtorsr
					; ___do_global_dtors+12r ...
		public __CRT_MT
; int _CRT_MT
__CRT_MT	dd 2			; DATA XREF: ___dyn_tls_init@12+4r
					; ___dyn_tls_init@12+11w
		public __MINGW_INSTALL_DEBUG_MATHERR
; int _MINGW_INSTALL_DEBUG_MATHERR
__MINGW_INSTALL_DEBUG_MATHERR dd 0FFFFFFFFh ; DATA XREF: _pre_c_init+7Ar
		public __imp___get_invalid_parameter_handler
; void (*(*__get_invalid_parameter_handler)(void))(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)
__imp___get_invalid_parameter_handler dd offset	_mingw_get_invalid_parameter_handler
		public __imp___set_invalid_parameter_handler
; void (*(*__set_invalid_parameter_handler)(void (*)(const wchar_t *, const wchar_t *, const wchar_t *,	unsigned int, uintptr_t)))(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t)
__imp___set_invalid_parameter_handler dd offset	_mingw_set_invalid_parameter_handler
					; CODE XREF: ___tmainCRTStartup+127p
; Function-local static	variable
		public ___security_cookie
; UINT_PTR __security_cookie
___security_cookie dd 0BB40E64Eh	; DATA XREF: ___security_init_cookie+9r
					; ___security_init_cookie:loc_45184Cw ...
		public ___security_cookie_complement
; UINT_PTR __security_cookie_complement
___security_cookie_complement dd 44BF19B1h ; DATA XREF:	___security_init_cookie+25w
					; ___security_init_cookie+92w ...
___JCR_END__	dd 0			; DATA XREF: ___gcc_register_framer
					; ___gcc_register_frame+42o
		public __data_end__
__data_end__	dd 55h dup(0)
		align 1000h
_data		ends

; Section 3. (virtual address 00058000)
; Virtual size			: 00019DD0 ( 105936.)
; Section size in file		: 00019E00 ( 105984.)
; Offset to raw	data for section: 00056200
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 458000h
; CHAR ModuleName[]
ModuleName	db 'libgcj-13.dll',0    ; DATA XREF: ___gcc_register_frame+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: ___gcc_register_frame+28o
		align 4
aInvalidMode	db 'invalid mode',0     ; DATA XREF: _lock_dbg_cb:loc_40157Bo
aNotLocked	db 'not locked',0       ; DATA XREF: _lock_dbg_cb:loc_401630o
aAlreadyLocked	db 'already locked',0   ; DATA XREF: _lock_dbg_cb:loc_401620o
aTypeOutOfBound	db 'type out of bounds',0 ; DATA XREF: _lock_dbg_cb:loc_4015E0o
aCrypto_r_unloc	db 'CRYPTO_r_unlock on write lock',0 ; DATA XREF: _lock_dbg_cb:loc_40164Ao
aCrypto_w_unloc	db 'CRYPTO_w_unlock on read lock',0 ; DATA XREF: _lock_dbg_cb+A8o
		align 4
; char aOpensslLock_db[]
aOpensslLock_db	db 'openssl (lock_dbg_cb): %s (mode=%d, type=%d) at %s:%d',0Ah,0
					; DATA XREF: _lock_dbg_cb+3Co
aExternal	db 'External',0         ; DATA XREF: _do_cmd+47Fo
aBuiltin	db 'Builtin',0          ; DATA XREF: _do_cmd:loc_401B80o
aNone_0		db '(none)',0           ; DATA XREF: _do_cmd:loc_401B91o
					; _do_cmd+4F9o
aS_0		db '%s',0Ah,0           ; DATA XREF: _do_cmd+1E6o _do_cmd+313o ...
aQuit		db 'quit',0             ; DATA XREF: _do_cmd+D8o
aQ		db 'q',0                ; DATA XREF: _do_cmd+ECo
aExit		db 'exit',0             ; DATA XREF: _do_cmd+100o
aBye		db 'bye',0              ; DATA XREF: _do_cmd+114o
aListStandardCo	db 'list-standard-commands',0 ; DATA XREF: _do_cmd+128o
aListMessageDig	db 'list-message-digest-commands',0 ; DATA XREF: _do_cmd+13Co
		align 4
aListMessageD_0	db 'list-message-digest-algorithms',0 ; DATA XREF: _do_cmd+150o
aListCipherComm	db 'list-cipher-commands',0 ; DATA XREF: _do_cmd:loc_4019F0o
aListCipherAlgo	db 'list-cipher-algorithms',0 ; DATA XREF: _do_cmd+20Co
					; _do_cmd+364o
aListPublicKeyA	db 'list-public-key-algorithms',0 ; DATA XREF: _do_cmd:loc_401898o
					; _do_cmd+378o
aNameS		db 'Name: %s',0Ah,0     ; DATA XREF: _do_cmd+424o _do_cmd+468o
aTypeAliasToS	db 9,'Type: Alias to %s',0Ah,0 ; DATA XREF: _do_cmd+444o
aTypeSAlgorithm	db 9,'Type: %s Algorithm',0Ah,0 ; DATA XREF: _do_cmd+488o
aOidS		db 9,'OID: %s',0Ah,0    ; DATA XREF: _do_cmd+4A8o
aPemStringS	db 9,'PEM string: %s',0Ah,0 ; DATA XREF: _do_cmd+4C4o
aOpensslErrorSI	db 'openssl:Error: ',27h,'%s',27h,' is an invalid command.',0Ah,0
					; DATA XREF: _do_cmd+50Eo
aStandardComman	db 0Ah			; DATA XREF: _do_cmd+523o
		db 'Standard commands',0
asc_458227	db 0Ah			; DATA XREF: _do_cmd:loc_401C6Ao
		db 0Ah,0
asc_45822A	db 0Ah,0		; DATA XREF: _do_cmd+557o _do_cmd+5ABo
aMessageDigestC	db 0Ah			; DATA XREF: _do_cmd:loc_401C86o
		db 'Message Digest commands (see the `dgst',27h,' command for more detai'
		db 'ls)',0Ah,0
aCipherCommands	db 0Ah			; DATA XREF: _do_cmd:loc_401CA5o
		db 'Cipher commands (see the `enc',27h,' command for more details)',0Ah,0
a18s		db '%-18s',0            ; DATA XREF: _do_cmd+583o
; char aNo_2[]
aNo_2		db 'no-',0              ; DATA XREF: _do_cmd+C0o
aUndefined	db '<undefined>',0      ; DATA XREF: _list_md_fn:loc_401D90o
					; _list_md_fn:loc_401DA0o ...
aSS_0		db '%s => %s',0Ah,0     ; DATA XREF: _list_md_fn+60o
					; _list_cipher_fn+60o
asc_4582CB	db '>',0                ; DATA XREF: _main+4A0o
; char aOpenssl_0[]
aOpenssl_0	db 'OpenSSL> ',0        ; DATA XREF: _main+497o
; char aOpenssl_debug_[]
aOpenssl_debug_	db 'OPENSSL_DEBUG_MEMORY',0 ; DATA XREF: _main:loc_4522FFo
					; _main+3Fo
aOff		db 'off',0              ; DATA XREF: _main+4Bo
; char aOpenssl_fips[]
aOpenssl_fips	db 'OPENSSL_FIPS',0     ; DATA XREF: _main+AFo
aFipsModeNotSup	db 'FIPS mode not supported.',0Ah,0 ; DATA XREF: _main+DBo
; char aOpenssl_conf_2[]
aOpenssl_conf_2	db 'OPENSSL_CONF',0     ; DATA XREF: _main+154o
; char aSsleay_conf_2[]
aSsleay_conf_2	db 'SSLEAY_CONF',0      ; DATA XREF: _main:loc_45281Ao
aWarningCanTOpe	db 'WARNING: can',27h,'t open config file: %s',0Ah,0 ; DATA XREF: _main+1D6o
aErrorInS	db 'error in %s',0Ah,0  ; DATA XREF: _main+529o
aBadExit	db 'bad exit',0Ah,0     ; DATA XREF: _main:loc_45283Eo
aVerify_13	db 'verify',0           ; DATA XREF: .data:off_455024o
aAsn1parse_1	db 'asn1parse',0        ; DATA XREF: .data:00455030o
aReq_1		db 'req',0              ; DATA XREF: .data:0045503Co
aDgst		db 'dgst',0             ; DATA XREF: .data:00455048o
aDh_0		db 'dh',0               ; DATA XREF: .data:00455054o
aDhparam_0	db 'dhparam',0          ; DATA XREF: .data:00455060o
aEnc_0		db 'enc',0              ; DATA XREF: .data:0045506Co
aPasswd		db 'passwd',0           ; DATA XREF: .data:00455078o
aGendh		db 'gendh',0            ; DATA XREF: .data:00455084o
aErrstr		db 'errstr',0           ; DATA XREF: .data:00455090o
aCa_3		db 'ca',0               ; DATA XREF: .data:0045509Co
aCrl		db 'crl',0              ; DATA XREF: .data:004550A8o
aRsa_2		db 'rsa',0              ; DATA XREF: .data:004550B4o
aRsautl		db 'rsautl',0           ; DATA XREF: .data:004550C0o
aDsa_1		db 'dsa',0              ; DATA XREF: .data:004550CCo
aDsaparam_0	db 'dsaparam',0         ; DATA XREF: .data:004550D8o
aEc		db 'ec',0               ; DATA XREF: .data:004550E4o
aEcparam	db 'ecparam',0          ; DATA XREF: .data:004550F0o
aX509_0		db 'x509',0             ; DATA XREF: .data:004550FCo
aGenrsa		db 'genrsa',0           ; DATA XREF: .data:00455108o
aGendsa		db 'gendsa',0           ; DATA XREF: .data:00455114o
aGenpkey	db 'genpkey',0          ; DATA XREF: .data:00455120o
aS_server	db 's_server',0         ; DATA XREF: .data:0045512Co
aS_client	db 's_client',0         ; DATA XREF: .data:00455138o
aSpeed		db 'speed',0            ; DATA XREF: .data:00455144o
aS_time		db 's_time',0           ; DATA XREF: .data:00455150o
aVersion	db 'version',0          ; DATA XREF: .data:0045515Co
aPkcs7		db 'pkcs7',0            ; DATA XREF: .data:00455168o
aCms		db 'cms',0              ; DATA XREF: .data:00455174o
aCrl2pkcs7	db 'crl2pkcs7',0        ; DATA XREF: .data:00455180o
aSess_id	db 'sess_id',0          ; DATA XREF: .data:0045518Co
aCiphers	db 'ciphers',0          ; DATA XREF: .data:00455198o
aNseq		db 'nseq',0             ; DATA XREF: .data:004551A4o
aPkcs12_1	db 'pkcs12',0           ; DATA XREF: .data:004551B0o
aPkcs8		db 'pkcs8',0            ; DATA XREF: .data:004551BCo
aPkey		db 'pkey',0             ; DATA XREF: .data:004551C8o
aPkeyparam	db 'pkeyparam',0        ; DATA XREF: .data:004551D4o
aPkeyutl	db 'pkeyutl',0          ; DATA XREF: .data:004551E0o
aSpkac_3	db 'spkac',0            ; DATA XREF: .data:004551ECo
aSmime		db 'smime',0            ; DATA XREF: .data:004551F8o
aRand_15	db 'rand',0             ; DATA XREF: .data:00455204o
aEngine_32	db 'engine',0           ; DATA XREF: .data:00455210o
aOcsp		db 'ocsp',0             ; DATA XREF: .data:0045521Co
aPrime		db 'prime',0            ; DATA XREF: .data:00455228o
aTs		db 'ts',0               ; DATA XREF: .data:00455234o
aSrp_1		db 'srp',0              ; DATA XREF: .data:00455240o
aMd4_1		db 'md4',0              ; DATA XREF: .data:0045524Co
aMd5_1		db 'md5',0              ; DATA XREF: .data:00455258o
aSha_0		db 'sha',0              ; DATA XREF: .data:00455264o
aSha1_2		db 'sha1',0             ; DATA XREF: .data:00455270o
aMdc2_1		db 'mdc2',0             ; DATA XREF: .data:0045527Co
aRmd160_0	db 'rmd160',0           ; DATA XREF: .data:00455288o
aAes128Cbc_1	db 'aes-128-cbc',0      ; DATA XREF: .data:00455294o
aAes128Ecb	db 'aes-128-ecb',0      ; DATA XREF: .data:004552A0o
aAes192Cbc_1	db 'aes-192-cbc',0      ; DATA XREF: .data:004552ACo
aAes192Ecb	db 'aes-192-ecb',0      ; DATA XREF: .data:004552B8o
aAes256Cbc_1	db 'aes-256-cbc',0      ; DATA XREF: .data:004552C4o
aAes256Ecb	db 'aes-256-ecb',0      ; DATA XREF: .data:004552D0o
aCamellia128C_8	db 'camellia-128-cbc',0 ; DATA XREF: .data:004552DCo
aCamellia128Ecb	db 'camellia-128-ecb',0 ; DATA XREF: .data:004552E8o
aCamellia192C_1	db 'camellia-192-cbc',0 ; DATA XREF: .data:004552F4o
aCamellia192Ecb	db 'camellia-192-ecb',0 ; DATA XREF: .data:00455300o
aCamellia256C_1	db 'camellia-256-cbc',0 ; DATA XREF: .data:0045530Co
aCamellia256Ecb	db 'camellia-256-ecb',0 ; DATA XREF: .data:00455318o
aBase64_2	db 'base64',0           ; DATA XREF: .data:00455324o
aDes_6		db 'des',0              ; DATA XREF: .data:00455330o
aDes3_4		db 'des3',0             ; DATA XREF: .data:0045533Co
aDesx		db 'desx',0             ; DATA XREF: .data:00455348o
aIdea_4		db 'idea',0             ; DATA XREF: .data:00455354o
aSeed_8		db 'seed',0             ; DATA XREF: .data:00455360o
aRc4_0		db 'rc4',0              ; DATA XREF: .data:0045536Co
aRc440		db 'rc4-40',0           ; DATA XREF: .data:00455378o
aRc2_1		db 'rc2',0              ; DATA XREF: .data:00455384o
aBf_0		db 'bf',0               ; DATA XREF: .data:00455390o
aCast_0		db 'cast',0             ; DATA XREF: .data:0045539Co
aDesEcb		db 'des-ecb',0          ; DATA XREF: .data:004553A8o
aDesEde		db 'des-ede',0          ; DATA XREF: .data:004553B4o
aDesEde3_1	db 'des-ede3',0         ; DATA XREF: .data:004553C0o
aDesCbc_1	db 'des-cbc',0          ; DATA XREF: .data:004553CCo
aDesEdeCbc	db 'des-ede-cbc',0      ; DATA XREF: .data:004553D8o
aDesEde3Cbc	db 'des-ede3-cbc',0     ; DATA XREF: .data:004553E4o
aDesCfb		db 'des-cfb',0          ; DATA XREF: .data:004553F0o
aDesEdeCfb	db 'des-ede-cfb',0      ; DATA XREF: .data:004553FCo
aDesEde3Cfb	db 'des-ede3-cfb',0     ; DATA XREF: .data:00455408o
aDesOfb		db 'des-ofb',0          ; DATA XREF: .data:00455414o
aDesEdeOfb	db 'des-ede-ofb',0      ; DATA XREF: .data:00455420o
aDesEde3Ofb	db 'des-ede3-ofb',0     ; DATA XREF: .data:0045542Co
aIdeaCbc_2	db 'idea-cbc',0         ; DATA XREF: .data:00455438o
aIdeaEcb	db 'idea-ecb',0         ; DATA XREF: .data:00455444o
aIdeaCfb	db 'idea-cfb',0         ; DATA XREF: .data:00455450o
aIdeaOfb	db 'idea-ofb',0         ; DATA XREF: .data:0045545Co
aSeedCbc_2	db 'seed-cbc',0         ; DATA XREF: .data:00455468o
aSeedEcb	db 'seed-ecb',0         ; DATA XREF: .data:00455474o
aSeedCfb	db 'seed-cfb',0         ; DATA XREF: .data:00455480o
aSeedOfb	db 'seed-ofb',0         ; DATA XREF: .data:0045548Co
aRc2Cbc_2	db 'rc2-cbc',0          ; DATA XREF: .data:00455498o
aRc2Ecb		db 'rc2-ecb',0          ; DATA XREF: .data:004554A4o
aRc2Cfb		db 'rc2-cfb',0          ; DATA XREF: .data:004554B0o
aRc2Ofb		db 'rc2-ofb',0          ; DATA XREF: .data:004554BCo
aRc264Cbc	db 'rc2-64-cbc',0       ; DATA XREF: .data:004554C8o
aRc240Cbc	db 'rc2-40-cbc',0       ; DATA XREF: .data:004554D4o
aBfCbc_0	db 'bf-cbc',0           ; DATA XREF: .data:004554E0o
aBfEcb		db 'bf-ecb',0           ; DATA XREF: .data:004554ECo
aBfCfb		db 'bf-cfb',0           ; DATA XREF: .data:004554F8o
aBfOfb		db 'bf-ofb',0           ; DATA XREF: .data:00455504o
aCast5Cbc	db 'cast5-cbc',0        ; DATA XREF: .data:00455510o
aCast5Ecb	db 'cast5-ecb',0        ; DATA XREF: .data:0045551Co
aCast5Cfb	db 'cast5-cfb',0        ; DATA XREF: .data:00455528o
aCast5Ofb	db 'cast5-ofb',0        ; DATA XREF: .data:00455534o
aCastCbc_1	db 'cast-cbc',0         ; DATA XREF: .data:00455540o
aCrlPath	db '[CRL path]',0       ; DATA XREF: _cb+89o
byte_4586DF	db 0			; DATA XREF: _cb:loc_401FB0o
; char aSerrorDAtDDept[]
aSerrorDAtDDept	db '%serror %d at %d depth lookup:%s',0Ah,0 ; DATA XREF: _cb+9Eo
		align 4
off_458704	dd offset loc_401F40	; DATA XREF: _cb+B2r
		dd offset loc_401F40	; jump table for switch	statement
		dd offset loc_401F40
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F40
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F40
		dd offset loc_401F40
		dd offset loc_401F40
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F40
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F40
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F28
		dd offset loc_401F60
aStdin		db 'stdin',0            ; DATA XREF: _check:loc_402150o
aCertificateFil	db 'certificate file',0 ; DATA XREF: _check+Do
; char aS_1[]
aS_1		db '%s: ',0             ; DATA XREF: _check+54o
aOk		db 'OK',0Ah,0           ; DATA XREF: _check+10Do
aCapath		db '-CApath',0          ; DATA XREF: _verify_main+D5o
aCafile		db '-CAfile',0          ; DATA XREF: _verify_main+E5o
aUntrusted	db '-untrusted',0       ; DATA XREF: _verify_main+296o
aTrusted	db '-trusted',0         ; DATA XREF: _verify_main+2A6o
aCrlfile	db '-CRLfile',0         ; DATA XREF: _verify_main:loc_4026D0o
aEngine		db '-engine',0          ; DATA XREF: _verify_main+570o
aHelp		db '-help',0            ; DATA XREF: _verify_main:loc_4027DDo
aVerbose	db '-verbose',0         ; DATA XREF: _verify_main+681o
aErrorLoadingFi	db 'Error loading file %s',0Ah,0 ; DATA XREF: _verify_main+660o
aErrorLoadingDi	db 'Error loading directory %s',0Ah,0 ; DATA XREF: _verify_main+5D0o
aUntrustedCerti	db 'untrusted certificates',0 ; DATA XREF: _verify_main+434o
aTrustedCertifi	db 'trusted certificates',0 ; DATA XREF: _verify_main+47Do
aOtherCrls	db 'other CRLs',0       ; DATA XREF: _verify_main+4C4o
a10sS		db 9,'%-10s',9,'%s',0Ah,0 ; DATA XREF: _verify_main+1F4o
		align 4
aUsageVerifyVer	db 'usage: verify [-verbose] [-CApath path] [-CAfile file] [-purpose '
					; DATA XREF: _verify_main:loc_4022CBo
		db 'purpose] [-crl_check]',0
		align 10h
aNo_alt_chainsA	db ' [-no_alt_chains] [-attime timestamp]',0 ; DATA XREF: _verify_main+170o
aEngineE	db ' [-engine e]',0     ; DATA XREF: _verify_main+185o
aCert1Cert2___	db ' cert1 cert2 ...',0Ah,0 ; DATA XREF: _verify_main+19Ao
aRecognizedUsag	db 'recognized usages:',0Ah,0 ; DATA XREF: _verify_main+1AFo
		align 4
aMemoryAllocati	db 'Memory allocation failure',0Ah,0
					; DATA XREF: _asn1parse_main:loc_4030B5o
aInform		db '-inform',0          ; DATA XREF: _asn1parse_main+145o
aIn		db '-in',0              ; DATA XREF: _asn1parse_main+153o
aOut		db '-out',0             ; DATA XREF: _asn1parse_main:loc_402C90o
aI		db '-i',0               ; DATA XREF: _asn1parse_main:loc_402CC0o
aNoout		db '-noout',0           ; DATA XREF: _asn1parse_main+420o
aOid		db '-oid',0             ; DATA XREF: _asn1parse_main+434o
aOffset		db '-offset',0          ; DATA XREF: _asn1parse_main+448o
aLength		db '-length',0          ; DATA XREF: _asn1parse_main:loc_402F50o
aDump		db '-dump',0            ; DATA XREF: _asn1parse_main+6B0o
aDlimit		db '-dlimit',0          ; DATA XREF: _asn1parse_main+6C4o
aStrparse	db '-strparse',0        ; DATA XREF: _asn1parse_main:loc_40312Do
aGenstr		db '-genstr',0          ; DATA XREF: _asn1parse_main:loc_40325Do
aGenconf	db '-genconf',0         ; DATA XREF: _asn1parse_main:loc_40342Co
aUnknownOptionS	db 'unknown option %s',0Ah,0 ; DATA XREF: _asn1parse_main+493o
aSOptionsInfile	db '%s [options] <infile',0Ah,0 ; DATA XREF: _asn1parse_main+4B8o
aWhereOptionsAr	db 'where options are',0Ah,0 ; DATA XREF: _asn1parse_main+4CDo
aInformArgInput	db ' -inform arg   input format - one of DER PEM',0Ah,0
					; DATA XREF: _asn1parse_main+4E2o
aInArgInputFile	db ' -in arg       input file',0Ah,0 ; DATA XREF: _asn1parse_main+4F7o
		align 4
aOutArgOutputFi	db ' -out arg      output file (output format is always DER',0Ah,0
					; DATA XREF: _asn1parse_main+50Co
		align 4
aNooutArgDonTPr	db ' -noout arg    don',27h,'t produce any output',0Ah,0
					; DATA XREF: _asn1parse_main+521o
		align 10h
aOffsetArgOffse	db ' -offset arg   offset into file',0Ah,0 ; DATA XREF: _asn1parse_main+536o
		align 4
aLengthArgLengt	db ' -length arg   length of section in file',0Ah,0
					; DATA XREF: _asn1parse_main+54Bo
		align 10h
aIIndentEntries	db ' -i            indent entries',0Ah,0 ; DATA XREF: _asn1parse_main+560o
		align 10h
aDumpDumpUnknow	db ' -dump         dump unknown data in hex form',0Ah,0
					; DATA XREF: _asn1parse_main+575o
		align 10h
aDlimitArgDumpT	db ' -dlimit arg   dump the first arg bytes of unknown data in hex fo'
					; DATA XREF: _asn1parse_main+58Ao
		db 'rm',0Ah,0
		align 4
aOidFileFileOfE	db ' -oid file     file of extra oid definitions',0Ah,0
					; DATA XREF: _asn1parse_main+59Fo
aStrparseOffset	db ' -strparse offset',0Ah,0 ; DATA XREF: _asn1parse_main+5B4o
		align 4
aASeriesOfThese	db '               a series of these can be used to ',27h,'dig',27h,' into '
					; DATA XREF: _asn1parse_main+5C9o
		db 'multiple',0Ah,0
		align 4
aAsn1BlobWrappi	db '               ASN1 blob wrappings',0Ah,0
					; DATA XREF: _asn1parse_main+5DEo
aGenstrStrStrin	db ' -genstr str   string to generate ASN1 structure from',0Ah,0
					; DATA XREF: _asn1parse_main+5F3o
		align 10h
aGenconfFileFil	db ' -genconf file file to generate ASN1 structure from',0Ah,0
					; DATA XREF: _asn1parse_main+608o
aProblemsOpenin	db 'problems opening %s',0Ah,0 ; DATA XREF: _asn1parse_main+8BBo
					; _asn1parse_main+B44o
aWb_0		db 'wb',0               ; DATA XREF: _asn1parse_main+24Fo
aAsn1		db 'asn1',0             ; DATA XREF: _asn1parse_main+A2Co
aDefault	db 'default',0          ; DATA XREF: _asn1parse_main+A34o
aCanTFindAsn1In	db 'Can',27h,'t find ',27h,'asn1',27h,' in ',27h,'%s',27h,0Ah,0
					; DATA XREF: _asn1parse_main+A58o
		align 4
aErrorOnLineLdO	db 'Error on line %ld of config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _asn1parse_main+BFEo
		align 10h
aErrorLoadingCo	db 'Error loading config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _asn1parse_main+C79o
aSIsAnInvalidNu	db 27h,'%s',27h,' is an invalid number',0Ah,0
					; DATA XREF: _asn1parse_main+3C6o
aErrorParsingSt	db 'Error parsing structure',0Ah,0 ; DATA XREF: _asn1parse_main+BB0o
aCanTParseSType	db 'Can',27h,'t parse %s type',0Ah,0 ; DATA XREF: _asn1parse_main+B10o
aErrorOffsetToo	db 'Error: offset too large',0Ah,0 ; DATA XREF: _asn1parse_main:loc_403474o
aErrorWritingOu	db 'Error writing output',0Ah,0 ; DATA XREF: _asn1parse_main+95Bo
; char aParam[]
aParam		db 'param:',0           ; DATA XREF: _set_keygen_ctx+56o
aUnknownAlgorit	db 'Unknown algorithm %.*s',0Ah,0 ; DATA XREF: _set_keygen_ctx+C6o
aR_6		db 'r',0                ; DATA XREF: _req_main+34Ao
					; _set_keygen_ctx+173o
aCanTOpenPara_0	db 'Can',27h,'t open parameter file %s',0Ah,0
					; DATA XREF: _set_keygen_ctx+18Do
		align 4
aErrorReading_8	db 'Error reading parameter file %s',0Ah,0 ; DATA XREF: _set_keygen_ctx+22Co
		align 4
aKeyTypeDoesNot	db 'Key Type does not match parameters',0Ah,0
					; DATA XREF: _set_keygen_ctx+263o
aInternalErro_0	db 'Internal error: can',27h,'t find key algorithm',0Ah,0
					; DATA XREF: _set_keygen_ctx+2A9o
		align 4
aErrorAllocat_0	db 'Error allocating keygen context',0Ah,0 ; DATA XREF: _set_keygen_ctx+35Co
		align 10h
aErrorInitial_3	db 'Error initializing keygen context',0Ah,0
					; DATA XREF: _set_keygen_ctx+389o
aErrorSettingRs	db 'Error setting RSA keysize',0Ah,0 ; DATA XREF: _set_keygen_ctx+3E7o
		align 10h
aStringIsTooSho	db 'string is too short, it needs to be at least %d bytes long',0Ah,0
					; DATA XREF: _req_check_len+12o
aStringIsTooLon	db 'string is too long, it needs to be less than  %d bytes long',0Ah,0
					; DATA XREF: _req_check_len+3Co
aParameterError	db 'parameter error "%s"',0Ah,0 ; DATA XREF: _do_X509_sign+B4o
					; _do_X509_REQ_sign+B4o ...
byte_458F2F	db 0			; DATA XREF: _req_main+18D2o
					; _req_main+1E60o
aInform_0	db '-inform',0          ; DATA XREF: _req_main+22Ao
aOutform	db '-outform',0         ; DATA XREF: _req_main+233o
aEngine_0	db '-engine',0          ; DATA XREF: _req_main:loc_4042E0o
aKeygen_engine	db '-keygen_engine',0   ; DATA XREF: _req_main:loc_404310o
aCanTFindKeygen	db 'Can',27h,'t find keygen engine %s',0Ah,0 ; DATA XREF: _req_main+B38o
aKey		db '-key',0             ; DATA XREF: _req_main:loc_404370o
aPubkey		db '-pubkey',0          ; DATA XREF: _req_main:loc_404850o
aNew		db '-new',0             ; DATA XREF: _req_main:loc_404870o
aConfig		db '-config',0          ; DATA XREF: _req_main+1070o
aKeyform	db '-keyform',0         ; DATA XREF: _req_main:loc_4048B5o
aIn_0		db '-in',0              ; DATA XREF: _req_main+10B5o
aOut_0		db '-out',0             ; DATA XREF: _req_main:loc_404971o
aKeyout		db '-keyout',0          ; DATA XREF: _req_main:loc_404B72o
aPassin		db '-passin',0          ; DATA XREF: _req_main:loc_404BA9o
aPassout	db '-passout',0         ; DATA XREF: _req_main:loc_404BF3o
aRand		db '-rand',0            ; DATA XREF: _req_main:loc_404CE0o
aNewkey		db '-newkey',0          ; DATA XREF: _req_main:loc_404E95o
aPkeyopt	db '-pkeyopt',0         ; DATA XREF: _req_main:loc_405A73o
aSigopt		db '-sigopt',0          ; DATA XREF: _req_main:loc_405B14o
aBatch		db '-batch',0           ; DATA XREF: _req_main:loc_4061CAo
aNewhdr		db '-newhdr',0          ; DATA XREF: _req_main:loc_4061F5o
aModulus_0	db '-modulus',0         ; DATA XREF: _req_main+29F9o
aVerify		db '-verify',0          ; DATA XREF: _req_main+2A0Do
aNodes		db '-nodes',0           ; DATA XREF: _req_main+2A21o
aNoout_0	db '-noout',0           ; DATA XREF: _req_main+2A35o
aVerbose_0	db '-verbose',0         ; DATA XREF: _req_main+2A49o
aUtf8_0		db '-utf8',0            ; DATA XREF: _req_main+2A5Do
aNameopt	db '-nameopt',0         ; DATA XREF: _req_main+2A71o
aReqopt		db '-reqopt',0          ; DATA XREF: _req_main:loc_4067E1o
aSubject_0	db '-subject',0         ; DATA XREF: _req_main:loc_40682Do
aText		db '-text',0            ; DATA XREF: _req_main+3031o
aX509		db '-x509',0            ; DATA XREF: _req_main+3045o
aAsn1Kludge	db '-asn1-kludge',0     ; DATA XREF: _req_main+3059o
aNoAsn1Kludge	db '-no-asn1-kludge',0  ; DATA XREF: _req_main+306Do
aSubj		db '-subj',0            ; DATA XREF: _req_main+3081o
aMultivalueRdn	db '-multivalue-rdn',0  ; DATA XREF: _req_main:loc_4068D8o
aDays		db '-days',0            ; DATA XREF: _req_main+30DCo
aSet_serial	db '-set_serial',0      ; DATA XREF: _req_main:loc_406942o
aExtensions	db '-extensions',0      ; DATA XREF: _req_main:loc_406992o
aReqexts	db '-reqexts',0         ; DATA XREF: _req_main:loc_406A46o
aUnknownOptio_0	db 'unknown option %s',0Ah,0 ; DATA XREF: _req_main+B8Co
		align 4
aSOptionsInfi_0	db '%s [options] <infile >outfile',0Ah,0 ; DATA XREF: _req_main+BB8o
aWhereOptions_0	db 'where options  are',0Ah,0 ; DATA XREF: _req_main+BCDo
		align 10h
aInformArgInp_0	db ' -inform arg    input format - DER or PEM',0Ah,0
					; DATA XREF: _req_main+BE2o
		align 4
aOutformArgOutp	db ' -outform arg   output format - DER or PEM',0Ah,0
					; DATA XREF: _req_main+BF7o
aInArgInputFi_0	db ' -in arg        input file',0Ah,0 ; DATA XREF: _req_main+C0Co
aOutArgOutput_0	db ' -out arg       output file',0Ah,0 ; DATA XREF: _req_main+C21o
		align 4
aTextTextFormOf	db ' -text          text form of request',0Ah,0 ; DATA XREF: _req_main+C36o
		align 4
aPubkeyOutputPu	db ' -pubkey        output public key',0Ah,0 ; DATA XREF: _req_main+C4Bo
		align 10h
aNooutDoNotOutp	db ' -noout         do not output REQ',0Ah,0 ; DATA XREF: _req_main+C60o
		align 4
aVerifyVerifySi	db ' -verify        verify signature on REQ',0Ah,0
					; DATA XREF: _req_main+C75o
aModulusRsaModu	db ' -modulus       RSA modulus',0Ah,0 ; DATA XREF: _req_main+C8Ao
		align 4
aNodesDonTEncry	db ' -nodes         don',27h,'t encrypt the output key',0Ah,0
					; DATA XREF: _req_main+C9Fo
		align 4
aEngineEUseEn_0	db ' -engine e      use engine e, possibly a hardware device',0Ah,0
					; DATA XREF: _req_main+CB4o
		align 4
aSubjectOutputT	db ' -subject       output the request',27h,'s subject',0Ah,0
					; DATA XREF: _req_main+CC9o
		align 4
aPassinPrivateK	db ' -passin        private key password source',0Ah,0
					; DATA XREF: _req_main+CDEo
		align 4
aKeyFileUseTheP	db ' -key file      use the private key contained in file',0Ah,0
					; DATA XREF: _req_main+CF3o
		align 10h
aKeyformArgKeyF	db ' -keyform arg   key file format',0Ah,0 ; DATA XREF: _req_main+D08o
		align 4
aKeyoutArgFileT	db ' -keyout arg    file to send the key to',0Ah,0
					; DATA XREF: _req_main+D1Do
aRandFileCfileC	db ' -rand file%cfile%c...',0Ah,0 ; DATA XREF: _req_main+D42o
		align 4
aLoadTheFileOrT	db '                load the file (or the files in the directory) int'
					; DATA XREF: _req_main+D57o
		db 'o',0Ah,0
aTheRandomNumbe	db '                the random number generator',0Ah,0
					; DATA XREF: _req_main+D6Co
		align 4
aNewkeyRsaBitsG	db ' -newkey rsa:bits generate a new RSA key of ',27h,'bits',27h,' in size',0Ah
					; DATA XREF: _req_main+D81o
		db 0
aNewkeyDsaFileG	db ' -newkey dsa:file generate a new DSA key, parameters taken from C'
					; DATA XREF: _req_main+D96o
		db 'A in ',27h,'file',27h,0Ah,0
		align 4
aNewkeyEcFileGe	db ' -newkey ec:file generate a new EC key, parameters taken from CA '
					; DATA XREF: _req_main+DABo
		db 'in ',27h,'file',27h,0Ah,0
aDigestDigestTo	db ' -[digest]      Digest to sign with (md5, sha1, md2, mdc2, md4)',0Ah
					; DATA XREF: _req_main+DC0o
		db 0
		align 4
aConfigFileRequ	db ' -config file   request template file.',0Ah,0
					; DATA XREF: _req_main+DD5o
aSubjArgSetOrMo	db ' -subj arg      set or modify request subject',0Ah,0
					; DATA XREF: _req_main+DEAo
		align 10h
aMultivalueRdnE	db ' -multivalue-rdn enable support for multivalued RDNs',0Ah,0
					; DATA XREF: _req_main+DFFo
aNewNewRequest_	db ' -new           new request.',0Ah,0 ; DATA XREF: _req_main+E14o
aBatchDoNotAskA	db ' -batch         do not ask anything during request generation',0Ah,0
					; DATA XREF: _req_main+E29o
		align 4
aX509OutputAX50	db ' -x509          output a x509 structure instead of a cert. req.',0Ah
					; DATA XREF: _req_main+E3Eo
		db 0
		align 4
aDaysNumberOfDa	db ' -days          number of days a certificate generated by -x509 i'
					; DATA XREF: _req_main+E53o
		db 's valid for.',0Ah,0
		align 4
aSet_serialSeri	db ' -set_serial    serial number to use for a certificate generated '
					; DATA XREF: _req_main+E68o
		db 'by -x509.',0Ah,0
aNewhdrOutputNe	db ' -newhdr        output "NEW" in the header lines',0Ah,0
					; DATA XREF: _req_main+E7Do
		align 4
aAsn1KludgeOutp	db ' -asn1-kludge   Output the ',27h,'request',27h,' in a format that is wr'
					; DATA XREF: _req_main+E92o
		db 'ong but some CA',27h,'s',0Ah,0
		align 4
aHaveBeenReport	db '                have been reported as requiring',0Ah,0
					; DATA XREF: _req_main+EA7o
		align 4
; static aExtensions(*)
aExtensions__Sp	db ' -extensions .. specify certificate extension section (override v'
					; DATA XREF: _req_main+EBCo
		db 'alue in config file)',0Ah,0
		align 4
aReqexts__Speci	db ' -reqexts ..    specify request extension section (override value'
					; DATA XREF: _req_main+ED1o
		db ' in config file)',0Ah,0
		align 4
aUtf8InputChara	db ' -utf8          input characters are UTF8 (default ASCII)',0Ah,0
					; DATA XREF: _req_main+EE6o
		align 4
aNameoptArgVari	db ' -nameopt arg    - various certificate name options',0Ah,0
					; DATA XREF: _req_main+EFBo
		align 4
aReqoptArgVario	db ' -reqopt arg    - various request text options',0Ah
					; DATA XREF: _req_main+F10o
		db 0Ah,0
aErrorGettingPa	db 'Error getting passwords',0Ah,0 ; DATA XREF: _req_main:loc_404957o
aUsingConfigura	db 'Using configuration from %s',0Ah,0 ; DATA XREF: _req_main+11C0o
					; _req_main+1348o
aErrorOnLineL_0	db 'error on line %ld of %s',0Ah,0 ; DATA XREF: _req_main+119Eo
aUnableToLoadCo	db 'Unable to load config info from %s',0Ah,0 ; DATA XREF: _req_main+15E2o
aOid_file	db 'oid_file',0         ; DATA XREF: _req_main+325o
aDefault_md	db 'default_md',0       ; DATA XREF: _req_main:loc_406177o
aReq		db 'req',0              ; DATA XREF: _req_main+444o
					; _req_main+485o ...
aX509_extension	db 'x509_extensions',0  ; DATA XREF: _req_main:loc_406144o
aErrorLoadingEx	db 'Error Loading extension section %s',0Ah,0 ; DATA XREF: _req_main+13D6o
					; _req_main+2544o ...
aInput_password	db 'input_password',0   ; DATA XREF: _req_main:loc_4060CEo
aOutput_passwor	db 'output_password',0  ; DATA XREF: _req_main:loc_40610Eo
aString_mask	db 'string_mask',0      ; DATA XREF: _req_main:loc_403C4Co
		align 4
aInvalidGlobalS	db 'Invalid global string mask setting %s',0Ah,0
					; DATA XREF: _req_main+1524o
aUtf8		db 'utf8',0             ; DATA XREF: _req_main+47Do
aYes		db 'yes',0              ; DATA XREF: _req_main+4A2o
aReq_extensions	db 'req_extensions',0   ; DATA XREF: _req_main:loc_404E62o
		align 4
aErrorLoadingRe	db 'Error Loading request extension section %s',0Ah,0
					; DATA XREF: _req_main+1508o
aPrivateKey	db 'Private Key',0      ; DATA XREF: _req_main+594o
aRandfile	db 'RANDFILE',0         ; DATA XREF: _req_main+5DEo
					; _req_main:loc_40632Co
aDefault_bits	db 'default_bits',0     ; DATA XREF: _req_main+2B7Bo
		align 4
aPrivateKeyLeng	db 'private key length is too short,',0Ah,0
					; DATA XREF: _req_main:loc_4064A8o
		align 4
aItNeedsToBeAtL	db 'it needs to be at least %d bits, not %ld',0Ah,0
					; DATA XREF: _req_main+2CC0o
		align 4
aGeneratingALdB	db 'Generating a %ld bit %s private key',0Ah,0 ; DATA XREF: _req_main+2D23o
aErrorGeneratin	db 'Error Generating Key',0Ah,0 ; DATA XREF: _req_main:loc_40678Bo
aDefault_keyfil	db 'default_keyfile',0  ; DATA XREF: _req_main:loc_40671Bo
		align 4
aWritingNewPr_0	db 'writing new private key to stdout',0Ah,0 ; DATA XREF: _req_main+2F39o
aEncrypt_rsa_ke	db 'encrypt_rsa_key',0  ; DATA XREF: _req_main:loc_4065EEo
aEncrypt_key	db 'encrypt_key',0      ; DATA XREF: _req_main+2EA8o
asc_459B53	db '-----',0Ah,0        ; DATA XREF: _req_main+176Co
					; _req_main:loc_4066E7o
		align 4
aBadInputFormat	db 'bad input format specified for X509 request',0Ah,0
					; DATA XREF: _req_main+14A4o
aUnableToLoadX5	db 'unable to load X509 request',0Ah,0 ; DATA XREF: _req_main:loc_405EAEo
		align 4
aYouNeedToSpeci	db 'you need to specify a private key',0Ah,0
					; DATA XREF: _req_main:loc_405DB0o
aPrompt		db 'prompt',0           ; DATA XREF: _req_main+668o
aDistinguished_	db 'distinguished_name',0 ; DATA XREF: _req_main:loc_403EAEo
					; _req_main:loc_4062FCo
		align 4
aUnableToFindSI	db 'unable to find ',27h,'%s',27h,' in config',0Ah,0
					; DATA XREF: _req_main+2AF4o
aUnableToGetSSe	db 'unable to get ',27h,'%s',27h,' section',0Ah,0
					; DATA XREF: _req_main+2ABAo
aAttributes	db 'attributes',0       ; DATA XREF: _req_main+6E4o
		align 10h
aErrorNoObjects	db 'error, no objects specified in config file',0Ah,0
					; DATA XREF: _req_main:loc_40560Do
aYouAreAboutToB	db 'You are about to be asked to enter information that will be incor'
					; DATA XREF: _req_main+16EEo
		db 'porated',0Ah,0
		align 4
aIntoYourCertif	db 'into your certificate request.',0Ah,0 ; DATA XREF: _req_main+1703o
aWhatYouAreAbou	db 'What you are about to enter is what is called a Distinguished Nam'
					; DATA XREF: _req_main+1718o
		db 'e or a DN.',0Ah,0
		align 4
aThereAreQuiteA	db 'There are quite a few fields but you can leave some blank',0Ah,0
					; DATA XREF: _req_main+172Do
		align 4
aForSomeFieldsT	db 'For some fields there will be a default value,',0Ah,0
					; DATA XREF: _req_main+1742o
aIfYouEnter_The	db 'If you enter ',27h,'.',27h,', the field will be left blank.',0Ah,0
					; DATA XREF: _req_main+1757o
a_min		db '_min',0             ; DATA XREF: _req_main+17DEo
a_max		db '_max',0             ; DATA XREF: _req_main+17EEo
a_default	db '_default',0         ; DATA XREF: _req_main+17FEo
a_value		db '_value',0           ; DATA XREF: _req_main+180Eo
aS_default	db '%s_default',0       ; DATA XREF: _req_main+188Do
					; _req_main+1E1Bo
aNameSTooLong	db 'Name ',27h,'%s',27h,' too long',0Ah,0 ; DATA XREF: _req_main+1D00o
aS_value	db '%s_value',0         ; DATA XREF: _req_main+18DEo
					; _req_main+1E69o
aS_min		db '%s_min',0           ; DATA XREF: _req_main+1921o
					; _req_main+1EA9o
aS_max		db '%s_max',0           ; DATA XREF: _req_main+1978o
					; _req_main+1EFDo
aSS_1		db '%s [%s]:',0         ; DATA XREF: _req_main+1B01o
					; _req_main+2087o
asc_459E0E	db 0Ah,0		; DATA XREF: _req_main+1A35o
					; _req_main+1CA7o ...
aS_2		db '%s',0Ah,0           ; DATA XREF: _req_main+1A4Do
					; _req_main+1FD4o
aWeirdInput	db 'weird input :-(',0Ah,0 ; DATA XREF: _req_main+1C2Fo
		align 4
aPleaseEnterThe	db 0Ah			; DATA XREF: _req_main:loc_405AD3o
		db 'Please enter the following ',27h,'extra',27h,' attributes',0Ah,0
aToBeSentWithYo	db 'to be sent with your certificate request',0Ah,0
					; DATA XREF: _req_main+22D8o
aErrorAddingAtt	db 'Error adding attribute',0Ah,0 ; DATA XREF: _req_main+2179o
		align 4
aNoTemplatePlea	db 'No template, please set one up.',0Ah,0
					; DATA XREF: _req_main:loc_405AB9o
		align 10h
aProblemsMaking	db 'problems making Certificate Request',0Ah,0
					; DATA XREF: _req_main:loc_405D1Ao
		align 4
aCannotModifiyC	db 'Cannot modifiy certificate subject',0Ah,0 ; DATA XREF: _req_main+2873o
aModifyingReque	db 'Modifying Request',27h,'s Subject',0Ah,0 ; DATA XREF: _req_main+25E6o
aOldSubject	db 'old subject=',0     ; DATA XREF: _req_main+2610o
aErrorCannotMod	db 'ERROR: cannot modify subject',0Ah,0 ; DATA XREF: _req_main:loc_405EA1o
aNewSubject	db 'new subject=',0     ; DATA XREF: _req_main+2666o
aVerifyFailure	db 'verify failure',0Ah,0 ; DATA XREF: _req_main+89Co
aVerifyOk	db 'verify OK',0Ah,0    ; DATA XREF: _req_main:loc_404ECAo
aErrorGettingPu	db 'Error getting public key',0Ah,0 ; DATA XREF: _req_main:loc_405C61o
aSubject	db 'subject=',0         ; DATA XREF: _req_main+9BEo
					; _req_main+23A4o
aModulusUnavail	db 'Modulus=unavailable',0Ah,0 ; DATA XREF: _req_main+24F9o
aModulus	db 'Modulus=',0         ; DATA XREF: _req_main+A0Co
aWrongAlgorithm	db 'Wrong Algorithm type',0 ; DATA XREF: _req_main+A45o
		align 4
aBadOutputForma	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _req_main:loc_404D4Bo
aUnableToWrit_0	db 'unable to write X509 request',0Ah,0 ; DATA XREF: _req_main:loc_405B5Eo
		align 4
aUnableToWriteX	db 'unable to write X509 certificate',0Ah,0 ; DATA XREF: _req_main+159Ao
		align 10h
aWritingNewPriv	db 'writing new private key to ',27h,'%s',27h,0Ah,0
					; DATA XREF: _req_main+2DA1o
aNo		db 'no',0               ; DATA XREF: _req_main+68Do
					; _req_main:loc_406613o
a14sToUseTheSMe	db '-%-14s to use the %s message digest algorithm',0Ah,0
					; DATA XREF: _list_md_fn_0+8Ao
aReadErrorInS	db 'Read Error in %s',0Ah,0 ; DATA XREF: _do_fp+42o
aVerifiedOk	db 'Verified OK',0Ah,0  ; DATA XREF: _do_fp+BDo
aVerificationFa	db 'Verification Failure',0Ah,0 ; DATA XREF: _do_fp+E6o
aErrorVerifying	db 'Error Verifying Data',0Ah,0 ; DATA XREF: _do_fp:loc_406E37o
aErrorSigningDa	db 'Error Signing Data',0Ah,0 ; DATA XREF: _do_fp:loc_406F1Fo
aS_3		db ' *%s',0Ah,0         ; DATA XREF: _do_fp+2C8o
a02x		db '%02x',0             ; DATA XREF: _do_fp+1C9o _do_fp+249o ...
aSSS		db '%s-%s(%s)= ',0      ; DATA XREF: _do_fp+18Fo
aSS_2		db '%s(%s)= ',0         ; DATA XREF: _do_fp+27Eo
aS_4		db '(%s)= ',0           ; DATA XREF: _do_fp+330o
asc_45A119	db 0Ah,0		; DATA XREF: _do_fp:loc_406E20o
asc_45A11B	db ':',0                ; DATA XREF: _do_fp:loc_406E65o
aEtaonrishdlcup	db 'etaonrishdlcupfm',0 ; DATA XREF: _dgst_main:loc_408336o
aStdout		db '(stdout)',0         ; DATA XREF: _dgst_main+FEDo
aDgst_c		db 'dgst.c',0           ; DATA XREF: _dgst_main+2Fo
					; _dgst_main+B96o
aOutOfMemory	db 'out of memory',0Ah,0 ; DATA XREF: _dgst_main:loc_4074E0o
aC_4		db '-c',0               ; DATA XREF: _dgst_main+26Bo
aR_12		db '-r',0               ; DATA XREF: _dgst_main:loc_4071B0o
aRand_0		db '-rand',0            ; DATA XREF: _dgst_main+234o
aOut_1		db '-out',0             ; DATA XREF: _dgst_main:loc_4073D0o
aSign		db '-sign',0            ; DATA XREF: _dgst_main:loc_407400o
aPassin_0	db '-passin',0          ; DATA XREF: _dgst_main+480o
aVerify_0	db '-verify',0          ; DATA XREF: _dgst_main:loc_407490o
aPrverify	db '-prverify',0        ; DATA XREF: _dgst_main+514o
aSignature	db '-signature',0       ; DATA XREF: _dgst_main:loc_407D8Bo
aKeyform_0	db '-keyform',0         ; DATA XREF: _dgst_main:loc_407DF0o
aEngine_1	db '-engine',0          ; DATA XREF: _dgst_main:loc_408048o
aHex		db '-hex',0             ; DATA XREF: _dgst_main:loc_4080F6o
aBinary		db '-binary',0          ; DATA XREF: _dgst_main+117Ao
aD		db '-d',0               ; DATA XREF: _dgst_main+118Eo
aFipsFingerprin	db '-fips-fingerprint',0 ; DATA XREF: _dgst_main+11A2o
; char aNonFipsAllow[]
aNonFipsAllow	db '-non-fips-allow',0  ; DATA XREF: _dgst_main+11BAo
; char aHmac[]
aHmac		db '-hmac',0            ; DATA XREF: _dgst_main+11D6o
; char aMac[]
aMac		db '-mac',0             ; DATA XREF: _dgst_main+13E6o
; char aSigopt_0[]
aSigopt_0	db '-sigopt',0          ; DATA XREF: _dgst_main+1428o
; char aMacopt[]
aMacopt		db '-macopt',0          ; DATA XREF: _dgst_main+147Fo
		align 4
aNoSignatureToV	db 'No signature to verify: use the -signature option',0Ah,0
					; DATA XREF: _dgst_main+4DCo
aUnknownOptio_1	db 'unknown option ',27h,'%s',27h,0Ah,0 ; DATA XREF: _dgst_main+82Fo
aOptionsAre	db 'options are',0Ah,0  ; DATA XREF: _dgst_main+844o
		align 10h
aCToOutputTheDi	db '-c              to output the digest with separating colons',0Ah,0
					; DATA XREF: _dgst_main+859o
		align 10h
aRToOutputTheDi	db '-r              to output the digest in coreutils format',0Ah,0
					; DATA XREF: _dgst_main+86Eo
		align 4
aDToOutputDebug	db '-d              to output debug info',0Ah,0 ; DATA XREF: _dgst_main+883o
		align 4
aHexOutputAsHex	db '-hex            output as hex dump',0Ah,0 ; DATA XREF: _dgst_main+898o
aBinaryOutputIn	db '-binary         output in binary form',0Ah,0
					; DATA XREF: _dgst_main+8ADo
		align 10h
aHmacArgSetTheH	db '-hmac arg       set the HMAC key to arg',0Ah,0
					; DATA XREF: _dgst_main+8C2o
		align 4
aNonFipsAllowAl	db '-non-fips-allow allow use of non FIPS digest',0Ah,0
					; DATA XREF: _dgst_main+8D7o
		align 4
aSignFileSignDi	db '-sign   file    sign digest using private key in file',0Ah,0
					; DATA XREF: _dgst_main+8ECo
		align 4
aVerifyFileVeri	db '-verify file    verify a signature using public key in file',0Ah,0
					; DATA XREF: _dgst_main+901o
		align 4
aPrverifyFileVe	db '-prverify file  verify a signature using private key in file',0Ah,0
					; DATA XREF: _dgst_main+916o
		align 4
aKeyformArgKe_0	db '-keyform arg    key file format (PEM or ENGINE)',0Ah,0
					; DATA XREF: _dgst_main+92Bo
		align 4
aOutFilenameOut	db '-out filename   output to filename rather than stdout',0Ah,0
					; DATA XREF: _dgst_main+940o
		align 10h
aSignatureFileS	db '-signature file signature to verify',0Ah,0 ; DATA XREF: _dgst_main+955o
		align 4
aSigoptNmVSigna	db '-sigopt nm:v    signature parameter',0Ah,0 ; DATA XREF: _dgst_main+96Ao
		align 10h
aHmacKeyCreateH	db '-hmac key       create hashed MAC with key',0Ah,0
					; DATA XREF: _dgst_main+97Fo
aMacAlgorithmCr	db '-mac algorithm  create MAC (not neccessarily HMAC)',0Ah,0
					; DATA XREF: _dgst_main+994o
aMacoptNmVMacAl	db '-macopt nm:v    MAC algorithm parameters or key',0Ah,0
					; DATA XREF: _dgst_main+9A9o
		align 4
aEngineEUseEn_1	db '-engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _dgst_main+9BEo
aErrorGetting_0	db 'Error getting password',0Ah,0 ; DATA XREF: _dgst_main:loc_4075AFo
aWb_1		db 'wb',0               ; DATA XREF: _dgst_main+378o
aW_2		db 'w',0                ; DATA XREF: _dgst_main:loc_407570o
aErrorOpeningOu	db 'Error opening output file %s',0Ah,0 ; DATA XREF: _dgst_main+FF6o
		align 4
aMacAndSigningK	db 'MAC and Signing key cannot both be specified',0Ah,0
					; DATA XREF: _dgst_main+3DEo
aKeyFile	db 'key file',0         ; DATA XREF: _dgst_main+659o
aMacParameterEr	db 'MAC parameter error "%s"',0Ah,0 ; DATA XREF: _dgst_main+107Do
aErrorGenerat_0	db 'Error generating key',0Ah,0 ; DATA XREF: _dgst_main+12D8o
aErrorGettingCo	db 'Error getting context',0Ah,0 ; DATA XREF: _dgst_main:loc_407D5Do
aErrorSettingCo	db 'Error setting context',0Ah,0 ; DATA XREF: _dgst_main:loc_4080DCo
aParameterErr_0	db 'parameter error "%s"',0Ah,0 ; DATA XREF: _dgst_main+1116o
aErrorSettingDi	db 'Error setting digest %s',0Ah,0 ; DATA XREF: _dgst_main+F93o
aRb_2		db 'rb',0               ; DATA XREF: _dgst_main+B6Do
		align 4
aErrorOpeningSi	db 'Error opening signature file %s',0Ah,0 ; DATA XREF: _dgst_main+1370o
aOutOfMemory_0	db 'Out of memory',0Ah,0 ; DATA XREF: _dgst_main:loc_408238o
aErrorReadingSi	db 'Error reading signature file %s',0Ah,0 ; DATA XREF: _dgst_main+133Co
aStdin_0	db 'stdin',0            ; DATA XREF: _dgst_main+1239o
		align 4
aInform_1	db '-inform',0          ; DATA XREF: _dh_main+1E9o
aOutform_0	db '-outform',0         ; DATA XREF: _dh_main+1F7o
aIn_1		db '-in',0              ; DATA XREF: _dh_main:loc_4086D0o
aOut_2		db '-out',0             ; DATA XREF: _dh_main:loc_408700o
aEngine_2	db '-engine',0          ; DATA XREF: _dh_main:loc_408730o
aCheck		db '-check',0           ; DATA XREF: _dh_main+2A4o
aText_0		db '-text',0            ; DATA XREF: _dh_main+2B8o
aC		db '-C',0               ; DATA XREF: _dh_main+2CCo
aNoout_1	db '-noout',0           ; DATA XREF: _dh_main+2E0o
aUnknownOptio_2	db 'unknown option %s',0Ah,0 ; DATA XREF: _dh_main+2F8o
aSOptionsInfi_1	db '%s [options] <infile >outfile',0Ah,0 ; DATA XREF: _dh_main+318o
aWhereOptions_1	db 'where options are',0Ah,0 ; DATA XREF: _dh_main+32Do
		align 4
aInformArgInp_1	db ' -inform arg   input format - one of DER PEM',0Ah,0
					; DATA XREF: _dh_main+342o
		align 4
aOutformArgOu_0	db ' -outform arg  output format - one of DER PEM',0Ah,0
					; DATA XREF: _dh_main+357o
aInArgInputFi_1	db ' -in arg       input file',0Ah,0 ; DATA XREF: _dh_main+36Co
aOutArgOutput_1	db ' -out arg      output file',0Ah,0 ; DATA XREF: _dh_main+381o
		align 4
aCheckCheckTheD	db ' -check        check the DH parameters',0Ah,0 ; DATA XREF: _dh_main+396o
aTextPrintAText	db ' -text         print a text form of the DH parameters',0Ah,0
					; DATA XREF: _dh_main+3ABo
aCOutputCCode	db ' -C            Output C code',0Ah,0 ; DATA XREF: _dh_main+3C0o
aNooutNoOutput	db ' -noout        no output',0Ah,0 ; DATA XREF: _dh_main+3D5o
		align 4
aEngineEUseEn_2	db ' -engine e     use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _dh_main+3EAo
aBadInputForm_0	db 'bad input format specified',0Ah,0 ; DATA XREF: _dh_main+16Eo
aUnableToLoadDh	db 'unable to load DH parameters',0Ah,0 ; DATA XREF: _dh_main:loc_408B56o
; char aPValueIsNotPri[]
aPValueIsNotPri	db 'p value is not prime',0 ; DATA XREF: _dh_main+651o
; char aPValueIsNotASa[]
aPValueIsNotASa	db 'p value is not a safe prime',0 ; DATA XREF: _dh_main+665o
		align 4
; char aUnableToCheckT[]
aUnableToCheckT	db 'unable to check the generator value',0 ; DATA XREF: _dh_main+679o
; char aTheGValueIsNot[]
aTheGValueIsNot	db 'the g value is not a generator',0 ; DATA XREF: _dh_main+68Do
		align 4
; char aDhParametersAp[]
aDhParametersAp	db 'DH parameters appear to be ok.',0 ; DATA XREF: _dh_main+6A5o
aDh_c		db 'dh.c',0             ; DATA XREF: _dh_main+706o
; char aOpenssl_malloc[]
aOpenssl_malloc	db 'OPENSSL_malloc',0   ; DATA XREF: _dh_main:loc_408DA0o
		align 4
; char aStaticUnsign_0[]
aStaticUnsign_0	db 'static unsigned char dh%d_p[]={',0 ; DATA XREF: _dh_main+748o
; char asc_45AA1C[]
asc_45AA1C	db 0Ah			; DATA XREF: _dh_main:loc_408C67o
		db 9,'};',0
		align 4
; char aStaticUnsign_1[]
aStaticUnsign_1	db 'static unsigned char dh%d_g[]={',0 ; DATA XREF: _dh_main+7EEo
; char asc_45AA44[]
asc_45AA44	db 0Ah			; DATA XREF: _dh_main+7B5o
					; _dh_main+855o
		db 9,0
; char a0x02x_1[]
a0x02x_1	db '0x%02X,',0          ; DATA XREF: _dh_main+77Ao
					; _dh_main+81Ao
; char asc_45AA4F[]
asc_45AA4F	db 0Ah			; DATA XREF: _dh_main:loc_408D07o
		db 9,'};',0Ah,0
; char aDhGet_dhD[]
aDhGet_dhD	db 'DH *get_dh%d()',0Ah ; DATA XREF: _dh_main+87Bo
		db 9,'{',0Ah,0
; char aDhDh[]
aDhDh		db 9,'DH *dh;',0Ah,0    ; DATA XREF: _dh_main+887o
		align 4
; char aIfDhDh_newNull[]
aIfDhDh_newNull	db 9,'if ((dh=DH_new()) == NULL) return(NULL);',0 ; DATA XREF: _dh_main+893o
		align 10h
; char aDhPBn_bin2bnDh[]
aDhPBn_bin2bnDh	db 9,'dh->p=BN_bin2bn(dh%d_p,sizeof(dh%d_p),NULL);',0Ah,0
					; DATA XREF: _dh_main+8ABo
		align 10h
; char aDhGBn_bin2bnDh[]
aDhGBn_bin2bnDh	db 9,'dh->g=BN_bin2bn(dh%d_g,sizeof(dh%d_g),NULL);',0Ah,0
					; DATA XREF: _dh_main+8C3o
		align 10h
; char aIfDhPNullDhGNu[]
aIfDhPNullDhGNu	db 9,'if ((dh->p == NULL) || (dh->g == NULL))',0 ; DATA XREF: _dh_main+8CFo
; char aReturnNull[]
aReturnNull	db 9,9,'return(NULL);',0 ; DATA XREF: _dh_main+8DBo
; char aReturnDh[]
aReturnDh	db 9,'return(dh);',0Ah  ; DATA XREF: _dh_main+8E7o
		db 9,'}',0
		align 4
aBadOutputFor_0	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _dh_main+595o
		align 4
aUnableToWriteD	db 'unable to write DH parameters',0Ah,0 ; DATA XREF: _dh_main+92Do
		align 4
aInform_2	db '-inform',0          ; DATA XREF: _dhparam_main+239o
aOutform_1	db '-outform',0         ; DATA XREF: _dhparam_main+247o
aIn_2		db '-in',0              ; DATA XREF: _dhparam_main:loc_409120o
aOut_3		db '-out',0             ; DATA XREF: _dhparam_main:loc_409150o
aEngine_3	db '-engine',0          ; DATA XREF: _dhparam_main:loc_409180o
aCheck_0	db '-check',0           ; DATA XREF: _dhparam_main:loc_4091D0o
aText_1		db '-text',0            ; DATA XREF: _dhparam_main+344o
aDsaparam	db '-dsaparam',0        ; DATA XREF: _dhparam_main+358o
aC_0		db '-C',0               ; DATA XREF: _dhparam_main+36Co
aNoout_2	db '-noout',0           ; DATA XREF: _dhparam_main+380o
a2		db '-2',0               ; DATA XREF: _dhparam_main+394o
a5		db '-5',0               ; DATA XREF: _dhparam_main+3A8o
aRand_1		db '-rand',0            ; DATA XREF: _dhparam_main+3BCo
; char aD_0[]
aD_0		db '%d',0               ; DATA XREF: _dhparam_main+D92o
aSOptionsNumbit	db '%s [options] [numbits]',0Ah,0 ; DATA XREF: _dhparam_main+3F8o
aWhereOptions_2	db 'where options are',0Ah,0 ; DATA XREF: _dhparam_main+40Do
		align 4
aInformArgInp_2	db ' -inform arg   input format - one of DER PEM',0Ah,0
					; DATA XREF: _dhparam_main+422o
		align 4
aOutformArgOu_1	db ' -outform arg  output format - one of DER PEM',0Ah,0
					; DATA XREF: _dhparam_main+437o
aInArgInputFi_2	db ' -in arg       input file',0Ah,0 ; DATA XREF: _dhparam_main+44Co
aOutArgOutput_2	db ' -out arg      output file',0Ah,0 ; DATA XREF: _dhparam_main+461o
		align 10h
aDsaparamReadOr	db ' -dsaparam     read or generate DSA parameters, convert to DH',0Ah,0
					; DATA XREF: _dhparam_main+476o
		align 10h
aCheckCheckTh_0	db ' -check        check the DH parameters',0Ah,0
					; DATA XREF: _dhparam_main+48Bo
aTextPrintATe_0	db ' -text         print a text form of the DH parameters',0Ah,0
					; DATA XREF: _dhparam_main+4A0o
aCOutputCCode_0	db ' -C            Output C code',0Ah,0 ; DATA XREF: _dhparam_main+4B5o
		align 10h
a2GenerateParam	db ' -2            generate parameters using  2 as the generator valu'
					; DATA XREF: _dhparam_main+4CAo
		db 'e',0Ah,0
a5GenerateParam	db ' -5            generate parameters using  5 as the generator valu'
					; DATA XREF: _dhparam_main+4DFo
		db 'e',0Ah,0
aNumbitsNumberO	db ' numbits       number of bits in to generate (default 2048)',0Ah,0
					; DATA XREF: _dhparam_main+4F4o
		align 4
aEngineEUseEn_3	db ' -engine e     use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _dhparam_main+509o
aRandFileCfil_0	db ' -rand file%cfile%c...',0Ah,0 ; DATA XREF: _dhparam_main+52Eo
		align 4
aLoadTheFileO_0	db '               - load the file (or the files in the directory) in'
					; DATA XREF: _dhparam_main+543o
		db 'to',0Ah,0
		align 4
aTheRandomNum_0	db '               the random number generator',0Ah,0
					; DATA XREF: _dhparam_main+558o
aNooutNoOutpu_0	db ' -noout        no output',0Ah,0 ; DATA XREF: _dhparam_main+56Do
		align 4
aGeneratorMayNo	db 'generator may not be chosen for DSA parameters',0Ah,0
					; DATA XREF: _dhparam_main:loc_409747o
aWarningNotMuch	db 'warning, not much extra random data, consider using the -rand opt'
					; DATA XREF: _dhparam_main:loc_409B9Fo
		db 'ion',0Ah,0
aLdSemiRandomBy	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _dhparam_main+15Fo
aGeneratingDsaP	db 'Generating DSA parameters, %d bit long prime',0Ah,0
					; DATA XREF: _dhparam_main+18Fo
		align 10h
aGeneratingDhPa	db 'Generating DH parameters, %d bit long safe prime, generator %d',0Ah,0
					; DATA XREF: _dhparam_main+620o
aThisIsGoingToT	db 'This is going to take a long time',0Ah,0 ; DATA XREF: _dhparam_main+635o
aBadInputForm_1	db 'bad input format specified',0Ah,0 ; DATA XREF: _dhparam_main:loc_409763o
		align 10h
aUnableToLoadDs	db 'unable to load DSA parameters',0Ah,0
					; DATA XREF: _dhparam_main:loc_409B75o
aUnableToLoad_0	db 'unable to load DH parameters',0Ah,0 ; DATA XREF: _dhparam_main+904o
; char aPValueIsNotP_0[]
aPValueIsNotP_0	db 'p value is not prime',0 ; DATA XREF: _dhparam_main:loc_409C00o
; char aPValueIsNotA_0[]
aPValueIsNotA_0	db 'p value is not a safe prime',0 ; DATA XREF: _dhparam_main:loc_409BEBo
		align 10h
; char aUnableToChec_0[]
aUnableToChec_0	db 'unable to check the generator value',0
					; DATA XREF: _dhparam_main:loc_409BD6o
; char aTheGValueIsN_0[]
aTheGValueIsN_0	db 'the g value is not a generator',0 ; DATA XREF: _dhparam_main:loc_409BC1o
		align 4
; char aDhParameters_0[]
aDhParameters_0	db 'DH parameters appear to be ok.',0 ; DATA XREF: _dhparam_main+962o
aDhparam_c	db 'dhparam.c',0        ; DATA XREF: _dhparam_main+9A8o
; char aOpenssl_mall_0[]
aOpenssl_mall_0	db 'OPENSSL_malloc',0   ; DATA XREF: _dhparam_main:loc_409C15o
; char aIfndefHeader_d[]
aIfndefHeader_d	db '#ifndef HEADER_DH_H',0Ah ; DATA XREF: _dhparam_main+9D0o
		db '#include <openssl/dh.h>',0Ah
		db '#endif',0
; char aDhGet_dhD_0[]
aDhGet_dhD_0	db 'DH *get_dh%d()',0Ah ; DATA XREF: _dhparam_main+9E4o
		db 9,'{',0Ah,0
		align 4
; char aStaticUnsign_2[]
aStaticUnsign_2	db 9,'static unsigned char dh%d_p[]={',0 ; DATA XREF: _dhparam_main+A0Bo
; char asc_45B1B5[]
asc_45B1B5	db 0Ah			; DATA XREF: _dhparam_main:loc_409939o
					; _dhparam_main:loc_4099E9o
		db 9,9,'};',0
		align 4
; char aStaticUnsign_3[]
aStaticUnsign_3	db 9,'static unsigned char dh%d_g[]={',0 ; DATA XREF: _dhparam_main+AC0o
; char asc_45B1DD[]
asc_45B1DD	db 0Ah			; DATA XREF: _dhparam_main+A83o
					; _dhparam_main+B33o
		db 9,9,0
; char a0x02x_2[]
a0x02x_2	db '0x%02X,',0          ; DATA XREF: _dhparam_main+A4Ao
					; _dhparam_main+AFAo
; char aDhDh_0[]
aDhDh_0		db 9,'DH *dh;',0Ah,0    ; DATA XREF: _dhparam_main+B55o
		align 4
; char aIfDhDh_newNu_0[]
aIfDhDh_newNu_0	db 9,'if ((dh=DH_new()) == NULL) return(NULL);',0
					; DATA XREF: _dhparam_main+B61o
		align 10h
; char aDhPBn_bin2bn_0[]
aDhPBn_bin2bn_0	db 9,'dh->p=BN_bin2bn(dh%d_p,sizeof(dh%d_p),NULL);',0Ah,0
					; DATA XREF: _dhparam_main+B79o
		align 10h
; char aDhGBn_bin2bn_0[]
aDhGBn_bin2bn_0	db 9,'dh->g=BN_bin2bn(dh%d_g,sizeof(dh%d_g),NULL);',0Ah,0
					; DATA XREF: _dhparam_main+B91o
		align 10h
; char aIfDhPNullDhG_0[]
aIfDhPNullDhG_0	db 9,'if ((dh->p == NULL) || (dh->g == NULL))',0
					; DATA XREF: _dhparam_main+B9Do
		align 4
; char aDh_freeDhRetur[]
aDh_freeDhRetur	db 9,9,'{ DH_free(dh); return(NULL); }',0 ; DATA XREF: _dhparam_main+BA9o
; char aDhLengthLd[]
aDhLengthLd	db 9,'dh->length = %ld;',0Ah,0 ; DATA XREF: _dhparam_main+CB5o
; char aReturnDh_0[]
aReturnDh_0	db 9,'return(dh);',0Ah  ; DATA XREF: _dhparam_main:loc_409A60o
		db 9,'}',0
		align 4
aBadOutputFor_1	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _dhparam_main+722o
		align 10h
aUnableToWrit_1	db 'unable to write DH parameters',0Ah,0 ; DATA XREF: _dhparam_main+BF1o
		align 10h
a25s		db '-%-25s',0           ; DATA XREF: _show_ciphers+34o
asc_45B347	db 0Ah,0		; DATA XREF: _show_ciphers:loc_409D30o
					; _enc_main+6EAo
asc_45B349	db ' ',0                ; DATA XREF: _show_ciphers+54o
aHexStringIsToo	db 'hex string is too long',0Ah,0 ; DATA XREF: _set_hex:loc_409EA0o
aNonHexDigit	db 'non-hex digit',0Ah,0 ; DATA XREF: _set_hex:loc_409EBFo
aBase64		db 'base64',0           ; DATA XREF: _enc_main+A4o
aEnc		db 'enc',0              ; DATA XREF: _enc_main:loc_40A9D6o
aSIsAnUnknownCi	db '%s is an unknown cipher',0Ah,0 ; DATA XREF: _enc_main+AEEo
aE		db '-e',0               ; DATA XREF: _enc_main+1B1o
					; _enc_main+53Fo
aIn_26		db '-in',0              ; DATA XREF: _enc_main:loc_40A080o
aOut_4		db '-out',0             ; DATA XREF: _enc_main:loc_40A1D0o
aPass		db '-pass',0            ; DATA XREF: _enc_main:loc_40A200o
aEngine_4	db '-engine',0          ; DATA XREF: _enc_main:loc_40A230o
aD_1		db '-d',0               ; DATA XREF: _enc_main:loc_40A260o
					; _enc_main+55Co
aP		db '-p',0               ; DATA XREF: _enc_main+374o
aV		db '-v',0               ; DATA XREF: _enc_main+388o
aNopad		db '-nopad',0           ; DATA XREF: _enc_main+39Co
					; _enc_main+67Eo
aSalt		db '-salt',0            ; DATA XREF: _enc_main+3B0o
aNosalt		db '-nosalt',0          ; DATA XREF: _enc_main+3C4o
aDebug		db '-debug',0           ; DATA XREF: _enc_main+3D8o
aP_0		db '-P',0               ; DATA XREF: _enc_main+3ECo
aA		db '-A',0               ; DATA XREF: _enc_main+400o
aA_0		db '-a',0               ; DATA XREF: _enc_main+414o
; char aBase64_0[]
aBase64_0	db '-base64',0          ; DATA XREF: _enc_main+42Co
; char aBufsize[]
aBufsize	db '-bufsize',0         ; DATA XREF: _enc_main+448o
; char aK[]
aK		db '-k',0               ; DATA XREF: _enc_main+596o
					; _enc_main+159Bo
; char aKfile[]
aKfile		db '-kfile',0           ; DATA XREF: _enc_main+5B3o
					; _enc_main+1606o
; char aR[]
aR		db 'r',0                ; DATA XREF: _enc_main+1633o
aUnableToReadKe	db 'unable to read key from ',27h,'%s',27h,0Ah,0
					; DATA XREF: _enc_main+173Bo
aZeroLengthPass	db 'zero length password',0Ah,0 ; DATA XREF: _enc_main:loc_40A3BEo
; char aK_0[]
aK_0		db '-K',0               ; DATA XREF: _enc_main+16D7o
; char aS_5[]
aS_5		db '-S',0               ; DATA XREF: _enc_main+60Ao
					; _enc_main+1709o
; char aIv_0[]
aIv_0		db '-iv',0              ; DATA XREF: _enc_main+1759o
; char aMd[]
aMd		db '-md',0              ; DATA XREF: _enc_main+5D0o
					; _enc_main+178Bo
; char aNonFipsAllow_0[]
aNonFipsAllow_0	db '-non-fips-allow',0  ; DATA XREF: _enc_main+17BDo
; char aNone_1[]
aNone_1		db '-none',0            ; DATA XREF: _enc_main+17E1o
aUnknownOptio_3	db 'unknown option ',27h,'%s',27h,0Ah,0 ; DATA XREF: _enc_main+1817o
aOptionsAre_0	db 'options are',0Ah,0  ; DATA XREF: _enc_main:loc_40A3D3o
aInFile		db '-in <file>',0       ; DATA XREF: _enc_main+4E8o
a14sInputFile	db '%-14s input file',0Ah,0 ; DATA XREF: _enc_main+4F0o
aOutFile	db '-out <file>',0      ; DATA XREF: _enc_main+505o
a14sOutputFile	db '%-14s output file',0Ah,0 ; DATA XREF: _enc_main+50Do
aPassArg	db '-pass <arg>',0      ; DATA XREF: _enc_main+522o
a14sPassPhraseS	db '%-14s pass phrase source',0Ah,0 ; DATA XREF: _enc_main+52Ao
a14sEncrypt	db '%-14s encrypt',0Ah,0 ; DATA XREF: _enc_main+547o
a14sDecrypt	db '%-14s decrypt',0Ah,0 ; DATA XREF: _enc_main+564o
aABase64	db '-a/-base64',0       ; DATA XREF: _enc_main+579o
a14sBase64Encod	db '%-14s base64 encode/decode, depending on encryption flag',0Ah,0
					; DATA XREF: _enc_main+581o
		align 4
a14sPassphraseI	db '%-14s passphrase is the next argument',0Ah,0 ; DATA XREF: _enc_main+59Eo
		align 4
a14sPassphras_0	db '%-14s passphrase is the first line of the file argument',0Ah,0
					; DATA XREF: _enc_main+5BBo
		align 10h
a14sTheNextArgu	db '%-14s the next argument is the md to use to create a key',0Ah,0
					; DATA XREF: _enc_main+5D8o
word_45B5DA	dw 0			; DATA XREF: _enc_main+5EDo
a14sFromAPassph	db '%-14s   from a passphrase.  One of md2, md5, sha or sha1',0Ah,0
					; DATA XREF: _enc_main+5F5o
		align 4
a14sSaltInHexIs	db '%-14s salt in hex is the next argument',0Ah,0
					; DATA XREF: _enc_main+612o
aKIv		db '-K/-iv',0           ; DATA XREF: _enc_main+627o
		align 4
a14sKeyIvInHexI	db '%-14s key/iv in hex is the next argument',0Ah,0
					; DATA XREF: _enc_main+62Fo
aPp		db '-[pP]',0            ; DATA XREF: _enc_main+644o
a14sPrintTheIvK	db '%-14s print the iv/key (then exit if -P)',0Ah,0
					; DATA XREF: _enc_main+64Co
aBufsizeN	db '-bufsize <n>',0     ; DATA XREF: _enc_main+661o
a14sBufferSize	db '%-14s buffer size',0Ah,0 ; DATA XREF: _enc_main+669o
		align 4
a14sDisableStan	db '%-14s disable standard block padding',0Ah,0 ; DATA XREF: _enc_main+686o
aEngineE_0	db '-engine e',0        ; DATA XREF: _enc_main+69Bo
a14sUseEngineEP	db '%-14s use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _enc_main+6A3o
aCipherTypes	db 'Cipher Types',0Ah,0 ; DATA XREF: _enc_main+6B8o
		align 4
aAeadCiphersNot	db 'AEAD ciphers not supported by the enc utility',0Ah,0
					; DATA XREF: _enc_main:loc_40A944o
		align 4
aCiphersInXtsMo	db 'Ciphers in XTS mode are not supported by the enc utility',0Ah,0
					; DATA XREF: _enc_main:loc_40AABBo
		align 10h
aSIsAnUnsupport	db '%s is an unsupported message digest type',0Ah,0
					; DATA XREF: _enc_main+1198o
aInvalidBufsize	db 'invalid ',27h,'bufsize',27h,' specified.',0Ah,0
					; DATA XREF: _enc_main+293o
aBufsizeD	db 'bufsize=%d',0Ah,0   ; DATA XREF: _enc_main+AAAo
aEnc_c		db 'enc.c',0            ; DATA XREF: _enc_main+75Do
					; _enc_main+77Fo
aOpenssl_mall_1	db 'OPENSSL_malloc failure %ld',0Ah,0 ; DATA XREF: _enc_main+A62o
					; _enc_main+1217o
aErrorGetting_1	db 'Error getting password',0Ah,0 ; DATA XREF: _enc_main:loc_40B39Do
aDecryption	db 'decryption',0       ; DATA XREF: _enc_main+10C3o
aEnterSSPasswor	db 'enter %s %s password:',0 ; DATA XREF: _enc_main+10CFo
					; _enc_main+1146o
aEncryption	db 'encryption',0       ; DATA XREF: _enc_main+113Ao
aBadPasswordRea	db 'bad password read',0Ah,0 ; DATA XREF: _enc_main:loc_40B4F5o
aInvalidHexSalt	db 'invalid hex salt value',0Ah,0 ; DATA XREF: _enc_main:loc_40B2A7o
aErrorWriting_0	db 'error writing output file',0Ah,0 ; DATA XREF: _enc_main:loc_40A80Ao
					; _enc_main+1321o
aErrorReadingIn	db 'error reading input file',0Ah,0 ; DATA XREF: _enc_main:loc_40B1A2o
aBadMagicNumber	db 'bad magic number',0Ah,0 ; DATA XREF: _enc_main+144Bo
aWarningIvNotUs	db 'warning: iv not use by this cipher',0Ah,0 ; DATA XREF: _enc_main+C7Do
aInvalidHexIvVa	db 'invalid hex iv value',0Ah,0 ; DATA XREF: _enc_main+12D6o
aIvUndefined	db 'iv undefined',0Ah,0 ; DATA XREF: _enc_main+15E8o
aInvalidHexKeyV	db 'invalid hex key value',0Ah,0 ; DATA XREF: _enc_main:loc_40B29Ao
aErrorSettingCi	db 'Error setting cipher %s',0Ah,0 ; DATA XREF: _enc_main+1365o
; char aSalt_0[]
aSalt_0		db 'salt=',0            ; DATA XREF: _enc_main:loc_40B3B7o
; char a02x_0[]
a02x_0		db '%02X',0             ; DATA XREF: _enc_main+E28o
					; _enc_main+E81o ...
; char aKey_0[]
aKey_0		db 'key=',0             ; DATA XREF: _enc_main+DF4o
; char aIv[]
aIv		db 'iv =',0             ; DATA XREF: _enc_main+E5Bo
aBadDecrypt	db 'bad decrypt',0Ah,0  ; DATA XREF: _enc_main:loc_40B3FCo
aBytesRead8ld	db 'bytes read   :%8ld',0Ah,0 ; DATA XREF: _enc_main+F65o
aBytesWritten8l	db 'bytes written:%8ld',0Ah,0 ; DATA XREF: _enc_main+F8Ao
_magic_36602	db 'Salted__',0         ; DATA XREF: _enc_main+8EDo
					; _enc_main+142Co
		align 10h
byte_45B9A0	db 2 dup(0)		; DATA XREF: _do_passwd:loc_40BBB0o
a1		db '1',0                ; DATA XREF: _do_passwd+48Co
; char aApr1[]
aApr1		db 'apr1',0             ; DATA XREF: _do_passwd+1D1o
aPasswd_c	db 'passwd.c',0         ; DATA XREF: _do_passwd+19Ao
					; _do_passwd+6A4o ...
aSalt_pNull	db 'salt_p != NULL',0   ; DATA XREF: _do_passwd+AFAo
aSalt_malloc_pN	db 'salt_malloc_p != NULL',0 ; DATA XREF: _do_passwd+B2Bo
aSalt_pNull_0	db '*salt_p != NULL',0  ; DATA XREF: _do_passwd+B5Do
		align 4
aWarningTruncat	db 'Warning: truncating password to %u characters',0Ah,0
					; DATA XREF: _do_passwd+AB8o
aStrlenPasswdPw	db 'strlen(passwd) <= pw_maxlen',0 ; DATA XREF: _do_passwd+1A2o
aStrlenOut_buf6	db 'strlen(out_buf) <= 6 + 8',0 ; DATA XREF: _do_passwd+A46o
aSalt_len8	db 'salt_len <= 8',0    ; DATA XREF: _do_passwd+A67o
asc_45BA5A	db '$',0                ; DATA XREF: _do_passwd+30Co
					; _do_passwd+33Co
aOutputOut_bufS	db 'output == out_buf + strlen(out_buf)',0 ; DATA XREF: _do_passwd+6ACo
aStrlenOut_bufS	db 'strlen(out_buf) < sizeof(out_buf)',0 ; DATA XREF: _do_passwd+929o
aHashNull	db 'hash != NULL',0     ; DATA XREF: _do_passwd+9F1o
aSS		db '%s',9,'%s',0Ah,0    ; DATA XREF: _do_passwd+96Fo
aS		db '%s',0Ah,0           ; DATA XREF: _do_passwd+997o
aCrypt		db '-crypt',0           ; DATA XREF: _passwd_main+172o
a1_0		db '-1',0               ; DATA XREF: _passwd_main+190o
aApr1_0		db '-apr1',0            ; DATA XREF: _passwd_main+1B0o
aSalt_1		db '-salt',0            ; DATA XREF: _passwd_main+1D0o
aIn_3		db '-in',0              ; DATA XREF: _passwd_main:loc_40C6A0o
aStdin_1	db '-stdin',0           ; DATA XREF: _passwd_main:loc_40C770o
aNoverify	db '-noverify',0        ; DATA XREF: _passwd_main+484o
aQuiet		db '-quiet',0           ; DATA XREF: _passwd_main+498o
aTable		db '-table',0           ; DATA XREF: _passwd_main+4ACo
aReverse	db '-reverse',0         ; DATA XREF: _passwd_main+4C0o
aUsagePasswdOpt	db 'Usage: passwd [options] [passwords]',0Ah,0
					; DATA XREF: _passwd_main:loc_40C537o
aWhereOptions_3	db 'where options are',0Ah,0 ; DATA XREF: _passwd_main+24Co
aCryptStandardU	db '-crypt             standard Unix password algorithm (default)',0Ah,0
					; DATA XREF: _passwd_main+261o
		align 4
a1Md5BasedPassw	db '-1                 MD5-based password algorithm',0Ah,0
					; DATA XREF: _passwd_main+276o
		align 4
aApr1Md5BasedPa	db '-apr1              MD5-based password algorithm, Apache variant',0Ah
					; DATA XREF: _passwd_main+28Bo
		db 0
		align 4
aSaltStringUseP	db '-salt string       use provided salt',0Ah,0
					; DATA XREF: _passwd_main+2A0o
		align 4
aInFileReadPass	db '-in file           read passwords from file',0Ah,0
					; DATA XREF: _passwd_main+2B5o
		align 4
aStdinReadPassw	db '-stdin             read passwords from stdin',0Ah,0
					; DATA XREF: _passwd_main+2CAo
		align 4
aNoverifyNeverV	db '-noverify          never verify when reading password from termin'
					; DATA XREF: _passwd_main+2DFo
		db 'al',0Ah,0
		align 4
aQuietNoWarning	db '-quiet             no warnings',0Ah,0 ; DATA XREF: _passwd_main+2F4o
aTableFormatOut	db '-table             format output as table',0Ah,0
					; DATA XREF: _passwd_main+309o
		align 4
aReverseSwitchT	db '-reverse           switch table columns',0Ah,0
					; DATA XREF: _passwd_main+31Eo
aIn_stdin0	db 'in_stdin == 0',0    ; DATA XREF: _passwd_main+730o
aPassword	db 'Password: ',0       ; DATA XREF: _passwd_main+94Co
aPasswdsNull	db '*passwds != NULL',0 ; DATA XREF: _passwd_main+A34o
aPasswdNull	db 'passwd != NULL',0   ; DATA XREF: _passwd_main+5E9o
		align 20h
_cov_2char	db 2Eh			; DATA XREF: _do_passwd+69r
					; _do_passwd+79r ...
		db 2Fh,	30h, 31h
		dd 35343332h, 39383736h, 44434241h, 48474645h, 4C4B4A49h
		dd 504F4E4Dh, 54535251h, 58575655h, 62615A59h, 66656463h
		dd 6A696867h, 6E6D6C6Bh, 7271706Fh, 76757473h, 7A797877h
aOut_5		db '-out',0             ; DATA XREF: _gendh_main+211o
		align 4
aUsageGendhArgs	db 'usage: gendh [args] [numbits]',0Ah,0
					; DATA XREF: _gendh_main:loc_40D0C0o
		align 4
aOutFileOutputT	db ' -out file - output the key to ',27h,'file',0Ah,0
					; DATA XREF: _gendh_main+2E5o
		align 10h
a2Use2AsTheGene	db ' -2        - use 2 as the generator value',0Ah,0
					; DATA XREF: _gendh_main+2FAo
		align 4
a5Use5AsTheGene	db ' -5        - use 5 as the generator value',0Ah,0
					; DATA XREF: _gendh_main+30Fo
		align 4
aEngineEUseEn_4	db ' -engine e - use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _gendh_main+324o
aRandFileCfil_1	db ' -rand file%cfile%c...',0Ah,0 ; DATA XREF: _gendh_main+349o
aLoadTheFileO_1	db '           - load the file (or the files in the directory) into',0Ah
					; DATA XREF: _gendh_main+35Eo
		db 0
		align 4
aTheRandomNum_1	db '             the random number generator',0Ah,0
					; DATA XREF: _gendh_main+373o
a2_0		db '-2',0               ; DATA XREF: _gendh_main+21Fo
a5_0		db '-5',0               ; DATA XREF: _gendh_main+22Fo
aEngine_5	db '-engine',0          ; DATA XREF: _gendh_main+23Fo
aRand_2		db '-rand',0            ; DATA XREF: _gendh_main:loc_40D070o
		align 4
aWarningNotMu_0	db 'warning, not much extra random data, consider using the -rand opt'
					; DATA XREF: _gendh_main:loc_40D26Bo
		db 'ion',0Ah,0
aLdSemiRandom_0	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _gendh_main+129o
aGeneratingDh_0	db 'Generating DH parameters, %d bit long safe prime, generator %d',0Ah,0
					; DATA XREF: _gendh_main+14Eo
aThisIsGoingT_0	db 'This is going to take a long time',0Ah,0 ; DATA XREF: _gendh_main+163o
; char aD_2[]
aD_2		db '%d',0               ; DATA XREF: _gendh_main+2AAo
		align 4
aStats		db '-stats',0           ; DATA XREF: _errstr_main+34o
; char aLx[]
aLx		db '%lx',0              ; DATA XREF: _errstr_main+91o
; char aSBadErrorCode[]
aSBadErrorCode	db '%s: bad error code',0Ah,0 ; DATA XREF: _errstr_main+ACo
		align 4
; char aUsageErrstrSta[]
aUsageErrstrSta	db 'usage: errstr [-stats] <errno> ...',0 ; DATA XREF: _errstr_main+B8o
		align 20h
; char aCakeytime[]
aCakeytime	db 'CAkeyTime',0        ; DATA XREF: _make_revocation_str+B2o
					; .rdata:0045D768o
aHoldinstructio	db 'holdInstruction',0  ; DATA XREF: _make_revocation_str+E6o
					; .rdata:0045D760o
aKeytime	db 'keyTime',0          ; DATA XREF: _make_revocation_str:loc_40D670o
					; .rdata:0045D764o
aUnknownCrlReas	db 'Unknown CRL reason %s',0Ah,0 ; DATA XREF: _make_revocation_str+5Ao
aInvalidObjectI	db 'Invalid object identifier %s',0Ah,0
					; DATA XREF: _make_revocation_str+23Do
		align 4
aInvalidTimeFor	db 'Invalid time format %s. Need YYYYMMDDHHMMSSZ',0Ah,0
					; DATA XREF: _make_revocation_str+21Co
aCa_c		db 'ca.c',0             ; DATA XREF: _make_revocation_str+13Eo
					; _do_revoke+19Do ...
asc_45C0EB	db ',',0                ; DATA XREF: _make_revocation_str+173o
					; _make_revocation_str+19Fo
a00		db '00',0               ; DATA XREF: _do_revoke:loc_40D830o
					; _do_body+634o
aMemoryAlloca_0	db 'Memory allocation failure',0Ah,0 ; DATA XREF: _do_revoke:loc_40DA4Do
					; _ca_main:loc_411860o	...
		align 4
aAddingEntryWit	db 'Adding Entry with serial number %s to DB for %s',0Ah,0
					; DATA XREF: _do_revoke+180o
aUnknown_0	db 'unknown',0          ; DATA XREF: _do_revoke+26Eo
					; _do_body+F00o
aFailedToUpdate	db 'failed to update database',0Ah,0 ; DATA XREF: _do_revoke:loc_40DAE4o
					; _do_body+F9Do
aTxt_dbErrorNum	db 'TXT_DB error number %ld',0Ah,0 ; DATA XREF: _do_revoke+427o
					; _do_body+FC3o
aErrorNameDoesN	db 'ERROR:name does not match %s',0Ah,0 ; DATA XREF: _do_revoke+394o
		align 4
aErrorAlreadyRe	db 'ERROR:Already revoked, serial number %s',0Ah,0
					; DATA XREF: _do_revoke+3BBo
aRevokingCertif	db 'Revoking Certificate %s.',0Ah,0 ; DATA XREF: _do_revoke+E8o
		align 4
aErrorInRevocat	db 'Error in revocation arguments',0Ah,0 ; DATA XREF: _do_revoke:loc_40DB26o
aPrintable	db 'PRINTABLE:',27h,0   ; DATA XREF: _old_entry_print:loc_40DD20o
aT61string	db 'T61STRING:',27h,0   ; DATA XREF: _old_entry_print:loc_40DD40o
aIa5string	db 'IA5STRING:',27h,0   ; DATA XREF: _old_entry_print:loc_40DD60o
aUniversalstrin	db 'UNIVERSALSTRING:',27h,0 ; DATA XREF: _old_entry_print:loc_40DD00o
aAsn_12d	db 'ASN.1 %2d:',27h,0   ; DATA XREF: _old_entry_print+94o
asc_45C23D	db 27h,0Ah,0		; DATA XREF: _old_entry_print:loc_40DC58o
aC_6		db '%c',0               ; DATA XREF: _old_entry_print+F3o
a0x02x_3	db '\0x%02X',0          ; DATA XREF: _old_entry_print+164o
aC_5		db '^%c',0              ; DATA XREF: _old_entry_print+CFo
aNull		db 'NULL',0             ; DATA XREF: _do_body:loc_453471o
					; _do_body:loc_453552o
aExpired	db 'Expired',0          ; DATA XREF: _do_body:loc_453DA6o
aRevoked	db 'Revoked',0          ; DATA XREF: _do_body:loc_453D9Fo
aValid		db 'Valid',0            ; DATA XREF: _do_body+101Co
		align 4
aInvalidTypeDat	db 0Ah			; DATA XREF: _do_body+1013o
		db 'invalid type, Data base error',0Ah,0
aUndef		db 'undef',0            ; DATA XREF: _do_body+1056o
					; _do_body+107Bo ...
aMallocError_0	db 'malloc error',0Ah,0 ; DATA XREF: _do_body+2Ao
aTheSubjectSDis	db 'The Subject',27h,'s Distinguished Name is as follows',0Ah,0
					; DATA XREF: _do_body+FFo
aEmailaddressTy	db 0Ah			; DATA XREF: _do_body+1D8o
		db 'emailAddress type needs to be of type IA5STRING',0Ah,0
		align 4
aTheStringConta	db 0Ah			; DATA XREF: _do_body:loc_452F94o
		db 'The string contains characters that are illegal for the ASN.1 typ'
		db 'e',0Ah,0
		align 4
aSUnknownObject	db '%s:unknown object type in ',27h,'policy',27h,' configuration',0Ah,0
					; DATA XREF: _do_body+3C3o
; char aOptional[]
aOptional	db 'optional',0         ; DATA XREF: _do_body+33Eo
; char aSupplied[]
aSupplied	db 'supplied',0         ; DATA XREF: _do_body:loc_453188o
aTheSFieldNeede	db 'The %s field needed to be supplied and was missing',0Ah,0
					; DATA XREF: _do_body+436o
; char aMatch[]
aMatch		db 'match',0            ; DATA XREF: _do_body:loc_4531BCo
		align 4
aTheMandatorySF	db 'The mandatory %s field was missing',0Ah,0 ; DATA XREF: _do_body+46Ao
aTheSFieldDoesN	db 'The %s field does not exist in the CA certificate,',0Ah
					; DATA XREF: _do_body+4A8o
		db 'the ',27h,'policy',27h,' is misconfigured',0Ah,0
		align 4
aTheSFieldNee_0	db 'The %s field needed to be the same in the',0Ah
					; DATA XREF: _do_body+71Co
		db 'CA certificate (%s) and the request (%s)',0Ah,0
aSInvalidTypeIn	db '%s:invalid type in ',27h,'policy',27h,' configuration',0Ah,0
					; DATA XREF: _do_body+4F5o
		align 4
aTheSubjectName	db 'The subject name appears to be ok, checking data base for clashes'
					; DATA XREF: _do_body+5B4o
		db 0Ah,0
		align 4
aErrorThereIsAl	db 'ERROR:There is already a certificate for %s',0Ah,0
					; DATA XREF: _do_body+6C7o
		align 4
aErrorSerialNum	db 'ERROR:Serial number %s has already been issued,',0Ah,0
					; DATA XREF: _do_body+810o
		align 4
aCheckTheDataba	db '      check the database/serial_file for corruption',0Ah,0
					; DATA XREF: _do_body+825o
aTypeS		db 'Type          :%s',0Ah,0 ; DATA XREF: _do_body+1033o
aWasRevokedOnS	db 'Was revoked on:%s',0Ah,0 ; DATA XREF: _do_body+105Fo
aExpiresOnS	db 'Expires on    :%s',0Ah,0 ; DATA XREF: _do_body+1084o
aSerialNumberS	db 'Serial Number :%s',0Ah,0 ; DATA XREF: _do_body+10A9o
aFileNameS	db 'File name     :%s',0Ah,0 ; DATA XREF: _do_body+10CEo
aSubjectNameS	db 'Subject Name  :%s',0Ah,0 ; DATA XREF: _do_body+10F3o
		align 4
aEverythingAppe	db 'Everything appears to be ok, creating and signing the certificate'
					; DATA XREF: _do_body+849o
		db 0Ah,0
; char aToday[]
aToday		db 'today',0            ; DATA XREF: _ca_main+3865o
					; _do_body+8BDo
		align 10h
aExtraConfigura	db 'Extra configuration file found',0Ah,0 ; DATA XREF: _do_body+A73o
aErrorAddingExt	db 'ERROR: adding extensions in section %s',0Ah,0 ; DATA XREF: _do_body+B39o
aSuccessfullyAd	db 'Successfully added extensions from file.',0Ah,0
					; DATA XREF: _do_body+AD3o
		align 4
aSuccessfully_0	db 'Successfully added extensions from config',0Ah,0
					; DATA XREF: _do_body+B6Ao
		align 10h
aErrorAddingE_0	db 'ERROR: adding extensions from request',0Ah,0 ; DATA XREF: _do_body+BA5o
aCertificateDet	db 'Certificate Details:',0Ah,0 ; DATA XREF: _do_body+BE8o
		align 10h
aCertificateIsT	db 'Certificate is to be certified until ',0
					; DATA XREF: _do_body:loc_4539CDo
aLdDays		db ' (%ld days)',0      ; DATA XREF: _do_body+C98o
asc_45C772	db 0Ah,0		; DATA XREF: _ca_main+21F3o
					; _ca_main+2429o ...
aSignTheCertifi	db 'Sign the certificate? [y/n]:',0 ; DATA XREF: _do_body+CD0o
		align 4
aCertificateW_1	db 'CERTIFICATE WILL NOT BE CERTIFIED: I/O error',0Ah,0
					; DATA XREF: _do_body+D30o
		align 4
aCertificateW_2	db 'CERTIFICATE WILL NOT BE CERTIFIED',0Ah,0 ; DATA XREF: _do_body+D5Do
		align 4
aTheMatchingEnt	db 'The matching entry has the following details',0Ah,0
					; DATA XREF: _do_body:loc_453D6Eo
		align 4
aErrorReading_9	db 'Error reading certificate request in %s',0Ah,0 ; DATA XREF: _certify+7Ao
		align 4
aCheckThatTheRe	db 'Check that the request matches the signature',0Ah,0
					; DATA XREF: _ca_main:loc_410690o
					; _certify:loc_453F49o
		align 4
aCertificateReq	db 'Certificate request and CA private key do not match',0Ah,0
					; DATA XREF: _certify+D4o
aErrorUnpacking	db 'error unpacking public key',0Ah,0 ; DATA XREF: _ca_main:loc_41182Eo
					; _certify+FEo
		align 4
aSignatureVer_0	db 'Signature verification problems....',0Ah,0
					; DATA XREF: _ca_main:loc_410CB8o
					; _certify+140o
		align 10h
aSignatureDid_1	db 'Signature did not match the certificate request',0Ah,0
					; DATA XREF: _certify+14Co
aSignatureOk	db 'Signature ok',0Ah,0 ; DATA XREF: _ca_main+2093o
					; _ca_main:loc_410B6Ao	...
aMemoryAlloca_1	db 'memory allocation failure',0Ah,0
					; DATA XREF: _unpack_revinfo:loc_40DFB0o
					; _unpack_revinfo:loc_40E030o ...
aInvalidRevocat	db 'invalid revocation date %s',0Ah,0 ; DATA XREF: _unpack_revinfo+114o
aMissingHoldIns	db 'missing hold instruction',0Ah,0 ; DATA XREF: _unpack_revinfo:loc_40E0B6o
aInvalidObjec_0	db 'invalid object identifier %s',0Ah,0 ; DATA XREF: _unpack_revinfo+369o
aMissingComprom	db 'missing compromised time',0Ah,0 ; DATA XREF: _unpack_revinfo:loc_40E0CFo
aInvalidComprom	db 'invalid compromised time %s',0Ah,0 ; DATA XREF: _unpack_revinfo+2E6o
aInvalidReasonC	db 'invalid reason code %s',0Ah,0 ; DATA XREF: _unpack_revinfo+BEo
aDefault_0	db 'default',0          ; DATA XREF: _ca_main:loc_40FF4Fo
					; _ca_main+1F0Do ...
aVerbose_1	db '-verbose',0         ; DATA XREF: _ca_main+282o
aConfig_0	db '-config',0          ; DATA XREF: _ca_main:loc_40E550o
aName		db '-name',0            ; DATA XREF: _ca_main:loc_40E7B0o
aSubj_0		db '-subj',0            ; DATA XREF: _ca_main:loc_40E7E0o
aUtf8_1		db '-utf8',0            ; DATA XREF: _ca_main:loc_40E810o
aCreate_serial	db '-create_serial',0   ; DATA XREF: _ca_main+520o
aMultivalueRd_0	db '-multivalue-rdn',0  ; DATA XREF: _ca_main+530o
aStartdate	db '-startdate',0       ; DATA XREF: _ca_main:loc_40E870o
aEnddate	db '-enddate',0         ; DATA XREF: _ca_main+584o
aDays_0		db '-days',0            ; DATA XREF: _ca_main:loc_40EC25o
aMd_0		db '-md',0              ; DATA XREF: _ca_main+935o
aPolicy		db '-policy',0          ; DATA XREF: _ca_main:loc_40EF02o
aKeyfile	db '-keyfile',0         ; DATA XREF: _ca_main:loc_40EFF8o
aKeyform_1	db '-keyform',0         ; DATA XREF: _ca_main:loc_40F51Do
aPassin_1	db '-passin',0          ; DATA XREF: _ca_main:loc_40F710o
aKey_1		db '-key',0             ; DATA XREF: _ca_main:loc_4120E0o
aCert		db '-cert',0            ; DATA XREF: _ca_main:loc_412109o
aSelfsign	db '-selfsign',0        ; DATA XREF: _ca_main:loc_412132o
aIn_4		db '-in',0              ; DATA XREF: _ca_main+3E42o
aOut_6		db '-out',0             ; DATA XREF: _ca_main:loc_412186o
aOutdir		db '-outdir',0          ; DATA XREF: _ca_main:loc_4121AFo
aSigopt_1	db '-sigopt',0          ; DATA XREF: _ca_main:loc_4121D8o
aNotext		db '-notext',0          ; DATA XREF: _ca_main:loc_412222o
aBatch_0	db '-batch',0           ; DATA XREF: _ca_main+3F36o
aPreservedn	db '-preserveDN',0      ; DATA XREF: _ca_main+3F46o
aNoemaildn	db '-noemailDN',0       ; DATA XREF: _ca_main:loc_41226Do
aGencrl		db '-gencrl',0          ; DATA XREF: _ca_main+3F81o
aMsie_hack_0	db '-msie_hack',0       ; DATA XREF: _ca_main+3F91o
aCrldays	db '-crldays',0         ; DATA XREF: _ca_main:loc_4122D0o
aCrlhours	db '-crlhours',0        ; DATA XREF: _ca_main:loc_412323o
aCrlsec		db '-crlsec',0          ; DATA XREF: _ca_main:loc_412356o
aInfiles	db '-infiles',0         ; DATA XREF: _ca_main:loc_412389o
aSs_cert	db '-ss_cert',0         ; DATA XREF: _ca_main+4099o
aSpkac_0	db '-spkac',0           ; DATA XREF: _ca_main:loc_4123E1o
aRevoke		db '-revoke',0          ; DATA XREF: _ca_main:loc_412415o
aExtensions_1	db '-extensions',0      ; DATA XREF: _ca_main:loc_412449o
aExtfile	db '-extfile',0         ; DATA XREF: _ca_main:loc_412472o
aStatus		db '-status',0          ; DATA XREF: _ca_main:loc_41249Bo
aUpdatedb	db '-updatedb',0        ; DATA XREF: _ca_main:loc_4124C1o
aCrlexts	db '-crlexts',0         ; DATA XREF: _ca_main+41D1o
aCrl_reason	db '-crl_reason',0      ; DATA XREF: _ca_main:loc_41250Ao
aCrl_hold	db '-crl_hold',0        ; DATA XREF: _ca_main:loc_41253Eo
aCrl_compromise	db '-crl_compromise',0  ; DATA XREF: _ca_main:loc_412572o
aCrl_ca_comprom	db '-crl_CA_compromise',0 ; DATA XREF: _ca_main:loc_4125A6o
aEngine_6	db '-engine',0          ; DATA XREF: _ca_main:loc_4125DAo
aUnknownOptio_4	db 'unknown option %s',0Ah,0 ; DATA XREF: _ca_main+5C8o
aS_6		db '%s',0               ; DATA XREF: _ca_main+5F4o
; char aOpenssl_conf[]
aOpenssl_conf	db 'OPENSSL_CONF',0     ; DATA XREF: _ca_main:loc_40EC8Fo
; char aSsleay_conf[]
aSsleay_conf	db 'SSLEAY_CONF',0      ; DATA XREF: _ca_main+9A7o
aOutOfMemory_1	db 'Out of memory',0Ah,0 ; DATA XREF: _ca_main:loc_40F3F3o
asc_45CBC9	db '/',0                ; DATA XREF: _ca_main+A0Do
					; _ca_main+2B4Fo
aOpenssl_cnf	db 'openssl.cnf',0      ; DATA XREF: _ca_main+A21o
aUsingConfigu_0	db 'Using configuration from %s',0Ah,0 ; DATA XREF: _ca_main+2B9o
					; _ca_main+A35o
aErrorLoadingTh	db 'error loading the config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _ca_main+CB2o
aErrorOnLineL_1	db 'error on line %ld of config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _ca_main+C80o
aDefault_ca	db 'default_ca',0       ; DATA XREF: _ca_main:loc_40F488o
					; _ca_main+11B2o
aCa		db 'ca',0               ; DATA XREF: _ca_main+6F1o
					; _ca_main+E5Do ...
		align 10h
aVariableLookup	db 'variable lookup failed for %s::%s',0Ah,0 ; DATA XREF: _ca_main+11C2o
					; _ca_main+11F1o ...
aOid_file_0	db 'oid_file',0         ; DATA XREF: _ca_main+67Co
aRandfile_0	db 'RANDFILE',0         ; DATA XREF: _ca_main:loc_40E9E9o
aString_mask_0	db 'string_mask',0      ; DATA XREF: _ca_main+730o
		align 4
aInvalidGloba_0	db 'Invalid global string mask setting %s',0Ah,0 ; DATA XREF: _ca_main+CD4o
aUtf8_2		db 'utf8',0             ; DATA XREF: _ca_main+775o
aYes_0		db 'yes',0              ; DATA XREF: _ca_main+79Bo
aUnique_subject	db 'unique_subject',0   ; DATA XREF: _ca_main+7C1o
aDatabase	db 'database',0         ; DATA XREF: _ca_main+881o
					; _ca_main:loc_40F2A7o	...
aMallocFailure	db 'Malloc failure',0Ah,0 ; DATA XREF: _ca_main:loc_40FA8Do
					; _ca_main:loc_40FDE0o
aSerialSNotPres	db 'Serial %s not present in db.',0Ah,0 ; DATA XREF: _ca_main+1516o
aSValidC	db '%s=Valid (%c)',0Ah,0 ; DATA XREF: _ca_main+14ECo
aSRevokedC	db '%s=Revoked (%c)',0Ah,0 ; DATA XREF: _ca_main+14BAo
aSExpiredC	db '%s=Expired (%c)',0Ah,0 ; DATA XREF: _ca_main+15B2o
aSSuspendedC	db '%s=Suspended (%c)',0Ah,0 ; DATA XREF: _ca_main+1398o
aSUnknownC_	db '%s=Unknown (%c).',0Ah,0 ; DATA XREF: _ca_main+1580o
aErrorVerifyi_0	db 'Error verifying serial %s!',0Ah,0 ; DATA XREF: _ca_main+13DDo
aPrivate_key	db 'private_key',0      ; DATA XREF: _ca_main:loc_40F770o
					; _ca_main+149Ao
aErrorGetting_2	db 'Error getting password',0Ah,0 ; DATA XREF: _ca_main:loc_40F919o
aCaPrivateKey	db 'CA private key',0   ; DATA XREF: _ca_main:loc_40F045o
aCertificate	db 'certificate',0      ; DATA XREF: _ca_main:loc_40F997o
					; _ca_main+16C4o
aCaCertificate	db 'CA certificate',0   ; DATA XREF: _ca_main:loc_40F0DCo
		align 4
aCaCertificateA	db 'CA certificate and CA private key do not match',0Ah,0
					; DATA XREF: _ca_main:loc_40F964o
aPreserve	db 'preserve',0         ; DATA XREF: _ca_main:loc_40F155o
aMsie_hack	db 'msie_hack',0        ; DATA XREF: _ca_main:loc_40F187o
aName_opt	db 'name_opt',0         ; DATA XREF: _ca_main:loc_40F1B9o
aInvalidNameOpt	db 'Invalid name options: "%s"',0Ah,0 ; DATA XREF: _ca_main+3C75o
aCert_opt	db 'cert_opt',0         ; DATA XREF: _ca_main:loc_40F207o
		align 10h
aInvalidCertifi	db 'Invalid certificate options: "%s"',0Ah,0 ; DATA XREF: _ca_main+3DA3o
aCopy_extension	db 'copy_extensions',0  ; DATA XREF: _ca_main:loc_40F255o
		align 4
aInvalidExtensi	db 'Invalid extension copy option: "%s"',0Ah,0 ; DATA XREF: _ca_main+3D35o
aNew_certs_dir	db 'new_certs_dir',0    ; DATA XREF: _ca_main+3CC2o
		align 4
aThereNeedsToBe	db 'there needs to be defined a directory for new certificate to be p'
					; DATA XREF: _ca_main:loc_41207Bo
		db 'laced in',0Ah,0
		align 4
aIAmUnableToAcc	db 'I am unable to access the %s directory',0Ah,0
					; DATA XREF: _ca_main+3D0Fo
aSNeedToBeADire	db '%s need to be a directory',0Ah,0 ; DATA XREF: _ca_main+3D71o
		align 4
aEntryDNotRevok	db 'entry %d: not revoked yet, but has a revocation date',0Ah,0
					; DATA XREF: _ca_main+1835o
aInEntryD	db ' in entry %d',0Ah,0 ; DATA XREF: _ca_main+1889o
aEntryDInvalidE	db 'entry %d: invalid expiry date',0Ah,0 ; DATA XREF: _ca_main+1803o
		align 4
aEntryDBadSer_0	db 'entry %d: bad serial number length (%d)',0Ah,0
					; DATA XREF: _ca_main+17C8o
		align 4
aEntryDBadSeria	db 'entry %d: bad serial number characters, char pos %ld, char is ',27h,'%'
					; DATA XREF: _ca_main+10B8o
		db 'c',27h,0Ah,0
aDEntriesLoaded	db '%d entries loaded from the database',0Ah,0 ; DATA XREF: _ca_main+18EEo
aGeneratingInde	db 'generating index',0Ah,0 ; DATA XREF: _ca_main+1903o
aUpdatingS___	db 'Updating %s ...',0Ah,0 ; DATA XREF: _ca_main+194Eo
a49		db '49',0               ; DATA XREF: _ca_main+19FCo
					; _ca_main+3B88o
aSExpired	db '%s=Expired',0Ah,0   ; DATA XREF: _ca_main+3BD2o
		align 4
aNoEntriesFound	db 'No entries found to mark expired',0Ah,0 ; DATA XREF: _ca_main+3C30o
; char aNew_4[]
aNew_4		db 'new',0              ; DATA XREF: _ca_main+1B13o
					; _ca_main+1B3Ao ...
; char aOld_0[]
aOld_0		db 'old',0              ; DATA XREF: _ca_main+1B32o
					; _ca_main+31F9o ...
		align 10h
aDone_DEntriesM	db 'Done. %d entries marked as expired',0Ah,0 ; DATA XREF: _ca_main+1B6Co
aErrorLoading_1	db 'ERROR: loading the config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _ca_main+3B76o
		align 4
aErrorOnLineL_3	db 'ERROR: on line %ld of config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _ca_main+3B22o
aSuccessfullyLo	db 'Successfully loaded extensions file %s',0Ah,0
					; DATA XREF: _ca_main+1BCFo
aExtensions_0	db 'extensions',0       ; DATA XREF: _ca_main:loc_411E2Fo
aDefault_md_0	db 'default_md',0       ; DATA XREF: _ca_main:loc_411D51o
					; _ca_main+3A7Eo
aNoDefaultDiges	db 'no default digest',0Ah,0 ; DATA XREF: _ca_main:loc_411D8Bo
		align 4
aSIsAnUnsuppo_0	db '%s is an unsupported message digest type',0Ah,0
					; DATA XREF: _ca_main+3A44o
aEmail_in_dn	db 'email_in_dn',0      ; DATA XREF: _ca_main:loc_411CE4o
aNo_0		db 'no',0               ; DATA XREF: _ca_main+3A0Ao
aMessageDigestI	db 'message digest is %s',0Ah,0 ; DATA XREF: _ca_main+1CF1o
aPolicy_0	db 'policy',0           ; DATA XREF: _ca_main:loc_411CAAo
					; _ca_main+39D7o
aPolicyIsS	db 'policy is %s',0Ah,0 ; DATA XREF: _ca_main+1D28o
aSerial		db 'serial',0           ; DATA XREF: _ca_main:loc_41003Do
					; _ca_main:loc_411C10o
aX509_extensi_0	db 'x509_extensions',0  ; DATA XREF: _ca_main:loc_411C73o
		align 4
aErrorLoading_0	db 'Error Loading extension section %s',0Ah,0 ; DATA XREF: _ca_main+3903o
aDefault_startd	db 'default_startdate',0 ; DATA XREF: _ca_main:loc_411B33o
		align 4
aStartDateIsInv	db 'start date is invalid, it should be YYMMDDHHMMSSZ or YYYYMMDDHHMM'
					; DATA XREF: _ca_main:loc_41190Ao
		db 'SSZ',0Ah,0
aDefault_enddat	db 'default_enddate',0  ; DATA XREF: _ca_main:loc_4118D3o
		align 4
aEndDateIsInval	db 'end date is invalid, it should be YYMMDDHHMMSSZ or YYYYMMDDHHMMSS'
					; DATA XREF: _ca_main:loc_4118C6o
		db 'Z',0Ah,0
aDefault_days	db 'default_days',0     ; DATA XREF: _ca_main+3590o
		align 4
aCannotLookupHo	db 'cannot lookup how many days to certify for',0Ah,0
					; DATA XREF: _ca_main+2023o
aErrorWhileLoad	db 'error while loading serial number',0Ah,0
					; DATA XREF: _ca_main:loc_410307o
aNextSerialNumb	db 'next serial number is 00',0Ah,0 ; DATA XREF: _ca_main+1E35o
aNextSerialNu_0	db 'next serial number is %s',0Ah,0 ; DATA XREF: _ca_main+3951o
		align 4
aUnableToFindSe	db 'unable to find ',27h,'section',27h,' for %s',0Ah,0
					; DATA XREF: _ca_main+3578o
aErrorOnLineL_2	db 'error on line %ld of %s',0Ah,0 ; DATA XREF: _ca_main+226Ao
		align 4
aNoNameValuePai	db 'no name/value pairs found in %s',0Ah,0 ; DATA XREF: _ca_main+3644o
aSpkac		db 'SPKAC',0            ; DATA XREF: _ca_main+1FE9o
		align 10h
aUnableToLoadNe	db 'unable to load Netscape SPKAC structure',0Ah,0
					; DATA XREF: _ca_main+3693o
		align 4
aNetscapeSpkacS	db 'Netscape SPKAC structure not found in %s',0Ah,0
					; DATA XREF: _ca_main+373Co
		align 4
aCheckThatTheSp	db 'Check that the SPKAC request matches the signature',0Ah,0
					; DATA XREF: _ca_main+204Ao
aErrorUnpacki_0	db 'error unpacking SPKAC public key',0Ah,0
					; DATA XREF: _ca_main:loc_411A12o
		align 10h
aSignatureVerif	db 'signature verification failed on SPKAC public key',0Ah,0
					; DATA XREF: _ca_main:loc_410535o
		align 4
aSignatureDidNo	db 'Signature did not match the certificate',0Ah,0
					; DATA XREF: _ca_main+23F5o
		align 10h
aDOutOfDCertifi	db 0Ah			; DATA XREF: _ca_main+27C8o
		db '%d out of %d certificate requests certified, commit? [y/n]',0
aCertificatio_0	db 'CERTIFICATION CANCELED: I/O error',0Ah,0
					; DATA XREF: _ca_main:loc_410CF9o
aCertificationC	db 'CERTIFICATION CANCELED',0Ah,0 ; DATA XREF: _ca_main+283Eo
		align 4
aWriteOutDataba	db 'Write out database with %d new entries',0Ah,0
					; DATA XREF: _ca_main+2A16o
aWritingNewCert	db 'writing new certificates',0Ah,0 ; DATA XREF: _ca_main+2A8Co
		align 4
aCertificateF_0	db 'certificate file name too long',0Ah,0 ; DATA XREF: _ca_main:loc_410F95o
a02x_1		db '%02X',0             ; DATA XREF: _ca_main+2BBDo
aWritingS	db 'writing %s',0Ah,0   ; DATA XREF: _ca_main+2C07o
aDataBaseUpdate	db 'Data Base Updated',0Ah,0 ; DATA XREF: _ca_main+32F0o
					; _ca_main+3459o
aCrl_extensions	db 'crl_extensions',0   ; DATA XREF: _ca_main:loc_41165Fo
		align 10h
aErrorLoadingCr	db 'Error Loading CRL extension section %s',0Ah,0
					; DATA XREF: _ca_main+33A8o
aCrlnumber	db 'crlnumber',0        ; DATA XREF: _ca_main:loc_4110DDo
		align 4
aErrorWhileLo_0	db 'error while loading CRL number',0Ah,0 ; DATA XREF: _ca_main:loc_411286o
aDefault_crl_da	db 'default_crl_days',0 ; DATA XREF: _ca_main+347Eo
aDefault_crl_ho	db 'default_crl_hours',0 ; DATA XREF: _ca_main+34B6o
aMakingCrl	db 'making CRL',0Ah,0   ; DATA XREF: _ca_main+2E54o
aErrorSettingCr	db 'error setting CRL nextUpdate',0Ah,0 ; DATA XREF: _ca_main:loc_4116CBo
aSigningCrl	db 'signing CRL',0Ah,0  ; DATA XREF: _ca_main+3070o
aNoInputFiles	db 'no input files',0Ah,0 ; DATA XREF: _ca_main:loc_4116EAo
aR_7		db 'r',0                ; DATA XREF: _ca_main+69Co
aCannotLookup_0	db 'cannot lookup how long until the next CRL is issued',0Ah,0
					; DATA XREF: _ca_main+3506o
aUnspecified	db 'unspecified',0      ; DATA XREF: .rdata:_crl_reasonso
aKeycompromise	db 'keyCompromise',0    ; DATA XREF: .rdata:0045D744o
aCacompromise	db 'CACompromise',0     ; DATA XREF: .rdata:0045D748o
aAffiliationcha	db 'affiliationChanged',0 ; DATA XREF: .rdata:0045D74Co
aSuperseded	db 'superseded',0       ; DATA XREF: .rdata:0045D750o
aCessationofope	db 'cessationOfOperation',0 ; DATA XREF: .rdata:0045D754o
aCertificatehol	db 'certificateHold',0  ; DATA XREF: .rdata:0045D758o
aRemovefromcrl	db 'removeFromCRL',0    ; DATA XREF: .rdata:0045D75Co
		align 20h
_crl_reasons	dd offset aUnspecified	; DATA XREF: _make_revocation_str:loc_40D4B0r
					; _unpack_revinfo:loc_40DE40r
					; "unspecified"
		dd offset aKeycompromise ; "keyCompromise"
		dd offset aCacompromise	; "CACompromise"
		dd offset aAffiliationcha ; "affiliationChanged"
		dd offset aSuperseded	; "superseded"
		dd offset aCessationofope ; "cessationOfOperation"
		dd offset aCertificatehol ; "certificateHold"
		dd offset aRemovefromcrl ; "removeFromCRL"
		dd offset aHoldinstructio ; "holdInstruction"
		dd offset aKeytime	; "keyTime"
		dd offset aCakeytime	; "CAkeyTime"
aUsageCaArgs	db 'usage: ca args',0Ah,0 ; DATA XREF: .data:_ca_usageo
aVerboseTalkAlo	db ' -verbose        - Talk alot while doing things',0Ah,0
					; DATA XREF: .data:00455568o
		align 10h
aConfigFileACon	db ' -config file    - A config file',0Ah,0 ; DATA XREF: .data:0045556Co
		align 4
aNameArgThePart	db ' -name arg       - The particular CA definition to use',0Ah,0
					; DATA XREF: .data:00455570o
aGencrlGenerate	db ' -gencrl         - Generate a new CRL',0Ah,0
					; DATA XREF: .data:00455574o
		align 4
aCrldaysDaysDay	db ' -crldays days   - Days is when the next CRL is due',0Ah,0
					; DATA XREF: .data:00455578o
		align 4
aCrlhoursHoursH	db ' -crlhours hours - Hours is when the next CRL is due',0Ah,0
					; DATA XREF: .data:0045557Co
		align 4
aStartdateYymmd	db ' -startdate YYMMDDHHMMSSZ  - certificate validity notBefore',0Ah,0
					; DATA XREF: .data:00455580o
		align 4
aEnddateYymmddh	db ' -enddate YYMMDDHHMMSSZ    - certificate validity notAfter (overr'
					; DATA XREF: .data:00455584o
		db 'ides -days)',0Ah,0
		align 4
aDaysArgNumberO	db ' -days arg       - number of days to certify the certificate for',0Ah
					; DATA XREF: .data:00455588o
		db 0
		align 4
aMdArgMdToUseOn	db ' -md arg         - md to use, one of md2, md5, sha or sha1',0Ah,0
					; DATA XREF: .data:0045558Co
aPolicyArgTheCa	db ' -policy arg     - The CA ',27h,'policy',27h,' to support',0Ah,0
					; DATA XREF: .data:00455590o
		align 4
aKeyfileArgPriv	db ' -keyfile arg    - private key file',0Ah,0 ; DATA XREF: .data:00455594o
		align 4
aKeyformArgPr_1	db ' -keyform arg    - private key file format (PEM or ENGINE)',0Ah,0
					; DATA XREF: .data:00455598o
aKeyArgKeyToDec	db ' -key arg        - key to decode the private key if it is encrypt'
					; DATA XREF: .data:0045559Co
		db 'ed',0Ah,0
		align 10h
aCertFileTheCaC	db ' -cert file      - The CA certificate',0Ah,0
					; DATA XREF: .data:004555A0o
		align 4
aSelfsignSignAC	db ' -selfsign       - sign a certificate with the key associated wit'
					; DATA XREF: .data:004555A4o
		db 'h it',0Ah,0
		align 10h
aInFileTheInput	db ' -in file        - The input PEM encoded certificate request(s)',0Ah
					; DATA XREF: .data:004555A8o
		db 0
		align 4
aOutFileWhereTo	db ' -out file       - Where to put the output file(s)',0Ah,0
					; DATA XREF: .data:004555ACo
aOutdirDirWhere	db ' -outdir dir     - Where to put output certificates',0Ah,0
					; DATA XREF: .data:004555B0o
		align 10h
aInfiles____The	db ' -infiles ....   - The last argument, requests to process',0Ah,0
					; DATA XREF: .data:004555B4o
		align 4
aSpkacFileFileC	db ' -spkac file     - File contains DN and signed public key and cha'
					; DATA XREF: .data:004555B8o
		db 'llenge',0Ah,0
		align 4
aSs_certFileFil	db ' -ss_cert file   - File contains a self signed cert to sign',0Ah,0
					; DATA XREF: .data:004555BCo
		align 4
aPreservednDonT	db ' -preserveDN     - Don',27h,'t re-order the DN',0Ah,0
					; DATA XREF: .data:004555C0o
		align 4
aNoemaildnDonTA	db ' -noemailDN      - Don',27h,'t add the EMAIL field into certificate',27h
					; DATA XREF: .data:004555C4o
		db ' subject',0Ah,0
aBatchDonTAskQu	db ' -batch          - Don',27h,'t ask questions',0Ah,0
					; DATA XREF: .data:004555C8o
aMsie_hackMsieM	db ' -msie_hack      - msie modifications to handle all those univers'
					; DATA XREF: .data:004555CCo
		db 'al strings',0Ah,0
		align 4
aRevokeFileRevo	db ' -revoke file    - Revoke a certificate (given in file)',0Ah,0
					; DATA XREF: .data:004555D0o
		align 10h
aSubjArgUseArgI	db ' -subj arg       - Use arg instead of request',27h,'s subject',0Ah,0
					; DATA XREF: .data:004555D4o
		align 4
aUtf8InputCha_0	db ' -utf8           - input characters are UTF8 (default ASCII)',0Ah,0
					; DATA XREF: .data:004555D8o
		align 4
aMultivalueRd_1	db ' -multivalue-rdn - enable support for multivalued RDNs',0Ah,0
					; DATA XREF: .data:004555DCo
aExtensions__Ex	db ' -extensions ..  - Extension section (override value in config fi'
					; DATA XREF: .data:004555E0o
		db 'le)',0Ah,0
		align 4
aExtfileFileCon	db ' -extfile file   - Configuration file with X509v3 extentions to a'
					; DATA XREF: .data:004555E4o
		db 'dd',0Ah,0
		align 4
aCrlexts__CrlEx	db ' -crlexts ..     - CRL extension section (override value in confi'
					; DATA XREF: .data:004555E8o
		db 'g file)',0Ah,0
		align 10h
aEngineEUseE_24	db ' -engine e       - use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: .data:004555ECo
		align 10h
aStatusSerialSh	db ' -status serial  - Shows certificate status given the serial numb'
					; DATA XREF: .data:004555F0o
		db 'er',0Ah,0
		align 4
aUpdatedbUpdate	db ' -updatedb       - Updates db for expired certificates',0Ah,0
					; DATA XREF: .data:004555F4o
		align 20h
aInform_3	db '-inform',0          ; DATA XREF: _pkcs7_main+1A9o
aOutform_2	db '-outform',0         ; DATA XREF: _pkcs7_main+1B7o
aIn_5		db '-in',0              ; DATA XREF: _pkcs7_main:loc_412800o
aOut_7		db '-out',0             ; DATA XREF: _pkcs7_main:loc_412830o
aNoout_3	db '-noout',0           ; DATA XREF: _pkcs7_main:loc_412860o
aText_2		db '-text',0            ; DATA XREF: _pkcs7_main+264o
aPrint		db '-print',0           ; DATA XREF: _pkcs7_main+278o
aPrint_certs	db '-print_certs',0     ; DATA XREF: _pkcs7_main+28Co
aEngine_7	db '-engine',0          ; DATA XREF: _pkcs7_main+2A0o
aUnknownOptio_5	db 'unknown option %s',0Ah,0 ; DATA XREF: _pkcs7_main+2B8o
		align 4
aSOptionsInfi_2	db '%s [options] <infile >outfile',0Ah,0 ; DATA XREF: _pkcs7_main+2D8o
aWhereOptions_4	db 'where options are',0Ah,0 ; DATA XREF: _pkcs7_main+2EDo
		align 4
aInformArgInp_3	db ' -inform arg   input format - DER or PEM',0Ah,0
					; DATA XREF: _pkcs7_main+302o
		align 4
aOutformArgOu_2	db ' -outform arg  output format - DER or PEM',0Ah,0
					; DATA XREF: _pkcs7_main+317o
aInArgInputFi_3	db ' -in arg       input file',0Ah,0 ; DATA XREF: _pkcs7_main+32Co
aOutArgOutput_3	db ' -out arg      output file',0Ah,0 ; DATA XREF: _pkcs7_main+341o
		align 4
aPrint_certsPri	db ' -print_certs  print any certs or crl in the input',0Ah,0
					; DATA XREF: _pkcs7_main+356o
aTextPrintFullD	db ' -text         print full details of certificates',0Ah,0
					; DATA XREF: _pkcs7_main+36Bo
		align 4
aNooutDonTOutpu	db ' -noout        don',27h,'t output encoded data',0Ah,0
					; DATA XREF: _pkcs7_main+380o
		align 10h
aEngineEUseEn_5	db ' -engine e     use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _pkcs7_main+395o
aUnableToLoadIn	db 'unable to load input file',0Ah,0 ; DATA XREF: _pkcs7_main:loc_412B49o
		align 4
aBadInputForm_2	db 'bad input format specified for pkcs7 object',0Ah,0
					; DATA XREF: _pkcs7_main+13Ao
aUnableToLoadPk	db 'unable to load PKCS7 object',0Ah,0 ; DATA XREF: _pkcs7_main:loc_412EE6o
asc_45E252	db 0Ah,0		; DATA XREF: _pkcs7_main+5F8o
					; _pkcs7_main+648o ...
aBadOutputFor_2	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _pkcs7_main+50Eo
aUnableToWriteP	db 'unable to write pkcs7 object',0Ah,0 ; DATA XREF: _pkcs7_main+898o
		align 4
aInform_4	db '-inform',0          ; DATA XREF: _crl2pkcs7_main+85o
aOutform_3	db '-outform',0         ; DATA XREF: _crl2pkcs7_main+93o
aIn_6		db '-in',0              ; DATA XREF: _crl2pkcs7_main:loc_4130C0o
aNocrl		db '-nocrl',0           ; DATA XREF: _crl2pkcs7_main:loc_4130F0o
aOut_8		db '-out',0             ; DATA XREF: _crl2pkcs7_main+200o
aCertfile	db '-certfile',0        ; DATA XREF: _crl2pkcs7_main:loc_413240o
aUnknownOptio_6	db 'unknown option %s',0Ah,0 ; DATA XREF: _crl2pkcs7_main+243o
		align 4
aSOptionsInfi_3	db '%s [options] <infile >outfile',0Ah,0 ; DATA XREF: _crl2pkcs7_main+268o
aWhereOptions_5	db 'where options are',0Ah,0 ; DATA XREF: _crl2pkcs7_main+27Do
		align 10h
aInformArgInp_4	db ' -inform arg    input format - DER or PEM',0Ah,0
					; DATA XREF: _crl2pkcs7_main+292o
		align 4
aOutformArgOu_3	db ' -outform arg   output format - DER or PEM',0Ah,0
					; DATA XREF: _crl2pkcs7_main+2A7o
aInArgInputFi_4	db ' -in arg        input file',0Ah,0 ; DATA XREF: _crl2pkcs7_main+2BCo
aOutArgOutput_4	db ' -out arg       output file',0Ah,0 ; DATA XREF: _crl2pkcs7_main+2D1o
		align 4
aCertfileArgCer	db ' -certfile arg  certificates file of chain to a trusted CA',0Ah,0
					; DATA XREF: _crl2pkcs7_main+2E6o
aCanBeUsedMoreT	db '                (can be used more than once)',0Ah,0
					; DATA XREF: _crl2pkcs7_main+2FBo
		align 10h
aNocrlNoCrlToLo	db ' -nocrl         no crl to load, just certs from ',27h,'-certfile',27h,0Ah,0
					; DATA XREF: _crl2pkcs7_main+310o
		align 10h
aBadInputForm_3	db 'bad input format specified for input crl',0Ah,0
					; DATA XREF: _crl2pkcs7_main+151o
aUnableToLoadCr	db 'unable to load CRL',0Ah,0 ; DATA XREF: _crl2pkcs7_main:loc_41364Ao
aErrorReadingTh	db 'error reading the file, %s',0Ah,0 ; DATA XREF: _crl2pkcs7_main+782o
aErrorLoadingCe	db 'error loading certificates',0Ah,0
					; DATA XREF: _crl2pkcs7_main:loc_41359Do
		align 4
aBadOutputFor_3	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _crl2pkcs7_main+729o
aUnableToWrit_2	db 'unable to write pkcs7 object',0Ah,0
					; DATA XREF: _crl2pkcs7_main:loc_413703o
aErrorOpeningTh	db 'error opening the file, %s',0Ah,0 ; DATA XREF: _crl2pkcs7_main+67Co
					; _crl2pkcs7_main+7ADo
		align 4
aInform_5	db '-inform',0          ; DATA XREF: _crl_main+339o
aOutform_4	db '-outform',0         ; DATA XREF: _crl_main+347o
aIn_7		db '-in',0              ; DATA XREF: _crl_main:loc_413AE0o
aOut_9		db '-out',0             ; DATA XREF: _crl_main:loc_413B10o
aCapath_0	db '-CApath',0          ; DATA XREF: _crl_main:loc_413BA0o
aCafile_0	db '-CAfile',0          ; DATA XREF: _crl_main:loc_413BD0o
aVerify_1	db '-verify',0          ; DATA XREF: _crl_main+484o
aText_3		db '-text',0            ; DATA XREF: _crl_main+498o
aHash		db '-hash',0            ; DATA XREF: _crl_main+4ACo
aHash_old	db '-hash_old',0        ; DATA XREF: _crl_main+4C0o
aNameopt_0	db '-nameopt',0         ; DATA XREF: _crl_main:loc_413E8Ao
aIssuer		db '-issuer',0          ; DATA XREF: _crl_main:loc_413F6Eo
aLastupdate	db '-lastupdate',0      ; DATA XREF: _crl_main:loc_4140A8o
aNextupdate	db '-nextupdate',0      ; DATA XREF: _crl_main:loc_414109o
aNoout_4	db '-noout',0           ; DATA XREF: _crl_main:loc_414164o
aFingerprint	db '-fingerprint',0     ; DATA XREF: _crl_main:loc_414400o
aCrlnumber_1	db '-crlnumber',0       ; DATA XREF: _crl_main:loc_41443Ao
aUnknownOptio_7	db 'unknown option %s',0Ah,0 ; DATA XREF: _crl_main+4EDo
aS_18		db '%s',0               ; DATA XREF: _crl_main+534o
		align 4
aBadInputForm_4	db 'bad input format specified for input crl',0Ah,0
					; DATA XREF: _crl_main:loc_413B3Ao
aUnableToLoad_1	db 'unable to load CRL',0Ah,0 ; DATA XREF: _crl_main:loc_413F1Eo
		align 4
aErrorInitialis	db 'Error initialising X509 store',0Ah,0 ; DATA XREF: _crl_main+709o
		align 4
aErrorGettingCr	db 'Error getting CRL issuer certificate',0Ah,0
					; DATA XREF: _crl_main:loc_41413Do
		align 4
aErrorGetting_3	db 'Error getting CRL issuer public key',0Ah,0
					; DATA XREF: _crl_main:loc_41445Do
aVerifyFailur_0	db 'verify failure',0Ah,0 ; DATA XREF: _crl_main+8EAo
aVerifyOk_0	db 'verify OK',0Ah,0    ; DATA XREF: _crl_main:loc_41414Ao
aIssuer_0	db 'issuer=',0          ; DATA XREF: _crl_main+C39o
aCrlnumber_0	db 'crlNumber=',0       ; DATA XREF: _crl_main+BCCo
aNone_3		db '<NONE>',0           ; DATA XREF: _crl_main:loc_41447Co
asc_45E6B6	db 0Ah,0		; DATA XREF: _crl_main+B2Co
					; _crl_main:loc_41436Ao ...
a08lx		db '%08lx',0Ah,0        ; DATA XREF: _crl_main+B5Bo
					; _crl_main+B8Ao
aLastupdate_0	db 'lastUpdate=',0      ; DATA XREF: _crl_main:loc_41425Do
aNextupdate_0	db 'nextUpdate=',0      ; DATA XREF: _crl_main:loc_4143B3o
aNone_2		db 'NONE',0             ; DATA XREF: _crl_main:loc_414423o
aOutOfMemory_2	db 'out of memory',0Ah,0 ; DATA XREF: _crl_main+AF0o
aSFingerprint	db '%s Fingerprint=',0  ; DATA XREF: _crl_main+A6Fo
a02xC		db '%02X%c',0           ; DATA XREF: _crl_main+AB7o
		align 4
aBadOutputFor_4	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _crl_main+298o
aUnableToWriteC	db 'unable to write CRL',0Ah,0 ; DATA XREF: _crl_main+85Fo
aUsageCrlArgs	db 'usage: crl args',0Ah,0 ; DATA XREF: .data:_crl_usageo
		align 4
aInformArgIn_12	db ' -inform arg     - input format - default PEM (DER or PEM)',0Ah,0
					; DATA XREF: .data:00455608o
aOutformArgO_11	db ' -outform arg    - output format - default PEM',0Ah,0
					; DATA XREF: .data:0045560Co
aTextPrintOutAT	db ' -text           - print out a text format version',0Ah,0
					; DATA XREF: .data:00455610o
aInArgInputF_11	db ' -in arg         - input file - default stdin',0Ah,0
					; DATA XREF: .data:00455614o
		align 4
aOutArgOutpu_11	db ' -out arg        - output file - default stdout',0Ah,0
					; DATA XREF: .data:00455618o
		align 4
aHashPrintHashV	db ' -hash           - print hash value',0Ah,0 ; DATA XREF: .data:0045561Co
		align 10h
aHash_oldPrintO	db ' -hash_old       - print old-style (MD5) hash value',0Ah,0
					; DATA XREF: .data:00455620o
		align 4
aFingerprintPri	db ' -fingerprint    - print the crl fingerprint',0Ah,0
					; DATA XREF: .data:00455624o
		align 4
aIssuerPrintIss	db ' -issuer         - print issuer DN',0Ah,0 ; DATA XREF: .data:00455628o
aLastupdateLast	db ' -lastupdate     - lastUpdate field',0Ah,0 ; DATA XREF: .data:0045562Co
		align 4
aNextupdateNext	db ' -nextupdate     - nextUpdate field',0Ah,0 ; DATA XREF: .data:00455630o
		align 4
aCrlnumberPrint	db ' -crlnumber      - print CRL number',0Ah,0 ; DATA XREF: .data:00455634o
		align 4
aNooutNoCrlOutp	db ' -noout          - no CRL output',0Ah,0 ; DATA XREF: .data:00455638o
		align 4
aCafileNameVeri	db ' -CAfile  name   - verify CRL using certificates in file "name"',0Ah
					; DATA XREF: .data:0045563Co
		db 0
		align 4
aCapathDirVerif	db ' -CApath  dir    - verify CRL using certificates in "dir"',0Ah,0
					; DATA XREF: .data:00455640o
		align 4
aNameoptArgVa_0	db ' -nameopt arg    - various certificate name options',0Ah,0
					; DATA XREF: .data:00455644o
		align 10h
aInform_6	db '-inform',0          ; DATA XREF: _rsa_main+115o
aSOptionsInfi_4	db '%s [options] <infile >outfile',0Ah,0 ; DATA XREF: _rsa_main+3C8o
aWhereOptions_6	db 'where options are',0Ah,0 ; DATA XREF: _rsa_main+3DDo
		align 4
aInformArgInp_5	db ' -inform arg     input format - one of DER NET PEM',0Ah,0
					; DATA XREF: _rsa_main+3F2o
aOutformArgOu_4	db ' -outform arg    output format - one of DER NET PEM',0Ah,0
					; DATA XREF: _rsa_main+407o
aInArgInputFi_5	db ' -in arg         input file',0Ah,0 ; DATA XREF: _rsa_main+41Co
		align 4
aSgckeyUseIisSg	db ' -sgckey         Use IIS SGC key format',0Ah,0
					; DATA XREF: _rsa_main+431o
		align 10h
aPassinArgInput	db ' -passin arg     input file pass phrase source',0Ah,0
					; DATA XREF: _rsa_main+446o
aOutArgOutput_5	db ' -out arg        output file',0Ah,0 ; DATA XREF: _rsa_main+45Bo
		align 10h
aPassoutArgOutp	db ' -passout arg    output file pass phrase source',0Ah,0
					; DATA XREF: _rsa_main+470o
		align 4
aDesEncryptPemO	db ' -des            encrypt PEM output with cbc des',0Ah,0
					; DATA XREF: _rsa_main+485o
		align 4
aDes3EncryptPem	db ' -des3           encrypt PEM output with ede cbc des using 168 bi'
					; DATA XREF: _rsa_main+49Ao
		db 't key',0Ah,0
aIdeaEncryptPem	db ' -idea           encrypt PEM output with cbc idea',0Ah,0
					; DATA XREF: _rsa_main+4AFo
		align 4
aSeedEncryptPem	db ' -seed           encrypt PEM output with cbc seed',0Ah,0
					; DATA XREF: _rsa_main+4C4o
aAes128Aes192Ae	db ' -aes128, -aes192, -aes256',0Ah,0 ; DATA XREF: _rsa_main+4D9o
		align 4
aEncryptPemOutp	db '                 encrypt PEM output with cbc aes',0Ah,0
					; DATA XREF: _rsa_main+4EEo
		align 4
aCamellia128Cam	db ' -camellia128, -camellia192, -camellia256',0Ah,0
					; DATA XREF: _rsa_main+503o
		align 4
aEncryptPemOu_0	db '                 encrypt PEM output with cbc camellia',0Ah,0
					; DATA XREF: _rsa_main+518o
		align 4
aTextPrintTheKe	db ' -text           print the key in text',0Ah,0
					; DATA XREF: _rsa_main+52Do
aNooutDonTPrint	db ' -noout          don',27h,'t print key out',0Ah,0
					; DATA XREF: _rsa_main+542o
		align 4
aModulusPrintTh	db ' -modulus        print the RSA key modulus',0Ah,0
					; DATA XREF: _rsa_main+557o
aCheckVerifyKey	db ' -check          verify key consistency',0Ah,0
					; DATA XREF: _rsa_main+56Co
		align 4
aPubinExpectAPu	db ' -pubin          expect a public key in input file',0Ah,0
					; DATA XREF: _rsa_main+581o
aPuboutOutputAP	db ' -pubout         output a public key',0Ah,0 ; DATA XREF: _rsa_main+596o
		align 10h
aEngineEUseEn_6	db ' -engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _rsa_main+5ABo
aOutform_5	db '-outform',0         ; DATA XREF: _rsa_main+123o
aIn_8		db '-in',0              ; DATA XREF: _rsa_main:loc_4147D0o
aOut_10		db '-out',0             ; DATA XREF: _rsa_main:loc_414800o
aPassin_2	db '-passin',0          ; DATA XREF: _rsa_main:loc_414830o
aPassout_0	db '-passout',0         ; DATA XREF: _rsa_main:loc_414A90o
aEngine_8	db '-engine',0          ; DATA XREF: _rsa_main+5E0o
aSgckey		db '-sgckey',0          ; DATA XREF: _rsa_main:loc_414AE6o
aPubin		db '-pubin',0           ; DATA XREF: _rsa_main+63Ao
aPubout		db '-pubout',0          ; DATA XREF: _rsa_main+64Eo
aRsapublickey_i	db '-RSAPublicKey_in',0 ; DATA XREF: _rsa_main+662o
aRsapublickey_o	db '-RSAPublicKey_out',0 ; DATA XREF: _rsa_main+676o
aPvkStrong	db '-pvk-strong',0      ; DATA XREF: _rsa_main+68Ao
aPvkWeak	db '-pvk-weak',0        ; DATA XREF: _rsa_main+69Eo
aPvkNone	db '-pvk-none',0        ; DATA XREF: _rsa_main+6B2o
aNoout_5	db '-noout',0           ; DATA XREF: _rsa_main+6C6o
aText_4		db '-text',0            ; DATA XREF: _rsa_main+6DAo
aModulus_1	db '-modulus',0         ; DATA XREF: _rsa_main+6EEo
aCheck_1	db '-check',0           ; DATA XREF: _rsa_main+702o
aUnknownOptio_8	db 'unknown option %s',0Ah,0 ; DATA XREF: _rsa_main+39Co
aErrorGetting_4	db 'Error getting passwords',0Ah,0 ; DATA XREF: _rsa_main:loc_414780o
		align 4
aOnlyPrivateKey	db 'Only private keys can be checked',0Ah,0
					; DATA XREF: _rsa_main:loc_414D75o
aPublicKey	db 'Public Key',0       ; DATA XREF: _rsa_main:loc_414C87o
aPrivateKey_0	db 'Private Key',0      ; DATA XREF: _rsa_main:loc_4146ABo
aModulus_2	db 'Modulus=',0         ; DATA XREF: _rsa_main:loc_414DCEo
asc_45EFBE	db 0Ah,0		; DATA XREF: _rsa_main+92Do
aRsaKeyOk	db 'RSA key ok',0Ah,0   ; DATA XREF: _rsa_main:loc_415040o
aRsaKeyErrorS	db 'RSA key error: %s',0Ah,0 ; DATA XREF: _rsa_main+9A4o
aWritingRsaKey	db 'writing RSA key',0Ah,0 ; DATA XREF: _rsa_main:loc_414CDCo
aRsa_c		db 'rsa.c',0            ; DATA XREF: _rsa_main+AE8o
aMemoryAlloca_2	db 'Memory allocation failure',0Ah,0 ; DATA XREF: _rsa_main:loc_41516Ao
		align 4
aBadOutputFor_5	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _rsa_main+862o
aUnableToWriteK	db 'unable to write key',0Ah,0 ; DATA XREF: _rsa_main+AA4o
		align 4
aIn_9		db '-in',0              ; DATA XREF: _rsautl_main+DDo
aOut_11		db '-out',0             ; DATA XREF: _rsautl_main+EBo
aInkey		db '-inkey',0           ; DATA XREF: _rsautl_main:loc_4153A0o
aPassin_3	db '-passin',0          ; DATA XREF: _rsautl_main:loc_4153D0o
aKeyform_2	db '-keyform',0         ; DATA XREF: _rsautl_main:loc_415400o
aEngine_9	db '-engine',0          ; DATA XREF: _rsautl_main+204o
aPubin_0	db '-pubin',0           ; DATA XREF: _rsautl_main:loc_4156D0o
aCertin		db '-certin',0          ; DATA XREF: _rsautl_main+4D4o
aAsn1parse	db '-asn1parse',0       ; DATA XREF: _rsautl_main+4E8o
aHexdump	db '-hexdump',0         ; DATA XREF: _rsautl_main+4FCo
aRaw		db '-raw',0             ; DATA XREF: _rsautl_main+510o
aOaep		db '-oaep',0            ; DATA XREF: _rsautl_main+524o
aSsl		db '-ssl',0             ; DATA XREF: _rsautl_main+538o
aPkcs		db '-pkcs',0            ; DATA XREF: _rsautl_main+54Co
aX931		db '-x931',0            ; DATA XREF: _rsautl_main+560o
; char aSign_0[]
aSign_0		db '-sign',0            ; DATA XREF: _rsautl_main+578o
; char aVerify_2[]
aVerify_2	db '-verify',0          ; DATA XREF: _rsautl_main+594o
; char aRev[]
aRev		db '-rev',0             ; DATA XREF: _rsautl_main+5B0o
; char aEncrypt[]
aEncrypt	db '-encrypt',0         ; DATA XREF: _rsautl_main+5CCo
; char aDecrypt[]
aDecrypt	db '-decrypt',0         ; DATA XREF: _rsautl_main+5F3o
aUsageRsautlOpt	db 'Usage: rsautl [options]',0Ah,0 ; DATA XREF: _rsautl_main:loc_415450o
aInFileInputF_0	db '-in file        input file',0Ah,0 ; DATA XREF: _rsautl_main+255o
aOutFileOutpu_0	db '-out file       output file',0Ah,0 ; DATA XREF: _rsautl_main+26Ao
aInkeyFileInp_0	db '-inkey file     input key',0Ah,0 ; DATA XREF: _rsautl_main+27Fo
		align 10h
aKeyformArgPr_0	db '-keyform arg    private key format - default PEM',0Ah,0
					; DATA XREF: _rsautl_main+294o
		align 4
aPubinInputIsAn	db '-pubin          input is an RSA public',0Ah,0
					; DATA XREF: _rsautl_main+2A9o
aCertinInputI_0	db '-certin         input is a certificate carrying an RSA public key'
					; DATA XREF: _rsautl_main+2BEo
		db 0Ah,0
		align 10h
aSslUseSslV2Pad	db '-ssl            use SSL v2 padding',0Ah,0 ; DATA XREF: _rsautl_main+2D3o
aRawUseNoPaddin	db '-raw            use no padding',0Ah,0 ; DATA XREF: _rsautl_main+2E8o
aPkcsUsePkcs1V1	db '-pkcs           use PKCS#1 v1.5 padding (default)',0Ah,0
					; DATA XREF: _rsautl_main+2FDo
		align 4
aOaepUsePkcs1Oa	db '-oaep           use PKCS#1 OAEP',0Ah,0 ; DATA XREF: _rsautl_main+312o
		align 4
aSignSignWith_0	db '-sign           sign with private key',0Ah,0
					; DATA XREF: _rsautl_main+327o
		align 4
aVerifyVerify_0	db '-verify         verify with public key',0Ah,0
					; DATA XREF: _rsautl_main+33Co
aEncryptEncry_0	db '-encrypt        encrypt with public key',0Ah,0
					; DATA XREF: _rsautl_main+351o
		align 4
aDecryptDecry_0	db '-decrypt        decrypt with private key',0Ah,0
					; DATA XREF: _rsautl_main+366o
		align 4
aHexdumpHexDu_0	db '-hexdump        hex dump output',0Ah,0 ; DATA XREF: _rsautl_main+37Bo
		align 4
aEngineEUseEn_7	db '-engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _rsautl_main+390o
		align 4
aPassinArgPas_0	db '-passin arg    pass phrase source',0Ah,0 ; DATA XREF: _rsautl_main+3A5o
		align 4
aAPrivateKeyIsN	db 'A private key is needed for this operation',0Ah,0
					; DATA XREF: _rsautl_main+131o
aErrorGetting_5	db 'Error getting password',0Ah,0 ; DATA XREF: _rsautl_main+4A4o
aPrivateKey_1	db 'Private Key',0      ; DATA XREF: _rsautl_main:loc_415AE0o
aPublicKey_0	db 'Public Key',0       ; DATA XREF: _rsautl_main:loc_415B20o
aCertificate_0	db 'Certificate',0      ; DATA XREF: _rsautl_main:loc_41589Eo
aErrorGettingRs	db 'Error getting RSA key',0Ah,0 ; DATA XREF: _rsautl_main:loc_415D10o
aRb_3		db 'rb',0               ; DATA XREF: _rsautl_main+705o
aErrorReading_0	db 'Error Reading Input File',0Ah,0 ; DATA XREF: _rsautl_main:loc_415D60o
aWb_2		db 'wb',0               ; DATA XREF: _rsautl_main+72Bo
aErrorReadingOu	db 'Error Reading Output File',0Ah,0 ; DATA XREF: _rsautl_main:loc_415D39o
aRsautl_c	db 'rsautl.c',0         ; DATA XREF: _rsautl_main+75Co
					; _rsautl_main+778o
aErrorReading_1	db 'Error reading input Data',0Ah,0 ; DATA XREF: _rsautl_main:loc_415E06o
aRsaOperationEr	db 'RSA operation error',0Ah,0 ; DATA XREF: _rsautl_main+AD0o
aOutOfMemory_3	db 'Out of memory',0Ah,0 ; DATA XREF: _rsautl_main+954o
					; _rsautl_main:loc_415D6Ao
aInform_7	db '-inform',0          ; DATA XREF: _dsa_main+2C9o
aSOptionsInfi_5	db '%s [options] <infile >outfile',0Ah,0 ; DATA XREF: _dsa_main+388o
aWhereOptions_7	db 'where options are',0Ah,0 ; DATA XREF: _dsa_main+39Do
		align 4
aInformArgInp_6	db ' -inform arg     input format - DER or PEM',0Ah,0
					; DATA XREF: _dsa_main+3B2o
aOutformArgOu_5	db ' -outform arg    output format - DER or PEM',0Ah,0
					; DATA XREF: _dsa_main+3C7o
aInArgInputFi_6	db ' -in arg         input file',0Ah,0 ; DATA XREF: _dsa_main+3DCo
		align 4
aPassinArgInp_0	db ' -passin arg     input file pass phrase source',0Ah,0
					; DATA XREF: _dsa_main+3F1o
aOutArgOutput_6	db ' -out arg        output file',0Ah,0 ; DATA XREF: _dsa_main+406o
		align 4
aPassoutArgOu_0	db ' -passout arg    output file pass phrase source',0Ah,0
					; DATA XREF: _dsa_main+41Bo
		align 10h
aEngineEUseEn_8	db ' -engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _dsa_main+430o
aDesEncryptPe_0	db ' -des            encrypt PEM output with cbc des',0Ah,0
					; DATA XREF: _dsa_main+445o
		align 10h
aDes3EncryptP_0	db ' -des3           encrypt PEM output with ede cbc des using 168 bi'
					; DATA XREF: _dsa_main+45Ao
		db 't key',0Ah,0
aIdeaEncryptP_0	db ' -idea           encrypt PEM output with cbc idea',0Ah,0
					; DATA XREF: _dsa_main+46Fo
aAes128Aes192_0	db ' -aes128, -aes192, -aes256',0Ah,0 ; DATA XREF: _dsa_main+484o
		align 4
aEncryptPemOu_1	db '                 encrypt PEM output with cbc aes',0Ah,0
					; DATA XREF: _dsa_main+499o
		align 4
aCamellia128C_0	db ' -camellia128, -camellia192, -camellia256',0Ah,0
					; DATA XREF: _dsa_main+4AEo
		align 4
aEncryptPemOu_2	db '                 encrypt PEM output with cbc camellia',0Ah,0
					; DATA XREF: _dsa_main+4C3o
		align 10h
aSeedEncryptP_0	db ' -seed           encrypt PEM output with cbc seed',0Ah,0
					; DATA XREF: _dsa_main+4D8o
		align 4
aTextPrintThe_0	db ' -text           print the key in text',0Ah,0
					; DATA XREF: _dsa_main+4EDo
aNooutDonTPri_0	db ' -noout          don',27h,'t print key out',0Ah,0
					; DATA XREF: _dsa_main+502o
		align 4
aModulusPrint_0	db ' -modulus        print the DSA public value',0Ah,0
					; DATA XREF: _dsa_main+517o
aOutform_6	db '-outform',0         ; DATA XREF: _dsa_main+2D7o
aIn_10		db '-in',0              ; DATA XREF: _dsa_main:loc_416160o
aOut_12		db '-out',0             ; DATA XREF: _dsa_main:loc_416180o
aPassin_4	db '-passin',0          ; DATA XREF: _dsa_main:loc_4163B0o
aPassout_1	db '-passout',0         ; DATA XREF: _dsa_main:loc_4163E0o
aEngine_10	db '-engine',0          ; DATA XREF: _dsa_main+5A0o
aPvkStrong_0	db '-pvk-strong',0      ; DATA XREF: _dsa_main:loc_416436o
aPvkWeak_0	db '-pvk-weak',0        ; DATA XREF: _dsa_main+5FAo
aPvkNone_0	db '-pvk-none',0        ; DATA XREF: _dsa_main+60Eo
aNoout_6	db '-noout',0           ; DATA XREF: _dsa_main+622o
aText_5		db '-text',0            ; DATA XREF: _dsa_main+636o
aModulus_3	db '-modulus',0         ; DATA XREF: _dsa_main+64Ao
aPubin_1	db '-pubin',0           ; DATA XREF: _dsa_main+65Eo
aPubout_0	db '-pubout',0          ; DATA XREF: _dsa_main+672o
aUnknownOptio_9	db 'unknown option %s',0Ah,0 ; DATA XREF: _dsa_main+35Co
aErrorGetting_6	db 'Error getting passwords',0Ah,0 ; DATA XREF: _dsa_main:loc_416549o
aReadDsaKey	db 'read DSA key',0Ah,0 ; DATA XREF: _dsa_main:loc_415FEBo
aPublicKey_1	db 'Public Key',0       ; DATA XREF: _dsa_main+1BCo
aPrivateKey_2	db 'Private Key',0      ; DATA XREF: _dsa_main:loc_416572o
aUnableToLoadKe	db 'unable to load Key',0Ah,0 ; DATA XREF: _dsa_main:loc_4165B2o
aPublicKey_2	db 'Public Key=',0      ; DATA XREF: _dsa_main+863o
aWritingDsaKey	db 'writing DSA key',0Ah,0 ; DATA XREF: _dsa_main:loc_41663Do
		align 4
aBadOutputFor_6	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _dsa_main+828o
aUnableToWrit_3	db 'unable to write private key',0Ah,0 ; DATA XREF: _dsa_main:loc_4168D6o
		align 4
aInform_8	db '-inform',0          ; DATA XREF: _dsaparam_main+2E9o
aOutform_7	db '-outform',0         ; DATA XREF: _dsaparam_main+2F7o
aIn_11		db '-in',0              ; DATA XREF: _dsaparam_main:loc_416CE0o
aOut_13		db '-out',0             ; DATA XREF: _dsaparam_main:loc_416D00o
aEngine_11	db '-engine',0          ; DATA XREF: _dsaparam_main:loc_416E80o
aText_6		db '-text',0            ; DATA XREF: _dsaparam_main:loc_416EB0o
aC_1		db '-C',0               ; DATA XREF: _dsaparam_main+510o
aGenkey		db '-genkey',0          ; DATA XREF: _dsaparam_main+520o
aRand_3		db '-rand',0            ; DATA XREF: _dsaparam_main+534o
aNoout_7	db '-noout',0           ; DATA XREF: _dsaparam_main:loc_416F9Fo
; char aD_3[]
aD_3		db '%d',0               ; DATA XREF: _dsaparam_main+8DAo
aUnknownOpti_10	db 'unknown option %s',0Ah,0 ; DATA XREF: _dsaparam_main+37Co
		align 4
aSOptionsBitsIn	db '%s [options] [bits] <infile >outfile',0Ah,0
					; DATA XREF: _dsaparam_main+3A8o
aWhereOptions_8	db 'where options are',0Ah,0 ; DATA XREF: _dsaparam_main+3BDo
		align 10h
aInformArgInp_7	db ' -inform arg   input format - DER or PEM',0Ah,0
					; DATA XREF: _dsaparam_main+3D2o
		align 4
aOutformArgOu_6	db ' -outform arg  output format - DER or PEM',0Ah,0
					; DATA XREF: _dsaparam_main+3E7o
aInArgInputFi_7	db ' -in arg       input file',0Ah,0 ; DATA XREF: _dsaparam_main+3FCo
aOutArgOutput_7	db ' -out arg      output file',0Ah,0 ; DATA XREF: _dsaparam_main+411o
aTextPrintAsTex	db ' -text         print as text',0Ah,0 ; DATA XREF: _dsaparam_main+426o
aCOutputCCode_1	db ' -C            Output C code',0Ah,0 ; DATA XREF: _dsaparam_main+43Bo
aNooutNoOutpu_1	db ' -noout        no output',0Ah,0 ; DATA XREF: _dsaparam_main+450o
aGenkeyGenerate	db ' -genkey       generate a DSA key',0Ah,0
					; DATA XREF: _dsaparam_main+465o
		align 4
aRandFilesToUse	db ' -rand         files to use for random number input',0Ah,0
					; DATA XREF: _dsaparam_main+47Ao
		align 10h
aEngineEUseEn_9	db ' -engine e     use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _dsaparam_main+48Fo
		align 4
aNumberNumberOf	db ' number        number of bits to use for generating private key',0Ah
					; DATA XREF: _dsaparam_main+4A4o
		db 0
aLdSemiRandom_1	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _dsaparam_main+7ACo
aDsaparam_c	db 'dsaparam.c',0       ; DATA XREF: _dsaparam_main+6A1o
					; _dsaparam_main+805o ...
aNeed_rand	db 'need_rand',0        ; DATA XREF: _dsaparam_main+6A9o
					; _dsaparam_main+80Do
aErrorAllocatin	db 'Error allocating DSA object',0Ah,0
					; DATA XREF: _dsaparam_main:loc_41759Do
		align 10h
aGeneratingDs_0	db 'Generating DSA parameters, %d bit long prime',0Ah,0
					; DATA XREF: _dsaparam_main+1CCo
aThisCouldTakeS	db 'This could take some time',0Ah,0 ; DATA XREF: _dsaparam_main+1E1o
		align 4
aErrorDsaKeyGen	db 'Error, DSA key generation failed',0Ah,0 ; DATA XREF: _dsaparam_main+82Bo
aBadInputForm_5	db 'bad input format specified',0Ah,0 ; DATA XREF: _dsaparam_main+7DCo
		align 4
aUnableToLoad_2	db 'unable to load DSA parameters',0Ah,0 ; DATA XREF: _dsaparam_main+73Eo
; char aOpenssl_mall_2[]
aOpenssl_mall_2	db 'OPENSSL_malloc',0   ; DATA XREF: _dsaparam_main:loc_417615o
		align 4
; char aStaticUnsign_4[]
aStaticUnsign_4	db 'static unsigned char dsa%d_p[]={',0 ; DATA XREF: _dsaparam_main+976o
; char asc_45FCFD[]
asc_45FCFD	db 0Ah			; DATA XREF: _dsaparam_main:loc_4173C3o
					; _dsaparam_main:loc_417460o
		db 9,'};',0
		align 4
; char aStaticUnsign_5[]
aStaticUnsign_5	db 'static unsigned char dsa%d_q[]={',0 ; DATA XREF: _dsaparam_main+A3Eo
; char asc_45FD25[]
asc_45FD25	db 0Ah			; DATA XREF: _dsaparam_main+9D8o
					; _dsaparam_main+A9Eo ...
		db 9,0
; char a0x02x_4[]
a0x02x_4	db '0x%02X,',0          ; DATA XREF: _dsaparam_main+9A7o
					; _dsaparam_main+A6Do ...
; char aStaticUnsign_6[]
aStaticUnsign_6	db 'static unsigned char dsa%d_g[]={',0 ; DATA XREF: _dsaparam_main+ADBo
; char asc_45FD51[]
asc_45FD51	db 0Ah			; DATA XREF: _dsaparam_main:loc_417500o
		db 9,'};',0Ah,0
; char aDsaGet_dsaD[]
aDsaGet_dsaD	db 'DSA *get_dsa%d()',0Ah ; DATA XREF: _dsaparam_main+B64o
		db 9,'{',0Ah,0
; char aDsaDsa[]
aDsaDsa		db 9,'DSA *dsa;',0Ah,0  ; DATA XREF: _dsaparam_main+B70o
; char aIfDsaDsa_newNu[]
aIfDsaDsa_newNu	db 9,'if ((dsa=DSA_new()) == NULL) return(NULL);',0
					; DATA XREF: _dsaparam_main+B7Co
; char aDsaPBn_bin2bnD[]
aDsaPBn_bin2bnD	db 9,'dsa->p=BN_bin2bn(dsa%d_p,sizeof(dsa%d_p),NULL);',0Ah,0
					; DATA XREF: _dsaparam_main+B90o
		align 4
; char aDsaQBn_bin2bnD[]
aDsaQBn_bin2bnD	db 9,'dsa->q=BN_bin2bn(dsa%d_q,sizeof(dsa%d_q),NULL);',0Ah,0
					; DATA XREF: _dsaparam_main+BA4o
		align 4
; char aDsaGBn_bin2bnD[]
aDsaGBn_bin2bnD	db 9,'dsa->g=BN_bin2bn(dsa%d_g,sizeof(dsa%d_g),NULL);',0Ah,0
					; DATA XREF: _dsaparam_main+BB8o
		align 10h
; char aIfDsaPNullDsaQ[]
aIfDsaPNullDsaQ	db 9,'if ((dsa->p == NULL) || (dsa->q == NULL) || (dsa->g == NULL))',0
					; DATA XREF: _dsaparam_main+BC4o
		align 10h
; char aDsa_freeDsaRet[]
aDsa_freeDsaRet	db 9,9,'{ DSA_free(dsa); return(NULL); }',0 ; DATA XREF: _dsaparam_main+BD0o
; char aReturnDsa[]
aReturnDsa	db 9,'return(dsa);',0Ah ; DATA XREF: _dsaparam_main+BDCo
		db 9,'}',0
aBadOutputFor_7	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _dsaparam_main+270o
					; _dsaparam_main+6EDo
		align 10h
aUnableToWrit_4	db 'unable to write DSA parameters',0Ah,0 ; DATA XREF: _dsaparam_main+C1Bo
aInform_9	db '-inform',0          ; DATA XREF: _ec_main+2F1o
aSOptionsInfi_6	db '%s [options] <infile >outfile',0Ah,0 ; DATA XREF: _ec_main+3B8o
aWhereOptions_9	db 'where options are',0Ah,0 ; DATA XREF: _ec_main+3CDo
		align 4
aInformArgInp_8	db ' -inform arg     input format - DER or PEM',0Ah,0
					; DATA XREF: _ec_main+3E2o
aOutformArgOu_7	db ' -outform arg    output format - DER or PEM',0Ah,0
					; DATA XREF: _ec_main+3F7o
aInArgInputFi_8	db ' -in arg         input file',0Ah,0 ; DATA XREF: _ec_main+40Co
		align 4
aPassinArgInp_1	db ' -passin arg     input file pass phrase source',0Ah,0
					; DATA XREF: _ec_main+421o
aOutArgOutput_8	db ' -out arg        output file',0Ah,0 ; DATA XREF: _ec_main+436o
		align 4
aPassoutArgOu_1	db ' -passout arg    output file pass phrase source',0Ah,0
					; DATA XREF: _ec_main+44Bo
		align 4
aEngineEUseE_10	db ' -engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _ec_main+460o
aDesEncryptPe_1	db ' -des            encrypt PEM output, instead of ',27h,'des',27h,' every'
					; DATA XREF: _ec_main+475o
		db ' other ',0Ah
		db '                 cipher supported by OpenSSL can be used',0Ah,0
		align 4
aTextPrintThe_1	db ' -text           print the key',0Ah,0 ; DATA XREF: _ec_main+48Ao
aNooutDonTPri_1	db ' -noout          don',27h,'t print key out',0Ah,0
					; DATA XREF: _ec_main+49Fo
		align 4
aParam_outPrint	db ' -param_out      print the elliptic curve parameters',0Ah,0
					; DATA XREF: _ec_main+4B4o
		align 4
aConv_formArgSp	db ' -conv_form arg  specifies the point conversion form ',0Ah,0
					; DATA XREF: _ec_main+4C9o
		align 4
aPossibleValues	db '                 possible values: compressed',0Ah,0
					; DATA XREF: _ec_main+4DEo
		align 4
aUncompressedDe	db '                                  uncompressed (default)',0Ah,0
					; DATA XREF: _ec_main+4F3o
		align 4
aHybrid		db '                                   hybrid',0Ah,0
					; DATA XREF: _ec_main+508o
		align 4
aParam_encArgSp	db ' -param_enc arg  specifies the way the ec parameters are encoded',0Ah
					; DATA XREF: _ec_main+51Do
		db 0
		align 4
aInTheAsn1DerEn	db '                 in the asn1 der encoding',0Ah,0
					; DATA XREF: _ec_main+532o
		align 4
aPossibleValu_0	db '                 possible values: named_curve (default)',0Ah,0
					; DATA XREF: _ec_main+547o
		align 10h
aExplicit	db '                                  explicit',0Ah,0
					; DATA XREF: _ec_main+55Co
aOutform_8	db '-outform',0         ; DATA XREF: _ec_main+2FFo
aIn_12		db '-in',0              ; DATA XREF: _ec_main:loc_4179B0o
aOut_14		db '-out',0             ; DATA XREF: _ec_main:loc_4179D0o
aPassin_5	db '-passin',0          ; DATA XREF: _ec_main:loc_417C20o
aPassout_2	db '-passout',0         ; DATA XREF: _ec_main:loc_417C50o
aEngine_12	db '-engine',0          ; DATA XREF: _ec_main+5F0o
aNoout_8	db '-noout',0           ; DATA XREF: _ec_main:loc_417CA6o
aText_7		db '-text',0            ; DATA XREF: _ec_main+64Ao
aConv_form	db '-conv_form',0       ; DATA XREF: _ec_main+65Eo
aCompressed	db 'compressed',0       ; DATA XREF: _ec_main+67Fo
aUncompressed	db 'uncompressed',0     ; DATA XREF: _ec_main+693o
aHybrid_0	db 'hybrid',0           ; DATA XREF: _ec_main+6A7o
aParam_enc	db '-param_enc',0       ; DATA XREF: _ec_main:loc_417E4Do
aNamed_curve	db 'named_curve',0      ; DATA XREF: _ec_main+7FEo
aExplicit_0	db 'explicit',0         ; DATA XREF: _ec_main+812o
aParam_out	db '-param_out',0       ; DATA XREF: _ec_main:loc_417F04o
aPubin_2	db '-pubin',0           ; DATA XREF: _ec_main+8A8o
aPubout_1	db '-pubout',0          ; DATA XREF: _ec_main+8BCo
aUnknownOpti_11	db 'unknown option %s',0Ah,0 ; DATA XREF: _ec_main+38Co
aErrorGetting_7	db 'Error getting passwords',0Ah,0 ; DATA XREF: _ec_main:loc_417D99o
aReadEcKey	db 'read EC key',0Ah,0  ; DATA XREF: _ec_main:loc_417829o
		align 4
aBadInputForm_6	db 'bad input format specified for key',0Ah,0
					; DATA XREF: _ec_main:loc_417EABo
aUnableToLoad_3	db 'unable to load Key',0Ah,0 ; DATA XREF: _ec_main:loc_4180D3o
aWritingEcKey	db 'writing EC key',0Ah,0 ; DATA XREF: _ec_main:loc_417DC2o
aBadOutputFor_8	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _ec_main:loc_4180EFo
aUnableToWrit_5	db 'unable to write private key',0Ah,0 ; DATA XREF: _ec_main+7B1o
		align 4
aStaticUnsigned	db 'static unsigned char %s_%d[] = {',0 ; DATA XREF: _ecparam_print_var+1Bo
a0x00		db 0Ah			; DATA XREF: _ecparam_print_var+31o
		db 9,'0x00',0
asc_4604AC	db 0Ah			; DATA XREF: _ecparam_print_var+6Do
					; _ecparam_print_var+A6o
		db 9,0
a0x02x		db '0x%02X,',0          ; DATA XREF: _ecparam_print_var+85o
a0x02x_0	db '0x%02X',0           ; DATA XREF: _ecparam_print_var+BEo
asc_4604BE	db 0Ah			; DATA XREF: _ecparam_print_var:loc_454216o
		db 9,'};',0Ah
		db 0Ah,0
		align 4
aCurveDescripti	db 'CURVE DESCRIPTION NOT AVAILABLE',0 ; DATA XREF: _ecparam_main+940o
byte_4604E8	db 0			; DATA XREF: _ecparam_main:loc_418B75o
aInform_10	db '-inform',0          ; DATA XREF: _ecparam_main+399o
		align 4
aSOptionsInfi_7	db '%s [options] <infile >outfile',0Ah,0 ; DATA XREF: _ecparam_main+518o
aWhereOption_10	db 'where options are',0Ah,0 ; DATA XREF: _ecparam_main+52Do
		align 4
aInformArgInp_9	db ' -inform arg       input format - default PEM (DER or PEM)',0Ah,0
					; DATA XREF: _ecparam_main+542o
aOutformArgOu_8	db ' -outform arg      output format - default PEM',0Ah,0
					; DATA XREF: _ecparam_main+557o
aInArgInputFi_9	db ' -in  arg          input file  - default stdin',0Ah,0
					; DATA XREF: _ecparam_main+56Co
aOutArgOutput_9	db ' -out arg          output file - default stdout',0Ah,0
					; DATA XREF: _ecparam_main+581o
		align 4
aNooutDoNotPrin	db ' -noout            do not print the ec parameter',0Ah,0
					; DATA XREF: _ecparam_main+596o
		align 4
aTextPrintTheEc	db ' -text             print the ec parameters in text form',0Ah,0
					; DATA XREF: _ecparam_main+5ABo
		align 4
aCheckValidateT	db ' -check            validate the ec parameters',0Ah,0
					; DATA XREF: _ecparam_main+5C0o
		align 4
aCPrintACFuncti	db ' -C                print a ',27h,'C',27h,' function creating the parame'
					; DATA XREF: _ecparam_main+5D5o
		db 'ters',0Ah,0
		align 4
aNameArgUseTheE	db ' -name arg         use the ec parameters with ',27h,'short name',27h,' '
					; DATA XREF: _ecparam_main+5EAo
		db 'name',0Ah,0
		align 10h
aList_curvesPri	db ' -list_curves      prints a list of all currently available curve'
					; DATA XREF: _ecparam_main+5FFo
		db ' ',27h,'short names',27h,0Ah,0
		align 4
aConv_formArg_0	db ' -conv_form arg    specifies the point conversion form ',0Ah,0
					; DATA XREF: _ecparam_main+614o
		align 10h
aPossibleValu_1	db '                   possible values: compressed',0Ah,0
					; DATA XREF: _ecparam_main+629o
aUncompressed_0	db '                                    uncompressed (default)',0Ah,0
					; DATA XREF: _ecparam_main+63Eo
aHybrid_1	db '                                    hybrid',0Ah,0
					; DATA XREF: _ecparam_main+653o
aParam_encArg_0	db ' -param_enc arg    specifies the way the ec parameters are encode'
					; DATA XREF: _ecparam_main+668o
		db 'd',0Ah,0
aInTheAsn1Der_0	db '                   in the asn1 der encoding',0Ah,0
					; DATA XREF: _ecparam_main+67Do
		align 4
aPossibleValu_2	db '                   possible values: named_curve (default)',0Ah,0
					; DATA XREF: _ecparam_main+692o
		align 4
aExplicit_1	db '                                    explicit',0Ah,0
					; DATA XREF: _ecparam_main+6A7o
		align 4
aNo_seedIfExpli	db ' -no_seed          if ',27h,'explicit',27h,' parameters are chosen do n'
					; DATA XREF: _ecparam_main+6BCo
		db 'ot use the seed',0Ah,0
aGenkeyGenera_0	db ' -genkey           generate ec key',0Ah,0
					; DATA XREF: _ecparam_main+6D1o
aRandFileFilesT	db ' -rand file        files to use for random number input',0Ah,0
					; DATA XREF: _ecparam_main+6E6o
		align 4
aEngineEUseE_11	db ' -engine e         use engine e, possibly a hardware device',0Ah,0
					; DATA XREF: _ecparam_main+6FBo
aOutform_9	db '-outform',0         ; DATA XREF: _ecparam_main+3A7o
aIn_13		db '-in',0              ; DATA XREF: _ecparam_main:loc_4185B0o
aOut_15		db '-out',0             ; DATA XREF: _ecparam_main:loc_4185E0o
aText_8		db '-text',0            ; DATA XREF: _ecparam_main:loc_418610o
aC_2		db '-C',0               ; DATA XREF: _ecparam_main:loc_418670o
aCheck_2	db '-check',0           ; DATA XREF: _ecparam_main+4B4o
aName_0		db '-name',0            ; DATA XREF: _ecparam_main+4C8o
aList_curves	db '-list_curves',0     ; DATA XREF: _ecparam_main:loc_418958o
aConv_form_0	db '-conv_form',0       ; DATA XREF: _ecparam_main+798o
aCompressed_0	db 'compressed',0       ; DATA XREF: _ecparam_main+7B9o
aUncompressed_1	db 'uncompressed',0     ; DATA XREF: _ecparam_main+7CDo
aHybrid_2	db 'hybrid',0           ; DATA XREF: _ecparam_main+7E1o
aParam_enc_0	db '-param_enc',0       ; DATA XREF: _ecparam_main:loc_418B17o
aNamed_curve_0	db 'named_curve',0      ; DATA XREF: _ecparam_main+968o
aExplicit_2	db 'explicit',0         ; DATA XREF: _ecparam_main+97Co
aNo_seed	db '-no_seed',0         ; DATA XREF: _ecparam_main:loc_418BFDo
aNoout_9	db '-noout',0           ; DATA XREF: _ecparam_main+A41o
aGenkey_0	db '-genkey',0          ; DATA XREF: _ecparam_main+A55o
aRand_4		db '-rand',0            ; DATA XREF: _ecparam_main+A69o
aEngine_13	db '-engine',0          ; DATA XREF: _ecparam_main:loc_4190CDo
aUnknownOpti_12	db 'unknown option %s',0Ah,0 ; DATA XREF: _ecparam_main+4F2o
aEcparam_c	db 'ecparam.c',0        ; DATA XREF: _ecparam_main+895o
					; _ecparam_main+1109o ...
a10s		db '  %-10s: ',0        ; DATA XREF: _ecparam_main+8FCo
aS_7		db '%s',0Ah,0           ; DATA XREF: _ecparam_main+910o
aSecp192r1	db 'secp192r1',0        ; DATA XREF: _ecparam_main+1C0o
		align 4
aUsingCurveNa_0	db 'using curve name prime192v1 instead of secp192r1',0Ah,0
					; DATA XREF: _ecparam_main:loc_418BDEo
aSecp256r1	db 'secp256r1',0        ; DATA XREF: _ecparam_main+1D2o
aUsingCurveName	db 'using curve name prime256v1 instead of secp256r1',0Ah,0
					; DATA XREF: _ecparam_main+1E8o
aUnknownCurveNa	db 'unknown curve name (%s)',0Ah,0 ; DATA XREF: _ecparam_main+9C7o
aUnableToCreate	db 'unable to create curve (%s)',0Ah,0 ; DATA XREF: _ecparam_main+C04o
aBadInputForm_7	db 'bad input format specified',0Ah,0 ; DATA XREF: _ecparam_main+AFEo
aUnableToLoadEl	db 'unable to load elliptic curve parameters',0Ah,0
					; DATA XREF: _ecparam_main+DAAo
		align 4
aCheckingEllipt	db 'checking elliptic curve parameters: ',0
					; DATA XREF: _ecparam_main:loc_418EA0o
aFailed		db 'failed',0Ah,0       ; DATA XREF: _ecparam_main+CF9o
aOk_0		db 'ok',0Ah,0           ; DATA XREF: _ecparam_main:loc_418F36o
; char aOpenssl_mall_3[]
aOpenssl_mall_3	db 'OPENSSL_malloc',0   ; DATA XREF: _ecparam_main:loc_418F10o
					; _ecparam_main:loc_4195B1o
aEc_p		db 'ec_p',0             ; DATA XREF: _ecparam_main+1134o
aEc_a		db 'ec_a',0             ; DATA XREF: _ecparam_main+114Fo
aEc_b		db 'ec_b',0             ; DATA XREF: _ecparam_main+116Ao
aEc_gen		db 'ec_gen',0           ; DATA XREF: _ecparam_main+1185o
aEc_order	db 'ec_order',0         ; DATA XREF: _ecparam_main+11A0o
aEc_cofactor	db 'ec_cofactor',0      ; DATA XREF: _ecparam_main+11BBo
asc_460C43	db 0Ah			; DATA XREF: _ecparam_main+11CBo
		db 0Ah,0
		align 4
aEc_groupGet_ec	db 'EC_GROUP *get_ec_group_%d(void)',0Ah ; DATA XREF: _ecparam_main+11DFo
		db 9,'{',0Ah,0
aIntOk0		db 9,'int ok=0;',0Ah,0  ; DATA XREF: _ecparam_main+11EFo
aEc_groupGroupN	db 9,'EC_GROUP *group = NULL;',0Ah,0 ; DATA XREF: _ecparam_main+11FFo
aEc_pointPointN	db 9,'EC_POINT *point = NULL;',0Ah,0 ; DATA XREF: _ecparam_main+120Fo
aBignumTmp_1Nul	db 9,'BIGNUM   *tmp_1 = NULL, *tmp_2 = NULL, *tmp_3 = NULL;',0Ah
					; DATA XREF: _ecparam_main+121Fo
		db 0Ah,0
		align 4
aIfTmp_1Bn_bin2	db 9,'if ((tmp_1 = BN_bin2bn(ec_p_%d, sizeof(ec_p_%d), NULL)) == NULL)'
					; DATA XREF: _ecparam_main+1237o
		db 0Ah
		db 9,9,'goto err;',0Ah,0
		align 4
aIfTmp_2Bn_bin2	db 9,'if ((tmp_2 = BN_bin2bn(ec_a_%d, sizeof(ec_a_%d), NULL)) == NULL)'
					; DATA XREF: _ecparam_main+124Fo
		db 0Ah
		db 9,9,'goto err;',0Ah,0
		align 4
aIfTmp_3Bn_bin2	db 9,'if ((tmp_3 = BN_bin2bn(ec_b_%d, sizeof(ec_b_%d), NULL)) == NULL)'
					; DATA XREF: _ecparam_main+1267o
		db 0Ah
		db 9,9,'goto err;',0Ah,0
		align 4
aIfGroupEc_grou	db 9,'if ((group = EC_GROUP_new_curve_GFp(tmp_1, tmp_2, tmp_3, NULL)) '
					; DATA XREF: _ecparam_main+1277o
		db '== NULL)',0Ah
		db 9,9,'goto err;',0Ah
		db 0Ah,0
aBuildGenerator	db 9,'/* build generator */',0Ah,0 ; DATA XREF: _ecparam_main+1287o
aIfTmp_1Bn_bi_0	db 9,'if ((tmp_1 = BN_bin2bn(ec_gen_%d, sizeof(ec_gen_%d), tmp_1)) == '
					; DATA XREF: _ecparam_main+129Fo
		db 'NULL)',0Ah
		db 9,9,'goto err;',0Ah,0
aPointEc_point_	db 9,'point = EC_POINT_bn2point(group, tmp_1, NULL, NULL);',0Ah,0
					; DATA XREF: _ecparam_main+12AFo
		align 4
aIfPointNullGot	db 9,'if (point == NULL)',0Ah ; DATA XREF: _ecparam_main+12BFo
		db 9,9,'goto err;',0Ah,0
		align 4
aIfTmp_2Bn_bi_0	db 9,'if ((tmp_2 = BN_bin2bn(ec_order_%d, sizeof(ec_order_%d), tmp_2))'
					; DATA XREF: _ecparam_main+12D7o
		db ' == NULL)',0Ah
		db 9,9,'goto err;',0Ah,0
aIfTmp_3Bn_bi_0	db 9,'if ((tmp_3 = BN_bin2bn(ec_cofactor_%d, sizeof(ec_cofactor_%d), t'
					; DATA XREF: _ecparam_main+12EFo
		db 'mp_3)) == NULL)',0Ah
		db 9,9,'goto err;',0Ah,0
		align 10h
aIfEc_group_set	db 9,'if (!EC_GROUP_set_generator(group, point, tmp_2, tmp_3))',0Ah
					; DATA XREF: _ecparam_main+12FFo
		db 9,9,'goto err;',0Ah,0
aOk1		db 0Ah			; DATA XREF: _ecparam_main+130Fo
		db 9,'ok=1;',0Ah,0
aErr		db 'err:',0Ah,0         ; DATA XREF: _ecparam_main+131Fo
		align 4
aIfTmp_1Bn_free	db 9,'if (tmp_1)',0Ah   ; DATA XREF: _ecparam_main+132Fo
		db 9,9,'BN_free(tmp_1);',0Ah,0
		align 4
aIfTmp_2Bn_free	db 9,'if (tmp_2)',0Ah   ; DATA XREF: _ecparam_main+133Fo
		db 9,9,'BN_free(tmp_2);',0Ah,0
		align 4
aIfTmp_3Bn_free	db 9,'if (tmp_3)',0Ah   ; DATA XREF: _ecparam_main+134Fo
		db 9,9,'BN_free(tmp_3);',0Ah,0
		align 4
aIfPointEc_poin	db 9,'if (point)',0Ah   ; DATA XREF: _ecparam_main+135Fo
		db 9,9,'EC_POINT_free(point);',0Ah,0
aIfOk		db 9,'if (!ok)',0Ah,0   ; DATA XREF: _ecparam_main+136Fo
asc_461098	db 9,9,'{',0Ah,0        ; DATA XREF: _ecparam_main+137Fo
aEc_group_freeG	db 9,9,'EC_GROUP_free(group);',0Ah,0 ; DATA XREF: _ecparam_main+138Fo
aGroupNull	db 9,9,'group = NULL;',0Ah,0 ; DATA XREF: _ecparam_main+139Fo
asc_4610C7	db 9,9,'}',0Ah,0        ; DATA XREF: _ecparam_main+13AFo
aReturnGroup	db 9,'return(group);',0Ah ; DATA XREF: _ecparam_main+13BFo
		db 9,'}',0Ah,0
aBadOutputFor_9	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _ecparam_main+2D6o
					; _ecparam_main+F49o
		align 4
aUnableToWriteE	db 'unable to write elliptic curve parameters',0Ah,0
					; DATA XREF: _ecparam_main+E15o
aLdSemiRandom_2	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _ecparam_main+EE3o
aNeed_rand_0	db 'need_rand',0        ; DATA XREF: _ecparam_main+1430o
		align 10h
aErrorWithCer_0	db 'error with certificate to be certified - should be self signed',0Ah,0
					; DATA XREF: _callb:loc_419700o
aErrorWithCerti	db 'error with certificate - error %d at depth %d',0Ah
					; DATA XREF: _callb+74o
		db '%s',0Ah,0
aDefault_1	db 'default',0          ; DATA XREF: _x509_main+19F9o
					; _x509_main+1A1Eo
aInform_11	db '-inform',0          ; DATA XREF: _x509_main+44Eo
aOutform_10	db '-outform',0         ; DATA XREF: _x509_main+457o
aKeyform_3	db '-keyform',0         ; DATA XREF: _x509_main:loc_419BC0o
aReq_0		db '-req',0             ; DATA XREF: _x509_main:loc_419BF0o
aCaform		db '-CAform',0          ; DATA XREF: _x509_main:loc_419C20o
aCakeyform	db '-CAkeyform',0       ; DATA XREF: _x509_main+504o
aSigopt_2	db '-sigopt',0          ; DATA XREF: _x509_main:loc_419DD0o
aDays_1		db '-days',0            ; DATA XREF: _x509_main:loc_419C92o
aBadNumberOfDay	db 'bad number of days',0Ah,0 ; DATA XREF: _x509_main+596o
aPassin_6	db '-passin',0          ; DATA XREF: _x509_main:loc_419EA3o
aExtfile_0	db '-extfile',0         ; DATA XREF: _x509_main:loc_419F73o
aExtensions_2	db '-extensions',0      ; DATA XREF: _x509_main:loc_419FBEo
; char aIn_14[]
aIn_14		db '-in',0              ; DATA XREF: _x509_main:loc_41A1E9o
; char aOut_16[]
aOut_16		db '-out',0             ; DATA XREF: _x509_main:loc_41A4E2o
; char aSignkey[]
aSignkey	db '-signkey',0         ; DATA XREF: _x509_main:loc_41A573o
; char aCa_0[]
aCa_0		db '-CA',0              ; DATA XREF: _x509_main:loc_41A8C6o
; char aCakey[]
aCakey		db '-CAkey',0           ; DATA XREF: _x509_main:loc_41A936o
; char aCaserial[]
aCaserial	db '-CAserial',0        ; DATA XREF: _x509_main:loc_41AA3Bo
; char aSet_serial_0[]
aSet_serial_0	db '-set_serial',0      ; DATA XREF: _x509_main:loc_41BAFFo
; char aAddtrust[]
aAddtrust	db '-addtrust',0        ; DATA XREF: _x509_main:loc_41BB7Co
aInvalidTrustOb	db 'Invalid trust object value %s',0Ah,0 ; DATA XREF: _x509_main+24C2o
; char aAddreject[]
aAddreject	db '-addreject',0       ; DATA XREF: _x509_main:loc_41BC0Co
		align 4
aInvalidRejectO	db 'Invalid reject object value %s',0Ah,0 ; DATA XREF: _x509_main+2552o
; char aSetalias[]
aSetalias	db '-setalias',0        ; DATA XREF: _x509_main:loc_41BC9Co
; char aCertopt[]
aCertopt	db '-certopt',0         ; DATA XREF: _x509_main:loc_41BD59o
; char aNameopt_1[]
aNameopt_1	db '-nameopt',0         ; DATA XREF: _x509_main:loc_41BFACo
; char aEngine_14[]
aEngine_14	db '-engine',0          ; DATA XREF: _x509_main:loc_41C0A5o
; char aC_3[]
aC_3		db '-C',0               ; DATA XREF: _x509_main:loc_41C0D7o
; char aEmail[]
aEmail		db '-email',0           ; DATA XREF: _x509_main:loc_41C109o
; char aOcsp_uri[]
aOcsp_uri	db '-ocsp_uri',0        ; DATA XREF: _x509_main:loc_41C13Bo
; char aSerial_1[]
aSerial_1	db '-serial',0          ; DATA XREF: _x509_main:loc_41C16Do
; char aNext_serial[]
aNext_serial	db '-next_serial',0     ; DATA XREF: _x509_main:loc_41C19Fo
; char aModulus_5[]
aModulus_5	db '-modulus',0         ; DATA XREF: _x509_main:loc_41C1CEo
; char aPubkey_0[]
aPubkey_0	db '-pubkey',0          ; DATA XREF: _x509_main:loc_41C200o
; char aX509toreq[]
aX509toreq	db '-x509toreq',0       ; DATA XREF: _x509_main:loc_41C232o
; char aText_9[]
aText_9		db '-text',0            ; DATA XREF: _x509_main:loc_41C264o
; char aHash_0[]
aHash_0		db '-hash',0            ; DATA XREF: _x509_main:loc_41C293o
; char aSubject_hash[]
aSubject_hash	db '-subject_hash',0    ; DATA XREF: _x509_main+2B7Fo
; char aSubject_hash_o[]
aSubject_hash_o	db '-subject_hash_old',0 ; DATA XREF: _x509_main:loc_41C2DDo
; char aIssuer_hash[]
aIssuer_hash	db '-issuer_hash',0     ; DATA XREF: _x509_main:loc_41C30Fo
; char aIssuer_hash_ol[]
aIssuer_hash_ol	db '-issuer_hash_old',0 ; DATA XREF: _x509_main:loc_41C341o
; char aSubject_3[]
aSubject_3	db '-subject',0         ; DATA XREF: _x509_main:loc_41C373o
; char aIssuer_2[]
aIssuer_2	db '-issuer',0          ; DATA XREF: _x509_main:loc_41C3A5o
; char aFingerprint_0[]
aFingerprint_0	db '-fingerprint',0     ; DATA XREF: _x509_main:loc_41C3D7o
; char aDates[]
aDates		db '-dates',0           ; DATA XREF: _x509_main:loc_41C409o
; char aPurpose[]
aPurpose	db '-purpose',0         ; DATA XREF: _x509_main:loc_41C442o
; char aStartdate_0[]
aStartdate_0	db '-startdate',0       ; DATA XREF: _x509_main:loc_41C474o
; char aEnddate_0[]
aEnddate_0	db '-enddate',0         ; DATA XREF: _x509_main:loc_41C4A3o
; char aCheckend[]
aCheckend	db '-checkend',0        ; DATA XREF: _x509_main:loc_41C4D2o
; char aNoout_10[]
aNoout_10	db '-noout',0           ; DATA XREF: _x509_main:loc_41C51Ao
; char aTrustout[]
aTrustout	db '-trustout',0        ; DATA XREF: _x509_main:loc_41C54Co
; char aClrtrust[]
aClrtrust	db '-clrtrust',0        ; DATA XREF: _x509_main+2E38o
; char aClrreject[]
aClrreject	db '-clrreject',0       ; DATA XREF: _x509_main:loc_41C5A8o
; char aAlias[]
aAlias		db '-alias',0           ; DATA XREF: _x509_main:loc_41C5DAo
; char aCacreateserial[]
aCacreateserial	db '-CAcreateserial',0  ; DATA XREF: _x509_main:loc_41C60Co
; char aClrext[]
aClrext		db '-clrext',0          ; DATA XREF: _x509_main:loc_41C63Eo
; char aCrlext[]
aCrlext		db '-crlext',0          ; DATA XREF: _x509_main+2F2Ao
aUseClrextInste	db 'use -clrext instead of -crlext',0Ah,0
					; DATA XREF: _x509_main:loc_41C6D1o
; char aOcspid[]
aOcspid		db '-ocspid',0          ; DATA XREF: _x509_main+2F42o
aUnknownOpti_13	db 'unknown option %s',0Ah,0 ; DATA XREF: _x509_main+2FCEo
aS_19		db '%s',0               ; DATA XREF: _x509_main+5C4o
aErrorGetting_8	db 'Error getting password',0Ah,0 ; DATA XREF: _x509_main+759o
		align 4
aNeedToSpecifyA	db 'need to specify a CAkey if using the CA command',0Ah,0
					; DATA XREF: _x509_main+B05o
		align 4
aErrorLoading_2	db 'error loading the config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _x509_main+D98o
aErrorOnLineL_4	db 'error on line %ld of config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _x509_main+829o
aExtensions_3	db 'extensions',0       ; DATA XREF: _x509_main:loc_41B121o
		align 4
aErrorLoading_3	db 'Error Loading extension section %s',0Ah,0 ; DATA XREF: _x509_main+DEFo
aWeNeedAPrivate	db 'We need a private key to sign with',0Ah,0
					; DATA XREF: _x509_main:loc_41A546o
aTheCertificate	db 'The certificate request appears to corrupted',0Ah,0
					; DATA XREF: _x509_main:loc_41A3FEo
		align 4
aItDoesNotConta	db 'It does not contain a public key',0Ah,0 ; DATA XREF: _x509_main+CE3o
aErrorUnpacki_1	db 'error unpacking public key',0Ah,0 ; DATA XREF: _x509_main:loc_41B15Bo
aSignatureVer_1	db 'Signature verification error',0Ah,0 ; DATA XREF: _x509_main:loc_41A90Fo
aSignatureDid_0	db 'Signature did not match the certificate request',0Ah,0
					; DATA XREF: _x509_main+A53o
aSignatureOk_0	db 'Signature ok',0Ah,0 ; DATA XREF: _x509_main:loc_41A5DCo
aSubject_1	db 'subject=',0         ; DATA XREF: _x509_main+ED9o
aCertificate_1	db 'Certificate',0      ; DATA XREF: _x509_main:loc_41A24Fo
aCaCertificat_0	db 'CA Certificate',0   ; DATA XREF: _x509_main:loc_41A835o
aSetX509v3Exten	db 'SET x509v3 extension 3',0 ; DATA XREF: _x509_main:loc_41A420o
aSet_ex3	db 'SET.ex3',0          ; DATA XREF: _x509_main+CF8o
a2_99999_3	db '2.99999.3',0        ; DATA XREF: _x509_main+D00o
aIssuer_1	db 'issuer= ',0         ; DATA XREF: _x509_main+274Ao
aSubject_2	db 'subject= ',0        ; DATA XREF: _x509_main+271Ao
aSerial_0	db 'serial=',0          ; DATA XREF: _x509_main:loc_41BDF6o
asc_46167F	db 0Ah,0		; DATA XREF: _x509_main+147Eo
					; _x509_main+14A9o ...
aS_8		db '%s',0Ah,0           ; DATA XREF: _x509_main+2692o
					; _x509_main+27A9o
aNoAlias	db '<No Alias>',0Ah,0   ; DATA XREF: _x509_main:loc_41C056o
a08lx_0		db '%08lx',0Ah,0        ; DATA XREF: _x509_main+187Eo
aCertificatePur	db 'Certificate purposes:',0Ah,0 ; DATA XREF: _x509_main:loc_41AE6Fo
byte_4616AF	db 0			; DATA XREF: _x509_main+17B7o
aSS_3		db '%s%s : ',0          ; DATA XREF: _x509_main+17C3o
					; _x509_main+1821o
aYesWarningCode	db 'Yes (WARNING code=%d)',0Ah,0 ; DATA XREF: _x509_main+17EFo
					; _x509_main+28FDo
aNo_1		db 'No',0Ah,0           ; DATA XREF: _x509_main+1842o
					; _x509_main:loc_41C090o
aYes_1		db 'Yes',0Ah,0          ; DATA XREF: _x509_main:loc_41BFF9o
					; _x509_main:loc_41C06Fo
aCa_2		db ' CA',0              ; DATA XREF: _x509_main+1815o
aModulusUnava_0	db 'Modulus=unavailable',0Ah,0 ; DATA XREF: _x509_main+2919o
aModulus_4	db 'Modulus=',0         ; DATA XREF: _x509_main+16E2o
aWrongAlgorit_0	db 'Wrong Algorithm type',0 ; DATA XREF: _x509_main+170Ao
aErrorGetting_9	db 'Error getting public key',0Ah,0 ; DATA XREF: _x509_main+1865o
aSubjectS	db '/* subject:%s */',0Ah,0 ; DATA XREF: _x509_main+1383o
aIssuerS	db '/* issuer :%s */',0Ah,0 ; DATA XREF: _x509_main+13B7o
aX509_c		db 'x509.c',0           ; DATA XREF: _x509_main+13DFo
					; _x509_main+1C8Do ...
aOutOfMemory_4	db 'Out of memory',0Ah,0 ; DATA XREF: _x509_main+1675o
		align 4
aUnsignedCharXx	db 'unsigned char XXX_subject_name[%d]={',0Ah,0
					; DATA XREF: _x509_main+1426o
a0x02x_5	db '0x%02X,',0          ; DATA XREF: _x509_main+1460o
					; _x509_main+152Bo ...
asc_461792	db '};',0Ah,0           ; DATA XREF: _x509_main:loc_41ABEDo
					; _x509_main:loc_41ACB8o ...
		align 4
aUnsignedChar_0	db 'unsigned char XXX_public_key[%d]={',0Ah,0 ; DATA XREF: _x509_main+14F5o
aUnsignedChar_1	db 'unsigned char XXX_certificate[%d]={',0Ah,0 ; DATA XREF: _x509_main+15BAo
aNotbefore	db 'notBefore=',0       ; DATA XREF: _x509_main:loc_41B2FAo
aNotafter	db 'notAfter=',0        ; DATA XREF: _x509_main:loc_41B296o
aOutOfMemory_5	db 'out of memory',0Ah,0 ; DATA XREF: _x509_main+1BABo
aSFingerprint_0	db '%s Fingerprint=',0  ; DATA XREF: _x509_main+1B09o
a02xC_0		db '%02X%c',0           ; DATA XREF: _x509_main+1B37o
aGettingPrivate	db 'Getting Private key',0Ah,0 ; DATA XREF: _x509_main+21DDo
aPrivateKey_3	db 'Private key',0      ; DATA XREF: _x509_main:loc_41BD02o
aNeed_rand_1	db 'need_rand',0        ; DATA XREF: _x509_main+1C95o
					; _x509_main+2214o
aGettingCaPriva	db 'Getting CA Private Key',0Ah,0 ; DATA XREF: _x509_main:loc_41B343o
aCaPrivateKey_0	db 'CA Private Key',0   ; DATA XREF: _x509_main+1C33o
		align 10h
aErrorInitial_0	db 'Error initialising X509 store',0Ah,0 ; DATA XREF: _x509_main:loc_41B7D0o
aOutOfMem	db 'out of mem',0Ah,0   ; DATA XREF: _x509_main:loc_41B761o
a_srl		db '.srl',0             ; DATA XREF: _x509_main+20E7o
aAdd_wordFailur	db 'add_word failure',0Ah,0 ; DATA XREF: _x509_main+1FF8o
		align 4
aCaCertificat_1	db 'CA certificate and CA private key do not match',0Ah,0
					; DATA XREF: _x509_main+1D4Fo
aGettingRequest	db 'Getting request Private Key',0Ah,0 ; DATA XREF: _x509_main:loc_41B82Co
		align 4
aNoRequestKeyFi	db 'no request key file specified',0Ah,0 ; DATA XREF: _x509_main+23B0o
aRequestKey	db 'request key',0      ; DATA XREF: _x509_main+211Fo
		align 10h
aGeneratingCert	db 'Generating certificate request',0Ah,0 ; DATA XREF: _x509_main+216Fo
aCertificateW_0	db 'Certificate will expire',0Ah,0 ; DATA XREF: _x509_main:loc_41BE93o
aCertificateWil	db 'Certificate will not expire',0Ah,0 ; DATA XREF: _x509_main+F9Fo
aCertificate_2	db 'certificate',0      ; DATA XREF: _x509_main:loc_41B19Bo
		align 4
aBadOutputFo_10	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _x509_main+CAFo
aUnableToWrit_6	db 'unable to write certificate',0Ah,0 ; DATA XREF: _x509_main+1989o
aUsageX509Args	db 'usage: x509 args',0Ah,0 ; DATA XREF: .data:_x509_usageo
aInformArgIn_13	db ' -inform arg     - input format - default PEM (one of DER, NET or'
					; DATA XREF: .data:00455664o
		db ' PEM)',0Ah,0
aOutformArgO_12	db ' -outform arg    - output format - default PEM (one of DER, NET o'
					; DATA XREF: .data:00455668o
		db 'r PEM)',0Ah,0
		align 10h
aKeyformArgPr_2	db ' -keyform arg    - private key format - default PEM',0Ah,0
					; DATA XREF: .data:0045566Co
		align 4
aCaformArgCaFor	db ' -CAform arg     - CA format - default PEM',0Ah,0
					; DATA XREF: .data:00455670o
aCakeyformArgCa	db ' -CAkeyform arg  - CA key format - default PEM',0Ah,0
					; DATA XREF: .data:00455674o
aInArgInputF_12	db ' -in arg         - input file - default stdin',0Ah,0
					; DATA XREF: .data:00455678o
		align 4
aOutArgOutpu_12	db ' -out arg        - output file - default stdout',0Ah,0
					; DATA XREF: .data:0045567Co
		align 4
aPassinArgPriva	db ' -passin arg     - private key password source',0Ah,0
					; DATA XREF: .data:00455680o
aSerialPrintSer	db ' -serial         - print serial number value',0Ah,0
					; DATA XREF: .data:00455684o
		align 4
aSubject_hashPr	db ' -subject_hash   - print subject hash value',0Ah,0
					; DATA XREF: .data:00455688o
		align 4
aSubject_hash_0	db ' -subject_hash_old   - print old-style (MD5) subject hash value',0Ah
					; DATA XREF: .data:0045568Co
		db 0
		align 4
aIssuer_hashPri	db ' -issuer_hash    - print issuer hash value',0Ah,0
					; DATA XREF: .data:00455690o
aIssuer_hash__0	db ' -issuer_hash_old    - print old-style (MD5) issuer hash value',0Ah,0
					; DATA XREF: .data:00455694o
aHashSynonymFor	db ' -hash           - synonym for -subject_hash',0Ah,0
					; DATA XREF: .data:00455698o
		align 4
aSubjectPrintSu	db ' -subject        - print subject DN',0Ah,0 ; DATA XREF: .data:0045569Co
		align 10h
aIssuerPrintI_0	db ' -issuer         - print issuer DN',0Ah,0 ; DATA XREF: .data:004556A0o
aEmailPrintEmai	db ' -email          - print email address(es)',0Ah,0
					; DATA XREF: .data:004556A4o
aStartdateNotbe	db ' -startdate      - notBefore field',0Ah,0 ; DATA XREF: .data:004556A8o
aEnddateNotafte	db ' -enddate        - notAfter field',0Ah,0 ; DATA XREF: .data:004556ACo
		align 4
aPurposePrintOu	db ' -purpose        - print out certificate purposes',0Ah,0
					; DATA XREF: .data:004556B0o
		align 4
aDatesBothBefor	db ' -dates          - both Before and After dates',0Ah,0
					; DATA XREF: .data:004556B4o
aModulusPrint_1	db ' -modulus        - print the RSA key modulus',0Ah,0
					; DATA XREF: .data:004556B8o
		align 4
aPubkeyOutputTh	db ' -pubkey         - output the public key',0Ah,0
					; DATA XREF: .data:004556BCo
		align 4
aFingerprintP_0	db ' -fingerprint    - print the certificate fingerprint',0Ah,0
					; DATA XREF: .data:004556C0o
		align 10h
aAliasOutputCer	db ' -alias          - output certificate alias',0Ah,0
					; DATA XREF: .data:004556C4o
		align 10h
aNooutNoCertifi	db ' -noout          - no certificate output',0Ah,0
					; DATA XREF: .data:004556C8o
		align 4
aOcspidPrintOcs	db ' -ocspid         - print OCSP hash values for the subject name an'
					; DATA XREF: .data:004556CCo
		db 'd public key',0Ah,0
		align 4
aOcsp_uriPrintO	db ' -ocsp_uri       - print OCSP Responder URL(s)',0Ah,0
					; DATA XREF: .data:004556D0o
aTrustoutOutput	db ' -trustout       - output a "trusted" certificate',0Ah,0
					; DATA XREF: .data:004556D4o
		align 10h
aClrtrustClearA	db ' -clrtrust       - clear all trusted purposes',0Ah,0
					; DATA XREF: .data:004556D8o
		align 10h
aClrrejectClear	db ' -clrreject      - clear all rejected purposes',0Ah,0
					; DATA XREF: .data:004556DCo
aAddtrustArgTru	db ' -addtrust arg   - trust certificate for a given purpose',0Ah,0
					; DATA XREF: .data:004556E0o
		align 4
aAddrejectArgRe	db ' -addreject arg  - reject certificate for a given purpose',0Ah,0
					; DATA XREF: .data:004556E4o
		align 4
aSetaliasArgSet	db ' -setalias arg   - set certificate alias',0Ah,0
					; DATA XREF: .data:004556E8o
		align 4
aDaysArgHowLong	db ' -days arg       - How long till expiry of a signed certificate -'
					; DATA XREF: .data:004556ECo
		db ' def 30 days',0Ah,0
		align 4
aCheckendArgChe	db ' -checkend arg   - check whether the cert expires in the next arg'
					; DATA XREF: .data:004556F0o
		db ' seconds',0Ah,0
		align 10h
aExit1IfSo0IfNo	db '                   exit 1 if so, 0 if not',0Ah,0
					; DATA XREF: .data:004556F4o
		align 4
aSignkeyArgSelf	db ' -signkey arg    - self sign cert with arg',0Ah,0
					; DATA XREF: .data:004556F8o
aX509toreqOutpu	db ' -x509toreq      - output a certification request object',0Ah,0
					; DATA XREF: .data:004556FCo
		align 4
aReqInputIsACer	db ' -req            - input is a certificate request, sign and outpu'
					; DATA XREF: .data:00455700o
		db 't.',0Ah,0
		align 4
aCaArgSetTheCaC	db ' -CA arg         - set the CA certificate, must be PEM format.',0Ah,0
					; DATA XREF: .data:00455704o
aCakeyArgSetThe	db ' -CAkey arg      - set the CA key, must be PEM format',0Ah,0
					; DATA XREF: .data:00455708o
		align 4
aMissingItIsAss	db '                   missing, it is assumed to be in the CA file.',0Ah
					; DATA XREF: .data:0045570Co
		db 0
		align 4
aCacreateseri_0	db ' -CAcreateserial - create serial number file if it does not exist'
					; DATA XREF: .data:00455710o
		db 0Ah,0
		align 4
aCaserialArgSer	db ' -CAserial arg   - serial file',0Ah,0 ; DATA XREF: .data:00455714o
aSet_serialSe_0	db ' -set_serial     - serial number to use',0Ah,0
					; DATA XREF: .data:00455718o
		align 4
aTextPrintTheCe	db ' -text           - print the certificate in text form',0Ah,0
					; DATA XREF: .data:0045571Co
		align 10h
aCPrintOutCCode	db ' -C              - print out C code forms',0Ah,0
					; DATA XREF: .data:00455720o
		align 4
aMd2Md5Sha1Mdc2	db ' -md2/-md5/-sha1/-mdc2 - digest to use',0Ah,0
					; DATA XREF: .data:00455724o
aExtfileConfigu	db ' -extfile        - configuration file with X509V3 extensions to a'
					; DATA XREF: .data:00455728o
		db 'dd',0Ah,0
		align 4
aExtensionsSect	db ' -extensions     - section from config file with X509V3 extension'
					; DATA XREF: .data:0045572Co
		db 's to add',0Ah,0
		align 4
aClrextDeleteEx	db ' -clrext         - delete extensions before signing and input cer'
					; DATA XREF: .data:00455730o
		db 'tificate',0Ah,0
		align 4
aNameoptArgVa_1	db ' -nameopt arg    - various certificate name options',0Ah,0
					; DATA XREF: .data:00455734o
		align 4
aEngineEUseE_25	db ' -engine e       - use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: .data:00455738o
		align 4
aCertoptArgVari	db ' -certopt arg    - various certificate text options',0Ah,0
					; DATA XREF: .data:0045573Co
		align 4
aUnableToCrea_0	db 'unable to create BIO for output',0Ah,0
					; DATA XREF: _genrsa_main:loc_41CE7Eo
aOut_17		db '-out',0             ; DATA XREF: _genrsa_main+161o
		align 4
aUsageGenrsaArg	db 'usage: genrsa [args] [numbits]',0Ah,0
					; DATA XREF: _genrsa_main:loc_41CC50o
aDesEncryptTheG	db ' -des            encrypt the generated key with DES in cbc mode',0Ah
					; DATA XREF: _genrsa_main+4A5o
		db 0
		align 10h
aDes3EncryptThe	db ' -des3           encrypt the generated key with DES in ede cbc mo'
					; DATA XREF: _genrsa_main+4BAo
		db 'de (168 bit key)',0Ah,0
		align 4
aIdeaEncryptThe	db ' -idea           encrypt the generated key with IDEA in cbc mode',0Ah
					; DATA XREF: _genrsa_main+4CFo
		db 0
aSeed_0		db ' -seed',0Ah,0       ; DATA XREF: _genrsa_main+4E4o
		align 10h
aEncryptPemOu_3	db '                 encrypt PEM output with cbc seed',0Ah,0
					; DATA XREF: _genrsa_main+4F9o
aAes128Aes192_1	db ' -aes128, -aes192, -aes256',0Ah,0 ; DATA XREF: _genrsa_main+50Eo
		align 10h
aEncryptPemOu_4	db '                 encrypt PEM output with cbc aes',0Ah,0
					; DATA XREF: _genrsa_main+523o
		align 4
aCamellia128C_1	db ' -camellia128, -camellia192, -camellia256',0Ah,0
					; DATA XREF: _genrsa_main+538o
		align 10h
aEncryptPemOu_5	db '                 encrypt PEM output with cbc camellia',0Ah,0
					; DATA XREF: _genrsa_main+54Do
		align 4
aOutFileOutpu_1	db ' -out file       output the key to ',27h,'file',0Ah,0
					; DATA XREF: _genrsa_main+562o
		align 4
aPassoutArgOu_2	db ' -passout arg    output file pass phrase source',0Ah,0
					; DATA XREF: _genrsa_main+577o
		align 4
aF4UseF40x10001	db ' -f4             use F4 (0x10001) for the E value',0Ah,0
					; DATA XREF: _genrsa_main+58Co
		align 4
a3Use3ForTheEVa	db ' -3              use 3 for the E value',0Ah,0
					; DATA XREF: _genrsa_main+5A1o
aEngineEUseE_12	db ' -engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _genrsa_main+5B6o
aRandFileCfil_2	db ' -rand file%cfile%c...',0Ah,0 ; DATA XREF: _genrsa_main+5DBo
aLoadTheFileO_2	db '                 load the file (or the files in the directory) in'
					; DATA XREF: _genrsa_main+5F0o
		db 'to',0Ah,0
		align 10h
aTheRandomNum_2	db '                 the random number generator',0Ah,0
					; DATA XREF: _genrsa_main+605o
a3		db '-3',0               ; DATA XREF: _genrsa_main+16Fo
aF4		db '-F4',0              ; DATA XREF: _genrsa_main+183o
aF4_0		db '-f4',0              ; DATA XREF: _genrsa_main+197o
aEngine_15	db '-engine',0          ; DATA XREF: _genrsa_main+1ABo
aRand_5		db '-rand',0            ; DATA XREF: _genrsa_main:loc_41CB10o
aDes		db '-des',0             ; DATA XREF: _genrsa_main+364o
aDes3		db '-des3',0            ; DATA XREF: _genrsa_main+378o
aIdea		db '-idea',0            ; DATA XREF: _genrsa_main+38Co
aSeed		db '-seed',0            ; DATA XREF: _genrsa_main+3A0o
aAes128		db '-aes128',0          ; DATA XREF: _genrsa_main+3B4o
aAes192		db '-aes192',0          ; DATA XREF: _genrsa_main+3C8o
aAes256		db '-aes256',0          ; DATA XREF: _genrsa_main+3DCo
aCamellia128	db '-camellia128',0     ; DATA XREF: _genrsa_main+3F0o
aCamellia192	db '-camellia192',0     ; DATA XREF: _genrsa_main+404o
aCamellia256	db '-camellia256',0     ; DATA XREF: _genrsa_main+418o
aPassout_3	db '-passout',0         ; DATA XREF: _genrsa_main+42Co
aErrorGettin_10	db 'Error getting password',0Ah,0 ; DATA XREF: _genrsa_main:loc_41CE29o
		align 10h
aWarningNotMu_1	db 'warning, not much extra random data, consider using the -rand opt'
					; DATA XREF: _genrsa_main+843o
		db 'ion',0Ah,0
aLdSemiRandom_3	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _genrsa_main+2B2o
aGeneratingRsaP	db 'Generating RSA private key, %d bit long modulus',0Ah,0
					; DATA XREF: _genrsa_main+2CFo
aEIsLd0xLx	db 'e is %ld (0x%lX)',0Ah,0 ; DATA XREF: _genrsa_main+757o
; char aD_6[]
aD_6		db '%d',0               ; DATA XREF: _genrsa_main+46Ao
		align 4
aUsageGendsaArg	db 'usage: gendsa [args] dsaparam-file',0Ah,0
					; DATA XREF: _gendsa_main:loc_41D1E0o
aOutFileOutpu_2	db ' -out file - output the key to ',27h,'file',27h,0Ah,0
					; DATA XREF: _gendsa_main+1B5o
		align 4
aDesEncryptTh_0	db ' -des      - encrypt the generated key with DES in cbc mode',0Ah,0
					; DATA XREF: _gendsa_main+1CAo
		align 4
aDes3EncryptT_0	db ' -des3     - encrypt the generated key with DES in ede cbc mode ('
					; DATA XREF: _gendsa_main+1DFo
		db '168 bit key)',0Ah,0
		align 4
aIdeaEncryptT_0	db ' -idea     - encrypt the generated key with IDEA in cbc mode',0Ah,0
					; DATA XREF: _gendsa_main+1F4o
aSeed_1		db ' -seed',0Ah,0       ; DATA XREF: _gendsa_main+209o
		align 10h
aEncryptPemOu_6	db '                 encrypt PEM output with cbc seed',0Ah,0
					; DATA XREF: _gendsa_main+21Eo
aAes128Aes192_2	db ' -aes128, -aes192, -aes256',0Ah,0 ; DATA XREF: _gendsa_main+233o
		align 10h
aEncryptPemOu_7	db '                 encrypt PEM output with cbc aes',0Ah,0
					; DATA XREF: _gendsa_main+248o
		align 4
aCamellia128C_2	db ' -camellia128, -camellia192, -camellia256',0Ah,0
					; DATA XREF: _gendsa_main+25Do
		align 10h
aEncryptPemOu_8	db '                 encrypt PEM output with cbc camellia',0Ah,0
					; DATA XREF: _gendsa_main+272o
		align 4
aEngineEUseE_13	db ' -engine e - use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _gendsa_main+287o
aRandFileCfil_3	db ' -rand file%cfile%c...',0Ah,0 ; DATA XREF: _gendsa_main+2ACo
aLoadTheFileO_3	db '           - load the file (or the files in the directory) into',0Ah
					; DATA XREF: _gendsa_main+2C1o
		db 0
		align 4
aTheRandomNum_3	db '             the random number generator',0Ah,0
					; DATA XREF: _gendsa_main+2D6o
aDsaparamFile	db ' dsaparam-file',0Ah,0 ; DATA XREF: _gendsa_main+2EBo
		align 4
aADsaParameterF	db '           - a DSA parameter file as generated by the dsaparam co'
					; DATA XREF: _gendsa_main+300o
		db 'mmand',0Ah,0
aOut_18		db '-out',0             ; DATA XREF: _gendsa_main+9Do
aPassout_4	db '-passout',0         ; DATA XREF: _gendsa_main+ABo
aEngine_16	db '-engine',0          ; DATA XREF: _gendsa_main:loc_41D360o
aRand_6		db '-rand',0            ; DATA XREF: _gendsa_main:loc_41D390o
asc_462DAC	db '-',0                ; DATA XREF: _gendsa_main:loc_41D3C0o
aDes_0		db '-des',0             ; DATA XREF: _gendsa_main+394o
aDes3_0		db '-des3',0            ; DATA XREF: _gendsa_main+3A8o
aIdea_0		db '-idea',0            ; DATA XREF: _gendsa_main+3BCo
aSeed_2		db '-seed',0            ; DATA XREF: _gendsa_main+3D0o
aAes128_0	db '-aes128',0          ; DATA XREF: _gendsa_main+3E4o
aAes192_0	db '-aes192',0          ; DATA XREF: _gendsa_main+3F8o
aAes256_0	db '-aes256',0          ; DATA XREF: _gendsa_main+40Co
aCamellia128_0	db '-camellia128',0     ; DATA XREF: _gendsa_main+420o
aCamellia192_0	db '-camellia192',0     ; DATA XREF: _gendsa_main+434o
aCamellia256_0	db '-camellia256',0     ; DATA XREF: _gendsa_main+448o
aErrorGettin_11	db 'Error getting password',0Ah,0 ; DATA XREF: _gendsa_main+136o
aUnableToLoad_4	db 'unable to load DSA parameter file',0Ah,0
					; DATA XREF: _gendsa_main:loc_41D78Ao
		align 10h
aWarningNotMu_2	db 'warning, not much extra random data, consider using the -rand opt'
					; DATA XREF: _gendsa_main:loc_41D7DEo
		db 'ion',0Ah,0
aLdSemiRandom_4	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _gendsa_main+5B5o
aGeneratingDsaK	db 'Generating DSA key, %d bits',0Ah,0 ; DATA XREF: _gendsa_main+5D9o
		align 4
aAlgorithmAlrea	db 'Algorithm already set!',0Ah,0 ; DATA XREF: _init_gen_str+17o
aAlgorithmSNotF	db 'Algorithm %s not found',0Ah,0 ; DATA XREF: _init_gen_str+166o
aErrorInitializ	db 'Error initializing %s context',0Ah,0 ; DATA XREF: _init_gen_str+101o
					; _init_gen_str+18Ao
aOutform_11	db '-outform',0         ; DATA XREF: _genpkey_main+EEo
aPass_0		db '-pass',0            ; DATA XREF: _genpkey_main:loc_41DCB0o
aEngine_17	db '-engine',0          ; DATA XREF: _genpkey_main:loc_41DCE0o
aParamfile	db '-paramfile',0       ; DATA XREF: _genpkey_main:loc_41DD20o
aParametersAlre	db 'Parameters already set!',0Ah,0 ; DATA XREF: _genpkey_main+2E8o
aR_0		db 'r',0                ; DATA XREF: _genpkey_main:loc_41DF30o
aCanTOpenParame	db 'Can',27h,'t open parameter file %s',0Ah,0
					; DATA XREF: _genpkey_main+641o
		align 10h
aErrorReadingPa	db 'Error reading parameter file %s',0Ah,0 ; DATA XREF: _genpkey_main+77Bo
aOut_19		db '-out',0             ; DATA XREF: _genpkey_main:loc_41DD70o
aAlgorithm	db '-algorithm',0       ; DATA XREF: _genpkey_main+314o
aPkeyopt_0	db '-pkeyopt',0         ; DATA XREF: _genpkey_main:loc_41E010o
aNoKeytypeSpeci	db 'No keytype specified',0Ah,0 ; DATA XREF: _genpkey_main:loc_41DDD8o
aParameterSetti	db 'parameter setting error',0Ah,0 ; DATA XREF: _genpkey_main+5DEo
aGenparam	db '-genparam',0        ; DATA XREF: _genpkey_main:loc_41E080o
aText_10	db '-text',0            ; DATA XREF: _genpkey_main:loc_41E153o
aUnknownCipherS	db 'Unknown cipher %s',0Ah,0 ; DATA XREF: _genpkey_main+898o
aUsageGenpkeyOp	db 'Usage: genpkey [options]',0Ah,0 ; DATA XREF: _genpkey_main:loc_41DDF0o
aWhereOptionsMa	db 'where options may be',0Ah,0 ; DATA XREF: _genpkey_main+395o
aOutFileOutpu_3	db '-out file          output file',0Ah,0 ; DATA XREF: _genpkey_main+3AAo
aOutformXOutput	db '-outform X         output format (DER or PEM)',0Ah,0
					; DATA XREF: _genpkey_main+3BFo
		align 4
aPassArgOutputF	db '-pass arg          output file pass phrase source',0Ah,0
					; DATA XREF: _genpkey_main+3D4o
		align 10h
aCipherUseCiphe	db '-<cipher>          use cipher <cipher> to encrypt the key',0Ah,0
					; DATA XREF: _genpkey_main+3E9o
		align 4
aEngineEUseE_14	db '-engine e          use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _genpkey_main+3FEo
		align 4
aParamfileFileP	db '-paramfile file    parameters file',0Ah,0
					; DATA XREF: _genpkey_main+413o
aAlgorithmAlgTh	db '-algorithm alg     the public key algorithm',0Ah,0
					; DATA XREF: _genpkey_main+428o
		align 10h
aPkeyoptOptValu	db '-pkeyopt opt:value set the public key algorithm option <opt>',0Ah
					; DATA XREF: _genpkey_main+43Do
		db '                   to value <value>',0Ah,0
		align 4
aGenparamGenera	db '-genparam          generate parameters, not key',0Ah,0
					; DATA XREF: _genpkey_main+452o
		align 4
aTextPrintTheIn	db '-text              print the in text',0Ah,0
					; DATA XREF: _genpkey_main+467o
		align 10h
aNbOptionsOrder	db 'NB: options order may be important!  See the manual page.',0Ah,0
					; DATA XREF: _genpkey_main+47Co
aErrorGettin_12	db 'Error getting password',0Ah,0 ; DATA XREF: _genpkey_main:loc_41E132o
aWb_3		db 'wb',0               ; DATA XREF: _genpkey_main+16Do
aCanTOpenOutput	db 'Can',27h,'t open output file %s',0Ah,0 ; DATA XREF: _genpkey_main+868o
aErrorGenerat_1	db 'Error generating parameters',0Ah,0
					; DATA XREF: _genpkey_main:loc_41E2A4o
aErrorGenerat_2	db 'Error generating key',0Ah,0 ; DATA XREF: _genpkey_main:loc_41E2F7o
aBadFormatSpeci	db 'Bad format specified for key',0Ah,0 ; DATA XREF: _genpkey_main+6A3o
aErrorWritingKe	db 'Error writing key',0Ah,0 ; DATA XREF: _genpkey_main:loc_41E27Do
aErrorPrintingK	db 'Error printing key',0Ah,0 ; DATA XREF: _genpkey_main:loc_41E0C6o
aErrorInitial_1	db 'Error initializing context',0Ah,0 ; DATA XREF: _genpkey_main+536o
					; _genpkey_main:loc_41E1C0o
		align 4
a4ldItemsInTheS	db '%4ld items in the session cache',0Ah,0 ; DATA XREF: _print_stats+2Eo
		align 4
a4ldClientConne	db '%4ld client connects (SSL_connect())',0Ah,0
					; DATA XREF: _print_stats+62o
		align 4
a4ldClientReneg	db '%4ld client renegotiates (SSL_connect())',0Ah,0
					; DATA XREF: _print_stats+96o
		align 10h
a4ldClientCon_0	db '%4ld client connects that finished',0Ah,0 ; DATA XREF: _print_stats+CAo
a4ldServerAccep	db '%4ld server accepts (SSL_accept())',0Ah,0 ; DATA XREF: _print_stats+FEo
a4ldServerReneg	db '%4ld server renegotiates (SSL_accept())',0Ah,0
					; DATA XREF: _print_stats+132o
		align 4
a4ldServerAcc_0	db '%4ld server accepts that finished',0Ah,0 ; DATA XREF: _print_stats+166o
a4ldSessionCach	db '%4ld session cache hits',0Ah,0 ; DATA XREF: _print_stats+19Ao
a4ldSessionCa_0	db '%4ld session cache misses',0Ah,0 ; DATA XREF: _print_stats+1CEo
a4ldSessionCa_1	db '%4ld session cache timeouts',0Ah,0 ; DATA XREF: _print_stats+202o
a4ldCallbackCac	db '%4ld callback cache hits',0Ah,0 ; DATA XREF: _print_stats+236o
		align 4
a4ldCacheFullOv	db '%4ld cache full overflows (%ld allowed)',0Ah,0
					; DATA XREF: _print_stats+290o
aCert_statusCal	db 'cert_status: callback called',0Ah,0
					; DATA XREF: _cert_status_cb:loc_41E7C0o
		align 4
aCert_statusCan	db 'cert_status: can',27h,'t parse AIA URL',0Ah,0
					; DATA XREF: _cert_status_cb:loc_41E760o
aCert_statusAia	db 'cert_status: AIA URL: %s',0Ah,0 ; DATA XREF: _cert_status_cb+1F4o
aCert_statusNoA	db 'cert_status: no AIA and no default responder URL',0Ah,0
					; DATA XREF: _cert_status_cb+3C3o
		align 4
aCert_statusC_0	db 'cert_status: Can',27h,'t retrieve issuer certificate.',0Ah,0
					; DATA XREF: _cert_status_cb:loc_41E980o
		align 10h
aCert_statusErr	db 'cert_status: error querying responder',0Ah,0
					; DATA XREF: _cert_status_cb:loc_41EA10o
		align 4
aCert_statusOcs	db 'cert_status: ocsp response sent:',0Ah,0
					; DATA XREF: _cert_status_cb:loc_41EA6Fo
aNone_4		db '(NONE)',0           ; DATA XREF: _sv_body:loc_41FBBFo
byte_463601	db 0			; DATA XREF: _sv_body+409o
					; _www_body:loc_42065Bo
aNot		db ' NOT',0             ; DATA XREF: _sv_body:loc_41F9FCo
					; _www_body+460o
aS_server_c	db 's_server.c',0       ; DATA XREF: _sv_body+17o
					; _sv_body+48Eo ...
aOutOfMemory_6	db 'out of memory',0Ah,0 ; DATA XREF: _sv_body:loc_41F9C8o
aConnectionClos	db 'CONNECTION CLOSED',0Ah,0 ; DATA XREF: _sv_body:loc_41F49Eo
					; _sv_body+F3Do
aTurningOnNonBl	db 'turning on non blocking io',0Ah,0 ; DATA XREF: _sv_body:loc_41F8EDo
					; _www_body:loc_4202F0o
aMtuTooSmall_Mu	db 'MTU too small. Must be at least %ld',0Ah,0 ; DATA XREF: _sv_body+1157o
aFailedToSetMtu	db 'Failed to set MTU',0Ah,0 ; DATA XREF: _sv_body+CC2o
aLf_num0	db 'lf_num == 0',0      ; DATA XREF: _sv_body+E3Co
aDone		db 'DONE',0Ah,0         ; DATA XREF: _sv_body:loc_41F4F6o
					; _sv_body:loc_41FADDo	...
aShutdownAccept	db 'shutdown accept socket',0Ah,0 ; DATA XREF: _sv_body+10D6o
aHeartbeating	db 'HEARTBEATING',0Ah,0 ; DATA XREF: _sv_body:loc_41F916o
; char aSsl_do_handsha[]
aSsl_do_handsha	db 'SSL_do_handshake -> %d',0Ah,0 ; DATA XREF: _sv_body+D7Ao
aLetsPrintSomeC	db 'Lets print some clear text',0Ah,0 ; DATA XREF: _sv_body+7D3o
aLookupRenego_0	db 'LOOKUP renego during write',0Ah,0 ; DATA XREF: _sv_body+879o
aLookupDoneS	db 'LOOKUP done %s',0Ah,0 ; DATA XREF: _sv_body+1ADo
					; _sv_body+617o ...
aLookupNotSucce	db 'LOOKUP not successful',0Ah,0 ; DATA XREF: _sv_body:loc_41F020o
					; _sv_body+8BEo ...
aWriteBlock	db 'Write BLOCK',0Ah,0  ; DATA XREF: _sv_body:loc_41F3F0o
aError_0	db 'ERROR',0Ah,0        ; DATA XREF: _sv_body:loc_41F446o
					; _sv_body+ED8o
aLookupDuringAc	db 'LOOKUP during accept %s',0Ah,0 ; DATA XREF: _sv_body+161o
					; _www_body+26Co
aDelay_0	db 'DELAY',0Ah,0        ; DATA XREF: _sv_body:loc_41FA88o
aVerifyErrorS_0	db 'verify error:%s',0Ah,0 ; DATA XREF: _sv_body+F09o
aClientCertific	db 'Client certificate',0Ah,0 ; DATA XREF: _sv_body+1FFo
					; _www_body+97Eo
aSubjectS_0	db 'subject=%s',0Ah,0   ; DATA XREF: _sv_body+24Do
aIssuerS_0	db 'issuer=%s',0Ah,0    ; DATA XREF: _sv_body+28Ao
aSharedCiphersS	db 'Shared ciphers:%s',0Ah,0 ; DATA XREF: _sv_body+2CBo
aCipherIsS	db 'CIPHER is %s',0Ah,0 ; DATA XREF: _sv_body+2FCo
aNextprotoIs	db 'NEXTPROTO is ',0    ; DATA XREF: _sv_body+337o
asc_4637D6	db 0Ah,0		; DATA XREF: _sv_body+36Do
					; _sv_body:loc_41EFFDo	...
aSrtpExtensionN	db 'SRTP Extension negotiated, profile=%s',0Ah,0 ; DATA XREF: _sv_body+394o
aReusedSessionI	db 'Reused session-id',0Ah,0 ; DATA XREF: _sv_body:loc_41FAC3o
		align 4
aPeerHasIncorre	db 'Peer has incorrect TLSv1 block padding',0Ah,0
					; DATA XREF: _sv_body:loc_41FAA9o
aSecureRenegoti	db 'Secure Renegotiation IS%s supported',0Ah,0 ; DATA XREF: _sv_body+412o
					; _www_body+469o
aKeyingMaterial	db 'Keying material exporter:',0Ah,0 ; DATA XREF: _sv_body+435o
aLabelS		db '    Label: ',27h,'%s',27h,0Ah,0 ; DATA XREF: _sv_body+453o
aLengthIBytes	db '    Length: %i bytes',0Ah,0 ; DATA XREF: _sv_body+471o
aError_1	db '    Error',0Ah,0    ; DATA XREF: _sv_body:loc_41FA60o
aKeyingMateri_0	db '    Keying material: ',0 ; DATA XREF: _sv_body+502o
a02x_2		db '%02X',0             ; DATA XREF: _sv_body+539o
aLookupRenegoDu	db 'LOOKUP renego during read',0Ah,0 ; DATA XREF: _sv_body+5CBo
					; _www_body+744o
aReadBlock	db 'Read BLOCK',0Ah,0   ; DATA XREF: _sv_body:loc_41FA1Fo
aShuttingDownSs	db 'shutting down SSL',0Ah,0 ; DATA XREF: _sv_body+9D1o
aAccept		db 'ACCEPT',0Ah,0       ; DATA XREF: _sv_body:loc_41F4CFo
					; _www_body:loc_41FCDFo ...
		align 4
off_46390C	dd offset loc_41F405	; DATA XREF: _sv_body+943r
		dd offset loc_41F440	; jump table for switch	statement
		dd offset loc_41F3F0
		dd offset loc_41F3F0
		dd offset loc_41F3F0
		dd offset loc_41F440
		dd offset loc_41F4F0
off_463928	dd offset loc_41FA39	; DATA XREF: _sv_body+E25r
		dd offset loc_41F446	; jump table for switch	statement
		dd offset loc_41FA1F
		dd offset loc_41FA1F
		dd offset loc_41EBB0
		dd offset loc_41F446
		dd offset loc_41F4F6
byte_463944	db 20h,	0		; DATA XREF: _www_body+40Co
					; _www_body+616o
aReused		db '---',0Ah            ; DATA XREF: _www_body+8E2o
		db 'Reused, ',0
aNew_0		db '---',0Ah            ; DATA XREF: _www_body:loc_420665o
		db 'New, ',0
aReadRBlock	db 'read R BLOCK',0Ah,0 ; DATA XREF: _www_body+708o
aGet		db 'GET ',0             ; DATA XREF: _www_body:loc_41FFA0o
aGetStats	db 'GET /stats ',0      ; DATA XREF: _www_body:loc_420260o
aHttp1_0200OkCo	db 'HTTP/1.0 200 ok',0Dh,0Ah ; DATA XREF: _www_body:loc_41FFB6o
					; _www_body:loc_4208F6o
		db 'Content-type: text/html',0Dh,0Ah
		db 0Dh,0Ah,0
		align 4
aHtmlBodyBgcolo	db '<HTML><BODY BGCOLOR="#ffffff">',0Ah,0 ; DATA XREF: _www_body+3A6o
aPre		db '<pre>',0Ah,0        ; DATA XREF: _www_body+3B6o
		align 4
aCiphersSupport	db 'Ciphers supported in s_server binary',0Ah,0 ; DATA XREF: _www_body+479o
a11s25s		db '%-11s:%-25s',0      ; DATA XREF: _www_body+4DFo
					; _www_body+52Ao
		align 4
aCiphersCommonB	db '---',0Ah            ; DATA XREF: _www_body+595o
		db 'Ciphers common between both SSL end points:',0Ah,0
asc_463A39	db '                          ',0 ; DATA XREF: _www_body+5EAo
aSCipherIsS	db '%s, Cipher is %s',0Ah,0 ; DATA XREF: _www_body+917o
asc_463A66	db '---',0Ah,0          ; DATA XREF: _www_body+93Bo
					; _www_body+95Co
		align 4
aNoClientCertif	db 'no client certificate available',0Ah,0
					; DATA XREF: _www_body:loc_420706o
aBodyHtml	db '</BODY></HTML>',0Dh,0Ah ; DATA XREF: _www_body:loc_4205C6o
		db 0Dh,0Ah,0
aGet_0		db 'GET /',0            ; DATA XREF: _www_body:loc_420276o
		align 4
aHttp1_0200Ok_0	db 'HTTP/1.0 200 ok',0Dh,0Ah ; DATA XREF: _www_body+A93o
					; _www_body:loc_42071Bo ...
		db 'Content-type: text/plain',0Dh,0Ah
		db 0Dh,0Ah,0
		align 4
aSIsAnInvalidFi	db 27h,'%s',27h,' is an invalid file name',0Dh,0Ah,0
					; DATA XREF: _www_body+B0Fo
		align 4
aSContains__Ref	db 27h,'%s',27h,' contains ',27h,'..',27h,' reference',0Dh,0Ah,0
					; DATA XREF: _www_body+B38o
aSIsAnInvalidPa	db 27h,'%s',27h,' is an invalid path',0Dh,0Ah,0 ; DATA XREF: _www_body+C50o
aSIsADirectory	db 27h,'%s',27h,' is a directory',0Dh,0Ah,0 ; DATA XREF: _www_body+AA7o
aR_1		db 'r',0                ; DATA XREF: _www_body:loc_420791o
					; _load_dh_param+5o ...
aErrorOpeningS	db 'Error opening ',27h,'%s',27h,0Dh,0Ah,0 ; DATA XREF: _www_body+C79o
aFileS		db 'FILE:%s',0Ah,0      ; DATA XREF: _www_body+B9Ao
; char a_html[]
a_html		db '.html',0            ; DATA XREF: _www_body+CBEo
; char a_php[]
a_php		db '.php',0             ; DATA XREF: _www_body+CF9o
; char a_htm[]
a_htm		db '.htm',0             ; DATA XREF: _www_body+D0Do
aRwriteWBlock	db 'rwrite W BLOCK',0Ah,0 ; DATA XREF: _www_body+C25o
		align 4
off_463B88	dd offset loc_41FF20	; DATA XREF: _www_body+2F0r
		dd offset loc_41FCDF	; jump table for switch	statement
		dd offset loc_41FE00
		dd offset loc_41FE00
		dd offset loc_41FE00
		dd offset loc_41FCDF
		dd offset loc_41FCDF
aSrpUsernameS	db 'SRP username = "%s"',0Ah,0 ; DATA XREF: _ssl_srp_server_param_cb+DAo
aUserSDoesnTExi	db 'User %s doesn',27h,'t exist',0Ah,0
					; DATA XREF: _ssl_srp_server_param_cb+104o
aSrpParametersS	db 'SRP parameters set: username = "%s" info="%s" ',0Ah,0
					; DATA XREF: _ssl_srp_server_param_cb+62o
aPsk_server_cb	db 'psk_server_cb',0Ah,0 ; DATA XREF: _psk_server_cb:loc_420BE0o
		align 10h
aErrorClientDid	db 'Error: client did not send PSK identity',0Ah,0
					; DATA XREF: _psk_server_cb:loc_420BA0o
aIdentity_lenDI	db 'identity_len=%d identity=%s',0Ah,0 ; DATA XREF: _psk_server_cb+1B0o
aClient_identit	db 'Client_identity',0  ; DATA XREF: _psk_server_cb:loc_420AC6o
					; _psk_server_cb:loc_420C00o
		align 4
aPskErrorClient	db 'PSK error: client identity not found (got ',27h,'%s',27h,' expected ',27h,'%'
					; DATA XREF: _psk_server_cb+17Co
		db 's',27h,')',0Ah,0
aPskClientIdent	db 'PSK client identity found',0Ah,0 ; DATA XREF: _psk_server_cb:loc_420C60o
		align 4
aCouldNotConver	db 'Could not convert PSK key ',27h,'%s',27h,' to BIGNUM',0Ah,0
					; DATA XREF: _psk_server_cb+D9o
		align 10h
aPskBufferOfCal	db 'psk buffer of callback is too small (%d) for key (%d)',0Ah,0
					; DATA XREF: _psk_server_cb+218o
aFetchedPskLenD	db 'fetched PSK len=%d',0Ah,0 ; DATA XREF: _psk_server_cb+254o
aErrorInPskServ	db 'Error in PSK server callback',0Ah,0
					; DATA XREF: _psk_server_cb:loc_420BBEo
		align 4
aAllocationErro	db 'Allocation error in generating RSA key',0Ah,0
					; DATA XREF: _tmp_rsa_cb:loc_420E5Fo
aGeneratingTemp	db 'Generating temp (%d bit) RSA key...',0 ; DATA XREF: _tmp_rsa_cb+C8o
aHostnameInTlsE	db 'Hostname in TLS extension: "%s"',0Ah,0
					; DATA XREF: _ssl_servername_cb+2Fo
aSwitchingServe	db 'Switching server context.',0Ah,0 ; DATA XREF: _ssl_servername_cb+64o
aServer_pem	db 'server.pem',0       ; DATA XREF: _s_server_main+B4o
					; _s_server_main+41Ao ...
aServer2_pem	db 'server2.pem',0      ; DATA XREF: _s_server_main+C8o
					; _s_server_main+950o ...
aPort		db '-port',0            ; DATA XREF: _s_server_main+326o
aAccept_0	db '-accept',0          ; DATA XREF: _s_server_main:loc_421360o
aVerify_3	db '-verify',0          ; DATA XREF: _s_server_main+294o
aVerifyDepthIsD	db 'verify depth is %d',0Ah,0 ; DATA XREF: _s_server_main+2E0o
aVerify_4	db '-Verify',0          ; DATA XREF: _s_server_main:loc_421CA0o
		align 10h
aVerifyDepthI_0	db 'verify depth is %d, must return a certificate',0Ah,0
					; DATA XREF: _s_server_main+C0Fo
aContext	db '-context',0         ; DATA XREF: _s_server_main:loc_421D00o
aCert_0		db '-cert',0            ; DATA XREF: _s_server_main:loc_421D30o
aCertform	db '-certform',0        ; DATA XREF: _s_server_main+C60o
aKey_2		db '-key',0             ; DATA XREF: _s_server_main:loc_422480o
aKeyform_4	db '-keyform',0         ; DATA XREF: _s_server_main+13B0o
aPass_1		db '-pass',0            ; DATA XREF: _s_server_main:loc_422714o
aDhparam	db '-dhparam',0         ; DATA XREF: _s_server_main:loc_422B2Fo
aNamed_curve_1	db '-named_curve',0     ; DATA XREF: _s_server_main:loc_422C8Fo
aDcertform	db '-dcertform',0       ; DATA XREF: _s_server_main:loc_422DF7o
aDcert		db '-dcert',0           ; DATA XREF: _s_server_main:loc_422F65o
aDkeyform	db '-dkeyform',0        ; DATA XREF: _s_server_main:loc_422F95o
; char aDpass[]
aDpass		db '-dpass',0           ; DATA XREF: _s_server_main+1F12o
; char aDkey[]
aDkey		db '-dkey',0            ; DATA XREF: _s_server_main+2117o
; char aNocert[]
aNocert		db '-nocert',0          ; DATA XREF: _s_server_main+2153o
; char aCapath_1[]
aCapath_1	db '-CApath',0          ; DATA XREF: _s_server_main+216Bo
; char aNo_cache[]
aNo_cache	db '-no_cache',0        ; DATA XREF: _s_server_main+21B3o
; char aVerify_retur_0[]
aVerify_retur_0	db '-verify_return_error',0 ; DATA XREF: _s_server_main+2238o
; char aServerpref[]
aServerpref	db '-serverpref',0      ; DATA XREF: _s_server_main:loc_423342o
; char aLegacy_reneg_0[]
aLegacy_reneg_0	db '-legacy_renegotiation',0 ; DATA XREF: _s_server_main:loc_42336Ao
; char aCipher[]
aCipher		db '-cipher',0          ; DATA XREF: _s_server_main:loc_423392o
; char aCafile_1[]
aCafile_1	db '-CAfile',0          ; DATA XREF: _s_server_main:loc_4233CFo
; char aNbio[]
aNbio		db '-nbio',0            ; DATA XREF: _s_server_main:loc_42340Bo
; char aNbio_test[]
aNbio_test	db '-nbio_test',0       ; DATA XREF: _s_server_main:loc_423435o
; char aDebug_0[]
aDebug_0	db '-debug',0           ; DATA XREF: _s_server_main:loc_423469o
; char aTlsextdebug[]
aTlsextdebug	db '-tlsextdebug',0     ; DATA XREF: _s_server_main:loc_423493o
; char aStatus_0[]
aStatus_0	db '-status',0          ; DATA XREF: _s_server_main:loc_4234BDo
; char aStatus_verbo_0[]
aStatus_verbo_0	db '-status_verbose',0  ; DATA XREF: _s_server_main:loc_4234E7o
; char aStatus_timeo_0[]
aStatus_timeo_0	db '-status_timeout',0  ; DATA XREF: _s_server_main:loc_42351Bo
; char aStatus_url[]
aStatus_url	db '-status_url',0      ; DATA XREF: _s_server_main:loc_42357Do
aErrorParsingUr	db 'Error parsing URL',0Ah,0 ; DATA XREF: _s_server_main+250Fo
; char aMsg[]
aMsg		db '-msg',0             ; DATA XREF: _s_server_main:loc_423609o
; char aHack[]
aHack		db '-hack',0            ; DATA XREF: _s_server_main:loc_423633o
; char aState[]
aState		db '-state',0           ; DATA XREF: _s_server_main:loc_42365Do
; char aCrlf[]
aCrlf		db '-crlf',0            ; DATA XREF: _s_server_main:loc_423685o
; char aQuiet_0[]
aQuiet_0	db '-quiet',0           ; DATA XREF: _s_server_main:loc_4236AFo
; char aBugs[]
aBugs		db '-bugs',0            ; DATA XREF: _s_server_main:loc_4236D9o
; char aNo_tmp_rsa[]
aNo_tmp_rsa	db '-no_tmp_rsa',0      ; DATA XREF: _s_server_main:loc_423701o
; char aNo_dhe[]
aNo_dhe		db '-no_dhe',0          ; DATA XREF: _s_server_main:loc_42372Co
; char aNo_ecdhe[]
aNo_ecdhe	db '-no_ecdhe',0        ; DATA XREF: _s_server_main:loc_423757o
; char aPsk_hint[]
aPsk_hint	db '-psk_hint',0        ; DATA XREF: _s_server_main:loc_423782o
; char aPsk[]
aPsk		db '-psk',0             ; DATA XREF: _s_server_main:loc_4237BFo
aNotAHexNumberS	db 'Not a hex number ',27h,'%s',27h,0Ah,0 ; DATA XREF: _s_server_main+27AEo
; char aSrpvfile[]
aSrpvfile	db '-srpvfile',0        ; DATA XREF: _s_server_main:loc_423832o
; char aSrpuserseed[]
aSrpuserseed	db '-srpuserseed',0     ; DATA XREF: _s_server_main:loc_4238B1o
; char aWww[]
aWww		db '-www',0             ; DATA XREF: _s_server_main:loc_42390Co
; char aWww_0[]
aWww_0		db '-WWW',0             ; DATA XREF: _s_server_main:loc_423936o
; char aHttp[]
aHttp		db '-HTTP',0            ; DATA XREF: _s_server_main:loc_423960o
; char aNo_ssl2[]
aNo_ssl2	db '-no_ssl2',0         ; DATA XREF: _s_server_main:loc_42398Ao
; char aNo_ssl3[]
aNo_ssl3	db '-no_ssl3',0         ; DATA XREF: _s_server_main:loc_4239B2o
; char aNo_tls1[]
aNo_tls1	db '-no_tls1',0         ; DATA XREF: _s_server_main:loc_4239DAo
; char aNo_tls1_1[]
aNo_tls1_1	db '-no_tls1_1',0       ; DATA XREF: _s_server_main:loc_423A02o
; char aNo_tls1_2[]
aNo_tls1_2	db '-no_tls1_2',0       ; DATA XREF: _s_server_main:loc_423A2Ao
; char aNo_comp[]
aNo_comp	db '-no_comp',0         ; DATA XREF: _s_server_main:loc_423A52o
; char aNo_ticket[]
aNo_ticket	db '-no_ticket',0       ; DATA XREF: _s_server_main:loc_423A7Ao
; char aSsl3[]
aSsl3		db '-ssl3',0            ; DATA XREF: _s_server_main:loc_423AA2o
; char aTls1[]
aTls1		db '-tls1',0            ; DATA XREF: _s_server_main+29DAo
; char aTls1_1[]
aTls1_1		db '-tls1_1',0          ; DATA XREF: _s_server_main+29F2o
; char aTls1_2[]
aTls1_2		db '-tls1_2',0          ; DATA XREF: _s_server_main+2A0Ao
; char aDtls1[]
aDtls1		db '-dtls1',0           ; DATA XREF: _s_server_main+2A22o
; char aTimeout[]
aTimeout	db '-timeout',0         ; DATA XREF: _s_server_main+2A3Ao
; char aMtu[]
aMtu		db '-mtu',0             ; DATA XREF: _s_server_main:loc_423B60o
; char aChain[]
aChain		db '-chain',0           ; DATA XREF: _s_server_main:loc_423C34o
; char aId_prefix[]
aId_prefix	db '-id_prefix',0       ; DATA XREF: _s_server_main:loc_423C5Eo
; char aEngine_18[]
aEngine_18	db '-engine',0          ; DATA XREF: _s_server_main:loc_423C9Bo
; char aRand_7[]
aRand_7		db '-rand',0            ; DATA XREF: _s_server_main:loc_423CD8o
; char aServername[]
aServername	db '-servername',0      ; DATA XREF: _s_server_main:loc_423D14o
; char aServername_f_0[]
aServername_f_0	db '-servername_fatal',0 ; DATA XREF: _s_server_main:loc_423D53o
; char aCert2[]
aCert2		db '-cert2',0           ; DATA XREF: _s_server_main:loc_423D7Eo
; char aKey2[]
aKey2		db '-key2',0            ; DATA XREF: _s_server_main:loc_423DBBo
; char aNextprotoneg[]
aNextprotoneg	db '-nextprotoneg',0    ; DATA XREF: _s_server_main:loc_423DF8o
; char aUse_srtp[]
aUse_srtp	db '-use_srtp',0        ; DATA XREF: _s_server_main:loc_423E34o
; char aKeymatexport[]
aKeymatexport	db '-keymatexport',0    ; DATA XREF: _s_server_main:loc_423E71o
; char aKeymatexport_0[]
aKeymatexport_0	db '-keymatexportlen',0 ; DATA XREF: _s_server_main:loc_423EAEo
aUnknownOpti_14	db 'unknown option %s',0Ah,0 ; DATA XREF: _s_server_main+2E24o
aUsageS_serverA	db 'usage: s_server [args ...]',0Ah,0
					; DATA XREF: _s_server_main:loc_42144Ao
		align 10h
aAcceptArgPortT	db ' -accept arg   - port to accept on (default is %d)',0Ah,0
					; DATA XREF: _s_server_main+39Co
aContextArgSetS	db ' -context arg  - set session ID context',0Ah,0
					; DATA XREF: _s_server_main+3B1o
		align 10h
aVerifyArgTurnO	db ' -verify arg   - turn on peer certificate verification',0Ah,0
					; DATA XREF: _s_server_main+3C6o
aVerifyArgTur_0	db ' -Verify arg   - turn on peer certificate verification, must have'
					; DATA XREF: _s_server_main+3DBo
		db ' a cert.',0Ah,0
		align 4
aVerify_return_	db ' -verify_return_error - return verification errors',0Ah,0
					; DATA XREF: _s_server_main+3F0o
aCertArgCertifi	db ' -cert arg     - certificate file to use',0Ah,0
					; DATA XREF: _s_server_main+405o
		align 4
aDefaultIsS	db '                 (default is %s)',0Ah,0 ; DATA XREF: _s_server_main+422o
					; _s_server_main+958o
		align 4
aCrl_checkCheck	db ' -crl_check    - check the peer certificate has not been revoked '
					; DATA XREF: _s_server_main+437o
		db 'by its CA.',0Ah
		db '                 The CRL(s) are appended to the certificate file',0Ah
		db 0
		align 4
aCrl_check_allC	db ' -crl_check_all - check the peer certificate has not been revoked'
					; DATA XREF: _s_server_main+44Co
		db ' by its CA',0Ah
		db '                 or any other CRL in the CA chain. CRL(s) are app'
		db 'ened to the',0Ah
		db '                 the certificate file.',0Ah,0
		align 4
aCertformArgCer	db ' -certform arg - certificate format (PEM or DER) PEM default',0Ah,0
					; DATA XREF: _s_server_main+461o
		align 4
aKeyArgPrivateK	db ' -key arg      - Private Key file to use, in cert file if',0Ah,0
					; DATA XREF: _s_server_main+476o
		align 4
aNotSpecifiedDe	db '                 not specified (default is %s)',0Ah,0
					; DATA XREF: _s_server_main+493o
					; _s_server_main+98Ao
aKeyformArgKe_1	db ' -keyform arg  - key format (PEM, DER or ENGINE) PEM default',0Ah,0
					; DATA XREF: _s_server_main+4A8o
		align 4
aPassArgPrivate	db ' -pass arg     - private key file pass phrase source',0Ah,0
					; DATA XREF: _s_server_main+4BDo
		align 10h
aDcertArgSecond	db ' -dcert arg    - second certificate file to use (usually for DSA)'
					; DATA XREF: _s_server_main+4D2o
		db 0Ah,0
		align 4
aDcertformXSeco	db ' -dcertform x  - second certificate format (PEM or DER) PEM defau'
					; DATA XREF: _s_server_main+4E7o
		db 'lt',0Ah,0
		align 4
aDkeyArgSecondP	db ' -dkey arg     - second private key file to use (usually for DSA)'
					; DATA XREF: _s_server_main+4FCo
		db 0Ah,0
		align 10h
aDkeyformArgSec	db ' -dkeyform arg - second key format (PEM, DER or ENGINE) PEM defau'
					; DATA XREF: _s_server_main+511o
		db 'lt',0Ah,0
		align 4
aDpassArgSecond	db ' -dpass arg    - second private key file pass phrase source',0Ah,0
					; DATA XREF: _s_server_main+526o
		align 4
aDhparamArgDhPa	db ' -dhparam arg  - DH parameter file to use, in cert file if not sp'
					; DATA XREF: _s_server_main+53Bo
		db 'ecified',0Ah,0
		align 4
aOrADefaultSetO	db '                 or a default set of parameters is used',0Ah,0
					; DATA XREF: _s_server_main+550o
		align 10h
aNamed_curveArg	db ' -named_curve arg  - Elliptic curve name to use for ephemeral ECD'
					; DATA XREF: _s_server_main+565o
		db 'H keys.',0Ah
		db '                 Use "openssl ecparam -list_curves" for all names'
		db 0Ah
		db '                 (default is nistp256).',0Ah,0
aNbioRunWithNon	db ' -nbio         - Run with non-blocking IO',0Ah,0
					; DATA XREF: _s_server_main+57Ao
		align 10h
aNbio_testTestW	db ' -nbio_test    - test with the non-blocking test bio',0Ah,0
					; DATA XREF: _s_server_main+58Fo
		align 4
aCrlfConvertLfF	db ' -crlf         - convert LF from terminal into CRLF',0Ah,0
					; DATA XREF: _s_server_main+5A4o
		align 10h
aDebugPrintMore	db ' -debug        - Print more output',0Ah,0
					; DATA XREF: _s_server_main+5B9o
aMsgShowProtoco	db ' -msg          - Show protocol messages',0Ah,0
					; DATA XREF: _s_server_main+5CEo
		align 10h
aStatePrintTheS	db ' -state        - Print the SSL states',0Ah,0
					; DATA XREF: _s_server_main+5E3o
		align 4
aCapathArgPemFo	db ' -CApath arg   - PEM format directory of CA',27h,'s',0Ah,0
					; DATA XREF: _s_server_main+5F8o
		align 4
aCafileArgPemFo	db ' -CAfile arg   - PEM format file of CA',27h,'s',0Ah,0
					; DATA XREF: _s_server_main+60Do
		align 4
aNo_alt_chainsO	db ' -no_alt_chains - only ever use the first certificate chain found'
					; DATA XREF: _s_server_main+622o
		db 0Ah,0
		align 4
aNocertDonTUseA	db ' -nocert       - Don',27h,'t use any certificates (Anon-DH)',0Ah,0
					; DATA XREF: _s_server_main+637o
		align 10h
aCipherArgPlayW	db ' -cipher arg   - play with ',27h,'openssl ciphers',27h,' to see what go'
					; DATA XREF: _s_server_main+64Co
		db 'es here',0Ah,0
aServerprefUseS	db ' -serverpref   - Use server',27h,'s cipher preferences',0Ah,0
					; DATA XREF: _s_server_main+661o
		align 4
aQuietNoServerO	db ' -quiet        - No server output',0Ah,0
					; DATA XREF: _s_server_main+676o
		align 4
aNo_tmp_rsaDoNo	db ' -no_tmp_rsa   - Do not generate a tmp RSA key',0Ah,0
					; DATA XREF: _s_server_main+68Bo
aPsk_hintArgPsk	db ' -psk_hint arg - PSK identity hint to use',0Ah,0
					; DATA XREF: _s_server_main+6A0o
		align 4
aPskArgPskInHex	db ' -psk arg      - PSK in hex (without 0x)',0Ah,0
					; DATA XREF: _s_server_main+6B5o
		align 4
aSrpvfileFileTh	db ' -srpvfile file      - The verifier file for SRP',0Ah,0
					; DATA XREF: _s_server_main+6CAo
		align 4
aSrpuserseedStr	db ' -srpuserseed string - A seed string for a default user salt.',0Ah,0
					; DATA XREF: _s_server_main+6DFo
		align 4
aSsl2JustTalkSs	db ' -ssl2         - Just talk SSLv2',0Ah,0 ; DATA XREF: _s_server_main+6F4o
		align 4
aSsl3JustTalkSs	db ' -ssl3         - Just talk SSLv3',0Ah,0 ; DATA XREF: _s_server_main+709o
		align 10h
aTls1_2JustTalk	db ' -tls1_2       - Just talk TLSv1.2',0Ah,0
					; DATA XREF: _s_server_main+71Eo
aTls1_1JustTalk	db ' -tls1_1       - Just talk TLSv1.1',0Ah,0
					; DATA XREF: _s_server_main+733o
aTls1JustTalkTl	db ' -tls1         - Just talk TLSv1',0Ah,0 ; DATA XREF: _s_server_main+748o
		align 4
aDtls1JustTalkD	db ' -dtls1        - Just talk DTLSv1',0Ah,0
					; DATA XREF: _s_server_main+75Do
		align 10h
aTimeoutEnableT	db ' -timeout      - Enable timeouts',0Ah,0 ; DATA XREF: _s_server_main+772o
		align 4
aMtuSetLinkLaye	db ' -mtu          - Set link layer MTU',0Ah,0
					; DATA XREF: _s_server_main+787o
		align 4
aChainReadACert	db ' -chain        - Read a certificate chain',0Ah,0
					; DATA XREF: _s_server_main+79Co
		align 4
aNo_ssl2JustDis	db ' -no_ssl2      - Just disable SSLv2',0Ah,0
					; DATA XREF: _s_server_main+7B1o
		align 10h
aNo_ssl3JustDis	db ' -no_ssl3      - Just disable SSLv3',0Ah,0
					; DATA XREF: _s_server_main+7C6o
		align 4
aNo_tls1JustDis	db ' -no_tls1      - Just disable TLSv1',0Ah,0
					; DATA XREF: _s_server_main+7DBo
		align 10h
aNo_tls1_1JustD	db ' -no_tls1_1    - Just disable TLSv1.1',0Ah,0
					; DATA XREF: _s_server_main+7F0o
		align 4
aNo_tls1_2JustD	db ' -no_tls1_2    - Just disable TLSv1.2',0Ah,0
					; DATA XREF: _s_server_main+805o
		align 10h
aNo_dheDisableE	db ' -no_dhe       - Disable ephemeral DH',0Ah,0
					; DATA XREF: _s_server_main+81Ao
		align 4
aNo_ecdheDisabl	db ' -no_ecdhe     - Disable ephemeral ECDH',0Ah,0
					; DATA XREF: _s_server_main+82Fo
		align 4
aBugsTurnOnSslB	db ' -bugs         - Turn on SSL bug compatibility',0Ah,0
					; DATA XREF: _s_server_main+844o
aHackWorkaround	db ' -hack         - workaround for early Netscape code',0Ah,0
					; DATA XREF: _s_server_main+859o
		align 4
aWwwRespondToAG	db ' -www          - Respond to a ',27h,'GET /',27h,' with a status page',0Ah,0
					; DATA XREF: _s_server_main+86Eo
		align 4
aWwwRespondTo_0	db ' -WWW          - Respond to a ',27h,'GET /<path> HTTP/1.0',27h,' with f'
					; DATA XREF: _s_server_main+883o
		db 'ile ./<path>',0Ah,0
		align 4
aHttpRespondToA	db ' -HTTP         - Respond to a ',27h,'GET /<path> HTTP/1.0',27h,' with f'
					; DATA XREF: _s_server_main+898o
		db 'ile ./<path>',0Ah,0
		align 10h
aWithTheAssumpt	db '                 with the assumption it contains a complete HTTP '
					; DATA XREF: _s_server_main+8ADo
		db 'response.',0Ah,0
aEngineIdInitia	db ' -engine id    - Initialise and use the specified engine',0Ah,0
					; DATA XREF: _s_server_main+8C2o
		align 4
aId_prefixArgGe	db ' -id_prefix arg - Generate SSL/TLS session IDs prefixed by ',27h,'ar'
					; DATA XREF: _s_server_main+8D7o
		db 'g',27h,0Ah,0
aRandFileCfil_4	db ' -rand file%cfile%c...',0Ah,0 ; DATA XREF: _s_server_main+8FCo
		align 4
aServernameHost	db ' -servername host - servername for HostName TLS extension',0Ah,0
					; DATA XREF: _s_server_main+911o
		align 10h
aServername_fat	db ' -servername_fatal - on mismatch send fatal alert (default warnin'
					; DATA XREF: _s_server_main+926o
		db 'g alert)',0Ah,0
		align 4
aCert2ArgCertif	db ' -cert2 arg    - certificate file to use for servername',0Ah,0
					; DATA XREF: _s_server_main+93Bo
		align 4
aKey2ArgPrivate	db ' -key2 arg     - Private Key file to use for servername, in cert '
					; DATA XREF: _s_server_main+96Do
		db 'file if',0Ah,0
		align 4
aTlsextdebugHex	db ' -tlsextdebug  - hex dump of all TLS extensions received',0Ah,0
					; DATA XREF: _s_server_main+99Fo
		align 10h
aNo_ticketDisab	db ' -no_ticket    - disable use of RFC4507bis session tickets',0Ah,0
					; DATA XREF: _s_server_main+9B4o
aLegacy_renegot	db ' -legacy_renegotiation - enable use of legacy renegotiation (dang'
					; DATA XREF: _s_server_main+9C9o
		db 'erous)',0Ah,0
		align 4
aNextprotonegAr	db ' -nextprotoneg arg - set the advertised protocols for the NPN ext'
					; DATA XREF: _s_server_main+9DEo
		db 'ension (comma-separated list)',0Ah,0
aUse_srtpProfil	db ' -use_srtp profiles - Offer SRTP key management with a colon-sepa'
					; DATA XREF: _s_server_main+9F3o
		db 'rated profile list',0Ah,0
		align 10h
aKeymatexportLa	db ' -keymatexport label   - Export keying material using label',0Ah,0
					; DATA XREF: _s_server_main+A08o
		align 10h
aKeymatexportle	db ' -keymatexportlen len  - Export len bytes of keying material (def'
					; DATA XREF: _s_server_main+A1Do
		db 'ault 20)',0Ah,0
		align 4
aStatusRespondT	db ' -status           - respond to certificate status requests',0Ah,0
					; DATA XREF: _s_server_main+A32o
		align 4
aStatus_verbose	db ' -status_verbose   - enable status request verbose printout',0Ah,0
					; DATA XREF: _s_server_main+A47o
		align 4
aStatus_timeout	db ' -status_timeout n - status request responder timeout',0Ah,0
					; DATA XREF: _s_server_main+A5Co
		align 4
aStatus_urlUrlS	db ' -status_url URL   - status request fallback URL',0Ah,0
					; DATA XREF: _s_server_main+A71o
		align 4
aCanTUseHttpWww	db 'Can',27h,'t use -HTTP, -www or -WWW with DTLS',0Ah,0
					; DATA XREF: _s_server_main:loc_422B00o
aErrorGettin_13	db 'Error getting password',0Ah,0 ; DATA XREF: _s_server_main:loc_4226DFo
		align 4
aServerCertific	db 'server certificate private key file',0
					; DATA XREF: _s_server_main:loc_422522o
aServerCertif_0	db 'server certificate file',0 ; DATA XREF: _s_server_main+1486o
aSecondServer_0	db 'second server certificate private key file',0
					; DATA XREF: _s_server_main+14D3o
		align 4
aSecondServerCe	db 'second server certificate file',0 ; DATA XREF: _s_server_main+E26o
					; _s_server_main+151Co
		align 4
aSecondCertific	db 'second certificate private key file',0
					; DATA XREF: _s_server_main:loc_421EC4o
aWarningNotMu_3	db 'warning, not much extra random data, consider using the -rand opt'
					; DATA XREF: _s_server_main+1DEEo
		db 'ion',0Ah,0
aLdSemiRandom_5	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _s_server_main+EA3o
aWarningId_pr_0	db 'warning: id_prefix is too long, only one new session will be poss'
					; DATA XREF: _s_server_main:loc_422757o
					; _s_server_main:loc_422CE4o
		db 'ible',0Ah,0
		align 4
aWarningId_pref	db 'warning: id_prefix is too long if you use SSLv2',0Ah,0
					; DATA XREF: _s_server_main+10DBo
					; _s_server_main:loc_422B6Co
aErrorSettingId	db 'error setting ',27h,'id_prefix',27h,0Ah,0
					; DATA XREF: _s_server_main:loc_4226ECo
aId_prefixSSet_	db 'id_prefix ',27h,'%s',27h,' set.',0Ah,0 ; DATA XREF: _s_server_main+F6Ao
					; _s_server_main+1116o
		align 4
aSettingSeconda	db 'Setting secondary ctx parameters',0Ah,0
					; DATA XREF: _s_server_main:loc_422187o
aSettingTempDhP	db 'Setting temp DH parameters',0Ah,0 ; DATA XREF: _s_server_main+12AEo
					; _s_server_main+20C1o
		align 4
aUsingDefaultTe	db 'Using default temp DH parameters',0Ah,0
					; DATA XREF: _s_server_main:loc_422653o
aUnknownCurve_0	db 'unknown curve name (%s)',0Ah,0 ; DATA XREF: _s_server_main+1375o
aUnableToCrea_2	db 'unable to create curve (%s)',0Ah,0 ; DATA XREF: _s_server_main+1F55o
aUnableToCrea_1	db 'unable to create curve (nistp256)',0Ah,0
					; DATA XREF: _s_server_main+1CA8o
		align 4
aPskKeyGivenOrJ	db 'PSK key given or JPAKE in use, setting server callback',0Ah,0
					; DATA XREF: _s_server_main+17BEo
aErrorSettingPs	db 'error setting PSK identity hint to context',0Ah,0
					; DATA XREF: _s_server_main:loc_422EF0o
aErrorSetting_0	db 'error setting cipher list',0Ah,0 ; DATA XREF: _s_server_main:loc_422FE1o
		align 4
aCannotInitiali	db 'Cannot initialize SRP verifier file "%s":ret=%d',0Ah,0
					; DATA XREF: _s_server_main+19D9o
aSettingTempEcd	db 'Setting temp ECDH parameters',0Ah,0 ; DATA XREF: _s_server_main+16A8o
		align 4
aUsingDefault_0	db 'Using default temp ECDH parameters',0Ah,0
					; DATA XREF: _s_server_main:loc_422D5Do
aOcspResponse	db 'OCSP response: ',0  ; DATA XREF: _ocsp_resp_cb+30o
aNoResponseSent	db 'no response sent',0Ah,0 ; DATA XREF: _ocsp_resp_cb:loc_423FD0o
aResponseParseE	db 'response parse error',0Ah,0 ; DATA XREF: _ocsp_resp_cb:loc_423FF0o
asc_4657C0	db 0Ah			; DATA XREF: _ocsp_resp_cb+62o
		db '======================================',0Ah,0
		align 4
asc_4657EC	db '======================================',0Ah,0
					; DATA XREF: _ocsp_resp_cb+86o
aSrpParameters	db 'SRP parameters:',0Ah,0 ; DATA XREF: _ssl_srp_verify_param_cb:loc_424070o
aN		db 9,'N=',0             ; DATA XREF: _ssl_srp_verify_param_cb+65o
aG		db 0Ah			; DATA XREF: _ssl_srp_verify_param_cb+8Bo
		db 9,'g=',0
asc_46582E	db 0Ah,0		; DATA XREF: _ssl_srp_verify_param_cb+B1o
					; _next_proto_cb_0+E8o	...
aSrpParamNAndGR	db 'SRP param N and g rejected.',0Ah,0
					; DATA XREF: _ssl_srp_verify_param_cb:loc_42412Ao
		align 10h
aSrpParamNAndGA	db 'SRP param N and g are not known params, going to check deeper.',0Ah,0
					; DATA XREF: _ssl_srp_verify_param_cb:loc_424150o
aProtocolsAdver	db 'Protocols advertised by server: ',0
					; DATA XREF: _next_proto_cb_0:loc_424300o
asc_4658B1	db ', ',0               ; DATA XREF: _next_proto_cb_0+BAo
aPsk_client_cb	db 'psk_client_cb',0Ah,0 ; DATA XREF: _psk_client_cb:loc_4244D0o
		align 4
aNullReceivedPs	db 'NULL received PSK identity hint, continuing anyway',0Ah,0
					; DATA XREF: _psk_client_cb+1B8o
aReceivedPskIde	db 'Received PSK identity hint ',27h,'%s',27h,0Ah,0
					; DATA XREF: _psk_client_cb+152o
aS_9		db '%s',0               ; DATA XREF: _psk_client_cb+2Co
					; _s_client_main+16BBo
aCreatedIdentit	db 'created identity ',27h,'%s',27h,' len=%d',0Ah,0
					; DATA XREF: _psk_client_cb+1E8o
		align 4
aCouldNotConv_0	db 'Could not convert PSK key ',27h,'%s',27h,' to BIGNUM',0Ah,0
					; DATA XREF: _psk_client_cb+179o
		align 4
aPskBufferOfC_0	db 'psk buffer of callback is too small (%d) for key (%d)',0Ah,0
					; DATA XREF: _psk_client_cb+238o
aCreatedPskLenD	db 'created PSK len=%d',0Ah,0 ; DATA XREF: _psk_client_cb+264o
aErrorInPskClie	db 'Error in PSK client callback',0Ah,0
					; DATA XREF: _psk_client_cb:loc_4244B0o
asc_4659D1	db ' ',0                ; DATA XREF: _print_stuff+686o
aReused_0	db '---',0Ah            ; DATA XREF: _print_stuff+2Eo
		db 'Reused, ',0
aNew_1		db '---',0Ah            ; DATA XREF: _print_stuff:loc_424980o
		db 'New, ',0
byte_4659EA	db 0			; DATA XREF: _print_stuff+D5o
aNot_0		db ' NOT',0             ; DATA XREF: _print_stuff:loc_424970o
aNone_5		db 'NONE',0             ; DATA XREF: _print_stuff:loc_424990o
					; _print_stuff:loc_4249A0o
aCertificateCha	db '---',0Ah            ; DATA XREF: _print_stuff+372o
		db 'Certificate chain',0Ah,0
a2dSS		db '%2d s:%s',0Ah,0     ; DATA XREF: _print_stuff+3D0o
aIS		db '   i:%s',0Ah,0      ; DATA XREF: _print_stuff+40Co
asc_465A1F	db '---',0Ah,0          ; DATA XREF: _print_stuff:loc_424924o
					; _print_stuff:loc_424A8Fo
aServerCertif_1	db 'Server certificate',0Ah,0 ; DATA XREF: _print_stuff+465o
aSubjectS_1	db 'subject=%s',0Ah,0   ; DATA XREF: _print_stuff+4AFo
aIssuerS_1	db 'issuer=%s',0Ah,0    ; DATA XREF: _print_stuff+4DFo
		align 10h
aNoPeerCertific	db 'no peer certificate available',0Ah,0
					; DATA XREF: _print_stuff:loc_424E20o
		align 10h
aAcceptableClie	db '---',0Ah            ; DATA XREF: _print_stuff+515o
		db 'Acceptable client certificate CA names',0Ah,0
aNoClientCert_0	db '---',0Ah            ; DATA XREF: _print_stuff:loc_424DF0o
		db 'No client certificate CA names sent',0Ah,0
		align 4
aCiphersCommo_0	db '---',0Ah            ; DATA XREF: _print_stuff+5EBo
		db 'Ciphers common between both SSL endpoints:',0Ah,0
asc_465AF8	db '                ',0 ; DATA XREF: _print_stuff+658o
		align 4
aSslHandshakeHa	db '---',0Ah            ; DATA XREF: _print_stuff+6F2o
		db 'SSL handshake has read %ld bytes and written %ld bytes',0Ah,0
aSCipherIsS_0	db '%s, Cipher is %s',0Ah,0 ; DATA XREF: _print_stuff+67o
aServerPublicKe	db 'Server public key is %d bit',0Ah,0 ; DATA XREF: _print_stuff+91o
		align 4
aSecureRenego_0	db 'Secure Renegotiation IS%s supported',0Ah,0 ; DATA XREF: _print_stuff+DEo
aCompressionS	db 'Compression: %s',0Ah,0 ; DATA XREF: _print_stuff+11Ao
aExpansionS	db 'Expansion: %s',0Ah,0 ; DATA XREF: _print_stuff+13Eo
aNextProtocolD	db 'Next protocol: (%d) ',0 ; DATA XREF: _print_stuff+17Co
		align 4
aSrtpExtensio_0	db 'SRTP Extension negotiated, profile=%s',0Ah,0
					; DATA XREF: _print_stuff+1D2o
aKeyingMateri_1	db 'Keying material exporter:',0Ah,0 ; DATA XREF: _print_stuff+208o
aLabelS_0	db '    Label: ',27h,'%s',27h,0Ah,0 ; DATA XREF: _print_stuff+221o
aLengthIBytes_0	db '    Length: %i bytes',0Ah,0 ; DATA XREF: _print_stuff+23Ao
aS_client_c	db 's_client.c',0       ; DATA XREF: _print_stuff+252o
					; _ssl_give_srp_client_pwd_cb+Co ...
aError_2	db '    Error',0Ah,0    ; DATA XREF: _print_stuff+2BCo
aKeyingMateri_2	db '    Keying material: ',0 ; DATA XREF: _print_stuff:loc_424D80o
a02x_3		db '%02X',0             ; DATA XREF: _print_stuff+759o
aMallocFailur_0	db 'Malloc failure',0Ah,0
					; DATA XREF: _ssl_give_srp_client_pwd_cb:loc_424EB0o
aSrpUser	db 'SRP user',0         ; DATA XREF: _ssl_give_srp_client_pwd_cb+30o
aCanTReadPasswo	db 'Can',27h,'t read Password',0Ah,0
					; DATA XREF: _ssl_give_srp_client_pwd_cb:loc_424ED0o
aCanTUseSsl_get	db 'Can',27h,'t use SSL_get_servername',0Ah,0
					; DATA XREF: _ssl_servername_cb_0:loc_424F70o
aLocalhost	db 'localhost',0        ; DATA XREF: _s_client_main+15o
					; _s_client_main+5ACo
aOutOfMemory_7	db 'out of memory',0Ah,0 ; DATA XREF: _s_client_main:loc_42544Ao
aHost		db '-host',0            ; DATA XREF: _s_client_main+455o
aPort_0		db '-port',0            ; DATA XREF: _s_client_main+463o
aConnect	db '-connect',0         ; DATA XREF: _s_client_main:loc_425480o
aVerify_5	db '-verify',0          ; DATA XREF: _s_client_main:loc_425AA0o
aVerifyDepthI_1	db 'verify depth is %d',0Ah,0 ; DATA XREF: _s_client_main+B4Ao
aCert_1		db '-cert',0            ; DATA XREF: _s_client_main:loc_425B10o
aSess_out	db '-sess_out',0        ; DATA XREF: _s_client_main:loc_425B50o
aSess_in	db '-sess_in',0         ; DATA XREF: _s_client_main+BD8o
aCertform_0	db '-certform',0        ; DATA XREF: _s_client_main:loc_425E1Co
aVerify_retur_2	db '-verify_return_error',0 ; DATA XREF: _s_client_main+FC5o
aPrexit		db '-prexit',0          ; DATA XREF: _s_client_main:loc_426A70o
aCrlf_0		db '-crlf',0            ; DATA XREF: _s_client_main:loc_426B60o
; char aQuiet_1[]
aQuiet_1	db '-quiet',0           ; DATA XREF: _s_client_main+1BE8o
; char aIgn_eof[]
aIgn_eof	db '-ign_eof',0         ; DATA XREF: _s_client_main:loc_42702Bo
; char aNo_ign_eof[]
aNo_ign_eof	db '-no_ign_eof',0      ; DATA XREF: _s_client_main:loc_427247o
; char aPause[]
aPause		db '-pause',0           ; DATA XREF: _s_client_main:loc_4275D0o
; char aDebug_1[]
aDebug_1	db '-debug',0           ; DATA XREF: _s_client_main:loc_4275FCo
; char aTlsextdebug_0[]
aTlsextdebug_0	db '-tlsextdebug',0     ; DATA XREF: _s_client_main:loc_427721o
; char aStatus_1[]
aStatus_1	db '-status',0          ; DATA XREF: _s_client_main:loc_427A1Bo
; char aMsg_0[]
aMsg_0		db '-msg',0             ; DATA XREF: _s_client_main:loc_427B26o
; char aShowcerts[]
aShowcerts	db '-showcerts',0       ; DATA XREF: _s_client_main:loc_427C7Bo
; char aNbio_test_0[]
aNbio_test_0	db '-nbio_test',0       ; DATA XREF: _s_client_main:loc_427CE5o
; char aState_0[]
aState_0	db '-state',0           ; DATA XREF: _s_client_main:loc_427D11o
; char aPsk_identity[]
aPsk_identity	db '-psk_identity',0    ; DATA XREF: _s_client_main:loc_427D3Do
; char aPsk_0[]
aPsk_0		db '-psk',0             ; DATA XREF: _s_client_main:loc_427D78o
aNotAHexNumbe_0	db 'Not a hex number ',27h,'%s',27h,0Ah,0 ; DATA XREF: _s_client_main+2EB7o
; char aSrpuser[]
aSrpuser	db '-srpuser',0         ; DATA XREF: _s_client_main:loc_427DF5o
; char aSrppass[]
aSrppass	db '-srppass',0         ; DATA XREF: _s_client_main:loc_427E6Ao
; char aSrp_strength[]
aSrp_strength	db '-srp_strength',0    ; DATA XREF: _s_client_main:loc_427EB8o
		align 4
aSrpMinimalLeng	db 'SRP minimal length for N is %d',0Ah,0 ; DATA XREF: _s_client_main+2F6Co
; char aSrp_lateuser[]
aSrp_lateuser	db '-srp_lateuser',0    ; DATA XREF: _s_client_main:loc_427F27o
; char aSrp_moregrou_0[]
aSrp_moregrou_0	db '-srp_moregroups',0  ; DATA XREF: _s_client_main+2FB5o
; char aSsl3_0[]
aSsl3_0		db '-ssl3',0            ; DATA XREF: _s_client_main+2FD3o
; char aTls1_2_0[]
aTls1_2_0	db '-tls1_2',0          ; DATA XREF: _s_client_main+2FF1o
; char aTls1_1_0[]
aTls1_1_0	db '-tls1_1',0          ; DATA XREF: _s_client_main+300Fo
; char aTls1_0[]
aTls1_0		db '-tls1',0            ; DATA XREF: _s_client_main+302Do
; char aDtls1_0[]
aDtls1_0	db '-dtls1',0           ; DATA XREF: _s_client_main+304Bo
; char aFallback_scsv[]
aFallback_scsv	db '-fallback_scsv',0   ; DATA XREF: _s_client_main+3065o
; char aTimeout_0[]
aTimeout_0	db '-timeout',0         ; DATA XREF: _s_client_main:loc_428041o
; char aMtu_0[]
aMtu_0		db '-mtu',0             ; DATA XREF: _s_client_main:loc_4280A3o
; char aBugs_0[]
aBugs_0		db '-bugs',0            ; DATA XREF: _s_client_main:loc_428154o
; char aKeyform_5[]
aKeyform_5	db '-keyform',0         ; DATA XREF: _s_client_main:loc_428180o
; char aPass_2[]
aPass_2		db '-pass',0            ; DATA XREF: _s_client_main:loc_4281CBo
; char aKey_3[]
aKey_3		db '-key',0             ; DATA XREF: _s_client_main:loc_428207o
; char aReconnect[]
aReconnect	db '-reconnect',0       ; DATA XREF: _s_client_main:loc_428243o
; char aCapath_2[]
aCapath_2	db '-CApath',0          ; DATA XREF: _s_client_main:loc_42826Fo
; char aCafile_2[]
aCafile_2	db '-CAfile',0          ; DATA XREF: _s_client_main:loc_4282ABo
; char aNo_tls1_2_0[]
aNo_tls1_2_0	db '-no_tls1_2',0       ; DATA XREF: _s_client_main:loc_4282E7o
; char aNo_tls1_1_0[]
aNo_tls1_1_0	db '-no_tls1_1',0       ; DATA XREF: _s_client_main:loc_428313o
; char aNo_tls1_0[]
aNo_tls1_0	db '-no_tls1',0         ; DATA XREF: _s_client_main:loc_42833Fo
; char aNo_ssl3_0[]
aNo_ssl3_0	db '-no_ssl3',0         ; DATA XREF: _s_client_main:loc_42836Bo
; char aNo_ssl2_0[]
aNo_ssl2_0	db '-no_ssl2',0         ; DATA XREF: _s_client_main:loc_428397o
; char aNo_comp_0[]
aNo_comp_0	db '-no_comp',0         ; DATA XREF: _s_client_main:loc_4283C3o
; char aNo_ticket_0[]
aNo_ticket_0	db '-no_ticket',0       ; DATA XREF: _s_client_main:loc_4283EFo
; char aNextprotoneg_1[]
aNextprotoneg_1	db '-nextprotoneg',0    ; DATA XREF: _s_client_main:loc_42841Bo
; char aServerpref_0[]
aServerpref_0	db '-serverpref',0      ; DATA XREF: _s_client_main:loc_428457o
; char aLegacy_reneg_2[]
aLegacy_reneg_2	db '-legacy_renegotiation',0 ; DATA XREF: _s_client_main:loc_428483o
; char aLegacy_server_[]
aLegacy_server_	db '-legacy_server_connect',0 ; DATA XREF: _s_client_main:loc_4284AFo
; char aNo_legacy_serv[]
aNo_legacy_serv	db '-no_legacy_server_connect',0 ; DATA XREF: _s_client_main:loc_4284D8o
; char aCipher_0[]
aCipher_0	db '-cipher',0          ; DATA XREF: _s_client_main:loc_428504o
; char aNbio_0[]
aNbio_0		db '-nbio',0            ; DATA XREF: _s_client_main:loc_428540o
; char aStarttls_1[]
aStarttls_1	db '-starttls',0        ; DATA XREF: _s_client_main:loc_42856Co
; char aSmtp[]
aSmtp		db 'smtp',0             ; DATA XREF: _s_client_main+3614o
; char aPop3[]
aPop3		db 'pop3',0             ; DATA XREF: _s_client_main+362Co
; char aImap[]
aImap		db 'imap',0             ; DATA XREF: _s_client_main+3644o
; char aFtp[]
aFtp		db 'ftp',0              ; DATA XREF: _s_client_main+365Co
; char aXmpp[]
aXmpp		db 'xmpp',0             ; DATA XREF: _s_client_main+3670o
; char aEngine_19[]
aEngine_19	db '-engine',0          ; DATA XREF: _s_client_main:loc_42862Bo
; char aSsl_client_eng[]
aSsl_client_eng	db '-ssl_client_engine',0 ; DATA XREF: _s_client_main:loc_4286B3o
; char aRand_8[]
aRand_8		db '-rand',0            ; DATA XREF: _s_client_main:loc_4286EFo
; char aServername_0[]
aServername_0	db '-servername',0      ; DATA XREF: _s_client_main:loc_42872Bo
; char aUse_srtp_0[]
aUse_srtp_0	db '-use_srtp',0        ; DATA XREF: _s_client_main:loc_428767o
; char aKeymatexport_3[]
aKeymatexport_3	db '-keymatexport',0    ; DATA XREF: _s_client_main:loc_4287A2o
; char aKeymatexport_4[]
aKeymatexport_4	db '-keymatexportlen',0 ; DATA XREF: _s_client_main:loc_4287DDo
aUnknownOpti_15	db 'unknown option %s',0Ah,0 ; DATA XREF: _s_client_main+38A3o
aUsageS_clientA	db 'usage: s_client args',0Ah,0 ; DATA XREF: _s_client_main:loc_4254E0o
aHostHostUseCon	db ' -host host     - use -connect instead',0Ah,0
					; DATA XREF: _s_client_main+57Ao
aPortPortUseCon	db ' -port port     - use -connect instead',0Ah,0
					; DATA XREF: _s_client_main+58Fo
a4433		db '4433',0             ; DATA XREF: _s_client_main+5A4o
		align 4
aConnectHostPor	db ' -connect host:port - who to connect to (default is %s:%s)',0Ah,0
					; DATA XREF: _s_client_main+5B4o
aVerifyArgTur_1	db ' -verify arg   - turn on peer certificate verification',0Ah,0
					; DATA XREF: _s_client_main+5C9o
aVerify_retur_1	db ' -verify_return_error - return verification errors',0Ah,0
					; DATA XREF: _s_client_main+5DEo
aCertArgCerti_0	db ' -cert arg     - certificate file to use, PEM format assumed',0Ah,0
					; DATA XREF: _s_client_main+5F3o
		align 10h
aCertformArgC_0	db ' -certform arg - certificate format (PEM or DER) PEM default',0Ah,0
					; DATA XREF: _s_client_main+608o
		align 10h
aKeyArgPrivat_0	db ' -key arg      - Private key file to use, in cert file if',0Ah,0
					; DATA XREF: _s_client_main+61Do
		align 4
aNotSpecifiedBu	db '                 not specified but cert file is.',0Ah,0
					; DATA XREF: _s_client_main+632o
		align 10h
aKeyformArgKe_2	db ' -keyform arg  - key format (PEM or DER) PEM default',0Ah,0
					; DATA XREF: _s_client_main+647o
		align 4
aPassArgPriva_0	db ' -pass arg     - private key file pass phrase source',0Ah,0
					; DATA XREF: _s_client_main+65Co
		align 10h
aCapathArgPem_0	db ' -CApath arg   - PEM format directory of CA',27h,'s',0Ah,0
					; DATA XREF: _s_client_main+671o
		align 10h
aCafileArgPem_0	db ' -CAfile arg   - PEM format file of CA',27h,'s',0Ah,0
					; DATA XREF: _s_client_main+686o
		align 4
aNo_alt_chain_0	db ' -no_alt_chains - only ever use the first certificate chain found'
					; DATA XREF: _s_client_main+69Bo
		db 0Ah,0
		align 10h
aReconnectDropA	db ' -reconnect    - Drop and re-make the connection with the same Se'
					; DATA XREF: _s_client_main+6B0o
		db 'ssion-ID',0Ah,0
		align 4
aPauseSleep1Aft	db ' -pause        - sleep(1) after each read(2) and write(2) system '
					; DATA XREF: _s_client_main+6C5o
		db 'call',0Ah,0
		align 4
aPrexitPrintSes	db ' -prexit       - print session information even on connection fai'
					; DATA XREF: _s_client_main+6DAo
		db 'lure',0Ah,0
		align 4
aShowcertsShowA	db ' -showcerts    - show all certificates in the chain',0Ah,0
					; DATA XREF: _s_client_main+6EFo
		align 4
aDebugExtraOutp	db ' -debug        - extra output',0Ah,0 ; DATA XREF: _s_client_main+704o
		align 4
aMsgShowProto_0	db ' -msg          - Show protocol messages',0Ah,0
					; DATA XREF: _s_client_main+719o
		align 10h
aNbio_testMoreS	db ' -nbio_test    - more ssl protocol testing',0Ah,0
					; DATA XREF: _s_client_main+72Eo
aStatePrintTh_0	db ' -state        - print the ',27h,'ssl',27h,' states',0Ah,0
					; DATA XREF: _s_client_main+743o
		align 4
aNbioRunWithN_0	db ' -nbio         - Run with non-blocking IO',0Ah,0
					; DATA XREF: _s_client_main+758o
		align 4
aCrlfConvertL_0	db ' -crlf         - convert LF from terminal into CRLF',0Ah,0
					; DATA XREF: _s_client_main+76Do
		align 4
aQuietNoS_clien	db ' -quiet        - no s_client output',0Ah,0
					; DATA XREF: _s_client_main+782o
		align 4
aIgn_eofIgnoreI	db ' -ign_eof      - ignore input eof (default when -quiet)',0Ah,0
					; DATA XREF: _s_client_main+797o
		align 10h
aNo_ign_eofDonT	db ' -no_ign_eof   - don',27h,'t ignore input eof',0Ah,0
					; DATA XREF: _s_client_main+7ACo
		align 4
aPsk_identityAr	db ' -psk_identity arg - PSK identity',0Ah,0
					; DATA XREF: _s_client_main+7C1o
		align 10h
aPskArgPskInH_0	db ' -psk arg      - PSK in hex (without 0x)',0Ah,0
					; DATA XREF: _s_client_main+7D6o
		align 4
aSrpuserUserSrp	db ' -srpuser user     - SRP authentification for ',27h,'user',27h,0Ah,0
					; DATA XREF: _s_client_main+7EBo
		align 4
aSrppassArgPass	db ' -srppass arg      - password for ',27h,'user',27h,0Ah,0
					; DATA XREF: _s_client_main+800o
		align 10h
aSrp_lateuserSr	db ' -srp_lateuser     - SRP username into second ClientHello message'
					; DATA XREF: _s_client_main+815o
		db 0Ah,0
		align 4
aSrp_moregroups	db ' -srp_moregroups   - Tolerate other than the known g N values.',0Ah,0
					; DATA XREF: _s_client_main+82Ao
aSrp_strengthIn	db ' -srp_strength int - minimal length in bits for N (default %d).',0Ah
					; DATA XREF: _s_client_main+847o
		db 0
		align 4
aSsl2JustUseSsl	db ' -ssl2         - just use SSLv2',0Ah,0 ; DATA XREF: _s_client_main+85Co
		align 4
aSsl3JustUseSsl	db ' -ssl3         - just use SSLv3',0Ah,0 ; DATA XREF: _s_client_main+871o
		align 10h
aTls1_2JustUseT	db ' -tls1_2       - just use TLSv1.2',0Ah,0
					; DATA XREF: _s_client_main+886o
		align 4
aTls1_1JustUseT	db ' -tls1_1       - just use TLSv1.1',0Ah,0
					; DATA XREF: _s_client_main+89Bo
		align 4
aTls1JustUseTls	db ' -tls1         - just use TLSv1',0Ah,0 ; DATA XREF: _s_client_main+8B0o
		align 4
aDtls1JustUseDt	db ' -dtls1        - just use DTLSv1',0Ah,0 ; DATA XREF: _s_client_main+8C5o
		align 10h
aFallback_scsvS	db ' -fallback_scsv - send TLS_FALLBACK_SCSV',0Ah,0
					; DATA XREF: _s_client_main+8DAo
		align 4
aMtuSetTheLinkL	db ' -mtu          - set the link layer MTU',0Ah,0
					; DATA XREF: _s_client_main+8EFo
		align 4
aNo_tls1_2No_tl	db ' -no_tls1_2/-no_tls1_1/-no_tls1/-no_ssl3/-no_ssl2 - turn off that'
					; DATA XREF: _s_client_main+904o
		db ' protocol',0Ah,0
aBugsSwitchOnAl	db ' -bugs         - Switch on all SSL implementation bug workarounds'
					; DATA XREF: _s_client_main+919o
		db 0Ah,0
		align 4
aServerprefUs_0	db ' -serverpref   - Use server',27h,'s cipher preferences (only SSLv2)',0Ah
					; DATA XREF: _s_client_main+92Eo
		db 0
		align 4
aCipherPreferre	db ' -cipher       - preferred cipher to use, use the ',27h,'openssl cip'
					; DATA XREF: _s_client_main+943o
		db 'hers',27h,0Ah,0
		align 10h
aCommandToSeeWh	db '                 command to see what is available',0Ah,0
					; DATA XREF: _s_client_main+958o
		align 4
aStarttlsProtUs	db ' -starttls prot - use the STARTTLS command before starting TLS',0Ah,0
					; DATA XREF: _s_client_main+96Do
aForThoseProtoc	db '                 for those protocols that support it, where',0Ah,0
					; DATA XREF: _s_client_main+982o
		align 4
aProtDefinesWhi	db '                 ',27h,'prot',27h,' defines which one to assume.  Curre'
					; DATA XREF: _s_client_main+997o
		db 'ntly,',0Ah,0
		align 4
aOnlySmtpPop3Im	db '                 only "smtp", "pop3", "imap", "ftp" and "xmpp"',0Ah,0
					; DATA XREF: _s_client_main+9ACo
aAreSupported_	db '                 are supported.',0Ah,0 ; DATA XREF: _s_client_main+9C1o
		align 4
aEngineIdInit_0	db ' -engine id    - Initialise and use the specified engine',0Ah,0
					; DATA XREF: _s_client_main+9D6o
aRandFileCfil_5	db ' -rand file%cfile%c...',0Ah,0 ; DATA XREF: _s_client_main+9FBo
		align 10h
aSess_outArgFil	db ' -sess_out arg - file to write SSL session to',0Ah,0
					; DATA XREF: _s_client_main+A10o
		align 10h
aSess_inArgFile	db ' -sess_in arg  - file to read SSL session from',0Ah,0
					; DATA XREF: _s_client_main+A25o
aServernameHo_0	db ' -servername host  - Set TLS extension servername in ClientHello',0Ah
					; DATA XREF: _s_client_main+A3Ao
		db 0
		align 4
aTlsextdebugH_0	db ' -tlsextdebug      - hex dump of all TLS extensions received',0Ah,0
					; DATA XREF: _s_client_main+A4Fo
		align 4
aStatusRequestC	db ' -status           - request certificate status from server',0Ah,0
					; DATA XREF: _s_client_main+A64o
		align 4
aNo_ticketDis_0	db ' -no_ticket        - disable use of RFC4507bis session tickets',0Ah,0
					; DATA XREF: _s_client_main+A79o
aNextprotoneg_0	db ' -nextprotoneg arg - enable NPN extension, considering named prot'
					; DATA XREF: _s_client_main+A8Eo
		db 'ocols supported (comma-separated list)',0Ah,0
		align 10h
aLegacy_reneg_1	db ' -legacy_renegotiation - enable use of legacy renegotiation (dang'
					; DATA XREF: _s_client_main+AA3o
		db 'erous)',0Ah,0
		align 4
aUse_srtpProf_0	db ' -use_srtp profiles - Offer SRTP key management with a colon-sepa'
					; DATA XREF: _s_client_main+AB8o
		db 'rated profile list',0Ah,0
		align 4
aKeymatexport_1	db ' -keymatexport label   - Export keying material using label',0Ah,0
					; DATA XREF: _s_client_main+ACDo
		align 4
aKeymatexport_2	db ' -keymatexportlen len  - Export len bytes of keying material (def'
					; DATA XREF: _s_client_main+AE2o
		db 'ault 20)',0Ah,0
		align 10h
aErrorParsingNe	db 'Error parsing -nextprotoneg argument',0Ah,0
					; DATA XREF: _s_client_main:loc_426B05o
		align 4
aErrorGettingCl	db 'Error getting client auth engine',0Ah,0
					; DATA XREF: _s_client_main:loc_426BB2o
aErrorGettin_14	db 'Error getting password',0Ah,0 ; DATA XREF: _s_client_main+E42o
					; _s_client_main:loc_425F3Do
		align 4
aClientCertif_0	db 'client certificate private key file',0
					; DATA XREF: _s_client_main:loc_425CA1o
aClientCertif_1	db 'client certificate file',0 ; DATA XREF: _s_client_main+D68o
aWarningNotMu_4	db 'warning, not much extra random data, consider using the -rand opt'
					; DATA XREF: _s_client_main+1E96o
		db 'ion',0Ah,0
aLdSemiRandom_6	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _s_client_main+DE6o
aErrorSettingCl	db 'Error setting client auth engine',0Ah,0 ; DATA XREF: _s_client_main+F65o
		align 4
aPskKeyGivenO_0	db 'PSK key given or JPAKE in use, setting client callback',0Ah,0
					; DATA XREF: _s_client_main:loc_426BBFo
aErrorSetting_1	db 'error setting cipher list',0Ah,0 ; DATA XREF: _s_client_main:loc_426B12o
aUnableToSetSrp	db 'Unable to set SRP username',0Ah,0
					; DATA XREF: _s_client_main:loc_426E71o
aR_8		db 'r',0                ; DATA XREF: _s_client_main+1243o
aCanTOpenSessio	db 'Can',27h,'t open session file %s',0Ah,0
					; DATA XREF: _s_client_main+2286o
		align 4
aUnableToSetTls	db 'Unable to set TLS servername extension.',0Ah,0
					; DATA XREF: _s_client_main:loc_426E40o
aConnectErrnoD	db 'connect:errno=%d',0Ah,0 ; DATA XREF: _s_client_main+29D4o
aConnected08x	db 'CONNECTED(%08X)',0Ah,0 ; DATA XREF: _s_client_main+139Eo
aTurningOnNon_0	db 'turning on non blocking io',0Ah,0 ; DATA XREF: _s_client_main+2030o
aGetsocknameErr	db 'getsockname:errno=%d',0Ah,0 ; DATA XREF: _s_client_main+2744o
		align 4
aMtuTooSmall__0	db 'MTU too small. Must be at least %ld',0Ah,0
					; DATA XREF: _s_client_main+240Ao
aFailedToSetM_0	db 'Failed to set MTU',0Ah,0 ; DATA XREF: _s_client_main+1FF4o
aEhloOpenssl_cl	db 'EHLO openssl.client.net',0Dh,0Ah,0
					; DATA XREF: _s_client_main:loc_4277A5o
; char aStarttls[]
aStarttls	db 'STARTTLS',0         ; DATA XREF: _s_client_main+24EDo
					; _s_client_main+2886o
		align 4
aDidnTFoundSt_0	db 'didn',27h,'t found starttls in server response, try anyway...',0Ah,0
					; DATA XREF: _s_client_main+28ECo
aStarttls_0	db 'STARTTLS',0Dh,0Ah,0 ; DATA XREF: _s_client_main:loc_427891o
aStls		db 'STLS',0Dh,0Ah,0     ; DATA XREF: _s_client_main+258Co
a_Capability	db '. CAPABILITY',0Dh,0Ah,0 ; DATA XREF: _s_client_main+2486o
		align 10h
aDidnTFoundStar	db 'didn',27h,'t found STARTTLS in server response, try anyway...',0Ah,0
					; DATA XREF: _s_client_main+2553o
a_Starttls	db '. STARTTLS',0Dh,0Ah,0 ; DATA XREF: _s_client_main:loc_4274F8o
aAuthTls	db 'AUTH TLS',0Dh,0Ah,0 ; DATA XREF: _s_client_main+2633o
		align 4
aStreamStreamXm	db '<stream:stream xmlns:stream=',27h,'http://etherx.jabber.org/streams',27h
					; DATA XREF: _s_client_main+22F1o
		db ' xmlns=',27h,'jabber:client',27h,' to=',27h,'%s',27h,' version=',27h,'1.0',27h,'>',0
; char aStreamFeatures[]
aStreamFeatures	db '/stream:features>',0 ; DATA XREF: _s_client_main:loc_4272C0o
		align 4
; char aStarttlsXmlnsU[]
aStarttlsXmlnsU	db '<starttls xmlns=',27h,'urn:ietf:params:xml:ns:xmpp-tls',27h,0
					; DATA XREF: _s_client_main:loc_4272F0o
		align 4
aStarttlsXmln_0	db '<starttls xmlns=',27h,'urn:ietf:params:xml:ns:xmpp-tls',27h,'/>',0
					; DATA XREF: _s_client_main+2374o
; char aProceed[]
aProceed	db '<proceed',0         ; DATA XREF: _s_client_main+23A2o
aW_3		db 'w',0                ; DATA XREF: _s_client_main+1650o
		align 4
aErrorWritingSe	db 'Error writing session file %s',0Ah,0 ; DATA XREF: _s_client_main+2A71o
		align 4
aDropConnection	db 'drop connection and then reconnect',0Ah,0
					; DATA XREF: _s_client_main+2914o
aBadSelectD	db 'bad select %d',0Ah,0 ; DATA XREF: _s_client_main+2C60o
aTimeoutOccured	db 'TIMEOUT occured',0Ah,0 ; DATA XREF: _s_client_main+1E4Co
aWriteWBlock	db 'write W BLOCK',0Ah,0 ; DATA XREF: _s_client_main:loc_427B56o
aWriteRBlock	db 'write R BLOCK',0Ah,0 ; DATA XREF: _s_client_main:loc_427C43o
aWriteXBlock	db 'write X BLOCK',0Ah,0 ; DATA XREF: _s_client_main:loc_427B7Ao
aShutdown	db 'shutdown',0Ah,0     ; DATA XREF: _s_client_main+2D31o
aWriteErrnoD	db 'write:errno=%d',0Ah,0 ; DATA XREF: _s_client_main+2C20o
aDone_0		db 'DONE',0Ah,0         ; DATA XREF: _s_client_main+224Ao
					; _s_client_main+2B22o
aReadWBlock	db 'read W BLOCK',0Ah,0 ; DATA XREF: _s_client_main:loc_426923o
aReadRBlock_0	db 'read R BLOCK',0Ah,0 ; DATA XREF: _s_client_main:loc_426951o
aReadXBlock	db 'read X BLOCK',0Ah,0 ; DATA XREF: _s_client_main:loc_426909o
aReadErrnoD	db 'read:errno=%d',0Ah,0 ; DATA XREF: _s_client_main+18CFo
aClosed		db 'closed',0Ah,0       ; DATA XREF: _s_client_main+1A46o
aLf_num0_0	db 'lf_num == 0',0      ; DATA XREF: _s_client_main+2A07o
aRenegotiating	db 'RENEGOTIATING',0Ah,0 ; DATA XREF: _s_client_main:loc_427A68o
aHeartbeating_0	db 'HEARTBEATING',0Ah,0 ; DATA XREF: _s_client_main:loc_427AD6o
		align 4
off_467374	dd offset loc_4269FA	; DATA XREF: _s_client_main+18A6r
		dd offset loc_426996	; jump table for switch	statement
		dd offset loc_426951
		dd offset loc_426923
		dd offset loc_426909
		dd offset loc_42683D
		dd offset loc_4269C4
off_467390	dd offset loc_427C14	; DATA XREF: _s_client_main+21BEr
		dd offset loc_426996	; jump table for switch	statement
		dd offset loc_427C43
		dd offset loc_427B56
		dd offset loc_427B7A
		dd offset loc_427B63
		dd offset loc_427CA7
aClient_ident_0	db 'Client_identity',0  ; DATA XREF: .data:_psk_identityo
		align 10h
aUnableToCrea_3	db 'unable to CreateThread (%d)',0 ; DATA XREF: _Time_F_part_2+13o
aDtSDD		db '+DT:%s:%d:%d',0Ah,0 ; DATA XREF: _speed_main:loc_42E239o
					; _speed_main:loc_42E24Do ...
		align 4
aDoingSForDsOnD	db 'Doing %s for %ds on %d size blocks: ',0 ; DATA XREF: _speed_main+8A2o
					; _speed_main+AC2o ...
aRDSF		db '+R:%d:%s:%f',0Ah,0  ; DATA XREF: _speed_main:loc_42E22Fo
					; _speed_main:loc_42E243o ...
aDSSIn_2fs	db '%d %s',27h,'s in %.2fs',0Ah,0 ; DATA XREF: _speed_main+A19o
					; _speed_main+C39o ...
aDtpDSSD	db '+DTP:%d:%s:%s:%d',0Ah,0 ; DATA XREF: _speed_main:loc_42E7A7o
					; _speed_main:loc_42E7B1o ...
		align 4
aDoingDBitSSSFo	db 'Doing %d bit %s %s',27h,'s for %ds: ',0 ; DATA XREF: _speed_main+440Eo
					; _speed_main+469Ao ...
aR1LdD_2f	db '+R1:%ld:%d:%.2f',0Ah,0 ; DATA XREF: _speed_main+4873o
aLdDBitPrivateR	db '%ld %d bit private RSA',27h,'s in %.2fs',0Ah,0
					; DATA XREF: _speed_main:loc_42E86Ao
aR2LdD_2f	db '+R2:%ld:%d:%.2f',0Ah,0 ; DATA XREF: _speed_main+45DEo
aLdDBitPublicRs	db '%ld %d bit public RSA',27h,'s in %.2fs',0Ah,0
					; DATA XREF: _speed_main:loc_42D44Eo
aR3LdD_2f	db '+R3:%ld:%d:%.2f',0Ah,0 ; DATA XREF: _speed_main+5123o
		align 4
aLdDBitDsaSigns	db '%ld %d bit DSA signs in %.2fs',0Ah,0
					; DATA XREF: _speed_main:loc_42E874o
aR4LdD_2f	db '+R4:%ld:%d:%.2f',0Ah,0 ; DATA XREF: _speed_main+4EAEo
aLdDBitDsaVerif	db '%ld %d bit DSA verify in %.2fs',0Ah,0
					; DATA XREF: _speed_main:loc_42DF4Do
aR5LdD_2f	db '+R5:%ld:%d:%.2f',0Ah,0 ; DATA XREF: _speed_main+5372o
		align 10h
aLdDBitEcdsaSig	db '%ld %d bit ECDSA signs in %.2fs ',0Ah,0
					; DATA XREF: _speed_main:loc_42EAE6o
aR6LdD_2f	db '+R6:%ld:%d:%.2f',0Ah,0 ; DATA XREF: _speed_main:loc_42EBE1o
		align 4
aLdDBitEcdsaVer	db '%ld %d bit ECDSA verify in %.2fs',0Ah,0 ; DATA XREF: _speed_main+5EF1o
aR7LdD_2f	db '+R7:%ld:%d:%.2f',0Ah,0 ; DATA XREF: _speed_main+69F2o
aLdDBitEcdhOpsI	db '%ld %d-bit ECDH ops in %.2fs',0Ah,0 ; DATA XREF: _speed_main:loc_42FA1Do
; char aD_7[]
aD_7		db ':%d',0              ; DATA XREF: _speed_main:loc_42E1F0o
a7dBytes	db '%7d bytes',0        ; DATA XREF: _speed_main+56A8o
; char a_2f[]
a_2f		db ':%.2f',0            ; DATA XREF: _speed_main:loc_42E337o
a11_2f		db ' %11.2f ',0         ; DATA XREF: _speed_main+58BDo
aSpeed_c	db 'speed.c',0          ; DATA XREF: _speed_main+15Fo
					; _speed_main+189o
aOutOfMemory_8	db 'out of memory',0Ah,0 ; DATA XREF: _speed_main:loc_42EC54o
					; _speed_main:loc_42EC6Eo
aElapsed	db '-elapsed',0         ; DATA XREF: _speed_main+2B5o
aEvp		db '-evp',0             ; DATA XREF: _speed_main+2C5o
aNoEvpGiven	db 'no EVP given',0Ah,0 ; DATA XREF: _speed_main:loc_42F5D0o
		align 4
aSIsAnUnknown_0	db '%s is an unknown cipher or digest',0Ah,0 ; DATA XREF: _speed_main+5B3Co
aDecrypt_0	db '-decrypt',0         ; DATA XREF: _speed_main:loc_428E90o
aEngine_20	db '-engine',0          ; DATA XREF: _speed_main:loc_428EC0o
aNoEngineGiven	db 'no engine given',0Ah,0 ; DATA XREF: _speed_main:loc_42FA77o
aMr		db '-mr',0              ; DATA XREF: _speed_main:loc_428F10o
aMdc2		db 'mdc2',0             ; DATA XREF: _speed_main:loc_428F40o
					; .data:off_4558E4o
aMd4		db 'md4',0              ; DATA XREF: _speed_main:loc_428F60o
					; .data:off_4558E8o
aMd5		db 'md5',0              ; DATA XREF: _speed_main+3F0o
					; _speed_main:loc_429978o ...
aHmac_0		db 'hmac',0             ; DATA XREF: _speed_main:loc_42E835o
aSha1		db 'sha1',0             ; DATA XREF: _speed_main:loc_42EB96o
					; .data:off_4558F4o
aSha		db 'sha',0              ; DATA XREF: _speed_main+602Ao
aSha256		db 'sha256',0           ; DATA XREF: _speed_main:loc_42FA84o
					; .data:off_45593Co
aSha512		db 'sha512',0           ; DATA XREF: _speed_main:loc_42FB40o
					; .data:off_455940o
aWhirlpool	db 'whirlpool',0        ; DATA XREF: _speed_main:loc_42FB5Fo
					; _speed_main+7AEEo ...
aRipemd		db 'ripemd',0           ; DATA XREF: _speed_main:loc_42FB85o
aRmd160		db 'rmd160',0           ; DATA XREF: _speed_main+7015o
					; _speed_main+7B03o ...
aRipemd160	db 'ripemd160',0        ; DATA XREF: _speed_main+7025o
aRc4		db 'rc4',0              ; DATA XREF: _speed_main:loc_42FBC4o
					; _speed_main+7BFFo ...
aDesCbc		db 'des-cbc',0          ; DATA XREF: _speed_main:loc_42FBE8o
aDesEde3	db 'des-ede3',0         ; DATA XREF: _speed_main:loc_42FC07o
aAes128Cbc	db 'aes-128-cbc',0      ; DATA XREF: _speed_main+7097o
aAes192Cbc	db 'aes-192-cbc',0      ; DATA XREF: _speed_main:loc_42FC5Fo
aAes256Cbc	db 'aes-256-cbc',0      ; DATA XREF: _speed_main:loc_42FC7Eo
aAes128Ige	db 'aes-128-ige',0      ; DATA XREF: _speed_main+710Eo
aAes192Ige	db 'aes-192-ige',0      ; DATA XREF: _speed_main:loc_42FCE4o
aAes256Ige	db 'aes-256-ige',0      ; DATA XREF: _speed_main:loc_42FD03o
aCamellia128Cbc	db 'camellia-128-cbc',0 ; DATA XREF: _speed_main:loc_42FD22o
aCamellia192Cbc	db 'camellia-192-cbc',0 ; DATA XREF: _speed_main:loc_42FD41o
aCamellia256Cbc	db 'camellia-256-cbc',0 ; DATA XREF: _speed_main:loc_42FD60o
aOpenssl	db 'openssl',0          ; DATA XREF: _speed_main+71F0o
aDsa512		db 'dsa512',0           ; DATA XREF: _speed_main+7200o
aDsa1024	db 'dsa1024',0          ; DATA XREF: _speed_main:loc_42FDD6o
aDsa2048	db 'dsa2048',0          ; DATA XREF: _speed_main:loc_42FE0Do
aRsa512		db 'rsa512',0           ; DATA XREF: _speed_main:loc_42FE2Co
aRsa1024	db 'rsa1024',0          ; DATA XREF: _speed_main:loc_42FE4Bo
aRsa2048	db 'rsa2048',0          ; DATA XREF: _speed_main:loc_42FE6Ao
aRsa4096	db 'rsa4096',0          ; DATA XREF: _speed_main:loc_42FE89o
aRc2Cbc		db 'rc2-cbc',0          ; DATA XREF: _speed_main:loc_42FEA8o
aRc2		db 'rc2',0              ; DATA XREF: _speed_main+7338o
aIdeaCbc	db 'idea-cbc',0         ; DATA XREF: _speed_main:loc_42FED7o
aIdea_1		db 'idea',0             ; DATA XREF: _speed_main+7367o
aSeedCbc	db 'seed-cbc',0         ; DATA XREF: _speed_main:loc_42FF06o
aSeed_3		db 'seed',0             ; DATA XREF: _speed_main+7396o
aBfCbc		db 'bf-cbc',0           ; DATA XREF: _speed_main:loc_42FF35o
					; _speed_main+7B6Co
aBlowfish	db 'blowfish',0         ; DATA XREF: _speed_main+73C5o
					; _speed_main+7D8Eo
aBf		db 'bf',0               ; DATA XREF: _speed_main+73D5o
aCastCbc	db 'cast-cbc',0         ; DATA XREF: _speed_main:loc_42FF74o
aCast		db 'cast',0             ; DATA XREF: _speed_main+7404o
aCast5		db 'cast5',0            ; DATA XREF: _speed_main+7414o
aDes_1		db 'des',0              ; DATA XREF: _speed_main:loc_42FC36o
aAes		db 'aes',0              ; DATA XREF: _speed_main:loc_42FCADo
aGhash		db 'ghash',0            ; DATA XREF: _speed_main:loc_42FFB7o
					; .data:off_455954o
aCamellia	db 'camellia',0         ; DATA XREF: _speed_main:loc_42FD9Fo
aRsa		db 'rsa',0              ; DATA XREF: _speed_main+441Bo
					; _speed_main+46A7o ...
aDsa		db 'dsa',0              ; DATA XREF: _speed_main+4CE6o
					; _speed_main+4F57o ...
aEcdsap160	db 'ecdsap160',0        ; DATA XREF: _speed_main:loc_43004Ao
aEcdsap192	db 'ecdsap192',0        ; DATA XREF: _speed_main:loc_430069o
aEcdsap224	db 'ecdsap224',0        ; DATA XREF: _speed_main:loc_430088o
aEcdsap256	db 'ecdsap256',0        ; DATA XREF: _speed_main:loc_4300A7o
aEcdsap384	db 'ecdsap384',0        ; DATA XREF: _speed_main:loc_4300C6o
aEcdsap521	db 'ecdsap521',0        ; DATA XREF: _speed_main:loc_4300E5o
aEcdsak163	db 'ecdsak163',0        ; DATA XREF: _speed_main:loc_430104o
aEcdsak233	db 'ecdsak233',0        ; DATA XREF: _speed_main:loc_430123o
aEcdsak283	db 'ecdsak283',0        ; DATA XREF: _speed_main:loc_430142o
aEcdsak409	db 'ecdsak409',0        ; DATA XREF: _speed_main:loc_430161o
aEcdsak571	db 'ecdsak571',0        ; DATA XREF: _speed_main:loc_430180o
aEcdsab163	db 'ecdsab163',0        ; DATA XREF: _speed_main:loc_43019Fo
aEcdsab233	db 'ecdsab233',0        ; DATA XREF: _speed_main:loc_4301BEo
aEcdsab283	db 'ecdsab283',0        ; DATA XREF: _speed_main:loc_4301DDo
aEcdsab409	db 'ecdsab409',0        ; DATA XREF: _speed_main:loc_4301FCo
aEcdsab571	db 'ecdsab571',0        ; DATA XREF: _speed_main:loc_43021Bo
aEcdsa		db 'ecdsa',0            ; DATA XREF: _speed_main+51A8o
					; _speed_main+5D26o ...
aEcdhp160	db 'ecdhp160',0         ; DATA XREF: _speed_main:loc_4302F3o
aEcdhp192	db 'ecdhp192',0         ; DATA XREF: _speed_main:loc_430312o
aEcdhp224	db 'ecdhp224',0         ; DATA XREF: _speed_main:loc_430331o
aEcdhp256	db 'ecdhp256',0         ; DATA XREF: _speed_main:loc_430350o
aEcdhp384	db 'ecdhp384',0         ; DATA XREF: _speed_main:loc_43036Fo
aEcdhp521	db 'ecdhp521',0         ; DATA XREF: _speed_main:loc_43038Eo
aEcdhk163	db 'ecdhk163',0         ; DATA XREF: _speed_main:loc_4303ADo
aEcdhk233	db 'ecdhk233',0         ; DATA XREF: _speed_main:loc_4303CCo
aEcdhk283	db 'ecdhk283',0         ; DATA XREF: _speed_main:loc_4303EBo
aEcdhk409	db 'ecdhk409',0         ; DATA XREF: _speed_main:loc_43040Ao
aEcdhk571	db 'ecdhk571',0         ; DATA XREF: _speed_main:loc_430429o
aEcdhb163	db 'ecdhb163',0         ; DATA XREF: _speed_main:loc_430448o
aEcdhb233	db 'ecdhb233',0         ; DATA XREF: _speed_main:loc_430467o
aEcdhb283	db 'ecdhb283',0         ; DATA XREF: _speed_main:loc_430486o
aEcdhb409	db 'ecdhb409',0         ; DATA XREF: _speed_main:loc_4304A5o
aEcdhb571	db 'ecdhb571',0         ; DATA XREF: _speed_main:loc_4304C4o
aEcdh		db 'ecdh',0             ; DATA XREF: _speed_main+685Bo
					; _speed_main:loc_4304E3o
aErrorBadOption	db 'Error: bad option or value',0Ah,0 ; DATA XREF: _speed_main:loc_43059Co
asc_46793F	db 0Ah,0		; DATA XREF: _speed_main+7A31o
					; _speed_main+7B18o ...
aAvailableValue	db 'Available values:',0Ah,0 ; DATA XREF: _speed_main+7A46o
aMdc2_0		db 'mdc2     ',0        ; DATA XREF: _speed_main+7A5Bo
aMd4_0		db 'md4      ',0        ; DATA XREF: _speed_main+7A70o
aMd5_0		db 'md5      ',0        ; DATA XREF: _speed_main+7A85o
aHmac_1		db 'hmac     ',0        ; DATA XREF: _speed_main+7A9Ao
aSha1_0		db 'sha1     ',0        ; DATA XREF: _speed_main+7AAFo
aSha256_0	db 'sha256   ',0        ; DATA XREF: _speed_main+7AC4o
aSha512_0	db 'sha512   ',0        ; DATA XREF: _speed_main+7AD9o
aIdeaCbc_0	db 'idea-cbc ',0        ; DATA XREF: _speed_main+7B2Do
aSeedCbc_0	db 'seed-cbc ',0        ; DATA XREF: _speed_main+7B42o
aRc2Cbc_0	db 'rc2-cbc  ',0        ; DATA XREF: _speed_main+7B57o
aDesCbcDesEde3	db 'des-cbc  des-ede3 ',0 ; DATA XREF: _speed_main+7B96o
		align 4
aAes128CbcAes19	db 'aes-128-cbc aes-192-cbc aes-256-cbc ',0 ; DATA XREF: _speed_main+7BABo
		align 4
aAes128IgeAes19	db 'aes-128-ige aes-192-ige aes-256-ige ',0 ; DATA XREF: _speed_main+7BC0o
		align 4
aCamellia128C_3	db 'camellia-128-cbc camellia-192-cbc camellia-256-cbc ',0
					; DATA XREF: _speed_main+7BEAo
aRsa512Rsa1024R	db 'rsa512   rsa1024  rsa2048  rsa4096',0Ah,0 ; DATA XREF: _speed_main+7C29o
aDsa512Dsa1024D	db 'dsa512   dsa1024  dsa2048',0Ah,0 ; DATA XREF: _speed_main+7C3Eo
		align 10h
aEcdsap160Ecdsa	db 'ecdsap160 ecdsap192 ecdsap224 ecdsap256 ecdsap384 ecdsap521',0Ah,0
					; DATA XREF: _speed_main+7C53o
		align 10h
aEcdsak163Ecdsa	db 'ecdsak163 ecdsak233 ecdsak283 ecdsak409 ecdsak571',0Ah,0
					; DATA XREF: _speed_main+7C68o
		align 4
aEcdsab163Ecdsa	db 'ecdsab163 ecdsab233 ecdsab283 ecdsab409 ecdsab571',0Ah,0
					; DATA XREF: _speed_main+7C7Do
aEcdsa_0	db 'ecdsa',0Ah,0        ; DATA XREF: _speed_main+7C92o
		align 10h
aEcdhp160Ecdhp1	db 'ecdhp160  ecdhp192  ecdhp224 ecdhp256  ecdhp384  ecdhp521',0Ah,0
					; DATA XREF: _speed_main+7CA7o
		align 4
aEcdhk163Ecdhk2	db 'ecdhk163  ecdhk233  ecdhk283  ecdhk409  ecdhk571',0Ah,0
					; DATA XREF: _speed_main+7CBCo
		align 10h
aEcdhb163Ecdhb2	db 'ecdhb163  ecdhb233  ecdhb283  ecdhb409  ecdhb571',0Ah,0
					; DATA XREF: _speed_main+7CD1o
aEcdh_0		db 'ecdh',0Ah,0         ; DATA XREF: _speed_main+7CE6o
aIdea_2		db 'idea     ',0        ; DATA XREF: _speed_main+7CFBo
aSeed_4		db 'seed     ',0        ; DATA XREF: _speed_main+7D10o
aRc2_0		db 'rc2      ',0        ; DATA XREF: _speed_main+7D25o
aDes_2		db 'des      ',0        ; DATA XREF: _speed_main+7D3Ao
aAes_0		db 'aes      ',0        ; DATA XREF: _speed_main+7D4Fo
aCamellia_0	db 'camellia ',0        ; DATA XREF: _speed_main+7D64o
aRsa_0		db 'rsa      ',0        ; DATA XREF: _speed_main+7D79o
aAvailableOptio	db 'Available options:',0Ah,0 ; DATA XREF: _speed_main+7DCDo
		align 4
aEngineEUseE_15	db '-engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _speed_main+7DE2o
aEvpEUseEvpE_	db '-evp e          use EVP e.',0Ah,0 ; DATA XREF: _speed_main+7DF7o
		align 4
aDecryptTimeDec	db '-decrypt        time decryption instead of encryption (only EVP).'
					; DATA XREF: _speed_main+7E0Co
		db 0Ah,0
		align 10h
aMrProduceMachi	db '-mr             produce machine readable output.',0Ah,0
					; DATA XREF: _speed_main+7E21o
		align 4
aYouHaveChosenT	db 'You have chosen to measure elapsed time instead of user CPU time.'
					; DATA XREF: _speed_main:loc_42F9FBo
		db 0Ah,0
		align 4
aInternalErrorL	db 'internal error loading RSA key number %d',0Ah,0
					; DATA XREF: _speed_main+6E6Eo
aThisIsAKey___	db 'This is a key...',0 ; DATA XREF: _speed_main+64CAo
a0123456789ab	db '0123456789ab',0     ; DATA XREF: _speed_main+627Co
aRsaSignFailure	db 'RSA sign failure.  No RSA sign will be done.',0Ah,0
					; DATA XREF: _speed_main+438Ao
aPrivate	db 'private',0          ; DATA XREF: _speed_main+46AFo
aRsaSignFailu_0	db 'RSA sign failure',0Ah,0 ; DATA XREF: _speed_main+4825o
aRsaVerifyFai_0	db 'RSA verify failure.  No RSA verify will be done.',0Ah,0
					; DATA XREF: _speed_main:loc_42E7D1o
aPublic		db 'public',0           ; DATA XREF: _speed_main+4423o
aRsaVerifyFailu	db 'RSA verify failure',0Ah,0 ; DATA XREF: _speed_main+4594o
		align 4
aDsaSignFailure	db 'DSA sign failure.  No DSA sign will be done.',0Ah,0
					; DATA XREF: _speed_main+4C55o
aSign_1		db 'sign',0             ; DATA XREF: _speed_main+4F5Fo
					; _speed_main+51B0o
aDsaSignFailu_0	db 'DSA sign failure',0Ah,0 ; DATA XREF: _speed_main+50D5o
		align 10h
aDsaVerifyFai_0	db 'DSA verify failure.  No DSA verify will be done.',0Ah,0
					; DATA XREF: _speed_main:loc_42E803o
aVerify_6	db 'verify',0           ; DATA XREF: _speed_main+4CEEo
					; _speed_main+5D2Eo
aDsaVerifyFailu	db 'DSA verify failure',0Ah,0 ; DATA XREF: _speed_main+4E64o
aEcdsaFailure_	db 'ECDSA failure.',0Ah,0 ; DATA XREF: _speed_main:loc_42EB6Fo
		align 10h
aEcdsaSignFailu	db 'ECDSA sign failure.  No ECDSA sign will be done.',0Ah,0
					; DATA XREF: _speed_main+4A05o
aEcdsaSignFai_0	db 'ECDSA sign failure',0Ah,0 ; DATA XREF: _speed_main+5324o
		align 4
aEcdsaVerifyFai	db 'ECDSA verify failure.  No ECDSA verify will be done.',0Ah,0
					; DATA XREF: _speed_main+4A68o
aEcdsaVerifyF_0	db 'ECDSA verify failure',0Ah,0 ; DATA XREF: _speed_main+5EA3o
aEcdhFailure_	db 'ECDH failure.',0Ah,0 ; DATA XREF: _speed_main:loc_42E17Co
aEcdhKeyGenerat	db 'ECDH key generation failure.',0Ah,0 ; DATA XREF: _speed_main:loc_42DFFAo
		align 4
aEcdhComputatio	db 'ECDH computations don',27h,'t match.',0Ah,0
					; DATA XREF: _speed_main:loc_42FA46o
byte_467FC4	db 0			; DATA XREF: _speed_main+6863o
; char aS_20[]
aS_20		db '%s',0Ah,0           ; DATA XREF: _speed_main+613Eo
					; _speed_main+6166o
; char aOptions[]
aOptions	db 'options:',0         ; DATA XREF: _speed_main+617Eo
; char aS_10[]
aS_10		db '%s ',0              ; DATA XREF: _speed_main+6193o
					; _speed_main+61A8o ...
; char aS_11[]
aS_11		db 0Ah			; DATA XREF: _speed_main+6218o
		db '%s',0Ah,0
asc_467FDB	db '+H',0               ; DATA XREF: _speed_main+565Bo
		align 10h
aTheNumbersAreI	db 'The ',27h,'numbers',27h,' are in 1000s of bytes per second processed.',0Ah
					; DATA XREF: _speed_main+607Bo
		db 0
aType		db 'type        ',0     ; DATA XREF: _speed_main+60A3o
; char aFDS[]
aFDS		db '+F:%d:%s',0         ; DATA XREF: _speed_main+576Co
; char a13s[]
a13s		db '%-13s',0            ; DATA XREF: _speed_main+5904o
; char a11_2fk[]
a11_2fk		db ' %11.2fk',0         ; DATA XREF: _speed_main+58DAo
asc_468040	db ' ',0                ; DATA XREF: _speed_main:loc_42E4A1o
					; _speed_main:loc_42F8BAo ...
		align 4
; char a18ssignVerifyS[]
a18ssignVerifyS	db '%18ssign    verify    sign/s verify/s',0Ah,0
					; DATA XREF: _speed_main+5929o
					; _speed_main+6D7Bo ...
; char aF2UUFF[]
aF2UUFF		db '+F2:%u:%u:%f:%f',0Ah,0 ; DATA XREF: _speed_main+584Fo
; char aRsa4uBits8_6fs[]
aRsa4uBits8_6fs	db 'rsa %4u bits %8.6fs %8.6fs %8.1f %8.1f',0Ah,0
					; DATA XREF: _speed_main+596Do
; char aF3UUFF[]
aF3UUFF		db '+F3:%u:%u:%f:%f',0Ah,0 ; DATA XREF: _speed_main+6AB5o
					; _speed_main+6B16o ...
		align 4
; char aDsa4uBits8_6fs[]
aDsa4uBits8_6fs	db 'dsa %4u bits %8.6fs %8.6fs %8.1f %8.1f',0Ah,0
					; DATA XREF: _speed_main+6DC2o
					; _speed_main+6E2Eo ...
; char a30ssignVerifyS[]
a30ssignVerifyS	db '%30ssign    verify    sign/s verify/s',0Ah,0
					; DATA XREF: _speed_main+6D42o
; char aF4UUFF[]
aF4UUFF		db '+F4:%u:%u:%f:%f',0Ah,0 ; DATA XREF: _speed_main+6BCBo
; char a4uBitEcdsaS8_4[]
a4uBitEcdsaS8_4	db '%4u bit ecdsa (%s) %8.4fs %8.4fs %8.1f %8.1f',0Ah,0
					; DATA XREF: _speed_main+6C3Do
; char a30sopOpS[]
a30sopOpS	db '%30sop      op/s',0Ah,0 ; DATA XREF: _speed_main+6D62o
; char aF5UUFF[]
aF5UUFF		db '+F5:%u:%u:%f:%f',0Ah,0 ; DATA XREF: _speed_main+6CA8o
		align 4
; char a4uBitEcdhS8_4f[]
a4uBitEcdhS8_4f	db '%4u bit ecdh (%s) %8.4fs %8.1f',0Ah,0 ; DATA XREF: _speed_main+6D0Co
aSecp160r1	db 'secp160r1',0        ; DATA XREF: .rdata:_test_curves_names_37953o
aNistp192	db 'nistp192',0         ; DATA XREF: .rdata:00468224o
aNistp224	db 'nistp224',0         ; DATA XREF: .rdata:00468228o
aNistp256	db 'nistp256',0         ; DATA XREF: .rdata:0046822Co
aNistp384	db 'nistp384',0         ; DATA XREF: .rdata:00468230o
aNistp521	db 'nistp521',0         ; DATA XREF: .rdata:00468234o
aNistk163	db 'nistk163',0         ; DATA XREF: .rdata:00468238o
aNistk233	db 'nistk233',0         ; DATA XREF: .rdata:0046823Co
aNistk283	db 'nistk283',0         ; DATA XREF: .rdata:00468240o
aNistk409	db 'nistk409',0         ; DATA XREF: .rdata:00468244o
aNistk571	db 'nistk571',0         ; DATA XREF: .rdata:00468248o
aNistb163	db 'nistb163',0         ; DATA XREF: .rdata:0046824Co
aNistb233	db 'nistb233',0         ; DATA XREF: .rdata:00468250o
aNistb283	db 'nistb283',0         ; DATA XREF: .rdata:00468254o
aNistb409	db 'nistb409',0         ; DATA XREF: .rdata:00468258o
aNistb571	db 'nistb571',0         ; DATA XREF: .rdata:0046825Co
		align 10h
_test_curves_names_37953 dd offset aSecp160r1 ;	DATA XREF: _speed_main+6C27r
					; _speed_main+6CF6r
					; "secp160r1"
		dd offset aNistp192	; "nistp192"
		dd offset aNistp224	; "nistp224"
		dd offset aNistp256	; "nistp256"
		dd offset aNistp384	; "nistp384"
		dd offset aNistp521	; "nistp521"
		dd offset aNistk163	; "nistk163"
		dd offset aNistk233	; "nistk233"
		dd offset aNistk283	; "nistk283"
		dd offset aNistk409	; "nistk409"
		dd offset aNistk571	; "nistk571"
		dd offset aNistb163	; "nistb163"
		dd offset aNistb233	; "nistb233"
		dd offset aNistb283	; "nistb283"
		dd offset aNistb409	; "nistb409"
		dd offset aNistb571	; "nistb571"
_test_curves_bits_37954	dd 0A0h		; DATA XREF: _speed_main:loc_42DD00r
					; _speed_main:loc_42E87Er ...
		dd 0C0h, 0E0h, 100h, 180h, 209h, 0A3h, 0E9h, 11Bh, 199h
		dd 23Bh, 0A3h, 0E9h, 11Bh, 199h, 23Bh
_test_curves_37952 dd 2C5h		; DATA XREF: _speed_main+4995r
					; _speed_main+5425r
		dd 199h, 2C9h, 19Fh, 2CBh, 2CCh, 2D1h, 2D6h, 2D9h, 2DBh
		dd 2DDh, 2D3h, 2D7h, 2DAh, 2DCh, 2DEh
_dsa_bits_37951	dd 200h			; DATA XREF: _speed_main+4CBFr
					; _speed_main:loc_42DAB0r
		dd 400h, 800h
_rsa_bits_37946	dd 200h			; DATA XREF: _speed_main+43F4r
					; _speed_main:loc_42D200r ...
		dd 400h, 800h, 1000h, 0
_ckey32_37927	dd 78563412h, 0F0DEBC9Ah, 9A785634h, 12F0DEBCh,	0BC9A7856h
					; DATA XREF: _speed_main+78Ao
		dd 3412F0DEh, 0DEBC9A78h, 563412F0h
_ckey24_37926	dd 78563412h, 0F0DEBC9Ah, 9A785634h, 12F0DEBCh,	0BC9A7856h
					; DATA XREF: _speed_main+76Co
		dd 3412F0DEh, 2	dup(0)
_key32_37925	dd 78563412h, 0F0DEBC9Ah, 9A785634h, 12F0DEBCh,	0BC9A7856h
					; DATA XREF: _speed_main+730o
		dd 3412F0DEh, 0DEBC9A78h, 563412F0h
_key24_37924	dd 78563412h, 0F0DEBC9Ah, 9A785634h, 12F0DEBCh,	0BC9A7856h
					; DATA XREF: _speed_main+712o
		dd 3412F0DEh
_key16_37923	dd 78563412h, 0F0DEBC9Ah, 9A785634h, 12F0DEBCh ; DATA XREF: _speed_main+6F4o
					; _speed_main+74Eo ...
_rsa_data_length_37948 dd 13Eh		; DATA XREF: _speed_main+64Dr
		dd 260h, 4A7h, 92Dh
_rsa_data_37947	dd offset _test512	; DATA XREF: _speed_main:loc_4291C0r
		dd offset _test1024
		dd offset _test2048
		dd offset _test4096
_lengths	dd 10h			; DATA XREF: _speed_main+888r
					; _speed_main+AA8r ...
		dd 40h,	100h, 400h, 2000h
dword_4683BC	dd 32646Dh		; DATA XREF: .data:_nameso
aHmacMd5	db 'hmac(md5)',0        ; DATA XREF: .data:off_4558F0o
aDesCbc_0	db 'des cbc',0          ; DATA XREF: .data:off_455900o
aDesEde3_0	db 'des ede3',0         ; DATA XREF: .data:off_455904o
aIdeaCbc_1	db 'idea cbc',0         ; DATA XREF: .data:off_455908o
aSeedCbc_1	db 'seed cbc',0         ; DATA XREF: .data:off_45590Co
aRc2Cbc_1	db 'rc2 cbc',0          ; DATA XREF: .data:off_455910o
aRc53212Cbc	db 'rc5-32/12 cbc',0    ; DATA XREF: .data:00455914o
aBlowfishCbc	db 'blowfish cbc',0     ; DATA XREF: .data:off_455918o
aCastCbc_0	db 'cast cbc',0         ; DATA XREF: .data:off_45591Co
aAes128Cbc_0	db 'aes-128 cbc',0      ; DATA XREF: .data:off_455920o
aAes192Cbc_0	db 'aes-192 cbc',0      ; DATA XREF: .data:off_455924o
aAes256Cbc_0	db 'aes-256 cbc',0      ; DATA XREF: .data:off_455928o
aCamellia128C_7	db 'camellia-128 cbc',0 ; DATA XREF: .data:off_45592Co
aCamellia192C_0	db 'camellia-192 cbc',0 ; DATA XREF: .data:off_455930o
aCamellia256C_0	db 'camellia-256 cbc',0 ; DATA XREF: .data:off_455934o
aEvp_0		db 'evp',0              ; DATA XREF: .data:off_455938o
aAes128Ige_0	db 'aes-128 ige',0      ; DATA XREF: .data:off_455948o
aAes192Ige_0	db 'aes-192 ige',0      ; DATA XREF: .data:off_45594Co
aAes256Ige_0	db 'aes-256 ige',0      ; DATA XREF: .data:off_455950o
		align 10h
_rnd_seed	db 'string to make the random number generator think it has entropy',0
					; DATA XREF: _speed_main+48FEo
					; _speed_main+4953o ...
flt_4684E0	dd 10000.0		; DATA XREF: _speed_main+5793r
flt_4684E4	dd 1000.0		; DATA XREF: _speed_main:loc_42E450r
flt_4684E8	dd 1.0			; DATA XREF: _speed_main+6C8Br
					; _speed_main+6CE8r
		align 20h
aDelay		db 'DELAY',0Ah,0        ; DATA XREF: _doConnection:loc_430A40o
aError		db 'ERROR',0Ah,0        ; DATA XREF: _doConnection:loc_430AB0o
aVerifyErrorS	db 'verify error:%s',0Ah,0 ; DATA XREF: _doConnection+12Ao
aLocalhost4433	db 'localhost:4433',0   ; DATA XREF: _s_time_main+9o
					; _s_time_main+38Co ...
aConnect_0	db '-connect',0         ; DATA XREF: _s_time_main+10Eo
; char aUsageS_timeArg[]
aUsageS_timeArg	db 'usage: s_time <args>',0Ah,0 ; DATA XREF: _s_time_main:loc_430EC0o
		align 10h
; char aConnectHostP_0[]
aConnectHostP_0	db '-connect host:port - host:port to connect to (default is %s)',0Ah,0
					; DATA XREF: _s_time_main+394o
		align 10h
; char aNbioRunWithN_1[]
aNbioRunWithN_1	db '-nbio         - Run with non-blocking IO',0
					; DATA XREF: _s_time_main+3A0o
		align 4
; char aSsl2JustUseS_0[]
aSsl2JustUseS_0	db '-ssl2         - Just use SSLv2',0 ; DATA XREF: _s_time_main+3ACo
		align 4
; char aSsl3JustUseS_0[]
aSsl3JustUseS_0	db '-ssl3         - Just use SSLv3',0 ; DATA XREF: _s_time_main+3B8o
		align 4
; char aBugsTurnOnSs_0[]
aBugsTurnOnSs_0	db '-bugs         - Turn on SSL bug compatibility',0
					; DATA XREF: _s_time_main+3C4o
		align 4
; char aNewJustTimeNew[]
aNewJustTimeNew	db '-new          - Just time new connections',0
					; DATA XREF: _s_time_main+3D0o
		align 4
; char aReuseJustTimeC[]
aReuseJustTimeC	db '-reuse        - Just time connection reuse',0
					; DATA XREF: _s_time_main+3DCo
		align 4
; char aWwwPageRetriev[]
aWwwPageRetriev	db '-www page     - Retrieve ',27h,'page',27h,' from the site',0
					; DATA XREF: _s_time_main+3E8o
aReuse		db '-reuse',0           ; DATA XREF: _s_time_main+126o
aNew_2		db '-new',0             ; DATA XREF: _s_time_main:loc_430D60o
aVerify_7	db '-verify',0          ; DATA XREF: _s_time_main:loc_430D90o
aVerifyDepthI_2	db 'verify depth is %d',0Ah,0 ; DATA XREF: _s_time_main+295o
aCert_2		db '-cert',0            ; DATA XREF: _s_time_main:loc_430E00o
aKey_4		db '-key',0             ; DATA XREF: _s_time_main:loc_430E40o
aCapath_3	db '-CApath',0          ; DATA XREF: _s_time_main+31Ao
aCafile_3	db '-CAfile',0          ; DATA XREF: _s_time_main:loc_430F57o
aCipher_1	db '-cipher',0          ; DATA XREF: _s_time_main+431o
aNbio_1		db '-nbio',0            ; DATA XREF: _s_time_main:loc_431316o
aWww_1		db '-www',0             ; DATA XREF: _s_time_main+7F0o
aWwwOptionTooLo	db '-www option too long',0Ah,0 ; DATA XREF: _s_time_main+839o
aBugs_1		db '-bugs',0            ; DATA XREF: _s_time_main:loc_431662o
aSsl3_1		db '-ssl3',0            ; DATA XREF: _s_time_main:loc_431787o
aTime		db '-time',0            ; DATA XREF: _s_time_main+C61o
aTimeMustBe0	db 'time must be > 0',0Ah,0 ; DATA XREF: _s_time_main+CA3o
aUnknownOpti_16	db 'unknown option %s',0Ah,0 ; DATA XREF: _s_time_main+CF8o
; char aSsl_cipher[]
aSsl_cipher	db 'SSL_CIPHER',0       ; DATA XREF: _s_time_main:loc_43173Ao
aNoCipherSpecif	db 'No CIPHER specified',0Ah,0 ; DATA XREF: _s_time_main+C2Fo
		align 4
; char aCollectingConn[]
aCollectingConn	db 'Collecting connection statistics for %d seconds',0Ah,0
					; DATA XREF: _s_time_main+8ACo
aGetSHttp1_0	db 'GET %s HTTP/1.0',0Dh,0Ah ; DATA XREF: _s_time_main+545o
					; _s_time_main+684o ...
		db 0Dh,0Ah,0
		align 10h
; char aDConnectionsIn[]
aDConnectionsIn	db 0Ah			; DATA XREF: _s_time_main+AD6o
					; _s_time_main+B91o
		db 0Ah
		db '%d connections in %.2fs; %.2f connections/user sec, bytes read %l'
		db 'd',0Ah,0
		align 4
; char aDConnections_0[]
aDConnections_0	db '%d connections in %ld real seconds, %ld bytes read per connection'
					; DATA XREF: _s_time_main+B0Co
					; _s_time_main+BD8o
		db 0Ah,0
		align 4
; char aNowTimingWithS[]
aNowTimingWithS	db 0Ah			; DATA XREF: _s_time_main+517o
		db 0Ah
		db 'Now timing with session id reuse.',0
aUnableToGetCon	db 'Unable to get connection',0Ah,0 ; DATA XREF: _s_time_main+CCCo
; char aStarting[]
aStarting	db 'starting',0         ; DATA XREF: _s_time_main+61Eo
		align 4
flt_468894	dd 0.0			; DATA XREF: _s_time_main+AA2r
					; _s_time_main+B6Fr
		align 10h
aPassPhrase	db 'pass phrase',0      ; DATA XREF: _password_callback+EDo
aOutOfMemory_9	db 'Out of memory',0Ah,0 ; DATA XREF: _password_callback:loc_431D1Fo
					; _password_callback:loc_431D43o ...
aApps_c		db 'apps.c',0           ; DATA XREF: _password_callback+28Eo
					; _chopup_args+185o ...
aUserInterfaceE	db 'User interface error',0Ah,0 ; DATA XREF: _password_callback+249o
aAborted	db 'aborted!',0Ah,0     ; DATA XREF: _password_callback+2F5o
aErrorReadingSS	db 'Error reading %s %s',0 ; DATA XREF: _load_netscape_key+100o
aFile		db 'file:',0            ; DATA XREF: _app_get_pass_part_0:loc_4320B0o
aR_2		db 'r',0                ; DATA XREF: _app_get_pass_part_0+F3o
					; _load_certs+2Ao ...
aCanTOpenFileS	db 'Can',27h,'t open file %s',0Ah,0 ; DATA XREF: _app_get_pass_part_0+114o
aStdin_2	db 'stdin',0            ; DATA XREF: _app_get_pass_part_0+A0o
					; _load_certs+19Fo ...
aCanTOpenBioFor	db 'Can',27h,'t open BIO for stdin',0Ah,0
					; DATA XREF: _app_get_pass_part_0+D6o
		align 4
aInvalidPasswor	db 'Invalid password argument "%s"',0Ah,0
					; DATA XREF: _app_get_pass_part_0+134o
aErrorReading_2	db 'Error reading password from BIO',0Ah,0
					; DATA XREF: _app_get_pass_part_0:loc_432170o
byte_468975	db 3 dup(0)		; DATA XREF: _load_pkcs12_constprop_4+30o
					; _load_pkcs12_constprop_4:loc_4321F4o
aErrorLoadingPk	db 'Error loading PKCS12 file for %s',0Ah,0
					; DATA XREF: _load_pkcs12_constprop_4+124o
		align 4
aPasspharseCall	db 'Passpharse callback error for %s',0Ah,0
					; DATA XREF: _load_pkcs12_constprop_4+184o
		align 10h
aMacVerifyError	db 'Mac verify error (wrong password?) in PKCS12 file for %s',0Ah,0
					; DATA XREF: _load_pkcs12_constprop_4+154o
aPkcs12		db 'PKCS12',0           ; DATA XREF: _str2fmt+32o
aPkcs12_0	db 'pkcs12',0           ; DATA XREF: _str2fmt:loc_4323EEo
; char aP12[]
aP12		db 'P12',0              ; DATA XREF: _str2fmt+B2o
; char aP12_0[]
aP12_0		db 'p12',0              ; DATA XREF: _str2fmt+CDo
aSubject_4	db 'subject=',0         ; DATA XREF: _dump_cert_text+30o
aIssuer_3	db 0Ah			; DATA XREF: _dump_cert_text+76o
		db 'issuer=',0
asc_468A22	db 0Ah,0		; DATA XREF: _dump_cert_text+92o
					; _print_name+4Eo ...
aOpensslApplica	db 'OpenSSL application user interface',0 ; DATA XREF: _setup_ui_method+3o
aPass_3		db 'pass:',0            ; DATA XREF: _app_passwd:loc_432949o
					; _app_passwd:loc_432A5Ao
aEnv		db 'env:',0             ; DATA XREF: _app_passwd+51o
					; _app_passwd:loc_4329C0o
		align 4
aCanTReadEnviro	db 'Can',27h,'t read environment variable %s',0Ah,0
					; DATA XREF: _app_passwd+205o
					; _app_passwd+234o
aOid_section	db 'oid_section',0      ; DATA XREF: _add_oid_section+Bo
aProblemLoading	db 'problem loading oid section %s',0Ah,0 ; DATA XREF: _add_oid_section+E8o
aProblemCreatin	db 'problem creating object %s=%s',0Ah,0 ; DATA XREF: _add_oid_section+AEo
aErrorOpeningSS	db 'Error opening %s %s',0Ah,0 ; DATA XREF: _load_cert+10Co
					; _load_key+25Co ...
aCertificate_3	db 'certificate',0      ; DATA XREF: _load_cert:loc_432E61o
aErrorReadingHe	db 'Error reading header on certificate',0Ah,0 ; DATA XREF: _load_cert+1F8o
		align 4
aBadInputForm_8	db 'bad input format specified for %s',0Ah,0 ; DATA XREF: _load_cert+81o
					; _load_certs+E8o ...
aUnableToLoadCe	db 'unable to load certificate',0Ah,0 ; DATA XREF: _load_cert:loc_432ED0o
aNoKeyfileSpeci	db 'no keyfile specified',0Ah,0 ; DATA XREF: _load_key:loc_433070o
					; _load_pubkey:loc_43357Bo
aNoEngineSpecif	db 'no engine specified',0Ah,0 ; DATA XREF: _load_key:loc_433090o
					; _load_pubkey:loc_4333B4o
aCannotLoadSFro	db 'cannot load %s from engine',0Ah,0 ; DATA XREF: _load_key+2F8o
		align 4
aBadInputForm_9	db 'bad input format specified for key file',0Ah,0
					; DATA XREF: _load_key+1EBo
					; _load_pubkey:loc_433560o
aUnableToLoadS	db 'unable to load %s',0Ah,0 ; DATA XREF: _load_key+108o
					; _load_pubkey+108o ...
aCertificates	db 'certificates',0     ; DATA XREF: _load_certs+13Ao
aCrls		db 'CRLs',0             ; DATA XREF: _load_crls+13Ao
; char aNone_6[]
aNone_6		db 'none',0             ; DATA XREF: _set_ext_copy+9o
; char aCopy[]
aCopy		db 'copy',0             ; DATA XREF: _set_ext_copy:loc_433A70o
; char aCopyall[]
aCopyall	db 'copyall',0          ; DATA XREF: _set_ext_copy:loc_433AA0o
aErrorLoading_4	db 'Error loading file %s',0Ah,0 ; DATA XREF: _setup_verify+124o
aErrorLoading_5	db 'Error loading directory %s',0Ah,0 ; DATA XREF: _setup_verify+154o
aAuto		db 'auto',0             ; DATA XREF: _setup_engine+17o
aEnablingAutoEn	db 'enabling auto ENGINE support',0Ah,0
					; DATA XREF: _setup_engine:loc_434000o
aDynamic	db 'dynamic',0          ; DATA XREF: _setup_engine:loc_433F70o
aSo_path	db 'SO_PATH',0          ; DATA XREF: _setup_engine+10Eo
aLoad		db 'LOAD',0             ; DATA XREF: _setup_engine+132o
aSet_user_inter	db 'SET_USER_INTERFACE',0 ; DATA XREF: _setup_engine+66o
aCanTUseThatEng	db 'can',27h,'t use that engine',0Ah,0
					; DATA XREF: _setup_engine:loc_434020o
aEngineSSet_	db 'engine "%s" set.',0Ah,0 ; DATA XREF: _setup_engine+9Ao
aInvalidEngineS	db 'invalid engine "%s"',0Ah,0 ; DATA XREF: _setup_engine+156o
aErrorConfiguri	db 'Error configuring OpenSSL',0Ah,0 ; DATA XREF: _load_config:loc_4340A0o
asc_468CCB	db '/',0                ; DATA XREF: _make_config_name+4Ao
aOpenssl_cnf_0	db 'openssl.cnf',0      ; DATA XREF: _make_config_name+5Eo
		align 4
aUnableToLoadNu	db 'unable to load number from %s',0Ah,0 ; DATA XREF: _load_serial+184o
		align 4
aErrorConvertin	db 'error converting number from bin to BIGNUM',0Ah,0
					; DATA XREF: _load_serial:loc_434330o
aFileNameTooLon	db 'file name too long',0Ah,0 ; DATA XREF: _save_serial:loc_434470o
					; _rotate_serial:loc_4347A0o ...
aS_S		db '%s.%s',0            ; DATA XREF: _save_serial+48o
					; _rotate_serial+51o ...
		align 4
aErrorConvert_0	db 'error converting serial to ASN.1 format',0Ah,0
					; DATA XREF: _save_serial:loc_434500o
aUnableToRename	db 'unable to rename %s to %s',0Ah,0 ; DATA XREF: _rotate_serial+163o
					; _rotate_serial+1E0o ...
; char aReason[]
aReason		db 'reason',0           ; DATA XREF: _rotate_serial+178o
					; _rotate_serial+1F5o ...
aUnableToOpenS	db 'unable to open ',27h,'%s',27h,0Ah,0 ; DATA XREF: _load_index+26Co
					; _save_index:loc_434F6Co
aS_attr		db '%s.attr',0          ; DATA XREF: _load_index+72o
					; _save_index+53o ...
aErrorOnLineL_5	db 'error on line %ld of db attribute file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _load_index+1F8o
aUnique_subje_0	db 'unique_subject',0   ; DATA XREF: _load_index+104o
aErrorCreatingS	db 'error creating serial number index:(%ld,%ld,%ld)',0Ah,0
					; DATA XREF: _index_index+E8o
		align 4
aErrorCreatingN	db 'error creating name index:(%ld,%ld,%ld)',0Ah,0
					; DATA XREF: _index_index+A9o
aYes_2		db 'yes',0              ; DATA XREF: _save_index:loc_434F50o
aNo_3		db 'no',0               ; DATA XREF: _save_index+155o
aS_attr_S	db '%s.attr.%s',0       ; DATA XREF: _save_index+85o
					; _rotate_index+73o ...
aUnique_subje_1	db 'unique_subject = %s',0Ah,0 ; DATA XREF: _save_index+15Eo
off_468E6C	dd offset loc_4359F0, offset loc_4359E0, offset	locret_4359E5
					; DATA XREF: _parse_yesno+1Cr
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5 ; jump table for switch statement
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	loc_4359F0, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset loc_4359F0, offset locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset loc_4359E0, offset locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset loc_4359E0
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset loc_4359F0, offset locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset loc_4359F0
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	locret_4359E5, offset loc_4359E0
		dd offset locret_4359E5, offset	locret_4359E5, offset locret_4359E5
		dd offset locret_4359E5, offset	loc_4359E0
aMallocError	db 'malloc error',0Ah,0 ; DATA XREF: _parse_name:loc_435D80o
					; _parse_name:loc_435DC3o ...
		align 4
aSubjectDoesNot	db 'Subject does not start with ',27h,'/',27h,'.',0Ah,0
					; DATA XREF: _parse_name+B2o
		align 4
aEscapeCharacte	db 'escape character at end of string',0Ah,0
					; DATA XREF: _parse_name:loc_435D60o
		align 4
aEndOfStringEnc	db 'end of string encountered while processing type of subject name e'
					; DATA XREF: _parse_name+15Eo
		db 'lement #%d',0Ah,0
		align 4
aSubjectAttribu	db 'Subject Attribute %s has no known NID, skipped',0Ah,0
					; DATA XREF: _parse_name+416o
aNoValueProvide	db 'No value provided for Subject Attribute %s, skipped',0Ah,0
					; DATA XREF: _parse_name+235o
aPolicy_1	db '-policy',0          ; DATA XREF: _args_verify+16o
aInvalidPolicyS	db 'Invalid Policy "%s"',0Ah,0 ; DATA XREF: _args_verify+414o
aPurpose_0	db '-purpose',0         ; DATA XREF: _args_verify:loc_435F40o
aUnrecognizedPu	db 'unrecognized purpose',0Ah,0 ; DATA XREF: _args_verify:loc_436210o
aVerify_depth	db '-verify_depth',0    ; DATA XREF: _args_verify:loc_436040o
aInvalidDepth	db 'invalid depth',0Ah,0 ; DATA XREF: _args_verify:loc_436330o
aAttime		db '-attime',0          ; DATA XREF: _args_verify:loc_4360B0o
; char aLi[]
aLi		db '%li',0              ; DATA XREF: _args_verify+254o
aErrorParsingTi	db 'Error parsing timestamp %s',0Ah,0 ; DATA XREF: _args_verify+444o
aIgnore_critica	db '-ignore_critical',0 ; DATA XREF: _args_verify:loc_436170o
aIssuer_checks	db '-issuer_checks',0   ; DATA XREF: _args_verify+300o
aCrl_check	db '-crl_check',0       ; DATA XREF: _args_verify:loc_4362F0o
aCrl_check_all	db '-crl_check_all',0   ; DATA XREF: _args_verify:loc_43635Ao
aPolicy_check	db '-policy_check',0    ; DATA XREF: _args_verify:loc_43638Bo
aExplicit_polic	db '-explicit_policy',0 ; DATA XREF: _args_verify:loc_4363BCo
aInhibit_any	db '-inhibit_any',0     ; DATA XREF: _args_verify:loc_4363EDo
; char aInhibit_map[]
aInhibit_map	db '-inhibit_map',0     ; DATA XREF: _args_verify:loc_43641Co
; char aX509_strict[]
aX509_strict	db '-x509_strict',0     ; DATA XREF: _args_verify+5B8o
; char aExtended_crl[]
aExtended_crl	db '-extended_crl',0    ; DATA XREF: _args_verify:loc_436492o
; char aUse_deltas[]
aUse_deltas	db '-use_deltas',0      ; DATA XREF: _args_verify:loc_4364CDo
; char aPolicy_print[]
aPolicy_print	db '-policy_print',0    ; DATA XREF: _args_verify+669o
; char aCheck_ss_sig[]
aCheck_ss_sig	db '-check_ss_sig',0    ; DATA XREF: _args_verify:loc_436543o
; char aNo_alt_chains[]
aNo_alt_chains	db '-no_alt_chains',0   ; DATA XREF: _args_verify:loc_43657Eo
aTrue		db 'True',0             ; DATA XREF: _policies_print+39o
aFalse		db 'False',0            ; DATA XREF: _policies_print:loc_436850o
aRequireExplici	db 'Require explicit Policy: %s',0Ah,0 ; DATA XREF: _policies_print+42o
aAuthority	db 'Authority',0        ; DATA XREF: _policies_print+5Co
aSPolicies	db '%s Policies:',0     ; DATA XREF: _policies_print+64o
					; _policies_print+CFo
aEmpty		db ' <empty>',0Ah,0     ; DATA XREF: _policies_print:loc_436870o
					; _policies_print:loc_436890o
aUser		db 'User',0             ; DATA XREF: _policies_print+C7o
		align 4
aToGetMeaningfu	db 'To get meaningful results, run this program on idle system.',0Ah,0
					; DATA XREF: _app_tminterval+CAo
aEsc_2253	db 'esc_2253',0         ; DATA XREF: .rdata:_ex_tbl_37134o
aEsc_ctrl	db 'esc_ctrl',0         ; DATA XREF: .rdata:0046938Co
aEsc_msb	db 'esc_msb',0          ; DATA XREF: .rdata:00469398o
aUse_quote	db 'use_quote',0        ; DATA XREF: .rdata:004693A4o
aUtf8_3		db 'utf8',0             ; DATA XREF: .rdata:004693B0o
aIgnore_type	db 'ignore_type',0      ; DATA XREF: .rdata:004693BCo
aShow_type	db 'show_type',0        ; DATA XREF: .rdata:004693C8o
aDump_all	db 'dump_all',0         ; DATA XREF: .rdata:004693D4o
aDump_nostr	db 'dump_nostr',0       ; DATA XREF: .rdata:004693E0o
aDump_der	db 'dump_der',0         ; DATA XREF: .rdata:004693ECo
aCompat		db 'compat',0           ; DATA XREF: .rdata:004693F8o
aSep_comma_plus	db 'sep_comma_plus',0   ; DATA XREF: .rdata:00469404o
aSep_comma_pl_0	db 'sep_comma_plus_space',0 ; DATA XREF: .rdata:00469410o
aSep_semi_plus_	db 'sep_semi_plus_space',0 ; DATA XREF: .rdata:0046941Co
aSep_multiline	db 'sep_multiline',0    ; DATA XREF: .rdata:00469428o
aDn_rev		db 'dn_rev',0           ; DATA XREF: .rdata:00469434o
aNofname	db 'nofname',0          ; DATA XREF: .rdata:00469440o
aSname		db 'sname',0            ; DATA XREF: .rdata:0046944Co
aLname		db 'lname',0            ; DATA XREF: .rdata:00469458o
aAlign		db 'align',0            ; DATA XREF: .rdata:00469464o
aOid_0		db 'oid',0              ; DATA XREF: .rdata:00469470o
aSpace_eq	db 'space_eq',0         ; DATA XREF: .rdata:0046947Co
aDump_unknown	db 'dump_unknown',0     ; DATA XREF: .rdata:00469488o
aRfc2253	db 'RFC2253',0          ; DATA XREF: .rdata:00469494o
aOneline	db 'oneline',0          ; DATA XREF: .rdata:004694A0o
aMultiline	db 'multiline',0        ; DATA XREF: .rdata:004694ACo
aCa_default	db 'ca_default',0       ; DATA XREF: .rdata:004694B8o
					; .rdata:004695ACo
		align 10h
_ex_tbl_37134	dd offset aEsc_2253	; DATA XREF: _set_name_ex+8o
					; "esc_2253"
		dd 1, 0
		dd offset aEsc_ctrl	; "esc_ctrl"
		dd 2, 0
		dd offset aEsc_msb	; "esc_msb"
		dd 4, 0
		dd offset aUse_quote	; "use_quote"
		dd 8, 0
		dd offset aUtf8_3	; "utf8"
		dd 10h,	0
		dd offset aIgnore_type	; "ignore_type"
		dd 20h,	0
		dd offset aShow_type	; "show_type"
		dd 40h,	0
		dd offset aDump_all	; "dump_all"
		dd 80h,	0
		dd offset aDump_nostr	; "dump_nostr"
		dd 100h, 0
		dd offset aDump_der	; "dump_der"
		dd 200h, 0
		dd offset aCompat	; "compat"
		align 10h
		dd 0FFFFFFFFh
		dd offset aSep_comma_plus ; "sep_comma_plus"
		dd 10000h, 0F0000h
		dd offset aSep_comma_pl_0 ; "sep_comma_plus_space"
		dd 20000h, 0F0000h
		dd offset aSep_semi_plus_ ; "sep_semi_plus_space"
		dd 30000h, 0F0000h
		dd offset aSep_multiline ; "sep_multiline"
		dd 40000h, 0F0000h
		dd offset aDn_rev	; "dn_rev"
		dd 100000h, 0
		dd offset aNofname	; "nofname"
		dd 2 dup(600000h)
		dd offset aSname	; "sname"
		dd 0
		dd 600000h
		dd offset aLname	; "lname"
		dd 200000h, 600000h
		dd offset aAlign	; "align"
		dd 2000000h, 0
		dd offset aOid_0	; "oid"
		dd 400000h, 600000h
		dd offset aSpace_eq	; "space_eq"
		dd 800000h, 0
		dd offset aDump_unknown	; "dump_unknown"
		dd 1000000h, 0
		dd offset aRfc2253	; "RFC2253"
		dd 1110317h, 0FFFFFFFFh
		dd offset aOneline	; "oneline"
		dd 82031Fh, 0FFFFFFFFh
		dd offset aMultiline	; "multiline"
		dd 2A40006h, 0FFFFFFFFh
		dd offset aCa_default	; "ca_default"
		dd 2A40006h, 0FFFFFFFFh, 3 dup(0)
aCompatible	db 'compatible',0       ; DATA XREF: .rdata:_cert_tbl_37129o
aNo_header	db 'no_header',0        ; DATA XREF: .rdata:004695B8o
aNo_version	db 'no_version',0       ; DATA XREF: .rdata:004695C4o
aNo_serial	db 'no_serial',0        ; DATA XREF: .rdata:004695D0o
aNo_signame	db 'no_signame',0       ; DATA XREF: .rdata:004695DCo
aNo_validity	db 'no_validity',0      ; DATA XREF: .rdata:004695E8o
aNo_subject	db 'no_subject',0       ; DATA XREF: .rdata:004695F4o
aNo_issuer	db 'no_issuer',0        ; DATA XREF: .rdata:00469600o
aNo_pubkey	db 'no_pubkey',0        ; DATA XREF: .rdata:0046960Co
aNo_extensions	db 'no_extensions',0    ; DATA XREF: .rdata:00469618o
aNo_sigdump	db 'no_sigdump',0       ; DATA XREF: .rdata:00469624o
aNo_aux		db 'no_aux',0           ; DATA XREF: .rdata:00469630o
aNo_attributes	db 'no_attributes',0    ; DATA XREF: .rdata:0046963Co
aExt_default	db 'ext_default',0      ; DATA XREF: .rdata:00469648o
aExt_error	db 'ext_error',0        ; DATA XREF: .rdata:00469654o
aExt_parse	db 'ext_parse',0        ; DATA XREF: .rdata:00469660o
aExt_dump	db 'ext_dump',0         ; DATA XREF: .rdata:0046966Co
		align 20h
_cert_tbl_37129	dd offset aCompatible	; DATA XREF: _set_cert_exo
					; "compatible"
		align 8
		dd 0FFFFFFFFh
		dd offset aCa_default	; "ca_default"
		dd 93h,	0FFFFFFFFh
		dd offset aNo_header	; "no_header"
		dd 1, 0
		dd offset aNo_version	; "no_version"
		dd 2, 0
		dd offset aNo_serial	; "no_serial"
		dd 4, 0
		dd offset aNo_signame	; "no_signame"
		dd 8, 0
		dd offset aNo_validity	; "no_validity"
		dd 20h,	0
		dd offset aNo_subject	; "no_subject"
		dd 40h,	0
		dd offset aNo_issuer	; "no_issuer"
		dd 10h,	0
		dd offset aNo_pubkey	; "no_pubkey"
		dd 80h,	0
		dd offset aNo_extensions ; "no_extensions"
		dd 100h, 0
		dd offset aNo_sigdump	; "no_sigdump"
		dd 200h, 0
		dd offset aNo_aux	; "no_aux"
		dd 400h, 0
		dd offset aNo_attributes ; "no_attributes"
		dd 800h, 0
		dd offset aExt_default	; "ext_default"
		dd 0
		dd 0F0000h
		dd offset aExt_error	; "ext_error"
		dd 10000h, 0F0000h
		dd offset aExt_parse	; "ext_parse"
		dd 20000h, 0F0000h
		dd offset aExt_dump	; "ext_dump"
		dd 30000h, 0F0000h, 4 dup(0)
dbl_469688	dq 1.0e-7		; DATA XREF: _app_tminterval+136r
		align 20h
aDepthD		db 'depth=%d ',0        ; DATA XREF: _verify_callback+2Do
asc_4696AA	db 0Ah,0		; DATA XREF: _verify_callback+73o
					; _verify_callback+11Eo ...
aNoCert		db '<no cert>',0Ah,0    ; DATA XREF: _verify_callback:loc_436E30o
aVerifyErrorNum	db 'verify error:num=%d:%s',0Ah,0 ; DATA XREF: _verify_callback+1D0o
aIssuer_4	db 'issuer= ',0         ; DATA XREF: _verify_callback:loc_436D70o
aNotbefore_0	db 'notBefore=',0       ; DATA XREF: _verify_callback:loc_436D50o
aNotafter_0	db 'notAfter=',0        ; DATA XREF: _verify_callback:loc_436D00o
aVerifyReturnD	db 'verify return:%d',0Ah,0 ; DATA XREF: _verify_callback+C4o
		align 10h
off_469700	dd offset loc_436CB0	; DATA XREF: _verify_callback+99r
		dd offset loc_436CB0	; jump table for switch	statement
		dd offset loc_436D70
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436D50
		dd offset loc_436D00
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436D50
		dd offset loc_436D00
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CB0
		dd offset loc_436CBB
aUnableToGetCer	db 'unable to get certificate from ',27h,'%s',27h,0Ah,0
					; DATA XREF: _set_cert_stuff+E4o
		align 4
aUnableToGetPri	db 'unable to get private key from ',27h,'%s',27h,0Ah,0
					; DATA XREF: _set_cert_stuff+94o
		align 10h
aPrivateKeyDoes	db 'Private key does not match the certificate public key',0Ah,0
					; DATA XREF: _set_cert_stuff:loc_436EC0o
					; _set_cert_key_stuff:loc_436F90o
aErrorSettingCe	db 'error setting certificate',0Ah,0
					; DATA XREF: _set_cert_key_stuff:loc_436FB0o
aErrorSettingPr	db 'error setting private key',0Ah,0
					; DATA XREF: _set_cert_key_stuff:loc_436FE0o
		align 10h
aReadFromPPLuBy	db 'read from %p [%p] (%lu bytes => %ld (0x%lX))',0Ah,0
					; DATA XREF: _bio_dump_callback+ACo
		align 10h
aWriteToPPLuByt	db 'write to %p [%p] (%lu bytes => %ld (0x%lX))',0Ah,0
					; DATA XREF: _bio_dump_callback+5Co
aSsl_connect	db 'SSL_connect',0      ; DATA XREF: _apps_ssl_info_callback:loc_437110o
aSsl_accept	db 'SSL_accept',0       ; DATA XREF: _apps_ssl_info_callback+1Co
aUndefined_0	db 'undefined',0        ; DATA XREF: _apps_ssl_info_callback:loc_4371B0o
aRead		db 'read',0             ; DATA XREF: _apps_ssl_info_callback:loc_4371F0o
aWrite		db 'write',0            ; DATA XREF: _apps_ssl_info_callback+76o
aSS_4		db '%s:%s',0Ah,0        ; DATA XREF: _apps_ssl_info_callback+39o
aSsl3AlertSSS	db 'SSL3 alert %s:%s:%s',0Ah,0 ; DATA XREF: _apps_ssl_info_callback+99o
aSFailedInS	db '%s:failed in %s',0Ah,0 ; DATA XREF: _apps_ssl_info_callback+124o
aSErrorInS	db '%s:error in %s',0Ah,0 ; DATA XREF: _apps_ssl_info_callback+DEo
asc_469936	db '>>>',0              ; DATA XREF: _msg_cb+2Bo
asc_46993A	db '<<<',0              ; DATA XREF: _msg_cb:loc_437310o
a???		db '???',0              ; DATA XREF: _msg_cb:loc_43734Bo
					; _msg_cb:loc_4374C0o ...
aSsl2_0		db 'SSL 2.0',0          ; DATA XREF: _msg_cb:loc_4374F0o
byte_46994A	db 0			; DATA XREF: _msg_cb:loc_437270o
					; _msg_cb+9Co ...
a???_1		db ' ???',0             ; DATA XREF: _msg_cb:loc_43777Bo
					; _msg_cb:loc_4377C6o ...
aError_3	db ', ERROR:',0         ; DATA XREF: _msg_cb+3F5o _msg_cb+5CBo
aClientHello	db ', CLIENT-HELLO',0   ; DATA XREF: _msg_cb+3A9o
aClientMasterKe	db ', CLIENT-MASTER-KEY',0 ; DATA XREF: _msg_cb+3B8o
aClientFinished	db ', CLIENT-FINISHED',0 ; DATA XREF: _msg_cb+44Fo
aServerHello	db ', SERVER-HELLO',0   ; DATA XREF: _msg_cb+440o
aServerVerify	db ', SERVER-VERIFY',0  ; DATA XREF: _msg_cb+431o
aServerFinished	db ', SERVER-FINISHED',0 ; DATA XREF: _msg_cb+422o
aRequestCertifi	db ', REQUEST-CERTIFICATE',0 ; DATA XREF: _msg_cb+413o
aClientCertif_2	db ', CLIENT-CERTIFICATE',0 ; DATA XREF: _msg_cb+404o
a???_0		db ', ???',0            ; DATA XREF: _msg_cb+1A1o _msg_cb+374o
aWarning	db ', warning',0        ; DATA XREF: _msg_cb:loc_43759Do
aFatal		db ', fatal',0          ; DATA XREF: _msg_cb:loc_43779Ao
aDtls1_0Bad	db 'DTLS 1.0 (bad) ',0  ; DATA XREF: _msg_cb:loc_4374D0o
aDtls1_0_0	db 'DTLS 1.0 ',0        ; DATA XREF: _msg_cb+60o
aTls1_2_1	db 'TLS 1.2 ',0         ; DATA XREF: _msg_cb:loc_4374E0o
aTls1_1_1	db 'TLS 1.1 ',0         ; DATA XREF: _msg_cb:loc_437360o
aTls1_0_0	db 'TLS 1.0 ',0         ; DATA XREF: _msg_cb:loc_437323o
aSsl3_0_0	db 'SSL 3.0 ',0         ; DATA XREF: _msg_cb:loc_437370o
aUnknown_psk_id	db ' unknown_psk_identity',0 ; DATA XREF: _msg_cb:loc_4376F9o
aBad_certificat	db ' bad_certificate_hash_value',0 ; DATA XREF: _msg_cb:loc_43766Do
		align 4
aBad_certific_0	db ' bad_certificate_status_response',0 ; DATA XREF: _msg_cb:loc_437677o
aUnrecognized_n	db ' unrecognized_name',0 ; DATA XREF: _msg_cb:loc_437703o
aCertificate__0	db ' certificate_unobtainable',0 ; DATA XREF: _msg_cb:loc_43770Do
aUnsupported_ex	db ' unsupported_extension',0 ; DATA XREF: _msg_cb:loc_437717o
aNo_renegotiati	db ' no_renegotiation',0 ; DATA XREF: _msg_cb:loc_437721o
aUser_canceled	db ' user_canceled',0   ; DATA XREF: _msg_cb:loc_43772Bo
aInternal_error	db ' internal_error',0  ; DATA XREF: _msg_cb:loc_437735o
aInsufficient_s	db ' insufficient_security',0 ; DATA XREF: _msg_cb:loc_43773Fo
aProtocol_versi	db ' protocol_version',0 ; DATA XREF: _msg_cb:loc_437749o
aExport_restric	db ' export_restriction',0 ; DATA XREF: _msg_cb:loc_437753o
aDecrypt_error	db ' decrypt_error',0   ; DATA XREF: _msg_cb:loc_43775Do
aDecode_error	db ' decode_error',0    ; DATA XREF: _msg_cb:loc_437767o
aAccess_denied	db ' access_denied',0   ; DATA XREF: _msg_cb:loc_437771o
aUnknown_ca	db ' unknown_ca',0      ; DATA XREF: _msg_cb:loc_4376A9o
aIllegal_parame	db ' illegal_parameter',0 ; DATA XREF: _msg_cb:loc_4376B3o
aCertificate_un	db ' certificate_unknown',0 ; DATA XREF: _msg_cb:loc_4376BDo
aCertificate_ex	db ' certificate_expired',0 ; DATA XREF: _msg_cb:loc_4376C7o
aCertificate_re	db ' certificate_revoked',0 ; DATA XREF: _msg_cb:loc_4376D1o
aUnsupported_ce	db ' unsupported_certificate',0 ; DATA XREF: _msg_cb:loc_4376DBo
aBad_certific_1	db ' bad_certificate',0 ; DATA XREF: _msg_cb:loc_4376E5o
aHandshake_fail	db ' handshake_failure',0 ; DATA XREF: _msg_cb:loc_4376EFo
aDecompression_	db ' decompression_failure',0 ; DATA XREF: _msg_cb:loc_437681o
aRecord_overflo	db ' record_overflow',0 ; DATA XREF: _msg_cb:loc_43768Bo
aDecryption_fai	db ' decryption_failed',0 ; DATA XREF: _msg_cb:loc_437695o
aBad_record_mac	db ' bad_record_mac',0  ; DATA XREF: _msg_cb:loc_43769Fo
aUnexpected_mes	db ' unexpected_message',0 ; DATA XREF: _msg_cb:loc_437663o
aClose_notify	db ' close_notify',0    ; DATA XREF: _msg_cb:loc_437659o
aHeartbeatrespo	db ', HeartbeatResponse',0 ; DATA XREF: _msg_cb:loc_437593o
aHeartbeatreque	db ', HeartbeatRequest',0 ; DATA XREF: _msg_cb:loc_437790o
aHeartbeat	db ', Heartbeat',0      ; DATA XREF: _msg_cb+1DEo _msg_cb+324o
aSSSLength04lxS	db '%s %s%s [length %04lx]%s%s',0Ah,0 ; DATA XREF: _msg_cb+C1o
					; _msg_cb+203o	...
asc_469CCA	db 0Ah			; DATA XREF: _msg_cb+25Ao
		db '   ',0
a02x_4		db ' %02x',0            ; DATA XREF: _msg_cb+239o
asc_469CD5	db '   ',0              ; DATA XREF: _msg_cb:loc_437413o
		align 4
off_469CDC	dd offset loc_4375C2	; DATA XREF: _msg_cb+309r
		dd offset loc_4375A4
		dd offset loc_4375B3
		dd offset loc_43764A
		dd offset loc_43763B
		dd offset loc_43762C
		dd offset loc_43761D
		dd offset loc_43760E
		dd offset loc_4375FF
off_469D00	dd offset loc_437659	; DATA XREF: _msg_cb+38Cr
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_437663
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43769F
		dd offset loc_437695
		dd offset loc_43768B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_437681
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_4376EF
		dd offset loc_43777B
		dd offset loc_4376E5
		dd offset loc_4376DB
		dd offset loc_4376D1
		dd offset loc_4376C7
		dd offset loc_4376BD
		dd offset loc_4376B3
		dd offset loc_4376A9
		dd offset loc_437771
		dd offset loc_437767
		dd offset loc_43775D
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_437753
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_437749
		dd offset loc_43773F
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_437735
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43772B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_437721
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_43777B
		dd offset loc_437717
		dd offset loc_43770D
		dd offset loc_437703
		dd offset loc_437677
		dd offset loc_43766D
		dd offset loc_4376F9
aServerName	db 'server name',0      ; DATA XREF: _tlsext_cb:loc_437990o
aMaxFragmentLen	db 'max fragment length',0 ; DATA XREF: _tlsext_cb:loc_4379E0o
aClientCertif_3	db 'client certificate URL',0 ; DATA XREF: _tlsext_cb:loc_437A00o
aTrustedCaKeys	db 'trusted CA keys',0  ; DATA XREF: _tlsext_cb+F3o
aTruncatedHmac	db 'truncated HMAC',0   ; DATA XREF: _tlsext_cb:loc_437A20o
aStatusRequest	db 'status request',0   ; DATA XREF: _tlsext_cb:loc_437A60o
aUserMapping	db 'user mapping',0     ; DATA XREF: _tlsext_cb:loc_4379D0o
aClientAuthz	db 'client authz',0     ; DATA XREF: _tlsext_cb:loc_437A50o
aServerAuthz	db 'server authz',0     ; DATA XREF: _tlsext_cb+16Do
aCertType	db 'cert type',0        ; DATA XREF: _tlsext_cb:loc_437A70o
aEllipticCurves	db 'elliptic curves',0  ; DATA XREF: _tlsext_cb:loc_437A40o
aEcPointFormats	db 'EC point formats',0 ; DATA XREF: _tlsext_cb:loc_4379C0o
aSrp		db 'SRP',0              ; DATA XREF: _tlsext_cb:loc_437A30o
aSignatureAlgor	db 'signature algorithms',0 ; DATA XREF: _tlsext_cb+13Do
aUseSrtp	db 'use SRTP',0         ; DATA XREF: _tlsext_cb:loc_4379B0o
aHeartbeat_0	db 'heartbeat',0        ; DATA XREF: _tlsext_cb:loc_4379F0o
aSessionTicket	db 'session ticket',0   ; DATA XREF: _tlsext_cb:loc_437A80o
aRenegotiationI	db 'renegotiation info',0 ; DATA XREF: _tlsext_cb+18Bo
aNextProtocol	db 'next protocol',0    ; DATA XREF: _tlsext_cb:loc_437A10o
aTlsPadding	db 'TLS padding',0      ; DATA XREF: _tlsext_cb+50o
aUnknown_1	db 'unknown',0          ; DATA XREF: _tlsext_cb:loc_4378F0o
aServer		db 'server',0           ; DATA XREF: _tlsext_cb:loc_437980o
aClient		db 'client',0           ; DATA XREF: _tlsext_cb+68o
		align 4
aTlsSExtensionS	db 'TLS %s extension "%s" (id=%d), len=%d',0Ah,0 ; DATA XREF: _tlsext_cb+7Do
		align 10h
aErrorSettingRa	db 'error setting random cookie secret',0Ah,0
					; DATA XREF: _generate_cookie_callback:loc_437D10o
a0		db '0',0                ; DATA XREF: _generate_cookie_callback+80o
					; _generate_cookie_callback:loc_437C90o ...
aS_cb_c		db 's_cb.c',0           ; DATA XREF: _generate_cookie_callback+90o
					; _generate_cookie_callback+A8o ...
aOutOfMemory_10	db 'out of memory',0Ah,0 ; DATA XREF: _generate_cookie_callback:loc_437D30o
					; _verify_cookie_callback:loc_437FF0o
aHellorequest	db ', HelloRequest',0   ; DATA XREF: .rdata:_CSWTCH_27o
aClienthello	db ', ClientHello',0    ; DATA XREF: .rdata:0046A144o
aServerhello	db ', ServerHello',0    ; DATA XREF: .rdata:0046A148o
aHelloverifyreq	db ', HelloVerifyRequest',0 ; DATA XREF: .rdata:0046A14Co
aCertificate_6	db ', Certificate',0    ; DATA XREF: .rdata:0046A16Co
aServerkeyexcha	db ', ServerKeyExchange',0 ; DATA XREF: .rdata:0046A170o
aCertificatereq	db ', CertificateRequest',0 ; DATA XREF: .rdata:0046A174o
aServerhellodon	db ', ServerHelloDone',0 ; DATA XREF: .rdata:0046A178o
aCertificatever	db ', CertificateVerify',0 ; DATA XREF: .rdata:0046A17Co
aClientkeyexcha	db ', ClientKeyExchange',0 ; DATA XREF: .rdata:0046A180o
aFinished	db ', Finished',0       ; DATA XREF: .rdata:0046A190o
		align 20h
_CSWTCH_27	dd offset aHellorequest	; DATA XREF: _msg_cb+2AEr
					; ", HelloRequest"
		dd offset aClienthello	; ", ClientHello"
		dd offset aServerhello	; ", ServerHello"
		dd offset aHelloverifyreq ; ", HelloVerifyRequest"
		dd offset a???		; "???"
		dd offset a???		; "???"
		dd offset a???		; "???"
		dd offset a???		; "???"
		dd offset a???		; "???"
		dd offset a???		; "???"
		dd offset a???		; "???"
		dd offset aCertificate_6 ; ", Certificate"
		dd offset aServerkeyexcha ; ", ServerKeyExchange"
		dd offset aCertificatereq ; ", CertificateRequest"
		dd offset aServerhellodon ; ", ServerHelloDone"
		dd offset aCertificatever ; ", CertificateVerify"
		dd offset aClientkeyexcha ; ", ClientKeyExchange"
		dd offset a???		; "???"
		dd offset a???		; "???"
		dd offset a???		; "???"
		dd offset aFinished	; ", Finished"
aChangeciphersp	db 'ChangeCipherSpec',0 ; DATA XREF: .rdata:_CSWTCH_26o
aAlert		db 'Alert',0            ; DATA XREF: .rdata:0046A1BCo
aHandshake	db 'Handshake',0        ; DATA XREF: .rdata:0046A1C0o
		align 4
_CSWTCH_26	dd offset aChangeciphersp ; DATA XREF: _msg_cb+188r
					; "ChangeCipherSpec"
		dd offset aAlert	; "Alert"
		dd offset aHandshake	; "Handshake"
aNoCipherError	db ' NO-CIPHER-ERROR',0 ; DATA XREF: .rdata:_CSWTCH_25o
aNoCertificateE	db ' NO-CERTIFICATE-ERROR',0 ; DATA XREF: .rdata:0046A22Co
aBadCertificate	db ' BAD-CERTIFICATE-ERROR',0 ; DATA XREF: .rdata:0046A234o
		align 4
aUnsupportedCer	db ' UNSUPPORTED-CERTIFICATE-TYPE-ERROR',0 ; DATA XREF: .rdata:0046A23Co
_CSWTCH_25	dd offset aNoCipherError ; DATA	XREF: _msg_cb+3EEr
					; " NO-CIPHER-ERROR"
		dd offset aNoCertificateE ; " NO-CERTIFICATE-ERROR"
		dd offset a???_1	; " ???"
		dd offset aBadCertificate ; " BAD-CERTIFICATE-ERROR"
		dd offset a???_1	; " ???"
		dd offset aUnsupportedCer ; " UNSUPPORTED-CERTIFICATE-TYPE-ERROR"
; char aU_U_U_U[]
aU_U_U_U	db '%u.%u.%u.%u',0      ; DATA XREF: _init_client+2Fo
					; _extract_host_port+50o
aInvalidIpAddre	db 'invalid IP address',0Ah,0 ; DATA XREF: _init_client:loc_438590o
					; _extract_host_port:loc_438CE0o
aUnableToStartW	db 'unable to start WINSOCK, error code=%d',0Ah,0
					; DATA XREF: _init_client+FEo
					; _init_client+2A4o ...
aGethostbynameF	db 'gethostbyname failure',0Ah,0 ; DATA XREF: _init_client:loc_438660o
					; _do_server:loc_438AB2o ...
		align 10h
aGethostbynameA	db 'gethostbyname addr is not AF_INET',0Ah,0
					; DATA XREF: _init_client:loc_438570o
					; _do_server+1FFo ...
; char aSocket[]
aSocket		db 'socket',0           ; DATA XREF: _init_client:loc_4385A9o
; char aKeepalive[]
aKeepalive	db 'keepalive',0        ; DATA XREF: _init_client+390o
; char aConnect_1[]
aConnect_1	db 'connect',0          ; DATA XREF: _init_client+3ADo
aAcceptErrorD	db 'accept error %d',0Ah,0 ; DATA XREF: _do_server+3DAo
aBadGethostbyad	db 'bad gethostbyaddr',0Ah,0 ; DATA XREF: _do_server:loc_438A25o
aS_socket_c	db 's_socket.c',0       ; DATA XREF: _do_server+1AFo
; char aOpenssl_mall_4[]
aOpenssl_mall_4	db 'OPENSSL_malloc',0   ; DATA XREF: _do_server:loc_438A74o
aNoPortDefined	db 'no port defined',0Ah,0 ; DATA XREF: _extract_host_port:loc_438D00o
; char proto[]
proto		db 'tcp',0              ; DATA XREF: _extract_host_port:loc_438C10o
					; _extract_port:loc_438D90o
aGetservbynameF	db 'getservbyname failure for %s',0Ah,0 ; DATA XREF: _extract_host_port+264o
					; _extract_port+64o
		align 10h
aLoadingScreenI	db 'Loading ',27h,'screen',27h,' into random state -',0
					; DATA XREF: _app_RAND_load_file+17o
aDone_1		db ' done',0Ah,0        ; DATA XREF: _app_RAND_load_file+4Co
aUnableToLoadRa	db 'unable to load ',27h,'random state',27h,0Ah,0
					; DATA XREF: _app_RAND_load_file+BCo
		align 4
aThisMeansThatT	db 'This means that the random number generator has not been seeded',0Ah
					; DATA XREF: _app_RAND_load_file+CCo
		db 0
aWithMuchRandom	db 'with much random data.',0Ah,0 ; DATA XREF: _app_RAND_load_file+DCo
		align 4
aConsiderSettin	db 'Consider setting the RANDFILE environment variable to point at a '
					; DATA XREF: _app_RAND_load_file+F0o
		db 'file that',0Ah,0
aRandomDataCanB	db 27h,'random',27h,' data can be kept in (the file will be overwritten).',0Ah
					; DATA XREF: _app_RAND_load_file+100o
		db 0
		align 4
aUnableToWriteR	db 'unable to write ',27h,'random state',27h,0Ah,0
					; DATA XREF: _app_RAND_write_file:loc_439038o
aV_0		db '-v',0               ; DATA XREF: _version_main+66o
aB		db '-b',0               ; DATA XREF: _version_main+78o
asc_46A4AA	db '-f',0               ; DATA XREF: _version_main+8Co
aO		db '-o',0               ; DATA XREF: _version_main+A0o
aP_1		db '-p',0               ; DATA XREF: _version_main+B4o
aD_4		db '-d',0               ; DATA XREF: _version_main+C8o
aA_1		db '-a',0               ; DATA XREF: _version_main+DCo
aUsageVersionAv	db 'usage:version -[avbofpd]',0Ah,0 ; DATA XREF: _version_main:loc_439453o
aOpenssl1_0_1s1	db 'OpenSSL 1.0.1s  1 Mar 2016',0 ; DATA XREF: _version_main+1CBo
; char aSLibraryS[]
aSLibraryS	db '%s (Library: %s)',0Ah,0 ; DATA XREF: _version_main+1D3o
; char aOptions_0[]
aOptions_0	db 'options:  ',0       ; DATA XREF: _version_main:loc_4392EBo
; char aS_12[]
aS_12		db '%s ',0              ; DATA XREF: _version_main+240o
					; _version_main+255o ...
		align 10h
aInform_12	db '-inform',0          ; DATA XREF: _sess_id_main+A5o
aOutform_12	db '-outform',0         ; DATA XREF: _sess_id_main+B3o
aIn_15		db '-in',0              ; DATA XREF: _sess_id_main:loc_439670o
aOut_20		db '-out',0             ; DATA XREF: _sess_id_main:loc_4396A0o
aText_11	db '-text',0            ; DATA XREF: _sess_id_main:loc_4396D0o
aCert_3		db '-cert',0            ; DATA XREF: _sess_id_main:loc_439770o
aNoout_11	db '-noout',0           ; DATA XREF: _sess_id_main+300o
aContext_0	db '-context',0         ; DATA XREF: _sess_id_main:loc_4396F7o
aUnknownOpti_17	db 'unknown option %s',0Ah,0 ; DATA XREF: _sess_id_main+28Fo
aS_21		db '%s',0               ; DATA XREF: _sess_id_main+2C4o
aBadInputFor_10	db 'bad input format specified for input crl',0Ah,0
					; DATA XREF: _sess_id_main:loc_4399E0o
aUnableToLoadSs	db 'unable to load SSL_SESSION',0Ah,0 ; DATA XREF: _sess_id_main:loc_439A29o
aContextTooLong	db 'Context too long',0Ah,0 ; DATA XREF: _sess_id_main+1ABo
aNoCertificateP	db 'No certificate present',0Ah,0 ; DATA XREF: _sess_id_main:loc_439B4Eo
aBadOutputFo_11	db 'bad output format specified for outfile',0Ah,0
					; DATA XREF: _sess_id_main:loc_439953o
aUnableToWriteS	db 'unable to write SSL_SESSION',0Ah,0 ; DATA XREF: _sess_id_main+699o
aUnableToWrit_7	db 'unable to write X509',0Ah,0 ; DATA XREF: _sess_id_main:loc_4399BCo
aUsageSess_idAr	db 'usage: sess_id args',0Ah,0 ; DATA XREF: .data:_sess_id_usageo
asc_46A63D	db 0Ah,0		; DATA XREF: .data:00457324o
		align 10h
aInformArgIn_14	db ' -inform arg     - input format - default PEM (DER or PEM)',0Ah,0
					; DATA XREF: .data:00457328o
aOutformArgO_13	db ' -outform arg    - output format - default PEM',0Ah,0
					; DATA XREF: .data:0045732Co
aInArgInputF_13	db ' -in arg         - input file - default stdin',0Ah,0
					; DATA XREF: .data:00457330o
		align 4
aOutArgOutpu_13	db ' -out arg        - output file - default stdout',0Ah,0
					; DATA XREF: .data:00457334o
		align 10h
aTextPrintSslSe	db ' -text           - print ssl session id details',0Ah,0
					; DATA XREF: .data:00457338o
		align 4
aCertOutputCert	db ' -cert           - output certificate ',0Ah,0
					; DATA XREF: .data:0045733Co
aNooutNoCrlOu_0	db ' -noout          - no CRL output',0Ah,0 ; DATA XREF: .data:00457340o
		align 10h
aContextArgSetT	db ' -context arg    - set the session ID context',0Ah,0
					; DATA XREF: .data:00457344o
		align 10h
aV_4		db '-v',0               ; DATA XREF: _ciphers_main+115o
aV_5		db '-V',0               ; DATA XREF: _ciphers_main:loc_439C10o
aSsl3_2		db '-ssl3',0            ; DATA XREF: _ciphers_main+B4o
aTls1_3		db '-tls1',0            ; DATA XREF: _ciphers_main+C8o
asc_46A7D2	db '-h',0               ; DATA XREF: _ciphers_main+DCo
a?_0		db '-?',0               ; DATA XREF: _ciphers_main+F0o
aS_13		db '%s',0               ; DATA XREF: _ciphers_main+1A4o
					; _ciphers_main+284o
aErrorInCipherL	db 'Error in cipher list',0Ah,0 ; DATA XREF: _ciphers_main:loc_439EBFo
asc_46A7F1	db ':',0                ; DATA XREF: _ciphers_main+1CFo
asc_46A7F3	db 0Ah,0		; DATA XREF: _ciphers_main+2CDo
a0x02x0x02x0x_0	db '     0x%02X,0x%02X,0x%02X - ',0 ; DATA XREF: _ciphers_main+473o
a0x02x0x02x	db '          0x%02X,0x%02X - ',0 ; DATA XREF: _ciphers_main+44Ao
		align 10h
a0x02x0x02x0x02	db '0x%02X,0x%02X,0x%02X,0x%02X - ',0 ; DATA XREF: _ciphers_main+420o
aUsageCiphersAr	db 'usage: ciphers args',0Ah,0 ; DATA XREF: .data:_ciphers_usageo
aVVerboseModeAT	db ' -v          - verbose mode, a textual listing of the SSL/TLS cip'
					; DATA XREF: .data:00457364o
		db 'hers in OpenSSL',0Ah,0
		align 4
aVEvenMoreVerbo	db ' -V          - even more verbose',0Ah,0 ; DATA XREF: .data:00457368o
aSsl2Ssl2Mode	db ' -ssl2       - SSL2 mode',0Ah,0 ; DATA XREF: .data:0045736Co
aSsl3Ssl3Mode	db ' -ssl3       - SSL3 mode',0Ah,0 ; DATA XREF: .data:00457370o
aTls1Tls1Mode	db ' -tls1       - TLS1 mode',0Ah,0 ; DATA XREF: .data:00457374o
aToseq		db '-toseq',0           ; DATA XREF: _nseq_main+45o
aIn_16		db '-in',0              ; DATA XREF: _nseq_main+59o
aOut_21		db '-out',0             ; DATA XREF: _nseq_main:loc_43A190o
aR_9		db 'r',0                ; DATA XREF: _nseq_main+8Co
aCanTOpenInputF	db 'Can',27h,'t open input file %s',0Ah,0 ; DATA XREF: _nseq_main+365o
aW_4		db 'w',0                ; DATA XREF: _nseq_main:loc_43A0B4o
aCanTOpenOutp_0	db 'Can',27h,'t open output file %s',0Ah,0 ; DATA XREF: _nseq_main+390o
aErrorReadingCe	db 'Error reading certs file %s',0Ah,0 ; DATA XREF: _nseq_main+2A6o
		align 10h
aErrorReadingSe	db 'Error reading sequence file %s',0Ah,0 ; DATA XREF: _nseq_main+3B5o
aNetscapeCertif	db 'Netscape certificate sequence utility',0Ah,0
					; DATA XREF: _nseq_main:loc_43A1B0o
aUsageNseqOptio	db 'Usage nseq [options]',0Ah,0 ; DATA XREF: _nseq_main+1C5o
aWhereOption_11	db 'where options are',0Ah,0 ; DATA XREF: _nseq_main+1DAo
aInFileInputF_1	db '-in file  input file',0Ah,0 ; DATA XREF: _nseq_main+1EFo
aOutFileOutpu_4	db '-out file output file',0Ah,0 ; DATA XREF: _nseq_main+204o
		align 10h
aToseqOutputNsS	db '-toseq    output NS Sequence file',0Ah,0 ; DATA XREF: _nseq_main+219o
		align 4
; char aNone[]
aNone		db 'NONE',0             ; DATA XREF: _set_pbe_isra_0+Eo
aUnknownPbeAlgo	db 'Unknown PBE algorithm %s',0Ah,0 ; DATA XREF: _set_pbe_isra_0+43o
aSIterationLd	db '%s, Iteration %ld',0Ah,0 ; DATA XREF: _alg_print+5Eo
					; _dump_certs_pkeys_bag+7D8o ...
aSNoAttributes	db '%s: <No Attributes>',0Ah,0 ; DATA XREF: _print_attribs+2A4o
aSEmptyAttribut	db '%s: <Empty Attributes>',0Ah,0 ; DATA XREF: _print_attribs:loc_43A750o
aS_22		db '%s',0Ah,0           ; DATA XREF: _print_attribs+2Fo
					; _print_attribs+25Ao
asc_46AAB7	db '    ',0             ; DATA XREF: _print_attribs+7Co
asc_46AABC	db ': ',0               ; DATA XREF: _print_attribs+A7o
aS_14		db '%s: ',0             ; DATA XREF: _print_attribs+15Co
asc_46AAC4	db 0Ah,0		; DATA XREF: _print_attribs:loc_43A690o
					; _print_attribs+220o ...
a02x_5		db '%02X ',0            ; DATA XREF: _print_attribs+1A9o
					; _print_attribs+209o ...
aUnsupportedTag	db '<Unsupported tag %d>',0Ah,0 ; DATA XREF: _print_attribs+FAo
aNoValues	db '<No Values>',0Ah,0  ; DATA XREF: _print_attribs:loc_43A600o
aKeyBag		db 'Key bag',0Ah,0      ; DATA XREF: _dump_certs_pkeys_bag:loc_43AEC0o
					; _dump_certs_pkeys_bag:loc_43B090o ...
aBagAttributes	db 'Bag Attributes',0   ; DATA XREF: _dump_certs_pkeys_bag+57o
					; _dump_certs_pkeys_bag+123o ...
aKeyAttributes	db 'Key Attributes',0   ; DATA XREF: _dump_certs_pkeys_bag+2D2o
					; _dump_certs_pkeys_bag+396o ...
aShroudedKeybag	db 'Shrouded Keybag: ',0 ; DATA XREF: _dump_certs_pkeys_bag:loc_43AF00o
					; _dump_certs_pkeys_bag:loc_43AFC0o ...
aCertificateBag	db 'Certificate bag',0Ah,0 ; DATA XREF: _dump_certs_pkeys_bag:loc_43AEE0o
					; _dump_certs_pkeys_bag:loc_43B070o ...
aSafeContentsBa	db 'Safe Contents bag',0Ah,0 ; DATA XREF: _dump_certs_pkeys_bag+10Bo
					; _dump_certs_pkeys_bag:loc_43AEA0o ...
aWarningUnsuppo	db 'Warning unsupported bag type: ',0
					; DATA XREF: _dump_certs_pkeys_bag:loc_43ABA0o
					; _dump_certs_pkeys_bag:loc_43AE50o ...
aPkcs7Data	db 'PKCS7 Data',0Ah,0   ; DATA XREF: _dump_certs_keys_p12:loc_43B843o
aPkcs7Encrypted	db 'PKCS7 Encrypted data: ',0 ; DATA XREF: _dump_certs_keys_p12:loc_43B793o
aStdin_3	db '<stdin>',0          ; DATA XREF: _pkcs12_main+E93o
aStdout_0	db '<stdout>',0         ; DATA XREF: _pkcs12_main+F03o
aNokeys		db '-nokeys',0          ; DATA XREF: _pkcs12_main+179o
aKeyex		db '-keyex',0           ; DATA XREF: _pkcs12_main:loc_43BEE0o
aKeysig		db '-keysig',0          ; DATA XREF: _pkcs12_main+670o
aNocerts	db '-nocerts',0         ; DATA XREF: _pkcs12_main+684o
aClcerts	db '-clcerts',0         ; DATA XREF: _pkcs12_main:loc_43C470o
aCacerts	db '-cacerts',0         ; DATA XREF: _pkcs12_main+C04o
aNoout_12	db '-noout',0           ; DATA XREF: _pkcs12_main:loc_43C7BDo
aInfo		db '-info',0            ; DATA XREF: _pkcs12_main:loc_43CA0Do
aChain_0	db '-chain',0           ; DATA XREF: _pkcs12_main:loc_43CBC7o
aTwopass	db '-twopass',0         ; DATA XREF: _pkcs12_main+135Bo
aNomacver	db '-nomacver',0        ; DATA XREF: _pkcs12_main+136Fo
aDescert	db '-descert',0         ; DATA XREF: _pkcs12_main+1383o
aExport		db '-export',0          ; DATA XREF: _pkcs12_main:loc_43CD48o
; char aDes_3[]
aDes_3		db '-des',0             ; DATA XREF: _pkcs12_main+14DCo
; char aDes3_1[]
aDes3_1		db '-des3',0            ; DATA XREF: _pkcs12_main+14F4o
; char aIdea_3[]
aIdea_3		db '-idea',0            ; DATA XREF: _pkcs12_main+150Co
; char aSeed_5[]
aSeed_5		db '-seed',0            ; DATA XREF: _pkcs12_main+1524o
; char aAes128_1[]
aAes128_1	db '-aes128',0          ; DATA XREF: _pkcs12_main+153Co
; char aAes192_1[]
aAes192_1	db '-aes192',0          ; DATA XREF: _pkcs12_main+1554o
; char aAes256_1[]
aAes256_1	db '-aes256',0          ; DATA XREF: _pkcs12_main+156Co
; char aCamellia128_1[]
aCamellia128_1	db '-camellia128',0     ; DATA XREF: _pkcs12_main+1584o
; char aCamellia192_1[]
aCamellia192_1	db '-camellia192',0     ; DATA XREF: _pkcs12_main+159Co
; char aCamellia256_1[]
aCamellia256_1	db '-camellia256',0     ; DATA XREF: _pkcs12_main+15B4o
; char aNoiter[]
aNoiter		db '-noiter',0          ; DATA XREF: _pkcs12_main+15CCo
; char aMaciter[]
aMaciter	db '-maciter',0         ; DATA XREF: _pkcs12_main+15E4o
; char aNomaciter[]
aNomaciter	db '-nomaciter',0       ; DATA XREF: _pkcs12_main+15FCo
; char aNomac[]
aNomac		db '-nomac',0           ; DATA XREF: _pkcs12_main+1614o
; char aMacalg[]
aMacalg		db '-macalg',0          ; DATA XREF: _pkcs12_main+162Co
; char aNodes_0[]
aNodes_0	db '-nodes',0           ; DATA XREF: _pkcs12_main:loc_43CF66o
; char aCertpbe[]
aCertpbe	db '-certpbe',0         ; DATA XREF: _pkcs12_main:loc_43CF96o
; char aKeypbe[]
aKeypbe		db '-keypbe',0          ; DATA XREF: _pkcs12_main+172Eo
; char aRand_9[]
aRand_9		db '-rand',0            ; DATA XREF: _pkcs12_main+1742o
; char aInkey_0[]
aInkey_0	db '-inkey',0           ; DATA XREF: _pkcs12_main:loc_43D007o
; char aCertfile_0[]
aCertfile_0	db '-certfile',0        ; DATA XREF: _pkcs12_main:loc_43D077o
; char aName_1[]
aName_1		db '-name',0            ; DATA XREF: _pkcs12_main:loc_43D0DCo
; char aLmk[]
aLmk		db '-LMK',0             ; DATA XREF: _pkcs12_main:loc_43D107o
; char aCsp[]
aCsp		db '-CSP',0             ; DATA XREF: _pkcs12_main+189Bo
; char aCaname[]
aCaname		db '-caname',0          ; DATA XREF: _pkcs12_main:loc_43D153o
; char aIn_17[]
aIn_17		db '-in',0              ; DATA XREF: _pkcs12_main:loc_43D19Eo
; char aOut_22[]
aOut_22		db '-out',0             ; DATA XREF: _pkcs12_main:loc_43D1C9o
; char aPassin_7[]
aPassin_7	db '-passin',0          ; DATA XREF: _pkcs12_main:loc_43D1F4o
; char aPassout_5[]
aPassout_5	db '-passout',0         ; DATA XREF: _pkcs12_main:loc_43D21Fo
; char aPassword_0[]
aPassword_0	db '-password',0        ; DATA XREF: _pkcs12_main:loc_43D24Ao
; char aCapath_4[]
aCapath_4	db '-CApath',0          ; DATA XREF: _pkcs12_main:loc_43D27Do
; char aCafile_4[]
aCafile_4	db '-CAfile',0          ; DATA XREF: _pkcs12_main:loc_43D2ABo
; char aEngine_21[]
aEngine_21	db '-engine',0          ; DATA XREF: _pkcs12_main:loc_43D2D9o
aUsagePkcs12Opt	db 'Usage: pkcs12 [options]',0Ah,0 ; DATA XREF: _pkcs12_main+1ACo
aWhereOption_12	db 'where options are',0Ah,0 ; DATA XREF: _pkcs12_main+1C1o
		align 4
aExportOutputPk	db '-export       output PKCS12 file',0Ah,0 ; DATA XREF: _pkcs12_main+1D6o
		align 10h
aChainAddCertif	db '-chain        add certificate chain',0Ah,0
					; DATA XREF: _pkcs12_main+1EBo
		align 4
aInkeyFilePriva	db '-inkey file   private key if not infile',0Ah,0
					; DATA XREF: _pkcs12_main+200o
		align 4
aCertfileFAddAl	db '-certfile f   add all certs in f',0Ah,0 ; DATA XREF: _pkcs12_main+215o
		align 4
aCapathArgPem_1	db '-CApath arg   - PEM format directory of CA',27h,'s',0Ah,0
					; DATA XREF: _pkcs12_main+22Ao
		align 4
aCafileArgPem_1	db '-CAfile arg   - PEM format file of CA',27h,'s',0Ah,0
					; DATA XREF: _pkcs12_main+23Fo
		align 4
aNameNameUseNam	db '-name "name"  use name as friendly name',0Ah,0
					; DATA XREF: _pkcs12_main+254o
		align 10h
aCanameNmUseNmA	db '-caname "nm"  use nm as CA friendly name (can be used more than o'
					; DATA XREF: _pkcs12_main+269o
		db 'nce).',0Ah,0
aInInfileInputF	db '-in  infile   input filename',0Ah,0 ; DATA XREF: _pkcs12_main+27Eo
		align 4
aOutOutfileOutp	db '-out outfile  output filename',0Ah,0 ; DATA XREF: _pkcs12_main+293o
		align 4
aNooutDonTOut_0	db '-noout        don',27h,'t output anything, just verify.',0Ah,0
					; DATA XREF: _pkcs12_main+2A8o
		align 4
aNomacverDonTVe	db '-nomacver     don',27h,'t verify MAC.',0Ah,0
					; DATA XREF: _pkcs12_main+2BDo
		align 10h
aNocertsDonTOut	db '-nocerts      don',27h,'t output certificates.',0Ah,0
					; DATA XREF: _pkcs12_main+2D2o
		align 4
aClcertsOnlyOut	db '-clcerts      only output client certificates.',0Ah,0
					; DATA XREF: _pkcs12_main+2E7o
aCacertsOnlyOut	db '-cacerts      only output CA certificates.',0Ah,0
					; DATA XREF: _pkcs12_main+2FCo
aNokeysDonTOutp	db '-nokeys       don',27h,'t output private keys.',0Ah,0
					; DATA XREF: _pkcs12_main+311o
		align 4
aInfoGiveInfoAb	db '-info         give info about PKCS#12 structure.',0Ah,0
					; DATA XREF: _pkcs12_main+326o
		align 4
aDesEncryptPriv	db '-des          encrypt private keys with DES',0Ah,0
					; DATA XREF: _pkcs12_main+33Bo
		align 4
aDes3EncryptPri	db '-des3         encrypt private keys with triple DES (default)',0Ah,0
					; DATA XREF: _pkcs12_main+350o
		align 4
aIdeaEncryptPri	db '-idea         encrypt private keys with idea',0Ah,0
					; DATA XREF: _pkcs12_main+365o
		align 4
aSeedEncryptPri	db '-seed         encrypt private keys with seed',0Ah,0
					; DATA XREF: _pkcs12_main+37Ao
aAes128Aes192_3	db '-aes128, -aes192, -aes256',0Ah,0 ; DATA XREF: _pkcs12_main+38Fo
		align 4
aEncryptPemOu_9	db '              encrypt PEM output with cbc aes',0Ah,0
					; DATA XREF: _pkcs12_main+3A4o
		align 4
aCamellia128C_4	db '-camellia128, -camellia192, -camellia256',0Ah,0
					; DATA XREF: _pkcs12_main+3B9o
		align 10h
aEncryptPemO_10	db '              encrypt PEM output with cbc camellia',0Ah,0
					; DATA XREF: _pkcs12_main+3CEo
aNodesDonTEnc_0	db '-nodes        don',27h,'t encrypt private keys',0Ah,0
					; DATA XREF: _pkcs12_main+3E3o
		align 10h
aNoiterDonTUseE	db '-noiter       don',27h,'t use encryption iteration',0Ah,0
					; DATA XREF: _pkcs12_main+3F8o
		align 10h
aNomaciterDonTU	db '-nomaciter    don',27h,'t use MAC iteration',0Ah,0
					; DATA XREF: _pkcs12_main+40Do
		align 4
aMaciterUseMacI	db '-maciter      use MAC iteration',0Ah,0 ; DATA XREF: _pkcs12_main+422o
		align 4
aNomacDonTGener	db '-nomac        don',27h,'t generate MAC',0Ah,0
					; DATA XREF: _pkcs12_main+437o
		align 10h
aTwopassSeparat	db '-twopass      separate MAC, encryption passwords',0Ah,0
					; DATA XREF: _pkcs12_main+44Co
		align 4
aDescertEncrypt	db '-descert      encrypt PKCS#12 certificates with triple DES (defau'
					; DATA XREF: _pkcs12_main+461o
		db 'lt RC2-40)',0Ah,0
		align 4
aCertpbeAlgSpec	db '-certpbe alg  specify certificate PBE algorithm (default RC2-40)',0Ah
					; DATA XREF: _pkcs12_main+476o
		db 0
		align 4
aKeypbeAlgSpeci	db '-keypbe alg   specify private key PBE algorithm (default 3DES)',0Ah,0
					; DATA XREF: _pkcs12_main+48Bo
aMacalgAlgDiges	db '-macalg alg   digest algorithm used in MAC (default SHA1)',0Ah,0
					; DATA XREF: _pkcs12_main+4A0o
		align 4
aKeyexSetMsKeyE	db '-keyex        set MS key exchange type',0Ah,0
					; DATA XREF: _pkcs12_main+4B5o
aKeysigSetMsKey	db '-keysig       set MS key signature type',0Ah,0
					; DATA XREF: _pkcs12_main+4CAo
		align 4
aPasswordPSetIm	db '-password p   set import/export password source',0Ah,0
					; DATA XREF: _pkcs12_main+4DFo
		align 4
aPassinPInputFi	db '-passin p     input file pass phrase source',0Ah,0
					; DATA XREF: _pkcs12_main+4F4o
		align 4
aPassoutPOutput	db '-passout p    output file pass phrase source',0Ah,0
					; DATA XREF: _pkcs12_main+509o
		align 4
aEngineEUseE_16	db '-engine e     use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _pkcs12_main+51Eo
aRandFileCfil_6	db '-rand file%cfile%c...',0Ah,0 ; DATA XREF: _pkcs12_main+543o
aLoadTheFileO_4	db '              load the file (or the files in the directory) into',0Ah
					; DATA XREF: _pkcs12_main+558o
		db 0
		align 10h
aTheRandomNum_4	db '              the random number generator',0Ah,0
					; DATA XREF: _pkcs12_main+56Do
		align 4
aCspNameMicroso	db '-CSP name     Microsoft CSP name',0Ah,0 ; DATA XREF: _pkcs12_main+582o
		align 10h
aLmkAddLocalMac	db '-LMK          Add local machine keyset attribute to private key',0Ah
					; DATA XREF: _pkcs12_main+597o
		db 0
aErrorGettin_15	db 'Error getting passwords',0Ah,0 ; DATA XREF: _pkcs12_main:loc_43C000o
aLdSemiRandom_7	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _pkcs12_main+838o
aRb		db 'rb',0               ; DATA XREF: _pkcs12_main+85Eo
aErrorOpeningIn	db 'Error opening input file %s',0Ah,0 ; DATA XREF: _pkcs12_main+E9Co
aWb_4		db 'wb',0               ; DATA XREF: _pkcs12_main+888o
aErrorOpening_0	db 'Error opening output file %s',0Ah,0 ; DATA XREF: _pkcs12_main+F0Co
aEnterMacPasswo	db 'Enter MAC Password:',0 ; DATA XREF: _pkcs12_main+D2Co
aCanTReadPass_0	db 'Can',27h,'t read Password',0Ah,0 ; DATA XREF: _pkcs12_main+D53o
					; _pkcs12_main+1124o ...
aNothingToDo	db 'Nothing to do!',0Ah,0 ; DATA XREF: _pkcs12_main:loc_43C9F3o
aPrivateKey_4	db 'private key',0      ; DATA XREF: _pkcs12_main:loc_43C540o
aCertificates_0	db 'certificates',0     ; DATA XREF: _pkcs12_main:loc_43C7E1o
		align 4
aNoCertificateM	db 'No certificate matches private key',0Ah,0
					; DATA XREF: _pkcs12_main:loc_43C877o
aCertificatesFr	db 'certificates from certfile',0 ; DATA XREF: _pkcs12_main+912o
aMemoryAlloca_3	db 'Memory allocation error',0Ah,0 ; DATA XREF: _pkcs12_main:loc_43CC95o
aErrorSGettingC	db 'Error %s getting chain.',0Ah,0 ; DATA XREF: _pkcs12_main+14A7o
aEnterExportPas	db 'Enter Export Password:',0 ; DATA XREF: _pkcs12_main+10FDo
aUnknownDigestA	db 'Unknown digest algorithm %s',0Ah,0 ; DATA XREF: _pkcs12_main+1468o
aEnterImportPas	db 'Enter Import Password:',0 ; DATA XREF: _pkcs12_main+11B3o
aMacIterationLd	db 'MAC Iteration %ld',0Ah,0 ; DATA XREF: _pkcs12_main+DC4o
		align 4
aMacVerifyErr_0	db 'Mac verify error: invalid password?',0Ah,0
					; DATA XREF: _pkcs12_main+10C9o
aMacVerifiedOk	db 'MAC verified OK',0Ah,0 ; DATA XREF: _pkcs12_main:loc_43C6A1o
		align 4
aErrorOutputtin	db 'Error outputting keys and certificates',0Ah,0
					; DATA XREF: _pkcs12_main:loc_43CAA0o
aV2		db '-v2',0              ; DATA XREF: _pkcs8_main+197o
aUnknownCiphe_0	db 'Unknown cipher %s',0Ah,0 ; DATA XREF: _pkcs8_main+4C7o
aV1		db '-v1',0              ; DATA XREF: _pkcs8_main+1A5o
aUnknownPbeAl_0	db 'Unknown PBE algorithm %s',0Ah,0 ; DATA XREF: _pkcs8_main+307o
aInform_13	db '-inform',0          ; DATA XREF: _pkcs8_main:loc_43D550o
aOutform_13	db '-outform',0         ; DATA XREF: _pkcs8_main:loc_43D580o
aTopk8		db '-topk8',0           ; DATA XREF: _pkcs8_main:loc_43D5B0o
aNoiter_0	db '-noiter',0          ; DATA XREF: _pkcs8_main+264o
aNocrypt	db '-nocrypt',0         ; DATA XREF: _pkcs8_main+278o
aNooct		db '-nooct',0           ; DATA XREF: _pkcs8_main+28Co
aNsdb		db '-nsdb',0            ; DATA XREF: _pkcs8_main+2A0o
aEmbed		db '-embed',0           ; DATA XREF: _pkcs8_main+2B4o
aPassin_8	db '-passin',0          ; DATA XREF: _pkcs8_main+2C8o
aPassout_6	db '-passout',0         ; DATA XREF: _pkcs8_main:loc_43D846o
aEngine_22	db '-engine',0          ; DATA XREF: _pkcs8_main:loc_43DEC7o
; char aIn_18[]
aIn_18		db '-in',0              ; DATA XREF: _pkcs8_main:loc_43E03Bo
; char aOut_23[]
aOut_23		db '-out',0             ; DATA XREF: _pkcs8_main:loc_43E11Eo
aUsagePkcs8Opti	db 'Usage pkcs8 [options]',0Ah,0 ; DATA XREF: _pkcs8_main:loc_43D870o
aWhereOption_13	db 'where options are',0Ah,0 ; DATA XREF: _pkcs8_main+525o
aInFileInputF_2	db '-in file        input file',0Ah,0 ; DATA XREF: _pkcs8_main+53Ao
		align 4
aInformXInputFo	db '-inform X       input format (DER or PEM)',0Ah,0
					; DATA XREF: _pkcs8_main+54Fo
		align 4
aPassinArgInp_2	db '-passin arg     input file pass phrase source',0Ah,0
					; DATA XREF: _pkcs8_main+564o
		align 4
aOutformXOutp_0	db '-outform X      output format (DER or PEM)',0Ah,0
					; DATA XREF: _pkcs8_main+579o
aOutFileOutpu_5	db '-out file       output file',0Ah,0 ; DATA XREF: _pkcs8_main+58Eo
		align 10h
aPassoutArgOu_3	db '-passout arg    output file pass phrase source',0Ah,0
					; DATA XREF: _pkcs8_main+5A3o
aTopk8OutputPkc	db '-topk8          output PKCS8 file',0Ah,0 ; DATA XREF: _pkcs8_main+5B8o
		align 4
aNooctUseNonsta	db '-nooct          use (nonstandard) no octet format',0Ah,0
					; DATA XREF: _pkcs8_main+5CDo
		align 4
aEmbedUseNonsta	db '-embed          use (nonstandard) embedded DSA parameters format',0Ah
					; DATA XREF: _pkcs8_main+5E2o
		db 0
		align 4
aNsdbUseNonstan	db '-nsdb           use (nonstandard) DSA Netscape DB format',0Ah,0
					; DATA XREF: _pkcs8_main+5F7o
		align 4
aNoiterUse1AsIt	db '-noiter         use 1 as iteration count',0Ah,0
					; DATA XREF: _pkcs8_main+60Co
		align 4
aNocryptUseOrEx	db '-nocrypt        use or expect unencrypted private key',0Ah,0
					; DATA XREF: _pkcs8_main+621o
		align 4
aV2AlgUsePkcs5V	db '-v2 alg         use PKCS#5 v2.0 and cipher "alg"',0Ah,0
					; DATA XREF: _pkcs8_main+636o
		align 10h
aV1ObjUsePkcs5V	db '-v1 obj         use PKCS#5 v1.5 and cipher "alg"',0Ah,0
					; DATA XREF: _pkcs8_main+64Bo
		align 4
aEngineEUseE_17	db ' -engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _pkcs8_main+660o
aErrorGettin_16	db 'Error getting passwords',0Ah,0 ; DATA XREF: _pkcs8_main:loc_43DAA0o
aRb_4		db 'rb',0               ; DATA XREF: _pkcs8_main+41Bo
aCanTOpenInpu_0	db 'Can',27h,'t open input file %s',0Ah,0 ; DATA XREF: _pkcs8_main+713o
aWb_5		db 'wb',0               ; DATA XREF: _pkcs8_main+441o
aCanTOpenOutp_1	db 'Can',27h,'t open output file %s',0Ah,0 ; DATA XREF: _pkcs8_main+9F0o
aKey_7		db 'key',0              ; DATA XREF: _pkcs8_main:loc_43DB98o
aErrorConvert_1	db 'Error converting key',0Ah,0 ; DATA XREF: _pkcs8_main:loc_43DF2Eo
					; _pkcs8_main:loc_43E0B2o
aBadFormatSpe_0	db 'Bad format specified for key',0Ah,0 ; DATA XREF: _pkcs8_main:loc_43D7E9o
					; _pkcs8_main:loc_43DB64o ...
aEnterEncryptio	db 'Enter Encryption Password:',0 ; DATA XREF: _pkcs8_main+C21o
aErrorEncryptin	db 'Error encrypting key',0Ah,0 ; DATA XREF: _pkcs8_main:loc_43DFC8o
aErrorReadingKe	db 'Error reading key',0Ah,0 ; DATA XREF: _pkcs8_main+D84o
aEnterPassword	db 'Enter Password:',0  ; DATA XREF: _pkcs8_main+D18o
aErrorDecryptin	db 'Error decrypting key',0Ah,0 ; DATA XREF: _pkcs8_main:loc_43DE48o
		align 4
aWarningBrokenK	db 'Warning: broken key encoding: ',0 ; DATA XREF: _pkcs8_main+A1Fo
		align 4
aNoOctetStringI	db 'No Octet String in PrivateKey',0Ah,0 ; DATA XREF: _pkcs8_main+B9Bo
		align 4
aDsaParametersI	db 'DSA parameters included in PrivateKey',0Ah,0
					; DATA XREF: _pkcs8_main+CBDo
		align 10h
aDsaPublicKeyIn	db 'DSA public key include in PrivateKey',0Ah,0
					; DATA XREF: _pkcs8_main+C9Bo
		align 4
aDsaPrivateKeyV	db 'DSA private key value is negative',0Ah,0 ; DATA XREF: _pkcs8_main+A5Fo
aUnknownBrokenT	db 'Unknown broken type',0Ah,0 ; DATA XREF: _pkcs8_main+C79o
aInform_14	db '-inform',0          ; DATA XREF: _pkey_main+107o
aOutform_14	db '-outform',0         ; DATA XREF: _pkey_main+115o
aPassin_9	db '-passin',0          ; DATA XREF: _pkey_main:loc_43E3D0o
aPassout_7	db '-passout',0         ; DATA XREF: _pkey_main:loc_43E410o
aEngine_23	db '-engine',0          ; DATA XREF: _pkey_main:loc_43E430o
aIn_19		db '-in',0              ; DATA XREF: _pkey_main:loc_43E600o
aOut_24		db '-out',0             ; DATA XREF: _pkey_main+4C0o
aPubin_3	db '-pubin',0           ; DATA XREF: _pkey_main:loc_43E6B7o
aPubout_2	db '-pubout',0          ; DATA XREF: _pkey_main+57Bo
aText_pub	db '-text_pub',0        ; DATA XREF: _pkey_main+58Fo
aText_12	db '-text',0            ; DATA XREF: _pkey_main+5A3o
aNoout_13	db '-noout',0           ; DATA XREF: _pkey_main+5B7o
aUnknownCiphe_1	db 'Unknown cipher %s',0Ah,0 ; DATA XREF: _pkey_main+760o
aUsagePkeyOptio	db 'Usage pkey [options]',0Ah,0 ; DATA XREF: _pkey_main:loc_43E2A0o
aWhereOption_14	db 'where options are',0Ah,0 ; DATA XREF: _pkey_main+165o
aInFileInputF_3	db '-in file        input file',0Ah,0 ; DATA XREF: _pkey_main+17Ao
		align 4
aInformXInput_0	db '-inform X       input format (DER or PEM)',0Ah,0
					; DATA XREF: _pkey_main+18Fo
		align 10h
aPassinArgInp_3	db '-passin arg     input file pass phrase source',0Ah,0
					; DATA XREF: _pkey_main+1A4o
		align 10h
aOutformXOutp_1	db '-outform X      output format (DER or PEM)',0Ah,0
					; DATA XREF: _pkey_main+1B9o
aOutFileOutpu_6	db '-out file       output file',0Ah,0 ; DATA XREF: _pkey_main+1CEo
		align 4
aPassoutArgOu_4	db '-passout arg    output file pass phrase source',0Ah,0
					; DATA XREF: _pkey_main+1E3o
aEngineEUseE_18	db '-engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _pkey_main+1F8o
aErrorGettin_17	db 'Error getting passwords',0Ah,0 ; DATA XREF: _pkey_main:loc_43E730o
aWb_6		db 'wb',0               ; DATA XREF: _pkey_main+3D0o
aCanTOpenOutp_2	db 'Can',27h,'t open output file %s',0Ah,0 ; DATA XREF: _pkey_main+6F4o
aPublicKey_3	db 'Public Key',0       ; DATA XREF: _pkey_main+3F6o
aKey_5		db 'key',0              ; DATA XREF: _pkey_main:loc_43E67Bo
aBadFormatSpe_1	db 'Bad format specified for key',0Ah,0 ; DATA XREF: _pkey_main:loc_43E7BFo
		align 4
aIn_20		db '-in',0              ; DATA XREF: _pkeyparam_main+90o
aOut_25		db '-out',0             ; DATA XREF: _pkeyparam_main+A0o
aEngine_24	db '-engine',0          ; DATA XREF: _pkeyparam_main:loc_43EA40o
aText_13	db '-text',0            ; DATA XREF: _pkeyparam_main:loc_43EA70o
aNoout_14	db '-noout',0           ; DATA XREF: _pkeyparam_main+1A0o
aUsagePkeyparam	db 'Usage pkeyparam [options]',0Ah,0
					; DATA XREF: _pkeyparam_main:loc_43E99Fo
aWhereOption_15	db 'where options are',0Ah,0 ; DATA XREF: _pkeyparam_main+D4o
aInFileInputF_4	db '-in file        input file',0Ah,0 ; DATA XREF: _pkeyparam_main+E9o
aOutFileOutpu_7	db '-out file       output file',0Ah,0 ; DATA XREF: _pkeyparam_main+FEo
		align 4
aTextPrintParam	db '-text           print parameters as text',0Ah,0
					; DATA XREF: _pkeyparam_main+113o
		align 10h
aNooutDonTOut_1	db '-noout          don',27h,'t output encoded parameters',0Ah,0
					; DATA XREF: _pkeyparam_main+128o
		align 4
aEngineEUseE_19	db '-engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _pkeyparam_main+13Do
aR_3		db 'r',0                ; DATA XREF: _pkeyparam_main+235o
aCanTOpenInpu_1	db 'Can',27h,'t open input file %s',0Ah,0 ; DATA XREF: _pkeyparam_main+2C8o
aW_5		db 'w',0                ; DATA XREF: _pkeyparam_main+257o
aCanTOpenOutp_3	db 'Can',27h,'t open output file %s',0Ah,0 ; DATA XREF: _pkeyparam_main+38Eo
aErrorReading_3	db 'Error reading parameters',0Ah,0 ; DATA XREF: _pkeyparam_main:loc_43EC3Ao
		align 4
aUsagePkeyutlOp	db 'Usage: pkeyutl [options]',0Ah,0 ; DATA XREF: _usage+3o
aInFileInputFil	db '-in file        input file',0Ah,0 ; DATA XREF: _usage+18o
aOutFileOutputF	db '-out file       output file',0Ah,0 ; DATA XREF: _usage+2Do
		align 4
aSigfileFileSig	db '-sigfile file signature file (verify operation only)',0Ah,0
					; DATA XREF: _usage+42o
aInkeyFileInput	db '-inkey file     input key',0Ah,0 ; DATA XREF: _usage+57o
		align 4
aKeyformArgPriv	db '-keyform arg    private key format - default PEM',0Ah,0
					; DATA XREF: _usage+6Co
		align 10h
aPubinInputIsAP	db '-pubin          input is a public key',0Ah,0 ; DATA XREF: _usage+81o
		align 4
aCertinInputIsA	db '-certin         input is a certificate carrying a public key',0Ah,0
					; DATA XREF: _usage+96o
		align 4
aPkeyoptXYPubli	db '-pkeyopt X:Y    public key options',0Ah,0 ; DATA XREF: _usage+ABo
aSignSignWithPr	db '-sign           sign with private key',0Ah,0 ; DATA XREF: _usage+C0o
		align 4
aVerifyVerifyWi	db '-verify         verify with public key',0Ah,0 ; DATA XREF: _usage+D5o
aVerifyrecoverV	db '-verifyrecover  verify with public key, recover original data',0Ah,0
					; DATA XREF: _usage+EAo
		align 4
aEncryptEncrypt	db '-encrypt        encrypt with public key',0Ah,0 ; DATA XREF: _usage+FFo
		align 4
aDecryptDecrypt	db '-decrypt        decrypt with private key',0Ah,0 ; DATA XREF: _usage+114o
		align 4
aDeriveDeriveSh	db '-derive         derive shared secret',0Ah,0 ; DATA XREF: _usage+129o
		align 4
aHexdumpHexDump	db '-hexdump        hex dump output',0Ah,0 ; DATA XREF: _usage+13Eo
		align 10h
aEngineEUseEngi	db '-engine e       use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _usage+153o
		align 4
aPassinArgPassP	db '-passin arg     pass phrase source',0Ah,0 ; DATA XREF: _usage+168o
aIn_21		db '-in',0              ; DATA XREF: _pkeyutl_main+14Do
aOut_26		db '-out',0             ; DATA XREF: _pkeyutl_main+15Bo
aSigfile	db '-sigfile',0         ; DATA XREF: _pkeyutl_main:loc_43EFF0o
aInkey_1	db '-inkey',0           ; DATA XREF: _pkeyutl_main:loc_43F020o
		align 4
aAPrivateKeyI_0	db 'A private key is needed for this operation',0Ah,0
					; DATA XREF: _pkeyutl_main+BAFo
aErrorGettin_18	db 'Error getting password',0Ah,0 ; DATA XREF: _pkeyutl_main+E14o
aPrivateKey_5	db 'Private Key',0      ; DATA XREF: _pkeyutl_main+47Co
aPublicKey_4	db 'Public Key',0       ; DATA XREF: _pkeyutl_main+8D4o
aCertificate_4	db 'Certificate',0      ; DATA XREF: _pkeyutl_main+91Co
aErrorInitial_2	db 'Error initializing context',0Ah,0 ; DATA XREF: _pkeyutl_main+2EAo
aPeerkey	db '-peerkey',0         ; DATA XREF: _pkeyutl_main:loc_43F160o
aPeerkeyCommand	db '-peerkey command before -inkey',0Ah,0
					; DATA XREF: _pkeyutl_main:loc_43FBA0o
aPeerKey	db 'Peer Key',0         ; DATA XREF: _pkeyutl_main+373o
aErrorReadingPe	db 'Error reading peer key %s',0Ah,0 ; DATA XREF: _pkeyutl_main+DC1o
aPassin_10	db '-passin',0          ; DATA XREF: _pkeyutl_main:loc_43F220o
aPeerform	db '-peerform',0        ; DATA XREF: _pkeyutl_main:loc_43F380o
aKeyform_6	db '-keyform',0         ; DATA XREF: _pkeyutl_main+574o
aEngine_25	db '-engine',0          ; DATA XREF: _pkeyutl_main:loc_43F80Bo
aPubin_4	db '-pubin',0           ; DATA XREF: _pkeyutl_main:loc_43F9FFo
aCertin_0	db '-certin',0          ; DATA XREF: _pkeyutl_main+BF3o
aAsn1parse_0	db '-asn1parse',0       ; DATA XREF: _pkeyutl_main+C07o
aHexdump_0	db '-hexdump',0         ; DATA XREF: _pkeyutl_main+C1Bo
; char aSign_2[]
aSign_2		db '-sign',0            ; DATA XREF: _pkeyutl_main+C33o
; char aVerify_8[]
aVerify_8	db '-verify',0          ; DATA XREF: _pkeyutl_main+C4Fo
; char aVerifyrecover[]
aVerifyrecover	db '-verifyrecover',0   ; DATA XREF: _pkeyutl_main+C6Bo
; char aRev_0[]
aRev_0		db '-rev',0             ; DATA XREF: _pkeyutl_main+C87o
; char aEncrypt_0[]
aEncrypt_0	db '-encrypt',0         ; DATA XREF: _pkeyutl_main+CA3o
; char aDecrypt_1[]
aDecrypt_1	db '-decrypt',0         ; DATA XREF: _pkeyutl_main+CBFo
; char aDerive[]
aDerive		db '-derive',0          ; DATA XREF: _pkeyutl_main+CDBo
; char aPkeyopt_1[]
aPkeyopt_1	db '-pkeyopt',0         ; DATA XREF: _pkeyutl_main+CF7o
		align 4
aPkeyoptCommand	db '-pkeyopt command before -inkey',0Ah,0
					; DATA XREF: _pkeyutl_main:loc_43FEAEo
aParameterSet_0	db 'parameter setting error',0Ah,0 ; DATA XREF: _pkeyutl_main+D4Bo
		align 4
aSignatureFil_0	db 'Signature file specified for non verify',0Ah,0
					; DATA XREF: _pkeyutl_main+1A7o
		align 10h
aNoSignatureFil	db 'No signature file specified for verify',0Ah,0
					; DATA XREF: _pkeyutl_main:loc_43FD4Eo
aRb_5		db 'rb',0               ; DATA XREF: _pkeyutl_main+609o
					; _pkeyutl_main+655o
aErrorOpening_1	db 'Error Opening Input File',0Ah,0 ; DATA XREF: _pkeyutl_main:loc_43FD5Bo
aWb_7		db 'wb',0               ; DATA XREF: _pkeyutl_main+62Fo
aErrorCreatingO	db 'Error Creating Output File',0Ah,0 ; DATA XREF: _pkeyutl_main:loc_43FD20o
aCanTOpenSignat	db 'Can',27h,'t open signature file %s',0Ah,0
					; DATA XREF: _pkeyutl_main+D9Do
aErrorReading_4	db 'Error reading signature data',0Ah,0
					; DATA XREF: _pkeyutl_main:loc_43FCD4o
aErrorReading_5	db 'Error reading input Data',0Ah,0 ; DATA XREF: _pkeyutl_main:loc_43FE72o
		align 4
aSignatureVer_2	db 'Signature Verification Failure',0Ah,0
					; DATA XREF: _pkeyutl_main:loc_43FD04o
aSignatureVer_3	db 'Signature Verified Successfully',0Ah,0
					; DATA XREF: _pkeyutl_main:loc_43FE1Fo
aPkeyutl_c	db 'pkeyutl.c',0        ; DATA XREF: _pkeyutl_main+7A9o
aPublicKeyOpera	db 'Public Key operation error',0Ah,0 ; DATA XREF: _pkeyutl_main:loc_43F798o
		align 4
aDefault_2	db 'default',0          ; DATA XREF: _spkac_main+6Do
aSpkac_1	db 'SPKAC',0            ; DATA XREF: _spkac_main+75o
aIn_22		db '-in',0              ; DATA XREF: _spkac_main+D9o
aOut_27		db '-out',0             ; DATA XREF: _spkac_main+E7o
aPassin_11	db '-passin',0          ; DATA XREF: _spkac_main:loc_440180o
aKey_6		db '-key',0             ; DATA XREF: _spkac_main:loc_4401B0o
aChallenge	db '-challenge',0       ; DATA XREF: _spkac_main:loc_4401E0o
aSpkac_2	db '-spkac',0           ; DATA XREF: _spkac_main:loc_440210o
aSpksect	db '-spksect',0         ; DATA XREF: _spkac_main+320o
aEngine_26	db '-engine',0          ; DATA XREF: _spkac_main:loc_4403C6o
aNoout_15	db '-noout',0           ; DATA XREF: _spkac_main:loc_44041Bo
aPubkey_1	db '-pubkey',0          ; DATA XREF: _spkac_main+52Bo
aVerify_9	db '-verify',0          ; DATA XREF: _spkac_main+53Bo
aSOptions	db '%s [options]',0Ah,0 ; DATA XREF: _spkac_main+124o
aWhereOption_16	db 'where options are',0Ah,0 ; DATA XREF: _spkac_main+139o
aInArgInputF_10	db ' -in arg        input file',0Ah,0 ; DATA XREF: _spkac_main+14Eo
aOutArgOutpu_10	db ' -out arg       output file',0Ah,0 ; DATA XREF: _spkac_main+163o
aKeyArgCreateSp	db ' -key arg       create SPKAC using private key',0Ah,0
					; DATA XREF: _spkac_main+178o
aPassinArgInp_4	db ' -passin arg    input file pass phrase source',0Ah,0
					; DATA XREF: _spkac_main+18Do
		align 4
aChallengeArgCh	db ' -challenge arg challenge string',0Ah,0 ; DATA XREF: _spkac_main+1A2o
		align 10h
aSpkacArgAltern	db ' -spkac arg     alternative SPKAC name',0Ah,0
					; DATA XREF: _spkac_main+1B7o
aNooutDonTPri_2	db ' -noout         don',27h,'t print SPKAC',0Ah,0
					; DATA XREF: _spkac_main+1CCo
		align 4
aPubkeyOutput_0	db ' -pubkey        output public key',0Ah,0 ; DATA XREF: _spkac_main+1E1o
		align 10h
aVerifyVerifySp	db ' -verify        verify SPKAC signature',0Ah,0
					; DATA XREF: _spkac_main+1F6o
aEngineEUseE_20	db ' -engine e      use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _spkac_main+20Bo
aErrorGettin_19	db 'Error getting password',0Ah,0 ; DATA XREF: _spkac_main:loc_44040Eo
asc_46C8DB	db '-',0                ; DATA XREF: _spkac_main+3CDo
aPrivateKey_6	db 'private key',0      ; DATA XREF: _spkac_main:loc_4402E1o
aW		db 'w',0                ; DATA XREF: _spkac_main+47Fo
					; _spkac_main+6CDo
aErrorOpening_2	db 'Error opening output file',0Ah,0 ; DATA XREF: _spkac_main:loc_440521o
					; _spkac_main+824o
aSpkacS		db 'SPKAC=%s',0Ah,0     ; DATA XREF: _spkac_main+49Do
aR_4		db 'r',0                ; DATA XREF: _spkac_main+59Ao
aErrorOpening_3	db 'Error opening input file',0Ah,0 ; DATA XREF: _spkac_main:loc_44062Ao
aErrorParsingCo	db 'Error parsing config file',0Ah,0 ; DATA XREF: _spkac_main+5E8o
aCanTFindSpkacC	db 'Can',27h,'t find SPKAC called "%s"',0Ah,0 ; DATA XREF: _spkac_main+8C3o
aErrorLoadingSp	db 'Error loading SPKAC',0Ah,0 ; DATA XREF: _spkac_main+880o
aSignatureOk_1	db 'Signature OK',0Ah,0 ; DATA XREF: _spkac_main+7B2o
aSignatureFailu	db 'Signature Failure',0Ah,0 ; DATA XREF: _spkac_main+7EDo
		align 4
aWb		db 'wb',0               ; DATA XREF: _smime_main:loc_440BACo
aW_0		db 'w',0                ; DATA XREF: _smime_main:loc_4414F6o
					; _smime_main+1B12o
aRb_0		db 'rb',0               ; DATA XREF: _smime_main:loc_4419C0o
					; _smime_main:loc_441B01o ...
aR_10		db 'r',0                ; DATA XREF: _smime_main+39Do
					; _smime_main+DBAo
aEncrypt_1	db '-encrypt',0         ; DATA XREF: _smime_main+16Bo
aDecrypt_2	db '-decrypt',0         ; DATA XREF: _smime_main+18Co
aSign_3		db '-sign',0            ; DATA XREF: _smime_main+1ADo
aResign		db '-resign',0          ; DATA XREF: _smime_main+1CEo
aVerify_10	db '-verify',0          ; DATA XREF: _smime_main+1EFo
aPk7out		db '-pk7out',0          ; DATA XREF: _smime_main:loc_4412F0o
aDes3_2		db '-des3',0            ; DATA XREF: _smime_main+AE1o
aDes_4		db '-des',0             ; DATA XREF: _smime_main+AF5o
aSeed_6		db '-seed',0            ; DATA XREF: _smime_main+B09o
aRc240		db '-rc2-40',0          ; DATA XREF: _smime_main+B1Do
aRc2128		db '-rc2-128',0         ; DATA XREF: _smime_main+B31o
aRc264		db '-rc2-64',0          ; DATA XREF: _smime_main+B45o
aAes128_2	db '-aes128',0          ; DATA XREF: _smime_main+B59o
aAes192_2	db '-aes192',0          ; DATA XREF: _smime_main+B6Do
aAes256_2	db '-aes256',0          ; DATA XREF: _smime_main+B81o
aCamellia128_2	db '-camellia128',0     ; DATA XREF: _smime_main+B95o
aCamellia192_2	db '-camellia192',0     ; DATA XREF: _smime_main+BA9o
aCamellia256_2	db '-camellia256',0     ; DATA XREF: _smime_main+BBDo
aText_14	db '-text',0            ; DATA XREF: _smime_main+BD1o
aNointern	db '-nointern',0        ; DATA XREF: _smime_main:loc_442189o
aNoverify_0	db '-noverify',0        ; DATA XREF: _smime_main:loc_4421DAo
; char aNochain[]
aNochain	db '-nochain',0         ; DATA XREF: _smime_main+1B90o
; char aNocerts_0[]
aNocerts_0	db '-nocerts',0         ; DATA XREF: _smime_main+1BE5o
; char aNoattr[]
aNoattr		db '-noattr',0          ; DATA XREF: _smime_main+1C11o
; char aNodetach[]
aNodetach	db '-nodetach',0        ; DATA XREF: _smime_main+1C40o
; char aNosmimecap[]
aNosmimecap	db '-nosmimecap',0      ; DATA XREF: _smime_main+1C6Co
; char aBinary_0[]
aBinary_0	db '-binary',0          ; DATA XREF: _smime_main+1C9Bo
; char aNosigs[]
aNosigs		db '-nosigs',0          ; DATA XREF: _smime_main+1CCAo
; char aStream[]
aStream		db '-stream',0          ; DATA XREF: _smime_main+1CF6o
; char aIndef[]
aIndef		db '-indef',0           ; DATA XREF: _smime_main+1D11o
; char aNoindef[]
aNoindef	db '-noindef',0         ; DATA XREF: _smime_main+1D2Co
; char aNooldmime[]
aNooldmime	db '-nooldmime',0       ; DATA XREF: _smime_main+1D47o
; char aCrlfeol[]
aCrlfeol	db '-crlfeol',0         ; DATA XREF: _smime_main+1D83o
; char aRand_10[]
aRand_10	db '-rand',0            ; DATA XREF: _smime_main+1DBFo
; char aEngine_27[]
aEngine_27	db '-engine',0          ; DATA XREF: _smime_main+1E00o
; char aPassin_12[]
aPassin_12	db '-passin',0          ; DATA XREF: _smime_main+1E39o
; char aTo[]
aTo		db '-to',0              ; DATA XREF: _smime_main+1E6Bo
; char aFrom[]
aFrom		db '-from',0            ; DATA XREF: _smime_main+1E9Do
; char aSubject_5[]
aSubject_5	db '-subject',0         ; DATA XREF: _smime_main+1ED3o
; char aSigner[]
aSigner		db '-signer',0          ; DATA XREF: _smime_main+1F09o
; char aRecip[]
aRecip		db '-recip',0           ; DATA XREF: _smime_main+1FE8o
; char aMd_1[]
aMd_1		db '-md',0              ; DATA XREF: _smime_main+201Eo
aUnknownDigestS	db 'Unknown digest %s',0Ah,0 ; DATA XREF: _smime_main+21CBo
; char aInkey_2[]
aInkey_2	db '-inkey',0           ; DATA XREF: _smime_main+2083o
		align 4
aIllegalInkeyWi	db 'Illegal -inkey without -signer',0Ah,0
					; DATA XREF: _smime_main:loc_441AE7o
; char aKeyform_7[]
aKeyform_7	db '-keyform',0         ; DATA XREF: _smime_main+2168o
; char aCertfile_1[]
aCertfile_1	db '-certfile',0        ; DATA XREF: _smime_main+21ECo
; char aCafile_5[]
aCafile_5	db '-CAfile',0          ; DATA XREF: _smime_main+2222o
; char aCapath_5[]
aCapath_5	db '-CApath',0          ; DATA XREF: _smime_main+225Bo
; char aIn_23[]
aIn_23		db '-in',0              ; DATA XREF: _smime_main+2294o
; char aInform_15[]
aInform_15	db '-inform',0          ; DATA XREF: _smime_main+22CAo
; char aOutform_15[]
aOutform_15	db '-outform',0         ; DATA XREF: _smime_main+2327o
; char aOut_28[]
aOut_28		db '-out',0             ; DATA XREF: _smime_main+236Fo
; char aContent[]
aContent	db '-content',0         ; DATA XREF: _smime_main+23A5o
		align 4
aMultipleSigner	db 'Multiple signers or keys not allowed',0Ah,0
					; DATA XREF: _smime_main:loc_440E5Co
		align 4
aNoSignerCertif	db 'No signer certificate specified',0Ah,0
					; DATA XREF: _smime_main:loc_441ABAo
		align 10h
aNoRecipientCer	db 'No recipient certificate or key specified',0Ah,0
					; DATA XREF: _smime_main:loc_4422E6o
		align 4
aNoRecipientSCe	db 'No recipient(s) certificate(s) specified',0Ah,0
					; DATA XREF: _smime_main:loc_4420A3o
		align 4
aUsageSmimeOpti	db 'Usage smime [options] cert.pem ...',0Ah,0
					; DATA XREF: _smime_main:loc_440E71o
aWhereOption_17	db 'where options are',0Ah,0 ; DATA XREF: _smime_main+656o
		align 10h
aEncryptEncry_1	db '-encrypt       encrypt message',0Ah,0 ; DATA XREF: _smime_main+66Bo
aDecryptDecry_1	db '-decrypt       decrypt encrypted message',0Ah,0
					; DATA XREF: _smime_main+680o
aSignSignMessag	db '-sign          sign message',0Ah,0 ; DATA XREF: _smime_main+695o
		align 4
aVerifyVerify_1	db '-verify        verify signed message',0Ah,0
					; DATA XREF: _smime_main+6AAo
		align 10h
aPk7outOutputPk	db '-pk7out        output PKCS#7 structure',0Ah,0
					; DATA XREF: _smime_main+6BFo
aDes3EncryptWit	db '-des3          encrypt with triple DES',0Ah,0
					; DATA XREF: _smime_main+6D4o
aDesEncryptWith	db '-des           encrypt with DES',0Ah,0 ; DATA XREF: _smime_main+6E9o
		align 4
aSeedEncryptWit	db '-seed          encrypt with SEED',0Ah,0 ; DATA XREF: _smime_main+6FEo
		align 4
aRc240EncryptWi	db '-rc2-40        encrypt with RC2-40 (default)',0Ah,0
					; DATA XREF: _smime_main+713o
		align 4
aRc264EncryptWi	db '-rc2-64        encrypt with RC2-64',0Ah,0 ; DATA XREF: _smime_main+728o
aRc2128EncryptW	db '-rc2-128       encrypt with RC2-128',0Ah,0 ; DATA XREF: _smime_main+73Do
aAes128Aes192_4	db '-aes128, -aes192, -aes256',0Ah,0 ; DATA XREF: _smime_main+752o
aEncryptPemO_11	db '               encrypt PEM output with cbc aes',0Ah,0
					; DATA XREF: _smime_main+767o
aCamellia128C_5	db '-camellia128, -camellia192, -camellia256',0Ah,0
					; DATA XREF: _smime_main+77Co
		align 4
aEncryptPemO_12	db '               encrypt PEM output with cbc camellia',0Ah,0
					; DATA XREF: _smime_main+791o
		align 10h
aNointernDonTSe	db '-nointern      don',27h,'t search certificates in message for signer'
					; DATA XREF: _smime_main+7A6o
		db 0Ah,0
aNosigsDonTVeri	db '-nosigs        don',27h,'t verify message signature',0Ah,0
					; DATA XREF: _smime_main+7BBo
		align 10h
aNoverifyDonTVe	db '-noverify      don',27h,'t verify signers certificate',0Ah,0
					; DATA XREF: _smime_main+7D0o
		align 4
aNocertsDonTInc	db '-nocerts       don',27h,'t include signers certificate when signing',0Ah
					; DATA XREF: _smime_main+7E5o
		db 0
		align 4
aNodetachUseOpa	db '-nodetach      use opaque signing',0Ah,0 ; DATA XREF: _smime_main+7FAo
		align 4
aNoattrDonTIncl	db '-noattr        don',27h,'t include any signed attributes',0Ah,0
					; DATA XREF: _smime_main+80Fo
aBinaryDonTTran	db '-binary        don',27h,'t translate message to text',0Ah,0
					; DATA XREF: _smime_main+824o
aCertfileFileOt	db '-certfile file other certificates file',0Ah,0
					; DATA XREF: _smime_main+839o
aSignerFileSign	db '-signer file   signer certificate file',0Ah,0
					; DATA XREF: _smime_main+84Eo
aRecipFileRecip	db '-recip  file   recipient certificate file for decryption',0Ah,0
					; DATA XREF: _smime_main+863o
aInFileInputF_5	db '-in file       input file',0Ah,0 ; DATA XREF: _smime_main+878o
		align 4
aInformArgIn_10	db '-inform arg    input format SMIME (default), PEM or DER',0Ah,0
					; DATA XREF: _smime_main+88Do
		align 10h
aInkeyFileInp_1	db '-inkey file    input private key (if not signer or recipient)',0Ah,0
					; DATA XREF: _smime_main+8A2o
		align 10h
aKeyformArgInpu	db '-keyform arg   input private key format (PEM or ENGINE)',0Ah,0
					; DATA XREF: _smime_main+8B7o
aOutFileOutpu_8	db '-out file      output file',0Ah,0 ; DATA XREF: _smime_main+8CCo
		align 4
aOutformArgOu_9	db '-outform arg   output format SMIME (default), PEM or DER',0Ah,0
					; DATA XREF: _smime_main+8E1o
		align 4
aContentFileSup	db '-content file  supply or override content for detached signature',0Ah
					; DATA XREF: _smime_main+8F6o
		db 0
aToAddrToAddres	db '-to addr       to address',0Ah,0 ; DATA XREF: _smime_main+90Bo
aFromAdFromAddr	db '-from ad       from address',0Ah,0 ; DATA XREF: _smime_main+920o
aSubjectSSubjec	db '-subject s     subject',0Ah,0 ; DATA XREF: _smime_main+935o
		align 4
aTextIncludeOrD	db '-text          include or delete text MIME headers',0Ah,0
					; DATA XREF: _smime_main+94Ao
aCapathDirTrust	db '-CApath dir    trusted certificates directory',0Ah,0
					; DATA XREF: _smime_main+95Fo
		align 4
aCafileFileTrus	db '-CAfile file   trusted certificates file',0Ah,0
					; DATA XREF: _smime_main+974o
		align 4
aNo_alt_chain_1	db '-no_alt_chains only ever use the first certificate chain found',0Ah,0
					; DATA XREF: _smime_main+989o
aCrl_checkChe_0	db '-crl_check     check revocation status of signer',27h,'s certificate'
					; DATA XREF: _smime_main+99Eo
		db ' using CRLs',0Ah,0
		align 4
aCrl_check_al_0	db '-crl_check_all check revocation status of signer',27h,'s certificate'
					; DATA XREF: _smime_main+9B3o
		db ' chain using CRLs',0Ah,0
		align 4
aEngineEUseE_21	db '-engine e      use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _smime_main+9C8o
		align 4
aPassinArgInp_5	db '-passin arg    input file pass phrase source',0Ah,0
					; DATA XREF: _smime_main+9DDo
aRandFileCfil_7	db '-rand file%cfile%c...',0Ah,0 ; DATA XREF: _smime_main+A02o
		align 4
aLoadTheFileO_5	db '               load the file (or the files in the directory) into'
					; DATA XREF: _smime_main+A17o
		db 0Ah,0
		align 10h
aTheRandomNum_5	db '               the random number generator',0Ah,0
					; DATA XREF: _smime_main+A2Co
aCert_pemRecipi	db 'cert.pem       recipient certificate(s) for encryption',0Ah,0
					; DATA XREF: _smime_main+A41o
aErrorGettin_20	db 'Error getting password',0Ah,0 ; DATA XREF: _smime_main:loc_441721o
aLdSemiRandom_8	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _smime_main+D4Eo
aRecipientCerti	db 'recipient certificate file',0 ; DATA XREF: _smime_main:loc_441668o
					; _smime_main+13A8o
aCertificateF_1	db 'certificate file',0 ; DATA XREF: _smime_main+3BAo
aSigningKeyFile	db 'signing key file',0 ; DATA XREF: _smime_main+1006o
					; _smime_main+1213o
aCanTOpenInpu_2	db 'Can',27h,'t open input file %s',0Ah,0 ; DATA XREF: _smime_main+1546o
		align 4
aBadInputFor_11	db 'Bad input format for PKCS#7 file',0Ah,0 ; DATA XREF: _smime_main+47Bo
aErrorReadingSM	db 'Error reading S/MIME message',0Ah,0 ; DATA XREF: _smime_main:loc_4420E2o
aCanTReadConten	db 'Can',27h,'t read content file %s',0Ah,0 ; DATA XREF: _smime_main+17D4o
aCanTOpenOutp_4	db 'Can',27h,'t open output file %s',0Ah,0 ; DATA XREF: _smime_main+173Bo
aSignerCertific	db 'signer certificate',0 ; DATA XREF: _smime_main+FC8o
		align 10h
aErrorCreatingP	db 'Error creating PKCS#7 structure',0Ah,0
					; DATA XREF: _smime_main:loc_441CFFo
		align 4
aErrorDecrypt_0	db 'Error decrypting PKCS#7 structure',0Ah,0
					; DATA XREF: _smime_main:loc_442166o
aVerificationSu	db 'Verification successful',0Ah,0 ; DATA XREF: _smime_main:loc_44230Bo
aVerification_0	db 'Verification failure',0Ah,0 ; DATA XREF: _smime_main+160Fo
aToS		db 'To: %s',0Ah,0       ; DATA XREF: _smime_main+10E6o
aFromS		db 'From: %s',0Ah,0     ; DATA XREF: _smime_main+110Eo
aSubjectS_2	db 'Subject: %s',0Ah,0  ; DATA XREF: _smime_main+1136o
		align 4
aBadOutputFo_12	db 'Bad output format for PKCS#7 file',0Ah,0 ; DATA XREF: _smime_main+116Fo
aErrorWritingSi	db 'Error writing signers to %s',0Ah,0 ; DATA XREF: _smime_main+1BBDo
aW_1		db 'w',0                ; DATA XREF: _save_certs+Co
					; _cms_main:loc_443756o
asc_46D6FA	db '    ',0             ; DATA XREF: _gnames_stack_print+59o
asc_46D6FF	db 0Ah,0		; DATA XREF: _gnames_stack_print+75o
aWb_8		db 'wb',0               ; DATA XREF: _cms_main:loc_44408Co
aRb_6		db 'rb',0               ; DATA XREF: _cms_main:loc_44410Co
					; _cms_main:loc_444280o ...
aR_11		db 'r',0                ; DATA XREF: _cms_main+9E6o
					; _cms_main+11D1o ...
aEncrypt_2	db '-encrypt',0         ; DATA XREF: _cms_main+21Bo
aDecrypt_3	db '-decrypt',0         ; DATA XREF: _cms_main+23Co
aSign_4		db '-sign',0            ; DATA XREF: _cms_main+25Do
aSign_receipt	db '-sign_receipt',0    ; DATA XREF: _cms_main+27Eo
aResign_0	db '-resign',0          ; DATA XREF: _cms_main+29Fo
aVerify_11	db '-verify',0          ; DATA XREF: _cms_main+2C0o
aVerify_retcode	db '-verify_retcode',0  ; DATA XREF: _cms_main+2E1o
aVerify_receipt	db '-verify_receipt',0  ; DATA XREF: _cms_main+302o
aCmsout		db '-cmsout',0          ; DATA XREF: _cms_main+323o
aData_out	db '-data_out',0        ; DATA XREF: _cms_main+344o
aData_create	db '-data_create',0     ; DATA XREF: _cms_main+365o
aDigest_verify	db '-digest_verify',0   ; DATA XREF: _cms_main+386o
aDigest_create	db '-digest_create',0   ; DATA XREF: _cms_main+3A7o
aCompress	db '-compress',0        ; DATA XREF: _cms_main+3C8o
aUncompress	db '-uncompress',0      ; DATA XREF: _cms_main+3E9o
; char aEncrypteddata_[]
aEncrypteddata_	db '-EncryptedData_decrypt',0 ; DATA XREF: _cms_main+40Eo
; char aEncrypteddat_0[]
aEncrypteddat_0	db '-EncryptedData_encrypt',0 ; DATA XREF: _cms_main+426o
; char aDes3_3[]
aDes3_3		db '-des3',0            ; DATA XREF: _cms_main+43Eo
; char aDes_5[]
aDes_5		db '-des',0             ; DATA XREF: _cms_main+45Eo
; char aSeed_7[]
aSeed_7		db '-seed',0            ; DATA XREF: _cms_main+47Eo
; char aRc240_0[]
aRc240_0	db '-rc2-40',0          ; DATA XREF: _cms_main+49Eo
; char aRc2128_0[]
aRc2128_0	db '-rc2-128',0         ; DATA XREF: _cms_main+4BEo
; char aRc264_0[]
aRc264_0	db '-rc2-64',0          ; DATA XREF: _cms_main+4DEo
; char aAes128_3[]
aAes128_3	db '-aes128',0          ; DATA XREF: _cms_main+4FEo
; char aAes192_3[]
aAes192_3	db '-aes192',0          ; DATA XREF: _cms_main+51Eo
; char aAes256_3[]
aAes256_3	db '-aes256',0          ; DATA XREF: _cms_main+53Eo
; char aCamellia128_3[]
aCamellia128_3	db '-camellia128',0     ; DATA XREF: _cms_main+55Eo
; char aCamellia192_3[]
aCamellia192_3	db '-camellia192',0     ; DATA XREF: _cms_main+57Eo
; char aCamellia256_3[]
aCamellia256_3	db '-camellia256',0     ; DATA XREF: _cms_main+59Eo
; char aDebug_decrypt[]
aDebug_decrypt	db '-debug_decrypt',0   ; DATA XREF: _cms_main+5BEo
; char aText_15[]
aText_15	db '-text',0            ; DATA XREF: _cms_main+24DDo
; char aNointern_0[]
aNointern_0	db '-nointern',0        ; DATA XREF: _cms_main+2523o
; char aNoverify_1[]
aNoverify_1	db '-noverify',0        ; DATA XREF: _cms_main+259Ao
; char aNo_signer_cert[]
aNo_signer_cert	db '-no_signer_cert_verify',0 ; DATA XREF: _cms_main+25B2o
; char aNocerts_1[]
aNocerts_1	db '-nocerts',0         ; DATA XREF: _cms_main+25DAo
; char aNoattr_0[]
aNoattr_0	db '-noattr',0          ; DATA XREF: _cms_main+2836o
; char aNodetach_0[]
aNodetach_0	db '-nodetach',0        ; DATA XREF: _cms_main+2A77o
; char aNosmimecap_0[]
aNosmimecap_0	db '-nosmimecap',0      ; DATA XREF: _cms_main+2A9Do
; char aBinary_1[]
aBinary_1	db '-binary',0          ; DATA XREF: _cms_main+2AC6o
; char aKeyid[]
aKeyid		db '-keyid',0           ; DATA XREF: _cms_main+2AEFo
; char aNosigs_0[]
aNosigs_0	db '-nosigs',0          ; DATA XREF: _cms_main+2B18o
; char aNo_content_ver[]
aNo_content_ver	db '-no_content_verify',0 ; DATA XREF: _cms_main+2B3Eo
; char aNo_attr_verify[]
aNo_attr_verify	db '-no_attr_verify',0  ; DATA XREF: _cms_main+2B64o
; char aStream_0[]
aStream_0	db '-stream',0          ; DATA XREF: _cms_main+2B8Ao
; char aIndef_0[]
aIndef_0	db '-indef',0           ; DATA XREF: _cms_main+2BA6o
; char aNoindef_0[]
aNoindef_0	db '-noindef',0         ; DATA XREF: _cms_main+2BCFo
; char aNooldmime_0[]
aNooldmime_0	db '-nooldmime',0       ; DATA XREF: _cms_main+2BF8o
; char aCrlfeol_0[]
aCrlfeol_0	db '-crlfeol',0         ; DATA XREF: _cms_main+2C21o
; char aNoout_16[]
aNoout_16	db '-noout',0           ; DATA XREF: _cms_main+2C4Ao
; char aReceipt_reques[]
aReceipt_reques	db '-receipt_request_print',0 ; DATA XREF: _cms_main+2C66o
; char aReceipt_requ_0[]
aReceipt_requ_0	db '-receipt_request_all',0 ; DATA XREF: _cms_main+2C82o
; char aReceipt_requ_1[]
aReceipt_requ_1	db '-receipt_request_first',0 ; DATA XREF: _cms_main+2C9Eo
; char aReceipt_requ_2[]
aReceipt_requ_2	db '-receipt_request_from',0 ; DATA XREF: _cms_main+2CBAo
; char aReceipt_requ_3[]
aReceipt_requ_3	db '-receipt_request_to',0 ; DATA XREF: _cms_main+2D32o
; char aPrint_0[]
aPrint_0	db '-print',0           ; DATA XREF: _cms_main+2D8Do
; char aSecretkey[]
aSecretkey	db '-secretkey',0       ; DATA XREF: _cms_main+2DA9o
aInvalidKeyS	db 'Invalid key %s',0Ah,0 ; DATA XREF: _cms_main+2E6Co
; char aSecretkeyid[]
aSecretkeyid	db '-secretkeyid',0     ; DATA XREF: _cms_main+2E8Ao
aInvalidIdS	db 'Invalid id %s',0Ah,0 ; DATA XREF: _cms_main+2F04o
; char aPwri_password[]
aPwri_password	db '-pwri_password',0   ; DATA XREF: _cms_main+2F22o
; char aEcontent_type[]
aEcontent_type	db '-econtent_type',0   ; DATA XREF: _cms_main+2F58o
aInvalidOidS	db 'Invalid OID %s',0Ah,0 ; DATA XREF: _cms_main+2FFCo
; char aRand_11[]
aRand_11	db '-rand',0            ; DATA XREF: _cms_main+2FB8o
; char aEngine_28[]
aEngine_28	db '-engine',0          ; DATA XREF: _cms_main+301Ao
; char aPassin_13[]
aPassin_13	db '-passin',0          ; DATA XREF: _cms_main+304Ao
; char aTo_0[]
aTo_0		db '-to',0              ; DATA XREF: _cms_main+307Ao
; char aFrom_0[]
aFrom_0		db '-from',0            ; DATA XREF: _cms_main+30ADo
; char aSubject_6[]
aSubject_6	db '-subject',0         ; DATA XREF: _cms_main+30E0o
; char aSigner_0[]
aSigner_0	db '-signer',0          ; DATA XREF: _cms_main+3113o
; char aRecip_0[]
aRecip_0	db '-recip',0           ; DATA XREF: _cms_main+31D9o
; char aCertsout[]
aCertsout	db '-certsout',0        ; DATA XREF: _cms_main+3209o
; char aMd_2[]
aMd_2		db '-md',0              ; DATA XREF: _cms_main+323Co
aUnknownDiges_0	db 'Unknown digest %s',0Ah,0 ; DATA XREF: _cms_main+328Do
; char aInkey_3[]
aInkey_3	db '-inkey',0           ; DATA XREF: _cms_main+32ABo
		align 4
aIllegalInkey_0	db 'Illegal -inkey without -signer',0Ah,0 ; DATA XREF: _cms_main:loc_444293o
; char aKeyform_8[]
aKeyform_8	db '-keyform',0         ; DATA XREF: _cms_main+3370o
; char aRctform[]
aRctform	db '-rctform',0         ; DATA XREF: _cms_main+33C7o
; char aCertfile_2[]
aCertfile_2	db '-certfile',0        ; DATA XREF: _cms_main+341Eo
; char aCafile_6[]
aCafile_6	db '-CAfile',0          ; DATA XREF: _cms_main+344Eo
; char aCapath_6[]
aCapath_6	db '-CApath',0          ; DATA XREF: _cms_main+3481o
; char aIn_24[]
aIn_24		db '-in',0              ; DATA XREF: _cms_main+34B4o
; char aInform_16[]
aInform_16	db '-inform',0          ; DATA XREF: _cms_main+34E7o
; char aOutform_16[]
aOutform_16	db '-outform',0         ; DATA XREF: _cms_main+353Bo
; char aOut_29[]
aOut_29		db '-out',0             ; DATA XREF: _cms_main+3580o
; char aContent_0[]
aContent_0	db '-content',0         ; DATA XREF: _cms_main+35B3o
		align 4
aNoSignedReceip	db 'No Signed Receipts Recipients',0Ah,0 ; DATA XREF: _cms_main:loc_443EDAo
		align 4
aSignedReceipts	db 'Signed receipts only allowed with -sign',0Ah,0
					; DATA XREF: _cms_main:loc_4438ECo
		align 4
aMultipleSign_0	db 'Multiple signers or keys not allowed',0Ah,0
					; DATA XREF: _cms_main:loc_443DC2o
		align 4
aNoSignerCert_0	db 'No signer certificate specified',0Ah,0
					; DATA XREF: _cms_main:loc_444253o
		align 10h
aNoRecipientC_0	db 'No recipient certificate or key specified',0Ah,0
					; DATA XREF: _cms_main+2A4Eo
		align 4
aNoRecipientS_0	db 'No recipient(s) certificate(s) specified',0Ah,0
					; DATA XREF: _cms_main+1C89o
		align 4
aUsageCmsOption	db 'Usage cms [options] cert.pem ...',0Ah,0
					; DATA XREF: _cms_main:loc_443901o
aWhereOption_18	db 'where options are',0Ah,0 ; DATA XREF: _cms_main+B86o
		align 10h
aEncryptEncry_2	db '-encrypt       encrypt message',0Ah,0 ; DATA XREF: _cms_main+B9Bo
aDecryptDecry_2	db '-decrypt       decrypt encrypted message',0Ah,0
					; DATA XREF: _cms_main+BB0o
aSignSignMess_0	db '-sign          sign message',0Ah,0 ; DATA XREF: _cms_main+BC5o
		align 4
aVerifyVerify_2	db '-verify        verify signed message',0Ah,0 ; DATA XREF: _cms_main+BDAo
		align 10h
aCmsoutOutputCm	db '-cmsout        output CMS structure',0Ah,0 ; DATA XREF: _cms_main+BEFo
		align 4
aDes3EncryptW_0	db '-des3          encrypt with triple DES',0Ah,0
					; DATA XREF: _cms_main+C04o
aDesEncryptWi_0	db '-des           encrypt with DES',0Ah,0 ; DATA XREF: _cms_main+C19o
		align 4
aSeedEncryptW_0	db '-seed          encrypt with SEED',0Ah,0 ; DATA XREF: _cms_main+C2Eo
		align 4
aRc240Encrypt_0	db '-rc2-40        encrypt with RC2-40 (default)',0Ah,0
					; DATA XREF: _cms_main+C43o
		align 4
aRc264Encrypt_0	db '-rc2-64        encrypt with RC2-64',0Ah,0 ; DATA XREF: _cms_main+C58o
aRc2128Encryp_0	db '-rc2-128       encrypt with RC2-128',0Ah,0 ; DATA XREF: _cms_main+C6Do
aAes128Aes192_5	db '-aes128, -aes192, -aes256',0Ah,0 ; DATA XREF: _cms_main+C82o
aEncryptPemO_13	db '               encrypt PEM output with cbc aes',0Ah,0
					; DATA XREF: _cms_main+C97o
aCamellia128C_6	db '-camellia128, -camellia192, -camellia256',0Ah,0
					; DATA XREF: _cms_main+CACo
		align 4
aEncryptPemO_14	db '               encrypt PEM output with cbc camellia',0Ah,0
					; DATA XREF: _cms_main+CC1o
		align 10h
aNointernDonT_0	db '-nointern      don',27h,'t search certificates in message for signer'
					; DATA XREF: _cms_main+CD6o
		db 0Ah,0
aNosigsDonTVe_0	db '-nosigs        don',27h,'t verify message signature',0Ah,0
					; DATA XREF: _cms_main+CEBo
		align 10h
aNoverifyDonT_0	db '-noverify      don',27h,'t verify signers certificate',0Ah,0
					; DATA XREF: _cms_main+D00o
		align 4
aNocertsDonTI_0	db '-nocerts       don',27h,'t include signers certificate when signing',0Ah
					; DATA XREF: _cms_main+D15o
		db 0
		align 4
aNodetachUseO_0	db '-nodetach      use opaque signing',0Ah,0 ; DATA XREF: _cms_main+D2Ao
		align 4
aNoattrDonTIn_0	db '-noattr        don',27h,'t include any signed attributes',0Ah,0
					; DATA XREF: _cms_main+D3Fo
aBinaryDonTTr_0	db '-binary        don',27h,'t translate message to text',0Ah,0
					; DATA XREF: _cms_main+D54o
aCertfileFile_0	db '-certfile file other certificates file',0Ah,0
					; DATA XREF: _cms_main+D69o
aCertsoutFileCe	db '-certsout file certificate output file',0Ah,0
					; DATA XREF: _cms_main+D7Eo
aSignerFileSi_0	db '-signer file   signer certificate file',0Ah,0
					; DATA XREF: _cms_main+D93o
aRecipFileRec_0	db '-recip  file   recipient certificate file for decryption',0Ah,0
					; DATA XREF: _cms_main+DA8o
		align 10h
aKeyidUseSubjec	db '-keyid         use subject key identifier',0Ah,0
					; DATA XREF: _cms_main+DBDo
aInFileInputF_6	db '-in file       input file',0Ah,0 ; DATA XREF: _cms_main+DD2o
		align 4
aInformArgIn_11	db '-inform arg    input format SMIME (default), PEM or DER',0Ah,0
					; DATA XREF: _cms_main+DE7o
		align 4
aInkeyFileInp_2	db '-inkey file    input private key (if not signer or recipient)',0Ah,0
					; DATA XREF: _cms_main+DFCo
		align 4
aKeyformArgIn_0	db '-keyform arg   input private key format (PEM or ENGINE)',0Ah,0
					; DATA XREF: _cms_main+E11o
aOutFileOutpu_9	db '-out file      output file',0Ah,0 ; DATA XREF: _cms_main+E26o
		align 4
aOutformArgO_10	db '-outform arg   output format SMIME (default), PEM or DER',0Ah,0
					; DATA XREF: _cms_main+E3Bo
		align 4
aContentFileS_0	db '-content file  supply or override content for detached signature',0Ah
					; DATA XREF: _cms_main+E50o
		db 0
aToAddrToAddr_0	db '-to addr       to address',0Ah,0 ; DATA XREF: _cms_main+E65o
aFromAdFromAd_0	db '-from ad       from address',0Ah,0 ; DATA XREF: _cms_main+E7Ao
aSubjectSSubj_0	db '-subject s     subject',0Ah,0 ; DATA XREF: _cms_main+E8Fo
		align 4
aTextIncludeO_0	db '-text          include or delete text MIME headers',0Ah,0
					; DATA XREF: _cms_main+EA4o
aCapathDirTru_0	db '-CApath dir    trusted certificates directory',0Ah,0
					; DATA XREF: _cms_main+EB9o
		align 10h
aCafileFileTr_0	db '-CAfile file   trusted certificates file',0Ah,0
					; DATA XREF: _cms_main+ECEo
		align 4
aNo_alt_chain_2	db '-no_alt_chains only ever use the first certificate chain found',0Ah,0
					; DATA XREF: _cms_main+EE3o
aCrl_checkChe_1	db '-crl_check     check revocation status of signer',27h,'s certificate'
					; DATA XREF: _cms_main+EF8o
		db ' using CRLs',0Ah,0
		align 4
aCrl_check_al_1	db '-crl_check_all check revocation status of signer',27h,'s certificate'
					; DATA XREF: _cms_main+F0Do
		db ' chain using CRLs',0Ah,0
		align 4
aEngineEUseE_22	db '-engine e      use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: _cms_main+F22o
		align 4
aPassinArgInp_6	db '-passin arg    input file pass phrase source',0Ah,0
					; DATA XREF: _cms_main+F37o
aRandFileCfil_8	db '-rand file%cfile%c...',0Ah,0 ; DATA XREF: _cms_main+F5Co
		align 10h
aLoadTheFileO_6	db '               load the file (or the files in the directory) into'
					; DATA XREF: _cms_main+F71o
		db 0Ah,0
		align 4
aTheRandomNum_6	db '               the random number generator',0Ah,0
					; DATA XREF: _cms_main+F86o
aCert_pemReci_0	db 'cert.pem       recipient certificate(s) for encryption',0Ah,0
					; DATA XREF: _cms_main+F9Bo
aErrorGettin_21	db 'Error getting password',0Ah,0 ; DATA XREF: _cms_main:loc_444099o
aLdSemiRandom_9	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _cms_main+1358o
aNoSecretKeyId	db 'No secret key id',0Ah,0 ; DATA XREF: _cms_main:loc_4446D3o
aRecipientCer_0	db 'recipient certificate file',0 ; DATA XREF: _cms_main:loc_443FF8o
					; _cms_main:loc_4442ADo
aCertificateF_2	db 'certificate file',0 ; DATA XREF: _cms_main+9FFo
aReceiptSignerC	db 'receipt signer certificate file',0 ; DATA XREF: _cms_main:loc_444327o
aSigningKeyFi_0	db 'signing key file',0 ; DATA XREF: _cms_main:loc_4441C6o
					; _cms_main+17EAo
aCanTOpenInpu_3	db 'Can',27h,'t open input file %s',0Ah,0 ; DATA XREF: _cms_main+1688o
		align 4
aBadInputFor_12	db 'Bad input format for CMS file',0Ah,0 ; DATA XREF: _cms_main+AD4o
aErrorReading_6	db 'Error reading S/MIME message',0Ah,0 ; DATA XREF: _cms_main:loc_4454C7o
aCanTReadCont_0	db 'Can',27h,'t read content file %s',0Ah,0 ; DATA XREF: _cms_main+2589o
aErrorWritingCe	db 'Error writing certs to %s',0Ah,0 ; DATA XREF: _cms_main+1AA5o
aCanTOpenReceip	db 'Can',27h,'t open receipt file %s',0Ah,0 ; DATA XREF: _cms_main+19AEo
aBadInputFor_13	db 'Bad input format for receipt',0Ah,0 ; DATA XREF: _cms_main+13E7o
aErrorReadingRe	db 'Error reading receipt',0Ah,0 ; DATA XREF: _cms_main:loc_445517o
aCanTOpenOutp_5	db 'Can',27h,'t open output file %s',0Ah,0 ; DATA XREF: _cms_main+275Co
aSignedReceiptR	db 'Signed Receipt Request Creation Error',0Ah,0
					; DATA XREF: _cms_main:loc_444D2Co
aSignerCertif_0	db 'signer certificate',0 ; DATA XREF: _cms_main+17ADo
aErrorCreatingC	db 'Error creating CMS structure',0Ah,0 ; DATA XREF: _cms_main:loc_444C4Ao
aErrorDecrypt_3	db 'Error decrypting CMS using secret key',0Ah,0
					; DATA XREF: _cms_main:loc_444C36o
		align 4
aErrorDecrypt_4	db 'Error decrypting CMS using private key',0Ah,0
					; DATA XREF: _cms_main:loc_444C40o
aErrorDecrypt_2	db 'Error decrypting CMS using password',0Ah,0
					; DATA XREF: _cms_main:loc_444C15o
		align 4
aErrorDecrypt_1	db 'Error decrypting CMS structure',0Ah,0 ; DATA XREF: _cms_main+1E78o
aVerification_1	db 'Verification successful',0Ah,0 ; DATA XREF: _cms_main:loc_444A51o
					; _cms_main+21CBo
aVerification_2	db 'Verification failure',0Ah,0 ; DATA XREF: _cms_main:loc_444AD6o
					; _cms_main:loc_44519Co
aErrorWriting_1	db 'Error writing signers to %s',0Ah,0 ; DATA XREF: _cms_main+220Ao
aSignerD	db 'Signer %d:',0Ah,0   ; DATA XREF: _cms_main+22E6o
aNoReceiptReque	db '  No Receipt Request',0Ah,0 ; DATA XREF: _cms_main:loc_445221o
		align 4
aReceiptRequest	db '  Receipt Request Parse Error',0Ah,0 ; DATA XREF: _cms_main:loc_4451FAo
aSignedContentI	db '  Signed Content ID:',0Ah,0 ; DATA XREF: _cms_main+2348o
aReceiptsFrom	db '  Receipts From',0  ; DATA XREF: _cms_main+2396o
aList		db ' List:',0Ah,0       ; DATA XREF: _cms_main+23B4o
aFirstTier	db ': First Tier',0Ah,0 ; DATA XREF: _cms_main:loc_445254o
aAll		db ': All',0Ah,0        ; DATA XREF: _cms_main+2455o
aUnknownD	db ' Unknown (%d)',0Ah,0 ; DATA XREF: _cms_main+24AFo
aReceiptsTo	db '  Receipts To:',0Ah,0 ; DATA XREF: _cms_main:loc_445162o
aToS_0		db 'To: %s',0Ah,0       ; DATA XREF: _cms_main+2106o
aFromS_0	db 'From: %s',0Ah,0     ; DATA XREF: _cms_main+2129o
aSubjectS_3	db 'Subject: %s',0Ah,0  ; DATA XREF: _cms_main+214Co
aBadOutputFo_13	db 'Bad output format for CMS file',0Ah,0 ; DATA XREF: _cms_main+2094o
aOut_30		db '-out',0             ; DATA XREF: _rand_main+93o
aEngine_29	db '-engine',0          ; DATA XREF: _rand_main:loc_446780o
aRand_12	db '-rand',0            ; DATA XREF: _rand_main:loc_4467D0o
aBase64_1	db '-base64',0          ; DATA XREF: _rand_main:loc_446816o
aHex_0		db '-hex',0             ; DATA XREF: _rand_main:loc_446845o
; char aD_5[]
aD_5		db '%d',0               ; DATA XREF: _rand_main+48Ao
aUsageRandOptio	db 'Usage: rand [options] num',0Ah,0 ; DATA XREF: _rand_main:loc_446504o
aWhereOption_19	db 'where options are',0Ah,0 ; DATA XREF: _rand_main+F9o
		align 4
aOutFileWriteTo	db '-out file             - write to file',0Ah,0
					; DATA XREF: _rand_main+10Eo
		align 4
aEngineEUseE_23	db '-engine e             - use engine e, possibly a hardware device.'
					; DATA XREF: _rand_main+123o
		db 0Ah,0
		align 4
aRandFileCfil_9	db '-rand file%cfile%c... - seed PRNG from files',0Ah,0
					; DATA XREF: _rand_main+148o
		align 4
aBase64Base64En	db '-base64               - base64 encode output',0Ah,0
					; DATA XREF: _rand_main+15Do
		align 4
aHexHexEncodeOu	db '-hex                  - hex encode output',0Ah,0
					; DATA XREF: _rand_main+172o
aLdSemiRando_10	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _rand_main+20Bo
a02x_6		db '%02x',0             ; DATA XREF: _rand_main+2B9o
asc_46EA16	db 0Ah,0		; DATA XREF: _rand_main:loc_4469BFo
aErrorInternalS	db '[Error]: internal stack error',0Ah,0
					; DATA XREF: _util_do_cmds_isra_0:loc_446B6Fo
		align 4
aErrorCommandNa	db '[Error]: command name too long',0Ah,0
					; DATA XREF: _util_do_cmds_isra_0:loc_446B50o
aSuccessS	db '[Success]: %s',0Ah,0 ; DATA XREF: _util_do_cmds_isra_0+112o
aFailureS	db '[Failure]: %s',0Ah,0 ; DATA XREF: _util_do_cmds_isra_0+44o
aNoDescription	db '<no description>',0 ; DATA XREF: _engine_main:loc_4479E7o
aV_1		db '-v',0               ; DATA XREF: _engine_main+142o
; char aV_3[2]
aV_3		db 'v',0                ; DATA XREF: _engine_main+103o
aC_7		db '-c',0               ; DATA XREF: _engine_main+150o
aT_0		db '-t',0               ; DATA XREF: _engine_main+164o
; char aT[2]
aT		db 't',0                ; DATA XREF: _engine_main+17Bo
aPre_0		db '-pre',0             ; DATA XREF: _engine_main:loc_446E80o
aPost		db '-post',0            ; DATA XREF: _engine_main:loc_446EB0o
asc_46EA9F	db '-h',0               ; DATA XREF: _engine_main+334o
a?_1		db '-?',0               ; DATA XREF: _engine_main+344o
aS_15		db '%s',0               ; DATA XREF: _engine_main+384o
					; _engine_main+6C8o ...
aSS_5		db '(%s) %s',0Ah,0      ; DATA XREF: _engine_main+22Eo
aLoadedSS	db 'Loaded: (%s) %s',0Ah,0 ; DATA XREF: _engine_main+69Eo
aEngine_c	db 'engine.c',0         ; DATA XREF: _engine_main+46Co
					; _engine_main+62Do ...
aRsa_1		db 'RSA',0              ; DATA XREF: _engine_main+495o
asc_46EACF	db ', ',0               ; DATA XREF: _engine_main+65Co
					; _engine_main:loc_447580o ...
aDsa_0		db 'DSA',0              ; DATA XREF: _engine_main+4E5o
aDh		db 'DH',0               ; DATA XREF: _engine_main+529o
aRand_13	db 'RAND',0             ; DATA XREF: _engine_main+569o
aS_16		db ' [%s]',0Ah,0        ; DATA XREF: _engine_main+119Bo
asc_46EAE5	db '     ',0            ; DATA XREF: _engine_main:loc_447250o
					; _engine_main+8FAo ...
aAvailable	db '[ available ]',0Ah,0 ; DATA XREF: _engine_main:loc_447544o
aUnavailable	db '[ unavailable ]',0Ah,0 ; DATA XREF: _engine_main+6F0o
asc_46EB0B	db 0Ah,0		; DATA XREF: _engine_main:loc_44784Bo
					; _engine_main:loc_447C60o ...
aSS_6		db '%s: %s',0Ah,0       ; DATA XREF: _engine_main+92Do
aSSInputFlags	db '%s%s(input flags): ',0 ; DATA XREF: _engine_main+C09o
aNoFlags	db '<no flags>',0Ah,0   ; DATA XREF: _engine_main:loc_447C3Fo
aInternal	db '[Internal] ',0      ; DATA XREF: _engine_main:loc_447C26o
aNumeric	db 'NUMERIC',0          ; DATA XREF: _engine_main:loc_447BD5o
asc_46EB49	db '|',0                ; DATA XREF: _engine_main+C7Fo
					; _engine_main:loc_447B65o ...
aString		db 'STRING',0           ; DATA XREF: _engine_main:loc_4477E3o
aNo_input	db 'NO_INPUT',0         ; DATA XREF: _engine_main:loc_447B81o
a0x04x		db '<0x%04X>',0         ; DATA XREF: _engine_main+C9Bo
aIllegalFlags	db '  <illegal flags!>',0 ; DATA XREF: _engine_main:loc_447BBCo
		align 4
aUsageEngineOpt	db 'usage: engine opts [engine ...]',0Ah,0 ; DATA XREF: .data:_engine_usageo
		align 4
aVVVVVerboseMod	db ' -v[v[v[v]]] - verbose mode, for each engine, list its ',27h,'contro'
					; DATA XREF: .data:00457384o
		db 'l commands',27h,0Ah,0
		align 4
aVvWillAddition	db '               -vv will additionally display each command',27h,'s de'
					; DATA XREF: .data:00457388o
		db 'scription',0Ah,0
		align 4
aVvvWillAlsoAdd	db '               -vvv will also add the input flags for each comman'
					; DATA XREF: .data:0045738Co
		db 'd',0Ah,0
aVvvvWillAlsoSh	db '               -vvvv will also show internal input flags',0Ah,0
					; DATA XREF: .data:00457390o
		align 4
aCForEachEngine	db ' -c          - for each engine, also list the capabilities',0Ah,0
					; DATA XREF: .data:00457394o
aTTForEachEngin	db ' -t[t]       - for each engine, check that they are really availa'
					; DATA XREF: .data:00457398o
		db 'ble',0Ah,0
		align 4
aTtWillDisplayE	db '               -tt will display error trace for unavailable engin'
					; DATA XREF: .data:0045739Co
		db 'es',0Ah,0
		align 10h
aPreCmdRunsComm	db ' -pre <cmd>  - runs command ',27h,'cmd',27h,' against the ENGINE before'
					; DATA XREF: .data:004573A0o
		db ' any attempts',0Ah,0
		align 4
aToLoadItIfTIsU	db '               to load it (if -t is used)',0Ah,0
					; DATA XREF: .data:004573A4o
		align 4
aPostCmdRunsCom	db ' -post <cmd> - runs command ',27h,'cmd',27h,' against the ENGINE after '
					; DATA XREF: .data:004573A8o
		db 'loading it',0Ah,0
		align 10h
aOnlyUsedIfTIsA	db '               (only used if -t is also provided)',0Ah,0
					; DATA XREF: .data:004573ACo
		align 4
aNbPreAndPostWi	db ' NB: -pre and -post will be applied to all ENGINEs supplied on th'
					; DATA XREF: .data:004573B0o
		db 'e command',0Ah,0
aLineOrAllSuppo	db ' line, or all supported ENGINEs if none are specified.',0Ah,0
					; DATA XREF: .data:004573B4o
aEg_PreSo_pathL	db ' Eg. ',27h,'-pre "SO_PATH:/lib/libdriver.so"',27h,' calls command "SO_P'
					; DATA XREF: .data:004573B8o
		db 'ATH" with',0Ah,0
		align 10h
aArgumentLibLib	db ' argument "/lib/libdriver.so".',0Ah,0 ; DATA XREF: .data:004573BCo
aErrorConnectin	db 'Error connecting BIO',0Ah,0 ; DATA XREF: _query_responder:loc_4481C0o
aCanTGetConnect	db 'Can',27h,'t get connection fd',0Ah,0
					; DATA XREF: _query_responder:loc_448180o
aTimeoutOnConne	db 'Timeout on connect',0Ah,0 ; DATA XREF: _query_responder+220o
aUnexpectedRetr	db 'Unexpected retry condition',0Ah,0
					; DATA XREF: _query_responder:loc_448213o
aTimeoutOnReque	db 'Timeout on request',0Ah,0 ; DATA XREF: _query_responder:loc_4481DDo
aSelectError	db 'Select error',0Ah,0 ; DATA XREF: _query_responder:loc_4481F8o
aErrorAccepting	db 'Error accepting connection',0Ah,0
					; DATA XREF: _do_responder_isra_0:loc_448330o
aPost_0		db 'POST',0             ; DATA XREF: _do_responder_isra_0+54o
aInvalidRequest	db 'Invalid request',0Ah,0 ; DATA XREF: _do_responder_isra_0:loc_448360o
aErrorParsingOc	db 'Error parsing OCSP request',0Ah,0
					; DATA XREF: _do_responder_isra_0:loc_448385o
aErrorCreatin_0	db 'Error creating connect BIO',0Ah,0
					; DATA XREF: _process_responder:loc_4484CAo
aErrorCreatin_1	db 'Error creating SSL context.',0Ah,0
					; DATA XREF: _process_responder:loc_4484E5o
aErrorQueryingO	db 'Error querying OCSP responder',0Ah,0
					; DATA XREF: _process_responder:loc_4484B0o
asc_46F087	db '/',0                ; DATA XREF: _ocsp_main+20o
aOut_31		db '-out',0             ; DATA XREF: _ocsp_main+438o
aTimeout_1	db '-timeout',0         ; DATA XREF: _ocsp_main+441o
aIllegalTimeout	db 'Illegal timeout value %s',0Ah,0 ; DATA XREF: _ocsp_main+1027o
aUrl		db '-url',0             ; DATA XREF: _ocsp_main:loc_448980o
aErrorParsing_0	db 'Error parsing URL',0Ah,0 ; DATA XREF: _ocsp_main:loc_449760o
aHost_0		db '-host',0            ; DATA XREF: _ocsp_main:loc_448A90o
aPort_1		db '-port',0            ; DATA XREF: _ocsp_main:loc_448A40o
aHeader		db '-header',0          ; DATA XREF: _ocsp_main+554o
aIgnore_err	db '-ignore_err',0      ; DATA XREF: _ocsp_main:loc_449D20o
aNoverify_2	db '-noverify',0        ; DATA XREF: _ocsp_main+1834o
aNonce		db '-nonce',0           ; DATA XREF: _ocsp_main+1848o
aNo_nonce	db '-no_nonce',0        ; DATA XREF: _ocsp_main+185Co
aResp_no_certs	db '-resp_no_certs',0   ; DATA XREF: _ocsp_main+1870o
aResp_key_id	db '-resp_key_id',0     ; DATA XREF: _ocsp_main:loc_44A63Fo
aNo_certs	db '-no_certs',0        ; DATA XREF: _ocsp_main:loc_44A66Eo
aNo_signature_0	db '-no_signature_verify',0 ; DATA XREF: _ocsp_main+217Eo
aNo_cert_veri_0	db '-no_cert_verify',0  ; DATA XREF: _ocsp_main:loc_44A7AEo
aNo_chain	db '-no_chain',0        ; DATA XREF: _ocsp_main:loc_44A808o
aNo_cert_chec_0	db '-no_cert_checks',0  ; DATA XREF: _ocsp_main:loc_44A829o
aNo_explicit	db '-no_explicit',0     ; DATA XREF: _ocsp_main:loc_44A84Do
aTrust_other	db '-trust_other',0     ; DATA XREF: _ocsp_main:loc_44A86Eo
aNo_intern	db '-no_intern',0       ; DATA XREF: _ocsp_main:loc_44A892o
aText_16	db '-text',0            ; DATA XREF: _ocsp_main:loc_44A8B3o
aReq_text	db '-req_text',0        ; DATA XREF: _ocsp_main+23C3o
aResp_text	db '-resp_text',0       ; DATA XREF: _ocsp_main+23D7o
aReqin		db '-reqin',0           ; DATA XREF: _ocsp_main+23E7o
aRespin		db '-respin',0          ; DATA XREF: _ocsp_main:loc_44A92Fo
aSigner_1	db '-signer',0          ; DATA XREF: _ocsp_main:loc_44A983o
aVafile		db '-VAfile',0          ; DATA XREF: _ocsp_main:loc_44A9ACo
aSign_other	db '-sign_other',0      ; DATA XREF: _ocsp_main:loc_44A9E3o
aVerify_other	db '-verify_other',0    ; DATA XREF: _ocsp_main:loc_44AA0Fo
aCafile_7	db '-CAfile',0          ; DATA XREF: _ocsp_main:loc_44AA3Bo
aCapath_7	db '-CApath',0          ; DATA XREF: _ocsp_main:loc_44AA67o
aValidity_per_0	db '-validity_period',0 ; DATA XREF: _ocsp_main:loc_44AA93o
aIllegalValidit	db 'Illegal validity period %s',0Ah,0 ; DATA XREF: _ocsp_main+25CFo
aStatus_age	db '-status_age',0      ; DATA XREF: _ocsp_main:loc_44AAEEo
aIllegalValid_0	db 'Illegal validity age %s',0Ah,0 ; DATA XREF: _ocsp_main+262Ao
aSignkey_0	db '-signkey',0         ; DATA XREF: _ocsp_main:loc_44AB49o
aReqout		db '-reqout',0          ; DATA XREF: _ocsp_main:loc_44AB75o
aRespout	db '-respout',0         ; DATA XREF: _ocsp_main:loc_44ABA1o
aPath		db '-path',0            ; DATA XREF: _ocsp_main:loc_44ABCDo
aIssuer_5	db '-issuer',0          ; DATA XREF: _ocsp_main:loc_44ABF9o
aIssuerCertific	db 'issuer certificate',0 ; DATA XREF: _ocsp_main+2726o
aCert_4		db '-cert',0            ; DATA XREF: _ocsp_main:loc_44AC6Ao
aCertificate_5	db 'certificate',0      ; DATA XREF: _ocsp_main+279Bo
		align 4
aNoIssuerCertif	db 'No issuer certificate specified',0Ah,0
					; DATA XREF: _ocsp_main:loc_44AD62o
aErrorCreatin_2	db 'Error Creating OCSP request',0Ah,0 ; DATA XREF: _ocsp_main:loc_44AD36o
aSerial_2	db '-serial',0          ; DATA XREF: _ocsp_main:loc_44AD7Co
		align 4
aErrorConvert_2	db 'Error converting serial number %s',0Ah,0 ; DATA XREF: _ocsp_main+29D6o
aIndex		db '-index',0           ; DATA XREF: _ocsp_main:loc_44AE40o
aCa_1		db '-CA',0              ; DATA XREF: _ocsp_main:loc_44AEA9o
aNmin		db '-nmin',0            ; DATA XREF: _ocsp_main:loc_44AF09o
aIllegalUpdateP	db 'Illegal update period %s',0Ah,0 ; DATA XREF: _ocsp_main+2AB9o
					; _ocsp_main+2B1Do
aNrequest	db '-nrequest',0        ; DATA XREF: _ocsp_main:loc_44AF57o
aIllegalAcceptC	db 'Illegal accept count %s',0Ah,0 ; DATA XREF: _ocsp_main+2A93o
aNdays		db '-ndays',0           ; DATA XREF: _ocsp_main:loc_44AFE1o
aRsigner	db '-rsigner',0         ; DATA XREF: _ocsp_main:loc_44B03Co
aRkey		db '-rkey',0            ; DATA XREF: _ocsp_main:loc_44B065o
aRother		db '-rother',0          ; DATA XREF: _ocsp_main:loc_44B08Eo
aOcspUtility	db 'OCSP utility',0Ah,0 ; DATA XREF: _ocsp_main:loc_449810o
aUsageOcspOptio	db 'Usage ocsp [options]',0Ah,0 ; DATA XREF: _ocsp_main+1325o
aWhereOption_20	db 'where options are',0Ah,0 ; DATA XREF: _ocsp_main+133Ao
		align 4
aOutFileOutp_10	db '-out file            output filename',0Ah,0
					; DATA XREF: _ocsp_main+134Fo
		align 4
aIssuerFileIssu	db '-issuer file         issuer certificate',0Ah,0
					; DATA XREF: _ocsp_main+1364o
		align 4
aCertFileCertif	db '-cert file           certificate to check',0Ah,0
					; DATA XREF: _ocsp_main+1379o
		align 4
aSerialNSerialN	db '-serial n            serial number to check',0Ah,0
					; DATA XREF: _ocsp_main+138Eo
		align 4
aSignerFileCert	db '-signer file         certificate to sign OCSP request with',0Ah,0
					; DATA XREF: _ocsp_main+13A3o
aSignkeyFilePri	db '-signkey file        private key to sign OCSP request with',0Ah,0
					; DATA XREF: _ocsp_main+13B8o
aSign_otherFile	db '-sign_other file     additional certificates to include in signed'
					; DATA XREF: _ocsp_main+13CDo
		db ' request',0Ah,0
		align 4
aNo_certsDonTIn	db '-no_certs            don',27h,'t include any certificates in signed '
					; DATA XREF: _ocsp_main+13E2o
		db 'request',0Ah,0
		align 10h
aReq_textPrintT	db '-req_text            print text form of request',0Ah,0
					; DATA XREF: _ocsp_main+13F7o
		align 4
aResp_textPrint	db '-resp_text           print text form of response',0Ah,0
					; DATA XREF: _ocsp_main+140Co
		align 4
aTextPrintTextF	db '-text                print text form of request and response',0Ah,0
					; DATA XREF: _ocsp_main+1421o
		align 4
aReqoutFileWrit	db '-reqout file         write DER encoded OCSP request to "file"',0Ah,0
					; DATA XREF: _ocsp_main+1436o
		align 4
aRespoutFileWri	db '-respout file        write DER encoded OCSP reponse to "file"',0Ah,0
					; DATA XREF: _ocsp_main+144Bo
		align 4
aReqinFileReadD	db '-reqin file          read DER encoded OCSP request from "file"',0Ah,0
					; DATA XREF: _ocsp_main+1460o
aRespinFileRead	db '-respin file         read DER encoded OCSP reponse from "file"',0Ah,0
					; DATA XREF: _ocsp_main+1475o
aNonceAddOcspNo	db '-nonce               add OCSP nonce to request',0Ah,0
					; DATA XREF: _ocsp_main+148Ao
aNo_nonceDonTAd	db '-no_nonce            don',27h,'t add OCSP nonce to request',0Ah,0
					; DATA XREF: _ocsp_main+149Fo
		align 10h
aUrlUrlOcspResp	db '-url URL             OCSP responder URL',0Ah,0
					; DATA XREF: _ocsp_main+14B4o
		align 4
aHostHostNSendO	db '-host host:n         send OCSP request to host on port n',0Ah,0
					; DATA XREF: _ocsp_main+14C9o
		align 4
aPathPathToUseI	db '-path                path to use in OCSP request',0Ah,0
					; DATA XREF: _ocsp_main+14DEo
		align 4
aCapathDirTru_1	db '-CApath dir          trusted certificates directory',0Ah,0
					; DATA XREF: _ocsp_main+14F3o
		align 4
aCafileFileTr_1	db '-CAfile file         trusted certificates file',0Ah,0
					; DATA XREF: _ocsp_main+1508o
aNo_alt_chain_3	db '-no_alt_chains       only ever use the first certificate chain fo'
					; DATA XREF: _ocsp_main+151Do
		db 'und',0Ah,0
		align 4
aVafileFileVali	db '-VAfile file         validator certificates file',0Ah,0
					; DATA XREF: _ocsp_main+1532o
		align 10h
aValidity_perio	db '-validity_period n   maximum validity discrepancy in seconds',0Ah,0
					; DATA XREF: _ocsp_main+1547o
		align 10h
aStatus_ageNMax	db '-status_age n        maximum status age in seconds',0Ah,0
					; DATA XREF: _ocsp_main+155Co
aNoverifyDonT_1	db '-noverify            don',27h,'t verify response at all',0Ah,0
					; DATA XREF: _ocsp_main+1571o
		align 4
aVerify_otherFi	db '-verify_other file   additional certificates to search for signer'
					; DATA XREF: _ocsp_main+1586o
		db 0Ah,0
		align 4
aTrust_otherDon	db '-trust_other         don',27h,'t verify additional certificates',0Ah,0
					; DATA XREF: _ocsp_main+159Bo
		align 4
aNo_internDonTS	db '-no_intern           don',27h,'t search certificates contained in re'
					; DATA XREF: _ocsp_main+15B0o
		db 'sponse for signer',0Ah,0
		align 4
aNo_signature_v	db '-no_signature_verify don',27h,'t check signature on response',0Ah,0
					; DATA XREF: _ocsp_main+15C5o
aNo_cert_verify	db '-no_cert_verify      don',27h,'t check signing certificate',0Ah,0
					; DATA XREF: _ocsp_main+15DAo
		align 4
aNo_chainDonTCh	db '-no_chain            don',27h,'t chain verify response',0Ah,0
					; DATA XREF: _ocsp_main+15EFo
		align 10h
aNo_cert_checks	db '-no_cert_checks      don',27h,'t do additional checks on signing cer'
					; DATA XREF: _ocsp_main+1604o
		db 'tificate',0Ah,0
aPortNumPortToR	db '-port num            port to run responder on',0Ah,0
					; DATA XREF: _ocsp_main+1619o
		align 4
aIndexFileCerti	db '-index file          certificate status index file',0Ah,0
					; DATA XREF: _ocsp_main+162Eo
aCaFileCaCertif	db '-CA file             CA certificate',0Ah,0 ; DATA XREF: _ocsp_main+1643o
		align 4
aRsignerFileRes	db '-rsigner file        responder certificate to sign responses with'
					; DATA XREF: _ocsp_main+1658o
		db 0Ah,0
		align 4
aRkeyFileRespon	db '-rkey file           responder key to sign responses with',0Ah,0
					; DATA XREF: _ocsp_main+166Do
		align 4
aRotherFileOthe	db '-rother file         other certificates to include in response',0Ah,0
					; DATA XREF: _ocsp_main+1682o
aResp_no_certsD	db '-resp_no_certs       don',27h,'t include any certificates in respons'
					; DATA XREF: _ocsp_main+1697o
		db 'e',0Ah,0
		align 4
aNminNNumberOfM	db '-nmin n              number of minutes before next update',0Ah,0
					; DATA XREF: _ocsp_main+16ACo
		align 4
aNdaysNNumberOf	db '-ndays n             number of days before next update',0Ah,0
					; DATA XREF: _ocsp_main+16C1o
aResp_key_idIde	db '-resp_key_id         identify reponse by signing certificate key '
					; DATA XREF: _ocsp_main+16D6o
		db 'ID',0Ah,0
		align 4
aNrequestNNumbe	db '-nrequest n          number of requests to accept (default unlimi'
					; DATA XREF: _ocsp_main+16EBo
		db 'ted)',0Ah,0
		align 4
aDgstAlgUseSpec	db '-<dgst alg>          use specified digest in the request',0Ah,0
					; DATA XREF: _ocsp_main+1700o
		align 4
aTimeoutNTimeou	db '-timeout n           timeout connection to OCSP responder after n'
					; DATA XREF: _ocsp_main+1715o
		db ' seconds',0Ah,0
aW_6		db 'w',0                ; DATA XREF: _ocsp_main+72Fo
aErrorOpening_4	db 'Error opening output file',0Ah,0 ; DATA XREF: _ocsp_main:loc_44A16Fo
aRb_7		db 'rb',0               ; DATA XREF: _ocsp_main+19C3o
					; _ocsp_main+1AC6o
		align 4
aErrorOpeningOc	db 'Error Opening OCSP request file',0Ah,0
					; DATA XREF: _ocsp_main:loc_44A5D4o
aErrorReading_7	db 'Error reading OCSP request',0Ah,0 ; DATA XREF: _ocsp_main+1B22o
aErrorSettingUp	db 'Error setting up accept BIO',0Ah,0 ; DATA XREF: _ocsp_main+1D5Ao
aResponderCerti	db 'responder certificate',0 ; DATA XREF: _ocsp_main:loc_448C7Eo
aErrorLoading_6	db 'Error loading responder certificate',0Ah,0
					; DATA XREF: _ocsp_main:loc_44A07Fo
aCaCertificat_2	db 'CA certificate',0   ; DATA XREF: _ocsp_main+7BFo
aResponderOther	db 'responder other certificates',0 ; DATA XREF: _ocsp_main+804o
aResponderPriva	db 'responder private key',0 ; DATA XREF: _ocsp_main:loc_448D44o
		align 4
aWaitingForOcsp	db 'Waiting for OCSP client connections...',0Ah,0
					; DATA XREF: _ocsp_main+895o
aNeedAnOcspRequ	db 'Need an OCSP request for this operation!',0Ah,0
					; DATA XREF: _ocsp_main:loc_4494BBo
aSignerCertif_1	db 'signer certificate',0 ; DATA XREF: _ocsp_main:loc_448E43o
		align 4
aErrorLoadingSi	db 'Error loading signer certificate',0Ah,0
					; DATA XREF: _ocsp_main:loc_44A1D1o
aSignerCertif_2	db 'signer certificates',0 ; DATA XREF: _ocsp_main+98Fo
aSignerPrivateK	db 'signer private key',0 ; DATA XREF: _ocsp_main:loc_448ECCo
aErrorSigningOc	db 'Error signing OCSP request',0Ah,0 ; DATA XREF: _ocsp_main:loc_44A1B0o
aWb_9		db 'wb',0               ; DATA XREF: _ocsp_main+A8Fo
					; _ocsp_main+EAAo
aErrorOpeningFi	db 'Error opening file %s',0Ah,0 ; DATA XREF: _ocsp_main+1C87o
		align 4
aNeedAResponder	db 'Need a responder certificate, key and CA for this operation!',0Ah,0
					; DATA XREF: _ocsp_main:loc_44A065o
aBn		db 'bn',0               ; DATA XREF: _ocsp_main+12A4o
aOcsp_c		db 'ocsp.c',0           ; DATA XREF: _ocsp_main+12B4o
a00_0		db '00',0               ; DATA XREF: _ocsp_main+1054o
		align 10h
aErrorOpening_5	db 'Error Opening OCSP response file',0Ah,0
					; DATA XREF: _ocsp_main:loc_44A729o
aErrorReadingOc	db 'Error reading OCSP response',0Ah,0 ; DATA XREF: _ocsp_main+1A0Fo
aResponderError	db 'Responder Error: %s (%d)',0Ah,0 ; DATA XREF: _ocsp_main+11D0o
aValidatorCerti	db 'validator certificate',0 ; DATA XREF: _ocsp_main+1DE1o
aErrorParsingRe	db 'Error parsing response',0Ah,0 ; DATA XREF: _ocsp_main:loc_44A7CFo
		align 4
aWarningNoNonce	db 'WARNING: no nonce in response',0Ah,0 ; DATA XREF: _ocsp_main:loc_44A7EEo
aNonceVerifyErr	db 'Nonce Verify error',0Ah,0 ; DATA XREF: _ocsp_main+2259o
aResponseVeri_0	db 'Response Verify Failure',0Ah,0 ; DATA XREF: _ocsp_main:loc_44A6E1o
aResponseVerify	db 'Response verify OK',0Ah,0 ; DATA XREF: _ocsp_main+1E87o
aS_17		db '%s: ',0             ; DATA XREF: _ocsp_main+1F14o
aErrorNoStatusF	db 'ERROR: No Status found.',0Ah,0 ; DATA XREF: _ocsp_main+1F6Fo
		align 4
aWarningStatusT	db 'WARNING: Status times invalid.',0Ah,0
					; DATA XREF: _ocsp_main:loc_44A6B0o
aS_23		db '%s',0Ah,0           ; DATA XREF: _ocsp_main+1FE4o
aThisUpdate	db 9,'This Update: ',0  ; DATA XREF: _ocsp_main+1FF4o
asc_4701DB	db 0Ah,0		; DATA XREF: _ocsp_main+2017o
					; _ocsp_main+2055o ...
aNextUpdate	db 9,'Next Update: ',0  ; DATA XREF: _ocsp_main+2032o
aReasonS	db 9,'Reason: %s',0Ah,0 ; DATA XREF: _ocsp_main+208Bo
aRevocationTime	db 9,'Revocation Time: ',0 ; DATA XREF: _ocsp_main:loc_44A59Bo
aHttp1_0200Ok_1	db 'HTTP/1.0 200 OK',0Dh,0Ah ; DATA XREF: _ocsp_main+E29o
					; _ocsp_main+1A7Do
		db 'Content-type: application/ocsp-response',0Dh,0Ah
		db 'Content-Length: %d',0Dh,0Ah
		db 0Dh,0Ah,0
		align 10h
byte_470260	db 0			; DATA XREF: _prime_main+19Do
aNot_1		db 'not ',0             ; DATA XREF: _prime_main:loc_44B3ACo
aHex_1		db '-hex',0             ; DATA XREF: _prime_main+C7o
					; _prime_main+31Eo
aGenerate	db '-generate',0        ; DATA XREF: _prime_main:loc_44B150o
aBits		db '-bits',0            ; DATA XREF: _prime_main+84o
aSafe		db '-safe',0            ; DATA XREF: _prime_main:loc_44B2D0o
aChecks		db '-checks',0          ; DATA XREF: _prime_main+200o
aUnknownOpti_18	db 'Unknown option ',27h,'%s',27h,0Ah,0 ; DATA XREF: _prime_main+3FEo
aNoPrimeSpecifi	db 'No prime specified',0Ah,0 ; DATA XREF: _prime_main:loc_44B3D4o
aSpecifiyTheNum	db 'Specifiy the number of bits.',0Ah,0 ; DATA XREF: _prime_main:loc_44B445o
aS_24		db '%s',0Ah,0           ; DATA XREF: _prime_main+2AFo
aIsSprime	db ' is %sprime',0Ah,0  ; DATA XREF: _prime_main+1A6o
aOptionsAre_1	db 'options are',0Ah,0  ; DATA XREF: _prime_main:loc_44B3E9o
a14sHex		db '%-14s hex',0Ah,0    ; DATA XREF: _prime_main+326o
aChecksN	db '-checks <n>',0      ; DATA XREF: _prime_main+33Bo
a14sNumberOfChe	db '%-14s number of checks',0Ah,0 ; DATA XREF: _prime_main+343o
		align 10h
aTs_c		db 'ts.c',0             ; DATA XREF: _create_digest+40o
					; _ts_main+1489o
		align 4
aBadDigestDByte	db 'bad digest, %d bytes must be specified',0Ah,0
					; DATA XREF: _create_digest+12Co
; char aOpenssl_conf_0[]
aOpenssl_conf_0	db 'OPENSSL_CONF',0     ; DATA XREF: _load_config_file:loc_44B7D0o
; char aSsleay_conf_0[]
aSsleay_conf_0	db 'SSLEAY_CONF',0      ; DATA XREF: _load_config_file+186o
aUsingConfigu_1	db 'Using configuration from %s',0Ah,0 ; DATA XREF: _load_config_file+4Do
aOid_file_1	db 'oid_file',0         ; DATA XREF: _load_config_file+62o
		align 10h
aErrorLoading_7	db 'error loading the config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _load_config_file+124o
aErrorOnLineL_6	db 'error on line %ld of config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _load_config_file+100o
aR_5		db 'r',0                ; DATA XREF: _load_config_file+82o
					; _next_serial+1Ao
		align 10h
aWarningCouldNo	db 'Warning: could not open file %s for reading, using serial number:'
					; DATA XREF: _next_serial+119o
		db ' 1',0Ah,0
		align 4
aUnableToLoad_5	db 'unable to load number from %s',0Ah,0 ; DATA XREF: _next_serial+58o
		align 4
aErrorDuringSer	db 'Error during serial number generation.',0
					; DATA XREF: _serial_cb:loc_44B9F0o
aW_7		db 'w',0                ; DATA XREF: _serial_cb+17o
asc_470471	db 0Ah,0		; DATA XREF: _serial_cb+3Do
		align 4
aCouldNotSaveSe	db 'could not save serial number to %s',0Ah,0 ; DATA XREF: _serial_cb+64o
aConfig_1	db '-config',0          ; DATA XREF: _ts_main+147o
aSection	db '-section',0         ; DATA XREF: _ts_main+155o
aQuery		db '-query',0           ; DATA XREF: _ts_main:loc_44BE80o
aData		db '-data',0            ; DATA XREF: _ts_main:loc_44BEB0o
aDigest		db '-digest',0          ; DATA XREF: _ts_main:loc_44BED0o
aRand_14	db '-rand',0            ; DATA XREF: _ts_main:loc_44BEF0o
aPolicy_2	db '-policy',0          ; DATA XREF: _ts_main+4D0o
aNo_nonce_0	db '-no_nonce',0        ; DATA XREF: _ts_main:loc_44BFBFo
aCert_5		db '-cert',0            ; DATA XREF: _ts_main+5A3o
aIn_25		db '-in',0              ; DATA XREF: _ts_main+5B7o
aToken_in	db '-token_in',0        ; DATA XREF: _ts_main:loc_44C58Ao
aOut_32		db '-out',0             ; DATA XREF: _ts_main+B6Eo
aToken_out	db '-token_out',0       ; DATA XREF: _ts_main:loc_44C761o
aText_17	db '-text',0            ; DATA XREF: _ts_main+D45o
aReply		db '-reply',0           ; DATA XREF: _ts_main+D59o
aQueryfile	db '-queryfile',0       ; DATA XREF: _ts_main:loc_44CBCCo
aPassin_14	db '-passin',0          ; DATA XREF: _ts_main:loc_44CD86o
aInkey_4	db '-inkey',0           ; DATA XREF: _ts_main:loc_44CDD9o
aSigner_2	db '-signer',0          ; DATA XREF: _ts_main:loc_44CFBAo
aChain_1	db '-chain',0           ; DATA XREF: _ts_main:loc_44CFFEo
aVerify_12	db '-verify',0          ; DATA XREF: _ts_main:loc_44D01Eo
aCapath_8	db '-CApath',0          ; DATA XREF: _ts_main:loc_44D049o
aCafile_8	db '-CAfile',0          ; DATA XREF: _ts_main:loc_44D069o
aUntrusted_0	db '-untrusted',0       ; DATA XREF: _ts_main:loc_44D089o
aEngine_30	db '-engine',0          ; DATA XREF: _ts_main:loc_44D0A9o
		align 4
aWarningNotMu_5	db 'warning, not much extra random data, consider using the -rand opt'
					; DATA XREF: _ts_main:loc_44C8CCo
		db 'ion',0Ah,0
aLdSemiRando_11	db '%ld semi-random bytes loaded',0Ah,0 ; DATA XREF: _ts_main+A50o
aErrorGettin_22	db 'Error getting password.',0Ah,0 ; DATA XREF: _ts_main:loc_44C255o
aRb_1		db 'rb',0               ; DATA XREF: _ts_main+1D7o
					; _ts_main+24Co ...
aSha1_1		db 'sha1',0             ; DATA XREF: _ts_main:loc_44C957o
aCannotConvertS	db 'cannot convert %s to OID',0Ah,0 ; DATA XREF: _ts_main+15B2o
aCouldNotCrea_0	db 'could not create nonce',0Ah,0 ; DATA XREF: _ts_main:loc_44CF53o
aWb_10		db 'wb',0               ; DATA XREF: _ts_main+70Bo
					; _ts_main+98Fo
aInvalidDigestS	db 'invalid digest string',0Ah,0 ; DATA XREF: _ts_main:loc_44CC07o
aMemoryAlloca_4	db 'memory allocation failure',0Ah,0 ; DATA XREF: _ts_main:loc_44CC85o
aErrorLoading_8	db 'Error loading directory %s',0Ah,0 ; DATA XREF: _ts_main+BB7o
aErrorLoading_9	db 'Error loading file %s',0Ah,0 ; DATA XREF: _ts_main+129Bo
; char aVerification[]
aVerification	db 'Verification: ',0   ; DATA XREF: _ts_main:loc_44BDB3o
					; _ts_main:loc_44C623o
; char aOk_1[]
aOk_1		db 'OK',0               ; DATA XREF: _ts_main+397o
; char aFailed_0[]
aFailed_0	db 'FAILED',0           ; DATA XREF: _ts_main:loc_44C631o
aUsageTsQueryRa	db 'usage:',0Ah         ; DATA XREF: _ts_main+546o
		db 'ts -query [-rand file%cfile%c...] [-config configfile] [-data fil'
		db 'e_to_hash] [-digest digest_bytes][-md2|-md4|-md5|-sha|-sha1|-mdc2'
		db '|-ripemd160] [-policy object_id] [-no_nonce] [-cert] [-in request'
		db '.tsq] [-out request.tsq] [-text]',0Ah,0
aOrTsReplyConfi	db 'or',0Ah             ; DATA XREF: _ts_main+55Bo
		db 'ts -reply [-config configfile] [-section tsa_section] [-queryfile'
		db ' request.tsq] [-passin password] [-signer tsa_cert.pem] [-inkey p'
		db 'rivate_key.pem] [-chain certs_file.pem] [-policy object_id] [-in '
		db 'response.tsr] [-token_in] [-out response.tsr] [-token_out] [-text'
		db '] [-engine id]',0Ah,0
		align 4
aOrTsVerifyData	db 'or',0Ah             ; DATA XREF: _ts_main+570o
		db 'ts -verify [-data file_to_hash] [-digest digest_bytes] [-queryfil'
		db 'e request.tsq] -in response.tsr [-token_in] -CApath ca_path -CAfi'
		db 'le ca_file.pem -untrusted cert_file.pem',0Ah,0
aCouldNotCreate	db 'could not create query',0Ah,0 ; DATA XREF: _ts_main+AFBo
aResponseIsNotG	db 'Response is not generated.',0Ah,0 ; DATA XREF: _ts_main+8F6o
aResponseHasBee	db 'Response has been generated.',0Ah,0 ; DATA XREF: _ts_main+10FAo
aValidatingUser	db 'Validating',0Ah     ; DATA XREF: _srp_verify_user+116o
		db '   user="%s"',0Ah
		db ' srp_verifier="%s"',0Ah
		db ' srp_usersalt="%s"',0Ah
		db ' g="%s"',0Ah
		db ' N="%s"',0Ah,0
aPassS		db 'Pass %s',0Ah,0      ; DATA XREF: _srp_verify_user+6Fo
aInternalErrorV	db 'Internal error validating SRP verifier',0Ah,0
					; DATA XREF: _srp_verify_user:loc_44D220o
aCreatingUserSG	db 'Creating',0Ah       ; DATA XREF: _srp_create_user+10Ao
		db ' user="%s"',0Ah
		db ' g="%s"',0Ah
		db ' N="%s"',0Ah,0
		align 10h
aInternalErrorC	db 'Internal error creating SRP verifier',0Ah,0
					; DATA XREF: _srp_create_user:loc_44D380o
		align 4
aGnidSSaltSVeri	db 'gNid=%s salt ="%s"',0Ah ; DATA XREF: _srp_create_user+BDo
		db ' verifier ="%s"',0Ah,0
aUserEntry	db 'User entry',0       ; DATA XREF: _print_user_part_4+14Bo
aSS_7		db '%s "%s"',0Ah,0      ; DATA XREF: _print_user_part_4+D2o
					; _print_user_part_4+153o ...
aDS		db '  %d = "%s"',0Ah,0  ; DATA XREF: _print_user_part_4+FBo
					; _print_user_part_4+17Co ...
aGNEntry	db 'g N entry',0        ; DATA XREF: _print_user_part_4+CAo
					; _srp_main+708o
aVerbose_2	db '-verbose',0         ; DATA XREF: _srp_main+E0o
aConfig_2	db '-config',0          ; DATA XREF: _srp_main+EEo
aName_2		db '-name',0            ; DATA XREF: _srp_main:loc_44D800o
aSrpvfile_0	db '-srpvfile',0        ; DATA XREF: _srp_main:loc_44D830o
aAdd		db '-add',0             ; DATA XREF: _srp_main:loc_44D860o
aDelete		db '-delete',0          ; DATA XREF: _srp_main+320o
aModify		db '-modify',0          ; DATA XREF: _srp_main+330o
aList_0		db '-list',0            ; DATA XREF: _srp_main:loc_44D9D6o
aGn		db '-gn',0              ; DATA XREF: _srp_main+49Ao
aUserinfo	db '-userinfo',0        ; DATA XREF: _srp_main:loc_44DBD7o
aPassin_15	db '-passin',0          ; DATA XREF: _srp_main+69Bo
aPassout_8	db '-passout',0         ; DATA XREF: _srp_main:loc_44E851o
aEngine_31	db '-engine',0          ; DATA XREF: _srp_main:loc_44E8BBo
aUnknownOpti_19	db 'unknown option %s',0Ah,0 ; DATA XREF: _srp_main+5B8o
		align 10h
aDbfileAndConfi	db '-dbfile and -configfile cannot be specified together.',0Ah,0
					; DATA XREF: _srp_main+148o
		align 4
aExactlyOneOfTh	db 'Exactly one of the options -add, -delete, -modify -list must be s'
					; DATA XREF: _srp_main:loc_44D6B5o
		db 'pecified.',0Ah,0
aNeedAtLeastOne	db 'Need at least one user for options -add, -delete, -modify. ',0Ah,0
					; DATA XREF: _srp_main+60Ao
		align 4
aPassinPassoutA	db '-passin, -passout arguments only valid with one user.',0Ah,0
					; DATA XREF: _srp_main+19Bo
aRandFileCfi_10	db ' -rand file%cfile%c...',0Ah,0 ; DATA XREF: _srp_main+1F2o
		align 4
aLoadTheFileO_7	db '                 load the file (or the files in the directory) in'
					; DATA XREF: _srp_main+207o
		db 'to',0Ah,0
		align 4
aTheRandomNum_7	db '                 the random number generator',0Ah,0
					; DATA XREF: _srp_main+21Co
aS_25		db '%s',0               ; DATA XREF: _srp_main+1C4o
aErrorGettin_23	db 'Error getting passwords',0Ah,0 ; DATA XREF: _srp_main:loc_44DB86o
; char aOpenssl_conf_1[]
aOpenssl_conf_1	db 'OPENSSL_CONF',0     ; DATA XREF: _srp_main:loc_44EA14o
; char aSsleay_conf_1[]
aSsleay_conf_1	db 'SSLEAY_CONF',0      ; DATA XREF: _srp_main+14DCo
aSrp_c		db 'srp.c',0            ; DATA XREF: _srp_main+DF6o
					; _srp_main+1512o
aOutOfMemory_11	db 'Out of memory',0Ah,0 ; DATA XREF: _srp_main:loc_44EAF3o
asc_470D04	db '/',0                ; DATA XREF: _srp_main+1542o
aOpenssl_cnf_1	db 'openssl.cnf',0      ; DATA XREF: _srp_main+1556o
aUsingConfigu_2	db 'Using configuration from %s',0Ah,0 ; DATA XREF: _srp_main+780o
		align 10h
aErrorLoadin_10	db 'error loading the config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _srp_main+1673o
aErrorOnLineL_7	db 'error on line %ld of config file ',27h,'%s',27h,0Ah,0
					; DATA XREF: _srp_main+1343o
		align 4
aTryingToReadDe	db 'trying to read default_srp in " BASE_SECTION "',0Ah,0
					; DATA XREF: _srp_main+15F6o
aDefault_srp	db 'default_srp',0      ; DATA XREF: _srp_main:loc_44EB5Bo
					; _srp_main+1635o
aSrp_0		db 'srp',0              ; DATA XREF: _srp_main+81Fo
					; _srp_main+1613o ...
aVariableLook_0	db 'variable lookup failed for %s::%s',0Ah,0 ; DATA XREF: _srp_main+1585o
					; _srp_main+1645o
aRandfile_1	db 'RANDFILE',0         ; DATA XREF: _srp_main+817o
aTryingToReadSr	db 'trying to read srpvfile in section "%s"',0Ah,0
					; DATA XREF: _srp_main+844o
aSrpvfile_1	db 'srpvfile',0         ; DATA XREF: _srp_main:loc_44DDAEo
					; _srp_main:loc_44EAC4o
		align 4
aTryingToRead_0	db 'Trying to read SRP verifier file "%s"',0Ah,0
					; DATA XREF: _srp_main+1128o
aDatabaseInitia	db 'Database initialised',0Ah,0 ; DATA XREF: _srp_main:loc_44E6A1o
aDefaultGAndN	db 'Default g and N',0  ; DATA XREF: _srp_main+92Bo
		align 4
aNoGAndNValueFo	db 'No g and N value for index "%s"',0Ah,0 ; DATA XREF: _srp_main+14A8o
		align 10h
aDatabaseHasNoG	db 'Database has no g N information.',0Ah,0
					; DATA XREF: _srp_main:loc_44E796o
aStartingUserPr	db 'Starting user processing',0Ah,0 ; DATA XREF: _srp_main:loc_44DEC9o
aProcessingUser	db 'Processing user "%s"',0Ah,0 ; DATA XREF: _srp_main+9D3o
aListAllUsers	db 'List all users',0Ah,0 ; DATA XREF: _srp_main:loc_44E3E8o
		align 4
aUserSDoesNotEx	db 'user "%s" does not exist, ignored. t',0Ah,0 ; DATA XREF: _srp_main+EF4o
aUserSReactivat	db 'user "%s" reactivated.',0Ah,0 ; DATA XREF: _srp_main+AE2o
		align 4
aCannotCreateSr	db 'Cannot create srp verifier for user "%s", operation abandoned .',0Ah
					; DATA XREF: _srp_main+1399o
		db 0
aV_2		db 'v',0                ; DATA XREF: _srp_main+D74o
aMemoryAlloca_5	db 'Memory allocation failure',0Ah,0 ; DATA XREF: _srp_main:loc_44E837o
aFailedToUpda_0	db 'failed to update srpvfile',0Ah,0 ; DATA XREF: _srp_main:loc_44DA14o
aTxt_dbErrorN_0	db 'TXT_DB error number %ld',0Ah,0 ; DATA XREF: _srp_main+4DEo
		align 4
aUserSDoesNot_0	db 'user "%s" does not exist, operation ignored.',0Ah,0
					; DATA XREF: _srp_main+F16o
		align 4
aUserSAlreadyUp	db 'user "%s" already updated, operation ignored.',0Ah,0
					; DATA XREF: _srp_main+1113o
		align 4
aVerifyingPassw	db 'Verifying password for user "%s"',0Ah,0 ; DATA XREF: _srp_main+122Co
		align 4
aInvalidPassw_0	db 'Invalid password for user "%s", operation abandoned.',0Ah,0
					; DATA XREF: _srp_main+106Fo
aPasswordForUse	db 'Password for user "%s" ok.',0Ah,0 ; DATA XREF: _srp_main+F66o
		align 10h
aCannotCreate_0	db 'Cannot create srp verifier for user "%s", operation abandoned.',0Ah,0
					; DATA XREF: _srp_main+1482o
aUserSDoesNot_1	db 'user "%s" does not exist, operation ignored. t',0Ah,0
					; DATA XREF: _srp_main+1102o
aUserSRevoked_T	db 'user "%s" revoked. t',0Ah,0 ; DATA XREF: _srp_main+CD3o
aUserProcession	db 'User procession done.',0Ah,0 ; DATA XREF: _srp_main:loc_44E950o
aTemporarySrpvf	db 'Temporary srpvfile created.',0Ah,0 ; DATA XREF: _srp_main+11C1o
; char aOld[]
aOld		db 'old',0              ; DATA XREF: _srp_main+11D6o
					; _srp_main+13D7o
; char aNew_3[]
aNew_3		db 'new',0              ; DATA XREF: _srp_main+11A5o
					; _srp_main+11DEo ...
aSrpvfileUpdate	db 'srpvfile updated.',0Ah,0 ; DATA XREF: _srp_main+11FAo
aUserErrorsD_	db 'User errors %d.',0Ah,0 ; DATA XREF: _srp_main+577o
		align 4
aSrpTerminating	db 'SRP terminating with code %d.',0Ah,0 ; DATA XREF: _srp_main+596o
aTryingToUpdate	db 'Trying to update srpvfile.',0Ah,0 ; DATA XREF: _srp_main:loc_44E6DCo
aUsageSrpArgsUs	db 'usage: srp [args] [user] ',0Ah,0 ; DATA XREF: .data:_srp_usageo
asc_4711DE	db 0Ah,0		; DATA XREF: .data:004573E4o
aVerboseTalkA_0	db ' -verbose        Talk alot while doing things',0Ah,0
					; DATA XREF: .data:004573E8o
		align 10h
aConfigFileAC_0	db ' -config file    A config file',0Ah,0 ; DATA XREF: .data:004573ECo
aNameArgThePa_0	db ' -name arg       The particular srp definition to use',0Ah,0
					; DATA XREF: .data:004573F0o
		align 4
aSrpvfileArgThe	db ' -srpvfile arg   The srp verifier file name',0Ah,0
					; DATA XREF: .data:004573F4o
		align 4
aAddAddAnUserAn	db ' -add            add an user and srp verifier',0Ah,0
					; DATA XREF: .data:004573F8o
		align 4
aModifyModifyTh	db ' -modify         modify the srp verifier of an existing user',0Ah,0
					; DATA XREF: .data:004573FCo
		align 4
aDeleteDeleteUs	db ' -delete         delete user from verifier file',0Ah,0
					; DATA XREF: .data:00457400o
aListListUser	db ' -list           list user',0Ah,0 ; DATA XREF: .data:00457404o
		align 4
aGnArgGAndNValu	db ' -gn arg         g and N values to be used for new verifier',0Ah,0
					; DATA XREF: .data:00457408o
		align 4
aUserinfoArgAdd	db ' -userinfo arg   additional info to be set for user',0Ah,0
					; DATA XREF: .data:0045740Co
		align 10h
aPassinArgInp_7	db ' -passin arg     input file pass phrase source',0Ah,0
					; DATA XREF: .data:00457410o
aPassoutArgOu_5	db ' -passout arg    output file pass phrase source',0Ah,0
					; DATA XREF: .data:00457414o
		align 4
aEngineEUseE_26	db ' -engine e         - use engine e, possibly a hardware device.',0Ah,0
					; DATA XREF: .data:00457418o
		public ___dyn_tls_init_callback
; const	PIMAGE_TLS_CALLBACK __dyn_tls_init_callback
___dyn_tls_init_callback dd offset ___dyn_tls_init@12
					; DATA XREF: ___tmainCRTStartup:loc_401261r
aUnknownError	db 'Unknown error',0    ; DATA XREF: __matherr+Co
		align 4
; char a_matherrSInSGG[]
a_matherrSInSGG	db '_matherr(): %s in %s(%g, %g)  (retval=%g)',0Ah,0
					; DATA XREF: __matherr+44o
		align 4
aArgumentDomain	db 'Argument domain error (DOMAIN)',0 ; DATA XREF: .rdata:_CSWTCH_5o
aArgumentSingul	db 'Argument singularity (SIGN)',0 ; DATA XREF: .rdata:00471598o
		align 10h
aOverflowRangeE	db 'Overflow range error (OVERFLOW)',0 ; DATA XREF: .rdata:0047159Co
aTheResultIsToo	db 'The result is too small to be represented (UNDERFLOW)',0
					; DATA XREF: .rdata:004715A0o
		align 4
aTotalLossOfSig	db 'Total loss of significance (TLOSS)',0 ; DATA XREF: .rdata:004715A4o
		align 4
aPartialLossOfS	db 'Partial loss of significance (PLOSS)',0 ; DATA XREF: .rdata:004715A8o
		align 4
_CSWTCH_5	dd offset aArgumentDomain ; DATA XREF: __matherr+16r
					; "Argument domain error (DOMAIN)"
		dd offset aArgumentSingul ; "Argument singularity (SIGN)"
		dd offset aOverflowRangeE ; "Overflow range error (OVERFLOW)"
		dd offset aTheResultIsToo ; "The result	is too small to	be represent"...
		dd offset aTotalLossOfSig ; "Total loss	of significance	(TLOSS)"
		dd offset aPartialLossOfS ; "Partial loss of significance (PLOSS)"
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: ___report_error+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: ___report_error+27Bo
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: ___report_error+267o
					; ___report_error+293o	...
		align 4
; char msg[]
msg		db '  VirtualProtect failed with code 0x%x',0
					; DATA XREF: ___report_error+239o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: __pei386_runtime_relocator+2C4o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: __pei386_runtime_relocator+EEo
		align 4
; const	EXCEPTION_POINTERS GS_ExceptionPointers
_GS_ExceptionPointers EXCEPTION_POINTERS <offset _GS_ExceptionRecord, \
					; DATA XREF: ___report_gsfailure+58o
				    offset _GS_ContextRecord>
; wchar_t aUnknown
aUnknown:				; DATA XREF: __wassert+2Co
					; __wassert+EBo ...
		dw 3Ch
		unicode	0, <unknown>
		dw 3Eh,	0
a?:					; DATA XREF: __wassert+40o
					; __wassert:loc_451FC3o
		unicode	0, <?>,0
; wchar_t aAssertionFaile
aAssertionFaile:			; DATA XREF: __wassert+8Do
		unicode	0, <Assertion failed!>
		dw 2 dup(0Ah)
		unicode	0, <Program: %ws>
		dw 0Ah
		unicode	0, <File: %ws, Line %u>
		dw 2 dup(0Ah)
		unicode	0, <Expression:	%ws>,0
; wchar_t aWs
aWs:					; DATA XREF: __wassert+140o
		unicode	0, <%ws>
		dw 0Ah,	0
		align 4
; const	WCHAR Caption
Caption:				; DATA XREF: __wassert+BAo
		unicode	0, <MinGW Runtime Assertion>,0
_rdata		dd 5BD84BF8h, 3A434347h, 4E472820h, 34202955h, 322E382Eh
		dd 0
aGccGnu4_8_2	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_0	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_1	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_2	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_3	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_4	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_5	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_6	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_7	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_8	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_9	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_10	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_11	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_12	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_13	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_14	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_15	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_16	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_17	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_18	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_19	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_20	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_21	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_22	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_23	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_24	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_25	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_26	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_27	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_28	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_29	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_30	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_31	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_32	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_33	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_34	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_35	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_36	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_37	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_38	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_39	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_40	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_41	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_42	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_43	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_44	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_45	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_46	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_47	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_48	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_49	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_50	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_51	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_52	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_53	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_54	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_55	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_56	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_57	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_58	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_59	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_60	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_61	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_62	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_63	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_64	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_65	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_66	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_67	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_68	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_69	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_70	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_71	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_72	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_73	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_74	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_75	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_76	db 'GCC: (GNU) 4.8.2',0
		align 4
		public __rt_psrelocs_start
__rt_psrelocs_start dd 0		; DATA XREF: __pei386_runtime_relocator+57o
					; __pei386_runtime_relocator+6Er ...
dword_471DBC	dd 0			; DATA XREF: __pei386_runtime_relocator+7Br
dword_471DC0	dd 1			; DATA XREF: __pei386_runtime_relocator+88r
dword_471DC4	dd 5749Ch, 12A8h, 20h	; DATA XREF: __pei386_runtime_relocator+8Eo
		public __RUNTIME_PSEUDO_RELOC_LIST_END___0
__RUNTIME_PSEUDO_RELOC_LIST_END___0 dd 0Ch dup(0)
					; DATA XREF: __pei386_runtime_relocator+52o
					; __pei386_runtime_relocator+AFo ...
		align 400h
_rdata		ends

; Section 4. (virtual address 00072000)
; Virtual size			: 000047E4 (  18404.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 472000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
		public __bss_start__
; _startupinfo _bss_start__
__bss_start__	_startupinfo <?>	; DATA XREF: _pre_cpp_init+8o
					; _pre_cpp_init+20w
; int has_cctor
_has_cctor	dd ?			; DATA XREF: ___tmainCRTStartup+C1w
					; ___tmainCRTStartup+273r
; int managedapp
_managedapp	dd ?			; DATA XREF: _pre_c_init:loc_401048w
					; ___tmainCRTStartup+260r
; int mainret
_mainret	dd ?			; DATA XREF: ___tmainCRTStartup+268w
					; ___tmainCRTStartup+282r
; int argret
_argret		dd ?			; DATA XREF: _pre_cpp_init+3Aw
; char **envp
_envp		dd ?			; DATA XREF: _pre_cpp_init+10o
					; ___tmainCRTStartup+232r ...
; char **argv
_argv		dd ?			; DATA XREF: _pre_cpp_init+18o
					; ___tmainCRTStartup+1C6r ...
; int argc
_argc		dd ?			; DATA XREF: _pre_cpp_init+2Ao
					; ___tmainCRTStartup:loc_401328r ...
		public _bio_err
; int bio_err
_bio_err	dd ?			; DATA XREF: _do_cmd+186r _do_cmd+242r ...
		public _config
_config		dd ?			; DATA XREF: _req_main+F56r
					; _req_main:loc_404B31r ...
		public _default_config_file
_default_config_file dd	?		; DATA XREF: _req_main+133Fr
					; _req_main:loc_404DE9r ...
		align 20h
_modes_38028	dd ?			; DATA XREF: _lock_dbg_cb+69r
					; _lock_dbg_cb+74w ...
		dd 28h dup(?)
_prompt_38040	dd ?			; DATA XREF: _main:loc_452775w
		align 20h
; char buf_38041[1024]
_buf_38041	db 400h	dup(?)		; DATA XREF: _main+425o
					; _main:loc_452755o
_v_verbose	dd ?			; DATA XREF: _cb:loc_401F1Fr
					; _verify_main+695w
		align 20h
; char buf_36784
_buf_36784	db ?			; DATA XREF: _req_main+1FA8o
					; _req_main+1FC4o ...
byte_472521	db ?			; DATA XREF: _req_main:loc_4058B1r
					; _req_main+20CEw
		align 4
		dd 0FFh	dup(?)
; char buf_36770
_buf_36770	db ?			; DATA XREF: _req_main+1A21o
					; _req_main+1A3Do ...
byte_472921	db ?			; DATA XREF: _req_main:loc_405459r
					; _req_main+1C76w
		align 4
		dd 0FFh	dup(?)
_batch		dd ?			; DATA XREF: _req_main+16E1r
					; _req_main+19DBr ...
_req_conf	dd ?			; DATA XREF: _req_main+69w
					; _req_main+2D7w ...
		align 20h
_n_36594	dd ?			; DATA XREF: _show_ciphers+44r
					; _show_ciphers+4Aw ...
		align 20h
; char buf_36646
_buf_36646	db ?			; DATA XREF: _enc_main:loc_40A38Dw
					; _enc_main+49Br ...
		align 4
		dd 1Fh dup(?)
; char out_buf_36381
_out_buf_36381	db ?			; DATA XREF: _do_passwd+1E9w
					; _do_passwd+203o ...
byte_472DE1	db ?			; DATA XREF: _do_passwd+1F0w
word_472DE2	dw ?			; DATA XREF: _do_passwd+29Do
		dd 0Ah dup(?)
_passwds_static_36365 dd ?		; DATA XREF: _passwd_main+96Dw
					; _passwd_main+973o
		align 20h
; char buf_36752
_buf_36752	db ?			; DATA XREF: _ca_main+2802w
					; _ca_main+281Ao ...
		align 4
		dd 7Fh dup(?)
; char byte_473020
byte_473020	db ?			; DATA XREF: _ca_main+2B0Do
					; _ca_main+2B57o ...
		align 4
		dd 3Fh dup(?)
_msie_hack	dd ?			; DATA XREF: _ca_main+96w
					; _ca_main+2BA4o ...
_preserve	dd ?			; DATA XREF: _ca_main+8Cw
					; _ca_main:loc_4120C7w	...
_section	dd ?			; DATA XREF: _ca_main+82w
					; _ca_main+4CAw ...
_extconf	dd ?			; DATA XREF: _ca_main+482r
					; _ca_main+1B98w ...
_conf		dd ?			; DATA XREF: _ca_main+78w
					; _ca_main+2DAw ...
		align 10h
_bio_out	dd ?			; DATA XREF: _crl_main+41r
					; _crl_main+2BEr ...
_reqfile	dd ?			; DATA XREF: _x509_main+2Bw
					; _x509_main+4D0w ...
		align 20h
		public _psk_key
_psk_key	dd ?			; DATA XREF: _psk_server_cb:loc_420AE8r
					; _psk_server_cb:loc_420B60r ...
		public _s_crlf
_s_crlf		dd ?			; DATA XREF: _sv_body+6E1r
					; _s_server_main+25B9w
_rsa_tmp_38368	dd ?			; DATA XREF: _tmp_rsa_cbr
					; _tmp_rsa_cb+Ar ...
		align 20h
_buf_38278	dd 80h dup(?)		; DATA XREF: _sv_body+235o
					; _sv_body+245o ...
_psk_identity_hint_38181 dd ?		; DATA XREF: _s_server_main:loc_4228C8r
					; _s_server_main+26D2w
_srtp_profiles	dd ?			; DATA XREF: _s_server_main:loc_4220F1r
					; _s_server_main+2D84w
_srp_callback_parm dd ?			; DATA XREF: _sv_body+158r
					; _sv_body+183r ...
dword_47338C	dd ?			; DATA XREF: _sv_body+18Cr
					; _sv_body+5F6r ...
dword_473390	dd ?			; DATA XREF: _sv_body+176r
					; _sv_body+199w ...
_local_argv	dd ?			; DATA XREF: _www_body:loc_420010r
					; _s_server_main+7Dw
_local_argc	dd ?			; DATA XREF: _www_body+3D6r
					; _www_body+420r ...
_cert_chain	dd ?			; DATA XREF: _s_server_main+2B68w
_socket_mtu	dd ?			; DATA XREF: _sv_body:loc_41F6E4r
					; _sv_body+C71r ...
_enable_timeouts dd ?			; DATA XREF: _sv_body+C37r
					; _s_server_main+2A4Ew
; char *session_id_prefix
_session_id_prefix dd ?			; DATA XREF: _generate_session_id+85r
					; _s_server_main+F24r ...
_engine_id	dd ?			; DATA XREF: _s_server_main+140w
					; _s_server_main+CF6r ...
_hack		dd ?			; DATA XREF: _www_body:loc_41FE00r
					; _www_body+230r ...
; char *keymatexportlabel
_keymatexportlabel dd ?			; DATA XREF: _sv_body+427r
					; _sv_body+44Ar ...
_s_quiet	dd ?			; DATA XREF: _sv_body:loc_41F21Er
					; _sv_body+8EAr ...
_s_msg		dd ?			; DATA XREF: _sv_body:loc_41EB8Ar
					; _www_body:loc_41FDE9r ...
_s_tlsextstatus	dd ?			; DATA XREF: _sv_body:loc_41EAFFr
					; _s_server_main+23F1w	...
_s_tlsextdebug	dd ?			; DATA XREF: _sv_body+52r
					; _sv_body:loc_41EB98r	...
_s_debug	dd ?			; DATA XREF: _sv_body+DDr
					; _www_body+1BBr ...
_bio_s_out	dd ?			; DATA XREF: _sv_body+169r
					; _sv_body+1B5r ...
_www		dd ?			; DATA XREF: _www_body+210r
					; _www_body:loc_4207CFr ...
_ctx2		dd ?			; DATA XREF: _ssl_servername_cb+58r
					; _ssl_servername_cb+74r ...
_ctx		dd ?			; DATA XREF: _sv_body:loc_41EAE3r
					; _sv_body+AB0r ...
_s_nbio_test	dd ?			; DATA XREF: _sv_body:loc_41EB58r
					; _www_body+16Er ...
_s_nbio		dd ?			; DATA XREF: _sv_body+35r
					; _www_body+59r ...
_s_dkey_file	dd ?			; DATA XREF: _s_server_main+AAw
					; _s_server_main+DD7r ...
_s_dcert_file	dd ?			; DATA XREF: _s_server_main+A0w
					; _s_server_main:loc_421EA9r ...
_s_key_file2	dd ?			; DATA XREF: _s_server_main+D2w
					; _s_server_main:loc_421E36r ...
_s_key_file	dd ?			; DATA XREF: _s_server_main+BEw
					; _s_server_main+D49r ...
_s_server_verify dd ?			; DATA XREF: _s_server_main+96w
					; _s_server_main+2A8w ...
_cipher		dd ?			; DATA XREF: _s_server_main+8Cw
					; _s_server_main+1806r	...
		align 10h
		public _srtp_profiles_0
_srtp_profiles_0 dd ?			; DATA XREF: _s_client_main:loc_425FAEr
					; _s_client_main+3805w
_next_proto	dd ?			; DATA XREF: _s_client_main:loc_4250C1r
					; _s_client_main+C78w ...
dword_473408	dd ?			; DATA XREF: _s_client_main+C6Co
dword_47340C	dd ?			; DATA XREF: _print_stuff+14Er
					; _print_stuff+173r ...
_c_ign_eof	dd ?			; DATA XREF: _s_client_main+B6w
					; _s_client_main+1C10w	...
_c_quiet	dd ?			; DATA XREF: _next_proto_cb_0+Fr
					; _s_client_main+ACw ...
_bio_c_out	dd ?			; DATA XREF: _next_proto_cb_0+68r
					; _next_proto_cb_0+93r	...
; char *keymatexportlabel_0
_keymatexportlabel_0 dd	?		; DATA XREF: _print_stuff+1FAr
					; _print_stuff+218r ...
_c_showcerts	dd ?			; DATA XREF: _print_stuff+41Cr
					; _print_stuff+475r ...
_c_msg		dd ?			; DATA XREF: _s_client_main+CAw
					; _s_client_main:loc_426142r ...
_c_status_req	dd ?			; DATA XREF: _s_client_main:loc_42646Er
					; _s_client_main+2AA9w
_c_tlsextdebug	dd ?			; DATA XREF: _s_client_main:loc_42642Cr
					; _s_client_main+27AFw
_c_debug	dd ?			; DATA XREF: _psk_client_cb+15r
					; _psk_client_cb+50r ...
_c_Pause	dd ?			; DATA XREF: _s_client_main+A2w
					; _s_client_main:loc_426350r ...
_c_nbio		dd ?			; DATA XREF: _s_client_main+2C2w
					; _s_client_main+13B3r	...
		align 10h
_schlock	dd ?			; DATA XREF: _sleepy@4+6w
					; _speed_main+8F7w ...
; DWORD	lapse
_lapse		dd ?			; DATA XREF: _sleepy@4+10r
					; _speed_main+8EDw ...
		align 20h
_ecdh_results	dq ?			; DATA XREF: _speed_main+6A31w
					; _speed_main:loc_42F802r ...
		dd 1Eh dup(?)
_ecdsa_results	dq ?			; DATA XREF: _speed_main+53B7w
dbl_4734E8	dq ?			; DATA XREF: _speed_main+5F36w
					; _speed_main:loc_42F70Ao
		dd 3Ch dup(?)
_dsa_results	dq ?			; DATA XREF: _speed_main+5168w
					; _speed_main+6A9Br ...
dbl_4735E8	dq ?			; DATA XREF: _speed_main+4EECw
					; _speed_main:loc_42F611r ...
dbl_4735F0	dq ?			; DATA XREF: _speed_main+6AFCr
					; _speed_main+6E06r
dbl_4735F8	dq ?			; DATA XREF: _speed_main:loc_42F672r
					; _speed_main+6E00r
dbl_473600	dq ?			; DATA XREF: _speed_main+6B58r
					; _speed_main+6D9Ar
dbl_473608	dq ?			; DATA XREF: _speed_main:loc_42F6CEr
					; _speed_main+6D94r
		align 20h
_rsa_results	dq ?			; DATA XREF: _speed_main+48B8w
dbl_473628	dq ?			; DATA XREF: _speed_main+461Cw
					; _speed_main+57FCo
		dd 0Ch dup(?)
_results	dq ?			; DATA XREF: _speed_main+1Co
					; _speed_main:loc_42E30Cr
		dd 8 dup(?)
dbl_473688	dq ?			; DATA XREF: _speed_main+A5Aw
		dd 8 dup(?)
dbl_4736B0	dq ?			; DATA XREF: _speed_main+C7Aw
		dd 8 dup(?)
dbl_4736D8	dq ?			; DATA XREF: _speed_main+EA1w
		align 40h
dbl_473700	dq ?			; DATA XREF: _speed_main+66EFw
		dd 8 dup(?)
dbl_473728	dq ?			; DATA XREF: _speed_main+10CAw
		dd 8 dup(?)
dbl_473750	dq ?			; DATA XREF: _speed_main+191Aw
		dd 8 dup(?)
dbl_473778	dq ?			; DATA XREF: _speed_main+1B41w
		dd 8 dup(?)
dbl_4737A0	dq ?			; DATA XREF: _speed_main+1D78w
		dd 8 dup(?)
dbl_4737C8	dq ?			; DATA XREF: _speed_main+1FBCw
		dd 8 dup(?)
dbl_4737F0	dq ?			; DATA XREF: _speed_main+35B3w
		dd 8 dup(?)
dbl_473818	dq ?			; DATA XREF: _speed_main+37E3w
		align 40h
dbl_473840	dq ?			; DATA XREF: _speed_main+3A13w
		dd 12h dup(?)
dbl_473890	dq ?			; DATA XREF: _speed_main+3C43w
		dd 8 dup(?)
dbl_4738B8	dq ?			; DATA XREF: _speed_main+3E73w
		dd 8 dup(?)
dbl_4738E0	dq ?			; DATA XREF: _speed_main+21F3w
		dd 8 dup(?)
dbl_473908	dq ?			; DATA XREF: _speed_main+2423w
		dd 8 dup(?)
dbl_473930	dq ?			; DATA XREF: _speed_main+2653w
		dd 8 dup(?)
dbl_473958	dq ?			; DATA XREF: _speed_main+2F23w
		align 40h
dbl_473980	dq ?			; DATA XREF: _speed_main+3153w
		dd 8 dup(?)
dbl_4739A8	dq ?			; DATA XREF: _speed_main+3383w
		dd 8 dup(?)
dbl_4739D0	dq ?			; DATA XREF: _speed_main+42EBw
		dd 8 dup(?)
dbl_4739F8	dq ?			; DATA XREF: _speed_main+12D1w
		dd 8 dup(?)
dbl_473A20	dq ?			; DATA XREF: _speed_main+14E1w
		dd 8 dup(?)
dbl_473A48	dq ?			; DATA XREF: _speed_main+16F1w
		dd 8 dup(?)
dbl_473A70	dq ?			; DATA XREF: _speed_main+2883w
		dd 8 dup(?)
dbl_473A98	dq ?			; DATA XREF: _speed_main+2AB3w
		align 40h
dbl_473AC0	dq ?			; DATA XREF: _speed_main+2CE3w
		dd 8 dup(?)
dbl_473AE8	dq ?			; DATA XREF: _speed_main+645Dw
		dd 8 dup(?)
_mr		dd ?			; DATA XREF: _speed_main+3A0w
					; _speed_main+62Ar ...
_run		dd ?			; DATA XREF: _sleepy@4+1Fw
					; _speed_main+98Ew ...
_rnd_fake	dd ?			; DATA XREF: _speed_main+490Aw
					; _speed_main+4935r ...
		align 10h
_buf_37918	dd 800h	dup(?)		; DATA XREF: _s_time_main+555o
					; _s_time_main+561o ...
_exitNow	dd ?			; DATA XREF: _s_time_main+9Fw
_t_nbio		dd ?			; DATA XREF: _s_time_main+95w
					; _s_time_main:loc_43139Dw
_perform	dd ?			; DATA XREF: _s_time_main+8Bw
					; _s_time_main+144w ...
_st_bugs	dd ?			; DATA XREF: _s_time_main+81w
					; _s_time_main+19Fr ...
_bytes_read	dd ?			; DATA XREF: _s_time_main+77w
					; _s_time_main+62Aw ...
_s_www_path	dd ?			; DATA XREF: _s_time_main+6Dw
					; _s_time_main+534r ...
_s_time_meth	dd ?			; DATA XREF: _s_time_main+63w
					; _s_time_main+BBw ...
_tm_ctx		dd ?			; DATA XREF: _doConnection:loc_430B10r
					; _s_time_main+59w ...
_tm_verify	dd ?			; DATA XREF: _s_time_main+45w
					; _s_time_main+26Aw
_tm_cipher	dd ?			; DATA XREF: _s_time_main+3Bw
					; _s_time_main:loc_430CECr ...
_CAfile		dd ?			; DATA XREF: _s_time_main+31w
					; _s_time_main+480w ...
_CApath		dd ?			; DATA XREF: _s_time_main+27w
					; _s_time_main+341w ...
_t_key_file	dd ?			; DATA XREF: _s_time_main+1Dw
					; _s_time_main+1C2r ...
_t_cert_file	dd ?			; DATA XREF: _s_time_main+13w
					; _s_time_main+1CBr ...
		align 10h
_tmstart_37492	dd ?			; DATA XREF: _app_tminterval+54w
					; _app_tminterval+121r
dword_475B64	dd ?			; DATA XREF: _app_tminterval+5Cw
					; _app_tminterval+127r
; HANDLE proc_37494
_proc_37494	dd ?			; DATA XREF: _app_tminterval+Ar
					; _app_tminterval+A0w ...
		align 20h
_buf_37279	dd 100h	dup(?)		; DATA XREF: _load_serial+5Do
_load_config_called_37217 dd ?		; DATA XREF: _load_config+8r
					; _load_config+11w
_pwdbio_36996	dd ?			; DATA XREF: _app_get_pass_part_0+12r
					; _app_get_pass_part_0+3Ar ...
_ui_method	dd ?			; DATA XREF: _password_callback:loc_431AE2r
					; _setup_ui_method+Fw ...
		align 20h
		public _cookie_initialized
_cookie_initialized dd ?		; DATA XREF: _generate_cookie_callback+Ar
					; _generate_cookie_callback+2Fw ...
		public _verify_return_error
_verify_return_error dd	?		; DATA XREF: _s_server_main+224Cw
					; _s_client_main+FD7w ...
		public _verify_error
_verify_error	dd ?			; DATA XREF: _s_client_main+2B8w
					; _doConnection+115r ...
		public _verify_depth
_verify_depth	dd ?			; DATA XREF: _s_server_main+16Fw
					; _s_server_main+2D7w ...
		align 20h
; struct sockaddr from_37925
_from_37925	sockaddr <?>		; DATA XREF: _do_server:loc_4387B7o
					; _do_server+183o
_ghbn_miss	dd ?			; DATA XREF: _GetHostByName:loc_438103w
					; _GetHostByName+170r ...
_ghbn_hits	dd ?			; DATA XREF: _GetHostByName+16Br
					; _GetHostByName:loc_438202r ...
		align 10h
; char ghbn_cache[128]
_ghbn_cache	db 80h dup(?)		; DATA XREF: _GetHostByName+F8o
					; _GetHostByName+137o
dword_476060	dd 4 dup(?)		; DATA XREF: _GetHostByName+15Ao
					; _GetHostByName+1D6o
dword_476070	dd ?			; DATA XREF: _GetHostByName+Br
					; _GetHostByName+176w ...
; char byte_476074[144]
byte_476074	db 90h dup(?)		; DATA XREF: _GetHostByName+35o
dword_476104	dd ?			; DATA XREF: _GetHostByName+22r
					; _GetHostByName+110r
; char byte_476108[144]
byte_476108	db 90h dup(?)		; DATA XREF: _GetHostByName+69o
dword_476198	dd ?			; DATA XREF: _GetHostByName:loc_43809Dr
; char byte_47619C[144]
byte_47619C	db 90h dup(?)		; DATA XREF: _GetHostByName+9Bo
dword_47622C	dd ?			; DATA XREF: _GetHostByName:loc_4380D1r
_wsa_init_done	dd ?			; DATA XREF: _ssl_sock_cleanupr
					; _ssl_sock_cleanup+13w ...
		align 10h
; struct WSAData wsa_state
_wsa_state	WSAData	<?>		; DATA XREF: _init_client+CAo
					; _init_client+D1o ...
		align 20h
_egdsocket	dd ?			; DATA XREF: _app_RAND_load_file+70w
					; _app_RAND_write_filer
_seeded		dd ?			; DATA XREF: _app_RAND_load_file:loc_438F00w
					; _app_RAND_load_files+78w ...
		public _verify_err
_verify_err	dd ?			; DATA XREF: _cms_cb+10w
					; _cms_main+2431r
_section_0	dd ?			; DATA XREF: _srp_main+2Cw
					; _srp_main+2CAw ...
_conf_0		dd ?			; DATA XREF: _srp_main+22w
					; _srp_main:loc_44D7CBr ...
		public _mingw_initltssuo_force
; int mingw_initltssuo_force
_mingw_initltssuo_force	dd ?		; DATA XREF: _pre_c_init+22w
		public _mingw_initltsdyn_force
; int mingw_initltsdyn_force
_mingw_initltsdyn_force	dd ?		; DATA XREF: _pre_c_init+18w
		public _mingw_initltsdrot_force
; int mingw_initltsdrot_force
_mingw_initltsdrot_force dd ?		; DATA XREF: _pre_c_init+Ew
		public __tls_index
; ULONG	_tls_index
__tls_index	dd ?			; DATA XREF: .tls:TlsIndex_ptro
		public _mingw_initcharmax
; int mingw_initcharmax
_mingw_initcharmax dd ?			; DATA XREF: _pre_c_init+2Cw
		public _mingw_app_type
; int mingw_app_type
_mingw_app_type	dd ?			; DATA XREF: _pre_c_init+3Dr
					; ___tmainCRTStartup+61r ...
		public __fmode
; int _fmode
__fmode		dd ?			; DATA XREF: _pre_c_init+5Er
		public __newmode
; int _newmode
__newmode	dd ?			; DATA XREF: _pre_cpp_init+3r
		public __dowildcard
; int _dowildcard
__dowildcard	dd ?			; DATA XREF: _pre_cpp_init+25r
		public ___mingw_oldexcpt_handler
; LPTOP_LEVEL_EXCEPTION_FILTER __mingw_oldexcpt_handler
___mingw_oldexcpt_handler dd ?		; DATA XREF: ___tmainCRTStartup+11Bw
					; __gnu_exception_handler@4:loc_450FEDr
; fUserMathErr stUserMathErr
_stUserMathErr	dd ?			; DATA XREF: ___mingw_raise_matherr+3r
					; ___mingw_setusermatherr+4w
; Function-local static	variable
; int was_init_60783
_was_init_60783	dd ?			; DATA XREF: __pei386_runtime_relocatorr
					; __pei386_runtime_relocator+19w
; int maxSections
_maxSections	dd ?			; DATA XREF: ___report_error+6Er
					; ___report_error:loc_4512C6w ...
; sSecInfo_0 *the_secs
_the_secs	dd ?			; DATA XREF: ___report_error+7Fr
					; ___report_error+C0r ...
; int initialized
_initialized	dd ?			; DATA XREF: ___mainr
					; ___main:loc_4517B0w
		align 20h
; CONTEXT GS_ContextRecord
_GS_ContextRecord CONTEXT <?>		; DATA XREF: .rdata:_GS_ExceptionPointerso
		align 20h
; EXCEPTION_RECORD GS_ExceptionRecord
_GS_ExceptionRecord EXCEPTION_RECORD <?> ; DATA	XREF: ___report_gsfailure+12w
					; .rdata:_GS_ExceptionPointerso ...
		align 20h
; volatile __mingwthr_key_t *key_dtor_list
_key_dtor_list	dd ?			; DATA XREF: ___report_gsfailure+A6r
					; ____w64_mingwthr_add_key_dtor+52r ...
; volatile int __mingwthr_cs_init
___mingwthr_cs_init dd ?		; DATA XREF: ____w64_mingwthr_add_key_dtor+Ar
					; ____w64_mingwthr_remove_key_dtor+7r ...
; CRITICAL_SECTION __mingwthr_cs
___mingwthr_cs	CRITICAL_SECTION <?>	; DATA XREF: ___report_gsfailure+99o
					; ___report_gsfailure:loc_451959o ...
; char _RUNTIME_PSEUDO_RELOC_LIST__
__RUNTIME_PSEUDO_RELOC_LIST__ db ?
; char _RUNTIME_PSEUDO_RELOC_LIST_END__[7]
__RUNTIME_PSEUDO_RELOC_LIST_END__ db 7 dup(?)
					; DATA XREF: _mingw_get_invalid_parameter_handlerr
					; _mingw_set_invalid_parameter_handler+4w
		public ___mingw_winmain_lpCmdLine
; _TCHAR *__mingw_winmain_lpCmdLine
___mingw_winmain_lpCmdLine dd ?		; DATA XREF: ___tmainCRTStartup:loc_401304w
		public ___mingw_winmain_hInstance
; HINSTANCE __mingw_winmain_hInstance
___mingw_winmain_hInstance dd ?		; DATA XREF: ___tmainCRTStartup+136w
		public _cookie_secret
_cookie_secret	dd 4 dup(?)		; DATA XREF: _generate_cookie_callback+1Bo
					; _generate_cookie_callback+145o ...
		public _enc
_enc		dd ?			; DATA XREF: _dump_certs_pkeys_bag+309r
					; _dump_certs_pkeys_bag+3D5r ...
		public ___onexitend
; _PVFV	*__onexitend
___onexitend	dd ?			; DATA XREF: _pre_c_init+64w
					; _mingw_onexit+3Br ...
		public ___onexitbegin
; _PVFV	*__onexitbegin
___onexitbegin	dd ?			; DATA XREF: _pre_c_init+69w
					; _mingw_onexit+4r ...
		public ___native_startup_lock
; volatile void	*__native_startup_lock
___native_startup_lock dd ?		; DATA XREF: ___tmainCRTStartup+98w
					; ___tmainCRTStartup:loc_401463w
		public ___native_startup_state
; volatile __enative_startup_state_0 __native_startup_state
___native_startup_state	dd ?		; DATA XREF: ___tmainCRTStartup+A4r
					; ___tmainCRTStartup:loc_401234r ...
		dd 4 dup(?)
		public __bss_end__
__bss_end__	dd 207h	dup(?)
_bss		ends

;
; Imports from LIBEAY32.dll
;
; Section 6. (virtual address 00078000)
; Virtual size			: 00009660 (  38496.)
; Section size in file		: 00009800 (  38912.)
; Offset to raw	data for section: 00070200
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn __IAT_start__:dword ; DATA XREF: _AES_cbc_encryptr
		extrn __imp__AES_encrypt:dword ; DATA XREF: _AES_encryptr
		extrn __imp__AES_ige_encrypt:dword ; DATA XREF:	_AES_ige_encryptr
		extrn __imp__AES_options:dword ; DATA XREF: _AES_optionsr
		extrn __imp__AES_set_encrypt_key:dword ; DATA XREF: _AES_set_encrypt_keyr
		extrn __imp__ASN1_ENUMERATED_free:dword	; DATA XREF: _ASN1_ENUMERATED_freer
		extrn __imp__ASN1_ENUMERATED_new:dword ; DATA XREF: _ASN1_ENUMERATED_newr
		extrn __imp__ASN1_ENUMERATED_set:dword ; DATA XREF: _ASN1_ENUMERATED_setr
		extrn __imp__ASN1_GENERALIZEDTIME_free:dword
					; DATA XREF: _ASN1_GENERALIZEDTIME_freer
		extrn __imp__ASN1_GENERALIZEDTIME_new:dword
					; DATA XREF: _ASN1_GENERALIZEDTIME_newr
		extrn __imp__ASN1_GENERALIZEDTIME_print:dword
					; DATA XREF: _ASN1_GENERALIZEDTIME_printr
		extrn __imp__ASN1_GENERALIZEDTIME_set_string:dword
					; DATA XREF: _ASN1_GENERALIZEDTIME_set_stringr
		extrn __imp__ASN1_INTEGER_free:dword ; DATA XREF: _ASN1_INTEGER_freer
		extrn __imp__ASN1_INTEGER_get:dword ; DATA XREF: _ASN1_INTEGER_getr
		extrn __imp__ASN1_INTEGER_new:dword ; DATA XREF: _ASN1_INTEGER_newr
		extrn __imp__ASN1_INTEGER_set:dword ; DATA XREF: _ASN1_INTEGER_setr
		extrn __imp__ASN1_INTEGER_to_BN:dword ;	DATA XREF: _ASN1_INTEGER_to_BNr
		extrn __imp__ASN1_OBJECT_free:dword ; DATA XREF: _ASN1_OBJECT_freer
		extrn __imp__ASN1_PRINTABLE_type:dword ; DATA XREF: _ASN1_PRINTABLE_typer
		extrn __imp__ASN1_STRING_cmp:dword ; DATA XREF:	_ASN1_STRING_cmpr
		extrn __imp__ASN1_STRING_data:dword ; DATA XREF: _ASN1_STRING_datar
		extrn __imp__ASN1_STRING_length:dword ;	DATA XREF: _ASN1_STRING_lengthr
		extrn __imp__ASN1_STRING_set:dword ; DATA XREF:	_ASN1_STRING_setr
		extrn __imp__ASN1_STRING_set_default_mask_asc:dword
					; DATA XREF: _ASN1_STRING_set_default_mask_ascr
		extrn __imp__ASN1_TIME_free:dword ; DATA XREF: _ASN1_TIME_freer
		extrn __imp__ASN1_TIME_new:dword ; DATA	XREF: _ASN1_TIME_newr
		extrn __imp__ASN1_TIME_print:dword ; DATA XREF:	_ASN1_TIME_printr
		extrn __imp__ASN1_TIME_set_string:dword	; DATA XREF: _ASN1_TIME_set_stringr
		extrn __imp__ASN1_TYPE_free:dword ; DATA XREF: _ASN1_TYPE_freer
		extrn __imp__ASN1_TYPE_get:dword ; DATA	XREF: _ASN1_TYPE_getr
		extrn __imp__ASN1_TYPE_new:dword ; DATA	XREF: _ASN1_TYPE_newr
		extrn __imp__ASN1_UNIVERSALSTRING_to_string:dword
					; DATA XREF: _ASN1_UNIVERSALSTRING_to_stringr
		extrn __imp__ASN1_UTCTIME_free:dword ; DATA XREF: _ASN1_UTCTIME_freer
		extrn __imp__ASN1_UTCTIME_new:dword ; DATA XREF: _ASN1_UTCTIME_newr
		extrn __imp__ASN1_UTCTIME_set_string:dword
					; DATA XREF: _ASN1_UTCTIME_set_stringr
		extrn __imp__ASN1_d2i_bio:dword	; DATA XREF: _ASN1_d2i_bior
		extrn __imp__ASN1_generate_nconf:dword ; DATA XREF: _ASN1_generate_nconfr
		extrn __imp__ASN1_i2d_bio:dword	; DATA XREF: _ASN1_i2d_bior
		extrn __imp__ASN1_item_d2i_bio:dword ; DATA XREF: _ASN1_item_d2i_bior
		extrn __imp__ASN1_item_i2d_bio:dword ; DATA XREF: _ASN1_item_i2d_bior
		extrn __imp__ASN1_parse_dump:dword ; DATA XREF:	_ASN1_parse_dumpr
		extrn __imp__ASN1_tag2str:dword	; DATA XREF: _ASN1_tag2strr
		extrn __imp__BF_cbc_encrypt:dword ; DATA XREF: _BF_cbc_encryptr
		extrn __imp__BF_options:dword ;	DATA XREF: _BF_optionsr
		extrn __imp__BF_set_key:dword ;	DATA XREF: _BF_set_keyr
		extrn __imp__BIO_ctrl:dword ; DATA XREF: _BIO_ctrlr
		extrn __imp__BIO_debug_callback:dword ;	DATA XREF: _BIO_debug_callbackr
		extrn __imp__BIO_dump:dword ; DATA XREF: _BIO_dumpr
		extrn __imp__BIO_dump_indent:dword ; DATA XREF:	_BIO_dump_indentr
		extrn __imp__BIO_f_base64:dword	; DATA XREF: _BIO_f_base64r
		extrn __imp__BIO_f_buffer:dword	; DATA XREF: _BIO_f_bufferr
		extrn __imp__BIO_f_cipher:dword	; DATA XREF: _BIO_f_cipherr
		extrn __imp__BIO_f_md:dword ; DATA XREF: _BIO_f_mdr
		extrn __imp__BIO_f_nbio_test:dword ; DATA XREF:	_BIO_f_nbio_testr
		extrn __imp__BIO_free:dword ; DATA XREF: _BIO_freer
		extrn __imp__BIO_free_all:dword	; DATA XREF: _BIO_free_allr
		extrn __imp__BIO_get_callback_arg:dword	; DATA XREF: _BIO_get_callback_argr
		extrn __imp__BIO_get_retry_reason:dword	; DATA XREF: _BIO_get_retry_reasonr
		extrn __imp__BIO_gets:dword ; DATA XREF: _BIO_getsr
		extrn __imp__BIO_int_ctrl:dword	; DATA XREF: _BIO_int_ctrlr
		extrn __imp__BIO_new:dword ; DATA XREF:	_BIO_newr
		extrn __imp__BIO_new_accept:dword ; DATA XREF: _BIO_new_acceptr
		extrn __imp__BIO_new_connect:dword ; DATA XREF:	_BIO_new_connectr
		extrn __imp__BIO_new_dgram:dword ; DATA	XREF: _BIO_new_dgramr
		extrn __imp__BIO_new_file:dword	; DATA XREF: _BIO_new_filer
		extrn __imp__BIO_new_fp:dword ;	DATA XREF: _BIO_new_fpr
		extrn __imp__BIO_new_socket:dword ; DATA XREF: _BIO_new_socketr
		extrn __imp__BIO_number_read:dword ; DATA XREF:	_BIO_number_readr
		extrn __imp__BIO_number_written:dword ;	DATA XREF: _BIO_number_writtenr
		extrn __imp__BIO_pop:dword ; DATA XREF:	_BIO_popr
		extrn __imp__BIO_printf:dword ;	DATA XREF: _BIO_printfr
		extrn __imp__BIO_push:dword ; DATA XREF: _BIO_pushr
		extrn __imp__BIO_puts:dword ; DATA XREF: _BIO_putsr
		extrn __imp__BIO_read:dword ; DATA XREF: _BIO_readr
		extrn __imp__BIO_s_connect:dword ; DATA	XREF: _BIO_s_connectr
		extrn __imp__BIO_s_file:dword ;	DATA XREF: _BIO_s_filer
		extrn __imp__BIO_s_mem:dword ; DATA XREF: _BIO_s_memr
		extrn __imp__BIO_s_null:dword ;	DATA XREF: _BIO_s_nullr
		extrn __imp__BIO_set_callback:dword ; DATA XREF: _BIO_set_callbackr
		extrn __imp__BIO_set_callback_arg:dword	; DATA XREF: _BIO_set_callback_argr
		extrn __imp__BIO_set_flags:dword ; DATA	XREF: _BIO_set_flagsr
		extrn __imp__BIO_snprintf:dword	; DATA XREF: _BIO_snprintfr
		extrn __imp__BIO_sock_should_retry:dword
					; DATA XREF: _BIO_sock_should_retryr
		extrn __imp__BIO_socket_ioctl:dword ; DATA XREF: _BIO_socket_ioctlr
		extrn __imp__BIO_test_flags:dword ; DATA XREF: _BIO_test_flagsr
		extrn __imp__BIO_write:dword ; DATA XREF: _BIO_writer
		extrn __imp__BN_CTX_free:dword ; DATA XREF: _BN_CTX_freer
		extrn __imp__BN_CTX_new:dword ;	DATA XREF: _BN_CTX_newr
		extrn __imp__BN_add_word:dword ; DATA XREF: _BN_add_wordr
		extrn __imp__BN_bin2bn:dword ; DATA XREF: _BN_bin2bnr
		extrn __imp__BN_bn2bin:dword ; DATA XREF: _BN_bn2binr
		extrn __imp__BN_bn2dec:dword ; DATA XREF: _BN_bn2decr
		extrn __imp__BN_bn2hex:dword ; DATA XREF: _BN_bn2hexr
		extrn __imp__BN_cmp:dword ; DATA XREF: _BN_cmpr
		extrn __imp__BN_dec2bn:dword ; DATA XREF: _BN_dec2bnr
		extrn __imp__BN_free:dword ; DATA XREF:	_BN_freer
		extrn __imp__BN_generate_prime_ex:dword	; DATA XREF: _BN_generate_prime_exr
		extrn __imp__BN_hex2bn:dword ; DATA XREF: _BN_hex2bnr
		extrn __imp__BN_is_prime_ex:dword ; DATA XREF: _BN_is_prime_exr
		extrn __imp__BN_mod_exp:dword ;	DATA XREF: _BN_mod_expr
		extrn __imp__BN_new:dword ; DATA XREF: _BN_newr
		extrn __imp__BN_num_bits:dword ; DATA XREF: _BN_num_bitsr
		extrn __imp__BN_options:dword ;	DATA XREF: _BN_optionsr
		extrn __imp__BN_print:dword ; DATA XREF: _BN_printr
		extrn __imp__BN_pseudo_rand:dword ; DATA XREF: _BN_pseudo_randr
		extrn __imp__BN_rshift1:dword ;	DATA XREF: _BN_rshift1r
		extrn __imp__BN_set_word:dword ; DATA XREF: _BN_set_wordr
		extrn __imp__BN_to_ASN1_INTEGER:dword ;	DATA XREF: _BN_to_ASN1_INTEGERr
		extrn __imp__BUF_MEM_free:dword	; DATA XREF: _BUF_MEM_freer
		extrn __imp__BUF_MEM_grow:dword	; DATA XREF: _BUF_MEM_growr
		extrn __imp__BUF_MEM_grow_clean:dword ;	DATA XREF: _BUF_MEM_grow_cleanr
		extrn __imp__BUF_MEM_new:dword ; DATA XREF: _BUF_MEM_newr
		extrn __imp__BUF_strdup:dword ;	DATA XREF: _BUF_strdupr
		extrn __imp__BUF_strlcat:dword ; DATA XREF: _BUF_strlcatr
		extrn __imp__BUF_strlcpy:dword ; DATA XREF: _BUF_strlcpyr
		extrn __imp__CAST_cbc_encrypt:dword ; DATA XREF: _CAST_cbc_encryptr
		extrn __imp__CAST_set_key:dword	; DATA XREF: _CAST_set_keyr
		extrn __imp__CMS_ContentInfo_free:dword	; DATA XREF: _CMS_ContentInfo_freer
		extrn __imp__CMS_ContentInfo_print_ctx:dword
					; DATA XREF: _CMS_ContentInfo_print_ctxr
		extrn __imp__CMS_EncryptedData_decrypt:dword
					; DATA XREF: _CMS_EncryptedData_decryptr
		extrn __imp__CMS_EncryptedData_encrypt:dword
					; DATA XREF: _CMS_EncryptedData_encryptr
		extrn __imp__CMS_ReceiptRequest_create0:dword
					; DATA XREF: _CMS_ReceiptRequest_create0r
		extrn __imp__CMS_ReceiptRequest_free:dword
					; DATA XREF: _CMS_ReceiptRequest_freer
		extrn __imp__CMS_ReceiptRequest_get0_values:dword
					; DATA XREF: _CMS_ReceiptRequest_get0_valuesr
		extrn __imp__CMS_add0_recipient_key:dword
					; DATA XREF: _CMS_add0_recipient_keyr
		extrn __imp__CMS_add0_recipient_password:dword
					; DATA XREF: _CMS_add0_recipient_passwordr
		extrn __imp__CMS_add1_ReceiptRequest:dword
					; DATA XREF: _CMS_add1_ReceiptRequestr
		extrn __imp__CMS_add1_signer:dword ; DATA XREF:	_CMS_add1_signerr
		extrn __imp__CMS_compress:dword	; DATA XREF: _CMS_compressr
		extrn __imp__CMS_data:dword ; DATA XREF: _CMS_datar
		extrn __imp__CMS_data_create:dword ; DATA XREF:	_CMS_data_creater
		extrn __imp__CMS_decrypt:dword ; DATA XREF: _CMS_decryptr
		extrn __imp__CMS_decrypt_set1_key:dword	; DATA XREF: _CMS_decrypt_set1_keyr
		extrn __imp__CMS_decrypt_set1_password:dword
					; DATA XREF: _CMS_decrypt_set1_passwordr
		extrn __imp__CMS_decrypt_set1_pkey:dword
					; DATA XREF: _CMS_decrypt_set1_pkeyr
		extrn __imp__CMS_digest_create:dword ; DATA XREF: _CMS_digest_creater
		extrn __imp__CMS_digest_verify:dword ; DATA XREF: _CMS_digest_verifyr
		extrn __imp__CMS_encrypt:dword ; DATA XREF: _CMS_encryptr
		extrn __imp__CMS_final:dword ; DATA XREF: _CMS_finalr
		extrn __imp__CMS_get0_SignerInfos:dword	; DATA XREF: _CMS_get0_SignerInfosr
		extrn __imp__CMS_get0_signers:dword ; DATA XREF: _CMS_get0_signersr
		extrn __imp__CMS_get1_ReceiptRequest:dword
					; DATA XREF: _CMS_get1_ReceiptRequestr
		extrn __imp__CMS_get1_certs:dword ; DATA XREF: _CMS_get1_certsr
		extrn __imp__CMS_set1_eContentType:dword
					; DATA XREF: _CMS_set1_eContentTyper
		extrn __imp__CMS_sign:dword ; DATA XREF: _CMS_signr
		extrn __imp__CMS_sign_receipt:dword ; DATA XREF: _CMS_sign_receiptr
		extrn __imp__CMS_uncompress:dword ; DATA XREF: _CMS_uncompressr
		extrn __imp__CMS_verify:dword ;	DATA XREF: _CMS_verifyr
		extrn __imp__CMS_verify_receipt:dword ;	DATA XREF: _CMS_verify_receiptr
		extrn __imp__COMP_zlib_cleanup:dword ; DATA XREF: _COMP_zlib_cleanupr
		extrn __imp__CONF_free:dword ; DATA XREF: _CONF_freer
		extrn __imp__CONF_get_section:dword ; DATA XREF: _CONF_get_sectionr
		extrn __imp__CONF_load:dword ; DATA XREF: _CONF_loadr
		extrn __imp__CONF_modules_load:dword ; DATA XREF: _CONF_modules_loadr
		extrn __imp__CONF_modules_unload:dword ; DATA XREF: _CONF_modules_unloadr
		extrn __imp__CRYPTO_cleanup_all_ex_data:dword
					; DATA XREF: _CRYPTO_cleanup_all_ex_datar
		extrn __imp__CRYPTO_dbg_free:dword ; DATA XREF:	_CRYPTO_dbg_freer
		extrn __imp__CRYPTO_dbg_get_options:dword
					; DATA XREF: _CRYPTO_dbg_get_optionsr
		extrn __imp__CRYPTO_dbg_malloc:dword ; DATA XREF: _CRYPTO_dbg_mallocr
		extrn __imp__CRYPTO_dbg_realloc:dword ;	DATA XREF: _CRYPTO_dbg_reallocr
		extrn __imp__CRYPTO_dbg_set_options:dword
					; DATA XREF: _CRYPTO_dbg_set_optionsr
		extrn __imp__CRYPTO_free:dword ; DATA XREF: _CRYPTO_freer
		extrn __imp__CRYPTO_gcm128_aad:dword ; DATA XREF: _CRYPTO_gcm128_aadr
		extrn __imp__CRYPTO_gcm128_new:dword ; DATA XREF: _CRYPTO_gcm128_newr
		extrn __imp__CRYPTO_gcm128_release:dword
					; DATA XREF: _CRYPTO_gcm128_releaser
		extrn __imp__CRYPTO_gcm128_setiv:dword ; DATA XREF: _CRYPTO_gcm128_setivr
		extrn __imp__CRYPTO_malloc:dword ; DATA	XREF: _CRYPTO_mallocr
		extrn __imp__CRYPTO_mem_ctrl:dword ; DATA XREF:	_CRYPTO_mem_ctrlr
		extrn __imp__CRYPTO_mem_leaks:dword ; DATA XREF: _CRYPTO_mem_leaksr
		extrn __imp__CRYPTO_realloc:dword ; DATA XREF: _CRYPTO_reallocr
		extrn __imp__CRYPTO_set_locking_callback:dword
					; DATA XREF: _CRYPTO_set_locking_callbackr
		extrn __imp__CRYPTO_set_mem_debug_functions:dword
					; DATA XREF: _CRYPTO_set_mem_debug_functionsr
		extrn __imp__CRYPTO_set_mem_debug_options:dword
					; DATA XREF: _CRYPTO_set_mem_debug_optionsr
		extrn __imp__CRYPTO_set_mem_functions:dword
					; DATA XREF: _CRYPTO_set_mem_functionsr
		extrn __imp__Camellia_cbc_encrypt:dword	; DATA XREF: _Camellia_cbc_encryptr
		extrn __imp__Camellia_set_key:dword ; DATA XREF: _Camellia_set_keyr
		extrn __imp__DES_crypt:dword ; DATA XREF: _DES_cryptr
		extrn __imp__DES_ede3_cbc_encrypt:dword	; DATA XREF: _DES_ede3_cbc_encryptr
		extrn __imp__DES_ncbc_encrypt:dword ; DATA XREF: _DES_ncbc_encryptr
		extrn __imp__DES_options:dword ; DATA XREF: _DES_optionsr
		extrn __imp__DES_set_key_unchecked:dword
					; DATA XREF: _DES_set_key_uncheckedr
		extrn __imp__DH_check:dword ; DATA XREF: _DH_checkr
		extrn __imp__DH_free:dword ; DATA XREF:	_DH_freer
		extrn __imp__DH_generate_parameters_ex:dword
					; DATA XREF: _DH_generate_parameters_exr
		extrn __imp__DH_new:dword ; DATA XREF: _DH_newr
		extrn __imp__DHparams_print:dword ; DATA XREF: _DHparams_printr
		extrn __imp__DSA_dup_DH:dword ;	DATA XREF: _DSA_dup_DHr
		extrn __imp__DSA_free:dword ; DATA XREF: _DSA_freer
		extrn __imp__DSA_generate_key:dword ; DATA XREF: _DSA_generate_keyr
		extrn __imp__DSA_generate_parameters_ex:dword
					; DATA XREF: _DSA_generate_parameters_exr
		extrn __imp__DSA_new:dword ; DATA XREF:	_DSA_newr
		extrn __imp__DSA_print:dword ; DATA XREF: _DSA_printr
		extrn __imp__DSA_sign:dword ; DATA XREF: _DSA_signr
		extrn __imp__DSA_verify:dword ;	DATA XREF: _DSA_verifyr
		extrn __imp__DSAparams_dup:dword ; DATA	XREF: _DSAparams_dupr
		extrn __imp__DSAparams_print:dword ; DATA XREF:	_DSAparams_printr
		extrn __imp__ECDH_compute_key:dword ; DATA XREF: _ECDH_compute_keyr
		extrn __imp__ECDSA_sign:dword ;	DATA XREF: _ECDSA_signr
		extrn __imp__ECDSA_verify:dword	; DATA XREF: _ECDSA_verifyr
		extrn __imp__ECPKParameters_print:dword	; DATA XREF: _ECPKParameters_printr
		extrn __imp__EC_GROUP_check:dword ; DATA XREF: _EC_GROUP_checkr
		extrn __imp__EC_GROUP_free:dword ; DATA	XREF: _EC_GROUP_freer
		extrn __imp__EC_GROUP_get0_generator:dword
					; DATA XREF: _EC_GROUP_get0_generatorr
		extrn __imp__EC_GROUP_get_cofactor:dword
					; DATA XREF: _EC_GROUP_get_cofactorr
		extrn __imp__EC_GROUP_get_curve_GFp:dword
					; DATA XREF: _EC_GROUP_get_curve_GFpr
		extrn __imp__EC_GROUP_get_degree:dword ; DATA XREF: _EC_GROUP_get_degreer
		extrn __imp__EC_GROUP_get_order:dword ;	DATA XREF: _EC_GROUP_get_orderr
		extrn __imp__EC_GROUP_get_point_conversion_form:dword
					; DATA XREF: _EC_GROUP_get_point_conversion_formr
		extrn __imp__EC_GROUP_method_of:dword ;	DATA XREF: _EC_GROUP_method_ofr
		extrn __imp__EC_GROUP_new_by_curve_name:dword
					; DATA XREF: _EC_GROUP_new_by_curve_namer
		extrn __imp__EC_GROUP_set_asn1_flag:dword
					; DATA XREF: _EC_GROUP_set_asn1_flagr
		extrn __imp__EC_GROUP_set_point_conversion_form:dword
					; DATA XREF: _EC_GROUP_set_point_conversion_formr
		extrn __imp__EC_GROUP_set_seed:dword ; DATA XREF: _EC_GROUP_set_seedr
		extrn __imp__EC_KEY_free:dword ; DATA XREF: _EC_KEY_freer
		extrn __imp__EC_KEY_generate_key:dword ; DATA XREF: _EC_KEY_generate_keyr
		extrn __imp__EC_KEY_get0_group:dword ; DATA XREF: _EC_KEY_get0_groupr
		extrn __imp__EC_KEY_get0_public_key:dword
					; DATA XREF: _EC_KEY_get0_public_keyr
		extrn __imp__EC_KEY_new:dword ;	DATA XREF: _EC_KEY_newr
		extrn __imp__EC_KEY_new_by_curve_name:dword
					; DATA XREF: _EC_KEY_new_by_curve_namer
		extrn __imp__EC_KEY_precompute_mult:dword
					; DATA XREF: _EC_KEY_precompute_multr
		extrn __imp__EC_KEY_print:dword	; DATA XREF: _EC_KEY_printr
		extrn __imp__EC_KEY_set_asn1_flag:dword	; DATA XREF: _EC_KEY_set_asn1_flagr
		extrn __imp__EC_KEY_set_conv_form:dword	; DATA XREF: _EC_KEY_set_conv_formr
		extrn __imp__EC_KEY_set_group:dword ; DATA XREF: _EC_KEY_set_groupr
		extrn __imp__EC_METHOD_get_field_type:dword
					; DATA XREF: _EC_METHOD_get_field_typer
		extrn __imp__EC_POINT_point2bn:dword ; DATA XREF: _EC_POINT_point2bnr
		extrn __imp__EC_get_builtin_curves:dword
					; DATA XREF: _EC_get_builtin_curvesr
		extrn __imp__ENGINE_by_id:dword	; DATA XREF: _ENGINE_by_idr
		extrn __imp__ENGINE_cleanup:dword ; DATA XREF: _ENGINE_cleanupr
		extrn __imp__ENGINE_ctrl:dword ; DATA XREF: _ENGINE_ctrlr
		extrn __imp__ENGINE_ctrl_cmd:dword ; DATA XREF:	_ENGINE_ctrl_cmdr
		extrn __imp__ENGINE_ctrl_cmd_string:dword
					; DATA XREF: _ENGINE_ctrl_cmd_stringr
		extrn __imp__ENGINE_finish:dword ; DATA	XREF: _ENGINE_finishr
		extrn __imp__ENGINE_free:dword ; DATA XREF: _ENGINE_freer
		extrn __imp__ENGINE_get_DH:dword ; DATA	XREF: _ENGINE_get_DHr
		extrn __imp__ENGINE_get_DSA:dword ; DATA XREF: _ENGINE_get_DSAr
		extrn __imp__ENGINE_get_RAND:dword ; DATA XREF:	_ENGINE_get_RANDr
		extrn __imp__ENGINE_get_RSA:dword ; DATA XREF: _ENGINE_get_RSAr
		extrn __imp__ENGINE_get_ciphers:dword ;	DATA XREF: _ENGINE_get_ciphersr
		extrn __imp__ENGINE_get_digests:dword ;	DATA XREF: _ENGINE_get_digestsr
		extrn __imp__ENGINE_get_first:dword ; DATA XREF: _ENGINE_get_firstr
		extrn __imp__ENGINE_get_id:dword ; DATA	XREF: _ENGINE_get_idr
		extrn __imp__ENGINE_get_name:dword ; DATA XREF:	_ENGINE_get_namer
		extrn __imp__ENGINE_get_next:dword ; DATA XREF:	_ENGINE_get_nextr
		extrn __imp__ENGINE_get_pkey_asn1_meth_str:dword
					; DATA XREF: _ENGINE_get_pkey_asn1_meth_strr
		extrn __imp__ENGINE_get_pkey_meths:dword
					; DATA XREF: _ENGINE_get_pkey_methsr
		extrn __imp__ENGINE_init:dword ; DATA XREF: _ENGINE_initr
		extrn __imp__ENGINE_load_builtin_engines:dword
					; DATA XREF: _ENGINE_load_builtin_enginesr
		extrn __imp__ENGINE_load_private_key:dword
					; DATA XREF: _ENGINE_load_private_keyr
		extrn __imp__ENGINE_load_public_key:dword
					; DATA XREF: _ENGINE_load_public_keyr
		extrn __imp__ENGINE_register_all_complete:dword
					; DATA XREF: _ENGINE_register_all_completer
		extrn __imp__ENGINE_set_default:dword ;	DATA XREF: _ENGINE_set_defaultr
		extrn __imp__ERR_clear_error:dword ; DATA XREF:	_ERR_clear_errorr
		extrn __imp__ERR_error_string_n:dword ;	DATA XREF: _ERR_error_string_nr
		extrn __imp__ERR_free_strings:dword ; DATA XREF: _ERR_free_stringsr
		extrn __imp__ERR_get_error:dword ; DATA	XREF: _ERR_get_errorr
		extrn __imp__ERR_get_string_table:dword	; DATA XREF: _ERR_get_string_tabler
		extrn __imp__ERR_load_crypto_strings:dword
					; DATA XREF: _ERR_load_crypto_stringsr
		extrn __imp__ERR_peek_error:dword ; DATA XREF: _ERR_peek_errorr
		extrn __imp__ERR_peek_last_error:dword ; DATA XREF: _ERR_peek_last_errorr
		extrn __imp__ERR_print_errors:dword ; DATA XREF: _ERR_print_errorsr
		extrn __imp__ERR_print_errors_fp:dword ; DATA XREF: _ERR_print_errors_fpr
		extrn __imp__ERR_reason_error_string:dword
					; DATA XREF: _ERR_reason_error_stringr
		extrn __imp__ERR_remove_thread_state:dword
					; DATA XREF: _ERR_remove_thread_stater
		extrn __imp__EVP_BytesToKey:dword ; DATA XREF: _EVP_BytesToKeyr
		extrn __imp__EVP_CIPHER_CTX_cleanup:dword
					; DATA XREF: _EVP_CIPHER_CTX_cleanupr
		extrn __imp__EVP_CIPHER_CTX_init:dword ; DATA XREF: _EVP_CIPHER_CTX_initr
		extrn __imp__EVP_CIPHER_CTX_set_flags:dword
					; DATA XREF: _EVP_CIPHER_CTX_set_flagsr
		extrn __imp__EVP_CIPHER_CTX_set_padding:dword
					; DATA XREF: _EVP_CIPHER_CTX_set_paddingr
		extrn __imp__EVP_CIPHER_do_all_sorted:dword
					; DATA XREF: _EVP_CIPHER_do_all_sortedr
		extrn __imp__EVP_CIPHER_flags:dword ; DATA XREF: _EVP_CIPHER_flagsr
		extrn __imp__EVP_CIPHER_iv_length:dword	; DATA XREF: _EVP_CIPHER_iv_lengthr
		extrn __imp__EVP_CIPHER_key_length:dword
					; DATA XREF: _EVP_CIPHER_key_lengthr
		extrn __imp__EVP_CIPHER_nid:dword ; DATA XREF: _EVP_CIPHER_nidr
		extrn __imp__EVP_CipherInit_ex:dword ; DATA XREF: _EVP_CipherInit_exr
		extrn __imp__EVP_DecryptFinal_ex:dword ; DATA XREF: _EVP_DecryptFinal_exr
		extrn __imp__EVP_DecryptInit_ex:dword ;	DATA XREF: _EVP_DecryptInit_exr
		extrn __imp__EVP_DecryptUpdate:dword ; DATA XREF: _EVP_DecryptUpdater
		extrn __imp__EVP_Digest:dword ;	DATA XREF: _EVP_Digestr
		extrn __imp__EVP_DigestFinal:dword ; DATA XREF:	_EVP_DigestFinalr
		extrn __imp__EVP_DigestFinal_ex:dword ;	DATA XREF: _EVP_DigestFinal_exr
		extrn __imp__EVP_DigestInit:dword ; DATA XREF: _EVP_DigestInitr
		extrn __imp__EVP_DigestInit_ex:dword ; DATA XREF: _EVP_DigestInit_exr
		extrn __imp__EVP_DigestSignFinal:dword ; DATA XREF: _EVP_DigestSignFinalr
		extrn __imp__EVP_DigestSignInit:dword ;	DATA XREF: _EVP_DigestSignInitr
		extrn __imp__EVP_DigestUpdate:dword ; DATA XREF: _EVP_DigestUpdater
		extrn __imp__EVP_DigestVerifyFinal:dword
					; DATA XREF: _EVP_DigestVerifyFinalr
		extrn __imp__EVP_DigestVerifyInit:dword	; DATA XREF: _EVP_DigestVerifyInitr
		extrn __imp__EVP_EncryptFinal_ex:dword ; DATA XREF: _EVP_EncryptFinal_exr
		extrn __imp__EVP_EncryptInit_ex:dword ;	DATA XREF: _EVP_EncryptInit_exr
		extrn __imp__EVP_EncryptUpdate:dword ; DATA XREF: _EVP_EncryptUpdater
		extrn __imp__EVP_MD_CTX_cleanup:dword ;	DATA XREF: _EVP_MD_CTX_cleanupr
		extrn __imp__EVP_MD_CTX_init:dword ; DATA XREF:	_EVP_MD_CTX_initr
		extrn __imp__EVP_MD_CTX_md:dword ; DATA	XREF: _EVP_MD_CTX_mdr
		extrn __imp__EVP_MD_CTX_set_flags:dword	; DATA XREF: _EVP_MD_CTX_set_flagsr
		extrn __imp__EVP_MD_do_all_sorted:dword	; DATA XREF: _EVP_MD_do_all_sortedr
		extrn __imp__EVP_MD_flags:dword	; DATA XREF: _EVP_MD_flagsr
		extrn __imp__EVP_MD_size:dword ; DATA XREF: _EVP_MD_sizer
		extrn __imp__EVP_MD_type:dword ; DATA XREF: _EVP_MD_typer
		extrn __imp__EVP_PKCS82PKEY:dword ; DATA XREF: _EVP_PKCS82PKEYr
		extrn __imp__EVP_PKEY2PKCS8_broken:dword
					; DATA XREF: _EVP_PKEY2PKCS8_brokenr
		extrn __imp__EVP_PKEY_CTX_ctrl:dword ; DATA XREF: _EVP_PKEY_CTX_ctrlr
		extrn __imp__EVP_PKEY_CTX_ctrl_str:dword
					; DATA XREF: _EVP_PKEY_CTX_ctrl_strr
		extrn __imp__EVP_PKEY_CTX_free:dword ; DATA XREF: _EVP_PKEY_CTX_freer
		extrn __imp__EVP_PKEY_CTX_get_app_data:dword
					; DATA XREF: _EVP_PKEY_CTX_get_app_datar
		extrn __imp__EVP_PKEY_CTX_get_keygen_info:dword
					; DATA XREF: _EVP_PKEY_CTX_get_keygen_infor
		extrn __imp__EVP_PKEY_CTX_new:dword ; DATA XREF: _EVP_PKEY_CTX_newr
		extrn __imp__EVP_PKEY_CTX_new_id:dword ; DATA XREF: _EVP_PKEY_CTX_new_idr
		extrn __imp__EVP_PKEY_CTX_set_app_data:dword
					; DATA XREF: _EVP_PKEY_CTX_set_app_datar
		extrn __imp__EVP_PKEY_CTX_set_cb:dword ; DATA XREF: _EVP_PKEY_CTX_set_cbr
		extrn __imp__EVP_PKEY_add1_attr_by_NID:dword
					; DATA XREF: _EVP_PKEY_add1_attr_by_NIDr
		extrn __imp__EVP_PKEY_asn1_find:dword ;	DATA XREF: _EVP_PKEY_asn1_findr
		extrn __imp__EVP_PKEY_asn1_find_str:dword
					; DATA XREF: _EVP_PKEY_asn1_find_strr
		extrn __imp__EVP_PKEY_asn1_get0:dword ;	DATA XREF: _EVP_PKEY_asn1_get0r
		extrn __imp__EVP_PKEY_asn1_get0_info:dword
					; DATA XREF: _EVP_PKEY_asn1_get0_infor
		extrn __imp__EVP_PKEY_asn1_get_count:dword
					; DATA XREF: _EVP_PKEY_asn1_get_countr
		extrn __imp__EVP_PKEY_base_id:dword ; DATA XREF: _EVP_PKEY_base_idr
		extrn __imp__EVP_PKEY_bits:dword ; DATA	XREF: _EVP_PKEY_bitsr
		extrn __imp__EVP_PKEY_copy_parameters:dword
					; DATA XREF: _EVP_PKEY_copy_parametersr
		extrn __imp__EVP_PKEY_decrypt:dword ; DATA XREF: _EVP_PKEY_decryptr
		extrn __imp__EVP_PKEY_decrypt_init:dword
					; DATA XREF: _EVP_PKEY_decrypt_initr
		extrn __imp__EVP_PKEY_derive:dword ; DATA XREF:	_EVP_PKEY_deriver
		extrn __imp__EVP_PKEY_derive_init:dword	; DATA XREF: _EVP_PKEY_derive_initr
		extrn __imp__EVP_PKEY_derive_set_peer:dword
					; DATA XREF: _EVP_PKEY_derive_set_peerr
		extrn __imp__EVP_PKEY_encrypt:dword ; DATA XREF: _EVP_PKEY_encryptr
		extrn __imp__EVP_PKEY_encrypt_init:dword
					; DATA XREF: _EVP_PKEY_encrypt_initr
		extrn __imp__EVP_PKEY_free:dword ; DATA	XREF: _EVP_PKEY_freer
		extrn __imp__EVP_PKEY_get0_asn1:dword ;	DATA XREF: _EVP_PKEY_get0_asn1r
		extrn __imp__EVP_PKEY_get1_DSA:dword ; DATA XREF: _EVP_PKEY_get1_DSAr
		extrn __imp__EVP_PKEY_get1_RSA:dword ; DATA XREF: _EVP_PKEY_get1_RSAr
		extrn __imp__EVP_PKEY_get_default_digest_nid:dword
					; DATA XREF: _EVP_PKEY_get_default_digest_nidr
		extrn __imp__EVP_PKEY_id:dword ; DATA XREF: _EVP_PKEY_idr
		extrn __imp__EVP_PKEY_keygen:dword ; DATA XREF:	_EVP_PKEY_keygenr
		extrn __imp__EVP_PKEY_keygen_init:dword	; DATA XREF: _EVP_PKEY_keygen_initr
		extrn __imp__EVP_PKEY_missing_parameters:dword
					; DATA XREF: _EVP_PKEY_missing_parametersr
		extrn __imp__EVP_PKEY_new:dword	; DATA XREF: _EVP_PKEY_newr
		extrn __imp__EVP_PKEY_new_mac_key:dword	; DATA XREF: _EVP_PKEY_new_mac_keyr
		extrn __imp__EVP_PKEY_paramgen:dword ; DATA XREF: _EVP_PKEY_paramgenr
		extrn __imp__EVP_PKEY_paramgen_init:dword
					; DATA XREF: _EVP_PKEY_paramgen_initr
		extrn __imp__EVP_PKEY_print_params:dword
					; DATA XREF: _EVP_PKEY_print_paramsr
		extrn __imp__EVP_PKEY_print_private:dword
					; DATA XREF: _EVP_PKEY_print_privater
		extrn __imp__EVP_PKEY_print_public:dword
					; DATA XREF: _EVP_PKEY_print_publicr
		extrn __imp__EVP_PKEY_save_parameters:dword
					; DATA XREF: _EVP_PKEY_save_parametersr
		extrn __imp__EVP_PKEY_set1_DSA:dword ; DATA XREF: _EVP_PKEY_set1_DSAr
		extrn __imp__EVP_PKEY_set1_RSA:dword ; DATA XREF: _EVP_PKEY_set1_RSAr
		extrn __imp__EVP_PKEY_sign:dword ; DATA	XREF: _EVP_PKEY_signr
		extrn __imp__EVP_PKEY_sign_init:dword ;	DATA XREF: _EVP_PKEY_sign_initr
		extrn __imp__EVP_PKEY_size:dword ; DATA	XREF: _EVP_PKEY_sizer
		extrn __imp__EVP_PKEY_verify:dword ; DATA XREF:	_EVP_PKEY_verifyr
		extrn __imp__EVP_PKEY_verify_init:dword	; DATA XREF: _EVP_PKEY_verify_initr
		extrn __imp__EVP_PKEY_verify_recover:dword
					; DATA XREF: _EVP_PKEY_verify_recoverr
		extrn __imp__EVP_PKEY_verify_recover_init:dword
					; DATA XREF: _EVP_PKEY_verify_recover_initr
		extrn __imp__EVP_aes_128_cbc:dword ; DATA XREF:	_EVP_aes_128_cbcr
		extrn __imp__EVP_aes_192_cbc:dword ; DATA XREF:	_EVP_aes_192_cbcr
		extrn __imp__EVP_aes_256_cbc:dword ; DATA XREF:	_EVP_aes_256_cbcr
		extrn __imp__EVP_camellia_128_cbc:dword	; DATA XREF: _EVP_camellia_128_cbcr
		extrn __imp__EVP_camellia_192_cbc:dword	; DATA XREF: _EVP_camellia_192_cbcr
		extrn __imp__EVP_camellia_256_cbc:dword	; DATA XREF: _EVP_camellia_256_cbcr
		extrn __imp__EVP_cleanup:dword ; DATA XREF: _EVP_cleanupr
		extrn __imp__EVP_des_cbc:dword ; DATA XREF: _EVP_des_cbcr
		extrn __imp__EVP_des_ede3_cbc:dword ; DATA XREF: _EVP_des_ede3_cbcr
		extrn __imp__EVP_get_cipherbyname:dword	; DATA XREF: _EVP_get_cipherbynamer
		extrn __imp__EVP_get_digestbyname:dword	; DATA XREF: _EVP_get_digestbynamer
		extrn __imp__EVP_idea_cbc:dword	; DATA XREF: _EVP_idea_cbcr
		extrn __imp__EVP_md4:dword ; DATA XREF:	_EVP_md4r
		extrn __imp__EVP_md5:dword ; DATA XREF:	_EVP_md5r
		extrn __imp__EVP_mdc2:dword ; DATA XREF: _EVP_mdc2r
		extrn __imp__EVP_rc2_40_cbc:dword ; DATA XREF: _EVP_rc2_40_cbcr
		extrn __imp__EVP_rc2_64_cbc:dword ; DATA XREF: _EVP_rc2_64_cbcr
		extrn __imp__EVP_rc2_cbc:dword ; DATA XREF: _EVP_rc2_cbcr
		extrn __imp__EVP_read_pw_string:dword ;	DATA XREF: _EVP_read_pw_stringr
		extrn __imp__EVP_ripemd160:dword ; DATA	XREF: _EVP_ripemd160r
		extrn __imp__EVP_seed_cbc:dword	; DATA XREF: _EVP_seed_cbcr
		extrn __imp__EVP_sha1:dword ; DATA XREF: _EVP_sha1r
		extrn __imp__GENERAL_NAMES_free:dword ;	DATA XREF: _GENERAL_NAMES_freer
		extrn __imp__GENERAL_NAMES_new:dword ; DATA XREF: _GENERAL_NAMES_newr
		extrn __imp__GENERAL_NAME_free:dword ; DATA XREF: _GENERAL_NAME_freer
		extrn __imp__GENERAL_NAME_print:dword ;	DATA XREF: _GENERAL_NAME_printr
		extrn __imp__HMAC:dword	; DATA XREF: _HMACr
		extrn __imp__HMAC_CTX_cleanup:dword ; DATA XREF: _HMAC_CTX_cleanupr
		extrn __imp__HMAC_CTX_init:dword ; DATA	XREF: _HMAC_CTX_initr
		extrn __imp__HMAC_Final:dword ;	DATA XREF: _HMAC_Finalr
		extrn __imp__HMAC_Init_ex:dword	; DATA XREF: _HMAC_Init_exr
		extrn __imp__HMAC_Update:dword ; DATA XREF: _HMAC_Updater
		extrn __imp__NCONF_free:dword ;	DATA XREF: _NCONF_freer
		extrn __imp__NCONF_get_number_e:dword ;	DATA XREF: _NCONF_get_number_er
		extrn __imp__NCONF_get_section:dword ; DATA XREF: _NCONF_get_sectionr
		extrn __imp__NCONF_get_string:dword ; DATA XREF: _NCONF_get_stringr
		extrn __imp__NCONF_load:dword ;	DATA XREF: _NCONF_loadr
		extrn __imp__NCONF_load_bio:dword ; DATA XREF: _NCONF_load_bior
		extrn __imp__NCONF_new:dword ; DATA XREF: _NCONF_newr
		extrn __imp__NETSCAPE_CERT_SEQUENCE_free:dword
					; DATA XREF: _NETSCAPE_CERT_SEQUENCE_freer
		extrn __imp__NETSCAPE_CERT_SEQUENCE_new:dword
					; DATA XREF: _NETSCAPE_CERT_SEQUENCE_newr
		extrn __imp__NETSCAPE_SPKI_b64_decode:dword
					; DATA XREF: _NETSCAPE_SPKI_b64_decoder
		extrn __imp__NETSCAPE_SPKI_b64_encode:dword
					; DATA XREF: _NETSCAPE_SPKI_b64_encoder
		extrn __imp__NETSCAPE_SPKI_free:dword ;	DATA XREF: _NETSCAPE_SPKI_freer
		extrn __imp__NETSCAPE_SPKI_get_pubkey:dword
					; DATA XREF: _NETSCAPE_SPKI_get_pubkeyr
		extrn __imp__NETSCAPE_SPKI_new:dword ; DATA XREF: _NETSCAPE_SPKI_newr
		extrn __imp__NETSCAPE_SPKI_print:dword ; DATA XREF: _NETSCAPE_SPKI_printr
		extrn __imp__NETSCAPE_SPKI_set_pubkey:dword
					; DATA XREF: _NETSCAPE_SPKI_set_pubkeyr
		extrn __imp__NETSCAPE_SPKI_sign:dword ;	DATA XREF: _NETSCAPE_SPKI_signr
		extrn __imp__NETSCAPE_SPKI_verify:dword	; DATA XREF: _NETSCAPE_SPKI_verifyr
		extrn __imp__NETSCAPE_X509_free:dword ;	DATA XREF: _NETSCAPE_X509_freer
		extrn __imp__NETSCAPE_X509_it:dword ; DATA XREF: _NETSCAPE_X509_itr
		extrn __imp__OBJ_NAME_do_all_sorted:dword
					; DATA XREF: _OBJ_NAME_do_all_sortedr
		extrn __imp__OBJ_cleanup:dword ; DATA XREF: _OBJ_cleanupr
		extrn __imp__OBJ_create:dword ;	DATA XREF: _OBJ_creater
		extrn __imp__OBJ_create_objects:dword ;	DATA XREF: _OBJ_create_objectsr
		extrn __imp__OBJ_nid2ln:dword ;	DATA XREF: _OBJ_nid2lnr
		extrn __imp__OBJ_nid2obj:dword ; DATA XREF: _OBJ_nid2objr
		extrn __imp__OBJ_nid2sn:dword ;	DATA XREF: _OBJ_nid2snr
		extrn __imp__OBJ_obj2nid:dword ; DATA XREF: _OBJ_obj2nidr
		extrn __imp__OBJ_sn2nid:dword ;	DATA XREF: _OBJ_sn2nidr
		extrn __imp__OBJ_txt2nid:dword ; DATA XREF: _OBJ_txt2nidr
		extrn __imp__OBJ_txt2obj:dword ; DATA XREF: _OBJ_txt2objr
		extrn __imp__OCSP_BASICRESP_free:dword ; DATA XREF: _OCSP_BASICRESP_freer
		extrn __imp__OCSP_BASICRESP_new:dword ;	DATA XREF: _OCSP_BASICRESP_newr
		extrn __imp__OCSP_CERTID_free:dword ; DATA XREF: _OCSP_CERTID_freer
		extrn __imp__OCSP_REQUEST_add_ext:dword	; DATA XREF: _OCSP_REQUEST_add_extr
		extrn __imp__OCSP_REQUEST_free:dword ; DATA XREF: _OCSP_REQUEST_freer
		extrn __imp__OCSP_REQUEST_new:dword ; DATA XREF: _OCSP_REQUEST_newr
		extrn __imp__OCSP_REQUEST_print:dword ;	DATA XREF: _OCSP_REQUEST_printr
		extrn __imp__OCSP_REQ_CTX_add1_header:dword
					; DATA XREF: _OCSP_REQ_CTX_add1_headerr
		extrn __imp__OCSP_REQ_CTX_free:dword ; DATA XREF: _OCSP_REQ_CTX_freer
		extrn __imp__OCSP_REQ_CTX_set1_req:dword
					; DATA XREF: _OCSP_REQ_CTX_set1_reqr
		extrn __imp__OCSP_RESPONSE_free:dword ;	DATA XREF: _OCSP_RESPONSE_freer
		extrn __imp__OCSP_RESPONSE_new:dword ; DATA XREF: _OCSP_RESPONSE_newr
		extrn __imp__OCSP_RESPONSE_print:dword ; DATA XREF: _OCSP_RESPONSE_printr
		extrn __imp__OCSP_SINGLERESP_add1_ext_i2d:dword
					; DATA XREF: _OCSP_SINGLERESP_add1_ext_i2dr
		extrn __imp__OCSP_basic_add1_status:dword
					; DATA XREF: _OCSP_basic_add1_statusr
		extrn __imp__OCSP_basic_sign:dword ; DATA XREF:	_OCSP_basic_signr
		extrn __imp__OCSP_basic_verify:dword ; DATA XREF: _OCSP_basic_verifyr
		extrn __imp__OCSP_cert_id_new:dword ; DATA XREF: _OCSP_cert_id_newr
		extrn __imp__OCSP_cert_status_str:dword	; DATA XREF: _OCSP_cert_status_strr
		extrn __imp__OCSP_cert_to_id:dword ; DATA XREF:	_OCSP_cert_to_idr
		extrn __imp__OCSP_check_nonce:dword ; DATA XREF: _OCSP_check_noncer
		extrn __imp__OCSP_check_validity:dword ; DATA XREF: _OCSP_check_validityr
		extrn __imp__OCSP_copy_nonce:dword ; DATA XREF:	_OCSP_copy_noncer
		extrn __imp__OCSP_crl_reason_str:dword ; DATA XREF: _OCSP_crl_reason_strr
		extrn __imp__OCSP_id_get0_info:dword ; DATA XREF: _OCSP_id_get0_infor
		extrn __imp__OCSP_id_issuer_cmp:dword ;	DATA XREF: _OCSP_id_issuer_cmpr
		extrn __imp__OCSP_onereq_get0_id:dword ; DATA XREF: _OCSP_onereq_get0_idr
		extrn __imp__OCSP_parse_url:dword ; DATA XREF: _OCSP_parse_urlr
		extrn __imp__OCSP_request_add0_id:dword	; DATA XREF: _OCSP_request_add0_idr
		extrn __imp__OCSP_request_add1_nonce:dword
					; DATA XREF: _OCSP_request_add1_noncer
		extrn __imp__OCSP_request_onereq_count:dword
					; DATA XREF: _OCSP_request_onereq_countr
		extrn __imp__OCSP_request_onereq_get0:dword
					; DATA XREF: _OCSP_request_onereq_get0r
		extrn __imp__OCSP_request_sign:dword ; DATA XREF: _OCSP_request_signr
		extrn __imp__OCSP_resp_find_status:dword
					; DATA XREF: _OCSP_resp_find_statusr
		extrn __imp__OCSP_response_create:dword	; DATA XREF: _OCSP_response_creater
		extrn __imp__OCSP_response_get1_basic:dword
					; DATA XREF: _OCSP_response_get1_basicr
		extrn __imp__OCSP_response_status:dword	; DATA XREF: _OCSP_response_statusr
		extrn __imp__OCSP_response_status_str:dword
					; DATA XREF: _OCSP_response_status_strr
		extrn __imp__OCSP_sendreq_nbio:dword ; DATA XREF: _OCSP_sendreq_nbior
		extrn __imp__OCSP_sendreq_new:dword ; DATA XREF: _OCSP_sendreq_newr
		extrn __imp__OPENSSL_add_all_algorithms_noconf:dword
					; DATA XREF: _OPENSSL_add_all_algorithms_noconfr
		extrn __imp__OPENSSL_cleanse:dword ; DATA XREF:	_OPENSSL_cleanser
		extrn __imp__OPENSSL_load_builtin_modules:dword
					; DATA XREF: _OPENSSL_load_builtin_modulesr
		extrn __imp__OPENSSL_uni2asc:dword ; DATA XREF:	_OPENSSL_uni2ascr
		extrn __imp__OpenSSLDie:dword ;	DATA XREF: _OpenSSLDier
		extrn __imp__PBEPARAM_free:dword ; DATA	XREF: _PBEPARAM_freer
		extrn __imp__PEM_X509_INFO_read_bio:dword
					; DATA XREF: _PEM_X509_INFO_read_bior
		extrn __imp__PEM_read_bio_CMS:dword ; DATA XREF: _PEM_read_bio_CMSr
		extrn __imp__PEM_read_bio_DHparams:dword
					; DATA XREF: _PEM_read_bio_DHparamsr
		extrn __imp__PEM_read_bio_DSAparams:dword
					; DATA XREF: _PEM_read_bio_DSAparamsr
		extrn __imp__PEM_read_bio_ECPKParameters:dword
					; DATA XREF: _PEM_read_bio_ECPKParametersr
		extrn __imp__PEM_read_bio_ECPrivateKey:dword
					; DATA XREF: _PEM_read_bio_ECPrivateKeyr
		extrn __imp__PEM_read_bio_EC_PUBKEY:dword
					; DATA XREF: _PEM_read_bio_EC_PUBKEYr
		extrn __imp__PEM_read_bio_NETSCAPE_CERT_SEQUENCE:dword
					; DATA XREF: _PEM_read_bio_NETSCAPE_CERT_SEQUENCEr
		extrn __imp__PEM_read_bio_PKCS7:dword ;	DATA XREF: _PEM_read_bio_PKCS7r
		extrn __imp__PEM_read_bio_PKCS8:dword ;	DATA XREF: _PEM_read_bio_PKCS8r
		extrn __imp__PEM_read_bio_PKCS8_PRIV_KEY_INFO:dword
					; DATA XREF: _PEM_read_bio_PKCS8_PRIV_KEY_INFOr
		extrn __imp__PEM_read_bio_PUBKEY:dword ; DATA XREF: _PEM_read_bio_PUBKEYr
		extrn __imp__PEM_read_bio_Parameters:dword
					; DATA XREF: _PEM_read_bio_Parametersr
		extrn __imp__PEM_read_bio_PrivateKey:dword
					; DATA XREF: _PEM_read_bio_PrivateKeyr
		extrn __imp__PEM_read_bio_RSAPublicKey:dword
					; DATA XREF: _PEM_read_bio_RSAPublicKeyr
		extrn __imp__PEM_read_bio_X509:dword ; DATA XREF: _PEM_read_bio_X509r
		extrn __imp__PEM_read_bio_X509_AUX:dword
					; DATA XREF: _PEM_read_bio_X509_AUXr
		extrn __imp__PEM_read_bio_X509_CRL:dword
					; DATA XREF: _PEM_read_bio_X509_CRLr
		extrn __imp__PEM_read_bio_X509_REQ:dword
					; DATA XREF: _PEM_read_bio_X509_REQr
		extrn __imp__PEM_write_bio_CMS_stream:dword
					; DATA XREF: _PEM_write_bio_CMS_streamr
		extrn __imp__PEM_write_bio_DHparams:dword
					; DATA XREF: _PEM_write_bio_DHparamsr
		extrn __imp__PEM_write_bio_DSAPrivateKey:dword
					; DATA XREF: _PEM_write_bio_DSAPrivateKeyr
		extrn __imp__PEM_write_bio_DSA_PUBKEY:dword
					; DATA XREF: _PEM_write_bio_DSA_PUBKEYr
		extrn __imp__PEM_write_bio_DSAparams:dword
					; DATA XREF: _PEM_write_bio_DSAparamsr
		extrn __imp__PEM_write_bio_ECPKParameters:dword
					; DATA XREF: _PEM_write_bio_ECPKParametersr
		extrn __imp__PEM_write_bio_ECPrivateKey:dword
					; DATA XREF: _PEM_write_bio_ECPrivateKeyr
		extrn __imp__PEM_write_bio_EC_PUBKEY:dword
					; DATA XREF: _PEM_write_bio_EC_PUBKEYr
		extrn __imp__PEM_write_bio_NETSCAPE_CERT_SEQUENCE:dword
					; DATA XREF: _PEM_write_bio_NETSCAPE_CERT_SEQUENCEr
		extrn __imp__PEM_write_bio_PKCS7:dword ; DATA XREF: _PEM_write_bio_PKCS7r
		extrn __imp__PEM_write_bio_PKCS7_stream:dword
					; DATA XREF: _PEM_write_bio_PKCS7_streamr
		extrn __imp__PEM_write_bio_PKCS8:dword ; DATA XREF: _PEM_write_bio_PKCS8r
		extrn __imp__PEM_write_bio_PKCS8_PRIV_KEY_INFO:dword
					; DATA XREF: _PEM_write_bio_PKCS8_PRIV_KEY_INFOr
		extrn __imp__PEM_write_bio_PUBKEY:dword	; DATA XREF: _PEM_write_bio_PUBKEYr
		extrn __imp__PEM_write_bio_Parameters:dword
					; DATA XREF: _PEM_write_bio_Parametersr
		extrn __imp__PEM_write_bio_PrivateKey:dword
					; DATA XREF: _PEM_write_bio_PrivateKeyr
		extrn __imp__PEM_write_bio_RSAPrivateKey:dword
					; DATA XREF: _PEM_write_bio_RSAPrivateKeyr
		extrn __imp__PEM_write_bio_RSAPublicKey:dword
					; DATA XREF: _PEM_write_bio_RSAPublicKeyr
		extrn __imp__PEM_write_bio_RSA_PUBKEY:dword
					; DATA XREF: _PEM_write_bio_RSA_PUBKEYr
		extrn __imp__PEM_write_bio_X509:dword ;	DATA XREF: _PEM_write_bio_X509r
		extrn __imp__PEM_write_bio_X509_AUX:dword
					; DATA XREF: _PEM_write_bio_X509_AUXr
		extrn __imp__PEM_write_bio_X509_CRL:dword
					; DATA XREF: _PEM_write_bio_X509_CRLr
		extrn __imp__PEM_write_bio_X509_REQ:dword
					; DATA XREF: _PEM_write_bio_X509_REQr
		extrn __imp__PEM_write_bio_X509_REQ_NEW:dword
					; DATA XREF: _PEM_write_bio_X509_REQ_NEWr
		extrn __imp__PKCS12_SAFEBAG_free:dword ; DATA XREF: _PKCS12_SAFEBAG_freer
		extrn __imp__PKCS12_certbag2x509:dword ; DATA XREF: _PKCS12_certbag2x509r
		extrn __imp__PKCS12_create:dword ; DATA	XREF: _PKCS12_creater
		extrn __imp__PKCS12_decrypt_skey:dword ; DATA XREF: _PKCS12_decrypt_skeyr
		extrn __imp__PKCS12_free:dword ; DATA XREF: _PKCS12_freer
		extrn __imp__PKCS12_get_attr_gen:dword ; DATA XREF: _PKCS12_get_attr_genr
		extrn __imp__PKCS12_parse:dword	; DATA XREF: _PKCS12_parser
		extrn __imp__PKCS12_set_mac:dword ; DATA XREF: _PKCS12_set_macr
		extrn __imp__PKCS12_unpack_authsafes:dword
					; DATA XREF: _PKCS12_unpack_authsafesr
		extrn __imp__PKCS12_unpack_p7data:dword	; DATA XREF: _PKCS12_unpack_p7datar
		extrn __imp__PKCS12_unpack_p7encdata:dword
					; DATA XREF: _PKCS12_unpack_p7encdatar
		extrn __imp__PKCS12_verify_mac:dword ; DATA XREF: _PKCS12_verify_macr
		extrn __imp__PKCS7_SIGNED_new:dword ; DATA XREF: _PKCS7_SIGNED_newr
		extrn __imp__PKCS7_decrypt:dword ; DATA	XREF: _PKCS7_decryptr
		extrn __imp__PKCS7_encrypt:dword ; DATA	XREF: _PKCS7_encryptr
		extrn __imp__PKCS7_final:dword ; DATA XREF: _PKCS7_finalr
		extrn __imp__PKCS7_free:dword ;	DATA XREF: _PKCS7_freer
		extrn __imp__PKCS7_get0_signers:dword ;	DATA XREF: _PKCS7_get0_signersr
		extrn __imp__PKCS7_new:dword ; DATA XREF: _PKCS7_newr
		extrn __imp__PKCS7_print_ctx:dword ; DATA XREF:	_PKCS7_print_ctxr
		extrn __imp__PKCS7_sign:dword ;	DATA XREF: _PKCS7_signr
		extrn __imp__PKCS7_sign_add_signer:dword
					; DATA XREF: _PKCS7_sign_add_signerr
		extrn __imp__PKCS7_to_TS_TST_INFO:dword	; DATA XREF: _PKCS7_to_TS_TST_INFOr
		extrn __imp__PKCS7_verify:dword	; DATA XREF: _PKCS7_verifyr
		extrn __imp__PKCS8_PRIV_KEY_INFO_free:dword
					; DATA XREF: _PKCS8_PRIV_KEY_INFO_freer
		extrn __imp__PKCS8_decrypt:dword ; DATA	XREF: _PKCS8_decryptr
		extrn __imp__PKCS8_encrypt:dword ; DATA	XREF: _PKCS8_encryptr
		extrn __imp__RAND_bytes:dword ;	DATA XREF: _RAND_bytesr
		extrn __imp__RAND_cleanup:dword	; DATA XREF: _RAND_cleanupr
		extrn __imp__RAND_egd:dword ; DATA XREF: _RAND_egdr
		extrn __imp__RAND_file_name:dword ; DATA XREF: _RAND_file_namer
		extrn __imp__RAND_load_file:dword ; DATA XREF: _RAND_load_filer
		extrn __imp__RAND_pseudo_bytes:dword ; DATA XREF: _RAND_pseudo_bytesr
		extrn __imp__RAND_screen:dword ; DATA XREF: _RAND_screenr
		extrn __imp__RAND_seed:dword ; DATA XREF: _RAND_seedr
		extrn __imp__RAND_status:dword ; DATA XREF: _RAND_statusr
		extrn __imp__RAND_write_file:dword ; DATA XREF:	_RAND_write_filer
		extrn __imp__RC2_cbc_encrypt:dword ; DATA XREF:	_RC2_cbc_encryptr
		extrn __imp__RC2_set_key:dword ; DATA XREF: _RC2_set_keyr
		extrn __imp__RC4:dword	; DATA XREF: _RC4r
		extrn __imp__RC4_options:dword ; DATA XREF: _RC4_optionsr
		extrn __imp__RC4_set_key:dword ; DATA XREF: _RC4_set_keyr
		extrn __imp__RSA_PKCS1_SSLeay:dword ; DATA XREF: _RSA_PKCS1_SSLeayr
		extrn __imp__RSA_check_key:dword ; DATA	XREF: _RSA_check_keyr
		extrn __imp__RSA_free:dword ; DATA XREF: _RSA_freer
		extrn __imp__RSA_generate_key_ex:dword ; DATA XREF: _RSA_generate_key_exr
		extrn __imp__RSA_new:dword ; DATA XREF:	_RSA_newr
		extrn __imp__RSA_new_method:dword ; DATA XREF: _RSA_new_methodr
		extrn __imp__RSA_print:dword ; DATA XREF: _RSA_printr
		extrn __imp__RSA_private_decrypt:dword ; DATA XREF: _RSA_private_decryptr
		extrn __imp__RSA_private_encrypt:dword ; DATA XREF: _RSA_private_encryptr
		extrn __imp__RSA_public_decrypt:dword ;	DATA XREF: _RSA_public_decryptr
		extrn __imp__RSA_public_encrypt:dword ;	DATA XREF: _RSA_public_encryptr
		extrn __imp__RSA_set_default_method:dword
					; DATA XREF: _RSA_set_default_methodr
		extrn __imp__RSA_sign:dword ; DATA XREF: _RSA_signr
		extrn __imp__RSA_size:dword ; DATA XREF: _RSA_sizer
		extrn __imp__RSA_verify:dword ;	DATA XREF: _RSA_verifyr
		extrn __imp__SEED_cbc_encrypt:dword ; DATA XREF: _SEED_cbc_encryptr
		extrn __imp__SEED_set_key:dword	; DATA XREF: _SEED_set_keyr
		extrn __imp__SHA1:dword	; DATA XREF: _SHA1r
		extrn __imp__SHA256:dword ; DATA XREF: _SHA256r
		extrn __imp__SHA512:dword ; DATA XREF: _SHA512r
		extrn __imp__SMIME_read_CMS:dword ; DATA XREF: _SMIME_read_CMSr
		extrn __imp__SMIME_read_PKCS7:dword ; DATA XREF: _SMIME_read_PKCS7r
		extrn __imp__SMIME_write_CMS:dword ; DATA XREF:	_SMIME_write_CMSr
		extrn __imp__SMIME_write_PKCS7:dword ; DATA XREF: _SMIME_write_PKCS7r
		extrn __imp__SRP_VBASE_get1_by_user:dword
					; DATA XREF: _SRP_VBASE_get1_by_userr
		extrn __imp__SRP_VBASE_init:dword ; DATA XREF: _SRP_VBASE_initr
		extrn __imp__SRP_VBASE_new:dword ; DATA	XREF: _SRP_VBASE_newr
		extrn __imp__SRP_check_known_gN_param:dword
					; DATA XREF: _SRP_check_known_gN_paramr
		extrn __imp__SRP_create_verifier:dword ; DATA XREF: _SRP_create_verifierr
		extrn __imp__SRP_get_default_gN:dword ;	DATA XREF: _SRP_get_default_gNr
		extrn __imp__SRP_user_pwd_free:dword ; DATA XREF: _SRP_user_pwd_freer
		extrn __imp__SSLeay:dword ; DATA XREF: _SSLeayr
		extrn __imp__SSLeay_version:dword ; DATA XREF: _SSLeay_versionr
		extrn __imp__TS_CONF_get_tsa_section:dword
					; DATA XREF: _TS_CONF_get_tsa_sectionr
		extrn __imp__TS_CONF_load_certs:dword ;	DATA XREF: _TS_CONF_load_certsr
		extrn __imp__TS_CONF_set_accuracy:dword	; DATA XREF: _TS_CONF_set_accuracyr
		extrn __imp__TS_CONF_set_certs:dword ; DATA XREF: _TS_CONF_set_certsr
		extrn __imp__TS_CONF_set_clock_precision_digits:dword
					; DATA XREF: _TS_CONF_set_clock_precision_digitsr
		extrn __imp__TS_CONF_set_crypto_device:dword
					; DATA XREF: _TS_CONF_set_crypto_devicer
		extrn __imp__TS_CONF_set_def_policy:dword
					; DATA XREF: _TS_CONF_set_def_policyr
		extrn __imp__TS_CONF_set_digests:dword ; DATA XREF: _TS_CONF_set_digestsr
		extrn __imp__TS_CONF_set_ess_cert_id_chain:dword
					; DATA XREF: _TS_CONF_set_ess_cert_id_chainr
		extrn __imp__TS_CONF_set_ordering:dword	; DATA XREF: _TS_CONF_set_orderingr
		extrn __imp__TS_CONF_set_policies:dword	; DATA XREF: _TS_CONF_set_policiesr
		extrn __imp__TS_CONF_set_serial:dword ;	DATA XREF: _TS_CONF_set_serialr
		extrn __imp__TS_CONF_set_signer_cert:dword
					; DATA XREF: _TS_CONF_set_signer_certr
		extrn __imp__TS_CONF_set_signer_key:dword
					; DATA XREF: _TS_CONF_set_signer_keyr
		extrn __imp__TS_CONF_set_tsa_name:dword	; DATA XREF: _TS_CONF_set_tsa_namer
		extrn __imp__TS_MSG_IMPRINT_free:dword ; DATA XREF: _TS_MSG_IMPRINT_freer
		extrn __imp__TS_MSG_IMPRINT_new:dword ;	DATA XREF: _TS_MSG_IMPRINT_newr
		extrn __imp__TS_MSG_IMPRINT_set_algo:dword
					; DATA XREF: _TS_MSG_IMPRINT_set_algor
		extrn __imp__TS_MSG_IMPRINT_set_msg:dword
					; DATA XREF: _TS_MSG_IMPRINT_set_msgr
		extrn __imp__TS_REQ_free:dword ; DATA XREF: _TS_REQ_freer
		extrn __imp__TS_REQ_new:dword ;	DATA XREF: _TS_REQ_newr
		extrn __imp__TS_REQ_print_bio:dword ; DATA XREF: _TS_REQ_print_bior
		extrn __imp__TS_REQ_set_cert_req:dword ; DATA XREF: _TS_REQ_set_cert_reqr
		extrn __imp__TS_REQ_set_msg_imprint:dword
					; DATA XREF: _TS_REQ_set_msg_imprintr
		extrn __imp__TS_REQ_set_nonce:dword ; DATA XREF: _TS_REQ_set_noncer
		extrn __imp__TS_REQ_set_policy_id:dword	; DATA XREF: _TS_REQ_set_policy_idr
		extrn __imp__TS_REQ_set_version:dword ;	DATA XREF: _TS_REQ_set_versionr
		extrn __imp__TS_REQ_to_TS_VERIFY_CTX:dword
					; DATA XREF: _TS_REQ_to_TS_VERIFY_CTXr
		extrn __imp__TS_RESP_CTX_add_failure_info:dword
					; DATA XREF: _TS_RESP_CTX_add_failure_infor
		extrn __imp__TS_RESP_CTX_free:dword ; DATA XREF: _TS_RESP_CTX_freer
		extrn __imp__TS_RESP_CTX_new:dword ; DATA XREF:	_TS_RESP_CTX_newr
		extrn __imp__TS_RESP_CTX_set_status_info:dword
					; DATA XREF: _TS_RESP_CTX_set_status_infor
		extrn __imp__TS_RESP_create_response:dword
					; DATA XREF: _TS_RESP_create_responser
		extrn __imp__TS_RESP_free:dword	; DATA XREF: _TS_RESP_freer
		extrn __imp__TS_RESP_get_token:dword ; DATA XREF: _TS_RESP_get_tokenr
		extrn __imp__TS_RESP_get_tst_info:dword	; DATA XREF: _TS_RESP_get_tst_infor
		extrn __imp__TS_RESP_new:dword ; DATA XREF: _TS_RESP_newr
		extrn __imp__TS_RESP_print_bio:dword ; DATA XREF: _TS_RESP_print_bior
		extrn __imp__TS_RESP_set_status_info:dword
					; DATA XREF: _TS_RESP_set_status_infor
		extrn __imp__TS_RESP_set_tst_info:dword	; DATA XREF: _TS_RESP_set_tst_infor
		extrn __imp__TS_RESP_verify_response:dword
					; DATA XREF: _TS_RESP_verify_responser
		extrn __imp__TS_RESP_verify_token:dword	; DATA XREF: _TS_RESP_verify_tokenr
		extrn __imp__TS_STATUS_INFO_free:dword ; DATA XREF: _TS_STATUS_INFO_freer
		extrn __imp__TS_STATUS_INFO_new:dword ;	DATA XREF: _TS_STATUS_INFO_newr
		extrn __imp__TS_TST_INFO_free:dword ; DATA XREF: _TS_TST_INFO_freer
		extrn __imp__TS_TST_INFO_print_bio:dword
					; DATA XREF: _TS_TST_INFO_print_bior
		extrn __imp__TS_VERIFY_CTX_free:dword ;	DATA XREF: _TS_VERIFY_CTX_freer
		extrn __imp__TS_VERIFY_CTX_new:dword ; DATA XREF: _TS_VERIFY_CTX_newr
		extrn __imp__TXT_DB_create_index:dword ; DATA XREF: _TXT_DB_create_indexr
		extrn __imp__TXT_DB_free:dword ; DATA XREF: _TXT_DB_freer
		extrn __imp__TXT_DB_get_by_index:dword ; DATA XREF: _TXT_DB_get_by_indexr
		extrn __imp__TXT_DB_insert:dword ; DATA	XREF: _TXT_DB_insertr
		extrn __imp__TXT_DB_read:dword ; DATA XREF: _TXT_DB_readr
		extrn __imp__TXT_DB_write:dword	; DATA XREF: _TXT_DB_writer
		extrn __imp__UI_OpenSSL:dword ;	DATA XREF: _UI_OpenSSLr
		extrn __imp__UI_add_input_string:dword ; DATA XREF: _UI_add_input_stringr
		extrn __imp__UI_add_verify_string:dword	; DATA XREF: _UI_add_verify_stringr
		extrn __imp__UI_construct_prompt:dword ; DATA XREF: _UI_construct_promptr
		extrn __imp__UI_create_method:dword ; DATA XREF: _UI_create_methodr
		extrn __imp__UI_ctrl:dword ; DATA XREF:	_UI_ctrlr
		extrn __imp__UI_destroy_method:dword ; DATA XREF: _UI_destroy_methodr
		extrn __imp__UI_free:dword ; DATA XREF:	_UI_freer
		extrn __imp__UI_get0_user_data:dword ; DATA XREF: _UI_get0_user_datar
		extrn __imp__UI_get_input_flags:dword ;	DATA XREF: _UI_get_input_flagsr
		extrn __imp__UI_get_string_type:dword ;	DATA XREF: _UI_get_string_typer
		extrn __imp__UI_method_get_closer:dword	; DATA XREF: _UI_method_get_closerr
		extrn __imp__UI_method_get_opener:dword	; DATA XREF: _UI_method_get_openerr
		extrn __imp__UI_method_get_reader:dword	; DATA XREF: _UI_method_get_readerr
		extrn __imp__UI_method_get_writer:dword	; DATA XREF: _UI_method_get_writerr
		extrn __imp__UI_method_set_closer:dword	; DATA XREF: _UI_method_set_closerr
		extrn __imp__UI_method_set_opener:dword	; DATA XREF: _UI_method_set_openerr
		extrn __imp__UI_method_set_reader:dword	; DATA XREF: _UI_method_set_readerr
		extrn __imp__UI_method_set_writer:dword	; DATA XREF: _UI_method_set_writerr
		extrn __imp__UI_new_method:dword ; DATA	XREF: _UI_new_methodr
		extrn __imp__UI_process:dword ;	DATA XREF: _UI_processr
		extrn __imp__UI_set_result:dword ; DATA	XREF: _UI_set_resultr
		extrn __imp__WHIRLPOOL:dword ; DATA XREF: _WHIRLPOOLr
		extrn __imp__X509V3_EXT_CRL_add_nconf:dword
					; DATA XREF: _X509V3_EXT_CRL_add_nconfr
		extrn __imp__X509V3_EXT_REQ_add_nconf:dword
					; DATA XREF: _X509V3_EXT_REQ_add_nconfr
		extrn __imp__X509V3_EXT_add_nconf:dword	; DATA XREF: _X509V3_EXT_add_nconfr
		extrn __imp__X509V3_add_value:dword ; DATA XREF: _X509V3_add_valuer
		extrn __imp__X509V3_conf_free:dword ; DATA XREF: _X509V3_conf_freer
		extrn __imp__X509V3_parse_list:dword ; DATA XREF: _X509V3_parse_listr
		extrn __imp__X509V3_set_ctx:dword ; DATA XREF: _X509V3_set_ctxr
		extrn __imp__X509V3_set_nconf:dword ; DATA XREF: _X509V3_set_nconfr
		extrn __imp__X509_ALGOR_free:dword ; DATA XREF:	_X509_ALGOR_freer
		extrn __imp__X509_ALGOR_new:dword ; DATA XREF: _X509_ALGOR_newr
		extrn __imp__X509_CRL_add0_revoked:dword
					; DATA XREF: _X509_CRL_add0_revokedr
		extrn __imp__X509_CRL_add1_ext_i2d:dword
					; DATA XREF: _X509_CRL_add1_ext_i2dr
		extrn __imp__X509_CRL_digest:dword ; DATA XREF:	_X509_CRL_digestr
		extrn __imp__X509_CRL_free:dword ; DATA	XREF: _X509_CRL_freer
		extrn __imp__X509_CRL_get_ext_d2i:dword	; DATA XREF: _X509_CRL_get_ext_d2ir
		extrn __imp__X509_CRL_new:dword	; DATA XREF: _X509_CRL_newr
		extrn __imp__X509_CRL_print:dword ; DATA XREF: _X509_CRL_printr
		extrn __imp__X509_CRL_set_issuer_name:dword
					; DATA XREF: _X509_CRL_set_issuer_namer
		extrn __imp__X509_CRL_set_lastUpdate:dword
					; DATA XREF: _X509_CRL_set_lastUpdater
		extrn __imp__X509_CRL_set_nextUpdate:dword
					; DATA XREF: _X509_CRL_set_nextUpdater
		extrn __imp__X509_CRL_set_version:dword	; DATA XREF: _X509_CRL_set_versionr
		extrn __imp__X509_CRL_sign_ctx:dword ; DATA XREF: _X509_CRL_sign_ctxr
		extrn __imp__X509_CRL_sort:dword ; DATA	XREF: _X509_CRL_sortr
		extrn __imp__X509_CRL_verify:dword ; DATA XREF:	_X509_CRL_verifyr
		extrn __imp__X509_EXTENSION_free:dword ; DATA XREF: _X509_EXTENSION_freer
		extrn __imp__X509_EXTENSION_get_object:dword
					; DATA XREF: _X509_EXTENSION_get_objectr
		extrn __imp__X509_INFO_free:dword ; DATA XREF: _X509_INFO_freer
		extrn __imp__X509_LOOKUP_ctrl:dword ; DATA XREF: _X509_LOOKUP_ctrlr
		extrn __imp__X509_LOOKUP_file:dword ; DATA XREF: _X509_LOOKUP_filer
		extrn __imp__X509_LOOKUP_hash_dir:dword	; DATA XREF: _X509_LOOKUP_hash_dirr
		extrn __imp__X509_NAME_ENTRY_free:dword	; DATA XREF: _X509_NAME_ENTRY_freer
		extrn __imp__X509_NAME_ENTRY_get_data:dword
					; DATA XREF: _X509_NAME_ENTRY_get_datar
		extrn __imp__X509_NAME_ENTRY_get_object:dword
					; DATA XREF: _X509_NAME_ENTRY_get_objectr
		extrn __imp__X509_NAME_add_entry:dword ; DATA XREF: _X509_NAME_add_entryr
		extrn __imp__X509_NAME_add_entry_by_NID:dword
					; DATA XREF: _X509_NAME_add_entry_by_NIDr
		extrn __imp__X509_NAME_add_entry_by_txt:dword
					; DATA XREF: _X509_NAME_add_entry_by_txtr
		extrn __imp__X509_NAME_delete_entry:dword
					; DATA XREF: _X509_NAME_delete_entryr
		extrn __imp__X509_NAME_dup:dword ; DATA	XREF: _X509_NAME_dupr
		extrn __imp__X509_NAME_entry_count:dword
					; DATA XREF: _X509_NAME_entry_countr
		extrn __imp__X509_NAME_free:dword ; DATA XREF: _X509_NAME_freer
		extrn __imp__X509_NAME_get_entry:dword ; DATA XREF: _X509_NAME_get_entryr
		extrn __imp__X509_NAME_get_index_by_NID:dword
					; DATA XREF: _X509_NAME_get_index_by_NIDr
		extrn __imp__X509_NAME_get_index_by_OBJ:dword
					; DATA XREF: _X509_NAME_get_index_by_OBJr
		extrn __imp__X509_NAME_hash:dword ; DATA XREF: _X509_NAME_hashr
		extrn __imp__X509_NAME_hash_old:dword ;	DATA XREF: _X509_NAME_hash_oldr
		extrn __imp__X509_NAME_new:dword ; DATA	XREF: _X509_NAME_newr
		extrn __imp__X509_NAME_oneline:dword ; DATA XREF: _X509_NAME_oneliner
		extrn __imp__X509_NAME_print_ex:dword ;	DATA XREF: _X509_NAME_print_exr
		extrn __imp__X509_NAME_print_ex_fp:dword
					; DATA XREF: _X509_NAME_print_ex_fpr
		extrn __imp__X509_OBJECT_free_contents:dword
					; DATA XREF: _X509_OBJECT_free_contentsr
		extrn __imp__X509_POLICY_NODE_print:dword
					; DATA XREF: _X509_POLICY_NODE_printr
		extrn __imp__X509_PURPOSE_get0:dword ; DATA XREF: _X509_PURPOSE_get0r
		extrn __imp__X509_PURPOSE_get0_name:dword
					; DATA XREF: _X509_PURPOSE_get0_namer
		extrn __imp__X509_PURPOSE_get0_sname:dword
					; DATA XREF: _X509_PURPOSE_get0_snamer
		extrn __imp__X509_PURPOSE_get_by_sname:dword
					; DATA XREF: _X509_PURPOSE_get_by_snamer
		extrn __imp__X509_PURPOSE_get_count:dword
					; DATA XREF: _X509_PURPOSE_get_countr
		extrn __imp__X509_PURPOSE_get_id:dword ; DATA XREF: _X509_PURPOSE_get_idr
		extrn __imp__X509_REQ_add1_attr_by_NID:dword
					; DATA XREF: _X509_REQ_add1_attr_by_NIDr
		extrn __imp__X509_REQ_add1_attr_by_txt:dword
					; DATA XREF: _X509_REQ_add1_attr_by_txtr
		extrn __imp__X509_REQ_check_private_key:dword
					; DATA XREF: _X509_REQ_check_private_keyr
		extrn __imp__X509_REQ_free:dword ; DATA	XREF: _X509_REQ_freer
		extrn __imp__X509_REQ_get_extensions:dword
					; DATA XREF: _X509_REQ_get_extensionsr
		extrn __imp__X509_REQ_get_pubkey:dword ; DATA XREF: _X509_REQ_get_pubkeyr
		extrn __imp__X509_REQ_new:dword	; DATA XREF: _X509_REQ_newr
		extrn __imp__X509_REQ_print:dword ; DATA XREF: _X509_REQ_printr
		extrn __imp__X509_REQ_print_ex:dword ; DATA XREF: _X509_REQ_print_exr
		extrn __imp__X509_REQ_set_pubkey:dword ; DATA XREF: _X509_REQ_set_pubkeyr
		extrn __imp__X509_REQ_set_subject_name:dword
					; DATA XREF: _X509_REQ_set_subject_namer
		extrn __imp__X509_REQ_set_version:dword	; DATA XREF: _X509_REQ_set_versionr
		extrn __imp__X509_REQ_sign_ctx:dword ; DATA XREF: _X509_REQ_sign_ctxr
		extrn __imp__X509_REQ_verify:dword ; DATA XREF:	_X509_REQ_verifyr
		extrn __imp__X509_REVOKED_add1_ext_i2d:dword
					; DATA XREF: _X509_REVOKED_add1_ext_i2dr
		extrn __imp__X509_REVOKED_new:dword ; DATA XREF: _X509_REVOKED_newr
		extrn __imp__X509_REVOKED_set_revocationDate:dword
					; DATA XREF: _X509_REVOKED_set_revocationDater
		extrn __imp__X509_REVOKED_set_serialNumber:dword
					; DATA XREF: _X509_REVOKED_set_serialNumberr
		extrn __imp__X509_SIG_free:dword ; DATA	XREF: _X509_SIG_freer
		extrn __imp__X509_STORE_CTX_cleanup:dword
					; DATA XREF: _X509_STORE_CTX_cleanupr
		extrn __imp__X509_STORE_CTX_free:dword ; DATA XREF: _X509_STORE_CTX_freer
		extrn __imp__X509_STORE_CTX_get0_parent_ctx:dword
					; DATA XREF: _X509_STORE_CTX_get0_parent_ctxr
		extrn __imp__X509_STORE_CTX_get0_policy_tree:dword
					; DATA XREF: _X509_STORE_CTX_get0_policy_treer
		extrn __imp__X509_STORE_CTX_get1_chain:dword
					; DATA XREF: _X509_STORE_CTX_get1_chainr
		extrn __imp__X509_STORE_CTX_get_current_cert:dword
					; DATA XREF: _X509_STORE_CTX_get_current_certr
		extrn __imp__X509_STORE_CTX_get_error:dword
					; DATA XREF: _X509_STORE_CTX_get_errorr
		extrn __imp__X509_STORE_CTX_get_error_depth:dword
					; DATA XREF: _X509_STORE_CTX_get_error_depthr
		extrn __imp__X509_STORE_CTX_get_explicit_policy:dword
					; DATA XREF: _X509_STORE_CTX_get_explicit_policyr
		extrn __imp__X509_STORE_CTX_init:dword ; DATA XREF: _X509_STORE_CTX_initr
		extrn __imp__X509_STORE_CTX_new:dword ;	DATA XREF: _X509_STORE_CTX_newr
		extrn __imp__X509_STORE_CTX_set0_crls:dword
					; DATA XREF: _X509_STORE_CTX_set0_crlsr
		extrn __imp__X509_STORE_CTX_set_cert:dword
					; DATA XREF: _X509_STORE_CTX_set_certr
		extrn __imp__X509_STORE_CTX_set_flags:dword
					; DATA XREF: _X509_STORE_CTX_set_flagsr
		extrn __imp__X509_STORE_CTX_trusted_stack:dword
					; DATA XREF: _X509_STORE_CTX_trusted_stackr
		extrn __imp__X509_STORE_add_lookup:dword
					; DATA XREF: _X509_STORE_add_lookupr
		extrn __imp__X509_STORE_free:dword ; DATA XREF:	_X509_STORE_freer
		extrn __imp__X509_STORE_get_by_subject:dword
					; DATA XREF: _X509_STORE_get_by_subjectr
		extrn __imp__X509_STORE_load_locations:dword
					; DATA XREF: _X509_STORE_load_locationsr
		extrn __imp__X509_STORE_new:dword ; DATA XREF: _X509_STORE_newr
		extrn __imp__X509_STORE_set1_param:dword
					; DATA XREF: _X509_STORE_set1_paramr
		extrn __imp__X509_STORE_set_default_paths:dword
					; DATA XREF: _X509_STORE_set_default_pathsr
		extrn __imp__X509_STORE_set_flags:dword	; DATA XREF: _X509_STORE_set_flagsr
		extrn __imp__X509_STORE_set_verify_cb:dword
					; DATA XREF: _X509_STORE_set_verify_cbr
		extrn __imp__X509_VERIFY_PARAM_add0_policy:dword
					; DATA XREF: _X509_VERIFY_PARAM_add0_policyr
		extrn __imp__X509_VERIFY_PARAM_free:dword
					; DATA XREF: _X509_VERIFY_PARAM_freer
		extrn __imp__X509_VERIFY_PARAM_new:dword
					; DATA XREF: _X509_VERIFY_PARAM_newr
		extrn __imp__X509_VERIFY_PARAM_set_depth:dword
					; DATA XREF: _X509_VERIFY_PARAM_set_depthr
		extrn __imp__X509_VERIFY_PARAM_set_flags:dword
					; DATA XREF: _X509_VERIFY_PARAM_set_flagsr
		extrn __imp__X509_VERIFY_PARAM_set_purpose:dword
					; DATA XREF: _X509_VERIFY_PARAM_set_purposer
		extrn __imp__X509_VERIFY_PARAM_set_time:dword
					; DATA XREF: _X509_VERIFY_PARAM_set_timer
		extrn __imp__X509_add1_reject_object:dword
					; DATA XREF: _X509_add1_reject_objectr
		extrn __imp__X509_add1_trust_object:dword
					; DATA XREF: _X509_add1_trust_objectr
		extrn __imp__X509_add_ext:dword	; DATA XREF: _X509_add_extr
		extrn __imp__X509_alias_get0:dword ; DATA XREF:	_X509_alias_get0r
		extrn __imp__X509_alias_set1:dword ; DATA XREF:	_X509_alias_set1r
		extrn __imp__X509_check_private_key:dword
					; DATA XREF: _X509_check_private_keyr
		extrn __imp__X509_check_purpose:dword ;	DATA XREF: _X509_check_purposer
		extrn __imp__X509_cmp_time:dword ; DATA	XREF: _X509_cmp_timer
		extrn __imp__X509_delete_ext:dword ; DATA XREF:	_X509_delete_extr
		extrn __imp__X509_digest:dword ; DATA XREF: _X509_digestr
		extrn __imp__X509_email_free:dword ; DATA XREF:	_X509_email_freer
		extrn __imp__X509_free:dword ; DATA XREF: _X509_freer
		extrn __imp__X509_get0_pubkey_bitstr:dword
					; DATA XREF: _X509_get0_pubkey_bitstrr
		extrn __imp__X509_get1_email:dword ; DATA XREF:	_X509_get1_emailr
		extrn __imp__X509_get1_ocsp:dword ; DATA XREF: _X509_get1_ocspr
		extrn __imp__X509_get_default_cert_area:dword
					; DATA XREF: _X509_get_default_cert_arear
		extrn __imp__X509_get_ext:dword	; DATA XREF: _X509_get_extr
		extrn __imp__X509_get_ext_by_OBJ:dword ; DATA XREF: _X509_get_ext_by_OBJr
		extrn __imp__X509_get_ext_count:dword ;	DATA XREF: _X509_get_ext_countr
		extrn __imp__X509_get_issuer_name:dword	; DATA XREF: _X509_get_issuer_namer
		extrn __imp__X509_get_pubkey:dword ; DATA XREF:	_X509_get_pubkeyr
		extrn __imp__X509_get_serialNumber:dword
					; DATA XREF: _X509_get_serialNumberr
		extrn __imp__X509_get_subject_name:dword
					; DATA XREF: _X509_get_subject_namer
		extrn __imp__X509_gmtime_adj:dword ; DATA XREF:	_X509_gmtime_adjr
		extrn __imp__X509_issuer_name_hash:dword
					; DATA XREF: _X509_issuer_name_hashr
		extrn __imp__X509_issuer_name_hash_old:dword
					; DATA XREF: _X509_issuer_name_hash_oldr
		extrn __imp__X509_keyid_set1:dword ; DATA XREF:	_X509_keyid_set1r
		extrn __imp__X509_new:dword ; DATA XREF: _X509_newr
		extrn __imp__X509_ocspid_print:dword ; DATA XREF: _X509_ocspid_printr
		extrn __imp__X509_policy_tree_get0_policies:dword
					; DATA XREF: _X509_policy_tree_get0_policiesr
		extrn __imp__X509_policy_tree_get0_user_policies:dword
					; DATA XREF: _X509_policy_tree_get0_user_policiesr
		extrn __imp__X509_print:dword ;	DATA XREF: _X509_printr
		extrn __imp__X509_print_ex:dword ; DATA	XREF: _X509_print_exr
		extrn __imp__X509_reject_clear:dword ; DATA XREF: _X509_reject_clearr
		extrn __imp__X509_set_issuer_name:dword	; DATA XREF: _X509_set_issuer_namer
		extrn __imp__X509_set_pubkey:dword ; DATA XREF:	_X509_set_pubkeyr
		extrn __imp__X509_set_serialNumber:dword
					; DATA XREF: _X509_set_serialNumberr
		extrn __imp__X509_set_subject_name:dword
					; DATA XREF: _X509_set_subject_namer
		extrn __imp__X509_set_version:dword ; DATA XREF: _X509_set_versionr
		extrn __imp__X509_sign:dword ; DATA XREF: _X509_signr
		extrn __imp__X509_sign_ctx:dword ; DATA	XREF: _X509_sign_ctxr
		extrn __imp__X509_subject_name_hash:dword
					; DATA XREF: _X509_subject_name_hashr
		extrn __imp__X509_subject_name_hash_old:dword
					; DATA XREF: _X509_subject_name_hash_oldr
		extrn __imp__X509_time_adj_ex:dword ; DATA XREF: _X509_time_adj_exr
		extrn __imp__X509_to_X509_REQ:dword ; DATA XREF: _X509_to_X509_REQr
		extrn __imp__X509_trust_clear:dword ; DATA XREF: _X509_trust_clearr
		extrn __imp__X509_verify:dword ; DATA XREF: _X509_verifyr
		extrn __imp__X509_verify_cert:dword ; DATA XREF: _X509_verify_certr
		extrn __imp__X509_verify_cert_error_string:dword
					; DATA XREF: _X509_verify_cert_error_stringr
		extrn __imp__a2i_ASN1_INTEGER:dword ; DATA XREF: _a2i_ASN1_INTEGERr
		extrn __imp__a2i_GENERAL_NAME:dword ; DATA XREF: _a2i_GENERAL_NAMEr
		extrn __imp__b2i_PVK_bio:dword ; DATA XREF: _b2i_PVK_bior
		extrn __imp__b2i_PrivateKey_bio:dword ;	DATA XREF: _b2i_PrivateKey_bior
		extrn __imp__b2i_PublicKey_bio:dword ; DATA XREF: _b2i_PublicKey_bior
		extrn __imp__d2i_ASN1_TYPE:dword ; DATA	XREF: _d2i_ASN1_TYPEr
		extrn __imp__d2i_CMS_bio:dword ; DATA XREF: _d2i_CMS_bior
		extrn __imp__d2i_DHparams:dword	; DATA XREF: _d2i_DHparamsr
		extrn __imp__d2i_DSAparams:dword ; DATA	XREF: _d2i_DSAparamsr
		extrn __imp__d2i_ECPKParameters:dword ;	DATA XREF: _d2i_ECPKParametersr
		extrn __imp__d2i_ECPrivateKey_bio:dword	; DATA XREF: _d2i_ECPrivateKey_bior
		extrn __imp__d2i_EC_PUBKEY_bio:dword ; DATA XREF: _d2i_EC_PUBKEY_bior
		extrn __imp__d2i_OCSP_REQUEST:dword ; DATA XREF: _d2i_OCSP_REQUESTr
		extrn __imp__d2i_OCSP_RESPONSE:dword ; DATA XREF: _d2i_OCSP_RESPONSEr
		extrn __imp__d2i_PBEPARAM:dword	; DATA XREF: _d2i_PBEPARAMr
		extrn __imp__d2i_PKCS12_bio:dword ; DATA XREF: _d2i_PKCS12_bior
		extrn __imp__d2i_PKCS7_bio:dword ; DATA	XREF: _d2i_PKCS7_bior
		extrn __imp__d2i_PKCS8_PRIV_KEY_INFO_bio:dword
					; DATA XREF: _d2i_PKCS8_PRIV_KEY_INFO_bior
		extrn __imp__d2i_PKCS8_bio:dword ; DATA	XREF: _d2i_PKCS8_bior
		extrn __imp__d2i_PUBKEY_bio:dword ; DATA XREF: _d2i_PUBKEY_bior
		extrn __imp__d2i_PrivateKey_bio:dword ;	DATA XREF: _d2i_PrivateKey_bior
		extrn __imp__d2i_RSAPrivateKey:dword ; DATA XREF: _d2i_RSAPrivateKeyr
		extrn __imp__d2i_RSAPublicKey_bio:dword	; DATA XREF: _d2i_RSAPublicKey_bior
		extrn __imp__d2i_RSA_NET:dword ; DATA XREF: _d2i_RSA_NETr
		extrn __imp__d2i_TS_REQ_bio:dword ; DATA XREF: _d2i_TS_REQ_bior
		extrn __imp__d2i_TS_RESP_bio:dword ; DATA XREF:	_d2i_TS_RESP_bior
		extrn __imp__d2i_X509_CRL_bio:dword ; DATA XREF: _d2i_X509_CRL_bior
		extrn __imp__d2i_X509_REQ_bio:dword ; DATA XREF: _d2i_X509_REQ_bior
		extrn __imp__d2i_X509_bio:dword	; DATA XREF: _d2i_X509_bior
		extrn __imp__i2a_ASN1_INTEGER:dword ; DATA XREF: _i2a_ASN1_INTEGERr
		extrn __imp__i2a_ASN1_OBJECT:dword ; DATA XREF:	_i2a_ASN1_OBJECTr
		extrn __imp__i2b_PVK_bio:dword ; DATA XREF: _i2b_PVK_bior
		extrn __imp__i2b_PrivateKey_bio:dword ;	DATA XREF: _i2b_PrivateKey_bior
		extrn __imp__i2b_PublicKey_bio:dword ; DATA XREF: _i2b_PublicKey_bior
		extrn __imp__i2d_ASN1_TYPE:dword ; DATA	XREF: _i2d_ASN1_TYPEr
		extrn __imp__i2d_CMS_bio_stream:dword ;	DATA XREF: _i2d_CMS_bio_streamr
		extrn __imp__i2d_DHparams:dword	; DATA XREF: _i2d_DHparamsr
		extrn __imp__i2d_DSAPrivateKey_bio:dword
					; DATA XREF: _i2d_DSAPrivateKey_bior
		extrn __imp__i2d_DSA_PUBKEY_bio:dword ;	DATA XREF: _i2d_DSA_PUBKEY_bior
		extrn __imp__i2d_DSAparams:dword ; DATA	XREF: _i2d_DSAparamsr
		extrn __imp__i2d_ECPKParameters:dword ;	DATA XREF: _i2d_ECPKParametersr
		extrn __imp__i2d_ECPrivateKey_bio:dword	; DATA XREF: _i2d_ECPrivateKey_bior
		extrn __imp__i2d_EC_PUBKEY_bio:dword ; DATA XREF: _i2d_EC_PUBKEY_bior
		extrn __imp__i2d_OCSP_REQUEST:dword ; DATA XREF: _i2d_OCSP_REQUESTr
		extrn __imp__i2d_OCSP_RESPONSE:dword ; DATA XREF: _i2d_OCSP_RESPONSEr
		extrn __imp__i2d_PKCS12_bio:dword ; DATA XREF: _i2d_PKCS12_bior
		extrn __imp__i2d_PKCS7_bio:dword ; DATA	XREF: _i2d_PKCS7_bior
		extrn __imp__i2d_PKCS7_bio_stream:dword	; DATA XREF: _i2d_PKCS7_bio_streamr
		extrn __imp__i2d_PKCS8_PRIV_KEY_INFO_bio:dword
					; DATA XREF: _i2d_PKCS8_PRIV_KEY_INFO_bior
		extrn __imp__i2d_PKCS8_bio:dword ; DATA	XREF: _i2d_PKCS8_bior
		extrn __imp__i2d_PUBKEY_bio:dword ; DATA XREF: _i2d_PUBKEY_bior
		extrn __imp__i2d_PrivateKey_bio:dword ;	DATA XREF: _i2d_PrivateKey_bior
		extrn __imp__i2d_RSAPrivateKey_bio:dword
					; DATA XREF: _i2d_RSAPrivateKey_bior
		extrn __imp__i2d_RSAPublicKey_bio:dword	; DATA XREF: _i2d_RSAPublicKey_bior
		extrn __imp__i2d_RSA_NET:dword ; DATA XREF: _i2d_RSA_NETr
		extrn __imp__i2d_RSA_PUBKEY_bio:dword ;	DATA XREF: _i2d_RSA_PUBKEY_bior
		extrn __imp__i2d_TS_REQ_bio:dword ; DATA XREF: _i2d_TS_REQ_bior
		extrn __imp__i2d_TS_RESP_bio:dword ; DATA XREF:	_i2d_TS_RESP_bior
		extrn __imp__i2d_X509:dword ; DATA XREF: _i2d_X509r
		extrn __imp__i2d_X509_CRL_bio:dword ; DATA XREF: _i2d_X509_CRL_bior
		extrn __imp__i2d_X509_NAME:dword ; DATA	XREF: _i2d_X509_NAMEr
		extrn __imp__i2d_X509_PUBKEY:dword ; DATA XREF:	_i2d_X509_PUBKEYr
		extrn __imp__i2d_X509_REQ_bio:dword ; DATA XREF: _i2d_X509_REQ_bior
		extrn __imp__i2d_X509_bio:dword	; DATA XREF: _i2d_X509_bior
		extrn __imp__idea_cbc_encrypt:dword ; DATA XREF: _idea_cbc_encryptr
		extrn __imp__idea_options:dword	; DATA XREF: _idea_optionsr
		extrn __imp__idea_set_encrypt_key:dword	; DATA XREF: _idea_set_encrypt_keyr
		extrn __imp__lh_free:dword ; DATA XREF:	_lh_freer
		extrn __imp__lh_insert:dword ; DATA XREF: _lh_insertr
		extrn __imp__lh_new:dword ; DATA XREF: _lh_newr
		extrn __imp__lh_node_stats_bio:dword ; DATA XREF: _lh_node_stats_bior
		extrn __imp__lh_node_usage_stats_bio:dword
					; DATA XREF: _lh_node_usage_stats_bior
		extrn __imp__lh_retrieve:dword ; DATA XREF: _lh_retriever
		extrn __imp__lh_stats_bio:dword	; DATA XREF: _lh_stats_bior
		extrn __imp__lh_strhash:dword ;	DATA XREF: _lh_strhashr
		extrn __imp__s2i_ASN1_INTEGER:dword ; DATA XREF: _s2i_ASN1_INTEGERr
		extrn __imp__sk_delete:dword ; DATA XREF: _sk_deleter
		extrn __imp__sk_free:dword ; DATA XREF:	_sk_freer
		extrn __imp__sk_new_null:dword ; DATA XREF: _sk_new_nullr
		extrn __imp__sk_num:dword ; DATA XREF: _sk_numr
		extrn __imp__sk_pop_free:dword ; DATA XREF: _sk_pop_freer
		extrn __imp__sk_push:dword ; DATA XREF:	_sk_pushr
		extrn __imp__sk_shift:dword ; DATA XREF: _sk_shiftr
		extrn __imp__sk_value:dword ; DATA XREF: _sk_valuer
		extrn __imp__string_to_hex:dword ; DATA	XREF: _string_to_hexr

;
; Imports from SSLEAY32.dll
;
		extrn __imp__BIO_f_ssl:dword ; DATA XREF: _BIO_f_sslr
		extrn __imp__BIO_new_ssl:dword ; DATA XREF: _BIO_new_sslr
		extrn __imp__DTLSv1_client_method:dword	; DATA XREF: _DTLSv1_client_methodr
		extrn __imp__DTLSv1_server_method:dword	; DATA XREF: _DTLSv1_server_methodr
		extrn __imp__PEM_read_bio_SSL_SESSION:dword
					; DATA XREF: _PEM_read_bio_SSL_SESSIONr
		extrn __imp__PEM_write_bio_SSL_SESSION:dword
					; DATA XREF: _PEM_write_bio_SSL_SESSIONr
		extrn __imp__SSL_CIPHER_description:dword
					; DATA XREF: _SSL_CIPHER_descriptionr
		extrn __imp__SSL_CIPHER_get_id:dword ; DATA XREF: _SSL_CIPHER_get_idr
		extrn __imp__SSL_CIPHER_get_name:dword ; DATA XREF: _SSL_CIPHER_get_namer
		extrn __imp__SSL_CIPHER_get_version:dword
					; DATA XREF: _SSL_CIPHER_get_versionr
		extrn __imp__SSL_COMP_get_name:dword ; DATA XREF: _SSL_COMP_get_namer
		extrn __imp__SSL_CTX_callback_ctrl:dword
					; DATA XREF: _SSL_CTX_callback_ctrlr
		extrn __imp__SSL_CTX_check_private_key:dword
					; DATA XREF: _SSL_CTX_check_private_keyr
		extrn __imp__SSL_CTX_ctrl:dword	; DATA XREF: _SSL_CTX_ctrlr
		extrn __imp__SSL_CTX_free:dword	; DATA XREF: _SSL_CTX_freer
		extrn __imp__SSL_CTX_get_cert_store:dword
					; DATA XREF: _SSL_CTX_get_cert_storer
		extrn __imp__SSL_CTX_load_verify_locations:dword
					; DATA XREF: _SSL_CTX_load_verify_locationsr
		extrn __imp__SSL_CTX_new:dword ; DATA XREF: _SSL_CTX_newr
		extrn __imp__SSL_CTX_set1_param:dword ;	DATA XREF: _SSL_CTX_set1_paramr
		extrn __imp__SSL_CTX_set_cipher_list:dword
					; DATA XREF: _SSL_CTX_set_cipher_listr
		extrn __imp__SSL_CTX_set_client_CA_list:dword
					; DATA XREF: _SSL_CTX_set_client_CA_listr
		extrn __imp__SSL_CTX_set_client_cert_engine:dword
					; DATA XREF: _SSL_CTX_set_client_cert_enginer
		extrn __imp__SSL_CTX_set_cookie_generate_cb:dword
					; DATA XREF: _SSL_CTX_set_cookie_generate_cbr
		extrn __imp__SSL_CTX_set_cookie_verify_cb:dword
					; DATA XREF: _SSL_CTX_set_cookie_verify_cbr
		extrn __imp__SSL_CTX_set_default_verify_paths:dword
					; DATA XREF: _SSL_CTX_set_default_verify_pathsr
		extrn __imp__SSL_CTX_set_generate_session_id:dword
					; DATA XREF: _SSL_CTX_set_generate_session_idr
		extrn __imp__SSL_CTX_set_info_callback:dword
					; DATA XREF: _SSL_CTX_set_info_callbackr
		extrn __imp__SSL_CTX_set_next_proto_select_cb:dword
					; DATA XREF: _SSL_CTX_set_next_proto_select_cbr
		extrn __imp__SSL_CTX_set_next_protos_advertised_cb:dword
					; DATA XREF: _SSL_CTX_set_next_protos_advertised_cbr
		extrn __imp__SSL_CTX_set_psk_client_callback:dword
					; DATA XREF: _SSL_CTX_set_psk_client_callbackr
		extrn __imp__SSL_CTX_set_psk_server_callback:dword
					; DATA XREF: _SSL_CTX_set_psk_server_callbackr
		extrn __imp__SSL_CTX_set_quiet_shutdown:dword
					; DATA XREF: _SSL_CTX_set_quiet_shutdownr
		extrn __imp__SSL_CTX_set_session_id_context:dword
					; DATA XREF: _SSL_CTX_set_session_id_contextr
		extrn __imp__SSL_CTX_set_srp_cb_arg:dword
					; DATA XREF: _SSL_CTX_set_srp_cb_argr
		extrn __imp__SSL_CTX_set_srp_client_pwd_callback:dword
					; DATA XREF: _SSL_CTX_set_srp_client_pwd_callbackr
		extrn __imp__SSL_CTX_set_srp_strength:dword
					; DATA XREF: _SSL_CTX_set_srp_strengthr
		extrn __imp__SSL_CTX_set_srp_username:dword
					; DATA XREF: _SSL_CTX_set_srp_usernamer
		extrn __imp__SSL_CTX_set_srp_username_callback:dword
					; DATA XREF: _SSL_CTX_set_srp_username_callbackr
		extrn __imp__SSL_CTX_set_srp_verify_param_callback:dword
					; DATA XREF: _SSL_CTX_set_srp_verify_param_callbackr
		extrn __imp__SSL_CTX_set_tlsext_use_srtp:dword
					; DATA XREF: _SSL_CTX_set_tlsext_use_srtpr
		extrn __imp__SSL_CTX_set_tmp_rsa_callback:dword
					; DATA XREF: _SSL_CTX_set_tmp_rsa_callbackr
		extrn __imp__SSL_CTX_set_verify:dword ;	DATA XREF: _SSL_CTX_set_verifyr
		extrn __imp__SSL_CTX_use_PrivateKey:dword
					; DATA XREF: _SSL_CTX_use_PrivateKeyr
		extrn __imp__SSL_CTX_use_PrivateKey_file:dword
					; DATA XREF: _SSL_CTX_use_PrivateKey_filer
		extrn __imp__SSL_CTX_use_certificate:dword
					; DATA XREF: _SSL_CTX_use_certificater
		extrn __imp__SSL_CTX_use_certificate_file:dword
					; DATA XREF: _SSL_CTX_use_certificate_filer
		extrn __imp__SSL_CTX_use_psk_identity_hint:dword
					; DATA XREF: _SSL_CTX_use_psk_identity_hintr
		extrn __imp__SSL_SESSION_free:dword ; DATA XREF: _SSL_SESSION_freer
		extrn __imp__SSL_SESSION_get0_peer:dword
					; DATA XREF: _SSL_SESSION_get0_peerr
		extrn __imp__SSL_SESSION_new:dword ; DATA XREF:	_SSL_SESSION_newr
		extrn __imp__SSL_SESSION_print:dword ; DATA XREF: _SSL_SESSION_printr
		extrn __imp__SSL_SESSION_set1_id_context:dword
					; DATA XREF: _SSL_SESSION_set1_id_contextr
		extrn __imp__SSL_accept:dword ;	DATA XREF: _SSL_acceptr
		extrn __imp__SSL_alert_desc_string_long:dword
					; DATA XREF: _SSL_alert_desc_string_longr
		extrn __imp__SSL_alert_type_string_long:dword
					; DATA XREF: _SSL_alert_type_string_longr
		extrn __imp__SSL_cache_hit:dword ; DATA	XREF: _SSL_cache_hitr
		extrn __imp__SSL_callback_ctrl:dword ; DATA XREF: _SSL_callback_ctrlr
		extrn __imp__SSL_clear:dword ; DATA XREF: _SSL_clearr
		extrn __imp__SSL_connect:dword ; DATA XREF: _SSL_connectr
		extrn __imp__SSL_ctrl:dword ; DATA XREF: _SSL_ctrlr
		extrn __imp__SSL_do_handshake:dword ; DATA XREF: _SSL_do_handshaker
		extrn __imp__SSL_export_keying_material:dword
					; DATA XREF: _SSL_export_keying_materialr
		extrn __imp__SSL_free:dword ; DATA XREF: _SSL_freer
		extrn __imp__SSL_get0_next_proto_negotiated:dword
					; DATA XREF: _SSL_get0_next_proto_negotiatedr
		extrn __imp__SSL_get_SSL_CTX:dword ; DATA XREF:	_SSL_get_SSL_CTXr
		extrn __imp__SSL_get_certificate:dword ; DATA XREF: _SSL_get_certificater
		extrn __imp__SSL_get_cipher_list:dword ; DATA XREF: _SSL_get_cipher_listr
		extrn __imp__SSL_get_ciphers:dword ; DATA XREF:	_SSL_get_ciphersr
		extrn __imp__SSL_get_client_CA_list:dword
					; DATA XREF: _SSL_get_client_CA_listr
		extrn __imp__SSL_get_current_cipher:dword
					; DATA XREF: _SSL_get_current_cipherr
		extrn __imp__SSL_get_current_compression:dword
					; DATA XREF: _SSL_get_current_compressionr
		extrn __imp__SSL_get_current_expansion:dword
					; DATA XREF: _SSL_get_current_expansionr
		extrn __imp__SSL_get_error:dword ; DATA	XREF: _SSL_get_errorr
		extrn __imp__SSL_get_fd:dword ;	DATA XREF: _SSL_get_fdr
		extrn __imp__SSL_get_peer_cert_chain:dword
					; DATA XREF: _SSL_get_peer_cert_chainr
		extrn __imp__SSL_get_peer_certificate:dword
					; DATA XREF: _SSL_get_peer_certificater
		extrn __imp__SSL_get_rbio:dword	; DATA XREF: _SSL_get_rbior
		extrn __imp__SSL_get_selected_srtp_profile:dword
					; DATA XREF: _SSL_get_selected_srtp_profiler
		extrn __imp__SSL_get_servername:dword ;	DATA XREF: _SSL_get_servernamer
		extrn __imp__SSL_get_servername_type:dword
					; DATA XREF: _SSL_get_servername_typer
		extrn __imp__SSL_get_session:dword ; DATA XREF:	_SSL_get_sessionr
		extrn __imp__SSL_get_shared_ciphers:dword
					; DATA XREF: _SSL_get_shared_ciphersr
		extrn __imp__SSL_get_srp_N:dword ; DATA	XREF: _SSL_get_srp_Nr
		extrn __imp__SSL_get_srp_g:dword ; DATA	XREF: _SSL_get_srp_gr
		extrn __imp__SSL_get_srp_username:dword	; DATA XREF: _SSL_get_srp_usernamer
		extrn __imp__SSL_get_verify_result:dword
					; DATA XREF: _SSL_get_verify_resultr
		extrn __imp__SSL_get_wbio:dword	; DATA XREF: _SSL_get_wbior
		extrn __imp__SSL_has_matching_session_id:dword
					; DATA XREF: _SSL_has_matching_session_idr
		extrn __imp__SSL_library_init:dword ; DATA XREF: _SSL_library_initr
		extrn __imp__SSL_load_client_CA_file:dword
					; DATA XREF: _SSL_load_client_CA_filer
		extrn __imp__SSL_load_error_strings:dword
					; DATA XREF: _SSL_load_error_stringsr
		extrn __imp__SSL_new:dword ; DATA XREF:	_SSL_newr
		extrn __imp__SSL_pending:dword ; DATA XREF: _SSL_pendingr
		extrn __imp__SSL_read:dword ; DATA XREF: _SSL_readr
		extrn __imp__SSL_renegotiate:dword ; DATA XREF:	_SSL_renegotiater
		extrn __imp__SSL_select_next_proto:dword
					; DATA XREF: _SSL_select_next_protor
		extrn __imp__SSL_set_SSL_CTX:dword ; DATA XREF:	_SSL_set_SSL_CTXr
		extrn __imp__SSL_set_accept_state:dword	; DATA XREF: _SSL_set_accept_stater
		extrn __imp__SSL_set_bio:dword ; DATA XREF: _SSL_set_bior
		extrn __imp__SSL_set_connect_state:dword
					; DATA XREF: _SSL_set_connect_stater
		extrn __imp__SSL_set_debug:dword ; DATA	XREF: _SSL_set_debugr
		extrn __imp__SSL_set_msg_callback:dword	; DATA XREF: _SSL_set_msg_callbackr
		extrn __imp__SSL_set_session:dword ; DATA XREF:	_SSL_set_sessionr
		extrn __imp__SSL_set_session_id_context:dword
					; DATA XREF: _SSL_set_session_id_contextr
		extrn __imp__SSL_set_shutdown:dword ; DATA XREF: _SSL_set_shutdownr
		extrn __imp__SSL_set_srp_server_param:dword
					; DATA XREF: _SSL_set_srp_server_paramr
		extrn __imp__SSL_set_verify:dword ; DATA XREF: _SSL_set_verifyr
		extrn __imp__SSL_shutdown:dword	; DATA XREF: _SSL_shutdownr
		extrn __imp__SSL_state:dword ; DATA XREF: _SSL_stater
		extrn __imp__SSL_state_string_long:dword
					; DATA XREF: _SSL_state_string_longr
		extrn __imp__SSL_version:dword ; DATA XREF: _SSL_versionr
		extrn __imp__SSL_write:dword ; DATA XREF: _SSL_writer
		extrn __imp__SSLv23_client_method:dword	; DATA XREF: _SSLv23_client_methodr
		extrn __imp__SSLv23_server_method:dword	; DATA XREF: _SSLv23_server_methodr
		extrn __imp__SSLv3_client_method:dword ; DATA XREF: _SSLv3_client_methodr
		extrn __imp__SSLv3_server_method:dword ; DATA XREF: _SSLv3_server_methodr
		extrn __imp__TLSv1_1_client_method:dword
					; DATA XREF: _TLSv1_1_client_methodr
		extrn __imp__TLSv1_1_server_method:dword
					; DATA XREF: _TLSv1_1_server_methodr
		extrn __imp__TLSv1_2_client_method:dword
					; DATA XREF: _TLSv1_2_client_methodr
		extrn __imp__TLSv1_2_server_method:dword
					; DATA XREF: _TLSv1_2_server_methodr
		extrn __imp__TLSv1_client_method:dword ; DATA XREF: _TLSv1_client_methodr
		extrn __imp__TLSv1_server_method:dword ; DATA XREF: _TLSv1_server_methodr
		extrn __imp__d2i_SSL_SESSION:dword ; DATA XREF:	_d2i_SSL_SESSIONr
		extrn __imp__i2d_SSL_SESSION:dword ; DATA XREF:	_i2d_SSL_SESSIONr

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall _CloseHandle_4(HANDLE hObject)
		extrn __imp__CloseHandle@4:dword ; CODE	XREF: _speed_main+944p
					; _speed_main+B64p ...
; HANDLE __stdcall _CreateThread_24(LPSECURITY_ATTRIBUTES lpThreadAttributes, DWORD dwStackSize, LPTHREAD_START_ROUTINE	lpStartAddress,	LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId)
		extrn __imp__CreateThread@24:dword ; CODE XREF:	_speed_main+3FD7p
					; _speed_main+41C2p ...
; void __stdcall _DeleteCriticalSection_4(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__DeleteCriticalSection@4:dword
					; CODE XREF: ___mingw_TLScallback+49p
					; DATA XREF: ___mingw_TLScallback+49r
; BOOL __stdcall _DeleteFileA_4(LPCSTR lpFileName)
		extrn __imp__DeleteFileA@4:dword ; CODE	XREF: _rotate_serial+2B3p
					; _rotate_serial+2F3p ...
; void __stdcall _EnterCriticalSection_4(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__EnterCriticalSection@4:dword
					; CODE XREF: ___report_gsfailure+A0p
					; ____w64_mingwthr_add_key_dtor+4Cp ...
; void __stdcall _ExitProcess_4(UINT uExitCode)
		extrn __imp__ExitProcess@4:dword ; CODE	XREF: _Time_F_part_2+2Bp
					; DATA XREF: _Time_F_part_2+2Br
; BOOL __stdcall _FindClose_4(HANDLE hFindFile)
		extrn __imp__FindClose@4:dword ; CODE XREF: _app_isdir+2Ap
					; DATA XREF: _app_isdir+2Ar
; HANDLE __stdcall _FindFirstFileA_8(LPCSTR lpFileName,	LPWIN32_FIND_DATAA lpFindFileData)
		extrn __imp__FindFirstFileA@8:dword ; CODE XREF: _app_isdir+19p
					; DATA XREF: _app_isdir+19r
; HANDLE __stdcall _GetCurrentProcess_0()
		extrn __imp__GetCurrentProcess@0:dword ; CODE XREF: ___report_gsfailure+68p
					; DATA XREF: ___report_gsfailure+68r
; DWORD	__stdcall _GetCurrentProcessId_0()
		extrn __imp__GetCurrentProcessId@0:dword ; CODE	XREF: _app_tminterval+7Ep
					; ___security_init_cookie+49p
					; DATA XREF: ...
; DWORD	__stdcall _GetCurrentThreadId_0()
		extrn __imp__GetCurrentThreadId@0:dword
					; CODE XREF: ___security_init_cookie+51p
					; DATA XREF: ___security_init_cookie+51r
; DWORD	__stdcall _GetLastError_0()
		extrn __imp__GetLastError@0:dword ; CODE XREF: _rotate_serial+FBp
					; _rotate_serial+19Bp ...
; DWORD	__stdcall _GetModuleFileNameW_12(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
		extrn __imp__GetModuleFileNameW@12:dword ; CODE	XREF: __wassert+67p
					; DATA XREF: __wassert+67r
; HMODULE __stdcall _GetModuleHandleA_4(LPCSTR lpModuleName)
		extrn __imp__GetModuleHandleA@4:dword ;	CODE XREF: ___gcc_register_frame+16p
					; DATA XREF: ___gcc_register_frame+16r
; FARPROC __stdcall _GetProcAddress_8(HMODULE hModule, LPCSTR lpProcName)
		extrn __imp__GetProcAddress@8:dword ; CODE XREF: ___gcc_register_frame+33p
					; DATA XREF: ___gcc_register_frame+33r
; BOOL __stdcall _GetProcessTimes_20(HANDLE hProcess, LPFILETIME lpCreationTime, LPFILETIME lpExitTime,	LPFILETIME lpKernelTime, LPFILETIME lpUserTime)
		extrn __imp__GetProcessTimes@20:dword ;	CODE XREF: _app_tminterval+3Dp
					; DATA XREF: _app_tminterval+3Dr
; void __stdcall _GetStartupInfoA_4(LPSTARTUPINFOA lpStartupInfo)
		extrn __imp__GetStartupInfoA@4:dword ; CODE XREF: ___tmainCRTStartup+2F3p
					; DATA XREF: ___tmainCRTStartup+2F3r
; HANDLE __stdcall _GetStdHandle_4(DWORD nStdHandle)
		extrn __imp__GetStdHandle@4:dword ; CODE XREF: _raw_read_stdin+Dp
					; _raw_write_stdout+Dp
					; DATA XREF: ...
; void __stdcall _GetSystemTime_4(LPSYSTEMTIME lpSystemTime)
		extrn __imp__GetSystemTime@4:dword ; CODE XREF:	_app_tminterval+F6p
					; DATA XREF: _app_tminterval+F6r
; void __stdcall _GetSystemTimeAsFileTime_4(LPFILETIME lpSystemTimeAsFileTime)
		extrn __imp__GetSystemTimeAsFileTime@4:dword
					; CODE XREF: ___security_init_cookie+38p
					; DATA XREF: ___security_init_cookie+38r
; DWORD	__stdcall _GetTickCount_0()
		extrn __imp__GetTickCount@0:dword ; CODE XREF: ___security_init_cookie+5Ap
					; DATA XREF: ___security_init_cookie+5Ar
; DWORD	__stdcall _GetVersion_0()
		extrn __imp__GetVersion@0:dword	; CODE XREF: _app_tminterval:loc_436A10p
					; DATA XREF: _app_tminterval:loc_436A10r
; void __stdcall _InitializeCriticalSection_4(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__InitializeCriticalSection@4:dword
					; CODE XREF: ___mingw_TLScallback+77p
					; DATA XREF: ___mingw_TLScallback+77r
; void __stdcall _LeaveCriticalSection_4(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__LeaveCriticalSection@4:dword
					; CODE XREF: ___report_gsfailure+F0p
					; ____w64_mingwthr_add_key_dtor+6Ap ...
; BOOL __stdcall _MoveFileA_8(LPCSTR lpExistingFileName, LPCSTR	lpNewFileName)
		extrn __imp__MoveFileA@8:dword ; CODE XREF: _rotate_serial+AAp
					; _rotate_index+124p
					; DATA XREF: ...
; HANDLE __stdcall _OpenProcess_12(DWORD dwDesiredAccess, BOOL bInheritHandle, DWORD dwProcessId)
		extrn __imp__OpenProcess@12:dword ; CODE XREF: _app_tminterval+97p
					; DATA XREF: _app_tminterval+97r
; BOOL __stdcall _QueryPerformanceCounter_4(LARGE_INTEGER *lpPerformanceCount)
		extrn __imp__QueryPerformanceCounter@4:dword
					; CODE XREF: ___security_init_cookie+69p
					; DATA XREF: ___security_init_cookie+69r
; BOOL __stdcall _ReadFile_20(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped)
		extrn __imp__ReadFile@20:dword ; CODE XREF: _raw_read_stdin+34p
					; DATA XREF: _raw_read_stdin+34r
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall _SetUnhandledExceptionFilter_4(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn __imp__SetUnhandledExceptionFilter@4:dword
					; CODE XREF: ___tmainCRTStartup+112p
					; ___report_gsfailure+4Fp
					; DATA XREF: ...
; void __stdcall _Sleep_4(DWORD	dwMilliseconds)
		extrn __imp__Sleep@4:dword ; CODE XREF:	___tmainCRTStartup+91p
					; _sleepy@4+18p ...
; BOOL __stdcall _SystemTimeToFileTime_8(const SYSTEMTIME *lpSystemTime, LPFILETIME lpFileTime)
		extrn __imp__SystemTimeToFileTime@8:dword ; CODE XREF: _app_tminterval+107p
					; DATA XREF: _app_tminterval+107r
; BOOL __stdcall _TerminateProcess_8(HANDLE hProcess, UINT uExitCode)
		extrn __imp__TerminateProcess@8:dword ;	CODE XREF: ___report_gsfailure+79p
					; DATA XREF: ___report_gsfailure+79r
; LPVOID __stdcall _TlsGetValue_4(DWORD	dwTlsIndex)
		extrn __imp__TlsGetValue@4:dword ; CODE	XREF: ___report_gsfailure+C5p
					; DATA XREF: ___report_gsfailure+C5r
; LONG __stdcall _UnhandledExceptionFilter_4(struct _EXCEPTION_POINTERS	*ExceptionInfo)
		extrn __imp__UnhandledExceptionFilter@4:dword
					; CODE XREF: ___report_gsfailure+5Fp
					; DATA XREF: ___report_gsfailure+5Fr
; BOOL __stdcall _VirtualProtect_16(LPVOID lpAddress, DWORD dwSize, DWORD flNewProtect,	PDWORD lpflOldProtect)
		extrn __imp__VirtualProtect@16:dword ; CODE XREF: ___report_error+1A7p
					; ___report_error+1E7p	...
; DWORD	__stdcall _VirtualQuery_12(LPCVOID lpAddress, PMEMORY_BASIC_INFORMATION	lpBuffer, DWORD	dwLength)
		extrn __imp__VirtualQuery@12:dword ; CODE XREF:	___report_error+107p
					; ___report_error+13Cp	...
; BOOL __stdcall _WriteFile_20(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped)
		extrn __imp__WriteFile@20:dword	; CODE XREF: _raw_write_stdout+34p
					; DATA XREF: _raw_write_stdout+34r

;
; Imports from msvcrt.dll
;
		extrn __imp____dllonexit:dword ; DATA XREF: ___dllonexitr
		extrn __imp____getmainargs:dword ; DATA	XREF: ___getmainargsr
		extrn __imp____initenv:dword ; DATA XREF: ___tmainCRTStartup+238r
		extrn __imp____lconv_init:dword	; DATA XREF: _my_lconv_initr
		extrn __imp____set_app_type:dword ; DATA XREF: ___set_app_typer
		extrn __imp____setusermatherr:dword ; DATA XREF: ___setusermatherrr
; int __cdecl __access(const char *, int)
		extrn __imp___access:dword ; CODE XREF:	_ca_main+3CFAp
					; DATA XREF: _ca_main+3CFAr
		extrn __imp___acmdln:dword ; DATA XREF:	___tmainCRTStartup+131r
		extrn __imp___amsg_exit:dword ;	DATA XREF: __amsg_exitr
; void __cdecl __cexit()
		extrn __imp___cexit:dword ; DATA XREF: __cexitr
; int __cdecl __close(int)
		extrn __imp___close:dword ; DATA XREF: _OPENSSL_Applink+DFr
		extrn __imp___errno:dword ; CODE XREF: _WIN32_rename_part_3+3p
					; _rotate_serial+131p ...
; void __cdecl __noreturn __exit(int)
		extrn __imp___exit:dword ; DATA	XREF: __exitr
; int __cdecl __fileno(FILE *)
		extrn __imp___fileno:dword ; CODE XREF:	_app_fsetmod+17p
					; DATA XREF: _app_filenor ...
; int __fmode
		extrn __imp___fmode:dword ; DATA XREF: _pre_c_init+6Er
		extrn __imp___initterm:dword ; DATA XREF: __inittermr
; FILE __iob[]
		extrn __imp___iob:dword	; DATA XREF: _lock_dbg_cb+44r
					; _do_cmd+16Cr	...
; int __cdecl __kbhit()
		extrn __imp___kbhit:dword ; CODE XREF: _sv_body+6ADp
					; _sv_body:loc_41F157p	...
		extrn __imp___lock:dword ; DATA	XREF: __lockr
; __int32 __cdecl __lseek(int, __int32,	int)
		extrn __imp___lseek:dword ; DATA XREF: _OPENSSL_Applink+D5r
; _onexit_t __cdecl __onexit(_onexit_t)
		extrn __imp___onexit:dword ; CODE XREF:	_mingw_onexit+A7p
					; DATA XREF: _mingw_onexit+A7r
; int __open(const char	*, int,	...)
		extrn __imp___open:dword ; DATA	XREF: _OPENSSL_Applink+B7r
; int __cdecl __read(int, void *, unsigned int)
		extrn __imp___read:dword ; DATA	XREF: _OPENSSL_Applink+C1r
; int __cdecl __setmode(int, int)
		extrn __imp___setmode:dword ; DATA XREF: _app_fsetmod+25r
; int __snwprintf(wchar_t *, size_t, const wchar_t *, ...)
		extrn __imp___snwprintf:dword ;	DATA XREF: __snwprintfr
		extrn __imp___time32:dword ; DATA XREF:	__time32r
; int __cdecl __stricmp(const char *, const char *)
		extrn __imp___stricmp:dword ; CODE XREF: _ssl_servername_cb+4Cp
					; _set_ext_copy+1Ap ...
		extrn __imp___unlock:dword ; DATA XREF:	__unlockr
; void *__cdecl	_calloc(size_t,	size_t)
		extrn __imp__calloc:dword ; DATA XREF: _callocr
; void __cdecl _clearerr(FILE *)
		extrn __imp__clearerr:dword ; DATA XREF: _clearerrr
; void __cdecl __noreturn _exit(int)
		extrn __imp__exit:dword	; DATA XREF: _exit_0r
; int __cdecl _fclose(FILE *)
		extrn __imp__fclose:dword ; DATA XREF: _fcloser
; int __cdecl _feof(FILE *)
		extrn __imp__feof:dword	; DATA XREF: _feofr
; int __cdecl _ferror(FILE *)
		extrn __imp__ferror:dword ; DATA XREF: _ferrorr
; int __cdecl _fflush(FILE *)
		extrn __imp__fflush:dword ; DATA XREF: _fflushr
; char *__cdecl	_fgets(char *, int, FILE *)
		extrn __imp__fgets:dword ; DATA	XREF: _fgetsr
; FILE *__cdecl	_fopen(const char *, const char	*)
		extrn __imp__fopen:dword ; DATA	XREF: _fopenr
; int _fprintf(FILE *, const char *, ...)
		extrn __imp__fprintf:dword ; DATA XREF:	_fprintfr
; int __cdecl _fputc(int, FILE *)
		extrn __imp__fputc:dword ; DATA	XREF: _fputcr
; int __cdecl _fputs(const char	*, FILE	*)
		extrn __imp__fputs:dword ; DATA	XREF: _fputsr
; size_t __cdecl _fread(void *,	size_t,	size_t,	FILE *)
		extrn __imp__fread:dword ; DATA	XREF: _freadr
; void __cdecl _free(void *)
		extrn __imp__free:dword	; DATA XREF: _freer
; int __cdecl _fseek(FILE *, __int32, int)
		extrn __imp__fseek:dword ; DATA	XREF: _fseekr
; __int32 __cdecl _ftell(FILE *)
		extrn __imp__ftell:dword ; DATA	XREF: _ftellr
; int _fwprintf(FILE *,	const wchar_t *, ...)
		extrn __imp__fwprintf:dword ; DATA XREF: _fwprintfr
; size_t __cdecl _fwrite(const void *, size_t, size_t, FILE *)
		extrn __imp__fwrite:dword ; DATA XREF: _fwriter
; char *__cdecl	_getenv(const char *)
		extrn __imp__getenv:dword ; DATA XREF: _getenvr
; int __cdecl _islower(int)
		extrn __imp__islower:dword ; CODE XREF:	_show_ciphers+17p
					; DATA XREF: _show_ciphers+17r
; int __cdecl _isxdigit(int)
		extrn __imp__isxdigit:dword ; CODE XREF: _s_server_main+2745p
					; _s_client_main+2E52p
					; DATA XREF: ...
; void *__cdecl	_malloc(size_t)
		extrn __imp__malloc:dword ; DATA XREF: _mallocr
; int __cdecl _memcmp(const void *, const void *, size_t)
		extrn __imp__memcmp:dword ; DATA XREF: _memcmpr
; void *__cdecl	_memcpy(void *,	const void *, size_t)
		extrn __imp__memcpy:dword ; DATA XREF: _memcpyr
; void __cdecl _perror(const char *)
		extrn __imp__perror:dword ; DATA XREF: _perrorr
; int _printf(const char *, ...)
		extrn __imp__printf:dword ; DATA XREF: _printfr
; int __cdecl _putchar(int)
		extrn __imp__putchar:dword ; DATA XREF:	_putcharr
; int __cdecl _puts(const char *)
		extrn __imp__puts:dword	; DATA XREF: _putsr
; void __cdecl _qsort(void *, size_t, size_t, int (__cdecl *)(const void *, const void *))
		extrn __imp__qsort:dword ; DATA	XREF: _qsortr
; int __cdecl _raise(int)
		extrn __imp__raise:dword ; DATA	XREF: _raiser
; void *__cdecl	_realloc(void *, size_t)
		extrn __imp__realloc:dword ; DATA XREF:	_reallocr
; int __cdecl _setvbuf(FILE *, char *, int, size_t)
		extrn __imp__setvbuf:dword ; DATA XREF:	_setvbufr
; void (__cdecl	*__cdecl _signal(int, void (__cdecl *)(int)))(int)
		extrn __imp__signal:dword ; DATA XREF: _signalr
; int _sscanf(const char *, const char *, ...)
		extrn __imp__sscanf:dword ; DATA XREF: _sscanfr
; char *__cdecl	_strchr(const char *, int)
		extrn __imp__strchr:dword ; DATA XREF: _strchrr
; int __cdecl _strcmp(const char *, const char *)
		extrn __imp__strcmp:dword ; DATA XREF: _strcmpr
; size_t __cdecl _strlen(const char *)
		extrn __imp__strlen:dword ; DATA XREF: _strlenr
; char *__cdecl	_strncat(char *, const char *, size_t)
		extrn __imp__strncat:dword ; DATA XREF:	_strncatr
; int __cdecl _strncmp(const char *, const char	*, size_t)
		extrn __imp__strncmp:dword ; DATA XREF:	_strncmpr
; size_t __cdecl _strspn(const char *, const char *)
		extrn __imp__strspn:dword ; DATA XREF: _strspnr
; char *__cdecl	_strstr(const char *, const char *)
		extrn __imp__strstr:dword ; DATA XREF: _strstrr
; int __cdecl __write(int, const void *, unsigned int)
		extrn __imp___write:dword ; DATA XREF: _OPENSSL_Applink+CBr
; void __cdecl __noreturn _abort()
		extrn __imp__abort:dword ; DATA	XREF: _abortr
; int __cdecl _atoi(const char *)
		extrn __imp__atoi:dword	; DATA XREF: _atoir
; __int32 __cdecl _atol(const char *)
		extrn __imp__atol:dword	; DATA XREF: _atolr
; int __cdecl _toupper(int)
		extrn __imp__toupper:dword ; CODE XREF:	_ca_main+1329p
					; DATA XREF: _ca_main+131Ar
; int __cdecl _vfprintf(FILE *,	const char *, va_list)
		extrn __imp__vfprintf:dword ; DATA XREF: _vfprintfr
; wchar_t *__cdecl _wcscpy(wchar_t *, const wchar_t *)
		extrn __imp__wcscpy:dword ; DATA XREF: _wcscpyr

;
; Imports from USER32.dll
;
; int __stdcall	_MessageBoxW_16(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
		extrn __imp__MessageBoxW@16:dword ; CODE XREF: __wassert+CDp
					; DATA XREF: __wassert+CDr

;
; Imports from WS2_32.dll
;
; int __stdcall	_WSACancelBlockingCall_0()
		extrn __imp__WSACancelBlockingCall@0:dword
					; CODE XREF: _ssl_sock_cleanup+1Dp
					; DATA XREF: _ssl_sock_cleanup+1Dr
; int __stdcall	_WSACleanup_0()
		extrn __imp__WSACleanup@0:dword	; DATA XREF: _ssl_sock_cleanup+23r
; int __stdcall	_WSAGetLastError_0()
		extrn __imp__WSAGetLastError@0:dword ; CODE XREF: _s_client_main+18BFp
					; _s_client_main+273Ap	...
; int __stdcall	_WSAStartup_8(WORD wVersionRequested, LPWSADATA	lpWSAData)
		extrn __imp__WSAStartup@8:dword	; CODE XREF: _init_client+E0p
					; _init_client+289p ...
; int __stdcall	___WSAFDIsSet_8(SOCKET,	fd_set *)
		extrn __imp____WSAFDIsSet@8:dword ; DATA XREF: ___WSAFDIsSet@8r
; SOCKET __stdcall _accept_12(SOCKET s,	struct sockaddr	*addr, int *addrlen)
		extrn __imp__accept@12:dword ; CODE XREF: _do_server+15Fp
					; DATA XREF: _do_server+15Fr
; int __stdcall	_bind_12(SOCKET	s, const struct	sockaddr *name,	int namelen)
		extrn __imp__bind@12:dword ; CODE XREF:	_do_server+BFp
					; DATA XREF: _do_server+BFr
; int __stdcall	_closesocket_4(SOCKET s)
		extrn __imp__closesocket@4:dword ; CODE	XREF: _sv_body+1082p
					; _sv_body+10D3p ...
; int __stdcall	_connect_12(SOCKET s, const struct sockaddr *name, int namelen)
		extrn __imp__connect@12:dword ;	CODE XREF: _init_client+221p
					; DATA XREF: _init_client+221r
; struct hostent *__stdcall _gethostbyaddr_12(const char *addr,	int len, int type)
		extrn __imp__gethostbyaddr@12:dword ; CODE XREF: _do_server+18Ap
					; DATA XREF: _do_server+18Ar
; struct hostent *__stdcall _gethostbyname_4(const char	*name)
		extrn __imp__gethostbyname@4:dword ; CODE XREF:	_GetHostByName+BCp
					; DATA XREF: _GetHostByName+BCr
; struct servent *__stdcall _getservbyname_8(const char	*name, const char *proto)
		extrn __imp__getservbyname@8:dword ; CODE XREF:	_extract_host_port+15Bp
					; _extract_port+3Bp
					; DATA XREF: ...
; int __stdcall	_getsockname_12(SOCKET s, struct sockaddr *name, int *namelen)
		extrn __imp__getsockname@12:dword ; CODE XREF: _s_client_main+1F1Fp
					; DATA XREF: _s_client_main+1F1Fr
; u_long __stdcall _htonl_4(u_long hostlong)
		extrn __imp__htonl@4:dword ; CODE XREF:	_init_client+1D3p
					; DATA XREF: _init_client+1D3r
; u_short __stdcall _htons_4(u_short hostshort)
		extrn __imp__htons@4:dword ; CODE XREF:	_init_client+19Fp
					; _do_server+31p
					; DATA XREF: ...
; int __stdcall	_listen_8(SOCKET s, int	backlog)
		extrn __imp__listen@8:dword ; CODE XREF: _do_server+41Dp
					; DATA XREF: _do_server+41Dr
; u_short __stdcall _ntohs_4(u_short netshort)
		extrn __imp__ntohs@4:dword ; CODE XREF:	_extract_host_port+178p
					; _extract_port+54p
					; DATA XREF: ...
; int __stdcall	_select_20(int nfds, fd_set *readfds, fd_set *writefds,	fd_set *exceptfds, const struct	timeval	*timeout)
		extrn __imp__select@20:dword ; CODE XREF: _sv_body+694p
					; _s_client_main+183Fp	...
; int __stdcall	_setsockopt_20(SOCKET s, int level, int	optname, const char *optval, int optlen)
		extrn __imp__setsockopt@20:dword ; CODE	XREF: _init_client+372p
					; _do_server+A4p
					; DATA XREF: ...
; int __stdcall	_shutdown_8(SOCKET s, int how)
		extrn __imp__shutdown@8:dword ;	CODE XREF: _sv_body+1073p
					; _sv_body+10C2p ...
; SOCKET __stdcall _socket_12(int af, int type,	int protocol)
		extrn __imp__socket@12:dword ; CODE XREF: _init_client+1FEp
					; _init_client+337p ...


; Section 7. (virtual address 00082000)
; Virtual size			: 00000034 (	 52.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00079A00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 482000h
		public ___crt_xc_start__
; _PVFV	__crt_xc_start__[1]
___crt_xc_start__ dd 0			; DATA XREF: ___tmainCRTStartup+2C5o
		public _mingw_pcppinit
; _PVFV	mingw_pcppinit
_mingw_pcppinit	dd offset _pre_cpp_init
		public ___xc_z
; _PVFV	__xc_z[1]
___xc_z		dd 0			; DATA XREF: ___tmainCRTStartup:loc_40143Do
		public ___crt_xc_end__
; _PVFV	__crt_xc_end__[1]
___crt_xc_end__	dd 0			; DATA XREF: ___tmainCRTStartup+313o
		public _mingw_pcinit
; _PIFV	mingw_pcinit
_mingw_pcinit	dd offset _pre_c_init
		public ___mingw_pinit
; _PIFV	__mingw_pinit
___mingw_pinit	dd offset _my_lconv_init
		public ___xi_z
; _PVFV	__xi_z[1]
___xi_z		dd 0			; DATA XREF: ___tmainCRTStartup+30Bo
		public ___xl_a
; PIMAGE_TLS_CALLBACK __xl_a
___xl_a		dd 0
		public ___xl_c
; PIMAGE_TLS_CALLBACK __xl_c
___xl_c		dd offset ___dyn_tls_init@12 ; DATA XREF: .tls:TlsCallbacks_ptro
		public ___xl_d
; PIMAGE_TLS_CALLBACK __xl_d
___xl_d		dd offset ___dyn_tls_dtor@12
		public ___xl_z
; PIMAGE_TLS_CALLBACK __xl_z
___xl_z		dd 0
		public ___crt_xt_end__
; _PVFV	__crt_xt_end__
___crt_xt_end__	dd 0
; _PVFV	__xd_z
___xd_z		dd 0			; DATA XREF: ___dyn_tls_init@12:loc_450E11o
					; ___dyn_tls_init@12+36o ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 00083000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00079C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 483000h
		public __tls_start
; char *_tls_start
__tls_start	dd 0			; DATA XREF: .tls:__tls_usedo
		public __tls_used
; const	IMAGE_TLS_DIRECTORY _tls_used
__tls_used	dd offset __tls_start
TlsEnd_ptr	dd offset __tls_end
TlsIndex_ptr	dd offset __tls_index
TlsCallbacks_ptr dd offset ___xl_c
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
		public __tls_end
; char *_tls_end
__tls_end	dd 0			; DATA XREF: .tls:TlsEnd_ptro
		public ___tls_end__
___tls_end__	dd 78h dup(0)
		align 1000h
_tls		ends


		end _mainCRTStartup
