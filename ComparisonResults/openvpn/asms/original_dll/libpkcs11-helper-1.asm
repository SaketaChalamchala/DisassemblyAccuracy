;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	A902C136BF900F1A15FA001A6DE5186A
; Input	CRC32 :	7C4EBD4E

; File Name   :	C:\compspace\compare\openvpn\dlls\original\libpkcs11-helper-1.dll
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	645C0000
; Section 1. (virtual address 00001000)
; Virtual size			: 0000F4F4 (  62708.)
; Section size in file		: 0000F600 (  62976.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		include	uni.inc	; see unicode subdir of	ida for	info on	unicode

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 645C1000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; =============== S U B	R O U T	I N E =======================================


sub_645C1000	proc near		; DATA XREF: .CRT:645DB00Co

Size		= dword	ptr -1Ch

		push	ebx
		sub	esp, 18h
		mov	[esp+1Ch+Size],	80h ; Size
		call	_malloc
		mov	[esp+1Ch+Size],	eax
		mov	ebx, eax
		call	sub_645CF440
		test	ebx, ebx
		mov	ds:dword_645D8468, eax
		mov	ds:dword_645D8464, eax
		jz	short loc_645C1035
		mov	dword ptr [ebx], 0
		add	esp, 18h
		xor	eax, eax
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_645C1035:				; CODE XREF: sub_645C1000+26j
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn
sub_645C1000	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C1040	proc near		; CODE XREF: sub_645C1260+7Dp
					; sub_645C1260+104p ...

dwMilliseconds	= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edx, [ebp+arg_4]
		test	edx, edx
		jnz	short loc_645C10B8
		mov	eax, ds:dword_645D8000
		test	eax, eax
		jle	loc_645C1163
		sub	eax, 1
		xor	ebx, ebx
		mov	esi, ds:__imp__Sleep@4 ; Sleep(x)
		mov	ds:dword_645D8000, eax
		jmp	short loc_645C107C
; ---------------------------------------------------------------------------
		align 10h

loc_645C1070:				; CODE XREF: sub_645C1040+4Dj
		mov	[esp+28h+dwMilliseconds], 3E8h ; dwMilliseconds
		call	esi ; Sleep(x)	; Sleep(x)
		sub	esp, 4

loc_645C107C:				; CODE XREF: sub_645C1040+2Dj
		mov	edx, 1
		mov	eax, ebx
		lock cmpxchg ds:dword_645D846C,	edx
		test	eax, eax
		jnz	short loc_645C1070
		mov	eax, ds:dword_645D8470
		cmp	eax, 2
		jz	loc_645C1170
		mov	[esp+28h+dwMilliseconds], 1Fh
		call	__amsg_exit
		mov	eax, 1

loc_645C10AE:				; CODE XREF: sub_645C1040+80j
					; sub_645C1040+125j
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_645C10B8:				; CODE XREF: sub_645C1040+Ej
		cmp	edx, 1
		mov	eax, 1
		jnz	short loc_645C10AE
		mov	eax, large fs:18h
		xor	esi, esi
		mov	ebx, [eax+4]
		mov	edi, ds:__imp__Sleep@4 ; Sleep(x)
		jmp	short loc_645C10E9
; ---------------------------------------------------------------------------

loc_645C10D5:				; CODE XREF: sub_645C1040+B5j
		cmp	eax, ebx
		jz	loc_645C11E5
		mov	[esp+28h+dwMilliseconds], 3E8h ; dwMilliseconds
		call	edi ; Sleep(x)	; Sleep(x)
		sub	esp, 4

loc_645C10E9:				; CODE XREF: sub_645C1040+93j
		mov	eax, esi
		lock cmpxchg ds:dword_645D846C,	ebx
		test	eax, eax
		jnz	short loc_645C10D5
		xor	ebx, ebx

loc_645C10F9:				; CODE XREF: sub_645C1040+1AAj
		mov	eax, ds:dword_645D8470
		cmp	eax, 1
		jz	loc_645C1223
		mov	eax, ds:dword_645D8470
		test	eax, eax
		jz	loc_645C1200

loc_645C1114:				; CODE XREF: sub_645C1040+1DEj
					; sub_645C1040+1EFj
		mov	eax, ds:dword_645D8470
		cmp	eax, 1
		jz	loc_645C1234

loc_645C1122:				; CODE XREF: sub_645C1040+212j
		test	ebx, ebx
		jz	loc_645C11F0

loc_645C112A:				; CODE XREF: sub_645C1040+1B6j
		mov	eax, ds:off_645D708C
		test	eax, eax
		jz	short loc_645C114D
		mov	edx, [ebp+arg_8]
		mov	[esp+28h+var_24], 2
		mov	[esp+28h+var_20], edx
		mov	edx, [ebp+arg_0]
		mov	[esp+28h+dwMilliseconds], edx
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_645C114D:				; CODE XREF: sub_645C1040+F1j
		add	ds:dword_645D8000, 1
		mov	eax, 1
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_645C1163:				; CODE XREF: sub_645C1040+17j
		xor	eax, eax
		jmp	loc_645C10AE
; ---------------------------------------------------------------------------
		align 10h

loc_645C1170:				; CODE XREF: sub_645C1040+57j
		mov	eax, ds:dword_645D8468
		mov	[esp+28h+dwMilliseconds], eax
		call	sub_645CF430
		test	eax, eax
		mov	esi, eax
		jz	short loc_645C11C4
		mov	eax, ds:dword_645D8464
		mov	[esp+28h+dwMilliseconds], eax
		call	sub_645CF430
		mov	ebx, eax

loc_645C1192:				; CODE XREF: sub_645C1040+15Dj
		sub	ebx, 4
		cmp	esi, ebx
		ja	short loc_645C11A8

loc_645C1199:				; CODE XREF: sub_645C1040+166j
		mov	edx, [ebx]
		test	edx, edx
		jz	short loc_645C1192
		sub	ebx, 4
		call	edx
		cmp	esi, ebx
		jbe	short loc_645C1199

loc_645C11A8:				; CODE XREF: sub_645C1040+157j
		mov	[esp+28h+dwMilliseconds], esi ;	Memory
		call	_free
		mov	ds:dword_645D8464, 0
		mov	ds:dword_645D8468, 0

loc_645C11C4:				; CODE XREF: sub_645C1040+141j
		xor	eax, eax
		mov	ds:dword_645D8470, 0
		xchg	eax, ds:dword_645D846C
		mov	eax, 1
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	0Ch
; ---------------------------------------------------------------------------

loc_645C11E5:				; CODE XREF: sub_645C1040+97j
		mov	ebx, 1
		jmp	loc_645C10F9
; ---------------------------------------------------------------------------
		align 10h

loc_645C11F0:				; CODE XREF: sub_645C1040+E4j
		xchg	ebx, ds:dword_645D846C
		jmp	loc_645C112A
; ---------------------------------------------------------------------------
		align 10h

loc_645C1200:				; CODE XREF: sub_645C1040+CEj
		mov	[esp+28h+var_24], offset dword_645DB010
		mov	[esp+28h+dwMilliseconds], offset dword_645DB008
		mov	ds:dword_645D8470, 1
		call	__initterm
		jmp	loc_645C1114
; ---------------------------------------------------------------------------

loc_645C1223:				; CODE XREF: sub_645C1040+C1j
		mov	[esp+28h+dwMilliseconds], 1Fh
		call	__amsg_exit
		jmp	loc_645C1114
; ---------------------------------------------------------------------------

loc_645C1234:				; CODE XREF: sub_645C1040+DCj
		mov	[esp+28h+var_24], offset dword_645DB004
		mov	[esp+28h+dwMilliseconds], offset dword_645DB000
		call	__initterm
		mov	ds:dword_645D8470, 2
		jmp	loc_645C1122
sub_645C1040	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C1260	proc near		; CODE XREF: DllEntryPoint+1Ep

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, ecx
		push	esi
		mov	esi, eax
		push	ebx
		mov	ebx, edx
		sub	esp, 1Ch
		test	edx, edx
		mov	dword_645D102C,	edx
		jnz	short loc_645C12C5
		mov	eax, ds:dword_645D8000
		test	eax, eax
		jz	short loc_645C12F0
		call	sub_645CF6F0
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], esi
		call	sub_645D0160
		sub	esp, 0Ch
		mov	edx, eax

loc_645C12A0:				; CODE XREF: sub_645C1260+BCj
					; sub_645C1260+C1j ...
		cmp	ebx, 3
		jz	loc_645C1377

loc_645C12A9:				; CODE XREF: sub_645C1260+111j
		test	ebx, ebx
		jz	loc_645C1377

loc_645C12B1:				; CODE XREF: sub_645C1260+92j
					; sub_645C1260+14Dj ...
		mov	dword_645D102C,	0FFFFFFFFh
		lea	esp, [ebp-0Ch]
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_645C12C5:				; CODE XREF: sub_645C1260+17j
		call	sub_645CF6F0
		lea	eax, [ebx-1]
		cmp	eax, 1
		ja	short loc_645C1305
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	sub_645C1040
		sub	esp, 0Ch
		test	eax, eax
		jnz	loc_645C13B2
		lea	esi, [esi+0]

loc_645C12F0:				; CODE XREF: sub_645C1260+20j
					; sub_645C1260+170j
		xor	edx, edx
		jmp	short loc_645C12B1
; ---------------------------------------------------------------------------

loc_645C12F4:				; CODE XREF: sub_645C1260+167j
		cmp	ebx, 1
		jnz	loc_645C13F8
		lea	esi, [esi+0]
		call	sub_645CFA40

loc_645C1305:				; CODE XREF: sub_645C1260+70j
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	sub_645D0160
		sub	esp, 0Ch
		test	eax, eax
		mov	edx, eax
		jnz	short loc_645C12A0
		cmp	ebx, 1
		jnz	loc_645C12A0
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], esi
		call	sub_645D0160
		sub	esp, 0Ch
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], esi
		call	sub_645D0170
		sub	esp, 0Ch
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], esi
		call	sub_645C1040
		xor	edx, edx
		sub	esp, 0Ch
		cmp	ebx, 3
		jnz	loc_645C12A9

loc_645C1377:				; CODE XREF: sub_645C1260+43j
					; sub_645C1260+4Bj
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	sub_645D0170
		sub	esp, 0Ch
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		mov	[ebp+var_1C], eax
		call	sub_645C1040
		mov	edx, [ebp+var_1C]
		sub	esp, 0Ch
		test	eax, eax
		mov	eax, 0
		cmovz	edx, eax
		jmp	loc_645C12B1
; ---------------------------------------------------------------------------

loc_645C13B2:				; CODE XREF: sub_645C1260+87j
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], esi
		call	sub_645D0170
		sub	esp, 0Ch
		test	eax, eax
		jnz	loc_645C12F4
		cmp	ebx, 1
		jnz	loc_645C12F0
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 0
		mov	[esp+28h+var_28], esi
		mov	[ebp+var_1C], eax
		call	sub_645C1040
		mov	edx, [ebp+var_1C]
		sub	esp, 0Ch
		jmp	loc_645C12B1
; ---------------------------------------------------------------------------

loc_645C13F8:				; CODE XREF: sub_645C1260+97j
		mov	[esp+28h+var_20], edi
		mov	[esp+28h+var_24], 2
		mov	[esp+28h+var_28], esi
		call	sub_645D0160
		sub	esp, 0Ch
		mov	edx, eax
		jmp	loc_645C12A0
sub_645C1260	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; BOOL __stdcall DllEntryPoint(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
		public DllEntryPoint
DllEntryPoint	proc near

var_10		= dword	ptr -10h
hinstDLL	= dword	ptr  4
fdwReason	= dword	ptr  8
lpReserved	= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	edx, [esp+1Ch+fdwReason]
		mov	ds:dword_645D80D0, 0
		cmp	edx, 1
		jz	short loc_645C1450

loc_645C1436:				; CODE XREF: DllEntryPoint+3Dj
		mov	ecx, [esp+1Ch+lpReserved]
		mov	eax, [esp+1Ch+hinstDLL]
		call	sub_645C1260
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_645C1450:				; CODE XREF: DllEntryPoint+14j
		mov	[esp+1Ch+var_10], edx
		call	sub_645CFA60
		mov	edx, [esp+1Ch+var_10]
		jmp	short loc_645C1436
DllEntryPoint	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645C1460	proc near		; CODE XREF: sub_645D04C0+6p

lpModuleName	= dword	ptr -1Ch
lpProcName	= dword	ptr -18h

		mov	eax, dword_645D1040
		test	eax, eax
		jz	short locret_645C14AC
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+1Ch+lpModuleName],	offset ModuleName ; "libgcj-13.dll"
		call	ds:__imp__GetModuleHandleA@4 ; GetModuleHandleA(x)
		mov	edx, 0
		sub	esp, 4
		test	eax, eax
		jz	short loc_645C149E
		mov	[esp+1Ch+lpProcName], offset ProcName ;	"_Jv_RegisterClasses"
		mov	[esp+1Ch+lpModuleName],	eax ; hModule
		call	ds:__imp__GetProcAddress@8 ; GetProcAddress(x,x)
		sub	esp, 8
		mov	edx, eax

loc_645C149E:				; CODE XREF: sub_645C1460+26j
		test	edx, edx
		jz	short locret_645C14AB
		mov	[esp+1Ch+lpModuleName],	offset dword_645D1040
		call	edx

locret_645C14AB:			; CODE XREF: sub_645C1460+40j
		leave

locret_645C14AC:			; CODE XREF: sub_645C1460+7j
		rep retn
sub_645C1460	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645C14B0()
sub_645C14B0	proc near		; DATA XREF: sub_645D04C0+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_645C14B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645C14C0(int,	size_t)
sub_645C14C0	proc near		; CODE XREF: sub_645C15E9+88p
					; sub_645C269D+22p ...

Size		= dword	ptr -28h
Val		= dword	ptr -24h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C14F1
		mov	[esp+28h+var_20], 40h ;	int
		mov	[esp+28h+Val], offset aPkcs11hMem_c ; "pkcs11h-mem.c"
		mov	[esp+28h+Size],	offset aPNull ;	"p!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C14F2
; ---------------------------------------------------------------------------

loc_645C14F1:				; CODE XREF: sub_645C14C0+11j
		nop

loc_645C14F2:				; CODE XREF: sub_645C14C0+2Fj
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C1516
		mov	[esp+28h+var_20], 41h ;	int
		mov	[esp+28h+Val], offset aPkcs11hMem_c ; "pkcs11h-mem.c"
		mov	[esp+28h+Size],	offset aS0 ; "s!=0"
		call	sub_645D02E0
		jmp	short loc_645C1517
; ---------------------------------------------------------------------------

loc_645C1516:				; CODE XREF: sub_645C14C0+36j
		nop

loc_645C1517:				; CODE XREF: sub_645C14C0+54j
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		cmp	[ebp+arg_4], 0
		jz	short loc_645C1566
		mov	eax, off_645D1000
		mov	edx, [ebp+arg_4]
		mov	[esp+28h+Size],	edx ; Size
		call	eax ; _malloc
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C154A
		mov	[ebp+var_C], 2
		jmp	short loc_645C1566
; ---------------------------------------------------------------------------

loc_645C154A:				; CODE XREF: sub_645C14C0+7Fj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [ebp+arg_4]
		mov	[esp+28h+var_20], edx ;	Size
		mov	[esp+28h+Val], 0 ; Val
		mov	[esp+28h+Size],	eax ; Dst
		call	_memset

loc_645C1566:				; CODE XREF: sub_645C14C0+64j
					; sub_645C14C0+88j
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C14C0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C156B	proc near		; CODE XREF: sub_645C266C+25p
					; sub_645C2D74+1B0p ...

Memory		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C1595
		mov	[esp+18h+var_10], 57h ;	int
		mov	[esp+18h+var_14], offset aPkcs11hMem_c ; "pkcs11h-mem.c"
		mov	[esp+18h+Memory], offset aPNull	; "p!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1596
; ---------------------------------------------------------------------------

loc_645C1595:				; CODE XREF: sub_645C156B+Aj
		nop

loc_645C1596:				; CODE XREF: sub_645C156B+28j
		mov	eax, off_645D1004
		mov	edx, [ebp+arg_0]
		mov	edx, [edx]
		mov	[esp+18h+Memory], edx ;	Memory
		call	eax ; _free
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	eax, 0
		leave
		retn
sub_645C156B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645C15B5(int,	char *)
sub_645C15B5	proc near		; CODE XREF: pkcs11h_token_deserializeTokenId+AEp
					; pkcs11h_certificate_deserializeCertificateId+AFp

Str		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+Str], eax ; Str
		call	_strlen
		add	eax, 1
		mov	[esp+18h+var_C], eax ; size_t
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_10], eax ;	void *
		mov	[esp+18h+var_14], 0 ; int
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+Str], eax ; int
		call	sub_645C15E9
		leave
		retn
sub_645C15B5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645C15E9(int,	int, void *, size_t)
sub_645C15E9	proc near		; CODE XREF: sub_645C15B5+2Dp
					; pkcs11h_token_duplicateTokenId+FCp ...

Dst		= dword	ptr -28h
Src		= dword	ptr -24h
Size		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C161A
		mov	[esp+28h+Size],	75h ; int
		mov	[esp+28h+Src], offset aPkcs11hMem_c ; "pkcs11h-mem.c"
		mov	[esp+28h+Dst], offset aDestNull	; "dest!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C161B
; ---------------------------------------------------------------------------

loc_645C161A:				; CODE XREF: sub_645C15E9+11j
		nop

loc_645C161B:				; CODE XREF: sub_645C15E9+2Fj
		cmp	[ebp+arg_C], 0
		jz	short loc_645C1645
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C1645
		mov	[esp+28h+Size],	77h ; int
		mov	[esp+28h+Src], offset aPkcs11hMem_c ; "pkcs11h-mem.c"
		mov	[esp+28h+Dst], offset aMem_size0SrcNu ;	"!(mem_size!=0&&src==NULL)"
		call	sub_645D02E0
		jmp	short loc_645C1646
; ---------------------------------------------------------------------------

loc_645C1645:				; CODE XREF: sub_645C15E9+36j
					; sub_645C15E9+3Cj
		nop

loc_645C1646:				; CODE XREF: sub_645C15E9+5Aj
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		cmp	[ebp+arg_4], 0
		jz	short loc_645C165E
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0

loc_645C165E:				; CODE XREF: sub_645C15E9+6Aj
		cmp	[ebp+arg_8], 0
		jz	short loc_645C16AA
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+Src], eax ; size_t
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Dst], eax ; int
		call	sub_645C14C0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C1681
		jmp	short loc_645C16B1
; ---------------------------------------------------------------------------

loc_645C1681:				; CODE XREF: sub_645C15E9+94j
		cmp	[ebp+arg_4], 0
		jz	short loc_645C168F
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_C]
		mov	[eax], edx

loc_645C168F:				; CODE XREF: sub_645C15E9+9Cj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [ebp+arg_C]
		mov	[esp+28h+Size],	edx ; Size
		mov	edx, [ebp+arg_8]
		mov	[esp+28h+Src], edx ; Src
		mov	[esp+28h+Dst], eax ; Dst
		call	_memmove

loc_645C16AA:				; CODE XREF: sub_645C15E9+79j
		mov	[ebp+var_C], 0

loc_645C16B1:				; CODE XREF: sub_645C15E9+96j
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C15E9	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C16B8	proc near		; CODE XREF: sub_645C3FB4+82p
					; sub_645C3FB4+BDp ...

Time		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+Time],	0 ; Time
		call	_time
		leave
		retn
sub_645C16B8	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C16CC	proc near		; CODE XREF: sub_645C2448+17p
					; DATA XREF: .data:off_645D100Co

dwMilliseconds	= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	edx, 10624DD3h
		mul	edx
		mov	eax, edx
		shr	eax, 6
		mov	[esp+18h+dwMilliseconds], eax ;	dwMilliseconds
		mov	eax, ds:__imp__Sleep@4 ; Sleep(x)
		call	eax ; Sleep(x)	; Sleep(x)
		sub	esp, 4
		leave
		retn
sub_645C16CC	endp

; Exported entry  34. pkcs11h_engine_setSystem

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_engine_setSystem(void *)
		public pkcs11h_engine_setSystem
pkcs11h_engine_setSystem proc near

Dst		= dword	ptr -18h
Src		= dword	ptr -14h
Size		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C171A
		mov	[esp+18h+Size],	66h ; int
		mov	[esp+18h+Src], offset aPkcs11hSys_c ; "pkcs11h-sys.c"
		mov	[esp+18h+Dst], offset aEngineNull ; "engine!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C171B
; ---------------------------------------------------------------------------

loc_645C171A:				; CODE XREF: pkcs11h_engine_setSystem+Aj
		nop

loc_645C171B:				; CODE XREF: pkcs11h_engine_setSystem+28j
		mov	[esp+18h+Size],	14h ; Size
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+Src], eax ; Src
		mov	[esp+18h+Dst], offset off_645D1000 ; Dst
		call	_memmove
		mov	eax, 0
		leave
		retn
pkcs11h_engine_setSystem endp

; ---------------------------------------------------------------------------
		align 10h
; Exported entry  33. pkcs11h_engine_setCrypto

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_engine_setCrypto
pkcs11h_engine_setCrypto proc near	; CODE XREF: pkcs11h_initialize+7Dp

Dst		= dword	ptr -28h
Src		= dword	ptr -24h
Size		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C1763
		mov	[ebp+var_C], offset off_645D21FC
		jmp	short loc_645C17C3
; ---------------------------------------------------------------------------

loc_645C1763:				; CODE XREF: pkcs11h_engine_setCrypto+18j
		cmp	[ebp+arg_0], 0Ah
		jnz	short loc_645C1772
		mov	[ebp+var_C], offset off_645D21FC
		jmp	short loc_645C17C3
; ---------------------------------------------------------------------------

loc_645C1772:				; CODE XREF: pkcs11h_engine_setCrypto+27j
		cmp	[ebp+arg_0], 3
		jnz	short loc_645C1781
		mov	[ebp+var_C], offset off_645D21FC
		jmp	short loc_645C17C3
; ---------------------------------------------------------------------------

loc_645C1781:				; CODE XREF: pkcs11h_engine_setCrypto+36j
		cmp	[ebp+arg_0], 1
		jnz	short loc_645C1790
		mov	[ebp+var_C], offset dword_645D20EC
		jmp	short loc_645C17C3
; ---------------------------------------------------------------------------

loc_645C1790:				; CODE XREF: pkcs11h_engine_setCrypto+45j
		cmp	[ebp+arg_0], 2
		jnz	short loc_645C179F
		mov	[ebp+var_10], 13h
		jmp	short loc_645C17E5
; ---------------------------------------------------------------------------

loc_645C179F:				; CODE XREF: pkcs11h_engine_setCrypto+54j
		cmp	[ebp+arg_0], 4
		jnz	short loc_645C17AE
		mov	[ebp+var_10], 13h
		jmp	short loc_645C17E5
; ---------------------------------------------------------------------------

loc_645C17AE:				; CODE XREF: pkcs11h_engine_setCrypto+63j
		cmp	[ebp+arg_0], 5
		jnz	short loc_645C17BD
		mov	[ebp+var_10], 13h
		jmp	short loc_645C17E5
; ---------------------------------------------------------------------------

loc_645C17BD:				; CODE XREF: pkcs11h_engine_setCrypto+72j
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax

loc_645C17C3:				; CODE XREF: pkcs11h_engine_setCrypto+21j
					; pkcs11h_engine_setCrypto+30j	...
		mov	[esp+28h+Size],	18h ; Size
		mov	eax, [ebp+var_C]
		mov	[esp+28h+Src], eax ; Src
		mov	[esp+28h+Dst], offset dword_645D8004 ; Dst
		call	_memmove
		mov	[ebp+var_10], 0

loc_645C17E5:				; CODE XREF: pkcs11h_engine_setCrypto+5Dj
					; pkcs11h_engine_setCrypto+6Cj	...
		mov	eax, [ebp+var_10]
		leave
		retn
pkcs11h_engine_setCrypto endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C17EC	proc near		; DATA XREF: .rdata:645D20F0o
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	_OpenSSL_add_all_digests
		mov	eax, 1
		leave
		retn
sub_645C17EC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C17FE	proc near		; DATA XREF: .rdata:645D20F4o
		push	ebp
		mov	ebp, esp
		mov	eax, 1
		pop	ebp
		retn
sub_645C17FE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645C1808(int,	int, int, time_t *Time)
sub_645C1808	proc near		; DATA XREF: .rdata:645D20F8o

Dst		= dword	ptr -58h
Val		= dword	ptr -54h
Size		= dword	ptr -50h
Tm		= tm ptr -3Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
Time		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 50h
		mov	[ebp+var_14], 0
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C183B
		mov	[esp+58h+Size],	78h ; int
		mov	[esp+58h+Val], offset a_pkcs11hCrypto ;	"_pkcs11h-crypto-openssl.c"
		mov	[esp+58h+Dst], offset aBlobNull	; "blob!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C183C
; ---------------------------------------------------------------------------

loc_645C183B:				; CODE XREF: sub_645C1808+13j
		nop

loc_645C183C:				; CODE XREF: sub_645C1808+31j
		cmp	[ebp+Time], 0
		jnz	short loc_645C1860
		mov	[esp+58h+Size],	79h ; int
		mov	[esp+58h+Val], offset a_pkcs11hCrypto ;	"_pkcs11h-crypto-openssl.c"
		mov	[esp+58h+Dst], offset aExpirationNull ;	"expiration!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1861
; ---------------------------------------------------------------------------

loc_645C1860:				; CODE XREF: sub_645C1808+38j
		nop

loc_645C1861:				; CODE XREF: sub_645C1808+56j
		mov	eax, [ebp+Time]
		mov	dword ptr [eax], 0
		call	_X509_new
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_14]
		test	eax, eax
		jnz	short loc_645C187E
		jmp	loc_645C1AA8
; ---------------------------------------------------------------------------

loc_645C187E:				; CODE XREF: sub_645C1808+6Fj
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_18], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+58h+Size],	eax
		lea	eax, [ebp+var_18]
		mov	[esp+58h+Val], eax
		lea	eax, [ebp+var_14]
		mov	[esp+58h+Dst], eax
		call	_d2i_X509
		test	eax, eax
		jnz	short loc_645C18A6
		jmp	loc_645C1AA8
; ---------------------------------------------------------------------------

loc_645C18A6:				; CODE XREF: sub_645C1808+97j
		mov	eax, [ebp+var_14]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		mov	eax, [eax]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_14]
		mov	eax, [eax]
		mov	eax, [eax+10h]
		mov	eax, [eax+4]
		mov	[ebp+var_10], eax
		cmp	[ebp+var_C], 0
		jz	loc_645C1AA8
		cmp	[ebp+var_10], 0
		jz	loc_645C1AA8
		mov	eax, [ebp+var_C]
		mov	[esp+58h+Dst], eax
		call	_X509_cmp_current_time
		test	eax, eax
		jg	loc_645C1AA8
		mov	eax, [ebp+var_10]
		mov	[esp+58h+Dst], eax
		call	_X509_cmp_current_time
		test	eax, eax
		js	loc_645C1AA8
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		cmp	eax, 0Bh
		jle	loc_645C1AA8
		mov	[esp+58h+Size],	24h ; Size
		mov	[esp+58h+Val], 0 ; Val
		lea	eax, [ebp+Tm]
		mov	[esp+58h+Dst], eax ; Dst
		call	_memset
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		lea	edx, [eax-30h]
		mov	eax, edx
		shl	eax, 2
		add	eax, edx
		add	eax, eax
		mov	edx, eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 1
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		sub	eax, 30h
		add	eax, edx
		add	eax, 64h
		mov	[ebp+Tm.tm_year], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 2
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		lea	edx, [eax-30h]
		mov	eax, edx
		shl	eax, 2
		add	eax, edx
		add	eax, eax
		mov	edx, eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 3
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		sub	eax, 30h
		add	eax, edx
		sub	eax, 1
		mov	[ebp+Tm.tm_mon], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 4
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		lea	edx, [eax-30h]
		mov	eax, edx
		shl	eax, 2
		add	eax, edx
		add	eax, eax
		mov	edx, eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 5
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		sub	eax, 30h
		add	eax, edx
		mov	[ebp+Tm.tm_mday], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 6
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		lea	edx, [eax-30h]
		mov	eax, edx
		shl	eax, 2
		add	eax, edx
		add	eax, eax
		mov	edx, eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 7
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		sub	eax, 30h
		add	eax, edx
		mov	[ebp+Tm.tm_hour], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 8
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		lea	edx, [eax-30h]
		mov	eax, edx
		shl	eax, 2
		add	eax, edx
		add	eax, eax
		mov	edx, eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 9
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		sub	eax, 30h
		add	eax, edx
		mov	[ebp+Tm.tm_min], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 0Ah
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		lea	edx, [eax-30h]
		mov	eax, edx
		shl	eax, 2
		add	eax, edx
		add	eax, eax
		mov	edx, eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		add	eax, 0Bh
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		sub	eax, 30h
		add	eax, edx
		mov	[ebp+Tm.tm_sec], eax
		lea	eax, [ebp+Tm]
		mov	[esp+58h+Dst], eax ; Tm
		call	_mktime
		mov	edx, [ebp+Time]
		mov	[edx], eax
		mov	eax, [ebp+Time]
		mov	esi, [eax]
		mov	eax, [ebp+Time]
		mov	[esp+58h+Dst], eax ; Time
		call	_localtime
		mov	[esp+58h+Dst], eax ; Tm
		call	_mktime
		mov	ebx, eax
		mov	eax, [ebp+Time]
		mov	[esp+58h+Dst], eax ; Time
		call	_gmtime
		mov	[esp+58h+Dst], eax ; Tm
		call	_mktime
		sub	ebx, eax
		mov	eax, ebx
		lea	edx, [esi+eax]
		mov	eax, [ebp+Time]
		mov	[eax], edx

loc_645C1AA8:				; CODE XREF: sub_645C1808+71j
					; sub_645C1808+99j ...
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_645C1AC1
		mov	eax, [ebp+var_14]
		mov	[esp+58h+Dst], eax
		call	_X509_free
		mov	[ebp+var_14], 0

loc_645C1AC1:				; CODE XREF: sub_645C1808+2A5j
		mov	eax, [ebp+Time]
		mov	eax, [eax]
		test	eax, eax
		setnz	al
		movzx	eax, al
		add	esp, 50h
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_645C1808	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C1AD5	proc near		; DATA XREF: .rdata:645D20FCo

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	[ebp+var_C], 0
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C1B07
		mov	[esp+28h+var_20], 0B8h ; int
		mov	[esp+28h+var_24], offset a_pkcs11hCrypto ; "_pkcs11h-crypto-openssl.c"
		mov	[esp+28h+var_28], offset aBlobNull ; "blob!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1B08
; ---------------------------------------------------------------------------

loc_645C1B07:				; CODE XREF: sub_645C1AD5+12j
		nop

loc_645C1B08:				; CODE XREF: sub_645C1AD5+30j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645C1B2C
		mov	[esp+28h+var_20], 0B9h ; int
		mov	[esp+28h+var_24], offset a_pkcs11hCrypto ; "_pkcs11h-crypto-openssl.c"
		mov	[esp+28h+var_28], offset aDnNull ; "dn!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1B2D
; ---------------------------------------------------------------------------

loc_645C1B2C:				; CODE XREF: sub_645C1AD5+37j
		nop

loc_645C1B2D:				; CODE XREF: sub_645C1AD5+55j
		cmp	[ebp+arg_10], 0
		jnz	short loc_645C1B51
		mov	[esp+28h+var_20], 0BAh ; int
		mov	[esp+28h+var_24], offset a_pkcs11hCrypto ; "_pkcs11h-crypto-openssl.c"
		mov	[esp+28h+var_28], offset aDn_max0 ; "dn_max>0"
		call	sub_645D02E0
		jmp	short loc_645C1B52
; ---------------------------------------------------------------------------

loc_645C1B51:				; CODE XREF: sub_645C1AD5+5Cj
		nop

loc_645C1B52:				; CODE XREF: sub_645C1AD5+7Aj
		mov	eax, [ebp+arg_C]
		mov	byte ptr [eax],	0
		call	_X509_new
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		test	eax, eax
		jnz	short loc_645C1B69
		jmp	short loc_645C1BAF
; ---------------------------------------------------------------------------

loc_645C1B69:				; CODE XREF: sub_645C1AD5+90j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_20], eax
		lea	eax, [ebp+var_10]
		mov	[esp+28h+var_24], eax
		lea	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	_d2i_X509
		test	eax, eax
		jnz	short loc_645C1B8E
		jmp	short loc_645C1BAF
; ---------------------------------------------------------------------------

loc_645C1B8E:				; CODE XREF: sub_645C1AD5+B5j
		mov	ebx, [ebp+arg_10]
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	_X509_get_subject_name
		mov	[esp+28h+var_20], ebx
		mov	edx, [ebp+arg_C]
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], eax
		call	_X509_NAME_oneline

loc_645C1BAF:				; CODE XREF: sub_645C1AD5+92j
					; sub_645C1AD5+B7j
		mov	eax, [ebp+var_C]
		test	eax, eax
		jz	short loc_645C1BC8
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	_X509_free
		mov	[ebp+var_C], 0

loc_645C1BC8:				; CODE XREF: sub_645C1AD5+DFj
		mov	eax, [ebp+arg_C]
		movzx	eax, byte ptr [eax]
		test	al, al
		setnz	al
		movzx	eax, al
		add	esp, 24h
		pop	ebx
		pop	ebp
		retn
sub_645C1AD5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C1BDC	proc near		; DATA XREF: .rdata:645D2100o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 0
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C1C23
		mov	[esp+38h+var_30], 0EAh ; int
		mov	[esp+38h+var_34], offset a_pkcs11hCrypto ; "_pkcs11h-crypto-openssl.c"
		mov	[esp+38h+var_38], offset aIssuer_blobNul ; "issuer_blob!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1C24
; ---------------------------------------------------------------------------

loc_645C1C23:				; CODE XREF: sub_645C1BDC+27j
		nop

loc_645C1C24:				; CODE XREF: sub_645C1BDC+45j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645C1C48
		mov	[esp+38h+var_30], 0EBh ; int
		mov	[esp+38h+var_34], offset a_pkcs11hCrypto ; "_pkcs11h-crypto-openssl.c"
		mov	[esp+38h+var_38], offset aCert_blobNull	; "cert_blob!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1C49
; ---------------------------------------------------------------------------

loc_645C1C48:				; CODE XREF: sub_645C1BDC+4Cj
		nop

loc_645C1C49:				; CODE XREF: sub_645C1BDC+6Aj
		call	_X509_new
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	loc_645C1D18
		call	_X509_new
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_18]
		test	eax, eax
		jz	loc_645C1D18
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_30], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+38h+var_34], eax
		lea	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	_d2i_X509
		test	eax, eax
		jnz	short loc_645C1C97
		jmp	loc_645C1D18
; ---------------------------------------------------------------------------

loc_645C1C97:				; CODE XREF: sub_645C1BDC+B4j
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_30], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+38h+var_34], eax
		lea	eax, [ebp+var_18]
		mov	[esp+38h+var_38], eax
		call	_d2i_X509
		test	eax, eax
		jnz	short loc_645C1CBC
		jmp	short loc_645C1D18
; ---------------------------------------------------------------------------

loc_645C1CBC:				; CODE XREF: sub_645C1BDC+DCj
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	_X509_get_pubkey
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645C1CD2
		jmp	short loc_645C1D18
; ---------------------------------------------------------------------------

loc_645C1CD2:				; CODE XREF: sub_645C1BDC+F2j
		mov	eax, [ebp+var_18]
		mov	[esp+38h+var_38], eax
		call	_X509_get_issuer_name
		mov	ebx, eax
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	_X509_get_subject_name
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], eax
		call	_X509_NAME_cmp
		test	eax, eax
		jnz	short loc_645C1D18
		mov	eax, [ebp+var_18]
		mov	edx, [ebp+var_C]
		mov	[esp+38h+var_34], edx
		mov	[esp+38h+var_38], eax
		call	_X509_verify
		cmp	eax, 1
		jnz	short loc_645C1D18
		mov	[ebp+var_10], 1

loc_645C1D18:				; CODE XREF: sub_645C1BDC+7Aj
					; sub_645C1BDC+8Dj ...
		cmp	[ebp+var_C], 0
		jz	short loc_645C1D30
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	_EVP_PKEY_free
		mov	[ebp+var_C], 0

loc_645C1D30:				; CODE XREF: sub_645C1BDC+140j
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_645C1D49
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	_X509_free
		mov	[ebp+var_14], 0

loc_645C1D49:				; CODE XREF: sub_645C1BDC+159j
		mov	eax, [ebp+var_18]
		test	eax, eax
		jz	short loc_645C1D62
		mov	eax, [ebp+var_18]
		mov	[esp+38h+var_38], eax
		call	_X509_free
		mov	[ebp+var_18], 0

loc_645C1D62:				; CODE XREF: sub_645C1BDC+172j
		mov	eax, [ebp+var_10]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
sub_645C1BDC	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C1D6C	proc near		; CODE XREF: sub_645C1DE3+37p
					; sub_645C1DE3+113p
					; DATA XREF: ...

hLibModule	= dword	ptr -28h
Val		= dword	ptr -24h
Size		= dword	ptr -20h
Dst		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+Dst], eax
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C1D9C
		mov	[esp+28h+Size],	6Eh ; int
		mov	[esp+28h+Val], offset a_pkcs11hCryp_0 ;	"_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+28h+hLibModule], offset aGlobal_dataNul ; "global_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1D9D
; ---------------------------------------------------------------------------

loc_645C1D9C:				; CODE XREF: sub_645C1D6C+10j
		nop

loc_645C1D9D:				; CODE XREF: sub_645C1D6C+2Ej
		mov	eax, [ebp+Dst]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_645C1DC1
		mov	eax, [ebp+Dst]
		mov	eax, [eax]
		mov	[esp+28h+hLibModule], eax ; hLibModule
		mov	eax, ds:__imp__FreeLibrary@4 ; FreeLibrary(x)
		call	eax ; FreeLibrary(x) ; FreeLibrary(x)
		sub	esp, 4
		mov	eax, [ebp+Dst]
		mov	dword ptr [eax], 0

loc_645C1DC1:				; CODE XREF: sub_645C1D6C+38j
		mov	[esp+28h+Size],	14h ; Size
		mov	[esp+28h+Val], 0 ; Val
		mov	eax, [ebp+Dst]
		mov	[esp+28h+hLibModule], eax ; Dst
		call	_memset
		mov	eax, 1
		leave
		retn
sub_645C1D6C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C1DE3	proc near		; DATA XREF: .rdata:645D2200o

lpLibFileName	= dword	ptr -28h
lpProcName	= dword	ptr -24h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C1E13
		mov	[esp+28h+var_20], 81h ;	int
		mov	[esp+28h+lpProcName], offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+28h+lpLibFileName], offset	aGlobal_dataNul	; "global_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1E14
; ---------------------------------------------------------------------------

loc_645C1E13:				; CODE XREF: sub_645C1DE3+10j
		nop

loc_645C1E14:				; CODE XREF: sub_645C1DE3+2Ej
		mov	eax, [ebp+var_C]
		mov	[esp+28h+lpLibFileName], eax
		call	sub_645C1D6C
		mov	[esp+28h+lpLibFileName], offset	LibFileName ; "crypt32.dll"
		mov	eax, ds:__imp__LoadLibraryA@4 ;	LoadLibraryA(x)
		call	eax ; LoadLibraryA(x) ;	LoadLibraryA(x)
		sub	esp, 4
		mov	edx, [ebp+var_C]
		mov	[edx], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C1E48
		mov	eax, 0
		jmp	locret_645C1F07
; ---------------------------------------------------------------------------

loc_645C1E48:				; CODE XREF: sub_645C1DE3+59j
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+28h+lpProcName], offset aCertcreatecert ; "CertCreateCertificateContext"
		mov	[esp+28h+lpLibFileName], eax ; hModule
		mov	eax, ds:__imp__GetProcAddress@8	; GetProcAddress(x,x)
		call	eax ; GetProcAddress(x,x) ; GetProcAddress(x,x)
		sub	esp, 8
		mov	edx, [ebp+var_C]
		mov	[edx+4], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+28h+lpProcName], offset aCertfreecertif ; "CertFreeCertificateContext"
		mov	[esp+28h+lpLibFileName], eax ; hModule
		mov	eax, ds:__imp__GetProcAddress@8	; GetProcAddress(x,x)
		call	eax ; GetProcAddress(x,x) ; GetProcAddress(x,x)
		sub	esp, 8
		mov	edx, [ebp+var_C]
		mov	[edx+8], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+28h+lpProcName], offset aCertnametostrw ; "CertNameToStrW"
		mov	[esp+28h+lpLibFileName], eax ; hModule
		mov	eax, ds:__imp__GetProcAddress@8	; GetProcAddress(x,x)
		call	eax ; GetProcAddress(x,x) ; GetProcAddress(x,x)
		sub	esp, 8
		mov	edx, [ebp+var_C]
		mov	[edx+0Ch], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+28h+lpProcName], offset aCryptverifycer ; "CryptVerifyCertificateSignatureEx"
		mov	[esp+28h+lpLibFileName], eax ; hModule
		mov	eax, ds:__imp__GetProcAddress@8	; GetProcAddress(x,x)
		call	eax ; GetProcAddress(x,x) ; GetProcAddress(x,x)
		sub	esp, 8
		mov	edx, [ebp+var_C]
		mov	[edx+10h], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645C1EF0
		mov	eax, [ebp+var_C]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_645C1EF0
		mov	eax, [ebp+var_C]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_645C1EF0
		mov	eax, [ebp+var_C]
		mov	eax, [eax+10h]
		test	eax, eax
		jnz	short loc_645C1F02

loc_645C1EF0:				; CODE XREF: sub_645C1DE3+EDj
					; sub_645C1DE3+F7j ...
		mov	eax, [ebp+var_C]
		mov	[esp+28h+lpLibFileName], eax
		call	sub_645C1D6C
		mov	eax, 0
		jmp	short locret_645C1F07
; ---------------------------------------------------------------------------

loc_645C1F02:				; CODE XREF: sub_645C1DE3+10Bj
		mov	eax, 1

locret_645C1F07:			; CODE XREF: sub_645C1DE3+60j
					; sub_645C1DE3+11Dj
		leave
		retn
sub_645C1DE3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C1F09	proc near		; DATA XREF: .rdata:645D2208o

lpFileTime	= dword	ptr -68h
lpSystemTime	= dword	ptr -64h
lpLocalTime	= dword	ptr -60h
Dst		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
LocalTime	= _SYSTEMTIME ptr -34h
SystemTime	= _SYSTEMTIME ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_10], eax
		mov	[ebp+var_14], 0
		mov	[ebp+var_C], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C1F47
		mov	[esp+68h+lpLocalTime], 0B6h ; int
		mov	[esp+68h+lpSystemTime],	offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+68h+lpFileTime], offset aGlobal_dataNul ; "global_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1F48
; ---------------------------------------------------------------------------

loc_645C1F47:				; CODE XREF: sub_645C1F09+1Ej
		nop

loc_645C1F48:				; CODE XREF: sub_645C1F09+3Cj
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C1F6C
		mov	[esp+68h+lpLocalTime], 0B7h ; int
		mov	[esp+68h+lpSystemTime],	offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+68h+lpFileTime], offset aBlobNull_0 ; "blob!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1F6D
; ---------------------------------------------------------------------------

loc_645C1F6C:				; CODE XREF: sub_645C1F09+43j
		nop

loc_645C1F6D:				; CODE XREF: sub_645C1F09+61j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645C1F91
		mov	[esp+68h+lpLocalTime], 0B8h ; int
		mov	[esp+68h+lpSystemTime],	offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+68h+lpFileTime], offset aExpirationNu_0 ; "expiration!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C1F92
; ---------------------------------------------------------------------------

loc_645C1F91:				; CODE XREF: sub_645C1F09+68j
		nop

loc_645C1F92:				; CODE XREF: sub_645C1F09+86j
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_10]
		mov	edx, [eax+4]
		mov	eax, [ebp+arg_8]
		mov	[esp+68h+lpLocalTime], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+68h+lpSystemTime],	eax
		mov	[esp+68h+lpFileTime], 10001h
		call	edx
		sub	esp, 0Ch
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	loc_645C2082
		mov	eax, [ebp+var_14]
		mov	eax, [eax+0Ch]
		lea	edx, [eax+28h]
		lea	eax, [ebp+SystemTime]
		mov	[esp+68h+lpSystemTime],	eax ; lpSystemTime
		mov	[esp+68h+lpFileTime], edx ; lpFileTime
		mov	eax, ds:__imp__FileTimeToSystemTime@8 ;	FileTimeToSystemTime(x,x)
		call	eax ; FileTimeToSystemTime(x,x)	; FileTimeToSystemTime(x,x)
		sub	esp, 8
		test	eax, eax
		jz	loc_645C2082
		lea	eax, [ebp+LocalTime]
		mov	[esp+68h+lpLocalTime], eax ; lpLocalTime
		lea	eax, [ebp+SystemTime]
		mov	[esp+68h+lpSystemTime],	eax ; lpUniversalTime
		mov	[esp+68h+lpFileTime], 0	; lpTimeZoneInformation
		mov	eax, ds:__imp__SystemTimeToTzSpecificLocalTime@12 ; SystemTimeToTzSpecificLocalTime(x,x,x)
		call	eax ; SystemTimeToTzSpecificLocalTime(x,x,x) ; SystemTimeToTzSpecificLocalTime(x,x,x)
		sub	esp, 0Ch
		mov	[esp+68h+lpLocalTime], 24h ; Size
		mov	[esp+68h+lpSystemTime],	0 ; Val
		lea	eax, [ebp+Dst]
		mov	[esp+68h+lpFileTime], eax ; Dst
		call	_memset
		movzx	eax, [ebp+LocalTime.wYear]
		movzx	eax, ax
		sub	eax, 76Ch
		mov	[ebp+var_44], eax
		movzx	eax, [ebp+LocalTime.wMonth]
		movzx	eax, ax
		sub	eax, 1
		mov	[ebp+var_48], eax
		movzx	eax, [ebp+LocalTime.wDay]
		movzx	eax, ax
		mov	[ebp+var_4C], eax
		movzx	eax, [ebp+LocalTime.wHour]
		movzx	eax, ax
		mov	[ebp+var_50], eax
		movzx	eax, [ebp+LocalTime.wMinute]
		movzx	eax, ax
		mov	[ebp+var_54], eax
		movzx	eax, [ebp+LocalTime.wSecond]
		movzx	eax, ax
		mov	[ebp+Dst], eax
		lea	eax, [ebp+Dst]
		mov	[esp+68h+lpFileTime], eax ; Tm
		call	_mktime
		mov	edx, [ebp+arg_C]
		mov	[edx], eax
		mov	[ebp+var_C], 1

loc_645C2082:				; CODE XREF: sub_645C1F09+B9j
					; sub_645C1F09+DEj
		cmp	[ebp+var_14], 0
		jz	short loc_645C20A0
		mov	eax, [ebp+var_10]
		mov	edx, [eax+8]
		mov	eax, [ebp+var_14]
		mov	[esp+68h+lpFileTime], eax
		call	edx
		sub	esp, 4
		mov	[ebp+var_14], 0

loc_645C20A0:				; CODE XREF: sub_645C1F09+17Dj
		cmp	[ebp+var_C], 0
		setnz	al
		movzx	eax, al
		leave
		retn
sub_645C1F09	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645C20AC(int,	int, int, LPSTR, int)
sub_645C20AC	proc near		; DATA XREF: .rdata:645D220Co

Size		= dword	ptr -48h
dwFlags		= dword	ptr -44h
lpWideCharStr	= dword	ptr -40h
cchWideChar	= dword	ptr -3Ch
lpMultiByteStr	= dword	ptr -38h
cbMultiByte	= dword	ptr -34h
lpDefaultChar	= dword	ptr -30h
lpUsedDefaultChar= dword ptr -2Ch
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	[ebp+var_18], 0
		mov	[ebp+var_C], 1
		mov	[ebp+var_10], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C20F1
		mov	[esp+48h+lpWideCharStr], 0F0h ;	int
		mov	[esp+48h+dwFlags], offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+48h+Size],	offset aGlobal_dataNul ; "global_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C20F2
; ---------------------------------------------------------------------------

loc_645C20F1:				; CODE XREF: sub_645C20AC+25j
		nop

loc_645C20F2:				; CODE XREF: sub_645C20AC+43j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C2116
		mov	[esp+48h+lpWideCharStr], 0F1h ;	int
		mov	[esp+48h+dwFlags], offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+48h+Size],	offset aBlobNull_0 ; "blob!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2117
; ---------------------------------------------------------------------------

loc_645C2116:				; CODE XREF: sub_645C20AC+4Aj
		nop

loc_645C2117:				; CODE XREF: sub_645C20AC+68j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645C213B
		mov	[esp+48h+lpWideCharStr], 0F2h ;	int
		mov	[esp+48h+dwFlags], offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+48h+Size],	offset aDnNull_0 ; "dn!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C213C
; ---------------------------------------------------------------------------

loc_645C213B:				; CODE XREF: sub_645C20AC+6Fj
		nop

loc_645C213C:				; CODE XREF: sub_645C20AC+8Dj
		cmp	[ebp+arg_10], 0
		jnz	short loc_645C2160
		mov	[esp+48h+lpWideCharStr], 0F3h ;	int
		mov	[esp+48h+dwFlags], offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+48h+Size],	offset aDn_max0_0 ; "dn_max>0"
		call	sub_645D02E0
		jmp	short loc_645C2161
; ---------------------------------------------------------------------------

loc_645C2160:				; CODE XREF: sub_645C20AC+94j
		nop

loc_645C2161:				; CODE XREF: sub_645C20AC+B2j
		mov	eax, [ebp+arg_C]
		mov	byte ptr [eax],	0
		mov	eax, [ebp+var_14]
		mov	edx, [eax+4]
		mov	eax, [ebp+arg_8]
		mov	[esp+48h+lpWideCharStr], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+48h+dwFlags], eax
		mov	[esp+48h+Size],	10001h
		call	edx
		sub	esp, 0Ch
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	loc_645C2284
		mov	eax, [ebp+var_14]
		mov	edx, [eax+0Ch]
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		add	eax, 30h
		mov	[esp+48h+lpMultiByteStr], 0
		mov	[esp+48h+cchWideChar], 0
		mov	[esp+48h+lpWideCharStr], 2000003h
		mov	[esp+48h+dwFlags], eax
		mov	[esp+48h+Size],	1
		call	edx
		sub	esp, 14h
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jz	loc_645C2284
		mov	eax, off_645D1000
		mov	edx, [ebp+var_1C]
		add	edx, edx
		mov	[esp+48h+Size],	edx ; Size
		call	eax ; _malloc
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_645C21F5
		jmp	loc_645C2284
; ---------------------------------------------------------------------------

loc_645C21F5:				; CODE XREF: sub_645C20AC+142j
		mov	eax, [ebp+var_14]
		mov	edx, [eax+0Ch]
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		lea	ecx, [eax+30h]
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+lpMultiByteStr], eax
		mov	eax, [ebp+var_10]
		mov	[esp+48h+cchWideChar], eax
		mov	[esp+48h+lpWideCharStr], 2000003h
		mov	[esp+48h+dwFlags], ecx
		mov	[esp+48h+Size],	1
		call	edx
		sub	esp, 14h
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jz	short loc_645C2284
		mov	eax, [ebp+arg_10]
		mov	[esp+48h+lpUsedDefaultChar], 0 ; lpUsedDefaultChar
		mov	[esp+48h+lpDefaultChar], 0 ; lpDefaultChar
		mov	[esp+48h+cbMultiByte], eax ; cbMultiByte
		mov	eax, [ebp+arg_C]
		mov	[esp+48h+lpMultiByteStr], eax ;	lpMultiByteStr
		mov	[esp+48h+cchWideChar], 0FFFFFFFFh ; cchWideChar
		mov	eax, [ebp+var_10]
		mov	[esp+48h+lpWideCharStr], eax ; lpWideCharStr
		mov	[esp+48h+dwFlags], 0 ; dwFlags
		mov	[esp+48h+Size],	0FDE9h ; CodePage
		mov	eax, ds:__imp__WideCharToMultiByte@32 ;	WideCharToMultiByte(x,x,x,x,x,x,x,x)
		call	eax ; WideCharToMultiByte(x,x,x,x,x,x,x,x) ; WideCharToMultiByte(x,x,x,x,x,x,x,x)
		sub	esp, 20h
		test	eax, eax
		jz	short loc_645C2284
		mov	[ebp+var_C], 1

loc_645C2284:				; CODE XREF: sub_645C20AC+E2j
					; sub_645C20AC+126j ...
		cmp	[ebp+var_10], 0
		jz	short loc_645C229E
		mov	eax, off_645D1004
		mov	edx, [ebp+var_10]
		mov	[esp+48h+Size],	edx ; Memory
		call	eax ; _free
		mov	[ebp+var_10], 0

loc_645C229E:				; CODE XREF: sub_645C20AC+1DCj
		cmp	[ebp+var_18], 0
		jz	short loc_645C22BC
		mov	eax, [ebp+var_14]
		mov	edx, [eax+8]
		mov	eax, [ebp+var_18]
		mov	[esp+48h+Size],	eax
		call	edx
		sub	esp, 4
		mov	[ebp+var_18], 0

loc_645C22BC:				; CODE XREF: sub_645C20AC+1F6j
		cmp	[ebp+var_C], 0
		setnz	al
		movzx	eax, al
		leave
		retn
sub_645C20AC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C22C8	proc near		; DATA XREF: .rdata:645D2210o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	[ebp+var_18], 0
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C230D
		mov	[esp+38h+var_30], 141h ; int
		mov	[esp+38h+var_34], offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+38h+var_38], offset aGlobal_dataNul ; "global_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C230E
; ---------------------------------------------------------------------------

loc_645C230D:				; CODE XREF: sub_645C22C8+25j
		nop

loc_645C230E:				; CODE XREF: sub_645C22C8+43j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C2332
		mov	[esp+38h+var_30], 142h ; int
		mov	[esp+38h+var_34], offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+38h+var_38], offset aIssuer_blobN_0 ; "issuer_blob!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2333
; ---------------------------------------------------------------------------

loc_645C2332:				; CODE XREF: sub_645C22C8+4Aj
		nop

loc_645C2333:				; CODE XREF: sub_645C22C8+68j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645C2357
		mov	[esp+38h+var_30], 143h ; int
		mov	[esp+38h+var_34], offset a_pkcs11hCryp_0 ; "_pkcs11h-crypto-cryptoapi.c"
		mov	[esp+38h+var_38], offset aCert_blobNul_0 ; "cert_blob!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2358
; ---------------------------------------------------------------------------

loc_645C2357:				; CODE XREF: sub_645C22C8+6Fj
		nop

loc_645C2358:				; CODE XREF: sub_645C22C8+8Dj
		mov	eax, [ebp+var_14]
		mov	edx, [eax+4]
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_30], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+var_38], 10001h
		call	edx
		sub	esp, 0Ch
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C23FD
		mov	eax, [ebp+var_14]
		mov	edx, [eax+4]
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_30], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_34], eax
		mov	[esp+38h+var_38], 10001h
		call	edx
		sub	esp, 0Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C23FD
		mov	eax, [ebp+var_14]
		mov	edx, [eax+10h]
		mov	[esp+38h+var_1C], 0
		mov	[esp+38h+var_20], 0
		mov	eax, [ebp+var_18]
		mov	[esp+38h+var_24], eax
		mov	[esp+38h+var_28], 2
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_2C], eax
		mov	[esp+38h+var_30], 2
		mov	[esp+38h+var_34], 1
		mov	[esp+38h+var_38], 0
		call	edx
		sub	esp, 20h
		test	eax, eax
		jz	short loc_645C23FD
		mov	[ebp+var_10], 1

loc_645C23FD:				; CODE XREF: sub_645C22C8+B7j
					; sub_645C22C8+E0j ...
		cmp	[ebp+var_18], 0
		jz	short loc_645C241B
		mov	eax, [ebp+var_14]
		mov	edx, [eax+8]
		mov	eax, [ebp+var_18]
		mov	[esp+38h+var_38], eax
		call	edx
		sub	esp, 4
		mov	[ebp+var_18], 0

loc_645C241B:				; CODE XREF: sub_645C22C8+139j
		cmp	[ebp+var_C], 0
		jz	short loc_645C2439
		mov	eax, [ebp+var_14]
		mov	edx, [eax+8]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	edx
		sub	esp, 4
		mov	[ebp+var_C], 0

loc_645C2439:				; CODE XREF: sub_645C22C8+157j
		cmp	[ebp+var_10], 0
		setnz	al
		movzx	eax, al
		leave
		retn
sub_645C22C8	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C2448	proc near		; CODE XREF: sub_645C9A74+23Cp
					; sub_645C9A74+4B1p ...

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, off_645D100C
		mov	edx, [ebp+arg_0]
		imul	edx, 3E8h
		mov	[esp+18h+var_18], edx
		call	eax ; sub_645C16CC
		leave
		retn
sub_645C2448	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C2463	proc near		; CODE XREF: sub_645C35B0+1C8p
					; pkcs11h_certificate_create+133p ...

lpMutexAttributes= dword ptr -28h
bInitialOwner	= dword	ptr -24h
lpName		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	[esp+28h+lpName], 0 ; lpName
		mov	[esp+28h+bInitialOwner], 0 ; bInitialOwner
		mov	[esp+28h+lpMutexAttributes], 0 ; lpMutexAttributes
		mov	eax, ds:__imp__CreateMutexA@12 ; CreateMutexA(x,x,x)
		call	eax ; CreateMutexA(x,x,x) ; CreateMutexA(x,x,x)
		sub	esp, 0Ch
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C24A8
		mov	[ebp+var_C], 6
		jmp	short loc_645C24AF
; ---------------------------------------------------------------------------

loc_645C24A8:				; CODE XREF: sub_645C2463+3Aj
		mov	[ebp+var_C], 0

loc_645C24AF:				; CODE XREF: sub_645C2463+43j
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C2463	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C24B4	proc near		; CODE XREF: sub_645C35B0+ADp
					; sub_645C3851+90p ...

hHandle		= dword	ptr -28h
dwMilliseconds	= dword	ptr -24h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+28h+dwMilliseconds], 0FFFFFFFFh ; dwMilliseconds
		mov	[esp+28h+hHandle], eax ; hHandle
		mov	eax, ds:__imp__WaitForSingleObject@8 ; WaitForSingleObject(x,x)
		call	eax ; WaitForSingleObject(x,x) ; WaitForSingleObject(x,x)
		sub	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_645C24E9
		mov	[ebp+var_C], 6
		jmp	short loc_645C24F0
; ---------------------------------------------------------------------------

loc_645C24E9:				; CODE XREF: sub_645C24B4+2Aj
		mov	[ebp+var_C], 0

loc_645C24F0:				; CODE XREF: sub_645C24B4+33j
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C24B4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C24F5	proc near		; CODE XREF: sub_645C35B0+24Fp
					; sub_645C3851+D6p ...

hMutex		= dword	ptr -28h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+28h+hMutex], eax ;	hMutex
		mov	eax, ds:__imp__ReleaseMutex@4 ;	ReleaseMutex(x)
		call	eax ; ReleaseMutex(x) ;	ReleaseMutex(x)
		sub	esp, 4
		test	eax, eax
		jnz	short loc_645C2521
		mov	[ebp+var_C], 6
		jmp	short loc_645C2528
; ---------------------------------------------------------------------------

loc_645C2521:				; CODE XREF: sub_645C24F5+21j
		mov	[ebp+var_C], 0

loc_645C2528:				; CODE XREF: sub_645C24F5+2Aj
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C24F5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C252D	proc near		; CODE XREF: sub_645C35B0+22Ep
					; pkcs11h_certificate_freeCertificate+CEp ...

hObject		= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_645C2557
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+18h+hObject], eax ; hObject
		mov	eax, ds:__imp__CloseHandle@4 ; CloseHandle(x)
		call	eax ; CloseHandle(x) ; CloseHandle(x)
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0

loc_645C2557:				; CODE XREF: sub_645C252D+Dj
		mov	eax, 0
		leave
		retn
sub_645C252D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C255E	proc near		; CODE XREF: sub_645C9A74+137p
					; sub_645C9A74+229p ...

hEvent		= dword	ptr -28h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+28h+hEvent], eax ;	hEvent
		mov	eax, ds:__imp__SetEvent@4 ; SetEvent(x)
		call	eax ; SetEvent(x) ; SetEvent(x)
		sub	esp, 4
		test	eax, eax
		jnz	short loc_645C258A
		mov	[ebp+var_C], 6
		jmp	short loc_645C2591
; ---------------------------------------------------------------------------

loc_645C258A:				; CODE XREF: sub_645C255E+21j
		mov	[ebp+var_C], 0

loc_645C2591:				; CODE XREF: sub_645C255E+2Aj
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C255E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C2596	proc near		; CODE XREF: sub_645CA1F0+42p

lpEventAttributes= dword ptr -28h
bManualReset	= dword	ptr -24h
bInitialState	= dword	ptr -20h
lpName		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	[esp+28h+lpName], 0 ; lpName
		mov	[esp+28h+bInitialState], 0 ; bInitialState
		mov	[esp+28h+bManualReset],	0 ; bManualReset
		mov	[esp+28h+lpEventAttributes], 0 ; lpEventAttributes
		mov	eax, ds:__imp__CreateEventA@16 ; CreateEventA(x,x,x,x)
		call	eax ; CreateEventA(x,x,x,x) ; CreateEventA(x,x,x,x)
		sub	esp, 10h
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C25E3
		mov	[ebp+var_C], 6
		jmp	short loc_645C25EA
; ---------------------------------------------------------------------------

loc_645C25E3:				; CODE XREF: sub_645C2596+42j
		mov	[ebp+var_C], 0

loc_645C25EA:				; CODE XREF: sub_645C2596+4Bj
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C2596	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C25EF	proc near		; CODE XREF: sub_645C9F7C+16Ep

hHandle		= dword	ptr -28h
dwMilliseconds	= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_4], 0FFFFFFFFh
		jnz	short loc_645C260B
		mov	[ebp+var_10], 0FFFFFFFFh
		jmp	short loc_645C2611
; ---------------------------------------------------------------------------

loc_645C260B:				; CODE XREF: sub_645C25EF+11j
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_10], eax

loc_645C2611:				; CODE XREF: sub_645C25EF+1Aj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [ebp+var_10]
		mov	[esp+28h+dwMilliseconds], edx ;	dwMilliseconds
		mov	[esp+28h+hHandle], eax ; hHandle
		mov	eax, ds:__imp__WaitForSingleObject@8 ; WaitForSingleObject(x,x)
		call	eax ; WaitForSingleObject(x,x) ; WaitForSingleObject(x,x)
		sub	esp, 8
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_645C2638
		mov	[ebp+var_C], 6
		jmp	short loc_645C263F
; ---------------------------------------------------------------------------

loc_645C2638:				; CODE XREF: sub_645C25EF+3Ej
		mov	[ebp+var_C], 0

loc_645C263F:				; CODE XREF: sub_645C25EF+47j
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C25EF	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C2644	proc near		; CODE XREF: sub_645CA32A+1Dp

hObject		= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+18h+hObject], eax ; hObject
		mov	eax, ds:__imp__CloseHandle@4 ; CloseHandle(x)
		call	eax ; CloseHandle(x) ; CloseHandle(x)
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	eax, 0
		leave
		retn
sub_645C2644	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C266C	proc near		; DATA XREF: sub_645C269D+59o

var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		mov	edx, [ebp+var_10]
		mov	edx, [edx+4]
		mov	[esp+28h+var_28], edx
		call	eax
		mov	[ebp+var_C], eax
		lea	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	sub_645C156B
		mov	eax, [ebp+var_C]
		leave
		retn	4
sub_645C266C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C269D	proc near		; CODE XREF: sub_645C9F7C+E9p
					; sub_645CA1F0+6Dp

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= byte ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_10], 0
		mov	[ebp+var_C], 6
		mov	[esp+38h+var_34], 8 ; size_t
		lea	eax, [ebp+var_10]
		mov	[esp+38h+var_38], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C26CF
		jmp	short loc_645C2734
; ---------------------------------------------------------------------------

loc_645C26CF:				; CODE XREF: sub_645C269D+2Ej
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+arg_4]
		mov	[eax], edx
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+arg_8]
		mov	[eax+4], edx
		mov	eax, [ebp+var_10]
		lea	edx, [ebp+var_14]
		mov	[esp+38h+var_24], edx
		mov	[esp+38h+var_28], 0
		mov	[esp+38h+var_2C], eax
		mov	[esp+38h+var_30], offset sub_645C266C
		mov	[esp+38h+var_34], 0
		mov	[esp+38h+var_38], 0
		mov	eax, ds:__imp___beginthreadex
		call	eax ; __imp___beginthreadex
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax], edx
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C272D
		mov	[ebp+var_C], 6
		jmp	short loc_645C2734
; ---------------------------------------------------------------------------

loc_645C272D:				; CODE XREF: sub_645C269D+85j
		mov	[ebp+var_C], 0

loc_645C2734:				; CODE XREF: sub_645C269D+30j
					; sub_645C269D+8Ej
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C269D	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C2739	proc near		; CODE XREF: sub_645C9F7C+126p
					; sub_645C9F7C+23Cp ...

hHandle		= dword	ptr -18h
dwMilliseconds	= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+18h+dwMilliseconds], 0FFFFFFFFh ; dwMilliseconds
		mov	[esp+18h+hHandle], eax ; hHandle
		mov	eax, ds:__imp__WaitForSingleObject@8 ; WaitForSingleObject(x,x)
		call	eax ; WaitForSingleObject(x,x) ; WaitForSingleObject(x,x)
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+18h+hHandle], eax ; hObject
		mov	eax, ds:__imp__CloseHandle@4 ; CloseHandle(x)
		call	eax ; CloseHandle(x) ; CloseHandle(x)
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	eax, 0
		leave
		retn
sub_645C2739	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645C277C(void	*, void	*, size_t)
sub_645C277C	proc near		; CODE XREF: sub_645C48DA+BAp
					; sub_645C48DA+DCp ...

Dst		= dword	ptr -28h
Src		= dword	ptr -24h
Size		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C27A6
		mov	[esp+28h+Size],	3Fh ; int
		mov	[esp+28h+Src], offset aPkcs11hUtil_c ; "pkcs11h-util.c"
		mov	[esp+28h+Dst], offset aSourceNull ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C27A7
; ---------------------------------------------------------------------------

loc_645C27A6:				; CODE XREF: sub_645C277C+Aj
		nop

loc_645C27A7:				; CODE XREF: sub_645C277C+28j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C27CB
		mov	[esp+28h+Size],	40h ; int
		mov	[esp+28h+Src], offset aPkcs11hUtil_c ; "pkcs11h-util.c"
		mov	[esp+28h+Dst], offset aTargetNull ; "target!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C27CC
; ---------------------------------------------------------------------------

loc_645C27CB:				; CODE XREF: sub_645C277C+2Fj
		nop

loc_645C27CC:				; CODE XREF: sub_645C277C+4Dj
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+arg_0]
		add	eax, edx
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+Size],	eax ; Size
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Src], eax ; Src
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Dst], eax ; Dst
		call	_memmove
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax],	0
		sub	[ebp+var_C], 1
		jmp	short loc_645C2806
; ---------------------------------------------------------------------------

loc_645C27FC:				; CODE XREF: sub_645C277C+9Aj
		mov	eax, [ebp+var_C]
		mov	byte ptr [eax],	0
		sub	[ebp+var_C], 1

loc_645C2806:				; CODE XREF: sub_645C277C+7Ej
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+arg_0]
		jb	short locret_645C2818
		mov	eax, [ebp+var_C]
		movzx	eax, byte ptr [eax]
		cmp	al, 20h
		jz	short loc_645C27FC

locret_645C2818:			; CODE XREF: sub_645C277C+90j
		leave
		retn
sub_645C277C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C281A	proc near		; CODE XREF: pkcs11h_certificate_deserializeCertificateId+190p

C		= dword	ptr -38h
Format		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
Src		= byte ptr -17h
var_16		= byte ptr -16h
var_15		= byte ptr -15h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+Src], 0
		mov	[ebp+var_16], 0
		mov	[ebp+var_15], 0
		mov	[ebp+var_10], 0
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C2857
		mov	[esp+38h+var_30], 57h ;	int
		mov	[esp+38h+Format], offset aPkcs11hUtil_c	; "pkcs11h-util.c"
		mov	[esp+38h+C], offset aSourceNull	; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2858
; ---------------------------------------------------------------------------

loc_645C2857:				; CODE XREF: sub_645C281A+1Dj
		nop

loc_645C2858:				; CODE XREF: sub_645C281A+3Bj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C287C
		mov	[esp+38h+var_30], 58h ;	int
		mov	[esp+38h+Format], offset aPkcs11hUtil_c	; "pkcs11h-util.c"
		mov	[esp+38h+C], offset aTargetNull	; "target!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C287D
; ---------------------------------------------------------------------------

loc_645C287C:				; CODE XREF: sub_645C281A+42j
		nop

loc_645C287D:				; CODE XREF: sub_645C281A+60j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C28A1
		mov	[esp+38h+var_30], 59h ;	int
		mov	[esp+38h+Format], offset aPkcs11hUtil_c	; "pkcs11h-util.c"
		mov	[esp+38h+C], offset aP_target_sizeN ; "p_target_size!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C28A2
; ---------------------------------------------------------------------------

loc_645C28A1:				; CODE XREF: sub_645C281A+67j
		nop

loc_645C28A2:				; CODE XREF: sub_645C281A+85j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0
		jmp	loc_645C294A
; ---------------------------------------------------------------------------

loc_645C28BE:				; CODE XREF: sub_645C281A+142j
		mov	eax, [ebp+var_C]
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		mov	[esp+38h+C], eax ; C
		mov	eax, ds:__imp__isxdigit
		call	eax ; __imp__isxdigit
		test	eax, eax
		jz	short loc_645C2946
		mov	eax, [ebp+var_10]
		cdq
		shr	edx, 1Fh
		add	eax, edx
		and	eax, 1
		sub	eax, edx
		mov	edx, [ebp+var_C]
		movzx	edx, byte ptr [edx]
		mov	[ebp+eax+Src], dl
		mov	eax, [ebp+var_10]
		cdq
		shr	edx, 1Fh
		add	eax, edx
		and	eax, 1
		sub	eax, edx
		cmp	eax, 1
		jnz	short loc_645C2942
		lea	eax, [ebp+var_1C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+Format], offset Format	; "%x"
		lea	eax, [ebp+Src]
		mov	[esp+38h+C], eax ; Src
		call	_sscanf
		cmp	eax, 1
		jz	short loc_645C2926
		mov	[ebp+var_1C], 0

loc_645C2926:				; CODE XREF: sub_645C281A+103j
		mov	eax, [ebp+arg_8]
		mov	edx, [eax]
		mov	eax, [ebp+arg_0]
		add	edx, eax
		mov	eax, [ebp+var_1C]
		mov	[edx], al
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		lea	edx, [eax+1]
		mov	eax, [ebp+arg_8]
		mov	[eax], edx

loc_645C2942:				; CODE XREF: sub_645C281A+E4j
		add	[ebp+var_10], 1

loc_645C2946:				; CODE XREF: sub_645C281A+B9j
		add	[ebp+var_C], 1

loc_645C294A:				; CODE XREF: sub_645C281A+9Fj
		mov	eax, [ebp+var_C]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_645C2962
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		cmp	eax, [ebp+var_14]
		jb	loc_645C28BE

loc_645C2962:				; CODE XREF: sub_645C281A+138j
		mov	eax, [ebp+var_C]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_645C2973
		mov	eax, 13h
		jmp	short locret_645C2978
; ---------------------------------------------------------------------------

loc_645C2973:				; CODE XREF: sub_645C281A+150j
		mov	eax, 0

locret_645C2978:			; CODE XREF: sub_645C281A+157j
		leave
		retn
sub_645C281A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C297A	proc near		; CODE XREF: pkcs11h_certificate_serializeCertificateId+163p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C29A5
		mov	[esp+28h+var_20], 83h ;	int
		mov	[esp+28h+var_24], offset aPkcs11hUtil_c	; "pkcs11h-util.c"
		mov	[esp+28h+var_28], offset aTargetNull ; "target!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C29A6
; ---------------------------------------------------------------------------

loc_645C29A5:				; CODE XREF: sub_645C297A+Bj
		nop

loc_645C29A6:				; CODE XREF: sub_645C297A+29j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C29CA
		mov	[esp+28h+var_20], 84h ;	int
		mov	[esp+28h+var_24], offset aPkcs11hUtil_c	; "pkcs11h-util.c"
		mov	[esp+28h+var_28], offset aSourceNull ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C29CB
; ---------------------------------------------------------------------------

loc_645C29CA:				; CODE XREF: sub_645C297A+30j
		nop

loc_645C29CB:				; CODE XREF: sub_645C297A+4Ej
		mov	eax, [ebp+arg_C]
		add	eax, eax
		add	eax, 1
		cmp	eax, [ebp+arg_4]
		jbe	short loc_645C29DF
		mov	eax, 13h
		jmp	short loc_645C2A5A
; ---------------------------------------------------------------------------

loc_645C29DF:				; CODE XREF: sub_645C297A+5Cj
		mov	[ebp+var_C], 0
		jmp	short loc_645C2A3F
; ---------------------------------------------------------------------------

loc_645C29E8:				; CODE XREF: sub_645C297A+CBj
		mov	eax, [ebp+var_C]
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_0]
		add	edx, eax
		mov	ecx, off_645D1014
		mov	eax, [ebp+var_C]
		mov	ebx, [ebp+arg_8]
		add	eax, ebx
		movzx	eax, byte ptr [eax]
		shr	al, 4
		movzx	eax, al
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		mov	[edx], al
		mov	eax, [ebp+var_C]
		add	eax, eax
		lea	edx, [eax+1]
		mov	eax, [ebp+arg_0]
		add	edx, eax
		mov	eax, off_645D1014
		mov	ecx, [ebp+var_C]
		mov	ebx, [ebp+arg_8]
		add	ecx, ebx
		movzx	ecx, byte ptr [ecx]
		movzx	ecx, cl
		and	ecx, 0Fh
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		mov	[edx], al
		add	[ebp+var_C], 1

loc_645C2A3F:				; CODE XREF: sub_645C297A+6Cj
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+arg_C]
		jb	short loc_645C29E8
		mov	eax, [ebp+arg_C]
		lea	edx, [eax+eax]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	byte ptr [eax],	0
		mov	eax, 0

loc_645C2A5A:				; CODE XREF: sub_645C297A+63j
		add	esp, 24h
		pop	ebx
		pop	ebp
		retn
sub_645C297A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645C2A60(int,	int, int, char *)
sub_645C2A60	proc near		; CODE XREF: pkcs11h_token_serializeTokenId+FEp
					; pkcs11h_token_serializeTokenId+185p

Str		= dword	ptr -28h
Val		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	[ebp+var_18], 0
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C2AA4
		mov	[esp+28h+var_20], 0A1h ; int
		mov	[esp+28h+Val], offset aPkcs11hUtil_c ; "pkcs11h-util.c"
		mov	[esp+28h+Str], offset aSourceNull ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2AA5
; ---------------------------------------------------------------------------

loc_645C2AA4:				; CODE XREF: sub_645C2A60+24j
		nop

loc_645C2AA5:				; CODE XREF: sub_645C2A60+42j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C2ACC
		mov	[esp+28h+var_20], 0A2h ; int
		mov	[esp+28h+Val], offset aPkcs11hUtil_c ; "pkcs11h-util.c"
		mov	[esp+28h+Str], offset aMaxNull ; "max!=NULL"
		call	sub_645D02E0
		jmp	loc_645C2BC0
; ---------------------------------------------------------------------------

loc_645C2ACC:				; CODE XREF: sub_645C2A60+49j
		jmp	loc_645C2BC0
; ---------------------------------------------------------------------------

loc_645C2AD1:				; CODE XREF: sub_645C2A60+168j
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax]
		cmp	al, 5Ch
		jz	short loc_645C2B0E
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		mov	[esp+28h+Val], eax ; Val
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+Str], eax ; Str
		call	_strchr
		test	eax, eax
		jnz	short loc_645C2B0E
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		mov	[esp+28h+Str], eax ; C
		mov	eax, ds:__imp__isgraph
		call	eax ; __imp__isgraph
		test	eax, eax
		jnz	short loc_645C2B8B

loc_645C2B0E:				; CODE XREF: sub_645C2A60+79j
					; sub_645C2A60+95j
		cmp	[ebp+var_14], 0
		jz	short loc_645C2B85
		mov	eax, [ebp+var_18]
		lea	edx, [eax+4]
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		cmp	edx, eax
		jbe	short loc_645C2B2F
		mov	[ebp+var_C], 13h
		jmp	loc_645C2C09
; ---------------------------------------------------------------------------

loc_645C2B2F:				; CODE XREF: sub_645C2A60+C1j
		mov	eax, [ebp+var_14]
		mov	byte ptr [eax],	5Ch
		mov	eax, [ebp+var_14]
		add	eax, 1
		mov	byte ptr [eax],	78h
		mov	eax, [ebp+var_14]
		lea	edx, [eax+2]
		mov	ecx, off_645D1018
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		and	eax, 0F0h
		sar	eax, 4
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		mov	[edx], al
		mov	eax, [ebp+var_14]
		lea	edx, [eax+3]
		mov	ecx, off_645D1018
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax]
		movsx	eax, al
		and	eax, 0Fh
		add	eax, ecx
		movzx	eax, byte ptr [eax]
		mov	[edx], al
		add	[ebp+var_14], 4

loc_645C2B85:				; CODE XREF: sub_645C2A60+B2j
		add	[ebp+var_18], 4
		jmp	short loc_645C2BBC
; ---------------------------------------------------------------------------

loc_645C2B8B:				; CODE XREF: sub_645C2A60+ACj
		cmp	[ebp+var_14], 0
		jz	short loc_645C2BB8
		mov	eax, [ebp+var_18]
		lea	edx, [eax+1]
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		cmp	edx, eax
		jbe	short loc_645C2BA9
		mov	[ebp+var_C], 13h
		jmp	short loc_645C2C09
; ---------------------------------------------------------------------------

loc_645C2BA9:				; CODE XREF: sub_645C2A60+13Ej
		mov	eax, [ebp+var_10]
		movzx	edx, byte ptr [eax]
		mov	eax, [ebp+var_14]
		mov	[eax], dl
		add	[ebp+var_14], 1

loc_645C2BB8:				; CODE XREF: sub_645C2A60+12Fj
		add	[ebp+var_18], 1

loc_645C2BBC:				; CODE XREF: sub_645C2A60+129j
		add	[ebp+var_10], 1

loc_645C2BC0:				; CODE XREF: sub_645C2A60+67j
					; sub_645C2A60:loc_645C2ACCj
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_645C2AD1
		cmp	[ebp+var_14], 0
		jz	short loc_645C2BF6
		mov	eax, [ebp+var_18]
		lea	edx, [eax+1]
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		cmp	edx, eax
		jbe	short loc_645C2BEC
		mov	[ebp+var_C], 13h
		jmp	short loc_645C2C09
; ---------------------------------------------------------------------------

loc_645C2BEC:				; CODE XREF: sub_645C2A60+181j
		mov	eax, [ebp+var_14]
		mov	byte ptr [eax],	0
		add	[ebp+var_14], 1

loc_645C2BF6:				; CODE XREF: sub_645C2A60+172j
		add	[ebp+var_18], 1
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+var_18]
		mov	[eax], edx
		mov	[ebp+var_C], 0

loc_645C2C09:				; CODE XREF: sub_645C2A60+CAj
					; sub_645C2A60+147j ...
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C2A60	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C2C0E	proc near		; CODE XREF: pkcs11h_token_deserializeTokenId+184p
					; pkcs11h_token_deserializeTokenId+1D3p

Src		= dword	ptr -38h
Format		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_1B		= byte ptr -1Bh
var_1A		= byte ptr -1Ah
var_19		= byte ptr -19h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], 6
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], eax
		mov	[ebp+var_18], 0
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C2C52
		mov	[esp+38h+var_30], 0E7h ; int
		mov	[esp+38h+Format], offset aPkcs11hUtil_c	; "pkcs11h-util.c"
		mov	[esp+38h+Src], offset aSourceNull ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2C53
; ---------------------------------------------------------------------------

loc_645C2C52:				; CODE XREF: sub_645C2C0E+24j
		nop

loc_645C2C53:				; CODE XREF: sub_645C2C0E+42j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C2C7A
		mov	[esp+38h+var_30], 0E8h ; int
		mov	[esp+38h+Format], offset aPkcs11hUtil_c	; "pkcs11h-util.c"
		mov	[esp+38h+Src], offset aMaxNull ; "max!=NULL"
		call	sub_645D02E0
		jmp	loc_645C2D25
; ---------------------------------------------------------------------------

loc_645C2C7A:				; CODE XREF: sub_645C2C0E+49j
		jmp	loc_645C2D25
; ---------------------------------------------------------------------------

loc_645C2C7F:				; CODE XREF: sub_645C2C0E+11Fj
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax]
		cmp	al, 5Ch
		jnz	short loc_645C2CF0
		cmp	[ebp+var_14], 0
		jz	short loc_645C2CEA
		mov	eax, [ebp+var_18]
		lea	edx, [eax+1]
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		cmp	edx, eax
		jbe	short loc_645C2CAA
		mov	[ebp+var_C], 13h
		jmp	loc_645C2D6E
; ---------------------------------------------------------------------------

loc_645C2CAA:				; CODE XREF: sub_645C2C0E+8Ej
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax+2]
		mov	[ebp+var_1B], al
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax+3]
		mov	[ebp+var_1A], al
		mov	[ebp+var_19], 0
		lea	eax, [ebp+var_20]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+Format], offset a08x ;	"%08x"
		lea	eax, [ebp+var_1B]
		mov	[esp+38h+Src], eax ; Src
		call	_sscanf
		mov	eax, [ebp+var_20]
		mov	edx, eax
		mov	eax, [ebp+var_14]
		mov	[eax], dl
		add	[ebp+var_14], 1

loc_645C2CEA:				; CODE XREF: sub_645C2C0E+7Fj
		add	[ebp+var_10], 4
		jmp	short loc_645C2D21
; ---------------------------------------------------------------------------

loc_645C2CF0:				; CODE XREF: sub_645C2C0E+79j
		cmp	[ebp+var_14], 0
		jz	short loc_645C2D1D
		mov	eax, [ebp+var_18]
		lea	edx, [eax+1]
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		cmp	edx, eax
		jbe	short loc_645C2D0E
		mov	[ebp+var_C], 13h
		jmp	short loc_645C2D6E
; ---------------------------------------------------------------------------

loc_645C2D0E:				; CODE XREF: sub_645C2C0E+F5j
		mov	eax, [ebp+var_10]
		movzx	edx, byte ptr [eax]
		mov	eax, [ebp+var_14]
		mov	[eax], dl
		add	[ebp+var_14], 1

loc_645C2D1D:				; CODE XREF: sub_645C2C0E+E6j
		add	[ebp+var_10], 1

loc_645C2D21:				; CODE XREF: sub_645C2C0E+E0j
		add	[ebp+var_18], 1

loc_645C2D25:				; CODE XREF: sub_645C2C0E+67j
					; sub_645C2C0E:loc_645C2C7Aj
		mov	eax, [ebp+var_10]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	loc_645C2C7F
		cmp	[ebp+var_14], 0
		jz	short loc_645C2D5B
		mov	eax, [ebp+var_18]
		lea	edx, [eax+1]
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		cmp	edx, eax
		jbe	short loc_645C2D51
		mov	[ebp+var_C], 13h
		jmp	short loc_645C2D6E
; ---------------------------------------------------------------------------

loc_645C2D51:				; CODE XREF: sub_645C2C0E+138j
		mov	eax, [ebp+var_14]
		mov	byte ptr [eax],	0
		add	[ebp+var_14], 1

loc_645C2D5B:				; CODE XREF: sub_645C2C0E+129j
		add	[ebp+var_18], 1
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+var_18]
		mov	[eax], edx
		mov	[ebp+var_C], 0

loc_645C2D6E:				; CODE XREF: sub_645C2C0E+97j
					; sub_645C2C0E+FEj ...
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C2C0E	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C2D74	proc near		; CODE XREF: sub_645C396C+166p
					; pkcs11h_token_enumTokenIds+130p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_1C		= byte ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_1C], al
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C2DBA
		mov	[esp+38h+var_30], 48h ;	int
		mov	[esp+38h+var_34], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+38h+var_38], offset aProviderNull ; "provider!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2DBB
; ---------------------------------------------------------------------------

loc_645C2DBA:				; CODE XREF: sub_645C2D74+26j
		nop

loc_645C2DBB:				; CODE XREF: sub_645C2D74+44j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C2DDF
		mov	[esp+38h+var_30], 49h ;	int
		mov	[esp+38h+var_34], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+38h+var_38], offset aPslotlistNull	; "pSlotList!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2DE0
; ---------------------------------------------------------------------------

loc_645C2DDF:				; CODE XREF: sub_645C2D74+4Bj
		nop

loc_645C2DE0:				; CODE XREF: sub_645C2D74+69j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645C2E04
		mov	[esp+38h+var_30], 4Ah ;	int
		mov	[esp+38h+var_34], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+38h+var_38], offset aPulcountNull ; "pulCount!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2E05
; ---------------------------------------------------------------------------

loc_645C2E04:				; CODE XREF: sub_645C2D74+70j
		nop

loc_645C2E05:				; CODE XREF: sub_645C2D74+8Ej
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C2E46
		cmp	[ebp+var_1C], 0
		setnz	al
		movzx	eax, al
		mov	edx, [ebp+arg_C]
		mov	[esp+38h+var_24], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+38h+var_28], edx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs11h ; "PKCS#11: _pkcs11h_session_getSlotList e"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C2E46:				; CODE XREF: sub_645C2D74+99j
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_645C2E6E
		mov	[ebp+var_C], 190h
		jmp	loc_645C2F17
; ---------------------------------------------------------------------------

loc_645C2E6E:				; CODE XREF: sub_645C2D74+ECj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+430h]
		mov	eax, [eax+12h]
		movzx	edx, [ebp+var_1C]
		lea	ecx, [ebp+var_14]
		mov	[esp+38h+var_30], ecx
		mov	[esp+38h+var_34], 0
		mov	[esp+38h+var_38], edx
		call	eax
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C2E9D
		jmp	short loc_645C2F17
; ---------------------------------------------------------------------------

loc_645C2E9D:				; CODE XREF: sub_645C2D74+125j
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_645C2EC4
		mov	eax, [ebp+var_14]
		shl	eax, 2
		mov	[esp+38h+var_34], eax ;	size_t
		lea	eax, [ebp+var_10]
		mov	[esp+38h+var_38], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C2EC4
		jmp	short loc_645C2F17
; ---------------------------------------------------------------------------

loc_645C2EC4:				; CODE XREF: sub_645C2D74+12Ej
					; sub_645C2D74+14Cj
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_645C2EF9
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+430h]
		mov	eax, [eax+12h]
		mov	ecx, [ebp+var_10]
		movzx	edx, [ebp+var_1C]
		lea	ebx, [ebp+var_14]
		mov	[esp+38h+var_30], ebx
		mov	[esp+38h+var_34], ecx
		mov	[esp+38h+var_38], edx
		call	eax
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C2EF9
		jmp	short loc_645C2F17
; ---------------------------------------------------------------------------

loc_645C2EF9:				; CODE XREF: sub_645C2D74+155j
					; sub_645C2D74+181j
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+arg_8]
		mov	[eax], edx
		mov	[ebp+var_10], 0
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		mov	[ebp+var_C], 0

loc_645C2F17:				; CODE XREF: sub_645C2D74+F5j
					; sub_645C2D74+127j ...
		mov	eax, [ebp+var_10]
		test	eax, eax
		jz	short loc_645C2F29
		lea	eax, [ebp+var_10]
		mov	[esp+38h+var_38], eax
		call	sub_645C156B

loc_645C2F29:				; CODE XREF: sub_645C2D74+1A8j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C2F66
		mov	eax, [ebp+arg_C]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs1_0 ; "PKCS#11: _pkcs11h_session_getSlotList r"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C2F66:				; CODE XREF: sub_645C2D74+1BDj
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
sub_645C2D74	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C2F6F	proc near		; CODE XREF: sub_645C5835+1A6p
					; sub_645C5D22+187p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C2FA0
		mov	[esp+38h+var_30], 9Dh ;	int
		mov	[esp+38h+var_34], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+38h+var_38], offset aSessionNull ;	"session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2FA1
; ---------------------------------------------------------------------------

loc_645C2FA0:				; CODE XREF: sub_645C2F6F+11j
		nop

loc_645C2FA1:				; CODE XREF: sub_645C2F6F+2Fj
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C2FC5
		mov	[esp+38h+var_30], 9Eh ;	int
		mov	[esp+38h+var_34], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+38h+var_38], offset aAttrsNull ; "attrs!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C2FC6
; ---------------------------------------------------------------------------

loc_645C2FC5:				; CODE XREF: sub_645C2F6F+36j
		nop

loc_645C2FC6:				; CODE XREF: sub_645C2F6F+54j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3000
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs1_1 ; "PKCS#11: _pkcs11h_session_getObjectAttr"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C3000:				; CODE XREF: sub_645C2F6F+5Fj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+62h]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+14h]
		mov	ecx, [ebp+arg_C]
		mov	[esp+38h+var_2C], ecx
		mov	ecx, [ebp+arg_8]
		mov	[esp+38h+var_30], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esp+38h+var_34], ecx
		mov	[esp+38h+var_38], edx
		call	eax
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C303D
		jmp	loc_645C3132
; ---------------------------------------------------------------------------

loc_645C303D:				; CODE XREF: sub_645C2F6F+C7j
		mov	[ebp+var_10], 0
		jmp	loc_645C30ED
; ---------------------------------------------------------------------------

loc_645C3049:				; CODE XREF: sub_645C2F6F+184j
		mov	edx, [ebp+var_10]
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 2
		mov	edx, eax
		mov	eax, [ebp+arg_8]
		add	eax, edx
		mov	eax, [eax+8]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_645C3070
		mov	[ebp+var_C], 13h
		jmp	loc_645C3132
; ---------------------------------------------------------------------------

loc_645C3070:				; CODE XREF: sub_645C2F6F+F3j
		mov	edx, [ebp+var_10]
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 2
		mov	edx, eax
		mov	eax, [ebp+arg_8]
		add	eax, edx
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_645C30A6
		mov	edx, [ebp+var_10]
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 2
		mov	edx, eax
		mov	eax, [ebp+arg_8]
		add	eax, edx
		mov	dword ptr [eax+4], 0
		jmp	short loc_645C30E9
; ---------------------------------------------------------------------------

loc_645C30A6:				; CODE XREF: sub_645C2F6F+119j
		mov	edx, [ebp+var_10]
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 2
		mov	edx, eax
		mov	eax, [ebp+arg_8]
		add	eax, edx
		mov	ecx, [eax+8]
		mov	edx, [ebp+var_10]
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 2
		mov	edx, eax
		mov	eax, [ebp+arg_8]
		add	eax, edx
		add	eax, 4
		mov	[esp+38h+var_34], ecx ;	size_t
		mov	[esp+38h+var_38], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C30E9
		jmp	short loc_645C3132
; ---------------------------------------------------------------------------

loc_645C30E9:				; CODE XREF: sub_645C2F6F+135j
					; sub_645C2F6F+176j
		add	[ebp+var_10], 1

loc_645C30ED:				; CODE XREF: sub_645C2F6F+D5j
		mov	eax, [ebp+var_10]
		cmp	eax, [ebp+arg_C]
		jb	loc_645C3049
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+62h]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+14h]
		mov	ecx, [ebp+arg_C]
		mov	[esp+38h+var_2C], ecx
		mov	ecx, [ebp+arg_8]
		mov	[esp+38h+var_30], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esp+38h+var_34], ecx
		mov	[esp+38h+var_38], edx
		call	eax
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C3132
		nop

loc_645C3132:				; CODE XREF: sub_645C2F6F+C9j
					; sub_645C2F6F+FCj ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3166
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs1_2 ; "PKCS#11: _pkcs11h_session_getObjectAttr"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C3166:				; CODE XREF: sub_645C2F6F+1CBj
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C2F6F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C316B	proc near		; CODE XREF: sub_645C5835+2BAp
					; sub_645C5D22+28Dp ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C3195
		mov	[esp+28h+var_20], 0E6h ; int
		mov	[esp+28h+var_24], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+28h+var_28], offset aAttrsNull ; "attrs!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C3196
; ---------------------------------------------------------------------------

loc_645C3195:				; CODE XREF: sub_645C316B+Aj
		nop

loc_645C3196:				; CODE XREF: sub_645C316B+28j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C31C2
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11_pkcs1_3 ; "PKCS#11: _pkcs11h_session_freeObjectAtt"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C31C2:				; CODE XREF: sub_645C316B+33j
		mov	[ebp+var_C], 0
		jmp	short loc_645C3221
; ---------------------------------------------------------------------------

loc_645C31CB:				; CODE XREF: sub_645C316B+BCj
		mov	edx, [ebp+var_C]
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 2
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645C321D
		mov	edx, [ebp+var_C]
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 2
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		add	eax, edx
		add	eax, 4
		mov	[esp+28h+var_28], eax
		call	sub_645C156B
		mov	edx, [ebp+var_C]
		mov	eax, edx
		add	eax, eax
		add	eax, edx
		shl	eax, 2
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	dword ptr [eax+4], 0

loc_645C321D:				; CODE XREF: sub_645C316B+78j
		add	[ebp+var_C], 1

loc_645C3221:				; CODE XREF: sub_645C316B+5Ej
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+arg_4]
		jb	short loc_645C31CB
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3247
		mov	[esp+28h+var_24], offset aPkcs11_pkcs1_4 ; "PKCS#11: _pkcs11h_session_freeObjectAtt"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C3247:				; CODE XREF: sub_645C316B+C6j
		mov	eax, 0
		leave
		retn
sub_645C316B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C324E	proc near		; CODE XREF: sub_645C3E1B+110p
					; sub_645C5835+149p ...

Dst		= dword	ptr -1D8h
Src		= dword	ptr -1D4h
Size		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C4		= dword	ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1B4		= dword	ptr -1B4h
var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 1D4h
		mov	[ebp+var_18], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0FFFFFFFFh
		mov	[ebp+var_14], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C329F
		mov	[esp+1D8h+Size], 113h ;	int
		mov	[esp+1D8h+Src],	offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+1D8h+Dst],	offset aSessionNull ; "session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C32A0
; ---------------------------------------------------------------------------

loc_645C329F:				; CODE XREF: sub_645C324E+31j
		nop

loc_645C32A0:				; CODE XREF: sub_645C324E+4Fj
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C32D0
		cmp	[ebp+arg_8], 0
		jz	short loc_645C32D0
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C32D0
		mov	[esp+1D8h+Size], 114h ;	int
		mov	[esp+1D8h+Src],	offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+1D8h+Dst],	offset aFilterNullFilt ; "!(filter==NULL && filter_attrs!=0) ||	f"...
		call	sub_645D02E0
		jmp	short loc_645C32D1
; ---------------------------------------------------------------------------

loc_645C32D0:				; CODE XREF: sub_645C324E+56j
					; sub_645C324E+5Cj ...
		nop

loc_645C32D1:				; CODE XREF: sub_645C324E+80j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645C32F5
		mov	[esp+1D8h+Size], 115h ;	int
		mov	[esp+1D8h+Src],	offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+1D8h+Dst],	offset aP_objectsNull ;	"p_objects!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C32F6
; ---------------------------------------------------------------------------

loc_645C32F5:				; CODE XREF: sub_645C324E+87j
		nop

loc_645C32F6:				; CODE XREF: sub_645C324E+A5j
		cmp	[ebp+arg_10], 0
		jnz	short loc_645C331A
		mov	[esp+1D8h+Size], 116h ;	int
		mov	[esp+1D8h+Src],	offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+1D8h+Dst],	offset aP_objects_foun ; "p_objects_found!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C331B
; ---------------------------------------------------------------------------

loc_645C331A:				; CODE XREF: sub_645C324E+ACj
		nop

loc_645C331B:				; CODE XREF: sub_645C324E+CAj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C335C
		mov	eax, [ebp+arg_10]
		mov	[esp+1D8h+var_1C0], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+1D8h+var_1C4], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+1D8h+var_1C8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+1D8h+var_1CC], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+1D8h+Size], eax
		mov	[esp+1D8h+Src],	offset aPkcs11_pkcs1_5 ; "PKCS#11: _pkcs11h_session_findObjects	e"...
		mov	[esp+1D8h+Dst],	5
		call	sub_645CBF0E

loc_645C335C:				; CODE XREF: sub_645C324E+D5j
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+6Ah]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+14h]
		mov	ecx, [ebp+arg_8]
		mov	[esp+1D8h+Size], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esp+1D8h+Src],	ecx
		mov	[esp+1D8h+Dst],	edx
		call	eax
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C33A4
		jmp	loc_645C3547
; ---------------------------------------------------------------------------

loc_645C33A4:				; CODE XREF: sub_645C324E+14Fj
		mov	[ebp+var_18], 1
		jmp	loc_645C34AE
; ---------------------------------------------------------------------------

loc_645C33B0:				; CODE XREF: sub_645C324E+2A7j
		mov	[ebp+var_1B4], 0
		mov	eax, [ebp+var_1AC]
		cmp	eax, [ebp+var_10]
		jnz	short loc_645C33EC
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	loc_645C34FB
		mov	[esp+1D8h+Src],	offset aPkcs11BadPkcs1 ; "PKCS#11: Bad PKCS#11 C_FindObjects impl"...
		mov	[esp+1D8h+Dst],	2
		call	sub_645CBF0E
		jmp	loc_645C34FB
; ---------------------------------------------------------------------------

loc_645C33EC:				; CODE XREF: sub_645C324E+175j
		mov	eax, [ebp+var_1AC]
		mov	[ebp+var_10], eax
		mov	edx, [ebp+var_1B0]
		mov	eax, [ebp+var_C]
		add	eax, edx
		shl	eax, 2
		mov	[esp+1D8h+Src],	eax ; size_t
		lea	eax, [ebp+var_1B4]
		mov	[esp+1D8h+Dst],	eax ; int
		call	sub_645C14C0
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	loc_645C3547
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_645C344C
		mov	eax, [ebp+var_C]
		lea	ecx, ds:0[eax*4]
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+var_1B4]
		mov	[esp+1D8h+Size], ecx ; Size
		mov	[esp+1D8h+Src],	edx ; Src
		mov	[esp+1D8h+Dst],	eax ; Dst
		call	_memmove

loc_645C344C:				; CODE XREF: sub_645C324E+1D9j
		mov	eax, [ebp+var_1B0]
		shl	eax, 2
		mov	edx, [ebp+var_1B4]
		mov	ecx, [ebp+var_C]
		shl	ecx, 2
		add	edx, ecx
		mov	[esp+1D8h+Size], eax ; Size
		lea	eax, [ebp+var_1AC]
		mov	[esp+1D8h+Src],	eax ; Src
		mov	[esp+1D8h+Dst],	edx ; Dst
		call	_memmove
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_645C3492
		lea	eax, [ebp+var_1C]
		mov	[esp+1D8h+Dst],	eax
		call	sub_645C156B
		mov	[ebp+var_1C], 0

loc_645C3492:				; CODE XREF: sub_645C324E+230j
		mov	eax, [ebp+var_1B4]
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1B0]
		add	[ebp+var_C], eax
		mov	[ebp+var_1B4], 0

loc_645C34AE:				; CODE XREF: sub_645C324E+15Dj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+6Eh]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+14h]
		lea	ecx, [ebp+var_1B0]
		mov	[esp+1D8h+var_1CC], ecx
		mov	[esp+1D8h+Size], 64h
		lea	ecx, [ebp+var_1AC]
		mov	[esp+1D8h+Src],	ecx
		mov	[esp+1D8h+Dst],	edx
		call	eax
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_645C34FB
		mov	eax, [ebp+var_1B0]
		test	eax, eax
		jnz	loc_645C33B0

loc_645C34FB:				; CODE XREF: sub_645C324E+17Fj
					; sub_645C324E+199j ...
		cmp	[ebp+var_18], 0
		jz	short loc_645C3522
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+72h]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+14h]
		mov	[esp+1D8h+Dst],	edx
		call	eax
		mov	[ebp+var_18], 0

loc_645C3522:				; CODE XREF: sub_645C324E+2B1j
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+var_C]
		mov	[eax], edx
		mov	[ebp+var_1C], 0
		mov	[ebp+var_C], 0
		mov	[ebp+var_14], 0

loc_645C3547:				; CODE XREF: sub_645C324E+151j
					; sub_645C324E+1CEj
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_645C3567
		lea	eax, [ebp+var_1C]
		mov	[esp+1D8h+Dst],	eax
		call	sub_645C156B
		mov	[ebp+var_1C], 0
		mov	[ebp+var_C], 0

loc_645C3567:				; CODE XREF: sub_645C324E+2FEj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C35A4
		mov	eax, [ebp+arg_10]
		mov	ebx, [eax]
		mov	eax, [ebp+var_14]
		mov	[esp+1D8h+Dst],	eax
		call	pkcs11h_getMessage
		mov	[esp+1D8h+var_1C8], ebx
		mov	[esp+1D8h+var_1CC], eax
		mov	eax, [ebp+var_14]
		mov	[esp+1D8h+Size], eax
		mov	[esp+1D8h+Src],	offset aPkcs11_pkcs1_6 ; "PKCS#11: _pkcs11h_session_findObjects	r"...
		mov	[esp+1D8h+Dst],	5
		call	sub_645CBF0E

loc_645C35A4:				; CODE XREF: sub_645C324E+321j
		mov	eax, [ebp+var_14]
		add	esp, 1D4h
		pop	ebx
		pop	ebp
		retn
sub_645C324E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645C35B0(void	*, int)
sub_645C35B0	proc near		; CODE XREF: pkcs11h_token_logout+72p
					; pkcs11h_token_login+A3p ...

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_18], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C35F7
		mov	[esp+48h+var_40], 199h ; int
		mov	[esp+48h+var_44], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+48h+var_48], offset aToken_idNull ; "token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C35F8
; ---------------------------------------------------------------------------

loc_645C35F7:				; CODE XREF: sub_645C35B0+27j
		nop

loc_645C35F8:				; CODE XREF: sub_645C35B0+45j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C361C
		mov	[esp+48h+var_40], 19Ah ; int
		mov	[esp+48h+var_44], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+48h+var_48], offset aP_sessionNull	; "p_session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C361D
; ---------------------------------------------------------------------------

loc_645C361C:				; CODE XREF: sub_645C35B0+4Cj
		nop

loc_645C361D:				; CODE XREF: sub_645C35B0+6Aj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3649
		mov	eax, [ebp+arg_4]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11_pkcs1_7 ; "PKCS#11: _pkcs11h_session_getSessionByT"...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645C3649:				; CODE XREF: sub_645C35B0+75j
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0
		mov	eax, ds:dword_645D8030
		add	eax, 3Ch
		mov	[esp+48h+var_48], eax
		call	sub_645C24B4
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C3670
		jmp	loc_645C37C8
; ---------------------------------------------------------------------------

loc_645C3670:				; CODE XREF: sub_645C35B0+B9j
		mov	[ebp+var_C], 1
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+0Ch]
		mov	[ebp+var_14], eax
		jmp	short loc_645C36D5
; ---------------------------------------------------------------------------

loc_645C3684:				; CODE XREF: sub_645C35B0+130j
		mov	eax, [ebp+var_14]
		mov	eax, [eax+10h]
		mov	edx, [ebp+arg_0]
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], eax
		call	pkcs11h_token_sameTokenId
		test	eax, eax
		jz	short loc_645C36CD
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C36BB
		mov	[esp+48h+var_44], offset aPkcs11UsingCac ; "PKCS#11: Using cached session"
		mov	[esp+48h+var_48], 4
		call	sub_645CBF0E

loc_645C36BB:				; CODE XREF: sub_645C35B0+F5j
		mov	eax, [ebp+var_14]
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_1C]
		mov	edx, [eax+4]
		add	edx, 1
		mov	[eax+4], edx

loc_645C36CD:				; CODE XREF: sub_645C35B0+EBj
		mov	eax, [ebp+var_14]
		mov	eax, [eax]
		mov	[ebp+var_14], eax

loc_645C36D5:				; CODE XREF: sub_645C35B0+D2j
		cmp	[ebp+var_14], 0
		jz	short loc_645C36E2
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_645C3684

loc_645C36E2:				; CODE XREF: sub_645C35B0+129j
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jnz	loc_645C37B2
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C370B
		mov	[esp+48h+var_44], offset aPkcs11Creating ; "PKCS#11: Creating a	new session"
		mov	[esp+48h+var_48], 4
		call	sub_645CBF0E

loc_645C370B:				; CODE XREF: sub_645C35B0+145j
		mov	[esp+48h+var_44], 30h ;	size_t
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C372C
		jmp	loc_645C37C8
; ---------------------------------------------------------------------------

loc_645C372C:				; CODE XREF: sub_645C35B0+175j
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+4], 1
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+14h], 0FFFFFFFFh
		mov	eax, [ebp+var_1C]
		mov	edx, ds:dword_645D8030
		mov	edx, [edx+4]
		mov	[eax+1Ch], edx
		mov	eax, [ebp+var_1C]
		lea	edx, [eax+10h]
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_44], eax ;	void *
		mov	[esp+48h+var_48], edx ;	int
		call	pkcs11h_token_duplicateTokenId
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C376F
		jmp	short loc_645C37C8
; ---------------------------------------------------------------------------

loc_645C376F:				; CODE XREF: sub_645C35B0+1BBj
		mov	eax, [ebp+var_1C]
		add	eax, 2Ch
		mov	[esp+48h+var_48], eax
		call	sub_645C2463
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C3788
		jmp	short loc_645C37C8
; ---------------------------------------------------------------------------

loc_645C3788:				; CODE XREF: sub_645C35B0+1D4j
		mov	[ebp+var_10], 1
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+8], 1
		mov	eax, [ebp+var_1C]
		mov	edx, ds:dword_645D8030
		mov	edx, [edx+0Ch]
		mov	[eax], edx
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+var_1C]
		mov	[eax+0Ch], edx

loc_645C37B2:				; CODE XREF: sub_645C35B0+137j
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+arg_4]
		mov	[eax], edx
		mov	[ebp+var_1C], 0
		mov	[ebp+var_18], 0

loc_645C37C8:				; CODE XREF: sub_645C35B0+BBj
					; sub_645C35B0+177j ...
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_645C37EE
		cmp	[ebp+var_10], 0
		jz	short loc_645C37E3
		mov	eax, [ebp+var_1C]
		add	eax, 2Ch
		mov	[esp+48h+var_48], eax
		call	sub_645C252D

loc_645C37E3:				; CODE XREF: sub_645C35B0+223j
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], eax
		call	sub_645C156B

loc_645C37EE:				; CODE XREF: sub_645C35B0+21Dj
		cmp	[ebp+var_C], 0
		jz	short loc_645C380B
		mov	eax, ds:dword_645D8030
		add	eax, 3Ch
		mov	[esp+48h+var_48], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C380B:				; CODE XREF: sub_645C35B0+242j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3848
		mov	eax, [ebp+arg_4]
		mov	ebx, [eax]
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_38], ebx
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11_pkcs1_8 ; "PKCS#11: _pkcs11h_session_getSessionByT"...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645C3848:				; CODE XREF: sub_645C35B0+263j
		mov	eax, [ebp+var_18]
		add	esp, 44h
		pop	ebx
		pop	ebp
		retn
sub_645C35B0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C3851	proc near		; CODE XREF: pkcs11h_token_logout+E7p
					; pkcs11h_token_login+1FBp ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 1
		mov	[ebp+var_10], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C3889
		mov	[esp+28h+var_20], 212h ; int
		mov	[esp+28h+var_24], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+28h+var_28], offset aSessionNull ;	"session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C388A
; ---------------------------------------------------------------------------

loc_645C3889:				; CODE XREF: sub_645C3851+18j
		nop

loc_645C388A:				; CODE XREF: sub_645C3851+36j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+4]
		test	eax, eax
		jns	short loc_645C38B2
		mov	[esp+28h+var_20], 213h ; int
		mov	[esp+28h+var_24], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+28h+var_28], offset aSessionReferen ; "session->reference_count>=0"
		call	sub_645D02E0
		jmp	short loc_645C38B3
; ---------------------------------------------------------------------------

loc_645C38B2:				; CODE XREF: sub_645C3851+41j
		nop

loc_645C38B3:				; CODE XREF: sub_645C3851+5Fj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C38D8
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11_pkcs1_9 ; "PKCS#11: _pkcs11h_session_release entry"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C38D8:				; CODE XREF: sub_645C3851+6Aj
		mov	eax, [ebp+arg_0]
		add	eax, 2Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C38F1
		jmp	short loc_645C3918
; ---------------------------------------------------------------------------

loc_645C38F1:				; CODE XREF: sub_645C3851+9Cj
		mov	[ebp+var_C], 1
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+4]
		test	eax, eax
		jle	short loc_645C3911
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+4]
		lea	edx, [eax-1]
		mov	eax, [ebp+arg_0]
		mov	[eax+4], edx

loc_645C3911:				; CODE XREF: sub_645C3851+AFj
		mov	[ebp+var_10], 0

loc_645C3918:				; CODE XREF: sub_645C3851+9Ej
		cmp	[ebp+var_C], 0
		jz	short loc_645C3933
		mov	eax, [ebp+arg_0]
		add	eax, 2Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C3933:				; CODE XREF: sub_645C3851+CBj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3967
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11_pkcs_10 ; "PKCS#11: _pkcs11h_session_release retur"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C3967:				; CODE XREF: sub_645C3851+EAj
		mov	eax, [ebp+var_10]
		leave
		retn
sub_645C3851	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C396C	proc near		; CODE XREF: sub_645C414B+BFp
					; pkcs11h_token_login+10Ep ...

var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_CC		= byte ptr -0CCh
var_6C		= dword	ptr -6Ch
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 0F4h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 6
		mov	[ebp+var_14], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C39AF
		mov	[esp+0F8h+var_F0], 24Bh	; int
		mov	[esp+0F8h+var_F4], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+0F8h+var_F8], offset aSessionNull ; "session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C39B0
; ---------------------------------------------------------------------------

loc_645C39AF:				; CODE XREF: sub_645C396C+23j
		nop

loc_645C39B0:				; CODE XREF: sub_645C396C+41j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645C39D4
		mov	[esp+0F8h+var_F0], 24Dh	; int
		mov	[esp+0F8h+var_F4], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+0F8h+var_F8], offset aP_slotNull ;	"p_slot!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C39D5
; ---------------------------------------------------------------------------

loc_645C39D4:				; CODE XREF: sub_645C396C+48j
		nop

loc_645C39D5:				; CODE XREF: sub_645C396C+66j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3A0F
		mov	eax, [ebp+arg_C]
		mov	[esp+0F8h+var_E4], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+0F8h+var_E8], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+0F8h+var_EC], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], offset aPkcs11_pkcs_11 ; "PKCS#11: _pkcs11h_session_reset entry s"...
		mov	[esp+0F8h+var_F8], 5
		call	sub_645CBF0E

loc_645C3A0F:				; CODE XREF: sub_645C396C+71j
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0FFFFFFFFh
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3A7A
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		lea	ebx, [eax+443h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		lea	ecx, [eax+432h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		lea	edx, [eax+421h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		add	eax, 400h
		mov	[esp+0F8h+var_E4], ebx
		mov	[esp+0F8h+var_E8], ecx
		mov	[esp+0F8h+var_EC], edx
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], offset aPkcs11_pkcs_12 ; "PKCS#11: _pkcs11h_session_reset Expecte"...
		mov	[esp+0F8h+var_F8], 5
		call	sub_645CBF0E
		jmp	loc_645C3DC1
; ---------------------------------------------------------------------------

loc_645C3A7A:				; CODE XREF: sub_645C396C+B4j
		jmp	loc_645C3DC1
; ---------------------------------------------------------------------------

loc_645C3A7F:				; CODE XREF: sub_645C396C+459j
		mov	[ebp+var_18], 0
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_18], eax
		jmp	loc_645C3CE9
; ---------------------------------------------------------------------------

loc_645C3A96:				; CODE XREF: sub_645C396C+387j
		mov	[ebp+var_24], 0
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_645C3AB6
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		cmp	eax, [ebp+var_18]
		jnz	loc_645C3CE1

loc_645C3AB6:				; CODE XREF: sub_645C396C+139j
		lea	eax, [ebp+var_28]
		mov	[esp+0F8h+var_EC], eax
		lea	eax, [ebp+var_24]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], 1
		mov	eax, [ebp+var_18]
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C2D74
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C3B2B
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C3B26
		mov	eax, [ebp+var_10]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_getMessage
		mov	edx, [ebp+var_18]
		add	edx, 408h
		mov	[esp+0F8h+var_E8], eax
		mov	eax, [ebp+var_10]
		mov	[esp+0F8h+var_EC], eax
		mov	[esp+0F8h+var_F0], edx
		mov	[esp+0F8h+var_F4], offset aPkcs11CannotGe ; "PKCS#11: Cannot get slot list for provi"...
		mov	[esp+0F8h+var_F8], 4
		call	sub_645CBF0E
		jmp	loc_645C3CC8
; ---------------------------------------------------------------------------

loc_645C3B26:				; CODE XREF: sub_645C396C+17Cj
		jmp	loc_645C3CC8
; ---------------------------------------------------------------------------

loc_645C3B2B:				; CODE XREF: sub_645C396C+172j
		mov	[ebp+var_1C], 0
		jmp	loc_645C3CB6
; ---------------------------------------------------------------------------

loc_645C3B37:				; CODE XREF: sub_645C396C+356j
		mov	[ebp+var_2C], 0
		mov	eax, [ebp+var_18]
		mov	eax, [eax+430h]
		mov	eax, [eax+1Ah]
		mov	edx, [ebp+var_24]
		mov	ecx, [ebp+var_1C]
		shl	ecx, 2
		add	edx, ecx
		mov	edx, [edx]
		lea	ecx, [ebp+var_CC]
		mov	[esp+0F8h+var_F4], ecx
		mov	[esp+0F8h+var_F8], edx
		call	eax
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	loc_645C3C48
		lea	eax, [ebp+var_2C]
		mov	[esp+0F8h+var_F4], eax ; int
		lea	eax, [ebp+var_CC]
		mov	[esp+0F8h+var_F8], eax ; void *
		call	sub_645C48DA
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	loc_645C3C48
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3BE6
		mov	eax, [ebp+var_2C]
		lea	ebx, [eax+443h]
		mov	eax, [ebp+var_2C]
		lea	ecx, [eax+432h]
		mov	eax, [ebp+var_2C]
		lea	edx, [eax+421h]
		mov	eax, [ebp+var_2C]
		add	eax, 400h
		mov	[esp+0F8h+var_E4], ebx
		mov	[esp+0F8h+var_E8], ecx
		mov	[esp+0F8h+var_EC], edx
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], offset aPkcs11_pkcs_13 ; "PKCS#11: _pkcs11h_session_reset Found t"...
		mov	[esp+0F8h+var_F8], 5
		call	sub_645CBF0E

loc_645C3BE6:				; CODE XREF: sub_645C396C+231j
		mov	edx, [ebp+var_2C]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		mov	[esp+0F8h+var_F4], edx
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_token_sameTokenId
		test	eax, eax
		jz	short loc_645C3C41
		mov	[ebp+var_C], 1
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+var_1C]
		shl	edx, 2
		add	eax, edx
		mov	edx, [eax]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_645C3C41
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_18]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_6C]
		and	eax, 100h
		test	eax, eax
		setnz	al
		movzx	edx, al
		mov	eax, [ebp+arg_0]
		mov	[eax+18h], edx

loc_645C3C41:				; CODE XREF: sub_645C396C+291j
					; sub_645C396C+2B4j
		mov	[ebp+var_10], 0

loc_645C3C48:				; CODE XREF: sub_645C396C+201j
					; sub_645C396C+223j
		cmp	[ebp+var_10], 0
		jz	short loc_645C3CA0
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C3CA0
		mov	eax, [ebp+var_10]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_getMessage
		mov	edx, [ebp+var_24]
		mov	ecx, [ebp+var_1C]
		shl	ecx, 2
		add	edx, ecx
		mov	edx, [edx]
		mov	ecx, [ebp+var_18]
		add	ecx, 408h
		mov	[esp+0F8h+var_E4], eax
		mov	eax, [ebp+var_10]
		mov	[esp+0F8h+var_E8], eax
		mov	[esp+0F8h+var_EC], edx
		mov	[esp+0F8h+var_F0], ecx
		mov	[esp+0F8h+var_F4], offset aPkcs11Cannot_0 ; "PKCS#11: Cannot get token information f"...
		mov	[esp+0F8h+var_F8], 4
		call	sub_645CBF0E

loc_645C3CA0:				; CODE XREF: sub_645C396C+2E0j
					; sub_645C396C+2EAj
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	short loc_645C3CB2
		mov	eax, [ebp+var_2C]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_token_freeTokenId

loc_645C3CB2:				; CODE XREF: sub_645C396C+339j
		add	[ebp+var_1C], 1

loc_645C3CB6:				; CODE XREF: sub_645C396C+1C6j
		mov	eax, [ebp+var_28]
		cmp	[ebp+var_1C], eax
		jnb	short loc_645C3CC8
		cmp	[ebp+var_C], 0
		jz	loc_645C3B37

loc_645C3CC8:				; CODE XREF: sub_645C396C+1B5j
					; sub_645C396C:loc_645C3B26j ...
		mov	eax, [ebp+var_24]
		test	eax, eax
		jz	short loc_645C3CE1
		lea	eax, [ebp+var_24]
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C156B
		mov	[ebp+var_24], 0

loc_645C3CE1:				; CODE XREF: sub_645C396C+144j
					; sub_645C396C+361j
		mov	eax, [ebp+var_18]
		mov	eax, [eax]
		mov	[ebp+var_18], eax

loc_645C3CE9:				; CODE XREF: sub_645C396C+125j
		cmp	[ebp+var_18], 0
		jz	short loc_645C3CF9
		cmp	[ebp+var_C], 0
		jz	loc_645C3A96

loc_645C3CF9:				; CODE XREF: sub_645C396C+381j
		cmp	[ebp+var_C], 0
		jnz	short loc_645C3D15
		mov	eax, [ebp+arg_8]
		and	eax, 2
		test	eax, eax
		jnz	short loc_645C3D15
		mov	[ebp+var_10], 0E0h
		jmp	loc_645C3DD2
; ---------------------------------------------------------------------------

loc_645C3D15:				; CODE XREF: sub_645C396C+391j
					; sub_645C396C+39Bj
		cmp	[ebp+var_C], 0
		jnz	loc_645C3DC1
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C3D47
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], offset aPkcs11CallingT ; "PKCS#11: Calling token_prompt hook	for "...
		mov	[esp+0F8h+var_F8], 4
		call	sub_645CBF0E

loc_645C3D47:				; CODE XREF: sub_645C396C+3BBj
		mov	eax, ds:dword_645D8030
		mov	edx, [eax+28h]
		mov	eax, [ebp+var_14]
		lea	ecx, [eax+1]
		mov	[ebp+var_14], ecx
		mov	ecx, [ebp+arg_0]
		mov	ebx, [ecx+10h]
		mov	ecx, ds:dword_645D8030
		mov	ecx, [ecx+18h]
		mov	[esp+0F8h+var_EC], eax
		mov	[esp+0F8h+var_F0], ebx
		mov	eax, [ebp+arg_4]
		mov	[esp+0F8h+var_F4], eax
		mov	[esp+0F8h+var_F8], ecx
		call	edx
		test	eax, eax
		setz	al
		movzx	eax, al
		mov	[ebp+var_20], eax
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C3DB2
		cmp	[ebp+var_20], 0
		setz	al
		movzx	eax, al
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], offset aPkcs11Token_pr ; "PKCS#11: token_prompt returned %d"
		mov	[esp+0F8h+var_F8], 4
		call	sub_645CBF0E

loc_645C3DB2:				; CODE XREF: sub_645C396C+422j
		cmp	[ebp+var_20], 0
		jz	short loc_645C3DC1
		mov	[ebp+var_10], 1
		jmp	short loc_645C3DD2
; ---------------------------------------------------------------------------

loc_645C3DC1:				; CODE XREF: sub_645C396C+109j
					; sub_645C396C:loc_645C3A7Aj ...
		cmp	[ebp+var_C], 0
		jz	loc_645C3A7F
		mov	[ebp+var_10], 0

loc_645C3DD2:				; CODE XREF: sub_645C396C+3A4j
					; sub_645C396C+453j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3E0F
		mov	eax, [ebp+arg_C]
		mov	ebx, [eax]
		mov	eax, [ebp+var_10]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_getMessage
		mov	[esp+0F8h+var_E8], ebx
		mov	[esp+0F8h+var_EC], eax
		mov	eax, [ebp+var_10]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], offset aPkcs11_pkcs_14 ; "PKCS#11: _pkcs11h_session_reset return "...
		mov	[esp+0F8h+var_F8], 5
		call	sub_645CBF0E

loc_645C3E0F:				; CODE XREF: sub_645C396C+46Ej
		mov	eax, [ebp+var_10]
		add	esp, 0F4h
		pop	ebx
		pop	ebp
		retn
sub_645C396C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C3E1B	proc near		; CODE XREF: sub_645C6148+121p
					; sub_645C6148+17Ap ...

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 54h
		mov	[ebp+var_24], 0
		lea	eax, [ebp+arg_4]
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], 4
		mov	[ebp+var_18], 102h
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	[ebp+var_28], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C3E82
		mov	[esp+58h+var_50], 31Fh ; int
		mov	[esp+58h+var_54], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+58h+var_58], offset aIdNull ; "id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C3E83
; ---------------------------------------------------------------------------

loc_645C3E82:				; CODE XREF: sub_645C3E1B+47j
		nop

loc_645C3E83:				; CODE XREF: sub_645C3E1B+65j
		cmp	[ebp+arg_10], 0
		jnz	short loc_645C3EA7
		mov	[esp+58h+var_50], 320h ; int
		mov	[esp+58h+var_54], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+58h+var_58], offset aP_handleNull ; "p_handle!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C3EA8
; ---------------------------------------------------------------------------

loc_645C3EA7:				; CODE XREF: sub_645C3E1B+6Cj
		nop

loc_645C3EA8:				; CODE XREF: sub_645C3E1B+8Aj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3EE9
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+arg_10]
		mov	[esp+58h+var_40], edx
		mov	edx, [ebp+arg_C]
		mov	[esp+58h+var_44], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+58h+var_48], edx
		mov	[esp+58h+var_4C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], offset aPkcs11_pkcs_15 ; "PKCS#11: _pkcs11h_session_getObjectById"...
		mov	[esp+58h+var_58], 5
		call	sub_645CBF0E

loc_645C3EE9:				; CODE XREF: sub_645C3E1B+95j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	sub_645C3FB4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C3F08
		jmp	short loc_645C3F5C
; ---------------------------------------------------------------------------

loc_645C3F08:				; CODE XREF: sub_645C3E1B+E9j
		lea	eax, [ebp+var_2C]
		mov	[esp+58h+var_48], eax
		lea	eax, [ebp+var_28]
		mov	[esp+58h+var_4C], eax
		mov	[esp+58h+var_50], 2
		lea	eax, [ebp+var_24]
		mov	[esp+58h+var_54], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	sub_645C324E
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C3F3B
		jmp	short loc_645C3F5C
; ---------------------------------------------------------------------------

loc_645C3F3B:				; CODE XREF: sub_645C3E1B+11Cj
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jnz	short loc_645C3F4B
		mov	[ebp+var_C], 200h
		jmp	short loc_645C3F5C
; ---------------------------------------------------------------------------

loc_645C3F4B:				; CODE XREF: sub_645C3E1B+125j
		mov	eax, [ebp+var_28]
		mov	edx, [eax]
		mov	eax, [ebp+arg_10]
		mov	[eax], edx
		mov	[ebp+var_C], 0

loc_645C3F5C:				; CODE XREF: sub_645C3E1B+EBj
					; sub_645C3E1B+11Ej ...
		mov	eax, [ebp+var_28]
		test	eax, eax
		jz	short loc_645C3F6E
		lea	eax, [ebp+var_28]
		mov	[esp+58h+var_58], eax
		call	sub_645C156B

loc_645C3F6E:				; CODE XREF: sub_645C3E1B+146j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3FAB
		mov	eax, [ebp+arg_10]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+58h+var_58], eax
		call	pkcs11h_getMessage
		mov	[esp+58h+var_48], ebx
		mov	[esp+58h+var_4C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], offset aPkcs11_pkcs_16 ; "PKCS#11: _pkcs11h_session_getObjectById"...
		mov	[esp+58h+var_58], 5
		call	sub_645CBF0E

loc_645C3FAB:				; CODE XREF: sub_645C3E1B+15Bj
		mov	eax, [ebp+var_C]
		add	esp, 54h
		pop	ebx
		pop	ebp
		retn
sub_645C3E1B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C3FB4	proc near		; CODE XREF: sub_645C3E1B+DDp
					; sub_645C5835+110p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	[ebp+var_C], 6
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C3FE7
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11_pkcs_17 ; "PKCS#11: _pkcs11h_session_validate entr"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C3FE7:				; CODE XREF: sub_645C3FB4+16j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C3FF9
		mov	[ebp+var_C], 0B3h
		jmp	loc_645C40B0
; ---------------------------------------------------------------------------

loc_645C3FF9:				; CODE XREF: sub_645C3FB4+37j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_645C401B
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645C401B
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+14h]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_645C4027

loc_645C401B:				; CODE XREF: sub_645C3FB4+4Dj
					; sub_645C3FB4+5Aj
		mov	[ebp+var_C], 0B3h
		jmp	loc_645C40B0
; ---------------------------------------------------------------------------

loc_645C4027:				; CODE XREF: sub_645C3FB4+65j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C405C
		mov	eax, off_645D1008
		call	eax ; sub_645C16B8
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+20h]
		mov	[esp+28h+var_1C], edx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11_pkcs_18 ; "PKCS#11: _pkcs11h_session_validate sess"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C405C:				; CODE XREF: sub_645C3FB4+7Bj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+20h]
		test	eax, eax
		jz	short loc_645C40A9
		mov	eax, [ebp+arg_0]
		mov	ebx, [eax+20h]
		mov	eax, off_645D1008
		call	eax ; sub_645C16B8
		cmp	ebx, eax
		jge	short loc_645C40A9
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C4095
		mov	[esp+28h+var_24], offset aPkcs11ForcingL ; "PKCS#11: Forcing logout due	to pin time"...
		mov	[esp+28h+var_28], 4
		call	sub_645CBF0E

loc_645C4095:				; CODE XREF: sub_645C3FB4+CBj
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	sub_645C4521
		mov	[ebp+var_C], 0B3h
		jmp	short loc_645C40B0
; ---------------------------------------------------------------------------

loc_645C40A9:				; CODE XREF: sub_645C3FB4+B0j
					; sub_645C3FB4+C1j
		mov	[ebp+var_C], 0

loc_645C40B0:				; CODE XREF: sub_645C3FB4+40j
					; sub_645C3FB4+6Ej ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C40E4
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11_pkcs_19 ; "PKCS#11: _pkcs11h_session_validate retu"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C40E4:				; CODE XREF: sub_645C3FB4+104j
		mov	eax, [ebp+var_C]
		add	esp, 24h
		pop	ebx
		pop	ebp
		retn
sub_645C3FB4	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C40ED	proc near		; CODE XREF: sub_645C414B+28Ap
					; pkcs11h_token_login+126p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C4117
		mov	[esp+18h+var_10], 39Dh ; int
		mov	[esp+18h+var_14], offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+18h+var_18], offset aSessionNull ;	"session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4118
; ---------------------------------------------------------------------------

loc_645C4117:				; CODE XREF: sub_645C40ED+Aj
		nop

loc_645C4118:				; CODE XREF: sub_645C40ED+28j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+1Ch]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_645C412F
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+20h], 0
		jmp	short loc_645C4144
; ---------------------------------------------------------------------------

loc_645C412F:				; CODE XREF: sub_645C40ED+34j
		mov	eax, off_645D1008
		call	eax ; sub_645C16B8
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+1Ch]
		add	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax+20h], edx

loc_645C4144:				; CODE XREF: sub_645C40ED+40j
		mov	eax, 0
		leave
		retn
sub_645C40ED	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C414B	proc near		; CODE XREF: sub_645C6148+1D7p
					; sub_645C8AA5+3D8p ...

Str		= dword	ptr -448h
Val		= dword	ptr -444h
Size		= dword	ptr -440h
var_43C		= dword	ptr -43Ch
var_438		= dword	ptr -438h
var_434		= dword	ptr -434h
var_430		= dword	ptr -430h
Dst		= byte ptr -420h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 444h
		mov	[ebp+var_20], 0FFFFFFFFh
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C4187
		mov	[esp+448h+Size], 3BBh ;	int
		mov	[esp+448h+Val],	offset aPkcs11hSession ; "pkcs11h-session.c"
		mov	[esp+448h+Str],	offset aSessionNull ; "session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4188
; ---------------------------------------------------------------------------

loc_645C4187:				; CODE XREF: sub_645C414B+1Cj
		nop

loc_645C4188:				; CODE XREF: sub_645C414B+3Aj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C41D7
		cmp	[ebp+arg_8], 0
		setnz	al
		movzx	edx, al
		cmp	[ebp+arg_4], 0
		setnz	al
		movzx	eax, al
		mov	ecx, [ebp+arg_10]
		mov	[esp+448h+var_430], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esp+448h+var_434], ecx
		mov	[esp+448h+var_438], edx
		mov	[esp+448h+var_43C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+448h+Size], eax
		mov	[esp+448h+Val],	offset aPkcs11_pkcs_20 ; "PKCS#11: _pkcs11h_session_login entry	s"...
		mov	[esp+448h+Str],	5
		call	sub_645CBF0E

loc_645C41D7:				; CODE XREF: sub_645C414B+45j
		mov	eax, [ebp+arg_0]
		mov	[esp+448h+Str],	eax
		call	sub_645C4521
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	loc_645C44E1
		lea	eax, [ebp+var_20]
		mov	[esp+448h+var_43C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+448h+Size], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+448h+Val],	eax
		mov	eax, [ebp+arg_0]
		mov	[esp+448h+Str],	eax
		call	sub_645C396C
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	loc_645C44E1
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	edx, [eax+32h]
		mov	eax, [ebp+arg_0]
		lea	ebx, [eax+14h]
		cmp	[ebp+arg_8], 0
		jz	short loc_645C423E
		mov	eax, 4
		jmp	short loc_645C4243
; ---------------------------------------------------------------------------

loc_645C423E:				; CODE XREF: sub_645C414B+EAj
		mov	eax, 6

loc_645C4243:				; CODE XREF: sub_645C414B+F1j
		mov	ecx, [ebp+var_20]
		mov	[esp+448h+var_438], ebx
		mov	[esp+448h+var_43C], 0
		mov	[esp+448h+Size], 0
		mov	[esp+448h+Val],	eax
		mov	[esp+448h+Str],	ecx
		call	edx
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	loc_645C44E1
		cmp	[ebp+arg_4], 0
		jz	short loc_645C428A
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+43Ch]
		test	eax, eax
		jz	loc_645C44DA

loc_645C428A:				; CODE XREF: sub_645C414B+129j
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		mov	eax, [ebp+arg_10]
		and	eax, 1
		test	eax, eax
		jnz	short loc_645C42CC
		mov	[ebp+var_C], 101h
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C42CC
		mov	[esp+448h+Val],	offset aPkcs11CallingP ; "PKCS#11: Calling pin_prompt hook denied"...
		mov	[esp+448h+Str],	4
		call	sub_645CBF0E
		jmp	loc_645C44B4
; ---------------------------------------------------------------------------

loc_645C42CC:				; CODE XREF: sub_645C414B+155j
					; sub_645C414B+166j
		jmp	loc_645C44B4
; ---------------------------------------------------------------------------

loc_645C42D1:				; CODE XREF: sub_645C414B+37Aj
		mov	[ebp+var_18], 0
		mov	[ebp+var_1C], 0
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+30h]
		test	eax, eax
		jz	short loc_645C4309
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+438h]
		test	eax, eax
		jz	short loc_645C4309
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+18h]
		test	eax, eax
		jnz	loc_645C43CF

loc_645C4309:				; CODE XREF: sub_645C414B+19Ej
					; sub_645C414B+1AEj
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C4331
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		mov	[esp+448h+Size], eax
		mov	[esp+448h+Val],	offset aPkcs11Callin_0 ; "PKCS#11: Calling pin_prompt hook for '%"...
		mov	[esp+448h+Str],	4
		call	sub_645CBF0E

loc_645C4331:				; CODE XREF: sub_645C414B+1C6j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+2Ch]
		mov	edx, [ebp+arg_0]
		mov	ecx, [edx+10h]
		mov	edx, ds:dword_645D8030
		mov	edx, [edx+1Ch]
		mov	[esp+448h+var_434], 400h
		lea	ebx, [ebp+Dst]
		mov	[esp+448h+var_438], ebx
		mov	ebx, [ebp+var_14]
		mov	[esp+448h+var_43C], ebx
		mov	[esp+448h+Size], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esp+448h+Val],	ecx
		mov	[esp+448h+Str],	edx
		call	eax
		test	eax, eax
		jz	short loc_645C437E
		mov	[ebp+var_C], 0
		jmp	short loc_645C4385
; ---------------------------------------------------------------------------

loc_645C437E:				; CODE XREF: sub_645C414B+228j
		mov	[ebp+var_C], 1

loc_645C4385:				; CODE XREF: sub_645C414B+231j
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C43AA
		mov	eax, [ebp+var_C]
		mov	[esp+448h+Size], eax
		mov	[esp+448h+Val],	offset aPkcs11Pin_prom ; "PKCS#11: pin_prompt hook return rv=%ld"
		mov	[esp+448h+Str],	4
		call	sub_645CBF0E

loc_645C43AA:				; CODE XREF: sub_645C414B+242j
		cmp	[ebp+var_C], 0
		jz	short loc_645C43B5
		jmp	loc_645C443A
; ---------------------------------------------------------------------------

loc_645C43B5:				; CODE XREF: sub_645C414B+263j
		lea	eax, [ebp+Dst]
		mov	[ebp+var_18], eax
		lea	eax, [ebp+Dst]
		mov	[esp+448h+Str],	eax ; Str
		call	_strlen
		mov	[ebp+var_1C], eax

loc_645C43CF:				; CODE XREF: sub_645C414B+1B8j
		mov	eax, [ebp+arg_0]
		mov	[esp+448h+Str],	eax
		call	sub_645C40ED
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C43E8
		jmp	loc_645C44E1
; ---------------------------------------------------------------------------

loc_645C43E8:				; CODE XREF: sub_645C414B+296j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+4Ah]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+14h]
		mov	ecx, [ebp+var_1C]
		mov	[esp+448h+var_43C], ecx
		mov	ecx, [ebp+var_18]
		mov	[esp+448h+Size], ecx
		mov	[esp+448h+Val],	1
		mov	[esp+448h+Str],	edx
		call	eax
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C442C
		cmp	[ebp+var_C], 100h
		jz	short loc_645C442C
		jmp	short loc_645C443A
; ---------------------------------------------------------------------------

loc_645C442C:				; CODE XREF: sub_645C414B+2D4j
					; sub_645C414B+2DDj
		mov	[ebp+var_10], 1
		mov	[ebp+var_C], 0

loc_645C443A:				; CODE XREF: sub_645C414B+265j
					; sub_645C414B+2DFj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C446E
		mov	eax, [ebp+var_C]
		mov	[esp+448h+Str],	eax
		call	pkcs11h_getMessage
		mov	[esp+448h+var_43C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+448h+Size], eax
		mov	[esp+448h+Val],	offset aPkcs11_pkcs_21 ; "PKCS#11: _pkcs11h_session_login C_Login"...
		mov	[esp+448h+Str],	5
		call	sub_645CBF0E

loc_645C446E:				; CODE XREF: sub_645C414B+2F7j
		mov	[esp+448h+Size], 400h ;	Size
		mov	[esp+448h+Val],	0 ; Val
		lea	eax, [ebp+Dst]
		mov	[esp+448h+Str],	eax ; Dst
		call	_memset
		cmp	[ebp+var_C], 0
		jz	short loc_645C44B0
		cmp	[ebp+var_C], 0A0h
		jz	short loc_645C44B0
		cmp	[ebp+var_C], 0A1h
		jz	short loc_645C44B0
		cmp	[ebp+var_C], 0A2h
		jz	short loc_645C44B0
		nop
		jmp	short loc_645C44E1
; ---------------------------------------------------------------------------

loc_645C44B0:				; CODE XREF: sub_645C414B+345j
					; sub_645C414B+34Ej ...
		add	[ebp+var_14], 1

loc_645C44B4:				; CODE XREF: sub_645C414B+17Cj
					; sub_645C414B:loc_645C42CCj
		cmp	[ebp+var_10], 0
		jnz	short loc_645C44CB
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+34h]
		cmp	eax, [ebp+var_14]
		ja	loc_645C42D1

loc_645C44CB:				; CODE XREF: sub_645C414B+36Dj
		cmp	[ebp+var_10], 0
		jnz	short loc_645C44DA
		mov	[ebp+var_C], 0A0h
		jmp	short loc_645C44E1
; ---------------------------------------------------------------------------

loc_645C44DA:				; CODE XREF: sub_645C414B+139j
					; sub_645C414B+384j
		mov	[ebp+var_C], 0

loc_645C44E1:				; CODE XREF: sub_645C414B+9Ej
					; sub_645C414B+CBj ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4515
		mov	eax, [ebp+var_C]
		mov	[esp+448h+Str],	eax
		call	pkcs11h_getMessage
		mov	[esp+448h+var_43C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+448h+Size], eax
		mov	[esp+448h+Val],	offset aPkcs11_pkcs_22 ; "PKCS#11: _pkcs11h_session_login return "...
		mov	[esp+448h+Str],	5
		call	sub_645CBF0E

loc_645C4515:				; CODE XREF: sub_645C414B+39Ej
		mov	eax, [ebp+var_C]
		add	esp, 444h
		pop	ebx
		pop	ebp
		retn
sub_645C414B	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C4521	proc near		; CODE XREF: sub_645C3FB4+E7p
					; sub_645C414B+92p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C454C
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_10], eax
		mov	[esp+18h+var_14], offset aPkcs11_pkcs_23 ; "PKCS#11: _pkcs11h_session_logout entry "...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645C454C:				; CODE XREF: sub_645C4521+Ej
		cmp	[ebp+arg_0], 0
		jz	short loc_645C45A5
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+14h]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_645C45A5
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_645C459B
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+4Eh]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+14h]
		mov	[esp+18h+var_18], edx
		call	eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+36h]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+14h]
		mov	[esp+18h+var_18], edx
		call	eax

loc_645C459B:				; CODE XREF: sub_645C4521+44j
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+14h], 0FFFFFFFFh

loc_645C45A5:				; CODE XREF: sub_645C4521+2Fj
					; sub_645C4521+3Aj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C45C3
		mov	[esp+18h+var_14], offset aPkcs11_pkcs_24 ; "PKCS#11: _pkcs11h_session_logout return"
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645C45C3:				; CODE XREF: sub_645C4521+8Cj
		mov	eax, 0
		leave
		retn
sub_645C4521	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  66. pkcs11h_token_freeTokenId

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_token_freeTokenId
pkcs11h_token_freeTokenId proc near	; CODE XREF: sub_645C396C+341p
					; pkcs11h_token_freeTokenIdList+A8p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C45F9
		mov	[esp+18h+var_10], 40h ;	int
		mov	[esp+18h+var_14], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_dat ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C45FA
; ---------------------------------------------------------------------------

loc_645C45F9:				; CODE XREF: pkcs11h_token_freeTokenId+Dj
		nop

loc_645C45FA:				; CODE XREF: pkcs11h_token_freeTokenId+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C4623
		mov	[esp+18h+var_10], 41h ;	int
		mov	[esp+18h+var_14], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_0 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C4624
; ---------------------------------------------------------------------------

loc_645C4623:				; CODE XREF: pkcs11h_token_freeTokenId+37j
		nop

loc_645C4624:				; CODE XREF: pkcs11h_token_freeTokenId+55j
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_645C4649
		mov	[esp+18h+var_10], 42h ;	int
		mov	[esp+18h+var_14], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+18h+var_18], offset aToken_idNull_0 ; "token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C464A
; ---------------------------------------------------------------------------

loc_645C4649:				; CODE XREF: pkcs11h_token_freeTokenId+5Dj
		nop

loc_645C464A:				; CODE XREF: pkcs11h_token_freeTokenId+7Bj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C466F
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_10], eax
		mov	[esp+18h+var_14], offset aPkcs11Pkcs11h_ ; "PKCS#11: pkcs11h_token_freeTokenId entr"...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645C466F:				; CODE XREF: pkcs11h_token_freeTokenId+86j
		lea	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	sub_645C156B
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4698
		mov	[esp+18h+var_14], offset aPkcs11Pkcs11_0 ; "PKCS#11: pkcs11h_token_freeTokenId retu"...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645C4698:				; CODE XREF: pkcs11h_token_freeTokenId+B6j
		mov	eax, 0
		leave
		retn
pkcs11h_token_freeTokenId endp

; Exported entry  63. pkcs11h_token_duplicateTokenId

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_token_duplicateTokenId(int, void *)
		public pkcs11h_token_duplicateTokenId
pkcs11h_token_duplicateTokenId proc near ; CODE	XREF: sub_645C35B0+1AFp
					; pkcs11h_token_enumTokenIds+329p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C46D4
		mov	[esp+38h+var_30], 5Bh ;	int
		mov	[esp+38h+var_34], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_dat ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C46D5
; ---------------------------------------------------------------------------

loc_645C46D4:				; CODE XREF: pkcs11h_token_duplicateTokenId+15j
		nop

loc_645C46D5:				; CODE XREF: pkcs11h_token_duplicateTokenId+33j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C46FE
		mov	[esp+38h+var_30], 5Ch ;	int
		mov	[esp+38h+var_34], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_0 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C46FF
; ---------------------------------------------------------------------------

loc_645C46FE:				; CODE XREF: pkcs11h_token_duplicateTokenId+3Fj
		nop

loc_645C46FF:				; CODE XREF: pkcs11h_token_duplicateTokenId+5Dj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C4723
		mov	[esp+38h+var_30], 5Dh ;	int
		mov	[esp+38h+var_34], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+var_38], offset aToNull ; "to!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4724
; ---------------------------------------------------------------------------

loc_645C4723:				; CODE XREF: pkcs11h_token_duplicateTokenId+64j
		nop

loc_645C4724:				; CODE XREF: pkcs11h_token_duplicateTokenId+82j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C4748
		mov	[esp+38h+var_30], 5Eh ;	int
		mov	[esp+38h+var_34], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+var_38], offset aFromNull ; "from!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4749
; ---------------------------------------------------------------------------

loc_645C4748:				; CODE XREF: pkcs11h_token_duplicateTokenId+89j
		nop

loc_645C4749:				; CODE XREF: pkcs11h_token_duplicateTokenId+A7j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4775
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs11_1 ; "PKCS#11: pkcs11h_token_duplicateTokenId"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C4775:				; CODE XREF: pkcs11h_token_duplicateTokenId+B2j
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	[esp+38h+var_2C], 464h ; size_t
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_30], eax ;	void *
		mov	[esp+38h+var_34], 0 ; int
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax ;	int
		call	sub_645C15E9
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C47AB
		jmp	short loc_645C47B2
; ---------------------------------------------------------------------------

loc_645C47AB:				; CODE XREF: pkcs11h_token_duplicateTokenId+108j
		mov	[ebp+var_C], 0

loc_645C47B2:				; CODE XREF: pkcs11h_token_duplicateTokenId+10Aj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C47EF
		mov	eax, [ebp+arg_0]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs11_2 ; "PKCS#11: pkcs11h_token_duplicateTokenId"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C47EF:				; CODE XREF: pkcs11h_token_duplicateTokenId+11Bj
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
pkcs11h_token_duplicateTokenId endp

; Exported entry  70. pkcs11h_token_sameTokenId

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_token_sameTokenId
pkcs11h_token_sameTokenId proc near	; CODE XREF: sub_645C35B0+E4p
					; sub_645C396C+28Ap ...

Str1		= dword	ptr -18h
Str2		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C4822
		mov	[esp+18h+var_10], 88h ;	int
		mov	[esp+18h+Str2],	offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+18h+Str1],	offset aANull ;	"a!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4823
; ---------------------------------------------------------------------------

loc_645C4822:				; CODE XREF: pkcs11h_token_sameTokenId+Aj
		nop

loc_645C4823:				; CODE XREF: pkcs11h_token_sameTokenId+28j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C4847
		mov	[esp+18h+var_10], 89h ;	int
		mov	[esp+18h+Str2],	offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+18h+Str1],	offset aBNull ;	"b!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4848
; ---------------------------------------------------------------------------

loc_645C4847:				; CODE XREF: pkcs11h_token_sameTokenId+2Fj
		nop

loc_645C4848:				; CODE XREF: pkcs11h_token_sameTokenId+4Dj
		mov	eax, [ebp+arg_4]
		lea	edx, [eax+400h]
		mov	eax, [ebp+arg_0]
		add	eax, 400h
		mov	[esp+18h+Str2],	edx ; Str2
		mov	[esp+18h+Str1],	eax ; Str1
		call	_strcmp
		test	eax, eax
		jnz	short loc_645C48D3
		mov	eax, [ebp+arg_4]
		lea	edx, [eax+421h]
		mov	eax, [ebp+arg_0]
		add	eax, 421h
		mov	[esp+18h+Str2],	edx ; Str2
		mov	[esp+18h+Str1],	eax ; Str1
		call	_strcmp
		test	eax, eax
		jnz	short loc_645C48D3
		mov	eax, [ebp+arg_4]
		lea	edx, [eax+432h]
		mov	eax, [ebp+arg_0]
		add	eax, 432h
		mov	[esp+18h+Str2],	edx ; Str2
		mov	[esp+18h+Str1],	eax ; Str1
		call	_strcmp
		test	eax, eax
		jnz	short loc_645C48D3
		mov	eax, [ebp+arg_4]
		lea	edx, [eax+443h]
		mov	eax, [ebp+arg_0]
		add	eax, 443h
		mov	[esp+18h+Str2],	edx ; Str2
		mov	[esp+18h+Str1],	eax ; Str1
		call	_strcmp
		test	eax, eax
		jnz	short loc_645C48D3
		mov	eax, 1
		jmp	short locret_645C48D8
; ---------------------------------------------------------------------------

loc_645C48D3:				; CODE XREF: pkcs11h_token_sameTokenId+6Fj
					; pkcs11h_token_sameTokenId+90j ...
		mov	eax, 0

locret_645C48D8:			; CODE XREF: pkcs11h_token_sameTokenId+D9j
		leave
		retn
pkcs11h_token_sameTokenId endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645C48DA(void	*, int)
sub_645C48DA	proc near		; CODE XREF: sub_645C396C+217p
					; pkcs11h_token_enumTokenIds+1FCp ...

Dest		= dword	ptr -38h
Source		= dword	ptr -34h
Count		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C490C
		mov	[esp+38h+Count], 9Bh ; int
		mov	[esp+38h+Source], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+Dest],	offset aInfoNull ; "info!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C490D
; ---------------------------------------------------------------------------

loc_645C490C:				; CODE XREF: sub_645C48DA+12j
		nop

loc_645C490D:				; CODE XREF: sub_645C48DA+30j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C4931
		mov	[esp+38h+Count], 9Ch ; int
		mov	[esp+38h+Source], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+Dest],	offset aP_token_idNull ; "p_token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4932
; ---------------------------------------------------------------------------

loc_645C4931:				; CODE XREF: sub_645C48DA+37j
		nop

loc_645C4932:				; CODE XREF: sub_645C48DA+55j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4957
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+Count], eax
		mov	[esp+38h+Source], offset aPkcs11_pkcs_25 ; "PKCS#11: _pkcs11h_token_getTokenId entr"...
		mov	[esp+38h+Dest],	5
		call	sub_645CBF0E

loc_645C4957:				; CODE XREF: sub_645C48DA+60j
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0
		lea	eax, [ebp+var_10]
		mov	[esp+38h+Dest],	eax
		call	sub_645C4A8D
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C4979
		jmp	loc_645C4A35
; ---------------------------------------------------------------------------

loc_645C4979:				; CODE XREF: sub_645C48DA+98j
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+var_10]
		add	edx, 443h
		mov	[esp+38h+Count], 20h ; size_t
		mov	[esp+38h+Source], eax ;	void *
		mov	[esp+38h+Dest],	edx ; void *
		call	sub_645C277C
		mov	eax, [ebp+arg_0]
		lea	edx, [eax+20h]
		mov	eax, [ebp+var_10]
		add	eax, 400h
		mov	[esp+38h+Count], 20h ; size_t
		mov	[esp+38h+Source], edx ;	void *
		mov	[esp+38h+Dest],	eax ; void *
		call	sub_645C277C
		mov	eax, [ebp+arg_0]
		lea	edx, [eax+40h]
		mov	eax, [ebp+var_10]
		add	eax, 421h
		mov	[esp+38h+Count], 10h ; size_t
		mov	[esp+38h+Source], edx ;	void *
		mov	[esp+38h+Dest],	eax ; void *
		call	sub_645C277C
		mov	eax, [ebp+arg_0]
		lea	edx, [eax+50h]
		mov	eax, [ebp+var_10]
		add	eax, 432h
		mov	[esp+38h+Count], 10h ; size_t
		mov	[esp+38h+Source], edx ;	void *
		mov	[esp+38h+Dest],	eax ; void *
		call	sub_645C277C
		mov	eax, [ebp+var_10]
		lea	edx, [eax+443h]
		mov	eax, [ebp+var_10]
		mov	[esp+38h+Count], 400h ;	Count
		mov	[esp+38h+Source], edx ;	Source
		mov	[esp+38h+Dest],	eax ; Dest
		call	_strncpy
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+arg_4]
		mov	[eax], edx
		mov	[ebp+var_10], 0
		mov	[ebp+var_C], 0

loc_645C4A35:				; CODE XREF: sub_645C48DA+9Aj
		mov	eax, [ebp+var_10]
		test	eax, eax
		jz	short loc_645C4A47
		lea	eax, [ebp+var_10]
		mov	[esp+38h+Dest],	eax
		call	sub_645C156B

loc_645C4A47:				; CODE XREF: sub_645C48DA+160j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4A84
		mov	eax, [ebp+arg_4]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+Dest],	eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+Count], eax
		mov	[esp+38h+Source], offset aPkcs11_pkcs_26 ; "PKCS#11: _pkcs11h_token_getTokenId retu"...
		mov	[esp+38h+Dest],	5
		call	sub_645CBF0E

loc_645C4A84:				; CODE XREF: sub_645C48DA+175j
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
sub_645C48DA	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C4A8D	proc near		; CODE XREF: sub_645C48DA+8Cp
					; pkcs11h_token_deserializeTokenId+CDp

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		mov	[ebp+var_10], 0
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C4AC9
		mov	[esp+38h+var_30], 0E1h ; int
		mov	[esp+38h+var_34], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_dat ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4ACA
; ---------------------------------------------------------------------------

loc_645C4AC9:				; CODE XREF: sub_645C4A8D+1Cj
		nop

loc_645C4ACA:				; CODE XREF: sub_645C4A8D+3Aj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C4AF3
		mov	[esp+38h+var_30], 0E2h ; int
		mov	[esp+38h+var_34], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_0 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C4AF4
; ---------------------------------------------------------------------------

loc_645C4AF3:				; CODE XREF: sub_645C4A8D+46j
		nop

loc_645C4AF4:				; CODE XREF: sub_645C4A8D+64j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C4B18
		mov	[esp+38h+var_30], 0E3h ; int
		mov	[esp+38h+var_34], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+var_38], offset aP_token_idNull ; "p_token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4B19
; ---------------------------------------------------------------------------

loc_645C4B18:				; CODE XREF: sub_645C4A8D+6Bj
		nop

loc_645C4B19:				; CODE XREF: sub_645C4A8D+89j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4B3E
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs_27 ; "PKCS#11: _pkcs11h_token_newTokenId entr"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C4B3E:				; CODE XREF: sub_645C4A8D+94j
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	[esp+38h+var_34], 464h ; size_t
		lea	eax, [ebp+var_10]
		mov	[esp+38h+var_38], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C4B65
		jmp	short loc_645C4B7B
; ---------------------------------------------------------------------------

loc_645C4B65:				; CODE XREF: sub_645C4A8D+D4j
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+arg_0]
		mov	[eax], edx
		mov	[ebp+var_10], 0
		mov	[ebp+var_C], 0

loc_645C4B7B:				; CODE XREF: sub_645C4A8D+D6j
		mov	eax, [ebp+var_10]
		test	eax, eax
		jz	short loc_645C4B94
		lea	eax, [ebp+var_10]
		mov	[esp+38h+var_38], eax
		call	sub_645C156B
		mov	[ebp+var_10], 0

loc_645C4B94:				; CODE XREF: sub_645C4A8D+F3j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4BD1
		mov	eax, [ebp+arg_0]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs_28 ; "PKCS#11: _pkcs11h_token_newTokenId retu"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C4BD1:				; CODE XREF: sub_645C4A8D+10Fj
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
sub_645C4A8D	endp

; Exported entry  69. pkcs11h_token_logout

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_token_logout(void	*)
		public pkcs11h_token_logout
pkcs11h_token_logout proc near

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 6
		mov	[ebp+var_14], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C4C19
		mov	[esp+28h+var_20], 113h ; int
		mov	[esp+28h+var_24], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+28h+var_28], offset aToken_idNull_0 ; "token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4C1A
; ---------------------------------------------------------------------------

loc_645C4C19:				; CODE XREF: pkcs11h_token_logout+1Fj
		nop

loc_645C4C1A:				; CODE XREF: pkcs11h_token_logout+3Dj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4C3F
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs11_3 ; "PKCS#11: pkcs11h_token_logout entry	tok"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C4C3F:				; CODE XREF: pkcs11h_token_logout+48j
		lea	eax, [ebp+var_14]
		mov	[esp+28h+var_24], eax ;	int
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax ;	void *
		call	sub_645C35B0
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C4C5C
		jmp	short loc_645C4C99
; ---------------------------------------------------------------------------

loc_645C4C5C:				; CODE XREF: pkcs11h_token_logout+7Ej
		mov	eax, [ebp+var_14]
		add	eax, 2Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C4C75
		jmp	short loc_645C4C99
; ---------------------------------------------------------------------------

loc_645C4C75:				; CODE XREF: pkcs11h_token_logout+97j
		mov	[ebp+var_C], 1
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax
		call	sub_645C4521
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C4C92
		jmp	short loc_645C4C99
; ---------------------------------------------------------------------------

loc_645C4C92:				; CODE XREF: pkcs11h_token_logout+B4j
		mov	[ebp+var_10], 0

loc_645C4C99:				; CODE XREF: pkcs11h_token_logout+80j
					; pkcs11h_token_logout+99j ...
		cmp	[ebp+var_C], 0
		jz	short loc_645C4CB4
		mov	eax, [ebp+var_14]
		add	eax, 2Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C4CB4:				; CODE XREF: pkcs11h_token_logout+C3j
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_645C4CCD
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax
		call	sub_645C3851
		mov	[ebp+var_14], 0

loc_645C4CCD:				; CODE XREF: pkcs11h_token_logout+DFj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4D01
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs11_4 ; "PKCS#11: pkcs11h_token_logout return rv"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C4D01:				; CODE XREF: pkcs11h_token_logout+FBj
		mov	eax, [ebp+var_10]
		leave
		retn
pkcs11h_token_logout endp

; Exported entry  68. pkcs11h_token_login

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_token_login(void *, int, char *)
		public pkcs11h_token_login
pkcs11h_token_login proc near

Str		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	[ebp+var_C], 0
		mov	[ebp+var_18], 0FFFFFFFFh
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 6
		mov	[ebp+var_1C], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C4D54
		mov	[esp+48h+var_40], 15Ah ; int
		mov	[esp+48h+var_44], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+48h+Str], offset aToken_idNull_0 ;	"token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4D55
; ---------------------------------------------------------------------------

loc_645C4D54:				; CODE XREF: pkcs11h_token_login+2Ej
		nop

loc_645C4D55:				; CODE XREF: pkcs11h_token_login+4Cj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4D88
		cmp	[ebp+arg_4], 0
		setnz	al
		movzx	eax, al
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11Pkcs11_5 ; "PKCS#11: pkcs11h_token_login entry toke"...
		mov	[esp+48h+Str], 5
		call	sub_645CBF0E

loc_645C4D88:				; CODE XREF: pkcs11h_token_login+57j
		cmp	[ebp+arg_8], 0
		jz	short loc_645C4D9C
		mov	eax, [ebp+arg_8]
		mov	[esp+48h+Str], eax ; Str
		call	_strlen
		mov	[ebp+var_10], eax

loc_645C4D9C:				; CODE XREF: pkcs11h_token_login+86j
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_44], eax ;	int
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+Str], eax ; void *
		call	sub_645C35B0
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C4DBC
		jmp	loc_645C4ED9
; ---------------------------------------------------------------------------

loc_645C4DBC:				; CODE XREF: pkcs11h_token_login+AFj
		mov	eax, [ebp+var_1C]
		add	eax, 2Ch
		mov	[esp+48h+Str], eax
		call	sub_645C24B4
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C4DD8
		jmp	loc_645C4ED9
; ---------------------------------------------------------------------------

loc_645C4DD8:				; CODE XREF: pkcs11h_token_login+CBj
		mov	[ebp+var_C], 1
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+Str], eax
		call	sub_645C4521
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	loc_645C4ED9
		mov	eax, [ebp+var_1C]
		lea	edx, [ebp+var_18]
		mov	[esp+48h+var_3C], edx
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], 0
		mov	[esp+48h+Str], eax
		call	sub_645C396C
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	loc_645C4ED9
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+Str], eax
		call	sub_645C40ED
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	loc_645C4ED9
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	edx, [eax+32h]
		mov	eax, [ebp+var_1C]
		lea	ebx, [eax+14h]
		cmp	[ebp+arg_4], 0
		jz	short loc_645C4E60
		mov	eax, 4
		jmp	short loc_645C4E65
; ---------------------------------------------------------------------------

loc_645C4E60:				; CODE XREF: pkcs11h_token_login+151j
		mov	eax, 6

loc_645C4E65:				; CODE XREF: pkcs11h_token_login+158j
		mov	ecx, [ebp+var_18]
		mov	[esp+48h+var_38], ebx
		mov	[esp+48h+var_3C], 0
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+Str], ecx
		call	edx
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_645C4ED9
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+4Ah]
		mov	edx, [ebp+var_1C]
		mov	edx, [edx+14h]
		mov	ecx, [ebp+var_10]
		mov	[esp+48h+var_3C], ecx
		mov	ecx, [ebp+arg_8]
		mov	[esp+48h+var_40], ecx
		mov	[esp+48h+var_44], 1
		mov	[esp+48h+Str], edx
		call	eax
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C4ED2
		cmp	[ebp+var_14], 100h
		jz	short loc_645C4ED2
		jmp	short loc_645C4ED9
; ---------------------------------------------------------------------------

loc_645C4ED2:				; CODE XREF: pkcs11h_token_login+1BFj
					; pkcs11h_token_login+1C8j
		mov	[ebp+var_14], 0

loc_645C4ED9:				; CODE XREF: pkcs11h_token_login+B1j
					; pkcs11h_token_login+CDj ...
		cmp	[ebp+var_C], 0
		jz	short loc_645C4EF4
		mov	eax, [ebp+var_1C]
		add	eax, 2Ch
		mov	[esp+48h+Str], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C4EF4:				; CODE XREF: pkcs11h_token_login+1D7j
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_645C4F0D
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+Str], eax
		call	sub_645C3851
		mov	[ebp+var_1C], 0

loc_645C4F0D:				; CODE XREF: pkcs11h_token_login+1F3j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C4F41
		mov	eax, [ebp+var_14]
		mov	[esp+48h+Str], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11Pkcs11_6 ; "PKCS#11: pkcs11h_token_login return	rv="...
		mov	[esp+48h+Str], 5
		call	sub_645CBF0E

loc_645C4F41:				; CODE XREF: pkcs11h_token_login+20Fj
		mov	eax, [ebp+var_14]
		add	esp, 44h
		pop	ebx
		pop	ebp
		retn
pkcs11h_token_login endp

; Exported entry  64. pkcs11h_token_ensureAccess

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_token_ensureAccess(void *, int, int)
		public pkcs11h_token_ensureAccess
pkcs11h_token_ensureAccess proc	near

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_10], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C4F8C
		mov	[esp+38h+var_30], 1C0h ; int
		mov	[esp+38h+var_34], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_dat ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4F8D
; ---------------------------------------------------------------------------

loc_645C4F8C:				; CODE XREF: pkcs11h_token_ensureAccess+22j
		nop

loc_645C4F8D:				; CODE XREF: pkcs11h_token_ensureAccess+40j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C4FB6
		mov	[esp+38h+var_30], 1C1h ; int
		mov	[esp+38h+var_34], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_0 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C4FB7
; ---------------------------------------------------------------------------

loc_645C4FB6:				; CODE XREF: pkcs11h_token_ensureAccess+4Cj
		nop

loc_645C4FB7:				; CODE XREF: pkcs11h_token_ensureAccess+6Aj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C4FDB
		mov	[esp+38h+var_30], 1C2h ; int
		mov	[esp+38h+var_34], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+38h+var_38], offset aToken_idNull_0 ; "token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C4FDC
; ---------------------------------------------------------------------------

loc_645C4FDB:				; CODE XREF: pkcs11h_token_ensureAccess+71j
		nop

loc_645C4FDC:				; CODE XREF: pkcs11h_token_ensureAccess+8Fj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C500F
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs11_7 ; "PKCS#11: pkcs11h_token_ensureAccess	ent"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C500F:				; CODE XREF: pkcs11h_token_ensureAccess+9Aj
		lea	eax, [ebp+var_14]
		mov	[esp+38h+var_34], eax ;	int
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax ;	void *
		call	sub_645C35B0
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C502C
		jmp	short loc_645C507E
; ---------------------------------------------------------------------------

loc_645C502C:				; CODE XREF: pkcs11h_token_ensureAccess+DEj
		mov	eax, [ebp+var_14]
		add	eax, 2Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C24B4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C5045
		jmp	short loc_645C507E
; ---------------------------------------------------------------------------

loc_645C5045:				; CODE XREF: pkcs11h_token_ensureAccess+F7j
		mov	[ebp+var_C], 1
		mov	eax, [ebp+var_14]
		lea	edx, [ebp+var_18]
		mov	[esp+38h+var_2C], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+38h+var_30], edx
		mov	edx, [ebp+arg_4]
		mov	[esp+38h+var_34], edx
		mov	[esp+38h+var_38], eax
		call	sub_645C396C
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C5077
		jmp	short loc_645C507E
; ---------------------------------------------------------------------------

loc_645C5077:				; CODE XREF: pkcs11h_token_ensureAccess+129j
		mov	[ebp+var_10], 0

loc_645C507E:				; CODE XREF: pkcs11h_token_ensureAccess+E0j
					; pkcs11h_token_ensureAccess+F9j ...
		cmp	[ebp+var_C], 0
		jz	short loc_645C5099
		mov	eax, [ebp+var_14]
		add	eax, 2Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C5099:				; CODE XREF: pkcs11h_token_ensureAccess+138j
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_645C50B2
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	sub_645C3851
		mov	[ebp+var_14], 0

loc_645C50B2:				; CODE XREF: pkcs11h_token_ensureAccess+154j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C50E6
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs11_8 ; "PKCS#11: pkcs11h_token_ensureAccess	ret"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C50E6:				; CODE XREF: pkcs11h_token_ensureAccess+170j
		mov	eax, [ebp+var_10]
		leave
		retn
pkcs11h_token_ensureAccess endp

; Exported entry  67. pkcs11h_token_freeTokenIdList

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_token_freeTokenIdList
pkcs11h_token_freeTokenIdList proc near	; CODE XREF: pkcs11h_token_enumTokenIds+233p
					; pkcs11h_token_enumTokenIds+3AAp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C511E
		mov	[esp+28h+var_20], 209h ; int
		mov	[esp+28h+var_24], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_dat ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C511F
; ---------------------------------------------------------------------------

loc_645C511E:				; CODE XREF: pkcs11h_token_freeTokenIdList+13j
		nop

loc_645C511F:				; CODE XREF: pkcs11h_token_freeTokenIdList+31j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C5148
		mov	[esp+28h+var_20], 20Ah ; int
		mov	[esp+28h+var_24], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_0 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C5149
; ---------------------------------------------------------------------------

loc_645C5148:				; CODE XREF: pkcs11h_token_freeTokenIdList+3Dj
		nop

loc_645C5149:				; CODE XREF: pkcs11h_token_freeTokenIdList+5Bj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C5170
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs11_9 ; "PKCS#11: pkcs11h_token_freeTokenIdList "...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E
		jmp	short loc_645C51AC
; ---------------------------------------------------------------------------

loc_645C5170:				; CODE XREF: pkcs11h_token_freeTokenIdList+66j
		jmp	short loc_645C51AC
; ---------------------------------------------------------------------------

loc_645C5172:				; CODE XREF: pkcs11h_token_freeTokenIdList+C5j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645C5198
		mov	eax, [ebp+var_10]
		mov	eax, [eax+4]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_token_freeTokenId

loc_645C5198:				; CODE XREF: pkcs11h_token_freeTokenIdList+9Dj
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], 0
		lea	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	sub_645C156B

loc_645C51AC:				; CODE XREF: pkcs11h_token_freeTokenIdList+83j
					; pkcs11h_token_freeTokenIdList:loc_645C5170j
		cmp	[ebp+var_C], 0
		jnz	short loc_645C5172
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C51D0
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_10 ; "PKCS#11: pkcs11h_token_freeTokenIdList "...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C51D0:				; CODE XREF: pkcs11h_token_freeTokenIdList+CFj
		mov	eax, 0
		leave
		retn
pkcs11h_token_freeTokenIdList endp

; Exported entry  65. pkcs11h_token_enumTokenIds

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_token_enumTokenIds
pkcs11h_token_enumTokenIds proc	near

var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_D4		= byte ptr -0D4h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0F8h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_18], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C521C
		mov	[esp+0F8h+var_F0], 232h	; int
		mov	[esp+0F8h+var_F4], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+0F8h+var_F8], offset a_g_pkcs11h_dat ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C521D
; ---------------------------------------------------------------------------

loc_645C521C:				; CODE XREF: pkcs11h_token_enumTokenIds+25j
		nop

loc_645C521D:				; CODE XREF: pkcs11h_token_enumTokenIds+43j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C5246
		mov	[esp+0F8h+var_F0], 233h	; int
		mov	[esp+0F8h+var_F4], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+0F8h+var_F8], offset a_g_pkcs11h_d_0 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C5247
; ---------------------------------------------------------------------------

loc_645C5246:				; CODE XREF: pkcs11h_token_enumTokenIds+4Fj
		nop

loc_645C5247:				; CODE XREF: pkcs11h_token_enumTokenIds+6Dj
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C526B
		mov	[esp+0F8h+var_F0], 234h	; int
		mov	[esp+0F8h+var_F4], offset aPkcs11hToken_c ; "pkcs11h-token.c"
		mov	[esp+0F8h+var_F8], offset aP_token_id_lis ; "p_token_id_list!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C526C
; ---------------------------------------------------------------------------

loc_645C526B:				; CODE XREF: pkcs11h_token_enumTokenIds+74j
		nop

loc_645C526C:				; CODE XREF: pkcs11h_token_enumTokenIds+92j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C5298
		mov	eax, [ebp+arg_4]
		mov	[esp+0F8h+var_EC], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], offset aPkcs11Pkcs1_11 ; "PKCS#11: pkcs11h_token_enumTokenIds ent"...
		mov	[esp+0F8h+var_F8], 5
		call	sub_645CBF0E

loc_645C5298:				; CODE XREF: pkcs11h_token_enumTokenIds+9Dj
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0
		mov	eax, ds:dword_645D8030
		add	eax, 38h
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C24B4
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C52BF
		jmp	loc_645C5575
; ---------------------------------------------------------------------------

loc_645C52BF:				; CODE XREF: pkcs11h_token_enumTokenIds+E1j
		mov	[ebp+var_C], 1
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_14], eax
		jmp	loc_645C5447
; ---------------------------------------------------------------------------

loc_645C52D6:				; CODE XREF: pkcs11h_token_enumTokenIds+274j
		mov	[ebp+var_28], 0
		mov	eax, [ebp+var_14]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_645C543F
		lea	eax, [ebp+var_2C]
		mov	[esp+0F8h+var_EC], eax
		lea	eax, [ebp+var_28]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], 1
		mov	eax, [ebp+var_14]
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C2D74
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C5360
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C535B
		mov	eax, [ebp+var_18]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_getMessage
		mov	edx, [ebp+var_14]
		add	edx, 408h
		mov	[esp+0F8h+var_E8], eax
		mov	eax, [ebp+var_18]
		mov	[esp+0F8h+var_EC], eax
		mov	[esp+0F8h+var_F0], edx
		mov	[esp+0F8h+var_F4], offset aPkcs11Cannot_1 ; "PKCS#11: Cannot get slot list for provi"...
		mov	[esp+0F8h+var_F8], 4
		call	sub_645CBF0E
		jmp	loc_645C5426
; ---------------------------------------------------------------------------

loc_645C535B:				; CODE XREF: pkcs11h_token_enumTokenIds+146j
		jmp	loc_645C5426
; ---------------------------------------------------------------------------

loc_645C5360:				; CODE XREF: pkcs11h_token_enumTokenIds+13Cj
		mov	[ebp+var_1C], 0
		jmp	loc_645C541A
; ---------------------------------------------------------------------------

loc_645C536C:				; CODE XREF: pkcs11h_token_enumTokenIds+249j
		mov	[ebp+var_30], 0
		mov	[esp+0F8h+var_F4], 8 ; size_t
		lea	eax, [ebp+var_30]
		mov	[esp+0F8h+var_F8], eax ; int
		call	sub_645C14C0
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645C53FD
		mov	eax, [ebp+var_14]
		mov	eax, [eax+430h]
		mov	eax, [eax+1Ah]
		mov	edx, [ebp+var_28]
		mov	ecx, [ebp+var_1C]
		shl	ecx, 2
		add	edx, ecx
		mov	edx, [edx]
		lea	ecx, [ebp+var_D4]
		mov	[esp+0F8h+var_F4], ecx
		mov	[esp+0F8h+var_F8], edx
		call	eax
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645C53FD
		mov	eax, [ebp+var_30]
		add	eax, 4
		mov	[esp+0F8h+var_F4], eax ; int
		lea	eax, [ebp+var_D4]
		mov	[esp+0F8h+var_F8], eax ; void *
		call	sub_645C48DA
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645C53FD
		mov	eax, [ebp+var_30]
		mov	edx, [ebp+var_10]
		mov	[eax], edx
		mov	eax, [ebp+var_30]
		mov	[ebp+var_10], eax
		mov	[ebp+var_30], 0
		mov	[ebp+var_18], 0

loc_645C53FD:				; CODE XREF: pkcs11h_token_enumTokenIds+1B6j
					; pkcs11h_token_enumTokenIds+1E7j ...
		mov	eax, [ebp+var_30]
		test	eax, eax
		jz	short loc_645C5416
		mov	eax, [ebp+var_30]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_token_freeTokenIdList
		mov	[ebp+var_30], 0

loc_645C5416:				; CODE XREF: pkcs11h_token_enumTokenIds+22Bj
		add	[ebp+var_1C], 1

loc_645C541A:				; CODE XREF: pkcs11h_token_enumTokenIds+190j
		mov	eax, [ebp+var_2C]
		cmp	[ebp+var_1C], eax
		jb	loc_645C536C

loc_645C5426:				; CODE XREF: pkcs11h_token_enumTokenIds+17Fj
					; pkcs11h_token_enumTokenIds:loc_645C535Bj
		mov	eax, [ebp+var_28]
		test	eax, eax
		jz	short loc_645C543F
		lea	eax, [ebp+var_28]
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C156B
		mov	[ebp+var_28], 0

loc_645C543F:				; CODE XREF: pkcs11h_token_enumTokenIds+10Ej
					; pkcs11h_token_enumTokenIds+254j
		mov	eax, [ebp+var_14]
		mov	eax, [eax]
		mov	[ebp+var_14], eax

loc_645C5447:				; CODE XREF: pkcs11h_token_enumTokenIds+FAj
		cmp	[ebp+var_14], 0
		jnz	loc_645C52D6
		cmp	[ebp+arg_0], 0
		jnz	loc_645C555F
		mov	[ebp+var_20], 0
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+0Ch]
		mov	[ebp+var_20], eax
		jmp	loc_645C5555
; ---------------------------------------------------------------------------

loc_645C5472:				; CODE XREF: pkcs11h_token_enumTokenIds+382j
		mov	[ebp+var_34], 0
		mov	[ebp+var_24], 0
		mov	eax, [ebp+var_10]
		mov	[ebp+var_34], eax
		jmp	short loc_645C54B3
; ---------------------------------------------------------------------------

loc_645C5488:				; CODE XREF: pkcs11h_token_enumTokenIds+2E7j
		mov	eax, [ebp+var_34]
		mov	edx, [eax+4]
		mov	eax, [ebp+var_20]
		mov	eax, [eax+10h]
		mov	[esp+0F8h+var_F4], edx
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_token_sameTokenId
		test	eax, eax
		jz	short loc_645C54AB
		mov	[ebp+var_24], 1

loc_645C54AB:				; CODE XREF: pkcs11h_token_enumTokenIds+2CBj
		mov	eax, [ebp+var_34]
		mov	eax, [eax]
		mov	[ebp+var_34], eax

loc_645C54B3:				; CODE XREF: pkcs11h_token_enumTokenIds+2AFj
		mov	eax, [ebp+var_34]
		test	eax, eax
		jz	short loc_645C54C0
		cmp	[ebp+var_24], 0
		jz	short loc_645C5488

loc_645C54C0:				; CODE XREF: pkcs11h_token_enumTokenIds+2E1j
		cmp	[ebp+var_24], 0
		jnz	loc_645C554D
		mov	[ebp+var_34], 0
		mov	[esp+0F8h+var_F4], 8 ; size_t
		lea	eax, [ebp+var_34]
		mov	[esp+0F8h+var_F8], eax ; int
		call	sub_645C14C0
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645C5523
		mov	eax, [ebp+var_20]
		mov	eax, [eax+10h]
		mov	edx, [ebp+var_34]
		add	edx, 4
		mov	[esp+0F8h+var_F4], eax ; void *
		mov	[esp+0F8h+var_F8], edx ; int
		call	pkcs11h_token_duplicateTokenId
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645C5523
		mov	eax, [ebp+var_34]
		mov	edx, [ebp+var_10]
		mov	[eax], edx
		mov	eax, [ebp+var_34]
		mov	[ebp+var_10], eax
		mov	[ebp+var_34], 0

loc_645C5523:				; CODE XREF: pkcs11h_token_enumTokenIds+314j
					; pkcs11h_token_enumTokenIds+335j
		mov	eax, [ebp+var_34]
		test	eax, eax
		jz	short loc_645C554D
		mov	eax, [ebp+var_34]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645C5542
		mov	eax, [ebp+var_34]
		mov	eax, [eax+4]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_token_freeTokenId

loc_645C5542:				; CODE XREF: pkcs11h_token_enumTokenIds+35Bj
		lea	eax, [ebp+var_34]
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C156B

loc_645C554D:				; CODE XREF: pkcs11h_token_enumTokenIds+2EDj
					; pkcs11h_token_enumTokenIds+351j
		mov	eax, [ebp+var_20]
		mov	eax, [eax]
		mov	[ebp+var_20], eax

loc_645C5555:				; CODE XREF: pkcs11h_token_enumTokenIds+296j
		cmp	[ebp+var_20], 0
		jnz	loc_645C5472

loc_645C555F:				; CODE XREF: pkcs11h_token_enumTokenIds+27Ej
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+var_10]
		mov	[eax], edx
		mov	[ebp+var_10], 0
		mov	[ebp+var_18], 0

loc_645C5575:				; CODE XREF: pkcs11h_token_enumTokenIds+E3j
		cmp	[ebp+var_10], 0
		jz	short loc_645C558D
		mov	eax, [ebp+var_10]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_token_freeTokenIdList
		mov	[ebp+var_10], 0

loc_645C558D:				; CODE XREF: pkcs11h_token_enumTokenIds+3A2j
		cmp	[ebp+var_C], 0
		jz	short loc_645C55AD
		mov	eax, ds:dword_645D8030
		add	eax, 38h
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C24F5
		mov	[ebp+var_18], eax
		mov	[ebp+var_C], 0

loc_645C55AD:				; CODE XREF: pkcs11h_token_enumTokenIds+3BAj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C55E8
		mov	eax, [ebp+var_18]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_getMessage
		mov	edx, [ebp+arg_4]
		mov	[esp+0F8h+var_E8], edx
		mov	[esp+0F8h+var_EC], eax
		mov	eax, [ebp+var_18]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], offset aPkcs11Pkcs1_12 ; "PKCS#11: pkcs11h_token_enumTokenIds ret"...
		mov	[esp+0F8h+var_F8], 5
		call	sub_645CBF0E

loc_645C55E8:				; CODE XREF: pkcs11h_token_enumTokenIds+3DEj
		mov	eax, [ebp+var_18]
		leave
		retn
pkcs11h_token_enumTokenIds endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C55F0	proc near		; CODE XREF: sub_645C5835+240p

Time		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 0
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C5622
		mov	[esp+38h+var_30], 78h ;	int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+Time],	offset aNewoneNull ; "newone!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C5623
; ---------------------------------------------------------------------------

loc_645C5622:				; CODE XREF: sub_645C55F0+12j
		nop

loc_645C5623:				; CODE XREF: sub_645C55F0+30j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C565D
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs_29 ; "PKCS#11: _pkcs11h_certificate_isBetterC"...
		mov	[esp+38h+Time],	5
		call	sub_645CBF0E

loc_645C565D:				; CODE XREF: sub_645C55F0+3Bj
		cmp	[ebp+arg_4], 0
		jz	short loc_645C5669
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C5675

loc_645C5669:				; CODE XREF: sub_645C55F0+71j
		mov	[ebp+var_C], 1
		jmp	loc_645C5734
; ---------------------------------------------------------------------------

loc_645C5675:				; CODE XREF: sub_645C55F0+77j
		mov	eax, ds:dword_645D8010
		mov	edx, ds:dword_645D8004
		lea	ecx, [ebp+var_10]
		mov	[esp+38h+var_2C], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esp+38h+var_30], ecx
		mov	ecx, [ebp+arg_0]
		mov	[esp+38h+var_34], ecx
		mov	[esp+38h+Time],	edx
		call	eax ; dword_645D8010
		test	eax, eax
		jnz	short loc_645C56A5
		mov	[ebp+var_10], 0

loc_645C56A5:				; CODE XREF: sub_645C55F0+ACj
		mov	eax, ds:dword_645D8010
		mov	edx, ds:dword_645D8004
		lea	ecx, [ebp+var_14]
		mov	[esp+38h+var_2C], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esp+38h+var_30], ecx
		mov	ecx, [ebp+arg_8]
		mov	[esp+38h+var_34], ecx
		mov	[esp+38h+Time],	edx
		call	eax ; dword_645D8010
		test	eax, eax
		jnz	short loc_645C56D5
		mov	[ebp+var_10], 0

loc_645C56D5:				; CODE XREF: sub_645C55F0+DCj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C5723
		lea	eax, [ebp+var_14]
		mov	[esp+38h+Time],	eax ; Time
		call	_localtime
		mov	[esp+38h+Time],	eax ; Tm
		call	_asctime
		mov	ebx, eax
		lea	eax, [ebp+var_10]
		mov	[esp+38h+Time],	eax ; Time
		call	_localtime
		mov	[esp+38h+Time],	eax ; Tm
		call	_asctime
		mov	[esp+38h+var_2C], ebx
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs_30 ; "PKCS#11: _pkcs11h_certificate_isBetterC"...
		mov	[esp+38h+Time],	5
		call	sub_645CBF0E

loc_645C5723:				; CODE XREF: sub_645C55F0+EDj
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+var_10]
		cmp	edx, eax
		setnle	al
		movzx	eax, al
		mov	[ebp+var_C], eax

loc_645C5734:				; CODE XREF: sub_645C55F0+80j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C5760
		cmp	[ebp+var_C], 0
		setnz	al
		movzx	eax, al
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs_31 ; "PKCS#11: _pkcs11h_certificate_isBetterC"...
		mov	[esp+38h+Time],	5
		call	sub_645CBF0E

loc_645C5760:				; CODE XREF: sub_645C55F0+14Cj
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
sub_645C55F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C5769	proc near		; CODE XREF: sub_645C8AA5+19Dp
					; pkcs11h_certificate_deserializeCertificateId+CEp

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C579B
		mov	[esp+38h+var_30], 0BCh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aP_certificate_ ; "p_certificate_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C579C
; ---------------------------------------------------------------------------

loc_645C579B:				; CODE XREF: sub_645C5769+12j
		nop

loc_645C579C:				; CODE XREF: sub_645C5769+30j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C57C1
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs_32 ; "PKCS#11: _pkcs11h_certificate_newCertif"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C57C1:				; CODE XREF: sub_645C5769+3Bj
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	[esp+38h+var_34], 414h ; size_t
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C57E8
		jmp	short loc_645C57EF
; ---------------------------------------------------------------------------

loc_645C57E8:				; CODE XREF: sub_645C5769+7Bj
		mov	[ebp+var_C], 0

loc_645C57EF:				; CODE XREF: sub_645C5769+7Dj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C582C
		mov	eax, [ebp+arg_0]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs_33 ; "PKCS#11: _pkcs11h_certificate_newCertif"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C582C:				; CODE XREF: sub_645C5769+8Ej
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
sub_645C5769	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C5835	proc near		; CODE XREF: pkcs11h_certificate_getCertificateBlob+158p

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 64h
		mov	[ebp+var_C], 0
		mov	[ebp+var_18], 1
		mov	[ebp+var_30], 0
		lea	eax, [ebp+var_18]
		mov	[ebp+var_2C], eax
		mov	[ebp+var_28], 4
		mov	[ebp+var_24], 102h
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_34], 0
		mov	[ebp+var_38], 0
		mov	[ebp+var_10], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C58AC
		mov	[esp+68h+var_60], 0F6h ; int
		mov	[esp+68h+var_64], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+68h+var_68], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C58AD
; ---------------------------------------------------------------------------

loc_645C58AC:				; CODE XREF: sub_645C5835+57j
		nop

loc_645C58AD:				; CODE XREF: sub_645C5835+75j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C58D4
		mov	[esp+68h+var_60], 0F7h ; int
		mov	[esp+68h+var_64], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+68h+var_68], offset aCertificateIdN ; "certificate->id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C58D5
; ---------------------------------------------------------------------------

loc_645C58D4:				; CODE XREF: sub_645C5835+7Fj
		nop

loc_645C58D5:				; CODE XREF: sub_645C5835+9Dj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+404h]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+408h]
		mov	[ebp+var_1C], eax
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C5916
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11__pkcs11 ; "PKCS#11: __pkcs11h_certificate_loadCert"...
		mov	[esp+68h+var_68], 5
		call	sub_645CBF0E

loc_645C5916:				; CODE XREF: sub_645C5835+C4j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+68h+var_68], eax
		call	sub_645C24B4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C5935
		jmp	loc_645C5B41
; ---------------------------------------------------------------------------

loc_645C5935:				; CODE XREF: sub_645C5835+F9j
		mov	[ebp+var_C], 1
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+68h+var_68], eax
		call	sub_645C3FB4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C5958
		jmp	loc_645C5B41
; ---------------------------------------------------------------------------

loc_645C5958:				; CODE XREF: sub_645C5835+11Cj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		lea	edx, [ebp+var_38]
		mov	[esp+68h+var_58], edx
		lea	edx, [ebp+var_34]
		mov	[esp+68h+var_5C], edx
		mov	[esp+68h+var_60], 2
		lea	edx, [ebp+var_30]
		mov	[esp+68h+var_64], edx
		mov	[esp+68h+var_68], eax
		call	sub_645C324E
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C5991
		jmp	loc_645C5B41
; ---------------------------------------------------------------------------

loc_645C5991:				; CODE XREF: sub_645C5835+155j
		mov	[ebp+var_14], 0
		jmp	loc_645C5AFE
; ---------------------------------------------------------------------------

loc_645C599D:				; CODE XREF: sub_645C5835+2CFj
		mov	[ebp+var_44], 11h
		mov	[ebp+var_40], 0
		mov	[ebp+var_3C], 0
		mov	eax, [ebp+var_34]
		mov	edx, [ebp+var_14]
		shl	edx, 2
		add	eax, edx
		mov	edx, [eax]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+68h+var_5C], 1
		lea	ecx, [ebp+var_44]
		mov	[esp+68h+var_60], ecx
		mov	[esp+68h+var_64], edx
		mov	[esp+68h+var_68], eax
		call	sub_645C2F6F
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C5A4A
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	loc_645C5ADA
		mov	eax, [ebp+var_10]
		mov	[esp+68h+var_68], eax
		call	pkcs11h_getMessage
		mov	edx, [ebp+var_34]
		mov	ecx, [ebp+var_14]
		shl	ecx, 2
		add	edx, ecx
		mov	edx, [edx]
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx+0Ch]
		mov	ecx, [ecx+0Ch]
		add	ecx, 408h
		mov	[esp+68h+var_54], eax
		mov	eax, [ebp+var_10]
		mov	[esp+68h+var_58], eax
		mov	[esp+68h+var_5C], edx
		mov	[esp+68h+var_60], ecx
		mov	[esp+68h+var_64], offset aPkcs11Cannot_2 ; "PKCS#11: Cannot get	object attribute fo"...
		mov	[esp+68h+var_68], 4
		call	sub_645CBF0E
		jmp	loc_645C5ADA
; ---------------------------------------------------------------------------

loc_645C5A4A:				; CODE XREF: sub_645C5835+1B2j
		mov	ebx, [ebp+var_3C]
		mov	ecx, [ebp+var_40]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [eax+410h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+40Ch]
		mov	[esp+68h+var_5C], ebx
		mov	[esp+68h+var_60], ecx
		mov	[esp+68h+var_64], edx
		mov	[esp+68h+var_68], eax
		call	sub_645C55F0
		test	eax, eax
		jz	short loc_645C5ADA
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+40Ch]
		test	eax, eax
		jz	short loc_645C5A9F
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		add	eax, 40Ch
		mov	[esp+68h+var_68], eax
		call	sub_645C156B

loc_645C5A9F:				; CODE XREF: sub_645C5835+256j
		mov	edx, [ebp+var_3C]
		mov	eax, [ebp+var_40]
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx]
		lea	ebx, [ecx+410h]
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx]
		add	ecx, 40Ch
		mov	[esp+68h+var_5C], edx ;	size_t
		mov	[esp+68h+var_60], eax ;	void *
		mov	[esp+68h+var_64], ebx ;	int
		mov	[esp+68h+var_68], ecx ;	int
		call	sub_645C15E9
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C5ADA
		jmp	short loc_645C5AE1
; ---------------------------------------------------------------------------

loc_645C5ADA:				; CODE XREF: sub_645C5835+1BCj
					; sub_645C5835+210j ...
		mov	[ebp+var_10], 0

loc_645C5AE1:				; CODE XREF: sub_645C5835+2A3j
		mov	[esp+68h+var_64], 1
		lea	eax, [ebp+var_44]
		mov	[esp+68h+var_68], eax
		call	sub_645C316B
		cmp	[ebp+var_10], 0
		jnz	short loc_645C5B41
		add	[ebp+var_14], 1

loc_645C5AFE:				; CODE XREF: sub_645C5835+163j
		mov	eax, [ebp+var_38]
		cmp	[ebp+var_14], eax
		jb	loc_645C599D
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+40Ch]
		test	eax, eax
		jnz	short loc_645C5B22
		mov	[ebp+var_10], 13h
		jmp	short loc_645C5B41
; ---------------------------------------------------------------------------

loc_645C5B22:				; CODE XREF: sub_645C5835+2E2j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+68h+var_68], eax
		call	sub_645C5BAE
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C5B3A
		jmp	short loc_645C5B41
; ---------------------------------------------------------------------------

loc_645C5B3A:				; CODE XREF: sub_645C5835+301j
		mov	[ebp+var_10], 0

loc_645C5B41:				; CODE XREF: sub_645C5835+FBj
					; sub_645C5835+11Ej ...
		cmp	[ebp+var_C], 0
		jz	short loc_645C5B5F
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+68h+var_68], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C5B5F:				; CODE XREF: sub_645C5835+310j
		mov	eax, [ebp+var_34]
		test	eax, eax
		jz	short loc_645C5B71
		lea	eax, [ebp+var_34]
		mov	[esp+68h+var_68], eax
		call	sub_645C156B

loc_645C5B71:				; CODE XREF: sub_645C5835+32Fj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C5BA5
		mov	eax, [ebp+var_10]
		mov	[esp+68h+var_68], eax
		call	pkcs11h_getMessage
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11__pkcs_0 ; "PKCS#11: __pkcs11h_certificate_loadCert"...
		mov	[esp+68h+var_68], 5
		call	sub_645CBF0E

loc_645C5BA5:				; CODE XREF: sub_645C5835+344j
		mov	eax, [ebp+var_10]
		add	esp, 64h
		pop	ebx
		pop	ebp
		retn
sub_645C5835	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C5BAE	proc near		; CODE XREF: sub_645C5835+2F5p
					; pkcs11h_certificate_setCertificateIdCertificateBlob+133p ...

Dest		= dword	ptr -28h
Source		= dword	ptr -24h
Count		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 20h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C5BDA
		mov	[esp+28h+Count], 188h ;	int
		mov	[esp+28h+Source], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+Dest],	offset aCertificate_id ; "certificate_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C5BDB
; ---------------------------------------------------------------------------

loc_645C5BDA:				; CODE XREF: sub_645C5BAE+Cj
		nop

loc_645C5BDB:				; CODE XREF: sub_645C5BAE+2Aj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C5C00
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+Count], eax
		mov	[esp+28h+Source], offset aPkcs11__pkcs_1 ; "PKCS#11: __pkcs11h_certificate_updateCe"...
		mov	[esp+28h+Dest],	5
		call	sub_645CBF0E

loc_645C5C00:				; CODE XREF: sub_645C5BAE+35j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+410h]
		test	eax, eax
		jz	short loc_645C5C54
		mov	eax, ds:dword_645D8014
		mov	edx, [ebp+arg_0]
		lea	esi, [edx+4]
		mov	edx, [ebp+arg_0]
		mov	ebx, [edx+410h]
		mov	edx, [ebp+arg_0]
		mov	ecx, [edx+40Ch]
		mov	edx, ds:dword_645D8004
		mov	[esp+28h+var_18], 400h
		mov	[esp+28h+var_1C], esi
		mov	[esp+28h+Count], ebx
		mov	[esp+28h+Source], ecx
		mov	[esp+28h+Dest],	edx
		call	eax ; dword_645D8014
		test	eax, eax
		jnz	short loc_645C5C54
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+4], 0

loc_645C5C54:				; CODE XREF: sub_645C5BAE+5Dj
					; sub_645C5BAE+9Dj
		mov	eax, [ebp+arg_0]
		add	eax, 4
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_645C5C80
		mov	eax, Source
		mov	edx, [ebp+arg_0]
		add	edx, 4
		mov	[esp+28h+Count], 3FFh ;	Count
		mov	[esp+28h+Source], eax ;	Source
		mov	[esp+28h+Dest],	edx ; Dest
		call	_strncpy

loc_645C5C80:				; CODE XREF: sub_645C5BAE+B1j
		mov	eax, [ebp+arg_0]
		add	eax, 4
		mov	[esp+28h+Dest],	eax ; Str
		call	_strlen
		mov	edx, 3FFh
		mov	ecx, edx
		sub	ecx, eax
		mov	eax, off_645D1020
		mov	edx, [ebp+arg_0]
		add	edx, 4
		mov	[esp+28h+Count], ecx ; Count
		mov	[esp+28h+Source], eax ;	Source
		mov	[esp+28h+Dest],	edx ; Dest
		call	_strncat
		mov	eax, [ebp+arg_0]
		add	eax, 4
		mov	[esp+28h+Dest],	eax ; Str
		call	_strlen
		mov	edx, 3FFh
		mov	ecx, edx
		sub	ecx, eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [ebp+arg_0]
		add	edx, 4
		mov	[esp+28h+Count], ecx ; Count
		mov	[esp+28h+Source], eax ;	Source
		mov	[esp+28h+Dest],	edx ; Dest
		call	_strncat
		mov	eax, [ebp+arg_0]
		mov	byte ptr [eax+403h], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C5D16
		mov	eax, [ebp+arg_0]
		add	eax, 4
		mov	[esp+28h+Count], eax
		mov	[esp+28h+Source], offset aPkcs11__pkcs_2 ; "PKCS#11: __pkcs11h_certificate_updateCe"...
		mov	[esp+28h+Dest],	5
		call	sub_645CBF0E

loc_645C5D16:				; CODE XREF: sub_645C5BAE+148j
		mov	eax, 0
		add	esp, 20h
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_645C5BAE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C5D22	proc near		; CODE XREF: pkcs11h_certificate_signAny+15Bp
					; pkcs11h_certificate_decryptAny+15Bp

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 68h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 6
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C5D68
		mov	[esp+68h+var_60], 1CBh ; int
		mov	[esp+68h+var_64], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+68h+var_68], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C5D69
; ---------------------------------------------------------------------------

loc_645C5D68:				; CODE XREF: sub_645C5D22+26j
		nop

loc_645C5D69:				; CODE XREF: sub_645C5D22+44j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C5D8E
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11__pkcs_3 ; "PKCS#11: __pkcs11h_certificate_getKeyAt"...
		mov	[esp+68h+var_68], 5
		call	sub_645CBF0E

loc_645C5D8E:				; CODE XREF: sub_645C5D22+4Fj
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+68h+var_68], eax
		call	sub_645C24B4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C5DAA
		jmp	loc_645C6030
; ---------------------------------------------------------------------------

loc_645C5DAA:				; CODE XREF: sub_645C5D22+81j
		mov	[ebp+var_C], 1
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 0
		jmp	loc_645C601F
; ---------------------------------------------------------------------------

loc_645C5DC0:				; CODE XREF: sub_645C5D22+301j
		mov	[ebp+var_58], 108h
		mov	[ebp+var_54], 0
		mov	[ebp+var_50], 0
		mov	[ebp+var_4C], 109h
		mov	[ebp+var_48], 0
		mov	[ebp+var_44], 0
		mov	[ebp+var_40], 105h
		mov	[ebp+var_3C], 0
		mov	[ebp+var_38], 0
		mov	[ebp+var_34], 107h
		mov	[ebp+var_30], 0
		mov	[ebp+var_2C], 0
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_645C5E2B
		mov	[ebp+var_10], 82h
		jmp	loc_645C5FA1
; ---------------------------------------------------------------------------

loc_645C5E2B:				; CODE XREF: sub_645C5D22+FBj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+440h]
		test	eax, eax
		jz	short loc_645C5E87
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	edx, [eax+440h]
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C5E7B
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11KeyAttri ; "PKCS#11: Key attributes enforced by	pro"...
		mov	[esp+68h+var_68], 4
		call	sub_645CBF0E

loc_645C5E7B:				; CODE XREF: sub_645C5D22+139j
		mov	[ebp+var_14], 1
		jmp	loc_645C5F9A
; ---------------------------------------------------------------------------

loc_645C5E87:				; CODE XREF: sub_645C5D22+11Aj
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+10h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+68h+var_5C], 4
		lea	ecx, [ebp+var_58]
		mov	[esp+68h+var_60], ecx
		mov	[esp+68h+var_64], edx
		mov	[esp+68h+var_68], eax
		call	sub_645C2F6F
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C5EBC
		jmp	loc_645C5FA1
; ---------------------------------------------------------------------------

loc_645C5EBC:				; CODE XREF: sub_645C5D22+193j
		mov	eax, [ebp+var_54]
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_48]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_24], eax
		mov	eax, [ebp+var_30]
		mov	[ebp+var_28], eax
		cmp	[ebp+var_1C], 0
		jz	short loc_645C5EF5
		mov	eax, [ebp+var_1C]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_645C5EF5
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		or	eax, 1
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx

loc_645C5EF5:				; CODE XREF: sub_645C5D22+1B6j
					; sub_645C5D22+1C0j
		cmp	[ebp+var_20], 0
		jz	short loc_645C5F16
		mov	eax, [ebp+var_20]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_645C5F16
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		or	eax, 2
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx

loc_645C5F16:				; CODE XREF: sub_645C5D22+1D7j
					; sub_645C5D22+1E1j
		cmp	[ebp+var_24], 0
		jz	short loc_645C5F37
		mov	eax, [ebp+var_24]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_645C5F37
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		or	eax, 4
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx

loc_645C5F37:				; CODE XREF: sub_645C5D22+1F8j
					; sub_645C5D22+202j
		cmp	[ebp+var_28], 0
		jz	short loc_645C5F58
		mov	eax, [ebp+var_28]
		movzx	eax, byte ptr [eax]
		test	al, al
		jz	short loc_645C5F58
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		or	eax, 8
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx

loc_645C5F58:				; CODE XREF: sub_645C5D22+219j
					; sub_645C5D22+223j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_645C5F6B
		mov	[ebp+var_10], 63h
		jmp	short loc_645C5FA1
; ---------------------------------------------------------------------------

loc_645C5F6B:				; CODE XREF: sub_645C5D22+23Ej
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C5F93
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11KeyAtt_0 ; "PKCS#11: Key attributes loaded (%08x)"
		mov	[esp+68h+var_68], 4
		call	sub_645CBF0E

loc_645C5F93:				; CODE XREF: sub_645C5D22+251j
		mov	[ebp+var_14], 1

loc_645C5F9A:				; CODE XREF: sub_645C5D22+160j
		mov	[ebp+var_10], 0

loc_645C5FA1:				; CODE XREF: sub_645C5D22+104j
					; sub_645C5D22+195j ...
		mov	[esp+68h+var_64], 4
		lea	eax, [ebp+var_58]
		mov	[esp+68h+var_68], eax
		call	sub_645C316B
		cmp	[ebp+var_14], 0
		jnz	short loc_645C601F
		cmp	[ebp+var_18], 0
		jnz	short loc_645C6019
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C5FF4
		mov	eax, [ebp+var_10]
		mov	[esp+68h+var_68], eax
		call	pkcs11h_getMessage
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11GetPriva ; "PKCS#11: Get private key attributes	fai"...
		mov	[esp+68h+var_68], 4
		call	sub_645CBF0E

loc_645C5FF4:				; CODE XREF: sub_645C5D22+2A6j
		mov	[esp+68h+var_60], 1
		mov	[esp+68h+var_64], 0
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_68], eax
		call	sub_645C6148
		mov	[ebp+var_10], eax
		mov	[ebp+var_18], 1

loc_645C6019:				; CODE XREF: sub_645C5D22+29Cj
		cmp	[ebp+var_10], 0
		jnz	short loc_645C6030

loc_645C601F:				; CODE XREF: sub_645C5D22+99j
					; sub_645C5D22+296j
		cmp	[ebp+var_14], 0
		jz	loc_645C5DC0
		mov	[ebp+var_10], 0

loc_645C6030:				; CODE XREF: sub_645C5D22+83j
					; sub_645C5D22+2FBj
		cmp	[ebp+var_C], 0
		jz	short loc_645C604B
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+68h+var_68], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C604B:				; CODE XREF: sub_645C5D22+312j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C607F
		mov	eax, [ebp+var_10]
		mov	[esp+68h+var_68], eax
		call	pkcs11h_getMessage
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11__pkcs_4 ; "PKCS#11: __pkcs11h_certificate_getKeyAt"...
		mov	[esp+68h+var_68], 5
		call	sub_645CBF0E

loc_645C607F:				; CODE XREF: sub_645C5D22+331j
		mov	eax, [ebp+var_10]
		leave
		retn
sub_645C5D22	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C6084	proc near		; CODE XREF: sub_645C63EB+20Dp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C60B5
		mov	[esp+28h+var_20], 266h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C60B6
; ---------------------------------------------------------------------------

loc_645C60B5:				; CODE XREF: sub_645C6084+11j
		nop

loc_645C60B6:				; CODE XREF: sub_645C6084+2Fj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C60DB
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11_pkcs_34 ; "PKCS#11: _pkcs11h_certificate_validateS"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C60DB:				; CODE XREF: sub_645C6084+3Aj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], eax
		call	sub_645C3FB4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C60F4
		jmp	short loc_645C610F
; ---------------------------------------------------------------------------

loc_645C60F4:				; CODE XREF: sub_645C6084+6Cj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_645C6108
		mov	[ebp+var_C], 82h
		jmp	short loc_645C610F
; ---------------------------------------------------------------------------

loc_645C6108:				; CODE XREF: sub_645C6084+79j
		mov	[ebp+var_C], 0

loc_645C610F:				; CODE XREF: sub_645C6084+6Ej
					; sub_645C6084+82j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C6143
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11_pkcs_35 ; "PKCS#11: _pkcs11h_certificate_validateS"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C6143:				; CODE XREF: sub_645C6084+93j
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645C6084	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C6148	proc near		; CODE XREF: sub_645C5D22+2E8p
					; sub_645C63EB+623p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_18		= byte ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C6188
		mov	[esp+38h+var_30], 296h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6189
; ---------------------------------------------------------------------------

loc_645C6188:				; CODE XREF: sub_645C6148+20j
		nop

loc_645C6189:				; CODE XREF: sub_645C6148+3Ej
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C61CA
		cmp	[ebp+arg_8], 0
		setnz	al
		movzx	edx, al
		cmp	[ebp+arg_4], 0
		setnz	al
		movzx	eax, al
		mov	[esp+38h+var_28], edx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs_36 ; "PKCS#11: _pkcs11h_certificate_resetSess"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C61CA:				; CODE XREF: sub_645C6148+49j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C61F6
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C24B4
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C61EF
		jmp	loc_645C6390
; ---------------------------------------------------------------------------

loc_645C61EF:				; CODE XREF: sub_645C6148+A0j
		mov	[ebp+var_C], 1

loc_645C61F6:				; CODE XREF: sub_645C6148+86j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+14h]
		cmp	eax, 0FFFFFFFFh
		jz	loc_645C62E3
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		cmp	eax, 0FFFFFFFFh
		jnz	loc_645C62E3
		cmp	[ebp+arg_4], 0
		jz	short loc_645C6230
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+43Ch]
		test	eax, eax
		jz	short loc_645C628C

loc_645C6230:				; CODE XREF: sub_645C6148+D3j
		mov	eax, [ebp+arg_0]
		lea	ebx, [eax+10h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax+408h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [eax+404h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], ecx
		mov	[esp+38h+var_30], edx
		mov	[esp+38h+var_34], 3
		mov	[esp+38h+var_38], eax
		call	sub_645C3E1B
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_645C6280
		mov	[ebp+var_10], 1
		jmp	short loc_645C62E3
; ---------------------------------------------------------------------------

loc_645C6280:				; CODE XREF: sub_645C6148+12Dj
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0FFFFFFFFh
		jmp	short loc_645C62E3
; ---------------------------------------------------------------------------

loc_645C628C:				; CODE XREF: sub_645C6148+E6j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax+408h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [eax+404h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		lea	ebx, [ebp+var_18]
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], ecx
		mov	[esp+38h+var_30], edx
		mov	[esp+38h+var_34], 1
		mov	[esp+38h+var_38], eax
		call	sub_645C3E1B
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_645C62D9
		mov	[ebp+var_10], 1
		jmp	short loc_645C62E3
; ---------------------------------------------------------------------------

loc_645C62D9:				; CODE XREF: sub_645C6148+186j
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0FFFFFFFFh

loc_645C62E3:				; CODE XREF: sub_645C6148+BAj
					; sub_645C6148+C9j ...
		cmp	[ebp+var_10], 0
		jnz	short loc_645C632F
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		mov	ecx, [eax+1Ch]
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+20h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+38h+var_28], ecx
		mov	[esp+38h+var_2C], edx
		mov	[esp+38h+var_30], 1
		mov	edx, [ebp+arg_4]
		mov	[esp+38h+var_34], edx
		mov	[esp+38h+var_38], eax
		call	sub_645C414B
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C632F
		jmp	short loc_645C6390
; ---------------------------------------------------------------------------

loc_645C632F:				; CODE XREF: sub_645C6148+19Fj
					; sub_645C6148+1E3j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C6389
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_645C6389
		mov	eax, [ebp+arg_0]
		lea	ebx, [eax+10h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax+408h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [eax+404h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], ecx
		mov	[esp+38h+var_30], edx
		mov	[esp+38h+var_34], 3
		mov	[esp+38h+var_38], eax
		call	sub_645C3E1B
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C6389
		jmp	short loc_645C6390
; ---------------------------------------------------------------------------

loc_645C6389:				; CODE XREF: sub_645C6148+1EBj
					; sub_645C6148+1F6j ...
		mov	[ebp+var_14], 0

loc_645C6390:				; CODE XREF: sub_645C6148+A2j
					; sub_645C6148+1E5j ...
		cmp	[ebp+var_C], 0
		jz	short loc_645C63AE
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C63AE:				; CODE XREF: sub_645C6148+24Cj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C63E2
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11_pkcs_37 ; "PKCS#11: _pkcs11h_certificate_resetSess"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C63E2:				; CODE XREF: sub_645C6148+26Ej
		mov	eax, [ebp+var_14]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
sub_645C6148	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C63EB	proc near		; CODE XREF: pkcs11h_certificate_sign+166p
					; pkcs11h_certificate_signRecover+166p	...

var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_84		= dword	ptr -84h
var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_25		= byte ptr -25h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 94h
		mov	[ebp+var_C], 0
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_24], eax
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_25], 1
		mov	[ebp+var_2C], 4
		mov	[ebp+var_30], 10h
		mov	[ebp+var_54], 0
		lea	eax, [ebp+var_2C]
		mov	[ebp+var_50], eax
		mov	[ebp+var_4C], 4
		mov	[ebp+var_48], 100h
		lea	eax, [ebp+var_30]
		mov	[ebp+var_44], eax
		mov	[ebp+var_40], 4
		mov	[ebp+var_3C], 162h
		lea	eax, [ebp+var_25]
		mov	[ebp+var_38], eax
		mov	[ebp+var_34], 1
		mov	[ebp+var_60], 11h
		mov	eax, [ebp+arg_14]
		mov	[ebp+var_5C], eax
		mov	[ebp+var_58], 0
		mov	[ebp+var_64], 0FFFFFFFFh
		mov	[ebp+var_10], 6
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 0
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C64B5
		mov	[esp+98h+var_90], 32Dh ; int
		mov	[esp+98h+var_94], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+98h+var_98], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C64B6
; ---------------------------------------------------------------------------

loc_645C64B5:				; CODE XREF: sub_645C63EB+AAj
		nop

loc_645C64B6:				; CODE XREF: sub_645C63EB+C8j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C64DF
		mov	[esp+98h+var_90], 32Eh ; int
		mov	[esp+98h+var_94], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+98h+var_98], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C64E0
; ---------------------------------------------------------------------------

loc_645C64DF:				; CODE XREF: sub_645C63EB+D4j
		nop

loc_645C64E0:				; CODE XREF: sub_645C63EB+F2j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C6504
		mov	[esp+98h+var_90], 32Fh ; int
		mov	[esp+98h+var_94], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+98h+var_98], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6505
; ---------------------------------------------------------------------------

loc_645C6504:				; CODE XREF: sub_645C63EB+F9j
		nop

loc_645C6505:				; CODE XREF: sub_645C63EB+117j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645C6529
		mov	[esp+98h+var_90], 330h ; int
		mov	[esp+98h+var_94], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+98h+var_98], offset aSourceNull_0 ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C652A
; ---------------------------------------------------------------------------

loc_645C6529:				; CODE XREF: sub_645C63EB+11Ej
		nop

loc_645C652A:				; CODE XREF: sub_645C63EB+13Cj
		cmp	[ebp+arg_18], 0
		jnz	short loc_645C654E
		mov	[esp+98h+var_90], 332h ; int
		mov	[esp+98h+var_94], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+98h+var_98], offset aP_target_siz_0 ; "p_target_size!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C654F
; ---------------------------------------------------------------------------

loc_645C654E:				; CODE XREF: sub_645C63EB+143j
		nop

loc_645C654F:				; CODE XREF: sub_645C63EB+161j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C65AD
		cmp	[ebp+arg_14], 0
		jz	short loc_645C6566
		mov	eax, [ebp+arg_18]
		mov	eax, [eax]
		jmp	short loc_645C656B
; ---------------------------------------------------------------------------

loc_645C6566:				; CODE XREF: sub_645C63EB+172j
		mov	eax, 0

loc_645C656B:				; CODE XREF: sub_645C63EB+179j
		mov	[esp+98h+var_78], eax
		mov	eax, [ebp+arg_14]
		mov	[esp+98h+var_7C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+98h+var_80], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+98h+var_84], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+98h+var_88], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+98h+var_8C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], offset aPkcs11__pkcs_5 ; "PKCS#11: __pkcs11h_certificate_doPrivat"...
		mov	[esp+98h+var_98], 5
		call	sub_645CBF0E

loc_645C65AD:				; CODE XREF: sub_645C63EB+16Cj
		cmp	[ebp+arg_14], 0
		jnz	short loc_645C65BC
		mov	eax, [ebp+arg_18]
		mov	dword ptr [eax], 0

loc_645C65BC:				; CODE XREF: sub_645C63EB+1C6j
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+98h+var_98], eax
		call	sub_645C24B4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C65D8
		jmp	loc_645C6A29
; ---------------------------------------------------------------------------

loc_645C65D8:				; CODE XREF: sub_645C63EB+1E6j
		mov	[ebp+var_C], 1
		jmp	loc_645C6A1F
; ---------------------------------------------------------------------------

loc_645C65E4:				; CODE XREF: sub_645C63EB+638j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+14h]
		test	eax, eax
		jnz	loc_645C6775
		mov	eax, [ebp+arg_0]
		mov	[esp+98h+var_98], eax
		call	sub_645C6084
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C660B
		jmp	loc_645C6948
; ---------------------------------------------------------------------------

loc_645C660B:				; CODE XREF: sub_645C63EB+219j
		mov	eax, [ebp+arg_4]
		cmp	eax, 1
		jz	short loc_645C666B
		cmp	eax, 1
		jb	short loc_645C662F
		cmp	eax, 2
		jz	loc_645C66A7
		cmp	eax, 3
		jz	loc_645C66E0
		jmp	loc_645C673D
; ---------------------------------------------------------------------------

loc_645C662F:				; CODE XREF: sub_645C63EB+22Bj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+0AAh]
		mov	edx, [ebp+arg_0]
		mov	ecx, [edx+10h]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+0Ch]
		mov	edx, [edx+14h]
		mov	[esp+98h+var_90], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+98h+var_94], ecx
		mov	[esp+98h+var_98], edx
		call	eax
		mov	[ebp+var_10], eax
		jmp	loc_645C6745
; ---------------------------------------------------------------------------

loc_645C666B:				; CODE XREF: sub_645C63EB+226j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+0BAh]
		mov	edx, [ebp+arg_0]
		mov	ecx, [edx+10h]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+0Ch]
		mov	edx, [edx+14h]
		mov	[esp+98h+var_90], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+98h+var_94], ecx
		mov	[esp+98h+var_98], edx
		call	eax
		mov	[ebp+var_10], eax
		jmp	loc_645C6745
; ---------------------------------------------------------------------------

loc_645C66A7:				; CODE XREF: sub_645C63EB+230j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+86h]
		mov	edx, [ebp+arg_0]
		mov	ecx, [edx+10h]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+0Ch]
		mov	edx, [edx+14h]
		mov	[esp+98h+var_90], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+98h+var_94], ecx
		mov	[esp+98h+var_98], edx
		call	eax
		mov	[ebp+var_10], eax
		jmp	short loc_645C6745
; ---------------------------------------------------------------------------

loc_645C66E0:				; CODE XREF: sub_645C63EB+239j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+0F6h]
		mov	edx, [ebp+arg_0]
		mov	ecx, [edx+10h]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+0Ch]
		mov	edx, [edx+14h]
		lea	ebx, [ebp+var_64]
		mov	[esp+98h+var_7C], ebx
		mov	[esp+98h+var_80], 3
		lea	ebx, [ebp+var_54]
		mov	[esp+98h+var_84], ebx
		mov	ebx, [ebp+arg_10]
		mov	[esp+98h+var_88], ebx
		mov	ebx, [ebp+arg_C]
		mov	[esp+98h+var_8C], ebx
		mov	[esp+98h+var_90], ecx
		lea	ecx, [ebp+var_24]
		mov	[esp+98h+var_94], ecx
		mov	[esp+98h+var_98], edx
		call	eax
		mov	[ebp+var_10], eax
		jmp	short loc_645C6745
; ---------------------------------------------------------------------------

loc_645C673D:				; CODE XREF: sub_645C63EB+23Fj
		mov	[ebp+var_10], 7
		nop

loc_645C6745:				; CODE XREF: sub_645C63EB+27Bj
					; sub_645C63EB+2B7j ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C676A
		mov	eax, [ebp+var_10]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], offset aPkcs11__pkcs_6 ; "PKCS#11: __pkcs11h_certificate_doPrivat"...
		mov	[esp+98h+var_98], 5
		call	sub_645CBF0E

loc_645C676A:				; CODE XREF: sub_645C63EB+362j
		cmp	[ebp+var_10], 0
		jz	short loc_645C6775
		jmp	loc_645C6948
; ---------------------------------------------------------------------------

loc_645C6775:				; CODE XREF: sub_645C63EB+201j
					; sub_645C63EB+383j
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+14h], 0
		mov	eax, [ebp+arg_18]
		mov	eax, [eax]
		mov	[ebp+var_68], eax
		mov	eax, [ebp+arg_4]
		cmp	eax, 1
		jz	short loc_645C67F2
		cmp	eax, 1
		jb	short loc_645C67AB
		cmp	eax, 2
		jz	loc_645C6839
		cmp	eax, 3
		jz	loc_645C687D
		jmp	loc_645C68C4
; ---------------------------------------------------------------------------

loc_645C67AB:				; CODE XREF: sub_645C63EB+3A7j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+0AEh]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+0Ch]
		mov	edx, [edx+14h]
		lea	ecx, [ebp+var_68]
		mov	[esp+98h+var_88], ecx
		mov	ecx, [ebp+arg_14]
		mov	[esp+98h+var_8C], ecx
		mov	ecx, [ebp+arg_10]
		mov	[esp+98h+var_90], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esp+98h+var_94], ecx
		mov	[esp+98h+var_98], edx
		call	eax
		mov	[ebp+var_10], eax
		jmp	loc_645C68CC
; ---------------------------------------------------------------------------

loc_645C67F2:				; CODE XREF: sub_645C63EB+3A2j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+0BEh]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+0Ch]
		mov	edx, [edx+14h]
		lea	ecx, [ebp+var_68]
		mov	[esp+98h+var_88], ecx
		mov	ecx, [ebp+arg_14]
		mov	[esp+98h+var_8C], ecx
		mov	ecx, [ebp+arg_10]
		mov	[esp+98h+var_90], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esp+98h+var_94], ecx
		mov	[esp+98h+var_98], edx
		call	eax
		mov	[ebp+var_10], eax
		jmp	loc_645C68CC
; ---------------------------------------------------------------------------

loc_645C6839:				; CODE XREF: sub_645C63EB+3ACj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+8Ah]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+0Ch]
		mov	edx, [edx+14h]
		lea	ecx, [ebp+var_68]
		mov	[esp+98h+var_88], ecx
		mov	ecx, [ebp+arg_14]
		mov	[esp+98h+var_8C], ecx
		mov	ecx, [ebp+arg_10]
		mov	[esp+98h+var_90], ecx
		mov	ecx, [ebp+arg_C]
		mov	[esp+98h+var_94], ecx
		mov	[esp+98h+var_98], edx
		call	eax
		mov	[ebp+var_10], eax
		jmp	short loc_645C68CC
; ---------------------------------------------------------------------------

loc_645C687D:				; CODE XREF: sub_645C63EB+3B5j
		mov	eax, [ebp+var_68]
		mov	[ebp+var_58], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+62h]
		mov	ecx, [ebp+var_64]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+0Ch]
		mov	edx, [edx+14h]
		mov	[esp+98h+var_8C], 1
		lea	ebx, [ebp+var_60]
		mov	[esp+98h+var_90], ebx
		mov	[esp+98h+var_94], ecx
		mov	[esp+98h+var_98], edx
		call	eax
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_58]
		mov	[ebp+var_68], eax
		jmp	short loc_645C68CC
; ---------------------------------------------------------------------------

loc_645C68C4:				; CODE XREF: sub_645C63EB+3BBj
		mov	[ebp+var_10], 7
		nop

loc_645C68CC:				; CODE XREF: sub_645C63EB+402j
					; sub_645C63EB+449j ...
		mov	edx, [ebp+var_68]
		mov	eax, [ebp+arg_18]
		mov	[eax], edx
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C68F9
		mov	eax, [ebp+var_10]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], offset aPkcs11__pkcs_7 ; "PKCS#11: __pkcs11h_certificate_doPrivat"...
		mov	[esp+98h+var_98], 5
		call	sub_645CBF0E

loc_645C68F9:				; CODE XREF: sub_645C63EB+4F1j
		cmp	[ebp+var_10], 150h
		jnz	short loc_645C6912
		cmp	[ebp+arg_4], 3
		jz	short loc_645C6912
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+14h], 1

loc_645C6912:				; CODE XREF: sub_645C63EB+515j
					; sub_645C63EB+51Bj
		cmp	[ebp+arg_14], 0
		jz	short loc_645C6920
		cmp	[ebp+var_10], 0
		jz	short loc_645C693A
		jmp	short loc_645C6948
; ---------------------------------------------------------------------------

loc_645C6920:				; CODE XREF: sub_645C63EB+52Bj
		cmp	[ebp+var_10], 0
		jnz	short loc_645C6938
		cmp	[ebp+arg_4], 3
		jz	short loc_645C693A
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+14h], 1
		jmp	short loc_645C693A
; ---------------------------------------------------------------------------

loc_645C6938:				; CODE XREF: sub_645C63EB+539j
		jmp	short loc_645C6948
; ---------------------------------------------------------------------------

loc_645C693A:				; CODE XREF: sub_645C63EB+531j
					; sub_645C63EB+53Fj ...
		mov	[ebp+var_18], 1
		mov	[ebp+var_10], 0

loc_645C6948:				; CODE XREF: sub_645C63EB+21Bj
					; sub_645C63EB+385j ...
		mov	eax, [ebp+var_64]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_645C697E
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+5Ah]
		mov	ecx, [ebp+var_64]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+0Ch]
		mov	edx, [edx+14h]
		mov	[esp+98h+var_94], ecx
		mov	[esp+98h+var_98], edx
		call	eax
		mov	[ebp+var_64], 0FFFFFFFFh

loc_645C697E:				; CODE XREF: sub_645C63EB+563j
		cmp	[ebp+var_18], 0
		jnz	loc_645C6A1F
		cmp	[ebp+var_10], 150h
		jnz	short loc_645C6996
		jmp	loc_645C6A29
; ---------------------------------------------------------------------------

loc_645C6996:				; CODE XREF: sub_645C63EB+5A4j
		cmp	[ebp+var_14], 0
		jz	short loc_645C69B7
		cmp	[ebp+var_10], 32h
		jnz	short loc_645C69B7
		mov	[ebp+var_14], 0
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+98h+var_98], eax
		call	sub_645C4521

loc_645C69B7:				; CODE XREF: sub_645C63EB+5AFj
					; sub_645C63EB+5B5j
		cmp	[ebp+var_14], 0
		jnz	short loc_645C6A16
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C69F1
		mov	eax, [ebp+var_10]
		mov	[esp+98h+var_98], eax
		call	pkcs11h_getMessage
		mov	[esp+98h+var_8C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], offset aPkcs11PrivateK ; "PKCS#11: Private key operation failed r"...
		mov	[esp+98h+var_98], 4
		call	sub_645CBF0E

loc_645C69F1:				; CODE XREF: sub_645C63EB+5DAj
		mov	[ebp+var_14], 1
		mov	[esp+98h+var_90], 1
		mov	[esp+98h+var_94], 0
		mov	eax, [ebp+arg_0]
		mov	[esp+98h+var_98], eax
		call	sub_645C6148
		mov	[ebp+var_10], eax

loc_645C6A16:				; CODE XREF: sub_645C63EB+5D0j
		cmp	[ebp+var_10], 0
		jz	short loc_645C6A1F
		nop
		jmp	short loc_645C6A29
; ---------------------------------------------------------------------------

loc_645C6A1F:				; CODE XREF: sub_645C63EB+1F4j
					; sub_645C63EB+597j ...
		cmp	[ebp+var_18], 0
		jz	loc_645C65E4

loc_645C6A29:				; CODE XREF: sub_645C63EB+1E8j
					; sub_645C63EB+5A6j ...
		cmp	[ebp+var_C], 0
		jz	short loc_645C6A44
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+98h+var_98], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C6A44:				; CODE XREF: sub_645C63EB+642j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C6A81
		mov	eax, [ebp+arg_18]
		mov	ebx, [eax]
		mov	eax, [ebp+var_10]
		mov	[esp+98h+var_98], eax
		call	pkcs11h_getMessage
		mov	[esp+98h+var_88], ebx
		mov	[esp+98h+var_8C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+98h+var_90], eax
		mov	[esp+98h+var_94], offset aPkcs11__pkcs_8 ; "PKCS#11: __pkcs11h_certificate_doPrivat"...
		mov	[esp+98h+var_98], 5
		call	sub_645CBF0E

loc_645C6A81:				; CODE XREF: sub_645C63EB+661j
		mov	eax, [ebp+var_10]
		add	esp, 94h
		pop	ebx
		pop	ebp
		retn
sub_645C63EB	endp

; Exported entry  12. pkcs11h_certificate_freeCertificateId

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_freeCertificateId
pkcs11h_certificate_freeCertificateId proc near
					; CODE XREF: pkcs11h_certificate_freeCertificate+B7p
					; pkcs11h_certificate_create+2B5p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C6ABA
		mov	[esp+18h+var_10], 425h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6ABB
; ---------------------------------------------------------------------------

loc_645C6ABA:				; CODE XREF: pkcs11h_certificate_freeCertificateId+Dj
		nop

loc_645C6ABB:				; CODE XREF: pkcs11h_certificate_freeCertificateId+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C6AE4
		mov	[esp+18h+var_10], 426h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C6AE5
; ---------------------------------------------------------------------------

loc_645C6AE4:				; CODE XREF: pkcs11h_certificate_freeCertificateId+37j
		nop

loc_645C6AE5:				; CODE XREF: pkcs11h_certificate_freeCertificateId+55j
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_645C6B0A
		mov	[esp+18h+var_10], 427h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+18h+var_18], offset aCertificate_id ; "certificate_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6B0B
; ---------------------------------------------------------------------------

loc_645C6B0A:				; CODE XREF: pkcs11h_certificate_freeCertificateId+5Dj
		nop

loc_645C6B0B:				; CODE XREF: pkcs11h_certificate_freeCertificateId+7Bj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C6B30
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_10], eax
		mov	[esp+18h+var_14], offset aPkcs11Pkcs1_13 ; "PKCS#11: pkcs11h_certificate_freeCertif"...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645C6B30:				; CODE XREF: pkcs11h_certificate_freeCertificateId+86j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+404h]
		test	eax, eax
		jz	short loc_645C6B4D
		mov	eax, [ebp+arg_0]
		add	eax, 404h
		mov	[esp+18h+var_18], eax
		call	sub_645C156B

loc_645C6B4D:				; CODE XREF: pkcs11h_certificate_freeCertificateId+AEj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+40Ch]
		test	eax, eax
		jz	short loc_645C6B6A
		mov	eax, [ebp+arg_0]
		add	eax, 40Ch
		mov	[esp+18h+var_18], eax
		call	sub_645C156B

loc_645C6B6A:				; CODE XREF: pkcs11h_certificate_freeCertificateId+CBj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_645C6B89
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+18h+var_18], eax
		call	pkcs11h_token_freeTokenId
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0

loc_645C6B89:				; CODE XREF: pkcs11h_certificate_freeCertificateId+E4j
		lea	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	sub_645C156B
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C6BB2
		mov	[esp+18h+var_14], offset aPkcs11Pkcs1_14 ; "PKCS#11: pkcs11h_certificate_freeCertif"...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645C6BB2:				; CODE XREF: pkcs11h_certificate_freeCertificateId+10Fj
		mov	eax, 0
		leave
		retn
pkcs11h_certificate_freeCertificateId endp

; Exported entry   6. pkcs11h_certificate_duplicateCertificateId

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_certificate_duplicateCertificateId(int, void *)
		public pkcs11h_certificate_duplicateCertificateId
pkcs11h_certificate_duplicateCertificateId proc	near
					; CODE XREF: pkcs11h_certificate_create+15Ap
					; pkcs11h_certificate_getCertificateId+E4p ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C6BEE
		mov	[esp+38h+var_30], 44Ah ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6BEF
; ---------------------------------------------------------------------------

loc_645C6BEE:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+15j
		nop

loc_645C6BEF:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+33j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C6C18
		mov	[esp+38h+var_30], 44Bh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C6C19
; ---------------------------------------------------------------------------

loc_645C6C18:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+3Fj
		nop

loc_645C6C19:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+5Dj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C6C3D
		mov	[esp+38h+var_30], 44Ch ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aToNull_0 ; "to!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6C3E
; ---------------------------------------------------------------------------

loc_645C6C3D:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+64j
		nop

loc_645C6C3E:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+82j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C6C62
		mov	[esp+38h+var_30], 44Dh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aFromNull_0 ; "from!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6C63
; ---------------------------------------------------------------------------

loc_645C6C62:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+89j
		nop

loc_645C6C63:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+A7j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C6C8F
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_15 ; "PKCS#11: pkcs11h_certificate_duplicateC"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C6C8F:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+B2j
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	[esp+38h+var_2C], 414h ; size_t
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_30], eax ;	void *
		mov	[esp+38h+var_34], 0 ; int
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax ;	int
		call	sub_645C15E9
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	loc_645C6D8B
		mov	eax, [ebp+arg_4]
		mov	edx, [eax]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+38h+var_2C], 464h ; size_t
		mov	[esp+38h+var_30], edx ;	void *
		mov	[esp+38h+var_34], 0 ; int
		mov	[esp+38h+var_38], eax ;	int
		call	sub_645C15E9
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	loc_645C6D8B
		mov	eax, [ebp+arg_4]
		mov	edx, [eax+408h]
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+404h]
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx]
		lea	ebx, [ecx+408h]
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx]
		add	ecx, 404h
		mov	[esp+38h+var_2C], edx ;	size_t
		mov	[esp+38h+var_30], eax ;	void *
		mov	[esp+38h+var_34], ebx ;	int
		mov	[esp+38h+var_38], ecx ;	int
		call	sub_645C15E9
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645C6D8B
		mov	eax, [ebp+arg_4]
		mov	edx, [eax+410h]
		mov	eax, [ebp+arg_4]
		mov	eax, [eax+40Ch]
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx]
		lea	ebx, [ecx+410h]
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx]
		add	ecx, 40Ch
		mov	[esp+38h+var_2C], edx ;	size_t
		mov	[esp+38h+var_30], eax ;	void *
		mov	[esp+38h+var_34], ebx ;	int
		mov	[esp+38h+var_38], ecx ;	int
		call	sub_645C15E9
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645C6D8B
		mov	[ebp+var_C], 0

loc_645C6D8B:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+108j
					; pkcs11h_certificate_duplicateCertificateId+13Bj ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C6DC8
		mov	eax, [ebp+arg_0]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_16 ; "PKCS#11: pkcs11h_certificate_duplicateC"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C6DC8:				; CODE XREF: pkcs11h_certificate_duplicateCertificateId+1DAj
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_duplicateCertificateId endp

; Exported entry  21. pkcs11h_certificate_setCertificateIdCertificateBlob

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_certificate_setCertificateIdCertificateBlob(int, void *, size_t)
		public pkcs11h_certificate_setCertificateIdCertificateBlob
pkcs11h_certificate_setCertificateIdCertificateBlob proc near

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C6E05
		mov	[esp+28h+var_20], 48Ch ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6E06
; ---------------------------------------------------------------------------

loc_645C6E05:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+14j
		nop

loc_645C6E06:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+32j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C6E2F
		mov	[esp+28h+var_20], 48Dh ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C6E30
; ---------------------------------------------------------------------------

loc_645C6E2F:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+3Ej
		nop

loc_645C6E30:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+5Cj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C6E54
		mov	[esp+28h+var_20], 48Eh ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset aCertificate_id ; "certificate_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6E55
; ---------------------------------------------------------------------------

loc_645C6E54:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+63j
		nop

loc_645C6E55:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+81j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C6E79
		mov	[esp+28h+var_20], 48Fh ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset aBlobNull_1 ; "blob!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6E7A
; ---------------------------------------------------------------------------

loc_645C6E79:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+88j
		nop

loc_645C6E7A:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+A6j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C6E9F
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_17 ; "PKCS#11: pkcs11h_certificate_setCertifi"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C6E9F:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+B1j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+40Ch]
		test	eax, eax
		jz	short loc_645C6EC7
		mov	eax, [ebp+arg_0]
		add	eax, 40Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C156B
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C6EC7
		jmp	short loc_645C6F1B
; ---------------------------------------------------------------------------

loc_645C6EC7:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+D9j
					; pkcs11h_certificate_setCertificateIdCertificateBlob+F2j
		mov	eax, [ebp+arg_0]
		lea	ecx, [eax+410h]
		mov	eax, [ebp+arg_0]
		lea	edx, [eax+40Ch]
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_1C], eax ;	size_t
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_20], eax ;	void *
		mov	[esp+28h+var_24], ecx ;	int
		mov	[esp+28h+var_28], edx ;	int
		call	sub_645C15E9
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C6EFE
		jmp	short loc_645C6F1B
; ---------------------------------------------------------------------------

loc_645C6EFE:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+129j
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	sub_645C5BAE
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C6F14
		jmp	short loc_645C6F1B
; ---------------------------------------------------------------------------

loc_645C6F14:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+13Fj
		mov	[ebp+var_C], 0

loc_645C6F1B:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+F4j
					; pkcs11h_certificate_setCertificateIdCertificateBlob+12Bj ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C6F4F
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_18 ; "PKCS#11: pkcs11h_certificate_setCertifi"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C6F4F:				; CODE XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+152j
		mov	eax, [ebp+var_C]
		leave
		retn
pkcs11h_certificate_setCertificateIdCertificateBlob endp

; Exported entry  11. pkcs11h_certificate_freeCertificate

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_freeCertificate
pkcs11h_certificate_freeCertificate proc near ;	CODE XREF: pkcs11h_openssl_freeSession+151p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C6F81
		mov	[esp+18h+var_10], 4BEh ; int
		mov	[esp+18h+var_14], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C6F82
; ---------------------------------------------------------------------------

loc_645C6F81:				; CODE XREF: pkcs11h_certificate_freeCertificate+Dj
		nop

loc_645C6F82:				; CODE XREF: pkcs11h_certificate_freeCertificate+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C6FAB
		mov	[esp+18h+var_10], 4BFh ; int
		mov	[esp+18h+var_14], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C6FAC
; ---------------------------------------------------------------------------

loc_645C6FAB:				; CODE XREF: pkcs11h_certificate_freeCertificate+37j
		nop

loc_645C6FAC:				; CODE XREF: pkcs11h_certificate_freeCertificate+55j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C6FD1
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_10], eax
		mov	[esp+18h+var_14], offset aPkcs11Pkcs1_19 ; "PKCS#11: pkcs11h_certificate_freeCertif"...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645C6FD1:				; CODE XREF: pkcs11h_certificate_freeCertificate+60j
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jz	short loc_645C7032
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_645C6FFA
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	sub_645C3851
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], 0

loc_645C6FFA:				; CODE XREF: pkcs11h_certificate_freeCertificate+8Cj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_645C7019
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+18h+var_18], eax
		call	pkcs11h_certificate_freeCertificateId
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0

loc_645C7019:				; CODE XREF: pkcs11h_certificate_freeCertificate+ADj
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+18h+var_18], eax
		call	sub_645C252D
		lea	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	sub_645C156B

loc_645C7032:				; CODE XREF: pkcs11h_certificate_freeCertificate+82j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C7050
		mov	[esp+18h+var_14], offset aPkcs11Pkcs1_20 ; "PKCS#11: pkcs11h_certificate_freeCertif"...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645C7050:				; CODE XREF: pkcs11h_certificate_freeCertificate+E6j
		mov	eax, 0
		leave
		retn
pkcs11h_certificate_freeCertificate endp

; Exported entry  18. pkcs11h_certificate_lockSession

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_lockSession
pkcs11h_certificate_lockSession	proc near ; CODE XREF: sub_645CDCD1+133p
					; sub_645CDF10+F8p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C708B
		mov	[esp+28h+var_20], 4E7h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C708C
; ---------------------------------------------------------------------------

loc_645C708B:				; CODE XREF: pkcs11h_certificate_lockSession+14j
		nop

loc_645C708C:				; CODE XREF: pkcs11h_certificate_lockSession+32j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C70B5
		mov	[esp+28h+var_20], 4E8h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C70B6
; ---------------------------------------------------------------------------

loc_645C70B5:				; CODE XREF: pkcs11h_certificate_lockSession+3Ej
		nop

loc_645C70B6:				; CODE XREF: pkcs11h_certificate_lockSession+5Cj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C70DA
		mov	[esp+28h+var_20], 4E9h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C70DB
; ---------------------------------------------------------------------------

loc_645C70DA:				; CODE XREF: pkcs11h_certificate_lockSession+63j
		nop

loc_645C70DB:				; CODE XREF: pkcs11h_certificate_lockSession+81j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C70F7
		jmp	short loc_645C70FE
; ---------------------------------------------------------------------------

loc_645C70F7:				; CODE XREF: pkcs11h_certificate_lockSession+9Cj
		mov	[ebp+var_C], 0

loc_645C70FE:				; CODE XREF: pkcs11h_certificate_lockSession+9Ej
		mov	eax, [ebp+var_C]
		leave
		retn
pkcs11h_certificate_lockSession	endp

; Exported entry  19. pkcs11h_certificate_releaseSession

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_releaseSession
pkcs11h_certificate_releaseSession proc	near ; CODE XREF: sub_645CDCD1+1EDp
					; sub_645CDF10+1B3p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C7137
		mov	[esp+28h+var_20], 500h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7138
; ---------------------------------------------------------------------------

loc_645C7137:				; CODE XREF: pkcs11h_certificate_releaseSession+14j
		nop

loc_645C7138:				; CODE XREF: pkcs11h_certificate_releaseSession+32j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C7161
		mov	[esp+28h+var_20], 501h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C7162
; ---------------------------------------------------------------------------

loc_645C7161:				; CODE XREF: pkcs11h_certificate_releaseSession+3Ej
		nop

loc_645C7162:				; CODE XREF: pkcs11h_certificate_releaseSession+5Cj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C7186
		mov	[esp+28h+var_20], 502h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7187
; ---------------------------------------------------------------------------

loc_645C7186:				; CODE XREF: pkcs11h_certificate_releaseSession+63j
		nop

loc_645C7187:				; CODE XREF: pkcs11h_certificate_releaseSession+81j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_645C71AD
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C24F5
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C71AD
		jmp	short loc_645C71B4
; ---------------------------------------------------------------------------

loc_645C71AD:				; CODE XREF: pkcs11h_certificate_releaseSession+8Cj
					; pkcs11h_certificate_releaseSession+A6j
		mov	[ebp+var_C], 0

loc_645C71B4:				; CODE XREF: pkcs11h_certificate_releaseSession+A8j
		mov	eax, [ebp+var_C]
		leave
		retn
pkcs11h_certificate_releaseSession endp

; Exported entry  24. pkcs11h_certificate_sign

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_sign
pkcs11h_certificate_sign proc near	; CODE XREF: pkcs11h_certificate_signAny+1AAp

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C71EE
		mov	[esp+38h+var_30], 51Fh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C71EF
; ---------------------------------------------------------------------------

loc_645C71EE:				; CODE XREF: pkcs11h_certificate_sign+15j
		nop

loc_645C71EF:				; CODE XREF: pkcs11h_certificate_sign+33j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C7218
		mov	[esp+38h+var_30], 520h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C7219
; ---------------------------------------------------------------------------

loc_645C7218:				; CODE XREF: pkcs11h_certificate_sign+3Fj
		nop

loc_645C7219:				; CODE XREF: pkcs11h_certificate_sign+5Dj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C723D
		mov	[esp+38h+var_30], 521h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C723E
; ---------------------------------------------------------------------------

loc_645C723D:				; CODE XREF: pkcs11h_certificate_sign+64j
		nop

loc_645C723E:				; CODE XREF: pkcs11h_certificate_sign+82j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C7262
		mov	[esp+38h+var_30], 522h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aSourceNull_0 ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7263
; ---------------------------------------------------------------------------

loc_645C7262:				; CODE XREF: pkcs11h_certificate_sign+89j
		nop

loc_645C7263:				; CODE XREF: pkcs11h_certificate_sign+A7j
		cmp	[ebp+arg_14], 0
		jnz	short loc_645C7287
		mov	[esp+38h+var_30], 524h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aP_target_siz_0 ; "p_target_size!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7288
; ---------------------------------------------------------------------------

loc_645C7287:				; CODE XREF: pkcs11h_certificate_sign+AEj
		nop

loc_645C7288:				; CODE XREF: pkcs11h_certificate_sign+CCj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C72DF
		cmp	[ebp+arg_10], 0
		jz	short loc_645C729F
		mov	eax, [ebp+arg_14]
		mov	eax, [eax]
		jmp	short loc_645C72A4
; ---------------------------------------------------------------------------

loc_645C729F:				; CODE XREF: pkcs11h_certificate_sign+DDj
		mov	eax, 0

loc_645C72A4:				; CODE XREF: pkcs11h_certificate_sign+E4j
		mov	[esp+38h+var_1C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_21 ; "PKCS#11: pkcs11h_certificate_sign entry"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C72DF:				; CODE XREF: pkcs11h_certificate_sign+D7j
		cmp	[ebp+arg_10], 0
		jnz	short loc_645C72EE
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0

loc_645C72EE:				; CODE XREF: pkcs11h_certificate_sign+12Aj
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], 0
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	sub_645C63EB
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C732F
		jmp	short loc_645C7336
; ---------------------------------------------------------------------------

loc_645C732F:				; CODE XREF: pkcs11h_certificate_sign+172j
		mov	[ebp+var_C], 0

loc_645C7336:				; CODE XREF: pkcs11h_certificate_sign+174j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C7373
		mov	eax, [ebp+arg_14]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_22 ; "PKCS#11: pkcs11h_certificate_sign retur"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C7373:				; CODE XREF: pkcs11h_certificate_sign+185j
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_sign endp

; Exported entry  26. pkcs11h_certificate_signRecover

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_signRecover
pkcs11h_certificate_signRecover	proc near ; CODE XREF: pkcs11h_certificate_signAny+22Ep

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C73B1
		mov	[esp+38h+var_30], 55Dh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C73B2
; ---------------------------------------------------------------------------

loc_645C73B1:				; CODE XREF: pkcs11h_certificate_signRecover+15j
		nop

loc_645C73B2:				; CODE XREF: pkcs11h_certificate_signRecover+33j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C73DB
		mov	[esp+38h+var_30], 55Eh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C73DC
; ---------------------------------------------------------------------------

loc_645C73DB:				; CODE XREF: pkcs11h_certificate_signRecover+3Fj
		nop

loc_645C73DC:				; CODE XREF: pkcs11h_certificate_signRecover+5Dj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C7400
		mov	[esp+38h+var_30], 55Fh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7401
; ---------------------------------------------------------------------------

loc_645C7400:				; CODE XREF: pkcs11h_certificate_signRecover+64j
		nop

loc_645C7401:				; CODE XREF: pkcs11h_certificate_signRecover+82j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C7425
		mov	[esp+38h+var_30], 560h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aSourceNull_0 ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7426
; ---------------------------------------------------------------------------

loc_645C7425:				; CODE XREF: pkcs11h_certificate_signRecover+89j
		nop

loc_645C7426:				; CODE XREF: pkcs11h_certificate_signRecover+A7j
		cmp	[ebp+arg_14], 0
		jnz	short loc_645C744A
		mov	[esp+38h+var_30], 562h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aP_target_siz_0 ; "p_target_size!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C744B
; ---------------------------------------------------------------------------

loc_645C744A:				; CODE XREF: pkcs11h_certificate_signRecover+AEj
		nop

loc_645C744B:				; CODE XREF: pkcs11h_certificate_signRecover+CCj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C74A2
		cmp	[ebp+arg_10], 0
		jz	short loc_645C7462
		mov	eax, [ebp+arg_14]
		mov	eax, [eax]
		jmp	short loc_645C7467
; ---------------------------------------------------------------------------

loc_645C7462:				; CODE XREF: pkcs11h_certificate_signRecover+DDj
		mov	eax, 0

loc_645C7467:				; CODE XREF: pkcs11h_certificate_signRecover+E4j
		mov	[esp+38h+var_1C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_23 ; "PKCS#11: pkcs11h_certificate_signRecove"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C74A2:				; CODE XREF: pkcs11h_certificate_signRecover+D7j
		cmp	[ebp+arg_10], 0
		jnz	short loc_645C74B1
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0

loc_645C74B1:				; CODE XREF: pkcs11h_certificate_signRecover+12Aj
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], 1
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	sub_645C63EB
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C74F2
		jmp	short loc_645C74F9
; ---------------------------------------------------------------------------

loc_645C74F2:				; CODE XREF: pkcs11h_certificate_signRecover+172j
		mov	[ebp+var_C], 0

loc_645C74F9:				; CODE XREF: pkcs11h_certificate_signRecover+174j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C7536
		mov	eax, [ebp+arg_14]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_24 ; "PKCS#11: pkcs11h_certificate_signRecove"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C7536:				; CODE XREF: pkcs11h_certificate_signRecover+185j
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_signRecover	endp

; Exported entry   3. pkcs11h_certificate_decrypt

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_decrypt
pkcs11h_certificate_decrypt proc near	; CODE XREF: pkcs11h_certificate_decryptAny+1AAp

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C7574
		mov	[esp+38h+var_30], 59Bh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7575
; ---------------------------------------------------------------------------

loc_645C7574:				; CODE XREF: pkcs11h_certificate_decrypt+15j
		nop

loc_645C7575:				; CODE XREF: pkcs11h_certificate_decrypt+33j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C759E
		mov	[esp+38h+var_30], 59Ch ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C759F
; ---------------------------------------------------------------------------

loc_645C759E:				; CODE XREF: pkcs11h_certificate_decrypt+3Fj
		nop

loc_645C759F:				; CODE XREF: pkcs11h_certificate_decrypt+5Dj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C75C3
		mov	[esp+38h+var_30], 59Dh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C75C4
; ---------------------------------------------------------------------------

loc_645C75C3:				; CODE XREF: pkcs11h_certificate_decrypt+64j
		nop

loc_645C75C4:				; CODE XREF: pkcs11h_certificate_decrypt+82j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C75E8
		mov	[esp+38h+var_30], 59Eh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aSourceNull_0 ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C75E9
; ---------------------------------------------------------------------------

loc_645C75E8:				; CODE XREF: pkcs11h_certificate_decrypt+89j
		nop

loc_645C75E9:				; CODE XREF: pkcs11h_certificate_decrypt+A7j
		cmp	[ebp+arg_14], 0
		jnz	short loc_645C760D
		mov	[esp+38h+var_30], 5A0h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aP_target_siz_0 ; "p_target_size!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C760E
; ---------------------------------------------------------------------------

loc_645C760D:				; CODE XREF: pkcs11h_certificate_decrypt+AEj
		nop

loc_645C760E:				; CODE XREF: pkcs11h_certificate_decrypt+CCj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C7665
		cmp	[ebp+arg_10], 0
		jz	short loc_645C7625
		mov	eax, [ebp+arg_14]
		mov	eax, [eax]
		jmp	short loc_645C762A
; ---------------------------------------------------------------------------

loc_645C7625:				; CODE XREF: pkcs11h_certificate_decrypt+DDj
		mov	eax, 0

loc_645C762A:				; CODE XREF: pkcs11h_certificate_decrypt+E4j
		mov	[esp+38h+var_1C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_25 ; "PKCS#11: pkcs11h_certificate_decrypt en"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C7665:				; CODE XREF: pkcs11h_certificate_decrypt+D7j
		cmp	[ebp+arg_10], 0
		jnz	short loc_645C7674
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0

loc_645C7674:				; CODE XREF: pkcs11h_certificate_decrypt+12Aj
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], 2
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	sub_645C63EB
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C76B5
		jmp	short loc_645C76BC
; ---------------------------------------------------------------------------

loc_645C76B5:				; CODE XREF: pkcs11h_certificate_decrypt+172j
		mov	[ebp+var_C], 0

loc_645C76BC:				; CODE XREF: pkcs11h_certificate_decrypt+174j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C76F9
		mov	eax, [ebp+arg_14]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_26 ; "PKCS#11: pkcs11h_certificate_decrypt re"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C76F9:				; CODE XREF: pkcs11h_certificate_decrypt+185j
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_decrypt endp

; Exported entry  27. pkcs11h_certificate_unwrap

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_unwrap
pkcs11h_certificate_unwrap proc	near	; CODE XREF: pkcs11h_certificate_decryptAny+228p

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C7737
		mov	[esp+38h+var_30], 5D9h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7738
; ---------------------------------------------------------------------------

loc_645C7737:				; CODE XREF: pkcs11h_certificate_unwrap+15j
		nop

loc_645C7738:				; CODE XREF: pkcs11h_certificate_unwrap+33j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C7761
		mov	[esp+38h+var_30], 5DAh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C7762
; ---------------------------------------------------------------------------

loc_645C7761:				; CODE XREF: pkcs11h_certificate_unwrap+3Fj
		nop

loc_645C7762:				; CODE XREF: pkcs11h_certificate_unwrap+5Dj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C7786
		mov	[esp+38h+var_30], 5DBh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7787
; ---------------------------------------------------------------------------

loc_645C7786:				; CODE XREF: pkcs11h_certificate_unwrap+64j
		nop

loc_645C7787:				; CODE XREF: pkcs11h_certificate_unwrap+82j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C77AB
		mov	[esp+38h+var_30], 5DCh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aSourceNull_0 ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C77AC
; ---------------------------------------------------------------------------

loc_645C77AB:				; CODE XREF: pkcs11h_certificate_unwrap+89j
		nop

loc_645C77AC:				; CODE XREF: pkcs11h_certificate_unwrap+A7j
		cmp	[ebp+arg_14], 0
		jnz	short loc_645C77D0
		mov	[esp+38h+var_30], 5DEh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aP_target_siz_0 ; "p_target_size!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C77D1
; ---------------------------------------------------------------------------

loc_645C77D0:				; CODE XREF: pkcs11h_certificate_unwrap+AEj
		nop

loc_645C77D1:				; CODE XREF: pkcs11h_certificate_unwrap+CCj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C7828
		cmp	[ebp+arg_10], 0
		jz	short loc_645C77E8
		mov	eax, [ebp+arg_14]
		mov	eax, [eax]
		jmp	short loc_645C77ED
; ---------------------------------------------------------------------------

loc_645C77E8:				; CODE XREF: pkcs11h_certificate_unwrap+DDj
		mov	eax, 0

loc_645C77ED:				; CODE XREF: pkcs11h_certificate_unwrap+E4j
		mov	[esp+38h+var_1C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_27 ; "PKCS#11: pkcs11h_certificate_unwrap	ent"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C7828:				; CODE XREF: pkcs11h_certificate_unwrap+D7j
		cmp	[ebp+arg_10], 0
		jnz	short loc_645C7837
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0

loc_645C7837:				; CODE XREF: pkcs11h_certificate_unwrap+12Aj
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], 3
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	sub_645C63EB
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C7878
		jmp	short loc_645C787F
; ---------------------------------------------------------------------------

loc_645C7878:				; CODE XREF: pkcs11h_certificate_unwrap+172j
		mov	[ebp+var_C], 0

loc_645C787F:				; CODE XREF: pkcs11h_certificate_unwrap+174j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C78BC
		mov	eax, [ebp+arg_14]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_28 ; "PKCS#11: pkcs11h_certificate_unwrap	ret"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C78BC:				; CODE XREF: pkcs11h_certificate_unwrap+185j
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_unwrap endp

; Exported entry  25. pkcs11h_certificate_signAny

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_signAny
pkcs11h_certificate_signAny proc near	; CODE XREF: sub_645CDF10+15Ap
					; sub_645CE2B2+FEp ...

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		mov	[ebp+var_10], 0
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C7901
		mov	[esp+38h+var_30], 618h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7902
; ---------------------------------------------------------------------------

loc_645C7901:				; CODE XREF: pkcs11h_certificate_signAny+1Cj
		nop

loc_645C7902:				; CODE XREF: pkcs11h_certificate_signAny+3Aj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C792B
		mov	[esp+38h+var_30], 619h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C792C
; ---------------------------------------------------------------------------

loc_645C792B:				; CODE XREF: pkcs11h_certificate_signAny+46j
		nop

loc_645C792C:				; CODE XREF: pkcs11h_certificate_signAny+64j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C7950
		mov	[esp+38h+var_30], 61Ah ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7951
; ---------------------------------------------------------------------------

loc_645C7950:				; CODE XREF: pkcs11h_certificate_signAny+6Bj
		nop

loc_645C7951:				; CODE XREF: pkcs11h_certificate_signAny+89j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C7975
		mov	[esp+38h+var_30], 61Bh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aSourceNull_0 ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7976
; ---------------------------------------------------------------------------

loc_645C7975:				; CODE XREF: pkcs11h_certificate_signAny+90j
		nop

loc_645C7976:				; CODE XREF: pkcs11h_certificate_signAny+AEj
		cmp	[ebp+arg_14], 0
		jnz	short loc_645C799A
		mov	[esp+38h+var_30], 61Dh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aP_target_siz_0 ; "p_target_size!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C799B
; ---------------------------------------------------------------------------

loc_645C799A:				; CODE XREF: pkcs11h_certificate_signAny+B5j
		nop

loc_645C799B:				; CODE XREF: pkcs11h_certificate_signAny+D3j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C79F2
		cmp	[ebp+arg_10], 0
		jz	short loc_645C79B2
		mov	eax, [ebp+arg_14]
		mov	eax, [eax]
		jmp	short loc_645C79B7
; ---------------------------------------------------------------------------

loc_645C79B2:				; CODE XREF: pkcs11h_certificate_signAny+E4j
		mov	eax, 0

loc_645C79B7:				; CODE XREF: pkcs11h_certificate_signAny+EBj
		mov	[esp+38h+var_1C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_29 ; "PKCS#11: pkcs11h_certificate_signAny en"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C79F2:				; CODE XREF: pkcs11h_certificate_signAny+DEj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_645C7A33
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C7A1A
		mov	[esp+38h+var_34], offset aPkcs11GettingK ; "PKCS#11: Getting key attributes"
		mov	[esp+38h+var_38], 4
		call	sub_645CBF0E

loc_645C7A1A:				; CODE XREF: pkcs11h_certificate_signAny+13Fj
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	sub_645C5D22
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C7A33
		jmp	loc_645C7B4B
; ---------------------------------------------------------------------------

loc_645C7A33:				; CODE XREF: pkcs11h_certificate_signAny+135j
					; pkcs11h_certificate_signAny+167j
		cmp	[ebp+var_10], 0
		jnz	short loc_645C7AB7
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		and	eax, 1
		test	eax, eax
		jz	short loc_645C7AB7
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_30], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_certificate_sign
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		cmp	eax, 54h
		jz	short loc_645C7AA5
		cmp	eax, 54h
		ja	short loc_645C7A8D
		test	eax, eax
		jz	short loc_645C7A9C
		jmp	loc_645C7B4B
; ---------------------------------------------------------------------------

loc_645C7A8D:				; CODE XREF: pkcs11h_certificate_signAny+1BDj
		cmp	eax, 63h
		jz	short loc_645C7AA5
		cmp	eax, 68h
		jz	short loc_645C7AA5
		jmp	loc_645C7B4B
; ---------------------------------------------------------------------------

loc_645C7A9C:				; CODE XREF: pkcs11h_certificate_signAny+1C1j
		mov	[ebp+var_10], 1
		jmp	short loc_645C7AB7
; ---------------------------------------------------------------------------

loc_645C7AA5:				; CODE XREF: pkcs11h_certificate_signAny+1B8j
					; pkcs11h_certificate_signAny+1CBj ...
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		and	eax, 0FFFFFFFEh
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx
		nop

loc_645C7AB7:				; CODE XREF: pkcs11h_certificate_signAny+172j
					; pkcs11h_certificate_signAny+17Fj ...
		cmp	[ebp+var_10], 0
		jnz	short loc_645C7B35
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		and	eax, 2
		test	eax, eax
		jz	short loc_645C7B35
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_30], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_certificate_signRecover
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_C]
		cmp	eax, 54h
		jz	short loc_645C7B23
		cmp	eax, 54h
		ja	short loc_645C7B0E
		test	eax, eax
		jz	short loc_645C7B1A
		jmp	short loc_645C7B4B
; ---------------------------------------------------------------------------

loc_645C7B0E:				; CODE XREF: pkcs11h_certificate_signAny+241j
		cmp	eax, 63h
		jz	short loc_645C7B23
		cmp	eax, 68h
		jz	short loc_645C7B23
		jmp	short loc_645C7B4B
; ---------------------------------------------------------------------------

loc_645C7B1A:				; CODE XREF: pkcs11h_certificate_signAny+245j
		mov	[ebp+var_10], 1
		jmp	short loc_645C7B35
; ---------------------------------------------------------------------------

loc_645C7B23:				; CODE XREF: pkcs11h_certificate_signAny+23Cj
					; pkcs11h_certificate_signAny+24Cj ...
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		and	eax, 0FFFFFFFDh
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx
		nop

loc_645C7B35:				; CODE XREF: pkcs11h_certificate_signAny+1F6j
					; pkcs11h_certificate_signAny+203j ...
		cmp	[ebp+var_10], 0
		jnz	short loc_645C7B44
		mov	[ebp+var_C], 6
		jmp	short loc_645C7B4B
; ---------------------------------------------------------------------------

loc_645C7B44:				; CODE XREF: pkcs11h_certificate_signAny+274j
		mov	[ebp+var_C], 0

loc_645C7B4B:				; CODE XREF: pkcs11h_certificate_signAny+169j
					; pkcs11h_certificate_signAny+1C3j ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C7B88
		mov	eax, [ebp+arg_14]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_30 ; "PKCS#11: pkcs11h_certificate_signAny re"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C7B88:				; CODE XREF: pkcs11h_certificate_signAny+28Ej
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_signAny endp

; Exported entry   4. pkcs11h_certificate_decryptAny

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_decryptAny
pkcs11h_certificate_decryptAny proc near ; CODE	XREF: sub_645CDCD1+194p

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 6
		mov	[ebp+var_10], 0
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C7BCD
		mov	[esp+38h+var_30], 68Bh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7BCE
; ---------------------------------------------------------------------------

loc_645C7BCD:				; CODE XREF: pkcs11h_certificate_decryptAny+1Cj
		nop

loc_645C7BCE:				; CODE XREF: pkcs11h_certificate_decryptAny+3Aj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C7BF7
		mov	[esp+38h+var_30], 68Ch ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C7BF8
; ---------------------------------------------------------------------------

loc_645C7BF7:				; CODE XREF: pkcs11h_certificate_decryptAny+46j
		nop

loc_645C7BF8:				; CODE XREF: pkcs11h_certificate_decryptAny+64j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C7C1C
		mov	[esp+38h+var_30], 68Dh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7C1D
; ---------------------------------------------------------------------------

loc_645C7C1C:				; CODE XREF: pkcs11h_certificate_decryptAny+6Bj
		nop

loc_645C7C1D:				; CODE XREF: pkcs11h_certificate_decryptAny+89j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C7C41
		mov	[esp+38h+var_30], 68Eh ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aSourceNull_0 ; "source!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7C42
; ---------------------------------------------------------------------------

loc_645C7C41:				; CODE XREF: pkcs11h_certificate_decryptAny+90j
		nop

loc_645C7C42:				; CODE XREF: pkcs11h_certificate_decryptAny+AEj
		cmp	[ebp+arg_14], 0
		jnz	short loc_645C7C66
		mov	[esp+38h+var_30], 690h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aP_target_siz_0 ; "p_target_size!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7C67
; ---------------------------------------------------------------------------

loc_645C7C66:				; CODE XREF: pkcs11h_certificate_decryptAny+B5j
		nop

loc_645C7C67:				; CODE XREF: pkcs11h_certificate_decryptAny+D3j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C7CBE
		cmp	[ebp+arg_10], 0
		jz	short loc_645C7C7E
		mov	eax, [ebp+arg_14]
		mov	eax, [eax]
		jmp	short loc_645C7C83
; ---------------------------------------------------------------------------

loc_645C7C7E:				; CODE XREF: pkcs11h_certificate_decryptAny+E4j
		mov	eax, 0

loc_645C7C83:				; CODE XREF: pkcs11h_certificate_decryptAny+EBj
		mov	[esp+38h+var_1C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_31 ; "PKCS#11: pkcs11h_certificate_decryptAny"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C7CBE:				; CODE XREF: pkcs11h_certificate_decryptAny+DEj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_645C7CFF
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C7CE6
		mov	[esp+38h+var_34], offset aPkcs11GettingK ; "PKCS#11: Getting key attributes"
		mov	[esp+38h+var_38], 4
		call	sub_645CBF0E

loc_645C7CE6:				; CODE XREF: pkcs11h_certificate_decryptAny+13Fj
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	sub_645C5D22
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C7CFF
		jmp	loc_645C7E0B
; ---------------------------------------------------------------------------

loc_645C7CFF:				; CODE XREF: pkcs11h_certificate_decryptAny+135j
					; pkcs11h_certificate_decryptAny+167j
		cmp	[ebp+var_10], 0
		jnz	short loc_645C7D7D
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		and	eax, 4
		test	eax, eax
		jz	short loc_645C7D7D
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_30], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_certificate_decrypt
		cmp	eax, 54h
		jz	short loc_645C7D6B
		cmp	eax, 54h
		ja	short loc_645C7D53
		test	eax, eax
		jz	short loc_645C7D62
		jmp	loc_645C7E0B
; ---------------------------------------------------------------------------

loc_645C7D53:				; CODE XREF: pkcs11h_certificate_decryptAny+1B7j
		cmp	eax, 63h
		jz	short loc_645C7D6B
		cmp	eax, 68h
		jz	short loc_645C7D6B
		jmp	loc_645C7E0B
; ---------------------------------------------------------------------------

loc_645C7D62:				; CODE XREF: pkcs11h_certificate_decryptAny+1BBj
		mov	[ebp+var_10], 1
		jmp	short loc_645C7D7D
; ---------------------------------------------------------------------------

loc_645C7D6B:				; CODE XREF: pkcs11h_certificate_decryptAny+1B2j
					; pkcs11h_certificate_decryptAny+1C5j ...
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		and	eax, 0FFFFFFFBh
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx
		nop

loc_645C7D7D:				; CODE XREF: pkcs11h_certificate_decryptAny+172j
					; pkcs11h_certificate_decryptAny+17Fj ...
		cmp	[ebp+var_10], 0
		jnz	short loc_645C7DF5
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		and	eax, 8
		test	eax, eax
		jz	short loc_645C7DF5
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_30], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_certificate_unwrap
		cmp	eax, 54h
		jz	short loc_645C7DE3
		cmp	eax, 54h
		ja	short loc_645C7DCE
		test	eax, eax
		jz	short loc_645C7DDA
		jmp	short loc_645C7E0B
; ---------------------------------------------------------------------------

loc_645C7DCE:				; CODE XREF: pkcs11h_certificate_decryptAny+235j
		cmp	eax, 63h
		jz	short loc_645C7DE3
		cmp	eax, 68h
		jz	short loc_645C7DE3
		jmp	short loc_645C7E0B
; ---------------------------------------------------------------------------

loc_645C7DDA:				; CODE XREF: pkcs11h_certificate_decryptAny+239j
		mov	[ebp+var_10], 1
		jmp	short loc_645C7DF5
; ---------------------------------------------------------------------------

loc_645C7DE3:				; CODE XREF: pkcs11h_certificate_decryptAny+230j
					; pkcs11h_certificate_decryptAny+240j ...
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		and	eax, 0FFFFFFF7h
		mov	edx, eax
		mov	eax, [ebp+arg_0]
		mov	[eax+8], edx
		nop

loc_645C7DF5:				; CODE XREF: pkcs11h_certificate_decryptAny+1F0j
					; pkcs11h_certificate_decryptAny+1FDj ...
		cmp	[ebp+var_10], 0
		jnz	short loc_645C7E04
		mov	[ebp+var_C], 6
		jmp	short loc_645C7E0B
; ---------------------------------------------------------------------------

loc_645C7E04:				; CODE XREF: pkcs11h_certificate_decryptAny+268j
		mov	[ebp+var_C], 0

loc_645C7E0B:				; CODE XREF: pkcs11h_certificate_decryptAny+169j
					; pkcs11h_certificate_decryptAny+1BDj ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C7E48
		mov	eax, [ebp+arg_14]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_32 ; "PKCS#11: pkcs11h_certificate_decryptAny"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C7E48:				; CODE XREF: pkcs11h_certificate_decryptAny+282j
		mov	eax, [ebp+var_C]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_decryptAny endp

; Exported entry   2. pkcs11h_certificate_create

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_certificate_create(void *, int, int, int,	int)
		public pkcs11h_certificate_create
pkcs11h_certificate_create proc	near

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_18], 0
		mov	[ebp+var_14], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C7E9B
		mov	[esp+38h+var_30], 700h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7E9C
; ---------------------------------------------------------------------------

loc_645C7E9B:				; CODE XREF: pkcs11h_certificate_create+2Aj
		nop

loc_645C7E9C:				; CODE XREF: pkcs11h_certificate_create+48j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C7EC5
		mov	[esp+38h+var_30], 701h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C7EC6
; ---------------------------------------------------------------------------

loc_645C7EC5:				; CODE XREF: pkcs11h_certificate_create+54j
		nop

loc_645C7EC6:				; CODE XREF: pkcs11h_certificate_create+72j
		cmp	[ebp+arg_10], 0
		jnz	short loc_645C7EEA
		mov	[esp+38h+var_30], 703h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aP_certificateN ; "p_certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C7EEB
; ---------------------------------------------------------------------------

loc_645C7EEA:				; CODE XREF: pkcs11h_certificate_create+79j
		nop

loc_645C7EEB:				; CODE XREF: pkcs11h_certificate_create+97j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C7F2C
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_33 ; "PKCS#11: pkcs11h_certificate_create	ent"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C7F2C:				; CODE XREF: pkcs11h_certificate_create+A2j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0
		mov	[esp+38h+var_34], 24h ;	size_t
		lea	eax, [ebp+var_18]
		mov	[esp+38h+var_38], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C7F56
		jmp	loc_645C8092
; ---------------------------------------------------------------------------

loc_645C7F56:				; CODE XREF: pkcs11h_certificate_create+FEj
		mov	eax, [ebp+var_18]
		mov	edx, [ebp+arg_4]
		mov	[eax+20h], edx
		mov	eax, [ebp+var_18]
		mov	edx, [ebp+arg_8]
		mov	[eax+1Ch], edx
		mov	eax, [ebp+var_18]
		mov	dword ptr [eax+10h], 0FFFFFFFFh
		mov	eax, [ebp+var_18]
		mov	edx, [ebp+arg_C]
		mov	[eax+4], edx
		mov	eax, [ebp+var_18]
		add	eax, 18h
		mov	[esp+38h+var_38], eax
		call	sub_645C2463
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C7F97
		jmp	loc_645C8092
; ---------------------------------------------------------------------------

loc_645C7F97:				; CODE XREF: pkcs11h_certificate_create+13Fj
		mov	[ebp+var_C], 1
		mov	eax, [ebp+var_18]
		mov	edx, [ebp+arg_0]
		mov	[esp+38h+var_34], edx ;	void *
		mov	[esp+38h+var_38], eax ;	int
		call	pkcs11h_certificate_duplicateCertificateId
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C7FBE
		jmp	loc_645C8092
; ---------------------------------------------------------------------------

loc_645C7FBE:				; CODE XREF: pkcs11h_certificate_create+166j
		mov	eax, [ebp+var_18]
		lea	edx, [eax+0Ch]
		mov	eax, [ebp+var_18]
		mov	eax, [eax]
		mov	eax, [eax]
		mov	[esp+38h+var_34], edx ;	int
		mov	[esp+38h+var_38], eax ;	void *
		call	sub_645C35B0
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C7FE5
		jmp	loc_645C8092
; ---------------------------------------------------------------------------

loc_645C7FE5:				; CODE XREF: pkcs11h_certificate_create+18Dj
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C24B4
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C8004
		jmp	loc_645C8092
; ---------------------------------------------------------------------------

loc_645C8004:				; CODE XREF: pkcs11h_certificate_create+1ACj
		mov	[ebp+var_10], 1
		mov	eax, [ebp+var_18]
		mov	eax, [eax+4]
		cmp	eax, 0FFFFFFFFh
		jz	short loc_645C807C
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+1Ch]
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_645C8035
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		mov	edx, [ebp+var_18]
		mov	edx, [edx+4]
		mov	[eax+1Ch], edx
		jmp	short loc_645C807C
; ---------------------------------------------------------------------------

loc_645C8035:				; CODE XREF: pkcs11h_certificate_create+1D1j
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		mov	edx, [eax+1Ch]
		mov	eax, [ebp+var_18]
		mov	eax, [eax+4]
		cmp	edx, eax
		jle	short loc_645C807C
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		mov	edx, [ebp+var_18]
		mov	edx, [edx+0Ch]
		mov	ecx, [edx+20h]
		mov	edx, [ebp+var_18]
		mov	edx, [edx+0Ch]
		mov	edx, [edx+1Ch]
		sub	ecx, edx
		mov	edx, [ebp+var_18]
		mov	edx, [edx+4]
		add	edx, ecx
		mov	[eax+20h], edx
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		mov	edx, [ebp+var_18]
		mov	edx, [edx+4]
		mov	[eax+1Ch], edx

loc_645C807C:				; CODE XREF: pkcs11h_certificate_create+1C3j
					; pkcs11h_certificate_create+1E2j ...
		mov	edx, [ebp+var_18]
		mov	eax, [ebp+arg_10]
		mov	[eax], edx
		mov	[ebp+var_18], 0
		mov	[ebp+var_14], 0

loc_645C8092:				; CODE XREF: pkcs11h_certificate_create+100j
					; pkcs11h_certificate_create+141j ...
		cmp	[ebp+var_10], 0
		jz	short loc_645C80CC
		mov	eax, [ebp+var_18]
		test	eax, eax
		jz	short loc_645C80B2
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C24F5
		jmp	short loc_645C80C5
; ---------------------------------------------------------------------------

loc_645C80B2:				; CODE XREF: pkcs11h_certificate_create+24Cj
		mov	eax, [ebp+arg_10]
		mov	eax, [eax]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C24F5

loc_645C80C5:				; CODE XREF: pkcs11h_certificate_create+25Fj
		mov	[ebp+var_10], 0

loc_645C80CC:				; CODE XREF: pkcs11h_certificate_create+245j
		mov	eax, [ebp+var_18]
		test	eax, eax
		jz	short loc_645C8133
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_645C80F5
		mov	eax, [ebp+var_18]
		mov	eax, [eax+0Ch]
		mov	[esp+38h+var_38], eax
		call	sub_645C3851
		mov	eax, [ebp+var_18]
		mov	dword ptr [eax+0Ch], 0

loc_645C80F5:				; CODE XREF: pkcs11h_certificate_create+28Aj
		mov	eax, [ebp+var_18]
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_645C8114
		mov	eax, [ebp+var_18]
		mov	eax, [eax]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_certificate_freeCertificateId
		mov	eax, [ebp+var_18]
		mov	dword ptr [eax], 0

loc_645C8114:				; CODE XREF: pkcs11h_certificate_create+2ABj
		cmp	[ebp+var_C], 0
		jz	short loc_645C8128
		mov	eax, [ebp+var_18]
		add	eax, 18h
		mov	[esp+38h+var_38], eax
		call	sub_645C252D

loc_645C8128:				; CODE XREF: pkcs11h_certificate_create+2C7j
		lea	eax, [ebp+var_18]
		mov	[esp+38h+var_38], eax
		call	sub_645C156B

loc_645C8133:				; CODE XREF: pkcs11h_certificate_create+280j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C8170
		mov	eax, [ebp+arg_10]
		mov	ebx, [eax]
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_34 ; "PKCS#11: pkcs11h_certificate_create	ret"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C8170:				; CODE XREF: pkcs11h_certificate_create+2EAj
		mov	eax, [ebp+var_14]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_create endp

; Exported entry  16. pkcs11h_certificate_getPromptMask

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_getPromptMask
pkcs11h_certificate_getPromptMask proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C81A3
		mov	[esp+18h+var_10], 777h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+18h+var_18], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C81A4
; ---------------------------------------------------------------------------

loc_645C81A3:				; CODE XREF: pkcs11h_certificate_getPromptMask+Aj
		nop

loc_645C81A4:				; CODE XREF: pkcs11h_certificate_getPromptMask+28j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+1Ch]
		leave
		retn
pkcs11h_certificate_getPromptMask endp

; Exported entry  22. pkcs11h_certificate_setPromptMask

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_setPromptMask
pkcs11h_certificate_setPromptMask proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C81D6
		mov	[esp+18h+var_10], 781h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+18h+var_18], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C81D7
; ---------------------------------------------------------------------------

loc_645C81D6:				; CODE XREF: pkcs11h_certificate_setPromptMask+Aj
		nop

loc_645C81D7:				; CODE XREF: pkcs11h_certificate_setPromptMask+28j
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[eax+1Ch], edx
		leave
		retn
pkcs11h_certificate_setPromptMask endp

; Exported entry  17. pkcs11h_certificate_getUserData

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_getUserData
pkcs11h_certificate_getUserData	proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C820C
		mov	[esp+18h+var_10], 78Ah ; int
		mov	[esp+18h+var_14], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+18h+var_18], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C820D
; ---------------------------------------------------------------------------

loc_645C820C:				; CODE XREF: pkcs11h_certificate_getUserData+Aj
		nop

loc_645C820D:				; CODE XREF: pkcs11h_certificate_getUserData+28j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+20h]
		leave
		retn
pkcs11h_certificate_getUserData	endp

; Exported entry  23. pkcs11h_certificate_setUserData

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_setUserData
pkcs11h_certificate_setUserData	proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C823F
		mov	[esp+18h+var_10], 794h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+18h+var_18], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C8240
; ---------------------------------------------------------------------------

loc_645C823F:				; CODE XREF: pkcs11h_certificate_setUserData+Aj
		nop

loc_645C8240:				; CODE XREF: pkcs11h_certificate_setUserData+28j
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[eax+20h], edx
		leave
		retn
pkcs11h_certificate_setUserData	endp

; Exported entry  15. pkcs11h_certificate_getCertificateId

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_getCertificateId
pkcs11h_certificate_getCertificateId proc near

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C827F
		mov	[esp+28h+var_20], 7A0h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C8280
; ---------------------------------------------------------------------------

loc_645C827F:				; CODE XREF: pkcs11h_certificate_getCertificateId+14j
		nop

loc_645C8280:				; CODE XREF: pkcs11h_certificate_getCertificateId+32j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C82A9
		mov	[esp+28h+var_20], 7A1h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C82AA
; ---------------------------------------------------------------------------

loc_645C82A9:				; CODE XREF: pkcs11h_certificate_getCertificateId+3Ej
		nop

loc_645C82AA:				; CODE XREF: pkcs11h_certificate_getCertificateId+5Cj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C82CE
		mov	[esp+28h+var_20], 7A2h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C82CF
; ---------------------------------------------------------------------------

loc_645C82CE:				; CODE XREF: pkcs11h_certificate_getCertificateId+63j
		nop

loc_645C82CF:				; CODE XREF: pkcs11h_certificate_getCertificateId+81j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645C82F3
		mov	[esp+28h+var_20], 7A3h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset aP_certificate_ ; "p_certificate_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C82F4
; ---------------------------------------------------------------------------

loc_645C82F3:				; CODE XREF: pkcs11h_certificate_getCertificateId+88j
		nop

loc_645C82F4:				; CODE XREF: pkcs11h_certificate_getCertificateId+A6j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C8320
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_35 ; "PKCS#11: pkcs11h_certificate_getCertifi"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C8320:				; CODE XREF: pkcs11h_certificate_getCertificateId+B1j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	[esp+28h+var_24], eax ;	void *
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_28], eax ;	int
		call	pkcs11h_certificate_duplicateCertificateId
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C833F
		jmp	short loc_645C8346
; ---------------------------------------------------------------------------

loc_645C833F:				; CODE XREF: pkcs11h_certificate_getCertificateId+F0j
		mov	[ebp+var_C], 0

loc_645C8346:				; CODE XREF: pkcs11h_certificate_getCertificateId+F2j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C837A
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_36 ; "PKCS#11: pkcs11h_certificate_getCertifi"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C837A:				; CODE XREF: pkcs11h_certificate_getCertificateId+103j
		mov	eax, [ebp+var_C]
		leave
		retn
pkcs11h_certificate_getCertificateId endp

; Exported entry  14. pkcs11h_certificate_getCertificateBlob

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_certificate_getCertificateBlob(int, void *, int)
		public pkcs11h_certificate_getCertificateBlob
pkcs11h_certificate_getCertificateBlob proc near ; CODE	XREF: pkcs11h_openssl_getX509+C2p
					; pkcs11h_openssl_getX509+106p

Dst		= dword	ptr -48h
Src		= dword	ptr -44h
Size		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 6
		mov	[ebp+var_14], 0
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C83C1
		mov	[esp+48h+Size],	7CFh ; int
		mov	[esp+48h+Src], offset aPkcs11hCertifi ;	"pkcs11h-certificate.c"
		mov	[esp+48h+Dst], offset a_g_pkcs11h_d_1 ;	"_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C83C2
; ---------------------------------------------------------------------------

loc_645C83C1:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+22j
		nop

loc_645C83C2:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+40j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C83EB
		mov	[esp+48h+Size],	7D0h ; int
		mov	[esp+48h+Src], offset aPkcs11hCertifi ;	"pkcs11h-certificate.c"
		mov	[esp+48h+Dst], offset a_g_pkcs11h_d_2 ;	"_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C83EC
; ---------------------------------------------------------------------------

loc_645C83EB:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+4Cj
		nop

loc_645C83EC:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+6Aj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C8410
		mov	[esp+48h+Size],	7D1h ; int
		mov	[esp+48h+Src], offset aPkcs11hCertifi ;	"pkcs11h-certificate.c"
		mov	[esp+48h+Dst], offset aCertificateNul ;	"certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C8411
; ---------------------------------------------------------------------------

loc_645C8410:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+71j
		nop

loc_645C8411:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+8Fj
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C8435
		mov	[esp+48h+Size],	7D3h ; int
		mov	[esp+48h+Src], offset aPkcs11hCertifi ;	"pkcs11h-certificate.c"
		mov	[esp+48h+Dst], offset aP_certificat_0 ;	"p_certificate_blob_size!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C8436
; ---------------------------------------------------------------------------

loc_645C8435:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+96j
		nop

loc_645C8436:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+B4j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C8478
		cmp	[ebp+arg_4], 0
		jz	short loc_645C844D
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		jmp	short loc_645C8452
; ---------------------------------------------------------------------------

loc_645C844D:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+C5j
		mov	eax, 0

loc_645C8452:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+CCj
		mov	[esp+48h+var_38], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+Size],	eax
		mov	[esp+48h+Src], offset aPkcs11Pkcs1_37 ;	"PKCS#11: pkcs11h_certificate_getCertifi"...
		mov	[esp+48h+Dst], 5
		call	sub_645CBF0E

loc_645C8478:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+BFj
		cmp	[ebp+arg_4], 0
		jz	short loc_645C8486
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[ebp+var_14], eax

loc_645C8486:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+FDj
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+48h+Dst], eax
		call	sub_645C24B4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C84AB
		jmp	loc_645C85A5
; ---------------------------------------------------------------------------

loc_645C84AB:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+125j
		mov	[ebp+var_C], 1
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+40Ch]
		test	eax, eax
		jnz	short loc_645C8534
		mov	[ebp+var_18], 0
		mov	[ebp+var_1C], 0
		jmp	short loc_645C852E
; ---------------------------------------------------------------------------

loc_645C84D1:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+1B3j
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+Dst], eax
		call	sub_645C5835
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C84E7
		jmp	short loc_645C84F5
; ---------------------------------------------------------------------------

loc_645C84E7:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+164j
		mov	[ebp+var_18], 1
		mov	[ebp+var_10], 0

loc_645C84F5:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+166j
		cmp	[ebp+var_18], 0
		jnz	short loc_645C852E
		cmp	[ebp+var_1C], 0
		jnz	short loc_645C8526
		mov	[ebp+var_1C], 1
		mov	[esp+48h+Size],	0
		mov	[esp+48h+Src], 1
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+Dst], eax
		call	sub_645C6148
		mov	[ebp+var_10], eax

loc_645C8526:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+180j
		cmp	[ebp+var_10], 0
		jz	short loc_645C852E
		jmp	short loc_645C85A5
; ---------------------------------------------------------------------------

loc_645C852E:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+150j
					; pkcs11h_certificate_getCertificateBlob+17Aj ...
		cmp	[ebp+var_18], 0
		jz	short loc_645C84D1

loc_645C8534:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+140j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+40Ch]
		test	eax, eax
		jnz	short loc_645C854C
		mov	[ebp+var_10], 200h
		jmp	short loc_645C85A5
; ---------------------------------------------------------------------------

loc_645C854C:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+1C2j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [eax+410h]
		mov	eax, [ebp+arg_8]
		mov	[eax], edx
		cmp	[ebp+arg_4], 0
		jz	short loc_645C859E
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+410h]
		cmp	eax, [ebp+var_14]
		jbe	short loc_645C857B
		mov	[ebp+var_10], 150h
		jmp	short loc_645C85A5
; ---------------------------------------------------------------------------

loc_645C857B:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+1F1j
		mov	eax, [ebp+arg_8]
		mov	edx, [eax]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	eax, [eax+40Ch]
		mov	[esp+48h+Size],	edx ; Size
		mov	[esp+48h+Src], eax ; Src
		mov	eax, [ebp+arg_4]
		mov	[esp+48h+Dst], eax ; Dst
		call	_memmove

loc_645C859E:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+1E1j
		mov	[ebp+var_10], 0

loc_645C85A5:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+127j
					; pkcs11h_certificate_getCertificateBlob+1ADj ...
		cmp	[ebp+var_C], 0
		jz	short loc_645C85C0
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+48h+Dst], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C85C0:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+22Aj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C85F4
		mov	eax, [ebp+var_10]
		mov	[esp+48h+Dst], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+48h+Size],	eax
		mov	[esp+48h+Src], offset aPkcs11Pkcs1_38 ;	"PKCS#11: pkcs11h_certificate_getCertifi"...
		mov	[esp+48h+Dst], 5
		call	sub_645CBF0E

loc_645C85F4:				; CODE XREF: pkcs11h_certificate_getCertificateBlob+249j
		mov	eax, [ebp+var_10]
		leave
		retn
pkcs11h_certificate_getCertificateBlob endp

; Exported entry   7. pkcs11h_certificate_ensureCertificateAccess

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_ensureCertificateAccess
pkcs11h_certificate_ensureCertificateAccess proc near

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C8643
		mov	[esp+48h+var_40], 83Bh ; int
		mov	[esp+48h+var_44], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+48h+var_48], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C8644
; ---------------------------------------------------------------------------

loc_645C8643:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+2Aj
		nop

loc_645C8644:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+48j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C866D
		mov	[esp+48h+var_40], 83Ch ; int
		mov	[esp+48h+var_44], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+48h+var_48], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C866E
; ---------------------------------------------------------------------------

loc_645C866D:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+54j
		nop

loc_645C866E:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+72j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C8692
		mov	[esp+48h+var_40], 83Dh ; int
		mov	[esp+48h+var_44], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+48h+var_48], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C8693
; ---------------------------------------------------------------------------

loc_645C8692:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+79j
		nop

loc_645C8693:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+97j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C86B8
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11Pkcs1_39 ; "PKCS#11: pkcs11h_certificate_ensureCert"...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645C86B8:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+A2j
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+48h+var_48], eax
		call	sub_645C24B4
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C86D4
		jmp	loc_645C87F4
; ---------------------------------------------------------------------------

loc_645C86D4:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+D4j
		mov	[ebp+var_C], 1
		cmp	[ebp+var_14], 0
		jnz	loc_645C87B4
		mov	[ebp+var_1C], 0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+48h+var_48], eax
		call	sub_645C24B4
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C8708
		jmp	short loc_645C875C
; ---------------------------------------------------------------------------

loc_645C8708:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+10Bj
		mov	[ebp+var_10], 1
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax+408h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [eax+404h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		lea	ebx, [ebp+var_1C]
		mov	[esp+48h+var_38], ebx
		mov	[esp+48h+var_3C], ecx
		mov	[esp+48h+var_40], edx
		mov	[esp+48h+var_44], 1
		mov	[esp+48h+var_48], eax
		call	sub_645C3E1B
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C8755
		jmp	short loc_645C875C
; ---------------------------------------------------------------------------

loc_645C8755:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+158j
		mov	[ebp+var_14], 1

loc_645C875C:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+10Dj
					; pkcs11h_certificate_ensureCertificateAccess+15Aj
		cmp	[ebp+var_10], 0
		jz	short loc_645C877A
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+48h+var_48], eax
		call	sub_645C24F5
		mov	[ebp+var_10], 0

loc_645C877A:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+167j
		cmp	[ebp+var_14], 0
		jnz	short loc_645C87B4
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C87B4
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11CannotAc ; "PKCS#11: Cannot access existing object "...
		mov	[esp+48h+var_48], 4
		call	sub_645CBF0E

loc_645C87B4:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+E6j
					; pkcs11h_certificate_ensureCertificateAccess+185j ...
		cmp	[ebp+var_14], 0
		jnz	short loc_645C87E7
		mov	[esp+48h+var_40], 0
		mov	[esp+48h+var_44], 1
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_48], eax
		call	sub_645C6148
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C87E0
		jmp	short loc_645C87F4
; ---------------------------------------------------------------------------

loc_645C87E0:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+1E3j
		mov	[ebp+var_14], 1

loc_645C87E7:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+1BFj
		cmp	[ebp+var_14], 0
		jz	short loc_645C87F4
		mov	[ebp+var_18], 0

loc_645C87F4:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+D6j
					; pkcs11h_certificate_ensureCertificateAccess+1E5j ...
		cmp	[ebp+var_C], 0
		jz	short loc_645C880F
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+48h+var_48], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C880F:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+1FFj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C8843
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11Pkcs1_40 ; "PKCS#11: pkcs11h_certificate_ensureCert"...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645C8843:				; CODE XREF: pkcs11h_certificate_ensureCertificateAccess+21Ej
		mov	eax, [ebp+var_18]
		add	esp, 44h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_ensureCertificateAccess endp

; Exported entry   8. pkcs11h_certificate_ensureKeyAccess

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_ensureKeyAccess
pkcs11h_certificate_ensureKeyAccess proc near

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 6
		mov	[ebp+var_18], 0
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C8896
		mov	[esp+38h+var_30], 8A7h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C8897
; ---------------------------------------------------------------------------

loc_645C8896:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+2Aj
		nop

loc_645C8897:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+48j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C88C0
		mov	[esp+38h+var_30], 8A8h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C88C1
; ---------------------------------------------------------------------------

loc_645C88C0:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+54j
		nop

loc_645C88C1:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+72j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C88E5
		mov	[esp+38h+var_30], 8A9h ; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aCertificateNul ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C88E6
; ---------------------------------------------------------------------------

loc_645C88E5:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+79j
		nop

loc_645C88E6:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+97j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C890B
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_41 ; "PKCS#11: pkcs11h_certificate_ensureKeyA"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C890B:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+A2j
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+38h+var_38], eax
		call	sub_645C24B4
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C8927
		jmp	loc_645C8A4D
; ---------------------------------------------------------------------------

loc_645C8927:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+D4j
		mov	[ebp+var_C], 1
		cmp	[ebp+var_18], 0
		jnz	loc_645C8A0D
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C24B4
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C8954
		jmp	short loc_645C89AB
; ---------------------------------------------------------------------------

loc_645C8954:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+104j
		mov	[ebp+var_10], 1
		mov	eax, [ebp+arg_0]
		lea	ebx, [eax+10h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	ecx, [eax+408h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		mov	edx, [eax+404h]
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], ecx
		mov	[esp+38h+var_30], edx
		mov	[esp+38h+var_34], 3
		mov	[esp+38h+var_38], eax
		call	sub_645C3E1B
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C89A4
		jmp	short loc_645C89AB
; ---------------------------------------------------------------------------

loc_645C89A4:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+154j
		mov	[ebp+var_18], 1

loc_645C89AB:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+106j
					; pkcs11h_certificate_ensureKeyAccess+156j
		cmp	[ebp+var_10], 0
		jz	short loc_645C89C9
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		add	eax, 2Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C24F5
		mov	[ebp+var_10], 0

loc_645C89C9:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+163j
		cmp	[ebp+var_18], 0
		jnz	short loc_645C8A0D
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C8A03
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11CannotAc ; "PKCS#11: Cannot access existing object "...
		mov	[esp+38h+var_38], 4
		call	sub_645CBF0E

loc_645C8A03:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+18Bj
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0FFFFFFFFh

loc_645C8A0D:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+E6j
					; pkcs11h_certificate_ensureKeyAccess+181j
		cmp	[ebp+var_18], 0
		jnz	short loc_645C8A40
		mov	[esp+38h+var_30], 0
		mov	[esp+38h+var_34], 0
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	sub_645C6148
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645C8A39
		jmp	short loc_645C8A4D
; ---------------------------------------------------------------------------

loc_645C8A39:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+1E9j
		mov	[ebp+var_18], 1

loc_645C8A40:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+1C5j
		cmp	[ebp+var_18], 0
		jz	short loc_645C8A4D
		mov	[ebp+var_14], 0

loc_645C8A4D:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+D6j
					; pkcs11h_certificate_ensureKeyAccess+1EBj ...
		cmp	[ebp+var_C], 0
		jz	short loc_645C8A68
		mov	eax, [ebp+arg_0]
		add	eax, 18h
		mov	[esp+38h+var_38], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C8A68:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+205j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C8A9C
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_42 ; "PKCS#11: pkcs11h_certificate_ensureKeyA"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C8A9C:				; CODE XREF: pkcs11h_certificate_ensureKeyAccess+224j
		mov	eax, [ebp+var_14]
		add	esp, 34h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_ensureKeyAccess endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C8AA5	proc near		; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+195p
					; pkcs11h_certificate_enumCertificateIds+24Fp

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 74h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C8AEC
		mov	[esp+78h+var_70], 915h ; int
		mov	[esp+78h+var_74], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+78h+var_78], offset aSessionNull_0	; "session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C8AED
; ---------------------------------------------------------------------------

loc_645C8AEC:				; CODE XREF: sub_645C8AA5+27j
		nop

loc_645C8AED:				; CODE XREF: sub_645C8AA5+45j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C8B20
		mov	eax, [ebp+arg_8]
		mov	[esp+78h+var_68], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+78h+var_6C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aPkcs11_pkcs_38 ; "PKCS#11: _pkcs11h_certificate_enumSessi"...
		mov	[esp+78h+var_78], 5
		call	sub_645CBF0E

loc_645C8B20:				; CODE XREF: sub_645C8AA5+50j
		mov	eax, [ebp+arg_0]
		add	eax, 2Ch
		mov	[esp+78h+var_78], eax
		call	sub_645C24B4
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C8B3C
		jmp	loc_645C8E9C
; ---------------------------------------------------------------------------

loc_645C8B3C:				; CODE XREF: sub_645C8AA5+90j
		mov	[ebp+var_C], 1
		jmp	loc_645C8E92
; ---------------------------------------------------------------------------

loc_645C8B48:				; CODE XREF: sub_645C8AA5+3F1j
		mov	[ebp+var_20], 1
		mov	[ebp+var_2C], 0
		lea	eax, [ebp+var_20]
		mov	[ebp+var_28], eax
		mov	[ebp+var_24], 4
		mov	[ebp+var_30], 0
		mov	[ebp+var_34], 0
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	sub_645C3FB4
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C8B8A
		jmp	loc_645C8E04
; ---------------------------------------------------------------------------

loc_645C8B8A:				; CODE XREF: sub_645C8AA5+DEj
		lea	eax, [ebp+var_34]
		mov	[esp+78h+var_68], eax
		lea	eax, [ebp+var_30]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], 1
		lea	eax, [ebp+var_2C]
		mov	[esp+78h+var_74], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	sub_645C324E
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645C8BC0
		jmp	loc_645C8E04
; ---------------------------------------------------------------------------

loc_645C8BC0:				; CODE XREF: sub_645C8AA5+114j
		mov	[ebp+var_1C], 0
		jmp	loc_645C8DEA
; ---------------------------------------------------------------------------

loc_645C8BCC:				; CODE XREF: sub_645C8AA5+34Bj
		mov	[ebp+var_38], 0
		mov	[ebp+var_3C], 0
		mov	[ebp+var_54], 102h
		mov	[ebp+var_50], 0
		mov	[ebp+var_4C], 0
		mov	[ebp+var_48], 11h
		mov	[ebp+var_44], 0
		mov	[ebp+var_40], 0
		mov	eax, [ebp+var_30]
		mov	edx, [ebp+var_1C]
		shl	edx, 2
		add	eax, edx
		mov	eax, [eax]
		mov	[esp+78h+var_6C], 2
		lea	edx, [ebp+var_54]
		mov	[esp+78h+var_70], edx
		mov	[esp+78h+var_74], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	sub_645C2F6F
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	loc_645C8D46
		lea	eax, [ebp+var_38]
		mov	[esp+78h+var_78], eax
		call	sub_645C5769
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	loc_645C8D46
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+10h]
		mov	eax, [ebp+var_38]
		mov	[esp+78h+var_74], edx ;	void *
		mov	[esp+78h+var_78], eax ;	int
		call	pkcs11h_token_duplicateTokenId
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	loc_645C8D46
		mov	edx, [ebp+var_4C]
		mov	eax, [ebp+var_50]
		mov	ecx, [ebp+var_38]
		lea	ebx, [ecx+408h]
		mov	ecx, [ebp+var_38]
		add	ecx, 404h
		mov	[esp+78h+var_6C], edx ;	size_t
		mov	[esp+78h+var_70], eax ;	void *
		mov	[esp+78h+var_74], ebx ;	int
		mov	[esp+78h+var_78], ecx ;	int
		call	sub_645C15E9
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	loc_645C8D46
		mov	edx, [ebp+var_40]
		mov	eax, [ebp+var_44]
		mov	ecx, [ebp+var_38]
		lea	ebx, [ecx+410h]
		mov	ecx, [ebp+var_38]
		add	ecx, 40Ch
		mov	[esp+78h+var_6C], edx ;	size_t
		mov	[esp+78h+var_70], eax ;	void *
		mov	[esp+78h+var_74], ebx ;	int
		mov	[esp+78h+var_78], ecx ;	int
		call	sub_645C15E9
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645C8D46
		mov	eax, [ebp+var_38]
		mov	[esp+78h+var_78], eax
		call	sub_645C5BAE
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645C8D46
		mov	[esp+78h+var_74], 8 ; size_t
		lea	eax, [ebp+var_3C]
		mov	[esp+78h+var_78], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645C8D46
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+24h]
		mov	[eax], edx
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+var_38]
		mov	[eax+4], edx
		mov	[ebp+var_38], 0
		mov	edx, [ebp+var_3C]
		mov	eax, [ebp+arg_0]
		mov	[eax+24h], edx
		mov	[ebp+var_3C], 0
		mov	[ebp+var_18], 0

loc_645C8D46:				; CODE XREF: sub_645C8AA5+191j
					; sub_645C8AA5+1A9j ...
		mov	eax, [ebp+var_38]
		test	eax, eax
		jz	short loc_645C8D5F
		mov	eax, [ebp+var_38]
		mov	[esp+78h+var_78], eax
		call	pkcs11h_certificate_freeCertificateId
		mov	[ebp+var_38], 0

loc_645C8D5F:				; CODE XREF: sub_645C8AA5+2A6j
		mov	eax, [ebp+var_3C]
		test	eax, eax
		jz	short loc_645C8D78
		lea	eax, [ebp+var_3C]
		mov	[esp+78h+var_78], eax
		call	sub_645C156B
		mov	[ebp+var_3C], 0

loc_645C8D78:				; CODE XREF: sub_645C8AA5+2BFj
		mov	[esp+78h+var_74], 2
		lea	eax, [ebp+var_54]
		mov	[esp+78h+var_78], eax
		call	sub_645C316B
		cmp	[ebp+var_18], 0
		jz	short loc_645C8DE6
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C8DE6
		mov	eax, [ebp+var_18]
		mov	[esp+78h+var_78], eax
		call	pkcs11h_getMessage
		mov	edx, [ebp+var_30]
		mov	ecx, [ebp+var_1C]
		shl	ecx, 2
		add	edx, ecx
		mov	edx, [edx]
		mov	ecx, [ebp+arg_0]
		mov	ecx, [ecx+0Ch]
		add	ecx, 408h
		mov	[esp+78h+var_64], eax
		mov	eax, [ebp+var_18]
		mov	[esp+78h+var_68], eax
		mov	[esp+78h+var_6C], edx
		mov	[esp+78h+var_70], ecx
		mov	[esp+78h+var_74], offset aPkcs11Cannot_2 ; "PKCS#11: Cannot get	object attribute fo"...
		mov	[esp+78h+var_78], 4
		call	sub_645CBF0E

loc_645C8DE6:				; CODE XREF: sub_645C8AA5+2EAj
					; sub_645C8AA5+2F4j
		add	[ebp+var_1C], 1

loc_645C8DEA:				; CODE XREF: sub_645C8AA5+122j
		mov	eax, [ebp+var_34]
		cmp	[ebp+var_1C], eax
		jb	loc_645C8BCC
		mov	[ebp+var_10], 1
		mov	[ebp+var_18], 0

loc_645C8E04:				; CODE XREF: sub_645C8AA5+E0j
					; sub_645C8AA5+116j
		mov	eax, [ebp+var_30]
		test	eax, eax
		jz	short loc_645C8E16
		lea	eax, [ebp+var_30]
		mov	[esp+78h+var_78], eax
		call	sub_645C156B

loc_645C8E16:				; CODE XREF: sub_645C8AA5+364j
		cmp	[ebp+var_10], 0
		jnz	short loc_645C8E92
		cmp	[ebp+var_14], 0
		jnz	short loc_645C8E8C
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C8E56
		mov	eax, [ebp+var_18]
		mov	[esp+78h+var_78], eax
		call	pkcs11h_getMessage
		mov	[esp+78h+var_6C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aPkcs11GetCerti ; "PKCS#11: Get certificate attributes	fai"...
		mov	[esp+78h+var_78], 4
		call	sub_645CBF0E

loc_645C8E56:				; CODE XREF: sub_645C8AA5+385j
		mov	eax, [ebp+arg_8]
		and	eax, 1
		mov	[esp+78h+var_68], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+78h+var_6C], eax
		mov	[esp+78h+var_70], 1
		mov	[esp+78h+var_74], 1
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+var_78], eax
		call	sub_645C414B
		mov	[ebp+var_18], eax
		mov	[ebp+var_14], 1

loc_645C8E8C:				; CODE XREF: sub_645C8AA5+37Bj
		cmp	[ebp+var_18], 0
		jnz	short loc_645C8E9C

loc_645C8E92:				; CODE XREF: sub_645C8AA5+9Ej
					; sub_645C8AA5+375j
		cmp	[ebp+var_10], 0
		jz	loc_645C8B48

loc_645C8E9C:				; CODE XREF: sub_645C8AA5+92j
					; sub_645C8AA5+3EBj
		cmp	[ebp+var_C], 0
		jz	short loc_645C8EB7
		mov	eax, [ebp+arg_0]
		add	eax, 2Ch
		mov	[esp+78h+var_78], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C8EB7:				; CODE XREF: sub_645C8AA5+3FBj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C8EEB
		mov	eax, [ebp+var_18]
		mov	[esp+78h+var_78], eax
		call	pkcs11h_getMessage
		mov	[esp+78h+var_6C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+78h+var_70], eax
		mov	[esp+78h+var_74], offset aPkcs11_pkcs_39 ; "PKCS#11: _pkcs11h_certificate_enumSessi"...
		mov	[esp+78h+var_78], 5
		call	sub_645CBF0E

loc_645C8EEB:				; CODE XREF: sub_645C8AA5+41Aj
		mov	eax, [ebp+var_18]
		add	esp, 74h
		pop	ebx
		pop	ebp
		retn
sub_645C8AA5	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C8EF4	proc near		; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+1B4p
					; pkcs11h_certificate_enumCertificateIds+47Bp

var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 5Ch
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 0
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_30], 6
		cmp	[ebp+arg_8], 0
		jnz	short loc_645C8F4B
		mov	[esp+68h+var_60], 9E2h ; int
		mov	[esp+68h+var_64], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+68h+var_68], offset aP_cert_id_end_ ; "p_cert_id_end_list!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C8F4C
; ---------------------------------------------------------------------------

loc_645C8F4B:				; CODE XREF: sub_645C8EF4+37j
		nop

loc_645C8F4C:				; CODE XREF: sub_645C8EF4+55j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C8F7F
		mov	eax, [ebp+arg_8]
		mov	[esp+68h+var_58], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11__pkcs_9 ; "PKCS#11: __pkcs11h_certificate_splitCer"...
		mov	[esp+68h+var_68], 5
		call	sub_645CBF0E

loc_645C8F7F:				; CODE XREF: sub_645C8EF4+60j
		cmp	[ebp+arg_4], 0
		jz	short loc_645C8F8E
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0

loc_645C8F8E:				; CODE XREF: sub_645C8EF4+8Fj
		mov	eax, [ebp+arg_8]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_24], eax
		jmp	short loc_645C8FF0
; ---------------------------------------------------------------------------

loc_645C8F9F:				; CODE XREF: sub_645C8EF4+100j
		mov	[ebp+var_38], 0
		mov	[esp+68h+var_64], 0Ch ;	size_t
		lea	eax, [ebp+var_38]
		mov	[esp+68h+var_68], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_30], eax
		cmp	[ebp+var_30], 0
		jz	short loc_645C8FC7
		jmp	loc_645C91B6
; ---------------------------------------------------------------------------

loc_645C8FC7:				; CODE XREF: sub_645C8EF4+CCj
		mov	eax, [ebp+var_38]
		mov	edx, [ebp+var_28]
		mov	[eax], edx
		mov	eax, [ebp+var_38]
		mov	edx, [ebp+var_24]
		mov	edx, [edx+4]
		mov	[eax+4], edx
		mov	eax, [ebp+var_38]
		mov	[ebp+var_28], eax
		mov	[ebp+var_38], 0
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		mov	[ebp+var_24], eax

loc_645C8FF0:				; CODE XREF: sub_645C8EF4+A9j
		cmp	[ebp+var_24], 0
		jnz	short loc_645C8F9F
		mov	eax, [ebp+var_28]
		mov	[ebp+var_2C], eax
		jmp	loc_645C908E
; ---------------------------------------------------------------------------

loc_645C9001:				; CODE XREF: sub_645C8EF4+19Ej
		mov	[ebp+var_34], 0
		mov	eax, [ebp+var_28]
		mov	[ebp+var_34], eax
		jmp	short loc_645C9076
; ---------------------------------------------------------------------------

loc_645C9010:				; CODE XREF: sub_645C8EF4+190j
		mov	eax, [ebp+var_2C]
		cmp	eax, [ebp+var_34]
		jz	short loc_645C906E
		mov	eax, ds:dword_645D8018
		mov	edx, [ebp+var_34]
		mov	edx, [edx+4]
		mov	edi, [edx+410h]
		mov	edx, [ebp+var_34]
		mov	edx, [edx+4]
		mov	esi, [edx+40Ch]
		mov	edx, [ebp+var_2C]
		mov	edx, [edx+4]
		mov	ebx, [edx+410h]
		mov	edx, [ebp+var_2C]
		mov	edx, [edx+4]
		mov	ecx, [edx+40Ch]
		mov	edx, ds:dword_645D8004
		mov	[esp+68h+var_58], edi
		mov	[esp+68h+var_5C], esi
		mov	[esp+68h+var_60], ebx
		mov	[esp+68h+var_64], ecx
		mov	[esp+68h+var_68], edx
		call	eax ; dword_645D8018
		mov	edx, [ebp+var_2C]
		mov	[edx+8], eax

loc_645C906E:				; CODE XREF: sub_645C8EF4+122j
		mov	eax, [ebp+var_34]
		mov	eax, [eax]
		mov	[ebp+var_34], eax

loc_645C9076:				; CODE XREF: sub_645C8EF4+11Aj
		cmp	[ebp+var_34], 0
		jz	short loc_645C9086
		mov	eax, [ebp+var_2C]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_645C9010

loc_645C9086:				; CODE XREF: sub_645C8EF4+186j
		mov	eax, [ebp+var_2C]
		mov	eax, [eax]
		mov	[ebp+var_2C], eax

loc_645C908E:				; CODE XREF: sub_645C8EF4+108j
		cmp	[ebp+var_2C], 0
		jnz	loc_645C9001
		mov	[ebp+var_30], 0
		mov	eax, [ebp+var_28]
		mov	[ebp+var_2C], eax
		jmp	loc_645C9166
; ---------------------------------------------------------------------------

loc_645C90AA:				; CODE XREF: sub_645C8EF4+276j
		mov	[ebp+var_3C], 0
		mov	[esp+68h+var_64], 8 ; size_t
		lea	eax, [ebp+var_3C]
		mov	[esp+68h+var_68], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_30], eax
		cmp	[ebp+var_30], 0
		jnz	short loc_645C90EE
		mov	eax, [ebp+var_2C]
		mov	eax, [eax+4]
		mov	edx, [ebp+var_3C]
		add	edx, 4
		mov	[esp+68h+var_64], eax ;	void *
		mov	[esp+68h+var_68], edx ;	int
		call	pkcs11h_certificate_duplicateCertificateId
		mov	[ebp+var_30], eax
		cmp	[ebp+var_30], 0
		jz	short loc_645C911E

loc_645C90EE:				; CODE XREF: sub_645C8EF4+1D7j
		mov	eax, [ebp+var_3C]
		test	eax, eax
		jz	short loc_645C9119
		mov	eax, [ebp+var_3C]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645C910D
		mov	eax, [ebp+var_3C]
		mov	eax, [eax+4]
		mov	[esp+68h+var_68], eax
		call	pkcs11h_certificate_freeCertificateId

loc_645C910D:				; CODE XREF: sub_645C8EF4+209j
		lea	eax, [ebp+var_3C]
		mov	[esp+68h+var_68], eax
		call	sub_645C156B
		nop

loc_645C9119:				; CODE XREF: sub_645C8EF4+1FFj
		jmp	loc_645C91B6
; ---------------------------------------------------------------------------

loc_645C911E:				; CODE XREF: sub_645C8EF4+1F8j
		mov	eax, [ebp+var_2C]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+var_2C]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_645C9149
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+var_1C]
		mov	[eax], edx
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_1C], eax
		mov	[ebp+var_3C], 0
		jmp	short loc_645C915E
; ---------------------------------------------------------------------------

loc_645C9149:				; CODE XREF: sub_645C8EF4+23Cj
		mov	eax, [ebp+var_3C]
		mov	edx, [ebp+var_20]
		mov	[eax], edx
		mov	eax, [ebp+var_3C]
		mov	[ebp+var_20], eax
		mov	[ebp+var_3C], 0

loc_645C915E:				; CODE XREF: sub_645C8EF4+253j
		mov	eax, [ebp+var_2C]
		mov	eax, [eax]
		mov	[ebp+var_2C], eax

loc_645C9166:				; CODE XREF: sub_645C8EF4+1B1j
		cmp	[ebp+var_2C], 0
		jnz	loc_645C90AA
		cmp	[ebp+arg_4], 0
		jz	short loc_645C9185
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+var_1C]
		mov	[eax], edx
		mov	[ebp+var_1C], 0

loc_645C9185:				; CODE XREF: sub_645C8EF4+280j
		mov	eax, [ebp+arg_8]
		mov	edx, [ebp+var_20]
		mov	[eax], edx
		mov	[ebp+var_20], 0
		mov	[ebp+var_30], 0
		jmp	short loc_645C91B6
; ---------------------------------------------------------------------------

loc_645C919D:				; CODE XREF: sub_645C8EF4+2C6j
		mov	eax, [ebp+var_28]
		mov	[ebp+var_40], eax
		mov	eax, [ebp+var_28]
		mov	eax, [eax]
		mov	[ebp+var_28], eax
		lea	eax, [ebp+var_40]
		mov	[esp+68h+var_68], eax
		call	sub_645C156B

loc_645C91B6:				; CODE XREF: sub_645C8EF4+CEj
					; sub_645C8EF4:loc_645C9119j ...
		cmp	[ebp+var_28], 0
		jnz	short loc_645C919D
		cmp	[ebp+var_1C], 0
		jz	short loc_645C91CD
		mov	eax, [ebp+var_1C]
		mov	[esp+68h+var_68], eax
		call	pkcs11h_certificate_freeCertificateIdList

loc_645C91CD:				; CODE XREF: sub_645C8EF4+2CCj
		cmp	[ebp+var_20], 0
		jz	short loc_645C91DE
		mov	eax, [ebp+var_20]
		mov	[esp+68h+var_68], eax
		call	pkcs11h_certificate_freeCertificateIdList

loc_645C91DE:				; CODE XREF: sub_645C8EF4+2DDj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C9212
		mov	eax, [ebp+var_30]
		mov	[esp+68h+var_68], eax
		call	pkcs11h_getMessage
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+var_30]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11__pkc_10 ; "PKCS#11: __pkcs11h_certificate_splitCer"...
		mov	[esp+68h+var_68], 5
		call	sub_645CBF0E

loc_645C9212:				; CODE XREF: sub_645C8EF4+2F2j
		mov	eax, [ebp+var_30]
		add	esp, 5Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_645C8EF4	endp

; Exported entry  13. pkcs11h_certificate_freeCertificateIdList

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_freeCertificateIdList
pkcs11h_certificate_freeCertificateIdList proc near ; CODE XREF: sub_645C8EF4+2D4p
					; sub_645C8EF4+2E5p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C9250
		mov	[esp+28h+var_20], 0A73h	; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C9251
; ---------------------------------------------------------------------------

loc_645C9250:				; CODE XREF: pkcs11h_certificate_freeCertificateIdList+13j
		nop

loc_645C9251:				; CODE XREF: pkcs11h_certificate_freeCertificateIdList+31j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C927A
		mov	[esp+28h+var_20], 0A74h	; int
		mov	[esp+28h+var_24], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C927B
; ---------------------------------------------------------------------------

loc_645C927A:				; CODE XREF: pkcs11h_certificate_freeCertificateIdList+3Dj
		nop

loc_645C927B:				; CODE XREF: pkcs11h_certificate_freeCertificateIdList+5Bj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C92A2
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_43 ; "PKCS#11: pkcs11h_certificate_freeCertif"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E
		jmp	short loc_645C92DE
; ---------------------------------------------------------------------------

loc_645C92A2:				; CODE XREF: pkcs11h_certificate_freeCertificateIdList+66j
		jmp	short loc_645C92DE
; ---------------------------------------------------------------------------

loc_645C92A4:				; CODE XREF: pkcs11h_certificate_freeCertificateIdList+C5j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645C92CA
		mov	eax, [ebp+var_10]
		mov	eax, [eax+4]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_certificate_freeCertificateId

loc_645C92CA:				; CODE XREF: pkcs11h_certificate_freeCertificateIdList+9Dj
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax], 0
		lea	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	sub_645C156B

loc_645C92DE:				; CODE XREF: pkcs11h_certificate_freeCertificateIdList+83j
					; pkcs11h_certificate_freeCertificateIdList:loc_645C92A2j
		cmp	[ebp+var_C], 0
		jnz	short loc_645C92A4
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C9302
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_44 ; "PKCS#11: pkcs11h_certificate_freeCertif"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C9302:				; CODE XREF: pkcs11h_certificate_freeCertificateIdList+CFj
		mov	eax, 0
		leave
		retn
pkcs11h_certificate_freeCertificateIdList endp

; Exported entry  10. pkcs11h_certificate_enumTokenCertificateIds

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_certificate_enumTokenCertificateIds(void *, int, int, int, int, int)
		public pkcs11h_certificate_enumTokenCertificateIds
pkcs11h_certificate_enumTokenCertificateIds proc near

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_10], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C934B
		mov	[esp+38h+var_30], 0A9Eh	; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C934C
; ---------------------------------------------------------------------------

loc_645C934B:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+22j
		nop

loc_645C934C:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+40j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C9375
		mov	[esp+38h+var_30], 0A9Fh	; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C9376
; ---------------------------------------------------------------------------

loc_645C9375:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+4Cj
		nop

loc_645C9376:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+6Aj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645C939A
		mov	[esp+38h+var_30], 0AA0h	; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aToken_idNull_1 ; "token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C939B
; ---------------------------------------------------------------------------

loc_645C939A:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+71j
		nop

loc_645C939B:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+8Fj
		cmp	[ebp+arg_14], 0
		jnz	short loc_645C93BF
		mov	[esp+38h+var_30], 0AA3h	; int
		mov	[esp+38h+var_34], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+38h+var_38], offset aP_cert_id_end_ ; "p_cert_id_end_list!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C93C0
; ---------------------------------------------------------------------------

loc_645C93BF:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+96j
		nop

loc_645C93C0:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+B4j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C9408
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_1C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_45 ; "PKCS#11: pkcs11h_certificate_enumTokenC"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C9408:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+BFj
		cmp	[ebp+arg_10], 0
		jz	short loc_645C9417
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0

loc_645C9417:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+103j
		mov	eax, [ebp+arg_14]
		mov	dword ptr [eax], 0
		mov	eax, ds:dword_645D8030
		add	eax, 40h
		mov	[esp+38h+var_38], eax
		call	sub_645C24B4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C943E
		jmp	loc_645C94D4
; ---------------------------------------------------------------------------

loc_645C943E:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+12Ej
		mov	[ebp+var_C], 1
		lea	eax, [ebp+var_14]
		mov	[esp+38h+var_34], eax ;	int
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax ;	void *
		call	sub_645C35B0
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C9462
		jmp	short loc_645C94D4
; ---------------------------------------------------------------------------

loc_645C9462:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+155j
		cmp	[ebp+arg_4], 2
		jnz	short loc_645C9480
		mov	eax, [ebp+var_14]
		mov	eax, [eax+24h]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_certificate_freeCertificateIdList
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+24h], 0

loc_645C9480:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+15Dj
		mov	eax, [ebp+var_14]
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_645C94A6
		mov	eax, [ebp+var_14]
		mov	edx, [ebp+arg_C]
		mov	[esp+38h+var_30], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+38h+var_34], edx
		mov	[esp+38h+var_38], eax
		call	sub_645C8AA5
		mov	[ebp+var_10], eax

loc_645C94A6:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+17Fj
		mov	eax, [ebp+var_14]
		mov	eax, [eax+24h]
		mov	edx, [ebp+arg_14]
		mov	[esp+38h+var_30], edx
		mov	edx, [ebp+arg_10]
		mov	[esp+38h+var_34], edx
		mov	[esp+38h+var_38], eax
		call	sub_645C8EF4
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645C94CD
		jmp	short loc_645C94D4
; ---------------------------------------------------------------------------

loc_645C94CD:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+1C0j
		mov	[ebp+var_10], 0

loc_645C94D4:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+130j
					; pkcs11h_certificate_enumTokenCertificateIds+157j ...
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_645C94E6
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	sub_645C3851

loc_645C94E6:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+1D0j
		cmp	[ebp+var_C], 0
		jz	short loc_645C9503
		mov	eax, ds:dword_645D8030
		add	eax, 40h
		mov	[esp+38h+var_38], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C9503:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+1E1j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C9537
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_46 ; "PKCS#11: pkcs11h_certificate_enumTokenC"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645C9537:				; CODE XREF: pkcs11h_certificate_enumTokenCertificateIds+202j
		mov	eax, [ebp+var_10]
		leave
		retn
pkcs11h_certificate_enumTokenCertificateIds endp

; Exported entry   9. pkcs11h_certificate_enumCertificateIds

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_enumCertificateIds
pkcs11h_certificate_enumCertificateIds proc near

var_F8		= dword	ptr -0F8h
var_F4		= dword	ptr -0F4h
var_F0		= dword	ptr -0F0h
var_EC		= dword	ptr -0ECh
var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_D8		= byte ptr -0D8h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 0F8h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_1C], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645C9581
		mov	[esp+0F8h+var_F0], 0B01h ; int
		mov	[esp+0F8h+var_F4], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+0F8h+var_F8], offset a_g_pkcs11h_d_1 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C9582
; ---------------------------------------------------------------------------

loc_645C9581:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+25j
		nop

loc_645C9582:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+43j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645C95AB
		mov	[esp+0F8h+var_F0], 0B02h ; int
		mov	[esp+0F8h+var_F4], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+0F8h+var_F8], offset a_g_pkcs11h_d_2 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645C95AC
; ---------------------------------------------------------------------------

loc_645C95AB:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+4Fj
		nop

loc_645C95AC:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+6Dj
		cmp	[ebp+arg_10], 0
		jnz	short loc_645C95D0
		mov	[esp+0F8h+var_F0], 0B05h ; int
		mov	[esp+0F8h+var_F4], offset aPkcs11hCertifi ; "pkcs11h-certificate.c"
		mov	[esp+0F8h+var_F8], offset aP_cert_id_end_ ; "p_cert_id_end_list!=NULL"
		call	sub_645D02E0
		jmp	short loc_645C95D1
; ---------------------------------------------------------------------------

loc_645C95D0:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+74j
		nop

loc_645C95D1:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+92j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C960B
		mov	eax, [ebp+arg_10]
		mov	[esp+0F8h+var_E4], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+0F8h+var_E8], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+0F8h+var_EC], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], offset aPkcs11Pkcs1_47 ; "PKCS#11: pkcs11h_certificate_enumCertif"...
		mov	[esp+0F8h+var_F8], 5
		call	sub_645CBF0E

loc_645C960B:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+9Dj
		cmp	[ebp+arg_C], 0
		jz	short loc_645C961A
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0

loc_645C961A:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+D3j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0
		mov	eax, ds:dword_645D8030
		add	eax, 40h
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C24B4
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jz	short loc_645C9641
		jmp	loc_645C99CE
; ---------------------------------------------------------------------------

loc_645C9641:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+FEj
		mov	[ebp+var_C], 1
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+0Ch]
		mov	[ebp+var_18], eax
		jmp	short loc_645C9685
; ---------------------------------------------------------------------------

loc_645C9655:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+14Dj
		mov	eax, [ebp+var_18]
		mov	dword ptr [eax+28h], 0
		cmp	[ebp+arg_0], 2
		jnz	short loc_645C967D
		mov	eax, [ebp+var_18]
		mov	eax, [eax+24h]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_certificate_freeCertificateIdList
		mov	eax, [ebp+var_18]
		mov	dword ptr [eax+24h], 0

loc_645C967D:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+127j
		mov	eax, [ebp+var_18]
		mov	eax, [eax]
		mov	[ebp+var_18], eax

loc_645C9685:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+117j
		cmp	[ebp+var_18], 0
		jnz	short loc_645C9655
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_14], eax
		jmp	loc_645C98AB
; ---------------------------------------------------------------------------

loc_645C969B:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+373j
		mov	[ebp+var_28], 0
		mov	eax, [ebp+var_14]
		mov	eax, [eax+4]
		test	eax, eax
		jz	loc_645C98A3
		lea	eax, [ebp+var_2C]
		mov	[esp+0F8h+var_EC], eax
		lea	eax, [ebp+var_28]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], 1
		mov	eax, [ebp+var_14]
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C2D74
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jz	short loc_645C96DF
		jmp	loc_645C9843
; ---------------------------------------------------------------------------

loc_645C96DF:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+19Cj
		mov	[ebp+var_20], 0
		jmp	loc_645C9830
; ---------------------------------------------------------------------------

loc_645C96EB:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+2FAj
		mov	[ebp+var_30], 0
		mov	[ebp+var_34], 0
		mov	eax, [ebp+var_14]
		mov	eax, [eax+430h]
		mov	eax, [eax+1Ah]
		mov	edx, [ebp+var_28]
		mov	ecx, [ebp+var_20]
		shl	ecx, 2
		add	edx, ecx
		mov	edx, [edx]
		lea	ecx, [ebp+var_D8]
		mov	[esp+0F8h+var_F4], ecx
		mov	[esp+0F8h+var_F8], edx
		call	eax
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_645C97A2
		lea	eax, [ebp+var_34]
		mov	[esp+0F8h+var_F4], eax ; int
		lea	eax, [ebp+var_D8]
		mov	[esp+0F8h+var_F8], eax ; void *
		call	sub_645C48DA
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_645C97A2
		mov	eax, [ebp+var_34]
		lea	edx, [ebp+var_30]
		mov	[esp+0F8h+var_F4], edx ; int
		mov	[esp+0F8h+var_F8], eax ; void *
		call	sub_645C35B0
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_645C97A2
		mov	eax, [ebp+var_30]
		mov	dword ptr [eax+28h], 1
		mov	eax, [ebp+var_30]
		mov	eax, [eax+24h]
		test	eax, eax
		jnz	short loc_645C979B
		mov	eax, [ebp+var_30]
		mov	edx, [ebp+arg_8]
		mov	[esp+0F8h+var_F0], edx
		mov	edx, [ebp+arg_4]
		mov	[esp+0F8h+var_F4], edx
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C8AA5
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jz	short loc_645C979B
		jmp	short loc_645C97A2
; ---------------------------------------------------------------------------

loc_645C979B:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+239j
					; pkcs11h_certificate_enumCertificateIds+25Bj
		mov	[ebp+var_1C], 0

loc_645C97A2:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+1ECj
					; pkcs11h_certificate_enumCertificateIds+20Aj ...
		cmp	[ebp+var_1C], 0
		jz	short loc_645C97FA
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C97FA
		mov	eax, [ebp+var_1C]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_getMessage
		mov	edx, [ebp+var_28]
		mov	ecx, [ebp+var_20]
		shl	ecx, 2
		add	edx, ecx
		mov	edx, [edx]
		mov	ecx, [ebp+var_14]
		add	ecx, 408h
		mov	[esp+0F8h+var_E4], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+0F8h+var_E8], eax
		mov	[esp+0F8h+var_EC], edx
		mov	[esp+0F8h+var_F0], ecx
		mov	[esp+0F8h+var_F4], offset aPkcs11Cannot_3 ; "PKCS#11: Cannot get token information f"...
		mov	[esp+0F8h+var_F8], 4
		call	sub_645CBF0E

loc_645C97FA:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+26Aj
					; pkcs11h_certificate_enumCertificateIds+274j
		mov	eax, [ebp+var_30]
		test	eax, eax
		jz	short loc_645C9813
		mov	eax, [ebp+var_30]
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C3851
		mov	[ebp+var_30], 0

loc_645C9813:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+2C3j
		mov	eax, [ebp+var_34]
		test	eax, eax
		jz	short loc_645C982C
		mov	eax, [ebp+var_34]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_token_freeTokenId
		mov	[ebp+var_34], 0

loc_645C982C:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+2DCj
		add	[ebp+var_20], 1

loc_645C9830:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+1AAj
		mov	eax, [ebp+var_2C]
		cmp	[ebp+var_20], eax
		jb	loc_645C96EB
		mov	[ebp+var_1C], 0

loc_645C9843:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+19Ej
		cmp	[ebp+var_1C], 0
		jz	short loc_645C988A
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C988A
		mov	eax, [ebp+var_1C]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_getMessage
		mov	edx, [ebp+var_14]
		add	edx, 408h
		mov	[esp+0F8h+var_E8], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+0F8h+var_EC], eax
		mov	[esp+0F8h+var_F0], edx
		mov	[esp+0F8h+var_F4], offset aPkcs11Cannot_4 ; "PKCS#11: Cannot get slot list for provi"...
		mov	[esp+0F8h+var_F8], 4
		call	sub_645CBF0E

loc_645C988A:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+30Bj
					; pkcs11h_certificate_enumCertificateIds+315j
		mov	eax, [ebp+var_28]
		test	eax, eax
		jz	short loc_645C98A3
		lea	eax, [ebp+var_28]
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C156B
		mov	[ebp+var_28], 0

loc_645C98A3:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+16Ej
					; pkcs11h_certificate_enumCertificateIds+353j
		mov	eax, [ebp+var_14]
		mov	eax, [eax]
		mov	[ebp+var_14], eax

loc_645C98AB:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+15Aj
		cmp	[ebp+var_14], 0
		jnz	loc_645C969B
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+0Ch]
		mov	[ebp+var_18], eax
		jmp	loc_645C9999
; ---------------------------------------------------------------------------

loc_645C98C5:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+461j
		cmp	[ebp+arg_0], 0
		jz	short loc_645C98E9
		cmp	[ebp+arg_0], 2
		jz	short loc_645C98DB
		cmp	[ebp+arg_0], 1
		jnz	loc_645C9991

loc_645C98DB:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+393j
		mov	eax, [ebp+var_18]
		mov	eax, [eax+28h]
		test	eax, eax
		jz	loc_645C9991

loc_645C98E9:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+38Dj
		mov	[ebp+var_24], 0
		mov	eax, [ebp+var_18]
		mov	eax, [eax+24h]
		mov	[ebp+var_24], eax
		jmp	loc_645C9987
; ---------------------------------------------------------------------------

loc_645C98FE:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+44Fj
		mov	[ebp+var_38], 0
		mov	[esp+0F8h+var_F4], 8 ; size_t
		lea	eax, [ebp+var_38]
		mov	[esp+0F8h+var_F8], eax ; int
		call	sub_645C14C0
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jnz	short loc_645C9942
		mov	eax, [ebp+var_24]
		mov	eax, [eax+4]
		mov	edx, [ebp+var_38]
		add	edx, 4
		mov	[esp+0F8h+var_F4], eax ; void *
		mov	[esp+0F8h+var_F8], edx ; int
		call	pkcs11h_certificate_duplicateCertificateId
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jz	short loc_645C996A

loc_645C9942:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+3E3j
		mov	eax, [ebp+var_38]
		test	eax, eax
		jz	loc_645C99CE
		mov	eax, [ebp+var_38]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+var_38]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_certificate_freeCertificateIdList
		mov	[ebp+var_38], 0
		jmp	short loc_645C99CE
; ---------------------------------------------------------------------------

loc_645C996A:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+404j
		mov	eax, [ebp+var_38]
		mov	edx, [ebp+var_10]
		mov	[eax], edx
		mov	eax, [ebp+var_38]
		mov	[ebp+var_10], eax
		mov	[ebp+var_38], 0
		mov	eax, [ebp+var_24]
		mov	eax, [eax]
		mov	[ebp+var_24], eax

loc_645C9987:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+3BDj
		cmp	[ebp+var_24], 0
		jnz	loc_645C98FE

loc_645C9991:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+399j
					; pkcs11h_certificate_enumCertificateIds+3A7j
		mov	eax, [ebp+var_18]
		mov	eax, [eax]
		mov	[ebp+var_18], eax

loc_645C9999:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+384j
		cmp	[ebp+var_18], 0
		jnz	loc_645C98C5
		mov	eax, [ebp+arg_10]
		mov	[esp+0F8h+var_F0], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+0F8h+var_F4], eax
		mov	eax, [ebp+var_10]
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C8EF4
		mov	[ebp+var_1C], eax
		cmp	[ebp+var_1C], 0
		jz	short loc_645C99C7
		jmp	short loc_645C99CE
; ---------------------------------------------------------------------------

loc_645C99C7:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+487j
		mov	[ebp+var_1C], 0

loc_645C99CE:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+100j
					; pkcs11h_certificate_enumCertificateIds+40Bj ...
		cmp	[ebp+var_10], 0
		jz	short loc_645C99E6
		mov	eax, [ebp+var_10]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_certificate_freeCertificateIdList
		mov	[ebp+var_10], 0

loc_645C99E6:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+496j
		cmp	[ebp+var_C], 0
		jz	short loc_645C9A03
		mov	eax, ds:dword_645D8030
		add	eax, 40h
		mov	[esp+0F8h+var_F8], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645C9A03:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+4AEj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C9A37
		mov	eax, [ebp+var_1C]
		mov	[esp+0F8h+var_F8], eax
		call	pkcs11h_getMessage
		mov	[esp+0F8h+var_EC], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+0F8h+var_F0], eax
		mov	[esp+0F8h+var_F4], offset aPkcs11Pkcs1_48 ; "PKCS#11: pkcs11h_certificate_enumCertif"...
		mov	[esp+0F8h+var_F8], 5
		call	sub_645CBF0E

loc_645C9A37:				; CODE XREF: pkcs11h_certificate_enumCertificateIds+4CFj
		mov	eax, [ebp+var_1C]
		leave
		retn
pkcs11h_certificate_enumCertificateIds endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C9A3C	proc near		; CODE XREF: sub_645C9A74+3B8p
					; sub_645C9A74+3D3p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+var_4], 0
		mov	[ebp+var_8], 0
		jmp	short loc_645C9A67
; ---------------------------------------------------------------------------

loc_645C9A52:				; CODE XREF: sub_645C9A3C+31j
		mov	eax, [ebp+var_8]
		mov	edx, [ebp+arg_0]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		movzx	eax, al
		add	[ebp+var_4], eax
		add	[ebp+var_8], 1

loc_645C9A67:				; CODE XREF: sub_645C9A3C+14j
		mov	eax, [ebp+var_8]
		cmp	eax, [ebp+arg_4]
		jb	short loc_645C9A52
		mov	eax, [ebp+var_4]
		leave
		retn
sub_645C9A3C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C9A74	proc near		; DATA XREF: sub_645C9F7C+DEo

var_E8		= dword	ptr -0E8h
var_E4		= dword	ptr -0E4h
var_E0		= dword	ptr -0E0h
var_DC		= dword	ptr -0DCh
var_D0		= byte ptr -0D0h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= byte ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 0E4h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_24], eax
		mov	[ebp+var_C], 6
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C9AB5
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], offset aPkcs11__pkc_11 ; "PKCS#11: __pkcs11h_slotevent_provider p"...
		mov	[esp+0E8h+var_E8], 5
		call	sub_645CBF0E

loc_645C9AB5:				; CODE XREF: sub_645C9A74+1Fj
		mov	eax, [ebp+var_24]
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_645C9ACB
		mov	[ebp+var_C], 91h
		jmp	loc_645C9F44
; ---------------------------------------------------------------------------

loc_645C9ACB:				; CODE XREF: sub_645C9A74+49j
		mov	eax, [ebp+var_24]
		mov	eax, [eax+44Ch]
		test	eax, eax
		jnz	short loc_645C9AE5
		mov	eax, [ebp+var_24]
		mov	dword ptr [eax+44Ch], 1388h

loc_645C9AE5:				; CODE XREF: sub_645C9A74+62j
		mov	eax, [ebp+var_24]
		mov	eax, [eax+434h]
		test	eax, eax
		jnz	short loc_645C9B29
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C9B1C
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], offset aPkcs11SetupSlo ; "PKCS#11: Setup slotevent provider='%s' "...
		mov	[esp+0E8h+var_E8], 4
		call	sub_645CBF0E

loc_645C9B1C:				; CODE XREF: sub_645C9A74+86j
		mov	eax, [ebp+var_24]
		mov	dword ptr [eax+448h], 2

loc_645C9B29:				; CODE XREF: sub_645C9A74+7Cj
		mov	eax, [ebp+var_24]
		mov	eax, [eax+448h]
		test	eax, eax
		jz	short loc_645C9B48
		mov	eax, [ebp+var_24]
		mov	eax, [eax+448h]
		cmp	eax, 1
		jnz	loc_645C9C01

loc_645C9B48:				; CODE XREF: sub_645C9A74+C0j
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C9B74
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], offset aPkcs11SetupS_0 ; "PKCS#11: Setup slotevent provider='%s' "...
		mov	[esp+0E8h+var_E8], 4
		call	sub_645CBF0E
		jmp	short loc_645C9BB0
; ---------------------------------------------------------------------------

loc_645C9B74:				; CODE XREF: sub_645C9A74+DCj
		jmp	short loc_645C9BB0
; ---------------------------------------------------------------------------

loc_645C9B76:				; CODE XREF: sub_645C9A74+180j
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C9BA0
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], offset aPkcs11Sloteven ; "PKCS#11: Slotevent	provider='%s' event"
		mov	[esp+0E8h+var_E8], 4
		call	sub_645CBF0E

loc_645C9BA0:				; CODE XREF: sub_645C9A74+10Aj
		mov	eax, ds:dword_645D8030
		add	eax, 50h
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C255E

loc_645C9BB0:				; CODE XREF: sub_645C9A74+FEj
					; sub_645C9A74:loc_645C9B74j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+48h]
		test	eax, eax
		jnz	short loc_645C9BF6
		mov	eax, [ebp+var_24]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645C9BF6
		mov	eax, [ebp+var_24]
		mov	eax, [eax+430h]
		mov	eax, [eax+10Eh]
		mov	[esp+0E8h+var_E0], 0
		lea	edx, [ebp+var_28]
		mov	[esp+0E8h+var_E4], edx
		mov	[esp+0E8h+var_E8], 0
		call	eax
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C9B76

loc_645C9BF6:				; CODE XREF: sub_645C9A74+146j
					; sub_645C9A74+150j
		cmp	[ebp+var_C], 54h
		jz	short loc_645C9C01
		jmp	loc_645C9F44
; ---------------------------------------------------------------------------

loc_645C9C01:				; CODE XREF: sub_645C9A74+CEj
					; sub_645C9A74+186j
		mov	eax, [ebp+var_24]
		mov	eax, [eax+448h]
		test	eax, eax
		jz	short loc_645C9C20
		mov	eax, [ebp+var_24]
		mov	eax, [eax+448h]
		cmp	eax, 2
		jnz	loc_645C9D1B

loc_645C9C20:				; CODE XREF: sub_645C9A74+198j
		mov	[ebp+var_10], 1
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C9C53
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], offset aPkcs11SetupS_1 ; "PKCS#11: Setup slotevent provider='%s' "...
		mov	[esp+0E8h+var_E8], 4
		call	sub_645CBF0E
		jmp	short loc_645C9CBC
; ---------------------------------------------------------------------------

loc_645C9C53:				; CODE XREF: sub_645C9A74+1BBj
		jmp	short loc_645C9CBC
; ---------------------------------------------------------------------------

loc_645C9C55:				; CODE XREF: sub_645C9A74+28Cj
					; sub_645C9A74+296j
		cmp	[ebp+var_C], 0
		jnz	short loc_645C9CA4
		cmp	[ebp+var_10], 0
		jz	short loc_645C9CBC
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C9C8B
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], offset aPkcs11Sloteven ; "PKCS#11: Slotevent	provider='%s' event"
		mov	[esp+0E8h+var_E8], 4
		call	sub_645CBF0E

loc_645C9C8B:				; CODE XREF: sub_645C9A74+1F5j
		mov	[ebp+var_10], 0
		mov	eax, ds:dword_645D8030
		add	eax, 50h
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C255E
		jmp	short loc_645C9CBC
; ---------------------------------------------------------------------------

loc_645C9CA4:				; CODE XREF: sub_645C9A74+1E5j
		mov	eax, [ebp+var_24]
		mov	eax, [eax+44Ch]
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C2448
		mov	[ebp+var_10], 1

loc_645C9CBC:				; CODE XREF: sub_645C9A74+1DDj
					; sub_645C9A74:loc_645C9C53j ...
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+48h]
		test	eax, eax
		jnz	short loc_645C9D10
		mov	eax, [ebp+var_24]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645C9D10
		mov	eax, [ebp+var_24]
		mov	eax, [eax+430h]
		mov	eax, [eax+10Eh]
		mov	[esp+0E8h+var_E0], 0
		lea	edx, [ebp+var_28]
		mov	[esp+0E8h+var_E4], edx
		mov	[esp+0E8h+var_E8], 1
		call	eax
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	loc_645C9C55
		cmp	[ebp+var_C], 8
		jz	loc_645C9C55

loc_645C9D10:				; CODE XREF: sub_645C9A74+252j
					; sub_645C9A74+25Cj
		cmp	[ebp+var_C], 54h
		jz	short loc_645C9D1B
		jmp	loc_645C9F44
; ---------------------------------------------------------------------------

loc_645C9D1B:				; CODE XREF: sub_645C9A74+1A6j
					; sub_645C9A74+2A0j
		mov	eax, [ebp+var_24]
		mov	eax, [eax+448h]
		test	eax, eax
		jz	short loc_645C9D3A
		mov	eax, [ebp+var_24]
		mov	eax, [eax+448h]
		cmp	eax, 3
		jnz	loc_645C9F44

loc_645C9D3A:				; CODE XREF: sub_645C9A74+2B2j
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 1
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C9D77
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], offset aPkcs11SetupS_2 ; "PKCS#11: Setup slotevent provider='%s' "...
		mov	[esp+0E8h+var_E8], 4
		call	sub_645CBF0E
		jmp	loc_645C9F2A
; ---------------------------------------------------------------------------

loc_645C9D77:				; CODE XREF: sub_645C9A74+2DCj
		jmp	loc_645C9F2A
; ---------------------------------------------------------------------------

loc_645C9D7C:				; CODE XREF: sub_645C9A74+4CAj
		mov	[ebp+var_1C], 0
		mov	[ebp+var_2C], 0
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C9DB4
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], offset aPkcs11Slotev_0 ; "PKCS#11: Slotevent	provider='%s' poll"
		mov	[esp+0E8h+var_E8], 4
		call	sub_645CBF0E

loc_645C9DB4:				; CODE XREF: sub_645C9A74+31Ej
		lea	eax, [ebp+var_30]
		mov	[esp+0E8h+var_DC], eax
		lea	eax, [ebp+var_2C]
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], 1
		mov	eax, [ebp+var_24]
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C2D74
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645C9DE3
		jmp	loc_645C9EF5
; ---------------------------------------------------------------------------

loc_645C9DE3:				; CODE XREF: sub_645C9A74+368j
		mov	[ebp+var_20], 0
		jmp	loc_645C9E8B
; ---------------------------------------------------------------------------

loc_645C9DEF:				; CODE XREF: sub_645C9A74+41Dj
		mov	eax, [ebp+var_24]
		mov	eax, [eax+430h]
		mov	eax, [eax+1Ah]
		mov	edx, [ebp+var_2C]
		mov	ecx, [ebp+var_20]
		shl	ecx, 2
		add	edx, ecx
		mov	edx, [edx]
		lea	ecx, [ebp+var_D0]
		mov	[esp+0E8h+var_E4], ecx
		mov	[esp+0E8h+var_E8], edx
		call	eax
		test	eax, eax
		jnz	short loc_645C9E87
		mov	[esp+0E8h+var_E4], 20h
		lea	eax, [ebp+var_D0]
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C9A3C
		mov	ebx, eax
		mov	[esp+0E8h+var_E4], 20h
		lea	eax, [ebp+var_D0]
		add	eax, 20h
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C9A3C
		add	ebx, eax
		mov	[esp+0E8h+var_E4], 10h
		lea	eax, [ebp+var_D0]
		add	eax, 40h
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C9A3C
		add	ebx, eax
		mov	[esp+0E8h+var_E4], 10h
		lea	eax, [ebp+var_D0]
		add	eax, 50h
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C9A3C
		add	eax, ebx
		add	[ebp+var_1C], eax

loc_645C9E87:				; CODE XREF: sub_645C9A74+3A5j
		add	[ebp+var_20], 1

loc_645C9E8B:				; CODE XREF: sub_645C9A74+376j
		mov	eax, [ebp+var_30]
		cmp	[ebp+var_20], eax
		jb	loc_645C9DEF
		cmp	[ebp+var_18], 0
		jz	short loc_645C9EA6
		mov	[ebp+var_18], 0
		jmp	short loc_645C9EE8
; ---------------------------------------------------------------------------

loc_645C9EA6:				; CODE XREF: sub_645C9A74+427j
		mov	eax, [ebp+var_14]
		cmp	eax, [ebp+var_1C]
		jz	short loc_645C9EE8
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C9ED8
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], offset aPkcs11Sloteven ; "PKCS#11: Slotevent	provider='%s' event"
		mov	[esp+0E8h+var_E8], 4
		call	sub_645CBF0E

loc_645C9ED8:				; CODE XREF: sub_645C9A74+442j
		mov	eax, ds:dword_645D8030
		add	eax, 50h
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C255E

loc_645C9EE8:				; CODE XREF: sub_645C9A74+430j
					; sub_645C9A74+438j
		mov	eax, [ebp+var_1C]
		mov	[ebp+var_14], eax
		mov	[ebp+var_C], 0

loc_645C9EF5:				; CODE XREF: sub_645C9A74+36Aj
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jz	short loc_645C9F07
		lea	eax, [ebp+var_2C]
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C156B

loc_645C9F07:				; CODE XREF: sub_645C9A74+486j
		cmp	[ebp+var_C], 0
		jnz	short loc_645C9F44
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+48h]
		test	eax, eax
		jnz	short loc_645C9F2A
		mov	eax, [ebp+var_24]
		mov	eax, [eax+44Ch]
		mov	[esp+0E8h+var_E8], eax
		call	sub_645C2448

loc_645C9F2A:				; CODE XREF: sub_645C9A74+2FEj
					; sub_645C9A74:loc_645C9D77j ...
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+48h]
		test	eax, eax
		jnz	short loc_645C9F44
		mov	eax, [ebp+var_24]
		mov	eax, [eax+4]
		test	eax, eax
		jnz	loc_645C9D7C

loc_645C9F44:				; CODE XREF: sub_645C9A74+52j
					; sub_645C9A74+188j ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C9F6E
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0E8h+var_E0], eax
		mov	[esp+0E8h+var_E4], offset aPkcs11__pkc_12 ; "PKCS#11: __pkcs11h_slotevent_provider p"...
		mov	[esp+0E8h+var_E8], 5
		call	sub_645CBF0E

loc_645C9F6E:				; CODE XREF: sub_645C9A74+4D8j
		mov	eax, 0
		add	esp, 0E4h
		pop	ebx
		pop	ebp
		retn
sub_645C9A74	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645C9F7C	proc near		; DATA XREF: sub_645CA1F0+62o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 1
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645C9FA7
		mov	[esp+28h+var_24], offset aPkcs11__pkc_13 ; "PKCS#11: __pkcs11h_slotevent_manager en"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645C9FA7:				; CODE XREF: sub_645C9F7C+15j
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645C9FC5
		mov	[esp+28h+var_24], offset aPkcs11CallingS ; "PKCS#11: Calling slotevent hook"
		mov	[esp+28h+var_28], 4
		call	sub_645CBF0E

loc_645C9FC5:				; CODE XREF: sub_645C9F7C+33j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+24h]
		mov	edx, ds:dword_645D8030
		mov	edx, [edx+14h]
		mov	[esp+28h+var_28], edx
		call	eax
		jmp	loc_645CA15B
; ---------------------------------------------------------------------------

loc_645C9FE0:				; CODE XREF: sub_645C9F7C+1E3j
					; sub_645C9F7C+1F3j
		mov	[ebp+var_C], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA005
		mov	[esp+28h+var_24], offset aPkcs11__pkc_14 ; "PKCS#11: __pkcs11h_slotevent_manager ex"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CA005:				; CODE XREF: sub_645C9F7C+73j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_10], eax
		jmp	loc_645CA0AF
; ---------------------------------------------------------------------------

loc_645CA015:				; CODE XREF: sub_645C9F7C+137j
		mov	eax, [ebp+var_10]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645CA06C
		mov	eax, [ebp+var_10]
		mov	eax, [eax+450h]
		test	eax, eax
		jnz	short loc_645CA0A7
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA04A
		mov	[esp+28h+var_24], offset aPkcs11__pkc_15 ; "PKCS#11: __pkcs11h_slotevent_manager fo"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CA04A:				; CODE XREF: sub_645C9F7C+B8j
		mov	eax, [ebp+var_10]
		lea	edx, [eax+450h]
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset sub_645C9A74
		mov	[esp+28h+var_28], edx
		call	sub_645C269D
		jmp	short loc_645CA0A7
; ---------------------------------------------------------------------------

loc_645CA06C:				; CODE XREF: sub_645C9F7C+A1j
		mov	eax, [ebp+var_10]
		mov	eax, [eax+450h]
		test	eax, eax
		jz	short loc_645CA0A7
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA097
		mov	[esp+28h+var_24], offset aPkcs11__pkc_16 ; "PKCS#11: __pkcs11h_slotevent_manager fo"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CA097:				; CODE XREF: sub_645C9F7C+105j
		mov	eax, [ebp+var_10]
		add	eax, 450h
		mov	[esp+28h+var_28], eax
		call	sub_645C2739

loc_645CA0A7:				; CODE XREF: sub_645C9F7C+AEj
					; sub_645C9F7C+EEj ...
		mov	eax, [ebp+var_10]
		mov	eax, [eax]
		mov	[ebp+var_10], eax

loc_645CA0AF:				; CODE XREF: sub_645C9F7C+94j
		cmp	[ebp+var_10], 0
		jnz	loc_645CA015
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA0D7
		mov	[esp+28h+var_24], offset aPkcs11__pkc_17 ; "PKCS#11: __pkcs11h_slotevent_manager wa"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CA0D7:				; CODE XREF: sub_645C9F7C+145j
		mov	eax, ds:dword_645D8030
		add	eax, 50h
		mov	[esp+28h+var_24], 0FFFFFFFFh
		mov	[esp+28h+var_28], eax
		call	sub_645C25EF
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+4Ch]
		test	eax, eax
		jz	short loc_645CA127
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CA119
		mov	[esp+28h+var_24], offset aPkcs11Slotev_1 ; "PKCS#11: Slotevent skipping	event"
		mov	[esp+28h+var_28], 4
		call	sub_645CBF0E

loc_645CA119:				; CODE XREF: sub_645C9F7C+187j
		mov	eax, ds:dword_645D8030
		mov	dword ptr [eax+4Ch], 0
		jmp	short loc_645CA15B
; ---------------------------------------------------------------------------

loc_645CA127:				; CODE XREF: sub_645C9F7C+17Dj
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CA145
		mov	[esp+28h+var_24], offset aPkcs11CallingS ; "PKCS#11: Calling slotevent hook"
		mov	[esp+28h+var_28], 4
		call	sub_645CBF0E

loc_645CA145:				; CODE XREF: sub_645C9F7C+1B3j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+24h]
		mov	edx, ds:dword_645D8030
		mov	edx, [edx+14h]
		mov	[esp+28h+var_28], edx
		call	eax

loc_645CA15B:				; CODE XREF: sub_645C9F7C+5Fj
					; sub_645C9F7C+1A9j
		cmp	[ebp+var_C], 0
		jnz	loc_645C9FE0
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+48h]
		test	eax, eax
		jz	loc_645C9FE0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA193
		mov	[esp+28h+var_24], offset aPkcs11__pkc_18 ; "PKCS#11: __pkcs11h_slotevent_manager jo"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CA193:				; CODE XREF: sub_645C9F7C+201j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_14], eax
		jmp	short loc_645CA1C5
; ---------------------------------------------------------------------------

loc_645CA1A0:				; CODE XREF: sub_645C9F7C+24Dj
		mov	eax, [ebp+var_14]
		mov	eax, [eax+450h]
		test	eax, eax
		jz	short loc_645CA1BD
		mov	eax, [ebp+var_14]
		add	eax, 450h
		mov	[esp+28h+var_28], eax
		call	sub_645C2739

loc_645CA1BD:				; CODE XREF: sub_645C9F7C+22Fj
		mov	eax, [ebp+var_14]
		mov	eax, [eax]
		mov	[ebp+var_14], eax

loc_645CA1C5:				; CODE XREF: sub_645C9F7C+222j
		cmp	[ebp+var_14], 0
		jnz	short loc_645CA1A0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA1E9
		mov	[esp+28h+var_24], offset aPkcs11__pkc_19 ; "PKCS#11: __pkcs11h_slotevent_manager re"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CA1E9:				; CODE XREF: sub_645C9F7C+257j
		mov	eax, 0
		leave
		retn
sub_645C9F7C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CA1F0	proc near		; CODE XREF: pkcs11h_setSlotEventHook+93p
					; pkcs11h_plugAndPlay+F7p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 6
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA21B
		mov	[esp+28h+var_24], offset aPkcs11_pkcs_40 ; "PKCS#11: _pkcs11h_slotevent_init entry"
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CA21B:				; CODE XREF: sub_645CA1F0+15j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+44h]
		test	eax, eax
		jnz	short loc_645CA279
		mov	eax, ds:dword_645D8030
		add	eax, 50h
		mov	[esp+28h+var_28], eax
		call	sub_645C2596
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CA242
		jmp	short loc_645CA280
; ---------------------------------------------------------------------------

loc_645CA242:				; CODE XREF: sub_645CA1F0+4Ej
		mov	eax, ds:dword_645D8030
		add	eax, 54h
		mov	[esp+28h+var_20], 0
		mov	[esp+28h+var_24], offset sub_645C9F7C
		mov	[esp+28h+var_28], eax
		call	sub_645C269D
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CA26D
		jmp	short loc_645CA280
; ---------------------------------------------------------------------------

loc_645CA26D:				; CODE XREF: sub_645CA1F0+79j
		mov	eax, ds:dword_645D8030
		mov	dword ptr [eax+44h], 1

loc_645CA279:				; CODE XREF: sub_645CA1F0+35j
		mov	[ebp+var_C], 0

loc_645CA280:				; CODE XREF: sub_645CA1F0+50j
					; sub_645CA1F0+7Bj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA2B4
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11_pkcs_41 ; "PKCS#11: _pkcs11h_slotevent_init return"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CA2B4:				; CODE XREF: sub_645CA1F0+98j
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645CA1F0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CA2B9	proc near		; CODE XREF: sub_645CA35F+3Cp
					; pkcs11h_addProvider:loc_645CB997p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA2DD
		mov	[esp+18h+var_14], offset aPkcs11_pkcs_42 ; "PKCS#11: _pkcs11h_slotevent_notify entr"...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645CA2DD:				; CODE XREF: sub_645CA2B9+Ej
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+44h]
		test	eax, eax
		jz	short loc_645CA305
		mov	eax, ds:dword_645D8030
		mov	dword ptr [eax+4Ch], 1
		mov	eax, ds:dword_645D8030
		add	eax, 50h
		mov	[esp+18h+var_18], eax
		call	sub_645C255E

loc_645CA305:				; CODE XREF: sub_645CA2B9+2Ej
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA323
		mov	[esp+18h+var_14], offset aPkcs11_pkcs_43 ; "PKCS#11: _pkcs11h_slotevent_notify retu"...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645CA323:				; CODE XREF: sub_645CA2B9+54j
		mov	eax, 0
		leave
		retn
sub_645CA2B9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CA32A	proc near		; CODE XREF: sub_645CA35F:loc_645CA3BCp

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+44h]
		test	eax, eax
		jz	short loc_645CA358
		mov	eax, ds:dword_645D8030
		add	eax, 50h
		mov	[esp+18h+var_18], eax
		call	sub_645C2644
		mov	eax, ds:dword_645D8030
		mov	dword ptr [eax+44h], 0

loc_645CA358:				; CODE XREF: sub_645CA32A+10j
		mov	eax, 0
		leave
		retn
sub_645CA32A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CA35F	proc near		; CODE XREF: pkcs11h_terminate:loc_645CB03Ep
					; pkcs11h_plugAndPlay+B2p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA383
		mov	[esp+18h+var_14], offset aPkcs11_pkcs_44 ; "PKCS#11: _pkcs11h_slotevent_terminate e"...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645CA383:				; CODE XREF: sub_645CA35F+Ej
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+44h]
		test	eax, eax
		jz	short loc_645CA3C1
		mov	eax, ds:dword_645D8030
		mov	dword ptr [eax+48h], 1
		call	sub_645CA2B9
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+54h]
		test	eax, eax
		jz	short loc_645CA3BC
		mov	eax, ds:dword_645D8030
		add	eax, 54h
		mov	[esp+18h+var_18], eax
		call	sub_645C2739

loc_645CA3BC:				; CODE XREF: sub_645CA35F+4Bj
		call	sub_645CA32A

loc_645CA3C1:				; CODE XREF: sub_645CA35F+2Ej
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CA3DF
		mov	[esp+18h+var_14], offset aPkcs11_pkcs_45 ; "PKCS#11: _pkcs11h_slotevent_terminate r"...
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645CA3DF:				; CODE XREF: sub_645CA35F+6Aj
		mov	eax, 0
		leave
		retn
sub_645CA35F	endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  38. pkcs11h_getMessage

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_getMessage
pkcs11h_getMessage proc	near		; CODE XREF: sub_645C2D74+1CAp
					; sub_645C2F6F+1D3p ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		cmp	eax, 0A3h
		jz	loc_645CAA45
		cmp	eax, 0A3h
		ja	loc_645CA60F
		cmp	eax, 41h
		jz	loc_645CA969
		cmp	eax, 41h
		ja	loc_645CA501
		cmp	eax, 0Ah
		jz	loc_645CA8FB
		cmp	eax, 0Ah
		ja	short loc_645CA484
		cmp	eax, 5
		jz	loc_645CA8C9
		cmp	eax, 5
		ja	short loc_645CA45B
		cmp	eax, 1
		jz	loc_645CA8AB
		cmp	eax, 1
		jb	loc_645CA8A1
		cmp	eax, 2
		jz	loc_645CA8B5
		cmp	eax, 3
		jz	loc_645CA8BF
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA45B:				; CODE XREF: pkcs11h_getMessage+48j
		cmp	eax, 7
		jz	loc_645CA8DD
		cmp	eax, 7
		jb	loc_645CA8D3
		cmp	eax, 8
		jz	loc_645CA8E7
		cmp	eax, 9
		jz	loc_645CA8F1
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA484:				; CODE XREF: pkcs11h_getMessage+3Aj
		cmp	eax, 20h
		jz	loc_645CA92D
		cmp	eax, 20h
		ja	short loc_645CA4C5
		cmp	eax, 11h
		jz	loc_645CA90F
		cmp	eax, 11h
		ja	short loc_645CA4AE
		cmp	eax, 10h
		jz	loc_645CA905
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA4AE:				; CODE XREF: pkcs11h_getMessage+B6j
		cmp	eax, 12h
		jz	loc_645CA919
		cmp	eax, 13h
		jz	loc_645CA923
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA4C5:				; CODE XREF: pkcs11h_getMessage+A8j
		cmp	eax, 31h
		jz	loc_645CA94B
		cmp	eax, 31h
		ja	short loc_645CA4EA
		cmp	eax, 21h
		jz	loc_645CA937
		cmp	eax, 30h
		jz	loc_645CA941
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA4EA:				; CODE XREF: pkcs11h_getMessage+E9j
		cmp	eax, 32h
		jz	loc_645CA955
		cmp	eax, 40h
		jz	loc_645CA95F
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA501:				; CODE XREF: pkcs11h_getMessage+28j
		cmp	eax, 68h
		jz	loc_645CA9D7
		cmp	eax, 68h
		ja	short loc_645CA58C
		cmp	eax, 62h
		jz	loc_645CA99B
		cmp	eax, 62h
		ja	short loc_645CA550
		cmp	eax, 51h
		jz	loc_645CA97D
		cmp	eax, 51h
		ja	short loc_645CA539
		cmp	eax, 50h
		jz	loc_645CA973
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA539:				; CODE XREF: pkcs11h_getMessage+141j
		cmp	eax, 54h
		jz	loc_645CA987
		cmp	eax, 60h
		jz	loc_645CA991
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA550:				; CODE XREF: pkcs11h_getMessage+133j
		cmp	eax, 65h
		jz	loc_645CA9B9
		cmp	eax, 65h
		ja	short loc_645CA575
		cmp	eax, 63h
		jz	loc_645CA9A5
		cmp	eax, 64h
		jz	loc_645CA9AF
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA575:				; CODE XREF: pkcs11h_getMessage+174j
		cmp	eax, 66h
		jz	loc_645CA9C3
		cmp	eax, 67h
		jz	loc_645CA9CD
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA58C:				; CODE XREF: pkcs11h_getMessage+125j
		cmp	eax, 82h
		jz	loc_645CAA09
		cmp	eax, 82h
		ja	short loc_645CA5C7
		cmp	eax, 6Ah
		jz	loc_645CA9EB
		cmp	eax, 6Ah
		jb	loc_645CA9E1
		cmp	eax, 70h
		jz	loc_645CA9F5
		cmp	eax, 71h
		jz	loc_645CA9FF
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA5C7:				; CODE XREF: pkcs11h_getMessage+1B4j
		cmp	eax, 0A0h
		jz	loc_645CAA27
		cmp	eax, 0A0h
		ja	short loc_645CA5F4
		cmp	eax, 90h
		jz	loc_645CAA13
		cmp	eax, 91h
		jz	loc_645CAA1D
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA5F4:				; CODE XREF: pkcs11h_getMessage+1EFj
		cmp	eax, 0A1h
		jz	loc_645CAA31
		cmp	eax, 0A2h
		jz	loc_645CAA3B
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA60F:				; CODE XREF: pkcs11h_getMessage+16j
		cmp	eax, 102h
		jz	loc_645CAB21
		cmp	eax, 102h
		ja	loc_645CA769
		cmp	eax, 0C1h
		jz	loc_645CAAB3
		cmp	eax, 0C1h
		ja	loc_645CA6D2
		cmp	eax, 0B4h
		jz	loc_645CAA77
		cmp	eax, 0B4h
		ja	short loc_645CA68A
		cmp	eax, 0B0h
		jz	loc_645CAA59
		cmp	eax, 0B0h
		ja	short loc_645CA66F
		cmp	eax, 0A4h
		jz	loc_645CAA4F
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA66F:				; CODE XREF: pkcs11h_getMessage+275j
		cmp	eax, 0B1h
		jz	loc_645CAA63
		cmp	eax, 0B3h
		jz	loc_645CAA6D
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA68A:				; CODE XREF: pkcs11h_getMessage+263j
		cmp	eax, 0B7h
		jz	loc_645CAA95
		cmp	eax, 0B7h
		ja	short loc_645CA6B7
		cmp	eax, 0B5h
		jz	loc_645CAA81
		cmp	eax, 0B6h
		jz	loc_645CAA8B
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA6B7:				; CODE XREF: pkcs11h_getMessage+2B2j
		cmp	eax, 0B8h
		jz	loc_645CAA9F
		cmp	eax, 0C0h
		jz	loc_645CAAA9
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA6D2:				; CODE XREF: pkcs11h_getMessage+24Dj
		cmp	eax, 0E2h
		jz	loc_645CAAE5
		cmp	eax, 0E2h
		ja	short loc_645CA721
		cmp	eax, 0D1h
		jz	loc_645CAAC7
		cmp	eax, 0D1h
		ja	short loc_645CA706
		cmp	eax, 0D0h
		jz	loc_645CAABD
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA706:				; CODE XREF: pkcs11h_getMessage+30Cj
		cmp	eax, 0E0h
		jz	loc_645CAAD1
		cmp	eax, 0E1h
		jz	loc_645CAADB
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA721:				; CODE XREF: pkcs11h_getMessage+2FAj
		cmp	eax, 0F2h
		jz	loc_645CAB03
		cmp	eax, 0F2h
		ja	short loc_645CA74E
		cmp	eax, 0F0h
		jz	loc_645CAAEF
		cmp	eax, 0F1h
		jz	loc_645CAAF9
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA74E:				; CODE XREF: pkcs11h_getMessage+349j
		cmp	eax, 100h
		jz	loc_645CAB0D
		cmp	eax, 101h
		jz	loc_645CAB17
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA769:				; CODE XREF: pkcs11h_getMessage+237j
		cmp	eax, 130h
		jz	loc_645CAB7A
		cmp	eax, 130h
		ja	loc_645CA80A
		cmp	eax, 112h
		jz	loc_645CAB50
		cmp	eax, 112h
		ja	short loc_645CA7C2
		cmp	eax, 104h
		jz	loc_645CAB35
		cmp	eax, 104h
		jb	loc_645CAB2B
		cmp	eax, 105h
		jz	loc_645CAB3F
		cmp	eax, 110h
		jz	loc_645CAB49
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA7C2:				; CODE XREF: pkcs11h_getMessage+3A7j
		cmp	eax, 115h
		jz	loc_645CAB65
		cmp	eax, 115h
		ja	short loc_645CA7EF
		cmp	eax, 113h
		jz	loc_645CAB57
		cmp	eax, 114h
		jz	loc_645CAB5E
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA7EF:				; CODE XREF: pkcs11h_getMessage+3EAj
		cmp	eax, 120h
		jz	loc_645CAB6C
		cmp	eax, 121h
		jz	loc_645CAB73
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA80A:				; CODE XREF: pkcs11h_getMessage+391j
		cmp	eax, 190h
		jz	loc_645CAB9D
		cmp	eax, 190h
		ja	short loc_645CA859
		cmp	eax, 160h
		jz	loc_645CAB88
		cmp	eax, 160h
		ja	short loc_645CA83E
		cmp	eax, 150h
		jz	loc_645CAB81
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA83E:				; CODE XREF: pkcs11h_getMessage+444j
		cmp	eax, 170h
		jz	loc_645CAB8F
		cmp	eax, 180h
		jz	loc_645CAB96
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA859:				; CODE XREF: pkcs11h_getMessage+432j
		cmp	eax, 1A1h
		jz	loc_645CABB2
		cmp	eax, 1A1h
		ja	short loc_645CA886
		cmp	eax, 191h
		jz	loc_645CABA4
		cmp	eax, 1A0h
		jz	loc_645CABAB
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA886:				; CODE XREF: pkcs11h_getMessage+481j
		cmp	eax, 200h
		jz	loc_645CABB9
		cmp	eax, 80000000h
		jz	loc_645CABC0
		jmp	loc_645CABC7
; ---------------------------------------------------------------------------

loc_645CA8A1:				; CODE XREF: pkcs11h_getMessage+56j
		mov	eax, offset aCkr_ok ; "CKR_OK"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA8AB:				; CODE XREF: pkcs11h_getMessage+4Dj
		mov	eax, offset aCkr_cancel	; "CKR_CANCEL"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA8B5:				; CODE XREF: pkcs11h_getMessage+5Fj
		mov	eax, offset aCkr_host_memor ; "CKR_HOST_MEMORY"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA8BF:				; CODE XREF: pkcs11h_getMessage+68j
		mov	eax, offset aCkr_slot_id_in ; "CKR_SLOT_ID_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA8C9:				; CODE XREF: pkcs11h_getMessage+3Fj
		mov	eax, offset aCkr_general_er ; "CKR_GENERAL_ERROR"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA8D3:				; CODE XREF: pkcs11h_getMessage+7Fj
		mov	eax, offset aCkr_function_f ; "CKR_FUNCTION_FAILED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA8DD:				; CODE XREF: pkcs11h_getMessage+76j
		mov	eax, offset aCkr_arguments_ ; "CKR_ARGUMENTS_BAD"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA8E7:				; CODE XREF: pkcs11h_getMessage+88j
		mov	eax, offset aCkr_no_event ; "CKR_NO_EVENT"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA8F1:				; CODE XREF: pkcs11h_getMessage+91j
		mov	eax, offset aCkr_need_to_cr ; "CKR_NEED_TO_CREATE_THREADS"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA8FB:				; CODE XREF: pkcs11h_getMessage+31j
		mov	eax, offset aCkr_cant_lock ; "CKR_CANT_LOCK"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA905:				; CODE XREF: pkcs11h_getMessage+BBj
		mov	eax, offset aCkr_attribute_ ; "CKR_ATTRIBUTE_READ_ONLY"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA90F:				; CODE XREF: pkcs11h_getMessage+ADj
		mov	eax, offset aCkr_attribut_0 ; "CKR_ATTRIBUTE_SENSITIVE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA919:				; CODE XREF: pkcs11h_getMessage+C9j
		mov	eax, offset aCkr_attribut_1 ; "CKR_ATTRIBUTE_TYPE_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA923:				; CODE XREF: pkcs11h_getMessage+D2j
		mov	eax, offset aCkr_attribut_2 ; "CKR_ATTRIBUTE_VALUE_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA92D:				; CODE XREF: pkcs11h_getMessage+9Fj
		mov	eax, offset aCkr_data_inval ; "CKR_DATA_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA937:				; CODE XREF: pkcs11h_getMessage+EEj
		mov	eax, offset aCkr_data_len_r ; "CKR_DATA_LEN_RANGE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA941:				; CODE XREF: pkcs11h_getMessage+F7j
		mov	eax, offset aCkr_device_err ; "CKR_DEVICE_ERROR"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA94B:				; CODE XREF: pkcs11h_getMessage+E0j
		mov	eax, offset aCkr_device_mem ; "CKR_DEVICE_MEMORY"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA955:				; CODE XREF: pkcs11h_getMessage+105j
		mov	eax, offset aCkr_device_rem ; "CKR_DEVICE_REMOVED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA95F:				; CODE XREF: pkcs11h_getMessage+10Ej
		mov	eax, offset aCkr_encrypted_ ; "CKR_ENCRYPTED_DATA_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA969:				; CODE XREF: pkcs11h_getMessage+1Fj
		mov	eax, offset aCkr_encrypte_0 ; "CKR_ENCRYPTED_DATA_LEN_RANGE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA973:				; CODE XREF: pkcs11h_getMessage+146j
		mov	eax, offset aCkr_function_c ; "CKR_FUNCTION_CANCELED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA97D:				; CODE XREF: pkcs11h_getMessage+138j
		mov	eax, offset aCkr_function_n ; "CKR_FUNCTION_NOT_PARALLEL"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA987:				; CODE XREF: pkcs11h_getMessage+154j
		mov	eax, offset aCkr_function_0 ; "CKR_FUNCTION_NOT_SUPPORTED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA991:				; CODE XREF: pkcs11h_getMessage+15Dj
		mov	eax, offset aCkr_key_handle ; "CKR_KEY_HANDLE_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA99B:				; CODE XREF: pkcs11h_getMessage+12Aj
		mov	eax, offset aCkr_key_size_r ; "CKR_KEY_SIZE_RANGE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA9A5:				; CODE XREF: pkcs11h_getMessage+179j
		mov	eax, offset aCkr_key_type_i ; "CKR_KEY_TYPE_INCONSISTENT"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA9AF:				; CODE XREF: pkcs11h_getMessage+182j
		mov	eax, offset aCkr_key_not_ne ; "CKR_KEY_NOT_NEEDED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA9B9:				; CODE XREF: pkcs11h_getMessage+16Bj
		mov	eax, offset aCkr_key_change ; "CKR_KEY_CHANGED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA9C3:				; CODE XREF: pkcs11h_getMessage+190j
		mov	eax, offset aCkr_key_needed ; "CKR_KEY_NEEDED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA9CD:				; CODE XREF: pkcs11h_getMessage+199j
		mov	eax, offset aCkr_key_indige ; "CKR_KEY_INDIGESTIBLE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA9D7:				; CODE XREF: pkcs11h_getMessage+11Cj
		mov	eax, offset aCkr_key_functi ; "CKR_KEY_FUNCTION_NOT_PERMITTED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA9E1:				; CODE XREF: pkcs11h_getMessage+1C2j
		mov	eax, offset aCkr_key_not_wr ; "CKR_KEY_NOT_WRAPPABLE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA9EB:				; CODE XREF: pkcs11h_getMessage+1B9j
		mov	eax, offset aCkr_key_unextr ; "CKR_KEY_UNEXTRACTABLE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA9F5:				; CODE XREF: pkcs11h_getMessage+1CBj
		mov	eax, offset aCkr_mechanism_ ; "CKR_MECHANISM_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CA9FF:				; CODE XREF: pkcs11h_getMessage+1D4j
		mov	eax, offset aCkr_mechanis_0 ; "CKR_MECHANISM_PARAM_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA09:				; CODE XREF: pkcs11h_getMessage+1A9j
		mov	eax, offset aCkr_object_han ; "CKR_OBJECT_HANDLE_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA13:				; CODE XREF: pkcs11h_getMessage+1F6j
		mov	eax, offset aCkr_operation_ ; "CKR_OPERATION_ACTIVE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA1D:				; CODE XREF: pkcs11h_getMessage+201j
		mov	eax, offset aCkr_operatio_0 ; "CKR_OPERATION_NOT_INITIALIZED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA27:				; CODE XREF: pkcs11h_getMessage+1E4j
		mov	eax, offset aCkr_pin_incorr ; "CKR_PIN_INCORRECT"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA31:				; CODE XREF: pkcs11h_getMessage+211j
		mov	eax, offset aCkr_pin_invali ; "CKR_PIN_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA3B:				; CODE XREF: pkcs11h_getMessage+21Cj
		mov	eax, offset aCkr_pin_len_ra ; "CKR_PIN_LEN_RANGE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA45:				; CODE XREF: pkcs11h_getMessage+Bj
		mov	eax, offset aCkr_pin_expire ; "CKR_PIN_EXPIRED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA4F:				; CODE XREF: pkcs11h_getMessage+27Cj
		mov	eax, offset aCkr_pin_locked ; "CKR_PIN_LOCKED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA59:				; CODE XREF: pkcs11h_getMessage+26Aj
		mov	eax, offset aCkr_session_cl ; "CKR_SESSION_CLOSED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA63:				; CODE XREF: pkcs11h_getMessage+28Cj
		mov	eax, offset aCkr_session_co ; "CKR_SESSION_COUNT"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA6D:				; CODE XREF: pkcs11h_getMessage+297j
		mov	eax, offset aCkr_session_ha ; "CKR_SESSION_HANDLE_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA77:				; CODE XREF: pkcs11h_getMessage+258j
		mov	eax, offset aCkr_session_pa ; "CKR_SESSION_PARALLEL_NOT_SUPPORTED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA81:				; CODE XREF: pkcs11h_getMessage+2B9j
		mov	eax, offset aCkr_session_re ; "CKR_SESSION_READ_ONLY"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA8B:				; CODE XREF: pkcs11h_getMessage+2C4j
		mov	eax, offset aCkr_session_ex ; "CKR_SESSION_EXISTS"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA95:				; CODE XREF: pkcs11h_getMessage+2A7j
		mov	eax, offset aCkr_session__0 ; "CKR_SESSION_READ_ONLY_EXISTS"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAA9F:				; CODE XREF: pkcs11h_getMessage+2D4j
		mov	eax, offset aCkr_session__1 ; "CKR_SESSION_READ_WRITE_SO_EXISTS"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAAA9:				; CODE XREF: pkcs11h_getMessage+2DFj
		mov	eax, offset aCkr_signature_ ; "CKR_SIGNATURE_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAAB3:				; CODE XREF: pkcs11h_getMessage+242j
		mov	eax, offset aCkr_signatur_0 ; "CKR_SIGNATURE_LEN_RANGE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAABD:				; CODE XREF: pkcs11h_getMessage+313j
		mov	eax, offset aCkr_template_i ; "CKR_TEMPLATE_INCOMPLETE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAAC7:				; CODE XREF: pkcs11h_getMessage+301j
		mov	eax, offset aCkr_template_0 ; "CKR_TEMPLATE_INCONSISTENT"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAAD1:				; CODE XREF: pkcs11h_getMessage+323j
		mov	eax, offset aCkr_token_not_ ; "CKR_TOKEN_NOT_PRESENT"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAADB:				; CODE XREF: pkcs11h_getMessage+32Ej
		mov	eax, offset aCkr_token_no_0 ; "CKR_TOKEN_NOT_RECOGNIZED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAAE5:				; CODE XREF: pkcs11h_getMessage+2EFj
		mov	eax, offset aCkr_token_writ ; "CKR_TOKEN_WRITE_PROTECTED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAAEF:				; CODE XREF: pkcs11h_getMessage+350j
		mov	eax, offset aCkr_unwrapping ; "CKR_UNWRAPPING_KEY_HANDLE_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAAF9:				; CODE XREF: pkcs11h_getMessage+35Bj
		mov	eax, offset aCkr_unwrappi_0 ; "CKR_UNWRAPPING_KEY_SIZE_RANGE"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB03:				; CODE XREF: pkcs11h_getMessage+33Ej
		mov	eax, offset aCkr_unwrappi_1 ; "CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB0D:				; CODE XREF: pkcs11h_getMessage+36Bj
		mov	eax, offset aCkr_user_alrea ; "CKR_USER_ALREADY_LOGGED_IN"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB17:				; CODE XREF: pkcs11h_getMessage+376j
		mov	eax, offset aCkr_user_not_l ; "CKR_USER_NOT_LOGGED_IN"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB21:				; CODE XREF: pkcs11h_getMessage+22Cj
		mov	eax, offset aCkr_user_pin_n ; "CKR_USER_PIN_NOT_INITIALIZED"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB2B:				; CODE XREF: pkcs11h_getMessage+3B9j
		mov	eax, offset aCkr_user_type_ ; "CKR_USER_TYPE_INVALID"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB35:				; CODE XREF: pkcs11h_getMessage+3AEj
		mov	eax, offset aCkr_user_anoth ; "CKR_USER_ANOTHER_ALREADY_LOGGED_IN"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB3F:				; CODE XREF: pkcs11h_getMessage+3C4j
		mov	eax, offset aCkr_user_too_m ; "CKR_USER_TOO_MANY_TYPES"
		jmp	loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB49:				; CODE XREF: pkcs11h_getMessage+3CFj
		mov	eax, offset aCkr_wrapped_ke ; "CKR_WRAPPED_KEY_INVALID"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB50:				; CODE XREF: pkcs11h_getMessage+39Cj
		mov	eax, offset aCkr_wrapped__0 ; "CKR_WRAPPED_KEY_LEN_RANGE"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB57:				; CODE XREF: pkcs11h_getMessage+3F1j
		mov	eax, offset aCkr_wrapping_k ; "CKR_WRAPPING_KEY_HANDLE_INVALID"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB5E:				; CODE XREF: pkcs11h_getMessage+3FCj
		mov	eax, offset aCkr_wrapping_0 ; "CKR_WRAPPING_KEY_SIZE_RANGE"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB65:				; CODE XREF: pkcs11h_getMessage+3DFj
		mov	eax, offset aCkr_wrapping_1 ; "CKR_WRAPPING_KEY_TYPE_INCONSISTENT"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB6C:				; CODE XREF: pkcs11h_getMessage+40Cj
		mov	eax, offset aCkr_random_see ; "CKR_RANDOM_SEED_NOT_SUPPORTED"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB73:				; CODE XREF: pkcs11h_getMessage+417j
		mov	eax, offset aCkr_random_no_ ; "CKR_RANDOM_NO_RNG"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB7A:				; CODE XREF: pkcs11h_getMessage+386j
		mov	eax, offset aCkr_domain_par ; "CKR_DOMAIN_PARAMS_INVALID"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB81:				; CODE XREF: pkcs11h_getMessage+44Bj
		mov	eax, offset aCkr_buffer_too ; "CKR_BUFFER_TOO_SMALL"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB88:				; CODE XREF: pkcs11h_getMessage+439j
		mov	eax, offset aCkr_saved_stat ; "CKR_SAVED_STATE_INVALID"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB8F:				; CODE XREF: pkcs11h_getMessage+45Bj
		mov	eax, offset aCkr_informatio ; "CKR_INFORMATION_SENSITIVE"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB96:				; CODE XREF: pkcs11h_getMessage+466j
		mov	eax, offset aCkr_state_unsa ; "CKR_STATE_UNSAVEABLE"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CAB9D:				; CODE XREF: pkcs11h_getMessage+427j
		mov	eax, offset aCkr_cryptoki_n ; "CKR_CRYPTOKI_NOT_INITIALIZED"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CABA4:				; CODE XREF: pkcs11h_getMessage+488j
		mov	eax, offset aCkr_cryptoki_a ; "CKR_CRYPTOKI_ALREADY_INITIALIZED"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CABAB:				; CODE XREF: pkcs11h_getMessage+493j
		mov	eax, offset aCkr_mutex_bad ; "CKR_MUTEX_BAD"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CABB2:				; CODE XREF: pkcs11h_getMessage+476j
		mov	eax, offset aCkr_mutex_not_ ; "CKR_MUTEX_NOT_LOCKED"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CABB9:				; CODE XREF: pkcs11h_getMessage+4A3j
		mov	eax, offset aCkr_function_r ; "CKR_FUNCTION_REJECTED"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CABC0:				; CODE XREF: pkcs11h_getMessage+4AEj
		mov	eax, offset aCkr_vendor_def ; "CKR_VENDOR_DEFINED"
		jmp	short loc_645CABCC
; ---------------------------------------------------------------------------

loc_645CABC7:				; CODE XREF: pkcs11h_getMessage+6Ej
					; pkcs11h_getMessage+97j ...
		mov	eax, offset aUnknownPkcs11E ; "Unknown PKCS#11 error"

loc_645CABCC:				; CODE XREF: pkcs11h_getMessage+4BEj
					; pkcs11h_getMessage+4C8j ...
		pop	ebp
		retn
pkcs11h_getMessage endp

; Exported entry  39. pkcs11h_getVersion

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_getVersion
pkcs11h_getVersion proc	near
		push	ebp
		mov	ebp, esp
		mov	eax, 10B00h
		pop	ebp
		retn
pkcs11h_getVersion endp

; Exported entry  36. pkcs11h_getFeatures

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_getFeatures
pkcs11h_getFeatures proc near

var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	[ebp+var_4], 3F9h
		mov	eax, [ebp+var_4]
		leave
		retn
pkcs11h_getFeatures endp

; Exported entry  40. pkcs11h_initialize

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_initialize
pkcs11h_initialize proc	near

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 6
		mov	[ebp+var_1C], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CAC31
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_49 ; "PKCS#11: pkcs11h_initialize	entry"
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645CAC31:				; CODE XREF: pkcs11h_initialize+31j
		call	pkcs11h_terminate
		mov	[esp+38h+var_34], 58h ;	size_t
		lea	eax, [ebp+var_1C]
		mov	[esp+38h+var_38], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645CAC57
		jmp	loc_645CADC2
; ---------------------------------------------------------------------------

loc_645CAC57:				; CODE XREF: pkcs11h_initialize+66j
		mov	eax, ds:dword_645D8008
		test	eax, eax
		jnz	short loc_645CAC7A
		mov	[esp+38h+var_38], 0
		call	pkcs11h_engine_setCrypto
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645CAC7A
		jmp	loc_645CADC2
; ---------------------------------------------------------------------------

loc_645CAC7A:				; CODE XREF: pkcs11h_initialize+74j
					; pkcs11h_initialize+89j
		mov	eax, ds:dword_645D8008
		mov	edx, ds:dword_645D8004
		mov	[esp+38h+var_38], edx
		call	eax ; dword_645D8008
		test	eax, eax
		jnz	short loc_645CACB7
		mov	eax, dword_645D1024
		test	eax, eax
		jz	short loc_645CACAB
		mov	[esp+38h+var_34], offset aPkcs11CannotIn ; "PKCS#11: Cannot initialize crypto engin"...
		mov	[esp+38h+var_38], 1
		call	sub_645CBF0E

loc_645CACAB:				; CODE XREF: pkcs11h_initialize+ABj
		mov	[ebp+var_18], 6
		jmp	loc_645CADC2
; ---------------------------------------------------------------------------

loc_645CACB7:				; CODE XREF: pkcs11h_initialize+A2j
		mov	eax, [ebp+var_1C]
		add	eax, 38h
		mov	[esp+38h+var_38], eax
		call	sub_645C2463
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645CACD3
		jmp	loc_645CADC2
; ---------------------------------------------------------------------------

loc_645CACD3:				; CODE XREF: pkcs11h_initialize+E2j
		mov	[ebp+var_C], 1
		mov	eax, [ebp+var_1C]
		add	eax, 40h
		mov	[esp+38h+var_38], eax
		call	sub_645C2463
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645CACF6
		jmp	loc_645CADC2
; ---------------------------------------------------------------------------

loc_645CACF6:				; CODE XREF: pkcs11h_initialize+105j
		mov	[ebp+var_10], 1
		mov	eax, [ebp+var_1C]
		add	eax, 3Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C2463
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645CAD19
		jmp	loc_645CADC2
; ---------------------------------------------------------------------------

loc_645CAD19:				; CODE XREF: pkcs11h_initialize+128j
		mov	[ebp+var_14], 1
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+34h], 3
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+30h], 1
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+4], 0FFFFFFFFh
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CAD5C
		mov	[esp+38h+var_34], offset aPkcs11Initiali ; "PKCS#11: Initializing openssl"
		mov	[esp+38h+var_38], 4
		call	sub_645CBF0E

loc_645CAD5C:				; CODE XREF: pkcs11h_initialize+15Cj
		call	sub_645CE6CD
		test	eax, eax
		jnz	short loc_645CAD67
		jmp	short loc_645CADC2
; ---------------------------------------------------------------------------

loc_645CAD67:				; CODE XREF: pkcs11h_initialize+179j
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax], 1
		mov	eax, [ebp+var_1C]
		mov	ds:dword_645D8030, eax
		mov	[ebp+var_1C], 0
		mov	[esp+38h+var_34], 0
		mov	[esp+38h+var_38], offset sub_645CBFB9
		call	pkcs11h_setLogHook
		mov	[esp+38h+var_34], 0
		mov	[esp+38h+var_38], offset sub_645CBFBE
		call	pkcs11h_setTokenPromptHook
		mov	[esp+38h+var_34], 0
		mov	[esp+38h+var_38], offset sub_645CC023
		call	pkcs11h_setPINPromptHook
		mov	[ebp+var_18], 0

loc_645CADC2:				; CODE XREF: pkcs11h_initialize+68j
					; pkcs11h_initialize+8Bj ...
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_645CAE2C
		cmp	[ebp+var_C], 0
		jz	short loc_645CADE4
		mov	eax, [ebp+var_1C]
		add	eax, 38h
		mov	[esp+38h+var_38], eax
		call	sub_645C252D
		mov	[ebp+var_C], 0

loc_645CADE4:				; CODE XREF: pkcs11h_initialize+1E3j
		cmp	[ebp+var_10], 0
		jz	short loc_645CADFF
		mov	eax, [ebp+var_1C]
		add	eax, 40h
		mov	[esp+38h+var_38], eax
		call	sub_645C252D
		mov	[ebp+var_10], 0

loc_645CADFF:				; CODE XREF: pkcs11h_initialize+1FEj
		cmp	[ebp+var_14], 0
		jz	short loc_645CAE1A
		mov	eax, [ebp+var_1C]
		add	eax, 3Ch
		mov	[esp+38h+var_38], eax
		call	sub_645C252D
		mov	[ebp+var_14], 0

loc_645CAE1A:				; CODE XREF: pkcs11h_initialize+219j
		lea	eax, [ebp+var_1C]
		mov	[esp+38h+var_38], eax
		call	sub_645C156B
		mov	[ebp+var_1C], 0

loc_645CAE2C:				; CODE XREF: pkcs11h_initialize+1DDj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CAE60
		mov	eax, [ebp+var_18]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_50 ; "PKCS#11: pkcs11h_initialize	return rv=%"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645CAE60:				; CODE XREF: pkcs11h_initialize+24Aj
		mov	eax, [ebp+var_18]
		leave
		retn
pkcs11h_initialize endp

; Exported entry  61. pkcs11h_terminate

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_terminate
pkcs11h_terminate proc near		; CODE XREF: pkcs11h_initialize:loc_645CAC31p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CAE89
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_51 ; "PKCS#11: pkcs11h_terminate entry"
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CAE89:				; CODE XREF: pkcs11h_terminate+Ej
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jz	loc_645CB0EF
		mov	[ebp+var_C], 0
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CAEBB
		mov	[esp+28h+var_24], offset aPkcs11Terminat ; "PKCS#11: Terminating openssl"
		mov	[esp+28h+var_28], 4
		call	sub_645CBF0E

loc_645CAEBB:				; CODE XREF: pkcs11h_terminate+40j
		call	sub_645CE7EE
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CAEDE
		mov	[esp+28h+var_24], offset aPkcs11Removing ; "PKCS#11: Removing providers"
		mov	[esp+28h+var_28], 4
		call	sub_645CBF0E

loc_645CAEDE:				; CODE XREF: pkcs11h_terminate+63j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_C], eax
		jmp	short loc_645CAF01
; ---------------------------------------------------------------------------

loc_645CAEEB:				; CODE XREF: pkcs11h_terminate+A0j
		mov	eax, [ebp+var_C]
		add	eax, 8
		mov	[esp+28h+var_28], eax ;	char *
		call	pkcs11h_removeProvider
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[ebp+var_C], eax

loc_645CAF01:				; CODE XREF: pkcs11h_terminate+84j
		cmp	[ebp+var_C], 0
		jnz	short loc_645CAEEB
		mov	eax, ds:dword_645D8030
		add	eax, 40h
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	eax, ds:dword_645D8030
		add	eax, 3Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	eax, ds:dword_645D8030
		add	eax, 38h
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CAF5A
		mov	[esp+28h+var_24], offset aPkcs11Releasin ; "PKCS#11: Releasing sessions"
		mov	[esp+28h+var_28], 4
		call	sub_645CBF0E
		jmp	loc_645CB010
; ---------------------------------------------------------------------------

loc_645CAF5A:				; CODE XREF: pkcs11h_terminate+DAj
		jmp	loc_645CB010
; ---------------------------------------------------------------------------

loc_645CAF5F:				; CODE XREF: pkcs11h_terminate+1B5j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+0Ch]
		mov	[ebp+var_10], eax
		mov	eax, ds:dword_645D8030
		mov	edx, ds:dword_645D8030
		mov	edx, [edx+0Ch]
		mov	edx, [edx]
		mov	[eax+0Ch], edx
		mov	eax, [ebp+var_10]
		add	eax, 2Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax+8], 0
		mov	eax, [ebp+var_10]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645CAFBD
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CAFBD
		mov	[esp+28h+var_24], offset aPkcs11WarningF ; "PKCS#11: Warning: Found session with re"...
		mov	[esp+28h+var_28], 4
		call	sub_645CBF0E

loc_645CAFBD:				; CODE XREF: pkcs11h_terminate+138j
					; pkcs11h_terminate+142j
		mov	eax, [ebp+var_10]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_645CAFDF
		mov	eax, [ebp+var_10]
		mov	eax, [eax+10h]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_token_freeTokenId
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax+10h], 0

loc_645CAFDF:				; CODE XREF: pkcs11h_terminate+160j
		mov	eax, [ebp+var_10]
		mov	eax, [eax+24h]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_certificate_freeCertificateIdList
		mov	eax, [ebp+var_10]
		mov	dword ptr [eax+0Ch], 0
		mov	eax, [ebp+var_10]
		add	eax, 2Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C252D
		lea	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	sub_645C156B

loc_645CB010:				; CODE XREF: pkcs11h_terminate+F0j
					; pkcs11h_terminate:loc_645CAF5Aj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	loc_645CAF5F
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CB03E
		mov	[esp+28h+var_24], offset aPkcs11Termin_0 ; "PKCS#11: Terminating slotevent"
		mov	[esp+28h+var_28], 4
		call	sub_645CBF0E

loc_645CB03E:				; CODE XREF: pkcs11h_terminate+1C3j
		call	sub_645CA35F
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CB061
		mov	[esp+28h+var_24], offset aPkcs11MarkingA ; "PKCS#11: Marking as	uninitialized"
		mov	[esp+28h+var_28], 4
		call	sub_645CBF0E

loc_645CB061:				; CODE XREF: pkcs11h_terminate+1E6j
		mov	eax, ds:dword_645D8030
		mov	dword ptr [eax], 0
		jmp	short loc_645CB097
; ---------------------------------------------------------------------------

loc_645CB06E:				; CODE XREF: pkcs11h_terminate+23Cj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_14], eax
		mov	eax, ds:dword_645D8030
		mov	edx, ds:dword_645D8030
		mov	edx, [edx+8]
		mov	edx, [edx]
		mov	[eax+8], edx
		lea	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax
		call	sub_645C156B

loc_645CB097:				; CODE XREF: pkcs11h_terminate+207j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_645CB06E
		mov	eax, ds:dword_645D8030
		add	eax, 38h
		mov	[esp+28h+var_28], eax
		call	sub_645C252D
		mov	eax, ds:dword_645D8030
		add	eax, 40h
		mov	[esp+28h+var_28], eax
		call	sub_645C252D
		mov	eax, ds:dword_645D8030
		add	eax, 3Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C252D
		mov	eax, ds:dword_645D800C
		mov	edx, ds:dword_645D8004
		mov	[esp+28h+var_28], edx
		call	eax ; dword_645D800C
		mov	[esp+28h+var_28], offset dword_645D8030
		call	sub_645C156B

loc_645CB0EF:				; CODE XREF: pkcs11h_terminate+2Bj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CB10D
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_52 ; "PKCS#11: pkcs11h_terminate return"
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CB10D:				; CODE XREF: pkcs11h_terminate+292j
		mov	eax, 0
		leave
		retn
pkcs11h_terminate endp

; Exported entry  54. pkcs11h_setLogLevel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_setLogLevel
pkcs11h_setLogLevel proc near

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	dword_645D1024,	eax
		pop	ebp
		retn
pkcs11h_setLogLevel endp

; Exported entry  52. pkcs11h_setForkMode

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_setForkMode
pkcs11h_setForkMode proc near
		push	ebp
		mov	ebp, esp
		mov	eax, 0
		pop	ebp
		retn
pkcs11h_setForkMode endp

; Exported entry  37. pkcs11h_getLogLevel

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_getLogLevel
pkcs11h_getLogLevel proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CB158
		mov	[esp+18h+var_10], 21Bh ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_3 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB159
; ---------------------------------------------------------------------------

loc_645CB158:				; CODE XREF: pkcs11h_getLogLevel+Dj
		nop

loc_645CB159:				; CODE XREF: pkcs11h_getLogLevel+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CB182
		mov	[esp+18h+var_10], 21Ch ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_4 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CB183
; ---------------------------------------------------------------------------

loc_645CB182:				; CODE XREF: pkcs11h_getLogLevel+37j
		nop

loc_645CB183:				; CODE XREF: pkcs11h_getLogLevel+55j
		mov	eax, dword_645D1024
		leave
		retn
pkcs11h_getLogLevel endp

; Exported entry  53. pkcs11h_setLogHook

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_setLogHook
pkcs11h_setLogHook proc	near		; CODE XREF: pkcs11h_initialize+1A4p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CB1B7
		mov	[esp+18h+var_10], 226h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_3 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB1B8
; ---------------------------------------------------------------------------

loc_645CB1B7:				; CODE XREF: pkcs11h_setLogHook+Dj
		nop

loc_645CB1B8:				; CODE XREF: pkcs11h_setLogHook+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CB1E1
		mov	[esp+18h+var_10], 227h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_4 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CB1E2
; ---------------------------------------------------------------------------

loc_645CB1E1:				; CODE XREF: pkcs11h_setLogHook+37j
		nop

loc_645CB1E2:				; CODE XREF: pkcs11h_setLogHook+55j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CB206
		mov	[esp+18h+var_10], 228h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset aHookNull ; "hook!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB207
; ---------------------------------------------------------------------------

loc_645CB206:				; CODE XREF: pkcs11h_setLogHook+5Cj
		nop

loc_645CB207:				; CODE XREF: pkcs11h_setLogHook+7Aj
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_0]
		mov	[eax+20h], edx
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_4]
		mov	[eax+10h], edx
		mov	eax, 0
		leave
		retn
pkcs11h_setLogHook endp

; Exported entry  59. pkcs11h_setSlotEventHook

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_setSlotEventHook
pkcs11h_setSlotEventHook proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CB251
		mov	[esp+18h+var_10], 235h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_3 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB252
; ---------------------------------------------------------------------------

loc_645CB251:				; CODE XREF: pkcs11h_setSlotEventHook+Dj
		nop

loc_645CB252:				; CODE XREF: pkcs11h_setSlotEventHook+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CB27B
		mov	[esp+18h+var_10], 236h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_4 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CB27C
; ---------------------------------------------------------------------------

loc_645CB27B:				; CODE XREF: pkcs11h_setSlotEventHook+37j
		nop

loc_645CB27C:				; CODE XREF: pkcs11h_setSlotEventHook+55j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CB2A0
		mov	[esp+18h+var_10], 237h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset aHookNull ; "hook!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB2A1
; ---------------------------------------------------------------------------

loc_645CB2A0:				; CODE XREF: pkcs11h_setSlotEventHook+5Cj
		nop

loc_645CB2A1:				; CODE XREF: pkcs11h_setSlotEventHook+7Aj
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_0]
		mov	[eax+24h], edx
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_4]
		mov	[eax+14h], edx
		call	sub_645CA1F0
		leave
		retn
pkcs11h_setSlotEventHook endp

; Exported entry  57. pkcs11h_setPINPromptHook

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_setPINPromptHook
pkcs11h_setPINPromptHook proc near	; CODE XREF: pkcs11h_initialize+1CCp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CB2EB
		mov	[esp+18h+var_10], 24Ah ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_3 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB2EC
; ---------------------------------------------------------------------------

loc_645CB2EB:				; CODE XREF: pkcs11h_setPINPromptHook+Dj
		nop

loc_645CB2EC:				; CODE XREF: pkcs11h_setPINPromptHook+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CB315
		mov	[esp+18h+var_10], 24Bh ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_4 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CB316
; ---------------------------------------------------------------------------

loc_645CB315:				; CODE XREF: pkcs11h_setPINPromptHook+37j
		nop

loc_645CB316:				; CODE XREF: pkcs11h_setPINPromptHook+55j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CB33A
		mov	[esp+18h+var_10], 24Ch ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset aHookNull ; "hook!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB33B
; ---------------------------------------------------------------------------

loc_645CB33A:				; CODE XREF: pkcs11h_setPINPromptHook+5Cj
		nop

loc_645CB33B:				; CODE XREF: pkcs11h_setPINPromptHook+7Aj
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_0]
		mov	[eax+2Ch], edx
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_4]
		mov	[eax+1Ch], edx
		mov	eax, 0
		leave
		retn
pkcs11h_setPINPromptHook endp

; Exported entry  60. pkcs11h_setTokenPromptHook

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_setTokenPromptHook
pkcs11h_setTokenPromptHook proc	near	; CODE XREF: pkcs11h_initialize+1B8p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CB385
		mov	[esp+18h+var_10], 259h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_3 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB386
; ---------------------------------------------------------------------------

loc_645CB385:				; CODE XREF: pkcs11h_setTokenPromptHook+Dj
		nop

loc_645CB386:				; CODE XREF: pkcs11h_setTokenPromptHook+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CB3AF
		mov	[esp+18h+var_10], 25Ah ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_4 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CB3B0
; ---------------------------------------------------------------------------

loc_645CB3AF:				; CODE XREF: pkcs11h_setTokenPromptHook+37j
		nop

loc_645CB3B0:				; CODE XREF: pkcs11h_setTokenPromptHook+55j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CB3D4
		mov	[esp+18h+var_10], 25Bh ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset aHookNull ; "hook!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB3D5
; ---------------------------------------------------------------------------

loc_645CB3D4:				; CODE XREF: pkcs11h_setTokenPromptHook+5Cj
		nop

loc_645CB3D5:				; CODE XREF: pkcs11h_setTokenPromptHook+7Aj
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_0]
		mov	[eax+28h], edx
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_4]
		mov	[eax+18h], edx
		mov	eax, 0
		leave
		retn
pkcs11h_setTokenPromptHook endp

; Exported entry  56. pkcs11h_setPINCachePeriod

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_setPINCachePeriod
pkcs11h_setPINCachePeriod proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CB41F
		mov	[esp+18h+var_10], 267h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_3 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB420
; ---------------------------------------------------------------------------

loc_645CB41F:				; CODE XREF: pkcs11h_setPINCachePeriod+Dj
		nop

loc_645CB420:				; CODE XREF: pkcs11h_setPINCachePeriod+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CB449
		mov	[esp+18h+var_10], 268h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_4 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CB44A
; ---------------------------------------------------------------------------

loc_645CB449:				; CODE XREF: pkcs11h_setPINCachePeriod+37j
		nop

loc_645CB44A:				; CODE XREF: pkcs11h_setPINCachePeriod+55j
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_0]
		mov	[eax+4], edx
		mov	eax, 0
		leave
		retn
pkcs11h_setPINCachePeriod endp

; Exported entry  55. pkcs11h_setMaxLoginRetries

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_setMaxLoginRetries
pkcs11h_setMaxLoginRetries proc	near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CB489
		mov	[esp+18h+var_10], 273h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_3 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB48A
; ---------------------------------------------------------------------------

loc_645CB489:				; CODE XREF: pkcs11h_setMaxLoginRetries+Dj
		nop

loc_645CB48A:				; CODE XREF: pkcs11h_setMaxLoginRetries+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CB4B3
		mov	[esp+18h+var_10], 274h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_4 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CB4B4
; ---------------------------------------------------------------------------

loc_645CB4B3:				; CODE XREF: pkcs11h_setMaxLoginRetries+37j
		nop

loc_645CB4B4:				; CODE XREF: pkcs11h_setMaxLoginRetries+55j
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_0]
		mov	[eax+34h], edx
		mov	eax, 0
		leave
		retn
pkcs11h_setMaxLoginRetries endp

; Exported entry  58. pkcs11h_setProtectedAuthentication

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_setProtectedAuthentication
pkcs11h_setProtectedAuthentication proc	near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CB4F3
		mov	[esp+18h+var_10], 27Fh ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_3 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB4F4
; ---------------------------------------------------------------------------

loc_645CB4F3:				; CODE XREF: pkcs11h_setProtectedAuthentication+Dj
		nop

loc_645CB4F4:				; CODE XREF: pkcs11h_setProtectedAuthentication+2Bj
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CB51D
		mov	[esp+18h+var_10], 280h ; int
		mov	[esp+18h+var_14], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+18h+var_18], offset a_g_pkcs11h_d_4 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CB51E
; ---------------------------------------------------------------------------

loc_645CB51D:				; CODE XREF: pkcs11h_setProtectedAuthentication+37j
		nop

loc_645CB51E:				; CODE XREF: pkcs11h_setProtectedAuthentication+55j
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+arg_0]
		mov	[eax+30h], edx
		mov	eax, 0
		leave
		retn
pkcs11h_setProtectedAuthentication endp

; Exported entry   1. pkcs11h_addProvider

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_addProvider(char *, char *Str, int, int, int, int, int)
		public pkcs11h_addProvider
pkcs11h_addProvider proc near

Dest		= dword	ptr -0B8h
Source		= dword	ptr -0B4h
Count		= dword	ptr -0B0h
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_84		= byte ptr -84h
Dst		= byte ptr -3Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
Str		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 0B4h
		mov	[ebp+var_C], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CB58B
		mov	[esp+0B8h+Count], 2A6h ; int
		mov	[esp+0B8h+Source], offset aPkcs11hCore_c ; "pkcs11h-core.c"
		mov	[esp+0B8h+Dest], offset	a_g_pkcs11h_d_3	; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB58C
; ---------------------------------------------------------------------------

loc_645CB58B:				; CODE XREF: pkcs11h_addProvider+3Bj
		nop

loc_645CB58C:				; CODE XREF: pkcs11h_addProvider+59j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CB5B5
		mov	[esp+0B8h+Count], 2A7h ; int
		mov	[esp+0B8h+Source], offset aPkcs11hCore_c ; "pkcs11h-core.c"
		mov	[esp+0B8h+Dest], offset	a_g_pkcs11h_d_4	; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CB5B6
; ---------------------------------------------------------------------------

loc_645CB5B5:				; CODE XREF: pkcs11h_addProvider+65j
		nop

loc_645CB5B6:				; CODE XREF: pkcs11h_addProvider+83j
		cmp	[ebp+Str], 0
		jnz	short loc_645CB5DA
		mov	[esp+0B8h+Count], 2A8h ; int
		mov	[esp+0B8h+Source], offset aPkcs11hCore_c ; "pkcs11h-core.c"
		mov	[esp+0B8h+Dest], offset	aProvider_locat	; "provider_location!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CB5DB
; ---------------------------------------------------------------------------

loc_645CB5DA:				; CODE XREF: pkcs11h_addProvider+8Aj
		nop

loc_645CB5DB:				; CODE XREF: pkcs11h_addProvider+A8j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CB639
		cmp	[ebp+arg_18], 0
		setnz	al
		movzx	edx, al
		cmp	[ebp+arg_8], 0
		setnz	al
		movzx	eax, al
		mov	[esp+0B8h+var_98], edx
		mov	edx, [ebp+arg_C]
		mov	[esp+0B8h+var_9C], edx
		mov	[esp+0B8h+var_A0], eax
		mov	eax, [ebp+Str]
		mov	[esp+0B8h+var_A4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+var_A8], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+0B8h+var_AC], eax
		mov	[esp+0B8h+Count], offset a1_11 ; "1.11"
		mov	[esp+0B8h+Source], offset aPkcs11Pkcs1_53 ; "PKCS#11: pkcs11h_addProvider entry	vers"...
		mov	[esp+0B8h+Dest], 5
		call	sub_645CBF0E

loc_645CB639:				; CODE XREF: pkcs11h_addProvider+B3j
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CB665
		mov	eax, [ebp+Str]
		mov	[esp+0B8h+var_AC], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+Count], eax
		mov	[esp+0B8h+Source], offset aPkcs11AddingPr ; "PKCS#11: Adding provider '%s'-'%s'"
		mov	[esp+0B8h+Dest], 4
		call	sub_645CBF0E

loc_645CB665:				; CODE XREF: pkcs11h_addProvider+111j
		mov	eax, ds:dword_645D8030
		add	eax, 38h
		mov	[esp+0B8h+Dest], eax
		call	sub_645C24B4
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CB683
		jmp	loc_645CB931
; ---------------------------------------------------------------------------

loc_645CB683:				; CODE XREF: pkcs11h_addProvider+14Cj
		mov	[ebp+var_C], 1
		mov	[esp+0B8h+Source], 454h	; size_t
		lea	eax, [ebp+var_24]
		mov	[esp+0B8h+Dest], eax ; int
		call	sub_645C14C0
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CB6AB
		jmp	loc_645CB931
; ---------------------------------------------------------------------------

loc_645CB6AB:				; CODE XREF: pkcs11h_addProvider+174j
		mov	eax, [ebp+var_24]
		lea	edx, [eax+8]
		mov	[esp+0B8h+Count], 3FFh ; Count
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+Source], eax ; Source
		mov	[esp+0B8h+Dest], edx ; Dest
		call	_strncpy
		mov	eax, [ebp+var_24]
		mov	byte ptr [eax+407h], 0
		mov	eax, [ebp+Str]
		mov	[esp+0B8h+Dest], eax ; Str
		call	_strlen
		cmp	eax, 20h
		jbe	short loc_645CB6F7
		mov	eax, [ebp+Str]
		mov	[esp+0B8h+Dest], eax ; Str
		call	_strlen
		lea	edx, [eax-20h]
		mov	eax, [ebp+Str]
		add	eax, edx
		jmp	short loc_645CB6FA
; ---------------------------------------------------------------------------

loc_645CB6F7:				; CODE XREF: pkcs11h_addProvider+1B0j
		mov	eax, [ebp+Str]

loc_645CB6FA:				; CODE XREF: pkcs11h_addProvider+1C5j
		mov	edx, [ebp+var_24]
		add	edx, 408h
		mov	[esp+0B8h+Count], 20h ;	Count
		mov	[esp+0B8h+Source], eax ; Source
		mov	[esp+0B8h+Dest], edx ; Dest
		call	_strncpy
		mov	eax, [ebp+var_24]
		mov	byte ptr [eax+428h], 0
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+arg_8]
		mov	[eax+438h], edx
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+arg_C]
		mov	[eax+440h], edx
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+arg_10]
		mov	[eax+448h], edx
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+arg_14]
		mov	[eax+44Ch], edx
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+arg_18]
		mov	[eax+43Ch], edx
		mov	ebx, [ebp+var_24]
		mov	eax, [ebp+Str]
		mov	[esp+0B8h+Dest], eax ; lpLibFileName
		mov	eax, ds:__imp__LoadLibraryA@4 ;	LoadLibraryA(x)
		call	eax ; LoadLibraryA(x) ;	LoadLibraryA(x)
		sub	esp, 4
		mov	[ebx+42Ch], eax
		mov	eax, [ebp+var_24]
		mov	eax, [eax+42Ch]
		test	eax, eax
		jnz	short loc_645CB78F
		mov	[ebp+var_14], 6
		jmp	loc_645CB931
; ---------------------------------------------------------------------------

loc_645CB78F:				; CODE XREF: pkcs11h_addProvider+251j
		mov	eax, [ebp+var_24]
		mov	eax, [eax+42Ch]
		mov	[esp+0B8h+Source], offset aC_getfunctionl ; "C_GetFunctionList"
		mov	[esp+0B8h+Dest], eax ; hModule
		mov	eax, ds:__imp__GetProcAddress@8	; GetProcAddress(x,x)
		call	eax ; GetProcAddress(x,x) ; GetProcAddress(x,x)
		sub	esp, 8
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jnz	short loc_645CB7C2
		mov	[ebp+var_14], 6
		jmp	loc_645CB931
; ---------------------------------------------------------------------------

loc_645CB7C2:				; CODE XREF: pkcs11h_addProvider+284j
		mov	eax, [ebp+var_24]
		add	eax, 430h
		mov	[esp+0B8h+Dest], eax
		mov	eax, [ebp+var_20]
		call	eax
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CB7E0
		jmp	loc_645CB931
; ---------------------------------------------------------------------------

loc_645CB7E0:				; CODE XREF: pkcs11h_addProvider+2A9j
		mov	[esp+0B8h+Count], 18h ;	Size
		mov	[esp+0B8h+Source], 0 ; Val
		lea	eax, [ebp+Dst]
		mov	[esp+0B8h+Dest], eax ; Dst
		call	_memset
		mov	[esp+0B8h+Dest], offset	VarName	; "PKCS11H_INIT_ARGS_RESERVED"
		call	_getenv
		mov	[ebp+var_28], eax
		mov	eax, [ebp+var_28]
		test	eax, eax
		jz	short loc_645CB817
		lea	eax, [ebp+Dst]
		mov	[ebp+var_10], eax

loc_645CB817:				; CODE XREF: pkcs11h_addProvider+2DFj
		mov	eax, [ebp+var_24]
		mov	eax, [eax+430h]
		mov	eax, [eax+2]
		mov	edx, [ebp+var_10]
		mov	[esp+0B8h+Dest], edx
		call	eax
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CB84B
		cmp	[ebp+var_14], 191h
		jnz	short loc_645CB846
		mov	[ebp+var_14], 0
		jmp	short loc_645CB858
; ---------------------------------------------------------------------------

loc_645CB846:				; CODE XREF: pkcs11h_addProvider+30Bj
		jmp	loc_645CB931
; ---------------------------------------------------------------------------

loc_645CB84B:				; CODE XREF: pkcs11h_addProvider+302j
		mov	eax, [ebp+var_24]
		mov	dword ptr [eax+434h], 1

loc_645CB858:				; CODE XREF: pkcs11h_addProvider+314j
		mov	eax, [ebp+var_24]
		mov	eax, [eax+430h]
		mov	eax, [eax+0Ah]
		lea	edx, [ebp+var_84]
		mov	[esp+0B8h+Dest], edx
		call	eax
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CB87D
		jmp	loc_645CB931
; ---------------------------------------------------------------------------

loc_645CB87D:				; CODE XREF: pkcs11h_addProvider+346j
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0B8h+Count], 20h ;	size_t
		lea	edx, [ebp+var_84]
		add	edx, 2
		mov	[esp+0B8h+Source], edx ; void *
		mov	[esp+0B8h+Dest], eax ; void *
		call	sub_645C277C
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CB8D3
		mov	eax, [ebp+var_24]
		add	eax, 408h
		mov	[esp+0B8h+var_AC], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+Count], eax
		mov	[esp+0B8h+Source], offset aPkcs11Pkcs1_54 ; "PKCS#11: pkcs11h_addProvider Provider '"...
		mov	[esp+0B8h+Dest], 5
		call	sub_645CBF0E

loc_645CB8D3:				; CODE XREF: pkcs11h_addProvider+37Aj
		mov	eax, [ebp+var_24]
		mov	dword ptr [eax+4], 1
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		test	eax, eax
		jnz	short loc_645CB8F6
		mov	eax, ds:dword_645D8030
		mov	edx, [ebp+var_24]
		mov	[eax+8], edx
		jmp	short loc_645CB923
; ---------------------------------------------------------------------------

loc_645CB8F6:				; CODE XREF: pkcs11h_addProvider+3B7j
		mov	[ebp+var_18], 0
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_18], eax
		jmp	short loc_645CB912
; ---------------------------------------------------------------------------

loc_645CB90A:				; CODE XREF: pkcs11h_addProvider+3E9j
		mov	eax, [ebp+var_18]
		mov	eax, [eax]
		mov	[ebp+var_18], eax

loc_645CB912:				; CODE XREF: pkcs11h_addProvider+3D8j
		mov	eax, [ebp+var_18]
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CB90A
		mov	edx, [ebp+var_24]
		mov	eax, [ebp+var_18]
		mov	[eax], edx

loc_645CB923:				; CODE XREF: pkcs11h_addProvider+3C4j
		mov	[ebp+var_24], 0
		mov	[ebp+var_14], 0

loc_645CB931:				; CODE XREF: pkcs11h_addProvider+14Ej
					; pkcs11h_addProvider+176j ...
		mov	eax, [ebp+var_24]
		test	eax, eax
		jz	short loc_645CB97A
		mov	eax, [ebp+var_24]
		mov	eax, [eax+42Ch]
		test	eax, eax
		jz	short loc_645CB968
		mov	eax, [ebp+var_24]
		mov	eax, [eax+42Ch]
		mov	[esp+0B8h+Dest], eax ; hLibModule
		mov	eax, ds:__imp__FreeLibrary@4 ; FreeLibrary(x)
		call	eax ; FreeLibrary(x) ; FreeLibrary(x)
		sub	esp, 4
		mov	eax, [ebp+var_24]
		mov	dword ptr [eax+42Ch], 0

loc_645CB968:				; CODE XREF: pkcs11h_addProvider+413j
		lea	eax, [ebp+var_24]
		mov	[esp+0B8h+Dest], eax
		call	sub_645C156B
		mov	[ebp+var_24], 0

loc_645CB97A:				; CODE XREF: pkcs11h_addProvider+406j
		cmp	[ebp+var_C], 0
		jz	short loc_645CB997
		mov	eax, ds:dword_645D8030
		add	eax, 38h
		mov	[esp+0B8h+Dest], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645CB997:				; CODE XREF: pkcs11h_addProvider+44Ej
		call	sub_645CA2B9
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CB9D7
		mov	eax, [ebp+var_14]
		mov	[esp+0B8h+Dest], eax
		call	pkcs11h_getMessage
		mov	[esp+0B8h+var_A8], eax
		mov	eax, [ebp+var_14]
		mov	[esp+0B8h+var_AC], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0B8h+Count], eax
		mov	[esp+0B8h+Source], offset aPkcs11Provider ; "PKCS#11: Provider '%s' added rv=%lu-'%s"...
		mov	[esp+0B8h+Dest], 4
		call	sub_645CBF0E

loc_645CB9D7:				; CODE XREF: pkcs11h_addProvider+474j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CBA0B
		mov	eax, [ebp+var_14]
		mov	[esp+0B8h+Dest], eax
		call	pkcs11h_getMessage
		mov	[esp+0B8h+var_AC], eax
		mov	eax, [ebp+var_14]
		mov	[esp+0B8h+Count], eax
		mov	[esp+0B8h+Source], offset aPkcs11Pkcs1_55 ; "PKCS#11: pkcs11h_addProvider return rv="...
		mov	[esp+0B8h+Dest], 5
		call	sub_645CBF0E

loc_645CBA0B:				; CODE XREF: pkcs11h_addProvider+4AFj
		mov	eax, [ebp+var_14]
		mov	ebx, [ebp+var_4]
		leave
		retn
pkcs11h_addProvider endp

; Exported entry  51. pkcs11h_removeProvider

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_removeProvider(char *)
		public pkcs11h_removeProvider
pkcs11h_removeProvider proc near	; CODE XREF: pkcs11h_terminate+8Fp

Str1		= dword	ptr -38h
Str2		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_20], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CBA67
		mov	[esp+38h+var_30], 375h ; int
		mov	[esp+38h+Str2],	offset aPkcs11hCore_c ;	"pkcs11h-core.c"
		mov	[esp+38h+Str1],	offset aReferenceNull ;	"reference!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CBA68
; ---------------------------------------------------------------------------

loc_645CBA67:				; CODE XREF: pkcs11h_removeProvider+34j
		nop

loc_645CBA68:				; CODE XREF: pkcs11h_removeProvider+52j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CBA8D
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+Str2],	offset aPkcs11Pkcs1_56 ; "PKCS#11: pkcs11h_removeProvider entry	r"...
		mov	[esp+38h+Str1],	5
		call	sub_645CBF0E

loc_645CBA8D:				; CODE XREF: pkcs11h_removeProvider+5Dj
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CBAB2
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+Str2],	offset aPkcs11Removi_0 ; "PKCS#11: Removing provider '%s'"
		mov	[esp+38h+Str1],	4
		call	sub_645CBF0E

loc_645CBAB2:				; CODE XREF: pkcs11h_removeProvider+82j
		mov	eax, ds:dword_645D8030
		add	eax, 40h
		mov	[esp+38h+Str1],	eax
		call	sub_645C24B4
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jz	short loc_645CBAD0
		jmp	loc_645CBC41
; ---------------------------------------------------------------------------

loc_645CBAD0:				; CODE XREF: pkcs11h_removeProvider+B6j
		mov	[ebp+var_14], 1
		mov	eax, ds:dword_645D8030
		add	eax, 3Ch
		mov	[esp+38h+Str1],	eax
		call	sub_645C24B4
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jz	short loc_645CBAF5
		jmp	loc_645CBC41
; ---------------------------------------------------------------------------

loc_645CBAF5:				; CODE XREF: pkcs11h_removeProvider+DBj
		mov	[ebp+var_18], 1
		mov	eax, ds:dword_645D8030
		add	eax, 38h
		mov	[esp+38h+Str1],	eax
		call	sub_645C24B4
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jz	short loc_645CBB1A
		jmp	loc_645CBC41
; ---------------------------------------------------------------------------

loc_645CBB1A:				; CODE XREF: pkcs11h_removeProvider+100j
		mov	[ebp+var_10], 1
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+0Ch]
		mov	[ebp+var_C], eax
		jmp	short loc_645CBB44
; ---------------------------------------------------------------------------

loc_645CBB2E:				; CODE XREF: pkcs11h_removeProvider+135j
		mov	eax, [ebp+var_C]
		add	eax, 2Ch
		mov	[esp+38h+Str1],	eax
		call	sub_645C24B4
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[ebp+var_C], eax

loc_645CBB44:				; CODE XREF: pkcs11h_removeProvider+119j
		cmp	[ebp+var_C], 0
		jnz	short loc_645CBB2E
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_1C], eax
		jmp	short loc_645CBB5F
; ---------------------------------------------------------------------------

loc_645CBB57:				; CODE XREF: pkcs11h_removeProvider+169j
		mov	eax, [ebp+var_1C]
		mov	eax, [eax]
		mov	[ebp+var_1C], eax

loc_645CBB5F:				; CODE XREF: pkcs11h_removeProvider+142j
		cmp	[ebp+var_1C], 0
		jz	short loc_645CBB7E
		mov	eax, [ebp+var_1C]
		add	eax, 8
		mov	[esp+38h+Str2],	eax ; Str2
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+Str1],	eax ; Str1
		call	_strcmp
		test	eax, eax
		jnz	short loc_645CBB57

loc_645CBB7E:				; CODE XREF: pkcs11h_removeProvider+150j
		cmp	[ebp+var_1C], 0
		jnz	short loc_645CBB90
		mov	[ebp+var_20], 82h
		jmp	loc_645CBC41
; ---------------------------------------------------------------------------

loc_645CBB90:				; CODE XREF: pkcs11h_removeProvider+16Fj
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+4], 0
		mov	eax, [ebp+var_1C]
		mov	byte ptr [eax+8], 0
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+434h]
		test	eax, eax
		jz	short loc_645CBBD0
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+430h]
		mov	eax, [eax+6]
		mov	[esp+38h+Str1],	0
		call	eax
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+434h], 0

loc_645CBBD0:				; CODE XREF: pkcs11h_removeProvider+199j
		call	sub_645CA2B9
		jmp	short loc_645CBBE3
; ---------------------------------------------------------------------------

loc_645CBBD7:				; CODE XREF: pkcs11h_removeProvider+1DBj
		mov	[esp+38h+Str1],	1F4h
		call	sub_645C2448

loc_645CBBE3:				; CODE XREF: pkcs11h_removeProvider+1C2j
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+450h]
		test	eax, eax
		jnz	short loc_645CBBD7
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+430h]
		test	eax, eax
		jz	short loc_645CBC0A
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+430h], 0

loc_645CBC0A:				; CODE XREF: pkcs11h_removeProvider+1E8j
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+42Ch]
		test	eax, eax
		jz	short loc_645CBC3A
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+42Ch]
		mov	[esp+38h+Str1],	eax ; hLibModule
		mov	eax, ds:__imp__FreeLibrary@4 ; FreeLibrary(x)
		call	eax ; FreeLibrary(x) ; FreeLibrary(x)
		sub	esp, 4
		mov	eax, [ebp+var_1C]
		mov	dword ptr [eax+42Ch], 0

loc_645CBC3A:				; CODE XREF: pkcs11h_removeProvider+202j
		mov	[ebp+var_20], 0

loc_645CBC41:				; CODE XREF: pkcs11h_removeProvider+B8j
					; pkcs11h_removeProvider+DDj ...
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+0Ch]
		mov	[ebp+var_C], eax
		jmp	short loc_645CBC64
; ---------------------------------------------------------------------------

loc_645CBC4E:				; CODE XREF: pkcs11h_removeProvider+255j
		mov	eax, [ebp+var_C]
		add	eax, 2Ch
		mov	[esp+38h+Str1],	eax
		call	sub_645C24F5
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[ebp+var_C], eax

loc_645CBC64:				; CODE XREF: pkcs11h_removeProvider+239j
		cmp	[ebp+var_C], 0
		jnz	short loc_645CBC4E
		cmp	[ebp+var_14], 0
		jz	short loc_645CBC87
		mov	eax, ds:dword_645D8030
		add	eax, 40h
		mov	[esp+38h+Str1],	eax
		call	sub_645C24F5
		mov	[ebp+var_14], 0

loc_645CBC87:				; CODE XREF: pkcs11h_removeProvider+25Bj
		cmp	[ebp+var_18], 0
		jz	short loc_645CBCA4
		mov	eax, ds:dword_645D8030
		add	eax, 3Ch
		mov	[esp+38h+Str1],	eax
		call	sub_645C24F5
		mov	[ebp+var_18], 0

loc_645CBCA4:				; CODE XREF: pkcs11h_removeProvider+278j
		cmp	[ebp+var_10], 0
		jz	short loc_645CBCC1
		mov	eax, ds:dword_645D8030
		add	eax, 38h
		mov	[esp+38h+Str1],	eax
		call	sub_645C24F5
		mov	[ebp+var_10], 0

loc_645CBCC1:				; CODE XREF: pkcs11h_removeProvider+295j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CBCF5
		mov	eax, [ebp+var_20]
		mov	[esp+38h+Str1],	eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_20]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+Str2],	offset aPkcs11Pkcs1_57 ; "PKCS#11: pkcs11h_removeProvider return "...
		mov	[esp+38h+Str1],	5
		call	sub_645CBF0E

loc_645CBCF5:				; CODE XREF: pkcs11h_removeProvider+2B6j
		mov	eax, [ebp+var_20]
		leave
		retn
pkcs11h_removeProvider endp

; Exported entry  35. pkcs11h_forkFixup

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_forkFixup
pkcs11h_forkFixup proc near
		push	ebp
		mov	ebp, esp
		mov	eax, 0
		pop	ebp
		retn
pkcs11h_forkFixup endp

; Exported entry  50. pkcs11h_plugAndPlay

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_plugAndPlay
pkcs11h_plugAndPlay proc near

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_14], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CBD36
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_58 ; "PKCS#11: pkcs11h_plugAndPlay entry pid="...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CBD36:				; CODE XREF: pkcs11h_plugAndPlay+15j
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jz	loc_645CBE10
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jz	loc_645CBE10
		mov	[ebp+var_10], 0
		mov	eax, ds:dword_645D8030
		add	eax, 38h
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_C], eax
		jmp	short loc_645CBD9D
; ---------------------------------------------------------------------------

loc_645CBD76:				; CODE XREF: pkcs11h_plugAndPlay+9Dj
		mov	eax, [ebp+var_C]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645CBD95
		mov	eax, [ebp+var_C]
		mov	eax, [eax+430h]
		mov	eax, [eax+6]
		mov	[esp+28h+var_28], 0
		call	eax

loc_645CBD95:				; CODE XREF: pkcs11h_plugAndPlay+7Aj
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[ebp+var_C], eax

loc_645CBD9D:				; CODE XREF: pkcs11h_plugAndPlay+70j
		cmp	[ebp+var_C], 0
		jnz	short loc_645CBD76
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+44h]
		test	eax, eax
		jz	short loc_645CBDBB
		mov	[ebp+var_10], 1
		call	sub_645CA35F

loc_645CBDBB:				; CODE XREF: pkcs11h_plugAndPlay+A9j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+8]
		mov	[ebp+var_C], eax
		jmp	short loc_645CBDEF
; ---------------------------------------------------------------------------

loc_645CBDC8:				; CODE XREF: pkcs11h_plugAndPlay+EFj
		mov	eax, [ebp+var_C]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645CBDE7
		mov	eax, [ebp+var_C]
		mov	eax, [eax+430h]
		mov	eax, [eax+2]
		mov	[esp+28h+var_28], 0
		call	eax

loc_645CBDE7:				; CODE XREF: pkcs11h_plugAndPlay+CCj
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[ebp+var_C], eax

loc_645CBDEF:				; CODE XREF: pkcs11h_plugAndPlay+C2j
		cmp	[ebp+var_C], 0
		jnz	short loc_645CBDC8
		cmp	[ebp+var_10], 0
		jz	short loc_645CBE00
		call	sub_645CA1F0

loc_645CBE00:				; CODE XREF: pkcs11h_plugAndPlay+F5j
		mov	eax, ds:dword_645D8030
		add	eax, 38h
		mov	[esp+28h+var_28], eax
		call	sub_645C24F5

loc_645CBE10:				; CODE XREF: pkcs11h_plugAndPlay+39j
					; pkcs11h_plugAndPlay+48j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CBE2E
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_59 ; "PKCS#11: pkcs11h_plugAndPlay return"
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CBE2E:				; CODE XREF: pkcs11h_plugAndPlay+114j
		mov	eax, 0
		leave
		retn
pkcs11h_plugAndPlay endp

; Exported entry  41. pkcs11h_logout

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_logout
pkcs11h_logout	proc near

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CBE67
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_60 ; "PKCS#11: pkcs11h_logout entry"
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CBE67:				; CODE XREF: pkcs11h_logout+1Cj
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jz	short loc_645CBED5
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_645CBED5
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+0Ch]
		mov	[ebp+var_C], eax
		jmp	short loc_645CBECF
; ---------------------------------------------------------------------------

loc_645CBE88:				; CODE XREF: pkcs11h_logout+9Ej
		mov	eax, [ebp+var_C]
		add	eax, 2Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_645CBEBB
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	sub_645C4521
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_C]
		add	eax, 2Ch
		mov	[esp+28h+var_28], eax
		call	sub_645C24F5

loc_645CBEBB:				; CODE XREF: pkcs11h_logout+68j
		cmp	[ebp+var_14], 0
		jz	short loc_645CBEC7
		mov	eax, [ebp+var_14]
		mov	[ebp+var_10], eax

loc_645CBEC7:				; CODE XREF: pkcs11h_logout+8Aj
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[ebp+var_C], eax

loc_645CBECF:				; CODE XREF: pkcs11h_logout+51j
		cmp	[ebp+var_C], 0
		jnz	short loc_645CBE88

loc_645CBED5:				; CODE XREF: pkcs11h_logout+39j
					; pkcs11h_logout+44j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CBF09
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_61 ; "PKCS#11: pkcs11h_logout return rv=%lu-'"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CBF09:				; CODE XREF: pkcs11h_logout+A8j
		mov	eax, [ebp+var_10]
		leave
		retn
pkcs11h_logout	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CBF0E	proc near		; CODE XREF: sub_645C2D74+CDp
					; sub_645C2D74+1EDp ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= byte ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		cmp	[ebp+arg_4], 0
		jnz	short loc_645CBF38
		mov	[esp+28h+var_20], 47Eh ; int
		mov	[esp+28h+var_24], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+28h+var_28], offset aFormatNull ; "format!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CBF39
; ---------------------------------------------------------------------------

loc_645CBF38:				; CODE XREF: sub_645CBF0E+Aj
		nop

loc_645CBF39:				; CODE XREF: sub_645CBF0E+28j
		lea	eax, [ebp+arg_8]
		mov	[ebp+var_C], eax
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jz	short locret_645CBFB7
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_645CBFB7
		mov	eax, dword_645D1024
		cmp	[ebp+arg_0], eax
		ja	short locret_645CBFB7
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+20h]
		test	eax, eax
		jnz	short loc_645CBF8C
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], 0
		call	sub_645CBFB9
		jmp	short locret_645CBFB7
; ---------------------------------------------------------------------------

loc_645CBF8C:				; CODE XREF: sub_645CBF0E+59j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax+20h]
		mov	ecx, [ebp+var_C]
		mov	edx, ds:dword_645D8030
		mov	edx, [edx+10h]
		mov	[esp+28h+var_1C], ecx
		mov	ecx, [ebp+arg_4]
		mov	[esp+28h+var_20], ecx
		mov	ecx, [ebp+arg_0]
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], edx
		call	eax

locret_645CBFB7:			; CODE XREF: sub_645CBF0E+38j
					; sub_645CBF0E+43j ...
		leave
		retn
sub_645CBF0E	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CBFB9	proc near		; CODE XREF: sub_645CBF0E+77p
					; DATA XREF: pkcs11h_initialize+19Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_645CBFB9	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CBFBE	proc near		; DATA XREF: pkcs11h_initialize+1B1o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CBFE8
		mov	[esp+28h+var_20], 4B5h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+28h+var_28], offset aTokenNull ; "token!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CBFE9
; ---------------------------------------------------------------------------

loc_645CBFE8:				; CODE XREF: sub_645CBFBE+Aj
		nop

loc_645CBFE9:				; CODE XREF: sub_645CBFBE+28j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CC01C
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_18], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11__pkc_20 ; "PKCS#11: __pkcs11h_hooks_default_token_"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CC01C:				; CODE XREF: sub_645CBFBE+33j
		mov	eax, 0
		leave
		retn
sub_645CBFBE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CC023	proc near		; DATA XREF: pkcs11h_initialize+1C5o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CC04D
		mov	[esp+28h+var_20], 4D2h ; int
		mov	[esp+28h+var_24], offset aPkcs11hCore_c	; "pkcs11h-core.c"
		mov	[esp+28h+var_28], offset aTokenNull ; "token!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC04E
; ---------------------------------------------------------------------------

loc_645CC04D:				; CODE XREF: sub_645CC023+Aj
		nop

loc_645CC04E:				; CODE XREF: sub_645CC023+28j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CC081
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_18], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11__pkc_21 ; "PKCS#11: __pkcs11h_hooks_default_pin_pr"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CC081:				; CODE XREF: sub_645CC023+33j
		mov	eax, 0
		leave
		retn
sub_645CC023	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_645CC088(int,	char *,	char *,	int)
sub_645CC088	proc near		; CODE XREF: pkcs11h_data_get+21Fp
					; pkcs11h_data_del+1A9p

Str		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 64h
		mov	[ebp+var_10], 0
		mov	[ebp+var_34], 0
		lea	eax, [ebp+var_10]
		mov	[ebp+var_30], eax
		mov	[ebp+var_2C], 4
		mov	[ebp+var_28], 10h
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_24], eax
		cmp	[ebp+arg_4], 0
		jz	short loc_645CC0CA
		mov	eax, [ebp+arg_4]
		mov	[esp+68h+Str], eax ; Str
		call	_strlen
		jmp	short loc_645CC0CF
; ---------------------------------------------------------------------------

loc_645CC0CA:				; CODE XREF: sub_645CC088+33j
		mov	eax, 0

loc_645CC0CF:				; CODE XREF: sub_645CC088+40j
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], 3
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_18], eax
		cmp	[ebp+arg_8], 0
		jz	short loc_645CC0F2
		mov	eax, [ebp+arg_8]
		mov	[esp+68h+Str], eax ; Str
		call	_strlen
		jmp	short loc_645CC0F7
; ---------------------------------------------------------------------------

loc_645CC0F2:				; CODE XREF: sub_645CC088+5Bj
		mov	eax, 0

loc_645CC0F7:				; CODE XREF: sub_645CC088+68j
		mov	[ebp+var_14], eax
		mov	[ebp+var_38], 0
		mov	[ebp+var_3C], 0
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CC133
		mov	[esp+68h+var_60], 4Eh ;	int
		mov	[esp+68h+var_64], offset aPkcs11hData_c	; "pkcs11h-data.c"
		mov	[esp+68h+Str], offset aSessionNull_1 ; "session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC134
; ---------------------------------------------------------------------------

loc_645CC133:				; CODE XREF: sub_645CC088+8Bj
		nop

loc_645CC134:				; CODE XREF: sub_645CC088+A9j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645CC158
		mov	[esp+68h+var_60], 4Fh ;	int
		mov	[esp+68h+var_64], offset aPkcs11hData_c	; "pkcs11h-data.c"
		mov	[esp+68h+Str], offset aApplicationNul ;	"application!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC159
; ---------------------------------------------------------------------------

loc_645CC158:				; CODE XREF: sub_645CC088+B0j
		nop

loc_645CC159:				; CODE XREF: sub_645CC088+CEj
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CC17D
		mov	[esp+68h+var_60], 50h ;	int
		mov	[esp+68h+var_64], offset aPkcs11hData_c	; "pkcs11h-data.c"
		mov	[esp+68h+Str], offset aLabelNull ; "label!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC17E
; ---------------------------------------------------------------------------

loc_645CC17D:				; CODE XREF: sub_645CC088+D5j
		nop

loc_645CC17E:				; CODE XREF: sub_645CC088+F3j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CC1B8
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_54], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+68h+var_58], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11_pkcs_46 ; "PKCS#11: _pkcs11h_data_getObject entry "...
		mov	[esp+68h+Str], 5
		call	sub_645CBF0E

loc_645CC1B8:				; CODE XREF: sub_645CC088+FEj
		mov	eax, [ebp+arg_C]
		mov	dword ptr [eax], 0FFFFFFFFh
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+Str], eax
		call	sub_645C3FB4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CC1D7
		jmp	short loc_645CC22B
; ---------------------------------------------------------------------------

loc_645CC1D7:				; CODE XREF: sub_645CC088+14Bj
		lea	eax, [ebp+var_3C]
		mov	[esp+68h+var_58], eax
		lea	eax, [ebp+var_38]
		mov	[esp+68h+var_5C], eax
		mov	[esp+68h+var_60], 3
		lea	eax, [ebp+var_34]
		mov	[esp+68h+var_64], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+Str], eax
		call	sub_645C324E
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CC20A
		jmp	short loc_645CC22B
; ---------------------------------------------------------------------------

loc_645CC20A:				; CODE XREF: sub_645CC088+17Ej
		mov	eax, [ebp+var_3C]
		test	eax, eax
		jnz	short loc_645CC21A
		mov	[ebp+var_C], 200h
		jmp	short loc_645CC22B
; ---------------------------------------------------------------------------

loc_645CC21A:				; CODE XREF: sub_645CC088+187j
		mov	eax, [ebp+var_38]
		mov	edx, [eax]
		mov	eax, [ebp+arg_C]
		mov	[eax], edx
		mov	[ebp+var_C], 0

loc_645CC22B:				; CODE XREF: sub_645CC088+14Dj
					; sub_645CC088+180j ...
		mov	eax, [ebp+var_38]
		test	eax, eax
		jz	short loc_645CC23D
		lea	eax, [ebp+var_38]
		mov	[esp+68h+Str], eax
		call	sub_645C156B

loc_645CC23D:				; CODE XREF: sub_645CC088+1A8j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CC27A
		mov	eax, [ebp+arg_C]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+68h+Str], eax
		call	pkcs11h_getMessage
		mov	[esp+68h+var_58], ebx
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+68h+var_60], eax
		mov	[esp+68h+var_64], offset aPkcs11_pkcs_47 ; "PKCS#11: _pkcs11h_data_getObject return"...
		mov	[esp+68h+Str], 5
		call	sub_645CBF0E

loc_645CC27A:				; CODE XREF: sub_645CC088+1BDj
		mov	eax, [ebp+var_C]
		add	esp, 64h
		pop	ebx
		pop	ebp
		retn
sub_645CC088	endp

; Exported entry  31. pkcs11h_data_get

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_data_get(void *, int, char *, char *, int, int, void *, int)
		public pkcs11h_data_get
pkcs11h_data_get proc near

Dst		= dword	ptr -68h
Src		= dword	ptr -64h
Size		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 64h
		mov	[ebp+var_28], 11h
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	[ebp+var_2C], 0FFFFFFFFh
		mov	[ebp+var_C], 6
		mov	[ebp+var_10], 0
		mov	[ebp+var_30], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 0
		mov	[ebp+var_1C], 0
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CC2F7
		mov	[esp+68h+Size],	9Fh ; int
		mov	[esp+68h+Src], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+68h+Dst], offset a_g_pkcs11h_d_5 ;	"_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC2F8
; ---------------------------------------------------------------------------

loc_645CC2F7:				; CODE XREF: pkcs11h_data_get+54j
		nop

loc_645CC2F8:				; CODE XREF: pkcs11h_data_get+72j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CC321
		mov	[esp+68h+Size],	0A0h ; int
		mov	[esp+68h+Src], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+68h+Dst], offset a_g_pkcs11h_d_6 ;	"_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CC322
; ---------------------------------------------------------------------------

loc_645CC321:				; CODE XREF: pkcs11h_data_get+7Ej
		nop

loc_645CC322:				; CODE XREF: pkcs11h_data_get+9Cj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CC346
		mov	[esp+68h+Size],	0A1h ; int
		mov	[esp+68h+Src], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+68h+Dst], offset aToken_idNull_2 ;	"token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC347
; ---------------------------------------------------------------------------

loc_645CC346:				; CODE XREF: pkcs11h_data_get+A3j
		nop

loc_645CC347:				; CODE XREF: pkcs11h_data_get+C1j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CC36B
		mov	[esp+68h+Size],	0A2h ; int
		mov	[esp+68h+Src], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+68h+Dst], offset aApplicationNul ;	"application!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC36C
; ---------------------------------------------------------------------------

loc_645CC36B:				; CODE XREF: pkcs11h_data_get+C8j
		nop

loc_645CC36C:				; CODE XREF: pkcs11h_data_get+E6j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645CC390
		mov	[esp+68h+Size],	0A3h ; int
		mov	[esp+68h+Src], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+68h+Dst], offset aLabelNull ; "label!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC391
; ---------------------------------------------------------------------------

loc_645CC390:				; CODE XREF: pkcs11h_data_get+EDj
		nop

loc_645CC391:				; CODE XREF: pkcs11h_data_get+10Bj
		cmp	[ebp+arg_1C], 0
		jnz	short loc_645CC3B5
		mov	[esp+68h+Size],	0A6h ; int
		mov	[esp+68h+Src], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+68h+Dst], offset aP_blob_sizeNul ;	"p_blob_size!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC3B6
; ---------------------------------------------------------------------------

loc_645CC3B5:				; CODE XREF: pkcs11h_data_get+112j
		nop

loc_645CC3B6:				; CODE XREF: pkcs11h_data_get+130j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CC414
		cmp	[ebp+arg_18], 0
		jz	short loc_645CC3CD
		mov	eax, [ebp+arg_1C]
		mov	eax, [eax]
		jmp	short loc_645CC3D2
; ---------------------------------------------------------------------------

loc_645CC3CD:				; CODE XREF: pkcs11h_data_get+141j
		mov	eax, 0

loc_645CC3D2:				; CODE XREF: pkcs11h_data_get+148j
		mov	[esp+68h+var_48], eax
		mov	eax, [ebp+arg_18]
		mov	[esp+68h+var_4C], eax
		mov	eax, [ebp+arg_14]
		mov	[esp+68h+var_50], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+68h+var_54], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+68h+var_58], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+Size],	eax
		mov	[esp+68h+Src], offset aPkcs11Pkcs1_62 ;	"PKCS#11: pkcs11h_data_get entry token_i"...
		mov	[esp+68h+Dst], 5
		call	sub_645CBF0E

loc_645CC414:				; CODE XREF: pkcs11h_data_get+13Bj
		cmp	[ebp+arg_18], 0
		jz	short loc_645CC422
		mov	eax, [ebp+arg_1C]
		mov	eax, [eax]
		mov	[ebp+var_1C], eax

loc_645CC422:				; CODE XREF: pkcs11h_data_get+195j
		mov	eax, [ebp+arg_1C]
		mov	dword ptr [eax], 0
		lea	eax, [ebp+var_30]
		mov	[esp+68h+Src], eax ; int
		mov	eax, [ebp+arg_0]
		mov	[esp+68h+Dst], eax ; void *
		call	sub_645C35B0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CC44B
		jmp	loc_645CC5AF
; ---------------------------------------------------------------------------

loc_645CC44B:				; CODE XREF: pkcs11h_data_get+1C1j
		mov	eax, [ebp+var_30]
		add	eax, 2Ch
		mov	[esp+68h+Dst], eax
		call	sub_645C24B4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CC467
		jmp	loc_645CC5AF
; ---------------------------------------------------------------------------

loc_645CC467:				; CODE XREF: pkcs11h_data_get+1DDj
		mov	[ebp+var_10], 1
		jmp	loc_645CC562
; ---------------------------------------------------------------------------

loc_645CC473:				; CODE XREF: pkcs11h_data_get+2E3j
		mov	eax, [ebp+var_30]
		mov	[esp+68h+Dst], eax
		call	sub_645C3FB4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CC4E8
		mov	eax, [ebp+var_30]
		lea	edx, [ebp+var_2C]
		mov	[esp+68h+var_5C], edx ;	int
		mov	edx, [ebp+arg_C]
		mov	[esp+68h+Size],	edx ; char *
		mov	edx, [ebp+arg_8]
		mov	[esp+68h+Src], edx ; char *
		mov	[esp+68h+Dst], eax ; int
		call	sub_645CC088
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CC4E8
		mov	edx, [ebp+var_2C]
		mov	eax, [ebp+var_30]
		mov	[esp+68h+var_5C], 1
		lea	ecx, [ebp+var_28]
		mov	[esp+68h+Size],	ecx
		mov	[esp+68h+Src], edx
		mov	[esp+68h+Dst], eax
		call	sub_645C2F6F
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CC4E8
		mov	[ebp+var_14], 1
		mov	[ebp+var_C], 0

loc_645CC4E8:				; CODE XREF: pkcs11h_data_get+202j
					; pkcs11h_data_get+22Bj ...
		cmp	[ebp+var_14], 0
		jnz	short loc_645CC562
		cmp	[ebp+var_18], 0
		jnz	short loc_645CC55A
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CC528
		mov	eax, [ebp+var_C]
		mov	[esp+68h+Dst], eax
		call	pkcs11h_getMessage
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+68h+Size],	eax
		mov	[esp+68h+Src], offset aPkcs11ReadData ;	"PKCS#11: Read data object failed rv=%lu"...
		mov	[esp+68h+Dst], 4
		call	sub_645CBF0E

loc_645CC528:				; CODE XREF: pkcs11h_data_get+279j
		mov	[ebp+var_18], 1
		mov	eax, [ebp+var_30]
		mov	edx, [ebp+arg_14]
		mov	[esp+68h+var_58], edx
		mov	edx, [ebp+arg_10]
		mov	[esp+68h+var_5C], edx
		mov	[esp+68h+Size],	1
		mov	edx, [ebp+arg_4]
		mov	[esp+68h+Src], edx
		mov	[esp+68h+Dst], eax
		call	sub_645C414B
		mov	[ebp+var_C], eax

loc_645CC55A:				; CODE XREF: pkcs11h_data_get+26Fj
		cmp	[ebp+var_C], 0
		jz	short loc_645CC562
		jmp	short loc_645CC5AF
; ---------------------------------------------------------------------------

loc_645CC562:				; CODE XREF: pkcs11h_data_get+1EBj
					; pkcs11h_data_get+269j ...
		cmp	[ebp+var_14], 0
		jz	loc_645CC473
		mov	edx, [ebp+var_20]
		mov	eax, [ebp+arg_1C]
		mov	[eax], edx
		cmp	[ebp+arg_18], 0
		jz	short loc_645CC5A8
		mov	eax, [ebp+arg_1C]
		mov	eax, [eax]
		cmp	eax, [ebp+var_1C]
		jbe	short loc_645CC58D
		mov	[ebp+var_C], 150h
		jmp	short loc_645CC5A8
; ---------------------------------------------------------------------------

loc_645CC58D:				; CODE XREF: pkcs11h_data_get+2FFj
		mov	eax, [ebp+arg_1C]
		mov	edx, [eax]
		mov	eax, [ebp+var_24]
		mov	[esp+68h+Size],	edx ; Size
		mov	[esp+68h+Src], eax ; Src
		mov	eax, [ebp+arg_18]
		mov	[esp+68h+Dst], eax ; Dst
		call	_memmove

loc_645CC5A8:				; CODE XREF: pkcs11h_data_get+2F5j
					; pkcs11h_data_get+308j
		mov	[ebp+var_C], 0

loc_645CC5AF:				; CODE XREF: pkcs11h_data_get+1C3j
					; pkcs11h_data_get+1DFj ...
		cmp	[ebp+var_10], 0
		jz	short loc_645CC5CA
		mov	eax, [ebp+var_30]
		add	eax, 2Ch
		mov	[esp+68h+Dst], eax
		call	sub_645C24F5
		mov	[ebp+var_10], 0

loc_645CC5CA:				; CODE XREF: pkcs11h_data_get+330j
		mov	[esp+68h+Src], 1
		lea	eax, [ebp+var_28]
		mov	[esp+68h+Dst], eax
		call	sub_645C316B
		mov	eax, [ebp+var_30]
		test	eax, eax
		jz	short loc_645CC5F6
		mov	eax, [ebp+var_30]
		mov	[esp+68h+Dst], eax
		call	sub_645C3851
		mov	[ebp+var_30], 0

loc_645CC5F6:				; CODE XREF: pkcs11h_data_get+35Fj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CC633
		mov	eax, [ebp+arg_1C]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+68h+Dst], eax
		call	pkcs11h_getMessage
		mov	[esp+68h+var_58], ebx
		mov	[esp+68h+var_5C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+68h+Size],	eax
		mov	[esp+68h+Src], offset aPkcs11Pkcs1_63 ;	"PKCS#11: pkcs11h_data_get return rv=%lu"...
		mov	[esp+68h+Dst], 5
		call	sub_645CBF0E

loc_645CC633:				; CODE XREF: pkcs11h_data_get+37Bj
		mov	eax, [ebp+var_C]
		add	esp, 64h
		pop	ebx
		pop	ebp
		retn
pkcs11h_data_get endp

; Exported entry  32. pkcs11h_data_put

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_data_put(void *, int, char *, char *, int, int, int, int)
		public pkcs11h_data_put
pkcs11h_data_put proc near

Str		= dword	ptr -0A8h
var_A4		= dword	ptr -0A4h
var_A0		= dword	ptr -0A0h
var_9C		= dword	ptr -9Ch
var_98		= dword	ptr -98h
var_94		= dword	ptr -94h
var_90		= dword	ptr -90h
var_8C		= dword	ptr -8Ch
var_88		= dword	ptr -88h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_66		= dword	ptr -66h
var_62		= dword	ptr -62h
var_5E		= dword	ptr -5Eh
var_5A		= dword	ptr -5Ah
var_56		= dword	ptr -56h
var_52		= dword	ptr -52h
var_4E		= dword	ptr -4Eh
var_4A		= dword	ptr -4Ah
var_46		= dword	ptr -46h
var_42		= dword	ptr -42h
var_3E		= dword	ptr -3Eh
var_3A		= dword	ptr -3Ah
var_36		= dword	ptr -36h
var_32		= dword	ptr -32h
var_2E		= dword	ptr -2Eh
var_2A		= dword	ptr -2Ah
var_26		= dword	ptr -26h
var_22		= dword	ptr -22h
var_1E		= byte ptr -1Eh
var_1D		= byte ptr -1Dh
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h

		push	ebp
		mov	ebp, esp
		sub	esp, 0A8h
		mov	[ebp+var_1C], 0
		mov	[ebp+var_1D], 1
		mov	[ebp+var_1E], 0
		mov	[ebp+var_66], 0
		lea	eax, [ebp+var_1C]
		mov	[ebp+var_62], eax
		mov	[ebp+var_5E], 4
		mov	[ebp+var_5A], 1
		lea	eax, [ebp+var_1D]
		mov	[ebp+var_56], eax
		mov	[ebp+var_52], 1
		mov	[ebp+var_4E], 2
		cmp	[ebp+arg_4], 0
		jz	short loc_645CC68E
		lea	eax, [ebp+var_1E]
		jmp	short loc_645CC691
; ---------------------------------------------------------------------------

loc_645CC68E:				; CODE XREF: pkcs11h_data_put+4Bj
		lea	eax, [ebp+var_1D]

loc_645CC691:				; CODE XREF: pkcs11h_data_put+50j
		mov	[ebp+var_4A], eax
		mov	[ebp+var_46], 1
		mov	[ebp+var_42], 10h
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_3E], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+0A8h+Str],	eax ; Str
		call	_strlen
		mov	[ebp+var_3A], eax
		mov	[ebp+var_36], 3
		mov	eax, [ebp+arg_C]
		mov	[ebp+var_32], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+0A8h+Str],	eax ; Str
		call	_strlen
		mov	[ebp+var_2E], eax
		mov	[ebp+var_2A], 11h
		mov	eax, [ebp+arg_18]
		mov	[ebp+var_26], eax
		mov	eax, [ebp+arg_1C]
		mov	[ebp+var_22], eax
		mov	[ebp+var_6C], 0FFFFFFFFh
		mov	[ebp+var_C], 6
		mov	[ebp+var_10], 0
		mov	[ebp+var_70], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 0
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CC735
		mov	[esp+0A8h+var_A0], 146h	; int
		mov	[esp+0A8h+var_A4], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+0A8h+Str],	offset a_g_pkcs11h_d_5 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC736
; ---------------------------------------------------------------------------

loc_645CC735:				; CODE XREF: pkcs11h_data_put+D9j
		nop

loc_645CC736:				; CODE XREF: pkcs11h_data_put+F7j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CC75F
		mov	[esp+0A8h+var_A0], 147h	; int
		mov	[esp+0A8h+var_A4], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+0A8h+Str],	offset a_g_pkcs11h_d_6 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CC760
; ---------------------------------------------------------------------------

loc_645CC75F:				; CODE XREF: pkcs11h_data_put+103j
		nop

loc_645CC760:				; CODE XREF: pkcs11h_data_put+121j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CC784
		mov	[esp+0A8h+var_A0], 148h	; int
		mov	[esp+0A8h+var_A4], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+0A8h+Str],	offset aToken_idNull_2 ; "token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC785
; ---------------------------------------------------------------------------

loc_645CC784:				; CODE XREF: pkcs11h_data_put+128j
		nop

loc_645CC785:				; CODE XREF: pkcs11h_data_put+146j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CC7A9
		mov	[esp+0A8h+var_A0], 149h	; int
		mov	[esp+0A8h+var_A4], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+0A8h+Str],	offset aApplicationNul ; "application!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC7AA
; ---------------------------------------------------------------------------

loc_645CC7A9:				; CODE XREF: pkcs11h_data_put+14Dj
		nop

loc_645CC7AA:				; CODE XREF: pkcs11h_data_put+16Bj
		cmp	[ebp+arg_C], 0
		jnz	short loc_645CC7CE
		mov	[esp+0A8h+var_A0], 14Ah	; int
		mov	[esp+0A8h+var_A4], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+0A8h+Str],	offset aLabelNull ; "label!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC7CF
; ---------------------------------------------------------------------------

loc_645CC7CE:				; CODE XREF: pkcs11h_data_put+172j
		nop

loc_645CC7CF:				; CODE XREF: pkcs11h_data_put+190j
		cmp	[ebp+arg_18], 0
		jnz	short loc_645CC7F3
		mov	[esp+0A8h+var_A0], 14Ch	; int
		mov	[esp+0A8h+var_A4], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+0A8h+Str],	offset aBlobNull_2 ; "blob!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CC7F4
; ---------------------------------------------------------------------------

loc_645CC7F3:				; CODE XREF: pkcs11h_data_put+197j
		nop

loc_645CC7F4:				; CODE XREF: pkcs11h_data_put+1B5j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CC850
		cmp	[ebp+arg_18], 0
		jz	short loc_645CC809
		mov	eax, [ebp+arg_1C]
		jmp	short loc_645CC80E
; ---------------------------------------------------------------------------

loc_645CC809:				; CODE XREF: pkcs11h_data_put+1C6j
		mov	eax, 0

loc_645CC80E:				; CODE XREF: pkcs11h_data_put+1CBj
		mov	[esp+0A8h+var_88], eax
		mov	eax, [ebp+arg_18]
		mov	[esp+0A8h+var_8C], eax
		mov	eax, [ebp+arg_14]
		mov	[esp+0A8h+var_90], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+0A8h+var_94], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+0A8h+var_98], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+0A8h+var_9C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0A8h+var_A0], eax
		mov	[esp+0A8h+var_A4], offset aPkcs11Pkcs1_64 ; "PKCS#11: pkcs11h_data_put entry token_i"...
		mov	[esp+0A8h+Str],	5
		call	sub_645CBF0E

loc_645CC850:				; CODE XREF: pkcs11h_data_put+1C0j
		lea	eax, [ebp+var_70]
		mov	[esp+0A8h+var_A4], eax ; int
		mov	eax, [ebp+arg_0]
		mov	[esp+0A8h+Str],	eax ; void *
		call	sub_645C35B0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CC870
		jmp	loc_645CC97E
; ---------------------------------------------------------------------------

loc_645CC870:				; CODE XREF: pkcs11h_data_put+22Dj
		mov	eax, [ebp+var_70]
		add	eax, 2Ch
		mov	[esp+0A8h+Str],	eax
		call	sub_645C24B4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CC88C
		jmp	loc_645CC97E
; ---------------------------------------------------------------------------

loc_645CC88C:				; CODE XREF: pkcs11h_data_put+249j
		mov	[ebp+var_10], 1
		jmp	loc_645CC96D
; ---------------------------------------------------------------------------

loc_645CC898:				; CODE XREF: pkcs11h_data_put+335j
		mov	eax, [ebp+var_70]
		mov	[esp+0A8h+Str],	eax
		call	sub_645C3FB4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CC8F3
		mov	eax, [ebp+var_70]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+52h]
		mov	edx, [ebp+var_70]
		mov	edx, [edx+14h]
		lea	ecx, [ebp+var_6C]
		mov	[esp+0A8h+var_9C], ecx
		mov	[esp+0A8h+var_A0], 6
		lea	ecx, [ebp+var_66]
		mov	[esp+0A8h+var_A4], ecx
		mov	[esp+0A8h+Str],	edx
		call	eax
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CC8F3
		mov	[ebp+var_14], 1
		mov	[ebp+var_C], 0

loc_645CC8F3:				; CODE XREF: pkcs11h_data_put+26Ej
					; pkcs11h_data_put+2A7j
		cmp	[ebp+var_14], 0
		jnz	short loc_645CC96D
		cmp	[ebp+var_18], 0
		jnz	short loc_645CC965
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CC933
		mov	eax, [ebp+var_C]
		mov	[esp+0A8h+Str],	eax
		call	pkcs11h_getMessage
		mov	[esp+0A8h+var_9C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+0A8h+var_A0], eax
		mov	[esp+0A8h+var_A4], offset aPkcs11WriteDat ; "PKCS#11: Write data object	failed rv=%l"...
		mov	[esp+0A8h+Str],	4
		call	sub_645CBF0E

loc_645CC933:				; CODE XREF: pkcs11h_data_put+2CBj
		mov	[ebp+var_18], 1
		mov	eax, [ebp+var_70]
		mov	edx, [ebp+arg_14]
		mov	[esp+0A8h+var_98], edx
		mov	edx, [ebp+arg_10]
		mov	[esp+0A8h+var_9C], edx
		mov	[esp+0A8h+var_A0], 0
		mov	edx, [ebp+arg_4]
		mov	[esp+0A8h+var_A4], edx
		mov	[esp+0A8h+Str],	eax
		call	sub_645C414B
		mov	[ebp+var_C], eax

loc_645CC965:				; CODE XREF: pkcs11h_data_put+2C1j
		cmp	[ebp+var_C], 0
		jz	short loc_645CC96D
		jmp	short loc_645CC97E
; ---------------------------------------------------------------------------

loc_645CC96D:				; CODE XREF: pkcs11h_data_put+257j
					; pkcs11h_data_put+2BBj ...
		cmp	[ebp+var_14], 0
		jz	loc_645CC898
		mov	[ebp+var_C], 0

loc_645CC97E:				; CODE XREF: pkcs11h_data_put+22Fj
					; pkcs11h_data_put+24Bj ...
		cmp	[ebp+var_10], 0
		jz	short loc_645CC999
		mov	eax, [ebp+var_70]
		add	eax, 2Ch
		mov	[esp+0A8h+Str],	eax
		call	sub_645C24F5
		mov	[ebp+var_10], 0

loc_645CC999:				; CODE XREF: pkcs11h_data_put+346j
		mov	eax, [ebp+var_70]
		test	eax, eax
		jz	short loc_645CC9B2
		mov	eax, [ebp+var_70]
		mov	[esp+0A8h+Str],	eax
		call	sub_645C3851
		mov	[ebp+var_70], 0

loc_645CC9B2:				; CODE XREF: pkcs11h_data_put+362j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CC9E6
		mov	eax, [ebp+var_C]
		mov	[esp+0A8h+Str],	eax
		call	pkcs11h_getMessage
		mov	[esp+0A8h+var_9C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+0A8h+var_A0], eax
		mov	[esp+0A8h+var_A4], offset aPkcs11Pkcs1_65 ; "PKCS#11: pkcs11h_data_put return rv=%lu"...
		mov	[esp+0A8h+Str],	5
		call	sub_645CBF0E

loc_645CC9E6:				; CODE XREF: pkcs11h_data_put+37Ej
		mov	eax, [ebp+var_C]
		leave
		retn
pkcs11h_data_put endp

; Exported entry  28. pkcs11h_data_del

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_data_del(void *, int, char *, char *, int, int)
		public pkcs11h_data_del
pkcs11h_data_del proc near

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	[ebp+var_C], 0
		mov	[ebp+var_1C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_20], 0FFFFFFFFh
		mov	[ebp+var_18], 6
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CCA42
		mov	[esp+48h+var_40], 1C1h ; int
		mov	[esp+48h+var_44], offset aPkcs11hData_c	; "pkcs11h-data.c"
		mov	[esp+48h+var_48], offset a_g_pkcs11h_d_5 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CCA43
; ---------------------------------------------------------------------------

loc_645CCA42:				; CODE XREF: pkcs11h_data_del+37j
		nop

loc_645CCA43:				; CODE XREF: pkcs11h_data_del+55j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CCA6C
		mov	[esp+48h+var_40], 1C2h ; int
		mov	[esp+48h+var_44], offset aPkcs11hData_c	; "pkcs11h-data.c"
		mov	[esp+48h+var_48], offset a_g_pkcs11h_d_6 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CCA6D
; ---------------------------------------------------------------------------

loc_645CCA6C:				; CODE XREF: pkcs11h_data_del+61j
		nop

loc_645CCA6D:				; CODE XREF: pkcs11h_data_del+7Fj
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CCA91
		mov	[esp+48h+var_40], 1C3h ; int
		mov	[esp+48h+var_44], offset aPkcs11hData_c	; "pkcs11h-data.c"
		mov	[esp+48h+var_48], offset aToken_idNull_2 ; "token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CCA92
; ---------------------------------------------------------------------------

loc_645CCA91:				; CODE XREF: pkcs11h_data_del+86j
		nop

loc_645CCA92:				; CODE XREF: pkcs11h_data_del+A4j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CCAB6
		mov	[esp+48h+var_40], 1C4h ; int
		mov	[esp+48h+var_44], offset aPkcs11hData_c	; "pkcs11h-data.c"
		mov	[esp+48h+var_48], offset aApplicationNul ; "application!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CCAB7
; ---------------------------------------------------------------------------

loc_645CCAB6:				; CODE XREF: pkcs11h_data_del+ABj
		nop

loc_645CCAB7:				; CODE XREF: pkcs11h_data_del+C9j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645CCADB
		mov	[esp+48h+var_40], 1C5h ; int
		mov	[esp+48h+var_44], offset aPkcs11hData_c	; "pkcs11h-data.c"
		mov	[esp+48h+var_48], offset aLabelNull ; "label!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CCADC
; ---------------------------------------------------------------------------

loc_645CCADB:				; CODE XREF: pkcs11h_data_del+D0j
		nop

loc_645CCADC:				; CODE XREF: pkcs11h_data_del+EEj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CCB1D
		mov	eax, [ebp+arg_14]
		mov	[esp+48h+var_30], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+48h+var_34], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+48h+var_38], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11Pkcs1_66 ; "PKCS#11: pkcs11h_data_del entry token_i"...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645CCB1D:				; CODE XREF: pkcs11h_data_del+F9j
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_44], eax ;	int
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_48], eax ;	void *
		call	sub_645C35B0
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645CCB3D
		jmp	loc_645CCC5E
; ---------------------------------------------------------------------------

loc_645CCB3D:				; CODE XREF: pkcs11h_data_del+14Bj
		mov	eax, [ebp+var_1C]
		add	eax, 2Ch
		mov	[esp+48h+var_48], eax
		call	sub_645C24B4
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645CCB59
		jmp	loc_645CCC5E
; ---------------------------------------------------------------------------

loc_645CCB59:				; CODE XREF: pkcs11h_data_del+167j
		mov	[ebp+var_C], 1
		jmp	loc_645CCC54
; ---------------------------------------------------------------------------

loc_645CCB65:				; CODE XREF: pkcs11h_data_del+26Dj
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], eax
		call	sub_645C3FB4
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645CCBDA
		mov	eax, [ebp+var_1C]
		lea	edx, [ebp+var_20]
		mov	[esp+48h+var_3C], edx ;	int
		mov	edx, [ebp+arg_C]
		mov	[esp+48h+var_40], edx ;	char *
		mov	edx, [ebp+arg_8]
		mov	[esp+48h+var_44], edx ;	char *
		mov	[esp+48h+var_48], eax ;	int
		call	sub_645CC088
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645CCBDA
		mov	eax, [ebp+var_1C]
		mov	eax, [eax+0Ch]
		mov	eax, [eax+430h]
		mov	eax, [eax+5Ah]
		mov	ecx, [ebp+var_20]
		mov	edx, [ebp+var_1C]
		mov	edx, [edx+14h]
		mov	[esp+48h+var_44], ecx
		mov	[esp+48h+var_48], edx
		call	eax
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645CCBDA
		mov	[ebp+var_10], 1
		mov	[ebp+var_18], 0

loc_645CCBDA:				; CODE XREF: pkcs11h_data_del+18Cj
					; pkcs11h_data_del+1B5j ...
		cmp	[ebp+var_10], 0
		jnz	short loc_645CCC54
		cmp	[ebp+var_14], 0
		jnz	short loc_645CCC4C
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CCC1A
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11RemoveDa ; "PKCS#11: Remove data object	failed rv=%"...
		mov	[esp+48h+var_48], 4
		call	sub_645CBF0E

loc_645CCC1A:				; CODE XREF: pkcs11h_data_del+203j
		mov	[ebp+var_14], 1
		mov	eax, [ebp+var_1C]
		mov	edx, [ebp+arg_14]
		mov	[esp+48h+var_38], edx
		mov	edx, [ebp+arg_10]
		mov	[esp+48h+var_3C], edx
		mov	[esp+48h+var_40], 0
		mov	edx, [ebp+arg_4]
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], eax
		call	sub_645C414B
		mov	[ebp+var_18], eax

loc_645CCC4C:				; CODE XREF: pkcs11h_data_del+1F9j
		cmp	[ebp+var_18], 0
		jz	short loc_645CCC54
		jmp	short loc_645CCC5E
; ---------------------------------------------------------------------------

loc_645CCC54:				; CODE XREF: pkcs11h_data_del+175j
					; pkcs11h_data_del+1F3j ...
		cmp	[ebp+var_10], 0
		jz	loc_645CCB65

loc_645CCC5E:				; CODE XREF: pkcs11h_data_del+14Dj
					; pkcs11h_data_del+169j ...
		cmp	[ebp+var_C], 0
		jz	short loc_645CCC79
		mov	eax, [ebp+var_1C]
		add	eax, 2Ch
		mov	[esp+48h+var_48], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645CCC79:				; CODE XREF: pkcs11h_data_del+277j
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_645CCC92
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], eax
		call	sub_645C3851
		mov	[ebp+var_1C], 0

loc_645CCC92:				; CODE XREF: pkcs11h_data_del+293j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CCCC6
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11Pkcs1_67 ; "PKCS#11: pkcs11h_data_del return rv=%lu"...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645CCCC6:				; CODE XREF: pkcs11h_data_del+2AFj
		mov	eax, [ebp+var_18]
		leave
		retn
pkcs11h_data_del endp

; Exported entry  30. pkcs11h_data_freeDataIdList

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_data_freeDataIdList
pkcs11h_data_freeDataIdList proc near	; CODE XREF: pkcs11h_data_enumDataObjects+45Fp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CCCFE
		mov	[esp+28h+var_20], 22Fh ; int
		mov	[esp+28h+var_24], offset aPkcs11hData_c	; "pkcs11h-data.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_5 ; "_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CCCFF
; ---------------------------------------------------------------------------

loc_645CCCFE:				; CODE XREF: pkcs11h_data_freeDataIdList+13j
		nop

loc_645CCCFF:				; CODE XREF: pkcs11h_data_freeDataIdList+31j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CCD28
		mov	[esp+28h+var_20], 230h ; int
		mov	[esp+28h+var_24], offset aPkcs11hData_c	; "pkcs11h-data.c"
		mov	[esp+28h+var_28], offset a_g_pkcs11h_d_6 ; "_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CCD29
; ---------------------------------------------------------------------------

loc_645CCD28:				; CODE XREF: pkcs11h_data_freeDataIdList+3Dj
		nop

loc_645CCD29:				; CODE XREF: pkcs11h_data_freeDataIdList+5Bj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CCD50
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_68 ; "PKCS#11: pkcs11h_freeDataIdList entry t"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E
		jmp	short loc_645CCD9B
; ---------------------------------------------------------------------------

loc_645CCD50:				; CODE XREF: pkcs11h_data_freeDataIdList+66j
		jmp	short loc_645CCD9B
; ---------------------------------------------------------------------------

loc_645CCD52:				; CODE XREF: pkcs11h_data_freeDataIdList+D4j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+var_10]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645CCD78
		mov	eax, [ebp+var_10]
		add	eax, 4
		mov	[esp+28h+var_28], eax
		call	sub_645C156B

loc_645CCD78:				; CODE XREF: pkcs11h_data_freeDataIdList+9Dj
		mov	eax, [ebp+var_10]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_645CCD90
		mov	eax, [ebp+var_10]
		add	eax, 8
		mov	[esp+28h+var_28], eax
		call	sub_645C156B

loc_645CCD90:				; CODE XREF: pkcs11h_data_freeDataIdList+B5j
		lea	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	sub_645C156B

loc_645CCD9B:				; CODE XREF: pkcs11h_data_freeDataIdList+83j
					; pkcs11h_data_freeDataIdList:loc_645CCD50j
		cmp	[ebp+var_C], 0
		jnz	short loc_645CCD52
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CCDBF
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_69 ; "PKCS#11: pkcs11h_token_freeDataIdList r"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CCDBF:				; CODE XREF: pkcs11h_data_freeDataIdList+DEj
		mov	eax, 0
		leave
		retn
pkcs11h_data_freeDataIdList endp

; Exported entry  29. pkcs11h_data_enumDataObjects

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_data_enumDataObjects(void	*, int,	int, int, int)
		public pkcs11h_data_enumDataObjects
pkcs11h_data_enumDataObjects proc near

Dst		= dword	ptr -78h
Src		= dword	ptr -74h
Size		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 74h
		mov	[ebp+var_C], 0
		mov	[ebp+var_24], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 6
		mov	[ebp+var_18], 0
		mov	[ebp+var_1C], 0
		mov	eax, ds:dword_645D8030
		test	eax, eax
		jnz	short loc_645CCE1E
		mov	[esp+78h+Size],	260h ; int
		mov	[esp+78h+Src], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+78h+Dst], offset a_g_pkcs11h_d_5 ;	"_g_pkcs11h_data!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CCE1F
; ---------------------------------------------------------------------------

loc_645CCE1E:				; CODE XREF: pkcs11h_data_enumDataObjects+38j
		nop

loc_645CCE1F:				; CODE XREF: pkcs11h_data_enumDataObjects+56j
		mov	eax, ds:dword_645D8030
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_645CCE48
		mov	[esp+78h+Size],	261h ; int
		mov	[esp+78h+Src], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+78h+Dst], offset a_g_pkcs11h_d_6 ;	"_g_pkcs11h_data->initialized"
		call	sub_645D02E0
		jmp	short loc_645CCE49
; ---------------------------------------------------------------------------

loc_645CCE48:				; CODE XREF: pkcs11h_data_enumDataObjects+62j
		nop

loc_645CCE49:				; CODE XREF: pkcs11h_data_enumDataObjects+80j
		cmp	[ebp+arg_10], 0
		jnz	short loc_645CCE6D
		mov	[esp+78h+Size],	262h ; int
		mov	[esp+78h+Src], offset aPkcs11hData_c ; "pkcs11h-data.c"
		mov	[esp+78h+Dst], offset aP_data_id_list ;	"p_data_id_list!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CCE6E
; ---------------------------------------------------------------------------

loc_645CCE6D:				; CODE XREF: pkcs11h_data_enumDataObjects+87j
		nop

loc_645CCE6E:				; CODE XREF: pkcs11h_data_enumDataObjects+A5j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CCEB6
		cmp	[ebp+arg_4], 0
		setnz	al
		movzx	eax, al
		mov	edx, [ebp+arg_10]
		mov	[esp+78h+var_60], edx
		mov	edx, [ebp+arg_C]
		mov	[esp+78h+var_64], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+78h+var_68], edx
		mov	[esp+78h+var_6C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+Size],	eax
		mov	[esp+78h+Src], offset aPkcs11Pkcs1_70 ;	"PKCS#11: pkcs11h_data_enumDataObjects e"...
		mov	[esp+78h+Dst], 5
		call	sub_645CBF0E

loc_645CCEB6:				; CODE XREF: pkcs11h_data_enumDataObjects+B0j
		mov	eax, [ebp+arg_10]
		mov	dword ptr [eax], 0
		lea	eax, [ebp+var_24]
		mov	[esp+78h+Src], eax ; int
		mov	eax, [ebp+arg_0]
		mov	[esp+78h+Dst], eax ; void *
		call	sub_645C35B0
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CCEDF
		jmp	loc_645CD1E5
; ---------------------------------------------------------------------------

loc_645CCEDF:				; CODE XREF: pkcs11h_data_enumDataObjects+112j
		mov	eax, [ebp+var_24]
		add	eax, 2Ch
		mov	[esp+78h+Dst], eax
		call	sub_645C24B4
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CCEFB
		jmp	loc_645CD1E5
; ---------------------------------------------------------------------------

loc_645CCEFB:				; CODE XREF: pkcs11h_data_enumDataObjects+12Ej
		mov	[ebp+var_C], 1
		jmp	loc_645CD1C5
; ---------------------------------------------------------------------------

loc_645CCF07:				; CODE XREF: pkcs11h_data_enumDataObjects+403j
		mov	[ebp+var_28], 0
		mov	[ebp+var_34], 0
		lea	eax, [ebp+var_28]
		mov	[ebp+var_30], eax
		mov	[ebp+var_2C], 4
		mov	[ebp+var_38], 0
		mov	[ebp+var_3C], 0
		mov	eax, [ebp+var_24]
		mov	[esp+78h+Dst], eax
		call	sub_645C3FB4
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	loc_645CD13B
		mov	eax, [ebp+var_24]
		lea	edx, [ebp+var_3C]
		mov	[esp+78h+var_68], edx
		lea	edx, [ebp+var_38]
		mov	[esp+78h+var_6C], edx
		mov	[esp+78h+Size],	1
		lea	edx, [ebp+var_34]
		mov	[esp+78h+Src], edx
		mov	[esp+78h+Dst], eax
		call	sub_645C324E
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	loc_645CD13B
		mov	[ebp+var_20], 0
		jmp	loc_645CD121
; ---------------------------------------------------------------------------

loc_645CCF89:				; CODE XREF: pkcs11h_data_enumDataObjects+361j
		mov	[ebp+var_40], 0
		mov	[ebp+var_58], 10h
		mov	[ebp+var_54], 0
		mov	[ebp+var_50], 0
		mov	[ebp+var_4C], 3
		mov	[ebp+var_48], 0
		mov	[ebp+var_44], 0
		mov	eax, [ebp+var_38]
		mov	edx, [ebp+var_20]
		shl	edx, 2
		add	eax, edx
		mov	edx, [eax]
		mov	eax, [ebp+var_24]
		mov	[esp+78h+var_6C], 2
		lea	ecx, [ebp+var_58]
		mov	[esp+78h+Size],	ecx
		mov	[esp+78h+Src], edx
		mov	[esp+78h+Dst], eax
		call	sub_645C2F6F
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	loc_645CD0C8
		mov	[esp+78h+Src], 0Ch ; size_t
		lea	eax, [ebp+var_40]
		mov	[esp+78h+Dst], eax ; int
		call	sub_645C14C0
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	loc_645CD0C8
		mov	eax, [ebp+var_50]
		lea	edx, [eax+1]
		mov	eax, [ebp+var_40]
		add	eax, 4
		mov	[esp+78h+Src], edx ; size_t
		mov	[esp+78h+Dst], eax ; int
		call	sub_645C14C0
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	loc_645CD0C8
		mov	eax, [ebp+var_44]
		lea	edx, [eax+1]
		mov	eax, [ebp+var_40]
		add	eax, 8
		mov	[esp+78h+Src], edx ; size_t
		mov	[esp+78h+Dst], eax ; int
		call	sub_645C14C0
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_645CD0C8
		mov	ecx, [ebp+var_50]
		mov	edx, [ebp+var_54]
		mov	eax, [ebp+var_40]
		mov	eax, [eax+4]
		mov	[esp+78h+Size],	ecx ; Size
		mov	[esp+78h+Src], edx ; Src
		mov	[esp+78h+Dst], eax ; Dst
		call	_memmove
		mov	eax, [ebp+var_40]
		mov	edx, [eax+4]
		mov	eax, [ebp+var_50]
		add	eax, edx
		mov	byte ptr [eax],	0
		mov	ecx, [ebp+var_44]
		mov	edx, [ebp+var_48]
		mov	eax, [ebp+var_40]
		mov	eax, [eax+8]
		mov	[esp+78h+Size],	ecx ; Size
		mov	[esp+78h+Src], edx ; Src
		mov	[esp+78h+Dst], eax ; Dst
		call	_memmove
		mov	eax, [ebp+var_40]
		mov	edx, [eax+8]
		mov	eax, [ebp+var_44]
		add	eax, edx
		mov	byte ptr [eax],	0
		mov	eax, [ebp+var_40]
		mov	edx, [ebp+var_10]
		mov	[eax], edx
		mov	eax, [ebp+var_40]
		mov	[ebp+var_10], eax
		mov	[ebp+var_40], 0
		mov	[ebp+var_14], 0

loc_645CD0C8:				; CODE XREF: pkcs11h_data_enumDataObjects+226j
					; pkcs11h_data_enumDataObjects+246j ...
		mov	[esp+78h+Src], 2
		lea	eax, [ebp+var_58]
		mov	[esp+78h+Dst], eax
		call	sub_645C316B
		mov	eax, [ebp+var_40]
		test	eax, eax
		jz	short loc_645CD11D
		mov	eax, [ebp+var_40]
		mov	eax, [eax+4]
		test	eax, eax
		jz	short loc_645CD0FA
		mov	eax, [ebp+var_40]
		add	eax, 4
		mov	[esp+78h+Dst], eax
		call	sub_645C156B

loc_645CD0FA:				; CODE XREF: pkcs11h_data_enumDataObjects+324j
		mov	eax, [ebp+var_40]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_645CD112
		mov	eax, [ebp+var_40]
		add	eax, 8
		mov	[esp+78h+Dst], eax
		call	sub_645C156B

loc_645CD112:				; CODE XREF: pkcs11h_data_enumDataObjects+33Cj
		lea	eax, [ebp+var_40]
		mov	[esp+78h+Dst], eax
		call	sub_645C156B

loc_645CD11D:				; CODE XREF: pkcs11h_data_enumDataObjects+31Aj
		add	[ebp+var_20], 1

loc_645CD121:				; CODE XREF: pkcs11h_data_enumDataObjects+1BEj
		mov	eax, [ebp+var_3C]
		cmp	[ebp+var_20], eax
		jb	loc_645CCF89
		mov	[ebp+var_18], 1
		mov	[ebp+var_14], 0

loc_645CD13B:				; CODE XREF: pkcs11h_data_enumDataObjects+17Cj
					; pkcs11h_data_enumDataObjects+1B1j
		mov	eax, [ebp+var_38]
		test	eax, eax
		jz	short loc_645CD14D
		lea	eax, [ebp+var_38]
		mov	[esp+78h+Dst], eax
		call	sub_645C156B

loc_645CD14D:				; CODE XREF: pkcs11h_data_enumDataObjects+37Aj
		cmp	[ebp+var_18], 0
		jnz	short loc_645CD1C5
		cmp	[ebp+var_1C], 0
		jnz	short loc_645CD1BF
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CD18D
		mov	eax, [ebp+var_14]
		mov	[esp+78h+Dst], eax
		call	pkcs11h_getMessage
		mov	[esp+78h+var_6C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+78h+Size],	eax
		mov	[esp+78h+Src], offset aPkcs11Enumerat ;	"PKCS#11: Enumerate data objects failed	"...
		mov	[esp+78h+Dst], 4
		call	sub_645CBF0E

loc_645CD18D:				; CODE XREF: pkcs11h_data_enumDataObjects+39Bj
		mov	[ebp+var_1C], 1
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+arg_C]
		mov	[esp+78h+var_68], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+78h+var_6C], edx
		mov	[esp+78h+Size],	1
		mov	edx, [ebp+arg_4]
		mov	[esp+78h+Src], edx
		mov	[esp+78h+Dst], eax
		call	sub_645C414B
		mov	[ebp+var_14], eax

loc_645CD1BF:				; CODE XREF: pkcs11h_data_enumDataObjects+391j
		cmp	[ebp+var_14], 0
		jnz	short loc_645CD1E5

loc_645CD1C5:				; CODE XREF: pkcs11h_data_enumDataObjects+13Cj
					; pkcs11h_data_enumDataObjects+38Bj
		cmp	[ebp+var_18], 0
		jz	loc_645CCF07
		mov	eax, [ebp+arg_10]
		mov	edx, [ebp+var_10]
		mov	[eax], edx
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0

loc_645CD1E5:				; CODE XREF: pkcs11h_data_enumDataObjects+114j
					; pkcs11h_data_enumDataObjects+130j ...
		cmp	[ebp+var_C], 0
		jz	short loc_645CD200
		mov	eax, [ebp+var_24]
		add	eax, 2Ch
		mov	[esp+78h+Dst], eax
		call	sub_645C24F5
		mov	[ebp+var_C], 0

loc_645CD200:				; CODE XREF: pkcs11h_data_enumDataObjects+423j
		mov	eax, [ebp+var_24]
		test	eax, eax
		jz	short loc_645CD219
		mov	eax, [ebp+var_24]
		mov	[esp+78h+Dst], eax
		call	sub_645C3851
		mov	[ebp+var_24], 0

loc_645CD219:				; CODE XREF: pkcs11h_data_enumDataObjects+43Fj
		cmp	[ebp+var_10], 0
		jz	short loc_645CD231
		mov	eax, [ebp+var_10]
		mov	[esp+78h+Dst], eax
		call	pkcs11h_data_freeDataIdList
		mov	[ebp+var_10], 0

loc_645CD231:				; CODE XREF: pkcs11h_data_enumDataObjects+457j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CD26E
		mov	eax, [ebp+arg_10]
		mov	ebx, [eax]
		mov	eax, [ebp+var_14]
		mov	[esp+78h+Dst], eax
		call	pkcs11h_getMessage
		mov	[esp+78h+var_68], ebx
		mov	[esp+78h+var_6C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+78h+Size],	eax
		mov	[esp+78h+Src], offset aPkcs11Pkcs1_71 ;	"PKCS#11: pkcs11h_data_enumDataObjects r"...
		mov	[esp+78h+Dst], 5
		call	sub_645CBF0E

loc_645CD26E:				; CODE XREF: pkcs11h_data_enumDataObjects+473j
		mov	eax, [ebp+var_14]
		add	esp, 74h
		pop	ebx
		pop	ebp
		retn
pkcs11h_data_enumDataObjects endp

; ---------------------------------------------------------------------------
		align 4
; Exported entry  71. pkcs11h_token_serializeTokenId

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_token_serializeTokenId
pkcs11h_token_serializeTokenId proc near
					; CODE XREF: pkcs11h_certificate_serializeCertificateId+E3p

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 54h
		mov	[ebp+var_C], 6
		cmp	[ebp+arg_4], 0
		jnz	short loc_645CD2AA
		mov	[esp+58h+var_50], 4Ch ;	int
		mov	[esp+58h+var_54], offset aPkcs11hSeriali ; "pkcs11h-serialization.c"
		mov	[esp+58h+var_58], offset aMaxNull_0 ; "max!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CD2AB
; ---------------------------------------------------------------------------

loc_645CD2AA:				; CODE XREF: pkcs11h_token_serializeTokenId+12j
		nop

loc_645CD2AB:				; CODE XREF: pkcs11h_token_serializeTokenId+30j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CD2CF
		mov	[esp+58h+var_50], 4Dh ;	int
		mov	[esp+58h+var_54], offset aPkcs11hSeriali ; "pkcs11h-serialization.c"
		mov	[esp+58h+var_58], offset aToken_idNull_3 ; "token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CD2D0
; ---------------------------------------------------------------------------

loc_645CD2CF:				; CODE XREF: pkcs11h_token_serializeTokenId+37j
		nop

loc_645CD2D0:				; CODE XREF: pkcs11h_token_serializeTokenId+55j
		mov	eax, [ebp+arg_8]
		add	eax, 400h
		mov	[ebp+var_28], eax
		mov	eax, [ebp+arg_8]
		add	eax, 421h
		mov	[ebp+var_24], eax
		mov	eax, [ebp+arg_8]
		add	eax, 432h
		mov	[ebp+var_20], eax
		mov	eax, [ebp+arg_8]
		add	eax, 443h
		mov	[ebp+var_1C], eax
		mov	[ebp+var_18], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CD345
		cmp	[ebp+arg_0], 0
		jz	short loc_645CD31A
		mov	eax, [ebp+arg_4]
		mov	eax, [eax]
		jmp	short loc_645CD31F
; ---------------------------------------------------------------------------

loc_645CD31A:				; CODE XREF: pkcs11h_token_serializeTokenId+99j
		mov	eax, 0

loc_645CD31F:				; CODE XREF: pkcs11h_token_serializeTokenId+A0j
		mov	edx, [ebp+arg_8]
		mov	[esp+58h+var_48], edx
		mov	[esp+58h+var_4C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], offset aPkcs11Pkcs1_72 ; "PKCS#11: pkcs11h_token_serializeTokenId"...
		mov	[esp+58h+var_58], 5
		call	sub_645CBF0E

loc_645CD345:				; CODE XREF: pkcs11h_token_serializeTokenId+93j
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		jmp	short loc_645CD392
; ---------------------------------------------------------------------------

loc_645CD355:				; CODE XREF: pkcs11h_token_serializeTokenId+123j
		mov	eax, [ebp+var_14]
		mov	eax, [ebp+eax*4+var_28]
		mov	[esp+58h+var_4C], offset a@?_ ;	"\\/\"'%&#@!?$* <>{}[]()`|:;,.+-"
		lea	edx, [ebp+var_2C]
		mov	[esp+58h+var_50], edx ;	int
		mov	[esp+58h+var_54], eax ;	int
		mov	[esp+58h+var_58], 0 ; int
		call	sub_645C2A60
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	loc_645CD44B
		mov	eax, [ebp+var_2C]
		add	[ebp+var_10], eax
		add	[ebp+var_14], 1

loc_645CD392:				; CODE XREF: pkcs11h_token_serializeTokenId+DBj
		mov	eax, [ebp+var_14]
		mov	eax, [ebp+eax*4+var_28]
		test	eax, eax
		jnz	short loc_645CD355
		cmp	[ebp+arg_0], 0
		jz	loc_645CD43C
		mov	eax, [ebp+arg_4]
		mov	eax, [eax]
		cmp	eax, [ebp+var_10]
		jnb	short loc_645CD3BD
		mov	[ebp+var_C], 13h
		jmp	loc_645CD44B
; ---------------------------------------------------------------------------

loc_645CD3BD:				; CODE XREF: pkcs11h_token_serializeTokenId+137j
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		jmp	short loc_645CD423
; ---------------------------------------------------------------------------

loc_645CD3CD:				; CODE XREF: pkcs11h_token_serializeTokenId+1B4j
		mov	eax, [ebp+arg_4]
		mov	eax, [eax]
		sub	eax, [ebp+var_10]
		mov	[ebp+var_30], eax
		mov	eax, [ebp+var_14]
		mov	eax, [ebp+eax*4+var_28]
		mov	edx, [ebp+var_10]
		mov	ecx, [ebp+arg_0]
		add	ecx, edx
		mov	[esp+58h+var_4C], offset a@?_ ;	"\\/\"'%&#@!?$* <>{}[]()`|:;,.+-"
		lea	edx, [ebp+var_30]
		mov	[esp+58h+var_50], edx ;	int
		mov	[esp+58h+var_54], eax ;	int
		mov	[esp+58h+var_58], ecx ;	int
		call	sub_645C2A60
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CD44B
		mov	eax, [ebp+var_30]
		add	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		lea	edx, [eax-1]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	byte ptr [eax],	2Fh
		add	[ebp+var_14], 1

loc_645CD423:				; CODE XREF: pkcs11h_token_serializeTokenId+153j
		mov	eax, [ebp+var_14]
		mov	eax, [ebp+eax*4+var_28]
		test	eax, eax
		jnz	short loc_645CD3CD
		mov	eax, [ebp+var_10]
		lea	edx, [eax-1]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	byte ptr [eax],	0

loc_645CD43C:				; CODE XREF: pkcs11h_token_serializeTokenId+129j
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+var_10]
		mov	[eax], edx
		mov	[ebp+var_C], 0

loc_645CD44B:				; CODE XREF: pkcs11h_token_serializeTokenId+10Aj
					; pkcs11h_token_serializeTokenId+140j ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CD48F
		mov	eax, [ebp+arg_4]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+58h+var_58], eax
		call	pkcs11h_getMessage
		mov	edx, [ebp+arg_0]
		mov	[esp+58h+var_44], edx
		mov	[esp+58h+var_48], ebx
		mov	[esp+58h+var_4C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+58h+var_50], eax
		mov	[esp+58h+var_54], offset aPkcs11Pkcs1_73 ; "PKCS#11: pkcs11h_token_serializeTokenId"...
		mov	[esp+58h+var_58], 5
		call	sub_645CBF0E

loc_645CD48F:				; CODE XREF: pkcs11h_token_serializeTokenId+1DBj
		mov	eax, [ebp+var_C]
		add	esp, 54h
		pop	ebx
		pop	ebp
		retn
pkcs11h_token_serializeTokenId endp

; Exported entry  62. pkcs11h_token_deserializeTokenId

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_token_deserializeTokenId(int, char *)
		public pkcs11h_token_deserializeTokenId
pkcs11h_token_deserializeTokenId proc near
					; CODE XREF: pkcs11h_certificate_deserializeCertificateId+120p

Str		= dword	ptr -58h
Val		= dword	ptr -54h
Count		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
Dest		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		mov	[ebp+Dest], 0
		mov	[ebp+var_C], 0
		mov	[ebp+var_40], 0
		mov	[ebp+var_14], 6
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CD4DE
		mov	[esp+58h+Count], 0AAh ;	int
		mov	[esp+58h+Val], offset aPkcs11hSeriali ;	"pkcs11h-serialization.c"
		mov	[esp+58h+Str], offset aP_token_idNu_0 ;	"p_token_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CD4DF
; ---------------------------------------------------------------------------

loc_645CD4DE:				; CODE XREF: pkcs11h_token_deserializeTokenId+26j
		nop

loc_645CD4DF:				; CODE XREF: pkcs11h_token_deserializeTokenId+44j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645CD503
		mov	[esp+58h+Count], 0ABh ;	int
		mov	[esp+58h+Val], offset aPkcs11hSeriali ;	"pkcs11h-serialization.c"
		mov	[esp+58h+Str], offset aSzNull ;	"sz!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CD504
; ---------------------------------------------------------------------------

loc_645CD503:				; CODE XREF: pkcs11h_token_deserializeTokenId+4Bj
		nop

loc_645CD504:				; CODE XREF: pkcs11h_token_deserializeTokenId+69j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CD530
		mov	eax, [ebp+arg_4]
		mov	[esp+58h+var_4C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+Count], eax
		mov	[esp+58h+Val], offset aPkcs11Pkcs1_74 ;	"PKCS#11: pkcs11h_token_deserializeToken"...
		mov	[esp+58h+Str], 5
		call	sub_645CBF0E

loc_645CD530:				; CODE XREF: pkcs11h_token_deserializeTokenId+74j
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_4]
		mov	[esp+58h+Val], eax ; char *
		lea	eax, [ebp+var_40]
		mov	[esp+58h+Str], eax ; int
		call	sub_645C15B5
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CD559
		jmp	loc_645CD6C9
; ---------------------------------------------------------------------------

loc_645CD559:				; CODE XREF: pkcs11h_token_deserializeTokenId+BAj
		mov	eax, [ebp+var_40]
		mov	[ebp+var_C], eax
		lea	eax, [ebp+Dest]
		mov	[esp+58h+Str], eax
		call	sub_645C4A8D
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CD578
		jmp	loc_645CD6C9
; ---------------------------------------------------------------------------

loc_645CD578:				; CODE XREF: pkcs11h_token_deserializeTokenId+D9j
		mov	eax, [ebp+Dest]
		add	eax, 400h
		mov	[ebp+var_38], eax
		mov	[ebp+var_34], 21h
		mov	eax, [ebp+Dest]
		add	eax, 421h
		mov	[ebp+var_30], eax
		mov	[ebp+var_2C], 11h
		mov	eax, [ebp+Dest]
		add	eax, 432h
		mov	[ebp+var_28], eax
		mov	[ebp+var_24], 11h
		mov	eax, [ebp+Dest]
		add	eax, 443h
		mov	[ebp+var_20], eax
		mov	[ebp+var_1C], 21h
		mov	[ebp+var_10], 0
		jmp	loc_645CD689
; ---------------------------------------------------------------------------

loc_645CD5CC:				; CODE XREF: pkcs11h_token_deserializeTokenId+1F5j
		mov	[ebp+var_18], 0
		cmp	[ebp+var_10], 3
		jz	short loc_645CD607
		mov	[esp+58h+Val], 2Fh ; Val
		mov	eax, [ebp+var_C]
		mov	[esp+58h+Str], eax ; Str
		call	_strchr
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jnz	short loc_645CD601
		mov	[ebp+var_14], 13h
		jmp	loc_645CD6C9
; ---------------------------------------------------------------------------

loc_645CD601:				; CODE XREF: pkcs11h_token_deserializeTokenId+15Bj
		mov	eax, [ebp+var_18]
		mov	byte ptr [eax],	0

loc_645CD607:				; CODE XREF: pkcs11h_token_deserializeTokenId+13Fj
		lea	eax, [ebp+var_44]
		mov	[esp+58h+Count], eax
		mov	eax, [ebp+var_C]
		mov	[esp+58h+Val], eax
		mov	[esp+58h+Str], 0
		call	sub_645C2C0E
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CD62F
		jmp	loc_645CD6C9
; ---------------------------------------------------------------------------

loc_645CD62F:				; CODE XREF: pkcs11h_token_deserializeTokenId+190j
		mov	eax, [ebp+var_10]
		mov	edx, [ebp+eax*8+var_34]
		mov	eax, [ebp+var_44]
		cmp	edx, eax
		jnb	short loc_645CD649
		mov	[ebp+var_14], 13h
		jmp	loc_645CD6C9
; ---------------------------------------------------------------------------

loc_645CD649:				; CODE XREF: pkcs11h_token_deserializeTokenId+1A3j
		mov	eax, [ebp+var_10]
		mov	eax, [ebp+eax*8+var_34]
		mov	[ebp+var_44], eax
		mov	eax, [ebp+var_10]
		mov	eax, [ebp+eax*8+var_38]
		lea	edx, [ebp+var_44]
		mov	[esp+58h+Count], edx
		mov	edx, [ebp+var_C]
		mov	[esp+58h+Val], edx
		mov	[esp+58h+Str], eax
		call	sub_645C2C0E
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CD67C
		nop
		jmp	short loc_645CD6C9
; ---------------------------------------------------------------------------

loc_645CD67C:				; CODE XREF: pkcs11h_token_deserializeTokenId+1DFj
		mov	eax, [ebp+var_18]
		add	eax, 1
		mov	[ebp+var_C], eax
		add	[ebp+var_10], 1

loc_645CD689:				; CODE XREF: pkcs11h_token_deserializeTokenId+12Fj
		cmp	[ebp+var_10], 3
		jle	loc_645CD5CC
		mov	eax, [ebp+Dest]
		lea	edx, [eax+443h]
		mov	eax, [ebp+Dest]
		mov	[esp+58h+Count], 400h ;	Count
		mov	[esp+58h+Val], edx ; Source
		mov	[esp+58h+Str], eax ; Dest
		call	_strncpy
		mov	edx, [ebp+Dest]
		mov	eax, [ebp+arg_0]
		mov	[eax], edx
		mov	[ebp+Dest], 0
		mov	[ebp+var_14], 0

loc_645CD6C9:				; CODE XREF: pkcs11h_token_deserializeTokenId+BCj
					; pkcs11h_token_deserializeTokenId+DBj	...
		mov	eax, [ebp+var_40]
		test	eax, eax
		jz	short loc_645CD6DB
		lea	eax, [ebp+var_40]
		mov	[esp+58h+Str], eax
		call	sub_645C156B

loc_645CD6DB:				; CODE XREF: pkcs11h_token_deserializeTokenId+236j
		mov	eax, [ebp+Dest]
		test	eax, eax
		jz	short loc_645CD6ED
		mov	eax, [ebp+Dest]
		mov	[esp+58h+Str], eax
		call	pkcs11h_token_freeTokenId

loc_645CD6ED:				; CODE XREF: pkcs11h_token_deserializeTokenId+248j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CD721
		mov	eax, [ebp+var_14]
		mov	[esp+58h+Str], eax
		call	pkcs11h_getMessage
		mov	[esp+58h+var_4C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+58h+Count], eax
		mov	[esp+58h+Val], offset aPkcs11Pkcs1_75 ;	"PKCS#11: pkcs11h_token_deserializeToken"...
		mov	[esp+58h+Str], 5
		call	sub_645CBF0E

loc_645CD721:				; CODE XREF: pkcs11h_token_deserializeTokenId+25Dj
		mov	eax, [ebp+var_14]
		leave
		retn
pkcs11h_token_deserializeTokenId endp

; Exported entry  20. pkcs11h_certificate_serializeCertificateId

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_certificate_serializeCertificateId
pkcs11h_certificate_serializeCertificateId proc	near

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 30h
		mov	[ebp+var_C], 6
		mov	[ebp+var_10], 0
		mov	[ebp+var_18], 0
		mov	[ebp+var_14], 0
		cmp	[ebp+arg_4], 0
		jnz	short loc_645CD76E
		mov	[esp+38h+var_30], 12Fh ; int
		mov	[esp+38h+var_34], offset aPkcs11hSeriali ; "pkcs11h-serialization.c"
		mov	[esp+38h+var_38], offset aMaxNull_0 ; "max!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CD76F
; ---------------------------------------------------------------------------

loc_645CD76E:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+28j
		nop

loc_645CD76F:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+46j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CD793
		mov	[esp+38h+var_30], 130h ; int
		mov	[esp+38h+var_34], offset aPkcs11hSeriali ; "pkcs11h-serialization.c"
		mov	[esp+38h+var_38], offset aCertificate__0 ; "certificate_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CD794
; ---------------------------------------------------------------------------

loc_645CD793:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+4Dj
		nop

loc_645CD794:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+6Bj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CD7D6
		cmp	[ebp+arg_0], 0
		jz	short loc_645CD7AB
		mov	eax, [ebp+arg_4]
		mov	eax, [eax]
		jmp	short loc_645CD7B0
; ---------------------------------------------------------------------------

loc_645CD7AB:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+7Cj
		mov	eax, 0

loc_645CD7B0:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+83j
		mov	edx, [ebp+arg_8]
		mov	[esp+38h+var_28], edx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_76 ; "PKCS#11: pkcs11h_certificate_serializeC"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645CD7D6:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+76j
		cmp	[ebp+arg_0], 0
		jz	short loc_645CD7EA
		mov	eax, [ebp+arg_4]
		mov	eax, [eax]
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_18]
		mov	[ebp+var_10], eax

loc_645CD7EA:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+B4j
		mov	eax, [ebp+arg_4]
		mov	dword ptr [eax], 0
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[esp+38h+var_30], eax
		lea	eax, [ebp+var_18]
		mov	[esp+38h+var_34], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_token_serializeTokenId
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CD81C
		jmp	loc_645CD8A0
; ---------------------------------------------------------------------------

loc_645CD81C:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+EFj
		mov	eax, [ebp+arg_8]
		mov	eax, [eax+408h]
		lea	edx, [eax+eax]
		mov	eax, [ebp+var_18]
		add	eax, edx
		add	eax, 1
		mov	[ebp+var_14], eax
		cmp	[ebp+arg_0], 0
		jz	short loc_645CD891
		mov	eax, [ebp+var_10]
		cmp	eax, [ebp+var_14]
		jnb	short loc_645CD84A
		mov	[ebp+var_C], 13h
		jmp	short loc_645CD8A0
; ---------------------------------------------------------------------------

loc_645CD84A:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+119j
		mov	eax, [ebp+var_18]
		lea	edx, [eax-1]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	byte ptr [eax],	2Fh
		mov	eax, [ebp+arg_8]
		mov	edx, [eax+408h]
		mov	eax, [ebp+arg_8]
		mov	eax, [eax+404h]
		mov	ecx, [ebp+var_18]
		mov	ebx, [ebp+var_10]
		sub	ebx, ecx
		mov	esi, [ebp+var_18]
		mov	ecx, [ebp+arg_0]
		add	ecx, esi
		mov	[esp+38h+var_2C], edx
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_38], ecx
		call	sub_645C297A
		mov	[ebp+var_C], eax

loc_645CD891:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+111j
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+var_14]
		mov	[eax], edx
		mov	[ebp+var_C], 0

loc_645CD8A0:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+F1j
					; pkcs11h_certificate_serializeCertificateId+122j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CD8E4
		mov	eax, [ebp+arg_4]
		mov	ebx, [eax]
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	edx, [ebp+arg_0]
		mov	[esp+38h+var_24], edx
		mov	[esp+38h+var_28], ebx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Pkcs1_77 ; "PKCS#11: pkcs11h_certificate_serializeC"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645CD8E4:				; CODE XREF: pkcs11h_certificate_serializeCertificateId+182j
		mov	eax, [ebp+var_C]
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	ebp
		retn
pkcs11h_certificate_serializeCertificateId endp

; Exported entry   5. pkcs11h_certificate_deserializeCertificateId

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl pkcs11h_certificate_deserializeCertificateId(int,	char *)
		public pkcs11h_certificate_deserializeCertificateId
pkcs11h_certificate_deserializeCertificateId proc near

Str		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	[ebp+var_14], 0
		mov	[ebp+var_C], 6
		mov	[ebp+var_10], 0
		mov	[ebp+var_18], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CD935
		mov	[esp+28h+var_20], 175h ; int
		mov	[esp+28h+var_24], offset aPkcs11hSeriali ; "pkcs11h-serialization.c"
		mov	[esp+28h+Str], offset aP_certificat_1 ;	"p_certificate_id!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CD936
; ---------------------------------------------------------------------------

loc_645CD935:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+27j
		nop

loc_645CD936:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+45j
		cmp	[ebp+arg_4], 0
		jnz	short loc_645CD95A
		mov	[esp+28h+var_20], 176h ; int
		mov	[esp+28h+var_24], offset aPkcs11hSeriali ; "pkcs11h-serialization.c"
		mov	[esp+28h+Str], offset aSzNull ;	"sz!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CD95B
; ---------------------------------------------------------------------------

loc_645CD95A:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+4Cj
		nop

loc_645CD95B:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+6Aj
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CD990
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_78 ; "PKCS#11: pkcs11h_certificate_deserializ"...
		mov	[esp+28h+Str], 5
		call	sub_645CBF0E

loc_645CD990:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+7Ej
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_24], eax ;	char *
		lea	eax, [ebp+var_18]
		mov	[esp+28h+Str], eax ; int
		call	sub_645C15B5
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CD9B0
		jmp	loc_645CDAA2
; ---------------------------------------------------------------------------

loc_645CD9B0:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+BBj
		mov	eax, [ebp+var_18]
		mov	[ebp+var_10], eax
		lea	eax, [ebp+var_14]
		mov	[esp+28h+Str], eax
		call	sub_645C5769
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CD9CF
		jmp	loc_645CDAA2
; ---------------------------------------------------------------------------

loc_645CD9CF:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+DAj
		mov	eax, [ebp+var_18]
		mov	[esp+28h+var_24], 2Fh ;	Ch
		mov	[esp+28h+Str], eax ; Str
		call	_strrchr
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_645CD9F7
		mov	[ebp+var_C], 13h
		jmp	loc_645CDAA2
; ---------------------------------------------------------------------------

loc_645CD9F7:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+FBj
		mov	eax, [ebp+var_10]
		mov	byte ptr [eax],	0
		add	[ebp+var_10], 1
		mov	edx, [ebp+var_18]
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_24], edx ;	char *
		mov	[esp+28h+Str], eax ; int
		call	pkcs11h_token_deserializeTokenId
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CDA21
		jmp	loc_645CDAA2
; ---------------------------------------------------------------------------

loc_645CDA21:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+12Cj
		mov	ebx, [ebp+var_14]
		mov	eax, [ebp+var_10]
		mov	[esp+28h+Str], eax ; Str
		call	_strlen
		shr	eax, 1
		mov	[ebx+408h], eax
		mov	eax, [ebp+var_14]
		mov	eax, [eax+408h]
		mov	edx, [ebp+var_14]
		add	edx, 404h
		mov	[esp+28h+var_24], eax ;	size_t
		mov	[esp+28h+Str], edx ; int
		call	sub_645C14C0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CDAA2
		mov	eax, [ebp+var_14]
		lea	edx, [eax+408h]
		mov	eax, [ebp+var_14]
		mov	eax, [eax+404h]
		mov	[esp+28h+var_20], edx
		mov	edx, [ebp+var_10]
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+Str], eax
		call	sub_645C281A
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CDAA2
		mov	edx, [ebp+var_14]
		mov	eax, [ebp+arg_0]
		mov	[eax], edx
		mov	[ebp+var_14], 0
		mov	[ebp+var_C], 0

loc_645CDAA2:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+BDj
					; pkcs11h_certificate_deserializeCertificateId+DCj ...
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_645CDABB
		mov	eax, [ebp+var_14]
		mov	[esp+28h+Str], eax
		call	pkcs11h_certificate_freeCertificateId
		mov	[ebp+var_14], 0

loc_645CDABB:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+1B9j
		mov	eax, [ebp+var_18]
		test	eax, eax
		jz	short loc_645CDACD
		lea	eax, [ebp+var_18]
		mov	[esp+28h+Str], eax
		call	sub_645C156B

loc_645CDACD:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+1D2j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CDB01
		mov	eax, [ebp+var_C]
		mov	[esp+28h+Str], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_79 ; "PKCS#11: pkcs11h_certificate_deserializ"...
		mov	[esp+28h+Str], 5
		call	sub_645CBF0E

loc_645CDB01:				; CODE XREF: pkcs11h_certificate_deserializeCertificateId+1E7j
		mov	eax, [ebp+var_C]
		add	esp, 24h
		pop	ebx
		pop	ebp
		retn
pkcs11h_certificate_deserializeCertificateId endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CDB0C	proc near		; DATA XREF: sub_645CE6CD+71o
					; sub_645CE6CD+D3o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CDB5A
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_1C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11__pkc_22 ; "PKCS#11: __pkcs11h_openssl_ex_data_dup "...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645CDB5A:				; CODE XREF: sub_645CDB0C+Ej
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CDB7E
		mov	[esp+38h+var_30], 80h ;	int
		mov	[esp+38h+var_34], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+38h+var_38], offset aFrom_dNull ; "from_d!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CDB7F
; ---------------------------------------------------------------------------

loc_645CDB7E:				; CODE XREF: sub_645CDB0C+52j
		nop

loc_645CDB7F:				; CODE XREF: sub_645CDB0C+70j
		mov	eax, [ebp+arg_8]
		mov	eax, [eax]
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CDBC4
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CDBB5
		mov	eax, [ebp+var_C]
		mov	eax, [eax+4]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11__pkc_23 ; "PKCS#11: __pkcs11h_openssl_ex_data_dup "...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645CDBB5:				; CODE XREF: sub_645CDB0C+89j
		mov	eax, [ebp+var_C]
		mov	eax, [eax+4]
		lea	edx, [eax+1]
		mov	eax, [ebp+var_C]
		mov	[eax+4], edx

loc_645CDBC4:				; CODE XREF: sub_645CDB0C+7Fj
		mov	eax, 1
		leave
		retn
sub_645CDB0C	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CDBCB	proc near		; DATA XREF: sub_645CE6CD+69o
					; sub_645CE6CD+CBo

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_C], eax
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CDC1F
		mov	eax, [ebp+arg_14]
		mov	[esp+38h+var_1C], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11__pkc_24 ; "PKCS#11: __pkcs11h_openssl_ex_data_free"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645CDC1F:				; CODE XREF: sub_645CDBCB+14j
		cmp	[ebp+var_C], 0
		jz	short locret_645CDC30
		mov	eax, [ebp+var_C]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_openssl_freeSession

locret_645CDC30:			; CODE XREF: sub_645CDBCB+58j
		leave
		retn
sub_645CDBCB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CDC32	proc near		; CODE XREF: sub_645CDCD1+Cp
					; sub_645CDF10+Cp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CDC63
		mov	[esp+28h+var_20], 0B3h ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aRsaNull ; "rsa!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CDC64
; ---------------------------------------------------------------------------

loc_645CDC63:				; CODE XREF: sub_645CDC32+11j
		nop

loc_645CDC64:				; CODE XREF: sub_645CDC32+2Fj
		mov	eax, ds:dword_645D8078
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	_RSA_get_ex_data
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CDC9F
		mov	[esp+28h+var_20], 0B7h ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aSessionNull_2	; "session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CDCA0
; ---------------------------------------------------------------------------

loc_645CDC9F:				; CODE XREF: sub_645CDC32+4Dj
		nop

loc_645CDCA0:				; CODE XREF: sub_645CDC32+6Bj
		mov	eax, [ebp+var_C]
		mov	eax, [eax+10h]
		test	eax, eax
		jnz	short loc_645CDCC8
		mov	[esp+28h+var_20], 0B8h ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aSessionCertifi ; "session->certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CDCC9
; ---------------------------------------------------------------------------

loc_645CDCC8:				; CODE XREF: sub_645CDC32+76j
		nop

loc_645CDCC9:				; CODE XREF: sub_645CDC32+94j
		mov	eax, [ebp+var_C]
		mov	eax, [eax+10h]
		leave
		retn
sub_645CDC32	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CDCD1	proc near		; DATA XREF: sub_645CE6CD+4Bo

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 48h
		mov	eax, [ebp+arg_C]
		mov	[esp+48h+var_48], eax
		call	sub_645CDC32
		mov	[ebp+var_18], eax
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 1
		mov	[ebp+var_14], 6
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_1C], eax
		cmp	[ebp+arg_4], 0
		jnz	short loc_645CDD24
		mov	[esp+48h+var_40], 0D8h ; int
		mov	[esp+48h+var_44], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+48h+var_48], offset aFromNull_1 ; "from!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CDD25
; ---------------------------------------------------------------------------

loc_645CDD24:				; CODE XREF: sub_645CDCD1+33j
		nop

loc_645CDD25:				; CODE XREF: sub_645CDCD1+51j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CDD49
		mov	[esp+48h+var_40], 0D9h ; int
		mov	[esp+48h+var_44], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+48h+var_48], offset aToNull_1 ; "to!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CDD4A
; ---------------------------------------------------------------------------

loc_645CDD49:				; CODE XREF: sub_645CDCD1+58j
		nop

loc_645CDD4A:				; CODE XREF: sub_645CDCD1+76j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645CDD6E
		mov	[esp+48h+var_40], 0DAh ; int
		mov	[esp+48h+var_44], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+48h+var_48], offset aRsaNull ; "rsa!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CDD6F
; ---------------------------------------------------------------------------

loc_645CDD6E:				; CODE XREF: sub_645CDCD1+7Dj
		nop

loc_645CDD6F:				; CODE XREF: sub_645CDCD1+9Bj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CDDB0
		mov	eax, [ebp+arg_10]
		mov	[esp+48h+var_30], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+48h+var_34], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+48h+var_38], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11__pkc_25 ; "PKCS#11: __pkcs11h_openssl_rsa_dec ente"...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645CDDB0:				; CODE XREF: sub_645CDCD1+A6j
		mov	eax, [ebp+arg_10]
		cmp	eax, 2
		jz	short loc_645CDDE2
		cmp	eax, 2
		jg	short loc_645CDDC4
		cmp	eax, 1
		jz	short loc_645CDDD0
		jmp	short loc_645CDDF3
; ---------------------------------------------------------------------------

loc_645CDDC4:				; CODE XREF: sub_645CDCD1+EAj
		cmp	eax, 3
		jz	short loc_645CDDEB
		cmp	eax, 4
		jz	short loc_645CDDD9
		jmp	short loc_645CDDF3
; ---------------------------------------------------------------------------

loc_645CDDD0:				; CODE XREF: sub_645CDCD1+EFj
		mov	[ebp+var_10], 1
		jmp	short loc_645CDDF3
; ---------------------------------------------------------------------------

loc_645CDDD9:				; CODE XREF: sub_645CDCD1+FBj
		mov	[ebp+var_10], 9
		jmp	short loc_645CDDF3
; ---------------------------------------------------------------------------

loc_645CDDE2:				; CODE XREF: sub_645CDCD1+E5j
		mov	[ebp+var_14], 70h
		jmp	short loc_645CDDF3
; ---------------------------------------------------------------------------

loc_645CDDEB:				; CODE XREF: sub_645CDCD1+F6j
		mov	[ebp+var_14], 70h
		nop

loc_645CDDF3:				; CODE XREF: sub_645CDCD1+F1j
					; sub_645CDCD1+FDj ...
		cmp	[ebp+var_14], 70h
		jnz	short loc_645CDDFE
		jmp	loc_645CDEB2
; ---------------------------------------------------------------------------

loc_645CDDFE:				; CODE XREF: sub_645CDCD1+126j
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_certificate_lockSession
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CDE17
		jmp	loc_645CDEB2
; ---------------------------------------------------------------------------

loc_645CDE17:				; CODE XREF: sub_645CDCD1+13Fj
		mov	[ebp+var_C], 1
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CDE3C
		mov	[esp+48h+var_44], offset aPkcs11Performi ; "PKCS#11: Performing	decryption"
		mov	[esp+48h+var_48], 4
		call	sub_645CBF0E

loc_645CDE3C:				; CODE XREF: sub_645CDCD1+155j
		mov	eax, [ebp+arg_0]
		lea	edx, [ebp+var_1C]
		mov	[esp+48h+var_34], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+48h+var_38], edx
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+48h+var_40], eax
		mov	eax, [ebp+var_10]
		mov	[esp+48h+var_44], eax
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_certificate_decryptAny
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jz	short loc_645CDEAB
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CDEA9
		mov	eax, [ebp+var_14]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11CannotPe ; "PKCS#11: Cannot perform decryption %ld:"...
		mov	[esp+48h+var_48], 2
		call	sub_645CBF0E
		jmp	short loc_645CDEB2
; ---------------------------------------------------------------------------

loc_645CDEA9:				; CODE XREF: sub_645CDCD1+1AAj
		jmp	short loc_645CDEB2
; ---------------------------------------------------------------------------

loc_645CDEAB:				; CODE XREF: sub_645CDCD1+1A0j
		mov	[ebp+var_14], 0

loc_645CDEB2:				; CODE XREF: sub_645CDCD1+128j
					; sub_645CDCD1+141j ...
		cmp	[ebp+var_C], 0
		jz	short loc_645CDECA
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_certificate_releaseSession
		mov	[ebp+var_C], 0

loc_645CDECA:				; CODE XREF: sub_645CDCD1+1E5j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CDEFE
		mov	eax, [ebp+var_14]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11__pkc_26 ; "PKCS#11: __pkcs11h_openssl_rsa_dec - re"...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645CDEFE:				; CODE XREF: sub_645CDCD1+201j
		cmp	[ebp+var_14], 0
		jnz	short loc_645CDF09
		mov	eax, [ebp+var_1C]
		jmp	short locret_645CDF0E
; ---------------------------------------------------------------------------

loc_645CDF09:				; CODE XREF: sub_645CDCD1+231j
		mov	eax, 0FFFFFFFFh

locret_645CDF0E:			; CODE XREF: sub_645CDCD1+236j
		leave
		retn
sub_645CDCD1	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CDF10	proc near		; DATA XREF: sub_645CE6CD+55o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_38], eax
		call	sub_645CDC32
		mov	[ebp+var_14], eax
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 6
		cmp	[ebp+arg_4], 0
		jnz	short loc_645CDF56
		mov	[esp+38h+var_30], 13Ch ; int
		mov	[esp+38h+var_34], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+38h+var_38], offset aFromNull_1 ; "from!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CDF57
; ---------------------------------------------------------------------------

loc_645CDF56:				; CODE XREF: sub_645CDF10+26j
		nop

loc_645CDF57:				; CODE XREF: sub_645CDF10+44j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CDF7B
		mov	[esp+38h+var_30], 13Dh ; int
		mov	[esp+38h+var_34], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+38h+var_38], offset aToNull_1 ; "to!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CDF7C
; ---------------------------------------------------------------------------

loc_645CDF7B:				; CODE XREF: sub_645CDF10+4Bj
		nop

loc_645CDF7C:				; CODE XREF: sub_645CDF10+69j
		cmp	[ebp+arg_C], 0
		jnz	short loc_645CDFA0
		mov	[esp+38h+var_30], 13Eh ; int
		mov	[esp+38h+var_34], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+38h+var_38], offset aRsaNull ; "rsa!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CDFA1
; ---------------------------------------------------------------------------

loc_645CDFA0:				; CODE XREF: sub_645CDF10+70j
		nop

loc_645CDFA1:				; CODE XREF: sub_645CDF10+8Ej
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CDFE2
		mov	eax, [ebp+arg_10]
		mov	[esp+38h+var_20], eax
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_24], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11__pkc_27 ; "PKCS#11: __pkcs11h_openssl_rsa_enc ente"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645CDFE2:				; CODE XREF: sub_645CDF10+99j
		cmp	[ebp+arg_10], 1
		jz	short loc_645CDFF4
		mov	[ebp+var_10], 70h
		jmp	loc_645CE0B7
; ---------------------------------------------------------------------------

loc_645CDFF4:				; CODE XREF: sub_645CDF10+D6j
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+var_38], eax
		call	_RSA_size
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_certificate_lockSession
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645CE01B
		jmp	loc_645CE0B7
; ---------------------------------------------------------------------------

loc_645CE01B:				; CODE XREF: sub_645CDF10+104j
		mov	[ebp+var_C], 1
		mov	eax, dword_645D1024
		cmp	eax, 3
		jbe	short loc_645CE040
		mov	[esp+38h+var_34], offset aPkcs11Perfor_0 ; "PKCS#11: Performing	signature"
		mov	[esp+38h+var_38], 4
		call	sub_645CBF0E

loc_645CE040:				; CODE XREF: sub_645CDF10+11Aj
		mov	eax, [ebp+arg_0]
		lea	edx, [ebp+var_18]
		mov	[esp+38h+var_24], edx
		mov	edx, [ebp+arg_8]
		mov	[esp+38h+var_28], edx
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], 1
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_certificate_signAny
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645CE0B0
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE0AE
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11Cannot_5 ; "PKCS#11: Cannot perform signature %ld:'"...
		mov	[esp+38h+var_38], 2
		call	sub_645CBF0E
		jmp	short loc_645CE0B7
; ---------------------------------------------------------------------------

loc_645CE0AE:				; CODE XREF: sub_645CDF10+170j
		jmp	short loc_645CE0B7
; ---------------------------------------------------------------------------

loc_645CE0B0:				; CODE XREF: sub_645CDF10+166j
		mov	[ebp+var_10], 0

loc_645CE0B7:				; CODE XREF: sub_645CDF10+DFj
					; sub_645CDF10+106j ...
		cmp	[ebp+var_C], 0
		jz	short loc_645CE0CF
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_certificate_releaseSession
		mov	[ebp+var_C], 0

loc_645CE0CF:				; CODE XREF: sub_645CDF10+1ABj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE103
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_38], eax
		call	pkcs11h_getMessage
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_34], offset aPkcs11__pkc_28 ; "PKCS#11: __pkcs11h_openssl_rsa_enc - re"...
		mov	[esp+38h+var_38], 5
		call	sub_645CBF0E

loc_645CE103:				; CODE XREF: sub_645CDF10+1C7j
		cmp	[ebp+var_10], 0
		jnz	short loc_645CE10E
		mov	eax, [ebp+var_18]
		jmp	short locret_645CE113
; ---------------------------------------------------------------------------

loc_645CE10E:				; CODE XREF: sub_645CDF10+1F7j
		mov	eax, 0FFFFFFFFh

locret_645CE113:			; CODE XREF: sub_645CDF10+1FCj
		leave
		retn
sub_645CDF10	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CE115	proc near		; CODE XREF: pkcs11h_openssl_session_getEVP+142p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE155
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11__pkc_29 ; "PKCS#11: __pkcs11h_openssl_session_setR"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CE155:				; CODE XREF: sub_645CE115+1Cj
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_28], eax
		call	_EVP_PKEY_get1_RSA
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_645CE18B
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE189
		mov	[esp+28h+var_24], offset aPkcs11Cannot_6 ; "PKCS#11: Cannot get	RSA key"
		mov	[esp+28h+var_28], 2
		call	sub_645CBF0E
		jmp	short loc_645CE1D1
; ---------------------------------------------------------------------------

loc_645CE189:				; CODE XREF: sub_645CE115+5Cj
		jmp	short loc_645CE1D1
; ---------------------------------------------------------------------------

loc_645CE18B:				; CODE XREF: sub_645CE115+52j
		mov	[esp+28h+var_24], offset dword_645D8040
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	_RSA_set_method
		mov	eax, ds:dword_645D8078
		mov	edx, [ebp+arg_0]
		mov	[esp+28h+var_20], edx
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	_RSA_set_ex_data
		mov	eax, [ebp+var_10]
		mov	eax, [eax+3Ch]
		or	eax, 40h
		mov	edx, eax
		mov	eax, [ebp+var_10]
		mov	[eax+3Ch], edx
		mov	[ebp+var_C], 1

loc_645CE1D1:				; CODE XREF: sub_645CE115+72j
					; sub_645CE115:loc_645CE189j
		cmp	[ebp+var_10], 0
		jz	short loc_645CE1E9
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	_RSA_free
		mov	[ebp+var_10], 0

loc_645CE1E9:				; CODE XREF: sub_645CE115+C0j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE20E
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11__pkc_30 ; "PKCS#11: __pkcs11h_openssl_session_setR"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CE20E:				; CODE XREF: sub_645CE115+DCj
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645CE115	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CE213	proc near		; CODE XREF: sub_645CE2B2+Dp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CE244
		mov	[esp+28h+var_20], 1BEh ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aDsaNull ; "dsa!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CE245
; ---------------------------------------------------------------------------

loc_645CE244:				; CODE XREF: sub_645CE213+11j
		nop

loc_645CE245:				; CODE XREF: sub_645CE213+2Fj
		mov	eax, ds:dword_645D80AC
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	_DSA_get_ex_data
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CE280
		mov	[esp+28h+var_20], 1C2h ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aSessionNull_2	; "session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CE281
; ---------------------------------------------------------------------------

loc_645CE280:				; CODE XREF: sub_645CE213+4Dj
		nop

loc_645CE281:				; CODE XREF: sub_645CE213+6Bj
		mov	eax, [ebp+var_C]
		mov	eax, [eax+10h]
		test	eax, eax
		jnz	short loc_645CE2A9
		mov	[esp+28h+var_20], 1C3h ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aSessionCertifi ; "session->certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CE2AA
; ---------------------------------------------------------------------------

loc_645CE2A9:				; CODE XREF: sub_645CE213+76j
		nop

loc_645CE2AA:				; CODE XREF: sub_645CE213+94j
		mov	eax, [ebp+var_C]
		mov	eax, [eax+10h]
		leave
		retn
sub_645CE213	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CE2B2	proc near		; DATA XREF: sub_645CE6CD+C1o

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	eax, [ebp+arg_8]
		mov	[esp+48h+var_48], eax
		call	sub_645CE213
		mov	[ebp+var_14], eax
		mov	[ebp+var_1C], 0
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_18], 6
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE316
		mov	eax, [ebp+arg_8]
		mov	[esp+48h+var_38], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11__pkc_31 ; "PKCS#11: __pkcs11h_openssl_dsa_do_sign "...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645CE316:				; CODE XREF: sub_645CE2B2+39j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CE33A
		mov	[esp+48h+var_40], 1DEh ; int
		mov	[esp+48h+var_44], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+48h+var_48], offset aDgstNull ; "dgst!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CE33B
; ---------------------------------------------------------------------------

loc_645CE33A:				; CODE XREF: sub_645CE2B2+68j
		nop

loc_645CE33B:				; CODE XREF: sub_645CE2B2+86j
		cmp	[ebp+arg_8], 0
		jnz	short loc_645CE35F
		mov	[esp+48h+var_40], 1DFh ; int
		mov	[esp+48h+var_44], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+48h+var_48], offset aDsaNull ; "dsa!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CE360
; ---------------------------------------------------------------------------

loc_645CE35F:				; CODE XREF: sub_645CE2B2+8Dj
		nop

loc_645CE360:				; CODE XREF: sub_645CE2B2+ABj
		cmp	[ebp+var_14], 0
		jnz	short loc_645CE384
		mov	[esp+48h+var_40], 1E0h ; int
		mov	[esp+48h+var_44], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+48h+var_48], offset aCertificateN_0 ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CE385
; ---------------------------------------------------------------------------

loc_645CE384:				; CODE XREF: sub_645CE2B2+B2j
		nop

loc_645CE385:				; CODE XREF: sub_645CE2B2+D0j
		mov	eax, [ebp+arg_4]
		lea	edx, [ebp+var_20]
		mov	[esp+48h+var_34], edx
		mov	[esp+48h+var_38], 0
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], 11h
		mov	eax, [ebp+var_14]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_certificate_signAny
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645CE3FC
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE3F7
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11Cannot_5 ; "PKCS#11: Cannot perform signature %ld:'"...
		mov	[esp+48h+var_48], 2
		call	sub_645CBF0E
		jmp	loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE3F7:				; CODE XREF: sub_645CE2B2+114j
		jmp	loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE3FC:				; CODE XREF: sub_645CE2B2+10Aj
		mov	eax, [ebp+var_20]
		mov	[esp+48h+var_44], eax ;	size_t
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645CE43F
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE43A
		mov	[esp+48h+var_44], offset aPkcs11CannotCa ; "PKCS#11: Cannot cannot allocate signatu"...
		mov	[esp+48h+var_48], 2
		call	sub_645CBF0E
		jmp	loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE43A:				; CODE XREF: sub_645CE2B2+16Dj
		jmp	loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE43F:				; CODE XREF: sub_645CE2B2+163j
		mov	edx, [ebp+var_1C]
		mov	eax, [ebp+arg_4]
		lea	ecx, [ebp+var_20]
		mov	[esp+48h+var_34], ecx
		mov	[esp+48h+var_38], edx
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], 11h
		mov	eax, [ebp+var_14]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_certificate_signAny
		mov	[ebp+var_18], eax
		cmp	[ebp+var_18], 0
		jz	short loc_645CE4B5
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE4B0
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11Cannot_5 ; "PKCS#11: Cannot perform signature %ld:'"...
		mov	[esp+48h+var_48], 2
		call	sub_645CBF0E
		jmp	loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE4B0:				; CODE XREF: sub_645CE2B2+1CDj
		jmp	loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE4B5:				; CODE XREF: sub_645CE2B2+1C3j
		call	_DSA_SIG_new
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CE4EB
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE4E6
		mov	[esp+48h+var_44], offset aPkcs11CannotAl ; "PKCS#11: Cannot allocate DSA_SIG"
		mov	[esp+48h+var_48], 2
		call	sub_645CBF0E
		jmp	loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE4E6:				; CODE XREF: sub_645CE2B2+219j
		jmp	loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE4EB:				; CODE XREF: sub_645CE2B2+20Fj
		mov	eax, [ebp+var_C]
		mov	ecx, [eax]
		mov	eax, [ebp+var_20]
		shr	eax, 1
		mov	edx, eax
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_40], ecx
		mov	[esp+48h+var_44], edx
		mov	[esp+48h+var_48], eax
		call	__IAT_start__
		test	eax, eax
		jnz	short loc_645CE530
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE52E
		mov	[esp+48h+var_44], offset aPkcs11CannotCo ; "PKCS#11: Cannot convert dsa	r"
		mov	[esp+48h+var_48], 2
		call	sub_645CBF0E
		jmp	short loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE52E:				; CODE XREF: sub_645CE2B2+264j
		jmp	short loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE530:				; CODE XREF: sub_645CE2B2+25Aj
		mov	eax, [ebp+var_C]
		mov	edx, [eax+4]
		mov	eax, [ebp+var_20]
		shr	eax, 1
		mov	ecx, [ebp+var_1C]
		mov	ebx, [ebp+var_20]
		shr	ebx, 1
		add	ecx, ebx
		mov	[esp+48h+var_40], edx
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], ecx
		call	__IAT_start__
		test	eax, eax
		jnz	short loc_645CE57B
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE579
		mov	[esp+48h+var_44], offset aPkcs11Cannot_7 ; "PKCS#11: Cannot convert dsa	s"
		mov	[esp+48h+var_48], 2
		call	sub_645CBF0E
		jmp	short loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE579:				; CODE XREF: sub_645CE2B2+2AFj
		jmp	short loc_645CE588
; ---------------------------------------------------------------------------

loc_645CE57B:				; CODE XREF: sub_645CE2B2+2A5j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], 0

loc_645CE588:				; CODE XREF: sub_645CE2B2+140j
					; sub_645CE2B2:loc_645CE3F7j ...
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_645CE59A
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], eax
		call	sub_645C156B

loc_645CE59A:				; CODE XREF: sub_645CE2B2+2DBj
		cmp	[ebp+var_C], 0
		jz	short loc_645CE5B2
		mov	eax, [ebp+var_C]
		mov	[esp+48h+var_48], eax
		call	_DSA_SIG_free
		mov	[ebp+var_C], 0

loc_645CE5B2:				; CODE XREF: sub_645CE2B2+2ECj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE5D7
		mov	eax, [ebp+var_C]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11__pkc_32 ; "PKCS#11: __pkcs11h_openssl_dsa_do_sign "...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645CE5D7:				; CODE XREF: sub_645CE2B2+308j
		mov	eax, [ebp+var_10]
		add	esp, 44h
		pop	ebx
		pop	ebp
		retn
sub_645CE2B2	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CE5E0	proc near		; CODE XREF: pkcs11h_openssl_session_getEVP+167p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE620
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11__pkc_33 ; "PKCS#11: __pkcs11h_openssl_session_setD"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CE620:				; CODE XREF: sub_645CE5E0+1Cj
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_28], eax
		call	_EVP_PKEY_get1_DSA
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jnz	short loc_645CE656
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE654
		mov	[esp+28h+var_24], offset aPkcs11Cannot_8 ; "PKCS#11: Cannot get	DSA key"
		mov	[esp+28h+var_28], 2
		call	sub_645CBF0E
		jmp	short loc_645CE68B
; ---------------------------------------------------------------------------

loc_645CE654:				; CODE XREF: sub_645CE5E0+5Cj
		jmp	short loc_645CE68B
; ---------------------------------------------------------------------------

loc_645CE656:				; CODE XREF: sub_645CE5E0+52j
		mov	[esp+28h+var_24], offset dword_645D807C
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	_DSA_set_method
		mov	eax, ds:dword_645D80AC
		mov	edx, [ebp+arg_0]
		mov	[esp+28h+var_20], edx
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	_DSA_set_ex_data
		mov	[ebp+var_C], 1

loc_645CE68B:				; CODE XREF: sub_645CE5E0+72j
					; sub_645CE5E0:loc_645CE654j
		cmp	[ebp+var_10], 0
		jz	short loc_645CE6A3
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	_DSA_free
		mov	[ebp+var_10], 0

loc_645CE6A3:				; CODE XREF: sub_645CE5E0+AFj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE6C8
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11__pkc_34 ; "PKCS#11: __pkcs11h_openssl_session_setD"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CE6C8:				; CODE XREF: sub_645CE5E0+CBj
		mov	eax, [ebp+var_C]
		leave
		retn
sub_645CE5E0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CE6CD	proc near		; CODE XREF: pkcs11h_initialize:loc_645CAD5Cp

Dst		= dword	ptr -28h
Src		= dword	ptr -24h
Size		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE6F1
		mov	[esp+28h+Src], offset aPkcs11_pkcs_48 ;	"PKCS#11: _pkcs11h_openssl_initialize -	"...
		mov	[esp+28h+Dst], 5
		call	sub_645CBF0E

loc_645CE6F1:				; CODE XREF: sub_645CE6CD+Ej
		call	_RSA_get_default_method
		mov	[esp+28h+Size],	38h ; Size
		mov	[esp+28h+Src], eax ; Src
		mov	[esp+28h+Dst], offset dword_645D8040 ; Dst
		call	_memmove
		mov	ds:dword_645D8040, offset aPkcs11h ; "pkcs11h"
		mov	ds:dword_645D8050, offset sub_645CDCD1
		mov	ds:dword_645D804C, offset sub_645CDF10
		mov	ds:dword_645D8064, 21h
		mov	[esp+28h+var_18], offset sub_645CDBCB
		mov	[esp+28h+var_1C], offset sub_645CDB0C
		mov	[esp+28h+Size],	0
		mov	[esp+28h+Src], offset aPkcs11h ; "pkcs11h"
		mov	[esp+28h+Dst], 0
		call	_RSA_get_ex_new_index
		mov	ds:dword_645D8078, eax
		call	_DSA_get_default_method
		mov	[esp+28h+Size],	30h ; Size
		mov	[esp+28h+Src], eax ; Src
		mov	[esp+28h+Dst], offset dword_645D807C ; Dst
		call	_memmove
		mov	ds:dword_645D807C, offset aPkcs11h ; "pkcs11h"
		mov	ds:dword_645D8080, offset sub_645CE2B2
		mov	[esp+28h+var_18], offset sub_645CDBCB
		mov	[esp+28h+var_1C], offset sub_645CDB0C
		mov	[esp+28h+Size],	0
		mov	[esp+28h+Src], offset aPkcs11h ; "pkcs11h"
		mov	[esp+28h+Dst], 0
		call	_DSA_get_ex_new_index
		mov	ds:dword_645D80AC, eax
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE7E7
		mov	[esp+28h+Src], offset aPkcs11_pkcs_49 ;	"PKCS#11: _pkcs11h_openssl_initialize -	"...
		mov	[esp+28h+Dst], 5
		call	sub_645CBF0E

loc_645CE7E7:				; CODE XREF: sub_645CE6CD+104j
		mov	eax, 1
		leave
		retn
sub_645CE6CD	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CE7EE	proc near		; CODE XREF: pkcs11h_terminate:loc_645CAEBBp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE812
		mov	[esp+18h+var_14], offset aPkcs11_pkcs_50 ; "PKCS#11: _pkcs11h_openssl_terminate"
		mov	[esp+18h+var_18], 5
		call	sub_645CBF0E

loc_645CE812:				; CODE XREF: sub_645CE7EE+Ej
		mov	eax, 1
		leave
		retn
sub_645CE7EE	endp

; Exported entry  45. pkcs11h_openssl_getX509

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_openssl_getX509
pkcs11h_openssl_getX509	proc near	; CODE XREF: pkcs11h_openssl_session_getX509+71p

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 44h
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 0
		mov	[ebp+var_C], 6
		mov	[ebp+var_1C], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CE867
		mov	[esp+48h+var_40], 34Eh ; int
		mov	[esp+48h+var_44], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+48h+var_48], offset aCertificateN_0 ; "certificate!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CE868
; ---------------------------------------------------------------------------

loc_645CE867:				; CODE XREF: pkcs11h_openssl_getX509+2Ej
		nop

loc_645CE868:				; CODE XREF: pkcs11h_openssl_getX509+4Cj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE88D
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11Pkcs1_80 ; "PKCS#11: pkcs11h_openssl_getX509 - entr"...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645CE88D:				; CODE XREF: pkcs11h_openssl_getX509+57j
		call	_X509_new
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_18]
		test	eax, eax
		jnz	short loc_645CE8C6
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE8BA
		mov	[esp+48h+var_44], offset aPkcs11UnableTo ; "PKCS#11: Unable to allocate	certificate"...
		mov	[esp+48h+var_48], 2
		call	sub_645CBF0E

loc_645CE8BA:				; CODE XREF: pkcs11h_openssl_getX509+8Bj
		mov	[ebp+var_C], 2
		jmp	loc_645CE980
; ---------------------------------------------------------------------------

loc_645CE8C6:				; CODE XREF: pkcs11h_openssl_getX509+81j
		lea	eax, [ebp+var_14]
		mov	[esp+48h+var_40], eax ;	int
		mov	[esp+48h+var_44], 0 ; void *
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_48], eax ;	int
		call	pkcs11h_certificate_getCertificateBlob
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CE8EE
		jmp	loc_645CE980
; ---------------------------------------------------------------------------

loc_645CE8EE:				; CODE XREF: pkcs11h_openssl_getX509+CEj
		mov	eax, [ebp+var_14]
		mov	[esp+48h+var_44], eax ;	size_t
		lea	eax, [ebp+var_10]
		mov	[esp+48h+var_48], eax ;	int
		call	sub_645C14C0
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CE90B
		jmp	short loc_645CE980
; ---------------------------------------------------------------------------

loc_645CE90B:				; CODE XREF: pkcs11h_openssl_getX509+EEj
		mov	eax, [ebp+var_10]
		lea	edx, [ebp+var_14]
		mov	[esp+48h+var_40], edx ;	int
		mov	[esp+48h+var_44], eax ;	void *
		mov	eax, [ebp+arg_0]
		mov	[esp+48h+var_48], eax ;	int
		call	pkcs11h_certificate_getCertificateBlob
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CE92F
		jmp	short loc_645CE980
; ---------------------------------------------------------------------------

loc_645CE92F:				; CODE XREF: pkcs11h_openssl_getX509+112j
		mov	eax, [ebp+var_10]
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+48h+var_40], eax
		lea	eax, [ebp+var_1C]
		mov	[esp+48h+var_44], eax
		lea	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	_d2i_X509
		test	eax, eax
		jnz	short loc_645CE979
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CE970
		mov	[esp+48h+var_44], offset aPkcs11Unable_0 ; "PKCS#11: Unable to parse X.509 certific"...
		mov	[esp+48h+var_48], 2
		call	sub_645CBF0E

loc_645CE970:				; CODE XREF: pkcs11h_openssl_getX509+141j
		mov	[ebp+var_C], 6
		jmp	short loc_645CE980
; ---------------------------------------------------------------------------

loc_645CE979:				; CODE XREF: pkcs11h_openssl_getX509+137j
		mov	[ebp+var_C], 0

loc_645CE980:				; CODE XREF: pkcs11h_openssl_getX509+A8j
					; pkcs11h_openssl_getX509+D0j ...
		cmp	[ebp+var_C], 0
		jz	short loc_645CE99F
		mov	eax, [ebp+var_18]
		test	eax, eax
		jz	short loc_645CE99F
		mov	eax, [ebp+var_18]
		mov	[esp+48h+var_48], eax
		call	_X509_free
		mov	[ebp+var_18], 0

loc_645CE99F:				; CODE XREF: pkcs11h_openssl_getX509+16Bj
					; pkcs11h_openssl_getX509+172j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CE9DA
		mov	ebx, [ebp+var_18]
		mov	eax, [ebp+var_C]
		mov	[esp+48h+var_48], eax
		call	pkcs11h_getMessage
		mov	[esp+48h+var_38], ebx
		mov	[esp+48h+var_3C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+48h+var_40], eax
		mov	[esp+48h+var_44], offset aPkcs11Pkcs1_81 ; "PKCS#11: pkcs11h_openssl_getX509 - retu"...
		mov	[esp+48h+var_48], 5
		call	sub_645CBF0E

loc_645CE9DA:				; CODE XREF: pkcs11h_openssl_getX509+18Ej
		mov	eax, [ebp+var_18]
		add	esp, 44h
		pop	ebx
		pop	ebp
		retn
pkcs11h_openssl_getX509	endp

; Exported entry  42. pkcs11h_openssl_createSession

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_openssl_createSession
pkcs11h_openssl_createSession proc near

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_14], 0
		mov	[ebp+var_C], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CEA15
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_82 ; "PKCS#11: pkcs11h_openssl_createSession "...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CEA15:				; CODE XREF: pkcs11h_openssl_createSession+1Cj
		call	_OpenSSL_add_all_digests
		mov	[esp+28h+var_24], 18h ;	size_t
		lea	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax ;	int
		call	sub_645C14C0
		test	eax, eax
		jz	short loc_645CEA53
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CEA51
		mov	[esp+28h+var_24], offset aPkcs11Cannot_9 ; "PKCS#11: Cannot allocate memory"
		mov	[esp+28h+var_28], 2
		call	sub_645CBF0E
		jmp	short loc_645CEAB8
; ---------------------------------------------------------------------------

loc_645CEA51:				; CODE XREF: pkcs11h_openssl_createSession+56j
		jmp	short loc_645CEAB8
; ---------------------------------------------------------------------------

loc_645CEA53:				; CODE XREF: pkcs11h_openssl_createSession+4Cj
		mov	eax, [ebp+var_14]
		mov	edx, [ebp+arg_0]
		mov	[eax+10h], edx
		mov	eax, [ebp+var_14]
		mov	dword ptr [eax+4], 1
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax
		call	sub_645C2463
		mov	[ebp+var_10], eax
		cmp	[ebp+var_10], 0
		jz	short loc_645CEAB1
		mov	eax, dword_645D1024
		test	eax, eax
		jz	short loc_645CEAAF
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Canno_10 ; "PKCS#11: Cannot initialize mutex %ld:'%"...
		mov	[esp+28h+var_28], 1
		call	sub_645CBF0E
		jmp	short loc_645CEAB8
; ---------------------------------------------------------------------------

loc_645CEAAF:				; CODE XREF: pkcs11h_openssl_createSession+9Ej
		jmp	short loc_645CEAB8
; ---------------------------------------------------------------------------

loc_645CEAB1:				; CODE XREF: pkcs11h_openssl_createSession+95j
		mov	[ebp+var_C], 1

loc_645CEAB8:				; CODE XREF: pkcs11h_openssl_createSession+6Cj
					; pkcs11h_openssl_createSession:loc_645CEA51j ...
		cmp	[ebp+var_C], 0
		jnz	short loc_645CEAC9
		lea	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax
		call	sub_645C156B

loc_645CEAC9:				; CODE XREF: pkcs11h_openssl_createSession+D9j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CEAEE
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_83 ; "PKCS#11: pkcs11h_openssl_createSession "...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CEAEE:				; CODE XREF: pkcs11h_openssl_createSession+EEj
		mov	eax, [ebp+var_14]
		leave
		retn
pkcs11h_openssl_createSession endp

; Exported entry  44. pkcs11h_openssl_getCleanupHook

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_openssl_getCleanupHook
pkcs11h_openssl_getCleanupHook proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CEB1D
		mov	[esp+18h+var_10], 3C8h ; int
		mov	[esp+18h+var_14], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+18h+var_18], offset aOpenssl_sessio ; "openssl_session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CEB1E
; ---------------------------------------------------------------------------

loc_645CEB1D:				; CODE XREF: pkcs11h_openssl_getCleanupHook+Aj
		nop

loc_645CEB1E:				; CODE XREF: pkcs11h_openssl_getCleanupHook+28j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+14h]
		leave
		retn
pkcs11h_openssl_getCleanupHook endp

; Exported entry  49. pkcs11h_openssl_setCleanupHook

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_openssl_setCleanupHook
pkcs11h_openssl_setCleanupHook proc near

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CEB50
		mov	[esp+18h+var_10], 3D2h ; int
		mov	[esp+18h+var_14], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+18h+var_18], offset aOpenssl_sessio ; "openssl_session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CEB51
; ---------------------------------------------------------------------------

loc_645CEB50:				; CODE XREF: pkcs11h_openssl_setCleanupHook+Aj
		nop

loc_645CEB51:				; CODE XREF: pkcs11h_openssl_setCleanupHook+28j
		mov	eax, [ebp+arg_0]
		mov	edx, [ebp+arg_4]
		mov	[eax+14h], edx
		leave
		retn
pkcs11h_openssl_setCleanupHook endp

; Exported entry  43. pkcs11h_openssl_freeSession

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_openssl_freeSession
pkcs11h_openssl_freeSession proc near	; CODE XREF: sub_645CDBCB+60p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		test	eax, eax
		jnz	short loc_645CEB87
		mov	[esp+28h+var_20], 3DDh ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aOpenssl_sessio ; "openssl_session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CEB88
; ---------------------------------------------------------------------------

loc_645CEB87:				; CODE XREF: pkcs11h_openssl_freeSession+Bj
		nop

loc_645CEB88:				; CODE XREF: pkcs11h_openssl_freeSession+29j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CEBB7
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+4]
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_1C], edx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_84 ; "PKCS#11: pkcs11h_openssl_freeSession - "...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CEBB7:				; CODE XREF: pkcs11h_openssl_freeSession+34j
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_645CEC08
		mov	eax, dword_645D1024
		test	eax, eax
		jz	short loc_645CEC03
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_getMessage
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11CannotLo ; "PKCS#11: Cannot lock mutex %ld:'%s'"
		mov	[esp+28h+var_28], 1
		call	sub_645CBF0E
		jmp	loc_645CECC7
; ---------------------------------------------------------------------------

loc_645CEC03:				; CODE XREF: pkcs11h_openssl_freeSession+76j
		jmp	loc_645CECC7
; ---------------------------------------------------------------------------

loc_645CEC08:				; CODE XREF: pkcs11h_openssl_freeSession+6Dj
		mov	eax, [ebp+arg_0]
		mov	edx, [eax+4]
		sub	edx, 1
		mov	[eax+4], edx
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	sub_645C24F5
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+4]
		test	eax, eax
		jns	short loc_645CEC47
		mov	[esp+28h+var_20], 3F1h ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aOpenssl_sess_0 ; "openssl_session->reference_count>=0"
		call	sub_645D02E0
		jmp	short loc_645CEC48
; ---------------------------------------------------------------------------

loc_645CEC47:				; CODE XREF: pkcs11h_openssl_freeSession+CBj
		nop

loc_645CEC48:				; CODE XREF: pkcs11h_openssl_freeSession+E9j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+4]
		test	eax, eax
		jnz	short loc_645CECC7
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	sub_645C252D
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+14h]
		test	eax, eax
		jz	short loc_645CEC78
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+14h]
		mov	edx, [ebp+arg_0]
		mov	edx, [edx+10h]
		mov	[esp+28h+var_28], edx
		call	eax

loc_645CEC78:				; CODE XREF: pkcs11h_openssl_freeSession+109j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jz	short loc_645CEC9A
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], eax
		call	_X509_free
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+0Ch], 0

loc_645CEC9A:				; CODE XREF: pkcs11h_openssl_freeSession+124j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		test	eax, eax
		jz	short loc_645CECBC
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_certificate_freeCertificate
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+10h], 0

loc_645CECBC:				; CODE XREF: pkcs11h_openssl_freeSession+146j
		lea	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	sub_645C156B

loc_645CECC7:				; CODE XREF: pkcs11h_openssl_freeSession+A2j
					; pkcs11h_openssl_freeSession:loc_645CEC03j ...
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short locret_645CECE5
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_85 ; "PKCS#11: pkcs11h_openssl_freeSession - "...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

locret_645CECE5:			; CODE XREF: pkcs11h_openssl_freeSession+173j
		leave
		retn
pkcs11h_openssl_freeSession endp

; Exported entry  47. pkcs11h_openssl_session_getRSA

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_openssl_session_getRSA
pkcs11h_openssl_session_getRSA proc near

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CED27
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_86 ; "PKCS#11: pkcs11h_openssl_session_getRSA"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CED27:				; CODE XREF: pkcs11h_openssl_session_getRSA+23j
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_openssl_session_getEVP
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_645CED3D
		jmp	short loc_645CEDAC
; ---------------------------------------------------------------------------

loc_645CED3D:				; CODE XREF: pkcs11h_openssl_session_getRSA+52j
		mov	eax, [ebp+var_14]
		mov	eax, [eax]
		cmp	eax, 6
		jz	short loc_645CED69
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CED67
		mov	[esp+28h+var_24], offset aPkcs11InvalidP ; "PKCS#11: Invalid public key	algorithm"
		mov	[esp+28h+var_28], 2
		call	sub_645CBF0E
		jmp	short loc_645CEDAC
; ---------------------------------------------------------------------------

loc_645CED67:				; CODE XREF: pkcs11h_openssl_session_getRSA+68j
		jmp	short loc_645CEDAC
; ---------------------------------------------------------------------------

loc_645CED69:				; CODE XREF: pkcs11h_openssl_session_getRSA+5Ej
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax
		call	_EVP_PKEY_get1_RSA
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CED9F
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CED9D
		mov	[esp+28h+var_24], offset aPkcs11Cannot_6 ; "PKCS#11: Cannot get	RSA key"
		mov	[esp+28h+var_28], 2
		call	sub_645CBF0E
		jmp	short loc_645CEDAC
; ---------------------------------------------------------------------------

loc_645CED9D:				; CODE XREF: pkcs11h_openssl_session_getRSA+9Ej
		jmp	short loc_645CEDAC
; ---------------------------------------------------------------------------

loc_645CED9F:				; CODE XREF: pkcs11h_openssl_session_getRSA+94j
		mov	eax, [ebp+var_C]
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], 0

loc_645CEDAC:				; CODE XREF: pkcs11h_openssl_session_getRSA+54j
					; pkcs11h_openssl_session_getRSA+7Ej ...
		cmp	[ebp+var_C], 0
		jz	short loc_645CEDC4
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	_RSA_free
		mov	[ebp+var_C], 0

loc_645CEDC4:				; CODE XREF: pkcs11h_openssl_session_getRSA+C9j
		cmp	[ebp+var_14], 0
		jz	short loc_645CEDDC
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax
		call	_EVP_PKEY_free
		mov	[ebp+var_14], 0

loc_645CEDDC:				; CODE XREF: pkcs11h_openssl_session_getRSA+E1j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CEE01
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_87 ; "PKCS#11: pkcs11h_openssl_session_getRSA"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CEE01:				; CODE XREF: pkcs11h_openssl_session_getRSA+FDj
		mov	eax, [ebp+var_10]
		leave
		retn
pkcs11h_openssl_session_getRSA endp

; Exported entry  46. pkcs11h_openssl_session_getEVP

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_openssl_session_getEVP
pkcs11h_openssl_session_getEVP proc near ; CODE	XREF: pkcs11h_openssl_session_getRSA+46p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_14], 0
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CEE45
		mov	[esp+28h+var_20], 456h ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aOpenssl_sessio ; "openssl_session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CEE46
; ---------------------------------------------------------------------------

loc_645CEE45:				; CODE XREF: pkcs11h_openssl_session_getEVP+1Fj
		nop

loc_645CEE46:				; CODE XREF: pkcs11h_openssl_session_getEVP+3Dj
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+8]
		test	eax, eax
		jz	short loc_645CEE6E
		mov	[esp+28h+var_20], 457h ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aOpenssl_sess_1 ; "!openssl_session->initialized"
		call	sub_645D02E0
		jmp	short loc_645CEE6F
; ---------------------------------------------------------------------------

loc_645CEE6E:				; CODE XREF: pkcs11h_openssl_session_getEVP+48j
		nop

loc_645CEE6F:				; CODE XREF: pkcs11h_openssl_session_getEVP+66j
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CEE93
		mov	[esp+28h+var_20], 458h ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aOpenssl_sessio ; "openssl_session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CEE94
; ---------------------------------------------------------------------------

loc_645CEE93:				; CODE XREF: pkcs11h_openssl_session_getEVP+6Dj
		nop

loc_645CEE94:				; CODE XREF: pkcs11h_openssl_session_getEVP+8Bj
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CEEB9
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_88 ; "PKCS#11: pkcs11h_openssl_session_getEVP"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CEEB9:				; CODE XREF: pkcs11h_openssl_session_getEVP+96j
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_openssl_session_getX509
		mov	[ebp+var_14], eax
		cmp	[ebp+var_14], 0
		jnz	short loc_645CEEF5
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CEEF0
		mov	[esp+28h+var_24], offset aPkcs11Canno_11 ; "PKCS#11: Cannot get	certificate object"
		mov	[esp+28h+var_28], 2
		call	sub_645CBF0E
		jmp	loc_645CEFDF
; ---------------------------------------------------------------------------

loc_645CEEF0:				; CODE XREF: pkcs11h_openssl_session_getEVP+CFj
		jmp	loc_645CEFDF
; ---------------------------------------------------------------------------

loc_645CEEF5:				; CODE XREF: pkcs11h_openssl_session_getEVP+C5j
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax
		call	_X509_get_pubkey
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CEF31
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CEF2C
		mov	[esp+28h+var_24], offset aPkcs11Canno_12 ; "PKCS#11: Cannot get	public key"
		mov	[esp+28h+var_28], 2
		call	sub_645CBF0E
		jmp	loc_645CEFDF
; ---------------------------------------------------------------------------

loc_645CEF2C:				; CODE XREF: pkcs11h_openssl_session_getEVP+10Bj
		jmp	loc_645CEFDF
; ---------------------------------------------------------------------------

loc_645CEF31:				; CODE XREF: pkcs11h_openssl_session_getEVP+101j
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		cmp	eax, 6
		jnz	short loc_645CEF56
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	sub_645CE115
		test	eax, eax
		jnz	short loc_645CEFA3
		jmp	loc_645CEFDF
; ---------------------------------------------------------------------------

loc_645CEF56:				; CODE XREF: pkcs11h_openssl_session_getEVP+133j
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		cmp	eax, 74h
		jnz	short loc_645CEF78
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	sub_645CE5E0
		test	eax, eax
		jnz	short loc_645CEFA3
		jmp	short loc_645CEFDF
; ---------------------------------------------------------------------------

loc_645CEF78:				; CODE XREF: pkcs11h_openssl_session_getEVP+158j
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CEFA1
		mov	eax, [ebp+var_C]
		mov	eax, [eax]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Invali_0 ; "PKCS#11: Invalid public key	algorithm %"...
		mov	[esp+28h+var_28], 2
		call	sub_645CBF0E
		jmp	short loc_645CEFDF
; ---------------------------------------------------------------------------

loc_645CEFA1:				; CODE XREF: pkcs11h_openssl_session_getEVP+17Aj
		jmp	short loc_645CEFDF
; ---------------------------------------------------------------------------

loc_645CEFA3:				; CODE XREF: pkcs11h_openssl_session_getEVP+149j
					; pkcs11h_openssl_session_getEVP+16Ej
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	sub_645C24B4
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+4]
		lea	edx, [eax+1]
		mov	eax, [ebp+arg_0]
		mov	[eax+4], edx
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax
		call	sub_645C24F5
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 1
		mov	eax, [ebp+var_C]
		mov	[ebp+var_10], eax
		mov	[ebp+var_C], 0

loc_645CEFDF:				; CODE XREF: pkcs11h_openssl_session_getEVP+E5j
					; pkcs11h_openssl_session_getEVP:loc_645CEEF0j	...
		cmp	[ebp+var_C], 0
		jz	short loc_645CEFF7
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	_EVP_PKEY_free
		mov	[ebp+var_C], 0

loc_645CEFF7:				; CODE XREF: pkcs11h_openssl_session_getEVP+1DDj
		cmp	[ebp+var_14], 0
		jz	short loc_645CF00F
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax
		call	_X509_free
		mov	[ebp+var_14], 0

loc_645CF00F:				; CODE XREF: pkcs11h_openssl_session_getEVP+1F5j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CF034
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_89 ; "PKCS#11: pkcs11h_openssl_session_getEVP"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CF034:				; CODE XREF: pkcs11h_openssl_session_getEVP+211j
		mov	eax, [ebp+var_10]
		leave
		retn
pkcs11h_openssl_session_getEVP endp

; Exported entry  48. pkcs11h_openssl_session_getX509

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

		public pkcs11h_openssl_session_getX509
pkcs11h_openssl_session_getX509	proc near ; CODE XREF: pkcs11h_openssl_session_getEVP+B9p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		mov	[ebp+var_10], 0
		cmp	[ebp+arg_0], 0
		jnz	short loc_645CF071
		mov	[esp+28h+var_20], 4B6h ; int
		mov	[esp+28h+var_24], offset aPkcs11hOpenssl ; "pkcs11h-openssl.c"
		mov	[esp+28h+var_28], offset aOpenssl_sessio ; "openssl_session!=NULL"
		call	sub_645D02E0
		jmp	short loc_645CF072
; ---------------------------------------------------------------------------

loc_645CF071:				; CODE XREF: pkcs11h_openssl_session_getX509+18j
		nop

loc_645CF072:				; CODE XREF: pkcs11h_openssl_session_getX509+36j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CF097
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_90 ; "PKCS#11: pkcs11h_openssl_session_getX50"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CF097:				; CODE XREF: pkcs11h_openssl_session_getX509+41j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_645CF0E1
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+10h]
		mov	[esp+28h+var_28], eax
		call	pkcs11h_openssl_getX509
		mov	edx, [ebp+arg_0]
		mov	[edx+0Ch], eax
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		test	eax, eax
		jnz	short loc_645CF0E1
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CF0DF
		mov	[esp+28h+var_24], offset aPkcs11Canno_11 ; "PKCS#11: Cannot get	certificate object"
		mov	[esp+28h+var_28], 2
		call	sub_645CBF0E
		jmp	short loc_645CF121
; ---------------------------------------------------------------------------

loc_645CF0DF:				; CODE XREF: pkcs11h_openssl_session_getX509+8Ej
		jmp	short loc_645CF121
; ---------------------------------------------------------------------------

loc_645CF0E1:				; CODE XREF: pkcs11h_openssl_session_getX509+66j
					; pkcs11h_openssl_session_getX509+84j
		mov	eax, [ebp+arg_0]
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], eax
		call	_X509_dup
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_645CF11A
		mov	eax, dword_645D1024
		cmp	eax, 1
		jbe	short loc_645CF118
		mov	[esp+28h+var_24], offset aPkcs11CannotDu ; "PKCS#11: Cannot duplicate certificate o"...
		mov	[esp+28h+var_28], 2
		call	sub_645CBF0E
		jmp	short loc_645CF121
; ---------------------------------------------------------------------------

loc_645CF118:				; CODE XREF: pkcs11h_openssl_session_getX509+C7j
		jmp	short loc_645CF121
; ---------------------------------------------------------------------------

loc_645CF11A:				; CODE XREF: pkcs11h_openssl_session_getX509+BDj
		mov	[ebp+var_10], 1

loc_645CF121:				; CODE XREF: pkcs11h_openssl_session_getX509+A4j
					; pkcs11h_openssl_session_getX509:loc_645CF0DFj ...
		cmp	[ebp+var_10], 0
		jnz	short loc_645CF13F
		cmp	[ebp+var_C], 0
		jz	short loc_645CF13F
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_28], eax
		call	_X509_free
		mov	[ebp+var_C], 0

loc_645CF13F:				; CODE XREF: pkcs11h_openssl_session_getX509+ECj
					; pkcs11h_openssl_session_getX509+F2j
		mov	eax, dword_645D1024
		cmp	eax, 4
		jbe	short loc_645CF164
		mov	eax, [ebp+var_C]
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_24], offset aPkcs11Pkcs1_91 ; "PKCS#11: pkcs11h_openssl_session_getX50"...
		mov	[esp+28h+var_28], 5
		call	sub_645CBF0E

loc_645CF164:				; CODE XREF: pkcs11h_openssl_session_getX509+10Ej
		mov	eax, [ebp+var_C]
		leave
		retn
pkcs11h_openssl_session_getX509	endp

; ---------------------------------------------------------------------------
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _OpenSSL_add_all_digests]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _d2i_X509]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_cmp_current_time]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_subject_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_oneline]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_pubkey]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_get_issuer_name]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_NAME_cmp]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_verify]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_get_ex_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_size]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_get1_RSA]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_set_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_set_ex_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_get_ex_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_SIG_new]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __IAT_start__]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_SIG_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _EVP_PKEY_get1_DSA]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_set_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_set_ex_data]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_get_default_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _RSA_get_ex_new_index]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_get_default_method]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _DSA_get_ex_new_index]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _X509_dup]
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_645CF270(_onexit_t)
sub_645CF270	proc near		; CODE XREF: sub_645CF330+Ap

Func		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_645D8468
		mov	[esp+2Ch+Func],	eax
		call	sub_645CF430
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_14], eax
		jz	loc_645CF310
		mov	[esp+2Ch+Func],	8
		call	__lock
		mov	eax, ds:dword_645D8468
		mov	[esp+2Ch+Func],	eax
		call	sub_645CF430
		mov	[esp+2Ch+var_14], eax
		mov	eax, ds:dword_645D8464
		mov	[esp+2Ch+Func],	eax
		call	sub_645CF430
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax
		call	___dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+Func],	eax
		call	sub_645CF440
		mov	ds:dword_645D8468, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+Func],	eax
		call	sub_645CF440
		mov	[esp+2Ch+Func],	8
		mov	ds:dword_645D8464, eax
		call	__unlock
		add	esp, 28h
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CF310:				; CODE XREF: sub_645CF270+18j
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax ; Func
		call	ds:__imp___onexit
		add	esp, 28h
		pop	ebx
		retn
sub_645CF270	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_645CF330(_onexit_t)
sub_645CF330	proc near		; CODE XREF: sub_645CFA40-27p
					; sub_645D04C0+12p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_645CF270
		test	eax, eax
		setz	al
		add	esp, 1Ch
		movzx	eax, al
		neg	eax
		retn
sub_645CF330	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:645DB01Co

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_645CF370
		cmp	eax, 3
		jz	short loc_645CF370
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_645CF370:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_645CFD50
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_645C1040+108p
					; DATA XREF: .rdata:off_645D708Co ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_645D1034,	2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_645CF3BB
		mov	dword_645D1034,	2

loc_645CF3BB:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_645CF3D1
		cmp	eax, 1
		jz	short loc_645CF400

loc_645CF3C5:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_645CF3D1:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_645DB028
		cmp	ebx, offset dword_645DB028
		jz	short loc_645CF3C5
		xchg	ax, ax

loc_645CF3E0:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_645CF3E8
		call	eax

loc_645CF3E8:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_645DB028
		jnz	short loc_645CF3E0
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_645CF400:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_645CFD50
		jmp	short loc_645CF3C5
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645CF430	proc near		; CODE XREF: sub_645C1040+138p
					; sub_645C1040+14Bp ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_645CF430	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645CF440	proc near		; CODE XREF: sub_645C1000+15p
					; sub_645CF270+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_645CF440	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_645CF450(char	*Format, char ArgList)
sub_645CF450	proc near		; CODE XREF: sub_645CF4B0+1E4p
					; sub_645CF4B0+212p ...

Str		= dword	ptr -1Ch
Size		= dword	ptr -18h
Count		= dword	ptr -14h
File		= dword	ptr -10h
Format		= dword	ptr  4
ArgList		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:__imp___iob
		mov	[esp+1Ch+Count], 1Bh ; Count
		lea	ebx, [esp+1Ch+ArgList]
		mov	[esp+1Ch+Size],	1 ; Size
		mov	[esp+1Ch+Str], offset aMingwW64Runtim ;	"Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+File],	eax ; File
		call	_fwrite
		mov	eax, [esp+1Ch+Format]
		mov	[esp+1Ch+Count], ebx ; ArgList
		mov	[esp+1Ch+Size],	eax ; Format
		mov	eax, ds:__imp___iob
		add	eax, 40h
		mov	[esp+1Ch+Str], eax ; File
		call	_vfprintf
		call	_abort
sub_645CF450	endp

; ---------------------------------------------------------------------------
		jmp	short sub_645CF4B0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CF4B0	proc near		; CODE XREF: .text:645CF4A1j
					; sub_645CF6F0+140p ...

lpAddress	= dword	ptr -58h
lpBuffer	= dword	ptr -54h
dwLength	= dword	ptr -50h
lpflOldProtect	= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
Size		= dword	ptr -40h
Src		= dword	ptr -3Ch
flOldProtect	= dword	ptr -38h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-34h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 4Ch
		mov	[ebp+Size], ecx
		mov	ecx, ds:dword_645D80D8
		mov	[ebp+Src], edx
		test	ecx, ecx
		jle	loc_645CF6A0
		mov	edx, ds:dword_645D80DC
		xor	ebx, ebx

loc_645CF4D7:				; CODE XREF: sub_645CF4B0+44j
		mov	eax, [edx+4]
		cmp	esi, eax
		jb	short loc_645CF4EC
		mov	edi, [edx+8]
		add	eax, [edi+8]
		cmp	esi, eax
		jb	loc_645CF5C0

loc_645CF4EC:				; CODE XREF: sub_645CF4B0+2Cj
		add	ebx, 1
		add	edx, 0Ch
		cmp	ebx, ecx
		jnz	short loc_645CF4D7

loc_645CF4F6:				; CODE XREF: sub_645CF4B0+1F2j
		mov	[esp+58h+lpAddress], esi
		call	sub_645CFF10
		test	eax, eax
		mov	edi, eax
		jz	loc_645CF6C7
		lea	ecx, [ebx+ebx*2]
		shl	ecx, 2
		mov	ebx, ecx
		add	ebx, ds:dword_645D80DC
		mov	[ebp+var_44], ecx
		mov	[ebx+8], eax
		mov	dword ptr [ebx], 0
		call	sub_645D0000
		mov	ecx, [ebp+var_44]
		lea	edx, [ebp+Buffer]
		mov	[ebp+var_44], edx
		add	eax, [edi+0Ch]
		mov	[ebp+var_48], ecx
		mov	[ebx+4], eax
		mov	eax, ds:dword_645D80DC
		mov	ebx, ds:__imp__VirtualQuery@12 ; VirtualQuery(x,x,x)
		mov	eax, [eax+ecx+4]
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualQuery(x,x,x) ; VirtualQuery(x,x,x)
		mov	edx, [ebp+var_44]
		mov	ecx, [ebp+var_48]
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_645CF6A7
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jnz	loc_645CF644

loc_645CF576:				; CODE XREF: sub_645CF4B0+197j
					; sub_645CF4B0+1CDj
		add	ds:dword_645D80D8, 1

loc_645CF57D:				; CODE XREF: sub_645CF4B0+119j
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	[esp+58h+lpAddress], esi ; lpAddress
		call	ebx ; VirtualQuery(x,x,x) ; VirtualQuery(x,x,x)
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_645CF6D7
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_645CF5D0

loc_645CF5A1:				; CODE XREF: sub_645CF4B0+123j
		mov	eax, [ebp+Size]
		mov	[esp+58h+lpAddress], esi ; Dst
		mov	[esp+58h+dwLength], eax	; Size
		mov	eax, [ebp+Src]
		mov	[esp+58h+lpBuffer], eax	; Src
		call	_memcpy

loc_645CF5B7:				; CODE XREF: sub_645CF4B0+168j
					; sub_645CF4B0+16Dj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CF5C0:				; CODE XREF: sub_645CF4B0+36j
		lea	edx, [ebp+Buffer]
		mov	ebx, ds:__imp__VirtualQuery@12 ; VirtualQuery(x,x,x)
		jmp	short loc_645CF57D
; ---------------------------------------------------------------------------
		align 10h

loc_645CF5D0:				; CODE XREF: sub_645CF4B0+EFj
		cmp	eax, 40h
		jz	short loc_645CF5A1
		mov	eax, [ebp+Buffer.RegionSize]
		lea	edi, [ebp+flOldProtect]
		mov	ebx, ds:__imp__VirtualProtect@16 ; VirtualProtect(x,x,x,x)
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	[esp+58h+dwLength], 40h	; flNewProtect
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualProtect(x,x,x,x) ;	VirtualProtect(x,x,x,x)
		mov	eax, [ebp+Size]
		sub	esp, 10h
		mov	[esp+58h+dwLength], eax	; Size
		mov	eax, [ebp+Src]
		mov	[esp+58h+lpAddress], esi ; Dst
		mov	[esp+58h+lpBuffer], eax	; Src
		call	_memcpy
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 40h
		jz	short loc_645CF5B7
		cmp	eax, 4
		jz	short loc_645CF5B7
		mov	eax, [ebp+flOldProtect]
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	[esp+58h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualProtect(x,x,x,x) ;	VirtualProtect(x,x,x,x)
		sub	esp, 10h
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_645CF644:				; CODE XREF: sub_645CF4B0+C0j
		cmp	eax, 40h
		jz	loc_645CF576
		mov	eax, [ebp+Buffer.RegionSize]
		add	ecx, ds:dword_645D80DC
		mov	[ebp+var_44], edx
		mov	[esp+58h+dwLength], 40h	; flNewProtect
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpflOldProtect], ecx ;	lpflOldProtect
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:__imp__VirtualProtect@16 ; VirtualProtect(x,x,x,x)
		mov	edx, [ebp+var_44]
		sub	esp, 10h
		test	eax, eax
		jnz	loc_645CF576
		call	ds:__imp__GetLastError@0 ; GetLastError()
		mov	[esp+58h+lpAddress], offset aVirtualprotect ; "	 VirtualProtect	failed with code 0x%x"
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_645CF450
; ---------------------------------------------------------------------------
		align 10h

loc_645CF6A0:				; CODE XREF: sub_645CF4B0+19j
		xor	ebx, ebx
		jmp	loc_645CF4F6
; ---------------------------------------------------------------------------

loc_645CF6A7:				; CODE XREF: sub_645CF4B0+B4j
		mov	eax, ds:dword_645D80DC
		mov	eax, [eax+ecx+4]
		mov	[esp+58h+dwLength], eax
		mov	eax, [edi+8]
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_645CF450
; ---------------------------------------------------------------------------

loc_645CF6C7:				; CODE XREF: sub_645CF4B0+52j
		mov	[esp+58h+lpBuffer], esi	; ArgList
		mov	[esp+58h+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_645CF450
; ---------------------------------------------------------------------------

loc_645CF6D7:				; CODE XREF: sub_645CF4B0+E3j
		mov	[esp+58h+dwLength], esi
		mov	[esp+58h+lpBuffer], 1Ch	; ArgList
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		call	sub_645CF450
sub_645CF4B0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645CF6F0	proc near		; CODE XREF: sub_645C1260+22p
					; sub_645C1260:loc_645C12C5p

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_3D		= byte ptr -3Dh

		mov	eax, ds:dword_645D80D4
		test	eax, eax
		jz	short loc_645CF700
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CF700:				; CODE XREF: sub_645CF6F0+7j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ds:dword_645D80D4, 1
		call	sub_645CFF60
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_645D0130
		mov	ds:dword_645D80D8, 0
		sub	esp, eax
		lea	eax, [esp+5Ch+var_3D]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_645D80DC, eax
		mov	eax, offset dword_645D7550
		sub	eax, offset dword_645D7550
		cmp	eax, 7
		jle	loc_645CF7F1
		cmp	eax, 0Bh
		jle	loc_645CF8C3
		mov	eax, ds:dword_645D7550
		test	eax, eax
		jnz	loc_645CF7F9
		mov	eax, ds:dword_645D7554
		test	eax, eax
		jnz	loc_645CF7F9
		mov	edi, ds:dword_645D7558
		mov	ebx, offset dword_645D755C
		test	edi, edi
		jz	loc_645CF8C8
		mov	ebx, offset dword_645D7550

loc_645CF790:				; CODE XREF: sub_645CF6F0+1E7j
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_645CF9B0
		add	ebx, 0Ch
		cmp	ebx, offset dword_645D7550
		jnb	short loc_645CF7F1

loc_645CF7A7:				; CODE XREF: sub_645CF6F0+236j
		mov	edx, [ebx]
		mov	edi, [ebx+4]
		mov	ecx, [edx+645C0000h]
		lea	eax, [edi+645C0000h]
		mov	[ebp-3Ch], ecx
		movzx	ecx, byte ptr [ebx+8]
		cmp	ecx, 10h
		jz	loc_645CF8E2
		cmp	ecx, 20h
		jz	loc_645CF966
		cmp	ecx, 8
		jz	loc_645CF931
		mov	[esp+5Ch+lpBuffer], ecx	; ArgList
		mov	[esp+5Ch+lpAddress], offset aUnknownPseudoR ; "	 Unknown pseudo	relocation bit size %d"...
		mov	dword ptr [ebp-34h], 0
		call	sub_645CF450
; ---------------------------------------------------------------------------

loc_645CF7F1:				; CODE XREF: sub_645CF6F0+5Fj
					; sub_645CF6F0+B5j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_645CF7F9:				; CODE XREF: sub_645CF6F0+75j
					; sub_645CF6F0+82j
		mov	ebx, offset dword_645D7550

loc_645CF7FE:				; CODE XREF: sub_645CF6F0+1DCj
					; sub_645CF6F0+1EDj
		cmp	ebx, offset dword_645D7550
		jnb	short loc_645CF7F1
		lea	eax, [ebp-34h]
		mov	[ebp-3Ch], eax
		lea	esi, [esi+0]

loc_645CF810:				; CODE XREF: sub_645CF6F0+14Bj
		mov	edx, [ebx+4]
		mov	ecx, 4
		add	ebx, 8
		lea	eax, [edx+645C0000h]
		mov	edx, [edx+645C0000h]
		add	edx, [ebx-8]
		mov	[ebp-34h], edx
		mov	edx, [ebp-3Ch]
		call	sub_645CF4B0
		cmp	ebx, offset dword_645D7550
		jb	short loc_645CF810

loc_645CF83D:				; CODE XREF: sub_645CF6F0+23Cj
		mov	eax, ds:dword_645D80D8
		xor	ebx, ebx
		test	eax, eax
		jg	short loc_645CF85B
		jmp	short loc_645CF7F1
; ---------------------------------------------------------------------------
		align 10h

loc_645CF850:				; CODE XREF: sub_645CF6F0+180j
					; sub_645CF6F0+1D1j
		add	ebx, 1
		cmp	ebx, ds:dword_645D80D8
		jge	short loc_645CF7F1

loc_645CF85B:				; CODE XREF: sub_645CF6F0+156j
		mov	eax, ds:dword_645D80DC
		lea	esi, [ebx+ebx*2]
		lea	edi, ds:0[esi*4]
		add	eax, edi
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_645CF850
		mov	eax, [eax+4]
		mov	ecx, [ebp-3Ch]
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		mov	[esp+5Ch+lpBuffer], ecx	; lpBuffer
		call	ds:__imp__VirtualQuery@12 ; VirtualQuery(x,x,x)
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_645CF98B
		mov	eax, ds:dword_645D80DC
		lea	ecx, [ebp-38h]
		mov	eax, [eax+esi*4]
		mov	[esp+5Ch+lpflOldProtect], ecx ;	lpflOldProtect
		mov	[esp+5Ch+dwLength], eax	; flNewProtect
		mov	eax, [ebp-28h]
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [ebp-34h]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:__imp__VirtualProtect@16 ; VirtualProtect(x,x,x,x)
		sub	esp, 10h
		jmp	short loc_645CF850
; ---------------------------------------------------------------------------

loc_645CF8C3:				; CODE XREF: sub_645CF6F0+68j
		mov	ebx, offset dword_645D7550

loc_645CF8C8:				; CODE XREF: sub_645CF6F0+95j
		mov	esi, [ebx]
		test	esi, esi
		jnz	loc_645CF7FE
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jz	loc_645CF790
		jmp	loc_645CF7FE
; ---------------------------------------------------------------------------

loc_645CF8E2:				; CODE XREF: sub_645CF6F0+D2j
		movzx	ecx, word ptr [edi+645C0000h]
		movzx	edi, cx
		mov	esi, edi
		or	esi, 0FFFF0000h
		test	cx, cx
		cmovs	edi, esi
		mov	esi, [ebp-3Ch]
		sub	edi, edx
		lea	ecx, [ebp-34h]
		sub	edi, 645C0000h
		mov	[ebp-3Ch], ecx
		lea	edx, [ebp-34h]
		mov	ecx, 2
		add	esi, edi
		mov	[ebp-34h], esi
		call	sub_645CF4B0

loc_645CF91D:				; CODE XREF: sub_645CF6F0+274j
					; sub_645CF6F0+299j
		add	ebx, 0Ch
		cmp	ebx, offset dword_645D7550
		jb	loc_645CF7A7
		jmp	loc_645CF83D
; ---------------------------------------------------------------------------

loc_645CF931:				; CODE XREF: sub_645CF6F0+E4j
		movzx	ecx, byte ptr [eax]
		movzx	edi, cl
		mov	esi, edi
		or	esi, 0FFFFFF00h
		test	cl, cl
		cmovs	edi, esi
		mov	esi, [ebp-3Ch]
		mov	ecx, 1
		sub	edi, 645C0000h
		sub	edi, edx
		lea	edx, [ebp-34h]
		add	esi, edi
		mov	[ebp-34h], esi
		mov	[ebp-3Ch], edx
		call	sub_645CF4B0
		jmp	short loc_645CF91D
; ---------------------------------------------------------------------------

loc_645CF966:				; CODE XREF: sub_645CF6F0+DBj
		mov	esi, [ebp-3Ch]
		add	edx, 645C0000h
		lea	ecx, [ebp-34h]
		mov	[ebp-3Ch], ecx
		mov	ecx, 4
		sub	esi, edx
		add	esi, [eax]
		lea	edx, [ebp-34h]
		mov	[ebp-34h], esi
		call	sub_645CF4B0
		jmp	short loc_645CF91D
; ---------------------------------------------------------------------------

loc_645CF98B:				; CODE XREF: sub_645CF6F0+1A2j
		mov	ecx, ds:dword_645D80DC
		add	ecx, edi
		mov	eax, [ecx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ecx+8]
		mov	eax, [eax+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		call	sub_645CF450
; ---------------------------------------------------------------------------

loc_645CF9B0:				; CODE XREF: sub_645CF6F0+A6j
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		mov	[esp+5Ch+lpAddress], offset aUnknownPseud_0 ; "	 Unknown pseudo	relocation protocol ve"...
		call	sub_645CF450
; ---------------------------------------------------------------------------

; int __cdecl loc_645CF9C0()
loc_645CF9C0:				; DATA XREF: sub_645CFA40:loc_645CFA12o
		mov	eax, off_645D1030
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_645CF9EA
		sub	esp, 0Ch
		xchg	ax, ax

loc_645CF9D0:				; CODE XREF: sub_645CF6F0+2F5j
		call	eax
		mov	eax, off_645D1030
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_645D1030, edx
		test	eax, eax
		jnz	short loc_645CF9D0
		add	esp, 0Ch

locret_645CF9EA:			; CODE XREF: sub_645CF6F0+2D9j
		rep retn
sub_645CF6F0	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_645CFA40

loc_645CF9F0:				; CODE XREF: sub_645CFA40+1Aj
		push	ebx
		sub	esp, 18h
		mov	ebx, ds:dword_645D04E0
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_645CFA23

loc_645CF9FF:				; CODE XREF: sub_645CFA40-9j
		test	ebx, ebx
		jz	short loc_645CFA12

loc_645CFA03:				; CODE XREF: sub_645CFA40-30j
		call	ds:dword_645D04E0[ebx*4]
		sub	ebx, 1
		lea	esi, [esi+0]
		jnz	short loc_645CFA03

loc_645CFA12:				; CODE XREF: sub_645CFA40-3Fj
		mov	[esp+1Ch+var_1C], offset loc_645CF9C0 ;	_onexit_t
		call	sub_645CF330
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_645CFA23:				; CODE XREF: sub_645CFA40-43j
		xor	ebx, ebx
		jmp	short loc_645CFA29
; ---------------------------------------------------------------------------

loc_645CFA27:				; CODE XREF: sub_645CFA40-Bj
		mov	ebx, eax

loc_645CFA29:				; CODE XREF: sub_645CFA40-1Bj
		lea	eax, [ebx+1]
		mov	edx, ds:dword_645D04E0[eax*4]
		test	edx, edx
		jnz	short loc_645CFA27
		jmp	short loc_645CF9FF
; END OF FUNCTION CHUNK	FOR sub_645CFA40
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645CFA40	proc near		; CODE XREF: sub_645C1260+A0p

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 645CF9F0 SIZE 00000049 BYTES

		mov	eax, ds:dword_645D80E0
		test	eax, eax
		jz	short loc_645CFA50
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CFA50:				; CODE XREF: sub_645CFA40+7j
		mov	ds:dword_645D80E0, 1
		jmp	short loc_645CF9F0
sub_645CFA40	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CFA60	proc near		; CODE XREF: DllEntryPoint+34p

lpSystemTimeAsFileTime=	dword ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -28h
PerformanceCount= LARGE_INTEGER	ptr -20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, dword_645D1038
		mov	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		cmp	eax, 0BB40E64Eh
		jz	short loc_645CFA92
		not	eax
		mov	dword_645D103C,	eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_645CFA92:				; CODE XREF: sub_645CFA60+21j
		lea	eax, [ebp+SystemTimeAsFileTime]
		mov	[esp+38h+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		call	ds:__imp__GetSystemTimeAsFileTime@4 ; GetSystemTimeAsFileTime(x)
		mov	esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	edi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	esi, edi
		sub	esp, 4
		call	ds:__imp__GetCurrentProcessId@0	; GetCurrentProcessId()
		mov	ebx, eax
		call	ds:__imp__GetCurrentThreadId@0 ; GetCurrentThreadId()
		mov	[ebp+var_2C], eax
		call	ds:__imp__GetTickCount@0 ; GetTickCount()
		mov	[ebp+var_30], eax
		lea	eax, [ebp+PerformanceCount]
		mov	[esp+38h+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:__imp__QueryPerformanceCounter@4 ; QueryPerformanceCounter(x)
		xor	esi, dword ptr [ebp+PerformanceCount]
		xor	esi, dword ptr [ebp+PerformanceCount+4]
		xor	esi, ebx
		xor	esi, [ebp+var_2C]
		sub	esp, 4
		xor	esi, [ebp+var_30]
		cmp	esi, 0BB40E64Eh
		jz	short loc_645CFB00
		mov	eax, esi
		not	eax

loc_645CFAEC:				; CODE XREF: sub_645CFA60+AAj
		mov	dword_645D1038,	esi
		mov	dword_645D103C,	eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CFB00:				; CODE XREF: sub_645CFA60+86j
		mov	eax, 44BF19B0h
		mov	esi, 0BB40E64Fh
		jmp	short loc_645CFAEC
sub_645CFA60	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_645D81C4, edx
		mov	ds:dword_645D83E0, 0C0000409h
		mov	ds:dword_645D83E4, 1
		mov	ds:dword_645D81B8, eax
		mov	ds:dword_645D83EC, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_645D81AC, eax
		mov	eax, dword_645D1038
		mov	[ebp-10h], eax
		mov	eax, dword_645D103C
		mov	[ebp-0Ch], eax
		call	ds:__imp__SetUnhandledExceptionFilter@4	; SetUnhandledExceptionFilter(x)
		sub	esp, 4
		mov	dword ptr [esp], offset	off_645D7188
		call	ds:__imp__UnhandledExceptionFilter@4 ; UnhandledExceptionFilter(x)
		sub	esp, 4
		call	ds:__imp__GetCurrentProcess@0 ;	GetCurrentProcess()
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:__imp__TerminateProcess@8 ; TerminateProcess(x,x)
		sub	esp, 8
		call	_abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CFBA0	proc near		; CODE XREF: sub_645CFD50:loc_645CFDD2p
					; sub_645CFD50:loc_645CFDE0p

lpCriticalSection= dword ptr -28h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	[esp+28h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
		mov	edi, ds:dword_645D8440
		mov	esi, ds:__imp__GetLastError@0 ;	GetLastError()
		sub	esp, 4
		test	edi, edi
		jz	short loc_645CFBF9
		lea	esi, [esi+0]

loc_645CFBD0:				; CODE XREF: sub_645CFBA0+57j
		mov	eax, [edi]
		mov	[esp+28h+lpCriticalSection], eax ; dwTlsIndex
		call	ds:__imp__TlsGetValue@4	; TlsGetValue(x)
		sub	esp, 4
		mov	ebx, eax
		call	esi
		test	eax, eax
		jnz	short loc_645CFBF2
		test	ebx, ebx
		jz	short loc_645CFBF2
		mov	eax, [edi+4]
		mov	[esp+28h+lpCriticalSection], ebx
		call	eax

loc_645CFBF2:				; CODE XREF: sub_645CFBA0+44j
					; sub_645CFBA0+48j
		mov	edi, [edi+8]
		test	edi, edi
		jnz	short loc_645CFBD0

loc_645CFBF9:				; CODE XREF: sub_645CFBA0+27j
		mov	[esp+28h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
		sub	esp, 4
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_645CFBA0	endp

; ---------------------------------------------------------------------------
		jmp	short loc_645CFC20
; ---------------------------------------------------------------------------
		align 10h

loc_645CFC20:				; CODE XREF: .text:645CFC11j
		push	ebp
		mov	ebp, esp
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 10h
		mov	eax, ds:dword_645D8444
		test	eax, eax
		jnz	short loc_645CFC40

loc_645CFC33:				; CODE XREF: .text:645CFCA1j
		lea	esp, [ebp-8]
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CFC40:				; CODE XREF: .text:645CFC31j
		mov	dword ptr [esp+4], 0Ch
		mov	dword ptr [esp], 1
		call	_calloc
		test	eax, eax
		mov	ebx, eax
		jz	short loc_645CFC9C
		mov	eax, [ebp+8]
		mov	dword ptr [esp], offset	CriticalSection
		mov	[ebx], eax
		mov	eax, [ebp+0Ch]
		mov	[ebx+4], eax
		call	ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
		mov	eax, ds:dword_645D8440
		mov	ds:dword_645D8440, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
		mov	eax, esi
		sub	esp, 4
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_645CFC9C:				; CODE XREF: .text:645CFC58j
		mov	esi, 0FFFFFFFFh
		jmp	short loc_645CFC33
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:dword_645D8444
		mov	ebx, [ebp+8]
		test	eax, eax
		jnz	short loc_645CFCD0
		xor	eax, eax
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CFCD0:				; CODE XREF: .text:645CFCC1j
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:__imp__EnterCriticalSection@4 ; EnterCriticalSection(x)
		mov	edx, ds:dword_645D8440
		sub	esp, 4
		test	edx, edx
		jz	short loc_645CFD01
		mov	eax, [edx]
		cmp	eax, ebx
		jnz	short loc_645CFCFA
		jmp	short loc_645CFD38
; ---------------------------------------------------------------------------

loc_645CFCF2:				; CODE XREF: .text:645CFCFFj
		mov	ecx, [eax]
		cmp	ecx, ebx
		jz	short loc_645CFD18
		mov	edx, eax

loc_645CFCFA:				; CODE XREF: .text:645CFCEEj
		mov	eax, [edx+8]
		test	eax, eax
		jnz	short loc_645CFCF2

loc_645CFD01:				; CODE XREF: .text:645CFCE8j
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
		sub	esp, 4

loc_645CFD11:				; CODE XREF: .text:645CFD36j
		xor	eax, eax
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_645CFD18:				; CODE XREF: .text:645CFCF6j
		mov	ecx, [eax+8]
		mov	[edx+8], ecx

loc_645CFD1E:				; CODE XREF: .text:645CFD42j
		mov	[esp], eax
		call	_free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:__imp__LeaveCriticalSection@4 ; LeaveCriticalSection(x)
		sub	esp, 4
		jmp	short loc_645CFD11
; ---------------------------------------------------------------------------

loc_645CFD38:				; CODE XREF: .text:645CFCF0j
		mov	eax, [edx+8]
		mov	ds:dword_645D8440, eax
		mov	eax, edx
		jmp	short loc_645CFD1E
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645CFD50	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -18h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		cmp	eax, 1
		jz	short loc_645CFDA4
		jb	short loc_645CFD75
		cmp	eax, 3
		jnz	short loc_645CFD6E
		mov	eax, ds:dword_645D8444
		test	eax, eax
		jnz	short loc_645CFDD2

loc_645CFD6E:				; CODE XREF: sub_645CFD50+13j
					; sub_645CFD50+36j ...
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------

loc_645CFD75:				; CODE XREF: sub_645CFD50+Ej
		mov	eax, ds:dword_645D8444
		test	eax, eax
		jnz	short loc_645CFDE0

loc_645CFD7E:				; CODE XREF: sub_645CFD50+95j
		mov	eax, ds:dword_645D8444
		cmp	eax, 1
		jnz	short loc_645CFD6E
		mov	ds:dword_645D8444, 0
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:__imp__DeleteCriticalSection@4 ; DeleteCriticalSection(x)
		sub	esp, 4
		jmp	short loc_645CFD6E
; ---------------------------------------------------------------------------

loc_645CFDA4:				; CODE XREF: sub_645CFD50+Cj
		mov	eax, ds:dword_645D8444
		test	eax, eax
		jz	short loc_645CFDC0

loc_645CFDAD:				; CODE XREF: sub_645CFD50+80j
		mov	ds:dword_645D8444, 1
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CFDC0:				; CODE XREF: sub_645CFD50+5Bj
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:__imp__InitializeCriticalSection@4 ;	InitializeCriticalSection(x)
		sub	esp, 4
		jmp	short loc_645CFDAD
; ---------------------------------------------------------------------------

loc_645CFDD2:				; CODE XREF: sub_645CFD50+1Cj
		call	sub_645CFBA0
		jmp	short loc_645CFD6E
; ---------------------------------------------------------------------------
		align 10h

loc_645CFDE0:				; CODE XREF: sub_645CFD50+2Cj
		call	sub_645CFBA0
		jmp	short loc_645CFD7E
sub_645CFD50	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645CFDF0	proc near		; CODE XREF: .text:loc_645CFE20j
					; .text:645CFEA5p ...
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jz	short loc_645CFE00
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CFE00:				; CODE XREF: sub_645CFDF0+9j
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
sub_645CFDF0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_645CFE20
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CFE20:				; CODE XREF: .text:645CFE19j
		jmp	short sub_645CFDF0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645CFE30	proc near		; CODE XREF: sub_645CFF10+3Ap
					; .text:645D0065p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		mov	edx, [esp+8+arg_0]
		mov	ebx, [esp+8+arg_4]
		add	edx, [edx+3Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	esi, esi
		lea	eax, [edx+eax+18h]
		jz	short loc_645CFE68
		xor	edx, edx
		nop

loc_645CFE50:				; CODE XREF: sub_645CFE30+36j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_645CFE5E
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_645CFE6A

loc_645CFE5E:				; CODE XREF: sub_645CFE30+25j
		add	edx, 1
		add	eax, 28h
		cmp	edx, esi
		jb	short loc_645CFE50

loc_645CFE68:				; CODE XREF: sub_645CFE30+1Bj
		xor	eax, eax

loc_645CFE6A:				; CODE XREF: sub_645CFE30+2Cj
		pop	ebx
		pop	esi
		retn
sub_645CFE30	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		push	edi
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+30h]
		mov	[esp], edi
		call	_strlen
		cmp	eax, 8
		ja	short loc_645CFE95
		cmp	word ptr ds:645C0000h, 5A4Dh
		jz	short loc_645CFEA0

loc_645CFE95:				; CODE XREF: .text:645CFE88j
					; .text:645CFEACj ...
		add	esp, 1Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CFEA0:				; CODE XREF: .text:645CFE93j
		mov	eax, 645C0000h
		call	sub_645CFDF0
		test	eax, eax
		jz	short loc_645CFE95
		mov	eax, ds:645C003Ch
		lea	edx, [eax+645C0000h]
		movzx	eax, word ptr [eax+645C0014h]
		movzx	ebp, word ptr [edx+6]
		lea	ebx, [edx+eax+18h]
		test	ebp, ebp
		jnz	short loc_645CFEDA
		jmp	short loc_645CFE95
; ---------------------------------------------------------------------------
		align 10h

loc_645CFED0:				; CODE XREF: .text:645CFEF0j
		add	esi, 1
		add	ebx, 28h
		cmp	esi, ebp
		jnb	short loc_645CFF00

loc_645CFEDA:				; CODE XREF: .text:645CFECAj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], edi
		mov	[esp], ebx
		call	_strncmp
		test	eax, eax
		jnz	short loc_645CFED0
		add	esp, 1Ch
		mov	esi, ebx
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645CFF00:				; CODE XREF: .text:645CFED8j
		add	esp, 1Ch
		xor	esi, esi
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645CFF10	proc near		; CODE XREF: sub_645CF4B0+49p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4

		push	ebx
		xor	ebx, ebx
		sub	esp, 8
		cmp	word ptr ds:645C0000h, 5A4Dh
		jz	short loc_645CFF28

loc_645CFF21:				; CODE XREF: sub_645CFF10+24j
		add	esp, 8
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_645CFF28:				; CODE XREF: sub_645CFF10+Fj
		mov	eax, 645C0000h
		call	sub_645CFDF0
		test	eax, eax
		jz	short loc_645CFF21
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_C], 645C0000h
		sub	eax, 645C0000h
		mov	[esp+0Ch+var_8], eax
		call	sub_645CFE30
		add	esp, 8
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_645CFF10	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645CFF60	proc near		; CODE XREF: sub_645CF6F0+23p
		push	ebx
		xor	ebx, ebx
		cmp	word ptr ds:645C0000h, 5A4Dh
		jz	short loc_645CFF72

loc_645CFF6E:				; CODE XREF: sub_645CFF60+1Ej
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_645CFF72:				; CODE XREF: sub_645CFF60+Cj
		mov	eax, 645C0000h
		call	sub_645CFDF0
		test	eax, eax
		jz	short loc_645CFF6E
		mov	eax, ds:645C003Ch
		movzx	ebx, word ptr [eax+645C0006h]
		mov	eax, ebx
		pop	ebx
		retn
sub_645CFF60	endp

; ---------------------------------------------------------------------------
		push	esi
		xor	esi, esi
		cmp	word ptr ds:645C0000h, 5A4Dh
		push	ebx
		mov	ebx, [esp+0Ch]
		jz	short loc_645CFFA8

loc_645CFFA3:				; CODE XREF: .text:645CFFB4j
					; .text:645CFFD2j
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_645CFFA8:				; CODE XREF: .text:645CFFA1j
		mov	eax, 645C0000h
		call	sub_645CFDF0
		test	eax, eax
		jz	short loc_645CFFA3
		mov	eax, ds:645C003Ch
		lea	ecx, [eax+645C0000h]
		movzx	eax, word ptr [eax+645C0014h]
		lea	edx, [ecx+eax+18h]
		movzx	ecx, word ptr [ecx+6]
		test	ecx, ecx
		jz	short loc_645CFFA3
		xor	eax, eax

loc_645CFFD6:				; CODE XREF: .text:645CFFEBj
		test	byte ptr [edx+27h], 20h
		jz	short loc_645CFFE3
		test	ebx, ebx
		jz	short loc_645CFFF4
		sub	ebx, 1

loc_645CFFE3:				; CODE XREF: .text:645CFFDAj
		add	eax, 1
		add	edx, 28h
		cmp	eax, ecx
		jb	short loc_645CFFD6
		xor	esi, esi
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_645CFFF4:				; CODE XREF: .text:645CFFDEj
		mov	esi, edx
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645D0000	proc near		; CODE XREF: sub_645CF4B0+72p
		cmp	word ptr ds:645C0000h, 5A4Dh
		jz	short loc_645D0010

loc_645D000B:				; CODE XREF: sub_645D0000+1Cj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645D0010:				; CODE XREF: sub_645D0000+9j
		mov	eax, 645C0000h
		call	sub_645CFDF0
		test	eax, eax
		jz	short loc_645D000B
		mov	eax, 645C0000h
		retn
sub_645D0000	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		cmp	word ptr ds:645C0000h, 5A4Dh
		jz	short loc_645D0040
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645D0040:				; CODE XREF: .text:645D003Bj
		sub	esp, 8
		mov	eax, 645C0000h
		call	sub_645CFDF0
		test	eax, eax
		jz	short loc_645D0076
		mov	eax, [esp+0Ch]
		mov	dword ptr [esp], 645C0000h
		sub	eax, 645C0000h
		mov	[esp+4], eax
		call	sub_645CFE30
		test	eax, eax
		jz	short loc_645D0080
		mov	eax, [eax+24h]
		not	eax
		shr	eax, 1Fh

loc_645D0076:				; CODE XREF: .text:645D004Fj
					; .text:645D0082j
		add	esp, 8
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645D0080:				; CODE XREF: .text:645D006Cj
		xor	eax, eax
		jmp	short loc_645D0076
; ---------------------------------------------------------------------------
		align 10h
		push	edi
		xor	edi, edi
		push	esi
		push	ebx
		sub	esp, 8
		cmp	word ptr ds:645C0000h, 5A4Dh
		mov	ebx, [esp+18h]
		jz	short loc_645D00B0

loc_645D00A7:				; CODE XREF: .text:645D00BCj
					; .text:645D00CBj ...
		add	esp, 8
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_645D00B0:				; CODE XREF: .text:645D00A5j
		mov	eax, 645C0000h
		call	sub_645CFDF0
		test	eax, eax
		jz	short loc_645D00A7
		mov	eax, ds:645C003Ch
		mov	esi, [eax+645C0080h]
		test	esi, esi
		jz	short loc_645D00A7
		mov	[esp+4], esi
		mov	dword ptr [esp], 645C0000h
		call	sub_645CFE30
		test	eax, eax
		jz	short loc_645D00A7
		add	esi, 645C0000h
		mov	edx, esi
		jnz	short loc_645D00F6
		jmp	short loc_645D00A7
; ---------------------------------------------------------------------------
		align 10h

loc_645D00F0:				; CODE XREF: .text:645D0106j
		sub	ebx, 1
		add	edx, 14h

loc_645D00F6:				; CODE XREF: .text:645D00E9j
		mov	ecx, [edx+4]
		test	ecx, ecx
		jnz	short loc_645D0104
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_645D0120

loc_645D0104:				; CODE XREF: .text:645D00FBj
		test	ebx, ebx
		jg	short loc_645D00F0
		mov	edi, [edx+0Ch]
		add	esp, 8
		pop	ebx
		pop	esi
		add	edi, 645C0000h
		mov	eax, edi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_645D0120:				; CODE XREF: .text:645D0102j
		add	esp, 8
		xor	edi, edi
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645D0130	proc near		; CODE XREF: sub_645CF6F0+35p

arg_0		= byte ptr  4

		push	ecx
		push	eax
		cmp	eax, 1000h
		lea	ecx, [esp+8+arg_0]
		jb	short loc_645D0152

loc_645D013D:				; CODE XREF: sub_645D0130+20j
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_645D013D

loc_645D0152:				; CODE XREF: sub_645D0130+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		pop	eax
		pop	ecx
		retn
sub_645D0130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645D0160	proc near		; CODE XREF: sub_645C1260+36p
					; sub_645C1260+B0p ...
		mov	eax, 1
		retn	0Ch
sub_645D0160	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_645D0170	proc near		; CODE XREF: sub_645C1260+EDp
					; sub_645C1260+122p ...
		mov	eax, 1
		retn	0Ch
sub_645D0170	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645D0180	proc near		; CODE XREF: sub_645D02E0+A1p

Size		= dword	ptr -248h
lpFilename	= dword	ptr -244h
nSize		= dword	ptr -240h
uType		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
Dest		= dword	ptr -22Ch
Filename	= word ptr -222h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 23Ch
		mov	ebx, [ebp+arg_4]
		mov	[esp+248h+Size], 4000h ; Size
		mov	esi, [ebp+arg_0]
		call	_malloc
		test	ebx, ebx
		mov	edi, eax
		jz	loc_645D0290
		cmp	word ptr [ebx],	0
		mov	eax, offset aUnknown ; "<unknown>"
		cmovz	ebx, eax

loc_645D01B4:				; CODE XREF: sub_645D0180+115j
		test	esi, esi
		jz	loc_645D0283
		cmp	word ptr [esi],	0
		mov	eax, offset a?	; "?"
		cmovz	esi, eax

loc_645D01C8:				; CODE XREF: sub_645D0180+108j
		lea	edx, [ebp+Filename]
		mov	[esp+248h+lpFilename], edx ; lpFilename
		mov	[ebp+Dest], edx
		mov	[esp+248h+nSize], 104h ; nSize
		mov	[esp+248h+Size], 0 ; hModule
		call	ds:__imp__GetModuleFileNameW@12	; GetModuleFileNameW(x,x,x)
		mov	edx, [ebp+Dest]
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_645D0268

loc_645D01FA:				; CODE XREF: sub_645D0180+FEj
		mov	eax, [ebp+arg_8]
		mov	[esp+248h+var_230], esi
		mov	[esp+248h+var_238], ebx
		mov	[esp+248h+uType], edx
		mov	[esp+248h+var_234], eax
		mov	[esp+248h+nSize], offset aAssertionFaile ; "Assertion failed!\n\nProgram: %ws\nFile"...
		mov	[esp+248h+lpFilename], 1FFFh ; Count
		mov	[esp+248h+Size], edi ; Dest
		call	__snwprintf
		mov	eax, ds:dword_645D80D0
		test	eax, eax
		jz	loc_645D02B7
		mov	[esp+248h+uType], 12012h ; uType
		mov	[esp+248h+nSize], offset Caption ; "MinGW Runtime Assertion"
		mov	[esp+248h+lpFilename], edi ; lpText
		mov	[esp+248h+Size], 0 ; hWnd
		call	ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
		sub	esp, 10h
		cmp	eax, 3
		jz	short loc_645D029F
		cmp	eax, 5
		jnz	short loc_645D029A
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_645D0268:				; CODE XREF: sub_645D0180+78j
		mov	[esp+248h+Size], edx ; Dest
		mov	[esp+248h+lpFilename], offset aUnknown ; "<unknown>"
		call	_wcscpy
		mov	edx, [ebp+Dest]
		jmp	loc_645D01FA
; ---------------------------------------------------------------------------

loc_645D0283:				; CODE XREF: sub_645D0180+36j
		mov	esi, offset a?	; "?"
		jmp	loc_645D01C8
; ---------------------------------------------------------------------------
		align 10h

loc_645D0290:				; CODE XREF: sub_645D0180+22j
		mov	ebx, offset aUnknown ; "<unknown>"
		jmp	loc_645D01B4
; ---------------------------------------------------------------------------

loc_645D029A:				; CODE XREF: sub_645D0180+DEj
		call	_abort
; ---------------------------------------------------------------------------

loc_645D029F:				; CODE XREF: sub_645D0180+D9j
		mov	[esp+248h+Size], 16h
		call	_raise
		mov	[esp+248h+Size], 3 ; Code
		call	__exit
; ---------------------------------------------------------------------------

loc_645D02B7:				; CODE XREF: sub_645D0180+ACj
		mov	eax, ds:__imp___iob
		mov	[esp+248h+nSize], edi
		mov	[esp+248h+lpFilename], offset aWs ; "%ws\n"
		add	eax, 40h
		mov	[esp+248h+Size], eax ; File
		call	_fwprintf
		call	_abort
sub_645D0180	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_645D02E0(char	*, char	*, int)
sub_645D02E0	proc near		; CODE XREF: sub_645C14C0+2Ap
					; sub_645C14C0+4Fp ...

Str		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
Memory		= dword	ptr -20h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebp, [esp+2Ch+arg_0]
		mov	eax, [esp+2Ch+arg_8]
		mov	edi, [esp+2Ch+arg_4]
		mov	[esp+2Ch+Str], ebp ; Str
		mov	[esp+2Ch+Memory], eax
		call	_strlen
		lea	eax, [eax+eax+2]
		mov	[esp+2Ch+Str], eax ; Size
		call	_malloc
		mov	[esp+2Ch+Str], edi ; Str
		mov	esi, eax
		call	_strlen
		lea	eax, [eax+eax+2]
		mov	[esp+2Ch+Str], eax ; Size
		call	_malloc
		movzx	ecx, byte ptr [ebp+0]
		test	cl, cl
		jz	short loc_645D03A2
		xor	ebx, ebx
		xor	edx, edx
		lea	esi, [esi+0]

loc_645D0330:				; CODE XREF: sub_645D02E0+60j
		add	edx, 1
		mov	[esi+ebx*2], cx
		movzx	ecx, byte ptr [ebp+edx+0]
		mov	ebx, edx
		test	cl, cl
		jnz	short loc_645D0330
		add	edx, edx

loc_645D0344:				; CODE XREF: sub_645D02E0+C4j
		xor	ebx, ebx
		mov	[esi+edx], bx
		movzx	ecx, byte ptr [edi]
		test	cl, cl
		jz	short loc_645D03A6
		xor	ebx, ebx
		xor	edx, edx

loc_645D0355:				; CODE XREF: sub_645D02E0+84j
		add	edx, 1
		mov	[eax+ebx*2], cx
		movzx	ecx, byte ptr [edi+edx]
		mov	ebx, edx
		test	cl, cl
		jnz	short loc_645D0355
		add	edx, edx

loc_645D0368:				; CODE XREF: sub_645D02E0+C8j
		mov	edi, [esp+2Ch+Memory]
		xor	ecx, ecx
		mov	[eax+edx], cx
		mov	[esp+2Ch+var_28], eax
		mov	[esp+2Ch+Str], esi
		mov	[esp+2Ch+var_24], edi
		mov	[esp+2Ch+Memory], eax
		call	sub_645D0180
		mov	[esp+2Ch+Str], esi ; Memory
		call	_free
		mov	eax, [esp+2Ch+Memory]
		mov	[esp+2Ch+arg_0], eax ; Memory
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	_free
; ---------------------------------------------------------------------------

loc_645D03A2:				; CODE XREF: sub_645D02E0+47j
		xor	edx, edx
		jmp	short loc_645D0344
; ---------------------------------------------------------------------------

loc_645D03A6:				; CODE XREF: sub_645D02E0+6Fj
		xor	edx, edx
		jmp	short loc_645D0368
sub_645D02E0	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __amsg_exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _memset]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _strlen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _memmove]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _time]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _mktime]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _localtime]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _gmtime]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _sscanf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strchr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _strcmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strncpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _asctime]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strncat]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _getenv]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _strrchr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __lock]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ___dllonexit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __unlock]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _fwrite]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _vfprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _abort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _memcpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _calloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _strncmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __snwprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _wcscpy]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _raise]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __exit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _fwprintf]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_645D04C0	proc near		; DATA XREF: .text:645D04E4o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_645C1460
		mov	[esp+18h+var_18], offset sub_645C14B0 ;	_onexit_t
		call	sub_645CF330
		leave
		retn
sub_645D04C0	endp

; ---------------------------------------------------------------------------
		align 10h
dword_645D04E0	dd 0FFFFFFFFh		; DATA XREF: sub_645CFA40-4Cr
					; sub_645CFA40:loc_645CFA03r ...
		dd offset sub_645D04C0
		dd 0
		dd 0FFFFFFFFh
dword_645D04F0	dd 44h dup(0)		; DATA XREF: .data:off_645D1030o
		dd 280h	dup(?)
_text		ends

; Section 2. (virtual address 00011000)
; Virtual size			: 00000044 (	 68.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 0000FA00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 645D1000h
off_645D1000	dd offset _malloc	; DATA XREF: sub_645C14C0+66r
					; pkcs11h_engine_setSystem+3Ao	...
off_645D1004	dd offset _free		; DATA XREF: sub_645C156B:loc_645C1596r
					; sub_645C20AC+1DEr
off_645D1008	dd offset sub_645C16B8	; DATA XREF: sub_645C3FB4+7Dr
					; sub_645C3FB4+B8r ...
off_645D100C	dd offset sub_645C16CC	; DATA XREF: sub_645C2448+6r
		dd 0
off_645D1014	dd offset a0123456789abcd ; DATA XREF: sub_645C297A+79r
					; sub_645C297A+A4r
					; "0123456789ABCDEF"
off_645D1018	dd offset a0123456789abcd ; DATA XREF: sub_645C2A60+E4r
					; sub_645C2A60+108r
					; "0123456789ABCDEF"
; char *Source
Source		dd offset aUnknown_0	; DATA XREF: sub_645C5BAE+B3r
					; "UNKNOWN"
; char *off_645D1020
off_645D1020	dd offset aOn		; DATA XREF: sub_645C5BAE+E9r
					; " on "
dword_645D1024	dd 3			; DATA XREF: sub_645C2D74:loc_645C2E05r
					; sub_645C2D74:loc_645C2F29r ...
		dd 0FFFFFFFFh
dword_645D102C	dd 0FFFFFFFFh		; DATA XREF: sub_645C1260+11w
					; sub_645C1260:loc_645C12B1w
off_645D1030	dd offset dword_645D04F0 ; DATA	XREF: sub_645CF6F0:loc_645CF9C0r
					; sub_645CF6F0+2E2r ...
dword_645D1034	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w
dword_645D1038	dd 0BB40E64Eh		; DATA XREF: sub_645CFA60+9r
					; sub_645CFA60:loc_645CFAECw ...
dword_645D103C	dd 44BF19B1h		; DATA XREF: sub_645CFA60+25w
					; sub_645CFA60+92w ...
dword_645D1040	dd 0			; DATA XREF: sub_645C1460r
					; sub_645C1460+42o
		align 1000h
_data		ends

; Section 3. (virtual address 00012000)
; Virtual size			: 00005550 (  21840.)
; Section size in file		: 00005600 (  22016.)
; Offset to raw	data for section: 0000FC00
; Flags	40300040: Data Readable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	dword public 'DATA' use32
		assume cs:_rdata
		;org 645D2000h
; CHAR ModuleName[]
ModuleName	db 'libgcj-13.dll',0    ; DATA XREF: sub_645C1460+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_645C1460+28o
		align 4
; char aPkcs11hMem_c[]
aPkcs11hMem_c	db 'pkcs11h-mem.c',0    ; DATA XREF: sub_645C14C0+1Bo
					; sub_645C14C0+40o ...
; char aPNull[]
aPNull		db 'p!=NULL',0          ; DATA XREF: sub_645C14C0+23o
					; sub_645C156B+1Co
; char aS0[]
aS0		db 's!=0',0             ; DATA XREF: sub_645C14C0+48o
; char aDestNull[]
aDestNull	db 'dest!=NULL',0       ; DATA XREF: sub_645C15E9+23o
; char aMem_size0SrcNu[]
aMem_size0SrcNu	db '!(mem_size!=0&&src==NULL)',0 ; DATA XREF: sub_645C15E9+4Eo
; char aPkcs11hSys_c[]
aPkcs11hSys_c	db 'pkcs11h-sys.c',0    ; DATA XREF: pkcs11h_engine_setSystem+14o
; char aEngineNull[]
aEngineNull	db 'engine!=NULL',0     ; DATA XREF: pkcs11h_engine_setSystem+1Co
		align 10h
; char a_pkcs11hCrypto[]
a_pkcs11hCrypto	db '_pkcs11h-crypto-openssl.c',0 ; DATA XREF: sub_645C1808+1Do
					; sub_645C1808+42o ...
; char aBlobNull[]
aBlobNull	db 'blob!=NULL',0       ; DATA XREF: sub_645C1808+25o
					; sub_645C1AD5+24o
; char aExpirationNull[]
aExpirationNull	db 'expiration!=NULL',0 ; DATA XREF: sub_645C1808+4Ao
; char aDnNull[]
aDnNull		db 'dn!=NULL',0         ; DATA XREF: sub_645C1AD5+49o
; char aDn_max0[]
aDn_max0	db 'dn_max>0',0         ; DATA XREF: sub_645C1AD5+6Eo
; char aIssuer_blobNul[]
aIssuer_blobNul	db 'issuer_blob!=NULL',0 ; DATA XREF: sub_645C1BDC+39o
; char aCert_blobNull[]
aCert_blobNull	db 'cert_blob!=NULL',0  ; DATA XREF: sub_645C1BDC+5Eo
		align 4
dword_645D20EC	dd 0			; DATA XREF: pkcs11h_engine_setCrypto+47o
		dd offset sub_645C17EC
		dd offset sub_645C17FE
		dd offset sub_645C1808
		dd offset sub_645C1AD5
		dd offset sub_645C1BDC
; char a_pkcs11hCryp_0[]
a_pkcs11hCryp_0	db '_pkcs11h-crypto-cryptoapi.c',0 ; DATA XREF: sub_645C1D6C+1Ao
					; sub_645C1DE3+1Ao ...
; char aGlobal_dataNul[]
aGlobal_dataNul	db 'global_data!=NULL',0 ; DATA XREF: sub_645C1D6C+22o
					; sub_645C1DE3+22o ...
; CHAR LibFileName[]
LibFileName	db 'crypt32.dll',0      ; DATA XREF: sub_645C1DE3+3Co
; CHAR aCertcreatecert[]
aCertcreatecert	db 'CertCreateCertificateContext',0 ; DATA XREF: sub_645C1DE3+6Ao
; CHAR aCertfreecertif[]
aCertfreecertif	db 'CertFreeCertificateContext',0 ; DATA XREF: sub_645C1DE3+8Ao
; CHAR aCertnametostrw[]
aCertnametostrw	db 'CertNameToStrW',0   ; DATA XREF: sub_645C1DE3+AAo
		align 4
; CHAR aCryptverifycer[]
aCryptverifycer	db 'CryptVerifyCertificateSignatureEx',0 ; DATA XREF: sub_645C1DE3+CAo
; char aBlobNull_0[]
aBlobNull_0	db 'blob!=NULL',0       ; DATA XREF: sub_645C1F09+55o
					; sub_645C20AC+5Co
; char aExpirationNu_0[]
aExpirationNu_0	db 'expiration!=NULL',0 ; DATA XREF: sub_645C1F09+7Ao
; char aDnNull_0[]
aDnNull_0	db 'dn!=NULL',0         ; DATA XREF: sub_645C20AC+81o
; char aDn_max0_0[]
aDn_max0_0	db 'dn_max>0',0         ; DATA XREF: sub_645C20AC+A6o
; char aIssuer_blobN_0[]
aIssuer_blobN_0	db 'issuer_blob!=NULL',0 ; DATA XREF: sub_645C22C8+5Co
; char aCert_blobNul_0[]
aCert_blobNul_0	db 'cert_blob!=NULL',0  ; DATA XREF: sub_645C22C8+81o
		align 4
off_645D21FC	dd offset dword_645D801C ; DATA	XREF: pkcs11h_engine_setCrypto+1Ao
					; pkcs11h_engine_setCrypto+29o	...
		dd offset sub_645C1DE3
		dd offset sub_645C1D6C
		dd offset sub_645C1F09
		dd offset sub_645C20AC
		dd offset sub_645C22C8
; char aPkcs11hUtil_c[]
aPkcs11hUtil_c	db 'pkcs11h-util.c',0   ; DATA XREF: sub_645C277C+14o
					; sub_645C277C+39o ...
; char aSourceNull[]
aSourceNull	db 'source!=NULL',0     ; DATA XREF: sub_645C277C+1Co
					; sub_645C281A+2Fo ...
; char aTargetNull[]
aTargetNull	db 'target!=NULL',0     ; DATA XREF: sub_645C277C+41o
					; sub_645C281A+54o ...
; char aP_target_sizeN[]
aP_target_sizeN	db 'p_target_size!=NULL',0 ; DATA XREF: sub_645C281A+79o
; char Format[]
Format		db '%x',0               ; DATA XREF: sub_645C281A+EDo
; char aMaxNull[]
aMaxNull	db 'max!=NULL',0        ; DATA XREF: sub_645C2A60+5Bo
					; sub_645C2C0E+5Bo
; char a08x[]
a08x		db '%08x',0             ; DATA XREF: sub_645C2C0E+BBo
a0123456789abcd	db '0123456789ABCDEF',0 ; DATA XREF: .data:off_645D1014o
					; .data:off_645D1018o
; char aPkcs11hSession[]
aPkcs11hSession	db 'pkcs11h-session.c',0 ; DATA XREF: sub_645C2D74+30o
					; sub_645C2D74+55o ...
; char aProviderNull[]
aProviderNull	db 'provider!=NULL',0   ; DATA XREF: sub_645C2D74+38o
; char aPslotlistNull[]
aPslotlistNull	db 'pSlotList!=NULL',0  ; DATA XREF: sub_645C2D74+5Do
; char aPulcountNull[]
aPulcountNull	db 'pulCount!=NULL',0   ; DATA XREF: sub_645C2D74+82o
aPkcs11_pkcs11h	db 'PKCS#11: _pkcs11h_session_getSlotList entry provider=%p, token_pr'
					; DATA XREF: sub_645C2D74+BEo
		db 'esent=%d, pSlotList=%p, pulCount=%p',0
		align 4
aPkcs11_pkcs1_0	db 'PKCS#11: _pkcs11h_session_getSlotList return rv=%lu-',27h,'%s',27h,' *p'
					; DATA XREF: sub_645C2D74+1DEo
		db 'ulCount=%ld',0
; char aSessionNull[]
aSessionNull	db 'session!=NULL',0    ; DATA XREF: sub_645C2F6F+23o
					; sub_645C324E+43o ...
; char aAttrsNull[]
aAttrsNull	db 'attrs!=NULL',0      ; DATA XREF: sub_645C2F6F+48o
					; sub_645C316B+1Co
		align 10h
aPkcs11_pkcs1_1	db 'PKCS#11: _pkcs11h_session_getObjectAttributes entry session=%p, o'
					; DATA XREF: sub_645C2F6F+7Do
		db 'bject=%ld, attrs=%p, count=%u',0
		align 10h
aPkcs11_pkcs1_2	db 'PKCS#11: _pkcs11h_session_getObjectAttributes return rv=%lu-',27h,'%'
					; DATA XREF: sub_645C2F6F+1E3o
		db 's',27h,0
		align 4
aPkcs11_pkcs1_3	db 'PKCS#11: _pkcs11h_session_freeObjectAttributes entry attrs=%p, co'
					; DATA XREF: sub_645C316B+43o
		db 'unt=%u',0
aPkcs11_pkcs1_4	db 'PKCS#11: _pkcs11h_session_freeObjectAttributes return',0
					; DATA XREF: sub_645C316B+C8o
		align 4
; char aFilterNullFilt[]
aFilterNullFilt	db '!(filter==NULL && filter_attrs!=0) || filter!=NULL',0
					; DATA XREF: sub_645C324E+74o
; char aP_objectsNull[]
aP_objectsNull	db 'p_objects!=NULL',0  ; DATA XREF: sub_645C324E+99o
; char aP_objects_foun[]
aP_objects_foun	db 'p_objects_found!=NULL',0 ; DATA XREF: sub_645C324E+BEo
		align 10h
aPkcs11_pkcs1_5	db 'PKCS#11: _pkcs11h_session_findObjects entry session=%p, filter=%p'
					; DATA XREF: sub_645C324E+FAo
		db ', filter_attrs=%ld, p_objects=%p, p_objects_found=%p',0
		align 4
aPkcs11BadPkcs1	db 'PKCS#11: Bad PKCS#11 C_FindObjects implementation detected, worka'
					; DATA XREF: sub_645C324E+185o
		db 'round applied',0
		align 4
aPkcs11_pkcs1_6	db 'PKCS#11: _pkcs11h_session_findObjects return rv=%lu-',27h,'%s',27h,', *'
					; DATA XREF: sub_645C324E+342o
		db 'p_objects_found=%ld',0
; char aToken_idNull[]
aToken_idNull	db 'token_id!=NULL',0   ; DATA XREF: sub_645C35B0+39o
; char aP_sessionNull[]
aP_sessionNull	db 'p_session!=NULL',0  ; DATA XREF: sub_645C35B0+5Eo
		align 4
aPkcs11_pkcs1_7	db 'PKCS#11: _pkcs11h_session_getSessionByTokenId entry token_id=%p, '
					; DATA XREF: sub_645C35B0+85o
		db 'p_session=%p',0
aPkcs11UsingCac	db 'PKCS#11: Using cached session',0 ; DATA XREF: sub_645C35B0+F7o
aPkcs11Creating	db 'PKCS#11: Creating a new session',0 ; DATA XREF: sub_645C35B0+147o
aPkcs11_pkcs1_8	db 'PKCS#11: _pkcs11h_session_getSessionByTokenId return rv=%lu-',27h,'%'
					; DATA XREF: sub_645C35B0+284o
		db 's',27h,', *p_session=%p',0
; char aSessionReferen[]
aSessionReferen	db 'session->reference_count>=0',0 ; DATA XREF: sub_645C3851+53o
aPkcs11_pkcs1_9	db 'PKCS#11: _pkcs11h_session_release entry session=%p',0
					; DATA XREF: sub_645C3851+73o
		align 4
aPkcs11_pkcs_10	db 'PKCS#11: _pkcs11h_session_release return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: sub_645C3851+102o
; char aP_slotNull[]
aP_slotNull	db 'p_slot!=NULL',0     ; DATA XREF: sub_645C396C+5Ao
		align 4
aPkcs11_pkcs_11	db 'PKCS#11: _pkcs11h_session_reset entry session=%p, user_data=%p, m'
					; DATA XREF: sub_645C396C+8Fo
		db 'ask_prompt=%08x, p_slot=%p',0
aPkcs11_pkcs_12	db 'PKCS#11: _pkcs11h_session_reset Expected token manufacturerID=',27h,'%'
					; DATA XREF: sub_645C396C+F5o
		db 's',27h,' model=',27h,'%s',27h,', serialNumber=',27h,'%s',27h,', label=',27h,'%s',27h,0
		align 4
aPkcs11CannotGe	db 'PKCS#11: Cannot get slot list for provider ',27h,'%s',27h,' rv=%lu-',27h,'%'
					; DATA XREF: sub_645C396C+1A1o
		db 's',27h,0
aPkcs11_pkcs_13	db 'PKCS#11: _pkcs11h_session_reset Found token manufacturerID=',27h,'%s'
					; DATA XREF: sub_645C396C+266o
		db 27h,' model=',27h,'%s',27h,', serialNumber=',27h,'%s',27h,', label=',27h,'%s',27h,0
		align 4
aPkcs11Cannot_0	db 'PKCS#11: Cannot get token information for provider ',27h,'%s',27h,' slo'
					; DATA XREF: sub_645C396C+320o
		db 't %ld rv=%lu-',27h,'%s',27h,0
		align 4
aPkcs11CallingT	db 'PKCS#11: Calling token_prompt hook for ',27h,'%s',27h,0
					; DATA XREF: sub_645C396C+3C7o
aPkcs11Token_pr	db 'PKCS#11: token_prompt returned %d',0 ; DATA XREF: sub_645C396C+432o
		align 4
aPkcs11_pkcs_14	db 'PKCS#11: _pkcs11h_session_reset return rv=%lu-',27h,'%s',27h,', *p_slot'
					; DATA XREF: sub_645C396C+48Fo
		db '=%ld',0
; char aIdNull[]
aIdNull		db 'id!=NULL',0         ; DATA XREF: sub_645C3E1B+59o
; char aP_handleNull[]
aP_handleNull	db 'p_handle!=NULL',0   ; DATA XREF: sub_645C3E1B+7Eo
aPkcs11_pkcs_15	db 'PKCS#11: _pkcs11h_session_getObjectById entry session=%p, class=%'
					; DATA XREF: sub_645C3E1B+BAo
		db 'ld, id=%p, id_size=%08x, p_handle=%p',0
		align 4
aPkcs11_pkcs_16	db 'PKCS#11: _pkcs11h_session_getObjectById return rv=%lu-',27h,'%s',27h,','
					; DATA XREF: sub_645C3E1B+17Co
		db ' *p_handle=%08lx',0
aPkcs11_pkcs_17	db 'PKCS#11: _pkcs11h_session_validate entry session=%p',0
					; DATA XREF: sub_645C3FB4+1Fo
aPkcs11_pkcs_18	db 'PKCS#11: _pkcs11h_session_validate session->pin_expire_time=%u, t'
					; DATA XREF: sub_645C3FB4+94o
		db 'ime=%u',0
aPkcs11ForcingL	db 'PKCS#11: Forcing logout due to pin timeout',0
					; DATA XREF: sub_645C3FB4+CDo
		align 10h
aPkcs11_pkcs_19	db 'PKCS#11: _pkcs11h_session_validate return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: sub_645C3FB4+11Co
		align 4
aPkcs11_pkcs_20	db 'PKCS#11: _pkcs11h_session_login entry session=%p, is_publicOnly=%'
					; DATA XREF: sub_645C414B+78o
		db 'd, readonly=%d, user_data=%p, mask_prompt=%08x',0
aPkcs11CallingP	db 'PKCS#11: Calling pin_prompt hook denied because of prompt mask',0
					; DATA XREF: sub_645C414B+168o
		align 4
aPkcs11Callin_0	db 'PKCS#11: Calling pin_prompt hook for ',27h,'%s',27h,0
					; DATA XREF: sub_645C414B+1D2o
		align 4
aPkcs11Pin_prom	db 'PKCS#11: pin_prompt hook return rv=%ld',0 ; DATA XREF: sub_645C414B+24Bo
		align 4
aPkcs11_pkcs_21	db 'PKCS#11: _pkcs11h_session_login C_Login rv=%lu-',27h,'%s',27h,0
					; DATA XREF: sub_645C414B+30Fo
aPkcs11_pkcs_22	db 'PKCS#11: _pkcs11h_session_login return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: sub_645C414B+3B6o
		align 4
aPkcs11_pkcs_23	db 'PKCS#11: _pkcs11h_session_logout entry session=%p',0
					; DATA XREF: sub_645C4521+17o
		align 4
aPkcs11_pkcs_24	db 'PKCS#11: _pkcs11h_session_logout return',0 ; DATA XREF: sub_645C4521+8Eo
; char aPkcs11hToken_c[]
aPkcs11hToken_c	db 'pkcs11h-token.c',0  ; DATA XREF: pkcs11h_token_freeTokenId+17o
					; pkcs11h_token_freeTokenId+41o ...
; char a_g_pkcs11h_dat[]
a_g_pkcs11h_dat	db '_g_pkcs11h_data!=NULL',0 ; DATA XREF: pkcs11h_token_freeTokenId+1Fo
					; pkcs11h_token_duplicateTokenId+27o ...
; char a_g_pkcs11h_d_0[]
a_g_pkcs11h_d_0	db '_g_pkcs11h_data->initialized',0
					; DATA XREF: pkcs11h_token_freeTokenId+49o
					; pkcs11h_token_duplicateTokenId+51o ...
; char aToken_idNull_0[]
aToken_idNull_0	db 'token_id!=NULL',0   ; DATA XREF: pkcs11h_token_freeTokenId+6Fo
					; pkcs11h_token_logout+31o ...
		align 4
aPkcs11Pkcs11h_	db 'PKCS#11: pkcs11h_token_freeTokenId entry certificate_id=%p',0
					; DATA XREF: pkcs11h_token_freeTokenId+8Fo
		align 10h
aPkcs11Pkcs11_0	db 'PKCS#11: pkcs11h_token_freeTokenId return',0
					; DATA XREF: pkcs11h_token_freeTokenId+B8o
; char aToNull[]
aToNull		db 'to!=NULL',0         ; DATA XREF: pkcs11h_token_duplicateTokenId+76o
; char aFromNull[]
aFromNull	db 'from!=NULL',0       ; DATA XREF: pkcs11h_token_duplicateTokenId+9Bo
		align 10h
aPkcs11Pkcs11_1	db 'PKCS#11: pkcs11h_token_duplicateTokenId entry to=%p form=%p',0
					; DATA XREF: pkcs11h_token_duplicateTokenId+C2o
aPkcs11Pkcs11_2	db 'PKCS#11: pkcs11h_token_duplicateTokenId return rv=%lu-',27h,'%s',27h,','
					; DATA XREF: pkcs11h_token_duplicateTokenId+13Co
		db ' *to=%p',0
; char aANull[]
aANull		db 'a!=NULL',0          ; DATA XREF: pkcs11h_token_sameTokenId+1Co
; char aBNull[]
aBNull		db 'b!=NULL',0          ; DATA XREF: pkcs11h_token_sameTokenId+41o
; char aInfoNull[]
aInfoNull	db 'info!=NULL',0       ; DATA XREF: sub_645C48DA+24o
; char aP_token_idNull[]
aP_token_idNull	db 'p_token_id!=NULL',0 ; DATA XREF: sub_645C48DA+49o
					; sub_645C4A8D+7Do
		align 4
aPkcs11_pkcs_25	db 'PKCS#11: _pkcs11h_token_getTokenId entry p_token_id=%p',0
					; DATA XREF: sub_645C48DA+69o
		align 4
aPkcs11_pkcs_26	db 'PKCS#11: _pkcs11h_token_getTokenId return rv=%lu-',27h,'%s',27h,', *p_t'
					; DATA XREF: sub_645C48DA+196o
		db 'oken_id=%p',0
		align 4
aPkcs11_pkcs_27	db 'PKCS#11: _pkcs11h_token_newTokenId entry p_token_id=%p',0
					; DATA XREF: sub_645C4A8D+9Do
		align 4
aPkcs11_pkcs_28	db 'PKCS#11: _pkcs11h_token_newTokenId return rv=%lu-',27h,'%s',27h,', *p_t'
					; DATA XREF: sub_645C4A8D+130o
		db 'oken_id=%p',0
		align 4
aPkcs11Pkcs11_3	db 'PKCS#11: pkcs11h_token_logout entry token_id=%p',0Ah,0
					; DATA XREF: pkcs11h_token_logout+51o
		align 10h
aPkcs11Pkcs11_4	db 'PKCS#11: pkcs11h_token_logout return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_token_logout+113o
		align 4
aPkcs11Pkcs11_5	db 'PKCS#11: pkcs11h_token_login entry token_id=%p, readonly=%d',0Ah,0
					; DATA XREF: pkcs11h_token_login+6Eo
		align 4
aPkcs11Pkcs11_6	db 'PKCS#11: pkcs11h_token_login return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_token_login+227o
aPkcs11Pkcs11_7	db 'PKCS#11: pkcs11h_token_ensureAccess entry token_id=%p, user_data='
					; DATA XREF: pkcs11h_token_ensureAccess+B1o
		db '%p, mask_prompt=%08x',0
		align 4
aPkcs11Pkcs11_8	db 'PKCS#11: pkcs11h_token_ensureAccess return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_token_ensureAccess+188o
		align 4
aPkcs11Pkcs11_9	db 'PKCS#11: pkcs11h_token_freeTokenIdList entry token_id_list=%p',0
					; DATA XREF: pkcs11h_token_freeTokenIdList+6Fo
		align 4
aPkcs11Pkcs1_10	db 'PKCS#11: pkcs11h_token_freeTokenIdList return',0
					; DATA XREF: pkcs11h_token_freeTokenIdList+D1o
; char aP_token_id_lis[]
aP_token_id_lis	db 'p_token_id_list!=NULL',0 ; DATA XREF: pkcs11h_token_enumTokenIds+86o
aPkcs11Pkcs1_11	db 'PKCS#11: pkcs11h_token_enumTokenIds entry method=%u, p_token_id_l'
					; DATA XREF: pkcs11h_token_enumTokenIds+ADo
		db 'ist=%p',0
aPkcs11Cannot_1	db 'PKCS#11: Cannot get slot list for provider ',27h,'%s',27h,' rv=%lu-',27h,'%'
					; DATA XREF: pkcs11h_token_enumTokenIds+16Bo
		db 's',27h,0
aPkcs11Pkcs1_12	db 'PKCS#11: pkcs11h_token_enumTokenIds return rv=%lu-',27h,'%s',27h,', *p_'
					; DATA XREF: pkcs11h_token_enumTokenIds+3FDo
		db 'token_id_list=%p',0
; char aPkcs11hCertifi[]
aPkcs11hCertifi	db 'pkcs11h-certificate.c',0 ; DATA XREF: sub_645C55F0+1Co
					; sub_645C5769+1Co ...
; char aNewoneNull[]
aNewoneNull	db 'newone!=NULL',0     ; DATA XREF: sub_645C55F0+24o
		align 4
aPkcs11_pkcs_29	db 'PKCS#11: _pkcs11h_certificate_isBetterCertificate entry current=%'
					; DATA XREF: sub_645C55F0+59o
		db 'p, current_size=%08x, newone=%p, newone_size=%08x',0
		align 10h
aPkcs11_pkcs_30	db 'PKCS#11: _pkcs11h_certificate_isBetterCertificate notAfterCurrent'
					; DATA XREF: sub_645C55F0+11Fo
		db '=',27h,'%s',27h,', notAfterNew=',27h,'%s',27h,0
		align 4
aPkcs11_pkcs_31	db 'PKCS#11: _pkcs11h_certificate_isBetterCertificate return is_bette'
					; DATA XREF: sub_645C55F0+15Co
		db 'r=%d',0
; char aP_certificate_[]
aP_certificate_	db 'p_certificate_id!=NULL',0 ; DATA XREF: sub_645C5769+24o
					; pkcs11h_certificate_getCertificateId+9Ao
		align 4
aPkcs11_pkcs_32	db 'PKCS#11: _pkcs11h_certificate_newCertificateId entry p_certificat'
					; DATA XREF: sub_645C5769+44o
		db 'e_id=%p',0
		align 4
aPkcs11_pkcs_33	db 'PKCS#11: _pkcs11h_certificate_newCertificateId return rv=%lu-',27h,'%'
					; DATA XREF: sub_645C5769+AFo
		db 's',27h,', *p_certificate_id=%p',0
; char aCertificateNul[]
aCertificateNul	db 'certificate!=NULL',0 ; DATA XREF: sub_645C5835+69o
					; sub_645C5D22+38o ...
; char aCertificateIdN[]
aCertificateIdN	db 'certificate->id!=NULL',0 ; DATA XREF: sub_645C5835+91o
aPkcs11__pkcs11	db 'PKCS#11: __pkcs11h_certificate_loadCertificate entry certificate='
					; DATA XREF: sub_645C5835+CDo
		db '%p',0
aPkcs11Cannot_2	db 'PKCS#11: Cannot get object attribute for provider ',27h,'%s',27h,' obje'
					; DATA XREF: sub_645C5835+1FCo
					; sub_645C8AA5+32Do
		db 'ct %ld rv=%lu-',27h,'%s',27h,0
		align 4
aPkcs11__pkcs_0	db 'PKCS#11: __pkcs11h_certificate_loadCertificate return rv=%lu-',27h,'%'
					; DATA XREF: sub_645C5835+35Co
		db 's',27h,0
; char aCertificate_id[]
aCertificate_id	db 'certificate_id!=NULL',0 ; DATA XREF: sub_645C5BAE+1Eo
					; pkcs11h_certificate_freeCertificateId+6Fo ...
		align 4
aPkcs11__pkcs_1	db 'PKCS#11: __pkcs11h_certificate_updateCertificateIdDescription ent'
					; DATA XREF: sub_645C5BAE+3Eo
		db 'ry certificate_id=%p',0
		align 4
aPkcs11__pkcs_2	db 'PKCS#11: __pkcs11h_certificate_updateCertificateIdDescription ret'
					; DATA XREF: sub_645C5BAE+154o
		db 'urn displayName=',27h,'%s',27h,0
		align 4
aPkcs11__pkcs_3	db 'PKCS#11: __pkcs11h_certificate_getKeyAttributes entry certificate'
					; DATA XREF: sub_645C5D22+58o
		db '=%p',0
		align 4
aPkcs11KeyAttri	db 'PKCS#11: Key attributes enforced by provider (%08x)',0
					; DATA XREF: sub_645C5D22+145o
aPkcs11KeyAtt_0	db 'PKCS#11: Key attributes loaded (%08x)',0 ; DATA XREF: sub_645C5D22+25Do
		align 4
aPkcs11GetPriva	db 'PKCS#11: Get private key attributes failed: %ld:',27h,'%s',27h,0
					; DATA XREF: sub_645C5D22+2BEo
		align 10h
aPkcs11__pkcs_4	db 'PKCS#11: __pkcs11h_certificate_getKeyAttributes return rv=%lu-',27h,'%'
					; DATA XREF: sub_645C5D22+349o
		db 's',27h,0
		align 4
aPkcs11_pkcs_34	db 'PKCS#11: _pkcs11h_certificate_validateSession entry certificate=%'
					; DATA XREF: sub_645C6084+43o
		db 'p',0
		align 4
aPkcs11_pkcs_35	db 'PKCS#11: _pkcs11h_certificate_validateSession return rv=%lu-',27h,'%'
					; DATA XREF: sub_645C6084+ABo
		db 's',27h,0
		align 4
aPkcs11_pkcs_36	db 'PKCS#11: _pkcs11h_certificate_resetSession entry certificate=%p, '
					; DATA XREF: sub_645C6148+6Eo
		db 'public_only=%d, session_mutex_locked=%d',0
		align 4
aPkcs11_pkcs_37	db 'PKCS#11: _pkcs11h_certificate_resetSession return rv=%lu-',27h,'%s',27h
					; DATA XREF: sub_645C6148+286o
		db 0
; char a_g_pkcs11h_d_1[]
a_g_pkcs11h_d_1	db '_g_pkcs11h_data!=NULL',0 ; DATA XREF: sub_645C63EB+BCo
					; pkcs11h_certificate_freeCertificateId+1Fo ...
; char a_g_pkcs11h_d_2[]
a_g_pkcs11h_d_2	db '_g_pkcs11h_data->initialized',0 ; DATA XREF: sub_645C63EB+E6o
					; pkcs11h_certificate_freeCertificateId+49o ...
; char aSourceNull_0[]
aSourceNull_0	db 'source!=NULL',0     ; DATA XREF: sub_645C63EB+130o
					; pkcs11h_certificate_sign+9Bo	...
; char aP_target_siz_0[]
aP_target_siz_0	db 'p_target_size!=NULL',0 ; DATA XREF: sub_645C63EB+155o
					; pkcs11h_certificate_sign+C0o	...
		align 4
aPkcs11__pkcs_5	db 'PKCS#11: __pkcs11h_certificate_doPrivateOperation entry certifica'
					; DATA XREF: sub_645C63EB+1AEo
		db 'te=%p, op=%d, mech_type=%ld, source=%p, source_size=%08x, target='
		db '%p, *p_target_size=%08x',0
		align 4
aPkcs11__pkcs_6	db 'PKCS#11: __pkcs11h_certificate_doPrivateOperation init rv=%ld',0
					; DATA XREF: sub_645C63EB+36Bo
		align 4
aPkcs11__pkcs_7	db 'PKCS#11: __pkcs11h_certificate_doPrivateOperation op rv=%ld',0
					; DATA XREF: sub_645C63EB+4FAo
aPkcs11PrivateK	db 'PKCS#11: Private key operation failed rv=%lu-',27h,'%s',27h,0
					; DATA XREF: sub_645C63EB+5F2o
		align 4
aPkcs11__pkcs_8	db 'PKCS#11: __pkcs11h_certificate_doPrivateOperation return rv=%lu-',27h
					; DATA XREF: sub_645C63EB+682o
		db '%s',27h,', *p_target_size=%08x',0
		align 4
aPkcs11Pkcs1_13	db 'PKCS#11: pkcs11h_certificate_freeCertificateId entry certificate_'
					; DATA XREF: pkcs11h_certificate_freeCertificateId+8Fo
		db 'id=%p',0
		align 4
aPkcs11Pkcs1_14	db 'PKCS#11: pkcs11h_certificate_freeCertificateId return',0
					; DATA XREF: pkcs11h_certificate_freeCertificateId+111o
; char aToNull_0[]
aToNull_0	db 'to!=NULL',0         ; DATA XREF: pkcs11h_certificate_duplicateCertificateId+76o
; char aFromNull_0[]
aFromNull_0	db 'from!=NULL',0       ; DATA XREF: pkcs11h_certificate_duplicateCertificateId+9Bo
		align 4
aPkcs11Pkcs1_15	db 'PKCS#11: pkcs11h_certificate_duplicateCertificateId entry to=%p f'
					; DATA XREF: pkcs11h_certificate_duplicateCertificateId+C2o
		db 'orm=%p',0
aPkcs11Pkcs1_16	db 'PKCS#11: pkcs11h_certificate_duplicateCertificateId return rv=%lu'
					; DATA XREF: pkcs11h_certificate_duplicateCertificateId+1FBo
		db '-',27h,'%s',27h,', *to=%p',0
; char aBlobNull_1[]
aBlobNull_1	db 'blob!=NULL',0       ; DATA XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+9Ao
		align 4
aPkcs11Pkcs1_17	db 'PKCS#11: pkcs11h_certificate_setCertificateIdCertificateBlob entr'
					; DATA XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+BAo
		db 'y certificate_id=%p',0
		align 4
aPkcs11Pkcs1_18	db 'PKCS#11: pkcs11h_certificate_setCertificateIdCertificateBlob retu'
					; DATA XREF: pkcs11h_certificate_setCertificateIdCertificateBlob+16Ao
		db 'rn rv=%lu-',27h,'%s',27h,0
aPkcs11Pkcs1_19	db 'PKCS#11: pkcs11h_certificate_freeCertificate entry certificate=%p'
					; DATA XREF: pkcs11h_certificate_freeCertificate+69o
		db 0
		align 4
aPkcs11Pkcs1_20	db 'PKCS#11: pkcs11h_certificate_freeCertificate return',0
					; DATA XREF: pkcs11h_certificate_freeCertificate+E8o
aPkcs11Pkcs1_21	db 'PKCS#11: pkcs11h_certificate_sign entry certificate=%p, mech_type'
					; DATA XREF: pkcs11h_certificate_sign+112o
		db '=%ld, source=%p, source_size=%08x, target=%p, *p_target_size=%08x'
		db 0
		align 10h
aPkcs11Pkcs1_22	db 'PKCS#11: pkcs11h_certificate_sign return rv=%lu-',27h,'%s',27h,', *p_ta'
					; DATA XREF: pkcs11h_certificate_sign+1A6o
		db 'rget_size=%08x',0
		align 4
aPkcs11Pkcs1_23	db 'PKCS#11: pkcs11h_certificate_signRecover entry certificate=%p, me'
					; DATA XREF: pkcs11h_certificate_signRecover+112o
		db 'ch_type=%ld, source=%p, source_size=%08x, target=%p, *p_target_si'
		db 'ze=%08x',0
		align 4
aPkcs11Pkcs1_24	db 'PKCS#11: pkcs11h_certificate_signRecover return rv=%lu-',27h,'%s',27h,','
					; DATA XREF: pkcs11h_certificate_signRecover+1A6o
		db ' *p_target_size=%08x',0
		align 4
aPkcs11Pkcs1_25	db 'PKCS#11: pkcs11h_certificate_decrypt entry certificate=%p, mech_t'
					; DATA XREF: pkcs11h_certificate_decrypt+112o
		db 'ype=%ld, source=%p, source_size=%08x, target=%p, *p_target_size=%'
		db '08x',0
		align 4
aPkcs11Pkcs1_26	db 'PKCS#11: pkcs11h_certificate_decrypt return rv=%lu-',27h,'%s',27h,', *p'
					; DATA XREF: pkcs11h_certificate_decrypt+1A6o
		db '_target_size=%08x',0
		align 4
aPkcs11Pkcs1_27	db 'PKCS#11: pkcs11h_certificate_unwrap entry certificate=%p, mech_ty'
					; DATA XREF: pkcs11h_certificate_unwrap+112o
		db 'pe=%ld, source=%p, source_size=%08x, target=%p, *p_target_size=%0'
		db '8x',0
		align 4
aPkcs11Pkcs1_28	db 'PKCS#11: pkcs11h_certificate_unwrap return rv=%lu-',27h,'%s',27h,', *p_'
					; DATA XREF: pkcs11h_certificate_unwrap+1A6o
		db 'target_size=%08x',0
aPkcs11Pkcs1_29	db 'PKCS#11: pkcs11h_certificate_signAny entry certificate=%p, mech_t'
					; DATA XREF: pkcs11h_certificate_signAny+119o
		db 'ype=%ld, source=%p, source_size=%08x, target=%p, *p_target_size=%'
		db '08x',0
		align 10h
aPkcs11GettingK	db 'PKCS#11: Getting key attributes',0
					; DATA XREF: pkcs11h_certificate_signAny+141o
					; pkcs11h_certificate_decryptAny+141o
aPkcs11Pkcs1_30	db 'PKCS#11: pkcs11h_certificate_signAny return rv=%lu-',27h,'%s',27h,', *p'
					; DATA XREF: pkcs11h_certificate_signAny+2AFo
		db '_target_size=%08x',0
		align 10h
aPkcs11Pkcs1_31	db 'PKCS#11: pkcs11h_certificate_decryptAny entry certificate=%p, mec'
					; DATA XREF: pkcs11h_certificate_decryptAny+119o
		db 'h_type=%ld, source=%p, source_size=%08x, target=%p, *p_target_siz'
		db 'e=%08x',0
		align 4
aPkcs11Pkcs1_32	db 'PKCS#11: pkcs11h_certificate_decryptAny return rv=%lu-',27h,'%s',27h,','
					; DATA XREF: pkcs11h_certificate_decryptAny+2A3o
		db ' *p_target_size=%08x',0
; char aP_certificateN[]
aP_certificateN	db 'p_certificate!=NULL',0 ; DATA XREF: pkcs11h_certificate_create+8Bo
aPkcs11Pkcs1_33	db 'PKCS#11: pkcs11h_certificate_create entry certificate_id=%p, user'
					; DATA XREF: pkcs11h_certificate_create+C7o
		db '_data=%p, mask_prompt=%08x, pin_cache_period=%d, p_certificate=%p'
		db 0
		align 4
aPkcs11Pkcs1_34	db 'PKCS#11: pkcs11h_certificate_create return rv=%lu-',27h,'%s',27h,' *p_c'
					; DATA XREF: pkcs11h_certificate_create+30Bo
		db 'ertificate=%p',0
		align 10h
aPkcs11Pkcs1_35	db 'PKCS#11: pkcs11h_certificate_getCertificateId entry certificate=%'
					; DATA XREF: pkcs11h_certificate_getCertificateId+C1o
		db 'p, certificate_id=%p',0
		align 4
aPkcs11Pkcs1_36	db 'PKCS#11: pkcs11h_certificate_getCertificateId return rv=%lu-',27h,'%'
					; DATA XREF: pkcs11h_certificate_getCertificateId+11Bo
		db 's',27h,0
; char aP_certificat_0[]
aP_certificat_0	db 'p_certificate_blob_size!=NULL',0
					; DATA XREF: pkcs11h_certificate_getCertificateBlob+A8o
		align 4
aPkcs11Pkcs1_37	db 'PKCS#11: pkcs11h_certificate_getCertificateBlob entry certificate'
					; DATA XREF: pkcs11h_certificate_getCertificateBlob+E5o
		db '=%p, certificate_blob=%p, *p_certificate_blob_size=%08x',0
		align 4
aPkcs11Pkcs1_38	db 'PKCS#11: pkcs11h_certificate_getCertificateBlob return rv=%lu-',27h,'%'
					; DATA XREF: pkcs11h_certificate_getCertificateBlob+261o
		db 's',27h,0
		align 4
aPkcs11Pkcs1_39	db 'PKCS#11: pkcs11h_certificate_ensureCertificateAccess entry certif'
					; DATA XREF: pkcs11h_certificate_ensureCertificateAccess+ABo
		db 'icate=%p',0
		align 4
aPkcs11CannotAc	db 'PKCS#11: Cannot access existing object rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_certificate_ensureCertificateAccess+1A7o
					; pkcs11h_certificate_ensureKeyAccess+1A3o
		align 4
aPkcs11Pkcs1_40	db 'PKCS#11: pkcs11h_certificate_ensureCertificateAccess return rv=%l'
					; DATA XREF: pkcs11h_certificate_ensureCertificateAccess+236o
		db 'u-',27h,'%s',27h,0
aPkcs11Pkcs1_41	db 'PKCS#11: pkcs11h_certificate_ensureKeyAccess entry certificate=%p'
					; DATA XREF: pkcs11h_certificate_ensureKeyAccess+ABo
		db 0
		align 4
aPkcs11Pkcs1_42	db 'PKCS#11: pkcs11h_certificate_ensureKeyAccess return rv=%lu-',27h,'%s'
					; DATA XREF: pkcs11h_certificate_ensureKeyAccess+23Co
		db 27h,0
; char aSessionNull_0[]
aSessionNull_0	db 'session!=NULL',0    ; DATA XREF: sub_645C8AA5+39o
		align 4
aPkcs11_pkcs_38	db 'PKCS#11: _pkcs11h_certificate_enumSessionCertificates entry sessi'
					; DATA XREF: sub_645C8AA5+67o
		db 'on=%p, user_data=%p, mask_prompt=%08x',0
		align 4
aPkcs11GetCerti	db 'PKCS#11: Get certificate attributes failed: %ld:',27h,'%s',27h,0
					; DATA XREF: sub_645C8AA5+39Do
		align 4
aPkcs11_pkcs_39	db 'PKCS#11: _pkcs11h_certificate_enumSessionCertificates return rv=%'
					; DATA XREF: sub_645C8AA5+432o
		db 'lu-',27h,'%s',27h,0
; char aP_cert_id_end_[]
aP_cert_id_end_	db 'p_cert_id_end_list!=NULL',0 ; DATA XREF: sub_645C8EF4+49o
					; pkcs11h_certificate_enumTokenCertificateIds+A8o ...
		align 4
aPkcs11__pkcs_9	db 'PKCS#11: __pkcs11h_certificate_splitCertificateIdList entry cert_'
					; DATA XREF: sub_645C8EF4+77o
		db 'id_all=%p, p_cert_id_issuers_list=%p, p_cert_id_end_list=%p',0
		align 4
aPkcs11__pkc_10	db 'PKCS#11: __pkcs11h_certificate_splitCertificateIdList return rv=%'
					; DATA XREF: sub_645C8EF4+30Ao
		db 'lu-',27h,'%s',27h,0
		align 4
aPkcs11Pkcs1_43	db 'PKCS#11: pkcs11h_certificate_freeCertificateIdList entry cert_id_'
					; DATA XREF: pkcs11h_certificate_freeCertificateIdList+6Fo
		db 'list=%p',0
		align 10h
aPkcs11Pkcs1_44	db 'PKCS#11: pkcs11h_certificate_freeCertificateIdList return',0
					; DATA XREF: pkcs11h_certificate_freeCertificateIdList+D1o
; char aToken_idNull_1[]
aToken_idNull_1	db 'token_id!=NULL',0   ; DATA XREF: pkcs11h_certificate_enumTokenCertificateIds+83o
		align 4
aPkcs11Pkcs1_45	db 'PKCS#11: pkcs11h_certificate_enumTokenCertificateIds entry token_'
					; DATA XREF: pkcs11h_certificate_enumTokenCertificateIds+EBo
		db 'id=%p, method=%u, user_data=%p, mask_prompt=%08x, p_cert_id_issue'
		db 'rs_list=%p, p_cert_id_end_list=%p',0
aPkcs11Pkcs1_46	db 'PKCS#11: pkcs11h_certificate_enumTokenCertificateIds return rv=%l'
					; DATA XREF: pkcs11h_certificate_enumTokenCertificateIds+21Ao
		db 'u-',27h,'%s',27h,0
aPkcs11Pkcs1_47	db 'PKCS#11: pkcs11h_certificate_enumCertificateIds entry method=%u, '
					; DATA XREF: pkcs11h_certificate_enumCertificateIds+BBo
		db 'mask_prompt=%08x, p_cert_id_issuers_list=%p, p_cert_id_end_list=%'
		db 'p',0
aPkcs11Cannot_3	db 'PKCS#11: Cannot get token information for provider ',27h,'%s',27h,' slo'
					; DATA XREF: pkcs11h_certificate_enumCertificateIds+2AAo
		db 't %ld rv=%lu-',27h,'%s',27h,0
		align 4
aPkcs11Cannot_4	db 'PKCS#11: Cannot get slot list for provider ',27h,'%s',27h,' rv=%lu-',27h,'%'
					; DATA XREF: pkcs11h_certificate_enumCertificateIds+33Ao
		db 's',27h,0
aPkcs11Pkcs1_48	db 'PKCS#11: pkcs11h_certificate_enumCertificateIds return rv=%lu-',27h,'%'
					; DATA XREF: pkcs11h_certificate_enumCertificateIds+4E7o
		db 's',27h,0
aUnknown_0	db 'UNKNOWN',0          ; DATA XREF: .data:Sourceo
aOn		db ' on ',0             ; DATA XREF: .data:off_645D1020o
aPkcs11__pkc_11	db 'PKCS#11: __pkcs11h_slotevent_provider provider=',27h,'%s',27h,' entry',0
					; DATA XREF: sub_645C9A74+2Do
		align 4
aPkcs11SetupSlo	db 'PKCS#11: Setup slotevent provider=',27h,'%s',27h,' mode hardset to poll'
					; DATA XREF: sub_645C9A74+94o
		db 0
aPkcs11SetupS_0	db 'PKCS#11: Setup slotevent provider=',27h,'%s',27h,' checking trigger',0
					; DATA XREF: sub_645C9A74+EAo
aPkcs11Sloteven	db 'PKCS#11: Slotevent provider=',27h,'%s',27h,' event',0
					; DATA XREF: sub_645C9A74+118o
					; sub_645C9A74+203o ...
		align 10h
aPkcs11SetupS_1	db 'PKCS#11: Setup slotevent provider=',27h,'%s',27h,' checking poll',0
					; DATA XREF: sub_645C9A74+1C9o
		align 4
aPkcs11SetupS_2	db 'PKCS#11: Setup slotevent provider=',27h,'%s',27h,' checking fetch',0
					; DATA XREF: sub_645C9A74+2EAo
		align 10h
aPkcs11Slotev_0	db 'PKCS#11: Slotevent provider=',27h,'%s',27h,' poll',0
					; DATA XREF: sub_645C9A74+32Co
		align 4
aPkcs11__pkc_12	db 'PKCS#11: __pkcs11h_slotevent_provider provider=',27h,'%s',27h,' return',0
					; DATA XREF: sub_645C9A74+4E6o
		align 4
aPkcs11__pkc_13	db 'PKCS#11: __pkcs11h_slotevent_manager entry',0
					; DATA XREF: sub_645C9F7C+17o
		align 10h
aPkcs11CallingS	db 'PKCS#11: Calling slotevent hook',0 ; DATA XREF: sub_645C9F7C+35o
					; sub_645C9F7C+1B5o
aPkcs11__pkc_14	db 'PKCS#11: __pkcs11h_slotevent_manager examine provider list',0
					; DATA XREF: sub_645C9F7C+75o
		align 4
aPkcs11__pkc_15	db 'PKCS#11: __pkcs11h_slotevent_manager found enabled provider witho'
					; DATA XREF: sub_645C9F7C+BAo
		db 'ut thread',0
		align 4
aPkcs11__pkc_16	db 'PKCS#11: __pkcs11h_slotevent_manager found disabled provider with'
					; DATA XREF: sub_645C9F7C+107o
		db ' thread',0
		align 4
aPkcs11__pkc_17	db 'PKCS#11: __pkcs11h_slotevent_manager waiting for slotevent',0
					; DATA XREF: sub_645C9F7C+147o
		align 10h
aPkcs11Slotev_1	db 'PKCS#11: Slotevent skipping event',0 ; DATA XREF: sub_645C9F7C+189o
		align 4
aPkcs11__pkc_18	db 'PKCS#11: __pkcs11h_slotevent_manager joining threads',0
					; DATA XREF: sub_645C9F7C+203o
		align 4
aPkcs11__pkc_19	db 'PKCS#11: __pkcs11h_slotevent_manager return',0
					; DATA XREF: sub_645C9F7C+259o
aPkcs11_pkcs_40	db 'PKCS#11: _pkcs11h_slotevent_init entry',0 ; DATA XREF: sub_645CA1F0+17o
		align 10h
aPkcs11_pkcs_41	db 'PKCS#11: _pkcs11h_slotevent_init return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: sub_645CA1F0+B0o
aPkcs11_pkcs_42	db 'PKCS#11: _pkcs11h_slotevent_notify entry',0
					; DATA XREF: sub_645CA2B9+10o
		align 10h
aPkcs11_pkcs_43	db 'PKCS#11: _pkcs11h_slotevent_notify return',0
					; DATA XREF: sub_645CA2B9+56o
		align 4
aPkcs11_pkcs_44	db 'PKCS#11: _pkcs11h_slotevent_terminate entry',0
					; DATA XREF: sub_645CA35F+10o
aPkcs11_pkcs_45	db 'PKCS#11: _pkcs11h_slotevent_terminate return',0
					; DATA XREF: sub_645CA35F+6Co
		align 4
aCkr_ok		db 'CKR_OK',0           ; DATA XREF: pkcs11h_getMessage:loc_645CA8A1o
aCkr_cancel	db 'CKR_CANCEL',0       ; DATA XREF: pkcs11h_getMessage:loc_645CA8ABo
aCkr_host_memor	db 'CKR_HOST_MEMORY',0  ; DATA XREF: pkcs11h_getMessage:loc_645CA8B5o
aCkr_slot_id_in	db 'CKR_SLOT_ID_INVALID',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA8BFo
aCkr_general_er	db 'CKR_GENERAL_ERROR',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA8C9o
aCkr_function_f	db 'CKR_FUNCTION_FAILED',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA8D3o
aCkr_arguments_	db 'CKR_ARGUMENTS_BAD',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA8DDo
aCkr_no_event	db 'CKR_NO_EVENT',0     ; DATA XREF: pkcs11h_getMessage:loc_645CA8E7o
aCkr_need_to_cr	db 'CKR_NEED_TO_CREATE_THREADS',0
					; DATA XREF: pkcs11h_getMessage:loc_645CA8F1o
aCkr_cant_lock	db 'CKR_CANT_LOCK',0    ; DATA XREF: pkcs11h_getMessage:loc_645CA8FBo
aCkr_attribute_	db 'CKR_ATTRIBUTE_READ_ONLY',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA905o
aCkr_attribut_0	db 'CKR_ATTRIBUTE_SENSITIVE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA90Fo
aCkr_attribut_1	db 'CKR_ATTRIBUTE_TYPE_INVALID',0
					; DATA XREF: pkcs11h_getMessage:loc_645CA919o
aCkr_attribut_2	db 'CKR_ATTRIBUTE_VALUE_INVALID',0
					; DATA XREF: pkcs11h_getMessage:loc_645CA923o
aCkr_data_inval	db 'CKR_DATA_INVALID',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA92Do
aCkr_data_len_r	db 'CKR_DATA_LEN_RANGE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA937o
aCkr_device_err	db 'CKR_DEVICE_ERROR',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA941o
aCkr_device_mem	db 'CKR_DEVICE_MEMORY',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA94Bo
aCkr_device_rem	db 'CKR_DEVICE_REMOVED',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA955o
aCkr_encrypted_	db 'CKR_ENCRYPTED_DATA_INVALID',0
					; DATA XREF: pkcs11h_getMessage:loc_645CA95Fo
aCkr_encrypte_0	db 'CKR_ENCRYPTED_DATA_LEN_RANGE',0
					; DATA XREF: pkcs11h_getMessage:loc_645CA969o
aCkr_function_c	db 'CKR_FUNCTION_CANCELED',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA973o
aCkr_function_n	db 'CKR_FUNCTION_NOT_PARALLEL',0
					; DATA XREF: pkcs11h_getMessage:loc_645CA97Do
aCkr_function_0	db 'CKR_FUNCTION_NOT_SUPPORTED',0
					; DATA XREF: pkcs11h_getMessage:loc_645CA987o
aCkr_key_handle	db 'CKR_KEY_HANDLE_INVALID',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA991o
aCkr_key_size_r	db 'CKR_KEY_SIZE_RANGE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA99Bo
aCkr_key_type_i	db 'CKR_KEY_TYPE_INCONSISTENT',0
					; DATA XREF: pkcs11h_getMessage:loc_645CA9A5o
aCkr_key_not_ne	db 'CKR_KEY_NOT_NEEDED',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA9AFo
aCkr_key_change	db 'CKR_KEY_CHANGED',0  ; DATA XREF: pkcs11h_getMessage:loc_645CA9B9o
aCkr_key_needed	db 'CKR_KEY_NEEDED',0   ; DATA XREF: pkcs11h_getMessage:loc_645CA9C3o
aCkr_key_indige	db 'CKR_KEY_INDIGESTIBLE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA9CDo
		align 4
aCkr_key_functi	db 'CKR_KEY_FUNCTION_NOT_PERMITTED',0
					; DATA XREF: pkcs11h_getMessage:loc_645CA9D7o
aCkr_key_not_wr	db 'CKR_KEY_NOT_WRAPPABLE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA9E1o
aCkr_key_unextr	db 'CKR_KEY_UNEXTRACTABLE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA9EBo
aCkr_mechanism_	db 'CKR_MECHANISM_INVALID',0 ; DATA XREF: pkcs11h_getMessage:loc_645CA9F5o
aCkr_mechanis_0	db 'CKR_MECHANISM_PARAM_INVALID',0
					; DATA XREF: pkcs11h_getMessage:loc_645CA9FFo
aCkr_object_han	db 'CKR_OBJECT_HANDLE_INVALID',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAA09o
aCkr_operation_	db 'CKR_OPERATION_ACTIVE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAA13o
aCkr_operatio_0	db 'CKR_OPERATION_NOT_INITIALIZED',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAA1Do
aCkr_pin_incorr	db 'CKR_PIN_INCORRECT',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAA27o
aCkr_pin_invali	db 'CKR_PIN_INVALID',0  ; DATA XREF: pkcs11h_getMessage:loc_645CAA31o
aCkr_pin_len_ra	db 'CKR_PIN_LEN_RANGE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAA3Bo
aCkr_pin_expire	db 'CKR_PIN_EXPIRED',0  ; DATA XREF: pkcs11h_getMessage:loc_645CAA45o
aCkr_pin_locked	db 'CKR_PIN_LOCKED',0   ; DATA XREF: pkcs11h_getMessage:loc_645CAA4Fo
aCkr_session_cl	db 'CKR_SESSION_CLOSED',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAA59o
aCkr_session_co	db 'CKR_SESSION_COUNT',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAA63o
aCkr_session_ha	db 'CKR_SESSION_HANDLE_INVALID',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAA6Do
		align 4
aCkr_session_pa	db 'CKR_SESSION_PARALLEL_NOT_SUPPORTED',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAA77o
aCkr_session_re	db 'CKR_SESSION_READ_ONLY',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAA81o
aCkr_session_ex	db 'CKR_SESSION_EXISTS',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAA8Bo
aCkr_session__0	db 'CKR_SESSION_READ_ONLY_EXISTS',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAA95o
		align 4
aCkr_session__1	db 'CKR_SESSION_READ_WRITE_SO_EXISTS',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAA9Fo
aCkr_signature_	db 'CKR_SIGNATURE_INVALID',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAAA9o
aCkr_signatur_0	db 'CKR_SIGNATURE_LEN_RANGE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAAB3o
aCkr_template_i	db 'CKR_TEMPLATE_INCOMPLETE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAABDo
aCkr_template_0	db 'CKR_TEMPLATE_INCONSISTENT',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAAC7o
aCkr_token_not_	db 'CKR_TOKEN_NOT_PRESENT',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAAD1o
aCkr_token_no_0	db 'CKR_TOKEN_NOT_RECOGNIZED',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAADBo
aCkr_token_writ	db 'CKR_TOKEN_WRITE_PROTECTED',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAAE5o
		align 4
aCkr_unwrapping	db 'CKR_UNWRAPPING_KEY_HANDLE_INVALID',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAAEFo
aCkr_unwrappi_0	db 'CKR_UNWRAPPING_KEY_SIZE_RANGE',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAAF9o
aCkr_unwrappi_1	db 'CKR_UNWRAPPING_KEY_TYPE_INCONSISTENT',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB03o
aCkr_user_alrea	db 'CKR_USER_ALREADY_LOGGED_IN',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB0Do
aCkr_user_not_l	db 'CKR_USER_NOT_LOGGED_IN',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAB17o
aCkr_user_pin_n	db 'CKR_USER_PIN_NOT_INITIALIZED',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB21o
aCkr_user_type_	db 'CKR_USER_TYPE_INVALID',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAB2Bo
		align 10h
aCkr_user_anoth	db 'CKR_USER_ANOTHER_ALREADY_LOGGED_IN',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB35o
aCkr_user_too_m	db 'CKR_USER_TOO_MANY_TYPES',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAB3Fo
aCkr_wrapped_ke	db 'CKR_WRAPPED_KEY_INVALID',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAB49o
aCkr_wrapped__0	db 'CKR_WRAPPED_KEY_LEN_RANGE',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB50o
		align 10h
aCkr_wrapping_k	db 'CKR_WRAPPING_KEY_HANDLE_INVALID',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB57o
aCkr_wrapping_0	db 'CKR_WRAPPING_KEY_SIZE_RANGE',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB5Eo
aCkr_wrapping_1	db 'CKR_WRAPPING_KEY_TYPE_INCONSISTENT',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB65o
aCkr_random_see	db 'CKR_RANDOM_SEED_NOT_SUPPORTED',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB6Co
aCkr_random_no_	db 'CKR_RANDOM_NO_RNG',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAB73o
aCkr_domain_par	db 'CKR_DOMAIN_PARAMS_INVALID',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB7Ao
aCkr_buffer_too	db 'CKR_BUFFER_TOO_SMALL',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAB81o
aCkr_saved_stat	db 'CKR_SAVED_STATE_INVALID',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAB88o
aCkr_informatio	db 'CKR_INFORMATION_SENSITIVE',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB8Fo
aCkr_state_unsa	db 'CKR_STATE_UNSAVEABLE',0 ; DATA XREF: pkcs11h_getMessage:loc_645CAB96o
aCkr_cryptoki_n	db 'CKR_CRYPTOKI_NOT_INITIALIZED',0
					; DATA XREF: pkcs11h_getMessage:loc_645CAB9Do
		align 4
aCkr_cryptoki_a	db 'CKR_CRYPTOKI_ALREADY_INITIALIZED',0
					; DATA XREF: pkcs11h_getMessage:loc_645CABA4o
aCkr_mutex_bad	db 'CKR_MUTEX_BAD',0    ; DATA XREF: pkcs11h_getMessage:loc_645CABABo
aCkr_mutex_not_	db 'CKR_MUTEX_NOT_LOCKED',0 ; DATA XREF: pkcs11h_getMessage:loc_645CABB2o
aCkr_function_r	db 'CKR_FUNCTION_REJECTED',0 ; DATA XREF: pkcs11h_getMessage:loc_645CABB9o
aCkr_vendor_def	db 'CKR_VENDOR_DEFINED',0 ; DATA XREF: pkcs11h_getMessage:loc_645CABC0o
aUnknownPkcs11E	db 'Unknown PKCS#11 error',0 ; DATA XREF: pkcs11h_getMessage:loc_645CABC7o
		align 4
aPkcs11Pkcs1_49	db 'PKCS#11: pkcs11h_initialize entry',0 ; DATA XREF: pkcs11h_initialize+33o
		align 4
aPkcs11CannotIn	db 'PKCS#11: Cannot initialize crypto engine',0
					; DATA XREF: pkcs11h_initialize+ADo
aPkcs11Initiali	db 'PKCS#11: Initializing openssl',0 ; DATA XREF: pkcs11h_initialize+15Eo
		align 4
aPkcs11Pkcs1_50	db 'PKCS#11: pkcs11h_initialize return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_initialize+262o
		align 4
aPkcs11Pkcs1_51	db 'PKCS#11: pkcs11h_terminate entry',0 ; DATA XREF: pkcs11h_terminate+10o
aPkcs11Terminat	db 'PKCS#11: Terminating openssl',0 ; DATA XREF: pkcs11h_terminate+42o
aPkcs11Removing	db 'PKCS#11: Removing providers',0 ; DATA XREF: pkcs11h_terminate+65o
aPkcs11Releasin	db 'PKCS#11: Releasing sessions',0 ; DATA XREF: pkcs11h_terminate+DCo
		align 4
aPkcs11WarningF	db 'PKCS#11: Warning: Found session with references',0
					; DATA XREF: pkcs11h_terminate+144o
aPkcs11Termin_0	db 'PKCS#11: Terminating slotevent',0 ; DATA XREF: pkcs11h_terminate+1C5o
		align 4
aPkcs11MarkingA	db 'PKCS#11: Marking as uninitialized',0 ; DATA XREF: pkcs11h_terminate+1E8o
		align 10h
aPkcs11Pkcs1_52	db 'PKCS#11: pkcs11h_terminate return',0 ; DATA XREF: pkcs11h_terminate+294o
; char aPkcs11hCore_c[]
aPkcs11hCore_c	db 'pkcs11h-core.c',0   ; DATA XREF: pkcs11h_getLogLevel+17o
					; pkcs11h_getLogLevel+41o ...
; char a_g_pkcs11h_d_3[]
a_g_pkcs11h_d_3	db '_g_pkcs11h_data!=NULL',0 ; DATA XREF: pkcs11h_getLogLevel+1Fo
					; pkcs11h_setLogHook+1Fo ...
; char a_g_pkcs11h_d_4[]
a_g_pkcs11h_d_4	db '_g_pkcs11h_data->initialized',0 ; DATA XREF: pkcs11h_getLogLevel+49o
					; pkcs11h_setLogHook+49o ...
; char aHookNull[]
aHookNull	db 'hook!=NULL',0       ; DATA XREF: pkcs11h_setLogHook+6Eo
					; pkcs11h_setSlotEventHook+6Eo	...
; char aProvider_locat[]
aProvider_locat	db 'provider_location!=NULL',0 ; DATA XREF: pkcs11h_addProvider+9Co
a1_11		db '1.11',0             ; DATA XREF: pkcs11h_addProvider+EDo
aPkcs11Pkcs1_53	db 'PKCS#11: pkcs11h_addProvider entry version=',27h,'%s',27h,', pid=%d, re'
					; DATA XREF: pkcs11h_addProvider+F5o
		db 'ference=',27h,'%s',27h,', provider_location=',27h,'%s',27h,', allow_protected'
		db '_auth=%d, mask_private_mode=%08x, cert_is_private=%d',0
		align 4
aPkcs11AddingPr	db 'PKCS#11: Adding provider ',27h,'%s',27h,'-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_addProvider+121o
; CHAR aC_getfunctionl[]
aC_getfunctionl	db 'C_GetFunctionList',0 ; DATA XREF: pkcs11h_addProvider+268o
; char VarName[]
VarName		db 'PKCS11H_INIT_ARGS_RESERVED',0 ; DATA XREF: pkcs11h_addProvider+2CBo
aPkcs11Pkcs1_54	db 'PKCS#11: pkcs11h_addProvider Provider ',27h,'%s',27h,' manufacturerID ',27h
					; DATA XREF: pkcs11h_addProvider+38Fo
		db '%s',27h,0
		align 4
aPkcs11Provider	db 'PKCS#11: Provider ',27h,'%s',27h,' added rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_addProvider+493o
		align 10h
aPkcs11Pkcs1_55	db 'PKCS#11: pkcs11h_addProvider return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_addProvider+4C7o
; char aReferenceNull[]
aReferenceNull	db 'reference!=NULL',0  ; DATA XREF: pkcs11h_removeProvider+46o
aPkcs11Pkcs1_56	db 'PKCS#11: pkcs11h_removeProvider entry reference=',27h,'%s',27h,0
					; DATA XREF: pkcs11h_removeProvider+66o
		align 4
aPkcs11Removi_0	db 'PKCS#11: Removing provider ',27h,'%s',27h,0
					; DATA XREF: pkcs11h_removeProvider+8Bo
aPkcs11Pkcs1_57	db 'PKCS#11: pkcs11h_removeProvider return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_removeProvider+2CEo
		align 4
aPkcs11Pkcs1_58	db 'PKCS#11: pkcs11h_plugAndPlay entry pid=%d',0
					; DATA XREF: pkcs11h_plugAndPlay+1Eo
		align 4
aPkcs11Pkcs1_59	db 'PKCS#11: pkcs11h_plugAndPlay return',0
					; DATA XREF: pkcs11h_plugAndPlay+116o
aPkcs11Pkcs1_60	db 'PKCS#11: pkcs11h_logout entry',0 ; DATA XREF: pkcs11h_logout+1Eo
		align 4
aPkcs11Pkcs1_61	db 'PKCS#11: pkcs11h_logout return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_logout+C0o
; char aFormatNull[]
aFormatNull	db 'format!=NULL',0     ; DATA XREF: sub_645CBF0E+1Co
; char aTokenNull[]
aTokenNull	db 'token!=NULL',0      ; DATA XREF: sub_645CBFBE+1Co
					; sub_645CC023+1Co
aPkcs11__pkc_20	db 'PKCS#11: __pkcs11h_hooks_default_token_prompt global_data=%p, use'
					; DATA XREF: sub_645CBFBE+4Ao
		db 'r_data=%p, display=',27h,'%s',27h,0
		align 4
aPkcs11__pkc_21	db 'PKCS#11: __pkcs11h_hooks_default_pin_prompt global_data=%p, user_'
					; DATA XREF: sub_645CC023+4Ao
		db 'data=%p, display=',27h,'%s',27h,0
		align 4
; char aPkcs11hData_c[]
aPkcs11hData_c	db 'pkcs11h-data.c',0   ; DATA XREF: sub_645CC088+95o
					; sub_645CC088+BAo ...
; char aSessionNull_1[]
aSessionNull_1	db 'session!=NULL',0    ; DATA XREF: sub_645CC088+9Do
; char aApplicationNul[]
aApplicationNul	db 'application!=NULL',0 ; DATA XREF: sub_645CC088+C2o
					; pkcs11h_data_get+DAo	...
; char aLabelNull[]
aLabelNull	db 'label!=NULL',0      ; DATA XREF: sub_645CC088+E7o
					; pkcs11h_data_get+FFo	...
		align 10h
aPkcs11_pkcs_46	db 'PKCS#11: _pkcs11h_data_getObject entry session=%p, application=',27h
					; DATA XREF: sub_645CC088+11Co
		db '%s',27h,', label=',27h,'%s',27h,', p_handle=%p',0
		align 10h
aPkcs11_pkcs_47	db 'PKCS#11: _pkcs11h_data_getObject return rv=%lu-',27h,'%s',27h,', *p_han'
					; DATA XREF: sub_645CC088+1DEo
		db 'dle=%08lx',0
; char a_g_pkcs11h_d_5[]
a_g_pkcs11h_d_5	db '_g_pkcs11h_data!=NULL',0 ; DATA XREF: pkcs11h_data_get+66o
					; pkcs11h_data_put+EBo	...
; char a_g_pkcs11h_d_6[]
a_g_pkcs11h_d_6	db '_g_pkcs11h_data->initialized',0 ; DATA XREF: pkcs11h_data_get+90o
					; pkcs11h_data_put+115o ...
; char aToken_idNull_2[]
aToken_idNull_2	db 'token_id!=NULL',0   ; DATA XREF: pkcs11h_data_get+B5o
					; pkcs11h_data_put+13Ao ...
; char aP_blob_sizeNul[]
aP_blob_sizeNul	db 'p_blob_size!=NULL',0 ; DATA XREF: pkcs11h_data_get+124o
		align 4
aPkcs11Pkcs1_62	db 'PKCS#11: pkcs11h_data_get entry token_id=%p, application=',27h,'%s',27h
					; DATA XREF: pkcs11h_data_get+17Do
		db ', label=',27h,'%s',27h,', user_data=%p, mask_prompt=%08x, blob=%p, *p_b'
		db 'lob_size=%08x',0
		align 4
aPkcs11ReadData	db 'PKCS#11: Read data object failed rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_data_get+291o
		align 4
aPkcs11Pkcs1_63	db 'PKCS#11: pkcs11h_data_get return rv=%lu-',27h,'%s',27h,', *p_blob_size='
					; DATA XREF: pkcs11h_data_get+39Co
		db '%08x',0
; char aBlobNull_2[]
aBlobNull_2	db 'blob!=NULL',0       ; DATA XREF: pkcs11h_data_put+1A9o
		align 10h
aPkcs11Pkcs1_64	db 'PKCS#11: pkcs11h_data_put entry token_id=%p, application=',27h,'%s',27h
					; DATA XREF: pkcs11h_data_put+200o
		db ', label=',27h,'%s',27h,', user_data=%p, mask_prompt=%08x, blob=%p, blob'
		db '_size=%08x',0
		align 4
aPkcs11WriteDat	db 'PKCS#11: Write data object failed rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_data_put+2E3o
		align 4
aPkcs11Pkcs1_65	db 'PKCS#11: pkcs11h_data_put return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_data_put+396o
		align 4
aPkcs11Pkcs1_66	db 'PKCS#11: pkcs11h_data_del entry token_id=%p, application=',27h,'%s',27h
					; DATA XREF: pkcs11h_data_del+11Eo
		db ', label=',27h,'%s',27h,', user_data=%p, mask_prompt=%08x',0
		align 10h
aPkcs11RemoveDa	db 'PKCS#11: Remove data object failed rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_data_del+21Bo
		align 10h
aPkcs11Pkcs1_67	db 'PKCS#11: pkcs11h_data_del return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_data_del+2C7o
		align 10h
aPkcs11Pkcs1_68	db 'PKCS#11: pkcs11h_freeDataIdList entry token_id_list=%p',0
					; DATA XREF: pkcs11h_data_freeDataIdList+6Fo
		align 4
aPkcs11Pkcs1_69	db 'PKCS#11: pkcs11h_token_freeDataIdList return',0
					; DATA XREF: pkcs11h_data_freeDataIdList+E0o
; char aP_data_id_list[]
aP_data_id_list	db 'p_data_id_list!=NULL',0 ; DATA XREF: pkcs11h_data_enumDataObjects+99o
		align 4
aPkcs11Pkcs1_70	db 'PKCS#11: pkcs11h_data_enumDataObjects entry token_id=%p, is_publi'
					; DATA XREF: pkcs11h_data_enumDataObjects+DCo
		db 'c=%d, user_data=%p, mask_prompt=%08x, p_data_id_list=%p',0
		align 4
aPkcs11Enumerat	db 'PKCS#11: Enumerate data objects failed rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_data_enumDataObjects+3B3o
		align 4
aPkcs11Pkcs1_71	db 'PKCS#11: pkcs11h_data_enumDataObjects return rv=%lu-',27h,'%s',27h,', *'
					; DATA XREF: pkcs11h_data_enumDataObjects+494o
		db 'p_data_id_list=%p',0
		align 4
; char aPkcs11hSeriali[]
aPkcs11hSeriali	db 'pkcs11h-serialization.c',0
					; DATA XREF: pkcs11h_token_serializeTokenId+1Co
					; pkcs11h_token_serializeTokenId+41o ...
; char aMaxNull_0[]
aMaxNull_0	db 'max!=NULL',0        ; DATA XREF: pkcs11h_token_serializeTokenId+24o
					; pkcs11h_certificate_serializeCertificateId+3Ao
; char aToken_idNull_3[]
aToken_idNull_3	db 'token_id!=NULL',0   ; DATA XREF: pkcs11h_token_serializeTokenId+49o
		align 10h
aPkcs11Pkcs1_72	db 'PKCS#11: pkcs11h_token_serializeTokenId entry sz=%p, *max=%08x, t'
					; DATA XREF: pkcs11h_token_serializeTokenId+B9o
		db 'oken_id=%p',0
; char a___[]
a@?_		db '\/"',27h,'%&#@!?$* <>{}[]()`|:;,.+-',0
					; DATA XREF: pkcs11h_token_serializeTokenId+E4o
					; pkcs11h_token_serializeTokenId+16Fo
		align 4
aPkcs11Pkcs1_73	db 'PKCS#11: pkcs11h_token_serializeTokenId return rv=%lu-',27h,'%s',27h,','
					; DATA XREF: pkcs11h_token_serializeTokenId+203o
		db ' *max=%08x, sz=',27h,'%s',27h,0
; char aP_token_idNu_0[]
aP_token_idNu_0	db 'p_token_id!=NULL',0 ; DATA XREF: pkcs11h_token_deserializeTokenId+38o
; char aSzNull[]
aSzNull		db 'sz!=NULL',0         ; DATA XREF: pkcs11h_token_deserializeTokenId+5Do
					; pkcs11h_certificate_deserializeCertificateId+5Eo
		align 4
aPkcs11Pkcs1_74	db 'PKCS#11: pkcs11h_token_deserializeTokenId entry p_token_id=%p, sz'
					; DATA XREF: pkcs11h_token_deserializeTokenId+84o
		db '=',27h,'%s',27h,0
		align 10h
aPkcs11Pkcs1_75	db 'PKCS#11: pkcs11h_token_deserializeTokenId return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: pkcs11h_token_deserializeTokenId+275o
; char aCertificate__0[]
aCertificate__0	db 'certificate_id!=NULL',0
					; DATA XREF: pkcs11h_certificate_serializeCertificateId+5Fo
		align 4
aPkcs11Pkcs1_76	db 'PKCS#11: pkcs11h_certificate_serializeCertificateId entry sz=%p, '
					; DATA XREF: pkcs11h_certificate_serializeCertificateId+9Co
		db '*max=%08x, certificate_id=%p',0
		align 4
aPkcs11Pkcs1_77	db 'PKCS#11: pkcs11h_certificate_serializeCertificateId return rv=%lu'
					; DATA XREF: pkcs11h_certificate_serializeCertificateId+1AAo
		db '-',27h,'%s',27h,', *max=%08x, sz=',27h,'%s',27h,0
; char aP_certificat_1[]
aP_certificat_1	db 'p_certificate_id!=NULL',0
					; DATA XREF: pkcs11h_certificate_deserializeCertificateId+39o
		align 4
aPkcs11Pkcs1_78	db 'PKCS#11: pkcs11h_certificate_deserializeCertificateId entry p_cer'
					; DATA XREF: pkcs11h_certificate_deserializeCertificateId+8Eo
		db 'tificate_id=%p, sz=',27h,'%s',27h,0
		align 4
aPkcs11Pkcs1_79	db 'PKCS#11: pkcs11h_certificate_deserializeCertificateId return rv=%'
					; DATA XREF: pkcs11h_certificate_deserializeCertificateId+1FFo
		db 'lu-',27h,'%s',27h,0
		align 10h
aPkcs11__pkc_22	db 'PKCS#11: __pkcs11h_openssl_ex_data_dup entered - to=%p, from=%p, '
					; DATA XREF: sub_645CDB0C+3Ao
		db 'from_d=%p, idx=%d, argl=%ld, argp=%p',0
; char aPkcs11hOpenssl[]
aPkcs11hOpenssl	db 'pkcs11h-openssl.c',0 ; DATA XREF: sub_645CDB0C+5Co
					; sub_645CDC32+1Bo ...
; char aFrom_dNull[]
aFrom_dNull	db 'from_d!=NULL',0     ; DATA XREF: sub_645CDB0C+64o
		align 4
aPkcs11__pkc_23	db 'PKCS#11: __pkcs11h_openssl_ex_data_dup session refcount=%d',0
					; DATA XREF: sub_645CDB0C+95o
		align 4
aPkcs11__pkc_24	db 'PKCS#11: __pkcs11h_openssl_ex_data_free entered - parent=%p, ptr='
					; DATA XREF: sub_645CDBCB+40o
		db '%p, ad=%p, idx=%d, argl=%ld, argp=%p',0
; char aRsaNull[]
aRsaNull	db 'rsa!=NULL',0        ; DATA XREF: sub_645CDC32+23o
					; sub_645CDCD1+8Fo ...
; char aSessionNull_2[]
aSessionNull_2	db 'session!=NULL',0    ; DATA XREF: sub_645CDC32+5Fo
					; sub_645CE213+5Fo
; char aSessionCertifi[]
aSessionCertifi	db 'session->certificate!=NULL',0 ; DATA XREF: sub_645CDC32+88o
					; sub_645CE213+88o
; char aFromNull_1[]
aFromNull_1	db 'from!=NULL',0       ; DATA XREF: sub_645CDCD1+45o
					; sub_645CDF10+38o
; char aToNull_1[]
aToNull_1	db 'to!=NULL',0         ; DATA XREF: sub_645CDCD1+6Ao
					; sub_645CDF10+5Do
		align 4
aPkcs11__pkc_25	db 'PKCS#11: __pkcs11h_openssl_rsa_dec entered - flen=%d, from=%p, to'
					; DATA XREF: sub_645CDCD1+CBo
		db '=%p, rsa=%p, padding=%d',0
		align 10h
aPkcs11Performi	db 'PKCS#11: Performing decryption',0 ; DATA XREF: sub_645CDCD1+157o
		align 10h
aPkcs11CannotPe	db 'PKCS#11: Cannot perform decryption %ld:',27h,'%s',27h,0
					; DATA XREF: sub_645CDCD1+1C2o
aPkcs11__pkc_26	db 'PKCS#11: __pkcs11h_openssl_rsa_dec - return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: sub_645CDCD1+219o
aPkcs11__pkc_27	db 'PKCS#11: __pkcs11h_openssl_rsa_enc entered - flen=%d, from=%p, to'
					; DATA XREF: sub_645CDF10+BEo
		db '=%p, rsa=%p, padding=%d',0
aPkcs11Perfor_0	db 'PKCS#11: Performing signature',0 ; DATA XREF: sub_645CDF10+11Co
		align 4
aPkcs11Cannot_5	db 'PKCS#11: Cannot perform signature %ld:',27h,'%s',27h,0
					; DATA XREF: sub_645CDF10+188o
					; sub_645CE2B2+12Co ...
		align 4
aPkcs11__pkc_28	db 'PKCS#11: __pkcs11h_openssl_rsa_enc - return rv=%lu-',27h,'%s',27h,0
					; DATA XREF: sub_645CDF10+1DFo
aPkcs11__pkc_29	db 'PKCS#11: __pkcs11h_openssl_session_setRSA - entered openssl_sessi'
					; DATA XREF: sub_645CE115+2Co
		db 'on=%p, evp=%p',0
aPkcs11Cannot_6	db 'PKCS#11: Cannot get RSA key',0 ; DATA XREF: sub_645CE115+5Eo
					; pkcs11h_openssl_session_getRSA+A0o
		align 4
aPkcs11__pkc_30	db 'PKCS#11: __pkcs11h_openssl_session_setRSA - return ret=%d',0
					; DATA XREF: sub_645CE115+E5o
; char aDsaNull[]
aDsaNull	db 'dsa!=NULL',0        ; DATA XREF: sub_645CE213+23o
					; sub_645CE2B2+9Fo
aPkcs11__pkc_31	db 'PKCS#11: __pkcs11h_openssl_dsa_do_sign - entered dgst=%p, dlen=%d'
					; DATA XREF: sub_645CE2B2+50o
		db ', dsa=%p',0
; char aDgstNull[]
aDgstNull	db 'dgst!=NULL',0       ; DATA XREF: sub_645CE2B2+7Ao
; char aCertificateN_0[]
aCertificateN_0	db 'certificate!=NULL',0 ; DATA XREF: sub_645CE2B2+C4o
					; pkcs11h_openssl_getX509+40o
		align 4
aPkcs11CannotCa	db 'PKCS#11: Cannot cannot allocate signature buffer',0
					; DATA XREF: sub_645CE2B2+16Fo
		align 4
aPkcs11CannotAl	db 'PKCS#11: Cannot allocate DSA_SIG',0 ; DATA XREF: sub_645CE2B2+21Bo
aPkcs11CannotCo	db 'PKCS#11: Cannot convert dsa r',0 ; DATA XREF: sub_645CE2B2+266o
aPkcs11Cannot_7	db 'PKCS#11: Cannot convert dsa s',0 ; DATA XREF: sub_645CE2B2+2B1o
		align 4
aPkcs11__pkc_32	db 'PKCS#11: __pkcs11h_openssl_dsa_do_sign - return sig=%p',0
					; DATA XREF: sub_645CE2B2+311o
		align 4
aPkcs11__pkc_33	db 'PKCS#11: __pkcs11h_openssl_session_setDSA - entered openssl_sessi'
					; DATA XREF: sub_645CE5E0+2Co
		db 'on=%p, evp=%p',0
aPkcs11Cannot_8	db 'PKCS#11: Cannot get DSA key',0 ; DATA XREF: sub_645CE5E0+5Eo
		align 10h
aPkcs11__pkc_34	db 'PKCS#11: __pkcs11h_openssl_session_setDSA - return ret=%d',0
					; DATA XREF: sub_645CE5E0+D4o
		align 4
aPkcs11_pkcs_48	db 'PKCS#11: _pkcs11h_openssl_initialize - entered',0
					; DATA XREF: sub_645CE6CD+10o
aPkcs11h	db 'pkcs11h',0          ; DATA XREF: sub_645CE6CD+41o
					; sub_645CE6CD+81o ...
		align 4
aPkcs11_pkcs_49	db 'PKCS#11: _pkcs11h_openssl_initialize - return',0
					; DATA XREF: sub_645CE6CD+106o
		align 4
aPkcs11_pkcs_50	db 'PKCS#11: _pkcs11h_openssl_terminate',0 ; DATA XREF: sub_645CE7EE+10o
aPkcs11Pkcs1_80	db 'PKCS#11: pkcs11h_openssl_getX509 - entry certificate=%p',0
					; DATA XREF: pkcs11h_openssl_getX509+60o
aPkcs11UnableTo	db 'PKCS#11: Unable to allocate certificate object',0
					; DATA XREF: pkcs11h_openssl_getX509+8Do
		align 10h
aPkcs11Unable_0	db 'PKCS#11: Unable to parse X.509 certificate',0
					; DATA XREF: pkcs11h_openssl_getX509+143o
		align 4
aPkcs11Pkcs1_81	db 'PKCS#11: pkcs11h_openssl_getX509 - return rv=%ld-',27h,'%s',27h,', x509'
					; DATA XREF: pkcs11h_openssl_getX509+1ADo
		db '=%p',0
		align 4
aPkcs11Pkcs1_82	db 'PKCS#11: pkcs11h_openssl_createSession - entry',0
					; DATA XREF: pkcs11h_openssl_createSession+1Eo
		align 4
aPkcs11Cannot_9	db 'PKCS#11: Cannot allocate memory',0
					; DATA XREF: pkcs11h_openssl_createSession+58o
aPkcs11Canno_10	db 'PKCS#11: Cannot initialize mutex %ld:',27h,'%s',27h,0
					; DATA XREF: pkcs11h_openssl_createSession+B6o
		align 4
aPkcs11Pkcs1_83	db 'PKCS#11: pkcs11h_openssl_createSession - return openssl_session=%'
					; DATA XREF: pkcs11h_openssl_createSession+F7o
		db 'p',0
; char aOpenssl_sessio[]
aOpenssl_sessio	db 'openssl_session!=NULL',0 ; DATA XREF: pkcs11h_openssl_getCleanupHook+1Co
					; pkcs11h_openssl_setCleanupHook+1Co ...
		align 4
aPkcs11Pkcs1_84	db 'PKCS#11: pkcs11h_openssl_freeSession - entry openssl_session=%p, '
					; DATA XREF: pkcs11h_openssl_freeSession+47o
		db 'count=%d',0
		align 10h
aPkcs11CannotLo	db 'PKCS#11: Cannot lock mutex %ld:',27h,'%s',27h,0
					; DATA XREF: pkcs11h_openssl_freeSession+8Eo
; char aOpenssl_sess_0[]
aOpenssl_sess_0	db 'openssl_session->reference_count>=0',0
					; DATA XREF: pkcs11h_openssl_freeSession+DDo
aPkcs11Pkcs1_85	db 'PKCS#11: pkcs11h_openssl_freeSession - return',0
					; DATA XREF: pkcs11h_openssl_freeSession+175o
		align 4
aPkcs11Pkcs1_86	db 'PKCS#11: pkcs11h_openssl_session_getRSA - entry openssl_session=%'
					; DATA XREF: pkcs11h_openssl_session_getRSA+2Co
		db 'p',0
		align 4
aPkcs11InvalidP	db 'PKCS#11: Invalid public key algorithm',0
					; DATA XREF: pkcs11h_openssl_session_getRSA+6Ao
		align 4
aPkcs11Pkcs1_87	db 'PKCS#11: pkcs11h_openssl_session_getRSA - return ret=%p',0
					; DATA XREF: pkcs11h_openssl_session_getRSA+106o
; char aOpenssl_sess_1[]
aOpenssl_sess_1	db '!openssl_session->initialized',0
					; DATA XREF: pkcs11h_openssl_session_getEVP+5Ao
		align 4
aPkcs11Pkcs1_88	db 'PKCS#11: pkcs11h_openssl_session_getEVP - entry openssl_session=%'
					; DATA XREF: pkcs11h_openssl_session_getEVP+9Fo
		db 'p',0
		align 10h
aPkcs11Canno_11	db 'PKCS#11: Cannot get certificate object',0
					; DATA XREF: pkcs11h_openssl_session_getEVP+D1o
					; pkcs11h_openssl_session_getX509+90o
		align 4
aPkcs11Canno_12	db 'PKCS#11: Cannot get public key',0
					; DATA XREF: pkcs11h_openssl_session_getEVP+10Do
		align 4
aPkcs11Invali_0	db 'PKCS#11: Invalid public key algorithm %d',0
					; DATA XREF: pkcs11h_openssl_session_getEVP+185o
		align 4
aPkcs11Pkcs1_89	db 'PKCS#11: pkcs11h_openssl_session_getEVP - return ret=%p',0
					; DATA XREF: pkcs11h_openssl_session_getEVP+21Ao
aPkcs11Pkcs1_90	db 'PKCS#11: pkcs11h_openssl_session_getX509 - entry openssl_session='
					; DATA XREF: pkcs11h_openssl_session_getX509+4Ao
		db '%p',0
aPkcs11CannotDu	db 'PKCS#11: Cannot duplicate certificate object',0
					; DATA XREF: pkcs11h_openssl_session_getX509+C9o
		align 10h
aPkcs11Pkcs1_91	db 'PKCS#11: pkcs11h_openssl_session_getX509 - return x509=%p',0
					; DATA XREF: pkcs11h_openssl_session_getX509+117o
		align 4
off_645D708C	dd offset TlsCallback_0	; DATA XREF: sub_645C1040:loc_645C112Ar
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_645CF450+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_645CF4B0+21Bo
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_645CF4B0+207o
					; sub_645CF4B0+233o ...
		align 10h
; char aVirtualprotect[]
aVirtualprotect	db '  VirtualProtect failed with code 0x%x',0 ; DATA XREF: sub_645CF4B0+1D9o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_645CF6F0+2C4o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_645CF6F0+EEo
		align 4
off_645D7188	dd offset dword_645D83E0 ; DATA	XREF: .text:645CFB68o
		dd offset dword_645D8100
; wchar_t aUnknown
aUnknown:				; DATA XREF: sub_645D0180+2Co
					; sub_645D0180+EBo ...
		dw 3Ch
		unicode	0, <unknown>
		dw 3Eh,	0
a?:					; DATA XREF: sub_645D0180+40o
					; sub_645D0180:loc_645D0283o
		unicode	0, <?>,0
; wchar_t aAssertionFaile
aAssertionFaile:			; DATA XREF: sub_645D0180+8Do
		unicode	0, <Assertion failed!>
		dw 2 dup(0Ah)
		unicode	0, <Program: %ws>
		dw 0Ah
		unicode	0, <File: %ws, Line %u>
		dw 2 dup(0Ah)
		unicode	0, <Expression:	%ws>,0
; wchar_t aWs
aWs:					; DATA XREF: sub_645D0180+140o
		unicode	0, <%ws>
		dw 0Ah,	0
		align 4
; const	WCHAR Caption
Caption:				; DATA XREF: sub_645D0180+BAo
		unicode	0, <MinGW Runtime Assertion>,0
aGccGnu4_8_2	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_0	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_1	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_2	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_3	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_4	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_5	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_6	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_7	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_8	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_9	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_10	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_11	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_12	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_13	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_14	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_15	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_16	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_17	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_18	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_19	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_20	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_21	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_22	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_23	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_24	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_25	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_26	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_27	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_28	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_29	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_30	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_31	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_32	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_33	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_34	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_35	db 'GCC: (GNU) 4.8.2',0
		align 10h
dword_645D7550	dd 0			; DATA XREF: sub_645CF6F0+52o
					; sub_645CF6F0+57o ...
dword_645D7554	dd 0			; DATA XREF: sub_645CF6F0+7Br
dword_645D7558	dd 0			; DATA XREF: sub_645CF6F0+88r
dword_645D755C	dd 29h dup(0)		; DATA XREF: sub_645CF6F0+8Eo
		align 1000h
_rdata		ends

; Section 4. (virtual address 00018000)
; Virtual size			: 00000484 (   1156.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 645D8000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_645D8000	dd ?			; DATA XREF: sub_645C1040+10r
					; sub_645C1040+28w ...
dword_645D8004	dd ?			; DATA XREF: pkcs11h_engine_setCrypto+92o
					; sub_645C55F0+8Ar ...
dword_645D8008	dd ?			; DATA XREF: pkcs11h_initialize:loc_645CAC57r
					; pkcs11h_initialize:loc_645CAC7Ar
dword_645D800C	dd ?			; DATA XREF: pkcs11h_terminate+26Er
dword_645D8010	dd ?			; DATA XREF: sub_645C55F0:loc_645C5675r
					; sub_645C55F0:loc_645C56A5r
dword_645D8014	dd ?			; DATA XREF: sub_645C5BAE+5Fr
dword_645D8018	dd ?			; DATA XREF: sub_645C8EF4+124r
dword_645D801C	dd 5 dup(?)		; DATA XREF: .rdata:off_645D21FCo
dword_645D8030	dd ?			; DATA XREF: sub_645C35B0+A2r
					; sub_645C35B0+C7r ...
		align 10h
dword_645D8040	dd ?			; DATA XREF: sub_645CE115:loc_645CE18Bo
					; sub_645CE6CD+35o ...
		dd 2 dup(?)
dword_645D804C	dd ?			; DATA XREF: sub_645CE6CD+55w
dword_645D8050	dd ?			; DATA XREF: sub_645CE6CD+4Bw
		dd 4 dup(?)
dword_645D8064	dd ?			; DATA XREF: sub_645CE6CD+5Fw
		dd 4 dup(?)
dword_645D8078	dd ?			; DATA XREF: sub_645CDC32:loc_645CDC64r
					; sub_645CE115+89r ...
dword_645D807C	dd ?			; DATA XREF: sub_645CE5E0:loc_645CE656o
					; sub_645CE6CD+ABo ...
dword_645D8080	dd ?			; DATA XREF: sub_645CE6CD+C1w
		dd 0Ah dup(?)
dword_645D80AC	dd ?			; DATA XREF: sub_645CE213:loc_645CE245r
					; sub_645CE5E0+89r ...
		dd 7 dup(?)
TlsIndex	dd ?			; DATA XREF: .tls:TlsIndex_ptro
dword_645D80D0	dd ?			; DATA XREF: DllEntryPoint+7w
					; sub_645D0180+A5r
dword_645D80D4	dd ?			; DATA XREF: sub_645CF6F0r
					; sub_645CF6F0+19w
dword_645D80D8	dd ?			; DATA XREF: sub_645CF4B0+Er
					; sub_645CF4B0:loc_645CF576w ...
dword_645D80DC	dd ?			; DATA XREF: sub_645CF4B0+1Fr
					; sub_645CF4B0+60r ...
dword_645D80E0	dd ?			; DATA XREF: sub_645CFA40r
					; sub_645CFA40:loc_645CFA50w
		align 20h
dword_645D8100	dd 2Bh dup(?)		; DATA XREF: .rdata:645D718Co
dword_645D81AC	dd ?			; DATA XREF: .text:645CFB4Aw
		dd 2 dup(?)
dword_645D81B8	dd ?			; DATA XREF: .text:645CFB36w
		dd 2 dup(?)
dword_645D81C4	dd ?			; DATA XREF: .text:645CFB1Cw
		dd 86h dup(?)
dword_645D83E0	dd ?			; DATA XREF: .text:645CFB22w
					; .rdata:off_645D7188o
dword_645D83E4	dd ?			; DATA XREF: .text:645CFB2Cw
		dd ?
dword_645D83EC	dd ?			; DATA XREF: .text:645CFB3Bw
		dd 14h dup(?)
dword_645D8440	dd ?			; DATA XREF: sub_645CFBA0+16r
					; .text:645CFC72r ...
dword_645D8444	dd ?			; DATA XREF: .text:645CFC2Ar
					; .text:645CFCB7r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_645CFBA0+9o
					; sub_645CFBA0:loc_645CFBF9o ...
		dd ?
dword_645D8464	dd ?			; DATA XREF: sub_645C1000+21w
					; sub_645C1040+143r ...
dword_645D8468	dd ?			; DATA XREF: sub_645C1000+1Cw
					; sub_645C1040:loc_645C1170r ...
dword_645D846C	dd ?			; DATA XREF: sub_645C1040+43w
					; sub_645C1040+ABw ...
dword_645D8470	dd ?			; DATA XREF: sub_645C1040+4Fr
					; sub_645C1040:loc_645C10F9r ...
		align 1000h
_bss		ends

;
; Imports from LIBEAY32.dll
;
; Section 6. (virtual address 0001A000)
; Virtual size			: 00000BEC (   3052.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00015E00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
		extrn __imp___IAT_start__:dword	; DATA XREF: __IAT_start__r
		extrn __imp__DSA_SIG_free:dword	; DATA XREF: _DSA_SIG_freer
		extrn __imp__DSA_SIG_new:dword ; DATA XREF: _DSA_SIG_newr
		extrn __imp__DSA_free:dword ; DATA XREF: _DSA_freer
		extrn __imp__DSA_get_default_method:dword
					; DATA XREF: _DSA_get_default_methodr
		extrn __imp__DSA_get_ex_data:dword ; DATA XREF:	_DSA_get_ex_datar
		extrn __imp__DSA_get_ex_new_index:dword	; DATA XREF: _DSA_get_ex_new_indexr
		extrn __imp__DSA_set_ex_data:dword ; DATA XREF:	_DSA_set_ex_datar
		extrn __imp__DSA_set_method:dword ; DATA XREF: _DSA_set_methodr
		extrn __imp__EVP_PKEY_free:dword ; DATA	XREF: _EVP_PKEY_freer
		extrn __imp__EVP_PKEY_get1_DSA:dword ; DATA XREF: _EVP_PKEY_get1_DSAr
		extrn __imp__EVP_PKEY_get1_RSA:dword ; DATA XREF: _EVP_PKEY_get1_RSAr
		extrn __imp__OpenSSL_add_all_digests:dword
					; DATA XREF: _OpenSSL_add_all_digestsr
		extrn __imp__RSA_free:dword ; DATA XREF: _RSA_freer
		extrn __imp__RSA_get_default_method:dword
					; DATA XREF: _RSA_get_default_methodr
		extrn __imp__RSA_get_ex_data:dword ; DATA XREF:	_RSA_get_ex_datar
		extrn __imp__RSA_get_ex_new_index:dword	; DATA XREF: _RSA_get_ex_new_indexr
		extrn __imp__RSA_set_ex_data:dword ; DATA XREF:	_RSA_set_ex_datar
		extrn __imp__RSA_set_method:dword ; DATA XREF: _RSA_set_methodr
		extrn __imp__RSA_size:dword ; DATA XREF: _RSA_sizer
		extrn __imp__X509_NAME_cmp:dword ; DATA	XREF: _X509_NAME_cmpr
		extrn __imp__X509_NAME_oneline:dword ; DATA XREF: _X509_NAME_oneliner
		extrn __imp__X509_cmp_current_time:dword
					; DATA XREF: _X509_cmp_current_timer
		extrn __imp__X509_dup:dword ; DATA XREF: _X509_dupr
		extrn __imp__X509_free:dword ; DATA XREF: _X509_freer
		extrn __imp__X509_get_issuer_name:dword	; DATA XREF: _X509_get_issuer_namer
		extrn __imp__X509_get_pubkey:dword ; DATA XREF:	_X509_get_pubkeyr
		extrn __imp__X509_get_subject_name:dword
					; DATA XREF: _X509_get_subject_namer
		extrn __imp__X509_new:dword ; DATA XREF: _X509_newr
		extrn __imp__X509_verify:dword ; DATA XREF: _X509_verifyr
		extrn __imp__d2i_X509:dword ; DATA XREF: _d2i_X509r

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn __imp__CloseHandle@4:dword ; CODE	XREF: sub_645C252D+1Cp
					; sub_645C2644+13p ...
; HANDLE __stdcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState,	LPCSTR lpName)
		extrn __imp__CreateEventA@16:dword ; CODE XREF:	sub_645C2596+31p
					; DATA XREF: sub_645C2596+2Cr
; HANDLE __stdcall CreateMutexA(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCSTR lpName)
		extrn __imp__CreateMutexA@12:dword ; CODE XREF:	sub_645C2463+29p
					; DATA XREF: sub_645C2463+24r
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__DeleteCriticalSection@4:dword ; CODE XREF:	sub_645CFD50+49p
					; DATA XREF: sub_645CFD50+49r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__EnterCriticalSection@4:dword ; CODE XREF: sub_645CFBA0+10p
					; .text:645CFC6Cp ...
; BOOL __stdcall FileTimeToSystemTime(const FILETIME *lpFileTime, LPSYSTEMTIME lpSystemTime)
		extrn __imp__FileTimeToSystemTime@8:dword ; CODE XREF: sub_645C1F09+D7p
					; DATA XREF: sub_645C1F09+D2r
; BOOL __stdcall FreeLibrary(HMODULE hLibModule)
		extrn __imp__FreeLibrary@4:dword ; CODE	XREF: sub_645C1D6C+47p
					; pkcs11h_addProvider+426p ...
; HANDLE __stdcall GetCurrentProcess()
		extrn __imp__GetCurrentProcess@0:dword ; CODE XREF: .text:645CFB78p
					; DATA XREF: .text:645CFB78r
; DWORD	__stdcall GetCurrentProcessId()
		extrn __imp__GetCurrentProcessId@0:dword ; CODE	XREF: sub_645CFA60+49p
					; DATA XREF: sub_645CFA60+49r
; DWORD	__stdcall GetCurrentThreadId()
		extrn __imp__GetCurrentThreadId@0:dword	; CODE XREF: sub_645CFA60+51p
					; DATA XREF: sub_645CFA60+51r
; DWORD	__stdcall GetLastError()
		extrn __imp__GetLastError@0:dword ; CODE XREF: sub_645CF4B0+1D3p
					; DATA XREF: sub_645CF4B0+1D3r	...
; DWORD	__stdcall GetModuleFileNameW(HMODULE hModule, LPWSTR lpFilename, DWORD nSize)
		extrn __imp__GetModuleFileNameW@12:dword ; CODE	XREF: sub_645D0180+67p
					; DATA XREF: sub_645D0180+67r
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp__GetModuleHandleA@4:dword ;	CODE XREF: sub_645C1460+16p
					; DATA XREF: sub_645C1460+16r
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn __imp__GetProcAddress@8:dword ; CODE XREF: sub_645C1460+33p
					; sub_645C1DE3+7Ap ...
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn __imp__GetSystemTimeAsFileTime@4:dword ; CODE XREF: sub_645CFA60+38p
					; DATA XREF: sub_645CFA60+38r
; DWORD	__stdcall GetTickCount()
		extrn __imp__GetTickCount@0:dword ; CODE XREF: sub_645CFA60+5Ap
					; DATA XREF: sub_645CFA60+5Ar
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__InitializeCriticalSection@4:dword ; CODE XREF: sub_645CFD50+77p
					; DATA XREF: sub_645CFD50+77r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn __imp__LeaveCriticalSection@4:dword ; CODE XREF: sub_645CFBA0+60p
					; .text:645CFC8Ap ...
; HMODULE __stdcall LoadLibraryA(LPCSTR	lpLibFileName)
		extrn __imp__LoadLibraryA@4:dword ; CODE XREF: sub_645C1DE3+48p
					; pkcs11h_addProvider+23Bp
					; DATA XREF: ...
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn __imp__QueryPerformanceCounter@4:dword ; CODE XREF: sub_645CFA60+69p
					; DATA XREF: sub_645CFA60+69r
; BOOL __stdcall ReleaseMutex(HANDLE hMutex)
		extrn __imp__ReleaseMutex@4:dword ; CODE XREF: sub_645C24F5+1Ap
					; DATA XREF: sub_645C24F5+15r
; BOOL __stdcall SetEvent(HANDLE hEvent)
		extrn __imp__SetEvent@4:dword ;	CODE XREF: sub_645C255E+1Ap
					; DATA XREF: sub_645C255E+15r
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn __imp__SetUnhandledExceptionFilter@4:dword
					; CODE XREF: .text:645CFB5Fp
					; DATA XREF: .text:645CFB5Fr
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn __imp__Sleep@4:dword ; CODE XREF:	sub_645C1040+37p
					; sub_645C1040+A4p ...
; BOOL __stdcall SystemTimeToTzSpecificLocalTime(const TIME_ZONE_INFORMATION *lpTimeZoneInformation, const SYSTEMTIME *lpUniversalTime,	LPSYSTEMTIME lpLocalTime)
		extrn __imp__SystemTimeToTzSpecificLocalTime@12:dword
					; CODE XREF: sub_645C1F09+FEp
					; DATA XREF: sub_645C1F09+F9r
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn __imp__TerminateProcess@8:dword ;	CODE XREF: .text:645CFB89p
					; DATA XREF: .text:645CFB89r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn __imp__TlsGetValue@4:dword ; CODE	XREF: sub_645CFBA0+35p
					; DATA XREF: sub_645CFBA0+35r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn __imp__UnhandledExceptionFilter@4:dword ;	CODE XREF: .text:645CFB6Fp
					; DATA XREF: .text:645CFB6Fr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn __imp__VirtualProtect@16:dword ; CODE XREF: sub_645CF4B0+147p
					; sub_645CF4B0+187p ...
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn __imp__VirtualQuery@12:dword ; CODE XREF:	sub_645CF4B0+A7p
					; sub_645CF4B0+DCp ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn __imp__WaitForSingleObject@8:dword ; CODE	XREF: sub_645C24B4+22p
					; sub_645C25EF+36p ...
; int __stdcall	WideCharToMultiByte(UINT CodePage, DWORD dwFlags, LPCWSTR lpWideCharStr, int cchWideChar, LPSTR	lpMultiByteStr,	int cbMultiByte, LPCSTR	lpDefaultChar, LPBOOL lpUsedDefaultChar)
		extrn __imp__WideCharToMultiByte@32:dword ; CODE XREF: sub_645C20AC+1C8p
					; DATA XREF: sub_645C20AC+1C3r

;
; Imports from msvcrt.dll
;
		extrn __imp____dllonexit:dword ; DATA XREF: ___dllonexitr
		extrn __imp___amsg_exit:dword ;	DATA XREF: __amsg_exitr
		extrn __imp___beginthreadex:dword ; CODE XREF: sub_645C269D+75p
					; DATA XREF: sub_645C269D+70r
; void __cdecl __noreturn __exit(int Code)
		extrn __imp___exit:dword ; DATA	XREF: __exitr
		extrn __imp___initterm:dword ; DATA XREF: __inittermr
		extrn __imp___iob:dword	; DATA XREF: sub_645CF450+4r
					; sub_645CF450+3Cr ...
		extrn __imp___lock:dword ; DATA	XREF: __lockr
; _onexit_t __cdecl __onexit(_onexit_t Func)
		extrn __imp___onexit:dword ; CODE XREF:	sub_645CF270+A7p
					; DATA XREF: sub_645CF270+A7r
; int __snwprintf(wchar_t *Dest, size_t	Count, const wchar_t *Format, ...)
		extrn __imp___snwprintf:dword ;	DATA XREF: __snwprintfr
		extrn __imp___unlock:dword ; DATA XREF:	__unlockr
; void *__cdecl	_calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp__calloc:dword ; DATA XREF: _callocr
; void __cdecl _free(void *Memory)
		extrn __imp__free:dword	; DATA XREF: _freer
; int _fwprintf(FILE *File, const wchar_t *Format, ...)
		extrn __imp__fwprintf:dword ; DATA XREF: _fwprintfr
; size_t __cdecl _fwrite(const void *Str, size_t Size, size_t Count, FILE *File)
		extrn __imp__fwrite:dword ; DATA XREF: _fwriter
; char *__cdecl	_getenv(const char *VarName)
		extrn __imp__getenv:dword ; DATA XREF: _getenvr
; struct tm *__cdecl static _gmtime(const time_t *Time)
		extrn __imp__gmtime:dword ; DATA XREF: _gmtimer
; int __cdecl _isgraph(int C)
		extrn __imp__isgraph:dword ; CODE XREF:	sub_645C2A60+A8p
					; DATA XREF: sub_645C2A60+A3r
; int __cdecl _isxdigit(int C)
		extrn __imp__isxdigit:dword ; CODE XREF: sub_645C281A+B5p
					; DATA XREF: sub_645C281A+B0r
; struct tm *__cdecl static _localtime(const time_t *Time)
		extrn __imp__localtime:dword ; DATA XREF: _localtimer
; void *__cdecl	_malloc(size_t Size)
		extrn __imp__malloc:dword ; DATA XREF: _mallocr
; void *__cdecl	_memcpy(void *Dst, const void *Src, size_t Size)
		extrn __imp__memcpy:dword ; DATA XREF: _memcpyr
; void *__cdecl	_memmove(void *Dst, const void *Src, size_t Size)
		extrn __imp__memmove:dword ; DATA XREF:	_memmover
; void *__cdecl	_memset(void *Dst, int Val, size_t Size)
		extrn __imp__memset:dword ; DATA XREF: _memsetr
; time_t __cdecl static	_mktime(struct tm *Tm)
		extrn __imp__mktime:dword ; DATA XREF: _mktimer
		extrn __imp__raise:dword ; DATA	XREF: _raiser
; int _sscanf(const char *Src, const char *Format, ...)
		extrn __imp__sscanf:dword ; DATA XREF: _sscanfr
; char *__cdecl	_strchr(const char *Str, int Val)
		extrn __imp__strchr:dword ; DATA XREF: _strchrr
; int __cdecl _strcmp(const char *Str1,	const char *Str2)
		extrn __imp__strcmp:dword ; DATA XREF: _strcmpr
; size_t __cdecl _strlen(const char *Str)
		extrn __imp__strlen:dword ; DATA XREF: _strlenr
; char *__cdecl	_strncat(char *Dest, const char	*Source, size_t	Count)
		extrn __imp__strncat:dword ; DATA XREF:	_strncatr
; int __cdecl _strncmp(const char *Str1, const char *Str2, size_t MaxCount)
		extrn __imp__strncmp:dword ; DATA XREF:	_strncmpr
; char *__cdecl	_strncpy(char *Dest, const char	*Source, size_t	Count)
		extrn __imp__strncpy:dword ; DATA XREF:	_strncpyr
; char *__cdecl	_strrchr(const char *Str, int Ch)
		extrn __imp__strrchr:dword ; DATA XREF:	_strrchrr
; void __cdecl _abort()
		extrn __imp__abort:dword ; DATA	XREF: _abortr
; char *__cdecl	_asctime(const struct tm *Tm)
		extrn __imp__asctime:dword ; DATA XREF:	_asctimer
; time_t __cdecl static	_time(time_t *Time)
		extrn __imp__time:dword	; DATA XREF: _timer
; int __cdecl _vfprintf(FILE *File, const char *Format,	va_list	ArgList)
		extrn __imp__vfprintf:dword ; DATA XREF: _vfprintfr
; wchar_t *__cdecl _wcscpy(wchar_t *Dest, const	wchar_t	*Source)
		extrn __imp__wcscpy:dword ; DATA XREF: _wcscpyr

;
; Imports from USER32.dll
;
; int __stdcall	MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
		extrn __imp__MessageBoxW@16:dword ; CODE XREF: sub_645D0180+CDp
					; DATA XREF: sub_645D0180+CDr


; Section 7. (virtual address 0001B000)
; Virtual size			: 0000002C (	 44.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00016A00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 645DB000h
dword_645DB000	dd 0			; DATA XREF: sub_645C1040+1FCo
dword_645DB004	dd 0			; DATA XREF: sub_645C1040:loc_645C1234o
dword_645DB008	dd 0			; DATA XREF: sub_645C1040+1C8o
		dd offset sub_645C1000
dword_645DB010	dd 2 dup(0)		; DATA XREF: sub_645C1040:loc_645C1200o
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 8
dword_645DB028	dd 76h dup(0)		; DATA XREF: TlsCallback_0:loc_645CF3D1o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 8. (virtual address 0001C000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00016C00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 645DC000h
TlsStart	dd 0			; DATA XREF: .tls:TlsDirectoryo
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end DllEntryPoint
