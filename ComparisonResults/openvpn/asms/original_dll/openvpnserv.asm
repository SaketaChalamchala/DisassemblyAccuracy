;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2015 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3677-7074-51			    |
; |		Michalis Polychronakis,	Stony Brook University		    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	4D6DA7C45368FA3E8F3ABED1B31BACB3
; Input	CRC32 :	41FF79BC

; File Name   :	C:\compspace\compare\openvpn\dlls\original\openvpnserv.exe
; Format      :	Portable executable for	80386 (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00003574 (  13684.)
; Section size in file		: 00003600 (  13824.)
; Offset to raw	data for section: 00000400
; Flags	60500060: Text Data Executable Readable
; Alignment	: 16 bytes

		.686p
		.mmx
		.model flat

; ===========================================================================

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
; [00000002 BYTES: COLLAPSED FUNCTION nullsub_1]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401010	proc near		; DATA XREF: .CRT:00409010o

var_1C		= dword	ptr -1Ch

		sub	esp, 1Ch
		xor	eax, eax
		cmp	word ptr ds:400000h, 5A4Dh
		mov	ds:dword_407034, 1
		mov	ds:dword_407030, 1
		mov	ds:dword_40702C, 1
		mov	ds:dword_40703C, 1
		jz	short loc_4010B0

loc_401048:				; CODE XREF: sub_401010+B6j
					; sub_401010+C8j ...
		mov	ds:dword_407008, eax
		mov	eax, ds:dword_407040
		test	eax, eax
		jz	short loc_4010A0
		mov	[esp+1Ch+var_1C], 2
		call	__set_app_type

loc_401062:				; CODE XREF: sub_401010+9Cj
		mov	[esp+1Ch+var_1C], 0FFFFFFFFh
		call	sub_4033F0
		mov	edx, ds:dword_407044
		mov	ds:dword_407520, eax
		mov	ds:dword_407524, eax
		mov	eax, ds:_fmode
		mov	[eax], edx
		call	sub_403630
		cmp	dword_40501C, 1
		jz	short loc_401100
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4010A0:				; CODE XREF: sub_401010+44j
		mov	[esp+1Ch+var_1C], 1
		call	__set_app_type
		jmp	short loc_401062
; ---------------------------------------------------------------------------
		align 10h

loc_4010B0:				; CODE XREF: sub_401010+36j
		mov	edx, ds:40003Ch
		cmp	dword ptr [edx+400000h], 4550h
		lea	ecx, [edx+400000h]
		jnz	short loc_401048
		movzx	edx, word ptr [ecx+18h]
		cmp	dx, 10Bh
		jz	short loc_401112
		cmp	dx, 20Bh
		jnz	loc_401048
		cmp	dword ptr [ecx+84h], 0Eh
		jbe	loc_401048
		mov	edx, [ecx+0F8h]
		xor	eax, eax
		test	edx, edx
		setnz	al
		jmp	loc_401048
; ---------------------------------------------------------------------------
		align 10h

loc_401100:				; CODE XREF: sub_401010+81j
		mov	[esp+1Ch+var_1C], offset sub_4036A0
		call	sub_403690
		xor	eax, eax
		add	esp, 1Ch
		retn
; ---------------------------------------------------------------------------

loc_401112:				; CODE XREF: sub_401010+C1j
		cmp	dword ptr [ecx+74h], 0Eh
		jbe	loc_401048
		mov	ecx, [ecx+0E8h]
		xor	eax, eax
		test	ecx, ecx
		setnz	al
		jmp	loc_401048
sub_401010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401130	proc near		; DATA XREF: .CRT:00409004o

var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch

		sub	esp, 2Ch
		mov	eax, ds:dword_407048
		mov	[esp+2Ch+var_1C], offset dword_407000
		mov	[esp+2Ch+var_24], offset dword_407014
		mov	[esp+2Ch+var_28], offset dword_407018
		mov	ds:dword_407000, eax
		mov	eax, ds:dword_40704C
		mov	[esp+2Ch+var_2C], offset dword_40701C
		mov	[esp+2Ch+var_20], eax
		call	__getmainargs
		mov	ds:dword_407010, eax
		add	esp, 2Ch
		retn
sub_401130	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_401180	proc near		; CODE XREF: .text:004014D5j start+15j

dwMilliseconds	= dword	ptr -88h
Src		= dword	ptr -84h
Size		= dword	ptr -80h
var_74		= dword	ptr -74h
var_6D		= byte ptr -6Dh
var_6C		= dword	ptr -6Ch
var_5C		= byte ptr -5Ch
var_30		= byte ptr -30h
var_2C		= word ptr -2Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		mov	ecx, 11h
		push	edi
		push	esi
		lea	edx, [ebp+var_5C]
		push	ebx
		mov	edi, edx
		sub	esp, 7Ch
		rep stosd
		mov	al, 30h
		call	sub_4043F0
		sub	esp, eax
		lea	eax, [esp+88h+var_6D]
		and	eax, 0FFFFFFF0h
		mov	dword ptr [eax], 0CCCCCCCCh
		mov	dword ptr [eax+4], 0CCCCCCCCh
		mov	dword ptr [eax+8], 0CCCCCCCCh
		mov	dword ptr [eax+0Ch], 0CCCCCCCCh
		mov	dword ptr [eax+10h], 0CCCCCCCCh
		mov	dword ptr [eax+14h], 0CCCCCCCCh
		mov	dword ptr [eax+18h], 0CCCCCCCCh
		mov	dword ptr [eax+1Ch], 0CCCCCCCCh
		and	esp, 0FFFFFFF0h
		mov	esi, ds:dword_407040
		test	esi, esi
		jnz	loc_401470

loc_4011EF:				; CODE XREF: sub_401180+2FCj
		mov	eax, large fs:18h
		xor	esi, esi
		mov	ebx, [eax+4]
		mov	edi, ds:Sleep
		jmp	short loc_401216
; ---------------------------------------------------------------------------

loc_401202:				; CODE XREF: sub_401180+A2j
		cmp	eax, ebx
		jz	loc_401410
		mov	[esp+88h+dwMilliseconds], 3E8h ; dwMilliseconds
		call	edi ; Sleep
		sub	esp, 4

loc_401216:				; CODE XREF: sub_401180+80j
		mov	eax, esi
		lock cmpxchg ds:dword_407528, ebx
		test	eax, eax
		jnz	short loc_401202
		mov	eax, ds:dword_40752C
		xor	ebx, ebx
		cmp	eax, 1
		jz	loc_401423

loc_401234:				; CODE XREF: sub_401180+29Dj
		mov	eax, ds:dword_40752C
		test	eax, eax
		jz	loc_401481
		mov	ds:dword_407004, 1

loc_40124B:				; CODE XREF: sub_401180+31Fj
		mov	eax, ds:dword_40752C
		cmp	eax, 1
		jz	loc_40143D

loc_401259:				; CODE XREF: sub_401180+2B7j
		test	ebx, ebx
		jz	loc_401463

loc_401261:				; CODE XREF: sub_401180+2DDj
					; sub_401180+2E9j
		mov	eax, ds:off_406774
		test	eax, eax
		jz	short loc_401286
		mov	[esp+88h+Size],	0
		mov	[esp+88h+Src], 2
		mov	[esp+88h+dwMilliseconds], 0
		call	eax ; TlsCallback_0
		sub	esp, 0Ch

loc_401286:				; CODE XREF: sub_401180+E8j
		call	sub_4039A0
		mov	[esp+88h+dwMilliseconds], offset TopLevelExceptionFilter ; lpTopLevelExceptionFilter
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	ds:dword_407050, eax
		mov	[esp+88h+dwMilliseconds], offset nullsub_1
		call	loc_405024
		call	sub_403C70
		mov	eax, ds:_acmdln
		mov	ds:dword_4073EC, 400000h
		mov	eax, [eax]
		test	eax, eax
		jz	short loc_401309
		xor	ecx, ecx
		jmp	short loc_4012E0
; ---------------------------------------------------------------------------
		align 10h

loc_4012D0:				; CODE XREF: sub_401180+166j
		test	dl, dl
		jz	short loc_401304
		test	ecx, ecx
		jz	short loc_4012F9
		mov	ecx, 1

loc_4012DD:				; CODE XREF: sub_401180+173j
		add	eax, 1

loc_4012E0:				; CODE XREF: sub_401180+148j
		movzx	edx, byte ptr [eax]
		cmp	dl, 20h
		jle	short loc_4012D0
		mov	ebx, ecx
		xor	ebx, 1
		cmp	dl, 22h
		cmovz	ecx, ebx
		jmp	short loc_4012DD
; ---------------------------------------------------------------------------

loc_4012F5:				; CODE XREF: sub_401180+182j
		test	dl, dl
		jz	short loc_401304

loc_4012F9:				; CODE XREF: sub_401180+156j
		add	eax, 1
		movzx	edx, byte ptr [eax]
		cmp	dl, 20h
		jle	short loc_4012F5

loc_401304:				; CODE XREF: sub_401180+152j
					; sub_401180+177j
		mov	ds:dword_4073E8, eax

loc_401309:				; CODE XREF: sub_401180+144j
		mov	ebx, ds:dword_407040
		test	ebx, ebx
		jz	short loc_401328
		movzx	edx, [ebp+var_2C]
		mov	eax, 0Ah
		test	[ebp+var_30], 1
		cmovnz	eax, edx
		mov	dword_405000, eax

loc_401328:				; CODE XREF: sub_401180+191j
		mov	eax, ds:dword_40701C
		mov	[ebp-70h], eax
		mov	esi, eax
		lea	eax, ds:4[eax*4]
		mov	[ebp+var_74], eax
		mov	[esp+88h+dwMilliseconds], eax ;	Size
		call	malloc
		test	esi, esi
		mov	edi, ds:dword_407018
		mov	[ebp+var_6C], eax
		jle	loc_4014A4
		xor	ebx, ebx
		mov	esi, edi
		lea	esi, [esi+0]

loc_401360:				; CODE XREF: sub_401180+215j
		mov	eax, [esi+ebx*4]
		mov	[esp+88h+dwMilliseconds], eax ;	Str
		call	strlen
		lea	edi, [eax+1]
		mov	[esp+88h+dwMilliseconds], edi ;	Size
		call	malloc
		mov	ecx, [ebp+var_6C]
		mov	[ecx+ebx*4], eax
		mov	ecx, [esi+ebx*4]
		add	ebx, 1
		mov	[esp+88h+Size],	edi ; Size
		mov	[esp+88h+dwMilliseconds], eax ;	Dst
		mov	[esp+88h+Src], ecx ; Src
		call	memcpy
		cmp	ebx, [ebp-70h]
		jnz	short loc_401360
		mov	eax, [ebp+var_74]
		sub	eax, 4

loc_40139D:				; CODE XREF: sub_401180+326j
		mov	esi, [ebp+var_6C]
		mov	dword ptr [esi+eax], 0
		mov	ds:dword_407018, esi
		call	sub_403D00
		mov	edx, ds:dword_407014
		mov	eax, ds:__initenv
		mov	[eax], edx
		mov	eax, ds:dword_40701C
		mov	ecx, ds:dword_407014
		mov	edx, ds:dword_407018
		mov	[esp+88h+dwMilliseconds], eax
		mov	[esp+88h+Size],	ecx
		mov	[esp+88h+Src], edx
		call	sub_4027DC
		mov	ecx, ds:dword_407008
		test	ecx, ecx
		mov	ds:dword_40700C, eax
		jz	loc_4014AB
		mov	edx, ds:dword_407004
		test	edx, edx
		jnz	short loc_401407
		call	_cexit
		mov	eax, ds:dword_40700C

loc_401407:				; CODE XREF: sub_401180+27Bj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_401410:				; CODE XREF: sub_401180+84j
		mov	eax, ds:dword_40752C
		mov	ebx, 1
		cmp	eax, 1
		jnz	loc_401234

loc_401423:				; CODE XREF: sub_401180+AEj
		mov	[esp+88h+dwMilliseconds], 1Fh
		call	_amsg_exit
		mov	eax, ds:dword_40752C
		cmp	eax, 1
		jnz	loc_401259

loc_40143D:				; CODE XREF: sub_401180+D3j
		mov	[esp+88h+Src], offset dword_409008
		mov	[esp+88h+dwMilliseconds], offset dword_409000
		call	_initterm
		test	ebx, ebx
		mov	ds:dword_40752C, 2
		jnz	loc_401261

loc_401463:				; CODE XREF: sub_401180+DBj
		xchg	ebx, ds:dword_407528
		jmp	loc_401261
; ---------------------------------------------------------------------------
		align 10h

loc_401470:				; CODE XREF: sub_401180+69j
		mov	[esp+88h+dwMilliseconds], edx ;	lpStartupInfo
		call	ds:GetStartupInfoA
		sub	esp, 4
		jmp	loc_4011EF
; ---------------------------------------------------------------------------

loc_401481:				; CODE XREF: sub_401180+BBj
		mov	ds:dword_40752C, 1
		mov	[esp+88h+Src], offset dword_409018
		mov	[esp+88h+dwMilliseconds], offset dword_40900C
		call	_initterm
		jmp	loc_40124B
; ---------------------------------------------------------------------------

loc_4014A4:				; CODE XREF: sub_401180+1CFj
		xor	eax, eax
		jmp	loc_40139D
; ---------------------------------------------------------------------------

loc_4014AB:				; CODE XREF: sub_401180+26Dj
		mov	[esp+88h+dwMilliseconds], eax ;	Code
		xchg	ax, ax
		call	exit
sub_401180	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 0Ch
		mov	ds:dword_407040, 1
		call	sub_403D20
		add	esp, 0Ch
		jmp	sub_401180
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public start
start		proc near
		sub	esp, 0Ch
		mov	ds:dword_407040, 0
		call	sub_403D20
		add	esp, 0Ch
		jmp	sub_401180
start		endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_401500	proc near		; CODE XREF: sub_404540+6p

lpModuleName	= dword	ptr -1Ch
lpProcName	= dword	ptr -18h

		mov	eax, dword_405030
		test	eax, eax
		jz	short locret_40154C
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+1Ch+lpModuleName],	offset ModuleName ; "libgcj-13.dll"
		call	ds:GetModuleHandleA
		mov	edx, 0
		sub	esp, 4
		test	eax, eax
		jz	short loc_40153E
		mov	[esp+1Ch+lpProcName], offset ProcName ;	"_Jv_RegisterClasses"
		mov	[esp+1Ch+lpModuleName],	eax ; hModule
		call	ds:GetProcAddress
		sub	esp, 8
		mov	edx, eax

loc_40153E:				; CODE XREF: sub_401500+26j
		test	edx, edx
		jz	short locret_40154B
		mov	[esp+1Ch+lpModuleName],	offset dword_405030
		call	edx

locret_40154B:				; CODE XREF: sub_401500+40j
		leave

locret_40154C:				; CODE XREF: sub_401500+7j
		rep retn
sub_401500	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_401550()
sub_401550	proc near		; DATA XREF: sub_404540+Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401550	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_401560(char *, size_t, char *, va_list)
sub_401560	proc near		; CODE XREF: sub_401588+34p

DstBuf		= dword	ptr -18h
MaxCount	= dword	ptr -14h
Format		= dword	ptr -10h
ArgList		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_C]
		mov	[esp+18h+ArgList], eax ; ArgList
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+Format], eax ;	Format
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+MaxCount], eax	; MaxCount
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+DstBuf], eax ;	DstBuf
		call	j__vsnprintf
		leave
		retn
sub_401560	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_401588(char *, size_t, char *, char)
sub_401588	proc near		; CODE XREF: sub_4018D0+47p
					; sub_4018D0+B2p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= byte ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0FFFFFFFFh
		cmp	[ebp+arg_4], 0
		jz	short loc_4015D2
		lea	eax, [ebp+arg_C]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_1C], eax ;	va_list
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_20], eax ;	char *
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_24], eax ;	size_t
		mov	eax, [ebp+arg_0]
		mov	[esp+28h+var_28], eax ;	char *
		call	sub_401560
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_4]
		lea	edx, [eax-1]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		mov	byte ptr [eax],	0

loc_4015D2:				; CODE XREF: sub_401588+11j
		cmp	[ebp+var_C], 0
		js	short loc_4015E7
		mov	eax, [ebp+var_C]
		cmp	eax, [ebp+arg_4]
		jnb	short loc_4015E7
		mov	eax, 1
		jmp	short locret_4015EC
; ---------------------------------------------------------------------------

loc_4015E7:				; CODE XREF: sub_401588+4Ej
					; sub_401588+56j
		mov	eax, 0

locret_4015EC:				; CODE XREF: sub_401588+5Dj
		leave
		retn
sub_401588	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4015EE(void *)
sub_4015EE	proc near		; CODE XREF: sub_401691+12p
					; sub_4018D0+A9Dp

Dst		= dword	ptr -18h
Val		= dword	ptr -14h
Size		= dword	ptr -10h
bDaclDefaulted	= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+Size],	20h ; Size
		mov	[esp+18h+Val], 0 ; Val
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+Dst], eax ; Dst
		call	memset
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 0Ch
		mov	eax, [ebp+arg_0]
		lea	edx, [eax+0Ch]
		mov	eax, [ebp+arg_0]
		mov	[eax+4], edx
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax+8], 1
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		mov	[esp+18h+Val], 1 ; dwRevision
		mov	[esp+18h+Dst], eax ; pSecurityDescriptor
		mov	eax, ds:InitializeSecurityDescriptor
		call	eax ; InitializeSecurityDescriptor
		sub	esp, 8
		test	eax, eax
		jnz	short loc_401654
		mov	eax, 0
		jmp	short locret_40168F
; ---------------------------------------------------------------------------

loc_401654:				; CODE XREF: sub_4015EE+5Dj
		mov	eax, [ebp+arg_0]
		add	eax, 0Ch
		mov	[esp+18h+bDaclDefaulted], 0 ; bDaclDefaulted
		mov	[esp+18h+Size],	0 ; pDacl
		mov	[esp+18h+Val], 1 ; bDaclPresent
		mov	[esp+18h+Dst], eax ; pSecurityDescriptor
		mov	eax, ds:SetSecurityDescriptorDacl
		call	eax ; SetSecurityDescriptorDacl
		sub	esp, 10h
		test	eax, eax
		jnz	short loc_40168A
		mov	eax, 0
		jmp	short locret_40168F
; ---------------------------------------------------------------------------

loc_40168A:				; CODE XREF: sub_4015EE+93j
		mov	eax, 1

locret_40168F:				; CODE XREF: sub_4015EE+64j
					; sub_4015EE+9Aj
		leave
		retn
sub_4015EE	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_401691(LPCSTR, int, BOOL, BOOL)
sub_401691	proc near		; CODE XREF: sub_4018D0+86p

lpEventAttributes= dword ptr -38h
bManualReset	= dword	ptr -34h
bInitialState	= dword	ptr -30h
lpName		= dword	ptr -2Ch
EventAttributes	= _SECURITY_ATTRIBUTES ptr -28h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 38h
		cmp	[ebp+arg_4], 0
		jz	short loc_4016DA
		lea	eax, [ebp+EventAttributes]
		mov	[esp+38h+lpEventAttributes], eax ; void	*
		call	sub_4015EE
		test	eax, eax
		jnz	short loc_4016B3
		mov	eax, 0
		jmp	short locret_401700
; ---------------------------------------------------------------------------

loc_4016B3:				; CODE XREF: sub_401691+19j
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+lpName], eax ;	lpName
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+bInitialState], eax ; bInitialState
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+bManualReset],	eax ; bManualReset
		lea	eax, [ebp+EventAttributes]
		mov	[esp+38h+lpEventAttributes], eax ; lpEventAttributes
		mov	eax, ds:CreateEventA
		call	eax ; CreateEventA
		sub	esp, 10h
		jmp	short locret_401700
; ---------------------------------------------------------------------------

loc_4016DA:				; CODE XREF: sub_401691+Aj
		mov	eax, [ebp+arg_0]
		mov	[esp+38h+lpName], eax ;	lpName
		mov	eax, [ebp+arg_8]
		mov	[esp+38h+bInitialState], eax ; bInitialState
		mov	eax, [ebp+arg_C]
		mov	[esp+38h+bManualReset],	eax ; bManualReset
		mov	[esp+38h+lpEventAttributes], 0 ; lpEventAttributes
		mov	eax, ds:CreateEventA
		call	eax ; CreateEventA
		sub	esp, 10h

locret_401700:				; CODE XREF: sub_401691+20j
					; sub_401691+47j
		leave
		retn
sub_401691	endp

; ---------------------------------------------------------------------------
		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		cmp	dword ptr [ebp+8], 0
		jz	short locret_40171E
		mov	eax, [ebp+8]
		mov	[esp], eax
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

locret_40171E:				; CODE XREF: .text:0040170Cj
		leave
		retn

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_401720(int, char *)
sub_401720	proc near		; CODE XREF: sub_4018D0+99Dp

Str		= dword	ptr -28h
Str2		= dword	ptr -24h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 24h
		mov	eax, [ebp+arg_0]
		mov	eax, [eax]
		and	eax, 10h
		test	eax, eax
		jz	short loc_40173D
		mov	eax, 0
		jmp	loc_4017C5
; ---------------------------------------------------------------------------

loc_40173D:				; CODE XREF: sub_401720+11j
		mov	eax, [ebp+arg_4]
		movzx	eax, byte ptr [eax]
		test	al, al
		jnz	short loc_40174E
		mov	eax, 1
		jmp	short loc_4017C5
; ---------------------------------------------------------------------------

loc_40174E:				; CODE XREF: sub_401720+25j
		mov	eax, [ebp+arg_0]
		add	eax, 2Ch
		mov	[esp+28h+Str], eax ; Str
		call	strlen
		mov	ebx, eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Str], eax ; Str
		call	strlen
		sub	ebx, eax
		mov	eax, ebx
		sub	eax, 1
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jg	short loc_401780
		mov	eax, 0
		jmp	short loc_4017C5
; ---------------------------------------------------------------------------

loc_401780:				; CODE XREF: sub_401720+57j
		mov	edx, [ebp+arg_0]
		mov	eax, [ebp+var_C]
		add	eax, edx
		add	eax, 20h
		movzx	eax, byte ptr [eax+0Ch]
		cmp	al, 2Eh
		jnz	short loc_4017C0
		mov	eax, [ebp+var_C]
		add	eax, 1
		lea	edx, [eax+20h]
		mov	eax, [ebp+arg_0]
		add	eax, edx
		lea	edx, [eax+0Ch]
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+Str2],	eax ; Str2
		mov	[esp+28h+Str], edx ; Str1
		mov	eax, ds:_stricmp
		call	eax ; _stricmp
		test	eax, eax
		jnz	short loc_4017C0
		mov	eax, 1
		jmp	short loc_4017C5
; ---------------------------------------------------------------------------

loc_4017C0:				; CODE XREF: sub_401720+71j
					; sub_401720+97j
		mov	eax, 0

loc_4017C5:				; CODE XREF: sub_401720+18j
					; sub_401720+2Cj ...
		add	esp, 24h
		pop	ebx
		pop	ebp
		retn
sub_401720	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_4017CB(char *Dest, int, char *, char *)
sub_4017CB	proc near		; CODE XREF: sub_4018D0+9D0p

Str		= dword	ptr -28h
Source		= dword	ptr -24h
var_C		= dword	ptr -0Ch
Dest		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	ebx
		sub	esp, 20h
		cmp	[ebp+arg_4], 0
		jle	loc_4018C4
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+Str], eax ; Str
		call	strlen
		lea	edx, [eax+1]
		mov	eax, [ebp+arg_4]
		cmp	edx, eax
		ja	loc_4018C4
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+Source], eax ;	Source
		mov	eax, [ebp+Dest]
		mov	[esp+28h+Str], eax ; Dest
		call	strcpy
		mov	eax, [ebp+arg_4]
		lea	edx, [eax-1]
		mov	eax, [ebp+Dest]
		add	eax, edx
		mov	byte ptr [eax],	0
		mov	eax, [ebp+Dest]
		mov	[esp+28h+Str], eax ; Str
		call	strlen
		mov	[ebp+var_C], eax
		jmp	short loc_401853
; ---------------------------------------------------------------------------

loc_401826:				; CODE XREF: sub_4017CB+90j
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+Dest]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 5Ch
		jnz	short loc_401837
		jmp	short loc_40185D
; ---------------------------------------------------------------------------

loc_401837:				; CODE XREF: sub_4017CB+68j
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+Dest]
		add	eax, edx
		movzx	eax, byte ptr [eax]
		cmp	al, 2Eh
		jnz	short loc_401853
		mov	edx, [ebp+var_C]
		mov	eax, [ebp+Dest]
		add	eax, edx
		mov	byte ptr [eax],	0
		jmp	short loc_40185D
; ---------------------------------------------------------------------------

loc_401853:				; CODE XREF: sub_4017CB+59j
					; sub_4017CB+79j
		sub	[ebp+var_C], 1
		cmp	[ebp+var_C], 0
		jns	short loc_401826

loc_40185D:				; CODE XREF: sub_4017CB+6Aj
					; sub_4017CB+86j
		mov	eax, [ebp+Dest]
		mov	[esp+28h+Str], eax ; Str
		call	strlen
		mov	ebx, eax
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+Str], eax ; Str
		call	strlen
		add	eax, ebx
		lea	edx, [eax+2]
		mov	eax, [ebp+arg_4]
		cmp	edx, eax
		ja	short loc_4018BE
		mov	eax, [ebp+Dest]
		mov	ecx, 0FFFFFFFFh
		mov	edx, eax
		mov	eax, 0
		mov	edi, edx
		repne scasb
		mov	eax, ecx
		not	eax
		lea	edx, [eax-1]
		mov	eax, [ebp+Dest]
		add	eax, edx
		mov	word ptr [eax],	2Eh
		mov	eax, [ebp+arg_C]
		mov	[esp+28h+Source], eax ;	Source
		mov	eax, [ebp+Dest]
		mov	[esp+28h+Str], eax ; Dest
		call	strcat
		mov	eax, 1
		jmp	short loc_4018C9
; ---------------------------------------------------------------------------

loc_4018BE:				; CODE XREF: sub_4017CB+B4j
		mov	eax, [ebp+Dest]
		mov	byte ptr [eax],	0

loc_4018C4:				; CODE XREF: sub_4017CB+Cj
					; sub_4017CB+25j
		mov	eax, 0

loc_4018C9:				; CODE XREF: sub_4017CB+F1j
		add	esp, 20h
		pop	ebx
		pop	edi
		pop	ebp
		retn
sub_4017CB	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4018D0	proc near		; CODE XREF: sub_4029A3+72p
					; sub_403196+4Cp

hHandle		= dword	ptr -0A88h
dwMilliseconds	= dword	ptr -0A84h
ulOptions	= dword	ptr -0A80h
samDesired	= dword	ptr -0A7Ch
phkResult	= dword	ptr -0A78h
lpcbData	= dword	ptr -0A74h
hTemplateFile	= dword	ptr -0A70h
lpCurrentDirectory= dword ptr -0A6Ch
lpStartupInfo	= dword	ptr -0A68h
lpProcessInformation= dword ptr	-0A64h
SecurityAttributes= _SECURITY_ATTRIBUTES ptr -0A4Ch
Dst		= dword	ptr -0A2Ch
var_A00		= dword	ptr -0A00h
var_9FC		= word ptr -9FCh
var_9F4		= dword	ptr -9F4h
var_9F0		= dword	ptr -9F0h
var_9EC		= dword	ptr -9ECh
CommandLine	= byte ptr -9E8h
var_8E8		= byte ptr -8E8h
FileName	= byte ptr -7E8h
Dest		= byte ptr -6E4h
var_5E0		= byte ptr -5E0h
FindFileData	= _WIN32_FIND_DATAA ptr	-4DCh
ProcessInformation= _PROCESS_INFORMATION ptr -39Ch
Type		= dword	ptr -38Ch
cbData		= dword	ptr -388h
hKey		= dword	ptr -384h
var_37E		= byte ptr -37Eh
var_37C		= byte ptr -37Ch
var_33C		= byte ptr -33Ch
var_238		= byte ptr -238h
var_228		= byte ptr -228h
Data		= byte ptr -124h
var_20		= dword	ptr -20h
hFile		= dword	ptr -1Ch
hFindFile	= dword	ptr -18h
dwErrCode	= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0A88h
		call	sub_402C5A
		mov	[esp+0A88h+ulOptions], 0BB8h
		mov	[esp+0A88h+dwMilliseconds], 0
		mov	[esp+0A88h+hHandle], 2
		call	sub_402A9F
		test	eax, eax
		jnz	short loc_401937
		mov	[esp+0A88h+ulOptions], offset aReportstatusto ;	"ReportStatusToSCMgr #1	failed"
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_401937:				; CODE XREF: sub_4018D0+2Cj
		mov	[esp+0A88h+samDesired],	1 ; char
		mov	[esp+0A88h+ulOptions], 0 ; BOOL
		mov	[esp+0A88h+dwMilliseconds], 0 ;	int
		mov	[esp+0A88h+hHandle], offset aOpenvpn_exit_1 ; "openvpn_exit_1"
		call	sub_401691
		mov	ds:hEvent, eax
		mov	eax, ds:hEvent
		test	eax, eax
		jnz	short loc_4019A2
		mov	[esp+0A88h+ulOptions], offset aCreateeventFai ;	"CreateEvent failed"
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_4019A2:				; CODE XREF: sub_4018D0+97j
		mov	eax, ds:hEvent
		mov	[esp+0A88h+dwMilliseconds], 0 ;	dwMilliseconds
		mov	[esp+0A88h+hHandle], eax ; hHandle
		mov	eax, ds:WaitForSingleObject
		call	eax ; WaitForSingleObject
		sub	esp, 8
		cmp	eax, 102h
		jz	short loc_4019FC
		mov	[esp+0A88h+ulOptions], offset aExitEventIsAlr ;	"Exit event is already signaled	-- we we"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_4019FC:				; CODE XREF: sub_4018D0+F1j
		mov	[esp+0A88h+ulOptions], 0BB8h
		mov	[esp+0A88h+dwMilliseconds], 0
		mov	[esp+0A88h+hHandle], 2
		call	sub_402A9F
		test	eax, eax
		jnz	short loc_401A55
		mov	[esp+0A88h+ulOptions], offset aReportstatus_0 ;	"ReportStatusToSCMgr #2	failed"
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_401A55:				; CODE XREF: sub_4018D0+14Aj
		lea	eax, [ebp+hKey]
		mov	[esp+0A88h+phkResult], eax ; phkResult
		mov	[esp+0A88h+samDesired],	20019h ; char
		mov	[esp+0A88h+ulOptions], 0 ; ulOptions
		mov	[esp+0A88h+dwMilliseconds], offset SubKey ; "SOFTWARE\\OpenVPN"
		mov	[esp+0A88h+hHandle], 80000002h ; hKey
		mov	eax, ds:RegOpenKeyExA
		call	eax ; RegOpenKeyExA
		sub	esp, 14h
		mov	[ebp+dwErrCode], eax
		cmp	[ebp+dwErrCode], 0
		jz	short loc_401ADA
		mov	eax, [ebp+dwErrCode]
		mov	[esp+0A88h+hHandle], eax ; dwErrCode
		mov	eax, ds:SetLastError
		call	eax ; SetLastError
		sub	esp, 4
		mov	[esp+0A88h+ulOptions], offset aRegistryKeyHkl ;	"Registry key HKLM\\SOFTWARE\\OpenVPN no"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_401ADA:				; CODE XREF: sub_4018D0+1BFj
		mov	[ebp+cbData], 104h
		mov	eax, [ebp+hKey]
		lea	edx, [ebp+cbData]
		mov	[esp+0A88h+lpcbData], edx ; lpcbData
		lea	edx, [ebp+Data]
		mov	[esp+0A88h+phkResult], edx ; lpData
		lea	edx, [ebp+Type]
		mov	[esp+0A88h+samDesired],	edx ; lpType
		mov	[esp+0A88h+ulOptions], 0 ; lpReserved
		mov	[esp+0A88h+dwMilliseconds], offset ValueName ; "exe_path"
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegQueryValueExA
		call	eax ; RegQueryValueExA
		sub	esp, 18h
		mov	[ebp+dwErrCode], eax
		cmp	[ebp+dwErrCode], 0
		jnz	short loc_401B39
		mov	eax, [ebp+Type]
		cmp	eax, 1
		jz	short loc_401B9D

loc_401B39:				; CODE XREF: sub_4018D0+25Cj
		mov	eax, [ebp+dwErrCode]
		mov	[esp+0A88h+hHandle], eax ; dwErrCode
		mov	eax, ds:SetLastError
		call	eax ; SetLastError
		sub	esp, 4
		mov	[esp+0A88h+samDesired],	offset ValueName ; "exe_path"
		mov	[esp+0A88h+ulOptions], offset aErrorQueryingR ;	"Error querying	registry key of	type REG"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		mov	eax, [ebp+hKey]
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_401B9D:				; CODE XREF: sub_4018D0+267j
		mov	[ebp+cbData], 104h
		mov	eax, [ebp+hKey]
		lea	edx, [ebp+cbData]
		mov	[esp+0A88h+lpcbData], edx ; lpcbData
		lea	edx, [ebp+var_228]
		mov	[esp+0A88h+phkResult], edx ; lpData
		lea	edx, [ebp+Type]
		mov	[esp+0A88h+samDesired],	edx ; lpType
		mov	[esp+0A88h+ulOptions], 0 ; lpReserved
		mov	[esp+0A88h+dwMilliseconds], offset aConfig_dir ; "config_dir"
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegQueryValueExA
		call	eax ; RegQueryValueExA
		sub	esp, 18h
		mov	[ebp+dwErrCode], eax
		cmp	[ebp+dwErrCode], 0
		jnz	short loc_401BFC
		mov	eax, [ebp+Type]
		cmp	eax, 1
		jz	short loc_401C60

loc_401BFC:				; CODE XREF: sub_4018D0+31Fj
		mov	eax, [ebp+dwErrCode]
		mov	[esp+0A88h+hHandle], eax ; dwErrCode
		mov	eax, ds:SetLastError
		call	eax ; SetLastError
		sub	esp, 4
		mov	[esp+0A88h+samDesired],	offset aConfig_dir ; "config_dir"
		mov	[esp+0A88h+ulOptions], offset aErrorQueryingR ;	"Error querying	registry key of	type REG"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		mov	eax, [ebp+hKey]
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_401C60:				; CODE XREF: sub_4018D0+32Aj
		mov	[ebp+cbData], 10h
		mov	eax, [ebp+hKey]
		lea	edx, [ebp+cbData]
		mov	[esp+0A88h+lpcbData], edx ; lpcbData
		lea	edx, [ebp+var_238]
		mov	[esp+0A88h+phkResult], edx ; lpData
		lea	edx, [ebp+Type]
		mov	[esp+0A88h+samDesired],	edx ; lpType
		mov	[esp+0A88h+ulOptions], 0 ; lpReserved
		mov	[esp+0A88h+dwMilliseconds], offset aConfig_ext ; "config_ext"
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegQueryValueExA
		call	eax ; RegQueryValueExA
		sub	esp, 18h
		mov	[ebp+dwErrCode], eax
		cmp	[ebp+dwErrCode], 0
		jnz	short loc_401CBF
		mov	eax, [ebp+Type]
		cmp	eax, 1
		jz	short loc_401D23

loc_401CBF:				; CODE XREF: sub_4018D0+3E2j
		mov	eax, [ebp+dwErrCode]
		mov	[esp+0A88h+hHandle], eax ; dwErrCode
		mov	eax, ds:SetLastError
		call	eax ; SetLastError
		sub	esp, 4
		mov	[esp+0A88h+samDesired],	offset aConfig_ext ; "config_ext"
		mov	[esp+0A88h+ulOptions], offset aErrorQueryingR ;	"Error querying	registry key of	type REG"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		mov	eax, [ebp+hKey]
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_401D23:				; CODE XREF: sub_4018D0+3EDj
		mov	[ebp+cbData], 104h
		mov	eax, [ebp+hKey]
		lea	edx, [ebp+cbData]
		mov	[esp+0A88h+lpcbData], edx ; lpcbData
		lea	edx, [ebp+var_33C]
		mov	[esp+0A88h+phkResult], edx ; lpData
		lea	edx, [ebp+Type]
		mov	[esp+0A88h+samDesired],	edx ; lpType
		mov	[esp+0A88h+ulOptions], 0 ; lpReserved
		mov	[esp+0A88h+dwMilliseconds], offset aLog_dir ; "log_dir"
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegQueryValueExA
		call	eax ; RegQueryValueExA
		sub	esp, 18h
		mov	[ebp+dwErrCode], eax
		cmp	[ebp+dwErrCode], 0
		jnz	short loc_401D82
		mov	eax, [ebp+Type]
		cmp	eax, 1
		jz	short loc_401DE6

loc_401D82:				; CODE XREF: sub_4018D0+4A5j
		mov	eax, [ebp+dwErrCode]
		mov	[esp+0A88h+hHandle], eax ; dwErrCode
		mov	eax, ds:SetLastError
		call	eax ; SetLastError
		sub	esp, 4
		mov	[esp+0A88h+samDesired],	offset aLog_dir	; "log_dir"
		mov	[esp+0A88h+ulOptions], offset aErrorQueryingR ;	"Error querying	registry key of	type REG"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		mov	eax, [ebp+hKey]
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_401DE6:				; CODE XREF: sub_4018D0+4B0j
		mov	[ebp+cbData], 40h
		mov	eax, [ebp+hKey]
		lea	edx, [ebp+cbData]
		mov	[esp+0A88h+lpcbData], edx ; lpcbData
		lea	edx, [ebp+var_37C]
		mov	[esp+0A88h+phkResult], edx ; lpData
		lea	edx, [ebp+Type]
		mov	[esp+0A88h+samDesired],	edx ; lpType
		mov	[esp+0A88h+ulOptions], 0 ; lpReserved
		mov	[esp+0A88h+dwMilliseconds], offset aPriority ; "priority"
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegQueryValueExA
		call	eax ; RegQueryValueExA
		sub	esp, 18h
		mov	[ebp+dwErrCode], eax
		cmp	[ebp+dwErrCode], 0
		jnz	short loc_401E45
		mov	eax, [ebp+Type]
		cmp	eax, 1
		jz	short loc_401EA9

loc_401E45:				; CODE XREF: sub_4018D0+568j
		mov	eax, [ebp+dwErrCode]
		mov	[esp+0A88h+hHandle], eax ; dwErrCode
		mov	eax, ds:SetLastError
		call	eax ; SetLastError
		sub	esp, 4
		mov	[esp+0A88h+samDesired],	offset aPriority ; "priority"
		mov	[esp+0A88h+ulOptions], offset aErrorQueryingR ;	"Error querying	registry key of	type REG"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		mov	eax, [ebp+hKey]
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_401EA9:				; CODE XREF: sub_4018D0+573j
		mov	[ebp+cbData], 2
		mov	eax, [ebp+hKey]
		lea	edx, [ebp+cbData]
		mov	[esp+0A88h+lpcbData], edx ; lpcbData
		lea	edx, [ebp+var_37E]
		mov	[esp+0A88h+phkResult], edx ; lpData
		lea	edx, [ebp+Type]
		mov	[esp+0A88h+samDesired],	edx ; lpType
		mov	[esp+0A88h+ulOptions], 0 ; lpReserved
		mov	[esp+0A88h+dwMilliseconds], offset aLog_append ; "log_append"
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegQueryValueExA
		call	eax ; RegQueryValueExA
		sub	esp, 18h
		mov	[ebp+dwErrCode], eax
		cmp	[ebp+dwErrCode], 0
		jnz	short loc_401F08
		mov	eax, [ebp+Type]
		cmp	eax, 1
		jz	short loc_401F6D

loc_401F08:				; CODE XREF: sub_4018D0+62Bj
		mov	eax, [ebp+dwErrCode]
		mov	[esp+0A88h+hHandle], eax ; dwErrCode
		mov	eax, ds:SetLastError
		call	eax ; SetLastError
		sub	esp, 4
		mov	[esp+0A88h+samDesired],	offset aLog_append ; "log_append"
		mov	[esp+0A88h+ulOptions], offset aErrorQueryingR ;	"Error querying	registry key of	type REG"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		mov	eax, [ebp+hKey]
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4
		nop
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_401F6D:				; CODE XREF: sub_4018D0+636j
		mov	eax, [ebp+hKey]
		mov	[esp+0A88h+hHandle], eax ; hKey
		mov	eax, ds:RegCloseKey
		call	eax ; RegCloseKey
		sub	esp, 4
		mov	[ebp+var_C], 20h
		mov	[esp+0A88h+dwMilliseconds], offset Str2	; "IDLE_PRIORITY_CLASS"
		lea	eax, [ebp+var_37C]
		mov	[esp+0A88h+hHandle], eax ; Str1
		mov	eax, ds:_stricmp
		call	eax ; _stricmp
		test	eax, eax
		jnz	short loc_401FAF
		mov	[ebp+var_C], 40h
		jmp	loc_40208C
; ---------------------------------------------------------------------------

loc_401FAF:				; CODE XREF: sub_4018D0+6D1j
		mov	[esp+0A88h+dwMilliseconds], offset aBelow_normal_p ; "BELOW_NORMAL_PRIORITY_CLASS"
		lea	eax, [ebp+var_37C]
		mov	[esp+0A88h+hHandle], eax ; Str1
		mov	eax, ds:_stricmp
		call	eax ; _stricmp
		test	eax, eax
		jnz	short loc_401FD7
		mov	[ebp+var_C], 4000h
		jmp	loc_40208C
; ---------------------------------------------------------------------------

loc_401FD7:				; CODE XREF: sub_4018D0+6F9j
		mov	[esp+0A88h+dwMilliseconds], offset aNormal_priorit ; "NORMAL_PRIORITY_CLASS"
		lea	eax, [ebp+var_37C]
		mov	[esp+0A88h+hHandle], eax ; Str1
		mov	eax, ds:_stricmp
		call	eax ; _stricmp
		test	eax, eax
		jnz	short loc_401FFF
		mov	[ebp+var_C], 20h
		jmp	loc_40208C
; ---------------------------------------------------------------------------

loc_401FFF:				; CODE XREF: sub_4018D0+721j
		mov	[esp+0A88h+dwMilliseconds], offset aAbove_normal_p ; "ABOVE_NORMAL_PRIORITY_CLASS"
		lea	eax, [ebp+var_37C]
		mov	[esp+0A88h+hHandle], eax ; Str1
		mov	eax, ds:_stricmp
		call	eax ; _stricmp
		test	eax, eax
		jnz	short loc_402024
		mov	[ebp+var_C], 8000h
		jmp	short loc_40208C
; ---------------------------------------------------------------------------

loc_402024:				; CODE XREF: sub_4018D0+749j
		mov	[esp+0A88h+dwMilliseconds], offset aHigh_priority_ ; "HIGH_PRIORITY_CLASS"
		lea	eax, [ebp+var_37C]
		mov	[esp+0A88h+hHandle], eax ; Str1
		mov	eax, ds:_stricmp
		call	eax ; _stricmp
		test	eax, eax
		jnz	short loc_402049
		mov	[ebp+var_C], 80h
		jmp	short loc_40208C
; ---------------------------------------------------------------------------

loc_402049:				; CODE XREF: sub_4018D0+76Ej
		lea	eax, [ebp+var_37C]
		mov	[esp+0A88h+samDesired],	eax ; char
		mov	[esp+0A88h+ulOptions], offset aUnknownPriorit ;	"Unknown priority name:	%s"
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_40208C:				; CODE XREF: sub_4018D0+6DAj
					; sub_4018D0+702j ...
		mov	[ebp+var_10], 0
		movzx	eax, [ebp+var_37E]
		cmp	al, 30h
		jnz	short loc_4020A7
		mov	[ebp+var_10], 0
		jmp	short loc_4020FE
; ---------------------------------------------------------------------------

loc_4020A7:				; CODE XREF: sub_4018D0+7CCj
		movzx	eax, [ebp+var_37E]
		cmp	al, 31h
		jnz	short loc_4020BB
		mov	[ebp+var_10], 1
		jmp	short loc_4020FE
; ---------------------------------------------------------------------------

loc_4020BB:				; CODE XREF: sub_4018D0+7E0j
		lea	eax, [ebp+var_37E]
		mov	[esp+0A88h+samDesired],	eax ; char
		mov	[esp+0A88h+ulOptions], offset aLogFileAppendF ;	"Log file append flag (given as	'%s') mu"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_4020FE:				; CODE XREF: sub_4018D0+7D5j
					; sub_4018D0+7E9j
		lea	eax, [ebp+var_228]
		mov	[esp+0A88h+samDesired],	eax ; char
		mov	[esp+0A88h+ulOptions], offset aS ; "%s\\*"
		mov	[esp+0A88h+dwMilliseconds], 104h ; size_t
		lea	eax, [ebp+FileName]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax	; lpFindFileData
		lea	eax, [ebp+FileName]
		mov	[esp+0A88h+hHandle], eax ; lpFileName
		mov	eax, ds:FindFirstFileA
		call	eax ; FindFirstFileA
		sub	esp, 8
		mov	[ebp+hFindFile], eax
		cmp	[ebp+hFindFile], 0FFFFFFFFh
		jnz	short loc_40218F
		lea	eax, [ebp+FileName]
		mov	[esp+0A88h+samDesired],	eax ; char
		mov	[esp+0A88h+ulOptions], offset aCannotGetConfi ;	"Cannot	get configuration file list usin"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+var_5E0]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+var_5E0]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_40218F:				; CODE XREF: sub_4018D0+87Aj
					; sub_4018D0+E00j
		mov	[ebp+hFile], 0
		mov	[esp+0A88h+ulOptions], 44h ; Size
		mov	[esp+0A88h+dwMilliseconds], 0 ;	Val
		lea	eax, [ebp+Dst]
		mov	[esp+0A88h+hHandle], eax ; Dst
		call	memset
		mov	[esp+0A88h+ulOptions], 10h ; Size
		mov	[esp+0A88h+dwMilliseconds], 0 ;	Val
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+0A88h+hHandle], eax ; Dst
		call	memset
		mov	[esp+0A88h+ulOptions], 20h ; Size
		mov	[esp+0A88h+dwMilliseconds], 0 ;	Val
		lea	eax, [ebp+SecurityAttributes]
		mov	[esp+0A88h+hHandle], eax ; Dst
		call	memset
		mov	[esp+0A88h+ulOptions], 0BB8h
		mov	[esp+0A88h+dwMilliseconds], 0
		mov	[esp+0A88h+hHandle], 2
		call	sub_402A9F
		test	eax, eax
		jnz	short loc_40225A
		mov	[esp+0A88h+ulOptions], offset aReportstatus_1 ;	"ReportStatusToSCMgr #3	failed"
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+var_5E0]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+var_5E0]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54
		mov	eax, [ebp+hFindFile]
		mov	[esp+0A88h+hHandle], eax ; hFindFile
		mov	eax, ds:FindClose
		call	eax ; FindClose
		sub	esp, 4
		nop
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_40225A:				; CODE XREF: sub_4018D0+93Ej
		lea	eax, [ebp+var_238]
		mov	[esp+0A88h+dwMilliseconds], eax	; char *
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; int
		call	sub_401720
		test	eax, eax
		jz	loc_4026AF
		mov	[esp+0A88h+samDesired],	offset aLog ; "log"
		lea	eax, [ebp+FindFileData]
		add	eax, 2Ch
		mov	[esp+0A88h+ulOptions], eax ; char *
		mov	[esp+0A88h+dwMilliseconds], 104h ; int
		lea	eax, [ebp+Dest]
		mov	[esp+0A88h+hHandle], eax ; Dest
		call	sub_4017CB
		test	eax, eax
		jnz	short loc_4022FF
		lea	eax, [ebp+FindFileData]
		add	eax, 2Ch
		mov	[esp+0A88h+samDesired],	eax ; char
		mov	[esp+0A88h+ulOptions], offset aCannotConstruc ;	"Cannot	construct logfile name based on:"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+var_5E0]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+var_5E0]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54
		mov	eax, [ebp+hFindFile]
		mov	[esp+0A88h+hHandle], eax ; hFindFile
		mov	eax, ds:FindClose
		call	eax ; FindClose
		sub	esp, 4
		jmp	loc_4026D8
; ---------------------------------------------------------------------------

loc_4022FF:				; CODE XREF: sub_4018D0+9D7j
		lea	eax, [ebp+Dest]
		mov	[esp+0A88h+phkResult], eax
		lea	eax, [ebp+var_33C]
		mov	[esp+0A88h+samDesired],	eax ; char
		mov	[esp+0A88h+ulOptions], offset aSS ; "%s\\%s"
		mov	[esp+0A88h+dwMilliseconds], 104h ; size_t
		lea	eax, [ebp+var_5E0]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		add	eax, 2Ch
		mov	[esp+0A88h+phkResult], eax
		mov	[esp+0A88h+samDesired],	offset aOpenvpn_exit_1 ; "openvpn_exit_1"
		mov	[esp+0A88h+ulOptions], offset aOpenvpnService ;	"openvpn --service %s 1	--config \"%s\""
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+CommandLine]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+SecurityAttributes]
		mov	[esp+0A88h+hHandle], eax ; void	*
		call	sub_4015EE
		test	eax, eax
		jnz	short loc_4023AF
		mov	[esp+0A88h+ulOptions], offset aInitializesecu ;	"InitializeSecurityDescriptor start_open"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+var_8E8]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+var_8E8]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		jmp	loc_4026D8
; ---------------------------------------------------------------------------

loc_4023AF:				; CODE XREF: sub_4018D0+AA4j
		cmp	[ebp+var_10], 0
		jz	short loc_4023BC
		mov	eax, 4
		jmp	short loc_4023C1
; ---------------------------------------------------------------------------

loc_4023BC:				; CODE XREF: sub_4018D0+AE3j
		mov	eax, 2

loc_4023C1:				; CODE XREF: sub_4018D0+AEAj
		mov	[esp+0A88h+hTemplateFile], 0 ; hTemplateFile
		mov	[esp+0A88h+lpcbData], 80h ; dwFlagsAndAttributes
		mov	[esp+0A88h+phkResult], eax ; dwCreationDisposition
		lea	eax, [ebp+SecurityAttributes]
		mov	[esp+0A88h+samDesired],	eax ; lpSecurityAttributes
		mov	[esp+0A88h+ulOptions], 1 ; dwShareMode
		mov	[esp+0A88h+dwMilliseconds], 40000000h ;	dwDesiredAccess
		lea	eax, [ebp+var_5E0]
		mov	[esp+0A88h+hHandle], eax ; lpFileName
		mov	eax, ds:CreateFileA
		call	eax ; CreateFileA
		sub	esp, 1Ch
		mov	[ebp+hFile], eax
		cmp	[ebp+hFile], 0FFFFFFFFh
		jnz	short loc_40245E
		lea	eax, [ebp+var_5E0]
		mov	[esp+0A88h+samDesired],	eax ; char
		mov	[esp+0A88h+ulOptions], offset aCannotOpenLogf ;	"Cannot	open logfile: %s"
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+var_8E8]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+var_8E8]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		mov	eax, [ebp+hFindFile]
		mov	[esp+0A88h+hHandle], eax ; hFindFile
		mov	eax, ds:FindClose
		call	eax ; FindClose
		sub	esp, 4
		jmp	loc_4026D8
; ---------------------------------------------------------------------------

loc_40245E:				; CODE XREF: sub_4018D0+B39j
		cmp	[ebp+var_10], 0
		jz	loc_4024E8
		mov	[esp+0A88h+samDesired],	2 ; dwMoveMethod
		mov	[esp+0A88h+ulOptions], 0 ; lpDistanceToMoveHigh
		mov	[esp+0A88h+dwMilliseconds], 0 ;	lDistanceToMove
		mov	eax, [ebp+hFile]
		mov	[esp+0A88h+hHandle], eax ; hFile
		mov	eax, ds:SetFilePointer
		call	eax ; SetFilePointer
		sub	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_4024E8
		lea	eax, [ebp+var_5E0]
		mov	[esp+0A88h+samDesired],	eax ; char
		mov	[esp+0A88h+ulOptions], offset aCannotSeekToEn ;	"Cannot	seek to	end of logfile:	%s"
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+var_8E8]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+var_8E8]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		mov	eax, [ebp+hFindFile]
		mov	[esp+0A88h+hHandle], eax ; hFindFile
		mov	eax, ds:FindClose
		call	eax ; FindClose
		sub	esp, 4
		jmp	loc_4026D8
; ---------------------------------------------------------------------------

loc_4024E8:				; CODE XREF: sub_4018D0+B92j
					; sub_4018D0+BC3j
		lea	eax, [ebp+Dst]
		mov	[esp+0A88h+hHandle], eax ; lpStartupInfo
		mov	eax, ds:GetStartupInfoA
		call	eax ; GetStartupInfoA
		sub	esp, 4
		mov	[ebp+Dst], 44h
		mov	[ebp+var_A00], 101h
		mov	[ebp+var_9FC], 0
		mov	[esp+0A88h+hHandle], 0FFFFFFF6h	; nStdHandle
		mov	eax, ds:GetStdHandle
		call	eax ; GetStdHandle
		sub	esp, 4
		mov	[ebp+var_9F4], eax
		mov	eax, [ebp+hFile]
		mov	[ebp+var_9EC], eax
		mov	eax, [ebp+var_9EC]
		mov	[ebp+var_9F0], eax
		mov	eax, [ebp+var_C]
		or	eax, 10h
		mov	edx, eax
		lea	eax, [ebp+ProcessInformation]
		mov	[esp+0A88h+lpProcessInformation], eax ;	lpProcessInformation
		lea	eax, [ebp+Dst]
		mov	[esp+0A88h+lpStartupInfo], eax ; lpStartupInfo
		lea	eax, [ebp+var_228]
		mov	[esp+0A88h+lpCurrentDirectory],	eax ; lpCurrentDirectory
		mov	[esp+0A88h+hTemplateFile], 0 ; lpEnvironment
		mov	[esp+0A88h+lpcbData], edx ; dwCreationFlags
		mov	[esp+0A88h+phkResult], 1 ; bInheritHandles
		mov	[esp+0A88h+samDesired],	0 ; char
		mov	[esp+0A88h+ulOptions], 0 ; lpProcessAttributes
		lea	eax, [ebp+CommandLine]
		mov	[esp+0A88h+dwMilliseconds], eax	; lpCommandLine
		lea	eax, [ebp+Data]
		mov	[esp+0A88h+hHandle], eax ; lpApplicationName
		mov	eax, ds:CreateProcessA
		call	eax ; CreateProcessA
		sub	esp, 28h
		test	eax, eax
		jnz	short loc_402626
		lea	eax, [ebp+var_228]
		mov	[esp+0A88h+lpcbData], eax
		lea	eax, [ebp+CommandLine]
		mov	[esp+0A88h+phkResult], eax
		lea	eax, [ebp+Data]
		mov	[esp+0A88h+samDesired],	eax ; char
		mov	[esp+0A88h+ulOptions], offset aCreateprocessF ;	"CreateProcess failed, exe='%s' cmdline="...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+var_8E8]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+var_8E8]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		mov	eax, [ebp+hFindFile]
		mov	[esp+0A88h+hHandle], eax ; hFindFile
		mov	eax, ds:FindClose
		call	eax ; FindClose
		sub	esp, 4
		mov	eax, [ebp+hFile]
		mov	[esp+0A88h+hHandle], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		jmp	loc_4026D8
; ---------------------------------------------------------------------------

loc_402626:				; CODE XREF: sub_4018D0+CDDj
		mov	[esp+0A88h+hHandle], 3E8h ; dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4
		mov	eax, [ebp+ProcessInformation.hProcess]
		mov	[esp+0A88h+hHandle], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		test	eax, eax
		jz	short loc_402679
		mov	eax, [ebp+ProcessInformation.hThread]
		mov	[esp+0A88h+hHandle], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		test	eax, eax
		jz	short loc_402679
		mov	eax, [ebp+hFile]
		mov	[esp+0A88h+hHandle], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4
		test	eax, eax
		jnz	short loc_4026AF

loc_402679:				; CODE XREF: sub_4018D0+D7Cj
					; sub_4018D0+D93j
		mov	[esp+0A88h+ulOptions], offset aClosehandleFai ;	"CloseHandle failed"
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+var_8E8]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+var_8E8]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 3
		call	sub_402B54
		jmp	short loc_4026D8
; ---------------------------------------------------------------------------

loc_4026AF:				; CODE XREF: sub_4018D0+9A4j
					; sub_4018D0+DA7j
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax	; lpFindFileData
		mov	eax, [ebp+hFindFile]
		mov	[esp+0A88h+hHandle], eax ; hFindFile
		mov	eax, ds:FindNextFileA
		call	eax ; FindNextFileA
		sub	esp, 8
		mov	[ebp+var_20], eax
		cmp	[ebp+var_20], 0
		jnz	loc_40218F
		jmp	short loc_4026DD
; ---------------------------------------------------------------------------

loc_4026D8:				; CODE XREF: sub_4018D0+A2Aj
					; sub_4018D0+ADAj ...
		jmp	loc_402795
; ---------------------------------------------------------------------------

loc_4026DD:				; CODE XREF: sub_4018D0+E06j
		mov	eax, [ebp+hFindFile]
		mov	[esp+0A88h+hHandle], eax ; hFindFile
		mov	eax, ds:FindClose
		call	eax ; FindClose
		sub	esp, 4
		mov	[esp+0A88h+ulOptions], 0
		mov	[esp+0A88h+dwMilliseconds], 0
		mov	[esp+0A88h+hHandle], 4
		call	sub_402A9F
		test	eax, eax
		jnz	short loc_402743
		mov	[esp+0A88h+ulOptions], offset aReportstatus_2 ;	"ReportStatusToSCMgr SERVICE_RUNNING fai"...
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54
		jmp	short loc_402795
; ---------------------------------------------------------------------------

loc_402743:				; CODE XREF: sub_4018D0+E3Bj
		mov	eax, ds:hEvent
		mov	[esp+0A88h+dwMilliseconds], 0FFFFFFFFh ; dwMilliseconds
		mov	[esp+0A88h+hHandle], eax ; hHandle
		mov	eax, ds:WaitForSingleObject
		call	eax ; WaitForSingleObject
		sub	esp, 8
		test	eax, eax
		jz	short loc_402795
		mov	[esp+0A88h+ulOptions], offset aWaitForShutdow ;	"wait for shutdown signal failed"
		mov	[esp+0A88h+dwMilliseconds], 100h ; size_t
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+hHandle], eax ; char	*
		call	sub_401588
		lea	eax, [ebp+FindFileData]
		mov	[esp+0A88h+dwMilliseconds], eax
		mov	[esp+0A88h+hHandle], 1
		call	sub_402B54

loc_402795:				; CODE XREF: sub_4018D0+62j
					; sub_4018D0+CDj ...
		call	sub_4027B7
		mov	eax, ds:hEvent
		test	eax, eax
		jz	short locret_4027B5
		mov	eax, ds:hEvent
		mov	[esp+0A88h+hHandle], eax ; hObject
		mov	eax, ds:CloseHandle
		call	eax ; CloseHandle
		sub	esp, 4

locret_4027B5:				; CODE XREF: sub_4018D0+ED1j
		leave
		retn
sub_4018D0	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4027B7	proc near		; CODE XREF: sub_4018D0:loc_402795p
					; HandlerProc+31p ...

hEvent		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, ds:hEvent
		test	eax, eax
		jz	short locret_4027D8
		mov	eax, ds:hEvent
		mov	[esp+18h+hEvent], eax ;	hEvent
		mov	eax, ds:SetEvent
		call	eax ; SetEvent
		sub	esp, 4

locret_4027D8:				; CODE XREF: sub_4027B7+Dj
		leave
		retn
sub_4027B7	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4027DC	proc near		; CODE XREF: sub_401180+25Bp

Str1		= dword	ptr -24h
Str2		= dword	ptr -20h
ServiceStartTable= SERVICE_TABLE_ENTRYA	ptr -18h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= byte ptr  0Ch

		lea	ecx, [esp-8+arg_0]
		and	esp, 0FFFFFFF0h
		push	dword ptr [ecx-4]
		push	ebp
		mov	ebp, esp
		push	ebx
		push	ecx
		sub	esp, 20h
		mov	ebx, ecx
		call	sub_403D00
		mov	[ebp+ServiceStartTable.lpServiceName], offset ServiceName ; "OpenVPNService"
		mov	[ebp+ServiceStartTable.lpServiceProc], offset sub_4029A3
		mov	[ebp+var_10], 0
		mov	[ebp+var_C], 0
		cmp	dword ptr [ebx], 1
		jle	loc_402904
		mov	eax, [ebx+4]
		add	eax, 4
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Dh
		jz	short loc_40283C
		mov	eax, [ebx+4]
		add	eax, 4
		mov	eax, [eax]
		movzx	eax, byte ptr [eax]
		cmp	al, 2Fh
		jnz	loc_402904

loc_40283C:				; CODE XREF: sub_4027DC+4Bj
		mov	eax, [ebx+4]
		add	eax, 4
		mov	eax, [eax]
		add	eax, 1
		mov	[esp+24h+Str2],	eax ; Str2
		mov	[esp+24h+Str1],	offset Str1 ; "install"
		mov	eax, ds:_stricmp
		call	eax ; _stricmp
		test	eax, eax
		jnz	short loc_402867
		call	sub_402C69
		jmp	loc_402999
; ---------------------------------------------------------------------------

loc_402867:				; CODE XREF: sub_4027DC+7Fj
		mov	eax, [ebx+4]
		add	eax, 4
		mov	eax, [eax]
		add	eax, 1
		mov	[esp+24h+Str2],	eax ; Str2
		mov	[esp+24h+Str1],	offset aRemove ; "remove"
		mov	eax, ds:_stricmp
		call	eax ; _stricmp
		test	eax, eax
		jnz	short loc_402892
		call	sub_402F89
		jmp	loc_402999
; ---------------------------------------------------------------------------

loc_402892:				; CODE XREF: sub_4027DC+AAj
		mov	eax, [ebx+4]
		add	eax, 4
		mov	eax, [eax]
		add	eax, 1
		mov	[esp+24h+Str2],	eax ; Str2
		mov	[esp+24h+Str1],	offset aStart ;	"start"
		mov	eax, ds:_stricmp
		call	eax ; _stricmp
		test	eax, eax
		jnz	short loc_4028BD
		call	sub_402E4A
		jmp	loc_402999
; ---------------------------------------------------------------------------

loc_4028BD:				; CODE XREF: sub_4027DC+D5j
		mov	eax, [ebx+4]
		add	eax, 4
		mov	eax, [eax]
		add	eax, 1
		mov	[esp+24h+Str2],	eax ; Str2
		mov	[esp+24h+Str1],	offset aDebug ;	"debug"
		mov	eax, ds:_stricmp
		call	eax ; _stricmp
		test	eax, eax
		jnz	short loc_402903
		mov	ds:dword_407028, 1
		mov	eax, [ebx+4]
		mov	[esp+24h+Str2],	eax
		mov	eax, [ebx]
		mov	[esp+24h+Str1],	eax
		call	sub_403196
		mov	eax, 0
		jmp	loc_402999
; ---------------------------------------------------------------------------

loc_402903:				; CODE XREF: sub_4027DC+100j
		nop

loc_402904:				; CODE XREF: sub_4027DC+38j
					; sub_4027DC+5Aj
		mov	[esp+24h+Str2],	offset aOpenvpnserv ; "openvpnserv"
		mov	[esp+24h+Str1],	offset Format ;	"%s -install	      to install the ser"...
		call	printf
		mov	[esp+24h+Str2],	offset aOpenvpnserv ; "openvpnserv"
		mov	[esp+24h+Str1],	offset aSStartToStartT ; "%s -start\t\t\t to start the service\n"
		call	printf
		mov	[esp+24h+Str2],	offset aOpenvpnserv ; "openvpnserv"
		mov	[esp+24h+Str1],	offset aSRemoveToRemov ; "%s -remove	       to remove the serv"...
		call	printf
		mov	[esp+24h+Str2],	offset aOpenvpnserv ; "openvpnserv"
		mov	[esp+24h+Str1],	offset aSDebugParamsTo ; "%s -debug <params>   to run as a consol"...
		call	printf
		mov	[esp+24h+Str1],	offset Str ; "\nStartServiceCtrlDispatcher being call"...
		call	puts
		mov	[esp+24h+Str1],	offset aThisMayTakeSev ; "This may take	several	seconds.  Please "...
		call	puts
		lea	eax, [ebp+ServiceStartTable]
		mov	[esp+24h+Str1],	eax ; lpServiceStartTable
		mov	eax, ds:StartServiceCtrlDispatcherA
		call	eax ; StartServiceCtrlDispatcherA
		sub	esp, 4
		test	eax, eax
		jnz	short loc_402994
		mov	[esp+24h+Str2],	offset aStartservice_0 ; "StartServiceCtrlDispatcher failed."
		mov	[esp+24h+Str1],	1
		call	sub_402B54

loc_402994:				; CODE XREF: sub_4027DC+1A2j
		mov	eax, 0

loc_402999:				; CODE XREF: sub_4027DC+86j
					; sub_4027DC+B1j ...
		lea	esp, [ebp-8]
		pop	ecx
		pop	ebx
		pop	ebp
		lea	esp, [ecx-4]
		retn
sub_4027DC	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_4029A3	proc near		; DATA XREF: sub_4027DC+20o

lpServiceName	= dword	ptr -18h
lpHandlerProc	= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+lpHandlerProc], offset	HandlerProc ; lpHandlerProc
		mov	[esp+18h+lpServiceName], offset	ServiceName ; "OpenVPNService"
		mov	eax, ds:RegisterServiceCtrlHandlerA
		call	eax ; RegisterServiceCtrlHandlerA
		sub	esp, 8
		mov	ds:hServiceStatus, eax
		mov	eax, ds:hServiceStatus
		test	eax, eax
		jnz	short loc_4029D2
		jmp	short loc_402A1A
; ---------------------------------------------------------------------------

loc_4029D2:				; CODE XREF: sub_4029A3+2Bj
		mov	ds:ServiceStatus.dwServiceType,	10h
		mov	ds:ServiceStatus.dwServiceSpecificExitCode, 0
		mov	[esp+18h+var_10], 0BB8h
		mov	[esp+18h+lpHandlerProc], 0
		mov	[esp+18h+lpServiceName], 2
		call	sub_402A9F
		test	eax, eax
		jnz	short loc_402A08
		jmp	short loc_402A1A
; ---------------------------------------------------------------------------

loc_402A08:				; CODE XREF: sub_4029A3+61j
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+lpHandlerProc], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+lpServiceName], eax
		call	sub_4018D0

loc_402A1A:				; CODE XREF: sub_4029A3+2Dj
					; sub_4029A3+63j
		mov	eax, ds:hServiceStatus
		test	eax, eax
		jz	short loc_402A40
		mov	eax, ds:dword_407024
		mov	[esp+18h+var_10], 0
		mov	[esp+18h+lpHandlerProc], eax
		mov	[esp+18h+lpServiceName], 1
		call	sub_402A9F

loc_402A40:				; CODE XREF: sub_4029A3+7Ej
		nop
		leave
		retn	8
sub_4029A3	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; void __stdcall HandlerProc(DWORD dwControl)
HandlerProc	proc near		; DATA XREF: sub_4029A3+6o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
dwControl	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+dwControl]
		cmp	eax, 1
		jz	short loc_402A5A
		cmp	eax, 4
		jz	short loc_402A7D
		jmp	short loc_402A7E
; ---------------------------------------------------------------------------

loc_402A5A:				; CODE XREF: HandlerProc+Cj
		mov	[esp+18h+var_10], 0
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 3
		call	sub_402A9F
		call	sub_4027B7
		jmp	short locret_402A9B
; ---------------------------------------------------------------------------

loc_402A7D:				; CODE XREF: HandlerProc+11j
		nop

loc_402A7E:				; CODE XREF: HandlerProc+13j
		mov	eax, ds:ServiceStatus.dwCurrentState
		mov	[esp+18h+var_10], 0
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], eax
		call	sub_402A9F

locret_402A9B:				; CODE XREF: HandlerProc+36j
		leave
		retn	4
HandlerProc	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402A9F	proc near		; CODE XREF: sub_4018D0+25p
					; sub_4018D0+143p ...

hServiceStatus	= dword	ptr -28h
lpServiceStatus	= dword	ptr -24h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 1
		mov	eax, ds:dword_407028
		test	eax, eax
		jnz	loc_402B4F
		cmp	[ebp+arg_0], 2
		jnz	short loc_402ACB
		mov	ds:ServiceStatus.dwControlsAccepted, 0
		jmp	short loc_402AD5
; ---------------------------------------------------------------------------

loc_402ACB:				; CODE XREF: sub_402A9F+1Ej
		mov	ds:ServiceStatus.dwControlsAccepted, 1

loc_402AD5:				; CODE XREF: sub_402A9F+2Aj
		mov	eax, [ebp+arg_0]
		mov	ds:ServiceStatus.dwCurrentState, eax
		mov	eax, [ebp+arg_4]
		mov	ds:ServiceStatus.dwWin32ExitCode, eax
		mov	eax, [ebp+arg_8]
		mov	ds:ServiceStatus.dwWaitHint, eax
		cmp	[ebp+arg_0], 4
		jz	short loc_402AF9
		cmp	[ebp+arg_0], 1
		jnz	short loc_402B05

loc_402AF9:				; CODE XREF: sub_402A9F+52j
		mov	ds:ServiceStatus.dwCheckPoint, 0
		jmp	short loc_402B18
; ---------------------------------------------------------------------------

loc_402B05:				; CODE XREF: sub_402A9F+58j
		mov	eax, dword_405004
		lea	edx, [eax+1]
		mov	dword_405004, edx
		mov	ds:ServiceStatus.dwCheckPoint, eax

loc_402B18:				; CODE XREF: sub_402A9F+64j
		mov	eax, ds:hServiceStatus
		mov	[esp+28h+lpServiceStatus], offset ServiceStatus	; lpServiceStatus
		mov	[esp+28h+hServiceStatus], eax ;	hServiceStatus
		mov	eax, ds:SetServiceStatus
		call	eax ; SetServiceStatus
		sub	esp, 8
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jnz	short loc_402B4F
		mov	[esp+28h+lpServiceStatus], offset aSetservicestat ; "SetServiceStatus"
		mov	[esp+28h+hServiceStatus], 1
		call	sub_402B54

loc_402B4F:				; CODE XREF: sub_402A9F+14j
					; sub_402A9F+9Aj
		mov	eax, [ebp+var_C]
		leave
		retn
sub_402A9F	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402B54	proc near		; CODE XREF: sub_4018D0+5Dp
					; sub_4018D0+C8p ...

lpUNCServerName	= dword	ptr -0B8h
lpSourceName	= dword	ptr -0B4h
wCategory	= word ptr -0B0h
dwEventID	= dword	ptr -0ACh
lpUserSid	= dword	ptr -0A8h
wNumStrings	= word ptr -0A4h
dwDataSize	= dword	ptr -0A0h
lpStrings	= dword	ptr -9Ch
lpRawData	= dword	ptr -98h
Strings		= dword	ptr -88h
var_84		= dword	ptr -84h
Dest		= byte ptr -7Fh
hEventLog	= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0B8h
		mov	eax, ds:dword_407028
		test	eax, eax
		jnz	locret_402C58
		mov	eax, [ebp+arg_0]
		and	eax, 2
		test	eax, eax
		jz	short loc_402B82
		mov	eax, ds:GetLastError
		call	eax ; GetLastError
		mov	ds:dword_407024, eax
		jmp	short loc_402B8C
; ---------------------------------------------------------------------------

loc_402B82:				; CODE XREF: sub_402B54+1Ej
		mov	ds:dword_407024, 0

loc_402B8C:				; CODE XREF: sub_402B54+2Cj
		mov	[esp+0B8h+lpSourceName], offset	ServiceName ; "OpenVPNService"
		mov	[esp+0B8h+lpUNCServerName], 0 ;	lpUNCServerName
		mov	eax, ds:RegisterEventSourceA
		call	eax ; RegisterEventSourceA
		sub	esp, 8
		mov	[ebp+hEventLog], eax
		mov	eax, ds:dword_407024
		mov	[esp+0B8h+dwEventID], eax
		mov	dword ptr [esp+0B8h+wCategory],	offset ServiceName ; "OpenVPNService"
		mov	[esp+0B8h+lpSourceName], offset	aSErrorD ; "%s error: %d"
		lea	eax, [ebp+Dest]
		mov	[esp+0B8h+lpUNCServerName], eax	; Dest
		call	sprintf
		lea	eax, [ebp+Dest]
		mov	[ebp+Strings], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_84], eax
		cmp	[ebp+hEventLog], 0
		jz	short locret_402C58
		mov	eax, [ebp+arg_0]
		and	eax, 1
		test	eax, eax
		jz	short loc_402BF5
		mov	eax, 1
		jmp	short loc_402BFA
; ---------------------------------------------------------------------------

loc_402BF5:				; CODE XREF: sub_402B54+98j
		mov	eax, 4

loc_402BFA:				; CODE XREF: sub_402B54+9Fj
		mov	[esp+0B8h+lpRawData], 0	; lpRawData
		lea	edx, [ebp+Strings]
		mov	[esp+0B8h+lpStrings], edx ; lpStrings
		mov	[esp+0B8h+dwDataSize], 0 ; dwDataSize
		mov	dword ptr [esp+0B8h+wNumStrings], 2 ; wNumStrings
		mov	[esp+0B8h+lpUserSid], 0	; lpUserSid
		mov	[esp+0B8h+dwEventID], 0	; dwEventID
		mov	dword ptr [esp+0B8h+wCategory],	0 ; wCategory
		mov	[esp+0B8h+lpSourceName], eax ; wType
		mov	eax, [ebp+hEventLog]
		mov	[esp+0B8h+lpUNCServerName], eax	; hEventLog
		mov	eax, ds:ReportEventA
		call	eax ; ReportEventA
		sub	esp, 24h
		mov	eax, [ebp+hEventLog]
		mov	[esp+0B8h+lpUNCServerName], eax	; hEventLog
		mov	eax, ds:DeregisterEventSource
		call	eax ; DeregisterEventSource
		sub	esp, 4

locret_402C58:				; CODE XREF: sub_402B54+10j
					; sub_402B54+8Ej
		leave
		retn
sub_402B54	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402C5A	proc near		; CODE XREF: sub_4018D0+9p
		push	ebp
		mov	ebp, esp
		mov	ds:dword_407024, 0
		pop	ebp
		retn
sub_402C5A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402C69	proc near		; CODE XREF: sub_4027DC+81p

hModule		= dword	ptr -258h
lpFilename	= dword	ptr -254h
nSize		= dword	ptr -250h
dwDesiredAccess	= dword	ptr -24Ch
dwServiceType	= dword	ptr -248h
dwStartType	= dword	ptr -244h
dwErrorControl	= dword	ptr -240h
lpBinaryPathName= dword	ptr -23Ch
lpLoadOrderGroup= dword	ptr -238h
lpdwTagId	= dword	ptr -234h
lpDependencies	= dword	ptr -230h
lpServiceStartName= dword ptr -22Ch
lpPassword	= dword	ptr -228h
BinaryPathName	= byte ptr -214h
hSCObject	= dword	ptr -14h
hSCManager	= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		push	edi
		sub	esp, 254h
		mov	[ebp+var_C], 0
		mov	[esp+258h+nSize], 1FEh ; nSize
		lea	eax, [ebp+BinaryPathName]
		add	eax, 1
		mov	[esp+258h+lpFilename], eax ; lpFilename
		mov	[esp+258h+hModule], 0 ;	hModule
		mov	eax, ds:GetModuleFileNameA
		call	eax ; GetModuleFileNameA
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_402CDA
		mov	[esp+258h+lpFilename], 100h ; int
		mov	[esp+258h+hModule], offset Dest	; Dest
		call	sub_403220
		mov	[esp+258h+nSize], eax
		mov	[esp+258h+lpFilename], offset DisplayName ; "OpenVPN Service"
		mov	[esp+258h+hModule], offset aUnableToInstal ; "Unable to	install	%s - %s\n"
		call	printf
		mov	eax, 1
		jmp	loc_402E45
; ---------------------------------------------------------------------------

loc_402CDA:				; CODE XREF: sub_402C69+39j
		mov	[ebp+BinaryPathName], 22h
		lea	eax, [ebp+BinaryPathName]
		mov	ecx, 0FFFFFFFFh
		mov	edx, eax
		mov	eax, 0
		mov	edi, edx
		repne scasb
		mov	eax, ecx
		not	eax
		lea	edx, [eax-1]
		lea	eax, [ebp+BinaryPathName]
		add	eax, edx
		mov	word ptr [eax],	22h
		mov	[esp+258h+nSize], 3 ; dwDesiredAccess
		mov	[esp+258h+lpFilename], 0 ; lpDatabaseName
		mov	[esp+258h+hModule], 0 ;	lpMachineName
		mov	eax, ds:OpenSCManagerA
		call	eax ; OpenSCManagerA
		sub	esp, 0Ch
		mov	[ebp+hSCManager], eax
		cmp	[ebp+hSCManager], 0
		jz	loc_402E17
		mov	[esp+258h+lpPassword], 0 ; lpPassword
		mov	[esp+258h+lpServiceStartName], 0 ; lpServiceStartName
		mov	[esp+258h+lpDependencies], offset Dependencies ; "tap0901"
		mov	[esp+258h+lpdwTagId], 0	; lpdwTagId
		mov	[esp+258h+lpLoadOrderGroup], 0 ; lpLoadOrderGroup
		lea	eax, [ebp+BinaryPathName]
		mov	[esp+258h+lpBinaryPathName], eax ; lpBinaryPathName
		mov	[esp+258h+dwErrorControl], 1 ; dwErrorControl
		mov	[esp+258h+dwStartType],	3 ; dwStartType
		mov	[esp+258h+dwServiceType], 10h ;	dwServiceType
		mov	[esp+258h+dwDesiredAccess], 4 ;	dwDesiredAccess
		mov	[esp+258h+nSize], offset DisplayName ; "OpenVPN	Service"
		mov	[esp+258h+lpFilename], offset ServiceName ; "OpenVPNService"
		mov	eax, [ebp+hSCManager]
		mov	[esp+258h+hModule], eax	; hSCManager
		mov	eax, ds:CreateServiceA
		call	eax ; CreateServiceA
		sub	esp, 34h
		mov	[ebp+hSCObject], eax
		cmp	[ebp+hSCObject], 0
		jz	short loc_402DDA
		mov	[esp+258h+lpFilename], offset DisplayName ; "OpenVPN Service"
		mov	[esp+258h+hModule], offset aSInstalled_	; "%s installed.\n"
		call	printf
		mov	eax, [ebp+hSCObject]
		mov	[esp+258h+hModule], eax	; hSCObject
		mov	eax, ds:CloseServiceHandle
		call	eax ; CloseServiceHandle
		sub	esp, 4
		jmp	short loc_402E05
; ---------------------------------------------------------------------------

loc_402DDA:				; CODE XREF: sub_402C69+149j
		mov	[esp+258h+lpFilename], 100h ; int
		mov	[esp+258h+hModule], offset Dest	; Dest
		call	sub_403220
		mov	[esp+258h+lpFilename], eax
		mov	[esp+258h+hModule], offset aCreateserviceF ; "CreateService failed - %s\n"
		call	printf
		mov	[ebp+var_C], 1

loc_402E05:				; CODE XREF: sub_402C69+16Fj
		mov	eax, [ebp+hSCManager]
		mov	[esp+258h+hModule], eax	; hSCObject
		mov	eax, ds:CloseServiceHandle
		call	eax ; CloseServiceHandle
		sub	esp, 4
		jmp	short loc_402E42
; ---------------------------------------------------------------------------

loc_402E17:				; CODE XREF: sub_402C69+CAj
		mov	[esp+258h+lpFilename], 100h ; int
		mov	[esp+258h+hModule], offset Dest	; Dest
		call	sub_403220
		mov	[esp+258h+lpFilename], eax
		mov	[esp+258h+hModule], offset aOpenscmanagerF ; "OpenSCManager failed - %s\n"
		call	printf
		mov	[ebp+var_C], 1

loc_402E42:				; CODE XREF: sub_402C69+1ACj
		mov	eax, [ebp+var_C]

loc_402E45:				; CODE XREF: sub_402C69+6Cj
		mov	edi, [ebp+var_4]
		leave
		retn
sub_402C69	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402E4A	proc near		; CODE XREF: sub_4027DC+D7p

lpMachineName	= dword	ptr -28h
lpDatabaseName	= dword	ptr -24h
dwDesiredAccess	= dword	ptr -20h
hService	= dword	ptr -14h
hSCManager	= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		mov	[esp+28h+dwDesiredAccess], 0F003Fh ; dwDesiredAccess
		mov	[esp+28h+lpDatabaseName], 0 ; lpDatabaseName
		mov	[esp+28h+lpMachineName], 0 ; lpMachineName
		mov	eax, ds:OpenSCManagerA
		call	eax ; OpenSCManagerA
		sub	esp, 0Ch
		mov	[ebp+hSCManager], eax
		cmp	[ebp+hSCManager], 0
		jnz	short loc_402EAC
		mov	[esp+28h+lpDatabaseName], 100h ; int
		mov	[esp+28h+lpMachineName], offset	Dest ; Dest
		call	sub_403220
		mov	[esp+28h+lpDatabaseName], eax
		mov	[esp+28h+lpMachineName], offset	aOpenscmanagerF	; "OpenSCManager failed	- %s\n"
		call	printf
		mov	[ebp+var_C], 1

loc_402EAC:				; CODE XREF: sub_402E4A+35j
		mov	[esp+28h+dwDesiredAccess], 0F01FFh ; dwDesiredAccess
		mov	[esp+28h+lpDatabaseName], offset ServiceName ; "OpenVPNService"
		mov	eax, [ebp+hSCManager]
		mov	[esp+28h+lpMachineName], eax ; hSCManager
		mov	eax, ds:OpenServiceA
		call	eax ; OpenServiceA
		sub	esp, 0Ch
		mov	[ebp+hService],	eax
		cmp	[ebp+hService],	0
		jnz	short loc_402F00
		mov	[esp+28h+lpDatabaseName], 100h ; int
		mov	[esp+28h+lpMachineName], offset	Dest ; Dest
		call	sub_403220
		mov	[esp+28h+lpDatabaseName], eax
		mov	[esp+28h+lpMachineName], offset	aOpenserviceFai	; "OpenService failed -	%s\n"
		call	printf
		mov	[ebp+var_C], 1

loc_402F00:				; CODE XREF: sub_402E4A+89j
		mov	[esp+28h+dwDesiredAccess], 0 ; lpServiceArgVectors
		mov	[esp+28h+lpDatabaseName], 0 ; dwNumServiceArgs
		mov	eax, [ebp+hService]
		mov	[esp+28h+lpMachineName], eax ; hService
		mov	eax, ds:StartServiceA
		call	eax ; StartServiceA
		sub	esp, 0Ch
		test	eax, eax
		jnz	short loc_402F51
		mov	[esp+28h+lpDatabaseName], 100h ; int
		mov	[esp+28h+lpMachineName], offset	Dest ; Dest
		call	sub_403220
		mov	[esp+28h+lpDatabaseName], eax
		mov	[esp+28h+lpMachineName], offset	aStartserviceFa	; "StartService	failed - %s\n"
		call	printf
		mov	[ebp+var_C], 1
		jmp	short loc_402F64
; ---------------------------------------------------------------------------

loc_402F51:				; CODE XREF: sub_402E4A+D8j
		mov	[esp+28h+lpMachineName], offset	aServiceStarted	; "Service Started"
		call	puts
		mov	[ebp+var_C], 0

loc_402F64:				; CODE XREF: sub_402E4A+105j
		mov	eax, [ebp+hService]
		mov	[esp+28h+lpMachineName], eax ; hSCObject
		mov	eax, ds:CloseServiceHandle
		call	eax ; CloseServiceHandle
		sub	esp, 4
		mov	eax, [ebp+hSCManager]
		mov	[esp+28h+lpMachineName], eax ; hSCObject
		mov	eax, ds:CloseServiceHandle
		call	eax ; CloseServiceHandle
		sub	esp, 4
		mov	eax, [ebp+var_C]
		leave
		retn
sub_402E4A	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_402F89	proc near		; CODE XREF: sub_4027DC+ACp

lpMachineName	= dword	ptr -28h
lpDatabaseName	= dword	ptr -24h
dwDesiredAccess	= dword	ptr -20h
hService	= dword	ptr -14h
hSCManager	= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	[ebp+var_C], 0
		mov	[esp+28h+dwDesiredAccess], 1 ; dwDesiredAccess
		mov	[esp+28h+lpDatabaseName], 0 ; lpDatabaseName
		mov	[esp+28h+lpMachineName], 0 ; lpMachineName
		mov	eax, ds:OpenSCManagerA
		call	eax ; OpenSCManagerA
		sub	esp, 0Ch
		mov	[ebp+hSCManager], eax
		cmp	[ebp+hSCManager], 0
		jz	loc_403166
		mov	[esp+28h+dwDesiredAccess], 10024h ; dwDesiredAccess
		mov	[esp+28h+lpDatabaseName], offset ServiceName ; "OpenVPNService"
		mov	eax, [ebp+hSCManager]
		mov	[esp+28h+lpMachineName], eax ; hSCManager
		mov	eax, ds:OpenServiceA
		call	eax ; OpenServiceA
		sub	esp, 0Ch
		mov	[ebp+hService],	eax
		cmp	[ebp+hService],	0
		jz	loc_403129
		mov	[esp+28h+dwDesiredAccess], offset ServiceStatus	; lpServiceStatus
		mov	[esp+28h+lpDatabaseName], 1 ; dwControl
		mov	eax, [ebp+hService]
		mov	[esp+28h+lpMachineName], eax ; hService
		mov	eax, ds:ControlService
		call	eax ; ControlService
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_4030C2
		mov	[esp+28h+lpDatabaseName], offset DisplayName ; "OpenVPN	Service"
		mov	[esp+28h+lpMachineName], offset	aStoppingS_ ; "Stopping	%s."
		call	printf
		mov	[esp+28h+lpMachineName], 3E8h ;	dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4
		jmp	short loc_40306B
; ---------------------------------------------------------------------------

loc_403040:				; CODE XREF: sub_402F89+FCj
		mov	eax, ds:ServiceStatus.dwCurrentState
		cmp	eax, 3
		jnz	short loc_403069
		mov	[esp+28h+lpMachineName], 2Eh ; Ch
		call	putchar
		mov	[esp+28h+lpMachineName], 3E8h ;	dwMilliseconds
		mov	eax, ds:Sleep
		call	eax ; Sleep
		sub	esp, 4
		jmp	short loc_40306B
; ---------------------------------------------------------------------------

loc_403069:				; CODE XREF: sub_402F89+BFj
		jmp	short loc_403087
; ---------------------------------------------------------------------------

loc_40306B:				; CODE XREF: sub_402F89+B5j
					; sub_402F89+DEj
		mov	[esp+28h+lpDatabaseName], offset ServiceStatus ; lpServiceStatus
		mov	eax, [ebp+hService]
		mov	[esp+28h+lpMachineName], eax ; hService
		mov	eax, ds:QueryServiceStatus
		call	eax ; QueryServiceStatus
		sub	esp, 8
		test	eax, eax
		jnz	short loc_403040

loc_403087:				; CODE XREF: sub_402F89:loc_403069j
		mov	eax, ds:ServiceStatus.dwCurrentState
		cmp	eax, 1
		jnz	short loc_4030A7
		mov	[esp+28h+lpDatabaseName], offset DisplayName ; "OpenVPN	Service"
		mov	[esp+28h+lpMachineName], offset	aSStopped_ ; "\n%s stopped.\n"
		call	printf
		jmp	short loc_4030C2
; ---------------------------------------------------------------------------

loc_4030A7:				; CODE XREF: sub_402F89+106j
		mov	[esp+28h+lpDatabaseName], offset DisplayName ; "OpenVPN	Service"
		mov	[esp+28h+lpMachineName], offset	aSFailedToStop_	; "\n%s	failed to stop.\n"
		call	printf
		mov	[ebp+var_C], 1

loc_4030C2:				; CODE XREF: sub_402F89+8Aj
					; sub_402F89+11Cj
		mov	eax, [ebp+hService]
		mov	[esp+28h+lpMachineName], eax ; hService
		mov	eax, ds:DeleteService
		call	eax ; DeleteService
		sub	esp, 4
		test	eax, eax
		jz	short loc_4030EC
		mov	[esp+28h+lpDatabaseName], offset DisplayName ; "OpenVPN	Service"
		mov	[esp+28h+lpMachineName], offset	aSRemoved_ ; "%s removed.\n"
		call	printf
		jmp	short loc_403117
; ---------------------------------------------------------------------------

loc_4030EC:				; CODE XREF: sub_402F89+14Bj
		mov	[esp+28h+lpDatabaseName], 100h ; int
		mov	[esp+28h+lpMachineName], offset	Dest ; Dest
		call	sub_403220
		mov	[esp+28h+lpDatabaseName], eax
		mov	[esp+28h+lpMachineName], offset	aDeleteserviceF	; "DeleteService failed	- %s\n"
		call	printf
		mov	[ebp+var_C], 1

loc_403117:				; CODE XREF: sub_402F89+161j
		mov	eax, [ebp+hService]
		mov	[esp+28h+lpMachineName], eax ; hSCObject
		mov	eax, ds:CloseServiceHandle
		call	eax ; CloseServiceHandle
		sub	esp, 4
		jmp	short loc_403154
; ---------------------------------------------------------------------------

loc_403129:				; CODE XREF: sub_402F89+62j
		mov	[esp+28h+lpDatabaseName], 100h ; int
		mov	[esp+28h+lpMachineName], offset	Dest ; Dest
		call	sub_403220
		mov	[esp+28h+lpDatabaseName], eax
		mov	[esp+28h+lpMachineName], offset	aOpenserviceFai	; "OpenService failed -	%s\n"
		call	printf
		mov	[ebp+var_C], 1

loc_403154:				; CODE XREF: sub_402F89+19Ej
		mov	eax, [ebp+hSCManager]
		mov	[esp+28h+lpMachineName], eax ; hSCObject
		mov	eax, ds:CloseServiceHandle
		call	eax ; CloseServiceHandle
		sub	esp, 4
		jmp	short loc_403191
; ---------------------------------------------------------------------------

loc_403166:				; CODE XREF: sub_402F89+35j
		mov	[esp+28h+lpDatabaseName], 100h ; int
		mov	[esp+28h+lpMachineName], offset	Dest ; Dest
		call	sub_403220
		mov	[esp+28h+lpDatabaseName], eax
		mov	[esp+28h+lpMachineName], offset	aOpenscmanagerF	; "OpenSCManager failed	- %s\n"
		call	printf
		mov	[ebp+var_C], 1

loc_403191:				; CODE XREF: sub_402F89+1DBj
		mov	eax, [ebp+var_C]
		leave
		retn
sub_402F89	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403196	proc near		; CODE XREF: sub_4027DC+118p

Format		= dword	ptr -28h
Add		= dword	ptr -24h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_C], eax
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_10], eax
		mov	[esp+28h+Add], offset DisplayName ; "OpenVPN Service"
		mov	[esp+28h+Format], offset aDebuggingS_ ;	"Debugging %s.\n"
		call	printf
		mov	[esp+28h+Add], 1 ; Add
		mov	[esp+28h+Format], offset HandlerRoutine	; HandlerRoutine
		mov	eax, ds:SetConsoleCtrlHandler
		call	eax ; SetConsoleCtrlHandler
		sub	esp, 8
		mov	eax, [ebp+var_10]
		mov	[esp+28h+Add], eax
		mov	eax, [ebp+var_C]
		mov	[esp+28h+Format], eax
		call	sub_4018D0
		leave
		retn
sub_403196	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; BOOL __stdcall HandlerRoutine(DWORD CtrlType)
HandlerRoutine	proc near		; DATA XREF: sub_403196+2Eo

Format		= dword	ptr -18h
var_14		= dword	ptr -14h
CtrlType	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+CtrlType]
		cmp	eax, 1
		ja	short loc_403217
		mov	[esp+18h+var_14], offset DisplayName ; "OpenVPN	Service"
		mov	[esp+18h+Format], offset aStoppingS__0 ; "Stopping %s.\n"
		call	printf
		call	sub_4027B7
		mov	eax, 1
		jmp	short locret_40321C
; ---------------------------------------------------------------------------

loc_403217:				; CODE XREF: HandlerRoutine+Cj
		mov	eax, 0

locret_40321C:				; CODE XREF: HandlerRoutine+2Cj
		leave
		retn	4
HandlerRoutine	endp


; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; int __cdecl sub_403220(char *Dest, int)
sub_403220	proc near		; CODE XREF: sub_402C69+4Ap
					; sub_402C69+180p ...

dwFlags		= dword	ptr -38h
lpSource	= dword	ptr -34h
dwMessageId	= dword	ptr -30h
dwLanguageId	= dword	ptr -2Ch
lpBuffer	= dword	ptr -28h
nSize		= dword	ptr -24h
Arguments	= dword	ptr -20h
Buffer		= byte ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
Dest		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 34h
		mov	dword ptr [ebp+Buffer],	0
		mov	eax, ds:GetLastError
		call	eax ; GetLastError
		mov	[esp+38h+Arguments], 0 ; Arguments
		mov	[esp+38h+nSize], 0 ; nSize
		lea	edx, [ebp+Buffer]
		mov	[esp+38h+lpBuffer], edx	; lpBuffer
		mov	[esp+38h+dwLanguageId],	0 ; dwLanguageId
		mov	[esp+38h+dwMessageId], eax ; dwMessageId
		mov	[esp+38h+lpSource], 0 ;	lpSource
		mov	[esp+38h+dwFlags], 3100h ; dwFlags
		mov	eax, ds:FormatMessageA
		call	eax ; FormatMessageA
		sub	esp, 1Ch
		mov	[ebp+var_C], eax
		cmp	[ebp+var_C], 0
		jz	short loc_403287
		mov	eax, [ebp+arg_4]
		mov	edx, [ebp+var_C]
		add	edx, 0Eh
		cmp	eax, edx
		jge	short loc_40328F

loc_403287:				; CODE XREF: sub_403220+58j
		mov	eax, [ebp+Dest]
		mov	byte ptr [eax],	0
		jmp	short loc_4032D1
; ---------------------------------------------------------------------------

loc_40328F:				; CODE XREF: sub_403220+65j
		mov	ebx, dword ptr [ebp+Buffer]
		mov	eax, dword ptr [ebp+Buffer]
		mov	[esp+38h+dwFlags], eax ; lpString
		mov	eax, ds:lstrlenA
		call	eax ; lstrlenA
		sub	esp, 4
		sub	eax, 2
		add	eax, ebx
		mov	byte ptr [eax],	0
		mov	eax, ds:GetLastError
		call	eax ; GetLastError
		mov	edx, eax
		mov	eax, dword ptr [ebp+Buffer]
		mov	[esp+38h+dwLanguageId],	edx
		mov	[esp+38h+dwMessageId], eax
		mov	[esp+38h+lpSource], offset aS0xX ; "%s (0x%x)"
		mov	eax, [ebp+Dest]
		mov	[esp+38h+dwFlags], eax ; Dest
		call	sprintf

loc_4032D1:				; CODE XREF: sub_403220+6Dj
		mov	eax, dword ptr [ebp+Buffer]
		test	eax, eax
		jz	short loc_4032E8
		mov	eax, dword ptr [ebp+Buffer]
		mov	[esp+38h+dwFlags], eax ; hMem
		mov	eax, ds:LocalFree
		call	eax ; LocalFree
		sub	esp, 4

loc_4032E8:				; CODE XREF: sub_403220+B6j
		mov	eax, [ebp+Dest]
		mov	ebx, [ebp+var_4]
		leave
		retn
sub_403220	endp


; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_1
TlsCallback_1	proc near		; DATA XREF: .CRT:00409024o

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_4]
		test	eax, eax
		jz	short loc_403310
		cmp	eax, 3
		jz	short loc_403310
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_403310:				; CODE XREF: TlsCallback_1+9j
					; TlsCallback_1+Ej
		mov	edx, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_14], edx
		mov	[esp+1Ch+var_1C], eax
		call	sub_404010
		mov	eax, 1
		add	esp, 1Ch
		retn	0Ch
TlsCallback_1	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


		public TlsCallback_0
TlsCallback_0	proc near		; CODE XREF: sub_401180+101p
					; DATA XREF: .rdata:off_406774o ...

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  4
arg_4		= dword	ptr  8
arg_8		= dword	ptr  0Ch

		push	ebx
		sub	esp, 18h
		cmp	dword_405018, 2
		mov	eax, [esp+1Ch+arg_4]
		jz	short loc_40335B
		mov	dword_405018, 2

loc_40335B:				; CODE XREF: TlsCallback_0+Fj
		cmp	eax, 2
		jz	short loc_403371
		cmp	eax, 1
		jz	short loc_4033A0

loc_403365:				; CODE XREF: TlsCallback_0+3Cj
					; TlsCallback_0+7Cj
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------

loc_403371:				; CODE XREF: TlsCallback_0+1Ej
		mov	ebx, offset dword_409030
		cmp	ebx, offset dword_409030
		jz	short loc_403365
		xchg	ax, ax

loc_403380:				; CODE XREF: TlsCallback_0+51j
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_403388
		call	eax

loc_403388:				; CODE XREF: TlsCallback_0+44j
		add	ebx, 4
		cmp	ebx, offset dword_409030
		jnz	short loc_403380
		add	esp, 18h
		mov	eax, 1
		pop	ebx
		retn	0Ch
; ---------------------------------------------------------------------------
		align 10h

loc_4033A0:				; CODE XREF: TlsCallback_0+23j
		mov	eax, [esp+1Ch+arg_8]
		mov	[esp+1Ch+var_18], 1
		mov	[esp+1Ch+var_14], eax
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax
		call	sub_404010
		jmp	short loc_403365
TlsCallback_0	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4033D0	proc near		; DATA XREF: .CRT:00409014o
		mov	eax, ds:__lconv_init
		jmp	eax
sub_4033D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4033E0	proc near		; CODE XREF: sub_403400+Cp
					; sub_403400+32p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_4033E0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4033F0	proc near		; CODE XREF: sub_401010+59p
					; sub_403400+71p ...

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		retn
sub_4033F0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_403400(_onexit_t)
sub_403400	proc near		; CODE XREF: sub_4034C0+Ap

Func		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  4

		push	ebx
		sub	esp, 28h
		mov	eax, ds:dword_407524
		mov	[esp+2Ch+Func],	eax
		call	sub_4033E0
		cmp	eax, 0FFFFFFFFh
		mov	[esp+2Ch+var_14], eax
		jz	loc_4034A0
		mov	[esp+2Ch+Func],	8
		call	_lock
		mov	eax, ds:dword_407524
		mov	[esp+2Ch+Func],	eax
		call	sub_4033E0
		mov	[esp+2Ch+var_14], eax
		mov	eax, ds:dword_407520
		mov	[esp+2Ch+Func],	eax
		call	sub_4033E0
		mov	[esp+2Ch+var_10], eax
		lea	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+var_24], eax
		lea	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+var_28], eax
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax
		call	__dllonexit
		mov	ebx, eax
		mov	eax, [esp+2Ch+var_14]
		mov	[esp+2Ch+Func],	eax
		call	sub_4033F0
		mov	ds:dword_407524, eax
		mov	eax, [esp+2Ch+var_10]
		mov	[esp+2Ch+Func],	eax
		call	sub_4033F0
		mov	[esp+2Ch+Func],	8
		mov	ds:dword_407520, eax
		call	_unlock
		add	esp, 28h
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4034A0:				; CODE XREF: sub_403400+18j
		mov	eax, [esp+2Ch+arg_0]
		mov	[esp+2Ch+Func],	eax ; Func
		call	ds:_onexit
		add	esp, 28h
		pop	ebx
		retn
sub_403400	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_4034C0(_onexit_t)
sub_4034C0	proc near		; CODE XREF: sub_403D00-27p
					; sub_404540+12p

var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 1Ch
		mov	eax, [esp+1Ch+arg_0]
		mov	[esp+1Ch+var_1C], eax ;	_onexit_t
		call	sub_403400
		test	eax, eax
		setz	al
		add	esp, 1Ch
		movzx	eax, al
		neg	eax
		retn
sub_4034C0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

; LONG __stdcall TopLevelExceptionFilter(struct	_EXCEPTION_POINTERS *ExceptionInfo)
TopLevelExceptionFilter	proc near	; DATA XREF: sub_401180+10Bo

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
ExceptionInfo	= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+ExceptionInfo]
		mov	eax, [ebx]
		mov	eax, [eax]
		cmp	eax, 0C0000091h
		ja	short loc_403538
		cmp	eax, 0C000008Dh
		jnb	loc_4035A0
		cmp	eax, 0C0000005h
		jnz	loc_4035A7
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 0Bh
		call	signal
		cmp	eax, 1
		jz	loc_4035D6
		test	eax, eax
		jz	short loc_40354D
		mov	[esp+18h+var_18], 0Bh
		call	eax
		jmp	short loc_40358D
; ---------------------------------------------------------------------------

loc_403538:				; CODE XREF: TopLevelExceptionFilter+14j
		cmp	eax, 0C0000094h
		jz	short loc_403561
		cmp	eax, 0C0000096h
		jz	short loc_4035AE
		cmp	eax, 0C0000093h
		jz	short loc_4035A0

loc_40354D:				; CODE XREF: TopLevelExceptionFilter+4Bj
					; TopLevelExceptionFilter+A2j ...
		mov	eax, ds:dword_407050
		test	eax, eax
		jz	short loc_403592
		mov	[ebp+ExceptionInfo], ebx
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		jmp	eax
; ---------------------------------------------------------------------------

loc_403561:				; CODE XREF: TopLevelExceptionFilter+5Dj
		xor	esi, esi

loc_403563:				; CODE XREF: TopLevelExceptionFilter+C5j
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 8
		call	signal
		cmp	eax, 1
		jz	loc_403606
		test	eax, eax
		jz	short loc_40354D
		mov	[esp+18h+var_18], 8
		call	eax

loc_40358D:				; CODE XREF: TopLevelExceptionFilter+56j
					; TopLevelExceptionFilter+F4j ...
		mov	eax, 0FFFFFFFFh

loc_403592:				; CODE XREF: TopLevelExceptionFilter+74j
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	4
; ---------------------------------------------------------------------------
		align 10h

loc_4035A0:				; CODE XREF: TopLevelExceptionFilter+1Bj
					; TopLevelExceptionFilter+6Bj
		mov	esi, 1
		jmp	short loc_403563
; ---------------------------------------------------------------------------

loc_4035A7:				; CODE XREF: TopLevelExceptionFilter+26j
		cmp	eax, 0C000001Dh
		jnz	short loc_40354D

loc_4035AE:				; CODE XREF: TopLevelExceptionFilter+64j
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], 4
		call	signal
		cmp	eax, 1
		jz	short loc_4035F0
		test	eax, eax
		jz	short loc_40354D
		mov	[esp+18h+var_18], 4
		call	eax
		jmp	short loc_40358D
; ---------------------------------------------------------------------------

loc_4035D6:				; CODE XREF: TopLevelExceptionFilter+43j
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 0Bh
		call	signal
		jmp	short loc_40358D
; ---------------------------------------------------------------------------
		align 10h

loc_4035F0:				; CODE XREF: TopLevelExceptionFilter+E5j
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 4
		call	signal
		jmp	short loc_40358D
; ---------------------------------------------------------------------------

loc_403606:				; CODE XREF: TopLevelExceptionFilter+9Aj
		mov	[esp+18h+var_14], 1
		mov	[esp+18h+var_18], 8
		call	signal
		test	esi, esi
		jz	loc_40358D
		call	sub_403C70
		jmp	loc_40358D
TopLevelExceptionFilter	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403630	proc near		; CODE XREF: sub_401010+75p
		xor	eax, eax
		retn
sub_403630	endp

; ---------------------------------------------------------------------------
		align 10h
		sub	esp, 3Ch
		mov	eax, ds:dword_407054
		fld	qword ptr [esp+48h]
		fld	qword ptr [esp+50h]
		fld	qword ptr [esp+58h]
		test	eax, eax
		jz	short loc_403681
		fxch	st(2)
		mov	edx, [esp+40h]
		fstp	qword ptr [esp+18h]
		fstp	qword ptr [esp+20h]
		fstp	qword ptr [esp+28h]
		mov	[esp+10h], edx
		mov	edx, [esp+44h]
		mov	[esp+14h], edx
		lea	edx, [esp+10h]
		mov	[esp], edx
		call	eax ; dword_407054
		jmp	short loc_403687
; ---------------------------------------------------------------------------

loc_403681:				; CODE XREF: .text:00403656j
		fstp	st
		fstp	st
		fstp	st

loc_403687:				; CODE XREF: .text:0040367Fj
		add	esp, 3Ch
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403690	proc near		; CODE XREF: sub_401010+F7p

arg_0		= dword	ptr  4

		mov	eax, [esp+arg_0]
		mov	ds:dword_407054, eax
		jmp	__setusermatherr
sub_403690	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4036A0	proc near		; DATA XREF: sub_401010:loc_401100o

File		= dword	ptr -3Ch
Format		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= qword	ptr -2Ch
var_24		= qword	ptr -24h
var_1C		= qword	ptr -1Ch
arg_0		= dword	ptr  4

		sub	esp, 3Ch
		mov	eax, [esp+3Ch+arg_0]
		mov	edx, [eax]
		lea	ecx, [edx-1]
		mov	edx, offset aUnknownError ; "Unknown error"
		cmp	ecx, 5
		ja	short loc_4036BD
		mov	edx, ds:off_406894[ecx*4]

loc_4036BD:				; CODE XREF: sub_4036A0+14j
		fld	qword ptr [eax+18h]
		fld	qword ptr [eax+10h]
		fld	qword ptr [eax+8]
		fxch	st(2)
		mov	eax, [eax+4]
		fstp	[esp+3Ch+var_1C]
		fstp	[esp+3Ch+var_24]
		fstp	[esp+3Ch+var_2C]
		mov	[esp+3Ch+var_34], edx
		mov	[esp+3Ch+var_30], eax
		mov	eax, ds:_iob
		mov	[esp+3Ch+Format], offset a_matherrSInSGG ; "_matherr():	%s in %s(%g, %g)  (retval=%"...
		add	eax, 40h
		mov	[esp+3Ch+File],	eax ; File
		call	fprintf
		xor	eax, eax
		add	esp, 3Ch
		retn
sub_4036A0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: noreturn

; int __cdecl sub_403700(char *Format, char ArgList)
sub_403700	proc near		; CODE XREF: sub_403760+1E4p
					; sub_403760+212p ...

Str		= dword	ptr -1Ch
Size		= dword	ptr -18h
Count		= dword	ptr -14h
File		= dword	ptr -10h
Format		= dword	ptr  4
ArgList		= byte ptr  8

		push	ebx
		sub	esp, 18h
		mov	eax, ds:_iob
		mov	[esp+1Ch+Count], 1Bh ; Count
		lea	ebx, [esp+1Ch+ArgList]
		mov	[esp+1Ch+Size],	1 ; Size
		mov	[esp+1Ch+Str], offset aMingwW64Runtim ;	"Mingw-w64 runtime failure:\n"
		add	eax, 40h
		mov	[esp+1Ch+File],	eax ; File
		call	fwrite
		mov	eax, [esp+1Ch+Format]
		mov	[esp+1Ch+Count], ebx ; ArgList
		mov	[esp+1Ch+Size],	eax ; Format
		mov	eax, ds:_iob
		add	eax, 40h
		mov	[esp+1Ch+Str], eax ; File
		call	vfprintf
		call	abort
sub_403700	endp

; ---------------------------------------------------------------------------
		jmp	short sub_403760
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403760	proc near		; CODE XREF: .text:00403751j
					; sub_4039A0+140p ...

lpAddress	= dword	ptr -58h
lpBuffer	= dword	ptr -54h
dwLength	= dword	ptr -50h
lpflOldProtect	= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
Size		= dword	ptr -40h
Src		= dword	ptr -3Ch
flOldProtect	= dword	ptr -38h
Buffer		= _MEMORY_BASIC_INFORMATION ptr	-34h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, eax
		push	ebx
		sub	esp, 4Ch
		mov	[ebp+Size], ecx
		mov	ecx, ds:dword_40705C
		mov	[ebp+Src], edx
		test	ecx, ecx
		jle	loc_403950
		mov	edx, ds:dword_407060
		xor	ebx, ebx

loc_403787:				; CODE XREF: sub_403760+44j
		mov	eax, [edx+4]
		cmp	esi, eax
		jb	short loc_40379C
		mov	edi, [edx+8]
		add	eax, [edi+8]
		cmp	esi, eax
		jb	loc_403870

loc_40379C:				; CODE XREF: sub_403760+2Cj
		add	ebx, 1
		add	edx, 0Ch
		cmp	ebx, ecx
		jnz	short loc_403787

loc_4037A6:				; CODE XREF: sub_403760+1F2j
		mov	[esp+58h+lpAddress], esi
		call	sub_4041D0
		test	eax, eax
		mov	edi, eax
		jz	loc_403977
		lea	ecx, [ebx+ebx*2]
		shl	ecx, 2
		mov	ebx, ecx
		add	ebx, ds:dword_407060
		mov	[ebp+var_44], ecx
		mov	[ebx+8], eax
		mov	dword ptr [ebx], 0
		call	sub_4042C0
		mov	ecx, [ebp+var_44]
		lea	edx, [ebp+Buffer]
		mov	[ebp+var_44], edx
		add	eax, [edi+0Ch]
		mov	[ebp+var_48], ecx
		mov	[ebx+4], eax
		mov	eax, ds:dword_407060
		mov	ebx, ds:VirtualQuery
		mov	eax, [eax+ecx+4]
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualQuery
		mov	edx, [ebp+var_44]
		mov	ecx, [ebp+var_48]
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_403957
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jnz	loc_4038F4

loc_403826:				; CODE XREF: sub_403760+197j
					; sub_403760+1CDj
		add	ds:dword_40705C, 1

loc_40382D:				; CODE XREF: sub_403760+119j
		mov	[esp+58h+dwLength], 1Ch	; dwLength
		mov	[esp+58h+lpBuffer], edx	; lpBuffer
		mov	[esp+58h+lpAddress], esi ; lpAddress
		call	ebx ; VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_403987
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 4
		jnz	short loc_403880

loc_403851:				; CODE XREF: sub_403760+123j
		mov	eax, [ebp+Size]
		mov	[esp+58h+lpAddress], esi ; Dst
		mov	[esp+58h+dwLength], eax	; Size
		mov	eax, [ebp+Src]
		mov	[esp+58h+lpBuffer], eax	; Src
		call	memcpy

loc_403867:				; CODE XREF: sub_403760+168j
					; sub_403760+16Dj
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_403870:				; CODE XREF: sub_403760+36j
		lea	edx, [ebp+Buffer]
		mov	ebx, ds:VirtualQuery
		jmp	short loc_40382D
; ---------------------------------------------------------------------------
		align 10h

loc_403880:				; CODE XREF: sub_403760+EFj
		cmp	eax, 40h
		jz	short loc_403851
		mov	eax, [ebp+Buffer.RegionSize]
		lea	edi, [ebp+flOldProtect]
		mov	ebx, ds:VirtualProtect
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	[esp+58h+dwLength], 40h	; flNewProtect
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualProtect
		mov	eax, [ebp+Size]
		sub	esp, 10h
		mov	[esp+58h+dwLength], eax	; Size
		mov	eax, [ebp+Src]
		mov	[esp+58h+lpAddress], esi ; Dst
		mov	[esp+58h+lpBuffer], eax	; Src
		call	memcpy
		mov	eax, [ebp+Buffer.Protect]
		cmp	eax, 40h
		jz	short loc_403867
		cmp	eax, 4
		jz	short loc_403867
		mov	eax, [ebp+flOldProtect]
		mov	[esp+58h+lpflOldProtect], edi ;	lpflOldProtect
		mov	[esp+58h+dwLength], eax	; flNewProtect
		mov	eax, [ebp+Buffer.RegionSize]
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ebx ; VirtualProtect
		sub	esp, 10h
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_4038F4:				; CODE XREF: sub_403760+C0j
		cmp	eax, 40h
		jz	loc_403826
		mov	eax, [ebp+Buffer.RegionSize]
		add	ecx, ds:dword_407060
		mov	[ebp+var_44], edx
		mov	[esp+58h+dwLength], 40h	; flNewProtect
		mov	[esp+58h+lpBuffer], eax	; dwSize
		mov	eax, [ebp+Buffer.BaseAddress]
		mov	[esp+58h+lpflOldProtect], ecx ;	lpflOldProtect
		mov	[esp+58h+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		mov	edx, [ebp+var_44]
		sub	esp, 10h
		test	eax, eax
		jnz	loc_403826
		call	ds:GetLastError
		mov	[esp+58h+lpAddress], offset aVirtualprotect ; "	 VirtualProtect	failed with code 0x%x"
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_403700
; ---------------------------------------------------------------------------
		align 10h

loc_403950:				; CODE XREF: sub_403760+19j
		xor	ebx, ebx
		jmp	loc_4037A6
; ---------------------------------------------------------------------------

loc_403957:				; CODE XREF: sub_403760+B4j
		mov	eax, ds:dword_407060
		mov	eax, [eax+ecx+4]
		mov	[esp+58h+dwLength], eax
		mov	eax, [edi+8]
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+58h+lpBuffer], eax	; ArgList
		call	sub_403700
; ---------------------------------------------------------------------------

loc_403977:				; CODE XREF: sub_403760+52j
		mov	[esp+58h+lpBuffer], esi	; ArgList
		mov	[esp+58h+lpAddress], offset aAddressPHasNoI ; "Address %p has no image-section"
		call	sub_403700
; ---------------------------------------------------------------------------

loc_403987:				; CODE XREF: sub_403760+E3j
		mov	[esp+58h+dwLength], esi
		mov	[esp+58h+lpBuffer], 1Ch	; ArgList
		mov	[esp+58h+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		call	sub_403700
sub_403760	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4039A0	proc near		; CODE XREF: sub_401180:loc_401286p

lpAddress	= dword	ptr -5Ch
lpBuffer	= dword	ptr -58h
dwLength	= dword	ptr -54h
lpflOldProtect	= dword	ptr -50h
var_3D		= byte ptr -3Dh

		mov	eax, ds:dword_407058
		test	eax, eax
		jz	short loc_4039B0
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4039B0:				; CODE XREF: sub_4039A0+7j
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ds:dword_407058, 1
		call	sub_404220
		lea	eax, [eax+eax*2]
		lea	eax, ds:1Eh[eax*4]
		and	eax, 0FFFFFFF0h
		call	sub_4043F0
		mov	ds:dword_40705C, 0
		sub	esp, eax
		lea	eax, [esp+5Ch+var_3D]
		and	eax, 0FFFFFFF0h
		mov	ds:dword_407060, eax
		mov	eax, offset dword_406C0C
		sub	eax, offset dword_406BF4
		cmp	eax, 7
		jle	loc_403AA1
		cmp	eax, 0Bh
		jle	loc_403B73
		mov	eax, ds:dword_406BF4
		test	eax, eax
		jnz	loc_403AA9
		mov	eax, ds:dword_406BF8
		test	eax, eax
		jnz	loc_403AA9
		mov	edi, ds:dword_406BFC
		mov	ebx, offset dword_406C00
		test	edi, edi
		jz	loc_403B78
		mov	ebx, offset dword_406BF4

loc_403A40:				; CODE XREF: sub_4039A0+1E7j
		mov	eax, [ebx+8]
		cmp	eax, 1
		jnz	loc_403C60
		add	ebx, 0Ch
		cmp	ebx, offset dword_406C0C
		jnb	short loc_403AA1

loc_403A57:				; CODE XREF: sub_4039A0+236j
		mov	edx, [ebx]
		mov	edi, [ebx+4]
		mov	ecx, [edx+400000h]
		lea	eax, [edi+400000h]
		mov	[ebp-3Ch], ecx
		movzx	ecx, byte ptr [ebx+8]
		cmp	ecx, 10h
		jz	loc_403B92
		cmp	ecx, 20h
		jz	loc_403C16
		cmp	ecx, 8
		jz	loc_403BE1
		mov	[esp+5Ch+lpBuffer], ecx	; ArgList
		mov	[esp+5Ch+lpAddress], offset aUnknownPseudoR ; "	 Unknown pseudo	relocation bit size %d"...
		mov	dword ptr [ebp-34h], 0
		call	sub_403700
; ---------------------------------------------------------------------------

loc_403AA1:				; CODE XREF: sub_4039A0+5Fj
					; sub_4039A0+B5j ...
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_403AA9:				; CODE XREF: sub_4039A0+75j
					; sub_4039A0+82j
		mov	ebx, offset dword_406BF4

loc_403AAE:				; CODE XREF: sub_4039A0+1DCj
					; sub_4039A0+1EDj
		cmp	ebx, offset dword_406C0C
		jnb	short loc_403AA1
		lea	eax, [ebp-34h]
		mov	[ebp-3Ch], eax
		lea	esi, [esi+0]

loc_403AC0:				; CODE XREF: sub_4039A0+14Bj
		mov	edx, [ebx+4]
		mov	ecx, 4
		add	ebx, 8
		lea	eax, [edx+400000h]
		mov	edx, [edx+400000h]
		add	edx, [ebx-8]
		mov	[ebp-34h], edx
		mov	edx, [ebp-3Ch]
		call	sub_403760
		cmp	ebx, offset dword_406C0C
		jb	short loc_403AC0

loc_403AED:				; CODE XREF: sub_4039A0+23Cj
		mov	eax, ds:dword_40705C
		xor	ebx, ebx
		test	eax, eax
		jg	short loc_403B0B
		jmp	short loc_403AA1
; ---------------------------------------------------------------------------
		align 10h

loc_403B00:				; CODE XREF: sub_4039A0+180j
					; sub_4039A0+1D1j
		add	ebx, 1
		cmp	ebx, ds:dword_40705C
		jge	short loc_403AA1

loc_403B0B:				; CODE XREF: sub_4039A0+156j
		mov	eax, ds:dword_407060
		lea	esi, [ebx+ebx*2]
		lea	edi, ds:0[esi*4]
		add	eax, edi
		mov	edx, [eax]
		test	edx, edx
		jz	short loc_403B00
		mov	eax, [eax+4]
		mov	ecx, [ebp-3Ch]
		mov	[esp+5Ch+dwLength], 1Ch	; dwLength
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		mov	[esp+5Ch+lpBuffer], ecx	; lpBuffer
		call	ds:VirtualQuery
		sub	esp, 0Ch
		test	eax, eax
		jz	loc_403C3B
		mov	eax, ds:dword_407060
		lea	ecx, [ebp-38h]
		mov	eax, [eax+esi*4]
		mov	[esp+5Ch+lpflOldProtect], ecx ;	lpflOldProtect
		mov	[esp+5Ch+dwLength], eax	; flNewProtect
		mov	eax, [ebp-28h]
		mov	[esp+5Ch+lpBuffer], eax	; dwSize
		mov	eax, [ebp-34h]
		mov	[esp+5Ch+lpAddress], eax ; lpAddress
		call	ds:VirtualProtect
		sub	esp, 10h
		jmp	short loc_403B00
; ---------------------------------------------------------------------------

loc_403B73:				; CODE XREF: sub_4039A0+68j
		mov	ebx, offset dword_406BF4

loc_403B78:				; CODE XREF: sub_4039A0+95j
		mov	esi, [ebx]
		test	esi, esi
		jnz	loc_403AAE
		mov	ecx, [ebx+4]
		test	ecx, ecx
		jz	loc_403A40
		jmp	loc_403AAE
; ---------------------------------------------------------------------------

loc_403B92:				; CODE XREF: sub_4039A0+D2j
		movzx	ecx, word ptr [edi+400000h]
		movzx	edi, cx
		mov	esi, edi
		or	esi, 0FFFF0000h
		test	cx, cx
		cmovs	edi, esi
		mov	esi, [ebp-3Ch]
		sub	edi, edx
		lea	ecx, [ebp-34h]
		sub	edi, 400000h
		mov	[ebp-3Ch], ecx
		lea	edx, [ebp-34h]
		mov	ecx, 2
		add	esi, edi
		mov	[ebp-34h], esi
		call	sub_403760

loc_403BCD:				; CODE XREF: sub_4039A0+274j
					; sub_4039A0+299j
		add	ebx, 0Ch
		cmp	ebx, offset dword_406C0C
		jb	loc_403A57
		jmp	loc_403AED
; ---------------------------------------------------------------------------

loc_403BE1:				; CODE XREF: sub_4039A0+E4j
		movzx	ecx, byte ptr [eax]
		movzx	edi, cl
		mov	esi, edi
		or	esi, 0FFFFFF00h
		test	cl, cl
		cmovs	edi, esi
		mov	esi, [ebp-3Ch]
		mov	ecx, 1
		sub	edi, 400000h
		sub	edi, edx
		lea	edx, [ebp-34h]
		add	esi, edi
		mov	[ebp-34h], esi
		mov	[ebp-3Ch], edx
		call	sub_403760
		jmp	short loc_403BCD
; ---------------------------------------------------------------------------

loc_403C16:				; CODE XREF: sub_4039A0+DBj
		mov	esi, [ebp-3Ch]
		add	edx, 400000h
		lea	ecx, [ebp-34h]
		mov	[ebp-3Ch], ecx
		mov	ecx, 4
		sub	esi, edx
		add	esi, [eax]
		lea	edx, [ebp-34h]
		mov	[ebp-34h], esi
		call	sub_403760
		jmp	short loc_403BCD
; ---------------------------------------------------------------------------

loc_403C3B:				; CODE XREF: sub_4039A0+1A2j
		mov	ecx, ds:dword_407060
		add	ecx, edi
		mov	eax, [ecx+4]
		mov	[esp+5Ch+dwLength], eax
		mov	eax, [ecx+8]
		mov	eax, [eax+8]
		mov	[esp+5Ch+lpAddress], offset aVirtualqueryFa ; "	 VirtualQuery failed for %d bytes at a"...
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		call	sub_403700
; ---------------------------------------------------------------------------

loc_403C60:				; CODE XREF: sub_4039A0+A6j
		mov	[esp+5Ch+lpBuffer], eax	; ArgList
		mov	[esp+5Ch+lpAddress], offset aUnknownPseud_0 ; "	 Unknown pseudo	relocation protocol ve"...
		call	sub_403700
sub_4039A0	endp


; =============== S U B	R O U T	I N E =======================================


sub_403C70	proc near		; CODE XREF: sub_401180+12Cp
					; TopLevelExceptionFilter+142p
		fninit
		retn
sub_403C70	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


; int __cdecl sub_403C80()
sub_403C80	proc near		; DATA XREF: sub_403D00:loc_403CD2o
		mov	eax, off_405014
		mov	eax, [eax]
		test	eax, eax
		jz	short locret_403CAA
		sub	esp, 0Ch
		xchg	ax, ax

loc_403C90:				; CODE XREF: sub_403C80+25j
		call	eax
		mov	eax, off_405014
		lea	edx, [eax+4]
		mov	eax, [eax+4]
		mov	off_405014, edx
		test	eax, eax
		jnz	short loc_403C90
		add	esp, 0Ch

locret_403CAA:				; CODE XREF: sub_403C80+9j
		rep retn
sub_403C80	endp

; ---------------------------------------------------------------------------
		align 10h
; START	OF FUNCTION CHUNK FOR sub_403D00

loc_403CB0:				; CODE XREF: sub_403D00+1Aj
		push	ebx
		sub	esp, 18h
		mov	ebx, ds:dword_404560
		cmp	ebx, 0FFFFFFFFh
		jz	short loc_403CE3

loc_403CBF:				; CODE XREF: sub_403D00-9j
		test	ebx, ebx
		jz	short loc_403CD2

loc_403CC3:				; CODE XREF: sub_403D00-30j
		call	ds:dword_404560[ebx*4]
		sub	ebx, 1
		lea	esi, [esi+0]
		jnz	short loc_403CC3

loc_403CD2:				; CODE XREF: sub_403D00-3Fj
		mov	[esp+1Ch+var_1C], offset sub_403C80 ; _onexit_t
		call	sub_4034C0
		add	esp, 18h
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_403CE3:				; CODE XREF: sub_403D00-43j
		xor	ebx, ebx
		jmp	short loc_403CE9
; ---------------------------------------------------------------------------

loc_403CE7:				; CODE XREF: sub_403D00-Bj
		mov	ebx, eax

loc_403CE9:				; CODE XREF: sub_403D00-1Bj
		lea	eax, [ebx+1]
		mov	edx, ds:dword_404560[eax*4]
		test	edx, edx
		jnz	short loc_403CE7
		jmp	short loc_403CBF
; END OF FUNCTION CHUNK	FOR sub_403D00
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_403D00	proc near		; CODE XREF: sub_401180+22Dp
					; sub_4027DC+14p

var_1C		= dword	ptr -1Ch

; FUNCTION CHUNK AT 00403CB0 SIZE 00000049 BYTES

		mov	eax, ds:dword_407064
		test	eax, eax
		jz	short loc_403D10
		rep retn
; ---------------------------------------------------------------------------
		align 10h

loc_403D10:				; CODE XREF: sub_403D00+7j
		mov	ds:dword_407064, 1
		jmp	short loc_403CB0
sub_403D00	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403D20	proc near		; CODE XREF: .text:004014CDp start+Dp

lpSystemTimeAsFileTime=	dword ptr -38h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
SystemTimeAsFileTime= _FILETIME	ptr -28h
PerformanceCount= LARGE_INTEGER	ptr -20h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	eax, dword_405028
		mov	[ebp+SystemTimeAsFileTime.dwLowDateTime], 0
		mov	[ebp+SystemTimeAsFileTime.dwHighDateTime], 0
		cmp	eax, 0BB40E64Eh
		jz	short loc_403D52
		not	eax
		mov	dword_40502C, eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_403D52:				; CODE XREF: sub_403D20+21j
		lea	eax, [ebp+SystemTimeAsFileTime]
		mov	[esp+38h+lpSystemTimeAsFileTime], eax ;	lpSystemTimeAsFileTime
		call	ds:GetSystemTimeAsFileTime
		mov	esi, [ebp+SystemTimeAsFileTime.dwLowDateTime]
		mov	edi, [ebp+SystemTimeAsFileTime.dwHighDateTime]
		xor	esi, edi
		sub	esp, 4
		call	ds:GetCurrentProcessId
		mov	ebx, eax
		call	ds:GetCurrentThreadId
		mov	[ebp+var_2C], eax
		call	ds:GetTickCount
		mov	[ebp+var_30], eax
		lea	eax, [ebp+PerformanceCount]
		mov	[esp+38h+lpSystemTimeAsFileTime], eax ;	lpPerformanceCount
		call	ds:QueryPerformanceCounter
		xor	esi, dword ptr [ebp+PerformanceCount]
		xor	esi, dword ptr [ebp+PerformanceCount+4]
		xor	esi, ebx
		xor	esi, [ebp+var_2C]
		sub	esp, 4
		xor	esi, [ebp+var_30]
		cmp	esi, 0BB40E64Eh
		jz	short loc_403DC0
		mov	eax, esi
		not	eax

loc_403DAC:				; CODE XREF: sub_403D20+AAj
		mov	dword_405028, esi
		mov	dword_40502C, eax
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_403DC0:				; CODE XREF: sub_403D20+86j
		mov	eax, 44BF19B0h
		mov	esi, 0BB40E64Fh
		jmp	short loc_403DAC
sub_403D20	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		sub	esp, 28h
		mov	eax, [ebp+4]
		lea	edx, [ebp+4]
		mov	ds:dword_407144, edx
		mov	ds:dword_407360, 0C0000409h
		mov	ds:dword_407364, 1
		mov	ds:dword_407138, eax
		mov	ds:dword_40736C, eax
		mov	eax, [ebp+8]
		mov	dword ptr [esp], 0
		mov	ds:dword_40712C, eax
		mov	eax, dword_405028
		mov	[ebp-10h], eax
		mov	eax, dword_40502C
		mov	[ebp-0Ch], eax
		call	ds:SetUnhandledExceptionFilter
		sub	esp, 4
		mov	dword ptr [esp], offset	off_4069A4
		call	ds:UnhandledExceptionFilter
		sub	esp, 4
		call	ds:GetCurrentProcess
		mov	dword ptr [esp+4], 0C0000409h
		mov	[esp], eax
		call	ds:TerminateProcess
		sub	esp, 8
		call	abort
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_403E60	proc near		; CODE XREF: sub_404010:loc_404092p
					; sub_404010:loc_4040A0p

lpCriticalSection= dword ptr -28h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	[esp+28h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:EnterCriticalSection
		mov	edi, ds:dword_4073C0
		mov	esi, ds:GetLastError
		sub	esp, 4
		test	edi, edi
		jz	short loc_403EB9
		lea	esi, [esi+0]

loc_403E90:				; CODE XREF: sub_403E60+57j
		mov	eax, [edi]
		mov	[esp+28h+lpCriticalSection], eax ; dwTlsIndex
		call	ds:TlsGetValue
		sub	esp, 4
		mov	ebx, eax
		call	esi
		test	eax, eax
		jnz	short loc_403EB2
		test	ebx, ebx
		jz	short loc_403EB2
		mov	eax, [edi+4]
		mov	[esp+28h+lpCriticalSection], ebx
		call	eax

loc_403EB2:				; CODE XREF: sub_403E60+44j
					; sub_403E60+48j
		mov	edi, [edi+8]
		test	edi, edi
		jnz	short loc_403E90

loc_403EB9:				; CODE XREF: sub_403E60+27j
		mov	[esp+28h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		lea	esp, [ebp-0Ch]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_403E60	endp

; ---------------------------------------------------------------------------
		jmp	short loc_403EE0
; ---------------------------------------------------------------------------
		align 10h

loc_403EE0:				; CODE XREF: .text:00403ED1j
		push	ebp
		mov	ebp, esp
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 10h
		mov	eax, ds:dword_4073C4
		test	eax, eax
		jnz	short loc_403F00

loc_403EF3:				; CODE XREF: .text:00403F61j
		lea	esp, [ebp-8]
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_403F00:				; CODE XREF: .text:00403EF1j
		mov	dword ptr [esp+4], 0Ch
		mov	dword ptr [esp], 1
		call	calloc
		test	eax, eax
		mov	ebx, eax
		jz	short loc_403F5C
		mov	eax, [ebp+8]
		mov	dword ptr [esp], offset	CriticalSection
		mov	[ebx], eax
		mov	eax, [ebp+0Ch]
		mov	[ebx+4], eax
		call	ds:EnterCriticalSection
		mov	eax, ds:dword_4073C0
		mov	ds:dword_4073C0, ebx
		mov	[ebx+8], eax
		sub	esp, 4
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		mov	eax, esi
		sub	esp, 4
		lea	esp, [ebp-8]
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ---------------------------------------------------------------------------

loc_403F5C:				; CODE XREF: .text:00403F18j
		mov	esi, 0FFFFFFFFh
		jmp	short loc_403EF3
; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	eax, ds:dword_4073C4
		mov	ebx, [ebp+8]
		test	eax, eax
		jnz	short loc_403F90
		xor	eax, eax
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_403F90:				; CODE XREF: .text:00403F81j
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:EnterCriticalSection
		mov	edx, ds:dword_4073C0
		sub	esp, 4
		test	edx, edx
		jz	short loc_403FC1
		mov	eax, [edx]
		cmp	eax, ebx
		jnz	short loc_403FBA
		jmp	short loc_403FF8
; ---------------------------------------------------------------------------

loc_403FB2:				; CODE XREF: .text:00403FBFj
		mov	ecx, [eax]
		cmp	ecx, ebx
		jz	short loc_403FD8
		mov	edx, eax

loc_403FBA:				; CODE XREF: .text:00403FAEj
		mov	eax, [edx+8]
		test	eax, eax
		jnz	short loc_403FB2

loc_403FC1:				; CODE XREF: .text:00403FA8j
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4

loc_403FD1:				; CODE XREF: .text:00403FF6j
		xor	eax, eax
		mov	ebx, [ebp-4]
		leave
		retn
; ---------------------------------------------------------------------------

loc_403FD8:				; CODE XREF: .text:00403FB6j
		mov	ecx, [eax+8]
		mov	[edx+8], ecx

loc_403FDE:				; CODE XREF: .text:00404002j
		mov	[esp], eax
		call	free
		mov	dword ptr [esp], offset	CriticalSection
		call	ds:LeaveCriticalSection
		sub	esp, 4
		jmp	short loc_403FD1
; ---------------------------------------------------------------------------

loc_403FF8:				; CODE XREF: .text:00403FB0j
		mov	eax, [edx+8]
		mov	ds:dword_4073C0, eax
		mov	eax, edx
		jmp	short loc_403FDE
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404010	proc near		; CODE XREF: TlsCallback_1+33p
					; TlsCallback_0+77p

lpCriticalSection= dword ptr -18h
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_4]
		cmp	eax, 1
		jz	short loc_404064
		jb	short loc_404035
		cmp	eax, 3
		jnz	short loc_40402E
		mov	eax, ds:dword_4073C4
		test	eax, eax
		jnz	short loc_404092

loc_40402E:				; CODE XREF: sub_404010+13j
					; sub_404010+36j ...
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------

loc_404035:				; CODE XREF: sub_404010+Ej
		mov	eax, ds:dword_4073C4
		test	eax, eax
		jnz	short loc_4040A0

loc_40403E:				; CODE XREF: sub_404010+95j
		mov	eax, ds:dword_4073C4
		cmp	eax, 1
		jnz	short loc_40402E
		mov	ds:dword_4073C4, 0
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:DeleteCriticalSection
		sub	esp, 4
		jmp	short loc_40402E
; ---------------------------------------------------------------------------

loc_404064:				; CODE XREF: sub_404010+Cj
		mov	eax, ds:dword_4073C4
		test	eax, eax
		jz	short loc_404080

loc_40406D:				; CODE XREF: sub_404010+80j
		mov	ds:dword_4073C4, 1
		mov	eax, 1
		leave
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_404080:				; CODE XREF: sub_404010+5Bj
		mov	[esp+18h+lpCriticalSection], offset CriticalSection ; lpCriticalSection
		call	ds:InitializeCriticalSection
		sub	esp, 4
		jmp	short loc_40406D
; ---------------------------------------------------------------------------

loc_404092:				; CODE XREF: sub_404010+1Cj
		call	sub_403E60
		jmp	short loc_40402E
; ---------------------------------------------------------------------------
		align 10h

loc_4040A0:				; CODE XREF: sub_404010+2Cj
		call	sub_403E60
		jmp	short loc_40403E
sub_404010	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4040B0	proc near		; CODE XREF: .text:loc_4040E0j
					; .text:00404165p ...
		add	eax, [eax+3Ch]
		cmp	dword ptr [eax], 4550h
		jz	short loc_4040C0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4040C0:				; CODE XREF: sub_4040B0+9j
		cmp	word ptr [eax+18h], 10Bh
		setz	al
		movzx	eax, al
		retn
sub_4040B0	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		cmp	word ptr [eax],	5A4Dh
		jz	short loc_4040E0
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4040E0:				; CODE XREF: .text:004040D9j
		jmp	short sub_4040B0
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4040F0	proc near		; CODE XREF: sub_4041D0+3Ap
					; .text:00404325p ...

arg_0		= dword	ptr  4
arg_4		= dword	ptr  8

		push	esi
		push	ebx
		mov	edx, [esp+8+arg_0]
		mov	ebx, [esp+8+arg_4]
		add	edx, [edx+3Ch]
		movzx	esi, word ptr [edx+6]
		movzx	eax, word ptr [edx+14h]
		test	esi, esi
		lea	eax, [edx+eax+18h]
		jz	short loc_404128
		xor	edx, edx
		nop

loc_404110:				; CODE XREF: sub_4040F0+36j
		mov	ecx, [eax+0Ch]
		cmp	ecx, ebx
		ja	short loc_40411E
		add	ecx, [eax+8]
		cmp	ebx, ecx
		jb	short loc_40412A

loc_40411E:				; CODE XREF: sub_4040F0+25j
		add	edx, 1
		add	eax, 28h
		cmp	edx, esi
		jb	short loc_404110

loc_404128:				; CODE XREF: sub_4040F0+1Bj
		xor	eax, eax

loc_40412A:				; CODE XREF: sub_4040F0+2Cj
		pop	ebx
		pop	esi
		retn
sub_4040F0	endp

; ---------------------------------------------------------------------------
		align 10h
		push	ebp
		push	edi
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [esp+30h]
		mov	[esp], edi
		call	strlen
		cmp	eax, 8
		ja	short loc_404155
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_404160

loc_404155:				; CODE XREF: .text:00404148j
					; .text:0040416Cj ...
		add	esp, 1Ch
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_404160:				; CODE XREF: .text:00404153j
		mov	eax, 400000h
		call	sub_4040B0
		test	eax, eax
		jz	short loc_404155
		mov	eax, ds:40003Ch
		lea	edx, [eax+400000h]
		movzx	eax, word ptr [eax+400014h]
		movzx	ebp, word ptr [edx+6]
		lea	ebx, [edx+eax+18h]
		test	ebp, ebp
		jnz	short loc_40419A
		jmp	short loc_404155
; ---------------------------------------------------------------------------
		align 10h

loc_404190:				; CODE XREF: .text:004041B0j
		add	esi, 1
		add	ebx, 28h
		cmp	esi, ebp
		jnb	short loc_4041C0

loc_40419A:				; CODE XREF: .text:0040418Aj
		mov	dword ptr [esp+8], 8
		mov	[esp+4], edi
		mov	[esp], ebx
		call	strncmp
		test	eax, eax
		jnz	short loc_404190
		add	esp, 1Ch
		mov	esi, ebx
		mov	eax, esi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4041C0:				; CODE XREF: .text:00404198j
		add	esp, 1Ch
		xor	esi, esi
		pop	ebx
		mov	eax, esi
		pop	esi
		pop	edi
		pop	ebp
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4041D0	proc near		; CODE XREF: sub_403760+49p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  4

		push	ebx
		xor	ebx, ebx
		sub	esp, 8
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_4041E8

loc_4041E1:				; CODE XREF: sub_4041D0+24j
		add	esp, 8
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_4041E8:				; CODE XREF: sub_4041D0+Fj
		mov	eax, 400000h
		call	sub_4040B0
		test	eax, eax
		jz	short loc_4041E1
		mov	eax, [esp+0Ch+arg_0]
		mov	[esp+0Ch+var_C], 400000h
		sub	eax, 400000h
		mov	[esp+0Ch+var_8], eax
		call	sub_4040F0
		add	esp, 8
		mov	ebx, eax
		mov	eax, ebx
		pop	ebx
		retn
sub_4041D0	endp

; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_404220	proc near		; CODE XREF: sub_4039A0+23p
		push	ebx
		xor	ebx, ebx
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_404232

loc_40422E:				; CODE XREF: sub_404220+1Ej
		mov	eax, ebx
		pop	ebx
		retn
; ---------------------------------------------------------------------------

loc_404232:				; CODE XREF: sub_404220+Cj
		mov	eax, 400000h
		call	sub_4040B0
		test	eax, eax
		jz	short loc_40422E
		mov	eax, ds:40003Ch
		movzx	ebx, word ptr [eax+400006h]
		mov	eax, ebx
		pop	ebx
		retn
sub_404220	endp

; ---------------------------------------------------------------------------
		push	esi
		xor	esi, esi
		cmp	word ptr ds:400000h, 5A4Dh
		push	ebx
		mov	ebx, [esp+0Ch]
		jz	short loc_404268

loc_404263:				; CODE XREF: .text:00404274j
					; .text:00404292j
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_404268:				; CODE XREF: .text:00404261j
		mov	eax, 400000h
		call	sub_4040B0
		test	eax, eax
		jz	short loc_404263
		mov	eax, ds:40003Ch
		lea	ecx, [eax+400000h]
		movzx	eax, word ptr [eax+400014h]
		lea	edx, [ecx+eax+18h]
		movzx	ecx, word ptr [ecx+6]
		test	ecx, ecx
		jz	short loc_404263
		xor	eax, eax

loc_404296:				; CODE XREF: .text:004042ABj
		test	byte ptr [edx+27h], 20h
		jz	short loc_4042A3
		test	ebx, ebx
		jz	short loc_4042B4
		sub	ebx, 1

loc_4042A3:				; CODE XREF: .text:0040429Aj
		add	eax, 1
		add	edx, 28h
		cmp	eax, ecx
		jb	short loc_404296
		xor	esi, esi
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------

loc_4042B4:				; CODE XREF: .text:0040429Ej
		mov	esi, edx
		mov	eax, esi
		pop	ebx
		pop	esi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4042C0	proc near		; CODE XREF: sub_403760+72p
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_4042D0

loc_4042CB:				; CODE XREF: sub_4042C0+1Cj
		xor	eax, eax
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4042D0:				; CODE XREF: sub_4042C0+9j
		mov	eax, 400000h
		call	sub_4040B0
		test	eax, eax
		jz	short loc_4042CB
		mov	eax, 400000h
		retn
sub_4042C0	endp

; ---------------------------------------------------------------------------
		align 10h
		xor	eax, eax
		cmp	word ptr ds:400000h, 5A4Dh
		jz	short loc_404300
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_404300:				; CODE XREF: .text:004042FBj
		sub	esp, 8
		mov	eax, 400000h
		call	sub_4040B0
		test	eax, eax
		jz	short loc_404336
		mov	eax, [esp+0Ch]
		mov	dword ptr [esp], 400000h
		sub	eax, 400000h
		mov	[esp+4], eax
		call	sub_4040F0
		test	eax, eax
		jz	short loc_404340
		mov	eax, [eax+24h]
		not	eax
		shr	eax, 1Fh

loc_404336:				; CODE XREF: .text:0040430Fj
					; .text:00404342j
		add	esp, 8
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_404340:				; CODE XREF: .text:0040432Cj
		xor	eax, eax
		jmp	short loc_404336
; ---------------------------------------------------------------------------
		align 10h
		push	edi
		xor	edi, edi
		push	esi
		push	ebx
		sub	esp, 8
		cmp	word ptr ds:400000h, 5A4Dh
		mov	ebx, [esp+18h]
		jz	short loc_404370

loc_404367:				; CODE XREF: .text:0040437Cj
					; .text:0040438Bj ...
		add	esp, 8
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------

loc_404370:				; CODE XREF: .text:00404365j
		mov	eax, 400000h
		call	sub_4040B0
		test	eax, eax
		jz	short loc_404367
		mov	eax, ds:40003Ch
		mov	esi, [eax+400080h]
		test	esi, esi
		jz	short loc_404367
		mov	[esp+4], esi
		mov	dword ptr [esp], 400000h
		call	sub_4040F0
		test	eax, eax
		jz	short loc_404367
		add	esi, 400000h
		mov	edx, esi
		jnz	short loc_4043B6
		jmp	short loc_404367
; ---------------------------------------------------------------------------
		align 10h

loc_4043B0:				; CODE XREF: .text:004043C6j
		sub	ebx, 1
		add	edx, 14h

loc_4043B6:				; CODE XREF: .text:004043A9j
		mov	ecx, [edx+4]
		test	ecx, ecx
		jnz	short loc_4043C4
		mov	eax, [edx+0Ch]
		test	eax, eax
		jz	short loc_4043E0

loc_4043C4:				; CODE XREF: .text:004043BBj
		test	ebx, ebx
		jg	short loc_4043B0
		mov	edi, [edx+0Ch]
		add	esp, 8
		pop	ebx
		pop	esi
		add	edi, 400000h
		mov	eax, edi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

loc_4043E0:				; CODE XREF: .text:004043C2j
		add	esp, 8
		xor	edi, edi
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		retn
; ---------------------------------------------------------------------------
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_4043F0	proc near		; CODE XREF: sub_401180+19p
					; sub_4039A0+35p

arg_0		= byte ptr  4

		push	ecx
		push	eax
		cmp	eax, 1000h
		lea	ecx, [esp+8+arg_0]
		jb	short loc_404412

loc_4043FD:				; CODE XREF: sub_4043F0+20j
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		cmp	eax, 1000h
		ja	short loc_4043FD

loc_404412:				; CODE XREF: sub_4043F0+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		pop	eax
		pop	ecx
		retn
sub_4043F0	endp

; ---------------------------------------------------------------------------
		align 10h
; [00000005 BYTES: COLLAPSED FUNCTION j__vsnprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __set_app_type]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __getmainargs]
		align 10h

; =============== S U B	R O U T	I N E =======================================


sub_404440	proc near		; DATA XREF: .data:00405020o
		mov	eax, ds:dword_4073E4
		retn
sub_404440	endp

; ---------------------------------------------------------------------------
		align 10h
		mov	eax, [esp+4]
		xchg	eax, ds:dword_4073E4
		retn
; ---------------------------------------------------------------------------
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strlen]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _cexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _amsg_exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION _initterm]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION memset]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcpy]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strcat]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION puts]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sprintf]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION putchar]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _lock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __dllonexit]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _unlock]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION signal]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __setusermatherr]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _vsnprintf]
		align 10h

; =============== S U B	R O U T	I N E =======================================

; Attributes: bp-based frame

sub_404540	proc near		; DATA XREF: .text:00404564o

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	sub_401500
		mov	[esp+18h+var_18], offset sub_401550 ; _onexit_t
		call	sub_4034C0
		leave
		retn
sub_404540	endp

; ---------------------------------------------------------------------------
		align 10h
dword_404560	dd 0FFFFFFFFh		; DATA XREF: sub_403D00-4Cr
					; sub_403D00:loc_403CC3r ...
		dd offset sub_404540
		dd 0
		dd 0FFFFFFFFh
dword_404570	dd 24h dup(0)		; DATA XREF: .data:off_405014o
		dd 280h	dup(?)
_text		ends

; Section 2. (virtual address 00005000)
; Virtual size			: 00000034 (	 52.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00003A00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	dword public 'DATA' use32
		assume cs:_data
		;org 405000h
dword_405000	dd 0Ah			; DATA XREF: sub_401180+1A3w
dword_405004	dd 1			; DATA XREF: sub_402A9F:loc_402B05r
					; sub_402A9F+6Ew
		dd 0FFh, 2 dup(0FFFFFFFFh)
off_405014	dd offset dword_404570	; DATA XREF: sub_403C80r
					; sub_403C80+12r ...
dword_405018	dd 2			; DATA XREF: TlsCallback_0+4r
					; TlsCallback_0+11w
dword_40501C	dd 0FFFFFFFFh		; DATA XREF: sub_401010+7Ar
		dd offset sub_404440
; ---------------------------------------------------------------------------

loc_405024:				; CODE XREF: sub_401180+127p
		push	eax
		inc	esp
		inc	eax
; ---------------------------------------------------------------------------
		db 0
dword_405028	dd 0BB40E64Eh		; DATA XREF: sub_403D20+9r
					; sub_403D20:loc_403DACw ...
dword_40502C	dd 44BF19B1h		; DATA XREF: sub_403D20+25w
					; sub_403D20+92w ...
dword_405030	dd 0			; DATA XREF: sub_401500r
					; sub_401500+42o
		align 1000h
_data		ends

; Section 3. (virtual address 00006000)
; Virtual size			: 00000C0C (   3084.)
; Section size in file		: 00000E00 (   3584.)
; Offset to raw	data for section: 00003C00
; Flags	40600040: Data Readable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read
; Segment alignment '32byte' can not be represented in assembly
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 406000h
; CHAR ModuleName[]
ModuleName	db 'libgcj-13.dll',0    ; DATA XREF: sub_401500+Fo
; CHAR ProcName[]
ProcName	db '_Jv_RegisterClasses',0 ; DATA XREF: sub_401500+28o
		align 20h
; char aReportstatusto[]
aReportstatusto	db 'ReportStatusToSCMgr #1 failed',0 ; DATA XREF: sub_4018D0+2Eo
; CHAR aOpenvpn_exit_1[]
aOpenvpn_exit_1	db 'openvpn_exit_1',0   ; DATA XREF: sub_4018D0+7Fo
					; sub_4018D0+A6Eo
; char aCreateeventFai[]
aCreateeventFai	db 'CreateEvent failed',0 ; DATA XREF: sub_4018D0+99o
; char aExitEventIsAlr[]
aExitEventIsAlr	db 'Exit event is already signaled -- we were not shut down properly',0
					; DATA XREF: sub_4018D0+F3o
; char aReportstatus_0[]
aReportstatus_0	db 'ReportStatusToSCMgr #2 failed',0 ; DATA XREF: sub_4018D0+14Co
; CHAR SubKey[]
SubKey		db 'SOFTWARE\OpenVPN',0 ; DATA XREF: sub_4018D0+19Fo
; char aRegistryKeyHkl[]
aRegistryKeyHkl	db 'Registry key HKLM\SOFTWARE\OpenVPN not found',0
					; DATA XREF: sub_4018D0+1D1o
; CHAR ValueName[]
ValueName	db 'exe_path',0         ; DATA XREF: sub_4018D0+240o
					; sub_4018D0+279o
; CHAR aConfig_dir[]
aConfig_dir	db 'config_dir',0       ; DATA XREF: sub_4018D0+303o
					; sub_4018D0+33Co
; CHAR aConfig_ext[]
aConfig_ext	db 'config_ext',0       ; DATA XREF: sub_4018D0+3C6o
					; sub_4018D0+3FFo
; CHAR aLog_dir[]
aLog_dir	db 'log_dir',0          ; DATA XREF: sub_4018D0+489o
					; sub_4018D0+4C2o
; CHAR aPriority[]
aPriority	db 'priority',0         ; DATA XREF: sub_4018D0+54Co
					; sub_4018D0+585o
; CHAR aLog_append[]
aLog_append	db 'log_append',0       ; DATA XREF: sub_4018D0+60Fo
					; sub_4018D0+648o
; char Str2[]
Str2		db 'IDLE_PRIORITY_CLASS',0 ; DATA XREF: sub_4018D0+6B7o
; char aBelow_normal_p[]
aBelow_normal_p	db 'BELOW_NORMAL_PRIORITY_CLASS',0 ; DATA XREF: sub_4018D0:loc_401FAFo
; char aNormal_priorit[]
aNormal_priorit	db 'NORMAL_PRIORITY_CLASS',0 ; DATA XREF: sub_4018D0:loc_401FD7o
; char aAbove_normal_p[]
aAbove_normal_p	db 'ABOVE_NORMAL_PRIORITY_CLASS',0 ; DATA XREF: sub_4018D0:loc_401FFFo
; char aHigh_priority_[]
aHigh_priority_	db 'HIGH_PRIORITY_CLASS',0 ; DATA XREF: sub_4018D0:loc_402024o
; char aUnknownPriorit[]
aUnknownPriorit	db 'Unknown priority name: %s',0 ; DATA XREF: sub_4018D0+783o
; char aLogFileAppendF[]
aLogFileAppendF	db 'Log file append flag (given as ',27h,'%s',27h,') must be ',27h,'0',27h,' or ',27h
					; DATA XREF: sub_4018D0+7F5o
		db '1',27h,0
; char aS[]
aS		db '%s\*',0             ; DATA XREF: sub_4018D0+838o
		align 4
; char aCannotGetConfi[]
aCannotGetConfi	db 'Cannot get configuration file list using: %s',0
					; DATA XREF: sub_4018D0+886o
; char aReportstatus_1[]
aReportstatus_1	db 'ReportStatusToSCMgr #3 failed',0 ; DATA XREF: sub_4018D0+940o
; char aLog[]
aLog		db 'log',0              ; DATA XREF: sub_4018D0+9AAo
		align 4
; char aCannotConstruc[]
aCannotConstruc	db 'Cannot construct logfile name based on: %s',0
					; DATA XREF: sub_4018D0+9E6o
; char aSS[]
aSS		db '%s\%s',0            ; DATA XREF: sub_4018D0+A43o
		align 4
; char aOpenvpnService[]
aOpenvpnService	db 'openvpn --service %s 1 --config "%s"',0 ; DATA XREF: sub_4018D0+A76o
		align 4
; char aInitializesecu[]
aInitializesecu	db 'InitializeSecurityDescriptor start_openvpn failed',0
					; DATA XREF: sub_4018D0+AA6o
; char aCannotOpenLogf[]
aCannotOpenLogf	db 'Cannot open logfile: %s',0 ; DATA XREF: sub_4018D0+B45o
		align 10h
; char aCannotSeekToEn[]
aCannotSeekToEn	db 'Cannot seek to end of logfile: %s',0 ; DATA XREF: sub_4018D0+BCFo
		align 4
; char aCreateprocessF[]
aCreateprocessF	db 'CreateProcess failed, exe=',27h,'%s',27h,' cmdline=',27h,'%s',27h,' dir=',27h,'%'
					; DATA XREF: sub_4018D0+CFDo
		db 's',27h,0
; char aClosehandleFai[]
aClosehandleFai	db 'CloseHandle failed',0 ; DATA XREF: sub_4018D0:loc_402679o
; char aReportstatus_2[]
aReportstatus_2	db 'ReportStatusToSCMgr SERVICE_RUNNING failed',0
					; DATA XREF: sub_4018D0+E3Do
		align 4
; char aWaitForShutdow[]
aWaitForShutdow	db 'wait for shutdown signal failed',0 ; DATA XREF: sub_4018D0+E91o
		align 10h
; char aErrorQueryingR[]
aErrorQueryingR	db 'Error querying registry key of type REG_SZ: HKLM\SOFTWARE\OpenVPN'
					; DATA XREF: sub_4018D0+281o
					; sub_4018D0+344o ...
		db '\%s',0
		align 20h
aErrorQueryin_0	db 'Error querying registry key of type REG_DWORD: HKLM\SOFTWARE\Open'
		db 'VPN\%s',0
		align 20h
; CHAR ServiceName[]
ServiceName	db 'OpenVPNService',0   ; DATA XREF: sub_4027DC+19o
					; sub_4029A3+Eo ...
; char Str1[]
Str1		db 'install',0          ; DATA XREF: sub_4027DC+6Fo
; char aRemove[]
aRemove		db 'remove',0           ; DATA XREF: sub_4027DC+9Ao
; char aStart[]
aStart		db 'start',0            ; DATA XREF: sub_4027DC+C5o
; char aDebug[]
aDebug		db 'debug',0            ; DATA XREF: sub_4027DC+F0o
aOpenvpnserv	db 'openvpnserv',0      ; DATA XREF: sub_4027DC:loc_402904o
					; sub_4027DC+13Co ...
		align 4
; char Format[]
Format		db '%s -install          to install the service',0Ah,0
					; DATA XREF: sub_4027DC+130o
		align 4
; char aSStartToStartT[]
aSStartToStartT	db '%s -start',9,9,9,' to start the service',0Ah,0
					; DATA XREF: sub_4027DC+144o
		align 4
; char aSRemoveToRemov[]
aSRemoveToRemov	db '%s -remove           to remove the service',0Ah,0
					; DATA XREF: sub_4027DC+158o
; char aSDebugParamsTo[]
aSDebugParamsTo	db '%s -debug <params>   to run as a console app for debugging',0Ah,0
					; DATA XREF: sub_4027DC+16Co
; char Str[]
Str		db 0Ah			; DATA XREF: sub_4027DC+178o
		db 'StartServiceCtrlDispatcher being called.',0
		align 10h
; char aThisMayTakeSev[]
aThisMayTakeSev	db 'This may take several seconds.  Please wait.',0
					; DATA XREF: sub_4027DC+184o
		align 10h
aStartservice_0	db 'StartServiceCtrlDispatcher failed.',0 ; DATA XREF: sub_4027DC+1A4o
aSetservicestat	db 'SetServiceStatus',0 ; DATA XREF: sub_402A9F+9Co
; char aSErrorD[]
aSErrorD	db '%s error: %d',0     ; DATA XREF: sub_402B54+65o
; CHAR DisplayName[]
DisplayName	db 'OpenVPN Service',0  ; DATA XREF: sub_402C69+53o
					; sub_402C69+122o ...
; char aUnableToInstal[]
aUnableToInstal	db 'Unable to install %s - %s',0Ah,0 ; DATA XREF: sub_402C69+5Bo
; CHAR Dependencies[]
Dependencies	db 'tap0901',0          ; DATA XREF: sub_402C69+E0o
aDhcp		db 'Dhcp',0
		db 2 dup(0)
; char aSInstalled_[]
aSInstalled_	db '%s installed.',0Ah,0 ; DATA XREF: sub_402C69+153o
; char aCreateserviceF[]
aCreateserviceF	db 'CreateService failed - %s',0Ah,0 ; DATA XREF: sub_402C69+189o
; char aOpenscmanagerF[]
aOpenscmanagerF	db 'OpenSCManager failed - %s',0Ah,0 ; DATA XREF: sub_402C69+1C6o
					; sub_402E4A+4Fo ...
; char aOpenserviceFai[]
aOpenserviceFai	db 'OpenService failed - %s',0Ah,0 ; DATA XREF: sub_402E4A+A3o
					; sub_402F89+1B8o
; char aStartserviceFa[]
aStartserviceFa	db 'StartService failed - %s',0Ah,0 ; DATA XREF: sub_402E4A+F2o
; char aServiceStarted[]
aServiceStarted	db 'Service Started',0  ; DATA XREF: sub_402E4A:loc_402F51o
; char aStoppingS_[]
aStoppingS_	db 'Stopping %s.',0     ; DATA XREF: sub_402F89+98o
; char aSStopped_[]
aSStopped_	db 0Ah			; DATA XREF: sub_402F89+110o
		db '%s stopped.',0Ah,0
; char aSFailedToStop_[]
aSFailedToStop_	db 0Ah			; DATA XREF: sub_402F89+126o
		db '%s failed to stop.',0Ah,0
; char aSRemoved_[]
aSRemoved_	db '%s removed.',0Ah,0  ; DATA XREF: sub_402F89+155o
; char aDeleteserviceF[]
aDeleteserviceF	db 'DeleteService failed - %s',0Ah,0 ; DATA XREF: sub_402F89+17Bo
; char aDebuggingS_[]
aDebuggingS_	db 'Debugging %s.',0Ah,0 ; DATA XREF: sub_403196+1Ao
; char aStoppingS__0[]
aStoppingS__0	db 'Stopping %s.',0Ah,0 ; DATA XREF: HandlerRoutine+16o
; char aS0xX[]
aS0xX		db '%s (0x%x)',0        ; DATA XREF: sub_403220+9Eo
		align 4
off_406774	dd offset TlsCallback_0	; DATA XREF: sub_401180:loc_401261r
aUnknownError	db 'Unknown error',0    ; DATA XREF: sub_4036A0+Co
		align 4
; char a_matherrSInSGG[]
a_matherrSInSGG	db '_matherr(): %s in %s(%g, %g)  (retval=%g)',0Ah,0
					; DATA XREF: sub_4036A0+44o
		align 4
aArgumentDomain	db 'Argument domain error (DOMAIN)',0 ; DATA XREF: .rdata:off_406894o
aArgumentSingul	db 'Argument singularity (SIGN)',0 ; DATA XREF: .rdata:00406898o
		align 10h
aOverflowRangeE	db 'Overflow range error (OVERFLOW)',0 ; DATA XREF: .rdata:0040689Co
aTheResultIsToo	db 'The result is too small to be represented (UNDERFLOW)',0
					; DATA XREF: .rdata:004068A0o
		align 4
aTotalLossOfSig	db 'Total loss of significance (TLOSS)',0 ; DATA XREF: .rdata:004068A4o
		align 4
aPartialLossOfS	db 'Partial loss of significance (PLOSS)',0 ; DATA XREF: .rdata:004068A8o
		align 4
off_406894	dd offset aArgumentDomain ; DATA XREF: sub_4036A0+16r
					; "Argument domain error (DOMAIN)"
		dd offset aArgumentSingul ; "Argument singularity (SIGN)"
		dd offset aOverflowRangeE ; "Overflow range error (OVERFLOW)"
		dd offset aTheResultIsToo ; "The result	is too small to	be represent"...
		dd offset aTotalLossOfSig ; "Total loss	of significance	(TLOSS)"
		dd offset aPartialLossOfS ; "Partial loss of significance (PLOSS)"
aMingwW64Runtim	db 'Mingw-w64 runtime failure:',0Ah,0 ; DATA XREF: sub_403700+1Do
; char aAddressPHasNoI[]
aAddressPHasNoI	db 'Address %p has no image-section',0 ; DATA XREF: sub_403760+21Bo
; char aVirtualqueryFa[]
aVirtualqueryFa	db '  VirtualQuery failed for %d bytes at address %p',0
					; DATA XREF: sub_403760+207o
					; sub_403760+233o ...
		align 4
; char aVirtualprotect[]
aVirtualprotect	db '  VirtualProtect failed with code 0x%x',0 ; DATA XREF: sub_403760+1D9o
		align 4
; char aUnknownPseud_0[]
aUnknownPseud_0	db '  Unknown pseudo relocation protocol version %d.',0Ah,0
					; DATA XREF: sub_4039A0+2C4o
		align 4
; char aUnknownPseudoR[]
aUnknownPseudoR	db '  Unknown pseudo relocation bit size %d.',0Ah,0
					; DATA XREF: sub_4039A0+EEo
		align 4
off_4069A4	dd offset dword_407360	; DATA XREF: .text:00403E28o
		dd offset dword_407080
aX1GccGnu4_8_2	db 'X1ȰGCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_0	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_1	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_2	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_3	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_4	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_5	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_6	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_7	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_8	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_9	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_10	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_11	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_12	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_13	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_14	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_15	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_16	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_17	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_18	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_19	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_20	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_21	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_22	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_23	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_24	db 'GCC: (GNU) 4.8.2',0
		align 4
aGccGnu4_8_2_25	db 'GCC: (GNU) 4.8.2',0
		align 10h
aGccGnu4_8_2_26	db 'GCC: (GNU) 4.8.2',0
		align 4
dword_406BF4	dd 0			; DATA XREF: sub_4039A0+57o
					; sub_4039A0+6Er ...
dword_406BF8	dd 0			; DATA XREF: sub_4039A0+7Br
dword_406BFC	dd 1			; DATA XREF: sub_4039A0+88r
dword_406C00	dd 5024h, 12A8h, 20h	; DATA XREF: sub_4039A0+8Eo
dword_406C0C	dd 7Dh dup(0)		; DATA XREF: sub_4039A0+52o
					; sub_4039A0+AFo ...
		align 400h
_rdata		ends

; Section 4. (virtual address 00007000)
; Virtual size			: 00000540 (   1344.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0600080: Bss Readable Writable
; Alignment	: 32 bytes
; ===========================================================================

; Segment type:	Uninitialized
; Segment permissions: Read/Write
; Segment alignment '32byte' can not be represented in assembly
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 407000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_407000	dd ?			; DATA XREF: sub_401130+8o
					; sub_401130+20w
dword_407004	dd ?			; DATA XREF: sub_401180+C1w
					; sub_401180+273r
dword_407008	dd ?			; DATA XREF: sub_401010:loc_401048w
					; sub_401180+260r
dword_40700C	dd ?			; DATA XREF: sub_401180+268w
					; sub_401180+282r
dword_407010	dd ?			; DATA XREF: sub_401130+3Aw
dword_407014	dd ?			; DATA XREF: sub_401130+10o
					; sub_401180+232r ...
dword_407018	dd ?			; DATA XREF: sub_401130+18o
					; sub_401180+1C6r ...
dword_40701C	dd ?			; DATA XREF: sub_401130+2Ao
					; sub_401180:loc_401328r ...
; HANDLE hEvent
hEvent		dd ?			; DATA XREF: sub_4018D0+8Bw
					; sub_4018D0+90r ...
dword_407024	dd ?			; DATA XREF: sub_4029A3+80r
					; sub_402B54+27w ...
dword_407028	dd ?			; DATA XREF: sub_4027DC+102w
					; sub_402A9F+Dr ...
dword_40702C	dd ?			; DATA XREF: sub_401010+22w
dword_407030	dd ?			; DATA XREF: sub_401010+18w
dword_407034	dd ?			; DATA XREF: sub_401010+Ew
TlsIndex	dd ?			; DATA XREF: .tls:TlsIndex_ptro
dword_40703C	dd ?			; DATA XREF: sub_401010+2Cw
dword_407040	dd ?			; DATA XREF: sub_401010+3Dr
					; sub_401180+61r ...
dword_407044	dd ?			; DATA XREF: sub_401010+5Er
dword_407048	dd ?			; DATA XREF: sub_401130+3r
dword_40704C	dd ?			; DATA XREF: sub_401130+25r
dword_407050	dd ?			; DATA XREF: sub_401180+11Bw
					; TopLevelExceptionFilter:loc_40354Dr
dword_407054	dd ?			; DATA XREF: .text:00403643r
					; sub_403690+4w
dword_407058	dd ?			; DATA XREF: sub_4039A0r
					; sub_4039A0+19w
dword_40705C	dd ?			; DATA XREF: sub_403760+Er
					; sub_403760:loc_403826w ...
dword_407060	dd ?			; DATA XREF: sub_403760+1Fr
					; sub_403760+60r ...
dword_407064	dd ?			; DATA XREF: sub_403D00r
					; sub_403D00:loc_403D10w
		align 20h
dword_407080	dd 2Bh dup(?)		; DATA XREF: .rdata:004069A8o
dword_40712C	dd ?			; DATA XREF: .text:00403E0Aw
		dd 2 dup(?)
dword_407138	dd ?			; DATA XREF: .text:00403DF6w
		dd 2 dup(?)
dword_407144	dd ?			; DATA XREF: .text:00403DDCw
		dd 86h dup(?)
dword_407360	dd ?			; DATA XREF: .text:00403DE2w
					; .rdata:off_4069A4o
dword_407364	dd ?			; DATA XREF: .text:00403DECw
		dd ?
dword_40736C	dd ?			; DATA XREF: .text:00403DFBw
		dd 14h dup(?)
dword_4073C0	dd ?			; DATA XREF: sub_403E60+16r
					; .text:00403F32r ...
dword_4073C4	dd ?			; DATA XREF: .text:00403EEAr
					; .text:00403F77r ...
; struct _RTL_CRITICAL_SECTION CriticalSection
CriticalSection	_RTL_CRITICAL_SECTION <?> ; DATA XREF: sub_403E60+9o
					; sub_403E60:loc_403EB9o ...
		dd ?
dword_4073E4	dd ?			; DATA XREF: sub_404440r
					; .text:00404454w
dword_4073E8	dd ?			; DATA XREF: sub_401180:loc_401304w
dword_4073EC	dd ?			; DATA XREF: sub_401180+136w
		align 20h
; char Dest[]
Dest		dd 40h dup(?)		; DATA XREF: sub_402C69+43o
					; sub_402C69+179o ...
; struct _SERVICE_STATUS ServiceStatus
ServiceStatus	_SERVICE_STATUS	<?>	; DATA XREF: sub_4029A3:loc_4029D2w
					; sub_402A9F+7Eo ...
; SERVICE_STATUS_HANDLE	hServiceStatus
hServiceStatus	dd ?			; DATA XREF: sub_4029A3+1Fw
					; sub_4029A3+24r ...
dword_407520	dd ?			; DATA XREF: sub_401010+64w
					; sub_403400+3Br ...
dword_407524	dd ?			; DATA XREF: sub_401010+69w
					; sub_403400+4r ...
dword_407528	dd ?			; DATA XREF: sub_401180+98w
					; sub_401180:loc_401463w
dword_40752C	dd ?			; DATA XREF: sub_401180+A4r
					; sub_401180:loc_401234r ...
		align 1000h
_bss		ends

;
; Imports from ADVAPI32.dll
;
; Section 5. (virtual address 00008000)
; Virtual size			: 00000ADC (   2780.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00004A00
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Externs
; _idata
; BOOL __stdcall CloseServiceHandle(SC_HANDLE hSCObject)
		extrn CloseServiceHandle:dword ; CODE XREF: sub_402C69+16Ap
					; sub_402C69+1A7p ...
; BOOL __stdcall ControlService(SC_HANDLE hService, DWORD dwControl, LPSERVICE_STATUS lpServiceStatus)
		extrn ControlService:dword ; CODE XREF:	sub_402F89+83p
					; DATA XREF: sub_402F89+7Er
; SC_HANDLE __stdcall CreateServiceA(SC_HANDLE hSCManager, LPCSTR lpServiceName, LPCSTR	lpDisplayName, DWORD dwDesiredAccess, DWORD dwServiceType, DWORD dwStartType, DWORD dwErrorControl, LPCSTR lpBinaryPathName, LPCSTR lpLoadOrderGroup, LPDWORD lpdwTagId, LPCSTR	lpDependencies,	LPCSTR lpServiceStartName, LPCSTR lpPassword)
		extrn CreateServiceA:dword ; CODE XREF:	sub_402C69+13Dp
					; DATA XREF: sub_402C69+138r
; BOOL __stdcall DeleteService(SC_HANDLE hService)
		extrn DeleteService:dword ; CODE XREF: sub_402F89+144p
					; DATA XREF: sub_402F89+13Fr
; BOOL __stdcall DeregisterEventSource(HANDLE hEventLog)
		extrn DeregisterEventSource:dword ; CODE XREF: sub_402B54+FFp
					; DATA XREF: sub_402B54+FAr
; BOOL __stdcall InitializeSecurityDescriptor(PSECURITY_DESCRIPTOR pSecurityDescriptor,	DWORD dwRevision)
		extrn InitializeSecurityDescriptor:dword ; CODE	XREF: sub_4015EE+56p
					; DATA XREF: sub_4015EE+51r
; SC_HANDLE __stdcall OpenSCManagerA(LPCSTR lpMachineName, LPCSTR lpDatabaseName, DWORD	dwDesiredAccess)
		extrn OpenSCManagerA:dword ; CODE XREF:	sub_402C69+BEp
					; sub_402E4A+29p ...
; SC_HANDLE __stdcall OpenServiceA(SC_HANDLE hSCManager, LPCSTR	lpServiceName, DWORD dwDesiredAccess)
		extrn OpenServiceA:dword ; CODE	XREF: sub_402E4A+7Dp
					; sub_402F89+56p
					; DATA XREF: ...
; BOOL __stdcall QueryServiceStatus(SC_HANDLE hService,	LPSERVICE_STATUS lpServiceStatus)
		extrn QueryServiceStatus:dword ; CODE XREF: sub_402F89+F5p
					; DATA XREF: sub_402F89+F0r
; LSTATUS __stdcall RegCloseKey(HKEY hKey)
		extrn RegCloseKey:dword	; CODE XREF: sub_4018D0+2C3p
					; sub_4018D0+386p ...
; LSTATUS __stdcall RegOpenKeyExA(HKEY hKey, LPCSTR lpSubKey, DWORD ulOptions, REGSAM samDesired, PHKEY	phkResult)
		extrn RegOpenKeyExA:dword ; CODE XREF: sub_4018D0+1B3p
					; DATA XREF: sub_4018D0+1AEr
; LSTATUS __stdcall RegQueryValueExA(HKEY hKey,	LPCSTR lpValueName, LPDWORD lpReserved,	LPDWORD	lpType,	LPBYTE lpData, LPDWORD lpcbData)
		extrn RegQueryValueExA:dword ; CODE XREF: sub_4018D0+250p
					; sub_4018D0+313p ...
; HANDLE __stdcall RegisterEventSourceA(LPCSTR lpUNCServerName,	LPCSTR lpSourceName)
		extrn RegisterEventSourceA:dword ; CODE	XREF: sub_402B54+4Cp
					; DATA XREF: sub_402B54+47r
; SERVICE_STATUS_HANDLE	__stdcall RegisterServiceCtrlHandlerA(LPCSTR lpServiceName, LPHANDLER_FUNCTION lpHandlerProc)
		extrn RegisterServiceCtrlHandlerA:dword	; CODE XREF: sub_4029A3+1Ap
					; DATA XREF: sub_4029A3+15r
; BOOL __stdcall ReportEventA(HANDLE hEventLog,	WORD wType, WORD wCategory, DWORD dwEventID, PSID lpUserSid, WORD wNumStrings, DWORD dwDataSize, LPCSTR	*lpStrings, LPVOID lpRawData)
		extrn ReportEventA:dword ; CODE	XREF: sub_402B54+EFp
					; DATA XREF: sub_402B54+EAr
; BOOL __stdcall SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR	pSecurityDescriptor, BOOL bDaclPresent,	PACL pDacl, BOOL bDaclDefaulted)
		extrn SetSecurityDescriptorDacl:dword ;	CODE XREF: sub_4015EE+8Cp
					; DATA XREF: sub_4015EE+87r
; BOOL __stdcall SetServiceStatus(SERVICE_STATUS_HANDLE	hServiceStatus,	LPSERVICE_STATUS lpServiceStatus)
		extrn SetServiceStatus:dword ; CODE XREF: sub_402A9F+8Ep
					; DATA XREF: sub_402A9F+89r
; BOOL __stdcall StartServiceA(SC_HANDLE hService, DWORD dwNumServiceArgs, LPCSTR *lpServiceArgVectors)
		extrn StartServiceA:dword ; CODE XREF: sub_402E4A+D1p
					; DATA XREF: sub_402E4A+CCr
; BOOL __stdcall StartServiceCtrlDispatcherA(const SERVICE_TABLE_ENTRYA	*lpServiceStartTable)
		extrn StartServiceCtrlDispatcherA:dword	; CODE XREF: sub_4027DC+19Bp
					; DATA XREF: sub_4027DC+196r

;
; Imports from KERNEL32.dll
;
; BOOL __stdcall CloseHandle(HANDLE hObject)
		extrn CloseHandle:dword	; CODE XREF: .text:00401719p
					; sub_4018D0+D4Cp ...
; HANDLE __stdcall CreateEventA(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState,	LPCSTR lpName)
		extrn CreateEventA:dword ; CODE	XREF: sub_401691+42p
					; sub_401691+6Ap
					; DATA XREF: ...
; HANDLE __stdcall CreateFileA(LPCSTR lpFileName, DWORD	dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes,	DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE	hTemplateFile)
		extrn CreateFileA:dword	; CODE XREF: sub_4018D0+B2Dp
					; DATA XREF: sub_4018D0+B28r
; BOOL __stdcall CreateProcessA(LPCSTR lpApplicationName, LPSTR	lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES	lpThreadAttributes, BOOL bInheritHandles, DWORD	dwCreationFlags, LPVOID	lpEnvironment, LPCSTR lpCurrentDirectory, LPSTARTUPINFOA lpStartupInfo,	LPPROCESS_INFORMATION lpProcessInformation)
		extrn CreateProcessA:dword ; CODE XREF:	sub_4018D0+CD6p
					; DATA XREF: sub_4018D0+CD1r
; void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn DeleteCriticalSection:dword ; CODE XREF: sub_404010+49p
					; DATA XREF: sub_404010+49r
; void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn EnterCriticalSection:dword ; CODE	XREF: sub_403E60+10p
					; .text:00403F2Cp ...
; BOOL __stdcall FindClose(HANDLE hFindFile)
		extrn FindClose:dword	; CODE XREF: sub_4018D0+97Fp
					; sub_4018D0+A25p ...
; HANDLE __stdcall FindFirstFileA(LPCSTR lpFileName, LPWIN32_FIND_DATAA	lpFindFileData)
		extrn FindFirstFileA:dword ; CODE XREF:	sub_4018D0+86Ep
					; DATA XREF: sub_4018D0+869r
; BOOL __stdcall FindNextFileA(HANDLE hFindFile, LPWIN32_FIND_DATAA lpFindFileData)
		extrn FindNextFileA:dword ; CODE XREF: sub_4018D0+DF4p
					; DATA XREF: sub_4018D0+DEFr
; DWORD	__stdcall FormatMessageA(DWORD dwFlags,	LPCVOID	lpSource, DWORD	dwMessageId, DWORD dwLanguageId, LPSTR lpBuffer, DWORD nSize, va_list *Arguments)
		extrn FormatMessageA:dword ; CODE XREF:	sub_403220+4Cp
					; DATA XREF: sub_403220+47r
; HANDLE __stdcall GetCurrentProcess()
		extrn GetCurrentProcess:dword ;	CODE XREF: .text:00403E38p
					; DATA XREF: .text:00403E38r
; DWORD	__stdcall GetCurrentProcessId()
		extrn GetCurrentProcessId:dword	; CODE XREF: sub_403D20+49p
					; DATA XREF: sub_403D20+49r
; DWORD	__stdcall GetCurrentThreadId()
		extrn GetCurrentThreadId:dword ; CODE XREF: sub_403D20+51p
					; DATA XREF: sub_403D20+51r
; DWORD	__stdcall GetLastError()
		extrn GetLastError:dword ; CODE	XREF: sub_402B54+25p
					; sub_403220+13p ...
; DWORD	__stdcall GetModuleFileNameA(HMODULE hModule, LPSTR lpFilename,	DWORD nSize)
		extrn GetModuleFileNameA:dword ; CODE XREF: sub_402C69+32p
					; DATA XREF: sub_402C69+2Dr
; HMODULE __stdcall GetModuleHandleA(LPCSTR lpModuleName)
		extrn GetModuleHandleA:dword ; CODE XREF: sub_401500+16p
					; DATA XREF: sub_401500+16r
; FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName)
		extrn GetProcAddress:dword ; CODE XREF:	sub_401500+33p
					; DATA XREF: sub_401500+33r
; void __stdcall GetStartupInfoA(LPSTARTUPINFOA	lpStartupInfo)
		extrn GetStartupInfoA:dword ; CODE XREF: sub_401180+2F3p
					; sub_4018D0+C26p
					; DATA XREF: ...
; HANDLE __stdcall GetStdHandle(DWORD nStdHandle)
		extrn GetStdHandle:dword ; CODE	XREF: sub_4018D0+C54p
					; DATA XREF: sub_4018D0+C4Fr
; void __stdcall GetSystemTimeAsFileTime(LPFILETIME lpSystemTimeAsFileTime)
		extrn GetSystemTimeAsFileTime:dword ; CODE XREF: sub_403D20+38p
					; DATA XREF: sub_403D20+38r
; DWORD	__stdcall GetTickCount()
		extrn GetTickCount:dword ; CODE	XREF: sub_403D20+5Ap
					; DATA XREF: sub_403D20+5Ar
; void __stdcall InitializeCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn InitializeCriticalSection:dword ;	CODE XREF: sub_404010+77p
					; DATA XREF: sub_404010+77r
; void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection)
		extrn LeaveCriticalSection:dword ; CODE	XREF: sub_403E60+60p
					; .text:00403F4Ap ...
; HLOCAL __stdcall LocalFree(HLOCAL hMem)
		extrn LocalFree:dword	; CODE XREF: sub_403220+C3p
					; DATA XREF: sub_403220+BEr
; BOOL __stdcall QueryPerformanceCounter(LARGE_INTEGER *lpPerformanceCount)
		extrn QueryPerformanceCounter:dword ; CODE XREF: sub_403D20+69p
					; DATA XREF: sub_403D20+69r
; BOOL __stdcall SetConsoleCtrlHandler(PHANDLER_ROUTINE	HandlerRoutine,	BOOL Add)
		extrn SetConsoleCtrlHandler:dword ; CODE XREF: sub_403196+3Ap
					; DATA XREF: sub_403196+35r
; BOOL __stdcall SetEvent(HANDLE hEvent)
		extrn SetEvent:dword	; CODE XREF: sub_4027B7+1Cp
					; DATA XREF: sub_4027B7+17r
; DWORD	__stdcall SetFilePointer(HANDLE	hFile, LONG lDistanceToMove, PLONG lpDistanceToMoveHigh, DWORD dwMoveMethod)
		extrn SetFilePointer:dword ; CODE XREF:	sub_4018D0+BBBp
					; DATA XREF: sub_4018D0+BB6r
; void __stdcall SetLastError(DWORD dwErrCode)
		extrn SetLastError:dword ; CODE	XREF: sub_4018D0+1CCp
					; sub_4018D0+274p ...
; LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter)
		extrn SetUnhandledExceptionFilter:dword	; CODE XREF: sub_401180+112p
					; .text:00403E1Fp
					; DATA XREF: ...
; void __stdcall Sleep(DWORD dwMilliseconds)
		extrn Sleep:dword	; CODE XREF: sub_401180+91p
					; sub_4018D0+D62p ...
; BOOL __stdcall TerminateProcess(HANDLE hProcess, UINT	uExitCode)
		extrn TerminateProcess:dword ; CODE XREF: .text:00403E49p
					; DATA XREF: .text:00403E49r
; LPVOID __stdcall TlsGetValue(DWORD dwTlsIndex)
		extrn TlsGetValue:dword	; CODE XREF: sub_403E60+35p
					; DATA XREF: sub_403E60+35r
; LONG __stdcall UnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo)
		extrn UnhandledExceptionFilter:dword ; CODE XREF: .text:00403E2Fp
					; DATA XREF: .text:00403E2Fr
; BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect)
		extrn VirtualProtect:dword ; CODE XREF:	sub_403760+147p
					; sub_403760+187p ...
; SIZE_T __stdcall VirtualQuery(LPCVOID	lpAddress, PMEMORY_BASIC_INFORMATION lpBuffer, SIZE_T dwLength)
		extrn VirtualQuery:dword ; CODE	XREF: sub_403760+A7p
					; sub_403760+DCp ...
; DWORD	__stdcall WaitForSingleObject(HANDLE hHandle, DWORD dwMilliseconds)
		extrn WaitForSingleObject:dword	; CODE XREF: sub_4018D0+E7p
					; sub_4018D0+E88p
					; DATA XREF: ...
; int __stdcall	lstrlenA(LPCSTR	lpString)
		extrn lstrlenA:dword	; CODE XREF: sub_403220+7Dp
					; DATA XREF: sub_403220+78r

;
; Imports from msvcrt.dll
;
		extrn __imp___dllonexit:dword ;	DATA XREF: __dllonexitr
		extrn __imp___getmainargs:dword	; DATA XREF: __getmainargsr
		extrn __initenv:dword	; DATA XREF: sub_401180+238r
		extrn __lconv_init:dword ; DATA	XREF: sub_4033D0r
		extrn __imp___set_app_type:dword ; DATA	XREF: __set_app_typer
		extrn __imp___setusermatherr:dword ; DATA XREF:	__setusermatherrr
		extrn _acmdln:dword	; DATA XREF: sub_401180+131r
		extrn __imp__amsg_exit:dword ; DATA XREF: _amsg_exitr
		extrn __imp__cexit:dword ; DATA	XREF: _cexitr
; int fmode
		extrn _fmode:dword	; DATA XREF: sub_401010+6Er
		extrn __imp__initterm:dword ; DATA XREF: _inittermr
		extrn _iob:dword	; DATA XREF: sub_4036A0+3Fr
					; sub_403700+4r ...
		extrn __imp__lock:dword	; DATA XREF: _lockr
; _onexit_t __cdecl onexit(_onexit_t Func)
		extrn _onexit:dword	; CODE XREF: sub_403400+A7p
					; DATA XREF: sub_403400+A7r
; int __cdecl stricmp(const char *Str1,	const char *Str2)
		extrn _stricmp:dword	; CODE XREF: sub_401720+93p
					; sub_4018D0+6CDp ...
		extrn __imp__unlock:dword ; DATA XREF: _unlockr
; void *__cdecl	calloc(size_t NumOfElements, size_t SizeOfElements)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; void __cdecl __noreturn exit(int Code)
		extrn __imp_exit:dword	; DATA XREF: exitr
; int fprintf(FILE *File, const	char *Format, ...)
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl free(void *Memory)
		extrn __imp_free:dword	; DATA XREF: freer
; size_t __cdecl fwrite(const void *Str, size_t	Size, size_t Count, FILE *File)
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	malloc(size_t Size)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	memcpy(void *Dst, const	void *Src, size_t Size)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	memset(void *Dst, int Val, size_t Size)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; int printf(const char	*Format, ...)
		extrn __imp_printf:dword ; DATA	XREF: printfr
; int __cdecl putchar(int Ch)
		extrn __imp_putchar:dword ; DATA XREF: putcharr
; int __cdecl puts(const char *Str)
		extrn __imp_puts:dword	; DATA XREF: putsr
		extrn __imp_signal:dword ; DATA	XREF: signalr
; int sprintf(char *Dest, const	char *Format, ...)
		extrn __imp_sprintf:dword ; DATA XREF: sprintfr
; char *__cdecl	strcat(char *Dest, const char *Source)
		extrn __imp_strcat:dword ; DATA	XREF: strcatr
; char *__cdecl	strcpy(char *Dest, const char *Source)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; size_t __cdecl strlen(const char *Str)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl strncmp(const char *Str1,	const char *Str2, size_t MaxCount)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; int __cdecl _vsnprintf(char *DstBuf, size_t MaxCount,	const char *Format, va_list ArgList)
		extrn __imp__vsnprintf:dword ; DATA XREF: _vsnprintfr
; void __cdecl abort()
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList)
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


; Section 6. (virtual address 00009000)
; Virtual size			: 00000034 (	 52.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00005600
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_CRT		segment	dword public 'DATA' use32
		assume cs:_CRT
		;org 409000h
dword_409000	dd 0			; DATA XREF: sub_401180+2C5o
		dd offset sub_401130
dword_409008	dd 0			; DATA XREF: sub_401180:loc_40143Do
dword_40900C	dd 0			; DATA XREF: sub_401180+313o
		dd offset sub_401010
		dd offset sub_4033D0
dword_409018	dd 2 dup(0)		; DATA XREF: sub_401180+30Bo
TlsCallbacks	dd offset TlsCallback_0	; DATA XREF: .tls:TlsCallbacks_ptro
		dd offset TlsCallback_1
		dd 0
		align 10h
dword_409030	dd 74h dup(0)		; DATA XREF: TlsCallback_0:loc_403371o
					; TlsCallback_0+36o ...
		align 1000h
_CRT		ends

; Section 7. (virtual address 0000A000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00005800
; Flags	C0300040: Data Readable	Writable
; Alignment	: 4 bytes
; ===========================================================================

; Segment type:	Pure data
; Segment permissions: Read/Write
_tls		segment	dword public 'DATA' use32
		assume cs:_tls
		;org 40A000h
TlsStart	dd 0			; DATA XREF: .tls:TlsDirectoryo
TlsDirectory	dd offset TlsStart
TlsEnd_ptr	dd offset TlsEnd
TlsIndex_ptr	dd offset TlsIndex
TlsCallbacks_ptr dd offset TlsCallbacks
TlsSizeOfZeroFill dd 0
TlsCharacteristics dd 0
TlsEnd		dd 79h dup(0)		; DATA XREF: .tls:TlsEnd_ptro
		align 1000h
_tls		ends


		end start
